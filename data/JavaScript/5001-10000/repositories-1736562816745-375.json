{
  "metadata": {
    "timestamp": 1736562816745,
    "page": 375,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "muaz-khan/RecordRTC",
      "stars": 6641,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1083984375,
          "content": "# Node\nnode_modules\n\n# bower\nbower_components\n\n.DS_Store\n\n!RecordRTC-to-Nodejs/node_modules\n\npackage-lock.json\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 0.6982421875,
          "content": "{\n  \"browser\": true,\n  \"camelcase\": true,\n  \"curly\": true,\n  \"devel\": true,\n  \"eqeqeq\": true,\n  \"forin\": false,\n  \"globalstrict\": true,\n  \"quotmark\": \"single\",\n  \"undef\": true,\n  \"globals\": {\n    \"RecordRTC\": true,\n    \"MRecordRTC\": true,\n    \"Storage\": true,\n    \"StereoRecorder\": true,\n    \"StereoAudioRecorder\": true,\n    \"CanvasRecorder\": true,\n    \"WhammyRecorder\": true,\n    \"Whammy\": true,\n    \"DiskStorage\": true,\n    \"GifRecorder\": true,\n    \"requestAnimationFrame\": true,\n    \"cancelAnimationFrame\": true,\n    \"AudioContext\": true,\n    \"URL\": true,\n    \"IsChrome\": true,\n    \"mergeProps\": true,\n    \"reformatProps\": true,\n    \"bytesToSize\": true,\n    \"FileReaderSync\": true,\n    \"postMessage\": true\n  }\n}\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.1376953125,
          "content": "# ignore everything\n*\n\n# but not these files...\n!RecordRTC.js\n!RecordRTC.min.js\n!index.html\n!package.json\n!bower.json\n!npm-test.js\n!README.md"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.30078125,
          "content": "language: node_js\nnode_js:\n  - \"8\"\n  - \"10\"\ngit:\n  depth: 5\ncache:\n  directories:\n    node_modules\ninstall: npm install\nbefore_script:\n  - npm install grunt-cli@0.1.13 -g\n  - npm install grunt@0.4.5\n  - grunt\n  - npm install protractor@2.5.1\nafter_failure: npm install && grunt\nmatrix:\n  fast_finish: true\n  "
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.7080078125,
          "content": "## Contribute to RecordRTC!\n\n```sh\nmkdir node_modules\nnpm install --save-dev\n\n# install grunt for code style verifications\nnpm install grunt-cli@0.1.13 -g\n\nnpm install grunt@0.4.5\nnpm install grunt-bump@0.7.0\nnpm install grunt-cli@0.1.13\nnpm install grunt-contrib-clean@0.6.0\nnpm install grunt-contrib-concat@0.5.1\nnpm install grunt-contrib-copy@0.8.2\nnpm install grunt-contrib-uglify@0.11.0\nnpm install grunt-contrib-watch@1.1.0\nnpm install grunt-jsbeautifier@0.2.10\nnpm install grunt-replace@0.11.0\nnpm install load-grunt-tasks@3.4.0\n```\n\n## Compile distribution\n\n```sh\ngrunt\n\n# or auto compile\ngrunt watch\n```\n\nIt will generate `RecordRTC.js` and `RecordRTC.min.js` in the main directory.\n\n# Success? Make a pull request!\n"
        },
        {
          "name": "Canvas-Recording",
          "type": "tree",
          "content": null
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 8.08203125,
          "content": "'use strict';\n\nmodule.exports = function(grunt) {\n    require('load-grunt-tasks')(grunt, {\n        pattern: 'grunt-*',\n        config: 'package.json',\n        scope: 'devDependencies'\n    });\n\n    var versionNumber = grunt.file.readJSON('package.json').version;\n\n    var banner = '\\'use strict\\';\\n\\n';\n    banner += '// Last time updated: <%= grunt.template.today(\"UTC:yyyy-mm-dd h:MM:ss TT Z\") %>\\n\\n';\n\n    banner += '// ________________\\n';\n    banner += '// RecordRTC v' + versionNumber + '\\n\\n';\n\n    banner += '// Open-Sourced: https://github.com/muaz-khan/RecordRTC\\n\\n';\n\n    banner += '// --------------------------------------------------\\n';\n    banner += '// Muaz Khan     - www.MuazKhan.com\\n';\n    banner += '// MIT License   - www.WebRTC-Experiment.com/licence\\n';\n    banner += '// --------------------------------------------------\\n\\n';\n\n    // configure project\n    grunt.initConfig({\n        // make node configurations available\n        pkg: grunt.file.readJSON('package.json'),\n        concat: {\n            options: {\n                stripBanners: true,\n                separator: '\\n',\n                banner: banner\n            },\n            dist: {\n                src: [\n                    'dev/RecordRTC.js',\n                    'dev/RecordRTC.IndexedDB.js',\n                    'dev/RecordRTC-Configuration.js',\n                    'dev/GetRecorderType.js',\n                    'dev/MRecordRTC.js',\n                    'dev/amd.js',\n                    'dev/Cross-Browser-Declarations.js',\n                    'dev/Storage.js',\n                    'dev/isMediaRecorderCompatible.js',\n                    'dev/MediaStreamRecorder.js',\n                    'dev/StereoAudioRecorder.js',\n                    'dev/CanvasRecorder.js',\n                    'dev/WhammyRecorder.js',\n                    'dev/Whammy.js',\n                    'dev/DiskStorage.js',\n                    'dev/GifRecorder.js',\n                    'dev/MultiStreamsMixer.js', // github/muaz-khan/MultiStreamsMixer\n                    'dev/MultiStreamRecorder.js',\n                    'dev/RecordRTC.promises.js',\n                    'dev/WebAssemblyRecorder.js' // grunt-contrib-uglify fails; maybe we should use uglify-es instead?\n                ],\n                dest: './temp/RecordRTC.js',\n            },\n        },\n        replace: {\n            dist: {\n                options: {\n                    patterns: [{\n                        match: 'version',\n                        replacement: versionNumber\n                    }]\n                },\n                files: [{\n                    expand: true,\n                    flatten: true,\n                    src: ['./temp/RecordRTC.js'],\n                    dest: './'\n                }]\n            }\n        },\n        clean: ['./temp'],\n        jshint: {\n            options: {\n                globals: {\n                    webkitIndexedDB: true,\n                    mozIndexedDB: true,\n                    OIndexedDB: true,\n                    msIndexedDB: true,\n                    indexedDB: true,\n                    FileReaderSync: true,\n                    postMessage: true,\n                    Whammy: true,\n                    WhammyRecorder: true,\n                    WebAssemblyRecorder: true,\n                    MediaStreamRecorder: true,\n                    StereoAudioRecorder: true,\n                    RecordRTC: true,\n                    MRecordRTC: true,\n                    URL: true,\n                    webkitURL: true,\n                    DiskStorage: true,\n                    requestAnimationFrame: true,\n                    cancelAnimationFrame: true,\n                    webkitRequestAnimationFrame: true,\n                    webkitCancelAnimationFrame: true,\n                    mozRequestAnimationFrame: true,\n                    mozCancelAnimationFrame: true,\n                    msRequestAnimationFrame: true,\n                    msCancelAnimationFrame: true,\n                    MediaStream: true,\n                    webkitMediaStream: true,\n                    html2canvas: true,\n                    GifRecorder: true,\n                    GIFEncoder: true,\n                    MediaRecorder: true,\n                    webkitAudioContext: true,\n                    mozAudioContext: true,\n                    AudioContext: true,\n                    Promise: true,\n                    JSON: true,\n                    typeof: true,\n                    define: true,\n                    EBML: true,\n                    ReadableStream: true,\n                    WritableStream: true\n                },\n                browser: true,\n                browserify: true,\n                node: true,\n                camelcase: true,\n                curly: true,\n                devel: true,\n                eqeqeq: true,\n                forin: false,\n                globalstrict: true,\n                quotmark: true,\n                undef: true,\n                //es5: true,\n                funcscope: true,\n                shadow: true, //----should be false?\n                typed: true,\n                worker: true\n            },\n            files: ['RecordRTC.js']\n        },\n        uglify: {\n            options: {\n                mangle: false,\n                banner: banner\n            },\n            my_target: {\n                files: {\n                    'RecordRTC.min.js': ['RecordRTC.js']\n                }\n            }\n        },\n        copy: {\n            main: {\n                options: {\n                    flatten: true\n                },\n                files: {\n                    'RecordRTC.js': ['RecordRTC.js']\n                },\n            },\n        },\n        jsbeautifier: {\n            files: [\n                // 'RecordRTC.js',\n                'dev/*.js',\n                'Gruntfile.js'\n            ],\n            options: {\n                js: {\n                    braceStyle: \"collapse\",\n                    breakChainedMethods: false,\n                    e4x: false,\n                    evalCode: false,\n                    indentChar: \" \",\n                    indentLevel: 0,\n                    indentSize: 4,\n                    indentWithTabs: false,\n                    jslintHappy: false,\n                    keepArrayIndentation: false,\n                    keepFunctionIndentation: false,\n                    maxPreserveNewlines: 10,\n                    preserveNewlines: true,\n                    spaceBeforeConditional: true,\n                    spaceInParen: false,\n                    unescapeStrings: false,\n                    wrapLineLength: 0\n                },\n                html: {\n                    braceStyle: \"collapse\",\n                    indentChar: \" \",\n                    indentScripts: \"keep\",\n                    indentSize: 4,\n                    maxPreserveNewlines: 10,\n                    preserveNewlines: true,\n                    unformatted: [\"a\", \"sub\", \"sup\", \"b\", \"i\", \"u\"],\n                    wrapLineLength: 0\n                },\n                css: {\n                    indentChar: \" \",\n                    indentSize: 4\n                }\n            }\n        },\n        bump: {\n            options: {\n                files: ['package.json', 'bower.json'],\n                updateConfigs: [],\n                commit: true,\n                commitMessage: 'v%VERSION%',\n                commitFiles: ['package.json', 'bower.json'],\n                createTag: true,\n                tagName: '%VERSION%',\n                tagMessage: '%VERSION%',\n                push: false,\n                pushTo: 'upstream',\n                gitDescribeOptions: '--tags --always --abbrev=1 --dirty=-d'\n            }\n        },\n        watch: {\n            scripts: {\n                files: ['dev/*.js'],\n                tasks: ['concat', 'replace', 'jsbeautifier', 'jshint', 'copy', 'uglify', 'clean'],\n                options: {\n                    spawn: false,\n                },\n            }\n        }\n    });\n\n    // enable plugins\n\n    // set default tasks to run when grunt is called without parameters\n    // http://gruntjs.com/api/grunt.task\n    grunt.registerTask('default', ['concat', 'replace', 'jsbeautifier', 'jshint', 'copy', 'uglify', 'clean']);\n    grunt.loadNpmTasks('grunt-contrib-watch');\n};\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0869140625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013-2020 [Muaz Khan](https://github.com/muaz-khan)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MRecordRTC",
          "type": "tree",
          "content": null
        },
        {
          "name": "PHP-and-FFmpeg",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.880859375,
          "content": "# RecordRTC.js | [Live Demo](https://www.webrtc-experiment.com/RecordRTC/)\n\n**WebRTC JavaScript Library for Audio+Video+Screen+Canvas (2D+3D animation) Recording**\n\n[Chrome Extension](https://github.com/muaz-khan/Chrome-Extensions/tree/master/screen-recording) or [Dozens of Simple-Demos](https://www.webrtc-experiment.com/RecordRTC/simple-demos/) and [it is Open-Sourced](https://github.com/muaz-khan/RecordRTC) and has [API documentation](https://recordrtc.org/)\n\n[![npm](https://img.shields.io/npm/v/recordrtc.svg)](https://npmjs.org/package/recordrtc) [![downloads](https://img.shields.io/npm/dm/recordrtc.svg)](https://npmjs.org/package/recordrtc) [![Build Status: Linux](https://travis-ci.org/muaz-khan/RecordRTC.png?branch=master)](https://travis-ci.org/muaz-khan/RecordRTC)\n\n**A demo using promises:**\n\n```javascript\nlet stream = await navigator.mediaDevices.getUserMedia({video: true, audio: true});\nlet recorder = new RecordRTCPromisesHandler(stream, {\n    type: 'video'\n});\nrecorder.startRecording();\n\nconst sleep = m => new Promise(r => setTimeout(r, m));\nawait sleep(3000);\n\nawait recorder.stopRecording();\nlet blob = await recorder.getBlob();\ninvokeSaveAsDialog(blob);\n```\n\n**A demo using normal coding:**\n\n```javascript\nnavigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: true\n}).then(async function(stream) {\n    let recorder = RecordRTC(stream, {\n        type: 'video'\n    });\n    recorder.startRecording();\n\n    const sleep = m => new Promise(r => setTimeout(r, m));\n    await sleep(3000);\n\n    recorder.stopRecording(function() {\n        let blob = recorder.getBlob();\n        invokeSaveAsDialog(blob);\n    });\n});\n```\n\n* [Watch a YouTube video presentation/tutorial](https://www.youtube.com/watch?v=YrLzTgdJ-Kg)\n\n## Browsers Support\n\n| Browser        | Operating System                    | Features               |\n| -------------  |-------------                        |---------------------   |\n| Google Chrome  | Windows + macOS + Ubuntu + Android  | audio + video + screen |\n| Firefox        | Windows + macOS + Ubuntu + Android  | audio + video + screen |\n| Opera          | Windows + macOS + Ubuntu + Android  | audio + video + screen |\n| Edge (new)     | Windows (7 or 8 or 10) and MacOSX   | audio + video + screen |\n| Safari         | macOS + iOS (iPhone/iPad)           | audio + video          |\n\n## Codecs Support\n\n| Browser       | Video               | Audio            |\n| ------------- |-------------        |-------------     |\n| Chrome        | VP8, VP9, H264, MKV | OPUS/VORBIS, PCM |\n| Opera         | VP8, VP9, H264, MKV | OPUS/VORBIS, PCM |\n| Firefox       | VP8, H264           | OPUS/VORBIS, PCM |\n| Safari        | VP8                 | OPUS/VORBIS, PCM |\n| Edge (new)    | VP8, VP9, H264, MKV | OPUS/VORBIS, PCM |\n\n\n## CDN\n\n```html\n<!-- recommended -->\n<script src=\"https://www.WebRTC-Experiment.com/RecordRTC.js\"></script>\n\n<!-- use 5.6.2 or any other version on cdnjs -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/RecordRTC/5.6.2/RecordRTC.js\"></script>\n\n<!-- NPM i.e. \"npm install recordrtc\" -->\n<script src=\"node_modules/recordrtc/RecordRTC.js\"></script>\n\n<!-- bower -->\n<script src=\"bower_components/recordrtc/RecordRTC.js\"></script>\n```\n\n## Configuration\n\n```javascript\nconst recorder = RecordRTC(stream, {\n     // audio, video, canvas, gif\n    type: 'video',\n\n    // audio/webm\n    // audio/webm;codecs=pcm\n    // video/mp4\n    // video/webm;codecs=vp9\n    // video/webm;codecs=vp8\n    // video/webm;codecs=h264\n    // video/x-matroska;codecs=avc1\n    // video/mpeg -- NOT supported by any browser, yet\n    // audio/wav\n    // audio/ogg  -- ONLY Firefox\n    // demo: simple-demos/isTypeSupported.html\n    mimeType: 'video/webm',\n\n    // MediaStreamRecorder, StereoAudioRecorder, WebAssemblyRecorder\n    // CanvasRecorder, GifRecorder, WhammyRecorder\n    recorderType: MediaStreamRecorder,\n\n    // disable logs\n    disableLogs: true,\n\n    // get intervals based blobs\n    // value in milliseconds\n    timeSlice: 1000,\n\n    // requires timeSlice above\n    // returns blob via callback function\n    ondataavailable: function(blob) {},\n\n    // auto stop recording if camera stops\n    checkForInactiveTracks: false,\n\n    // requires timeSlice above\n    onTimeStamp: function(timestamp) {},\n\n    // both for audio and video tracks\n    bitsPerSecond: 128000,\n\n    // only for audio track\n    // ignored when codecs=pcm\n    audioBitsPerSecond: 128000,\n\n    // only for video track\n    videoBitsPerSecond: 128000,\n\n    // used by CanvasRecorder and WhammyRecorder\n    // it is kind of a \"frameRate\"\n    frameInterval: 90,\n\n    // if you are recording multiple streams into single file\n    // this helps you see what is being recorded\n    previewStream: function(stream) {},\n\n    // used by CanvasRecorder and WhammyRecorder\n    // you can pass {width:640, height: 480} as well\n    video: HTMLVideoElement,\n\n    // used by CanvasRecorder and WhammyRecorder\n    canvas: {\n        width: 640,\n        height: 480\n    },\n\n    // used by StereoAudioRecorder\n    // the range 22050 to 96000.\n    sampleRate: 96000,\n\n    // used by StereoAudioRecorder\n    // the range 22050 to 96000.\n    // let us force 16khz recording:\n    desiredSampRate: 16000,\n\n    // used by StereoAudioRecorder\n    // Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\n    bufferSize: 16384,\n\n    // used by StereoAudioRecorder\n    // 1 or 2\n    numberOfAudioChannels: 2,\n\n    // used by WebAssemblyRecorder\n    frameRate: 30,\n\n    // used by WebAssemblyRecorder\n    bitrate: 128000,\n\n    // used by MultiStreamRecorder - to access HTMLCanvasElement\n    elementClass: 'multi-streams-mixer'\n});\n```\n\n## MediaStream parameter\n\nMediaStream parameter accepts following values:\n\n```javascript\nlet recorder = RecordRTC(MediaStream || HTMLCanvasElement || HTMLVideoElement || HTMLElement, {});\n```\n\n## API\n\n```javascript\nRecordRTC.prototype = {\n    // start the recording\n    startRecording: function() {},\n\n    // stop the recording\n    // getBlob inside callback function\n    stopRecording: function(blobURL) {},\n\n    // pause the recording\n    pauseRecording: function() {},\n\n    // resume the recording\n    resumeRecording: function() {},\n\n    // auto stop recording after specific duration\n    setRecordingDuration: function() {},\n\n    // reset recorder states and remove the data\n    reset: function() {},\n\n    // invoke save as dialog\n    save: function(fileName) {},\n\n    // returns recorded Blob\n    getBlob: function() {},\n\n    // returns Blob-URL\n    toURL: function() {},\n\n    // returns Data-URL\n    getDataURL: function(dataURL) {},\n\n    // returns internal recorder\n    getInternalRecorder: function() {},\n\n    // initialize the recorder [deprecated]\n    initRecorder: function() {},\n\n    // fired if recorder's state changes\n    onStateChanged: function(state) {},\n\n    // write recorded blob into indexed-db storage\n    writeToDisk: function(audio: Blob, video: Blob, gif: Blob) {},\n\n    // get recorded blob from indexded-db storage\n    getFromDisk: function(dataURL, type) {},\n\n    // [deprecated]\n    setAdvertisementArray: function([webp1, webp2]) {},\n\n    // [deprecated] clear recorded data\n    clearRecordedData: function() {},\n\n    // clear memory; clear everything\n    destroy: function() {},\n\n    // get recorder's state\n    getState: function() {},\n\n    // [readonly] property: recorder's state\n    state: string,\n\n    // recorded blob [readonly] property\n    blob: Blob,\n\n    // [readonly] array buffer; useful only for StereoAudioRecorder\n    buffer: ArrayBuffer,\n\n    // RecordRTC version [readonly]\n    version: string,\n\n    // [readonly] useful only for StereoAudioRecorder\n    bufferSize: integer,\n\n    // [readonly] useful only for StereoAudioRecorder\n    sampleRate: integer\n}\n```\n\nPlease check documentation here: [https://recordrtc.org/](https://recordrtc.org/)\n\n## Global APIs\n\n```javascript\n// \"bytesToSize\" returns human-readable size (in MB or GB)\nlet size = bytesToSize(recorder.getBlob().size);\n\n// to fix video seeking issues\ngetSeekableBlob(recorder.getBlob(), function(seekableBlob) {\n    invokeSaveAsDialog(seekableBlob);\n});\n\n// this function invokes save-as dialog\ninvokeSaveAsDialog(recorder.getBlob(), 'video.webm');\n\n// use these global variables to detect browser\nlet browserInfo = {isSafari, isChrome, isFirefox, isEdge, isOpera};\n\n// use this to store blobs into IndexedDB storage\nDiskStorage = {\n    init: function() {},\n    Fetch: function({audioBlob: Blob, videoBlob: Blob, gifBlob: Blob}) {},\n    Store: function({audioBlob: Blob, videoBlob: Blob, gifBlob: Blob}) {},\n    onError: function() {},\n    dataStoreName: function() {}\n};\n```\n\n## How to fix echo issues?\n\n1. Set `<video>.muted=true` and `<video>.volume=0`\n2. Pass `audio: {echoCancellation:true}` on getUserMedia\n\n## Wiki\n\n* [https://github.com/muaz-khan/RecordRTC/wiki](https://github.com/muaz-khan/RecordRTC/wiki)\n\n## Releases\n\n* [https://github.com/muaz-khan/RecordRTC/releases](https://github.com/muaz-khan/RecordRTC/releases)\n\n## Unit Tests\n\n* [https://travis-ci.org/muaz-khan/RecordRTC](https://travis-ci.org/muaz-khan/RecordRTC)\n\n## Issues/Questions?\n\n* Github: [https://github.com/muaz-khan/RecordRTC/issues](https://github.com/muaz-khan/RecordRTC/issues)\n* Disqus: [https://www.webrtc-experiment.com/RecordRTC/#ask](https://www.webrtc-experiment.com/RecordRTC/#ask)\n* Stackoverflow: [http://stackoverflow.com/questions/tagged/recordrtc](http://stackoverflow.com/questions/tagged/recordrtc)\n* Email: `muazkh => gmail`\n\n## Credits\n\n| Library     | Usage |\n| ------------- |------------|\n| [Recorderjs](https://github.com/mattdiamond/Recorderjs) | StereoAudioRecorder |\n| [webm-wasm](https://github.com/GoogleChromeLabs/webm-wasm) | WebAssemblyRecorder |\n| [jsGif](https://github.com/antimatter15/jsgif) | GifRecorder |\n| [whammy](https://github.com/antimatter15/whammy) | WhammyRecorder |\n\n## Spec & Reference\n\n1. [MediaRecorder API](https://w3c.github.io/mediacapture-record/MediaRecorder.html)\n2. [Web Audio API](https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html)\n3. [Canvas2D](http://www.w3.org/html/wg/drafts/2dcontext/html5_canvas/)\n4. [Media Capture and Streams](http://www.w3.org/TR/mediacapture-streams/)\n\n## Who is using RecordRTC?\n\n| Framework     | Github               | Article            |\n| ------------- |-------------        |-------------     |\n| Angular2      | [github](https://github.com/ShankarSumanth/Angular2-RecordRTC) | [article](https://medium.com/@SumanthShankar/integrate-recordrtc-with-angular-2-typescript-942c9c4ca93f#.7x5yf2nr5) |\n| React.js       | [github](https://github.com/szwang/recordrtc-react) | [article]([http://suzannewang.com/recordrtc/](https://web.archive.org/web/20220819225619/https://suzannewang.com/recordrtc/)) |\n| Video.js      | [github](https://github.com/collab-project/videojs-record) | None |\n| Meteor        | [github](https://github.com/launchbricklabs/recordrtc-meteor-demo) | None |\n\n## License\n\n[RecordRTC.js](https://github.com/muaz-khan/RecordRTC) is released under [MIT license](https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE) . Copyright (c) [Muaz Khan](https://MuazKhan.com).\n"
        },
        {
          "name": "RecordRTC-over-Socketio",
          "type": "tree",
          "content": null
        },
        {
          "name": "RecordRTC-to-ASPNETMVC",
          "type": "tree",
          "content": null
        },
        {
          "name": "RecordRTC-to-Nodejs",
          "type": "tree",
          "content": null
        },
        {
          "name": "RecordRTC-to-PHP",
          "type": "tree",
          "content": null
        },
        {
          "name": "RecordRTC.js",
          "type": "blob",
          "size": 189.7177734375,
          "content": "'use strict';\n\n// Last time updated: 2024-01-03 12:51:19 PM UTC\n\n// ________________\n// RecordRTC v5.6.3\n\n// Open-Sourced: https://github.com/muaz-khan/RecordRTC\n\n// --------------------------------------------------\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// --------------------------------------------------\n\n// ____________\n// RecordRTC.js\n\n/**\n * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. \n * @summary Record audio, video or screen inside the browser.\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\n * @author {@link https://MuazKhan.com|Muaz Khan}\n * @typedef RecordRTC\n * @class\n * @example\n * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {\n *     type: 'video', // audio or video or gif or canvas\n *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc\n * });\n * recorder.startRecording();\n * @see For further information:\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}\n */\n\nfunction RecordRTC(mediaStream, config) {\n    if (!mediaStream) {\n        throw 'First parameter is required.';\n    }\n\n    config = config || {\n        type: 'video'\n    };\n\n    config = new RecordRTCConfiguration(mediaStream, config);\n\n    // a reference to user's recordRTC object\n    var self = this;\n\n    function startRecording(config2) {\n        if (!config.disableLogs) {\n            console.log('RecordRTC version: ', self.version);\n        }\n\n        if (!!config2) {\n            // allow users to set options using startRecording method\n            // config2 is similar to main \"config\" object (second parameter over RecordRTC constructor)\n            config = new RecordRTCConfiguration(mediaStream, config2);\n        }\n\n        if (!config.disableLogs) {\n            console.log('started recording ' + config.type + ' stream.');\n        }\n\n        if (mediaRecorder) {\n            mediaRecorder.clearRecordedData();\n            mediaRecorder.record();\n\n            setState('recording');\n\n            if (self.recordingDuration) {\n                handleRecordingDuration();\n            }\n            return self;\n        }\n\n        initRecorder(function() {\n            if (self.recordingDuration) {\n                handleRecordingDuration();\n            }\n        });\n\n        return self;\n    }\n\n    function initRecorder(initCallback) {\n        if (initCallback) {\n            config.initCallback = function() {\n                initCallback();\n                initCallback = config.initCallback = null; // recorder.initRecorder should be call-backed once.\n            };\n        }\n\n        var Recorder = new GetRecorderType(mediaStream, config);\n\n        mediaRecorder = new Recorder(mediaStream, config);\n        mediaRecorder.record();\n\n        setState('recording');\n\n        if (!config.disableLogs) {\n            console.log('Initialized recorderType:', mediaRecorder.constructor.name, 'for output-type:', config.type);\n        }\n    }\n\n    function stopRecording(callback) {\n        callback = callback || function() {};\n\n        if (!mediaRecorder) {\n            warningLog();\n            return;\n        }\n\n        if (self.state === 'paused') {\n            self.resumeRecording();\n\n            setTimeout(function() {\n                stopRecording(callback);\n            }, 1);\n            return;\n        }\n\n        if (self.state !== 'recording' && !config.disableLogs) {\n            console.warn('Recording state should be: \"recording\", however current state is: ', self.state);\n        }\n\n        if (!config.disableLogs) {\n            console.log('Stopped recording ' + config.type + ' stream.');\n        }\n\n        if (config.type !== 'gif') {\n            mediaRecorder.stop(_callback);\n        } else {\n            mediaRecorder.stop();\n            _callback();\n        }\n\n        setState('stopped');\n\n        function _callback(__blob) {\n            if (!mediaRecorder) {\n                if (typeof callback.call === 'function') {\n                    callback.call(self, '');\n                } else {\n                    callback('');\n                }\n                return;\n            }\n\n            Object.keys(mediaRecorder).forEach(function(key) {\n                if (typeof mediaRecorder[key] === 'function') {\n                    return;\n                }\n\n                self[key] = mediaRecorder[key];\n            });\n\n            var blob = mediaRecorder.blob;\n\n            if (!blob) {\n                if (__blob) {\n                    mediaRecorder.blob = blob = __blob;\n                } else {\n                    throw 'Recording failed.';\n                }\n            }\n\n            if (blob && !config.disableLogs) {\n                console.log(blob.type, '->', bytesToSize(blob.size));\n            }\n\n            if (callback) {\n                var url;\n\n                try {\n                    url = URL.createObjectURL(blob);\n                } catch (e) {}\n\n                if (typeof callback.call === 'function') {\n                    callback.call(self, url);\n                } else {\n                    callback(url);\n                }\n            }\n\n            if (!config.autoWriteToDisk) {\n                return;\n            }\n\n            getDataURL(function(dataURL) {\n                var parameter = {};\n                parameter[config.type + 'Blob'] = dataURL;\n                DiskStorage.Store(parameter);\n            });\n        }\n    }\n\n    function pauseRecording() {\n        if (!mediaRecorder) {\n            warningLog();\n            return;\n        }\n\n        if (self.state !== 'recording') {\n            if (!config.disableLogs) {\n                console.warn('Unable to pause the recording. Recording state: ', self.state);\n            }\n            return;\n        }\n\n        setState('paused');\n\n        mediaRecorder.pause();\n\n        if (!config.disableLogs) {\n            console.log('Paused recording.');\n        }\n    }\n\n    function resumeRecording() {\n        if (!mediaRecorder) {\n            warningLog();\n            return;\n        }\n\n        if (self.state !== 'paused') {\n            if (!config.disableLogs) {\n                console.warn('Unable to resume the recording. Recording state: ', self.state);\n            }\n            return;\n        }\n\n        setState('recording');\n\n        // not all libs have this method yet\n        mediaRecorder.resume();\n\n        if (!config.disableLogs) {\n            console.log('Resumed recording.');\n        }\n    }\n\n    function readFile(_blob) {\n        postMessage(new FileReaderSync().readAsDataURL(_blob));\n    }\n\n    function getDataURL(callback, _mediaRecorder) {\n        if (!callback) {\n            throw 'Pass a callback function over getDataURL.';\n        }\n\n        var blob = _mediaRecorder ? _mediaRecorder.blob : (mediaRecorder || {}).blob;\n\n        if (!blob) {\n            if (!config.disableLogs) {\n                console.warn('Blob encoder did not finish its job yet.');\n            }\n\n            setTimeout(function() {\n                getDataURL(callback, _mediaRecorder);\n            }, 1000);\n            return;\n        }\n\n        if (typeof Worker !== 'undefined' && !navigator.mozGetUserMedia) {\n            var webWorker = processInWebWorker(readFile);\n\n            webWorker.onmessage = function(event) {\n                callback(event.data);\n            };\n\n            webWorker.postMessage(blob);\n        } else {\n            var reader = new FileReader();\n            reader.readAsDataURL(blob);\n            reader.onload = function(event) {\n                callback(event.target.result);\n            };\n        }\n\n        function processInWebWorker(_function) {\n            try {\n                var blob = URL.createObjectURL(new Blob([_function.toString(),\n                    'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\n                ], {\n                    type: 'application/javascript'\n                }));\n\n                var worker = new Worker(blob);\n                URL.revokeObjectURL(blob);\n                return worker;\n            } catch (e) {}\n        }\n    }\n\n    function handleRecordingDuration(counter) {\n        counter = counter || 0;\n\n        if (self.state === 'paused') {\n            setTimeout(function() {\n                handleRecordingDuration(counter);\n            }, 1000);\n            return;\n        }\n\n        if (self.state === 'stopped') {\n            return;\n        }\n\n        if (counter >= self.recordingDuration) {\n            stopRecording(self.onRecordingStopped);\n            return;\n        }\n\n        counter += 1000; // 1-second\n\n        setTimeout(function() {\n            handleRecordingDuration(counter);\n        }, 1000);\n    }\n\n    function setState(state) {\n        if (!self) {\n            return;\n        }\n\n        self.state = state;\n\n        if (typeof self.onStateChanged.call === 'function') {\n            self.onStateChanged.call(self, state);\n        } else {\n            self.onStateChanged(state);\n        }\n    }\n\n    var WARNING = 'It seems that recorder is destroyed or \"startRecording\" is not invoked for ' + config.type + ' recorder.';\n\n    function warningLog() {\n        if (config.disableLogs === true) {\n            return;\n        }\n\n        console.warn(WARNING);\n    }\n\n    var mediaRecorder;\n\n    var returnObject = {\n        /**\n         * This method starts the recording.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * var recorder = RecordRTC(mediaStream, {\n         *     type: 'video'\n         * });\n         * recorder.startRecording();\n         */\n        startRecording: startRecording,\n\n        /**\n         * This method stops the recording. It is strongly recommended to get \"blob\" or \"URI\" inside the callback to make sure all recorders finished their job.\n         * @param {function} callback - Callback to get the recorded blob.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.stopRecording(function() {\n         *     // use either \"this\" or \"recorder\" object; both are identical\n         *     video.src = this.toURL();\n         *     var blob = this.getBlob();\n         * });\n         */\n        stopRecording: stopRecording,\n\n        /**\n         * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @todo Firefox is unable to pause the recording. Fix it.\n         * @example\n         * recorder.pauseRecording();  // pause the recording\n         * recorder.resumeRecording(); // resume again\n         */\n        pauseRecording: pauseRecording,\n\n        /**\n         * This method resumes the recording.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.pauseRecording();  // first of all, pause the recording\n         * recorder.resumeRecording(); // now resume it\n         */\n        resumeRecording: resumeRecording,\n\n        /**\n         * This method initializes the recording.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @todo This method should be deprecated.\n         * @example\n         * recorder.initRecorder();\n         */\n        initRecorder: initRecorder,\n\n        /**\n         * Ask RecordRTC to auto-stop the recording after 5 minutes.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * var fiveMinutes = 5 * 1000 * 60;\n         * recorder.setRecordingDuration(fiveMinutes, function() {\n         *    var blob = this.getBlob();\n         *    video.src = this.toURL();\n         * });\n         * \n         * // or otherwise\n         * recorder.setRecordingDuration(fiveMinutes).onRecordingStopped(function() {\n         *    var blob = this.getBlob();\n         *    video.src = this.toURL();\n         * });\n         */\n        setRecordingDuration: function(recordingDuration, callback) {\n            if (typeof recordingDuration === 'undefined') {\n                throw 'recordingDuration is required.';\n            }\n\n            if (typeof recordingDuration !== 'number') {\n                throw 'recordingDuration must be a number.';\n            }\n\n            self.recordingDuration = recordingDuration;\n            self.onRecordingStopped = callback || function() {};\n\n            return {\n                onRecordingStopped: function(callback) {\n                    self.onRecordingStopped = callback;\n                }\n            };\n        },\n\n        /**\n         * This method can be used to clear/reset all the recorded data.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @todo Figure out the difference between \"reset\" and \"clearRecordedData\" methods.\n         * @example\n         * recorder.clearRecordedData();\n         */\n        clearRecordedData: function() {\n            if (!mediaRecorder) {\n                warningLog();\n                return;\n            }\n\n            mediaRecorder.clearRecordedData();\n\n            if (!config.disableLogs) {\n                console.log('Cleared old recorded data.');\n            }\n        },\n\n        /**\n         * Get the recorded blob. Use this method inside the \"stopRecording\" callback.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.stopRecording(function() {\n         *     var blob = this.getBlob();\n         *\n         *     var file = new File([blob], 'filename.webm', {\n         *         type: 'video/webm'\n         *     });\n         *\n         *     var formData = new FormData();\n         *     formData.append('file', file); // upload \"File\" object rather than a \"Blob\"\n         *     uploadToServer(formData);\n         * });\n         * @returns {Blob} Returns recorded data as \"Blob\" object.\n         */\n        getBlob: function() {\n            if (!mediaRecorder) {\n                warningLog();\n                return;\n            }\n\n            return mediaRecorder.blob;\n        },\n\n        /**\n         * Get data-URI instead of Blob.\n         * @param {function} callback - Callback to get the Data-URI.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.stopRecording(function() {\n         *     recorder.getDataURL(function(dataURI) {\n         *         video.src = dataURI;\n         *     });\n         * });\n         */\n        getDataURL: getDataURL,\n\n        /**\n         * Get virtual/temporary URL. Usage of this URL is limited to current tab.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.stopRecording(function() {\n         *     video.src = this.toURL();\n         * });\n         * @returns {String} Returns a virtual/temporary URL for the recorded \"Blob\".\n         */\n        toURL: function() {\n            if (!mediaRecorder) {\n                warningLog();\n                return;\n            }\n\n            return URL.createObjectURL(mediaRecorder.blob);\n        },\n\n        /**\n         * Get internal recording object (i.e. internal module) e.g. MutliStreamRecorder, MediaStreamRecorder, StereoAudioRecorder or WhammyRecorder etc.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * var internalRecorder = recorder.getInternalRecorder();\n         * if(internalRecorder instanceof MultiStreamRecorder) {\n         *     internalRecorder.addStreams([newAudioStream]);\n         *     internalRecorder.resetVideoStreams([screenStream]);\n         * }\n         * @returns {Object} Returns internal recording object.\n         */\n        getInternalRecorder: function() {\n            return mediaRecorder;\n        },\n\n        /**\n         * Invoke save-as dialog to save the recorded blob into your disk.\n         * @param {string} fileName - Set your own file name.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.stopRecording(function() {\n         *     this.save('file-name');\n         *\n         *     // or manually:\n         *     invokeSaveAsDialog(this.getBlob(), 'filename.webm');\n         * });\n         */\n        save: function(fileName) {\n            if (!mediaRecorder) {\n                warningLog();\n                return;\n            }\n\n            invokeSaveAsDialog(mediaRecorder.blob, fileName);\n        },\n\n        /**\n         * This method gets a blob from indexed-DB storage.\n         * @param {function} callback - Callback to get the recorded blob.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.getFromDisk(function(dataURL) {\n         *     video.src = dataURL;\n         * });\n         */\n        getFromDisk: function(callback) {\n            if (!mediaRecorder) {\n                warningLog();\n                return;\n            }\n\n            RecordRTC.getFromDisk(config.type, callback);\n        },\n\n        /**\n         * This method appends an array of webp images to the recorded video-blob. It takes an \"array\" object.\n         * @type {Array.<Array>}\n         * @param {Array} arrayOfWebPImages - Array of webp images.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @todo This method should be deprecated.\n         * @example\n         * var arrayOfWebPImages = [];\n         * arrayOfWebPImages.push({\n         *     duration: index,\n         *     image: 'data:image/webp;base64,...'\n         * });\n         * recorder.setAdvertisementArray(arrayOfWebPImages);\n         */\n        setAdvertisementArray: function(arrayOfWebPImages) {\n            config.advertisement = [];\n\n            var length = arrayOfWebPImages.length;\n            for (var i = 0; i < length; i++) {\n                config.advertisement.push({\n                    duration: i,\n                    image: arrayOfWebPImages[i]\n                });\n            }\n        },\n\n        /**\n         * It is equivalent to <code class=\"str\">\"recorder.getBlob()\"</code> method. Usage of \"getBlob\" is recommended, though.\n         * @property {Blob} blob - Recorded Blob can be accessed using this property.\n         * @memberof RecordRTC\n         * @instance\n         * @readonly\n         * @example\n         * recorder.stopRecording(function() {\n         *     var blob = this.blob;\n         *\n         *     // below one is recommended\n         *     var blob = this.getBlob();\n         * });\n         */\n        blob: null,\n\n        /**\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\n         * @property {number} bufferSize - Buffer-size used to encode the WAV container\n         * @memberof RecordRTC\n         * @instance\n         * @readonly\n         * @example\n         * recorder.stopRecording(function() {\n         *     alert('Recorder used this buffer-size: ' + this.bufferSize);\n         * });\n         */\n        bufferSize: 0,\n\n        /**\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\n         * @property {number} sampleRate - Sample-rates used to encode the WAV container\n         * @memberof RecordRTC\n         * @instance\n         * @readonly\n         * @example\n         * recorder.stopRecording(function() {\n         *     alert('Recorder used these sample-rates: ' + this.sampleRate);\n         * });\n         */\n        sampleRate: 0,\n\n        /**\n         * {recorderType:StereoAudioRecorder} returns ArrayBuffer object.\n         * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.\n         * @memberof RecordRTC\n         * @instance\n         * @readonly\n         * @example\n         * recorder.stopRecording(function() {\n         *     var arrayBuffer = this.buffer;\n         *     alert(arrayBuffer.byteLength);\n         * });\n         */\n        buffer: null,\n\n        /**\n         * This method resets the recorder. So that you can reuse single recorder instance many times.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.reset();\n         * recorder.startRecording();\n         */\n        reset: function() {\n            if (self.state === 'recording' && !config.disableLogs) {\n                console.warn('Stop an active recorder.');\n            }\n\n            if (mediaRecorder && typeof mediaRecorder.clearRecordedData === 'function') {\n                mediaRecorder.clearRecordedData();\n            }\n            mediaRecorder = null;\n            setState('inactive');\n            self.blob = null;\n        },\n\n        /**\n         * This method is called whenever recorder's state changes. Use this as an \"event\".\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.onStateChanged = function(state) {\n         *     console.log('Recorder state: ', state);\n         * };\n         */\n        onStateChanged: function(state) {\n            if (!config.disableLogs) {\n                console.log('Recorder state changed:', state);\n            }\n        },\n\n        /**\n         * A recorder can have inactive, recording, paused or stopped states.\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\n         * @memberof RecordRTC\n         * @static\n         * @readonly\n         * @example\n         * // this looper function will keep you updated about the recorder's states.\n         * (function looper() {\n         *     document.querySelector('h1').innerHTML = 'Recorder\\'s state is: ' + recorder.state;\n         *     if(recorder.state === 'stopped') return; // ignore+stop\n         *     setTimeout(looper, 1000); // update after every 3-seconds\n         * })();\n         * recorder.startRecording();\n         */\n        state: 'inactive',\n\n        /**\n         * Get recorder's readonly state.\n         * @method\n         * @memberof RecordRTC\n         * @example\n         * var state = recorder.getState();\n         * @returns {String} Returns recording state.\n         */\n        getState: function() {\n            return self.state;\n        },\n\n        /**\n         * Destroy RecordRTC instance. Clear all recorders and objects.\n         * @method\n         * @memberof RecordRTC\n         * @example\n         * recorder.destroy();\n         */\n        destroy: function() {\n            var disableLogsCache = config.disableLogs;\n\n            config = {\n                disableLogs: true\n            };\n            self.reset();\n            setState('destroyed');\n            returnObject = self = null;\n\n            if (Storage.AudioContextConstructor) {\n                Storage.AudioContextConstructor.close();\n                Storage.AudioContextConstructor = null;\n            }\n\n            config.disableLogs = disableLogsCache;\n\n            if (!config.disableLogs) {\n                console.log('RecordRTC is destroyed.');\n            }\n        },\n\n        /**\n         * RecordRTC version number\n         * @property {String} version - Release version number.\n         * @memberof RecordRTC\n         * @static\n         * @readonly\n         * @example\n         * alert(recorder.version);\n         */\n        version: '5.6.3'\n    };\n\n    if (!this) {\n        self = returnObject;\n        return returnObject;\n    }\n\n    // if someone wants to use RecordRTC with the \"new\" keyword.\n    for (var prop in returnObject) {\n        this[prop] = returnObject[prop];\n    }\n\n    self = this;\n\n    return returnObject;\n}\n\nRecordRTC.version = '5.6.3';\n\nif (typeof module !== 'undefined' /* && !!module.exports*/ ) {\n    module.exports = RecordRTC;\n}\n\nif (typeof define === 'function' && define.amd) {\n    define('RecordRTC', [], function() {\n        return RecordRTC;\n    });\n}\n\nRecordRTC.getFromDisk = function(type, callback) {\n    if (!callback) {\n        throw 'callback is mandatory.';\n    }\n\n    console.log('Getting recorded ' + (type === 'all' ? 'blobs' : type + ' blob ') + ' from disk!');\n    DiskStorage.Fetch(function(dataURL, _type) {\n        if (type !== 'all' && _type === type + 'Blob' && callback) {\n            callback(dataURL);\n        }\n\n        if (type === 'all' && callback) {\n            callback(dataURL, _type.replace('Blob', ''));\n        }\n    });\n};\n\n/**\n * This method can be used to store recorded blobs into IndexedDB storage.\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\n * @method\n * @memberof RecordRTC\n * @example\n * RecordRTC.writeToDisk({\n *     audio: audioBlob,\n *     video: videoBlob,\n *     gif  : gifBlob\n * });\n */\nRecordRTC.writeToDisk = function(options) {\n    console.log('Writing recorded blob(s) to disk!');\n    options = options || {};\n    if (options.audio && options.video && options.gif) {\n        options.audio.getDataURL(function(audioDataURL) {\n            options.video.getDataURL(function(videoDataURL) {\n                options.gif.getDataURL(function(gifDataURL) {\n                    DiskStorage.Store({\n                        audioBlob: audioDataURL,\n                        videoBlob: videoDataURL,\n                        gifBlob: gifDataURL\n                    });\n                });\n            });\n        });\n    } else if (options.audio && options.video) {\n        options.audio.getDataURL(function(audioDataURL) {\n            options.video.getDataURL(function(videoDataURL) {\n                DiskStorage.Store({\n                    audioBlob: audioDataURL,\n                    videoBlob: videoDataURL\n                });\n            });\n        });\n    } else if (options.audio && options.gif) {\n        options.audio.getDataURL(function(audioDataURL) {\n            options.gif.getDataURL(function(gifDataURL) {\n                DiskStorage.Store({\n                    audioBlob: audioDataURL,\n                    gifBlob: gifDataURL\n                });\n            });\n        });\n    } else if (options.video && options.gif) {\n        options.video.getDataURL(function(videoDataURL) {\n            options.gif.getDataURL(function(gifDataURL) {\n                DiskStorage.Store({\n                    videoBlob: videoDataURL,\n                    gifBlob: gifDataURL\n                });\n            });\n        });\n    } else if (options.audio) {\n        options.audio.getDataURL(function(audioDataURL) {\n            DiskStorage.Store({\n                audioBlob: audioDataURL\n            });\n        });\n    } else if (options.video) {\n        options.video.getDataURL(function(videoDataURL) {\n            DiskStorage.Store({\n                videoBlob: videoDataURL\n            });\n        });\n    } else if (options.gif) {\n        options.gif.getDataURL(function(gifDataURL) {\n            DiskStorage.Store({\n                gifBlob: gifDataURL\n            });\n        });\n    }\n};\n\n// __________________________\n// RecordRTC-Configuration.js\n\n/**\n * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.\n * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid \"config\" object.\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\n * @author {@link https://MuazKhan.com|Muaz Khan}\n * @typedef RecordRTCConfiguration\n * @class\n * @example\n * var options = RecordRTCConfiguration(mediaStream, options);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}\n */\n\nfunction RecordRTCConfiguration(mediaStream, config) {\n    if (!config.recorderType && !config.type) {\n        if (!!config.audio && !!config.video) {\n            config.type = 'video';\n        } else if (!!config.audio && !config.video) {\n            config.type = 'audio';\n        }\n    }\n\n    if (config.recorderType && !config.type) {\n        if (config.recorderType === WhammyRecorder || config.recorderType === CanvasRecorder || (typeof WebAssemblyRecorder !== 'undefined' && config.recorderType === WebAssemblyRecorder)) {\n            config.type = 'video';\n        } else if (config.recorderType === GifRecorder) {\n            config.type = 'gif';\n        } else if (config.recorderType === StereoAudioRecorder) {\n            config.type = 'audio';\n        } else if (config.recorderType === MediaStreamRecorder) {\n            if (getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\n                config.type = 'video';\n            } else if (!getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\n                config.type = 'video';\n            } else if (getTracks(mediaStream, 'audio').length && !getTracks(mediaStream, 'video').length) {\n                config.type = 'audio';\n            } else {\n                // config.type = 'UnKnown';\n            }\n        }\n    }\n\n    if (typeof MediaStreamRecorder !== 'undefined' && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n        if (!config.mimeType) {\n            config.mimeType = 'video/webm';\n        }\n\n        if (!config.type) {\n            config.type = config.mimeType.split('/')[0];\n        }\n\n        if (!config.bitsPerSecond) {\n            // config.bitsPerSecond = 128000;\n        }\n    }\n\n    // consider default type=audio\n    if (!config.type) {\n        if (config.mimeType) {\n            config.type = config.mimeType.split('/')[0];\n        }\n        if (!config.type) {\n            config.type = 'audio';\n        }\n    }\n\n    return config;\n}\n\n// __________________\n// GetRecorderType.js\n\n/**\n * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.\n * @summary It returns best recorder-type available for your browser.\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\n * @author {@link https://MuazKhan.com|Muaz Khan}\n * @typedef GetRecorderType\n * @class\n * @example\n * var RecorderType = GetRecorderType(options);\n * var recorder = new RecorderType(options);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\n */\n\nfunction GetRecorderType(mediaStream, config) {\n    var recorder;\n\n    // StereoAudioRecorder can work with all three: Edge, Firefox and Chrome\n    // todo: detect if it is Edge, then auto use: StereoAudioRecorder\n    if (isChrome || isEdge || isOpera) {\n        // Media Stream Recording API has not been implemented in chrome yet;\n        // That's why using WebAudio API to record stereo audio in WAV format\n        recorder = StereoAudioRecorder;\n    }\n\n    if (typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype && !isChrome) {\n        recorder = MediaStreamRecorder;\n    }\n\n    // video recorder (in WebM format)\n    if (config.type === 'video' && (isChrome || isOpera)) {\n        recorder = WhammyRecorder;\n\n        if (typeof WebAssemblyRecorder !== 'undefined' && typeof ReadableStream !== 'undefined') {\n            recorder = WebAssemblyRecorder;\n        }\n    }\n\n    // video recorder (in Gif format)\n    if (config.type === 'gif') {\n        recorder = GifRecorder;\n    }\n\n    // html2canvas recording!\n    if (config.type === 'canvas') {\n        recorder = CanvasRecorder;\n    }\n\n    if (isMediaRecorderCompatible() && recorder !== CanvasRecorder && recorder !== GifRecorder && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n        if (getTracks(mediaStream, 'video').length || getTracks(mediaStream, 'audio').length) {\n            // audio-only recording\n            if (config.type === 'audio') {\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('audio/webm')) {\n                    recorder = MediaStreamRecorder;\n                }\n                // else recorder = StereoAudioRecorder;\n            } else {\n                // video or screen tracks\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('video/webm')) {\n                    recorder = MediaStreamRecorder;\n                }\n            }\n        }\n    }\n\n    if (mediaStream instanceof Array && mediaStream.length) {\n        recorder = MultiStreamRecorder;\n    }\n\n    if (config.recorderType) {\n        recorder = config.recorderType;\n    }\n\n    if (!config.disableLogs && !!recorder && !!recorder.name) {\n        console.log('Using recorderType:', recorder.name || recorder.constructor.name);\n    }\n\n    if (!recorder && isSafari) {\n        recorder = MediaStreamRecorder;\n    }\n\n    return recorder;\n}\n\n// _____________\n// MRecordRTC.js\n\n/**\n * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.\n * @summary MRecordRTC stands for \"Multiple-RecordRTC\".\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\n * @author {@link https://MuazKhan.com|Muaz Khan}\n * @typedef MRecordRTC\n * @class\n * @example\n * var recorder = new MRecordRTC();\n * recorder.addStream(MediaStream);\n * recorder.mediaType = {\n *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder\n *     video: true, // or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\n *     gif: true    // or GifRecorder\n * };\n * // mimeType is optional and should be set only in advance cases.\n * recorder.mimeType = {\n *     audio: 'audio/wav',\n *     video: 'video/webm',\n *     gif:   'image/gif'\n * };\n * recorder.startRecording();\n * @see For further information:\n * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @requires {@link RecordRTC}\n */\n\nfunction MRecordRTC(mediaStream) {\n\n    /**\n     * This method attaches MediaStream object to {@link MRecordRTC}.\n     * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.addStream(MediaStream);\n     */\n    this.addStream = function(_mediaStream) {\n        if (_mediaStream) {\n            mediaStream = _mediaStream;\n        }\n    };\n\n    /**\n     * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.\n     * @property {object} mediaType - {audio: true, video: true, gif: true}\n     * @memberof MRecordRTC\n     * @example\n     * var recorder = new MRecordRTC();\n     * recorder.mediaType = {\n     *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder\n     *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\n     *     gif  : true  // TRUE or GifRecorder\n     * };\n     */\n    this.mediaType = {\n        audio: true,\n        video: true\n    };\n\n    /**\n     * This method starts recording.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.startRecording();\n     */\n    this.startRecording = function() {\n        var mediaType = this.mediaType;\n        var recorderType;\n        var mimeType = this.mimeType || {\n            audio: null,\n            video: null,\n            gif: null\n        };\n\n        if (typeof mediaType.audio !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'audio').length) {\n            mediaType.audio = false;\n        }\n\n        if (typeof mediaType.video !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\n            mediaType.video = false;\n        }\n\n        if (typeof mediaType.gif !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\n            mediaType.gif = false;\n        }\n\n        if (!mediaType.audio && !mediaType.video && !mediaType.gif) {\n            throw 'MediaStream must have either audio or video tracks.';\n        }\n\n        if (!!mediaType.audio) {\n            recorderType = null;\n            if (typeof mediaType.audio === 'function') {\n                recorderType = mediaType.audio;\n            }\n\n            this.audioRecorder = new RecordRTC(mediaStream, {\n                type: 'audio',\n                bufferSize: this.bufferSize,\n                sampleRate: this.sampleRate,\n                numberOfAudioChannels: this.numberOfAudioChannels || 2,\n                disableLogs: this.disableLogs,\n                recorderType: recorderType,\n                mimeType: mimeType.audio,\n                timeSlice: this.timeSlice,\n                onTimeStamp: this.onTimeStamp\n            });\n\n            if (!mediaType.video) {\n                this.audioRecorder.startRecording();\n            }\n        }\n\n        if (!!mediaType.video) {\n            recorderType = null;\n            if (typeof mediaType.video === 'function') {\n                recorderType = mediaType.video;\n            }\n\n            var newStream = mediaStream;\n\n            if (isMediaRecorderCompatible() && !!mediaType.audio && typeof mediaType.audio === 'function') {\n                var videoTrack = getTracks(mediaStream, 'video')[0];\n\n                if (isFirefox) {\n                    newStream = new MediaStream();\n                    newStream.addTrack(videoTrack);\n\n                    if (recorderType && recorderType === WhammyRecorder) {\n                        // Firefox does NOT supports webp-encoding yet\n                        // But Firefox do supports WebAssemblyRecorder\n                        recorderType = MediaStreamRecorder;\n                    }\n                } else {\n                    newStream = new MediaStream();\n                    newStream.addTrack(videoTrack);\n                }\n            }\n\n            this.videoRecorder = new RecordRTC(newStream, {\n                type: 'video',\n                video: this.video,\n                canvas: this.canvas,\n                frameInterval: this.frameInterval || 10,\n                disableLogs: this.disableLogs,\n                recorderType: recorderType,\n                mimeType: mimeType.video,\n                timeSlice: this.timeSlice,\n                onTimeStamp: this.onTimeStamp,\n                workerPath: this.workerPath,\n                webAssemblyPath: this.webAssemblyPath,\n                frameRate: this.frameRate, // used by WebAssemblyRecorder; values: usually 30; accepts any.\n                bitrate: this.bitrate // used by WebAssemblyRecorder; values: 0 to 1000+\n            });\n\n            if (!mediaType.audio) {\n                this.videoRecorder.startRecording();\n            }\n        }\n\n        if (!!mediaType.audio && !!mediaType.video) {\n            var self = this;\n\n            var isSingleRecorder = isMediaRecorderCompatible() === true;\n\n            if (mediaType.audio instanceof StereoAudioRecorder && !!mediaType.video) {\n                isSingleRecorder = false;\n            } else if (mediaType.audio !== true && mediaType.video !== true && mediaType.audio !== mediaType.video) {\n                isSingleRecorder = false;\n            }\n\n            if (isSingleRecorder === true) {\n                self.audioRecorder = null;\n                self.videoRecorder.startRecording();\n            } else {\n                self.videoRecorder.initRecorder(function() {\n                    self.audioRecorder.initRecorder(function() {\n                        // Both recorders are ready to record things accurately\n                        self.videoRecorder.startRecording();\n                        self.audioRecorder.startRecording();\n                    });\n                });\n            }\n        }\n\n        if (!!mediaType.gif) {\n            recorderType = null;\n            if (typeof mediaType.gif === 'function') {\n                recorderType = mediaType.gif;\n            }\n            this.gifRecorder = new RecordRTC(mediaStream, {\n                type: 'gif',\n                frameRate: this.frameRate || 200,\n                quality: this.quality || 10,\n                disableLogs: this.disableLogs,\n                recorderType: recorderType,\n                mimeType: mimeType.gif\n            });\n            this.gifRecorder.startRecording();\n        }\n    };\n\n    /**\n     * This method stops recording.\n     * @param {function} callback - Callback function is invoked when all encoders finished their jobs.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.stopRecording(function(recording){\n     *     var audioBlob = recording.audio;\n     *     var videoBlob = recording.video;\n     *     var gifBlob   = recording.gif;\n     * });\n     */\n    this.stopRecording = function(callback) {\n        callback = callback || function() {};\n\n        if (this.audioRecorder) {\n            this.audioRecorder.stopRecording(function(blobURL) {\n                callback(blobURL, 'audio');\n            });\n        }\n\n        if (this.videoRecorder) {\n            this.videoRecorder.stopRecording(function(blobURL) {\n                callback(blobURL, 'video');\n            });\n        }\n\n        if (this.gifRecorder) {\n            this.gifRecorder.stopRecording(function(blobURL) {\n                callback(blobURL, 'gif');\n            });\n        }\n    };\n\n    /**\n     * This method pauses recording.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.pauseRecording();\n     */\n    this.pauseRecording = function() {\n        if (this.audioRecorder) {\n            this.audioRecorder.pauseRecording();\n        }\n\n        if (this.videoRecorder) {\n            this.videoRecorder.pauseRecording();\n        }\n\n        if (this.gifRecorder) {\n            this.gifRecorder.pauseRecording();\n        }\n    };\n\n    /**\n     * This method resumes recording.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.resumeRecording();\n     */\n    this.resumeRecording = function() {\n        if (this.audioRecorder) {\n            this.audioRecorder.resumeRecording();\n        }\n\n        if (this.videoRecorder) {\n            this.videoRecorder.resumeRecording();\n        }\n\n        if (this.gifRecorder) {\n            this.gifRecorder.resumeRecording();\n        }\n    };\n\n    /**\n     * This method can be used to manually get all recorded blobs.\n     * @param {function} callback - All recorded blobs are passed back to the \"callback\" function.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.getBlob(function(recording){\n     *     var audioBlob = recording.audio;\n     *     var videoBlob = recording.video;\n     *     var gifBlob   = recording.gif;\n     * });\n     * // or\n     * var audioBlob = recorder.getBlob().audio;\n     * var videoBlob = recorder.getBlob().video;\n     */\n    this.getBlob = function(callback) {\n        var output = {};\n\n        if (this.audioRecorder) {\n            output.audio = this.audioRecorder.getBlob();\n        }\n\n        if (this.videoRecorder) {\n            output.video = this.videoRecorder.getBlob();\n        }\n\n        if (this.gifRecorder) {\n            output.gif = this.gifRecorder.getBlob();\n        }\n\n        if (callback) {\n            callback(output);\n        }\n\n        return output;\n    };\n\n    /**\n     * Destroy all recorder instances.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.destroy();\n     */\n    this.destroy = function() {\n        if (this.audioRecorder) {\n            this.audioRecorder.destroy();\n            this.audioRecorder = null;\n        }\n\n        if (this.videoRecorder) {\n            this.videoRecorder.destroy();\n            this.videoRecorder = null;\n        }\n\n        if (this.gifRecorder) {\n            this.gifRecorder.destroy();\n            this.gifRecorder = null;\n        }\n    };\n\n    /**\n     * This method can be used to manually get all recorded blobs' DataURLs.\n     * @param {function} callback - All recorded blobs' DataURLs are passed back to the \"callback\" function.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.getDataURL(function(recording){\n     *     var audioDataURL = recording.audio;\n     *     var videoDataURL = recording.video;\n     *     var gifDataURL   = recording.gif;\n     * });\n     */\n    this.getDataURL = function(callback) {\n        this.getBlob(function(blob) {\n            if (blob.audio && blob.video) {\n                getDataURL(blob.audio, function(_audioDataURL) {\n                    getDataURL(blob.video, function(_videoDataURL) {\n                        callback({\n                            audio: _audioDataURL,\n                            video: _videoDataURL\n                        });\n                    });\n                });\n            } else if (blob.audio) {\n                getDataURL(blob.audio, function(_audioDataURL) {\n                    callback({\n                        audio: _audioDataURL\n                    });\n                });\n            } else if (blob.video) {\n                getDataURL(blob.video, function(_videoDataURL) {\n                    callback({\n                        video: _videoDataURL\n                    });\n                });\n            }\n        });\n\n        function getDataURL(blob, callback00) {\n            if (typeof Worker !== 'undefined') {\n                var webWorker = processInWebWorker(function readFile(_blob) {\n                    postMessage(new FileReaderSync().readAsDataURL(_blob));\n                });\n\n                webWorker.onmessage = function(event) {\n                    callback00(event.data);\n                };\n\n                webWorker.postMessage(blob);\n            } else {\n                var reader = new FileReader();\n                reader.readAsDataURL(blob);\n                reader.onload = function(event) {\n                    callback00(event.target.result);\n                };\n            }\n        }\n\n        function processInWebWorker(_function) {\n            var blob = URL.createObjectURL(new Blob([_function.toString(),\n                'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\n            ], {\n                type: 'application/javascript'\n            }));\n\n            var worker = new Worker(blob);\n            var url;\n            if (typeof URL !== 'undefined') {\n                url = URL;\n            } else if (typeof webkitURL !== 'undefined') {\n                url = webkitURL;\n            } else {\n                throw 'Neither URL nor webkitURL detected.';\n            }\n            url.revokeObjectURL(blob);\n            return worker;\n        }\n    };\n\n    /**\n     * This method can be used to ask {@link MRecordRTC} to write all recorded blobs into IndexedDB storage.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.writeToDisk();\n     */\n    this.writeToDisk = function() {\n        RecordRTC.writeToDisk({\n            audio: this.audioRecorder,\n            video: this.videoRecorder,\n            gif: this.gifRecorder\n        });\n    };\n\n    /**\n     * This method can be used to invoke a save-as dialog for all recorded blobs.\n     * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.save({\n     *     audio: 'audio-file-name',\n     *     video: 'video-file-name',\n     *     gif  : 'gif-file-name'\n     * });\n     */\n    this.save = function(args) {\n        args = args || {\n            audio: true,\n            video: true,\n            gif: true\n        };\n\n        if (!!args.audio && this.audioRecorder) {\n            this.audioRecorder.save(typeof args.audio === 'string' ? args.audio : '');\n        }\n\n        if (!!args.video && this.videoRecorder) {\n            this.videoRecorder.save(typeof args.video === 'string' ? args.video : '');\n        }\n        if (!!args.gif && this.gifRecorder) {\n            this.gifRecorder.save(typeof args.gif === 'string' ? args.gif : '');\n        }\n    };\n}\n\n/**\n * This method can be used to get all recorded blobs from IndexedDB storage.\n * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\n * @param {function} callback - Callback function to get all stored blobs.\n * @method\n * @memberof MRecordRTC\n * @example\n * MRecordRTC.getFromDisk('all', function(dataURL, type){\n *     if(type === 'audio') { }\n *     if(type === 'video') { }\n *     if(type === 'gif')   { }\n * });\n */\nMRecordRTC.getFromDisk = RecordRTC.getFromDisk;\n\n/**\n * This method can be used to store recorded blobs into IndexedDB storage.\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\n * @method\n * @memberof MRecordRTC\n * @example\n * MRecordRTC.writeToDisk({\n *     audio: audioBlob,\n *     video: videoBlob,\n *     gif  : gifBlob\n * });\n */\nMRecordRTC.writeToDisk = RecordRTC.writeToDisk;\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.MRecordRTC = MRecordRTC;\n}\n\nvar browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\n\n(function(that) {\n    if (!that) {\n        return;\n    }\n\n    if (typeof window !== 'undefined') {\n        return;\n    }\n\n    if (typeof global === 'undefined') {\n        return;\n    }\n\n    global.navigator = {\n        userAgent: browserFakeUserAgent,\n        getUserMedia: function() {}\n    };\n\n    if (!global.console) {\n        global.console = {};\n    }\n\n    if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\n        global.console.error = global.console.log = global.console.log || function() {\n            console.log(arguments);\n        };\n    }\n\n    if (typeof document === 'undefined') {\n        /*global document:true */\n        that.document = {\n            documentElement: {\n                appendChild: function() {\n                    return '';\n                }\n            }\n        };\n\n        document.createElement = document.captureStream = document.mozCaptureStream = function() {\n            var obj = {\n                getContext: function() {\n                    return obj;\n                },\n                play: function() {},\n                pause: function() {},\n                drawImage: function() {},\n                toDataURL: function() {\n                    return '';\n                },\n                style: {}\n            };\n            return obj;\n        };\n\n        that.HTMLVideoElement = function() {};\n    }\n\n    if (typeof location === 'undefined') {\n        /*global location:true */\n        that.location = {\n            protocol: 'file:',\n            href: '',\n            hash: ''\n        };\n    }\n\n    if (typeof screen === 'undefined') {\n        /*global screen:true */\n        that.screen = {\n            width: 0,\n            height: 0\n        };\n    }\n\n    if (typeof URL === 'undefined') {\n        /*global screen:true */\n        that.URL = {\n            createObjectURL: function() {\n                return '';\n            },\n            revokeObjectURL: function() {\n                return '';\n            }\n        };\n    }\n\n    /*global window:true */\n    that.window = global;\n})(typeof global !== 'undefined' ? global : null);\n\n// _____________________________\n// Cross-Browser-Declarations.js\n\n// animation-frame used in WebM recording\n\n/*jshint -W079 */\nvar requestAnimationFrame = window.requestAnimationFrame;\nif (typeof requestAnimationFrame === 'undefined') {\n    if (typeof webkitRequestAnimationFrame !== 'undefined') {\n        /*global requestAnimationFrame:true */\n        requestAnimationFrame = webkitRequestAnimationFrame;\n    } else if (typeof mozRequestAnimationFrame !== 'undefined') {\n        /*global requestAnimationFrame:true */\n        requestAnimationFrame = mozRequestAnimationFrame;\n    } else if (typeof msRequestAnimationFrame !== 'undefined') {\n        /*global requestAnimationFrame:true */\n        requestAnimationFrame = msRequestAnimationFrame;\n    } else if (typeof requestAnimationFrame === 'undefined') {\n        // via: https://gist.github.com/paulirish/1579671\n        var lastTime = 0;\n\n        /*global requestAnimationFrame:true */\n        requestAnimationFrame = function(callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = setTimeout(function() {\n                callback(currTime + timeToCall);\n            }, timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n    }\n}\n\n/*jshint -W079 */\nvar cancelAnimationFrame = window.cancelAnimationFrame;\nif (typeof cancelAnimationFrame === 'undefined') {\n    if (typeof webkitCancelAnimationFrame !== 'undefined') {\n        /*global cancelAnimationFrame:true */\n        cancelAnimationFrame = webkitCancelAnimationFrame;\n    } else if (typeof mozCancelAnimationFrame !== 'undefined') {\n        /*global cancelAnimationFrame:true */\n        cancelAnimationFrame = mozCancelAnimationFrame;\n    } else if (typeof msCancelAnimationFrame !== 'undefined') {\n        /*global cancelAnimationFrame:true */\n        cancelAnimationFrame = msCancelAnimationFrame;\n    } else if (typeof cancelAnimationFrame === 'undefined') {\n        /*global cancelAnimationFrame:true */\n        cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n    }\n}\n\n// WebAudio API representer\nvar AudioContext = window.AudioContext;\n\nif (typeof AudioContext === 'undefined') {\n    if (typeof webkitAudioContext !== 'undefined') {\n        /*global AudioContext:true */\n        AudioContext = webkitAudioContext;\n    }\n\n    if (typeof mozAudioContext !== 'undefined') {\n        /*global AudioContext:true */\n        AudioContext = mozAudioContext;\n    }\n}\n\n/*jshint -W079 */\nvar URL = window.URL;\n\nif (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\n    /*global URL:true */\n    URL = webkitURL;\n}\n\nif (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\n    if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n        navigator.getUserMedia = navigator.webkitGetUserMedia;\n    }\n\n    if (typeof navigator.mozGetUserMedia !== 'undefined') {\n        navigator.getUserMedia = navigator.mozGetUserMedia;\n    }\n}\n\nvar isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveBlob || !!navigator.msSaveOrOpenBlob);\nvar isOpera = !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\nvar isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1 && ('netscape' in window) && / rv:/.test(navigator.userAgent);\nvar isChrome = (!isOpera && !isEdge && !!navigator.webkitGetUserMedia) || isElectron() || navigator.userAgent.toLowerCase().indexOf('chrome/') !== -1;\n\nvar isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\nif (isSafari && !isChrome && navigator.userAgent.indexOf('CriOS') !== -1) {\n    isSafari = false;\n    isChrome = true;\n}\n\nvar MediaStream = window.MediaStream;\n\nif (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n    MediaStream = webkitMediaStream;\n}\n\n/*global MediaStream:true */\nif (typeof MediaStream !== 'undefined') {\n    // override \"stop\" method for all browsers\n    if (typeof MediaStream.prototype.stop === 'undefined') {\n        MediaStream.prototype.stop = function() {\n            this.getTracks().forEach(function(track) {\n                track.stop();\n            });\n        };\n    }\n}\n\n// below function via: http://goo.gl/B3ae8c\n/**\n * Return human-readable file size.\n * @param {number} bytes - Pass bytes and get formatted string.\n * @returns {string} - formatted string\n * @example\n * bytesToSize(1024*1024*5) === '5 GB'\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\nfunction bytesToSize(bytes) {\n    var k = 1000;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    if (bytes === 0) {\n        return '0 Bytes';\n    }\n    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);\n    return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\n}\n\n/**\n * @param {Blob} file - File or Blob object. This parameter is required.\n * @param {string} fileName - Optional file name e.g. \"Recorded-Video.webm\"\n * @example\n * invokeSaveAsDialog(blob or file, [optional] fileName);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\nfunction invokeSaveAsDialog(file, fileName) {\n    if (!file) {\n        throw 'Blob object is required.';\n    }\n\n    if (!file.type) {\n        try {\n            file.type = 'video/webm';\n        } catch (e) {}\n    }\n\n    var fileExtension = (file.type || 'video/webm').split('/')[1];\n    if (fileExtension.indexOf(';') !== -1) {\n        // extended mimetype, e.g. 'video/webm;codecs=vp8,opus'\n        fileExtension = fileExtension.split(';')[0];\n    }\n    if (fileName && fileName.indexOf('.') !== -1) {\n        var splitted = fileName.split('.');\n        fileName = splitted[0];\n        fileExtension = splitted[1];\n    }\n\n    var fileFullName = (fileName || (Math.round(Math.random() * 9999999999) + 888888888)) + '.' + fileExtension;\n\n    if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\n        return navigator.msSaveOrOpenBlob(file, fileFullName);\n    } else if (typeof navigator.msSaveBlob !== 'undefined') {\n        return navigator.msSaveBlob(file, fileFullName);\n    }\n\n    var hyperlink = document.createElement('a');\n    hyperlink.href = URL.createObjectURL(file);\n    hyperlink.download = fileFullName;\n\n    hyperlink.style = 'display:none;opacity:0;color:transparent;';\n    (document.body || document.documentElement).appendChild(hyperlink);\n\n    if (typeof hyperlink.click === 'function') {\n        hyperlink.click();\n    } else {\n        hyperlink.target = '_blank';\n        hyperlink.dispatchEvent(new MouseEvent('click', {\n            view: window,\n            bubbles: true,\n            cancelable: true\n        }));\n    }\n\n    URL.revokeObjectURL(hyperlink.href);\n}\n\n/**\n * from: https://github.com/cheton/is-electron/blob/master/index.js\n **/\nfunction isElectron() {\n    // Renderer process\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\n        return true;\n    }\n\n    // Main process\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\n        return true;\n    }\n\n    // Detect the user agent when the `nodeIntegration` option is set to true\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction getTracks(stream, kind) {\n    if (!stream || !stream.getTracks) {\n        return [];\n    }\n\n    return stream.getTracks().filter(function(t) {\n        return t.kind === (kind || 'audio');\n    });\n}\n\nfunction setSrcObject(stream, element) {\n    if ('srcObject' in element) {\n        element.srcObject = stream;\n    } else if ('mozSrcObject' in element) {\n        element.mozSrcObject = stream;\n    } else {\n        element.srcObject = stream;\n    }\n}\n\n/**\n * @param {Blob} file - File or Blob object.\n * @param {function} callback - Callback function.\n * @example\n * getSeekableBlob(blob or file, callback);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\nfunction getSeekableBlob(inputBlob, callback) {\n    // EBML.js copyrights goes to: https://github.com/legokichi/ts-ebml\n    if (typeof EBML === 'undefined') {\n        throw new Error('Please link: https://www.webrtc-experiment.com/EBML.js');\n    }\n\n    var reader = new EBML.Reader();\n    var decoder = new EBML.Decoder();\n    var tools = EBML.tools;\n\n    var fileReader = new FileReader();\n    fileReader.onload = function(e) {\n        var ebmlElms = decoder.decode(this.result);\n        ebmlElms.forEach(function(element) {\n            reader.read(element);\n        });\n        reader.stop();\n        var refinedMetadataBuf = tools.makeMetadataSeekable(reader.metadatas, reader.duration, reader.cues);\n        var body = this.result.slice(reader.metadataSize);\n        var newBlob = new Blob([refinedMetadataBuf, body], {\n            type: 'video/webm'\n        });\n\n        callback(newBlob);\n    };\n    fileReader.readAsArrayBuffer(inputBlob);\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.invokeSaveAsDialog = invokeSaveAsDialog;\n    RecordRTC.getTracks = getTracks;\n    RecordRTC.getSeekableBlob = getSeekableBlob;\n    RecordRTC.bytesToSize = bytesToSize;\n    RecordRTC.isElectron = isElectron;\n}\n\n// __________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129\n// Storage.js\n\n/**\n * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. \"new AudioContext\".\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\n * @author {@link https://MuazKhan.com|Muaz Khan}\n * @example\n * Storage.AudioContext === webkitAudioContext\n * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\nvar Storage = {};\n\nif (typeof AudioContext !== 'undefined') {\n    Storage.AudioContext = AudioContext;\n} else if (typeof webkitAudioContext !== 'undefined') {\n    Storage.AudioContext = webkitAudioContext;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.Storage = Storage;\n}\n\nfunction isMediaRecorderCompatible() {\n    if (isFirefox || isSafari || isEdge) {\n        return true;\n    }\n\n    var nVer = navigator.appVersion;\n    var nAgt = navigator.userAgent;\n    var fullVersion = '' + parseFloat(navigator.appVersion);\n    var majorVersion = parseInt(navigator.appVersion, 10);\n    var nameOffset, verOffset, ix;\n\n    if (isChrome || isOpera) {\n        verOffset = nAgt.indexOf('Chrome');\n        fullVersion = nAgt.substring(verOffset + 7);\n    }\n\n    // trim the fullVersion string at semicolon/space if present\n    if ((ix = fullVersion.indexOf(';')) !== -1) {\n        fullVersion = fullVersion.substring(0, ix);\n    }\n\n    if ((ix = fullVersion.indexOf(' ')) !== -1) {\n        fullVersion = fullVersion.substring(0, ix);\n    }\n\n    majorVersion = parseInt('' + fullVersion, 10);\n\n    if (isNaN(majorVersion)) {\n        fullVersion = '' + parseFloat(navigator.appVersion);\n        majorVersion = parseInt(navigator.appVersion, 10);\n    }\n\n    return majorVersion >= 49;\n}\n\n// ______________________\n// MediaStreamRecorder.js\n\n/**\n * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.\n * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\n * @author {@link https://github.com/muaz-khan|Muaz Khan}\n * @typedef MediaStreamRecorder\n * @class\n * @example\n * var config = {\n *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis\n *     audioBitsPerSecond : 256 * 8 * 1024,\n *     videoBitsPerSecond : 256 * 8 * 1024,\n *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two\n *     checkForInactiveTracks: true,\n *     timeSlice: 1000, // concatenate intervals based blobs\n *     ondataavailable: function() {} // get intervals based blobs\n * }\n * var recorder = new MediaStreamRecorder(mediaStream, config);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n *\n *     // or\n *     var blob = recorder.blob;\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {disableLogs:true, initCallback: function, mimeType: \"video/webm\", timeSlice: 1000}\n * @throws Will throw an error if first argument \"MediaStream\" is missing. Also throws error if \"MediaRecorder API\" are not supported by the browser.\n */\n\nfunction MediaStreamRecorder(mediaStream, config) {\n    var self = this;\n\n    if (typeof mediaStream === 'undefined') {\n        throw 'First argument \"MediaStream\" is required.';\n    }\n\n    if (typeof MediaRecorder === 'undefined') {\n        throw 'Your browser does not support the Media Recorder API. Please try other modules e.g. WhammyRecorder or StereoAudioRecorder.';\n    }\n\n    config = config || {\n        // bitsPerSecond: 256 * 8 * 1024,\n        mimeType: 'video/webm'\n    };\n\n    if (config.type === 'audio') {\n        if (getTracks(mediaStream, 'video').length && getTracks(mediaStream, 'audio').length) {\n            var stream;\n            if (!!navigator.mozGetUserMedia) {\n                stream = new MediaStream();\n                stream.addTrack(getTracks(mediaStream, 'audio')[0]);\n            } else {\n                // webkitMediaStream\n                stream = new MediaStream(getTracks(mediaStream, 'audio'));\n            }\n            mediaStream = stream;\n        }\n\n        if (!config.mimeType || config.mimeType.toString().toLowerCase().indexOf('audio') === -1) {\n            config.mimeType = isChrome ? 'audio/webm' : 'audio/ogg';\n        }\n\n        if (config.mimeType && config.mimeType.toString().toLowerCase() !== 'audio/ogg' && !!navigator.mozGetUserMedia) {\n            // forcing better codecs on Firefox (via #166)\n            config.mimeType = 'audio/ogg';\n        }\n    }\n\n    var arrayOfBlobs = [];\n\n    /**\n     * This method returns array of blobs. Use only with \"timeSlice\". Its useful to preview recording anytime, without using the \"stop\" method.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * var arrayOfBlobs = recorder.getArrayOfBlobs();\n     * @returns {Array} Returns array of recorded blobs.\n     */\n    this.getArrayOfBlobs = function() {\n        return arrayOfBlobs;\n    };\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        // set defaults\n        self.blob = null;\n        self.clearRecordedData();\n        self.timestamps = [];\n        allStates = [];\n        arrayOfBlobs = [];\n\n        var recorderHints = config;\n\n        if (!config.disableLogs) {\n            console.log('Passing following config over MediaRecorder API.', recorderHints);\n        }\n\n        if (mediaRecorder) {\n            // mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.\n            mediaRecorder = null;\n        }\n\n        if (isChrome && !isMediaRecorderCompatible()) {\n            // to support video-only recording on stable\n            recorderHints = 'video/vp8';\n        }\n\n        if (typeof MediaRecorder.isTypeSupported === 'function' && recorderHints.mimeType) {\n            if (!MediaRecorder.isTypeSupported(recorderHints.mimeType)) {\n                if (!config.disableLogs) {\n                    console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n                }\n\n                recorderHints.mimeType = config.type === 'audio' ? 'audio/webm' : 'video/webm';\n            }\n        }\n\n        // using MediaRecorder API here\n        try {\n            mediaRecorder = new MediaRecorder(mediaStream, recorderHints);\n\n            // reset\n            config.mimeType = recorderHints.mimeType;\n        } catch (e) {\n            // chrome-based fallback\n            mediaRecorder = new MediaRecorder(mediaStream);\n        }\n\n        // old hack?\n        if (recorderHints.mimeType && !MediaRecorder.isTypeSupported && 'canRecordMimeType' in mediaRecorder && mediaRecorder.canRecordMimeType(recorderHints.mimeType) === false) {\n            if (!config.disableLogs) {\n                console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n            }\n        }\n\n        // Dispatching OnDataAvailable Handler\n        mediaRecorder.ondataavailable = function(e) {\n            if (e.data) {\n                allStates.push('ondataavailable: ' + bytesToSize(e.data.size));\n            }\n\n            if (typeof config.timeSlice === 'number') {\n                if (e.data && e.data.size) {\n                    arrayOfBlobs.push(e.data);\n                    updateTimeStamp();\n\n                    if (typeof config.ondataavailable === 'function') {\n                        // intervals based blobs\n                        var blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n                            type: getMimeType(recorderHints)\n                        });\n                        config.ondataavailable(blob);\n                    }\n                }\n                return;\n            }\n\n            if (!e.data || !e.data.size || e.data.size < 100 || self.blob) {\n                // make sure that stopRecording always getting fired\n                // even if there is invalid data\n                if (self.recordingCallback) {\n                    self.recordingCallback(new Blob([], {\n                        type: getMimeType(recorderHints)\n                    }));\n                    self.recordingCallback = null;\n                }\n                return;\n            }\n\n            self.blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n                type: getMimeType(recorderHints)\n            });\n\n            if (self.recordingCallback) {\n                self.recordingCallback(self.blob);\n                self.recordingCallback = null;\n            }\n        };\n\n        mediaRecorder.onstart = function() {\n            allStates.push('started');\n        };\n\n        mediaRecorder.onpause = function() {\n            allStates.push('paused');\n        };\n\n        mediaRecorder.onresume = function() {\n            allStates.push('resumed');\n        };\n\n        mediaRecorder.onstop = function() {\n            allStates.push('stopped');\n        };\n\n        mediaRecorder.onerror = function(error) {\n            if (!error) {\n                return;\n            }\n\n            if (!error.name) {\n                error.name = 'UnknownError';\n            }\n\n            allStates.push('error: ' + error);\n\n            if (!config.disableLogs) {\n                // via: https://w3c.github.io/mediacapture-record/MediaRecorder.html#exception-summary\n                if (error.name.toString().toLowerCase().indexOf('invalidstate') !== -1) {\n                    console.error('The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.', error);\n                } else if (error.name.toString().toLowerCase().indexOf('notsupported') !== -1) {\n                    console.error('MIME type (', recorderHints.mimeType, ') is not supported.', error);\n                } else if (error.name.toString().toLowerCase().indexOf('security') !== -1) {\n                    console.error('MediaRecorder security error', error);\n                }\n\n                // older code below\n                else if (error.name === 'OutOfMemory') {\n                    console.error('The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                } else if (error.name === 'IllegalStreamModification') {\n                    console.error('A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                } else if (error.name === 'OtherRecordingError') {\n                    console.error('Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                } else if (error.name === 'GenericError') {\n                    console.error('The UA cannot provide the codec or recording option that has been requested.', error);\n                } else {\n                    console.error('MediaRecorder Error', error);\n                }\n            }\n\n            (function(looper) {\n                if (!self.manuallyStopped && mediaRecorder && mediaRecorder.state === 'inactive') {\n                    delete config.timeslice;\n\n                    // 10 minutes, enough?\n                    mediaRecorder.start(10 * 60 * 1000);\n                    return;\n                }\n\n                setTimeout(looper, 1000);\n            })();\n\n            if (mediaRecorder.state !== 'inactive' && mediaRecorder.state !== 'stopped') {\n                mediaRecorder.stop();\n            }\n        };\n\n        if (typeof config.timeSlice === 'number') {\n            updateTimeStamp();\n            mediaRecorder.start(config.timeSlice);\n        } else {\n            // default is 24 hours; enough? (thanks https://github.com/slidevjs/slidev/pull/488)\n            // use config => {timeSlice: 1000} otherwise\n\n            mediaRecorder.start(24 * 60 * 60 * 1000);\n        }\n\n        if (config.initCallback) {\n            config.initCallback(); // old code\n        }\n    };\n\n    /**\n     * @property {Array} timestamps - Array of time stamps\n     * @memberof MediaStreamRecorder\n     * @example\n     * console.log(recorder.timestamps);\n     */\n    this.timestamps = [];\n\n    function updateTimeStamp() {\n        self.timestamps.push(new Date().getTime());\n\n        if (typeof config.onTimeStamp === 'function') {\n            config.onTimeStamp(self.timestamps[self.timestamps.length - 1], self.timestamps);\n        }\n    }\n\n    function getMimeType(secondObject) {\n        if (mediaRecorder && mediaRecorder.mimeType) {\n            return mediaRecorder.mimeType;\n        }\n\n        return secondObject.mimeType || 'video/webm';\n    }\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        callback = callback || function() {};\n\n        self.manuallyStopped = true; // used inside the mediaRecorder.onerror\n\n        if (!mediaRecorder) {\n            return;\n        }\n\n        this.recordingCallback = callback;\n\n        if (mediaRecorder.state === 'recording') {\n            mediaRecorder.stop();\n        }\n\n        if (typeof config.timeSlice === 'number') {\n            setTimeout(function() {\n                self.blob = new Blob(arrayOfBlobs, {\n                    type: getMimeType(config)\n                });\n\n                self.recordingCallback(self.blob);\n            }, 100);\n        }\n    };\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        if (!mediaRecorder) {\n            return;\n        }\n\n        if (mediaRecorder.state === 'recording') {\n            mediaRecorder.pause();\n        }\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        if (!mediaRecorder) {\n            return;\n        }\n\n        if (mediaRecorder.state === 'paused') {\n            mediaRecorder.resume();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        if (mediaRecorder && mediaRecorder.state === 'recording') {\n            self.stop(clearRecordedDataCB);\n        }\n\n        clearRecordedDataCB();\n    };\n\n    function clearRecordedDataCB() {\n        arrayOfBlobs = [];\n        mediaRecorder = null;\n        self.timestamps = [];\n    }\n\n    // Reference to \"MediaRecorder\" object\n    var mediaRecorder;\n\n    /**\n     * Access to native MediaRecorder API\n     * @method\n     * @memberof MediaStreamRecorder\n     * @instance\n     * @example\n     * var internal = recorder.getInternalRecorder();\n     * internal.ondataavailable = function() {}; // override\n     * internal.stream, internal.onpause, internal.onstop, etc.\n     * @returns {Object} Returns internal recording object.\n     */\n    this.getInternalRecorder = function() {\n        return mediaRecorder;\n    };\n\n    function isMediaStreamActive() {\n        if ('active' in mediaStream) {\n            if (!mediaStream.active) {\n                return false;\n            }\n        } else if ('ended' in mediaStream) { // old hack\n            if (mediaStream.ended) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.stop(function() {\n     *     var blob = recorder.blob;\n     * });\n     */\n    this.blob = null;\n\n\n    /**\n     * Get MediaRecorder readonly state.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * var state = recorder.getState();\n     * @returns {String} Returns recording state.\n     */\n    this.getState = function() {\n        if (!mediaRecorder) {\n            return 'inactive';\n        }\n\n        return mediaRecorder.state || 'inactive';\n    };\n\n    // list of all recording states\n    var allStates = [];\n\n    /**\n     * Get MediaRecorder all recording states.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * var state = recorder.getAllStates();\n     * @returns {Array} Returns all recording states\n     */\n    this.getAllStates = function() {\n        return allStates;\n    };\n\n    // if any Track within the MediaStream is muted or not enabled at any time, \n    // the browser will only record black frames \n    // or silence since that is the content produced by the Track\n    // so we need to stopRecording as soon as any single track ends.\n    if (typeof config.checkForInactiveTracks === 'undefined') {\n        config.checkForInactiveTracks = false; // disable to minimize CPU usage\n    }\n\n    var self = this;\n\n    // this method checks if media stream is stopped\n    // or if any track is ended.\n    (function looper() {\n        if (!mediaRecorder || config.checkForInactiveTracks === false) {\n            return;\n        }\n\n        if (isMediaStreamActive() === false) {\n            if (!config.disableLogs) {\n                console.log('MediaStream seems stopped.');\n            }\n            self.stop();\n            return;\n        }\n\n        setTimeout(looper, 1000); // check every second\n    })();\n\n    // for debugging\n    this.name = 'MediaStreamRecorder';\n    this.toString = function() {\n        return this.name;\n    };\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.MediaStreamRecorder = MediaStreamRecorder;\n}\n\n// source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js\n// https://github.com/mattdiamond/Recorderjs#license-mit\n// ______________________\n// StereoAudioRecorder.js\n\n/**\n * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring \"stereo\" audio-recording in chrome.\n * @summary JavaScript standalone object for stereo audio recording.\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\n * @author {@link https://MuazKhan.com|Muaz Khan}\n * @typedef StereoAudioRecorder\n * @class\n * @example\n * var recorder = new StereoAudioRecorder(MediaStream, {\n *     sampleRate: 44100,\n *     bufferSize: 4096\n * });\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}\n */\n\nfunction StereoAudioRecorder(mediaStream, config) {\n    if (!getTracks(mediaStream, 'audio').length) {\n        throw 'Your stream has no audio tracks.';\n    }\n\n    config = config || {};\n\n    var self = this;\n\n    // variables\n    var leftchannel = [];\n    var rightchannel = [];\n    var recording = false;\n    var recordingLength = 0;\n    var jsAudioNode;\n\n    var numberOfAudioChannels = 2;\n\n    /**\n     * Set sample rates such as 8K or 16K. Reference: http://stackoverflow.com/a/28977136/552182\n     * @property {number} desiredSampRate - Desired Bits per sample * 1000\n     * @memberof StereoAudioRecorder\n     * @instance\n     * @example\n     * var recorder = StereoAudioRecorder(mediaStream, {\n     *   desiredSampRate: 16 * 1000 // bits-per-sample * 1000\n     * });\n     */\n    var desiredSampRate = config.desiredSampRate;\n\n    // backward compatibility\n    if (config.leftChannel === true) {\n        numberOfAudioChannels = 1;\n    }\n\n    if (config.numberOfAudioChannels === 1) {\n        numberOfAudioChannels = 1;\n    }\n\n    if (!numberOfAudioChannels || numberOfAudioChannels < 1) {\n        numberOfAudioChannels = 2;\n    }\n\n    if (!config.disableLogs) {\n        console.log('StereoAudioRecorder is set to record number of channels: ' + numberOfAudioChannels);\n    }\n\n    // if any Track within the MediaStream is muted or not enabled at any time, \n    // the browser will only record black frames \n    // or silence since that is the content produced by the Track\n    // so we need to stopRecording as soon as any single track ends.\n    if (typeof config.checkForInactiveTracks === 'undefined') {\n        config.checkForInactiveTracks = true;\n    }\n\n    function isMediaStreamActive() {\n        if (config.checkForInactiveTracks === false) {\n            // always return \"true\"\n            return true;\n        }\n\n        if ('active' in mediaStream) {\n            if (!mediaStream.active) {\n                return false;\n            }\n        } else if ('ended' in mediaStream) { // old hack\n            if (mediaStream.ended) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        if (isMediaStreamActive() === false) {\n            throw 'Please make sure MediaStream is active.';\n        }\n\n        resetVariables();\n\n        isAudioProcessStarted = isPaused = false;\n        recording = true;\n\n        if (typeof config.timeSlice !== 'undefined') {\n            looper();\n        }\n    };\n\n    function mergeLeftRightBuffers(config, callback) {\n        function mergeAudioBuffers(config, cb) {\n            var numberOfAudioChannels = config.numberOfAudioChannels;\n\n            // todo: \"slice(0)\" --- is it causes loop? Should be removed?\n            var leftBuffers = config.leftBuffers.slice(0);\n            var rightBuffers = config.rightBuffers.slice(0);\n            var sampleRate = config.sampleRate;\n            var internalInterleavedLength = config.internalInterleavedLength;\n            var desiredSampRate = config.desiredSampRate;\n\n            if (numberOfAudioChannels === 2) {\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n                rightBuffers = mergeBuffers(rightBuffers, internalInterleavedLength);\n\n                if (desiredSampRate) {\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\n                    rightBuffers = interpolateArray(rightBuffers, desiredSampRate, sampleRate);\n                }\n            }\n\n            if (numberOfAudioChannels === 1) {\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n\n                if (desiredSampRate) {\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\n                }\n            }\n\n            // set sample rate as desired sample rate\n            if (desiredSampRate) {\n                sampleRate = desiredSampRate;\n            }\n\n            // for changing the sampling rate, reference:\n            // http://stackoverflow.com/a/28977136/552182\n            function interpolateArray(data, newSampleRate, oldSampleRate) {\n                var fitCount = Math.round(data.length * (newSampleRate / oldSampleRate));\n                var newData = [];\n                var springFactor = Number((data.length - 1) / (fitCount - 1));\n                newData[0] = data[0];\n                for (var i = 1; i < fitCount - 1; i++) {\n                    var tmp = i * springFactor;\n                    var before = Number(Math.floor(tmp)).toFixed();\n                    var after = Number(Math.ceil(tmp)).toFixed();\n                    var atPoint = tmp - before;\n                    newData[i] = linearInterpolate(data[before], data[after], atPoint);\n                }\n                newData[fitCount - 1] = data[data.length - 1];\n                return newData;\n            }\n\n            function linearInterpolate(before, after, atPoint) {\n                return before + (after - before) * atPoint;\n            }\n\n            function mergeBuffers(channelBuffer, rLength) {\n                var result = new Float64Array(rLength);\n                var offset = 0;\n                var lng = channelBuffer.length;\n\n                for (var i = 0; i < lng; i++) {\n                    var buffer = channelBuffer[i];\n                    result.set(buffer, offset);\n                    offset += buffer.length;\n                }\n\n                return result;\n            }\n\n            function interleave(leftChannel, rightChannel) {\n                var length = leftChannel.length + rightChannel.length;\n\n                var result = new Float64Array(length);\n\n                var inputIndex = 0;\n\n                for (var index = 0; index < length;) {\n                    result[index++] = leftChannel[inputIndex];\n                    result[index++] = rightChannel[inputIndex];\n                    inputIndex++;\n                }\n                return result;\n            }\n\n            function writeUTFBytes(view, offset, string) {\n                var lng = string.length;\n                for (var i = 0; i < lng; i++) {\n                    view.setUint8(offset + i, string.charCodeAt(i));\n                }\n            }\n\n            // interleave both channels together\n            var interleaved;\n\n            if (numberOfAudioChannels === 2) {\n                interleaved = interleave(leftBuffers, rightBuffers);\n            }\n\n            if (numberOfAudioChannels === 1) {\n                interleaved = leftBuffers;\n            }\n\n            var interleavedLength = interleaved.length;\n\n            // create wav file\n            var resultingBufferLength = 44 + interleavedLength * 2;\n\n            var buffer = new ArrayBuffer(resultingBufferLength);\n\n            var view = new DataView(buffer);\n\n            // RIFF chunk descriptor/identifier \n            writeUTFBytes(view, 0, 'RIFF');\n\n            // RIFF chunk length\n            // changed \"44\" to \"36\" via #401\n            view.setUint32(4, 36 + interleavedLength * 2, true);\n\n            // RIFF type \n            writeUTFBytes(view, 8, 'WAVE');\n\n            // format chunk identifier \n            // FMT sub-chunk\n            writeUTFBytes(view, 12, 'fmt ');\n\n            // format chunk length \n            view.setUint32(16, 16, true);\n\n            // sample format (raw)\n            view.setUint16(20, 1, true);\n\n            // stereo (2 channels)\n            view.setUint16(22, numberOfAudioChannels, true);\n\n            // sample rate \n            view.setUint32(24, sampleRate, true);\n\n            // byte rate (sample rate * block align)\n            view.setUint32(28, sampleRate * numberOfAudioChannels * 2, true);\n\n            // block align (channel count * bytes per sample) \n            view.setUint16(32, numberOfAudioChannels * 2, true);\n\n            // bits per sample \n            view.setUint16(34, 16, true);\n\n            // data sub-chunk\n            // data chunk identifier \n            writeUTFBytes(view, 36, 'data');\n\n            // data chunk length \n            view.setUint32(40, interleavedLength * 2, true);\n\n            // write the PCM samples\n            var lng = interleavedLength;\n            var index = 44;\n            var volume = 1;\n            for (var i = 0; i < lng; i++) {\n                view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\n                index += 2;\n            }\n\n            if (cb) {\n                return cb({\n                    buffer: buffer,\n                    view: view\n                });\n            }\n\n            postMessage({\n                buffer: buffer,\n                view: view\n            });\n        }\n\n        if (config.noWorker) {\n            mergeAudioBuffers(config, function(data) {\n                callback(data.buffer, data.view);\n            });\n            return;\n        }\n\n\n        var webWorker = processInWebWorker(mergeAudioBuffers);\n\n        webWorker.onmessage = function(event) {\n            callback(event.data.buffer, event.data.view);\n\n            // release memory\n            URL.revokeObjectURL(webWorker.workerURL);\n\n            // kill webworker (or Chrome will kill your page after ~25 calls)\n            webWorker.terminate();\n        };\n\n        webWorker.postMessage(config);\n    }\n\n    function processInWebWorker(_function) {\n        var workerURL = URL.createObjectURL(new Blob([_function.toString(),\n            ';this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\n        ], {\n            type: 'application/javascript'\n        }));\n\n        var worker = new Worker(workerURL);\n        worker.workerURL = workerURL;\n        return worker;\n    }\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        callback = callback || function() {};\n\n        // stop recording\n        recording = false;\n\n        mergeLeftRightBuffers({\n            desiredSampRate: desiredSampRate,\n            sampleRate: sampleRate,\n            numberOfAudioChannels: numberOfAudioChannels,\n            internalInterleavedLength: recordingLength,\n            leftBuffers: leftchannel,\n            rightBuffers: numberOfAudioChannels === 1 ? [] : rightchannel,\n            noWorker: config.noWorker\n        }, function(buffer, view) {\n            /**\n             * @property {Blob} blob - The recorded blob object.\n             * @memberof StereoAudioRecorder\n             * @example\n             * recorder.stop(function(){\n             *     var blob = recorder.blob;\n             * });\n             */\n            self.blob = new Blob([view], {\n                type: 'audio/wav'\n            });\n\n            /**\n             * @property {ArrayBuffer} buffer - The recorded buffer object.\n             * @memberof StereoAudioRecorder\n             * @example\n             * recorder.stop(function(){\n             *     var buffer = recorder.buffer;\n             * });\n             */\n            self.buffer = new ArrayBuffer(view.buffer.byteLength);\n\n            /**\n             * @property {DataView} view - The recorded data-view object.\n             * @memberof StereoAudioRecorder\n             * @example\n             * recorder.stop(function(){\n             *     var view = recorder.view;\n             * });\n             */\n            self.view = view;\n\n            self.sampleRate = desiredSampRate || sampleRate;\n            self.bufferSize = bufferSize;\n\n            // recorded audio length\n            self.length = recordingLength;\n\n            isAudioProcessStarted = false;\n\n            if (callback) {\n                callback(self.blob);\n            }\n        });\n    };\n\n    if (typeof RecordRTC.Storage === 'undefined') {\n        RecordRTC.Storage = {\n            AudioContextConstructor: null,\n            AudioContext: window.AudioContext || window.webkitAudioContext\n        };\n    }\n\n    if (!RecordRTC.Storage.AudioContextConstructor || RecordRTC.Storage.AudioContextConstructor.state === 'closed') {\n        RecordRTC.Storage.AudioContextConstructor = new RecordRTC.Storage.AudioContext();\n    }\n\n    var context = RecordRTC.Storage.AudioContextConstructor;\n\n    // creates an audio node from the microphone incoming stream\n    var audioInput = context.createMediaStreamSource(mediaStream);\n\n    var legalBufferValues = [0, 256, 512, 1024, 2048, 4096, 8192, 16384];\n\n    /**\n     * From the spec: This value controls how frequently the audioprocess event is\n     * dispatched and how many sample-frames need to be processed each call.\n     * Lower values for buffer size will result in a lower (better) latency.\n     * Higher values will be necessary to avoid audio breakup and glitches\n     * The size of the buffer (in sample-frames) which needs to\n     * be processed each time onprocessaudio is called.\n     * Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\n     * @property {number} bufferSize - Buffer-size for how frequently the audioprocess event is dispatched.\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder = new StereoAudioRecorder(mediaStream, {\n     *     bufferSize: 4096\n     * });\n     */\n\n    // \"0\" means, let chrome decide the most accurate buffer-size for current platform.\n    var bufferSize = typeof config.bufferSize === 'undefined' ? 4096 : config.bufferSize;\n\n    if (legalBufferValues.indexOf(bufferSize) === -1) {\n        if (!config.disableLogs) {\n            console.log('Legal values for buffer-size are ' + JSON.stringify(legalBufferValues, null, '\\t'));\n        }\n    }\n\n    if (context.createJavaScriptNode) {\n        jsAudioNode = context.createJavaScriptNode(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n    } else if (context.createScriptProcessor) {\n        jsAudioNode = context.createScriptProcessor(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n    } else {\n        throw 'WebAudio API has no support on this browser.';\n    }\n\n    // connect the stream to the script processor\n    audioInput.connect(jsAudioNode);\n\n    if (!config.bufferSize) {\n        bufferSize = jsAudioNode.bufferSize; // device buffer-size\n    }\n\n    /**\n     * The sample rate (in sample-frames per second) at which the\n     * AudioContext handles audio. It is assumed that all AudioNodes\n     * in the context run at this rate. In making this assumption,\n     * sample-rate converters or \"varispeed\" processors are not supported\n     * in real-time processing.\n     * The sampleRate parameter describes the sample-rate of the\n     * linear PCM audio data in the buffer in sample-frames per second.\n     * An implementation must support sample-rates in at least\n     * the range 22050 to 96000.\n     * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder = new StereoAudioRecorder(mediaStream, {\n     *     sampleRate: 44100\n     * });\n     */\n    var sampleRate = typeof config.sampleRate !== 'undefined' ? config.sampleRate : context.sampleRate || 44100;\n\n    if (sampleRate < 22050 || sampleRate > 96000) {\n        // Ref: http://stackoverflow.com/a/26303918/552182\n        if (!config.disableLogs) {\n            console.log('sample-rate must be under range 22050 and 96000.');\n        }\n    }\n\n    if (!config.disableLogs) {\n        if (config.desiredSampRate) {\n            console.log('Desired sample-rate: ' + config.desiredSampRate);\n        }\n    }\n\n    var isPaused = false;\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        isPaused = true;\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        if (isMediaStreamActive() === false) {\n            throw 'Please make sure MediaStream is active.';\n        }\n\n        if (!recording) {\n            if (!config.disableLogs) {\n                console.log('Seems recording has been restarted.');\n            }\n            this.record();\n            return;\n        }\n\n        isPaused = false;\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        config.checkForInactiveTracks = false;\n\n        if (recording) {\n            this.stop(clearRecordedDataCB);\n        }\n\n        clearRecordedDataCB();\n    };\n\n    function resetVariables() {\n        leftchannel = [];\n        rightchannel = [];\n        recordingLength = 0;\n        isAudioProcessStarted = false;\n        recording = false;\n        isPaused = false;\n        context = null;\n\n        self.leftchannel = leftchannel;\n        self.rightchannel = rightchannel;\n        self.numberOfAudioChannels = numberOfAudioChannels;\n        self.desiredSampRate = desiredSampRate;\n        self.sampleRate = sampleRate;\n        self.recordingLength = recordingLength;\n\n        intervalsBasedBuffers = {\n            left: [],\n            right: [],\n            recordingLength: 0\n        };\n    }\n\n    function clearRecordedDataCB() {\n        if (jsAudioNode) {\n            jsAudioNode.onaudioprocess = null;\n            jsAudioNode.disconnect();\n            jsAudioNode = null;\n        }\n\n        if (audioInput) {\n            audioInput.disconnect();\n            audioInput = null;\n        }\n\n        resetVariables();\n    }\n\n    // for debugging\n    this.name = 'StereoAudioRecorder';\n    this.toString = function() {\n        return this.name;\n    };\n\n    var isAudioProcessStarted = false;\n\n    function onAudioProcessDataAvailable(e) {\n        if (isPaused) {\n            return;\n        }\n\n        if (isMediaStreamActive() === false) {\n            if (!config.disableLogs) {\n                console.log('MediaStream seems stopped.');\n            }\n            jsAudioNode.disconnect();\n            recording = false;\n        }\n\n        if (!recording) {\n            if (audioInput) {\n                audioInput.disconnect();\n                audioInput = null;\n            }\n            return;\n        }\n\n        /**\n         * This method is called on \"onaudioprocess\" event's first invocation.\n         * @method {function} onAudioProcessStarted\n         * @memberof StereoAudioRecorder\n         * @example\n         * recorder.onAudioProcessStarted: function() { };\n         */\n        if (!isAudioProcessStarted) {\n            isAudioProcessStarted = true;\n            if (config.onAudioProcessStarted) {\n                config.onAudioProcessStarted();\n            }\n\n            if (config.initCallback) {\n                config.initCallback();\n            }\n        }\n\n        var left = e.inputBuffer.getChannelData(0);\n\n        // we clone the samples\n        var chLeft = new Float32Array(left);\n        leftchannel.push(chLeft);\n\n        if (numberOfAudioChannels === 2) {\n            var right = e.inputBuffer.getChannelData(1);\n            var chRight = new Float32Array(right);\n            rightchannel.push(chRight);\n        }\n\n        recordingLength += bufferSize;\n\n        // export raw PCM\n        self.recordingLength = recordingLength;\n\n        if (typeof config.timeSlice !== 'undefined') {\n            intervalsBasedBuffers.recordingLength += bufferSize;\n            intervalsBasedBuffers.left.push(chLeft);\n\n            if (numberOfAudioChannels === 2) {\n                intervalsBasedBuffers.right.push(chRight);\n            }\n        }\n    }\n\n    jsAudioNode.onaudioprocess = onAudioProcessDataAvailable;\n\n    // to prevent self audio to be connected with speakers\n    if (context.createMediaStreamDestination) {\n        jsAudioNode.connect(context.createMediaStreamDestination());\n    } else {\n        jsAudioNode.connect(context.destination);\n    }\n\n    // export raw PCM\n    this.leftchannel = leftchannel;\n    this.rightchannel = rightchannel;\n    this.numberOfAudioChannels = numberOfAudioChannels;\n    this.desiredSampRate = desiredSampRate;\n    this.sampleRate = sampleRate;\n    self.recordingLength = recordingLength;\n\n    // helper for intervals based blobs\n    var intervalsBasedBuffers = {\n        left: [],\n        right: [],\n        recordingLength: 0\n    };\n\n    // this looper is used to support intervals based blobs (via timeSlice+ondataavailable)\n    function looper() {\n        if (!recording || typeof config.ondataavailable !== 'function' || typeof config.timeSlice === 'undefined') {\n            return;\n        }\n\n        if (intervalsBasedBuffers.left.length) {\n            mergeLeftRightBuffers({\n                desiredSampRate: desiredSampRate,\n                sampleRate: sampleRate,\n                numberOfAudioChannels: numberOfAudioChannels,\n                internalInterleavedLength: intervalsBasedBuffers.recordingLength,\n                leftBuffers: intervalsBasedBuffers.left,\n                rightBuffers: numberOfAudioChannels === 1 ? [] : intervalsBasedBuffers.right\n            }, function(buffer, view) {\n                var blob = new Blob([view], {\n                    type: 'audio/wav'\n                });\n                config.ondataavailable(blob);\n\n                setTimeout(looper, config.timeSlice);\n            });\n\n            intervalsBasedBuffers = {\n                left: [],\n                right: [],\n                recordingLength: 0\n            };\n        } else {\n            setTimeout(looper, config.timeSlice);\n        }\n    }\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.StereoAudioRecorder = StereoAudioRecorder;\n}\n\n// _________________\n// CanvasRecorder.js\n\n/**\n * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.\n * @summary HTML2Canvas recording into video WebM.\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\n * @author {@link https://MuazKhan.com|Muaz Khan}\n * @typedef CanvasRecorder\n * @class\n * @example\n * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true, useWhammyRecorder: true });\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.\n * @param {object} config - {disableLogs:true, initCallback: function}\n */\n\nfunction CanvasRecorder(htmlElement, config) {\n    if (typeof html2canvas === 'undefined') {\n        throw 'Please link: https://www.webrtc-experiment.com/screenshot.js';\n    }\n\n    config = config || {};\n    if (!config.frameInterval) {\n        config.frameInterval = 10;\n    }\n\n    // via DetectRTC.js\n    var isCanvasSupportsStreamCapturing = false;\n    ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function(item) {\n        if (item in document.createElement('canvas')) {\n            isCanvasSupportsStreamCapturing = true;\n        }\n    });\n\n    var _isChrome = (!!window.webkitRTCPeerConnection || !!window.webkitGetUserMedia) && !!window.chrome;\n\n    var chromeVersion = 50;\n    var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n    if (_isChrome && matchArray && matchArray[2]) {\n        chromeVersion = parseInt(matchArray[2], 10);\n    }\n\n    if (_isChrome && chromeVersion < 52) {\n        isCanvasSupportsStreamCapturing = false;\n    }\n\n    if (config.useWhammyRecorder) {\n        isCanvasSupportsStreamCapturing = false;\n    }\n\n    var globalCanvas, mediaStreamRecorder;\n\n    if (isCanvasSupportsStreamCapturing) {\n        if (!config.disableLogs) {\n            console.log('Your browser supports both MediRecorder API and canvas.captureStream!');\n        }\n\n        if (htmlElement instanceof HTMLCanvasElement) {\n            globalCanvas = htmlElement;\n        } else if (htmlElement instanceof CanvasRenderingContext2D) {\n            globalCanvas = htmlElement.canvas;\n        } else {\n            throw 'Please pass either HTMLCanvasElement or CanvasRenderingContext2D.';\n        }\n    } else if (!!navigator.mozGetUserMedia) {\n        if (!config.disableLogs) {\n            console.error('Canvas recording is NOT supported in Firefox.');\n        }\n    }\n\n    var isRecording;\n\n    /**\n     * This method records Canvas.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        isRecording = true;\n\n        if (isCanvasSupportsStreamCapturing && !config.useWhammyRecorder) {\n            // CanvasCaptureMediaStream\n            var canvasMediaStream;\n            if ('captureStream' in globalCanvas) {\n                canvasMediaStream = globalCanvas.captureStream(25); // 25 FPS\n            } else if ('mozCaptureStream' in globalCanvas) {\n                canvasMediaStream = globalCanvas.mozCaptureStream(25);\n            } else if ('webkitCaptureStream' in globalCanvas) {\n                canvasMediaStream = globalCanvas.webkitCaptureStream(25);\n            }\n\n            try {\n                var mdStream = new MediaStream();\n                mdStream.addTrack(getTracks(canvasMediaStream, 'video')[0]);\n                canvasMediaStream = mdStream;\n            } catch (e) {}\n\n            if (!canvasMediaStream) {\n                throw 'captureStream API are NOT available.';\n            }\n\n            // Note: Jan 18, 2016 status is that, \n            // Firefox MediaRecorder API can't record CanvasCaptureMediaStream object.\n            mediaStreamRecorder = new MediaStreamRecorder(canvasMediaStream, {\n                mimeType: config.mimeType || 'video/webm'\n            });\n            mediaStreamRecorder.record();\n        } else {\n            whammy.frames = [];\n            lastTime = new Date().getTime();\n            drawCanvasFrame();\n        }\n\n        if (config.initCallback) {\n            config.initCallback();\n        }\n    };\n\n    this.getWebPImages = function(callback) {\n        if (htmlElement.nodeName.toLowerCase() !== 'canvas') {\n            callback();\n            return;\n        }\n\n        var framesLength = whammy.frames.length;\n        whammy.frames.forEach(function(frame, idx) {\n            var framesRemaining = framesLength - idx;\n            if (!config.disableLogs) {\n                console.log(framesRemaining + '/' + framesLength + ' frames remaining');\n            }\n\n            if (config.onEncodingCallback) {\n                config.onEncodingCallback(framesRemaining, framesLength);\n            }\n\n            var webp = frame.image.toDataURL('image/webp', 1);\n            whammy.frames[idx].image = webp;\n        });\n\n        if (!config.disableLogs) {\n            console.log('Generating WebM');\n        }\n\n        callback();\n    };\n\n    /**\n     * This method stops recording Canvas.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        isRecording = false;\n\n        var that = this;\n\n        if (isCanvasSupportsStreamCapturing && mediaStreamRecorder) {\n            mediaStreamRecorder.stop(callback);\n            return;\n        }\n\n        this.getWebPImages(function() {\n            /**\n             * @property {Blob} blob - Recorded frames in video/webm blob.\n             * @memberof CanvasRecorder\n             * @example\n             * recorder.stop(function() {\n             *     var blob = recorder.blob;\n             * });\n             */\n            whammy.compile(function(blob) {\n                if (!config.disableLogs) {\n                    console.log('Recording finished!');\n                }\n\n                that.blob = blob;\n\n                if (that.blob.forEach) {\n                    that.blob = new Blob([], {\n                        type: 'video/webm'\n                    });\n                }\n\n                if (callback) {\n                    callback(that.blob);\n                }\n\n                whammy.frames = [];\n            });\n        });\n    };\n\n    var isPausedRecording = false;\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        isPausedRecording = true;\n\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\n            mediaStreamRecorder.pause();\n            return;\n        }\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        isPausedRecording = false;\n\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\n            mediaStreamRecorder.resume();\n            return;\n        }\n\n        if (!isRecording) {\n            this.record();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        if (isRecording) {\n            this.stop(clearRecordedDataCB);\n        }\n        clearRecordedDataCB();\n    };\n\n    function clearRecordedDataCB() {\n        whammy.frames = [];\n        isRecording = false;\n        isPausedRecording = false;\n    }\n\n    // for debugging\n    this.name = 'CanvasRecorder';\n    this.toString = function() {\n        return this.name;\n    };\n\n    function cloneCanvas() {\n        //create a new canvas\n        var newCanvas = document.createElement('canvas');\n        var context = newCanvas.getContext('2d');\n\n        //set dimensions\n        newCanvas.width = htmlElement.width;\n        newCanvas.height = htmlElement.height;\n\n        //apply the old canvas to the new one\n        context.drawImage(htmlElement, 0, 0);\n\n        //return the new canvas\n        return newCanvas;\n    }\n\n    function drawCanvasFrame() {\n        if (isPausedRecording) {\n            lastTime = new Date().getTime();\n            return setTimeout(drawCanvasFrame, 500);\n        }\n\n        if (htmlElement.nodeName.toLowerCase() === 'canvas') {\n            var duration = new Date().getTime() - lastTime;\n            // via #206, by Jack i.e. @Seymourr\n            lastTime = new Date().getTime();\n\n            whammy.frames.push({\n                image: cloneCanvas(),\n                duration: duration\n            });\n\n            if (isRecording) {\n                setTimeout(drawCanvasFrame, config.frameInterval);\n            }\n            return;\n        }\n\n        html2canvas(htmlElement, {\n            grabMouse: typeof config.showMousePointer === 'undefined' || config.showMousePointer,\n            onrendered: function(canvas) {\n                var duration = new Date().getTime() - lastTime;\n                if (!duration) {\n                    return setTimeout(drawCanvasFrame, config.frameInterval);\n                }\n\n                // via #206, by Jack i.e. @Seymourr\n                lastTime = new Date().getTime();\n\n                whammy.frames.push({\n                    image: canvas.toDataURL('image/webp', 1),\n                    duration: duration\n                });\n\n                if (isRecording) {\n                    setTimeout(drawCanvasFrame, config.frameInterval);\n                }\n            }\n        });\n    }\n\n    var lastTime = new Date().getTime();\n\n    var whammy = new Whammy.Video(100);\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.CanvasRecorder = CanvasRecorder;\n}\n\n// _________________\n// WhammyRecorder.js\n\n/**\n * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.\n * @summary Video recording feature in Chrome.\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\n * @author {@link https://MuazKhan.com|Muaz Khan}\n * @typedef WhammyRecorder\n * @class\n * @example\n * var recorder = new WhammyRecorder(mediaStream);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}\n */\n\nfunction WhammyRecorder(mediaStream, config) {\n\n    config = config || {};\n\n    if (!config.frameInterval) {\n        config.frameInterval = 10;\n    }\n\n    if (!config.disableLogs) {\n        console.log('Using frames-interval:', config.frameInterval);\n    }\n\n    /**\n     * This method records video.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        if (!config.width) {\n            config.width = 320;\n        }\n\n        if (!config.height) {\n            config.height = 240;\n        }\n\n        if (!config.video) {\n            config.video = {\n                width: config.width,\n                height: config.height\n            };\n        }\n\n        if (!config.canvas) {\n            config.canvas = {\n                width: config.width,\n                height: config.height\n            };\n        }\n\n        canvas.width = config.canvas.width || 320;\n        canvas.height = config.canvas.height || 240;\n\n        context = canvas.getContext('2d');\n\n        // setting defaults\n        if (config.video && config.video instanceof HTMLVideoElement) {\n            video = config.video.cloneNode();\n\n            if (config.initCallback) {\n                config.initCallback();\n            }\n        } else {\n            video = document.createElement('video');\n\n            setSrcObject(mediaStream, video);\n\n            video.onloadedmetadata = function() { // \"onloadedmetadata\" may NOT work in FF?\n                if (config.initCallback) {\n                    config.initCallback();\n                }\n            };\n\n            video.width = config.video.width;\n            video.height = config.video.height;\n        }\n\n        video.muted = true;\n        video.play();\n\n        lastTime = new Date().getTime();\n        whammy = new Whammy.Video();\n\n        if (!config.disableLogs) {\n            console.log('canvas resolutions', canvas.width, '*', canvas.height);\n            console.log('video width/height', video.width || canvas.width, '*', video.height || canvas.height);\n        }\n\n        drawFrames(config.frameInterval);\n    };\n\n    /**\n     * Draw and push frames to Whammy\n     * @param {integer} frameInterval - set minimum interval (in milliseconds) between each time we push a frame to Whammy\n     */\n    function drawFrames(frameInterval) {\n        frameInterval = typeof frameInterval !== 'undefined' ? frameInterval : 10;\n\n        var duration = new Date().getTime() - lastTime;\n        if (!duration) {\n            return setTimeout(drawFrames, frameInterval, frameInterval);\n        }\n\n        if (isPausedRecording) {\n            lastTime = new Date().getTime();\n            return setTimeout(drawFrames, 100);\n        }\n\n        // via #206, by Jack i.e. @Seymourr\n        lastTime = new Date().getTime();\n\n        if (video.paused) {\n            // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\n            // Tweak for Android Chrome\n            video.play();\n        }\n\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\n        whammy.frames.push({\n            duration: duration,\n            image: canvas.toDataURL('image/webp')\n        });\n\n        if (!isStopDrawing) {\n            setTimeout(drawFrames, frameInterval, frameInterval);\n        }\n    }\n\n    function asyncLoop(o) {\n        var i = -1,\n            length = o.length;\n\n        (function loop() {\n            i++;\n            if (i === length) {\n                o.callback();\n                return;\n            }\n\n            // \"setTimeout\" added by Jim McLeod\n            setTimeout(function() {\n                o.functionToLoop(loop, i);\n            }, 1);\n        })();\n    }\n\n\n    /**\n     * remove black frames from the beginning to the specified frame\n     * @param {Array} _frames - array of frames to be checked\n     * @param {number} _framesToCheck - number of frame until check will be executed (-1 - will drop all frames until frame not matched will be found)\n     * @param {number} _pixTolerance - 0 - very strict (only black pixel color) ; 1 - all\n     * @param {number} _frameTolerance - 0 - very strict (only black frame color) ; 1 - all\n     * @returns {Array} - array of frames\n     */\n    // pull#293 by @volodalexey\n    function dropBlackFrames(_frames, _framesToCheck, _pixTolerance, _frameTolerance, callback) {\n        var localCanvas = document.createElement('canvas');\n        localCanvas.width = canvas.width;\n        localCanvas.height = canvas.height;\n        var context2d = localCanvas.getContext('2d');\n        var resultFrames = [];\n\n        var checkUntilNotBlack = _framesToCheck === -1;\n        var endCheckFrame = (_framesToCheck && _framesToCheck > 0 && _framesToCheck <= _frames.length) ?\n            _framesToCheck : _frames.length;\n        var sampleColor = {\n            r: 0,\n            g: 0,\n            b: 0\n        };\n        var maxColorDifference = Math.sqrt(\n            Math.pow(255, 2) +\n            Math.pow(255, 2) +\n            Math.pow(255, 2)\n        );\n        var pixTolerance = _pixTolerance && _pixTolerance >= 0 && _pixTolerance <= 1 ? _pixTolerance : 0;\n        var frameTolerance = _frameTolerance && _frameTolerance >= 0 && _frameTolerance <= 1 ? _frameTolerance : 0;\n        var doNotCheckNext = false;\n\n        asyncLoop({\n            length: endCheckFrame,\n            functionToLoop: function(loop, f) {\n                var matchPixCount, endPixCheck, maxPixCount;\n\n                var finishImage = function() {\n                    if (!doNotCheckNext && maxPixCount - matchPixCount <= maxPixCount * frameTolerance) {\n                        // console.log('removed black frame : ' + f + ' ; frame duration ' + _frames[f].duration);\n                    } else {\n                        // console.log('frame is passed : ' + f);\n                        if (checkUntilNotBlack) {\n                            doNotCheckNext = true;\n                        }\n                        resultFrames.push(_frames[f]);\n                    }\n                    loop();\n                };\n\n                if (!doNotCheckNext) {\n                    var image = new Image();\n                    image.onload = function() {\n                        context2d.drawImage(image, 0, 0, canvas.width, canvas.height);\n                        var imageData = context2d.getImageData(0, 0, canvas.width, canvas.height);\n                        matchPixCount = 0;\n                        endPixCheck = imageData.data.length;\n                        maxPixCount = imageData.data.length / 4;\n\n                        for (var pix = 0; pix < endPixCheck; pix += 4) {\n                            var currentColor = {\n                                r: imageData.data[pix],\n                                g: imageData.data[pix + 1],\n                                b: imageData.data[pix + 2]\n                            };\n                            var colorDifference = Math.sqrt(\n                                Math.pow(currentColor.r - sampleColor.r, 2) +\n                                Math.pow(currentColor.g - sampleColor.g, 2) +\n                                Math.pow(currentColor.b - sampleColor.b, 2)\n                            );\n                            // difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)\n                            if (colorDifference <= maxColorDifference * pixTolerance) {\n                                matchPixCount++;\n                            }\n                        }\n                        finishImage();\n                    };\n                    image.src = _frames[f].image;\n                } else {\n                    finishImage();\n                }\n            },\n            callback: function() {\n                resultFrames = resultFrames.concat(_frames.slice(endCheckFrame));\n\n                if (resultFrames.length <= 0) {\n                    // at least one last frame should be available for next manipulation\n                    // if total duration of all frames will be < 1000 than ffmpeg doesn't work well...\n                    resultFrames.push(_frames[_frames.length - 1]);\n                }\n                callback(resultFrames);\n            }\n        });\n    }\n\n    var isStopDrawing = false;\n\n    /**\n     * This method stops recording video.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        callback = callback || function() {};\n\n        isStopDrawing = true;\n\n        var _this = this;\n        // analyse of all frames takes some time!\n        setTimeout(function() {\n            // e.g. dropBlackFrames(frames, 10, 1, 1) - will cut all 10 frames\n            // e.g. dropBlackFrames(frames, 10, 0.5, 0.5) - will analyse 10 frames\n            // e.g. dropBlackFrames(frames, 10) === dropBlackFrames(frames, 10, 0, 0) - will analyse 10 frames with strict black color\n            dropBlackFrames(whammy.frames, -1, null, null, function(frames) {\n                whammy.frames = frames;\n\n                // to display advertisement images!\n                if (config.advertisement && config.advertisement.length) {\n                    whammy.frames = config.advertisement.concat(whammy.frames);\n                }\n\n                /**\n                 * @property {Blob} blob - Recorded frames in video/webm blob.\n                 * @memberof WhammyRecorder\n                 * @example\n                 * recorder.stop(function() {\n                 *     var blob = recorder.blob;\n                 * });\n                 */\n                whammy.compile(function(blob) {\n                    _this.blob = blob;\n\n                    if (_this.blob.forEach) {\n                        _this.blob = new Blob([], {\n                            type: 'video/webm'\n                        });\n                    }\n\n                    if (callback) {\n                        callback(_this.blob);\n                    }\n                });\n            });\n        }, 10);\n    };\n\n    var isPausedRecording = false;\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        isPausedRecording = true;\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        isPausedRecording = false;\n\n        if (isStopDrawing) {\n            this.record();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        if (!isStopDrawing) {\n            this.stop(clearRecordedDataCB);\n        }\n        clearRecordedDataCB();\n    };\n\n    function clearRecordedDataCB() {\n        whammy.frames = [];\n        isStopDrawing = true;\n        isPausedRecording = false;\n    }\n\n    // for debugging\n    this.name = 'WhammyRecorder';\n    this.toString = function() {\n        return this.name;\n    };\n\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n\n    var video;\n    var lastTime;\n    var whammy;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.WhammyRecorder = WhammyRecorder;\n}\n\n// https://github.com/antimatter15/whammy/blob/master/LICENSE\n// _________\n// Whammy.js\n\n// todo: Firefox now supports webp for webm containers!\n// their MediaRecorder implementation works well!\n// should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?\n\n/**\n * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}\n * @summary A real time javascript webm encoder based on a canvas hack.\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\n * @author {@link https://MuazKhan.com|Muaz Khan}\n * @typedef Whammy\n * @class\n * @example\n * var recorder = new Whammy().Video(15);\n * recorder.add(context || canvas || dataURL);\n * var output = recorder.compile();\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\nvar Whammy = (function() {\n    // a more abstract-ish API\n\n    function WhammyVideo(duration) {\n        this.frames = [];\n        this.duration = duration || 1;\n        this.quality = 0.8;\n    }\n\n    /**\n     * Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.\n     * @method\n     * @memberof Whammy\n     * @example\n     * recorder = new Whammy().Video(0.8, 100);\n     * recorder.add(canvas || context || 'image/webp');\n     * @param {string} frame - Canvas || Context || image/webp\n     * @param {number} duration - Stick a duration (in milliseconds)\n     */\n    WhammyVideo.prototype.add = function(frame, duration) {\n        if ('canvas' in frame) { //CanvasRenderingContext2D\n            frame = frame.canvas;\n        }\n\n        if ('toDataURL' in frame) {\n            frame = frame.toDataURL('image/webp', this.quality);\n        }\n\n        if (!(/^data:image\\/webp;base64,/ig).test(frame)) {\n            throw 'Input must be formatted properly as a base64 encoded DataURI of type image/webp';\n        }\n        this.frames.push({\n            image: frame,\n            duration: duration || this.duration\n        });\n    };\n\n    function processInWebWorker(_function) {\n        var blob = URL.createObjectURL(new Blob([_function.toString(),\n            'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\n        ], {\n            type: 'application/javascript'\n        }));\n\n        var worker = new Worker(blob);\n        URL.revokeObjectURL(blob);\n        return worker;\n    }\n\n    function whammyInWebWorker(frames) {\n        function ArrayToWebM(frames) {\n            var info = checkFrames(frames);\n            if (!info) {\n                return [];\n            }\n\n            var clusterMaxDuration = 30000;\n\n            var EBML = [{\n                'id': 0x1a45dfa3, // EBML\n                'data': [{\n                    'data': 1,\n                    'id': 0x4286 // EBMLVersion\n                }, {\n                    'data': 1,\n                    'id': 0x42f7 // EBMLReadVersion\n                }, {\n                    'data': 4,\n                    'id': 0x42f2 // EBMLMaxIDLength\n                }, {\n                    'data': 8,\n                    'id': 0x42f3 // EBMLMaxSizeLength\n                }, {\n                    'data': 'webm',\n                    'id': 0x4282 // DocType\n                }, {\n                    'data': 2,\n                    'id': 0x4287 // DocTypeVersion\n                }, {\n                    'data': 2,\n                    'id': 0x4285 // DocTypeReadVersion\n                }]\n            }, {\n                'id': 0x18538067, // Segment\n                'data': [{\n                    'id': 0x1549a966, // Info\n                    'data': [{\n                        'data': 1e6, //do things in millisecs (num of nanosecs for duration scale)\n                        'id': 0x2ad7b1 // TimecodeScale\n                    }, {\n                        'data': 'whammy',\n                        'id': 0x4d80 // MuxingApp\n                    }, {\n                        'data': 'whammy',\n                        'id': 0x5741 // WritingApp\n                    }, {\n                        'data': doubleToString(info.duration),\n                        'id': 0x4489 // Duration\n                    }]\n                }, {\n                    'id': 0x1654ae6b, // Tracks\n                    'data': [{\n                        'id': 0xae, // TrackEntry\n                        'data': [{\n                            'data': 1,\n                            'id': 0xd7 // TrackNumber\n                        }, {\n                            'data': 1,\n                            'id': 0x73c5 // TrackUID\n                        }, {\n                            'data': 0,\n                            'id': 0x9c // FlagLacing\n                        }, {\n                            'data': 'und',\n                            'id': 0x22b59c // Language\n                        }, {\n                            'data': 'V_VP8',\n                            'id': 0x86 // CodecID\n                        }, {\n                            'data': 'VP8',\n                            'id': 0x258688 // CodecName\n                        }, {\n                            'data': 1,\n                            'id': 0x83 // TrackType\n                        }, {\n                            'id': 0xe0, // Video\n                            'data': [{\n                                'data': info.width,\n                                'id': 0xb0 // PixelWidth\n                            }, {\n                                'data': info.height,\n                                'id': 0xba // PixelHeight\n                            }]\n                        }]\n                    }]\n                }]\n            }];\n\n            //Generate clusters (max duration)\n            var frameNumber = 0;\n            var clusterTimecode = 0;\n            while (frameNumber < frames.length) {\n\n                var clusterFrames = [];\n                var clusterDuration = 0;\n                do {\n                    clusterFrames.push(frames[frameNumber]);\n                    clusterDuration += frames[frameNumber].duration;\n                    frameNumber++;\n                } while (frameNumber < frames.length && clusterDuration < clusterMaxDuration);\n\n                var clusterCounter = 0;\n                var cluster = {\n                    'id': 0x1f43b675, // Cluster\n                    'data': getClusterData(clusterTimecode, clusterCounter, clusterFrames)\n                }; //Add cluster to segment\n                EBML[1].data.push(cluster);\n                clusterTimecode += clusterDuration;\n            }\n\n            return generateEBML(EBML);\n        }\n\n        function getClusterData(clusterTimecode, clusterCounter, clusterFrames) {\n            return [{\n                'data': clusterTimecode,\n                'id': 0xe7 // Timecode\n            }].concat(clusterFrames.map(function(webp) {\n                var block = makeSimpleBlock({\n                    discardable: 0,\n                    frame: webp.data.slice(4),\n                    invisible: 0,\n                    keyframe: 1,\n                    lacing: 0,\n                    trackNum: 1,\n                    timecode: Math.round(clusterCounter)\n                });\n                clusterCounter += webp.duration;\n                return {\n                    data: block,\n                    id: 0xa3\n                };\n            }));\n        }\n\n        // sums the lengths of all the frames and gets the duration\n\n        function checkFrames(frames) {\n            if (!frames[0]) {\n                postMessage({\n                    error: 'Something went wrong. Maybe WebP format is not supported in the current browser.'\n                });\n                return;\n            }\n\n            var width = frames[0].width,\n                height = frames[0].height,\n                duration = frames[0].duration;\n\n            for (var i = 1; i < frames.length; i++) {\n                duration += frames[i].duration;\n            }\n            return {\n                duration: duration,\n                width: width,\n                height: height\n            };\n        }\n\n        function numToBuffer(num) {\n            var parts = [];\n            while (num > 0) {\n                parts.push(num & 0xff);\n                num = num >> 8;\n            }\n            return new Uint8Array(parts.reverse());\n        }\n\n        function strToBuffer(str) {\n            return new Uint8Array(str.split('').map(function(e) {\n                return e.charCodeAt(0);\n            }));\n        }\n\n        function bitsToBuffer(bits) {\n            var data = [];\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\n            bits = pad + bits;\n            for (var i = 0; i < bits.length; i += 8) {\n                data.push(parseInt(bits.substr(i, 8), 2));\n            }\n            return new Uint8Array(data);\n        }\n\n        function generateEBML(json) {\n            var ebml = [];\n            for (var i = 0; i < json.length; i++) {\n                var data = json[i].data;\n\n                if (typeof data === 'object') {\n                    data = generateEBML(data);\n                }\n\n                if (typeof data === 'number') {\n                    data = bitsToBuffer(data.toString(2));\n                }\n\n                if (typeof data === 'string') {\n                    data = strToBuffer(data);\n                }\n\n                var len = data.size || data.byteLength || data.length;\n                var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\n                var sizeToString = len.toString(2);\n                var padded = (new Array((zeroes * 7 + 7 + 1) - sizeToString.length)).join('0') + sizeToString;\n                var size = (new Array(zeroes)).join('0') + '1' + padded;\n\n                ebml.push(numToBuffer(json[i].id));\n                ebml.push(bitsToBuffer(size));\n                ebml.push(data);\n            }\n\n            return new Blob(ebml, {\n                type: 'video/webm'\n            });\n        }\n\n        function toBinStrOld(bits) {\n            var data = '';\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\n            bits = pad + bits;\n            for (var i = 0; i < bits.length; i += 8) {\n                data += String.fromCharCode(parseInt(bits.substr(i, 8), 2));\n            }\n            return data;\n        }\n\n        function makeSimpleBlock(data) {\n            var flags = 0;\n\n            if (data.keyframe) {\n                flags |= 128;\n            }\n\n            if (data.invisible) {\n                flags |= 8;\n            }\n\n            if (data.lacing) {\n                flags |= (data.lacing << 1);\n            }\n\n            if (data.discardable) {\n                flags |= 1;\n            }\n\n            if (data.trackNum > 127) {\n                throw 'TrackNumber > 127 not supported';\n            }\n\n            var out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function(e) {\n                return String.fromCharCode(e);\n            }).join('') + data.frame;\n\n            return out;\n        }\n\n        function parseWebP(riff) {\n            var VP8 = riff.RIFF[0].WEBP[0];\n\n            var frameStart = VP8.indexOf('\\x9d\\x01\\x2a'); // A VP8 keyframe starts with the 0x9d012a header\n            for (var i = 0, c = []; i < 4; i++) {\n                c[i] = VP8.charCodeAt(frameStart + 3 + i);\n            }\n\n            var width, height, tmp;\n\n            //the code below is literally copied verbatim from the bitstream spec\n            tmp = (c[1] << 8) | c[0];\n            width = tmp & 0x3FFF;\n            tmp = (c[3] << 8) | c[2];\n            height = tmp & 0x3FFF;\n            return {\n                width: width,\n                height: height,\n                data: VP8,\n                riff: riff\n            };\n        }\n\n        function getStrLength(string, offset) {\n            return parseInt(string.substr(offset + 4, 4).split('').map(function(i) {\n                var unpadded = i.charCodeAt(0).toString(2);\n                return (new Array(8 - unpadded.length + 1)).join('0') + unpadded;\n            }).join(''), 2);\n        }\n\n        function parseRIFF(string) {\n            var offset = 0;\n            var chunks = {};\n\n            while (offset < string.length) {\n                var id = string.substr(offset, 4);\n                var len = getStrLength(string, offset);\n                var data = string.substr(offset + 4 + 4, len);\n                offset += 4 + 4 + len;\n                chunks[id] = chunks[id] || [];\n\n                if (id === 'RIFF' || id === 'LIST') {\n                    chunks[id].push(parseRIFF(data));\n                } else {\n                    chunks[id].push(data);\n                }\n            }\n            return chunks;\n        }\n\n        function doubleToString(num) {\n            return [].slice.call(\n                new Uint8Array((new Float64Array([num])).buffer), 0).map(function(e) {\n                return String.fromCharCode(e);\n            }).reverse().join('');\n        }\n\n        var webm = new ArrayToWebM(frames.map(function(frame) {\n            var webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\n            webp.duration = frame.duration;\n            return webp;\n        }));\n\n        postMessage(webm);\n    }\n\n    /**\n     * Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof Whammy\n     * @example\n     * recorder = new Whammy().Video(0.8, 100);\n     * recorder.compile(function(blob) {\n     *    // blob.size - blob.type\n     * });\n     */\n    WhammyVideo.prototype.compile = function(callback) {\n        var webWorker = processInWebWorker(whammyInWebWorker);\n\n        webWorker.onmessage = function(event) {\n            if (event.data.error) {\n                console.error(event.data.error);\n                return;\n            }\n            callback(event.data);\n        };\n\n        webWorker.postMessage(this.frames);\n    };\n\n    return {\n        /**\n         * A more abstract-ish API.\n         * @method\n         * @memberof Whammy\n         * @example\n         * recorder = new Whammy().Video(0.8, 100);\n         * @param {?number} speed - 0.8\n         * @param {?number} quality - 100\n         */\n        Video: WhammyVideo\n    };\n})();\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.Whammy = Whammy;\n}\n\n// ______________ (indexed-db)\n// DiskStorage.js\n\n/**\n * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.\n * @summary Writing blobs into IndexedDB.\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\n * @author {@link https://MuazKhan.com|Muaz Khan}\n * @example\n * DiskStorage.Store({\n *     audioBlob: yourAudioBlob,\n *     videoBlob: yourVideoBlob,\n *     gifBlob  : yourGifBlob\n * });\n * DiskStorage.Fetch(function(dataURL, type) {\n *     if(type === 'audioBlob') { }\n *     if(type === 'videoBlob') { }\n *     if(type === 'gifBlob')   { }\n * });\n * // DiskStorage.dataStoreName = 'recordRTC';\n * // DiskStorage.onError = function(error) { };\n * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\n * @property {function} Fetch - This method fetches stored blobs from IndexedDB.\n * @property {function} Store - This method stores blobs in IndexedDB.\n * @property {function} onError - This function is invoked for any known/unknown error.\n * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\n\nvar DiskStorage = {\n    /**\n     * This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\n     * @method\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.init();\n     */\n    init: function() {\n        var self = this;\n\n        if (typeof indexedDB === 'undefined' || typeof indexedDB.open === 'undefined') {\n            console.error('IndexedDB API are not available in this browser.');\n            return;\n        }\n\n        var dbVersion = 1;\n        var dbName = this.dbName || location.href.replace(/\\/|:|#|%|\\.|\\[|\\]/g, ''),\n            db;\n        var request = indexedDB.open(dbName, dbVersion);\n\n        function createObjectStore(dataBase) {\n            dataBase.createObjectStore(self.dataStoreName);\n        }\n\n        function putInDB() {\n            var transaction = db.transaction([self.dataStoreName], 'readwrite');\n\n            if (self.videoBlob) {\n                transaction.objectStore(self.dataStoreName).put(self.videoBlob, 'videoBlob');\n            }\n\n            if (self.gifBlob) {\n                transaction.objectStore(self.dataStoreName).put(self.gifBlob, 'gifBlob');\n            }\n\n            if (self.audioBlob) {\n                transaction.objectStore(self.dataStoreName).put(self.audioBlob, 'audioBlob');\n            }\n\n            function getFromStore(portionName) {\n                transaction.objectStore(self.dataStoreName).get(portionName).onsuccess = function(event) {\n                    if (self.callback) {\n                        self.callback(event.target.result, portionName);\n                    }\n                };\n            }\n\n            getFromStore('audioBlob');\n            getFromStore('videoBlob');\n            getFromStore('gifBlob');\n        }\n\n        request.onerror = self.onError;\n\n        request.onsuccess = function() {\n            db = request.result;\n            db.onerror = self.onError;\n\n            if (db.setVersion) {\n                if (db.version !== dbVersion) {\n                    var setVersion = db.setVersion(dbVersion);\n                    setVersion.onsuccess = function() {\n                        createObjectStore(db);\n                        putInDB();\n                    };\n                } else {\n                    putInDB();\n                }\n            } else {\n                putInDB();\n            }\n        };\n        request.onupgradeneeded = function(event) {\n            createObjectStore(event.target.result);\n        };\n    },\n    /**\n     * This method fetches stored blobs from IndexedDB.\n     * @method\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.Fetch(function(dataURL, type) {\n     *     if(type === 'audioBlob') { }\n     *     if(type === 'videoBlob') { }\n     *     if(type === 'gifBlob')   { }\n     * });\n     */\n    Fetch: function(callback) {\n        this.callback = callback;\n        this.init();\n\n        return this;\n    },\n    /**\n     * This method stores blobs in IndexedDB.\n     * @method\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.Store({\n     *     audioBlob: yourAudioBlob,\n     *     videoBlob: yourVideoBlob,\n     *     gifBlob  : yourGifBlob\n     * });\n     */\n    Store: function(config) {\n        this.audioBlob = config.audioBlob;\n        this.videoBlob = config.videoBlob;\n        this.gifBlob = config.gifBlob;\n\n        this.init();\n\n        return this;\n    },\n    /**\n     * This function is invoked for any known/unknown error.\n     * @method\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.onError = function(error){\n     *     alerot( JSON.stringify(error) );\n     * };\n     */\n    onError: function(error) {\n        console.error(JSON.stringify(error, null, '\\t'));\n    },\n\n    /**\n     * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.dataStoreName = 'recordRTC';\n     */\n    dataStoreName: 'recordRTC',\n    dbName: null\n};\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.DiskStorage = DiskStorage;\n}\n\n// ______________\n// GifRecorder.js\n\n/**\n * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\n * @author {@link https://MuazKhan.com|Muaz Khan}\n * @typedef GifRecorder\n * @class\n * @example\n * var recorder = new GifRecorder(mediaStream || canvas || context, { onGifPreview: function, onGifRecordingStarted: function, width: 1280, height: 720, frameRate: 200, quality: 10 });\n * recorder.record();\n * recorder.stop(function(blob) {\n *     img.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.\n * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}\n */\n\nfunction GifRecorder(mediaStream, config) {\n    if (typeof GIFEncoder === 'undefined') {\n        throw new Error('Missing https://www.webrtc-experiment.com/gif-recorder.js');\n    }\n\n    config = config || {};\n\n    var isHTMLObject = mediaStream instanceof CanvasRenderingContext2D || mediaStream instanceof HTMLCanvasElement;\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        if (typeof GIFEncoder === 'undefined') {\n            setTimeout(self.record, 1000);\n            return;\n        }\n\n        if (!isLoadedMetaData) {\n            setTimeout(self.record, 1000);\n            return;\n        }\n\n        if (!isHTMLObject) {\n            if (!config.width) {\n                config.width = video.offsetWidth || 320;\n            }\n\n            if (!config.height) {\n                config.height = video.offsetHeight || 240;\n            }\n\n            if (!config.video) {\n                config.video = {\n                    width: config.width,\n                    height: config.height\n                };\n            }\n\n            if (!config.canvas) {\n                config.canvas = {\n                    width: config.width,\n                    height: config.height\n                };\n            }\n\n            canvas.width = config.canvas.width || 320;\n            canvas.height = config.canvas.height || 240;\n\n            video.width = config.video.width || 320;\n            video.height = config.video.height || 240;\n        }\n\n        // external library to record as GIF images\n        gifEncoder = new GIFEncoder();\n\n        // void setRepeat(int iter) \n        // Sets the number of times the set of GIF frames should be played. \n        // Default is 1; 0 means play indefinitely.\n        gifEncoder.setRepeat(0);\n\n        // void setFrameRate(Number fps) \n        // Sets frame rate in frames per second. \n        // Equivalent to setDelay(1000/fps).\n        // Using \"setDelay\" instead of \"setFrameRate\"\n        gifEncoder.setDelay(config.frameRate || 200);\n\n        // void setQuality(int quality) \n        // Sets quality of color quantization (conversion of images to the \n        // maximum 256 colors allowed by the GIF specification). \n        // Lower values (minimum = 1) produce better colors, \n        // but slow processing significantly. 10 is the default, \n        // and produces good color mapping at reasonable speeds. \n        // Values greater than 20 do not yield significant improvements in speed.\n        gifEncoder.setQuality(config.quality || 10);\n\n        // Boolean start() \n        // This writes the GIF Header and returns false if it fails.\n        gifEncoder.start();\n\n        if (typeof config.onGifRecordingStarted === 'function') {\n            config.onGifRecordingStarted();\n        }\n\n        startTime = Date.now();\n\n        function drawVideoFrame(time) {\n            if (self.clearedRecordedData === true) {\n                return;\n            }\n\n            if (isPausedRecording) {\n                return setTimeout(function() {\n                    drawVideoFrame(time);\n                }, 100);\n            }\n\n            lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\n\n            if (typeof lastFrameTime === undefined) {\n                lastFrameTime = time;\n            }\n\n            // ~10 fps\n            if (time - lastFrameTime < 90) {\n                return;\n            }\n\n            if (!isHTMLObject && video.paused) {\n                // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\n                // Tweak for Android Chrome\n                video.play();\n            }\n\n            if (!isHTMLObject) {\n                context.drawImage(video, 0, 0, canvas.width, canvas.height);\n            }\n\n            if (config.onGifPreview) {\n                config.onGifPreview(canvas.toDataURL('image/png'));\n            }\n\n            gifEncoder.addFrame(context);\n            lastFrameTime = time;\n        }\n\n        lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\n\n        if (config.initCallback) {\n            config.initCallback();\n        }\n    };\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     img.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        callback = callback || function() {};\n\n        if (lastAnimationFrame) {\n            cancelAnimationFrame(lastAnimationFrame);\n        }\n\n        endTime = Date.now();\n\n        /**\n         * @property {Blob} blob - The recorded blob object.\n         * @memberof GifRecorder\n         * @example\n         * recorder.stop(function(){\n         *     var blob = recorder.blob;\n         * });\n         */\n        this.blob = new Blob([new Uint8Array(gifEncoder.stream().bin)], {\n            type: 'image/gif'\n        });\n\n        callback(this.blob);\n\n        // bug: find a way to clear old recorded blobs\n        gifEncoder.stream().bin = [];\n    };\n\n    var isPausedRecording = false;\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        isPausedRecording = true;\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        isPausedRecording = false;\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        self.clearedRecordedData = true;\n        clearRecordedDataCB();\n    };\n\n    function clearRecordedDataCB() {\n        if (gifEncoder) {\n            gifEncoder.stream().bin = [];\n        }\n    }\n\n    // for debugging\n    this.name = 'GifRecorder';\n    this.toString = function() {\n        return this.name;\n    };\n\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n\n    if (isHTMLObject) {\n        if (mediaStream instanceof CanvasRenderingContext2D) {\n            context = mediaStream;\n            canvas = context.canvas;\n        } else if (mediaStream instanceof HTMLCanvasElement) {\n            context = mediaStream.getContext('2d');\n            canvas = mediaStream;\n        }\n    }\n\n    var isLoadedMetaData = true;\n\n    if (!isHTMLObject) {\n        var video = document.createElement('video');\n        video.muted = true;\n        video.autoplay = true;\n        video.playsInline = true;\n\n        isLoadedMetaData = false;\n        video.onloadedmetadata = function() {\n            isLoadedMetaData = true;\n        };\n\n        setSrcObject(mediaStream, video);\n\n        video.play();\n    }\n\n    var lastAnimationFrame = null;\n    var startTime, endTime, lastFrameTime;\n\n    var gifEncoder;\n\n    var self = this;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.GifRecorder = GifRecorder;\n}\n\n// Last time updated: 2019-06-21 4:09:42 AM UTC\n\n// ________________________\n// MultiStreamsMixer v1.2.2\n\n// Open-Sourced: https://github.com/muaz-khan/MultiStreamsMixer\n\n// --------------------------------------------------\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// --------------------------------------------------\n\nfunction MultiStreamsMixer(arrayOfMediaStreams, elementClass) {\n\n    var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\n\n    (function(that) {\n        if (typeof RecordRTC !== 'undefined') {\n            return;\n        }\n\n        if (!that) {\n            return;\n        }\n\n        if (typeof window !== 'undefined') {\n            return;\n        }\n\n        if (typeof global === 'undefined') {\n            return;\n        }\n\n        global.navigator = {\n            userAgent: browserFakeUserAgent,\n            getUserMedia: function() {}\n        };\n\n        if (!global.console) {\n            global.console = {};\n        }\n\n        if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\n            global.console.error = global.console.log = global.console.log || function() {\n                console.log(arguments);\n            };\n        }\n\n        if (typeof document === 'undefined') {\n            /*global document:true */\n            that.document = {\n                documentElement: {\n                    appendChild: function() {\n                        return '';\n                    }\n                }\n            };\n\n            document.createElement = document.captureStream = document.mozCaptureStream = function() {\n                var obj = {\n                    getContext: function() {\n                        return obj;\n                    },\n                    play: function() {},\n                    pause: function() {},\n                    drawImage: function() {},\n                    toDataURL: function() {\n                        return '';\n                    },\n                    style: {}\n                };\n                return obj;\n            };\n\n            that.HTMLVideoElement = function() {};\n        }\n\n        if (typeof location === 'undefined') {\n            /*global location:true */\n            that.location = {\n                protocol: 'file:',\n                href: '',\n                hash: ''\n            };\n        }\n\n        if (typeof screen === 'undefined') {\n            /*global screen:true */\n            that.screen = {\n                width: 0,\n                height: 0\n            };\n        }\n\n        if (typeof URL === 'undefined') {\n            /*global screen:true */\n            that.URL = {\n                createObjectURL: function() {\n                    return '';\n                },\n                revokeObjectURL: function() {\n                    return '';\n                }\n            };\n        }\n\n        /*global window:true */\n        that.window = global;\n    })(typeof global !== 'undefined' ? global : null);\n\n    // requires: chrome://flags/#enable-experimental-web-platform-features\n\n    elementClass = elementClass || 'multi-streams-mixer';\n\n    var videos = [];\n    var isStopDrawingFrames = false;\n\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    canvas.style.opacity = 0;\n    canvas.style.position = 'absolute';\n    canvas.style.zIndex = -1;\n    canvas.style.top = '-1000em';\n    canvas.style.left = '-1000em';\n    canvas.className = elementClass;\n    (document.body || document.documentElement).appendChild(canvas);\n\n    this.disableLogs = false;\n    this.frameInterval = 10;\n\n    this.width = 360;\n    this.height = 240;\n\n    // use gain node to prevent echo\n    this.useGainNode = true;\n\n    var self = this;\n\n    // _____________________________\n    // Cross-Browser-Declarations.js\n\n    // WebAudio API representer\n    var AudioContext = window.AudioContext;\n\n    if (typeof AudioContext === 'undefined') {\n        if (typeof webkitAudioContext !== 'undefined') {\n            /*global AudioContext:true */\n            AudioContext = webkitAudioContext;\n        }\n\n        if (typeof mozAudioContext !== 'undefined') {\n            /*global AudioContext:true */\n            AudioContext = mozAudioContext;\n        }\n    }\n\n    /*jshint -W079 */\n    var URL = window.URL;\n\n    if (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\n        /*global URL:true */\n        URL = webkitURL;\n    }\n\n    if (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\n        if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n            navigator.getUserMedia = navigator.webkitGetUserMedia;\n        }\n\n        if (typeof navigator.mozGetUserMedia !== 'undefined') {\n            navigator.getUserMedia = navigator.mozGetUserMedia;\n        }\n    }\n\n    var MediaStream = window.MediaStream;\n\n    if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n        MediaStream = webkitMediaStream;\n    }\n\n    /*global MediaStream:true */\n    if (typeof MediaStream !== 'undefined') {\n        // override \"stop\" method for all browsers\n        if (typeof MediaStream.prototype.stop === 'undefined') {\n            MediaStream.prototype.stop = function() {\n                this.getTracks().forEach(function(track) {\n                    track.stop();\n                });\n            };\n        }\n    }\n\n    var Storage = {};\n\n    if (typeof AudioContext !== 'undefined') {\n        Storage.AudioContext = AudioContext;\n    } else if (typeof webkitAudioContext !== 'undefined') {\n        Storage.AudioContext = webkitAudioContext;\n    }\n\n    function setSrcObject(stream, element) {\n        if ('srcObject' in element) {\n            element.srcObject = stream;\n        } else if ('mozSrcObject' in element) {\n            element.mozSrcObject = stream;\n        } else {\n            element.srcObject = stream;\n        }\n    }\n\n    this.startDrawingFrames = function() {\n        drawVideosToCanvas();\n    };\n\n    function drawVideosToCanvas() {\n        if (isStopDrawingFrames) {\n            return;\n        }\n\n        var videosLength = videos.length;\n\n        var fullcanvas = false;\n        var remaining = [];\n        videos.forEach(function(video) {\n            if (!video.stream) {\n                video.stream = {};\n            }\n\n            if (video.stream.fullcanvas) {\n                fullcanvas = video;\n            } else {\n                // todo: video.stream.active or video.stream.live to fix blank frames issues?\n                remaining.push(video);\n            }\n        });\n\n        if (fullcanvas) {\n            canvas.width = fullcanvas.stream.width;\n            canvas.height = fullcanvas.stream.height;\n        } else if (remaining.length) {\n            canvas.width = videosLength > 1 ? remaining[0].width * 2 : remaining[0].width;\n\n            var height = 1;\n            if (videosLength === 3 || videosLength === 4) {\n                height = 2;\n            }\n            if (videosLength === 5 || videosLength === 6) {\n                height = 3;\n            }\n            if (videosLength === 7 || videosLength === 8) {\n                height = 4;\n            }\n            if (videosLength === 9 || videosLength === 10) {\n                height = 5;\n            }\n            canvas.height = remaining[0].height * height;\n        } else {\n            canvas.width = self.width || 360;\n            canvas.height = self.height || 240;\n        }\n\n        if (fullcanvas && fullcanvas instanceof HTMLVideoElement) {\n            drawImage(fullcanvas);\n        }\n\n        remaining.forEach(function(video, idx) {\n            drawImage(video, idx);\n        });\n\n        setTimeout(drawVideosToCanvas, self.frameInterval);\n    }\n\n    function drawImage(video, idx) {\n        if (isStopDrawingFrames) {\n            return;\n        }\n\n        var x = 0;\n        var y = 0;\n        var width = video.width;\n        var height = video.height;\n\n        if (idx === 1) {\n            x = video.width;\n        }\n\n        if (idx === 2) {\n            y = video.height;\n        }\n\n        if (idx === 3) {\n            x = video.width;\n            y = video.height;\n        }\n\n        if (idx === 4) {\n            y = video.height * 2;\n        }\n\n        if (idx === 5) {\n            x = video.width;\n            y = video.height * 2;\n        }\n\n        if (idx === 6) {\n            y = video.height * 3;\n        }\n\n        if (idx === 7) {\n            x = video.width;\n            y = video.height * 3;\n        }\n\n        if (typeof video.stream.left !== 'undefined') {\n            x = video.stream.left;\n        }\n\n        if (typeof video.stream.top !== 'undefined') {\n            y = video.stream.top;\n        }\n\n        if (typeof video.stream.width !== 'undefined') {\n            width = video.stream.width;\n        }\n\n        if (typeof video.stream.height !== 'undefined') {\n            height = video.stream.height;\n        }\n\n        context.drawImage(video, x, y, width, height);\n\n        if (typeof video.stream.onRender === 'function') {\n            video.stream.onRender(context, x, y, width, height, idx);\n        }\n    }\n\n    function getMixedStream() {\n        isStopDrawingFrames = false;\n        var mixedVideoStream = getMixedVideoStream();\n\n        var mixedAudioStream = getMixedAudioStream();\n        if (mixedAudioStream) {\n            mixedAudioStream.getTracks().filter(function(t) {\n                return t.kind === 'audio';\n            }).forEach(function(track) {\n                mixedVideoStream.addTrack(track);\n            });\n        }\n\n        var fullcanvas;\n        arrayOfMediaStreams.forEach(function(stream) {\n            if (stream.fullcanvas) {\n                fullcanvas = true;\n            }\n        });\n\n        // mixedVideoStream.prototype.appendStreams = appendStreams;\n        // mixedVideoStream.prototype.resetVideoStreams = resetVideoStreams;\n        // mixedVideoStream.prototype.clearRecordedData = clearRecordedData;\n\n        return mixedVideoStream;\n    }\n\n    function getMixedVideoStream() {\n        resetVideoStreams();\n\n        var capturedStream;\n\n        if ('captureStream' in canvas) {\n            capturedStream = canvas.captureStream();\n        } else if ('mozCaptureStream' in canvas) {\n            capturedStream = canvas.mozCaptureStream();\n        } else if (!self.disableLogs) {\n            console.error('Upgrade to latest Chrome or otherwise enable this flag: chrome://flags/#enable-experimental-web-platform-features');\n        }\n\n        var videoStream = new MediaStream();\n\n        capturedStream.getTracks().filter(function(t) {\n            return t.kind === 'video';\n        }).forEach(function(track) {\n            videoStream.addTrack(track);\n        });\n\n        canvas.stream = videoStream;\n\n        return videoStream;\n    }\n\n    function getMixedAudioStream() {\n        // via: @pehrsons\n        if (!Storage.AudioContextConstructor) {\n            Storage.AudioContextConstructor = new Storage.AudioContext();\n        }\n\n        self.audioContext = Storage.AudioContextConstructor;\n\n        self.audioSources = [];\n\n        if (self.useGainNode === true) {\n            self.gainNode = self.audioContext.createGain();\n            self.gainNode.connect(self.audioContext.destination);\n            self.gainNode.gain.value = 0; // don't hear self\n        }\n\n        var audioTracksLength = 0;\n        arrayOfMediaStreams.forEach(function(stream) {\n            if (!stream.getTracks().filter(function(t) {\n                    return t.kind === 'audio';\n                }).length) {\n                return;\n            }\n\n            audioTracksLength++;\n\n            var audioSource = self.audioContext.createMediaStreamSource(stream);\n\n            if (self.useGainNode === true) {\n                audioSource.connect(self.gainNode);\n            }\n\n            self.audioSources.push(audioSource);\n        });\n\n        if (!audioTracksLength) {\n            // because \"self.audioContext\" is not initialized\n            // that's why we've to ignore rest of the code\n            return;\n        }\n\n        self.audioDestination = self.audioContext.createMediaStreamDestination();\n        self.audioSources.forEach(function(audioSource) {\n            audioSource.connect(self.audioDestination);\n        });\n        return self.audioDestination.stream;\n    }\n\n    function getVideo(stream) {\n        var video = document.createElement('video');\n\n        setSrcObject(stream, video);\n\n        video.className = elementClass;\n\n        video.muted = true;\n        video.volume = 0;\n\n        video.width = stream.width || self.width || 360;\n        video.height = stream.height || self.height || 240;\n\n        video.play();\n\n        return video;\n    }\n\n    this.appendStreams = function(streams) {\n        if (!streams) {\n            throw 'First parameter is required.';\n        }\n\n        if (!(streams instanceof Array)) {\n            streams = [streams];\n        }\n\n        streams.forEach(function(stream) {\n            var newStream = new MediaStream();\n\n            if (stream.getTracks().filter(function(t) {\n                    return t.kind === 'video';\n                }).length) {\n                var video = getVideo(stream);\n                video.stream = stream;\n                videos.push(video);\n\n                newStream.addTrack(stream.getTracks().filter(function(t) {\n                    return t.kind === 'video';\n                })[0]);\n            }\n\n            if (stream.getTracks().filter(function(t) {\n                    return t.kind === 'audio';\n                }).length) {\n                var audioSource = self.audioContext.createMediaStreamSource(stream);\n                self.audioDestination = self.audioContext.createMediaStreamDestination();\n                audioSource.connect(self.audioDestination);\n\n                newStream.addTrack(self.audioDestination.stream.getTracks().filter(function(t) {\n                    return t.kind === 'audio';\n                })[0]);\n            }\n\n            arrayOfMediaStreams.push(newStream);\n        });\n    };\n\n    this.releaseStreams = function() {\n        videos = [];\n        isStopDrawingFrames = true;\n\n        if (self.gainNode) {\n            self.gainNode.disconnect();\n            self.gainNode = null;\n        }\n\n        if (self.audioSources.length) {\n            self.audioSources.forEach(function(source) {\n                source.disconnect();\n            });\n            self.audioSources = [];\n        }\n\n        if (self.audioDestination) {\n            self.audioDestination.disconnect();\n            self.audioDestination = null;\n        }\n\n        if (self.audioContext) {\n            self.audioContext.close();\n        }\n\n        self.audioContext = null;\n\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (canvas.stream) {\n            canvas.stream.stop();\n            canvas.stream = null;\n        }\n    };\n\n    this.resetVideoStreams = function(streams) {\n        if (streams && !(streams instanceof Array)) {\n            streams = [streams];\n        }\n\n        resetVideoStreams(streams);\n    };\n\n    function resetVideoStreams(streams) {\n        videos = [];\n        streams = streams || arrayOfMediaStreams;\n\n        // via: @adrian-ber\n        streams.forEach(function(stream) {\n            if (!stream.getTracks().filter(function(t) {\n                    return t.kind === 'video';\n                }).length) {\n                return;\n            }\n\n            var video = getVideo(stream);\n            video.stream = stream;\n            videos.push(video);\n        });\n    }\n\n    // for debugging\n    this.name = 'MultiStreamsMixer';\n    this.toString = function() {\n        return this.name;\n    };\n\n    this.getMixedStream = getMixedStream;\n\n}\n\nif (typeof RecordRTC === 'undefined') {\n    if (typeof module !== 'undefined' /* && !!module.exports*/ ) {\n        module.exports = MultiStreamsMixer;\n    }\n\n    if (typeof define === 'function' && define.amd) {\n        define('MultiStreamsMixer', [], function() {\n            return MultiStreamsMixer;\n        });\n    }\n}\n\n// ______________________\n// MultiStreamRecorder.js\n\n/*\n * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.\n */\n\n/**\n * MultiStreamRecorder can record multiple videos in single container.\n * @summary Multi-videos recorder.\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\n * @author {@link https://MuazKhan.com|Muaz Khan}\n * @typedef MultiStreamRecorder\n * @class\n * @example\n * var options = {\n *     mimeType: 'video/webm'\n * }\n * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n *\n *     // or\n *     var blob = recorder.blob;\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStreams} mediaStreams - Array of MediaStreams.\n * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: \"video/webm\"}\n */\n\nfunction MultiStreamRecorder(arrayOfMediaStreams, options) {\n    arrayOfMediaStreams = arrayOfMediaStreams || [];\n    var self = this;\n\n    var mixer;\n    var mediaRecorder;\n\n    options = options || {\n        elementClass: 'multi-streams-mixer',\n        mimeType: 'video/webm',\n        video: {\n            width: 360,\n            height: 240\n        }\n    };\n\n    if (!options.frameInterval) {\n        options.frameInterval = 10;\n    }\n\n    if (!options.video) {\n        options.video = {};\n    }\n\n    if (!options.video.width) {\n        options.video.width = 360;\n    }\n\n    if (!options.video.height) {\n        options.video.height = 240;\n    }\n\n    /**\n     * This method records all MediaStreams.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        // github/muaz-khan/MultiStreamsMixer\n        mixer = new MultiStreamsMixer(arrayOfMediaStreams, options.elementClass || 'multi-streams-mixer');\n\n        if (getAllVideoTracks().length) {\n            mixer.frameInterval = options.frameInterval || 10;\n            mixer.width = options.video.width || 360;\n            mixer.height = options.video.height || 240;\n            mixer.startDrawingFrames();\n        }\n\n        if (options.previewStream && typeof options.previewStream === 'function') {\n            options.previewStream(mixer.getMixedStream());\n        }\n\n        // record using MediaRecorder API\n        mediaRecorder = new MediaStreamRecorder(mixer.getMixedStream(), options);\n        mediaRecorder.record();\n    };\n\n    function getAllVideoTracks() {\n        var tracks = [];\n        arrayOfMediaStreams.forEach(function(stream) {\n            getTracks(stream, 'video').forEach(function(track) {\n                tracks.push(track);\n            });\n        });\n        return tracks;\n    }\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        if (!mediaRecorder) {\n            return;\n        }\n\n        mediaRecorder.stop(function(blob) {\n            self.blob = blob;\n\n            callback(blob);\n\n            self.clearRecordedData();\n        });\n    };\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        if (mediaRecorder) {\n            mediaRecorder.pause();\n        }\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        if (mediaRecorder) {\n            mediaRecorder.resume();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        if (mediaRecorder) {\n            mediaRecorder.clearRecordedData();\n            mediaRecorder = null;\n        }\n\n        if (mixer) {\n            mixer.releaseStreams();\n            mixer = null;\n        }\n    };\n\n    /**\n     * Add extra media-streams to existing recordings.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\n     * @example\n     * recorder.addStreams([newAudioStream, newVideoStream]);\n     */\n    this.addStreams = function(streams) {\n        if (!streams) {\n            throw 'First parameter is required.';\n        }\n\n        if (!(streams instanceof Array)) {\n            streams = [streams];\n        }\n\n        arrayOfMediaStreams.concat(streams);\n\n        if (!mediaRecorder || !mixer) {\n            return;\n        }\n\n        mixer.appendStreams(streams);\n\n        if (options.previewStream && typeof options.previewStream === 'function') {\n            options.previewStream(mixer.getMixedStream());\n        }\n    };\n\n    /**\n     * Reset videos during live recording. Replace old videos e.g. replace cameras with full-screen.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\n     * @example\n     * recorder.resetVideoStreams([newVideo1, newVideo2]);\n     */\n    this.resetVideoStreams = function(streams) {\n        if (!mixer) {\n            return;\n        }\n\n        if (streams && !(streams instanceof Array)) {\n            streams = [streams];\n        }\n\n        mixer.resetVideoStreams(streams);\n    };\n\n    /**\n     * Returns MultiStreamsMixer\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * let mixer = recorder.getMixer();\n     * mixer.appendStreams([newStream]);\n     */\n    this.getMixer = function() {\n        return mixer;\n    };\n\n    // for debugging\n    this.name = 'MultiStreamRecorder';\n    this.toString = function() {\n        return this.name;\n    };\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.MultiStreamRecorder = MultiStreamRecorder;\n}\n\n// _____________________\n// RecordRTC.promises.js\n\n/**\n * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}\n * @summary Promises for {@link RecordRTC}\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\n * @author {@link https://MuazKhan.com|Muaz Khan}\n * @typedef RecordRTCPromisesHandler\n * @class\n * @example\n * var recorder = new RecordRTCPromisesHandler(mediaStream, options);\n * recorder.startRecording()\n *         .then(successCB)\n *         .catch(errorCB);\n * // Note: You can access all RecordRTC API using \"recorder.recordRTC\" e.g. \n * recorder.recordRTC.onStateChanged = function(state) {};\n * recorder.recordRTC.setRecordingDuration(5000);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\n * @throws Will throw an error if \"new\" keyword is not used to initiate \"RecordRTCPromisesHandler\". Also throws error if first argument \"MediaStream\" is missing.\n * @requires {@link RecordRTC}\n */\n\nfunction RecordRTCPromisesHandler(mediaStream, options) {\n    if (!this) {\n        throw 'Use \"new RecordRTCPromisesHandler()\"';\n    }\n\n    if (typeof mediaStream === 'undefined') {\n        throw 'First argument \"MediaStream\" is required.';\n    }\n\n    var self = this;\n\n    /**\n     * @property {Blob} blob - Access/reach the native {@link RecordRTC} object.\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * let internal = recorder.recordRTC.getInternalRecorder();\n     * alert(internal instanceof MediaStreamRecorder);\n     * recorder.recordRTC.onStateChanged = function(state) {};\n     */\n    self.recordRTC = new RecordRTC(mediaStream, options);\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.startRecording()\n     *         .then(successCB)\n     *         .catch(errorCB);\n     */\n    this.startRecording = function() {\n        return new Promise(function(resolve, reject) {\n            try {\n                self.recordRTC.startRecording();\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * This method stops the recording.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.stopRecording().then(function() {\n     *     var blob = recorder.getBlob();\n     * }).catch(errorCB);\n     */\n    this.stopRecording = function() {\n        return new Promise(function(resolve, reject) {\n            try {\n                self.recordRTC.stopRecording(function(url) {\n                    self.blob = self.recordRTC.getBlob();\n\n                    if (!self.blob || !self.blob.size) {\n                        reject('Empty blob.', self.blob);\n                        return;\n                    }\n\n                    resolve(url);\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.pauseRecording()\n     *         .then(successCB)\n     *         .catch(errorCB);\n     */\n    this.pauseRecording = function() {\n        return new Promise(function(resolve, reject) {\n            try {\n                self.recordRTC.pauseRecording();\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * This method resumes the recording.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.resumeRecording()\n     *         .then(successCB)\n     *         .catch(errorCB);\n     */\n    this.resumeRecording = function() {\n        return new Promise(function(resolve, reject) {\n            try {\n                self.recordRTC.resumeRecording();\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * This method returns data-url for the recorded blob.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.stopRecording().then(function() {\n     *     recorder.getDataURL().then(function(dataURL) {\n     *         window.open(dataURL);\n     *     }).catch(errorCB);;\n     * }).catch(errorCB);\n     */\n    this.getDataURL = function(callback) {\n        return new Promise(function(resolve, reject) {\n            try {\n                self.recordRTC.getDataURL(function(dataURL) {\n                    resolve(dataURL);\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * This method returns the recorded blob.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.stopRecording().then(function() {\n     *     recorder.getBlob().then(function(blob) {})\n     * }).catch(errorCB);\n     */\n    this.getBlob = function() {\n        return new Promise(function(resolve, reject) {\n            try {\n                resolve(self.recordRTC.getBlob());\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * This method returns the internal recording object.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * let internalRecorder = await recorder.getInternalRecorder();\n     * if(internalRecorder instanceof MultiStreamRecorder) {\n     *     internalRecorder.addStreams([newAudioStream]);\n     *     internalRecorder.resetVideoStreams([screenStream]);\n     * }\n     * @returns {Object} \n     */\n    this.getInternalRecorder = function() {\n        return new Promise(function(resolve, reject) {\n            try {\n                resolve(self.recordRTC.getInternalRecorder());\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * This method resets the recorder. So that you can reuse single recorder instance many times.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * await recorder.reset();\n     * recorder.startRecording(); // record again\n     */\n    this.reset = function() {\n        return new Promise(function(resolve, reject) {\n            try {\n                resolve(self.recordRTC.reset());\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * Destroy RecordRTC instance. Clear all recorders and objects.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.destroy().then(successCB).catch(errorCB);\n     */\n    this.destroy = function() {\n        return new Promise(function(resolve, reject) {\n            try {\n                resolve(self.recordRTC.destroy());\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * Get recorder's readonly state.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * let state = await recorder.getState();\n     * // or\n     * recorder.getState().then(state => { console.log(state); })\n     * @returns {String} Returns recording state.\n     */\n    this.getState = function() {\n        return new Promise(function(resolve, reject) {\n            try {\n                resolve(self.recordRTC.getState());\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * await recorder.stopRecording();\n     * let blob = recorder.getBlob(); // or \"recorder.recordRTC.blob\"\n     * invokeSaveAsDialog(blob);\n     */\n    this.blob = null;\n\n    /**\n     * RecordRTC version number\n     * @property {String} version - Release version number.\n     * @memberof RecordRTCPromisesHandler\n     * @static\n     * @readonly\n     * @example\n     * alert(recorder.version);\n     */\n    this.version = '5.6.3';\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.RecordRTCPromisesHandler = RecordRTCPromisesHandler;\n}\n\n// ______________________\n// WebAssemblyRecorder.js\n\n/**\n * WebAssemblyRecorder lets you create webm videos in JavaScript via WebAssembly. The library consumes raw RGBA32 buffers (4 bytes per pixel) and turns them into a webm video with the given framerate and quality. This makes it compatible out-of-the-box with ImageData from a CANVAS. With realtime mode you can also use webm-wasm for streaming webm videos.\n * @summary Video recording feature in Chrome, Firefox and maybe Edge.\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\n * @author {@link https://MuazKhan.com|Muaz Khan}\n * @typedef WebAssemblyRecorder\n * @class\n * @example\n * var recorder = new WebAssemblyRecorder(mediaStream);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {webAssemblyPath:'webm-wasm.wasm',workerPath: 'webm-worker.js', frameRate: 30, width: 1920, height: 1080, bitrate: 1024, realtime: true}\n */\nfunction WebAssemblyRecorder(stream, config) {\n    // based on: github.com/GoogleChromeLabs/webm-wasm\n\n    if (typeof ReadableStream === 'undefined' || typeof WritableStream === 'undefined') {\n        // because it fixes readable/writable streams issues\n        console.error('Following polyfill is strongly recommended: https://unpkg.com/@mattiasbuelens/web-streams-polyfill/dist/polyfill.min.js');\n    }\n\n    config = config || {};\n\n    config.width = config.width || 640;\n    config.height = config.height || 480;\n    config.frameRate = config.frameRate || 30;\n    config.bitrate = config.bitrate || 1200;\n    config.realtime = config.realtime || true;\n\n    function createBufferURL(buffer, type) {\n        return URL.createObjectURL(new Blob([buffer], {\n            type: type || ''\n        }));\n    }\n\n    var finished;\n\n    function cameraStream() {\n        return new ReadableStream({\n            start: function(controller) {\n                var cvs = document.createElement('canvas');\n                var video = document.createElement('video');\n                var first = true;\n                video.srcObject = stream;\n                video.muted = true;\n                video.height = config.height;\n                video.width = config.width;\n                video.volume = 0;\n                video.onplaying = function() {\n                    cvs.width = config.width;\n                    cvs.height = config.height;\n                    var ctx = cvs.getContext('2d');\n                    var frameTimeout = 1000 / config.frameRate;\n                    var cameraTimer = setInterval(function f() {\n                        if (finished) {\n                            clearInterval(cameraTimer);\n                            controller.close();\n                        }\n\n                        if (first) {\n                            first = false;\n                            if (config.onVideoProcessStarted) {\n                                config.onVideoProcessStarted();\n                            }\n                        }\n\n                        ctx.drawImage(video, 0, 0);\n                        if (controller._controlledReadableStream.state !== 'closed') {\n                            try {\n                                controller.enqueue(\n                                    ctx.getImageData(0, 0, config.width, config.height)\n                                );\n                            } catch (e) {}\n                        }\n                    }, frameTimeout);\n                };\n                video.play();\n            }\n        });\n    }\n\n    var worker;\n\n    function startRecording(stream, buffer) {\n        if (!config.workerPath && !buffer) {\n            finished = false;\n\n            // is it safe to use @latest ?\n\n            fetch(\n                'https://unpkg.com/webm-wasm@latest/dist/webm-worker.js'\n            ).then(function(r) {\n                r.arrayBuffer().then(function(buffer) {\n                    startRecording(stream, buffer);\n                });\n            });\n            return;\n        }\n\n        if (!config.workerPath && buffer instanceof ArrayBuffer) {\n            var blob = new Blob([buffer], {\n                type: 'text/javascript'\n            });\n            config.workerPath = URL.createObjectURL(blob);\n        }\n\n        if (!config.workerPath) {\n            console.error('workerPath parameter is missing.');\n        }\n\n        worker = new Worker(config.workerPath);\n\n        worker.postMessage(config.webAssemblyPath || 'https://unpkg.com/webm-wasm@latest/dist/webm-wasm.wasm');\n        worker.addEventListener('message', function(event) {\n            if (event.data === 'READY') {\n                worker.postMessage({\n                    width: config.width,\n                    height: config.height,\n                    bitrate: config.bitrate || 1200,\n                    timebaseDen: config.frameRate || 30,\n                    realtime: config.realtime\n                });\n\n                cameraStream().pipeTo(new WritableStream({\n                    write: function(image) {\n                        if (finished) {\n                            console.error('Got image, but recorder is finished!');\n                            return;\n                        }\n\n                        worker.postMessage(image.data.buffer, [image.data.buffer]);\n                    }\n                }));\n            } else if (!!event.data) {\n                if (!isPaused) {\n                    arrayOfBuffers.push(event.data);\n                }\n            }\n        });\n    }\n\n    /**\n     * This method records video.\n     * @method\n     * @memberof WebAssemblyRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        arrayOfBuffers = [];\n        isPaused = false;\n        this.blob = null;\n        startRecording(stream);\n\n        if (typeof config.initCallback === 'function') {\n            config.initCallback();\n        }\n    };\n\n    var isPaused;\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof WebAssemblyRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        isPaused = true;\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof WebAssemblyRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        isPaused = false;\n    };\n\n    function terminate(callback) {\n        if (!worker) {\n            if (callback) {\n                callback();\n            }\n\n            return;\n        }\n\n        // Wait for null event data to indicate that the encoding is complete\n        worker.addEventListener('message', function(event) {\n            if (event.data === null) {\n                worker.terminate();\n                worker = null;\n\n                if (callback) {\n                    callback();\n                }\n            }\n        });\n\n        worker.postMessage(null);\n    }\n\n    var arrayOfBuffers = [];\n\n    /**\n     * This method stops recording video.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof WebAssemblyRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        finished = true;\n\n        var recorder = this;\n\n        terminate(function() {\n            recorder.blob = new Blob(arrayOfBuffers, {\n                type: 'video/webm'\n            });\n\n            callback(recorder.blob);\n        });\n    };\n\n    // for debugging\n    this.name = 'WebAssemblyRecorder';\n    this.toString = function() {\n        return this.name;\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof WebAssemblyRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        arrayOfBuffers = [];\n        isPaused = false;\n        this.blob = null;\n\n        // todo: if recording-ON then STOP it first\n    };\n\n    /**\n     * @property {Blob} blob - The recorded blob object.\n     * @memberof WebAssemblyRecorder\n     * @example\n     * recorder.stop(function(){\n     *     var blob = recorder.blob;\n     * });\n     */\n    this.blob = null;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.WebAssemblyRecorder = WebAssemblyRecorder;\n}\n"
        },
        {
          "name": "RecordRTC.min.js",
          "type": "blob",
          "size": 76.677734375,
          "content": "'use strict';\n\n// Last time updated: 2024-01-03 12:51:19 PM UTC\n\n// ________________\n// RecordRTC v5.6.3\n\n// Open-Sourced: https://github.com/muaz-khan/RecordRTC\n\n// --------------------------------------------------\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// --------------------------------------------------\n\n\"use strict\";function RecordRTC(mediaStream,config){function startRecording(config2){return config.disableLogs||console.log(\"RecordRTC version: \",self.version),config2&&(config=new RecordRTCConfiguration(mediaStream,config2)),config.disableLogs||console.log(\"started recording \"+config.type+\" stream.\"),mediaRecorder?(mediaRecorder.clearRecordedData(),mediaRecorder.record(),setState(\"recording\"),self.recordingDuration&&handleRecordingDuration(),self):(initRecorder(function(){self.recordingDuration&&handleRecordingDuration()}),self)}function initRecorder(initCallback){initCallback&&(config.initCallback=function(){initCallback(),initCallback=config.initCallback=null});var Recorder=new GetRecorderType(mediaStream,config);mediaRecorder=new Recorder(mediaStream,config),mediaRecorder.record(),setState(\"recording\"),config.disableLogs||console.log(\"Initialized recorderType:\",mediaRecorder.constructor.name,\"for output-type:\",config.type)}function stopRecording(callback){function _callback(__blob){if(!mediaRecorder)return void(\"function\"==typeof callback.call?callback.call(self,\"\"):callback(\"\"));Object.keys(mediaRecorder).forEach(function(key){\"function\"!=typeof mediaRecorder[key]&&(self[key]=mediaRecorder[key])});var blob=mediaRecorder.blob;if(!blob){if(!__blob)throw\"Recording failed.\";mediaRecorder.blob=blob=__blob}if(blob&&!config.disableLogs&&console.log(blob.type,\"->\",bytesToSize(blob.size)),callback){var url;try{url=URL.createObjectURL(blob)}catch(e){}\"function\"==typeof callback.call?callback.call(self,url):callback(url)}config.autoWriteToDisk&&getDataURL(function(dataURL){var parameter={};parameter[config.type+\"Blob\"]=dataURL,DiskStorage.Store(parameter)})}return callback=callback||function(){},mediaRecorder?\"paused\"===self.state?(self.resumeRecording(),void setTimeout(function(){stopRecording(callback)},1)):(\"recording\"===self.state||config.disableLogs||console.warn('Recording state should be: \"recording\", however current state is: ',self.state),config.disableLogs||console.log(\"Stopped recording \"+config.type+\" stream.\"),\"gif\"!==config.type?mediaRecorder.stop(_callback):(mediaRecorder.stop(),_callback()),void setState(\"stopped\")):void warningLog()}function pauseRecording(){return mediaRecorder?\"recording\"!==self.state?void(config.disableLogs||console.warn(\"Unable to pause the recording. Recording state: \",self.state)):(setState(\"paused\"),mediaRecorder.pause(),void(config.disableLogs||console.log(\"Paused recording.\"))):void warningLog()}function resumeRecording(){return mediaRecorder?\"paused\"!==self.state?void(config.disableLogs||console.warn(\"Unable to resume the recording. Recording state: \",self.state)):(setState(\"recording\"),mediaRecorder.resume(),void(config.disableLogs||console.log(\"Resumed recording.\"))):void warningLog()}function readFile(_blob){postMessage((new FileReaderSync).readAsDataURL(_blob))}function getDataURL(callback,_mediaRecorder){function processInWebWorker(_function){try{var blob=URL.createObjectURL(new Blob([_function.toString(),\"this.onmessage =  function (eee) {\"+_function.name+\"(eee.data);}\"],{type:\"application/javascript\"})),worker=new Worker(blob);return URL.revokeObjectURL(blob),worker}catch(e){}}if(!callback)throw\"Pass a callback function over getDataURL.\";var blob=_mediaRecorder?_mediaRecorder.blob:(mediaRecorder||{}).blob;if(!blob)return config.disableLogs||console.warn(\"Blob encoder did not finish its job yet.\"),void setTimeout(function(){getDataURL(callback,_mediaRecorder)},1e3);if(\"undefined\"==typeof Worker||navigator.mozGetUserMedia){var reader=new FileReader;reader.readAsDataURL(blob),reader.onload=function(event){callback(event.target.result)}}else{var webWorker=processInWebWorker(readFile);webWorker.onmessage=function(event){callback(event.data)},webWorker.postMessage(blob)}}function handleRecordingDuration(counter){if(counter=counter||0,\"paused\"===self.state)return void setTimeout(function(){handleRecordingDuration(counter)},1e3);if(\"stopped\"!==self.state){if(counter>=self.recordingDuration)return void stopRecording(self.onRecordingStopped);counter+=1e3,setTimeout(function(){handleRecordingDuration(counter)},1e3)}}function setState(state){self&&(self.state=state,\"function\"==typeof self.onStateChanged.call?self.onStateChanged.call(self,state):self.onStateChanged(state))}function warningLog(){config.disableLogs!==!0&&console.warn(WARNING)}if(!mediaStream)throw\"First parameter is required.\";config=config||{type:\"video\"},config=new RecordRTCConfiguration(mediaStream,config);var mediaRecorder,self=this,WARNING='It seems that recorder is destroyed or \"startRecording\" is not invoked for '+config.type+\" recorder.\",returnObject={startRecording:startRecording,stopRecording:stopRecording,pauseRecording:pauseRecording,resumeRecording:resumeRecording,initRecorder:initRecorder,setRecordingDuration:function(recordingDuration,callback){if(\"undefined\"==typeof recordingDuration)throw\"recordingDuration is required.\";if(\"number\"!=typeof recordingDuration)throw\"recordingDuration must be a number.\";return self.recordingDuration=recordingDuration,self.onRecordingStopped=callback||function(){},{onRecordingStopped:function(callback){self.onRecordingStopped=callback}}},clearRecordedData:function(){return mediaRecorder?(mediaRecorder.clearRecordedData(),void(config.disableLogs||console.log(\"Cleared old recorded data.\"))):void warningLog()},getBlob:function(){return mediaRecorder?mediaRecorder.blob:void warningLog()},getDataURL:getDataURL,toURL:function(){return mediaRecorder?URL.createObjectURL(mediaRecorder.blob):void warningLog()},getInternalRecorder:function(){return mediaRecorder},save:function(fileName){return mediaRecorder?void invokeSaveAsDialog(mediaRecorder.blob,fileName):void warningLog()},getFromDisk:function(callback){return mediaRecorder?void RecordRTC.getFromDisk(config.type,callback):void warningLog()},setAdvertisementArray:function(arrayOfWebPImages){config.advertisement=[];for(var length=arrayOfWebPImages.length,i=0;i<length;i++)config.advertisement.push({duration:i,image:arrayOfWebPImages[i]})},blob:null,bufferSize:0,sampleRate:0,buffer:null,reset:function(){\"recording\"!==self.state||config.disableLogs||console.warn(\"Stop an active recorder.\"),mediaRecorder&&\"function\"==typeof mediaRecorder.clearRecordedData&&mediaRecorder.clearRecordedData(),mediaRecorder=null,setState(\"inactive\"),self.blob=null},onStateChanged:function(state){config.disableLogs||console.log(\"Recorder state changed:\",state)},state:\"inactive\",getState:function(){return self.state},destroy:function(){var disableLogsCache=config.disableLogs;config={disableLogs:!0},self.reset(),setState(\"destroyed\"),returnObject=self=null,Storage.AudioContextConstructor&&(Storage.AudioContextConstructor.close(),Storage.AudioContextConstructor=null),config.disableLogs=disableLogsCache,config.disableLogs||console.log(\"RecordRTC is destroyed.\")},version:\"5.6.3\"};if(!this)return self=returnObject,returnObject;for(var prop in returnObject)this[prop]=returnObject[prop];return self=this,returnObject}function RecordRTCConfiguration(mediaStream,config){return config.recorderType||config.type||(config.audio&&config.video?config.type=\"video\":config.audio&&!config.video&&(config.type=\"audio\")),config.recorderType&&!config.type&&(config.recorderType===WhammyRecorder||config.recorderType===CanvasRecorder||\"undefined\"!=typeof WebAssemblyRecorder&&config.recorderType===WebAssemblyRecorder?config.type=\"video\":config.recorderType===GifRecorder?config.type=\"gif\":config.recorderType===StereoAudioRecorder?config.type=\"audio\":config.recorderType===MediaStreamRecorder&&(getTracks(mediaStream,\"audio\").length&&getTracks(mediaStream,\"video\").length?config.type=\"video\":!getTracks(mediaStream,\"audio\").length&&getTracks(mediaStream,\"video\").length?config.type=\"video\":getTracks(mediaStream,\"audio\").length&&!getTracks(mediaStream,\"video\").length&&(config.type=\"audio\"))),\"undefined\"!=typeof MediaStreamRecorder&&\"undefined\"!=typeof MediaRecorder&&\"requestData\"in MediaRecorder.prototype&&(config.mimeType||(config.mimeType=\"video/webm\"),config.type||(config.type=config.mimeType.split(\"/\")[0]),!config.bitsPerSecond),config.type||(config.mimeType&&(config.type=config.mimeType.split(\"/\")[0]),config.type||(config.type=\"audio\")),config}function GetRecorderType(mediaStream,config){var recorder;return(isChrome||isEdge||isOpera)&&(recorder=StereoAudioRecorder),\"undefined\"!=typeof MediaRecorder&&\"requestData\"in MediaRecorder.prototype&&!isChrome&&(recorder=MediaStreamRecorder),\"video\"===config.type&&(isChrome||isOpera)&&(recorder=WhammyRecorder,\"undefined\"!=typeof WebAssemblyRecorder&&\"undefined\"!=typeof ReadableStream&&(recorder=WebAssemblyRecorder)),\"gif\"===config.type&&(recorder=GifRecorder),\"canvas\"===config.type&&(recorder=CanvasRecorder),isMediaRecorderCompatible()&&recorder!==CanvasRecorder&&recorder!==GifRecorder&&\"undefined\"!=typeof MediaRecorder&&\"requestData\"in MediaRecorder.prototype&&(getTracks(mediaStream,\"video\").length||getTracks(mediaStream,\"audio\").length)&&(\"audio\"===config.type?\"function\"==typeof MediaRecorder.isTypeSupported&&MediaRecorder.isTypeSupported(\"audio/webm\")&&(recorder=MediaStreamRecorder):\"function\"==typeof MediaRecorder.isTypeSupported&&MediaRecorder.isTypeSupported(\"video/webm\")&&(recorder=MediaStreamRecorder)),mediaStream instanceof Array&&mediaStream.length&&(recorder=MultiStreamRecorder),config.recorderType&&(recorder=config.recorderType),!config.disableLogs&&recorder&&recorder.name&&console.log(\"Using recorderType:\",recorder.name||recorder.constructor.name),!recorder&&isSafari&&(recorder=MediaStreamRecorder),recorder}function MRecordRTC(mediaStream){this.addStream=function(_mediaStream){_mediaStream&&(mediaStream=_mediaStream)},this.mediaType={audio:!0,video:!0},this.startRecording=function(){var recorderType,mediaType=this.mediaType,mimeType=this.mimeType||{audio:null,video:null,gif:null};if(\"function\"!=typeof mediaType.audio&&isMediaRecorderCompatible()&&!getTracks(mediaStream,\"audio\").length&&(mediaType.audio=!1),\"function\"!=typeof mediaType.video&&isMediaRecorderCompatible()&&!getTracks(mediaStream,\"video\").length&&(mediaType.video=!1),\"function\"!=typeof mediaType.gif&&isMediaRecorderCompatible()&&!getTracks(mediaStream,\"video\").length&&(mediaType.gif=!1),!mediaType.audio&&!mediaType.video&&!mediaType.gif)throw\"MediaStream must have either audio or video tracks.\";if(mediaType.audio&&(recorderType=null,\"function\"==typeof mediaType.audio&&(recorderType=mediaType.audio),this.audioRecorder=new RecordRTC(mediaStream,{type:\"audio\",bufferSize:this.bufferSize,sampleRate:this.sampleRate,numberOfAudioChannels:this.numberOfAudioChannels||2,disableLogs:this.disableLogs,recorderType:recorderType,mimeType:mimeType.audio,timeSlice:this.timeSlice,onTimeStamp:this.onTimeStamp}),mediaType.video||this.audioRecorder.startRecording()),mediaType.video){recorderType=null,\"function\"==typeof mediaType.video&&(recorderType=mediaType.video);var newStream=mediaStream;if(isMediaRecorderCompatible()&&mediaType.audio&&\"function\"==typeof mediaType.audio){var videoTrack=getTracks(mediaStream,\"video\")[0];isFirefox?(newStream=new MediaStream,newStream.addTrack(videoTrack),recorderType&&recorderType===WhammyRecorder&&(recorderType=MediaStreamRecorder)):(newStream=new MediaStream,newStream.addTrack(videoTrack))}this.videoRecorder=new RecordRTC(newStream,{type:\"video\",video:this.video,canvas:this.canvas,frameInterval:this.frameInterval||10,disableLogs:this.disableLogs,recorderType:recorderType,mimeType:mimeType.video,timeSlice:this.timeSlice,onTimeStamp:this.onTimeStamp,workerPath:this.workerPath,webAssemblyPath:this.webAssemblyPath,frameRate:this.frameRate,bitrate:this.bitrate}),mediaType.audio||this.videoRecorder.startRecording()}if(mediaType.audio&&mediaType.video){var self=this,isSingleRecorder=isMediaRecorderCompatible()===!0;mediaType.audio instanceof StereoAudioRecorder&&mediaType.video?isSingleRecorder=!1:mediaType.audio!==!0&&mediaType.video!==!0&&mediaType.audio!==mediaType.video&&(isSingleRecorder=!1),isSingleRecorder===!0?(self.audioRecorder=null,self.videoRecorder.startRecording()):self.videoRecorder.initRecorder(function(){self.audioRecorder.initRecorder(function(){self.videoRecorder.startRecording(),self.audioRecorder.startRecording()})})}mediaType.gif&&(recorderType=null,\"function\"==typeof mediaType.gif&&(recorderType=mediaType.gif),this.gifRecorder=new RecordRTC(mediaStream,{type:\"gif\",frameRate:this.frameRate||200,quality:this.quality||10,disableLogs:this.disableLogs,recorderType:recorderType,mimeType:mimeType.gif}),this.gifRecorder.startRecording())},this.stopRecording=function(callback){callback=callback||function(){},this.audioRecorder&&this.audioRecorder.stopRecording(function(blobURL){callback(blobURL,\"audio\")}),this.videoRecorder&&this.videoRecorder.stopRecording(function(blobURL){callback(blobURL,\"video\")}),this.gifRecorder&&this.gifRecorder.stopRecording(function(blobURL){callback(blobURL,\"gif\")})},this.pauseRecording=function(){this.audioRecorder&&this.audioRecorder.pauseRecording(),this.videoRecorder&&this.videoRecorder.pauseRecording(),this.gifRecorder&&this.gifRecorder.pauseRecording()},this.resumeRecording=function(){this.audioRecorder&&this.audioRecorder.resumeRecording(),this.videoRecorder&&this.videoRecorder.resumeRecording(),this.gifRecorder&&this.gifRecorder.resumeRecording()},this.getBlob=function(callback){var output={};return this.audioRecorder&&(output.audio=this.audioRecorder.getBlob()),this.videoRecorder&&(output.video=this.videoRecorder.getBlob()),this.gifRecorder&&(output.gif=this.gifRecorder.getBlob()),callback&&callback(output),output},this.destroy=function(){this.audioRecorder&&(this.audioRecorder.destroy(),this.audioRecorder=null),this.videoRecorder&&(this.videoRecorder.destroy(),this.videoRecorder=null),this.gifRecorder&&(this.gifRecorder.destroy(),this.gifRecorder=null)},this.getDataURL=function(callback){function getDataURL(blob,callback00){if(\"undefined\"!=typeof Worker){var webWorker=processInWebWorker(function(_blob){postMessage((new FileReaderSync).readAsDataURL(_blob))});webWorker.onmessage=function(event){callback00(event.data)},webWorker.postMessage(blob)}else{var reader=new FileReader;reader.readAsDataURL(blob),reader.onload=function(event){callback00(event.target.result)}}}function processInWebWorker(_function){var url,blob=URL.createObjectURL(new Blob([_function.toString(),\"this.onmessage =  function (eee) {\"+_function.name+\"(eee.data);}\"],{type:\"application/javascript\"})),worker=new Worker(blob);if(\"undefined\"!=typeof URL)url=URL;else{if(\"undefined\"==typeof webkitURL)throw\"Neither URL nor webkitURL detected.\";url=webkitURL}return url.revokeObjectURL(blob),worker}this.getBlob(function(blob){blob.audio&&blob.video?getDataURL(blob.audio,function(_audioDataURL){getDataURL(blob.video,function(_videoDataURL){callback({audio:_audioDataURL,video:_videoDataURL})})}):blob.audio?getDataURL(blob.audio,function(_audioDataURL){callback({audio:_audioDataURL})}):blob.video&&getDataURL(blob.video,function(_videoDataURL){callback({video:_videoDataURL})})})},this.writeToDisk=function(){RecordRTC.writeToDisk({audio:this.audioRecorder,video:this.videoRecorder,gif:this.gifRecorder})},this.save=function(args){args=args||{audio:!0,video:!0,gif:!0},args.audio&&this.audioRecorder&&this.audioRecorder.save(\"string\"==typeof args.audio?args.audio:\"\"),args.video&&this.videoRecorder&&this.videoRecorder.save(\"string\"==typeof args.video?args.video:\"\"),args.gif&&this.gifRecorder&&this.gifRecorder.save(\"string\"==typeof args.gif?args.gif:\"\")}}function bytesToSize(bytes){var k=1e3,sizes=[\"Bytes\",\"KB\",\"MB\",\"GB\",\"TB\"];if(0===bytes)return\"0 Bytes\";var i=parseInt(Math.floor(Math.log(bytes)/Math.log(k)),10);return(bytes/Math.pow(k,i)).toPrecision(3)+\" \"+sizes[i]}function invokeSaveAsDialog(file,fileName){if(!file)throw\"Blob object is required.\";if(!file.type)try{file.type=\"video/webm\"}catch(e){}var fileExtension=(file.type||\"video/webm\").split(\"/\")[1];if(fileExtension.indexOf(\";\")!==-1&&(fileExtension=fileExtension.split(\";\")[0]),fileName&&fileName.indexOf(\".\")!==-1){var splitted=fileName.split(\".\");fileName=splitted[0],fileExtension=splitted[1]}var fileFullName=(fileName||Math.round(9999999999*Math.random())+888888888)+\".\"+fileExtension;if(\"undefined\"!=typeof navigator.msSaveOrOpenBlob)return navigator.msSaveOrOpenBlob(file,fileFullName);if(\"undefined\"!=typeof navigator.msSaveBlob)return navigator.msSaveBlob(file,fileFullName);var hyperlink=document.createElement(\"a\");hyperlink.href=URL.createObjectURL(file),hyperlink.download=fileFullName,hyperlink.style=\"display:none;opacity:0;color:transparent;\",(document.body||document.documentElement).appendChild(hyperlink),\"function\"==typeof hyperlink.click?hyperlink.click():(hyperlink.target=\"_blank\",hyperlink.dispatchEvent(new MouseEvent(\"click\",{view:window,bubbles:!0,cancelable:!0}))),URL.revokeObjectURL(hyperlink.href)}function isElectron(){return\"undefined\"!=typeof window&&\"object\"==typeof window.process&&\"renderer\"===window.process.type||(!(\"undefined\"==typeof process||\"object\"!=typeof process.versions||!process.versions.electron)||\"object\"==typeof navigator&&\"string\"==typeof navigator.userAgent&&navigator.userAgent.indexOf(\"Electron\")>=0)}function getTracks(stream,kind){return stream&&stream.getTracks?stream.getTracks().filter(function(t){return t.kind===(kind||\"audio\")}):[]}function setSrcObject(stream,element){\"srcObject\"in element?element.srcObject=stream:\"mozSrcObject\"in element?element.mozSrcObject=stream:element.srcObject=stream}function getSeekableBlob(inputBlob,callback){if(\"undefined\"==typeof EBML)throw new Error(\"Please link: https://www.webrtc-experiment.com/EBML.js\");var reader=new EBML.Reader,decoder=new EBML.Decoder,tools=EBML.tools,fileReader=new FileReader;fileReader.onload=function(e){var ebmlElms=decoder.decode(this.result);ebmlElms.forEach(function(element){reader.read(element)}),reader.stop();var refinedMetadataBuf=tools.makeMetadataSeekable(reader.metadatas,reader.duration,reader.cues),body=this.result.slice(reader.metadataSize),newBlob=new Blob([refinedMetadataBuf,body],{type:\"video/webm\"});callback(newBlob)},fileReader.readAsArrayBuffer(inputBlob)}function isMediaRecorderCompatible(){if(isFirefox||isSafari||isEdge)return!0;var verOffset,ix,nAgt=(navigator.appVersion,navigator.userAgent),fullVersion=\"\"+parseFloat(navigator.appVersion),majorVersion=parseInt(navigator.appVersion,10);return(isChrome||isOpera)&&(verOffset=nAgt.indexOf(\"Chrome\"),fullVersion=nAgt.substring(verOffset+7)),(ix=fullVersion.indexOf(\";\"))!==-1&&(fullVersion=fullVersion.substring(0,ix)),(ix=fullVersion.indexOf(\" \"))!==-1&&(fullVersion=fullVersion.substring(0,ix)),majorVersion=parseInt(\"\"+fullVersion,10),isNaN(majorVersion)&&(fullVersion=\"\"+parseFloat(navigator.appVersion),majorVersion=parseInt(navigator.appVersion,10)),majorVersion>=49}function MediaStreamRecorder(mediaStream,config){function updateTimeStamp(){self.timestamps.push((new Date).getTime()),\"function\"==typeof config.onTimeStamp&&config.onTimeStamp(self.timestamps[self.timestamps.length-1],self.timestamps)}function getMimeType(secondObject){return mediaRecorder&&mediaRecorder.mimeType?mediaRecorder.mimeType:secondObject.mimeType||\"video/webm\"}function clearRecordedDataCB(){arrayOfBlobs=[],mediaRecorder=null,self.timestamps=[]}function isMediaStreamActive(){if(\"active\"in mediaStream){if(!mediaStream.active)return!1}else if(\"ended\"in mediaStream&&mediaStream.ended)return!1;return!0}var self=this;if(\"undefined\"==typeof mediaStream)throw'First argument \"MediaStream\" is required.';if(\"undefined\"==typeof MediaRecorder)throw\"Your browser does not support the Media Recorder API. Please try other modules e.g. WhammyRecorder or StereoAudioRecorder.\";if(config=config||{mimeType:\"video/webm\"},\"audio\"===config.type){if(getTracks(mediaStream,\"video\").length&&getTracks(mediaStream,\"audio\").length){var stream;navigator.mozGetUserMedia?(stream=new MediaStream,stream.addTrack(getTracks(mediaStream,\"audio\")[0])):stream=new MediaStream(getTracks(mediaStream,\"audio\")),mediaStream=stream}config.mimeType&&config.mimeType.toString().toLowerCase().indexOf(\"audio\")!==-1||(config.mimeType=isChrome?\"audio/webm\":\"audio/ogg\"),config.mimeType&&\"audio/ogg\"!==config.mimeType.toString().toLowerCase()&&navigator.mozGetUserMedia&&(config.mimeType=\"audio/ogg\")}var arrayOfBlobs=[];this.getArrayOfBlobs=function(){return arrayOfBlobs},this.record=function(){self.blob=null,self.clearRecordedData(),self.timestamps=[],allStates=[],arrayOfBlobs=[];var recorderHints=config;config.disableLogs||console.log(\"Passing following config over MediaRecorder API.\",recorderHints),mediaRecorder&&(mediaRecorder=null),isChrome&&!isMediaRecorderCompatible()&&(recorderHints=\"video/vp8\"),\"function\"==typeof MediaRecorder.isTypeSupported&&recorderHints.mimeType&&(MediaRecorder.isTypeSupported(recorderHints.mimeType)||(config.disableLogs||console.warn(\"MediaRecorder API seems unable to record mimeType:\",recorderHints.mimeType),recorderHints.mimeType=\"audio\"===config.type?\"audio/webm\":\"video/webm\"));try{mediaRecorder=new MediaRecorder(mediaStream,recorderHints),config.mimeType=recorderHints.mimeType}catch(e){mediaRecorder=new MediaRecorder(mediaStream)}recorderHints.mimeType&&!MediaRecorder.isTypeSupported&&\"canRecordMimeType\"in mediaRecorder&&mediaRecorder.canRecordMimeType(recorderHints.mimeType)===!1&&(config.disableLogs||console.warn(\"MediaRecorder API seems unable to record mimeType:\",recorderHints.mimeType)),mediaRecorder.ondataavailable=function(e){if(e.data&&allStates.push(\"ondataavailable: \"+bytesToSize(e.data.size)),\"number\"!=typeof config.timeSlice){if(!e.data||!e.data.size||e.data.size<100||self.blob)return void(self.recordingCallback&&(self.recordingCallback(new Blob([],{type:getMimeType(recorderHints)})),self.recordingCallback=null));self.blob=config.getNativeBlob?e.data:new Blob([e.data],{type:getMimeType(recorderHints)}),self.recordingCallback&&(self.recordingCallback(self.blob),self.recordingCallback=null)}else if(e.data&&e.data.size&&(arrayOfBlobs.push(e.data),updateTimeStamp(),\"function\"==typeof config.ondataavailable)){var blob=config.getNativeBlob?e.data:new Blob([e.data],{type:getMimeType(recorderHints)});config.ondataavailable(blob)}},mediaRecorder.onstart=function(){allStates.push(\"started\")},mediaRecorder.onpause=function(){allStates.push(\"paused\")},mediaRecorder.onresume=function(){allStates.push(\"resumed\")},mediaRecorder.onstop=function(){allStates.push(\"stopped\")},mediaRecorder.onerror=function(error){error&&(error.name||(error.name=\"UnknownError\"),allStates.push(\"error: \"+error),config.disableLogs||(error.name.toString().toLowerCase().indexOf(\"invalidstate\")!==-1?console.error(\"The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.\",error):error.name.toString().toLowerCase().indexOf(\"notsupported\")!==-1?console.error(\"MIME type (\",recorderHints.mimeType,\") is not supported.\",error):error.name.toString().toLowerCase().indexOf(\"security\")!==-1?console.error(\"MediaRecorder security error\",error):\"OutOfMemory\"===error.name?console.error(\"The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.\",error):\"IllegalStreamModification\"===error.name?console.error(\"A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.\",error):\"OtherRecordingError\"===error.name?console.error(\"Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.\",error):\"GenericError\"===error.name?console.error(\"The UA cannot provide the codec or recording option that has been requested.\",error):console.error(\"MediaRecorder Error\",error)),function(looper){return!self.manuallyStopped&&mediaRecorder&&\"inactive\"===mediaRecorder.state?(delete config.timeslice,void mediaRecorder.start(6e5)):void setTimeout(looper,1e3)}(),\"inactive\"!==mediaRecorder.state&&\"stopped\"!==mediaRecorder.state&&mediaRecorder.stop())},\"number\"==typeof config.timeSlice?(updateTimeStamp(),mediaRecorder.start(config.timeSlice)):mediaRecorder.start(864e5),config.initCallback&&config.initCallback()},this.timestamps=[],this.stop=function(callback){callback=callback||function(){},self.manuallyStopped=!0,mediaRecorder&&(this.recordingCallback=callback,\"recording\"===mediaRecorder.state&&mediaRecorder.stop(),\"number\"==typeof config.timeSlice&&setTimeout(function(){self.blob=new Blob(arrayOfBlobs,{type:getMimeType(config)}),self.recordingCallback(self.blob)},100))},this.pause=function(){mediaRecorder&&\"recording\"===mediaRecorder.state&&mediaRecorder.pause()},this.resume=function(){mediaRecorder&&\"paused\"===mediaRecorder.state&&mediaRecorder.resume()},this.clearRecordedData=function(){mediaRecorder&&\"recording\"===mediaRecorder.state&&self.stop(clearRecordedDataCB),clearRecordedDataCB()};var mediaRecorder;this.getInternalRecorder=function(){return mediaRecorder},this.blob=null,this.getState=function(){return mediaRecorder?mediaRecorder.state||\"inactive\":\"inactive\"};var allStates=[];this.getAllStates=function(){return allStates},\"undefined\"==typeof config.checkForInactiveTracks&&(config.checkForInactiveTracks=!1);var self=this;!function looper(){if(mediaRecorder&&config.checkForInactiveTracks!==!1)return isMediaStreamActive()===!1?(config.disableLogs||console.log(\"MediaStream seems stopped.\"),void self.stop()):void setTimeout(looper,1e3)}(),this.name=\"MediaStreamRecorder\",this.toString=function(){return this.name}}function StereoAudioRecorder(mediaStream,config){function isMediaStreamActive(){if(config.checkForInactiveTracks===!1)return!0;if(\"active\"in mediaStream){if(!mediaStream.active)return!1}else if(\"ended\"in mediaStream&&mediaStream.ended)return!1;return!0}function mergeLeftRightBuffers(config,callback){function mergeAudioBuffers(config,cb){function interpolateArray(data,newSampleRate,oldSampleRate){var fitCount=Math.round(data.length*(newSampleRate/oldSampleRate)),newData=[],springFactor=Number((data.length-1)/(fitCount-1));newData[0]=data[0];for(var i=1;i<fitCount-1;i++){var tmp=i*springFactor,before=Number(Math.floor(tmp)).toFixed(),after=Number(Math.ceil(tmp)).toFixed(),atPoint=tmp-before;newData[i]=linearInterpolate(data[before],data[after],atPoint)}return newData[fitCount-1]=data[data.length-1],newData}function linearInterpolate(before,after,atPoint){return before+(after-before)*atPoint}function mergeBuffers(channelBuffer,rLength){for(var result=new Float64Array(rLength),offset=0,lng=channelBuffer.length,i=0;i<lng;i++){var buffer=channelBuffer[i];result.set(buffer,offset),offset+=buffer.length}return result}function interleave(leftChannel,rightChannel){for(var length=leftChannel.length+rightChannel.length,result=new Float64Array(length),inputIndex=0,index=0;index<length;)result[index++]=leftChannel[inputIndex],result[index++]=rightChannel[inputIndex],inputIndex++;return result}function writeUTFBytes(view,offset,string){for(var lng=string.length,i=0;i<lng;i++)view.setUint8(offset+i,string.charCodeAt(i))}var numberOfAudioChannels=config.numberOfAudioChannels,leftBuffers=config.leftBuffers.slice(0),rightBuffers=config.rightBuffers.slice(0),sampleRate=config.sampleRate,internalInterleavedLength=config.internalInterleavedLength,desiredSampRate=config.desiredSampRate;2===numberOfAudioChannels&&(leftBuffers=mergeBuffers(leftBuffers,internalInterleavedLength),rightBuffers=mergeBuffers(rightBuffers,internalInterleavedLength),desiredSampRate&&(leftBuffers=interpolateArray(leftBuffers,desiredSampRate,sampleRate),rightBuffers=interpolateArray(rightBuffers,desiredSampRate,sampleRate))),1===numberOfAudioChannels&&(leftBuffers=mergeBuffers(leftBuffers,internalInterleavedLength),desiredSampRate&&(leftBuffers=interpolateArray(leftBuffers,desiredSampRate,sampleRate))),desiredSampRate&&(sampleRate=desiredSampRate);var interleaved;2===numberOfAudioChannels&&(interleaved=interleave(leftBuffers,rightBuffers)),1===numberOfAudioChannels&&(interleaved=leftBuffers);var interleavedLength=interleaved.length,resultingBufferLength=44+2*interleavedLength,buffer=new ArrayBuffer(resultingBufferLength),view=new DataView(buffer);writeUTFBytes(view,0,\"RIFF\"),view.setUint32(4,36+2*interleavedLength,!0),writeUTFBytes(view,8,\"WAVE\"),writeUTFBytes(view,12,\"fmt \"),view.setUint32(16,16,!0),view.setUint16(20,1,!0),view.setUint16(22,numberOfAudioChannels,!0),view.setUint32(24,sampleRate,!0),view.setUint32(28,sampleRate*numberOfAudioChannels*2,!0),view.setUint16(32,2*numberOfAudioChannels,!0),view.setUint16(34,16,!0),writeUTFBytes(view,36,\"data\"),view.setUint32(40,2*interleavedLength,!0);for(var lng=interleavedLength,index=44,volume=1,i=0;i<lng;i++)view.setInt16(index,interleaved[i]*(32767*volume),!0),index+=2;return cb?cb({buffer:buffer,view:view}):void postMessage({buffer:buffer,view:view})}if(config.noWorker)return void mergeAudioBuffers(config,function(data){callback(data.buffer,data.view)});var webWorker=processInWebWorker(mergeAudioBuffers);webWorker.onmessage=function(event){callback(event.data.buffer,event.data.view),URL.revokeObjectURL(webWorker.workerURL),webWorker.terminate()},webWorker.postMessage(config)}function processInWebWorker(_function){var workerURL=URL.createObjectURL(new Blob([_function.toString(),\";this.onmessage =  function (eee) {\"+_function.name+\"(eee.data);}\"],{type:\"application/javascript\"})),worker=new Worker(workerURL);return worker.workerURL=workerURL,worker}function resetVariables(){leftchannel=[],rightchannel=[],recordingLength=0,isAudioProcessStarted=!1,recording=!1,isPaused=!1,context=null,self.leftchannel=leftchannel,self.rightchannel=rightchannel,self.numberOfAudioChannels=numberOfAudioChannels,self.desiredSampRate=desiredSampRate,self.sampleRate=sampleRate,self.recordingLength=recordingLength,intervalsBasedBuffers={left:[],right:[],recordingLength:0}}function clearRecordedDataCB(){jsAudioNode&&(jsAudioNode.onaudioprocess=null,jsAudioNode.disconnect(),jsAudioNode=null),audioInput&&(audioInput.disconnect(),audioInput=null),resetVariables()}function onAudioProcessDataAvailable(e){if(!isPaused){if(isMediaStreamActive()===!1&&(config.disableLogs||console.log(\"MediaStream seems stopped.\"),jsAudioNode.disconnect(),recording=!1),!recording)return void(audioInput&&(audioInput.disconnect(),audioInput=null));isAudioProcessStarted||(isAudioProcessStarted=!0,config.onAudioProcessStarted&&config.onAudioProcessStarted(),config.initCallback&&config.initCallback());var left=e.inputBuffer.getChannelData(0),chLeft=new Float32Array(left);if(leftchannel.push(chLeft),2===numberOfAudioChannels){var right=e.inputBuffer.getChannelData(1),chRight=new Float32Array(right);rightchannel.push(chRight)}recordingLength+=bufferSize,self.recordingLength=recordingLength,\"undefined\"!=typeof config.timeSlice&&(intervalsBasedBuffers.recordingLength+=bufferSize,intervalsBasedBuffers.left.push(chLeft),2===numberOfAudioChannels&&intervalsBasedBuffers.right.push(chRight))}}function looper(){recording&&\"function\"==typeof config.ondataavailable&&\"undefined\"!=typeof config.timeSlice&&(intervalsBasedBuffers.left.length?(mergeLeftRightBuffers({desiredSampRate:desiredSampRate,sampleRate:sampleRate,numberOfAudioChannels:numberOfAudioChannels,internalInterleavedLength:intervalsBasedBuffers.recordingLength,leftBuffers:intervalsBasedBuffers.left,rightBuffers:1===numberOfAudioChannels?[]:intervalsBasedBuffers.right},function(buffer,view){var blob=new Blob([view],{type:\"audio/wav\"});config.ondataavailable(blob),setTimeout(looper,config.timeSlice)}),intervalsBasedBuffers={left:[],right:[],recordingLength:0}):setTimeout(looper,config.timeSlice))}if(!getTracks(mediaStream,\"audio\").length)throw\"Your stream has no audio tracks.\";config=config||{};var jsAudioNode,self=this,leftchannel=[],rightchannel=[],recording=!1,recordingLength=0,numberOfAudioChannels=2,desiredSampRate=config.desiredSampRate;\nconfig.leftChannel===!0&&(numberOfAudioChannels=1),1===config.numberOfAudioChannels&&(numberOfAudioChannels=1),(!numberOfAudioChannels||numberOfAudioChannels<1)&&(numberOfAudioChannels=2),config.disableLogs||console.log(\"StereoAudioRecorder is set to record number of channels: \"+numberOfAudioChannels),\"undefined\"==typeof config.checkForInactiveTracks&&(config.checkForInactiveTracks=!0),this.record=function(){if(isMediaStreamActive()===!1)throw\"Please make sure MediaStream is active.\";resetVariables(),isAudioProcessStarted=isPaused=!1,recording=!0,\"undefined\"!=typeof config.timeSlice&&looper()},this.stop=function(callback){callback=callback||function(){},recording=!1,mergeLeftRightBuffers({desiredSampRate:desiredSampRate,sampleRate:sampleRate,numberOfAudioChannels:numberOfAudioChannels,internalInterleavedLength:recordingLength,leftBuffers:leftchannel,rightBuffers:1===numberOfAudioChannels?[]:rightchannel,noWorker:config.noWorker},function(buffer,view){self.blob=new Blob([view],{type:\"audio/wav\"}),self.buffer=new ArrayBuffer(view.buffer.byteLength),self.view=view,self.sampleRate=desiredSampRate||sampleRate,self.bufferSize=bufferSize,self.length=recordingLength,isAudioProcessStarted=!1,callback&&callback(self.blob)})},\"undefined\"==typeof RecordRTC.Storage&&(RecordRTC.Storage={AudioContextConstructor:null,AudioContext:window.AudioContext||window.webkitAudioContext}),RecordRTC.Storage.AudioContextConstructor&&\"closed\"!==RecordRTC.Storage.AudioContextConstructor.state||(RecordRTC.Storage.AudioContextConstructor=new RecordRTC.Storage.AudioContext);var context=RecordRTC.Storage.AudioContextConstructor,audioInput=context.createMediaStreamSource(mediaStream),legalBufferValues=[0,256,512,1024,2048,4096,8192,16384],bufferSize=\"undefined\"==typeof config.bufferSize?4096:config.bufferSize;if(legalBufferValues.indexOf(bufferSize)===-1&&(config.disableLogs||console.log(\"Legal values for buffer-size are \"+JSON.stringify(legalBufferValues,null,\"\\t\"))),context.createJavaScriptNode)jsAudioNode=context.createJavaScriptNode(bufferSize,numberOfAudioChannels,numberOfAudioChannels);else{if(!context.createScriptProcessor)throw\"WebAudio API has no support on this browser.\";jsAudioNode=context.createScriptProcessor(bufferSize,numberOfAudioChannels,numberOfAudioChannels)}audioInput.connect(jsAudioNode),config.bufferSize||(bufferSize=jsAudioNode.bufferSize);var sampleRate=\"undefined\"!=typeof config.sampleRate?config.sampleRate:context.sampleRate||44100;(sampleRate<22050||sampleRate>96e3)&&(config.disableLogs||console.log(\"sample-rate must be under range 22050 and 96000.\")),config.disableLogs||config.desiredSampRate&&console.log(\"Desired sample-rate: \"+config.desiredSampRate);var isPaused=!1;this.pause=function(){isPaused=!0},this.resume=function(){if(isMediaStreamActive()===!1)throw\"Please make sure MediaStream is active.\";return recording?void(isPaused=!1):(config.disableLogs||console.log(\"Seems recording has been restarted.\"),void this.record())},this.clearRecordedData=function(){config.checkForInactiveTracks=!1,recording&&this.stop(clearRecordedDataCB),clearRecordedDataCB()},this.name=\"StereoAudioRecorder\",this.toString=function(){return this.name};var isAudioProcessStarted=!1;jsAudioNode.onaudioprocess=onAudioProcessDataAvailable,context.createMediaStreamDestination?jsAudioNode.connect(context.createMediaStreamDestination()):jsAudioNode.connect(context.destination),this.leftchannel=leftchannel,this.rightchannel=rightchannel,this.numberOfAudioChannels=numberOfAudioChannels,this.desiredSampRate=desiredSampRate,this.sampleRate=sampleRate,self.recordingLength=recordingLength;var intervalsBasedBuffers={left:[],right:[],recordingLength:0}}function CanvasRecorder(htmlElement,config){function clearRecordedDataCB(){whammy.frames=[],isRecording=!1,isPausedRecording=!1}function cloneCanvas(){var newCanvas=document.createElement(\"canvas\"),context=newCanvas.getContext(\"2d\");return newCanvas.width=htmlElement.width,newCanvas.height=htmlElement.height,context.drawImage(htmlElement,0,0),newCanvas}function drawCanvasFrame(){if(isPausedRecording)return lastTime=(new Date).getTime(),setTimeout(drawCanvasFrame,500);if(\"canvas\"===htmlElement.nodeName.toLowerCase()){var duration=(new Date).getTime()-lastTime;return lastTime=(new Date).getTime(),whammy.frames.push({image:cloneCanvas(),duration:duration}),void(isRecording&&setTimeout(drawCanvasFrame,config.frameInterval))}html2canvas(htmlElement,{grabMouse:\"undefined\"==typeof config.showMousePointer||config.showMousePointer,onrendered:function(canvas){var duration=(new Date).getTime()-lastTime;return duration?(lastTime=(new Date).getTime(),whammy.frames.push({image:canvas.toDataURL(\"image/webp\",1),duration:duration}),void(isRecording&&setTimeout(drawCanvasFrame,config.frameInterval))):setTimeout(drawCanvasFrame,config.frameInterval)}})}if(\"undefined\"==typeof html2canvas)throw\"Please link: https://www.webrtc-experiment.com/screenshot.js\";config=config||{},config.frameInterval||(config.frameInterval=10);var isCanvasSupportsStreamCapturing=!1;[\"captureStream\",\"mozCaptureStream\",\"webkitCaptureStream\"].forEach(function(item){item in document.createElement(\"canvas\")&&(isCanvasSupportsStreamCapturing=!0)});var _isChrome=!(!window.webkitRTCPeerConnection&&!window.webkitGetUserMedia||!window.chrome),chromeVersion=50,matchArray=navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);_isChrome&&matchArray&&matchArray[2]&&(chromeVersion=parseInt(matchArray[2],10)),_isChrome&&chromeVersion<52&&(isCanvasSupportsStreamCapturing=!1),config.useWhammyRecorder&&(isCanvasSupportsStreamCapturing=!1);var globalCanvas,mediaStreamRecorder;if(isCanvasSupportsStreamCapturing)if(config.disableLogs||console.log(\"Your browser supports both MediRecorder API and canvas.captureStream!\"),htmlElement instanceof HTMLCanvasElement)globalCanvas=htmlElement;else{if(!(htmlElement instanceof CanvasRenderingContext2D))throw\"Please pass either HTMLCanvasElement or CanvasRenderingContext2D.\";globalCanvas=htmlElement.canvas}else navigator.mozGetUserMedia&&(config.disableLogs||console.error(\"Canvas recording is NOT supported in Firefox.\"));var isRecording;this.record=function(){if(isRecording=!0,isCanvasSupportsStreamCapturing&&!config.useWhammyRecorder){var canvasMediaStream;\"captureStream\"in globalCanvas?canvasMediaStream=globalCanvas.captureStream(25):\"mozCaptureStream\"in globalCanvas?canvasMediaStream=globalCanvas.mozCaptureStream(25):\"webkitCaptureStream\"in globalCanvas&&(canvasMediaStream=globalCanvas.webkitCaptureStream(25));try{var mdStream=new MediaStream;mdStream.addTrack(getTracks(canvasMediaStream,\"video\")[0]),canvasMediaStream=mdStream}catch(e){}if(!canvasMediaStream)throw\"captureStream API are NOT available.\";mediaStreamRecorder=new MediaStreamRecorder(canvasMediaStream,{mimeType:config.mimeType||\"video/webm\"}),mediaStreamRecorder.record()}else whammy.frames=[],lastTime=(new Date).getTime(),drawCanvasFrame();config.initCallback&&config.initCallback()},this.getWebPImages=function(callback){if(\"canvas\"!==htmlElement.nodeName.toLowerCase())return void callback();var framesLength=whammy.frames.length;whammy.frames.forEach(function(frame,idx){var framesRemaining=framesLength-idx;config.disableLogs||console.log(framesRemaining+\"/\"+framesLength+\" frames remaining\"),config.onEncodingCallback&&config.onEncodingCallback(framesRemaining,framesLength);var webp=frame.image.toDataURL(\"image/webp\",1);whammy.frames[idx].image=webp}),config.disableLogs||console.log(\"Generating WebM\"),callback()},this.stop=function(callback){isRecording=!1;var that=this;return isCanvasSupportsStreamCapturing&&mediaStreamRecorder?void mediaStreamRecorder.stop(callback):void this.getWebPImages(function(){whammy.compile(function(blob){config.disableLogs||console.log(\"Recording finished!\"),that.blob=blob,that.blob.forEach&&(that.blob=new Blob([],{type:\"video/webm\"})),callback&&callback(that.blob),whammy.frames=[]})})};var isPausedRecording=!1;this.pause=function(){if(isPausedRecording=!0,mediaStreamRecorder instanceof MediaStreamRecorder)return void mediaStreamRecorder.pause()},this.resume=function(){return isPausedRecording=!1,mediaStreamRecorder instanceof MediaStreamRecorder?void mediaStreamRecorder.resume():void(isRecording||this.record())},this.clearRecordedData=function(){isRecording&&this.stop(clearRecordedDataCB),clearRecordedDataCB()},this.name=\"CanvasRecorder\",this.toString=function(){return this.name};var lastTime=(new Date).getTime(),whammy=new Whammy.Video(100)}function WhammyRecorder(mediaStream,config){function drawFrames(frameInterval){frameInterval=\"undefined\"!=typeof frameInterval?frameInterval:10;var duration=(new Date).getTime()-lastTime;return duration?isPausedRecording?(lastTime=(new Date).getTime(),setTimeout(drawFrames,100)):(lastTime=(new Date).getTime(),video.paused&&video.play(),context.drawImage(video,0,0,canvas.width,canvas.height),whammy.frames.push({duration:duration,image:canvas.toDataURL(\"image/webp\")}),void(isStopDrawing||setTimeout(drawFrames,frameInterval,frameInterval))):setTimeout(drawFrames,frameInterval,frameInterval)}function asyncLoop(o){var i=-1,length=o.length;!function loop(){return i++,i===length?void o.callback():void setTimeout(function(){o.functionToLoop(loop,i)},1)}()}function dropBlackFrames(_frames,_framesToCheck,_pixTolerance,_frameTolerance,callback){var localCanvas=document.createElement(\"canvas\");localCanvas.width=canvas.width,localCanvas.height=canvas.height;var context2d=localCanvas.getContext(\"2d\"),resultFrames=[],checkUntilNotBlack=_framesToCheck===-1,endCheckFrame=_framesToCheck&&_framesToCheck>0&&_framesToCheck<=_frames.length?_framesToCheck:_frames.length,sampleColor={r:0,g:0,b:0},maxColorDifference=Math.sqrt(Math.pow(255,2)+Math.pow(255,2)+Math.pow(255,2)),pixTolerance=_pixTolerance&&_pixTolerance>=0&&_pixTolerance<=1?_pixTolerance:0,frameTolerance=_frameTolerance&&_frameTolerance>=0&&_frameTolerance<=1?_frameTolerance:0,doNotCheckNext=!1;asyncLoop({length:endCheckFrame,functionToLoop:function(loop,f){var matchPixCount,endPixCheck,maxPixCount,finishImage=function(){!doNotCheckNext&&maxPixCount-matchPixCount<=maxPixCount*frameTolerance||(checkUntilNotBlack&&(doNotCheckNext=!0),resultFrames.push(_frames[f])),loop()};if(doNotCheckNext)finishImage();else{var image=new Image;image.onload=function(){context2d.drawImage(image,0,0,canvas.width,canvas.height);var imageData=context2d.getImageData(0,0,canvas.width,canvas.height);matchPixCount=0,endPixCheck=imageData.data.length,maxPixCount=imageData.data.length/4;for(var pix=0;pix<endPixCheck;pix+=4){var currentColor={r:imageData.data[pix],g:imageData.data[pix+1],b:imageData.data[pix+2]},colorDifference=Math.sqrt(Math.pow(currentColor.r-sampleColor.r,2)+Math.pow(currentColor.g-sampleColor.g,2)+Math.pow(currentColor.b-sampleColor.b,2));colorDifference<=maxColorDifference*pixTolerance&&matchPixCount++}finishImage()},image.src=_frames[f].image}},callback:function(){resultFrames=resultFrames.concat(_frames.slice(endCheckFrame)),resultFrames.length<=0&&resultFrames.push(_frames[_frames.length-1]),callback(resultFrames)}})}function clearRecordedDataCB(){whammy.frames=[],isStopDrawing=!0,isPausedRecording=!1}config=config||{},config.frameInterval||(config.frameInterval=10),config.disableLogs||console.log(\"Using frames-interval:\",config.frameInterval),this.record=function(){config.width||(config.width=320),config.height||(config.height=240),config.video||(config.video={width:config.width,height:config.height}),config.canvas||(config.canvas={width:config.width,height:config.height}),canvas.width=config.canvas.width||320,canvas.height=config.canvas.height||240,context=canvas.getContext(\"2d\"),config.video&&config.video instanceof HTMLVideoElement?(video=config.video.cloneNode(),config.initCallback&&config.initCallback()):(video=document.createElement(\"video\"),setSrcObject(mediaStream,video),video.onloadedmetadata=function(){config.initCallback&&config.initCallback()},video.width=config.video.width,video.height=config.video.height),video.muted=!0,video.play(),lastTime=(new Date).getTime(),whammy=new Whammy.Video,config.disableLogs||(console.log(\"canvas resolutions\",canvas.width,\"*\",canvas.height),console.log(\"video width/height\",video.width||canvas.width,\"*\",video.height||canvas.height)),drawFrames(config.frameInterval)};var isStopDrawing=!1;this.stop=function(callback){callback=callback||function(){},isStopDrawing=!0;var _this=this;setTimeout(function(){dropBlackFrames(whammy.frames,-1,null,null,function(frames){whammy.frames=frames,config.advertisement&&config.advertisement.length&&(whammy.frames=config.advertisement.concat(whammy.frames)),whammy.compile(function(blob){_this.blob=blob,_this.blob.forEach&&(_this.blob=new Blob([],{type:\"video/webm\"})),callback&&callback(_this.blob)})})},10)};var isPausedRecording=!1;this.pause=function(){isPausedRecording=!0},this.resume=function(){isPausedRecording=!1,isStopDrawing&&this.record()},this.clearRecordedData=function(){isStopDrawing||this.stop(clearRecordedDataCB),clearRecordedDataCB()},this.name=\"WhammyRecorder\",this.toString=function(){return this.name};var video,lastTime,whammy,canvas=document.createElement(\"canvas\"),context=canvas.getContext(\"2d\")}function GifRecorder(mediaStream,config){function clearRecordedDataCB(){gifEncoder&&(gifEncoder.stream().bin=[])}if(\"undefined\"==typeof GIFEncoder)throw new Error(\"Missing https://www.webrtc-experiment.com/gif-recorder.js\");config=config||{};var isHTMLObject=mediaStream instanceof CanvasRenderingContext2D||mediaStream instanceof HTMLCanvasElement;this.record=function(){function drawVideoFrame(time){if(self.clearedRecordedData!==!0){if(isPausedRecording)return setTimeout(function(){drawVideoFrame(time)},100);lastAnimationFrame=requestAnimationFrame(drawVideoFrame),void 0===typeof lastFrameTime&&(lastFrameTime=time),time-lastFrameTime<90||(!isHTMLObject&&video.paused&&video.play(),isHTMLObject||context.drawImage(video,0,0,canvas.width,canvas.height),config.onGifPreview&&config.onGifPreview(canvas.toDataURL(\"image/png\")),gifEncoder.addFrame(context),lastFrameTime=time)}}return\"undefined\"==typeof GIFEncoder?void setTimeout(self.record,1e3):isLoadedMetaData?(isHTMLObject||(config.width||(config.width=video.offsetWidth||320),config.height||(config.height=video.offsetHeight||240),config.video||(config.video={width:config.width,height:config.height}),config.canvas||(config.canvas={width:config.width,height:config.height}),canvas.width=config.canvas.width||320,canvas.height=config.canvas.height||240,video.width=config.video.width||320,video.height=config.video.height||240),gifEncoder=new GIFEncoder,gifEncoder.setRepeat(0),gifEncoder.setDelay(config.frameRate||200),gifEncoder.setQuality(config.quality||10),gifEncoder.start(),\"function\"==typeof config.onGifRecordingStarted&&config.onGifRecordingStarted(),startTime=Date.now(),lastAnimationFrame=requestAnimationFrame(drawVideoFrame),void(config.initCallback&&config.initCallback())):void setTimeout(self.record,1e3)},this.stop=function(callback){callback=callback||function(){},lastAnimationFrame&&cancelAnimationFrame(lastAnimationFrame),endTime=Date.now(),this.blob=new Blob([new Uint8Array(gifEncoder.stream().bin)],{type:\"image/gif\"}),callback(this.blob),gifEncoder.stream().bin=[]};var isPausedRecording=!1;this.pause=function(){isPausedRecording=!0},this.resume=function(){isPausedRecording=!1},this.clearRecordedData=function(){self.clearedRecordedData=!0,clearRecordedDataCB()},this.name=\"GifRecorder\",this.toString=function(){return this.name};var canvas=document.createElement(\"canvas\"),context=canvas.getContext(\"2d\");isHTMLObject&&(mediaStream instanceof CanvasRenderingContext2D?(context=mediaStream,canvas=context.canvas):mediaStream instanceof HTMLCanvasElement&&(context=mediaStream.getContext(\"2d\"),canvas=mediaStream));var isLoadedMetaData=!0;if(!isHTMLObject){var video=document.createElement(\"video\");video.muted=!0,video.autoplay=!0,video.playsInline=!0,isLoadedMetaData=!1,video.onloadedmetadata=function(){isLoadedMetaData=!0},setSrcObject(mediaStream,video),video.play()}var startTime,endTime,lastFrameTime,gifEncoder,lastAnimationFrame=null,self=this}function MultiStreamsMixer(arrayOfMediaStreams,elementClass){function setSrcObject(stream,element){\"srcObject\"in element?element.srcObject=stream:\"mozSrcObject\"in element?element.mozSrcObject=stream:element.srcObject=stream}function drawVideosToCanvas(){if(!isStopDrawingFrames){var videosLength=videos.length,fullcanvas=!1,remaining=[];if(videos.forEach(function(video){video.stream||(video.stream={}),video.stream.fullcanvas?fullcanvas=video:remaining.push(video)}),fullcanvas)canvas.width=fullcanvas.stream.width,canvas.height=fullcanvas.stream.height;else if(remaining.length){canvas.width=videosLength>1?2*remaining[0].width:remaining[0].width;var height=1;3!==videosLength&&4!==videosLength||(height=2),5!==videosLength&&6!==videosLength||(height=3),7!==videosLength&&8!==videosLength||(height=4),9!==videosLength&&10!==videosLength||(height=5),canvas.height=remaining[0].height*height}else canvas.width=self.width||360,canvas.height=self.height||240;fullcanvas&&fullcanvas instanceof HTMLVideoElement&&drawImage(fullcanvas),remaining.forEach(function(video,idx){drawImage(video,idx)}),setTimeout(drawVideosToCanvas,self.frameInterval)}}function drawImage(video,idx){if(!isStopDrawingFrames){var x=0,y=0,width=video.width,height=video.height;1===idx&&(x=video.width),2===idx&&(y=video.height),3===idx&&(x=video.width,y=video.height),4===idx&&(y=2*video.height),5===idx&&(x=video.width,y=2*video.height),6===idx&&(y=3*video.height),7===idx&&(x=video.width,y=3*video.height),\"undefined\"!=typeof video.stream.left&&(x=video.stream.left),\"undefined\"!=typeof video.stream.top&&(y=video.stream.top),\"undefined\"!=typeof video.stream.width&&(width=video.stream.width),\"undefined\"!=typeof video.stream.height&&(height=video.stream.height),context.drawImage(video,x,y,width,height),\"function\"==typeof video.stream.onRender&&video.stream.onRender(context,x,y,width,height,idx)}}function getMixedStream(){isStopDrawingFrames=!1;var mixedVideoStream=getMixedVideoStream(),mixedAudioStream=getMixedAudioStream();mixedAudioStream&&mixedAudioStream.getTracks().filter(function(t){return\"audio\"===t.kind}).forEach(function(track){mixedVideoStream.addTrack(track)});var fullcanvas;return arrayOfMediaStreams.forEach(function(stream){stream.fullcanvas&&(fullcanvas=!0)}),mixedVideoStream}function getMixedVideoStream(){resetVideoStreams();var capturedStream;\"captureStream\"in canvas?capturedStream=canvas.captureStream():\"mozCaptureStream\"in canvas?capturedStream=canvas.mozCaptureStream():self.disableLogs||console.error(\"Upgrade to latest Chrome or otherwise enable this flag: chrome://flags/#enable-experimental-web-platform-features\");var videoStream=new MediaStream;return capturedStream.getTracks().filter(function(t){return\"video\"===t.kind}).forEach(function(track){videoStream.addTrack(track)}),canvas.stream=videoStream,videoStream}function getMixedAudioStream(){Storage.AudioContextConstructor||(Storage.AudioContextConstructor=new Storage.AudioContext),self.audioContext=Storage.AudioContextConstructor,self.audioSources=[],self.useGainNode===!0&&(self.gainNode=self.audioContext.createGain(),self.gainNode.connect(self.audioContext.destination),self.gainNode.gain.value=0);var audioTracksLength=0;if(arrayOfMediaStreams.forEach(function(stream){if(stream.getTracks().filter(function(t){return\"audio\"===t.kind}).length){audioTracksLength++;var audioSource=self.audioContext.createMediaStreamSource(stream);self.useGainNode===!0&&audioSource.connect(self.gainNode),self.audioSources.push(audioSource)}}),audioTracksLength)return self.audioDestination=self.audioContext.createMediaStreamDestination(),self.audioSources.forEach(function(audioSource){audioSource.connect(self.audioDestination)}),self.audioDestination.stream}function getVideo(stream){var video=document.createElement(\"video\");return setSrcObject(stream,video),video.className=elementClass,video.muted=!0,video.volume=0,video.width=stream.width||self.width||360,video.height=stream.height||self.height||240,video.play(),video}function resetVideoStreams(streams){videos=[],streams=streams||arrayOfMediaStreams,streams.forEach(function(stream){if(stream.getTracks().filter(function(t){return\"video\"===t.kind}).length){var video=getVideo(stream);video.stream=stream,videos.push(video)}})}var browserFakeUserAgent=\"Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45\";!function(that){\"undefined\"==typeof RecordRTC&&that&&\"undefined\"==typeof window&&\"undefined\"!=typeof global&&(global.navigator={userAgent:browserFakeUserAgent,getUserMedia:function(){}},global.console||(global.console={}),\"undefined\"!=typeof global.console.log&&\"undefined\"!=typeof global.console.error||(global.console.error=global.console.log=global.console.log||function(){console.log(arguments)}),\"undefined\"==typeof document&&(that.document={documentElement:{appendChild:function(){return\"\"}}},document.createElement=document.captureStream=document.mozCaptureStream=function(){var obj={getContext:function(){return obj},play:function(){},pause:function(){},drawImage:function(){},toDataURL:function(){return\"\"},style:{}};return obj},that.HTMLVideoElement=function(){}),\"undefined\"==typeof location&&(that.location={protocol:\"file:\",href:\"\",hash:\"\"}),\"undefined\"==typeof screen&&(that.screen={width:0,height:0}),\"undefined\"==typeof URL&&(that.URL={createObjectURL:function(){return\"\"},revokeObjectURL:function(){return\"\"}}),that.window=global)}(\"undefined\"!=typeof global?global:null),elementClass=elementClass||\"multi-streams-mixer\";var videos=[],isStopDrawingFrames=!1,canvas=document.createElement(\"canvas\"),context=canvas.getContext(\"2d\");canvas.style.opacity=0,canvas.style.position=\"absolute\",canvas.style.zIndex=-1,canvas.style.top=\"-1000em\",canvas.style.left=\"-1000em\",canvas.className=elementClass,(document.body||document.documentElement).appendChild(canvas),this.disableLogs=!1,this.frameInterval=10,this.width=360,this.height=240,this.useGainNode=!0;var self=this,AudioContext=window.AudioContext;\"undefined\"==typeof AudioContext&&(\"undefined\"!=typeof webkitAudioContext&&(AudioContext=webkitAudioContext),\"undefined\"!=typeof mozAudioContext&&(AudioContext=mozAudioContext));var URL=window.URL;\"undefined\"==typeof URL&&\"undefined\"!=typeof webkitURL&&(URL=webkitURL),\"undefined\"!=typeof navigator&&\"undefined\"==typeof navigator.getUserMedia&&(\"undefined\"!=typeof navigator.webkitGetUserMedia&&(navigator.getUserMedia=navigator.webkitGetUserMedia),\"undefined\"!=typeof navigator.mozGetUserMedia&&(navigator.getUserMedia=navigator.mozGetUserMedia));var MediaStream=window.MediaStream;\"undefined\"==typeof MediaStream&&\"undefined\"!=typeof webkitMediaStream&&(MediaStream=webkitMediaStream),\"undefined\"!=typeof MediaStream&&\"undefined\"==typeof MediaStream.prototype.stop&&(MediaStream.prototype.stop=function(){this.getTracks().forEach(function(track){track.stop()})});var Storage={};\"undefined\"!=typeof AudioContext?Storage.AudioContext=AudioContext:\"undefined\"!=typeof webkitAudioContext&&(Storage.AudioContext=webkitAudioContext),this.startDrawingFrames=function(){drawVideosToCanvas()},this.appendStreams=function(streams){if(!streams)throw\"First parameter is required.\";streams instanceof Array||(streams=[streams]),streams.forEach(function(stream){var newStream=new MediaStream;if(stream.getTracks().filter(function(t){return\"video\"===t.kind}).length){var video=getVideo(stream);video.stream=stream,videos.push(video),newStream.addTrack(stream.getTracks().filter(function(t){return\"video\"===t.kind})[0])}if(stream.getTracks().filter(function(t){return\"audio\"===t.kind}).length){var audioSource=self.audioContext.createMediaStreamSource(stream);self.audioDestination=self.audioContext.createMediaStreamDestination(),audioSource.connect(self.audioDestination),newStream.addTrack(self.audioDestination.stream.getTracks().filter(function(t){return\"audio\"===t.kind})[0])}arrayOfMediaStreams.push(newStream)})},this.releaseStreams=function(){videos=[],isStopDrawingFrames=!0,self.gainNode&&(self.gainNode.disconnect(),self.gainNode=null),self.audioSources.length&&(self.audioSources.forEach(function(source){source.disconnect()}),self.audioSources=[]),self.audioDestination&&(self.audioDestination.disconnect(),self.audioDestination=null),self.audioContext&&self.audioContext.close(),self.audioContext=null,context.clearRect(0,0,canvas.width,canvas.height),canvas.stream&&(canvas.stream.stop(),canvas.stream=null)},this.resetVideoStreams=function(streams){!streams||streams instanceof Array||(streams=[streams]),resetVideoStreams(streams)},this.name=\"MultiStreamsMixer\",this.toString=function(){return this.name},this.getMixedStream=getMixedStream}function MultiStreamRecorder(arrayOfMediaStreams,options){function getAllVideoTracks(){var tracks=[];return arrayOfMediaStreams.forEach(function(stream){getTracks(stream,\"video\").forEach(function(track){tracks.push(track)})}),tracks}arrayOfMediaStreams=arrayOfMediaStreams||[];var mixer,mediaRecorder,self=this;options=options||{elementClass:\"multi-streams-mixer\",mimeType:\"video/webm\",video:{width:360,height:240}},options.frameInterval||(options.frameInterval=10),options.video||(options.video={}),options.video.width||(options.video.width=360),options.video.height||(options.video.height=240),this.record=function(){mixer=new MultiStreamsMixer(arrayOfMediaStreams,options.elementClass||\"multi-streams-mixer\"),getAllVideoTracks().length&&(mixer.frameInterval=options.frameInterval||10,mixer.width=options.video.width||360,mixer.height=options.video.height||240,mixer.startDrawingFrames()),options.previewStream&&\"function\"==typeof options.previewStream&&options.previewStream(mixer.getMixedStream()),mediaRecorder=new MediaStreamRecorder(mixer.getMixedStream(),options),mediaRecorder.record()},this.stop=function(callback){mediaRecorder&&mediaRecorder.stop(function(blob){self.blob=blob,callback(blob),self.clearRecordedData()})},this.pause=function(){mediaRecorder&&mediaRecorder.pause()},this.resume=function(){mediaRecorder&&mediaRecorder.resume()},this.clearRecordedData=function(){mediaRecorder&&(mediaRecorder.clearRecordedData(),mediaRecorder=null),mixer&&(mixer.releaseStreams(),mixer=null)},this.addStreams=function(streams){if(!streams)throw\"First parameter is required.\";streams instanceof Array||(streams=[streams]),arrayOfMediaStreams.concat(streams),mediaRecorder&&mixer&&(mixer.appendStreams(streams),options.previewStream&&\"function\"==typeof options.previewStream&&options.previewStream(mixer.getMixedStream()))},this.resetVideoStreams=function(streams){mixer&&(!streams||streams instanceof Array||(streams=[streams]),mixer.resetVideoStreams(streams))},this.getMixer=function(){return mixer},this.name=\"MultiStreamRecorder\",this.toString=function(){return this.name}}function RecordRTCPromisesHandler(mediaStream,options){if(!this)throw'Use \"new RecordRTCPromisesHandler()\"';if(\"undefined\"==typeof mediaStream)throw'First argument \"MediaStream\" is required.';var self=this;self.recordRTC=new RecordRTC(mediaStream,options),this.startRecording=function(){return new Promise(function(resolve,reject){try{self.recordRTC.startRecording(),resolve()}catch(e){reject(e)}})},this.stopRecording=function(){return new Promise(function(resolve,reject){try{self.recordRTC.stopRecording(function(url){return self.blob=self.recordRTC.getBlob(),self.blob&&self.blob.size?void resolve(url):void reject(\"Empty blob.\",self.blob)})}catch(e){reject(e)}})},this.pauseRecording=function(){return new Promise(function(resolve,reject){try{self.recordRTC.pauseRecording(),resolve()}catch(e){reject(e)}})},this.resumeRecording=function(){return new Promise(function(resolve,reject){try{self.recordRTC.resumeRecording(),resolve()}catch(e){reject(e)}})},this.getDataURL=function(callback){return new Promise(function(resolve,reject){try{self.recordRTC.getDataURL(function(dataURL){resolve(dataURL)})}catch(e){reject(e)}})},this.getBlob=function(){return new Promise(function(resolve,reject){try{resolve(self.recordRTC.getBlob())}catch(e){reject(e)}})},this.getInternalRecorder=function(){return new Promise(function(resolve,reject){try{resolve(self.recordRTC.getInternalRecorder())}catch(e){reject(e)}})},this.reset=function(){return new Promise(function(resolve,reject){try{resolve(self.recordRTC.reset())}catch(e){reject(e)}})},this.destroy=function(){return new Promise(function(resolve,reject){try{resolve(self.recordRTC.destroy())}catch(e){reject(e)}})},this.getState=function(){return new Promise(function(resolve,reject){try{resolve(self.recordRTC.getState())}catch(e){reject(e)}})},this.blob=null,this.version=\"5.6.3\"}function WebAssemblyRecorder(stream,config){function cameraStream(){return new ReadableStream({start:function(controller){var cvs=document.createElement(\"canvas\"),video=document.createElement(\"video\"),first=!0;video.srcObject=stream,video.muted=!0,video.height=config.height,video.width=config.width,video.volume=0,video.onplaying=function(){cvs.width=config.width,cvs.height=config.height;var ctx=cvs.getContext(\"2d\"),frameTimeout=1e3/config.frameRate,cameraTimer=setInterval(function(){if(finished&&(clearInterval(cameraTimer),controller.close()),first&&(first=!1,config.onVideoProcessStarted&&config.onVideoProcessStarted()),ctx.drawImage(video,0,0),\"closed\"!==controller._controlledReadableStream.state)try{controller.enqueue(ctx.getImageData(0,0,config.width,config.height))}catch(e){}},frameTimeout)},video.play()}})}function startRecording(stream,buffer){if(!config.workerPath&&!buffer)return finished=!1,void fetch(\"https://unpkg.com/webm-wasm@latest/dist/webm-worker.js\").then(function(r){r.arrayBuffer().then(function(buffer){startRecording(stream,buffer)})});if(!config.workerPath&&buffer instanceof ArrayBuffer){var blob=new Blob([buffer],{type:\"text/javascript\"});config.workerPath=URL.createObjectURL(blob)}config.workerPath||console.error(\"workerPath parameter is missing.\"),worker=new Worker(config.workerPath),worker.postMessage(config.webAssemblyPath||\"https://unpkg.com/webm-wasm@latest/dist/webm-wasm.wasm\"),worker.addEventListener(\"message\",function(event){\"READY\"===event.data?(worker.postMessage({width:config.width,height:config.height,bitrate:config.bitrate||1200,timebaseDen:config.frameRate||30,realtime:config.realtime}),cameraStream().pipeTo(new WritableStream({write:function(image){return finished?void console.error(\"Got image, but recorder is finished!\"):void worker.postMessage(image.data.buffer,[image.data.buffer])}}))):event.data&&(isPaused||arrayOfBuffers.push(event.data))})}function terminate(callback){return worker?(worker.addEventListener(\"message\",function(event){null===event.data&&(worker.terminate(),worker=null,callback&&callback())}),void worker.postMessage(null)):void(callback&&callback())}\"undefined\"!=typeof ReadableStream&&\"undefined\"!=typeof WritableStream||console.error(\"Following polyfill is strongly recommended: https://unpkg.com/@mattiasbuelens/web-streams-polyfill/dist/polyfill.min.js\"),config=config||{},config.width=config.width||640,config.height=config.height||480,config.frameRate=config.frameRate||30,config.bitrate=config.bitrate||1200,config.realtime=config.realtime||!0;var finished,worker;this.record=function(){arrayOfBuffers=[],isPaused=!1,this.blob=null,startRecording(stream),\"function\"==typeof config.initCallback&&config.initCallback()};var isPaused;this.pause=function(){isPaused=!0},this.resume=function(){isPaused=!1};var arrayOfBuffers=[];this.stop=function(callback){finished=!0;var recorder=this;terminate(function(){recorder.blob=new Blob(arrayOfBuffers,{type:\"video/webm\"}),callback(recorder.blob)})},this.name=\"WebAssemblyRecorder\",this.toString=function(){return this.name},this.clearRecordedData=function(){arrayOfBuffers=[],isPaused=!1,this.blob=null},this.blob=null}RecordRTC.version=\"5.6.3\",\"undefined\"!=typeof module&&(module.exports=RecordRTC),\"function\"==typeof define&&define.amd&&define(\"RecordRTC\",[],function(){return RecordRTC}),RecordRTC.getFromDisk=function(type,callback){\nif(!callback)throw\"callback is mandatory.\";console.log(\"Getting recorded \"+(\"all\"===type?\"blobs\":type+\" blob \")+\" from disk!\"),DiskStorage.Fetch(function(dataURL,_type){\"all\"!==type&&_type===type+\"Blob\"&&callback&&callback(dataURL),\"all\"===type&&callback&&callback(dataURL,_type.replace(\"Blob\",\"\"))})},RecordRTC.writeToDisk=function(options){console.log(\"Writing recorded blob(s) to disk!\"),options=options||{},options.audio&&options.video&&options.gif?options.audio.getDataURL(function(audioDataURL){options.video.getDataURL(function(videoDataURL){options.gif.getDataURL(function(gifDataURL){DiskStorage.Store({audioBlob:audioDataURL,videoBlob:videoDataURL,gifBlob:gifDataURL})})})}):options.audio&&options.video?options.audio.getDataURL(function(audioDataURL){options.video.getDataURL(function(videoDataURL){DiskStorage.Store({audioBlob:audioDataURL,videoBlob:videoDataURL})})}):options.audio&&options.gif?options.audio.getDataURL(function(audioDataURL){options.gif.getDataURL(function(gifDataURL){DiskStorage.Store({audioBlob:audioDataURL,gifBlob:gifDataURL})})}):options.video&&options.gif?options.video.getDataURL(function(videoDataURL){options.gif.getDataURL(function(gifDataURL){DiskStorage.Store({videoBlob:videoDataURL,gifBlob:gifDataURL})})}):options.audio?options.audio.getDataURL(function(audioDataURL){DiskStorage.Store({audioBlob:audioDataURL})}):options.video?options.video.getDataURL(function(videoDataURL){DiskStorage.Store({videoBlob:videoDataURL})}):options.gif&&options.gif.getDataURL(function(gifDataURL){DiskStorage.Store({gifBlob:gifDataURL})})},MRecordRTC.getFromDisk=RecordRTC.getFromDisk,MRecordRTC.writeToDisk=RecordRTC.writeToDisk,\"undefined\"!=typeof RecordRTC&&(RecordRTC.MRecordRTC=MRecordRTC);var browserFakeUserAgent=\"Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45\";!function(that){that&&\"undefined\"==typeof window&&\"undefined\"!=typeof global&&(global.navigator={userAgent:browserFakeUserAgent,getUserMedia:function(){}},global.console||(global.console={}),\"undefined\"!=typeof global.console.log&&\"undefined\"!=typeof global.console.error||(global.console.error=global.console.log=global.console.log||function(){console.log(arguments)}),\"undefined\"==typeof document&&(that.document={documentElement:{appendChild:function(){return\"\"}}},document.createElement=document.captureStream=document.mozCaptureStream=function(){var obj={getContext:function(){return obj},play:function(){},pause:function(){},drawImage:function(){},toDataURL:function(){return\"\"},style:{}};return obj},that.HTMLVideoElement=function(){}),\"undefined\"==typeof location&&(that.location={protocol:\"file:\",href:\"\",hash:\"\"}),\"undefined\"==typeof screen&&(that.screen={width:0,height:0}),\"undefined\"==typeof URL&&(that.URL={createObjectURL:function(){return\"\"},revokeObjectURL:function(){return\"\"}}),that.window=global)}(\"undefined\"!=typeof global?global:null);var requestAnimationFrame=window.requestAnimationFrame;if(\"undefined\"==typeof requestAnimationFrame)if(\"undefined\"!=typeof webkitRequestAnimationFrame)requestAnimationFrame=webkitRequestAnimationFrame;else if(\"undefined\"!=typeof mozRequestAnimationFrame)requestAnimationFrame=mozRequestAnimationFrame;else if(\"undefined\"!=typeof msRequestAnimationFrame)requestAnimationFrame=msRequestAnimationFrame;else if(\"undefined\"==typeof requestAnimationFrame){var lastTime=0;requestAnimationFrame=function(callback,element){var currTime=(new Date).getTime(),timeToCall=Math.max(0,16-(currTime-lastTime)),id=setTimeout(function(){callback(currTime+timeToCall)},timeToCall);return lastTime=currTime+timeToCall,id}}var cancelAnimationFrame=window.cancelAnimationFrame;\"undefined\"==typeof cancelAnimationFrame&&(\"undefined\"!=typeof webkitCancelAnimationFrame?cancelAnimationFrame=webkitCancelAnimationFrame:\"undefined\"!=typeof mozCancelAnimationFrame?cancelAnimationFrame=mozCancelAnimationFrame:\"undefined\"!=typeof msCancelAnimationFrame?cancelAnimationFrame=msCancelAnimationFrame:\"undefined\"==typeof cancelAnimationFrame&&(cancelAnimationFrame=function(id){clearTimeout(id)}));var AudioContext=window.AudioContext;\"undefined\"==typeof AudioContext&&(\"undefined\"!=typeof webkitAudioContext&&(AudioContext=webkitAudioContext),\"undefined\"!=typeof mozAudioContext&&(AudioContext=mozAudioContext));var URL=window.URL;\"undefined\"==typeof URL&&\"undefined\"!=typeof webkitURL&&(URL=webkitURL),\"undefined\"!=typeof navigator&&\"undefined\"==typeof navigator.getUserMedia&&(\"undefined\"!=typeof navigator.webkitGetUserMedia&&(navigator.getUserMedia=navigator.webkitGetUserMedia),\"undefined\"!=typeof navigator.mozGetUserMedia&&(navigator.getUserMedia=navigator.mozGetUserMedia));var isEdge=!(navigator.userAgent.indexOf(\"Edge\")===-1||!navigator.msSaveBlob&&!navigator.msSaveOrOpenBlob),isOpera=!!window.opera||navigator.userAgent.indexOf(\"OPR/\")!==-1,isFirefox=navigator.userAgent.toLowerCase().indexOf(\"firefox\")>-1&&\"netscape\"in window&&/ rv:/.test(navigator.userAgent),isChrome=!isOpera&&!isEdge&&!!navigator.webkitGetUserMedia||isElectron()||navigator.userAgent.toLowerCase().indexOf(\"chrome/\")!==-1,isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);isSafari&&!isChrome&&navigator.userAgent.indexOf(\"CriOS\")!==-1&&(isSafari=!1,isChrome=!0);var MediaStream=window.MediaStream;\"undefined\"==typeof MediaStream&&\"undefined\"!=typeof webkitMediaStream&&(MediaStream=webkitMediaStream),\"undefined\"!=typeof MediaStream&&\"undefined\"==typeof MediaStream.prototype.stop&&(MediaStream.prototype.stop=function(){this.getTracks().forEach(function(track){track.stop()})}),\"undefined\"!=typeof RecordRTC&&(RecordRTC.invokeSaveAsDialog=invokeSaveAsDialog,RecordRTC.getTracks=getTracks,RecordRTC.getSeekableBlob=getSeekableBlob,RecordRTC.bytesToSize=bytesToSize,RecordRTC.isElectron=isElectron);var Storage={};\"undefined\"!=typeof AudioContext?Storage.AudioContext=AudioContext:\"undefined\"!=typeof webkitAudioContext&&(Storage.AudioContext=webkitAudioContext),\"undefined\"!=typeof RecordRTC&&(RecordRTC.Storage=Storage),\"undefined\"!=typeof RecordRTC&&(RecordRTC.MediaStreamRecorder=MediaStreamRecorder),\"undefined\"!=typeof RecordRTC&&(RecordRTC.StereoAudioRecorder=StereoAudioRecorder),\"undefined\"!=typeof RecordRTC&&(RecordRTC.CanvasRecorder=CanvasRecorder),\"undefined\"!=typeof RecordRTC&&(RecordRTC.WhammyRecorder=WhammyRecorder);var Whammy=function(){function WhammyVideo(duration){this.frames=[],this.duration=duration||1,this.quality=.8}function processInWebWorker(_function){var blob=URL.createObjectURL(new Blob([_function.toString(),\"this.onmessage =  function (eee) {\"+_function.name+\"(eee.data);}\"],{type:\"application/javascript\"})),worker=new Worker(blob);return URL.revokeObjectURL(blob),worker}function whammyInWebWorker(frames){function ArrayToWebM(frames){var info=checkFrames(frames);if(!info)return[];for(var clusterMaxDuration=3e4,EBML=[{id:440786851,data:[{data:1,id:17030},{data:1,id:17143},{data:4,id:17138},{data:8,id:17139},{data:\"webm\",id:17026},{data:2,id:17031},{data:2,id:17029}]},{id:408125543,data:[{id:357149030,data:[{data:1e6,id:2807729},{data:\"whammy\",id:19840},{data:\"whammy\",id:22337},{data:doubleToString(info.duration),id:17545}]},{id:374648427,data:[{id:174,data:[{data:1,id:215},{data:1,id:29637},{data:0,id:156},{data:\"und\",id:2274716},{data:\"V_VP8\",id:134},{data:\"VP8\",id:2459272},{data:1,id:131},{id:224,data:[{data:info.width,id:176},{data:info.height,id:186}]}]}]}]}],frameNumber=0,clusterTimecode=0;frameNumber<frames.length;){var clusterFrames=[],clusterDuration=0;do clusterFrames.push(frames[frameNumber]),clusterDuration+=frames[frameNumber].duration,frameNumber++;while(frameNumber<frames.length&&clusterDuration<clusterMaxDuration);var clusterCounter=0,cluster={id:524531317,data:getClusterData(clusterTimecode,clusterCounter,clusterFrames)};EBML[1].data.push(cluster),clusterTimecode+=clusterDuration}return generateEBML(EBML)}function getClusterData(clusterTimecode,clusterCounter,clusterFrames){return[{data:clusterTimecode,id:231}].concat(clusterFrames.map(function(webp){var block=makeSimpleBlock({discardable:0,frame:webp.data.slice(4),invisible:0,keyframe:1,lacing:0,trackNum:1,timecode:Math.round(clusterCounter)});return clusterCounter+=webp.duration,{data:block,id:163}}))}function checkFrames(frames){if(!frames[0])return void postMessage({error:\"Something went wrong. Maybe WebP format is not supported in the current browser.\"});for(var width=frames[0].width,height=frames[0].height,duration=frames[0].duration,i=1;i<frames.length;i++)duration+=frames[i].duration;return{duration:duration,width:width,height:height}}function numToBuffer(num){for(var parts=[];num>0;)parts.push(255&num),num>>=8;return new Uint8Array(parts.reverse())}function strToBuffer(str){return new Uint8Array(str.split(\"\").map(function(e){return e.charCodeAt(0)}))}function bitsToBuffer(bits){var data=[],pad=bits.length%8?new Array(9-bits.length%8).join(\"0\"):\"\";bits=pad+bits;for(var i=0;i<bits.length;i+=8)data.push(parseInt(bits.substr(i,8),2));return new Uint8Array(data)}function generateEBML(json){for(var ebml=[],i=0;i<json.length;i++){var data=json[i].data;\"object\"==typeof data&&(data=generateEBML(data)),\"number\"==typeof data&&(data=bitsToBuffer(data.toString(2))),\"string\"==typeof data&&(data=strToBuffer(data));var len=data.size||data.byteLength||data.length,zeroes=Math.ceil(Math.ceil(Math.log(len)/Math.log(2))/8),sizeToString=len.toString(2),padded=new Array(7*zeroes+7+1-sizeToString.length).join(\"0\")+sizeToString,size=new Array(zeroes).join(\"0\")+\"1\"+padded;ebml.push(numToBuffer(json[i].id)),ebml.push(bitsToBuffer(size)),ebml.push(data)}return new Blob(ebml,{type:\"video/webm\"})}function makeSimpleBlock(data){var flags=0;if(data.keyframe&&(flags|=128),data.invisible&&(flags|=8),data.lacing&&(flags|=data.lacing<<1),data.discardable&&(flags|=1),data.trackNum>127)throw\"TrackNumber > 127 not supported\";var out=[128|data.trackNum,data.timecode>>8,255&data.timecode,flags].map(function(e){return String.fromCharCode(e)}).join(\"\")+data.frame;return out}function parseWebP(riff){for(var VP8=riff.RIFF[0].WEBP[0],frameStart=VP8.indexOf(\"\u0001*\"),i=0,c=[];i<4;i++)c[i]=VP8.charCodeAt(frameStart+3+i);var width,height,tmp;return tmp=c[1]<<8|c[0],width=16383&tmp,tmp=c[3]<<8|c[2],height=16383&tmp,{width:width,height:height,data:VP8,riff:riff}}function getStrLength(string,offset){return parseInt(string.substr(offset+4,4).split(\"\").map(function(i){var unpadded=i.charCodeAt(0).toString(2);return new Array(8-unpadded.length+1).join(\"0\")+unpadded}).join(\"\"),2)}function parseRIFF(string){for(var offset=0,chunks={};offset<string.length;){var id=string.substr(offset,4),len=getStrLength(string,offset),data=string.substr(offset+4+4,len);offset+=8+len,chunks[id]=chunks[id]||[],\"RIFF\"===id||\"LIST\"===id?chunks[id].push(parseRIFF(data)):chunks[id].push(data)}return chunks}function doubleToString(num){return[].slice.call(new Uint8Array(new Float64Array([num]).buffer),0).map(function(e){return String.fromCharCode(e)}).reverse().join(\"\")}var webm=new ArrayToWebM(frames.map(function(frame){var webp=parseWebP(parseRIFF(atob(frame.image.slice(23))));return webp.duration=frame.duration,webp}));postMessage(webm)}return WhammyVideo.prototype.add=function(frame,duration){if(\"canvas\"in frame&&(frame=frame.canvas),\"toDataURL\"in frame&&(frame=frame.toDataURL(\"image/webp\",this.quality)),!/^data:image\\/webp;base64,/gi.test(frame))throw\"Input must be formatted properly as a base64 encoded DataURI of type image/webp\";this.frames.push({image:frame,duration:duration||this.duration})},WhammyVideo.prototype.compile=function(callback){var webWorker=processInWebWorker(whammyInWebWorker);webWorker.onmessage=function(event){return event.data.error?void console.error(event.data.error):void callback(event.data)},webWorker.postMessage(this.frames)},{Video:WhammyVideo}}();\"undefined\"!=typeof RecordRTC&&(RecordRTC.Whammy=Whammy);var DiskStorage={init:function(){function createObjectStore(dataBase){dataBase.createObjectStore(self.dataStoreName)}function putInDB(){function getFromStore(portionName){transaction.objectStore(self.dataStoreName).get(portionName).onsuccess=function(event){self.callback&&self.callback(event.target.result,portionName)}}var transaction=db.transaction([self.dataStoreName],\"readwrite\");self.videoBlob&&transaction.objectStore(self.dataStoreName).put(self.videoBlob,\"videoBlob\"),self.gifBlob&&transaction.objectStore(self.dataStoreName).put(self.gifBlob,\"gifBlob\"),self.audioBlob&&transaction.objectStore(self.dataStoreName).put(self.audioBlob,\"audioBlob\"),getFromStore(\"audioBlob\"),getFromStore(\"videoBlob\"),getFromStore(\"gifBlob\")}var self=this;if(\"undefined\"==typeof indexedDB||\"undefined\"==typeof indexedDB.open)return void console.error(\"IndexedDB API are not available in this browser.\");var db,dbVersion=1,dbName=this.dbName||location.href.replace(/\\/|:|#|%|\\.|\\[|\\]/g,\"\"),request=indexedDB.open(dbName,dbVersion);request.onerror=self.onError,request.onsuccess=function(){if(db=request.result,db.onerror=self.onError,db.setVersion)if(db.version!==dbVersion){var setVersion=db.setVersion(dbVersion);setVersion.onsuccess=function(){createObjectStore(db),putInDB()}}else putInDB();else putInDB()},request.onupgradeneeded=function(event){createObjectStore(event.target.result)}},Fetch:function(callback){return this.callback=callback,this.init(),this},Store:function(config){return this.audioBlob=config.audioBlob,this.videoBlob=config.videoBlob,this.gifBlob=config.gifBlob,this.init(),this},onError:function(error){console.error(JSON.stringify(error,null,\"\\t\"))},dataStoreName:\"recordRTC\",dbName:null};\"undefined\"!=typeof RecordRTC&&(RecordRTC.DiskStorage=DiskStorage),\"undefined\"!=typeof RecordRTC&&(RecordRTC.GifRecorder=GifRecorder),\"undefined\"==typeof RecordRTC&&(\"undefined\"!=typeof module&&(module.exports=MultiStreamsMixer),\"function\"==typeof define&&define.amd&&define(\"MultiStreamsMixer\",[],function(){return MultiStreamsMixer})),\"undefined\"!=typeof RecordRTC&&(RecordRTC.MultiStreamRecorder=MultiStreamRecorder),\"undefined\"!=typeof RecordRTC&&(RecordRTC.RecordRTCPromisesHandler=RecordRTCPromisesHandler),\"undefined\"!=typeof RecordRTC&&(RecordRTC.WebAssemblyRecorder=WebAssemblyRecorder);"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.177734375,
          "content": "## Reporting a Vulnerability\nPlease report any secuirty vulnerability via Github Security Advisory, by drafting it [here privately](https://github.com/muaz-khan/RecordRTC/security).\n"
        },
        {
          "name": "WebGL-Recording",
          "type": "tree",
          "content": null
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.734375,
          "content": "{\n  \"name\": \"recordrtc\",\n  \"version\": \"5.6.3\",\n  \"authors\": [\n        {\n            \"name\": \"Muaz Khan\",\n            \"email\": \"muazkh@gmail.com\",\n            \"homepage\": \"https://muazkhan.com/\"\n        }\n   ],\n  \"homepage\": \"http://recordrtc.org\",\n  \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/muaz-khan/RecordRTC.git\"\n   },\n  \"description\": \"RecordRTC is a JavaScript library can be used to record WebRTC audio/video media streams.\",\n  \"main\": \"RecordRTC.js\",\n  \"keywords\": [\n    \"webrtc\",\n    \"recordrtc\",\n    \"audio-recording\",\n    \"video-recording\",\n    \"gif-recording\",\n    \"audio/video recording\"\n  ],\n  \"license\": \"MIT\",\n  \"ignore\": [\n        \"**/.*\",\n        \"node_modules\",\n        \"test\",\n        \"tests\"\n   ]\n}\n"
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "favicon.ico",
          "type": "blob",
          "size": 83.185546875,
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 81.392578125,
          "content": "<!--\n> Muaz Khan     - www.MuazKhan.com\n> MIT License   - www.WebRTC-Experiment.com/licence\n> Documentation - github.com/muaz-khan/RecordRTC\n> and           - RecordRTC.org\n-->\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <title>RecordRTC | WebRTC Audio+Video+Screen Recording</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n\n    <link rel=\"stylesheet\" href=\"https://www.webrtc-experiment.com/style.css\">\n\n    <style>\n        li {\n            border-bottom: 1px solid rgb(189, 189, 189);\n            border-left: 1px solid rgb(189, 189, 189);\n            padding: .5em;\n        }\n        label {\n            display: inline-block;\n            width: 8em;\n        }\n\n        h1 span {\n            background: yellow;\n            border: 2px solid #8e1515;\n            padding: 2px 8px;\n            margin: 2px 5px;\n            border-radius: 7px;\n            color: #8e1515;\n            display: inline-block;\n        }\n\n        .recordrtc button {\n            font-size: inherit;\n        }\n\n        .recordrtc button, .recordrtc select {\n            vertical-align: middle;\n            line-height: 1;\n            padding: 2px 5px;\n            height: auto;\n            font-size: inherit;\n            margin: 0;\n        }\n\n        .recordrtc, .recordrtc .header {\n            display: block;\n            text-align: center;\n            padding-top: 0;\n        }\n\n        .recordrtc video, .recordrtc img {\n            max-width: 100%!important;\n            vertical-align: top;\n        }\n\n        .recordrtc audio {\n            vertical-align: bottom;\n        }\n\n        .recordrtc option[disabled] {\n            display: none;\n        }\n\n        .recordrtc select {\n            font-size: 17px;\n        }\n    </style>\n\n    <script src=\"/RecordRTC.js\"></script>\n    \n    <!-- web streams API polyfill to support Firefox -->\n    <script src=\"https://unpkg.com/@mattiasbuelens/web-streams-polyfill/dist/polyfill.min.js\"></script>\n\n    <!-- ../libs/DBML.js to fix video seeking issues -->\n    <script src=\"https://www.webrtc-experiment.com/EBML.js\"></script>\n\n    <!-- for Edge/FF/Chrome/Opera/etc. getUserMedia support -->\n    <script src=\"https://webrtc.github.io/adapter/adapter-latest.js\"></script>\n    <script src=\"https://www.webrtc-experiment.com/DetectRTC.js\"> </script>\n\n    <!-- video element -->\n    <link href=\"https://www.webrtc-experiment.com/getHTMLMediaElement.css\" rel=\"stylesheet\">\n    <script src=\"https://www.webrtc-experiment.com/getHTMLMediaElement.js\"></script>\n</head>\n\n<body>\n    <article>\n        <header style=\"text-align: center;\">\n            <h1>\n                Audio+Video+Screen Recording using <a href=\"https://github.com/muaz-khan/RecordRTC\">RecordRTC</a>\n            </h1>\n\n            <p style=\"margin:0;margin-bottom:-30px;margin-top: 15px;\">\n                <a href=\"https://github.com/muaz-khan/RecordRTC\">Github Source Codes</a> |\n                <a href=\"Canvas-Recording/\">Canvas Recording</a> |\n                <a href=\"simple-demos/\" style=\"color: #EC008C;border: 1px dotted;background: #ffffbe;padding: 0 6px;border-radius: 3px;\">30+ Simple Demos</a>\n\n                <br><br>\n\n                <a href=\"https://www.npmjs.com/package/recordrtc\"><img src=\"https://img.shields.io/npm/v/recordrtc.svg\"></a>\n                <a href=\"https://www.npmjs.com/package/recordrtc\"><img src=\"https://img.shields.io/npm/dm/recordrtc.svg\"></a>\n                <a href=\"https://travis-ci.org/muaz-khan/RecordRTC\"><img src=\"https://travis-ci.org/muaz-khan/RecordRTC.png?branch=master\"></a>\n            </p>\n        </header>\n\n        <div class=\"github-stargazers\" style=\"margin-top: 25px;\"></div>\n\n        <section class=\"experiment recordrtc\">\n            <h2 class=\"header\" style=\"margin: 0;\">\n                <select class=\"recording-media\">\n                    <option value=\"record-audio-plus-video\">Microphone+Camera</option>\n                    <option value=\"record-audio\">Microphone</option>\n                    <option value=\"record-screen\">Full Screen</option>\n                    <option value=\"record-audio-plus-screen\">Microphone+Screen</option>\n                </select>\n\n                <span style=\"font-size: 15px;\">into</span>\n\n                <select class=\"media-container-format\">\n                    <option>default</option>\n                    <option>vp8</option>\n                    <option>vp9</option>\n                    <option>h264</option>\n                    <option>mkv</option>\n                    <option>opus</option>\n                    <option>ogg</option>\n                    <option>pcm</option>\n                    <option>gif</option>\n                    <option>whammy</option>\n                    <option>WebAssembly</option>\n                </select>\n\n                <input type=\"checkbox\" id=\"chk-timeSlice\" style=\"margin:0;width:auto;\" title=\"Use intervals based recording\">\n                <label for=\"chk-timeSlice\" style=\"font-size: 15px;margin:0;width: auto;cursor: pointer;-webkit-user-select:none;user-select:none;\" title=\"Use intervals based recording\">Use timeSlice?</label>\n\n                <br>\n\n                <button id=\"btn-start-recording\">Start Recording</button>\n                <button id=\"btn-pause-recording\" style=\"display: none; font-size: 15px;\">Pause</button>\n\n                <div style=\"display: inline-block;\">\n                    <input type=\"checkbox\" id=\"chk-fixSeeking\" style=\"margin:0;width:auto;\" title=\"Fix video seeking issues?\">\n                    <label for=\"chk-fixSeeking\" style=\"font-size: 15px;margin:0;width: auto;cursor: pointer;-webkit-user-select:none;user-select:none;\" title=\"Fix video seeking issues?\">Fix Seeking Issues?</label>\n                </div>\n\n                <hr style=\"border-top: 0;border-bottom: 1px solid rgb(189, 189, 189);margin: 4px -12px;margin-top: 8px;\">\n                <select class=\"media-resolutions\">\n                    <option value=\"default\">Default resolutions</option>\n                    <option value=\"1920x1080\">1080p</option>\n                    <option value=\"1280x720\">720p</option>\n                    <option value=\"640x480\">480p</option>\n                    <option value=\"3840x2160\">4K Ultra HD (3840x2160)</option>\n                </select>\n\n                <select class=\"media-framerates\">\n                    <option value=\"default\">Default framerates</option>\n                    <option value=\"5\">5 fps</option>\n                    <option value=\"15\">15 fps</option>\n                    <option value=\"24\">24 fps</option>\n                    <option value=\"30\">30 fps</option>\n                    <option value=\"60\">60 fps</option>\n                </select>\n\n                <select class=\"media-bitrates\">\n                    <option value=\"default\">Default bitrates</option>\n                    <option value=\"8000000000\">1 GB bps</option>\n                    <option value=\"800000000\">100 MB bps</option>\n                    <option value=\"8000000\">1 MB bps</option>\n                    <option value=\"800000\">100 KB bps</option>\n                    <option value=\"8000\">1 KB bps</option>\n                    <option value=\"800\">100 Bytes bps</option>\n                </select>\n            </h2>\n\n            <div style=\"text-align: center; display: none;\">\n                <button id=\"save-to-disk\">Save To Disk</button>\n                <button id=\"upload-to-php\">Upload to PHP</button>\n                <button id=\"open-new-tab\">Open New Tab</button>\n\n                <div style=\"margin-top: 10px;\">\n                    <span id=\"signinButton\" class=\"pre-sign-in\">\n                      <span\n                        class=\"g-signin\"\n                        data-callback=\"signinCallback\"\n                        data-clientid=\"41556190767-115ifahd55lk4ln5pop4jus55cr4l7oh.apps.googleusercontent.com\"\n                        data-cookiepolicy=\"single_host_origin\"\n                        data-scope=\"https://www.googleapis.com/auth/youtube.upload https://www.googleapis.com/auth/youtube\">\n                      </span>\n                    </span>\n\n                    <button id=\"upload-to-youtube\" style=\"vertical-align:top;\">Upload to YouTube</button>\n                </div>\n            </div>\n\n            <div style=\"margin-top: 10px;\" id=\"recording-player\"></div>\n        </section>\n\n        <script>\n            (function() {\n                var params = {},\n                    r = /([^&=]+)=?([^&]*)/g;\n\n                function d(s) {\n                    return decodeURIComponent(s.replace(/\\+/g, ' '));\n                }\n\n                var match, search = window.location.search;\n                while (match = r.exec(search.substring(1))) {\n                    params[d(match[1])] = d(match[2]);\n\n                    if(d(match[2]) === 'true' || d(match[2]) === 'false') {\n                        params[d(match[1])] = d(match[2]) === 'true' ? true : false;\n                    }\n                }\n\n                window.params = params;\n            })();\n\n            function addStreamStopListener(stream, callback) {\n                stream.addEventListener('ended', function() {\n                    callback();\n                    callback = function() {};\n                }, false);\n                stream.addEventListener('inactive', function() {\n                    callback();\n                    callback = function() {};\n                }, false);\n                stream.getTracks().forEach(function(track) {\n                    track.addEventListener('ended', function() {\n                        callback();\n                        callback = function() {};\n                    }, false);\n                    track.addEventListener('inactive', function() {\n                        callback();\n                        callback = function() {};\n                    }, false);\n                });\n            }\n        </script>\n\n        <script>\n            var video = document.createElement('video');\n            video.controls = false;\n            var mediaElement = getHTMLMediaElement(video, {\n                title: 'Recording status: inactive',\n                buttons: ['full-screen'/*, 'take-snapshot'*/],\n                showOnMouseEnter: false,\n                width: 360,\n                onTakeSnapshot: function() {\n                    var canvas = document.createElement('canvas');\n                    canvas.width = mediaElement.clientWidth;\n                    canvas.height = mediaElement.clientHeight;\n\n                    var context = canvas.getContext('2d');\n                    context.drawImage(recordingPlayer, 0, 0, canvas.width, canvas.height);\n\n                    window.open(canvas.toDataURL('image/png'));\n                }\n            });\n            document.getElementById('recording-player').appendChild(mediaElement);\n\n            var div = document.createElement('section');\n            mediaElement.media.parentNode.appendChild(div);\n            mediaElement.media.muted = false;\n            mediaElement.media.autoplay = true;\n            mediaElement.media.playsinline = true;\n            div.appendChild(mediaElement.media);\n            \n            var recordingPlayer = mediaElement.media;\n            var recordingMedia = document.querySelector('.recording-media');\n            var mediaContainerFormat = document.querySelector('.media-container-format');\n            var mimeType = 'video/webm';\n            var fileExtension = 'webm';\n            var type = 'video';\n            var recorderType;\n            var defaultWidth;\n            var defaultHeight;\n\n            var btnStartRecording = document.querySelector('#btn-start-recording');\n\n            window.onbeforeunload = function() {\n                btnStartRecording.disabled = false;\n                recordingMedia.disabled = false;\n                mediaContainerFormat.disabled = false;\n\n                chkFixSeeking.parentNode.style.display = 'inline-block';\n            };\n\n            btnStartRecording.onclick = function(event) {\n                var button = btnStartRecording;\n\n                if(button.innerHTML === 'Stop Recording') {\n                    btnPauseRecording.style.display = 'none';\n                    button.disabled = true;\n                    button.disableStateWaiting = true;\n                    setTimeout(function() {\n                        button.disabled = false;\n                        button.disableStateWaiting = false;\n                    }, 2000);\n\n                    button.innerHTML = 'Start Recording';\n\n                    function stopStream() {\n                        if(button.stream && button.stream.stop) {\n                            button.stream.stop();\n                            button.stream = null;\n                        }\n\n                        if(button.stream instanceof Array) {\n                            button.stream.forEach(function(stream) {\n                                stream.stop();\n                            });\n                            button.stream = null;\n                        }\n\n                        videoBitsPerSecond = null;\n                        var html = 'Recording status: stopped';\n                        html += '<br>Size: ' + bytesToSize(button.recordRTC.getBlob().size);\n                        recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = html;\n                    }\n\n                    if(button.recordRTC) {\n                        if(button.recordRTC.length) {\n                            button.recordRTC[0].stopRecording(function(url) {\n                                if(!button.recordRTC[1]) {\n                                    button.recordingEndedCallback(url);\n                                    stopStream();\n\n                                    saveToDiskOrOpenNewTab(button.recordRTC[0]);\n                                    return;\n                                }\n\n                                button.recordRTC[1].stopRecording(function(url) {\n                                    button.recordingEndedCallback(url);\n                                    stopStream();\n                                });\n                            });\n                        }\n                        else {\n                            button.recordRTC.stopRecording(function(url) {\n                                if(button.blobs && button.blobs.length) {\n                                    var blob = new File(button.blobs, getFileName(fileExtension), {\n                                        type: mimeType\n                                    });\n                                    \n                                    button.recordRTC.getBlob = function() {\n                                        return blob;\n                                    };\n\n                                    url = URL.createObjectURL(blob);\n                                }\n\n                                if(chkFixSeeking.checked === true) {\n                                    // to fix video seeking issues\n                                    getSeekableBlob(button.recordRTC.getBlob(), function(seekableBlob) {\n                                        button.recordRTC.getBlob = function() {\n                                            return seekableBlob;\n                                        };\n\n                                        url = URL.createObjectURL(seekableBlob);\n\n                                        button.recordingEndedCallback(url);\n                                        saveToDiskOrOpenNewTab(button.recordRTC);\n                                        stopStream();\n                                    })\n                                    return;\n                                }\n\n                                button.recordingEndedCallback(url);\n                                saveToDiskOrOpenNewTab(button.recordRTC);\n                                stopStream();\n                            });\n                        }\n                    }\n\n                    return;\n                }\n\n                if(!event) return;\n\n                button.disabled = true;\n\n                var commonConfig = {\n                    onMediaCaptured: function(stream) {\n                        button.stream = stream;\n                        if(button.mediaCapturedCallback) {\n                            button.mediaCapturedCallback();\n                        }\n\n                        button.innerHTML = 'Stop Recording';\n                        button.disabled = false;\n\n                        chkFixSeeking.parentNode.style.display = 'none';\n                    },\n                    onMediaStopped: function() {\n                        button.innerHTML = 'Start Recording';\n\n                        if(!button.disableStateWaiting) {\n                            button.disabled = false;\n                        }\n\n                        chkFixSeeking.parentNode.style.display = 'inline-block';\n                    },\n                    onMediaCapturingFailed: function(error) {\n                        console.error('onMediaCapturingFailed:', error);\n\n                        if(error.toString().indexOf('no audio or video tracks available') !== -1) {\n                            alert('RecordRTC failed to start because there are no audio or video tracks available.');\n                        }\n                        \n                        if(error.name === 'PermissionDeniedError' && DetectRTC.browser.name === 'Firefox') {\n                            alert('Firefox requires version >= 52. Firefox also requires HTTPs.');\n                        }\n\n                        commonConfig.onMediaStopped();\n                    }\n                };\n\n                if(mediaContainerFormat.value === 'h264') {\n                    mimeType = 'video/webm\\;codecs=h264';\n                    fileExtension = 'mp4';\n\n                    // video/mp4;codecs=avc1    \n                    if(isMimeTypeSupported('video/mpeg')) {\n                        mimeType = 'video/mpeg';\n                    }\n                }\n\n                if(mediaContainerFormat.value === 'mkv' && isMimeTypeSupported('video/x-matroska;codecs=avc1')) {\n                    mimeType = 'video/x-matroska;codecs=avc1';\n                    fileExtension = 'mkv';\n                }\n\n                if(mediaContainerFormat.value === 'vp8' && isMimeTypeSupported('video/webm\\;codecs=vp8')) {\n                    mimeType = 'video/webm\\;codecs=vp8';\n                    fileExtension = 'webm';\n                    recorderType = null;\n                    type = 'video';\n                }\n\n                if(mediaContainerFormat.value === 'vp9' && isMimeTypeSupported('video/webm\\;codecs=vp9')) {\n                    mimeType = 'video/webm\\;codecs=vp9';\n                    fileExtension = 'webm';\n                    recorderType = null;\n                    type = 'video';\n                }\n\n                if(mediaContainerFormat.value === 'pcm') {\n                    mimeType = 'audio/wav';\n                    fileExtension = 'wav';\n                    recorderType = StereoAudioRecorder;\n                    type = 'audio';\n                }\n\n                if(mediaContainerFormat.value === 'opus' || mediaContainerFormat.value === 'ogg') {\n                    if(isMimeTypeSupported('audio/webm')) {\n                        mimeType = 'audio/webm';\n                        fileExtension = 'webm'; // webm\n                    }\n\n                    if(isMimeTypeSupported('audio/ogg')) {\n                        mimeType = 'audio/ogg; codecs=opus';\n                        fileExtension = 'ogg'; // ogg\n                    }\n\n                    recorderType = null;\n                    type = 'audio';\n                }\n\n                if(mediaContainerFormat.value === 'whammy') {\n                    mimeType = 'video/webm';\n                    fileExtension = 'webm';\n                    recorderType = WhammyRecorder;\n                    type = 'video';\n                }\n\n                if(mediaContainerFormat.value === 'WebAssembly') {\n                    mimeType = 'video/webm';\n                    fileExtension = 'webm';\n                    recorderType = WebAssemblyRecorder;\n                    type = 'video';\n                }\n\n                if(mediaContainerFormat.value === 'gif') {\n                    mimeType = 'image/gif';\n                    fileExtension = 'gif';\n                    recorderType = GifRecorder;\n                    type = 'gif';\n                }\n\n                if(mediaContainerFormat.value === 'default') {\n                    mimeType = 'video/webm';\n                    fileExtension = 'webm';\n                    recorderType = null;\n                    type = 'video';\n                }\n\n                if(recordingMedia.value === 'record-audio') {\n                    captureAudio(commonConfig);\n\n                    button.mediaCapturedCallback = function() {\n                        var options = {\n                            type: type,\n                            mimeType: mimeType,\n                            leftChannel: params.leftChannel || false,\n                            disableLogs: params.disableLogs || false\n                        };\n\n                        if(params.sampleRate) {\n                            options.sampleRate = parseInt(params.sampleRate);\n                        }\n\n                        if(params.bufferSize) {\n                            options.bufferSize = parseInt(params.bufferSize);\n                        }\n\n                        if(recorderType) {\n                            options.recorderType = recorderType;\n                        }\n\n                        if(videoBitsPerSecond) {\n                            options.videoBitsPerSecond = videoBitsPerSecond;\n                        }\n\n                        if(DetectRTC.browser.name === 'Edge') {\n                            options.numberOfAudioChannels = 1;\n                        }\n\n                        options.ignoreMutedMedia = false;\n                        button.recordRTC = RecordRTC(button.stream, options);\n\n                        button.recordingEndedCallback = function(url) {\n                            setVideoURL(url);\n                        };\n\n                        button.recordRTC.startRecording();\n                        btnPauseRecording.style.display = '';\n                    };\n                }\n\n                if(recordingMedia.value === 'record-audio-plus-video') {\n                    captureAudioPlusVideo(commonConfig);\n\n                    button.mediaCapturedCallback = function() {\n                        if(typeof MediaRecorder === 'undefined') { // opera or chrome etc.\n                            button.recordRTC = [];\n\n                            if(!params.bufferSize) {\n                                // it fixes audio issues whilst recording 720p\n                                params.bufferSize = 16384;\n                            }\n\n                            var options = {\n                                type: 'audio', // hard-code to set \"audio\"\n                                leftChannel: params.leftChannel || false,\n                                disableLogs: params.disableLogs || false,\n                                video: recordingPlayer\n                            };\n\n                            if(params.sampleRate) {\n                                options.sampleRate = parseInt(params.sampleRate);\n                            }\n\n                            if(params.bufferSize) {\n                                options.bufferSize = parseInt(params.bufferSize);\n                            }\n\n                            if(params.frameInterval) {\n                                options.frameInterval = parseInt(params.frameInterval);\n                            }\n\n                            if(recorderType) {\n                                options.recorderType = recorderType;\n                            }\n\n                            if(videoBitsPerSecond) {\n                                options.videoBitsPerSecond = videoBitsPerSecond;\n                            }\n\n                            options.ignoreMutedMedia = false;\n                            var audioRecorder = RecordRTC(button.stream, options);\n\n                            options.type = type;\n                            var videoRecorder = RecordRTC(button.stream, options);\n\n                            // to sync audio/video playbacks in browser!\n                            videoRecorder.initRecorder(function() {\n                                audioRecorder.initRecorder(function() {\n                                    audioRecorder.startRecording();\n                                    videoRecorder.startRecording();\n                                    btnPauseRecording.style.display = '';\n                                });\n                            });\n\n                            button.recordRTC.push(audioRecorder, videoRecorder);\n\n                            button.recordingEndedCallback = function() {\n                                var audio = new Audio();\n                                audio.src = audioRecorder.toURL();\n                                audio.controls = true;\n                                audio.autoplay = true;\n\n                                recordingPlayer.parentNode.appendChild(document.createElement('hr'));\n                                recordingPlayer.parentNode.appendChild(audio);\n\n                                if(audio.paused) audio.play();\n                            };\n                            return;\n                        }\n\n                        var options = {\n                            type: type,\n                            mimeType: mimeType,\n                            disableLogs: params.disableLogs || false,\n                            getNativeBlob: false, // enable it for longer recordings\n                            video: recordingPlayer\n                        };\n\n                        if(recorderType) {\n                            options.recorderType = recorderType;\n\n                            if(recorderType == WhammyRecorder || recorderType == GifRecorder || recorderType == WebAssemblyRecorder) {\n                                options.canvas = options.video = {\n                                    width: defaultWidth || 320,\n                                    height: defaultHeight || 240\n                                };\n                            }\n                        }\n\n                        if(videoBitsPerSecond) {\n                            options.videoBitsPerSecond = videoBitsPerSecond;\n                        }\n\n                        if(timeSlice && typeof MediaRecorder !== 'undefined') {\n                            options.timeSlice = timeSlice;\n                            button.blobs = [];\n                            options.ondataavailable = function(blob) {\n                                button.blobs.push(blob);\n                            };\n                        }\n\n                        options.ignoreMutedMedia = false;\n                        button.recordRTC = RecordRTC(button.stream, options);\n\n                        button.recordingEndedCallback = function(url) {\n                            setVideoURL(url);\n                        };\n\n                        button.recordRTC.startRecording();\n                        btnPauseRecording.style.display = '';\n                        recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = '<img src=\"https://www.webrtc-experiment.com/images/progress.gif\">';\n                    };\n                }\n\n                if(recordingMedia.value === 'record-screen') {\n                    captureScreen(commonConfig);\n\n                    button.mediaCapturedCallback = function() {\n                        var options = {\n                            type: type,\n                            mimeType: mimeType,\n                            disableLogs: params.disableLogs || false,\n                            getNativeBlob: false, // enable it for longer recordings\n                            video: recordingPlayer\n                        };\n\n                        if(recorderType) {\n                            options.recorderType = recorderType;\n\n                            if(recorderType == WhammyRecorder || recorderType == GifRecorder || recorderType == WebAssemblyRecorder) {\n                                options.canvas = options.video = {\n                                    width: defaultWidth || 320,\n                                    height: defaultHeight || 240\n                                };\n                            }\n                        }\n\n                        if(videoBitsPerSecond) {\n                            options.videoBitsPerSecond = videoBitsPerSecond;\n                        }\n\n                        options.ignoreMutedMedia = false;\n                        button.recordRTC = RecordRTC(button.stream, options);\n\n                        button.recordingEndedCallback = function(url) {\n                            setVideoURL(url);\n                        };\n\n                        button.recordRTC.startRecording();\n                        btnPauseRecording.style.display = '';\n                    };\n                }\n\n                // note: audio+tab is supported in Chrome 50+\n                // todo: add audio+tab recording\n                if(recordingMedia.value === 'record-audio-plus-screen') {\n                    captureAudioPlusScreen(commonConfig);\n\n                    button.mediaCapturedCallback = function() {\n                        var options = {\n                            type: type,\n                            mimeType: mimeType,\n                            disableLogs: params.disableLogs || false,\n                            getNativeBlob: false, // enable it for longer recordings\n                            video: recordingPlayer\n                        };\n\n                        if(recorderType) {\n                            options.recorderType = recorderType;\n\n                            if(recorderType == WhammyRecorder || recorderType == GifRecorder || recorderType == WebAssemblyRecorder) {\n                                options.canvas = options.video = {\n                                    width: defaultWidth || 320,\n                                    height: defaultHeight || 240\n                                };\n                            }\n                        }\n\n                        if(videoBitsPerSecond) {\n                            options.videoBitsPerSecond = videoBitsPerSecond;\n                        }\n\n                        options.ignoreMutedMedia = false;\n                        button.recordRTC = RecordRTC(button.stream, options);\n\n                        button.recordingEndedCallback = function(url) {\n                            setVideoURL(url);\n                        };\n\n                        button.recordRTC.startRecording();\n                        btnPauseRecording.style.display = '';\n                    };\n                }\n            };\n\n            function captureVideo(config) {\n                captureUserMedia({video: true}, function(videoStream) {\n                    config.onMediaCaptured(videoStream);\n\n                    addStreamStopListener(videoStream, function() {\n                        config.onMediaStopped();\n                    });\n                }, function(error) {\n                    config.onMediaCapturingFailed(error);\n                });\n            }\n\n            function captureAudio(config) {\n                captureUserMedia({audio: true}, function(audioStream) {\n                    config.onMediaCaptured(audioStream);\n\n                    addStreamStopListener(audioStream, function() {\n                        config.onMediaStopped();\n                    });\n                }, function(error) {\n                    config.onMediaCapturingFailed(error);\n                });\n            }\n\n            function captureAudioPlusVideo(config) {\n                captureUserMedia({video: true, audio: true}, function(audioVideoStream) {\n                    config.onMediaCaptured(audioVideoStream);\n\n                    if(audioVideoStream instanceof Array) {\n                        audioVideoStream.forEach(function(stream) {\n                            addStreamStopListener(stream, function() {\n                                config.onMediaStopped();\n                            });\n                        });\n                        return;\n                    }\n\n                    addStreamStopListener(audioVideoStream, function() {\n                        config.onMediaStopped();\n                    });\n                }, function(error) {\n                    config.onMediaCapturingFailed(error);\n                });\n            }\n\n            var MY_DOMAIN = 'webrtc-experiment.com';\n\n            function isMyOwnDomain() {\n                // replace \"webrtc-experiment.com\" with your own domain name\n                return document.domain.indexOf(MY_DOMAIN) !== -1;\n            }\n\n            function isLocalHost() {\n                // \"chrome.exe\" --enable-usermedia-screen-capturing\n                // or firefox => about:config => \"media.getusermedia.screensharing.allowed_domains\" => add \"localhost\"\n                return document.domain === 'localhost' || document.domain === '127.0.0.1';\n            }\n\n            var videoBitsPerSecond;\n\n            function setVideoBitrates() {\n                var select = document.querySelector('.media-bitrates');\n                var value = select.value;\n\n                if(value == 'default') {\n                    videoBitsPerSecond = null;\n                    return;\n                }\n\n                videoBitsPerSecond = parseInt(value);\n            }\n\n            function getFrameRates(mediaConstraints) {\n                if(!mediaConstraints.video) {\n                    return mediaConstraints;\n                }\n\n                var select = document.querySelector('.media-framerates');\n                var value = select.value;\n\n                if(value == 'default') {\n                    return mediaConstraints;\n                }\n\n                value = parseInt(value);\n\n                if(DetectRTC.browser.name === 'Firefox') {\n                    mediaConstraints.video.frameRate = value;\n                    return mediaConstraints;\n                }\n\n                if(!mediaConstraints.video.mandatory) {\n                    mediaConstraints.video.mandatory = {};\n                    mediaConstraints.video.optional = [];\n                }\n\n                var isScreen = recordingMedia.value.toString().toLowerCase().indexOf('screen') != -1;\n                if(isScreen) {\n                    mediaConstraints.video.mandatory.maxFrameRate = value;\n                }\n                else {\n                    mediaConstraints.video.mandatory.minFrameRate = value;\n                }\n\n                return mediaConstraints;\n            }\n\n            function setGetFromLocalStorage(selectors) {\n                selectors.forEach(function(selector) {\n                    var storageItem = selector.replace(/\\.|#/g, '');\n                    if(localStorage.getItem(storageItem)) {\n                        document.querySelector(selector).value = localStorage.getItem(storageItem);\n                    }\n\n                    addEventListenerToUploadLocalStorageItem(selector, ['change', 'blur'], function() {\n                        localStorage.setItem(storageItem, document.querySelector(selector).value);\n                    });\n                });\n            }\n\n            function addEventListenerToUploadLocalStorageItem(selector, arr, callback) {\n                arr.forEach(function(event) {\n                    document.querySelector(selector).addEventListener(event, callback, false);\n                });\n            }\n\n            setGetFromLocalStorage(['.media-resolutions', '.media-framerates', '.media-bitrates', '.recording-media', '.media-container-format']);\n\n            function getVideoResolutions(mediaConstraints) {\n                if(!mediaConstraints.video) {\n                    return mediaConstraints;\n                }\n\n                var select = document.querySelector('.media-resolutions');\n                var value = select.value;\n\n                if(value == 'default') {\n                    return mediaConstraints;\n                }\n\n                value = value.split('x');\n\n                if(value.length != 2) {\n                    return mediaConstraints;\n                }\n\n                defaultWidth = parseInt(value[0]);\n                defaultHeight = parseInt(value[1]);\n\n                if(DetectRTC.browser.name === 'Firefox') {\n                    mediaConstraints.video.width = defaultWidth;\n                    mediaConstraints.video.height = defaultHeight;\n                    return mediaConstraints;\n                }\n\n                if(!mediaConstraints.video.mandatory) {\n                    mediaConstraints.video.mandatory = {};\n                    mediaConstraints.video.optional = [];\n                }\n\n                var isScreen = recordingMedia.value.toString().toLowerCase().indexOf('screen') != -1;\n\n                if(isScreen) {\n                    mediaConstraints.video.mandatory.maxWidth = defaultWidth;\n                    mediaConstraints.video.mandatory.maxHeight = defaultHeight;\n                }\n                else {\n                    mediaConstraints.video.mandatory.minWidth = defaultWidth;\n                    mediaConstraints.video.mandatory.minHeight = defaultHeight;\n                }\n\n                return mediaConstraints;\n            }\n\n            function captureUserMedia(mediaConstraints, successCallback, errorCallback) {\n                if(mediaConstraints.video == true) {\n                    mediaConstraints.video = {};\n                }\n\n                setVideoBitrates();\n\n                mediaConstraints = getVideoResolutions(mediaConstraints);\n                mediaConstraints = getFrameRates(mediaConstraints);\n\n                var isBlackBerry = !!(/BB10|BlackBerry/i.test(navigator.userAgent || ''));\n                if(isBlackBerry && !!(navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia)) {\n                    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n                    navigator.getUserMedia(mediaConstraints, successCallback, errorCallback);\n                    return;\n                }\n\n                navigator.mediaDevices.getUserMedia(mediaConstraints).then(function(stream) {\n                    successCallback(stream);\n\n                    setVideoURL(stream, true);\n                }).catch(function(error) {\n                    if(error && (error.name === 'ConstraintNotSatisfiedError' || error.name === 'OverconstrainedError')) {\n                        alert('Your camera or browser does NOT supports selected resolutions or frame-rates. \\n\\nPlease select \"default\" resolutions.');\n                    }\n                    else if(error && error.message) {\n                        alert(error.message);\n                    }\n                    else {\n                        alert('Unable to make getUserMedia request. Please check browser console logs.');\n                    }\n\n                    errorCallback(error);\n                });\n            }\n\n            function setMediaContainerFormat(arrayOfOptionsSupported) {\n                var options = Array.prototype.slice.call(\n                    mediaContainerFormat.querySelectorAll('option')\n                );\n\n                var localStorageItem;\n                if(localStorage.getItem('media-container-format')) {\n                    localStorageItem = localStorage.getItem('media-container-format');\n                }\n\n                var selectedItem;\n                options.forEach(function(option) {\n                    option.disabled = true;\n\n                    if(arrayOfOptionsSupported.indexOf(option.value) !== -1) {\n                        option.disabled = false;\n\n                        if(localStorageItem && arrayOfOptionsSupported.indexOf(localStorageItem) != -1) {\n                            if(option.value != localStorageItem) return;\n                            option.selected = true;\n                            selectedItem = option;\n                            return;\n                        }\n\n                        if(!selectedItem) {\n                            option.selected = true;\n                            selectedItem = option;\n                        }\n                    }\n                });\n            }\n\n            function isMimeTypeSupported(mimeType) {\n                if(typeof MediaRecorder === 'undefined') {\n                    return false;\n                }\n\n                if(typeof MediaRecorder.isTypeSupported !== 'function') {\n                    return true;\n                }\n\n                return MediaRecorder.isTypeSupported(mimeType);\n            }\n\n            recordingMedia.onchange = function() {\n                if(recordingMedia.value === 'record-audio') {\n                    var recordingOptions = [];\n                    \n                    if(isMimeTypeSupported('audio/webm')) {\n                        recordingOptions.push('opus');\n                    }\n\n                    if(isMimeTypeSupported('audio/ogg')) {\n                        recordingOptions.push('ogg');\n                    }\n\n                    recordingOptions.push('pcm');\n\n                    setMediaContainerFormat(recordingOptions);\n                    return;\n                }\n\n                var isChrome = !!window.chrome && !(!!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0);\n\n                var recordingOptions = ['vp8']; // MediaStreamRecorder with vp8\n\n                if(isMimeTypeSupported('video/webm\\;codecs=vp9')) {\n                    recordingOptions.push('vp9'); // MediaStreamRecorder with vp9\n                }\n\n                if(isMimeTypeSupported('video/webm\\;codecs=h264')) {\n                    recordingOptions.push('h264'); // MediaStreamRecorder with h264\n                }\n\n                if(isMimeTypeSupported('video/x-matroska;codecs=avc1')) {\n                    recordingOptions.push('mkv'); // MediaStreamRecorder with mkv/matroska\n                }\n\n                recordingOptions.push('gif'); // GifRecorder\n\n                if(DetectRTC.browser.name == 'Chrome') {\n                    recordingOptions.push('whammy'); // WhammyRecorder\n                }\n\n                if(DetectRTC.browser.name == 'Chrome') {\n                    recordingOptions.push('WebAssembly'); // WebAssemblyRecorder\n                }\n\n                recordingOptions.push('default'); // Default mimeType for MediaStreamRecorder\n\n                setMediaContainerFormat(recordingOptions);\n            };\n            recordingMedia.onchange();\n\n            if(typeof MediaRecorder === 'undefined' && (DetectRTC.browser.name === 'Edge' || DetectRTC.browser.name === 'Safari')) {\n                // webp isn't supported in Microsoft Edge\n                // neither MediaRecorder API\n                // so lets disable both video/screen recording options\n\n                console.warn('Neither MediaRecorder API nor webp is supported in ' + DetectRTC.browser.name + '. You cam merely record audio.');\n\n                recordingMedia.innerHTML = '<option value=\"record-audio\">Audio</option>';\n                setMediaContainerFormat(['pcm']);\n            }\n\n            function stringify(obj) {\n                var result = '';\n                Object.keys(obj).forEach(function(key) {\n                    if(typeof obj[key] === 'function') {\n                        return;\n                    }\n\n                    if(result.length) {\n                        result += ',';\n                    }\n\n                    result += key + ': ' + obj[key];\n                });\n\n                return result;\n            }\n\n            function mediaRecorderToStringify(mediaRecorder) {\n                var result = '';\n                result += 'mimeType: ' + mediaRecorder.mimeType;\n                result += ', state: ' + mediaRecorder.state;\n                result += ', audioBitsPerSecond: ' + mediaRecorder.audioBitsPerSecond;\n                result += ', videoBitsPerSecond: ' + mediaRecorder.videoBitsPerSecond;\n                if(mediaRecorder.stream) {\n                    result += ', streamid: ' + mediaRecorder.stream.id;\n                    result += ', stream-active: ' + mediaRecorder.stream.active;\n                }\n                return result;\n            }\n\n            function getFailureReport() {\n                var info = 'RecordRTC seems failed. \\n\\n' + stringify(DetectRTC.browser) + '\\n\\n' + DetectRTC.osName + ' ' + DetectRTC.osVersion + '\\n';\n\n                if (typeof recorderType !== 'undefined' && recorderType) {\n                    info += '\\nrecorderType: ' + recorderType.name;\n                }\n\n                if (typeof mimeType !== 'undefined') {\n                    info += '\\nmimeType: ' + mimeType;\n                }\n\n                Array.prototype.slice.call(document.querySelectorAll('select')).forEach(function(select) {\n                    info += '\\n' + (select.id || select.className) + ': ' + select.value;\n                });\n\n                if (btnStartRecording.recordRTC) {\n                    info += '\\n\\ninternal-recorder: ' + btnStartRecording.recordRTC.getInternalRecorder().name;\n                    \n                    if(btnStartRecording.recordRTC.getInternalRecorder().getAllStates) {\n                        info += '\\n\\nrecorder-states: ' + btnStartRecording.recordRTC.getInternalRecorder().getAllStates();\n                    }\n                }\n\n                if(btnStartRecording.stream) {\n                    info += '\\n\\naudio-tracks: ' + getTracks(btnStartRecording.stream, 'audio').length;\n                    info += '\\nvideo-tracks: ' + getTracks(btnStartRecording.stream, 'video').length;\n                    info += '\\nstream-active? ' + !!btnStartRecording.stream.active;\n\n                    btnStartRecording.stream.getTracks().forEach(function(track) {\n                        info += '\\n' + track.kind + '-track-' + (track.label || track.id) + ': (enabled: ' + !!track.enabled + ', readyState: ' + track.readyState + ', muted: ' + !!track.muted + ')';\n\n                        if(track.getConstraints && Object.keys(track.getConstraints()).length) {\n                            info += '\\n' + track.kind + '-track-getConstraints: ' + stringify(track.getConstraints());\n                        }\n\n                        if(track.getSettings && Object.keys(track.getSettings()).length) {\n                            info += '\\n' + track.kind + '-track-getSettings: ' + stringify(track.getSettings());\n                        }\n                    });\n                }\n\n                if(timeSlice && btnStartRecording.recordRTC) {\n                    info += '\\ntimeSlice: ' + timeSlice;\n\n                    if(btnStartRecording.recordRTC.getInternalRecorder().getArrayOfBlobs) {\n                        var blobSizes = [];\n                        btnStartRecording.recordRTC.getInternalRecorder().getArrayOfBlobs().forEach(function(blob) {\n                            blobSizes.push(blob.size);\n                        });\n                        info += '\\nblobSizes: ' + blobSizes;\n                    }\n                }\n\n                else if(btnStartRecording.recordRTC && btnStartRecording.recordRTC.getBlob()) {\n                    info += '\\n\\nblobSize: ' + bytesToSize(btnStartRecording.recordRTC.getBlob().size);\n                }\n\n                if(btnStartRecording.recordRTC && btnStartRecording.recordRTC.getInternalRecorder() && btnStartRecording.recordRTC.getInternalRecorder().getInternalRecorder && btnStartRecording.recordRTC.getInternalRecorder().getInternalRecorder()) {\n                    info += '\\n\\ngetInternalRecorder: ' + mediaRecorderToStringify(btnStartRecording.recordRTC.getInternalRecorder().getInternalRecorder());\n                }\n\n                return info;\n            }\n\n            function saveToDiskOrOpenNewTab(recordRTC) {\n                if(!recordRTC.getBlob().size) {\n                    var info = getFailureReport();\n                    console.log('blob', recordRTC.getBlob());\n                    console.log('recordrtc instance', recordRTC);\n                    console.log('report', info);\n\n                    if(mediaContainerFormat.value !== 'default') {\n                        alert('RecordRTC seems failed recording using ' + mediaContainerFormat.value + '. Please choose \"default\" option from the drop down and record again.');\n                    }\n                    else {\n                        alert('RecordRTC seems failed. Unexpected issue. You can read the email in your console log. \\n\\nPlease report using disqus chat below.');\n                    }\n\n                    if(mediaContainerFormat.value !== 'vp9' && DetectRTC.browser.name === 'Chrome') {\n                        alert('Please record using VP9 encoder. (select from the dropdown)');\n                    }\n                }\n\n                var fileName = getFileName(fileExtension);\n\n                document.querySelector('#save-to-disk').parentNode.style.display = 'block';\n                document.querySelector('#save-to-disk').onclick = function() {\n                    if(!recordRTC) return alert('No recording found.');\n\n                    var file = new File([recordRTC.getBlob()], fileName, {\n                        type: mimeType\n                    });\n\n                    invokeSaveAsDialog(file, file.name);\n                };\n\n                document.querySelector('#open-new-tab').onclick = function() {\n                    if(!recordRTC) return alert('No recording found.');\n\n                    var file = new File([recordRTC.getBlob()], fileName, {\n                        type: mimeType\n                    });\n\n                    window.open(URL.createObjectURL(file));\n                };\n\n                // upload to PHP server\n                if(isMyOwnDomain()) {\n                    document.querySelector('#upload-to-php').disabled = true;\n                    document.querySelector('#upload-to-php').style.display = 'none';\n                }\n                else {\n                    document.querySelector('#upload-to-php').disabled = false;\n                }\n                \n                document.querySelector('#upload-to-php').onclick = function() {\n                    if(isMyOwnDomain()) {\n                        alert('PHP Upload is not available on this domain.');\n                        return;\n                    }\n\n                    if(!recordRTC) return alert('No recording found.');\n                    this.disabled = true;\n\n                    var button = this;\n                    uploadToPHPServer(fileName, recordRTC, function(progress, fileURL) {\n                        if(progress === 'ended') {\n                            button.disabled = false;\n                            button.innerHTML = 'Click to download from server';\n                            button.onclick = function() {\n                                SaveFileURLToDisk(fileURL, fileName);\n                            };\n\n                            setVideoURL(fileURL);\n\n                            var html = 'Uploaded to PHP.<br>Download using below link:<br>';\n                            html += '<a href=\"'+fileURL+'\" download=\"'+fileName+'\" style=\"color: yellow; display: block; margin-top: 15px;\">'+fileName+'</a>';\n                            recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = html;\n                            return;\n                        }\n                        button.innerHTML = progress;\n                        recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = progress;\n                    });\n                };\n\n                // upload to YouTube!\n                document.querySelector('#upload-to-youtube').disabled = false;\n                document.querySelector('#upload-to-youtube').onclick = function() {\n                    if(!recordRTC) return alert('No recording found.');\n                    this.disabled = true;\n\n                    if(isLocalHost()) {\n                        alert('This feature is NOT available on localhost.');\n                        return;\n                    }\n\n                    if(isMyOwnDomain() === false) {\n                        var url = 'https://github.com/muaz-khan/RecordRTC/wiki/Upload-to-YouTube';\n                        alert('YouTube API key is configured to work only on webrtc-experiment.com. Please create your own YouTube key + oAuth client-id and use it instead.\\n\\nWiki page: ' + url);\n\n                        // check instructions on the wiki page\n                        location.href = url;\n                        return;\n                    }\n\n                    var button = this;\n                    uploadToYouTube(fileName, recordRTC, function(percentageComplete, fileURL) {\n                        if(percentageComplete == 'uploaded') {\n                            button.disabled = false;\n                            button.innerHTML = 'Uploaded. However YouTube is still processing.';\n                            button.onclick = function() {\n                                window.open(fileURL);\n                            };\n                            return;\n                        }\n                        if(percentageComplete == 'processed') {\n                            button.disabled = false;\n                            button.innerHTML = 'Uploaded & Processed. Click to open YouTube video.';\n                            button.onclick = function() {\n                                window.open(fileURL);\n                            };\n\n                            document.querySelector('h1').innerHTML = 'Your video has been uploaded.';\n                            window.scrollTo(0, 0);\n\n                            alert('Your video has been uploaded.');\n                            return;\n                        }\n                        if(percentageComplete == 'failed') {\n                            button.disabled = false;\n                            button.innerHTML = 'YouTube failed transcoding the video.';\n                            button.onclick = function() {\n                                window.open(fileURL);\n                            };\n                            return;\n                        }\n                        button.innerHTML = percentageComplete + '% uploaded to YouTube.';\n                    });\n                };\n            }\n\n            function uploadToPHPServer(fileName, recordRTC, callback) {\n                var blob = recordRTC instanceof Blob ? recordRTC : recordRTC.getBlob();\n                \n                blob = new File([blob], getFileName(fileExtension), {\n                    type: mimeType\n                });\n\n                // create FormData\n                var formData = new FormData();\n                formData.append('video-filename', fileName);\n                formData.append('video-blob', blob);\n\n                callback('Uploading recorded-file to server.');\n\n                // var upload_url = 'https://your-domain.com/files-uploader/';\n                var upload_url = 'RecordRTC-to-PHP/save.php';\n\n                // var upload_directory = upload_url;\n                var upload_directory = 'RecordRTC-to-PHP/uploads/';\n\n                makeXMLHttpRequest(upload_url, formData, function(progress) {\n                    if (progress !== 'upload-ended') {\n                        callback(progress);\n                        return;\n                    }\n\n                    callback('ended', upload_directory + fileName);\n                });\n            }\n\n            function makeXMLHttpRequest(url, data, callback) {\n                var request = new XMLHttpRequest();\n                request.onreadystatechange = function() {\n                    if (request.readyState == 4 && request.status == 200) {\n                        if(request.responseText === 'success') {\n                            callback('upload-ended');\n                            return;\n                        }\n\n                        document.querySelector('.header').parentNode.style = 'text-align: left; color: red; padding: 5px 10px;';\n                        document.querySelector('.header').parentNode.innerHTML = request.responseText;\n                    }\n                };\n\n                request.upload.onloadstart = function() {\n                    callback('Upload started...');\n                };\n\n                request.upload.onprogress = function(event) {\n                    callback('Upload Progress ' + Math.round(event.loaded / event.total * 100) + \"%\");\n                };\n\n                request.upload.onload = function() {\n                    callback('progress-about-to-end');\n                };\n\n                request.upload.onload = function() {\n                    callback('Getting File URL..');\n                };\n\n                request.upload.onerror = function(error) {\n                    callback('Failed to upload to server');\n                };\n\n                request.upload.onabort = function(error) {\n                    callback('Upload aborted.');\n                };\n\n                request.open('POST', url);\n                request.send(data);\n            }\n\n            function getRandomString() {\n                if (window.crypto && window.crypto.getRandomValues && navigator.userAgent.indexOf('Safari') === -1) {\n                    var a = window.crypto.getRandomValues(new Uint32Array(3)),\n                        token = '';\n                    for (var i = 0, l = a.length; i < l; i++) {\n                        token += a[i].toString(36);\n                    }\n                    return token;\n                } else {\n                    return (Math.random() * new Date().getTime()).toString(36).replace(/\\./g, '');\n                }\n            }\n\n            function getFileName(fileExtension) {\n                var d = new Date();\n                var year = d.getUTCFullYear();\n                var month = d.getUTCMonth();\n                var date = d.getUTCDate();\n                return 'RecordRTC-' + year + month + date + '-' + getRandomString() + '.' + fileExtension;\n            }\n\n            function SaveFileURLToDisk(fileUrl, fileName) {\n                var hyperlink = document.createElement('a');\n                hyperlink.href = fileUrl;\n                hyperlink.target = '_blank';\n                hyperlink.download = fileName || fileUrl;\n\n                (document.body || document.documentElement).appendChild(hyperlink);\n                hyperlink.onclick = function() {\n                   (document.body || document.documentElement).removeChild(hyperlink);\n\n                   // required for Firefox\n                   window.URL.revokeObjectURL(hyperlink.href);\n                };\n\n                var mouseEvent = new MouseEvent('click', {\n                    view: window,\n                    bubbles: true,\n                    cancelable: true\n                });\n\n                hyperlink.dispatchEvent(mouseEvent);\n            }\n\n            function getURL(arg) {\n                var url = arg;\n\n                if(arg instanceof Blob || arg instanceof File) {\n                    url = URL.createObjectURL(arg);\n                }\n\n                if(arg instanceof RecordRTC || arg.getBlob) {\n                    url = URL.createObjectURL(arg.getBlob());\n                }\n\n                if(arg instanceof MediaStream || arg.getTracks) {\n                    // url = URL.createObjectURL(arg);\n                }\n\n                return url;\n            }\n\n            function setVideoURL(arg, forceNonImage) {\n                var url = getURL(arg);\n\n                var parentNode = recordingPlayer.parentNode;\n                parentNode.removeChild(recordingPlayer);\n                parentNode.innerHTML = '';\n\n                var elem = 'video';\n                if(type == 'gif' && !forceNonImage) {\n                    elem = 'img';\n                }\n                if(type == 'audio') {\n                    elem = 'audio';\n                }\n\n                recordingPlayer = document.createElement(elem);\n                \n                if(arg instanceof MediaStream) {\n                    recordingPlayer.muted = true;\n                }\n\n                recordingPlayer.addEventListener('loadedmetadata', function() {\n                    if(navigator.userAgent.toLowerCase().indexOf('android') == -1) return;\n\n                    // android\n                    setTimeout(function() {\n                        if(typeof recordingPlayer.play === 'function') {\n                            recordingPlayer.play();\n                        }\n                    }, 2000);\n                }, false);\n\n                recordingPlayer.poster = '';\n\n                if(arg instanceof MediaStream) {\n                    recordingPlayer.srcObject = arg;\n                }\n                else {\n                    recordingPlayer.src = url;\n                }\n\n                if(typeof recordingPlayer.play === 'function') {\n                    recordingPlayer.play();\n                }\n\n                recordingPlayer.addEventListener('ended', function() {\n                    url = getURL(arg);\n                    \n                    if(arg instanceof MediaStream) {\n                        recordingPlayer.srcObject = arg;\n                    }\n                    else {\n                        recordingPlayer.src = url;\n                    }\n                });\n\n                parentNode.appendChild(recordingPlayer);\n            }\n        </script>\n\n        <script>\n            function captureScreen(config) {\n                if (navigator.getDisplayMedia) {\n                    navigator.getDisplayMedia({\n                        video: true\n                    }).then(screenStream => {\n                        config.onMediaCaptured(screenStream);\n\n                        addStreamStopListener(screenStream, function() {\n                            // config.onMediaStopped();\n\n                            btnStartRecording.onclick();\n                        });\n\n                        setVideoURL(screenStream, true);\n                    }).catch(function(error) {\n                        config.onMediaCapturingFailed(error);\n                    });\n                } else if (navigator.mediaDevices.getDisplayMedia) {\n                    navigator.mediaDevices.getDisplayMedia({\n                        video: true\n                    }).then(screenStream => {\n                        config.onMediaCaptured(screenStream);\n\n                        addStreamStopListener(screenStream, function() {\n                            // config.onMediaStopped();\n\n                            btnStartRecording.onclick();\n                        });\n\n                        setVideoURL(screenStream, true);\n                    }).catch(function(error) {\n                        config.onMediaCapturingFailed(error);\n                    });\n                } else {\n                    var error = 'getDisplayMedia API are not supported in this browser.';\n                    config.onMediaCapturingFailed(error);\n                    alert(error);\n                }\n            }\n\n            function captureAudioPlusScreen(config) {\n                if (navigator.getDisplayMedia) {\n                    navigator.getDisplayMedia({\n                        video: true\n                    }).then(screenStream => {\n                        navigator.mediaDevices.getUserMedia({audio:true}).then(function(mic) {\n                            screenStream.addTrack(mic.getTracks()[0]);\n\n                            config.onMediaCaptured(screenStream);\n\n                            addStreamStopListener(screenStream, function() {\n                                // config.onMediaStopped();\n\n                                btnStartRecording.onclick();\n                            });\n\n                            setVideoURL(screenStream, true);\n                        });\n                    }).catch(function(error) {\n                        config.onMediaCapturingFailed(error);\n                    });\n                } else if (navigator.mediaDevices.getDisplayMedia) {\n                    navigator.mediaDevices.getDisplayMedia({\n                        video: true\n                    }).then(screenStream => {\n                        navigator.mediaDevices.getUserMedia({audio:true}).then(function(mic) {\n                            screenStream.addTrack(mic.getTracks()[0]);\n\n                            config.onMediaCaptured(screenStream);\n\n                            addStreamStopListener(screenStream, function() {\n                                // config.onMediaStopped();\n\n                                btnStartRecording.onclick();\n                            });\n\n                            setVideoURL(screenStream, true);\n                        });\n                    }).catch(function(error) {\n                        config.onMediaCapturingFailed(error);\n                    });\n                } else {\n                    var error = 'getDisplayMedia API are not supported in this browser.';\n                    config.onMediaCapturingFailed(error);\n                    alert(error);\n                }\n            }\n        </script>\n\n        <script>\n            /* upload_youtube_video.js Copyright 2017 Google Inc. All Rights Reserved. */\n\n            function uploadToYouTube(fileName, recordRTC, callback) {\n                var blob = recordRTC instanceof Blob ? recordRTC : recordRTC.getBlob();\n                \n                blob = new File([blob], getFileName(fileExtension), {\n                    type: mimeType\n                });\n\n                if(!uploadVideo) {\n                    alert('YouTube API are not available.');\n                    return;\n                }\n\n                uploadVideo.callback = callback;\n                uploadVideo.uploadFile(fileName, blob);\n            }\n\n            var uploadVideo;\n\n            var signinCallback = function (result){\n              if(result.access_token) {\n                uploadVideo = new UploadVideo();\n                uploadVideo.ready(result.access_token);\n\n                document.querySelector('#signinButton').style.display = 'none';\n              }\n              else {\n                // console.error('YouTube error', result);\n                // document.querySelector('#upload-to-youtube').style.display = 'none';\n              }\n            };\n\n            var STATUS_POLLING_INTERVAL_MILLIS = 60 * 1000; // One minute.\n\n            var UploadVideo = function() {\n              this.tags = ['recordrtc'];\n              this.categoryId = 28; // via: http://stackoverflow.com/a/35877512/552182\n              this.videoId = '';\n              this.uploadStartTime = 0;\n            };\n\n\n            UploadVideo.prototype.ready = function(accessToken) {\n              this.accessToken = accessToken;\n              this.gapi = gapi;\n              this.authenticated = true;\n              false && this.gapi.client.request({\n                path: '/youtube/v3/channels',\n                params: {\n                  part: 'snippet',\n                  mine: true\n                },\n                callback: function(response) {\n                  if (!response.error) {\n                    // response.items[0].snippet.title -- channel title\n                    // response.items[0].snippet.thumbnails.default.url -- channel thumbnail\n                  }\n                }.bind(this)\n              });\n            };\n\n            UploadVideo.prototype.uploadFile = function(fileName, file) {\n              var metadata = {\n                snippet: {\n                  title: fileName,\n                  description: fileName,\n                  tags: this.tags,\n                  categoryId: this.categoryId\n                },\n                status: {\n                  privacyStatus: 'public'\n                }\n              };\n              var uploader = new MediaUploader({\n                baseUrl: 'https://www.googleapis.com/upload/youtube/v3/videos',\n                file: file,\n                token: this.accessToken,\n                metadata: metadata,\n                params: {\n                  part: Object.keys(metadata).join(',')\n                },\n                onError: function(data) {\n                  var message = data;\n                  try {\n                    var errorResponse = JSON.parse(data);\n                    message = errorResponse.error.message;\n                  } finally {\n                    alert(message);\n                  }\n                }.bind(this),\n                onProgress: function(data) {\n                  var bytesUploaded = data.loaded;\n                  var totalBytes = parseInt(data.total);\n                  var percentageComplete = parseInt((bytesUploaded * 100) / totalBytes);\n\n                  uploadVideo.callback(percentageComplete);\n                }.bind(this),\n                onComplete: function(data) {\n                  var uploadResponse = JSON.parse(data);\n                  this.videoId = uploadResponse.id;\n                  this.videoURL = 'https://www.youtube.com/watch?v=' + this.videoId;\n                  uploadVideo.callback('uploaded', this.videoURL);\n\n                  setTimeout(this.pollForVideoStatus, 2000);\n                }.bind(this)\n              });\n              this.uploadStartTime = Date.now();\n              uploader.upload();\n            };\n\n            UploadVideo.prototype.pollForVideoStatus = function() {\n              this.gapi.client.request({\n                path: '/youtube/v3/videos',\n                params: {\n                  part: 'status,player',\n                  id: this.videoId\n                },\n                callback: function(response) {\n                  if (response.error) {\n                    uploadVideo.pollForVideoStatus();\n                  } else {\n                    var uploadStatus = response.items[0].status.uploadStatus;\n                    switch (uploadStatus) {\n                      case 'uploaded':\n                        uploadVideo.callback('uploaded', uploadVideo.videoURL);\n                        uploadVideo.pollForVideoStatus();\n                        break;\n                        case 'processed':\n                        uploadVideo.callback('processed', uploadVideo.videoURL);\n                        break;\n                        default:\n                        uploadVideo.callback('failed', uploadVideo.videoURL);\n                        break;\n                    }\n                  }\n                }.bind(this)\n              });\n            };\n\n        </script>\n\n        <script>\n            /* cors_upload.js Copyright 2015 Google Inc. All Rights Reserved. */\n\n            var DRIVE_UPLOAD_URL = 'https://www.googleapis.com/upload/drive/v2/files/';\n\n            var RetryHandler = function() {\n              this.interval = 1000; // Start at one second\n              this.maxInterval = 60 * 1000; // Don't wait longer than a minute \n            };\n\n            RetryHandler.prototype.retry = function(fn) {\n              setTimeout(fn, this.interval);\n              this.interval = this.nextInterval_();\n            };\n\n            RetryHandler.prototype.reset = function() {\n              this.interval = 1000;\n            };\n\n            RetryHandler.prototype.nextInterval_ = function() {\n              var interval = this.interval * 2 + this.getRandomInt_(0, 1000);\n              return Math.min(interval, this.maxInterval);\n            };\n\n            RetryHandler.prototype.getRandomInt_ = function(min, max) {\n              return Math.floor(Math.random() * (max - min + 1) + min);\n            };\n\n            var MediaUploader = function(options) {\n              var noop = function() {};\n              this.file = options.file;\n              this.contentType = options.contentType || this.file.type || 'application/octet-stream';\n              this.metadata = options.metadata || {\n                'title': this.file.name,\n                'mimeType': this.contentType\n              };\n              this.token = options.token;\n              this.onComplete = options.onComplete || noop;\n              this.onProgress = options.onProgress || noop;\n              this.onError = options.onError || noop;\n              this.offset = options.offset || 0;\n              this.chunkSize = options.chunkSize || 0;\n              this.retryHandler = new RetryHandler();\n\n              this.url = options.url;\n              if (!this.url) {\n                var params = options.params || {};\n                params.uploadType = 'resumable';\n                this.url = this.buildUrl_(options.fileId, params, options.baseUrl);\n              }\n              this.httpMethod = options.fileId ? 'PUT' : 'POST';\n            };\n\n            MediaUploader.prototype.upload = function() {\n              var self = this;\n              var xhr = new XMLHttpRequest();\n\n              xhr.open(this.httpMethod, this.url, true);\n              xhr.setRequestHeader('Authorization', 'Bearer ' + this.token);\n              xhr.setRequestHeader('Content-Type', 'application/json');\n              xhr.setRequestHeader('X-Upload-Content-Length', this.file.size);\n              xhr.setRequestHeader('X-Upload-Content-Type', this.contentType);\n\n              xhr.onload = function(e) {\n                if (e.target.status < 400) {\n                  var location = e.target.getResponseHeader('Location');\n                  this.url = location;\n                  this.sendFile_();\n                } else {\n                  this.onUploadError_(e);\n                }\n              }.bind(this);\n              xhr.onerror = this.onUploadError_.bind(this);\n              xhr.send(JSON.stringify(this.metadata));\n            };\n\n            MediaUploader.prototype.sendFile_ = function() {\n              var content = this.file;\n              var end = this.file.size;\n\n              if (this.offset || this.chunkSize) {\n                // Only bother to slice the file if we're either resuming or uploading in chunks\n                if (this.chunkSize) {\n                  end = Math.min(this.offset + this.chunkSize, this.file.size);\n                }\n                content = content.slice(this.offset, end);\n              }\n\n              var xhr = new XMLHttpRequest();\n              xhr.open('PUT', this.url, true);\n              xhr.setRequestHeader('Content-Type', this.contentType);\n              xhr.setRequestHeader('Content-Range', 'bytes ' + this.offset + '-' + (end - 1) + '/' + this.file.size);\n              xhr.setRequestHeader('X-Upload-Content-Type', this.file.type);\n              if (xhr.upload) {\n                xhr.upload.addEventListener('progress', this.onProgress);\n              }\n              xhr.onload = this.onContentUploadSuccess_.bind(this);\n              xhr.onerror = this.onContentUploadError_.bind(this);\n              xhr.send(content);\n            };\n\n            MediaUploader.prototype.resume_ = function() {\n              var xhr = new XMLHttpRequest();\n              xhr.open('PUT', this.url, true);\n              xhr.setRequestHeader('Content-Range', 'bytes */' + this.file.size);\n              xhr.setRequestHeader('X-Upload-Content-Type', this.file.type);\n              if (xhr.upload) {\n                xhr.upload.addEventListener('progress', this.onProgress);\n              }\n              xhr.onload = this.onContentUploadSuccess_.bind(this);\n              xhr.onerror = this.onContentUploadError_.bind(this);\n              xhr.send();\n            };\n\n            MediaUploader.prototype.extractRange_ = function(xhr) {\n              var range = xhr.getResponseHeader('Range');\n              if (range) {\n                this.offset = parseInt(range.match(/\\d+/g).pop(), 10) + 1;\n              }\n            };\n\n            MediaUploader.prototype.onContentUploadSuccess_ = function(e) {\n              if (e.target.status == 200 || e.target.status == 201) {\n                this.onComplete(e.target.response);\n              } else if (e.target.status == 308) {\n                this.extractRange_(e.target);\n                this.retryHandler.reset();\n                this.sendFile_();\n              }\n            };\n\n            MediaUploader.prototype.onContentUploadError_ = function(e) {\n              if (e.target.status && e.target.status < 500) {\n                this.onError(e.target.response);\n              } else {\n                this.retryHandler.retry(this.resume_.bind(this));\n              }\n            };\n\n            MediaUploader.prototype.onUploadError_ = function(e) {\n              this.onError(e.target.response); // TODO - Retries for initial upload\n            };\n\n            MediaUploader.prototype.buildQuery_ = function(params) {\n              params = params || {};\n              return Object.keys(params).map(function(key) {\n                return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n              }).join('&');\n            };\n\n            MediaUploader.prototype.buildUrl_ = function(id, params, baseUrl) {\n              var url = baseUrl || DRIVE_UPLOAD_URL;\n              if (id) {\n                url += id;\n              }\n              var query = this.buildQuery_(params);\n              if (query) {\n                url += '?' + query;\n              }\n              return url;\n            };\n        </script>\n\n        <script>\n            var chkFixSeeking = document.querySelector('#chk-fixSeeking');\n            chkFixSeeking.onchange = function() {\n                if(this.checked === true) {\n                    localStorage.setItem(this.id, 'true');\n                }\n                else {\n                    localStorage.removeItem(this.id);\n                }\n            };\n            if(localStorage.getItem(chkFixSeeking.id) === 'true') {\n                chkFixSeeking.checked = true;\n            }\n        </script>\n\n        <script>\n            var chkTimeSlice = document.querySelector('#chk-timeSlice');\n            var timeSlice = false;\n\n            if(typeof MediaRecorder === 'undefined') {\n                chkTimeSlice.disabled = true;\n            }\n\n            chkTimeSlice.addEventListener('change', function() {\n                if(chkTimeSlice.checked === true) {\n                    var _timeSlice = prompt('Please enter timeSlice in milliseconds e.g. 1000 or 2000 or 3000.', 1000);\n                    _timeSlice = parseInt(_timeSlice);\n                    if(!_timeSlice || _timeSlice == NaN || typeof _timeSlice === 'undefined') {\n                        timeSlice = false;\n                        return;\n                    }\n\n                    timeSlice = _timeSlice;\n                }\n                else {\n                    timeSlice = false;\n                }\n            }, false);\n        </script>\n\n        <script>\n            var btnPauseRecording = document.querySelector('#btn-pause-recording');\n            btnPauseRecording.onclick = function() {\n                if(!btnStartRecording.recordRTC) {\n                    btnPauseRecording.style.display = 'none';\n                    return;\n                }\n\n                btnPauseRecording.disabled = true;\n                if(btnPauseRecording.innerHTML === 'Pause') {\n                    btnStartRecording.disabled = true;\n                    chkFixSeeking.parentNode.style.display = 'none';\n                    btnStartRecording.style.fontSize = '15px';\n                    btnStartRecording.recordRTC.pauseRecording();\n                    recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = 'Recording status: paused';\n                    recordingPlayer.pause();\n\n                    btnPauseRecording.style.fontSize = 'inherit';\n                    setTimeout(function() {\n                        btnPauseRecording.innerHTML = 'Resume Recording';\n                        btnPauseRecording.disabled = false;\n                    }, 2000);\n                }\n\n                if(btnPauseRecording.innerHTML === 'Resume Recording') {\n                    btnStartRecording.disabled = false;\n                    chkFixSeeking.parentNode.style.display = 'none';\n                    btnStartRecording.style.fontSize = 'inherit';\n                    btnStartRecording.recordRTC.resumeRecording();\n                    recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = '<img src=\"https://www.webrtc-experiment.com/images/progress.gif\">';\n                    recordingPlayer.play();\n\n                    btnPauseRecording.style.fontSize = '15px';\n                    btnPauseRecording.innerHTML = 'Pause';\n                    setTimeout(function() {\n                        btnPauseRecording.disabled = false;\n                    }, 2000);\n                }\n            };\n        </script>\n\n        <section class=\"experiment\" style=\"padding: 10px 20px; text-align: center;\">\n            <a href=\"https://chrome.google.com/webstore/detail/recordrtc/ndcljioonkecdnaaihodjgiliohngojp\" target=\"_blank\">\n                <img alt=\"RecordRTC\" src=\"https://www.webrtc-experiment.com/images/recordrtc-icon.png\" style=\"width: 20px;vertical-align: middle;margin-right: 3px;\">\n                RecordRTC Google Chrome Extension\n            </a>\n            <br>\n            You can <a href=\"https://github.com/muaz-khan/Chrome-Extensions/tree/master/screen-recording#call-from-your-own-website\">call and use</a> this extension from any website!\n        </section>\n\n        <section class=\"experiment\">\n            <div id=\"github-issues\"></div>\n        </section>\n\n        <section class=\"experiment\">\n            <div id=\"github-commits\"></div>\n        </section>\n\n        <section class=\"experiment\"><small id=\"send-message\"></small></section>\n\n        <section class=\"experiment\">\n            <p style=\"margin-top: 6px; text-align: center;\">\n                <a href=\"https://github.com/muaz-khan/RecordRTC\">RecordRTC is Open-Sourced (MIT licensed) on Github!</a>\n            </p>\n        </section>\n    </article>\n\n    <footer>\n        <p>\n            <a href=\"https://www.webrtc-experiment.com/\">WebRTC Experiments</a> |\n            <a href=\"http://www.muazkhan.com/\">Muaz Khan</a> |\n            <a href=\"https://twitter.com/WebRTCWeb\">@WebRTCWeb</a> |\n            <a href=\"https://twitter.com/muazkh\">@muazkh</a>\n        </p>\n    </footer>\n\n    <!-- commits.js is useless for you! -->\n    <script>\n        window.useThisGithubPath = 'muaz-khan/RecordRTC';\n    </script>\n    <script src=\"https://www.webrtc-experiment.com/commits.js\" async></script>\n    <script src=\"https://apis.google.com/js/client:plusone.js\"></script>\n</body>\n\n</html>\n"
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "npm-test.js",
          "type": "blob",
          "size": 0.345703125,
          "content": "// https://tonicdev.com/npm/recordrtc\n\nvar RecordRTC;\n\ntry {\n    RecordRTC = require('recordrtc');\n}\ncatch(e) {\n    RecordRTC = require('./RecordRTC.js');\n}\n\nconsole.log('RecordRTC => ', Object.keys(RecordRTC));\n\nvar recorder = RecordRTC({}, {\n    type: 'video',\n    recorderType: RecordRTC.WhammyRecorder\n});\n\nrecorder.startRecording();\n\nprocess.exit()\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.5888671875,
          "content": "{\n  \"name\": \"recordrtc\",\n  \"preferGlobal\": false,\n  \"version\": \"5.6.3\",\n  \"author\": {\n    \"name\": \"Muaz Khan\",\n    \"email\": \"muazkh@gmail.com\",\n    \"url\": \"https://muazkhan.com/\"\n  },\n  \"description\": \"RecordRTC is a server-less (entire client-side) JavaScript library that can be used to record WebRTC audio/video media streams. It supports cross-browser audio/video recording.\",\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"test\": \"./node_modules/.bin/protractor test/browserstack.config.js\"\n  },\n  \"main\": \"RecordRTC.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/muaz-khan/RecordRTC.git\"\n  },\n  \"keywords\": [\n    \"webrtc\",\n    \"recordrtc\",\n    \"audio-recording\",\n    \"video-recording\",\n    \"gif-recording\",\n    \"audio/video recording\"\n  ],\n  \"analyze\": false,\n  \"license\": \"MIT\",\n  \"readmeFilename\": \"README.md\",\n  \"bugs\": {\n    \"url\": \"https://github.com/muaz-khan/RecordRTC/issues\",\n    \"email\": \"muazkh@gmail.com\"\n  },\n  \"homepage\": \"http://RecordRTC.org/\",\n  \"tonicExampleFilename\": \"npm-test.js\",\n  \"_id\": \"recordrtc@\",\n  \"_from\": \"recordrtc@\",\n  \"devDependencies\": {\n    \"grunt\": \"0.4.5\",\n    \"grunt-bump\": \"0.7.0\",\n    \"grunt-cli\": \"0.1.13\",\n    \"grunt-contrib-clean\": \"0.6.0\",\n    \"grunt-contrib-concat\": \"0.5.1\",\n    \"grunt-contrib-copy\": \"0.8.2\",\n    \"grunt-contrib-jshint\": \"0.11.3\",\n    \"grunt-contrib-uglify\": \"0.11.0\",\n    \"grunt-contrib-watch\": \"1.1.0\",\n    \"grunt-jsbeautifier\": \"0.2.10\",\n    \"grunt-replace\": \"0.11.0\",\n    \"load-grunt-tasks\": \"3.4.0\",\n    \"terser-webpack-plugin\": \"^4.1.0\",\n    \"webpack\": \"^4.44.1\",\n    \"webpack-cli\": \"^3.3.12\"\n  },\n  \"dependencies\": {}\n}\n"
        },
        {
          "name": "server.js",
          "type": "blob",
          "size": 2,
          "content": "// http://127.0.0.1:9001\n// http://localhost:9001\n\nvar server = require('http'),\n    url = require('url'),\n    path = require('path'),\n    fs = require('fs');\n\nfunction serverHandler(request, response) {\n    var uri = url.parse(request.url).pathname,\n        filename = path.join(process.cwd(), uri);\n\n    fs.exists(filename, function(exists) {\n        if (!exists) {\n            response.writeHead(404, {\n                'Content-Type': 'text/plain'\n            });\n            response.write('404 Not Found: ' + filename + '\\n');\n            response.end();\n            return;\n        }\n\n        if (filename.indexOf('favicon.ico') !== -1) {\n            return;\n        }\n\n        var isWin = !!process.platform.match(/^win/);\n\n        if (fs.statSync(filename).isDirectory() && !isWin) {\n            filename += '/index.html';\n        } else if (fs.statSync(filename).isDirectory() && !!isWin) {\n            filename += '\\\\index.html';\n        }\n\n        fs.readFile(filename, 'binary', function(err, file) {\n            if (err) {\n                response.writeHead(500, {\n                    'Content-Type': 'text/plain'\n                });\n                response.write(err + '\\n');\n                response.end();\n                return;\n            }\n\n            var contentType;\n\n            if (filename.indexOf('.html') !== -1) {\n                contentType = 'text/html';\n            }\n\n            if (filename.indexOf('.js') !== -1) {\n                contentType = 'application/javascript';\n            }\n\n            if (contentType) {\n                response.writeHead(200, {\n                    'Content-Type': contentType\n                });\n            } else response.writeHead(200);\n\n            response.write(file, 'binary');\n            response.end();\n        });\n    });\n}\n\nvar app;\n\napp = server.createServer(serverHandler);\n\napp = app.listen(process.env.PORT || 9001, process.env.IP || \"0.0.0.0\", function() {\n    var addr = app.address();\n    console.log(\"Server listening at\", addr.address + \":\" + addr.port);\n});\n"
        },
        {
          "name": "simple-demos",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "webpack.config.js",
          "type": "blob",
          "size": 0.560546875,
          "content": "const webpack = require('webpack');\nconst path = require('path');\nconst TerserPlugin = require('terser-webpack-plugin');\n\nmodule.exports = {\n\tentry: {\n\t\t'RecordRTC': './RecordRTC.js',\n\t\t'RecordRTC.min': './RecordRTC.js'\n\t},\n\tmode: 'production',\n\toutput: {\n\t\tpath: path.resolve(__dirname, './dist'),\n\t\tfilename: '[name].js',\n\t\tlibrary: 'RecordRTC',\n\t\tlibraryTarget: 'umd',\n\t\tumdNamedDefine: true\n\t},\n\toptimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n\t\t\t\ttest: /\\.min\\.js$/,\n\t\t\t\textractComments: false,\n\t\t\t\tsourceMap: true\n      }),\n    ],\n  },\n}\n"
        }
      ]
    }
  ]
}