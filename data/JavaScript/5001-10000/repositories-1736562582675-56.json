{
  "metadata": {
    "timestamp": 1736562582675,
    "page": 56,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "klaudiosinani/taskbook",
      "stars": 9001,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2353515625,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.{json,yml}]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0283203125,
          "content": "* text=auto\n*.js text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1455078125,
          "content": "# dependencies\nnode_modules\nyarn.lock\n\n# logs\n*.log\n\n# OS\n.DS_Store\n\n# IDE\n.vscode\n.idea\n*.swp\n*.swo\n\n# snap\nprime\nsnapcraft\nparts\nstage\nsnap\n*.snap\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1123046875,
          "content": "language: node_js\nnode_js:\n  - 10\n  - 8\n  - 6\nbefore_install:\n  - npm install --global npm@6.4.0\n  - npm --version\n"
        },
        {
          "name": "cli.js",
          "type": "blob",
          "size": 1.3642578125,
          "content": "#!/usr/bin/env node\n'use strict';\nconst meow = require('meow');\nconst updateNotifier = require('update-notifier');\nconst help = require('./src/help');\nconst pkg = require('./package.json');\nconst taskbook = require('.');\n\nconst cli = meow(help, {\n  flags: {\n    help: {\n      type: 'boolean',\n      alias: 'h'\n    },\n    version: {\n      type: 'boolean',\n      alias: 'v'\n    },\n    archive: {\n      type: 'boolean',\n      alias: 'a'\n    },\n    restore: {\n      type: 'boolean',\n      alias: 'r'\n    },\n    task: {\n      type: 'boolean',\n      alias: 't'\n    },\n    note: {\n      type: 'boolean',\n      alias: 'n'\n    },\n    delete: {\n      type: 'boolean',\n      alias: 'd'\n    },\n    check: {\n      type: 'boolean',\n      alias: 'c'\n    },\n    begin: {\n      type: 'boolean',\n      alias: 'b'\n    },\n    star: {\n      type: 'boolean',\n      alias: 's'\n    },\n    copy: {\n      type: 'boolean',\n      alias: 'y'\n    },\n    timeline: {\n      type: 'boolean',\n      alias: 'i'\n    },\n    priority: {\n      type: 'boolean',\n      alias: 'p'\n    },\n    find: {\n      type: 'boolean',\n      alias: 'f'\n    },\n    list: {\n      type: 'boolean',\n      alias: 'l'\n    },\n    edit: {\n      type: 'boolean',\n      alias: 'e'\n    },\n    move: {\n      type: 'boolean',\n      alias: 'm'\n    },\n    clear: {\n      type: 'boolean'\n    }\n  }\n});\n\nupdateNotifier({pkg}).notify();\n\ntaskbook(cli.input, cli.flags);\n"
        },
        {
          "name": "code-of-conduct.md",
          "type": "blob",
          "size": 3.1533203125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at klaussinani@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "contributing.md",
          "type": "blob",
          "size": 4.0341796875,
          "content": "# Contributing to Taskbook\n\nThank you for taking the time to contribute to Taskbook!\n\nPlease note that this project is released with a [Contributor Code of Conduct](code-of-conduct.md). By participating in this project you agree to abide by its terms.\n\n## How to contribute\n\n### Improve documentation\n\nTypo corrections, error fixes, better explanations, more examples etc. Open an issue regarding anything that you think it could be improved! You can use the [`docs` label](https://github.com/klaussinani/taskbook/labels/docs) to find out what others have suggested!\n\n### Improve issues\n\nSometimes reported issues lack information, are not reproducible, or are even plain invalid. Help us out to make them easier to resolve. Handling issues takes a lot of time that we could rather spend on fixing bugs and adding features.\n\n### Give feedback on issues\n\nWe're always looking for more opinions on discussions in the issue tracker. It's a good opportunity to influence the future direction of the project.\n\nThe [`question` label](https://github.com/klaussinani/taskbook/labels/question) is a good place to find ongoing discussions.\n\n### Write code\n\nYou can use issue labels to discover issues you could help us out with!\n\n- [`feature request` issues](https://github.com/klaussinani/taskbook/labels/feature%20request) are features we are open to including\n- [`bug` issues](https://github.com/klaussinani/taskbook/labels/bug) are known bugs we would like to fix\n- [`future` issues](https://github.com/klaussinani/taskbook/labels/future) are those that we'd like to get to, but not anytime soon. Please check before working on these since we may not yet want to take on the burden of supporting those features\n- on the [`help wanted`](https://github.com/klaussinani/taskbook/labels/help%20wanted) label you can always find something exciting going on\n\nYou may find an issue is assigned, or has the [`assigned` label](https://github.com/klaussinani/taskbook/labels/assigned). Please double-check before starting on this issue because somebody else is likely already working on it\n\n### Say hi\n\nCome over and say hi anytime you feel like on [Gitter](https://gitter.im/klaussinani/taskbook).\n\n### Translating Documentation\n\n#### Create a Translation\n\n- Check the [`index`](https://github.com/klaussinani/taskbook/tree/master/docs/readme.md) file to ensure that the document is not already translated in your target language.\n- Add the name of the language to the document as an extension, e.g: `readme.JP.md`\n- Place the translated document inside the [`docs`](https://github.com/klaussinani/taskbook/tree/master/docs) directory.\n- Add your github profile and the translated document to the [`index`](https://github.com/klaussinani/taskbook/tree/master/docs/readme.md) file.\n- Create a Pull Request including the language in the title, e.g: `Readme: Japanese Translation`\n\n#### Improve a Translation\n\n- Include your github profile next to the translation you improved at the [`index`](https://github.com/klaussinani/taskbook/tree/master/docs/readme.md) file.\n- Create a Pull Request that delivers the improvements and include the language in the title, e.g: `Readme: Improvements for the Japanese Translation`\n\n### Submitting an issue\n\n- Search the issue tracker before opening an issue\n- Ensure you're using the latest version of Taskbook\n- Use a descriptive title\n- Include as much information as possible;\n  - Steps to reproduce the issue\n  - Error message\n  - Taskbook version\n  - Operating system **etc**\n\n### Submitting a pull request\n\n- Non-trivial changes are often best discussed in an issue first, to prevent you from doing unnecessary work\n- Try making the pull request from a [topic branch](https://github.com/dchelimsky/rspec/wiki/Topic-Branches) if it is of crucial importance\n- Use a descriptive title for the pull request and commits\n- You might be asked to do changes to your pull request, you can do that by just [updating the existing one](https://github.com/RichardLitt/docs/blob/master/amending-a-commit-guide.md)\n\n> Inspired by project [AVA](https://github.com/avajs/ava/blob/master/contributing.md)'s contributing.md\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 1.2939453125,
          "content": "#!/usr/bin/env node\n'use strict';\nconst taskbook = require('./src/taskbook');\n\nconst taskbookCLI = (input, flags) => {\n  if (flags.archive) {\n    return taskbook.displayArchive();\n  }\n\n  if (flags.task) {\n    return taskbook.createTask(input);\n  }\n\n  if (flags.restore) {\n    return taskbook.restoreItems(input);\n  }\n\n  if (flags.note) {\n    return taskbook.createNote(input);\n  }\n\n  if (flags.delete) {\n    return taskbook.deleteItems(input);\n  }\n\n  if (flags.check) {\n    return taskbook.checkTasks(input);\n  }\n\n  if (flags.begin) {\n    return taskbook.beginTasks(input);\n  }\n\n  if (flags.star) {\n    return taskbook.starItems(input);\n  }\n\n  if (flags.priority) {\n    return taskbook.updatePriority(input);\n  }\n\n  if (flags.copy) {\n    return taskbook.copyToClipboard(input);\n  }\n\n  if (flags.timeline) {\n    taskbook.displayByDate();\n    return taskbook.displayStats();\n  }\n\n  if (flags.find) {\n    return taskbook.findItems(input);\n  }\n\n  if (flags.list) {\n    taskbook.listByAttributes(input);\n    return taskbook.displayStats();\n  }\n\n  if (flags.edit) {\n    return taskbook.editDescription(input);\n  }\n\n  if (flags.move) {\n    return taskbook.moveBoards(input);\n  }\n\n  if (flags.clear) {\n    return taskbook.clear();\n  }\n\n  taskbook.displayByBoard();\n  return taskbook.displayStats();\n};\n\nmodule.exports = taskbookCLI;\n"
        },
        {
          "name": "license.md",
          "type": "blob",
          "size": 1.1650390625,
          "content": "MIT License\n\nCopyright (c) 2018 - present Klaus Sinani <klaussinani@gmail.com> (klaussinani.github.io) Mario Sinani <mariosinani@protonmail.ch> (mario-sinani.github.io)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.0087890625,
          "content": "{\n  \"name\": \"taskbook\",\n  \"productName\": \"Taskbook\",\n  \"version\": \"0.3.0\",\n  \"description\": \"Tasks, boards & notes for the command-line habitat\",\n  \"repository\": \"klaussinani/taskbook\",\n  \"license\": \"MIT\",\n  \"author\": {\n    \"name\": \"Klaus Sinani\",\n    \"email\": \"klaussinani@gmail.com\",\n    \"url\": \"https://klaussinani.github.io\"\n  },\n  \"bin\": {\n    \"tb\": \"cli.js\"\n  },\n  \"engines\": {\n    \"node\": \">=6\"\n  },\n  \"files\": [\n    \"src\",\n    \"cli.js\",\n    \"index.js\"\n  ],\n  \"keywords\": [\n    \"task\",\n    \"board\",\n    \"note\",\n    \"todo\",\n    \"notebook\",\n    \"command\",\n    \"line\",\n    \"console\",\n    \"cli\",\n    \"app\"\n  ],\n  \"configuration\": {\n    \"default\": {\n      \"taskbookDirectory\": \"~\",\n      \"displayCompleteTasks\": true,\n      \"displayProgressOverview\": true\n    }\n  },\n  \"scripts\": {\n    \"test\": \"xo\"\n  },\n  \"dependencies\": {\n    \"chalk\": \"^2.4.1\",\n    \"clipboardy\": \"^1.2.3\",\n    \"meow\": \"^5.0.0\",\n    \"signale\": \"1.4.0\",\n    \"update-notifier\": \"^2.5.0\"\n  },\n  \"devDependencies\": {\n    \"xo\": \"*\"\n  },\n  \"xo\": {\n    \"space\": 2\n  }\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 13.181640625,
          "content": "<h1 align=\"center\">\n  Taskbook\n</h1>\n\n<h4 align=\"center\">\n  Tasks, boards & notes for the command-line habitat\n</h4>\n\n<div align=\"center\">\n  <img alt=\"Boards\" width=\"70%\" src=\"media/header-boards.png\"/>\n</div>\n\n<div align=\"center\">\n  <br>\n  <sup><b>Sponsored by:</b></sup>\n  <br>\n  <a href=\"https://betterstack.com\">\n    <div>\n      <img src=\"https://github.com/Seldaek/monolog/assets/183678/7de58ce0-2fa2-45c0-b3e8-e60cebb3c4cf\" width=\"200\" alt=\"Better Stack\">\n    </div>\n    <sup>\n      Spot, Resolve, and Prevent Downtime.\n    </sup>\n  </a>\n</div>\n\n## Description\n\nBy utilizing a simple and minimal usage syntax, that requires a flat learning curve, taskbook enables you to effectively manage your tasks and notes across multiple boards from within your terminal. All data are written atomically to the storage in order to prevent corruptions, and are never shared with anyone or anything. Deleted items are automatically archived and can be inspected or restored at any moment.\n\nRead this document in:\n[简体中文](https://github.com/klaussinani/taskbook/blob/master/docs/readme.ZH.md), [Русский](https://github.com/klaussinani/taskbook/blob/master/docs/readme.RU.md), [Français](https://github.com/klaussinani/taskbook/blob/master/docs/readme.FR.md), [Deutsch](https://github.com/klaussinani/taskbook/blob/master/docs/readme.GER.md), [Portuguese](https://github.com/klaussinani/taskbook/blob/master/docs/readme.PT-BR.md), [日本語](https://github.com/klaussinani/taskbook/blob/master/docs/readme.JP.md), [한국어](https://github.com/klaussinani/taskbook/blob/master/docs/readme.KR.md), [Spanish](https://github.com/klaussinani/taskbook/blob/master/docs/readme.ES.md), [Bulgarian](https://github.com/klaussinani/taskbook/blob/master/docs/readme.BG.md).\n\nYou can now support the development process through [GitHub Sponsors](https://github.com/sponsors/klaussinani).\n\nVisit the [contributing guidelines](https://github.com/klaussinani/taskbook/blob/master/contributing.md#translating-documentation) to learn more on how to translate this document into more languages.\n\nCome over to [Gitter](https://gitter.im/klaussinani/taskbook) or [Twitter](https://twitter.com/klaussinani) to share your thoughts on the project.\n\n## Highlights\n\n- Organize tasks & notes to boards\n- Board & timeline views\n- Priority & favorite mechanisms\n- Search & filter items\n- Archive & restore deleted items\n- Lightweight & fast\n- Data written atomically to storage\n- Custom storage location\n- Progress overview\n- Simple & minimal usage syntax\n- Update notifications\n- Configurable through `~/.taskbook.json`\n- Data stored in JSON file at `~/.taskbook/storage`\n\nView highlights in a [taskbook board](https://raw.githubusercontent.com/klaussinani/taskbook/master/media/highlights.png).\n\n## Contents\n\n- [Description](#description)\n- [Highlights](#highlights)\n- [Install](#install)\n- [Usage](#usage)\n- [Views](#views)\n- [Configuration](#configuration)\n- [Flight Manual](#flight-manual)\n- [Development](#development)\n- [Related](#related)\n- [Team](#team)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n## Install\n\n### Yarn\n\n```bash\nyarn global add taskbook\n```\n\n### NPM\n\n```bash\nnpm install --global taskbook\n```\n\n### Snapcraft\n\n```bash\nsnap install taskbook\nsnap alias taskbook tb # set alias\n```\n\n**Note:** Due to the snap's strictly confined nature, both the storage & configuration files will be saved under the [`$SNAP_USER_DATA`](https://docs.snapcraft.io/reference/env) environment variable instead of the generic `$HOME` one.\n\n## Usage\n\n```\n$ tb --help\n\n  Usage\n    $ tb [<options> ...]\n\n    Options\n        none             Display board view\n      --archive, -a      Display archived items\n      --begin, -b        Start/pause task\n      --check, -c        Check/uncheck task\n      --clear            Delete all checked items\n      --copy, -y         Copy item description\n      --delete, -d       Delete item\n      --edit, -e         Edit item description\n      --find, -f         Search for items\n      --help, -h         Display help message\n      --list, -l         List items by attributes\n      --move, -m         Move item between boards\n      --note, -n         Create note\n      --priority, -p     Update priority of task\n      --restore, -r      Restore items from archive\n      --star, -s         Star/unstar item\n      --task, -t         Create task\n      --timeline, -i     Display timeline view\n      --version, -v      Display installed version\n\n    Examples\n      $ tb\n      $ tb --archive\n      $ tb --begin 2 3\n      $ tb --check 1 2\n      $ tb --clear\n      $ tb --copy 1 2 3\n      $ tb --delete 4\n      $ tb --edit @3 Merge PR #42\n      $ tb --find documentation\n      $ tb --list pending coding\n      $ tb --move @1 cooking\n      $ tb --note @coding Mergesort worse-case O(nlogn)\n      $ tb --priority @3 2\n      $ tb --restore 4\n      $ tb --star 2\n      $ tb --task @coding @reviews Review PR #42\n      $ tb --task @coding Improve documentation\n      $ tb --task Make some buttercream\n      $ tb --timeline\n```\n\n## Views\n\n### Board View\n\nInvoking taskbook without any options will display all saved items grouped into their respective boards.\n\n<div align=\"center\">\n  <img alt=\"Boards\" width=\"60%\" src=\"media/header-boards.png\"/>\n</div>\n\n### Timeline View\n\nIn order to display all items in a timeline view, based on their creation date, the `--timeline`/`-i` option can be used.\n\n<div align=\"center\">\n  <img alt=\"Timeline View\" width=\"62%\" src=\"media/timeline.png\"/>\n</div>\n\n## Configuration\n\nTo configure taskbook navigate to the `~/.taskbook.json` file and modify any of the options to match your own preference. To reset back to the default values, simply delete the config file from your home directory.\n\nThe following illustrates all the available options with their respective default values.\n\n```json\n{\n  \"taskbookDirectory\": \"~\",\n  \"displayCompleteTasks\": true,\n  \"displayProgressOverview\": true\n}\n```\n\n### In Detail\n\n##### `taskbookDirectory`\n\n- Type: `String`\n- Default: `~`\n\nFilesystem path where the storage will be initialized, i.e: `/home/username/the-cloud` or `~/the-cloud`\n\nIf left undefined the home directory `~` will be used and taskbook will be set-up under `~/.taskbook/`.\n\n##### `displayCompleteTasks`\n\n- Type: `Boolean`\n- Default: `true`\n\nDisplay tasks that are marked as complete.\n\n##### `displayProgressOverview`\n\n- Type: `Boolean`\n- Default: `true`\n\nDisplay progress overview below the timeline and board views.\n\n## Flight Manual\n\nThe following is a minor walkthrough containing a set of examples on how to use taskbook.\nIn case you spotted an error or think that an example is not to clear enough and should be further improved, please feel free to open an [issue](https://github.com/klaussinani/taskbook/issues/new/choose) or [pull request](https://github.com/klaussinani/taskbook/compare).\n\n### Create Task\n\nTo create a new task use the `--task`/`-t` option with your task's description following right after.\n\n```\n$ tb -t Improve documentation\n```\n\n### Create Note\n\nTo create a new note use the `--note`/`-n` option with your note's body following right after.\n\n```\n$ tb -n Mergesort worse-case O(nlogn)\n```\n\n### Create Board\n\nBoards are automatically initialized when creating a new task or note. To create one or more boards, include their names, prefixed by the `@` symbol, in the description of the about-to-be created item. As a result the newly created item will belong to all of the given boards. By default, items that do not contain any board names in their description are automatically added to the general purpose; `My Board`.\n\n```\n$ tb -t @coding @docs Update contributing guidelines\n```\n\n### Check Task\n\nTo mark a task as complete/incomplete, use the `--check`/`-c` option followed by the ids of the target tasks. Note that the option will update to its opposite the `complete` status of the given tasks, thus checking a complete task will render it as pending and a pending task as complete. Duplicate ids are automatically filtered out.\n\n```\n$ tb -c 1 3\n```\n\n### Begin Task\n\nTo mark a task as started/paused, use the `--begin`/`-b` option followed by the ids of the target tasks. The functionality of this option is the same as the one of the above described `--check` option.\n\n```\n$ tb -b 2 3\n```\n\n### Star Item\n\nTo mark one or more items as favorite, use the `--star`/`-s` option followed by the ids of the target items. The functionality of this option is the same as the one of the above described `--check` option.\n\n```\n$ tb -s 1 2 3\n```\n\n### Copy Item Description\n\nTo copy to your system's clipboard the description of one or more items, use the `--copy`/`-y` option followed by the ids of the target items. Note that the option will also include the newline character as a separator to each pair of adjacent copied descriptions, thus resulting in a clear and readable stack of sentences on paste.\n\n```\n$ tb -y 1 2 3\n```\n\n### Display Boards\n\nInvoking taskbook without any options will display all of saved items grouped into their respective boards.\n\n```\n$ tb\n```\n\n### Display Timeline\n\nIn order to display all items in a timeline view, based on their creation date, the `--timeline`/`-i` option can be used.\n\n```\n$ tb -i\n```\n\n### Set Priority\n\nTo set a priority level for a task while initializing it, include the `p:x` syntax in the task's description, where x can be an integer of value `1`, `2` or `3`. Note that all tasks by default are created with a normal priority - `1`.\n\n- `1` - Normal priority\n- `2` - Medium priority\n- `3` - High priority\n\n```\n$ tb -t @coding Fix issue `#42` p:3\n```\n\nTo update the priority level of a specific task after its creation, use the `--priority`/`-p` option along with the id the target task, prefixed by the `@` symbol, and an integer of value `1`, `2` or `3`. Note that the order in which the target id and priority level are placed is not significant.\n\n```\n$ tb -p @1 2\n```\n\n### Move Item\n\nTo move an item to one or more boards, use the `--move`/`-m` option, followed by the target item id, prefixed by the `@` symbol, and the name of the destination boards. The default `My board` can be accessed through the `myboard` keyword. The order in which the target id and board names are placed is not significant.\n\n```\n$ tb -m @1 myboard reviews\n```\n\n### Delete Item\n\nTo delete one or more items, use the `--delete`/`-d` options followed by the ids of the target items. Note that deleted items are automatically archived, and can be inspected or restored at any moment. Duplicate ids are automatically filtered out.\n\n```\n$ tb -d 1 2\n```\n\n### Delete Checked Tasks\n\nTo delete/clear all complete tasks at once across all boards, use the `--clear` option. Note that all deleted tasks are automatically archived, and can be inspected or restored at any moment. In order to discourage any possible accidental usage, the `--clear` option has no available shorter alias.\n\n```\n$ tb --clear\n```\n\n### Display Archive\n\nTo display all archived items, use the `--archive`/`-a` option. Note that all archived items are displayed in timeline view, based on their creation date.\n\n```\n$ tb -a\n```\n\n### Restore Items\n\nTo restore one or more items, use the `--restore`/`-r` option followed by the ids of the target items. Note that the ids of all archived items can be seen when invoking the `--archive`/`-a` option. Duplicate ids are automatically filtered out.\n\n```\n$ tb -r 1 2\n```\n\n### List Items\n\nTo list a group of items where each item complies with a specific set of attributes, use the `--list`/`-l` option followed by the desired attributes. Board names along with item traits can be considered valid listing attributes. For example to list all items that belong to the default `myboard` and are pending tasks, the following could be used;\n\n```\n$ tb -l myboard pending\n```\n\nThe by default supported listing attributes, together with their respective aliases, are the following;\n\n- `myboard` - Items that belong to `My board`\n- `task`, `tasks`, `todo` - Items that are tasks.\n- `note`, `notes` - Items that are notes.\n- `pending`, `unchecked`, `incomplete` - Items that are pending tasks.\n- `progress`, `started`, `begun` - Items that are in-progress tasks.\n- `done`, `checked`, `complete` - Items that complete tasks.\n- `star`, `starred` - Items that are starred.\n\n### Search Items\n\nTo search for one of more items, use the `--find`/`-f` option, followed by your search terms.\n\n```\n$ tb -f documentation\n```\n\n## Development\n\nFor more info on how to contribute to the project, please read the [contributing guidelines](https://github.com/klaussinani/taskbook/blob/master/contributing.md).\n\n- Fork the repository and clone it to your machine\n- Navigate to your local fork: `cd taskbook`\n- Install the project dependencies: `npm install` or `yarn install`\n- Lint the code for errors: `npm test` or `yarn test`\n\n## Related\n\n- [signale](https://github.com/klaussinani/signale) - Highly configurable logging utility\n- [qoa](https://github.com/klaussinani/qoa) - Minimal interactive command-line prompts\n- [hyperocean](https://github.com/klaussinani/hyperocean) - Deep oceanic blue Hyper terminal theme\n\n## Team\n\n- Klaus Sinani [(@klaudiosinani)](https://github.com/klaudiosinani)\n- Mario Sinani [(@mariosinani)](https://github.com/mariosinani)\n\n## Sponsors\n\nA big thank you to all the people and companies supporting our Open Source work:\n\n- [Better Stack: Spot, Resolve, and Prevent Downtime.](https://betterstack.com/)\n\n## License\n\n[MIT](https://github.com/klaussinani/taskbook/blob/master/license.md)\n"
        },
        {
          "name": "snapcraft.yaml",
          "type": "blob",
          "size": 0.646484375,
          "content": "name: taskbook\nversion: '0.0.0'\nversion-script: git describe --always | cut -c 2-\nsummary: Tasks, boards & notes for the command-line habitat\ndescription: |\n  By utilizing a simple and minimal usage syntax, that requires a flat learning curve,\n  taskbook enables you to effectively manage your tasks and notes across multiple boards\n  from within your terminal.\n\ngrade: stable\nconfinement: strict\n\narchitectures:\n  - amd64\n  - i386\n  - armhf\n\napps:\n  taskbook:\n    command: tb\n    plugs:\n      - home\n      - network\n      - network-control\n      - x11\n\nparts:\n  taskbook:\n    plugin: nodejs\n    node-engine: 10.15.0\n    node-package-manager: yarn\n    source: .\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}