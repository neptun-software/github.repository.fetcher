{
  "metadata": {
    "timestamp": 1736563018323,
    "page": 646,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "davatron5000/Lettering.js",
      "stars": 5382,
      "defaultBranch": "master",
      "files": [
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.8916015625,
          "content": "## Submitting issues\n\n### Reduced test case required\n\nAll bug reports and problem issues require a reduced test case. See [CSS Tricks - Reduced Test Cases](http://css-tricks.com/reduced-test-cases/) on why they _\"are the absolute, ... number one way to troubleshoot bugs.\"_\n\n+ A reduced test case is an isolated example that demonstrates the bug or issue.\n+ It contains the bare minimum HTML, CSS, and JavaScript required to demonstrate the bug. No extra functionality or styling.\n+ A link to your site is **not** a reduced test case.\n+ A [CodePen](http://codepen.io) is preferred so we can help you fix an error.\n+ Until you provide a reduced test case, your issue will be closed.\n\nThis guideline may seem a little harsh, but it helps dramatically. Reduced test cases help you identify the issue at hand and understand your own code. On our side, they greatly reduce the amount of time spent resolving the issue."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.1123046875,
          "content": "\n## Lettering.js, a jQuery plugin for radical Web Typography\n[![CDNJS](https://img.shields.io/cdnjs/v/lettering.js.svg)](https://cdnjs.com/libraries/lettering.js)\n\nWe developed a lightweight, easy to use Javascript `span` injector for radical Web Typography, we're calling it \"lettering-jay-ess\", and we're releasing it today for free over on Github. Let me demo it for you: `</stevejobs>`\n\n### Individual Letter Control with Lettering.js\nWe'll start with some really basic markup:\n\n```html\n<h1 class=\"fancy_title\">Some Title</h1>\n```\nAfter including `jQuery 1.6.2+`, [download and include the minified version of Lettering.js](http://github.com/davatron5000/Lettering.js/downloads), then a script block with the magical `.lettering()` method:\n\n```html\n<script>\n\t  $(document).ready(function() {\n\t    $(\".fancy_title\").lettering();\n\t  });\n</script>\n```\nThe resulting code will churn your `.fancy_title` and output the following:\n\n```html\n<h1 class=\"fancy_title\">\n  <span class=\"char1\">S</span>\n  <span class=\"char2\">o</span>\n  <span class=\"char3\">m</span>\n  <span class=\"char4\">e</span>\n  <span class=\"char5\"></span>\n  <span class=\"char6\">T</span>\n  <span class=\"char7\">i</span>\n  <span class=\"char8\">t</span>\n  <span class=\"char9\">l</span>\n  <span class=\"char10\">e</span>\n</h1>\n```\nMagical. Now the text is easy to manipulate in your CSS using an ordinal `.char#` pattern.  This plugin assumes basic counting skills, but it's a pretty fast and easy way to get control over every letter.\n\n### Letters, words, lines, and more!\n\nThere you have it, but Lettering.js does even more! Lettering.js has the ability to split `words` and `lines` as well. If you want more information on how you can get radical with text, read the Lettering.js Wiki:\n\n[https://github.com/davatron5000/Lettering.js/wiki](https://github.com/davatron5000/Lettering.js/wiki)\n\n#### Best Practices\nWe've found this to be a pretty quick and elegant solution to create typographical CSS3 posters. It's also a great solution for really custom type headings, while keeping the text selectable. Be smart and use sparingly. You'll probably break your browser if you try to wrap every letter on your page in a `span` tag, so don't do that.  Look to use this in your Headings, Blockquotes, Asides, etc.\n\n#### Kern Well\nIf you're going through the trouble to load a fancy font and that word or phrase is the largest on the site, then it's important for it to be kerned well.  With Lettering.js, kerning is a breeze. You can simply use `$(\"#id-of-what-i-want-to-kern\").lettering();` and then on each `.char#`, you can set relative position or left/right margin. Works like a charm.\n\n### Accessibility\n\nLettering.js is now accessible by default. It uses an `aria-label` on the parent element and `aria-hidden` on each of the children to prevent screenreaders from pausing while reading each individual characters or words.\n\n### Non-Javascript Fallback\nAs with any kind of Javascript, have a fall back plan in case the user doesn't have javascript enabled.  The bottom line is up to you, my bottom line would be \"legible and on the screen\". Also, use `lettering.min.js` [Download the Minified Version of Lettering.js here](http://github.com/davatron5000/Lettering.js/downloads)\n\n#### Performance Anti-Pattern\nWeb performance patterns advise that you put Javascripts at the bottom of your page before your `</body>` tag.  There is an unfortunate side effect where you may experience a [FOUT (Flash of Unstyled Text)](http://paulirish.com/2009/fighting-the-font-face-fout/) when you're manipulating your text after the DOM has loaded.  Unfortunately, we found the best solution to avoid/minimize the FOUT caused by this plugin is to put your scripts (jQuery, Lettering.js) in the document `<head>`. On the one hand, your page will load slower. On the other hand, a flash/restyling makes your site feel slow. Users might ultimately feel the site is faster if they don't see the FOUT.\n\n### Download, Fork, Commit, Please.\nWe really want Lettering.js to be a quality helper for web typography.  If you have any feedback or suggestions, please leave those over on the Github.  We're excited about typography on the web and want to help make it print quality.\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.17578125,
          "content": "{\n  \"name\": \"letteringjs\",\n  \"version\": \"0.7.0\",\n  \"main\": \"jquery.lettering.js\",\n  \"ignore\": [\n    \"examples\",\n    \"**/.*\"\n  ],\n  \"dependencies\": {\n    \"jquery\": \">= 1.6.2\"\n  }\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "jquery.lettering.js",
          "type": "blob",
          "size": 1.736328125,
          "content": "/*global jQuery */\n/*!\n* Lettering.JS 0.7.0\n*\n* Copyright 2010, Dave Rupert http://daverupert.com\n* Released under the WTFPL license\n* http://sam.zoy.org/wtfpl/\n*\n* Thanks to Paul Irish - http://paulirish.com - for the feedback.\n*\n* Date: Mon Sep 20 17:14:00 2010 -0600\n*/\n(function($){\n\tfunction injector(t, splitter, klass, after) {\n\t\tvar text = t.text()\n\t\t, a = text.split(splitter)\n\t\t, inject = '';\n\t\tif (a.length) {\n\t\t\t$(a).each(function(i, item) {\n\t\t\t\tinject += '<span class=\"'+klass+(i+1)+'\" aria-hidden=\"true\">'+item+'</span>'+after;\n\t\t\t});\n\t\t\tt.attr('aria-label',text)\n\t\t\t.empty()\n\t\t\t.append(inject)\n\n\t\t}\n\t}\n\n\n\tvar methods = {\n\t\tinit : function() {\n\n\t\t\treturn this.each(function() {\n\t\t\t\tinjector($(this), '', 'char', '');\n\t\t\t});\n\n\t\t},\n\n\t\twords : function() {\n\n\t\t\treturn this.each(function() {\n\t\t\t\tinjector($(this), ' ', 'word', ' ');\n\t\t\t});\n\n\t\t},\n\n\t\tlines : function() {\n\n\t\t\treturn this.each(function() {\n\t\t\t\tvar r = \"eefec303079ad17405c889e092e105b0\";\n\t\t\t\t// Because it's hard to split a <br/> tag consistently across browsers,\n\t\t\t\t// (*ahem* IE *ahem*), we replace all <br/> instances with an md5 hash\n\t\t\t\t// (of the word \"split\").  If you're trying to use this plugin on that\n\t\t\t\t// md5 hash string, it will fail because you're being ridiculous.\n\t\t\t\tinjector($(this).children(\"br\").replaceWith(r).end(), r, 'line', '');\n\t\t\t});\n\n\t\t}\n\t};\n\n\t$.fn.lettering = function( method ) {\n\t\t// Method calling logic\n\t\tif ( method && methods[method] ) {\n\t\t\treturn methods[ method ].apply( this, [].slice.call( arguments, 1 ));\n\t\t} else if ( method === 'letters' || ! method ) {\n\t\t\treturn methods.init.apply( this, [].slice.call( arguments, 0 ) ); // always pass an array\n\t\t}\n\t\t$.error( 'Method ' +  method + ' does not exist on jQuery.lettering' );\n\t\treturn this;\n\t};\n\n})(jQuery);\n"
        }
      ]
    }
  ]
}