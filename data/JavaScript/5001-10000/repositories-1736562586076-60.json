{
  "metadata": {
    "timestamp": 1736562586076,
    "page": 60,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "klaudiosinani/signale",
      "stars": 8940,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.23828125,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[{*.json, *.yml}]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0986328125,
          "content": "# dependencies\nnode_modules\nyarn.lock\n\n# logs\n*.log\n\n# OS\n.DS_Store\n\n# IDE\n.vscode\n.idea\n*.swp\n*.swo\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.16796875,
          "content": "language: node_js\nnode_js:\n  - 10\n  - 8\n  - 6\nbefore_install:\n  - npm install --global npm@6.4.0\n  - npm --version\ngit:\n  depth: 5\ncache:\n  directories:\n    - node_modules\n"
        },
        {
          "name": "code-of-conduct.md",
          "type": "blob",
          "size": 3.142578125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at klaussinani@gmail.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "contributing.md",
          "type": "blob",
          "size": 4.060546875,
          "content": "# Contributing to Signale\n\nThank you for taking the time to contribute to Signale!\n\nPlease note that this project is released with a [Contributor Code of Conduct](code-of-conduct.md). By participating in this project you agree to abide by its terms.\n\n## How to contribute\n\n### Improve documentation\n\nTypo corrections, error fixes, better explanations, more examples etc. Open an issue regarding anything that you think it could be improved! You can use the [`docs` label](https://github.com/klaussinani/signale/labels/docs) to find out what others have suggested!\n\n### Improve issues\n\nSometimes reported issues lack information, are not reproducible, or are even plain invalid. Help us out to make them easier to resolve. Handling issues takes a lot of time that we could rather spend on fixing bugs and adding features.\n\n### Give feedback on issues\n\nWe're always looking for more opinions on discussions in the issue tracker. It's a good opportunity to influence the future direction of the project.\n\nThe [`question` label](https://github.com/klaussinani/signale/labels/question) is a good place to find ongoing discussions.\n\n### Write code\n\nYou can use issue labels to discover issues you could help us out with!\n\n- [`feature request` issues](https://github.com/klaussinani/signale/labels/feature%20request) are features we are open to including\n- [`bug` issues](https://github.com/klaussinani/signale/labels/bug) are known bugs we would like to fix\n- [`future` issues](https://github.com/klaussinani/signale/labels/future) are those that we'd like to get to, but not anytime soon. Please check before working on these since we may not yet want to take on the burden of supporting those features\n- on the [`help wanted`](https://github.com/klaussinani/signale/labels/help%20wanted) label you can always find something exciting going on\n\nYou may find an issue is assigned, or has the [`assigned` label](https://github.com/klaussinani/signale/labels/assigned). Please double-check before starting on this issue because somebody else is likely already working on it\n\n### Say hi\n\nCome over and say hi anytime you feel like on [Gitter](https://gitter.im/klaussinani/signale).\n\n### Translating Documentation\n\n#### Create a Translation\n\n- Visit the [`translations' index`](https://github.com/klaussinani/signale/tree/master/docs/readme.md) file to ensure that the document is not already translated in your target language. \n- Add the name of the language to the document as an extension, e.g: `readme.JP.md`\n- Place the translated document inside the [`docs`](https://github.com/klaussinani/signale/tree/master/docs) directory.\n- Add your github profile and the translated document at the [`translations' index`](https://github.com/klaussinani/signale/tree/master/docs/readme.md) file.\n- Create a Pull Request including the language in the title, e.g: `Readme: Japanese Translation`\n\n#### Improve a Translation\n\n- Include your github profile next to the translation you improved at the [`translations' index`](https://github.com/klaussinani/signale/tree/master/docs/readme.md) file.\n- Create a Pull Request that delivers the improvements and include the language in the title, e.g: `Readme: Improvements for the Japanese Translation`\n\n### Submitting an issue\n\n- Search the issue tracker before opening an issue\n- Ensure you're using the latest version of Signale\n- Use a descriptive title\n- Include as much information as possible;\n  - Steps to reproduce the issue\n  - Error message\n  - Signale version\n  - Operating system **etc**\n\n### Submitting a pull request\n\n- Non-trivial changes are often best discussed in an issue first, to prevent you from doing unnecessary work\n- Try making the pull request from a [topic branch](https://github.com/dchelimsky/rspec/wiki/Topic-Branches) if it is of crucial importance\n- Use a descriptive title for the pull request and commits\n- You might be asked to do changes to your pull request, you can do that by just [updating the existing one](https://github.com/RichardLitt/docs/blob/master/amending-a-commit-guide.md)\n\n> Inspired by project [AVA](https://github.com/avajs/ava/blob/master/contributing.md)'s contributing.md\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.1123046875,
          "content": "'use strict';\nconst Signale = require('./src/signale');\n\nmodule.exports = Object.assign(new Signale(), {Signale});\n"
        },
        {
          "name": "license.md",
          "type": "blob",
          "size": 1.0771484375,
          "content": "MIT License\n\nCopyright (c) 2018 - present Klaus Sinani <klaussinani@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.388671875,
          "content": "{\n  \"name\": \"signale\",\n  \"version\": \"1.4.0\",\n  \"description\": \"Highly configurable logging utility\",\n  \"license\": \"MIT\",\n  \"repository\": \"klaussinani/signale\",\n  \"author\": {\n    \"name\": \"Klaus Sinani\",\n    \"email\": \"klaussinani@gmail.com\",\n    \"url\": \"https://klaussinani.github.io\"\n  },\n  \"maintainers\": [\n    {\n      \"name\": \"Mario Sinani\",\n      \"email\": \"mariosinani@protonmail.ch\",\n      \"url\": \"https://mariocfhq.github.io\"\n    }\n  ],\n  \"engines\": {\n    \"node\": \">=6\"\n  },\n  \"files\": [\n    \"src\",\n    \"types\",\n    \"index.js\"\n  ],\n  \"types\": \"./types/signale.d.ts\",\n  \"keywords\": [\n    \"log\",\n    \"cli\",\n    \"logger\",\n    \"logging\",\n    \"hackable\",\n    \"colorful\",\n    \"console\"\n  ],\n  \"scripts\": {\n    \"lint\": \"xo\",\n    \"test:ts\": \"tsc --noEmit -p test\",\n    \"test\": \"npm run lint && npm run test:ts\"\n  },\n  \"dependencies\": {\n    \"chalk\": \"^2.3.2\",\n    \"figures\": \"^2.0.0\",\n    \"pkg-conf\": \"^2.1.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^11.11.3\",\n    \"typescript\": \"^3.3.3333\",\n    \"xo\": \"*\"\n  },\n  \"options\": {\n    \"default\": {\n      \"displayScope\": true,\n      \"displayBadge\": true,\n      \"displayDate\": false,\n      \"displayFilename\": false,\n      \"displayLabel\": true,\n      \"displayTimestamp\": false,\n      \"underlineLabel\": true,\n      \"underlineMessage\": false,\n      \"underlinePrefix\": false,\n      \"underlineSuffix\": false,\n      \"uppercaseLabel\": false\n    }\n  },\n  \"xo\": {\n    \"space\": 2\n  }\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 23.3955078125,
          "content": "<h1 align=\"center\">\n  Signale\n</h1>\n\n<h4 align=\"center\">\n  Highly configurable logging utility\n</h4>\n\n<div align=\"center\">\n  <img alt=\"Header\" src=\"media/header.png\" width=\"88%\">\n</div>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/signale\">\n    <img alt=\"NPM Downloads\" src=\"https://img.shields.io/npm/dt/signale.svg\">\n  </a>\n</p>\n\n<div align=\"center\">\n  <!-- <br> -->\n  <br>\n  <sup><b>Sponsored by:</b></sup>\n  <br>\n  <a href=\"https://betterstack.com\">\n    <div>\n      <img src=\"https://github.com/Seldaek/monolog/assets/183678/7de58ce0-2fa2-45c0-b3e8-e60cebb3c4cf\" width=\"200\" alt=\"Better Stack\">\n    </div>\n    <sup>\n      Spot, Resolve, and Prevent Downtime.\n    </sup>\n  </a>\n</div>\n\n## Description\n\nHackable and configurable to the core, signale can be used for logging purposes, status reporting, as well as for handling the output rendering process of other node modules and applications.\n\nRead this document in: [简体中文](https://github.com/klaussinani/signale/blob/master/docs/readme.zh_CN.md).\n\nYou can now support the development process through [GitHub Sponsors](https://github.com/sponsors/klaussinani).\n\nVisit the [contributing guidelines](https://github.com/klaussinani/signale/blob/master/contributing.md#translating-documentation) to learn more on how to translate this document into more languages.\n\nCome over to [Gitter](https://gitter.im/klaussinani/signale) or [Twitter](https://twitter.com/klaussinani) to share your thoughts on the project.\n\n## Highlights\n\n- 19 out-of-the-box loggers\n- Hackable to the core\n- Clean and beautiful output\n- Integrated timers\n- Custom pluggable loggers\n- TypeScript support\n- Interactive and regular modes\n- Secrets & sensitive information filtering\n- Filename, date and timestamp support\n- Scoped loggers and timers\n- Scaled logging levels mechanism\n- String interpolation support\n- Multiple configurable writable streams\n- Simple and minimal syntax\n- Globally configurable through `package.json`\n- Overridable configuration per file and logger\n\n## Contents\n\n- [Description](#description)\n- [Highlights](#highlights)\n- [Install](#install)\n- [Usage](#usage)\n- [Configuration](#configuration)\n- [API](#api)\n- [Development](#development)\n- [Related](#related)\n- [Who's Using It?](#whos-using-it)\n- [Team](#team)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n## Install\n\n### Yarn\n\n```bash\nyarn add signale\n```\n\n### NPM\n\n```bash\nnpm install signale\n```\n\n## Usage\n\n### Default Loggers\n\nImport signale and start using any of the default loggers.\n\n<details>\n<summary>View all of the available loggers.</summary>\n\n<br/>\n\n- `await`\n- `complete`\n- `error`\n- `debug`\n- `fatal`\n- `fav`\n- `info`\n- `note`\n- `pause`\n- `pending`\n- `star`\n- `start`\n- `success`\n- `wait`\n- `warn`\n- `watch`\n- `log`\n\n</details>\n\n<br/>\n\n```js\nconst signale = require('signale');\n\nsignale.success('Operation successful');\nsignale.debug('Hello', 'from', 'L59');\nsignale.pending('Write release notes for %s', '1.2.0');\nsignale.fatal(new Error('Unable to acquire lock'));\nsignale.watch('Recursively watching build directory...');\nsignale.complete({prefix: '[task]', message: 'Fix issue #59', suffix: '(@klauscfhq)'});\n```\n\n<div align=\"center\">\n  <img alt=\"Default Loggers\" src=\"media/default-loggers.png\" width=\"65%\">\n</div>\n\n### Custom Loggers\n\nTo create a custom logger define an `options` object yielding a `types` field with the logger data and pass it as argument to a new signale instance.\n\n```js\nconst {Signale} = require('signale');\n\nconst options = {\n  disabled: false,\n  interactive: false,\n  logLevel: 'info',\n  scope: 'custom',\n  secrets: [],\n  stream: process.stdout,\n  types: {\n    remind: {\n      badge: '**',\n      color: 'yellow',\n      label: 'reminder',\n      logLevel: 'info'\n    },\n    santa: {\n      badge: '🎅',\n      color: 'red',\n      label: 'santa',\n      logLevel: 'info'\n    }\n  }\n};\n\nconst custom = new Signale(options);\ncustom.remind('Improve documentation.');\ncustom.santa('Hoho! You have an unused variable on L45.');\n```\n\n<div align=\"center\">\n  <img alt=\"Custom Loggers\" src=\"media/custom-loggers.png\" width=\"70%\">\n</div>\n\nHere is an example where we override the default `error` and `success` loggers.\n\n```js\nconst {Signale} = require('signale');\n\nconst options = {\n  types: {\n    error: {\n      badge: '!!',\n      label: 'fatal error'\n    },\n    success: {\n      badge: '++',\n      label: 'huge success'\n    }\n  }\n};\n\nconst signale = new Signale();\nsignale.error('Default Error Log');\nsignale.success('Default Success Log');\n\nconst custom = new Signale(options);\ncustom.error('Custom Error Log');\ncustom.success('Custom Success Log');\n```\n\n<div align=\"center\">\n  <img alt=\"Default Loggers\" src=\"media/override-defaults.png\" width=\"65%\">\n</div>\n\nThe `options` object can hold any of the following attributes: `disabled`, `interactive`, `logLevel`, `secrets`, `stream`, `scope` and `types`. \n\n##### `disabled`\n\n- Type: `Boolean`\n- Default: `false`\n\nDisables the logging functionality of all loggers belonging to the created instance.\n\n##### `interactive`\n\n- Type: `Boolean`\n- Default: `false`\n\nSwitches all loggers belonging to the created instance into the interactive mode.\n\n##### `logLevel`\n\n- Type: `String`\n- Default: `'info'`\n\nSets the general logging level of the created instance. Can be one of the following:\n\n- `'info'` - Displays all messages from all loggers.\n- `'timer'` -  Displays messages only from the `time`, `timeEnd`, `debug`, `warn`, `error` & `fatal` loggers.\n- `'debug'` - Displays messages only from the `debug`, `warn`, `error` & `fatal` loggers.\n- `'warn'` - Displays messages only from the `warn`, `error` & `fatal` loggers.\n- `'error'` - Displays messages only from the `error` & `fatal` loggers.\n\n##### `secrets`\n\n- Type: `(String|Number)[]`\n- Default: `[]`\n\nAn array holding secrets/sensitive-information to be removed from the body and metadata of to-be-logged messages and replaced with the default `'[secure]'` string.\n\n##### `stream`\n\n- Type: `stream.Writable|stream.Writable[]`\n- Default: `process.stdout`\n\nDestination to which the data is written, can be a single valid [Writable stream](https://nodejs.org/api/stream.html#stream_writable_streams) or an array holding multiple valid Writable streams.\n\n##### `scope`\n\n- Type: `String|String[]`\n\nName of the scope the logger is reporting from.\n\n##### `types`\n\n- Type: `Object`\n\nHolds the configuration of the custom and default loggers.\n\nAdditionally, the configuration object of each custom/default logger type, defined in the `types` option, can hold any of the following attributes: `badge`, `label`, `color`, `logLevel` & `stream`. \n\n##### `badge`\n\n- Type: `String`\n\nThe icon corresponding to the logger.\n\n##### `label`\n\n- Type: `String`\n\nThe label used to identify the type of the logger.\n\n##### `color`\n\n- Type: `String`\n\nThe color of the label, can be any of the foreground colors supported by [chalk](https://github.com/chalk/chalk#colors).\n\n##### `logLevel`\n\n- Type: `String`\n- Default: `'info'`\n\nThe log level corresponding to the logger. Messages originating from the logger are displayed only if the log level is greater or equal to the above described general logging level `logLevel` of the `Signale` instance.\n\n##### `stream`\n\n- Type: `stream.Writable|stream.Writable[]`\n- Default: `process.stdout`\n\nDestination to which the data is written, can be a single valid [Writable stream](https://nodejs.org/api/stream.html#stream_writable_streams) or an array holding multiple valid Writable streams.\n\n### Scoped Loggers\n\nTo create a scoped logger from scratch, define the `scope` field inside the `options` object and pass it as argument to a new signale instance.\n\n```js\nconst {Signale} = require('signale');\n\nconst options = {\n  scope: 'global scope'\n};\n\nconst global = new Signale(options);\nglobal.success('Successful Operation');\n```\n\n<div align=\"center\">\n  <img alt=\"Scope Vanilla\" src=\"media/scope-vanilla.png\" width=\"65%\">\n</div>\n\nTo create a scoped logger based on an already existing one, use the `scope()` function, which will return a new signale instance, inheriting all custom loggers, timers, secrets, streams, configuration, log level, interactive mode & disabled statuses from the initial one.\n\n```js\nconst signale = require('signale');\n\nconst global = signale.scope('global scope');\nglobal.success('Hello from the global scope');\n\nfunction foo() {\n  const outer = global.scope('outer', 'scope');\n  outer.success('Hello from the outer scope');\n  \n  setTimeout(() => {\n    const inner = outer.scope('inner', 'scope'); \n    inner.success('Hello from the inner scope');\n  }, 500);\n}\n\nfoo();\n```\n\n<div align=\"center\">\n  <img alt=\"Scope Existing\" src=\"media/scope-existing.png\" width=\"65%\">\n</div>\n\n### Interactive Loggers\n\nTo initialize an interactive logger, create a new signale instance with the [`interactive`](#interactive) attribute set to `true`. While into the interactive mode, previously logged messages originating from an interactive logger, will be overridden only by new ones originating from the same or a different interactive logger. Note that regular messages originating from regular loggers are not overridden by the interactive ones.\n\n```js\nconst {Signale} = require('signale');\n\nconst interactive = new Signale({interactive: true, scope: 'interactive'});\n\ninteractive.await('[%d/4] - Process A', 1);\n\nsetTimeout(() => {\n  interactive.success('[%d/4] - Process A', 2);\n  setTimeout(() => {\n    interactive.await('[%d/4] - Process B', 3);\n    setTimeout(() => {\n      interactive.error('[%d/4] - Process B', 4);\n      setTimeout(() => {}, 1000);\n    }, 1000);\n  }, 1000);\n}, 1000);\n```\n\n<div align=\"center\">\n  <img alt=\"Interactive Mode\" src=\"media/interactive-mode.gif\" width=\"65%\">\n</div>\n\n### Writable Streams\n\nBy default, all signale instances log their messages to the `process.stdout` stream. This can be modified, to match your own preference, through the [`stream`](#stream) property, where you can define a single or multiple valid Writable streams, which will be used by all logger types to log your data. Additionally, it is possible to define one or more Writable streams exclusively for a specific logger type, thus write data independently from the rest logger types.\n\n```js\nconst {Signale} = require('signale');\n\nconst options = {\n  stream: process.stderr, // All loggers will now write to `process.stderr`\n  types: {\n    error: {\n      // Only `error` will write to both `process.stdout` & `process.stderr`\n      stream: [process.stdout, process.stderr]\n    }\n  }\n};\n\nconst signale = new Signale(options);\nsignale.success('Message will appear on `process.stderr`');\nsignale.error('Message will appear on both `process.stdout` & `process.stderr`');\n```\n\n<div align=\"center\">\n  <img alt=\"Writable Streams\" src=\"media/writable-streams.png\" width=\"73%\">\n</div>\n\n### Secrets Filtering\n\nBy utilizing the `secrets` option, secrets and other sensitive information can be filtered out from the body as well as the metadata, i.e. scope names etc, of to-be-logged messages. The option is part of the configuration object passed to a `Signale` instance on its initialization, and is of type `Array<String|Number>`. The array can hold multiple secrets, all of which are removed, if present, from the to-be-logged messages and are replaced with the default `'[secure]'` string. Additionally, when the unary `signale.scope(name)` function is used, the returned `Signale` instance inherits all the secrets belonging to its parent. The secrets checking process is performed in a **case-sensitive** manner. Also, the unary [`signale.addSecrets()`](https://github.com/klaussinani/signale#signaleaddsecretssecrets) and the nullary [`signale.clearSecrets()`](https://github.com/klaussinani/signale#signaleclearsecrets) functions are available through the API for adding and clearing secrets respectively.\n\nIt is **critical** and **highly recommended** to **not type directly secrets in your code**, thus the following example serves **only** as a simple & easily reproducible usage demonstration.\n\n```js\nconst {Signale} = require('signale');\n\n// In reality secrets could be securely fetched/decrypted through a dedicated API \nconst [USERNAME, TOKEN] = ['klaussinani', 'token'];\n\nconst logger1 = new Signale({\n  secrets: [USERNAME, TOKEN]\n});\n\nlogger1.log('$ exporting USERNAME=%s', USERNAME);\nlogger1.log('$ exporting TOKEN=%s', TOKEN);\n\n// `logger2` inherits all secrets from its parent `logger1`\nconst logger2 = logger1.scope('parent');\n\nlogger2.log('$ exporting USERNAME=%s', USERNAME);\nlogger2.log('$ exporting TOKEN=%s', TOKEN);\n```\n\n<div align=\"center\">\n  <img alt=\"Secrets Filtering\" src=\"media/filter-secrets.png\" width=\"73%\">\n</div>\n\n### Timers\n\nTimer are managed by the `time()` and `timeEnd()` functions. A unique label can be used to identify a timer on initialization, though if none is provided the timer will be assigned one automatically. In addition, calling the `timeEnd()` function without a specified label will have as effect the termination of the most recently initialized timer, that was created without providing a label.\n\n```js\nconst signale = require('signale');\n\nsignale.time('test');\nsignale.time();\nsignale.time();\n\nsetTimeout(() => {\n  signale.timeEnd();\n  signale.timeEnd();\n  signale.timeEnd('test');\n}, 500);\n```\n\n<div align=\"center\">\n  <img alt=\"Timers\" src=\"media/timers.png\" width=\"60%\">\n</div>\n\n## Configuration\n\n### Global\n\nTo enable global configuration define the options under the `signale` namespace in your `package.json`.\n\nThe following illustrates all the available options with their respective default values.\n\n```json\n{\n  \"signale\": {\n    \"displayScope\": true,\n    \"displayBadge\": true,\n    \"displayDate\": false,\n    \"displayFilename\": false,\n    \"displayLabel\": true,\n    \"displayTimestamp\": false,\n    \"underlineLabel\": true,\n    \"underlineMessage\": false,\n    \"underlinePrefix\": false,\n    \"underlineSuffix\": false,\n    \"uppercaseLabel\": false\n  }\n}\n```\n\n<details>\n<summary>View all of the available options in detail.</summary>\n\n##### `displayScope`\n\n- Type: `Boolean`\n- Default: `true`\n\nDisplay the scope name of the logger. \n\n##### `displayBadge`\n\n- Type: `Boolean`\n- Default: `true`\n\nDisplay the badge of the logger.\n\n##### `displayDate`\n\n- Type: `Boolean`\n- Default: `false`\n\nDisplay the current local date in `YYYY-MM-DD` format. \n\n##### `displayFilename`\n\n- Type: `Boolean`\n- Default: `false`\n\nDisplay the name of the file that the logger is reporting from.\n\n##### `displayLabel`\n\n- Type: `Boolean`\n- Default: `true`\n\nDisplay the label of the logger.\n\n##### `displayTimestamp`\n\n- Type: `Boolean`\n- Default: `false`\n\nDisplay the current local time in `HH:MM:SS` format.\n\n##### `underlineLabel`\n\n- Type: `Boolean`\n- Default: `true`\n\nUnderline the logger label.\n\n##### `underlineMessage`\n\n- Type: `Boolean`\n- Default: `false`\n\nUnderline the logger message.\n\n##### `underlinePrefix`\n\n- Type: `Boolean`\n- Default: `false`\n\nUnderline the logger prefix.\n\n##### `underlineSuffix`\n\n- Type: `Boolean`\n- Default: `false`\n\nUnderline the logger suffix.\n\n##### `uppercaseLabel`\n\n- Type: `Boolean`\n- Default: `false`\n\nDisplay the label of the logger in uppercase.\n\n</details>\n\n### Local\n\nTo enable local configuration call the `config()` function on your signale instance. Local configurations will always override any pre-existing configuration inherited from `package.json`.\n\nIn the following example, loggers in the `foo.js` file will run under their own configuration, overriding the `package.json` one.\n\n```js\n// foo.js\nconst signale = require('signale');\n\n// Overrides any existing `package.json` config\nsignale.config({\n  displayFilename: true,\n  displayTimestamp: true,\n  displayDate: false\n}); \n\nsignale.success('Hello from the Global scope');\n```\n\n<div align=\"center\">\n  <img alt=\"Local Config\" src=\"media/local-config.png\" width=\"65%\">\n</div>\n\nAlso, scoped loggers can have their own independent configuration, overriding the one inherited by the parent instance or `package.json`. \n\n```js\n// foo.js\nconst signale = require('signale');\n\nsignale.config({\n  displayFilename: true,\n  displayTimestamp: true,\n  displayDate: false\n});\n\nsignale.success('Hello from the Global scope');\n\nfunction foo() {\n  // `fooLogger` inherits the config of `signale`\n  const fooLogger = signale.scope('foo scope');\n\n  // Overrides both `signale` and `package.json` configs\n  fooLogger.config({\n    displayFilename: true,\n    displayTimestamp: false,\n    displayDate: true\n  });\n\n  fooLogger.success('Hello from the Local scope');\n}\n\nfoo();\n```\n\n<div align=\"center\">\n  <img alt=\"Scope Config\" src=\"media/scope-config.png\" width=\"65%\">\n</div>\n\n## API\n\n#### signale.`<logger>(message[, message]|messageObj|errorObj)`\n\n##### **`logger`**\n\n- Type: `Function`\n\nCan be any default or custom logger.\n\n##### **`message`**\n\n- Type: `String`\n\nCan be one or more comma delimited strings.\n\n```js\nconst signale = require('signale');\n\nsignale.success('Successful operation');\n//=> ✔  success  Successful operation\n\nsignale.success('Successful', 'operation');\n//=> ✔  success  Successful operation\n\nsignale.success('Successful %s', 'operation');\n//=> ✔  success  Successful operation\n```\n\n##### **`errorObj`**\n\n- Type: `Error Object`\n\nCan be any error object.\n\n```js\nconst signale = require('signale');\n\nsignale.error(new Error('Unsuccessful operation'));\n//=> ✖  error  Error: Unsuccessful operation\n//        at Module._compile (module.js:660:30)\n//        at Object.Module._extensions..js (module.js:671:10)\n//        ...\n```\n\n##### **`messageObj`**\n\n- Type: `Object`\n\nCan be an object holding the `prefix`, `message` and `suffix` attributes, with `prefix` and `suffix` always prepended and appended respectively to the logged `message`.\n\n```js\nconst signale = require('signale');\n\nsignale.complete({prefix: '[task]', message: 'Fix issue #59', suffix: '(@klaussinani)'});\n//=> [task] ☒  complete  Fix issue #59 (@klaussinani)\n\nsignale.complete({prefix: '[task]', message: ['Fix issue #%d', 59], suffix: '(@klaussinani)'});\n//=> [task] ☒  complete  Fix issue #59 (@klaussinani)\n```\n\n#### signale.`scope(name[, name])`\n\nDefines the scope name of the logger.\n\n##### **`name`**\n\n- Type: `String`\n\nCan be one or more comma delimited strings.\n\n```js\nconst signale = require('signale');\n\nconst foo = signale.scope('foo'); \nconst fooBar = signale.scope('foo', 'bar');\n\nfoo.success('foo');\n//=> [foo] › ✔  success  foo\n\nfooBar.success('foo bar');\n//=> [foo] [bar] › ✔  success  foo bar\n```\n\n#### signale.`unscope()`\n\nClears the scope name of the logger.\n\n```js\nconst signale = require('signale');\n\nconst foo = signale.scope('foo'); \n\nfoo.success('foo');\n//=> [foo] › ✔  success  foo\n\nfoo.unscope();\n\nfoo.success('foo');\n//=> ✔  success  foo\n```\n\n#### signale.`config(settingsObj)`\n\nSets the configuration of an instance overriding any existing global or local configuration.\n\n##### **`settingsObj`**\n\n- Type: `Object`\n\nCan hold any of the documented [options](#global).\n\n```js\n// foo.js\nconst signale = require('signale');\n\nsignale.config({\n  displayFilename: true,\n  displayTimestamp: true,\n  displayDate: true\n});\n\nsignale.success('Successful operations');\n//=> [2018-5-15] [11:12:38] [foo.js] › ✔  success  Successful operations\n```\n\n#### signale.`time([, label])`\n\n- Return Type: `String`\n\nSets a timers and accepts an optional label. If none provided the timer will receive a unique label automatically.\n\nReturns a string corresponding to the timer label. \n\n##### **`label`**\n\n- Type: `String`\n\nLabel corresponding to the timer. Each timer must have its own unique label.\n\n```js\nconst signale = require('signale');\n\nsignale.time();\n//=> ▶  timer_0  Initialized timer...\n\nsignale.time();\n//=> ▶  timer_1  Initialized timer...\n\nsignale.time('label');\n//=> ▶  label    Initialized timer...\n```\n\n#### signale.`timeEnd([, label])`\n\n- Return Type: `Object`\n\nDeactivates the timer to which the given label corresponds. If no label is provided the most recent timer, that was created without providing a label, will be deactivated.\n\nReturns an object `{label, span}` holding the timer label and the total running time.\n\n##### **`label`**\n\n- Type: `String`\n\nLabel corresponding to the timer, each timer has its own unique label.\n\n```js\nconst signale = require('signale');\n\nsignale.time();\n//=> ▶  timer_0  Initialized timer...\n\nsignale.time();\n//=> ▶  timer_1  Initialized timer...\n\nsignale.time('label');\n//=> ▶  label    Initialized timer...\n\nsignale.timeEnd();\n//=> ◼  timer_1  Timer run for: 2ms\n\nsignale.timeEnd();\n//=> ◼  timer_0  Timer run for: 2ms\n\nsignale.timeEnd('label');\n//=> ◼  label    Timer run for: 2ms\n```\n\n#### signale.`disable()`\n\nDisables the logging functionality of all loggers belonging to a specific instance.\n\n```js\nconst signale = require('signale');\n\nsignale.success('foo');\n//=> ✔  success  foo\n\nsignale.disable();\n\nsignale.success('foo');\n//=>\n```\n\n#### signale.`enable()`\n\nEnables the logging functionality of all loggers belonging to a specific instance.\n\n```js\nconst signale = require('signale');\n\nsignale.disable();\n\nsignale.success('foo');\n//=>\n\nsignale.enable();\n\nsignale.success('foo');\n//=> ✔  success  foo\n```\n\n#### signale.`isEnabled()`\n\nChecks whether the logging functionality of a specific instance is enabled.\n\n```js\nconst signale = require('signale');\n\nsignale.success('foo');\n//=> ✔  success  foo\n\nsignale.isEnabled();\n// => true\n\nsignale.disable();\n\nsignale.success('foo');\n//=>\n\nsignale.isEnabled();\n// => false\n```\n\n#### signale.`addSecrets(secrets)`\n\nAdds new secrets/sensitive-information to the targeted Signale instance.\n\n##### **`secrets`**\n\n- Type: `(String|Number)[]`\n\nArray holding the secrets/sensitive-information to be filtered out.\n\n```js\nconst signale = require('signale');\n\nsignale.log('$ exporting USERNAME=%s', 'klaussinani');\n//=> $ exporting USERNAME=klaussinani\n\nsignale.addSecrets(['klaussinani']);\n\nsignale.log('$ exporting USERNAME=%s', 'klaussinani');\n//=> $ exporting USERNAME=[secure]\n```\n\n#### signale.`clearSecrets()`\n\nRemoves all secrets/sensitive-information from the targeted Signale instance.\n\n```js\nconst signale = require('signale');\n\nsignale.addSecrets(['klaussinani']);\n\nsignale.log('$ exporting USERNAME=%s', 'klaussinani');\n//=> $ exporting USERNAME=[secure]\n\nsignale.clearSecrets();\n\nsignale.log('$ exporting USERNAME=%s', 'klaussinani');\n//=> $ exporting USERNAME=klaussinani\n```\n\n## Development\n\nFor more info on how to contribute to the project, please read the [contributing guidelines](https://github.com/klaussinani/signale/blob/master/contributing.md).\n\n- Fork the repository and clone it to your machine\n- Navigate to your local fork: `cd signale`\n- Install the project dependencies: `npm install` or `yarn install`\n- Lint code for errors: `npm test` or `yarn test`\n\n## Related\n\n- [qoa](https://github.com/klaussinani/qoa) - Minimal interactive command-line prompts\n- [taskbook](https://github.com/klaussinani/taskbook) - Tasks, boards & notes for the command-line habitat\n- [hyperocean](https://github.com/klaussinani/hyperocean) - Deep oceanic blue Hyper terminal theme\n\n## Who's Using It?\n\n- [Boostnote](https://github.com/BoostIO/Boostnote)\n- [Docz](https://github.com/pedronauck/docz)\n- [Remix by Ethereum](https://github.com/ethereum/remix)\n- [Semantic Release](https://github.com/semantic-release/semantic-release)\n- [Shower](https://github.com/shower/shower)\n- [Taskbook](https://github.com/klaussinani/taskbook)\n- [Vant](https://github.com/youzan/vant)\n\nView in detail all the packages and repositories that are using Signale [here](https://github.com/klaussinani/signale/network/dependents).\n\n## Team\n\n- Klaudio Sinani [(@klaudiosinani)](https://github.com/klaudiosinani)\n- Mario Sinani [(@mariosinani)](https://github.com/mariosinani)\n\n## Sponsors\n\nA big thank you to all the people and companies supporting our Open Source work:\n\n- [Better Stack: Spot, Resolve, and Prevent Downtime.](https://betterstack.com/)\n\n\n## License\n\n[MIT](https://github.com/klaussinani/signale/blob/master/license.md)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "types",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}