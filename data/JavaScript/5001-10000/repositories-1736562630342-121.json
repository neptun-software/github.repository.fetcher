{
  "metadata": {
    "timestamp": 1736562630342,
    "page": 121,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jonobr1/two.js",
      "stars": 8364,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.009765625,
          "content": "/**/*.d.ts"
        },
        {
          "name": ".eslintrc.json",
          "type": "blob",
          "size": 0.7578125,
          "content": "{\n\t\"parser\": \"babel-eslint\",\n\t\"extends\": \"eslint:recommended\",\n\t\"env\": {\n\t\t\"browser\": true,\n\t\t\"commonjs\": true,\n\t\t\"amd\": true\n\t},\n\t\"parserOptions\": {\n\t\t\"sourceType\": \"module\",\n\t\t\"ecmaVersion\": 2015\n\t},\n\t\"rules\": {\n\t\t\"semi\": [\"error\", \"always\"],\n\t\t\"no-unused-vars\": [\"error\", {\"args\": \"none\"}]\n\t},\n\t\"overrides\": [\n\t\t{\n\t\t\t\"files\": [\"utils/**\"],\n\t\t\t\"env\": {\n\t\t\t\t\"node\": true,\n\t\t\t\t\"es6\": true\n\t\t\t},\n\t\t\t\"parserOptions\": {\n\t\t\t\t\"ecmaVersion\": 8\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"files\": [\"tests/**\", \"extras/js/**\"],\n\t\t\t\"globals\": {\n\t\t\t\t\"QUnit\": \"writable\",\n\t\t\t\t\"resemble\": \"writable\",\n\t\t\t\t\"Two\": \"writable\",\n\t\t\t\t\"_\": \"writable\"\n\t\t\t},\n\t\t\t\"rules\": {\n\t\t\t\t\"no-redeclare\": \"off\"\n\t\t\t}\n\t\t}\n\t],\n\t\"ignorePatterns\": [\"build/\", \"utils/start-comment.js\", \"utils/end-comment.js\", \"utils/exports.js\", \"junk/\"]\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.529296875,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n\n# Explicitly declare text files you want to always be normalized and converted\n# to native line endings on checkout.\n*.c text\n*.h text\n\n# Declare files that will always have CRLF line endings on checkout.\n*.sln text eol=crlf\n\n# Denote all files that are truly binary and should not be modified.\n*.gif binary\n*.png binary\n*.jpg binary\n*.jpeg binary\n*.mp4 binary\n*.webm binary\n*.eot binary\n*.woff binary\n*.woff2 binary\n*.ttf binary\n*.mp3 binary\n*.ogg binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.072265625,
          "content": "node_modules\n*.DS_Store\njunk/\n*.log\ndocs.json\npackage-lock.json\ndist\n.idea"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0205078125,
          "content": "package-lock = false\n"
        },
        {
          "name": ".nvmrc",
          "type": "blob",
          "size": 0.0068359375,
          "content": "v14.7.0"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.271484375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at inquiries@jono.fyi. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.2568359375,
          "content": "## How to contribute to Two.js\n\n#### **Do you have a question?**\n\n* All questions answered by Two.js maintainers are in the [Issues](https://github.com/jonobr1/two.js/issues?q=label%3Aquestion) section of the project with the label question. Ensure the question was not already asked by checking there first.\n\n* If you're unable to find a question that has been answered, [create one](https://github.com/jonobr1/two.js/issues/new?assignees=&labels=question&template=question.md&title=%5BQuestion%5D). Be sure to include a **title and clear description**, as much relevant information as possible, and a **code sample** in situ or on a third party site like [CodePen](http://codepen.io), [jsfiddle](http://jsfiddle.com), or [glitch](http://glitch.com). This helps us to better help you.\n\n#### **Did you find a bug?**\n\n* **Ensure the bug was not already reported** by searching on the project under [Issues](https://github.com/jonobr1/two.js/issues).\n\n* If you're unable to find an open issue, [open a new one](https://github.com/jonobr1/two.js/issues/new?assignees=&labels=bug&template=bug_report.md&title=%5BBug%5D). Be sure to include a **title and clear description**, as much relevant information as possible, and a **code sample** in situ or on a third party site like [CodePen](http://codepen.io), [jsfiddle](http://jsfiddle.com), or [glitch](http://glitch.com) demonstrating the issue.\n\n#### **Did you write a patch that fixes a bug, add a new feature, or change an existing one?**\n\n* Open a new GitHub pull request with the patch.\n\n* Ensure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.\n\n#### **Do you want to contribute to the Two.js documentation?**\n\n* This is still in its infancy and if you're interested to help out, please send an email to [inquires@jono.fyi](mailto:inquiries@jono.fyi) with the subject \"Two.js Documentation\". In the body of your email please describe why or how you'd like to help.\n\nTwo.js is a volunteer effort, so we apologize in advance for any delays.\n\nThanks! For both taking the time to read this and contributing.\n\nMuch :heart: from the Two.js Team\n\n---\nThis document is adapted from the [Ruby on Rails](https://github.com/rails/rails/blob/main/CONTRIBUTING.md#how-to-contribute-to-ruby-on-rails) project.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.064453125,
          "content": "MIT License\n\nCopyright (c) 2012 - 2024 @jonobr1 / http://jono.fyi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.810546875,
          "content": "# Two.js\n\n[![NPM Package][npm]][npm-url]\n[![Build Size][build-size]][build-size-url]\n[![NPM Downloads][npm-downloads]][npmtrends-url]\n\nA two-dimensional drawing api meant for modern browsers. It is renderer agnostic enabling the same api to render in multiple contexts: webgl, canvas2d, and svg.\n\n[Home](http://two.js.org/) • [Releases](https://github.com/jonobr1/two.js/releases) • [Examples](http://two.js.org/examples/) • [Documentation](https://two.js.org/docs/two/) • [Change Log](https://github.com/jonobr1/two.js/tree/dev/wiki/changelog) • [Help](https://github.com/jonobr1/two.js/issues/new/choose)\n\n## Usage\nDownload the latest [minified library](https://raw.github.com/jonobr1/two.js/dev/build/two.min.js) and include it in your html.\n\n```html\n<script src=\"js/two.min.js\"></script>\n```\n\nIt can also be installed via [npm](https://www.npmjs.com/package/two.js), Node Package Manager:\n\n```js\nnpm install --save two.js\n```\nAlternatively see [how to build the library yourself](https://github.com/jonobr1/two.js#custom-build).\n\n\nHere is boilerplate html in order to draw a spinning rectangle in two.js:\n\n```html\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <script src=\"js/two.min.js\"></script>\n  </head>\n  <body>\n    <script>\n      var two = new Two({\n        fullscreen: true,\n        autostart: true\n      }).appendTo(document.body);\n      var rect = two.makeRectangle(two.width / 2, two.height / 2, 50 ,50);\n      two.bind('update', function() {\n        rect.rotation += 0.001;\n      });\n    </script>\n  </body>\n</html>\n```\n\n## Custom Build\nTwo.js uses [nodejs](http://nodejs.org/) in order to build source files. You'll first want to install that. Once installed open up a terminal and head to the repository folder:\n\n```\ncd ~/path-to-repo/two.js\nnpm install\n```\n\nThis will give you a number of libraries that the development of Two.js relies on. If for instance you only use the `SVGRenderer` then you can really cut down on the file size by excluding the other renderers. To do this, modify `/utils/build.js` to only add the files you'd like. Then run:\n\n```\nnode ./utils/build\n```\n\nAnd the resulting `/build/two.js` and `/build/two.min.js` will be updated to your specification.\n\n---\n\n### Using ES6 Imports\n\nAs of version `v0.7.5+` Two.js is compatible with EcmaScript 6 imports. This is typically employed in contemporary frameworks like [React](https://reactjs.org/) and [Angular](https://angularjs.org/) as well as bundling libraries like [webpack](https://webpack.js.org/), [esbuild](https://esbuild.github.io/), and [gulp](https://gulpjs.com/). This adaptation of the boilerplate can be found on [CodeSandbox](https://codesandbox.io/s/beautiful-wilbur-ygxbc?file=/src/App.js:0-664):\n\n```jsx\nimport React, { useEffect, useRef } from \"react\";\nimport Two from \"two.js\";\n\nexport default function App() {\n  var domElement = useRef();\n\n  useEffect(setup, []);\n\n  function setup() {\n    var two = new Two({\n      fullscreen: true,\n      autostart: true\n    }).appendTo(domElement.current);\n\n    var rect = two.makeRectangle(two.width / 2, two.height / 2, 50, 50);\n    two.bind(\"update\", update);\n\n    return unmount;\n\n    function unmount() {\n      two.unbind(\"update\");\n      two.pause();\n      domElement.current.removeChild(two.renderer.domElement);\n    }\n\n    function update() {\n      rect.rotation += 0.001;\n    }\n  }\n\n  return <div ref={domElement} />;\n}\n```\n\nIn addition to importing, the published packages of Two.js include the specific modules. So, if necessary you can import specific modules from the source code and bundle / minify for yourself like so:\n\n```javascript\nimport { Vector } from 'two.js/src/vector.js';\n\n// In TypeScript environments leave out the \".js\"\n// when importing modules directly. e.g:\nimport { Vector } from 'two.js/src/vector';\n```\n\n_While useful, the main import of the `Two` namespace imports all modules. So, there isn't yet proper tree shaking implemented for the library, though it's on the roadmap._\n\n### Running in Headless Environments\n\nAs of version `v0.7.x` Two.js can also run in a headless environment, namely running on the server with the help of a library called [Node Canvas](https://github.com/Automattic/node-canvas). We don't add Node Canvas to dependencies of Two.js because it's _not necessary_ to run it in the browser. However, it has all the hooks set up to run in a cloud environment. To get started follow the installation instructions on Automattic's [readme](https://github.com/Automattic/node-canvas#installation). After you've done that run:\n\n```\nnpm install canvas\nnpm install two.js\n```\n\nNow in a JavaScript file set up your Two.js scenegraph and save out frames whenever you need to:\n\n```javascript\nvar { createCanvas, Image } = require('canvas');\nvar Two = require('two.js')\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar width = 800;\nvar height = 600;\n\nvar canvas = createCanvas(width, height);\nTwo.Utils.shim(canvas, Image);\n\nvar time = Date.now();\n\nvar two = new Two({\n  width: width,\n  height: height,\n  domElement: canvas\n});\n\nvar rect = two.makeRectangle(width / 2, height / 2, 50, 50);\nrect.fill = 'rgb(255, 100, 100)';\nrect.noStroke();\n\ntwo.render();\n\nvar settings = { compressionLevel: 3, filters: canvas.PNG_FILTER_NONE };\nfs.writeFileSync(path.resolve(__dirname, './images/rectangle.png'), canvas.toBuffer('image/png', settings));\nconsole.log('Finished rendering. Time took: ', Date.now() - time);\n\nprocess.exit();\n\n```\n\n## Build Documentation\nThe [Two.js](http://two.js.org/) website is bundled with this repository. Relying on [Vuepress](https://vuepress.vuejs.org/) the repository generates a website based on numerous `README.md` files housed in the `wiki` directory. Use the following the node commands as follows:\n\n```bash\nnpm run docs:generate   // Generate README.md files for documentation from source code comments\nnpm run docs:dev        // Creates a local server to generate all documentation\nnpm run docs:build      // Builds out static site and associated files to wiki/.vuepress/dist\n```\n\nN.B: Vuepress is a legacy library and as such these commands rely on an older version of Node. Run `nvm use` if you get errors. If you don't use [Node Version Manager](https://github.com/nvm-sh/nvm) then see `.nvmrc` to install the correct version of node on your local machine.\n\n## Change Log\nTwo.js has been in operation since 2012. For a full list of changes from its first alpha version built with [Three.js](http://threejs.org/) to the most up-to-date tweaks. Check out the wiki [here](./wiki/changelog).\n\n---\n\n#### And a big thank you to our sponsors who include:\n[Epilogue Press](https://github.com/epiloguepress)\n\n[npm]: https://img.shields.io/npm/v/two.js\n[npm-url]: https://www.npmjs.com/package/two.js\n[build-size]: https://badgen.net/bundlephobia/minzip/two.js\n[build-size-url]: https://bundlephobia.com/result?p=two.js\n[npm-downloads]: https://img.shields.io/npm/dt/two.js\n[npmtrends-url]: https://www.npmtrends.com/two.js\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "deploy.sh",
          "type": "blob",
          "size": 0.3115234375,
          "content": "#!/usr/bin/env sh\n\n# abort on errors\nset -e\n\n# build\nnpm run docs:build\n\n# navigate into the build output directory\ncd wiki/.vuepress/dist\n\n# if you are deploying to a custom domain\necho 'two.js.org' > CNAME\n\ngit init\ngit add -A\ngit commit -m 'deploy'\n\ngit push -f git@github.com:jonobr1/two.js.git main:gh-pages\n\ncd -\n"
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.8857421875,
          "content": "{\n  \"name\": \"two.js\",\n  \"version\": \"v0.8.16\",\n  \"description\": \"A renderer agnostic two-dimensional drawing api for the web.\",\n  \"module\": \"build/two.module.js\",\n  \"types\": \"types.d.ts\",\n  \"files\": [\n    \"package.json\",\n    \"LICENSE\",\n    \"README.md\",\n    \"build\",\n    \"extras\",\n    \"src\",\n    \"types.d.ts\"\n  ],\n  \"scripts\": {\n    \"build\": \"node ./utils/build\",\n    \"dev\": \"esbuild --servedir=. --serve=8080\",\n    \"docs:generate\": \"node ./utils/document\",\n    \"docs:dev\": \"vuepress dev wiki\",\n    \"docs:build\": \"vuepress build wiki\",\n    \"docs:publish\": \"./deploy.sh\",\n    \"lint\": \"eslint . --fix\",\n    \"types\": \"tsc --outFile types.d.ts\"\n  },\n  \"directories\": {\n    \"docs\": \"wiki/docs\",\n    \"test\": \"tests\",\n    \"example\": \"wiki/examples\"\n  },\n  \"keywords\": [\n    \"svg\",\n    \"canvas2d\",\n    \"webgl\",\n    \"animation\",\n    \"rendering\",\n    \"scenegraph\",\n    \"motiongraphics\",\n    \"visualization\",\n    \"dom\",\n    \"w3c\",\n    \"bitmap\",\n    \"vector\"\n  ],\n  \"homepage\": \"https://two.js.org/\",\n  \"author\": {\n    \"name\": \"jonobr1\",\n    \"url\": \"http://jonobr1.com/\"\n  },\n  \"main\": \"build/two.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/jonobr1/two.js\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/jonobr1/two.js/issues\"\n  },\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@vuepress/plugin-google-analytics\": \"^1.8.2\",\n    \"@vuepress/plugin-nprogress\": \"^1.5.4\",\n    \"babel-eslint\": \"^10.1.0\",\n    \"chalk\": \"^2.4.2\",\n    \"commander\": \"^2.20.3\",\n    \"esbuild\": \"^0.14.6\",\n    \"eslint\": \"^7.8.1\",\n    \"esm\": \"^3.2.25\",\n    \"gzip-size\": \"^5.1.1\",\n    \"jsdoc\": \"^3.6.6\",\n    \"jsdoc-api\": \"^6.0.0\",\n    \"typescript\": \"^4.5.4\",\n    \"vuepress\": \"^1.9.5\",\n    \"vuepress-plugin-sitemap\": \"^2.3.1\"\n  },\n  \"autoupdate\": {\n    \"source\": \"git\",\n    \"target\": \"git://github.com/jonobr1/two.js.git\",\n    \"fileMap\": [\n      {\n        \"basePath\": \"build\",\n        \"files\": [\n          \"two*.js\"\n        ]\n      }\n    ]\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.228515625,
          "content": "{\n  \"include\": [\"src/**/*\", \"extras/jsm/**/*\"],\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"declaration\": true,\n    \"emitDeclarationOnly\": true,\n    \"lib\": [\"es6\", \"dom\"],\n    \"module\": \"commonjs\",\n    \"baseUrl\": \"./src/\",\n  }\n}\n"
        },
        {
          "name": "types.d.ts",
          "type": "blob",
          "size": 166.93359375,
          "content": "declare module 'two.js/src/utils/path-commands' {\n  export interface Commands {\n    move: 'M';\n    line: 'L';\n    curve: 'C';\n    arc: 'A';\n    close: 'Z';\n  }\n}\ndeclare module 'two.js/src/utils/root' {\n  export let root: any;\n}\ndeclare module 'two.js/src/utils/math' {\n  /**\n   * @name Two.Utils.decomposeMatrix\n   * @function\n   * @param {Matrix} matrix - The matrix to decompose.\n   * @returns {Object} An object containing relevant skew values.\n   * @description Decompose a 2D 3x3 Matrix to find the skew.\n   */\n  export function decomposeMatrix(matrix: Matrix): any;\n  export function decomposeMatrix(\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    e: number,\n    f: number\n  ): any;\n  /**\n   * @name Two.Utils.getComputedMatrix\n   * @function\n   * @param {Shape} object - The Two.js object that has a matrix property to calculate from.\n   * @param {Matrix} [matrix] - The matrix to apply calculated transformations to if available.\n   * @returns {Matrix} The computed matrix of a nested object. If no `matrix` was passed in arguments then a `new Two.Matrix` is returned.\n   * @description Method to get the world space transformation of a given object in a Two.js scene.\n   */\n  export function getComputedMatrix(object: Shape, matrix?: Matrix): Matrix;\n  export function getPoT(value: any): number;\n  export function setMatrix(matrix: any): void;\n  /**\n   * @name Two.Utils.lerp\n   * @function\n   * @param {Number} a - Start value.\n   * @param {Number} b - End value.\n   * @param {Number} t - Zero-to-one value describing percentage between a and b.\n   * @returns {Number}\n   * @description Linear interpolation between two values `a` and `b` by an amount `t`.\n   */\n  export function lerp(a: number, b: number, t: number): number;\n  /**\n   * @name Two.Utils.mod\n   * @function\n   * @param {Number} v - The value to modulo\n   * @param {Number} l - The value to modulo by\n   * @returns {Number}\n   * @description Modulo with added functionality to handle negative values in a positive manner.\n   */\n  export function mod(v: number, l: number): number;\n  export const NumArray: any;\n  /**\n   * @name Two.Utils.toFixed\n   * @function\n   * @param {Number} v - Any float\n   * @returns {Number} That float trimmed to the third decimal place.\n   * @description A pretty fast toFixed(3) alternative.\n   * @see {@link http://jsperf.com/parsefloat-tofixed-vs-math-round/18}\n   */\n  export function toFixed(v: number): number;\n  export const TWO_PI: number;\n  export const HALF_PI: number;\n  import { Matrix } from 'two.js/src/matrix';\n  import { Shape } from 'two.js/src/shape';\n}\ndeclare module 'two.js/src/events' {\n  /**\n   * @name Two.Events\n   * @class\n   * @description Object inherited by many Two.js objects in order to facilitate custom events.\n   */\n  export class Events {\n    /**\n     * @name Two.Events.Types\n     * @property {Object} - Object of different types of Two.js specific events.\n     */\n    static Types: {\n      play: string;\n      pause: string;\n      update: string;\n      render: string;\n      resize: string;\n      change: string;\n      remove: string;\n      insert: string;\n      order: string;\n      load: string;\n    };\n    static Methods: string[];\n    _events: {};\n    _bound: boolean;\n    /**\n     * @name Two.Events#addEventListener\n     * @function\n     * @param {String} [name] - The name of the event to bind a function to.\n     * @param {Function} [handler] - The function to be invoked when the event is dispatched.\n     * @description Call to add a listener to a specific event name.\n     */\n    addEventListener(name?: string, handler?: Function): Events;\n    /**\n     * @name Two.Events#on\n     * @function\n     * @description Alias for {@link Two.Events#addEventListener}.\n     */\n    on(...args: any[]): any;\n    /**\n     * @name Two.Events#bind\n     * @function\n     * @description Alias for {@link Two.Events#addEventListener}.\n     */\n    bind(...args: any[]): any;\n    /**\n     * @name Two.Events#removeEventListener\n     * @function\n     * @param {String} [name] - The name of the event intended to be removed.\n     * @param {Function} [handler] - The handler intended to be reomved.\n     * @description Call to remove listeners from a specific event. If only `name` is passed then all the handlers attached to that `name` will be removed. If no arguments are passed then all handlers for every event on the obejct are removed.\n     */\n    removeEventListener(name?: string, handler?: Function): Events;\n    /**\n     * @name Two.Events#off\n     * @function\n     * @description Alias for {@link Two.Events#removeEventListener}.\n     */\n    off(...args: any[]): any;\n    /**\n     * @name Two.Events#unbind\n     * @function\n     * @description Alias for {@link Two.Events#removeEventListener}.\n     */\n    unbind(...args: any[]): any;\n    /**\n     * @name Two.Events#dispatchEvent\n     * @function\n     * @param {String} name - The name of the event to dispatch.\n     * @param args - Anything can be passed after the name and those will be passed on to handlers attached to the event in the order they are passed.\n     * @description Call to trigger a custom event. Any additional arguments passed after the name will be passed along to the attached handlers.\n     */\n    dispatchEvent(name: string, ...args: any[]): Events;\n    trigger(...args: any[]): any;\n    listen(obj: any, name: any, handler: any): Events;\n    ignore(obj: any, name: any, handler: any): Events;\n  }\n}\ndeclare module 'two.js/src/vector' {\n  /**\n     * @name Two.Vector\n     * @class\n\n     * @param {Number} [x=0] - Any number to represent the horizontal x-component of the vector.\n     * @param {Number} [y=0] - Any number to represent the vertical y-component of the vector.\n     * @description A class to store x / y component vector data. In addition to storing data `Two.Vector` has suped up methods for commonplace mathematical operations.\n     */\n  export class Vector extends Events {\n    /**\n     * @name Two.Vector.zero\n     * @readonly\n     * @property {Vector} - Handy reference to a vector with component values 0, 0 at all times.\n     */\n    static readonly zero: Vector;\n    /**\n     * @name Two.Vector.add\n     * @function\n     * @param {Vector} v1\n     * @param {Vector} v2\n     * @returns {Vector}\n     * @description Add two vectors together.\n     */\n    static add(v1: Vector, v2: Vector): Vector;\n    /**\n     * @name Two.Vector.sub\n     * @function\n     * @param {Vector} v1\n     * @param {Vector} v2\n     * @returns {Vector}\n     * @description Subtract two vectors: `v2` from `v1`.\n     */\n    static sub(v1: Vector, v2: Vector): Vector;\n    /**\n     * @name Two.Vector.subtract\n     * @function\n     * @description Alias for {@link Two.Vector.sub}.\n     */\n    static subtract(v1: Vector, v2: Vector): Vector;\n    /**\n     * @name Two.Vector.ratioBetween\n     * @function\n     * @param {Vector} v1\n     * @param {Vector} v2\n     * @returns {Number} The ratio betwen two points `v1` and `v2`.\n     */\n    static ratioBetween(v1: Vector, v2: Vector): number;\n    /**\n     * @name Two.Vector.angleBetween\n     * @function\n     * @param {Vector} v1\n     * @param {Vector} v2\n     * @returns {Number} The angle between points `v1` and `v2`.\n     */\n    static angleBetween(v1: Vector, v2: Vector): number;\n    static angleBetween(x1: number, y1: number, x2: number, y2: number): number;\n    /**\n     * @name Two.Vector.distanceBetween\n     * @function\n     * @param {Vector} v1\n     * @param {Vector} v2\n     * @returns {Number} The distance between points `v1` and `v2`. Distance is always positive.\n     */\n    static distanceBetween(v1: Vector, v2: Vector): number;\n    /**\n     * @name Two.Vector.distanceBetweenSquared\n     * @function\n     * @param {Vector} v1\n     * @param {Vector} v2\n     * @returns {Number} The squared distance between points `v1` and `v2`.\n     */\n    static distanceBetweenSquared(v1: Vector, v2: Vector): number;\n    constructor(x?: number, y?: number);\n    /**\n     * @name Two.Vector#_x\n     * @private\n     */\n    private _x;\n    /**\n     * @name Two.Vector#_y\n     * @private\n     */\n    private _y;\n    /**\n     * @name Two.Vector#x\n     * @property {Number} - The horizontal x-component of the vector.\n     * @type {Number}\n     */\n    x: number;\n    /**\n     * @name Two.Vector#y\n     * @property {Number} - The vertical y-component of the vector.\n     * @type {Number}\n     */\n    y: number;\n    set(x: number, y: number): Vector;\n    /**\n     * @name Two.Vector#copy\n     * @function\n     * @param {Vector} v\n     * @description Copy the x / y components of another object `v`.\n     */\n    copy(v: Vector): Vector;\n    /**\n     * @name Two.Vector#clear\n     * @function\n     * @description Set the x / y component values of the vector to zero.\n     */\n    clear(): Vector;\n    /**\n     * @name Two.Vector#clone\n     * @function\n     * @description Create a new vector and copy the existing values onto the newly created instance.\n     */\n    clone(): Vector;\n    /**\n     * @name Two.Vector#add\n     * @function\n     * @param {Vector} v\n     * @description Add an object with x / y component values to the instance.\n     * @overloaded\n     */\n    add(v: Vector): Vector;\n    /**\n     * @name Two.Vector#add\n     * @function\n     * @param {Number} v\n     * @description Add the **same** number to both x / y component values of the instance.\n     * @overloaded\n     */\n    add(v: number): Vector;\n    /**\n     * @name Two.Vector#add\n     * @function\n     * @param {Number} x\n     * @param {Number} y\n     * @description Add `x` / `y` values to their respective component value on the instance.\n     * @overloaded\n     */\n    add(x: number, y: number): Vector;\n    /**\n     * @name Two.Vector#addSelf\n     * @function\n     * @description Alias for {@link Two.Vector.add}.\n     */\n    addSelf(x: number, y: number): Vector;\n    addSelf(v: Vector): Vector;\n    addSelf(v: number): Vector;\n    /**\n     * @name Two.Vector#sub\n     * @function\n     * @param {Vector} v\n     * @description Subtract an object with x / y component values to the instance.\n     * @overloaded\n     */\n    sub(v: Vector): Vector;\n    /**\n     * @name Two.Vector#sub\n     * @function\n     * @param {Number} v\n     * @description Subtract the **same** number to both x / y component values of the instance.\n     * @overloaded\n     */\n    sub(v: number): Vector;\n    /**\n     * @name Two.Vector#sub\n     * @function\n     * @param {Number} x\n     * @param {Number} y\n     * @description Subtract `x` / `y` values to their respective component value on the instance.\n     * @overloaded\n     */\n    sub(x: number, y: number): Vector;\n    /**\n     * @name Two.Vector#subtract\n     * @function\n     * @description Alias for {@link Two.Vector.sub}.\n     */\n    subtract(x: number, y: number): Vector;\n    subtract(v: number): Vector;\n    subtract(v: Vector): Vector;\n    /**\n     * @name Two.Vector#subSelf\n     * @function\n     * @description Alias for {@link Two.Vector.sub}.\n     */\n    subSelf(x: number, y: number): Vector;\n    subSelf(v: number): Vector;\n    subSelf(v: Vector): Vector;\n    /**\n     * @name Two.Vector#subtractSelf\n     * @function\n     * @description Alias for {@link Two.Vector.sub}.\n     */\n    subtractSelft(x: number, y: number): Vector;\n    subtractSelft(v: number): Vector;\n    subtractSelft(v: Vector): Vector;\n    /**\n     * @name Two.Vector#multiply\n     * @function\n     * @param {Vector} v\n     * @description Multiply an object with x / y component values to the instance.\n     * @overloaded\n     */\n    multiply(v: number): Vector;\n    /**\n     * @name Two.Vector#multiply\n     * @function\n     * @param {Number} v\n     * @description Multiply the **same** number to both x / y component values of the instance.\n     * @overloaded\n     */\n    multiply(v: Vector): Vector;\n    /**\n     * @name Two.Vector#multiply\n     * @function\n     * @param {Number} x\n     * @param {Number} y\n     * @description Multiply `x` / `y` values to their respective component value on the instance.\n     * @overloaded\n     */\n    multiply(x: number, y: number): Vector;\n    /**\n     * @name Two.Vector#multiplySelf\n     * @function\n     * @description Alias for {@link Two.Vector.multiply}.\n     */\n    multiplySelf(v: any, ...args: any[]): any;\n    /**\n     * @name Two.Vector#multiplyScalar\n     * @function\n     * @param {Number} s - The scalar to multiply by.\n     * @description Mulitiply the vector by a single number. Shorthand to call {@link Two.Vector#multiply} directly.\n     */\n    multiplyScalar(s: number): Vector;\n    /**\n     * @name Two.Vector#divide\n     * @function\n     * @param {Vector} v\n     * @description Divide an object with x / y component values to the instance.\n     * @overloaded\n     */\n    divide(v: Vector): Vector;\n    /**\n     * @name Two.Vector#divide\n     * @function\n     * @param {Number} v\n     * @description Divide the **same** number to both x / y component values of the instance.\n     * @overloaded\n     */\n    divide(v: number): Vector;\n    /**\n     * @name Two.Vector#divide\n     * @function\n     * @param {Number} x\n     * @param {Number} y\n     * @description Divide `x` / `y` values to their respective component value on the instance.\n     * @overloaded\n     */\n    divide(x: number, y: number): Vector;\n    /**\n     * @name Two.Vector#divideSelf\n     * @function\n     * @description Alias for {@link Two.Vector.divide}.\n     */\n    divideSelf(x: number, y: number): Vector;\n    divideSelf(v: number): Vector;\n    divideSelf(v: Vector): Vector;\n    /**\n     * @name Two.Vector#divideScalar\n     * @function\n     * @param {Number} s - The scalar to divide by.\n     * @description Divide the vector by a single number. Shorthand to call {@link Two.Vector#divide} directly.\n     */\n    divideScalar(s: number): Vector;\n    /**\n     * @name Two.Vector#negate\n     * @function\n     * @description Invert each component's sign value.\n     */\n    negate(): Vector;\n    /**\n     * @name Two.Vector#negate\n     * @function\n     * @returns {Number}\n     * @description Get the [dot product](https://en.wikipedia.org/wiki/Dot_product) of the vector.\n     */\n    dot(v: Vector): number;\n    /**\n     * @name Two.Vector#length\n     * @function\n     * @returns {Number}\n     * @description Get the length of a vector.\n     */\n    length(): number;\n    /**\n     * @name Two.Vector#lengthSquared\n     * @function\n     * @returns {Number}\n     * @description Get the length of the vector to the power of two. Widely used as less expensive than {@link Two.Vector#length} because it isn't square-rooting any numbers.\n     */\n    lengthSquared(): number;\n    /**\n     * @name Two.Vector#normalize\n     * @function\n     * @description Normalize the vector from negative one to one.\n     */\n    normalize(): Vector;\n    /**\n     * @name Two.Vector#distanceTo\n     * @function\n     * @returns {Number}\n     * @description Get the distance between two vectors.\n     */\n    distanceTo(v: any): number;\n    /**\n     * @name Two.Vector#distanceToSquared\n     * @function\n     * @returns {Number}\n     * @description Get the distance between two vectors to the power of two. Widely used as less expensive than {@link Two.Vector#distanceTo} because it isn't square-rooting any numbers.\n     */\n    distanceToSquared(v: Vector): number;\n    /**\n     * @name Two.Vector#setLength\n     * @function\n     * @param {Number} l - length to set vector to.\n     * @description Set the length of a vector.\n     */\n    setLength(l: number): Vector;\n    /**\n     * @name Two.Vector#equals\n     * @function\n     * @param {Vector} v - The vector to compare against.\n     * @param {Number} [eps=0.0001] - An options epsilon for precision.\n     * @returns {Boolean}\n     * @description Qualify if one vector roughly equal another. With a margin of error defined by epsilon.\n     */\n    equals(v: Vector, eps?: number): boolean;\n    /**\n     * @name Two.Vector#lerp\n     * @function\n     * @param {Vector} v - The destination vector to step towards.\n     * @param {Number} t - The zero to one value of how close the current vector gets to the destination vector.\n     * @description Linear interpolate one vector to another by an amount `t` defined as a zero to one number.\n     * @see [Matt DesLauriers](https://twitter.com/mattdesl/status/1031305279227478016) has a good thread about this.\n     */\n    lerp(v: Vector, t: number): Vector;\n    /**\n     * @name Two.Vector#isZero\n     * @function\n     * @param {Number} [eps=0.0001] - Optional precision amount to check against.\n     * @returns {Boolean}\n     * @description Check to see if vector is roughly zero, based on the `epsilon` precision value.\n     */\n    isZero(eps?: number): boolean;\n    /**\n     * @name Two.Vector#toObject\n     * @function\n     * @returns {Object}\n     * @description Return a JSON compatible plain object that represents the vector.\n     */\n    toObject(): any;\n    /**\n     * @name Two.Vector#rotate\n     * @function\n     * @param {Number} radians - The amount to rotate the vector by in radians.\n     * @description Rotate a vector.\n     */\n    rotate(radians: number): Vector;\n  }\n  import { Events } from 'two.js/src/events';\n}\ndeclare module 'two.js/src/anchor' {\n  /**\n     * @class\n     * @name Two.Anchor\n     * @param {Number} [x=0] - The x position of the root anchor point.\n     * @param {Number} [y=0] - The y position of the root anchor point.\n     * @param {Number} [ax=0] - The x position of the left handle point.\n     * @param {Number} [ay=0] - The y position of the left handle point.\n     * @param {Number} [bx=0] - The x position of the right handle point.\n     * @param {Number} [by=0] - The y position of the right handle point.\n     * @param {String} [command=Two.Commands.move] - The command to describe how to render. Applicable commands are {@link Two.Commands}\n\n     * @description An object that holds 3 {@link Two.Vector}s, the anchor point and its corresponding handles: `left` and `right`. In order to properly describe the bezier curve about the point there is also a command property to describe what type of drawing should occur when Two.js renders the anchors.\n     */\n  export class Anchor extends Vector {\n    static makeBroadcast(scope: any): () => void;\n    constructor(\n      x?: number,\n      y?: number,\n      ax?: number,\n      ay?: number,\n      bx?: number,\n      by?: number,\n      command?: string\n    );\n    controls: {\n      left: Vector;\n      right: Vector;\n    };\n    _command: string;\n    _relative: boolean;\n    _rx: number;\n    _ry: number;\n    _xAxisRotation: number;\n    _largeArcFlag: number;\n    _sweepFlag: number;\n    command: string;\n    relative: boolean;\n    rx: any;\n    ry: any;\n    xAxisRotation: any;\n    largeArcFlag: any;\n    sweepFlag: any;\n  }\n  import { Vector } from 'two.js/src/vector';\n}\ndeclare module 'two.js/src/constants' {\n  export interface Constants {\n    nextFrameID: number;\n    Types: {\n      webgl: string;\n      svg: string;\n      canvas: string;\n    };\n    Version: string;\n    PublishDate: string;\n    Identifier: string;\n    Resolution: number;\n    AutoCalculateImportedMatrices: boolean;\n    Instances: any[];\n    uniqueId(): number;\n  }\n}\ndeclare module 'two.js/src/utils/curves' {\n  export interface Curve {\n    CollinearityEpsilon: number;\n    RecursionLimit: number;\n    CuspLimit: number;\n    Tolerance: {\n      distance: number;\n      angle: number;\n      epsilon: number;\n    };\n    abscissas: number[][];\n    weights: number[][];\n  }\n  /**\n   * @name Two.Utils.getComponentOnCubicBezier\n   * @function\n   * @param {Number} t - Zero-to-one value describing what percentage to calculate.\n   * @param {Number} a - The firt point's component value.\n   * @param {Number} b - The first point's bezier component value.\n   * @param {Number} c - The second point's bezier component value.\n   * @param {Number} d - The second point's component value.\n   * @returns {Number} The coordinate value for a specific component along a cubic bezier curve by `t`.\n   */\n  export function getComponentOnCubicBezier(\n    t: number,\n    a: number,\n    b: number,\n    c: number,\n    d: number\n  ): number;\n  /**\n   * @name Two.Utils.subdivide\n   * @function\n   * @param {Number} x1 - x position of first anchor point.\n   * @param {Number} y1 - y position of first anchor point.\n   * @param {Number} x2 - x position of first anchor point's \"right\" bezier handle.\n   * @param {Number} y2 - y position of first anchor point's \"right\" bezier handle.\n   * @param {Number} x3 - x position of second anchor point's \"left\" bezier handle.\n   * @param {Number} y3 - y position of second anchor point's \"left\" bezier handle.\n   * @param {Number} x4 - x position of second anchor point.\n   * @param {Number} y4 - y position of second anchor point.\n   * @param {Number} [limit=Two.Utils.Curve.RecursionLimit] - The amount of vertices to create by subdividing.\n   * @returns {Anchor[]} A list of anchor points ordered in between `x1`, `y1` and `x4`, `y4`\n   * @description Given 2 points (a, b) and corresponding control point for each return an array of points that represent points plotted along the curve. The number of returned points is determined by `limit`.\n   */\n  export function subdivide(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    x3: number,\n    y3: number,\n    x4: number,\n    y4: number,\n    limit?: number\n  ): Anchor[];\n  /**\n   * @name Two.Utils.getCurveLength\n   * @function\n   * @param {Number} x1 - x position of first anchor point.\n   * @param {Number} y1 - y position of first anchor point.\n   * @param {Number} x2 - x position of first anchor point's \"right\" bezier handle.\n   * @param {Number} y2 - y position of first anchor point's \"right\" bezier handle.\n   * @param {Number} x3 - x position of second anchor point's \"left\" bezier handle.\n   * @param {Number} y3 - y position of second anchor point's \"left\" bezier handle.\n   * @param {Number} x4 - x position of second anchor point.\n   * @param {Number} y4 - y position of second anchor point.\n   * @param {Number} [limit=Two.Utils.Curve.RecursionLimit] - The amount of vertices to create by subdividing.\n   * @returns {Number} The length of a curve.\n   * @description Given 2 points (a, b) and corresponding control point for each, return a float that represents the length of the curve using Gauss-Legendre algorithm. Limit iterations of calculation by `limit`.\n   */\n  export function getCurveLength(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    x3: number,\n    y3: number,\n    x4: number,\n    y4: number,\n    limit?: number\n  ): number;\n  /**\n   * @name Two.Utils.getCurveBoundingBox\n   * @function\n   * @param {Number} x1 - x position of first anchor point.\n   * @param {Number} y1 - y position of first anchor point.\n   * @param {Number} x2 - x position of first anchor point's \"right\" bezier handle.\n   * @param {Number} y2 - y position of first anchor point's \"right\" bezier handle.\n   * @param {Number} x3 - x position of second anchor point's \"left\" bezier handle.\n   * @param {Number} y3 - y position of second anchor point's \"left\" bezier handle.\n   * @param {Number} x4 - x position of second anchor point.\n   * @param {Number} y4 - y position of second anchor point.\n   * @returns {Object} Object contains min and max `x` / `y` bounds.\n   * @see {@link https://github.com/adobe-webplatform/Snap.svg/blob/master/src/path.js#L856}\n   */\n  export function getCurveBoundingBox(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    x3: number,\n    y3: number,\n    x4: number,\n    y4: number\n  ): any;\n  /**\n   * @name Two.Utils.integrate\n   * @function\n   * @param {Function} f\n   * @param {Number} a\n   * @param {Number} b\n   * @param {Number} n\n   * @description Integration for `getCurveLength` calculations.\n   * @see [Paper.js](@link https://github.com/paperjs/paper.js/blob/master/src/util/Numerical.js#L101)\n   */\n  export function integrate(\n    f: Function,\n    a: number,\n    b: number,\n    n: number\n  ): number;\n  /**\n   * @name Two.Utils.getCurveFromPoints\n   * @function\n   * @param {Anchor[]} points\n   * @param {Boolean} closed\n   * @description Sets the bezier handles on {@link Anchor}s in the `points` list with estimated values to create a catmull-rom like curve. Used by {@link Two.Path#plot}.\n   */\n  export function getCurveFromPoints(points: Anchor[], closed: boolean): void;\n  /**\n   * @name Two.Utils.getControlPoints\n   * @function\n   * @param {Anchor} a\n   * @param {Anchor} b\n   * @param {Anchor} c\n   * @returns {Anchor} Returns the passed middle point `b`.\n   * @description Given three coordinates set the control points for the middle, b, vertex based on its position with the adjacent points.\n   */\n  export function getControlPoints(a: Anchor, b: Anchor, c: Anchor): Anchor;\n  /**\n   * @name Two.Utils.getReflection\n   * @function\n   * @param {Vector} a\n   * @param {Vector} b\n   * @param {Boolean} [relative=false]\n   * @returns {Vector} New {@link Vector} that represents the reflection point.\n   * @description Get the reflection of a point `b` about point `a`. Where `a` is in absolute space and `b` is relative to `a`.\n   * @see {@link http://www.w3.org/TR/SVG11/implnote.html#PathElementImplementationNotes}\n   */\n  export function getReflection(\n    a: Vector,\n    b: Vector,\n    relative?: boolean\n  ): Vector;\n  /**\n   * @name Two.Utils.getAnchorsFromArcData\n   * @function\n   * @param {Vector} center\n   * @param {Number} xAxisRotation\n   * @param {Number} rx - x radius\n   * @param {Number} ry - y radius\n   * @param {Number} ts\n   * @param {Number} td\n   * @param {Boolean} [ccw=false] - Set path traversal to counter-clockwise\n   */\n  export function getAnchorsFromArcData(\n    center: Vector,\n    xAxisRotation: number,\n    rx: number,\n    ry: number,\n    ts: number,\n    td: number,\n    ccw?: boolean\n  ): void;\n  import { Anchor } from 'two.js/src/anchor';\n  import { Vector } from 'two.js/src/vector';\n}\ndeclare module 'two.js/src/utils/device-pixel-ratio' {\n  /**\n   * @name Two.Utils.getRatio\n   * @function\n   * @param {CanvasRenderingContext2D} ctx\n   * @returns {Number} The ratio of a unit in Two.js to the pixel density of a session's screen.\n   * @see [High DPI Rendering](http://www.html5rocks.com/en/tutorials/canvas/hidpi/)\n   */\n  export function getRatio(ctx: CanvasRenderingContext2D): number;\n}\ndeclare module 'two.js/src/utils/underscore' {\n  export interface _ {\n    isNaN(obj: any): boolean;\n    isElement(obj: any): boolean;\n    isObject(obj: any): boolean;\n    extend(base: any, ...args: any[]): any;\n    defaults(base: any, ...args: any[]): any;\n    each(obj: any, iteratee: any, context: any): any;\n    performance: { now: () => number };\n  }\n}\ndeclare module 'two.js/src/element' {\n  /**\n     * @name Two.Element\n     * @class\n\n     * @description The foundational object for the Two.js scenegraph.\n     */\n  export class Element extends Events {\n    /**\n     * @name Two.Element#_flagId\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Element#id} needs updating.\n     */\n    private _flagId;\n    /**\n     * @name Two.Element#_flagClassName\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Group#className} need updating.\n     */\n    private _flagClassName;\n    /**\n     * @name Two.Element#renderer\n     * @property {Object} - Object access to store relevant renderer specific variables. Warning: manipulating this object can create unintended consequences.\n     * @nota-bene With the {@link Two.SVGRenderer} you can access the underlying SVG element created via `shape.renderer.elem`.\n     */\n    _renderer: {};\n    /**\n     * @name Two.Element#id\n     * @property {String} - Session specific unique identifier.\n     * @nota-bene In the {@link Two.SVGRenderer} change this to change the underlying SVG element's id too.\n     */\n    _id: string;\n    /**\n     * @name Two.Element#className\n     * @property {String} - A class to be applied to the element to be compatible with CSS styling.\n     * @nota-bene Only available for the SVG renderer.\n     */\n    _className: string;\n    /**\n     * @name Two.Element#classList\n     * @property {String[]}\n     * @description A list of class strings stored if imported / interpreted  from an SVG element.\n     */\n    classList: string[];\n    /**\n     * @name Two.Element#flagReset\n     * @function\n     * @description Called internally by Two.js's renderer to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n     */\n    flagReset(): void;\n  }\n  import { Events } from 'two.js/src/events';\n}\ndeclare module 'two.js/src/matrix' {\n  /**\n   * @name Two.Matrix\n   * @class\n   * @param {Number} [a=1] - The value for element at the first column and first row.\n   * @param {Number} [b=0] - The value for element at the second column and first row.\n   * @param {Number} [c=0] - The value for element at the third column and first row.\n   * @param {Number} [d=0] - The value for element at the first column and second row.\n   * @param {Number} [e=1] - The value for element at the second column and second row.\n   * @param {Number} [f=0] - The value for element at the third column and second row.\n   * @param {Number} [g=0] - The value for element at the first column and third row.\n   * @param {Number} [h=0] - The value for element at the second column and third row.\n   * @param {Number} [i=1] - The value for element at the third column and third row.\n   * @description A class to store 3 x 3 transformation matrix information. In addition to storing data `Two.Matrix` has suped up methods for commonplace mathematical operations.\n   * @nota-bene Order is based on how to construct transformation strings for the browser.\n   */\n  export class Matrix extends Events {\n    /**\n     * @name Two.Matrix.Identity\n     * @property {Number[]} - A stored reference to the default value of a 3 x 3 matrix.\n     */\n    static Identity: number[];\n    /**\n     * @name Two.Matrix.Multiply\n     * @function\n     * @param {Matrix} A\n     * @param {Matrix} B\n     * @param {Matrix} [C] - An optional matrix to apply the multiplication to.\n     * @returns {Matrix} - If an optional `C` matrix isn't passed then a new one is created and returned.\n     * @description Multiply two matrices together and return the result.\n     */\n    static Multiply(A: Matrix, B: Matrix, C?: Matrix): Matrix;\n    constructor(elements: number[]);\n    constructor(\n      a?: number,\n      b?: number,\n      c?: number,\n      d?: number,\n      e?: number,\n      f?: number\n    );\n    /**\n     * @name Two.Matrix#elements\n     * @property {Number[]} - The underlying data stored as an array.\n     */\n    elements: number[];\n    /**\n     * @name Two.Matrix#manual\n     * @property {Boolean} - Determines whether Two.js automatically calculates the values for the matrix or if the developer intends to manage the matrix.\n     * @nota-bene - Setting to `true` nullifies {@link Two.Shape#translation}, {@link Two.Shape#rotation}, and {@link Two.Shape#scale}.\n     */\n    manual: boolean;\n    /**\n     * @name Two.Matrix#set\n     * @function\n     * @param {Number} a - The value for element at the first column and first row.\n     * @param {Number} b - The value for element at the second column and first row.\n     * @param {Number} c - The value for element at the third column and first row.\n     * @param {Number} d - The value for element at the first column and second row.\n     * @param {Number} e - The value for element at the second column and second row.\n     * @param {Number} f - The value for element at the third column and second row.\n     * @param {Number} g - The value for element at the first column and third row.\n     * @param {Number} h - The value for element at the second column and third row.\n     * @param {Number} i - The value for element at the third column and third row.\n     * @description Set an array of values onto the matrix. Order described in {@link Two.Matrix}.\n     */\n    /**\n     * @name Two.Matrix#set\n     * @function\n     * @param {Number[]} a - The array of elements to apply.\n     * @description Set an array of values onto the matrix. Order described in {@link Two.Matrix}.\n     */\n    set(\n      a: number[],\n      b: any,\n      c: any,\n      d: any,\n      e: any,\n      f: any,\n      g: any,\n      h: any,\n      i: any\n    ): any;\n    /**\n     * @name Two.Matrix#copy\n     * @function\n     * @description Copy the matrix of one to the current instance.\n     */\n    copy(m: any): any;\n    /**\n     * @name Two.Matrix#identity\n     * @function\n     * @description Turn matrix to the identity, like resetting.\n     */\n    identity(): any;\n    /**\n     * @name Two.Matrix#multiply\n     * @function\n     * @param {Number} a - The scalar to be multiplied.\n     * @description Multiply all components of the matrix against a single scalar value.\n     * @overloaded\n     */\n    multiply(a: number): any;\n    /**\n     * @name Two.Matrix#multiply\n     * @function\n     * @param {Number} a - The x component to be multiplied.\n     * @param {Number} b - The y component to be multiplied.\n     * @param {Number} c - The z component to be multiplied.\n     * @description Multiply all components of a matrix against a 3 component vector.\n     * @overloaded\n     */\n    multiply(\n      a: number,\n      b: number,\n      c?: number\n    ): [x: number, y: number, z: number];\n    /**\n     * @name Two.Matrix#multiply\n     * @function\n     * @param {Number} a - The value at the first column and first row of the matrix to be multiplied.\n     * @param {Number} b - The value at the second column and first row of the matrix to be multiplied.\n     * @param {Number} c - The value at the third column and first row of the matrix to be multiplied.\n     * @param {Number} d - The value at the first column and second row of the matrix to be multiplied.\n     * @param {Number} e - The value at the second column and second row of the matrix to be multiplied.\n     * @param {Number} f - The value at the third column and second row of the matrix to be multiplied.\n     * @param {Number} g - The value at the first column and third row of the matrix to be multiplied.\n     * @param {Number} h - The value at the second column and third row of the matrix to be multiplied.\n     * @param {Number} i - The value at the third column and third row of the matrix to be multiplied.\n     * @description Multiply all components of a matrix against another matrix.\n     * @overloaded\n     */\n    multiply(\n      a: number,\n      b: number,\n      c: number,\n      d: number,\n      e: number,\n      f: number,\n      g: number,\n      h: number,\n      i: number\n    ): any;\n    /**\n     * @name Two.Matrix#inverse\n     * @function\n     * @param {Matrix} [out] - The optional matrix to apply the inversion to.\n     * @description Return an inverted version of the matrix. If no optional one is passed a new matrix is created and returned.\n     */\n    inverse(out?: Matrix): any;\n    /**\n     * @name Two.Matrix#scale\n     * @function\n     * @param {Number} scale - The one dimensional scale to apply to the matrix.\n     * @description Uniformly scale the transformation matrix.\n     */\n    /**\n     * @name Two.Matrix#scale\n     * @function\n     * @param {Number} sx - The horizontal scale factor.\n     * @param {Number} sy - The vertical scale factor\n     * @description Scale the transformation matrix in two dimensions.\n     */\n    scale(sx: number, sy: number, ...args: any[]): any;\n    /**\n     * @name Two.Matrix#rotate\n     * @function\n     * @param {Number} Number - The amount to rotate in Number.\n     * @description Rotate the matrix.\n     */\n    rotate(Number: number): any;\n    /**\n     * @name Two.Matrix#translate\n     * @function\n     * @param {Number} x - The horizontal translation value to apply.\n     * @param {Number} y - The vertical translation value to apply.\n     * @description Translate the matrix.\n     */\n    translate(x: number, y: number): any;\n    /**\n     * @name Two.Matrix#skewX\n     * @function\n     * @param {Number} Number - The amount to skew in Number.\n     * @description Skew the matrix by an angle in the x axis direction.\n     */\n    skewX(Number: number): any;\n    /**\n     * @name Two.Matrix#skewY\n     * @function\n     * @param {Number} Number - The amount to skew in Number.\n     * @description Skew the matrix by an angle in the y axis direction.\n     */\n    skewY(Number: number): any;\n    /**\n     * @name Two.Matrix#toString\n     * @function\n     * @param {Boolean} [fullMatrix=false] - Return the full 9 elements of the matrix or just 6 for 2D transformations.\n     * @returns {String} - The transformation matrix as a 6 component string separated by spaces.\n     * @description Create a transform string. Used for the Two.js rendering APIs.\n     */\n    toString(fullMatrix?: boolean): string;\n    /**\n     * @name Two.Matrix#toTransformArray\n     * @function\n     * @param {Boolean} [fullMatrix=false] - Return the full 9 elements of the matrix or just 6 in the format for 2D transformations.\n     * @param {Number[]} [output] - An array empty or otherwise to apply the values to.\n     * @description Create a transform array. Used for the Two.js rendering APIs.\n     */\n    toTransformArray(fullMatrix?: boolean, output?: number[]): any[];\n    /**\n     * @name Two.Matrix#toArray\n     * @function\n     * @param {Boolean} [fullMatrix=false] - Return the full 9 elements of the matrix or just 6 for 2D transformations.\n     * @param {Number[]} [output] - An array empty or otherwise to apply the values to.\n     * @description Create a transform array. Used for the Two.js rendering APIs.\n     */\n    toArray(fullMatrix?: boolean, output?: number[]): any[];\n    /**\n     * @name Two.Matrix#toObject\n     * @function\n     * @description Create a JSON compatible object that represents information of the matrix.\n     */\n    toObject(): {\n      elements: any[];\n      manual: boolean;\n    };\n    /**\n     * @name Two.Matrix#clone\n     * @function\n     * @description Clone the current matrix.\n     */\n    clone(): any;\n  }\n  import { Events } from 'two.js/src/events';\n}\ndeclare module 'two.js/src/shape' {\n  /**\n     * @name Two.Shape\n     * @class\n\n     * @description The foundational transformation object for the Two.js scenegraph.\n     */\n  export class Shape extends TwoElement {\n    /**\n     * @name Two.Shape#_flagMatrix\n     * @private\n     * @property {Boolean} - Determines whether the matrix needs updating.\n     */\n    private _flagMatrix;\n    /**\n     * @name Two.Shape#_flagScale\n     * @private\n     * @property {Boolean} - Determines whether the scale needs updating.\n     */\n    private _flagScale;\n    /**\n     * @name Two.Shape#_matrix\n     * @private\n     * @property {Matrix} - The matrix value of the shape's position, rotation, and scale.\n     */\n    private _matrix;\n    /**\n     * @name Two.Shape#_worldMatrix\n     * @private\n     * @property {Matrix} - The matrix value of the shape's position, rotation, and scale in the scene.\n     */\n    private _worldMatrix;\n    /**\n     * @name Two.Shape#_position\n     * @private\n     * @property {Vector} - The translation values as a {@link Two.Vector}.\n     */\n    private _position;\n    /**\n     * @name Two.Shape#_rotation\n     * @private\n     * @property {Number} - The rotation value in Number.\n     */\n    private _rotation;\n    /**\n     * @name Two.Shape#_scale\n     * @private\n     * @property {Number|Vector} - The scale value in Number. Can be a vector for non-uniform scaling.\n     */\n    private _scale;\n    /**\n     * @name Two.Shape#_skewX\n     * @private\n     * @property {Number} - The rotation value in Number.\n     */\n    private _skewX;\n    /**\n     * @name Two.Shape#_skewY\n     * @private\n     * @property {Number} - The rotation value in Number.\n     */\n    private _skewY;\n    isShape: boolean;\n    /**\n     * @name Two.Shape#id\n     * @property {String} - Session specific unique identifier.\n     * @nota-bene In the {@link Two.SVGRenderer} change this to change the underlying SVG element's id too.\n     */\n    id: string;\n    /**\n     * @name Two.Shape#matrix\n     * @property {Matrix}\n     * @description The transformation matrix of the shape.\n     * @nota-bene {@link Two.Shape#position}, {@link Two.Shape#rotation}, {@link Two.Shape#scale}, {@link Two.Shape#skewX}, and {@link Two.Shape#skewY} apply their values to the matrix when changed. The matrix is what is sent to the renderer to be drawn.\n     */\n    matrix: Matrix;\n    /**\n     * @name Two.Shape#worldMatrix\n     * @property {Matrix}\n     * @description The transformation matrix of the shape in the scene.\n     */\n    worldMatrix: Matrix;\n    /**\n     * @name Two.Shape#position\n     * @property {Vector} - The x and y value for where the shape is placed relative to its parent.\n     */\n    position: Vector;\n    /**\n     * @name Two.Shape#rotation\n     * @property {Number} - The value in Number for how much the shape is rotated relative to its parent.\n     */\n    rotation: number;\n    /**\n     * @name Two.Shape#scale\n     * @property {Number} - The value for how much the shape is scaled relative to its parent.\n     * @nota-bene This value can be replaced with a {@link Two.Vector} to do non-uniform scaling. e.g: `shape.scale = new Two.Vector(2, 1);`\n     */\n    scale: number | Vector;\n    /**\n     * @name Two.Shape#skewX\n     * @property {Number} - The value in Number for how much the shape is skewed relative to its parent.\n     * @description Skew the shape by an angle in the x axis direction.\n     */\n    skewX: number;\n    /**\n     * @name Two.Shape#skewY\n     * @property {Number} - The value in Number for how much the shape is skewed relative to its parent.\n     * @description Skew the shape by an angle in the y axis direction.\n     */\n    skewY: number;\n    set renderer(arg: any);\n    get renderer(): any;\n    set translation(arg: Vector);\n    /**\n     * @name Two.Shape#translation\n     * @description Alias for {@link Two.Shape#position}.\n     */\n    get translation(): Vector;\n    /**\n     * @name Two.Shape#addTo\n     * @function\n     * @param {Group} group - The parent the shape adds itself to.\n     * @description Convenience method to add itself to the scenegraph.\n     */\n    addTo(group: Group): Shape;\n    /**\n     * @name Two.Shape#remove\n     * @function\n     * @description Remove self from the scene / parent.\n     */\n    remove(): Shape;\n    /**\n     * @name Two.Shape#clone\n     * @function\n     * @param {Group} [parent] - Optional argument to automatically add the shape to a scenegraph.\n     * @returns {Shape}\n     * @description Create a new {@link Two.Shape} with the same values as the current shape.\n     */\n    clone(parent?: Group): Shape;\n    /**\n     * @name Two.Shape#_update\n     * @function\n     * @private\n     * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n     * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n     * @nota-bene Try not to call this method more than once a frame.\n     */\n    private _update;\n  }\n  import { Element as TwoElement } from 'two.js/src/element';\n  import { Matrix } from 'two.js/src/matrix';\n  import { Vector } from 'two.js/src/vector';\n  import { Group } from 'two.js/src/group';\n}\ndeclare module 'two.js/src/collection' {\n  /**\n     * @name Two.Collection\n     * @class\n\n     * @description An `Array` like object with additional event propagation on actions. `pop`, `shift`, and `splice` trigger `removed` events. `push`, `unshift`, and `splice` with more than 2 arguments trigger 'inserted'. Finally, `sort` and `reverse` trigger `order` events.\n     */\n  export class Collection<T = any> extends Array<T> {\n    constructor(...args: any[]);\n    /**\n     * @private\n     */\n    private _events;\n    set _bound(arg: boolean);\n    get _bound(): boolean;\n    addEventListener(...args: any[]): any;\n    on(...args: any[]): any;\n    bind(...args: any[]): any;\n    removeEventListener(...args: any[]): any;\n    off(...args: any[]): any;\n    unbind(...args: any[]): any;\n    dispatchEvent(...args: any[]): any;\n    trigger(...args: any[]): any;\n    listen(...args: any[]): any;\n    ignore(...args: any[]): any;\n  }\n}\ndeclare module 'two.js/src/children' {\n  /**\n     * @class\n     * @name Two.Group.Children\n\n     * @description A children collection which is accesible both by index and by object `id`.\n     */\n  export class Children extends Collection<Shape> {\n    constructor(children?: Shape[]);\n    constructor(...args: Shape[]);\n    /**\n     * @name Two.Group.Children#ids\n     * @property {Object} - Map of all elements in the list keyed by `id`s.\n     */\n    ids: {};\n    /**\n     * @function\n     * @name Two.Group.Children#attach\n     * @param {Shape[]} children - The objects which extend {@link Two.Shape} to be added.\n     * @description Adds elements to the `ids` map.\n     */\n    attach(children: Shape[]): Children;\n    /**\n     * @function\n     * @name Two.Group.Children#detach\n     * @param {Shape[]} children - The objects which extend {@link Two.Shape} to be removed.\n     * @description Removes elements to the `ids` map.\n     */\n    detach(children: Shape[]): Children;\n  }\n  import { Collection } from 'two.js/src/collection';\n  import { Shape } from 'two.js/src/shape';\n}\ndeclare module 'two.js/src/group' {\n  /**\n     * @name Two.Group\n     * @class\n\n     * @param {Shape[]} [children] - A list of objects that inherit {@link Two.Shape}. For instance, the array could be a {@link Two.Path}, {@link Two.Text}, and {@link Two.RoundedRectangle}.\n     * @description This is the primary class for grouping objects that are then drawn in Two.js. In Illustrator this is a group, in After Effects it would be a Null Object. Whichever the case, the `Two.Group` contains a transformation matrix and commands to style its children, but it by itself doesn't render to the screen.\n     * @nota-bene The {@link Two#scene} is an instance of `Two.Group`.\n     */\n  export class Group extends Shape {\n    static Children: Children;\n    /**\n     * @name Two.Group.InsertChildren\n     * @function\n     * @param {Shape[]} children - The objects to be inserted.\n     * @description Cached method to let renderers know children have been added to a {@link Two.Group}.\n     */\n    static InsertChildren(children: Shape[]): void;\n    /**\n     * @name Two.Group.RemoveChildren\n     * @function\n     * @param {Shape[]} children - The objects to be removed.\n     * @description Cached method to let renderers know children have been removed from a {@link Two.Group}.\n     */\n    static RemoveChildren(children: Shape[]): void;\n    /**\n     * @name Two.Group.OrderChildren\n     * @function\n     * @description Cached method to let renderers know order has been updated on a {@link Two.Group}.\n     */\n    static OrderChildren(children: Shape[]): void;\n    /**\n     * @name Two.Group.Properties\n     * @property {String[]} - A list of properties that are on every {@link Two.Group}.\n     */\n    static Properties: string[];\n    constructor(children?: Shape[]);\n    constructor(...args: Shape[]);\n    /**\n     * @name Two.Group#_flagAdditions\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Group#additions} needs updating.\n     */\n    private _flagAdditions;\n    /**\n     * @name Two.Group#_flagSubtractions\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Group#subtractions} needs updating.\n     */\n    private _flagSubtractions;\n    /**\n     * @name Two.Group#_flagOrder\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Group#order} needs updating.\n     */\n    private _flagOrder;\n    /**\n     * @name Two.Group#_flagVisible\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Group#visible} needs updating.\n     */\n    /**\n     * @name Two.Group#_flagOpacity\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Group#opacity} needs updating.\n     */\n    private _flagOpacity;\n    /**\n     * @name Two.Group#_flagBeginning\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Group#beginning} needs updating.\n     */\n    private _flagBeginning;\n    /**\n     * @name Two.Group#_flagEnding\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Group#ending} needs updating.\n     */\n    private _flagEnding;\n    /**\n     * @name Two.Group#_flagLength\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Group#length} needs updating.\n     */\n    private _flagLength;\n    /**\n     * @name Two.Group#_flagMask\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Group#mask} needs updating.\n     */\n    private _flagMask;\n    /**\n     * @name Two.Group#fill\n     * @property {(String|Gradient|Texture)} - The value of what all child shapes should be filled in with.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value} for more information on CSS's colors as `String`.\n     */\n    fill: string | Gradient | Texture;\n    /**\n     * @name Two.Group#stroke\n     * @property {(String|Gradient|Texture)} - The value of what all child shapes should be outlined in with.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value} for more information on CSS's colors as `String`.\n     */\n    stroke: string | Gradient | Texture;\n    /**\n     * @name Two.Group#linewidth\n     * @property {Number} - The thickness in pixels of the stroke for all child shapes.\n     */\n    linewidth: number;\n    /**\n     * @name Two.Group#opacity\n     * @property {Number} - The opaqueness of all child shapes.\n     * @nota-bene Becomes multiplied by the individual child's opacity property.\n     */\n    opacity: number;\n    /**\n     * @name Two.Group#visible\n     * @property {Boolean} - Display the path or not.\n     * @nota-bene For {@link Two.CanvasRenderer} and {@link Two.WebGLRenderer} when set to false all updating is disabled improving performance dramatically with many objects in the scene.\n     */\n    visible: boolean;\n    /**\n     * @name Two.Group#cap\n     * @property {String}\n     * @see {@link https://www.w3.org/TR/SVG11/painting.html#StrokeLinecapProperty}\n     */\n    cap: 'butt' | 'round' | 'square';\n    /**\n     * @name Two.Group#join\n     * @property {String}\n     * @see {@link https://www.w3.org/TR/SVG11/painting.html#StrokeLinejoinProperty}\n     */\n    join: 'butt' | 'round' | 'square';\n    /**\n     * @name Two.Group#miter\n     * @property {String}\n     * @see {@link https://www.w3.org/TR/SVG11/painting.html#StrokeMiterlimitProperty}\n     */\n    miter: number;\n    /**\n     * @name Two.Group#closed\n     * @property {Boolean} - Determines whether a final line is drawn between the final point in the `vertices` array and the first point of all child shapes.\n     */\n    closed: boolean;\n    /**\n     * @name Two.Group#curved\n     * @property {Boolean} - When the child's path is `automatic = true` this boolean determines whether the lines between the points are curved or not.\n     */\n    curved: boolean;\n    /**\n     * @name Two.Group#automatic\n     * @property {Boolean} - Determines whether or not Two.js should calculate curves, lines, and commands automatically for you or to let the developer manipulate them for themselves.\n     */\n    automatic: boolean;\n    /**\n     * @name Two.Group#beginning\n     * @property {Number} - Number between zero and one to state the beginning of where the path is rendered.\n     * @description {@link Two.Group#beginning} is a percentage value that represents at what percentage into all child shapes should the renderer start drawing.\n     * @nota-bene This is great for animating in and out stroked paths in conjunction with {@link Two.Group#ending}.\n     */\n    beginning: number;\n    /**\n     * @name Two.Group#ending\n     * @property {Number} - Number between zero and one to state the ending of where the path is rendered.\n     * @description {@link Two.Group#ending} is a percentage value that represents at what percentage into all child shapes should the renderer start drawing.\n     * @nota-bene This is great for animating in and out stroked paths in conjunction with {@link Two.Group#beginning}.\n     */\n    ending: number;\n    /**\n     * @name Two.Group#length\n     * @property {Number} - The sum of distances between all child lengths.\n     */\n    length: number;\n    /**\n     * @name Two.Group#mask\n     * @property {Shape} - The Two.js object to clip from a group's rendering.\n     */\n    mask: Shape | undefined;\n    /**\n     * @name Two.Group#additions\n     * @property {Shape[]}\n     * @description An automatically updated list of children that need to be appended to the renderer's scenegraph.\n     */\n    additions: Shape[];\n    /**\n     * @name Two.Group#subtractions\n     * @property {Shape[]}\n     * @description An automatically updated list of children that need to be removed from the renderer's scenegraph.\n     */\n    subtractions: Shape[];\n    /**\n     * @name Two.Group#children\n     * @property {Group.Children}\n     * @description A list of all the children in the scenegraph.\n     * @nota-bene Ther order of this list indicates the order each element is rendered to the screen.\n     */\n    children: Children;\n    /**\n     * @name Two.Group#toObject\n     * @function\n     * @returns {Object}\n     * @description Return a JSON compatible plain object that represents the group.\n     */\n    toObject(): Object;\n    /**\n     * @name Two.Group#corner\n     * @function\n     * @description Orient the children of the group to the upper left-hand corner of that group.\n     */\n    corner(): Group;\n    /**\n     * @name Two.Group#center\n     * @function\n     * @description Orient the children of the group to the center of that group.\n     */\n    center(): Group;\n    /**\n     * @name Two.Group#getById\n     * @function\n     * @description Recursively search for id. Returns the first element found.\n     * @returns {Shape} - Or `null` if nothing is found.\n     */\n    getById(id: any): Shape;\n    /**\n     * @name Two.Group#getByClassName\n     * @function\n     * @description Recursively search for classes. Returns an array of matching elements.\n     * @returns {Shape[]} - Or empty array if nothing is found.\n     */\n    getByClassName(className: any): Shape[];\n    /**\n     * @name Two.Group#getByType\n     * @function\n     * @description Recursively search for children of a specific type, e.g. {@link Two.Path}. Pass a reference to this type as the param. Returns an array of matching elements.\n     * @returns {Shape[]} - Empty array if nothing is found.\n     */\n    getByType(type: any): Shape[];\n    /**\n     * @name Two.Group#add\n     * @function\n     * @param {Element[]} objects - An array of objects to be added. Can also be supplied as individual arguments.\n     * @params {...Element} [args] - Alternatively pass shapes as each argument\n     * @description Add objects to the group.\n     */\n    add(objects: Shape): Group;\n    add(...args: Shape[]): Group;\n    /**\n     * @name Two.Group#remove\n     * @function\n     * @description Remove self from the scene / parent.\n     */\n    remove(): Shape;\n    /**\n     * @name Two.Group#remove\n     * @function\n     * @param {Shape[]} objects - An array of objects to be removed. Can also be supplied as individual arguments.\n     * @description Remove objects from the group.\n     */\n    remove(objects: Shape[]): Shape[];\n    /**\n     * @name Two.Group#remove\n     * @function\n     * @params {...Shape} [args] - Alternatively pass shapes as each argument\n     * @description Remove objects from the group.\n     */\n    remove(...args: Shape[]): Shape;\n    /**\n     * @name Two.Group#getBoundingClientRect\n     * @function\n     * @param {Boolean} [shallow=false] - Describes whether to calculate off local matrix or world matrix.\n     * @returns {Object} - Returns object with top, left, right, bottom, width, height attributes.\n     * @description Return an object with top, left, right, bottom, width, and height parameters of the group.\n     */\n    getBoundingClientRect(shallow?: boolean): BoundingBox;\n    /**\n     * @name Two.Group#noFill\n     * @function\n     * @description Apply `noFill` method to all child shapes.\n     */\n    noFill(): Group;\n    /**\n     * @name Two.Group#noStroke\n     * @function\n     * @description Apply `noStroke` method to all child shapes.\n     */\n    noStroke(): Group;\n    /**\n     * @name Two.Group#subdivide\n     * @function\n     * @description Apply `subdivide` method to all child shapes.\n     */\n    subdivide(limit?: number): Group;\n    /**\n     * @name Two.Group#clone\n     * @function\n     * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n     * @returns {Two.Group}\n     * @description Create a new instance of {@link Two.Group} with the same properties of the current group.\n     */\n    clone(parent?: Group): Group;\n  }\n  import { Shape } from 'two.js/src/shape';\n  import { Children } from 'two.js/src/children';\n  import { Gradient } from 'two.js/src/effects/gradient';\n  import { Texture } from 'two.js/src/effects/texture';\n  import { BoundingBox } from 'two.js';\n}\ndeclare module 'two.js/src/renderers/canvas' {\n  /**\n     * @name Two.CanvasRenderer\n     * @class\n\n     * @param {Object} [parameters] - This object is inherited when constructing a new instance of {@link Two}.\n     * @param {Element} [parameters.domElement] - The `<canvas />` to draw to. If none given a new one will be constructed.\n     * @param {Boolean} [parameters.overdraw] - Determines whether the canvas should clear the background or not. Defaults to `true`.\n     * @param {Boolean} [parameters.smoothing=true] - Determines whether the canvas should antialias drawing. Set it to `false` when working with pixel art. `false` can lead to better performance, since it would use a cheaper interpolation algorithm.\n     * @description This class is used by {@link Two} when constructing with `type` of `Two.Types.canvas`. It takes Two.js' scenegraph and renders it to a `<canvas />`.\n     */\n  export class Renderer extends Events {\n    /**\n     * @name Two.CanvasRenderer.Utils\n     * @property {Object} - A massive object filled with utility functions and properties to render Two.js objects to a `<canvas />`.\n     */\n    static Utils: {\n      isHidden: RegExp;\n      alignments: {\n        left: string;\n        middle: string;\n        right: string;\n      };\n      group: {\n        renderChild: (child: any) => void;\n        render: (ctx: any) => any;\n      };\n      path: {\n        render: (ctx: any, forced: any, parentClipped: any) => any;\n      };\n      points: {\n        render: (ctx: any, forced: any, parentClipped: any) => any;\n      };\n      text: {\n        render: (ctx: any, forced: any, parentClipped: any) => any;\n      };\n      'linear-gradient': {\n        render: (ctx: any, parent: any) => any;\n      };\n      'radial-gradient': {\n        render: (ctx: any, parent: any) => any;\n      };\n      texture: {\n        render: (ctx: any) => any;\n      };\n      renderSvgArcCommand: (\n        ctx: any,\n        ax: any,\n        ay: any,\n        rx: any,\n        ry: any,\n        largeArcFlag: any,\n        sweepFlag: any,\n        xAxisRotation: any,\n        x: any,\n        y: any\n      ) => void;\n    };\n    constructor(params?: any);\n    /**\n     * @name Two.CanvasRenderer#domElement\n     * @property {Element} - The `<canvas />` associated with the Two.js scene.\n     */\n    domElement: HTMLElement;\n    /**\n     * @name Two.CanvasRenderer#ctx\n     * @property {Canvas2DContext} - Associated two dimensional context to render on the `<canvas />`.\n     */\n    ctx: any;\n    /**\n     * @name Two.CanvasRenderer#overdraw\n     * @property {Boolean} - Determines whether the canvas clears the background each draw call.\n     * @default true\n     */\n    overdraw: any;\n    /**\n     * @name Two.CanvasRenderer#scene\n     * @property {Group} - The root group of the scenegraph.\n     */\n    scene: Group;\n    /**\n     * @name Two.CanvasRenderer#setSize\n     * @function\n     * @fires resize\n     * @param {Number} width - The new width of the renderer.\n     * @param {Number} height - The new height of the renderer.\n     * @param {Number} [ratio] - The new pixel ratio (pixel density) of the renderer. Defaults to calculate the pixel density of the user's screen.\n     * @description Change the size of the renderer.\n     */\n    setSize(width: number, height: number, ratio?: number): any;\n    width: number;\n    height: number;\n    ratio: number;\n    /**\n     * @name Two.CanvasRenderer#render\n     * @function\n     * @description Render the current scene to the `<canvas />`.\n     */\n    render(): Renderer;\n  }\n  import { Events } from 'two.js/src/events';\n  import { Group } from 'two.js/src/group';\n}\ndeclare module 'two.js/src/utils/canvas-polyfill' {\n  export interface CanvasPolyfill {\n    Image: any;\n    isHeadless: boolean;\n    shim(canvas: any, name?: string): any;\n    polyfill(\n      canvas: any,\n      Image?: new (width?: number, height?: number) => HTMLImageElement\n    ): any;\n  }\n}\ndeclare module 'two.js/src/utils/dom' {\n  export interface dom {\n    temp: any;\n  }\n}\ndeclare module 'two.js/src/utils/error' {\n  /**\n   * @name Two.Utils.Error\n   * @class\n   * @description Custom error throwing for Two.js specific identification.\n   */\n  export class TwoError extends Error {\n    constructor(message: any);\n  }\n}\ndeclare module 'two.js/src/registry' {\n  /**\n   * @name Two.Registry\n   * @class\n   * @description An arbitrary class to manage a directory of things. Mainly used for keeping tabs of textures in Two.js.\n   */\n  export class Registry {\n    map: {};\n    /**\n     * @name Two.Registry#add\n     * @function\n     * @param {String} id - A unique identifier.\n     * @param obj - Any type of variable to be registered to the directory.\n     * @description Adds any value to the directory. Assigned by the `id`.\n     */\n    add(id: string, obj: any): Registry;\n    /**\n     * @name Two.Registry#remove\n     * @function\n     * @param {String} id - A unique identifier.\n     * @description Remove any value from the directory by its `id`.\n     */\n    remove(id: string): Registry;\n    /**\n     * @name Two.Registry#get\n     * @function\n     * @param {String} id - A unique identifier.\n     * @returns {?Object} The associated value. If unavailable then `undefined` is returned.\n     * @description Get a registered value by its `id`.\n     */\n    get(id: string): any | null;\n    /**\n     * @name Two.Registry#contains\n     * @function\n     * @param {String} id - A unique identifier.\n     * @returns {Boolean}\n     * @description Convenience method to see if a value is registered to an `id` already.\n     */\n    contains(id: string): boolean;\n  }\n}\ndeclare module 'two.js/src/utils/shape' {\n  /**\n   * @private\n   * @param {Path} path - The path to analyze against.\n   * @param {Number} t -\n   * @returns {Number}\n   * @description\n   */\n  export function contains(path: Path, t: number): number;\n  /**\n   * @private\n   * @param {Path} path - The path to analyze against.\n   * @param {Number} target - The target length at which to find an anchor.\n   * @returns {Number}\n   * @description Return the id of an anchor based on a target length.\n   */\n  export function getIdByLength(path: Path, target: number): number;\n  export function getCurveLength(a: any, b: any, limit: any): number;\n  export function getSubdivisions(\n    a: any,\n    b: any,\n    limit: any\n  ): import('two.js/src/anchor').Anchor[];\n  import { Path } from 'two.js/src/path';\n}\ndeclare module 'two.js/src/effects/stop' {\n  /**\n     * @name Two.Stop\n     * @class\n\n     * @param {Number} [offset] - The offset percentage of the stop represented as a zero-to-one value. Default value flip flops from zero-to-one as new stops are created.\n     * @param {String} [color] - The color of the stop. Default value flip flops from white to black as new stops are created.\n     * @param {Number} [opacity] - The opacity value. Default value is 1, cannot be lower than 0.\n     * @nota-bene Used specifically in conjunction with {@link Two.Gradient}s to control color graduation.\n     */\n  export class Stop extends TwoElement {\n    /**\n     * @name Two.Stop.Index\n     * @property {Number} - The current index being referenced for calculating a stop's default offset value.\n     */\n    static Index: number;\n    /**\n     * @name Two.Stop.Properties\n     * @property {String[]} - A list of properties that are on every {@link Two.Stop}.\n     */\n    static Properties: string[];\n    constructor(offset?: number, color?: string, opacity?: number);\n    /**\n     * @name Two.Stop#_flagOffset\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Stop#offset} needs updating.\n     */\n    private _flagOffset;\n    /**\n     * @name Two.Stop#_flagOpacity\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Stop#opacity} needs updating.\n     */\n    private _flagOpacity;\n    /**\n     * @name Two.Stop#_flagColor\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Stop#color} needs updating.\n     */\n    private _flagColor;\n    /**\n     * @name Two.Stop#_offset\n     * @private\n     * @see {@link Two.Stop#offset}\n     */\n    private _offset;\n    /**\n     * @name Two.Stop#_opacity\n     * @private\n     * @see {@link Two.Stop#opacity}\n     */\n    private _opacity;\n    /**\n     * @name Two.Stop#_color\n     * @private\n     * @see {@link Two.Stop#color}\n     */\n    private _color;\n    /**\n     * @name Two.Stop#offset\n     * @property {Number} - The offset percentage of the stop represented as a zero-to-one value.\n     */\n    offset: number;\n    /**\n     * @name Two.Stop#opacity\n     * @property {Number} - The alpha percentage of the stop represented as a zero-to-one value.\n     */\n    opacity: number;\n    /**\n     * @name Two.Stop#color\n     * @property {String} - The color of the stop.\n     */\n    color: string;\n    /**\n     * @name Two.Stop#clone\n     * @function\n     * @param {Gradient} [parent] - The parent group or scene to add the clone to.\n     * @returns {Stop}\n     * @description Create a new instance of {@link Two.Stop} with the same properties of the current path.\n     */\n    clone(parent: Gradient): Stop;\n    /**\n     * @name Two.Stop#toObject\n     * @function\n     * @returns {Object}\n     * @description Return a JSON compatible plain object that represents the path.\n     */\n    toObject(): any;\n  }\n  import { Element as TwoElement } from 'two.js/src/element';\n  import { Gradient } from 'two.js/src/effects/gradient';\n}\ndeclare module 'two.js/src/effects/gradient' {\n  /**\n     * @name Two.Gradient\n     * @class\n\n     * @param {Stop[]} [stops] - A list of {@link Two.Stop}s that contain the gradient fill pattern for the gradient.\n     * @description This is the base class for constructing different types of gradients with Two.js. The two common gradients are {@link Two.LinearGradient} and {@link Two.RadialGradient}.\n     */\n  export class Gradient extends TwoElement {\n    /**\n     * @name Two.Gradient.Stop\n     * @see {@link Two.Stop}\n     */\n    static Stop: Stop;\n    /**\n     * @name Two.Gradient.Properties\n     * @property {String[]} - A list of properties that are on every {@link Two.Gradient}.\n     */\n    static Properties: string[];\n    constructor(stops?: Stop[]);\n    _flagStops: boolean;\n    _flagSpread: boolean;\n    _flagUnits: boolean;\n    _spread: string;\n    _units: string;\n    /**\n     * @name Two.Gradient#renderer\n     * @property {Object}\n     * @description Object access to store relevant renderer specific variables. Warning: manipulating this object can create unintended consequences.\n     * @nota-bene With the {@link Two.SVGRenderer} you can access the underlying SVG element created via `shape.renderer.elem`.\n     */\n    /**\n     * @name Two.Gradient#id\n     * @property {String} - Session specific unique identifier.\n     * @nota-bene In the {@link Two.SVGRenderer} change this to change the underlying SVG element's id too.\n     */\n    id: string;\n    /**\n     * @name Two.Gradient#spread\n     * @property {String} - Indicates what happens if the gradient starts or ends inside the bounds of the target rectangle. Possible values are `'pad'`, `'reflect'`, and `'repeat'`.\n     * @see {@link https://www.w3.org/TR/SVG11/pservers.html#LinearGradientElementSpreadMethodAttribute} for more information\n     */\n    spread: 'pad' | 'reflect' | 'repeat';\n    /**\n     * @name Two.Gradient#units\n     * @property {String} [units='objectBoundingBox'] - Indicates how coordinate values are interpreted by the renderer. Possible values are `'userSpaceOnUse'` and `'objectBoundingBox'`.\n     * @see {@link https://www.w3.org/TR/SVG11/pservers.html#RadialGradientElementGradientUnitsAttribute} for more information\n     */\n    units: 'userSpaceOnUse' | 'objectBoundingBox';\n    stops: any;\n    /**\n     * @name Two.Gradient#clone\n     * @function\n     * @param {Group} [parent] - The parent group or scene to add the clone to.\n     * @returns {Gradient}\n     * @description Create a new instance of {@link Two.Gradient} with the same properties of the current path.\n     */\n    clone(parent?: Group): Gradient;\n    /**\n     * @name Two.Gradient#toObject\n     * @function\n     * @returns {Object}\n     * @description Return a JSON compatible plain object that represents the path.\n     */\n    toObject(): any;\n    /**\n     * @name Two.Gradient#_update\n     * @function\n     * @private\n     * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n     * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n     * @nota-bene Try not to call this method more than once a frame.\n     */\n    private _update;\n  }\n  import { Element as TwoElement } from 'two.js/src/element';\n  import { Stop } from 'two.js/src/effects/stop';\n  import { Group } from 'two.js/src/group';\n}\ndeclare module 'two.js/src/effects/linear-gradient' {\n  /**\n     * @name Two.LinearGradient\n     * @class\n\n     * @param {Number} [x1=0] - The x position of the first end point of the linear gradient.\n     * @param {Number} [y1=0] - The y position of the first end point of the linear gradient.\n     * @param {Number} [x2=0] - The x position of the second end point of the linear gradient.\n     * @param {Number} [y2=0] - The y position of the second end point of the linear gradient.\n     * @param {Stop[]} [stops] - A list of {@link Two.Stop}s that contain the gradient fill pattern for the gradient.\n     * @nota-bene The linear gradient lives within the space of the parent object's matrix space.\n     */\n  export class LinearGradient extends Gradient {\n    constructor(\n      x1?: number,\n      y1?: number,\n      x2?: number,\n      y2?: number,\n      stops?: Stop[]\n    );\n    /**\n     * @name Two.LinearGradient#_flagEndPoints\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.LinearGradient#left} or {@link Two.LinearGradient#right} changed and needs to update.\n     */\n    private _flagEndPoints;\n    _left: any;\n    _right: any;\n    /**\n     * @name Two.LinearGradient#left\n     * @property {Vector} - The x and y value for where the first end point is placed on the canvas.\n     */\n    left: Vector;\n    /**\n     * @name Two.LinearGradient#right\n     * @property {Vector} - The x and y value for where the second end point is placed on the canvas.\n     */\n    right: Vector;\n  }\n  import { Gradient } from 'two.js/src/effects/gradient';\n  import { Stop } from 'two.js/src/effects/stop';\n  import { Vector } from 'two.js/src/vector';\n}\ndeclare module 'two.js/src/effects/radial-gradient' {\n  /**\n     * @name Two.RadialGradient\n     * @class\n\n     * @param {Number} [x=0] - The x position of the origin of the radial gradient.\n     * @param {Number} [y=0] - The y position of the origin of the radial gradient.\n     * @param {Number} [radius=0] - The radius of the radial gradient.\n     * @param {Stop[]} [stops] - A list of {@link Two.Stop}s that contain the gradient fill pattern for the gradient.\n     * @param {Number} [focalX=0] - The x position of the focal point on the radial gradient.\n     * @param {Number} [focalY=0] - The y position of the focal point on the radial gradient.\n     * @nota-bene The radial gradient lives within the space of the parent object's matrix space.\n     */\n  export class RadialGradient extends Gradient {\n    constructor(\n      cx?: number,\n      cy?: number,\n      r?: number,\n      stops?: Stop[],\n      fx?: number,\n      fy?: number\n    );\n    /**\n     * @name Two.RadialGradient#_flagRadius\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.RadialGradient#radius} changed and needs to update.\n     */\n    private _flagRadius;\n    /**\n     * @name Two.RadialGradient#_flagCenter\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.RadialGradient#center} changed and needs to update.\n     */\n    private _flagCenter;\n    /**\n     * @name Two.RadialGradient#_flagFocal\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.RadialGradient#focal} changed and needs to update.\n     */\n    private _flagFocal;\n    _radius: number;\n    _center: any;\n    _focal: any;\n    /**\n     * @name Two.RadialGradient#center\n     * @property {Vector} - The x and y value for where the origin of the radial gradient is.\n     */\n    center: Vector;\n    radius: number;\n    /**\n     * @name Two.RadialGradient#focal\n     * @property {Vector} - The x and y value for where the focal point of the radial gradient is.\n     * @nota-bene This effects the spray or spread of the radial gradient.\n     */\n    focal: Vector;\n  }\n  import { Gradient } from 'two.js/src/effects/gradient';\n  import { Stop } from 'two.js/src/effects/stop';\n  import { Vector } from 'two.js/src/vector';\n}\ndeclare module 'two.js/src/effects/texture' {\n  /**\n     * @name Two.Texture\n     * @class\n\n     * @param {String|HTMLImageElement} [src] - The URL path to an image file or an `<img />` element.\n     * @param {Function} [callback] - An optional callback function once the image has been loaded.\n     * @description Fundamental to work with bitmap data, a.k.a. pregenerated imagery, in Two.js. Supported formats include jpg, png, gif, and tiff. See {@link Two.Texture.RegularExpressions} for a full list of supported formats.\n     */\n  export class Texture extends TwoElement {\n    /**\n     * @name Two.Texture.Properties\n     * @property {String[]} - A list of properties that are on every {@link Two.Texture}.\n     */\n    static Properties: string[];\n    /**\n     * @name Two.Texture.RegularExpressions\n     * @property {Object} - A map of compatible DOM Elements categorized by media format.\n     */\n    static RegularExpressions: {\n      video: RegExp;\n      image: RegExp;\n      effect: RegExp;\n    };\n    /**\n     * @name Two.Texture.ImageRegistry\n     * @property {Registry} - A canonical listing of image data used in a single session of Two.js.\n     * @nota-bene This object is used to cache image data between different textures.\n     */\n    static ImageRegistry: Registry;\n    /**\n     * @name Two.Texture.getAbsoluteURL\n     * @property {Function} - Serializes a URL as an absolute path for canonical attribution in {@link Two.ImageRegistry}.\n     * @param {String} path\n     * @returns {String} - The serialized absolute path.\n     */\n    static getAbsoluteURL(path: string): string;\n    /**\n     * @name Two.Texture.loadHeadlessBuffer\n     * @property {Function} - Loads an image as a buffer in headless environments.\n     * @param {Texture} texture - The {@link Two.Texture} to be loaded.\n     * @param {Function} loaded - The callback function to be triggered once the image is loaded.\n     * @nota-bene - This function uses node's `fs.readFileSync` to spoof the `<img />` loading process in the browser.\n     */\n    static loadHeadlessBuffer(texture: Texture, loaded: Function): void;\n    /**\n     * @name Two.Texture.getTag\n     * @property {Function} - Retrieves the tag name of an image, video, or canvas node.\n     * @param {HTMLImageElement} image - The image to infer the tag name from.\n     * @returns {String} - Returns the tag name of an image, video, or canvas node.\n     */\n    static getTag(image: any): string;\n    /**\n     * @name Two.Texture.getImage\n     * @property {Function} - Convenience function to set {@link Two.Texture#image} properties with canonincal versions set in {@link Two.Texture.ImageRegistry}.\n     * @param {String} src - The URL path of the image.\n     * @returns {HTMLImageElement} - Returns either a cached version of the image or a new one that is registered in {@link Two.Texture.ImageRegistry}.\n     */\n    static getImage(src: string): HTMLImageElement;\n    /**\n     * @name Two.Texture.Register\n     * @interface\n     * @description A collection of functions to register different types of textures. Used internally by a {@link Two.Texture}.\n     */\n    static Register: {\n      canvas: (texture: any, callback: any) => void;\n      img: (texture: any, callback: any) => void;\n      video: (texture: any, callback: any) => void;\n    };\n    /**\n     * @name Two.Texture.load\n     * @function\n     * @param {Texture} texture - The texture to load.\n     * @param {Function} callback - The function to be called once the texture is loaded.\n     */\n    static load(texture: Texture, callback: Function): void;\n    constructor(src?: any, callback?: Function);\n    /**\n     * @name Two.Texture#_flagSrc\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Texture#src} needs updating.\n     */\n    private _flagSrc;\n    /**\n     * @name Two.Texture#_flagImage\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Texture#image} needs updating.\n     */\n    private _flagImage;\n    /**\n     * @name Two.Texture#_flagVideo\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Texture#video} needs updating.\n     */\n    private _flagVideo;\n    /**\n     * @name Two.Texture#_flagLoaded\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Texture#loaded} needs updating.\n     */\n    private _flagLoaded;\n    /**\n     * @name Two.Texture#_flagRepeat\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Texture#repeat} needs updating.\n     */\n    private _flagRepeat;\n    /**\n     * @name Two.Texture#_flagOffset\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Texture#offset} needs updating.\n     */\n    private _flagOffset;\n    /**\n     * @name Two.Texture#_flagScale\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Texture#scale} needs updating.\n     */\n    private _flagScale;\n    /**\n     * @name Two.Texture#_src\n     * @private\n     * @see {@link Two.Texture#src}\n     */\n    private _src;\n    /**\n     * @name Two.Texture#_image\n     * @private\n     * @see {@link Two.Texture#image}\n     */\n    private _image;\n    /**\n     * @name Two.Texture#_loaded\n     * @private\n     * @see {@link Two.Texture#loaded}\n     */\n    private _loaded;\n    /**\n     * @name Two.Texture#_repeat\n     * @private\n     * @see {@link Two.Texture#repeat}\n     */\n    private _repeat;\n    /**\n     * @name Two.Texture#_scale\n     * @private\n     * @see {@link Two.Texture#scale}\n     */\n    private _scale;\n    /**\n     * @name Two.Texture#_offset\n     * @private\n     * @see {@link Two.Texture#offset}\n     */\n    private _offset;\n    id: string;\n    /**\n     * @name Two.Texture#loaded\n     * @property {Boolean} - Shorthand value to determine if image has been loaded into the texture.\n     */\n    loaded: boolean;\n    /**\n     * @name Two.Texture#repeat\n     * @property {String} - CSS style declaration to tile {@link Two.Path}. Valid values include: `'no-repeat'`, `'repeat'`, `'repeat-x'`, `'repeat-y'`.\n     * @see {@link https://www.w3.org/TR/2dcontext/#dom-context-2d-createpattern}\n     */\n    repeat: string;\n    /**\n     * @name Two.Texture#offset\n     * @property {Vector} - A two-component vector describing any pixel offset of the texture when applied to a {@link Two.Path}.\n     */\n    offset: Vector;\n    src: string;\n    /**\n     * @name Two.Texture#image\n     * @property {Element} - The corresponding DOM Element of the texture. Can be a `<img />`, `<canvas />`, or `<video />` element. See {@link Two.Texture.RegularExpressions} for a full list of supported elements.\n     * @nota-bene In headless environments this is a `Canvas.Image` object. See {@link https://github.com/Automattic/node-canvas} for more information on headless image objects.\n     */\n    image: any;\n    /**\n     * @name Two.Texture#clone\n     * @function\n     * @returns {Texture}\n     * @description Create a new instance of {@link Two.Texture} with the same properties of the current texture.\n     */\n    clone(): Texture;\n    /**\n     * @name Two.Texture#toObject\n     * @function\n     * @returns {Object}\n     * @description Return a JSON compatible plain object that represents the texture.\n     */\n    toObject(): any;\n    /**\n     * @name Two.Texture#_update\n     * @function\n     * @private\n     * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n     * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n     * @nota-bene Try not to call this method more than once a frame.\n     */\n    private _update;\n  }\n  import { Element as TwoElement } from 'two.js/src/element';\n  import { Vector } from 'two.js/src/vector';\n  import { Registry } from 'two.js/src/registry';\n}\ndeclare module 'two.js/src/path' {\n  /**\n     * @name Two.Path\n     * @class\n\n     * @param {Anchor[]} [vertices] - A list of {@link Two.Anchor}s that represent the order and coordinates to construct the rendered shape.\n     * @param {Boolean} [closed=false] - Describes whether the shape is closed or open.\n     * @param {Boolean} [curved=false] - Describes whether the shape automatically calculates bezier handles for each vertex.\n     * @param {Boolean} [manual=false] - Describes whether the developer controls how vertices are plotted or if Two.js automatically plots coordinates based on closed and curved booleans.\n     * @description This is the primary primitive class for creating all drawable shapes in Two.js. Unless specified methods return their instance of `Two.Path` for the purpose of chaining.\n     */\n  export class Path extends Shape {\n    /**\n     * @name Two.Path.Properties\n     * @property {String[]} - A list of properties that are on every {@link Two.Path}.\n     */\n    static Properties: string[];\n    static Utils: {\n      getCurveLength: Function;\n    };\n    constructor(\n      vertices?: Anchor[],\n      closed?: boolean,\n      curved?: boolean,\n      manual?: boolean\n    );\n    /**\n     * @name Two.Path#_flagVertices\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Path#vertices} need updating.\n     */\n    private _flagVertices;\n    /**\n     * @name Two.Path#_flagLength\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Path#length} needs updating.\n     */\n    private _flagLength;\n    /**\n     * @name Two.Path#_flagFill\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Path#fill} needs updating.\n     */\n    private _flagFill;\n    /**\n     * @name Two.Path#_flagStroke\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Path#stroke} needs updating.\n     */\n    private _flagStroke;\n    /**\n     * @name Two.Path#_flagLinewidth\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Path#linewidth} needs updating.\n     */\n    private _flagLinewidth;\n    /**\n     * @name Two.Path#_flagOpacity\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Path#opacity} needs updating.\n     */\n    private _flagOpacity;\n    /**\n     * @name Two.Path#_flagVisible\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Path#visible} needs updating.\n     */\n    private _flagVisible;\n    /**\n     * @name Two.Path#_flagCap\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Path#cap} needs updating.\n     */\n    private _flagCap;\n    /**\n     * @name Two.Path#_flagJoin\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Path#join} needs updating.\n     */\n    private _flagJoin;\n    /**\n     * @name Two.Path#_flagMiter\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Path#miter} needs updating.\n     */\n    private _flagMiter;\n    /**\n     * @name Two.Path#_flagMask\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Path#mask} needs updating.\n     */\n    private _flagMask;\n    /**\n     * @name Two.Path#_flagClip\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Path#clip} needs updating.\n     */\n    private _flagClip;\n    /**\n     * @name Two.Path#_length\n     * @private\n     * @see {@link Two.Path#length}\n     */\n    private _length;\n    /**\n     * @name Two.Path#_fill\n     * @private\n     * @see {@link Two.Path#fill}\n     */\n    private _fill;\n    /**\n     * @name Two.Path#_stroke\n     * @private\n     * @see {@link Two.Path#stroke}\n     */\n    private _stroke;\n    /**\n     * @name Two.Path#_linewidth\n     * @private\n     * @see {@link Two.Path#linewidth}\n     */\n    private _linewidth;\n    /**\n     * @name Two.Path#_opacity\n     * @private\n     * @see {@link Two.Path#opacity}\n     */\n    private _opacity;\n    /**\n     * @name Two.Path#_visible\n     * @private\n     * @see {@link Two.Path#visible}\n     */\n    private _visible;\n    /**\n     * @name Two.Path#_cap\n     * @private\n     * @see {@link Two.Path#cap}\n     */\n    private _cap;\n    /**\n     * @name Two.Path#_join\n     * @private\n     * @see {@link Two.Path#join}\n     */\n    private _join;\n    /**\n     * @name Two.Path#_miter\n     * @private\n     * @see {@link Two.Path#miter}\n     */\n    private _miter;\n    /**\n     * @name Two.Path#_closed\n     * @private\n     * @see {@link Two.Path#closed}\n     */\n    private _closed;\n    /**\n     * @name Two.Path#_curved\n     * @private\n     * @see {@link Two.Path#curved}\n     */\n    private _curved;\n    /**\n     * @name Two.Path#_automatic\n     * @private\n     * @see {@link Two.Path#automatic}\n     */\n    private _automatic;\n    /**\n     * @name Two.Path#_beginning\n     * @private\n     * @see {@link Two.Path#beginning}\n     */\n    private _beginning;\n    /**\n     * @name Two.Path#_ending\n     * @private\n     * @see {@link Two.Path#ending}\n     */\n    private _ending;\n    /**\n     * @name Two.Path#_mask\n     * @private\n     * @see {@link Two.Path#mask}\n     */\n    private _mask;\n    /**\n     * @name Two.Path#_clip\n     * @private\n     * @see {@link Two.Path#clip}\n     */\n    private _clip;\n    /**\n     * @name Two.Path#_dashes\n     * @private\n     * @see {@link Two.Path#dashes}\n     */\n    private _dashes;\n    /**\n     * @name Two.Path#closed\n     * @property {Boolean} - Determines whether a final line is drawn between the final point in the `vertices` array and the first point.\n     */\n    closed: boolean;\n    /**\n     * @name Two.Path#curved\n     * @property {Boolean} - When the path is `automatic = true` this boolean determines whether the lines between the points are curved or not.\n     */\n    curved: boolean;\n    /**\n     * @name Two.Path#beginning\n     * @property {Number} - Number between zero and one to state the beginning of where the path is rendered.\n     * @description {@link Two.Path#beginning} is a percentage value that represents at what percentage into the path should the renderer start drawing.\n     * @nota-bene This is great for animating in and out stroked paths in conjunction with {@link Two.Path#ending}.\n     */\n    beginning: number;\n    /**\n     * @name Two.Path#ending\n     * @property {Number} - Number between zero and one to state the ending of where the path is rendered.\n     * @description {@link Two.Path#ending} is a percentage value that represents at what percentage into the path should the renderer start drawing.\n     * @nota-bene This is great for animating in and out stroked paths in conjunction with {@link Two.Path#beginning}.\n     */\n    ending: number;\n    /**\n     * @name Two.Path#fill\n     * @property {(String|Gradient|Texture)} - The value of what the path should be filled in with.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value} for more information on CSS's colors as `String`.\n     */\n    fill: string | Gradient | Texture;\n    /**\n     * @name Two.Path#stroke\n     * @property {(String|Gradient|Texture)} - The value of what the path should be outlined in with.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value} for more information on CSS's colors as `String`.\n     */\n    stroke: string | Gradient | Texture;\n    /**\n     * @name Two.Path#linewidth\n     * @property {Number} - The thickness in pixels of the stroke.\n     */\n    linewidth: number;\n    /**\n     * @name Two.Path#opacity\n     * @property {Number} - The opaqueness of the path.\n     * @nota-bene Can be used in conjunction with CSS Colors that have an alpha value.\n     */\n    opacity: number;\n    /**\n     * @name Two.Path#className\n     * @property {String} - A class to be applied to the element to be compatible with CSS styling.\n     * @nota-bene Only available for the SVG renderer.\n     */\n    className: string;\n    /**\n     * @name Two.Path#visible\n     * @property {Boolean} - Display the path or not.\n     * @nota-bene For {@link Two.CanvasRenderer} and {@link Two.WebGLRenderer} when set to false all updating is disabled improving performance dramatically with many objects in the scene.\n     */\n    visible: boolean;\n    /**\n     * @name Two.Path#cap\n     * @property {String}\n     * @see {@link https://www.w3.org/TR/SVG11/painting.html#StrokeLinecapProperty}\n     */\n    cap: string;\n    /**\n     * @name Two.Path#join\n     * @property {String}\n     * @see {@link https://www.w3.org/TR/SVG11/painting.html#StrokeLinejoinProperty}\n     */\n    join: string;\n    /**\n     * @name Two.Path#miter\n     * @property {String}\n     * @see {@link https://www.w3.org/TR/SVG11/painting.html#StrokeMiterlimitProperty}\n     */\n    miter: number;\n    /**\n     * @name Two.Path#vertices\n     * @property {Anchor[]} - An ordered list of anchor points for rendering the path.\n     * @description A list of {@link Two.Anchor} objects that consist of what form the path takes.\n     * @nota-bene The array when manipulating is actually a {@link Two.Collection}.\n     */\n    vertices: any;\n    /**\n     * @name Two.Path#automatic\n     * @property {Boolean} - Determines whether or not Two.js should calculate curves, lines, and commands automatically for you or to let the developer manipulate them for themselves.\n     */\n    automatic: boolean;\n    /**\n     * @name Two.Path#dashes\n     * @property {Number[]} - Array of numbers. Odd indices represent dash length. Even indices represent dash space.\n     * @description A list of numbers that represent the repeated dash length and dash space applied to the stroke of the text.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more information on the SVG stroke-dasharray attribute.\n     */\n    dashes: number[];\n    /**\n     * @name Two.Path#toObject\n     * @function\n     * @returns {Object}\n     * @description Return a JSON compatible plain object that represents the path.\n     */\n    toObject(): any;\n    /**\n     * @name Two.Path#noFill\n     * @function\n     * @description Short hand method to set fill to `none`.\n     */\n    noFill(): Path;\n    /**\n     * @name Two.Path#noStroke\n     * @function\n     * @description Short hand method to set stroke to `none`.\n     */\n    noStroke(): Path;\n    /**\n     * @name Two.Path#corner\n     * @function\n     * @description Orient the vertices of the shape to the upper left-hand corner of the path.\n     */\n    corner(): Path;\n    /**\n     * @name Two.Path#center\n     * @function\n     * @description Orient the vertices of the shape to the center of the path.\n     */\n    center(): Path;\n    /**\n     * @name Two.Path#getBoundingClientRect\n     * @function\n     * @param {Boolean} [shallow=false] - Describes whether to calculate off local matrix or world matrix.\n     * @returns {Object} - Returns object with top, left, right, bottom, width, height attributes.\n     * @description Return an object with top, left, right, bottom, width, and height parameters of the path.\n     */\n    getBoundingClientRect(shallow?: boolean): BoundingBox;\n    /**\n     * @name Two.Path#getPointAt\n     * @function\n     * @param {Number} t - Percentage value describing where on the {@link Two.Path} to estimate and assign coordinate values.\n     * @param {Vector} [obj] - Object to apply calculated x, y to. If none available returns new `Object`.\n     * @returns {Object}\n     * @description Given a float `t` from 0 to 1, return a point or assign a passed `obj`'s coordinates to that percentage on this {@link Two.Path}'s curve.\n     */\n    getPointAt(t: number, obj?: Vector): Vector;\n    /**\n     * @name Two.Path#plot\n     * @function\n     * @description Based on closed / curved and sorting of vertices plot where all points should be and where the respective handles should be too.\n     * @nota-bene While this method is public it is internally called by {@link Two.Path#_update} when `automatic = true`.\n     */\n    plot(): Path;\n    /**\n     * @name Two.Path#subdivide\n     * @function\n     * @param {Number} limit - How many times to recurse subdivisions.\n     * @description Insert a {@link Two.Anchor} at the midpoint between every item in {@link Two.Path#vertices}.\n     */\n    subdivide(limit: number): Path;\n    /**\n     * @name Two.Path#_updateLength\n     * @function\n     * @private\n     * @param {Number} [limit] -\n     * @param {Boolean} [silent=false] - If set to `true` then the path isn't updated before calculation. Useful for internal use.\n     * @description Recalculate the {@link Two.Path#length} value.\n     */\n    private _updateLength;\n    _lengths: any[];\n  }\n  import { Vector } from 'two.js/src/vector';\n  import { Anchor } from 'two.js/src/anchor';\n  import { Shape } from 'two.js/src/shape';\n  import { Gradient } from 'two.js/src/effects/gradient';\n  import { Texture } from 'two.js/src/effects/texture';\n  import { BoundingBox } from 'two.js';\n  /**\n   * @name FlagVertices\n   * @private\n   * @function\n   * @description Cached method to let renderers know vertices have been updated on a {@link Two.Path}.\n   */\n  export function FlagVertices(): void;\n  export class FlagVertices {\n    _flagVertices: boolean;\n    _flagLength: boolean;\n  }\n  /**\n   * @name BindVertices\n   * @private\n   * @function\n   * @description Cached method to let {@link Two.Path} know vertices have been added to the instance.\n   */\n  export function BindVertices(items: any): void;\n  /**\n   * @name UnbindVertices\n   * @private\n   * @function\n   * @description Cached method to let {@link Two.Path} know vertices have been removed from the instance.\n   */\n  export function UnbindVertices(items: any): void;\n  /**\n   * @name FlagFill\n   * @private\n   * @function\n   * @description Cached method to let {@link Two.Path} know the fill has changed.\n   */\n  export function FlagFill(): void;\n  export class FlagFill {\n    _flagFill: boolean;\n  }\n  /**\n   * @name FlagFill\n   * @private\n   * @function\n   * @description Cached method to let {@link Two.Path} know the stroke has changed.\n   */\n  export function FlagStroke(): void;\n  export class FlagStroke {\n    _flagStroke: boolean;\n  }\n}\ndeclare module 'two.js/src/shapes/rectangle' {\n  /**\n     * @name Two.Rectangle\n     * @class\n\n     * @param {Number} [x=0] - The x position of the rectangle.\n     * @param {Number} [y=0] - The y position of the rectangle.\n     * @param {Number} [width=1] - The width value of the rectangle.\n     * @param {Number} [height=1] - The width value of the rectangle.\n     */\n  export class Rectangle extends Path {\n    constructor(x?: number, y?: number, width?: number, height?: number);\n    /**\n     * @name Two.Rectangle#width\n     * @property {Number} - The size of the width of the rectangle.\n     */\n    width: number;\n    /**\n     * @name Two.Rectangle#height\n     * @property {Number} - The size of the height of the rectangle.\n     */\n    height: number;\n    /**\n     * @name Two.Rectangle#origin\n     * @property {Number} - A two-component vector describing the origin offset to draw the rectangle. Default is `0, 0`.\n     */\n    origin: Vector;\n    /**\n     * @name Two.Rectangle#_flagWidth\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Rectangle#width} needs updating.\n     */\n    private _flagWidth;\n    /**\n     * @name Two.Rectangle#_flagHeight\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Rectangle#height} needs updating.\n     */\n    private _flagHeight;\n    /**\n     * @name Two.Rectangle#_width\n     * @private\n     * @see {@link Two.Rectangle#width}\n     */\n    private _width;\n    /**\n     * @name Two.Rectangle#_height\n     * @private\n     * @see {@link Two.Rectangle#height}\n     */\n    private _height;\n    private _origin: Vector;\n  }\n  import { Path } from 'two.js/src/path';\n  import { Vector } from 'two.js/src/vector';\n}\ndeclare module 'two.js/src/effects/sprite' {\n  /**\n     * @name Two.Sprite\n     * @class\n\n     * @param {String|Texture} [path] - The URL path or {@link Two.Texture} to be used as the bitmap data displayed on the sprite.\n     * @param {Number} [ox=0] - The initial `x` position of the Two.Sprite.\n     * @param {Number} [oy=0] - The initial `y` position of the Two.Sprite.\n     * @param {Number} [cols=1] - The number of columns the sprite contains.\n     * @param {Number} [rows=1] - The number of rows the sprite contains.\n     * @param {Number} [frameRate=0] - The frame rate at which the partitions of the image should playback at.\n     * @description A convenient package to display still or animated images through a tiled image source. For more information on the principals of animated imagery through tiling see [Texture Atlas](https://en.wikipedia.org/wiki/Texture_atlas) on Wikipedia.\n     */\n  export class Sprite extends Rectangle {\n    constructor(\n      path?: any,\n      ox?: number,\n      oy?: number,\n      cols?: number,\n      rows?: number,\n      frameRate?: number\n    );\n    /**\n     * @name Two.Sprite#_flagTexture\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Sprite#texture} needs updating.\n     */\n    private _flagTexture;\n    /**\n     * @name Two.Sprite#_flagColumns\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Sprite#columns} need updating.\n     */\n    private _flagColumns;\n    /**\n     * @name Two.Sprite#_flagRows\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Sprite#rows} need updating.\n     */\n    private _flagRows;\n    /**\n     * @name Two.Sprite#_flagFrameRate\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Sprite#flagFrameRate} needs updating.\n     */\n    private _flagFrameRate;\n    /**\n     * @name Two.Sprite#_flagIndex\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Sprite#index} needs updating.\n     */\n    private _flagIndex;\n    /**\n     * @name Two.Sprite#_amount\n     * @private\n     * @property {Number} - Number of frames for a given {@link Two.Sprite}.\n     */\n    private _amount;\n    /**\n     * @name Two.Sprite#_duration\n     * @private\n     * @property {Number} - Number of milliseconds a {@link Two.Sprite}.\n     */\n    private _duration;\n    /**\n     * @name Two.Sprite#_startTime\n     * @private\n     * @property {Milliseconds} - Epoch time in milliseconds of when the {@link Two.Sprite} started.\n     */\n    private _startTime;\n    /**\n     * @name Two.Sprite#_playing\n     * @private\n     * @property {Boolean} - Dictates whether the {@link Two.Sprite} is animating or not.\n     */\n    private _playing;\n    /**\n     * @name Two.Sprite#_firstFrame\n     * @private\n     * @property {Number} - The frame the {@link Two.Sprite} should start with.\n     */\n    private _firstFrame;\n    /**\n     * @name Two.Sprite#_lastFrame\n     * @private\n     * @property {Number} - The frame the {@link Two.Sprite} should end with.\n     */\n    private _lastFrame;\n    /**\n     * @name Two.Sprite#_playing\n     * @private\n     * @property {Boolean} - Dictates whether the {@link Two.Sprite} should loop or not.\n     */\n    private _loop;\n    /**\n     * @name Two.Sprite#_texture\n     * @private\n     * @see {@link Two.Sprite#texture}\n     */\n    private _texture;\n    /**\n     * @name Two.Sprite#_columns\n     * @private\n     * @see {@link Two.Sprite#columns}\n     */\n    private _columns;\n    /**\n     * @name Two.Sprite#_rows\n     * @private\n     * @see {@link Two.Sprite#rows}\n     */\n    private _rows;\n    /**\n     * @name Two.Sprite#_frameRate\n     * @private\n     * @see {@link Two.Sprite#frameRate}\n     */\n    private _frameRate;\n    /**\n     * @name Two.Sprite#_index\n     * @private\n     * @property {Number} - The current frame the {@link Two.Sprite} is currently displaying.\n     */\n    private _index;\n    texture: Texture;\n    columns: number;\n    rows: number;\n    frameRate: number;\n    /**\n     * @name Two.Sprite#index\n     * @property {Number} - The index of the current tile of the sprite to display. Defaults to `0`.\n     */\n    index: number;\n    /**\n     * @name Two.Sprite#play\n     * @function\n     * @param {Number} [firstFrame=0] - The index of the frame to start the animation with.\n     * @param {Number} [lastFrame] - The index of the frame to end the animation with. Defaults to the last item in the {@link Two.Sprite#textures}.\n     * @param {Function} [onLastFrame] - Optional callback function to be triggered after playing the last frame. This fires multiple times when the sprite is looped.\n     * @description Initiate animation playback of a {@link Two.Sprite}.\n     */\n    play(\n      firstFrame?: number,\n      lastFrame?: number,\n      onLastFrame?: Function\n    ): Sprite;\n    _onLastFrame: Function;\n    /**\n     * @name Two.Sprite#pause\n     * @function\n     * @description Halt animation playback of a {@link Two.Sprite}.\n     */\n    pause(): Sprite;\n    /**\n     * @name Two.Sprite#stop\n     * @function\n     * @description Halt animation playback of a {@link Two.Sprite} and set the current frame back to the first frame.\n     */\n    stop(): Sprite;\n  }\n  import { Rectangle } from 'two.js/src/shapes/rectangle';\n  import { Texture } from 'two.js/src/effects/texture';\n}\ndeclare module 'two.js/src/shapes/circle' {\n  /**\n     * @name Two.Circle\n     * @class\n\n     * @param {Number} [x=0] - The x position of the circle.\n     * @param {Number} [y=0] - The y position of the circle.\n     * @param {Number} [radius=0] - The radius value of the circle.\n     * @param {Number} [resolution=4] - The number of vertices used to construct the circle.\n     */\n  export class Circle extends Path {\n    /**\n     * @name Two.Circle#_flagRadius\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Circle#radius} needs updating.\n     */\n    private _flagRadius;\n    /**\n     * @name Two.Circle#_radius\n     * @private\n     * @see {@link Two.Circle#radius}\n     */\n    private _radius;\n    constructor(x?: number, y?: number, radius?: number, resolution?: number);\n    radius: number;\n  }\n  import { Path } from 'two.js/src/path';\n}\ndeclare module 'two.js/src/shapes/ellipse' {\n  /**\n     * @name Two.Ellipse\n     * @class\n\n     * @param {Number} [x=0] - The x position of the ellipse.\n     * @param {Number} [y=0] - The y position of the ellipse.\n     * @param {Number} [rx=0] - The radius value of the ellipse in the x direction.\n     * @param {Number} [ry=0] - The radius value of the ellipse in the y direction.\n     * @param {Number} [resolution=4] - The number of vertices used to construct the ellipse.\n     */\n  export class Ellipse extends Path {\n    constructor(\n      x?: number,\n      y?: number,\n      rx?: number,\n      ry?: number,\n      resolution?: number\n    );\n    /**\n     * @name Two.Ellipse#_flagWidth\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Ellipse#width} needs updating.\n     */\n    private _flagWidth;\n    /**\n     * @name Two.Ellipse#_flagHeight\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Ellipse#height} needs updating.\n     */\n    private _flagHeight;\n    /**\n     * @name Two.Ellipse#_width\n     * @private\n     * @see {@link Two.Ellipse#width}\n     */\n    private _width;\n    /**\n     * @name Two.Ellipse#_height\n     * @private\n     * @see {@link Two.Ellipse#height}\n     */\n    private _height;\n    width: number;\n    height: number;\n  }\n  import { Path } from 'two.js/src/path';\n}\ndeclare module 'two.js/src/shapes/line' {\n  /**\n     * @name Two.Line\n     * @class\n\n     * @param {Number} [x1=0] - The x position of the first vertex on the line.\n     * @param {Number} [y1=0] - The y position of the first vertex on the line.\n     * @param {Number} [x2=0] - The x position of the second vertex on the line.\n     * @param {Number} [y2=0] - The y position of the second vertex on the line.\n     */\n  export class Line extends Path {\n    constructor(x1?: number, y1?: number, x2?: number, y2?: number);\n\n    /**\n     * @name Two.Line#left\n     * @property {Anchor} - the first vertex on the line.\n     */\n    left: Anchor;\n\n    /**\n     * @name Two.Line#right\n     * @property {Anchor} - the second vertex on the line.\n     */\n    right: Anchor;\n  }\n  import { Path } from 'two.js/src/path';\n  import { Anchor } from 'two.js/src/anchor';\n}\ndeclare module 'two.js/src/shapes/rounded-rectangle' {\n  /**\n     * @name Two.RoundedRectangle\n     * @class\n\n     * @param {Number} [x=0] - The x position of the rounded rectangle.\n     * @param {Number} [y=0] - The y position of the rounded rectangle.\n     * @param {Number} [width=0] - The width value of the rounded rectangle.\n     * @param {Number} [height=0] - The width value of the rounded rectangle.\n     * @param {Number} [radius=0] - The radius value of the rounded rectangle.\n     * @param {Number} [resolution=12] - The number of vertices used to construct the rounded rectangle.\n     */\n  export class RoundedRectangle extends Path {\n    constructor(\n      x?: number,\n      y?: number,\n      width?: number,\n      height?: number,\n      radius?: number\n    );\n    /**\n     * @name Two.RoundedRectangle#_flagWidth\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.RoundedRectangle#width} needs updating.\n     */\n    private _flagWidth;\n    /**\n     * @name Two.RoundedRectangle#_flagHeight\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.RoundedRectangle#height} needs updating.\n     */\n    private _flagHeight;\n    /**\n     * @name Two.RoundedRectangle#_flagRadius\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.RoundedRectangle#radius} needs updating.\n     */\n    private _flagRadius;\n    /**\n     * @name Two.RoundedRectangle#_width\n     * @private\n     * @see {@link Two.RoundedRectangle#width}\n     */\n    private _width;\n    /**\n     * @name Two.RoundedRectangle#_height\n     * @private\n     * @see {@link Two.RoundedRectangle#height}\n     */\n    private _height;\n    /**\n     * @name Two.RoundedRectangle#_radius\n     * @private\n     * @see {@link Two.RoundedRectangle#radius}\n     */\n    private _radius;\n    closed: boolean;\n    width: number;\n    height: number;\n    radius: number;\n  }\n  import { Path } from 'two.js/src/path';\n}\ndeclare module 'two.js/src/text' {\n  /**\n     * @name Two.Text\n     * @class\n\n     * @param {String} [message] - The String to be rendered to the scene.\n     * @param {Number} [x=0] - The position in the x direction for the object.\n     * @param {Number} [y=0] - The position in the y direction for the object.\n     * @param {Object} [styles] - An object where styles are applied. Attribute must exist in Two.Text.Properties.\n     * @description This is a primitive class for creating drawable text that can be added to the scenegraph.\n     * @returns {Text}\n     */\n  export class Text extends Shape {\n    /**\n     * @name Two.Text.Ratio\n     * @property {Number} - Approximate aspect ratio of a typeface's character width to height.\n     */\n    static Ratio: number;\n    /**\n     * @name Two.Text.Properties\n     * @property {String[]} - A list of properties that are on every {@link Two.Text}.\n     */\n    static Properties: string[];\n    /**\n     * @name Two.Measure\n     * @function\n     * @param {Two.Text} [text] - The instance of {@link Two.Text} to measure.\n     * @returns {Object} - The width and height of the {@link Two.Text} instance.\n     */\n    static Measure(text: Text): Dimensions;\n\n    constructor(message?: string, x?: number, y?: number, styles?: any);\n    /**\n     * @name Two.Text#_flagValue\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Text#value} need updating.\n     */\n    private _flagValue;\n    /**\n     * @name Two.Text#_flagFamily\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Text#family} need updating.\n     */\n    private _flagFamily;\n    /**\n     * @name Two.Text#_flagSize\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Text#size} need updating.\n     */\n    private _flagSize;\n    /**\n     * @name Two.Text#_flagLeading\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Text#leading} need updating.\n     */\n    private _flagLeading;\n    /**\n     * @name Two.Text#_flagAlignment\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Text#alignment} need updating.\n     */\n    private _flagAlignment;\n    /**\n     * @name Two.Text#_flagBaseline\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Text#baseline} need updating.\n     */\n    private _flagBaseline;\n    /**\n     * @name Two.Text#_flagStyle\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Text#style} need updating.\n     */\n    private _flagStyle;\n    /**\n     * @name Two.Text#_flagWeight\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Text#weight} need updating.\n     */\n    private _flagWeight;\n    /**\n     * @name Two.Text#_flagDecoration\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Text#decoration} need updating.\n     */\n    private _flagDecoration;\n    /**\n     * @name Two.Text#_flagDirection\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Text#direction} needs updating.\n     */\n    private _flagDirection;\n    /**\n     * @name Two.Text#_flagFill\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Text#fill} need updating.\n     */\n    private _flagFill;\n    /**\n     * @name Two.Text#_flagStroke\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Text#stroke} need updating.\n     */\n    private _flagStroke;\n    /**\n     * @name Two.Text#_flagLinewidth\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Text#linewidth} need updating.\n     */\n    private _flagLinewidth;\n    /**\n     * @name Two.Text#_flagOpacity\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Text#opacity} need updating.\n     */\n    private _flagOpacity;\n    /**\n     * @name Two.Text#_flagVisible\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Text#visible} need updating.\n     */\n    private _flagVisible;\n    /**\n     * @name Two.Path#_flagMask\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Path#mask} needs updating.\n     */\n    private _flagMask;\n    /**\n     * @name Two.Text#_flagClip\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Text#clip} need updating.\n     */\n    private _flagClip;\n    /**\n     * @name Two.Text#value\n     * @property {String} - The characters to be rendered to the the screen. Referred to in the documentation sometimes as the `message`.\n     */\n    /**\n     * @name Two.Text#_dashes\n     * @private\n     * @see {@link Two.Text#dashes}\n     */\n    private _dashes;\n    /**\n     * @name Two.Text#value\n     * @property {String} - The characters to be rendered to the the screen. Referred to in the documentation sometimes as the `message`.\n     */\n    value: string;\n    /**\n     * @name Two.Text#family\n     * @property {String} - The font family Two.js should attempt to regsiter for rendering. The default value is `'sans-serif'`. Comma separated font names can be supplied as a \"stack\", similar to the CSS implementation of `font-family`.\n     */\n    family: string;\n    /**\n     * @name Two.Text#size\n     * @property {Number} - The font size in Two.js point space. Defaults to `13`.\n     */\n    size: number;\n    /**\n     * @name Two.Text#leading\n     * @property {Number} - The height between lines measured from base to base in Two.js point space. Defaults to `17`.\n     */\n    leading: number;\n    /**\n     * @name Two.Text#alignment\n     * @property {String} - Alignment of text in relation to {@link Two.Text#translation}'s coordinates. Possible values include `'left'`, `'center'`, `'right'`. Defaults to `'center'`.\n     */\n    alignment: 'left' | 'center' | 'right';\n    /**\n     * @name Two.Text#baseline\n     * @property {String} - The vertical aligment of the text in relation to {@link Two.Text#translation}'s coordinates. Possible values include `'top'`, `'middle'`, `'bottom'`, and `'baseline'`. Defaults to `'baseline'`.\n     */\n    baseline: 'top' | 'middle' | 'bottom' | 'baseline';\n    /**\n     * @name Two.Text#style\n     * @property {String} - The font's style. Possible values include '`normal`', `'italic'`. Defaults to `'normal'`.\n     */\n    style: 'normal' | 'italic';\n    /**\n     * @name Two.Text#weight\n     * @property {Number} - A number at intervals of 100 to describe the font's weight. This compatibility varies with the typeface's variant weights. Larger values are bolder. Smaller values are thinner. Defaults to `500`.\n     */\n    weight: number | string;\n    /**\n     * @name Two.Text#decoration\n     * @property {String} - String to delineate whether text should be decorated with for instance an `'underline'`. Defaults to `'none'`.\n     */\n    decoration: 'underline' | 'strikethrough' | 'none';\n    /**\n     * @name Two.Text#direction\n     * @property {String} - String to determine what direction the text should run. Possibly values are `'ltr'` for left-to-right and `'rtl'` for right-to-left. Defaults to `'ltr'`.\n     */\n    _direction: 'ltr' | 'rtl';\n    /**\n     * @name Two.Text#fill\n     * @property {(String|Gradient|Texture)} - The value of what the text object should be filled in with.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value} for more information on CSS's colors as `String`.\n     */\n    fill: string | Gradient | Texture;\n    /**\n     * @name Two.Text#stroke\n     * @property {(String|Gradient|Texture)} - The value of what the text object should be filled in with.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value} for more information on CSS's colors as `String`.\n     */\n    stroke: string | Gradient | Texture;\n    /**\n     * @name Two.Text#linewidth\n     * @property {Number} - The thickness in pixels of the stroke.\n     */\n    linewidth: number;\n    /**\n     * @name Two.Text#opacity\n     * @property {Number} - The opaqueness of the text object.\n     * @nota-bene Can be used in conjunction with CSS Colors that have an alpha value.\n     */\n    opacity: number;\n    /**\n     * @name Two.Text#visible\n     * @property {Boolean} - Display the text object or not.\n     * @nota-bene For {@link Two.CanvasRenderer} and {@link Two.WebGLRenderer} when set to false all updating is disabled improving performance dramatically with many objects in the scene.\n     */\n    visible: boolean;\n    /**\n     * @name Two.Text#mask\n     * @property {Shape} - The shape whose alpha property becomes a clipping area for the text.\n     * @nota-bene This property is currently not working becuase of SVG spec issues found here {@link https://code.google.com/p/chromium/issues/detail?id=370951}.\n     */\n    mask: any;\n    /**\n     * @name Two.Text#clip\n     * @property {Shape} - Object to define clipping area.\n     * @nota-bene This property is currently not working becuase of SVG spec issues found here {@link https://code.google.com/p/chromium/issues/detail?id=370951}.\n     */\n    clip: boolean;\n    /**\n     * @name Two.Text#dashes\n     * @property {Number[]} - Array of numbers. Odd indices represent dash length. Even indices represent dash space.\n     * @description A list of numbers that represent the repeated dash length and dash space applied to the stroke of the text.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more information on the SVG stroke-dasharray attribute.\n     */\n    dashes: number[];\n    /**\n     * @name Two.Text#toObject\n     * @function\n     * @returns {Object}\n     * @description Return a JSON compatible plain object that represents the text object.\n     */\n    toObject(): any;\n    /**\n     * @name Two.Text#noFill\n     * @function\n     * @description Short hand method to set fill to `none`.\n     */\n    noFill(): Text;\n    /**\n     * @name Two.Text#noStroke\n     * @function\n     * @description Short hand method to set stroke to `none`.\n     */\n    noStroke(): Text;\n    /**\n     * @name Two.Text#getBoundingClientRect\n     * @function\n     * @param {Boolean} [shallow=false] - Describes whether to calculate off local matrix or world matrix.\n     * @returns {Object} - Returns object with top, left, right, bottom, width, height attributes.\n     * @description Return an object with top, left, right, bottom, width, and height parameters of the text object.\n     */\n    getBoundingClientRect(shallow?: boolean): BoundingBox;\n  }\n  import { Shape } from 'two.js/src/shape';\n  import { Gradient } from 'two.js/src/effects/gradient';\n  import { Texture } from 'two.js/src/effects/texture';\n  import { BoundingBox, Dimensions } from 'two.js';\n}\ndeclare module 'two.js/src/utils/interpret-svg' {\n  /**\n   * @name Two.Utils.read\n   * @property {Object} read - A map of functions to read any number of SVG node types and create Two.js equivalents of them. Primarily used by the {@link Two#interpret} method.\n   */\n  export const read: {\n    svg: (node: any) => any;\n    defs: (node: any) => any;\n    use: (node: any, styles: any) => any;\n    g: (node: any, parentStyles: any) => Group;\n    polygon: (node: any, parentStyles: any) => Path;\n    polyline: (node: any, parentStyles: any) => any;\n    path: (node: any, parentStyles: any) => Path;\n    circle: (node: any, parentStyles: any) => Circle;\n    ellipse: (node: any, parentStyles: any) => Ellipse;\n    rect: (node: any, parentStyles: any) => Rectangle | RoundedRectangle;\n    'rounded-rect': (node: any, parentStyles: any) => RoundedRectangle;\n    line: (node: any, parentStyles: any) => Line;\n    lineargradient: (node: any, parentStyles: any) => LinearGradient;\n    radialgradient: (node: any, parentStyles: any) => RadialGradient;\n    text: (node: any, parentStyles: any) => Text;\n    clippath: (node: any, parentStyles: any) => any;\n    image: (node: any, parentStyles: any) => Sprite;\n  };\n  import { Group } from 'two.js/src/group';\n  import { Path } from 'two.js/src/path';\n  import { Circle } from 'two.js/src/shapes/circle';\n  import { Ellipse } from 'two.js/src/shapes/ellipse';\n  import { Rectangle } from 'two.js/src/shapes/rectangle';\n  import { RoundedRectangle } from 'two.js/src/shapes/rounded-rectangle';\n  import { Line } from 'two.js/src/shapes/line';\n  import { LinearGradient } from 'two.js/src/effects/linear-gradient';\n  import { RadialGradient } from 'two.js/src/effects/radial-gradient';\n  import { Text } from 'two.js/src/text';\n  import { Sprite } from 'two.js/src/effects/sprite';\n}\ndeclare module 'two.js/src/utils/xhr' {\n  /**\n   * @name Two.Utils.xhr\n   * @function\n   * @param {String} path\n   * @param {Function} callback\n   * @returns {XMLHttpRequest} The constructed and called XHR request.\n   * @description Canonical method to initiate `GET` requests in the browser. Mainly used by {@link Two#load} method.\n   */\n  export function xhr(path: string, callback: Function): XMLHttpRequest;\n}\ndeclare module 'two.js/src/effects/image-sequence' {\n  /**\n     * @name Two.ImageSequence\n     * @class\n\n     * @param {String|String[]|Texture|Texture[]} paths - A list of URLs or {@link Two.Texture}s.\n     * @param {Number} [ox=0] - The initial `x` position of the Two.ImageSequence.\n     * @param {Number} [oy=0] - The initial `y` position of the Two.ImageSequence.\n     * @param {Number} [frameRate=30] - The frame rate at which the images should playback at.\n     * @description A convenient package to display still or animated images organized as a series of still images.\n     */\n  export class ImageSequence extends Rectangle {\n    /**\n     * @name Two.ImageSequence.DefaultFrameRate\n     * @property The default frame rate that {@link Two.ImageSequence#frameRate} is set to when instantiated.\n     */\n    static DefaultFrameRate: number;\n    /**\n     * @name Two.ImageSequence#_flagTextures\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.ImageSequence#textures} need updating.\n     */\n    private _flagTextures;\n    /**\n     * @name Two.ImageSequence#_flagFrameRate\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.ImageSequence#frameRate} needs updating.\n     */\n    private _flagFrameRate;\n    /**\n     * @name Two.ImageSequence#_flagIndex\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.ImageSequence#index} needs updating.\n     */\n    private _flagIndex;\n    /**\n     * @name Two.ImageSequence#_amount\n     * @private\n     * @property {Number} - Number of frames for a given {@link Two.ImageSequence}.\n     */\n    private _amount;\n    /**\n     * @name Two.ImageSequence#_duration\n     * @private\n     * @property {Number} - Number of milliseconds a {@link Two.ImageSequence}.\n     */\n    private _duration;\n    /**\n     * @name Two.ImageSequence#_index\n     * @private\n     * @property {Number} - The current frame the {@link Two.ImageSequence} is currently displaying.\n     */\n    private _index;\n    /**\n     * @name Two.ImageSequence#_startTime\n     * @private\n     * @property {Milliseconds} - Epoch time in milliseconds of when the {@link Two.ImageSequence} started.\n     */\n    private _startTime;\n    /**\n     * @name Two.ImageSequence#_playing\n     * @private\n     * @property {Boolean} - Dictates whether the {@link Two.ImageSequence} is animating or not.\n     */\n    private _playing;\n    /**\n     * @name Two.ImageSequence#_firstFrame\n     * @private\n     * @property {Number} - The frame the {@link Two.ImageSequence} should start with.\n     */\n    private _firstFrame;\n    /**\n     * @name Two.ImageSequence#_lastFrame\n     * @private\n     * @property {Number} - The frame the {@link Two.ImageSequence} should end with.\n     */\n    private _lastFrame;\n    /**\n     * @name Two.ImageSequence#_playing\n     * @private\n     * @property {Boolean} - Dictates whether the {@link Two.ImageSequence} should loop or not.\n     */\n    private _loop;\n    /**\n     * @name Two.ImageSequence#_textures\n     * @private\n     * @see {@link Two.ImageSequence#textures}\n     */\n    private _textures;\n    /**\n     * @name Two.ImageSequence#_frameRate\n     * @private\n     * @see {@link Two.ImageSequence#frameRate}\n     */\n    private _frameRate;\n    textures: any[];\n    frameRate: number;\n    /**\n     * @name Two.ImageSequence#index\n     * @property {Number} - The index of the current tile of the sprite to display. Defaults to `0`.\n     */\n    index: number;\n    /**\n     * @name Two.ImageSequence#play\n     * @function\n     * @param {Number} [firstFrame=0] - The index of the frame to start the animation with.\n     * @param {Number} [lastFrame] - The index of the frame to end the animation with. Defaults to the last item in the {@link Two.ImageSequence#textures}.\n     * @param {Function} [onLastFrame] - Optional callback function to be triggered after playing the last frame. This fires multiple times when the image sequence is looped.\n     * @description Initiate animation playback of a {@link Two.ImageSequence}.\n     */\n    play(\n      firstFrame?: number,\n      lastFrame?: number,\n      onLastFrame?: Function\n    ): ImageSequence;\n    _onLastFrame: Function;\n    /**\n     * @name Two.ImageSequence#pause\n     * @function\n     * @description Halt animation playback of a {@link Two.ImageSequence}.\n     */\n    pause(): ImageSequence;\n    /**\n     * @name Two.ImageSequence#stop\n     * @function\n     * @description Halt animation playback of a {@link Two.ImageSequence} and set the current frame back to the first frame.\n     */\n    stop(): ImageSequence;\n  }\n  import { Rectangle } from 'two.js/src/shapes/rectangle';\n}\ndeclare module 'two.js/src/shapes/arc-segment' {\n  /**\n     * @name Two.ArcSegment\n     * @class\n\n     * @param {Number} [x=0] - The x position of the arc segment.\n     * @param {Number} [y=0] - The y position of the arc segment.\n     * @param {Number} [innerRadius=0] - The inner radius value of the arc segment.\n     * @param {Number} [outerRadius=0] - The outer radius value of the arc segment.\n     * @param {Number} [startAngle=0] - The start angle of the arc segment in Number.\n     * @param {Number} [endAngle=6.2831] - The end angle of the arc segment in Number.\n     * @param {Number} [resolution=24] - The number of vertices used to construct the arc segment.\n     */\n  export class ArcSegment extends Path {\n    constructor(\n      ox?: number,\n      oy?: number,\n      ir?: number,\n      or?: number,\n      sa?: number,\n      ea?: number,\n      res?: number\n    );\n    /**\n     * @name Two.ArcSegment#_flagStartAngle\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.ArcSegment#startAngle} needs updating.\n     */\n    private _flagStartAngle;\n    /**\n     * @name Two.ArcSegment#_flagEndAngle\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.ArcSegment#endAngle} needs updating.\n     */\n    private _flagEndAngle;\n    /**\n     * @name Two.ArcSegment#_flagInnerRadius\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.ArcSegment#innerRadius} needs updating.\n     */\n    private _flagInnerRadius;\n    /**\n     * @name Two.ArcSegment#_flagOuterRadius\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.ArcSegment#outerRadius} needs updating.\n     */\n    private _flagOuterRadius;\n    /**\n     * @name Two.ArcSegment#_startAngle\n     * @private\n     * @see {@link Two.ArcSegment#startAngle}\n     */\n    private _startAngle;\n    /**\n     * @name Two.ArcSegment#_endAngle\n     * @private\n     * @see {@link Two.ArcSegment#endAngle}\n     */\n    private _endAngle;\n    /**\n     * @name Two.ArcSegment#_innerRadius\n     * @private\n     * @see {@link Two.ArcSegment#innerRadius}\n     */\n    private _innerRadius;\n    /**\n     * @name Two.ArcSegment#_outerRadius\n     * @private\n     * @see {@link Two.ArcSegment#outerRadius}\n     */\n    private _outerRadius;\n    innerRadius: number;\n    outerRadius: number;\n    startAngle: number;\n    endAngle: number;\n  }\n  import { Path } from 'two.js/src/path';\n}\ndeclare module 'two.js/src/shapes/points' {\n  /**\n     * @name Two.Points\n     * @class\n\n     * @param {Vector[]} [vertices] - A list of {@link Two.Vector}s that represent the order and coordinates to construct a rendered set of points.\n     * @description This is a primary primitive class for quickly and easily drawing points in Two.js. Unless specified methods return their instance of `Two.Points` for the purpose of chaining.\n     */\n  export class Points extends Shape {\n    static Properties: string[];\n    constructor(vertices?: any[]);\n    private _flagVertices;\n    private _flagLength;\n    private _flagFill;\n    private _flagStroke;\n    private _flagLinewidth;\n    private _flagOpacity;\n    private _flagVisible;\n    private _flagSize;\n    private _flagSizeAttenuation;\n    private _length;\n    private _fill;\n    private _stroke;\n    private _linewidth;\n    private _opacity;\n    private _visible;\n    private _size;\n    private _sizeAttenuation;\n    private _beginning;\n    private _ending;\n    private _dashes;\n    /**\n     * @name Two.Points#sizeAttenuation\n     * @property {Boolean} - Boolean dictating whether Two.js should scale the size of the points based on its matrix hierarcy.\n     * @description Set to `true` if you'd like the size of the points to be relative to the scale of its parents; `false` to disregard. Default is `false`.\n     */\n    sizeAttenuation: boolean;\n    /**\n     * @name Two.Points#beginning\n     * @property {Number} - Number between zero and one to state the beginning of where the path is rendered.\n     * @description {@link Two.Points#beginning} is a percentage value that represents at what percentage into the path should the renderer start drawing.\n     */\n    beginning: number;\n    /**\n     * @name Two.Points#ending\n     * @property {Number} - Number between zero and one to state the ending of where the path is rendered.\n     * @description {@link Two.Points#ending} is a percentage value that represents at what percentage into the path should the renderer start drawing.\n     */\n    ending: number;\n    /**\n     * @name Two.Points#fill\n     * @property {(String|Gradient|Texture)} - The value of what the path should be filled in with.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value} for more information on CSS's colors as `String`.\n     */\n    fill: string | Gradient | Texture;\n    /**\n     * @name Two.Points#stroke\n     * @property {(String|Gradient|Texture)} - The value of what the path should be outlined in with.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value} for more information on CSS's colors as `String`.\n     */\n    stroke: string | Gradient | Texture;\n    /**\n     * @name Two.Points#className\n     * @property {String} - A class to be applied to the element to be compatible with CSS styling.\n     * @nota-bene Only available for the SVG renderer.\n     */\n    className: string;\n    /**\n     * @name Two.Points#visible\n     * @property {Boolean} - Display the points or not.\n     * @nota-bene For {@link Two.CanvasRenderer} and {@link Two.WebGLRenderer} when set to false all updating is disabled improving performance dramatically with many objects in the scene.\n     */\n    visible: boolean;\n    /**\n     * @name Two.Points#vertices\n     * @property {Vector[]} - An ordered list of vector points for rendering points.\n     * @description A list of {@link Two.Vector} objects that consist of which coordinates to draw points at.\n     * @nota-bene The array when manipulating is actually a {@link Two.Collection}.\n     */\n    vertices: any;\n    /**\n     * @name Two.Points#dashes\n     * @property {Number[]} - Array of numbers. Odd indices represent dash length. Even indices represent dash space.\n     * @description A list of numbers that represent the repeated dash length and dash space applied to the stroke of the text.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more information on the SVG stroke-dasharray attribute.\n     */\n    dashes: number[];\n    /**\n     * @name Two.Points#toObject\n     * @function\n     * @returns {Object}\n     * @description Return a JSON compatible plain object that represents the points object.\n     */\n    toObject(): any;\n    /**\n     * @name Two.Points#noFill\n     * @function\n     * @description Short hand method to set fill to `none`.\n     */\n    noFill: () => Points;\n    /**\n     * @name Two.Points#noStroke\n     * @function\n     * @description Short hand method to set stroke to `none`.\n     */\n    noStroke: () => Points;\n    /**\n     * @name Two.Points#corner\n     * @function\n     * @description Orient the vertices of the shape to the upper left-hand corner of the points object.\n     */\n    corner: () => Points;\n    /**\n     * @name Two.Points#center\n     * @function\n     * @description Orient the vertices of the shape to the center of the points object.\n     */\n    center: () => Points;\n    /**\n     * @name Two.Points#getBoundingClientRect\n     * @function\n     * @param {Boolean} [shallow=false] - Describes whether to calculate off local matrix or world matrix.\n     * @returns {Object} - Returns object with top, left, right, bottom, width, height attributes.\n     * @description Return an object with top, left, right, bottom, width, and height parameters of the path.\n     */\n    getBoundingClientRect: (shallow?: boolean) => BoundingBox;\n    /**\n     * @name Two.Points#subdivide\n     * @function\n     * @param {Number} limit - How many times to recurse subdivisions.\n     * @description Insert a {@link Two.Vector} at the midpoint between every item in {@link Two.Points#vertices}.\n     */\n    subdivide(limit: number): Points;\n    /**\n     * @name Two.Points#_updateLength\n     * @function\n     * @private\n     * @param {Number} [limit] -\n     * @param {Boolean} [silent=false] - If set to `true` then the points object isn't updated before calculation. Useful for internal use.\n     * @description Recalculate the {@link Two.Points#length} value.\n     */\n    private _updateLength;\n  }\n  import { Shape } from 'two.js/src/shape';\n  import { Gradient } from 'two.js/src/effects/gradient';\n  import { Texture } from 'two.js/src/effects/texture';\n  import { BoundingBox } from 'two.js';\n}\ndeclare module 'two.js/src/shapes/polygon' {\n  /**\n     * @name Two.Polygon\n     * @class\n\n     * @param {Number} [x=0] - The x position of the polygon.\n     * @param {Number} [y=0] - The y position of the polygon.\n     * @param {Number} [radius=0] - The radius value of the polygon.\n     * @param {Number} [sides=12] - The number of vertices used to construct the polygon.\n     */\n  export class Polygon extends Path {\n    /**\n     * @name Two.Polygon#_flagWidth\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Polygon#width} needs updating.\n     */\n    private _flagWidth;\n    /**\n     * @name Two.Polygon#_flagHeight\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Polygon#height} needs updating.\n     */\n    private _flagHeight;\n    /**\n     * @name Two.Polygon#_flagSides\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Polygon#sides} needs updating.\n     */\n    private _flagSides;\n    /**\n     * @name Two.Polygon#_width\n     * @private\n     * @see {@link Two.Polygon#width}\n     */\n    private _width;\n    /**\n     * @name Two.Polygon#_height\n     * @private\n     * @see {@link Two.Polygon#height}\n     */\n    private _height;\n    /**\n     * @name Two.Polygon#_sides\n     * @private\n     * @see {@link Two.Polygon#sides}\n     */\n    private _sides;\n    constructor(x?: number, y?: number, radius?: number, sides?: number);\n    closed: boolean;\n    width: number;\n    height: number;\n    sides: number;\n  }\n  import { Path } from 'two.js/src/path';\n}\ndeclare module 'two.js/src/shapes/star' {\n  /**\n     * @name Two.Star\n     * @class\n\n     * @param {Number} [x=0] - The x position of the star.\n     * @param {Number} [y=0] - The y position of the star.\n     * @param {Number} [innerRadius=0] - The inner radius value of the star.\n     * @param {Number} [outerRadius=0] - The outer radius value of the star.\n     * @param {Number} [sides=5] - The number of sides used to construct the star.\n     */\n  export class Star extends Path {\n    constructor(\n      ox?: number,\n      oy?: number,\n      ir?: number,\n      or?: number,\n      sides?: number\n    );\n    /**\n     * @name Two.Star#_flagInnerRadius\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Star#innerRadius} needs updating.\n     */\n    private _flagInnerRadius;\n    /**\n     * @name Two.Star#_flagOuterRadius\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Star#outerRadius} needs updating.\n     */\n    private _flagOuterRadius;\n    /**\n     * @name Two.Star#_flagSides\n     * @private\n     * @property {Boolean} - Determines whether the {@link Two.Star#sides} needs updating.\n     */\n    private _flagSides;\n    /**\n     * @name Two.Star#_innerRadius\n     * @private\n     * @see {@link Two.Star#innerRadius}\n     */\n    private _innerRadius;\n    /**\n     * @name Two.Star#_outerRadius\n     * @private\n     * @see {@link Two.Star#outerRadius}\n     */\n    private _outerRadius;\n    /**\n     * @name Two.Star#_sides\n     * @private\n     * @see {@link Two.Star#sides}\n     */\n    private _sides;\n    closed: boolean;\n    innerRadius: number;\n    outerRadius: number;\n    sides: number;\n  }\n  import { Path } from 'two.js/src/path';\n}\ndeclare module 'two.js/src/renderers/svg' {\n  /**\n     * @name Two.SVGRenderer\n     * @class\n\n     * @param {Object} [parameters] - This object is inherited when constructing a new instance of {@link Two}.\n     * @param {Element} [parameters.domElement] - The `<svg />` to draw to. If none given a new one will be constructed.\n     * @description This class is used by {@link Two} when constructing with `type` of `Two.Types.svg` (the default type). It takes Two.js' scenegraph and renders it to a `<svg />`.\n     */\n  export class Renderer extends Events {\n    /**\n     * @name Two.SVGRenderer.Utils\n     * @property {Object} - A massive object filled with utility functions and properties to render Two.js objects to a `<svg />`.\n     */\n    static Utils: {\n      version: number;\n      ns: string;\n      xlink: string;\n      alignments: {\n        left: string;\n        center: string;\n        right: string;\n      };\n      createElement: (name: any, attrs: any) => SVGElement;\n      setAttributes: (elem: any, attrs: any) => any;\n      removeAttributes: (elem: any, attrs: any) => any;\n      toString: (points: any, closed: any) => string;\n      pointsToString: (points: any, size: any) => string;\n      getClip: (shape: any, domElement: any) => any;\n      group: {\n        appendChild: (object: any) => void;\n        removeChild: (object: any) => void;\n        orderChild: (object: any) => void;\n        renderChild: (child: any) => void;\n        render: (domElement: any) => any;\n      };\n      path: {\n        render: (domElement: any) => any;\n      };\n      points: {\n        render: (domElement: any) => any;\n      };\n      text: {\n        render: (domElement: any) => any;\n      };\n      'linear-gradient': {\n        render: (domElement: any, silent: any) => any;\n      };\n      'radial-gradient': {\n        render: (domElement: any, silent: any) => any;\n      };\n      texture: {\n        render: (domElement: any, silent: any) => any;\n      };\n    };\n    constructor(params?: any);\n    /**\n     * @name Two.SVGRenderer#domElement\n     * @property {Element} - The `<svg />` associated with the Two.js scene.\n     */\n    domElement: any;\n    /**\n     * @name Two.SVGRenderer#scene\n     * @property {Group} - The root group of the scenegraph.\n     */\n    scene: Group;\n    /**\n     * @name Two.SVGRenderer#defs\n     * @property {SvgDefintionsElement} - The `<defs />` to apply gradients, patterns, and bitmap imagery.\n     */\n    defs: SVGDefsElement;\n    /**\n     * @name Two.SVGRenderer#setSize\n     * @function\n     * @param {Number} width - The new width of the renderer.\n     * @param {Number} height - The new height of the renderer.\n     * @description Change the size of the renderer.\n     * @nota-bene Triggers a `Two.Events.resize`.\n     */\n    setSize(width: number, height: number): any;\n    width: number;\n    height: number;\n    /**\n     * @name Two.SVGRenderer#render\n     * @function\n     * @description Render the current scene to the `<svg />`.\n     */\n    render(): Renderer;\n  }\n  import { Events } from 'two.js/src/events';\n  import { Group } from 'two.js/src/group';\n}\ndeclare module 'two.js/src/utils/shaders' {\n  export interface shaders {\n    create(gl: any, source: any, type: any): any;\n    types: {\n      vertex: string;\n      fragment: string;\n    };\n    path: {\n      vertex: string;\n      fragment: string;\n    };\n    points: {\n      vertex: string;\n      fragment: string;\n    };\n  }\n}\ndeclare module 'two.js/src/renderers/webgl' {\n  /**\n     * @name Two.WebGLRenderer\n     * @class\n\n     * @param {Object} [parameters] - This object is inherited when constructing a new instance of {@link Two}.\n     * @param {Element} [parameters.domElement] - The `<canvas />` to draw to. If none given a new one will be constructed.\n     * @param {HTMLCanvasElement} [parameters.offscreenElement] - The offscreen two dimensional `<canvas />` to render each element on WebGL texture updates.\n     * @param {Boolean} [parameters.antialias] - Determines whether the canvas should clear render with antialias on.\n     * @description This class is used by {@link Two} when constructing with `type` of `Two.Types.webgl`. It takes Two.js' scenegraph and renders it to a `<canvas />` through the WebGL api.\n     * @see {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/}\n     */\n  export class Renderer extends Events {\n    /**\n     * @name Two.WebGLRenderer.Utils\n     * @property {Object} - A massive object filled with utility functions and properties to render Two.js objects to a `<canvas />` through the WebGL API.\n     */\n    static Utils: {\n      precision: number;\n      isHidden: RegExp;\n      canvas: any;\n      alignments: {\n        left: string;\n        middle: string;\n        right: string;\n      };\n      matrix: Matrix;\n      group: {\n        removeChild: (child: any, gl: any) => void;\n        /**\n                 * @function\n                 // * @type {(gl: any, programs: any) => any}\n                 * @param {WebGLContext} gl\n                 * @param {Object} programs\n                 */\n        render: (gl: any, programs: any) => any;\n      };\n      path: {\n        updateCanvas: (elem: any) => void;\n        getBoundingClientRect: (vertices: any, border: any, rect: any) => void;\n        render: (gl: any, programs: any, forcedParent: any) => any;\n      };\n      points: {\n        updateCanvas: (elem: any) => void;\n        render: (gl: any, programs: any, forcedParent: any) => any;\n      };\n      text: {\n        updateCanvas: (elem: any) => void;\n        getBoundingClientRect: (elem: any, rect: any) => void;\n        render: (gl: any, programs: any, forcedParent: any) => any;\n      };\n      'linear-gradient': {\n        render: (ctx: any, parent: any) => any;\n      };\n      'radial-gradient': {\n        render: (ctx: any, parent: any) => any;\n      };\n      texture: {\n        render: (ctx: any, elem: any) => any;\n      };\n      updateTexture: (gl: any, elem: any) => void;\n      program: {\n        create: (gl: any, shaders: any) => any;\n      };\n      TextureRegistry: Registry;\n    };\n    constructor(params?: any);\n    /**\n     * @name Two.WebGLRenderer#domElement\n     * @property {Element} - The `<canvas />` associated with the Two.js scene.\n     */\n    domElement: HTMLCanvasElement;\n    /**\n     * @name Two.WebGLRenderer#scene\n     * @property {Group} - The root group of the scenegraph.\n     */\n    scene: Group;\n    _renderer: {\n      type: string;\n      matrix: any;\n      scale: number;\n      opacity: number;\n    };\n    _flagMatrix: boolean;\n    /**\n     * @name Two.WebGLRenderer#overdraw\n     * @property {Boolean} - Determines whether the canvas clears the background each draw call.\n     * @default true\n     */\n    overdraw: any;\n    ctx: any;\n    /**\n     * @name Two.WebGLRenderer#programs\n     * @property {Object} - Associated WebGL programs to render all elements from the scenegraph.\n     */\n    programs: {\n      current: any;\n      buffers: {\n        position: any;\n      };\n      resolution: {\n        width: number;\n        height: number;\n        ratio: number;\n        flagged: boolean;\n      };\n    };\n    /**\n     * @name Two.WebGLRenderer#setSize\n     * @function\n     * @fires resize\n     * @param {Number} width - The new width of the renderer.\n     * @param {Number} height - The new height of the renderer.\n     * @param {Number} [ratio] - The new pixel ratio (pixel density) of the renderer. Defaults to calculate the pixel density of the user's screen.\n     * @description Change the size of the renderer.\n     */\n    setSize(width: number, height: number, ratio?: number): any;\n    width: number;\n    height: number;\n    ratio: number;\n    /**\n     * @name Two.WebGLRenderer#render\n     * @function\n     * @description Render the current scene to the `<canvas />`.\n     */\n    render(): Renderer;\n  }\n  import { Events } from 'two.js/src/events';\n  import { Group } from 'two.js/src/group';\n  import { Matrix } from 'two.js/src/matrix';\n  import { Registry } from 'two.js/src/registry';\n}\ndeclare module 'two.js' {\n  /**\n     * @name Two\n     * @class\n     * @global\n\n     * @param {Object} [options]\n     * @param {Boolean} [options.fullscreen=false] - Set to `true` to automatically make the stage adapt to the width and height of the parent document. This parameter overrides `width` and `height` parameters if set to `true`. This overrides `options.fitted` as well.\n     * @param {Boolean} [options.fitted=false] = Set to `true` to automatically make the stage adapt to the width and height of the parent element. This parameter overrides `width` and `height` parameters if set to `true`.\n     * @param {Number} [options.width=640] - The width of the stage on construction. This can be set at a later time.\n     * @param {Number} [options.height=480] - The height of the stage on construction. This can be set at a later time.\n     * @param {String} [options.type=Two.Types.svg] - The type of renderer to setup drawing with. See {@link Two.Types} for available options.\n     * @param {Boolean} [options.autostart=false] - Set to `true` to add the instance to draw on `requestAnimationFrame`. This is a convenient substitute for {@link Two#play}.\n     * @param {Element} [options.domElement] - The canvas or SVG element to draw into. This overrides the `options.type` argument.\n     * @description The entrypoint for Two.js. Instantiate a `new Two` in order to setup a scene to render to. `Two` is also the publicly accessible interface that all other sub-classes, functions, and utilities attach to.\n     */\n  export default class Two {\n    static nextFrameID: any;\n    /**\n     * @name Two.Types\n     * @property {Object} - The different rendering types available in the library.\n     */\n    static Types: {\n      webgl: string;\n      svg: string;\n      canvas: string;\n    };\n    /**\n     * @name Two.Version\n     * @property {String} - The current working version of the library, `$version`.\n     */\n    static Version: string;\n    /**\n     * @name Two.PublishDate\n     * @property {String} - The automatically generated publish date in the build process to verify version release candidates.\n     */\n    static PublishDate: string;\n    /**\n     * @name Two.Identifier\n     * @property {String} - String prefix for all Two.js object's ids. This trickles down to SVG ids.\n     */\n    static Identifier: string;\n    /**\n     * @name Two.Resolution\n     * @property {Number} - Default amount of vertices to be used for interpreting Arcs and ArcSegments.\n     */\n    static Resolution: number;\n    /**\n     * @name Two.AutoCalculateImportedMatrices\n     * @property {Boolean} - When importing SVGs through the {@link Two#interpret} and {@link Two#load}, this boolean determines whether Two.js infers and then overrides the exact transformation matrix of the reference SVG.\n     * @nota-bene `false` copies the exact transformation matrix values, but also sets the path's `matrix.manual = true`.\n     */\n    static AutoCalculateImportedMatrices: boolean;\n    /**\n     * @name Two.Instances\n     * @property {Two[]} - Registered list of all Two.js instances in the current session.\n     */\n    static Instances: any[];\n    /**\n     * @function Two.uniqueId\n     * @description Simple method to access an incrementing value. Used for `id` allocation on all Two.js objects.\n     * @returns {Number} Ever increasing Number.\n     */\n    static uniqueId: () => number;\n    static Anchor: typeof Anchor;\n    static Collection: typeof Collection;\n    static Events: typeof Events;\n    static Group: typeof Group;\n    static Matrix: typeof Matrix;\n    static Path: typeof Path;\n    static Registry: typeof Registry;\n    static Shape: typeof Shape;\n    static Text: typeof Text;\n    static Vector: typeof Vector;\n    static Gradient: typeof Gradient;\n    static ImageSequence: typeof ImageSequence;\n    static LinearGradient: typeof LinearGradient;\n    static RadialGradient: typeof RadialGradient;\n    static Sprite: typeof Sprite;\n    static Stop: typeof Stop;\n    static Texture: typeof Texture;\n    static ArcSegment: typeof ArcSegment;\n    static Circle: typeof Circle;\n    static Ellipse: typeof Ellipse;\n    static Line: typeof Line;\n    static Points: typeof Points;\n    static Polygon: typeof Polygon;\n    static Rectangle: typeof Rectangle;\n    static RoundedRectangle: typeof RoundedRectangle;\n    static Star: typeof Star;\n    static CanvasRenderer: typeof CanvasRenderer;\n    static SVGRenderer: typeof SVGRenderer;\n    static WebGLRenderer: typeof WebGLRenderer;\n    static Commands: {\n      move: string;\n      line: string;\n      curve: string;\n      arc: string;\n      close: string;\n    };\n    /**\n     * @name Two.Utils\n     * @property {Object} - A massive object filled with utility functions and properties.\n     */\n    static Utils: any;\n    constructor(options?: {\n      fullscreen?: boolean;\n      fitted?: boolean;\n      autostart?: boolean;\n      width?: number;\n      height?: number;\n      type?: string;\n      domElement?: HTMLElement;\n      overdraw?: boolean;\n      smoothing?: boolean;\n      ratio?: number;\n    });\n    /**\n     * @private\n     */\n    private _events;\n    set _bound(arg: boolean);\n    get _bound(): boolean;\n    addEventListener(...args: any[]): any;\n    on(...args: any[]): any;\n    bind(...args: any[]): any;\n    removeEventListener(...args: any[]): any;\n    off(...args: any[]): any;\n    unbind(...args: any[]): any;\n    dispatchEvent(...args: any[]): any;\n    trigger(...args: any[]): any;\n    listen(...args: any[]): any;\n    ignore(...args: any[]): any;\n    /**\n     * @name Two#type\n     * @property {String} - A string representing which type of renderer the instance has instantiated.\n     */\n    type: string;\n    /**\n     * @name Two#renderer\n     * @property {(Two.SVGRenderer|CanvasRenderer|WebGLRenderer)} - The instantiated rendering class for the instance. For a list of possible rendering types check out Two.Types.\n     */\n    renderer: SVGRenderer | CanvasRenderer | WebGLRenderer;\n    /**\n     * @name Two#scene\n     * @property {Group} - The base level {@link Two.Group} which houses all objects for the instance. Because it is a {@link Two.Group} transformations can be applied to it that will affect all objects in the instance. This is handy as a makeshift inverted camera.\n     */\n    scene: Group;\n    /**\n     * @name Two#width\n     * @property {Number} - The width of the instance's dom element.\n     */\n    width: number;\n    /**\n     * @name Two#height\n     * @property {Number} - The height of the instance's dom element.\n     */\n    height: number;\n    /**\n     * @name Two#frameCount\n     * @property {Number} - An integer representing how many frames have elapsed.\n     */\n    frameCount: number;\n    /**\n     * @name Two#timeDelta\n     * @property {Number} - A number representing how much time has elapsed since the last frame in milliseconds.\n     */\n    timeDelta: number;\n    /**\n     * @name Two#playing\n     * @property {Boolean} - A boolean representing whether or not the instance is being updated through the automatic `requestAnimationFrame`.\n     */\n    playing: boolean;\n    fit: any;\n    /**\n     * @name Two#appendTo\n     * @function\n     * @param {Element} elem - The DOM element to append the Two.js stage to.\n     * @description Shorthand method to append your instance of Two.js to the `document`.\n     */\n    appendTo(elem: HTMLElement): Two;\n    /**\n     * @name Two#play\n     * @function\n     * @fires Two.Events.Types.play event\n     * @description Call to start an internal animation loop.\n     * @nota-bene This function initiates a `requestAnimationFrame` loop.\n     */\n    play(): any;\n    /**\n     * @name Two#pause\n     * @function\n     * @fires Two.Events.Types.pause event\n     * @description Call to stop the internal animation loop for a specific instance of Two.js.\n     */\n    pause(): any;\n    setPlaying(p: any): void;\n    /**\n     * @name Two#release\n     * @function\n     * @param {Object} obj\n     * @returns {Object} The object passed for event deallocation.\n     * @description Release an arbitrary class' events from the Two.js corpus and recurse through its children and or vertices.\n     */\n    release(obj: any): any;\n    /**\n     * @name Two#update\n     * @function\n     * @fires Two.Events.Types.update event\n     * @description Update positions and calculations in one pass before rendering. Then render to the canvas.\n     * @nota-bene This function is called automatically if using {@link Two#play} or the `autostart` parameter in construction.\n     */\n    update(): any;\n    _lastFrame: any;\n    /**\n     * @name Two#render\n     * @function\n     * @fires render\n     * @description Render all drawable and visible objects of the scene.\n     */\n    render(): any;\n    /**\n     * @name Two#add\n     * @function\n     * @param {Shape[]} [objects] - An array of Two.js objects. Alternatively can add objects as individual arguments.\n     * @description A shorthand method to add specific Two.js objects to the scene.\n     */\n    add(objects: Shape[]): Two;\n    /**\n     * @name Two#add\n     * @function\n     * @param {...Shape} [args] - Alternatively pass each shape as an argument\n     * @description A shorthand method to add specific Two.js objects to the scene.\n     */\n    add(...args: Shape[]): Two;\n    /**\n     * @name Two#remove\n     * @function\n     * @param {Shape[]} [objects] - An array of Two.js objects.\n     * @description A shorthand method to remove specific Two.js objects from the scene.\n     */\n    remove(objects: Shape): Two;\n    /**\n     * @name Two#remove\n     * @function\n     * @param {...Shape} [args] - Alternatively pass each shape as an argument\n     * @description A shorthand method to remove specific Two.js objects from the scene.\n     */\n    remove(...args: Shape[]): Two;\n    /**\n     * @name Two#clear\n     * @function\n     * @description Removes all objects from the instance's scene. If you intend to have the browser garbage collect this, don't forget to delete the references in your application as well.\n     */\n    clear(): Two;\n    /**\n     * @name Two#makeLine\n     * @function\n     * @param {Number} x1\n     * @param {Number} y1\n     * @param {Number} x2\n     * @param {Number} y2\n     * @returns {Line}\n     * @description Creates a Two.js line and adds it to the scene.\n     */\n    makeLine(x1: number, y1: number, x2: number, y2: number): Line;\n    /**\n     * @name Two#makeArrow\n     * @function\n     * @param {Number} x1\n     * @param {Number} y1\n     * @param {Number} x2\n     * @param {Number} y2\n     * @returns {Path}\n     * @description Creates a Two.js arrow and adds it to the scene.\n     */\n    makeArrow(\n      x1: number,\n      y1: number,\n      x2: number,\n      y2: number,\n      size: number\n    ): Path;\n    /**\n     * @name Two#makeRectangle\n     * @function\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} width\n     * @param {Number} height\n     * @returns {Rectangle}\n     * @description Creates a Two.js rectangle and adds it to the scene.\n     */\n    makeRectangle(\n      x: number,\n      y: number,\n      width: number,\n      height: number\n    ): Rectangle;\n    /**\n     * @name Two#makeRoundedRectangle\n     * @function\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} width\n     * @param {Number} height\n     * @param {Number} radius\n     * @returns {RoundedRectangle}\n     * @description Creates a Two.js rounded rectangle and adds it to the scene.\n     */\n    makeRoundedRectangle(\n      x: number,\n      y: number,\n      width: number,\n      height: number,\n      radius: number\n    ): RoundedRectangle;\n    /**\n     * @name Two#makeCircle\n     * @function\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} radius\n     * @param {Number} [resolution=4]\n     * @returns {Circle}\n     * @description Creates a Two.js circle and adds it to the scene.\n     */\n    makeCircle(\n      x: number,\n      y: number,\n      radius: number,\n      resolution?: number\n    ): Circle;\n    /**\n     * @name Two#makeEllipse\n     * @function\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} rx\n     * @param {Number} ry\n     * @param {Number} [resolution=4]\n     * @returns {Ellipse}\n     * @description Creates a Two.js ellipse and adds it to the scene.\n     */\n    makeEllipse(\n      x: number,\n      y: number,\n      rx: number,\n      ry: number,\n      resolution?: number\n    ): Ellipse;\n    /**\n     * @name Two#makeStar\n     * @function\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} outerRadius\n     * @param {Number} innerRadius\n     * @param {Number} sides\n     * @returns {Star}\n     * @description Creates a Two.js star and adds it to the scene.\n     */\n    makeStar(\n      x: any,\n      y: any,\n      outerRadius: number,\n      innerRadius: number,\n      sides: number\n    ): Star;\n    /**\n     * @name Two#makeCurve\n     * @function\n     * @param {Anchor[]} [points] - An array of {@link Two.Anchor} points.\n     * @returns {Path} - Where `path.curved` is set to `true`.\n     * @description Creates a Two.js path that is curved and adds it to the scene.\n     * @nota-bene In either case of passing an array or passing numbered arguments the last argument is an optional `Boolean` that defines whether the path should be open or closed.\n     */\n    makeCurve(points?: Anchor[]): Path;\n    /**\n     * @name Two#makeCurve\n     * @function\n     * @param {...Number} [args] - Alternatively you can pass alternating `x` / `y` coordinate values as individual arguments. These will be combined into {@link Two.Anchor}s for use in the path.\n     * @returns {Path} - Where `path.curved` is set to `true`.\n     * @description Creates a Two.js path that is curved and adds it to the scene.\n     * @nota-bene In either case of passing an array or passing numbered arguments the last argument is an optional `Boolean` that defines whether the path should be open or closed.\n     */\n    makeCurve(...args: number[]): Path;\n    /**\n     * @name Two#makePolygon\n     * @function\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} radius\n     * @param {Number} sides\n     * @returns {Polygon}\n     * @description Creates a Two.js polygon and adds it to the scene.\n     */\n    makePolygon(x: number, y: number, radius: number, sides: number): Polygon;\n    /**\n     * @name Two#makeArcSegment\n     * @function\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} innerRadius\n     * @param {Number} outerRadius\n     * @param {Number} startAngle\n     * @param {Number} endAngle\n     * @param {Number} [resolution=Two.Resolution] - The number of vertices that should comprise the arc segment.\n     * @returns {ArcSegment}\n     */\n    makeArcSegment(\n      x: number,\n      y: number,\n      innerRadius: number,\n      outerRadius: number,\n      startAngle: number,\n      endAngle: number,\n      resolution?: number\n    ): ArcSegment;\n    /**\n     * @name Two#makePoints\n     * @function\n     * @param {Vector[]} [points] - An array of {@link Two.Vector} points\n     * @returns {Points}\n     * @description Creates a Two.js points object and adds it to the current scene.\n     */\n    makePoints(points?: Vector[]): Points;\n    /**\n     * @name Two#makePoints\n     * @function\n     * @param {...Number} [args] - Alternatively you can pass alternating `x` / `y` coordinate values as individual agrguments. These will be combined into {@link Two.Vector}s for use in the points object.\n     * @returns {Points}\n     * @description Creates a Two.js points object and adds it to the current scene.\n     */\n    makePoints(...args: number[]): Points;\n    /**\n     * @name Two#makePath\n     * @function\n     * @param {Anchor[]} [points] - An array of {@link Two.Anchor} points\n     * @returns {Path}\n     * @description Creates a Two.js path and adds it to the scene.\n     * @nota-bene In either case of passing an array or passing numbered arguments the last argument is an optional `Boolean` that defines whether the path should be open or closed.\n     */\n    makePath(points?: Anchor[]): Path;\n    /**\n     * @name Two#makePath\n     * @function\n     * @param {...Number} [args] - Alternatively you can pass alternating `x` / `y` coordinate values as individual arguments. These will be combined into {@link Two.Anchor}s for use in the path.\n     * @returns {Path}\n     * @description Creates a Two.js path and adds it to the scene.\n     * @nota-bene In either case of passing an array or passing numbered arguments the last argument is an optional `Boolean` that defines whether the path should be open or closed.\n     */\n    makePath(...args: number[]): Path;\n    /**\n     * @name Two#makeText\n     * @function\n     * @param {String} message\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [styles] - An object to describe any of the {@link Two.Text.Properties} including `fill`, `stroke`, `linewidth`, `family`, `alignment`, `leading`, `opacity`, etc..\n     * @returns {Text}\n     * @description Creates a Two.js text object and adds it to the scene.\n     */\n    makeText(message: string, x: number, y: number, styles?: any): Text;\n    /**\n     * @name Two#makeLinearGradient\n     * @function\n     * @param {Number} x1\n     * @param {Number} y1\n     * @param {Number} x2\n     * @param {Number} y2\n     * @param {...Stop} args - Any number of color stops sometimes referred to as ramp stops. If none are supplied then the default black-to-white two stop gradient is applied.\n     * @returns {LinearGradient}\n     * @description Creates a Two.js linear gradient and adds it to the scene. In the case of an effect it's added to an invisible \"definitions\" group.\n     */\n    makeLinearGradient(\n      x1: number,\n      y1: number,\n      x2: number,\n      y2: number,\n      ...args: Stop[]\n    ): LinearGradient;\n    /**\n     * @name Two#makeRadialGradient\n     * @function\n     * @param {Number} x1\n     * @param {Number} y1\n     * @param {Number} radius\n     * @param {...Stop} args - Any number of color stops sometimes referred to as ramp stops. If none are supplied then the default black-to-white two stop gradient is applied.\n     * @returns {RadialGradient}\n     * @description Creates a Two.js linear-gradient object and adds it to the scene. In the case of an effect it's added to an invisible \"definitions\" group.\n     */\n    makeRadialGradient(\n      x1: number,\n      y1: number,\n      radius: number,\n      ...args: Stop[]\n    ): RadialGradient;\n    /**\n     * @name Two#makeSprite\n     * @function\n     * @param {(String|Texture)} pathOrTexture - The URL path to an image or an already created {@link Two.Texture}.\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} [columns=1]\n     * @param {Number} [rows=1]\n     * @param {Number} [frameRate=0]\n     * @param {Boolean} [autostart=false]\n     * @returns {Sprite}\n     * @description Creates a Two.js sprite object and adds it to the scene. Sprites can be used for still images as well as animations.\n     */\n    makeSprite(\n      pathOrTexture: any,\n      x: number,\n      y: number,\n      columns?: number,\n      rows?: number,\n      frameRate?: number,\n      autostart?: boolean\n    ): Sprite;\n    /**\n     * @name Two#makeImageSequence\n     * @function\n     * @param {(String[]|Texture[])} pathsOrTextures - An array of paths or of {@link Two.Textures}.\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} [frameRate=0]\n     * @param {Boolean} [autostart=false]\n     * @returns {ImageSequence}\n     * @description Creates a Two.js image sequence object and adds it to the scene.\n     */\n    makeImageSequence(\n      pathsOrTextures: any,\n      x: number,\n      y: number,\n      frameRate?: number,\n      autostart?: boolean\n    ): ImageSequence;\n    /**\n     * @name Two#makeTexture\n     * @function\n     * @param {(String|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)} [pathOrSource] - The URL path to an image or a DOM image-like element.\n     * @param {Function} [callback] - Function to be invoked when the image is loaded.\n     * @returns {Texture}\n     * @description Creates a Two.js texture object.\n     */\n    makeTexture(pathOrSource: any, callback?: Function): Texture;\n    /**\n     * @name Two#makeGroup\n     * @function\n     * @param {Shape[]} [objects] - Two.js objects to be added to the group in the form of an array or as individual arguments.\n     * @returns {Group}\n     * @description Creates a Two.js group object and adds it to the scene.\n     */\n    makeGroup(objects?: Shape[]): Group;\n    /**\n     * @name Two#makeGroup\n     * @function\n     * @param {...Shape} [args] - Alternatively pass each element as an argument\n     * @returns {Group}\n     * @description Creates a Two.js group object and adds it to the scene.\n     */\n    makeGroup(...args: Shape[]): Group;\n    /**\n     * @name Two#interpret\n     * @function\n     * @param {SVGElement} svg - The SVG node to be parsed.\n     * @param {Boolean} shallow - Don't create a top-most group but append all content directly.\n     * @param {Boolean} [add=true] � Automatically add the reconstructed SVG node to scene.\n     * @returns {Group}\n     * @description Interpret an SVG Node and add it to this instance's scene. The distinction should be made that this doesn't `import` svg's, it solely interprets them into something compatible for Two.js - this is slightly different than a direct transcription.\n     */\n    interpret(svg: SVGElement, shallow?: boolean, add?: boolean): Group;\n    /**\n     * @name Two#load\n     * @function\n     * @param {String|SVGElement} pathOrSVGContent - The URL path of an SVG file or an SVG document as text.\n     * @param {Function} callback - Function to call once loading has completed.\n     * @returns {Group}\n     * @description Load an SVG file or SVG text and interpret it into Two.js legible objects.\n     */\n    load(pathOrSVGContent: any, callback: Function): Group;\n  }\n  import { Line } from 'two.js/src/shapes/line';\n  import { Path } from 'two.js/src/path';\n  import { Rectangle } from 'two.js/src/shapes/rectangle';\n  import { Circle } from 'two.js/src/shapes/circle';\n  import { Ellipse } from 'two.js/src/shapes/ellipse';\n  import { Star } from 'two.js/src/shapes/star';\n  import { Polygon } from 'two.js/src/shapes/polygon';\n  import { ArcSegment } from 'two.js/src/shapes/arc-segment';\n  import { Points } from 'two.js/src/shapes/points';\n  import { Text } from 'two.js/src/text';\n  import { LinearGradient } from 'two.js/src/effects/linear-gradient';\n  import { RadialGradient } from 'two.js/src/effects/radial-gradient';\n  import { Sprite } from 'two.js/src/effects/sprite';\n  import { ImageSequence } from 'two.js/src/effects/image-sequence';\n  import { Texture } from 'two.js/src/effects/texture';\n  import { Group } from 'two.js/src/group';\n  import { Anchor } from 'two.js/src/anchor';\n  import { Collection } from 'two.js/src/collection';\n  import { Events } from 'two.js/src/events';\n  import { Matrix } from 'two.js/src/matrix';\n  import { Registry } from 'two.js/src/registry';\n  import { Shape } from 'two.js/src/shape';\n  import { Vector } from 'two.js/src/vector';\n  import { Gradient } from 'two.js/src/effects/gradient';\n  import { Stop } from 'two.js/src/effects/stop';\n  import { RoundedRectangle } from 'two.js/src/shapes/rounded-rectangle';\n  import { Renderer as CanvasRenderer } from 'two.js/src/renderers/canvas';\n  import { Renderer as SVGRenderer } from 'two.js/src/renderers/svg';\n  import { Renderer as WebGLRenderer } from 'two.js/src/renderers/webgl';\n\n  export type BoundingBox = {\n    top: number;\n    left: number;\n    right: number;\n    bottom: number;\n  } & Dimensions;\n\n  export type Dimensions = {\n    width: number;\n    height: number;\n  };\n}\ndeclare module 'two.js/extras/jsm/zui' {\n  /**\n   * @name Two.ZUI\n   * @class\n   * @param {Group} group - The scene or group to\n   * @param {HTMLElement} [domElement=document.body] - The HTML Element to attach event listeners to.\n   */\n  export class ZUI {\n    static Surface: Surface;\n    static Clamp(v: any, min: any, max: any): number;\n    static Limit: {\n      min: number;\n      max: number;\n      clone: () => {};\n    };\n    static TranslateMatrix(m: any, x: any, y: any): any;\n    static PositionToScale(pos: any): number;\n    static ScaleToPosition(scale: any): number;\n    constructor(group?: Group, domElement?: HTMLElement);\n    limits: {\n      scale: {};\n      x: {};\n      y: {};\n    };\n    viewport: any;\n    viewportOffset: {\n      top: number;\n      left: number;\n      matrix: Matrix;\n    };\n    surfaceMatrix: Matrix;\n    surfaces: any[];\n    add(surface: any): ZUI;\n    addLimits(min: number, max: number, type?: number): ZUI;\n    clientToSurface(v?: { x?: number; y?: number; z?: number }): {\n      x: number;\n      y: number;\n      z: number;\n    };\n    surfaceToClient(v?: { x?: number; y?: number; z?: number }): {\n      x: number;\n      y: number;\n      z: number;\n    };\n    zoomBy(byF: any, clientX: any, clientY: any): ZUI;\n    zoomSet(zoom: any, clientX: any, clientY: any): ZUI;\n    zoom: number;\n    scale: any;\n    translateSurface(x: any, y: any): ZUI;\n    updateOffset(): ZUI;\n    updateSurface(): ZUI;\n    reset(): ZUI;\n    fitToLimits(s: any): number;\n  }\n  import { Matrix } from 'two.js/src/matrix';\n  import { Group } from 'two.js/src/group';\n  class Surface {\n    constructor(object: any);\n    object: any;\n    limits(\n      min: any,\n      max: any\n    ):\n      | Surface\n      | {\n          min: any;\n          max: any;\n        };\n    min: any;\n    max: any;\n    apply(px: any, py: any, s: any): Surface;\n  }\n}\n"
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "wiki",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}