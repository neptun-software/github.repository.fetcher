{
  "metadata": {
    "timestamp": 1736563005533,
    "page": 629,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Rich-Harris/ramjet",
      "stars": 5446,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".babelrc",
          "type": "blob",
          "size": 0.283203125,
          "content": "{\n\t\"whitelist\": [\n\t\t\"es6.arrowFunctions\",\n\t\t\"es6.blockScoping\",\n\t\t\"es6.classes\",\n\t\t\"es6.constants\",\n\t\t\"es6.destructuring\",\n\t\t\"es6.parameters.default\",\n\t\t\"es6.parameters.rest\",\n\t\t\"es6.properties.shorthand\",\n\t\t\"es6.templateLiterals\"\n\t],\n\t\"loose\": [\n\t\t\"es6.classes\",\n\t\t\"es6.destructuring\"\n\t]\n}"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.2890625,
          "content": "{\n\t\"rules\": {\n\t\t\"indent\": [ 2, \"tab\" ],\n\t\t\"quotes\": [ 2, \"single\" ],\n\t\t\"linebreak-style\": [ 2, \"unix\" ],\n\t\t\"semi\": [ 2, \"always\" ]\n\t},\n\t\"env\": {\n\t\t\"es6\": true,\n\t\t\"browser\": true\n\t},\n\t\"extends\": \"eslint:recommended\",\n\t\"ecmaFeatures\": {\n\t\t\"modules\": true\n\t},\n\t\"globals\": {\n\t\t\"component\": true\n\t}\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0830078125,
          "content": "demo/* linguist-vendored\ndemo/app/* linguist-vendored\ndemo/files/* linguist-vendored\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1044921875,
          "content": ".DS_Store\nnode_modules\n.gobble\n.gobble-build\n.tmp\nscreenshots/*/actual\nscreenshots/*/diff\ndist\ntest/viewer\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 0.1845703125,
          "content": "{\n\t\"esnext\": true,\n\t\"undef\": true,\n\t\"unused\": true,\n\n\t\"globals\": {\n\t\t\"window\": true,\n\t\t\"document\": true,\n\t\t\"requestAnimationFrame\": true,\n\t\t\"CSS2Properties\": true,\n\t\t\"setTimeout\": true\n\t}\n}"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.251953125,
          "content": "sudo: false\nlanguage: node_js\nnode_js:\n  - \"stable\"\nenv:\n  global:\n    - BUILD_TIMEOUT=10000\naddons:\n  apt:\n    packages:\n      - xvfb\ninstall:\n  - export DISPLAY=':99.0'\n  - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\n  - npm install\nscript: npm test\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.1416015625,
          "content": "# changelog\n\n## 0.6.0\n\n* Use `cssText` instead of property enumeration when cloning computed styles, for better initial performance\n* Disable `background-color` and `border-radius` interpolation by default, for faster transitions. `interpolateBorderRadius` and `interpolateBackgroundColor` options enable these transformations\n* Total opacity is preserved ([#10](https://github.com/Rich-Harris/ramjet/issues/10))\n* Starting opacities are respected ([#11](https://github.com/Rich-Harris/ramjet/issues/11))\n* Handle pre-existing transforms\n* Decompose matrices for natural-looking transforms\n\n## 0.5.0\n\n* Change `jsnext:main` build to point to Babelified bundle with ES6 export ([#45](https://github.com/Rich-Harris/ramjet/pull/45))\n\n## 0.4.7\n\n* fixed \"position: fixed\" issues [sithmel]\n* added easingScale options [sithmel]\n* fixed exceptions fired by IE8 [sithmel]\n* added appendToBody, overrideClone options [sithmel]\n* added spm support [afc163]\n\n## 0.4.6\n\n* Extend border-radius morphing to timer-based transformations\n\n## 0.4.5\n\n* Morph border-radius ([#25](https://github.com/Rich-Harris/ramjet/issues/25))\n* Internal: add rudimentary [test suite](http://www.rich-harris.co.uk/ramjet/test.html)\n\n## 0.4.4\n\n* Add IE9 support ([#3](https://github.com/Rich-Harris/ramjet/issues/3)). Thanks crohrer!\n\n## 0.4.3\n\n* Fix Firefox SVG bug\n\n## 0.4.2\n\n* Account for offsetParent margin\n\n## 0.4.1\n\n* Tidy up npm package\n\n## 0.4.0\n\n* Renamed! mogrify is now ramjet\n* Using `position: absolute` instead of fixed, so scrolling doesn't mess things up\n* Added a default duration\n* Added a demo page\n\n## 0.3.2\n\n* Use camel-cased style properties (`animationName` instead of `animation-name`), for the benefit of older Firefox\n\n## 0.3.1\n\n* Add `mogrify.show()` and `mogrify.hide()` convenience methods\n\n## 0.3.0\n\n* If possible, and `options.useTimer` is not used, mogrify will use precomputed CSS keyframes to move the work off the main thread. This results in a vastly smoother experience on mobile (and desktop in some cases), at the cost of a slight loss in visual fidelity (which is barely noticeable for animations less than ~500ms)\n\n## 0.2.0\n\n* Rewrote as ES6 modules\n* Started maintaining a changelog\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.7392578125,
          "content": "# Contributing to ramjet\n\nHi there! Contributions to ramjet, such as issues and pull requests, are very much appreciated. This is a short note to help make the process as smooth as possible.\n\n## Reporting bugs\n\nBefore submitting an issue, please make sure you're using the latest released version. You can download it from the [releases](https://github.com/Rich-Harris/ramjet/releases) page, or with `npm install ramjet@latest`.\n\nThe best issues contain a reproducible demonstration of the bug in the form of a JSFiddle or similar. [This JSFiddle](http://jsfiddle.net/rich_harris/g1y5kyt9/) has a basic setup to get started with. You could also include an animated GIF generated with something like [LICECap](http://www.cockos.com/licecap/) - just drag it into the editing window when you're writing the issue in GitHub, and it will upload it for you.\n\n\n## Pull requests\n\nTo make a pull request, you should first fork this repository and create a new branch for your changes. To test your changes, follow the instructions on the [README](https://github.com/Rich-Harris/ramjet#developing-and-testing).\n\nThere isn't a formal style guide for ramjet, so please take care to adhere to existing conventions:\n\n* Tabs, not spaces!\n* Use `const` and `let`, not `var` - one declaration per line\n* Use ES6 features such as arrow functions and template strings\n* Semi-colons\n* Single-quotes for strings\n* Liberal whitespace\n\nAbove all, code should be clean and readable, and commented where necessary. If you add a new feature, make sure you add a test to go along with it (in `demo/test.html`)!\n\n\n## Small print\n\nThere's no contributor license agreement - contributions are made on a common sense basis. Ramjet is distributed under the MIT license, which means your contributions will be too."
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.07421875,
          "content": "The MIT License (MIT)\n=====================\n\nCopyright (c) 2015 Rich Harris\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.6298828125,
          "content": "# ramjet\n\n![ramjet](https://cloud.githubusercontent.com/assets/1162160/7279487/5d668dea-e8ea-11e4-9b0d-a9ba2f1165cc.gif)\n\n\n## Installation\n\n`npm install ramjet`, or download [ramjet.js](http://www.rich-harris.co.uk/ramjet/ramjet.js).\n\n\n## Quick start\n\n```html\n<div id='a' style='background-color: red; font-size: 4em; padding: 1em;'>a</div>\n<div id='b' style='background-color: blue; font-size: 4em; padding: 1em;'>b</div>\n\n<script src='ramjet.js'></script>\n<script>\n  var element1 = document.getElementById('a'),\n      element2 = document.getElementById('b');\n\n  // to repeat, run this from the console!\n  ramjet.transform( element1, element2 );\n</script>\n```\n\n\n## Okay, so... what does this do?\n\nRamjet makes it look like your DOM elements are capable of transforming into one another. It does this by cloning the elements (and all their children), transforming the second element (the one we're transforming *to*) so that it completely overlaps with the first, then animating the two elements together until the first element (the one we're transitioning *from*) has exactly the same position and dimensions as the second element originally did.\n\nIt's basically the same technique used in iOS 8 to make it appear as though each app lives inside its icon.\n\n![ios8-effect](https://cloud.githubusercontent.com/assets/1162160/7281378/4f949858-e8f7-11e4-8acf-9a1d90049a92.gif)\n\nIn modern browsers, it uses CSS animations, so everything happens off the main thread. The result is **buttery-smooth performance**, even on mobile devices.\n\n\n## API\n\n### ramjet.transform( a, b[, options] )\n\n* `a` is the DOM node we're transitioning from\n* `b` is the DOM node we're transitioning to\n* `options` can include the following properties:\n    * `done` - a function that gets called once the transition completes\n    * `duration` - the length of the transition, in milliseconds (default 400)\n    * `easing` - a function used to control the animation. Should take a number between 0 and 1, and return something similar (though it can return a number outside those bounds, if you're doing e.g. an [elastic easing function](http://easings.net/#easeOutElastic)). I highly recommend [eases](https://www.npmjs.com/package/eases) by [Matt DesLauriers](https://github.com/mattdesl), which is a handy collection of these functions\n    * `easingScale` - if defined it will use a different easing function for scaling. It can be used to create cartoonish effects.\n    * `useTimer` - by default, ramjet will use CSS animations. Sometimes (when transitioning to or from SVG elements, or in very old browsers) it will fall back to timer-based animations (i.e. with `requestAnimationFrame` or `setTimeout`). If you want to always use timers, make this option `true` - but I don't recommend it (it's much more juddery on mobile)\n    * `overrideClone` (advanced) - look at the section `Advanced options`\n    * `appendToBody` (advanced) - look at the section `Advanced options`\n\n### ramjet.hide( ...nodes )\n\nConvenience function that sets the opacity of each node to 0 (temporarily disabling any transition that might otherwise interfere).\n\n### ramjet.show( ...nodes )\n\nOpposite of `ramjet.hide`.\n\n### ramjet.linear, ramjet.easeIn, ramjet.easeOut, ramjet.easeInOut\n\nA handful of easing functions, included for convenience.\n\n\n## Browser support\n\nSuccessfully tested in IE9+, Chrome (desktop and Android), Firefox, Safari 6+ and mobile Safari - please raise an issue if your experience differs!\n\n\n## Developing and testing\n\nOnce you've cloned this repo and installed all the development dependencies (`npm install`), you can start a development server by running `npm start` and navigating to [localhost:4567](http://localhost:4567). Any changes to the source code (in the `src` directory) will be immediately reflected, courtesy of [gobble](https://github.com/gobblejs/gobble).\n\nTo build, do `npm run build`.\n\nReliable automated tests of a library like ramjet are all but impossible. Instead `npm test` will start the development server and navigate you to [localhost:4567/test.html](http://localhost:4567/test.html), where you can visually check that the library behaves as expected.\n\n\n## Advanced options\nThe option `overrideClone` (function) overrides the function used to clone nodes (the default implementation uses a simple node.cloneNode()). It takes as a parameters the current node and the depth of this node compared to the original element (it is called recursively on the node subtree). It can be useful for removing annoying attributes or children from the cloned node. For example if a node contains a video element with autoplay, this can be excluded because it may be heavy to animate and you can heard the audio of it. Examples:\n\n```js\n// cloning only the root node\nramjet.transform( element1, element2, {\n  overrideClone: function (node, depth){\n    if (depth == 0){\n      return node.cloneNode(); // copy only the root node\n    }\n  }\n});\n\n// cloning everything but the id attribute\nramjet.transform( element1, element2, {\n  overrideClone: function (node, depth){\n    var clone = node.cloneNode();\n    clone.removeAttr('id');\n  }\n});\n\n// not cloning the video element\nramjet.transform( element1, element2, {\n  overrideClone: function (node, depth){\n    if (node.nodeType === 1 && node.tagName === \"VIDEO\"){\n      return;\n    }\n    return node.cloneNode();\n  }\n});\n```\n\nBy default the cloned nodes are appended to the parent to the original node. Inheriting the positioning and css inherited rules, they can behave in an unexpected way. For this reason you can use the flag `appendToBody` to append these nodes to the body instead. I invite everyone to set this to true and open an issue if it doesn't work, it may become the default in one of the next releases.\n\n## License\n\nMIT.\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.3271484375,
          "content": "{\n  \"name\": \"ramjet\",\n  \"homepage\": \"http://www.rich-harris.co.uk/ramjet/\",\n  \"authors\": [\n    \"Rich Harris <richard.a.harris@gmail.com>\"\n  ],\n  \"description\": \"Transform DOM elements into each another with smooth transitions\",\n  \"main\": \"dist/ramjet.js\",\n  \"license\": \"MIT\",\n  \"ignore\": [\n    \"**/.*\",\n    \"scripts\",\n    \"test\"\n  ]\n}\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "gobblefile.js",
          "type": "blob",
          "size": 1.2177734375,
          "content": "/*global require, module, __dirname */\nvar gobble = require( 'gobble' );\nvar babel = require( 'rollup-plugin-babel' );\nvar npm = require( 'rollup-plugin-npm' );\n\ngobble.cwd( __dirname );\n\nvar lib = gobble([\n\tgobble( 'src' ).transform( 'rollup', {\n\t\tentry: 'ramjet.js',\n\t\tdest: 'ramjet.umd.js',\n\t\tformat: 'umd',\n\t\tmoduleName: 'ramjet',\n\t\tplugins: [ babel({ include: 'src/**' }), npm({ jsnext: true }) ],\n\t\tsourceMap: true\n\t}),\n\n\tgobble( 'src' ).transform( 'rollup', {\n\t\tentry: 'ramjet.js',\n\t\tdest: 'ramjet.es6.js',\n\t\tformat: 'es6',\n\t\tplugins: [ babel({ include: 'src/**' }), npm({ jsnext: true }) ],\n\t\tsourceMap: true\n\t})\n]);\n\nvar demo = gobble([\n\tgobble([ 'src', 'demo/app' ])\n\t\t.transform( 'ractive', {\n\t\t\ttype: 'es6'\n\t\t})\n\t\t.transform( 'rollup', {\n\t\t\tentry: 'main.js',\n\t\t\tdest: 'app.js',\n\t\t\tformat: 'cjs',\n\t\t\tplugins: [ babel({ include: 'src/**' }) ]\n\t\t})\n\t\t.transform( 'derequire' )\n\t\t.transform( 'browserify', {\n\t\t\tentries: [ './app' ],\n\t\t\tdest: 'app.js',\n\t\t\tstandalone: 'app'\n\t\t}),\n\n\tgobble( 'demo/files' )\n]);\n\nvar built;\n\nif ( gobble.env() === 'production' ) {\n\tbuilt = gobble([\n\t\tlib,\n\t\tlib.include( 'ramjet.umd.js' ).transform( 'uglifyjs', { ext: '.min.js' })\n\t]);\n} else {\n\tbuilt = gobble([\n\t\tdemo,\n\t\tlib\n\t]);\n}\n\nmodule.exports = built;\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.5478515625,
          "content": "{\n  \"name\": \"ramjet\",\n  \"description\": \"Transform DOM elements into each another with smooth transitions\",\n  \"version\": \"0.6.0-alpha\",\n  \"author\": \"Rich Harris\",\n  \"license\": \"MIT\",\n  \"repository\": \"https://github.com/rich-harris/ramjet\",\n  \"main\": \"dist/ramjet.umd.js\",\n  \"jsnext:main\": \"dist/ramjet.es6.js\",\n  \"files\": [\n    \"src\",\n    \"dist\",\n    \"README.md\"\n  ],\n  \"scripts\": {\n    \"start\": \"gobble\",\n    \"build\": \"gobble build -f dist\",\n    \"prepublish\": \"npm run lint && npm test\",\n    \"test\": \"babel-node test/test.js\",\n    \"lint\": \"eslint src\",\n    \"pretest\": \"npm run build && npm run create-viewer\",\n    \"create-viewer\": \"babel-node test/create-viewer.js\"\n  },\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.4.5\",\n    \"babel-preset-es2015\": \"^6.3.13\",\n    \"babel-preset-es2015-loose-rollup\": \"^7.0.0\",\n    \"babel-preset-es2015-rollup\": \"^1.1.1\",\n    \"eases\": \"^1.0.8\",\n    \"eslint\": \"^1.10.3\",\n    \"gobble\": \"^0.10.2\",\n    \"gobble-babel\": \"^5.5.8\",\n    \"gobble-browserify\": \"^0.6.1\",\n    \"gobble-cli\": \"^0.6.0\",\n    \"gobble-derequire\": \"^0.1.2\",\n    \"gobble-ractive\": \"^0.2.0\",\n    \"gobble-rollup\": \"^0.25.0\",\n    \"gobble-uglifyjs\": \"^0.2.1\",\n    \"jimp\": \"^0.2.21\",\n    \"nightmare\": \"^2.1.3\",\n    \"ractive\": \"^0.7.3\",\n    \"ractive-events-tap\": \"^0.3.0\",\n    \"ractive-transitions-fade\": \"^0.3.1\",\n    \"rollup-plugin-babel\": \"^2.3.9\",\n    \"rollup-plugin-npm\": \"^1.3.0\",\n    \"sander\": \"^0.4.0\"\n  },\n  \"spm\": {\n    \"main\": \"dist/ramjet.js\",\n    \"ignore\": [\n      \"demo\",\n      \"test\",\n      \"src\",\n      \"scripts\"\n    ]\n  },\n  \"dependencies\": {\n    \"stacking-order\": \"^1.0.0\"\n  }\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}