{
  "metadata": {
    "timestamp": 1736562551003,
    "page": 13,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Automattic/kue",
      "stars": 9457,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0625,
          "content": ".idea\n.DS_Store\nnode_modules\n*.sock\n*.rdb\ntest/incomplete\n*.swp\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.0283203125,
          "content": "support\ntest\nexamples\n*.sock\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0869140625,
          "content": "language: node_js\nnode_js:\n  - \"4\"\n  - \"6\"\n  - \"8\"\n  - \"node\"\nservices:\n  - redis-server\n"
        },
        {
          "name": "History.md",
          "type": "blob",
          "size": 12.1259765625,
          "content": "0.11.5 / 2016-11-05\n===================\n\n* Fix even more redis command callbacks\n* Fix redis commands SLC integration #978\n\n\n0.11.4 / 2016-10-21\n===================\n\n* adding reds module to optional dependencies\n\n\n0.11.3 / 2016-10-21\n===================\n\n* Fix making reds module optional, #969\n\n\n0.11.2 / 2016-10-14\n===================\n\n* Update packages to remove CVEs, #932\n* Make reds an optional dependency, #922\n* Remove unnecessary dependency to lodash-deep, #921\n* Expose shutdown in process worker ctx, #912\n* Add ioredis support to watchStuckJobs, #884\n\n\n0.11.1 / 2016-06-15\n===================\n\n* Upgrade redis to 2.6\n* Add switch for each job event\n\n\n0.11.0 / 2016-05-13\n===================\n\n* force node_redis version to 2.4.x, Closes #857\n* Converting Job ids back into integers, #855\n* Fix LPUSH crash during shutdown, #854\n* Install kue-dashboard script, #853\n* Add start event to documentation, #841\n* Add parameter for testMode.enter to continue processing jobs, #821\n* Modern Node.js versions support, #812\n* Don't start the next job until the current one is totally finished, Closes #806\n* Store multiple instances of jobs in jobs id map to emit events for all, #750 \n\n\n0.10.6 / 2016-04-27\n===================\n\n* Redis Cluster fix, Closes #861\n\n\n0.10.5 / 2016-01-14\n===================\n\n* Attempts surpassing max attempts on delay jobs upon failure, resulting in infinite retries, Fixes #797\n* Add yargs dependency for kue-dashboard, #796\n\n\n0.10.4 / 2016-01-14\n===================\n\n* fix zpop callback on shutdown\n* fix connection_options in test.js\n* Unit tests for redis.js #779\n* Tests for kue.js #778\n\n\n0.10.3 / 2015-11-20\n===================\n\n* Fixing Job processing order without munging the job id, Closes #708, Closes #678\n\n\n0.10.2 / 2015-11-20\n===================\n\n* Add support for ioredis, Closes #652\n* Add support for Redis Cluster, Closes #642\n* Fix `this.state` on refreshTTL \n\n\n0.10.0 / 2015-11-20\n===================\n\n* Update TTL on job progress, Closes #694\n* Upgrade to node_redis 2.3,  #717\n* Fix LPUSH vs connection quit race when shutting down\n* Restart task btn, #754\n* Fix uncaught exception in job.js, #751\n* Added kue-dashboard script for conveniently running the dashboard #611\n* Fixed invalid CSS on production, #755\n* Connection string not supporting DB number #725\n* Fix attempts remaining logic, #742\n* Update jade, #741\n* Properly set job IDs in test mode, #727\n* Enhanced Job.log formatting, #630\n* Use node's util#format() in Job.log, #724\n\n\n0.9.6 / 2015-10-06\n===================\n\n* Fix redirection issue\n\n\n0.9.5 / 2015-09-16\n===================\n\n* When no ttl is set for jobs, don't let high priorities to conflict, fixes #697\n* Fix redirection issue, closes #685\n* Get progress_data along with other redis fields, PR #642\n* Grab only password from Redis URL, fixes #681\n* Add remove job event, PR #665\n\n\n0.9.4 / 2015-07-17\n===================\n\n* Job that doesn't call done() retries twice, fixes #669\n\n\n0.9.3 / 2015-05-07\n===================\n\n* Fix unlocking promotion lock, Closes #608\n\n\n0.9.2 / 2015-05-07\n===================\n\n* Fix duplicate job promotion/ttl race, Closes #601\n\n\n0.9.1 / 2015-05-05\n===================\n\n* Filter only jobs that have ttl set, Fixes #590\n\n\n0.9.0 / 2015-05-02\n===================\n\n* Upgrade to express 4.x, Closes #537\n* Move `job.reprocess` done callback to the last, Closes #387, Closes #385\n* Standardize signature of `.shutdown()` callback, Closes #454\n* Turn off search indexes by default, Closes #412\n* Improve delayed job promotion feature, Closes #533, fixes #312, closes #352\n* Use a distributed redis lock to hide job promotion from user, Closes #556\n* Deprecate `.promote` and update documentation\n* Document Javascript API to query queue state, Closes #455\n* Add jobEvents flag to switch off job events for memory optimization, Closes #401\n* Add idle event to capture unsuccessful zpop's in between of worker get Job, should fix #538\n* Add TTL for active jobs, Closes #544\n* Document `jobEvents` queue config, Closes #557\n* Bulk job create API now processes all jobs in case of intermediate errors, Closes #552\n* Merge `red job remove buttons and tooltips` PR, Closes #566\n* Add a in-memory test Kue mode, Closes #561\n* Update reds package to `0.2.5`\n* Merge PR #594, bad redirect URL in old express versions, fixes #592\n* update dependency to forked warlock repo to fix redis connection cleanup on shutdown, fixes #578\n* Update job hash with the worker ID, Closes #580\n\n\n0.8.12 / 2015-03-22\n===================\n\n* Bulk job create JSON API, Closes #334, Closes #500, Closes #527\n* Add feature to specify redis connection string/url, Closes #540\n* Mention kue-ui in readme, Closes #502\n* Add an extra parameter to the progress method to notify extra contextual data, Closes #466, Closes #427, Closes #313\n* Document job event callback arguments, Closes #542\n* Fix typo in documentation, Closes #506\n* Document importance of using Kue `error` listeners, Closes #409\n* Document Queue maintenance and job.removeOnComplete( true ), Closes #439\n* Document how to query all the active jobs programmatically, Closes #418\n* Document to explain how \"stuck queued jobs\" happens, Closes #451\n* Document on proper error handling to prevent stuck jobs, Closes #391\n\n\n0.8.11 / 2014-12-15\n===================\n\n* Fix shutdown on re-attemptable jobs, Closes #469\n* Fix race condition in delaying jobs when re-attempts, Closes #483\n* Make `watchStuckJobs` aware of queue prefix, Closes #452\n* Send along error message when emitting a failed event, Closes #461\n\n\n0.8.10 / 2014-12-13\n===================\n\n* Add more tests, Closes #280\n* More atomic job state changes, Closes #411\n* Documentation: error passed to done should be string or standard JS error object, Closes #394\n* Documentation: backoff documentation, Closes #435\n* Documentation: correct `promote` usage, Closes #413\n* Add job enqueue event, Closes #458\n* Watch for errors with non-string err.stack, Closes #426\n* Fix web app redirect path for express 4.0, Closes #393\n* `removeBadJob` should do pessimistic job removal from all state ZSETs, Closes #438\n* Add stats json api by type and state, Closes #477\n* Don't let concurrent graceful shutdowns on subsequent`Queue#shutdown`calls, Closes #479\n* Fix `cleanup` global leak, Closes #475\n\n\n0.8.9 / 2014-10-01\n==================\n\n* Properly update status flags on resume, Closes #423\n\n0.8.8 / 2014-09-12\n==================\n\n* Fix tests to limited shutdown timeouts\n* Add a redis lua watchdog to fix stuck inactive jobs, fixes #130\n* Stuck inactive jobs watchdog, Closes #130\n\n0.8.7 / 2014-09-12\n==================\n\n* Shutdown timeout problems and races, fixes #406\n\n0.8.6 / 2014-08-30\n==================\n\n* Quit redis connections on shutdown & let the process exit, closes #398\n\n0.8.5 / 2014-08-10\n==================\n\n  * Fix typo in removeOnComplete\n  \n0.8.4 / 2014-08-08\n==================\n\n  * Emit event 'job failed attempt' after job successfully updated, closes #377\n  * Fix delaying jobs when failed, closes #384\n  * Implement `job.removeOnComplete`, closes #383\n  * Make searchKeys chainable, closes #379\n  * Add extra job options to JSON API, closes #378\n  \n0.8.3 / 2014-07-13\n==================\n\n  * Inject other Redis clients compatible with node_redis #344\n  * Add support to connect to Redis using Linux sockets #362\n  * Add .save callback sample code in documentation #367\n\n0.8.2 / 2014-07-08\n==================\n\n  * Fix broken failure backoff #360\n  * Merge web console redirection fix #357\n  * Add db selection option to redis configuration #354\n  * Get number of jobs with given state and type #349\n  * Add Queue.prototype.delayed function #351\n\n0.8.1 / 2014-06-13\n==================\n\n  * Fix wrong parameter orders in complete event #343s\n  * Graceful shutdown bug fix #328\n\n0.8.0 / 2014-06-11\n==================\n\n  * Implement backoff on failure retries #300\n  * Allow passing back worker results via done to event handlers #170\n  * Allow job producer to specify which keys of `job.data` to be indexed for search #284\n  * Waffle.io Badge #332\n  * Dropping monkey-patch style redis client connections\n  * Update docs: Worker Pause/Resume-ability\n  * Update docs: Reliability of Queue event handlers over Job event handlers\n\n0.7.9 / 2014-06-01\n==================\n\n  * Graceful shutdown bug fix #336\n  * More robust graceful shutdown under heavy load #328\n\n0.7.6 / 2014-05-02\n==================\n\n  * Fixed broken monkey-patch style redis connections #323\n\n0.7.0 / 2014-01-24\n==================\n\n  * Suppress \"undefined\" messages on String errors. Closes #230\n  * Fix cannot read property id of undefined errors. Closes #252\n  * Parameterize limit of jobs checked in promotion cycles. Closes #244\n  * Graceful shutdown\n  * Worker pause/resume ability, Closes #163\n  * Ensure event subscription before job save. Closes #179\n  * Fix Queue singleton\n  * Fix failed event being called in first attempt. Closes #142\n  * Disable search (Search index memory leaks). See #58 & #218\n  * Emit error events on both kue and job\n  * JS/Coffeescript tests added (Mocha+Should)\n  * Travis support added\n\n\n0.6.2 / 2013-04-03\n==================\n\n  * Fix redirection to active for mounted apps\n\n\n0.6.1 / 2013-03-25\n==================\n\n  * Fixed issue preventing polling for new jobs. Closes #192\n\n\n0.6.0 / 2013-03-20\n==================\n\n * Make pollForJobs actually use ms argument. Closes #158\n * Support delay over HTTP POST. Closes #165\n * Fix natural sorting. Closes #174\n * Update `updated_at` timestamp during `log`, `progress`, `attempt`, or `state` changes. Closes #188\n * Fix redirection to /active. Closes #190\n\n0.5.0 / 2012-11-16\n==================\n\n  * add POST /job to create a job\n  * fix /job/search hang\n\n0.4.2 / 2012-11-08\n==================\n\n  * Revert \"Fix delay() not really delaying\"\n  * Revert \"If a job with a delay has more attempts, honor the original delay\"\n\n0.4.1 / 2012-09-25\n==================\n\n  * fix: if a job with a delay has more attempts, honor the original delay [mathrawka]\n\n0.4.0 / 2012-06-28\n==================\n\n  * Added 0.8.0 support\n\n0.3.4 / 2012-02-23\n==================\n\n  * Changed: reduce polling by using BLPOP to notify workers of activity [Davide Bertola]\n\n0.3.3 / 2011-11-28\n==================\n\n  * Fixed: use relative stats route to support mounting [alexkwolfe]\n  * Fixed 0.6.x support\n  * Removed empty Makefile\n\n0.3.2 / 2011-10-04\n==================\n\n  * Removed unnecessary \"pooling\"\n  * Fixed multiple event emitting. Closes #73\n  * Fixed menu styling\n\n0.3.1 / 2011-08-25\n==================\n\n  * Fixed auto event subscription. Closes #68\n  * Changed: one redis connection for all workers\n  * Removed user-select: none from everything. Closes #50\n\n0.3.0 / 2011-08-11\n==================\n\n  * Added search capabilities\n  * Added `workTime` stat\n  * Added removal of stale jobs example\n  * Added Queue-level job events, useful for removing stale jobs etc. Closes   * Changed: lazy load reds search [David Wood]\n  * Fixed `Job#error` for modules that throw strings or emit `error` events with strings [guillermo] #51\n  * Fixed `Job#remove(fn)`\n  * Fixed proxy issue with paths, use relative paths [booo]\n\n0.2.0 / 2011-07-25\n==================\n\n  * Added infinite scroll\n  * Added delayed job support\n  * Added configurable redis support [davidwood]\n  * Added job windowing. Closes #28\n  * Added `Job#delay(ms)`\n  * Removed job scrollIntoView\n  * Removed fancy scrollbar (for infinite scroll / windowing :( )\n  * Removed \"More\" button\n  * Fixed z-index for actions\n  * Fixed job mapping. Closes #43\n\n0.1.0 / 2011-07-19\n==================\n\n  * Added exposing of progress via redis pubsub\n  * Added pubsub job events \"complete\" and \"failed\"\n  * Fixed: capping of progress > 100 == 100\n  * UI: scroll details into view\n\n0.0.3 / 2011-07-07\n==================\n\n  * Added caustic to aid in template management\n  * Added job attempt support. Closes #31\n  * Added `Job.attempts(n)`\n  * Added minified jQuery\n  * Added cluster integration docs. Closes #13\n  * Added GET _/jobs/:from..:to_ to JSON API\n  * Fixed: hide \"More\" on sort\n  * Fixed: hide \"More\" on filter\n  * Fixed: removed \"error\" emission, blows up when no one is listening\n\n0.0.2 / 2011-07-05\n==================\n\n  * Added support to update state from UI. Closes #26\n  * Added support to alter priority in UI. Closes #25\n  * Added filtering by type. Closes #20\n\n0.0.1 / 2011-07-04\n==================\n\n  * Initial release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0654296875,
          "content": "The MIT License\n\nCopyright (c) 2011 LearnBoost <tj@learnboost.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.634765625,
          "content": "REPORTER = spec\n\nall:    build\n\nbuild:\n\t@./node_modules/coffee-script/bin/coffee \\\n    -c \\\n    -o lib src\n\ntest-tdd:\n\t@./node_modules/.bin/mocha \\\n    --reporter $(REPORTER) \\\n\t\t--require should \\\n\t\t--require sinon \\\n    --ui tdd \\\n    test/tdd/*.js\n\ntest-bdd:\n\t@./node_modules/.bin/mocha \\\n    --reporter $(REPORTER) \\\n    --require should \\\n    --ui bdd \\\n    test/*.js\n\ntest-bdd-coffee:\n\t@./node_modules/.bin/mocha \\\n    --compilers coffee:coffee-script \\\n    --reporter $(REPORTER) \\\n    --require should \\\n    --require coffee-script/register \\\n    --ui bdd \\\n    test/*.coffee\n\n\ntest-all:   test-tdd test-bdd test-bdd-coffee\n\n.PHONY: test-all\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 32.7666015625,
          "content": "# Kue\n\n## Kue is no longer maintained\n\nPlease see e.g. [Bull](https://github.com/OptimalBits/bull) as an alternative. Thank you!\n\n[![Build Status](https://travis-ci.org/Automattic/kue.svg?branch=master&style=flat)](https://travis-ci.org/Automattic/kue)\n[![npm version](https://badge.fury.io/js/kue.svg?style=flat)](http://badge.fury.io/js/kue)\n[![Dependency Status](https://img.shields.io/david/Automattic/kue.svg?style=flat)](https://david-dm.org/Automattic/kue)\n[![Join the chat at https://gitter.im/Automattic/kue](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/Automattic/kue?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n\nKue is a priority job queue backed by [redis](http://redis.io), built for [node.js](http://nodejs.org).\n\n**PROTIP** This is the latest Kue documentation, make sure to also read the [changelist](History.md).\n\n\n\n## Upgrade Notes (Please Read)\n  - [0.9 -> 0.10](https://github.com/Automattic/kue/wiki/Upgrading-to-0.10.x)\n  - [0.8 ->  0.9](https://github.com/Automattic/kue/wiki/Upgrading-to-0.9.x)\n\n\n\n## Installation\n\n  - Latest release:\n\n        $ npm install kue\n\n  - Master branch:\n\n        $ npm install http://github.com/Automattic/kue/tarball/master\n\n[![NPM](https://nodei.co/npm/kue.png?downloads=true&stars=true)](https://nodei.co/npm/kue/)\n\n## Features\n\n  - Delayed jobs\n  - Distribution of parallel work load\n  - Job event and progress pubsub\n  - Job TTL\n  - Optional retries with backoff\n  - Graceful workers shutdown\n  - Full-text search capabilities\n  - RESTful JSON API\n  - Rich integrated UI\n  - Infinite scrolling\n  - UI progress indication\n  - Job specific logging\n  - Powered by Redis\n\n## Overview\n\n  - [Creating Jobs](#creating-jobs)\n  - [Jobs Priority](#job-priority)\n  - [Failure Attempts](#failure-attempts)\n  - [Failure Backoff](#failure-backoff)\n  - [Job TTL](#job-ttl)\n  - [Job Logs](#job-logs)\n  - [Job Progress](#job-progress)\n  - [Job Events](#job-events)\n  - [Queue Events](#queue-events)\n  - [Delayed Jobs](#delayed-jobs)\n  - [Processing Jobs](#processing-jobs)\n  - [Processing Concurrency](#processing-concurrency)\n  - [Pause Processing](#pause-processing)\n  - [Updating Progress](#updating-progress)\n  - [Graceful Shutdown](#graceful-shutdown)\n  - [Error Handling](#error-handling)\n  - [Queue Maintenance](#queue-maintenance)\n  - [Redis Connection Settings](#redis-connection-settings)\n  - [User-Interface](#user-interface)\n  - [JSON API](#json-api)\n  - [Parallel Processing With Cluster](#parallel-processing-with-cluster)\n  - [Securing Kue](#securing-kue)\n  - [Testing](#testing)\n  - [Screencasts](#screencasts)\n  - [License](#license)\n\n\n\n## Creating Jobs\n\nFirst create a job `Queue` with `kue.createQueue()`:\n\n```js\nvar kue = require('kue')\n  , queue = kue.createQueue();\n```\n\nCalling `queue.create()` with the type of job (\"email\"), and arbitrary job data will return a `Job`, which can then be `save()`ed, adding it to redis, with a default priority level of \"normal\". The `save()` method optionally accepts a callback, responding with an `error` if something goes wrong. The `title` key is special-cased, and will display in the job listings within the UI, making it easier to find a specific job.\n\n```js\nvar job = queue.create('email', {\n    title: 'welcome email for tj'\n  , to: 'tj@learnboost.com'\n  , template: 'welcome-email'\n}).save( function(err){\n   if( !err ) console.log( job.id );\n});\n```\n\n### Job Priority\n\nTo specify the priority of a job, simply invoke the `priority()` method with a number, or priority name, which is mapped to a number.\n\n```js\nqueue.create('email', {\n    title: 'welcome email for tj'\n  , to: 'tj@learnboost.com'\n  , template: 'welcome-email'\n}).priority('high').save();\n```\n\nThe default priority map is as follows:\n\n```js\n{\n    low: 10\n  , normal: 0\n  , medium: -5\n  , high: -10\n  , critical: -15\n};\n```\n\n### Failure Attempts\n\nBy default jobs only have _one_ attempt, that is when they fail, they are marked as a failure, and remain that way until you intervene. However, Kue allows you to specify this, which is important for jobs such as transferring an email, which upon failure, may usually retry without issue. To do this invoke the `.attempts()` method with a number.\n\n```js\n queue.create('email', {\n     title: 'welcome email for tj'\n   , to: 'tj@learnboost.com'\n   , template: 'welcome-email'\n }).priority('high').attempts(5).save();\n```\n\n### Failure Backoff\nJob retry attempts are done as soon as they fail, with no delay, even if your job had a delay set via `Job#delay`. If you want to delay job re-attempts upon failures (known as backoff) you can use `Job#backoff` method in different ways:\n\n```js\n    // Honor job's original delay (if set) at each attempt, defaults to fixed backoff\n    job.attempts(3).backoff( true )\n\n    // Override delay value, fixed backoff\n    job.attempts(3).backoff( {delay: 60*1000, type:'fixed'} )\n\n    // Enable exponential backoff using original delay (if set)\n    job.attempts(3).backoff( {type:'exponential'} )\n\n    // Use a function to get a customized next attempt delay value\n    job.attempts(3).backoff( function( attempts, delay ){\n      //attempts will correspond to the nth attempt failure so it will start with 0\n      //delay will be the amount of the last delay, not the initial delay unless attempts === 0\n      return my_customized_calculated_delay;\n    })\n```\n\nIn the last scenario, provided function will be executed (via eval) on each re-attempt to get next attempt delay value, meaning that you can't reference external/context variables within it.\n\n### Job TTL\n\nJob producers can set an expiry value for the time their job can live in active state, so that if workers didn't reply in timely fashion, Kue will fail it with `TTL exceeded` error message preventing that job from being stuck in active state and spoiling concurrency.\n\n```js\nqueue.create('email', {title: 'email job with TTL'}).ttl(milliseconds).save();\n```\n\n### Job Logs\n\nJob-specific logs enable you to expose information to the UI at any point in the job's life-time. To do so simply invoke `job.log()`, which accepts a message string as well as variable-arguments for sprintf-like support:\n\n```js\njob.log('$%d sent to %s', amount, user.name);\n```\n\nor anything else (uses [util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options) internally):\n\n```js\njob.log({key: 'some key', value: 10});\njob.log([1,2,3,5,8]);\njob.log(10.1);\n```\n\n### Job Progress\n\nJob progress is extremely useful for long-running jobs such as video conversion. To update the job's progress simply invoke `job.progress(completed, total [, data])`:\n\n```js\njob.progress(frames, totalFrames);\n```\n\ndata can be used to pass extra information about the job. For example a message or an object with some extra contextual data to the current status.\n\n### Job Events\n\nJob-specific events are fired on the `Job` instances via Redis pubsub. The following events are currently supported:\n\n- `enqueue` the job is now queued\n- `start` the job is now running\n- `promotion` the job is promoted from delayed state to queued\n- `progress` the job's progress ranging from 0-100\n- `failed attempt` the job has failed, but has remaining attempts yet\n- `failed` the job has failed and has no remaining attempts\n- `complete` the job has completed\n- `remove` the job has been removed\n\n\nFor example this may look something like the following:\n\n```js\nvar job = queue.create('video conversion', {\n    title: 'converting loki\\'s to avi'\n  , user: 1\n  , frames: 200\n});\n\njob.on('complete', function(result){\n  console.log('Job completed with data ', result);\n\n}).on('failed attempt', function(errorMessage, doneAttempts){\n  console.log('Job failed');\n\n}).on('failed', function(errorMessage){\n  console.log('Job failed');\n\n}).on('progress', function(progress, data){\n  console.log('\\r  job #' + job.id + ' ' + progress + '% complete with data ', data );\n\n});\n```\n\n**Note** that Job level events are not guaranteed to be received upon process restarts, since restarted node.js process will lose the reference to the specific Job object. If you want a more reliable event handler look for [Queue Events](#queue-events).\n\n**Note** Kue stores job objects in memory until they are complete/failed to be able to emit events on them. If you have a huge concurrency in uncompleted jobs, turn this feature off and use queue level events for better memory scaling.\n\n ```js\n kue.createQueue({jobEvents: false})\n ```\n\n Alternatively, you can use the job level function `events` to control whether events are fired for a job at the job level.\n\n ```js\nvar job = queue.create('test').events(false).save();\n ```\n\n### Queue Events\n\nQueue-level events provide access to the job-level events previously mentioned, however scoped to the `Queue` instance to apply logic at a \"global\" level. An example of this is removing completed jobs:\n\n```js\nqueue.on('job enqueue', function(id, type){\n  console.log( 'Job %s got queued of type %s', id, type );\n\n}).on('job complete', function(id, result){\n  kue.Job.get(id, function(err, job){\n    if (err) return;\n    job.remove(function(err){\n      if (err) throw err;\n      console.log('removed completed job #%d', job.id);\n    });\n  });\n});\n```\n\nThe events available are the same as mentioned in \"Job Events\", however prefixed with \"job \".\n\n### Delayed Jobs\n\nDelayed jobs may be scheduled to be queued for an arbitrary distance in time by invoking the `.delay(ms)` method, passing the number of milliseconds relative to _now_. Alternatively, you can pass a JavaScript `Date` object with a specific time in the future.\nThis automatically flags the `Job` as \"delayed\".\n\n```js\nvar email = queue.create('email', {\n    title: 'Account renewal required'\n  , to: 'tj@learnboost.com'\n  , template: 'renewal-email'\n}).delay(milliseconds)\n  .priority('high')\n  .save();\n```\n\nKue will check the delayed jobs with a timer, promoting them if the scheduled delay has been exceeded, defaulting to a check of top 1000 jobs every second.\n\n## Processing Jobs\n\nProcessing jobs is simple with Kue. First create a `Queue` instance much like we do for creating jobs, providing us access to redis etc, then invoke `queue.process()` with the associated type.\nNote that unlike what the name `createQueue` suggests, it currently returns a singleton `Queue` instance. So you can configure and use only a single `Queue` object within your node.js process.\n\nIn the following example we pass the callback `done` to `email`, When an error occurs we invoke `done(err)` to tell Kue something happened, otherwise we invoke `done()` only when the job is complete. If this function responds with an error it will be displayed in the UI and the job will be marked as a failure. The error object passed to done, should be of standard type `Error`.\n\n```js\nvar kue = require('kue')\n , queue = kue.createQueue();\n\nqueue.process('email', function(job, done){\n  email(job.data.to, done);\n});\n\nfunction email(address, done) {\n  if(!isValidEmail(address)) {\n    //done('invalid to address') is possible but discouraged\n    return done(new Error('invalid to address'));\n  }\n  // email send stuff...\n  done();\n}\n```\n\nWorkers can also pass job result as the second parameter to done `done(null,result)` to store that in `Job.result` key. `result` is also passed through `complete` event handlers so that job producers can receive it if they like to.\n\n### Processing Concurrency\n\nBy default a call to `queue.process()` will only accept one job at a time for processing. For small tasks like sending emails this is not ideal, so we may specify the maximum active jobs for this type by passing a number:\n\n```js\nqueue.process('email', 20, function(job, done){\n  // ...\n});\n```\n\n### Pause Processing\n\nWorkers can temporarily pause and resume their activity. That is, after calling `pause` they will receive no jobs in their process callback until `resume` is called. The `pause` function gracefully shutdowns this worker, and uses the same internal functionality as the `shutdown` method in [Graceful Shutdown](#graceful-shutdown).\n\n```js\nqueue.process('email', function(job, ctx, done){\n  ctx.pause( 5000, function(err){\n    console.log(\"Worker is paused... \");\n    setTimeout( function(){ ctx.resume(); }, 10000 );\n  });\n});\n```\n\n**Note** *The `ctx` parameter from Kue `>=0.9.0` is the second argument of the process callback function and `done` is idiomatically always the last*\n\n**Note** *The `pause` method signature is changed from Kue `>=0.9.0` to move the callback function to the last.*\n\n### Updating Progress\n\nFor a \"real\" example, let's say we need to compile a PDF from numerous slides with [node-canvas](https://github.com/Automattic/node-canvas). Our job may consist of the following data, note that in general you should _not_ store large data in the job it-self, it's better to store references like ids, pulling them in while processing.\n\n```js\nqueue.create('slideshow pdf', {\n    title: user.name + \"'s slideshow\"\n  , slides: [...] // keys to data stored in redis, mongodb, or some other store\n});\n```\n\nWe can access this same arbitrary data within a separate process while processing, via the `job.data` property. In the example we render each slide one-by-one, updating the job's log and progress.\n\n```js\nqueue.process('slideshow pdf', 5, function(job, done){\n  var slides = job.data.slides\n    , len = slides.length;\n\n  function next(i) {\n    var slide = slides[i]; // pretend we did a query on this slide id ;)\n    job.log('rendering %dx%d slide', slide.width, slide.height);\n    renderSlide(slide, function(err){\n      if (err) return done(err);\n      job.progress(i, len, {nextSlide : i == len ? 'itsdone' : i + 1});\n      if (i == len) done()\n      else next(i + 1);\n    });\n  }\n\n  next(0);\n});\n```\n\n### Graceful Shutdown\n\n`Queue#shutdown([timeout,] fn)` signals all workers to stop processing after their current active job is done. Workers will wait `timeout` milliseconds for their active job's done to be called or mark the active job `failed` with shutdown error reason. When all workers tell Kue they are stopped `fn` is called.\n\n```javascript\nvar queue = require('kue').createQueue();\n\nprocess.once( 'SIGTERM', function ( sig ) {\n  queue.shutdown( 5000, function(err) {\n    console.log( 'Kue shutdown: ', err||'' );\n    process.exit( 0 );\n  });\n});\n```\n\n**Note** *that `shutdown` method signature is changed from Kue `>=0.9.0` to move the callback function to the last.*\n\n## Error Handling\n\nAll errors either in Redis client library or Queue are emitted to the `Queue` object. You should bind to `error` events to prevent uncaught exceptions or debug kue errors.\n\n```javascript\nvar queue = require('kue').createQueue();\n\nqueue.on( 'error', function( err ) {\n  console.log( 'Oops... ', err );\n});\n```\n\n### Prevent from Stuck Active Jobs\n\nKue marks a job complete/failed when `done` is called by your worker, so you should use proper error handling to prevent uncaught exceptions in your worker's code and node.js process exiting before in handle jobs get done.\nThis can be achieved in two ways:\n\n1. Wrapping your worker's process function in [Domains](https://nodejs.org/api/domain.html)\n\n  ```js\n  queue.process('my-error-prone-task', function(job, done){\n    var domain = require('domain').create();\n    domain.on('error', function(err){\n      done(err);\n    });\n    domain.run(function(){ // your process function\n      throw new Error( 'bad things happen' );\n      done();\n    });\n  });\n  ```\n **Notice -** Domains are [deprecated](https://nodejs.org/api/documentation.html#documentation_stability_index) from Nodejs with **stability 0** and it's not recommended to use.\n\n  This is the softest and best solution, however is not built-in with Kue. Please refer to [this discussion](https://github.com/kriskowal/q/issues/120). You can comment on this feature in the related open Kue [issue](https://github.com/Automattic/kue/pull/403).\n\n  You can also use promises to do something like\n\n  ```js\n  queue.process('my-error-prone-task', function(job, done){\n    Promise.method( function(){ // your process function\n      throw new Error( 'bad things happen' );\n    })().nodeify(done)\n  });\n  ```\n\n  but this won't catch exceptions in your async call stack as domains do.\n\n\n\n2. Binding to `uncaughtException` and gracefully shutting down the Kue, however this is not a recommended error handling idiom in javascript since you are losing the error context.\n\n  ```js\n  process.once( 'uncaughtException', function(err){\n    console.error( 'Something bad happened: ', err );\n    queue.shutdown( 1000, function(err2){\n      console.error( 'Kue shutdown result: ', err2 || 'OK' );\n      process.exit( 0 );\n    });\n  });\n  ```\n\n### Unstable Redis connections\n\nKue currently uses client side job state management and when redis crashes in the middle of that operations, some stuck jobs or index inconsistencies will happen. The consequence is that certain number of jobs will be stuck, and be pulled out by worker only when new jobs are created, if no more new jobs are created, they stuck forever. So we **strongly** suggest that you run watchdog to fix this issue by calling:\n\n```js\nqueue.watchStuckJobs(interval)\n```\n\n`interval` is in milliseconds and defaults to 1000ms\n\nKue will be refactored to fully atomic job state management from version 1.0 and this will happen by lua scripts and/or BRPOPLPUSH combination. You can read more [here](https://github.com/Automattic/kue/issues/130) and [here](https://github.com/Automattic/kue/issues/38).\n\n## Queue Maintenance\n\nQueue object has two type of methods to tell you about the number of jobs in each state\n\n```js\nqueue.inactiveCount( function( err, total ) { // others are activeCount, completeCount, failedCount, delayedCount\n  if( total > 100000 ) {\n    console.log( 'We need some back pressure here' );\n  }\n});\n```\n\nyou can also query on an specific job type:\n\n```js\nqueue.failedCount( 'my-critical-job', function( err, total ) {\n  if( total > 10000 ) {\n    console.log( 'This is tOoOo bad' );\n  }\n});\n```\n\nand iterating over job ids\n\n```js\nqueue.inactive( function( err, ids ) { // others are active, complete, failed, delayed\n  // you may want to fetch each id to get the Job object out of it...\n});\n```\n\nhowever the second one doesn't scale to large deployments, there you can use more specific `Job` static methods:\n\n```js\nkue.Job.rangeByState( 'failed', 0, n, 'asc', function( err, jobs ) {\n  // you have an array of maximum n Job objects here\n});\n```\nor\n\n```js\nkue.Job.rangeByType( 'my-job-type', 'failed', 0, n, 'asc', function( err, jobs ) {\n  // you have an array of maximum n Job objects here\n});\n```\n\n**Note** *that the last two methods are subject to change in later Kue versions.*\n\n\n### Programmatic Job Management\n\nIf you did none of above in [Error Handling](#error-handling) section or your process lost active jobs in any way, you can recover from them when your process is restarted. A blind logic would be to re-queue all stuck jobs:\n\n```js\nqueue.active( function( err, ids ) {\n  ids.forEach( function( id ) {\n    kue.Job.get( id, function( err, job ) {\n      // Your application should check if job is a stuck one\n      job.inactive();\n    });\n  });\n});\n```\n\n**Note** *in a clustered deployment your application should be aware not to involve a job that is valid, currently inprocess by other workers.*\n\n### Job Cleanup\n\nJobs data and search indexes eat up redis memory space, so you will need some job-keeping process in real world deployments. Your first chance is using automatic job removal on completion.\n\n```javascript\nqueue.create( ... ).removeOnComplete( true ).save()\n```\n\nBut if you eventually/temporally need completed job data, you can setup an on-demand job removal script like below to remove top `n` completed jobs:\n\n```js\nkue.Job.rangeByState( 'complete', 0, n, 'asc', function( err, jobs ) {\n  jobs.forEach( function( job ) {\n    job.remove( function(){\n      console.log( 'removed ', job.id );\n    });\n  });\n});\n```\n\n**Note** *that you should provide enough time for `.remove` calls on each job object to complete before your process exits, or job indexes will leak*\n\n\n## Redis Connection Settings\n\nBy default, Kue will connect to Redis using the client default settings (port defaults to `6379`, host defaults to `127.0.0.1`, prefix defaults to `q`). `Queue#createQueue(options)` accepts redis connection options in `options.redis` key.\n\n```javascript\nvar kue = require('kue');\nvar q = kue.createQueue({\n  prefix: 'q',\n  redis: {\n    port: 1234,\n    host: '10.0.50.20',\n    auth: 'password',\n    db: 3, // if provided select a non-default redis db\n    options: {\n      // see https://github.com/mranney/node_redis#rediscreateclient\n    }\n  }\n});\n```\n\n`prefix` controls the key names used in Redis.  By default, this is simply `q`. Prefix generally shouldn't be changed unless you need to use one Redis instance for multiple apps. It can also be useful for providing an isolated testbed across your main application.\n\nYou can also specify the connection information as a URL string.\n\n```js\nvar q = kue.createQueue({\n  redis: 'redis://example.com:1234?redis_option=value&redis_option=value'\n});\n```\n\n#### Connecting using Unix Domain Sockets\n\nSince [node_redis](https://github.com/mranney/node_redis) supports Unix Domain Sockets, you can also tell Kue to do so. See [unix-domain-socket](https://github.com/mranney/node_redis#unix-domain-socket) for your redis server configuration.\n\n```javascript\nvar kue = require('kue');\nvar q = kue.createQueue({\n  prefix: 'q',\n  redis: {\n    socket: '/data/sockets/redis.sock',\n    auth: 'password',\n    options: {\n      // see https://github.com/mranney/node_redis#rediscreateclient\n    }\n  }\n});\n```\n\n#### Replacing Redis Client Module\n\nAny node.js redis client library that conforms (or when adapted) to  [node_redis](https://github.com/mranney/node_redis) API can be injected into Kue. You should only provide a `createClientFactory` function as a redis connection factory instead of providing node_redis connection options.\n\nBelow is a sample code to enable [redis-sentinel](https://github.com/ortoo/node-redis-sentinel) to connect to [Redis Sentinel](http://redis.io/topics/sentinel) for automatic master/slave failover.\n\n```javascript\nvar kue = require('kue');\nvar Sentinel = require('redis-sentinel');\nvar endpoints = [\n  {host: '192.168.1.10', port: 6379},\n  {host: '192.168.1.11', port: 6379}\n];\nvar opts = options || {}; // Standard node_redis client options\nvar masterName = 'mymaster';\nvar sentinel = Sentinel.Sentinel(endpoints);\n\nvar q = kue.createQueue({\n   redis: {\n      createClientFactory: function(){\n         return sentinel.createClient(masterName, opts);\n      }\n   }\n});\n```\n\n**Note** *that all `<0.8.x` client codes should be refactored to pass redis options to `Queue#createQueue` instead of monkey patched style overriding of `redis#createClient` or they will be broken from Kue `0.8.x`.*\n\n#### Using ioredis client with cluster support\n\n```javascript\n\nvar Redis = require('ioredis');\nvar kue = require('kue');\n\n// using https://github.com/72squared/vagrant-redis-cluster\n\nvar queue = kue.createQueue({\n    redis: {\n      createClientFactory: function () {\n        return new Redis.Cluster([{\n          port: 7000\n        }, {\n          port: 7001\n        }]);\n      }\n    }\n  });\n```\n\n## User-Interface\n\nThe UI is a small [Express](https://github.com/strongloop/express) application.\nA script is provided in `bin/` for running the interface as a standalone application\nwith default settings. You may pass in options for the port, redis-url, and prefix. For example:\n\n```\nnode_modules/kue/bin/kue-dashboard -p 3050 -r redis://127.0.0.1:3000 -q prefix\n```\n\nYou can fire it up from within another application too:\n\n\n```js\nvar kue = require('kue');\nkue.createQueue(...);\nkue.app.listen(3000);\n```\n\nThe title defaults to \"Kue\", to alter this invoke:\n\n```js\nkue.app.set('title', 'My Application');\n```\n\n**Note** *that if you are using non-default Kue options, `kue.createQueue(...)` must be called before accessing `kue.app`.*\n\n### Third-party interfaces\n\nYou can also use [Kue-UI](https://github.com/StreetHub/kue-ui) web interface contributed by [Arnaud Bénard](https://github.com/arnaudbenard)\n\n\n## JSON API\n\nAlong with the UI Kue also exposes a JSON API, which is utilized by the UI.\n\n### GET /job/search?q=\n\nQuery jobs, for example \"GET /job/search?q=avi video\":\n\n```js\n[\"5\", \"7\", \"10\"]\n```\n\nBy default kue indexes the whole Job data object for searching, but this can be customized via calling `Job#searchKeys` to tell kue which keys on Job data to create index for:\n\n```javascript\nvar kue = require('kue');\nqueue = kue.createQueue();\nqueue.create('email', {\n    title: 'welcome email for tj'\n  , to: 'tj@learnboost.com'\n  , template: 'welcome-email'\n}).searchKeys( ['to', 'title'] ).save();\n```\n\nSearch feature is turned off by default from Kue `>=0.9.0`. Read more about this [here](https://github.com/Automattic/kue/issues/412). You should enable search indexes and add [reds](https://www.npmjs.com/package/reds) in your dependencies if you need to:\n\n```javascript\nvar kue = require('kue');\nq = kue.createQueue({\n    disableSearch: false\n});\n```\n\n```\nnpm install reds --save\n```\n\n### GET /stats\n\nCurrently responds with state counts, and worker activity time in milliseconds:\n\n```js\n{\"inactiveCount\":4,\"completeCount\":69,\"activeCount\":2,\"failedCount\":0,\"workTime\":20892}\n```\n\n### GET /job/:id\n\nGet a job by `:id`:\n\n```js\n{\"id\":\"3\",\"type\":\"email\",\"data\":{\"title\":\"welcome email for tj\",\"to\":\"tj@learnboost.com\",\"template\":\"welcome-email\"},\"priority\":-10,\"progress\":\"100\",\"state\":\"complete\",\"attempts\":null,\"created_at\":\"1309973155248\",\"updated_at\":\"1309973155248\",\"duration\":\"15002\"}\n```\n\n### GET /job/:id/log\n\nGet job `:id`'s log:\n\n```js\n['foo', 'bar', 'baz']\n```\n\n### GET /jobs/:from..:to/:order?\n\nGet jobs with the specified range `:from` to `:to`, for example \"/jobs/0..2\", where `:order` may be \"asc\" or \"desc\":\n\n```js\n[{\"id\":\"12\",\"type\":\"email\",\"data\":{\"title\":\"welcome email for tj\",\"to\":\"tj@learnboost.com\",\"template\":\"welcome-email\"},\"priority\":-10,\"progress\":0,\"state\":\"active\",\"attempts\":null,\"created_at\":\"1309973299293\",\"updated_at\":\"1309973299293\"},{\"id\":\"130\",\"type\":\"email\",\"data\":{\"title\":\"welcome email for tj\",\"to\":\"tj@learnboost.com\",\"template\":\"welcome-email\"},\"priority\":-10,\"progress\":0,\"state\":\"active\",\"attempts\":null,\"created_at\":\"1309975157291\",\"updated_at\":\"1309975157291\"}]\n```\n\n### GET /jobs/:state/:from..:to/:order?\n\nSame as above, restricting by `:state` which is one of:\n\n    - active\n    - inactive\n    - failed\n    - complete\n\n### GET /jobs/:type/:state/:from..:to/:order?\n\nSame as above, however restricted to `:type` and `:state`.\n\n### DELETE /job/:id\n\nDelete job `:id`:\n\n    $ curl -X DELETE http://local:3000/job/2\n    {\"message\":\"job 2 removed\"}\n\n### POST /job\n\nCreate a job:\n\n    $ curl -H \"Content-Type: application/json\" -X POST -d \\\n        '{\n           \"type\": \"email\",\n           \"data\": {\n             \"title\": \"welcome email for tj\",\n             \"to\": \"tj@learnboost.com\",\n             \"template\": \"welcome-email\"\n           },\n           \"options\" : {\n             \"attempts\": 5,\n             \"priority\": \"high\"\n           }\n         }' http://localhost:3000/job\n    {\"message\": \"job created\", \"id\": 3}\n\nYou can create multiple jobs at once by passing an array. In this case, the response will be an array too, preserving the order:\n\n    $ curl -H \"Content-Type: application/json\" -X POST -d \\\n        '[{\n           \"type\": \"email\",\n           \"data\": {\n             \"title\": \"welcome email for tj\",\n             \"to\": \"tj@learnboost.com\",\n             \"template\": \"welcome-email\"\n           },\n           \"options\" : {\n             \"attempts\": 5,\n             \"priority\": \"high\"\n           }\n         },\n         {\n           \"type\": \"email\",\n           \"data\": {\n             \"title\": \"followup email for tj\",\n             \"to\": \"tj@learnboost.com\",\n             \"template\": \"followup-email\"\n           },\n           \"options\" : {\n             \"delay\": 86400,\n             \"attempts\": 5,\n             \"priority\": \"high\"\n           }\n         }]' http://localhost:3000/job\n    [\n      {\"message\": \"job created\", \"id\": 4},\n      {\"message\": \"job created\", \"id\": 5}\n    ]\n\nNote: when inserting multiple jobs in bulk, if one insertion fails Kue will keep processing the remaining jobs in order. The response array will contain the ids of the jobs added successfully, and any failed element will be an object describing the error: `{\"error\": \"error reason\"}`.\n\n\n## Parallel Processing With Cluster\n\nThe example below shows how you may use [Cluster](http://nodejs.org/api/cluster.html) to spread the job processing load across CPUs. Please see [Cluster module's documentation](http://nodejs.org/api/cluster.html) for more detailed examples on using it.\n\nWhen cluster `.isMaster` the file is being executed in context of the master process, in which case you may perform tasks that you only want once, such as starting the web app bundled with Kue. The logic in the `else` block is executed _per worker_.\n\n```js\nvar kue = require('kue')\n  , cluster = require('cluster')\n  , queue = kue.createQueue();\n\nvar clusterWorkerSize = require('os').cpus().length;\n\nif (cluster.isMaster) {\n  kue.app.listen(3000);\n  for (var i = 0; i < clusterWorkerSize; i++) {\n    cluster.fork();\n  }\n} else {\n  queue.process('email', 10, function(job, done){\n    var pending = 5\n      , total = pending;\n\n    var interval = setInterval(function(){\n      job.log('sending!');\n      job.progress(total - pending, total);\n      --pending || done();\n      pending || clearInterval(interval);\n    }, 1000);\n  });\n}\n```\n\nThis will create an `email` job processor (worker) per each of your machine CPU cores, with each you can handle 10 concurrent email jobs, leading to total `10 * N` concurrent email jobs processed in your `N` core machine.\n\nNow when you visit Kue's UI in the browser you'll see that jobs are being processed roughly `N` times faster! (if you have `N` cores).\n\n## Securing Kue\n\nThrough the use of app mounting you may customize the web application, enabling TLS, or adding additional middleware like `basic-auth-connect`.\n\n```bash\n$ npm install --save basic-auth-connect\n```\n\n```js\nvar basicAuth = require('basic-auth-connect');\nvar app = express.createServer({ ... tls options ... });\napp.use(basicAuth('foo', 'bar'));\napp.use(kue.app);\napp.listen(3000);\n```\n\n## Testing\n\nEnable test mode to push all jobs into a `jobs` array. Make assertions against\nthe jobs in that array to ensure code under test is correctly enqueuing jobs.\n\n```js\nqueue = require('kue').createQueue();\n\nbefore(function() {\n  queue.testMode.enter();\n});\n\nafterEach(function() {\n  queue.testMode.clear();\n});\n\nafter(function() {\n  queue.testMode.exit()\n});\n\nit('does something cool', function() {\n  queue.createJob('myJob', { foo: 'bar' }).save();\n  queue.createJob('anotherJob', { baz: 'bip' }).save();\n  expect(queue.testMode.jobs.length).to.equal(2);\n  expect(queue.testMode.jobs[0].type).to.equal('myJob');\n  expect(queue.testMode.jobs[0].data).to.eql({ foo: 'bar' });\n});\n```\n\n**IMPORTANT:** By default jobs aren't processed when created during test mode. You can enable job processing by passing true to testMode.enter\n\n```js\nbefore(function() {\n  queue.testMode.enter(true);\n});\n```\n\n\n## Screencasts\n\n  - [Introduction](http://www.screenr.com/oyNs) to Kue\n  - API [walkthrough](https://vimeo.com/26963384) to Kue\n\n## Contributing\n\n**We love contributions!**\n\nWhen contributing, follow the simple rules:\n\n* Don't violate [DRY](http://programmer.97things.oreilly.com/wiki/index.php/Don%27t_Repeat_Yourself) principles.\n* [Boy Scout Rule](http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule) needs to have been applied.\n* Your code should look like all the other code – this project should look like it was written by one person, always.\n* If you want to propose something – just create an issue and describe your question with as much description as you can.\n* If you think you have some general improvement, consider creating a pull request with it.\n* If you add new code, it should be covered by tests. No tests – no code.\n* If you add a new feature, don't forget to update the documentation for it.\n* If you find a bug (or at least you think it is a bug), create an issue with the library version and test case that we can run and see what are you talking about, or at least full steps by which we can reproduce it.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 LearnBoost &lt;tj@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.037109375,
          "content": "module.exports = require('./lib/kue');"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.1796875,
          "content": "{\n  \"name\": \"kue\",\n  \"version\": \"0.11.5\",\n  \"description\": \"Feature rich priority job queue backed by redis\",\n  \"homepage\": \"http://automattic.github.io/kue/\",\n  \"keywords\": [\n    \"job\",\n    \"queue\",\n    \"worker\",\n    \"redis\"\n  ],\n  \"license\": \"MIT\",\n  \"author\": \"TJ Holowaychuk <tj@learnboost.com>\",\n  \"contributors\": [\n    {\n      \"name\": \"Behrad Zari\",\n      \"email\": \"behradz@gmail.com\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/Automattic/kue.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/Automattic/kue/issues\"\n  },\n  \"dependencies\": {\n    \"body-parser\": \"^1.12.2\",\n    \"express\": \"^4.12.2\",\n    \"lodash\": \"^4.0.0\",\n    \"nib\": \"~1.1.2\",\n    \"node-redis-warlock\": \"~0.2.0\",\n    \"pug\": \"^2.0.0-beta3\",\n    \"redis\": \"~2.6.0-2\",\n    \"stylus\": \"~0.54.5\",\n    \"yargs\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"async\": \"^1.4.2\",\n    \"chai\": \"^3.3.0\",\n    \"coffee-script\": \"~1.10.0\",\n    \"mocha\": \"^2.3.3\",\n    \"should\": \"^3.1.0\",\n    \"sinon\": \"^1.17.2\",\n    \"supertest\": \"^1.1.0\"\n  },\n  \"main\": \"index\",\n  \"bin\": {\n    \"kue-dashboard\": \"bin/kue-dashboard\"\n  },\n  \"scripts\": {\n    \"test\": \"make test-all\"\n  },\n  \"optionalDependencies\": {\n    \"reds\": \"^0.2.5\"\n  }\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}