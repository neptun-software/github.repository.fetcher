{
  "metadata": {
    "timestamp": 1736562875432,
    "page": 452,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vvo/gifify",
      "stars": 6234,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0302734375,
          "content": "example/movie.gif\nnode_modules/"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.0390625,
          "content": "example/\nscreencast.gif\n22.gif\nback.gif\n"
        },
        {
          "name": "22.gif",
          "type": "blob",
          "size": 1013.6328125,
          "content": null
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 0.6298828125,
          "content": "# 2.2.0 (2016-11-03)\n\n * feat: add --no-loop avoids looping in GIF fixes #66 #68\n\n# 2.1.6 (2016-03-11)\n\n * fix: windows comes with fontconfig pre-installed in ImageMagick\n\n# 2.1.5 (2015-09-30)\n\n  * fix: --speed now working (using gifsicle instead of convert)\n\n# 2.1.4 (2015-05-13)\n\n  * reduce requiremenents string checks because on arch it's not libfontconfig but fontconfig\n\n# 2.1.3 (2015-04-24)\n\n  * enhance requirements checks, #26\n\n# 2.1.2 (2015-04-07)\n\n  * pin all dependencies, moment broke with moment-duration-format\n\n# 2.1.1 (2015-01-17)\n\n  * fix `to` duration (do not substract `from` from `to`)\n\n# 2.1.0 (2015-01-11)\n\n  * add --text\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.75,
          "content": "# ISC License\n\nCopyright (c) 2014-2016 Vincent Voyer and contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.39453125,
          "content": "**NOTE FROM AUTHOR**\n\nI am no more using this project or providing any support to it, if you want to maintain it, ping me here: vincent.voyer@gmail.com.\n\nThis project was created 4 years ago, there might be better ways to turn a video into a GIF now, use google!\n\n**/NOTE FROM AUTHOR**\n\n# gifify\n\nConvert any video file to an optimized animated GIF. Either in its full length or only a part of it.\n\n## Demo time\n\n![screencast](screencast.gif)\n\nThis screencast was recorded with [lolilolicon/FFcast](https://github.com/lolilolicon/FFcast) then converted to a GIF with:\n\n```shell\ngifify screencast.mkv -o screencast.gif --resize 800:-1\n```\n\n## Features\n\n- command line interface\n- programmatic JavaScript ([Node.JS](http://nodejs.org/)) [stream](http://nodejs.org/api/stream.html) interface\n- unix friendly, supports `stdin` & `stdout`\n- optimized! uses [pornel/giflossy](https://github.com/pornel/giflossy) to generate light GIFS\n- lots of options: movie speed, fps, colors, compression, resize, reverse, from & to, subtitles\n- no temp files used, everything happens in memory\n- fast! Extracting a 5-second GIF from the middle of a 2-hour movie takes less than 20 seconds\n\n## Requirements\n\nBefore using gifify, please install:\n\n- [Node.js](https://nodejs.org) (`$ brew install node`)\n- [FFmpeg](http://ffmpeg.org/) [🐓🐓🐓🐓](http://en.wikipedia.org/wiki/FFmpeg#History) (`$ brew install ffmpeg`)\n- [convert](http://www.imagemagick.org/script/convert.php), the famous [ImageMagick](http://www.imagemagick.org/) (`$ brew install imagemagick`)\n- [pornel/giflossy](https://github.com/pornel/giflossy/releases), it's a [gifsicle](http://www.lcdf.org/gifsicle/) fork (waiting for [gifsicle#16](https://github.com/kohler/gifsicle/pull/16) to be merged) (`$ brew install giflossy`)\n\nYou can also use the [gifify Docker image](https://github.com/maxogden/gifify-docker) which comes with everything installed.\n\n## Installation\n\n```shell\nnpm install -g gifify\n```\n\n## Command line usage\n\n```shell\n> gifify -h\n\n  Usage: gifify [options] [file]\n\n  Options:\n\n    -h, --help              output usage information\n    -V, --version           output the version number\n    --colors <n>            Number of colors, up to 255, defaults to 80\n    --compress <n>          Compression (quality) level, from 0 (no compression) to 100, defaults to 40\n    --from <position>       Start position, hh:mm:ss or seconds, defaults to 0\n    --fps <n>               Frames Per Second, defaults to 10\n    -o, --output <file>     Output file, defaults to stdout\n    --resize <W:H>          Resize output, use -1 when specifying only width or height. `350:100`, `400:-1`, `-1:200`\n    --reverse               Reverses movie\n    --speed <n>             Movie speed, defaults to 1\n    --subtitles <filepath>  Subtitle filepath to burn to the GIF\n    --text <string>         Add some text at the bottom of the movie\n    --to <position>         End position, hh:mm:ss or seconds, defaults to end of movie\n    --no-loop               Will show every frame once without looping\n```\n\n## Programmatic usage\n\nSee the [example](./example).\n\n```js\nvar fs = require('fs');\nvar gifify = require('gifify');\nvar path = require('path');\n\nvar input = path.join(__dirname, 'movie.mp4');\nvar output = path.join(__dirname, 'movie.gif');\n\nvar gif = fs.createWriteStream(output);\n\nvar options = {\n  resize: '200:-1',\n  from: 30,\n  to: 35\n};\n\ngifify(input, options).pipe(gif);\n```\n\nYou can also pass a [readable stream](http://nodejs.org/api/stream.html#stream_class_stream_readable) to `gifify(stream, opts)`.\n\n## Readable stream input performance\n\nGifify supports streams both on command line (`cat movie.mp4 | gifify -o out.gif`) and in the programmatic API (`gifify(readableStream, opts).pipe(writableStream)`).\n\nWhile it's super useful in some cases, if you have the file on disk already, you better do `gifify movie.mp4 -o out.gif` or `gifify(filePath, opts).pipe(writableStream)`.\n\nWhy? Because piping 3.4GB when you want to cut from 40:20 to 40:22 still takes a loooooot of time and does not give you any performance benefit.\n\nFFmpeg has to read from 0GB -> $START_BYTE_40:20 and discards it. But everything flows in your memory.\n\nWhen using direct file input from command line, we pass the `-i filename` option to FFmpeg and then it's super fast!\n\nBe careful when `|piping`.\n\n## Adding some text\n\nYou can burn some simple text into your GIF:\n\n```shell\ngifify back.mp4 -o back.gif --from 01:48:23.200 --to 01:48:25.300 --text \"What?..What?What?\"\n```\n\nResult:\n\n![back](back.gif)\n\n## Subtitles\n\nYou can burn subtitles into your GIF, it's that easy:\n\n```shell\ngifify 22.mkv -o movie.gif --subtitles 22.ass --from 1995 --to 2002 --resize 600:-1\n```\n\nYou must create new subtitles files, the timecodes for the complete film will not work for a five seconds GIF.\n\nCreate subtitles using [aegisub](http://www.aegisub.org/) and augment the font size for a great effect!\n\nHere's the `22.ass` from the previous command, created with aegisub:\n\n```ass\n[Script Info]\n; Script generated by Aegisub 3.2.1\n; http://www.aegisub.org/\nTitle: Default Aegisub file\nScriptType: v4.00+\nWrapStyle: 0\nScaledBorderAndShadow: yes\nYCbCr Matrix: None\n\n[Aegisub Project Garbage]\n\n[V4+ Styles]\nFormat: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\nStyle: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1\n\n[Events]\nFormat: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\nDialogue: 0,0:00:02.50,0:00:03.97,Default,,0,0,0,,{\\fnLiberation Sans\\fs40}Okay, okay.\nDialogue: 0,0:00:05.00,0:00:06.90,Default,,0,0,0,,{\\fnLiberation Sans\\fs40}Okay. Okay.\n```\n\nResult extracting a GIF from [22 Jump Street](http://www.imdb.com/title/tt2294449/):\n\n![22](22.gif)\n\n## GIF Performance\n\n```\nOn modern hardware GIF is the slowest and most expensive video codec. Can we please allow it to be obsoleted?\n```\n\nhttps://pornel.net/efficient-gifs#sec44\n\nYOLO!\n\n## Giflossy\n\n[Giflossy](https://github.com/pornel/giflossy) is a fork of [gifsicle](http://www.lcdf.org/gifsicle/), gifsicle author is currently [working on](https://github.com/kohler/gifsicle/tree/lossy) integrating the lossy part in gifsicle.\n\nSo in little time we will be able to directly use gifsicle and gifiscle packages.\n\n## Thanks\n\n[jclem/gifify](https://github.com/jclem/gifify/) was a great source of inspiration.\n"
        },
        {
          "name": "back.gif",
          "type": "blob",
          "size": 771.9951171875,
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 4.4501953125,
          "content": "var duration = require('moment').duration;\nvar spawn = require('child_process').spawn;\n\nrequire('moment-duration-format');\n\nvar debug = require('debug')('gifify');\n\nmodule.exports = gifify;\n\nfunction gifify(streamOrFile, opts) {\n  opts = opts || {};\n  if (typeof streamOrFile === 'string') {\n    opts.inputFilePath = streamOrFile;\n  }\n\n  if (opts.fps === undefined) {\n    opts.fps = 10;\n  }\n\n  if (opts.speed === undefined) {\n    opts.speed = 1;\n  }\n\n  if (opts.colors === undefined) {\n    opts.colors = 80;\n  }\n\n  if (opts.compress === undefined) {\n    opts.compress = 40;\n  }\n\n  if (opts.from !== undefined && typeof opts.from === 'number' ||\n    typeof opts.from === 'string' && opts.from.indexOf(':') === -1) {\n    opts.from = parseFloat(opts.from) * 1000;\n  }\n\n  if (opts.to !== undefined && typeof opts.to === 'number' ||\n    typeof opts.to === 'string' && opts.to.indexOf(':') === -1) {\n    opts.to = parseFloat(opts.to) * 1000;\n  }\n\n  var ffmpegArgs = computeFFmpegArgs(opts);\n  var convertArgs = computeConvertArgs(opts);\n  var gifsicleArgs = computeGifsicleArgs(opts);\n\n  var ffmpeg = spawn('ffmpeg', ffmpegArgs);\n  var convert = spawn('convert', convertArgs);\n  var gifsicle = spawn('gifsicle', gifsicleArgs);\n\n  [ffmpeg, convert, gifsicle].forEach(function handleErrors(child) {\n    child.on('error', gifsicle.emit.bind(gifsicle, 'error'));\n    child.stderr.on('data', function gotSomeErrors(buf) {\n      // emit errors on the resolved stream\n      gifsicle.stdout.emit('error', buf.toString());\n    });\n  });\n\n  // https://github.com/joyent/node/issues/8652\n  ffmpeg.stdin.on('error', function ignoreStdinError(){});\n\n  // ffmpeg.stdout.on('error', function() {})\n  // convert.stdin.on('error', function(){});\n  // convert.stdout.on('error', function() {});\n  // gifsicle.stdin.on('error', function() {});\n  // gifsicle.stdout.on('error', function() {})\n\n  if (!opts.inputFilePath) {\n    streamOrFile.pipe(ffmpeg.stdin);\n  }\n\n  ffmpeg.stdout.pipe(convert.stdin);\n  convert.stdout.pipe(gifsicle.stdin);\n  return gifsicle.stdout;\n}\n\nfunction computeFFmpegArgs(opts) {\n  var FFmpegTimeFormat = 'hh:mm:ss.SSS';\n\n  // FFmpeg options\n  // https://www.ffmpeg.org/ffmpeg.html#Options\n  var args = [\n    '-loglevel', 'panic'\n  ];\n\n  // fast seek to opts.from - 500ms\n  // see http://superuser.com/a/704118/35651\n  if (opts.from !== undefined) {\n    args.push('-ss', duration(opts.from).format(FFmpegTimeFormat, {trim: false}));\n  }\n\n  if (opts.inputFilePath) {\n    args.push('-i', opts.inputFilePath);\n  } else {\n    // stdin as input\n    // https://www.ffmpeg.org/ffmpeg-protocols.html#pipe\n    args.push('-i', 'pipe:0');\n  }\n\n  if (opts.to !== undefined) {\n    args.push('-to', duration(opts.to).format(FFmpegTimeFormat, {trim: false}));\n  }\n\n  // framerate\n  args.push('-r', opts.fps);\n\n  if (opts.resize || opts.subtitles || opts.reverse) {\n    // filters\n    args.push('-vf');\n\n    var filters = [];\n    // resize filter\n    if (opts.resize) {\n      filters.push('scale=' + opts.resize);\n    }\n\n    if (opts.subtitles !== undefined) {\n      filters.push('subtitles=' + opts.subtitles);\n    }\n\n    if (opts.reverse !== undefined) {\n      filters.push('reverse');\n    }\n\n    args.push(filters.join(','));\n  }\n\n  // encoding filter and codec\n  args.push('-f', 'image2pipe', '-vcodec', 'ppm');\n\n  // force video sync so that even if nothing moves in the video, we get a constant frame rate\n  // seems buggy, not what I want, still, some videos are failing to encode\n  // args.push('-vsync', '1');\n\n  // write on stdout\n  args.push('pipe:1');\n\n  debug('ffmpeg args: %j', args);\n\n  return args;\n}\n\nfunction computeConvertArgs(opts) {\n  // Convert options\n  // http://www.imagemagick.rg/script/convert.php#options\n  var args = [\n    '-',\n    '+dither',\n    '-layers', 'Optimize'\n  ];\n\n  if (opts.text) {\n    args.push(\n      '-gravity', 'South',\n      '-fill', 'white',\n      '-stroke', 'black',\n      '-strokewidth', '1',\n      '-pointsize', '40',\n      '-annotate', '+20+20', opts.text\n    );\n  }\n\n  args.push('gif:-');\n\n  debug('convert args: %j', args);\n\n  return args;\n}\n\nfunction computeGifsicleArgs(opts) {\n  // Gifsicle options\n  // http://www.lcdf.org/gifsicle/man.html\n  // --lossy is not yet into master, https://github.com/kohler/gifsicle/pull/16\n  var args = [\n    '-O3',\n    '--lossy=' + opts.compress * 2,\n    '--colors=' + opts.colors,\n    '--delay', Math.round(100 / opts.fps / opts.speed),\n    '--no-warnings'\n  ];\n\n  if (opts.loop === false) {\n    args.push('--no-loopcount');\n  }\n\n  debug('gifsicle args: %j', args);\n\n  return args;\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.6845703125,
          "content": "{\n  \"name\": \"gifify\",\n  \"version\": \"2.4.3\",\n  \"description\": \"Convert any video file to an optimized animated GIF\",\n  \"main\": \"index.js\",\n  \"bin\": {\n    \"gifify\": \"bin/gifify\"\n  },\n  \"scripts\": {\n    \"example\": \"node ./example/index\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/vvo/gifify.git\"\n  },\n  \"author\": \"Vincent Voyer <vincent@zeroload.net>\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/vvo/gifify/issues\"\n  },\n  \"homepage\": \"https://github.com/vvo/gifify\",\n  \"dependencies\": {\n    \"colors\": \"^1.1.2\",\n    \"commander\": \"^2.9.0\",\n    \"debug\": \"^2.5.2\",\n    \"moment\": \"^2.17.1\",\n    \"moment-duration-format\": \"^1.3.0\",\n    \"promise\": \"^7.1.1\"\n  }\n}\n"
        },
        {
          "name": "screencast.gif",
          "type": "blob",
          "size": 1110.9228515625,
          "content": null
        },
        {
          "name": "yarn.lock",
          "type": "blob",
          "size": 1.52734375,
          "content": "# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# yarn lockfile v1\n\n\nasap@~2.0.3:\n  version \"2.0.5\"\n  resolved \"https://registry.yarnpkg.com/asap/-/asap-2.0.5.tgz#522765b50c3510490e52d7dcfe085ef9ba96958f\"\n\ncolors@^1.1.2:\n  version \"1.1.2\"\n  resolved \"https://registry.yarnpkg.com/colors/-/colors-1.1.2.tgz#168a4701756b6a7f51a12ce0c97bfa28c084ed63\"\n\ncommander@^2.9.0:\n  version \"2.9.0\"\n  resolved \"https://registry.yarnpkg.com/commander/-/commander-2.9.0.tgz#9c99094176e12240cb22d6c5146098400fe0f7d4\"\n  dependencies:\n    graceful-readlink \">= 1.0.0\"\n\ndebug@^2.5.2:\n  version \"2.6.3\"\n  resolved \"https://registry.yarnpkg.com/debug/-/debug-2.6.3.tgz#0f7eb8c30965ec08c72accfa0130c8b79984141d\"\n  dependencies:\n    ms \"0.7.2\"\n\n\"graceful-readlink@>= 1.0.0\":\n  version \"1.0.1\"\n  resolved \"https://registry.yarnpkg.com/graceful-readlink/-/graceful-readlink-1.0.1.tgz#4cafad76bc62f02fa039b2f94e9a3dd3a391a725\"\n\nmoment-duration-format@^1.3.0:\n  version \"1.3.0\"\n  resolved \"https://registry.yarnpkg.com/moment-duration-format/-/moment-duration-format-1.3.0.tgz#541771b5f87a049cc65540475d3ad966737d6908\"\n\nmoment@^2.17.1:\n  version \"2.18.1\"\n  resolved \"https://registry.yarnpkg.com/moment/-/moment-2.18.1.tgz#c36193dd3ce1c2eed2adb7c802dbbc77a81b1c0f\"\n\nms@0.7.2:\n  version \"0.7.2\"\n  resolved \"https://registry.yarnpkg.com/ms/-/ms-0.7.2.tgz#ae25cf2512b3885a1d95d7f037868d8431124765\"\n\npromise@^7.1.1:\n  version \"7.1.1\"\n  resolved \"https://registry.yarnpkg.com/promise/-/promise-7.1.1.tgz#489654c692616b8aa55b0724fa809bb7db49c5bf\"\n  dependencies:\n    asap \"~2.0.3\"\n"
        }
      ]
    }
  ]
}