{
  "metadata": {
    "timestamp": 1736562670968,
    "page": 177,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ljianshu/Blog",
      "stars": 7920,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".DS_Store",
          "type": "blob",
          "size": 8.00390625,
          "content": null
        },
        {
          "name": ".history",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.666015625,
          "content": "# 博客目录\n努力打造一系列适合初中级工程师能够看得懂的优质文章，今年博客侧重于框架、TS和构建工具等底层原理分析，如果想第一时间获取文章，欢迎关注**我的公众号：前端工匠，接下去的路我们一起走！**  欢迎添加我的个人微信frontJS，**获取大厂面试题及其答案**\n\n### 版权声明：本文为博主原创文章，未经博主允许不得转载。\n\n- [掘金博客(全集)](https://juejin.im/user/5a9a9cdcf265da238b7d771c)\n\n- [segmentFault博客(精华)](https://segmentfault.com/u/langlixingzhou/articles)\n\n- 想加入**前端交流群**，跟诸多一线大厂的大佬交流学习，先关注「前端工匠」公众号👉点击“进群交流”，备注git,我拉你入群\t\n\n\n### |  浏览器相关\n#### 1.[深入浅出浏览器渲染原理](https://github.com/ljianshu/Blog/issues/51)\n#### 2.[深入了解浏览器存储](https://github.com/ljianshu/Blog/issues/25)\n#### 3.[深入理解浏览器的缓存机制](https://github.com/ljianshu/Blog/issues/23)\n#### 4.[从URL输入到页面展现到底发生什么？](https://github.com/ljianshu/Blog/issues/24)\n### |  Javascript\n#### 1.[前端模块化详解(完整版)](https://github.com/ljianshu/Blog/issues/48)\n#### 2.[九种跨域方式实现原理（完整版）](https://github.com/ljianshu/Blog/issues/55)\n#### 3.[JavaScript的数据类型及其检测](https://github.com/ljianshu/Blog/issues/4)\n#### 4.[JavaScript数据类型转换](https://github.com/ljianshu/Blog/issues/1)\n#### 5.[深入理解JavaScript作用域和作用域链](https://github.com/ljianshu/Blog/issues/59)\n#### 6.[深入理解JavaScript执行上下文和执行栈](https://github.com/ljianshu/Blog/issues/60)\n#### 7.[细说数组常用遍历的方法](https://github.com/ljianshu/Blog/issues/31)\n#### 8.[浅拷贝与深拷贝](https://github.com/ljianshu/Blog/issues/5)\n#### 9.[深入浅出Javascript闭包](https://github.com/ljianshu/Blog/issues/6)\n#### 10.[你还没搞懂this？](https://github.com/ljianshu/Blog/issues/7)\n#### 11.[原型与原型链详解](https://github.com/ljianshu/Blog/issues/18)\n#### 12.[Dom事件机制](https://github.com/ljianshu/Blog/issues/44)\n#### 13.[JavaScript常见的六种继承方式](https://github.com/ljianshu/Blog/issues/20)\n#### 14.[浏览器与Node的事件循环(Event Loop)有何区别?](https://github.com/ljianshu/Blog/issues/54)\n#### 15.[JavaScript中的垃圾回收和内存泄漏](https://github.com/ljianshu/Blog/issues/65)\n#### 16.[javascript函数式编程](https://github.com/ljianshu/Blog/issues/72)\n#### 17.[慎用Number.toFixed()](https://github.com/ljianshu/Blog/issues/95)\n#### 18.[你会用JSON.stringify()?](https://github.com/ljianshu/Blog/issues/97)\n### |  ES6+\n#### 1.[ES6核心特性](https://github.com/ljianshu/Blog/issues/10)\n#### 2.[ES7、ES8、ES9、ES10新特性](https://github.com/ljianshu/Blog/issues/76)\n#### 3.[ES2020新特性](https://github.com/ljianshu/Blog/issues/79)\n#### 4.[ES2021新特性](https://github.com/ljianshu/Blog/issues/92)\n#### 5.[7个令人兴奋的 JavaScript 新特性](https://github.com/ljianshu/Blog/issues/78)\n#### 6.[你真的懂Promise吗](https://github.com/ljianshu/Blog/issues/81)\n#### 7.[异步解决方案--Promise与Await](https://github.com/ljianshu/Blog/issues/13)\n#### 8.[JS 异步编程六种方案](https://github.com/ljianshu/Blog/issues/53)\n#### 9.[ES6迭代器和生成器](https://github.com/ljianshu/Blog/issues/42)\n\n### |  CSS\n#### 1.[如何居中一个元素（终结版)](https://github.com/ljianshu/Blog/issues/29)\n#### 2.[关于响应式布局，你必须要知道的](https://github.com/ljianshu/Blog/issues/38)\n#### 3.[深入理解BFC](https://github.com/ljianshu/Blog/issues/15)\n#### 4.[如何清除浮动](https://github.com/ljianshu/Blog/issues/16)\n#### 5.[LESS即学即用](https://github.com/ljianshu/Blog/issues/19)\n#### 6.[几种常见的CSS布局](https://github.com/ljianshu/Blog/issues/40)\n#### 7.[实现三栏布局的几种方法](https://github.com/ljianshu/Blog/issues/14)\n\n### |  Http协议与数据请求\n#### 1.[关于Http协议，你必须要知道的](https://github.com/ljianshu/Blog/issues/22)\n#### 2.[深入理解HTTPS工作原理](https://github.com/ljianshu/Blog/issues/50)\n#### 3.[解读HTTP/2 及 HTTP/3特性](https://github.com/ljianshu/Blog/issues/57)\n#### 4.[Web 实时推送技术的总结](https://github.com/ljianshu/Blog/issues/58)\n#### 5.[TCP和UDP比较](https://github.com/ljianshu/Blog/issues/61)\n#### 6.[Ajax原理一篇就够了](https://github.com/ljianshu/Blog/issues/45)\n#### 7.[Ajax请求后台数据](https://github.com/ljianshu/Blog/issues/46)\n#### 8.[fetch 如何请求数据](https://github.com/ljianshu/Blog/issues/47)\n\n### |  页面性能优化与安全\n#### 1.[页面性能优化办法有哪些](https://github.com/ljianshu/Blog/issues/9)\n#### 2.[懒加载和预加载](https://github.com/ljianshu/Blog/issues/8)\n#### 3.[函数节流和防抖](https://github.com/ljianshu/Blog/issues/43).\n#### 4.[常见六大Web安全攻防解析](https://github.com/ljianshu/Blog/issues/56)\n\n### |  Vue全家桶\n#### 1.[Vue3.2 有哪些新变化？](https://github.com/ljianshu/Blog/issues/109)\n#### 2.[从头开始学习Vuex](https://github.com/ljianshu/Blog/issues/36)\n#### 3.[从头开始学习vue-router](https://github.com/ljianshu/Blog/issues/39)\n#### 4.[vue组件三大核心概念](https://github.com/ljianshu/Blog/issues/67)\n#### 5.[vue组件间通信六种方式（完整版）](https://github.com/ljianshu/Blog/issues/66)\n#### 6.[vue计算属性和watch的区别](https://github.com/ljianshu/Blog/issues/68)\n#### 7.[揭秘Vue中的Virtual Dom](https://github.com/ljianshu/Blog/issues/69) \n#### 8.[深入理解vue响应式原理](https://github.com/ljianshu/Blog/issues/70)\n#### 9.[令人眼前一亮的Vue实战技巧](https://github.com/ljianshu/Blog/issues/71)\n\n### |  工具\n#### 1.[团队如何统一代码规范？](https://github.com/ljianshu/Blog/issues/114)\n#### 2.[让开发效率“飞起”的VS Code 插件](https://github.com/ljianshu/Blog/issues/80)\n\n### |  面试\n#### 1.[Javascript 面试核心考点(基础版)](https://github.com/ljianshu/Blog/issues/63)\n### |  其他\n#### 1.[写技术博客那点事](https://github.com/ljianshu/Blog/issues/62)\n\n\n### |  备战大厂面试\n\n- 大厂面试题及其答案（四份PDF囊括上千经典题）\n- vue/react/webpack源码视频深度讲解\n- JavaScript/vue 常见面试题视频讲解\n- JavaScript版数据结构与算法视频资料\n- 简历模版等等\n\n感兴趣的扫描下方微信二维码（frontJS）免费找我领取，备注：git,希望对你们有些许帮助！有时候图片显示不出来，直接加frontJS\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/11390a27203f4d8baca25de05d84a760~tplv-k3u1fbpfcp-watermark.image)\n\n"
        },
        {
          "name": "Web Workers",
          "type": "tree",
          "content": null
        },
        {
          "name": "oop继承六种方式.html",
          "type": "blob",
          "size": 4.775390625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>JavaScript继承例子</title>\r\n</head>\r\n\r\n<body>\r\n  <script>\r\n    // 原型链继承\r\n    // function Person(name, age) {\r\n    //     this.name = name,\r\n    //     this.age = age,\r\n    //     this.setName = function () { }\r\n    // }\r\n    // Person.prototype.setAge = function () { }\r\n    // function Student(name, age, price) {\r\n    //     Person.call(this, name, age)\r\n    //     this.price = price\r\n    // }\r\n    // var s1 = new Student('Tom', 20, 15000)\r\n    // console.log(s1)\r\n\r\n    // 借用构造函数继承\r\n    // function Person(name, age) {\r\n    //     this.name = name,\r\n    //         this.age = age\r\n    // }\r\n    // Person.prototype.setAge = function () {\r\n    //     console.log(\"111\")\r\n    // }\r\n    // function Student(price) {\r\n    //     this.price = price\r\n    //     this.setScore = function () { }\r\n    // }\r\n    // Student.prototype.sayHello = function () { }\r\n    // Student.prototype = new Person\r\n    // Student.prototype.sayHello = function () { }\r\n    // var s1 = new Student(15000)\r\n    // var s2 = new Student(14000)\r\n    // console.log(s1, s2)\r\n    // s1.play.push(4)\r\n    // console.log(s1.setAge, s2.setAge)\r\n    // console.log(s1.__proto__ === s2.__proto__)\r\n    // console.log(s1.__proto__.__proto__ === s2.__proto__.__proto__)\r\n    // console.log(s1.__proto__.__proto__.__proto__ === Object.prototype)\r\n\r\n    // 原型链+借用构造函数的组合继承\r\n    // function Person(name, age) {\r\n    //     this.name = name,\r\n    //         this.age = age,\r\n    //         this.setAge = function () { }\r\n    // }\r\n    // Person.prototype.setAge = function () {\r\n    //     console.log(\"111\")\r\n    // }\r\n    // var p1 = new Person('jack', 15)\r\n    // function Student(name, age, price) {\r\n    //     Person.call(this, name, age)\r\n    //     this.price = price\r\n    //     this.setScore = function () { }\r\n    // }\r\n    // Student.prototype = new Person()\r\n    // Student.prototype.constructor = Student//组合继承也是需要修复构造函数指向的\r\n    // Student.prototype.sayHello = function () { }\r\n    // var s1 = new Student('Tom', 20, 15000)\r\n    // var s2 = new Student('Jack', 22, 14000)\r\n    // console.log(s1.constructor) //Student\r\n    // console.log(p1.constructor) //Person\r\n\r\n    //  组合继承优化1\r\n    // function Person(name, age) {\r\n    //     this.name = name,\r\n    //         this.age = age,\r\n    //         this.setAge = function () { }\r\n    // }\r\n    // Person.prototype.setAge = function () {\r\n    //     console.log(\"111\")\r\n    // }\r\n    // function Student(name, age, price) {\r\n    //     Person.call(this, name, age)\r\n    //     this.price = price\r\n    //     this.setScore = function () { }\r\n    // }\r\n    // Student.prototype = Person.prototype\r\n    // Student.prototype.sayHello = function () { }\r\n    // var s1 = new Student('Tom', 20, 15000)\r\n    // console.log(s1)\r\n    // console.log(s1 instanceof Student, s1 instanceof Person)//true true\r\n    // console.log(s1.constructor)//Person\r\n\r\n    //组合继承优化2 \r\n    function Person(name, age) {\r\n      this.name = name,\r\n        this.age = age\r\n    }\r\n    Person.prototype.setAge = function () {\r\n      console.log(\"111\")\r\n    }\r\n\r\n    function Student(name, age, price) {\r\n      Person.call(this, name, age)\r\n      this.price = price\r\n      this.setScore = function () { }\r\n    }\r\n    Student.prototype = Object.create(Person.prototype)\r\n    Student.prototype.constructor = Student\r\n    var s1 = new Student('Tom', 20, 15000)\r\n    console.log(s1 instanceof Student, s1 instanceof Person) // true true\r\n    console.log(s1.constructor) //Student\r\n    console.log(s1)\r\n\r\n        //ES6 class继承\r\n        // class Person {\r\n        //     //调用类的构造方法\r\n        //     constructor(name, age) {\r\n        //         this.name = name\r\n        //         this.age = age\r\n        //     }\r\n        //     //定义一般的方法\r\n        //     showName() {\r\n        //         console.log(\"调用父类的方法\")\r\n        //         console.log(this.name, this.age);\r\n        //     }\r\n        // }\r\n        // let p1 = new Person('kobe', 39)\r\n        // console.log(p1)\r\n        // //定义一个子类\r\n        // class Student extends Person {\r\n        //     constructor(name, age, salary) {\r\n        //         super(name, age)\r\n        //         this.salary = salary\r\n        //     }\r\n        //     showName() { //在子类自身定义方法\r\n        //         console.log(\"调用子类的方法\")\r\n        //         console.log(this.name, this.age, this.salary);\r\n        //     }\r\n        // }\r\n        // let s1 = new Student('wade', 38, 1000000000)\r\n        // let s2 = new Student('kobe', 40, 3000000000)\r\n        // console.log(s1.showName === s2.showName)//true\r\n        // console.log(s1)\r\n        // s1.showName()\r\n  </script>\r\n</body>\r\n\r\n</html>"
        },
        {
          "name": "vue2.0学习",
          "type": "tree",
          "content": null
        },
        {
          "name": "vuex-demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "websocket",
          "type": "tree",
          "content": null
        },
        {
          "name": "三栏布局",
          "type": "tree",
          "content": null
        },
        {
          "name": "多种跨域方式",
          "type": "tree",
          "content": null
        },
        {
          "name": "文章中的思维导图",
          "type": "tree",
          "content": null
        },
        {
          "name": "模块化",
          "type": "tree",
          "content": null
        },
        {
          "name": "消除不同的浏览器在默认样式上不同表现reset.css",
          "type": "blob",
          "size": 1.6728515625,
          "content": "@charset \"utf-8\";html{background-color:#fff;color:#000;font-size:12px}\nbody,ul,ol,dl,dd,h1,h2,h3,h4,h5,h6,figure,form,fieldset,legend,input,textarea,button,p,blockquote,th,td,pre,xmp{margin:0;padding:0}\nbody,input,textarea,button,select,pre,xmp,tt,code,kbd,samp{line-height:1.5;font-family:tahoma,arial,\"Hiragino Sans GB\",simsun,sans-serif}\nh1,h2,h3,h4,h5,h6,small,big,input,textarea,button,select{font-size:100%}\nh1,h2,h3,h4,h5,h6{font-family:tahoma,arial,\"Hiragino Sans GB\",\"微软雅黑\",simsun,sans-serif}\nh1,h2,h3,h4,h5,h6,b,strong{font-weight:normal}\naddress,cite,dfn,em,i,optgroup,var{font-style:normal}\ntable{border-collapse:collapse;border-spacing:0;text-align:left}\ncaption,th{text-align:inherit}\nul,ol,menu{list-style:none}\nfieldset,img{border:0}\nimg,object,input,textarea,button,select{vertical-align:middle}\narticle,aside,footer,header,section,nav,figure,figcaption,hgroup,details,menu{display:block}\naudio,canvas,video{display:inline-block;*display:inline;*zoom:1}\nblockquote:before,blockquote:after,q:before,q:after{content:\"\\0020\"}\ntextarea{overflow:auto;resize:vertical}\ninput,textarea,button,select,a{outline:0 none;border: none;}\nbutton::-moz-focus-inner,input::-moz-focus-inner{padding:0;border:0}\nmark{background-color:transparent}\na,ins,s,u,del{text-decoration:none}\nsup,sub{vertical-align:baseline}\nhtml {overflow-x: hidden;height: 100%;font-size: 50px;-webkit-tap-highlight-color: transparent;}\nbody {font-family: Arial, \"Microsoft Yahei\", \"Helvetica Neue\", Helvetica, sans-serif;color: #333;font-size: .28em;line-height: 1;-webkit-text-size-adjust: none;}\nhr {height: .02rem;margin: .1rem 0;border: medium none;border-top: .02rem solid #cacaca;}\na {color: #25a4bb;text-decoration: none;}\n"
        },
        {
          "name": "移动端1px像素.css",
          "type": "blob",
          "size": 4.609375,
          "content": "@charset \"utf-8\";\n.border,\n.border-top,\n.border-right,\n.border-bottom,\n.border-left,\n.border-topbottom,\n.border-rightleft,\n.border-topleft,\n.border-rightbottom,\n.border-topright,\n.border-bottomleft {\n    position: relative;\n}\n.border::before,\n.border-top::before,\n.border-right::before,\n.border-bottom::before,\n.border-left::before,\n.border-topbottom::before,\n.border-topbottom::after,\n.border-rightleft::before,\n.border-rightleft::after,\n.border-topleft::before,\n.border-topleft::after,\n.border-rightbottom::before,\n.border-rightbottom::after,\n.border-topright::before,\n.border-topright::after,\n.border-bottomleft::before,\n.border-bottomleft::after {\n    content: \"\\0020\";\n    overflow: hidden;\n    position: absolute;\n}\n/* border\n * 因，边框是由伪元素区域遮盖在父级\n * 故，子级若有交互，需要对子级设置\n * 定位 及 z轴\n */\n.border::before {\n    box-sizing: border-box;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    border: 1px solid #eaeaea;\n    transform-origin: 0 0;\n}\n.border-top::before,\n.border-bottom::before,\n.border-topbottom::before,\n.border-topbottom::after,\n.border-topleft::before,\n.border-rightbottom::after,\n.border-topright::before,\n.border-bottomleft::before {\n    left: 0;\n    width: 100%;\n    height: 1px;\n}\n.border-right::before,\n.border-left::before,\n.border-rightleft::before,\n.border-rightleft::after,\n.border-topleft::after,\n.border-rightbottom::before,\n.border-topright::after,\n.border-bottomleft::after {\n    top: 0;\n    width: 1px;\n    height: 100%;\n}\n.border-top::before,\n.border-topbottom::before,\n.border-topleft::before,\n.border-topright::before {\n    border-top: 1px solid #eaeaea;\n    transform-origin: 0 0;\n}\n.border-right::before,\n.border-rightbottom::before,\n.border-rightleft::before,\n.border-topright::after {\n    border-right: 1px solid #eaeaea;\n    transform-origin: 100% 0;\n}\n.border-bottom::before,\n.border-topbottom::after,\n.border-rightbottom::after,\n.border-bottomleft::before {\n    border-bottom: 1px solid #eaeaea;\n    transform-origin: 0 100%;\n}\n.border-left::before,\n.border-topleft::after,\n.border-rightleft::after,\n.border-bottomleft::after {\n    border-left: 1px solid #eaeaea;\n    transform-origin: 0 0;\n}\n.border-top::before,\n.border-topbottom::before,\n.border-topleft::before,\n.border-topright::before {\n    top: 0;\n}\n.border-right::before,\n.border-rightleft::after,\n.border-rightbottom::before,\n.border-topright::after {\n    right: 0;\n}\n.border-bottom::before,\n.border-topbottom::after,\n.border-rightbottom::after,\n.border-bottomleft::after {\n    bottom: 0;\n}\n.border-left::before,\n.border-rightleft::before,\n.border-topleft::after,\n.border-bottomleft::before {\n    left: 0;\n}\n@media (max--moz-device-pixel-ratio: 1.49), (-webkit-max-device-pixel-ratio: 1.49), (max-device-pixel-ratio: 1.49), (max-resolution: 143dpi), (max-resolution: 1.49dppx) {\n    /* 默认值，无需重置 */\n}\n@media (min--moz-device-pixel-ratio: 1.5) and (max--moz-device-pixel-ratio: 2.49), (-webkit-min-device-pixel-ratio: 1.5) and (-webkit-max-device-pixel-ratio: 2.49), (min-device-pixel-ratio: 1.5) and (max-device-pixel-ratio: 2.49), (min-resolution: 144dpi) and (max-resolution: 239dpi), (min-resolution: 1.5dppx) and (max-resolution: 2.49dppx) {\n    .border::before {\n        width: 200%;\n        height: 200%;\n        transform: scale(.5);\n    }\n    .border-top::before,\n    .border-bottom::before,\n    .border-topbottom::before,\n    .border-topbottom::after,\n    .border-topleft::before,\n    .border-rightbottom::after,\n    .border-topright::before,\n    .border-bottomleft::before {\n        transform: scaleY(.5);\n    }\n    .border-right::before,\n    .border-left::before,\n    .border-rightleft::before,\n    .border-rightleft::after,\n    .border-topleft::after,\n    .border-rightbottom::before,\n    .border-topright::after,\n    .border-bottomleft::after {\n        transform: scaleX(.5);\n    }\n}\n@media (min--moz-device-pixel-ratio: 2.5), (-webkit-min-device-pixel-ratio: 2.5), (min-device-pixel-ratio: 2.5), (min-resolution: 240dpi), (min-resolution: 2.5dppx) {\n    .border::before {\n        width: 300%;\n        height: 300%;\n        transform: scale(.33333);\n    }\n    .border-top::before,\n    .border-bottom::before,\n    .border-topbottom::before,\n    .border-topbottom::after,\n    .border-topleft::before,\n    .border-rightbottom::after,\n    .border-topright::before,\n    .border-bottomleft::before {\n        transform: scaleY(.33333);\n    }\n    .border-right::before,\n    .border-left::before,\n    .border-rightleft::before,\n    .border-rightleft::after,\n    .border-topleft::after,\n    .border-rightbottom::before,\n    .border-topright::after,\n    .border-bottomleft::after {\n        transform: scaleX(.33333);\n    }\n}\n"
        }
      ]
    }
  ]
}