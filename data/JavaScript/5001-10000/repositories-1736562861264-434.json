{
  "metadata": {
    "timestamp": 1736562861264,
    "page": 434,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "node-config/node-config",
      "stars": 6306,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.0224609375,
          "content": "[*.js]\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0400390625,
          "content": ".project\nnode_modules\nnpm-debug.log\n.idea"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.0439453125,
          "content": "node_modules\ntest\ntools\nISSUE_TEMPLATE.md\n.*\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0859375,
          "content": "# Prevent accidental publish to private repository\nregistry=https://registry.npmjs.org/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1103515625,
          "content": "language: node_js\nsudo: false\nbefore_install:\n  - npm update -g npm\nnode_js:\n  - \"10\"\n  - \"12\"\n  - \"14\"\n  - \"15\"\n"
        },
        {
          "name": "History.md",
          "type": "blob",
          "size": 19.0693359375,
          "content": "Beyond 3.3.7\n============\nWe've moved this content to [Github Releases](https://github.com/node-config/node-config/releases).\n\nFuture release notes are managed there.\n\n3.3.7 / 2022-01-11\n==================\n\n * No new changes. 3.3.6 was not published to NPM in versioning mix-up.\n * Release notes are moving to Github Releases page going forward.\n\n3.3.6 / 2021-03-08\n==================\n\n* Added publishConfig element to package.json to prevent publishing to the wrong repository - @lorenwest\n\n3.3.5 / 2021-03-05\n==================\n\n* FIX [#628](https://github.com/node-config/node-config/issues/628) Uncaught ReferenceError: node_env_var_name is not defined @prnake\n\n3.3.4 / 2021-02-26\n==================\n\n* FIX #517 0 loadFileConfigs incorrectly adds to getConfigSources @NguyenMatthieu\n\n3.3.3 / 2020-11-26\n==================\n\n* FIX #460 - Strict mode warning refer to appropriate env variable @iCodeOkay\n* Use Buffer.alloc and Buffer.from instead of contrsuctor @Fcmam5\n* Add support for experimental .cjs modules @lenkan\n\n\n3.3.2 / 2020-09-24\n==================\n\n* Fixed issue with Buffers in config throwing error in util.makeImmutable (#608) - Michal Wadas\n* Added boolean and numeric types to custom environment variables - Ankur Narkhede @ankurnarkhede\n\n3.3.1 / 2020-03-25\n==================\n\n  * Fix security vulnerability in json5 dependency - @twkel\n\n3.3.0 / 2020-02-26\n==================\n\n  * Allow all defined values in `substituteDeep` - @fostyfost\n\n3.2.6 / 2020-02-21\n==================\n\n  * Updated copyright date ranges\n\n3.2.5 / 2020-01-16\n==================\n\n  * Fixed issue with getCustomEnvVars and multiple config dirs #585 - @dekelev\n\n3.2.4 / 2019-10-25\n==================\n\n  * Improved error handling of env variables value parse - @leonardovillela\n\n3.2.3 / 2019-10-03\n==================\n\n  * Fixed strict mode warning #460 - @fedulovivan\n\n3.2.2 / 2019-07-20\n==================\n\n  * Fixed delimiter bug in configDirs to match O/S delimiter - @iMoses\n\n3.2.1 / 2019-07-18\n==================\n\n  * Fixed TypeError: obj.toString is not a function - @leosuncin\n\n3.2.0 / 2019-07-11\n==================\n\n  * Asynchronous configs - @iMoses\n  * Multiple config directories - @iMoses\n  * Improved parser support - @iMoses\n\n3.1.0 / 2019-04-07\n==================\n\n  * Support of module.exports syntax for TS config files @keenondrums\n\n3.0.1 / 2018-12-16\n==================\n\n  * Fixed bug where dot notation extended own key @exogen\n\n3.0.0 / 2018-11-20\n==================\n\n   * Ensure config array items and objects are sealed @fgheorghe\n     - This required a major version bump in case someone\n     - relied on the ability to mutate non-sealed data.\n\n\n2.0.2 / 2018-08-28\n==================\n\n   * Added dot notation to setModuleDefaults - bertho-zero\n   * Updated copyright year - JemiloII\n\n2.0.1 / 2018-07-26\n==================\n\n  * Removed deprecated code - jpwilliams\n\n2.0.0 / 2018-07-26\n==================\n\nPotential for backward incompatibility requiring a major version bump.\n\nSafe to upgrade to major version 2 if you're using a recent NodeJS version\nand you're not trying to mutate config arrays.\n\n  * Added array immutability - jacobemerick\n  * Removed Node V.4 support\n\n1.31.0 / 2018-05-22\n===================\n\n  * Load new coffeescript module instead of coffee-script - bastbijl\n\n1.30.0 / 2018-02-26\n===================\n\n  * Support for nested raw() in javascript configurations - patrickpilch\n\n1.29.4 / 2018-02-03\n===================\n\n  * Re-publish - last changes didn't make it to npm\n\n1.29.3 / 2018-02-03\n===================\n\n  * Added soft dependencies so transpilers don't include everything - gewentao\n\n1.29.2 / 2018-01-12\n===================\n\n  * Patch, and added a test to ts-node - electroma\n\n1.29.1 / 2018-01-07\n===================\n\n  * Prevent re-registration of ts-node - electroma\n  * Fixed bug in contributor table tool - lorenwest\n\n1.29.0 / 2017-12-26\n===================\n\n  * Update docs for JavaScript-formatted config files and link them from the README - markstos\n  * Fixed 'hostname' value selection when there is no environment variable for that - wmangelardo\n\n\n1.28.1 / 2017-11-09\n===================\n\n  * add nodejs9 to travisci - jfelege\n\n1.28.0 / 2017-11-07\n===================\n\n  * allow overrides of `NODE_ENV` with `NODE_CONFIG_ENV` - jfelege\n\n1.27.0 / 2017-10-17\n===================\n\n  * Add method to output plain JS object - willsoto\n  * Updated Node versions in Travis CI - lorenwest\n\n1.26.2 / 2017-08-11\n===================\n\n  * Update supported nodejs platforms - jfelege\n\n1.26.1 / 2017-05-03\n===================\n\n  * Fix: failed while merging from RegExp @XadillaX\n  * Chore: reduce package size. @evilebottnawi\n\n1.26.0 / 2017-03-30\n===================\n\n  * Added tests for extendDeep @IvanVergiliev\n  * Added TypeScript support @cypherq\n  * Update config.js with correctly cased type def @ScionOfBytes\n\n1.25.1 / 2017-02-01\n===================\n\n  * Fixed undefined CONFIG_SKIP_GITCRYPT variable @lorenwest\n\n1.25.0 / 2017-01-31\n===================\n\n  * Add support for configuration files stored with git-crypt @cunneen\n\n1.24.0 / 2016-11-02\n===================\n\n  * Prevent accidental publish to private repository\n\n1.23.0 / 2016-11-02\n===================\n\n  * Re-publishing because npmjs didn't see 1.22\n\n1.22.0 / 2016-10-25\n===================\n\n  * original/previous value for deferredConfig @simon-scherzinger\n  * util.loadFileConfigs: support optional source dir @wmertens\n  * Adding raw wrapper to prevent object modification in config @patrickpilch\n\n1.21.0 / 2016-06-01\n===================\n\n  * Added XML configuration @tusharmath\n\n1.20.4 / 2016-05-23\n===================\n\n  * Fixed a regression with extending prototype methods @tahoemph\n\n1.20.3 / 2016-05-18\n===================\n\n  * Fixed a regression with 1.20.2 @kgoerlitz\n  * Added test to prevent this in the future @kgoerlitz\n\n1.20.2 / 2016-05-17\n===================\n\n  * node v6 compatiblity: remove deprecated __lookupGetter__ use - @thetalecrafter\n  * node v6 compatiblity: handle different SyntaxError format - @pwwolf\n\n1.20.1 / 2016-04-08\n===================\n\n  * Simplify truthiness check - @markstos\n  * Remove errant console.log - @markstos\n\n1.20.0 / 2016-04-06\n===================\n\n  * Typo fix @jchip\n  * Handle null sub-object @wmertens\n  * Bug fix for NODE_CONFIG_STRICT_MODE check @markstos\n  * Ran node security check on 4/6/2016 with the following output\n\n    $ nsp check\n    (+) No known vulnerabilities found\n\n1.19.0 / 2016-01-08\n===================\n\n  * Resolve defered values in predictable order for consistent results. \n    Fixes #265 @elliotttf @markstos\n\n1.18.0 / 2015-11-17\n===================\n\n  * More robust handling of JSON @elliotttf\n\n1.17.1 / 2015-11-17\n===================\n\n  * Patch release for regex bugfix\n \n1.17.0 / 2015-11-17\n===================\n\n  * Update warning about missing configuration files to mention how to disable the warning #245 @markstos \n  * Upgrade to run CI with travis containers @lorenwest\n  * Fixed bug with comments and inline json @elliotttf\n\n1.16.0 / 2015-09-03\n===================\n\n  * Change == to === to tighten equality tests #242 @wgpsutherland\n  * Fix attachProtoDeep for setModuleDefaults #243 @benkroeger\n\n1.15.0 / 2015-07-30\n===================\n\n  * Added full hostname in addition to first segment @vicary\n\n1.14.0 / 2015-06-02\n===================\n\n  * Added JSON parsing to custom environment variables @leachiM2k\n  * Handle unicode BOM characters @johndkane\n\n1.13.0 / 2015-05-05\n===================\n\n  * Updated CSON library @dsimidzija\n\n1.12.0 / 2015-02-19\n===================\n\n  * Better date merging @axelhzf\n\n1.11.0 / 2015-01-14\n===================\n\n  * Added Hjson support @laktak\n\n1.10.0 / 2015-01-06\n===================\n\n  * Added TOML support (@jasonhansel)\n  * Another year - changed copyright messages for 2015\n  * Updated contributors list\n  * New Strict Mode added in 1.9.0 is now documented. (@markstos)\n  * has() now returns false when given an undefined or null key to look up. Previously it threw an exception. (@markstos)\n  * When get() is given an undefined or null key to look up, it now throws a more helpful diagnostic (@robludwig, @markstos)\n\n1.9.0 / 2014-12-08\n==================\n\n  * New strictness checks have been added to ensure the expected configuration has been loaded. Warnings are now thrown in these cases. If NODE_CONFIG_STRICT_MODE is set, exceptions are thrown instead. (@markstos)\n    * There must be an explicit config file matching `NODE_ENV` if `NODE_ENV` is set.\n    * There must be an explicit config file matching `NODE_APP_INSTANCE` if `NODE_APP_INSTANCE` is set\n    * `NODE_ENV` must not match 'default' or 'local' to avoid ambiguity.\n\n  * Added .iced extension support (@arthanzel)\n\n  * Highlight `config.has()` in the README. Use it to check to if a value exists, since `config.get()`\n    throws exceptions on undefined values. (@markstos)\n\n  * API Change: getConfigSources() now starts to return data on config files that are valid-but-empty. (@markstos)\n\n1.8.1 / 2014-11-14\n==================\n\n  * Simplify syntax for defer() functions. The 'this' value in the functions is now bound\n    to the main configuration object, so it doesn't have to be passed into the function. (@markstos)\n  * new defer sub-module introduced in 1.8.0 can now be accessed by require('config/defer')\n    For usage, see: https://github.com/node-config/node-config/wiki/Configuration-Files#javascript-module---js\n  * Add test coverage for array merging cases. (@markstos)\n  * Bump dependency on cson package to 1.6.1 (@markstos)\n\n1.8.0 / 2014-11-13\n==================\n\n  * Added deferred function for evaluating configs after load (@markstos)\n    For details, see: https://github.com/node-config/node-config/wiki/Configuration-Files#javascript-module---js\n  * Bumped js-yaml dependency (@markstos)\n\n1.7.0 / 2014-10-30\n==================\n\n  * Added variable substitution in .properties files (@ncuillery)\n\n1.6.0 / 2014-10-22\n==================\n\n  * Added support for property accessors in configs (@jaylynch)\n\n1.5.0 / 2014-10-20\n==================\n\n  * Added support for .json5 config files (@bertrandom) \n\n1.4.0 / 2014-10-16\n==================\n\n  * Added support for .properties config files (@superoven)\n\n1.3.0 / 2014-10-15\n==================\n\n  * Added support for CSON configuration files (@superoven)\n\n1.2.4 / 2014-10-10\n==================\n\n  * Repaired the 1.2.3 fix to work both before and after the first get()\n\n1.2.3 / 2014-10-03\n==================\n\n  * Changed test suite to verify a bug in util.setModuleDefaults()\n  * Fixed util.setModuleDefaults() to work after a get() (and pass the new test)\n\n1.2.2 / 2014-10-03\n==================\n\n  * Added support for regexp and date configurations (@diversario)\n\n1.2.1 / 2014-09-23\n==================\n\n  * Wrote test to prove setModuleDefaults() was broken in 1.2.0\n  * Fixed setModuleDefaults() to not rely on immutable configs\n\n1.2.0 / 2014-09-15\n==================\n\n  * Feature release\n  * Delaying immutability until after first get() - for external configs\n  * Allowing immutability override with $ALLOW_CONFIG_MUTATIONS=Y\n\n\n1.1.1 / 2014-09-03\n==================\n\n  * @th507 - Update support for Coffee-script >=1.7.0\n\n1.1.0 / 2014-09-03\n==================\n\n  * Feature release\n  * @bradboro - Custom environment variables\n  * @supersheep - Catch error when requiring visionmedia yaml module\n\n1.0.2 / 2014-07-30\n===================\n\n  * @bradobro - Fixed a variable from leaking into global\n  * @tilfin - Removed un-necessary YAML comment filtering for js-yaml\n\n1.0.1 / 2014-07-25\n===================\n\n  * Removed test directory from npm install\n\n1.0.0 / 2014-07-23\n===================\n\n  * Major revision.  Upgrade notes:\n    https://github.com/node-config/node-config/wiki/Upgrading-From-Config-0.x\n  * Update to semver versioning\n  * Change load ordering\n      from hostname.EXT --> deployment.EXT\n      to deployment.EXT --> hostname.EXT\n  * Allow makeImmutable to accept an array of attributes\n  * Allow makeImmutable to accept no attrs, making all attributes immutable\n  * Allow recursion in makeImmutable, if an attribute is an object\n  * Change node-config behavior to make all configurations immutable\n  * Removed getOriginalConfig as no longer necessary post-immutable\n  * Removed runtime.json file writing and monitoring\n  * Removed previously deprecated $CONFIG_* environment configurations\n  * Deprecated the attribute watch functionality\n  * Added error output if no configurations found\n  * Exposed config loading for alternate configurations\n  * Added config.get() and config.has() methods & tests\n  * Removed reliance on global.NODE_CONFIG so older versions can work with 1.x\n  * Fix empty YAML file causing crash with latest js-yaml\n  * Added SUPPRESS_NO_CONFIG_WARNING for better sub-module support\n  * Moved all documentation [to the wiki](https://github.com/node-config/node-config/wiki).\n\n0.4.37 / 2014-07-22\n===================\n\n  * Fix empty YAML file causing crash with latest js-yaml\n\n0.4.36 / 2014-05-27\n===================\n\n  * Not writing runtime.json if not used\n\n0.4.35 / 2014-01-16\n===================\n\n  * NODE_CONFIG_DIR can now contain a relative path for .js and .coffee configurations\n\n0.4.34 / 2014-01-06\n===================\n\n  * Updated copyright year\n\n0.4.33 / 2013-10-25\n===================\n\n  * Assure writes to runtime.json are atomic\n\n0.4.32 / 2013-10-24\n===================\n\n  * Don't freak out if running without a config directory\n  * Don't be so chatty if runtime.json doesn't exist\n\n0.4.31 / 2013-10-18\n===================\n\n  * Changed getConfigSources to copy array vs. object\n\n0.4.30 / 2013-09-12\n===================\n\n  * More consistent array extension\n  * No longer requiring a config directory\n  * Not erroneously writing runtime.json\n  * Exposing the original configuration sources\n  * Added --NODE_CONFIG={json} command line overrides\n  * Added $NODE_CONFIG={json} environment variable overrides\n  * Consistent handling of environment variables and command line parameters\n  * Reached 100 regression tests\n\n0.4.29 / 2013-08-07\n===================\n\n  * Added flag for disabling the write of runtime.json\n\n0.4.28 / 2013-07-31\n===================\n\n  * Eliminated a totally annoying install warning in newer versions of NPM\n\n0.4.27 / 2013-06-18\n===================\n\n  * Fixed a bug preventing double underscores in config environment variables\n\n0.4.26 / 2013-06-10\n===================\n\n  * Re-watch file on rename (allows editing runtime.json with vi)\n  * Allow runtime.json file watch disable via NODE_CONFIG_DISABLE_FILE_WATCH=Y\n  * Change no yaml parser error message to suggest using js-yaml\n  * Changed default clone depth from 6 to 20 to allow for deeper configurations\n\n0.4.25 / 2013-05-24\n===================\n\n  * Dont fail if config directory doesnt exist\n\n0.4.24 / 2013-04-13\n===================\n\n  * Added resetRuntime() to reset the runtime.json file\n  * Updated docs to reflect the new public method\n\n0.4.23 / 2013-04-13\n===================\n\n  * Multiple application instance support via $NODE_APP_INSTANCE\n  * Multi-app testing & documentation\n\n0.4.22 / 2013-03-29\n===================\n\n  * Added configuration $CONFIG_* environment variables\n  * Added $CONFIG_* documentation and tests\n  * Added NodeJS 0.10 integration test\n\n0.4.21 / 2013-03-06\n===================\n\n  * Triggering file.watch when an editor saves a file - rename vs. change\n  * Installed Travis-CI continuous integration testing framework\n\n0.4.20 / 2013-02-21\n===================\n\n  * Merged _diffDeep fix\n\n0.4.19 / 2013-02-21\n===================\n\n  * Added discovery of .yml in addition to .yaml for YAML configs (w/doc)\n  * Added testing of .yml file discovery\n  * Removed licensing inconsistencies\n\n0.4.18 / 2012-10-30\n===================\n\n  * Moved coffee-script and js-yaml from optionalDependencies back to\n    devDependencies to trim the install size for those not needing\n    these packages.\n  * Promoted $HOSTNAME and $HOST above OS.hostname()\n\n0.4.17 / 2012-09-26\n===================\n\n  * Allow the location of runtime.json to be picked up from the environment\n  * Added documentation for the NODE_CONFIG_RUNTIME_JSON environment variable\n  * package.json cleanup - created optionalDependencies and devDependencies\n\n0.4.16 / 2012-08-09\n===================\n\n  * Allowing a zero interval in watchForConfigFileChanges() to disable file watching.\n  * Fixed a comparator bug in _equalsDeep()\n  * Added a test to confirm deep extending array functionality\n\n0.4.15 / 2012-06-04\n===================\n\n  * Placed YAML and Coffee-Script libraries back into the download.  Still lazy loading into memory.\n\n0.4.14 / 2012-06-01\n===================\n\n  * Added the local.EXT and local-deployment.EXT configs.\n  * Removed unnecessary debug output\n  * Added retry logic on file parse to reduce read/write collisions\n  * Added support for a better YAML parser\n  * Fixed problems with null configuration values\n\n0.4.13 / 2012-04-25\n===================\n\n  * Assuring the runtime.json file exists.  Undocumented fs.watch() requirement.\n\n0.4.12 / 2012-04-25\n===================\n\n  * Removed all external dependencies\n  * Lazy loading of yaml and coffee-script only if these file types are used\n  * Added new style file watching if available (retaining pre 6.0 compatibility)\n  * Windows compatibility - file watching changes were required\n\n0.4.11 / 2012-02-15\n===================\n\n  * Automatically watching runtime.json for changes\n  * Fixed a date comparison bug during file watching\n  * Changed require('sys') to require('util')\n\n0.4.10 / 2012-01-18\n===================\n\n  * Made sure the CONFIG object is a shared singleton\n  * Added NODE_CONFIG_DIR environment variable to point to a different directory\n  * Added tests and documentation for the above\n\n0.4.9 / 2012-01-06\n==================\n\n  * Added coffee-script file type support with extension .coffee\n  * Added an example coffee-script configuration file\n  * Added coffee-script module dependency\n  * Added a test for coffee-script configuration files\n  * Documented coffee-script support, regenerated documentation\n\n0.4.8 / 2011-12-20\n==================\n\n  * Fixed a bug where changes to module default configs weren't persisted\n  * Added a test to validate the bugfix\n\n0.4.7 / 2011-12-16\n==================\n\n  * Created the makeHidden method to hide a property of an object\n  * Added a value argument to makeImmutable for creating new properties\n  * Fixed setModuleDefaults to hide injected prototype methods\n  * Added documentation and unit tests\n\n0.4.6 / 2011-11-29\n==================\n\n  * Updated vows from 0.5.8 to 0.5.13\n\n0.4.5 / 2011-11-16\n==================\n\n  * Updated YAML dependency from \"0.1.x\" to \">=0.2.2\"\n  * Added stripping of comment-only and whitespace-only lines in YAML files for backward compatibility\n  * Added more tests for YAML edge cases\n  * Added a homepage link in package.json to the online documentation\n  * Added History.md\n\n0.4.4 / 2011-11-08\n==================\n\n  * Removed deprecated modules from package.json\n\n0.4.3 / 2011-08-02\n==================\n\n  * Made watchForConfigFileChanges public\n\n0.4.2 / 2011-07-11\n==================\n\n  * Added comment stripping from JSON configuration files\n\n0.4.1 / 2011-07-07\n==================\n\n  * Added more tests\n  * Return the module config in setModuleDefaults\n\n0.4.0 / 2011-07-06\n==================\n\n  * Update to version 0.4.0\n\n    * Online documentation\n    * Runtime configuration changes\n    * Configuration value watching\n    * Multi-instance node deployments\n    * Better module developer support\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1044921875,
          "content": "// Copyright 2010-2022, Loren West and other contributors\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.2724609375,
          "content": "Configure your Node.js Applications\n===================================\n\n[![NPM](https://nodei.co/npm/config.svg?downloads=true&downloadRank=true)](https://nodei.co/npm/config/)&nbsp;&nbsp;\n[![Build Status](https://secure.travis-ci.org/node-config/node-config.svg?branch=master)](https://travis-ci.org/lorenwest/node-config)&nbsp;&nbsp;\n[release notes](https://github.com/node-config/node-config/blob/master/History.md)\n\nIntroduction\n------------\n\nNode-config organizes hierarchical configurations for your app deployments.\n\nIt lets you define a set of default parameters,\nand extend them for different deployment environments (development, qa,\nstaging, production, etc.).\n\nConfigurations are stored in [configuration files](https://github.com/node-config/node-config/wiki/Configuration-Files) within your application, and can be overridden and extended by [environment variables](https://github.com/lorenwest/node-config/wiki/Environment-Variables),\n [command line parameters](https://github.com/node-config/node-config/wiki/Command-Line-Overrides), or [external sources](https://github.com/lorenwest/node-config/wiki/Configuring-from-an-External-Source).\n\nThis gives your application a consistent configuration interface shared among a\n[growing list of npm modules](https://www.npmjs.org/browse/depended/config) also using node-config.\n\nProject Guidelines\n------------------\n\n* *Simple* - Get started fast\n* *Powerful* - For multi-node enterprise deployment\n* *Flexible* - Supporting multiple config file formats\n* *Lightweight* - Small file and memory footprint\n* *Predictable* - Well tested foundation for module and app developers\n\nQuick Start\n---------------\nThe following examples are in JSON format, but configurations can be in other [file formats](https://github.com/node-config/node-config/wiki/Configuration-Files#file-formats).\n\n**Install in your app directory, and edit the default config file.**\n\n```shell\n$ npm install config\n$ mkdir config\n$ vi config/default.json\n```\n```js\n{\n  // Customer module configs\n  \"Customer\": {\n    \"dbConfig\": {\n      \"host\": \"localhost\",\n      \"port\": 5984,\n      \"dbName\": \"customers\"\n    },\n    \"credit\": {\n      \"initialLimit\": 100,\n      // Set low for development\n      \"initialDays\": 1\n    }\n  }\n}\n```\n\n**Edit config overrides for production deployment:**\n\n```shell\n $ vi config/production.json\n```\n\n```json\n{\n  \"Customer\": {\n    \"dbConfig\": {\n      \"host\": \"prod-db-server\"\n    },\n    \"credit\": {\n      \"initialDays\": 30\n    }\n  }\n}\n```\n\n**Use configs in your code:**\n\n```js\nconst config = require('config');\n//...\nconst dbConfig = config.get('Customer.dbConfig');\ndb.connect(dbConfig, ...);\n\nif (config.has('optionalFeature.detail')) {\n  const detail = config.get('optionalFeature.detail');\n  //...\n}\n```\n\n`config.get()` will throw an exception for undefined keys to help catch typos and missing values.\nUse `config.has()` to test if a configuration value is defined.\n\n**Start your app server:**\n\n```shell\n$ export NODE_ENV=production\n$ node my-app.js\n```\n\nRunning in this configuration, the `port` and `dbName` elements of `dbConfig`\nwill come from the `default.json` file, and the `host` element will\ncome from the `production.json` override file.\n\nArticles\n--------\n\n* [Configuration Files](https://github.com/node-config/node-config/wiki/Configuration-Files)\n  * [Special features for JavaScript configuration files](https://github.com/node-config/node-config/wiki/Special-features-for-JavaScript-configuration-files)\n* [Common Usage](https://github.com/node-config/node-config/wiki/Common-Usage)\n* [Environment Variables](https://github.com/node-config/node-config/wiki/Environment-Variables)\n* [Reserved Words](https://github.com/node-config/node-config/wiki/Reserved-Words)\n* [Command Line Overrides](https://github.com/node-config/node-config/wiki/Command-Line-Overrides)\n* [Multiple Node Instances](https://github.com/node-config/node-config/wiki/Multiple-Node-Instances)\n* [Sub-Module Configuration](https://github.com/node-config/node-config/wiki/Sub-Module-Configuration)\n* [Configuring from a DB / External Source](https://github.com/node-config/node-config/wiki/Configuring-from-an-External-Source)\n* [Securing Production Config Files](https://github.com/node-config/node-config/wiki/Securing-Production-Config-Files)\n* [External Configuration Management Tools](https://github.com/node-config/node-config/wiki/External-Configuration-Management-Tools)\n* [Examining Configuration Sources](https://github.com/node-config/node-config/wiki/Examining-Configuration-Sources)\n* [Using Config Utilities](https://github.com/node-config/node-config/wiki/Using-Config-Utilities)\n* [Upgrading from Config 0.x](https://github.com/node-config/node-config/wiki/Upgrading-From-Config-0.x)\n* [Webpack usage](https://github.com/node-config/node-config/wiki/Webpack-Usage)\n\nFurther Information\n---------------------\nIf you still don't see what you are looking for, here are some more resources to check: \n\n * The [wiki may have more pages](https://github.com/node-config/node-config/wiki) which are not directly linked from here.\n * Review [questions tagged with node-config](https://stackexchange.com/filters/207096/node-config) on StackExchange. These are monitored by `node-config` contributors.\n * [Search the issue tracker](https://github.com/node-config/node-config/issues). Hundreds of issues have already been discussed and resolved there.\n\nContributors\n------------\n<table id=\"contributors\"><tr><td><img src=https://avatars.githubusercontent.com/u/373538?v=4><a href=\"https://github.com/lorenwest\">lorenwest</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/25829?v=4><a href=\"https://github.com/markstos\">markstos</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/1083065?v=4><a href=\"https://github.com/iMoses\">iMoses</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/447151?v=4><a href=\"https://github.com/elliotttf\">elliotttf</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/8839447?v=4><a href=\"https://github.com/jfelege\">jfelege</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/66902?v=4><a href=\"https://github.com/leachiM2k\">leachiM2k</a></td>\n</tr><tr><td><img src=https://avatars.githubusercontent.com/u/791137?v=4><a href=\"https://github.com/josx\">josx</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/133277?v=4><a href=\"https://github.com/enyo\">enyo</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/4307697?v=4><a href=\"https://github.com/leosuncin\">leosuncin</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/1077378?v=4><a href=\"https://github.com/arthanzel\">arthanzel</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/1656140?v=4><a href=\"https://github.com/eheikes\">eheikes</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/138707?v=4><a href=\"https://github.com/th507\">th507</a></td>\n</tr><tr><td><img src=https://avatars.githubusercontent.com/u/506460?v=4><a href=\"https://github.com/Osterjour\">Osterjour</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/1751645?v=4><a href=\"https://github.com/cunneen\">cunneen</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/842998?v=4><a href=\"https://github.com/nsabovic\">nsabovic</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/5138570?v=4><a href=\"https://github.com/BadgerBadgerBadgerBadger\">BadgerBadgerBadgerBadger</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/2529835?v=4><a href=\"https://github.com/simon-scherzinger\">simon-scherzinger</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/8650543?v=4><a href=\"https://github.com/leonardovillela\">leonardovillela</a></td>\n</tr><tr><td><img src=https://avatars.githubusercontent.com/u/175627?v=4><a href=\"https://github.com/axelhzf\">axelhzf</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/7782055?v=4><a href=\"https://github.com/benkroeger\">benkroeger</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/1872824?v=4><a href=\"https://github.com/fgheorghe\">fgheorghe</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/1443067?v=4><a href=\"https://github.com/IvanVergiliev\">IvanVergiliev</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/1736957?v=4><a href=\"https://github.com/jpwilliams\">jpwilliams</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/1246875?v=4><a href=\"https://github.com/jaylynch\">jaylynch</a></td>\n</tr><tr><td><img src=https://avatars.githubusercontent.com/u/145742?v=4><a href=\"https://github.com/jberrisch\">jberrisch</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/9355665?v=4><a href=\"https://github.com/kgoerlitz\">kgoerlitz</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/8525267?v=4><a href=\"https://github.com/bertho-zero\">bertho-zero</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/6686044?v=4><a href=\"https://github.com/NguyenMatthieu\">NguyenMatthieu</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/1918551?v=4><a href=\"https://github.com/nitzan-shaked\">nitzan-shaked</a></td>\n<td><img src=https://avatars.githubusercontent.com/u/3058150?v=4><a href=\"https://github.com/robertrossmann\">robertrossmann</a></td>\n</tr></table>\n\nLicense\n-------\n\nMay be freely distributed under the [MIT license](https://raw.githubusercontent.com/node-config/node-config/master/LICENSE).\n\nCopyright (c) 2010-2022 Loren West \n[and other contributors](https://github.com/node-config/node-config/graphs/contributors)\n\n"
        },
        {
          "name": "async.js",
          "type": "blob",
          "size": 2.3984375,
          "content": "var asyncSymbol = Symbol('asyncSymbol');\nvar deferConfig = require('./defer').deferConfig;\n\n/**\n * @param promiseOrFunc   the promise will determine a property's value once resolved\n *                        can also be a function to defer which resolves to a promise\n * @returns {Promise}     a marked promise to be resolve later using `resolveAsyncConfigs`\n */\nfunction asyncConfig(promiseOrFunc) {\n  if (typeof promiseOrFunc === 'function') {  // also acts as deferConfig\n    return deferConfig(function (config, original) {\n      var release;\n      function registerRelease(resolve) { release = resolve; }\n      function callFunc() { return promiseOrFunc.call(config, config, original); }\n      var promise = asyncConfig(new Promise(registerRelease).then(callFunc));\n      promise.release = release;\n      return promise;\n    });\n  }\n  var promise = promiseOrFunc;\n  promise.async = asyncSymbol;\n  promise.prepare = function(config, prop, property) {\n    if (promise.release) {\n      promise.release();\n    }\n    return function() {\n      return promise.then(function(value) {\n        Object.defineProperty(prop, property, {value: value});\n      });\n    };\n  };\n  return promise;\n}\n\n/**\n * Do not use `config.get` before executing this method, it will freeze the config object\n * @param config    the main config object, returned from require('config')\n * @returns {Promise<config>}   once all promises are resolved, return the original config object\n */\nfunction resolveAsyncConfigs(config) {\n  var promises = [];\n  var resolvers = [];\n  (function iterate(prop) {\n    var propsToSort = [];\n    for (var property in prop) {\n      if (Object.hasOwnProperty.call(prop, property) && prop[property] != null) {\n        propsToSort.push(property);\n      }\n    }\n    propsToSort.sort().forEach(function(property) {\n      if (prop[property].constructor === Object) {\n        iterate(prop[property]);\n      }\n      else if (prop[property].constructor === Array) {\n        prop[property].forEach(iterate);\n      }\n      else if (prop[property] && prop[property].async === asyncSymbol) {\n        resolvers.push(prop[property].prepare(config, prop, property));\n        promises.push(prop[property]);\n      }\n    });\n  })(config);\n  return Promise.all(promises).then(function() {\n    resolvers.forEach(function(resolve) { resolve(); });\n    return config;\n  });\n}\n\nmodule.exports.asyncConfig = asyncConfig;\nmodule.exports.resolveAsyncConfigs = resolveAsyncConfigs;\n"
        },
        {
          "name": "defer.js",
          "type": "blob",
          "size": 0.904296875,
          "content": "// Create a deferredConfig prototype so that we can check for it when reviewing the configs later.\nfunction DeferredConfig() {}\nDeferredConfig.prototype.prepare = function() {};\nDeferredConfig.prototype.resolve = function() {};\n\n// Accept a function that we'll use to resolve this value later and return a 'deferred' configuration value to resolve it later.\nfunction deferConfig(func) {\n  var obj = Object.create(DeferredConfig.prototype);\n  obj.prepare = function(config, prop, property) {\n    var original = prop[property]._original;\n    obj.resolve = function() {\n      var value = func.call(config, config, original);\n      Object.defineProperty(prop, property, {value: value});\n      return value;\n    };\n    Object.defineProperty(prop, property, {get: function() { return obj.resolve(); }});\n    return obj;\n  };\n  return obj;\n}\n\nmodule.exports.deferConfig = deferConfig;\nmodule.exports.DeferredConfig = DeferredConfig;\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.177734375,
          "content": "{\n  \"name\": \"config\",\n  \"version\": \"3.3.12\",\n  \"main\": \"./lib/config.js\",\n  \"description\": \"Configuration control for production node deployments\",\n  \"author\": \"Loren West <open_source@lorenwest.com>\",\n  \"homepage\": \"http://github.com/node-config/node-config.git\",\n  \"publishConfig\": {\n    \"registry\": \"https://registry.npmjs.org/\"\n  },\n  \"keywords\": [\n    \"conf\",\n    \"config\",\n    \"configuration\",\n    \"node-config\",\n    \"config-node\",\n    \"env\",\n    \"environment\"\n  ],\n  \"directories\": {\n    \"lib\": \"./lib\"\n  },\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"json5\": \"^2.2.3\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^7.0.8\",\n    \"coffeescript\": \"2.2.4\",\n    \"cson\": \"^3.0.1\",\n    \"hjson\": \"^1.2.0\",\n    \"js-yaml\": \"^3.2.2\",\n    \"properties\": \"~1.2.1\",\n    \"semver\": \"5.3.0\",\n    \"toml\": \"^2.0.6\",\n    \"ts-node\": \"^3.3.0\",\n    \"typescript\": \"^2.4.2\",\n    \"underscore\": \"^1.8.3\",\n    \"vows\": \">=0.8.1\",\n    \"x2js\": \"^2.0.1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"http://github.com/node-config/node-config.git\"\n  },\n  \"engines\": {\n    \"node\": \">= 10.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"./node_modules/vows/bin/vows test/*.js --spec\",\n    \"vows\": \"./node_modules/vows/bin/vows\"\n  }\n}\n"
        },
        {
          "name": "parser.js",
          "type": "blob",
          "size": 10.275390625,
          "content": "// External libraries are lazy-loaded only if these file types exist.\n\n// webpack can't solve dynamic module\n// @see https://github.com/node-config/node-config/issues/755\n// @see https://webpack.js.org/guides/dependency-management/#require-with-expression\nconst JSON5Module = require('json5');\n\n// webpack resolves json5 with module field out of the box which lead to this usage\n// @see https://github.com/node-config/node-config/issues/755\n// @see https://github.com/json5/json5/issues/240\nconst JSON5 = JSON5Module.default || JSON5Module;\n\nvar Yaml = null,\n    VisionmediaYaml = null,\n    Coffee = null,\n    Iced = null,\n    CSON = null,\n    PPARSER = null,\n    TOML = null,\n    HJSON = null,\n    XML = null;\n\n// Define soft dependencies so transpilers don't include everything\nvar COFFEE_2_DEP = 'coffeescript',\n    COFFEE_DEP = 'coffee-script',\n    ICED_DEP = 'iced-coffee-script',\n    JS_YAML_DEP = 'js-yaml',\n    YAML_DEP = 'yaml',\n    JSON5_DEP = 'json5',\n    HJSON_DEP = 'hjson',\n    TOML_DEP = 'toml',\n    CSON_DEP = 'cson',\n    PPARSER_DEP = 'properties',\n    XML_DEP = 'x2js',\n    TS_DEP = 'ts-node';\n\nvar Parser = module.exports;\n\nParser.parse = function(filename, content) {\n  var parserName = filename.substr(filename.lastIndexOf('.') +1);  // file extension\n  if (typeof definitions[parserName] === 'function') {\n    return definitions[parserName](filename, content);\n  }\n  // TODO: decide what to do in case of a missing parser\n};\n\nParser.xmlParser = function(filename, content) {\n  if (!XML) {\n    XML = require(XML_DEP);\n  }\n  var x2js = new XML();\n  var configObject = x2js.xml2js(content);\n  var rootKeys = Object.keys(configObject);\n  if(rootKeys.length === 1) {\n    return configObject[rootKeys[0]];\n  }\n  return configObject;\n};\n\nParser.jsParser = function(filename, content) {\n  var configObject = require(filename);\n\n  if (configObject.__esModule && isObject(configObject.default)) {\n    return configObject.default\n  }\n  return configObject;\n};\n\nParser.tsParser = function(filename, content) {\n  if (!require.extensions['.ts']) {\n    require(TS_DEP).register({\n      lazy: true,\n      ignore: ['(?:^|/)node_modules/', '.*(?<!\\.ts)$'],\n      transpileOnly: true,\n      compilerOptions: {\n        allowJs: true,\n      }\n    });\n  }\n\n  // Imports config if it is exported via module.exports = ...\n  // See https://github.com/node-config/node-config/issues/524\n  var configObject = require(filename);\n\n  // Because of ES6 modules usage, `default` is treated as named export (like any other)\n  // Therefore config is a value of `default` key.\n  if (configObject.default) {\n    return configObject.default\n  }\n  return configObject;\n};\n\nParser.coffeeParser = function(filename, content) {\n  // .coffee files can be loaded with either coffee-script or iced-coffee-script.\n  // Prefer iced-coffee-script, if it exists.\n  // Lazy load the appropriate extension\n  if (!Coffee) {\n    Coffee = {};\n\n    // The following enables iced-coffee-script on .coffee files, if iced-coffee-script is available.\n    // This is commented as per a decision on a pull request.\n    //try {\n    //  Coffee = require('iced-coffee-script');\n    //}\n    //catch (e) {\n    //  Coffee = require('coffee-script');\n    //}\n    try {\n      // Try to load coffeescript\n      Coffee = require(COFFEE_2_DEP);\n    }\n    catch (e) {\n      // If it doesn't exist, try to load it using the deprecated module name\n      Coffee = require(COFFEE_DEP);\n    }\n    // coffee-script >= 1.7.0 requires explicit registration for require() to work\n    if (Coffee.register) {\n      Coffee.register();\n    }\n  }\n  // Use the built-in parser for .coffee files with coffee-script\n  return require(filename);\n};\n\nParser.icedParser = function(filename, content) {\n  Iced = require(ICED_DEP);\n\n  // coffee-script >= 1.7.0 requires explicit registration for require() to work\n  if (Iced.register) {\n    Iced.register();\n  }\n};\n\nParser.yamlParser = function(filename, content) {\n  if (!Yaml && !VisionmediaYaml) {\n    // Lazy loading\n    try {\n      // Try to load the better js-yaml module\n      Yaml = require(JS_YAML_DEP);\n    }\n    catch (e) {\n      try {\n        // If it doesn't exist, load the fallback visionmedia yaml module.\n        VisionmediaYaml = require(YAML_DEP);\n      }\n      catch (e) { }\n    }\n  }\n  if (Yaml) {\n    return Yaml.load(content);\n  }\n  else if (VisionmediaYaml) {\n    // The yaml library doesn't like strings that have newlines but don't\n    // end in a newline: https://github.com/visionmedia/js-yaml/issues/issue/13\n    content += '\\n';\n    if (typeof VisionmediaYaml.eval === 'function') {\n      return VisionmediaYaml.eval(Parser.stripYamlComments(content));\n    }\n    return VisionmediaYaml.parse(Parser.stripYamlComments(content));\n  }\n  else {\n    console.error('No YAML parser loaded.  Suggest adding js-yaml dependency to your package.json file.')\n  }\n};\n\nParser.jsonParser = function(filename, content) {\n  /**\n   * Default JSON parsing to JSON5 parser.\n   * This is due to issues with removing supported comments.\n   * More information can be found here: https://github.com/node-config/node-config/issues/715\n   */\n  return JSON5.parse(content);\n};\n\nParser.json5Parser = function(filename, content) {\n  return JSON5.parse(content);\n};\n\nParser.hjsonParser = function(filename, content) {\n  if (!HJSON) {\n    HJSON = require(HJSON_DEP);\n  }\n  return HJSON.parse(content);\n};\n\nParser.tomlParser = function(filename, content) {\n  if(!TOML) {\n    TOML = require(TOML_DEP);\n  }\n  return TOML.parse(content);\n};\n\nParser.csonParser = function(filename, content) {\n  if (!CSON) {\n    CSON = require(CSON_DEP);\n  }\n  // Allow comments in CSON files\n  if (typeof CSON.parseSync === 'function') {\n    return CSON.parseSync(content);\n  }\n  return CSON.parse(content);\n};\n\nParser.propertiesParser = function(filename, content) {\n  if (!PPARSER) {\n    PPARSER = require(PPARSER_DEP);\n  }\n  return PPARSER.parse(content, { namespaces: true, variables: true, sections: true });\n};\n\n/**\n * Strip all Javascript type comments from the string.\n *\n * The string is usually a file loaded from the O/S, containing\n * newlines and javascript type comments.\n *\n * Thanks to James Padolsey, and all who contributed to this implementation.\n * http://james.padolsey.com/javascript/javascript-comment-removal-revisted/\n *\n * @protected\n * @method stripComments\n * @param fileStr {string} The string to strip comments from\n * @param stringRegex {RegExp} Optional regular expression to match strings that\n *   make up the config file\n * @return {string} The string with comments stripped.\n */\nParser.stripComments = function(fileStr, stringRegex) {\n  stringRegex = stringRegex || /\"((?:[^\"\\\\]|\\\\.)*)\"/g;\n\n  var uid = '_' + +new Date(),\n    primitives = [],\n    primIndex = 0;\n\n  return (\n    fileStr\n\n    /* Remove strings */\n      .replace(stringRegex, function(match){\n        primitives[primIndex] = match;\n        return (uid + '') + primIndex++;\n      })\n\n      /* Remove Regexes */\n      .replace(/([^\\/])(\\/(?!\\*|\\/)(\\\\\\/|.)+?\\/[gim]{0,3})/g, function(match, $1, $2){\n        primitives[primIndex] = $2;\n        return $1 + (uid + '') + primIndex++;\n      })\n\n      /*\n      - Remove single-line comments that contain would-be multi-line delimiters\n          E.g. // Comment /* <--\n      - Remove multi-line comments that contain would be single-line delimiters\n          E.g. /* // <--\n     */\n      .replace(/\\/\\/.*?\\/?\\*.+?(?=\\n|\\r|$)|\\/\\*[\\s\\S]*?\\/\\/[\\s\\S]*?\\*\\//g, '')\n\n      /*\n      Remove single and multi-line comments,\n      no consideration of inner-contents\n     */\n      .replace(/\\/\\/.+?(?=\\n|\\r|$)|\\/\\*[\\s\\S]+?\\*\\//g, '')\n\n      /*\n      Remove multi-line comments that have a replaced ending (string/regex)\n      Greedy, so no inner strings/regexes will stop it.\n     */\n      .replace(RegExp('\\\\/\\\\*[\\\\s\\\\S]+' + uid + '\\\\d+', 'g'), '')\n\n      /* Bring back strings & regexes */\n      .replace(RegExp(uid + '(\\\\d+)', 'g'), function(match, n){\n        return primitives[n];\n      })\n  );\n\n};\n\n/**\n * Strip YAML comments from the string\n *\n * The 2.0 yaml parser doesn't allow comment-only or blank lines.  Strip them.\n *\n * @protected\n * @method stripYamlComments\n * @param fileStr {string} The string to strip comments from\n * @return {string} The string with comments stripped.\n */\nParser.stripYamlComments = function(fileStr) {\n  // First replace removes comment-only lines\n  // Second replace removes blank lines\n  return fileStr.replace(/^\\s*#.*/mg,'').replace(/^\\s*[\\n|\\r]+/mg,'');\n};\n\n/**\n * Parses the environment variable to the boolean equivalent.\n * Defaults to false\n *\n * @param {String} content - Environment variable value\n * @return {boolean} - Boolean value fo the passed variable value\n */\nParser.booleanParser = function(filename, content) {\n  return content === 'true';\n};\n\n/**\n * Parses the environment variable to the number equivalent.\n * Defaults to undefined\n *\n * @param {String} content - Environment variable value\n * @return {Number} - Number value fo the passed variable value\n */\nParser.numberParser = function(filename, content) {\n  const numberValue = Number(content);\n  return Number.isNaN(numberValue) ? undefined : numberValue;\n};\n\nvar order = ['js', 'cjs', 'ts', 'json', 'json5', 'hjson', 'toml', 'coffee', 'iced', 'yaml', 'yml', 'cson', 'properties', 'xml',\n  'boolean', 'number'];\nvar definitions = {\n  cjs: Parser.jsParser,\n  coffee: Parser.coffeeParser,\n  cson: Parser.csonParser,\n  hjson: Parser.hjsonParser,\n  iced: Parser.icedParser,\n  js: Parser.jsParser,\n  json: Parser.jsonParser,\n  json5: Parser.json5Parser,\n  properties: Parser.propertiesParser,\n  toml: Parser.tomlParser,\n  ts: Parser.tsParser,\n  xml: Parser.xmlParser,\n  yaml: Parser.yamlParser,\n  yml: Parser.yamlParser,\n  boolean: Parser.booleanParser,\n  number: Parser.numberParser\n};\n\nParser.getParser = function(name) {\n  return definitions[name];\n};\n\nParser.setParser = function(name, parser) {\n  definitions[name] = parser;\n  if (order.indexOf(name) === -1) {\n    order.push(name);\n  }\n};\n\nParser.getFilesOrder = function(name) {\n  if (name) {\n    return order.indexOf(name);\n  }\n  return order;\n};\n\nParser.setFilesOrder = function(name, newIndex) {\n  if (Array.isArray(name)) {\n    return order = name;\n  }\n  if (typeof newIndex === 'number') {\n    var index = order.indexOf(name);\n    order.splice(newIndex, 0, name);\n    if (index > -1) {\n      order.splice(index >= newIndex ? index +1 : index, 1);\n    }\n  }\n  return order;\n};\n\nfunction isObject(arg) {\n  return (arg !== null) && (typeof arg === 'object');\n}\n"
        },
        {
          "name": "raw.js",
          "type": "blob",
          "size": 0.375,
          "content": "/**\n * This is meant to wrap configuration objects that should be left as is,\n * meaning that the object or its prototype will not be modified in any way\n */\nfunction RawConfig () {\n}\n\nfunction raw(rawObj) {\n  var obj = Object.create(RawConfig.prototype);\n  obj.resolve = function () { return rawObj; }\n  return obj;\n}\n\nmodule.exports.RawConfig = RawConfig;\nmodule.exports.raw = raw;\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}