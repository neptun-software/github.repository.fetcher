{
  "metadata": {
    "timestamp": 1736562774404,
    "page": 320,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ygs-code/vue",
      "stars": 6932,
      "defaultBranch": "master",
      "files": [
        {
          "name": "0.html",
          "type": "blob",
          "size": 2.4931640625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n\r\n\r\n\r\n</head>\r\n<body>\r\n\r\n<div id=\"app\">\r\n    <!--this is comment-->  {{ message }}\r\n</div>\r\n<div id=\"app1\">\r\n    <div  >\r\n\r\n        <!--count={{count}}-->\r\n        <!--reversedCount={{reversedCount}}-->\r\n    </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n<script>\r\n    console.log( Object.keys('abcd'))\r\n    debugger;\r\n    console.log('=====return 1=======')\r\n    console.log(   new Function('return 1'))\r\n\r\n    console.log('return='+ new Function((\"return \" + function () {\r\n                \r\n            })));\r\n\r\n\r\n\r\n    var app = new Vue({\r\n\r\n        el: '#app',\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        mounted: ()=> { //挂载元素，获取到DOM节点\r\n           setTimeout(()=>{\r\n//                this.count+=1;\r\n//                console.log('this.count='+this.count)\r\n           },1000)\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n       },\r\n        data:function () {\r\n             return  {\r\n                 count:0,\r\n\r\n                 message: 'Hello Vue!1111111'\r\n             }\r\n        },\r\n//        data: {\r\n//            count:0,\r\n//            message: 'Hello Vue!'\r\n//        }\r\n    })\r\n    var app1 = new Vue({\r\n        comments:true,\r\n        el: '#app1',\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        methods:{\r\n          click:function () {\r\n               console.log('点击事件')\r\n          }\r\n        },\r\n        mounted: function (){ //挂载元素，获取到DOM节点\r\n            setTimeout(()=>{\r\n                console.log(this.count)\r\n                this.count++;\r\n                console.log('this.count=')\r\n                console.log(this.count)\r\n            },1000)\r\n        },\r\n        computed: {\r\n            // 计算属性的 getter\r\n            reversedCount: function () {\r\n                // `this` 指向 vm 实例\r\n                return this.count++;\r\n            }\r\n        },\r\n\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n        },\r\n        data: {\r\n            count:0,\r\n\r\n            message: 'Hello Vue!2222'\r\n        }\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "05自定义指令.html",
          "type": "blob",
          "size": 1.74609375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"app\">\r\n    <my-comp v-if=\"msg\" :msg=\"msg\"></my-comp>\r\n    <button @click=\"update\">更新</button>\r\n    <button @click=\"uninstall\">卸载</button>\r\n    <button @click=\"install\">安装</button>\r\n</div>\r\n<script type=\"text/javascript\">\r\n    Vue.component('button-counter', {\r\n\r\n\r\n        data: function () {\r\n            return {\r\n                count: 0\r\n            }\r\n        },\r\n        mounted: ()=> { //挂载元素，获取到DOM节点\r\n\r\n        },\r\n        template: '<button  v-hello=\"123\">You clicked me   times.</button>'\r\n    })\r\n    Vue.directive('hello', {\r\n        bind: function (el){\r\n            console.log('bind:');\r\n        },\r\n        inserted: function (el){\r\n            console.log('inserted:');\r\n        },\r\n        update: function (el){\r\n            console.log('update:');\r\n        },\r\n        componentUpdated: function (el){\r\n            console.log('componentUpdated:');\r\n        },\r\n        unbind: function (el){\r\n            console.log('unbind:');\r\n        }\r\n    });\r\n\r\n    var myComp = {\r\n        template: '<button-counter >{{msg}}</button-counter>',\r\n        props: {\r\n            msg: String\r\n        }\r\n    }\r\n\r\n    new Vue({\r\n        el: '#app',\r\n        data: {\r\n            msg: 'Hello'\r\n        },\r\n        components: {\r\n            myComp: myComp\r\n        },\r\n        methods: {\r\n            update: function (){\r\n                this.msg = 'Hi';\r\n            },\r\n            uninstall: function (){\r\n                this.msg = '';\r\n            },\r\n            install: function (){\r\n                this.msg = 'Hello';\r\n            }\r\n        }\r\n    })\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "06provide组件通信.html",
          "type": "blob",
          "size": 1.99609375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"components-demo\">\r\n    <button-counter id=\"123\"></button-counter>\r\n</div>\r\n<div id=\"app\">\r\n    {{ message }}\r\n</div>\r\n\r\n<script>\r\n    //   function  person (){\r\n    //     this.options='aaa'\r\n    //   }\r\n    //\r\n    //   person.constructor={aa:'c'}\r\n    //   person.prototype.options='span'\r\n    //\r\n    //   console.log(person.constructor.options)\r\n    //  console.log(Object.create(person.constructor.options));\r\n    //    new Vue({})\r\n    var obj = {\r\n        name: 'name',\r\n        age: 29\r\n    }\r\n    var arr = []\r\n    var res = new Array(obj.length);\r\n\r\n    console.log(obj.length)\r\n    console.log(res)\r\n    console.log(arr.length)\r\n\r\n\r\n    Vue.component('button-counter', {\r\n        props:['id'],\r\n        functional:true,\r\n        inject: ['foo'],\r\n        data: function () {\r\n            return {\r\n                count: 0\r\n            }\r\n        },\r\n        mounted: ()=> { //挂载元素，获取到DOM节点\r\n            console.log('==this.foo==')\r\n            console.log(this.foo)\r\n\r\n        },\r\n        template: '<button v-on:click=\"count++\">You clicked me {{ count }} times.</button>'\r\n    })\r\n\r\n    new Vue({el: '#components-demo'})\r\n\r\n    var app = new Vue({\r\n        el: '#app',\r\n        provide: {\r\n            foo: 'bar'\r\n        },\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        mounted: ()=> { //挂载元素，获取到DOM节点\r\n\r\n           setTimeout(()=>{\r\n                this.count=11;\r\n                console.log('this.count='+this.count)\r\n           },5000)\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n       },\r\n        data: {\r\n            count:0,\r\n            message: 'Hello Vue!'\r\n        }\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "07.html",
          "type": "blob",
          "size": 0.943359375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"example\">\r\n    <my-component  :msg=\"count\" >\r\n\r\n    </my-component>\r\n</div>\r\n<script >\r\n\r\n    // 注册\r\n    Vue.component('my-component', {\r\n      //  _isComponent:true,\r\n        props: ['msg'],\r\n        template: '<div>{{msg}} A custom component!</div>'\r\n    })\r\n\r\n    // 创建根实例\r\n\r\n    var app = new Vue({\r\n        el: '#example',\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        mounted: function () {\r\n\r\n\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n        },\r\n        data: {\r\n            count:0,\r\n            message: 'Hello Vue!'\r\n        }\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "08delimiters.html",
          "type": "blob",
          "size": 0.6328125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n\r\n\r\n\r\n\r\n</head>\r\n<body>\r\n<div id=\"app\">\r\n    {{ message }}\r\n</div>\r\n\r\n<div id=\"app1\">\r\n    ${ message }\r\n</div>\r\n\r\n<script>\r\n\r\n\r\n    new Vue(\r\n            {\r\n                el:'#app',\r\n                data: {\r\n                    message: 'Hello'\r\n                },\r\n\r\n            })\r\n    new Vue(\r\n            {\r\n                el:'#app1',\r\n                data: {\r\n                    message: 'Hello'\r\n                },\r\n                delimiters:['${', '}']\r\n            })\r\n\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "09v-model.html",
          "type": "blob",
          "size": 3.6787109375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"demo\">\r\n\r\n    <ul>\r\n\r\n        <li   :class=\"[isClass?'class-a':'class-b']\" v-if=\"index\"   v-for=\"(item,index) in list\"    v-userdefined >\r\n            <!--<img v-bind:src=\"item.url\"/>-->\r\n            <input type=\"text\" v-model=\"item.url\">\r\n            <input type=\"checkbox\" :value=\"index\"  v-model=\"checkbox\">\r\n        </li>\r\n    </ul>\r\n    <select v-model=\"select\">\r\n        <option value=\"1\">1</option>\r\n        <option value=\"2\">2</option>\r\n        <option value=\"3\">3</option>\r\n        <option value=\"4\">4</option>\r\n        <option value=\"5\">5</option>\r\n    </select>\r\n\r\n    <base-input v-model=\"lovingVue\"></base-input>\r\n    <!-- 我是注释节点，你好啊！ -->\r\n</div>\r\n<style>\r\n    .class-a {\r\n        background: red;\r\n    }\r\n\r\n    .class-b {\r\n        background: red;\r\n    }\r\n</style>\r\n<script>\r\n    // 注册一个全局自定义指令 `v-focus`\r\n    Vue.directive('userdefined', { //用户自定义指令\r\n        // 当被绑定的元素插入到 DOM 中时……\r\n        inserted: function (el) {\r\n            // 聚焦元素\r\n            el.addEventListener(\"click\", function(){\r\n                alert(1)\r\n            });\r\n        }\r\n    })\r\n\r\n\r\n    //关键是在$emit('change', $event.target.checked)  change或者input 事件就是更新model事件\r\n    Vue.component('base-input', {\r\n        model: {\r\n            prop: 'text',\r\n            event: 'input' //或者 event: 'change' 都可以\r\n        },\r\n        props: {\r\n            text: String\r\n        },\r\n        template: `\r\n    <input\r\n      type=\"text\"\r\n      v-bind:value=\"text\"\r\n      v-on:input=\"$emit('input', $event.target.value)\"\r\n    >\r\n  `\r\n    })\r\n\r\n\r\n    //创建一个vue的实例\r\n    new Vue({\r\n        el: \"#demo\",\r\n        comments:true,\r\n        data: {\r\n            isClass:true,\r\n            lovingVue:'123',\r\n            checkbox:['3'],\r\n//            checkbox:false,\r\n            select:3,\r\n            userDefined:'userDefined',\r\n            classA: true,\r\n            list: [\r\n                {\r\n                    selected:false,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    selected:true,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    selected:false,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    selected:false,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    selected:false,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n            ],\r\n\r\n        },\r\n        methods: {\r\n            clickEvent(){\r\n                console.log('clickEvent')\r\n            },\r\n            clickEvent1(){\r\n                console.log('clickEvent1')\r\n            }\r\n\r\n        },\r\n\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        mounted: function(){ //挂载元素，获取到DOM节点\r\n            console.log(this.lovingVue)\r\n            console.log(this.select)\r\n\r\n            setInterval(()=>{\r\n                console.log(this.lovingVue)\r\n            },1000)\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n        },\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "1.html",
          "type": "blob",
          "size": 1.7099609375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"components-demo\">\r\n    <button-counter></button-counter>\r\n</div>\r\n<div id=\"app\">\r\n    {{ message }}\r\n</div>\r\n\r\n<script>\r\n    //   function  person (){\r\n    //     this.options='aaa'\r\n    //   }\r\n    //\r\n    //   person.constructor={aa:'c'}\r\n    //   person.prototype.options='span'\r\n    //\r\n    //   console.log(person.constructor.options)\r\n    //  console.log(Object.create(person.constructor.options));\r\n    //    new Vue({})\r\n    var obj = {\r\n        name: 'name',\r\n        age: 29\r\n    }\r\n    var arr = []\r\n    var res = new Array(obj.length);\r\n\r\n    console.log(obj.length)\r\n    console.log(res)\r\n    console.log(arr.length)\r\n\r\n\r\n    Vue.component('button-counter', {\r\n        data: function () {\r\n            return {\r\n                count: 0\r\n            }\r\n        },\r\n        template: '<button v-on:click=\"count++\">You clicked me {{ count }} times.</button>'\r\n    })\r\n\r\n    new Vue({el: '#components-demo'})\r\n\r\n    var app = new Vue({\r\n        el: '#app',\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        mounted: ()=> { //挂载元素，获取到DOM节点\r\n           setTimeout(()=>{\r\n                this.count=11;\r\n                console.log('this.count='+this.count)\r\n           },5000)\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n       },\r\n        data: {\r\n            count:0,\r\n            message: 'Hello Vue!'\r\n        }\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "10tag标签.html",
          "type": "blob",
          "size": 2.52734375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n\r\n<div id=\"demo\">\r\n        <span style=\"width: 100px;\">\r\n            <i>i 标签\r\n                  在纯文本中，要宽容，把它当作文本来对待\r\n            </i>\r\n            {{lovingVue}}\r\n        </span>\r\n       <div>\r\n            {{select}}\r\n       </div>\r\n</div>\r\n<style>\r\n    .class-a {\r\n        background: red;\r\n    }\r\n\r\n    .class-b {\r\n        background: red;\r\n    }\r\n</style>\r\n<script>\r\n\r\n\r\n    //创建一个vue的实例\r\n    new Vue({\r\n        el: \"#demo\",\r\n        comments:true,\r\n        data: {\r\n            classD:'classD',\r\n            classC:'classC',\r\n            isClass:true,\r\n            lovingVue:'123',\r\n            checkbox:['3'],\r\n//            checkbox:false,\r\n            select:3,\r\n            userDefined:'userDefined',\r\n            classA: true,\r\n            list: [\r\n                {\r\n                    selected:false,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    selected:true,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    selected:false,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    selected:false,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    selected:false,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n            ],\r\n\r\n        },\r\n        methods: {\r\n            clickEvent(){\r\n                console.log('clickEvent')\r\n            },\r\n            clickEvent1(){\r\n                console.log('clickEvent1')\r\n            }\r\n\r\n        },\r\n\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        mounted: function(){ //挂载元素，获取到DOM节点\r\n            console.log(this.lovingVue)\r\n            console.log(this.select)\r\n\r\n            setInterval(()=>{\r\n                console.log(this.lovingVue)\r\n            },1000)\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n        },\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "10标签匹配.html",
          "type": "blob",
          "size": 1.5419921875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"app\">\r\n    <input type=\"text\" v-info v-data/>\r\n   <div>\r\n       <span>\r\n           <i>213</i>\r\n       </span>\r\n   </div>\r\n    <div>\r\n        {{message}}\r\n    </div>\r\n\r\n</div>\r\n<script>\r\n    // 注册一个全局自定义指令 `v-focus`\r\n    Vue.directive('info', {\r\n        // 当被绑定的元素插入到 DOM 中时……\r\n        inserted: function (el) {\r\n\r\n            el.addEventListener('change',function () {\r\n                console.log(this.value)\r\n            },false)\r\n//            // 聚焦元素\r\n//            el.focus()\r\n        }\r\n    })\r\n    // 注册一个全局自定义指令 `v-focus`\r\n    Vue.directive('data', {\r\n        // 当被绑定的元素插入到 DOM 中时……\r\n        inserted: function (el) {\r\n\r\n            el.addEventListener('change',function () {\r\n                console.log(this.value)\r\n            },false)\r\n//            // 聚焦元素\r\n//            el.focus()\r\n        }\r\n    })\r\n\r\n    new Vue(\r\n            {\r\n                el:'#app',\r\n//                comments:true,\r\n                data: {\r\n                    message: 'Hello'\r\n                },\r\n                directives: {\r\n                    focus: {\r\n                        // 指令的定义\r\n                        inserted: function (el) {\r\n                            el.focus()\r\n                        }\r\n                    }\r\n                }\r\n\r\n            })\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "11tag标签.html",
          "type": "blob",
          "size": 0.6298828125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n\r\n</head>\r\n<body>\r\n<p><h1>标签h1</h1></p>\r\n<div  class=\"classB\" class='classA' html='abc' class='[a?aa:bb,cc]'  style='width:100px'>我是div</div>\r\n<div id=\"demo\">\r\n    <div  class=\"classB\" class='classA' html='abc' :class='classC' :class='classD' style='width:100px'>我是div</div>\r\n    <span>我是span</span>\r\n    <!--我是注释标签-->\r\n    <p><h1>标签h1</h1></p>\r\n</div>\r\n<style>\r\n    .class-a {\r\n        background: red;\r\n    }\r\n\r\n    .class-b {\r\n        background: red;\r\n    }\r\n</style>\r\n<script>\r\n\r\n\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "11标签匹配.html",
          "type": "blob",
          "size": 1.4541015625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"app\">\r\n\r\n    <div :class=\"{'a':message}\">\r\n        {{message}}\r\n    </div>\r\n\r\n</div>\r\n<script>\r\n    // 注册一个全局自定义指令 `v-focus`\r\n    Vue.directive('info', {\r\n        // 当被绑定的元素插入到 DOM 中时……\r\n        inserted: function (el) {\r\n\r\n            el.addEventListener('change',function () {\r\n                console.log(this.value)\r\n            },false)\r\n//            // 聚焦元素\r\n//            el.focus()\r\n        }\r\n    })\r\n    // 注册一个全局自定义指令 `v-focus`\r\n    Vue.directive('data', {\r\n        // 当被绑定的元素插入到 DOM 中时……\r\n        inserted: function (el) {\r\n\r\n            el.addEventListener('change',function () {\r\n                console.log(this.value)\r\n            },false)\r\n//            // 聚焦元素\r\n//            el.focus()\r\n        }\r\n    })\r\n\r\n    new Vue(\r\n            {\r\n                el:'#app',\r\n//                comments:true,\r\n                data: {\r\n                    message: 'Hello'\r\n                },\r\n                directives: {\r\n                    focus: {\r\n                        // 指令的定义\r\n                        inserted: function (el) {\r\n                            el.focus()\r\n                        }\r\n                    }\r\n                }\r\n\r\n            })\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "12tag标签.html",
          "type": "blob",
          "size": 2.4833984375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n\r\n<div id=\"demo\">\r\n       <i></i>\r\n        <span style=\"width: 100px;\">\r\n\r\n              span 节点\r\n               {{isClass}}\r\n              {{number}}\r\n        </span>\r\n\r\n</div>\r\n<style>\r\n    .class-a {\r\n        background: red;\r\n    }\r\n\r\n    .class-b {\r\n        background: red;\r\n    }\r\n</style>\r\n<script>\r\n\r\n\r\n    //创建一个vue的实例\r\n    new Vue({\r\n        el: \"#demo\",\r\n        comments:true,\r\n        data: {\r\n            number:1,\r\n            classD:'classD',\r\n            classC:'classC',\r\n            isClass:true,\r\n            lovingVue:'123',\r\n            checkbox:['3'],\r\n//            checkbox:false,\r\n            select:3,\r\n            userDefined:'userDefined',\r\n            classA: true,\r\n            list: [\r\n                {\r\n                    selected:false,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    selected:true,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    selected:false,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    selected:false,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    selected:false,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n            ],\r\n\r\n        },\r\n        methods: {\r\n            clickEvent(){\r\n                console.log('clickEvent')\r\n            },\r\n            clickEvent1(){\r\n                console.log('clickEvent1')\r\n            }\r\n\r\n        },\r\n\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        mounted: function(){ //挂载元素，获取到DOM节点\r\n            console.log(this.lovingVue)\r\n            console.log(this.select)\r\n\r\n            setInterval(()=>{\r\n                this.number++\r\n                console.log(this.lovingVue)\r\n            },3000)\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n        },\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "12高阶组件.html",
          "type": "blob",
          "size": 2.490234375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"app5\">\r\n    <input v-model=\"query\">\r\n    <my-transition :query=\"query\" :list=\"list\">\r\n        <li v-for=\"(item, index) in computedList\"\r\n            :key=\"item.msg\"\r\n            :data-index=\"index\">\r\n            {{item.msg}}\r\n        </li>\r\n    </my-transition>\r\n    <script>\r\n        Vue.component('my-transition', {\r\n            functional:true,\r\n            render:function (h, ctx) {\r\n                var data = {\r\n                    props:{\r\n                        tag:'ul',\r\n                        css:false\r\n                    },\r\n                    on:{\r\n                        beforeEnter:function (el) {\r\n                            el.style.opacity = 0\r\n                            el.style.height = 0\r\n                        },\r\n                        enter:function (el, done) {\r\n                            var delay = el.dataset.index * 150\r\n                            setTimeout(function () {\r\n                                Velocity(el, {opacity:1, height:'1.6em'},{complete:done})\r\n                            }, delay)\r\n                        },\r\n                        leave:function (el, done) {\r\n                            var delay = el.dataset.index * 150\r\n                            setTimeout(function () {\r\n                                Velocity(el, {opacity:0, height:0}, {complete:done})\r\n                            }, delay)\r\n                        }\r\n                    }\r\n                }\r\n                return h('transition-group', data, ctx.children)\r\n            },\r\n            props:['query', 'list']\r\n        })\r\n\r\n        var app5 = new Vue({\r\n            el:'#app5',\r\n            data:{\r\n                query:'',\r\n                list:[\r\n                    {msg:'Bruce Lee'},\r\n                    {msg:'Jackie Chan'},\r\n                    {msg:'Chuck Norris'},\r\n                    {msg:'Jet Li'},\r\n                    {msg:'Kung Furry'},\r\n                    {msg:'Chain Zhang'},\r\n                    {msg:'Iris Zhao'},\r\n                ]\r\n            },\r\n            computed:{\r\n                computedList:function () {\r\n                    var vm = this\r\n                    return this.list.filter(function (item) {\r\n                        return item.msg.toLowerCase().indexOf(vm.query.toLowerCase()) !== -1\r\n                    })\r\n                }\r\n            },\r\n        })\r\n    </script>\r\n</div>\r\n</body>\r\n</html>"
        },
        {
          "name": "13组件.html",
          "type": "blob",
          "size": 2.771484375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n\r\n<div id=\"demo\">\r\n    <i></i>\r\n    <span style=\"width: 100px;\">\r\n\r\n              span 节点\r\n               {{isClass}}\r\n        </span>\r\n    <button-counter mgs=\"你好\"></button-counter>\r\n\r\n</div>\r\n<style>\r\n    .class-a {\r\n        background: red;\r\n    }\r\n\r\n    .class-b {\r\n        background: red;\r\n    }\r\n</style>\r\n<script>\r\n    // 定义一个名为 button-counter 的新组件\r\n    Vue.component('button-counter', {\r\n        props:['mgs'],\r\n        data: function () {\r\n            return {\r\n                count: 0\r\n            }\r\n        },\r\n        template: '<button v-on:click=\"count++\">You clicked me {{ count }} times.{{mgs}}</button>'\r\n    })\r\n\r\n\r\n    //创建一个vue的实例\r\n    new Vue({\r\n        el: \"#demo\",\r\n        comments:true,\r\n        data: {\r\n            classD:'classD',\r\n            classC:'classC',\r\n            isClass:true,\r\n            lovingVue:'123',\r\n            checkbox:['3'],\r\n//            checkbox:false,\r\n            select:3,\r\n            userDefined:'userDefined',\r\n            classA: true,\r\n            list: [\r\n                {\r\n                    selected:false,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    selected:true,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    selected:false,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    selected:false,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    selected:false,\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n            ],\r\n\r\n        },\r\n        methods: {\r\n            clickEvent(){\r\n                console.log('clickEvent')\r\n            },\r\n            clickEvent1(){\r\n                console.log('clickEvent1')\r\n            }\r\n\r\n        },\r\n\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        mounted: function(){ //挂载元素，获取到DOM节点\r\n            console.log(this.lovingVue)\r\n            console.log(this.select)\r\n\r\n            setInterval(()=>{\r\n                console.log(this.lovingVue)\r\n            },1000)\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n        },\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "14高阶组件.html",
          "type": "blob",
          "size": 2.509765625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"app5\">\r\n    <input v-model=\"query\">\r\n    <my-transition :query=\"query\" :list=\"list\">\r\n        <li v-for=\"(item, index) in computedList\"\r\n            :key=\"item.msg\"\r\n            :data-index=\"index\">\r\n            {{item.msg}}\r\n        </li>\r\n    </my-transition>\r\n</div>\r\n\r\n<script>\r\n    Vue.component('my-transition', {\r\n        functional:true,\r\n        render:function (h, ctx) {\r\n            var data = {\r\n                props:{\r\n                    tag:'ul',\r\n                    css:false\r\n                },\r\n                on:{\r\n                    beforeEnter:function (el) {\r\n                        el.style.opacity = 0\r\n                        el.style.height = 0\r\n                    },\r\n                    enter:function (el, done) {\r\n                        var delay = el.dataset.index * 150\r\n                        setTimeout(function () {\r\n                            Velocity(el, {opacity:1, height:'1.6em'},{complete:done})\r\n                        }, delay)\r\n                    },\r\n                    leave:function (el, done) {\r\n                        var delay = el.dataset.index * 150\r\n                        setTimeout(function () {\r\n                            Velocity(el, {opacity:0, height:0}, {complete:done})\r\n                        }, delay)\r\n                    }\r\n                }\r\n            }\r\n            var vonde = h('transition-group', data, ctx.children)\r\n            console.log(vonde)\r\n            debugger;\r\n            return vonde;\r\n        },\r\n        props:['query', 'list']\r\n    })\r\n\r\n    var app5 = new Vue({\r\n        el:'#app5',\r\n        data:{\r\n            query:'',\r\n            list:[\r\n                {msg:'Bruce Lee'},\r\n                {msg:'Jackie Chan'},\r\n                {msg:'Chuck Norris'},\r\n                {msg:'Jet Li'},\r\n                {msg:'Kung Furry'},\r\n                {msg:'Chain Zhang'},\r\n                {msg:'Iris Zhao'},\r\n            ]\r\n        },\r\n        computed:{\r\n            computedList:function () {\r\n                var vm = this\r\n                return this.list;\r\n                return this.list.filter(function (item) {\r\n                    console.log('=item.msg.toLowerCase()=')\r\n                    console.log(item.msg.toLowerCase())\r\n                    return item.msg.toLowerCase().indexOf(vm.query.toLowerCase()) !== -1\r\n                })\r\n            }\r\n        },\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "15 vonde.html",
          "type": "blob",
          "size": 1.1953125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n        <div id=\"demo\">\r\n                   <i></i>\r\n                   <span style=\"width: 100px;\">\r\n\r\n                span 节点\r\n        {{isClass}}\r\n         </span>\r\n\r\n         </div>\r\n\r\n<script>\r\n    var app = new Vue({\r\n\r\n        el: '#demo',\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        mounted: ()=> { //挂载元素，获取到DOM节点\r\n            setTimeout(()=>{\r\n//                this.count+=1;\r\n//                console.log('this.count='+this.count)\r\n            },1000)\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n        },\r\n        data:function () {\r\n            return  {\r\n                count:0,\r\n                isClass:true,\r\n\r\n                message: 'Hello Vue!1111111'\r\n            }\r\n        },\r\n//        data: {\r\n//            count:0,\r\n//            message: 'Hello Vue!'\r\n//        }\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "16transition动画1.html",
          "type": "blob",
          "size": 0.7177734375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<style>\r\n    .fade-enter-active,\r\n    .fade-leave-active {\r\n        transition: opacity .5s;\r\n    }\r\n    .fade-enter,\r\n    .fade-leave-to  {\r\n        opacity: 0;\r\n    }\r\n</style>\r\n<body>\r\n<div id=\"demo\">\r\n    <button v-on:click=\"show = !show\">\r\n        Toggle\r\n    </button>\r\n    <transition\r\n            name=\"fade\"\r\n            :duration=\"10000\"\r\n    >\r\n        <p v-if=\"show\">hello</p>\r\n    </transition>\r\n</div>\r\n\r\n    <script>\r\n        new Vue({\r\n            el: '#demo',\r\n            data: {\r\n                show: true\r\n            }\r\n        })\r\n    </script>\r\n</div>\r\n</body>\r\n</html>"
        },
        {
          "name": "16transition动画2.html",
          "type": "blob",
          "size": 1.01953125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<style>\r\n    /* 可以设置不同的进入和离开动画 */\r\n    /* 设置持续时间和动画函数 */\r\n    .slide-fade-enter-active {\r\n        transition: all .3s ease;\r\n    }\r\n    .slide-fade-leave-active {\r\n        transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);\r\n    }\r\n    .slide-fade-enter, .slide-fade-leave-to\r\n        /* .slide-fade-leave-active for below version 2.1.8 */ {\r\n        transform: translateX(10px);\r\n        opacity: 0;\r\n    }\r\n</style>\r\n<body>\r\n<div id=\"demo\">\r\n    <div id=\"example-1\">\r\n        <button @click=\"show = !show\">\r\n            Toggle render\r\n        </button>\r\n        <transition name=\"slide-fade\">\r\n            <p v-if=\"show\">hello</p>\r\n        </transition>\r\n    </div>\r\n\r\n    <script>\r\n        new Vue({\r\n            el: '#example-1',\r\n            data: {\r\n                show: true\r\n            }\r\n        })\r\n    </script>\r\n</div>\r\n</body>\r\n</html>"
        },
        {
          "name": "16transition动画3.html",
          "type": "blob",
          "size": 0.646484375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<style>\r\n    .v-enter-active,\r\n    .v-leave-active {\r\n        transition: opacity .5s;\r\n    }\r\n    .v-enter,\r\n    .v-leave-to  {\r\n        opacity: 0;\r\n    }\r\n</style>\r\n<body>\r\n<div id=\"demo\">\r\n    <button v-on:click=\"show = !show\">\r\n        Toggle\r\n    </button>\r\n    <transition >\r\n        <p v-if=\"show\">hello</p>\r\n    </transition>\r\n</div>\r\n\r\n    <script>\r\n        new Vue({\r\n            el: '#demo',\r\n            data: {\r\n                show: true\r\n            }\r\n        })\r\n    </script>\r\n</div>\r\n</body>\r\n</html>"
        },
        {
          "name": "17transition动画中的appear.html",
          "type": "blob",
          "size": 1.84765625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<style>\r\n    .custom-appear-active{\r\n        /*color: red;*/\r\n        background: red;\r\n        transition: all 2s ease;\r\n    }\r\n    .custom-appear{\r\n        font-size: 40px;\r\n        /*color: #e069e2;*/\r\n        background: blue;\r\n    }\r\n    .custom-appear-to{\r\n        /*color: #e29138;*/\r\n        background: burlywood;\r\n    }\r\n</style>\r\n<body>\r\n<!--\r\n         关于appear的用法和enter的用法相似，它只是在第一次渲染的时候才会起作用。看完整的代码：\r\n    但是这里有一些问题：关于appear-class、 appear-to-class、 appear-active-class的相同属性那个起作用的问题。\r\n    四种情况：（与他们在style中的排列顺序有关系）\r\n    1、appear-class、 appear-to-class、 appear-active-class或者 appear-to-class、appear-class、 appear-active-class的排列顺序，此时只有appear-active-class的属性起作用。\r\n    2、appear-active-class、appear-class、 appear-to-class\r\n    此时appear-active-class的不起作用，由appear-class过渡到appear-to-class属性。\r\n    3、appear-class、appear-active-class、 appear-to-class\r\n    此时appear-class属性不起作用，由appear-active-class过渡到 appear-to-class属性。\r\n    4、 appear-to-class、 appear-active-class、appear-class\r\n    此时appear-to-class不起作用，由appear-class过渡到 appear-active-class属性。\r\n    enter也有相似的问题\r\n -->\r\n<div id=\"app\">\r\n    <transition\r\n            appear\r\n            appear-class=\"custom-appear\"\r\n            appear-to-class=\"custom-appear-to\"\r\n            appear-active-class=\"custom-appear-active\"\r\n    >\r\n        <p>appear</p>\r\n    </transition>\r\n</div>\r\n<script>\r\n\r\n    new Vue({\r\n        el: \"#app\"\r\n    })\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "2.html",
          "type": "blob",
          "size": 0.5087890625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"example\">\r\n    <my-component  msg=\"hello world\" ></my-component>\r\n</div>\r\n<script >\r\n\r\n    // 注册\r\n    Vue.component('my-component', {\r\n        _isComponent:true,\r\n        props: ['msg'],\r\n        template: '<div>{{msg}} A custom component!</div>'\r\n    })\r\n\r\n    // 创建根实例\r\n    new Vue({\r\n        el: '#example'\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "3.html",
          "type": "blob",
          "size": 1.9033203125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"demo\">\r\n    {{message}}\r\n    <template></template>\r\n</div>\r\n<script >\r\n    //创建一个子组件\r\n    var Child=Vue.component(\"child-component\",{\r\n       //_isComponent:true,\r\n        template:\"<div>我是子组件 {{message}}</div>\",\r\n        props: ['message'],\r\n    });\r\n    //创建一个父组件\r\n    Vue.component(\"parent-component\",{\r\n         _isComponent:true,\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n        },\r\n        mounted:function () {\r\n           setTimeout(()=>{\r\n                this.message.push(1);\r\n           },1000)\r\n        },\r\n        template:\"<div>{{message}}<child-component  :message='message'></child-component></div>\", //注意元素模板只能有一个最上层元素，也就是用一个div包裹整个模板。\r\n        components:{\"child-component\":Child},//进行子组件关联，注意child-component需要引号。\r\n        data:function(){//组件中的data是一个函数\r\n            return {\r\n                message:[]\r\n            }\r\n        }\r\n    })\r\n    //创建一个vue的实例\r\n    new Vue({\r\n        el:\"#demo\",\r\n        data: {\r\n            message: 'Hello Vue!'\r\n        },\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n//        mounted: ()=> { //挂载元素，获取到DOM节点\r\n//\r\n//        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n        },\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "4.html",
          "type": "blob",
          "size": 0.8896484375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n\r\n    \r\n\r\n\r\n</head>\r\n<body>\r\n\r\n<div id=\"app\">\r\n    {{ message }}\r\n</div>\r\n\r\n\r\n\r\n<script>\r\n\r\n\r\n    var app = new Vue({\r\n        el: '#app',\r\n  \r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        mounted: ()=> { //挂载元素，获取到DOM节点\r\n//           setTimeout(()=>{\r\n//                this.count+=1;\r\n//                console.log('this.count='+this.count)\r\n//           },5000)\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n       },\r\n        data: {\r\n            count:0,\r\n            message: 'Hello Vue!'\r\n        }\r\n    })\r\n\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "5.html",
          "type": "blob",
          "size": 2.0537109375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"demo\">\r\n    {{message}}\r\n    <parent-component></parent-component>\r\n    <ul>\r\n        <li v-for=\"(item,index,key) in  list\">\r\n             {{item}}\r\n        </li>\r\n    </ul>\r\n</div>\r\n<script >\r\n    //创建一个子组件\r\n    var Child=Vue.component(\"child-component\",{\r\n       //_isComponent:true,\r\n        template:\"<div>我是子组件 {{message}}</div>\",\r\n        props: ['message'],\r\n    });\r\n    //创建一个父组件\r\n    Vue.component(\"parent-component\",{\r\n         _isComponent:true,\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n        },\r\n        mounted:function () {\r\n           setTimeout(()=>{\r\n                this.message.push(1);\r\n           },1000)\r\n        },\r\n        template:\"<div>{{message}}<child-component  :message='message'></child-component></div>\", //注意元素模板只能有一个最上层元素，也就是用一个div包裹整个模板。\r\n        components:{\"child-component\":Child},//进行子组件关联，注意child-component需要引号。\r\n        data:function(){//组件中的data是一个函数\r\n            return {\r\n                message:[]\r\n            }\r\n        }\r\n    })\r\n    //创建一个vue的实例\r\n    new Vue({\r\n        el:\"#demo\",\r\n        data: {\r\n            list:[1,2,3,4,5,6,7,8],\r\n            message: 'Hello Vue!'\r\n        },\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        mounted: ()=> { //挂载元素，获取到DOM节点\r\n\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n        },\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "6.html",
          "type": "blob",
          "size": 0.248046875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n\r\n\r\n    \r\n\r\n\r\n</head>\r\n<body>\r\n\r\n\r\n<script>\r\nvar string = 'abcde';\r\n    var keys = Object.keys(string);\r\nconsole.log(keys)\r\n\r\n\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "6属性.html",
          "type": "blob",
          "size": 0.9423828125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"demo\"  :class=\"classA ? 'class-a' : 'class-b' \">\r\n    {{message}}\r\n\r\n</div>\r\n<style>\r\n    .class-a{\r\n        background: red;\r\n    }\r\n    .class-b{\r\n        background: red;\r\n    }\r\n</style>\r\n<script >\r\n\r\n    //创建一个vue的实例\r\n    new Vue({\r\n        el:\"#demo\",\r\n        data: {\r\n            classA:true,\r\n            list:[1,2,3,4,5,6,7,8],\r\n            message: 'Hello Vue!'\r\n        },\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        mounted: ()=> { //挂载元素，获取到DOM节点\r\n\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n        },\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "7for属性.html",
          "type": "blob",
          "size": 0.9248046875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"demo\"   >\r\n  <ul>\r\n      <li v-for=\"(item,index) in list\">{{item}}</li>\r\n  </ul>\r\n\r\n</div>\r\n<style>\r\n    .class-a{\r\n        background: red;\r\n    }\r\n    .class-b{\r\n        background: red;\r\n    }\r\n</style>\r\n<script >\r\n\r\n    //创建一个vue的实例\r\n    new Vue({\r\n        el:\"#demo\",\r\n        data: {\r\n            classA:true,\r\n            list:[1,2,3,4,5,6,7,8],\r\n\r\n        },\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        mounted: ()=> { //挂载元素，获取到DOM节点\r\n\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n        },\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "8event属性.html",
          "type": "blob",
          "size": 2.2119140625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"demo\">\r\n    <ul>\r\n        <li v-for=\"(item,index) in list\"    v-userdefined >\r\n            <!--<img v-bind:src=\"item.url\"/>-->\r\n            <div></div>\r\n        </li>\r\n    </ul>\r\n\r\n</div>\r\n<style>\r\n    .class-a {\r\n        background: red;\r\n    }\r\n\r\n    .class-b {\r\n        background: red;\r\n    }\r\n</style>\r\n<script>\r\n    // 注册一个全局自定义指令 `v-focus`\r\n    Vue.directive('userdefined', { //用户自定义指令\r\n        // 当被绑定的元素插入到 DOM 中时……\r\n        inserted: function (el) {\r\n            // 聚焦元素\r\n            el.addEventListener(\"click\", function(){\r\n                alert(1)\r\n            });\r\n        }\r\n    })\r\n\r\n    //创建一个vue的实例\r\n    new Vue({\r\n        el: \"#demo\",\r\n        data: {\r\n            userDefined:'userDefined',\r\n            classA: true,\r\n            list: [\r\n                {\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n                {\r\n                    url: 'http://i4.265g.com/images/201902/201902280644122663.jpg'\r\n                },\r\n            ],\r\n\r\n        },\r\n        methods: {\r\n            clickEvent(){\r\n                console.log('clickEvent')\r\n            },\r\n            clickEvent1(){\r\n                console.log('clickEvent1')\r\n            }\r\n\r\n        },\r\n\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        mounted: ()=> { //挂载元素，获取到DOM节点\r\n\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n        },\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "HTMLUnknownElement.html",
          "type": "blob",
          "size": 0.513671875,
          "content": "<html>\r\n    <head>\r\n        <meta>\r\n    </head>\r\n    <body>\r\n        <script>\r\n            var el = document.createElement('add-options');\r\n            console.log(el);\r\n            console.log(window.HTMLUnknownElement);\r\n            console.log( window.HTMLElement);\r\n\r\n            console.log(el.constructor === window.HTMLUnknownElement ||\r\n                el.constructor === window.HTMLElement)\r\n               console.log(   /HTMLUnknownElement/.test('HTMLUnknownElement')  ); \r\n\r\n        </script>\r\n    </body>\r\n</html>"
        },
        {
          "name": "IS_REGEX_CAPTURING_BROKEN.html",
          "type": "blob",
          "size": 0.35546875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n\r\n\r\n</head>\r\n\r\n\r\n<script>\r\n    var IS_REGEX_CAPTURING_BROKEN = false;\r\n    'x'.replace(/x(.)?/g, function (m, g) {\r\n        console.log(g)\r\n        IS_REGEX_CAPTURING_BROKEN = g === '';\r\n    });\r\n    console.log(IS_REGEX_CAPTURING_BROKEN)\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "JS里charCodeAt()和fromCharCode().html",
          "type": "blob",
          "size": 0.23828125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n\r\n<script>\r\n    console.log('abc'.charCodeAt(1))\r\n    console.log(String.fromCharCode(0x5D));\r\n\r\n\r\n\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "JS里charCodeAt()和fromCharCode()方法拓展应用：加密与解密.html",
          "type": "blob",
          "size": 2.6845703125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<p><textarea id=\"text1\" name=\"textfield\" cols=\"50\" rows=\"5\">钱庄王员外这个人怎么样?</textarea></p>\r\n<input type=\"button\" name=\"Button1\" value=\"加密\" onClick=\"text1.value = MySign.Encrypt(text1.value);\">\r\n<input type=\"button\" name=\"Button2\" value=\"解密\" onClick=\"text1.value = MySign.UnEncrypt(text1.value);\">\r\n\r\n<script>\r\n    //    JS实现客户端的网页加密解密技术，可用作选择性隐蔽展示。当然客户端的加密安全度是不能与服务器相提并论，肯定不能用于密码这类内容的加密，但对于一般级别的内容用作展示已经够了。\r\n    //    JS加密与解密的解决方案有很多，本文则利用String对象的charCodeAt()方法和fromCharCode()方法对字符的ASCII编码进行获取和修改。\r\n    //    加密,解密代码：\r\n    var MySign = {\r\n        //加密/解密次数\r\n        num: 0,\r\n        //加密\r\n        Encrypt: function (Text) {\r\n            this.num = this.num + 1;\r\n            output = new String;\r\n            alterText = new Array();\r\n            varCost = new Array();\r\n            TextSize = Text.length;\r\n            for (i = 0; i < TextSize; i++) {\r\n                idea = Math.round(Math.random() * 111) + 77;\r\n                alterText[i] = Text.charCodeAt(i) + idea;\r\n                varCost[i] = idea;\r\n            }\r\n            for (i = 0; i < TextSize; i++) {\r\n                output += String.v(alterText[i], varCost[i]);\r\n            }\r\n            //text1.value = output;\r\n            return output;\r\n        },\r\n\r\n        //解密\r\n        UnEncrypt: function (Text) {\r\n            if (this.num > 0) {\r\n                this.num = this.num - 1;\r\n                output = new String;\r\n                alterText1 = new Array();\r\n                varCost1 = new Array();\r\n                TextSize = Text.length;\r\n                for (i = 0; i < TextSize; i++) {\r\n                    alterText[i] = Text.charCodeAt(i);\r\n                    varCost[i] = Text.charCodeAt(i + 1);\r\n                }\r\n                for (i = 0; i < TextSize; i = i + 2) {\r\n                    output += String.fromCharCode(alterText[i] - varCost[i]);\r\n                }\r\n                //text1.value = output;\r\n                return output;\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    //测试代码\r\n    var testString = \"光头强，还不去砍树？\";\r\n    console.log(testString);\r\n\r\n    var sign = MySign.Encrypt(testString); //凑妣o忕ｧ[還¬什³呯´硠S桲aﾁb\r\n    var sign2 = MySign.UnEncrypt(sign); //光头强，还不去砍树？\r\n\r\n    console.log(sign);\r\n    console.log(sign2);\r\n\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "MessageChannel.html",
          "type": "blob",
          "size": 0.6943359375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<iframe src=\"https://www.baidu.com/\"></iframe>\r\n  <script>\r\n      var channel = new MessageChannel();\r\n      var para = document.querySelector('p');\r\n\r\n      var ifr = document.querySelector('iframe');\r\n      var otherWindow = ifr.contentWindow;\r\n\r\n      ifr.addEventListener(\"load\", iframeLoaded, false);\r\n\r\n      function iframeLoaded() {\r\n          otherWindow.postMessage('Hello from the main page!', '*', [channel.port2]);\r\n      }\r\n\r\n      channel.port1.onmessage = handleMessage;\r\n      function handleMessage(e) {\r\n          para.innerHTML = e.data;\r\n      }\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "MessageChannel_0.html",
          "type": "blob",
          "size": 0.57421875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    var channel = new MessageChannel();\r\n    var port1 = channel.port1;\r\n    var port2 = channel.port2;\r\n    port1.onmessage = function(event) {\r\n        console.log(\"port1收到来自port2的数据：\" + event.data);\r\n    }\r\n    port2.onmessage = function(event) {\r\n        console.log(\"port2收到来自port1的数据：\" + event.data);\r\n    }\r\n\r\n    port1.postMessage(\"发送给port2\");\r\n    port2.postMessage(\"发送给port1\");\r\n\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "MessageChannel_1.html",
          "type": "blob",
          "size": 1.1826171875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    function random(min, max) {\r\n        return min + Math.floor((max - min + 1) * Math.random());\r\n    }\r\n\r\n     //实例化对象\r\n    var CalculatorChannel = new MessageChannel();\r\n\r\n    var newsOne = CalculatorChannel.port1; //端口1\r\n    var newsTow = CalculatorChannel.port2; //端口2\r\n\r\n\r\n    newsOne.onmessage = function(event) {\r\n        //console.log(\"port1收到来自port2的数据：\" + event.data);\r\n        var d = event.data;\r\n        console.log('num1: ' + d.num1, 'num2: ' + d.num2);\r\n        var sum = d.num1 + d.num2;\r\n        //推送信息 更新  newsTow 推送信息 像消息体2推送信息\r\n         newsOne.postMessage(sum)\r\n    }\r\n\r\n\r\n\r\n    newsTow.onmessage = function(event) {\r\n        //console.log(\"port2收到来自port1的数据：\" + event.data);\r\n        console.log('结果为：' + event.data);\r\n    }\r\n\r\n    // 生成数字\r\n    setInterval(() => {\r\n        //像 消息体 1 推送信息\r\n        newsTow.postMessage({\r\n            num1: random(1, 10),\r\n            num2: random(1, 10)\r\n        });\r\n    }, 1000);\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "Proxy_1.html",
          "type": "blob",
          "size": 0.7314453125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      //Proxy 有两个参数，第一个是目标对象，第二个参数是设置Proxy的代理拦截方法\r\n      var obj = new Proxy({}, {\r\n          get: function (target, key, receiver) {\r\n              console.log(`getting ${key}!`);\r\n              return Reflect.get(target, key, receiver);\r\n          },\r\n          set: function (target, key, value, receiver) {\r\n              console.log(`setting ${key}!`);\r\n              return Reflect.set(target, key, value, receiver);\r\n          }\r\n      });\r\n      obj.count = 1;\r\n      obj.count\r\n      //  setting count!\r\n//      ++obj.count\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "Proxy_2.html",
          "type": "blob",
          "size": 0.4521484375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      //下面是另一个拦截读取属性行为的例子。\r\n      var proxy = new Proxy({}, {\r\n          get: function(target, property) {\r\n              return 35;\r\n          }\r\n      });\r\n\r\n      console.log(proxy.time) // 35\r\n      console.log(proxy.name) // 35\r\n      console.log(proxy.title) // 35\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "Proxy_3.html",
          "type": "blob",
          "size": 0.3974609375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      //如果handler没有设置任何拦截，那就等同于直接通向原对象。\r\n      var target = {};\r\n      var handler = {};\r\n      var proxy = new Proxy(target, handler);\r\n      proxy.a = 'b';\r\n      console.log(target.a)\r\n        // \"b\"\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "Proxy_4.html",
          "type": "blob",
          "size": 0.7060546875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      //get方法的用法，上文已经有一个例子，下面是另一个拦截读取操作的例子。\r\n      var person = {\r\n          name: \"张三\"\r\n      };\r\n\r\n      var proxy = new Proxy(person, {\r\n          get: function(target, property) {\r\n              if (property in target) {\r\n                  return target[property];\r\n              } else {\r\n                  throw new ReferenceError(\"Property \\\"\" + property + \"\\\" does not exist.\");\r\n              }\r\n          }\r\n      });\r\n\r\n      proxy.name // \"张三\"\r\n      proxy.age // 抛出一个错误\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "Proxy_5.html",
          "type": "blob",
          "size": 0.7880859375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      //下面的例子使用get拦截，实现数组读取负数的索引。\r\n      function createArray(...elements) {\r\n          let handler = {\r\n              get(target, propKey, receiver) {\r\n                  let index = Number(propKey);\r\n                  if (index < 0) {\r\n                      propKey = String(target.length + index);\r\n                  }\r\n                  return Reflect.get(target, propKey, receiver);\r\n              }\r\n          };\r\n\r\n          let target = [];\r\n          target.push(...elements);\r\n          return new Proxy(target, handler);\r\n      }\r\n\r\n      let arr = createArray('a', 'b', 'c');\r\n      arr[-1] // c\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "Proxy_6.html",
          "type": "blob",
          "size": 1.3671875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      var doc = new Proxy({}, {\r\n          \"get\": function (oTarget, sKey) {\r\n\r\n              console.log('get')\r\n              return oTarget[sKey]\r\n              return Reflect.get(oTarget, sKey);\r\n          },\r\n          \"set\": function (oTarget, sKey, vValue) {\r\n              console.log('set')\r\n               return Reflect.set(oTarget, sKey, vValue);\r\n          },\r\n          \"deleteProperty\": function (oTarget, sKey) {\r\n\r\n              console.log('deleteProperty')\r\n\r\n          },\r\n          \"enumerate\": function (oTarget, sKey) {\r\n              console.log('enumerate')\r\n\r\n          },\r\n          \"ownKeys\": function (oTarget, sKey) {\r\n              console.log('ownKeys')\r\n\r\n          },\r\n          \"has\": function (oTarget, sKey) {\r\n              console.log('has')\r\n              console.log(oTarget)\r\n              console.log(sKey)\r\n              return oTarget[sKey]\r\n          },\r\n          \"defineProperty\": function (oTarget, sKey, oDesc) {\r\n              console.log('defineProperty')\r\n          },\r\n          \"getOwnPropertyDescriptor\": function (oTarget, sKey) {\r\n              console.log('getOwnPropertyDescriptor')\r\n          },\r\n      });\r\n      doc.a=10;\r\n      console.log(doc.a)\r\n      console.log('a' in doc)\r\n\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 58.0966796875,
          "content": " ***English document***: https://github.com/ygs-code/vue/blob/master/README_EN.md\n#   开始\n\n vue源码业余时间差不多看了一年，以前在网上找帖子，发现很多帖子很零散，都是一部分一部分说，断章的很多，所以自己下定决定一行行看，经过自己坚持与努力，现在基本看完了   。这个vue源码逐行分析，我基本每一行都打上注释，加上整个框架的流程思维导图，基本上是小白也能看懂的vue源码了。\n\n   说的非常的详细，里面的源码注释，有些是自己多年开发vue经验而获得的，有些是自己跑上下文程序知道的， 如果有不足的地方可以联系我QQ群 ：302817612  修改，或者发邮件给我281113270@qq.com  谢谢。 如果大家觉得不错请动动小手指，帮我点一个satr，你们的支持就是我的动力。\n\nvue 如何去看vue源码呢？其实mvvm源码并没有想象中那么神秘，从12年开始到至今mvvm发展已经有了十几年历史了，从以前直接操作dom的jq发展有十几年历史，但是这十几年历史发展，并没有多大的改变，思想还是那些，模块还是分为几大块：\n\n## 1.模板转换：\n\n 就是我们写的 vue 模板 或者是 react jsx 我们都可以理解是模板，然后他会经过 模板编译转换，像vue的话是进过一个方法paseHTML方法转换成ast树，里面的paseHTML用while 循环模板，然后经过正则 匹配到vue指令，还有vue的属性，事件方法等，收集到一个ast树中。\n\n## 2.数据相应：\n\n vue是一个双数据相应的框架，底层用的是Object.defineProperty 监听和挟持数据改变，然后调用回调方法更新视图更新。双数据绑定原理是：obersve()方法判断value没有没有__ob___属性并且是不是Obersve实例化的，  value是不是Vonde实例化的，如果不是则调用Obersve 去把数据添加到观察者中，为数据添加__ob__属性， Obersve 则调用defineReactive方法，该方法是连接Dep和wacther方法的一个通道，利用Object.definpropty() 中的get和set方法 监听数据。get方法中是new Dep调用depend()。为dep添加一个wacther类，watcher中有个方法是更新视图的是run调用update去更新vonde 然后更新视图。 然后set方法就是调用dep中的notify 方法调用wacther中的run 更新视图\n\n## 3.虚拟dom：\n\n vnode，在vue用vnode是通过 ast对象，在转义成vonde 需要渲染的函数，比如_c('div'  s(''))  等这类的函数，编译成vonde 虚拟dom。然后到updata更新数据 调用__patch__ 把vonde 通过diff算法变成正真正的dom元素。\n\n##   4.diif算法：\n\n​     vue2 的diff 算法是深度优先算法遍历，然后对比算法是通过 新旧的vnode对比先对比他们的基本属性，比如key 标签等，如果是相同则通过diff算法对比然后diff算法是新旧的vnode对比，然后有四个指针索引，两个新的vnode开始指针和新的 vnode 结束指针，两个旧的vnode开始指针和旧的 vnode 结束指针。然后先判断vnode是否为空，如果为空就往中间靠拢  开始的指针++  结束的指针 --。然后两头对比之后，在交叉对比，直到找不到相同的vnode之后如果多出的就删除，如果少的话就新增，然后对比完之后在更新到真实dom。\n\n\n\n\n\n源码入口流程 vue源码解读流程 1.new Vue 调用的是 Vue.prototype._init  从该函数开始 经过 $options 参数合并之后 initLifecycle 初始化生命周期标志 初始化事件，初始化渲染函数。初始化状态就是数据。把数据添加到观察者中实现双数据绑定。\n\n# new Vue实例化程序入口\n\n```\n Vue.prototype._init = function (options) { //初始化函数\n  //... 省略code\n  \n    initLifecycle(vm); //初始化生命周期 标志\n            initEvents(vm); //初始化事件\n            initRender(vm); // 初始化渲染\n            callHook(vm, 'beforeCreate'); //触发beforeCreate钩子函数\n            initInjections(vm); // resolve injections before data/props 在数据/道具之前解决注入问题 //初始化 inject\n            initState(vm);  //    //初始化状态\n            initProvide(vm); // resolve provide after data/props  解决后提供数据/道具  provide 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性，用于组件之间通信。\n            callHook(vm, 'created'); //触发created钩子函数\n  \n  \n  //... 省略code\n    // 然后挂载模板，这里大概就是把模板转换成ast的入口\n    vm.$mount(vm.$options.el);\n  \n }\n```\n\n\n\n# 查找和挂载模板\n\n​    vm.$mount 进入这个挂载模板方法，判断是否有 render 函数 或者是template，如果没有则使用el.outerHTML , 实际上这里就是要拿到模板的html内容\n\n```\n Vue.prototype.$mount = function (el, hydrating) { \n   //... 省略code\n       el = el && query(el); //获取dom\n         if (!options.render) {\n              if (template) {\n              \n              }else if (template.nodeType) { \n                  template = template.innerHTML;\n              } else if (el) {\n                template = getOuterHTML(el);\n              }\n         ｝\n          \n         \n              // render 函数 也是 ast 转换 方法\n                var ref = compileToFunctions(\n                    template, //模板字符串\n                    {\n                        shouldDecodeNewlines: shouldDecodeNewlines, //flase //IE在属性值中编码换行，而其他浏览器则不会\n                        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref, //true chrome在a[href]中编码内容\n                        delimiters: options.delimiters, //改变纯文本插入分隔符。修改指令的书写风格，比如默认是{{mgs}}  delimiters: ['${', '}']之后变成这样 ${mgs}\n                        comments: options.comments //当设为 true 时，将会保留且渲染模板中的 HTML 注释。默认行为是舍弃它们。\n                    },\n                    this\n                );\n         \n         \n       \n   \n     //... 省略code\n      //执行$mount方法     用$mount的方法把扩展挂载到dom上\n        return mount.call(\n            this,\n            el, //真实的dom\n            hydrating //undefined\n        )\n \n ｝\n```\n\n\n\n# 编译AST和render函数\n\n调用  Vue.prototype.$mount 方法之后 拿到模板之后 就会进入以下这几个方法，这几个方法用了很多函数式编程\n\n```\ncompileToFunctions\n\ncreateCompiler\n\ncreateCompilerCreator\n\nbaseCompile\n\nparse\n\nparseHTML\n\n```\n\n这里比较重点的是parseHTML 他是  while (html) { //循环html 然后 然后经过正则 匹配到vue指令，还有vue的属性，事件方法等，收集到一个ast树中。\n\n```\n  function parseHTML(\n        html, //字符串模板\n        options //参数\n    ) {\n        var stack = []; // parseHTML 节点标签堆栈\n        var expectHTML = options.expectHTML; //true\n        var isUnaryTag$$1 = options.isUnaryTag || no; //函数匹配标签是否是 'area,base,br,col,embed,frame,hr,img,input,isindex,keygen, link,meta,param,source,track,wbr'\n        var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no; //函数 //判断标签是否是 'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n        var index = 0;\n        var last, //\n            lastTag; //\n        console.log(html)\n\n\n\n        while (html) { //循环html\n            last = html; //\n            // Make sure we're not in a plaintext content element like script/style 确保我们不在像脚本/样式这样的纯文本内容元素中\n            if (\n                !lastTag || //lastTag 不存在\n                !isPlainTextElement(lastTag)  // 如果标签不是script,style,textarea\n            ) {\n\n                var textEnd = html.indexOf('<'); //匹配开始标签或者结束标签的位置\n                if (textEnd === 0) { //标识是开始标签\n                    // Comment:\n                    if (comment.test(html)) { //匹配 开始字符串为<!--任何字符串,注释标签  如果匹配上\n                        var commentEnd = html.indexOf('-->'); //获取注释标签的结束位置\n\n                        if (commentEnd >= 0) { //如果注释标签结束标签位置大于0，则有注释内容\n                            console.log(html.substring(4, commentEnd))\n                            if (options.shouldKeepComment) { //shouldKeepComment为真时候。获取注释标签内容\n\n                                //截取注释标签的内容\n                                options.comment(html.substring(4, commentEnd));\n                            }\n                            //截取字符串重新循环  while 跳出循环就是靠该函数，每次匹配到之后就截取掉字符串，知道最后一个标签被截取完没有匹配到则跳出循环\n                            advance(commentEnd + 3);\n                            continue\n                        }\n                    }\n\n                    //这里思路是先匹配到注释节点，在匹配到这里的ie浏览器加载样式节点\n                    // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n                    if (conditionalComment.test(html)) {  //匹配开始为 <![ 字符串  <![endif]-->   匹配这样动态加ie浏览器的 字符串  <!--[if IE 8]><link href=\"ie8only.css\" rel=\"stylesheet\"><![endif]-->\n                        //匹配ie浏览器动态加样式结束符号\n                        var conditionalEnd = html.indexOf(']>');\n\n                        if (conditionalEnd >= 0) {\n                            //截取字符串重新循环  while 跳出循环就是靠该函数，每次匹配到之后就截取掉字符串，知道最后一个标签被截取完没有匹配到则跳出循环\n                            advance(conditionalEnd + 2);\n                            continue\n                        }\n                    }\n\n                    // Doctype:\n                    //匹配html的头文件 <!DOCTYPE html>\n                    var doctypeMatch = html.match(doctype);\n                    if (doctypeMatch) {\n                        //截取字符串重新循环  while 跳出循环就是靠该函数，每次匹配到之后就截取掉字符串，知道最后一个标签被截取完没有匹配到则跳出循环\n                        advance(doctypeMatch[0].length);\n                        continue\n                    }\n\n                    // End tag:\n                    //匹配开头必需是</ 后面可以忽略是任何字符串  ^<\\\\/((?:[a-zA-Z_][\\\\w\\\\-\\\\.]*\\\\:)?[a-zA-Z_][\\\\w\\\\-\\\\.]*)[^>]*>\n                    var endTagMatch = html.match(endTag);\n                    if (endTagMatch) {\n\n                        var curIndex = index;\n                        //标签分隔函数 while 跳出循环就是靠该函数，每次匹配到之后就截取掉字符串，知道最后一个标签被截取完没有匹配到则跳出循环\n                        advance(endTagMatch[0].length);\n                        console.log(endTagMatch)\n                        console.log(curIndex, index)\n                        //查找parseHTML的stack栈中与当前tagName标签名称相等的标签，\n                        //调用options.end函数，删除当前节点的子节点中的最后一个如果是空格或者空的文本节点则删除，\n                        //为stack出栈一个当前标签，为currentParent变量获取到当前节点的父节点\n                        parseEndTag(\n                            endTagMatch[1],\n                            curIndex,\n                            index\n                        );\n                        continue\n                    }\n\n                    // Start tag:\n                    //解析开始标记 标记开始标签\n                    //  获取开始标签的名称，属性集合，开始位置和结束位置，并且返回该对象\n                    var startTagMatch = parseStartTag();\n\n                    if (startTagMatch) {\n                        //把数组对象属性值循环变成对象，这样可以过滤相同的属性\n                        //为parseHTML 节点标签堆栈 插入一个桟数据\n                        //调用options.start  为parse函数 stack标签堆栈 添加一个标签\n                        handleStartTag(startTagMatch);\n                        //匹配tag标签是pre,textarea，并且第二个参数的第一个字符是回车键\n                        if (shouldIgnoreFirstNewline(lastTag, html)) {\n                            //去除回车键空格\n                            advance(1);\n                        }\n                        continue\n                    }\n                }\n\n                var text = (void 0),\n                    rest = (void 0),\n                    next = (void 0);\n                if (textEnd >= 0) {\n\n                    rest = html.slice(textEnd); //截取字符串  var textEnd = html.indexOf('<'); //匹配开始标签或者结束标签的位置\n                    console.log(rest)\n\n                    while (\n                        !endTag.test(rest) && //匹配开头必需是</ 后面可以忽略是任何字符串\n                        !startTagOpen.test(rest) && // 匹配开头必需是< 后面可以忽略是任何字符串\n                        !comment.test(rest) && // 匹配 开始字符串为<!--任何字符串\n                        !conditionalComment.test(rest) //匹配开始为 <![ 字符串\n                    ) {\n                        console.log(rest);\n\n\n                        // < in plain text, be forgiving and treat it as text\n                        // <在纯文本中，要宽容，把它当作文本来对待\n                        next = rest.indexOf('<', 1); //匹配是否有多个<\n                        if (next < 0) {\n                            break\n                        }\n                        textEnd += next; //截取 索引位置\n                        rest = html.slice(textEnd); //获取 < 字符串 <    获取他们两符号< 之间的字符串\n                    }\n                    text = html.substring(0, textEnd); //截取字符串 前面字符串到 <\n\n                    //while 跳出循环就是靠该函数，每次匹配到之后就截取掉字符串，知道最后一个标签被截取完没有匹配到则跳出循环\n                    advance(textEnd);\n                }\n\n                if (textEnd < 0) { //都没有匹配到 < 符号 则表示纯文本\n                    text = html; //出来text\n                    html = ''; //把html至空 跳槽 while循环\n                }\n\n                if (options.chars && text) {\n                    options.chars(text);\n                }\n            } else {\n                //  处理是script,style,textarea\n                var endTagLength = 0;\n                var stackedTag = lastTag.toLowerCase();\n                var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n                var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n                    endTagLength = endTag.length;\n                    if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n                        text = text\n                            .replace(/<!\\--([\\s\\S]*?)-->/g, '$1') // #7298\n                            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n                    }\n                    //匹配tag标签是pre,textarea，并且第二个参数的第一个字符是回车键\n                    if (shouldIgnoreFirstNewline(stackedTag, text)) {\n                        text = text.slice(1);\n                    }\n                    if (options.chars) {\n                        options.chars(text);\n                    }\n                    return ''\n                });\n                index += html.length - rest$1.length;\n                html = rest$1;\n                parseEndTag(stackedTag, index - endTagLength, index);\n            }\n\n            if (html === last) {\n                options.chars && options.chars(html);\n                if (\"development\" !== 'production' && !stack.length && options.warn) {\n                    options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n                }\n                break\n            }\n        }\n\n\n\n\n\n\n        // Clean up any remaining tags\n        //查找parseHTML的stack栈中与当前tagName标签名称相等的标签，\n        //调用options.end函数，删除当前节点的子节点中的最后一个如果是空格或者空的文本节点则删除，\n        //为stack出栈一个当前标签，为currentParent变量获取到当前节点的父节点\n        parseEndTag();\n        //while 跳出循环就是靠该函数，每次匹配到之后就截取掉字符串，知道最后一个标签被截取完没有匹配到则跳出循环\n        function advance(n) {\n            index += n; //让索引叠加\n            html = html.substring(n); //截取当前索引 和 后面的字符串。\n        }\n\n        //获取开始标签的名称，收集属性集合，开始位置和结束位置，并且返回该对象\n        function parseStartTag() {\n            var start = html.match(startTagOpen); //匹配开始标签 匹配开头必需是< 后面可以忽略是任何字符串  ^<((?:[a-zA-Z_][\\\\w\\\\-\\\\.]*\\\\:)?[a-zA-Z_][\\\\w\\\\-\\\\.]*)\n            console.log(start)\n            console.log(start[0].length)\n\n            if (start) {\n                var match = {\n                    tagName: start[1], //标签名称\n                    attrs: [], //标签属性集合\n                    start: index //标签的开始索引\n                };\n                //标记开始标签的位置，截取了开始标签\n                advance(start[0].length);\n                var end, attr;\n\n                while (\n                    !(end = html.match(startTagClose)) //没有到 关闭标签 > 标签\n                    && (attr = html.match(attribute)) //收集属性\n                ) {\n                    console.log(html)\n                    //截取属性标签\n                    advance(attr[0].length);\n                    match.attrs.push(attr); //把属性收集到一个集合\n                }\n                if (end) {\n                    match.unarySlash = end[1]; //如果是/>标签 则unarySlash 是/。 如果是>标签 则unarySlash 是空\n                    console.log(end)\n\n                    //截取掉开始标签，并且更新索引\n                    advance(end[0].length);\n                    match.end = index; //开始标签的结束位置\n                    return match\n                }\n            }\n        }\n\n        //把数组对象属性值循环变成对象，这样可以过滤相同的属性\n        //为parseHTML 节点标签堆栈 插入一个桟数据\n        //调用options.start  为parse函数 stack标签堆栈 添加一个标签\n        function handleStartTag(match) {\n            /*\n            * match = {\n                     tagName: start[1], //标签名称\n                     attrs: [], //标签属性集合\n                     start: index， //开始标签的开始索引\n                     match:index ，   //开始标签的 结束位置\n                    unarySlash:'' //如果是/>标签 则unarySlash 是/。 如果是>标签 则unarySlash 是空\n             };\n            * */\n\n            var tagName = match.tagName; //开始标签名称\n            var unarySlash = match.unarySlash; //如果是/>标签 则unarySlash 是/。 如果是>标签 则unarySlash 是空\n            console.log(expectHTML)\n            console.log('lastTag==')\n            console.log(lastTag)\n            console.log(tagName)\n\n            if (expectHTML) {   //true\n\n                if (\n                    lastTag === 'p' //上一个标签是p\n                    /*\n                      判断标签是否是\n                     'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n                     'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n                     'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n                     'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n                     'title,tr,track'\n                     */\n                    && isNonPhrasingTag(tagName)\n                ) {\n                    //查找parseHTML的stack栈中与当前tagName标签名称相等的标签，\n                    //调用options.end函数，删除当前节点的子节点中的最后一个如果是空格或者空的文本节点则删除，\n                    //为stack出栈一个当前标签，为currentParent变量获取到当前节点的父节点\n                    parseEndTag(lastTag);\n                }\n                if (\n                    canBeLeftOpenTag$$1(tagName) &&   //判断标签是否是 'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n                    lastTag === tagName //上一个标签和现在标签相同  <li><li> 编译成 <li></li>  但是这种情况是不会出现的 因为浏览器解析的时候会自动补全如果是<li>我是li标签<li> 浏览器自动解析成  <li>我是li标签</li><li> </li>\n                ) {\n                    //查找parseHTML的stack栈中与当前tagName标签名称相等的标签，\n                    //调用options.end函数，删除当前节点的子节点中的最后一个如果是空格或者空的文本节点则删除，\n                    //为stack出栈一个当前标签，为currentParent变量获取到当前节点的父节点\n                    parseEndTag(tagName);\n                }\n            }\n\n            var unary = isUnaryTag$$1(tagName) || //函数匹配标签是否是 'area,base,br,col,embed,frame,hr,img,input,isindex,keygen, link,meta,param,source,track,wbr'\n                !!unarySlash; //如果是/> 则为真\n\n            var l = match.attrs.length;\n            var attrs = new Array(l); //数组属性对象转换正真正的数组对象\n            for (var i = 0; i < l; i++) {\n                var args = match.attrs[i]; //获取属性对象\n                // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n                //对FF bug进行黑客攻击:https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n                if (\n                    IS_REGEX_CAPTURING_BROKEN &&  //这个应该是 火狐浏览器私有 标志\n                    args[0].indexOf('\"\"') === -1\n                ) {\n                    if (args[3] === '') {\n                        delete args[3];\n                    }\n                    if (args[4] === '') {\n                        delete args[4];\n                    }\n                    if (args[5] === '') {\n                        delete args[5];\n                    }\n                }\n                var value = args[3] || args[4] || args[5] || '';\n                var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n                    ? options.shouldDecodeNewlinesForHref  // true chrome在a[href]中编码内容\n                    : options.shouldDecodeNewlines;  //flase //IE在属性值中编码换行，而其他浏览器则不会\n\n                attrs[i] = {  //把数组对象属性值循环变成对象，这样可以过滤相同的属性\n                    name: args[1], //属性名称\n                    //属性值\n                    value: decodeAttr(value, shouldDecodeNewlines) //替换html 中的特殊符号，转义成js解析的字符串,替换 把   &lt;替换 <  ， &gt; 替换 > ， &quot;替换  \"， &amp;替换 & ， &#10;替换\\n  ，&#9;替换\\t\n\n                };\n\n            }\n\n            console.log('==!unary==')\n            console.log(!unary)\n\n            if (!unary) { //如果不是单标签\n\n                // 为parseHTML 节点标签堆栈 插入一个桟数据\n                stack.push({ //标签堆栈\n                    tag: tagName, //开始标签名称\n                    lowerCasedTag: tagName.toLowerCase(), //变成小写记录标签\n                    attrs: attrs //获取属性\n                });\n                //设置结束标签\n                lastTag = tagName;\n                console.log('== parseHTML handleStartTag stack==')\n                console.log(stack)\n\n            }\n\n\n            //\n            if (options.start) {\n\n                //标签开始函数， 创建一个ast标签dom，  判断获取v-for属性是否存在如果有则转义 v-for指令 把for，alias，iterator1，iterator2属性添加到虚拟dom中\n                //获取v-if属性，为el虚拟dom添加 v-if，v-eles，v-else-if 属性\n                //获取v-once 指令属性，如果有有该属性 为虚拟dom标签 标记事件 只触发一次则销毁\n                //校验属性的值，为el添加muted， events，nativeEvents，directives，  key， ref，slotName或者slotScope或者slot，component或者inlineTemplate 标志 属性\n                // 标志当前的currentParent当前的 element\n                //为parse函数 stack标签堆栈 添加一个标签\n                options.start(\n                    tagName,  //标签名称\n                    attrs,  //标签属性\n                    unary,  // 如果不是单标签则为真\n                    match.start,  //开始标签的开始位置\n                    match.end //开始标签的结束的位置\n                );\n            }\n\n\n        }\n\n\n\n        //查找parseHTML的stack栈中与当前tagName标签名称相等的标签，\n        //调用options.end函数，删除当前节点的子节点中的最后一个如果是空格或者空的文本节点则删除，\n        //为stack出栈一个当前标签，为currentParent变量获取到当前节点的父节点\n        function parseEndTag(\n            tagName,   //标签名称\n            start,  //结束标签开始位置\n            end    //结束标签结束位置\n        ) {\n            var pos,\n                lowerCasedTagName;\n            if (start == null) { //如果没有传开始位置\n                start = index;    //就那当前索引\n            }\n            if (end == null) {  //如果没有传结束位置\n                end = index;    //就那当前索引\n            }\n\n            if (tagName) { //结束标签名称\n                lowerCasedTagName = tagName.toLowerCase(); //将字符串转化成小写\n            }\n\n            // Find the closest opened tag of the same type 查找最近打开的相同类型的标记\n            if (tagName) {\n                // 获取stack堆栈最近的匹配标签\n                for (pos = stack.length - 1; pos >= 0; pos--) {\n                    //找到最近的标签相等\n                    if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n                        break\n                    }\n                }\n            } else {\n                // If no tag name is provided, clean shop\n                //如果没有提供标签名称，请清理商店\n                pos = 0;\n            }\n\n\n            if (pos >= 0) { //这里就获取到了stack堆栈的pos索引\n                // Close all the open elements, up the stack 关闭所有打开的元素，向上堆栈\n                console.log(pos)\n\n                for (var i = stack.length - 1; i >= pos; i--) {\n\n                    if (\"development\" !== 'production' && //如果stack中找不到tagName 标签的时候就输出警告日志，找不到标签\n                        (i > pos || !tagName) &&\n                        options.warn\n                    ) {\n                        options.warn(\n                            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n                        );\n                    }\n                    if (options.end) {\n                        console.log(options.end)\n                        //调用options.end函数，删除当前节点的子节点中的最后一个如果是空格或者空的文本节点则删除，\n                        //为stack出栈一个当前标签，为currentParent变量获取到当前节点的父节点\n                        options.end(\n                            stack[i].tag,//结束标签名称\n                            start, //结束标签开始位置\n                            end //结束标签结束位置\n                        );\n                    }\n                }\n                // Remove the open elements from the stack\n                //从堆栈中删除打开的元素\n                // console.log(stack[pos].tag)\n                // 为parseHTML 节点标签堆栈 出桟当前匹配到的标签\n                stack.length = pos;\n                //获取到上一个标签，就是当前节点的父节点\n                lastTag = pos && stack[pos - 1].tag;\n                console.log(stack)\n                console.log(lastTag)\n\n\n\n\n            } else if (lowerCasedTagName === 'br') {\n                if (options.start) {\n                    //标签开始函数， 创建一个ast标签dom，  判断获取v-for属性是否存在如果有则转义 v-for指令 把for，alias，iterator1，iterator2属性添加到虚拟dom中\n                    //获取v-if属性，为el虚拟dom添加 v-if，v-eles，v-else-if 属性\n                    //获取v-once 指令属性，如果有有该属性 为虚拟dom标签 标记事件 只触发一次则销毁\n                    //校验属性的值，为el添加muted， events，nativeEvents，directives，  key， ref，slotName或者slotScope或者slot，component或者inlineTemplate 标志 属性\n                    // 标志当前的currentParent当前的 element\n                    //为parse函数 stack标签堆栈 添加一个标签\n                    options.start(\n                        tagName,\n                        [], true,\n                        start,\n                        end\n                    );\n                }\n            } else if (lowerCasedTagName === 'p') {\n                if (options.start) {\n                    //标签开始函数， 创建一个ast标签dom，  判断获取v-for属性是否存在如果有则转义 v-for指令 把for，alias，iterator1，iterator2属性添加到虚拟dom中\n                    //获取v-if属性，为el虚拟dom添加 v-if，v-eles，v-else-if 属性\n                    //获取v-once 指令属性，如果有有该属性 为虚拟dom标签 标记事件 只触发一次则销毁\n                    //校验属性的值，为el添加muted， events，nativeEvents，directives，  key， ref，slotName或者slotScope或者slot，component或者inlineTemplate 标志 属性\n                    // 标志当前的currentParent当前的 element\n                    //为parse函数 stack标签堆栈 添加一个标签\n                    options.start(\n                        tagName,\n                        [], false,\n                        start,\n                        end);\n                }\n                if (options.end) {\n                    //删除当前节点的子节点中的最后一个如果是空格或者空的文本节点则删除，\n                    //为stack出栈一个当前标签，为currentParent变量获取到当前节点的父节点\n                    options.end(\n                        tagName,\n                        start,\n                        end\n                    );\n                }\n            }\n            console.log(lastTag)\n\n        }\n    }\n```\n\n\n\n一些匹配模板正则\n\n```\n  var onRE = /^@|^v-on:/;//判断是否是 @或者v-on:属性开头的\n    var dirRE = /^v-|^@|^:/; //判断是否是 v-或者@或者:  属性开头的\n    var forAliasRE = /([^]*?)\\s+(?:in|of)\\s+([^]*)/; //匹配 含有   字符串 in  字符串   或者  字符串 of  字符串\n    var forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/; //匹配上,  但是属于两边是 [{ , 点 , }]  所以匹配上   ,+字符串\n    var stripParensRE = /^\\(|\\)$/g; //匹配括号 ()\n\n    var argRE = /:(.*)$/; //匹配字符串是否含有:\n    var bindRE = /^:|^v-bind:/; //开始匹配是 :或者是v-bind\n    var modifierRE = /\\.[^.]+/g; // 匹配以点开头的分组 不属于点 data.object.info.age  匹配到 ['.object'，'.info' , '.age']\n\n    var decodeHTMLCached = cached(he.decode);    //获取 真是dom的textContent文本\n```\n\n\n\n## 双数据响应\n\n 双数据绑定 入口 方法在defineReactive函数中 ，不管是 prop 还是 state 还是 属性监听方法 set 方法，还是initInjections 入口都是这里。\n\n首先他会实例化         var dep = new Dep(); 依赖收集 Dep，get方法会添加一个   \n\n​       //添加一个dep\n​                    dep.depend();\n\n​    if (childOb) {  //如果子节点存在也添加一个dep\n​                        childOb.dep.depend();\n​                        if (Array.isArray(value)) {  //判断是否是数组 如果是数组\n​                            dependArray(value);   //则数组也添加dep\n​                        }\n​                    }\n\n\n\nset 方法是触发更新视图的\n\n//observe 添加 观察者\n\n // 然后在添加依赖\n\n   childOb = !shallow && observe(newVal);\n    //更新数据\n    dep.notify();\n\n\n\n```\n    /**\n     * Define a reactive property on an Object.\n     * 在对象上定义一个无功属性。\n     * 更新数据\n     * 通过defineProperty的set方法去通知notify()订阅者subscribers有新的值修改\n     * 添加观察者 get set方法\n     */\n    function defineReactive(obj, //对象\n        key,//对象的key\n        val, //监听的数据 返回的数据\n        customSetter, //  日志函数\n        shallow //是否要添加__ob__ 属性\n    ) {\n        //实例化一个主题对象，对象中有空的观察者列表\n        var dep = new Dep();\n        //获取描述属性\n        var property = Object.getOwnPropertyDescriptor(obj, key);\n        var _property = Object.getOwnPropertyNames(obj); //获取实力对象属性或者方法，包括定义的描述属性\n        console.log(property);\n        console.log(_property);\n\n        if (property && property.configurable === false) {\n            return\n        }\n\n        // cater for pre-defined getter/setters\n\n        var getter = property && property.get;\n        console.log('arguments.length=' + arguments.length)\n\n        if (!getter && arguments.length === 2) {\n            val = obj[key];\n        }\n        var setter = property && property.set;\n        console.log(val)\n        //判断value 是否有__ob__    实例化 dep对象,获取dep对象  为 value添加__ob__ 属性递归把val添加到观察者中  返回 new Observer 实例化的对象\n        var childOb = !shallow && observe(val);\n        //定义描述\n        Object.defineProperty(obj, key, {\n            enumerable: true,\n            configurable: true,\n            get: function reactiveGetter() {\n\n                var value = getter ? getter.call(obj) : val;\n                if (Dep.target) {  //Dep.target 静态标志 标志了Dep添加了Watcher 实例化的对象\n                    //添加一个dep\n                    dep.depend();\n                    if (childOb) {  //如果子节点存在也添加一个dep\n                        childOb.dep.depend();\n                        if (Array.isArray(value)) {  //判断是否是数组 如果是数组\n                            dependArray(value);   //则数组也添加dep\n                        }\n                    }\n                }\n                return value\n            },\n            set: function reactiveSetter(newVal) {\n                var value = getter ? getter.call(obj) : val;\n                /* eslint-disable no-self-compare  新旧值比较 如果是一样则不执行了*/\n                if (newVal === value || (newVal !== newVal && value !== value)) {\n                    return\n                }\n                /* eslint-enable no-self-compare\n                 *   不是生产环境的情况下\n                 * */\n                if (\"development\" !== 'production' && customSetter) {\n                    customSetter();\n                }\n                if (setter) {\n                    //set 方法 设置新的值\n                    setter.call(obj, newVal);\n                } else {\n                    //新的值直接给他\n                    val = newVal;\n                }\n                console.log(newVal)\n\n                //observe 添加 观察者\n                childOb = !shallow && observe(newVal);\n                //更新数据\n                dep.notify();\n            }\n        });\n    }\n\n```\n\n\n\n\n\n\n\n## 依赖收集 Dep\n\n 在vue数据get获取中，谁读取了该数据，就把它收集起来，所以dep是一个集合，在数据set时，通过遍历dep去触发每个dep的notify方法通过视图更新\ndep的主要功能是只作为收集，那在收集了依赖后，如何使视图更新呢\n所以需要定义一个新的Watcher类，改类是会实现对视图的更新\n dep每收集的一个依赖实际就是一个Watcher\n\n```\n    //主题对象Dep构造函数  主要用于添加发布事件后，用户更新数据的 响应式原理之一函数\n    var Dep = function Dep() {\n        //uid  初始化为0\n        this.id = uid++;\n        /* 用来存放Watcher对象的数组 */\n        this.subs = [];\n    };\n\n    Dep.prototype.addSub = function addSub(sub) {\n        /* 在subs中添加一个Watcher对象 */\n        this.subs.push(sub);\n    };\n\n    Dep.prototype.removeSub = function removeSub(sub) {\n        /*删除 在subs中添加一个Watcher对象 */\n        remove(this.subs, sub);\n    };\n    //this$1.deps[i].depend();\n    //为Watcher 添加 为Watcher.newDeps.push(dep); 一个dep对象\n    Dep.prototype.depend = function depend() {\n        //添加一个dep    target 是Watcher dep就是dep对象\n        if (Dep.target) {\n            //像指令添加依赖项\n            Dep.target.addDep(this);\n        }\n    };\n    /* 通知所有Watcher对象更新视图 */\n    Dep.prototype.notify = function notify() {\n        // stabilize the subscriber list first\n        var subs = this.subs.slice();\n        for (var i = 0, l = subs.length; i < l; i++) {\n            //更新数据\n            subs[i].update();\n        }\n    };\n\n    // the current target watcher being evaluated.\n    // this is globally unique because there could be only one\n    // watcher being evaluated at any time.\n    //当前正在评估的目标监视程序。\n    //这在全球是独一无二的，因为只有一个\n    //观察者在任何时候都被评估。\n    Dep.target = null;\n    var targetStack = [];\n\n    function pushTarget(_target) {\n        //target 是Watcher dep就是dep对象\n        if (Dep.target) { //静态标志 Dep当前是否有添加了target\n            //添加一个pushTarget\n            targetStack.push(Dep.target);\n        }\n        Dep.target = _target;\n    }\n\n    //\n    function popTarget() {\n        // 出盏一个pushTarget\n        Dep.target = targetStack.pop();\n    }\n```\n\n## 数据检测 Watcher\n\n Watcher的功能主要是接口到Dep的通知，然后调用update方法更新视图\n在update方法中会触发回调，回调函数实际就是已生成render函数\n\n在调用render函数是，函数里的值就会获取到已经更改后值，所以就会生成新的vnode\n新的vnode生成后，就是patch的过程，用新的vnode与旧的vnode进行比对，最终将比对后的vnode转换为实际的dom添加到模板挂载节点上\n新的模板挂载后，将旧的模板删除，这样视图就更新完成\n\n```\n     * *观察者分析表达式，收集依赖项，\n     *并在表达式值更改时触发回调。\n     *这用于$watch() api和指令。\n     * 当前vue实例、updateComponent函数、空函数。\n     */\n    var Watcher = function Watcher(\n        vm, //vm dom\n        expOrFn,  //获取值的函数，或者是更新viwe试图函数\n        cb, //回调函数,回调值给回调函数\n        options, //参数\n        isRenderWatcher//是否渲染过得观察者\n    ) {\n        console.log('====Watcher====')\n        this.vm = vm;\n        //是否是已经渲染过得观察者\n        if (isRenderWatcher) { //把当前 Watcher 对象赋值给 vm._watcher上\n            vm._watcher = this;\n        }\n        //把观察者添加到队列里面 当前Watcher添加到vue实例上\n        vm._watchers.push(this);\n        // options\n        if (options) { //如果有参数\n            this.deep = !!options.deep; //实际\n            this.user = !!options.user; //用户\n            this.lazy = !!options.lazy; //懒惰 ssr 渲染\n            this.sync = !!options.sync; //如果是同步\n        } else {\n\n            this.deep = this.user = this.lazy = this.sync = false;\n        }\n        this.cb = cb; //回调函数\n        this.id = ++uid$1; // uid for batching uid为批处理  监听者id\n        this.active = true; //激活\n        this.dirty = this.lazy; // for lazy watchers 对于懒惰的观察者\n        this.deps = [];    // 观察者队列\n        this.newDeps = []; // 新的观察者队列\n        // 内容不可重复的数组对象\n        this.depIds = new _Set();\n        this.newDepIds = new _Set();\n        // 把函数变成字符串形式\n        this.expression = expOrFn.toString();\n        // parse expression for getter\n        //getter的解析表达式\n        if (typeof expOrFn === 'function') {\n            //获取值的函数\n            this.getter = expOrFn;\n        } else {\n            //如果是keepAlive 组件则会走这里\n            //path 因该是路由地址\n            if (bailRE.test(path)) {  //  匹配上 返回 true     var bailRE = /[^\\w.$]/;  //匹配不是 数字字母下划线 $符号   开头的为true\n                return\n            }\n\n            // //匹配不上  path在已点分割\n            // var segments = path.split('.');\n            // return function (obj) {\n            //\n            //     for (var i = 0; i < segments.length; i++) {\n            //         //如果有参数则返回真\n            //         if (!obj) {\n            //             return\n            //         }\n            //         //将对象中的一个key值 赋值给该对象 相当于 segments 以点拆分的数组做obj 的key\n            //         obj = obj[segments[i]];\n            //     }\n            //     //否则返回一个对象\n            //     return obj\n            // }\n\n            //匹配不是 数字字母下划线 $符号   开头的为true\n\n            this.getter = parsePath(expOrFn);\n            if (!this.getter) { //如果不存在 则给一个空的数组\n                this.getter = function () {\n                };\n                \"development\" !== 'production' && warn(\n                    \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n                    'Watcher only accepts simple dot-delimited paths. ' +\n                    'For full control, use a function instead.',\n                    vm\n                );\n            }\n        }\n        this.value = this.lazy ?  //   lazy为真的的时候才能获取值  这个有是组件才为真\n            undefined :\n            this.get(); //计算getter，并重新收集依赖项。 获取值\n    };\n\n```\n\n在Watcher实例构造函数执行时，会触发get\n触发了get后就会该Watcher实例进行收集\nupdate为接到Dep通知时触发的方法\nupdate内会调用run方法\n在run方法内会调用cb回调方法\ncb回到方法实际就是模板编译时render方法\n\n\n\n\n\n# 虚拟DOM\n\nvue中的虚拟DOM,实际就是通过定义一个Vnode类，在该类上添加了dom的一些属性来标识一个dom\n\n主要的作用是降低对实际dom的操作，来减轻对浏览器性能的耗费\n\n```\n /*\n     * 创建标准的vue vnode\n     *\n     * */\n\n    var VNode = function VNode(\n        tag, /*当前节点的标签名*/\n        data, /*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/\n        children, //子节点\n        text, //文本\n        elm, /*当前节点的dom */\n        context, /*编译作用域*/\n        componentOptions, /*组件的option选项*/\n        asyncFactory/*异步工厂*/) {\n        /*当前节点的标签名*/\n        this.tag = tag;\n\n        /*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/\n        this.data = data;\n\n        /*当前节点的子节点，是一个数组*/\n        this.children = children;\n\n        /*当前节点的文本*/\n        this.text = text;\n\n        /*当前虚拟节点对应的真实dom节点*/\n        this.elm = elm;\n\n        /*当前节点的名字空间*/\n        this.ns = undefined;\n\n        /*编译作用域 vm*/\n        this.context = context;\n\n        this.fnContext = undefined;\n        this.fnOptions = undefined;\n        this.fnScopeId = undefined;\n\n        /*节点的key属性，被当作节点的标志，用以优化*/\n        this.key = data && data.key;\n\n        /*组件的option选项*/\n        this.componentOptions = componentOptions;\n\n        /*当前节点对应的组件的实例*/\n        this.componentInstance = undefined;\n\n        /*当前节点的父节点*/\n        this.parent = undefined;\n\n        /*简而言之就是是否为原生HTML或只是普通文本，innerHTML的时候为true，textContent的时候为false*/\n        this.raw = false;\n\n        /*静态节点标志*/\n        this.isStatic = false;\n\n        /*是否作为跟节点插入*/\n        this.isRootInsert = true;\n\n        /*是否为注释节点*/\n        this.isComment = false;\n\n        /*是否为克隆节点*/\n        this.isCloned = false;\n\n        /*是否有v-once指令*/\n        this.isOnce = false;\n\n        /*异步工厂*/\n        this.asyncFactory = asyncFactory;\n\n        this.asyncMeta = undefined;\n        this.isAsyncPlaceholder = false;\n    };\n```\n\n# diff算法\n\npatch ，sameVnode， patchVnode ，updateChildren 这几个方法\n\n入口是patch 然后调用sameVnode\n\n```\n    //sameVnode(oldVnode, vnode)2个节点的基本属性相同，那么就进入了2个节点的diff过程。\n    function sameVnode(a, b) {\n        return (\n\n            a.key === b.key && (   //如果a的key 等于b的key\n                (\n\n                    a.tag === b.tag && // 如果a的tag 等于b的tag\n                    a.isComment === b.isComment && // 如果a和b 都是注释节点\n                    isDef(a.data) === isDef(b.data) && //如果a.data 和 b.data 都定义后，是组件，或者是都含有tag属性\n                    sameInputType(a, b)   //相同的输入类型。判断a和b的属性是否相同\n                ) || (\n                    isTrue(a.isAsyncPlaceholder) && //判断是否是异步的\n                    a.asyncFactory === b.asyncFactory &&\n                    isUndef(b.asyncFactory.error)\n                )\n            )\n        )\n    }\n```\n\n如果调用sameVnode 条件成立 则进入patchVnode 方法,\n\npatchVnode 方法主要是对vnode 进行增加和删除，主要还有key更新等。然后 判断 两个虚拟dom都不为空，并且他们不相等的时候oldCh !== ch 就进入updateChildren diff更新算法。\n\n```\n  // 对比 虚拟dom\n        function patchVnode(\n            oldVnode, // 旧的虚拟dom\n            vnode,  // 新的虚拟dom\n            insertedVnodeQueue,  // 删除虚拟dom队列\n            removeOnly\n        ) {\n            if (oldVnode === vnode) { //如果他们相等\n                return\n            }\n\n            var elm = vnode.elm = oldVnode.elm; //获取真实的dom\n\n            // 判断是否有isAsyncPlaceholder 属性\n            if (isTrue(oldVnode.isAsyncPlaceholder)) {\n                //判断数据 是否不等于 undefined或者null\n                if (isDef(vnode.asyncFactory.resolved)) {\n                    // ssr 渲染\n                    hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n                } else {\n                    vnode.isAsyncPlaceholder = true;\n                }\n                return\n            }\n\n            // reuse element for static trees.\n            // note we only do this if the vnode is cloned -\n            // if the new node is not cloned it means the render functions have been\n            // reset by the hot-reload-api and we need to do a proper re-render.\n            //为静态树重用元素。\n            //注意，只有当vnode被克隆时，我们才这样做\n            //如果新节点没有克隆，则表示渲染函数已经克隆\n            //由hot-reload api重置，我们需要做一个适当的重新渲染。\n            if (isTrue(vnode.isStatic) &&\n                isTrue(oldVnode.isStatic) &&\n                vnode.key === oldVnode.key &&\n                (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n            ) {\n                vnode.componentInstance = oldVnode.componentInstance;\n                return\n            }\n\n            var i;\n            var data = vnode.data;\n            // 钩子函数\n            if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n                i(oldVnode, vnode);\n            }\n\n            var oldCh = oldVnode.children;\n            var ch = vnode.children;\n            //循环组件实例 是否定义有 tag标签\n            if (isDef(data) && isPatchable(vnode)) {\n                // 触发钩子函数 更新钩子函数\n                for (i = 0; i < cbs.update.length; ++i) {\n                    cbs.update[i](oldVnode, vnode);\n                }\n                // 触发钩子函数\n                if (isDef(i = data.hook) && isDef(i = i.update)) {\n                    i(oldVnode, vnode);\n                }\n            }\n\n            //如果是文本虚拟dom\n            if (isUndef(vnode.text)) {\n                // 两个虚拟dom都存在\n                if (isDef(oldCh) && isDef(ch)) {\n                    // 如果他们不相等\n                    if (oldCh !== ch) {\n                        // diff算法更新\n                        updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);\n                    }\n                } else if (isDef(ch)) {  // 如果是有新的虚拟dom\n                    // 如果是文本虚拟dom 则 设置 空\n                    if (isDef(oldVnode.text)) {\n                        nodeOps.setTextContent(elm, '');\n                    }\n                    // 添加 vnode\n                    addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n                } else if (isDef(oldCh)) { // 如果旧的有 新的虚拟dom没有则删除 虚拟dom\n                    removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n                } else if (isDef(oldVnode.text)) { // 如果是文本虚拟dom则设置文本\n                    nodeOps.setTextContent(elm, '');\n                }\n\n\n            } else if (oldVnode.text !== vnode.text) {\n                // 如果新旧的文本不相同则设置文本\n                nodeOps.setTextContent(elm, vnode.text);\n            }\n            if (isDef(data)) {\n                // 触发钩子\n                if (isDef(i = data.hook) && isDef(i = i.postpatch)) {\n                    i(oldVnode, vnode);\n                }\n            }\n        }\n\n```\n\n\n\n# ddif 算法updateChildren\n\ndiif算法，vue2 的diff 算法是深度优先算法遍历，然后对比算法是通过 新旧的vnode对比先对比他们的基本属性，比如key 标签等，如果是相同则通过diff算法对比然后diff算法是新旧的vnode对比，然后有四个指针索引，两个新的vnode开始指针和新的 vnode 结束指针，两个旧的vnode开始指针和旧的 vnode 结束指针。然后先判断vnode是否为空，如果为空就往中间靠拢  开始的指针++  结束的指针 --。然后两头对比之后，在交叉对比，直到找不到相同的vnode之后如果多出的就删除，如果少的话就新增，然后对比完之后 在调用patchVnode去增删虚拟dom。然后如果有vnode不相同在调用updateChildren，这样就做到深层递归，也叫深度优先搜索，然后子vnode没有了在更新到真实dom。 \n\n```\n\n        // ddif 算法\n        function updateChildren(\n            parentElm,  // 父亲dom\n            oldCh,  // 旧的虚拟dom\n            newCh,  // 新的虚拟dom\n            insertedVnodeQueue,\n            removeOnly\n        ) {\n            var oldStartIdx = 0;  // 旧的虚拟dom开始指针 \n            var newStartIdx = 0; // 新的虚拟dom开始指针 \n            var oldEndIdx = oldCh.length - 1; // 旧的虚拟dom结束指针 \n            var newEndIdx = newCh.length - 1;// 新的虚拟dom结束指针 \n\n            var oldStartVnode = oldCh[0];  // 旧的虚拟dom开始节点\n            var newStartVnode = newCh[0]; // 新的虚拟dom开始节点\n\n            var oldEndVnode = oldCh[oldEndIdx]; // 旧的虚拟dom结束节点\n            var newEndVnode = newCh[newEndIdx];// 新的虚拟dom结束节点\n\n            var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n            // removeOnly is a special flag used only by <transition-group>\n            // to ensure removed elements stay in correct relative positions\n            // during leaving transitions\n            var canMove = !removeOnly;\n\n            {\n                // 检查同一个兄弟节点是否有重复的key，如果有则发出警告日志\n                checkDuplicateKeys(newCh);\n            }\n\n            /*\n            diff 算法开始\n              这里diff算法其实就是\n\n            */\n            while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n\n                if (isUndef(oldStartVnode)) {\n                    // 如果旧的开始节点不存在或者为空\n                    // 如果旧的开始节点指针往中间偏移\n                    oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n                } else if (isUndef(oldEndVnode)) {\n                    // 如果旧的结束节点不存在或者为空\n                    // 如果旧的结束节点指针往中间偏移\n                    oldEndVnode = oldCh[--oldEndIdx];\n\n                } else if (sameVnode(oldStartVnode, newStartVnode)) {   //sameVnode(oldVnode, vnode)2个节点的基本属性相同，那么就进入了2个节点的diff过程。\n\n\n\n                    // 在对比下虚拟dom \n                    patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n\n                    //开始指针 两个都往中间偏移\n                    oldStartVnode = oldCh[++oldStartIdx];\n                    newStartVnode = newCh[++newStartIdx];\n\n                } else if (sameVnode(oldEndVnode, newEndVnode)) {  //sameVnode(oldVnode, vnode)2个节点的基本属性相同，那么就进入了2个节点的diff过程。\n                    // 在对比下虚拟dom \n                    patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n                    // 结束指针 两个都往中间偏移\n                    oldEndVnode = oldCh[--oldEndIdx];\n                    newEndVnode = newCh[--newEndIdx];\n                } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right  //sameVnode(oldVnode, vnode)2个节点的基本属性相同，那么就进入了2个节点的diff过程。\n\n                    // 交叉对比 深度优先算法入口\n                    patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n                    // 交叉对比\n                    canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n\n                    oldStartVnode = oldCh[++oldStartIdx];\n                    newEndVnode = newCh[--newEndIdx];\n                } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n                    // 交叉对比\n                    patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n                    // 交叉对比\n                    canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n                    oldEndVnode = oldCh[--oldEndIdx];\n                    newStartVnode = newCh[++newStartIdx];\n                } else {\n                    // 如果没有key 则给塔新的key\n                    if (isUndef(oldKeyToIdx)) {\n\n                        // 创建key 如果没有key 则用索引作为key\n                        oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n                    }\n                    \n                    // 获取 旧的vnode key\n                    idxInOld = isDef(newStartVnode.key)\n                        ? oldKeyToIdx[newStartVnode.key]\n                          // 查找旧的vnode key\n                        : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n                        // 如果旧的 vnode key 未定义则创建新的真实dom\n                    if (isUndef(idxInOld)) { // New element\n                         //创建真实 dom 节点\n                        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n                    } else {\n\n                        vnodeToMove = oldCh[idxInOld];\n                        if (sameVnode(vnodeToMove, newStartVnode)) {\n                            // 对比虚拟dom\n                            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n                            \n                            oldCh[idxInOld] = undefined;\n                            // 真实节点交换\n                            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n                        } else {\n                            // same key but different element. treat as new element\n                            // 创建真实dom\n                            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n                        }\n                    }\n                    newStartVnode = newCh[++newStartIdx];\n                }\n            }\n            if (oldStartIdx > oldEndIdx) {\n                refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n                // 添加虚拟dom\n                addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n            } else if (newStartIdx > newEndIdx) {\n                // 删除虚拟dom\n                removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n            }\n        }\n\n```\n\n具体看我源码和流程图，这里文字就不描述这么多了，流程图是下面这中的网盘，源码是vue.js,基本每一行都有注释\n\n链接：https://pan.baidu.com/s/10IxV6mQ2TIwkRACKu2T0ng \n提取码：1fnu \n\n\n上面的vue.js 就是我基于vue源码中每行加有注释的vue.js, 其他文件就是我看vue.js源码的时候抽出来的vue.js 源码小demo。如果大家觉得不错请动动小手指，帮我点一个satr，你们的支持就是我的动力\n\n \n\n\n 作者：姚观寿\n"
        },
        {
          "name": "README_EN.md",
          "type": "blob",
          "size": 59.1162109375,
          "content": "#   begin\n\n vue source code spare time to see almost a year, before looking for posts on the Internet, found that many posts are very scattered, are part of a part said, a lot of chapters, so they decided to see line by line, after their own persistence and efforts, now basically read. This vue source line by line analysis, I basically every line on the annotation, plus the whole framework of the process mind map, is basically a small white can also understand the vue source code.\n\nSaid very detailed, inside the source code notes, some are their own years of experience in developing vue, some are their own context program to know, if there are shortcomings can contact me QQ group: 302817612 modification, or send an email to me 281113270@qq.com thank you. If you feel good, please move your little finger to help me click a satr, your support is my motivation.\n\nvue How to see vue source code? In fact, mvvm source code is not as mysterious as imagined, from the beginning of 12 years to the present mvvm development has more than a decade of history, from the previous direct operation of the dom jq development has more than a decade of history, but this decade of historical development, and there is not much change, the idea is still those, the module is still divided into several chunks:\n\n## 1. Template conversion:\n\nIs we write a vue template or react jsx we can understand is a template, and then it will go through the template compilation conversion, like vue is into a method paseHTML method converted into the ast tree, paseHTML inside the while loop template, Then through the RE match to the vue instructions, as well as vue properties, event methods, etc., collected into an ast tree.\n\n## 2. Corresponding data:\n\nvue is a dual data corresponding framework, the underlying use is Object.defineProperty to listen for and hijack data changes, and then call callback methods to update the view update. The principle of dual data binding is as follows: The obersve() method determines whether value has no __ob___ attribute and is not Obersve instantiated, and whether value is Vonde instantiated. If not, it calls Obersve to add the data to the observer and add the __ob__ attribute to the data. Obersve calls the defineReactive method, which is a channel connecting the Dep and wacther methods, and listens for data using the get and set methods in Object.definpropty(). In the get method, new Dep calls depend(). To add a wacther class to dep, watcher has a method to update the view. run calls update to update the vonde and then updates the view. Then the set method is to call the notify method in dep to call the run update view in wacther\n\n## 3. Virtual dom:\n\n\n\n\n\nvnode, used in vue, is via ast objects, escaped into vonde needs to render functions, such as _c('div' s('')) and such functions, compiled into vonde virtual dom. Then update the data to updata and call __patch__ to turn vonde into a true dom element through diff algorithm.\n\n##   4.diif algorithm:\n\n​    The diff algorithm of vue2 is depth-first traversal, and then the comparison algorithm compares the old vnode with the new vnode, first compares their basic attributes, such as key labels, etc. If they are the same, the diff algorithm compares the old Vnode with the new Vnode, and then there are four pointer indexes. Two new vnode start Pointers and two new vnode end Pointers, two old vnode start Pointers and old vnode end Pointers. Then first determine whether the vnode is empty, if it is empty, move to the center of the start pointer ++ end pointer --. Then after comparing the two sides, cross-compare until you can't find the same vnode, if there are more, delete it, if there are fewer, add it, and then update it to the real dom after comparing.\n\n\n\nnew Vue calls vue.prototype. _init. From this function, after merging with the $options parameter, initLifecycle initializes the life cycle, marking the initialization event, and initializing the rendering function. The initialization state is the data. Add data to the observer for double data binding.\n\n# new Vue instantiates the program entry\n\n```\n Vue.prototype._init = function (options) { //初始化函数\n  //... 省略code\n  \n    initLifecycle(vm); //初始化生命周期 标志\n            initEvents(vm); //初始化事件\n            initRender(vm); // 初始化渲染\n            callHook(vm, 'beforeCreate'); //触发beforeCreate钩子函数\n            initInjections(vm); // resolve injections before data/props 在数据/道具之前解决注入问题 //初始化 inject\n            initState(vm);  //    //初始化状态\n            initProvide(vm); // resolve provide after data/props  解决后提供数据/道具  provide 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性，用于组件之间通信。\n            callHook(vm, 'created'); //触发created钩子函数\n  \n  \n  //... 省略code\n    // 然后挂载模板，这里大概就是把模板转换成ast的入口\n    vm.$mount(vm.$options.el);\n  \n }\n```\n\n\n\n# Find and mount templates\n\n vm.$mount goes to the mount template method and determines whether it has a render function or a template, and if not, uses el.outerHTML, which is essentially getting the html content of the template\n\n```\n Vue.prototype.$mount = function (el, hydrating) { \n   //... 省略code\n       el = el && query(el); //获取dom\n         if (!options.render) {\n              if (template) {\n              \n              }else if (template.nodeType) { \n                  template = template.innerHTML;\n              } else if (el) {\n                template = getOuterHTML(el);\n              }\n         ｝\n          \n         \n              // render 函数 也是 ast 转换 方法\n                var ref = compileToFunctions(\n                    template, //模板字符串\n                    {\n                        shouldDecodeNewlines: shouldDecodeNewlines, //flase //IE在属性值中编码换行，而其他浏览器则不会\n                        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref, //true chrome在a[href]中编码内容\n                        delimiters: options.delimiters, //改变纯文本插入分隔符。修改指令的书写风格，比如默认是{{mgs}}  delimiters: ['${', '}']之后变成这样 ${mgs}\n                        comments: options.comments //当设为 true 时，将会保留且渲染模板中的 HTML 注释。默认行为是舍弃它们。\n                    },\n                    this\n                );\n         \n         \n       \n   \n     //... 省略code\n      //执行$mount方法     用$mount的方法把扩展挂载到dom上\n        return mount.call(\n            this,\n            el, //真实的dom\n            hydrating //undefined\n        )\n \n ｝\n```\n\n\n\n# Compile the AST and render functions\n\nAfter you call the Vue.prototype.$mount method and get the template, you enter the following methods, which use a lot of functional programming\n\n```\ncompileToFunctions\n\ncreateCompiler\n\ncreateCompilerCreator\n\nbaseCompile\n\nparse\n\nparseHTML\n\n```\n\nThe important thing here is that parseHTML is a while (html) {// loop through the html and then through the re match to the vue directive, as well as vue properties, event methods, etc., collected into an ast tree.\n\n```\n  function parseHTML(\n        html, //字符串模板\n        options //参数\n    ) {\n        var stack = []; // parseHTML 节点标签堆栈\n        var expectHTML = options.expectHTML; //true\n        var isUnaryTag$$1 = options.isUnaryTag || no; //函数匹配标签是否是 'area,base,br,col,embed,frame,hr,img,input,isindex,keygen, link,meta,param,source,track,wbr'\n        var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no; //函数 //判断标签是否是 'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n        var index = 0;\n        var last, //\n            lastTag; //\n        console.log(html)\n\n\n\n        while (html) { //循环html\n            last = html; //\n            // Make sure we're not in a plaintext content element like script/style 确保我们不在像脚本/样式这样的纯文本内容元素中\n            if (\n                !lastTag || //lastTag 不存在\n                !isPlainTextElement(lastTag)  // 如果标签不是script,style,textarea\n            ) {\n\n                var textEnd = html.indexOf('<'); //匹配开始标签或者结束标签的位置\n                if (textEnd === 0) { //标识是开始标签\n                    // Comment:\n                    if (comment.test(html)) { //匹配 开始字符串为<!--任何字符串,注释标签  如果匹配上\n                        var commentEnd = html.indexOf('-->'); //获取注释标签的结束位置\n\n                        if (commentEnd >= 0) { //如果注释标签结束标签位置大于0，则有注释内容\n                            console.log(html.substring(4, commentEnd))\n                            if (options.shouldKeepComment) { //shouldKeepComment为真时候。获取注释标签内容\n\n                                //截取注释标签的内容\n                                options.comment(html.substring(4, commentEnd));\n                            }\n                            //截取字符串重新循环  while 跳出循环就是靠该函数，每次匹配到之后就截取掉字符串，知道最后一个标签被截取完没有匹配到则跳出循环\n                            advance(commentEnd + 3);\n                            continue\n                        }\n                    }\n\n                    //这里思路是先匹配到注释节点，在匹配到这里的ie浏览器加载样式节点\n                    // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n                    if (conditionalComment.test(html)) {  //匹配开始为 <![ 字符串  <![endif]-->   匹配这样动态加ie浏览器的 字符串  <!--[if IE 8]><link href=\"ie8only.css\" rel=\"stylesheet\"><![endif]-->\n                        //匹配ie浏览器动态加样式结束符号\n                        var conditionalEnd = html.indexOf(']>');\n\n                        if (conditionalEnd >= 0) {\n                            //截取字符串重新循环  while 跳出循环就是靠该函数，每次匹配到之后就截取掉字符串，知道最后一个标签被截取完没有匹配到则跳出循环\n                            advance(conditionalEnd + 2);\n                            continue\n                        }\n                    }\n\n                    // Doctype:\n                    //匹配html的头文件 <!DOCTYPE html>\n                    var doctypeMatch = html.match(doctype);\n                    if (doctypeMatch) {\n                        //截取字符串重新循环  while 跳出循环就是靠该函数，每次匹配到之后就截取掉字符串，知道最后一个标签被截取完没有匹配到则跳出循环\n                        advance(doctypeMatch[0].length);\n                        continue\n                    }\n\n                    // End tag:\n                    //匹配开头必需是</ 后面可以忽略是任何字符串  ^<\\\\/((?:[a-zA-Z_][\\\\w\\\\-\\\\.]*\\\\:)?[a-zA-Z_][\\\\w\\\\-\\\\.]*)[^>]*>\n                    var endTagMatch = html.match(endTag);\n                    if (endTagMatch) {\n\n                        var curIndex = index;\n                        //标签分隔函数 while 跳出循环就是靠该函数，每次匹配到之后就截取掉字符串，知道最后一个标签被截取完没有匹配到则跳出循环\n                        advance(endTagMatch[0].length);\n                        console.log(endTagMatch)\n                        console.log(curIndex, index)\n                        //查找parseHTML的stack栈中与当前tagName标签名称相等的标签，\n                        //调用options.end函数，删除当前节点的子节点中的最后一个如果是空格或者空的文本节点则删除，\n                        //为stack出栈一个当前标签，为currentParent变量获取到当前节点的父节点\n                        parseEndTag(\n                            endTagMatch[1],\n                            curIndex,\n                            index\n                        );\n                        continue\n                    }\n\n                    // Start tag:\n                    //解析开始标记 标记开始标签\n                    //  获取开始标签的名称，属性集合，开始位置和结束位置，并且返回该对象\n                    var startTagMatch = parseStartTag();\n\n                    if (startTagMatch) {\n                        //把数组对象属性值循环变成对象，这样可以过滤相同的属性\n                        //为parseHTML 节点标签堆栈 插入一个桟数据\n                        //调用options.start  为parse函数 stack标签堆栈 添加一个标签\n                        handleStartTag(startTagMatch);\n                        //匹配tag标签是pre,textarea，并且第二个参数的第一个字符是回车键\n                        if (shouldIgnoreFirstNewline(lastTag, html)) {\n                            //去除回车键空格\n                            advance(1);\n                        }\n                        continue\n                    }\n                }\n\n                var text = (void 0),\n                    rest = (void 0),\n                    next = (void 0);\n                if (textEnd >= 0) {\n\n                    rest = html.slice(textEnd); //截取字符串  var textEnd = html.indexOf('<'); //匹配开始标签或者结束标签的位置\n                    console.log(rest)\n\n                    while (\n                        !endTag.test(rest) && //匹配开头必需是</ 后面可以忽略是任何字符串\n                        !startTagOpen.test(rest) && // 匹配开头必需是< 后面可以忽略是任何字符串\n                        !comment.test(rest) && // 匹配 开始字符串为<!--任何字符串\n                        !conditionalComment.test(rest) //匹配开始为 <![ 字符串\n                    ) {\n                        console.log(rest);\n\n\n                        // < in plain text, be forgiving and treat it as text\n                        // <在纯文本中，要宽容，把它当作文本来对待\n                        next = rest.indexOf('<', 1); //匹配是否有多个<\n                        if (next < 0) {\n                            break\n                        }\n                        textEnd += next; //截取 索引位置\n                        rest = html.slice(textEnd); //获取 < 字符串 <    获取他们两符号< 之间的字符串\n                    }\n                    text = html.substring(0, textEnd); //截取字符串 前面字符串到 <\n\n                    //while 跳出循环就是靠该函数，每次匹配到之后就截取掉字符串，知道最后一个标签被截取完没有匹配到则跳出循环\n                    advance(textEnd);\n                }\n\n                if (textEnd < 0) { //都没有匹配到 < 符号 则表示纯文本\n                    text = html; //出来text\n                    html = ''; //把html至空 跳槽 while循环\n                }\n\n                if (options.chars && text) {\n                    options.chars(text);\n                }\n            } else {\n                //  处理是script,style,textarea\n                var endTagLength = 0;\n                var stackedTag = lastTag.toLowerCase();\n                var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n                var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n                    endTagLength = endTag.length;\n                    if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n                        text = text\n                            .replace(/<!\\--([\\s\\S]*?)-->/g, '$1') // #7298\n                            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n                    }\n                    //匹配tag标签是pre,textarea，并且第二个参数的第一个字符是回车键\n                    if (shouldIgnoreFirstNewline(stackedTag, text)) {\n                        text = text.slice(1);\n                    }\n                    if (options.chars) {\n                        options.chars(text);\n                    }\n                    return ''\n                });\n                index += html.length - rest$1.length;\n                html = rest$1;\n                parseEndTag(stackedTag, index - endTagLength, index);\n            }\n\n            if (html === last) {\n                options.chars && options.chars(html);\n                if (\"development\" !== 'production' && !stack.length && options.warn) {\n                    options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n                }\n                break\n            }\n        }\n\n\n\n\n\n\n        // Clean up any remaining tags\n        //查找parseHTML的stack栈中与当前tagName标签名称相等的标签，\n        //调用options.end函数，删除当前节点的子节点中的最后一个如果是空格或者空的文本节点则删除，\n        //为stack出栈一个当前标签，为currentParent变量获取到当前节点的父节点\n        parseEndTag();\n        //while 跳出循环就是靠该函数，每次匹配到之后就截取掉字符串，知道最后一个标签被截取完没有匹配到则跳出循环\n        function advance(n) {\n            index += n; //让索引叠加\n            html = html.substring(n); //截取当前索引 和 后面的字符串。\n        }\n\n        //获取开始标签的名称，收集属性集合，开始位置和结束位置，并且返回该对象\n        function parseStartTag() {\n            var start = html.match(startTagOpen); //匹配开始标签 匹配开头必需是< 后面可以忽略是任何字符串  ^<((?:[a-zA-Z_][\\\\w\\\\-\\\\.]*\\\\:)?[a-zA-Z_][\\\\w\\\\-\\\\.]*)\n            console.log(start)\n            console.log(start[0].length)\n\n            if (start) {\n                var match = {\n                    tagName: start[1], //标签名称\n                    attrs: [], //标签属性集合\n                    start: index //标签的开始索引\n                };\n                //标记开始标签的位置，截取了开始标签\n                advance(start[0].length);\n                var end, attr;\n\n                while (\n                    !(end = html.match(startTagClose)) //没有到 关闭标签 > 标签\n                    && (attr = html.match(attribute)) //收集属性\n                ) {\n                    console.log(html)\n                    //截取属性标签\n                    advance(attr[0].length);\n                    match.attrs.push(attr); //把属性收集到一个集合\n                }\n                if (end) {\n                    match.unarySlash = end[1]; //如果是/>标签 则unarySlash 是/。 如果是>标签 则unarySlash 是空\n                    console.log(end)\n\n                    //截取掉开始标签，并且更新索引\n                    advance(end[0].length);\n                    match.end = index; //开始标签的结束位置\n                    return match\n                }\n            }\n        }\n\n        //把数组对象属性值循环变成对象，这样可以过滤相同的属性\n        //为parseHTML 节点标签堆栈 插入一个桟数据\n        //调用options.start  为parse函数 stack标签堆栈 添加一个标签\n        function handleStartTag(match) {\n            /*\n            * match = {\n                     tagName: start[1], //标签名称\n                     attrs: [], //标签属性集合\n                     start: index， //开始标签的开始索引\n                     match:index ，   //开始标签的 结束位置\n                    unarySlash:'' //如果是/>标签 则unarySlash 是/。 如果是>标签 则unarySlash 是空\n             };\n            * */\n\n            var tagName = match.tagName; //开始标签名称\n            var unarySlash = match.unarySlash; //如果是/>标签 则unarySlash 是/。 如果是>标签 则unarySlash 是空\n            console.log(expectHTML)\n            console.log('lastTag==')\n            console.log(lastTag)\n            console.log(tagName)\n\n            if (expectHTML) {   //true\n\n                if (\n                    lastTag === 'p' //上一个标签是p\n                    /*\n                      判断标签是否是\n                     'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n                     'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n                     'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n                     'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n                     'title,tr,track'\n                     */\n                    && isNonPhrasingTag(tagName)\n                ) {\n                    //查找parseHTML的stack栈中与当前tagName标签名称相等的标签，\n                    //调用options.end函数，删除当前节点的子节点中的最后一个如果是空格或者空的文本节点则删除，\n                    //为stack出栈一个当前标签，为currentParent变量获取到当前节点的父节点\n                    parseEndTag(lastTag);\n                }\n                if (\n                    canBeLeftOpenTag$$1(tagName) &&   //判断标签是否是 'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n                    lastTag === tagName //上一个标签和现在标签相同  <li><li> 编译成 <li></li>  但是这种情况是不会出现的 因为浏览器解析的时候会自动补全如果是<li>我是li标签<li> 浏览器自动解析成  <li>我是li标签</li><li> </li>\n                ) {\n                    //查找parseHTML的stack栈中与当前tagName标签名称相等的标签，\n                    //调用options.end函数，删除当前节点的子节点中的最后一个如果是空格或者空的文本节点则删除，\n                    //为stack出栈一个当前标签，为currentParent变量获取到当前节点的父节点\n                    parseEndTag(tagName);\n                }\n            }\n\n            var unary = isUnaryTag$$1(tagName) || //函数匹配标签是否是 'area,base,br,col,embed,frame,hr,img,input,isindex,keygen, link,meta,param,source,track,wbr'\n                !!unarySlash; //如果是/> 则为真\n\n            var l = match.attrs.length;\n            var attrs = new Array(l); //数组属性对象转换正真正的数组对象\n            for (var i = 0; i < l; i++) {\n                var args = match.attrs[i]; //获取属性对象\n                // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n                //对FF bug进行黑客攻击:https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n                if (\n                    IS_REGEX_CAPTURING_BROKEN &&  //这个应该是 火狐浏览器私有 标志\n                    args[0].indexOf('\"\"') === -1\n                ) {\n                    if (args[3] === '') {\n                        delete args[3];\n                    }\n                    if (args[4] === '') {\n                        delete args[4];\n                    }\n                    if (args[5] === '') {\n                        delete args[5];\n                    }\n                }\n                var value = args[3] || args[4] || args[5] || '';\n                var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n                    ? options.shouldDecodeNewlinesForHref  // true chrome在a[href]中编码内容\n                    : options.shouldDecodeNewlines;  //flase //IE在属性值中编码换行，而其他浏览器则不会\n\n                attrs[i] = {  //把数组对象属性值循环变成对象，这样可以过滤相同的属性\n                    name: args[1], //属性名称\n                    //属性值\n                    value: decodeAttr(value, shouldDecodeNewlines) //替换html 中的特殊符号，转义成js解析的字符串,替换 把   &lt;替换 <  ， &gt; 替换 > ， &quot;替换  \"， &amp;替换 & ， &#10;替换\\n  ，&#9;替换\\t\n\n                };\n\n            }\n\n            console.log('==!unary==')\n            console.log(!unary)\n\n            if (!unary) { //如果不是单标签\n\n                // 为parseHTML 节点标签堆栈 插入一个桟数据\n                stack.push({ //标签堆栈\n                    tag: tagName, //开始标签名称\n                    lowerCasedTag: tagName.toLowerCase(), //变成小写记录标签\n                    attrs: attrs //获取属性\n                });\n                //设置结束标签\n                lastTag = tagName;\n                console.log('== parseHTML handleStartTag stack==')\n                console.log(stack)\n\n            }\n\n\n            //\n            if (options.start) {\n\n                //标签开始函数， 创建一个ast标签dom，  判断获取v-for属性是否存在如果有则转义 v-for指令 把for，alias，iterator1，iterator2属性添加到虚拟dom中\n                //获取v-if属性，为el虚拟dom添加 v-if，v-eles，v-else-if 属性\n                //获取v-once 指令属性，如果有有该属性 为虚拟dom标签 标记事件 只触发一次则销毁\n                //校验属性的值，为el添加muted， events，nativeEvents，directives，  key， ref，slotName或者slotScope或者slot，component或者inlineTemplate 标志 属性\n                // 标志当前的currentParent当前的 element\n                //为parse函数 stack标签堆栈 添加一个标签\n                options.start(\n                    tagName,  //标签名称\n                    attrs,  //标签属性\n                    unary,  // 如果不是单标签则为真\n                    match.start,  //开始标签的开始位置\n                    match.end //开始标签的结束的位置\n                );\n            }\n\n\n        }\n\n\n\n        //查找parseHTML的stack栈中与当前tagName标签名称相等的标签，\n        //调用options.end函数，删除当前节点的子节点中的最后一个如果是空格或者空的文本节点则删除，\n        //为stack出栈一个当前标签，为currentParent变量获取到当前节点的父节点\n        function parseEndTag(\n            tagName,   //标签名称\n            start,  //结束标签开始位置\n            end    //结束标签结束位置\n        ) {\n            var pos,\n                lowerCasedTagName;\n            if (start == null) { //如果没有传开始位置\n                start = index;    //就那当前索引\n            }\n            if (end == null) {  //如果没有传结束位置\n                end = index;    //就那当前索引\n            }\n\n            if (tagName) { //结束标签名称\n                lowerCasedTagName = tagName.toLowerCase(); //将字符串转化成小写\n            }\n\n            // Find the closest opened tag of the same type 查找最近打开的相同类型的标记\n            if (tagName) {\n                // 获取stack堆栈最近的匹配标签\n                for (pos = stack.length - 1; pos >= 0; pos--) {\n                    //找到最近的标签相等\n                    if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n                        break\n                    }\n                }\n            } else {\n                // If no tag name is provided, clean shop\n                //如果没有提供标签名称，请清理商店\n                pos = 0;\n            }\n\n\n            if (pos >= 0) { //这里就获取到了stack堆栈的pos索引\n                // Close all the open elements, up the stack 关闭所有打开的元素，向上堆栈\n                console.log(pos)\n\n                for (var i = stack.length - 1; i >= pos; i--) {\n\n                    if (\"development\" !== 'production' && //如果stack中找不到tagName 标签的时候就输出警告日志，找不到标签\n                        (i > pos || !tagName) &&\n                        options.warn\n                    ) {\n                        options.warn(\n                            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n                        );\n                    }\n                    if (options.end) {\n                        console.log(options.end)\n                        //调用options.end函数，删除当前节点的子节点中的最后一个如果是空格或者空的文本节点则删除，\n                        //为stack出栈一个当前标签，为currentParent变量获取到当前节点的父节点\n                        options.end(\n                            stack[i].tag,//结束标签名称\n                            start, //结束标签开始位置\n                            end //结束标签结束位置\n                        );\n                    }\n                }\n                // Remove the open elements from the stack\n                //从堆栈中删除打开的元素\n                // console.log(stack[pos].tag)\n                // 为parseHTML 节点标签堆栈 出桟当前匹配到的标签\n                stack.length = pos;\n                //获取到上一个标签，就是当前节点的父节点\n                lastTag = pos && stack[pos - 1].tag;\n                console.log(stack)\n                console.log(lastTag)\n\n\n\n\n            } else if (lowerCasedTagName === 'br') {\n                if (options.start) {\n                    //标签开始函数， 创建一个ast标签dom，  判断获取v-for属性是否存在如果有则转义 v-for指令 把for，alias，iterator1，iterator2属性添加到虚拟dom中\n                    //获取v-if属性，为el虚拟dom添加 v-if，v-eles，v-else-if 属性\n                    //获取v-once 指令属性，如果有有该属性 为虚拟dom标签 标记事件 只触发一次则销毁\n                    //校验属性的值，为el添加muted， events，nativeEvents，directives，  key， ref，slotName或者slotScope或者slot，component或者inlineTemplate 标志 属性\n                    // 标志当前的currentParent当前的 element\n                    //为parse函数 stack标签堆栈 添加一个标签\n                    options.start(\n                        tagName,\n                        [], true,\n                        start,\n                        end\n                    );\n                }\n            } else if (lowerCasedTagName === 'p') {\n                if (options.start) {\n                    //标签开始函数， 创建一个ast标签dom，  判断获取v-for属性是否存在如果有则转义 v-for指令 把for，alias，iterator1，iterator2属性添加到虚拟dom中\n                    //获取v-if属性，为el虚拟dom添加 v-if，v-eles，v-else-if 属性\n                    //获取v-once 指令属性，如果有有该属性 为虚拟dom标签 标记事件 只触发一次则销毁\n                    //校验属性的值，为el添加muted， events，nativeEvents，directives，  key， ref，slotName或者slotScope或者slot，component或者inlineTemplate 标志 属性\n                    // 标志当前的currentParent当前的 element\n                    //为parse函数 stack标签堆栈 添加一个标签\n                    options.start(\n                        tagName,\n                        [], false,\n                        start,\n                        end);\n                }\n                if (options.end) {\n                    //删除当前节点的子节点中的最后一个如果是空格或者空的文本节点则删除，\n                    //为stack出栈一个当前标签，为currentParent变量获取到当前节点的父节点\n                    options.end(\n                        tagName,\n                        start,\n                        end\n                    );\n                }\n            }\n            console.log(lastTag)\n\n        }\n    }\n```\n\n\n\n一些匹配模板正则\n\n```\n  var onRE = /^@|^v-on:/;//判断是否是 @或者v-on:属性开头的\n    var dirRE = /^v-|^@|^:/; //判断是否是 v-或者@或者:  属性开头的\n    var forAliasRE = /([^]*?)\\s+(?:in|of)\\s+([^]*)/; //匹配 含有   字符串 in  字符串   或者  字符串 of  字符串\n    var forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/; //匹配上,  但是属于两边是 [{ , 点 , }]  所以匹配上   ,+字符串\n    var stripParensRE = /^\\(|\\)$/g; //匹配括号 ()\n\n    var argRE = /:(.*)$/; //匹配字符串是否含有:\n    var bindRE = /^:|^v-bind:/; //开始匹配是 :或者是v-bind\n    var modifierRE = /\\.[^.]+/g; // 匹配以点开头的分组 不属于点 data.object.info.age  匹配到 ['.object'，'.info' , '.age']\n\n    var decodeHTMLCached = cached(he.decode);    //获取 真是dom的textContent文本\n```\n\n\n\n## Dual data response\n\nThe dual data binding entry method is in the defineReactive function, whether it is prop or state or property listener set method or initInjections entry.\n\nFirst he instantiates var dep = new Dep(); Depending on the collection Dep, the get method adds one\n\n​       //添加一个dep\n​                    dep.depend();\n\n​    if (childOb) {  //如果子节点存在也添加一个dep\n​                        childOb.dep.depend();\n​                        if (Array.isArray(value)) {  //判断是否是数组 如果是数组\n​                            dependArray(value);   //则数组也添加dep\n​                        }\n​                    }\n\n\n\nThe set method is the trigger for updating the view\n\n//observe Add an observer\n\n// Then add dependencies\n\n   childOb = !shallow && observe(newVal);\n    //更新数据\n    dep.notify();\n\n\n\n```\n    /**\n     * Define a reactive property on an Object.\n     * 在对象上定义一个无功属性。\n     * 更新数据\n     * 通过defineProperty的set方法去通知notify()订阅者subscribers有新的值修改\n     * 添加观察者 get set方法\n     */\n    function defineReactive(obj, //对象\n        key,//对象的key\n        val, //监听的数据 返回的数据\n        customSetter, //  日志函数\n        shallow //是否要添加__ob__ 属性\n    ) {\n        //实例化一个主题对象，对象中有空的观察者列表\n        var dep = new Dep();\n        //获取描述属性\n        var property = Object.getOwnPropertyDescriptor(obj, key);\n        var _property = Object.getOwnPropertyNames(obj); //获取实力对象属性或者方法，包括定义的描述属性\n        console.log(property);\n        console.log(_property);\n\n        if (property && property.configurable === false) {\n            return\n        }\n\n        // cater for pre-defined getter/setters\n\n        var getter = property && property.get;\n        console.log('arguments.length=' + arguments.length)\n\n        if (!getter && arguments.length === 2) {\n            val = obj[key];\n        }\n        var setter = property && property.set;\n        console.log(val)\n        //判断value 是否有__ob__    实例化 dep对象,获取dep对象  为 value添加__ob__ 属性递归把val添加到观察者中  返回 new Observer 实例化的对象\n        var childOb = !shallow && observe(val);\n        //定义描述\n        Object.defineProperty(obj, key, {\n            enumerable: true,\n            configurable: true,\n            get: function reactiveGetter() {\n\n                var value = getter ? getter.call(obj) : val;\n                if (Dep.target) {  //Dep.target 静态标志 标志了Dep添加了Watcher 实例化的对象\n                    //添加一个dep\n                    dep.depend();\n                    if (childOb) {  //如果子节点存在也添加一个dep\n                        childOb.dep.depend();\n                        if (Array.isArray(value)) {  //判断是否是数组 如果是数组\n                            dependArray(value);   //则数组也添加dep\n                        }\n                    }\n                }\n                return value\n            },\n            set: function reactiveSetter(newVal) {\n                var value = getter ? getter.call(obj) : val;\n                /* eslint-disable no-self-compare  新旧值比较 如果是一样则不执行了*/\n                if (newVal === value || (newVal !== newVal && value !== value)) {\n                    return\n                }\n                /* eslint-enable no-self-compare\n                 *   不是生产环境的情况下\n                 * */\n                if (\"development\" !== 'production' && customSetter) {\n                    customSetter();\n                }\n                if (setter) {\n                    //set 方法 设置新的值\n                    setter.call(obj, newVal);\n                } else {\n                    //新的值直接给他\n                    val = newVal;\n                }\n                console.log(newVal)\n\n                //observe 添加 观察者\n                childOb = !shallow && observe(newVal);\n                //更新数据\n                dep.notify();\n            }\n        });\n    }\n\n```\n\n\n\n\n\n\n\n## Depends on collecting Dep\n\n In the vue data get, whoever reads the data will collect it. Therefore, dep is a set. When the data is set, the notify method of each dep is triggered by traversing the dep to update through the view\nThe main function of dep is to act only as a collection, so how do you update the view after collecting the dependencies\nSo you need to define a new Watcher class that will update the view\nEach dependency collected by the dep is actually a Watcher\n\n```\n    //主题对象Dep构造函数  主要用于添加发布事件后，用户更新数据的 响应式原理之一函数\n    var Dep = function Dep() {\n        //uid  初始化为0\n        this.id = uid++;\n        /* 用来存放Watcher对象的数组 */\n        this.subs = [];\n    };\n\n    Dep.prototype.addSub = function addSub(sub) {\n        /* 在subs中添加一个Watcher对象 */\n        this.subs.push(sub);\n    };\n\n    Dep.prototype.removeSub = function removeSub(sub) {\n        /*删除 在subs中添加一个Watcher对象 */\n        remove(this.subs, sub);\n    };\n    //this$1.deps[i].depend();\n    //为Watcher 添加 为Watcher.newDeps.push(dep); 一个dep对象\n    Dep.prototype.depend = function depend() {\n        //添加一个dep    target 是Watcher dep就是dep对象\n        if (Dep.target) {\n            //像指令添加依赖项\n            Dep.target.addDep(this);\n        }\n    };\n    /* 通知所有Watcher对象更新视图 */\n    Dep.prototype.notify = function notify() {\n        // stabilize the subscriber list first\n        var subs = this.subs.slice();\n        for (var i = 0, l = subs.length; i < l; i++) {\n            //更新数据\n            subs[i].update();\n        }\n    };\n\n    // the current target watcher being evaluated.\n    // this is globally unique because there could be only one\n    // watcher being evaluated at any time.\n    //当前正在评估的目标监视程序。\n    //这在全球是独一无二的，因为只有一个\n    //观察者在任何时候都被评估。\n    Dep.target = null;\n    var targetStack = [];\n\n    function pushTarget(_target) {\n        //target 是Watcher dep就是dep对象\n        if (Dep.target) { //静态标志 Dep当前是否有添加了target\n            //添加一个pushTarget\n            targetStack.push(Dep.target);\n        }\n        Dep.target = _target;\n    }\n\n    //\n    function popTarget() {\n        // 出盏一个pushTarget\n        Dep.target = targetStack.pop();\n    }\n```\n\n## Data detection Watcher\n\n Watcher's main function is to interface to the Dep notification, and then call the update method to update the view\nThe callback is triggered in the update method, and the callback function is actually the generated render function\n\nUpon calling the render function, the values in the function will get the changed value, so a new vnode will be generated\nAfter the new vnode is generated, it is the patch process. The new vnode is compared with the old vnode. Finally, the vnode after comparison is converted into the actual dom and added to the node to which the template is mounted\nAfter the new template is mounted, delete the old template so that the view is updated\n\n```\n     * *观察者分析表达式，收集依赖项，\n     *并在表达式值更改时触发回调。\n     *这用于$watch() api和指令。\n     * 当前vue实例、updateComponent函数、空函数。\n     */\n    var Watcher = function Watcher(\n        vm, //vm dom\n        expOrFn,  //获取值的函数，或者是更新viwe试图函数\n        cb, //回调函数,回调值给回调函数\n        options, //参数\n        isRenderWatcher//是否渲染过得观察者\n    ) {\n        console.log('====Watcher====')\n        this.vm = vm;\n        //是否是已经渲染过得观察者\n        if (isRenderWatcher) { //把当前 Watcher 对象赋值给 vm._watcher上\n            vm._watcher = this;\n        }\n        //把观察者添加到队列里面 当前Watcher添加到vue实例上\n        vm._watchers.push(this);\n        // options\n        if (options) { //如果有参数\n            this.deep = !!options.deep; //实际\n            this.user = !!options.user; //用户\n            this.lazy = !!options.lazy; //懒惰 ssr 渲染\n            this.sync = !!options.sync; //如果是同步\n        } else {\n\n            this.deep = this.user = this.lazy = this.sync = false;\n        }\n        this.cb = cb; //回调函数\n        this.id = ++uid$1; // uid for batching uid为批处理  监听者id\n        this.active = true; //激活\n        this.dirty = this.lazy; // for lazy watchers 对于懒惰的观察者\n        this.deps = [];    // 观察者队列\n        this.newDeps = []; // 新的观察者队列\n        // 内容不可重复的数组对象\n        this.depIds = new _Set();\n        this.newDepIds = new _Set();\n        // 把函数变成字符串形式\n        this.expression = expOrFn.toString();\n        // parse expression for getter\n        //getter的解析表达式\n        if (typeof expOrFn === 'function') {\n            //获取值的函数\n            this.getter = expOrFn;\n        } else {\n            //如果是keepAlive 组件则会走这里\n            //path 因该是路由地址\n            if (bailRE.test(path)) {  //  匹配上 返回 true     var bailRE = /[^\\w.$]/;  //匹配不是 数字字母下划线 $符号   开头的为true\n                return\n            }\n\n            // //匹配不上  path在已点分割\n            // var segments = path.split('.');\n            // return function (obj) {\n            //\n            //     for (var i = 0; i < segments.length; i++) {\n            //         //如果有参数则返回真\n            //         if (!obj) {\n            //             return\n            //         }\n            //         //将对象中的一个key值 赋值给该对象 相当于 segments 以点拆分的数组做obj 的key\n            //         obj = obj[segments[i]];\n            //     }\n            //     //否则返回一个对象\n            //     return obj\n            // }\n\n            //匹配不是 数字字母下划线 $符号   开头的为true\n\n            this.getter = parsePath(expOrFn);\n            if (!this.getter) { //如果不存在 则给一个空的数组\n                this.getter = function () {\n                };\n                \"development\" !== 'production' && warn(\n                    \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n                    'Watcher only accepts simple dot-delimited paths. ' +\n                    'For full control, use a function instead.',\n                    vm\n                );\n            }\n        }\n        this.value = this.lazy ?  //   lazy为真的的时候才能获取值  这个有是组件才为真\n            undefined :\n            this.get(); //计算getter，并重新收集依赖项。 获取值\n    };\n\n```\n\nget is triggered when the Watcher instance constructor executes\nAfter the get is triggered, the Watcher instance is collected\nupdate is the method that is triggered when a Dep notification is received\nThe run method is called in update\nThe cb callback method is called inside the run method\nThe cb back method is actually the template compile-time render method\n\n\n\n\n\n# Virtual DOM\n\nVirtual DOM in vue actually identifies a dom by defining a Vnode class and adding some dom attributes to the class\n\nThe main effect is to reduce the manipulation of the actual dom to reduce the cost of browser performance\n\n```\n /*\n     * 创建标准的vue vnode\n     *\n     * */\n\n    var VNode = function VNode(\n        tag, /*当前节点的标签名*/\n        data, /*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/\n        children, //子节点\n        text, //文本\n        elm, /*当前节点的dom */\n        context, /*编译作用域*/\n        componentOptions, /*组件的option选项*/\n        asyncFactory/*异步工厂*/) {\n        /*当前节点的标签名*/\n        this.tag = tag;\n\n        /*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/\n        this.data = data;\n\n        /*当前节点的子节点，是一个数组*/\n        this.children = children;\n\n        /*当前节点的文本*/\n        this.text = text;\n\n        /*当前虚拟节点对应的真实dom节点*/\n        this.elm = elm;\n\n        /*当前节点的名字空间*/\n        this.ns = undefined;\n\n        /*编译作用域 vm*/\n        this.context = context;\n\n        this.fnContext = undefined;\n        this.fnOptions = undefined;\n        this.fnScopeId = undefined;\n\n        /*节点的key属性，被当作节点的标志，用以优化*/\n        this.key = data && data.key;\n\n        /*组件的option选项*/\n        this.componentOptions = componentOptions;\n\n        /*当前节点对应的组件的实例*/\n        this.componentInstance = undefined;\n\n        /*当前节点的父节点*/\n        this.parent = undefined;\n\n        /*简而言之就是是否为原生HTML或只是普通文本，innerHTML的时候为true，textContent的时候为false*/\n        this.raw = false;\n\n        /*静态节点标志*/\n        this.isStatic = false;\n\n        /*是否作为跟节点插入*/\n        this.isRootInsert = true;\n\n        /*是否为注释节点*/\n        this.isComment = false;\n\n        /*是否为克隆节点*/\n        this.isCloned = false;\n\n        /*是否有v-once指令*/\n        this.isOnce = false;\n\n        /*异步工厂*/\n        this.asyncFactory = asyncFactory;\n\n        this.asyncMeta = undefined;\n        this.isAsyncPlaceholder = false;\n    };\n```\n\n# diff algorithm\n\npatch, sameVnode, patchVnode, updateChildren these methods\n\nThe entry point is patch and then the sameVnode is called\n\n```\n    //sameVnode(oldVnode, vnode)2个节点的基本属性相同，那么就进入了2个节点的diff过程。\n    function sameVnode(a, b) {\n        return (\n\n            a.key === b.key && (   //如果a的key 等于b的key\n                (\n\n                    a.tag === b.tag && // 如果a的tag 等于b的tag\n                    a.isComment === b.isComment && // 如果a和b 都是注释节点\n                    isDef(a.data) === isDef(b.data) && //如果a.data 和 b.data 都定义后，是组件，或者是都含有tag属性\n                    sameInputType(a, b)   //相同的输入类型。判断a和b的属性是否相同\n                ) || (\n                    isTrue(a.isAsyncPlaceholder) && //判断是否是异步的\n                    a.asyncFactory === b.asyncFactory &&\n                    isUndef(b.asyncFactory.error)\n                )\n            )\n        )\n    }\n```\n\nIf the sameVnode condition is valid, enter the patchVnode method.\n\nThe patchVnode method is mainly used to add and delete vnodes and update key. Then determine when neither virtual dom is empty and they are not equal oldCh! == ch enters the updateChildren diff update algorithm.\n\n```\n  // 对比 虚拟dom\n        function patchVnode(\n            oldVnode, // 旧的虚拟dom\n            vnode,  // 新的虚拟dom\n            insertedVnodeQueue,  // 删除虚拟dom队列\n            removeOnly\n        ) {\n            if (oldVnode === vnode) { //如果他们相等\n                return\n            }\n\n            var elm = vnode.elm = oldVnode.elm; //获取真实的dom\n\n            // 判断是否有isAsyncPlaceholder 属性\n            if (isTrue(oldVnode.isAsyncPlaceholder)) {\n                //判断数据 是否不等于 undefined或者null\n                if (isDef(vnode.asyncFactory.resolved)) {\n                    // ssr 渲染\n                    hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n                } else {\n                    vnode.isAsyncPlaceholder = true;\n                }\n                return\n            }\n\n            // reuse element for static trees.\n            // note we only do this if the vnode is cloned -\n            // if the new node is not cloned it means the render functions have been\n            // reset by the hot-reload-api and we need to do a proper re-render.\n            //为静态树重用元素。\n            //注意，只有当vnode被克隆时，我们才这样做\n            //如果新节点没有克隆，则表示渲染函数已经克隆\n            //由hot-reload api重置，我们需要做一个适当的重新渲染。\n            if (isTrue(vnode.isStatic) &&\n                isTrue(oldVnode.isStatic) &&\n                vnode.key === oldVnode.key &&\n                (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n            ) {\n                vnode.componentInstance = oldVnode.componentInstance;\n                return\n            }\n\n            var i;\n            var data = vnode.data;\n            // 钩子函数\n            if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n                i(oldVnode, vnode);\n            }\n\n            var oldCh = oldVnode.children;\n            var ch = vnode.children;\n            //循环组件实例 是否定义有 tag标签\n            if (isDef(data) && isPatchable(vnode)) {\n                // 触发钩子函数 更新钩子函数\n                for (i = 0; i < cbs.update.length; ++i) {\n                    cbs.update[i](oldVnode, vnode);\n                }\n                // 触发钩子函数\n                if (isDef(i = data.hook) && isDef(i = i.update)) {\n                    i(oldVnode, vnode);\n                }\n            }\n\n            //如果是文本虚拟dom\n            if (isUndef(vnode.text)) {\n                // 两个虚拟dom都存在\n                if (isDef(oldCh) && isDef(ch)) {\n                    // 如果他们不相等\n                    if (oldCh !== ch) {\n                        // diff算法更新\n                        updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);\n                    }\n                } else if (isDef(ch)) {  // 如果是有新的虚拟dom\n                    // 如果是文本虚拟dom 则 设置 空\n                    if (isDef(oldVnode.text)) {\n                        nodeOps.setTextContent(elm, '');\n                    }\n                    // 添加 vnode\n                    addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n                } else if (isDef(oldCh)) { // 如果旧的有 新的虚拟dom没有则删除 虚拟dom\n                    removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n                } else if (isDef(oldVnode.text)) { // 如果是文本虚拟dom则设置文本\n                    nodeOps.setTextContent(elm, '');\n                }\n\n\n            } else if (oldVnode.text !== vnode.text) {\n                // 如果新旧的文本不相同则设置文本\n                nodeOps.setTextContent(elm, vnode.text);\n            }\n            if (isDef(data)) {\n                // 触发钩子\n                if (isDef(i = data.hook) && isDef(i = i.postpatch)) {\n                    i(oldVnode, vnode);\n                }\n            }\n        }\n\n```\n\n\n\n# ddif algorithm updateChildren\n\ndiif algorithm, the diff algorithm of vue2 is a depth-first algorithm for traversal, and then the comparison algorithm compares the old vnode with the new vnode, first compares their basic attributes, such as key labels, etc. If they are the same, the diff algorithm compares the old Vnode with the new Vnode, and then has four pointer indexes. Two new vnode start Pointers and two new vnode end Pointers, two old vnode start Pointers and old vnode end Pointers. Then first determine whether the vnode is empty, if it is empty, move to the center of the start pointer ++ end pointer --. Then, after comparing the two sides, cross-compare until the same vnode is not found. If there are more Vnodes, delete them; if there are fewer, add them. After comparing, call patchVnode to add or delete virtual dom. Then if there are Vnodes that are not the same, updateChildren is called, so deep recursion, also called depth-first search, is done, and then the child Vnodes are not updated to the real dom.\n\n```\n\n        // ddif 算法\n        function updateChildren(\n            parentElm,  // 父亲dom\n            oldCh,  // 旧的虚拟dom\n            newCh,  // 新的虚拟dom\n            insertedVnodeQueue,\n            removeOnly\n        ) {\n            var oldStartIdx = 0;  // 旧的虚拟dom开始指针 \n            var newStartIdx = 0; // 新的虚拟dom开始指针 \n            var oldEndIdx = oldCh.length - 1; // 旧的虚拟dom结束指针 \n            var newEndIdx = newCh.length - 1;// 新的虚拟dom结束指针 \n\n            var oldStartVnode = oldCh[0];  // 旧的虚拟dom开始节点\n            var newStartVnode = newCh[0]; // 新的虚拟dom开始节点\n\n            var oldEndVnode = oldCh[oldEndIdx]; // 旧的虚拟dom结束节点\n            var newEndVnode = newCh[newEndIdx];// 新的虚拟dom结束节点\n\n            var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n            // removeOnly is a special flag used only by <transition-group>\n            // to ensure removed elements stay in correct relative positions\n            // during leaving transitions\n            var canMove = !removeOnly;\n\n            {\n                // 检查同一个兄弟节点是否有重复的key，如果有则发出警告日志\n                checkDuplicateKeys(newCh);\n            }\n\n            /*\n            diff 算法开始\n              这里diff算法其实就是\n\n            */\n            while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n\n                if (isUndef(oldStartVnode)) {\n                    // 如果旧的开始节点不存在或者为空\n                    // 如果旧的开始节点指针往中间偏移\n                    oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n                } else if (isUndef(oldEndVnode)) {\n                    // 如果旧的结束节点不存在或者为空\n                    // 如果旧的结束节点指针往中间偏移\n                    oldEndVnode = oldCh[--oldEndIdx];\n\n                } else if (sameVnode(oldStartVnode, newStartVnode)) {   //sameVnode(oldVnode, vnode)2个节点的基本属性相同，那么就进入了2个节点的diff过程。\n\n\n\n                    // 在对比下虚拟dom \n                    patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n\n                    //开始指针 两个都往中间偏移\n                    oldStartVnode = oldCh[++oldStartIdx];\n                    newStartVnode = newCh[++newStartIdx];\n\n                } else if (sameVnode(oldEndVnode, newEndVnode)) {  //sameVnode(oldVnode, vnode)2个节点的基本属性相同，那么就进入了2个节点的diff过程。\n                    // 在对比下虚拟dom \n                    patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n                    // 结束指针 两个都往中间偏移\n                    oldEndVnode = oldCh[--oldEndIdx];\n                    newEndVnode = newCh[--newEndIdx];\n                } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right  //sameVnode(oldVnode, vnode)2个节点的基本属性相同，那么就进入了2个节点的diff过程。\n\n                    // 交叉对比 深度优先算法入口\n                    patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n                    // 交叉对比\n                    canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n\n                    oldStartVnode = oldCh[++oldStartIdx];\n                    newEndVnode = newCh[--newEndIdx];\n                } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n                    // 交叉对比\n                    patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n                    // 交叉对比\n                    canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n                    oldEndVnode = oldCh[--oldEndIdx];\n                    newStartVnode = newCh[++newStartIdx];\n                } else {\n                    // 如果没有key 则给塔新的key\n                    if (isUndef(oldKeyToIdx)) {\n\n                        // 创建key 如果没有key 则用索引作为key\n                        oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n                    }\n                    \n                    // 获取 旧的vnode key\n                    idxInOld = isDef(newStartVnode.key)\n                        ? oldKeyToIdx[newStartVnode.key]\n                          // 查找旧的vnode key\n                        : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n                        // 如果旧的 vnode key 未定义则创建新的真实dom\n                    if (isUndef(idxInOld)) { // New element\n                         //创建真实 dom 节点\n                        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n                    } else {\n\n                        vnodeToMove = oldCh[idxInOld];\n                        if (sameVnode(vnodeToMove, newStartVnode)) {\n                            // 对比虚拟dom\n                            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n                            \n                            oldCh[idxInOld] = undefined;\n                            // 真实节点交换\n                            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n                        } else {\n                            // same key but different element. treat as new element\n                            // 创建真实dom\n                            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n                        }\n                    }\n                    newStartVnode = newCh[++newStartIdx];\n                }\n            }\n            if (oldStartIdx > oldEndIdx) {\n                refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n                // 添加虚拟dom\n                addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n            } else if (newStartIdx > newEndIdx) {\n                // 删除虚拟dom\n                removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n            }\n        }\n\n```\n\nSpecifically look at my source code and flow chart, here the text does not describe so much, the flow chart is the following network disk, source code is vue.js, basically every line has comments\n\nlink：https://pan.baidu.com/s/10IxV6mQ2TIwkRACKu2T0ng \npassword：1fnu \n\nThe above vue.js is my vue.js based on each line of vue source code with comments, and the other files are the vue.js source code small demo that I pulled out when I looked at Vue.js source code. If you feel good, please move your little finger to help me click a satr, your support is my motivation，thank you\n\n\n\n\nAuthor: Yao Guanshou\n"
        },
        {
          "name": "Reflect.ownKeys.html",
          "type": "blob",
          "size": 0.7802734375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      //Reflect.ownKeys 可以读取到Object.defineProperty 定义的key， 而Object.keys 只能定义到对象的key\r\n      var obj = {}\r\n      Object.defineProperty(obj, 'method1', {\r\n          value: function () {\r\n              alert(\"Non enumerable property\");\r\n          },\r\n          enumerable: false\r\n      })\r\n\r\n      console.log(Object.keys(obj))\r\n      // []\r\n      console.log(Reflect.ownKeys(obj))\r\n      // [\"method1\"]\r\n\r\n      const obj1 = {\r\n          id1: 42,\r\n          id2: 13\r\n      };\r\n      console.log(Object.keys(obj1))\r\n      // ['id1', 'id2']\r\n      console.log(Reflect.ownKeys(obj1))\r\n      // ['id1', 'id2']\r\n\r\n\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "Set.html",
          "type": "blob",
          "size": 1.041015625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    let set6 = new Set([1, 2, 2, 3, 4, 3, 5])\r\n    console.log('distinct 1:', set6)\r\n\r\n    //数组去重\r\n    let arr1 = [1, 2, 3, 4]\r\n    let arr2 = [2, 3, 4, 5, 6]\r\n    let set7 = new Set([...arr1, ...arr2])\r\n    console.log('distinct 2:', set7)\r\n\r\n    //1.向Set中添加元素。\r\n    let set1 = new Set()\r\n    set1.add(1)\r\n    set1.add(2)\r\n    set1.add(3)\r\n    console.log('added:', set1)\r\n\r\n\r\n    //3.判断某元素是否存在。\r\n\r\n    let set2 = new Set()\r\n    set2.add(1)\r\n    set2.add(2)\r\n    set2.add(3)\r\n    set2.delete(1)\r\n    console.log('has(1):', set2.has(1))\r\n    console.log('has(2):', set2.has(2))\r\n\r\n    //4.清除所有元素。\r\n    let set3 = new Set()\r\n    set3.add(1)\r\n    set3.add(2)\r\n    set3.add(3)\r\n    set3.clear()\r\n    console.log('cleared:', set3)\r\n\r\n    //数组去重\r\n    let arr=[1,111,33,11,11,11,34,5,6,7,4];\r\n    console.log( new Set([...arr]))\r\n    console.log([...arr])\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "StrictChecking.html",
          "type": "blob",
          "size": 0.3359375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      const num1 = parseInt(\"10\", 2)\r\n      const num2 = parseFloat(\"10\", 2);\r\n      const total = num1+ num2\r\n      console.log(num1)\r\n      console.log(num2)\r\n      console.log(total)\r\n\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "String方法之fromCharCode()和charCodeAt().html",
          "type": "blob",
          "size": 0.998046875,
          "content": "<!DOCTYPE html>\r\n<html class=\"ui-page-login\">\r\n\r\n<head>\r\n\r\n\r\n</head>\r\n\r\n\r\n<body>\r\n<script type=\"text/javascript\">\r\n    function toUnicodeFun(data){\r\n        if(data == '' || typeof data == 'undefined') return '请输入汉字';\r\n        var str ='';\r\n        for(var i=0;i<data.length;i++){\r\n            str+=\"\\\\u\"+data.charCodeAt(i).toString(16);\r\n        }\r\n        return str;\r\n    }\r\n\r\n    var resultUnicode = toUnicodeFun('中国'); // \\u4e2d\\u56fd\r\n    console.log(resultUnicode);\r\n\r\n\r\n    function toChineseWords(data){\r\n        if(data == '' || typeof data == 'undefined') return '请输入十六进制unicode';\r\n        data = data.split(\"\\\\u\");\r\n        var str ='';\r\n        for(var i=0;i<data.length;i++){\r\n            str+=String.fromCharCode(parseInt(data[i],16).toString(10));\r\n        }\r\n        return str;\r\n    }\r\n\r\n    var resultChineseWords = toChineseWords(\"\\u4e2d\\u56fd\");\r\n    console.log(resultChineseWords);//中国\r\n    document.write(String.fromCharCode(0x7C))\r\n\r\n</script>\r\n\r\n</body>\r\n\r\n</html>"
        },
        {
          "name": "Symbol.html",
          "type": "blob",
          "size": 0.306640625,
          "content": "<!DOCTYPE html>\r\n<html class=\"ui-page-login\">\r\n\r\n\t<head>\r\n\t\t \r\n\r\n\t</head>\r\n\r\n \r\n\t<body>\r\n\t   <script type=\"text/javascript\">\r\n\t   \t//声明是唯一的数据，类型和string字符串一样，不能添加属性\r\n\t   \t    let s = Symbol();\r\n\r\n            console.log(typeof s)\r\n\t   </script>\r\n\r\n\t</body>\r\n\r\n</html>"
        },
        {
          "name": "Symbol1.html",
          "type": "blob",
          "size": 0.3349609375,
          "content": "<!DOCTYPE html>\r\n<html class=\"ui-page-login\">\r\n\r\n\t<head>\r\n\t\t \r\n\r\n\t</head>\r\n\r\n \r\n\t<body>\r\n\t   <script type=\"text/javascript\">\r\n\t   \t   let s1 = Symbol('foo');\r\n\t   \t   let s2 =Symbol('bar');\r\n\t   \t   console.log(s1.toString());\r\n\t   \t   console.log(s2.toString());\r\n\t   \t   console.log(Symbol);\r\n\t   \t   \r\n\r\n\t   </script>\r\n\r\n\t</body>\r\n\r\n</html>"
        },
        {
          "name": "Symbol2.html",
          "type": "blob",
          "size": 0.263671875,
          "content": "<!DOCTYPE html>\r\n<html class=\"ui-page-login\">\r\n\r\n<head>\r\n\r\n\r\n</head>\r\n\r\n\r\n<body>\r\n<script type=\"text/javascript\">\r\n    console.log(Symbol(\"bar\"))\r\n\r\n\r\n    console.log(Symbol(\"bar\"))\r\n    console.log(Symbol(\"bar\")===Symbol(\"bar\"))\r\n\r\n\r\n\r\n\r\n</script>\r\n\r\n</body>\r\n\r\n</html>"
        },
        {
          "name": "Symbol3.html",
          "type": "blob",
          "size": 0.3046875,
          "content": "<!DOCTYPE html>\r\n<html class=\"ui-page-login\">\r\n\r\n<head>\r\n\r\n\r\n</head>\r\n\r\n\r\n<body>\r\n<script type=\"text/javascript\">\r\n    let s1 = Symbol.for(\"foo\");\r\n    console.log(Symbol.keyFor(s1)) // \"foo\"\r\n\r\n    let s2 = Symbol(\"foo\");\r\n    console.log(Symbol.keyFor(s2)) // undefined\r\n\r\n\r\n\r\n\r\n</script>\r\n\r\n</body>\r\n\r\n</html>"
        },
        {
          "name": "Vue源码分析.svg",
          "type": "blob",
          "size": 3465.9951171875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.2\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"5539\" height=\"4064\" viewBox=\"0 0 5539 4064\">\n<style type=\"text/css\"><![CDATA[\ntext { font:12px Dialog; }\n]]></style>\n<rect x=\"-1093\" y=\"-2836\" width=\"13018\" height=\"9918\" style=\"fill:rgb(243,244,249);stroke:none\" />\n<clipPath id=\"clip1\"><path d=\"M12,1832 L226,1832 L226,1901 L12,1901 L12,1832 Z\" /></clipPath>\n<path d=\"M22,1834 C17.5817184,1834 14,1837.581665 14,1842 L14,1890 C14,1894.418335 17.5817184,1898 22,1898 L215,1898 C219.4182739,1898 223,1894.418335 223,1890 L223,1842 C223,1837.581665 219.4182739,1834 215,1834 Z\" style=\"fill:rgb(104,163,223);stroke:none\" clip-path=\"url(#clip1)\" />\n<clipPath id=\"clip2\"><path d=\"M12,1832 L226,1832 L226,1901 L12,1901 L12,1832 Z\" /></clipPath>\n<path d=\"M22,1834 C17.5817184,1834 14,1837.581665 14,1842 L14,1890 C14,1894.418335 17.5817184,1898 22,1898 L215,1898 C219.4182739,1898 223,1894.418335 223,1890 L223,1842 C223,1837.581665 219.4182739,1834 215,1834 Z\" style=\"fill:none;stroke:rgb(0,64,128)\" clip-path=\"url(#clip2)\" />\n<clipPath id=\"clip3\"><path d=\"M44,1848 L194,1848 L194,1885 L44,1885 L44,1848 Z\" /></clipPath>\n<path d=\"M63.0254059,1856.7382813 L56.3574371,1874.890625 L53.7558746,1874.890625 L47.2168121,1856.7382813 L49.8183746,1856.7382813 L54.7050934,1870.9296875 C54.8691559,1871.3984375 54.990242,1871.9414063 55.0683746,1872.5585938 L55.1269684,1872.5585938 C55.1894646,1872.0195313 55.3261871,1871.46875 55.5371246,1870.90625 L60.5175934,1856.7382813 Z M76.4785309,1874.890625 L74.1699371,1874.890625 L74.1699371,1872.8515625 L74.1230621,1872.8515625 C73.2558746,1874.4140625 71.9238434,1875.1953125 70.1269684,1875.1953125 C67.0566559,1875.1953125 65.5214996,1873.359375 65.5214996,1869.6875 L65.5214996,1861.9296875 L67.7949371,1861.9296875 L67.7949371,1869.3476563 C67.7949371,1871.9804688 68.8027496,1873.296875 70.8183746,1873.296875 C71.8183746,1873.296875 72.6269684,1872.9277344 73.2441559,1872.1894531 C73.8613434,1871.4511719 74.1699371,1870.5195313 74.1699371,1869.3945313 L74.1699371,1861.9296875 L76.4785309,1861.9296875 Z M91.5722809,1868.9960938 L82.5019684,1868.9960938 C82.5410309,1870.3789063 82.9199371,1871.4472656 83.6386871,1872.2011719 C84.3574371,1872.9550781 85.3613434,1873.3320313 86.6504059,1873.3320313 C88.1035309,1873.3320313 89.4355621,1872.8671875 90.6464996,1871.9375 L90.6464996,1873.9882813 C89.5058746,1874.7929688 87.9941559,1875.1953125 86.1113434,1875.1953125 C84.2363434,1875.1953125 82.7734528,1874.6015625 81.7226715,1873.4140625 C80.6718903,1872.2265625 80.1464996,1870.578125 80.1464996,1868.46875 C80.1464996,1866.484375 80.7226715,1864.8476563 81.8750153,1863.5585938 C83.027359,1862.2695313 84.4589996,1861.625 86.1699371,1861.625 C87.8652496,1861.625 89.1894684,1862.1699219 90.1425934,1863.2597656 C91.0957184,1864.3496094 91.5722809,1865.875 91.5722809,1867.8359375 Z M89.2754059,1867.15625 C89.2675934,1865.984375 88.9902496,1865.078125 88.4433746,1864.4375 C87.8964996,1863.796875 87.1269684,1863.4765625 86.1347809,1863.4765625 C85.2207184,1863.4765625 84.4297028,1863.8164063 83.761734,1864.4960938 C83.0937653,1865.1757813 82.6738434,1866.0625 82.5019684,1867.15625 Z M103.9824371,1860.8632813 L107.0293121,1860.8632813 C107.3652496,1859.9804688 107.6933746,1859.0585938 108.0136871,1858.0976563 L102.0839996,1858.0976563 L102.0839996,1864.8476563 C102.0839996,1870.9882813 100.8808746,1875.3867188 98.4746246,1878.0429688 C98.0996246,1877.5585938 97.6464996,1877.0742188 97.1152496,1876.5898438 C99.2714996,1874.1835938 100.3496246,1870.2773438 100.3496246,1864.8710938 L100.3496246,1856.5039063 L116.6152496,1856.5039063 L116.6152496,1858.0976563 L110.0410309,1858.0976563 C109.6113434,1859.0351563 109.1699371,1859.9570313 108.7168121,1860.8632813 L114.9043121,1860.8632813 L114.9043121,1870.4726563 L113.2168121,1870.4726563 L113.2168121,1869.8632813 L110.1933746,1869.8632813 L110.1933746,1875.3710938 C110.1933746,1877.0429688 109.3808746,1877.8789063 107.7558746,1877.8789063 C107.2246246,1877.8789063 106.5449371,1877.8710938 105.7168121,1877.8554688 C105.6386871,1877.3867188 105.5293121,1876.8476563 105.3886871,1876.2382813 C106.1699371,1876.3007813 106.8496246,1876.3320313 107.4277496,1876.3320313 C108.1464996,1876.3320313 108.5058746,1875.9570313 108.5058746,1875.2070313 L108.5058746,1869.8632813 L105.6699371,1869.8632813 L105.6699371,1870.4726563 L103.9824371,1870.4726563 Z M96.1074371,1867.8476563 C96.6699371,1868.2070313 97.2246246,1868.4726563 97.7714996,1868.6445313 C97.1308746,1871.3007813 96.4121246,1874.3398438 95.6152496,1877.7617188 L93.8105621,1877.1523438 C94.7168121,1873.9492188 95.4824371,1870.8476563 96.1074371,1867.8476563 Z M105.6699371,1868.3164063 L113.2168121,1868.3164063 L113.2168121,1866.0898438 L105.6699371,1866.0898438 Z M113.2168121,1862.4101563 L105.6699371,1862.4101563 L105.6699371,1864.5898438 L113.2168121,1864.5898438 Z M116.5683746,1875.7929688 L115.0918121,1876.9179688 C113.9824371,1875.2460938 112.7793121,1873.6210938 111.4824371,1872.0429688 L112.8418121,1871.0820313 C114.2636871,1872.7382813 115.5058746,1874.3085938 116.5683746,1875.7929688 Z M101.8496246,1876.0039063 C103.1777496,1874.5820313 104.3574371,1872.9804688 105.3886871,1871.1992188 L106.8886871,1872.1132813 C105.7011871,1874.0039063 104.4824371,1875.6601563 103.2324371,1877.0820313 Z M94.4902496,1861.3085938 C95.7089996,1862.1835938 97.0839996,1863.2304688 98.6152496,1864.4492188 C98.0683746,1865.1054688 97.6230621,1865.6132813 97.2793121,1865.9726563 C95.7793121,1864.6445313 94.4589996,1863.5351563 93.3183746,1862.6445313 Z M95.4980621,1855.2851563 C96.7324371,1856.2070313 98.0058746,1857.2617188 99.3183746,1858.4492188 C98.7714996,1858.9804688 98.3027496,1859.4570313 97.9121246,1859.8789063 C96.5527496,1858.5351563 95.3496246,1857.4335938 94.3027496,1856.5742188 Z M117.9863434,1867.9414063 C119.8925934,1865.3007813 121.2714996,1862.2851563 122.1230621,1858.8945313 L118.6660309,1858.8945313 L118.6660309,1857.1601563 L127.4316559,1857.1601563 L127.4316559,1858.8945313 L123.9277496,1858.8945313 C123.4355621,1860.8554688 122.8105621,1862.6835938 122.0527496,1864.3789063 L126.5879059,1864.3789063 L126.5879059,1877.0820313 L124.9238434,1877.0820313 L124.9238434,1875.4648438 L121.9941559,1875.4648438 L121.9941559,1877.3867188 L120.3300934,1877.3867188 L120.3300934,1867.625 C119.9160309,1868.2890625 119.4785309,1868.9257813 119.0175934,1869.5351563 C118.7832184,1869.0976563 118.4394684,1868.5664063 117.9863434,1867.9414063 Z M131.2988434,1858.8945313 L130.6894684,1865.7617188 L136.2089996,1865.7617188 L136.9941559,1858.0507813 L128.3457184,1858.0507813 L128.3457184,1856.3632813 L138.9629059,1856.3632813 L137.9785309,1865.7617188 L140.4629059,1865.7617188 C140.3379059,1868.9335938 140.2129059,1871.6835938 140.0879059,1874.0117188 C139.9472809,1876.3398438 138.8379059,1877.5039063 136.7597809,1877.5039063 C135.7129059,1877.5039063 134.5410309,1877.4804688 133.2441559,1877.4335938 C133.1504059,1876.8554688 133.0410309,1876.2070313 132.9160309,1875.4882813 C134.1816559,1875.6289063 135.3222809,1875.6992188 136.3379059,1875.6992188 C137.5410309,1875.6992188 138.1894684,1875.0351563 138.2832184,1873.7070313 C138.4082184,1871.9726563 138.5019684,1869.8867188 138.5644684,1867.4492188 L128.7910309,1867.4492188 L129.5175934,1858.8945313 Z M124.9238434,1865.9726563 L121.9941559,1865.9726563 L121.9941559,1873.9179688 L124.9238434,1873.9179688 Z M127.5254059,1870.6132813 L137.4160309,1870.6132813 L137.4160309,1872.3007813 L127.5254059,1872.3007813 Z M145.7949371,1865.2929688 L161.3808746,1865.2929688 C161.3027496,1867.9492188 161.1855621,1870.5429688 161.0293121,1873.0742188 C160.8418121,1875.9960938 159.4589996,1877.4492188 156.8808746,1877.4335938 C155.6152496,1877.4492188 154.2793121,1877.4101563 152.8730621,1877.3164063 C152.7793121,1876.6601563 152.6699371,1875.9960938 152.5449371,1875.3242188 C153.7480621,1875.4960938 155.0918121,1875.5898438 156.5761871,1875.6054688 C158.1386871,1875.6367188 158.9980621,1874.7226563 159.1543121,1872.8632813 C159.2793121,1871.1757813 159.3730621,1869.2304688 159.4355621,1867.0273438 L152.2285309,1867.0273438 C152.0410309,1869.6367188 151.4980621,1871.7382813 150.5996246,1873.3320313 C149.4121246,1875.4257813 147.4199371,1877.0429688 144.6230621,1878.1835938 C144.2168121,1877.6523438 143.7714996,1877.1289063 143.2871246,1876.6132813 C145.8808746,1875.6445313 147.7480621,1874.2382813 148.8886871,1872.3945313 C149.7089996,1870.9960938 150.1816559,1869.2070313 150.3066559,1867.0273438 L145.7949371,1867.0273438 Z M155.4980621,1855.5429688 L157.1855621,1854.8164063 C158.9043121,1859.0039063 161.9199371,1862.1367188 166.2324371,1864.2148438 C165.5293121,1864.9492188 165.0214996,1865.5429688 164.7089996,1865.9960938 C160.4121246,1863.5117188 157.3418121,1860.0273438 155.4980621,1855.5429688 Z M142.6074371,1864.5195313 C145.8261871,1862.2382813 148.5761871,1859.1289063 150.8574371,1855.1914063 L152.5214996,1856.1054688 C150.1464996,1860.2617188 147.2949371,1863.5976563 143.9668121,1866.1132813 C143.6386871,1865.6289063 143.1855621,1865.0976563 142.6074371,1864.5195313 Z M177.5410309,1856.9023438 C181.4004059,1856.8398438 185.2597809,1856.5039063 189.1191559,1855.8945313 L189.7519684,1857.5820313 C186.4550934,1858.0664063 182.9863434,1858.3867188 179.3457184,1858.5429688 L179.3457184,1863.7695313 L190.7832184,1863.7695313 L190.7832184,1865.4804688 L186.3769684,1865.4804688 L186.3769684,1877.9492188 L184.5722809,1877.9492188 L184.5722809,1865.4804688 L179.3457184,1865.4804688 L179.3457184,1866.3710938 C179.3457184,1871.4492188 178.0566559,1875.3554688 175.4785309,1878.0898438 C175.0879059,1877.5273438 174.6816559,1877.0117188 174.2597809,1876.5429688 C176.4472809,1874.1992188 177.5410309,1870.8007813 177.5410309,1866.3476563 Z M167.4629059,1869.6757813 C169.0879059,1867.3007813 170.3144684,1864.5585938 171.1425934,1861.4492188 L167.7910309,1861.4492188 L167.7910309,1859.8320313 L171.1894684,1859.8320313 L171.1894684,1855.1679688 L172.9004059,1855.1679688 L172.9004059,1859.8320313 L176.1347809,1859.8320313 L176.1347809,1861.4492188 L172.9004059,1861.4492188 L172.9004059,1864.1210938 L173.7675934,1863.4414063 C175.1894684,1865.1132813 176.2207184,1866.4492188 176.8613434,1867.4492188 L175.4082184,1868.5273438 C174.6738434,1867.3710938 173.8379059,1866.1679688 172.9004059,1864.9179688 L172.9004059,1877.9492188 L171.1894684,1877.9492188 L171.1894684,1865.9023438 C170.3925934,1868.2460938 169.4238434,1870.1992188 168.2832184,1871.7617188 C168.0957184,1871.2148438 167.8222809,1870.5195313 167.4629059,1869.6757813 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip3)\" />\n<clipPath id=\"clip4\"><path d=\"M1231,255 L1511,255 L1511,299 L1231,299 L1231,255 Z\" /></clipPath>\n<path d=\"M1241,257 C1236.581665,257 1233,260.581665 1233,265 L1233,288 C1233,292.418335 1236.581665,296 1241,296 L1500,296 C1504.418335,296 1508,292.418335 1508,288 L1508,265 C1508,260.581665 1504.418335,257 1500,257 Z\" style=\"fill:rgb(211,223,255);stroke:none\" clip-path=\"url(#clip4)\" />\n<clipPath id=\"clip5\"><path d=\"M1231,255 L1511,255 L1511,299 L1231,299 L1231,255 Z\" /></clipPath>\n<path d=\"M1241,257 C1236.581665,257 1233,260.581665 1233,265 L1233,288 C1233,292.418335 1236.581665,296 1241,296 L1500,296 C1504.418335,296 1508,292.418335 1508,288 L1508,265 C1508,260.581665 1504.418335,257 1500,257 Z\" style=\"fill:none;stroke:rgb(0,64,128)\" clip-path=\"url(#clip5)\" />\n<clipPath id=\"clip6\"><path d=\"M1244,263 L1498,263 L1498,291 L1244,291 L1244,263 Z\" /></clipPath>\n<path d=\"M1247.0300293,272.1523438 L1253.263916,272.1523438 C1253.4243164,270.7965088 1253.5045166,269.3300781 1253.5046387,267.7529297 L1254.932373,267.7529297 C1254.932373,269.3964844 1254.8548584,270.862915 1254.6999512,272.1523438 L1261.7556152,272.1523438 C1261.689209,275.5722656 1261.5895996,278.3945313 1261.4567871,280.6191406 C1261.3460693,282.6887207 1260.2503662,283.7236328 1258.1696777,283.7236328 C1257.3063965,283.7236328 1256.2825928,283.6959229 1255.0983887,283.640625 C1255.0540771,283.2089844 1254.9710693,282.6943359 1254.8493652,282.0966797 C1255.8896484,282.2404785 1256.9134521,282.3125 1257.9206543,282.3125 C1259.2487793,282.3125 1259.9460449,281.6594238 1260.0124512,280.3535156 C1260.1673584,278.1842041 1260.2669678,275.8820801 1260.3112793,273.4472656 L1254.517334,273.4472656 C1253.7038574,278.328125 1251.4294434,281.958252 1247.6940918,284.3378906 C1247.3841553,283.9504395 1247.0465088,283.5408936 1246.6813965,283.109375 C1250.1234131,281.0783691 1252.2512207,277.857666 1253.0646973,273.4472656 L1247.0300293,273.4472656 Z M1254.9157715,276.4355469 L1255.8288574,275.6220703 C1256.8913574,276.6070557 1257.854248,277.5754395 1258.7175293,278.5273438 L1257.6882324,279.4570313 C1256.8359375,278.4498291 1255.9118652,277.442627 1254.9157715,276.4355469 Z M1248.2087402,268.8652344 L1249.1052246,268.0351563 C1250.0238037,268.8320313 1250.9091797,269.651001 1251.7614746,270.4921875 L1250.7487793,271.4384766 C1249.9296875,270.5419922 1249.0830078,269.6842041 1248.2087402,268.8652344 Z M1274.9372559,269.0810547 L1270.2141113,281.9389648 L1268.3713379,281.9389648 L1263.739502,269.0810547 L1265.5822754,269.0810547 L1269.0437012,279.1333008 C1269.1599121,279.465332 1269.2456055,279.8498535 1269.3010254,280.2871094 L1269.3425293,280.2871094 C1269.3867188,279.9052734 1269.4836426,279.5151367 1269.6330566,279.1166992 L1273.1608887,269.0810547 Z M1284.4665527,281.9389648 L1282.8312988,281.9389648 L1282.8312988,280.4946289 L1282.7980957,280.4946289 C1282.1838379,281.6013184 1281.2402344,282.1547852 1279.9675293,282.1547852 C1277.7927246,282.1547852 1276.7053223,280.854248 1276.7053223,278.253418 L1276.7053223,272.7583008 L1278.3156738,272.7583008 L1278.3156738,278.0126953 C1278.3156738,279.8775635 1279.029541,280.8100586 1280.4572754,280.8100586 C1281.1655273,280.8100586 1281.7382813,280.548584 1282.1755371,280.0256348 C1282.6126709,279.5026855 1282.8311768,278.8427734 1282.8312988,278.0458984 L1282.8312988,272.7583008 L1284.4665527,272.7583008 Z M1295.157959,277.7636719 L1288.7331543,277.7636719 C1288.7607422,278.7431641 1289.0291748,279.4998779 1289.5383301,280.0339355 C1290.0473633,280.5678711 1290.7585449,280.8349609 1291.6716309,280.8349609 C1292.7009277,280.8349609 1293.6444092,280.5056152 1294.5021973,279.847168 L1294.5021973,281.2998047 C1293.6942139,281.869751 1292.6234131,282.1547852 1291.2897949,282.1547852 C1289.9616699,282.1547852 1288.925415,281.7341309 1288.1811523,280.8930664 C1287.4367676,280.0518799 1287.0646973,278.8842773 1287.0646973,277.3901367 C1287.0646973,275.9844971 1287.4727783,274.8251953 1288.2890625,273.9121094 C1289.1052246,272.9990234 1290.1192627,272.5424805 1291.3312988,272.5424805 C1292.5321045,272.5424805 1293.4700928,272.9284668 1294.1452637,273.7004395 C1294.8203125,274.4724121 1295.157959,275.5528564 1295.157959,276.9418945 Z M1293.5310059,276.4604492 C1293.5253906,275.6303711 1293.3289795,274.9884033 1292.9416504,274.534668 C1292.5541992,274.0808105 1292.0091553,273.8540039 1291.3063965,273.8540039 C1290.6589355,273.8540039 1290.0985107,274.0947266 1289.6254883,274.5761719 C1289.1523438,275.0576172 1288.8548584,275.6856689 1288.7331543,276.4604492 Z M1304.4216309,280.644043 L1304.4216309,286.1640625 L1302.7946777,286.1640625 L1302.7946777,272.7583008 L1304.4216309,272.7583008 L1304.4216309,274.34375 L1304.454834,274.34375 C1305.1741943,273.1428223 1306.2255859,272.5424805 1307.6091309,272.5424805 C1308.7822266,272.5424805 1309.7022705,272.9533691 1310.3691406,273.7751465 C1311.0358887,274.5969238 1311.3693848,275.6994629 1311.3693848,277.0830078 C1311.3693848,278.6103516 1310.9916992,279.8374023 1310.2363281,280.7644043 C1309.480957,281.6912842 1308.4641113,282.1547852 1307.185791,282.1547852 C1306.0070801,282.1547852 1305.0966797,281.651123 1304.454834,280.644043 Z M1304.4133301,278.1538086 C1304.4133301,278.9008789 1304.6540527,279.5302734 1305.135498,280.0422363 C1305.6169434,280.5540771 1306.2200928,280.8100586 1306.9450684,280.8100586 C1307.8082275,280.8100586 1308.4833984,280.4780273 1308.970459,279.8139648 C1309.4573975,279.1499023 1309.7009277,278.2312012 1309.7009277,277.0581055 C1309.7009277,276.0675049 1309.473999,275.2913818 1309.0202637,274.7297363 C1308.5664063,274.1679688 1307.9466553,273.887207 1307.1608887,273.887207 C1306.3583984,273.887207 1305.6999512,274.1721191 1305.1853027,274.7421875 C1304.6706543,275.3121338 1304.4133301,276.0426025 1304.4133301,276.9335938 Z M1318.8981934,274.3686523 C1318.6269531,274.1749268 1318.253418,274.078125 1317.7775879,274.078125 C1317.1467285,274.078125 1316.6264648,274.3728027 1316.217041,274.9621582 C1315.8074951,275.5515137 1315.6027832,276.3276367 1315.6027832,277.2905273 L1315.6027832,281.9389648 L1313.9758301,281.9389648 L1313.9758301,272.7583008 L1315.6027832,272.7583008 L1315.6027832,274.6259766 L1315.6359863,274.6259766 C1316.100708,273.2756348 1316.9031982,272.6005859 1318.0432129,272.6005859 C1318.4139404,272.6005859 1318.6989746,272.6420898 1318.8981934,272.7250977 Z M1320.0437012,277.4482422 C1320.0437012,275.9318848 1320.467041,274.7352295 1321.3137207,273.8581543 C1322.1604004,272.980957 1323.3085938,272.5424805 1324.7585449,272.5424805 C1326.1363525,272.5424805 1327.2169189,272.9643555 1328,273.8083496 C1328.782959,274.6522217 1329.1745605,275.8184814 1329.1745605,277.3071289 C1329.1745605,278.756958 1328.7567139,279.9273682 1327.9211426,280.8183594 C1327.0854492,281.7092285 1325.9648438,282.1547852 1324.5593262,282.1547852 C1323.1868896,282.1547852 1322.0911865,281.7230225 1321.2722168,280.8598633 C1320.453125,279.996582 1320.0437012,278.859375 1320.0437012,277.4482422 Z M1321.7038574,277.3984375 C1321.7038574,278.4553223 1321.9708252,279.288208 1322.5048828,279.8969727 C1323.0388184,280.5056152 1323.7568359,280.8100586 1324.6589355,280.8100586 C1325.588501,280.8100586 1326.296875,280.5125732 1326.7839355,279.9177246 C1327.270874,279.3227539 1327.5144043,278.4692383 1327.5144043,277.3569336 C1327.5144043,276.2390137 1327.270874,275.3813477 1326.7839355,274.7836914 C1326.296875,274.1860352 1325.588501,273.887207 1324.6589355,273.887207 C1323.7458496,273.887207 1323.0250244,274.1998291 1322.496582,274.8251953 C1321.9680176,275.4504395 1321.7038574,276.3082275 1321.7038574,277.3984375 Z M1336.1970215,281.8476563 C1335.8427734,282.0412598 1335.3641357,282.1381836 1334.7609863,282.1381836 C1333.1174316,282.1381836 1332.2956543,281.2277832 1332.2956543,279.4072266 L1332.2956543,274.1030273 L1330.7185059,274.1030273 L1330.7185059,272.7583008 L1332.2956543,272.7583008 L1332.2956543,270.550293 L1333.9143066,270.0356445 L1333.9143066,272.7583008 L1336.1970215,272.7583008 L1336.1970215,274.1030273 L1333.9143066,274.1030273 L1333.9143066,279.1166992 C1333.9143066,279.7198486 1334.0166016,280.1514893 1334.2214355,280.4116211 C1334.4261475,280.6716309 1334.7664795,280.8017578 1335.2424316,280.8017578 C1335.607666,280.8017578 1335.9257813,280.6993408 1336.1970215,280.4946289 Z M1337.6994629,277.4482422 C1337.6994629,275.9318848 1338.1228027,274.7352295 1338.9694824,273.8581543 C1339.8161621,272.980957 1340.9643555,272.5424805 1342.4143066,272.5424805 C1343.7921143,272.5424805 1344.8726807,272.9643555 1345.6557617,273.8083496 C1346.4387207,274.6522217 1346.8303223,275.8184814 1346.8303223,277.3071289 C1346.8303223,278.756958 1346.4124756,279.9273682 1345.5769043,280.8183594 C1344.7412109,281.7092285 1343.6206055,282.1547852 1342.2150879,282.1547852 C1340.8426514,282.1547852 1339.7469482,281.7230225 1338.9279785,280.8598633 C1338.1088867,279.996582 1337.6994629,278.859375 1337.6994629,277.4482422 Z M1339.3596191,277.3984375 C1339.3596191,278.4553223 1339.6265869,279.288208 1340.1606445,279.8969727 C1340.6945801,280.5056152 1341.4125977,280.8100586 1342.3146973,280.8100586 C1343.2442627,280.8100586 1343.9526367,280.5125732 1344.4396973,279.9177246 C1344.9266357,279.3227539 1345.170166,278.4692383 1345.170166,277.3569336 C1345.170166,276.2390137 1344.9266357,275.3813477 1344.4396973,274.7836914 C1343.9526367,274.1860352 1343.2442627,273.887207 1342.3146973,273.887207 C1341.4016113,273.887207 1340.6807861,274.1998291 1340.1523438,274.8251953 C1339.6237793,275.4504395 1339.3596191,276.3082275 1339.3596191,277.3984375 Z M1353.8527832,281.8476563 C1353.4985352,282.0412598 1353.0198975,282.1381836 1352.416748,282.1381836 C1350.7731934,282.1381836 1349.951416,281.2277832 1349.951416,279.4072266 L1349.951416,274.1030273 L1348.3742676,274.1030273 L1348.3742676,272.7583008 L1349.951416,272.7583008 L1349.951416,270.550293 L1351.5700684,270.0356445 L1351.5700684,272.7583008 L1353.8527832,272.7583008 L1353.8527832,274.1030273 L1351.5700684,274.1030273 L1351.5700684,279.1166992 C1351.5700684,279.7198486 1351.6723633,280.1514893 1351.8771973,280.4116211 C1352.0819092,280.6716309 1352.4222412,280.8017578 1352.8981934,280.8017578 C1353.2634277,280.8017578 1353.581543,280.6993408 1353.8527832,280.4946289 Z M1363.4401855,272.7583008 L1359.2731934,283.3251953 C1358.4984131,285.2840576 1357.4055176,286.2636719 1355.9943848,286.2636719 C1355.590332,286.2636719 1355.2445068,286.2193604 1354.9567871,286.1308594 L1354.9567871,284.703125 C1355.2722168,284.8248291 1355.5765381,284.8857422 1355.869873,284.8857422 C1356.605835,284.8857422 1357.1564941,284.4541016 1357.5217285,283.5908203 L1358.2272949,281.9223633 L1354.6247559,272.7583008 L1356.4260254,272.7583008 L1358.8249512,279.65625 L1359.0241699,280.4116211 L1359.0656738,280.4116211 C1359.098877,280.2399902 1359.1652832,279.9937744 1359.2648926,279.6728516 L1361.7717285,272.7583008 Z M1366.8684082,280.644043 L1366.8684082,286.1640625 L1365.2414551,286.1640625 L1365.2414551,272.7583008 L1366.8684082,272.7583008 L1366.8684082,274.34375 L1366.9016113,274.34375 C1367.6209717,273.1428223 1368.6723633,272.5424805 1370.0559082,272.5424805 C1371.2290039,272.5424805 1372.1490479,272.9533691 1372.815918,273.7751465 C1373.482666,274.5969238 1373.8161621,275.6994629 1373.8161621,277.0830078 C1373.8161621,278.6103516 1373.4384766,279.8374023 1372.6831055,280.7644043 C1371.9277344,281.6912842 1370.9108887,282.1547852 1369.6325684,282.1547852 C1368.4538574,282.1547852 1367.543457,281.651123 1366.9016113,280.644043 Z M1366.8601074,278.1538086 C1366.8601074,278.9008789 1367.1008301,279.5302734 1367.5822754,280.0422363 C1368.0637207,280.5540771 1368.6668701,280.8100586 1369.3918457,280.8100586 C1370.2550049,280.8100586 1370.9301758,280.4780273 1371.4172363,279.8139648 C1371.9041748,279.1499023 1372.1477051,278.2312012 1372.1477051,277.0581055 C1372.1477051,276.0675049 1371.9207764,275.2913818 1371.467041,274.7297363 C1371.0131836,274.1679688 1370.3934326,273.887207 1369.607666,273.887207 C1368.8051758,273.887207 1368.1467285,274.1721191 1367.6320801,274.7421875 C1367.1174316,275.3121338 1366.8601074,276.0426025 1366.8601074,276.9335938 Z M1383.9016113,277.7636719 L1377.4768066,277.7636719 C1377.5043945,278.7431641 1377.7728271,279.4998779 1378.2819824,280.0339355 C1378.7910156,280.5678711 1379.5021973,280.8349609 1380.4152832,280.8349609 C1381.4445801,280.8349609 1382.3880615,280.5056152 1383.2458496,279.847168 L1383.2458496,281.2998047 C1382.4378662,281.869751 1381.3670654,282.1547852 1380.0334473,282.1547852 C1378.7053223,282.1547852 1377.6690674,281.7341309 1376.9248047,280.8930664 C1376.1804199,280.0518799 1375.8083496,278.8842773 1375.8083496,277.3901367 C1375.8083496,275.9844971 1376.2164307,274.8251953 1377.0327148,273.9121094 C1377.848877,272.9990234 1378.862915,272.5424805 1380.0749512,272.5424805 C1381.2757568,272.5424805 1382.2137451,272.9284668 1382.888916,273.7004395 C1383.5639648,274.4724121 1383.9016113,275.5528564 1383.9016113,276.9418945 Z M1382.2746582,276.4604492 C1382.269043,275.6303711 1382.0726318,274.9884033 1381.6853027,274.534668 C1381.2978516,274.0808105 1380.7528076,273.8540039 1380.0500488,273.8540039 C1379.4025879,273.8540039 1378.8421631,274.0947266 1378.3691406,274.5761719 C1377.8959961,275.0576172 1377.5985107,275.6856689 1377.4768066,276.4604492 Z M1395.2653809,271.7041016 L1398.2702637,271.7041016 C1398.4804688,271.1728516 1398.6796875,270.625 1398.8679199,270.0605469 L1393.4226074,270.0605469 L1393.4226074,274.5761719 C1393.4224854,277.1437988 1393.2730713,279.036377 1392.9743652,280.2539063 C1392.6755371,281.5598145 1392.0611572,282.8879395 1391.1315918,284.2382813 C1390.8548584,283.8619385 1390.5449219,283.4801025 1390.2019043,283.0927734 C1390.9654541,281.9527588 1391.4691162,280.8293457 1391.7126465,279.7226563 C1391.9671631,278.6711426 1392.0944824,277.0552979 1392.0944824,274.875 L1392.0944824,268.8486328 L1406.604248,268.8486328 L1406.604248,270.0605469 L1400.3288574,270.0605469 C1400.079834,270.6582031 1399.8391113,271.2060547 1399.6066895,271.7041016 L1405.276123,271.7041016 L1405.276123,278.5107422 L1404.0310059,278.5107422 L1404.0310059,278.1787109 L1400.9597168,278.1787109 L1400.9597168,281.8974609 C1400.9597168,283.2918701 1400.3288574,283.9836426 1399.0671387,283.9726563 C1398.6796875,283.9726563 1397.9824219,283.9615479 1396.9753418,283.9394531 C1396.9310303,283.5187988 1396.8590088,283.0373535 1396.7595215,282.4951172 C1397.6226807,282.6057129 1398.3033447,282.6611328 1398.8015137,282.6611328 C1399.3548584,282.6611328 1399.6315918,282.3400879 1399.6315918,281.6982422 L1399.6315918,278.1787109 L1396.510498,278.1787109 L1396.510498,278.5107422 L1395.2653809,278.5107422 Z M1396.510498,277.0664063 L1404.0310059,277.0664063 L1404.0310059,275.4726563 L1396.510498,275.4726563 Z M1404.0310059,272.8164063 L1396.510498,272.8164063 L1396.510498,274.3935547 L1404.0310059,274.3935547 Z M1396.6931152,278.8261719 L1397.838623,279.5732422 C1396.7650146,281.1669922 1395.6083984,282.578125 1394.3688965,283.8066406 C1394.0810547,283.5631104 1393.7214355,283.2919922 1393.2897949,282.9931641 C1394.4075928,281.9638672 1395.5419922,280.5748291 1396.6931152,278.8261719 Z M1403.1677246,278.859375 C1404.6064453,280.2207031 1405.8349609,281.4824219 1406.8532715,282.6445313 L1405.7409668,283.640625 C1404.6784668,282.2902832 1403.4941406,280.9621582 1402.1882324,279.65625 Z M1407.9904785,272.6337891 L1410.513916,272.6337891 C1410.5249023,272.395752 1410.5305176,271.4716797 1410.5305176,269.8613281 L1408.6877441,269.8613281 L1408.6877441,268.765625 L1417.3537598,268.765625 L1417.3537598,269.8613281 L1415.5441895,269.8613281 L1415.5441895,272.6337891 L1417.9016113,272.6337891 L1417.9016113,273.7294922 L1415.5441895,273.7294922 L1415.5441895,277.2988281 L1414.3322754,277.2988281 L1414.3322754,273.7294922 L1411.651123,273.7294922 C1411.5126953,275.3232422 1410.7241211,276.7011719 1409.2854004,277.8632813 C1408.9975586,277.5422363 1408.6932373,277.2213135 1408.3723145,276.9003906 C1409.6450195,275.9152832 1410.3284912,274.8583984 1410.4226074,273.7294922 L1407.9904785,273.7294922 Z M1407.9572754,282.2128906 L1415.3947754,282.2128906 L1415.3947754,279.9716797 L1409.4680176,279.9716797 L1409.4680176,278.8261719 L1415.3947754,278.8261719 L1415.3947754,277.53125 L1416.6896973,277.53125 L1416.6896973,278.8261719 L1422.7658691,278.8261719 L1422.7658691,279.9716797 L1416.6896973,279.9716797 L1416.6896973,282.2128906 L1424.2102051,282.2128906 L1424.2102051,283.3583984 L1407.9572754,283.3583984 Z M1423.1477051,268.1015625 L1423.1477051,275.7382813 C1423.1477051,276.911377 1422.5666504,277.5090332 1421.404541,277.53125 C1420.7404785,277.5533447 1419.9711914,277.5533447 1419.0969238,277.53125 C1419.0526123,277.1105957 1418.9862061,276.6734619 1418.8977051,276.2197266 C1419.8273926,276.2750244 1420.5246582,276.3027344 1420.989502,276.3027344 C1421.6202393,276.3027344 1421.9356689,275.9541016 1421.935791,275.2568359 L1421.935791,268.1015625 Z M1411.7258301,272.6337891 L1414.3322754,272.6337891 L1414.3322754,269.8613281 L1411.7424316,269.8613281 C1411.7424316,271.2004395 1411.7368164,272.1246338 1411.7258301,272.6337891 Z M1418.5822754,269.03125 L1419.7775879,269.03125 L1419.7775879,274.7753906 L1418.5822754,274.7753906 Z M1429.0661621,277.2822266 C1431.0361328,276.1422119 1432.4195557,274.9468994 1433.2165527,273.6962891 L1429.8132324,273.6962891 L1429.8132324,272.5341797 L1433.7810059,272.5341797 C1434.079834,271.7593994 1434.2956543,270.9127197 1434.4284668,269.9941406 L1430.6765137,269.9941406 L1430.6765137,268.8320313 L1440.6374512,268.8320313 L1440.6374512,269.9941406 L1435.7233887,269.9941406 C1435.5960693,270.9570313 1435.4134521,271.8037109 1435.1755371,272.5341797 L1441.4343262,272.5341797 L1441.4343262,273.6962891 L1437.4831543,273.6962891 C1438.5732422,275.229126 1440.0562744,276.2805176 1441.932373,276.8505859 C1441.5560303,277.2711182 1441.223999,277.6972656 1440.9362793,278.1289063 C1438.7558594,277.0664063 1437.1345215,275.5888672 1436.0720215,273.6962891 L1434.7023926,273.6962891 C1433.8500977,275.3951416 1432.2646484,276.9445801 1429.9460449,278.3447266 C1429.713623,278.03479 1429.4202881,277.6806641 1429.0661621,277.2822266 Z M1434.345459,275.8876953 L1435.6071777,275.8876953 L1435.6071777,282.0966797 C1435.6071777,283.3250732 1434.9597168,283.9394531 1433.6647949,283.9394531 C1433.0006104,283.9394531 1432.4029541,283.9338379 1431.8718262,283.9228516 C1431.8052979,283.5133057 1431.7167969,283.0650635 1431.6062012,282.578125 C1432.1706543,282.666626 1432.7294922,282.7109375 1433.282959,282.7109375 C1433.9912109,282.7109375 1434.345459,282.373291 1434.345459,281.6982422 Z M1427.322998,277.1328125 C1427.7546387,277.2988281 1428.1972656,277.4592285 1428.651123,277.6142578 C1428.0866699,279.9605713 1427.5830078,282.0966797 1427.1403809,284.0224609 L1425.7126465,283.5908203 C1426.2991943,281.6982422 1426.8359375,279.5455322 1427.322998,277.1328125 Z M1438.1970215,278.0126953 L1439.2429199,277.5146484 C1440.0618896,278.8095703 1440.80896,280.1320801 1441.4841309,281.4824219 L1440.338623,282.046875 C1439.7962646,280.9068604 1439.0823975,279.5621338 1438.1970215,278.0126953 Z M1431.8552246,277.6806641 L1433.017334,278.1621094 C1432.4085693,279.6894531 1431.75,281.0341797 1431.041748,282.1962891 C1430.6542969,281.9970703 1430.2614746,281.8199463 1429.8630371,281.6650391 C1430.6708984,280.4586182 1431.3349609,279.1304932 1431.8552246,277.6806641 Z M1436.088623,278.3779297 L1437.1843262,277.9794922 C1437.6712646,279.2189941 1438.1361084,280.5748291 1438.5788574,282.046875 L1437.3337402,282.4619141 C1436.9794922,281.0673828 1436.5644531,279.7060547 1436.088623,278.3779297 Z M1426.1442871,272.3349609 C1426.94104,272.8883057 1427.9206543,273.6408691 1429.0827637,274.5927734 C1428.6732178,275.0576172 1428.3466797,275.4172363 1428.1032715,275.671875 C1426.9411621,274.609375 1426.0113525,273.8125 1425.314209,273.28125 Z M1426.791748,268.0185547 C1427.7767334,268.7932129 1428.7341309,269.6011963 1429.6638184,270.4423828 C1429.2874756,270.8186035 1428.9554443,271.15625 1428.6677246,271.4550781 C1427.6273193,270.4257813 1426.7197266,269.5845947 1425.9450684,268.9316406 Z M1452.333252,270.0273438 L1458.6418457,270.0273438 L1458.6418457,283.7070313 L1457.3303223,283.7070313 L1457.3303223,282.0302734 L1453.6447754,282.0302734 L1453.6447754,283.7070313 L1452.333252,283.7070313 Z M1443.2189941,270.8408203 L1445.5349121,270.8408203 C1445.5458984,269.9498291 1445.5487061,268.9592285 1445.5432129,267.8691406 L1446.8547363,267.8691406 C1446.8547363,268.9703369 1446.8491211,269.9609375 1446.8381348,270.8408203 L1450.7062988,270.8408203 C1450.6508789,275.0908203 1450.5789795,278.4277344 1450.4904785,280.8515625 C1450.446167,282.8436279 1449.6934814,283.8010254 1448.232666,283.7236328 C1447.8010254,283.7236328 1447.1645508,283.7070313 1446.3234863,283.6738281 C1446.2459717,283.2089844 1446.1574707,282.727417 1446.0578613,282.2294922 C1446.8325195,282.3291016 1447.4633789,282.3789063 1447.9504395,282.3789063 C1448.6918945,282.401001 1449.0959473,281.8752441 1449.1623535,280.8017578 C1449.2840576,278.1787109 1449.355957,275.2789307 1449.3781738,272.1025391 L1446.8215332,272.1025391 C1446.8104248,272.9492188 1446.7938232,273.6685791 1446.7717285,274.2607422 C1446.727417,278.5881348 1445.6870117,281.9195557 1443.6506348,284.2548828 C1443.3739014,283.9117432 1443.0473633,283.5410156 1442.6711426,283.1425781 C1444.5083008,281.1281738 1445.4436035,278.123291 1445.4768066,274.1279297 C1445.4989014,273.546875 1445.5155029,272.8717041 1445.5266113,272.1025391 L1443.2189941,272.1025391 Z M1457.3303223,271.2558594 L1453.6447754,271.2558594 L1453.6447754,280.8349609 L1457.3303223,280.8349609 Z M1460.6257324,270.6748047 L1468.5944824,270.6748047 C1468.0355225,269.6123047 1467.5982666,268.8375244 1467.282959,268.3505859 L1468.5778809,267.7363281 C1468.8876953,268.2121582 1469.3525391,268.9869385 1469.9724121,270.0605469 L1468.760498,270.6748047 L1476.6296387,270.6748047 L1476.6296387,271.9365234 L1466.560791,271.9365234 C1466.5219727,272.9436035 1466.4804688,273.8013916 1466.4362793,274.5097656 L1474.454834,274.5097656 C1474.3218994,276.911377 1474.1781006,278.9976807 1474.0231934,280.7685547 C1473.9013672,282.7717285 1472.9274902,283.7734375 1471.1013184,283.7734375 C1470.2601318,283.7734375 1469.1367188,283.729126 1467.7312012,283.640625 C1467.6757813,283.2199707 1467.5927734,282.7108154 1467.4821777,282.1132813 C1468.8876953,282.3013916 1470.02771,282.3955078 1470.9020996,282.3955078 C1471.9202881,282.3955078 1472.4902344,281.7922363 1472.6120605,280.5859375 C1472.744873,279.2687988 1472.861084,277.6584473 1472.9606934,275.7548828 L1466.3449707,275.7548828 C1466.0350342,279.4072266 1464.3443604,282.2404785 1461.2731934,284.2548828 C1460.9743652,283.9006348 1460.6367188,283.5244141 1460.260498,283.1259766 C1463.182251,281.2001953 1464.7484131,278.6213379 1464.9587402,275.3896484 C1465.0361328,274.5152588 1465.0998535,273.3642578 1465.1496582,271.9365234 L1460.6257324,271.9365234 Z M1490.5998535,278.4111328 C1491.6623535,279.8609619 1492.8078613,281.5266113 1494.036377,283.4082031 C1493.5936279,283.6627197 1493.1619873,283.9172363 1492.7414551,284.171875 C1492.4315186,283.6572266 1492.1271973,283.1591797 1491.8283691,282.6777344 C1488.1981201,282.9765625 1485.3536377,283.2255859 1483.295166,283.4248047 L1482.6809082,281.9804688 C1483.3781738,281.6705322 1484.0588379,281.0230713 1484.7229004,280.0380859 C1485.4533691,278.9976807 1486.1312256,277.9019775 1486.7565918,276.7509766 L1482.3986816,276.7509766 L1482.3986816,275.5556641 L1487.6115723,275.5556641 L1487.6115723,272.0361328 L1483.2121582,272.0361328 L1483.2121582,270.8408203 L1487.6115723,270.8408203 L1487.6115723,267.8027344 L1488.9396973,267.8027344 L1488.9396973,270.8408203 L1493.5383301,270.8408203 L1493.5383301,272.0361328 L1488.9396973,272.0361328 L1488.9396973,275.5556641 L1494.3186035,275.5556641 L1494.3186035,276.7509766 L1488.4250488,276.7509766 C1487.190918,278.7818604 1485.9846191,280.5361328 1484.8059082,282.0136719 C1486.9143066,281.9140625 1489.0227051,281.7646484 1491.1311035,281.5654297 C1490.5610352,280.6744385 1490.0187988,279.8554688 1489.5041504,279.1083984 Z M1480.3068848,277.0830078 C1480.7163086,277.2600098 1481.1535645,277.442627 1481.6184082,277.6308594 C1480.8325195,279.9882813 1480.1463623,282.1187744 1479.5598145,284.0224609 L1478.1320801,283.5410156 C1478.8625488,281.5930176 1479.5874023,279.4404297 1480.3068848,277.0830078 Z M1478.6799316,272.3183594 C1479.5100098,272.9049072 1480.4838867,273.6574707 1481.6018066,274.5761719 C1481.1922607,275.0410156 1480.8713379,275.4006348 1480.638916,275.6552734 C1479.3881836,274.5373535 1478.4584961,273.7460938 1477.8498535,273.28125 Z M1479.3273926,268.0185547 C1480.2127686,268.7268066 1481.1645508,269.53479 1482.1828613,270.4423828 C1481.8065186,270.8297119 1481.4799805,271.1728516 1481.2033691,271.4716797 C1480.1850586,270.4644775 1479.2775879,269.6177979 1478.4807129,268.9316406 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip6)\" />\n<clipPath id=\"clip7\"><path d=\"M1723,14 L2246,14 L2246,81 L1723,81 L1723,14 Z\" /></clipPath>\n<path d=\"M1733,16 C1728.581665,16 1725,19.581665 1725,24 L1725,70 C1725,74.418335 1728.581665,78 1733,78 L2235,78 C2239.4182129,78 2243,74.418335 2243,70 L2243,24 C2243,19.581665 2239.4182129,16 2235,16 Z\" style=\"fill:rgb(211,223,255);stroke:none\" clip-path=\"url(#clip7)\" />\n<clipPath id=\"clip8\"><path d=\"M1723,14 L2246,14 L2246,81 L1723,81 L1723,14 Z\" /></clipPath>\n<path d=\"M1733,16 C1728.581665,16 1725,19.581665 1725,24 L1725,70 C1725,74.418335 1728.581665,78 1733,78 L2235,78 C2239.4182129,78 2243,74.418335 2243,70 L2243,24 C2243,19.581665 2239.4182129,16 2235,16 Z\" style=\"fill:none;stroke:rgb(0,64,128)\" clip-path=\"url(#clip8)\" />\n<clipPath id=\"clip9\"><path d=\"M1736,22 L2233,22 L2233,73 L1736,73 L1736,22 Z\" /></clipPath>\n<path d=\"M1738.5375977,28.5126953 C1738.5375977,28.2248535 1738.6357422,27.9827881 1738.8322754,27.786377 C1739.0286865,27.5898438 1739.270752,27.4916992 1739.5585938,27.4916992 C1739.8518066,27.4916992 1740.0994873,27.588501 1740.3015137,27.7822266 C1740.503418,27.9758301 1740.6044922,28.2193604 1740.6044922,28.5126953 C1740.6044922,28.800415 1740.503418,29.0397949 1740.3015137,29.2307129 C1740.0994873,29.4216309 1739.8518066,29.5170898 1739.5585938,29.5170898 C1739.2652588,29.5170898 1739.0217285,29.4216309 1738.828125,29.2307129 C1738.6343994,29.0397949 1738.5375977,28.800415 1738.5375977,28.5126953 Z M1738.7285156,40.9306641 L1738.7285156,31.75 L1740.3554688,31.75 L1740.3554688,40.9306641 Z M1751.1547852,40.9306641 L1749.5361328,40.9306641 L1749.5361328,35.7094727 C1749.5360107,33.8223877 1748.8470459,32.8789063 1747.4692383,32.8789063 C1746.7553711,32.8789063 1746.1687012,33.1445313 1745.7094727,33.6757813 C1745.2501221,34.2070313 1745.0205078,34.8793945 1745.0205078,35.6928711 L1745.0205078,40.9306641 L1743.3935547,40.9306641 L1743.3935547,31.75 L1745.0205078,31.75 L1745.0205078,33.269043 L1745.0537109,33.269043 C1745.7453613,32.1124268 1746.7497559,31.5341797 1748.0668945,31.5341797 C1749.0739746,31.5341797 1749.8404541,31.8564453 1750.3662109,32.5012207 C1750.8918457,33.145874 1751.1547852,34.0852051 1751.1547852,35.3193359 Z M1753.9853516,28.5126953 C1753.9853516,28.2248535 1754.0834961,27.9827881 1754.2800293,27.786377 C1754.4764404,27.5898438 1754.7185059,27.4916992 1755.0063477,27.4916992 C1755.2995605,27.4916992 1755.5472412,27.588501 1755.7492676,27.7822266 C1755.9511719,27.9758301 1756.0522461,28.2193604 1756.0522461,28.5126953 C1756.0522461,28.800415 1755.9511719,29.0397949 1755.7492676,29.2307129 C1755.5472412,29.4216309 1755.2995605,29.5170898 1755.0063477,29.5170898 C1754.7130127,29.5170898 1754.4694824,29.4216309 1754.2758789,29.2307129 C1754.0821533,29.0397949 1753.9853516,28.800415 1753.9853516,28.5126953 Z M1754.1762695,40.9306641 L1754.1762695,31.75 L1755.8032227,31.75 L1755.8032227,40.9306641 Z M1763.2490234,40.8393555 C1762.8947754,41.032959 1762.4161377,41.1298828 1761.8129883,41.1298828 C1760.1694336,41.1298828 1759.3476563,40.2194824 1759.3476563,38.3989258 L1759.3476563,33.0947266 L1757.7705078,33.0947266 L1757.7705078,31.75 L1759.3476563,31.75 L1759.3476563,29.5419922 L1760.9663086,29.0273438 L1760.9663086,31.75 L1763.2490234,31.75 L1763.2490234,33.0947266 L1760.9663086,33.0947266 L1760.9663086,38.1083984 C1760.9663086,38.7115479 1761.0686035,39.1431885 1761.2734375,39.4033203 C1761.4781494,39.6633301 1761.8184814,39.793457 1762.2944336,39.793457 C1762.659668,39.793457 1762.9777832,39.69104 1763.2490234,39.4863281 Z M1777.2026367,40.9306641 L1777.2026367,32.4140625 C1777.2026367,31.7111816 1777.2441406,30.8673096 1777.3271484,29.8823242 L1777.2856445,29.8823242 C1777.1417236,30.5020752 1777.0144043,30.9337158 1776.9038086,31.1772461 L1772.6621094,40.9306641 L1771.7407227,40.9306641 L1767.5073242,31.2519531 C1767.4077148,31.0305176 1767.2803955,30.5739746 1767.1254883,29.8823242 L1767.0756836,29.8823242 C1767.1309814,30.4799805 1767.1586914,31.3487549 1767.1586914,32.4887695 L1767.1586914,40.9306641 L1765.5732422,40.9306641 L1765.5732422,28.0727539 L1767.8227539,28.0727539 L1771.6162109,36.8881836 C1771.9039307,37.5632324 1772.0948486,38.0889893 1772.1889648,38.465332 L1772.2470703,38.465332 C1772.53479,37.6739502 1772.7368164,37.137207 1772.8530273,36.8549805 L1776.7128906,28.0727539 L1778.8544922,28.0727539 L1778.8544922,40.9306641 Z M1782.2744141,28.5126953 C1782.2744141,28.2248535 1782.3725586,27.9827881 1782.5690918,27.786377 C1782.7655029,27.5898438 1783.0075684,27.4916992 1783.2954102,27.4916992 C1783.588623,27.4916992 1783.8363037,27.588501 1784.0383301,27.7822266 C1784.2402344,27.9758301 1784.3413086,28.2193604 1784.3413086,28.5126953 C1784.3413086,28.800415 1784.2402344,29.0397949 1784.0383301,29.2307129 C1783.8363037,29.4216309 1783.588623,29.5170898 1783.2954102,29.5170898 C1783.0020752,29.5170898 1782.7585449,29.4216309 1782.5649414,29.2307129 C1782.3712158,29.0397949 1782.2744141,28.800415 1782.2744141,28.5126953 Z M1782.465332,40.9306641 L1782.465332,31.75 L1784.0922852,31.75 L1784.0922852,40.9306641 Z M1794.078125,31.75 L1791.0068359,36.3735352 L1794.0366211,40.9306641 L1792.144043,40.9306641 L1790.3925781,38.0087891 C1790.2984619,37.8537598 1790.1656494,37.6158447 1789.9941406,37.2949219 L1789.9609375,37.2949219 C1789.9553223,37.328125 1789.8170166,37.56604 1789.5458984,38.0087891 L1787.7612305,40.9306641 L1785.8935547,40.9306641 L1789.0146484,36.4233398 L1786.034668,31.75 L1787.9272461,31.75 L1789.6455078,34.8212891 C1789.7506104,35.0093994 1789.8779297,35.2529297 1790.0273438,35.5517578 L1790.0605469,35.5517578 L1792.293457,31.75 Z M1795.8046875,28.5126953 C1795.8046875,28.2248535 1795.902832,27.9827881 1796.0993652,27.786377 C1796.2957764,27.5898438 1796.5378418,27.4916992 1796.8256836,27.4916992 C1797.1188965,27.4916992 1797.3665771,27.588501 1797.5686035,27.7822266 C1797.7705078,27.9758301 1797.871582,28.2193604 1797.871582,28.5126953 C1797.871582,28.800415 1797.7705078,29.0397949 1797.5686035,29.2307129 C1797.3665771,29.4216309 1797.1188965,29.5170898 1796.8256836,29.5170898 C1796.5323486,29.5170898 1796.2888184,29.4216309 1796.0952148,29.2307129 C1795.9014893,29.0397949 1795.8046875,28.800415 1795.8046875,28.5126953 Z M1795.9956055,40.9306641 L1795.9956055,31.75 L1797.6225586,31.75 L1797.6225586,40.9306641 Z M1808.421875,40.9306641 L1806.8032227,40.9306641 L1806.8032227,35.7094727 C1806.8031006,33.8223877 1806.1141357,32.8789063 1804.7363281,32.8789063 C1804.0224609,32.8789063 1803.435791,33.1445313 1802.9765625,33.6757813 C1802.5172119,34.2070313 1802.2875977,34.8793945 1802.2875977,35.6928711 L1802.2875977,40.9306641 L1800.6606445,40.9306641 L1800.6606445,31.75 L1802.2875977,31.75 L1802.2875977,33.269043 L1802.3208008,33.269043 C1803.0124512,32.1124268 1804.0168457,31.5341797 1805.3339844,31.5341797 C1806.3410645,31.5341797 1807.1075439,31.8564453 1807.6333008,32.5012207 C1808.1589355,33.145874 1808.421875,34.0852051 1808.421875,35.3193359 Z M1810.9453125,31.144043 L1817.1791992,31.144043 C1817.3395996,29.788208 1817.4197998,28.3217773 1817.4199219,26.7446289 L1818.8476563,26.7446289 C1818.8476563,28.3881836 1818.7701416,29.8546143 1818.6152344,31.144043 L1825.6708984,31.144043 C1825.6044922,34.5639648 1825.5048828,37.3862305 1825.3720703,39.6108398 C1825.2613525,41.6804199 1824.1656494,42.715332 1822.0849609,42.715332 C1821.2216797,42.715332 1820.197876,42.6876221 1819.0136719,42.6323242 C1818.9693604,42.2006836 1818.8863525,41.6860352 1818.7646484,41.0883789 C1819.8049316,41.2321777 1820.8287354,41.3041992 1821.8359375,41.3041992 C1823.1640625,41.3041992 1823.8613281,40.651123 1823.9277344,39.3452148 C1824.0826416,37.1759033 1824.182251,34.8737793 1824.2265625,32.4389648 L1818.4326172,32.4389648 C1817.6191406,37.3198242 1815.3447266,40.9499512 1811.609375,43.3295898 C1811.2994385,42.9421387 1810.961792,42.5325928 1810.5966797,42.1010742 C1814.0386963,40.0700684 1816.1665039,36.8493652 1816.9799805,32.4389648 L1810.9453125,32.4389648 Z M1818.8310547,35.4272461 L1819.7441406,34.6137695 C1820.8066406,35.5987549 1821.7695313,36.5671387 1822.6328125,37.519043 L1821.6035156,38.4487305 C1820.7512207,37.4415283 1819.8271484,36.4343262 1818.8310547,35.4272461 Z M1812.1240234,27.8569336 L1813.0205078,27.0268555 C1813.9390869,27.8237305 1814.8244629,28.6427002 1815.6767578,29.4838867 L1814.6640625,30.4301758 C1813.8449707,29.5336914 1812.998291,28.6759033 1812.1240234,27.8569336 Z M1838.8525391,28.0727539 L1834.1293945,40.9306641 L1832.2866211,40.9306641 L1827.6547852,28.0727539 L1829.4975586,28.0727539 L1832.9589844,38.125 C1833.0751953,38.4570313 1833.1608887,38.8415527 1833.2163086,39.2788086 L1833.2578125,39.2788086 C1833.302002,38.8969727 1833.3989258,38.5068359 1833.5483398,38.1083984 L1837.0761719,28.0727539 Z M1848.3818359,40.9306641 L1846.746582,40.9306641 L1846.746582,39.4863281 L1846.7133789,39.4863281 C1846.0991211,40.5930176 1845.1555176,41.1464844 1843.8828125,41.1464844 C1841.7080078,41.1464844 1840.6206055,39.8459473 1840.6206055,37.2451172 L1840.6206055,31.75 L1842.230957,31.75 L1842.230957,37.0043945 C1842.230957,38.8692627 1842.9448242,39.8017578 1844.3725586,39.8017578 C1845.0808105,39.8017578 1845.6535645,39.5402832 1846.0908203,39.017334 C1846.5279541,38.4943848 1846.74646,37.8344727 1846.746582,37.0375977 L1846.746582,31.75 L1848.3818359,31.75 Z M1859.0732422,36.7553711 L1852.6484375,36.7553711 C1852.6760254,37.7348633 1852.944458,38.4915771 1853.4536133,39.0256348 C1853.9626465,39.5595703 1854.6738281,39.8266602 1855.5869141,39.8266602 C1856.6162109,39.8266602 1857.5596924,39.4973145 1858.4174805,38.8388672 L1858.4174805,40.2915039 C1857.6094971,40.8614502 1856.5386963,41.1464844 1855.2050781,41.1464844 C1853.8769531,41.1464844 1852.8406982,40.7258301 1852.0964355,39.8847656 C1851.3520508,39.0435791 1850.9799805,37.8759766 1850.9799805,36.3818359 C1850.9799805,34.9761963 1851.3880615,33.8168945 1852.2043457,32.9038086 C1853.0205078,31.9907227 1854.0345459,31.5341797 1855.246582,31.5341797 C1856.4473877,31.5341797 1857.385376,31.920166 1858.0605469,32.6921387 C1858.7355957,33.4641113 1859.0732422,34.5445557 1859.0732422,35.9335938 Z M1857.4462891,35.4521484 C1857.4406738,34.6220703 1857.2442627,33.9801025 1856.8569336,33.5263672 C1856.4694824,33.0725098 1855.9244385,32.8457031 1855.2216797,32.8457031 C1854.5742188,32.8457031 1854.0137939,33.0864258 1853.5407715,33.5678711 C1853.067627,34.0493164 1852.7701416,34.6773682 1852.6484375,35.4521484 Z M1868.3369141,39.6357422 L1868.3369141,45.1557617 L1866.7099609,45.1557617 L1866.7099609,31.75 L1868.3369141,31.75 L1868.3369141,33.3354492 L1868.3701172,33.3354492 C1869.0894775,32.1345215 1870.1408691,31.5341797 1871.5244141,31.5341797 C1872.6975098,31.5341797 1873.6175537,31.9450684 1874.2844238,32.7668457 C1874.9511719,33.588623 1875.284668,34.6911621 1875.284668,36.074707 C1875.284668,37.6020508 1874.9069824,38.8291016 1874.1516113,39.7561035 C1873.3962402,40.6829834 1872.3793945,41.1464844 1871.1010742,41.1464844 C1869.9223633,41.1464844 1869.0119629,40.6428223 1868.3701172,39.6357422 Z M1868.3286133,37.1455078 C1868.3286133,37.8925781 1868.5693359,38.5219727 1869.0507813,39.0339355 C1869.5322266,39.5457764 1870.135376,39.8017578 1870.8603516,39.8017578 C1871.7235107,39.8017578 1872.3986816,39.4697266 1872.8857422,38.8056641 C1873.3726807,38.1416016 1873.6162109,37.2229004 1873.6162109,36.0498047 C1873.6162109,35.0592041 1873.3892822,34.2830811 1872.9355469,33.7214355 C1872.4816895,33.159668 1871.8619385,32.8789063 1871.0761719,32.8789063 C1870.2736816,32.8789063 1869.6152344,33.1638184 1869.1005859,33.7338867 C1868.5859375,34.303833 1868.3286133,35.0343018 1868.3286133,35.925293 Z M1882.8134766,33.3603516 C1882.5422363,33.166626 1882.1687012,33.0698242 1881.6928711,33.0698242 C1881.0620117,33.0698242 1880.541748,33.364502 1880.1323242,33.9538574 C1879.7227783,34.5432129 1879.5180664,35.3193359 1879.5180664,36.2822266 L1879.5180664,40.9306641 L1877.8911133,40.9306641 L1877.8911133,31.75 L1879.5180664,31.75 L1879.5180664,33.6176758 L1879.5512695,33.6176758 C1880.0159912,32.267334 1880.8184814,31.5922852 1881.9584961,31.5922852 C1882.3292236,31.5922852 1882.6142578,31.6337891 1882.8134766,31.7167969 Z M1883.9589844,36.4399414 C1883.9589844,34.923584 1884.3823242,33.7269287 1885.2290039,32.8498535 C1886.0756836,31.9726563 1887.223877,31.5341797 1888.6738281,31.5341797 C1890.0516357,31.5341797 1891.1322021,31.9560547 1891.9152832,32.8000488 C1892.6982422,33.6439209 1893.0898438,34.8101807 1893.0898438,36.2988281 C1893.0898438,37.7486572 1892.6719971,38.9190674 1891.8364258,39.8100586 C1891.0007324,40.7009277 1889.880127,41.1464844 1888.4746094,41.1464844 C1887.1021729,41.1464844 1886.0064697,40.7147217 1885.1875,39.8515625 C1884.3684082,38.9882813 1883.9589844,37.8510742 1883.9589844,36.4399414 Z M1885.6191406,36.3901367 C1885.6191406,37.4470215 1885.8861084,38.2799072 1886.420166,38.8886719 C1886.9541016,39.4973145 1887.6721191,39.8017578 1888.5742188,39.8017578 C1889.5037842,39.8017578 1890.2121582,39.5042725 1890.6992188,38.9094238 C1891.1861572,38.3144531 1891.4296875,37.4609375 1891.4296875,36.3486328 C1891.4296875,35.2307129 1891.1861572,34.3730469 1890.6992188,33.7753906 C1890.2121582,33.1777344 1889.5037842,32.8789063 1888.5742188,32.8789063 C1887.6611328,32.8789063 1886.9403076,33.1915283 1886.4118652,33.8168945 C1885.8833008,34.4421387 1885.6191406,35.2999268 1885.6191406,36.3901367 Z M1900.1123047,40.8393555 C1899.7580566,41.032959 1899.2794189,41.1298828 1898.6762695,41.1298828 C1897.0327148,41.1298828 1896.2109375,40.2194824 1896.2109375,38.3989258 L1896.2109375,33.0947266 L1894.6337891,33.0947266 L1894.6337891,31.75 L1896.2109375,31.75 L1896.2109375,29.5419922 L1897.8295898,29.0273438 L1897.8295898,31.75 L1900.1123047,31.75 L1900.1123047,33.0947266 L1897.8295898,33.0947266 L1897.8295898,38.1083984 C1897.8295898,38.7115479 1897.9318848,39.1431885 1898.1367188,39.4033203 C1898.3414307,39.6633301 1898.6817627,39.793457 1899.1577148,39.793457 C1899.5229492,39.793457 1899.8410645,39.69104 1900.1123047,39.4863281 Z M1901.6147461,36.4399414 C1901.6147461,34.923584 1902.0380859,33.7269287 1902.8847656,32.8498535 C1903.7314453,31.9726563 1904.8796387,31.5341797 1906.3295898,31.5341797 C1907.7073975,31.5341797 1908.7879639,31.9560547 1909.5710449,32.8000488 C1910.3540039,33.6439209 1910.7456055,34.8101807 1910.7456055,36.2988281 C1910.7456055,37.7486572 1910.3277588,38.9190674 1909.4921875,39.8100586 C1908.6564941,40.7009277 1907.5358887,41.1464844 1906.1303711,41.1464844 C1904.7579346,41.1464844 1903.6622314,40.7147217 1902.8432617,39.8515625 C1902.0241699,38.9882813 1901.6147461,37.8510742 1901.6147461,36.4399414 Z M1903.2749023,36.3901367 C1903.2749023,37.4470215 1903.5418701,38.2799072 1904.0759277,38.8886719 C1904.6098633,39.4973145 1905.3278809,39.8017578 1906.2299805,39.8017578 C1907.1595459,39.8017578 1907.8679199,39.5042725 1908.3549805,38.9094238 C1908.8419189,38.3144531 1909.0854492,37.4609375 1909.0854492,36.3486328 C1909.0854492,35.2307129 1908.8419189,34.3730469 1908.3549805,33.7753906 C1907.8679199,33.1777344 1907.1595459,32.8789063 1906.2299805,32.8789063 C1905.3168945,32.8789063 1904.5960693,33.1915283 1904.067627,33.8168945 C1903.5390625,34.4421387 1903.2749023,35.2999268 1903.2749023,36.3901367 Z M1917.7680664,40.8393555 C1917.4138184,41.032959 1916.9351807,41.1298828 1916.3320313,41.1298828 C1914.6884766,41.1298828 1913.8666992,40.2194824 1913.8666992,38.3989258 L1913.8666992,33.0947266 L1912.2895508,33.0947266 L1912.2895508,31.75 L1913.8666992,31.75 L1913.8666992,29.5419922 L1915.4853516,29.0273438 L1915.4853516,31.75 L1917.7680664,31.75 L1917.7680664,33.0947266 L1915.4853516,33.0947266 L1915.4853516,38.1083984 C1915.4853516,38.7115479 1915.5876465,39.1431885 1915.7924805,39.4033203 C1915.9971924,39.6633301 1916.3375244,39.793457 1916.8134766,39.793457 C1917.1787109,39.793457 1917.4968262,39.69104 1917.7680664,39.4863281 Z M1927.3554688,31.75 L1923.1884766,42.3168945 C1922.4136963,44.2757568 1921.3208008,45.2553711 1919.909668,45.2553711 C1919.5056152,45.2553711 1919.15979,45.2110596 1918.8720703,45.1225586 L1918.8720703,43.6948242 C1919.1875,43.8165283 1919.4918213,43.8774414 1919.7851563,43.8774414 C1920.5211182,43.8774414 1921.0717773,43.4458008 1921.4370117,42.5825195 L1922.1425781,40.9140625 L1918.5400391,31.75 L1920.3413086,31.75 L1922.7402344,38.6479492 L1922.9394531,39.4033203 L1922.980957,39.4033203 C1923.0141602,39.2316895 1923.0805664,38.9854736 1923.1801758,38.6645508 L1925.6870117,31.75 Z M1930.7836914,39.6357422 L1930.7836914,45.1557617 L1929.1567383,45.1557617 L1929.1567383,31.75 L1930.7836914,31.75 L1930.7836914,33.3354492 L1930.8168945,33.3354492 C1931.5362549,32.1345215 1932.5876465,31.5341797 1933.9711914,31.5341797 C1935.1442871,31.5341797 1936.0643311,31.9450684 1936.7312012,32.7668457 C1937.3979492,33.588623 1937.7314453,34.6911621 1937.7314453,36.074707 C1937.7314453,37.6020508 1937.3537598,38.8291016 1936.5983887,39.7561035 C1935.8430176,40.6829834 1934.8261719,41.1464844 1933.5478516,41.1464844 C1932.3691406,41.1464844 1931.4587402,40.6428223 1930.8168945,39.6357422 Z M1930.7753906,37.1455078 C1930.7753906,37.8925781 1931.0161133,38.5219727 1931.4975586,39.0339355 C1931.9790039,39.5457764 1932.5821533,39.8017578 1933.3071289,39.8017578 C1934.1702881,39.8017578 1934.845459,39.4697266 1935.3325195,38.8056641 C1935.819458,38.1416016 1936.0629883,37.2229004 1936.0629883,36.0498047 C1936.0629883,35.0592041 1935.8360596,34.2830811 1935.3823242,33.7214355 C1934.9284668,33.159668 1934.3087158,32.8789063 1933.5229492,32.8789063 C1932.720459,32.8789063 1932.0620117,33.1638184 1931.5473633,33.7338867 C1931.0327148,34.303833 1930.7753906,35.0343018 1930.7753906,35.925293 Z M1947.8168945,36.7553711 L1941.3920898,36.7553711 C1941.4196777,37.7348633 1941.6881104,38.4915771 1942.1972656,39.0256348 C1942.7062988,39.5595703 1943.4174805,39.8266602 1944.3305664,39.8266602 C1945.3598633,39.8266602 1946.3033447,39.4973145 1947.1611328,38.8388672 L1947.1611328,40.2915039 C1946.3531494,40.8614502 1945.2823486,41.1464844 1943.9487305,41.1464844 C1942.6206055,41.1464844 1941.5843506,40.7258301 1940.8400879,39.8847656 C1940.0957031,39.0435791 1939.7236328,37.8759766 1939.7236328,36.3818359 C1939.7236328,34.9761963 1940.1317139,33.8168945 1940.947998,32.9038086 C1941.7641602,31.9907227 1942.7781982,31.5341797 1943.9902344,31.5341797 C1945.19104,31.5341797 1946.1290283,31.920166 1946.8041992,32.6921387 C1947.479248,33.4641113 1947.8168945,34.5445557 1947.8168945,35.9335938 Z M1946.1899414,35.4521484 C1946.1843262,34.6220703 1945.987915,33.9801025 1945.6005859,33.5263672 C1945.2131348,33.0725098 1944.6680908,32.8457031 1943.965332,32.8457031 C1943.3178711,32.8457031 1942.7574463,33.0864258 1942.2844238,33.5678711 C1941.8112793,34.0493164 1941.5137939,34.6773682 1941.3920898,35.4521484 Z M1952.7890625,36.2739258 C1954.7590332,35.1339111 1956.1424561,33.9385986 1956.9394531,32.6879883 L1953.5361328,32.6879883 L1953.5361328,31.5258789 L1957.5039063,31.5258789 C1957.8027344,30.7510986 1958.0185547,29.9044189 1958.1513672,28.9858398 L1954.3994141,28.9858398 L1954.3994141,27.8237305 L1964.3603516,27.8237305 L1964.3603516,28.9858398 L1959.4462891,28.9858398 C1959.3189697,29.9487305 1959.1363525,30.7954102 1958.8984375,31.5258789 L1965.1572266,31.5258789 L1965.1572266,32.6879883 L1961.2060547,32.6879883 C1962.2961426,34.2208252 1963.7791748,35.2722168 1965.6552734,35.8422852 C1965.2789307,36.2628174 1964.9468994,36.6889648 1964.6591797,37.1206055 C1962.4787598,36.0581055 1960.8574219,34.5805664 1959.7949219,32.6879883 L1958.425293,32.6879883 C1957.572998,34.3868408 1955.9875488,35.9362793 1953.6689453,37.3364258 C1953.4365234,37.0264893 1953.1431885,36.6723633 1952.7890625,36.2739258 Z M1958.0683594,34.8793945 L1959.3300781,34.8793945 L1959.3300781,41.0883789 C1959.3300781,42.3167725 1958.6826172,42.9311523 1957.3876953,42.9311523 C1956.7235107,42.9311523 1956.1258545,42.9255371 1955.5947266,42.9145508 C1955.5281982,42.5050049 1955.4396973,42.0567627 1955.3291016,41.5698242 C1955.8935547,41.6583252 1956.4523926,41.7026367 1957.0058594,41.7026367 C1957.7141113,41.7026367 1958.0683594,41.3649902 1958.0683594,40.6899414 Z M1951.0458984,36.1245117 C1951.4775391,36.2905273 1951.920166,36.4509277 1952.3740234,36.605957 C1951.8095703,38.9522705 1951.3059082,41.0883789 1950.8632813,43.0141602 L1949.4355469,42.5825195 C1950.0220947,40.6899414 1950.5588379,38.5372314 1951.0458984,36.1245117 Z M1961.9199219,37.0043945 L1962.9658203,36.5063477 C1963.78479,37.8012695 1964.5318604,39.1237793 1965.2070313,40.4741211 L1964.0615234,41.0385742 C1963.519165,39.8985596 1962.8052979,38.553833 1961.9199219,37.0043945 Z M1955.578125,36.6723633 L1956.7402344,37.1538086 C1956.1314697,38.6811523 1955.4729004,40.0258789 1954.7646484,41.1879883 C1954.3771973,40.9887695 1953.984375,40.8116455 1953.5859375,40.6567383 C1954.3937988,39.4503174 1955.0578613,38.1221924 1955.578125,36.6723633 Z M1959.8115234,37.3696289 L1960.9072266,36.9711914 C1961.394165,38.2106934 1961.8590088,39.5665283 1962.3017578,41.0385742 L1961.0566406,41.4536133 C1960.7023926,40.059082 1960.2873535,38.6977539 1959.8115234,37.3696289 Z M1949.8671875,31.3266602 C1950.6639404,31.8800049 1951.6435547,32.6325684 1952.8056641,33.5844727 C1952.3961182,34.0493164 1952.0695801,34.4089355 1951.8261719,34.6635742 C1950.6640625,33.6010742 1949.7342529,32.8041992 1949.0371094,32.2729492 Z M1950.5146484,27.0102539 C1951.4996338,27.7849121 1952.4570313,28.5928955 1953.3867188,29.434082 C1953.010376,29.8103027 1952.6783447,30.1479492 1952.390625,30.4467773 C1951.3502197,29.4174805 1950.442627,28.5762939 1949.6679688,27.9233398 Z M1976.0561523,29.019043 L1982.3647461,29.019043 L1982.3647461,42.6987305 L1981.0532227,42.6987305 L1981.0532227,41.0219727 L1977.3676758,41.0219727 L1977.3676758,42.6987305 L1976.0561523,42.6987305 Z M1966.9418945,29.8325195 L1969.2578125,29.8325195 C1969.2687988,28.9415283 1969.2716064,27.9509277 1969.2661133,26.8608398 L1970.5776367,26.8608398 C1970.5776367,27.9620361 1970.5720215,28.9526367 1970.5610352,29.8325195 L1974.4291992,29.8325195 C1974.3737793,34.0825195 1974.3018799,37.4194336 1974.2133789,39.8432617 C1974.1690674,41.8353271 1973.4163818,42.7927246 1971.9555664,42.715332 C1971.5239258,42.715332 1970.8874512,42.6987305 1970.0463867,42.6655273 C1969.9688721,42.2006836 1969.8803711,41.7191162 1969.7807617,41.2211914 C1970.5554199,41.3208008 1971.1862793,41.3706055 1971.6733398,41.3706055 C1972.4147949,41.3927002 1972.8188477,40.8669434 1972.8852539,39.793457 C1973.006958,37.1704102 1973.0788574,34.2706299 1973.1010742,31.0942383 L1970.5444336,31.0942383 C1970.5333252,31.940918 1970.5167236,32.6602783 1970.4946289,33.2524414 C1970.4503174,37.579834 1969.4099121,40.9112549 1967.3735352,43.246582 C1967.0968018,42.9034424 1966.7702637,42.5327148 1966.394043,42.1342773 C1968.2312012,40.119873 1969.1665039,37.1149902 1969.199707,33.1196289 C1969.2218018,32.5385742 1969.2384033,31.8634033 1969.2495117,31.0942383 L1966.9418945,31.0942383 Z M1981.0532227,30.2475586 L1977.3676758,30.2475586 L1977.3676758,39.8266602 L1981.0532227,39.8266602 Z M1991.4541016,45.2719727 L1983.8339844,45.2719727 L1983.8339844,44.2011719 L1991.4541016,44.2011719 Z M1992.9399414,28.5126953 C1992.9399414,28.2248535 1993.0380859,27.9827881 1993.2346191,27.786377 C1993.4310303,27.5898438 1993.6730957,27.4916992 1993.9609375,27.4916992 C1994.2541504,27.4916992 1994.5018311,27.588501 1994.7038574,27.7822266 C1994.9057617,27.9758301 1995.0068359,28.2193604 1995.0068359,28.5126953 C1995.0068359,28.800415 1994.9057617,29.0397949 1994.7038574,29.2307129 C1994.5018311,29.4216309 1994.2541504,29.5170898 1993.9609375,29.5170898 C1993.6676025,29.5170898 1993.4240723,29.4216309 1993.2304688,29.2307129 C1993.0367432,29.0397949 1992.9399414,28.800415 1992.9399414,28.5126953 Z M1993.1308594,40.9306641 L1993.1308594,31.75 L1994.7578125,31.75 L1994.7578125,40.9306641 Z M2005.5571289,40.9306641 L2003.9384766,40.9306641 L2003.9384766,35.7094727 C2003.9383545,33.8223877 2003.2493896,32.8789063 2001.871582,32.8789063 C2001.1577148,32.8789063 2000.5710449,33.1445313 2000.1118164,33.6757813 C1999.6524658,34.2070313 1999.4228516,34.8793945 1999.4228516,35.6928711 L1999.4228516,40.9306641 L1997.7958984,40.9306641 L1997.7958984,31.75 L1999.4228516,31.75 L1999.4228516,33.269043 L1999.4560547,33.269043 C2000.1477051,32.1124268 2001.1520996,31.5341797 2002.4692383,31.5341797 C2003.4763184,31.5341797 2004.2427979,31.8564453 2004.7685547,32.5012207 C2005.2941895,33.145874 2005.5571289,34.0852051 2005.5571289,35.3193359 Z M2008.3876953,28.5126953 C2008.3876953,28.2248535 2008.4858398,27.9827881 2008.682373,27.786377 C2008.8787842,27.5898438 2009.1208496,27.4916992 2009.4086914,27.4916992 C2009.7019043,27.4916992 2009.949585,27.588501 2010.1516113,27.7822266 C2010.3535156,27.9758301 2010.4545898,28.2193604 2010.4545898,28.5126953 C2010.4545898,28.800415 2010.3535156,29.0397949 2010.1516113,29.2307129 C2009.949585,29.4216309 2009.7019043,29.5170898 2009.4086914,29.5170898 C2009.1153564,29.5170898 2008.8718262,29.4216309 2008.6782227,29.2307129 C2008.4844971,29.0397949 2008.3876953,28.800415 2008.3876953,28.5126953 Z M2008.5786133,40.9306641 L2008.5786133,31.75 L2010.2055664,31.75 L2010.2055664,40.9306641 Z M2017.6513672,40.8393555 C2017.2971191,41.032959 2016.8184814,41.1298828 2016.215332,41.1298828 C2014.5717773,41.1298828 2013.75,40.2194824 2013.75,38.3989258 L2013.75,33.0947266 L2012.1728516,33.0947266 L2012.1728516,31.75 L2013.75,31.75 L2013.75,29.5419922 L2015.3686523,29.0273438 L2015.3686523,31.75 L2017.6513672,31.75 L2017.6513672,33.0947266 L2015.3686523,33.0947266 L2015.3686523,38.1083984 C2015.3686523,38.7115479 2015.4709473,39.1431885 2015.6757813,39.4033203 C2015.8804932,39.6633301 2016.2208252,39.793457 2016.6967773,39.793457 C2017.0620117,39.793457 2017.380127,39.69104 2017.6513672,39.4863281 Z M2018.8300781,29.6665039 L2026.7988281,29.6665039 C2026.2398682,28.6040039 2025.8026123,27.8292236 2025.4873047,27.3422852 L2026.7822266,26.7280273 C2027.092041,27.2038574 2027.5568848,27.9786377 2028.1767578,29.0522461 L2026.9648438,29.6665039 L2034.8339844,29.6665039 L2034.8339844,30.9282227 L2024.7651367,30.9282227 C2024.7263184,31.9353027 2024.6848145,32.7930908 2024.640625,33.5014648 L2032.6591797,33.5014648 C2032.5262451,35.9030762 2032.3824463,37.9893799 2032.2275391,39.7602539 C2032.1057129,41.7634277 2031.1318359,42.7651367 2029.3056641,42.7651367 C2028.4644775,42.7651367 2027.3410645,42.7208252 2025.9355469,42.6323242 C2025.880127,42.2116699 2025.7971191,41.7025146 2025.6865234,41.1049805 C2027.092041,41.2930908 2028.2320557,41.387207 2029.1064453,41.387207 C2030.1246338,41.387207 2030.6945801,40.7839355 2030.8164063,39.5776367 C2030.9492188,38.260498 2031.0654297,36.6501465 2031.1650391,34.746582 L2024.5493164,34.746582 C2024.2393799,38.3989258 2022.5487061,41.2321777 2019.4775391,43.246582 C2019.1787109,42.892334 2018.8410645,42.5161133 2018.4648438,42.1176758 C2021.3865967,40.1918945 2022.9527588,37.6130371 2023.1630859,34.3813477 C2023.2404785,33.506958 2023.3041992,32.355957 2023.3540039,30.9282227 L2018.8300781,30.9282227 Z M2048.8041992,37.402832 C2049.8666992,38.8526611 2051.012207,40.5183105 2052.2407227,42.3999023 C2051.7978516,42.6544189 2051.3662109,42.9089355 2050.9458008,43.1635742 C2050.6357422,42.6489258 2050.331543,42.1508789 2050.0327148,41.6694336 C2046.4024658,41.9682617 2043.5579834,42.2172852 2041.4995117,42.4165039 L2040.8852539,40.972168 C2041.5825195,40.6622314 2042.2631836,40.0147705 2042.9272461,39.0297852 C2043.6577148,37.9893799 2044.3355713,36.8936768 2044.9609375,35.7426758 L2040.6030273,35.7426758 L2040.6030273,34.5473633 L2045.815918,34.5473633 L2045.815918,31.027832 L2041.4165039,31.027832 L2041.4165039,29.8325195 L2045.815918,29.8325195 L2045.815918,26.7944336 L2047.144043,26.7944336 L2047.144043,29.8325195 L2051.7426758,29.8325195 L2051.7426758,31.027832 L2047.144043,31.027832 L2047.144043,34.5473633 L2052.5229492,34.5473633 L2052.5229492,35.7426758 L2046.6293945,35.7426758 C2045.3952637,37.7735596 2044.1889648,39.527832 2043.0102539,41.0053711 C2045.1186523,40.9057617 2047.2270508,40.7563477 2049.3354492,40.5571289 C2048.7653809,39.6661377 2048.2231445,38.847168 2047.7084961,38.1000977 Z M2038.5112305,36.074707 C2038.9206543,36.251709 2039.3579102,36.4343262 2039.8227539,36.6225586 C2039.0368652,38.9799805 2038.350708,41.1104736 2037.7641602,43.0141602 L2036.3364258,42.5327148 C2037.0668945,40.5847168 2037.791748,38.4321289 2038.5112305,36.074707 Z M2036.8842773,31.3100586 C2037.7143555,31.8966064 2038.6882324,32.6491699 2039.8061523,33.5678711 C2039.3966064,34.0327148 2039.0756836,34.392334 2038.8432617,34.6469727 C2037.5925293,33.5290527 2036.6628418,32.737793 2036.0541992,32.2729492 Z M2037.5317383,27.0102539 C2038.4171143,27.7185059 2039.3688965,28.5264893 2040.387207,29.434082 C2040.0108643,29.8214111 2039.6843262,30.1645508 2039.4077148,30.4633789 C2038.3894043,29.4561768 2037.4819336,28.6094971 2036.6850586,27.9233398 Z M2056.2749023,38.8637695 L2054.8554688,43.2880859 L2053.6767578,43.2880859 L2054.7060547,38.8637695 Z M2068.8920898,28.0727539 L2064.1689453,40.9306641 L2062.3261719,40.9306641 L2057.6943359,28.0727539 L2059.5371094,28.0727539 L2062.9985352,38.125 C2063.1147461,38.4570313 2063.2004395,38.8415527 2063.2558594,39.2788086 L2063.2973633,39.2788086 C2063.3415527,38.8969727 2063.4384766,38.5068359 2063.5878906,38.1083984 L2067.1157227,28.0727539 Z M2078.4213867,40.9306641 L2076.7861328,40.9306641 L2076.7861328,39.4863281 L2076.7529297,39.4863281 C2076.1386719,40.5930176 2075.1950684,41.1464844 2073.9223633,41.1464844 C2071.7475586,41.1464844 2070.6601563,39.8459473 2070.6601563,37.2451172 L2070.6601563,31.75 L2072.2705078,31.75 L2072.2705078,37.0043945 C2072.2705078,38.8692627 2072.984375,39.8017578 2074.4121094,39.8017578 C2075.1203613,39.8017578 2075.6931152,39.5402832 2076.1303711,39.017334 C2076.5673828,38.4943848 2076.7861328,37.8344727 2076.7861328,37.0375977 L2076.7861328,31.75 L2078.4213867,31.75 Z M2089.112793,36.7553711 L2082.6879883,36.7553711 C2082.7155762,37.7348633 2082.9838867,38.4915771 2083.4931641,39.0256348 C2084.0021973,39.5595703 2084.7133789,39.8266602 2085.6264648,39.8266602 C2086.6557617,39.8266602 2087.5991211,39.4973145 2088.4570313,38.8388672 L2088.4570313,40.2915039 C2087.6489258,40.8614502 2086.578125,41.1464844 2085.2446289,41.1464844 C2083.9165039,41.1464844 2082.8803711,40.7258301 2082.1359863,39.8847656 C2081.3916016,39.0435791 2081.0195313,37.8759766 2081.0195313,36.3818359 C2081.0195313,34.9761963 2081.4277344,33.8168945 2082.2438965,32.9038086 C2083.0600586,31.9907227 2084.0742188,31.5341797 2085.2861328,31.5341797 C2086.4868164,31.5341797 2087.4248047,31.920166 2088.1000977,32.6921387 C2088.7751465,33.4641113 2089.112793,34.5445557 2089.112793,35.9335938 Z M2087.4858398,35.4521484 C2087.4802246,34.6220703 2087.2836914,33.9801025 2086.8964844,33.5263672 C2086.5090332,33.0725098 2085.9638672,32.8457031 2085.2612305,32.8457031 C2084.6137695,32.8457031 2084.0532227,33.0864258 2083.5803223,33.5678711 C2083.1071777,34.0493164 2082.8095703,34.6773682 2082.6879883,35.4521484 Z M2095.7949219,32.8041992 C2097.0344238,31.0554199 2098.0249023,29.0632324 2098.7666016,26.8276367 L2100.0449219,27.2426758 C2099.723877,28.0063477 2099.4140625,28.7202148 2099.1152344,29.3842773 L2106.2705078,29.3842773 C2106.1154785,35.0397949 2106.0048828,38.5372314 2105.9384766,39.8764648 C2105.8830566,41.0384521 2105.6174316,41.8354492 2105.1416016,42.2670898 C2104.6877441,42.6987305 2103.8686523,42.9145508 2102.6845703,42.9145508 C2101.8100586,42.9145508 2100.8969727,42.8868408 2099.9453125,42.831543 C2099.8789063,42.3887939 2099.784668,41.9018555 2099.6630859,41.3706055 C2100.7587891,41.4923096 2101.7492676,41.564209 2102.6347656,41.5864258 C2103.3984375,41.5974121 2103.9130859,41.4645996 2104.1787109,41.1879883 C2104.4553223,40.9555664 2104.6103516,40.4519043 2104.6435547,39.6772461 C2104.7209473,38.1831055 2104.8149414,35.1560059 2104.9257813,30.5961914 L2098.5341797,30.5961914 C2097.9475098,31.7471924 2097.3774414,32.7155762 2096.8242188,33.5014648 C2096.5473633,33.2911377 2096.2043457,33.0587158 2095.7949219,32.8041992 Z M2090.3330078,37.3198242 C2091.4838867,35.5268555 2092.2973633,33.5622559 2092.7734375,31.4262695 L2090.4492188,31.4262695 L2090.4492188,30.3139648 L2092.7900391,30.3139648 L2092.7900391,27.0268555 L2093.9355469,27.0268555 L2093.9355469,30.3139648 L2096.09375,30.3139648 L2096.09375,31.4262695 L2093.9355469,31.4262695 L2093.9355469,33.6674805 L2094.4003906,33.1860352 C2095.152832,33.8721924 2095.9331055,34.6026611 2096.7412109,35.3774414 L2095.8613281,36.2905273 C2095.1750488,35.5046387 2094.5332031,34.8239746 2093.9355469,34.2485352 L2093.9355469,43.1469727 L2092.7900391,43.1469727 L2092.7900391,34.597168 C2092.2475586,36.3237305 2091.6057129,37.7182617 2090.8642578,38.7807617 C2090.7202148,38.3048096 2090.5432129,37.8178711 2090.3330078,37.3198242 Z M2100.5429688,34.9458008 L2101.5556641,34.4145508 C2102.3635254,35.809082 2103.1992188,37.3308105 2104.0625,38.9799805 L2102.8837891,39.6108398 C2102.7509766,39.3120117 2102.6125488,39.0131836 2102.46875,38.7143555 C2101.0297852,38.8028564 2099.6132813,38.9024658 2098.21875,39.0131836 C2097.8754883,39.0463867 2097.3886719,39.1293945 2096.7578125,39.262207 L2096.1933594,38.0668945 C2096.5473633,37.8233643 2096.8461914,37.5245361 2097.0898438,37.1704102 C2097.9973145,35.7426758 2098.8937988,33.9884033 2099.7792969,31.9077148 L2101.0244141,32.4223633 C2100.3713379,33.861084 2099.3752441,35.659668 2098.0361328,37.8178711 C2099.6298828,37.7735596 2100.9414063,37.729248 2101.9707031,37.6850586 C2101.527832,36.7663574 2101.052002,35.8532715 2100.5429688,34.9458008 Z M2114.0649414,35.1118164 L2122.5151367,35.1118164 L2122.5151367,40.440918 L2121.2368164,40.440918 L2121.2368164,39.7602539 L2115.3432617,39.7602539 L2115.3432617,40.440918 L2114.0649414,40.440918 Z M2112.6040039,32.5551758 L2117.8666992,32.5551758 L2117.8666992,30.2973633 L2115.0444336,30.2973633 C2114.7456055,31.0056152 2114.4245605,31.6530762 2114.081543,32.2397461 C2113.7937012,32.0515137 2113.4118652,31.8522949 2112.9360352,31.6420898 C2113.7438965,30.3360596 2114.347168,28.8806152 2114.7456055,27.2758789 L2116.0073242,27.5581055 C2115.8413086,28.1225586 2115.6669922,28.6593018 2115.484375,29.168457 L2117.8666992,29.168457 L2117.8666992,26.8110352 L2119.1616211,26.8110352 L2119.1616211,29.168457 L2123.4116211,29.168457 L2123.4116211,30.2973633 L2119.1616211,30.2973633 L2119.1616211,32.5551758 L2124.2250977,32.5551758 L2124.2250977,33.684082 L2112.6040039,33.684082 Z M2114.6958008,41.4536133 L2118.8295898,41.5200195 L2124.3579102,41.387207 C2124.236084,41.7524414 2124.0810547,42.1895752 2123.8930664,42.6987305 L2118.3979492,42.7319336 L2114.4467773,42.6323242 C2112.5651855,42.6101074 2111.2480469,41.9626465 2110.4956055,40.6899414 C2110.041748,41.1104736 2109.3776855,41.8520508 2108.503418,42.9145508 L2107.8227539,41.5366211 C2108.8022461,40.590332 2109.510498,39.9123535 2109.9477539,39.5029297 L2109.9477539,33.9165039 L2107.972168,33.9165039 L2107.972168,32.6879883 L2111.2260742,32.6879883 L2111.2260742,39.7851563 C2111.9067383,40.8863525 2113.0632324,41.4425049 2114.6958008,41.4536133 Z M2121.2368164,36.2407227 L2115.3432617,36.2407227 L2115.3432617,38.6313477 L2121.2368164,38.6313477 Z M2109.8979492,27.1098633 C2110.4624023,27.7960205 2111.2370605,28.8419189 2112.222168,30.2475586 L2111.043457,31.0776367 C2110.1469727,29.6719971 2109.4108887,28.5874023 2108.8354492,27.8237305 Z M2139.5566406,43.097168 L2139.5566406,42.300293 L2126.375,42.300293 L2126.375,31.0444336 L2127.703125,31.0444336 L2127.703125,41.0717773 L2139.5566406,41.0717773 L2139.5566406,31.0444336 L2140.8847656,31.0444336 L2140.8847656,43.097168 Z M2133.28125,30.9614258 L2137.2158203,28.8696289 L2127.8193359,28.8696289 L2127.8193359,27.6577148 L2139.1914063,27.6577148 L2139.1914063,29.0356445 L2134.5429688,31.6088867 L2134.5429688,38.1499023 C2134.5429688,39.5333252 2133.8623047,40.2250977 2132.5009766,40.2250977 C2131.9475098,40.2250977 2131.2558594,40.2139893 2130.4257813,40.1918945 C2130.3925781,39.8155518 2130.3261719,39.3673096 2130.2265625,38.847168 C2130.9348145,38.9356689 2131.6044922,38.9799805 2132.2353516,38.9799805 C2132.9326172,38.9799805 2133.28125,38.6479492 2133.28125,37.9838867 Z M2132.2519531,34.6303711 L2132.9326172,35.6762695 C2131.5712891,36.4509277 2130.1213379,37.3032227 2128.5830078,38.2329102 L2127.8359375,37.0874023 C2129.208252,36.4233398 2130.6801758,35.604248 2132.2519531,34.6303711 Z M2134.7919922,35.6264648 L2135.5888672,34.6635742 C2136.8173828,35.4272461 2138.0900879,36.2683105 2139.4072266,37.1870117 L2138.5107422,38.2993164 C2137.2932129,37.3474121 2136.0537109,36.456543 2134.7919922,35.6264648 Z M2128.3671875,31.675293 L2129.1806641,30.7788086 C2130.2873535,31.5424805 2131.3554688,32.3282471 2132.3847656,33.1362305 L2131.4882813,34.1655273 C2130.4145508,33.2468262 2129.3742676,32.416748 2128.3671875,31.675293 Z M2138.1289063,30.9614258 L2139.0917969,31.8579102 C2138.2172852,32.5993652 2137.237793,33.3907471 2136.1533203,34.2319336 L2135.2900391,33.2856445 C2136.263916,32.5661621 2137.2102051,31.7915039 2138.1289063,30.9614258 Z M2153.7260742,26.8442383 L2155.0541992,27.043457 C2154.8217773,28.1169434 2154.5505371,29.1186523 2154.2407227,30.0483398 L2159.3208008,30.0483398 L2159.3208008,31.1772461 L2158.2749023,31.1772461 C2157.9980469,34.4311523 2157.2897949,37.0153809 2156.1499023,38.9301758 C2157.0463867,40.147583 2158.1862793,41.1436768 2159.5698242,41.918457 C2159.2155762,42.4053955 2158.916748,42.8425293 2158.6733398,43.2299805 C2157.322998,42.3555908 2156.199707,41.3151855 2155.3032227,40.1088867 C2154.2849121,41.3704834 2153.072998,42.4663086 2151.6674805,43.3959961 C2151.4238281,43.0749512 2151.1083984,42.7263184 2150.7211914,42.3500977 C2152.2705078,41.3317871 2153.5268555,40.175293 2154.4897461,38.8803711 C2153.5932617,37.3308105 2153.0009766,35.543457 2152.7133789,33.5180664 C2152.480957,33.9274902 2152.2373047,34.3093262 2151.9829102,34.6635742 C2151.7614746,34.3425293 2151.4848633,33.9884033 2151.152832,33.6010742 C2152.4365234,31.7526855 2153.2944336,29.5004883 2153.7260742,26.8442383 Z M2143.034668,36.4233398 L2145.5581055,36.4233398 C2145.8015137,36.0026855 2146.0395508,35.5710449 2146.2719727,35.128418 L2147.4672852,35.5102539 C2147.2900391,35.8200684 2147.1130371,36.1245117 2146.9360352,36.4233398 L2151.003418,36.4233398 L2151.003418,37.5024414 C2150.5827637,38.5870361 2149.9462891,39.5388184 2149.0942383,40.3579102 C2149.7028809,40.6456299 2150.3227539,40.9333496 2150.9536133,41.2211914 L2150.2231445,42.3666992 C2149.5368652,41.979248 2148.822998,41.5919189 2148.081543,41.2045898 C2146.8308105,42.1009521 2145.2536621,42.8093262 2143.3500977,43.3295898 C2143.1728516,42.9753418 2142.9848633,42.5880127 2142.7856445,42.1674805 C2144.4013672,41.8022461 2145.7683105,41.2764893 2146.8862305,40.590332 C2145.9343262,40.1032715 2144.9382324,39.6052246 2143.8979492,39.0961914 C2144.2519531,38.5870361 2144.5952148,38.0612793 2144.9272461,37.519043 L2143.034668,37.519043 Z M2143.2172852,30.7124023 L2147.0356445,30.7124023 L2147.0356445,26.9936523 L2148.2641602,26.9936523 L2148.2641602,30.7124023 L2151.4516602,30.7124023 L2151.4516602,31.8081055 L2148.2641602,31.8081055 L2148.2641602,32.8208008 L2148.762207,32.2563477 C2149.7915039,33.0089111 2150.6547852,33.6729736 2151.3520508,34.2485352 L2150.5551758,35.1782227 C2149.9462891,34.6026611 2149.1826172,33.9552002 2148.2641602,33.2358398 L2148.2641602,35.128418 L2147.0356445,35.128418 L2147.0356445,32.8041992 C2146.0283203,33.8555908 2144.8552246,34.7797852 2143.5161133,35.5766602 C2143.3056641,35.2556152 2143.0678711,34.9180908 2142.8022461,34.5639648 C2144.1967773,33.8112793 2145.4750977,32.8927002 2146.637207,31.8081055 L2143.2172852,31.8081055 Z M2156.9467773,31.1772461 L2153.8422852,31.1772461 C2153.7868652,31.3210449 2153.7260742,31.4594727 2153.659668,31.5922852 C2153.8588867,33.9385986 2154.4121094,35.9473877 2155.3198242,37.6186523 C2156.2050781,36.0026855 2156.7475586,33.8555908 2156.9467773,31.1772461 Z M2145.5249023,38.7143555 C2146.3105469,39.0684814 2147.1186523,39.439209 2147.9487305,39.8266602 C2148.7124023,39.173584 2149.3100586,38.4044189 2149.7416992,37.519043 L2146.2885742,37.519043 C2146.0339355,37.9284668 2145.7792969,38.3269043 2145.5249023,38.7143555 Z M2150.7045898,27.4086914 L2151.7338867,28.0893555 C2151.125,28.8862305 2150.5163574,29.6221924 2149.9077148,30.2973633 C2149.6530762,30.0759277 2149.354248,29.8435059 2149.0112305,29.6000977 C2149.5866699,28.9249268 2150.151123,28.194458 2150.7045898,27.4086914 Z M2143.6489258,28.1391602 L2144.5952148,27.4916992 C2145.0932617,28.1003418 2145.6079102,28.753418 2146.1391602,29.4506836 L2145.1098633,30.1811523 C2144.6228027,29.4616699 2144.1357422,28.7810059 2143.6489258,28.1391602 Z M2160.4414063,41.9848633 C2164.5253906,41.2211914 2167.1538086,40.0091553 2168.3271484,38.3491211 L2160.7070313,38.3491211 L2160.7070313,37.1206055 L2168.9414063,37.1206055 C2169.317627,35.9694824 2169.4892578,33.9606934 2169.4560547,31.0942383 L2170.8505859,31.0942383 C2170.8505859,33.9385986 2170.6955566,35.9473877 2170.3857422,37.1206055 L2176.6777344,37.1206055 L2176.6777344,38.3491211 L2169.9208984,38.3491211 C2169.8322754,38.526123 2169.7270508,38.7143555 2169.6054688,38.9135742 C2171.973877,39.909668 2174.2924805,40.9389648 2176.5615234,42.0014648 L2175.8310547,43.2631836 C2173.4624023,42.0567627 2171.121582,40.9333496 2168.8085938,39.8930664 C2167.3032227,41.3649902 2164.7797852,42.4995117 2161.2382813,43.2963867 C2160.9836426,42.8093262 2160.7180176,42.3721924 2160.4414063,41.9848633 Z M2161.0224609,29.1850586 L2168.6259766,29.1850586 C2168.3491211,28.6870117 2167.9782715,28.105957 2167.5136719,27.4418945 L2168.7255859,26.7612305 C2169.0908203,27.2481689 2169.5334473,27.8901367 2170.0537109,28.6870117 L2169.140625,29.1850586 L2176.2460938,29.1850586 L2176.2460938,32.1567383 L2174.9179688,32.1567383 L2174.9179688,30.4135742 L2162.3505859,30.4135742 L2162.3505859,32.1567383 L2161.0224609,32.1567383 Z M2163.0644531,33.6674805 C2164.3371582,34.2429199 2165.5324707,34.8461914 2166.6503906,35.4770508 L2165.9365234,36.6225586 C2164.8295898,35.9473877 2163.6621094,35.3165283 2162.4335938,34.7299805 Z M2164.5585938,31.1274414 C2165.8422852,31.7471924 2167.0100098,32.3725586 2168.0615234,33.003418 L2167.3144531,34.1323242 C2166.2851563,33.4682617 2165.1506348,32.7930908 2163.9111328,32.1069336 Z M2183.9741211,36.0415039 L2184.6381836,35.1118164 C2185.1416016,35.454834 2185.6867676,35.8560791 2186.2734375,36.3154297 C2186.6994629,35.1809082 2186.9956055,33.949707 2187.1616211,32.621582 L2184.8291016,32.621582 C2184.2036133,34.6469727 2183.4316406,36.2739258 2182.5131836,37.5024414 C2182.2807617,37.1481934 2182.0151367,36.8051758 2181.7163086,36.4731445 C2182.9667969,34.6745605 2183.8937988,32.1567383 2184.4970703,28.9194336 L2182.6958008,28.9194336 L2182.6958008,27.7573242 L2189.1206055,27.7573242 L2189.1206055,28.9194336 L2185.7338867,28.9194336 C2185.5622559,29.8269043 2185.3713379,30.6791992 2185.1611328,31.4760742 L2188.3901367,31.4760742 L2188.3901367,32.621582 C2187.9362793,36.9821777 2186.1599121,40.4796143 2183.0610352,43.1137695 C2182.8173828,42.7817383 2182.5131836,42.4219971 2182.1479492,42.034668 C2183.7138672,40.7729492 2184.9257813,39.2510986 2185.7836914,37.4692383 C2185.2358398,37.0209961 2184.6325684,36.5450439 2183.9741211,36.0415039 Z M2177.8813477,34.8461914 C2179.3088379,32.4223633 2180.3659668,29.7384033 2181.0522461,26.7944336 L2182.2807617,27.0268555 C2181.9873047,28.2663574 2181.6166992,29.4893799 2181.168457,30.6958008 L2181.168457,43.0805664 L2180.0395508,43.0805664 L2180.0395508,33.3686523 C2179.5524902,34.3813477 2179.0102539,35.3829346 2178.4125977,36.3735352 C2178.2797852,35.9307861 2178.1025391,35.4216309 2177.8813477,34.8461914 Z M2192.4575195,26.8442383 L2193.6694336,26.8442383 L2193.6694336,40.706543 C2193.6694336,41.5476074 2193.5366211,42.1231689 2193.2709961,42.4331055 C2193.0385742,42.7208252 2192.5737305,42.8702393 2191.8764648,42.8813477 C2191.4003906,42.892334 2190.6313477,42.8812256 2189.5688477,42.8481445 C2189.5244141,42.3942871 2189.4470215,41.9350586 2189.3364258,41.4702148 C2190.1884766,41.5587158 2190.8857422,41.6030273 2191.4282227,41.6030273 C2191.8598633,41.6140137 2192.1364746,41.5366211 2192.2583008,41.3706055 C2192.3911133,41.2266846 2192.4575195,40.8724365 2192.4575195,40.3081055 Z M2190.6977539,39.1958008 L2189.519043,39.1958008 L2189.519043,29.4506836 L2190.6977539,29.4506836 Z M2200.0527344,37.0708008 C2201.5024414,36.3956299 2202.8581543,35.6181641 2204.1201172,34.7382813 L2204.1201172,27.1264648 L2205.5478516,27.1264648 L2205.5478516,33.6674805 C2207.2412109,32.3005371 2208.7463379,30.7233887 2210.0634766,28.9360352 L2211.2753906,29.815918 C2209.6650391,31.9575195 2207.7558594,33.8306885 2205.5478516,35.4355469 L2205.5478516,40.1254883 C2205.5478516,40.8780518 2205.9462891,41.2543945 2206.7431641,41.2543945 L2208.8515625,41.2543945 C2209.6040039,41.2543945 2210.0412598,40.8946533 2210.1630859,40.175293 C2210.3178711,39.4226074 2210.4174805,38.553833 2210.4619141,37.5688477 C2210.9267578,37.7458496 2211.4135742,37.9063721 2211.9228516,38.050293 C2211.8342285,38.9799805 2211.7180176,39.8321533 2211.5742188,40.6069336 C2211.3637695,41.8796387 2210.5668945,42.5161133 2209.1835938,42.5161133 L2206.3779297,42.5161133 C2204.8725586,42.5161133 2204.1201172,41.7745361 2204.1201172,40.2915039 L2204.1201172,36.4067383 C2203.0852051,37.0708008 2201.9951172,37.6794434 2200.8496094,38.2329102 C2200.6171875,37.8676758 2200.3515625,37.4802246 2200.0527344,37.0708008 Z M2195.3876953,35.0288086 C2197.3134766,32.472168 2198.7299805,29.7550049 2199.6376953,26.8774414 L2201.0820313,27.2924805 C2200.5561523,28.6647949 2199.9863281,29.9570313 2199.3720703,31.1689453 L2199.3720703,43.0473633 L2197.9775391,43.0473633 L2197.9775391,33.6674805 C2197.3632813,34.6635742 2196.7102051,35.5987549 2196.0185547,36.4731445 C2195.8303223,35.9971924 2195.6201172,35.5157471 2195.3876953,35.0288086 Z M2214.5043945,31.1274414 C2215.4616699,32.5108643 2216.3886719,33.861084 2217.2851563,35.1782227 C2217.9436035,33.5567627 2218.3613281,31.8024902 2218.5385742,29.9155273 L2213.3256836,29.9155273 L2213.3256836,28.6538086 L2219.8999023,28.6538086 L2219.8999023,29.8657227 C2219.595459,32.267334 2219.0061035,34.4504395 2218.1318359,36.4150391 C2219.0336914,37.7375488 2219.9052734,39.0241699 2220.746582,40.2749023 L2219.5512695,41.0717773 C2218.859375,39.9815674 2218.1594238,38.8886719 2217.4511719,37.7929688 C2216.4660645,39.5969238 2215.2126465,41.1934814 2213.690918,42.5825195 C2213.4694824,42.2393799 2213.1982422,41.8354492 2212.8774414,41.3706055 C2214.4599609,39.9483643 2215.7163086,38.3435059 2216.6459961,36.5561523 C2215.6166992,34.9790039 2214.5705566,33.3962402 2213.5083008,31.8081055 Z M2220.5639648,30.4633789 L2226.0922852,30.4633789 L2226.0922852,26.9106445 L2227.4370117,26.9106445 L2227.4370117,30.4633789 L2229.4624023,30.4633789 L2229.4624023,31.7250977 L2227.4370117,31.7250977 L2227.4370117,40.4243164 C2227.4370117,42.0290527 2226.6455078,42.831543 2225.0629883,42.831543 C2224.5649414,42.831543 2223.7458496,42.8259277 2222.605957,42.8149414 C2222.5505371,42.4053955 2222.4619141,41.9073486 2222.340332,41.3208008 C2223.4360352,41.4093018 2224.2714844,41.4534912 2224.847168,41.4536133 C2225.6772461,41.4534912 2226.0922852,41.032959 2226.0922852,40.1918945 L2226.0922852,31.7250977 L2220.5639648,31.7250977 Z M2220.862793,33.800293 L2221.9418945,33.152832 C2222.8383789,34.4698486 2223.6296387,35.7481689 2224.315918,36.987793 L2223.0708008,37.7016602 C2222.4177246,36.4509277 2221.6816406,35.1505127 2220.862793,33.800293 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip9)\" />\n<clipPath id=\"clip10\"><path d=\"M1736,22 L2233,22 L2233,73 L1736,73 L1736,22 Z\" /></clipPath>\n<path d=\"M1753.3972168,59.0581055 L1754.0612793,60.1704102 C1753.0817871,60.5134277 1752.060791,60.8676758 1750.998291,61.2329102 C1751.883667,63.2194824 1753.3970947,64.5587158 1755.5388184,65.2504883 C1755.1734619,65.7042236 1754.8746338,66.0749512 1754.642334,66.362793 C1752.5836182,65.4884033 1751.0175781,63.8974609 1749.9440918,61.5898438 C1749.6396484,61.6894531 1749.3353271,61.791748 1749.0310059,61.8969727 C1749.2302246,62.5333252 1749.329834,63.2583008 1749.329834,64.0717773 C1749.329834,66.0528564 1748.3835449,67.043335 1746.4909668,67.043457 C1745.8046875,67.043335 1745.0742188,67.0323486 1744.2995605,67.0102539 C1744.255249,66.7335205 1744.1611328,66.307373 1744.017334,65.7319336 C1744.8251953,65.8204346 1745.5722656,65.8647461 1746.2585449,65.8647461 C1747.5091553,65.8647461 1748.1345215,65.2393799 1748.1345215,63.9887695 C1748.1345215,63.501709 1748.0930176,63.0645752 1748.0100098,62.6772461 C1746.3608398,64.2875977 1743.574585,65.6599121 1739.651123,66.7944336 C1739.4519043,66.4624023 1739.2304688,66.0749512 1738.9870605,65.6323242 C1742.7998047,64.6638184 1745.6774902,63.3218994 1747.619873,61.6064453 C1747.4814453,61.3463135 1747.3071289,61.0834961 1747.0969238,60.8178711 C1745.5639648,62.1791992 1743.1595459,63.3468018 1739.8835449,64.3208008 C1739.7064209,63.9997559 1739.4794922,63.6235352 1739.2028809,63.1918945 C1742.3902588,62.3562012 1744.7947998,61.3103027 1746.4162598,60.0541992 C1746.2225342,59.8549805 1746.0093994,59.6557617 1745.7770996,59.456543 C1744.4267578,60.3862305 1742.3847656,61.1885986 1739.651123,61.8637695 C1739.5072021,61.553833 1739.2913818,61.1608887 1739.0036621,60.6850586 C1742.1080322,60.1040039 1744.2469482,59.3292236 1745.420166,58.3608398 L1741.892334,58.3608398 L1741.892334,58.8754883 L1740.7468262,58.8754883 L1740.7468262,55.6713867 C1740.3649902,55.9313965 1739.9665527,56.1915283 1739.5515137,56.4516602 C1739.4075928,56.0864258 1739.2194824,55.7211914 1738.9870605,55.355957 C1741.3001709,54.0499268 1743.1152344,52.5059814 1744.432373,50.7241211 L1745.9265137,50.9067383 C1745.6331787,51.3327637 1745.2900391,51.7589111 1744.8972168,52.1850586 L1751.7370605,52.1850586 L1751.7370605,53.1645508 L1750.1184082,54.6254883 L1754.2272949,54.6254883 L1754.2272949,58.7426758 L1753.0817871,58.7426758 L1753.0817871,58.3608398 L1747.0056152,58.3608398 C1746.8837891,58.5102539 1746.7454834,58.6568604 1746.5905762,58.8007813 C1747.4925537,59.4869385 1748.164917,60.2062988 1748.607666,60.9589844 C1750.3950195,60.3834229 1751.9915771,59.7497559 1753.3972168,59.0581055 Z M1750.010498,53.2143555 L1743.8762207,53.2143555 C1743.3725586,53.6791992 1742.8109131,54.1495361 1742.1911621,54.6254883 L1748.5412598,54.6254883 Z M1753.0817871,55.7045898 L1748.2507324,55.7045898 C1748.1068115,56.2966309 1747.9241943,56.8223877 1747.7028809,57.2817383 L1753.0817871,57.2817383 Z M1741.892334,57.2817383 L1746.3415527,57.2817383 C1746.6126709,56.8334961 1746.822876,56.3077393 1746.9724121,55.7045898 L1741.892334,55.7045898 Z M1757.1740723,52.3676758 L1762.9016113,52.3676758 L1762.9016113,65.8979492 L1761.5900879,65.8979492 L1761.5900879,64.5200195 L1758.4855957,64.5200195 L1758.4855957,66.097168 L1757.1740723,66.097168 Z M1763.4494629,54.4594727 L1769.3430176,54.4594727 L1769.3430176,50.7905273 L1770.6711426,50.7905273 L1770.6711426,54.4594727 L1773.0285645,54.4594727 L1773.0285645,55.6879883 L1770.6711426,55.6879883 L1770.6711426,64.6196289 C1770.6711426,66.1026611 1769.9627686,66.8441162 1768.5461426,66.8442383 C1767.9041748,66.8441162 1766.9633789,66.8275146 1765.723877,66.7944336 C1765.668457,66.3959961 1765.5799561,65.9310303 1765.458252,65.3999023 C1766.6203613,65.4884033 1767.527832,65.5327148 1768.1809082,65.5327148 C1768.9555664,65.5327148 1769.3430176,65.1397705 1769.3430176,64.3540039 L1769.3430176,55.6879883 L1763.4494629,55.6879883 Z M1758.4855957,63.2915039 L1761.5900879,63.2915039 L1761.5900879,58.9916992 L1758.4855957,58.9916992 Z M1761.5900879,53.5961914 L1758.4855957,53.5961914 L1758.4855957,57.7963867 L1761.5900879,57.7963867 Z M1765.3088379,57.2817383 C1766.1942139,58.897583 1766.8637695,60.1870117 1767.317627,61.1499023 C1767.0297852,61.2827148 1766.5871582,61.5040283 1765.989502,61.8139648 C1765.5578613,60.7624512 1764.9379883,59.4509277 1764.130127,57.8793945 Z M1780.291748,61.0668945 L1784.6247559,61.0668945 C1784.6855469,60.4858398 1784.71875,59.7497559 1784.7243652,58.8588867 L1782.5910645,58.8588867 C1782.253418,59.5782471 1781.8964844,60.225708 1781.5202637,60.8012695 C1781.177124,60.579834 1780.8063965,60.3530273 1780.407959,60.1206055 C1781.2601318,58.9473877 1781.8964844,57.6137695 1782.3171387,56.1196289 L1783.5622559,56.3852539 C1783.4072266,56.8444824 1783.2495117,57.2817383 1783.0891113,57.6967773 L1789.6716309,57.6967773 L1789.6716309,58.8588867 L1786.0026855,58.8588867 C1785.9915771,59.722168 1785.9611816,60.4581299 1785.911377,61.0668945 L1790.501709,61.0668945 L1790.501709,62.2290039 L1786.060791,62.2290039 C1787.0734863,64.2432861 1788.6312256,65.4219971 1790.7341309,65.7651367 C1790.4241943,66.2299805 1790.119873,66.6782227 1789.8210449,67.1098633 C1787.8398438,66.5397949 1786.3457031,65.2393799 1785.338623,63.2084961 C1784.657959,64.9073486 1782.8759766,66.2631836 1779.9929199,67.2758789 C1779.7493896,66.8884277 1779.4671631,66.4788818 1779.1462402,66.0473633 C1782.0736084,65.272583 1783.8278809,63.9997559 1784.4089355,62.2290039 L1780.291748,62.2290039 Z M1773.8669434,58.7260742 C1775.3499756,56.2026367 1776.3515625,53.5629883 1776.8718262,50.8071289 L1778.1169434,51.0395508 C1777.8291016,52.2790527 1777.4915771,53.4522705 1777.104248,54.559082 L1777.104248,67.1762695 L1775.9089355,67.1762695 L1775.9089355,57.4726563 C1775.4606934,58.4023438 1774.9681396,59.2794189 1774.4313965,60.1040039 C1774.2653809,59.6723633 1774.0771484,59.2130127 1773.8669434,58.7260742 Z M1780.3249512,54.824707 L1786.9904785,54.824707 L1787.2478027,52.6831055 L1781.2878418,52.6831055 L1781.2878418,51.5541992 L1788.6589355,51.5541992 L1788.2687988,54.824707 L1790.3688965,54.824707 L1790.3688965,55.9868164 L1780.3249512,55.9868164 Z M1778.4489746,53.1811523 L1779.6774902,53.1811523 L1779.6774902,63.5737305 L1778.4489746,63.5737305 Z M1799.7570801,55.5385742 L1801.4919434,55.5385742 C1801.5085449,54.6586914 1801.527832,53.0870361 1801.5500488,50.8237305 L1802.7619629,50.8237305 C1802.7397461,52.9155273 1802.7148438,54.4870605 1802.6872559,55.5385742 L1807.5432129,55.5385742 L1807.5432129,56.7504883 L1804.5881348,56.7504883 L1804.5881348,64.7026367 C1804.5881348,65.2227783 1804.7928467,65.4829102 1805.2023926,65.4829102 L1805.7502441,65.4829102 C1806.2260742,65.4829102 1806.5083008,65.1563721 1806.5969238,64.503418 C1806.7075195,63.8393555 1806.7794189,62.9926758 1806.8127441,61.9633789 C1807.5985107,62.2731934 1808.0135498,62.439209 1808.0578613,62.4614258 C1807.9581299,63.4464111 1807.8641357,64.2598877 1807.7756348,64.9018555 C1807.6096191,66.0860596 1806.9897461,66.6782227 1805.9162598,66.6782227 L1804.8039551,66.6782227 C1803.8520508,66.6782227 1803.3762207,66.0970459 1803.3762207,64.9350586 L1803.3762207,56.7504883 L1802.6374512,56.7504883 C1802.5654297,61.1333008 1801.3120117,64.6306152 1798.8771973,67.2426758 C1798.5893555,66.9327393 1798.2739258,66.6118164 1797.9309082,66.2797852 C1800.2219238,63.8448486 1801.392334,60.668457 1801.4421387,56.7504883 L1799.7570801,56.7504883 Z M1792.7346191,55.6381836 L1799.3088379,55.6381836 L1799.3088379,60.6352539 L1798.1467285,60.6352539 L1798.1467285,60.2368164 L1796.6027832,60.2368164 L1796.6027832,65.1508789 C1796.6027832,66.2796631 1796.0383301,66.8441162 1794.9094238,66.8442383 C1794.411377,66.8441162 1793.9243164,66.8331299 1793.4484863,66.8110352 C1793.4041748,66.3793945 1793.3156738,65.9532471 1793.1828613,65.5327148 C1793.6809082,65.6101074 1794.1899414,65.6489258 1794.7102051,65.6489258 C1795.1971436,65.6489258 1795.4406738,65.3997803 1795.4406738,64.9018555 L1795.4406738,60.2368164 L1793.8967285,60.2368164 L1793.8967285,60.6352539 L1792.7346191,60.6352539 Z M1791.7385254,53.0317383 L1795.8391113,53.0317383 C1795.5512695,52.4450684 1795.2026367,51.8364258 1794.7932129,51.2055664 L1795.9055176,50.6743164 C1796.3149414,51.282959 1796.6746826,51.8972168 1796.9846191,52.5170898 L1795.9221191,53.0317383 L1800.2385254,53.0317383 L1800.2385254,54.1606445 L1791.7385254,54.1606445 Z M1798.1467285,56.7338867 L1793.8967285,56.7338867 L1793.8967285,59.1411133 L1798.1467285,59.1411133 Z M1793.4318848,61.2163086 L1794.5109863,61.6479492 C1793.9686279,63.0424805 1793.348877,64.2819824 1792.6516113,65.3666992 C1792.3748779,65.1674805 1792.0206299,64.9737549 1791.5891113,64.7856445 C1792.3084717,63.7009277 1792.9227295,62.5112305 1793.4318848,61.2163086 Z M1803.6584473,52.5004883 L1804.4387207,51.637207 C1805.3129883,52.256958 1806.159668,52.9044189 1806.9787598,53.5795898 L1806.1154785,54.5424805 C1805.6063232,54.0554199 1804.7873535,53.3747559 1803.6584473,52.5004883 Z M1797.1340332,61.581543 L1798.0803223,60.9838867 C1798.7111816,61.8028564 1799.2368164,62.5554199 1799.6574707,63.2416992 L1798.6281738,63.9389648 C1798.2186279,63.1862793 1797.7205811,62.4005127 1797.1340332,61.581543 Z M1819.7868652,62.3452148 C1821.3916016,63.7729492 1822.7751465,65.1120605 1823.9372559,66.362793 L1822.8581543,67.3256836 C1822.5039063,66.9161377 1822.0943604,66.4624023 1821.6296387,65.9643555 C1818.8737793,66.1303711 1816.0570068,66.3184814 1813.1794434,66.5288086 C1812.7145996,66.572998 1812.2441406,66.6947021 1811.7683105,66.894043 L1811.0212402,65.5161133 C1811.5634766,65.3168945 1812.0228271,65.0511475 1812.3991699,64.7192383 C1813.3620605,63.7784424 1814.291748,62.6772461 1815.1882324,61.4155273 L1809.6599121,61.4155273 L1809.6599121,60.1870117 L1824.9001465,60.1870117 L1824.9001465,61.4155273 L1816.8649902,61.4155273 C1815.736084,62.8432617 1814.6347656,64.1104736 1813.5612793,65.2172852 C1816.0072021,65.095459 1818.3425293,64.979248 1820.5671387,64.8686523 C1820.0579834,64.3483887 1819.4990234,63.7839355 1818.8903809,63.175293 Z M1817.2800293,52.3178711 C1815.0664063,54.9298096 1812.581665,57.0327148 1809.8259277,58.6264648 C1809.5603027,58.2280273 1809.2558594,57.8239746 1808.9128418,57.4145508 C1812.0892334,55.7875977 1814.6624756,53.6403809 1816.6325684,50.9731445 L1818.4089355,50.9731445 L1818.0935059,51.3881836 C1820.0081787,53.9448242 1822.5371094,55.8208008 1825.6804199,57.0161133 C1825.3483887,57.4587402 1825.0384521,57.9291992 1824.7507324,58.4272461 C1821.5410156,56.8666992 1819.0507813,54.8302002 1817.2800293,52.3178711 Z M1812.6647949,56.7670898 L1821.8288574,56.7670898 L1821.8288574,57.9956055 L1812.6647949,57.9956055 Z M1833.192627,52.9487305 L1833.192627,59.7719727 C1833.192627,63.0147705 1832.3127441,65.4772949 1830.5529785,67.159668 C1830.2762451,66.7612305 1829.9885254,66.4069824 1829.6896973,66.097168 C1831.217041,64.6362305 1831.9807129,62.5720215 1831.9807129,59.9047852 L1831.9807129,51.8198242 L1842.2072754,51.8198242 L1842.2072754,65.1010742 C1842.2072754,66.3294678 1841.6428223,66.9437256 1840.513916,66.9438477 C1839.8608398,66.9437256 1838.9864502,66.927124 1837.8908691,66.894043 C1837.8354492,66.4844971 1837.7524414,66.0583496 1837.6418457,65.6157227 C1838.8149414,65.6931152 1839.6561279,65.7319336 1840.1652832,65.7319336 C1840.7186279,65.7319336 1840.9953613,65.4385986 1840.9953613,64.8520508 L1840.9953613,52.9487305 Z M1834.4709473,59.9213867 L1839.5510254,59.9213867 L1839.5510254,64.1547852 L1835.6330566,64.1547852 L1835.6330566,64.918457 L1834.4709473,64.918457 Z M1833.7072754,57.5141602 L1836.4963379,57.5141602 L1836.4963379,55.9868164 L1834.1721191,55.9868164 L1834.1721191,54.9243164 L1836.4963379,54.9243164 L1836.4963379,53.347168 L1837.6916504,53.347168 L1837.6916504,54.9243164 L1839.982666,54.9243164 L1839.982666,55.9868164 L1837.6916504,55.9868164 L1837.6916504,57.5141602 L1840.4807129,57.5141602 L1840.4807129,58.5766602 L1833.7072754,58.5766602 Z M1831.4494629,61.0336914 C1831.4715576,61.5317383 1831.5102539,62.0131836 1831.5656738,62.4780273 C1830.4145508,63.3190918 1829.418457,64.1104736 1828.5773926,64.8520508 L1827.8137207,63.7729492 C1828.1789551,63.3745117 1828.3615723,62.8764648 1828.3615723,62.2788086 L1828.3615723,57.215332 L1826.552002,57.215332 L1826.552002,56.0532227 L1829.5734863,56.0532227 L1829.5734863,62.5112305 C1830.1600342,62.0795898 1830.7854004,61.5870361 1831.4494629,61.0336914 Z M1838.388916,60.9838867 L1835.6330566,60.9838867 L1835.6330566,63.0922852 L1838.388916,63.0922852 Z M1828.5773926,51.1225586 C1829.3188477,51.8530273 1830.1489258,52.7218018 1831.067627,53.7290039 L1829.9719238,54.6586914 C1829.1086426,53.5629883 1828.3282471,52.6499023 1827.6311035,51.9194336 Z M1851.9938965,66.8774414 L1851.9938965,61.5981445 L1847.1628418,61.5981445 C1846.9746094,63.9001465 1846.3050537,65.8093262 1845.1540527,67.3256836 C1844.8662109,66.9604492 1844.5397949,66.5786133 1844.1745605,66.1801758 C1844.8939209,65.1618652 1845.3808594,64.032959 1845.635498,62.793457 C1845.8789063,61.5981445 1846.0007324,59.9047852 1846.0007324,57.7133789 L1846.0007324,51.7866211 L1859.5310059,51.7866211 L1859.5310059,64.9848633 C1859.5308838,66.3018799 1858.9056396,66.9604492 1857.6550293,66.9604492 C1856.8913574,66.9604492 1856.0335693,66.9438477 1855.0817871,66.9106445 C1855.0263672,66.5454102 1854.9433594,66.0860596 1854.8327637,65.5327148 C1855.7956543,65.5991211 1856.5759277,65.6323242 1857.173584,65.6323242 C1857.8597412,65.6323242 1858.2028809,65.3057861 1858.2028809,64.652832 L1858.2028809,61.5981445 L1853.3220215,61.5981445 L1853.3220215,66.8774414 Z M1853.3220215,60.402832 L1858.2028809,60.402832 L1858.2028809,57.2983398 L1853.3220215,57.2983398 Z M1858.2028809,53.0151367 L1853.3220215,53.0151367 L1853.3220215,56.1030273 L1858.2028809,56.1030273 Z M1847.2541504,60.402832 L1851.9938965,60.402832 L1851.9938965,57.2983398 L1847.3288574,57.2983398 C1847.3619385,58.3718262 1847.3370361,59.4067383 1847.2541504,60.402832 Z M1847.3288574,53.0151367 L1847.3288574,56.1030273 L1851.9938965,56.1030273 L1851.9938965,53.0151367 Z M1866.6281738,62.5776367 C1868.6977539,61.526123 1870.4354248,60.2700195 1871.8410645,58.809082 C1870.5682373,58.9196777 1869.4227295,59.0358887 1868.404541,59.1577148 C1868.0170898,59.2019043 1867.6241455,59.2849121 1867.2258301,59.4067383 L1866.6115723,58.1948242 C1866.987793,57.9844971 1867.3475342,57.6856689 1867.6906738,57.2983398 C1868.3491211,56.5014648 1869.0380859,55.5606689 1869.7575684,54.4760742 L1866.5119629,54.4760742 L1866.5119629,53.2807617 L1872.0817871,53.2807617 C1871.605835,52.5612793 1871.1604004,51.9249268 1870.7453613,51.371582 L1871.8244629,50.690918 C1872.2449951,51.2110596 1872.7319336,51.8474121 1873.2854004,52.6000977 L1872.2644043,53.2807617 L1877.8010254,53.2807617 L1877.8010254,54.4760742 L1871.3347168,54.4760742 C1870.5212402,55.6381836 1869.6717529,56.7614746 1868.786377,57.8461914 C1869.9152832,57.7741699 1871.2958984,57.6801758 1872.9284668,57.5639648 C1873.5316162,56.7946777 1874.0545654,55.975708 1874.4973145,55.1069336 L1875.7092285,55.7543945 C1873.9272461,58.986084 1871.2156982,61.5981445 1867.5744629,63.590332 C1867.2645264,63.2471924 1866.9490967,62.909668 1866.6281738,62.5776367 Z M1866.6281738,66.1137695 C1870.4354248,64.5200195 1873.5510254,61.9301758 1875.9748535,58.3442383 L1877.1037598,59.1079102 C1876.1850586,60.4526367 1875.1723633,61.6645508 1874.0656738,62.7436523 C1875.3328857,63.7397461 1876.5723877,64.7468262 1877.7844238,65.7651367 L1876.7717285,66.8442383 C1875.7479248,65.8647461 1874.5443115,64.7800293 1873.1608887,63.590332 C1871.4730225,65.067749 1869.5887451,66.2741699 1867.5080566,67.2094727 C1867.2977295,66.9106445 1867.0043945,66.5454102 1866.6281738,66.1137695 Z M1866.4621582,62.8764648 C1866.5063477,63.385498 1866.5672607,63.8503418 1866.6447754,64.2709961 C1865.9584961,64.802124 1865.2723389,65.3500977 1864.5861816,65.9145508 C1864.3094482,66.157959 1864.0604248,66.4069824 1863.8391113,66.6616211 L1862.8928223,65.6157227 C1863.2358398,65.2614746 1863.4074707,64.741333 1863.4074707,64.0551758 L1863.4074707,57.5639648 L1861.5314941,57.5639648 L1861.5314941,56.3520508 L1864.7023926,56.3520508 L1864.7023926,64.3208008 C1865.2889404,63.8448486 1865.8754883,63.3634033 1866.4621582,62.8764648 Z M1863.2912598,51.1225586 C1864.2208252,52.0522461 1865.0233154,52.9044189 1865.6984863,53.6791992 L1864.6193848,54.6088867 C1863.8225098,53.6348877 1863.0588379,52.7495117 1862.3283691,51.9526367 Z M1879.3200684,53.6625977 L1887.2888184,53.6625977 C1886.7298584,52.6000977 1886.2926025,51.8253174 1885.9772949,51.3383789 L1887.2722168,50.7241211 C1887.5820313,51.1999512 1888.046875,51.9747314 1888.666748,53.0483398 L1887.454834,53.6625977 L1895.3239746,53.6625977 L1895.3239746,54.9243164 L1885.255127,54.9243164 C1885.2163086,55.9313965 1885.1748047,56.7891846 1885.1306152,57.4975586 L1893.1491699,57.4975586 C1893.0162354,59.8991699 1892.8724365,61.9854736 1892.7175293,63.7563477 C1892.5957031,65.7595215 1891.6218262,66.7612305 1889.7956543,66.7612305 C1888.9544678,66.7612305 1887.8310547,66.7169189 1886.4255371,66.628418 C1886.3701172,66.2077637 1886.2871094,65.6986084 1886.1765137,65.1010742 C1887.5820313,65.2891846 1888.7220459,65.3833008 1889.5964355,65.3833008 C1890.614624,65.3833008 1891.1845703,64.7800293 1891.3063965,63.5737305 C1891.439209,62.2565918 1891.5554199,60.6462402 1891.6550293,58.7426758 L1885.0393066,58.7426758 C1884.7293701,62.3950195 1883.0386963,65.2282715 1879.9675293,67.2426758 C1879.6687012,66.8884277 1879.3310547,66.512207 1878.954834,66.1137695 C1881.8765869,64.1879883 1883.442749,61.6091309 1883.6530762,58.3774414 C1883.7304688,57.5030518 1883.7941895,56.3520508 1883.8439941,54.9243164 L1879.3200684,54.9243164 Z M1909.2941895,61.3989258 C1910.3566895,62.8487549 1911.5021973,64.5144043 1912.7307129,66.3959961 C1912.2879639,66.6505127 1911.8563232,66.9050293 1911.435791,67.159668 C1911.1258545,66.6450195 1910.8215332,66.1469727 1910.5227051,65.6655273 C1906.8924561,65.9643555 1904.0479736,66.2133789 1901.989502,66.4125977 L1901.3752441,64.9682617 C1902.0725098,64.6583252 1902.7531738,64.0108643 1903.4172363,63.0258789 C1904.1477051,61.9854736 1904.8255615,60.8897705 1905.4509277,59.7387695 L1901.0930176,59.7387695 L1901.0930176,58.543457 L1906.3059082,58.543457 L1906.3059082,55.0239258 L1901.9064941,55.0239258 L1901.9064941,53.8286133 L1906.3059082,53.8286133 L1906.3059082,50.7905273 L1907.6340332,50.7905273 L1907.6340332,53.8286133 L1912.232666,53.8286133 L1912.232666,55.0239258 L1907.6340332,55.0239258 L1907.6340332,58.543457 L1913.0129395,58.543457 L1913.0129395,59.7387695 L1907.1193848,59.7387695 C1905.8852539,61.7696533 1904.6789551,63.5239258 1903.5002441,65.0014648 C1905.6086426,64.9018555 1907.717041,64.7524414 1909.8254395,64.5532227 C1909.2553711,63.6622314 1908.7131348,62.8432617 1908.1984863,62.0961914 Z M1899.0012207,60.0708008 C1899.4106445,60.2478027 1899.8479004,60.4304199 1900.3127441,60.6186523 C1899.5268555,62.9760742 1898.8406982,65.1065674 1898.2541504,67.0102539 L1896.826416,66.5288086 C1897.5568848,64.5808105 1898.2817383,62.4282227 1899.0012207,60.0708008 Z M1897.3742676,55.3061523 C1898.2043457,55.8927002 1899.1782227,56.6452637 1900.2961426,57.5639648 C1899.8865967,58.0288086 1899.5656738,58.3884277 1899.333252,58.6430664 C1898.0825195,57.5251465 1897.152832,56.7338867 1896.5441895,56.269043 Z M1898.0217285,51.0063477 C1898.9071045,51.7145996 1899.8588867,52.522583 1900.8771973,53.4301758 C1900.5008545,53.8175049 1900.1743164,54.1606445 1899.8977051,54.4594727 C1898.8793945,53.4522705 1897.9719238,52.6055908 1897.1750488,51.9194336 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip10)\" />\n<clipPath id=\"clip11\"><path d=\"M1716,158 L2230,158 L2230,202 L1716,202 L1716,158 Z\" /></clipPath>\n<path d=\"M1726,160 C1721.581665,160 1718,163.581665 1718,168 L1718,191 C1718,195.418335 1721.581665,199 1726,199 L2219,199 C2223.4182129,199 2227,195.418335 2227,191 L2227,168 C2227,163.581665 2223.4182129,160 2219,160 Z\" style=\"fill:rgb(211,223,255);stroke:none\" clip-path=\"url(#clip11)\" />\n<clipPath id=\"clip12\"><path d=\"M1716,158 L2230,158 L2230,202 L1716,202 L1716,158 Z\" /></clipPath>\n<path d=\"M1726,160 C1721.581665,160 1718,163.581665 1718,168 L1718,191 C1718,195.418335 1721.581665,199 1726,199 L2219,199 C2223.4182129,199 2227,195.418335 2227,191 L2227,168 C2227,163.581665 2223.4182129,160 2219,160 Z\" style=\"fill:none;stroke:rgb(0,64,128)\" clip-path=\"url(#clip12)\" />\n<clipPath id=\"clip13\"><path d=\"M1729,166 L2217,166 L2217,194 L1729,194 L1729,166 Z\" /></clipPath>\n<path d=\"M1731.9848633,183.1003418 C1732.803833,183.6923828 1733.6865234,183.9885254 1734.6328125,183.9885254 C1735.9000244,183.9885254 1736.5336914,183.5734863 1736.5336914,182.7434082 C1736.5336914,182.3891602 1736.3952637,182.09729 1736.1186523,181.8676758 C1735.8419189,181.6379395 1735.2801514,181.3654785 1734.4335938,181.0500488 C1733.4152832,180.6405029 1732.7540283,180.2351074 1732.449707,179.8339844 C1732.1452637,179.4327393 1731.993042,178.9471436 1731.9931641,178.3771973 C1731.993042,177.5637207 1732.3376465,176.9121094 1733.0266113,176.4223633 C1733.7155762,175.9326172 1734.5635986,175.6877441 1735.5708008,175.6877441 C1736.3510742,175.6877441 1737.0759277,175.8232422 1737.7456055,176.0944824 L1737.7456055,177.6633301 C1737.0593262,177.2205811 1736.2818604,176.9992676 1735.4130859,176.9992676 C1734.8928223,176.9992676 1734.4694824,177.1126709 1734.1430664,177.3395996 C1733.8165283,177.5664063 1733.6533203,177.8652344 1733.6533203,178.236084 C1733.6533203,178.6013184 1733.770874,178.8862305 1734.0061035,179.0910645 C1734.2412109,179.2957764 1734.7628174,179.5585938 1735.5708008,179.8796387 C1736.5944824,180.2614746 1737.2862549,180.6571045 1737.6459961,181.0666504 C1738.0056152,181.4760742 1738.1855469,181.9824219 1738.1855469,182.5856934 C1738.1855469,183.4267578 1737.8410645,184.0894775 1737.1520996,184.5737305 C1736.4631348,185.0578613 1735.5708008,185.3000488 1734.4750977,185.3000488 C1733.5231934,185.3000488 1732.6931152,185.1201172 1731.9848633,184.760498 Z M1745.0087891,184.9929199 C1744.654541,185.1865234 1744.1759033,185.2834473 1743.5727539,185.2834473 C1741.9291992,185.2834473 1741.1074219,184.3730469 1741.1074219,182.5524902 L1741.1074219,177.248291 L1739.5302734,177.248291 L1739.5302734,175.9035645 L1741.1074219,175.9035645 L1741.1074219,173.6955566 L1742.7260742,173.1809082 L1742.7260742,175.9035645 L1745.0087891,175.9035645 L1745.0087891,177.248291 L1742.7260742,177.248291 L1742.7260742,182.2619629 C1742.7260742,182.8651123 1742.8283691,183.2967529 1743.0332031,183.5568848 C1743.237915,183.8168945 1743.5782471,183.9470215 1744.0541992,183.9470215 C1744.4194336,183.9470215 1744.7375488,183.8446045 1745.0087891,183.6398926 Z M1747.3413086,176.5427246 C1748.2543945,175.9726563 1749.3085938,175.6877441 1750.5039063,175.6877441 C1752.7174072,175.6877441 1753.8242188,176.8498535 1753.8242188,179.1740723 L1753.8242188,185.0842285 L1752.2138672,185.0842285 L1752.2138672,183.6647949 L1752.1723633,183.6647949 C1751.5358887,184.7548828 1750.5979004,185.3000488 1749.3583984,185.3000488 C1748.4674072,185.3000488 1747.7590332,185.0592041 1747.2333984,184.5778809 C1746.7076416,184.0964355 1746.4448242,183.446167 1746.4448242,182.6271973 C1746.4448242,180.9116211 1747.4602051,179.9128418 1749.4912109,179.6306152 L1752.2138672,179.2487793 C1752.2138672,177.7490234 1751.5939941,176.9992676 1750.3544922,176.9992676 C1749.2531738,176.9992676 1748.2487793,177.3699951 1747.3413086,178.1115723 Z M1750.0639648,180.7678223 C1749.3112793,180.8674316 1748.7924805,181.055542 1748.5075684,181.3322754 C1748.2225342,181.6088867 1748.0800781,181.9963379 1748.0800781,182.4943848 C1748.0800781,182.9315186 1748.2349854,183.2884521 1748.5449219,183.5651855 C1748.8547363,183.8417969 1749.2642822,183.9802246 1749.7734375,183.9802246 C1750.4816895,183.9802246 1751.0655518,183.7312012 1751.5249023,183.2331543 C1751.9841309,182.7351074 1752.2138672,182.1097412 1752.2138672,181.3571777 L1752.2138672,180.4772949 Z M1761.2119141,184.9929199 C1760.857666,185.1865234 1760.3790283,185.2834473 1759.7758789,185.2834473 C1758.1323242,185.2834473 1757.3105469,184.3730469 1757.3105469,182.5524902 L1757.3105469,177.248291 L1755.7333984,177.248291 L1755.7333984,175.9035645 L1757.3105469,175.9035645 L1757.3105469,173.6955566 L1758.9291992,173.1809082 L1758.9291992,175.9035645 L1761.2119141,175.9035645 L1761.2119141,177.248291 L1758.9291992,177.248291 L1758.9291992,182.2619629 C1758.9291992,182.8651123 1759.0314941,183.2967529 1759.2363281,183.5568848 C1759.44104,183.8168945 1759.7813721,183.9470215 1760.2573242,183.9470215 C1760.6225586,183.9470215 1760.9406738,183.8446045 1761.2119141,183.6398926 Z M1770.8076172,180.9089355 L1764.3828125,180.9089355 C1764.4104004,181.8884277 1764.678833,182.6451416 1765.1879883,183.1791992 C1765.6970215,183.7131348 1766.4082031,183.9802246 1767.3212891,183.9802246 C1768.3505859,183.9802246 1769.2940674,183.6508789 1770.1518555,182.9924316 L1770.1518555,184.4450684 C1769.3438721,185.0150146 1768.2730713,185.3000488 1766.9394531,185.3000488 C1765.6113281,185.3000488 1764.5750732,184.8793945 1763.8308105,184.0383301 C1763.0864258,183.1971436 1762.7143555,182.029541 1762.7143555,180.5354004 C1762.7143555,179.1297607 1763.1224365,177.970459 1763.9387207,177.057373 C1764.7548828,176.1442871 1765.7689209,175.6877441 1766.980957,175.6877441 C1768.1817627,175.6877441 1769.119751,176.0737305 1769.7949219,176.8457031 C1770.4699707,177.6176758 1770.8076172,178.6981201 1770.8076172,180.0871582 Z M1769.1806641,179.6057129 C1769.1750488,178.7756348 1768.9786377,178.133667 1768.5913086,177.6799316 C1768.2038574,177.2260742 1767.6588135,176.9992676 1766.9560547,176.9992676 C1766.3085938,176.9992676 1765.7481689,177.2399902 1765.2751465,177.7214355 C1764.802002,178.2028809 1764.5045166,178.8309326 1764.3828125,179.6057129 Z M1785.1015625,185.0842285 L1785.1015625,176.567627 C1785.1015625,175.8647461 1785.1430664,175.020874 1785.2260742,174.0358887 L1785.1845703,174.0358887 C1785.0406494,174.6556396 1784.9133301,175.0872803 1784.8027344,175.3308105 L1780.5610352,185.0842285 L1779.6396484,185.0842285 L1775.40625,175.4055176 C1775.3066406,175.184082 1775.1793213,174.7275391 1775.0244141,174.0358887 L1774.9746094,174.0358887 C1775.0299072,174.6335449 1775.0576172,175.5023193 1775.0576172,176.642334 L1775.0576172,185.0842285 L1773.472168,185.0842285 L1773.472168,172.2263184 L1775.7216797,172.2263184 L1779.5151367,181.041748 C1779.8028564,181.7167969 1779.9937744,182.2425537 1780.0878906,182.6188965 L1780.1459961,182.6188965 C1780.4337158,181.8275146 1780.6357422,181.2907715 1780.7519531,181.0085449 L1784.6118164,172.2263184 L1786.753418,172.2263184 L1786.753418,185.0842285 Z M1790.1733398,172.6662598 C1790.1733398,172.378418 1790.2714844,172.1363525 1790.4680176,171.9399414 C1790.6644287,171.7434082 1790.9064941,171.6452637 1791.1943359,171.6452637 C1791.4875488,171.6452637 1791.7352295,171.7420654 1791.9372559,171.935791 C1792.1391602,172.1293945 1792.2402344,172.3729248 1792.2402344,172.6662598 C1792.2402344,172.9539795 1792.1391602,173.1933594 1791.9372559,173.3842773 C1791.7352295,173.5751953 1791.4875488,173.6706543 1791.1943359,173.6706543 C1790.901001,173.6706543 1790.6574707,173.5751953 1790.4638672,173.3842773 C1790.2701416,173.1933594 1790.1733398,172.9539795 1790.1733398,172.6662598 Z M1790.3642578,185.0842285 L1790.3642578,175.9035645 L1791.9912109,175.9035645 L1791.9912109,185.0842285 Z M1801.9770508,175.9035645 L1798.9057617,180.5270996 L1801.9355469,185.0842285 L1800.0429688,185.0842285 L1798.2915039,182.1623535 C1798.1973877,182.0073242 1798.0645752,181.7694092 1797.8930664,181.4484863 L1797.8598633,181.4484863 C1797.854248,181.4816895 1797.7159424,181.7196045 1797.4448242,182.1623535 L1795.6601563,185.0842285 L1793.7924805,185.0842285 L1796.9135742,180.5769043 L1793.9335938,175.9035645 L1795.8261719,175.9035645 L1797.5444336,178.9748535 C1797.6495361,179.1629639 1797.7768555,179.4064941 1797.9262695,179.7053223 L1797.9594727,179.7053223 L1800.1923828,175.9035645 Z M1803.7036133,172.6662598 C1803.7036133,172.378418 1803.8017578,172.1363525 1803.998291,171.9399414 C1804.1947021,171.7434082 1804.4367676,171.6452637 1804.7246094,171.6452637 C1805.0178223,171.6452637 1805.2655029,171.7420654 1805.4675293,171.935791 C1805.6694336,172.1293945 1805.7705078,172.3729248 1805.7705078,172.6662598 C1805.7705078,172.9539795 1805.6694336,173.1933594 1805.4675293,173.3842773 C1805.2655029,173.5751953 1805.0178223,173.6706543 1804.7246094,173.6706543 C1804.4312744,173.6706543 1804.1877441,173.5751953 1803.9941406,173.3842773 C1803.800415,173.1933594 1803.7036133,172.9539795 1803.7036133,172.6662598 Z M1803.8945313,185.0842285 L1803.8945313,175.9035645 L1805.5214844,175.9035645 L1805.5214844,185.0842285 Z M1816.3208008,185.0842285 L1814.7021484,185.0842285 L1814.7021484,179.8630371 C1814.7020264,177.9759521 1814.0130615,177.0324707 1812.6352539,177.0324707 C1811.9213867,177.0324707 1811.3347168,177.2980957 1810.8754883,177.8293457 C1810.4161377,178.3605957 1810.1865234,179.032959 1810.1865234,179.8464355 L1810.1865234,185.0842285 L1808.5595703,185.0842285 L1808.5595703,175.9035645 L1810.1865234,175.9035645 L1810.1865234,177.4226074 L1810.2197266,177.4226074 C1810.911377,176.2659912 1811.9157715,175.6877441 1813.2329102,175.6877441 C1814.2399902,175.6877441 1815.0064697,176.0100098 1815.5322266,176.6547852 C1816.0578613,177.2994385 1816.3208008,178.2387695 1816.3208008,179.4729004 Z M1818.8442383,175.2976074 L1825.078125,175.2976074 C1825.2385254,173.9417725 1825.3187256,172.4753418 1825.3188477,170.8981934 L1826.746582,170.8981934 C1826.746582,172.541748 1826.6690674,174.0081787 1826.5141602,175.2976074 L1833.5698242,175.2976074 C1833.503418,178.7175293 1833.4038086,181.5397949 1833.2709961,183.7644043 C1833.1602783,185.8339844 1832.0645752,186.8688965 1829.9838867,186.8688965 C1829.1206055,186.8688965 1828.0968018,186.8411865 1826.9125977,186.7858887 C1826.8682861,186.354248 1826.7852783,185.8395996 1826.6635742,185.2419434 C1827.7038574,185.3857422 1828.7276611,185.4577637 1829.7348633,185.4577637 C1831.0629883,185.4577637 1831.7602539,184.8046875 1831.8266602,183.4987793 C1831.9815674,181.3294678 1832.0811768,179.0273438 1832.1254883,176.5925293 L1826.331543,176.5925293 C1825.5180664,181.4733887 1823.2436523,185.1035156 1819.5083008,187.4831543 C1819.1983643,187.0957031 1818.8607178,186.6861572 1818.4956055,186.2546387 C1821.9376221,184.2236328 1824.0654297,181.0029297 1824.8789063,176.5925293 L1818.8442383,176.5925293 Z M1826.7299805,179.5808105 L1827.6430664,178.767334 C1828.7055664,179.7523193 1829.668457,180.7207031 1830.5317383,181.6726074 L1829.5024414,182.6022949 C1828.6501465,181.5950928 1827.7260742,180.5878906 1826.7299805,179.5808105 Z M1820.0229492,172.010498 L1820.9194336,171.1804199 C1821.8380127,171.9772949 1822.7233887,172.7962646 1823.5756836,173.6374512 L1822.5629883,174.5837402 C1821.7438965,173.6872559 1820.8972168,172.8294678 1820.0229492,172.010498 Z M1846.7514648,172.2263184 L1842.0283203,185.0842285 L1840.1855469,185.0842285 L1835.5537109,172.2263184 L1837.3964844,172.2263184 L1840.8579102,182.2785645 C1840.9741211,182.6105957 1841.0598145,182.9951172 1841.1152344,183.432373 L1841.1567383,183.432373 C1841.2009277,183.0505371 1841.2978516,182.6604004 1841.4472656,182.2619629 L1844.9750977,172.2263184 Z M1856.2807617,185.0842285 L1854.6455078,185.0842285 L1854.6455078,183.6398926 L1854.6123047,183.6398926 C1853.9980469,184.746582 1853.0544434,185.3000488 1851.7817383,185.3000488 C1849.6069336,185.3000488 1848.5195313,183.9995117 1848.5195313,181.3986816 L1848.5195313,175.9035645 L1850.1298828,175.9035645 L1850.1298828,181.157959 C1850.1298828,183.0228271 1850.84375,183.9553223 1852.2714844,183.9553223 C1852.9797363,183.9553223 1853.5524902,183.6938477 1853.9897461,183.1708984 C1854.4268799,182.6479492 1854.6453857,181.9880371 1854.6455078,181.1911621 L1854.6455078,175.9035645 L1856.2807617,175.9035645 Z M1866.972168,180.9089355 L1860.5473633,180.9089355 C1860.5749512,181.8884277 1860.8433838,182.6451416 1861.3525391,183.1791992 C1861.8615723,183.7131348 1862.5727539,183.9802246 1863.4858398,183.9802246 C1864.5151367,183.9802246 1865.4586182,183.6508789 1866.3164063,182.9924316 L1866.3164063,184.4450684 C1865.5084229,185.0150146 1864.4376221,185.3000488 1863.1040039,185.3000488 C1861.7758789,185.3000488 1860.739624,184.8793945 1859.9953613,184.0383301 C1859.2509766,183.1971436 1858.8789063,182.029541 1858.8789063,180.5354004 C1858.8789063,179.1297607 1859.2869873,177.970459 1860.1032715,177.057373 C1860.9194336,176.1442871 1861.9334717,175.6877441 1863.1455078,175.6877441 C1864.3463135,175.6877441 1865.2843018,176.0737305 1865.9594727,176.8457031 C1866.6345215,177.6176758 1866.972168,178.6981201 1866.972168,180.0871582 Z M1865.3452148,179.6057129 C1865.3395996,178.7756348 1865.1431885,178.133667 1864.7558594,177.6799316 C1864.3684082,177.2260742 1863.8233643,176.9992676 1863.1206055,176.9992676 C1862.4731445,176.9992676 1861.9127197,177.2399902 1861.4396973,177.7214355 C1860.9665527,178.2028809 1860.6690674,178.8309326 1860.5473633,179.6057129 Z M1876.2358398,183.7893066 L1876.2358398,189.3093262 L1874.6088867,189.3093262 L1874.6088867,175.9035645 L1876.2358398,175.9035645 L1876.2358398,177.4890137 L1876.269043,177.4890137 C1876.9884033,176.2880859 1878.0397949,175.6877441 1879.4233398,175.6877441 C1880.5964355,175.6877441 1881.5164795,176.0986328 1882.1833496,176.9204102 C1882.8500977,177.7421875 1883.1835938,178.8447266 1883.1835938,180.2282715 C1883.1835938,181.7556152 1882.8059082,182.982666 1882.0505371,183.909668 C1881.295166,184.8365479 1880.2783203,185.3000488 1879,185.3000488 C1877.8212891,185.3000488 1876.9108887,184.7963867 1876.269043,183.7893066 Z M1876.2275391,181.2990723 C1876.2275391,182.0461426 1876.4682617,182.6755371 1876.949707,183.1875 C1877.4311523,183.6993408 1878.0343018,183.9553223 1878.7592773,183.9553223 C1879.6224365,183.9553223 1880.2976074,183.623291 1880.784668,182.9592285 C1881.2716064,182.295166 1881.5151367,181.3764648 1881.5151367,180.2033691 C1881.5151367,179.2127686 1881.288208,178.4366455 1880.8344727,177.875 C1880.3806152,177.3132324 1879.7608643,177.0324707 1878.9750977,177.0324707 C1878.1726074,177.0324707 1877.5141602,177.3173828 1876.9995117,177.8874512 C1876.4848633,178.4573975 1876.2275391,179.1878662 1876.2275391,180.0788574 Z M1890.7124023,177.513916 C1890.4411621,177.3201904 1890.067627,177.2233887 1889.5917969,177.2233887 C1888.9609375,177.2233887 1888.4406738,177.5180664 1888.03125,178.1074219 C1887.6217041,178.6967773 1887.4169922,179.4729004 1887.4169922,180.435791 L1887.4169922,185.0842285 L1885.7900391,185.0842285 L1885.7900391,175.9035645 L1887.4169922,175.9035645 L1887.4169922,177.7712402 L1887.4501953,177.7712402 C1887.914917,176.4208984 1888.7174072,175.7458496 1889.8574219,175.7458496 C1890.2281494,175.7458496 1890.5131836,175.7873535 1890.7124023,175.8703613 Z M1891.8579102,180.5935059 C1891.8579102,179.0771484 1892.28125,177.8804932 1893.1279297,177.003418 C1893.9746094,176.1262207 1895.1228027,175.6877441 1896.5727539,175.6877441 C1897.9505615,175.6877441 1899.0311279,176.1096191 1899.814209,176.9536133 C1900.597168,177.7974854 1900.9887695,178.9637451 1900.9887695,180.4523926 C1900.9887695,181.9022217 1900.5709229,183.0726318 1899.7353516,183.963623 C1898.8996582,184.8544922 1897.7790527,185.3000488 1896.3735352,185.3000488 C1895.0010986,185.3000488 1893.9053955,184.8682861 1893.0864258,184.005127 C1892.267334,183.1418457 1891.8579102,182.0046387 1891.8579102,180.5935059 Z M1893.5180664,180.5437012 C1893.5180664,181.6005859 1893.7850342,182.4334717 1894.3190918,183.0422363 C1894.8530273,183.6508789 1895.5710449,183.9553223 1896.4731445,183.9553223 C1897.40271,183.9553223 1898.111084,183.6578369 1898.5981445,183.0629883 C1899.085083,182.4680176 1899.3286133,181.614502 1899.3286133,180.5021973 C1899.3286133,179.3842773 1899.085083,178.5266113 1898.5981445,177.9289551 C1898.111084,177.3312988 1897.40271,177.0324707 1896.4731445,177.0324707 C1895.5600586,177.0324707 1894.8392334,177.3450928 1894.310791,177.970459 C1893.7822266,178.5957031 1893.5180664,179.4534912 1893.5180664,180.5437012 Z M1908.0112305,184.9929199 C1907.6569824,185.1865234 1907.1783447,185.2834473 1906.5751953,185.2834473 C1904.9316406,185.2834473 1904.1098633,184.3730469 1904.1098633,182.5524902 L1904.1098633,177.248291 L1902.5327148,177.248291 L1902.5327148,175.9035645 L1904.1098633,175.9035645 L1904.1098633,173.6955566 L1905.7285156,173.1809082 L1905.7285156,175.9035645 L1908.0112305,175.9035645 L1908.0112305,177.248291 L1905.7285156,177.248291 L1905.7285156,182.2619629 C1905.7285156,182.8651123 1905.8308105,183.2967529 1906.0356445,183.5568848 C1906.2403564,183.8168945 1906.5806885,183.9470215 1907.0566406,183.9470215 C1907.421875,183.9470215 1907.7399902,183.8446045 1908.0112305,183.6398926 Z M1909.5136719,180.5935059 C1909.5136719,179.0771484 1909.9370117,177.8804932 1910.7836914,177.003418 C1911.6303711,176.1262207 1912.7785645,175.6877441 1914.2285156,175.6877441 C1915.6063232,175.6877441 1916.6868896,176.1096191 1917.4699707,176.9536133 C1918.2529297,177.7974854 1918.6445313,178.9637451 1918.6445313,180.4523926 C1918.6445313,181.9022217 1918.2266846,183.0726318 1917.3911133,183.963623 C1916.5554199,184.8544922 1915.4348145,185.3000488 1914.0292969,185.3000488 C1912.6568604,185.3000488 1911.5611572,184.8682861 1910.7421875,184.005127 C1909.9230957,183.1418457 1909.5136719,182.0046387 1909.5136719,180.5935059 Z M1911.1738281,180.5437012 C1911.1738281,181.6005859 1911.4407959,182.4334717 1911.9748535,183.0422363 C1912.5087891,183.6508789 1913.2268066,183.9553223 1914.1289063,183.9553223 C1915.0584717,183.9553223 1915.7668457,183.6578369 1916.2539063,183.0629883 C1916.7408447,182.4680176 1916.984375,181.614502 1916.984375,180.5021973 C1916.984375,179.3842773 1916.7408447,178.5266113 1916.2539063,177.9289551 C1915.7668457,177.3312988 1915.0584717,177.0324707 1914.1289063,177.0324707 C1913.2158203,177.0324707 1912.4949951,177.3450928 1911.9665527,177.970459 C1911.4379883,178.5957031 1911.1738281,179.4534912 1911.1738281,180.5437012 Z M1925.6669922,184.9929199 C1925.3127441,185.1865234 1924.8341064,185.2834473 1924.230957,185.2834473 C1922.5874023,185.2834473 1921.765625,184.3730469 1921.765625,182.5524902 L1921.765625,177.248291 L1920.1884766,177.248291 L1920.1884766,175.9035645 L1921.765625,175.9035645 L1921.765625,173.6955566 L1923.3842773,173.1809082 L1923.3842773,175.9035645 L1925.6669922,175.9035645 L1925.6669922,177.248291 L1923.3842773,177.248291 L1923.3842773,182.2619629 C1923.3842773,182.8651123 1923.4865723,183.2967529 1923.6914063,183.5568848 C1923.8961182,183.8168945 1924.2364502,183.9470215 1924.7124023,183.9470215 C1925.0776367,183.9470215 1925.395752,183.8446045 1925.6669922,183.6398926 Z M1935.2543945,175.9035645 L1931.0874023,186.470459 C1930.3126221,188.4293213 1929.2197266,189.4089355 1927.8085938,189.4089355 C1927.404541,189.4089355 1927.0587158,189.364624 1926.7709961,189.276123 L1926.7709961,187.8483887 C1927.0864258,187.9700928 1927.3907471,188.0310059 1927.684082,188.0310059 C1928.4200439,188.0310059 1928.9707031,187.5993652 1929.3359375,186.736084 L1930.0415039,185.067627 L1926.4389648,175.9035645 L1928.2402344,175.9035645 L1930.6391602,182.8015137 L1930.8383789,183.5568848 L1930.8798828,183.5568848 C1930.9130859,183.3852539 1930.9794922,183.1390381 1931.0791016,182.8181152 L1933.5859375,175.9035645 Z M1938.6826172,183.7893066 L1938.6826172,189.3093262 L1937.0556641,189.3093262 L1937.0556641,175.9035645 L1938.6826172,175.9035645 L1938.6826172,177.4890137 L1938.7158203,177.4890137 C1939.4351807,176.2880859 1940.4865723,175.6877441 1941.8701172,175.6877441 C1943.0432129,175.6877441 1943.9632568,176.0986328 1944.630127,176.9204102 C1945.296875,177.7421875 1945.6303711,178.8447266 1945.6303711,180.2282715 C1945.6303711,181.7556152 1945.2526855,182.982666 1944.4973145,183.909668 C1943.7419434,184.8365479 1942.7250977,185.3000488 1941.4467773,185.3000488 C1940.2680664,185.3000488 1939.357666,184.7963867 1938.7158203,183.7893066 Z M1938.6743164,181.2990723 C1938.6743164,182.0461426 1938.9150391,182.6755371 1939.3964844,183.1875 C1939.8779297,183.6993408 1940.4810791,183.9553223 1941.2060547,183.9553223 C1942.0692139,183.9553223 1942.7443848,183.623291 1943.2314453,182.9592285 C1943.7183838,182.295166 1943.9619141,181.3764648 1943.9619141,180.2033691 C1943.9619141,179.2127686 1943.7349854,178.4366455 1943.28125,177.875 C1942.8273926,177.3132324 1942.2076416,177.0324707 1941.421875,177.0324707 C1940.6193848,177.0324707 1939.9609375,177.3173828 1939.4462891,177.8874512 C1938.9316406,178.4573975 1938.6743164,179.1878662 1938.6743164,180.0788574 Z M1955.7158203,180.9089355 L1949.2910156,180.9089355 C1949.3186035,181.8884277 1949.5870361,182.6451416 1950.0961914,183.1791992 C1950.6052246,183.7131348 1951.3164063,183.9802246 1952.2294922,183.9802246 C1953.2587891,183.9802246 1954.2022705,183.6508789 1955.0600586,182.9924316 L1955.0600586,184.4450684 C1954.2520752,185.0150146 1953.1812744,185.3000488 1951.8476563,185.3000488 C1950.5195313,185.3000488 1949.4832764,184.8793945 1948.7390137,184.0383301 C1947.9946289,183.1971436 1947.6225586,182.029541 1947.6225586,180.5354004 C1947.6225586,179.1297607 1948.0306396,177.970459 1948.8469238,177.057373 C1949.6630859,176.1442871 1950.677124,175.6877441 1951.8891602,175.6877441 C1953.0899658,175.6877441 1954.0279541,176.0737305 1954.703125,176.8457031 C1955.3781738,177.6176758 1955.7158203,178.6981201 1955.7158203,180.0871582 Z M1954.0888672,179.6057129 C1954.083252,178.7756348 1953.8868408,178.133667 1953.4995117,177.6799316 C1953.1120605,177.2260742 1952.5670166,176.9992676 1951.8642578,176.9992676 C1951.2167969,176.9992676 1950.6563721,177.2399902 1950.1833496,177.7214355 C1949.7102051,178.2028809 1949.4127197,178.8309326 1949.2910156,179.6057129 Z M1960.6879883,180.4274902 C1962.657959,179.2874756 1964.0413818,178.0921631 1964.8383789,176.8415527 L1961.4350586,176.8415527 L1961.4350586,175.6794434 L1965.402832,175.6794434 C1965.7016602,174.9046631 1965.9174805,174.0579834 1966.050293,173.1394043 L1962.2983398,173.1394043 L1962.2983398,171.9772949 L1972.2592773,171.9772949 L1972.2592773,173.1394043 L1967.3452148,173.1394043 C1967.2178955,174.1022949 1967.0352783,174.9489746 1966.7973633,175.6794434 L1973.0561523,175.6794434 L1973.0561523,176.8415527 L1969.1049805,176.8415527 C1970.1950684,178.3743896 1971.6781006,179.4257813 1973.5541992,179.9958496 C1973.1778564,180.4163818 1972.8458252,180.8425293 1972.5581055,181.2741699 C1970.3776855,180.2116699 1968.7563477,178.7341309 1967.6938477,176.8415527 L1966.3242188,176.8415527 C1965.4719238,178.5404053 1963.8864746,180.0898438 1961.5678711,181.4899902 C1961.3354492,181.1800537 1961.0421143,180.8259277 1960.6879883,180.4274902 Z M1965.9672852,179.032959 L1967.2290039,179.032959 L1967.2290039,185.2419434 C1967.2290039,186.4703369 1966.581543,187.0847168 1965.2866211,187.0847168 C1964.6224365,187.0847168 1964.0247803,187.0791016 1963.4936523,187.0681152 C1963.427124,186.6585693 1963.338623,186.2103271 1963.2280273,185.7233887 C1963.7924805,185.8118896 1964.3513184,185.8562012 1964.9047852,185.8562012 C1965.6130371,185.8562012 1965.9672852,185.5185547 1965.9672852,184.8435059 Z M1958.9448242,180.2780762 C1959.3764648,180.4440918 1959.8190918,180.6044922 1960.2729492,180.7595215 C1959.7084961,183.105835 1959.204834,185.2419434 1958.762207,187.1677246 L1957.3344727,186.736084 C1957.9210205,184.8435059 1958.4577637,182.6907959 1958.9448242,180.2780762 Z M1969.8188477,181.157959 L1970.8647461,180.6599121 C1971.6837158,181.954834 1972.4307861,183.2773438 1973.105957,184.6276855 L1971.9604492,185.1921387 C1971.4180908,184.052124 1970.7042236,182.7073975 1969.8188477,181.157959 Z M1963.4770508,180.8259277 L1964.6391602,181.307373 C1964.0303955,182.8347168 1963.3718262,184.1794434 1962.6635742,185.3415527 C1962.276123,185.142334 1961.8833008,184.96521 1961.4848633,184.8103027 C1962.2927246,183.6038818 1962.9567871,182.2757568 1963.4770508,180.8259277 Z M1967.7104492,181.5231934 L1968.8061523,181.1247559 C1969.2930908,182.3642578 1969.7579346,183.7200928 1970.2006836,185.1921387 L1968.9555664,185.6071777 C1968.6013184,184.2126465 1968.1862793,182.8513184 1967.7104492,181.5231934 Z M1957.7661133,175.4802246 C1958.5628662,176.0335693 1959.5424805,176.7861328 1960.7045898,177.7380371 C1960.2950439,178.2028809 1959.9685059,178.5625 1959.7250977,178.8171387 C1958.5629883,177.7546387 1957.6331787,176.9577637 1956.9360352,176.4265137 Z M1958.4135742,171.1638184 C1959.3985596,171.9384766 1960.355957,172.74646 1961.2856445,173.5876465 C1960.9093018,173.9638672 1960.5772705,174.3015137 1960.2895508,174.6003418 C1959.2491455,173.5710449 1958.3415527,172.7298584 1957.5668945,172.0769043 Z M1983.9550781,173.1726074 L1990.2636719,173.1726074 L1990.2636719,186.8522949 L1988.9521484,186.8522949 L1988.9521484,185.1755371 L1985.2666016,185.1755371 L1985.2666016,186.8522949 L1983.9550781,186.8522949 Z M1974.8408203,173.986084 L1977.1567383,173.986084 C1977.1677246,173.0950928 1977.1705322,172.1044922 1977.1650391,171.0144043 L1978.4765625,171.0144043 C1978.4765625,172.1156006 1978.4709473,173.1062012 1978.4599609,173.986084 L1982.328125,173.986084 C1982.2727051,178.236084 1982.2008057,181.572998 1982.1123047,183.9968262 C1982.0679932,185.9888916 1981.3153076,186.9462891 1979.8544922,186.8688965 C1979.4228516,186.8688965 1978.786377,186.8522949 1977.9453125,186.8190918 C1977.8677979,186.354248 1977.7792969,185.8726807 1977.6796875,185.3747559 C1978.4543457,185.4743652 1979.0852051,185.5241699 1979.5722656,185.5241699 C1980.3137207,185.5462646 1980.7177734,185.0205078 1980.7841797,183.9470215 C1980.9058838,181.3239746 1980.9777832,178.4241943 1981,175.2478027 L1978.4433594,175.2478027 C1978.432251,176.0944824 1978.4156494,176.8138428 1978.3935547,177.4060059 C1978.3492432,181.7333984 1977.3088379,185.0648193 1975.2724609,187.4001465 C1974.9957275,187.0570068 1974.6691895,186.6862793 1974.2929688,186.2878418 C1976.130127,184.2734375 1977.0654297,181.2685547 1977.0986328,177.2731934 C1977.1207275,176.6921387 1977.1373291,176.0169678 1977.1484375,175.2478027 L1974.8408203,175.2478027 Z M1988.9521484,174.401123 L1985.2666016,174.401123 L1985.2666016,183.9802246 L1988.9521484,183.9802246 Z M1997.8505859,183.1003418 C1998.6695557,183.6923828 1999.5522461,183.9885254 2000.4985352,183.9885254 C2001.7657471,183.9885254 2002.3994141,183.5734863 2002.3994141,182.7434082 C2002.3994141,182.3891602 2002.2609863,182.09729 2001.984375,181.8676758 C2001.7076416,181.6379395 2001.145874,181.3654785 2000.2993164,181.0500488 C1999.2810059,180.6405029 1998.619751,180.2351074 1998.3154297,179.8339844 C1998.0109863,179.4327393 1997.8587646,178.9471436 1997.8588867,178.3771973 C1997.8587646,177.5637207 1998.2033691,176.9121094 1998.892334,176.4223633 C1999.5812988,175.9326172 2000.4293213,175.6877441 2001.4365234,175.6877441 C2002.2167969,175.6877441 2002.9416504,175.8232422 2003.6113281,176.0944824 L2003.6113281,177.6633301 C2002.9250488,177.2205811 2002.147583,176.9992676 2001.2788086,176.9992676 C2000.7585449,176.9992676 2000.3352051,177.1126709 2000.0087891,177.3395996 C1999.682251,177.5664063 1999.519043,177.8652344 1999.519043,178.236084 C1999.519043,178.6013184 1999.6365967,178.8862305 1999.8718262,179.0910645 C2000.1069336,179.2957764 2000.62854,179.5585938 2001.4365234,179.8796387 C2002.4602051,180.2614746 2003.1519775,180.6571045 2003.5117188,181.0666504 C2003.8713379,181.4760742 2004.0512695,181.9824219 2004.0512695,182.5856934 C2004.0512695,183.4267578 2003.7067871,184.0894775 2003.0178223,184.5737305 C2002.3288574,185.0578613 2001.4365234,185.3000488 2000.3408203,185.3000488 C1999.388916,185.3000488 1998.5588379,185.1201172 1997.8505859,184.760498 Z M2013.9458008,180.9089355 L2007.5209961,180.9089355 C2007.548584,181.8884277 2007.8170166,182.6451416 2008.3261719,183.1791992 C2008.8352051,183.7131348 2009.5463867,183.9802246 2010.4594727,183.9802246 C2011.4887695,183.9802246 2012.432251,183.6508789 2013.2900391,182.9924316 L2013.2900391,184.4450684 C2012.4820557,185.0150146 2011.4112549,185.3000488 2010.0776367,185.3000488 C2008.7495117,185.3000488 2007.7132568,184.8793945 2006.9689941,184.0383301 C2006.2246094,183.1971436 2005.8525391,182.029541 2005.8525391,180.5354004 C2005.8525391,179.1297607 2006.2606201,177.970459 2007.0769043,177.057373 C2007.8930664,176.1442871 2008.9071045,175.6877441 2010.1191406,175.6877441 C2011.3199463,175.6877441 2012.2579346,176.0737305 2012.9331055,176.8457031 C2013.6081543,177.6176758 2013.9458008,178.6981201 2013.9458008,180.0871582 Z M2012.3188477,179.6057129 C2012.3132324,178.7756348 2012.1168213,178.133667 2011.7294922,177.6799316 C2011.342041,177.2260742 2010.7969971,176.9992676 2010.0942383,176.9992676 C2009.4467773,176.9992676 2008.8863525,177.2399902 2008.4133301,177.7214355 C2007.9401855,178.2028809 2007.6427002,178.8309326 2007.5209961,179.6057129 Z M2020.8105469,184.9929199 C2020.4562988,185.1865234 2019.9776611,185.2834473 2019.3745117,185.2834473 C2017.730957,185.2834473 2016.9091797,184.3730469 2016.9091797,182.5524902 L2016.9091797,177.248291 L2015.3320313,177.248291 L2015.3320313,175.9035645 L2016.9091797,175.9035645 L2016.9091797,173.6955566 L2018.527832,173.1809082 L2018.527832,175.9035645 L2020.8105469,175.9035645 L2020.8105469,177.248291 L2018.527832,177.248291 L2018.527832,182.2619629 C2018.527832,182.8651123 2018.630127,183.2967529 2018.8349609,183.5568848 C2019.0396729,183.8168945 2019.3800049,183.9470215 2019.855957,183.9470215 C2020.2211914,183.9470215 2020.5393066,183.8446045 2020.8105469,183.6398926 Z M2026.6044922,183.0256348 L2025.2016602,187.4499512 L2024.0395508,187.4499512 L2025.0605469,183.0256348 Z M2044.559082,186.9602051 L2043.5878906,186.9602051 L2043.5878906,185.0842285 C2042.3261719,185.0842285 2041.2802734,184.8240967 2040.4501953,184.3039551 L2040.4501953,182.635498 C2041.2802734,183.3161621 2042.3261719,183.6813965 2043.5878906,183.7312012 L2043.5878906,179.2902832 C2042.2541504,178.664917 2041.3881836,178.0810547 2040.9897461,177.5388184 C2040.5913086,176.99646 2040.3920898,176.3544922 2040.3920898,175.6130371 C2040.3920898,174.7497559 2040.6894531,173.9985352 2041.2844238,173.359375 C2041.8792725,172.7202148 2042.6470947,172.3369141 2043.5878906,172.2097168 L2043.5878906,170.5910645 L2044.559082,170.5910645 L2044.559082,172.1765137 C2045.770874,172.2207031 2046.595459,172.392334 2047.0327148,172.6911621 L2047.0327148,174.3181152 C2046.3962402,173.8310547 2045.5716553,173.5682373 2044.559082,173.529541 L2044.559082,178.1115723 C2045.8096924,178.6815186 2046.670166,179.2501221 2047.140625,179.8173828 C2047.6109619,180.3845215 2047.8461914,181.0223389 2047.8461914,181.7307129 C2047.8461914,182.621582 2047.5500488,183.3535156 2046.9580078,183.9262695 C2046.3658447,184.4990234 2045.5661621,184.8601074 2044.559082,185.0095215 Z M2043.5878906,173.5793457 C2042.5253906,173.8117676 2041.9941406,174.4287109 2041.9941406,175.4304199 C2041.9941406,175.9118652 2042.1075439,176.3103027 2042.3344727,176.6257324 C2042.5612793,176.9411621 2042.979126,177.2675781 2043.5878906,177.6052246 Z M2044.559082,183.6647949 C2045.682373,183.4212646 2046.2441406,182.8208008 2046.2441406,181.8635254 C2046.2441406,181.0610352 2045.682373,180.361084 2044.559082,179.7634277 Z M2058.6704102,185.0842285 L2057.043457,185.0842285 L2057.043457,183.5568848 L2057.0102539,183.5568848 C2056.3405762,184.7188721 2055.300293,185.3000488 2053.8891602,185.3000488 C2052.7270508,185.3000488 2051.8027344,184.8863525 2051.1166992,184.059082 C2050.4304199,183.2316895 2050.0874023,182.1152344 2050.0874023,180.7097168 C2050.0874023,179.1933594 2050.4746094,177.9772949 2051.2495117,177.0615234 C2052.0241699,176.1456299 2053.0368652,175.6877441 2054.2875977,175.6877441 C2055.5380859,175.6877441 2056.4458008,176.1746826 2057.0102539,177.1486816 L2057.043457,177.1486816 L2057.043457,171.4958496 L2058.6704102,171.4958496 Z M2057.0517578,179.6223145 C2057.0517578,178.8862305 2056.8095703,178.2706299 2056.3254395,177.7753906 C2055.8413086,177.2800293 2055.244873,177.0324707 2054.5366211,177.0324707 C2053.6733398,177.0324707 2052.9926758,177.3547363 2052.4946289,177.9995117 C2051.996582,178.644165 2051.7475586,179.5227051 2051.7475586,180.6350098 C2051.7475586,181.6586914 2051.9868164,182.4680176 2052.4655762,183.0629883 C2052.9443359,183.6578369 2053.5820313,183.9553223 2054.3789063,183.9553223 C2055.1645508,183.9553223 2055.8066406,183.6633301 2056.3046875,183.0795898 C2056.8027344,182.4957275 2057.0517578,181.7694092 2057.0517578,180.9006348 Z M2069.378418,180.9089355 L2062.9536133,180.9089355 C2062.9812012,181.8884277 2063.2495117,182.6451416 2063.7587891,183.1791992 C2064.2678223,183.7131348 2064.9790039,183.9802246 2065.8920898,183.9802246 C2066.9213867,183.9802246 2067.8647461,183.6508789 2068.7226563,182.9924316 L2068.7226563,184.4450684 C2067.9145508,185.0150146 2066.84375,185.3000488 2065.5102539,185.3000488 C2064.1821289,185.3000488 2063.1459961,184.8793945 2062.4016113,184.0383301 C2061.6572266,183.1971436 2061.2851563,182.029541 2061.2851563,180.5354004 C2061.2851563,179.1297607 2061.6933594,177.970459 2062.5095215,177.057373 C2063.3256836,176.1442871 2064.3398438,175.6877441 2065.5517578,175.6877441 C2066.7524414,175.6877441 2067.6904297,176.0737305 2068.3657227,176.8457031 C2069.0407715,177.6176758 2069.378418,178.6981201 2069.378418,180.0871582 Z M2067.7514648,179.6057129 C2067.7458496,178.7756348 2067.5493164,178.133667 2067.1621094,177.6799316 C2066.7746582,177.2260742 2066.2294922,176.9992676 2065.5268555,176.9992676 C2064.8793945,176.9992676 2064.3188477,177.2399902 2063.8459473,177.7214355 C2063.3728027,178.2028809 2063.0751953,178.8309326 2062.9536133,179.6057129 Z M2071.8271484,185.0842285 L2071.8271484,171.4958496 L2073.4541016,171.4958496 L2073.4541016,185.0842285 Z M2083.9711914,180.9089355 L2077.5463867,180.9089355 C2077.5739746,181.8884277 2077.8422852,182.6451416 2078.3515625,183.1791992 C2078.8605957,183.7131348 2079.5717773,183.9802246 2080.4848633,183.9802246 C2081.5141602,183.9802246 2082.4575195,183.6508789 2083.3154297,182.9924316 L2083.3154297,184.4450684 C2082.5073242,185.0150146 2081.4365234,185.3000488 2080.1030273,185.3000488 C2078.7749023,185.3000488 2077.7387695,184.8793945 2076.9943848,184.0383301 C2076.25,183.1971436 2075.8779297,182.029541 2075.8779297,180.5354004 C2075.8779297,179.1297607 2076.2861328,177.970459 2077.1022949,177.057373 C2077.918457,176.1442871 2078.9326172,175.6877441 2080.1445313,175.6877441 C2081.3452148,175.6877441 2082.2832031,176.0737305 2082.9584961,176.8457031 C2083.6335449,177.6176758 2083.9711914,178.6981201 2083.9711914,180.0871582 Z M2082.3442383,179.6057129 C2082.338623,178.7756348 2082.1420898,178.133667 2081.7548828,177.6799316 C2081.3674316,177.2260742 2080.8222656,176.9992676 2080.1196289,176.9992676 C2079.472168,176.9992676 2078.9116211,177.2399902 2078.4387207,177.7214355 C2077.9655762,178.2028809 2077.6679688,178.8309326 2077.5463867,179.6057129 Z M2090.8359375,184.9929199 C2090.4816895,185.1865234 2090.0029297,185.2834473 2089.3999023,185.2834473 C2087.7563477,185.2834473 2086.9345703,184.3730469 2086.9345703,182.5524902 L2086.9345703,177.248291 L2085.3574219,177.248291 L2085.3574219,175.9035645 L2086.9345703,175.9035645 L2086.9345703,173.6955566 L2088.5532227,173.1809082 L2088.5532227,175.9035645 L2090.8359375,175.9035645 L2090.8359375,177.248291 L2088.5532227,177.248291 L2088.5532227,182.2619629 C2088.5532227,182.8651123 2088.6555176,183.2967529 2088.8603516,183.5568848 C2089.0649414,183.8168945 2089.4052734,183.9470215 2089.8813477,183.9470215 C2090.246582,183.9470215 2090.5646973,183.8446045 2090.8359375,183.6398926 Z M2100.4316406,180.9089355 L2094.0068359,180.9089355 C2094.0344238,181.8884277 2094.3027344,182.6451416 2094.8120117,183.1791992 C2095.3210449,183.7131348 2096.0322266,183.9802246 2096.9453125,183.9802246 C2097.9746094,183.9802246 2098.9179688,183.6508789 2099.7758789,182.9924316 L2099.7758789,184.4450684 C2098.9677734,185.0150146 2097.8969727,185.3000488 2096.5634766,185.3000488 C2095.2353516,185.3000488 2094.1992188,184.8793945 2093.454834,184.0383301 C2092.7104492,183.1971436 2092.3383789,182.029541 2092.3383789,180.5354004 C2092.3383789,179.1297607 2092.746582,177.970459 2093.5627441,177.057373 C2094.3789063,176.1442871 2095.3930664,175.6877441 2096.6049805,175.6877441 C2097.8056641,175.6877441 2098.7436523,176.0737305 2099.4189453,176.8457031 C2100.0939941,177.6176758 2100.4316406,178.6981201 2100.4316406,180.0871582 Z M2098.8046875,179.6057129 C2098.7990723,178.7756348 2098.6025391,178.133667 2098.215332,177.6799316 C2097.8278809,177.2260742 2097.2827148,176.9992676 2096.5800781,176.9992676 C2095.9326172,176.9992676 2095.3720703,177.2399902 2094.8991699,177.7214355 C2094.4260254,178.2028809 2094.128418,178.8309326 2094.0068359,179.6057129 Z M2106.565918,183.0256348 L2105.1630859,187.4499512 L2104.0009766,187.4499512 L2105.0219727,183.0256348 Z M2124.5205078,186.9602051 L2123.5493164,186.9602051 L2123.5493164,185.0842285 C2122.2875977,185.0842285 2121.2416992,184.8240967 2120.4116211,184.3039551 L2120.4116211,182.635498 C2121.2416992,183.3161621 2122.2875977,183.6813965 2123.5493164,183.7312012 L2123.5493164,179.2902832 C2122.2155762,178.664917 2121.3496094,178.0810547 2120.9511719,177.5388184 C2120.5527344,176.99646 2120.3535156,176.3544922 2120.3535156,175.6130371 C2120.3535156,174.7497559 2120.6508789,173.9985352 2121.2458496,173.359375 C2121.8408203,172.7202148 2122.6083984,172.3369141 2123.5493164,172.2097168 L2123.5493164,170.5910645 L2124.5205078,170.5910645 L2124.5205078,172.1765137 C2125.7324219,172.2207031 2126.5568848,172.392334 2126.9941406,172.6911621 L2126.9941406,174.3181152 C2126.357666,173.8310547 2125.5332031,173.5682373 2124.5205078,173.529541 L2124.5205078,178.1115723 C2125.7709961,178.6815186 2126.6315918,179.2501221 2127.1020508,179.8173828 C2127.5722656,180.3845215 2127.8076172,181.0223389 2127.8076172,181.7307129 C2127.8076172,182.621582 2127.5114746,183.3535156 2126.9194336,183.9262695 C2126.3271484,184.4990234 2125.5275879,184.8601074 2124.5205078,185.0095215 Z M2123.5493164,173.5793457 C2122.4868164,173.8117676 2121.9555664,174.4287109 2121.9555664,175.4304199 C2121.9555664,175.9118652 2122.0688477,176.3103027 2122.2958984,176.6257324 C2122.5227051,176.9411621 2122.9404297,177.2675781 2123.5493164,177.6052246 Z M2124.5205078,183.6647949 C2125.6437988,183.4212646 2126.2055664,182.8208008 2126.2055664,181.8635254 C2126.2055664,181.0610352 2125.6437988,180.361084 2124.5205078,179.7634277 Z M2142.425293,175.9035645 L2139.6860352,185.0842285 L2137.9926758,185.0842285 L2136.1665039,178.6428223 C2136.0888672,178.3660889 2136.0390625,178.0727539 2136.0170898,177.7629395 L2135.9838867,177.7629395 C2135.9672852,177.9953613 2135.9035645,178.2830811 2135.7929688,178.6262207 L2133.8173828,185.0842285 L2132.1738281,185.0842285 L2129.4179688,175.9035645 L2131.1113281,175.9035645 L2132.9458008,182.7102051 C2133.0009766,182.914917 2133.0424805,183.1943359 2133.0703125,183.548584 L2133.1367188,183.548584 C2133.1586914,183.2441406 2133.2114258,182.9564209 2133.2944336,182.6853027 L2135.2700195,175.9035645 L2136.7724609,175.9035645 L2138.6982422,182.7185059 C2138.753418,182.9177246 2138.7978516,183.1999512 2138.8310547,183.5651855 L2138.9057617,183.5651855 C2138.916748,183.3216553 2138.9665527,183.0394287 2139.0551758,182.7185059 L2140.8481445,175.9035645 Z M2144.7080078,176.5427246 C2145.6210938,175.9726563 2146.675293,175.6877441 2147.8706055,175.6877441 C2150.0839844,175.6877441 2151.190918,176.8498535 2151.190918,179.1740723 L2151.190918,185.0842285 L2149.5805664,185.0842285 L2149.5805664,183.6647949 L2149.5390625,183.6647949 C2148.9025879,184.7548828 2147.9645996,185.3000488 2146.7250977,185.3000488 C2145.8339844,185.3000488 2145.1257324,185.0592041 2144.6000977,184.5778809 C2144.0742188,184.0964355 2143.8115234,183.446167 2143.8115234,182.6271973 C2143.8115234,180.9116211 2144.8269043,179.9128418 2146.8579102,179.6306152 L2149.5805664,179.2487793 C2149.5805664,177.7490234 2148.9606934,176.9992676 2147.7211914,176.9992676 C2146.619873,176.9992676 2145.6154785,177.3699951 2144.7080078,178.1115723 Z M2147.4306641,180.7678223 C2146.6779785,180.8674316 2146.1591797,181.055542 2145.8742676,181.3322754 C2145.5893555,181.6088867 2145.4467773,181.9963379 2145.4467773,182.4943848 C2145.4467773,182.9315186 2145.6015625,183.2884521 2145.9116211,183.5651855 C2146.2214355,183.8417969 2146.6308594,183.9802246 2147.1401367,183.9802246 C2147.8483887,183.9802246 2148.4321289,183.7312012 2148.8916016,183.2331543 C2149.3508301,182.7351074 2149.5805664,182.1097412 2149.5805664,181.3571777 L2149.5805664,180.4772949 Z M2158.5786133,184.9929199 C2158.2243652,185.1865234 2157.7456055,185.2834473 2157.1425781,185.2834473 C2155.4990234,185.2834473 2154.6772461,184.3730469 2154.6772461,182.5524902 L2154.6772461,177.248291 L2153.1000977,177.248291 L2153.1000977,175.9035645 L2154.6772461,175.9035645 L2154.6772461,173.6955566 L2156.2958984,173.1809082 L2156.2958984,175.9035645 L2158.5786133,175.9035645 L2158.5786133,177.248291 L2156.2958984,177.248291 L2156.2958984,182.2619629 C2156.2958984,182.8651123 2156.3981934,183.2967529 2156.6030273,183.5568848 C2156.8076172,183.8168945 2157.1479492,183.9470215 2157.6240234,183.9470215 C2157.9892578,183.9470215 2158.307373,183.8446045 2158.5786133,183.6398926 Z M2167.0371094,184.6691895 C2166.3342285,185.0897217 2165.4875488,185.3000488 2164.4970703,185.3000488 C2163.1689453,185.3000488 2162.1008301,184.8739014 2161.2929688,184.0217285 C2160.4848633,183.1694336 2160.0810547,182.0654297 2160.0810547,180.7097168 C2160.0810547,179.2044678 2160.5168457,177.9912109 2161.3884277,177.0698242 C2162.2600098,176.1484375 2163.4262695,175.6877441 2164.887207,175.6877441 C2165.7282715,175.6877441 2166.4477539,175.8371582 2167.0454102,176.1359863 L2167.0454102,177.7463379 C2166.3979492,177.2703857 2165.6784668,177.0324707 2164.887207,177.0324707 C2163.9575195,177.0324707 2163.2006836,177.3547363 2162.6169434,177.9995117 C2162.0332031,178.644165 2161.7412109,179.5032959 2161.7412109,180.5769043 C2161.7412109,181.6337891 2162.0166016,182.4611816 2162.5671387,183.0588379 C2163.1176758,183.6564941 2163.8605957,183.9553223 2164.7958984,183.9553223 C2165.5871582,183.9553223 2166.3342285,183.6951904 2167.0371094,183.1750488 Z M2177.2304688,185.0842285 L2175.6118164,185.0842285 L2175.6118164,179.8049316 C2175.6118164,177.956543 2174.9255371,177.0324707 2173.5532227,177.0324707 C2172.8503418,177.0324707 2172.2666016,177.3022461 2171.8017578,177.8417969 C2171.3369141,178.3813477 2171.1044922,179.0605469 2171.1044922,179.8796387 L2171.1044922,185.0842285 L2169.4775391,185.0842285 L2169.4775391,171.4958496 L2171.1044922,171.4958496 L2171.1044922,177.4143066 L2171.1376953,177.4143066 C2171.840332,176.2631836 2172.8393555,175.6877441 2174.1342773,175.6877441 C2176.1982422,175.6877441 2177.2304688,176.9355469 2177.2304688,179.4313965 Z M2179.3222656,173.8200684 L2187.2910156,173.8200684 C2186.7319336,172.7575684 2186.2946777,171.9827881 2185.9794922,171.4958496 L2187.2744141,170.8815918 C2187.5842285,171.3574219 2188.0490723,172.1322021 2188.6689453,173.2058105 L2187.4570313,173.8200684 L2195.3261719,173.8200684 L2195.3261719,175.0817871 L2185.2573242,175.0817871 C2185.2185059,176.0888672 2185.177002,176.9466553 2185.1328125,177.6550293 L2193.1513672,177.6550293 C2193.0183105,180.0566406 2192.8745117,182.1429443 2192.7197266,183.9138184 C2192.5979004,185.9169922 2191.6240234,186.9187012 2189.7978516,186.9187012 C2188.956543,186.9187012 2187.833252,186.8743896 2186.4277344,186.7858887 C2186.3723145,186.3652344 2186.2893066,185.8560791 2186.1787109,185.2585449 C2187.5842285,185.4466553 2188.7241211,185.5407715 2189.5986328,185.5407715 C2190.6166992,185.5407715 2191.1867676,184.9375 2191.3085938,183.7312012 C2191.4414063,182.4140625 2191.5576172,180.8037109 2191.6572266,178.9001465 L2185.0415039,178.9001465 C2184.7314453,182.5524902 2183.0407715,185.3857422 2179.9697266,187.4001465 C2179.6708984,187.0458984 2179.333252,186.6696777 2178.9570313,186.2712402 C2181.8786621,184.345459 2183.4448242,181.7666016 2183.6552734,178.5349121 C2183.732666,177.6605225 2183.7963867,176.5095215 2183.8461914,175.0817871 L2179.3222656,175.0817871 Z M2209.2963867,181.5563965 C2210.3588867,183.0062256 2211.5043945,184.671875 2212.7329102,186.5534668 C2212.2900391,186.8079834 2211.8583984,187.0625 2211.4379883,187.3171387 C2211.1279297,186.8024902 2210.8237305,186.3044434 2210.5249023,185.822998 C2206.8945313,186.1218262 2204.0500488,186.3708496 2201.9916992,186.5700684 L2201.3774414,185.1257324 C2202.074707,184.8157959 2202.7553711,184.168335 2203.4194336,183.1833496 C2204.1499023,182.1429443 2204.8276367,181.0472412 2205.453125,179.8962402 L2201.0952148,179.8962402 L2201.0952148,178.7009277 L2206.3081055,178.7009277 L2206.3081055,175.1813965 L2201.9086914,175.1813965 L2201.9086914,173.986084 L2206.3081055,173.986084 L2206.3081055,170.947998 L2207.6362305,170.947998 L2207.6362305,173.986084 L2212.2348633,173.986084 L2212.2348633,175.1813965 L2207.6362305,175.1813965 L2207.6362305,178.7009277 L2213.0151367,178.7009277 L2213.0151367,179.8962402 L2207.121582,179.8962402 C2205.8874512,181.927124 2204.6811523,183.6813965 2203.5024414,185.1589355 C2205.6108398,185.0593262 2207.7192383,184.9099121 2209.8276367,184.7106934 C2209.2575684,183.8197021 2208.715332,183.0007324 2208.2006836,182.2536621 Z M2199.003418,180.2282715 C2199.4128418,180.4052734 2199.8500977,180.5878906 2200.3149414,180.776123 C2199.5290527,183.1335449 2198.8427734,185.2640381 2198.2563477,187.1677246 L2196.8286133,186.6862793 C2197.559082,184.7382813 2198.2839355,182.5856934 2199.003418,180.2282715 Z M2197.3764648,175.463623 C2198.206543,176.0501709 2199.1804199,176.8027344 2200.2983398,177.7214355 C2199.8886719,178.1862793 2199.5678711,178.5458984 2199.3354492,178.8005371 C2198.0847168,177.6826172 2197.1550293,176.8913574 2196.5463867,176.4265137 Z M2198.0239258,171.1638184 C2198.9091797,171.8720703 2199.861084,172.6800537 2200.8793945,173.5876465 C2200.5029297,173.9749756 2200.1765137,174.3181152 2199.8999023,174.6169434 C2198.8815918,173.6097412 2197.9741211,172.7630615 2197.1772461,172.0769043 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip13)\" />\n<clipPath id=\"clip14\"><path d=\"M1724,289 L2191,289 L2191,356 L1724,356 L1724,289 Z\" /></clipPath>\n<path d=\"M1734,291 C1729.581665,291 1726,294.581665 1726,299 L1726,345 C1726,349.418335 1729.581665,353 1734,353 L2180,353 C2184.4182129,353 2188,349.418335 2188,345 L2188,299 C2188,294.581665 2184.4182129,291 2180,291 Z\" style=\"fill:rgb(211,223,255);stroke:none\" clip-path=\"url(#clip14)\" />\n<clipPath id=\"clip15\"><path d=\"M1724,289 L2191,289 L2191,356 L1724,356 L1724,289 Z\" /></clipPath>\n<path d=\"M1734,291 C1729.581665,291 1726,294.581665 1726,299 L1726,345 C1726,349.418335 1729.581665,353 1734,353 L2180,353 C2184.4182129,353 2188,349.418335 2188,345 L2188,299 C2188,294.581665 2184.4182129,291 2180,291 Z\" style=\"fill:none;stroke:rgb(0,64,128)\" clip-path=\"url(#clip15)\" />\n<clipPath id=\"clip16\"><path d=\"M1737,297 L2178,297 L2178,348 L1737,348 L1737,297 Z\" /></clipPath>\n<path d=\"M1748.3806152,311.9089355 L1741.9558105,311.9089355 C1741.9833984,312.8884277 1742.2518311,313.6451416 1742.7609863,314.1791992 C1743.2700195,314.7131348 1743.9812012,314.9802246 1744.8942871,314.9802246 C1745.923584,314.9802246 1746.8670654,314.6508789 1747.7248535,313.9924316 L1747.7248535,315.4450684 C1746.9168701,316.0150146 1745.8460693,316.3000488 1744.5124512,316.3000488 C1743.1843262,316.3000488 1742.1480713,315.8793945 1741.4038086,315.0383301 C1740.6594238,314.1971436 1740.2873535,313.029541 1740.2873535,311.5354004 C1740.2873535,310.1297607 1740.6954346,308.970459 1741.5117188,308.057373 C1742.3278809,307.1442871 1743.3419189,306.6877441 1744.5539551,306.6877441 C1745.7547607,306.6877441 1746.692749,307.0737305 1747.3679199,307.8457031 C1748.0429688,308.6176758 1748.3806152,309.6981201 1748.3806152,311.0871582 Z M1746.7536621,310.6057129 C1746.7480469,309.7756348 1746.5516357,309.133667 1746.1643066,308.6799316 C1745.7768555,308.2260742 1745.2318115,307.9992676 1744.5290527,307.9992676 C1743.8815918,307.9992676 1743.321167,308.2399902 1742.8481445,308.7214355 C1742.375,309.2028809 1742.0775146,309.8309326 1741.9558105,310.6057129 Z M1758.2336426,306.9035645 L1754.5979004,316.0842285 L1752.9543457,316.0842285 L1749.5012207,306.9035645 L1751.2775879,306.9035645 L1753.5187988,313.4611816 C1753.701416,313.9868164 1753.8093262,314.4267578 1753.8425293,314.7810059 L1753.8840332,314.7810059 C1753.9393311,314.3161621 1754.0361328,313.887207 1754.1745605,313.4943848 L1756.5236816,306.9035645 Z M1767.5056152,311.9089355 L1761.0808105,311.9089355 C1761.1083984,312.8884277 1761.3768311,313.6451416 1761.8859863,314.1791992 C1762.3950195,314.7131348 1763.1062012,314.9802246 1764.0192871,314.9802246 C1765.048584,314.9802246 1765.9920654,314.6508789 1766.8498535,313.9924316 L1766.8498535,315.4450684 C1766.0418701,316.0150146 1764.9710693,316.3000488 1763.6374512,316.3000488 C1762.3093262,316.3000488 1761.2730713,315.8793945 1760.5288086,315.0383301 C1759.7844238,314.1971436 1759.4123535,313.029541 1759.4123535,311.5354004 C1759.4123535,310.1297607 1759.8204346,308.970459 1760.6367188,308.057373 C1761.4528809,307.1442871 1762.4669189,306.6877441 1763.6789551,306.6877441 C1764.8797607,306.6877441 1765.817749,307.0737305 1766.4929199,307.8457031 C1767.1679688,308.6176758 1767.5056152,309.6981201 1767.5056152,311.0871582 Z M1765.8786621,310.6057129 C1765.8730469,309.7756348 1765.6766357,309.133667 1765.2893066,308.6799316 C1764.9018555,308.2260742 1764.3568115,307.9992676 1763.6540527,307.9992676 C1763.0065918,307.9992676 1762.446167,308.2399902 1761.9731445,308.7214355 C1761.5,309.2028809 1761.2025146,309.8309326 1761.0808105,310.6057129 Z M1777.723877,316.0842285 L1776.1052246,316.0842285 L1776.1052246,310.8630371 C1776.1051025,308.9759521 1775.4161377,308.0324707 1774.0383301,308.0324707 C1773.3244629,308.0324707 1772.737793,308.2980957 1772.2785645,308.8293457 C1771.8192139,309.3605957 1771.5895996,310.032959 1771.5895996,310.8464355 L1771.5895996,316.0842285 L1769.9626465,316.0842285 L1769.9626465,306.9035645 L1771.5895996,306.9035645 L1771.5895996,308.4226074 L1771.6228027,308.4226074 C1772.3144531,307.2659912 1773.3188477,306.6877441 1774.6359863,306.6877441 C1775.6430664,306.6877441 1776.4095459,307.0100098 1776.9353027,307.6547852 C1777.4609375,308.2994385 1777.723877,309.2387695 1777.723877,310.4729004 Z M1785.161377,315.9929199 C1784.8071289,316.1865234 1784.3284912,316.2834473 1783.7253418,316.2834473 C1782.0817871,316.2834473 1781.2600098,315.3730469 1781.2600098,313.5524902 L1781.2600098,308.248291 L1779.6828613,308.248291 L1779.6828613,306.9035645 L1781.2600098,306.9035645 L1781.2600098,304.6955566 L1782.8786621,304.1809082 L1782.8786621,306.9035645 L1785.161377,306.9035645 L1785.161377,308.248291 L1782.8786621,308.248291 L1782.8786621,313.2619629 C1782.8786621,313.8651123 1782.980957,314.2967529 1783.185791,314.5568848 C1783.3905029,314.8168945 1783.730835,314.9470215 1784.2067871,314.9470215 C1784.5720215,314.9470215 1784.8901367,314.8446045 1785.161377,314.6398926 Z M1786.7634277,314.1003418 C1787.5823975,314.6923828 1788.4650879,314.9885254 1789.411377,314.9885254 C1790.6785889,314.9885254 1791.3122559,314.5734863 1791.3122559,313.7434082 C1791.3122559,313.3891602 1791.1738281,313.09729 1790.8972168,312.8676758 C1790.6204834,312.6379395 1790.0587158,312.3654785 1789.2121582,312.0500488 C1788.1938477,311.6405029 1787.5325928,311.2351074 1787.2282715,310.8339844 C1786.9238281,310.4327393 1786.7716064,309.9471436 1786.7717285,309.3771973 C1786.7716064,308.5637207 1787.1162109,307.9121094 1787.8051758,307.4223633 C1788.4941406,306.9326172 1789.3421631,306.6877441 1790.3493652,306.6877441 C1791.1296387,306.6877441 1791.8544922,306.8232422 1792.5241699,307.0944824 L1792.5241699,308.6633301 C1791.8378906,308.2205811 1791.0604248,307.9992676 1790.1916504,307.9992676 C1789.6713867,307.9992676 1789.2480469,308.1126709 1788.9216309,308.3395996 C1788.5950928,308.5664063 1788.4318848,308.8652344 1788.4318848,309.236084 C1788.4318848,309.6013184 1788.5494385,309.8862305 1788.784668,310.0910645 C1789.0197754,310.2957764 1789.5413818,310.5585938 1790.3493652,310.8796387 C1791.3730469,311.2614746 1792.0648193,311.6571045 1792.4245605,312.0666504 C1792.7841797,312.4760742 1792.9641113,312.9824219 1792.9641113,313.5856934 C1792.9641113,314.4267578 1792.6196289,315.0894775 1791.9306641,315.5737305 C1791.2416992,316.0578613 1790.3493652,316.3000488 1789.2536621,316.3000488 C1788.3017578,316.3000488 1787.4716797,316.1201172 1786.7634277,315.760498 Z M1807.2165527,316.0842285 L1807.2165527,307.567627 C1807.2165527,306.8647461 1807.2580566,306.020874 1807.3410645,305.0358887 L1807.2995605,305.0358887 C1807.1556396,305.6556396 1807.0283203,306.0872803 1806.9177246,306.3308105 L1802.6760254,316.0842285 L1801.7546387,316.0842285 L1797.5212402,306.4055176 C1797.4216309,306.184082 1797.2943115,305.7275391 1797.1394043,305.0358887 L1797.0895996,305.0358887 C1797.1448975,305.6335449 1797.1726074,306.5023193 1797.1726074,307.642334 L1797.1726074,316.0842285 L1795.5871582,316.0842285 L1795.5871582,303.2263184 L1797.8366699,303.2263184 L1801.630127,312.041748 C1801.9178467,312.7167969 1802.1087646,313.2425537 1802.2028809,313.6188965 L1802.2609863,313.6188965 C1802.5487061,312.8275146 1802.7507324,312.2907715 1802.8669434,312.0085449 L1806.7268066,303.2263184 L1808.8684082,303.2263184 L1808.8684082,316.0842285 Z M1812.2883301,303.6662598 C1812.2883301,303.378418 1812.3864746,303.1363525 1812.5830078,302.9399414 C1812.7794189,302.7434082 1813.0214844,302.6452637 1813.3093262,302.6452637 C1813.6025391,302.6452637 1813.8502197,302.7420654 1814.0522461,302.935791 C1814.2541504,303.1293945 1814.3552246,303.3729248 1814.3552246,303.6662598 C1814.3552246,303.9539795 1814.2541504,304.1933594 1814.0522461,304.3842773 C1813.8502197,304.5751953 1813.6025391,304.6706543 1813.3093262,304.6706543 C1813.0159912,304.6706543 1812.7724609,304.5751953 1812.5788574,304.3842773 C1812.3851318,304.1933594 1812.2883301,303.9539795 1812.2883301,303.6662598 Z M1812.479248,316.0842285 L1812.479248,306.9035645 L1814.1062012,306.9035645 L1814.1062012,316.0842285 Z M1824.092041,306.9035645 L1821.020752,311.5270996 L1824.0505371,316.0842285 L1822.157959,316.0842285 L1820.4064941,313.1623535 C1820.3123779,313.0073242 1820.1795654,312.7694092 1820.0080566,312.4484863 L1819.9748535,312.4484863 C1819.9692383,312.4816895 1819.8309326,312.7196045 1819.5598145,313.1623535 L1817.7751465,316.0842285 L1815.9074707,316.0842285 L1819.0285645,311.5769043 L1816.048584,306.9035645 L1817.9411621,306.9035645 L1819.6594238,309.9748535 C1819.7645264,310.1629639 1819.8918457,310.4064941 1820.0412598,310.7053223 L1820.0744629,310.7053223 L1822.307373,306.9035645 Z M1825.8186035,303.6662598 C1825.8186035,303.378418 1825.916748,303.1363525 1826.1132813,302.9399414 C1826.3096924,302.7434082 1826.5517578,302.6452637 1826.8395996,302.6452637 C1827.1328125,302.6452637 1827.3804932,302.7420654 1827.5825195,302.935791 C1827.7844238,303.1293945 1827.885498,303.3729248 1827.885498,303.6662598 C1827.885498,303.9539795 1827.7844238,304.1933594 1827.5825195,304.3842773 C1827.3804932,304.5751953 1827.1328125,304.6706543 1826.8395996,304.6706543 C1826.5462646,304.6706543 1826.3027344,304.5751953 1826.1091309,304.3842773 C1825.9154053,304.1933594 1825.8186035,303.9539795 1825.8186035,303.6662598 Z M1826.0095215,316.0842285 L1826.0095215,306.9035645 L1827.6364746,306.9035645 L1827.6364746,316.0842285 Z M1838.435791,316.0842285 L1836.8171387,316.0842285 L1836.8171387,310.8630371 C1836.8170166,308.9759521 1836.1280518,308.0324707 1834.7502441,308.0324707 C1834.036377,308.0324707 1833.449707,308.2980957 1832.9904785,308.8293457 C1832.5311279,309.3605957 1832.3015137,310.032959 1832.3015137,310.8464355 L1832.3015137,316.0842285 L1830.6745605,316.0842285 L1830.6745605,306.9035645 L1832.3015137,306.9035645 L1832.3015137,308.4226074 L1832.3347168,308.4226074 C1833.0263672,307.2659912 1834.0307617,306.6877441 1835.3479004,306.6877441 C1836.3549805,306.6877441 1837.12146,307.0100098 1837.6472168,307.6547852 C1838.1728516,308.2994385 1838.435791,309.2387695 1838.435791,310.4729004 Z M1840.9592285,306.2976074 L1847.1931152,306.2976074 C1847.3535156,304.9417725 1847.4337158,303.4753418 1847.4338379,301.8981934 L1848.8615723,301.8981934 C1848.8615723,303.541748 1848.7840576,305.0081787 1848.6291504,306.2976074 L1855.6848145,306.2976074 C1855.6184082,309.7175293 1855.5187988,312.5397949 1855.3859863,314.7644043 C1855.2752686,316.8339844 1854.1795654,317.8688965 1852.098877,317.8688965 C1851.2355957,317.8688965 1850.211792,317.8411865 1849.0275879,317.7858887 C1848.9832764,317.354248 1848.9002686,316.8395996 1848.7785645,316.2419434 C1849.8188477,316.3857422 1850.8426514,316.4577637 1851.8498535,316.4577637 C1853.1779785,316.4577637 1853.8752441,315.8046875 1853.9416504,314.4987793 C1854.0965576,312.3294678 1854.196167,310.0273438 1854.2404785,307.5925293 L1848.4465332,307.5925293 C1847.6330566,312.4733887 1845.3586426,316.1035156 1841.623291,318.4831543 C1841.3133545,318.0957031 1840.975708,317.6861572 1840.6105957,317.2546387 C1844.0526123,315.2236328 1846.1804199,312.0029297 1846.9938965,307.5925293 L1840.9592285,307.5925293 Z M1848.8449707,310.5808105 L1849.7580566,309.767334 C1850.8205566,310.7523193 1851.7834473,311.7207031 1852.6467285,312.6726074 L1851.6174316,313.6022949 C1850.7651367,312.5950928 1849.8410645,311.5878906 1848.8449707,310.5808105 Z M1842.1379395,303.010498 L1843.0344238,302.1804199 C1843.9530029,302.9772949 1844.8383789,303.7962646 1845.6906738,304.6374512 L1844.6779785,305.5837402 C1843.8588867,304.6872559 1843.012207,303.8294678 1842.1379395,303.010498 Z M1858.9304199,314.1335449 L1865.4216309,314.1335449 L1865.4216309,312.8884277 L1857.901123,312.8884277 L1857.901123,311.8591309 L1865.4216309,311.8591309 L1865.4216309,310.6306152 L1858.9802246,310.6306152 L1858.9802246,309.6345215 L1865.4216309,309.6345215 L1865.4216309,308.5056152 L1861.204834,308.5056152 L1861.204834,308.9372559 L1860.0427246,308.9372559 L1860.0427246,305.3679199 L1865.4216309,305.3679199 L1865.4216309,304.2722168 L1857.9509277,304.2722168 L1857.9509277,303.2429199 L1865.4216309,303.2429199 L1865.4216309,301.947998 L1866.6501465,301.947998 L1866.6501465,303.2429199 L1874.104248,303.2429199 L1874.104248,304.2722168 L1866.6501465,304.2722168 L1866.6501465,305.3679199 L1872.0290527,305.3679199 L1872.0290527,308.9372559 L1870.8669434,308.9372559 L1870.8669434,308.5056152 L1866.6501465,308.5056152 L1866.6501465,309.6345215 L1872.3942871,309.6345215 L1872.3942871,311.8591309 L1874.2370605,311.8591309 L1874.2370605,312.8884277 L1872.3942871,312.8884277 L1872.3942871,315.9265137 L1871.1989746,315.9265137 L1871.1989746,315.1296387 L1866.6501465,315.1296387 L1866.6501465,316.1091309 C1866.6501465,317.4371338 1866.0081787,318.1068115 1864.7243652,318.1179199 C1864.1156006,318.1179199 1863.3187256,318.1068115 1862.3337402,318.0847168 C1862.2894287,317.708374 1862.2230225,317.2490234 1862.1345215,316.7067871 C1862.9978027,316.8173828 1863.7669678,316.8728027 1864.4421387,316.8728027 C1865.0950928,316.8728027 1865.4216309,316.5406494 1865.4216309,315.876709 L1865.4216309,315.1296387 L1858.9304199,315.1296387 Z M1866.6501465,314.1335449 L1871.1989746,314.1335449 L1871.1989746,312.8884277 L1866.6501465,312.8884277 Z M1871.1989746,310.6306152 L1866.6501465,310.6306152 L1866.6501465,311.8591309 L1871.1989746,311.8591309 Z M1870.8669434,306.2976074 L1866.6501465,306.2976074 L1866.6501465,307.5759277 L1870.8669434,307.5759277 Z M1861.204834,307.5759277 L1865.4216309,307.5759277 L1865.4216309,306.2976074 L1861.204834,306.2976074 Z M1880.2053223,311.2614746 L1885.9660645,311.2614746 L1885.9660645,307.0612793 L1882.8034668,307.0612793 C1882.3552246,308.2509766 1881.8654785,309.3134766 1881.3342285,310.2487793 C1881.0131836,309.9388428 1880.6479492,309.6455078 1880.2385254,309.3688965 C1881.289917,307.5205078 1882.0646973,305.4564209 1882.5627441,303.1765137 L1883.9074707,303.5583496 C1883.6916504,304.3828125 1883.4592285,305.1630859 1883.2102051,305.8991699 L1885.9660645,305.8991699 L1885.9660645,302.0476074 L1887.2941895,302.0476074 L1887.2941895,305.8991699 L1891.2619629,305.8991699 L1891.2619629,307.0612793 L1887.2941895,307.0612793 L1887.2941895,311.2614746 L1891.8098145,311.2614746 L1891.8098145,312.423584 L1887.2941895,312.423584 L1887.2941895,318.2341309 L1885.9660645,318.2341309 L1885.9660645,312.423584 L1880.2053223,312.423584 Z M1875.208252,310.2653809 C1876.7354736,308.0075684 1877.9641113,305.2738037 1878.8937988,302.064209 L1880.255127,302.4626465 C1879.8455811,303.7519531 1879.402832,304.9611816 1878.927002,306.0900879 L1878.927002,318.2507324 L1877.6154785,318.2507324 L1877.6154785,308.8293457 C1877.0509033,309.8752441 1876.4477539,310.8353271 1875.8059082,311.7097168 C1875.6398926,311.2337646 1875.4405518,310.7523193 1875.208252,310.2653809 Z M1899.2058105,303.392334 L1908.4362793,303.392334 C1908.2702637,309.1806641 1908.1429443,312.9603271 1908.0544434,314.7312012 C1908.0101318,316.8007813 1907.1247559,317.824585 1905.3981934,317.8024902 C1904.8337402,317.8023682 1904.0202637,317.7857666 1902.9577637,317.7526855 C1902.880249,317.2324219 1902.791748,316.734375 1902.6921387,316.2585449 C1903.7546387,316.3581543 1904.6068115,316.407959 1905.2487793,316.407959 C1906.15625,316.4411621 1906.6322021,315.8544922 1906.6765137,314.6481934 C1906.7871094,312.9105225 1906.9033203,309.5847168 1907.0251465,304.6706543 L1903.2565918,304.6706543 C1903.1901855,306.817749 1903.1071777,308.5554199 1903.0075684,309.8835449 C1902.7640381,313.3034668 1901.2644043,316.1035156 1898.5085449,318.2839355 C1898.2207031,317.9407959 1897.8665771,317.5866699 1897.4460449,317.2214355 C1900.0136719,315.2402344 1901.40271,312.7611084 1901.6130371,309.7839355 C1901.7402344,308.3173828 1901.8205566,306.6130371 1901.8537598,304.6706543 L1899.2058105,304.6706543 Z M1892.9304199,306.2810059 L1892.9304199,305.0856934 L1898.4255371,305.0856934 L1898.4255371,306.314209 C1897.8112793,307.3710938 1897.1582031,308.3533936 1896.4665527,309.2609863 L1896.4665527,309.7756348 C1896.7320557,309.9637451 1897.0004883,310.1518555 1897.2717285,310.3400879 C1897.8195801,309.6096191 1898.3314209,308.8486328 1898.807373,308.057373 L1899.9030762,308.7546387 C1899.427124,309.4407959 1898.8654785,310.196167 1898.2180176,311.020752 C1898.7713623,311.4246826 1899.3275146,311.8369141 1899.8864746,312.2575684 L1899.0397949,313.2702637 C1898.1931152,312.572998 1897.3353271,311.8840332 1896.4665527,311.2033691 L1896.4665527,318.2009277 L1895.204834,318.2009277 L1895.204834,310.7800293 C1894.5517578,311.4993896 1893.8656006,312.1634521 1893.1462402,312.7722168 C1893.0244141,312.3405762 1892.875,311.864624 1892.697998,311.3444824 C1894.291748,310.09375 1895.708374,308.4060059 1896.947998,306.2810059 Z M1894.5075684,302.4460449 L1895.6696777,301.8649902 C1896.0791016,302.5179443 1896.5107422,303.276123 1896.9645996,304.1394043 L1895.736084,304.7702637 C1895.3265381,303.8847656 1894.9169922,303.1101074 1894.5075684,302.4460449 Z M1917.5754395,310.8132324 L1925.5773926,310.8132324 L1925.5773926,318.2839355 L1924.3156738,318.2839355 L1924.3156738,317.1218262 L1918.8371582,317.1218262 L1918.8371582,318.3005371 L1917.5754395,318.3005371 Z M1917.0441895,315.494873 L1916.0646973,316.5905762 C1915.4614258,315.9763184 1914.8582764,315.3786621 1914.255127,314.7976074 C1913.4360352,315.9818115 1912.368042,317.0996094 1911.0510254,318.151123 C1910.8186035,317.8079834 1910.5639648,317.4482422 1910.2873535,317.0720215 C1911.5545654,316.1367188 1912.5727539,315.0908203 1913.342041,313.9343262 C1912.5506592,313.192749 1911.7592773,312.4788818 1910.9680176,311.7927246 C1911.3608398,310.3040771 1911.7177734,308.6384277 1912.0388184,306.7956543 L1910.3371582,306.7956543 L1910.3371582,305.5505371 L1912.2546387,305.5505371 C1912.4316406,304.4326172 1912.6004639,303.2539063 1912.7609863,302.0144043 L1914.1057129,302.213623 C1913.9230957,303.4144287 1913.7404785,304.5267334 1913.5578613,305.5505371 L1916.645752,305.5505371 L1916.645752,306.7790527 C1916.3856201,309.7451172 1915.8322754,312.0223389 1914.9855957,313.6105957 C1915.7381592,314.269043 1916.4243164,314.8972168 1917.0441895,315.494873 Z M1923.9172363,304.1726074 C1925.0461426,305.9544678 1926.0200195,307.6921387 1926.8391113,309.385498 L1925.5275879,309.9997559 C1925.2950439,309.4685059 1925.0543213,308.942749 1924.8054199,308.4226074 C1923.0566406,308.52771 1920.9676514,308.6937256 1918.5383301,308.9206543 C1918.2283936,308.9538574 1917.8354492,309.0478516 1917.3596191,309.2028809 L1916.7453613,308.0075684 C1917.1326904,307.7751465 1917.4647217,307.46521 1917.7414551,307.0778809 C1918.6379395,305.7386475 1919.5454102,304.0175781 1920.4641113,301.9147949 L1921.8586426,302.3630371 C1920.8514404,304.2888184 1919.8498535,306.0374756 1918.8537598,307.6091309 C1921.0672607,307.4707031 1922.8657227,307.3684082 1924.2492676,307.302002 C1923.8010254,306.4221191 1923.3305664,305.5560303 1922.8381348,304.7038574 Z M1924.3156738,311.9753418 L1918.8371582,311.9753418 L1918.8371582,315.9929199 L1924.3156738,315.9929199 Z M1915.3674316,306.7956543 L1913.3337402,306.7956543 C1912.9851074,308.6273193 1912.6391602,310.1491699 1912.2961426,311.361084 C1912.899292,311.8480225 1913.4720459,312.3183594 1914.0144043,312.7722168 C1914.7669678,311.2282715 1915.2180176,309.236084 1915.3674316,306.7956543 Z M1932.4421387,312.2243652 C1933.8919678,311.5491943 1935.2476807,310.7717285 1936.5095215,309.8918457 L1936.5095215,302.2800293 L1937.9372559,302.2800293 L1937.9372559,308.8210449 C1939.6306152,307.4541016 1941.1357422,305.8769531 1942.4528809,304.0895996 L1943.6647949,304.9694824 C1942.0544434,307.111084 1940.1452637,308.9842529 1937.9372559,310.5891113 L1937.9372559,315.2790527 C1937.9372559,316.0316162 1938.3356934,316.407959 1939.1325684,316.407959 L1941.2409668,316.407959 C1941.9935303,316.407959 1942.4306641,316.0482178 1942.5524902,315.3288574 C1942.7073975,314.5761719 1942.8070068,313.7073975 1942.8513184,312.7224121 C1943.3161621,312.8994141 1943.8031006,313.0599365 1944.3122559,313.2038574 C1944.2236328,314.1335449 1944.1074219,314.9857178 1943.963623,315.760498 C1943.7532959,317.0332031 1942.9564209,317.6696777 1941.572998,317.6696777 L1938.767334,317.6696777 C1937.262085,317.6696777 1936.5095215,316.9281006 1936.5095215,315.4450684 L1936.5095215,311.5603027 C1935.4746094,312.2243652 1934.3845215,312.8330078 1933.2390137,313.3864746 C1933.0065918,313.0212402 1932.7409668,312.6337891 1932.4421387,312.2243652 Z M1927.7770996,310.182373 C1929.7028809,307.6257324 1931.1195068,304.9085693 1932.0270996,302.0310059 L1933.4714355,302.4460449 C1932.9456787,303.8183594 1932.3757324,305.1105957 1931.7614746,306.3225098 L1931.7614746,318.2009277 L1930.3669434,318.2009277 L1930.3669434,308.8210449 C1929.7526855,309.8171387 1929.0996094,310.7523193 1928.407959,311.626709 C1928.2197266,311.1507568 1928.0095215,310.6693115 1927.7770996,310.182373 Z M1950.1809082,314.0256348 L1948.7780762,318.4499512 L1947.6159668,318.4499512 L1948.6369629,314.0256348 Z M1963.5036621,306.2976074 L1969.7375488,306.2976074 C1969.8979492,304.9417725 1969.9781494,303.4753418 1969.9782715,301.8981934 L1971.4060059,301.8981934 C1971.4060059,303.541748 1971.3284912,305.0081787 1971.173584,306.2976074 L1978.229248,306.2976074 C1978.1628418,309.7175293 1978.0632324,312.5397949 1977.9304199,314.7644043 C1977.8197021,316.8339844 1976.723999,317.8688965 1974.6433105,317.8688965 C1973.7800293,317.8688965 1972.7562256,317.8411865 1971.5720215,317.7858887 C1971.52771,317.354248 1971.4447021,316.8395996 1971.322998,316.2419434 C1972.3632813,316.3857422 1973.387085,316.4577637 1974.3942871,316.4577637 C1975.7224121,316.4577637 1976.4196777,315.8046875 1976.486084,314.4987793 C1976.6409912,312.3294678 1976.7406006,310.0273438 1976.7849121,307.5925293 L1970.9909668,307.5925293 C1970.1774902,312.4733887 1967.9030762,316.1035156 1964.1677246,318.4831543 C1963.8577881,318.0957031 1963.5201416,317.6861572 1963.1550293,317.2546387 C1966.5970459,315.2236328 1968.7248535,312.0029297 1969.5383301,307.5925293 L1963.5036621,307.5925293 Z M1971.3894043,310.5808105 L1972.3024902,309.767334 C1973.3649902,310.7523193 1974.3278809,311.7207031 1975.1911621,312.6726074 L1974.1618652,313.6022949 C1973.3095703,312.5950928 1972.385498,311.5878906 1971.3894043,310.5808105 Z M1964.682373,303.010498 L1965.5788574,302.1804199 C1966.4974365,302.9772949 1967.3828125,303.7962646 1968.2351074,304.6374512 L1967.2224121,305.5837402 C1966.4033203,304.6872559 1965.5566406,303.8294678 1964.682373,303.010498 Z M1991.4108887,303.2263184 L1986.6877441,316.0842285 L1984.8449707,316.0842285 L1980.2131348,303.2263184 L1982.0559082,303.2263184 L1985.517334,313.2785645 C1985.6335449,313.6105957 1985.7192383,313.9951172 1985.7746582,314.432373 L1985.8161621,314.432373 C1985.8603516,314.0505371 1985.9572754,313.6604004 1986.1066895,313.2619629 L1989.6345215,303.2263184 Z M2000.9401855,316.0842285 L1999.3049316,316.0842285 L1999.3049316,314.6398926 L1999.2717285,314.6398926 C1998.6574707,315.746582 1997.7138672,316.3000488 1996.4411621,316.3000488 C1994.2663574,316.3000488 1993.1789551,314.9995117 1993.1789551,312.3986816 L1993.1789551,306.9035645 L1994.7893066,306.9035645 L1994.7893066,312.157959 C1994.7893066,314.0228271 1995.5031738,314.9553223 1996.9309082,314.9553223 C1997.6391602,314.9553223 1998.2119141,314.6938477 1998.6491699,314.1708984 C1999.0863037,313.6479492 1999.3048096,312.9880371 1999.3049316,312.1911621 L1999.3049316,306.9035645 L2000.9401855,306.9035645 Z M2011.6315918,311.9089355 L2005.2067871,311.9089355 C2005.234375,312.8884277 2005.5028076,313.6451416 2006.0119629,314.1791992 C2006.5209961,314.7131348 2007.2321777,314.9802246 2008.1452637,314.9802246 C2009.1745605,314.9802246 2010.118042,314.6508789 2010.9758301,313.9924316 L2010.9758301,315.4450684 C2010.1678467,316.0150146 2009.0970459,316.3000488 2007.7634277,316.3000488 C2006.4353027,316.3000488 2005.3990479,315.8793945 2004.6547852,315.0383301 C2003.9104004,314.1971436 2003.5383301,313.029541 2003.5383301,311.5354004 C2003.5383301,310.1297607 2003.9464111,308.970459 2004.7626953,308.057373 C2005.5788574,307.1442871 2006.5928955,306.6877441 2007.8049316,306.6877441 C2009.0057373,306.6877441 2009.9437256,307.0737305 2010.6188965,307.8457031 C2011.2939453,308.6176758 2011.6315918,309.6981201 2011.6315918,311.0871582 Z M2010.0046387,310.6057129 C2009.9990234,309.7756348 2009.8026123,309.133667 2009.4152832,308.6799316 C2009.027832,308.2260742 2008.4827881,307.9992676 2007.7800293,307.9992676 C2007.1325684,307.9992676 2006.5721436,308.2399902 2006.0991211,308.7214355 C2005.6259766,309.2028809 2005.3284912,309.8309326 2005.2067871,310.6057129 Z M2020.8952637,314.7893066 L2020.8952637,320.3093262 L2019.2683105,320.3093262 L2019.2683105,306.9035645 L2020.8952637,306.9035645 L2020.8952637,308.4890137 L2020.9284668,308.4890137 C2021.6478271,307.2880859 2022.6992188,306.6877441 2024.0827637,306.6877441 C2025.2558594,306.6877441 2026.1759033,307.0986328 2026.8427734,307.9204102 C2027.5095215,308.7421875 2027.8430176,309.8447266 2027.8430176,311.2282715 C2027.8430176,312.7556152 2027.465332,313.982666 2026.7099609,314.909668 C2025.9545898,315.8365479 2024.9377441,316.3000488 2023.6594238,316.3000488 C2022.4807129,316.3000488 2021.5703125,315.7963867 2020.9284668,314.7893066 Z M2020.8869629,312.2990723 C2020.8869629,313.0461426 2021.1276855,313.6755371 2021.6091309,314.1875 C2022.0905762,314.6993408 2022.6937256,314.9553223 2023.4187012,314.9553223 C2024.2818604,314.9553223 2024.9570313,314.623291 2025.4440918,313.9592285 C2025.9310303,313.295166 2026.1745605,312.3764648 2026.1745605,311.2033691 C2026.1745605,310.2127686 2025.9476318,309.4366455 2025.4938965,308.875 C2025.0400391,308.3132324 2024.4202881,308.0324707 2023.6345215,308.0324707 C2022.8320313,308.0324707 2022.173584,308.3173828 2021.6589355,308.8874512 C2021.1442871,309.4573975 2020.8869629,310.1878662 2020.8869629,311.0788574 Z M2035.3718262,308.513916 C2035.1005859,308.3201904 2034.7270508,308.2233887 2034.2512207,308.2233887 C2033.6203613,308.2233887 2033.1000977,308.5180664 2032.6906738,309.1074219 C2032.2811279,309.6967773 2032.076416,310.4729004 2032.076416,311.435791 L2032.076416,316.0842285 L2030.4494629,316.0842285 L2030.4494629,306.9035645 L2032.076416,306.9035645 L2032.076416,308.7712402 L2032.1096191,308.7712402 C2032.5743408,307.4208984 2033.3768311,306.7458496 2034.5168457,306.7458496 C2034.8875732,306.7458496 2035.1726074,306.7873535 2035.3718262,306.8703613 Z M2036.517334,311.5935059 C2036.517334,310.0771484 2036.9406738,308.8804932 2037.7873535,308.003418 C2038.6340332,307.1262207 2039.7822266,306.6877441 2041.2321777,306.6877441 C2042.6099854,306.6877441 2043.6905518,307.1096191 2044.4736328,307.9536133 C2045.2565918,308.7974854 2045.6481934,309.9637451 2045.6481934,311.4523926 C2045.6481934,312.9022217 2045.2303467,314.0726318 2044.3947754,314.963623 C2043.559082,315.8544922 2042.4384766,316.3000488 2041.032959,316.3000488 C2039.6605225,316.3000488 2038.5648193,315.8682861 2037.7458496,315.005127 C2036.9267578,314.1418457 2036.517334,313.0046387 2036.517334,311.5935059 Z M2038.1774902,311.5437012 C2038.1774902,312.6005859 2038.444458,313.4334717 2038.9785156,314.0422363 C2039.5124512,314.6508789 2040.2304688,314.9553223 2041.1325684,314.9553223 C2042.0621338,314.9553223 2042.7705078,314.6578369 2043.2575684,314.0629883 C2043.7445068,313.4680176 2043.9880371,312.614502 2043.9880371,311.5021973 C2043.9880371,310.3842773 2043.7445068,309.5266113 2043.2575684,308.9289551 C2042.7705078,308.3312988 2042.0621338,308.0324707 2041.1325684,308.0324707 C2040.2194824,308.0324707 2039.4986572,308.3450928 2038.9702148,308.970459 C2038.4416504,309.5957031 2038.1774902,310.4534912 2038.1774902,311.5437012 Z M2052.6706543,315.9929199 C2052.3164063,316.1865234 2051.8378906,316.2834473 2051.2346191,316.2834473 C2049.5910645,316.2834473 2048.7692871,315.3730469 2048.7692871,313.5524902 L2048.7692871,308.248291 L2047.1921387,308.248291 L2047.1921387,306.9035645 L2048.7692871,306.9035645 L2048.7692871,304.6955566 L2050.3879395,304.1809082 L2050.3879395,306.9035645 L2052.6706543,306.9035645 L2052.6706543,308.248291 L2050.3879395,308.248291 L2050.3879395,313.2619629 C2050.3879395,313.8651123 2050.4902344,314.2967529 2050.6950684,314.5568848 C2050.8999023,314.8168945 2051.2402344,314.9470215 2051.7160645,314.9470215 C2052.0812988,314.9470215 2052.3994141,314.8446045 2052.6706543,314.6398926 Z M2054.1730957,311.5935059 C2054.1730957,310.0771484 2054.5964355,308.8804932 2055.4431152,308.003418 C2056.2897949,307.1262207 2057.4379883,306.6877441 2058.8879395,306.6877441 C2060.265625,306.6877441 2061.3461914,307.1096191 2062.1293945,307.9536133 C2062.9123535,308.7974854 2063.3039551,309.9637451 2063.3039551,311.4523926 C2063.3039551,312.9022217 2062.8862305,314.0726318 2062.0505371,314.963623 C2061.2148438,315.8544922 2060.0942383,316.3000488 2058.6887207,316.3000488 C2057.3164063,316.3000488 2056.2207031,315.8682861 2055.4016113,315.005127 C2054.5825195,314.1418457 2054.1730957,313.0046387 2054.1730957,311.5935059 Z M2055.833252,311.5437012 C2055.833252,312.6005859 2056.1000977,313.4334717 2056.6342773,314.0422363 C2057.1682129,314.6508789 2057.8862305,314.9553223 2058.7883301,314.9553223 C2059.7177734,314.9553223 2060.4262695,314.6578369 2060.9133301,314.0629883 C2061.4003906,313.4680176 2061.6437988,312.614502 2061.6437988,311.5021973 C2061.6437988,310.3842773 2061.4003906,309.5266113 2060.9133301,308.9289551 C2060.4262695,308.3312988 2059.7177734,308.0324707 2058.7883301,308.0324707 C2057.8752441,308.0324707 2057.1542969,308.3450928 2056.6259766,308.970459 C2056.0974121,309.5957031 2055.833252,310.4534912 2055.833252,311.5437012 Z M2070.326416,315.9929199 C2069.972168,316.1865234 2069.4936523,316.2834473 2068.8903809,316.2834473 C2067.2468262,316.2834473 2066.4250488,315.3730469 2066.4250488,313.5524902 L2066.4250488,308.248291 L2064.8479004,308.248291 L2064.8479004,306.9035645 L2066.4250488,306.9035645 L2066.4250488,304.6955566 L2068.0437012,304.1809082 L2068.0437012,306.9035645 L2070.326416,306.9035645 L2070.326416,308.248291 L2068.0437012,308.248291 L2068.0437012,313.2619629 C2068.0437012,313.8651123 2068.1459961,314.2967529 2068.3508301,314.5568848 C2068.5556641,314.8168945 2068.8959961,314.9470215 2069.3718262,314.9470215 C2069.7370605,314.9470215 2070.0551758,314.8446045 2070.326416,314.6398926 Z M2079.9138184,306.9035645 L2075.7468262,317.470459 C2074.972168,319.4293213 2073.8791504,320.4089355 2072.4680176,320.4089355 C2072.0639648,320.4089355 2071.7182617,320.364624 2071.4304199,320.276123 L2071.4304199,318.8483887 C2071.7458496,318.9700928 2072.050293,319.0310059 2072.3435059,319.0310059 C2073.0795898,319.0310059 2073.630127,318.5993652 2073.9953613,317.736084 L2074.7009277,316.067627 L2071.0983887,306.9035645 L2072.8996582,306.9035645 L2075.298584,313.8015137 L2075.4978027,314.5568848 L2075.5393066,314.5568848 C2075.5725098,314.3852539 2075.638916,314.1390381 2075.7385254,313.8181152 L2078.2453613,306.9035645 Z M2083.342041,314.7893066 L2083.342041,320.3093262 L2081.7150879,320.3093262 L2081.7150879,306.9035645 L2083.342041,306.9035645 L2083.342041,308.4890137 L2083.3752441,308.4890137 C2084.0947266,307.2880859 2085.1459961,306.6877441 2086.529541,306.6877441 C2087.7026367,306.6877441 2088.6225586,307.0986328 2089.2895508,307.9204102 C2089.9562988,308.7421875 2090.2897949,309.8447266 2090.2897949,311.2282715 C2090.2897949,312.7556152 2089.9121094,313.982666 2089.1567383,314.909668 C2088.4013672,315.8365479 2087.3845215,316.3000488 2086.1062012,316.3000488 C2084.9274902,316.3000488 2084.0170898,315.7963867 2083.3752441,314.7893066 Z M2083.3337402,312.2990723 C2083.3337402,313.0461426 2083.5744629,313.6755371 2084.0559082,314.1875 C2084.5373535,314.6993408 2085.140625,314.9553223 2085.8654785,314.9553223 C2086.7285156,314.9553223 2087.4038086,314.623291 2087.8908691,313.9592285 C2088.3779297,313.295166 2088.6213379,312.3764648 2088.6213379,311.2033691 C2088.6213379,310.2127686 2088.3945313,309.4366455 2087.9406738,308.875 C2087.4868164,308.3132324 2086.8671875,308.0324707 2086.0812988,308.0324707 C2085.2788086,308.0324707 2084.6203613,308.3173828 2084.1057129,308.8874512 C2083.5910645,309.4573975 2083.3337402,310.1878662 2083.3337402,311.0788574 Z M2100.3752441,311.9089355 L2093.9504395,311.9089355 C2093.9780273,312.8884277 2094.246582,313.6451416 2094.7556152,314.1791992 C2095.2646484,314.7131348 2095.9758301,314.9802246 2096.888916,314.9802246 C2097.9182129,314.9802246 2098.8618164,314.6508789 2099.7194824,313.9924316 L2099.7194824,315.4450684 C2098.9116211,316.0150146 2097.8408203,316.3000488 2096.5070801,316.3000488 C2095.1789551,316.3000488 2094.1425781,315.8793945 2093.3984375,315.0383301 C2092.6540527,314.1971436 2092.2819824,313.029541 2092.2819824,311.5354004 C2092.2819824,310.1297607 2092.6899414,308.970459 2093.5063477,308.057373 C2094.3225098,307.1442871 2095.3364258,306.6877441 2096.548584,306.6877441 C2097.7495117,306.6877441 2098.6875,307.0737305 2099.3625488,307.8457031 C2100.0375977,308.6176758 2100.3752441,309.6981201 2100.3752441,311.0871582 Z M2098.748291,310.6057129 C2098.7426758,309.7756348 2098.5463867,309.133667 2098.1589355,308.6799316 C2097.7714844,308.2260742 2097.2265625,307.9992676 2096.5236816,307.9992676 C2095.8762207,307.9992676 2095.315918,308.2399902 2094.8427734,308.7214355 C2094.3696289,309.2028809 2094.0722656,309.8309326 2093.9504395,310.6057129 Z M2105.3474121,311.4274902 C2107.3173828,310.2874756 2108.7006836,309.0921631 2109.4978027,307.8415527 L2106.0944824,307.8415527 L2106.0944824,306.6794434 L2110.0622559,306.6794434 C2110.361084,305.9046631 2110.5769043,305.0579834 2110.7097168,304.1394043 L2106.9577637,304.1394043 L2106.9577637,302.9772949 L2116.9187012,302.9772949 L2116.9187012,304.1394043 L2112.0046387,304.1394043 C2111.8774414,305.1022949 2111.6948242,305.9489746 2111.4567871,306.6794434 L2117.7155762,306.6794434 L2117.7155762,307.8415527 L2113.7644043,307.8415527 C2114.8544922,309.3743896 2116.3374023,310.4257813 2118.213623,310.9958496 C2117.8374023,311.4163818 2117.5053711,311.8425293 2117.2175293,312.2741699 C2115.0371094,311.2116699 2113.4157715,309.7341309 2112.3532715,307.8415527 L2110.9836426,307.8415527 C2110.1313477,309.5404053 2108.5458984,311.0898438 2106.2272949,312.4899902 C2105.994873,312.1800537 2105.7016602,311.8259277 2105.3474121,311.4274902 Z M2110.626709,310.032959 L2111.8884277,310.032959 L2111.8884277,316.2419434 C2111.8884277,317.4703369 2111.2409668,318.0847168 2109.9460449,318.0847168 C2109.2817383,318.0847168 2108.684082,318.0791016 2108.1530762,318.0681152 C2108.0864258,317.6585693 2107.9980469,317.2103271 2107.8874512,316.7233887 C2108.4519043,316.8118896 2109.0107422,316.8562012 2109.564209,316.8562012 C2110.2724609,316.8562012 2110.626709,316.5185547 2110.626709,315.8435059 Z M2103.604248,311.2780762 C2104.0358887,311.4440918 2104.4785156,311.6044922 2104.932373,311.7595215 C2104.3679199,314.105835 2103.8642578,316.2419434 2103.4216309,318.1677246 L2101.9938965,317.736084 C2102.5805664,315.8435059 2103.1171875,313.6907959 2103.604248,311.2780762 Z M2114.4782715,312.157959 L2115.5241699,311.6599121 C2116.3432617,312.954834 2117.090332,314.2773438 2117.7653809,315.6276855 L2116.619873,316.1921387 C2116.0776367,315.052124 2115.3637695,313.7073975 2114.4782715,312.157959 Z M2108.1364746,311.8259277 L2109.298584,312.307373 C2108.6899414,313.8347168 2108.03125,315.1794434 2107.322998,316.3415527 C2106.9355469,316.142334 2106.5427246,315.96521 2106.1442871,315.8103027 C2106.9521484,314.6038818 2107.6162109,313.2757568 2108.1364746,311.8259277 Z M2112.369873,312.5231934 L2113.4655762,312.1247559 C2113.9526367,313.3642578 2114.4174805,314.7200928 2114.8601074,316.1921387 L2113.6149902,316.6071777 C2113.2607422,315.2126465 2112.8457031,313.8513184 2112.369873,312.5231934 Z M2102.4255371,306.4802246 C2103.222168,307.0335693 2104.2019043,307.7861328 2105.3640137,308.7380371 C2104.9545898,309.2028809 2104.6279297,309.5625 2104.3845215,309.8171387 C2103.2224121,308.7546387 2102.2924805,307.9577637 2101.595459,307.4265137 Z M2103.072998,302.1638184 C2104.0581055,302.9384766 2105.0153809,303.74646 2105.9450684,304.5876465 C2105.5688477,304.9638672 2105.2368164,305.3015137 2104.9489746,305.6003418 C2103.9086914,304.5710449 2103.0009766,303.7298584 2102.2263184,303.0769043 Z M2128.614502,304.1726074 L2134.9230957,304.1726074 L2134.9230957,317.8522949 L2133.6115723,317.8522949 L2133.6115723,316.1755371 L2129.9260254,316.1755371 L2129.9260254,317.8522949 L2128.614502,317.8522949 Z M2119.5002441,304.986084 L2121.8161621,304.986084 C2121.8271484,304.0950928 2121.8300781,303.1044922 2121.8244629,302.0144043 L2123.1359863,302.0144043 C2123.1359863,303.1156006 2123.1303711,304.1062012 2123.1193848,304.986084 L2126.9875488,304.986084 C2126.9321289,309.236084 2126.8603516,312.572998 2126.7717285,314.9968262 C2126.7275391,316.9888916 2125.9746094,317.9462891 2124.513916,317.8688965 C2124.0822754,317.8688965 2123.4458008,317.8522949 2122.6047363,317.8190918 C2122.5273438,317.354248 2122.4387207,316.8726807 2122.3391113,316.3747559 C2123.1137695,316.4743652 2123.7446289,316.5241699 2124.2316895,316.5241699 C2124.9731445,316.5462646 2125.3771973,316.0205078 2125.4436035,314.9470215 C2125.5654297,312.3239746 2125.637207,309.4241943 2125.6594238,306.2478027 L2123.1027832,306.2478027 C2123.0917969,307.0944824 2123.0751953,307.8138428 2123.0529785,308.4060059 C2123.0087891,312.7333984 2121.9682617,316.0648193 2119.9318848,318.4001465 C2119.6552734,318.0570068 2119.3286133,317.6862793 2118.9523926,317.2878418 C2120.7895508,315.2734375 2121.7248535,312.2685547 2121.7580566,308.2731934 C2121.7802734,307.6921387 2121.796875,307.0169678 2121.8078613,306.2478027 L2119.5002441,306.2478027 Z M2133.6115723,305.401123 L2129.9260254,305.401123 L2129.9260254,314.9802246 L2133.6115723,314.9802246 Z M2141.970459,317.9602051 L2140.9992676,317.9602051 L2140.9992676,316.0842285 C2139.7375488,316.0842285 2138.6916504,315.8240967 2137.8615723,315.3039551 L2137.8615723,313.635498 C2138.6916504,314.3161621 2139.7375488,314.6813965 2140.9992676,314.7312012 L2140.9992676,310.2902832 C2139.6655273,309.664917 2138.7995605,309.0810547 2138.401123,308.5388184 C2138.0026855,307.99646 2137.8034668,307.3544922 2137.8034668,306.6130371 C2137.8034668,305.7497559 2138.1008301,304.9985352 2138.6958008,304.359375 C2139.2905273,303.7202148 2140.0585938,303.3369141 2140.9992676,303.2097168 L2140.9992676,301.5910645 L2141.970459,301.5910645 L2141.970459,303.1765137 C2143.1821289,303.2207031 2144.0068359,303.392334 2144.4440918,303.6911621 L2144.4440918,305.3181152 C2143.8076172,304.8310547 2142.9829102,304.5682373 2141.970459,304.529541 L2141.970459,309.1115723 C2143.2211914,309.6815186 2144.081543,310.2501221 2144.552002,310.8173828 C2145.0224609,311.3845215 2145.2575684,312.0223389 2145.2575684,312.7307129 C2145.2575684,313.621582 2144.9614258,314.3535156 2144.3693848,314.9262695 C2143.7773438,315.4990234 2142.9775391,315.8601074 2141.970459,316.0095215 Z M2140.9992676,304.5793457 C2139.9367676,304.8117676 2139.4055176,305.4287109 2139.4055176,306.4304199 C2139.4055176,306.9118652 2139.519043,307.3103027 2139.7458496,307.6257324 C2139.9726563,307.9411621 2140.390625,308.2675781 2140.9992676,308.6052246 Z M2141.970459,314.6647949 C2143.09375,314.4212646 2143.6555176,313.8208008 2143.6555176,312.8635254 C2143.6555176,312.0610352 2143.09375,311.361084 2141.970459,310.7634277 Z M2147.4987793,311.5935059 C2147.4987793,310.0771484 2147.9221191,308.8804932 2148.7687988,308.003418 C2149.6154785,307.1262207 2150.7636719,306.6877441 2152.213623,306.6877441 C2153.5913086,306.6877441 2154.671875,307.1096191 2155.4550781,307.9536133 C2156.2380371,308.7974854 2156.6296387,309.9637451 2156.6296387,311.4523926 C2156.6296387,312.9022217 2156.2119141,314.0726318 2155.3762207,314.963623 C2154.5405273,315.8544922 2153.4199219,316.3000488 2152.0144043,316.3000488 C2150.6420898,316.3000488 2149.5463867,315.8682861 2148.7272949,315.005127 C2147.9082031,314.1418457 2147.4987793,313.0046387 2147.4987793,311.5935059 Z M2149.1589355,311.5437012 C2149.1589355,312.6005859 2149.4257813,313.4334717 2149.9599609,314.0422363 C2150.4938965,314.6508789 2151.2119141,314.9553223 2152.1140137,314.9553223 C2153.043457,314.9553223 2153.7519531,314.6578369 2154.2390137,314.0629883 C2154.7260742,313.4680176 2154.9694824,312.614502 2154.9694824,311.5021973 C2154.9694824,310.3842773 2154.7260742,309.5266113 2154.2390137,308.9289551 C2153.7519531,308.3312988 2153.043457,308.0324707 2152.1140137,308.0324707 C2151.2009277,308.0324707 2150.4799805,308.3450928 2149.9516602,308.970459 C2149.4230957,309.5957031 2149.1589355,310.4534912 2149.1589355,311.5437012 Z M2167.0056152,316.0842285 L2165.3869629,316.0842285 L2165.3869629,310.8630371 C2165.3867188,308.9759521 2164.6977539,308.0324707 2163.3200684,308.0324707 C2162.6062012,308.0324707 2162.0195313,308.2980957 2161.5603027,308.8293457 C2161.1010742,309.3605957 2160.8713379,310.032959 2160.8713379,310.8464355 L2160.8713379,316.0842285 L2159.2443848,316.0842285 L2159.2443848,306.9035645 L2160.8713379,306.9035645 L2160.8713379,308.4226074 L2160.904541,308.4226074 C2161.5961914,307.2659912 2162.6005859,306.6877441 2163.9177246,306.6877441 C2164.9248047,306.6877441 2165.6914063,307.0100098 2166.217041,307.6547852 C2166.7426758,308.2994385 2167.0056152,309.2387695 2167.0056152,310.4729004 Z M2173.7126465,314.0256348 L2172.3098145,318.4499512 L2171.1477051,318.4499512 L2172.1687012,314.0256348 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip16)\" />\n<clipPath id=\"clip17\"><path d=\"M1737,297 L2178,297 L2178,348 L1737,348 L1737,297 Z\" /></clipPath>\n<path d=\"M1744.0527344,341.9396973 L1743.081543,341.9396973 L1743.081543,340.0637207 C1741.8198242,340.0637207 1740.7739258,339.8035889 1739.9438477,339.2834473 L1739.9438477,337.6149902 C1740.7739258,338.2956543 1741.8198242,338.6608887 1743.081543,338.7106934 L1743.081543,334.2697754 C1741.7478027,333.6444092 1740.8818359,333.0605469 1740.4833984,332.5183105 C1740.0849609,331.9759521 1739.8857422,331.3339844 1739.8857422,330.5925293 C1739.8857422,329.729248 1740.1831055,328.9780273 1740.7780762,328.3388672 C1741.3729248,327.699707 1742.1407471,327.3164063 1743.081543,327.189209 L1743.081543,325.5705566 L1744.0527344,325.5705566 L1744.0527344,327.1560059 C1745.2645264,327.2001953 1746.0891113,327.3718262 1746.5263672,327.6706543 L1746.5263672,329.2976074 C1745.8898926,328.8105469 1745.0653076,328.5477295 1744.0527344,328.5090332 L1744.0527344,333.0910645 C1745.3033447,333.6610107 1746.1638184,334.2296143 1746.6342773,334.796875 C1747.1046143,335.3640137 1747.3398438,336.0018311 1747.3398438,336.7102051 C1747.3398438,337.6010742 1747.0437012,338.3330078 1746.4516602,338.9057617 C1745.8594971,339.4785156 1745.0598145,339.8395996 1744.0527344,339.9890137 Z M1743.081543,328.5588379 C1742.019043,328.7912598 1741.487793,329.4082031 1741.487793,330.4099121 C1741.487793,330.8913574 1741.6011963,331.2897949 1741.828125,331.6052246 C1742.0549316,331.9206543 1742.4727783,332.2470703 1743.081543,332.5847168 Z M1744.0527344,338.6442871 C1745.1760254,338.4007568 1745.737793,337.800293 1745.737793,336.8430176 C1745.737793,336.0405273 1745.1760254,335.3405762 1744.0527344,334.7429199 Z M1749.5810547,335.572998 C1749.5810547,334.0566406 1750.0043945,332.8599854 1750.8510742,331.9829102 C1751.6977539,331.1057129 1752.8459473,330.6672363 1754.2958984,330.6672363 C1755.6737061,330.6672363 1756.7542725,331.0891113 1757.5373535,331.9331055 C1758.3203125,332.7769775 1758.7119141,333.9432373 1758.7119141,335.4318848 C1758.7119141,336.8817139 1758.2940674,338.052124 1757.4584961,338.9431152 C1756.6228027,339.8339844 1755.5021973,340.279541 1754.0966797,340.279541 C1752.7242432,340.279541 1751.62854,339.8477783 1750.8095703,338.9846191 C1749.9904785,338.1213379 1749.5810547,336.9841309 1749.5810547,335.572998 Z M1751.2412109,335.5231934 C1751.2412109,336.5800781 1751.5081787,337.4129639 1752.0422363,338.0217285 C1752.5761719,338.6303711 1753.2941895,338.9348145 1754.1962891,338.9348145 C1755.1258545,338.9348145 1755.8342285,338.6373291 1756.3212891,338.0424805 C1756.8082275,337.4475098 1757.0517578,336.5939941 1757.0517578,335.4816895 C1757.0517578,334.3637695 1756.8082275,333.5061035 1756.3212891,332.9084473 C1755.8342285,332.310791 1755.1258545,332.0119629 1754.1962891,332.0119629 C1753.2832031,332.0119629 1752.5623779,332.324585 1752.0339355,332.9499512 C1751.5053711,333.5751953 1751.2412109,334.4329834 1751.2412109,335.5231934 Z M1769.0878906,340.0637207 L1767.4692383,340.0637207 L1767.4692383,334.8425293 C1767.4691162,332.9554443 1766.7801514,332.0119629 1765.4023438,332.0119629 C1764.6884766,332.0119629 1764.1018066,332.2775879 1763.6425781,332.8088379 C1763.1832275,333.3400879 1762.9536133,334.0124512 1762.9536133,334.8259277 L1762.9536133,340.0637207 L1761.3266602,340.0637207 L1761.3266602,330.8830566 L1762.9536133,330.8830566 L1762.9536133,332.4020996 L1762.9868164,332.4020996 C1763.6784668,331.2454834 1764.6828613,330.6672363 1766,330.6672363 C1767.0070801,330.6672363 1767.7735596,330.989502 1768.2993164,331.6342773 C1768.8249512,332.2789307 1769.0878906,333.2182617 1769.0878906,334.4523926 Z M1778.4594727,339.6486816 C1777.7565918,340.0692139 1776.9099121,340.279541 1775.9194336,340.279541 C1774.5911865,340.279541 1773.5231934,339.8533936 1772.715332,339.0012207 C1771.9073486,338.1489258 1771.503418,337.0449219 1771.503418,335.689209 C1771.503418,334.18396 1771.939209,332.9707031 1772.810791,332.0493164 C1773.682373,331.1279297 1774.8486328,330.6672363 1776.3095703,330.6672363 C1777.1506348,330.6672363 1777.8701172,330.8166504 1778.4677734,331.1154785 L1778.4677734,332.7258301 C1777.8203125,332.2498779 1777.1008301,332.0119629 1776.3095703,332.0119629 C1775.3798828,332.0119629 1774.6230469,332.3342285 1774.0393066,332.9790039 C1773.4554443,333.6236572 1773.1635742,334.4827881 1773.1635742,335.5563965 C1773.1635742,336.6132813 1773.4388428,337.4406738 1773.989502,338.0383301 C1774.5400391,338.6359863 1775.282959,338.9348145 1776.2182617,338.9348145 C1777.0095215,338.9348145 1777.7565918,338.6746826 1778.4594727,338.154541 Z M1788.3789063,335.8884277 L1781.9541016,335.8884277 C1781.9816895,336.8679199 1782.2501221,337.6246338 1782.7592773,338.1586914 C1783.2683105,338.692627 1783.9794922,338.9597168 1784.8925781,338.9597168 C1785.921875,338.9597168 1786.8653564,338.6303711 1787.7231445,337.9719238 L1787.7231445,339.4245605 C1786.9151611,339.9945068 1785.8443604,340.279541 1784.5107422,340.279541 C1783.1826172,340.279541 1782.1463623,339.8588867 1781.4020996,339.0178223 C1780.6577148,338.1766357 1780.2856445,337.0090332 1780.2856445,335.5148926 C1780.2856445,334.1092529 1780.6937256,332.9499512 1781.5100098,332.0368652 C1782.3261719,331.1237793 1783.34021,330.6672363 1784.5522461,330.6672363 C1785.7530518,330.6672363 1786.69104,331.0532227 1787.3662109,331.8251953 C1788.0412598,332.597168 1788.3789063,333.6776123 1788.3789063,335.0666504 Z M1786.7519531,334.5852051 C1786.7463379,333.755127 1786.5499268,333.1131592 1786.1625977,332.6594238 C1785.7751465,332.2055664 1785.2301025,331.9787598 1784.5273438,331.9787598 C1783.8798828,331.9787598 1783.319458,332.2194824 1782.8464355,332.7009277 C1782.373291,333.182373 1782.0758057,333.8104248 1781.9541016,334.5852051 Z M1799.6928711,338.005127 L1798.2900391,342.4294434 L1797.1279297,342.4294434 L1798.1489258,338.005127 Z M1817.6474609,341.9396973 L1816.6762695,341.9396973 L1816.6762695,340.0637207 C1815.4145508,340.0637207 1814.3686523,339.8035889 1813.5385742,339.2834473 L1813.5385742,337.6149902 C1814.3686523,338.2956543 1815.4145508,338.6608887 1816.6762695,338.7106934 L1816.6762695,334.2697754 C1815.3425293,333.6444092 1814.4765625,333.0605469 1814.078125,332.5183105 C1813.6796875,331.9759521 1813.4804688,331.3339844 1813.4804688,330.5925293 C1813.4804688,329.729248 1813.777832,328.9780273 1814.3728027,328.3388672 C1814.9676514,327.699707 1815.7354736,327.3164063 1816.6762695,327.189209 L1816.6762695,325.5705566 L1817.6474609,325.5705566 L1817.6474609,327.1560059 C1818.8592529,327.2001953 1819.6838379,327.3718262 1820.1210938,327.6706543 L1820.1210938,329.2976074 C1819.4846191,328.8105469 1818.6600342,328.5477295 1817.6474609,328.5090332 L1817.6474609,333.0910645 C1818.8980713,333.6610107 1819.7585449,334.2296143 1820.2290039,334.796875 C1820.6993408,335.3640137 1820.9345703,336.0018311 1820.9345703,336.7102051 C1820.9345703,337.6010742 1820.6384277,338.3330078 1820.0463867,338.9057617 C1819.4542236,339.4785156 1818.654541,339.8395996 1817.6474609,339.9890137 Z M1816.6762695,328.5588379 C1815.6137695,328.7912598 1815.0825195,329.4082031 1815.0825195,330.4099121 C1815.0825195,330.8913574 1815.1959229,331.2897949 1815.4228516,331.6052246 C1815.6496582,331.9206543 1816.0675049,332.2470703 1816.6762695,332.5847168 Z M1817.6474609,338.6442871 C1818.770752,338.4007568 1819.3325195,337.800293 1819.3325195,336.8430176 C1819.3325195,336.0405273 1818.770752,335.3405762 1817.6474609,334.7429199 Z M1823.1757813,335.572998 C1823.1757813,334.0566406 1823.5991211,332.8599854 1824.4458008,331.9829102 C1825.2924805,331.1057129 1826.4406738,330.6672363 1827.890625,330.6672363 C1829.2684326,330.6672363 1830.348999,331.0891113 1831.1320801,331.9331055 C1831.9150391,332.7769775 1832.3066406,333.9432373 1832.3066406,335.4318848 C1832.3066406,336.8817139 1831.8887939,338.052124 1831.0532227,338.9431152 C1830.2175293,339.8339844 1829.0969238,340.279541 1827.6914063,340.279541 C1826.3189697,340.279541 1825.2232666,339.8477783 1824.4042969,338.9846191 C1823.5852051,338.1213379 1823.1757813,336.9841309 1823.1757813,335.572998 Z M1824.8359375,335.5231934 C1824.8359375,336.5800781 1825.1029053,337.4129639 1825.6369629,338.0217285 C1826.1708984,338.6303711 1826.888916,338.9348145 1827.7910156,338.9348145 C1828.7205811,338.9348145 1829.4289551,338.6373291 1829.9160156,338.0424805 C1830.4029541,337.4475098 1830.6464844,336.5939941 1830.6464844,335.4816895 C1830.6464844,334.3637695 1830.4029541,333.5061035 1829.9160156,332.9084473 C1829.4289551,332.310791 1828.7205811,332.0119629 1827.7910156,332.0119629 C1826.8779297,332.0119629 1826.1571045,332.324585 1825.6286621,332.9499512 C1825.1000977,333.5751953 1824.8359375,334.4329834 1824.8359375,335.5231934 Z M1839.6279297,327.8615723 C1839.3234863,327.7010498 1838.9942627,327.6208496 1838.6401367,327.6208496 C1837.6218262,327.6208496 1837.112793,328.251709 1837.112793,329.5134277 L1837.112793,330.8830566 L1839.2626953,330.8830566 L1839.2626953,332.2277832 L1837.112793,332.2277832 L1837.112793,340.0637207 L1835.5024414,340.0637207 L1835.5024414,332.2277832 L1833.9335938,332.2277832 L1833.9335938,330.8830566 L1835.5024414,330.8830566 L1835.5024414,329.4387207 C1835.5024414,328.4536133 1835.7860107,327.6802979 1836.3532715,327.1186523 C1836.9204102,326.5568848 1837.6412354,326.276123 1838.515625,326.276123 C1838.9804688,326.276123 1839.3511963,326.3286133 1839.6279297,326.4338379 Z M1845.6958008,327.8615723 C1845.3913574,327.7010498 1845.0621338,327.6208496 1844.7080078,327.6208496 C1843.6896973,327.6208496 1843.1806641,328.251709 1843.1806641,329.5134277 L1843.1806641,330.8830566 L1845.3305664,330.8830566 L1845.3305664,332.2277832 L1843.1806641,332.2277832 L1843.1806641,340.0637207 L1841.5703125,340.0637207 L1841.5703125,332.2277832 L1840.0014648,332.2277832 L1840.0014648,330.8830566 L1841.5703125,330.8830566 L1841.5703125,329.4387207 C1841.5703125,328.4536133 1841.8538818,327.6802979 1842.4211426,327.1186523 C1842.9882813,326.5568848 1843.7091064,326.276123 1844.5834961,326.276123 C1845.0483398,326.276123 1845.4190674,326.3286133 1845.6958008,326.4338379 Z M1850.734375,338.005127 L1849.331543,342.4294434 L1848.1694336,342.4294434 L1849.1904297,338.005127 Z M1868.6889648,341.9396973 L1867.7177734,341.9396973 L1867.7177734,340.0637207 C1866.4560547,340.0637207 1865.4101563,339.8035889 1864.5800781,339.2834473 L1864.5800781,337.6149902 C1865.4101563,338.2956543 1866.4560547,338.6608887 1867.7177734,338.7106934 L1867.7177734,334.2697754 C1866.3840332,333.6444092 1865.5180664,333.0605469 1865.1196289,332.5183105 C1864.7211914,331.9759521 1864.5219727,331.3339844 1864.5219727,330.5925293 C1864.5219727,329.729248 1864.8193359,328.9780273 1865.4143066,328.3388672 C1866.0091553,327.699707 1866.7769775,327.3164063 1867.7177734,327.189209 L1867.7177734,325.5705566 L1868.6889648,325.5705566 L1868.6889648,327.1560059 C1869.9007568,327.2001953 1870.7253418,327.3718262 1871.1625977,327.6706543 L1871.1625977,329.2976074 C1870.526123,328.8105469 1869.7015381,328.5477295 1868.6889648,328.5090332 L1868.6889648,333.0910645 C1869.9395752,333.6610107 1870.8000488,334.2296143 1871.2705078,334.796875 C1871.7408447,335.3640137 1871.9760742,336.0018311 1871.9760742,336.7102051 C1871.9760742,337.6010742 1871.6799316,338.3330078 1871.0878906,338.9057617 C1870.4957275,339.4785156 1869.6960449,339.8395996 1868.6889648,339.9890137 Z M1867.7177734,328.5588379 C1866.6552734,328.7912598 1866.1240234,329.4082031 1866.1240234,330.4099121 C1866.1240234,330.8913574 1866.2374268,331.2897949 1866.4643555,331.6052246 C1866.6911621,331.9206543 1867.1090088,332.2470703 1867.7177734,332.5847168 Z M1868.6889648,338.6442871 C1869.8122559,338.4007568 1870.3740234,337.800293 1870.3740234,336.8430176 C1870.3740234,336.0405273 1869.8122559,335.3405762 1868.6889648,334.7429199 Z M1882.3105469,335.8884277 L1875.8857422,335.8884277 C1875.9133301,336.8679199 1876.1817627,337.6246338 1876.690918,338.1586914 C1877.1999512,338.692627 1877.9111328,338.9597168 1878.8242188,338.9597168 C1879.8535156,338.9597168 1880.7969971,338.6303711 1881.6547852,337.9719238 L1881.6547852,339.4245605 C1880.8468018,339.9945068 1879.776001,340.279541 1878.4423828,340.279541 C1877.1142578,340.279541 1876.0780029,339.8588867 1875.3337402,339.0178223 C1874.5893555,338.1766357 1874.2172852,337.0090332 1874.2172852,335.5148926 C1874.2172852,334.1092529 1874.6253662,332.9499512 1875.4416504,332.0368652 C1876.2578125,331.1237793 1877.2718506,330.6672363 1878.4838867,330.6672363 C1879.6846924,330.6672363 1880.6226807,331.0532227 1881.2978516,331.8251953 C1881.9729004,332.597168 1882.3105469,333.6776123 1882.3105469,335.0666504 Z M1880.6835938,334.5852051 C1880.6779785,333.755127 1880.4815674,333.1131592 1880.0942383,332.6594238 C1879.7067871,332.2055664 1879.1617432,331.9787598 1878.4589844,331.9787598 C1877.8115234,331.9787598 1877.2510986,332.2194824 1876.7780762,332.7009277 C1876.3049316,333.182373 1876.0074463,333.8104248 1875.8857422,334.5852051 Z M1897.9824219,340.0637207 L1896.3554688,340.0637207 L1896.3554688,334.7927246 C1896.3554688,333.7966309 1896.2004395,333.0841064 1895.890625,332.6552734 C1895.5806885,332.2263184 1895.0715332,332.0119629 1894.3632813,332.0119629 C1893.765625,332.0119629 1893.2536621,332.2913818 1892.8276367,332.8503418 C1892.4014893,333.4091797 1892.1884766,334.0705566 1892.1884766,334.8342285 L1892.1884766,340.0637207 L1890.5615234,340.0637207 L1890.5615234,334.626709 C1890.5614014,332.8835449 1889.8890381,332.0119629 1888.5444336,332.0119629 C1887.9245605,332.0119629 1887.411377,332.2775879 1887.0046387,332.8088379 C1886.5979004,333.3400879 1886.3945313,334.0179443 1886.3945313,334.8425293 L1886.3945313,340.0637207 L1884.7675781,340.0637207 L1884.7675781,330.8830566 L1886.3945313,330.8830566 L1886.3945313,332.3356934 L1886.4277344,332.3356934 C1887.0806885,331.2233887 1888.0352783,330.6672363 1889.2915039,330.6672363 C1889.9056396,330.6672363 1890.447998,330.8359375 1890.918457,331.173584 C1891.3887939,331.5111084 1891.715332,331.9676514 1891.8979492,332.5432129 C1892.5786133,331.2924805 1893.5968018,330.6672363 1894.9526367,330.6672363 C1896.9724121,330.6672363 1897.9822998,331.9123535 1897.9824219,334.4025879 Z M1900.9790039,327.645752 C1900.9790039,327.3579102 1901.0771484,327.1158447 1901.2736816,326.9194336 C1901.4700928,326.7229004 1901.7121582,326.6247559 1902,326.6247559 C1902.2932129,326.6247559 1902.5408936,326.7215576 1902.7429199,326.9152832 C1902.9448242,327.1088867 1903.0458984,327.352417 1903.0458984,327.645752 C1903.0458984,327.9334717 1902.9448242,328.1728516 1902.7429199,328.3637695 C1902.5408936,328.5546875 1902.2932129,328.6501465 1902,328.6501465 C1901.706665,328.6501465 1901.4631348,328.5546875 1901.2695313,328.3637695 C1901.0758057,328.1728516 1900.9790039,327.9334717 1900.9790039,327.645752 Z M1901.1699219,340.0637207 L1901.1699219,330.8830566 L1902.796875,330.8830566 L1902.796875,340.0637207 Z M1910.2426758,339.9724121 C1909.8884277,340.1660156 1909.40979,340.2629395 1908.8066406,340.2629395 C1907.1630859,340.2629395 1906.3413086,339.3525391 1906.3413086,337.5319824 L1906.3413086,332.2277832 L1904.7641602,332.2277832 L1904.7641602,330.8830566 L1906.3413086,330.8830566 L1906.3413086,328.6750488 L1907.9599609,328.1604004 L1907.9599609,330.8830566 L1910.2426758,330.8830566 L1910.2426758,332.2277832 L1907.9599609,332.2277832 L1907.9599609,337.2414551 C1907.9599609,337.8446045 1908.0622559,338.2762451 1908.2670898,338.536377 C1908.4718018,338.7963867 1908.8121338,338.9265137 1909.2880859,338.9265137 C1909.6533203,338.9265137 1909.9714355,338.8240967 1910.2426758,338.6193848 Z M1911.4213867,328.7995605 L1919.3901367,328.7995605 C1918.8311768,327.7370605 1918.3939209,326.9622803 1918.0786133,326.4753418 L1919.3735352,325.861084 C1919.6833496,326.3369141 1920.1481934,327.1116943 1920.7680664,328.1853027 L1919.5561523,328.7995605 L1927.425293,328.7995605 L1927.425293,330.0612793 L1917.3564453,330.0612793 C1917.317627,331.0683594 1917.276123,331.9261475 1917.2319336,332.6345215 L1925.2504883,332.6345215 C1925.1175537,335.0361328 1924.9737549,337.1224365 1924.8188477,338.8933105 C1924.6970215,340.8964844 1923.7231445,341.8981934 1921.8969727,341.8981934 C1921.0557861,341.8981934 1919.932373,341.8538818 1918.5268555,341.7653809 C1918.4714355,341.3447266 1918.3884277,340.8355713 1918.277832,340.2380371 C1919.6833496,340.4261475 1920.8233643,340.5202637 1921.6977539,340.5202637 C1922.7159424,340.5202637 1923.2858887,339.9169922 1923.4077148,338.7106934 C1923.5405273,337.3935547 1923.6567383,335.7832031 1923.7563477,333.8796387 L1917.140625,333.8796387 C1916.8306885,337.5319824 1915.1400146,340.3652344 1912.0688477,342.3796387 C1911.7700195,342.0253906 1911.432373,341.6491699 1911.0561523,341.2507324 C1913.9779053,339.3249512 1915.5440674,336.7460938 1915.7543945,333.5144043 C1915.8317871,332.6400146 1915.8955078,331.4890137 1915.9453125,330.0612793 L1911.4213867,330.0612793 Z M1941.3955078,336.5358887 C1942.4580078,337.9857178 1943.6035156,339.6513672 1944.8320313,341.532959 C1944.3892822,341.7874756 1943.9576416,342.0419922 1943.5371094,342.2966309 C1943.2271729,341.7819824 1942.9228516,341.2839355 1942.6240234,340.8024902 C1938.9937744,341.1013184 1936.149292,341.3503418 1934.0908203,341.5495605 L1933.4765625,340.1052246 C1934.1738281,339.7952881 1934.8544922,339.1478271 1935.5185547,338.1628418 C1936.2490234,337.1224365 1936.9268799,336.0267334 1937.5522461,334.8757324 L1933.1943359,334.8757324 L1933.1943359,333.6804199 L1938.4072266,333.6804199 L1938.4072266,330.1608887 L1934.0078125,330.1608887 L1934.0078125,328.9655762 L1938.4072266,328.9655762 L1938.4072266,325.9274902 L1939.7353516,325.9274902 L1939.7353516,328.9655762 L1944.3339844,328.9655762 L1944.3339844,330.1608887 L1939.7353516,330.1608887 L1939.7353516,333.6804199 L1945.1142578,333.6804199 L1945.1142578,334.8757324 L1939.2207031,334.8757324 C1937.9865723,336.9066162 1936.7802734,338.6608887 1935.6015625,340.1384277 C1937.7099609,340.0388184 1939.8183594,339.8894043 1941.9267578,339.6901855 C1941.3566895,338.7991943 1940.8144531,337.9802246 1940.2998047,337.2331543 Z M1931.1025391,335.2077637 C1931.5119629,335.3847656 1931.9492188,335.5673828 1932.4140625,335.7556152 C1931.6281738,338.1130371 1930.9420166,340.2435303 1930.3554688,342.1472168 L1928.9277344,341.6657715 C1929.6582031,339.7177734 1930.3830566,337.5651855 1931.1025391,335.2077637 Z M1929.4755859,330.4431152 C1930.3056641,331.0296631 1931.279541,331.7822266 1932.3974609,332.7009277 C1931.987915,333.1657715 1931.6669922,333.5253906 1931.4345703,333.7800293 C1930.1838379,332.6621094 1929.2541504,331.8708496 1928.6455078,331.4060059 Z M1930.1230469,326.1433105 C1931.0084229,326.8515625 1931.9602051,327.6595459 1932.9785156,328.5671387 C1932.6021729,328.9544678 1932.2756348,329.2976074 1931.9990234,329.5964355 C1930.9807129,328.5892334 1930.0732422,327.7425537 1929.2763672,327.0563965 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip17)\" />\n<clipPath id=\"clip18\"><path d=\"M1729,441 L2194,441 L2194,508 L1729,508 L1729,441 Z\" /></clipPath>\n<path d=\"M1739,443 C1734.581665,443 1731,446.581665 1731,451 L1731,497 C1731,501.418335 1734.581665,505 1739,505 L2183,505 C2187.4182129,505 2191,501.418335 2191,497 L2191,451 C2191,446.581665 2187.4182129,443 2183,443 Z\" style=\"fill:rgb(211,223,255);stroke:none\" clip-path=\"url(#clip18)\" />\n<clipPath id=\"clip19\"><path d=\"M1729,441 L2194,441 L2194,508 L1729,508 L1729,441 Z\" /></clipPath>\n<path d=\"M1739,443 C1734.581665,443 1731,446.581665 1731,451 L1731,497 C1731,501.418335 1734.581665,505 1739,505 L2183,505 C2187.4182129,505 2191,501.418335 2191,497 L2191,451 C2191,446.581665 2187.4182129,443 2183,443 Z\" style=\"fill:none;stroke:rgb(0,64,128)\" clip-path=\"url(#clip19)\" />\n<clipPath id=\"clip20\"><path d=\"M1742,449 L2181,449 L2181,500 L1742,500 L1742,449 Z\" /></clipPath>\n<path d=\"M1747.2299805,467.9306641 L1747.2299805,454.3422852 L1748.8569336,454.3422852 L1748.8569336,467.9306641 Z M1751.6958008,455.5126953 C1751.6958008,455.2248535 1751.7939453,454.9827881 1751.9904785,454.786377 C1752.1868896,454.5898438 1752.4289551,454.4916992 1752.7167969,454.4916992 C1753.0100098,454.4916992 1753.2576904,454.588501 1753.4597168,454.7822266 C1753.6616211,454.9758301 1753.7626953,455.2193604 1753.7626953,455.5126953 C1753.7626953,455.800415 1753.6616211,456.0397949 1753.4597168,456.2307129 C1753.2576904,456.4216309 1753.0100098,456.5170898 1752.7167969,456.5170898 C1752.4234619,456.5170898 1752.1799316,456.4216309 1751.9863281,456.2307129 C1751.7926025,456.0397949 1751.6958008,455.800415 1751.6958008,455.5126953 Z M1751.8867188,467.9306641 L1751.8867188,458.75 L1753.5136719,458.75 L1753.5136719,467.9306641 Z M1761.2583008,455.7285156 C1760.9538574,455.5679932 1760.6246338,455.487793 1760.2705078,455.487793 C1759.2521973,455.487793 1758.7431641,456.1186523 1758.7431641,457.3803711 L1758.7431641,458.75 L1760.8930664,458.75 L1760.8930664,460.0947266 L1758.7431641,460.0947266 L1758.7431641,467.9306641 L1757.1328125,467.9306641 L1757.1328125,460.0947266 L1755.5639648,460.0947266 L1755.5639648,458.75 L1757.1328125,458.75 L1757.1328125,457.3056641 C1757.1328125,456.3205566 1757.4163818,455.5472412 1757.9836426,454.9855957 C1758.5507813,454.4238281 1759.2716064,454.1430664 1760.1459961,454.1430664 C1760.6108398,454.1430664 1760.9815674,454.1955566 1761.2583008,454.3007813 Z M1770.0986328,463.7553711 L1763.6738281,463.7553711 C1763.701416,464.7348633 1763.9698486,465.4915771 1764.4790039,466.0256348 C1764.9880371,466.5595703 1765.6992188,466.8266602 1766.6123047,466.8266602 C1767.6416016,466.8266602 1768.585083,466.4973145 1769.4428711,465.8388672 L1769.4428711,467.2915039 C1768.6348877,467.8614502 1767.5640869,468.1464844 1766.2304688,468.1464844 C1764.9023438,468.1464844 1763.8660889,467.7258301 1763.1218262,466.8847656 C1762.3774414,466.0435791 1762.0053711,464.8759766 1762.0053711,463.3818359 C1762.0053711,461.9761963 1762.4134521,460.8168945 1763.2297363,459.9038086 C1764.0458984,458.9907227 1765.0599365,458.5341797 1766.2719727,458.5341797 C1767.4727783,458.5341797 1768.4107666,458.920166 1769.0859375,459.6921387 C1769.7609863,460.4641113 1770.0986328,461.5445557 1770.0986328,462.9335938 Z M1768.4716797,462.4521484 C1768.4660645,461.6220703 1768.2696533,460.9801025 1767.8823242,460.5263672 C1767.494873,460.0725098 1766.9498291,459.8457031 1766.2470703,459.8457031 C1765.5996094,459.8457031 1765.0391846,460.0864258 1764.5661621,460.5678711 C1764.0930176,461.0493164 1763.7955322,461.6773682 1763.6738281,462.4521484 Z M1778.8974609,467.515625 C1778.1945801,467.9361572 1777.3479004,468.1464844 1776.3574219,468.1464844 C1775.0291748,468.1464844 1773.9611816,467.7203369 1773.1533203,466.8681641 C1772.3453369,466.0158691 1771.9414063,464.9118652 1771.9414063,463.5561523 C1771.9414063,462.0509033 1772.3771973,460.8376465 1773.2487793,459.9162598 C1774.1203613,458.994873 1775.2866211,458.5341797 1776.7475586,458.5341797 C1777.588623,458.5341797 1778.3081055,458.6835938 1778.9057617,458.9824219 L1778.9057617,460.5927734 C1778.2583008,460.1168213 1777.5388184,459.8789063 1776.7475586,459.8789063 C1775.8178711,459.8789063 1775.0610352,460.2011719 1774.4772949,460.8459473 C1773.8934326,461.4906006 1773.6015625,462.3497314 1773.6015625,463.4233398 C1773.6015625,464.4802246 1773.8768311,465.3076172 1774.4274902,465.9052734 C1774.9780273,466.5029297 1775.7209473,466.8017578 1776.65625,466.8017578 C1777.4475098,466.8017578 1778.1945801,466.541626 1778.8974609,466.0214844 Z M1788.8085938,458.75 L1784.6416016,469.3168945 C1783.8668213,471.2757568 1782.7739258,472.2553711 1781.362793,472.2553711 C1780.9587402,472.2553711 1780.612915,472.2110596 1780.3251953,472.1225586 L1780.3251953,470.6948242 C1780.640625,470.8165283 1780.9449463,470.8774414 1781.2382813,470.8774414 C1781.9742432,470.8774414 1782.5249023,470.4458008 1782.8901367,469.5825195 L1783.5957031,467.9140625 L1779.9931641,458.75 L1781.7944336,458.75 L1784.1933594,465.6479492 L1784.3925781,466.4033203 L1784.434082,466.4033203 C1784.4672852,466.2316895 1784.5336914,465.9854736 1784.6333008,465.6645508 L1787.1401367,458.75 Z M1796.9516602,467.515625 C1796.2487793,467.9361572 1795.4020996,468.1464844 1794.4116211,468.1464844 C1793.083374,468.1464844 1792.0153809,467.7203369 1791.2075195,466.8681641 C1790.3995361,466.0158691 1789.9956055,464.9118652 1789.9956055,463.5561523 C1789.9956055,462.0509033 1790.4313965,460.8376465 1791.3029785,459.9162598 C1792.1745605,458.994873 1793.3408203,458.5341797 1794.8017578,458.5341797 C1795.6428223,458.5341797 1796.3623047,458.6835938 1796.9599609,458.9824219 L1796.9599609,460.5927734 C1796.3125,460.1168213 1795.5930176,459.8789063 1794.8017578,459.8789063 C1793.8720703,459.8789063 1793.1152344,460.2011719 1792.5314941,460.8459473 C1791.9476318,461.4906006 1791.6557617,462.3497314 1791.6557617,463.4233398 C1791.6557617,464.4802246 1791.9310303,465.3076172 1792.4816895,465.9052734 C1793.0322266,466.5029297 1793.7751465,466.8017578 1794.7104492,466.8017578 C1795.501709,466.8017578 1796.2487793,466.541626 1796.9516602,466.0214844 Z M1799.3837891,467.9306641 L1799.3837891,454.3422852 L1801.0107422,454.3422852 L1801.0107422,467.9306641 Z M1811.527832,463.7553711 L1805.1030273,463.7553711 C1805.1306152,464.7348633 1805.3990479,465.4915771 1805.9082031,466.0256348 C1806.4172363,466.5595703 1807.128418,466.8266602 1808.0415039,466.8266602 C1809.0708008,466.8266602 1810.0142822,466.4973145 1810.8720703,465.8388672 L1810.8720703,467.2915039 C1810.0640869,467.8614502 1808.9932861,468.1464844 1807.659668,468.1464844 C1806.331543,468.1464844 1805.2952881,467.7258301 1804.5510254,466.8847656 C1803.8066406,466.0435791 1803.4345703,464.8759766 1803.4345703,463.3818359 C1803.4345703,461.9761963 1803.8426514,460.8168945 1804.6589355,459.9038086 C1805.4750977,458.9907227 1806.4891357,458.5341797 1807.7011719,458.5341797 C1808.9019775,458.5341797 1809.8399658,458.920166 1810.5151367,459.6921387 C1811.1901855,460.4641113 1811.527832,461.5445557 1811.527832,462.9335938 Z M1809.9008789,462.4521484 C1809.8952637,461.6220703 1809.6988525,460.9801025 1809.3115234,460.5263672 C1808.9240723,460.0725098 1808.3790283,459.8457031 1807.6762695,459.8457031 C1807.0288086,459.8457031 1806.4683838,460.0864258 1805.9953613,460.5678711 C1805.5222168,461.0493164 1805.2247314,461.6773682 1805.1030273,462.4521484 Z M1825.8217773,467.9306641 L1825.8217773,459.4140625 C1825.8217773,458.7111816 1825.8632813,457.8673096 1825.9462891,456.8823242 L1825.9047852,456.8823242 C1825.7608643,457.5020752 1825.6335449,457.9337158 1825.5229492,458.1772461 L1821.28125,467.9306641 L1820.3598633,467.9306641 L1816.1264648,458.2519531 C1816.0268555,458.0305176 1815.8995361,457.5739746 1815.7446289,456.8823242 L1815.6948242,456.8823242 C1815.7501221,457.4799805 1815.777832,458.3487549 1815.777832,459.4887695 L1815.777832,467.9306641 L1814.1923828,467.9306641 L1814.1923828,455.0727539 L1816.4418945,455.0727539 L1820.2353516,463.8881836 C1820.5230713,464.5632324 1820.7139893,465.0889893 1820.8081055,465.465332 L1820.8662109,465.465332 C1821.1539307,464.6739502 1821.355957,464.137207 1821.472168,463.8549805 L1825.3320313,455.0727539 L1827.4736328,455.0727539 L1827.4736328,467.9306641 Z M1830.8935547,455.5126953 C1830.8935547,455.2248535 1830.9916992,454.9827881 1831.1882324,454.786377 C1831.3846436,454.5898438 1831.626709,454.4916992 1831.9145508,454.4916992 C1832.2077637,454.4916992 1832.4554443,454.588501 1832.6574707,454.7822266 C1832.859375,454.9758301 1832.9604492,455.2193604 1832.9604492,455.5126953 C1832.9604492,455.800415 1832.859375,456.0397949 1832.6574707,456.2307129 C1832.4554443,456.4216309 1832.2077637,456.5170898 1831.9145508,456.5170898 C1831.6212158,456.5170898 1831.3776855,456.4216309 1831.184082,456.2307129 C1830.9903564,456.0397949 1830.8935547,455.800415 1830.8935547,455.5126953 Z M1831.0844727,467.9306641 L1831.0844727,458.75 L1832.7114258,458.75 L1832.7114258,467.9306641 Z M1842.6972656,458.75 L1839.6259766,463.3735352 L1842.6557617,467.9306641 L1840.7631836,467.9306641 L1839.0117188,465.0087891 C1838.9176025,464.8537598 1838.78479,464.6158447 1838.6132813,464.2949219 L1838.5800781,464.2949219 C1838.5744629,464.328125 1838.4361572,464.56604 1838.1650391,465.0087891 L1836.3803711,467.9306641 L1834.5126953,467.9306641 L1837.6337891,463.4233398 L1834.6538086,458.75 L1836.5463867,458.75 L1838.2646484,461.8212891 C1838.369751,462.0093994 1838.4970703,462.2529297 1838.6464844,462.5517578 L1838.6796875,462.5517578 L1840.9125977,458.75 Z M1844.4238281,455.5126953 C1844.4238281,455.2248535 1844.5219727,454.9827881 1844.7185059,454.786377 C1844.914917,454.5898438 1845.1569824,454.4916992 1845.4448242,454.4916992 C1845.7380371,454.4916992 1845.9857178,454.588501 1846.1877441,454.7822266 C1846.3896484,454.9758301 1846.4907227,455.2193604 1846.4907227,455.5126953 C1846.4907227,455.800415 1846.3896484,456.0397949 1846.1877441,456.2307129 C1845.9857178,456.4216309 1845.7380371,456.5170898 1845.4448242,456.5170898 C1845.1514893,456.5170898 1844.907959,456.4216309 1844.7143555,456.2307129 C1844.5206299,456.0397949 1844.4238281,455.800415 1844.4238281,455.5126953 Z M1844.6147461,467.9306641 L1844.6147461,458.75 L1846.2416992,458.75 L1846.2416992,467.9306641 Z M1857.0410156,467.9306641 L1855.4223633,467.9306641 L1855.4223633,462.7094727 C1855.4222412,460.8223877 1854.7332764,459.8789063 1853.3554688,459.8789063 C1852.6416016,459.8789063 1852.0549316,460.1445313 1851.5957031,460.6757813 C1851.1363525,461.2070313 1850.9067383,461.8793945 1850.9067383,462.6928711 L1850.9067383,467.9306641 L1849.2797852,467.9306641 L1849.2797852,458.75 L1850.9067383,458.75 L1850.9067383,460.269043 L1850.9399414,460.269043 C1851.6315918,459.1124268 1852.6359863,458.5341797 1853.953125,458.5341797 C1854.9602051,458.5341797 1855.7266846,458.8564453 1856.2524414,459.5012207 C1856.7780762,460.145874 1857.0410156,461.0852051 1857.0410156,462.3193359 Z M1859.1328125,456.6665039 L1867.1015625,456.6665039 C1866.5426025,455.6040039 1866.1053467,454.8292236 1865.7900391,454.3422852 L1867.0849609,453.7280273 C1867.3947754,454.2038574 1867.8596191,454.9786377 1868.4794922,456.0522461 L1867.2675781,456.6665039 L1875.1367188,456.6665039 L1875.1367188,457.9282227 L1865.0678711,457.9282227 C1865.0290527,458.9353027 1864.9875488,459.7930908 1864.9433594,460.5014648 L1872.9619141,460.5014648 C1872.8289795,462.9030762 1872.6851807,464.9893799 1872.5302734,466.7602539 C1872.4084473,468.7634277 1871.4345703,469.7651367 1869.6083984,469.7651367 C1868.7672119,469.7651367 1867.6437988,469.7208252 1866.2382813,469.6323242 C1866.1828613,469.2116699 1866.0998535,468.7025146 1865.9892578,468.1049805 C1867.3947754,468.2930908 1868.53479,468.387207 1869.4091797,468.387207 C1870.4273682,468.387207 1870.9973145,467.7839355 1871.1191406,466.5776367 C1871.2519531,465.260498 1871.3681641,463.6501465 1871.4677734,461.746582 L1864.8520508,461.746582 C1864.5421143,465.3989258 1862.8514404,468.2321777 1859.7802734,470.246582 C1859.4814453,469.892334 1859.1437988,469.5161133 1858.7675781,469.1176758 C1861.6893311,467.1918945 1863.2554932,464.6130371 1863.4658203,461.3813477 C1863.5432129,460.506958 1863.6069336,459.355957 1863.6567383,457.9282227 L1859.1328125,457.9282227 Z M1889.1069336,464.402832 C1890.1694336,465.8526611 1891.3149414,467.5183105 1892.543457,469.3999023 C1892.100708,469.6544189 1891.6690674,469.9089355 1891.2485352,470.1635742 C1890.9385986,469.6489258 1890.6342773,469.1508789 1890.3354492,468.6694336 C1886.7052002,468.9682617 1883.8607178,469.2172852 1881.8022461,469.4165039 L1881.1879883,467.972168 C1881.8852539,467.6622314 1882.565918,467.0147705 1883.2299805,466.0297852 C1883.9604492,464.9893799 1884.6383057,463.8936768 1885.2636719,462.7426758 L1880.9057617,462.7426758 L1880.9057617,461.5473633 L1886.1186523,461.5473633 L1886.1186523,458.027832 L1881.7192383,458.027832 L1881.7192383,456.8325195 L1886.1186523,456.8325195 L1886.1186523,453.7944336 L1887.4467773,453.7944336 L1887.4467773,456.8325195 L1892.0454102,456.8325195 L1892.0454102,458.027832 L1887.4467773,458.027832 L1887.4467773,461.5473633 L1892.8256836,461.5473633 L1892.8256836,462.7426758 L1886.9321289,462.7426758 C1885.697998,464.7735596 1884.4916992,466.527832 1883.3129883,468.0053711 C1885.4213867,467.9057617 1887.5297852,467.7563477 1889.6381836,467.5571289 C1889.0681152,466.6661377 1888.5258789,465.847168 1888.0112305,465.1000977 Z M1878.8139648,463.074707 C1879.2233887,463.251709 1879.6606445,463.4343262 1880.1254883,463.6225586 C1879.3395996,465.9799805 1878.6534424,468.1104736 1878.0668945,470.0141602 L1876.6391602,469.5327148 C1877.3696289,467.5847168 1878.0944824,465.4321289 1878.8139648,463.074707 Z M1877.1870117,458.3100586 C1878.0170898,458.8966064 1878.9909668,459.6491699 1880.1088867,460.5678711 C1879.6993408,461.0327148 1879.378418,461.392334 1879.1459961,461.6469727 C1877.8952637,460.5290527 1876.9655762,459.737793 1876.3569336,459.2729492 Z M1877.8344727,454.0102539 C1878.7198486,454.7185059 1879.6716309,455.5264893 1880.6899414,456.434082 C1880.3135986,456.8214111 1879.9870605,457.1645508 1879.7104492,457.4633789 C1878.6921387,456.4561768 1877.784668,455.6094971 1876.987793,454.9233398 Z M1896.5195313,454.4418945 L1907.8085938,454.4418945 L1907.8085938,461.3647461 L1906.546875,461.3647461 L1906.546875,460.7006836 L1897.78125,460.7006836 L1897.78125,461.3647461 L1896.5195313,461.3647461 Z M1897.3496094,463.8051758 L1898.6113281,464.1870117 C1898.4342041,464.7680664 1898.2321777,465.3186035 1898.0053711,465.8388672 C1898.8464355,467.2001953 1900.0998535,468.0163574 1901.765625,468.2875977 L1901.765625,463.2905273 L1894.1953125,463.2905273 L1894.1953125,462.128418 L1910.1660156,462.128418 L1910.1660156,463.2905273 L1903.09375,463.2905273 L1903.09375,464.9506836 L1909.0039063,464.9506836 L1909.0039063,466.0795898 L1903.09375,466.0795898 L1903.09375,468.387207 C1905.21875,468.4313965 1907.6812744,468.4093018 1910.4814453,468.3208008 C1910.3043213,468.7966309 1910.149292,469.2338867 1910.0166016,469.6323242 C1906.7626953,469.6433105 1904.2613525,469.626709 1902.5126953,469.5825195 C1900.171875,469.5548096 1898.4812012,468.6859131 1897.440918,466.9760742 C1896.6827393,468.3428955 1895.7226563,469.449707 1894.5605469,470.2963867 C1894.3391113,469.9642334 1894.0679932,469.6046143 1893.7470703,469.2172852 C1895.5289307,468.0219727 1896.7297363,466.2178955 1897.3496094,463.8051758 Z M1897.78125,459.5717773 L1906.546875,459.5717773 L1906.546875,458.1108398 L1897.78125,458.1108398 Z M1906.546875,455.5708008 L1897.78125,455.5708008 L1897.78125,457.0151367 L1906.546875,457.0151367 Z M1916.2670898,465.8720703 L1914.8642578,470.2963867 L1913.7021484,470.2963867 L1914.7231445,465.8720703 Z M1929.5898438,458.144043 L1935.8237305,458.144043 C1935.9841309,456.788208 1936.0643311,455.3217773 1936.0644531,453.7446289 L1937.4921875,453.7446289 C1937.4921875,455.3881836 1937.4146729,456.8546143 1937.2597656,458.144043 L1944.3154297,458.144043 C1944.2490234,461.5639648 1944.1494141,464.3862305 1944.0166016,466.6108398 C1943.9058838,468.6804199 1942.8101807,469.715332 1940.7294922,469.715332 C1939.8662109,469.715332 1938.8424072,469.6876221 1937.6582031,469.6323242 C1937.6138916,469.2006836 1937.5308838,468.6860352 1937.4091797,468.0883789 C1938.4494629,468.2321777 1939.4732666,468.3041992 1940.4804688,468.3041992 C1941.8085938,468.3041992 1942.5058594,467.651123 1942.5722656,466.3452148 C1942.7271729,464.1759033 1942.8267822,461.8737793 1942.8710938,459.4389648 L1937.0771484,459.4389648 C1936.2636719,464.3198242 1933.9892578,467.9499512 1930.2539063,470.3295898 C1929.9439697,469.9421387 1929.6063232,469.5325928 1929.2412109,469.1010742 C1932.6832275,467.0700684 1934.8110352,463.8493652 1935.6245117,459.4389648 L1929.5898438,459.4389648 Z M1937.4755859,462.4272461 L1938.3886719,461.6137695 C1939.4511719,462.5987549 1940.4140625,463.5671387 1941.2773438,464.519043 L1940.2480469,465.4487305 C1939.395752,464.4415283 1938.4716797,463.4343262 1937.4755859,462.4272461 Z M1930.7685547,454.8569336 L1931.6650391,454.0268555 C1932.5836182,454.8237305 1933.4689941,455.6427002 1934.3212891,456.4838867 L1933.3085938,457.4301758 C1932.489502,456.5336914 1931.6428223,455.6759033 1930.7685547,454.8569336 Z M1957.4970703,455.0727539 L1952.7739258,467.9306641 L1950.9311523,467.9306641 L1946.2993164,455.0727539 L1948.1420898,455.0727539 L1951.6035156,465.125 C1951.7197266,465.4570313 1951.8054199,465.8415527 1951.8608398,466.2788086 L1951.9023438,466.2788086 C1951.9465332,465.8969727 1952.043457,465.5068359 1952.1928711,465.1083984 L1955.7207031,455.0727539 Z M1967.0263672,467.9306641 L1965.3911133,467.9306641 L1965.3911133,466.4863281 L1965.3579102,466.4863281 C1964.7436523,467.5930176 1963.8000488,468.1464844 1962.5273438,468.1464844 C1960.3525391,468.1464844 1959.2651367,466.8459473 1959.2651367,464.2451172 L1959.2651367,458.75 L1960.8754883,458.75 L1960.8754883,464.0043945 C1960.8754883,465.8692627 1961.5893555,466.8017578 1963.0170898,466.8017578 C1963.7253418,466.8017578 1964.2980957,466.5402832 1964.7353516,466.017334 C1965.1724854,465.4943848 1965.3909912,464.8344727 1965.3911133,464.0375977 L1965.3911133,458.75 L1967.0263672,458.75 Z M1977.7177734,463.7553711 L1971.2929688,463.7553711 C1971.3205566,464.7348633 1971.5889893,465.4915771 1972.0981445,466.0256348 C1972.6071777,466.5595703 1973.3183594,466.8266602 1974.2314453,466.8266602 C1975.2607422,466.8266602 1976.2042236,466.4973145 1977.0620117,465.8388672 L1977.0620117,467.2915039 C1976.2540283,467.8614502 1975.1832275,468.1464844 1973.8496094,468.1464844 C1972.5214844,468.1464844 1971.4852295,467.7258301 1970.7409668,466.8847656 C1969.996582,466.0435791 1969.6245117,464.8759766 1969.6245117,463.3818359 C1969.6245117,461.9761963 1970.0325928,460.8168945 1970.848877,459.9038086 C1971.6650391,458.9907227 1972.6790771,458.5341797 1973.8911133,458.5341797 C1975.0919189,458.5341797 1976.0299072,458.920166 1976.7050781,459.6921387 C1977.380127,460.4641113 1977.7177734,461.5445557 1977.7177734,462.9335938 Z M1976.0908203,462.4521484 C1976.0852051,461.6220703 1975.8887939,460.9801025 1975.5014648,460.5263672 C1975.1140137,460.0725098 1974.5689697,459.8457031 1973.8662109,459.8457031 C1973.21875,459.8457031 1972.6583252,460.0864258 1972.1853027,460.5678711 C1971.7121582,461.0493164 1971.4146729,461.6773682 1971.2929688,462.4521484 Z M1986.9814453,466.6357422 L1986.9814453,472.1557617 L1985.3544922,472.1557617 L1985.3544922,458.75 L1986.9814453,458.75 L1986.9814453,460.3354492 L1987.0146484,460.3354492 C1987.7340088,459.1345215 1988.7854004,458.5341797 1990.1689453,458.5341797 C1991.342041,458.5341797 1992.262085,458.9450684 1992.9289551,459.7668457 C1993.5957031,460.588623 1993.9291992,461.6911621 1993.9291992,463.074707 C1993.9291992,464.6020508 1993.5515137,465.8291016 1992.7961426,466.7561035 C1992.0407715,467.6829834 1991.0239258,468.1464844 1989.7456055,468.1464844 C1988.5668945,468.1464844 1987.6564941,467.6428223 1987.0146484,466.6357422 Z M1986.9731445,464.1455078 C1986.9731445,464.8925781 1987.2138672,465.5219727 1987.6953125,466.0339355 C1988.1767578,466.5457764 1988.7799072,466.8017578 1989.5048828,466.8017578 C1990.368042,466.8017578 1991.0432129,466.4697266 1991.5302734,465.8056641 C1992.0172119,465.1416016 1992.2607422,464.2229004 1992.2607422,463.0498047 C1992.2607422,462.0592041 1992.0338135,461.2830811 1991.5800781,460.7214355 C1991.1262207,460.159668 1990.5064697,459.8789063 1989.7207031,459.8789063 C1988.9182129,459.8789063 1988.2597656,460.1638184 1987.7451172,460.7338867 C1987.2304688,461.303833 1986.9731445,462.0343018 1986.9731445,462.925293 Z M2001.4580078,460.3603516 C2001.1867676,460.166626 2000.8132324,460.0698242 2000.3374023,460.0698242 C1999.706543,460.0698242 1999.1862793,460.364502 1998.7768555,460.9538574 C1998.3673096,461.5432129 1998.1625977,462.3193359 1998.1625977,463.2822266 L1998.1625977,467.9306641 L1996.5356445,467.9306641 L1996.5356445,458.75 L1998.1625977,458.75 L1998.1625977,460.6176758 L1998.1958008,460.6176758 C1998.6605225,459.267334 1999.4630127,458.5922852 2000.6030273,458.5922852 C2000.9737549,458.5922852 2001.2587891,458.6337891 2001.4580078,458.7167969 Z M2002.6035156,463.4399414 C2002.6035156,461.923584 2003.0268555,460.7269287 2003.8735352,459.8498535 C2004.7202148,458.9726563 2005.8684082,458.5341797 2007.3183594,458.5341797 C2008.696167,458.5341797 2009.7767334,458.9560547 2010.5598145,459.8000488 C2011.3427734,460.6439209 2011.734375,461.8101807 2011.734375,463.2988281 C2011.734375,464.7486572 2011.3165283,465.9190674 2010.480957,466.8100586 C2009.6452637,467.7009277 2008.5246582,468.1464844 2007.1191406,468.1464844 C2005.7467041,468.1464844 2004.651001,467.7147217 2003.8320313,466.8515625 C2003.0129395,465.9882813 2002.6035156,464.8510742 2002.6035156,463.4399414 Z M2004.2636719,463.3901367 C2004.2636719,464.4470215 2004.5306396,465.2799072 2005.0646973,465.8886719 C2005.5986328,466.4973145 2006.3166504,466.8017578 2007.21875,466.8017578 C2008.1483154,466.8017578 2008.8566895,466.5042725 2009.34375,465.9094238 C2009.8306885,465.3144531 2010.0742188,464.4609375 2010.0742188,463.3486328 C2010.0742188,462.2307129 2009.8306885,461.3730469 2009.34375,460.7753906 C2008.8566895,460.1777344 2008.1483154,459.8789063 2007.21875,459.8789063 C2006.3056641,459.8789063 2005.5848389,460.1915283 2005.0563965,460.8168945 C2004.527832,461.4421387 2004.2636719,462.2999268 2004.2636719,463.3901367 Z M2018.7568359,467.8393555 C2018.4025879,468.032959 2017.9239502,468.1298828 2017.3208008,468.1298828 C2015.6772461,468.1298828 2014.8554688,467.2194824 2014.8554688,465.3989258 L2014.8554688,460.0947266 L2013.2783203,460.0947266 L2013.2783203,458.75 L2014.8554688,458.75 L2014.8554688,456.5419922 L2016.4741211,456.0273438 L2016.4741211,458.75 L2018.7568359,458.75 L2018.7568359,460.0947266 L2016.4741211,460.0947266 L2016.4741211,465.1083984 C2016.4741211,465.7115479 2016.576416,466.1431885 2016.78125,466.4033203 C2016.9859619,466.6633301 2017.3262939,466.793457 2017.8022461,466.793457 C2018.1674805,466.793457 2018.4855957,466.69104 2018.7568359,466.4863281 Z M2020.2592773,463.4399414 C2020.2592773,461.923584 2020.6826172,460.7269287 2021.5292969,459.8498535 C2022.3759766,458.9726563 2023.5241699,458.5341797 2024.9741211,458.5341797 C2026.3519287,458.5341797 2027.4324951,458.9560547 2028.2155762,459.8000488 C2028.9985352,460.6439209 2029.3901367,461.8101807 2029.3901367,463.2988281 C2029.3901367,464.7486572 2028.97229,465.9190674 2028.1367188,466.8100586 C2027.3010254,467.7009277 2026.1804199,468.1464844 2024.7749023,468.1464844 C2023.4024658,468.1464844 2022.3067627,467.7147217 2021.487793,466.8515625 C2020.6687012,465.9882813 2020.2592773,464.8510742 2020.2592773,463.4399414 Z M2021.9194336,463.3901367 C2021.9194336,464.4470215 2022.1864014,465.2799072 2022.720459,465.8886719 C2023.2543945,466.4973145 2023.9724121,466.8017578 2024.8745117,466.8017578 C2025.8040771,466.8017578 2026.5124512,466.5042725 2026.9995117,465.9094238 C2027.4864502,465.3144531 2027.7299805,464.4609375 2027.7299805,463.3486328 C2027.7299805,462.2307129 2027.4864502,461.3730469 2026.9995117,460.7753906 C2026.5124512,460.1777344 2025.8040771,459.8789063 2024.8745117,459.8789063 C2023.9614258,459.8789063 2023.2406006,460.1915283 2022.7121582,460.8168945 C2022.1835938,461.4421387 2021.9194336,462.2999268 2021.9194336,463.3901367 Z M2036.4125977,467.8393555 C2036.0583496,468.032959 2035.5797119,468.1298828 2034.9765625,468.1298828 C2033.3330078,468.1298828 2032.5112305,467.2194824 2032.5112305,465.3989258 L2032.5112305,460.0947266 L2030.934082,460.0947266 L2030.934082,458.75 L2032.5112305,458.75 L2032.5112305,456.5419922 L2034.1298828,456.0273438 L2034.1298828,458.75 L2036.4125977,458.75 L2036.4125977,460.0947266 L2034.1298828,460.0947266 L2034.1298828,465.1083984 C2034.1298828,465.7115479 2034.2321777,466.1431885 2034.4370117,466.4033203 C2034.6417236,466.6633301 2034.9820557,466.793457 2035.4580078,466.793457 C2035.8232422,466.793457 2036.1413574,466.69104 2036.4125977,466.4863281 Z M2046,458.75 L2041.8330078,469.3168945 C2041.0582275,471.2757568 2039.965332,472.2553711 2038.5541992,472.2553711 C2038.1501465,472.2553711 2037.8043213,472.2110596 2037.5166016,472.1225586 L2037.5166016,470.6948242 C2037.8320313,470.8165283 2038.1363525,470.8774414 2038.4296875,470.8774414 C2039.1656494,470.8774414 2039.7163086,470.4458008 2040.081543,469.5825195 L2040.7871094,467.9140625 L2037.1845703,458.75 L2038.9858398,458.75 L2041.3847656,465.6479492 L2041.5839844,466.4033203 L2041.6254883,466.4033203 C2041.6586914,466.2316895 2041.7250977,465.9854736 2041.824707,465.6645508 L2044.331543,458.75 Z M2049.4282227,466.6357422 L2049.4282227,472.1557617 L2047.8012695,472.1557617 L2047.8012695,458.75 L2049.4282227,458.75 L2049.4282227,460.3354492 L2049.4614258,460.3354492 C2050.1806641,459.1345215 2051.2321777,458.5341797 2052.6157227,458.5341797 C2053.7888184,458.5341797 2054.7089844,458.9450684 2055.3757324,459.7668457 C2056.0424805,460.588623 2056.3759766,461.6911621 2056.3759766,463.074707 C2056.3759766,464.6020508 2055.998291,465.8291016 2055.2429199,466.7561035 C2054.4875488,467.6829834 2053.4707031,468.1464844 2052.1923828,468.1464844 C2051.0136719,468.1464844 2050.1032715,467.6428223 2049.4614258,466.6357422 Z M2049.4199219,464.1455078 C2049.4199219,464.8925781 2049.6606445,465.5219727 2050.1420898,466.0339355 C2050.6235352,466.5457764 2051.2265625,466.8017578 2051.9516602,466.8017578 C2052.8149414,466.8017578 2053.4899902,466.4697266 2053.9770508,465.8056641 C2054.4638672,465.1416016 2054.7075195,464.2229004 2054.7075195,463.0498047 C2054.7075195,462.0592041 2054.4804688,461.2830811 2054.0268555,460.7214355 C2053.572998,460.159668 2052.953125,459.8789063 2052.1674805,459.8789063 C2051.3649902,459.8789063 2050.706543,460.1638184 2050.1918945,460.7338867 C2049.6772461,461.303833 2049.4199219,462.0343018 2049.4199219,462.925293 Z M2066.4614258,463.7553711 L2060.0366211,463.7553711 C2060.064209,464.7348633 2060.3325195,465.4915771 2060.8417969,466.0256348 C2061.3508301,466.5595703 2062.0620117,466.8266602 2062.9750977,466.8266602 C2064.0043945,466.8266602 2064.9477539,466.4973145 2065.8056641,465.8388672 L2065.8056641,467.2915039 C2064.9975586,467.8614502 2063.9267578,468.1464844 2062.5932617,468.1464844 C2061.2651367,468.1464844 2060.2290039,467.7258301 2059.4846191,466.8847656 C2058.7402344,466.0435791 2058.3681641,464.8759766 2058.3681641,463.3818359 C2058.3681641,461.9761963 2058.7763672,460.8168945 2059.5925293,459.9038086 C2060.4086914,458.9907227 2061.4228516,458.5341797 2062.6347656,458.5341797 C2063.8354492,458.5341797 2064.7734375,458.920166 2065.4487305,459.6921387 C2066.1237793,460.4641113 2066.4614258,461.5445557 2066.4614258,462.9335938 Z M2064.8344727,462.4521484 C2064.8288574,461.6220703 2064.6323242,460.9801025 2064.2451172,460.5263672 C2063.857666,460.0725098 2063.3125,459.8457031 2062.6098633,459.8457031 C2061.9624023,459.8457031 2061.4018555,460.0864258 2060.9289551,460.5678711 C2060.4558105,461.0493164 2060.1582031,461.6773682 2060.0366211,462.4521484 Z M2071.4335938,463.2739258 C2073.4035645,462.1339111 2074.7871094,460.9385986 2075.5839844,459.6879883 L2072.1806641,459.6879883 L2072.1806641,458.5258789 L2076.1484375,458.5258789 C2076.4472656,457.7510986 2076.6630859,456.9044189 2076.7958984,455.9858398 L2073.0439453,455.9858398 L2073.0439453,454.8237305 L2083.0048828,454.8237305 L2083.0048828,455.9858398 L2078.0908203,455.9858398 C2077.9633789,456.9487305 2077.7807617,457.7954102 2077.5429688,458.5258789 L2083.8017578,458.5258789 L2083.8017578,459.6879883 L2079.8505859,459.6879883 C2080.9406738,461.2208252 2082.4238281,462.2722168 2084.2998047,462.8422852 C2083.9233398,463.2628174 2083.5913086,463.6889648 2083.3037109,464.1206055 C2081.123291,463.0581055 2079.5019531,461.5805664 2078.4394531,459.6879883 L2077.0698242,459.6879883 C2076.2175293,461.3868408 2074.6320801,462.9362793 2072.3134766,464.3364258 C2072.0810547,464.0264893 2071.7875977,463.6723633 2071.4335938,463.2739258 Z M2076.7128906,461.8793945 L2077.9746094,461.8793945 L2077.9746094,468.0883789 C2077.9746094,469.3167725 2077.3271484,469.9311523 2076.0322266,469.9311523 C2075.3681641,469.9311523 2074.7705078,469.9255371 2074.2392578,469.9145508 C2074.1728516,469.5050049 2074.0842285,469.0567627 2073.9736328,468.5698242 C2074.5380859,468.6583252 2075.0969238,468.7026367 2075.6503906,468.7026367 C2076.3586426,468.7026367 2076.7128906,468.3649902 2076.7128906,467.6899414 Z M2069.6904297,463.1245117 C2070.1220703,463.2905273 2070.5646973,463.4509277 2071.0185547,463.605957 C2070.4541016,465.9522705 2069.9504395,468.0883789 2069.5078125,470.0141602 L2068.0800781,469.5825195 C2068.6665039,467.6899414 2069.2033691,465.5372314 2069.6904297,463.1245117 Z M2080.5644531,464.0043945 L2081.6103516,463.5063477 C2082.4291992,464.8012695 2083.1762695,466.1237793 2083.8515625,467.4741211 L2082.7060547,468.0385742 C2082.1635742,466.8985596 2081.449707,465.553833 2080.5644531,464.0043945 Z M2074.2226563,463.6723633 L2075.3847656,464.1538086 C2074.7758789,465.6811523 2074.1174316,467.0258789 2073.4091797,468.1879883 C2073.0217285,467.9887695 2072.6289063,467.8116455 2072.2304688,467.6567383 C2073.0383301,466.4503174 2073.7023926,465.1221924 2074.2226563,463.6723633 Z M2078.4560547,464.3696289 L2079.5517578,463.9711914 C2080.0385742,465.2106934 2080.503418,466.5665283 2080.9462891,468.0385742 L2079.7011719,468.4536133 C2079.3469238,467.059082 2078.9318848,465.6977539 2078.4560547,464.3696289 Z M2068.5117188,458.3266602 C2069.3085938,458.8800049 2070.2880859,459.6325684 2071.4501953,460.5844727 C2071.0405273,461.0493164 2070.7141113,461.4089355 2070.4707031,461.6635742 C2069.3085938,460.6010742 2068.3789063,459.8041992 2067.6816406,459.2729492 Z M2069.1591797,454.0102539 C2070.144043,454.7849121 2071.1015625,455.5928955 2072.03125,456.434082 C2071.6547852,456.8103027 2071.3227539,457.1479492 2071.0351563,457.4467773 C2069.9946289,456.4174805 2069.0871582,455.5762939 2068.3125,454.9233398 Z M2094.7006836,456.019043 L2101.0092773,456.019043 L2101.0092773,469.6987305 L2099.6977539,469.6987305 L2099.6977539,468.0219727 L2096.012207,468.0219727 L2096.012207,469.6987305 L2094.7006836,469.6987305 Z M2085.5864258,456.8325195 L2087.9023438,456.8325195 C2087.9133301,455.9415283 2087.9160156,454.9509277 2087.9106445,453.8608398 L2089.222168,453.8608398 C2089.222168,454.9620361 2089.2165527,455.9526367 2089.2055664,456.8325195 L2093.0737305,456.8325195 C2093.0183105,461.0825195 2092.9462891,464.4194336 2092.8579102,466.8432617 C2092.8134766,468.8353271 2092.0610352,469.7927246 2090.6000977,469.715332 C2090.168457,469.715332 2089.5319824,469.6987305 2088.690918,469.6655273 C2088.6132813,469.2006836 2088.5249023,468.7191162 2088.425293,468.2211914 C2089.1999512,468.3208008 2089.8308105,468.3706055 2090.3178711,468.3706055 C2091.0593262,468.3927002 2091.4633789,467.8669434 2091.5297852,466.793457 C2091.6513672,464.1704102 2091.7233887,461.2706299 2091.7456055,458.0942383 L2089.1889648,458.0942383 C2089.1777344,458.940918 2089.1611328,459.6602783 2089.1391602,460.2524414 C2089.0947266,464.579834 2088.0544434,467.9112549 2086.0180664,470.246582 C2085.7412109,469.9034424 2085.4147949,469.5327148 2085.0385742,469.1342773 C2086.8757324,467.119873 2087.8110352,464.1149902 2087.8442383,460.1196289 C2087.8662109,459.5385742 2087.8828125,458.8634033 2087.894043,458.0942383 L2085.5864258,458.0942383 Z M2099.6977539,457.2475586 L2096.012207,457.2475586 L2096.012207,466.8266602 L2099.6977539,466.8266602 Z M2110.0986328,472.2719727 L2102.4785156,472.2719727 L2102.4785156,471.2011719 L2110.0986328,471.2011719 Z M2119.3623047,467.9306641 L2117.7270508,467.9306641 L2117.7270508,466.4863281 L2117.6938477,466.4863281 C2117.0795898,467.5930176 2116.1359863,468.1464844 2114.8632813,468.1464844 C2112.6884766,468.1464844 2111.6010742,466.8459473 2111.6010742,464.2451172 L2111.6010742,458.75 L2113.2114258,458.75 L2113.2114258,464.0043945 C2113.2114258,465.8692627 2113.925293,466.8017578 2115.3530273,466.8017578 C2116.0612793,466.8017578 2116.6340332,466.5402832 2117.0712891,466.017334 C2117.5083008,465.4943848 2117.7270508,464.8344727 2117.7270508,464.0375977 L2117.7270508,458.75 L2119.3623047,458.75 Z M2124.2016602,466.6357422 L2124.2016602,472.1557617 L2122.574707,472.1557617 L2122.574707,458.75 L2124.2016602,458.75 L2124.2016602,460.3354492 L2124.2348633,460.3354492 C2124.9541016,459.1345215 2126.0056152,458.5341797 2127.3891602,458.5341797 C2128.5622559,458.5341797 2129.4824219,458.9450684 2130.1491699,459.7668457 C2130.815918,460.588623 2131.1494141,461.6911621 2131.1494141,463.074707 C2131.1494141,464.6020508 2130.7717285,465.8291016 2130.0163574,466.7561035 C2129.2609863,467.6829834 2128.2441406,468.1464844 2126.9658203,468.1464844 C2125.7871094,468.1464844 2124.876709,467.6428223 2124.2348633,466.6357422 Z M2124.1933594,464.1455078 C2124.1933594,464.8925781 2124.434082,465.5219727 2124.9155273,466.0339355 C2125.3969727,466.5457764 2126,466.8017578 2126.7250977,466.8017578 C2127.5883789,466.8017578 2128.2634277,466.4697266 2128.7504883,465.8056641 C2129.2373047,465.1416016 2129.480957,464.2229004 2129.480957,463.0498047 C2129.480957,462.0592041 2129.2539063,461.2830811 2128.800293,460.7214355 C2128.3464355,460.159668 2127.7265625,459.8789063 2126.940918,459.8789063 C2126.1384277,459.8789063 2125.4799805,460.1638184 2124.965332,460.7338867 C2124.4506836,461.303833 2124.1933594,462.0343018 2124.1933594,462.925293 Z M2141.7246094,467.9306641 L2140.0976563,467.9306641 L2140.0976563,466.4033203 L2140.0644531,466.4033203 C2139.3947754,467.5653076 2138.3544922,468.1464844 2136.9433594,468.1464844 C2135.78125,468.1464844 2134.8569336,467.7327881 2134.1708984,466.9055176 C2133.4846191,466.078125 2133.1416016,464.9616699 2133.1416016,463.5561523 C2133.1416016,462.0397949 2133.5288086,460.8237305 2134.3037109,459.907959 C2135.0783691,458.9920654 2136.0910645,458.5341797 2137.3417969,458.5341797 C2138.5922852,458.5341797 2139.5,459.0211182 2140.0644531,459.9951172 L2140.0976563,459.9951172 L2140.0976563,454.3422852 L2141.7246094,454.3422852 Z M2140.105957,462.46875 C2140.105957,461.732666 2139.8637695,461.1170654 2139.3796387,460.6218262 C2138.8955078,460.1264648 2138.2990723,459.8789063 2137.5908203,459.8789063 C2136.7275391,459.8789063 2136.046875,460.2011719 2135.5488281,460.8459473 C2135.0507813,461.4906006 2134.8017578,462.3691406 2134.8017578,463.4814453 C2134.8017578,464.505127 2135.0410156,465.3144531 2135.5197754,465.9094238 C2135.9985352,466.5042725 2136.6362305,466.8017578 2137.4331055,466.8017578 C2138.21875,466.8017578 2138.8608398,466.5097656 2139.3588867,465.9260254 C2139.8569336,465.3421631 2140.105957,464.6158447 2140.105957,463.7470703 Z M2145.1694336,459.3891602 C2146.0825195,458.8190918 2147.1367188,458.5341797 2148.3320313,458.5341797 C2150.5454102,458.5341797 2151.6523438,459.6962891 2151.6523438,462.0205078 L2151.6523438,467.9306641 L2150.0419922,467.9306641 L2150.0419922,466.5112305 L2150.0004883,466.5112305 C2149.3640137,467.6013184 2148.4260254,468.1464844 2147.1865234,468.1464844 C2146.2954102,468.1464844 2145.5871582,467.9056396 2145.0615234,467.4243164 C2144.5356445,466.9428711 2144.2729492,466.2926025 2144.2729492,465.4736328 C2144.2729492,463.7580566 2145.2883301,462.7592773 2147.3193359,462.4770508 L2150.0419922,462.0952148 C2150.0419922,460.595459 2149.4221191,459.8457031 2148.1826172,459.8457031 C2147.0812988,459.8457031 2146.0769043,460.2164307 2145.1694336,460.9580078 Z M2147.8920898,463.6142578 C2147.1394043,463.7138672 2146.6206055,463.9019775 2146.3356934,464.1787109 C2146.0507813,464.4553223 2145.9082031,464.8427734 2145.9082031,465.3408203 C2145.9082031,465.7779541 2146.0629883,466.1348877 2146.3730469,466.4116211 C2146.6828613,466.6882324 2147.0922852,466.8266602 2147.6015625,466.8266602 C2148.3098145,466.8266602 2148.8935547,466.5776367 2149.3530273,466.0795898 C2149.8122559,465.581543 2150.0419922,464.9561768 2150.0419922,464.2036133 L2150.0419922,463.3237305 Z M2159.0400391,467.8393555 C2158.685791,468.032959 2158.2070313,468.1298828 2157.6040039,468.1298828 C2155.9604492,468.1298828 2155.1386719,467.2194824 2155.1386719,465.3989258 L2155.1386719,460.0947266 L2153.5615234,460.0947266 L2153.5615234,458.75 L2155.1386719,458.75 L2155.1386719,456.5419922 L2156.7573242,456.0273438 L2156.7573242,458.75 L2159.0400391,458.75 L2159.0400391,460.0947266 L2156.7573242,460.0947266 L2156.7573242,465.1083984 C2156.7573242,465.7115479 2156.8596191,466.1431885 2157.0644531,466.4033203 C2157.269043,466.6633301 2157.609375,466.793457 2158.0854492,466.793457 C2158.4506836,466.793457 2158.7687988,466.69104 2159.0400391,466.4863281 Z M2168.6357422,463.7553711 L2162.2109375,463.7553711 C2162.2385254,464.7348633 2162.5068359,465.4915771 2163.0161133,466.0256348 C2163.5251465,466.5595703 2164.2363281,466.8266602 2165.1494141,466.8266602 C2166.1787109,466.8266602 2167.1220703,466.4973145 2167.9799805,465.8388672 L2167.9799805,467.2915039 C2167.171875,467.8614502 2166.1010742,468.1464844 2164.7675781,468.1464844 C2163.4394531,468.1464844 2162.4033203,467.7258301 2161.6589355,466.8847656 C2160.9145508,466.0435791 2160.5424805,464.8759766 2160.5424805,463.3818359 C2160.5424805,461.9761963 2160.9506836,460.8168945 2161.7668457,459.9038086 C2162.5830078,458.9907227 2163.597168,458.5341797 2164.809082,458.5341797 C2166.0097656,458.5341797 2166.9477539,458.920166 2167.6230469,459.6921387 C2168.2980957,460.4641113 2168.6357422,461.5445557 2168.6357422,462.9335938 Z M2167.0087891,462.4521484 C2167.0031738,461.6220703 2166.8066406,460.9801025 2166.4194336,460.5263672 C2166.0319824,460.0725098 2165.4868164,459.8457031 2164.7841797,459.8457031 C2164.1367188,459.8457031 2163.5761719,460.0864258 2163.1032715,460.5678711 C2162.630127,461.0493164 2162.3325195,461.6773682 2162.2109375,462.4521484 Z M2174.7700195,465.8720703 L2173.3671875,470.2963867 L2172.2050781,470.2963867 L2173.2260742,465.8720703 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip20)\" />\n<clipPath id=\"clip21\"><path d=\"M1742,449 L2181,449 L2181,500 L1742,500 L1742,449 Z\" /></clipPath>\n<path d=\"M1748.729248,492.9602051 L1747.7580566,492.9602051 L1747.7580566,491.0842285 C1746.4963379,491.0842285 1745.4504395,490.8240967 1744.6203613,490.3039551 L1744.6203613,488.635498 C1745.4504395,489.3161621 1746.4963379,489.6813965 1747.7580566,489.7312012 L1747.7580566,485.2902832 C1746.4243164,484.664917 1745.5583496,484.0810547 1745.1599121,483.5388184 C1744.7614746,482.99646 1744.5622559,482.3544922 1744.5622559,481.6130371 C1744.5622559,480.7497559 1744.8596191,479.9985352 1745.4545898,479.359375 C1746.0494385,478.7202148 1746.8172607,478.3369141 1747.7580566,478.2097168 L1747.7580566,476.5910645 L1748.729248,476.5910645 L1748.729248,478.1765137 C1749.94104,478.2207031 1750.765625,478.392334 1751.2028809,478.6911621 L1751.2028809,480.3181152 C1750.5664063,479.8310547 1749.7418213,479.5682373 1748.729248,479.529541 L1748.729248,484.1115723 C1749.9798584,484.6815186 1750.840332,485.2501221 1751.310791,485.8173828 C1751.7811279,486.3845215 1752.0163574,487.0223389 1752.0163574,487.7307129 C1752.0163574,488.621582 1751.7202148,489.3535156 1751.1281738,489.9262695 C1750.5360107,490.4990234 1749.7363281,490.8601074 1748.729248,491.0095215 Z M1747.7580566,479.5793457 C1746.6955566,479.8117676 1746.1643066,480.4287109 1746.1643066,481.4304199 C1746.1643066,481.9118652 1746.27771,482.3103027 1746.5046387,482.6257324 C1746.7314453,482.9411621 1747.149292,483.2675781 1747.7580566,483.6052246 Z M1748.729248,489.6647949 C1749.8525391,489.4212646 1750.4143066,488.8208008 1750.4143066,487.8635254 C1750.4143066,487.0610352 1749.8525391,486.361084 1748.729248,485.7634277 Z M1759.5783691,478.8820801 C1759.2739258,478.7215576 1758.9447021,478.6413574 1758.5905762,478.6413574 C1757.5722656,478.6413574 1757.0632324,479.2722168 1757.0632324,480.5339355 L1757.0632324,481.9035645 L1759.2131348,481.9035645 L1759.2131348,483.248291 L1757.0632324,483.248291 L1757.0632324,491.0842285 L1755.4528809,491.0842285 L1755.4528809,483.248291 L1753.8840332,483.248291 L1753.8840332,481.9035645 L1755.4528809,481.9035645 L1755.4528809,480.4592285 C1755.4528809,479.4741211 1755.7364502,478.7008057 1756.3037109,478.1391602 C1756.8708496,477.5773926 1757.5916748,477.2966309 1758.4660645,477.2966309 C1758.9309082,477.2966309 1759.3016357,477.3491211 1759.5783691,477.4543457 Z M1760.3254395,486.5935059 C1760.3254395,485.0771484 1760.7487793,483.8804932 1761.595459,483.003418 C1762.4421387,482.1262207 1763.590332,481.6877441 1765.0402832,481.6877441 C1766.4180908,481.6877441 1767.4986572,482.1096191 1768.2817383,482.9536133 C1769.0646973,483.7974854 1769.4562988,484.9637451 1769.4562988,486.4523926 C1769.4562988,487.9022217 1769.0384521,489.0726318 1768.2028809,489.963623 C1767.3671875,490.8544922 1766.246582,491.3000488 1764.8410645,491.3000488 C1763.4686279,491.3000488 1762.3729248,490.8682861 1761.5539551,490.005127 C1760.7348633,489.1418457 1760.3254395,488.0046387 1760.3254395,486.5935059 Z M1761.9855957,486.5437012 C1761.9855957,487.6005859 1762.2525635,488.4334717 1762.7866211,489.0422363 C1763.3205566,489.6508789 1764.0385742,489.9553223 1764.9406738,489.9553223 C1765.8702393,489.9553223 1766.5786133,489.6578369 1767.0656738,489.0629883 C1767.5526123,488.4680176 1767.7961426,487.614502 1767.7961426,486.5021973 C1767.7961426,485.3842773 1767.5526123,484.5266113 1767.0656738,483.9289551 C1766.5786133,483.3312988 1765.8702393,483.0324707 1764.9406738,483.0324707 C1764.0275879,483.0324707 1763.3067627,483.3450928 1762.7783203,483.970459 C1762.2497559,484.5957031 1761.9855957,485.4534912 1761.9855957,486.5437012 Z M1776.9934082,483.513916 C1776.722168,483.3201904 1776.3486328,483.2233887 1775.8728027,483.2233887 C1775.2419434,483.2233887 1774.7216797,483.5180664 1774.3122559,484.1074219 C1773.90271,484.6967773 1773.697998,485.4729004 1773.697998,486.435791 L1773.697998,491.0842285 L1772.0710449,491.0842285 L1772.0710449,481.9035645 L1773.697998,481.9035645 L1773.697998,483.7712402 L1773.7312012,483.7712402 C1774.1959229,482.4208984 1774.9984131,481.7458496 1776.1384277,481.7458496 C1776.5091553,481.7458496 1776.7941895,481.7873535 1776.9934082,481.8703613 Z M1785.0949707,490.6691895 C1784.3920898,491.0897217 1783.5454102,491.3000488 1782.5549316,491.3000488 C1781.2266846,491.3000488 1780.1586914,490.8739014 1779.3508301,490.0217285 C1778.5428467,489.1694336 1778.138916,488.0654297 1778.138916,486.7097168 C1778.138916,485.2044678 1778.574707,483.9912109 1779.4462891,483.0698242 C1780.3178711,482.1484375 1781.4841309,481.6877441 1782.9450684,481.6877441 C1783.7861328,481.6877441 1784.5056152,481.8371582 1785.1032715,482.1359863 L1785.1032715,483.7463379 C1784.4558105,483.2703857 1783.7363281,483.0324707 1782.9450684,483.0324707 C1782.0153809,483.0324707 1781.2585449,483.3547363 1780.6748047,483.9995117 C1780.0909424,484.644165 1779.7990723,485.5032959 1779.7990723,486.5769043 C1779.7990723,487.6337891 1780.0743408,488.4611816 1780.625,489.0588379 C1781.1755371,489.6564941 1781.918457,489.9553223 1782.8537598,489.9553223 C1783.6450195,489.9553223 1784.3920898,489.6951904 1785.0949707,489.1750488 Z M1795.0144043,486.9089355 L1788.5895996,486.9089355 C1788.6171875,487.8884277 1788.8856201,488.6451416 1789.3947754,489.1791992 C1789.9038086,489.7131348 1790.6149902,489.9802246 1791.5280762,489.9802246 C1792.557373,489.9802246 1793.5008545,489.6508789 1794.3586426,488.9924316 L1794.3586426,490.4450684 C1793.5506592,491.0150146 1792.4798584,491.3000488 1791.1462402,491.3000488 C1789.8181152,491.3000488 1788.7818604,490.8793945 1788.0375977,490.0383301 C1787.2932129,489.1971436 1786.9211426,488.029541 1786.9211426,486.5354004 C1786.9211426,485.1297607 1787.3292236,483.970459 1788.1455078,483.057373 C1788.9616699,482.1442871 1789.975708,481.6877441 1791.1877441,481.6877441 C1792.3885498,481.6877441 1793.3265381,482.0737305 1794.001709,482.8457031 C1794.6767578,483.6176758 1795.0144043,484.6981201 1795.0144043,486.0871582 Z M1793.3874512,485.6057129 C1793.3818359,484.7756348 1793.1854248,484.133667 1792.7980957,483.6799316 C1792.4106445,483.2260742 1791.8656006,482.9992676 1791.1628418,482.9992676 C1790.5153809,482.9992676 1789.9549561,483.2399902 1789.4819336,483.7214355 C1789.0087891,484.2028809 1788.7113037,484.8309326 1788.5895996,485.6057129 Z M1807.208252,485.8464355 C1807.208252,489.4820557 1805.559082,491.3000488 1802.2609863,491.3000488 C1799.1010742,491.3000488 1797.5212402,489.5457764 1797.5212402,486.0373535 L1797.5212402,478.2263184 L1799.1813965,478.2263184 L1799.1813965,485.9626465 C1799.1813965,488.5358887 1800.260498,489.8225098 1802.4187012,489.8225098 C1804.5048828,489.8225098 1805.5480957,488.5773926 1805.5480957,486.0871582 L1805.5480957,478.2263184 L1807.208252,478.2263184 Z M1812.1721191,489.7893066 L1812.1721191,495.3093262 L1810.545166,495.3093262 L1810.545166,481.9035645 L1812.1721191,481.9035645 L1812.1721191,483.4890137 L1812.2053223,483.4890137 C1812.9246826,482.2880859 1813.9760742,481.6877441 1815.3596191,481.6877441 C1816.5327148,481.6877441 1817.4527588,482.0986328 1818.1196289,482.9204102 C1818.786377,483.7421875 1819.119873,484.8447266 1819.119873,486.2282715 C1819.119873,487.7556152 1818.7421875,488.982666 1817.9868164,489.909668 C1817.2314453,490.8365479 1816.2145996,491.3000488 1814.9362793,491.3000488 C1813.7575684,491.3000488 1812.847168,490.7963867 1812.2053223,489.7893066 Z M1812.1638184,487.2990723 C1812.1638184,488.0461426 1812.404541,488.6755371 1812.8859863,489.1875 C1813.3674316,489.6993408 1813.9705811,489.9553223 1814.6955566,489.9553223 C1815.5587158,489.9553223 1816.2338867,489.623291 1816.7209473,488.9592285 C1817.2078857,488.295166 1817.451416,487.3764648 1817.451416,486.2033691 C1817.451416,485.2127686 1817.2244873,484.4366455 1816.770752,483.875 C1816.3168945,483.3132324 1815.6971436,483.0324707 1814.911377,483.0324707 C1814.1088867,483.0324707 1813.4504395,483.3173828 1812.935791,483.8874512 C1812.4211426,484.4573975 1812.1638184,485.1878662 1812.1638184,486.0788574 Z M1829.6950684,491.0842285 L1828.0681152,491.0842285 L1828.0681152,489.5568848 L1828.0349121,489.5568848 C1827.3652344,490.7188721 1826.3249512,491.3000488 1824.9138184,491.3000488 C1823.751709,491.3000488 1822.8275146,490.8863525 1822.1413574,490.059082 C1821.4550781,489.2316895 1821.1120605,488.1152344 1821.1120605,486.7097168 C1821.1120605,485.1933594 1821.4993896,483.9772949 1822.2741699,483.0615234 C1823.0488281,482.1456299 1824.0615234,481.6877441 1825.3122559,481.6877441 C1826.5628662,481.6877441 1827.470459,482.1746826 1828.0349121,483.1486816 L1828.0681152,483.1486816 L1828.0681152,477.4958496 L1829.6950684,477.4958496 Z M1828.076416,485.6223145 C1828.076416,484.8862305 1827.8342285,484.2706299 1827.3500977,483.7753906 C1826.8658447,483.2800293 1826.2695313,483.0324707 1825.5612793,483.0324707 C1824.697998,483.0324707 1824.017334,483.3547363 1823.5192871,483.9995117 C1823.0212402,484.644165 1822.7722168,485.5227051 1822.7722168,486.6350098 C1822.7722168,487.6586914 1823.0114746,488.4680176 1823.4902344,489.0629883 C1823.9688721,489.6578369 1824.6066895,489.9553223 1825.4035645,489.9553223 C1826.1893311,489.9553223 1826.8312988,489.6633301 1827.3293457,489.0795898 C1827.8273926,488.4957275 1828.076416,487.7694092 1828.076416,486.9006348 Z M1833.1398926,482.5427246 C1834.0529785,481.9726563 1835.1071777,481.6877441 1836.3024902,481.6877441 C1838.5159912,481.6877441 1839.6228027,482.8498535 1839.6228027,485.1740723 L1839.6228027,491.0842285 L1838.0124512,491.0842285 L1838.0124512,489.6647949 L1837.9709473,489.6647949 C1837.3344727,490.7548828 1836.3964844,491.3000488 1835.1569824,491.3000488 C1834.2659912,491.3000488 1833.5576172,491.0592041 1833.0319824,490.5778809 C1832.5062256,490.0964355 1832.2434082,489.446167 1832.2434082,488.6271973 C1832.2434082,486.9116211 1833.2587891,485.9128418 1835.2897949,485.6306152 L1838.0124512,485.2487793 C1838.0124512,483.7490234 1837.3925781,482.9992676 1836.1530762,482.9992676 C1835.0517578,482.9992676 1834.0473633,483.3699951 1833.1398926,484.1115723 Z M1835.8625488,486.7678223 C1835.1098633,486.8674316 1834.5910645,487.055542 1834.3061523,487.3322754 C1834.0211182,487.6088867 1833.8786621,487.9963379 1833.8786621,488.4943848 C1833.8786621,488.9315186 1834.0335693,489.2884521 1834.3435059,489.5651855 C1834.6533203,489.8417969 1835.0628662,489.9802246 1835.5720215,489.9802246 C1836.2802734,489.9802246 1836.8641357,489.7312012 1837.3234863,489.2331543 C1837.7827148,488.7351074 1838.0124512,488.1097412 1838.0124512,487.3571777 L1838.0124512,486.4772949 Z M1847.010498,490.9929199 C1846.65625,491.1865234 1846.1776123,491.2834473 1845.5744629,491.2834473 C1843.9309082,491.2834473 1843.1091309,490.3730469 1843.1091309,488.5524902 L1843.1091309,483.248291 L1841.5319824,483.248291 L1841.5319824,481.9035645 L1843.1091309,481.9035645 L1843.1091309,479.6955566 L1844.7277832,479.1809082 L1844.7277832,481.9035645 L1847.010498,481.9035645 L1847.010498,483.248291 L1844.7277832,483.248291 L1844.7277832,488.2619629 C1844.7277832,488.8651123 1844.8300781,489.2967529 1845.0349121,489.5568848 C1845.239624,489.8168945 1845.5799561,489.9470215 1846.0559082,489.9470215 C1846.4211426,489.9470215 1846.7392578,489.8446045 1847.010498,489.6398926 Z M1856.6062012,486.9089355 L1850.1813965,486.9089355 C1850.2089844,487.8884277 1850.477417,488.6451416 1850.9865723,489.1791992 C1851.4956055,489.7131348 1852.2067871,489.9802246 1853.119873,489.9802246 C1854.1491699,489.9802246 1855.0926514,489.6508789 1855.9504395,488.9924316 L1855.9504395,490.4450684 C1855.1424561,491.0150146 1854.0716553,491.3000488 1852.7380371,491.3000488 C1851.4099121,491.3000488 1850.3736572,490.8793945 1849.6293945,490.0383301 C1848.8850098,489.1971436 1848.5129395,488.029541 1848.5129395,486.5354004 C1848.5129395,485.1297607 1848.9210205,483.970459 1849.7373047,483.057373 C1850.5534668,482.1442871 1851.5675049,481.6877441 1852.779541,481.6877441 C1853.9803467,481.6877441 1854.918335,482.0737305 1855.5935059,482.8457031 C1856.2685547,483.6176758 1856.6062012,484.6981201 1856.6062012,486.0871582 Z M1854.979248,485.6057129 C1854.9736328,484.7756348 1854.7772217,484.133667 1854.3898926,483.6799316 C1854.0024414,483.2260742 1853.4573975,482.9992676 1852.7546387,482.9992676 C1852.1071777,482.9992676 1851.5467529,483.2399902 1851.0737305,483.7214355 C1850.6005859,484.2028809 1850.3031006,484.8309326 1850.1813965,485.6057129 Z M1862.7404785,489.0256348 L1861.3376465,493.4499512 L1860.1755371,493.4499512 L1861.1965332,489.0256348 Z M1880.6950684,492.9602051 L1879.723877,492.9602051 L1879.723877,491.0842285 C1878.4621582,491.0842285 1877.4162598,490.8240967 1876.5861816,490.3039551 L1876.5861816,488.635498 C1877.4162598,489.3161621 1878.4621582,489.6813965 1879.723877,489.7312012 L1879.723877,485.2902832 C1878.3901367,484.664917 1877.5241699,484.0810547 1877.1257324,483.5388184 C1876.7272949,482.99646 1876.5280762,482.3544922 1876.5280762,481.6130371 C1876.5280762,480.7497559 1876.8254395,479.9985352 1877.4204102,479.359375 C1878.0152588,478.7202148 1878.7830811,478.3369141 1879.723877,478.2097168 L1879.723877,476.5910645 L1880.6950684,476.5910645 L1880.6950684,478.1765137 C1881.9068604,478.2207031 1882.7314453,478.392334 1883.1687012,478.6911621 L1883.1687012,480.3181152 C1882.5322266,479.8310547 1881.7076416,479.5682373 1880.6950684,479.529541 L1880.6950684,484.1115723 C1881.9456787,484.6815186 1882.8061523,485.2501221 1883.2766113,485.8173828 C1883.7469482,486.3845215 1883.9821777,487.0223389 1883.9821777,487.7307129 C1883.9821777,488.621582 1883.6860352,489.3535156 1883.0939941,489.9262695 C1882.5018311,490.4990234 1881.7021484,490.8601074 1880.6950684,491.0095215 Z M1879.723877,479.5793457 C1878.661377,479.8117676 1878.130127,480.4287109 1878.130127,481.4304199 C1878.130127,481.9118652 1878.2435303,482.3103027 1878.470459,482.6257324 C1878.6972656,482.9411621 1879.1151123,483.2675781 1879.723877,483.6052246 Z M1880.6950684,489.6647949 C1881.8183594,489.4212646 1882.380127,488.8208008 1882.380127,487.8635254 C1882.380127,487.0610352 1881.8183594,486.361084 1880.6950684,485.7634277 Z M1894.8063965,491.0842285 L1893.1794434,491.0842285 L1893.1794434,489.5568848 L1893.1462402,489.5568848 C1892.4765625,490.7188721 1891.4362793,491.3000488 1890.0251465,491.3000488 C1888.8630371,491.3000488 1887.9388428,490.8863525 1887.2526855,490.059082 C1886.5664063,489.2316895 1886.2233887,488.1152344 1886.2233887,486.7097168 C1886.2233887,485.1933594 1886.6107178,483.9772949 1887.385498,483.0615234 C1888.1601563,482.1456299 1889.1728516,481.6877441 1890.423584,481.6877441 C1891.6741943,481.6877441 1892.5817871,482.1746826 1893.1462402,483.1486816 L1893.1794434,483.1486816 L1893.1794434,477.4958496 L1894.8063965,477.4958496 Z M1893.1877441,485.6223145 C1893.1877441,484.8862305 1892.9455566,484.2706299 1892.4614258,483.7753906 C1891.9771729,483.2800293 1891.3808594,483.0324707 1890.6726074,483.0324707 C1889.8093262,483.0324707 1889.1286621,483.3547363 1888.6306152,483.9995117 C1888.1325684,484.644165 1887.8835449,485.5227051 1887.8835449,486.6350098 C1887.8835449,487.6586914 1888.1228027,488.4680176 1888.6015625,489.0629883 C1889.0802002,489.6578369 1889.7180176,489.9553223 1890.5148926,489.9553223 C1891.3006592,489.9553223 1891.942627,489.6633301 1892.4406738,489.0795898 C1892.9387207,488.4957275 1893.1877441,487.7694092 1893.1877441,486.9006348 Z M1905.5144043,486.9089355 L1899.0895996,486.9089355 C1899.1171875,487.8884277 1899.3856201,488.6451416 1899.8947754,489.1791992 C1900.4038086,489.7131348 1901.1149902,489.9802246 1902.0280762,489.9802246 C1903.057373,489.9802246 1904.0008545,489.6508789 1904.8586426,488.9924316 L1904.8586426,490.4450684 C1904.0506592,491.0150146 1902.9798584,491.3000488 1901.6462402,491.3000488 C1900.3181152,491.3000488 1899.2818604,490.8793945 1898.5375977,490.0383301 C1897.7932129,489.1971436 1897.4211426,488.029541 1897.4211426,486.5354004 C1897.4211426,485.1297607 1897.8292236,483.970459 1898.6455078,483.057373 C1899.4616699,482.1442871 1900.475708,481.6877441 1901.6877441,481.6877441 C1902.8885498,481.6877441 1903.8265381,482.0737305 1904.501709,482.8457031 C1905.1767578,483.6176758 1905.5144043,484.6981201 1905.5144043,486.0871582 Z M1903.8874512,485.6057129 C1903.8818359,484.7756348 1903.6854248,484.133667 1903.2980957,483.6799316 C1902.9106445,483.2260742 1902.3656006,482.9992676 1901.6628418,482.9992676 C1901.0153809,482.9992676 1900.4549561,483.2399902 1899.9819336,483.7214355 C1899.5087891,484.2028809 1899.2113037,484.8309326 1899.0895996,485.6057129 Z M1907.4567871,489.1003418 C1908.2757568,489.6923828 1909.1584473,489.9885254 1910.1047363,489.9885254 C1911.3719482,489.9885254 1912.0056152,489.5734863 1912.0056152,488.7434082 C1912.0056152,488.3891602 1911.8671875,488.09729 1911.5905762,487.8676758 C1911.3138428,487.6379395 1910.7520752,487.3654785 1909.9055176,487.0500488 C1908.887207,486.6405029 1908.2259521,486.2351074 1907.9216309,485.8339844 C1907.6171875,485.4327393 1907.4649658,484.9471436 1907.4650879,484.3771973 C1907.4649658,483.5637207 1907.8095703,482.9121094 1908.4985352,482.4223633 C1909.1875,481.9326172 1910.0355225,481.6877441 1911.0427246,481.6877441 C1911.822998,481.6877441 1912.5478516,481.8232422 1913.2175293,482.0944824 L1913.2175293,483.6633301 C1912.53125,483.2205811 1911.7537842,482.9992676 1910.8850098,482.9992676 C1910.3647461,482.9992676 1909.9414063,483.1126709 1909.6149902,483.3395996 C1909.2884521,483.5664063 1909.1252441,483.8652344 1909.1252441,484.236084 C1909.1252441,484.6013184 1909.2427979,484.8862305 1909.4780273,485.0910645 C1909.7131348,485.2957764 1910.2347412,485.5585938 1911.0427246,485.8796387 C1912.0664063,486.2614746 1912.7581787,486.6571045 1913.1179199,487.0666504 C1913.4775391,487.4760742 1913.6574707,487.9824219 1913.6574707,488.5856934 C1913.6574707,489.4267578 1913.3129883,490.0894775 1912.6240234,490.5737305 C1911.9350586,491.0578613 1911.0427246,491.3000488 1909.9470215,491.3000488 C1908.9951172,491.3000488 1908.1650391,491.1201172 1907.4567871,490.760498 Z M1920.4807129,490.9929199 C1920.1264648,491.1865234 1919.6478271,491.2834473 1919.0446777,491.2834473 C1917.401123,491.2834473 1916.5793457,490.3730469 1916.5793457,488.5524902 L1916.5793457,483.248291 L1915.0021973,483.248291 L1915.0021973,481.9035645 L1916.5793457,481.9035645 L1916.5793457,479.6955566 L1918.197998,479.1809082 L1918.197998,481.9035645 L1920.4807129,481.9035645 L1920.4807129,483.248291 L1918.197998,483.248291 L1918.197998,488.2619629 C1918.197998,488.8651123 1918.300293,489.2967529 1918.505127,489.5568848 C1918.7098389,489.8168945 1919.0501709,489.9470215 1919.526123,489.9470215 C1919.8913574,489.9470215 1920.2094727,489.8446045 1920.4807129,489.6398926 Z M1927.5197754,483.513916 C1927.2485352,483.3201904 1926.875,483.2233887 1926.3991699,483.2233887 C1925.7683105,483.2233887 1925.2480469,483.5180664 1924.838623,484.1074219 C1924.4290771,484.6967773 1924.2243652,485.4729004 1924.2243652,486.435791 L1924.2243652,491.0842285 L1922.5974121,491.0842285 L1922.5974121,481.9035645 L1924.2243652,481.9035645 L1924.2243652,483.7712402 L1924.2575684,483.7712402 C1924.72229,482.4208984 1925.5247803,481.7458496 1926.6647949,481.7458496 C1927.0355225,481.7458496 1927.3205566,481.7873535 1927.5197754,481.8703613 Z M1928.6652832,486.5935059 C1928.6652832,485.0771484 1929.088623,483.8804932 1929.9353027,483.003418 C1930.7819824,482.1262207 1931.9301758,481.6877441 1933.380127,481.6877441 C1934.7579346,481.6877441 1935.838501,482.1096191 1936.621582,482.9536133 C1937.404541,483.7974854 1937.7961426,484.9637451 1937.7961426,486.4523926 C1937.7961426,487.9022217 1937.3782959,489.0726318 1936.5427246,489.963623 C1935.7070313,490.8544922 1934.5864258,491.3000488 1933.1809082,491.3000488 C1931.8084717,491.3000488 1930.7127686,490.8682861 1929.8937988,490.005127 C1929.074707,489.1418457 1928.6652832,488.0046387 1928.6652832,486.5935059 Z M1930.3254395,486.5437012 C1930.3254395,487.6005859 1930.5924072,488.4334717 1931.1264648,489.0422363 C1931.6604004,489.6508789 1932.378418,489.9553223 1933.2805176,489.9553223 C1934.210083,489.9553223 1934.918457,489.6578369 1935.4055176,489.0629883 C1935.8924561,488.4680176 1936.1359863,487.614502 1936.1359863,486.5021973 C1936.1359863,485.3842773 1935.8924561,484.5266113 1935.4055176,483.9289551 C1934.918457,483.3312988 1934.210083,483.0324707 1933.2805176,483.0324707 C1932.3674316,483.0324707 1931.6466064,483.3450928 1931.1181641,483.970459 C1930.5895996,484.5957031 1930.3254395,485.4534912 1930.3254395,486.5437012 Z M1947.8815918,481.9035645 L1943.7145996,492.470459 C1942.9398193,494.4293213 1941.8469238,495.4089355 1940.435791,495.4089355 C1940.0317383,495.4089355 1939.6859131,495.364624 1939.3981934,495.276123 L1939.3981934,493.8483887 C1939.713623,493.9700928 1940.0179443,494.0310059 1940.3112793,494.0310059 C1941.0472412,494.0310059 1941.5979004,493.5993652 1941.9631348,492.736084 L1942.6687012,491.067627 L1939.0661621,481.9035645 L1940.8674316,481.9035645 L1943.2663574,488.8015137 L1943.4655762,489.5568848 L1943.5070801,489.5568848 C1943.5402832,489.3852539 1943.6066895,489.1390381 1943.7062988,488.8181152 L1946.2131348,481.9035645 Z M1948.744873,479.8200684 L1956.713623,479.8200684 C1956.1546631,478.7575684 1955.7174072,477.9827881 1955.4020996,477.4958496 L1956.6970215,476.8815918 C1957.0068359,477.3574219 1957.4716797,478.1322021 1958.0915527,479.2058105 L1956.8796387,479.8200684 L1964.7487793,479.8200684 L1964.7487793,481.0817871 L1954.6799316,481.0817871 C1954.6411133,482.0888672 1954.5996094,482.9466553 1954.5554199,483.6550293 L1962.5739746,483.6550293 C1962.44104,486.0566406 1962.2972412,488.1429443 1962.142334,489.9138184 C1962.0205078,491.9169922 1961.0466309,492.9187012 1959.220459,492.9187012 C1958.3792725,492.9187012 1957.2558594,492.8743896 1955.8503418,492.7858887 C1955.7949219,492.3652344 1955.7119141,491.8560791 1955.6013184,491.2585449 C1957.0068359,491.4466553 1958.1468506,491.5407715 1959.0212402,491.5407715 C1960.0394287,491.5407715 1960.609375,490.9375 1960.7312012,489.7312012 C1960.8640137,488.4140625 1960.9802246,486.8037109 1961.079834,484.9001465 L1954.4641113,484.9001465 C1954.1541748,488.5524902 1952.463501,491.3857422 1949.392334,493.4001465 C1949.0935059,493.0458984 1948.7558594,492.6696777 1948.3796387,492.2712402 C1951.3013916,490.345459 1952.8675537,487.7666016 1953.0778809,484.5349121 C1953.1552734,483.6605225 1953.2189941,482.5095215 1953.2687988,481.0817871 L1948.744873,481.0817871 Z M1978.7189941,487.5563965 C1979.7814941,489.0062256 1980.927002,490.671875 1982.1555176,492.5534668 C1981.7127686,492.8079834 1981.2811279,493.0625 1980.8605957,493.3171387 C1980.5506592,492.8024902 1980.2463379,492.3044434 1979.9475098,491.822998 C1976.3172607,492.1218262 1973.4727783,492.3708496 1971.4143066,492.5700684 L1970.8000488,491.1257324 C1971.4973145,490.8157959 1972.1779785,490.168335 1972.842041,489.1833496 C1973.5725098,488.1429443 1974.2503662,487.0472412 1974.8757324,485.8962402 L1970.5178223,485.8962402 L1970.5178223,484.7009277 L1975.7307129,484.7009277 L1975.7307129,481.1813965 L1971.3312988,481.1813965 L1971.3312988,479.986084 L1975.7307129,479.986084 L1975.7307129,476.947998 L1977.0588379,476.947998 L1977.0588379,479.986084 L1981.6574707,479.986084 L1981.6574707,481.1813965 L1977.0588379,481.1813965 L1977.0588379,484.7009277 L1982.4377441,484.7009277 L1982.4377441,485.8962402 L1976.5441895,485.8962402 C1975.3100586,487.927124 1974.1037598,489.6813965 1972.9250488,491.1589355 C1975.0334473,491.0593262 1977.1418457,490.9099121 1979.2502441,490.7106934 C1978.6801758,489.8197021 1978.1379395,489.0007324 1977.623291,488.2536621 Z M1968.4260254,486.2282715 C1968.8354492,486.4052734 1969.2727051,486.5878906 1969.7375488,486.776123 C1968.9516602,489.1335449 1968.2655029,491.2640381 1967.6789551,493.1677246 L1966.2512207,492.6862793 C1966.9816895,490.7382813 1967.706543,488.5856934 1968.4260254,486.2282715 Z M1966.7990723,481.463623 C1967.6291504,482.0501709 1968.6030273,482.8027344 1969.7209473,483.7214355 C1969.3114014,484.1862793 1968.9904785,484.5458984 1968.7580566,484.8005371 C1967.5073242,483.6826172 1966.5776367,482.8913574 1965.9689941,482.4265137 Z M1967.4465332,477.1638184 C1968.3319092,477.8720703 1969.2836914,478.6800537 1970.302002,479.5876465 C1969.9256592,479.9749756 1969.5991211,480.3181152 1969.3225098,480.6169434 C1968.3041992,479.6097412 1967.3967285,478.7630615 1966.5998535,478.0769043 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip21)\" />\n<clipPath id=\"clip22\"><path d=\"M1728,594 L2201,594 L2201,684 L1728,684 L1728,594 Z\" /></clipPath>\n<path d=\"M1738,596 C1733.581665,596 1730,599.581665 1730,604 L1730,673 C1730,677.418335 1733.581665,681 1738,681 L2190,681 C2194.4182129,681 2198,677.418335 2198,673 L2198,604 C2198,599.581665 2194.4182129,596 2190,596 Z\" style=\"fill:rgb(211,223,255);stroke:none\" clip-path=\"url(#clip22)\" />\n<clipPath id=\"clip23\"><path d=\"M1728,594 L2201,594 L2201,684 L1728,684 L1728,594 Z\" /></clipPath>\n<path d=\"M1738,596 C1733.581665,596 1730,599.581665 1730,604 L1730,673 C1730,677.418335 1733.581665,681 1738,681 L2190,681 C2194.4182129,681 2198,677.418335 2198,673 L2198,604 C2198,599.581665 2194.4182129,596 2190,596 Z\" style=\"fill:none;stroke:rgb(0,64,128)\" clip-path=\"url(#clip23)\" />\n<clipPath id=\"clip24\"><path d=\"M1741,602 L2188,602 L2188,676 L1741,676 L1741,602 Z\" /></clipPath>\n<path d=\"M1748.4545898,613.3852539 C1748.1833496,613.1915283 1747.8098145,613.0947266 1747.3339844,613.0947266 C1746.703125,613.0947266 1746.1828613,613.3894043 1745.7734375,613.9787598 C1745.3638916,614.5681152 1745.1591797,615.3442383 1745.1591797,616.3071289 L1745.1591797,620.9555664 L1743.5322266,620.9555664 L1743.5322266,611.7749023 L1745.1591797,611.7749023 L1745.1591797,613.6425781 L1745.1923828,613.6425781 C1745.6571045,612.2922363 1746.4595947,611.6171875 1747.5996094,611.6171875 C1747.9703369,611.6171875 1748.2553711,611.6586914 1748.4545898,611.7416992 Z M1757.6933594,616.7802734 L1751.2685547,616.7802734 C1751.2961426,617.7597656 1751.5645752,618.5164795 1752.0737305,619.0505371 C1752.5827637,619.5844727 1753.2939453,619.8515625 1754.2070313,619.8515625 C1755.2363281,619.8515625 1756.1798096,619.5222168 1757.0375977,618.8637695 L1757.0375977,620.3164063 C1756.2296143,620.8863525 1755.1588135,621.1713867 1753.8251953,621.1713867 C1752.4970703,621.1713867 1751.4608154,620.7507324 1750.7165527,619.909668 C1749.972168,619.0684814 1749.6000977,617.9008789 1749.6000977,616.4067383 C1749.6000977,615.0010986 1750.0081787,613.8417969 1750.8244629,612.9287109 C1751.640625,612.015625 1752.6546631,611.559082 1753.8666992,611.559082 C1755.0675049,611.559082 1756.0054932,611.9450684 1756.6806641,612.717041 C1757.3557129,613.4890137 1757.6933594,614.569458 1757.6933594,615.9584961 Z M1756.0664063,615.4770508 C1756.060791,614.6469727 1755.8643799,614.0050049 1755.4770508,613.5512695 C1755.0895996,613.0974121 1754.5445557,612.8706055 1753.8417969,612.8706055 C1753.1943359,612.8706055 1752.6339111,613.1113281 1752.1608887,613.5927734 C1751.6877441,614.0742188 1751.3902588,614.7022705 1751.2685547,615.4770508 Z M1767.9116211,620.9555664 L1766.2929688,620.9555664 L1766.2929688,615.734375 C1766.2928467,613.84729 1765.6038818,612.9038086 1764.2260742,612.9038086 C1763.512207,612.9038086 1762.9255371,613.1694336 1762.4663086,613.7006836 C1762.006958,614.2319336 1761.7773438,614.9042969 1761.7773438,615.7177734 L1761.7773438,620.9555664 L1760.1503906,620.9555664 L1760.1503906,611.7749023 L1761.7773438,611.7749023 L1761.7773438,613.2939453 L1761.8105469,613.2939453 C1762.5021973,612.1373291 1763.5065918,611.559082 1764.8237305,611.559082 C1765.8308105,611.559082 1766.59729,611.8813477 1767.1230469,612.526123 C1767.6486816,613.1707764 1767.9116211,614.1101074 1767.9116211,615.3442383 Z M1778.9101563,620.9555664 L1777.2832031,620.9555664 L1777.2832031,619.4282227 L1777.25,619.4282227 C1776.5803223,620.59021 1775.5400391,621.1713867 1774.1289063,621.1713867 C1772.9667969,621.1713867 1772.0426025,620.7576904 1771.3564453,619.9304199 C1770.670166,619.1030273 1770.3271484,617.9865723 1770.3271484,616.5810547 C1770.3271484,615.0646973 1770.7144775,613.8486328 1771.4892578,612.9328613 C1772.263916,612.0169678 1773.2766113,611.559082 1774.5273438,611.559082 C1775.7779541,611.559082 1776.6855469,612.0460205 1777.25,613.0200195 L1777.2832031,613.0200195 L1777.2832031,607.3671875 L1778.9101563,607.3671875 Z M1777.2915039,615.4936523 C1777.2915039,614.7575684 1777.0493164,614.1419678 1776.5651855,613.6467285 C1776.0809326,613.1513672 1775.4846191,612.9038086 1774.7763672,612.9038086 C1773.9130859,612.9038086 1773.2324219,613.2260742 1772.734375,613.8708496 C1772.2363281,614.5155029 1771.9873047,615.394043 1771.9873047,616.5063477 C1771.9873047,617.5300293 1772.2265625,618.3393555 1772.7053223,618.9343262 C1773.18396,619.5291748 1773.8217773,619.8266602 1774.6186523,619.8266602 C1775.4044189,619.8266602 1776.0463867,619.534668 1776.5444336,618.9509277 C1777.0424805,618.3670654 1777.2915039,617.6407471 1777.2915039,616.7719727 Z M1789.6181641,616.7802734 L1783.1933594,616.7802734 C1783.2209473,617.7597656 1783.4893799,618.5164795 1783.9985352,619.0505371 C1784.5075684,619.5844727 1785.21875,619.8515625 1786.1318359,619.8515625 C1787.1611328,619.8515625 1788.1046143,619.5222168 1788.9624023,618.8637695 L1788.9624023,620.3164063 C1788.1544189,620.8863525 1787.0836182,621.1713867 1785.75,621.1713867 C1784.421875,621.1713867 1783.3856201,620.7507324 1782.6413574,619.909668 C1781.8969727,619.0684814 1781.5249023,617.9008789 1781.5249023,616.4067383 C1781.5249023,615.0010986 1781.9329834,613.8417969 1782.7492676,612.9287109 C1783.5654297,612.015625 1784.5794678,611.559082 1785.7915039,611.559082 C1786.9923096,611.559082 1787.9302979,611.9450684 1788.6054688,612.717041 C1789.2805176,613.4890137 1789.6181641,614.569458 1789.6181641,615.9584961 Z M1787.9912109,615.4770508 C1787.9855957,614.6469727 1787.7891846,614.0050049 1787.4018555,613.5512695 C1787.0144043,613.0974121 1786.4693604,612.8706055 1785.7666016,612.8706055 C1785.1191406,612.8706055 1784.5587158,613.1113281 1784.0856934,613.5927734 C1783.6125488,614.0742188 1783.3150635,614.7022705 1783.1933594,615.4770508 Z M1796.9975586,613.3852539 C1796.7263184,613.1915283 1796.3527832,613.0947266 1795.8769531,613.0947266 C1795.2460938,613.0947266 1794.7258301,613.3894043 1794.3164063,613.9787598 C1793.9068604,614.5681152 1793.7021484,615.3442383 1793.7021484,616.3071289 L1793.7021484,620.9555664 L1792.0751953,620.9555664 L1792.0751953,611.7749023 L1793.7021484,611.7749023 L1793.7021484,613.6425781 L1793.7353516,613.6425781 C1794.2000732,612.2922363 1795.0025635,611.6171875 1796.1425781,611.6171875 C1796.5133057,611.6171875 1796.7983398,611.6586914 1796.9975586,611.7416992 Z M1810.5942383,620.9555664 L1810.5942383,612.4389648 C1810.5942383,611.736084 1810.6357422,610.8922119 1810.71875,609.9072266 L1810.6772461,609.9072266 C1810.5333252,610.5269775 1810.4060059,610.9586182 1810.2954102,611.2021484 L1806.0537109,620.9555664 L1805.1323242,620.9555664 L1800.8989258,611.2768555 C1800.7993164,611.0554199 1800.6719971,610.598877 1800.5170898,609.9072266 L1800.4672852,609.9072266 C1800.522583,610.5048828 1800.550293,611.3736572 1800.550293,612.5136719 L1800.550293,620.9555664 L1798.9648438,620.9555664 L1798.9648438,608.0976563 L1801.2143555,608.0976563 L1805.0078125,616.9130859 C1805.2955322,617.5881348 1805.4864502,618.1138916 1805.5805664,618.4902344 L1805.6386719,618.4902344 C1805.9263916,617.6988525 1806.128418,617.1621094 1806.2446289,616.8798828 L1810.1044922,608.0976563 L1812.2460938,608.0976563 L1812.2460938,620.9555664 Z M1815.6660156,608.5375977 C1815.6660156,608.2497559 1815.7641602,608.0076904 1815.9606934,607.8112793 C1816.1571045,607.6147461 1816.3991699,607.5166016 1816.6870117,607.5166016 C1816.9802246,607.5166016 1817.2279053,607.6134033 1817.4299316,607.8071289 C1817.6318359,608.0007324 1817.7329102,608.2442627 1817.7329102,608.5375977 C1817.7329102,608.8253174 1817.6318359,609.0646973 1817.4299316,609.2556152 C1817.2279053,609.4465332 1816.9802246,609.5419922 1816.6870117,609.5419922 C1816.3936768,609.5419922 1816.1501465,609.4465332 1815.956543,609.2556152 C1815.7628174,609.0646973 1815.6660156,608.8253174 1815.6660156,608.5375977 Z M1815.8569336,620.9555664 L1815.8569336,611.7749023 L1817.4838867,611.7749023 L1817.4838867,620.9555664 Z M1827.4697266,611.7749023 L1824.3984375,616.3984375 L1827.4282227,620.9555664 L1825.5356445,620.9555664 L1823.7841797,618.0336914 C1823.6900635,617.8786621 1823.557251,617.6407471 1823.3857422,617.3198242 L1823.3525391,617.3198242 C1823.3469238,617.3530273 1823.2086182,617.5909424 1822.9375,618.0336914 L1821.152832,620.9555664 L1819.2851563,620.9555664 L1822.40625,616.4482422 L1819.4262695,611.7749023 L1821.3188477,611.7749023 L1823.0371094,614.8461914 C1823.1422119,615.0343018 1823.2695313,615.277832 1823.4189453,615.5766602 L1823.4521484,615.5766602 L1825.6850586,611.7749023 Z M1829.1962891,608.5375977 C1829.1962891,608.2497559 1829.2944336,608.0076904 1829.4909668,607.8112793 C1829.6873779,607.6147461 1829.9294434,607.5166016 1830.2172852,607.5166016 C1830.510498,607.5166016 1830.7581787,607.6134033 1830.9602051,607.8071289 C1831.1621094,608.0007324 1831.2631836,608.2442627 1831.2631836,608.5375977 C1831.2631836,608.8253174 1831.1621094,609.0646973 1830.9602051,609.2556152 C1830.7581787,609.4465332 1830.510498,609.5419922 1830.2172852,609.5419922 C1829.9239502,609.5419922 1829.6804199,609.4465332 1829.4868164,609.2556152 C1829.2930908,609.0646973 1829.1962891,608.8253174 1829.1962891,608.5375977 Z M1829.387207,620.9555664 L1829.387207,611.7749023 L1831.0141602,611.7749023 L1831.0141602,620.9555664 Z M1841.8134766,620.9555664 L1840.1948242,620.9555664 L1840.1948242,615.734375 C1840.1947021,613.84729 1839.5057373,612.9038086 1838.1279297,612.9038086 C1837.4140625,612.9038086 1836.8273926,613.1694336 1836.3681641,613.7006836 C1835.9088135,614.2319336 1835.6791992,614.9042969 1835.6791992,615.7177734 L1835.6791992,620.9555664 L1834.0522461,620.9555664 L1834.0522461,611.7749023 L1835.6791992,611.7749023 L1835.6791992,613.2939453 L1835.7124023,613.2939453 C1836.4040527,612.1373291 1837.4084473,611.559082 1838.7255859,611.559082 C1839.732666,611.559082 1840.4991455,611.8813477 1841.0249023,612.526123 C1841.5505371,613.1707764 1841.8134766,614.1101074 1841.8134766,615.3442383 Z M1854.3476563,613.7587891 L1863.7275391,613.7587891 L1863.7275391,620.4824219 L1862.5322266,620.4824219 L1862.5322266,619.8017578 L1855.5429688,619.8017578 L1855.5429688,620.4824219 L1854.3476563,620.4824219 Z M1853.4511719,608.8115234 L1858.7304688,608.8115234 C1858.4094238,608.269165 1858.088501,607.765625 1857.7675781,607.3007813 L1858.9296875,606.7197266 C1859.3391113,607.3394775 1859.7099609,607.9482422 1860.0419922,608.5458984 L1859.5439453,608.8115234 L1864.5908203,608.8115234 L1864.5908203,611.1855469 L1863.3955078,611.1855469 L1863.3955078,609.9072266 L1854.6464844,609.9072266 L1854.6464844,611.1855469 L1853.4511719,611.1855469 Z M1852.6210938,621.4287109 L1865.2714844,621.4287109 L1865.2714844,622.5244141 L1852.6210938,622.5244141 Z M1862.5322266,614.7880859 L1855.5429688,614.7880859 L1855.5429688,616.2822266 L1862.5322266,616.2822266 Z M1855.5429688,618.7724609 L1862.5322266,618.7724609 L1862.5322266,617.2783203 L1855.5429688,617.2783203 Z M1854.4140625,611.4013672 L1863.6113281,611.4013672 L1863.6113281,612.4638672 L1854.4140625,612.4638672 Z M1851.1601563,616.1328125 C1851.5916748,616.3430176 1852.0455322,616.5367432 1852.5214844,616.7138672 C1851.6691895,619.4143066 1851.0328369,621.550415 1850.6123047,623.1220703 L1849.2011719,622.5908203 C1849.9315186,620.6096191 1850.5845947,618.4570313 1851.1601563,616.1328125 Z M1849.6494141,611.3681641 C1850.800415,612.1650391 1851.802002,612.8955078 1852.6542969,613.5595703 L1851.7578125,614.6386719 C1850.8170166,613.8306885 1849.8430176,613.0559082 1848.8359375,612.3144531 Z M1850.3300781,607.1845703 C1851.1601563,607.7822266 1852.0566406,608.4572754 1853.0195313,609.2099609 L1852.0898438,610.2724609 C1851.2375488,609.5087891 1850.3687744,608.7893066 1849.4833984,608.1142578 Z M1882.9106445,621.2460938 C1882.4899902,621.6998291 1882.1469727,622.1203613 1881.8813477,622.5078125 C1878.9040527,621.5006104 1876.6739502,619.9455566 1875.190918,617.8427734 L1875.190918,623.3378906 L1873.8959961,623.3378906 L1873.8959961,617.8427734 C1872.3464355,619.7131348 1870.1495361,621.3400879 1867.3051758,622.7236328 C1867.0395508,622.3804932 1866.7241211,621.9986572 1866.3588867,621.578125 C1868.8712158,620.6373291 1870.9077148,619.3867188 1872.4682617,617.8261719 L1866.6411133,617.8261719 L1866.6411133,616.6640625 L1873.8959961,616.6640625 L1873.8959961,614.8212891 L1875.190918,614.8212891 L1875.190918,616.6640625 L1882.6616211,616.6640625 L1882.6616211,617.8261719 L1876.4526367,617.8261719 C1877.9245605,619.4863281 1880.0772705,620.6262207 1882.9106445,621.2460938 Z M1872.1860352,609.0107422 L1874.2446289,609.0107422 C1874.2667236,608.4572754 1874.2888184,607.737915 1874.3110352,606.8525391 L1875.5893555,606.8525391 C1875.5671387,607.6715088 1875.5450439,608.3908691 1875.5229492,609.0107422 L1879.7231445,609.0107422 L1879.7231445,613.34375 C1879.7230225,613.7753906 1879.9278564,613.9912109 1880.3374023,613.9912109 L1880.7192383,613.9912109 C1881.1507568,613.9912109 1881.4108887,613.7089844 1881.4995117,613.1445313 C1881.565918,612.6796875 1881.6212158,612.0875244 1881.6655273,611.3681641 C1882.0860596,611.5341797 1882.5010986,611.6724854 1882.9106445,611.7832031 C1882.8441162,612.4693604 1882.7667236,613.0559082 1882.6782227,613.5429688 C1882.512207,614.5943604 1881.9366455,615.1201172 1880.9516602,615.1201172 L1880.0883789,615.1201172 C1879.0036621,615.1201172 1878.4614258,614.583252 1878.4614258,613.5097656 L1878.4614258,610.1396484 L1875.456543,610.1396484 C1875.2462158,612.6851807 1874.0177002,614.5722656 1871.7709961,615.8007813 C1871.4942627,615.4576416 1871.1899414,615.1090088 1870.8579102,614.7548828 C1872.9053955,613.7919922 1874.0177002,612.25354 1874.1948242,610.1396484 L1872.1860352,610.1396484 Z M1871.1235352,611.8828125 C1871.3005371,612.3808594 1871.4665527,612.7958984 1871.621582,613.1279297 C1870.1716309,613.9689941 1868.7438965,614.848877 1867.3383789,615.7675781 L1866.5581055,614.5888672 C1868.0853271,613.7365723 1869.6071777,612.8345947 1871.1235352,611.8828125 Z M1868.5834961,606.9023438 C1869.6569824,607.4445801 1870.6309814,607.9703369 1871.5053711,608.4794922 C1871.206543,608.8557129 1870.9464111,609.2154541 1870.7250977,609.5585938 C1869.762207,608.9387207 1868.8269043,608.3798828 1867.9194336,607.8818359 Z M1867.0893555,609.4257813 C1867.9526367,609.8242188 1868.8989258,610.3111572 1869.9282227,610.8867188 C1869.6514893,611.3293457 1869.4134521,611.7056885 1869.2143555,612.015625 C1868.0300293,611.307251 1867.1114502,610.7980957 1866.4584961,610.4882813 Z M1884.0976563,609.6914063 L1892.0664063,609.6914063 C1891.5074463,608.6289063 1891.0701904,607.854126 1890.7548828,607.3671875 L1892.0498047,606.7529297 C1892.3596191,607.2287598 1892.8244629,608.00354 1893.4443359,609.0771484 L1892.2324219,609.6914063 L1900.1015625,609.6914063 L1900.1015625,610.953125 L1890.0327148,610.953125 C1889.9938965,611.9602051 1889.9523926,612.8179932 1889.9082031,613.5263672 L1897.9267578,613.5263672 C1897.7938232,615.9279785 1897.6500244,618.0142822 1897.4951172,619.7851563 C1897.373291,621.7883301 1896.3994141,622.7900391 1894.5732422,622.7900391 C1893.7320557,622.7900391 1892.6086426,622.7457275 1891.203125,622.6572266 C1891.1477051,622.2365723 1891.0646973,621.727417 1890.9541016,621.1298828 C1892.3596191,621.3179932 1893.4996338,621.4121094 1894.3740234,621.4121094 C1895.3922119,621.4121094 1895.9621582,620.8088379 1896.0839844,619.6025391 C1896.2167969,618.2854004 1896.3330078,616.6750488 1896.4326172,614.7714844 L1889.8168945,614.7714844 C1889.506958,618.4238281 1887.8162842,621.2570801 1884.7451172,623.2714844 C1884.4462891,622.9172363 1884.1086426,622.5410156 1883.7324219,622.1425781 C1886.6541748,620.2167969 1888.2203369,617.6379395 1888.4306641,614.40625 C1888.5080566,613.5318604 1888.5717773,612.3808594 1888.621582,610.953125 L1884.0976563,610.953125 Z M1914.0717773,617.4277344 C1915.1342773,618.8775635 1916.2797852,620.5432129 1917.5083008,622.4248047 C1917.0655518,622.6793213 1916.6339111,622.9338379 1916.2133789,623.1884766 C1915.9034424,622.6738281 1915.5991211,622.1757813 1915.300293,621.6943359 C1911.6700439,621.9931641 1908.8255615,622.2421875 1906.7670898,622.4414063 L1906.152832,620.9970703 C1906.8500977,620.6871338 1907.5307617,620.0396729 1908.1948242,619.0546875 C1908.925293,618.0142822 1909.6031494,616.9185791 1910.2285156,615.7675781 L1905.8706055,615.7675781 L1905.8706055,614.5722656 L1911.0834961,614.5722656 L1911.0834961,611.0527344 L1906.684082,611.0527344 L1906.684082,609.8574219 L1911.0834961,609.8574219 L1911.0834961,606.8193359 L1912.4116211,606.8193359 L1912.4116211,609.8574219 L1917.0102539,609.8574219 L1917.0102539,611.0527344 L1912.4116211,611.0527344 L1912.4116211,614.5722656 L1917.7905273,614.5722656 L1917.7905273,615.7675781 L1911.8969727,615.7675781 C1910.6628418,617.7984619 1909.456543,619.5527344 1908.277832,621.0302734 C1910.3862305,620.9306641 1912.4946289,620.78125 1914.6030273,620.5820313 C1914.032959,619.69104 1913.4907227,618.8720703 1912.9760742,618.125 Z M1903.7788086,616.0996094 C1904.1882324,616.2766113 1904.6254883,616.4592285 1905.090332,616.6474609 C1904.3044434,619.0048828 1903.6182861,621.135376 1903.0317383,623.0390625 L1901.6040039,622.5576172 C1902.3344727,620.6096191 1903.0593262,618.4570313 1903.7788086,616.0996094 Z M1902.1518555,611.3349609 C1902.9819336,611.9215088 1903.9558105,612.6740723 1905.0737305,613.5927734 C1904.6641846,614.0576172 1904.3432617,614.4172363 1904.1108398,614.671875 C1902.8601074,613.5539551 1901.9304199,612.7626953 1901.3217773,612.2978516 Z M1902.7993164,607.0351563 C1903.6846924,607.7434082 1904.6364746,608.5513916 1905.6547852,609.4589844 C1905.2784424,609.8463135 1904.9519043,610.1894531 1904.675293,610.4882813 C1903.6569824,609.4810791 1902.7495117,608.6343994 1901.9526367,607.9482422 Z M1923.7255859,618.8969727 L1922.3227539,623.3212891 L1921.1606445,623.3212891 L1922.1816406,618.8969727 Z M1937.0483398,611.1689453 L1943.2822266,611.1689453 C1943.442627,609.8131104 1943.5228271,608.3466797 1943.5229492,606.7695313 L1944.9506836,606.7695313 C1944.9506836,608.4130859 1944.8731689,609.8795166 1944.7182617,611.1689453 L1951.7739258,611.1689453 C1951.7075195,614.5888672 1951.6079102,617.4111328 1951.4750977,619.6357422 C1951.3643799,621.7053223 1950.2686768,622.7402344 1948.1879883,622.7402344 C1947.324707,622.7402344 1946.3009033,622.7125244 1945.1166992,622.6572266 C1945.0723877,622.2255859 1944.9893799,621.7109375 1944.8676758,621.1132813 C1945.907959,621.2570801 1946.9317627,621.3291016 1947.9389648,621.3291016 C1949.2670898,621.3291016 1949.9643555,620.6760254 1950.0307617,619.3701172 C1950.1856689,617.2008057 1950.2852783,614.8986816 1950.3295898,612.4638672 L1944.5356445,612.4638672 C1943.722168,617.3447266 1941.4477539,620.9748535 1937.7124023,623.3544922 C1937.4024658,622.967041 1937.0648193,622.5574951 1936.699707,622.1259766 C1940.1417236,620.0949707 1942.2695313,616.8742676 1943.0830078,612.4638672 L1937.0483398,612.4638672 Z M1944.934082,615.4521484 L1945.847168,614.6386719 C1946.909668,615.6236572 1947.8725586,616.592041 1948.7358398,617.5439453 L1947.706543,618.4736328 C1946.854248,617.4664307 1945.9301758,616.4592285 1944.934082,615.4521484 Z M1938.2270508,607.8818359 L1939.1235352,607.0517578 C1940.0421143,607.8486328 1940.9274902,608.6676025 1941.7797852,609.5087891 L1940.7670898,610.4550781 C1939.947998,609.5585938 1939.1013184,608.7008057 1938.2270508,607.8818359 Z M1964.9555664,608.0976563 L1960.2324219,620.9555664 L1958.3896484,620.9555664 L1953.7578125,608.0976563 L1955.6005859,608.0976563 L1959.0620117,618.1499023 C1959.1782227,618.4819336 1959.263916,618.8664551 1959.3193359,619.3037109 L1959.3608398,619.3037109 C1959.4050293,618.921875 1959.5019531,618.5317383 1959.6513672,618.1333008 L1963.1791992,608.0976563 Z M1974.4848633,620.9555664 L1972.8496094,620.9555664 L1972.8496094,619.5112305 L1972.8164063,619.5112305 C1972.2021484,620.6179199 1971.2585449,621.1713867 1969.9858398,621.1713867 C1967.8110352,621.1713867 1966.7236328,619.8708496 1966.7236328,617.2700195 L1966.7236328,611.7749023 L1968.3339844,611.7749023 L1968.3339844,617.0292969 C1968.3339844,618.894165 1969.0478516,619.8266602 1970.4755859,619.8266602 C1971.1838379,619.8266602 1971.7565918,619.5651855 1972.1938477,619.0422363 C1972.6309814,618.5192871 1972.8494873,617.859375 1972.8496094,617.0625 L1972.8496094,611.7749023 L1974.4848633,611.7749023 Z M1985.1762695,616.7802734 L1978.7514648,616.7802734 C1978.7790527,617.7597656 1979.0474854,618.5164795 1979.5566406,619.0505371 C1980.0656738,619.5844727 1980.7768555,619.8515625 1981.6899414,619.8515625 C1982.7192383,619.8515625 1983.6627197,619.5222168 1984.5205078,618.8637695 L1984.5205078,620.3164063 C1983.7125244,620.8863525 1982.6417236,621.1713867 1981.3081055,621.1713867 C1979.9799805,621.1713867 1978.9437256,620.7507324 1978.1994629,619.909668 C1977.4550781,619.0684814 1977.0830078,617.9008789 1977.0830078,616.4067383 C1977.0830078,615.0010986 1977.4910889,613.8417969 1978.307373,612.9287109 C1979.1235352,612.015625 1980.1375732,611.559082 1981.3496094,611.559082 C1982.550415,611.559082 1983.4884033,611.9450684 1984.1635742,612.717041 C1984.838623,613.4890137 1985.1762695,614.569458 1985.1762695,615.9584961 Z M1983.5493164,615.4770508 C1983.5437012,614.6469727 1983.34729,614.0050049 1982.9599609,613.5512695 C1982.5725098,613.0974121 1982.0274658,612.8706055 1981.324707,612.8706055 C1980.6772461,612.8706055 1980.1168213,613.1113281 1979.6437988,613.5927734 C1979.1706543,614.0742188 1978.8731689,614.7022705 1978.7514648,615.4770508 Z M1994.4399414,619.6606445 L1994.4399414,625.1806641 L1992.8129883,625.1806641 L1992.8129883,611.7749023 L1994.4399414,611.7749023 L1994.4399414,613.3603516 L1994.4731445,613.3603516 C1995.1925049,612.1594238 1996.2438965,611.559082 1997.6274414,611.559082 C1998.8005371,611.559082 1999.7205811,611.9699707 2000.3874512,612.791748 C2001.0541992,613.6135254 2001.3876953,614.7160645 2001.3876953,616.0996094 C2001.3876953,617.6269531 2001.0100098,618.8540039 2000.2546387,619.7810059 C1999.4992676,620.7078857 1998.4824219,621.1713867 1997.2041016,621.1713867 C1996.0253906,621.1713867 1995.1149902,620.6677246 1994.4731445,619.6606445 Z M1994.4316406,617.1704102 C1994.4316406,617.9174805 1994.6723633,618.546875 1995.1538086,619.0588379 C1995.6352539,619.5706787 1996.2384033,619.8266602 1996.9633789,619.8266602 C1997.8265381,619.8266602 1998.501709,619.4946289 1998.9887695,618.8305664 C1999.475708,618.1665039 1999.7192383,617.2478027 1999.7192383,616.074707 C1999.7192383,615.0841064 1999.4923096,614.3079834 1999.0385742,613.7463379 C1998.5847168,613.1845703 1997.9649658,612.9038086 1997.1791992,612.9038086 C1996.376709,612.9038086 1995.7182617,613.1887207 1995.2036133,613.7587891 C1994.6889648,614.3287354 1994.4316406,615.0592041 1994.4316406,615.9501953 Z M2008.9165039,613.3852539 C2008.6452637,613.1915283 2008.2717285,613.0947266 2007.7958984,613.0947266 C2007.1650391,613.0947266 2006.6447754,613.3894043 2006.2353516,613.9787598 C2005.8258057,614.5681152 2005.6210938,615.3442383 2005.6210938,616.3071289 L2005.6210938,620.9555664 L2003.9941406,620.9555664 L2003.9941406,611.7749023 L2005.6210938,611.7749023 L2005.6210938,613.6425781 L2005.6542969,613.6425781 C2006.1190186,612.2922363 2006.9215088,611.6171875 2008.0615234,611.6171875 C2008.432251,611.6171875 2008.7172852,611.6586914 2008.9165039,611.7416992 Z M2010.0620117,616.4648438 C2010.0620117,614.9484863 2010.4853516,613.7518311 2011.3320313,612.8747559 C2012.1787109,611.9975586 2013.3269043,611.559082 2014.7768555,611.559082 C2016.1546631,611.559082 2017.2352295,611.980957 2018.0183105,612.8249512 C2018.8012695,613.6688232 2019.1928711,614.835083 2019.1928711,616.3237305 C2019.1928711,617.7735596 2018.7750244,618.9439697 2017.9394531,619.8349609 C2017.1037598,620.7258301 2015.9831543,621.1713867 2014.5776367,621.1713867 C2013.2052002,621.1713867 2012.1094971,620.739624 2011.2905273,619.8764648 C2010.4714355,619.0131836 2010.0620117,617.8759766 2010.0620117,616.4648438 Z M2011.722168,616.4150391 C2011.722168,617.4719238 2011.9891357,618.3048096 2012.5231934,618.9135742 C2013.0571289,619.5222168 2013.7751465,619.8266602 2014.6772461,619.8266602 C2015.6068115,619.8266602 2016.3151855,619.5291748 2016.8022461,618.9343262 C2017.2891846,618.3393555 2017.5327148,617.4858398 2017.5327148,616.3735352 C2017.5327148,615.2556152 2017.2891846,614.3979492 2016.8022461,613.800293 C2016.3151855,613.2026367 2015.6068115,612.9038086 2014.6772461,612.9038086 C2013.7641602,612.9038086 2013.043335,613.2164307 2012.5148926,613.8417969 C2011.9863281,614.467041 2011.722168,615.3248291 2011.722168,616.4150391 Z M2026.215332,620.8642578 C2025.861084,621.0578613 2025.3824463,621.1547852 2024.7792969,621.1547852 C2023.1357422,621.1547852 2022.3139648,620.2443848 2022.3139648,618.4238281 L2022.3139648,613.1196289 L2020.7368164,613.1196289 L2020.7368164,611.7749023 L2022.3139648,611.7749023 L2022.3139648,609.5668945 L2023.9326172,609.0522461 L2023.9326172,611.7749023 L2026.215332,611.7749023 L2026.215332,613.1196289 L2023.9326172,613.1196289 L2023.9326172,618.1333008 C2023.9326172,618.7364502 2024.0349121,619.1680908 2024.2397461,619.4282227 C2024.444458,619.6882324 2024.78479,619.8183594 2025.2607422,619.8183594 C2025.6259766,619.8183594 2025.9440918,619.7159424 2026.215332,619.5112305 Z M2027.7177734,616.4648438 C2027.7177734,614.9484863 2028.1411133,613.7518311 2028.987793,612.8747559 C2029.8344727,611.9975586 2030.982666,611.559082 2032.4326172,611.559082 C2033.8104248,611.559082 2034.8909912,611.980957 2035.6740723,612.8249512 C2036.4570313,613.6688232 2036.8486328,614.835083 2036.8486328,616.3237305 C2036.8486328,617.7735596 2036.4307861,618.9439697 2035.5952148,619.8349609 C2034.7595215,620.7258301 2033.638916,621.1713867 2032.2333984,621.1713867 C2030.8609619,621.1713867 2029.7652588,620.739624 2028.9462891,619.8764648 C2028.1271973,619.0131836 2027.7177734,617.8759766 2027.7177734,616.4648438 Z M2029.3779297,616.4150391 C2029.3779297,617.4719238 2029.6448975,618.3048096 2030.1789551,618.9135742 C2030.7128906,619.5222168 2031.4309082,619.8266602 2032.3330078,619.8266602 C2033.2625732,619.8266602 2033.9709473,619.5291748 2034.4580078,618.9343262 C2034.9449463,618.3393555 2035.1884766,617.4858398 2035.1884766,616.3735352 C2035.1884766,615.2556152 2034.9449463,614.3979492 2034.4580078,613.800293 C2033.9709473,613.2026367 2033.2625732,612.9038086 2032.3330078,612.9038086 C2031.4199219,612.9038086 2030.6990967,613.2164307 2030.1706543,613.8417969 C2029.6420898,614.467041 2029.3779297,615.3248291 2029.3779297,616.4150391 Z M2043.8710938,620.8642578 C2043.5168457,621.0578613 2043.038208,621.1547852 2042.4350586,621.1547852 C2040.7915039,621.1547852 2039.9697266,620.2443848 2039.9697266,618.4238281 L2039.9697266,613.1196289 L2038.3925781,613.1196289 L2038.3925781,611.7749023 L2039.9697266,611.7749023 L2039.9697266,609.5668945 L2041.5883789,609.0522461 L2041.5883789,611.7749023 L2043.8710938,611.7749023 L2043.8710938,613.1196289 L2041.5883789,613.1196289 L2041.5883789,618.1333008 C2041.5883789,618.7364502 2041.6906738,619.1680908 2041.8955078,619.4282227 C2042.1002197,619.6882324 2042.4405518,619.8183594 2042.9165039,619.8183594 C2043.2817383,619.8183594 2043.5998535,619.7159424 2043.8710938,619.5112305 Z M2053.4584961,611.7749023 L2049.2915039,622.3417969 C2048.5166016,624.3006592 2047.4238281,625.2802734 2046.0126953,625.2802734 C2045.6086426,625.2802734 2045.2628174,625.2359619 2044.9750977,625.1474609 L2044.9750977,623.7197266 C2045.2905273,623.8414307 2045.5948486,623.9023438 2045.8881836,623.9023438 C2046.6241455,623.9023438 2047.1748047,623.4707031 2047.5400391,622.6074219 L2048.2456055,620.9389648 L2044.6430664,611.7749023 L2046.4443359,611.7749023 L2048.8432617,618.6728516 L2049.0424805,619.4282227 L2049.0839844,619.4282227 C2049.1171875,619.2565918 2049.1835938,619.010376 2049.2832031,618.6894531 L2051.7900391,611.7749023 Z M2056.8867188,619.6606445 L2056.8867188,625.1806641 L2055.2597656,625.1806641 L2055.2597656,611.7749023 L2056.8867188,611.7749023 L2056.8867188,613.3603516 L2056.9199219,613.3603516 C2057.6391602,612.1594238 2058.6906738,611.559082 2060.0742188,611.559082 C2061.2473145,611.559082 2062.1674805,611.9699707 2062.8342285,612.791748 C2063.5009766,613.6135254 2063.8344727,614.7160645 2063.8344727,616.0996094 C2063.8344727,617.6269531 2063.4567871,618.8540039 2062.701416,619.7810059 C2061.9460449,620.7078857 2060.9291992,621.1713867 2059.6508789,621.1713867 C2058.472168,621.1713867 2057.5617676,620.6677246 2056.9199219,619.6606445 Z M2056.878418,617.1704102 C2056.878418,617.9174805 2057.1191406,618.546875 2057.6005859,619.0588379 C2058.0820313,619.5706787 2058.6850586,619.8266602 2059.4101563,619.8266602 C2060.2734375,619.8266602 2060.9484863,619.4946289 2061.4355469,618.8305664 C2061.9223633,618.1665039 2062.1660156,617.2478027 2062.1660156,616.074707 C2062.1660156,615.0841064 2061.9389648,614.3079834 2061.4853516,613.7463379 C2061.0314941,613.1845703 2060.4116211,612.9038086 2059.6259766,612.9038086 C2058.8234863,612.9038086 2058.1650391,613.1887207 2057.6503906,613.7587891 C2057.1357422,614.3287354 2056.878418,615.0592041 2056.878418,615.9501953 Z M2073.9199219,616.7802734 L2067.4951172,616.7802734 C2067.5227051,617.7597656 2067.7910156,618.5164795 2068.300293,619.0505371 C2068.8093262,619.5844727 2069.5205078,619.8515625 2070.4335938,619.8515625 C2071.4628906,619.8515625 2072.40625,619.5222168 2073.2641602,618.8637695 L2073.2641602,620.3164063 C2072.4560547,620.8863525 2071.3852539,621.1713867 2070.0517578,621.1713867 C2068.7236328,621.1713867 2067.6875,620.7507324 2066.9431152,619.909668 C2066.1987305,619.0684814 2065.8266602,617.9008789 2065.8266602,616.4067383 C2065.8266602,615.0010986 2066.2348633,613.8417969 2067.0510254,612.9287109 C2067.8671875,612.015625 2068.8813477,611.559082 2070.0932617,611.559082 C2071.2939453,611.559082 2072.2319336,611.9450684 2072.9072266,612.717041 C2073.5822754,613.4890137 2073.9199219,614.569458 2073.9199219,615.9584961 Z M2072.2929688,615.4770508 C2072.2873535,614.6469727 2072.0908203,614.0050049 2071.7036133,613.5512695 C2071.3161621,613.0974121 2070.7709961,612.8706055 2070.0683594,612.8706055 C2069.4208984,612.8706055 2068.8603516,613.1113281 2068.3874512,613.5927734 C2067.9143066,614.0742188 2067.6166992,614.7022705 2067.4951172,615.4770508 Z M2078.8920898,616.2988281 C2080.8620605,615.1588135 2082.2456055,613.963501 2083.0424805,612.7128906 L2079.6391602,612.7128906 L2079.6391602,611.5507813 L2083.6069336,611.5507813 C2083.9057617,610.776001 2084.121582,609.9293213 2084.2543945,609.0107422 L2080.5024414,609.0107422 L2080.5024414,607.8486328 L2090.4633789,607.8486328 L2090.4633789,609.0107422 L2085.5493164,609.0107422 C2085.421875,609.9736328 2085.2392578,610.8203125 2085.0014648,611.5507813 L2091.2602539,611.5507813 L2091.2602539,612.7128906 L2087.309082,612.7128906 C2088.3991699,614.2457275 2089.8823242,615.2971191 2091.7583008,615.8671875 C2091.3818359,616.2877197 2091.0498047,616.7138672 2090.762207,617.1455078 C2088.5817871,616.0830078 2086.9604492,614.6054688 2085.8979492,612.7128906 L2084.5283203,612.7128906 C2083.6760254,614.4117432 2082.0905762,615.9611816 2079.7719727,617.3613281 C2079.5395508,617.0513916 2079.2460938,616.6972656 2078.8920898,616.2988281 Z M2084.1713867,614.9042969 L2085.4331055,614.9042969 L2085.4331055,621.1132813 C2085.4331055,622.3416748 2084.7856445,622.9560547 2083.4907227,622.9560547 C2082.8266602,622.9560547 2082.2290039,622.9504395 2081.6977539,622.9394531 C2081.6313477,622.5299072 2081.5427246,622.081665 2081.4321289,621.5947266 C2081.996582,621.6832275 2082.5554199,621.7275391 2083.1088867,621.7275391 C2083.8171387,621.7275391 2084.1713867,621.3898926 2084.1713867,620.7148438 Z M2077.1489258,616.1494141 C2077.5805664,616.3154297 2078.0231934,616.4758301 2078.4770508,616.6308594 C2077.9125977,618.9771729 2077.4089355,621.1132813 2076.9663086,623.0390625 L2075.5385742,622.6074219 C2076.125,620.7148438 2076.6618652,618.5621338 2077.1489258,616.1494141 Z M2088.0229492,617.0292969 L2089.0688477,616.53125 C2089.8876953,617.8261719 2090.6347656,619.1486816 2091.3100586,620.4990234 L2090.1645508,621.0634766 C2089.6220703,619.9234619 2088.9082031,618.5787354 2088.0229492,617.0292969 Z M2081.6811523,616.6972656 L2082.8432617,617.1787109 C2082.234375,618.7060547 2081.5759277,620.0507813 2080.8676758,621.2128906 C2080.4802246,621.0136719 2080.0874023,620.8365479 2079.6889648,620.6816406 C2080.4968262,619.4752197 2081.1608887,618.1470947 2081.6811523,616.6972656 Z M2085.9145508,617.3945313 L2087.0102539,616.9960938 C2087.4970703,618.2355957 2087.9619141,619.5914307 2088.4047852,621.0634766 L2087.159668,621.4785156 C2086.8054199,620.0839844 2086.3903809,618.7226563 2085.9145508,617.3945313 Z M2075.9702148,611.3515625 C2076.7670898,611.9049072 2077.746582,612.6574707 2078.9086914,613.609375 C2078.4990234,614.0742188 2078.1726074,614.4338379 2077.9291992,614.6884766 C2076.7670898,613.6259766 2075.8374023,612.8291016 2075.1401367,612.2978516 Z M2076.6176758,607.0351563 C2077.6025391,607.8098145 2078.5600586,608.6177979 2079.4897461,609.4589844 C2079.1132813,609.8352051 2078.78125,610.1728516 2078.4936523,610.4716797 C2077.453125,609.4423828 2076.5456543,608.6011963 2075.7709961,607.9482422 Z M2102.1591797,609.0439453 L2108.4677734,609.0439453 L2108.4677734,622.7236328 L2107.15625,622.7236328 L2107.15625,621.046875 L2103.4707031,621.046875 L2103.4707031,622.7236328 L2102.1591797,622.7236328 Z M2093.0449219,609.8574219 L2095.3608398,609.8574219 C2095.3718262,608.9664307 2095.3745117,607.9758301 2095.3691406,606.8857422 L2096.6806641,606.8857422 C2096.6806641,607.9869385 2096.6750488,608.9775391 2096.6640625,609.8574219 L2100.5322266,609.8574219 C2100.4768066,614.1074219 2100.4047852,617.4443359 2100.3164063,619.8681641 C2100.2719727,621.8602295 2099.5195313,622.817627 2098.0585938,622.7402344 C2097.6269531,622.7402344 2096.9904785,622.7236328 2096.1494141,622.6904297 C2096.0717773,622.2255859 2095.9833984,621.7440186 2095.8837891,621.2460938 C2096.6584473,621.3457031 2097.2893066,621.3955078 2097.7763672,621.3955078 C2098.5178223,621.4176025 2098.921875,620.8918457 2098.9882813,619.8183594 C2099.1098633,617.1953125 2099.1818848,614.2955322 2099.2041016,611.1191406 L2096.6474609,611.1191406 C2096.6362305,611.9658203 2096.6196289,612.6851807 2096.5976563,613.2773438 C2096.5532227,617.6047363 2095.5129395,620.9361572 2093.4765625,623.2714844 C2093.199707,622.9283447 2092.873291,622.5576172 2092.4970703,622.1591797 C2094.3342285,620.1447754 2095.2695313,617.1398926 2095.3027344,613.1445313 C2095.324707,612.5634766 2095.3413086,611.8883057 2095.3525391,611.1191406 L2093.0449219,611.1191406 Z M2107.15625,610.2724609 L2103.4707031,610.2724609 L2103.4707031,619.8515625 L2107.15625,619.8515625 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip24)\" />\n<clipPath id=\"clip25\"><path d=\"M1741,602 L2188,602 L2188,676 L1741,676 L1741,602 Z\" /></clipPath>\n<path d=\"M1753.7412109,648.4172363 L1746.1210938,648.4172363 L1746.1210938,647.3464355 L1753.7412109,647.3464355 Z M1754.8120117,639.5852051 C1754.8120117,638.0688477 1755.2353516,636.8721924 1756.0820313,635.9951172 C1756.9287109,635.1179199 1758.0769043,634.6794434 1759.5268555,634.6794434 C1760.9046631,634.6794434 1761.9852295,635.1013184 1762.7683105,635.9453125 C1763.5512695,636.7891846 1763.9428711,637.9554443 1763.9428711,639.4440918 C1763.9428711,640.8939209 1763.5250244,642.0643311 1762.6894531,642.9553223 C1761.8537598,643.8461914 1760.7331543,644.291748 1759.3276367,644.291748 C1757.9552002,644.291748 1756.8594971,643.8599854 1756.0405273,642.9968262 C1755.2214355,642.1335449 1754.8120117,640.9963379 1754.8120117,639.5852051 Z M1756.472168,639.5354004 C1756.472168,640.5922852 1756.7391357,641.4251709 1757.2731934,642.0339355 C1757.8071289,642.6425781 1758.5251465,642.9470215 1759.4272461,642.9470215 C1760.3568115,642.9470215 1761.0651855,642.6495361 1761.5522461,642.0546875 C1762.0391846,641.4597168 1762.2827148,640.6062012 1762.2827148,639.4938965 C1762.2827148,638.3759766 1762.0391846,637.5183105 1761.5522461,636.9206543 C1761.0651855,636.322998 1760.3568115,636.0241699 1759.4272461,636.0241699 C1758.5141602,636.0241699 1757.793335,636.336792 1757.2648926,636.9621582 C1756.7363281,637.5874023 1756.472168,638.4451904 1756.472168,639.5354004 Z M1768.0517578,642.0090332 L1766.6323242,646.4333496 L1765.4536133,646.4333496 L1766.4829102,642.0090332 Z M1776.9418945,648.4172363 L1769.3217773,648.4172363 L1769.3217773,647.3464355 L1776.9418945,647.3464355 Z M1786.3881836,644.0759277 L1784.7695313,644.0759277 L1784.7695313,638.8547363 C1784.7694092,636.9676514 1784.0804443,636.0241699 1782.7026367,636.0241699 C1781.9887695,636.0241699 1781.4020996,636.2897949 1780.9428711,636.8210449 C1780.4835205,637.3522949 1780.2539063,638.0246582 1780.2539063,638.8381348 L1780.2539063,644.0759277 L1778.6269531,644.0759277 L1778.6269531,634.8952637 L1780.2539063,634.8952637 L1780.2539063,636.4143066 L1780.2871094,636.4143066 C1780.9787598,635.2576904 1781.9831543,634.6794434 1783.300293,634.6794434 C1784.307373,634.6794434 1785.0738525,635.001709 1785.5996094,635.6464844 C1786.1252441,636.2911377 1786.3881836,637.2304688 1786.3881836,638.4645996 Z M1790.9121094,642.0090332 L1789.4926758,646.4333496 L1788.3139648,646.4333496 L1789.3432617,642.0090332 Z M1799.8022461,648.4172363 L1792.1821289,648.4172363 L1792.1821289,647.3464355 L1799.8022461,647.3464355 Z M1800.9726563,642.092041 C1801.791626,642.684082 1802.6743164,642.9802246 1803.6206055,642.9802246 C1804.8878174,642.9802246 1805.5214844,642.5651855 1805.5214844,641.7351074 C1805.5214844,641.3808594 1805.3830566,641.0889893 1805.1064453,640.859375 C1804.8297119,640.6296387 1804.2679443,640.3571777 1803.4213867,640.041748 C1802.4030762,639.6322021 1801.7418213,639.2268066 1801.4375,638.8256836 C1801.1330566,638.4244385 1800.980835,637.9388428 1800.980957,637.3688965 C1800.980835,636.5554199 1801.3254395,635.9038086 1802.0144043,635.4140625 C1802.7033691,634.9243164 1803.5513916,634.6794434 1804.5585938,634.6794434 C1805.3388672,634.6794434 1806.0637207,634.8149414 1806.7333984,635.0861816 L1806.7333984,636.6550293 C1806.0471191,636.2122803 1805.2696533,635.9909668 1804.4008789,635.9909668 C1803.8806152,635.9909668 1803.4572754,636.1043701 1803.1308594,636.3312988 C1802.8043213,636.5581055 1802.6411133,636.8569336 1802.6411133,637.2277832 C1802.6411133,637.5930176 1802.758667,637.8779297 1802.9938965,638.0827637 C1803.2290039,638.2874756 1803.7506104,638.550293 1804.5585938,638.8713379 C1805.5822754,639.2531738 1806.2740479,639.6488037 1806.6337891,640.0583496 C1806.9934082,640.4677734 1807.1733398,640.9741211 1807.1733398,641.5773926 C1807.1733398,642.418457 1806.8288574,643.0811768 1806.1398926,643.5654297 C1805.4509277,644.0495605 1804.5585938,644.291748 1803.4628906,644.291748 C1802.5109863,644.291748 1801.6809082,644.1118164 1800.9726563,643.7521973 Z M1811.0830078,642.0090332 L1809.6635742,646.4333496 L1808.4848633,646.4333496 L1809.5141602,642.0090332 Z M1819.9731445,648.4172363 L1812.3530273,648.4172363 L1812.3530273,647.3464355 L1819.9731445,647.3464355 Z M1821.6499023,644.0759277 L1821.6499023,630.4875488 L1823.2768555,630.4875488 L1823.2768555,644.0759277 Z M1827.809082,642.0090332 L1826.3896484,646.4333496 L1825.2109375,646.4333496 L1826.2402344,642.0090332 Z M1836.6992188,648.4172363 L1829.0791016,648.4172363 L1829.0791016,647.3464355 L1836.6992188,647.3464355 Z M1842.7919922,643.9846191 C1842.4377441,644.1782227 1841.9591064,644.2751465 1841.355957,644.2751465 C1839.7124023,644.2751465 1838.890625,643.3647461 1838.890625,641.5441895 L1838.890625,636.2399902 L1837.3134766,636.2399902 L1837.3134766,634.8952637 L1838.890625,634.8952637 L1838.890625,632.6872559 L1840.5092773,632.1726074 L1840.5092773,634.8952637 L1842.7919922,634.8952637 L1842.7919922,636.2399902 L1840.5092773,636.2399902 L1840.5092773,641.2536621 C1840.5092773,641.8568115 1840.6115723,642.2884521 1840.8164063,642.548584 C1841.0211182,642.8085938 1841.3614502,642.9387207 1841.8374023,642.9387207 C1842.2026367,642.9387207 1842.520752,642.8363037 1842.7919922,642.6315918 Z M1846.402832,642.0090332 L1844.9833984,646.4333496 L1843.8046875,646.4333496 L1844.8339844,642.0090332 Z M1855.2929688,648.4172363 L1847.6728516,648.4172363 L1847.6728516,647.3464355 L1855.2929688,647.3464355 Z M1864.9467773,648.3010254 L1863.3198242,648.3010254 L1863.3198242,642.5319824 L1863.2866211,642.5319824 C1862.6446533,643.7050781 1861.6097412,644.291748 1860.1821289,644.291748 C1859.0255127,644.291748 1858.0999756,643.8835449 1857.4055176,643.0673828 C1856.7109375,642.2510986 1856.3637695,641.1291504 1856.3637695,639.701416 C1856.3637695,638.1795654 1856.7456055,636.9621582 1857.5092773,636.0490723 C1858.2729492,635.1359863 1859.2966309,634.6794434 1860.5805664,634.6794434 C1861.8200684,634.6794434 1862.722168,635.1663818 1863.2866211,636.1403809 L1863.3198242,636.1403809 L1863.3198242,634.8952637 L1864.9467773,634.8952637 Z M1863.3198242,638.6472168 C1863.3253174,637.9222412 1863.0942383,637.303833 1862.626709,636.7919922 C1862.1590576,636.2800293 1861.5489502,636.0241699 1860.7963867,636.0241699 C1859.9331055,636.0241699 1859.255127,636.3450928 1858.7626953,636.9870605 C1858.2701416,637.6289063 1858.0239258,638.5198975 1858.0239258,639.6599121 C1858.0239258,640.689209 1858.260498,641.4943848 1858.7336426,642.0754395 C1859.2067871,642.6564941 1859.8278809,642.9470215 1860.597168,642.9470215 C1861.4382324,642.9470215 1862.1037598,642.6578369 1862.5935059,642.0795898 C1863.083252,641.5012207 1863.3253174,640.7805176 1863.3198242,639.9172363 Z M1869.6699219,642.0090332 L1868.2504883,646.4333496 L1867.0717773,646.4333496 L1868.1010742,642.0090332 Z M1878.5600586,648.4172363 L1870.9399414,648.4172363 L1870.9399414,647.3464355 L1878.5600586,647.3464355 Z M1880.0458984,631.657959 C1880.0458984,631.3701172 1880.144043,631.1280518 1880.3405762,630.9316406 C1880.5369873,630.7351074 1880.7790527,630.6369629 1881.0668945,630.6369629 C1881.3601074,630.6369629 1881.6077881,630.7337646 1881.8098145,630.9274902 C1882.0117188,631.1210938 1882.112793,631.364624 1882.112793,631.657959 C1882.112793,631.9456787 1882.0117188,632.1850586 1881.8098145,632.3759766 C1881.6077881,632.5668945 1881.3601074,632.6623535 1881.0668945,632.6623535 C1880.7735596,632.6623535 1880.5300293,632.5668945 1880.3364258,632.3759766 C1880.1427002,632.1850586 1880.0458984,631.9456787 1880.0458984,631.657959 Z M1880.2368164,644.0759277 L1880.2368164,634.8952637 L1881.8637695,634.8952637 L1881.8637695,644.0759277 Z M1886.3959961,642.0090332 L1884.9765625,646.4333496 L1883.7978516,646.4333496 L1884.8271484,642.0090332 Z M1895.2861328,648.4172363 L1887.6660156,648.4172363 L1887.6660156,647.3464355 L1895.2861328,647.3464355 Z M1910.1860352,644.0759277 L1908.559082,644.0759277 L1908.559082,638.8049316 C1908.559082,637.8088379 1908.4040527,637.0963135 1908.0942383,636.6674805 C1907.7843018,636.2385254 1907.2751465,636.0241699 1906.5668945,636.0241699 C1905.9692383,636.0241699 1905.4572754,636.3035889 1905.03125,636.8625488 C1904.6051025,637.4213867 1904.3920898,638.0827637 1904.3920898,638.8464355 L1904.3920898,644.0759277 L1902.7651367,644.0759277 L1902.7651367,638.638916 C1902.7650146,636.895752 1902.0926514,636.0241699 1900.7480469,636.0241699 C1900.1281738,636.0241699 1899.6149902,636.2897949 1899.208252,636.8210449 C1898.8015137,637.3522949 1898.5981445,638.0301514 1898.5981445,638.8547363 L1898.5981445,644.0759277 L1896.9711914,644.0759277 L1896.9711914,634.8952637 L1898.5981445,634.8952637 L1898.5981445,636.3479004 L1898.6313477,636.3479004 C1899.2843018,635.2355957 1900.2388916,634.6794434 1901.4951172,634.6794434 C1902.1092529,634.6794434 1902.6516113,634.8481445 1903.1220703,635.185791 C1903.5924072,635.5233154 1903.9189453,635.9798584 1904.1015625,636.5554199 C1904.7822266,635.3046875 1905.800415,634.6794434 1907.15625,634.6794434 C1909.1760254,634.6794434 1910.1859131,635.9245605 1910.1860352,638.4147949 Z M1914.8759766,642.0090332 L1913.456543,646.4333496 L1912.277832,646.4333496 L1913.3071289,642.0090332 Z M1923.7661133,648.4172363 L1916.1459961,648.4172363 L1916.1459961,647.3464355 L1923.7661133,647.3464355 Z M1930.1577148,631.8737793 C1929.8532715,631.7132568 1929.5240479,631.6330566 1929.1699219,631.6330566 C1928.1516113,631.6330566 1927.6425781,632.263916 1927.6425781,633.5256348 L1927.6425781,634.8952637 L1929.7924805,634.8952637 L1929.7924805,636.2399902 L1927.6425781,636.2399902 L1927.6425781,644.0759277 L1926.0322266,644.0759277 L1926.0322266,636.2399902 L1924.4633789,636.2399902 L1924.4633789,634.8952637 L1926.0322266,634.8952637 L1926.0322266,633.4509277 C1926.0322266,632.4658203 1926.3157959,631.6925049 1926.8830566,631.1308594 C1927.4501953,630.5690918 1928.1710205,630.2883301 1929.0454102,630.2883301 C1929.5102539,630.2883301 1929.8809814,630.3408203 1930.1577148,630.4460449 Z M1933.0131836,642.0090332 L1931.59375,646.4333496 L1930.4150391,646.4333496 L1931.4443359,642.0090332 Z M1941.9033203,648.4172363 L1934.2832031,648.4172363 L1934.2832031,647.3464355 L1941.9033203,647.3464355 Z M1951.3911133,644.0759277 L1949.1748047,644.0759277 L1945.2485352,639.6516113 L1945.215332,639.6516113 L1945.215332,644.0759277 L1943.5883789,644.0759277 L1943.5883789,630.4875488 L1945.215332,630.4875488 L1945.215332,639.1037598 L1945.2485352,639.1037598 L1948.9755859,634.8952637 L1951.0673828,634.8952637 L1946.9169922,639.3112793 Z M1954.6118164,642.0090332 L1953.1923828,646.4333496 L1952.0136719,646.4333496 L1953.0429688,642.0090332 Z M1963.5019531,648.4172363 L1955.8818359,648.4172363 L1955.8818359,647.3464355 L1963.5019531,647.3464355 Z M1966.8139648,642.7810059 L1966.8139648,644.0759277 L1965.1870117,644.0759277 L1965.1870117,630.4875488 L1966.8139648,630.4875488 L1966.8139648,636.4807129 L1966.847168,636.4807129 C1967.5665283,635.2797852 1968.6179199,634.6794434 1970.0014648,634.6794434 C1971.1524658,634.6794434 1972.0668945,635.0847168 1972.744873,635.8955078 C1973.4227295,636.7061768 1973.7617188,637.8143311 1973.7617188,639.2199707 C1973.7617188,640.7694092 1973.3812256,642.0020752 1972.6203613,642.9179688 C1971.859375,643.8337402 1970.8453369,644.291748 1969.578125,644.291748 C1968.3828125,644.291748 1967.4724121,643.7880859 1966.847168,642.7810059 Z M1966.8056641,640.2990723 C1966.8056641,641.0405273 1967.0463867,641.6672363 1967.527832,642.1791992 C1968.0092773,642.69104 1968.6124268,642.9470215 1969.3374023,642.9470215 C1970.2005615,642.9470215 1970.8757324,642.6149902 1971.362793,641.9509277 C1971.8497314,641.2868652 1972.0932617,640.3681641 1972.0932617,639.1950684 C1972.0932617,638.2265625 1971.866333,637.4560547 1971.4125977,636.8833008 C1970.9587402,636.3105469 1970.3389893,636.0241699 1969.5532227,636.0241699 C1968.7563477,636.0241699 1968.0991211,636.309082 1967.5817871,636.8791504 C1967.0643311,637.4490967 1966.8056641,638.1740723 1966.8056641,639.0539551 Z M1977.8623047,642.0090332 L1976.4428711,646.4333496 L1975.2641602,646.4333496 L1976.293457,642.0090332 Z M1986.7524414,648.4172363 L1979.1323242,648.4172363 L1979.1323242,647.3464355 L1986.7524414,647.3464355 Z M1995.8334961,634.8952637 L1992.1977539,644.0759277 L1990.5541992,644.0759277 L1987.1010742,634.8952637 L1988.8774414,634.8952637 L1991.1186523,641.4528809 C1991.3012695,641.9785156 1991.4091797,642.418457 1991.4423828,642.7727051 L1991.4838867,642.7727051 C1991.5391846,642.3078613 1991.6359863,641.8789063 1991.7744141,641.486084 L1994.1235352,634.8952637 Z M1999.1206055,642.0090332 L1997.7011719,646.4333496 L1996.5224609,646.4333496 L1997.5517578,642.0090332 Z M2008.0107422,648.4172363 L2000.390625,648.4172363 L2000.390625,647.3464355 L2008.0107422,647.3464355 Z M2017.1748047,639.9006348 L2010.75,639.9006348 C2010.7775879,640.880127 2011.0460205,641.6368408 2011.5551758,642.1708984 C2012.064209,642.704834 2012.7753906,642.9719238 2013.6884766,642.9719238 C2014.7177734,642.9719238 2015.6612549,642.6425781 2016.519043,641.9841309 L2016.519043,643.4367676 C2015.7110596,644.0067139 2014.6402588,644.291748 2013.3066406,644.291748 C2011.9785156,644.291748 2010.9422607,643.8710938 2010.197998,643.0300293 C2009.4536133,642.1888428 2009.081543,641.0212402 2009.081543,639.5270996 C2009.081543,638.12146 2009.489624,636.9621582 2010.3059082,636.0490723 C2011.1220703,635.1359863 2012.1361084,634.6794434 2013.3481445,634.6794434 C2014.5489502,634.6794434 2015.4869385,635.0654297 2016.1621094,635.8374023 C2016.8371582,636.609375 2017.1748047,637.6898193 2017.1748047,639.0788574 Z M2015.5478516,638.5974121 C2015.5422363,637.767334 2015.3458252,637.1253662 2014.9584961,636.6716309 C2014.5710449,636.2177734 2014.026001,635.9909668 2013.3232422,635.9909668 C2012.6757813,635.9909668 2012.1153564,636.2316895 2011.642334,636.7131348 C2011.1691895,637.1945801 2010.8717041,637.8226318 2010.75,638.5974121 Z M2021.1259766,642.0090332 L2019.706543,646.4333496 L2018.527832,646.4333496 L2019.5571289,642.0090332 Z M2030.0161133,648.4172363 L2022.3959961,648.4172363 L2022.3959961,647.3464355 L2030.0161133,647.3464355 Z M2039.2797852,644.0759277 L2037.6445313,644.0759277 L2037.6445313,642.6315918 L2037.6113281,642.6315918 C2036.9970703,643.7382813 2036.0534668,644.291748 2034.7807617,644.291748 C2032.605957,644.291748 2031.5185547,642.9912109 2031.5185547,640.3903809 L2031.5185547,634.8952637 L2033.1289063,634.8952637 L2033.1289063,640.1496582 C2033.1289063,642.0145264 2033.8427734,642.9470215 2035.2705078,642.9470215 C2035.9787598,642.9470215 2036.5515137,642.6855469 2036.9887695,642.1625977 C2037.4259033,641.6396484 2037.6444092,640.9797363 2037.6445313,640.1828613 L2037.6445313,634.8952637 L2039.2797852,634.8952637 Z M2043.9863281,642.0090332 L2042.5668945,646.4333496 L2041.3881836,646.4333496 L2042.4174805,642.0090332 Z M2052.8764648,648.4172363 L2045.2563477,648.4172363 L2045.2563477,647.3464355 L2052.8764648,647.3464355 Z M2062.5302734,643.3039551 C2062.5302734,646.7016602 2060.8811035,648.4006348 2057.5830078,648.4006348 C2056.4428711,648.4006348 2055.4523926,648.1875 2054.6113281,647.7614746 L2054.6113281,646.192627 C2055.6350098,646.7625732 2056.6171875,647.0476074 2057.5581055,647.0476074 C2059.7880859,647.0476074 2060.9033203,645.8743896 2060.9033203,643.5280762 L2060.9033203,642.5568848 L2060.8701172,642.5568848 C2060.1728516,643.7133789 2059.1323242,644.291748 2057.7490234,644.291748 C2056.5979004,644.291748 2055.6765137,643.8793945 2054.9848633,643.0549316 C2054.2929688,642.2303467 2053.9472656,641.1374512 2053.9472656,639.776123 C2053.9472656,638.2099609 2054.3291016,636.9689941 2055.0927734,636.0532227 C2055.8564453,635.1373291 2056.8745117,634.6794434 2058.1474609,634.6794434 C2059.3703613,634.6794434 2060.277832,635.1663818 2060.8701172,636.1403809 L2060.9033203,636.1403809 L2060.9033203,634.8952637 L2062.5302734,634.8952637 Z M2060.9033203,638.6140137 C2060.9086914,637.9056396 2060.6708984,637.296875 2060.1894531,636.7878418 C2059.7080078,636.2786865 2059.1157227,636.0241699 2058.4130859,636.0241699 C2057.5275879,636.0241699 2056.838623,636.3492432 2056.3461914,636.9995117 C2055.8535156,637.6496582 2055.6074219,638.5419922 2055.6074219,639.6765137 C2055.6074219,640.6503906 2055.8452148,641.4389648 2056.3212891,642.0422363 C2056.7971191,642.6453857 2057.4279785,642.9470215 2058.2138672,642.9470215 C2059.005127,642.9470215 2059.6525879,642.6591797 2060.15625,642.0837402 C2060.659668,641.5081787 2060.9086914,640.77771 2060.9033203,639.892334 Z M2074.6162109,642.017334 L2073.2133789,646.4416504 L2072.0512695,646.4416504 L2073.0722656,642.017334 Z M2097.7504883,645.9519043 L2096.7792969,645.9519043 L2096.7792969,644.0759277 C2095.5175781,644.0759277 2094.4716797,643.8157959 2093.6416016,643.2956543 L2093.6416016,641.6271973 C2094.4716797,642.3078613 2095.5175781,642.6730957 2096.7792969,642.7229004 L2096.7792969,638.2819824 C2095.4455566,637.6566162 2094.5795898,637.0727539 2094.1811523,636.5305176 C2093.7827148,635.9881592 2093.5834961,635.3461914 2093.5834961,634.6047363 C2093.5834961,633.7414551 2093.8808594,632.9902344 2094.4758301,632.3510742 C2095.0708008,631.7119141 2095.8383789,631.3286133 2096.7792969,631.201416 L2096.7792969,629.5827637 L2097.7504883,629.5827637 L2097.7504883,631.1682129 C2098.9624023,631.2124023 2099.7868652,631.3840332 2100.2241211,631.6828613 L2100.2241211,633.3098145 C2099.5876465,632.8227539 2098.7631836,632.5599365 2097.7504883,632.5212402 L2097.7504883,637.1032715 C2099.0009766,637.6732178 2099.8615723,638.2418213 2100.3320313,638.809082 C2100.8022461,639.3762207 2101.0375977,640.0140381 2101.0375977,640.7224121 C2101.0375977,641.6132813 2100.7414551,642.3452148 2100.1494141,642.9179688 C2099.5571289,643.4907227 2098.7575684,643.8518066 2097.7504883,644.0012207 Z M2096.7792969,632.5710449 C2095.7167969,632.8034668 2095.1855469,633.4204102 2095.1855469,634.4221191 C2095.1855469,634.9035645 2095.2988281,635.302002 2095.5258789,635.6174316 C2095.7526855,635.9328613 2096.1704102,636.2592773 2096.7792969,636.5969238 Z M2097.7504883,642.6564941 C2098.8737793,642.4129639 2099.4355469,641.8125 2099.4355469,640.8552246 C2099.4355469,640.0527344 2098.8737793,639.3527832 2097.7504883,638.755127 Z M2111.6542969,644.0759277 L2110.0356445,644.0759277 L2110.0356445,638.8547363 C2110.0356445,636.9676514 2109.3466797,636.0241699 2107.96875,636.0241699 C2107.2548828,636.0241699 2106.6682129,636.2897949 2106.2089844,636.8210449 C2105.7495117,637.3522949 2105.5200195,638.0246582 2105.5200195,638.8381348 L2105.5200195,644.0759277 L2103.8930664,644.0759277 L2103.8930664,634.8952637 L2105.5200195,634.8952637 L2105.5200195,636.4143066 L2105.5532227,636.4143066 C2106.244873,635.2576904 2107.2492676,634.6794434 2108.5664063,634.6794434 C2109.5734863,634.6794434 2110.3398438,635.001709 2110.8657227,635.6464844 C2111.3913574,636.2911377 2111.6542969,637.2304688 2111.6542969,638.4645996 Z M2122.1630859,639.9006348 L2115.7382813,639.9006348 C2115.7658691,640.880127 2116.0341797,641.6368408 2116.543457,642.1708984 C2117.0524902,642.704834 2117.7636719,642.9719238 2118.6767578,642.9719238 C2119.7060547,642.9719238 2120.6494141,642.6425781 2121.5073242,641.9841309 L2121.5073242,643.4367676 C2120.6992188,644.0067139 2119.628418,644.291748 2118.2949219,644.291748 C2116.9667969,644.291748 2115.9306641,643.8710938 2115.1862793,643.0300293 C2114.4418945,642.1888428 2114.0698242,641.0212402 2114.0698242,639.5270996 C2114.0698242,638.12146 2114.4780273,636.9621582 2115.2941895,636.0490723 C2116.1103516,635.1359863 2117.1245117,634.6794434 2118.3364258,634.6794434 C2119.5371094,634.6794434 2120.4750977,635.0654297 2121.1503906,635.8374023 C2121.8254395,636.609375 2122.1630859,637.6898193 2122.1630859,639.0788574 Z M2120.5361328,638.5974121 C2120.5305176,637.767334 2120.3339844,637.1253662 2119.9467773,636.6716309 C2119.5593262,636.2177734 2119.0141602,635.9909668 2118.3115234,635.9909668 C2117.6640625,635.9909668 2117.1035156,636.2316895 2116.6306152,636.7131348 C2116.1574707,637.1945801 2115.8598633,637.8226318 2115.7382813,638.5974121 Z M2131.5678711,634.8952637 L2128.496582,639.5187988 L2131.5263672,644.0759277 L2129.6337891,644.0759277 L2127.8823242,641.1540527 C2127.7880859,640.9990234 2127.6552734,640.7611084 2127.4838867,640.4401855 L2127.4506836,640.4401855 C2127.4450684,640.4733887 2127.3066406,640.7113037 2127.0356445,641.1540527 L2125.2509766,644.0759277 L2123.3833008,644.0759277 L2126.5043945,639.5686035 L2123.5244141,634.8952637 L2125.4169922,634.8952637 L2127.1352539,637.9665527 C2127.2402344,638.1546631 2127.3676758,638.3981934 2127.5170898,638.6970215 L2127.550293,638.6970215 L2129.7832031,634.8952637 Z M2137.9013672,643.9846191 C2137.5471191,644.1782227 2137.0683594,644.2751465 2136.465332,644.2751465 C2134.8217773,644.2751465 2134,643.3647461 2134,641.5441895 L2134,636.2399902 L2132.4228516,636.2399902 L2132.4228516,634.8952637 L2134,634.8952637 L2134,632.6872559 L2135.6186523,632.1726074 L2135.6186523,634.8952637 L2137.9013672,634.8952637 L2137.9013672,636.2399902 L2135.6186523,636.2399902 L2135.6186523,641.2536621 C2135.6186523,641.8568115 2135.7209473,642.2884521 2135.9257813,642.548584 C2136.1303711,642.8085938 2136.4707031,642.9387207 2136.9467773,642.9387207 C2137.3120117,642.9387207 2137.630127,642.8363037 2137.9013672,642.6315918 Z M2147.9951172,632.6955566 L2144.284668,632.6955566 L2144.284668,644.0759277 L2142.6162109,644.0759277 L2142.6162109,632.6955566 L2138.9223633,632.6955566 L2138.9223633,631.2180176 L2147.9951172,631.2180176 Z M2149.8544922,631.657959 C2149.8544922,631.3701172 2149.9526367,631.1280518 2150.1491699,630.9316406 C2150.3457031,630.7351074 2150.5876465,630.6369629 2150.8754883,630.6369629 C2151.1687012,630.6369629 2151.4165039,630.7337646 2151.6184082,630.9274902 C2151.8203125,631.1210938 2151.9213867,631.364624 2151.9213867,631.657959 C2151.9213867,631.9456787 2151.8203125,632.1850586 2151.6184082,632.3759766 C2151.4165039,632.5668945 2151.1687012,632.6623535 2150.8754883,632.6623535 C2150.5820313,632.6623535 2150.338623,632.5668945 2150.1450195,632.3759766 C2149.9511719,632.1850586 2149.8544922,631.9456787 2149.8544922,631.657959 Z M2150.0454102,644.0759277 L2150.0454102,634.8952637 L2151.6723633,634.8952637 L2151.6723633,644.0759277 Z M2161.0522461,643.6608887 C2160.3493652,644.0814209 2159.5026855,644.291748 2158.512207,644.291748 C2157.184082,644.291748 2156.1159668,643.8656006 2155.3081055,643.0134277 C2154.5,642.1611328 2154.0961914,641.0571289 2154.0961914,639.701416 C2154.0961914,638.196167 2154.5319824,636.9829102 2155.4035645,636.0615234 C2156.2751465,635.1401367 2157.4414063,634.6794434 2158.9023438,634.6794434 C2159.7434082,634.6794434 2160.4628906,634.8288574 2161.0605469,635.1276855 L2161.0605469,636.7380371 C2160.4130859,636.262085 2159.6936035,636.0241699 2158.9023438,636.0241699 C2157.9726563,636.0241699 2157.2158203,636.3464355 2156.6320801,636.9912109 C2156.0483398,637.6358643 2155.7563477,638.4949951 2155.7563477,639.5686035 C2155.7563477,640.6254883 2156.0317383,641.4528809 2156.5822754,642.0505371 C2157.1328125,642.6481934 2157.8757324,642.9470215 2158.8110352,642.9470215 C2159.6022949,642.9470215 2160.3493652,642.6868896 2161.0522461,642.166748 Z M2171.2954102,644.0759277 L2169.0791016,644.0759277 L2165.152832,639.6516113 L2165.1196289,639.6516113 L2165.1196289,644.0759277 L2163.4926758,644.0759277 L2163.4926758,630.4875488 L2165.1196289,630.4875488 L2165.1196289,639.1037598 L2165.152832,639.1037598 L2168.8798828,634.8952637 L2170.9716797,634.8952637 L2166.8212891,639.3112793 Z M2181.8789063,642.017334 L2180.4760742,646.4416504 L2179.3139648,646.4416504 L2180.3349609,642.017334 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip25)\" />\n<clipPath id=\"clip26\"><path d=\"M1741,602 L2188,602 L2188,676 L1741,676 L1741,602 Z\" /></clipPath>\n<path d=\"M1751.4775391,671.2719727 L1743.8574219,671.2719727 L1743.8574219,670.2011719 L1751.4775391,670.2011719 Z M1758.0849609,659.3603516 C1757.8137207,659.166626 1757.4401855,659.0698242 1756.9643555,659.0698242 C1756.3334961,659.0698242 1755.8132324,659.364502 1755.4038086,659.9538574 C1754.9942627,660.5432129 1754.7895508,661.3193359 1754.7895508,662.2822266 L1754.7895508,666.9306641 L1753.1625977,666.9306641 L1753.1625977,657.75 L1754.7895508,657.75 L1754.7895508,659.6176758 L1754.8227539,659.6176758 C1755.2874756,658.267334 1756.0899658,657.5922852 1757.2299805,657.5922852 C1757.600708,657.5922852 1757.8857422,657.6337891 1758.0849609,657.7167969 Z M1767.3237305,662.7553711 L1760.8989258,662.7553711 C1760.9265137,663.7348633 1761.1949463,664.4915771 1761.7041016,665.0256348 C1762.2131348,665.5595703 1762.9243164,665.8266602 1763.8374023,665.8266602 C1764.8666992,665.8266602 1765.8101807,665.4973145 1766.6679688,664.8388672 L1766.6679688,666.2915039 C1765.8599854,666.8614502 1764.7891846,667.1464844 1763.4555664,667.1464844 C1762.1274414,667.1464844 1761.0911865,666.7258301 1760.3469238,665.8847656 C1759.6025391,665.0435791 1759.2304688,663.8759766 1759.2304688,662.3818359 C1759.2304688,660.9761963 1759.6385498,659.8168945 1760.454834,658.9038086 C1761.2709961,657.9907227 1762.2850342,657.5341797 1763.4970703,657.5341797 C1764.697876,657.5341797 1765.6358643,657.920166 1766.3110352,658.6921387 C1766.986084,659.4641113 1767.3237305,660.5445557 1767.3237305,661.9335938 Z M1765.6967773,661.4521484 C1765.6911621,660.6220703 1765.494751,659.9801025 1765.1074219,659.5263672 C1764.7199707,659.0725098 1764.1749268,658.8457031 1763.472168,658.8457031 C1762.824707,658.8457031 1762.2642822,659.0864258 1761.7912598,659.5678711 C1761.3181152,660.0493164 1761.0206299,660.6773682 1760.8989258,661.4521484 Z M1777.5419922,666.9306641 L1775.9233398,666.9306641 L1775.9233398,661.7094727 C1775.9232178,659.8223877 1775.2342529,658.8789063 1773.8564453,658.8789063 C1773.1425781,658.8789063 1772.5559082,659.1445313 1772.0966797,659.6757813 C1771.6373291,660.2070313 1771.4077148,660.8793945 1771.4077148,661.6928711 L1771.4077148,666.9306641 L1769.7807617,666.9306641 L1769.7807617,657.75 L1771.4077148,657.75 L1771.4077148,659.269043 L1771.440918,659.269043 C1772.1325684,658.1124268 1773.1369629,657.5341797 1774.4541016,657.5341797 C1775.4611816,657.5341797 1776.2276611,657.8564453 1776.753418,658.5012207 C1777.2790527,659.145874 1777.5419922,660.0852051 1777.5419922,661.3193359 Z M1788.5405273,666.9306641 L1786.9135742,666.9306641 L1786.9135742,665.4033203 L1786.8803711,665.4033203 C1786.2106934,666.5653076 1785.1704102,667.1464844 1783.7592773,667.1464844 C1782.597168,667.1464844 1781.6729736,666.7327881 1780.9868164,665.9055176 C1780.3005371,665.078125 1779.9575195,663.9616699 1779.9575195,662.5561523 C1779.9575195,661.0397949 1780.3448486,659.8237305 1781.1196289,658.907959 C1781.8942871,657.9920654 1782.9069824,657.5341797 1784.1577148,657.5341797 C1785.4083252,657.5341797 1786.315918,658.0211182 1786.8803711,658.9951172 L1786.9135742,658.9951172 L1786.9135742,653.3422852 L1788.5405273,653.3422852 Z M1786.921875,661.46875 C1786.921875,660.732666 1786.6796875,660.1170654 1786.1955566,659.6218262 C1785.7113037,659.1264648 1785.1149902,658.8789063 1784.4067383,658.8789063 C1783.543457,658.8789063 1782.862793,659.2011719 1782.3647461,659.8459473 C1781.8666992,660.4906006 1781.6176758,661.3691406 1781.6176758,662.4814453 C1781.6176758,663.505127 1781.8569336,664.3144531 1782.3356934,664.9094238 C1782.8143311,665.5042725 1783.4521484,665.8017578 1784.2490234,665.8017578 C1785.03479,665.8017578 1785.6767578,665.5097656 1786.1748047,664.9260254 C1786.6728516,664.3421631 1786.921875,663.6158447 1786.921875,662.7470703 Z M1799.2485352,662.7553711 L1792.8237305,662.7553711 C1792.8513184,663.7348633 1793.119751,664.4915771 1793.6289063,665.0256348 C1794.1379395,665.5595703 1794.8491211,665.8266602 1795.762207,665.8266602 C1796.7915039,665.8266602 1797.7349854,665.4973145 1798.5927734,664.8388672 L1798.5927734,666.2915039 C1797.78479,666.8614502 1796.7139893,667.1464844 1795.3803711,667.1464844 C1794.0522461,667.1464844 1793.0159912,666.7258301 1792.2717285,665.8847656 C1791.5273438,665.0435791 1791.1552734,663.8759766 1791.1552734,662.3818359 C1791.1552734,660.9761963 1791.5633545,659.8168945 1792.3796387,658.9038086 C1793.1958008,657.9907227 1794.2098389,657.5341797 1795.421875,657.5341797 C1796.6226807,657.5341797 1797.5606689,657.920166 1798.2358398,658.6921387 C1798.9108887,659.4641113 1799.2485352,660.5445557 1799.2485352,661.9335938 Z M1797.621582,661.4521484 C1797.6159668,660.6220703 1797.4195557,659.9801025 1797.0322266,659.5263672 C1796.6447754,659.0725098 1796.0997314,658.8457031 1795.3969727,658.8457031 C1794.7495117,658.8457031 1794.1890869,659.0864258 1793.7160645,659.5678711 C1793.2429199,660.0493164 1792.9454346,660.6773682 1792.8237305,661.4521484 Z M1806.6279297,659.3603516 C1806.3566895,659.166626 1805.9831543,659.0698242 1805.5073242,659.0698242 C1804.8764648,659.0698242 1804.3562012,659.364502 1803.9467773,659.9538574 C1803.5372314,660.5432129 1803.3325195,661.3193359 1803.3325195,662.2822266 L1803.3325195,666.9306641 L1801.7055664,666.9306641 L1801.7055664,657.75 L1803.3325195,657.75 L1803.3325195,659.6176758 L1803.3657227,659.6176758 C1803.8304443,658.267334 1804.6329346,657.5922852 1805.7729492,657.5922852 C1806.1436768,657.5922852 1806.4287109,657.6337891 1806.6279297,657.7167969 Z M1807.449707,655.6665039 L1815.418457,655.6665039 C1814.8594971,654.6040039 1814.4222412,653.8292236 1814.1069336,653.3422852 L1815.4018555,652.7280273 C1815.7116699,653.2038574 1816.1765137,653.9786377 1816.7963867,655.0522461 L1815.5844727,655.6665039 L1823.4536133,655.6665039 L1823.4536133,656.9282227 L1813.3847656,656.9282227 C1813.3459473,657.9353027 1813.3044434,658.7930908 1813.2602539,659.5014648 L1821.2788086,659.5014648 C1821.145874,661.9030762 1821.0020752,663.9893799 1820.847168,665.7602539 C1820.7253418,667.7634277 1819.7514648,668.7651367 1817.925293,668.7651367 C1817.0841064,668.7651367 1815.9606934,668.7208252 1814.5551758,668.6323242 C1814.4997559,668.2116699 1814.416748,667.7025146 1814.3061523,667.1049805 C1815.7116699,667.2930908 1816.8516846,667.387207 1817.7260742,667.387207 C1818.7442627,667.387207 1819.314209,666.7839355 1819.4360352,665.5776367 C1819.5688477,664.260498 1819.6850586,662.6501465 1819.784668,660.746582 L1813.1689453,660.746582 C1812.8590088,664.3989258 1811.168335,667.2321777 1808.097168,669.246582 C1807.7983398,668.892334 1807.4606934,668.5161133 1807.0844727,668.1176758 C1810.0062256,666.1918945 1811.5723877,663.6130371 1811.7827148,660.3813477 C1811.8601074,659.506958 1811.9238281,658.355957 1811.9736328,656.9282227 L1807.449707,656.9282227 Z M1837.4238281,663.402832 C1838.4863281,664.8526611 1839.6318359,666.5183105 1840.8603516,668.3999023 C1840.4176025,668.6544189 1839.9859619,668.9089355 1839.5654297,669.1635742 C1839.2554932,668.6489258 1838.9511719,668.1508789 1838.6523438,667.6694336 C1835.0220947,667.9682617 1832.1776123,668.2172852 1830.1191406,668.4165039 L1829.5048828,666.972168 C1830.2021484,666.6622314 1830.8828125,666.0147705 1831.546875,665.0297852 C1832.2773438,663.9893799 1832.9552002,662.8936768 1833.5805664,661.7426758 L1829.2226563,661.7426758 L1829.2226563,660.5473633 L1834.4355469,660.5473633 L1834.4355469,657.027832 L1830.0361328,657.027832 L1830.0361328,655.8325195 L1834.4355469,655.8325195 L1834.4355469,652.7944336 L1835.7636719,652.7944336 L1835.7636719,655.8325195 L1840.3623047,655.8325195 L1840.3623047,657.027832 L1835.7636719,657.027832 L1835.7636719,660.5473633 L1841.1425781,660.5473633 L1841.1425781,661.7426758 L1835.2490234,661.7426758 C1834.0148926,663.7735596 1832.8085938,665.527832 1831.6298828,667.0053711 C1833.7382813,666.9057617 1835.8466797,666.7563477 1837.9550781,666.5571289 C1837.3850098,665.6661377 1836.8427734,664.847168 1836.328125,664.1000977 Z M1827.1308594,662.074707 C1827.5402832,662.251709 1827.9775391,662.4343262 1828.4423828,662.6225586 C1827.6564941,664.9799805 1826.9703369,667.1104736 1826.3837891,669.0141602 L1824.9560547,668.5327148 C1825.6865234,666.5847168 1826.411377,664.4321289 1827.1308594,662.074707 Z M1825.5039063,657.3100586 C1826.3339844,657.8966064 1827.3078613,658.6491699 1828.4257813,659.5678711 C1828.0162354,660.0327148 1827.6953125,660.392334 1827.4628906,660.6469727 C1826.2121582,659.5290527 1825.2824707,658.737793 1824.6738281,658.2729492 Z M1826.1513672,653.0102539 C1827.0367432,653.7185059 1827.9885254,654.5264893 1829.0068359,655.434082 C1828.6304932,655.8214111 1828.3039551,656.1645508 1828.0273438,656.4633789 C1827.0090332,655.4561768 1826.1015625,654.6094971 1825.3046875,653.9233398 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip26)\" />\n<clipPath id=\"clip27\"><path d=\"M2371,240 L2855,240 L2855,399 L2371,399 L2371,240 Z\" /></clipPath>\n<path d=\"M2381,242 C2376.5817871,242 2373,245.581665 2373,250 L2373,388 C2373,392.418335 2376.5817871,396 2381,396 L2844,396 C2848.4182129,396 2852,392.418335 2852,388 L2852,250 C2852,245.581665 2848.4182129,242 2844,242 Z\" style=\"fill:rgb(211,223,255);stroke:none\" clip-path=\"url(#clip27)\" />\n<clipPath id=\"clip28\"><path d=\"M2371,240 L2855,240 L2855,399 L2371,399 L2371,240 Z\" /></clipPath>\n<path d=\"M2381,242 C2376.5817871,242 2373,245.581665 2373,250 L2373,388 C2373,392.418335 2376.5817871,396 2381,396 L2844,396 C2848.4182129,396 2852,392.418335 2852,388 L2852,250 C2852,245.581665 2848.4182129,242 2844,242 Z\" style=\"fill:none;stroke:rgb(0,64,128)\" clip-path=\"url(#clip28)\" />\n<clipPath id=\"clip29\"><path d=\"M2384,248 L2842,248 L2842,391 L2384,391 L2384,248 Z\" /></clipPath>\n<path d=\"M2387.1960449,267.0344238 C2387.6884766,266.9403076 2388.1755371,266.848999 2388.6569824,266.760498 L2388.6569824,256.1437988 L2389.9519043,256.1437988 L2389.9519043,266.5114746 C2390.6933594,266.3620605 2391.4128418,266.2181396 2392.1101074,266.079834 L2392.1101074,253.138916 L2393.4382324,253.138916 L2393.4382324,258.036377 L2396.4265137,258.036377 L2396.4265137,259.2814941 L2393.4382324,259.2814941 L2393.4382324,265.8059082 C2394.4177246,265.6066895 2395.3527832,265.4074707 2396.2438965,265.208252 C2396.2770996,265.7727051 2396.3156738,266.2209473 2396.3601074,266.5529785 C2393.3496094,267.1505127 2390.4221191,267.7703857 2387.5778809,268.4123535 Z M2396.9577637,252.9396973 L2398.2858887,252.9396973 L2398.2858887,258.791748 C2399.7023926,257.8730469 2401.0637207,256.8410645 2402.369873,255.6955566 L2403.3493652,256.7414551 C2401.8439941,257.9699707 2400.15625,259.1513672 2398.2858887,260.2858887 L2398.2858887,266.1711426 C2398.2858887,266.9014893 2398.623291,267.2668457 2399.298584,267.2668457 L2400.8757324,267.2668457 C2401.5063477,267.2668457 2401.871582,266.9458008 2401.9714355,266.3039551 C2402.1040039,265.4848633 2402.2036133,264.5551758 2402.2702637,263.5148926 C2402.7128906,263.7030029 2403.1721191,263.8690186 2403.6481934,264.0129395 C2403.548584,265.0975342 2403.432373,266.0272217 2403.2995605,266.802002 C2403.1113281,267.9530029 2402.3862305,268.5285645 2401.1247559,268.5285645 L2398.9665527,268.5285645 C2397.6271973,268.5285645 2396.9577637,267.7979736 2396.9577637,266.3371582 Z M2405.3498535,254.5168457 L2411.0773926,254.5168457 L2411.0773926,268.0471191 L2409.7658691,268.0471191 L2409.7658691,266.6691895 L2406.661377,266.6691895 L2406.661377,268.2463379 L2405.3498535,268.2463379 Z M2411.6252441,256.6086426 L2417.5187988,256.6086426 L2417.5187988,252.9396973 L2418.8469238,252.9396973 L2418.8469238,256.6086426 L2421.2043457,256.6086426 L2421.2043457,257.8371582 L2418.8469238,257.8371582 L2418.8469238,266.7687988 C2418.8469238,268.2518311 2418.1384277,268.9932861 2416.7219238,268.9934082 C2416.079834,268.9932861 2415.1391602,268.9766846 2413.8996582,268.9436035 C2413.8442383,268.545166 2413.7556152,268.0802002 2413.6340332,267.5490723 C2414.7961426,267.6375732 2415.7036133,267.6818848 2416.3566895,267.6818848 C2417.1313477,267.6818848 2417.5187988,267.2889404 2417.5187988,266.5031738 L2417.5187988,257.8371582 L2411.6252441,257.8371582 Z M2406.661377,265.4406738 L2409.7658691,265.4406738 L2409.7658691,261.1408691 L2406.661377,261.1408691 Z M2409.7658691,255.7453613 L2406.661377,255.7453613 L2406.661377,259.9455566 L2409.7658691,259.9455566 Z M2413.4846191,259.4309082 C2414.369873,261.0467529 2415.0395508,262.3361816 2415.4934082,263.2990723 C2415.2055664,263.4318848 2414.7629395,263.6531982 2414.1652832,263.9631348 C2413.7336426,262.9116211 2413.1137695,261.6000977 2412.3059082,260.0285645 Z M2433.2902832,254.2180176 L2428.5671387,267.0759277 L2426.7243652,267.0759277 L2422.0925293,254.2180176 L2423.9353027,254.2180176 L2427.3967285,264.2702637 C2427.5129395,264.6022949 2427.5986328,264.9868164 2427.6540527,265.4240723 L2427.6955566,265.4240723 C2427.7397461,265.0422363 2427.8366699,264.6520996 2427.986084,264.2536621 L2431.513916,254.2180176 Z M2442.8195801,267.0759277 L2441.1843262,267.0759277 L2441.1843262,265.6315918 L2441.151123,265.6315918 C2440.5368652,266.7382813 2439.5932617,267.291748 2438.3205566,267.291748 C2436.145752,267.291748 2435.0583496,265.9912109 2435.0583496,263.3903809 L2435.0583496,257.8952637 L2436.6687012,257.8952637 L2436.6687012,263.1496582 C2436.6687012,265.0145264 2437.3825684,265.9470215 2438.8103027,265.9470215 C2439.5185547,265.9470215 2440.0913086,265.6855469 2440.5285645,265.1625977 C2440.9655762,264.6396484 2441.184082,263.9797363 2441.1843262,263.1828613 L2441.1843262,257.8952637 L2442.8195801,257.8952637 Z M2453.5109863,262.9006348 L2447.0861816,262.9006348 C2447.1137695,263.880127 2447.3820801,264.6368408 2447.8913574,265.1708984 C2448.4003906,265.704834 2449.1115723,265.9719238 2450.0246582,265.9719238 C2451.0539551,265.9719238 2451.9973145,265.6425781 2452.8552246,264.9841309 L2452.8552246,266.4367676 C2452.0471191,267.0067139 2450.9763184,267.291748 2449.6428223,267.291748 C2448.3146973,267.291748 2447.2783203,266.8710938 2446.5341797,266.0300293 C2445.7897949,265.1888428 2445.4177246,264.0212402 2445.4177246,262.5270996 C2445.4177246,261.12146 2445.8256836,259.9621582 2446.6420898,259.0490723 C2447.458252,258.1359863 2448.472168,257.6794434 2449.6843262,257.6794434 C2450.8850098,257.6794434 2451.822998,258.0654297 2452.498291,258.8374023 C2453.1733398,259.609375 2453.5109863,260.6898193 2453.5109863,262.0788574 Z M2451.8840332,261.5974121 C2451.878418,260.767334 2451.6818848,260.1253662 2451.2946777,259.6716309 C2450.9072266,259.2177734 2450.3620605,258.9909668 2449.6594238,258.9909668 C2449.0119629,258.9909668 2448.451416,259.2316895 2447.9785156,259.7131348 C2447.5053711,260.1945801 2447.2077637,260.8226318 2447.0861816,261.5974121 Z M2462.7746582,265.7810059 L2462.7746582,271.3010254 L2461.1477051,271.3010254 L2461.1477051,257.8952637 L2462.7746582,257.8952637 L2462.7746582,259.4807129 L2462.8078613,259.4807129 C2463.5270996,258.2797852 2464.5786133,257.6794434 2465.9621582,257.6794434 C2467.1352539,257.6794434 2468.0551758,258.090332 2468.722168,258.9121094 C2469.388916,259.7338867 2469.7224121,260.8364258 2469.7224121,262.2199707 C2469.7224121,263.7473145 2469.3447266,264.9743652 2468.5893555,265.9013672 C2467.8339844,266.8282471 2466.8171387,267.291748 2465.5388184,267.291748 C2464.3601074,267.291748 2463.449707,266.7880859 2462.8078613,265.7810059 Z M2462.7663574,263.2907715 C2462.7663574,264.0378418 2463.0070801,264.6672363 2463.4885254,265.1791992 C2463.9699707,265.69104 2464.572998,265.9470215 2465.2980957,265.9470215 C2466.1611328,265.9470215 2466.8364258,265.6149902 2467.3234863,264.9509277 C2467.8103027,264.2868652 2468.0539551,263.3681641 2468.0539551,262.1950684 C2468.0539551,261.2044678 2467.8269043,260.4283447 2467.373291,259.8666992 C2466.9194336,259.3049316 2466.2995605,259.0241699 2465.513916,259.0241699 C2464.7114258,259.0241699 2464.0529785,259.309082 2463.5383301,259.8791504 C2463.0236816,260.4490967 2462.7663574,261.1795654 2462.7663574,262.0705566 Z M2477.2512207,259.5056152 C2476.9799805,259.3118896 2476.6064453,259.2150879 2476.1306152,259.2150879 C2475.4997559,259.2150879 2474.9794922,259.5097656 2474.5700684,260.0991211 C2474.1604004,260.6884766 2473.9558105,261.4645996 2473.9558105,262.4274902 L2473.9558105,267.0759277 L2472.3288574,267.0759277 L2472.3288574,257.8952637 L2473.9558105,257.8952637 L2473.9558105,259.7629395 L2473.9890137,259.7629395 C2474.4536133,258.4125977 2475.2561035,257.7375488 2476.3962402,257.7375488 C2476.7668457,257.7375488 2477.052002,257.7790527 2477.2512207,257.8620605 Z M2478.3967285,262.5852051 C2478.3967285,261.0688477 2478.8200684,259.8721924 2479.666748,258.9951172 C2480.5134277,258.1179199 2481.6616211,257.6794434 2483.1115723,257.6794434 C2484.4892578,257.6794434 2485.5698242,258.1013184 2486.3530273,258.9453125 C2487.1359863,259.7891846 2487.5275879,260.9554443 2487.5275879,262.4440918 C2487.5275879,263.8939209 2487.1096191,265.0643311 2486.2741699,265.9553223 C2485.4384766,266.8461914 2484.3178711,267.291748 2482.9123535,267.291748 C2481.5397949,267.291748 2480.4440918,266.8599854 2479.6252441,265.9968262 C2478.8061523,265.1335449 2478.3967285,263.9963379 2478.3967285,262.5852051 Z M2480.0568848,262.5354004 C2480.0568848,263.5922852 2480.3237305,264.4251709 2480.8579102,265.0339355 C2481.3918457,265.6425781 2482.1098633,265.9470215 2483.0119629,265.9470215 C2483.9414063,265.9470215 2484.6499023,265.6495361 2485.1369629,265.0546875 C2485.6237793,264.4597168 2485.8674316,263.6062012 2485.8674316,262.4938965 C2485.8674316,261.3759766 2485.6237793,260.5183105 2485.1369629,259.9206543 C2484.6499023,259.322998 2483.9414063,259.0241699 2483.0119629,259.0241699 C2482.098877,259.0241699 2481.3779297,259.336792 2480.8496094,259.9621582 C2480.3210449,260.5874023 2480.0568848,261.4451904 2480.0568848,262.5354004 Z M2494.5500488,266.9846191 C2494.1958008,267.1782227 2493.717041,267.2751465 2493.1140137,267.2751465 C2491.470459,267.2751465 2490.6486816,266.3647461 2490.6486816,264.5441895 L2490.6486816,259.2399902 L2489.0715332,259.2399902 L2489.0715332,257.8952637 L2490.6486816,257.8952637 L2490.6486816,255.6872559 L2492.267334,255.1726074 L2492.267334,257.8952637 L2494.5500488,257.8952637 L2494.5500488,259.2399902 L2492.267334,259.2399902 L2492.267334,264.2536621 C2492.267334,264.8568115 2492.3696289,265.2884521 2492.5744629,265.548584 C2492.7790527,265.8085938 2493.1193848,265.9387207 2493.595459,265.9387207 C2493.9606934,265.9387207 2494.2788086,265.8363037 2494.5500488,265.6315918 Z M2496.0524902,262.5852051 C2496.0524902,261.0688477 2496.4758301,259.8721924 2497.3225098,258.9951172 C2498.1691895,258.1179199 2499.3173828,257.6794434 2500.767334,257.6794434 C2502.1450195,257.6794434 2503.2255859,258.1013184 2504.0087891,258.9453125 C2504.791748,259.7891846 2505.1833496,260.9554443 2505.1833496,262.4440918 C2505.1833496,263.8939209 2504.7653809,265.0643311 2503.9299316,265.9553223 C2503.0942383,266.8461914 2501.9736328,267.291748 2500.5681152,267.291748 C2499.1955566,267.291748 2498.0998535,266.8599854 2497.2810059,265.9968262 C2496.4619141,265.1335449 2496.0524902,263.9963379 2496.0524902,262.5852051 Z M2497.7126465,262.5354004 C2497.7126465,263.5922852 2497.9794922,264.4251709 2498.5136719,265.0339355 C2499.0476074,265.6425781 2499.765625,265.9470215 2500.6677246,265.9470215 C2501.597168,265.9470215 2502.3056641,265.6495361 2502.7927246,265.0546875 C2503.279541,264.4597168 2503.5231934,263.6062012 2503.5231934,262.4938965 C2503.5231934,261.3759766 2503.279541,260.5183105 2502.7927246,259.9206543 C2502.3056641,259.322998 2501.597168,259.0241699 2500.6677246,259.0241699 C2499.7546387,259.0241699 2499.0336914,259.336792 2498.5053711,259.9621582 C2497.9768066,260.5874023 2497.7126465,261.4451904 2497.7126465,262.5354004 Z M2512.2058105,266.9846191 C2511.8515625,267.1782227 2511.3728027,267.2751465 2510.7697754,267.2751465 C2509.1262207,267.2751465 2508.3044434,266.3647461 2508.3044434,264.5441895 L2508.3044434,259.2399902 L2506.7272949,259.2399902 L2506.7272949,257.8952637 L2508.3044434,257.8952637 L2508.3044434,255.6872559 L2509.9230957,255.1726074 L2509.9230957,257.8952637 L2512.2058105,257.8952637 L2512.2058105,259.2399902 L2509.9230957,259.2399902 L2509.9230957,264.2536621 C2509.9230957,264.8568115 2510.0253906,265.2884521 2510.2302246,265.548584 C2510.4348145,265.8085938 2510.7751465,265.9387207 2511.2512207,265.9387207 C2511.6164551,265.9387207 2511.9345703,265.8363037 2512.2058105,265.6315918 Z M2521.7932129,257.8952637 L2517.6262207,268.4621582 C2516.8513184,270.4210205 2515.7585449,271.4006348 2514.3474121,271.4006348 C2513.9433594,271.4006348 2513.5974121,271.3563232 2513.3098145,271.2678223 L2513.3098145,269.8400879 C2513.6252441,269.961792 2513.9294434,270.0227051 2514.2229004,270.0227051 C2514.9587402,270.0227051 2515.5095215,269.5910645 2515.8747559,268.7277832 L2516.5803223,267.0593262 L2512.9777832,257.8952637 L2514.7790527,257.8952637 L2517.1779785,264.7932129 L2517.3771973,265.548584 L2517.4187012,265.548584 C2517.4519043,265.3769531 2517.5183105,265.1307373 2517.6179199,264.8098145 L2520.1247559,257.8952637 Z M2525.2214355,265.7810059 L2525.2214355,271.3010254 L2523.5944824,271.3010254 L2523.5944824,257.8952637 L2525.2214355,257.8952637 L2525.2214355,259.4807129 L2525.2546387,259.4807129 C2525.973877,258.2797852 2527.0253906,257.6794434 2528.4089355,257.6794434 C2529.5820313,257.6794434 2530.5019531,258.090332 2531.1689453,258.9121094 C2531.8356934,259.7338867 2532.1691895,260.8364258 2532.1691895,262.2199707 C2532.1691895,263.7473145 2531.7915039,264.9743652 2531.0361328,265.9013672 C2530.2807617,266.8282471 2529.263916,267.291748 2527.9855957,267.291748 C2526.8068848,267.291748 2525.8964844,266.7880859 2525.2546387,265.7810059 Z M2525.2131348,263.2907715 C2525.2131348,264.0378418 2525.4538574,264.6672363 2525.9353027,265.1791992 C2526.416748,265.69104 2527.0197754,265.9470215 2527.744873,265.9470215 C2528.6079102,265.9470215 2529.2832031,265.6149902 2529.7702637,264.9509277 C2530.2570801,264.2868652 2530.5007324,263.3681641 2530.5007324,262.1950684 C2530.5007324,261.2044678 2530.2736816,260.4283447 2529.8200684,259.8666992 C2529.3662109,259.3049316 2528.7463379,259.0241699 2527.9606934,259.0241699 C2527.1582031,259.0241699 2526.4997559,259.309082 2525.9851074,259.8791504 C2525.470459,260.4490967 2525.2131348,261.1795654 2525.2131348,262.0705566 Z M2542.2546387,262.9006348 L2535.829834,262.9006348 C2535.8574219,263.880127 2536.1257324,264.6368408 2536.6350098,265.1708984 C2537.144043,265.704834 2537.8552246,265.9719238 2538.7683105,265.9719238 C2539.7976074,265.9719238 2540.7409668,265.6425781 2541.598877,264.9841309 L2541.598877,266.4367676 C2540.7907715,267.0067139 2539.7199707,267.291748 2538.3864746,267.291748 C2537.0583496,267.291748 2536.0219727,266.8710938 2535.277832,266.0300293 C2534.5334473,265.1888428 2534.161377,264.0212402 2534.161377,262.5270996 C2534.161377,261.12146 2534.5693359,259.9621582 2535.3857422,259.0490723 C2536.2019043,258.1359863 2537.2158203,257.6794434 2538.4279785,257.6794434 C2539.6286621,257.6794434 2540.5666504,258.0654297 2541.2419434,258.8374023 C2541.9169922,259.609375 2542.2546387,260.6898193 2542.2546387,262.0788574 Z M2540.6276855,261.5974121 C2540.6220703,260.767334 2540.4255371,260.1253662 2540.0383301,259.6716309 C2539.6508789,259.2177734 2539.1057129,258.9909668 2538.4030762,258.9909668 C2537.7556152,258.9909668 2537.1950684,259.2316895 2536.722168,259.7131348 C2536.2490234,260.1945801 2535.951416,260.8226318 2535.829834,261.5974121 Z M2553.6184082,256.8410645 L2556.623291,256.8410645 C2556.8334961,256.3098145 2557.0327148,255.7619629 2557.2209473,255.1975098 L2551.7756348,255.1975098 L2551.7756348,259.7131348 C2551.7753906,262.2807617 2551.6259766,264.1733398 2551.3273926,265.3908691 C2551.0285645,266.6967773 2550.4140625,268.0249023 2549.4846191,269.3752441 C2549.2077637,268.9989014 2548.8979492,268.6170654 2548.5549316,268.2297363 C2549.3183594,267.0897217 2549.8220215,265.9663086 2550.0656738,264.8596191 C2550.3200684,263.8081055 2550.4475098,262.1922607 2550.4475098,260.0119629 L2550.4475098,253.9855957 L2564.9572754,253.9855957 L2564.9572754,255.1975098 L2558.6818848,255.1975098 C2558.4328613,255.795166 2558.1921387,256.3430176 2557.9597168,256.8410645 L2563.6291504,256.8410645 L2563.6291504,263.6477051 L2562.3840332,263.6477051 L2562.3840332,263.3156738 L2559.3127441,263.3156738 L2559.3127441,267.0344238 C2559.3127441,268.428833 2558.6818848,269.1206055 2557.420166,269.1096191 C2557.0327148,269.1096191 2556.3354492,269.0985107 2555.3283691,269.076416 C2555.2839355,268.6557617 2555.2119141,268.1743164 2555.1125488,267.6320801 C2555.9755859,267.7426758 2556.65625,267.7980957 2557.154541,267.7980957 C2557.7077637,267.7980957 2557.9846191,267.4770508 2557.9846191,266.8352051 L2557.9846191,263.3156738 L2554.8635254,263.3156738 L2554.8635254,263.6477051 L2553.6184082,263.6477051 Z M2554.8635254,262.2033691 L2562.3840332,262.2033691 L2562.3840332,260.6096191 L2554.8635254,260.6096191 Z M2562.3840332,257.9533691 L2554.8635254,257.9533691 L2554.8635254,259.5305176 L2562.3840332,259.5305176 Z M2555.0461426,263.9631348 L2556.1916504,264.7102051 C2555.1179199,266.3039551 2553.9614258,267.7150879 2552.7219238,268.9436035 C2552.434082,268.7000732 2552.0744629,268.4289551 2551.6428223,268.130127 C2552.760498,267.1008301 2553.8950195,265.711792 2555.0461426,263.9631348 Z M2561.520752,263.9963379 C2562.9594727,265.357666 2564.1879883,266.6193848 2565.2062988,267.7814941 L2564.0939941,268.7775879 C2563.0314941,267.4272461 2561.847168,266.0991211 2560.5412598,264.7932129 Z M2566.3435059,257.770752 L2568.8669434,257.770752 C2568.8779297,257.5327148 2568.8835449,256.6086426 2568.8835449,254.998291 L2567.0407715,254.998291 L2567.0407715,253.9025879 L2575.7067871,253.9025879 L2575.7067871,254.998291 L2573.8972168,254.998291 L2573.8972168,257.770752 L2576.2546387,257.770752 L2576.2546387,258.8664551 L2573.8972168,258.8664551 L2573.8972168,262.435791 L2572.6853027,262.435791 L2572.6853027,258.8664551 L2570.0041504,258.8664551 C2569.8657227,260.4602051 2569.0771484,261.8381348 2567.6384277,263.0002441 C2567.3505859,262.6791992 2567.0461426,262.3582764 2566.7253418,262.0373535 C2567.9980469,261.0522461 2568.6813965,259.9953613 2568.7756348,258.8664551 L2566.3435059,258.8664551 Z M2566.3103027,267.3498535 L2573.7478027,267.3498535 L2573.7478027,265.1086426 L2567.8210449,265.1086426 L2567.8210449,263.9631348 L2573.7478027,263.9631348 L2573.7478027,262.6682129 L2575.0427246,262.6682129 L2575.0427246,263.9631348 L2581.1188965,263.9631348 L2581.1188965,265.1086426 L2575.0427246,265.1086426 L2575.0427246,267.3498535 L2582.5632324,267.3498535 L2582.5632324,268.4953613 L2566.3103027,268.4953613 Z M2581.5007324,253.2385254 L2581.5007324,260.8752441 C2581.5007324,262.0483398 2580.9196777,262.6459961 2579.7575684,262.6682129 C2579.0935059,262.6903076 2578.3242188,262.6903076 2577.4499512,262.6682129 C2577.4055176,262.2475586 2577.3391113,261.8104248 2577.2507324,261.3566895 C2578.1804199,261.4119873 2578.8776855,261.4396973 2579.3425293,261.4396973 C2579.9731445,261.4396973 2580.2885742,261.0910645 2580.2888184,260.3937988 L2580.2888184,253.2385254 Z M2570.0788574,257.770752 L2572.6853027,257.770752 L2572.6853027,254.998291 L2570.095459,254.998291 C2570.095459,256.3374023 2570.0898438,257.2615967 2570.0788574,257.770752 Z M2576.9353027,254.1682129 L2578.1306152,254.1682129 L2578.1306152,259.9123535 L2576.9353027,259.9123535 Z M2584.8459473,256.5256348 L2591.2375488,256.5256348 L2591.2375488,252.9064941 L2592.6652832,252.9064941 L2592.6652832,256.5256348 L2599.123291,256.5256348 L2599.123291,264.0959473 L2597.7619629,264.0959473 L2597.7619629,263.1994629 L2592.6652832,263.1994629 L2592.6652832,269.3752441 L2591.2375488,269.3752441 L2591.2375488,263.1994629 L2586.2072754,263.1994629 L2586.2072754,264.0959473 L2584.8459473,264.0959473 Z M2597.7619629,257.7541504 L2592.6652832,257.7541504 L2592.6652832,261.9709473 L2597.7619629,261.9709473 Z M2586.2072754,261.9709473 L2591.2375488,261.9709473 L2591.2375488,257.7541504 L2586.2072754,257.7541504 Z M2602.916748,257.2893066 L2604.3444824,257.2893066 L2604.3444824,259.5637207 L2614.2722168,259.5637207 L2614.2722168,255.2971191 L2602.3024902,255.2971191 L2602.3024902,254.0686035 L2615.666748,254.0686035 L2615.666748,261.8049316 L2614.2722168,261.8049316 L2614.2722168,260.7922363 L2604.3444824,260.7922363 L2604.3444824,265.623291 C2604.3442383,266.6414795 2604.8256836,267.1506348 2605.7888184,267.1506348 L2613.9733887,267.1506348 C2614.9250488,267.1506348 2615.5004883,266.8074951 2615.6999512,266.1213379 C2615.8989258,265.446167 2616.0483398,264.5441895 2616.1481934,263.4152832 C2616.5795898,263.6033936 2617.0556641,263.7694092 2617.5759277,263.9133301 C2617.4208984,265.0643311 2617.2548828,265.9829102 2617.0778809,266.6691895 C2616.7458496,267.9197998 2615.8161621,268.545166 2614.2888184,268.545166 L2605.4567871,268.545166 C2603.7634277,268.545166 2602.916748,267.6707764 2602.916748,265.9221191 Z M2625.2375488,254.9318848 L2625.2375488,253.7365723 L2633.239502,253.7365723 L2633.239502,254.9484863 C2632.5200195,255.9832764 2631.6733398,256.9433594 2630.6994629,257.8288574 C2632.3649902,258.6865234 2633.8813477,259.5305176 2635.248291,260.3605957 L2634.4016113,261.489502 C2632.9848633,260.5155029 2631.4382324,259.5637207 2629.7614746,258.6340332 C2628.4443359,259.7131348 2626.7648926,260.6538086 2624.7229004,261.4562988 C2624.5014648,261.0578613 2624.2358398,260.6760254 2623.9260254,260.310791 C2627.1467285,259.2592773 2629.7419434,257.4663086 2631.7121582,254.9318848 Z M2624.1750488,267.3000488 L2628.9064941,267.3000488 L2628.9064941,263.2492676 L2625.3039551,263.2492676 L2625.3039551,262.0539551 L2633.7375488,262.0539551 L2633.7375488,263.2492676 L2630.2180176,263.2492676 L2630.2180176,267.3000488 L2634.8664551,267.3000488 L2634.8664551,268.4953613 L2624.1750488,268.4953613 Z M2620.8215332,262.8508301 C2621.9060059,262.7069092 2623.0959473,262.5297852 2624.3908691,262.3195801 C2624.3244629,262.7844238 2624.2746582,263.1938477 2624.2414551,263.5480957 C2622.880127,263.7362061 2621.230957,263.9963379 2619.2941895,264.3283691 L2618.9953613,263.0998535 C2619.8530273,262.2143555 2620.7272949,261.0993652 2621.6184082,259.7546387 C2620.5446777,259.8210449 2619.7145996,259.8791504 2619.1281738,259.9289551 L2618.8127441,258.8000488 C2620.019043,257.1951904 2621.1369629,255.2196045 2622.1662598,252.873291 L2623.4279785,253.3713379 C2622.3986816,255.352417 2621.3581543,257.1287842 2620.3068848,258.7004395 C2621.0095215,258.6838379 2621.6818848,258.6672363 2622.3239746,258.6506348 C2622.7556152,257.9477539 2623.1899414,257.1896973 2623.6271973,256.3762207 L2624.8557129,256.9904785 C2623.4279785,259.2924805 2622.083252,261.2459717 2620.8215332,262.8508301 Z M2618.7961426,266.7023926 C2621.0981445,266.2375488 2623.0405273,265.8059082 2624.623291,265.4074707 C2624.5900879,265.8612061 2624.5734863,266.270752 2624.5734863,266.6359863 C2623.0681152,266.9458008 2621.2695313,267.3774414 2619.1779785,267.9309082 Z M2638.5603027,262.9006348 L2650.4138184,262.9006348 L2650.4138184,269.2590332 L2649.1188965,269.2590332 L2649.1188965,268.3459473 L2639.8552246,268.3459473 L2639.8552246,269.2922363 L2638.5603027,269.2922363 Z M2639.1247559,260.1115723 L2639.1247559,258.9660645 L2649.1188965,258.9660645 L2649.1188965,260.1115723 C2648.4104004,260.9526367 2647.5527344,261.8325195 2646.5456543,262.7512207 C2646.2246094,262.4744873 2645.8815918,262.2143555 2645.5163574,261.9709473 C2646.2023926,261.4285889 2646.8720703,260.8088379 2647.5251465,260.1115723 Z M2642.9597168,256.7912598 L2643.8728027,256.0939941 C2644.4260254,256.6694336 2644.9960938,257.300293 2645.5827637,257.9865723 L2644.5866699,258.7668457 C2644.1105957,258.1359863 2643.5683594,257.477417 2642.9597168,256.7912598 Z M2645.6989746,253.0227051 L2645.3171387,253.4377441 C2647.098877,255.6069336 2649.5725098,257.2670898 2652.7380371,258.4182129 C2652.3615723,258.894043 2652.0739746,259.3201904 2651.8747559,259.6965332 C2648.5212402,258.2023926 2646.0585938,256.3817139 2644.4870605,254.2346191 C2642.4394531,256.5698242 2639.927002,258.4846191 2636.9499512,259.9787598 C2636.7285156,259.5692139 2636.473877,259.1818848 2636.1862793,258.8166504 C2639.2961426,257.3557129 2641.8640137,255.4243164 2643.8894043,253.0227051 Z M2649.1188965,267.1672363 L2649.1188965,264.0793457 L2639.8552246,264.0793457 L2639.8552246,267.1672363 Z M2658.4074707,269.2424316 L2657.0959473,269.2424316 L2657.0959473,260.651123 C2656.293457,261.5863037 2655.407959,262.4855957 2654.4396973,263.348877 C2654.2072754,262.9614258 2653.9416504,262.5574951 2653.6428223,262.1369629 C2655.7788086,260.3494873 2657.4472656,258.3684082 2658.6481934,256.1936035 L2654.107666,256.1936035 L2654.107666,254.9650879 L2659.270752,254.9650879 C2659.5861816,254.2733154 2659.8571777,253.5649414 2660.0842285,252.8400879 L2661.4621582,253.1555176 C2661.2407227,253.7697754 2660.9973145,254.3729248 2660.7316895,254.9650879 L2670.1115723,254.9650879 L2670.1115723,256.1936035 L2660.1340332,256.1936035 C2659.7907715,256.8465576 2659.4145508,257.4829102 2659.005127,258.1027832 L2668.1027832,258.1027832 L2668.1027832,266.9680176 C2668.1027832,268.340332 2667.4331055,269.0266113 2666.0939941,269.0266113 C2665.5073242,269.0375977 2664.6164551,269.0430908 2663.4211426,269.0432129 C2663.3657227,268.6668701 2663.2827148,268.2130127 2663.1721191,267.6818848 C2664.1901855,267.7592773 2665.0092773,267.7980957 2665.6291504,267.7980957 C2666.3925781,267.7980957 2666.7744141,267.4217529 2666.7746582,266.6691895 L2666.7746582,265.4904785 L2658.4074707,265.4904785 Z M2658.4074707,264.3615723 L2666.7746582,264.3615723 L2666.7746582,262.3693848 L2658.4074707,262.3693848 Z M2666.7746582,259.2648926 L2658.4074707,259.2648926 L2658.4074707,261.2404785 L2666.7746582,261.2404785 Z M2678.6032715,271.4172363 L2670.9831543,271.4172363 L2670.9831543,270.3464355 L2678.6032715,270.3464355 Z M2680.0891113,254.657959 C2680.0891113,254.3701172 2680.1872559,254.1280518 2680.3837891,253.9316406 C2680.5800781,253.7351074 2680.8222656,253.6369629 2681.1101074,253.6369629 C2681.4033203,253.6369629 2681.6508789,253.7337646 2681.8530273,253.9274902 C2682.0549316,254.1210938 2682.1560059,254.364624 2682.1560059,254.657959 C2682.1560059,254.9456787 2682.0549316,255.1850586 2681.8530273,255.3759766 C2681.6508789,255.5668945 2681.4033203,255.6623535 2681.1101074,255.6623535 C2680.8166504,255.6623535 2680.5732422,255.5668945 2680.3796387,255.3759766 C2680.185791,255.1850586 2680.0891113,254.9456787 2680.0891113,254.657959 Z M2680.2800293,267.0759277 L2680.2800293,257.8952637 L2681.9069824,257.8952637 L2681.9069824,267.0759277 Z M2692.7062988,267.0759277 L2691.0876465,267.0759277 L2691.0876465,261.8547363 C2691.0874023,259.9676514 2690.3984375,259.0241699 2689.020752,259.0241699 C2688.3068848,259.0241699 2687.7202148,259.2897949 2687.2609863,259.8210449 C2686.8015137,260.3522949 2686.5720215,261.0246582 2686.5720215,261.8381348 L2686.5720215,267.0759277 L2684.9450684,267.0759277 L2684.9450684,257.8952637 L2686.5720215,257.8952637 L2686.5720215,259.4143066 L2686.6052246,259.4143066 C2687.296875,258.2576904 2688.3012695,257.6794434 2689.6184082,257.6794434 C2690.6254883,257.6794434 2691.3918457,258.001709 2691.9177246,258.6464844 C2692.4433594,259.2911377 2692.7062988,260.2304688 2692.7062988,261.4645996 Z M2695.5368652,254.657959 C2695.5368652,254.3701172 2695.6350098,254.1280518 2695.831543,253.9316406 C2696.027832,253.7351074 2696.2700195,253.6369629 2696.5578613,253.6369629 C2696.8510742,253.6369629 2697.0986328,253.7337646 2697.3007813,253.9274902 C2697.5026855,254.1210938 2697.6037598,254.364624 2697.6037598,254.657959 C2697.6037598,254.9456787 2697.5026855,255.1850586 2697.3007813,255.3759766 C2697.0986328,255.5668945 2696.8510742,255.6623535 2696.5578613,255.6623535 C2696.2644043,255.6623535 2696.0209961,255.5668945 2695.8273926,255.3759766 C2695.6335449,255.1850586 2695.5368652,254.9456787 2695.5368652,254.657959 Z M2695.7277832,267.0759277 L2695.7277832,257.8952637 L2697.3547363,257.8952637 L2697.3547363,267.0759277 Z M2704.8005371,266.9846191 C2704.4462891,267.1782227 2703.9675293,267.2751465 2703.364502,267.2751465 C2701.7209473,267.2751465 2700.8991699,266.3647461 2700.8991699,264.5441895 L2700.8991699,259.2399902 L2699.3220215,259.2399902 L2699.3220215,257.8952637 L2700.8991699,257.8952637 L2700.8991699,255.6872559 L2702.5178223,255.1726074 L2702.5178223,257.8952637 L2704.8005371,257.8952637 L2704.8005371,259.2399902 L2702.5178223,259.2399902 L2702.5178223,264.2536621 C2702.5178223,264.8568115 2702.6201172,265.2884521 2702.8249512,265.548584 C2703.029541,265.8085938 2703.369873,265.9387207 2703.8459473,265.9387207 C2704.2111816,265.9387207 2704.5292969,265.8363037 2704.8005371,265.6315918 Z M2710.5944824,265.017334 L2709.1916504,269.4416504 L2708.029541,269.4416504 L2709.0505371,265.017334 Z M2729.088623,265.092041 C2729.9074707,265.684082 2730.7902832,265.9802246 2731.7365723,265.9802246 C2733.0036621,265.9802246 2733.6374512,265.5651855 2733.6374512,264.7351074 C2733.6374512,264.3808594 2733.4990234,264.0889893 2733.2224121,263.859375 C2732.9455566,263.6296387 2732.3837891,263.3571777 2731.5373535,263.041748 C2730.519043,262.6322021 2729.857666,262.2268066 2729.5534668,261.8256836 C2729.2490234,261.4244385 2729.0966797,260.9388428 2729.0969238,260.3688965 C2729.0966797,259.5554199 2729.4414063,258.9038086 2730.1303711,258.4140625 C2730.8193359,257.9243164 2731.6672363,257.6794434 2732.6745605,257.6794434 C2733.454834,257.6794434 2734.1796875,257.8149414 2734.8493652,258.0861816 L2734.8493652,259.6550293 C2734.1630859,259.2122803 2733.385498,258.9909668 2732.5168457,258.9909668 C2731.996582,258.9909668 2731.5732422,259.1043701 2731.2468262,259.3312988 C2730.920166,259.5581055 2730.7570801,259.8569336 2730.7570801,260.2277832 C2730.7570801,260.5930176 2730.8745117,260.8779297 2731.1098633,261.0827637 C2731.3449707,261.2874756 2731.8664551,261.550293 2732.6745605,261.8713379 C2733.6982422,262.2531738 2734.3898926,262.6488037 2734.7497559,263.0583496 C2735.109375,263.4677734 2735.2893066,263.9741211 2735.2893066,264.5773926 C2735.2893066,265.418457 2734.9448242,266.0811768 2734.2558594,266.5654297 C2733.5668945,267.0495605 2732.6745605,267.291748 2731.5788574,267.291748 C2730.6269531,267.291748 2729.796875,267.1118164 2729.088623,266.7521973 Z M2745.1838379,262.9006348 L2738.7590332,262.9006348 C2738.7866211,263.880127 2739.0549316,264.6368408 2739.564209,265.1708984 C2740.0732422,265.704834 2740.7844238,265.9719238 2741.6975098,265.9719238 C2742.7268066,265.9719238 2743.670166,265.6425781 2744.5280762,264.9841309 L2744.5280762,266.4367676 C2743.7199707,267.0067139 2742.6491699,267.291748 2741.3156738,267.291748 C2739.9875488,267.291748 2738.9511719,266.8710938 2738.2070313,266.0300293 C2737.4626465,265.1888428 2737.0905762,264.0212402 2737.0905762,262.5270996 C2737.0905762,261.12146 2737.4985352,259.9621582 2738.3149414,259.0490723 C2739.1311035,258.1359863 2740.1450195,257.6794434 2741.3571777,257.6794434 C2742.5578613,257.6794434 2743.4958496,258.0654297 2744.1711426,258.8374023 C2744.8461914,259.609375 2745.1838379,260.6898193 2745.1838379,262.0788574 Z M2743.5568848,261.5974121 C2743.5512695,260.767334 2743.3547363,260.1253662 2742.9675293,259.6716309 C2742.5800781,259.2177734 2742.0349121,258.9909668 2741.3322754,258.9909668 C2740.6848145,258.9909668 2740.1242676,259.2316895 2739.6513672,259.7131348 C2739.1782227,260.1945801 2738.8806152,260.8226318 2738.7590332,261.5974121 Z M2752.048584,266.9846191 C2751.6943359,267.1782227 2751.2155762,267.2751465 2750.6125488,267.2751465 C2748.9689941,267.2751465 2748.1472168,266.3647461 2748.1472168,264.5441895 L2748.1472168,259.2399902 L2746.5700684,259.2399902 L2746.5700684,257.8952637 L2748.1472168,257.8952637 L2748.1472168,255.6872559 L2749.7658691,255.1726074 L2749.7658691,257.8952637 L2752.048584,257.8952637 L2752.048584,259.2399902 L2749.7658691,259.2399902 L2749.7658691,264.2536621 C2749.7658691,264.8568115 2749.8681641,265.2884521 2750.072998,265.548584 C2750.2775879,265.8085938 2750.6179199,265.9387207 2751.0939941,265.9387207 C2751.4592285,265.9387207 2751.7773438,265.8363037 2752.048584,265.6315918 Z M2757.8425293,265.017334 L2756.4396973,269.4416504 L2755.2775879,269.4416504 L2756.298584,265.017334 Z M2775.7971191,268.9519043 L2774.8259277,268.9519043 L2774.8259277,267.0759277 C2773.564209,267.0759277 2772.5183105,266.8157959 2771.6882324,266.2956543 L2771.6882324,264.6271973 C2772.5183105,265.3078613 2773.564209,265.6730957 2774.8259277,265.7229004 L2774.8259277,261.2819824 C2773.4921875,260.6566162 2772.6262207,260.0727539 2772.2277832,259.5305176 C2771.8293457,258.9881592 2771.630127,258.3461914 2771.630127,257.6047363 C2771.630127,256.7414551 2771.9274902,255.9902344 2772.5224609,255.3510742 C2773.1171875,254.7119141 2773.8850098,254.3286133 2774.8259277,254.201416 L2774.8259277,252.5827637 L2775.7971191,252.5827637 L2775.7971191,254.1682129 C2777.0087891,254.2124023 2777.8334961,254.3840332 2778.270752,254.6828613 L2778.270752,256.3098145 C2777.6342773,255.8227539 2776.8095703,255.5599365 2775.7971191,255.5212402 L2775.7971191,260.1032715 C2777.0476074,260.6732178 2777.9082031,261.2418213 2778.3786621,261.809082 C2778.848877,262.3762207 2779.0842285,263.0140381 2779.0842285,263.7224121 C2779.0842285,264.6132813 2778.7880859,265.3452148 2778.1960449,265.9179688 C2777.6037598,266.4907227 2776.8041992,266.8518066 2775.7971191,267.0012207 Z M2774.8259277,255.5710449 C2773.7634277,255.8034668 2773.2321777,256.4204102 2773.2321777,257.4221191 C2773.2321777,257.9035645 2773.345459,258.302002 2773.5725098,258.6174316 C2773.7993164,258.9328613 2774.217041,259.2592773 2774.8259277,259.5969238 Z M2775.7971191,265.6564941 C2776.9204102,265.4129639 2777.4821777,264.8125 2777.4821777,263.8552246 C2777.4821777,263.0527344 2776.9204102,262.3527832 2775.7971191,261.755127 Z M2789.9084473,267.0759277 L2788.2814941,267.0759277 L2788.2814941,265.548584 L2788.248291,265.548584 C2787.5786133,266.7105713 2786.5383301,267.291748 2785.1271973,267.291748 C2783.9650879,267.291748 2783.0407715,266.8780518 2782.3547363,266.0507813 C2781.668457,265.2233887 2781.3254395,264.1069336 2781.3254395,262.701416 C2781.3254395,261.1850586 2781.7126465,259.9689941 2782.4875488,259.0532227 C2783.262207,258.1373291 2784.2749023,257.6794434 2785.5256348,257.6794434 C2786.776123,257.6794434 2787.6838379,258.1663818 2788.248291,259.1403809 L2788.2814941,259.1403809 L2788.2814941,253.4875488 L2789.9084473,253.4875488 Z M2788.2897949,261.6140137 C2788.2897949,260.8779297 2788.0476074,260.2623291 2787.5634766,259.7670898 C2787.0791016,259.2717285 2786.4829102,259.0241699 2785.7746582,259.0241699 C2784.911377,259.0241699 2784.2307129,259.3464355 2783.732666,259.9912109 C2783.2346191,260.6358643 2782.9855957,261.5144043 2782.9855957,262.626709 C2782.9855957,263.6503906 2783.2248535,264.4597168 2783.7036133,265.0546875 C2784.1821289,265.6495361 2784.8200684,265.9470215 2785.6169434,265.9470215 C2786.4025879,265.9470215 2787.0446777,265.6550293 2787.5427246,265.0712891 C2788.0407715,264.4874268 2788.2897949,263.7611084 2788.2897949,262.892334 Z M2800.6164551,262.9006348 L2794.1916504,262.9006348 C2794.2192383,263.880127 2794.4875488,264.6368408 2794.9968262,265.1708984 C2795.5058594,265.704834 2796.217041,265.9719238 2797.130127,265.9719238 C2798.1594238,265.9719238 2799.1027832,265.6425781 2799.9606934,264.9841309 L2799.9606934,266.4367676 C2799.1525879,267.0067139 2798.0817871,267.291748 2796.748291,267.291748 C2795.420166,267.291748 2794.3837891,266.8710938 2793.6396484,266.0300293 C2792.8952637,265.1888428 2792.5231934,264.0212402 2792.5231934,262.5270996 C2792.5231934,261.12146 2792.9311523,259.9621582 2793.7475586,259.0490723 C2794.5637207,258.1359863 2795.5776367,257.6794434 2796.7897949,257.6794434 C2797.9904785,257.6794434 2798.9284668,258.0654297 2799.6037598,258.8374023 C2800.2788086,259.609375 2800.6164551,260.6898193 2800.6164551,262.0788574 Z M2798.989502,261.5974121 C2798.9838867,260.767334 2798.7873535,260.1253662 2798.4001465,259.6716309 C2798.0126953,259.2177734 2797.4675293,258.9909668 2796.7648926,258.9909668 C2796.1174316,258.9909668 2795.5568848,259.2316895 2795.0839844,259.7131348 C2794.6108398,260.1945801 2794.3132324,260.8226318 2794.1916504,261.5974121 Z M2803.0651855,267.0759277 L2803.0651855,253.4875488 L2804.6921387,253.4875488 L2804.6921387,267.0759277 Z M2815.2092285,262.9006348 L2808.7844238,262.9006348 C2808.8120117,263.880127 2809.0803223,264.6368408 2809.5895996,265.1708984 C2810.0986328,265.704834 2810.8098145,265.9719238 2811.7229004,265.9719238 C2812.7521973,265.9719238 2813.6955566,265.6425781 2814.5534668,264.9841309 L2814.5534668,266.4367676 C2813.7453613,267.0067139 2812.6745605,267.291748 2811.3410645,267.291748 C2810.0129395,267.291748 2808.9765625,266.8710938 2808.2324219,266.0300293 C2807.4880371,265.1888428 2807.1159668,264.0212402 2807.1159668,262.5270996 C2807.1159668,261.12146 2807.5239258,259.9621582 2808.340332,259.0490723 C2809.1564941,258.1359863 2810.1704102,257.6794434 2811.3825684,257.6794434 C2812.583252,257.6794434 2813.5212402,258.0654297 2814.1965332,258.8374023 C2814.871582,259.609375 2815.2092285,260.6898193 2815.2092285,262.0788574 Z M2813.5822754,261.5974121 C2813.5766602,260.767334 2813.380127,260.1253662 2812.9929199,259.6716309 C2812.6054688,259.2177734 2812.0603027,258.9909668 2811.357666,258.9909668 C2810.7102051,258.9909668 2810.1496582,259.2316895 2809.6767578,259.7131348 C2809.2036133,260.1945801 2808.9060059,260.8226318 2808.7844238,261.5974121 Z M2822.0739746,266.9846191 C2821.7197266,267.1782227 2821.2409668,267.2751465 2820.6379395,267.2751465 C2818.9943848,267.2751465 2818.1726074,266.3647461 2818.1726074,264.5441895 L2818.1726074,259.2399902 L2816.595459,259.2399902 L2816.595459,257.8952637 L2818.1726074,257.8952637 L2818.1726074,255.6872559 L2819.7912598,255.1726074 L2819.7912598,257.8952637 L2822.0739746,257.8952637 L2822.0739746,259.2399902 L2819.7912598,259.2399902 L2819.7912598,264.2536621 C2819.7912598,264.8568115 2819.8935547,265.2884521 2820.0983887,265.548584 C2820.3029785,265.8085938 2820.6433105,265.9387207 2821.1193848,265.9387207 C2821.4846191,265.9387207 2821.8027344,265.8363037 2822.0739746,265.6315918 Z M2831.6696777,262.9006348 L2825.244873,262.9006348 C2825.2724609,263.880127 2825.5407715,264.6368408 2826.0500488,265.1708984 C2826.559082,265.704834 2827.2702637,265.9719238 2828.1833496,265.9719238 C2829.2126465,265.9719238 2830.1560059,265.6425781 2831.013916,264.9841309 L2831.013916,266.4367676 C2830.2058105,267.0067139 2829.1350098,267.291748 2827.8015137,267.291748 C2826.4733887,267.291748 2825.4370117,266.8710938 2824.6928711,266.0300293 C2823.9484863,265.1888428 2823.576416,264.0212402 2823.576416,262.5270996 C2823.576416,261.12146 2823.984375,259.9621582 2824.8007813,259.0490723 C2825.6169434,258.1359863 2826.6308594,257.6794434 2827.8430176,257.6794434 C2829.0437012,257.6794434 2829.9816895,258.0654297 2830.6569824,258.8374023 C2831.3320313,259.609375 2831.6696777,260.6898193 2831.6696777,262.0788574 Z M2830.0427246,261.5974121 C2830.0371094,260.767334 2829.8405762,260.1253662 2829.4533691,259.6716309 C2829.065918,259.2177734 2828.520752,258.9909668 2827.8181152,258.9909668 C2827.1706543,258.9909668 2826.6101074,259.2316895 2826.137207,259.7131348 C2825.6640625,260.1945801 2825.3664551,260.8226318 2825.244873,261.5974121 Z M2837.8039551,265.017334 L2836.401123,269.4416504 L2835.2390137,269.4416504 L2836.2600098,265.017334 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip29)\" />\n<clipPath id=\"clip30\"><path d=\"M2384,248 L2842,248 L2842,391 L2384,391 L2384,248 Z\" /></clipPath>\n<path d=\"M2391.6496582,292.0100098 L2390.6784668,292.0100098 L2390.6784668,290.1340332 C2389.416748,290.1340332 2388.3708496,289.8739014 2387.5407715,289.3537598 L2387.5407715,287.6853027 C2388.3708496,288.3659668 2389.416748,288.7312012 2390.6784668,288.7810059 L2390.6784668,284.3400879 C2389.3447266,283.7147217 2388.4787598,283.1308594 2388.0803223,282.588623 C2387.6818848,282.0462646 2387.482666,281.4042969 2387.482666,280.6628418 C2387.482666,279.7995605 2387.7800293,279.0483398 2388.375,278.4091797 C2388.9697266,277.7700195 2389.7375488,277.3867188 2390.6784668,277.2595215 L2390.6784668,275.6408691 L2391.6496582,275.6408691 L2391.6496582,277.2263184 C2392.8613281,277.2705078 2393.6860352,277.4421387 2394.123291,277.7409668 L2394.123291,279.3679199 C2393.4868164,278.8808594 2392.6621094,278.618042 2391.6496582,278.5793457 L2391.6496582,283.161377 C2392.9001465,283.7313232 2393.7607422,284.2999268 2394.2312012,284.8671875 C2394.701416,285.4343262 2394.9367676,286.0721436 2394.9367676,286.7805176 C2394.9367676,287.6713867 2394.640625,288.4033203 2394.048584,288.9760742 C2393.4562988,289.5488281 2392.6567383,289.9099121 2391.6496582,290.0593262 Z M2390.6784668,278.6291504 C2389.6159668,278.8615723 2389.0847168,279.4785156 2389.0847168,280.4802246 C2389.0847168,280.9616699 2389.197998,281.3601074 2389.4250488,281.6755371 C2389.6518555,281.9909668 2390.0695801,282.3173828 2390.6784668,282.6550293 Z M2391.6496582,288.7145996 C2392.7729492,288.4710693 2393.3347168,287.8706055 2393.3347168,286.9133301 C2393.3347168,286.1108398 2392.7729492,285.4108887 2391.6496582,284.8132324 Z M2409.5544434,280.9533691 L2406.8151855,290.1340332 L2405.1218262,290.1340332 L2403.2956543,283.692627 C2403.2180176,283.4158936 2403.1682129,283.1225586 2403.1462402,282.8127441 L2403.1130371,282.8127441 C2403.0961914,283.045166 2403.0327148,283.3328857 2402.9221191,283.6760254 L2400.9465332,290.1340332 L2399.3029785,290.1340332 L2396.5471191,280.9533691 L2398.2404785,280.9533691 L2400.0749512,287.7600098 C2400.130127,287.9647217 2400.1716309,288.2441406 2400.1994629,288.5983887 L2400.2658691,288.5983887 C2400.2878418,288.2939453 2400.340332,288.0062256 2400.423584,287.7351074 L2402.3991699,280.9533691 L2403.9016113,280.9533691 L2405.8273926,287.7683105 C2405.8825684,287.9675293 2405.927002,288.2497559 2405.9602051,288.6149902 L2406.0349121,288.6149902 C2406.0458984,288.37146 2406.0957031,288.0892334 2406.1843262,287.7683105 L2407.9772949,280.9533691 Z M2411.8371582,281.5925293 C2412.7502441,281.0224609 2413.8044434,280.7375488 2414.9997559,280.7375488 C2417.2131348,280.7375488 2418.3200684,281.8996582 2418.3200684,284.223877 L2418.3200684,290.1340332 L2416.7097168,290.1340332 L2416.7097168,288.7145996 L2416.6682129,288.7145996 C2416.0317383,289.8046875 2415.09375,290.3498535 2413.854248,290.3498535 C2412.9631348,290.3498535 2412.2548828,290.1090088 2411.729248,289.6276855 C2411.2033691,289.1462402 2410.9406738,288.4959717 2410.9406738,287.677002 C2410.9406738,285.9614258 2411.9560547,284.9626465 2413.9870605,284.6804199 L2416.7097168,284.298584 C2416.7097168,282.7988281 2416.0898438,282.0490723 2414.8503418,282.0490723 C2413.7490234,282.0490723 2412.7446289,282.4197998 2411.8371582,283.161377 Z M2414.5598145,285.817627 C2413.8071289,285.9172363 2413.2883301,286.1053467 2413.003418,286.3820801 C2412.7182617,286.6586914 2412.5759277,287.0461426 2412.5759277,287.5441895 C2412.5759277,287.9813232 2412.7307129,288.3382568 2413.0407715,288.6149902 C2413.3505859,288.8916016 2413.7600098,289.0300293 2414.2692871,289.0300293 C2414.9775391,289.0300293 2415.5612793,288.7810059 2416.020752,288.282959 C2416.4799805,287.7849121 2416.7097168,287.1595459 2416.7097168,286.4069824 L2416.7097168,285.5270996 Z M2425.7077637,290.0427246 C2425.3535156,290.2363281 2424.8747559,290.333252 2424.2717285,290.333252 C2422.6281738,290.333252 2421.8063965,289.4228516 2421.8063965,287.6022949 L2421.8063965,282.2980957 L2420.229248,282.2980957 L2420.229248,280.9533691 L2421.8063965,280.9533691 L2421.8063965,278.7453613 L2423.4250488,278.2307129 L2423.4250488,280.9533691 L2425.7077637,280.9533691 L2425.7077637,282.2980957 L2423.4250488,282.2980957 L2423.4250488,287.3117676 C2423.4250488,287.914917 2423.5273438,288.3465576 2423.7321777,288.6066895 C2423.9367676,288.8666992 2424.2770996,288.9968262 2424.7531738,288.9968262 C2425.1184082,288.9968262 2425.4365234,288.8944092 2425.7077637,288.6896973 Z M2434.1662598,289.7189941 C2433.4633789,290.1395264 2432.6166992,290.3498535 2431.6262207,290.3498535 C2430.2978516,290.3498535 2429.2299805,289.9237061 2428.4221191,289.0715332 C2427.6140137,288.2192383 2427.2102051,287.1152344 2427.2102051,285.7595215 C2427.2102051,284.2542725 2427.6459961,283.0410156 2428.5175781,282.1196289 C2429.3891602,281.1982422 2430.5554199,280.7375488 2432.0163574,280.7375488 C2432.8574219,280.7375488 2433.5769043,280.8869629 2434.1745605,281.185791 L2434.1745605,282.7961426 C2433.5270996,282.3201904 2432.8076172,282.0822754 2432.0163574,282.0822754 C2431.0866699,282.0822754 2430.329834,282.404541 2429.7460938,283.0493164 C2429.1621094,283.6939697 2428.8703613,284.5531006 2428.8703613,285.626709 C2428.8703613,286.6835938 2429.1455078,287.5109863 2429.6962891,288.1086426 C2430.2468262,288.7062988 2430.9897461,289.005127 2431.9250488,289.005127 C2432.7163086,289.005127 2433.4633789,288.7449951 2434.1662598,288.2248535 Z M2444.3596191,290.1340332 L2442.7409668,290.1340332 L2442.7409668,284.8547363 C2442.7409668,283.0063477 2442.0546875,282.0822754 2440.682373,282.0822754 C2439.9794922,282.0822754 2439.395752,282.3520508 2438.9309082,282.8916016 C2438.4660645,283.4311523 2438.2336426,284.1103516 2438.2336426,284.9294434 L2438.2336426,290.1340332 L2436.6066895,290.1340332 L2436.6066895,276.5456543 L2438.2336426,276.5456543 L2438.2336426,282.4641113 L2438.2668457,282.4641113 C2438.9694824,281.3129883 2439.9685059,280.7375488 2441.2634277,280.7375488 C2443.3273926,280.7375488 2444.3596191,281.9853516 2444.3596191,284.4812012 Z M2451.0666504,288.0754395 L2449.6638184,292.4997559 L2448.501709,292.4997559 L2449.5227051,288.0754395 Z M2469.0212402,292.0100098 L2468.0500488,292.0100098 L2468.0500488,290.1340332 C2466.7883301,290.1340332 2465.7424316,289.8739014 2464.9123535,289.3537598 L2464.9123535,287.6853027 C2465.7424316,288.3659668 2466.7883301,288.7312012 2468.0500488,288.7810059 L2468.0500488,284.3400879 C2466.7163086,283.7147217 2465.8503418,283.1308594 2465.4519043,282.588623 C2465.0534668,282.0462646 2464.854248,281.4042969 2464.854248,280.6628418 C2464.854248,279.7995605 2465.1516113,279.0483398 2465.746582,278.4091797 C2466.3413086,277.7700195 2467.1091309,277.3867188 2468.0500488,277.2595215 L2468.0500488,275.6408691 L2469.0212402,275.6408691 L2469.0212402,277.2263184 C2470.2329102,277.2705078 2471.0576172,277.4421387 2471.494873,277.7409668 L2471.494873,279.3679199 C2470.8583984,278.8808594 2470.0336914,278.618042 2469.0212402,278.5793457 L2469.0212402,283.161377 C2470.2717285,283.7313232 2471.1323242,284.2999268 2471.6027832,284.8671875 C2472.072998,285.4343262 2472.3083496,286.0721436 2472.3083496,286.7805176 C2472.3083496,287.6713867 2472.012207,288.4033203 2471.420166,288.9760742 C2470.8278809,289.5488281 2470.0283203,289.9099121 2469.0212402,290.0593262 Z M2468.0500488,278.6291504 C2466.9875488,278.8615723 2466.4562988,279.4785156 2466.4562988,280.4802246 C2466.4562988,280.9616699 2466.5695801,281.3601074 2466.7966309,281.6755371 C2467.0234375,281.9909668 2467.4411621,282.3173828 2468.0500488,282.6550293 Z M2469.0212402,288.7145996 C2470.1445313,288.4710693 2470.7062988,287.8706055 2470.7062988,286.9133301 C2470.7062988,286.1108398 2470.1445313,285.4108887 2469.0212402,284.8132324 Z M2474.5495605,285.6433105 C2474.5495605,284.1269531 2474.9729004,282.9302979 2475.8195801,282.0532227 C2476.6662598,281.1760254 2477.8144531,280.7375488 2479.2644043,280.7375488 C2480.6420898,280.7375488 2481.7226563,281.1594238 2482.5058594,282.003418 C2483.2888184,282.84729 2483.6804199,284.0135498 2483.6804199,285.5021973 C2483.6804199,286.9520264 2483.2624512,288.1224365 2482.427002,289.0134277 C2481.5913086,289.9042969 2480.4707031,290.3498535 2479.0651855,290.3498535 C2477.692627,290.3498535 2476.5969238,289.9180908 2475.7780762,289.0549316 C2474.9589844,288.1916504 2474.5495605,287.0544434 2474.5495605,285.6433105 Z M2476.2097168,285.5935059 C2476.2097168,286.6503906 2476.4765625,287.4832764 2477.0107422,288.092041 C2477.5446777,288.7006836 2478.2626953,289.005127 2479.1647949,289.005127 C2480.0942383,289.005127 2480.8027344,288.7076416 2481.2897949,288.112793 C2481.7766113,287.5178223 2482.0202637,286.6643066 2482.0202637,285.552002 C2482.0202637,284.434082 2481.7766113,283.576416 2481.2897949,282.9787598 C2480.8027344,282.3811035 2480.0942383,282.0822754 2479.1647949,282.0822754 C2478.251709,282.0822754 2477.5307617,282.3948975 2477.0024414,283.0202637 C2476.473877,283.6455078 2476.2097168,284.5032959 2476.2097168,285.5935059 Z M2494.0563965,290.1340332 L2492.4377441,290.1340332 L2492.4377441,284.9128418 C2492.4375,283.0257568 2491.7485352,282.0822754 2490.3708496,282.0822754 C2489.6569824,282.0822754 2489.0703125,282.3479004 2488.611084,282.8791504 C2488.1516113,283.4104004 2487.9221191,284.0827637 2487.9221191,284.8962402 L2487.9221191,290.1340332 L2486.295166,290.1340332 L2486.295166,280.9533691 L2487.9221191,280.9533691 L2487.9221191,282.4724121 L2487.9553223,282.4724121 C2488.6469727,281.3157959 2489.6513672,280.7375488 2490.9685059,280.7375488 C2491.9755859,280.7375488 2492.7419434,281.0598145 2493.2678223,281.7045898 C2493.793457,282.3492432 2494.0563965,283.2885742 2494.0563965,284.5227051 Z M2500.7634277,288.0754395 L2499.3605957,292.4997559 L2498.1984863,292.4997559 L2499.2194824,288.0754395 Z M2518.7180176,292.0100098 L2517.7468262,292.0100098 L2517.7468262,290.1340332 C2516.4851074,290.1340332 2515.439209,289.8739014 2514.6091309,289.3537598 L2514.6091309,287.6853027 C2515.439209,288.3659668 2516.4851074,288.7312012 2517.7468262,288.7810059 L2517.7468262,284.3400879 C2516.4130859,283.7147217 2515.5471191,283.1308594 2515.1486816,282.588623 C2514.7502441,282.0462646 2514.5510254,281.4042969 2514.5510254,280.6628418 C2514.5510254,279.7995605 2514.8483887,279.0483398 2515.4433594,278.4091797 C2516.0380859,277.7700195 2516.8059082,277.3867188 2517.7468262,277.2595215 L2517.7468262,275.6408691 L2518.7180176,275.6408691 L2518.7180176,277.2263184 C2519.9296875,277.2705078 2520.7543945,277.4421387 2521.1916504,277.7409668 L2521.1916504,279.3679199 C2520.5551758,278.8808594 2519.7304688,278.618042 2518.7180176,278.5793457 L2518.7180176,283.161377 C2519.9685059,283.7313232 2520.8291016,284.2999268 2521.2995605,284.8671875 C2521.7697754,285.4343262 2522.005127,286.0721436 2522.005127,286.7805176 C2522.005127,287.6713867 2521.7089844,288.4033203 2521.1169434,288.9760742 C2520.5246582,289.5488281 2519.7250977,289.9099121 2518.7180176,290.0593262 Z M2517.7468262,278.6291504 C2516.6843262,278.8615723 2516.1530762,279.4785156 2516.1530762,280.4802246 C2516.1530762,280.9616699 2516.2663574,281.3601074 2516.4934082,281.6755371 C2516.7202148,281.9909668 2517.1379395,282.3173828 2517.7468262,282.6550293 Z M2518.7180176,288.7145996 C2519.8413086,288.4710693 2520.4030762,287.8706055 2520.4030762,286.9133301 C2520.4030762,286.1108398 2519.8413086,285.4108887 2518.7180176,284.8132324 Z M2524.2463379,285.6433105 C2524.2463379,284.1269531 2524.6696777,282.9302979 2525.5163574,282.0532227 C2526.3630371,281.1760254 2527.5112305,280.7375488 2528.9611816,280.7375488 C2530.3388672,280.7375488 2531.4194336,281.1594238 2532.2026367,282.003418 C2532.9855957,282.84729 2533.3771973,284.0135498 2533.3771973,285.5021973 C2533.3771973,286.9520264 2532.9592285,288.1224365 2532.1237793,289.0134277 C2531.2880859,289.9042969 2530.1674805,290.3498535 2528.7619629,290.3498535 C2527.3894043,290.3498535 2526.2937012,289.9180908 2525.4748535,289.0549316 C2524.6557617,288.1916504 2524.2463379,287.0544434 2524.2463379,285.6433105 Z M2525.9064941,285.5935059 C2525.9064941,286.6503906 2526.1733398,287.4832764 2526.7075195,288.092041 C2527.2414551,288.7006836 2527.9594727,289.005127 2528.8615723,289.005127 C2529.7910156,289.005127 2530.4995117,288.7076416 2530.9865723,288.112793 C2531.4733887,287.5178223 2531.717041,286.6643066 2531.717041,285.552002 C2531.717041,284.434082 2531.4733887,283.576416 2530.9865723,282.9787598 C2530.4995117,282.3811035 2529.7910156,282.0822754 2528.8615723,282.0822754 C2527.9484863,282.0822754 2527.2275391,282.3948975 2526.6992188,283.0202637 C2526.1706543,283.6455078 2525.9064941,284.5032959 2525.9064941,285.5935059 Z M2543.7531738,290.1340332 L2542.1345215,290.1340332 L2542.1345215,284.9128418 C2542.1342773,283.0257568 2541.4453125,282.0822754 2540.067627,282.0822754 C2539.3537598,282.0822754 2538.7670898,282.3479004 2538.3078613,282.8791504 C2537.8483887,283.4104004 2537.6188965,284.0827637 2537.6188965,284.8962402 L2537.6188965,290.1340332 L2535.9919434,290.1340332 L2535.9919434,280.9533691 L2537.6188965,280.9533691 L2537.6188965,282.4724121 L2537.6520996,282.4724121 C2538.34375,281.3157959 2539.3481445,280.7375488 2540.6652832,280.7375488 C2541.6723633,280.7375488 2542.4387207,281.0598145 2542.9645996,281.7045898 C2543.4902344,282.3492432 2543.7531738,283.2885742 2543.7531738,284.5227051 Z M2553.1247559,289.7189941 C2552.421875,290.1395264 2551.5751953,290.3498535 2550.5847168,290.3498535 C2549.2563477,290.3498535 2548.1884766,289.9237061 2547.3806152,289.0715332 C2546.5725098,288.2192383 2546.1687012,287.1152344 2546.1687012,285.7595215 C2546.1687012,284.2542725 2546.6044922,283.0410156 2547.4760742,282.1196289 C2548.3476563,281.1982422 2549.513916,280.7375488 2550.9748535,280.7375488 C2551.815918,280.7375488 2552.5354004,280.8869629 2553.1330566,281.185791 L2553.1330566,282.7961426 C2552.4855957,282.3201904 2551.7661133,282.0822754 2550.9748535,282.0822754 C2550.045166,282.0822754 2549.2883301,282.404541 2548.7045898,283.0493164 C2548.1206055,283.6939697 2547.8288574,284.5531006 2547.8288574,285.626709 C2547.8288574,286.6835938 2548.1040039,287.5109863 2548.6547852,288.1086426 C2549.2053223,288.7062988 2549.9482422,289.005127 2550.8835449,289.005127 C2551.6748047,289.005127 2552.421875,288.7449951 2553.1247559,288.2248535 Z M2563.0441895,285.9587402 L2556.6193848,285.9587402 C2556.6469727,286.9382324 2556.9152832,287.6949463 2557.4245605,288.2290039 C2557.9335938,288.7629395 2558.6447754,289.0300293 2559.5578613,289.0300293 C2560.5871582,289.0300293 2561.5305176,288.7006836 2562.3884277,288.0422363 L2562.3884277,289.494873 C2561.5803223,290.0648193 2560.5095215,290.3498535 2559.1760254,290.3498535 C2557.8479004,290.3498535 2556.8115234,289.9291992 2556.0673828,289.0881348 C2555.322998,288.2469482 2554.9509277,287.0793457 2554.9509277,285.5852051 C2554.9509277,284.1795654 2555.3588867,283.0202637 2556.175293,282.1071777 C2556.9914551,281.1940918 2558.0053711,280.7375488 2559.2175293,280.7375488 C2560.4182129,280.7375488 2561.3562012,281.1235352 2562.0314941,281.8955078 C2562.706543,282.6674805 2563.0441895,283.7479248 2563.0441895,285.1369629 Z M2561.4172363,284.6555176 C2561.4116211,283.8254395 2561.2150879,283.1834717 2560.8278809,282.7297363 C2560.4404297,282.2758789 2559.8952637,282.0490723 2559.192627,282.0490723 C2558.545166,282.0490723 2557.9846191,282.2897949 2557.5117188,282.7712402 C2557.0385742,283.2526855 2556.7409668,283.8807373 2556.6193848,284.6555176 Z M2574.3581543,288.0754395 L2572.9553223,292.4997559 L2571.7932129,292.4997559 L2572.814209,288.0754395 Z M2592.3127441,292.0100098 L2591.3415527,292.0100098 L2591.3415527,290.1340332 C2590.079834,290.1340332 2589.0339355,289.8739014 2588.2038574,289.3537598 L2588.2038574,287.6853027 C2589.0339355,288.3659668 2590.079834,288.7312012 2591.3415527,288.7810059 L2591.3415527,284.3400879 C2590.0078125,283.7147217 2589.1418457,283.1308594 2588.7434082,282.588623 C2588.3449707,282.0462646 2588.145752,281.4042969 2588.145752,280.6628418 C2588.145752,279.7995605 2588.4431152,279.0483398 2589.0380859,278.4091797 C2589.6328125,277.7700195 2590.4006348,277.3867188 2591.3415527,277.2595215 L2591.3415527,275.6408691 L2592.3127441,275.6408691 L2592.3127441,277.2263184 C2593.5244141,277.2705078 2594.3491211,277.4421387 2594.786377,277.7409668 L2594.786377,279.3679199 C2594.1499023,278.8808594 2593.3251953,278.618042 2592.3127441,278.5793457 L2592.3127441,283.161377 C2593.5632324,283.7313232 2594.4238281,284.2999268 2594.8942871,284.8671875 C2595.364502,285.4343262 2595.5998535,286.0721436 2595.5998535,286.7805176 C2595.5998535,287.6713867 2595.3037109,288.4033203 2594.7116699,288.9760742 C2594.1193848,289.5488281 2593.3198242,289.9099121 2592.3127441,290.0593262 Z M2591.3415527,278.6291504 C2590.2790527,278.8615723 2589.7478027,279.4785156 2589.7478027,280.4802246 C2589.7478027,280.9616699 2589.861084,281.3601074 2590.0881348,281.6755371 C2590.3149414,281.9909668 2590.732666,282.3173828 2591.3415527,282.6550293 Z M2592.3127441,288.7145996 C2593.4360352,288.4710693 2593.9978027,287.8706055 2593.9978027,286.9133301 C2593.9978027,286.1108398 2593.4360352,285.4108887 2592.3127441,284.8132324 Z M2597.8410645,285.6433105 C2597.8410645,284.1269531 2598.2644043,282.9302979 2599.111084,282.0532227 C2599.9577637,281.1760254 2601.105957,280.7375488 2602.5559082,280.7375488 C2603.9335938,280.7375488 2605.0141602,281.1594238 2605.7973633,282.003418 C2606.5803223,282.84729 2606.9719238,284.0135498 2606.9719238,285.5021973 C2606.9719238,286.9520264 2606.5539551,288.1224365 2605.7185059,289.0134277 C2604.8828125,289.9042969 2603.762207,290.3498535 2602.3566895,290.3498535 C2600.9841309,290.3498535 2599.8884277,289.9180908 2599.0695801,289.0549316 C2598.2504883,288.1916504 2597.8410645,287.0544434 2597.8410645,285.6433105 Z M2599.5012207,285.5935059 C2599.5012207,286.6503906 2599.7680664,287.4832764 2600.3022461,288.092041 C2600.8361816,288.7006836 2601.5541992,289.005127 2602.4562988,289.005127 C2603.3857422,289.005127 2604.0942383,288.7076416 2604.5812988,288.112793 C2605.0681152,287.5178223 2605.3117676,286.6643066 2605.3117676,285.552002 C2605.3117676,284.434082 2605.0681152,283.576416 2604.5812988,282.9787598 C2604.0942383,282.3811035 2603.3857422,282.0822754 2602.4562988,282.0822754 C2601.5432129,282.0822754 2600.8222656,282.3948975 2600.2939453,283.0202637 C2599.7653809,283.6455078 2599.5012207,284.5032959 2599.5012207,285.5935059 Z M2614.2932129,277.9318848 C2613.9887695,277.7713623 2613.6594238,277.6911621 2613.3054199,277.6911621 C2612.2871094,277.6911621 2611.7780762,278.3220215 2611.7780762,279.5837402 L2611.7780762,280.9533691 L2613.9279785,280.9533691 L2613.9279785,282.2980957 L2611.7780762,282.2980957 L2611.7780762,290.1340332 L2610.1677246,290.1340332 L2610.1677246,282.2980957 L2608.598877,282.2980957 L2608.598877,280.9533691 L2610.1677246,280.9533691 L2610.1677246,279.5090332 C2610.1677246,278.5239258 2610.4511719,277.7506104 2611.0185547,277.1889648 C2611.5856934,276.6271973 2612.3063965,276.3464355 2613.1809082,276.3464355 C2613.645752,276.3464355 2614.0163574,276.3989258 2614.2932129,276.5041504 Z M2620.361084,277.9318848 C2620.0566406,277.7713623 2619.7272949,277.6911621 2619.373291,277.6911621 C2618.3549805,277.6911621 2617.8459473,278.3220215 2617.8459473,279.5837402 L2617.8459473,280.9533691 L2619.9958496,280.9533691 L2619.9958496,282.2980957 L2617.8459473,282.2980957 L2617.8459473,290.1340332 L2616.2355957,290.1340332 L2616.2355957,282.2980957 L2614.666748,282.2980957 L2614.666748,280.9533691 L2616.2355957,280.9533691 L2616.2355957,279.5090332 C2616.2355957,278.5239258 2616.519043,277.7506104 2617.0864258,277.1889648 C2617.6535645,276.6271973 2618.3742676,276.3464355 2619.2487793,276.3464355 C2619.713623,276.3464355 2620.0842285,276.3989258 2620.361084,276.5041504 Z M2625.3996582,288.0754395 L2623.9968262,292.4997559 L2622.8347168,292.4997559 L2623.8557129,288.0754395 Z M2643.354248,292.0100098 L2642.3830566,292.0100098 L2642.3830566,290.1340332 C2641.1213379,290.1340332 2640.0754395,289.8739014 2639.2453613,289.3537598 L2639.2453613,287.6853027 C2640.0754395,288.3659668 2641.1213379,288.7312012 2642.3830566,288.7810059 L2642.3830566,284.3400879 C2641.0493164,283.7147217 2640.1833496,283.1308594 2639.7849121,282.588623 C2639.3864746,282.0462646 2639.1872559,281.4042969 2639.1872559,280.6628418 C2639.1872559,279.7995605 2639.4846191,279.0483398 2640.0795898,278.4091797 C2640.6743164,277.7700195 2641.4421387,277.3867188 2642.3830566,277.2595215 L2642.3830566,275.6408691 L2643.354248,275.6408691 L2643.354248,277.2263184 C2644.565918,277.2705078 2645.390625,277.4421387 2645.8278809,277.7409668 L2645.8278809,279.3679199 C2645.1914063,278.8808594 2644.3666992,278.618042 2643.354248,278.5793457 L2643.354248,283.161377 C2644.6047363,283.7313232 2645.465332,284.2999268 2645.935791,284.8671875 C2646.4060059,285.4343262 2646.6413574,286.0721436 2646.6413574,286.7805176 C2646.6413574,287.6713867 2646.3452148,288.4033203 2645.7531738,288.9760742 C2645.1608887,289.5488281 2644.3613281,289.9099121 2643.354248,290.0593262 Z M2642.3830566,278.6291504 C2641.3205566,278.8615723 2640.7893066,279.4785156 2640.7893066,280.4802246 C2640.7893066,280.9616699 2640.9025879,281.3601074 2641.1296387,281.6755371 C2641.3564453,281.9909668 2641.7741699,282.3173828 2642.3830566,282.6550293 Z M2643.354248,288.7145996 C2644.4775391,288.4710693 2645.0393066,287.8706055 2645.0393066,286.9133301 C2645.0393066,286.1108398 2644.4775391,285.4108887 2643.354248,284.8132324 Z M2656.9758301,285.9587402 L2650.5510254,285.9587402 C2650.5786133,286.9382324 2650.8469238,287.6949463 2651.3562012,288.2290039 C2651.8652344,288.7629395 2652.576416,289.0300293 2653.489502,289.0300293 C2654.5187988,289.0300293 2655.4621582,288.7006836 2656.3200684,288.0422363 L2656.3200684,289.494873 C2655.5119629,290.0648193 2654.4411621,290.3498535 2653.107666,290.3498535 C2651.779541,290.3498535 2650.7431641,289.9291992 2649.9990234,289.0881348 C2649.2546387,288.2469482 2648.8825684,287.0793457 2648.8825684,285.5852051 C2648.8825684,284.1795654 2649.2905273,283.0202637 2650.1069336,282.1071777 C2650.9230957,281.1940918 2651.9370117,280.7375488 2653.1491699,280.7375488 C2654.3498535,280.7375488 2655.2878418,281.1235352 2655.9631348,281.8955078 C2656.6381836,282.6674805 2656.9758301,283.7479248 2656.9758301,285.1369629 Z M2655.348877,284.6555176 C2655.3432617,283.8254395 2655.1467285,283.1834717 2654.7595215,282.7297363 C2654.3720703,282.2758789 2653.8269043,282.0490723 2653.1242676,282.0490723 C2652.4768066,282.0490723 2651.9162598,282.2897949 2651.4433594,282.7712402 C2650.9702148,283.2526855 2650.6726074,283.8807373 2650.5510254,284.6555176 Z M2672.6477051,290.1340332 L2671.020752,290.1340332 L2671.020752,284.8630371 C2671.020752,283.8669434 2670.8657227,283.1544189 2670.5559082,282.7255859 C2670.2458496,282.2966309 2669.7368164,282.0822754 2669.0285645,282.0822754 C2668.4309082,282.0822754 2667.9189453,282.3616943 2667.4929199,282.9206543 C2667.0666504,283.4794922 2666.8537598,284.1408691 2666.8537598,284.904541 L2666.8537598,290.1340332 L2665.2268066,290.1340332 L2665.2268066,284.6970215 C2665.2265625,282.9538574 2664.5541992,282.0822754 2663.2097168,282.0822754 C2662.5898438,282.0822754 2662.0766602,282.3479004 2661.6699219,282.8791504 C2661.2631836,283.4104004 2661.0598145,284.0882568 2661.0598145,284.9128418 L2661.0598145,290.1340332 L2659.4328613,290.1340332 L2659.4328613,280.9533691 L2661.0598145,280.9533691 L2661.0598145,282.4060059 L2661.0930176,282.4060059 C2661.7458496,281.2937012 2662.7004395,280.7375488 2663.9567871,280.7375488 C2664.5708008,280.7375488 2665.1132813,280.90625 2665.5837402,281.2438965 C2666.0539551,281.5814209 2666.3806152,282.0379639 2666.5632324,282.6135254 C2667.2438965,281.362793 2668.2619629,280.7375488 2669.6179199,280.7375488 C2671.6376953,280.7375488 2672.6474609,281.982666 2672.6477051,284.4729004 Z M2675.6442871,277.7160645 C2675.6442871,277.4282227 2675.7424316,277.1861572 2675.9389648,276.9897461 C2676.1352539,276.7932129 2676.3774414,276.6950684 2676.6652832,276.6950684 C2676.9584961,276.6950684 2677.2060547,276.7918701 2677.4082031,276.9855957 C2677.6101074,277.1791992 2677.7111816,277.4227295 2677.7111816,277.7160645 C2677.7111816,278.0037842 2677.6101074,278.2431641 2677.4082031,278.434082 C2677.2060547,278.625 2676.9584961,278.720459 2676.6652832,278.720459 C2676.3718262,278.720459 2676.128418,278.625 2675.9348145,278.434082 C2675.7409668,278.2431641 2675.6442871,278.0037842 2675.6442871,277.7160645 Z M2675.8352051,290.1340332 L2675.8352051,280.9533691 L2677.4621582,280.9533691 L2677.4621582,290.1340332 Z M2684.907959,290.0427246 C2684.5537109,290.2363281 2684.0749512,290.333252 2683.4719238,290.333252 C2681.8283691,290.333252 2681.0065918,289.4228516 2681.0065918,287.6022949 L2681.0065918,282.2980957 L2679.4294434,282.2980957 L2679.4294434,280.9533691 L2681.0065918,280.9533691 L2681.0065918,278.7453613 L2682.6252441,278.2307129 L2682.6252441,280.9533691 L2684.907959,280.9533691 L2684.907959,282.2980957 L2682.6252441,282.2980957 L2682.6252441,287.3117676 C2682.6252441,287.914917 2682.7275391,288.3465576 2682.932373,288.6066895 C2683.1369629,288.8666992 2683.4772949,288.9968262 2683.9533691,288.9968262 C2684.3186035,288.9968262 2684.6367188,288.8944092 2684.907959,288.6896973 Z M2690.7019043,288.0754395 L2689.2990723,292.4997559 L2688.1369629,292.4997559 L2689.157959,288.0754395 Z M2712.1096191,290.1340332 L2710.4743652,290.1340332 L2710.4743652,288.6896973 L2710.4411621,288.6896973 C2709.8269043,289.7963867 2708.8833008,290.3498535 2707.6105957,290.3498535 C2705.435791,290.3498535 2704.3483887,289.0493164 2704.3483887,286.4484863 L2704.3483887,280.9533691 L2705.9587402,280.9533691 L2705.9587402,286.2077637 C2705.9587402,288.0726318 2706.6726074,289.005127 2708.1003418,289.005127 C2708.8085938,289.005127 2709.3813477,288.7436523 2709.8186035,288.2207031 C2710.2556152,287.6977539 2710.4741211,287.0378418 2710.4743652,286.2409668 L2710.4743652,280.9533691 L2712.1096191,280.9533691 Z M2716.9489746,288.8391113 L2716.9489746,294.3591309 L2715.3220215,294.3591309 L2715.3220215,280.9533691 L2716.9489746,280.9533691 L2716.9489746,282.5388184 L2716.9821777,282.5388184 C2717.701416,281.3378906 2718.7529297,280.7375488 2720.1364746,280.7375488 C2721.3095703,280.7375488 2722.2294922,281.1484375 2722.8964844,281.9702148 C2723.5632324,282.7919922 2723.8967285,283.8945313 2723.8967285,285.2780762 C2723.8967285,286.8054199 2723.519043,288.0324707 2722.7636719,288.9594727 C2722.0083008,289.8863525 2720.9914551,290.3498535 2719.7131348,290.3498535 C2718.5344238,290.3498535 2717.6240234,289.8461914 2716.9821777,288.8391113 Z M2716.9406738,286.348877 C2716.9406738,287.0959473 2717.1813965,287.7253418 2717.6628418,288.2373047 C2718.1442871,288.7491455 2718.7473145,289.005127 2719.4724121,289.005127 C2720.3354492,289.005127 2721.0107422,288.6730957 2721.4978027,288.0090332 C2721.9846191,287.3449707 2722.2282715,286.4262695 2722.2282715,285.2531738 C2722.2282715,284.2625732 2722.0012207,283.4864502 2721.5476074,282.9248047 C2721.09375,282.3630371 2720.473877,282.0822754 2719.6882324,282.0822754 C2718.8857422,282.0822754 2718.2272949,282.3671875 2717.7126465,282.9372559 C2717.197998,283.5072021 2716.9406738,284.2376709 2716.9406738,285.1286621 Z M2734.4719238,290.1340332 L2732.8449707,290.1340332 L2732.8449707,288.6066895 L2732.8117676,288.6066895 C2732.1420898,289.7686768 2731.1018066,290.3498535 2729.6906738,290.3498535 C2728.5285645,290.3498535 2727.604248,289.9361572 2726.9182129,289.1088867 C2726.2319336,288.2814941 2725.888916,287.1650391 2725.888916,285.7595215 C2725.888916,284.2431641 2726.276123,283.0270996 2727.0510254,282.1113281 C2727.8256836,281.1954346 2728.8383789,280.7375488 2730.0891113,280.7375488 C2731.3395996,280.7375488 2732.2473145,281.2244873 2732.8117676,282.1984863 L2732.8449707,282.1984863 L2732.8449707,276.5456543 L2734.4719238,276.5456543 Z M2732.8532715,284.6721191 C2732.8532715,283.9360352 2732.611084,283.3204346 2732.1269531,282.8251953 C2731.6425781,282.329834 2731.0463867,282.0822754 2730.3381348,282.0822754 C2729.4748535,282.0822754 2728.7941895,282.404541 2728.2961426,283.0493164 C2727.7980957,283.6939697 2727.5490723,284.5725098 2727.5490723,285.6848145 C2727.5490723,286.7084961 2727.7883301,287.5178223 2728.2670898,288.112793 C2728.7456055,288.7076416 2729.3835449,289.005127 2730.1804199,289.005127 C2730.9660645,289.005127 2731.6081543,288.7131348 2732.1062012,288.1293945 C2732.604248,287.5455322 2732.8532715,286.8192139 2732.8532715,285.9504395 Z M2737.916748,281.5925293 C2738.829834,281.0224609 2739.8840332,280.7375488 2741.0793457,280.7375488 C2743.2927246,280.7375488 2744.3996582,281.8996582 2744.3996582,284.223877 L2744.3996582,290.1340332 L2742.7893066,290.1340332 L2742.7893066,288.7145996 L2742.7478027,288.7145996 C2742.1113281,289.8046875 2741.1733398,290.3498535 2739.9338379,290.3498535 C2739.0427246,290.3498535 2738.3344727,290.1090088 2737.8088379,289.6276855 C2737.282959,289.1462402 2737.0202637,288.4959717 2737.0202637,287.677002 C2737.0202637,285.9614258 2738.0356445,284.9626465 2740.0666504,284.6804199 L2742.7893066,284.298584 C2742.7893066,282.7988281 2742.1694336,282.0490723 2740.9299316,282.0490723 C2739.8286133,282.0490723 2738.8242188,282.4197998 2737.916748,283.161377 Z M2740.6394043,285.817627 C2739.8867188,285.9172363 2739.3679199,286.1053467 2739.0830078,286.3820801 C2738.7978516,286.6586914 2738.6555176,287.0461426 2738.6555176,287.5441895 C2738.6555176,287.9813232 2738.8103027,288.3382568 2739.1203613,288.6149902 C2739.4301758,288.8916016 2739.8395996,289.0300293 2740.348877,289.0300293 C2741.0571289,289.0300293 2741.6408691,288.7810059 2742.1003418,288.282959 C2742.5595703,287.7849121 2742.7893066,287.1595459 2742.7893066,286.4069824 L2742.7893066,285.5270996 Z M2751.7873535,290.0427246 C2751.4331055,290.2363281 2750.9543457,290.333252 2750.3513184,290.333252 C2748.7077637,290.333252 2747.8859863,289.4228516 2747.8859863,287.6022949 L2747.8859863,282.2980957 L2746.3088379,282.2980957 L2746.3088379,280.9533691 L2747.8859863,280.9533691 L2747.8859863,278.7453613 L2749.5046387,278.2307129 L2749.5046387,280.9533691 L2751.7873535,280.9533691 L2751.7873535,282.2980957 L2749.5046387,282.2980957 L2749.5046387,287.3117676 C2749.5046387,287.914917 2749.6069336,288.3465576 2749.8117676,288.6066895 C2750.0163574,288.8666992 2750.3566895,288.9968262 2750.8327637,288.9968262 C2751.197998,288.9968262 2751.5161133,288.8944092 2751.7873535,288.6896973 Z M2761.3830566,285.9587402 L2754.958252,285.9587402 C2754.9858398,286.9382324 2755.2541504,287.6949463 2755.7634277,288.2290039 C2756.2724609,288.7629395 2756.9836426,289.0300293 2757.8967285,289.0300293 C2758.9260254,289.0300293 2759.8693848,288.7006836 2760.7272949,288.0422363 L2760.7272949,289.494873 C2759.9191895,290.0648193 2758.8483887,290.3498535 2757.5148926,290.3498535 C2756.1867676,290.3498535 2755.1503906,289.9291992 2754.40625,289.0881348 C2753.6618652,288.2469482 2753.2897949,287.0793457 2753.2897949,285.5852051 C2753.2897949,284.1795654 2753.6977539,283.0202637 2754.5141602,282.1071777 C2755.3303223,281.1940918 2756.3442383,280.7375488 2757.5563965,280.7375488 C2758.7570801,280.7375488 2759.6950684,281.1235352 2760.3703613,281.8955078 C2761.0454102,282.6674805 2761.3830566,283.7479248 2761.3830566,285.1369629 Z M2759.7561035,284.6555176 C2759.7504883,283.8254395 2759.5539551,283.1834717 2759.166748,282.7297363 C2758.7792969,282.2758789 2758.2341309,282.0490723 2757.5314941,282.0490723 C2756.8840332,282.0490723 2756.3234863,282.2897949 2755.8505859,282.7712402 C2755.3774414,283.2526855 2755.079834,283.8807373 2754.958252,284.6555176 Z M2767.517334,288.0754395 L2766.114502,292.4997559 L2764.9523926,292.4997559 L2765.9733887,288.0754395 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip30)\" />\n<clipPath id=\"clip31\"><path d=\"M2384,248 L2842,248 L2842,391 L2384,391 L2384,248 Z\" /></clipPath>\n<path d=\"M2396.0778809,315.0100098 L2395.1066895,315.0100098 L2395.1066895,313.1340332 C2393.8449707,313.1340332 2392.7990723,312.8739014 2391.9689941,312.3537598 L2391.9689941,310.6853027 C2392.7990723,311.3659668 2393.8449707,311.7312012 2395.1066895,311.7810059 L2395.1066895,307.3400879 C2393.7729492,306.7147217 2392.9069824,306.1308594 2392.5085449,305.588623 C2392.1101074,305.0462646 2391.9108887,304.4042969 2391.9108887,303.6628418 C2391.9108887,302.7995605 2392.208252,302.0483398 2392.8032227,301.4091797 C2393.3979492,300.7700195 2394.1657715,300.3867188 2395.1066895,300.2595215 L2395.1066895,298.6408691 L2396.0778809,298.6408691 L2396.0778809,300.2263184 C2397.2895508,300.2705078 2398.1142578,300.4421387 2398.5515137,300.7409668 L2398.5515137,302.3679199 C2397.9150391,301.8808594 2397.090332,301.618042 2396.0778809,301.5793457 L2396.0778809,306.161377 C2397.3283691,306.7313232 2398.1889648,307.2999268 2398.6594238,307.8671875 C2399.1296387,308.4343262 2399.3649902,309.0721436 2399.3649902,309.7805176 C2399.3649902,310.6713867 2399.0688477,311.4033203 2398.4768066,311.9760742 C2397.8845215,312.5488281 2397.0849609,312.9099121 2396.0778809,313.0593262 Z M2395.1066895,301.6291504 C2394.0441895,301.8615723 2393.5129395,302.4785156 2393.5129395,303.4802246 C2393.5129395,303.9616699 2393.6262207,304.3601074 2393.8532715,304.6755371 C2394.0800781,304.9909668 2394.4978027,305.3173828 2395.1066895,305.6550293 Z M2396.0778809,311.7145996 C2397.2011719,311.4710693 2397.7629395,310.8706055 2397.7629395,309.9133301 C2397.7629395,309.1108398 2397.2011719,308.4108887 2396.0778809,307.8132324 Z M2406.927002,300.9318848 C2406.6225586,300.7713623 2406.2932129,300.6911621 2405.939209,300.6911621 C2404.9208984,300.6911621 2404.4118652,301.3220215 2404.4118652,302.5837402 L2404.4118652,303.9533691 L2406.5617676,303.9533691 L2406.5617676,305.2980957 L2404.4118652,305.2980957 L2404.4118652,313.1340332 L2402.8015137,313.1340332 L2402.8015137,305.2980957 L2401.232666,305.2980957 L2401.232666,303.9533691 L2402.8015137,303.9533691 L2402.8015137,302.5090332 C2402.8015137,301.5239258 2403.0849609,300.7506104 2403.6523438,300.1889648 C2404.2194824,299.6271973 2404.9401855,299.3464355 2405.8146973,299.3464355 C2406.279541,299.3464355 2406.6501465,299.3989258 2406.927002,299.5041504 Z M2407.6740723,308.6433105 C2407.6740723,307.1269531 2408.0974121,305.9302979 2408.9440918,305.0532227 C2409.7907715,304.1760254 2410.9389648,303.7375488 2412.388916,303.7375488 C2413.7666016,303.7375488 2414.847168,304.1594238 2415.6303711,305.003418 C2416.4133301,305.84729 2416.8049316,307.0135498 2416.8049316,308.5021973 C2416.8049316,309.9520264 2416.3869629,311.1224365 2415.5515137,312.0134277 C2414.7158203,312.9042969 2413.5952148,313.3498535 2412.1896973,313.3498535 C2410.8171387,313.3498535 2409.7214355,312.9180908 2408.9025879,312.0549316 C2408.0834961,311.1916504 2407.6740723,310.0544434 2407.6740723,308.6433105 Z M2409.3342285,308.5935059 C2409.3342285,309.6503906 2409.6010742,310.4832764 2410.1352539,311.092041 C2410.6691895,311.7006836 2411.387207,312.005127 2412.2893066,312.005127 C2413.21875,312.005127 2413.9272461,311.7076416 2414.4143066,311.112793 C2414.901123,310.5178223 2415.1447754,309.6643066 2415.1447754,308.552002 C2415.1447754,307.434082 2414.901123,306.576416 2414.4143066,305.9787598 C2413.9272461,305.3811035 2413.21875,305.0822754 2412.2893066,305.0822754 C2411.3762207,305.0822754 2410.6552734,305.3948975 2410.1269531,306.0202637 C2409.5983887,306.6455078 2409.3342285,307.5032959 2409.3342285,308.5935059 Z M2424.342041,305.5637207 C2424.0708008,305.3699951 2423.6972656,305.2731934 2423.2214355,305.2731934 C2422.5905762,305.2731934 2422.0703125,305.5678711 2421.6608887,306.1572266 C2421.2512207,306.746582 2421.0466309,307.5227051 2421.0466309,308.4855957 L2421.0466309,313.1340332 L2419.4196777,313.1340332 L2419.4196777,303.9533691 L2421.0466309,303.9533691 L2421.0466309,305.8210449 L2421.079834,305.8210449 C2421.5444336,304.4707031 2422.3469238,303.7956543 2423.4870605,303.7956543 C2423.857666,303.7956543 2424.1428223,303.8371582 2424.342041,303.920166 Z M2432.4436035,312.7189941 C2431.7407227,313.1395264 2430.894043,313.3498535 2429.9035645,313.3498535 C2428.5751953,313.3498535 2427.5073242,312.9237061 2426.6994629,312.0715332 C2425.8913574,311.2192383 2425.4875488,310.1152344 2425.4875488,308.7595215 C2425.4875488,307.2542725 2425.9233398,306.0410156 2426.7949219,305.1196289 C2427.6665039,304.1982422 2428.8327637,303.7375488 2430.2937012,303.7375488 C2431.1347656,303.7375488 2431.854248,303.8869629 2432.4519043,304.185791 L2432.4519043,305.7961426 C2431.8044434,305.3201904 2431.0849609,305.0822754 2430.2937012,305.0822754 C2429.3640137,305.0822754 2428.6071777,305.404541 2428.0234375,306.0493164 C2427.4394531,306.6939697 2427.1477051,307.5531006 2427.1477051,308.626709 C2427.1477051,309.6835938 2427.4228516,310.5109863 2427.9736328,311.1086426 C2428.5241699,311.7062988 2429.2670898,312.005127 2430.2023926,312.005127 C2430.9936523,312.005127 2431.7407227,311.7449951 2432.4436035,311.2248535 Z M2442.3630371,308.9587402 L2435.9382324,308.9587402 C2435.9658203,309.9382324 2436.2341309,310.6949463 2436.7434082,311.2290039 C2437.2524414,311.7629395 2437.963623,312.0300293 2438.876709,312.0300293 C2439.9060059,312.0300293 2440.8493652,311.7006836 2441.7072754,311.0422363 L2441.7072754,312.494873 C2440.8991699,313.0648193 2439.8283691,313.3498535 2438.494873,313.3498535 C2437.166748,313.3498535 2436.1303711,312.9291992 2435.3862305,312.0881348 C2434.6418457,311.2469482 2434.2697754,310.0793457 2434.2697754,308.5852051 C2434.2697754,307.1795654 2434.6777344,306.0202637 2435.4941406,305.1071777 C2436.3103027,304.1940918 2437.3242188,303.7375488 2438.536377,303.7375488 C2439.7370605,303.7375488 2440.6750488,304.1235352 2441.3503418,304.8955078 C2442.0253906,305.6674805 2442.3630371,306.7479248 2442.3630371,308.1369629 Z M2440.736084,307.6555176 C2440.7304688,306.8254395 2440.5339355,306.1834717 2440.1467285,305.7297363 C2439.7592773,305.2758789 2439.2141113,305.0490723 2438.5114746,305.0490723 C2437.8640137,305.0490723 2437.3034668,305.2897949 2436.8305664,305.7712402 C2436.3574219,306.2526855 2436.0598145,306.8807373 2435.9382324,307.6555176 Z M2454.5568848,307.8962402 C2454.5568848,311.5318604 2452.9077148,313.3498535 2449.6096191,313.3498535 C2446.449707,313.3498535 2444.869873,311.5955811 2444.869873,308.0871582 L2444.869873,300.276123 L2446.5300293,300.276123 L2446.5300293,308.0124512 C2446.5300293,310.5856934 2447.6091309,311.8723145 2449.767334,311.8723145 C2451.8535156,311.8723145 2452.8967285,310.6271973 2452.8967285,308.1369629 L2452.8967285,300.276123 L2454.5568848,300.276123 Z M2459.520752,311.8391113 L2459.520752,317.3591309 L2457.8937988,317.3591309 L2457.8937988,303.9533691 L2459.520752,303.9533691 L2459.520752,305.5388184 L2459.5539551,305.5388184 C2460.2731934,304.3378906 2461.324707,303.7375488 2462.708252,303.7375488 C2463.8813477,303.7375488 2464.8012695,304.1484375 2465.4682617,304.9702148 C2466.1350098,305.7919922 2466.4685059,306.8945313 2466.4685059,308.2780762 C2466.4685059,309.8054199 2466.0908203,311.0324707 2465.3354492,311.9594727 C2464.5800781,312.8863525 2463.5632324,313.3498535 2462.2849121,313.3498535 C2461.1062012,313.3498535 2460.1958008,312.8461914 2459.5539551,311.8391113 Z M2459.5124512,309.348877 C2459.5124512,310.0959473 2459.7531738,310.7253418 2460.2346191,311.2373047 C2460.7160645,311.7491455 2461.3190918,312.005127 2462.0441895,312.005127 C2462.9072266,312.005127 2463.5825195,311.6730957 2464.0695801,311.0090332 C2464.5563965,310.3449707 2464.8000488,309.4262695 2464.8000488,308.2531738 C2464.8000488,307.2625732 2464.572998,306.4864502 2464.1193848,305.9248047 C2463.6655273,305.3630371 2463.0456543,305.0822754 2462.2600098,305.0822754 C2461.4575195,305.0822754 2460.7990723,305.3671875 2460.2844238,305.9372559 C2459.7697754,306.5072021 2459.5124512,307.2376709 2459.5124512,308.1286621 Z M2477.0437012,313.1340332 L2475.416748,313.1340332 L2475.416748,311.6066895 L2475.3835449,311.6066895 C2474.7138672,312.7686768 2473.673584,313.3498535 2472.2624512,313.3498535 C2471.1003418,313.3498535 2470.1760254,312.9361572 2469.4899902,312.1088867 C2468.8037109,311.2814941 2468.4606934,310.1650391 2468.4606934,308.7595215 C2468.4606934,307.2431641 2468.8479004,306.0270996 2469.6228027,305.1113281 C2470.3974609,304.1954346 2471.4101563,303.7375488 2472.6608887,303.7375488 C2473.911377,303.7375488 2474.8190918,304.2244873 2475.3835449,305.1984863 L2475.416748,305.1984863 L2475.416748,299.5456543 L2477.0437012,299.5456543 Z M2475.4250488,307.6721191 C2475.4250488,306.9360352 2475.1828613,306.3204346 2474.6987305,305.8251953 C2474.2143555,305.329834 2473.6181641,305.0822754 2472.9099121,305.0822754 C2472.0466309,305.0822754 2471.3659668,305.404541 2470.8679199,306.0493164 C2470.369873,306.6939697 2470.1208496,307.5725098 2470.1208496,308.6848145 C2470.1208496,309.7084961 2470.3601074,310.5178223 2470.8388672,311.112793 C2471.3173828,311.7076416 2471.9553223,312.005127 2472.7521973,312.005127 C2473.5378418,312.005127 2474.1799316,311.7131348 2474.6779785,311.1293945 C2475.1760254,310.5455322 2475.4250488,309.8192139 2475.4250488,308.9504395 Z M2480.4885254,304.5925293 C2481.4016113,304.0224609 2482.4558105,303.7375488 2483.651123,303.7375488 C2485.864502,303.7375488 2486.9714355,304.8996582 2486.9714355,307.223877 L2486.9714355,313.1340332 L2485.361084,313.1340332 L2485.361084,311.7145996 L2485.3195801,311.7145996 C2484.6831055,312.8046875 2483.7451172,313.3498535 2482.5056152,313.3498535 C2481.614502,313.3498535 2480.90625,313.1090088 2480.3806152,312.6276855 C2479.8547363,312.1462402 2479.592041,311.4959717 2479.592041,310.677002 C2479.592041,308.9614258 2480.6074219,307.9626465 2482.6384277,307.6804199 L2485.361084,307.298584 C2485.361084,305.7988281 2484.7412109,305.0490723 2483.501709,305.0490723 C2482.4003906,305.0490723 2481.3959961,305.4197998 2480.4885254,306.161377 Z M2483.2111816,308.817627 C2482.4584961,308.9172363 2481.9396973,309.1053467 2481.6547852,309.3820801 C2481.3696289,309.6586914 2481.2272949,310.0461426 2481.2272949,310.5441895 C2481.2272949,310.9813232 2481.3820801,311.3382568 2481.6921387,311.6149902 C2482.0019531,311.8916016 2482.411377,312.0300293 2482.9206543,312.0300293 C2483.6289063,312.0300293 2484.2126465,311.7810059 2484.6721191,311.282959 C2485.1313477,310.7849121 2485.361084,310.1595459 2485.361084,309.4069824 L2485.361084,308.5270996 Z M2494.3591309,313.0427246 C2494.0048828,313.2363281 2493.526123,313.333252 2492.9230957,313.333252 C2491.279541,313.333252 2490.4577637,312.4228516 2490.4577637,310.6022949 L2490.4577637,305.2980957 L2488.8806152,305.2980957 L2488.8806152,303.9533691 L2490.4577637,303.9533691 L2490.4577637,301.7453613 L2492.076416,301.2307129 L2492.076416,303.9533691 L2494.3591309,303.9533691 L2494.3591309,305.2980957 L2492.076416,305.2980957 L2492.076416,310.3117676 C2492.076416,310.914917 2492.1787109,311.3465576 2492.3835449,311.6066895 C2492.5881348,311.8666992 2492.9284668,311.9968262 2493.404541,311.9968262 C2493.7697754,311.9968262 2494.0878906,311.8944092 2494.3591309,311.6896973 Z M2503.954834,308.9587402 L2497.5300293,308.9587402 C2497.5576172,309.9382324 2497.8259277,310.6949463 2498.3352051,311.2290039 C2498.8442383,311.7629395 2499.5554199,312.0300293 2500.4685059,312.0300293 C2501.4978027,312.0300293 2502.4411621,311.7006836 2503.2990723,311.0422363 L2503.2990723,312.494873 C2502.4909668,313.0648193 2501.420166,313.3498535 2500.0866699,313.3498535 C2498.7585449,313.3498535 2497.722168,312.9291992 2496.9780273,312.0881348 C2496.2336426,311.2469482 2495.8615723,310.0793457 2495.8615723,308.5852051 C2495.8615723,307.1795654 2496.2695313,306.0202637 2497.0859375,305.1071777 C2497.9020996,304.1940918 2498.9160156,303.7375488 2500.1281738,303.7375488 C2501.3288574,303.7375488 2502.2668457,304.1235352 2502.9421387,304.8955078 C2503.6171875,305.6674805 2503.954834,306.7479248 2503.954834,308.1369629 Z M2502.3278809,307.6555176 C2502.3222656,306.8254395 2502.1257324,306.1834717 2501.7385254,305.7297363 C2501.3510742,305.2758789 2500.8059082,305.0490723 2500.1032715,305.0490723 C2499.4558105,305.0490723 2498.8952637,305.2897949 2498.4223633,305.7712402 C2497.9492188,306.2526855 2497.6516113,306.8807373 2497.5300293,307.6555176 Z M2510.0891113,311.0754395 L2508.6862793,315.4997559 L2507.5241699,315.4997559 L2508.545166,311.0754395 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip31)\" />\n<clipPath id=\"clip32\"><path d=\"M2384,248 L2842,248 L2842,391 L2384,391 L2384,248 Z\" /></clipPath>\n<path d=\"M2396.9599609,337.9519043 L2395.9887695,337.9519043 L2395.9887695,336.0759277 C2394.7270508,336.0759277 2393.6811523,335.8157959 2392.8510742,335.2956543 L2392.8510742,333.6271973 C2393.6811523,334.3078613 2394.7270508,334.6730957 2395.9887695,334.7229004 L2395.9887695,330.2819824 C2394.6550293,329.6566162 2393.7890625,329.0727539 2393.390625,328.5305176 C2392.9921875,327.9881592 2392.7929688,327.3461914 2392.7929688,326.6047363 C2392.7929688,325.7414551 2393.090332,324.9902344 2393.6853027,324.3510742 C2394.2800293,323.7119141 2395.0478516,323.3286133 2395.9887695,323.201416 L2395.9887695,321.5827637 L2396.9599609,321.5827637 L2396.9599609,323.1682129 C2398.1716309,323.2124023 2398.9963379,323.3840332 2399.4335938,323.6828613 L2399.4335938,325.3098145 C2398.7971191,324.8227539 2397.9724121,324.5599365 2396.9599609,324.5212402 L2396.9599609,329.1032715 C2398.2104492,329.6732178 2399.0710449,330.2418213 2399.5415039,330.809082 C2400.0117188,331.3762207 2400.2470703,332.0140381 2400.2470703,332.7224121 C2400.2470703,333.6132813 2399.9509277,334.3452148 2399.3588867,334.9179688 C2398.7666016,335.4907227 2397.967041,335.8518066 2396.9599609,336.0012207 Z M2395.9887695,324.5710449 C2394.9262695,324.8034668 2394.3950195,325.4204102 2394.3950195,326.4221191 C2394.3950195,326.9035645 2394.5083008,327.302002 2394.7353516,327.6174316 C2394.9621582,327.9328613 2395.3798828,328.2592773 2395.9887695,328.5969238 Z M2396.9599609,334.6564941 C2398.083252,334.4129639 2398.6450195,333.8125 2398.6450195,332.8552246 C2398.6450195,332.0527344 2398.083252,331.3527832 2396.9599609,330.755127 Z M2411.0712891,336.0759277 L2409.4443359,336.0759277 L2409.4443359,334.548584 L2409.4111328,334.548584 C2408.7414551,335.7105713 2407.7011719,336.291748 2406.2900391,336.291748 C2405.1279297,336.291748 2404.2036133,335.8780518 2403.5175781,335.0507813 C2402.8312988,334.2233887 2402.4882813,333.1069336 2402.4882813,331.701416 C2402.4882813,330.1850586 2402.8754883,328.9689941 2403.6503906,328.0532227 C2404.4250488,327.1373291 2405.4377441,326.6794434 2406.6884766,326.6794434 C2407.9389648,326.6794434 2408.8466797,327.1663818 2409.4111328,328.1403809 L2409.4443359,328.1403809 L2409.4443359,322.4875488 L2411.0712891,322.4875488 Z M2409.4526367,330.6140137 C2409.4526367,329.8779297 2409.2104492,329.2623291 2408.7263184,328.7670898 C2408.2419434,328.2717285 2407.645752,328.0241699 2406.9375,328.0241699 C2406.0742188,328.0241699 2405.3935547,328.3464355 2404.8955078,328.9912109 C2404.3974609,329.6358643 2404.1484375,330.5144043 2404.1484375,331.626709 C2404.1484375,332.6503906 2404.3876953,333.4597168 2404.8664551,334.0546875 C2405.3449707,334.6495361 2405.9829102,334.9470215 2406.7797852,334.9470215 C2407.5654297,334.9470215 2408.2075195,334.6550293 2408.7055664,334.0712891 C2409.2036133,333.4874268 2409.4526367,332.7611084 2409.4526367,331.892334 Z M2421.7792969,331.9006348 L2415.3544922,331.9006348 C2415.3820801,332.880127 2415.6503906,333.6368408 2416.159668,334.1708984 C2416.6687012,334.704834 2417.3798828,334.9719238 2418.2929688,334.9719238 C2419.3222656,334.9719238 2420.265625,334.6425781 2421.1235352,333.9841309 L2421.1235352,335.4367676 C2420.3154297,336.0067139 2419.2446289,336.291748 2417.9111328,336.291748 C2416.5830078,336.291748 2415.5466309,335.8710938 2414.8024902,335.0300293 C2414.0581055,334.1888428 2413.6860352,333.0212402 2413.6860352,331.5270996 C2413.6860352,330.12146 2414.0939941,328.9621582 2414.9104004,328.0490723 C2415.7265625,327.1359863 2416.7404785,326.6794434 2417.9526367,326.6794434 C2419.1533203,326.6794434 2420.0913086,327.0654297 2420.7666016,327.8374023 C2421.4416504,328.609375 2421.7792969,329.6898193 2421.7792969,331.0788574 Z M2420.1523438,330.5974121 C2420.1467285,329.767334 2419.9501953,329.1253662 2419.5629883,328.6716309 C2419.1755371,328.2177734 2418.6303711,327.9909668 2417.9277344,327.9909668 C2417.2802734,327.9909668 2416.7197266,328.2316895 2416.2468262,328.7131348 C2415.7736816,329.1945801 2415.4760742,329.8226318 2415.3544922,330.5974121 Z M2423.7216797,334.092041 C2424.5405273,334.684082 2425.4233398,334.9802246 2426.3696289,334.9802246 C2427.6367188,334.9802246 2428.2705078,334.5651855 2428.2705078,333.7351074 C2428.2705078,333.3808594 2428.1320801,333.0889893 2427.8554688,332.859375 C2427.5786133,332.6296387 2427.0168457,332.3571777 2426.1704102,332.041748 C2425.1520996,331.6322021 2424.4907227,331.2268066 2424.1865234,330.8256836 C2423.8820801,330.4244385 2423.7297363,329.9388428 2423.7299805,329.3688965 C2423.7297363,328.5554199 2424.0744629,327.9038086 2424.7634277,327.4140625 C2425.4523926,326.9243164 2426.300293,326.6794434 2427.3076172,326.6794434 C2428.0878906,326.6794434 2428.8127441,326.8149414 2429.4824219,327.0861816 L2429.4824219,328.6550293 C2428.7961426,328.2122803 2428.0185547,327.9909668 2427.1499023,327.9909668 C2426.6296387,327.9909668 2426.2062988,328.1043701 2425.8798828,328.3312988 C2425.5532227,328.5581055 2425.3901367,328.8569336 2425.3901367,329.2277832 C2425.3901367,329.5930176 2425.5075684,329.8779297 2425.7429199,330.0827637 C2425.9780273,330.2874756 2426.4995117,330.550293 2427.3076172,330.8713379 C2428.3312988,331.2531738 2429.0229492,331.6488037 2429.3828125,332.0583496 C2429.7424316,332.4677734 2429.9223633,332.9741211 2429.9223633,333.5773926 C2429.9223633,334.418457 2429.5778809,335.0811768 2428.888916,335.5654297 C2428.1999512,336.0495605 2427.3076172,336.291748 2426.2119141,336.291748 C2425.2600098,336.291748 2424.4299316,336.1118164 2423.7216797,335.7521973 Z M2436.7456055,335.9846191 C2436.3913574,336.1782227 2435.9125977,336.2751465 2435.3095703,336.2751465 C2433.6660156,336.2751465 2432.8442383,335.3647461 2432.8442383,333.5441895 L2432.8442383,328.2399902 L2431.2670898,328.2399902 L2431.2670898,326.8952637 L2432.8442383,326.8952637 L2432.8442383,324.6872559 L2434.4628906,324.1726074 L2434.4628906,326.8952637 L2436.7456055,326.8952637 L2436.7456055,328.2399902 L2434.4628906,328.2399902 L2434.4628906,333.2536621 C2434.4628906,333.8568115 2434.5651855,334.2884521 2434.7700195,334.548584 C2434.9746094,334.8085938 2435.3149414,334.9387207 2435.7910156,334.9387207 C2436.15625,334.9387207 2436.4743652,334.8363037 2436.7456055,334.6315918 Z M2443.784668,328.5056152 C2443.5134277,328.3118896 2443.1398926,328.2150879 2442.6640625,328.2150879 C2442.0332031,328.2150879 2441.5129395,328.5097656 2441.1035156,329.0991211 C2440.6938477,329.6884766 2440.4892578,330.4645996 2440.4892578,331.4274902 L2440.4892578,336.0759277 L2438.8623047,336.0759277 L2438.8623047,326.8952637 L2440.4892578,326.8952637 L2440.4892578,328.7629395 L2440.5224609,328.7629395 C2440.9870605,327.4125977 2441.7895508,326.7375488 2442.9296875,326.7375488 C2443.300293,326.7375488 2443.5854492,326.7790527 2443.784668,326.8620605 Z M2444.9301758,331.5852051 C2444.9301758,330.0688477 2445.3535156,328.8721924 2446.2001953,327.9951172 C2447.046875,327.1179199 2448.1950684,326.6794434 2449.6450195,326.6794434 C2451.0227051,326.6794434 2452.1032715,327.1013184 2452.8864746,327.9453125 C2453.6694336,328.7891846 2454.0610352,329.9554443 2454.0610352,331.4440918 C2454.0610352,332.8939209 2453.6430664,334.0643311 2452.8076172,334.9553223 C2451.9719238,335.8461914 2450.8513184,336.291748 2449.4458008,336.291748 C2448.0732422,336.291748 2446.9775391,335.8599854 2446.1586914,334.9968262 C2445.3395996,334.1335449 2444.9301758,332.9963379 2444.9301758,331.5852051 Z M2446.590332,331.5354004 C2446.590332,332.5922852 2446.8571777,333.4251709 2447.3913574,334.0339355 C2447.925293,334.6425781 2448.6433105,334.9470215 2449.5454102,334.9470215 C2450.4748535,334.9470215 2451.1833496,334.6495361 2451.6704102,334.0546875 C2452.1572266,333.4597168 2452.4008789,332.6062012 2452.4008789,331.4938965 C2452.4008789,330.3759766 2452.1572266,329.5183105 2451.6704102,328.9206543 C2451.1833496,328.322998 2450.4748535,328.0241699 2449.5454102,328.0241699 C2448.6323242,328.0241699 2447.911377,328.336792 2447.3830566,328.9621582 C2446.8544922,329.5874023 2446.590332,330.4451904 2446.590332,331.5354004 Z M2464.1464844,326.8952637 L2459.9794922,337.4621582 C2459.2045898,339.4210205 2458.1118164,340.4006348 2456.7006836,340.4006348 C2456.2966309,340.4006348 2455.9506836,340.3563232 2455.6630859,340.2678223 L2455.6630859,338.8400879 C2455.9785156,338.961792 2456.2827148,339.0227051 2456.5761719,339.0227051 C2457.3120117,339.0227051 2457.862793,338.5910645 2458.2280273,337.7277832 L2458.9335938,336.0593262 L2455.3310547,326.8952637 L2457.1323242,326.8952637 L2459.53125,333.7932129 L2459.7304688,334.548584 L2459.7719727,334.548584 C2459.8051758,334.3769531 2459.871582,334.1307373 2459.9711914,333.8098145 L2462.4780273,326.8952637 Z M2467.4418945,334.0090332 L2466.0224609,338.4333496 L2464.84375,338.4333496 L2465.8730469,334.0090332 Z M2476.3320313,340.4172363 L2468.7119141,340.4172363 L2468.7119141,339.3464355 L2476.3320313,339.3464355 Z M2477.402832,331.5852051 C2477.402832,330.0688477 2477.8261719,328.8721924 2478.6728516,327.9951172 C2479.5195313,327.1179199 2480.6677246,326.6794434 2482.1176758,326.6794434 C2483.4953613,326.6794434 2484.5759277,327.1013184 2485.3591309,327.9453125 C2486.1420898,328.7891846 2486.5336914,329.9554443 2486.5336914,331.4440918 C2486.5336914,332.8939209 2486.1157227,334.0643311 2485.2802734,334.9553223 C2484.4445801,335.8461914 2483.3239746,336.291748 2481.918457,336.291748 C2480.5458984,336.291748 2479.4501953,335.8599854 2478.6313477,334.9968262 C2477.8122559,334.1335449 2477.402832,332.9963379 2477.402832,331.5852051 Z M2479.0629883,331.5354004 C2479.0629883,332.5922852 2479.329834,333.4251709 2479.8640137,334.0339355 C2480.3979492,334.6425781 2481.1159668,334.9470215 2482.0180664,334.9470215 C2482.9475098,334.9470215 2483.6560059,334.6495361 2484.1430664,334.0546875 C2484.6298828,333.4597168 2484.8735352,332.6062012 2484.8735352,331.4938965 C2484.8735352,330.3759766 2484.6298828,329.5183105 2484.1430664,328.9206543 C2483.6560059,328.322998 2482.9475098,328.0241699 2482.0180664,328.0241699 C2481.1049805,328.0241699 2480.3840332,328.336792 2479.8557129,328.9621582 C2479.3271484,329.5874023 2479.0629883,330.4451904 2479.0629883,331.5354004 Z M2490.6425781,334.0090332 L2489.2231445,338.4333496 L2488.0444336,338.4333496 L2489.0737305,334.0090332 Z M2499.5327148,340.4172363 L2491.9125977,340.4172363 L2491.9125977,339.3464355 L2499.5327148,339.3464355 Z M2508.9790039,336.0759277 L2507.3603516,336.0759277 L2507.3603516,330.8547363 C2507.3601074,328.9676514 2506.6711426,328.0241699 2505.293457,328.0241699 C2504.5795898,328.0241699 2503.9929199,328.2897949 2503.5336914,328.8210449 C2503.0742188,329.3522949 2502.8447266,330.0246582 2502.8447266,330.8381348 L2502.8447266,336.0759277 L2501.2177734,336.0759277 L2501.2177734,326.8952637 L2502.8447266,326.8952637 L2502.8447266,328.4143066 L2502.8779297,328.4143066 C2503.5695801,327.2576904 2504.5739746,326.6794434 2505.8911133,326.6794434 C2506.8981934,326.6794434 2507.6645508,327.001709 2508.1904297,327.6464844 C2508.7160645,328.2911377 2508.9790039,329.2304688 2508.9790039,330.4645996 Z M2513.5029297,334.0090332 L2512.0834961,338.4333496 L2510.9047852,338.4333496 L2511.934082,334.0090332 Z M2522.3930664,340.4172363 L2514.7729492,340.4172363 L2514.7729492,339.3464355 L2522.3930664,339.3464355 Z M2523.5634766,334.092041 C2524.3823242,334.684082 2525.2651367,334.9802246 2526.2114258,334.9802246 C2527.4785156,334.9802246 2528.1123047,334.5651855 2528.1123047,333.7351074 C2528.1123047,333.3808594 2527.973877,333.0889893 2527.6972656,332.859375 C2527.4204102,332.6296387 2526.8586426,332.3571777 2526.012207,332.041748 C2524.9938965,331.6322021 2524.3325195,331.2268066 2524.0283203,330.8256836 C2523.723877,330.4244385 2523.5715332,329.9388428 2523.5717773,329.3688965 C2523.5715332,328.5554199 2523.9162598,327.9038086 2524.6052246,327.4140625 C2525.2941895,326.9243164 2526.1420898,326.6794434 2527.1494141,326.6794434 C2527.9296875,326.6794434 2528.654541,326.8149414 2529.3242188,327.0861816 L2529.3242188,328.6550293 C2528.6379395,328.2122803 2527.8603516,327.9909668 2526.9916992,327.9909668 C2526.4714355,327.9909668 2526.0480957,328.1043701 2525.7216797,328.3312988 C2525.3950195,328.5581055 2525.2319336,328.8569336 2525.2319336,329.2277832 C2525.2319336,329.5930176 2525.3493652,329.8779297 2525.5847168,330.0827637 C2525.8198242,330.2874756 2526.3413086,330.550293 2527.1494141,330.8713379 C2528.1730957,331.2531738 2528.8647461,331.6488037 2529.2246094,332.0583496 C2529.5842285,332.4677734 2529.7641602,332.9741211 2529.7641602,333.5773926 C2529.7641602,334.418457 2529.4196777,335.0811768 2528.7307129,335.5654297 C2528.041748,336.0495605 2527.1494141,336.291748 2526.0537109,336.291748 C2525.1018066,336.291748 2524.2717285,336.1118164 2523.5634766,335.7521973 Z M2533.6738281,334.0090332 L2532.2543945,338.4333496 L2531.0756836,338.4333496 L2532.1049805,334.0090332 Z M2542.5639648,340.4172363 L2534.9438477,340.4172363 L2534.9438477,339.3464355 L2542.5639648,339.3464355 Z M2544.2407227,336.0759277 L2544.2407227,322.4875488 L2545.8676758,322.4875488 L2545.8676758,336.0759277 Z M2550.3999023,334.0090332 L2548.9804688,338.4333496 L2547.8017578,338.4333496 L2548.8310547,334.0090332 Z M2559.2900391,340.4172363 L2551.6699219,340.4172363 L2551.6699219,339.3464355 L2559.2900391,339.3464355 Z M2565.3828125,335.9846191 C2565.0285645,336.1782227 2564.5498047,336.2751465 2563.9467773,336.2751465 C2562.3032227,336.2751465 2561.4814453,335.3647461 2561.4814453,333.5441895 L2561.4814453,328.2399902 L2559.9042969,328.2399902 L2559.9042969,326.8952637 L2561.4814453,326.8952637 L2561.4814453,324.6872559 L2563.1000977,324.1726074 L2563.1000977,326.8952637 L2565.3828125,326.8952637 L2565.3828125,328.2399902 L2563.1000977,328.2399902 L2563.1000977,333.2536621 C2563.1000977,333.8568115 2563.2023926,334.2884521 2563.4072266,334.548584 C2563.6118164,334.8085938 2563.9521484,334.9387207 2564.4282227,334.9387207 C2564.793457,334.9387207 2565.1115723,334.8363037 2565.3828125,334.6315918 Z M2568.9936523,334.0090332 L2567.5742188,338.4333496 L2566.3955078,338.4333496 L2567.4248047,334.0090332 Z M2577.8837891,340.4172363 L2570.2636719,340.4172363 L2570.2636719,339.3464355 L2577.8837891,339.3464355 Z M2587.5375977,340.3010254 L2585.9106445,340.3010254 L2585.9106445,334.5319824 L2585.8774414,334.5319824 C2585.2353516,335.7050781 2584.2004395,336.291748 2582.7729492,336.291748 C2581.6162109,336.291748 2580.6906738,335.8835449 2579.9963379,335.0673828 C2579.3017578,334.2510986 2578.9545898,333.1291504 2578.9545898,331.701416 C2578.9545898,330.1795654 2579.3364258,328.9621582 2580.1000977,328.0490723 C2580.8637695,327.1359863 2581.8874512,326.6794434 2583.1713867,326.6794434 C2584.4108887,326.6794434 2585.3129883,327.1663818 2585.8774414,328.1403809 L2585.9106445,328.1403809 L2585.9106445,326.8952637 L2587.5375977,326.8952637 Z M2585.9106445,330.6472168 C2585.9160156,329.9222412 2585.6850586,329.303833 2585.2175293,328.7919922 C2584.7497559,328.2800293 2584.1396484,328.0241699 2583.387207,328.0241699 C2582.5239258,328.0241699 2581.8459473,328.3450928 2581.3535156,328.9870605 C2580.8608398,329.6289063 2580.6147461,330.5198975 2580.6147461,331.6599121 C2580.6147461,332.689209 2580.8513184,333.4943848 2581.3244629,334.0754395 C2581.7976074,334.6564941 2582.4187012,334.9470215 2583.1879883,334.9470215 C2584.0290527,334.9470215 2584.6945801,334.6578369 2585.1843262,334.0795898 C2585.6740723,333.5012207 2585.9160156,332.7805176 2585.9106445,331.9172363 Z M2592.2607422,334.0090332 L2590.8413086,338.4333496 L2589.6625977,338.4333496 L2590.6918945,334.0090332 Z M2601.1508789,340.4172363 L2593.5307617,340.4172363 L2593.5307617,339.3464355 L2601.1508789,339.3464355 Z M2602.6367188,323.657959 C2602.6367188,323.3701172 2602.7348633,323.1280518 2602.9313965,322.9316406 C2603.1276855,322.7351074 2603.369873,322.6369629 2603.6577148,322.6369629 C2603.9509277,322.6369629 2604.1984863,322.7337646 2604.4006348,322.9274902 C2604.6025391,323.1210938 2604.7036133,323.364624 2604.7036133,323.657959 C2604.7036133,323.9456787 2604.6025391,324.1850586 2604.4006348,324.3759766 C2604.1984863,324.5668945 2603.9509277,324.6623535 2603.6577148,324.6623535 C2603.3642578,324.6623535 2603.1208496,324.5668945 2602.9272461,324.3759766 C2602.7333984,324.1850586 2602.6367188,323.9456787 2602.6367188,323.657959 Z M2602.8276367,336.0759277 L2602.8276367,326.8952637 L2604.4545898,326.8952637 L2604.4545898,336.0759277 Z M2608.9868164,334.0090332 L2607.5673828,338.4333496 L2606.3886719,338.4333496 L2607.4179688,334.0090332 Z M2617.8769531,340.4172363 L2610.2568359,340.4172363 L2610.2568359,339.3464355 L2617.8769531,339.3464355 Z M2632.7768555,336.0759277 L2631.1499023,336.0759277 L2631.1499023,330.8049316 C2631.1499023,329.8088379 2630.994873,329.0963135 2630.6850586,328.6674805 C2630.375,328.2385254 2629.8659668,328.0241699 2629.1577148,328.0241699 C2628.5600586,328.0241699 2628.0480957,328.3035889 2627.6220703,328.8625488 C2627.1958008,329.4213867 2626.9829102,330.0827637 2626.9829102,330.8464355 L2626.9829102,336.0759277 L2625.355957,336.0759277 L2625.355957,330.638916 C2625.3557129,328.895752 2624.6833496,328.0241699 2623.3388672,328.0241699 C2622.7189941,328.0241699 2622.2058105,328.2897949 2621.7990723,328.8210449 C2621.392334,329.3522949 2621.1889648,330.0301514 2621.1889648,330.8547363 L2621.1889648,336.0759277 L2619.5620117,336.0759277 L2619.5620117,326.8952637 L2621.1889648,326.8952637 L2621.1889648,328.3479004 L2621.222168,328.3479004 C2621.875,327.2355957 2622.8295898,326.6794434 2624.0859375,326.6794434 C2624.6999512,326.6794434 2625.2424316,326.8481445 2625.7128906,327.185791 C2626.1831055,327.5233154 2626.5097656,327.9798584 2626.6923828,328.5554199 C2627.3730469,327.3046875 2628.3911133,326.6794434 2629.7470703,326.6794434 C2631.7668457,326.6794434 2632.7766113,327.9245605 2632.7768555,330.4147949 Z M2637.4667969,334.0090332 L2636.0473633,338.4333496 L2634.8686523,338.4333496 L2635.8979492,334.0090332 Z M2646.3569336,340.4172363 L2638.7368164,340.4172363 L2638.7368164,339.3464355 L2646.3569336,339.3464355 Z M2652.7485352,323.8737793 C2652.4440918,323.7132568 2652.1147461,323.6330566 2651.7607422,323.6330566 C2650.7424316,323.6330566 2650.2333984,324.263916 2650.2333984,325.5256348 L2650.2333984,326.8952637 L2652.3833008,326.8952637 L2652.3833008,328.2399902 L2650.2333984,328.2399902 L2650.2333984,336.0759277 L2648.6230469,336.0759277 L2648.6230469,328.2399902 L2647.0541992,328.2399902 L2647.0541992,326.8952637 L2648.6230469,326.8952637 L2648.6230469,325.4509277 C2648.6230469,324.4658203 2648.9064941,323.6925049 2649.473877,323.1308594 C2650.0410156,322.5690918 2650.7617188,322.2883301 2651.6362305,322.2883301 C2652.1010742,322.2883301 2652.4716797,322.3408203 2652.7485352,322.4460449 Z M2655.6040039,334.0090332 L2654.1845703,338.4333496 L2653.0058594,338.4333496 L2654.0351563,334.0090332 Z M2664.4941406,340.4172363 L2656.8740234,340.4172363 L2656.8740234,339.3464355 L2664.4941406,339.3464355 Z M2673.9819336,336.0759277 L2671.765625,336.0759277 L2667.8393555,331.6516113 L2667.8061523,331.6516113 L2667.8061523,336.0759277 L2666.1791992,336.0759277 L2666.1791992,322.4875488 L2667.8061523,322.4875488 L2667.8061523,331.1037598 L2667.8393555,331.1037598 L2671.5664063,326.8952637 L2673.6582031,326.8952637 L2669.5078125,331.3112793 Z M2677.2026367,334.0090332 L2675.7832031,338.4333496 L2674.6044922,338.4333496 L2675.6337891,334.0090332 Z M2686.0927734,340.4172363 L2678.4726563,340.4172363 L2678.4726563,339.3464355 L2686.0927734,339.3464355 Z M2689.4047852,334.7810059 L2689.4047852,336.0759277 L2687.777832,336.0759277 L2687.777832,322.4875488 L2689.4047852,322.4875488 L2689.4047852,328.4807129 L2689.4379883,328.4807129 C2690.1572266,327.2797852 2691.2087402,326.6794434 2692.5922852,326.6794434 C2693.7431641,326.6794434 2694.6577148,327.0847168 2695.3356934,327.8955078 C2696.0134277,328.7061768 2696.3525391,329.8143311 2696.3525391,331.2199707 C2696.3525391,332.7694092 2695.9719238,334.0020752 2695.2111816,334.9179688 C2694.4501953,335.8337402 2693.4360352,336.291748 2692.1689453,336.291748 C2690.9736328,336.291748 2690.0632324,335.7880859 2689.4379883,334.7810059 Z M2689.3964844,332.2990723 C2689.3964844,333.0405273 2689.637207,333.6672363 2690.1186523,334.1791992 C2690.6000977,334.69104 2691.203125,334.9470215 2691.9282227,334.9470215 C2692.7912598,334.9470215 2693.4665527,334.6149902 2693.9536133,333.9509277 C2694.4404297,333.2868652 2694.684082,332.3681641 2694.684082,331.1950684 C2694.684082,330.2265625 2694.4570313,329.4560547 2694.003418,328.8833008 C2693.5495605,328.3105469 2692.9296875,328.0241699 2692.144043,328.0241699 C2691.347168,328.0241699 2690.6899414,328.309082 2690.1726074,328.8791504 C2689.6550293,329.4490967 2689.3964844,330.1740723 2689.3964844,331.0539551 Z M2700.453125,334.0090332 L2699.0336914,338.4333496 L2697.8549805,338.4333496 L2698.8842773,334.0090332 Z M2709.3432617,340.4172363 L2701.7231445,340.4172363 L2701.7231445,339.3464355 L2709.3432617,339.3464355 Z M2718.4243164,326.8952637 L2714.7885742,336.0759277 L2713.1450195,336.0759277 L2709.6918945,326.8952637 L2711.4682617,326.8952637 L2713.7094727,333.4528809 C2713.8920898,333.9785156 2714,334.418457 2714.0332031,334.7727051 L2714.074707,334.7727051 C2714.1298828,334.3078613 2714.2268066,333.8789063 2714.3652344,333.486084 L2716.7143555,326.8952637 Z M2721.7114258,334.0090332 L2720.2919922,338.4333496 L2719.1132813,338.4333496 L2720.1425781,334.0090332 Z M2730.6015625,340.4172363 L2722.9814453,340.4172363 L2722.9814453,339.3464355 L2730.6015625,339.3464355 Z M2739.765625,331.9006348 L2733.3408203,331.9006348 C2733.3684082,332.880127 2733.6367188,333.6368408 2734.1459961,334.1708984 C2734.6550293,334.704834 2735.3662109,334.9719238 2736.2792969,334.9719238 C2737.3085938,334.9719238 2738.2519531,334.6425781 2739.1098633,333.9841309 L2739.1098633,335.4367676 C2738.3017578,336.0067139 2737.230957,336.291748 2735.8974609,336.291748 C2734.5693359,336.291748 2733.532959,335.8710938 2732.7888184,335.0300293 C2732.0444336,334.1888428 2731.6723633,333.0212402 2731.6723633,331.5270996 C2731.6723633,330.12146 2732.0803223,328.9621582 2732.8967285,328.0490723 C2733.7128906,327.1359863 2734.7268066,326.6794434 2735.9389648,326.6794434 C2737.1396484,326.6794434 2738.0776367,327.0654297 2738.7529297,327.8374023 C2739.4279785,328.609375 2739.765625,329.6898193 2739.765625,331.0788574 Z M2738.1386719,330.5974121 C2738.1330566,329.767334 2737.9365234,329.1253662 2737.5493164,328.6716309 C2737.1618652,328.2177734 2736.6166992,327.9909668 2735.9140625,327.9909668 C2735.2666016,327.9909668 2734.7060547,328.2316895 2734.2331543,328.7131348 C2733.7600098,329.1945801 2733.4624023,329.8226318 2733.3408203,330.5974121 Z M2743.7167969,334.0090332 L2742.2973633,338.4333496 L2741.1186523,338.4333496 L2742.1479492,334.0090332 Z M2752.6069336,340.4172363 L2744.9868164,340.4172363 L2744.9868164,339.3464355 L2752.6069336,339.3464355 Z M2761.8706055,336.0759277 L2760.2353516,336.0759277 L2760.2353516,334.6315918 L2760.2021484,334.6315918 C2759.5878906,335.7382813 2758.6442871,336.291748 2757.371582,336.291748 C2755.1967773,336.291748 2754.109375,334.9912109 2754.109375,332.3903809 L2754.109375,326.8952637 L2755.7197266,326.8952637 L2755.7197266,332.1496582 C2755.7197266,334.0145264 2756.4335938,334.9470215 2757.8613281,334.9470215 C2758.5695801,334.9470215 2759.142334,334.6855469 2759.5795898,334.1625977 C2760.0166016,333.6396484 2760.2351074,332.9797363 2760.2353516,332.1828613 L2760.2353516,326.8952637 L2761.8706055,326.8952637 Z M2766.5771484,334.0090332 L2765.1577148,338.4333496 L2763.9790039,338.4333496 L2765.0083008,334.0090332 Z M2775.4672852,340.4172363 L2767.847168,340.4172363 L2767.847168,339.3464355 L2775.4672852,339.3464355 Z M2785.1210938,335.3039551 C2785.1210938,338.7016602 2783.4719238,340.4006348 2780.1738281,340.4006348 C2779.0336914,340.4006348 2778.0432129,340.1875 2777.2021484,339.7614746 L2777.2021484,338.192627 C2778.2258301,338.7625732 2779.2080078,339.0476074 2780.1489258,339.0476074 C2782.3789063,339.0476074 2783.4938965,337.8743896 2783.4941406,335.5280762 L2783.4941406,334.5568848 L2783.4609375,334.5568848 C2782.7636719,335.7133789 2781.7231445,336.291748 2780.3398438,336.291748 C2779.1887207,336.291748 2778.267334,335.8793945 2777.5756836,335.0549316 C2776.8837891,334.2303467 2776.5380859,333.1374512 2776.5380859,331.776123 C2776.5380859,330.2099609 2776.9199219,328.9689941 2777.6835938,328.0532227 C2778.4472656,327.1373291 2779.465332,326.6794434 2780.7382813,326.6794434 C2781.9611816,326.6794434 2782.8686523,327.1663818 2783.4609375,328.1403809 L2783.4941406,328.1403809 L2783.4941406,326.8952637 L2785.1210938,326.8952637 Z M2783.4941406,330.6140137 C2783.4995117,329.9056396 2783.2617188,329.296875 2782.7802734,328.7878418 C2782.2988281,328.2786865 2781.706543,328.0241699 2781.0039063,328.0241699 C2780.1184082,328.0241699 2779.4294434,328.3492432 2778.9370117,328.9995117 C2778.4443359,329.6496582 2778.1982422,330.5419922 2778.1982422,331.6765137 C2778.1982422,332.6503906 2778.4360352,333.4389648 2778.9121094,334.0422363 C2779.3879395,334.6453857 2780.0187988,334.9470215 2780.8046875,334.9470215 C2781.5959473,334.9470215 2782.2434082,334.6591797 2782.7470703,334.0837402 C2783.2504883,333.5081787 2783.4995117,332.77771 2783.4941406,331.892334 Z M2797.2070313,334.017334 L2795.8041992,338.4416504 L2794.6420898,338.4416504 L2795.6630859,334.017334 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip32)\" />\n<clipPath id=\"clip33\"><path d=\"M2384,248 L2842,248 L2842,391 L2384,391 L2384,248 Z\" /></clipPath>\n<path d=\"M2390.9284668,360.9519043 L2389.9572754,360.9519043 L2389.9572754,359.0759277 C2388.6955566,359.0759277 2387.6496582,358.8157959 2386.8195801,358.2956543 L2386.8195801,356.6271973 C2387.6496582,357.3078613 2388.6955566,357.6730957 2389.9572754,357.7229004 L2389.9572754,353.2819824 C2388.6235352,352.6566162 2387.7575684,352.0727539 2387.3591309,351.5305176 C2386.9606934,350.9881592 2386.7614746,350.3461914 2386.7614746,349.6047363 C2386.7614746,348.7414551 2387.0588379,347.9902344 2387.6538086,347.3510742 C2388.2485352,346.7119141 2389.0163574,346.3286133 2389.9572754,346.201416 L2389.9572754,344.5827637 L2390.9284668,344.5827637 L2390.9284668,346.1682129 C2392.1401367,346.2124023 2392.9648438,346.3840332 2393.4020996,346.6828613 L2393.4020996,348.3098145 C2392.765625,347.8227539 2391.940918,347.5599365 2390.9284668,347.5212402 L2390.9284668,352.1032715 C2392.1789551,352.6732178 2393.0395508,353.2418213 2393.5100098,353.809082 C2393.9802246,354.3762207 2394.2155762,355.0140381 2394.2155762,355.7224121 C2394.2155762,356.6132813 2393.9194336,357.3452148 2393.3273926,357.9179688 C2392.7351074,358.4907227 2391.9355469,358.8518066 2390.9284668,359.0012207 Z M2389.9572754,347.5710449 C2388.8947754,347.8034668 2388.3635254,348.4204102 2388.3635254,349.4221191 C2388.3635254,349.9035645 2388.4768066,350.302002 2388.7038574,350.6174316 C2388.9306641,350.9328613 2389.3483887,351.2592773 2389.9572754,351.5969238 Z M2390.9284668,357.6564941 C2392.0517578,357.4129639 2392.6135254,356.8125 2392.6135254,355.8552246 C2392.6135254,355.0527344 2392.0517578,354.3527832 2390.9284668,353.755127 Z M2404.8322754,359.0759277 L2403.213623,359.0759277 L2403.213623,353.8547363 C2403.2133789,351.9676514 2402.5244141,351.0241699 2401.1467285,351.0241699 C2400.4328613,351.0241699 2399.8461914,351.2897949 2399.3869629,351.8210449 C2398.9274902,352.3522949 2398.697998,353.0246582 2398.697998,353.8381348 L2398.697998,359.0759277 L2397.0710449,359.0759277 L2397.0710449,349.8952637 L2398.697998,349.8952637 L2398.697998,351.4143066 L2398.7312012,351.4143066 C2399.4228516,350.2576904 2400.4272461,349.6794434 2401.7443848,349.6794434 C2402.7514648,349.6794434 2403.5178223,350.001709 2404.0437012,350.6464844 C2404.5693359,351.2911377 2404.8322754,352.2304688 2404.8322754,353.4645996 Z M2415.3410645,354.9006348 L2408.9162598,354.9006348 C2408.9438477,355.880127 2409.2121582,356.6368408 2409.7214355,357.1708984 C2410.2304688,357.704834 2410.9416504,357.9719238 2411.8547363,357.9719238 C2412.8840332,357.9719238 2413.8273926,357.6425781 2414.6853027,356.9841309 L2414.6853027,358.4367676 C2413.8771973,359.0067139 2412.8063965,359.291748 2411.4729004,359.291748 C2410.1447754,359.291748 2409.1083984,358.8710938 2408.3642578,358.0300293 C2407.619873,357.1888428 2407.2478027,356.0212402 2407.2478027,354.5270996 C2407.2478027,353.12146 2407.6557617,351.9621582 2408.472168,351.0490723 C2409.2883301,350.1359863 2410.3022461,349.6794434 2411.5144043,349.6794434 C2412.7150879,349.6794434 2413.6530762,350.0654297 2414.3283691,350.8374023 C2415.003418,351.609375 2415.3410645,352.6898193 2415.3410645,354.0788574 Z M2413.7141113,353.5974121 C2413.7084961,352.767334 2413.5119629,352.1253662 2413.1247559,351.6716309 C2412.7373047,351.2177734 2412.1921387,350.9909668 2411.489502,350.9909668 C2410.842041,350.9909668 2410.2814941,351.2316895 2409.8085938,351.7131348 C2409.3354492,352.1945801 2409.0378418,352.8226318 2408.9162598,353.5974121 Z M2424.7458496,349.8952637 L2421.6745605,354.5187988 L2424.7043457,359.0759277 L2422.8117676,359.0759277 L2421.0603027,356.1540527 C2420.9660645,355.9990234 2420.833252,355.7611084 2420.6618652,355.4401855 L2420.6286621,355.4401855 C2420.6230469,355.4733887 2420.4846191,355.7113037 2420.213623,356.1540527 L2418.4289551,359.0759277 L2416.5612793,359.0759277 L2419.682373,354.5686035 L2416.7023926,349.8952637 L2418.5949707,349.8952637 L2420.3132324,352.9665527 C2420.4182129,353.1546631 2420.5456543,353.3981934 2420.6950684,353.6970215 L2420.7282715,353.6970215 L2422.9611816,349.8952637 Z M2431.0793457,358.9846191 C2430.7250977,359.1782227 2430.2463379,359.2751465 2429.6433105,359.2751465 C2427.9997559,359.2751465 2427.1779785,358.3647461 2427.1779785,356.5441895 L2427.1779785,351.2399902 L2425.6008301,351.2399902 L2425.6008301,349.8952637 L2427.1779785,349.8952637 L2427.1779785,347.6872559 L2428.7966309,347.1726074 L2428.7966309,349.8952637 L2431.0793457,349.8952637 L2431.0793457,351.2399902 L2428.7966309,351.2399902 L2428.7966309,356.2536621 C2428.7966309,356.8568115 2428.8989258,357.2884521 2429.1037598,357.548584 C2429.3083496,357.8085938 2429.6486816,357.9387207 2430.1247559,357.9387207 C2430.4899902,357.9387207 2430.8081055,357.8363037 2431.0793457,357.6315918 Z M2441.1730957,347.6955566 L2437.4626465,347.6955566 L2437.4626465,359.0759277 L2435.7941895,359.0759277 L2435.7941895,347.6955566 L2432.1003418,347.6955566 L2432.1003418,346.2180176 L2441.1730957,346.2180176 Z M2443.0324707,346.657959 C2443.0324707,346.3701172 2443.1306152,346.1280518 2443.3271484,345.9316406 C2443.5234375,345.7351074 2443.765625,345.6369629 2444.0534668,345.6369629 C2444.3466797,345.6369629 2444.5942383,345.7337646 2444.7963867,345.9274902 C2444.998291,346.1210938 2445.0993652,346.364624 2445.0993652,346.657959 C2445.0993652,346.9456787 2444.998291,347.1850586 2444.7963867,347.3759766 C2444.5942383,347.5668945 2444.3466797,347.6623535 2444.0534668,347.6623535 C2443.7600098,347.6623535 2443.5166016,347.5668945 2443.322998,347.3759766 C2443.1291504,347.1850586 2443.0324707,346.9456787 2443.0324707,346.657959 Z M2443.2233887,359.0759277 L2443.2233887,349.8952637 L2444.8503418,349.8952637 L2444.8503418,359.0759277 Z M2454.2302246,358.6608887 C2453.5273438,359.0814209 2452.6806641,359.291748 2451.6901855,359.291748 C2450.3618164,359.291748 2449.2939453,358.8656006 2448.486084,358.0134277 C2447.6779785,357.1611328 2447.2741699,356.0571289 2447.2741699,354.701416 C2447.2741699,353.196167 2447.7099609,351.9829102 2448.581543,351.0615234 C2449.453125,350.1401367 2450.6193848,349.6794434 2452.0803223,349.6794434 C2452.9213867,349.6794434 2453.6408691,349.8288574 2454.2385254,350.1276855 L2454.2385254,351.7380371 C2453.5910645,351.262085 2452.871582,351.0241699 2452.0803223,351.0241699 C2451.1506348,351.0241699 2450.3937988,351.3464355 2449.8100586,351.9912109 C2449.2260742,352.6358643 2448.9343262,353.4949951 2448.9343262,354.5686035 C2448.9343262,355.6254883 2449.2094727,356.4528809 2449.7602539,357.0505371 C2450.310791,357.6481934 2451.0537109,357.9470215 2451.9890137,357.9470215 C2452.7802734,357.9470215 2453.5273438,357.6868896 2454.2302246,357.166748 Z M2464.4733887,359.0759277 L2462.2570801,359.0759277 L2458.3308105,354.6516113 L2458.2976074,354.6516113 L2458.2976074,359.0759277 L2456.6706543,359.0759277 L2456.6706543,345.4875488 L2458.2976074,345.4875488 L2458.2976074,354.1037598 L2458.3308105,354.1037598 L2462.0578613,349.8952637 L2464.1496582,349.8952637 L2459.9992676,354.3112793 Z M2475.0568848,357.017334 L2473.6540527,361.4416504 L2472.4919434,361.4416504 L2473.5129395,357.017334 Z M2495.0534668,363.4172363 L2487.4333496,363.4172363 L2487.4333496,362.3464355 L2495.0534668,362.3464355 Z M2501.6608887,351.5056152 C2501.3896484,351.3118896 2501.0161133,351.2150879 2500.5402832,351.2150879 C2499.9094238,351.2150879 2499.3891602,351.5097656 2498.9797363,352.0991211 C2498.5700684,352.6884766 2498.3654785,353.4645996 2498.3654785,354.4274902 L2498.3654785,359.0759277 L2496.7385254,359.0759277 L2496.7385254,349.8952637 L2498.3654785,349.8952637 L2498.3654785,351.7629395 L2498.3986816,351.7629395 C2498.8632813,350.4125977 2499.6657715,349.7375488 2500.8059082,349.7375488 C2501.1765137,349.7375488 2501.4616699,349.7790527 2501.6608887,349.8620605 Z M2510.8996582,354.9006348 L2504.4748535,354.9006348 C2504.5024414,355.880127 2504.770752,356.6368408 2505.2800293,357.1708984 C2505.7890625,357.704834 2506.5002441,357.9719238 2507.4133301,357.9719238 C2508.442627,357.9719238 2509.3859863,357.6425781 2510.2438965,356.9841309 L2510.2438965,358.4367676 C2509.435791,359.0067139 2508.3649902,359.291748 2507.0314941,359.291748 C2505.7033691,359.291748 2504.6669922,358.8710938 2503.9228516,358.0300293 C2503.1784668,357.1888428 2502.8063965,356.0212402 2502.8063965,354.5270996 C2502.8063965,353.12146 2503.2143555,351.9621582 2504.0307617,351.0490723 C2504.8469238,350.1359863 2505.8608398,349.6794434 2507.072998,349.6794434 C2508.2736816,349.6794434 2509.2116699,350.0654297 2509.8869629,350.8374023 C2510.5620117,351.609375 2510.8996582,352.6898193 2510.8996582,354.0788574 Z M2509.2727051,353.5974121 C2509.2670898,352.767334 2509.0705566,352.1253662 2508.6833496,351.6716309 C2508.2958984,351.2177734 2507.7507324,350.9909668 2507.0480957,350.9909668 C2506.4006348,350.9909668 2505.8400879,351.2316895 2505.3671875,351.7131348 C2504.894043,352.1945801 2504.5964355,352.8226318 2504.4748535,353.5974121 Z M2521.1179199,359.0759277 L2519.4992676,359.0759277 L2519.4992676,353.8547363 C2519.4990234,351.9676514 2518.8100586,351.0241699 2517.432373,351.0241699 C2516.7185059,351.0241699 2516.1318359,351.2897949 2515.6726074,351.8210449 C2515.2131348,352.3522949 2514.9836426,353.0246582 2514.9836426,353.8381348 L2514.9836426,359.0759277 L2513.3566895,359.0759277 L2513.3566895,349.8952637 L2514.9836426,349.8952637 L2514.9836426,351.4143066 L2515.0168457,351.4143066 C2515.7084961,350.2576904 2516.7128906,349.6794434 2518.0300293,349.6794434 C2519.0371094,349.6794434 2519.8034668,350.001709 2520.3293457,350.6464844 C2520.8549805,351.2911377 2521.1179199,352.2304688 2521.1179199,353.4645996 Z M2532.1164551,359.0759277 L2530.489502,359.0759277 L2530.489502,357.548584 L2530.4562988,357.548584 C2529.7866211,358.7105713 2528.7463379,359.291748 2527.3352051,359.291748 C2526.1730957,359.291748 2525.2487793,358.8780518 2524.5627441,358.0507813 C2523.8764648,357.2233887 2523.5334473,356.1069336 2523.5334473,354.701416 C2523.5334473,353.1850586 2523.9206543,351.9689941 2524.6955566,351.0532227 C2525.4702148,350.1373291 2526.4829102,349.6794434 2527.7336426,349.6794434 C2528.9841309,349.6794434 2529.8918457,350.1663818 2530.4562988,351.1403809 L2530.489502,351.1403809 L2530.489502,345.4875488 L2532.1164551,345.4875488 Z M2530.4978027,353.6140137 C2530.4978027,352.8779297 2530.2556152,352.2623291 2529.7714844,351.7670898 C2529.2871094,351.2717285 2528.690918,351.0241699 2527.982666,351.0241699 C2527.1193848,351.0241699 2526.4387207,351.3464355 2525.9406738,351.9912109 C2525.442627,352.6358643 2525.1936035,353.5144043 2525.1936035,354.626709 C2525.1936035,355.6503906 2525.4328613,356.4597168 2525.9116211,357.0546875 C2526.3901367,357.6495361 2527.0280762,357.9470215 2527.8249512,357.9470215 C2528.6105957,357.9470215 2529.2526855,357.6550293 2529.7507324,357.0712891 C2530.2487793,356.4874268 2530.4978027,355.7611084 2530.4978027,354.892334 Z M2542.8244629,354.9006348 L2536.3996582,354.9006348 C2536.4272461,355.880127 2536.6955566,356.6368408 2537.204834,357.1708984 C2537.7138672,357.704834 2538.4250488,357.9719238 2539.3381348,357.9719238 C2540.3674316,357.9719238 2541.310791,357.6425781 2542.1687012,356.9841309 L2542.1687012,358.4367676 C2541.3605957,359.0067139 2540.2897949,359.291748 2538.9562988,359.291748 C2537.6281738,359.291748 2536.5917969,358.8710938 2535.8476563,358.0300293 C2535.1032715,357.1888428 2534.7312012,356.0212402 2534.7312012,354.5270996 C2534.7312012,353.12146 2535.1391602,351.9621582 2535.9555664,351.0490723 C2536.7717285,350.1359863 2537.7856445,349.6794434 2538.9978027,349.6794434 C2540.1984863,349.6794434 2541.1364746,350.0654297 2541.8117676,350.8374023 C2542.4868164,351.609375 2542.8244629,352.6898193 2542.8244629,354.0788574 Z M2541.1975098,353.5974121 C2541.1918945,352.767334 2540.9953613,352.1253662 2540.6081543,351.6716309 C2540.2207031,351.2177734 2539.6755371,350.9909668 2538.9729004,350.9909668 C2538.3254395,350.9909668 2537.7648926,351.2316895 2537.2919922,351.7131348 C2536.8188477,352.1945801 2536.5212402,352.8226318 2536.3996582,353.5974121 Z M2550.2038574,351.5056152 C2549.9326172,351.3118896 2549.559082,351.2150879 2549.083252,351.2150879 C2548.4523926,351.2150879 2547.9321289,351.5097656 2547.5227051,352.0991211 C2547.1130371,352.6884766 2546.9084473,353.4645996 2546.9084473,354.4274902 L2546.9084473,359.0759277 L2545.2814941,359.0759277 L2545.2814941,349.8952637 L2546.9084473,349.8952637 L2546.9084473,351.7629395 L2546.9416504,351.7629395 C2547.40625,350.4125977 2548.2087402,349.7375488 2549.348877,349.7375488 C2549.7194824,349.7375488 2550.0046387,349.7790527 2550.2038574,349.8620605 Z M2551.4572754,347.6955566 L2553.1340332,347.6955566 C2553.543457,346.6883545 2553.8808594,345.7697754 2554.1467285,344.9396973 L2555.5412598,345.3381348 C2555.192627,346.1848145 2554.8549805,346.9705811 2554.5285645,347.6955566 L2557.848877,347.6955566 L2557.848877,360.9104004 L2556.520752,360.9104004 L2556.520752,359.6154785 L2552.7854004,359.6154785 L2552.7854004,361.0266113 L2551.4572754,361.0266113 Z M2558.0979004,351.098877 C2559.1381836,349.449707 2560.0180664,347.3967285 2560.7375488,344.9396973 L2562.1320801,345.2883301 C2561.8498535,346.1239014 2561.5620117,346.909668 2561.2687988,347.645752 L2566.614502,347.645752 C2566.4816895,353.3344727 2566.3708496,356.914917 2566.2824707,358.3869629 C2566.204834,360.1245117 2565.291748,360.9932861 2563.5432129,360.9934082 C2562.5358887,360.9932861 2561.512207,360.960083 2560.4719238,360.8937988 C2560.4055176,360.340332 2560.3168945,359.8477783 2560.2062988,359.4162598 L2560.2561035,359.4162598 C2561.362793,359.571167 2562.3754883,359.6486816 2563.2941895,359.6486816 C2564.3012695,359.6486816 2564.8435059,359.1173096 2564.9211426,358.0549316 C2565.0427246,356.4057617 2565.1313477,353.3510742 2565.1867676,348.8908691 L2560.7375488,348.8908691 C2560.2561035,349.9588623 2559.7580566,350.8996582 2559.2434082,351.7131348 C2558.9445801,351.5028076 2558.5627441,351.2980957 2558.0979004,351.098877 Z M2552.7854004,358.3703613 L2556.520752,358.3703613 L2556.520752,354.170166 L2552.7854004,354.170166 Z M2556.520752,348.9406738 L2552.7854004,348.9406738 L2552.7854004,352.9748535 L2556.520752,352.9748535 Z M2559.5588379,352.2277832 L2560.5715332,351.4807129 C2561.8000488,352.930542 2562.779541,354.1867676 2563.5100098,355.2492676 L2562.2814941,356.1125488 C2561.4956055,354.8286133 2560.5881348,353.5336914 2559.5588379,352.2277832 Z M2568.5319824,347.8117676 L2576.5007324,347.8117676 C2575.9416504,346.7492676 2575.5043945,345.9744873 2575.189209,345.4875488 L2576.4841309,344.873291 C2576.7939453,345.3491211 2577.2587891,346.1239014 2577.8786621,347.1975098 L2576.666748,347.8117676 L2584.5358887,347.8117676 L2584.5358887,349.0734863 L2574.467041,349.0734863 C2574.4282227,350.0805664 2574.3867188,350.9383545 2574.3425293,351.6467285 L2582.361084,351.6467285 C2582.2280273,354.0483398 2582.0842285,356.1346436 2581.9294434,357.9055176 C2581.8076172,359.9086914 2580.8337402,360.9104004 2579.0075684,360.9104004 C2578.1662598,360.9104004 2577.0429688,360.8660889 2575.6374512,360.7775879 C2575.5820313,360.3569336 2575.4990234,359.8477783 2575.3884277,359.2502441 C2576.7939453,359.4383545 2577.9338379,359.5324707 2578.8083496,359.5324707 C2579.826416,359.5324707 2580.3964844,358.9291992 2580.5183105,357.7229004 C2580.651123,356.4057617 2580.767334,354.7954102 2580.8669434,352.8918457 L2574.2512207,352.8918457 C2573.9411621,356.5441895 2572.2504883,359.3774414 2569.1794434,361.3918457 C2568.8806152,361.0375977 2568.5429688,360.661377 2568.166748,360.2629395 C2571.0883789,358.3371582 2572.654541,355.7583008 2572.8649902,352.5266113 C2572.9423828,351.6522217 2573.0061035,350.5012207 2573.0559082,349.0734863 L2568.5319824,349.0734863 Z M2598.5061035,355.5480957 C2599.5686035,356.9979248 2600.7141113,358.6635742 2601.942627,360.545166 C2601.4997559,360.7996826 2601.0681152,361.0541992 2600.6477051,361.3088379 C2600.3376465,360.7941895 2600.0334473,360.2961426 2599.7346191,359.8146973 C2596.104248,360.1135254 2593.2597656,360.3625488 2591.201416,360.5617676 L2590.5871582,359.1174316 C2591.2844238,358.8074951 2591.9650879,358.1600342 2592.6291504,357.1750488 C2593.3596191,356.1346436 2594.0373535,355.0389404 2594.6628418,353.8879395 L2590.3049316,353.8879395 L2590.3049316,352.692627 L2595.5178223,352.692627 L2595.5178223,349.1730957 L2591.1184082,349.1730957 L2591.1184082,347.9777832 L2595.5178223,347.9777832 L2595.5178223,344.9396973 L2596.8459473,344.9396973 L2596.8459473,347.9777832 L2601.4445801,347.9777832 L2601.4445801,349.1730957 L2596.8459473,349.1730957 L2596.8459473,352.692627 L2602.2248535,352.692627 L2602.2248535,353.8879395 L2596.3312988,353.8879395 C2595.097168,355.9188232 2593.8908691,357.6730957 2592.7121582,359.1506348 C2594.8205566,359.0510254 2596.9289551,358.9016113 2599.0373535,358.7023926 C2598.4672852,357.8114014 2597.9250488,356.9924316 2597.4104004,356.2453613 Z M2588.2131348,354.2199707 C2588.6225586,354.3969727 2589.0598145,354.5795898 2589.5246582,354.7678223 C2588.7387695,357.1252441 2588.0524902,359.2557373 2587.4660645,361.1594238 L2586.0383301,360.6779785 C2586.7687988,358.7299805 2587.4936523,356.5773926 2588.2131348,354.2199707 Z M2586.5861816,349.4553223 C2587.4162598,350.0418701 2588.3901367,350.7944336 2589.5080566,351.7131348 C2589.0983887,352.1779785 2588.7775879,352.5375977 2588.545166,352.7922363 C2587.2944336,351.6743164 2586.3647461,350.8830566 2585.7561035,350.4182129 Z M2587.2336426,345.1555176 C2588.1188965,345.8637695 2589.0708008,346.6717529 2590.0891113,347.5793457 C2589.7126465,347.9666748 2589.3862305,348.3098145 2589.1096191,348.6086426 C2588.0913086,347.6014404 2587.1838379,346.7547607 2586.3869629,346.0686035 Z M2608.1599121,357.017334 L2606.7570801,361.4416504 L2605.5949707,361.4416504 L2606.6159668,357.017334 Z M2621.2004395,346.9816895 L2626.0812988,346.9816895 C2626.3522949,346.3120117 2626.5959473,345.6258545 2626.8117676,344.9230957 L2628.1896973,345.2717285 C2627.9958496,345.8527832 2627.7883301,346.4227295 2627.5671387,346.9816895 L2637.2043457,346.9816895 L2637.2043457,348.2102051 L2627.0441895,348.2102051 C2626.385498,349.6877441 2625.6164551,351.0794678 2624.7365723,352.385498 L2624.7365723,361.1760254 L2623.4416504,361.1760254 L2623.4416504,354.1535645 C2622.8439941,354.9006348 2622.2075195,355.614502 2621.5324707,356.295166 C2621.3000488,355.9077148 2621.0341797,355.5092773 2620.7355957,355.0998535 C2622.7719727,352.9858398 2624.3740234,350.6893311 2625.541748,348.2102051 L2621.2004395,348.2102051 Z M2625.317627,358.7854004 L2630.513916,358.7854004 L2630.513916,353.8215332 L2626.1975098,353.8215332 L2626.1975098,352.6262207 L2630.513916,352.6262207 L2630.513916,349.2893066 L2631.8752441,349.2893066 L2631.8752441,352.6262207 L2636.2580566,352.6262207 L2636.2580566,353.8215332 L2631.8752441,353.8215332 L2631.8752441,358.7854004 L2637.2043457,358.7854004 L2637.2043457,359.9475098 L2625.317627,359.9475098 Z M2638.7067871,346.9816895 L2643.5876465,346.9816895 C2643.8586426,346.3120117 2644.1022949,345.6258545 2644.3181152,344.9230957 L2645.6960449,345.2717285 C2645.5021973,345.8527832 2645.2946777,346.4227295 2645.0734863,346.9816895 L2654.7106934,346.9816895 L2654.7106934,348.2102051 L2644.5505371,348.2102051 C2643.8918457,349.6877441 2643.1228027,351.0794678 2642.2429199,352.385498 L2642.2429199,361.1760254 L2640.947998,361.1760254 L2640.947998,354.1535645 C2640.3503418,354.9006348 2639.7138672,355.614502 2639.0388184,356.295166 C2638.8063965,355.9077148 2638.5405273,355.5092773 2638.2419434,355.0998535 C2640.2783203,352.9858398 2641.8803711,350.6893311 2643.0480957,348.2102051 L2638.7067871,348.2102051 Z M2642.8239746,358.7854004 L2648.0202637,358.7854004 L2648.0202637,353.8215332 L2643.7038574,353.8215332 L2643.7038574,352.6262207 L2648.0202637,352.6262207 L2648.0202637,349.2893066 L2649.3815918,349.2893066 L2649.3815918,352.6262207 L2653.7644043,352.6262207 L2653.7644043,353.8215332 L2649.3815918,353.8215332 L2649.3815918,358.7854004 L2654.7106934,358.7854004 L2654.7106934,359.9475098 L2642.8239746,359.9475098 Z M2655.8146973,351.895752 L2672.3166504,351.895752 L2672.3166504,353.3566895 L2655.8146973,353.3566895 Z M2673.5534668,346.317627 L2689.557373,346.317627 L2689.557373,347.5959473 L2680.0529785,347.5959473 C2680.0085449,348.8299561 2679.9504395,349.9865723 2679.8786621,351.0656738 L2687.5817871,351.0656738 C2687.4709473,353.3234863 2687.34375,355.4650879 2687.1999512,357.4904785 C2687.1000977,358.7189941 2686.8178711,359.6043701 2686.3532715,360.1467285 C2685.9104004,360.6446533 2685.1081543,360.899292 2683.9460449,360.9104004 C2683.3371582,360.9324951 2682.3078613,360.8881836 2680.8581543,360.7775879 C2680.8027344,360.3569336 2680.7197266,359.8477783 2680.6091309,359.2502441 C2682.0146484,359.4383545 2683.0881348,359.5324707 2683.829834,359.5324707 C2685.013916,359.6209717 2685.6669922,358.8739014 2685.7888184,357.2912598 C2685.9216309,355.7416992 2686.0212402,354.0871582 2686.0876465,352.3273926 L2679.7790527,352.3273926 C2679.3640137,356.3781738 2677.5488281,359.3885498 2674.3337402,361.3586426 C2674.0791016,361.0155029 2673.7524414,360.6225586 2673.354248,360.1799316 C2676.4641113,358.2873535 2678.1298828,355.4650879 2678.3513184,351.7131348 C2678.4562988,350.5012207 2678.5256348,349.1287842 2678.5588379,347.5959473 L2673.5534668,347.5959473 Z M2700.4396973,351.630127 L2702.083252,351.630127 C2701.5739746,352.1281738 2701.0483398,352.5985107 2700.5061035,353.0412598 L2706.5490723,353.0412598 L2706.5490723,354.2531738 C2702.9851074,358.1157227 2698.2314453,360.5119629 2692.2883301,361.4416504 C2692.0891113,361.0430908 2691.8400879,360.6280518 2691.5412598,360.1965332 C2694.2416992,359.809082 2696.6599121,359.1505127 2698.7961426,358.2209473 C2698.4750977,357.800293 2698.0158691,357.2856445 2697.4182129,356.677002 L2698.4143066,355.9465332 C2698.9787598,356.5330811 2699.4934082,357.1141357 2699.958252,357.6896973 C2701.817627,356.737793 2703.416748,355.5756836 2704.7561035,354.2033691 L2699.0617676,354.2033691 C2697.1137695,355.6643066 2695.060791,356.8596191 2692.9025879,357.7893066 C2692.7033691,357.4682617 2692.4375,357.092041 2692.1057129,356.6604004 C2695.182373,355.4207764 2697.9604492,353.7440186 2700.4396973,351.630127 Z M2697.9328613,344.9562988 L2699.6096191,344.9562988 C2699.045166,345.5649414 2698.4694824,346.1350098 2697.8830566,346.6662598 L2705.7023926,346.6662598 L2705.7023926,347.795166 C2701.8950195,350.8608398 2697.2741699,353.1463623 2691.8400879,354.6516113 C2691.607666,354.2088623 2691.3530273,353.8215332 2691.076416,353.489502 C2693.3562012,352.8918457 2695.4038086,352.2111816 2697.2189941,351.4475098 C2696.8205566,351.0047607 2696.2946777,350.4624023 2695.6418457,349.8205566 L2696.5715332,349.0900879 C2697.2243652,349.7209473 2697.8276367,350.3352051 2698.3811035,350.9328613 C2700.4064941,350.0141602 2702.1828613,348.9793701 2703.7102051,347.8283691 L2696.5549316,347.8283691 C2695.4038086,348.8133545 2694.0368652,349.7541504 2692.4543457,350.6506348 C2692.2106934,350.3186035 2691.9064941,349.9699707 2691.5412598,349.6047363 C2694.0756836,348.2543945 2696.2062988,346.7049561 2697.9328613,344.9562988 Z M2714.3435059,351.1652832 L2724.8522949,351.1652832 L2724.8522949,352.4104004 L2721.6315918,352.4104004 L2721.6315918,358.9016113 C2721.6315918,360.2739258 2720.9396973,360.9602051 2719.5563965,360.9602051 C2718.626709,360.9602051 2717.6804199,360.9545898 2716.7175293,360.9436035 C2716.651123,360.5008545 2716.5681152,360.0028076 2716.4685059,359.4494629 C2717.3317871,359.5379639 2718.2004395,359.5822754 2719.0749512,359.5822754 C2719.838623,359.5822754 2720.220459,359.2059326 2720.220459,358.4533691 L2720.220459,352.4104004 L2714.3435059,352.4104004 Z M2708.3337402,354.8840332 C2710.0490723,353.4783936 2711.6096191,351.5028076 2713.0153809,348.9572754 L2714.1774902,349.6711426 C2713.6074219,350.6561279 2713.0041504,351.5775146 2712.3679199,352.4353027 L2712.3679199,361.2258301 L2710.9899902,361.2258301 L2710.9899902,354.1452637 C2710.3259277,354.8978271 2709.6340332,355.5922852 2708.9147949,356.2287598 C2708.7375488,355.763916 2708.5439453,355.3156738 2708.3337402,354.8840332 Z M2715.3063965,346.1516113 L2723.9226074,346.1516113 L2723.9226074,347.3967285 L2715.3063965,347.3967285 Z M2708.416748,349.6213379 C2710.1762695,348.2600098 2711.5930176,346.6772461 2712.666748,344.873291 L2713.8620605,345.6037598 C2712.578125,347.5737305 2710.984375,349.3391113 2709.0808105,350.8996582 C2708.8815918,350.4790039 2708.6601563,350.0529785 2708.416748,349.6213379 Z M2726.9689941,348.5256348 L2733.3605957,348.5256348 L2733.3605957,344.9064941 L2734.7883301,344.9064941 L2734.7883301,348.5256348 L2741.2463379,348.5256348 L2741.2463379,356.0959473 L2739.8850098,356.0959473 L2739.8850098,355.1994629 L2734.7883301,355.1994629 L2734.7883301,361.3752441 L2733.3605957,361.3752441 L2733.3605957,355.1994629 L2728.3303223,355.1994629 L2728.3303223,356.0959473 L2726.9689941,356.0959473 Z M2739.8850098,349.7541504 L2734.7883301,349.7541504 L2734.7883301,353.9709473 L2739.8850098,353.9709473 Z M2728.3303223,353.9709473 L2733.3605957,353.9709473 L2733.3605957,349.7541504 L2728.3303223,349.7541504 Z M2759.8151855,359.6486816 C2759.4055176,360.1688232 2759.0236816,360.6668701 2758.6696777,361.1428223 C2755.6425781,360.102417 2753.2851563,358.8848877 2751.5974121,357.4904785 C2750.1032715,358.7189941 2747.6738281,359.9584961 2744.3093262,361.2092285 C2744.0546875,360.7996826 2743.7502441,360.3625488 2743.3962402,359.8977051 C2746.5449219,358.9846191 2748.9328613,357.8612061 2750.5598145,356.5275879 C2748.5012207,354.3914795 2747.0871582,351.3588867 2746.3181152,347.4299316 L2744.807373,347.4299316 L2744.807373,346.201416 L2757.1257324,346.201416 L2757.1257324,347.4631348 C2756.3730469,351.1320801 2754.8762207,354.1424561 2752.6350098,356.4943848 C2754.3117676,357.7893066 2756.7050781,358.8406982 2759.8151855,359.6486816 Z M2751.5974121,355.5563965 C2753.6835938,353.4091797 2755.0339355,350.7004395 2755.6481934,347.4299316 L2747.7043457,347.4299316 C2748.3850098,350.8774414 2749.6826172,353.5863037 2751.5974121,355.5563965 Z M2764.5549316,354.4191895 C2766.5249023,353.2791748 2767.9082031,352.0838623 2768.7053223,350.833252 L2765.302002,350.833252 L2765.302002,349.6711426 L2769.2697754,349.6711426 C2769.5686035,348.8963623 2769.7844238,348.0496826 2769.9172363,347.1311035 L2766.1652832,347.1311035 L2766.1652832,345.9689941 L2776.1262207,345.9689941 L2776.1262207,347.1311035 L2771.2121582,347.1311035 C2771.0847168,348.0939941 2770.9020996,348.9406738 2770.6643066,349.6711426 L2776.9230957,349.6711426 L2776.9230957,350.833252 L2772.9719238,350.833252 C2774.0620117,352.3660889 2775.5449219,353.4174805 2777.4211426,353.9875488 C2777.0446777,354.4080811 2776.7126465,354.8342285 2776.4250488,355.2658691 C2774.2446289,354.2033691 2772.623291,352.7258301 2771.560791,350.833252 L2770.1911621,350.833252 C2769.3388672,352.5321045 2767.753418,354.081543 2765.4348145,355.4816895 C2765.2023926,355.1717529 2764.9089355,354.817627 2764.5549316,354.4191895 Z M2769.8342285,353.0246582 L2771.0959473,353.0246582 L2771.0959473,359.2336426 C2771.0959473,360.4620361 2770.4484863,361.076416 2769.1535645,361.076416 C2768.4892578,361.076416 2767.8916016,361.0708008 2767.3605957,361.0598145 C2767.2939453,360.6502686 2767.2055664,360.2020264 2767.0949707,359.7150879 C2767.6594238,359.8035889 2768.2182617,359.8479004 2768.7717285,359.8479004 C2769.4799805,359.8479004 2769.8342285,359.5102539 2769.8342285,358.8352051 Z M2762.8117676,354.2697754 C2763.2434082,354.435791 2763.6860352,354.5961914 2764.1398926,354.7512207 C2763.5754395,357.0975342 2763.0717773,359.2336426 2762.6291504,361.1594238 L2761.201416,360.7277832 C2761.7878418,358.8352051 2762.324707,356.6824951 2762.8117676,354.2697754 Z M2773.685791,355.1496582 L2774.7316895,354.6516113 C2775.5505371,355.9465332 2776.2976074,357.269043 2776.9729004,358.6193848 L2775.8273926,359.1838379 C2775.2849121,358.0438232 2774.5710449,356.6990967 2773.685791,355.1496582 Z M2767.3439941,354.817627 L2768.5061035,355.2990723 C2767.8972168,356.826416 2767.2387695,358.1711426 2766.5305176,359.333252 C2766.1430664,359.1340332 2765.7502441,358.9569092 2765.3518066,358.802002 C2766.159668,357.5955811 2766.8237305,356.2674561 2767.3439941,354.817627 Z M2771.5773926,355.5148926 L2772.6730957,355.1164551 C2773.1599121,356.355957 2773.6247559,357.711792 2774.067627,359.1838379 L2772.8225098,359.598877 C2772.4682617,358.2043457 2772.0532227,356.8430176 2771.5773926,355.5148926 Z M2761.6330566,349.4719238 C2762.4296875,350.0252686 2763.4094238,350.777832 2764.5715332,351.7297363 C2764.1618652,352.1945801 2763.8354492,352.5541992 2763.592041,352.8088379 C2762.4299316,351.7463379 2761.5,350.9494629 2760.8029785,350.4182129 Z M2762.2805176,345.1555176 C2763.2653809,345.9301758 2764.2229004,346.7381592 2765.1525879,347.5793457 C2764.776123,347.9555664 2764.4440918,348.2932129 2764.1564941,348.592041 C2763.1159668,347.5627441 2762.2084961,346.7215576 2761.4338379,346.0686035 Z M2787.8220215,347.1643066 L2794.1306152,347.1643066 L2794.1306152,360.8439941 L2792.8190918,360.8439941 L2792.8190918,359.1672363 L2789.1335449,359.1672363 L2789.1335449,360.8439941 L2787.8220215,360.8439941 Z M2778.7077637,347.9777832 L2781.0236816,347.9777832 C2781.034668,347.086792 2781.0373535,346.0961914 2781.0319824,345.0061035 L2782.3435059,345.0061035 C2782.3435059,346.1072998 2782.3378906,347.0979004 2782.3269043,347.9777832 L2786.1950684,347.9777832 C2786.1396484,352.2277832 2786.067627,355.5646973 2785.979248,357.9885254 C2785.9348145,359.9805908 2785.1821289,360.9379883 2783.7214355,360.8605957 C2783.2897949,360.8605957 2782.6533203,360.8439941 2781.8122559,360.810791 C2781.7346191,360.3459473 2781.6462402,359.8643799 2781.5466309,359.3664551 C2782.3212891,359.4660645 2782.9521484,359.5158691 2783.439209,359.5158691 C2784.1806641,359.5379639 2784.5847168,359.012207 2784.651123,357.9387207 C2784.7727051,355.3156738 2784.8447266,352.4158936 2784.8669434,349.239502 L2782.3103027,349.239502 C2782.2990723,350.0861816 2782.2824707,350.805542 2782.260498,351.3977051 C2782.2160645,355.7250977 2781.1757813,359.0565186 2779.1394043,361.3918457 C2778.8625488,361.0487061 2778.5361328,360.6779785 2778.1599121,360.279541 C2779.9970703,358.2651367 2780.932373,355.2602539 2780.9655762,351.2648926 C2780.9875488,350.6838379 2781.0041504,350.008667 2781.0153809,349.239502 L2778.7077637,349.239502 Z M2792.8190918,348.3928223 L2789.1335449,348.3928223 L2789.1335449,357.9719238 L2792.8190918,357.9719238 Z M2803.6682129,351.1320801 C2805.560791,349.9699707 2807.3205566,348.7801514 2808.9475098,347.5627441 L2796.4797363,347.5627441 L2796.4797363,346.1848145 L2811.2385254,346.1848145 L2811.2385254,347.8283691 C2809.2573242,349.1896973 2807.2319336,350.5178223 2805.1623535,351.8127441 L2805.1623535,357.9221191 C2805.1623535,359.0177002 2804.9519043,359.7758789 2804.5314941,360.1965332 C2804.1218262,360.6391602 2803.3637695,360.8660889 2802.2570801,360.8771973 C2801.6481934,360.8771973 2800.7463379,360.8605957 2799.5510254,360.8273926 C2799.4846191,360.2739258 2799.3959961,359.7371826 2799.2854004,359.217041 C2800.3920898,359.3387451 2801.3439941,359.4051514 2802.1408691,359.4162598 C2803.1589355,359.4272461 2803.6679688,358.9237061 2803.6682129,357.9055176 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip33)\" />\n<clipPath id=\"clip34\"><path d=\"M2384,248 L2842,248 L2842,391 L2384,391 L2384,248 Z\" /></clipPath>\n<path d=\"M2394.1252441,386.4172363 L2386.505127,386.4172363 L2386.505127,385.3464355 L2394.1252441,385.3464355 Z M2401.9777832,386.4172363 L2394.357666,386.4172363 L2394.357666,385.3464355 L2401.9777832,385.3464355 Z M2405.2897949,380.7810059 L2405.2897949,386.3010254 L2403.6628418,386.3010254 L2403.6628418,372.8952637 L2405.2897949,372.8952637 L2405.2897949,374.4807129 L2405.322998,374.4807129 C2406.0422363,373.2797852 2407.09375,372.6794434 2408.4772949,372.6794434 C2409.6503906,372.6794434 2410.5703125,373.090332 2411.2373047,373.9121094 C2411.9040527,374.7338867 2412.2375488,375.8364258 2412.2375488,377.2199707 C2412.2375488,378.7473145 2411.8598633,379.9743652 2411.1044922,380.9013672 C2410.3491211,381.8282471 2409.3322754,382.291748 2408.0539551,382.291748 C2406.8752441,382.291748 2405.9648438,381.7880859 2405.322998,380.7810059 Z M2405.2814941,378.2907715 C2405.2814941,379.0378418 2405.5222168,379.6672363 2406.0036621,380.1791992 C2406.4851074,380.69104 2407.0881348,380.9470215 2407.8132324,380.9470215 C2408.6762695,380.9470215 2409.3515625,380.6149902 2409.838623,379.9509277 C2410.3254395,379.2868652 2410.5690918,378.3681641 2410.5690918,377.1950684 C2410.5690918,376.2044678 2410.342041,375.4283447 2409.8884277,374.8666992 C2409.4345703,374.3049316 2408.8146973,374.0241699 2408.0290527,374.0241699 C2407.2265625,374.0241699 2406.5681152,374.309082 2406.0534668,374.8791504 C2405.5388184,375.4490967 2405.2814941,376.1795654 2405.2814941,377.0705566 Z M2415.0598145,373.5344238 C2415.9729004,372.9643555 2417.0270996,372.6794434 2418.2224121,372.6794434 C2420.435791,372.6794434 2421.5427246,373.8415527 2421.5427246,376.1657715 L2421.5427246,382.0759277 L2419.932373,382.0759277 L2419.932373,380.6564941 L2419.8908691,380.6564941 C2419.2543945,381.746582 2418.3164063,382.291748 2417.0769043,382.291748 C2416.185791,382.291748 2415.4775391,382.0509033 2414.9519043,381.5695801 C2414.4260254,381.0881348 2414.1633301,380.4378662 2414.1633301,379.6188965 C2414.1633301,377.9033203 2415.1787109,376.904541 2417.2097168,376.6223145 L2419.932373,376.2404785 C2419.932373,374.7407227 2419.3125,373.9909668 2418.072998,373.9909668 C2416.9716797,373.9909668 2415.9672852,374.3616943 2415.0598145,375.1032715 Z M2417.7824707,377.7595215 C2417.0297852,377.8591309 2416.5109863,378.0472412 2416.2260742,378.3239746 C2415.940918,378.6005859 2415.798584,378.9880371 2415.798584,379.486084 C2415.798584,379.9232178 2415.9533691,380.2801514 2416.2634277,380.5568848 C2416.5732422,380.8334961 2416.982666,380.9719238 2417.4919434,380.9719238 C2418.2001953,380.9719238 2418.7839355,380.7229004 2419.2434082,380.2248535 C2419.7026367,379.7268066 2419.932373,379.1014404 2419.932373,378.348877 L2419.932373,377.4689941 Z M2428.9304199,381.9846191 C2428.5761719,382.1782227 2428.0974121,382.2751465 2427.4943848,382.2751465 C2425.8508301,382.2751465 2425.0290527,381.3647461 2425.0290527,379.5441895 L2425.0290527,374.2399902 L2423.4519043,374.2399902 L2423.4519043,372.8952637 L2425.0290527,372.8952637 L2425.0290527,370.6872559 L2426.6477051,370.1726074 L2426.6477051,372.8952637 L2428.9304199,372.8952637 L2428.9304199,374.2399902 L2426.6477051,374.2399902 L2426.6477051,379.2536621 C2426.6477051,379.8568115 2426.75,380.2884521 2426.954834,380.548584 C2427.1594238,380.8085938 2427.4997559,380.9387207 2427.9758301,380.9387207 C2428.3410645,380.9387207 2428.6591797,380.8363037 2428.9304199,380.6315918 Z M2437.388916,381.6608887 C2436.6860352,382.0814209 2435.8393555,382.291748 2434.848877,382.291748 C2433.5205078,382.291748 2432.4526367,381.8656006 2431.6447754,381.0134277 C2430.8366699,380.1611328 2430.4328613,379.0571289 2430.4328613,377.701416 C2430.4328613,376.196167 2430.8686523,374.9829102 2431.7402344,374.0615234 C2432.6118164,373.1401367 2433.7780762,372.6794434 2435.2390137,372.6794434 C2436.0800781,372.6794434 2436.7995605,372.8288574 2437.3972168,373.1276855 L2437.3972168,374.7380371 C2436.7497559,374.262085 2436.0302734,374.0241699 2435.2390137,374.0241699 C2434.3093262,374.0241699 2433.5524902,374.3464355 2432.96875,374.9912109 C2432.3847656,375.6358643 2432.0930176,376.4949951 2432.0930176,377.5686035 C2432.0930176,378.6254883 2432.3681641,379.4528809 2432.9189453,380.0505371 C2433.4694824,380.6481934 2434.2124023,380.9470215 2435.1477051,380.9470215 C2435.9389648,380.9470215 2436.6860352,380.6868896 2437.388916,380.166748 Z M2447.5822754,382.0759277 L2445.963623,382.0759277 L2445.963623,376.7966309 C2445.963623,374.9482422 2445.2773438,374.0241699 2443.9050293,374.0241699 C2443.2021484,374.0241699 2442.6184082,374.2939453 2442.1535645,374.8334961 C2441.6887207,375.3730469 2441.4562988,376.0522461 2441.4562988,376.8713379 L2441.4562988,382.0759277 L2439.8293457,382.0759277 L2439.8293457,368.4875488 L2441.4562988,368.4875488 L2441.4562988,374.4060059 L2441.489502,374.4060059 C2442.1921387,373.2548828 2443.1911621,372.6794434 2444.486084,372.6794434 C2446.5500488,372.6794434 2447.5822754,373.9272461 2447.5822754,376.4230957 Z M2456.779541,386.4172363 L2449.1594238,386.4172363 L2449.1594238,385.3464355 L2456.779541,385.3464355 Z M2464.6320801,386.4172363 L2457.0119629,386.4172363 L2457.0119629,385.3464355 L2464.6320801,385.3464355 Z M2473.5305176,369.9816895 L2480.8684082,369.9816895 L2480.8684082,383.8439941 L2479.5402832,383.8439941 L2479.5402832,382.2336426 L2474.8586426,382.2336426 L2474.8586426,383.8439941 L2473.5305176,383.8439941 Z M2479.5402832,371.2102051 L2474.8586426,371.2102051 L2474.8586426,381.0383301 L2479.5402832,381.0383301 Z M2465.0637207,379.6936035 C2466.3251953,378.0223389 2467.3269043,376.1629639 2468.0686035,374.1154785 L2465.1633301,374.1154785 L2465.1633301,372.9865723 L2468.3342285,372.9865723 L2468.3342285,370.3635254 C2467.4709473,370.4963379 2466.5964355,370.618042 2465.7111816,370.7287598 C2465.6115723,370.3635254 2465.4897461,369.9816895 2465.3459473,369.583252 C2467.6479492,369.3286133 2469.8781738,368.9523926 2472.036377,368.4543457 L2472.4182129,369.6164551 C2471.4995117,369.8045654 2470.5588379,369.9816895 2469.5959473,370.1477051 L2469.5959473,372.9865723 L2472.7004395,372.9865723 L2472.7004395,374.1154785 L2469.5959473,374.1154785 L2469.5959473,376.2570801 L2470.1936035,375.6594238 C2471.0678711,376.4119873 2471.9255371,377.2088623 2472.7668457,378.0500488 L2471.8205566,379.0129395 C2471.1564941,378.2492676 2470.4147949,377.4689941 2469.5959473,376.6721191 L2469.5959473,384.3918457 L2468.3342285,384.3918457 L2468.3342285,376.4230957 C2467.6811523,378.0610352 2466.8012695,379.6271973 2465.6945801,381.1213379 C2465.517334,380.6896973 2465.3071289,380.2137451 2465.0637207,379.6936035 Z M2487.9489746,383.9519043 L2486.9777832,383.9519043 L2486.9777832,382.0759277 C2485.7160645,382.0759277 2484.670166,381.8157959 2483.8400879,381.2956543 L2483.8400879,379.6271973 C2484.670166,380.3078613 2485.7160645,380.6730957 2486.9777832,380.7229004 L2486.9777832,376.2819824 C2485.644043,375.6566162 2484.7780762,375.0727539 2484.3796387,374.5305176 C2483.9812012,373.9881592 2483.7819824,373.3461914 2483.7819824,372.6047363 C2483.7819824,371.7414551 2484.0793457,370.9902344 2484.6743164,370.3510742 C2485.269043,369.7119141 2486.0368652,369.3286133 2486.9777832,369.201416 L2486.9777832,367.5827637 L2487.9489746,367.5827637 L2487.9489746,369.1682129 C2489.1606445,369.2124023 2489.9853516,369.3840332 2490.4226074,369.6828613 L2490.4226074,371.3098145 C2489.7861328,370.8227539 2488.9614258,370.5599365 2487.9489746,370.5212402 L2487.9489746,375.1032715 C2489.1994629,375.6732178 2490.0600586,376.2418213 2490.5305176,376.809082 C2491.0007324,377.3762207 2491.236084,378.0140381 2491.236084,378.7224121 C2491.236084,379.6132813 2490.9399414,380.3452148 2490.3479004,380.9179688 C2489.7556152,381.4907227 2488.9560547,381.8518066 2487.9489746,382.0012207 Z M2486.9777832,370.5710449 C2485.9152832,370.8034668 2485.3840332,371.4204102 2485.3840332,372.4221191 C2485.3840332,372.9035645 2485.4973145,373.302002 2485.7243652,373.6174316 C2485.9511719,373.9328613 2486.3688965,374.2592773 2486.9777832,374.5969238 Z M2487.9489746,380.6564941 C2489.0722656,380.4129639 2489.6340332,379.8125 2489.6340332,378.8552246 C2489.6340332,378.0527344 2489.0722656,377.3527832 2487.9489746,376.755127 Z M2507.3063965,382.0759277 L2505.6794434,382.0759277 L2505.6794434,376.8049316 C2505.6794434,375.8088379 2505.5244141,375.0963135 2505.2145996,374.6674805 C2504.904541,374.2385254 2504.3955078,374.0241699 2503.6872559,374.0241699 C2503.0895996,374.0241699 2502.5776367,374.3035889 2502.1516113,374.8625488 C2501.7253418,375.4213867 2501.5124512,376.0827637 2501.5124512,376.8464355 L2501.5124512,382.0759277 L2499.885498,382.0759277 L2499.885498,376.638916 C2499.8852539,374.895752 2499.2128906,374.0241699 2497.8684082,374.0241699 C2497.2485352,374.0241699 2496.7353516,374.2897949 2496.3286133,374.8210449 C2495.921875,375.3522949 2495.7185059,376.0301514 2495.7185059,376.8547363 L2495.7185059,382.0759277 L2494.0915527,382.0759277 L2494.0915527,372.8952637 L2495.7185059,372.8952637 L2495.7185059,374.3479004 L2495.751709,374.3479004 C2496.404541,373.2355957 2497.3591309,372.6794434 2498.6154785,372.6794434 C2499.2294922,372.6794434 2499.7719727,372.8481445 2500.2424316,373.185791 C2500.7126465,373.5233154 2501.0393066,373.9798584 2501.2219238,374.5554199 C2501.9025879,373.3046875 2502.9206543,372.6794434 2504.2766113,372.6794434 C2506.2963867,372.6794434 2507.3061523,373.9245605 2507.3063965,376.4147949 Z M2509.8879395,377.5852051 C2509.8879395,376.0688477 2510.3112793,374.8721924 2511.157959,373.9951172 C2512.0046387,373.1179199 2513.152832,372.6794434 2514.6027832,372.6794434 C2515.9804688,372.6794434 2517.0610352,373.1013184 2517.8442383,373.9453125 C2518.6271973,374.7891846 2519.0187988,375.9554443 2519.0187988,377.4440918 C2519.0187988,378.8939209 2518.6008301,380.0643311 2517.7653809,380.9553223 C2516.9296875,381.8461914 2515.809082,382.291748 2514.4035645,382.291748 C2513.0310059,382.291748 2511.9353027,381.8599854 2511.1164551,380.9968262 C2510.2973633,380.1335449 2509.8879395,378.9963379 2509.8879395,377.5852051 Z M2511.5480957,377.5354004 C2511.5480957,378.5922852 2511.8149414,379.4251709 2512.3491211,380.0339355 C2512.8830566,380.6425781 2513.6010742,380.9470215 2514.5031738,380.9470215 C2515.4326172,380.9470215 2516.1411133,380.6495361 2516.6281738,380.0546875 C2517.1149902,379.4597168 2517.3586426,378.6062012 2517.3586426,377.4938965 C2517.3586426,376.3759766 2517.1149902,375.5183105 2516.6281738,374.9206543 C2516.1411133,374.322998 2515.4326172,374.0241699 2514.5031738,374.0241699 C2513.5900879,374.0241699 2512.8691406,374.336792 2512.3408203,374.9621582 C2511.8122559,375.5874023 2511.5480957,376.4451904 2511.5480957,377.5354004 Z M2529.2121582,382.0759277 L2527.5769043,382.0759277 L2527.5769043,380.6315918 L2527.5437012,380.6315918 C2526.9294434,381.7382813 2525.9858398,382.291748 2524.7131348,382.291748 C2522.5383301,382.291748 2521.4509277,380.9912109 2521.4509277,378.3903809 L2521.4509277,372.8952637 L2523.0612793,372.8952637 L2523.0612793,378.1496582 C2523.0612793,380.0145264 2523.7751465,380.9470215 2525.2028809,380.9470215 C2525.9111328,380.9470215 2526.4838867,380.6855469 2526.9211426,380.1625977 C2527.3581543,379.6396484 2527.5766602,378.9797363 2527.5769043,378.1828613 L2527.5769043,372.8952637 L2529.2121582,372.8952637 Z M2540.185791,382.0759277 L2538.5671387,382.0759277 L2538.5671387,376.8547363 C2538.5668945,374.9676514 2537.8779297,374.0241699 2536.5002441,374.0241699 C2535.786377,374.0241699 2535.199707,374.2897949 2534.7404785,374.8210449 C2534.2810059,375.3522949 2534.0515137,376.0246582 2534.0515137,376.8381348 L2534.0515137,382.0759277 L2532.4245605,382.0759277 L2532.4245605,372.8952637 L2534.0515137,372.8952637 L2534.0515137,374.4143066 L2534.0847168,374.4143066 C2534.7763672,373.2576904 2535.7807617,372.6794434 2537.0979004,372.6794434 C2538.1049805,372.6794434 2538.8713379,373.001709 2539.3972168,373.6464844 C2539.9228516,374.2911377 2540.185791,375.2304688 2540.185791,376.4645996 Z M2547.623291,381.9846191 C2547.269043,382.1782227 2546.7902832,382.2751465 2546.1872559,382.2751465 C2544.5437012,382.2751465 2543.7219238,381.3647461 2543.7219238,379.5441895 L2543.7219238,374.2399902 L2542.1447754,374.2399902 L2542.1447754,372.8952637 L2543.7219238,372.8952637 L2543.7219238,370.6872559 L2545.3405762,370.1726074 L2545.3405762,372.8952637 L2547.623291,372.8952637 L2547.623291,374.2399902 L2545.3405762,374.2399902 L2545.3405762,379.2536621 C2545.3405762,379.8568115 2545.4428711,380.2884521 2545.6477051,380.548584 C2545.8522949,380.8085938 2546.192627,380.9387207 2546.6687012,380.9387207 C2547.0339355,380.9387207 2547.3520508,380.8363037 2547.623291,380.6315918 Z M2548.802002,370.8117676 L2556.770752,370.8117676 C2556.2116699,369.7492676 2555.7744141,368.9744873 2555.4592285,368.4875488 L2556.7541504,367.873291 C2557.0639648,368.3491211 2557.5288086,369.1239014 2558.1486816,370.1975098 L2556.9367676,370.8117676 L2564.8059082,370.8117676 L2564.8059082,372.0734863 L2554.7370605,372.0734863 C2554.6982422,373.0805664 2554.6567383,373.9383545 2554.6125488,374.6467285 L2562.6311035,374.6467285 C2562.4980469,377.0483398 2562.354248,379.1346436 2562.1994629,380.9055176 C2562.0776367,382.9086914 2561.1037598,383.9104004 2559.2775879,383.9104004 C2558.4362793,383.9104004 2557.3129883,383.8660889 2555.9074707,383.7775879 C2555.8520508,383.3569336 2555.769043,382.8477783 2555.6584473,382.2502441 C2557.0639648,382.4383545 2558.2038574,382.5324707 2559.0783691,382.5324707 C2560.0964355,382.5324707 2560.6665039,381.9291992 2560.7883301,380.7229004 C2560.9211426,379.4057617 2561.0373535,377.7954102 2561.1369629,375.8918457 L2554.5212402,375.8918457 C2554.2111816,379.5441895 2552.5205078,382.3774414 2549.4494629,384.3918457 C2549.1506348,384.0375977 2548.8129883,383.661377 2548.4367676,383.2629395 C2551.3583984,381.3371582 2552.9245605,378.7583008 2553.1350098,375.5266113 C2553.2124023,374.6522217 2553.276123,373.5012207 2553.3259277,372.0734863 L2548.802002,372.0734863 Z M2578.776123,378.5480957 C2579.838623,379.9979248 2580.9841309,381.6635742 2582.2126465,383.545166 C2581.7697754,383.7996826 2581.3381348,384.0541992 2580.9177246,384.3088379 C2580.607666,383.7941895 2580.3034668,383.2961426 2580.0046387,382.8146973 C2576.3742676,383.1135254 2573.5297852,383.3625488 2571.4714355,383.5617676 L2570.8571777,382.1174316 C2571.5544434,381.8074951 2572.2351074,381.1600342 2572.8991699,380.1750488 C2573.6296387,379.1346436 2574.307373,378.0389404 2574.9328613,376.8879395 L2570.5749512,376.8879395 L2570.5749512,375.692627 L2575.7878418,375.692627 L2575.7878418,372.1730957 L2571.3884277,372.1730957 L2571.3884277,370.9777832 L2575.7878418,370.9777832 L2575.7878418,367.9396973 L2577.1159668,367.9396973 L2577.1159668,370.9777832 L2581.7145996,370.9777832 L2581.7145996,372.1730957 L2577.1159668,372.1730957 L2577.1159668,375.692627 L2582.494873,375.692627 L2582.494873,376.8879395 L2576.6013184,376.8879395 C2575.3671875,378.9188232 2574.1608887,380.6730957 2572.9821777,382.1506348 C2575.0905762,382.0510254 2577.1989746,381.9016113 2579.307373,381.7023926 C2578.7373047,380.8114014 2578.1950684,379.9924316 2577.6804199,379.2453613 Z M2568.4831543,377.2199707 C2568.8925781,377.3969727 2569.329834,377.5795898 2569.7946777,377.7678223 C2569.0087891,380.1252441 2568.3225098,382.2557373 2567.736084,384.1594238 L2566.3083496,383.6779785 C2567.0388184,381.7299805 2567.7636719,379.5773926 2568.4831543,377.2199707 Z M2566.8562012,372.4553223 C2567.6862793,373.0418701 2568.6601563,373.7944336 2569.7780762,374.7131348 C2569.3684082,375.1779785 2569.0476074,375.5375977 2568.8151855,375.7922363 C2567.5644531,374.6743164 2566.6347656,373.8830566 2566.026123,373.4182129 Z M2567.5036621,368.1555176 C2568.388916,368.8637695 2569.3408203,369.6717529 2570.3591309,370.5793457 C2569.982666,370.9666748 2569.65625,371.3098145 2569.3796387,371.6086426 C2568.3613281,370.6014404 2567.4538574,369.7547607 2566.6569824,369.0686035 Z\" style=\"fill:rgb(0,64,128);stroke:none\" clip-path=\"url(#clip34)\" />\n<clipPath id=\"clip35\"><path d=\"M747,548 L1059,548 L1059,592 L747,592 L747,548 Z\" /></clipPath>\n<path d=\"M757,550 C752.5817261,550 749,553.581665 749,558 L749,581 C749,585.418335 752.5817261,589 757,589 L1048,589 C1052.4182129,589 1056,585.418335 1056,581 L1056,558 C1056,553.581665 1052.4182129,550 1048,550 Z\" style=\"fill:rgb(211,223,255);stroke:none\" clip-path=\"url(#clip35)\" />\n<clipPath id=\"clip36\"><path d=\"M747,548 L1059,548 L1059,592 L747,592 L747,548 Z\" /></clipPath>\n<path d=\"M757,550 C752.5817261,550 749,553.581665 749,558 L749,581 C749,585.418335 752.5817261,589 757,589 L1048,589 C1052.4182129,589 1056,585.418335 1056,581 L1056,558 C1056,553.581665 1052.4182129,550 1048,550 Z\" style=\"fill:none;stroke:rgb(0,64,128)\" clip-path=\"url(#clip36)\" />\n<clipPath id=\"clip37\"><path d=\"M760,556 L1046,556 L1046,584 L760,584 L760,556 Z\" /></clipPath>\n<path d=\"M774.0703735,563.019043 L769.347229,575.8769531 L767.5044556,575.8769531 L762.8726196,563.019043 L764.7153931,563.019043 L768.1768188,573.0712891 C768.2930298,573.4033203 768.3787842,573.7878418 768.4341431,574.2250977 L768.475647,574.2250977 C768.5198975,573.8432617 768.6167603,573.453125 768.7661743,573.0546875 L772.2940063,563.019043 Z M783.5996704,575.8769531 L781.9644165,575.8769531 L781.9644165,574.4326172 L781.9312134,574.4326172 C781.3169556,575.5393066 780.3734131,576.0927734 779.100647,576.0927734 C776.9258423,576.0927734 775.8384399,574.7922363 775.8384399,572.1914063 L775.8384399,566.6962891 L777.4487915,566.6962891 L777.4487915,571.9506836 C777.4487915,573.8155518 778.1626587,574.7480469 779.5903931,574.7480469 C780.2987061,574.7480469 780.87146,574.4865723 781.3086548,573.963623 C781.7457886,573.4406738 781.9643555,572.7807617 781.9644165,571.9838867 L781.9644165,566.6962891 L783.5996704,566.6962891 Z M794.2910767,571.7016602 L787.866272,571.7016602 C787.8939209,572.6811523 788.1622925,573.4378662 788.6714478,573.9719238 C789.180542,574.5058594 789.8916626,574.7729492 790.8047485,574.7729492 C791.8340454,574.7729492 792.7775269,574.4436035 793.6353149,573.7851563 L793.6353149,575.237793 C792.8273315,575.8077393 791.7565308,576.0927734 790.4229126,576.0927734 C789.0947876,576.0927734 788.0585327,575.6721191 787.31427,574.8310547 C786.5699463,573.9898682 786.1978149,572.8222656 786.1978149,571.328125 C786.1978149,569.9224854 786.605896,568.7631836 787.4221802,567.8500977 C788.2384033,566.9370117 789.2524414,566.4804688 790.4644165,566.4804688 C791.6652222,566.4804688 792.6032104,566.8664551 793.2783813,567.6384277 C793.9534912,568.4104004 794.2910767,569.4908447 794.2910767,570.8798828 Z M792.6641235,570.3984375 C792.6585693,569.5683594 792.4620972,568.9263916 792.0747681,568.4726563 C791.6873779,568.0187988 791.1422729,567.7919922 790.4395142,567.7919922 C789.7920532,567.7919922 789.2316895,568.0327148 788.758606,568.5141602 C788.2854614,568.9956055 787.9879761,569.6236572 787.866272,570.3984375 Z M801.9692993,563.1850586 L811.1997681,563.1850586 C811.0337524,568.9733887 810.9064331,572.7530518 810.8179321,574.5239258 C810.7736206,576.5935059 809.8882446,577.6173096 808.1616821,577.5952148 C807.597229,577.5950928 806.7837524,577.5784912 805.7212524,577.5454102 C805.6437378,577.0251465 805.5552368,576.5270996 805.4556274,576.0512695 C806.5181274,576.1508789 807.3703003,576.2006836 808.0122681,576.2006836 C808.9197998,576.2338867 809.3956909,575.6472168 809.4400024,574.440918 C809.5506592,572.7032471 809.6668701,569.3774414 809.7886353,564.4633789 L806.0200806,564.4633789 C805.9536743,566.6104736 805.8706665,568.3481445 805.7710571,569.6762695 C805.5275269,573.0961914 804.0278931,575.8962402 801.2720337,578.0766602 C800.9842529,577.7335205 800.6300659,577.3793945 800.2095337,577.0141602 C802.7772217,575.032959 804.1661987,572.553833 804.3765259,569.5766602 C804.5037842,568.1101074 804.5840454,566.4057617 804.6172485,564.4633789 L801.9692993,564.4633789 Z M795.6939087,566.0737305 L795.6939087,564.878418 L801.1890259,564.878418 L801.1890259,566.1069336 C800.5747681,567.1638184 799.9217529,568.1461182 799.2300415,569.0537109 L799.2300415,569.5683594 C799.4956055,569.7564697 799.7640381,569.9445801 800.0352173,570.1328125 C800.5830688,569.4023438 801.0949097,568.6413574 801.5708618,567.8500977 L802.6665649,568.5473633 C802.1906128,569.2335205 801.6289673,569.9888916 800.9815063,570.8134766 C801.5348511,571.2174072 802.0910034,571.6296387 802.6499634,572.050293 L801.8032837,573.0629883 C800.956604,572.3657227 800.0988159,571.6767578 799.2300415,570.9960938 L799.2300415,577.9936523 L797.9683228,577.9936523 L797.9683228,570.5727539 C797.3153076,571.2921143 796.6290894,571.9561768 795.909729,572.5649414 C795.7879639,572.1333008 795.6385498,571.6573486 795.4614868,571.137207 C797.0552368,569.8864746 798.4718628,568.1987305 799.7114868,566.0737305 Z M797.2710571,562.2387695 L798.4331665,561.6577148 C798.8426514,562.3106689 799.274292,563.0688477 799.7280884,563.9321289 L798.4995728,564.5629883 C798.0900269,563.6774902 797.680542,562.902832 797.2710571,562.2387695 Z M820.3389282,570.605957 L828.3408813,570.605957 L828.3408813,578.0766602 L827.0791626,578.0766602 L827.0791626,576.9145508 L821.600647,576.9145508 L821.600647,578.0932617 L820.3389282,578.0932617 Z M819.8076782,575.2875977 L818.828186,576.3833008 C818.2249756,575.769043 817.6217651,575.1713867 817.0186157,574.590332 C816.199585,575.7745361 815.1315308,576.892334 813.8145142,577.9438477 C813.5820923,577.600708 813.3275146,577.2409668 813.0508423,576.8647461 C814.3180542,575.9294434 815.3363037,574.8835449 816.1055298,573.7270508 C815.3141479,572.9854736 814.5228271,572.2716064 813.7315063,571.5854492 C814.1243896,570.0968018 814.4813232,568.4311523 814.8023071,566.5883789 L813.100647,566.5883789 L813.100647,565.3432617 L815.0181274,565.3432617 C815.1951904,564.2253418 815.3639526,563.0466309 815.5244751,561.8071289 L816.8692017,562.0063477 C816.6865845,563.2071533 816.5039673,564.319458 816.3213501,565.3432617 L819.4092407,565.3432617 L819.4092407,566.5717773 C819.1491089,569.5378418 818.5957642,571.8150635 817.7490845,573.4033203 C818.5016479,574.0617676 819.1878662,574.6899414 819.8076782,575.2875977 Z M826.6807251,563.965332 C827.8096313,565.7471924 828.7835693,567.4848633 829.6026001,569.1782227 L828.2910767,569.7924805 C828.0585938,569.2612305 827.8178711,568.7354736 827.5689087,568.215332 C825.8201904,568.3204346 823.7311401,568.4864502 821.3018188,568.7133789 C820.9918823,568.746582 820.598999,568.8405762 820.1231079,568.9956055 L819.5088501,567.800293 C819.8961792,567.5678711 820.2282104,567.2579346 820.5049438,566.8706055 C821.4014282,565.5313721 822.30896,563.8103027 823.2276001,561.7075195 L824.6221313,562.1557617 C823.6149292,564.081543 822.6133423,565.8302002 821.6172485,567.4018555 C823.8307495,567.2634277 825.6292725,567.1611328 827.0127563,567.0947266 C826.5645142,566.2148438 826.0941162,565.3487549 825.6016235,564.496582 Z M827.0791626,571.7680664 L821.600647,571.7680664 L821.600647,575.7856445 L827.0791626,575.7856445 Z M818.1309204,566.5883789 L816.097229,566.5883789 C815.7485962,568.4200439 815.40271,569.9418945 815.0596313,571.1538086 C815.6627808,571.6407471 816.2355347,572.111084 816.7778931,572.5649414 C817.5304565,571.0209961 817.9815063,569.0288086 818.1309204,566.5883789 Z M835.2056274,572.0170898 C836.6554565,571.3419189 838.0112305,570.5644531 839.2730103,569.6845703 L839.2730103,562.0727539 L840.7007446,562.0727539 L840.7007446,568.6137695 C842.394104,567.2468262 843.899292,565.6696777 845.2163696,563.8823242 L846.4282837,564.762207 C844.8179321,566.9038086 842.9087524,568.7769775 840.7007446,570.3818359 L840.7007446,575.0717773 C840.7007446,575.8243408 841.0991821,576.2006836 841.8960571,576.2006836 L844.0044556,576.2006836 C844.757019,576.2006836 845.1942139,575.8409424 845.315979,575.121582 C845.4708862,574.3688965 845.5704956,573.5001221 845.6148071,572.5151367 C846.0796509,572.6921387 846.5665894,572.8526611 847.0757446,572.996582 C846.9871826,573.9262695 846.8709717,574.7784424 846.7271118,575.5532227 C846.5167847,576.8259277 845.7199097,577.4624023 844.3364868,577.4624023 L841.5308228,577.4624023 C840.0255737,577.4624023 839.2730103,576.7208252 839.2730103,575.237793 L839.2730103,571.3530273 C838.2381592,572.0170898 837.1480103,572.6257324 836.0025024,573.1791992 C835.7700806,572.8139648 835.5044556,572.4265137 835.2056274,572.0170898 Z M830.5405884,569.9750977 C832.4663696,567.418457 833.8829956,564.7012939 834.7905884,561.8237305 L836.2349243,562.2387695 C835.7091675,563.611084 835.1392212,564.9033203 834.5249634,566.1152344 L834.5249634,577.9936523 L833.1304321,577.9936523 L833.1304321,568.6137695 C832.5161743,569.6098633 831.8631592,570.5450439 831.1714478,571.4194336 C830.9832764,570.9434814 830.7730103,570.4620361 830.5405884,569.9750977 Z M862.241272,578.043457 L862.241272,577.246582 L849.0596313,577.246582 L849.0596313,565.9907227 L850.3877563,565.9907227 L850.3877563,576.0180664 L862.241272,576.0180664 L862.241272,565.9907227 L863.569397,565.9907227 L863.569397,578.043457 Z M855.9658813,565.9077148 L859.9004517,563.815918 L850.5039673,563.815918 L850.5039673,562.6040039 L861.8760376,562.6040039 L861.8760376,563.9819336 L857.2276001,566.5551758 L857.2276001,573.0961914 C857.2276001,574.4796143 856.546936,575.1713867 855.1856079,575.1713867 C854.6322021,575.1713867 853.9404907,575.1602783 853.1104126,575.1381836 C853.0772095,574.7618408 853.0108032,574.3135986 852.9111938,573.793457 C853.6195068,573.881958 854.2891235,573.9262695 854.9199829,573.9262695 C855.6172485,573.9262695 855.9658813,573.5942383 855.9658813,572.9301758 Z M854.9365845,569.5766602 L855.6172485,570.6225586 C854.2559204,571.3972168 852.8060303,572.2495117 851.2676392,573.1791992 L850.5205688,572.0336914 C851.8929443,571.3696289 853.3649292,570.5505371 854.9365845,569.5766602 Z M857.4766235,570.5727539 L858.2734985,569.6098633 C859.5020142,570.3735352 860.7747803,571.2145996 862.0918579,572.1333008 L861.1953735,573.2456055 C859.9779053,572.2937012 858.7383423,571.402832 857.4766235,570.5727539 Z M851.0518188,566.621582 L851.8652954,565.7250977 C852.9720459,566.4887695 854.0401001,567.2745361 855.069397,568.0825195 L854.1729126,569.1118164 C853.0993042,568.1931152 852.05896,567.3630371 851.0518188,566.621582 Z M860.8135376,565.9077148 L861.7764282,566.8041992 C860.9020386,567.5456543 859.9225464,568.3370361 858.8379517,569.1782227 L857.9746704,568.2319336 C858.9486084,567.5124512 859.8948975,566.737793 860.8135376,565.9077148 Z M876.4107056,561.7905273 L877.7388306,561.9897461 C877.5064087,563.0632324 877.2352295,564.0649414 876.925354,564.9946289 L882.0054321,564.9946289 L882.0054321,566.1235352 L880.9595337,566.1235352 C880.6828003,569.3774414 879.9744873,571.9616699 878.8345337,573.8764648 C879.7310181,575.0938721 880.8709717,576.0899658 882.2544556,576.8647461 C881.9002686,577.3516846 881.6014404,577.7888184 881.3579712,578.1762695 C880.0076904,577.3018799 878.8843384,576.2614746 877.987854,575.0551758 C876.9696045,576.3167725 875.7576904,577.4125977 874.3521118,578.3422852 C874.1085815,578.0212402 873.7931519,577.6726074 873.4058228,577.2963867 C874.9552612,576.2780762 876.2114868,575.121582 877.1743774,573.8266602 C876.2778931,572.2770996 875.68573,570.4897461 875.3980103,568.4643555 C875.1655884,568.8737793 874.9220581,569.2556152 874.6675415,569.6098633 C874.446167,569.2888184 874.1694946,568.9346924 873.8374634,568.5473633 C875.1212769,566.6989746 875.9790649,564.4467773 876.4107056,561.7905273 Z M865.7192993,571.3696289 L868.2427368,571.3696289 C868.4862061,570.9489746 868.7241211,570.517334 868.956604,570.074707 L870.1519165,570.456543 C869.9747925,570.7663574 869.7977295,571.0708008 869.6206665,571.3696289 L873.6880493,571.3696289 L873.6880493,572.4487305 C873.2674561,573.5333252 872.6310425,574.4851074 871.7788696,575.3041992 C872.3875732,575.5919189 873.0073242,575.8796387 873.6382446,576.1674805 L872.9077759,577.3129883 C872.2215576,576.9255371 871.5076904,576.538208 870.7661743,576.1508789 C869.5155029,577.0472412 867.9383545,577.7556152 866.034729,578.2758789 C865.857605,577.9216309 865.6694336,577.5343018 865.4702759,577.1137695 C867.0861206,576.7485352 868.4530029,576.2227783 869.5708618,575.5366211 C868.6190186,575.0495605 867.6229248,574.5515137 866.5825806,574.0424805 C866.9367065,573.5333252 867.2797852,573.0075684 867.6118774,572.465332 L865.7192993,572.465332 Z M865.9019165,565.6586914 L869.7202759,565.6586914 L869.7202759,561.9399414 L870.9487915,561.9399414 L870.9487915,565.6586914 L874.1362915,565.6586914 L874.1362915,566.7543945 L870.9487915,566.7543945 L870.9487915,567.7670898 L871.4468384,567.2026367 C872.4760742,567.9552002 873.3393555,568.6192627 874.0366821,569.1948242 L873.2398071,570.1245117 C872.6310425,569.5489502 871.8673706,568.9014893 870.9487915,568.1821289 L870.9487915,570.074707 L869.7202759,570.074707 L869.7202759,567.7504883 C868.7130737,568.8018799 867.539917,569.7260742 866.2007446,570.5229492 C865.9904175,570.2019043 865.7525024,569.8643799 865.4868774,569.5102539 C866.8814087,568.7575684 868.159729,567.8389893 869.3218384,566.7543945 L865.9019165,566.7543945 Z M879.6314087,566.1235352 L876.5269165,566.1235352 C876.4715576,566.267334 876.4107056,566.4057617 876.3442993,566.5385742 C876.5435181,568.8848877 877.0968628,570.8936768 878.0044556,572.5649414 C878.8898315,570.9489746 879.4321899,568.8018799 879.6314087,566.1235352 Z M868.2095337,573.6606445 C868.9953003,574.0147705 869.8032837,574.385498 870.6333618,574.7729492 C871.3970337,574.119873 871.9946899,573.350708 872.4263306,572.465332 L868.9732056,572.465332 C868.7186279,572.8747559 868.4640503,573.2731934 868.2095337,573.6606445 Z M873.3892212,562.3549805 L874.4185181,563.0356445 C873.8097534,563.8325195 873.2010498,564.5684814 872.5923462,565.2436523 C872.3377686,565.0222168 872.0389404,564.7897949 871.6958618,564.5463867 C872.2713623,563.8712158 872.8358154,563.1407471 873.3892212,562.3549805 Z M866.3335571,563.0854492 L867.2798462,562.4379883 C867.7778931,563.0466309 868.2925415,563.699707 868.8237915,564.3969727 L867.7944946,565.1274414 C867.3074951,564.407959 866.8204956,563.7272949 866.3335571,563.0854492 Z M887.9570923,573.8183594 L886.5542603,578.2426758 L885.3921509,578.2426758 L886.413147,573.8183594 Z M917.1343384,575.5366211 C916.8244019,575.9128418 916.5145264,576.3223877 916.2046509,576.7651367 C913.288269,575.3096924 911.0470581,573.4282227 909.4810181,571.1206055 L909.4810181,578.0600586 L908.1860962,578.0600586 L908.1860962,571.137207 C906.5037842,573.3673096 904.257019,575.3096924 901.4458618,576.9643555 C901"
        },
        {
          "name": "_Set.html",
          "type": "blob",
          "size": 0.7646484375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n\r\n</head>\r\n<body>\r\n\r\n<script >\r\n   let value = new Set();\r\n\r\n   value.add('11')\r\n    console.log(value)\r\n   //如果没有他自己写一个\r\n   _Set = (function () {\r\n       function Set() {\r\n           this.set = Object.create(null);\r\n       }\r\n\r\n       Set.prototype.has = function has(key) {\r\n           return this.set[key] === true\r\n       };\r\n       Set.prototype.add = function add(key) {\r\n           this.set[key] = true;\r\n       };\r\n       Set.prototype.clear = function clear() {\r\n           this.set = Object.create(null);\r\n       };\r\n\r\n       return Set;\r\n   }());\r\n\r\n   let _value = new _Set();\r\n\r\n   _value.add('11')\r\n   console.log(_value)\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "__proto__.html",
          "type": "blob",
          "size": 0.33203125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n   <script>\r\n        var obj={};\r\n        console.log(obj.__proto__)\r\n        obj.__proto__ = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse']\r\n        console.log(obj.__proto__)\r\n   </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "_c.html",
          "type": "blob",
          "size": 3.5341796875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n\r\n</head>\r\n<body></body>\r\n</html>\r\n<script>\r\n    var lovingVue = 123;\r\n    var select = 3;\r\n    var isClass = true;\r\n\r\n    var _c = function (tag, astObject) {\r\n        debugger;\r\n        console.log(tag, astObject)\r\n    }\r\n    var _v = function (tag, astObject) {\r\n        debugger;\r\n        console.log(tag, astObject)\r\n    }\r\n    var _s = function (tag, astObject) {\r\n        debugger;\r\n        console.log(tag, astObject)\r\n    }\r\n\r\n\r\n    var fn=(function anonymous() {\r\n//        <div id=\"demo\">\r\n//                <i></i>\r\n//                <span style=\"width: 100px;\">\r\n//\r\n//                span 节点\r\n//        {{isClass}}\r\n//        </span>\r\n//\r\n//        </div>\r\n        with (this) {\r\n            return _c(\r\n                    'div',\r\n                    {attrs: {\"id\": \"demo\"}},\r\n                    [\r\n                        _c('i'),\r\n                        _v(\" \"),\r\n                        _c('span',\r\n                                {staticStyle: {\"width\": \"100px\"}},\r\n                                [\r\n                                    _v(\"\\n\\n              span 节点\\n               \" + _s(isClass) + \"\\n        \")\r\n                                ]\r\n                        )\r\n                    ]\r\n            )\r\n        }\r\n    })\r\n\r\n    fn()\r\n\r\n    (function anonymous() {\r\n//        <div id=\"demo\">\r\n//                <span style=\"width: 100px;\">\r\n//\r\n//                span 节点\r\n//        <i  :class=\"{'class-a':classA}\">i标签</i>\r\n//                <b>{{lovingVue}}</b>\r\n//        </span>\r\n//        <span  style=\"width: 100px;\">\r\n//\r\n//                {{select}}\r\n//        </span>\r\n//\r\n//        </div>\r\n        with (this) {\r\n            return _c(\r\n                    'div',\r\n                    {attrs: {\"id\": \"demo\"}},\r\n                    [\r\n                        _c(\r\n                                'span',\r\n                                {\r\n                                    staticStyle: {\"width\": \"100px\"}\r\n                                },\r\n                                [\r\n                                    _v(\"\\n\\n              span 节点\\n              \"),\r\n                                    _c(\r\n                                            'i',\r\n                                            {\r\n                                                class: {'class-a': classA}\r\n                                            },\r\n                                            [\r\n                                                _v(\"i标签\")\r\n                                            ]\r\n                                    ),\r\n                                    _v(\" \")\r\n                                    ,\r\n                                    _c(\r\n                                            'b',\r\n                                            [\r\n                                                _v(_s(lovingVue))\r\n                                            ]\r\n                                    )\r\n                                ]\r\n                        ),\r\n                        _v(\" \"),\r\n                        _c(\r\n                                'span',\r\n                                {\r\n                                    staticStyle: {\"width\": \"100px\"}\r\n                                },\r\n                                [\r\n                                    _v(\"\\n\\n              \" + _s(select) + \"\\n        \")\r\n                                ]\r\n                        )\r\n                    ]\r\n            )\r\n        }\r\n    })\r\n\r\n</script>"
        },
        {
          "name": "add.txt",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "add1.txt",
          "type": "blob",
          "size": 0.0234375,
          "content": "add111111111111111111111"
        },
        {
          "name": "advance.html",
          "type": "blob",
          "size": 0.427734375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      var html ='<!--我是注释节点--><div>节点</div>';\r\n      var index=0;\r\n      //索引\r\n      function advance(n) {\r\n          index += n;\r\n          html = html.substring(n);\r\n          console.log(html)\r\n      }\r\n\r\n      console.log(html.length)\r\n      advance(13)\r\n\r\n\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "appear.html",
          "type": "blob",
          "size": 0.12890625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "argMatch.html",
          "type": "blob",
          "size": 0.748046875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script >\r\n\r\n    \r\n    function transformString(name) {\r\n        var argRE = /:(.*)$/; //匹配字符串是否含有:\r\n        var argMatch = name.match(argRE);  //匹配字符串是否含有:\r\n        let index =argMatch&&argMatch.index;\r\n        var arg = argMatch && argMatch[1];\r\n        console.log(argMatch)\r\n        console.log(arg)\r\n        if (arg) {\r\n            name = name.slice(0, -(arg.length + 1));\r\n        }\r\n        if (index) {\r\n            name = name.slice(0, index+ 1);\r\n        }\r\n        return name;\r\n    }\r\n    console.log(transformString('abc'))\r\n    console.log(transformString('abc:efg:hig'))\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "arrObj.html",
          "type": "blob",
          "size": 0.34765625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n    <script>\r\n          var arr=[];\r\n          arr['1-11-3']=13456;\r\n          arr.push(10)\r\n          for(var i=0; i<arr.length; i++){\r\n              console.log(arr[i])\r\n          }\r\n        console.log(arr)\r\n    </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "array.html",
          "type": "blob",
          "size": 1.80859375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n\r\n</head>\r\n<body>\r\n\r\n<script >\r\n    var obj={\r\n         arr:[\r\n             {\r\n                 arr_1:[\r\n                     {a:1},\r\n                     {a:2},\r\n                     {a:3},\r\n                     {a:4},\r\n                     {a:5},\r\n\r\n                 ]\r\n             },\r\n             {\r\n                 arr_1:[\r\n                     {a:11},\r\n                     {a:12},\r\n                     {a:13},\r\n                     {a:14},\r\n                     {a:15},\r\n                 ]\r\n             },\r\n             {\r\n                 arr_1:[\r\n                     {a:21},\r\n                     {a:22},\r\n                     {a:23},\r\n                     {a:24},\r\n                     {a:25},\r\n                 ]\r\n             },\r\n             {\r\n                 arr_1:[\r\n                     {a:31},\r\n                     {a:32},\r\n                     {a:33},\r\n                     {a:34},\r\n                     {a:35},\r\n                 ]\r\n             },\r\n             {\r\n                 arr_1:[\r\n                     {a:41},\r\n                     {a:42},\r\n                     {a:43},\r\n                     {a:44},\r\n                     {a:45},\r\n                 ]\r\n             },\r\n             {\r\n                 arr_1:[\r\n                     {a:51},\r\n                     {a:52},\r\n                     {a:53},\r\n                     {a:54},\r\n                     {a:55},\r\n                 ]\r\n             },\r\n         ]\r\n    }\r\n    let newArr=obj.arr.map(item=>{\r\n      let arr= item.arr_1.map(_item=>{\r\n            return _item.a;\r\n        })\r\n        return arr.join(',')\r\n    })\r\n    console.log(newArr.join(',').split(','))\r\n    var arr1=[1,2,3,4,5];\r\n    arr1.length=3;\r\n    console.log(arr1)\r\n\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "attribute.html",
          "type": "blob",
          "size": 0.6376953125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    var attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\r\n    var html=\"    class='classA' :html='abc' :class='[a?aa:bb,cc]'  style='width:100px' ></div>\"\r\n    var index=0\r\n    function advance(n) {\r\n        index += n; //让索引叠加\r\n        html = html.substring(n); //截取当前索引 和 后面的字符串。\r\n    }\r\n    while (html){\r\n        var    attr = html.match(attribute)\r\n        advance(attr[0].length);\r\n        console.log(attr)\r\n    }\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "bailRE.html",
          "type": "blob",
          "size": 1.021484375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    /**\r\n     * Parse simple path.\r\n     * 解析简单路径。\r\n     */\r\n    var bailRE = /[^\\w.$]/;  //匹配任何字符 已点结束的字符串\r\n\r\n    function parsePath(path) {\r\n         console.log(bailRE.test(path))\r\n        if (bailRE.test(path)) {  //匹配上 返回 true\r\n            return\r\n        }\r\n        //匹配不上  path在已点分割\r\n        var segments = path.split('.');\r\n        return function (obj) {\r\n\r\n            for (var i = 0; i < segments.length; i++) {\r\n                //如果有参数则返回真\r\n                if (!obj) {\r\n                    return\r\n                }\r\n                //将对象中的一个key值 赋值给该对象 相当于 obj = obj[segments[segments.length-1]];\r\n                obj = obj[segments[i]];\r\n            }\r\n            //否则返回一个对象\r\n            return obj\r\n        }\r\n    }\r\n    parsePath('~123@')\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "buildRegex.html",
          "type": "blob",
          "size": 1.8154296875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    var defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g; //匹配viwe 视图中的{{指令}}\r\n    var regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g; //匹配特殊符号  - 或者. 或者* 或者+ 或者? 或者^ 或者$ 或者{ 或者} 或者( 或者) 或者| 或者[ 或者] 或者/ 或者\\\r\n\r\n\r\n    /*\r\n     * var aFn =  cached(function(string){\r\n     *\r\n     *      return string\r\n     *  })\r\n     * aFn(string1);\r\n     * aFn(string2);\r\n     * aFn(string);\r\n     * aFn(string1);\r\n     * aFn(string2);\r\n     *\r\n     * aFn 函数会多次调用 里面就能体现了\r\n     *  用对象去缓存记录函数\r\n     * */\r\n\r\n    function cached(fn) {\r\n        var cache = Object.create(null);\r\n        return (function cachedFn(str) {\r\n            var hit = cache[str];\r\n            return hit || (cache[str] = fn(str))\r\n        })\r\n    }\r\n\r\n    var buildRegex = cached(function (delimiters) {\r\n        var open = delimiters[0].replace(regexEscapeRE, '\\\\$&'); //$&\t与 regexp 相匹配的子串。 这里的意思是遇到了特殊符号的时候在正则里面需要替换加多一个/斜杠\r\n        var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\r\n        return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g') // 匹配开始的open +任意字符或者换行符+ close 全局匹配\r\n    });\r\n//   console.log(buildRegex(['${','}']))\r\n//    console.log( 'abcdef${name},asdfsadf${age}'.match(buildRegex(['${','}'])));\r\n    var data={\r\n        name:'yao',\r\n        age:28,\r\n    }\r\n\r\n    let str = '姓名${name},年龄${age}'.replace(/\\$\\{((?:.|\\\\n)+?\\})/g,function (val) {\r\n       let reg =  \"(?<=\\\\{)[^\\\\}]+\";  //匹配括号中的内容\r\n        return data[val.match(reg)[0]]\r\n    })\r\n    console.log(str)\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "callbacks.slice(0).html",
          "type": "blob",
          "size": 0.2451171875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      var callbacks=[1]\r\n      var callback  = callbacks.slice(0)\r\n      console.log(callback)\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "camelize.html",
          "type": "blob",
          "size": 1.2880859375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n <script>\r\n     /**\r\n      * Camelize a hyphen-delimited string.\r\n      * 用连字符分隔的字符串。\r\n      * camelize = cachedFn(str)=>{ var hit = cache[str];\r\n    return hit || (cache[str] = fn(str))}\r\n\r\n      调用一个camelize 存一个建进来 调用两次 如果建一样就返回 hit\r\n      可以让这样的的属性 v-model 变成 vModel\r\n      */\r\n     var camelizeRE = /-(\\w)/g;\r\n     var camelize = cached(function (str) {\r\n         return str.replace(camelizeRE, function (_, c) {\r\n             return c ? c.toUpperCase() : '';\r\n         })\r\n     });\r\n     /*\r\n      * var aFn =  cached(function(string){\r\n      *\r\n      *      return string\r\n      *  })\r\n      * aFn(string1);\r\n      * aFn(string2);\r\n      * aFn(string);\r\n      * aFn(string1);\r\n      * aFn(string2);\r\n      *\r\n      * aFn 函数会多次调用 里面就能体现了\r\n      *  用对象去缓存记录函数\r\n      * */\r\n\r\n     function cached(fn) {\r\n         var cache = Object.create(null);\r\n         return (function cachedFn(str) {\r\n             var hit = cache[str];\r\n             return hit || (cache[str] = fn(str))\r\n         })\r\n     }\r\n     console.log(camelize('abc-defg'))\r\n </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "charCodeAt.html",
          "type": "blob",
          "size": 2.4931640625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    function charCodeAt(exp) {\r\n        let c, i;\r\n        for (i = 0; i < exp.length; i++) {\r\n            c = exp.charCodeAt(i);\r\n            switch (c) {\r\n                case 0x22:\r\n                    console.log('c=' + c)\r\n                    console.log('0x22=' + exp[i])\r\n                    break                   // 匹配 \"\r\n                case 0x27:\r\n                    console.log('c=' + c)\r\n                    console.log('0x27=' + exp[i])\r\n                    break                   // 匹配 '\r\n                case 0x60:\r\n                    console.log('c=' + c)\r\n                    console.log('0x60=' + exp[i])\r\n                    break                  // 匹配 `\r\n                case 0x28:\r\n                    console.log('c=' + c)\r\n                    console.log('0x28=' + exp[i])\r\n                    break                 // 匹配 (\r\n                case 0x29:\r\n                    console.log('c=' + c)\r\n                    console.log('0x29=' + exp[i])\r\n                    break                 //匹配  )\r\n                case 0x5B:\r\n                    console.log('c=' + c)\r\n                    console.log('0x5B=' + exp[i])\r\n                    break                // 匹配 [\r\n                case 0x5D:\r\n                    console.log('c=' + c)\r\n                    console.log('0x5D=' + exp[i])\r\n                    break                // 匹配 ]\r\n                case 0x7B:\r\n                    console.log('c=' + c)\r\n                    console.log('0x7B=' + exp[i])\r\n                    break                 // 匹配 {\r\n                case 0x7D:\r\n                    console.log('c=' + c)\r\n                    console.log('exp[i]=' + exp[i])\r\n                    break                 // }\r\n                case 0x5C:              //   匹配   \\\r\n                    console.log('c=' + c)\r\n                    console.log('0x5C=' + exp[i])\r\n                    break\r\n                case 0x2f:              //   匹配   /\r\n                    console.log('c=' + c)\r\n                    console.log('0x5C=' + exp[i])\r\n                    break\r\n                case 0x7C:              //   匹配   pipe\r\n                    console.log('c=' + c)\r\n                    console.log('0x7C=' + exp[i])\r\n                        debugger;\r\n                    break\r\n\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    charCodeAt(`\"'()[]{} '\\\\ \\/ pipe`);\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "classify.html",
          "type": "blob",
          "size": 0.6904296875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n   <script>\r\n     var  classify = (function classifyRE() {\r\n           var classifyRE = /(?:^|[-_])(\\w)/g;\r\n//非捕获  匹配不分组 。 就是可以包含，但是不匹配上\r\n           //过滤掉class中的 -_ 符号 并且把字母开头的改成大写\r\n         return  function (str) {\r\n               return str.replace(classifyRE,\r\n                       function (c) {\r\n                           return c.toUpperCase();\r\n                       }).replace(/[-_]/g, '');\r\n           };\r\n       })();\r\n       console.log(classify('abcd_efg-ijk'))\r\n\r\n   </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "classifyRE.html",
          "type": "blob",
          "size": 1.7783203125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n\r\n</head>\r\n<body>\r\n<input id=\"input\" type=\"text\"  >\r\n    <script>\r\n        //非捕获  匹配不分组 。 就是可以包含，但是不匹配上\r\n\r\n//        var classifyRE = /(?:^|[-_])(\\w)/g;\r\n//\r\n//        var classify = function (str) {\r\n//            return str.replace(classifyRE,\r\n//                function (c) {\r\n//                    return c.toUpperCase();\r\n//                }).replace(/[-_]/g, '');\r\n//        };\r\n\r\n//        console.log(classify(':'))\r\n//\r\n//     console.log(/^[a-zA-Z][\\w-]*$/.test('-a5675675'))\r\n//        console.log(/^[a-zA-Z][\\w-]*$/.test('a-5675675'))\r\n//        console.log(/^[\\w]*$/.test('5675'))\r\n//\r\n//\r\n//        console.log(/([a-zA-Z])|(\\d{1,2})/.test(100000))\r\n\r\n        var input = document.getElementById('input');\r\n\r\n        input.onkeyup=function () {\r\n            this.value=checkData(this.value)\r\n\r\n        }\r\n\r\n\r\n        function  checkData(string) {\r\n            var pattern1 = /([a-zA-Z]+)|([\\u4e00-\\u9fa5]+)/g;\r\n            var pattern2 =/^\\d{1,2}$/;\r\n　　\r\n            if(!isNaN(new Number(string))&&pattern2.test(new Number(string))){\r\n　　　　　　　　console.log(new Number(string))\r\n                return new Number(string);\r\n            }\r\n\r\n            if (pattern1.test(string)){\r\n               return string\r\n\r\n            }\r\n\r\n\r\n           return '';\r\n        }\r\n\r\n\r\n\r\n        var camelizeRE = /-(\\w)/g;  //匹配带-后缀的任何字符串\r\n        var camelize =  function (str) {\r\n            //替换字符串\r\n            return str.replace(camelizeRE, function (_, c) {\r\n                return c ? c.toUpperCase() : '';\r\n            })\r\n        }\r\n\r\n            console.log(camelize('ca-mel-ifffze'))\r\n\r\n\r\n\r\n    </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "classifyRE1.html",
          "type": "blob",
          "size": 0.404296875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n\r\n</head>\r\n<body>\r\n<input id=\"input\" type=\"text\"  >\r\n    <script>\r\n        var hyphenateRE = /\\B([A-Z])/g;\r\n        var hyphenate = function (str) {\r\n            return str.replace(hyphenateRE, '-$1').toLowerCase()\r\n        } ;\r\n        console.log(hyphenate('Ab 56c w 7745 6e rt'))\r\n\r\n    </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "comments.html",
          "type": "blob",
          "size": 0.6748046875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<script src=\"vue.js\"></script>\r\n<body>\r\n            <div id=\"version\"></div>\r\n            <div id=\"app\">\r\n                <!--this is comment-->\r\n                <p>Hello Vue!</p>\r\n            </div>\r\n            <p>渲染后HTML: </p>\r\n            <textarea id=\"code\"></textarea>\r\n\r\n<script>\r\n    document.getElementById('version').innerHTML = 'Vue Version: ' + Vue.version;\r\n\r\n    new Vue({\r\n        el: '#app',\r\n        comments: true,\r\n        mounted() {\r\n            document.getElementById('code').innerHTML = this.$el.innerHTML;\r\n        }\r\n    });\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "contextmenu.html",
          "type": "blob",
          "size": 1.2431640625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n\r\n    <style>\r\n        ul, li {\r\n            margin: 0;\r\n            padding: 0;\r\n        }\r\n\r\n        #myMenu{\r\n            list-style: none;\r\n            width: 150px;\r\n            border: 1px solid #ccc;\r\n            border-bottom: none;\r\n            position: absolute;\r\n            display: none;\r\n        }\r\n\r\n        #myMenu li{\r\n            border-bottom: 1px solid #ccc;\r\n            padding: 5px 10px;\r\n            cursor: pointer;\r\n        }\r\n\r\n        #myMenu li:hover{\r\n            background-color: #ccc;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n\r\n<ul id=\"myMenu\">\r\n    <li>右键想干什么？</li>\r\n    <li>想看源代码？</li>\r\n    <li>还是想审查元素？</li>\r\n</ul>\r\n<script>\r\n    var myMenu = document.getElementById(\"myMenu\");\r\n    document.addEventListener(\"contextmenu\", function(event){\r\n        event.preventDefault();\r\n        myMenu.style.display = \"block\";\r\n        //获取鼠标视口位置\r\n        myMenu.style.top = event.clientY + \"px\";\r\n        myMenu.style.left = event.clientX + \"px\";\r\n    });\r\n    document.addEventListener(\"click\", function(event){\r\n        myMenu.style.display = \"none\";\r\n    });\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "createElementNS.html",
          "type": "blob",
          "size": 1.158203125,
          "content": "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n\r\n</head>\r\n<body>\r\n\r\n<script>\r\n\r\n//    看用在何处，什么程序语言。\r\n//    顾名思义：\r\n//    NS 是 namespace 的意思\r\n//    createElementNS(ns,name) 通过 namespace 建立 单元\r\n//    参数1是 字符串，单元节点 的 namespace（命名空间） 名字\r\n//    参数2是 单元节点 的 名字\r\n//    createElement 建立 单元\r\n//    例如： createElement(\"div\");\r\n//    var newDiv = document.createElement(\"div\");\r\n\r\n//    createElementNS(ns,name) 方法创建带有命名空间的元素节点。 和createElement差不多\r\n//ns\t字符串，可为元素节点规定命名空间的名称。\r\n//name\t字符串，可为元素节点规定名称。\r\n\r\n        var   newel=document.createElementNS(\"div\",\"abc\");\r\n        var  newtext1=document.createTextNode(\"First\");\r\n//        newel.appendChild(newtext1)\r\n        document.body.appendChild(newel)\r\n        console.dir(newel)\r\n        var  newe2=document.createElement(\"abc\");\r\n        var  newtext2=document.createTextNode(\"First\");\r\n//        newe2.appendChild(newtext2)\r\n        document.body.appendChild(newe2)\r\n        console.dir(newe2)\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "ddf.html",
          "type": "blob",
          "size": 1.927734375,
          "content": "<h3>Vue mvvm simple model</h3>\r\n<div id=\"app\">\r\n    <h2 v-text=\"title\"></h2>\r\n    <p v-text=\"name\"></p>\r\n    <input v-model=\"name\">\r\n</div>\r\n<script type=\"text/javascript\">\r\n//function Vue(opt) {\r\n//  this.data = opt.data || {};\r\n//  this.$el = document.querySelector(opt.el) || document.body;\r\n//  var textDom = this.$el.querySelectorAll('[v-text]');\r\n//  var modelDom = this.$el.querySelectorAll('[v-model]');\r\n//  var self = this;\r\n//\r\n//  function observe(data) {\r\n//    // 设置开始和递归终止条件\r\n//    if (!data || typeof data !== 'object') {\r\n//      return;\r\n//    }\r\n//    // 不能直接使用for循环，避开闭包陷阱\r\n//    Object.keys(data).forEach(function (key) {\r\n//      defineReactive(data, key, data[key]);\r\n//    })\r\n//  }\r\n//\r\n//  function defineReactive(data, key, val) {\r\n//    observe(val);   // 递归对象属性到基本类型为止\r\n//    Object.defineProperty(data, key, {\r\n//      enumerable  : true,    // 枚举\r\n//      configurable: false, // 不可再配置\r\n//      get         : function () {\r\n//        return val;\r\n//      },\r\n//      set         : function (newVal) {\r\n//        if (val === newVal) {\r\n//          return;\r\n//        }\r\n//        val = newVal;  // setter本身已经做了赋值，val作为一个闭包变量，保存最新值\r\n//        model2View();\r\n//      },\r\n//    })\r\n//  }\r\n//\r\n//  function model2View() {\r\n//    textDom.forEach(function (node) {\r\n//      node.innerText = self.data[node.getAttribute('v-text')];\r\n//    });\r\n//  }\r\n//\r\n//  function watch() {\r\n//    modelDom.forEach(function (node) {\r\n//      //节点上面添加 key事件\r\n//      node.addEventListener('keyup', function () {\r\n//\r\n//        self.data[node.getAttribute('v-model')] = node.value;\r\n//      });\r\n//    });\r\n//  }\r\n//\r\n//  observe(this.data);\r\n//  model2View();\r\n//  watch();\r\n//}\r\n//\r\n//var vm = new Vue({\r\n//  el  : '#app',\r\n//  data: {\r\n//    name : 'Vue',\r\n//    title: 'Hello Vue!',\r\n//  },\r\n//});\r\n</script>"
        },
        {
          "name": "def.html",
          "type": "blob",
          "size": 3.8486328125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      var obj={\r\n          name:'name'\r\n      }\r\n      def(obj,'age',19);\r\n      console.log(obj);\r\n      var Observer = function Observer(value) {\r\n          this.value = value;\r\n          this.dep = new Dep();\r\n          this.vmCount = 0;\r\n          def(value, '__ob__', this);\r\n          if (Array.isArray(value)) {\r\n              var augment = hasProto\r\n                      ? protoAugment\r\n                      : copyAugment;\r\n              augment(value, arrayMethods, arrayKeys);\r\n              this.observeArray(value);\r\n          } else {\r\n              this.walk(value);\r\n          }\r\n      };\r\n\r\n\r\n      function def(obj, key, val, enumerable) {\r\n          Object.defineProperty(obj, key, {\r\n              value: val, //值\r\n              enumerable: !!enumerable,  //定义了对象的属性是否可以在 for...in 循环和 Object.keys() 中被枚举。\r\n              writable: true, //可以 改写 value\r\n              configurable: true  //configurable特性表示对象的属性是否可以被删除，以及除writable特性外的其他特性是否可以被修改。\r\n          });\r\n      }\r\n      Observer.prototype.observeArray = function observeArray(items) {\r\n          for (var i = 0, l = items.length; i < l; i++) {\r\n              observe(items[i]);\r\n          }\r\n      };\r\n\r\n      function observe(value, asRootData) {\r\n          if (!isObject(value) || value instanceof VNode) {\r\n              return\r\n          }\r\n          var ob;\r\n          if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\r\n              ob = value.__ob__;\r\n          } else if (\r\n                  observerState.shouldConvert &&\r\n                  !isServerRendering() &&\r\n                  (Array.isArray(value) || isPlainObject(value)) &&\r\n                  Object.isExtensible(value) &&\r\n                  !value._isVue\r\n          ) {\r\n              ob = new Observer(value);\r\n          }\r\n          if (asRootData && ob) {\r\n              ob.vmCount++;\r\n          }\r\n          return ob\r\n      }\r\n\r\n      var arrayProto = Array.prototype;\r\n      var arrayMethods = Object.create(arrayProto);\r\n\r\n      [\r\n          'push',\r\n          'pop',\r\n          'shift',\r\n          'unshift',\r\n          'splice',\r\n          'sort',\r\n          'reverse'\r\n      ].forEach(function (method) {\r\n          // cache original method 缓存原始方法\r\n\r\n          var original = arrayProto[method];\r\n          //第1个参数是obj\r\n          //第2个参数是key\r\n          //第3个参数是value\r\n          def(\r\n                  arrayMethods,\r\n                  method,\r\n                  function mutator() {\r\n                      console.log('mutator')\r\n                      var args = [], len = arguments.length;\r\n                      while (len--) args[len] = arguments[len];\r\n\r\n                      var result = original.apply(this, args);\r\n                      var ob = this.__ob__;\r\n                      console.log(this.__ob__)\r\n                      debugger;\r\n                      var inserted;\r\n                      switch (method) {\r\n                          case 'push':\r\n                          case 'unshift':\r\n                              inserted = args;\r\n                              break\r\n                          case 'splice':\r\n                              inserted = args.slice(2);\r\n                              break\r\n                      }\r\n                      if (inserted) {\r\n                          ob.observeArray(inserted);\r\n                      }\r\n                      // notify change\r\n                      ob.dep.notify();\r\n                      return result\r\n                  }\r\n          );\r\n      });\r\n\r\n      console.log(arrayProto)\r\n      console.log(arrayMethods)\r\n      console.log(arrayMethods.push('aa'))\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "defineProperty.html",
          "type": "blob",
          "size": 1.01171875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      var obj={\r\n          name:'name'\r\n      }\r\n      function def(obj, key, val, enumerable) {\r\n\r\n          Object.defineProperty(obj, key, {\r\n              value: val, //值\r\n              enumerable: !!enumerable,  //定义了对象的属性是否可以在 for...in 循环和 Object.keys() 中被枚举。\r\n              writable: true, //可以 改写 value\r\n              configurable: true  //configurable特性表示对象的属性是否可以被删除，以及除writable特性外的其他特性是否可以被修改。\r\n          });\r\n      }\r\n      def(obj,'age', '29');\r\n      var property_name = Object.getOwnPropertyDescriptor(obj, 'name');\r\n      var property = Object.getOwnPropertyDescriptor(obj, 'age');\r\n      var _property = Object.getOwnPropertyNames(obj);\r\n      console.log(property_name);\r\n      console.log(property);\r\n      console.log(_property);\r\n\r\n\r\n\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "exec.html",
          "type": "blob",
          "size": 0.771484375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n//全局匹配代码：的时候会有个lastIndex 索引 所以可以循环 这样就可以匹配出多个\r\n    var reg=/(\\w)l(\\w)/g;\r\n    var str=\"hello world hello 123 hello programmer hello test\";\r\n    var arr=reg.exec(str);\r\n    while(arr){\r\n        console.dir(arr);\r\n        console.log(\"lastIndex:\"+reg.lastIndex);\r\n        arr=reg.exec(str);\r\n    }\r\nvar reg2=/(\\w)s(\\w)/;\r\nvar str2=\"ws1esr\";\r\nvar result=str2.match(reg2);\r\nconsole.log(result)\r\ndebugger\r\nvar i=0;\r\nwhile(result){\r\n    i++;\r\n    if(i<=4){\r\n        console.dir(result);\r\n        console.log(\"lastIndex:\"+reg2.lastIndex);\r\n    }\r\n    else{\r\n        break;\r\n    }\r\n}\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "exex.html",
          "type": "blob",
          "size": 1.2509765625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    var text=\"cat,bat,sat,fat\";\r\n    var pattern1=/.at/g;\r\n    var matches=pattern1.exec(text);\r\n    var matches1=pattern1.exec(text);\r\n    var matches2=pattern1.exec(text);\r\n    var matches3=pattern1.exec(text);\r\n    var matches4=pattern1.exec(text);\r\n\r\n    console.log(matches)\r\n    console.log(matches1)\r\n    console.log(matches2)\r\n    console.log(matches3)\r\n    console.log(matches4)\r\n//    console.log(matches.index);//0\r\n//    console.log(matches[0]);//cat\r\n//    console.log(pattern1.lastIndex);//3\r\n\r\n\r\n\r\n     matches=pattern1.exec(text);\r\n//    console.log(matches)\r\n//    console.log(matches.index);//5\r\n//    console.log(matches[0]);//bat\r\n//    console.log(pattern1.lastIndex);//7\r\n\r\n\r\n//    var str = \"abc123\";\r\n//    var re = /a.c/g\r\n//    var result1 = re.test(str);\r\n//    var result2 = re.test(str);\r\n//    var result3 = re.test(str);\r\n//    var result4 = re.test(str);\r\n//    var result5 = re.test(str);\r\n//    var result6 = re.test(str);\r\n//    console.log(result1)\r\n//    console.log(result2)\r\n//    console.log(result3)\r\n//    console.log(result4)\r\n//    console.log(result5)\r\n//    console.log(result6)\r\n\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "forIteratorRE.html",
          "type": "blob",
          "size": 0.6689453125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    var forAliasRE = /([^]*?)\\s+(?:in|of)\\s+([^]*)/; //匹配 含有   字符串 in  字符串   或者  字符串 of  字符串\r\n    var forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\r\n    console.log('(value, key, index) in data'.match(forAliasRE));\r\n    console.log('value, key, index'.match(forIteratorRE));\r\n    console.log('( value, key, index)'.match(forIteratorRE));\r\n    console.log('[ value, key, index]'.match(forIteratorRE)); //匹配不上\r\n    console.log('{ value, key, index}'.match(forIteratorRE));//匹配不上\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "formatComponentName.html",
          "type": "blob",
          "size": 0.2587890625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n   <script>\r\n\r\n           var match = 'asdfsdfdd-asdf-\\.vue'.match(/([^/\\\\]+)\\.vue$/);\r\n           console.log(match)\r\n\r\n   </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "genCheckboxModel.js",
          "type": "blob",
          "size": 0.4130859375,
          "content": "var $$a = item.selected,\r\n    $$el = $event.target,\r\n    $$c = $$el.checked ? (true) : (false);\r\nif (Array.isArray($$a)) {\r\n    var $$v = \"index\",\r\n        $$i = _i($$a, $$v);\r\n    if ($$el.checked) {\r\n        $$i < 0 && ($set(item, \"selected\", $$a.concat([$$v])))\r\n    } else {\r\n        $$i > -1 && ($set(item, \"selected\", $$a.slice(0, $$i).concat($$a.slice($$i + 1))))\r\n    }\r\n} else {\r\n    $set(item, \"selected\", $$c)\r\n}"
        },
        {
          "name": "genStaticKeys.html",
          "type": "blob",
          "size": 0.6181640625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      function genStaticKeys(modules) {\r\n           let arr =  modules.reduce(\r\n                  //reduce 累计相加api\r\n               function (keys, m) {\r\n                       console.log(m.staticKeys)\r\n                     return keys.concat(m.staticKeys || [])\r\n               }\r\n                ,[]\r\n          )\r\n          console.log(arr)\r\n         return  arr.join(',');\r\n      }\r\n      console.log(genStaticKeys([{ staticKeys:1},{staticKeys:2},{staticKeys:3}]) )\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "getComputedStyle.html",
          "type": "blob",
          "size": 0.970703125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<style>\r\n    #elem-container{\r\n        position: absolute;\r\n        left:     100px;\r\n        top:      200px;\r\n        height:   100px;\r\n    }\r\n</style>\r\n<body>\r\n<div id=\"elem-container\">dummy</div>\r\n<div id=\"output\"></div>\r\n<script>\r\n\r\nfunction getTheStyle(){\r\nlet elem = document.getElementById(\"elem-container\");\r\n//    Window.getComputedStyle()方法返回一个对象，\r\n// 该对象在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有CSS属性的值\r\n// 私有的CSS属性值可以通过对象提供的API或通过简单地使用CSS属性名称进行索引来访问。\r\n let    style =window.getComputedStyle(elem,null)\r\nlet theCSSprop = style.getPropertyValue(\"height\");\r\n    console.log(style)\r\n    console.log(theCSSprop)\r\n\r\ndocument.getElementById(\"output\").innerHTML = theCSSprop;\r\n}\r\ngetTheStyle();\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "getHookArgumentsLength.html",
          "type": "blob",
          "size": 1.587890625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n\r\n      //判断数据 是否不等于 undefined或者null\r\n      function isDef(v) {\r\n          return v !== undefined && v !== null\r\n      }\r\n      //判断数据 是否是undefined或者null\r\n      function isUndef(v) {\r\n          return v === undefined || v === null\r\n      }\r\n      function getHookArgumentsLength(fn) {\r\n          if (isUndef(fn)) {\r\n              return false\r\n          }\r\n          console.log(fn)\r\n          var invokerFns = fn.fns;\r\n\r\n          if (isDef(invokerFns)) {\r\n              console.log(invokerFns)\r\n              // invoker\r\n              return getHookArgumentsLength(\r\n                      Array.isArray(invokerFns) ?\r\n                              invokerFns[0] :\r\n                              invokerFns\r\n              )\r\n          } else {\r\n              console.log(fn.length)\r\n              debugger\r\n              return (fn._length || fn.length) > 1\r\n          }\r\n      }\r\n      /*\r\n      数据必须是这样才返回真，也可以是n层fns只要规律是一样嵌套下去就行\r\n      var fn1=[1,2,3,4];\r\n            var fn={\r\n                fns:[\r\n\r\n                        [1,2,3,45,34]\r\n\r\n              ]\r\n           }\r\n      var fn2={\r\n          fns:[\r\n              {\r\n                  fns:[\r\n                      {\r\n                          fns:[[1,2,3,45,9]]\r\n                      }\r\n                  ]\r\n              }\r\n          ]\r\n      }\r\n       */\r\n\r\n      console.log(getHookArgumentsLength(fn))\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "getOwnPropertyNames.html",
          "type": "blob",
          "size": 0.5888671875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n   <script>\r\n          function  Person(name,age) {\r\n               this.name=name;\r\n               this.age=age;\r\n          }\r\n          Person.prototype={\r\n                 getAge:function () {\r\n                      return this.age;\r\n                 },\r\n                 getName:function () {\r\n                     return this.name;\r\n                 }\r\n          }\r\n    var ps= new Person('name',27);\r\n       console.log(Object.getOwnPropertyNames(ps))\r\n   </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "getShouldDecode.html",
          "type": "blob",
          "size": 0.533203125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    function getShouldDecode(href) {\r\n      var   div =   document.createElement('div');\r\n        div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\r\n        //html里title属性换行的方法： &#10;  <div title=\"123& #10;456\">text</div>\r\n        return div.innerHTML.indexOf('&#10;') > 0\r\n    }\r\n    console.log(getShouldDecode(false))\r\n    console.log(getShouldDecode(true))\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "getTransitionInfo.html",
          "type": "blob",
          "size": 5.0205078125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<style>\r\n    div\r\n    {\r\n        width:100px;\r\n        height: 100px;\r\n        background: red;\r\n        transition: width 2s;\r\n        -webkit-transition: width 2s; /* Safari */\r\n    }\r\n    div:hover {width:300px;}\r\n</style>\r\n<div  id=\"div\">\r\n\r\n</div>\r\n  <script>\r\n      var inBrowser=true;\r\n      var isIE9=false;\r\n      var hasTransition = inBrowser && !isIE9;\r\n      var TRANSITION = 'transition';\r\n      var ANIMATION = 'animation';\r\n\r\n      // Transition property/event sniffing\r\n      var transitionProp = 'transition';\r\n      var transitionEndEvent = 'transitionend';\r\n      var animationProp = 'animation';\r\n      var animationEndEvent = 'animationend';\r\n      var transformRE = /\\b(transform|all)(,|$)/;\r\n      function toMs(s) {\r\n          return Number(s.slice(0, -1)) * 1000\r\n      }\r\n\r\n      function getTimeout(delays, durations) {\r\n          console.log(delays)\r\n          console.log(durations)\r\n          debugger\r\n\r\n          /* istanbul ignore next */\r\n          while (delays.length < durations.length) {\r\n              delays = delays.concat(delays);\r\n          }\r\n\r\n          return Math.max.apply(null, durations.map(function (d, i) {\r\n              return toMs(d) + toMs(delays[i])\r\n          }))\r\n      }\r\n      //获取transition，或者animation 动画的类型，动画个数，动画执行时间\r\n      function getTransitionInfo(\r\n              el, //真实的dom\r\n              expectedType //动画类型\r\n      ) {\r\n          //  Window.getComputedStyle()方法返回一个对象，\r\n// 该对象在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有CSS属性的值\r\n// 私有的CSS属性值可以通过对象提供的API或通过简单地使用CSS属性名称进行索引来访问。\r\n          var styles = window.getComputedStyle(el); //\r\n          console.log('==styles==')\r\n          console.log(styles)\r\n//          var transitionProp = 'transition';\r\n          var transitionDelays = styles[transitionProp + 'Delay'].split(', '); //获取动画时间\r\n          var transitionDurations = styles[transitionProp + 'Duration'].split(', '); //获取动画时间\r\n          //transitionDelays=5s\r\n          var transitionTimeout = getTimeout(transitionDelays, transitionDurations);//获取动画时间\r\n          var animationDelays = styles[animationProp + 'Delay'].split(', ');//获取动画时间\r\n          var animationDurations = styles[animationProp + 'Duration'].split(', ');//获取动画时间\r\n          var animationTimeout = getTimeout(animationDelays, animationDurations); //获取动画时间\r\n          console.log('transitionDelays='+transitionDelays)\r\n          console.log('transitionDurations='+transitionDurations)\r\n          console.log('transitionTimeout='+transitionTimeout)\r\n          console.log('animationDelays='+animationDelays)\r\n          console.log('animationDurations='+animationDurations)\r\n          console.log('animationTimeout='+animationTimeout)\r\n\r\n\r\n          var type;  //动画类型\r\n          var timeout = 0; //动画时长\r\n          var propCount = 0; //动画个数\r\n          /* istanbul ignore if */\r\n          if (expectedType === TRANSITION) {// 判断动画是否是transition\r\n              if (transitionTimeout > 0) {\r\n                  type = TRANSITION;\r\n                  timeout = transitionTimeout;\r\n                  propCount = transitionDurations.length;\r\n              }\r\n          } else if (expectedType === ANIMATION) { //判断动画是否是animation\r\n              if (animationTimeout > 0) {\r\n                  type = ANIMATION;\r\n                  timeout = animationTimeout;\r\n                  propCount = animationDurations.length;\r\n              }\r\n          } else {\r\n              timeout = Math.max(transitionTimeout, animationTimeout);\r\n              type = timeout > 0\r\n                      ? transitionTimeout > animationTimeout\r\n                      ? TRANSITION\r\n                      : ANIMATION\r\n                      : null;\r\n              propCount = type\r\n                      ? type === TRANSITION\r\n                      ? transitionDurations.length\r\n                      : animationDurations.length\r\n                      : 0;\r\n          }\r\n          var hasTransform =\r\n                  type === TRANSITION &&\r\n                  transformRE.test(styles[transitionProp + 'Property']);\r\n          console.log(styles[transitionProp + 'Property']) //获取动画设置在哪些属性上面\r\n\r\n          return {\r\n              type: type,//过度或者css3动画类型\r\n              timeout: timeout, //执行动画的时长\r\n              propCount: propCount, //动画个数 执行多个动画\r\n              hasTransform: hasTransform //布尔值 是不是  transition 动画\r\n          }\r\n      }\r\n      console.log(getTransitionInfo(document.getElementById('div')))\r\n      document.getElementById('div').addEventListener('transition', function () {\r\n          debugger;\r\n          console.log('transition')\r\n      });\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "getTransitionInfo获取css3 Transition 信息.html",
          "type": "blob",
          "size": 8.841796875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<style>\r\n    div\r\n    {\r\n        width:100px;\r\n        height:100px;\r\n        background:red;\r\n\r\n        background:-moz-linear-gradient(top,#fff,#F6D66E);\r\n        background:-webkit-linear-gradient(top,#fff,#F6D66E);\r\n        background:-o-linear-gradient(top,#fff,#F6D66E);\r\n        background:-ms-linear-gradient(top,#fff,#F6D66E);\r\n        background:linear-gradient(top,#fff,#F6D66E);\r\n        -moz-transform:translate(600px,450px);\r\n        -webkit-transform:translate(600px,450px);\r\n        -o-transform:translate(600px,450px);\r\n        -ms-transform:translate(600px,450px);\r\n        transform:translate(600px,450px);\r\n\r\n        -moz-animation:animations2 3s ease,animations 6s ease 3s, animations1 9s ease 3s;\r\n        -webkit-animation:animations2 3s ease,animations 6s ease 3s, animations1 9s ease 3s;\r\n        -o-animation:animations2 3s ease,animations 6s ease 3s, animations1 9s ease 3s;\r\n        -ms-animation:animations2 3s ease,animations 6s ease 3s, animations1 9s ease 3s;\r\n        animation:animations2 3s ease,animations 6s ease 3s, animations1 9s ease 3s;\r\n\r\n    }\r\n\r\n    @-webkit-keyframes animations{\r\n        0%{-webkit-transform:translate(0,0);}\r\n        55%{-webkit-transform:translate(480px,360px);}\r\n        100%{-webkit-transform:translate(600px,450px);}\r\n    }\r\n    @-moz-keyframes animations{\r\n        0%{-moz-transform:translate(0,0);}\r\n        55%{-moz-transform:translate(480px,360px);}\r\n        100%{-moz-transform:translate(600px,450px);}\r\n    }\r\n    @-o-keyframes animations{\r\n        0%{-o-transform:translate(0,0);}\r\n        55%{-o-transform:translate(480px,360px);}\r\n        100%{-o-transform:translate(600px,450px);}\r\n    }\r\n    @-ms-keyframes animations{\r\n        0%{-ms-transform:translate(0,0);}\r\n        55%{-ms-transform:translate(480px,360px);}\r\n        100%{-ms-transform:translate(600px,450px);}\r\n    }\r\n    @keyframes animations{\r\n        0%{transform:translate(0,0);}\r\n        55%{transform:translate(480px,360px);}\r\n        100%{transform:translate(600px,450px);}\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    @-webkit-keyframes animations1{\r\n        0%{-webkit-transform:translate(0,0);}\r\n        55%{-webkit-transform:translate(180px,160px);}\r\n        100%{-webkit-transform:translate(100px,150px);}\r\n    }\r\n    @-moz-keyframes animations1{\r\n        0%{-moz-transform:translate(0,0);}\r\n        55%{-webkit-transform:translate(180px,160px);}\r\n        100%{-webkit-transform:translate(100px,150px);}\r\n    }\r\n    @-o-keyframes animations1{\r\n        0%{-o-transform:translate(0,0);}\r\n        55%{-webkit-transform:translate(180px,160px);}\r\n        100%{-webkit-transform:translate(100px,150px);}\r\n    }\r\n    @-ms-keyframes animations1{\r\n        0%{-ms-transform:translate(0,0);}\r\n        55%{-webkit-transform:translate(180px,160px);}\r\n        100%{-webkit-transform:translate(100px,150px);}\r\n    }\r\n    @keyframes animations1{\r\n        0%{transform:translate(0,0);}\r\n        55%{-webkit-transform:translate(180px,160px);}\r\n        100%{-webkit-transform:translate(100px,150px);}\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    @-moz-keyframes animations2{\r\n        0%{-moz-transform:translate(0,0);}\r\n        100%{-moz-transform:translate(0,0);}\r\n    }\r\n    @-webkit-keyframes animations2{\r\n        0%{-webkit-transform:translate(0,0);}\r\n        100%{-webkit-transform:translate(0,0);}\r\n    }\r\n    @-o-keyframes animations2{\r\n        0%{-o-transform:translate(0,0);}\r\n        100%{-o-transform:translate(0,0);}\r\n    }\r\n    @-ms-keyframes animations2{\r\n        0%{-ms-transform:translate(0,0);}\r\n        100%{-ms-transform:translate(0,0);}\r\n    }\r\n    @keyframes animations2{\r\n        0%{transform:translate(0,0);}\r\n        100%{transform:translate(0,0);}\r\n\r\n\r\n</style>\r\n<div  id=\"div\">\r\n\r\n</div>\r\n<div  id=\"div2\">\r\n\r\n</div>\r\n  <script>\r\n      var inBrowser=true;\r\n      var isIE9=false;\r\n      var hasTransition = inBrowser && !isIE9;\r\n      var TRANSITION = 'transition';\r\n      var ANIMATION = 'animation';\r\n\r\n      // Transition property/event sniffing\r\n      var transitionProp = 'transition';\r\n      var transitionEndEvent = 'transitionend';\r\n      var animationProp = 'animation';\r\n      var animationEndEvent = 'animationend';\r\n      var transformRE = /\\b(transform|all)(,|$)/;\r\n      function toMs(s) {\r\n          return Number(s.slice(0, -1)) * 1000\r\n      }\r\n\r\n      function getTimeout(\r\n                            delays, //延迟时间\r\n                            durations //执行的时间\r\n                          ) {\r\n          console.log(delays)\r\n          console.log(durations)\r\n          console.log(delays.length < durations.length)\r\n\r\n\r\n                              /* istanbul ignore next */\r\n                              while (delays.length < durations.length) {\r\n                                  delays = delays.concat(delays);\r\n                              }\r\n\r\n                         let max  = Math.max.apply(null, durations.map(function (d, i) {\r\n                                  return toMs(d) + toMs(delays[i])\r\n                              }))\r\n          console.log(max);\r\n\r\n          return max\r\n      }\r\n\r\n      //获取transition，或者animation 动画的类型，动画个数，动画执行时间\r\n      function getTransitionInfo(\r\n                                    el, //真实的dom\r\n                                    expectedType //动画类型\r\n                                      ) {\r\n          //  Window.getComputedStyle()方法返回一个对象，\r\n// 该对象在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有CSS属性的值\r\n// 私有的CSS属性值可以通过对象提供的API或通过简单地使用CSS属性名称进行索引来访问。\r\n          var styles = window.getComputedStyle(el); //\r\n          console.log('==styles==')\r\n          console.log(styles)\r\n//          var transitionProp = 'transition';\r\n          var transitionDelays = styles[transitionProp + 'Delay'].split(', '); //获取动画时间\r\n          var transitionDurations = styles[transitionProp + 'Duration'].split(', '); //获取动画时间\r\n          //transitionDelays=5s\r\n          var transitionTimeout = getTimeout(transitionDelays, transitionDurations);//获取动画时间\r\n          var animationDelays = styles[animationProp + 'Delay'].split(', ');//获取动画时间\r\n          var animationDurations = styles[animationProp + 'Duration'].split(', ');//获取动画时间\r\n          var animationTimeout = getTimeout(animationDelays, animationDurations); //获取动画时间\r\n          console.log('transitionDelays='+transitionDelays)\r\n          console.log('transitionDurations='+transitionDurations)\r\n          console.log('transitionTimeout='+transitionTimeout)\r\n          console.log('animationDelays='+animationDelays)\r\n          console.log('animationDurations='+animationDurations)\r\n          console.log('animationTimeout='+animationTimeout)\r\n\r\n\r\n          var type;  //动画类型\r\n          var timeout = 0; //动画时长\r\n          var propCount = 0; //动画个数\r\n          /* istanbul ignore if */\r\n          if (expectedType === TRANSITION) {// 判断动画是否是transition\r\n              if (transitionTimeout > 0) {\r\n                  type = TRANSITION;\r\n                  timeout = transitionTimeout;\r\n                  propCount = transitionDurations.length;\r\n              }\r\n          } else if (expectedType === ANIMATION) { //判断动画是否是animation\r\n              if (animationTimeout > 0) {\r\n                  type = ANIMATION;\r\n                  timeout = animationTimeout;\r\n                  propCount = animationDurations.length;\r\n              }\r\n          } else {\r\n              timeout = Math.max(transitionTimeout, animationTimeout);\r\n              type = timeout > 0\r\n                      ? transitionTimeout > animationTimeout\r\n                      ? TRANSITION\r\n                      : ANIMATION\r\n                      : null;\r\n              propCount = type\r\n                      ? type === TRANSITION\r\n                      ? transitionDurations.length\r\n                      : animationDurations.length\r\n                      : 0;\r\n          }\r\n          var hasTransform =\r\n                  type === TRANSITION &&\r\n                  transformRE.test(styles[transitionProp + 'Property']);\r\n          console.log(styles[transitionProp + 'Property']) //获取动画设置在哪些属性上面\r\n\r\n          return {\r\n              type: type,//过度或者css3动画类型\r\n              timeout: timeout, //执行动画的时长\r\n              propCount: propCount, //动画个数 执行多个动画\r\n              hasTransform: hasTransform //布尔值 是不是  transition 动画\r\n          }\r\n      }\r\n      console.log(getTransitionInfo(document.getElementById('div')))\r\n      document.getElementById('div').addEventListener('animations', function () {\r\n          debugger;\r\n           console.log('animations')\r\n      });\r\n\r\n\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "getTransitionInfo获取css3 Transition 信息2.html",
          "type": "blob",
          "size": 5.810546875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<style>\r\n    div{\r\n        width: 200px;\r\n        height: 200px;\r\n        margin: 0 auto;\r\n    }\r\n    .div1{\r\n        margin-top: 100px;\r\n        transform:perspective(500px) rotatey(0deg);\r\n        transform-style:preserve-3d;\r\n        position: relative;\r\n        border:1px solid #000000;\r\n    }\r\n    .div1 .div1_1{\r\n        background-color: #ff0000;\r\n        transform:rotatey(45deg);\r\n        position: absolute;\r\n        font-size: 80px;\r\n        line-height: 200px;\r\n        text-align: center;\r\n        top: 0;\r\n        left: 0;\r\n    }\r\n</style>\r\n<div class=\"div1\"  >\r\n    <div class=\"div1_1\" id=\"div\">1</div>\r\n</div>\r\n  <script>\r\n      var inBrowser=true;\r\n      var isIE9=false;\r\n      var hasTransition = inBrowser && !isIE9;\r\n      var TRANSITION = 'transition';\r\n      var ANIMATION = 'animation';\r\n\r\n      // Transition property/event sniffing\r\n      var transitionProp = 'transition';\r\n      var transitionEndEvent = 'transitionend';\r\n      var animationProp = 'animation';\r\n      var animationEndEvent = 'animationend';\r\n      var transformRE = /\\b(transform|all)(,|$)/;\r\n      function toMs(s) {\r\n          return Number(s.slice(0, -1)) * 1000\r\n      }\r\n\r\n      function getTimeout(delays, durations) {\r\n          /* istanbul ignore next */\r\n          while (delays.length < durations.length) {\r\n              delays = delays.concat(delays);\r\n          }\r\n\r\n          return Math.max.apply(null, durations.map(function (d, i) {\r\n              return toMs(d) + toMs(delays[i])\r\n          }))\r\n      }\r\n\r\n      function getmatrix(a,b,c,d){\r\n//更多http://www.5imoban.net/jiaocheng/jquery/201710182975.html\r\n          var aa=Math.round(180*Math.asin(a)/ Math.PI);\r\n\r\n          var bb=Math.round(180*Math.acos(b)/ Math.PI);\r\n\r\n          var cc=Math.round(180*Math.asin(c)/ Math.PI);\r\n\r\n          var dd=Math.round(180*Math.acos(d)/ Math.PI);\r\n\r\n          var deg=0;\r\n\r\n          if(aa==bb||-aa==bb){\r\n\r\n              deg=dd;\r\n\r\n          }else if(-aa+bb==180){\r\n\r\n              deg=180+cc;\r\n\r\n          }else if(aa+bb==180){\r\n\r\n              deg=360-cc||360-dd;\r\n\r\n          }\r\n\r\n          return deg>=360?0:deg;\r\n\r\n          //return (aa+','+bb+','+cc+','+dd);\r\n\r\n      }\r\n\r\n\r\n      //获取transition，或者animation 动画的类型，动画个数，动画执行时间\r\n      function getTransitionInfo(\r\n              el, //真实的dom\r\n              expectedType //动画类型\r\n      ) {\r\n          //  Window.getComputedStyle()方法返回一个对象，\r\n// 该对象在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有CSS属性的值\r\n// 私有的CSS属性值可以通过对象提供的API或通过简单地使用CSS属性名称进行索引来访问。\r\n          var styles = window.getComputedStyle(el); //\r\n          console.log('==styles==')\r\n          console.log(styles)\r\n//          var transitionProp = 'transition';\r\n          var transitionDelays = styles[transitionProp + 'Delay'].split(', '); //获取动画时间\r\n          var transitionDurations = styles[transitionProp + 'Duration'].split(', '); //获取动画时间\r\n          //transitionDelays=5s\r\n          var transitionTimeout = getTimeout(transitionDelays, transitionDurations);//获取动画时间\r\n          var animationDelays = styles[animationProp + 'Delay'].split(', ');//获取动画时间\r\n          var animationDurations = styles[animationProp + 'Duration'].split(', ');//获取动画时间\r\n          var animationTimeout = getTimeout(animationDelays, animationDurations); //获取动画时间\r\n          console.log('transitionDelays='+transitionDelays)\r\n          console.log('transitionDurations='+transitionDurations)\r\n          console.log('transitionTimeout='+transitionTimeout)\r\n          console.log('animationDelays='+animationDelays)\r\n          console.log('animationDurations='+animationDurations)\r\n          console.log('animationTimeout='+animationTimeout)\r\n\r\n\r\n          var type;  //动画类型\r\n          var timeout = 0; //动画时长\r\n          var propCount = 0; //动画个数\r\n          /* istanbul ignore if */\r\n          if (expectedType === TRANSITION) {// 判断动画是否是transition\r\n              if (transitionTimeout > 0) {\r\n                  type = TRANSITION;\r\n                  timeout = transitionTimeout;\r\n                  propCount = transitionDurations.length;\r\n              }\r\n          } else if (expectedType === ANIMATION) { //判断动画是否是animation\r\n              if (animationTimeout > 0) {\r\n                  type = ANIMATION;\r\n                  timeout = animationTimeout;\r\n                  propCount = animationDurations.length;\r\n              }\r\n          } else {\r\n              timeout = Math.max(transitionTimeout, animationTimeout);\r\n              type = timeout > 0\r\n                      ? transitionTimeout > animationTimeout\r\n                      ? TRANSITION\r\n                      : ANIMATION\r\n                      : null;\r\n              propCount = type\r\n                      ? type === TRANSITION\r\n                      ? transitionDurations.length\r\n                      : animationDurations.length\r\n                      : 0;\r\n          }\r\n          var hasTransform =\r\n                  type === TRANSITION &&\r\n                  transformRE.test(styles[transitionProp + 'Property']);\r\n          console.log(styles[transitionProp + 'Property']) //获取动画设置在哪些属性上面\r\n\r\n          return {\r\n              type: type,//过度或者css3动画类型\r\n              timeout: timeout, //执行动画的时长\r\n              propCount: propCount, //动画个数 执行多个动画\r\n              hasTransform: hasTransform //布尔值 是不是  transition 动画\r\n          }\r\n      }\r\n      console.log(getTransitionInfo(document.getElementById('div')))\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "getType.html",
          "type": "blob",
          "size": 0.6357421875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      //只有函数声明才有效，函数表达式或者匿名函数匹配不上\r\n      function getType(fn) {\r\n          var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\r\n          return match ? match[1] : ''\r\n      }\r\n      var ccde=function ccd (a,b,c) {\r\n\r\n      }\r\n      console.log(getType(true));\r\n      console.log(getType( ccde));\r\n      console.log(getType( function ccda (a,b,c) {\r\n\r\n      }));\r\n      console.log(getType('abc'));\r\n      console.log(getType([]));\r\n\r\n  </script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "getTypeIndex.html",
          "type": "blob",
          "size": 1.7890625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      /**\r\n       * Use function string name to check built-in types,\r\n       * because a simple equality check will fail when running\r\n       * across different vms / iframes.\r\n       * 检查函数是否是函数声明  如果是函数表达式或者匿名函数是匹配不上的\r\n       *\r\n       *\r\n       */\r\n      function getType(fn) {\r\n          var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\r\n          return match ? match[1] : ''\r\n      }\r\n\r\n      //判断两个函数声明是否是相等\r\n      function isSameType(a, b) {\r\n          return getType(a) === getType(b)\r\n      }\r\n      //判断expectedTypes 中的函数和 type 函数是否有相等的如有有则返回索引index 如果没有则返回-1\r\n\r\n      function getTypeIndex(type, expectedTypes) {\r\n          //如果不是数组直接比较 如果真则返回0\r\n          if (!Array.isArray(expectedTypes)) {\r\n              return isSameType(expectedTypes, type) ? 0 : -1\r\n          }\r\n          for (var i = 0, len = expectedTypes.length; i < len; i++) {\r\n              //如果是数组则寻找索引\r\n              if (isSameType(expectedTypes[i], type)) {\r\n                  return i\r\n              }\r\n          }\r\n          return -1\r\n      }\r\n      //Boolean 传一个布尔值  但是 一般是函数或者数组函数才有意义，而且是函数声明的函数并不是 函数表达式prop.type 也需要是函数\r\n      //返回的是相同的索引  判断 属性类型定义的是否是Boolean\r\n      var booleanIndex = getTypeIndex(Boolean, Boolean);\r\n      var stringIndex = getTypeIndex(String, 'a');\r\n\r\n      console.log(booleanIndex)\r\n      console.log(stringIndex)\r\n\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "hookRE.html",
          "type": "blob",
          "size": 0.345703125,
          "content": "<html>\r\n    <head>\r\n        <meta>\r\n    </head>\r\n    <body>\r\n        <script>\r\n\r\n                     var hookRE = /^hook:/; \r\n \r\n                     console.log('hook'.match(hookRE))\r\n                  console.log('hook:'.match(hookRE))\r\n                  console.log('hook:abcd'.match(hookRE))\r\n               \r\n        </script>\r\n    </body>\r\n</html>"
        },
        {
          "name": "hyphenate.html",
          "type": "blob",
          "size": 1.3603515625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n   <script>\r\n       /*\r\n        * var aFn =  cached(function(string){\r\n        *\r\n        *      return string\r\n        *  })\r\n        * aFn(string1);\r\n        * aFn(string2);\r\n        * aFn(string);\r\n        * aFn(string1);\r\n        * aFn(string2);\r\n        *\r\n        * aFn 函数会多次调用 里面就能体现了\r\n        *  用对象去缓存记录函数\r\n        * */\r\n\r\n       function cached(fn) {\r\n           var cache = Object.create(null);\r\n           return (function cachedFn(str) {\r\n               var hit = cache[str];\r\n               return hit || (cache[str] = fn(str))\r\n           })\r\n       }\r\n\r\n       var hyphenateRE = /\\B([A-Z])/g;\r\n//       * \\B的用法\r\n//       \\B是非单词分界符，即可以查出是否包含某个字，如“北斗狼神”中是否包含“狼”这个字。\r\n\r\n//       \\b单词边界，如果字符的左右两边有空白字符则为单词边界\r\n//       \\B'非单词边界'字符左右两边没有空白字符\r\n       //就是匹配\r\n       var hyphenate = cached(function (str) {\r\n           return str.replace(hyphenateRE, '-$1').toLowerCase();\r\n       });\r\n       console.log(hyphenate('ddAbc  '))\r\n       console.log(hyphenate('DdAbc  '))\r\n       console.log(hyphenate('Dd Abc  '))\r\n\r\n   </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "hyphenateRE.html",
          "type": "blob",
          "size": 2.1787109375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n\r\n    /**\r\n     * Create a cached version of a pure function.\r\n     */\r\n    /**\r\n     * Create a cached version of a pure function.\r\n     * 创建纯函数的缓存版本。\r\n     * 创建一个函数，缓存，再return 返回柯里化函数\r\n     * 闭包用法\r\n     */\r\n    /***********************************************************************************************\r\n     *函数名 ：cached\r\n     *函数功能描述 ： 创建纯函数的缓存版本。 创建一个函数，缓存，再return 返回柯里化函数 闭包用法\r\n     *函数参数 ： fn 函数\r\n     *函数返回值 ：    fn\r\n     *作者 ：\r\n     *函数创建日期 ：\r\n     *函数修改日期 ：\r\n     *修改人 ：\r\n     *修改原因 ：\r\n     *版本 ：\r\n     *历史版本 ：\r\n     ***********************************************************************************************/\r\n\r\n    /*\r\n     * var aFn =  cached(function(string){\r\n     *\r\n     *      return string\r\n     *  })\r\n     * aFn(string1);\r\n     * aFn(string2);\r\n     * aFn(string);\r\n     * aFn(string1);\r\n     * aFn(string2);\r\n     *\r\n     * aFn 函数会多次调用 里面就能体现了\r\n     *  用对象去缓存记录函数\r\n     * */\r\n\r\n    function cached(fn) {\r\n        var cache = Object.create(null);\r\n        return (function cachedFn(str) {\r\n            var hit = cache[str];\r\n            return hit || (cache[str] = fn(str))\r\n        })\r\n    }\r\n\r\n\r\n    /**\r\n     * Hyphenate a camelCase string.\r\n     * \\B的用法\r\n     \\B是非单词分界符，即可以查出是否包含某个字，如“ABCDEFGHIJK”中是否包含“BCDEFGHIJK”这个字。\r\n     */\r\n    var hyphenateRE = /\\B([A-Z])/g;\r\n\r\n    var hyphenate = cached(function (str) {\r\n        //大写字母，加完减号又转成小写了 比如把驼峰 aBc 变成了 a-bc\r\n        //匹配大写字母并且两面不是空白的 替换成 '-' + '字母' 在全部转换成小写\r\n        return str.replace(hyphenateRE, '-$1').toLowerCase();\r\n    });\r\n    console.log('ABCDEFGHIJK'.match(hyphenateRE))\r\n\r\n    console.log(hyphenate('aBc'))\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "ieNSBug.html",
          "type": "blob",
          "size": 0.2236328125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n\r\n</head>\r\n\r\n<script>\r\n    var ieNSBug = /^xmlns:NS\\d+/;\r\n\r\n    console.log('xmlns:NS1'.match(ieNSBug))\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 1.84765625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n    <script src=\"https://cdn.bootcss.com/vue-router/2.7.0/vue-router.min.js\"></script>\r\n</head>\r\n<div id=\"app\">\r\n    <h1>Hello App!</h1>\r\n    <p>\r\n        <!-- 使用 router-link 组件来导航. -->\r\n        <!-- 通过传入 `to` 属性指定链接. -->\r\n        <!-- <router-link> 默认会被渲染成一个 `<a>` 标签 -->\r\n        <router-link to=\"/foo\">Go to Foo</router-link>\r\n        <router-link to=\"/bar\">Go to Bar</router-link>\r\n    </p>\r\n    <!-- 路由出口 -->\r\n    <!-- 路由匹配到的组件将渲染在这里 -->\r\n    <router-view></router-view>\r\n</div>\r\n\r\n<script>\r\n    // 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)\r\n\r\n    // 1. 定义（路由）组件。\r\n    // 可以从其他文件 import 进来\r\n    const Foo = { template: '<div>foo</div>' }\r\n    const Bar = { template: '<div>bar</div>' }\r\n\r\n    // 2. 定义路由\r\n    // 每个路由应该映射一个组件。 其中\"component\" 可以是\r\n    // 通过 Vue.extend() 创建的组件构造器，\r\n    // 或者，只是一个组件配置对象。\r\n    // 我们晚点再讨论嵌套路由。\r\n    const routes = [\r\n        { path: '/foo', component: Foo },\r\n        { path: '/bar', component: Bar }\r\n    ]\r\n\r\n    // 3. 创建 router 实例，然后传 `routes` 配置\r\n    // 你还可以传别的配置参数, 不过先这么简单着吧。\r\n    const router = new VueRouter({\r\n        routes // （缩写）相当于 routes: routes\r\n    })\r\n\r\n    // 4. 创建和挂载根实例。\r\n    // 记得要通过 router 配置参数注入路由，\r\n    // 从而让整个应用都有路由功能\r\n    const app = new Vue({\r\n        router\r\n    }).$mount('#app')\r\n\r\n    // 现在，应用已经启动了！\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "indexOf.html",
          "type": "blob",
          "size": 0.203125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n\r\n</head>\r\n\r\n<script>\r\n   let str='<ing <';\r\n    console.log(str.indexOf('<',1))\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "inline-template.html",
          "type": "blob",
          "size": 1.732421875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n\r\n</head>\r\n<div id=\"x\">\r\n    header\r\n    <my-component></my-component>\r\n    foot\r\n</div>\r\n<div id=\"x2\">\r\n    header\r\n    <my-component inline-template>\r\n        <div>\r\n            <p> These are compiled as the component's own template</p>\r\n            <p> Not parent's transclusion content</p>\r\n            <p>{{message}}</p>\r\n        </div>\r\n    </my-component>\r\n    foot\r\n</div>\r\n\r\n<script>\r\n    var xx = new Vue({\r\n        el: \"#x\",\r\n        data: {\r\n            message: 444,\r\n        },\r\n        components: {\r\n            \"my-component\": {\r\n                data:function () {\r\n                    return    {\r\n                        message:'100'\r\n                    }\r\n                },\r\n                template: `<div>\r\n                  <p> These are compiled as the component's own template</p>\r\n                  <p> Not parent's transclusion content</p>\r\n                  <p> {{message}}</p>\r\n            </div>`\r\n            }\r\n        }\r\n    })\r\n    //这时可以使用内联模版\r\n    var xx = new Vue({\r\n        el: \"#x2\",\r\n        data:{\r\n            message: 'abc',\r\n        },\r\n        components: {\r\n            \"my-component\": {\r\n                data:function () { //组件只能用返回函数获取值\r\n                    return    {\r\n                        message:'100'\r\n                    }\r\n                },\r\n                template: `<div>\r\n                  <p> These are compiled as the component's own template</p>\r\n                  <p> Not parent's transclusion content</p>\r\n                  <p>{{message}}</p>\r\n            </div>`\r\n            }\r\n        }\r\n    })\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "is.html",
          "type": "blob",
          "size": 3.259765625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n\r\n</head>\r\n\r\n<div id=\"app\">\r\n    <!--\r\n          1.在这里调用组件。\r\n          2.vue初始化实例配置项，挂载到#app,并调用了子组件（自定义组件first_component），通过在子组件内\r\n          提前定义props:['pass_c']接收它的父组件传下来的值,a是初始化vue实例配置项的变量， 这种方式就是组件解耦使用。\r\n    -->\r\n    <first_component :pass_c=\"a\">\r\n\r\n    </first_component>\r\n\r\n    <div style=\"border:1px solid greenyellow;padding:20px\">\r\n        <h2>is 与 :is 的用法 ,区别如下：</h2>\r\n        <div is=\"e\"></div>\r\n        <div :is=\"f\"></div>\r\n    </div>\r\n</div>\r\n\r\n<script>\r\n    var four_component = { // 自定义组件4\r\n        template:`<h2>:is -- 要在new Vue定义一个变量才能用 :is='f' 在#app 模板调用,否则报错 'undefined'</h2>`\r\n    }\r\n\r\n    var third_component = { // 自定义组件3\r\n        template:`<h2>is -- 要在components注册这个组件，才能用 is 引用second_component组件</h2>`\r\n    }\r\n\r\n    var second_component = { // 自定义组件2\r\n        template: `<div>\r\n                        <div>\r\n                                <del>{{ c }} </del> <br>\r\n                                <del>{{ pass_d }} </del>\r\n                        </div>\r\n                    </div>`,\r\n        data(){\r\n            return {\r\n                c: 'c_value come form second'\r\n            }\r\n        },\r\n        props:['pass_d']\r\n    }\r\n\r\n    var first_component = { // 自定义组件1\r\n        //注意这里template 最外层只能有一个div，不能出现并列两个div\r\n        template: `<div>\r\n                        <div style=\"border:1px solid red;padding:20px;\">\r\n                                <h2 style=\"color:red;\">first_component: </h2><b>{{ b }}</b><br><b>{{ pass_c }}</b>\r\n                        </div>\r\n                        <div style=\"border:1px solid green;padding:20px;\">\r\n                                <h2 style=\"color:red;\">second_component: </h2>\r\n                                <second_component :pass_d=\"d\"></second_component>\r\n                        </div>\r\n                   </div>`, // 定义组件的模板\r\n        data(){ // 官方规定组件里的data必须是函数，才不会在同组件中相互干扰\r\n            return { // 返回的变量可以直接在该组件的template上使用\r\n                b:'b_value come from first',\r\n                d: 'd_value come from first'\r\n            }\r\n        },\r\n        props: ['pass_c'], // 用于接收其父组件的传值\r\n        components: { // 还可以调用子组件\r\n            second_component : second_component\r\n        }\r\n    }\r\n\r\n    new Vue({ // 实例化Vue\r\n        el:\"#app\", // 挂载到#app\r\n        components:{ //局部注册组件\r\n            first_component : first_component, // 一定要在实例上注册了才能在html文件中使用\r\n            e : third_component ,// 要在components注册这个组件，才能用is 引用 third_component 组件\r\n        },\r\n        data:{\r\n            a : 'a_value come from new Vue',\r\n            f : four_component  // 用:is 引用four_component组件，要预先定义f变量\r\n        }\r\n    })\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "isReserved.html",
          "type": "blob",
          "size": 0.3515625,
          "content": "<html>\r\n<head>\r\n    <meta>\r\n</head>\r\n<body>\r\n<script>\r\n\r\n    /**\r\n     * Check if a string starts with $ or _\r\n     * 检查一个字符串是否以$或者_开头\r\n     */\r\n    function isReserved(str) {\r\n        var c = (str + '').charCodeAt(0);\r\n        return c === 0x24 || c === 0x5F\r\n    }\r\n    console.log(isReserved('_aaa'))\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "isUnknownElement.html",
          "type": "blob",
          "size": 3.7919921875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>Title</title>\r\n  </head>\r\n  <body>\r\n    <script>\r\n      /**\r\n       * Make a map and return a function for checking if a key\r\n       * is in that map.\r\n       *\r\n       *  //map 对象中的[name1,name2,name3,name4]  变成这样的map{name1:true,name2:true,name3:true,name4:true}\r\n       *  并且传进一个key值取值，这里用到策略者模式\r\n       */\r\n      function makeMap(str, expectsLowerCase) {\r\n        var map = Object.create(null); //创建一个新的对象\r\n        var list = str.split(\",\"); //按字符串,分割\r\n        for (var i = 0; i < list.length; i++) {\r\n          map[list[i]] = true; //map 对象中的[name1,name2,name3,name4]  变成这样的map{name1:true,name2:true,name3:true,name4:true}\r\n        }\r\n        return expectsLowerCase\r\n          ? function(val) {\r\n              return map[val.toLowerCase()];\r\n            } //返回一个柯里化函数 toLowerCase转换成小写\r\n          : function(val) {\r\n              return map[val];\r\n            }; //返回一个柯里化函数 并且把map中添加一个 属性建\r\n      }\r\n      //isHTMLTag 函数，验证是否是html中的原始标签\r\n      var isHTMLTag = makeMap(\r\n        \"html,body,base,head,link,meta,style,title,\" +\r\n          \"address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,\" +\r\n          \"div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,\" +\r\n          \"a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,\" +\r\n          \"s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,\" +\r\n          \"embed,object,param,source,canvas,script,noscript,del,ins,\" +\r\n          \"caption,col,colgroup,table,thead,tbody,td,th,tr,\" +\r\n          \"button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,\" +\r\n          \"output,progress,select,textarea,\" +\r\n          \"details,dialog,menu,menuitem,summary,\" +\r\n          \"content,element,shadow,template,blockquote,iframe,tfoot\"\r\n      );\r\n      var isSVG = makeMap(\r\n        \"svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,\" +\r\n          \"foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,\" +\r\n          \"polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view\",\r\n        true\r\n      );\r\n      //保留标签 判断是不是真的是 html 原有的标签 或者svg标签\r\n      var isReservedTag = function(tag) {\r\n        return isHTMLTag(tag) || isSVG(tag);\r\n      };\r\n      var unknownElementCache = Object.create(null);\r\n\r\n      //判断是不是真的是 html 原有的标签，判断是否是浏览器标准标签\r\n      function isUnknownElement(tag) {\r\n        /* istanbul ignore if */\r\n      \r\n\r\n        //保留标签 判断是不是真的是 html 原有的标签\r\n        if (isReservedTag(tag)) {\r\n          return false;\r\n        }\r\n        //把标签转化成小写\r\n        tag = tag.toLowerCase();\r\n        /* istanbul ignore if */\r\n        //缓存未知标签\r\n        if (unknownElementCache[tag] != null) {\r\n          //如果缓存有则返回出去\r\n          return unknownElementCache[tag];\r\n        }\r\n        //创建该标签\r\n        var el = document.createElement(tag);\r\n        //判断是否是含有 - 的组件标签\r\n        if (tag.indexOf(\"-\") > -1) {\r\n          // http://stackoverflow.com/a/28210364/1070244\r\n          return (unknownElementCache[tag] =\r\n            el.constructor === window.HTMLUnknownElement ||\r\n            el.constructor === window.HTMLElement);\r\n        } else {\r\n          //正则判断标签是否是HTMLUnknownElement\r\n          return (unknownElementCache[tag] = /HTMLUnknownElement/.test(\r\n            el.toString()\r\n          ));\r\n        }\r\n      }\r\n      console.log(isUnknownElement(\"html\"));\r\n    </script>\r\n  </body>\r\n</html>\r\n"
        },
        {
          "name": "javascript 匿名函数自执行调用.html",
          "type": "blob",
          "size": 0.5146484375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<script>\r\n    (function(){\r\n        console.log(1);\r\n    })();\r\n    (function(){\r\n        console.log(2);\r\n    }());\r\n    !function(){\r\n        console.log(3);\r\n    }();\r\n    ~function(){\r\n        console.log(4);\r\n    }();\r\n    +function(){\r\n        console.log(5);\r\n    }();\r\n    -function(){\r\n        console.log(6);\r\n    }();\r\n    void function(){\r\n        console.log(7);\r\n    }()\r\n\r\n\r\n\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "js Worker 线程.docx",
          "type": "blob",
          "size": 441.2744140625,
          "content": null
        },
        {
          "name": "js 字符串截取方法.html",
          "type": "blob",
          "size": 1.3623046875,
          "content": "<html>\r\n<head>\r\n    <meta>\r\n</head>\r\n<body>\r\n<script>\r\n    var str='abcedfg|hijk';\r\n//split() 使用一个指定的分隔符把一个字符串分割存储到数组\r\n    console.log(str.split(str))\r\n\r\n    //  stringObject.substring(start,stop)\r\n//    start\t必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。\r\n//    stop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。\r\n    console.log(str.substring(0))\r\n\r\n    //stringObject.substr(start,length)\r\n//    start\t必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。\r\n//    length\t可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。\r\n    console.log(str.substr(-1))\r\n\r\n    //slice string.slice(start,end)\r\n//    解释：slice方法复制string的一部分来构造一个新的字符串，用法与参数匀和数组的slice方法一样;end参数等于你要取的最后一个字符的位置值加上1\r\n    console.log(str.slice(0,3))\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "js 数组截取.html",
          "type": "blob",
          "size": 1.5400390625,
          "content": "<html>\r\n<head>\r\n    <meta>\r\n</head>\r\n<body>\r\n<script>\r\n    //    arrayObject.slice(start,end)\r\n    //    start\t必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。\r\n    //    end\t可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。\r\n    //返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。\r\n    //请注意，该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。\r\n    var arr = [1, 2, 3, 4, 5];\r\n    console.log(arr);\r\n    console.log(arr.slice(1));\r\n\r\n//    arrayObject.splice(index,howmany,item1,.....,itemX)\r\n//    index\t必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。\r\n//    howmany\t必需。要删除的项目数量。如果设置为 0，则不会删除项目。\r\n//    item1, ..., itemX\t可选。向数组添加的新项目。\r\n //注意该方法会直接修改数组\r\n    console.log(arr.splice(1,0,0)) //在位置1 插入一个0，没有返回值\r\n    console.log(arr)\r\n    console.log(arr.splice(0,1)) //删除位置0的数据。数量是1\r\n    console.log(arr)\r\n\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "js_watch.html",
          "type": "blob",
          "size": 0.6328125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n <meta charset=\"UTF-8\">\r\n <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n// 有兼容性问题通常来讲,你应该尽量避免使用 watch()和  unwatch() 这两个方法。因为只有 Gecko 实现了这两个方法，并且它们主要是为了在调试方便。另外，使用 watchpoint 对性能有严重的负面影响\r\n var o = { p: 1 };\r\n\r\n o.watch('p', function (id, oldval, newval) {\r\n  console.log('o.' + id + ' changed from ' + oldval + ' to ' + newval);\r\n  return newval;\r\n });\r\n\r\n o.p = 2;\r\n o.p = 3;\r\n delete o.p;\r\n o.p = 4;\r\n\r\n o.unwatch('p');\r\n o.p = 5;\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "js_watch1.html",
          "type": "blob",
          "size": 1.2041015625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n <meta charset=\"UTF-8\">\r\n <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n // 有兼容性问题通常来讲,你应该尽量避免使用 watch()和  unwatch() 这两个方法。因为只有 Gecko 实现了这两个方法，并且它们主要是为了在调试方便。另外，使用 watchpoint 对性能有严重的负面影响\r\n Person = function(name,age) {\r\n  this.watch(\"age\", Person.prototype._isValidAssignment);\r\n  this.watch(\"name\", Person.prototype._isValidAssignment);\r\n  this.name = name;\r\n  this.age = age;\r\n }\r\n\r\n Person.prototype.toString = function() {\r\n  return this.name + \", \" + this.age;\r\n };\r\n\r\n Person.prototype._isValidAssignment = function(id, oldval, newval) {\r\n  if (id === \"name\" && (!newval || newval.length > 30)) {\r\n   throw new RangeError(\"不合法的名字 \" + this);\r\n  }\r\n  if (id === \"age\"  && (newval < 0 || newval > 200)) {\r\n   throw new RangeError(\"不合法的年龄 \" + this);\r\n  }\r\n  return newval;\r\n }\r\n\r\n will = new Person(\"Will\", 29);\r\n print(will);   // Will, 29\r\n\r\n try {\r\n  will.name = \"\";\r\n } catch (e) {\r\n  //print(e);\r\n  console.log(e);\r\n }\r\n\r\n try {\r\n  will.age = -4;\r\n } catch (e) {\r\n  console.log(e);\r\n }\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "js中with、this的用法.html",
          "type": "blob",
          "size": 0.890625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n//      with 语句 为一个或一组语句指定默认对象。\r\n//      用法：with (<对象>) <语句>;\r\n//      with 语句通常用来缩短特定情形下必须写的代码量。在下面的例子中，请注意 Math 的重复使用：\r\nvar x = Math.cos(3 * Math.PI) + Math.sin(Math.LN10);\r\nvar y = Math.tan(14 * Math.E);\r\nconsole.log(x)\r\nconsole.log(y)\r\nwith (Math) {\r\n   var x = cos(3 * PI) + sin(LN10);\r\n    var  y = tan(14 * E);\r\n    console.log(x)\r\n    console.log(y)\r\n}\r\nconsole.log(this)\r\nwith (this) {\r\n    console.log(this)\r\n}\r\nfunction Person(){\r\n     this.name='yao'\r\n}\r\nvar name = 'guan'\r\nwith (new  Person()) { //绑定tis 但是如果声明有是私有变量优先使用私有变量。\r\n    var name='shou'\r\n    console.log(name)\r\n}\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "js命令者.html",
          "type": "blob",
          "size": 0.8466796875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<button>按钮</button>\r\n<script>\r\n     var btn1 = document.querySelector('button');\r\n    // 发送者\r\n    var setCommond = function(button, fn) {\r\n        button.onclick = function() {\r\n            fn()\r\n        }\r\n    };\r\n    // 执行命令者\r\n    var menu = {\r\n        reFresh: function() {\r\n            console.log(\"刷新\");\r\n        },\r\n        add: function() {\r\n            console.log(\"增加\");\r\n        },\r\n        delete: function() {\r\n            console.log(\"删除\");\r\n        }\r\n    };\r\n    // 命令对象\r\n    var commondObj = function(reciver) {\r\n        return function() {\r\n            reciver.reFresh();\r\n        }\r\n    };\r\n    var commondObj1 = commondObj(menu);\r\n    setCommond(btn1, commondObj1);\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "js如何判断数组含有某值，in，includes，inArray，indexOf方案对比.html",
          "type": "blob",
          "size": 0.294921875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n   let arr = ['a','b','c'];\r\n   console.log(\"1:\",\"a\" in arr);\r\n   console.log(\"2:\",arr.indexOf('a'));\r\n   console.log(\"3:\",arr.includes('a'));\r\n\r\n\r\n   </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "js观察者.png",
          "type": "blob",
          "size": 166.9130859375,
          "content": null
        },
        {
          "name": "js观察者.xmind",
          "type": "blob",
          "size": 93.724609375,
          "content": null
        },
        {
          "name": "js观察者_1.xmind",
          "type": "blob",
          "size": 99.4423828125,
          "content": null
        },
        {
          "name": "lastIndexOf.html",
          "type": "blob",
          "size": 0.3203125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      console.log('abcde'.lastIndexOf(']'))\r\n      let str = 'data.object.info.age';\r\n      let lastIndex =str.lastIndexOf('.')\r\n      console.log(str.slice(0, lastIndex))\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "length.html",
          "type": "blob",
          "size": 0.314453125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n   <script>\r\n         let arr=[];\r\n         arr.length=10\r\n        console.log(arr)\r\n         arr.push('ewr')\r\n\r\n       //  arr.splice(10, 1, 'ewr');\r\n         console.log(arr)\r\n   </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "length0.html",
          "type": "blob",
          "size": 0.2822265625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n       var arr=[1,2,3,4,5,6];\r\n      var  arr1 = arr.slice();\r\n     arr.length=0;\r\n       console.log(arr1)\r\n       console.log(arr)\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "modifierRE.html",
          "type": "blob",
          "size": 0.240234375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    var modifierRE = /\\.[^.]+/g; //\r\n  console.log('data.object.info.age'.match(modifierRE));\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "mount.html",
          "type": "blob",
          "size": 0.44921875,
          "content": "<!DOCTYPE html>\r\n<html>\r\n<meta charset=\"UTF-8\">\r\n<body>\r\n\r\n<script>\r\n   function Person() {\r\n\r\n   }\r\n   Person.prototype={\r\n//       mount:function(){\r\n//             console.log('mount')\r\n////            return   mount();\r\n//\r\n//\r\n//       }\r\n   }\r\n   var mount  =  Person.prototype.mount||()=>{};\r\n   Person.prototype.mount=function () {\r\n       mount.call(this);\r\n   }\r\n  var  _person=new Person()\r\n   _person.mount();\r\n\r\n</script>\r\n\r\n\r\n\r\n</body>\r\n</html>\r\n"
        },
        {
          "name": "new Array(val).html",
          "type": "blob",
          "size": 0.1328125,
          "content": "<!DOCTYPE html>\r\n<html>\r\n<meta charset=\"UTF-8\">\r\n<body>\r\n\r\n<script>\r\n  console.log(new Array(10))\r\n\r\n</script>\r\n\r\n\r\n\r\n</body>\r\n</html>\r\n"
        },
        {
          "name": "new Proxy.html",
          "type": "blob",
          "size": 1.232421875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      var doc = new Proxy({}, {\r\n          \"get\": function (oTarget, sKey) {\r\n              console.log('get')\r\n\r\n          },\r\n          \"set\": function (oTarget, sKey, vValue) {\r\n              console.log('set')\r\n\r\n\r\n          },\r\n          \"deleteProperty\": function (oTarget, sKey) {\r\n\r\n              console.log('deleteProperty')\r\n\r\n          },\r\n          \"enumerate\": function (oTarget, sKey) {\r\n              console.log('enumerate')\r\n\r\n          },\r\n          \"ownKeys\": function (oTarget, sKey) {\r\n              console.log('ownKeys')\r\n\r\n          },\r\n          \"has\": function (oTarget, sKey) {\r\n              console.log('has')\r\n              console.log(oTarget)\r\n              console.log(sKey)\r\n              return oTarget[sKey]\r\n          },\r\n          \"defineProperty\": function (oTarget, sKey, oDesc) {\r\n              console.log('defineProperty')\r\n          },\r\n          \"getOwnPropertyDescriptor\": function (oTarget, sKey) {\r\n              console.log('getOwnPropertyDescriptor')\r\n          },\r\n      });\r\n      doc.a=10;\r\n      console.log(doc.a)\r\n     console.log('a' in doc)\r\n\r\n\r\n\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "newFunction.html",
          "type": "blob",
          "size": 1.1708984375,
          "content": "<!DOCTYPE html>\r\n<html>\r\n<meta charset=\"UTF-8\">\r\n<body>\r\n\r\n\r\n  new function  用来检测js错误 可以替代eval() 字符串转js代码检查  字符串编译解析成js指向Function，防止有些前端编译工具报错\r\n\r\n\r\n<script>\r\n    var stringScript=` function random(min, max) {\r\n        return min + Math.floor((max - min + 1) * Math.random());\r\n    }\r\n\r\n     //实例化对象\r\n    var CalculatorChannel = new MessageChannel();\r\n\r\n    var newsOne = CalculatorChannel.port1; //端口1\r\n    var newsTow = CalculatorChannel.port2; //端口2\r\n\r\n\r\n    newsOne.onmessage = function(event) {\r\n        //console.log(\"port1收到来自port2的数据：\" + event.data);\r\n        var d = event.data;\r\n        console.log('num1: ' + d.num1, 'num2: ' + d.num2);\r\n        var sum = d.num1 + d.num2;\r\n        //推送信息 更新  newsTow 推送信息 像消息体2推送信息\r\n         newsOne.postMessage(sum)\r\n    }\r\n\r\n\r\n\r\n    newsTow.onmessage = function(event) {\r\n        //console.log(\"port2收到来自port1的数据：\" + event.data);\r\n        console.log('结果为：' + event.data);\r\n    }`\r\n    console.log(new Function((\"return \" + stringScript)));\r\n</script>\r\n\r\n\r\n\r\n</body>\r\n</html>\r\n"
        },
        {
          "name": "nodeType.html",
          "type": "blob",
          "size": 0.70703125,
          "content": "<!DOCTYPE html>\r\n<html>\r\n<meta charset=\"UTF-8\">\r\n<body><p id=\"demo\">请点击按钮来获得 body 元素子节点的节点类型。</p>\r\n\r\n<button onclick=\"myFunction()\">试一下</button>\r\n\r\n<script>\r\n    function myFunction()\r\n    {\r\n        var txt=\"\";\r\n        var c=document.body.childNodes;\r\n         console.log(c)\r\n        for (var i=0; i<c.length; i++)\r\n        {\r\n            txt=txt + c[i].nodeType + \"<br>\";\r\n            console.log('c[i].attrsMap=')\r\n            console.log(c[i].attrsMap)\r\n        };\r\n        var x=document.getElementById(\"demo\");\r\n        x.innerHTML=txt;\r\n    }\r\n</script>\r\n\r\n<p><b>注释：</b>元素中的空格被视作文本，而文本被视作文本节点。</p>\r\n\r\n</body>\r\n</html>\r\n"
        },
        {
          "name": "normalizeArrayChildren.html",
          "type": "blob",
          "size": 7.7509765625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      function createTextVNode(){\r\n           return 'createTextVNode'\r\n      }\r\n      /**\r\n       * Check if value is primitive\r\n       *  //判断数据类型是否是string，number，symbol，boolean\r\n       */\r\n      function isPrimitive(value) {\r\n          //判断数据类型是否是string，number，symbol，boolean\r\n          return (\r\n                  typeof value === 'string' ||\r\n                  typeof value === 'number' ||\r\n                  // $flow-disable-line\r\n                  typeof value === 'symbol' ||\r\n                  typeof value === 'boolean'\r\n          )\r\n      }\r\n      //判断数据 是否是undefined或者null\r\n      function isUndef(v) {\r\n          return v === undefined || v === null\r\n      }\r\n\r\n      //判断是否是文本节点\r\n      function isTextNode(node) {\r\n          return isDef(node) && isDef(node.text) && isFalse(node.isComment)\r\n      }\r\n      //判断数据 是否不等于 undefined或者null\r\n      function isDef(v) {\r\n          return v !== undefined && v !== null\r\n      }\r\n      //判断是否真的等于true\r\n      function isTrue(v) {\r\n          return v === true\r\n      }\r\n      function normalizeArrayChildren(\r\n              children,\r\n              nestedIndex\r\n      ) {\r\n          var res = [];\r\n          var i, c, lastIndex, last;\r\n          console.log(nestedIndex)\r\n          debugger;\r\n\r\n          for (i = 0; i < children.length; i++) {  //循环数组子节点children\r\n              c = children[i];\r\n              //判断是否是空 并且 c是一个布尔值的时候\r\n              if (isUndef(c) || typeof c === 'boolean') {\r\n                  continue\r\n              }\r\n              // 获取  res 数组的长度\r\n              lastIndex = res.length - 1;\r\n              //获取res 最后一个数据\r\n              last = res[lastIndex];\r\n              //  nested\r\n              if (Array.isArray(c)) { //如果c 子节点还是一个数组\r\n                                      if (c.length > 0) { //并且 长度 不为0\r\n                                          //数组则用递归   nestedIndex 有可能是 0_0  0_0_0 0_0_1 0_0_2  0_1  0_1_0 0_1_1 0_1_2\r\n                                          //如果含有子节点，则递归，把所有子节点变成文本节点\r\n                                          c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\r\n                                          // merge adjacent text nodes 合并相邻文本节点\r\n                                          //如果c[0] 中的第一个是文本节点 并且 res 最后一个节点是 文本节点\r\n                                          if (isTextNode(c[0]) && isTextNode(last)) {\r\n                                              //创建一个文本节点 并且是合并他们的文本内容\r\n                                              res[lastIndex] = createTextVNode(last.text + (c[0]).text);\r\n                                              //从c 出栈第一个数据\r\n                                              c.shift();\r\n                                          }\r\n                                          //res 添加 数据 相当于 concat 链接数组\r\n                                          res.push.apply(res, c);\r\n                                      }\r\n              } else if (isPrimitive(c)) {  //判断数据类型是否是string，number，symbol，boolean\r\n                                      //如果res最后数据一个是文本节点\r\n                                      if (isTextNode(last)) {\r\n                                          // merge adjacent text nodes 合并相邻文本节点\r\n                                          // this is necessary for SSR hydration because text nodes are 这对于SSR水化是必要的，因为文本节点是\r\n                                          // essentially merged when rendered to HTML strings 当呈现到HTML字符串时本质上合并\r\n                                          // 创建文本节点\r\n                                          res[lastIndex] = createTextVNode(last.text + c);\r\n                                      } else if (c !== '') { //c不等于空\r\n                                          // convert primitive to vnode\r\n                                          //转换成 vnode  创建 文本节点\r\n                                          res.push(createTextVNode(c));\r\n                                      }\r\n              } else {\r\n                                          //如果c  中的第一个是文本节点 并且 res 最后一个节点是 文本节点\r\n                                          if (isTextNode(c) && isTextNode(last)) {\r\n                                              // merge adjacent text nodes 合并相邻文本节点\r\n                                              //创建文本节点\r\n                                              res[lastIndex] = createTextVNode(last.text + c.text);\r\n                                          } else {\r\n                                              // default key for nested array children (likely generated by v-for)\r\n                                              //嵌套数组子的默认键 可能v-for产生的\r\n\r\n                                              if (\r\n                                                      isTrue(children._isVList) && //如果children._isVList 为true\r\n                                                      isDef(c.tag) &&   //c.tag 不为空\r\n                                                      isUndef(c.key) && //c.key 为空的时候\r\n                                                      isDef(nestedIndex)) { //nestedIndex不为空\r\n                                                  //赋值key的值为__vlist+1+\"_\" + 1 + \"__\";\r\n                                                  c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\r\n                                              }\r\n                                              //把VNode 添加到res 中\r\n                                              res.push(c);\r\n                                          }\r\n              }\r\n          }\r\n//          console.log(res)\r\n//          debugger;\r\n          //返回 res 值\r\n          return res\r\n      }\r\n\r\n      console.log(normalizeArrayChildren(\r\n         [\r\n          {\r\n                _isVList:true,\r\n                tag:'div',\r\n                key:'1',\r\n                nestedIndex:2,\r\n           },\r\n          {\r\n              _isVList:true,\r\n              tag:'span',\r\n              key:'2',\r\n              nestedIndex:2,\r\n          },\r\n          [\r\n                {\r\n                    _isVList:true,\r\n                    tag:'span',\r\n                    key:'3',\r\n                    nestedIndex:3,\r\n                }\r\n          ],\r\n            {\r\n            _isVList:true,\r\n            tag:'span',\r\n            key:'4',\r\n            nestedIndex:4,\r\n            },\r\n            {\r\n                _isVList:true,\r\n                tag:'span',\r\n                key:'5',\r\n                nestedIndex:5,\r\n            },\r\n            {\r\n                _isVList:true,\r\n                tag:'span',\r\n                key:'6',\r\n                nestedIndex:6,\r\n            },\r\n           {\r\n                _isVList:true,\r\n                tag:'span',\r\n                key:'7',\r\n                nestedIndex:7,\r\n            },\r\n            [\r\n             {\r\n            _isVList:true,\r\n            tag:'span',\r\n            key:'8',\r\n            nestedIndex:8,\r\n            }\r\n            ],\r\n             [\r\n                 [{\r\n                     _isVList:true,\r\n                     tag:'span',\r\n                     key:'9',\r\n                     nestedIndex:9,\r\n                 }]\r\n             ]\r\n         ]\r\n       ))\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "object.html",
          "type": "blob",
          "size": 0.294921875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n       var obj={\r\n           name:'yao',\r\n           age:28\r\n       }\r\n       for(var i=0; i<obj.length; i++){\r\n    console.log(obj[i])\r\n       }\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "object.keys.html",
          "type": "blob",
          "size": 2.1259765625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    var componentVNodeHooks = {\r\n        init: function init(\r\n                vnode, //vonde虚拟dom\r\n                hydrating,\r\n                parentElm,\r\n                refElm) {\r\n            if (\r\n                    vnode.componentInstance && !vnode.componentInstance._isDestroyed &&\r\n                    vnode.data.keepAlive\r\n            ) {\r\n                // kept-alive components, treat as a patch\r\n                var mountedNode = vnode; // work around flow\r\n\r\n            } else {\r\n\r\n            }\r\n        },\r\n\r\n        prepatch: function prepatch(oldVnode, vnode) {\r\n            var options = vnode.componentOptions;\r\n            var child = vnode.componentInstance = oldVnode.componentInstance;\r\n\r\n        },\r\n\r\n        insert: function insert(vnode) {\r\n            var context = vnode.context;\r\n            var componentInstance = vnode.componentInstance;\r\n            if (!componentInstance._isMounted) {\r\n                componentInstance._isMounted = true;\r\n                callHook(componentInstance, 'mounted');\r\n            }\r\n            if (vnode.data.keepAlive) {\r\n                if (context._isMounted) {\r\n                    // vue-router#1212\r\n                    // During updates, a kept-alive component's child components may\r\n                    // change, so directly walking the tree here may call activated hooks\r\n                    // on incorrect children. Instead we push them into a queue which will\r\n                    // be processed after the whole patch process ended.\r\n\r\n                } else {\r\n\r\n                }\r\n            }\r\n        },\r\n\r\n        destroy: function destroy(vnode) {\r\n            var componentInstance = vnode.componentInstance;\r\n            if (!componentInstance._isDestroyed) {\r\n                if (!vnode.data.keepAlive) {\r\n                    componentInstance.$destroy();\r\n                } else {\r\n\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    var hooksToMerge = Object.keys(componentVNodeHooks);\r\n    console.log(hooksToMerge)\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "once.html",
          "type": "blob",
          "size": 1.876953125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"vue.js\"></script>\r\n</head>\r\n<body>\r\n<div id=\"components-demo\">\r\n    <button-counter></button-counter>\r\n</div>\r\n<div id=\"app\">\r\n    {{ message }}\r\n    <span v-once>This will never change: {{message}}</span>\r\n    <span v-if=\"(true||false)&&flag==1\">This will never change: {{message}}</span>\r\n\r\n</div>\r\n\r\n<script>\r\n    //   function  person (){\r\n    //     this.options='aaa'\r\n    //   }\r\n    //\r\n    //   person.constructor={aa:'c'}\r\n    //   person.prototype.options='span'\r\n    //\r\n    //   console.log(person.constructor.options)\r\n    //  console.log(Object.create(person.constructor.options));\r\n    //    new Vue({})\r\n    var obj = {\r\n        name: 'name',\r\n        age: 29\r\n    }\r\n    var arr = []\r\n    var res = new Array(obj.length);\r\n\r\n    console.log(obj.length)\r\n    console.log(res)\r\n    console.log(arr.length)\r\n\r\n\r\n    Vue.component('button-counter', {\r\n        data: function () {\r\n            return {\r\n                count: 0\r\n            }\r\n        },\r\n        template: '<button v-on:click=\"count++\">You clicked me {{ count }} times.</button>'\r\n    })\r\n\r\n    new Vue({el: '#components-demo'})\r\n\r\n    var app = new Vue({\r\n        el: '#app',\r\n        beforeCreate(){\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        beforeMount(){\r\n\r\n        },\r\n        mounted: ()=> { //挂载元素，获取到DOM节点\r\n            setTimeout(()=>{\r\n                this.count=11;\r\n                console.log('this.count='+this.count)\r\n            },5000)\r\n        },\r\n        beforeUpdate(){\r\n\r\n        },\r\n        updated(){ //挂载元素，获取到DOM节点\r\n        },\r\n        beforeDestroy(){\r\n\r\n        },\r\n        destroyed(){\r\n\r\n        },\r\n        data: {\r\n            flag:1,\r\n            count:0,\r\n            message: 'Hello Vue!'\r\n        }\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 82.71875,
          "content": "{\n  \"requires\": true,\n  \"lockfileVersion\": 1,\n  \"dependencies\": {\n    \"absolute\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/absolute/-/absolute-0.0.1.tgz\",\n      \"integrity\": \"sha1-wigi+H4ck59XmIdQTZwQnEFzgp0=\",\n      \"dev\": true\n    },\n    \"ajv\": {\n      \"version\": \"6.6.1\",\n      \"resolved\": \"https://registry.npmjs.org/ajv/-/ajv-6.6.1.tgz\",\n      \"integrity\": \"sha512-ZoJjft5B+EJBjUyu9C9Hc0OZyPZSSlOF+plzouTrg6UlA8f+e/n8NIgBFG/9tppJtpPWfthHakK7juJdNDODww==\",\n      \"dev\": true,\n      \"requires\": {\n        \"fast-deep-equal\": \"2.0.1\",\n        \"fast-json-stable-stringify\": \"2.0.0\",\n        \"json-schema-traverse\": \"0.4.1\",\n        \"uri-js\": \"4.2.2\"\n      }\n    },\n    \"ansi-escapes\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"http://registry.npmjs.org/ansi-escapes/-/ansi-escapes-3.1.0.tgz\",\n      \"integrity\": \"sha512-UgAb8H9D41AQnu/PbWlCofQVcnV4Gs2bBJi9eZPxfU/hgglFh3SMDMENRIqdr7H6XFnXdoknctFByVsCOotTVw==\",\n      \"dev\": true\n    },\n    \"ansi-red\": {\n      \"version\": \"0.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-red/-/ansi-red-0.1.1.tgz\",\n      \"integrity\": \"sha1-jGOPnRCAgAo1PJwoyKgcpHBdlGw=\",\n      \"dev\": true,\n      \"requires\": {\n        \"ansi-wrap\": \"0.1.0\"\n      }\n    },\n    \"ansi-regex\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz\",\n      \"integrity\": \"sha1-7QMXwyIGT3lGbAKWa922Bas32Zg=\"\n    },\n    \"ansi-styles\": {\n      \"version\": \"3.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz\",\n      \"integrity\": \"sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==\",\n      \"requires\": {\n        \"color-convert\": \"1.9.3\"\n      }\n    },\n    \"ansi-wrap\": {\n      \"version\": \"0.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-wrap/-/ansi-wrap-0.1.0.tgz\",\n      \"integrity\": \"sha1-qCJQ3bABXponyoLoLqYDu/pF768=\",\n      \"dev\": true\n    },\n    \"argparse\": {\n      \"version\": \"1.0.10\",\n      \"resolved\": \"https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz\",\n      \"integrity\": \"sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"sprintf-js\": \"1.0.3\"\n      }\n    },\n    \"array-differ\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/array-differ/-/array-differ-1.0.0.tgz\",\n      \"integrity\": \"sha1-7/UuN1gknTO+QCuLuOVkuytdQDE=\",\n      \"dev\": true\n    },\n    \"array-union\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/array-union/-/array-union-1.0.2.tgz\",\n      \"integrity\": \"sha1-mjRBDk9OPaI96jdb5b5w8kd47Dk=\",\n      \"dev\": true,\n      \"requires\": {\n        \"array-uniq\": \"1.0.3\"\n      }\n    },\n    \"array-uniq\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/array-uniq/-/array-uniq-1.0.3.tgz\",\n      \"integrity\": \"sha1-r2rId6Jcx/dOBYiUdThY39sk/bY=\",\n      \"dev\": true\n    },\n    \"arrify\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/arrify/-/arrify-1.0.1.tgz\",\n      \"integrity\": \"sha1-iYUI2iIm84DfkEcoRWhJwVAaSw0=\",\n      \"dev\": true\n    },\n    \"asn1\": {\n      \"version\": \"0.2.4\",\n      \"resolved\": \"https://registry.npmjs.org/asn1/-/asn1-0.2.4.tgz\",\n      \"integrity\": \"sha512-jxwzQpLQjSmWXgwaCZE9Nz+glAG01yF1QnWgbhGwHI5A6FRIEY6IVqtHhIepHqI7/kyEyQEagBC5mBEFlIYvdg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"safer-buffer\": \"2.1.2\"\n      }\n    },\n    \"assert-plus\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz\",\n      \"integrity\": \"sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=\",\n      \"dev\": true\n    },\n    \"async\": {\n      \"version\": \"2.6.1\",\n      \"resolved\": \"https://registry.npmjs.org/async/-/async-2.6.1.tgz\",\n      \"integrity\": \"sha512-fNEiL2+AZt6AlAw/29Cr0UDe4sRAHCpEHh54WMz+Bb7QfNcFw4h3loofyJpLeQs4Yx7yuqu/2dLgM5hKOs6HlQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"lodash\": \"4.17.11\"\n      }\n    },\n    \"asynckit\": {\n      \"version\": \"0.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz\",\n      \"integrity\": \"sha1-x57Zf380y48robyXkLzDZkdLS3k=\",\n      \"dev\": true\n    },\n    \"aws-sign2\": {\n      \"version\": \"0.7.0\",\n      \"resolved\": \"https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz\",\n      \"integrity\": \"sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg=\",\n      \"dev\": true\n    },\n    \"aws4\": {\n      \"version\": \"1.8.0\",\n      \"resolved\": \"https://registry.npmjs.org/aws4/-/aws4-1.8.0.tgz\",\n      \"integrity\": \"sha512-ReZxvNHIOv88FlT7rxcXIIC0fPt4KZqZbOlivyWtXLt8ESx84zd3kMC6iK5jVeS2qt+g7ftS7ye4fi06X5rtRQ==\",\n      \"dev\": true\n    },\n    \"balanced-match\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.0.tgz\",\n      \"integrity\": \"sha1-ibTRmasr7kneFk6gK4nORi1xt2c=\",\n      \"dev\": true\n    },\n    \"base64-js\": {\n      \"version\": \"0.0.8\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-0.0.8.tgz\",\n      \"integrity\": \"sha1-EQHpVE9KdrG8OybUUsqW16NeeXg=\",\n      \"dev\": true\n    },\n    \"bcrypt-pbkdf\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz\",\n      \"integrity\": \"sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4=\",\n      \"dev\": true,\n      \"requires\": {\n        \"tweetnacl\": \"0.14.5\"\n      }\n    },\n    \"big.js\": {\n      \"version\": \"3.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/big.js/-/big.js-3.2.0.tgz\",\n      \"integrity\": \"sha512-+hN/Zh2D08Mx65pZ/4g5bsmNiZUuChDiQfTUQ7qJr4/kuopCr88xZsAXv6mBoZEsUI4OuGHlX59qE94K2mMW8Q==\"\n    },\n    \"bl\": {\n      \"version\": \"1.2.2\",\n      \"resolved\": \"http://registry.npmjs.org/bl/-/bl-1.2.2.tgz\",\n      \"integrity\": \"sha512-e8tQYnZodmebYDWGH7KMRvtzKXaJHx3BbilrgZCfvyLUYdKpK1t5PSPmpkny/SgiTSCnjfLW7v5rlONXVFkQEA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"readable-stream\": \"2.3.6\",\n        \"safe-buffer\": \"5.1.2\"\n      }\n    },\n    \"bluebird\": {\n      \"version\": \"3.5.3\",\n      \"resolved\": \"https://registry.npmjs.org/bluebird/-/bluebird-3.5.3.tgz\",\n      \"integrity\": \"sha512-/qKPUQlaW1OyR51WeCPBvRnAlnZFUJkCSG5HzGnuIqhgyJtF+T94lFnn33eiazjRm2LAHVy2guNnaq48X9SJuw==\",\n      \"dev\": true\n    },\n    \"brace-expansion\": {\n      \"version\": \"1.1.11\",\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"balanced-match\": \"1.0.0\",\n        \"concat-map\": \"0.0.1\"\n      }\n    },\n    \"buffer\": {\n      \"version\": \"3.6.0\",\n      \"resolved\": \"http://registry.npmjs.org/buffer/-/buffer-3.6.0.tgz\",\n      \"integrity\": \"sha1-pyyTb3e5a/UvX357RnGAYoVR3vs=\",\n      \"dev\": true,\n      \"requires\": {\n        \"base64-js\": \"0.0.8\",\n        \"ieee754\": \"1.1.12\",\n        \"isarray\": \"1.0.0\"\n      }\n    },\n    \"buffer-alloc\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/buffer-alloc/-/buffer-alloc-1.2.0.tgz\",\n      \"integrity\": \"sha512-CFsHQgjtW1UChdXgbyJGtnm+O/uLQeZdtbDo8mfUgYXCHSM1wgrVxXm6bSyrUuErEb+4sYVGCzASBRot7zyrow==\",\n      \"dev\": true,\n      \"requires\": {\n        \"buffer-alloc-unsafe\": \"1.1.0\",\n        \"buffer-fill\": \"1.0.0\"\n      }\n    },\n    \"buffer-alloc-unsafe\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/buffer-alloc-unsafe/-/buffer-alloc-unsafe-1.1.0.tgz\",\n      \"integrity\": \"sha512-TEM2iMIEQdJ2yjPJoSIsldnleVaAk1oW3DBVUykyOLsEsFmEc9kn+SFFPz+gl54KQNxlDnAwCXosOS9Okx2xAg==\",\n      \"dev\": true\n    },\n    \"buffer-crc32\": {\n      \"version\": \"0.2.13\",\n      \"resolved\": \"https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz\",\n      \"integrity\": \"sha1-DTM+PwDqxQqhRUq9MO+MKl2ackI=\",\n      \"dev\": true\n    },\n    \"buffer-fill\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/buffer-fill/-/buffer-fill-1.0.0.tgz\",\n      \"integrity\": \"sha1-+PeLdniYiO858gXNY39o5wISKyw=\",\n      \"dev\": true\n    },\n    \"builtins\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/builtins/-/builtins-1.0.3.tgz\",\n      \"integrity\": \"sha1-y5T662HIaWRR2zZTThQi+U8K7og=\",\n      \"dev\": true\n    },\n    \"camelcase\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/camelcase/-/camelcase-5.0.0.tgz\",\n      \"integrity\": \"sha512-faqwZqnWxbxn+F1d399ygeamQNy3lPp/H9H6rNrqYh4FSVCtcY+3cub1MxA8o9mDd55mM8Aghuu/kuyYA6VTsA==\"\n    },\n    \"capture-stack-trace\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/capture-stack-trace/-/capture-stack-trace-1.0.1.tgz\",\n      \"integrity\": \"sha512-mYQLZnx5Qt1JgB1WEiMCf2647plpGeQ2NMR/5L0HNZzGQo4fuSPnK+wjfPnKZV0aiJDgzmWqqkV/g7JD+DW0qw==\",\n      \"dev\": true\n    },\n    \"caseless\": {\n      \"version\": \"0.12.0\",\n      \"resolved\": \"https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz\",\n      \"integrity\": \"sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw=\",\n      \"dev\": true\n    },\n    \"caw\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/caw/-/caw-2.0.1.tgz\",\n      \"integrity\": \"sha512-Cg8/ZSBEa8ZVY9HspcGUYaK63d/bN7rqS3CYCzEGUxuYv6UlmcjzDUz2fCFFHyTvUW5Pk0I+3hkA3iXlIj6guA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"get-proxy\": \"2.1.0\",\n        \"isurl\": \"1.0.0\",\n        \"tunnel-agent\": \"0.6.0\",\n        \"url-to-options\": \"1.0.1\"\n      }\n    },\n    \"chalk\": {\n      \"version\": \"2.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-2.4.1.tgz\",\n      \"integrity\": \"sha512-ObN6h1v2fTJSmUXoS3nMQ92LbDK9be4TV+6G+omQlGJFdcUX5heKi1LZ1YnRMIgwTLEj3E24bT6tYni50rlCfQ==\",\n      \"requires\": {\n        \"ansi-styles\": \"3.2.1\",\n        \"escape-string-regexp\": \"1.0.5\",\n        \"supports-color\": \"5.5.0\"\n      }\n    },\n    \"chardet\": {\n      \"version\": \"0.7.0\",\n      \"resolved\": \"https://registry.npmjs.org/chardet/-/chardet-0.7.0.tgz\",\n      \"integrity\": \"sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==\",\n      \"dev\": true\n    },\n    \"cli-cursor\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/cli-cursor/-/cli-cursor-2.1.0.tgz\",\n      \"integrity\": \"sha1-s12sN2R5+sw+lHR9QdDQ9SOP/LU=\",\n      \"dev\": true,\n      \"requires\": {\n        \"restore-cursor\": \"2.0.0\"\n      }\n    },\n    \"cli-spinners\": {\n      \"version\": \"1.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/cli-spinners/-/cli-spinners-1.3.1.tgz\",\n      \"integrity\": \"sha512-1QL4544moEsDVH9T/l6Cemov/37iv1RtoKf7NJ04A60+4MREXNfx/QvavbH6QoGdsD4N4Mwy49cmaINR/o2mdg==\",\n      \"dev\": true\n    },\n    \"cli-width\": {\n      \"version\": \"2.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/cli-width/-/cli-width-2.2.0.tgz\",\n      \"integrity\": \"sha1-/xnt6Kml5XkyQUewwR8PvLq+1jk=\",\n      \"dev\": true\n    },\n    \"cliui\": {\n      \"version\": \"4.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/cliui/-/cliui-4.1.0.tgz\",\n      \"integrity\": \"sha512-4FG+RSG9DL7uEwRUZXZn3SS34DiDPfzP0VOiEwtUWlE+AR2EIg+hSyvrIgUUfhdgR/UkAeW2QHgeP+hWrXs7jQ==\",\n      \"requires\": {\n        \"string-width\": \"2.1.1\",\n        \"strip-ansi\": \"4.0.0\",\n        \"wrap-ansi\": \"2.1.0\"\n      }\n    },\n    \"clone\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/clone/-/clone-1.0.4.tgz\",\n      \"integrity\": \"sha1-2jCcwmPfFZlMaIypAheco8fNfH4=\",\n      \"dev\": true\n    },\n    \"co\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/co/-/co-3.1.0.tgz\",\n      \"integrity\": \"sha1-TqVOpaCJOBUxheFSEMaNkJK8G3g=\",\n      \"dev\": true\n    },\n    \"co-from-stream\": {\n      \"version\": \"0.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/co-from-stream/-/co-from-stream-0.0.0.tgz\",\n      \"integrity\": \"sha1-GlzYztdyY5RglPo58kmaYyl7yvk=\",\n      \"dev\": true,\n      \"requires\": {\n        \"co-read\": \"0.0.1\"\n      }\n    },\n    \"co-fs-extra\": {\n      \"version\": \"1.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/co-fs-extra/-/co-fs-extra-1.2.1.tgz\",\n      \"integrity\": \"sha1-O2rXfPJhRTD2d7HPYmZPW6dWtyI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"co-from-stream\": \"0.0.0\",\n        \"fs-extra\": \"0.26.7\",\n        \"thunkify-wrap\": \"1.0.4\"\n      }\n    },\n    \"co-read\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/co-read/-/co-read-0.0.1.tgz\",\n      \"integrity\": \"sha1-+Bs+uKhmdf7FHj2IOn9WToc8k4k=\",\n      \"dev\": true\n    },\n    \"code-point-at\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/code-point-at/-/code-point-at-1.1.0.tgz\",\n      \"integrity\": \"sha1-DQcLTQQ6W+ozovGkDi7bPZpMz3c=\"\n    },\n    \"coffee-script\": {\n      \"version\": \"1.12.7\",\n      \"resolved\": \"https://registry.npmjs.org/coffee-script/-/coffee-script-1.12.7.tgz\",\n      \"integrity\": \"sha512-fLeEhqwymYat/MpTPUjSKHVYYl0ec2mOyALEMLmzr5i1isuG+6jfI2j2d5oBO3VIzgUXgBVIcOT9uH1TFxBckw==\",\n      \"dev\": true\n    },\n    \"color-convert\": {\n      \"version\": \"1.9.3\",\n      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz\",\n      \"integrity\": \"sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==\",\n      \"requires\": {\n        \"color-name\": \"1.1.3\"\n      }\n    },\n    \"color-name\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz\",\n      \"integrity\": \"sha1-p9BVi9icQveV3UIyj3QIMcpTvCU=\"\n    },\n    \"combined-stream\": {\n      \"version\": \"1.0.7\",\n      \"resolved\": \"https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.7.tgz\",\n      \"integrity\": \"sha512-brWl9y6vOB1xYPZcpZde3N9zDByXTosAeMDo4p1wzo6UMOX4vumB+TP1RZ76sfE6Md68Q0NJSrE/gbezd4Ul+w==\",\n      \"dev\": true,\n      \"requires\": {\n        \"delayed-stream\": \"1.0.0\"\n      }\n    },\n    \"commander\": {\n      \"version\": \"2.19.0\",\n      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-2.19.0.tgz\",\n      \"integrity\": \"sha512-6tvAOO+D6OENvRAh524Dh9jcfKTYDQAqvqezbCW82xj5X0pSrcpxtvRKHLG0yBY6SD7PSDrJaj+0AiOcKVd1Xg==\",\n      \"dev\": true\n    },\n    \"concat-map\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\",\n      \"integrity\": \"sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=\",\n      \"dev\": true\n    },\n    \"config-chain\": {\n      \"version\": \"1.1.12\",\n      \"resolved\": \"https://registry.npmjs.org/config-chain/-/config-chain-1.1.12.tgz\",\n      \"integrity\": \"sha512-a1eOIcu8+7lUInge4Rpf/n4Krkf3Dd9lqhljRzII1/Zno/kRtUWnznPO3jOKBmTEktkt3fkxisUcivoj0ebzoA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"ini\": \"1.3.5\",\n        \"proto-list\": \"1.2.4\"\n      }\n    },\n    \"consolidate\": {\n      \"version\": \"0.14.5\",\n      \"resolved\": \"https://registry.npmjs.org/consolidate/-/consolidate-0.14.5.tgz\",\n      \"integrity\": \"sha1-WiUEe8dvcwcmZ8jLUsmJiI9JTGM=\",\n      \"dev\": true,\n      \"requires\": {\n        \"bluebird\": \"3.5.3\"\n      }\n    },\n    \"core-util-is\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz\",\n      \"integrity\": \"sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=\"\n    },\n    \"create-error-class\": {\n      \"version\": \"3.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/create-error-class/-/create-error-class-3.0.2.tgz\",\n      \"integrity\": \"sha1-Br56vvlHo/FKMP1hBnHUAbyot7Y=\",\n      \"dev\": true,\n      \"requires\": {\n        \"capture-stack-trace\": \"1.0.1\"\n      }\n    },\n    \"cross-spawn\": {\n      \"version\": \"6.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/cross-spawn/-/cross-spawn-6.0.5.tgz\",\n      \"integrity\": \"sha512-eTVLrBSt7fjbDygz805pMnstIs2VTBNkRm0qxZd+M7A5XDdxVRWO5MxGBXZhjY4cqLYLdtrGqRf8mBPmzwSpWQ==\",\n      \"requires\": {\n        \"nice-try\": \"1.0.5\",\n        \"path-key\": \"2.0.1\",\n        \"semver\": \"5.6.0\",\n        \"shebang-command\": \"1.2.0\",\n        \"which\": \"1.3.1\"\n      }\n    },\n    \"dashdash\": {\n      \"version\": \"1.14.1\",\n      \"resolved\": \"https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz\",\n      \"integrity\": \"sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=\",\n      \"dev\": true,\n      \"requires\": {\n        \"assert-plus\": \"1.0.0\"\n      }\n    },\n    \"decamelize\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz\",\n      \"integrity\": \"sha1-9lNNFRSCabIDUue+4m9QH5oZEpA=\"\n    },\n    \"decompress\": {\n      \"version\": \"4.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/decompress/-/decompress-4.2.0.tgz\",\n      \"integrity\": \"sha1-eu3YVCflqS2s/lVnSnxQXpbQH50=\",\n      \"dev\": true,\n      \"requires\": {\n        \"decompress-tar\": \"4.1.1\",\n        \"decompress-tarbz2\": \"4.1.1\",\n        \"decompress-targz\": \"4.1.1\",\n        \"decompress-unzip\": \"4.0.1\",\n        \"graceful-fs\": \"4.1.15\",\n        \"make-dir\": \"1.3.0\",\n        \"pify\": \"2.3.0\",\n        \"strip-dirs\": \"2.1.0\"\n      }\n    },\n    \"decompress-tar\": {\n      \"version\": \"4.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/decompress-tar/-/decompress-tar-4.1.1.tgz\",\n      \"integrity\": \"sha512-JdJMaCrGpB5fESVyxwpCx4Jdj2AagLmv3y58Qy4GE6HMVjWz1FeVQk1Ct4Kye7PftcdOo/7U7UKzYBJgqnGeUQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"file-type\": \"5.2.0\",\n        \"is-stream\": \"1.1.0\",\n        \"tar-stream\": \"1.6.2\"\n      }\n    },\n    \"decompress-tarbz2\": {\n      \"version\": \"4.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/decompress-tarbz2/-/decompress-tarbz2-4.1.1.tgz\",\n      \"integrity\": \"sha512-s88xLzf1r81ICXLAVQVzaN6ZmX4A6U4z2nMbOwobxkLoIIfjVMBg7TeguTUXkKeXni795B6y5rnvDw7rxhAq9A==\",\n      \"dev\": true,\n      \"requires\": {\n        \"decompress-tar\": \"4.1.1\",\n        \"file-type\": \"6.2.0\",\n        \"is-stream\": \"1.1.0\",\n        \"seek-bzip\": \"1.0.5\",\n        \"unbzip2-stream\": \"1.3.1\"\n      },\n      \"dependencies\": {\n        \"file-type\": {\n          \"version\": \"6.2.0\",\n          \"resolved\": \"https://registry.npmjs.org/file-type/-/file-type-6.2.0.tgz\",\n          \"integrity\": \"sha512-YPcTBDV+2Tm0VqjybVd32MHdlEGAtuxS3VAYsumFokDSMG+ROT5wawGlnHDoz7bfMcMDt9hxuXvXwoKUx2fkOg==\",\n          \"dev\": true\n        }\n      }\n    },\n    \"decompress-targz\": {\n      \"version\": \"4.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/decompress-targz/-/decompress-targz-4.1.1.tgz\",\n      \"integrity\": \"sha512-4z81Znfr6chWnRDNfFNqLwPvm4db3WuZkqV+UgXQzSngG3CEKdBkw5jrv3axjjL96glyiiKjsxJG3X6WBZwX3w==\",\n      \"dev\": true,\n      \"requires\": {\n        \"decompress-tar\": \"4.1.1\",\n        \"file-type\": \"5.2.0\",\n        \"is-stream\": \"1.1.0\"\n      }\n    },\n    \"decompress-unzip\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/decompress-unzip/-/decompress-unzip-4.0.1.tgz\",\n      \"integrity\": \"sha1-3qrM39FK6vhVePczroIQ+bSEj2k=\",\n      \"dev\": true,\n      \"requires\": {\n        \"file-type\": \"3.9.0\",\n        \"get-stream\": \"2.3.1\",\n        \"pify\": \"2.3.0\",\n        \"yauzl\": \"2.10.0\"\n      },\n      \"dependencies\": {\n        \"file-type\": {\n          \"version\": \"3.9.0\",\n          \"resolved\": \"http://registry.npmjs.org/file-type/-/file-type-3.9.0.tgz\",\n          \"integrity\": \"sha1-JXoHg4TR24CHvESdEH1SpSZyuek=\",\n          \"dev\": true\n        },\n        \"get-stream\": {\n          \"version\": \"2.3.1\",\n          \"resolved\": \"http://registry.npmjs.org/get-stream/-/get-stream-2.3.1.tgz\",\n          \"integrity\": \"sha1-Xzj5PzRgCWZu4BUKBUFn+Rvdld4=\",\n          \"dev\": true,\n          \"requires\": {\n            \"object-assign\": \"4.1.1\",\n            \"pinkie-promise\": \"2.0.1\"\n          }\n        }\n      }\n    },\n    \"delayed-stream\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz\",\n      \"integrity\": \"sha1-3zrhmayt+31ECqrgsp4icrJOxhk=\",\n      \"dev\": true\n    },\n    \"download\": {\n      \"version\": \"5.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/download/-/download-5.0.3.tgz\",\n      \"integrity\": \"sha1-Y1N/l3+ZJmow64oqL70fILgAD3o=\",\n      \"dev\": true,\n      \"requires\": {\n        \"caw\": \"2.0.1\",\n        \"decompress\": \"4.2.0\",\n        \"filenamify\": \"2.1.0\",\n        \"get-stream\": \"3.0.0\",\n        \"got\": \"6.7.1\",\n        \"mkdirp\": \"0.5.1\",\n        \"pify\": \"2.3.0\"\n      }\n    },\n    \"download-git-repo\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/download-git-repo/-/download-git-repo-1.1.0.tgz\",\n      \"integrity\": \"sha512-yXcCvhkPKmq5M2cQXss6Qbig+LZnzRIT40XCYm/QCRnJaPG867StB1qnsBLxOGrPH1YEIRWW2gJq7LLMyw+NmA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"download\": \"5.0.3\",\n        \"git-clone\": \"0.1.0\",\n        \"rimraf\": \"2.6.2\"\n      }\n    },\n    \"duplexer3\": {\n      \"version\": \"0.1.4\",\n      \"resolved\": \"https://registry.npmjs.org/duplexer3/-/duplexer3-0.1.4.tgz\",\n      \"integrity\": \"sha1-7gHdHKwO08vH/b6jfcCo8c4ALOI=\",\n      \"dev\": true\n    },\n    \"ecc-jsbn\": {\n      \"version\": \"0.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz\",\n      \"integrity\": \"sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=\",\n      \"dev\": true,\n      \"requires\": {\n        \"jsbn\": \"0.1.1\",\n        \"safer-buffer\": \"2.1.2\"\n      }\n    },\n    \"emojis-list\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/emojis-list/-/emojis-list-2.1.0.tgz\",\n      \"integrity\": \"sha1-TapNnbAPmBmIDHn6RXrlsJof04k=\"\n    },\n    \"enable\": {\n      \"version\": \"1.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/enable/-/enable-1.3.2.tgz\",\n      \"integrity\": \"sha1-nrpoN9FtCYK1n4fYib91REPVKTE=\",\n      \"dev\": true\n    },\n    \"end-of-stream\": {\n      \"version\": \"1.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.1.tgz\",\n      \"integrity\": \"sha512-1MkrZNvWTKCaigbn+W15elq2BB/L22nqrSY5DKlo3X6+vclJm8Bb5djXJBmEX6fS3+zCh/F4VBK5Z2KxJt4s2Q==\",\n      \"dev\": true,\n      \"requires\": {\n        \"once\": \"1.4.0\"\n      }\n    },\n    \"enhanced-resolve\": {\n      \"version\": \"4.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-4.1.0.tgz\",\n      \"integrity\": \"sha512-F/7vkyTtyc/llOIn8oWclcB25KdRaiPBpZYDgJHgh/UHtpgT2p2eldQgtQnLtUvfMKPKxbRaQM/hHkvLHt1Vng==\",\n      \"requires\": {\n        \"graceful-fs\": \"4.1.15\",\n        \"memory-fs\": \"0.4.1\",\n        \"tapable\": \"1.1.1\"\n      }\n    },\n    \"errno\": {\n      \"version\": \"0.1.7\",\n      \"resolved\": \"https://registry.npmjs.org/errno/-/errno-0.1.7.tgz\",\n      \"integrity\": \"sha512-MfrRBDWzIWifgq6tJj60gkAwtLNb6sQPlcFrSOflcP1aFmmruKQ2wRnze/8V6kgyz7H3FF8Npzv78mZ7XLLflg==\",\n      \"requires\": {\n        \"prr\": \"1.0.1\"\n      }\n    },\n    \"escape-string-regexp\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\",\n      \"integrity\": \"sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=\"\n    },\n    \"esprima\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz\",\n      \"integrity\": \"sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==\",\n      \"dev\": true\n    },\n    \"execa\": {\n      \"version\": \"0.10.0\",\n      \"resolved\": \"https://registry.npmjs.org/execa/-/execa-0.10.0.tgz\",\n      \"integrity\": \"sha512-7XOMnz8Ynx1gGo/3hyV9loYNPWM94jG3+3T3Y8tsfSstFmETmENCMU/A/zj8Lyaj1lkgEepKepvd6240tBRvlw==\",\n      \"requires\": {\n        \"cross-spawn\": \"6.0.5\",\n        \"get-stream\": \"3.0.0\",\n        \"is-stream\": \"1.1.0\",\n        \"npm-run-path\": \"2.0.2\",\n        \"p-finally\": \"1.0.0\",\n        \"signal-exit\": \"3.0.2\",\n        \"strip-eof\": \"1.0.0\"\n      }\n    },\n    \"extend\": {\n      \"version\": \"3.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/extend/-/extend-3.0.2.tgz\",\n      \"integrity\": \"sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==\",\n      \"dev\": true\n    },\n    \"extend-shallow\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz\",\n      \"integrity\": \"sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-extendable\": \"0.1.1\"\n      }\n    },\n    \"external-editor\": {\n      \"version\": \"3.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/external-editor/-/external-editor-3.0.3.tgz\",\n      \"integrity\": \"sha512-bn71H9+qWoOQKyZDo25mOMVpSmXROAsTJVVVYzrrtol3d4y+AsKjf4Iwl2Q+IuT0kFSQ1qo166UuIwqYq7mGnA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"chardet\": \"0.7.0\",\n        \"iconv-lite\": \"0.4.24\",\n        \"tmp\": \"0.0.33\"\n      }\n    },\n    \"extsprintf\": {\n      \"version\": \"1.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz\",\n      \"integrity\": \"sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=\",\n      \"dev\": true\n    },\n    \"fast-deep-equal\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-2.0.1.tgz\",\n      \"integrity\": \"sha1-ewUhjd+WZ79/Nwv3/bLLFf3Qqkk=\",\n      \"dev\": true\n    },\n    \"fast-json-stable-stringify\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.0.0.tgz\",\n      \"integrity\": \"sha1-1RQsDK7msRifh9OnYREGT4bIu/I=\",\n      \"dev\": true\n    },\n    \"fd-slicer\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/fd-slicer/-/fd-slicer-1.1.0.tgz\",\n      \"integrity\": \"sha1-JcfInLH5B3+IkbvmHY85Dq4lbx4=\",\n      \"dev\": true,\n      \"requires\": {\n        \"pend\": \"1.2.0\"\n      }\n    },\n    \"figures\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/figures/-/figures-2.0.0.tgz\",\n      \"integrity\": \"sha1-OrGi0qYsi/tDGgyUy3l6L84nyWI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"escape-string-regexp\": \"1.0.5\"\n      }\n    },\n    \"file-type\": {\n      \"version\": \"5.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/file-type/-/file-type-5.2.0.tgz\",\n      \"integrity\": \"sha1-LdvqfHP/42No365J3DOMBYwritY=\",\n      \"dev\": true\n    },\n    \"filename-reserved-regex\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/filename-reserved-regex/-/filename-reserved-regex-2.0.0.tgz\",\n      \"integrity\": \"sha1-q/c9+rc10EVECr/qLZHzieu/oik=\",\n      \"dev\": true\n    },\n    \"filenamify\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/filenamify/-/filenamify-2.1.0.tgz\",\n      \"integrity\": \"sha512-ICw7NTT6RsDp2rnYKVd8Fu4cr6ITzGy3+u4vUujPkabyaz+03F24NWEX7fs5fp+kBonlaqPH8fAO2NM+SXt/JA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"filename-reserved-regex\": \"2.0.0\",\n        \"strip-outer\": \"1.0.1\",\n        \"trim-repeated\": \"1.0.0\"\n      }\n    },\n    \"find-up\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/find-up/-/find-up-3.0.0.tgz\",\n      \"integrity\": \"sha512-1yD6RmLI1XBfxugvORwlck6f75tYL+iR0jqwsOrOxMZyGYqUuDhJ0l4AXdO1iX/FTs9cBAMEk1gWSEx1kSbylg==\",\n      \"requires\": {\n        \"locate-path\": \"3.0.0\"\n      }\n    },\n    \"forever-agent\": {\n      \"version\": \"0.6.1\",\n      \"resolved\": \"https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz\",\n      \"integrity\": \"sha1-+8cfDEGt6zf5bFd60e1C2P2sypE=\",\n      \"dev\": true\n    },\n    \"form-data\": {\n      \"version\": \"2.3.3\",\n      \"resolved\": \"https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz\",\n      \"integrity\": \"sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"asynckit\": \"0.4.0\",\n        \"combined-stream\": \"1.0.7\",\n        \"mime-types\": \"2.1.21\"\n      }\n    },\n    \"fs-constants\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/fs-constants/-/fs-constants-1.0.0.tgz\",\n      \"integrity\": \"sha512-y6OAwoSIf7FyjMIv94u+b5rdheZEjzR63GTyZJm5qh4Bi+2YgwLCcI/fPFZkL5PSixOt6ZNKm+w+Hfp/Bciwow==\",\n      \"dev\": true\n    },\n    \"fs-extra\": {\n      \"version\": \"0.26.7\",\n      \"resolved\": \"http://registry.npmjs.org/fs-extra/-/fs-extra-0.26.7.tgz\",\n      \"integrity\": \"sha1-muH92UiXeY7at20JGM9C0MMYT6k=\",\n      \"dev\": true,\n      \"requires\": {\n        \"graceful-fs\": \"4.1.15\",\n        \"jsonfile\": \"2.4.0\",\n        \"klaw\": \"1.3.1\",\n        \"path-is-absolute\": \"1.0.1\",\n        \"rimraf\": \"2.6.2\"\n      }\n    },\n    \"fs.realpath\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz\",\n      \"integrity\": \"sha1-FQStJSMVjKpA20onh8sBQRmU6k8=\",\n      \"dev\": true\n    },\n    \"get-caller-file\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/get-caller-file/-/get-caller-file-1.0.3.tgz\",\n      \"integrity\": \"sha512-3t6rVToeoZfYSGd8YoLFR2DJkiQrIiUrGcjvFX2mDw3bn6k2OtwHN0TNCLbBO+w8qTvimhDkv+LSscbJY1vE6w==\"\n    },\n    \"get-proxy\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/get-proxy/-/get-proxy-2.1.0.tgz\",\n      \"integrity\": \"sha512-zmZIaQTWnNQb4R4fJUEp/FC51eZsc6EkErspy3xtIYStaq8EB/hDIWipxsal+E8rz0qD7f2sL/NA9Xee4RInJw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"npm-conf\": \"1.1.3\"\n      }\n    },\n    \"get-stream\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"http://registry.npmjs.org/get-stream/-/get-stream-3.0.0.tgz\",\n      \"integrity\": \"sha1-jpQ9E1jcN1VQVOy+LtsFqhdO3hQ=\"\n    },\n    \"getpass\": {\n      \"version\": \"0.1.7\",\n      \"resolved\": \"https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz\",\n      \"integrity\": \"sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=\",\n      \"dev\": true,\n      \"requires\": {\n        \"assert-plus\": \"1.0.0\"\n      }\n    },\n    \"git-clone\": {\n      \"version\": \"0.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/git-clone/-/git-clone-0.1.0.tgz\",\n      \"integrity\": \"sha1-DXYWN3gJOu9/HDAjjyqe8/B6Lrk=\",\n      \"dev\": true\n    },\n    \"glob\": {\n      \"version\": \"7.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.1.3.tgz\",\n      \"integrity\": \"sha512-vcfuiIxogLV4DlGBHIUOwI0IbrJ8HWPc4MU7HzviGeNho/UJDfi6B5p3sHeWIQ0KGIU0Jpxi5ZHxemQfLkkAwQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"fs.realpath\": \"1.0.0\",\n        \"inflight\": \"1.0.6\",\n        \"inherits\": \"2.0.3\",\n        \"minimatch\": \"3.0.4\",\n        \"once\": \"1.4.0\",\n        \"path-is-absolute\": \"1.0.1\"\n      }\n    },\n    \"global-modules-path\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/global-modules-path/-/global-modules-path-2.3.1.tgz\",\n      \"integrity\": \"sha512-y+shkf4InI7mPRHSo2b/k6ix6+NLDtyccYv86whhxrSGX9wjPX1VMITmrDbE1eh7zkzhiWtW2sHklJYoQ62Cxg==\"\n    },\n    \"got\": {\n      \"version\": \"6.7.1\",\n      \"resolved\": \"http://registry.npmjs.org/got/-/got-6.7.1.tgz\",\n      \"integrity\": \"sha1-JAzQV4WpoY5WHcG0S0HHY+8ejbA=\",\n      \"dev\": true,\n      \"requires\": {\n        \"create-error-class\": \"3.0.2\",\n        \"duplexer3\": \"0.1.4\",\n        \"get-stream\": \"3.0.0\",\n        \"is-redirect\": \"1.0.0\",\n        \"is-retry-allowed\": \"1.1.0\",\n        \"is-stream\": \"1.1.0\",\n        \"lowercase-keys\": \"1.0.1\",\n        \"safe-buffer\": \"5.1.2\",\n        \"timed-out\": \"4.0.1\",\n        \"unzip-response\": \"2.0.1\",\n        \"url-parse-lax\": \"1.0.0\"\n      }\n    },\n    \"graceful-fs\": {\n      \"version\": \"4.1.15\",\n      \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.1.15.tgz\",\n      \"integrity\": \"sha512-6uHUhOPEBgQ24HM+r6b/QwWfZq+yiFcipKFrOFiBEnWdy5sdzYoi+pJeQaPI5qOLRFqWmAXUPQNsielzdLoecA==\"\n    },\n    \"graceful-readlink\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/graceful-readlink/-/graceful-readlink-1.0.1.tgz\",\n      \"integrity\": \"sha1-TK+tdrxi8C+gObL5Tpo906ORpyU=\",\n      \"dev\": true\n    },\n    \"gray-matter\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/gray-matter/-/gray-matter-2.1.1.tgz\",\n      \"integrity\": \"sha1-MELZrewqHe1qdwep7SOA+KF6Qw4=\",\n      \"dev\": true,\n      \"requires\": {\n        \"ansi-red\": \"0.1.1\",\n        \"coffee-script\": \"1.12.7\",\n        \"extend-shallow\": \"2.0.1\",\n        \"js-yaml\": \"3.12.0\",\n        \"toml\": \"2.3.3\"\n      }\n    },\n    \"handlebars\": {\n      \"version\": \"4.0.12\",\n      \"resolved\": \"https://registry.npmjs.org/handlebars/-/handlebars-4.0.12.tgz\",\n      \"integrity\": \"sha512-RhmTekP+FZL+XNhwS1Wf+bTTZpdLougwt5pcgA1tuz6Jcx0fpH/7z0qd71RKnZHBCxIRBHfBOnio4gViPemNzA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"async\": \"2.6.1\",\n        \"optimist\": \"0.6.1\",\n        \"source-map\": \"0.6.1\",\n        \"uglify-js\": \"3.4.9\"\n      }\n    },\n    \"har-schema\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz\",\n      \"integrity\": \"sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI=\",\n      \"dev\": true\n    },\n    \"har-validator\": {\n      \"version\": \"5.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/har-validator/-/har-validator-5.1.3.tgz\",\n      \"integrity\": \"sha512-sNvOCzEQNr/qrvJgc3UG/kD4QtlHycrzwS+6mfTrrSq97BvaYcPZZI1ZSqGSPR73Cxn4LKTD4PttRwfU7jWq5g==\",\n      \"dev\": true,\n      \"requires\": {\n        \"ajv\": \"6.6.1\",\n        \"har-schema\": \"2.0.0\"\n      }\n    },\n    \"has-ansi\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-ansi/-/has-ansi-2.0.0.tgz\",\n      \"integrity\": \"sha1-NPUEnOHs3ysGSa8+8k5F7TVBbZE=\",\n      \"dev\": true,\n      \"requires\": {\n        \"ansi-regex\": \"2.1.1\"\n      },\n      \"dependencies\": {\n        \"ansi-regex\": {\n          \"version\": \"2.1.1\",\n          \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz\",\n          \"integrity\": \"sha1-w7M6te42DYbg5ijwRorn7yfWVN8=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"has-flag\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz\",\n      \"integrity\": \"sha1-tdRU3CGZriJWmfNGfloH87lVuv0=\"\n    },\n    \"has-generators\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/has-generators/-/has-generators-1.0.1.tgz\",\n      \"integrity\": \"sha1-pqLlVIYBGUBILhPiyTeRxEms9Ek=\",\n      \"dev\": true\n    },\n    \"has-symbol-support-x\": {\n      \"version\": \"1.4.2\",\n      \"resolved\": \"https://registry.npmjs.org/has-symbol-support-x/-/has-symbol-support-x-1.4.2.tgz\",\n      \"integrity\": \"sha512-3ToOva++HaW+eCpgqZrCfN51IPB+7bJNVT6CUATzueB5Heb8o6Nam0V3HG5dlDvZU1Gn5QLcbahiKw/XVk5JJw==\",\n      \"dev\": true\n    },\n    \"has-to-string-tag-x\": {\n      \"version\": \"1.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/has-to-string-tag-x/-/has-to-string-tag-x-1.4.1.tgz\",\n      \"integrity\": \"sha512-vdbKfmw+3LoOYVr+mtxHaX5a96+0f3DljYd8JOqvOLsf5mw2Otda2qCDT9qRqLAhrjyQ0h7ual5nOiASpsGNFw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"has-symbol-support-x\": \"1.4.2\"\n      }\n    },\n    \"http-signature\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz\",\n      \"integrity\": \"sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=\",\n      \"dev\": true,\n      \"requires\": {\n        \"assert-plus\": \"1.0.0\",\n        \"jsprim\": \"1.4.1\",\n        \"sshpk\": \"1.15.2\"\n      }\n    },\n    \"iconv-lite\": {\n      \"version\": \"0.4.24\",\n      \"resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz\",\n      \"integrity\": \"sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"safer-buffer\": \"2.1.2\"\n      }\n    },\n    \"ieee754\": {\n      \"version\": \"1.1.12\",\n      \"resolved\": \"https://registry.npmjs.org/ieee754/-/ieee754-1.1.12.tgz\",\n      \"integrity\": \"sha512-GguP+DRY+pJ3soyIiGPTvdiVXjZ+DbXOxGpXn3eMvNW4x4irjqXm4wHKscC+TfxSJ0yw/S1F24tqdMNsMZTiLA==\",\n      \"dev\": true\n    },\n    \"import-local\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/import-local/-/import-local-2.0.0.tgz\",\n      \"integrity\": \"sha512-b6s04m3O+s3CGSbqDIyP4R6aAwAeYlVq9+WUWep6iHa8ETRf9yei1U48C5MmfJmV9AiLYYBKPMq/W+/WRpQmCQ==\",\n      \"requires\": {\n        \"pkg-dir\": \"3.0.0\",\n        \"resolve-cwd\": \"2.0.0\"\n      }\n    },\n    \"inflight\": {\n      \"version\": \"1.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz\",\n      \"integrity\": \"sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=\",\n      \"dev\": true,\n      \"requires\": {\n        \"once\": \"1.4.0\",\n        \"wrappy\": \"1.0.2\"\n      }\n    },\n    \"inherits\": {\n      \"version\": \"2.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz\",\n      \"integrity\": \"sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=\"\n    },\n    \"ini\": {\n      \"version\": \"1.3.5\",\n      \"resolved\": \"https://registry.npmjs.org/ini/-/ini-1.3.5.tgz\",\n      \"integrity\": \"sha512-RZY5huIKCMRWDUqZlEi72f/lmXKMvuszcMBduliQ3nnWbx9X/ZBQO7DijMEYS9EhHBb2qacRUMtC7svLwe0lcw==\",\n      \"dev\": true\n    },\n    \"inquirer\": {\n      \"version\": \"6.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/inquirer/-/inquirer-6.2.1.tgz\",\n      \"integrity\": \"sha512-088kl3DRT2dLU5riVMKKr1DlImd6X7smDhpXUCkJDCKvTEJeRiXh0G132HG9u5a+6Ylw9plFRY7RuTnwohYSpg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"ansi-escapes\": \"3.1.0\",\n        \"chalk\": \"2.4.1\",\n        \"cli-cursor\": \"2.1.0\",\n        \"cli-width\": \"2.2.0\",\n        \"external-editor\": \"3.0.3\",\n        \"figures\": \"2.0.0\",\n        \"lodash\": \"4.17.11\",\n        \"mute-stream\": \"0.0.7\",\n        \"run-async\": \"2.3.0\",\n        \"rxjs\": \"6.3.3\",\n        \"string-width\": \"2.1.1\",\n        \"strip-ansi\": \"5.0.0\",\n        \"through\": \"2.3.8\"\n      },\n      \"dependencies\": {\n        \"ansi-regex\": {\n          \"version\": \"4.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-4.0.0.tgz\",\n          \"integrity\": \"sha512-iB5Dda8t/UqpPI/IjsejXu5jOGDrzn41wJyljwPH65VCIbk6+1BzFIMJGFwTNrYXT1CrD+B4l19U7awiQ8rk7w==\",\n          \"dev\": true\n        },\n        \"strip-ansi\": {\n          \"version\": \"5.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-5.0.0.tgz\",\n          \"integrity\": \"sha512-Uu7gQyZI7J7gn5qLn1Np3G9vcYGTVqB+lFTytnDJv83dd8T22aGH451P3jueT2/QemInJDfxHB5Tde5OzgG1Ow==\",\n          \"dev\": true,\n          \"requires\": {\n            \"ansi-regex\": \"4.0.0\"\n          }\n        }\n      }\n    },\n    \"interpret\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/interpret/-/interpret-1.1.0.tgz\",\n      \"integrity\": \"sha1-ftGxQQxqDg94z5XTuEQMY/eLhhQ=\"\n    },\n    \"invert-kv\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/invert-kv/-/invert-kv-2.0.0.tgz\",\n      \"integrity\": \"sha512-wPVv/y/QQ/Uiirj/vh3oP+1Ww+AWehmi1g5fFWGPF6IpCBCDVrhgHRMvrLfdYcwDh3QJbGXDW4JAuzxElLSqKA==\"\n    },\n    \"is\": {\n      \"version\": \"3.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/is/-/is-3.2.1.tgz\",\n      \"integrity\": \"sha1-0Kwq1V63sL7JJqUmb2xmKqqD3KU=\",\n      \"dev\": true\n    },\n    \"is-extendable\": {\n      \"version\": \"0.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-extendable/-/is-extendable-0.1.1.tgz\",\n      \"integrity\": \"sha1-YrEQ4omkcUGOPsNqYX1HLjAd/Ik=\",\n      \"dev\": true\n    },\n    \"is-fullwidth-code-point\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz\",\n      \"integrity\": \"sha1-o7MKXE8ZkYMWeqq5O+764937ZU8=\"\n    },\n    \"is-natural-number\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-natural-number/-/is-natural-number-4.0.1.tgz\",\n      \"integrity\": \"sha1-q5124dtM7VHjXeDHLr7PCfc0zeg=\",\n      \"dev\": true\n    },\n    \"is-object\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-object/-/is-object-1.0.1.tgz\",\n      \"integrity\": \"sha1-iVJojF7C/9awPsyF52ngKQMINHA=\",\n      \"dev\": true\n    },\n    \"is-promise\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-promise/-/is-promise-2.1.0.tgz\",\n      \"integrity\": \"sha1-eaKp7OfwlugPNtKy87wWwf9L8/o=\",\n      \"dev\": true\n    },\n    \"is-redirect\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-redirect/-/is-redirect-1.0.0.tgz\",\n      \"integrity\": \"sha1-HQPd7VO9jbDzDCbk+V02/HyH3CQ=\",\n      \"dev\": true\n    },\n    \"is-retry-allowed\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-retry-allowed/-/is-retry-allowed-1.1.0.tgz\",\n      \"integrity\": \"sha1-EaBgVotnM5REAz0BJaYaINVk+zQ=\",\n      \"dev\": true\n    },\n    \"is-stream\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-stream/-/is-stream-1.1.0.tgz\",\n      \"integrity\": \"sha1-EtSj3U5o4Lec6428hBc66A2RykQ=\"\n    },\n    \"is-typedarray\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz\",\n      \"integrity\": \"sha1-5HnICFjfDBsR3dppQPlgEfzaSpo=\",\n      \"dev\": true\n    },\n    \"is-utf8\": {\n      \"version\": \"0.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-utf8/-/is-utf8-0.2.1.tgz\",\n      \"integrity\": \"sha1-Sw2hRCEE0bM2NA6AeX6GXPOffXI=\",\n      \"dev\": true\n    },\n    \"isarray\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",\n      \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\"\n    },\n    \"isexe\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz\",\n      \"integrity\": \"sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=\"\n    },\n    \"isstream\": {\n      \"version\": \"0.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz\",\n      \"integrity\": \"sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=\",\n      \"dev\": true\n    },\n    \"isurl\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/isurl/-/isurl-1.0.0.tgz\",\n      \"integrity\": \"sha512-1P/yWsxPlDtn7QeRD+ULKQPaIaN6yF368GZ2vDfv0AL0NwpStafjWCDDdn0k8wgFMWpVAqG7oJhxHnlud42i9w==\",\n      \"dev\": true,\n      \"requires\": {\n        \"has-to-string-tag-x\": \"1.4.1\",\n        \"is-object\": \"1.0.1\"\n      }\n    },\n    \"js-yaml\": {\n      \"version\": \"3.12.0\",\n      \"resolved\": \"https://registry.npmjs.org/js-yaml/-/js-yaml-3.12.0.tgz\",\n      \"integrity\": \"sha512-PIt2cnwmPfL4hKNwqeiuz4bKfnzHTBv6HyVgjahA6mPLwPDzjDWrplJBMjHUFxku/N3FlmrbyPclad+I+4mJ3A==\",\n      \"dev\": true,\n      \"requires\": {\n        \"argparse\": \"1.0.10\",\n        \"esprima\": \"4.0.1\"\n      }\n    },\n    \"jsbn\": {\n      \"version\": \"0.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz\",\n      \"integrity\": \"sha1-peZUwuWi3rXyAdls77yoDA7y9RM=\",\n      \"dev\": true\n    },\n    \"json-schema\": {\n      \"version\": \"0.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz\",\n      \"integrity\": \"sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM=\",\n      \"dev\": true\n    },\n    \"json-schema-traverse\": {\n      \"version\": \"0.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz\",\n      \"integrity\": \"sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==\",\n      \"dev\": true\n    },\n    \"json-stringify-safe\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz\",\n      \"integrity\": \"sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=\",\n      \"dev\": true\n    },\n    \"json5\": {\n      \"version\": \"0.5.1\",\n      \"resolved\": \"http://registry.npmjs.org/json5/-/json5-0.5.1.tgz\",\n      \"integrity\": \"sha1-Hq3nrMASA0rYTiOWdn6tn6VJWCE=\"\n    },\n    \"jsonfile\": {\n      \"version\": \"2.4.0\",\n      \"resolved\": \"http://registry.npmjs.org/jsonfile/-/jsonfile-2.4.0.tgz\",\n      \"integrity\": \"sha1-NzaitCi4e72gzIO1P6PWM6NcKug=\",\n      \"dev\": true,\n      \"requires\": {\n        \"graceful-fs\": \"4.1.15\"\n      }\n    },\n    \"jsprim\": {\n      \"version\": \"1.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz\",\n      \"integrity\": \"sha1-MT5mvB5cwG5Di8G3SZwuXFastqI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"assert-plus\": \"1.0.0\",\n        \"extsprintf\": \"1.3.0\",\n        \"json-schema\": \"0.2.3\",\n        \"verror\": \"1.10.0\"\n      }\n    },\n    \"klaw\": {\n      \"version\": \"1.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/klaw/-/klaw-1.3.1.tgz\",\n      \"integrity\": \"sha1-QIhDO0azsbolnXh4XY6W9zugJDk=\",\n      \"dev\": true,\n      \"requires\": {\n        \"graceful-fs\": \"4.1.15\"\n      }\n    },\n    \"lcid\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/lcid/-/lcid-2.0.0.tgz\",\n      \"integrity\": \"sha512-avPEb8P8EGnwXKClwsNUgryVjllcRqtMYa49NTsbQagYuT1DcXnl1915oxWjoyGrXR6zH/Y0Zc96xWsPcoDKeA==\",\n      \"requires\": {\n        \"invert-kv\": \"2.0.0\"\n      }\n    },\n    \"loader-utils\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/loader-utils/-/loader-utils-1.1.0.tgz\",\n      \"integrity\": \"sha1-yYrvSIvM7aL/teLeZG1qdUQp9c0=\",\n      \"requires\": {\n        \"big.js\": \"3.2.0\",\n        \"emojis-list\": \"2.1.0\",\n        \"json5\": \"0.5.1\"\n      }\n    },\n    \"locate-path\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/locate-path/-/locate-path-3.0.0.tgz\",\n      \"integrity\": \"sha512-7AO748wWnIhNqAuaty2ZWHkQHRSNfPVIsPIfwEOWO22AmaoVrWavlOcMR5nzTLNYvp36X220/maaRsrec1G65A==\",\n      \"requires\": {\n        \"p-locate\": \"3.0.0\",\n        \"path-exists\": \"3.0.0\"\n      }\n    },\n    \"lodash\": {\n      \"version\": \"4.17.11\",\n      \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-4.17.11.tgz\",\n      \"integrity\": \"sha512-cQKh8igo5QUhZ7lg38DYWAxMvjSAKG0A8wGSVimP07SIUEK2UO+arSRKbRZWtelMtN5V0Hkwh5ryOto/SshYIg==\",\n      \"dev\": true\n    },\n    \"log-symbols\": {\n      \"version\": \"2.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/log-symbols/-/log-symbols-2.2.0.tgz\",\n      \"integrity\": \"sha512-VeIAFslyIerEJLXHziedo2basKbMKtTw3vfn5IzG0XTjhAVEJyNHnL2p7vc+wBDSdQuUpNw3M2u6xb9QsAY5Eg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"chalk\": \"2.4.1\"\n      }\n    },\n    \"lowercase-keys\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-1.0.1.tgz\",\n      \"integrity\": \"sha512-G2Lj61tXDnVFFOi8VZds+SoQjtQC3dgokKdDG2mTm1tx4m50NUHBOZSBwQQHyy0V12A0JTG4icfZQH+xPyh8VA==\",\n      \"dev\": true\n    },\n    \"make-dir\": {\n      \"version\": \"1.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/make-dir/-/make-dir-1.3.0.tgz\",\n      \"integrity\": \"sha512-2w31R7SJtieJJnQtGc7RVL2StM2vGYVfqUOvUDxH6bC6aJTxPxTF0GnIgCyu7tjockiUWAYQRbxa7vKn34s5sQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"pify\": \"3.0.0\"\n      },\n      \"dependencies\": {\n        \"pify\": {\n          \"version\": \"3.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/pify/-/pify-3.0.0.tgz\",\n          \"integrity\": \"sha1-5aSs0sEB/fPZpNB/DbxNtJ3SgXY=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"map-age-cleaner\": {\n      \"version\": \"0.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/map-age-cleaner/-/map-age-cleaner-0.1.3.tgz\",\n      \"integrity\": \"sha512-bJzx6nMoP6PDLPBFmg7+xRKeFZvFboMrGlxmNj9ClvX53KrmvM5bXFXEWjbz4cz1AFn+jWJ9z/DJSz7hrs0w3w==\",\n      \"requires\": {\n        \"p-defer\": \"1.0.0\"\n      }\n    },\n    \"mem\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/mem/-/mem-4.0.0.tgz\",\n      \"integrity\": \"sha512-WQxG/5xYc3tMbYLXoXPm81ET2WDULiU5FxbuIoNbJqLOOI8zehXFdZuiUEgfdrU2mVB1pxBZUGlYORSrpuJreA==\",\n      \"requires\": {\n        \"map-age-cleaner\": \"0.1.3\",\n        \"mimic-fn\": \"1.2.0\",\n        \"p-is-promise\": \"1.1.0\"\n      }\n    },\n    \"memory-fs\": {\n      \"version\": \"0.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/memory-fs/-/memory-fs-0.4.1.tgz\",\n      \"integrity\": \"sha1-OpoguEYlI+RHz7x+i7gO1me/xVI=\",\n      \"requires\": {\n        \"errno\": \"0.1.7\",\n        \"readable-stream\": \"2.3.6\"\n      }\n    },\n    \"metalsmith\": {\n      \"version\": \"2.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/metalsmith/-/metalsmith-2.3.0.tgz\",\n      \"integrity\": \"sha1-gzr7taKmOF4tmuPZNeOeM+rqUjE=\",\n      \"dev\": true,\n      \"requires\": {\n        \"absolute\": \"0.0.1\",\n        \"chalk\": \"1.1.3\",\n        \"clone\": \"1.0.4\",\n        \"co-fs-extra\": \"1.2.1\",\n        \"commander\": \"2.19.0\",\n        \"gray-matter\": \"2.1.1\",\n        \"has-generators\": \"1.0.1\",\n        \"is\": \"3.2.1\",\n        \"is-utf8\": \"0.2.1\",\n        \"recursive-readdir\": \"2.2.2\",\n        \"rimraf\": \"2.6.2\",\n        \"stat-mode\": \"0.2.2\",\n        \"thunkify\": \"2.1.2\",\n        \"unyield\": \"0.0.1\",\n        \"ware\": \"1.3.0\",\n        \"win-fork\": \"1.1.1\"\n      },\n      \"dependencies\": {\n        \"ansi-regex\": {\n          \"version\": \"2.1.1\",\n          \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz\",\n          \"integrity\": \"sha1-w7M6te42DYbg5ijwRorn7yfWVN8=\",\n          \"dev\": true\n        },\n        \"ansi-styles\": {\n          \"version\": \"2.2.1\",\n          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-2.2.1.tgz\",\n          \"integrity\": \"sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4=\",\n          \"dev\": true\n        },\n        \"chalk\": {\n          \"version\": \"1.1.3\",\n          \"resolved\": \"http://registry.npmjs.org/chalk/-/chalk-1.1.3.tgz\",\n          \"integrity\": \"sha1-qBFcVeSnAv5NFQq9OHKCKn4J/Jg=\",\n          \"dev\": true,\n          \"requires\": {\n            \"ansi-styles\": \"2.2.1\",\n            \"escape-string-regexp\": \"1.0.5\",\n            \"has-ansi\": \"2.0.0\",\n            \"strip-ansi\": \"3.0.1\",\n            \"supports-color\": \"2.0.0\"\n          }\n        },\n        \"strip-ansi\": {\n          \"version\": \"3.0.1\",\n          \"resolved\": \"http://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz\",\n          \"integrity\": \"sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=\",\n          \"dev\": true,\n          \"requires\": {\n            \"ansi-regex\": \"2.1.1\"\n          }\n        },\n        \"supports-color\": {\n          \"version\": \"2.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-2.0.0.tgz\",\n          \"integrity\": \"sha1-U10EXOa2Nj+kARcIRimZXp3zJMc=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"mime-db\": {\n      \"version\": \"1.37.0\",\n      \"resolved\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.37.0.tgz\",\n      \"integrity\": \"sha512-R3C4db6bgQhlIhPU48fUtdVmKnflq+hRdad7IyKhtFj06VPNVdk2RhiYL3UjQIlso8L+YxAtFkobT0VK+S/ybg==\",\n      \"dev\": true\n    },\n    \"mime-types\": {\n      \"version\": \"2.1.21\",\n      \"resolved\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.21.tgz\",\n      \"integrity\": \"sha512-3iL6DbwpyLzjR3xHSFNFeb9Nz/M8WDkX33t1GFQnFOllWk8pOrh/LSrB5OXlnlW5P9LH73X6loW/eogc+F5lJg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"mime-db\": \"1.37.0\"\n      }\n    },\n    \"mimic-fn\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/mimic-fn/-/mimic-fn-1.2.0.tgz\",\n      \"integrity\": \"sha512-jf84uxzwiuiIVKiOLpfYk7N46TSy8ubTonmneY9vrpHNAnp0QBt2BxWV9dO3/j+BoVAb+a5G6YDPW3M5HOdMWQ==\"\n    },\n    \"minimatch\": {\n      \"version\": \"3.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",\n      \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"brace-expansion\": \"1.1.11\"\n      }\n    },\n    \"minimist\": {\n      \"version\": \"0.0.8\",\n      \"resolved\": \"http://registry.npmjs.org/minimist/-/minimist-0.0.8.tgz\",\n      \"integrity\": \"sha1-hX/Kv8M5fSYluCKCYuhqp6ARsF0=\",\n      \"dev\": true\n    },\n    \"mkdirp\": {\n      \"version\": \"0.5.1\",\n      \"resolved\": \"http://registry.npmjs.org/mkdirp/-/mkdirp-0.5.1.tgz\",\n      \"integrity\": \"sha1-MAV0OOrGz3+MR2fzhkjWaX11yQM=\",\n      \"dev\": true,\n      \"requires\": {\n        \"minimist\": \"0.0.8\"\n      }\n    },\n    \"multimatch\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/multimatch/-/multimatch-2.1.0.tgz\",\n      \"integrity\": \"sha1-nHkGoi+0wCkZ4vX3UWG0zb1LKis=\",\n      \"dev\": true,\n      \"requires\": {\n        \"array-differ\": \"1.0.0\",\n        \"array-union\": \"1.0.2\",\n        \"arrify\": \"1.0.1\",\n        \"minimatch\": \"3.0.4\"\n      }\n    },\n    \"mute-stream\": {\n      \"version\": \"0.0.7\",\n      \"resolved\": \"https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.7.tgz\",\n      \"integrity\": \"sha1-MHXOk7whuPq0PhvE2n6BFe0ee6s=\",\n      \"dev\": true\n    },\n    \"nice-try\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/nice-try/-/nice-try-1.0.5.tgz\",\n      \"integrity\": \"sha512-1nh45deeb5olNY7eX82BkPO7SSxR5SSYJiPTrTdFUVYwAl8CKMA5N9PjTYkHiRjisVcxcQ1HXdLhx2qxxJzLNQ==\"\n    },\n    \"npm-conf\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/npm-conf/-/npm-conf-1.1.3.tgz\",\n      \"integrity\": \"sha512-Yic4bZHJOt9RCFbRP3GgpqhScOY4HH3V2P8yBj6CeYq118Qr+BLXqT2JvpJ00mryLESpgOxf5XlFv4ZjXxLScw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"config-chain\": \"1.1.12\",\n        \"pify\": \"3.0.0\"\n      },\n      \"dependencies\": {\n        \"pify\": {\n          \"version\": \"3.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/pify/-/pify-3.0.0.tgz\",\n          \"integrity\": \"sha1-5aSs0sEB/fPZpNB/DbxNtJ3SgXY=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"npm-run-path\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/npm-run-path/-/npm-run-path-2.0.2.tgz\",\n      \"integrity\": \"sha1-NakjLfo11wZ7TLLd8jV7GHFTbF8=\",\n      \"requires\": {\n        \"path-key\": \"2.0.1\"\n      }\n    },\n    \"number-is-nan\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/number-is-nan/-/number-is-nan-1.0.1.tgz\",\n      \"integrity\": \"sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0=\"\n    },\n    \"oauth-sign\": {\n      \"version\": \"0.9.0\",\n      \"resolved\": \"https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz\",\n      \"integrity\": \"sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==\",\n      \"dev\": true\n    },\n    \"object-assign\": {\n      \"version\": \"4.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz\",\n      \"integrity\": \"sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM=\",\n      \"dev\": true\n    },\n    \"once\": {\n      \"version\": \"1.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/once/-/once-1.4.0.tgz\",\n      \"integrity\": \"sha1-WDsap3WWHUsROsF9nFC6753Xa9E=\",\n      \"dev\": true,\n      \"requires\": {\n        \"wrappy\": \"1.0.2\"\n      }\n    },\n    \"onetime\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/onetime/-/onetime-2.0.1.tgz\",\n      \"integrity\": \"sha1-BnQoIw/WdEOyeUsiu6UotoZ5YtQ=\",\n      \"dev\": true,\n      \"requires\": {\n        \"mimic-fn\": \"1.2.0\"\n      }\n    },\n    \"optimist\": {\n      \"version\": \"0.6.1\",\n      \"resolved\": \"https://registry.npmjs.org/optimist/-/optimist-0.6.1.tgz\",\n      \"integrity\": \"sha1-2j6nRob6IaGaERwybpDrFaAZZoY=\",\n      \"dev\": true,\n      \"requires\": {\n        \"minimist\": \"0.0.8\",\n        \"wordwrap\": \"0.0.3\"\n      }\n    },\n    \"ora\": {\n      \"version\": \"1.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/ora/-/ora-1.4.0.tgz\",\n      \"integrity\": \"sha512-iMK1DOQxzzh2MBlVsU42G80mnrvUhqsMh74phHtDlrcTZPK0pH6o7l7DRshK+0YsxDyEuaOkziVdvM3T0QTzpw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"chalk\": \"2.4.1\",\n        \"cli-cursor\": \"2.1.0\",\n        \"cli-spinners\": \"1.3.1\",\n        \"log-symbols\": \"2.2.0\"\n      }\n    },\n    \"os-homedir\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"http://registry.npmjs.org/os-homedir/-/os-homedir-1.0.2.tgz\",\n      \"integrity\": \"sha1-/7xJiDNuDoM94MFox+8VISGqf7M=\",\n      \"dev\": true\n    },\n    \"os-locale\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/os-locale/-/os-locale-3.0.1.tgz\",\n      \"integrity\": \"sha512-7g5e7dmXPtzcP4bgsZ8ixDVqA7oWYuEz4lOSujeWyliPai4gfVDiFIcwBg3aGCPnmSGfzOKTK3ccPn0CKv3DBw==\",\n      \"requires\": {\n        \"execa\": \"0.10.0\",\n        \"lcid\": \"2.0.0\",\n        \"mem\": \"4.0.0\"\n      }\n    },\n    \"os-tmpdir\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"http://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz\",\n      \"integrity\": \"sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=\",\n      \"dev\": true\n    },\n    \"p-defer\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-defer/-/p-defer-1.0.0.tgz\",\n      \"integrity\": \"sha1-n26xgvbJqozXQwBKfU+WsZaw+ww=\"\n    },\n    \"p-finally\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz\",\n      \"integrity\": \"sha1-P7z7FbiZpEEjs0ttzBi3JDNqLK4=\"\n    },\n    \"p-is-promise\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"http://registry.npmjs.org/p-is-promise/-/p-is-promise-1.1.0.tgz\",\n      \"integrity\": \"sha1-nJRWmJ6fZYgBewQ01WCXZ1w9oF4=\"\n    },\n    \"p-limit\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-limit/-/p-limit-2.0.0.tgz\",\n      \"integrity\": \"sha512-fl5s52lI5ahKCernzzIyAP0QAZbGIovtVHGwpcu1Jr/EpzLVDI2myISHwGqK7m8uQFugVWSrbxH7XnhGtvEc+A==\",\n      \"requires\": {\n        \"p-try\": \"2.0.0\"\n      }\n    },\n    \"p-locate\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-locate/-/p-locate-3.0.0.tgz\",\n      \"integrity\": \"sha512-x+12w/To+4GFfgJhBEpiDcLozRJGegY+Ei7/z0tSLkMmxGZNybVMSfWj9aJn8Z5Fc7dBUNJOOVgPv2H7IwulSQ==\",\n      \"requires\": {\n        \"p-limit\": \"2.0.0\"\n      }\n    },\n    \"p-try\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-try/-/p-try-2.0.0.tgz\",\n      \"integrity\": \"sha512-hMp0onDKIajHfIkdRk3P4CdCmErkYAxxDtP3Wx/4nZ3aGlau2VKh3mZpcuFkH27WQkL/3WBCPOktzA9ZOAnMQQ==\"\n    },\n    \"path-exists\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz\",\n      \"integrity\": \"sha1-zg6+ql94yxiSXqfYENe1mwEP1RU=\"\n    },\n    \"path-is-absolute\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"http://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\n      \"integrity\": \"sha1-F0uSaHNVNP+8es5r9TpanhtcX18=\",\n      \"dev\": true\n    },\n    \"path-key\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz\",\n      \"integrity\": \"sha1-QRyttXTFoUDTpLGRDUDYDMn0C0A=\"\n    },\n    \"pend\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/pend/-/pend-1.2.0.tgz\",\n      \"integrity\": \"sha1-elfrVQpng/kRUzH89GY9XI4AelA=\",\n      \"dev\": true\n    },\n    \"performance-now\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz\",\n      \"integrity\": \"sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns=\",\n      \"dev\": true\n    },\n    \"pify\": {\n      \"version\": \"2.3.0\",\n      \"resolved\": \"http://registry.npmjs.org/pify/-/pify-2.3.0.tgz\",\n      \"integrity\": \"sha1-7RQaasBDqEnqWISY59yosVMw6Qw=\",\n      \"dev\": true\n    },\n    \"pinkie\": {\n      \"version\": \"2.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/pinkie/-/pinkie-2.0.4.tgz\",\n      \"integrity\": \"sha1-clVrgM+g1IqXToDnckjoDtT3+HA=\",\n      \"dev\": true\n    },\n    \"pinkie-promise\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz\",\n      \"integrity\": \"sha1-ITXW36ejWMBprJsXh3YogihFD/o=\",\n      \"dev\": true,\n      \"requires\": {\n        \"pinkie\": \"2.0.4\"\n      }\n    },\n    \"pkg-dir\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/pkg-dir/-/pkg-dir-3.0.0.tgz\",\n      \"integrity\": \"sha512-/E57AYkoeQ25qkxMj5PBOVgF8Kiu/h7cYS30Z5+R7WaiCCBfLq58ZI/dSeaEKb9WVJV5n/03QwrN3IeWIFllvw==\",\n      \"requires\": {\n        \"find-up\": \"3.0.0\"\n      }\n    },\n    \"prepend-http\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/prepend-http/-/prepend-http-1.0.4.tgz\",\n      \"integrity\": \"sha1-1PRWKwzjaW5BrFLQ4ALlemNdxtw=\",\n      \"dev\": true\n    },\n    \"process-nextick-args\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.0.tgz\",\n      \"integrity\": \"sha512-MtEC1TqN0EU5nephaJ4rAtThHtC86dNN9qCuEhtshvpVBkAW5ZO7BASN9REnF9eoXGcRub+pFuKEpOHE+HbEMw==\"\n    },\n    \"proto-list\": {\n      \"version\": \"1.2.4\",\n      \"resolved\": \"https://registry.npmjs.org/proto-list/-/proto-list-1.2.4.tgz\",\n      \"integrity\": \"sha1-IS1b/hMYMGpCD2QCuOJv85ZHqEk=\",\n      \"dev\": true\n    },\n    \"prr\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/prr/-/prr-1.0.1.tgz\",\n      \"integrity\": \"sha1-0/wRS6BplaRexok/SEzrHXj19HY=\"\n    },\n    \"psl\": {\n      \"version\": \"1.1.29\",\n      \"resolved\": \"https://registry.npmjs.org/psl/-/psl-1.1.29.tgz\",\n      \"integrity\": \"sha512-AeUmQ0oLN02flVHXWh9sSJF7mcdFq0ppid/JkErufc3hGIV/AMa8Fo9VgDo/cT2jFdOWoFvHp90qqBH54W+gjQ==\",\n      \"dev\": true\n    },\n    \"punycode\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz\",\n      \"integrity\": \"sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==\",\n      \"dev\": true\n    },\n    \"qs\": {\n      \"version\": \"6.5.2\",\n      \"resolved\": \"https://registry.npmjs.org/qs/-/qs-6.5.2.tgz\",\n      \"integrity\": \"sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA==\",\n      \"dev\": true\n    },\n    \"read-metadata\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/read-metadata/-/read-metadata-1.0.0.tgz\",\n      \"integrity\": \"sha1-bfnL5RGE6M630GaLQO5Rkebz2sY=\",\n      \"dev\": true,\n      \"requires\": {\n        \"yaml-js\": \"0.0.8\"\n      }\n    },\n    \"readable-stream\": {\n      \"version\": \"2.3.6\",\n      \"resolved\": \"http://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n      \"integrity\": \"sha512-tQtKA9WIAhBF3+VLAseyMqZeBjW0AHJoxOtYqSUZNJxauErmLbVm2FW1y+J/YA9dUrAC39ITejlZWhVIwawkKw==\",\n      \"requires\": {\n        \"core-util-is\": \"1.0.2\",\n        \"inherits\": \"2.0.3\",\n        \"isarray\": \"1.0.0\",\n        \"process-nextick-args\": \"2.0.0\",\n        \"safe-buffer\": \"5.1.2\",\n        \"string_decoder\": \"1.1.1\",\n        \"util-deprecate\": \"1.0.2\"\n      }\n    },\n    \"recursive-readdir\": {\n      \"version\": \"2.2.2\",\n      \"resolved\": \"https://registry.npmjs.org/recursive-readdir/-/recursive-readdir-2.2.2.tgz\",\n      \"integrity\": \"sha512-nRCcW9Sj7NuZwa2XvH9co8NPeXUBhZP7CRKJtU+cS6PW9FpCIFoI5ib0NT1ZrbNuPoRy0ylyCaUL8Gih4LSyFg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"minimatch\": \"3.0.4\"\n      }\n    },\n    \"request\": {\n      \"version\": \"2.88.0\",\n      \"resolved\": \"https://registry.npmjs.org/request/-/request-2.88.0.tgz\",\n      \"integrity\": \"sha512-NAqBSrijGLZdM0WZNsInLJpkJokL72XYjUpnB0iwsRgxh7dB6COrHnTBNwN0E+lHDAJzu7kLAkDeY08z2/A0hg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"aws-sign2\": \"0.7.0\",\n        \"aws4\": \"1.8.0\",\n        \"caseless\": \"0.12.0\",\n        \"combined-stream\": \"1.0.7\",\n        \"extend\": \"3.0.2\",\n        \"forever-agent\": \"0.6.1\",\n        \"form-data\": \"2.3.3\",\n        \"har-validator\": \"5.1.3\",\n        \"http-signature\": \"1.2.0\",\n        \"is-typedarray\": \"1.0.0\",\n        \"isstream\": \"0.1.2\",\n        \"json-stringify-safe\": \"5.0.1\",\n        \"mime-types\": \"2.1.21\",\n        \"oauth-sign\": \"0.9.0\",\n        \"performance-now\": \"2.1.0\",\n        \"qs\": \"6.5.2\",\n        \"safe-buffer\": \"5.1.2\",\n        \"tough-cookie\": \"2.4.3\",\n        \"tunnel-agent\": \"0.6.0\",\n        \"uuid\": \"3.3.2\"\n      }\n    },\n    \"require-directory\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz\",\n      \"integrity\": \"sha1-jGStX9MNqxyXbiNE/+f3kqam30I=\"\n    },\n    \"require-main-filename\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/require-main-filename/-/require-main-filename-1.0.1.tgz\",\n      \"integrity\": \"sha1-l/cXtp1IeE9fUmpsWqj/3aBVpNE=\"\n    },\n    \"resolve-cwd\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-2.0.0.tgz\",\n      \"integrity\": \"sha1-AKn3OHVW4nA46uIyyqNypqWbZlo=\",\n      \"requires\": {\n        \"resolve-from\": \"3.0.0\"\n      }\n    },\n    \"resolve-from\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/resolve-from/-/resolve-from-3.0.0.tgz\",\n      \"integrity\": \"sha1-six699nWiBvItuZTM17rywoYh0g=\"\n    },\n    \"restore-cursor\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/restore-cursor/-/restore-cursor-2.0.0.tgz\",\n      \"integrity\": \"sha1-n37ih/gv0ybU/RYpI9YhKe7g368=\",\n      \"dev\": true,\n      \"requires\": {\n        \"onetime\": \"2.0.1\",\n        \"signal-exit\": \"3.0.2\"\n      }\n    },\n    \"rimraf\": {\n      \"version\": \"2.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/rimraf/-/rimraf-2.6.2.tgz\",\n      \"integrity\": \"sha512-lreewLK/BlghmxtfH36YYVg1i8IAce4TI7oao75I1g245+6BctqTVQiBP3YUJ9C6DQOXJmkYR9X9fCLtCOJc5w==\",\n      \"dev\": true,\n      \"requires\": {\n        \"glob\": \"7.1.3\"\n      }\n    },\n    \"run-async\": {\n      \"version\": \"2.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/run-async/-/run-async-2.3.0.tgz\",\n      \"integrity\": \"sha1-A3GrSuC91yDUFm19/aZP96RFpsA=\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-promise\": \"2.1.0\"\n      }\n    },\n    \"rxjs\": {\n      \"version\": \"6.3.3\",\n      \"resolved\": \"https://registry.npmjs.org/rxjs/-/rxjs-6.3.3.tgz\",\n      \"integrity\": \"sha512-JTWmoY9tWCs7zvIk/CvRjhjGaOd+OVBM987mxFo+OW66cGpdKjZcpmc74ES1sB//7Kl/PAe8+wEakuhG4pcgOw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"tslib\": \"1.9.3\"\n      }\n    },\n    \"safe-buffer\": {\n      \"version\": \"5.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz\",\n      \"integrity\": \"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\"\n    },\n    \"safer-buffer\": {\n      \"version\": \"2.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz\",\n      \"integrity\": \"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\",\n      \"dev\": true\n    },\n    \"seek-bzip\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/seek-bzip/-/seek-bzip-1.0.5.tgz\",\n      \"integrity\": \"sha1-z+kXyz0nS8/6x5J1ivUxc+sfq9w=\",\n      \"dev\": true,\n      \"requires\": {\n        \"commander\": \"2.8.1\"\n      },\n      \"dependencies\": {\n        \"commander\": {\n          \"version\": \"2.8.1\",\n          \"resolved\": \"http://registry.npmjs.org/commander/-/commander-2.8.1.tgz\",\n          \"integrity\": \"sha1-Br42f+v9oMMwqh4qBy09yXYkJdQ=\",\n          \"dev\": true,\n          \"requires\": {\n            \"graceful-readlink\": \"1.0.1\"\n          }\n        }\n      }\n    },\n    \"semver\": {\n      \"version\": \"5.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.6.0.tgz\",\n      \"integrity\": \"sha512-RS9R6R35NYgQn++fkDWaOmqGoj4Ek9gGs+DPxNUZKuwE183xjJroKvyo1IzVFeXvUrvmALy6FWD5xrdJT25gMg==\"\n    },\n    \"set-blocking\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz\",\n      \"integrity\": \"sha1-BF+XgtARrppoA93TgrJDkrPYkPc=\"\n    },\n    \"shebang-command\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz\",\n      \"integrity\": \"sha1-RKrGW2lbAzmJaMOfNj/uXer98eo=\",\n      \"requires\": {\n        \"shebang-regex\": \"1.0.0\"\n      }\n    },\n    \"shebang-regex\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz\",\n      \"integrity\": \"sha1-2kL0l0DAtC2yypcoVxyxkMmO/qM=\"\n    },\n    \"signal-exit\": {\n      \"version\": \"3.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.2.tgz\",\n      \"integrity\": \"sha1-tf3AjxKH6hF4Yo5BXiUTK3NkbG0=\"\n    },\n    \"source-map\": {\n      \"version\": \"0.6.1\",\n      \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",\n      \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",\n      \"dev\": true\n    },\n    \"sprintf-js\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz\",\n      \"integrity\": \"sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw=\",\n      \"dev\": true\n    },\n    \"sshpk\": {\n      \"version\": \"1.15.2\",\n      \"resolved\": \"https://registry.npmjs.org/sshpk/-/sshpk-1.15.2.tgz\",\n      \"integrity\": \"sha512-Ra/OXQtuh0/enyl4ETZAfTaeksa6BXks5ZcjpSUNrjBr0DvrJKX+1fsKDPpT9TBXgHAFsa4510aNVgI8g/+SzA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"asn1\": \"0.2.4\",\n        \"assert-plus\": \"1.0.0\",\n        \"bcrypt-pbkdf\": \"1.0.2\",\n        \"dashdash\": \"1.14.1\",\n        \"ecc-jsbn\": \"0.1.2\",\n        \"getpass\": \"0.1.7\",\n        \"jsbn\": \"0.1.1\",\n        \"safer-buffer\": \"2.1.2\",\n        \"tweetnacl\": \"0.14.5\"\n      }\n    },\n    \"stat-mode\": {\n      \"version\": \"0.2.2\",\n      \"resolved\": \"https://registry.npmjs.org/stat-mode/-/stat-mode-0.2.2.tgz\",\n      \"integrity\": \"sha1-5sgLYjEj19gM8TLOU480YokHJQI=\",\n      \"dev\": true\n    },\n    \"string-width\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz\",\n      \"integrity\": \"sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw==\",\n      \"requires\": {\n        \"is-fullwidth-code-point\": \"2.0.0\",\n        \"strip-ansi\": \"4.0.0\"\n      }\n    },\n    \"string_decoder\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"http://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n      \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\n      \"requires\": {\n        \"safe-buffer\": \"5.1.2\"\n      }\n    },\n    \"strip-ansi\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz\",\n      \"integrity\": \"sha1-qEeQIusaw2iocTibY1JixQXuNo8=\",\n      \"requires\": {\n        \"ansi-regex\": \"3.0.0\"\n      }\n    },\n    \"strip-dirs\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/strip-dirs/-/strip-dirs-2.1.0.tgz\",\n      \"integrity\": \"sha512-JOCxOeKLm2CAS73y/U4ZeZPTkE+gNVCzKt7Eox84Iej1LT/2pTWYpZKJuxwQpvX1LiZb1xokNR7RLfuBAa7T3g==\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-natural-number\": \"4.0.1\"\n      }\n    },\n    \"strip-eof\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"http://registry.npmjs.org/strip-eof/-/strip-eof-1.0.0.tgz\",\n      \"integrity\": \"sha1-u0P/VZim6wXYm1n80SnJgzE2Br8=\"\n    },\n    \"strip-outer\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/strip-outer/-/strip-outer-1.0.1.tgz\",\n      \"integrity\": \"sha512-k55yxKHwaXnpYGsOzg4Vl8+tDrWylxDEpknGjhTiZB8dFRU5rTo9CAzeycivxV3s+zlTKwrs6WxMxR95n26kwg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"escape-string-regexp\": \"1.0.5\"\n      }\n    },\n    \"supports-color\": {\n      \"version\": \"5.5.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz\",\n      \"integrity\": \"sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==\",\n      \"requires\": {\n        \"has-flag\": \"3.0.0\"\n      }\n    },\n    \"tapable\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/tapable/-/tapable-1.1.1.tgz\",\n      \"integrity\": \"sha512-9I2ydhj8Z9veORCw5PRm4u9uebCn0mcCa6scWoNcbZ6dAtoo2618u9UUzxgmsCOreJpqDDuv61LvwofW7hLcBA==\"\n    },\n    \"tar-stream\": {\n      \"version\": \"1.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/tar-stream/-/tar-stream-1.6.2.tgz\",\n      \"integrity\": \"sha512-rzS0heiNf8Xn7/mpdSVVSMAWAoy9bfb1WOTYC78Z0UQKeKa/CWS8FOq0lKGNa8DWKAn9gxjCvMLYc5PGXYlK2A==\",\n      \"dev\": true,\n      \"requires\": {\n        \"bl\": \"1.2.2\",\n        \"buffer-alloc\": \"1.2.0\",\n        \"end-of-stream\": \"1.4.1\",\n        \"fs-constants\": \"1.0.0\",\n        \"readable-stream\": \"2.3.6\",\n        \"to-buffer\": \"1.1.1\",\n        \"xtend\": \"4.0.1\"\n      }\n    },\n    \"through\": {\n      \"version\": \"2.3.8\",\n      \"resolved\": \"http://registry.npmjs.org/through/-/through-2.3.8.tgz\",\n      \"integrity\": \"sha1-DdTJ/6q8NXlgsbckEV1+Doai4fU=\",\n      \"dev\": true\n    },\n    \"thunkify\": {\n      \"version\": \"2.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/thunkify/-/thunkify-2.1.2.tgz\",\n      \"integrity\": \"sha1-+qDp0jDFGsyVyhOjYawFyn4EVT0=\",\n      \"dev\": true\n    },\n    \"thunkify-wrap\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/thunkify-wrap/-/thunkify-wrap-1.0.4.tgz\",\n      \"integrity\": \"sha1-tSvlSN3+/aIOALWMYJZ2K0PdaIA=\",\n      \"dev\": true,\n      \"requires\": {\n        \"enable\": \"1.3.2\"\n      }\n    },\n    \"tildify\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/tildify/-/tildify-1.2.0.tgz\",\n      \"integrity\": \"sha1-3OwD9V3Km3qj5bBPIYF+tW5jWIo=\",\n      \"dev\": true,\n      \"requires\": {\n        \"os-homedir\": \"1.0.2\"\n      }\n    },\n    \"timed-out\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/timed-out/-/timed-out-4.0.1.tgz\",\n      \"integrity\": \"sha1-8y6srFoXW+ol1/q1Zas+2HQe9W8=\",\n      \"dev\": true\n    },\n    \"tmp\": {\n      \"version\": \"0.0.33\",\n      \"resolved\": \"https://registry.npmjs.org/tmp/-/tmp-0.0.33.tgz\",\n      \"integrity\": \"sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"os-tmpdir\": \"1.0.2\"\n      }\n    },\n    \"to-buffer\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/to-buffer/-/to-buffer-1.1.1.tgz\",\n      \"integrity\": \"sha512-lx9B5iv7msuFYE3dytT+KE5tap+rNYw+K4jVkb9R/asAb+pbBSM17jtunHplhBe6RRJdZx3Pn2Jph24O32mOVg==\",\n      \"dev\": true\n    },\n    \"toml\": {\n      \"version\": \"2.3.3\",\n      \"resolved\": \"https://registry.npmjs.org/toml/-/toml-2.3.3.tgz\",\n      \"integrity\": \"sha512-O7L5hhSQHxuufWUdcTRPfuTh3phKfAZ/dqfxZFoxPCj2RYmpaSGLEIs016FCXItQwNr08yefUB5TSjzRYnajTA==\",\n      \"dev\": true\n    },\n    \"tough-cookie\": {\n      \"version\": \"2.4.3\",\n      \"resolved\": \"https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.4.3.tgz\",\n      \"integrity\": \"sha512-Q5srk/4vDM54WJsJio3XNn6K2sCG+CQ8G5Wz6bZhRZoAe/+TxjWB/GlFAnYEbkYVlON9FMk/fE3h2RLpPXo4lQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"psl\": \"1.1.29\",\n        \"punycode\": \"1.4.1\"\n      },\n      \"dependencies\": {\n        \"punycode\": {\n          \"version\": \"1.4.1\",\n          \"resolved\": \"https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz\",\n          \"integrity\": \"sha1-wNWmOycYgArY4esPpSachN1BhF4=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"trim-repeated\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/trim-repeated/-/trim-repeated-1.0.0.tgz\",\n      \"integrity\": \"sha1-42RqLqTokTEr9+rObPsFOAvAHCE=\",\n      \"dev\": true,\n      \"requires\": {\n        \"escape-string-regexp\": \"1.0.5\"\n      }\n    },\n    \"tslib\": {\n      \"version\": \"1.9.3\",\n      \"resolved\": \"https://registry.npmjs.org/tslib/-/tslib-1.9.3.tgz\",\n      \"integrity\": \"sha512-4krF8scpejhaOgqzBEcGM7yDIEfi0/8+8zDRZhNZZ2kjmHJ4hv3zCbQWxoJGz1iw5U0Jl0nma13xzHXcncMavQ==\",\n      \"dev\": true\n    },\n    \"tunnel-agent\": {\n      \"version\": \"0.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz\",\n      \"integrity\": \"sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=\",\n      \"dev\": true,\n      \"requires\": {\n        \"safe-buffer\": \"5.1.2\"\n      }\n    },\n    \"tweetnacl\": {\n      \"version\": \"0.14.5\",\n      \"resolved\": \"https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz\",\n      \"integrity\": \"sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q=\",\n      \"dev\": true\n    },\n    \"uglify-js\": {\n      \"version\": \"3.4.9\",\n      \"resolved\": \"https://registry.npmjs.org/uglify-js/-/uglify-js-3.4.9.tgz\",\n      \"integrity\": \"sha512-8CJsbKOtEbnJsTyv6LE6m6ZKniqMiFWmm9sRbopbkGs3gMPPfd3Fh8iIA4Ykv5MgaTbqHr4BaoGLJLZNhsrW1Q==\",\n      \"dev\": true,\n      \"optional\": true,\n      \"requires\": {\n        \"commander\": \"2.17.1\",\n        \"source-map\": \"0.6.1\"\n      },\n      \"dependencies\": {\n        \"commander\": {\n          \"version\": \"2.17.1\",\n          \"resolved\": \"https://registry.npmjs.org/commander/-/commander-2.17.1.tgz\",\n          \"integrity\": \"sha512-wPMUt6FnH2yzG95SA6mzjQOEKUU3aLaDEmzs1ti+1E9h+CsrZghRlqEM/EJ4KscsQVG8uNN4uVreUeT8+drlgg==\",\n          \"dev\": true,\n          \"optional\": true\n        }\n      }\n    },\n    \"uid\": {\n      \"version\": \"0.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/uid/-/uid-0.0.2.tgz\",\n      \"integrity\": \"sha1-XkpdS3gTi09w+J/Tx2/FmqnS8QM=\",\n      \"dev\": true\n    },\n    \"unbzip2-stream\": {\n      \"version\": \"1.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/unbzip2-stream/-/unbzip2-stream-1.3.1.tgz\",\n      \"integrity\": \"sha512-fIZnvdjblYs7Cru/xC6tCPVhz7JkYcVQQkePwMLyQELzYTds2Xn8QefPVnvdVhhZqubxNA1cASXEH5wcK0Bucw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"buffer\": \"3.6.0\",\n        \"through\": \"2.3.8\"\n      }\n    },\n    \"unyield\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/unyield/-/unyield-0.0.1.tgz\",\n      \"integrity\": \"sha1-FQ5l2kK/d0JEW5WKZOubhdHSsYA=\",\n      \"dev\": true,\n      \"requires\": {\n        \"co\": \"3.1.0\"\n      }\n    },\n    \"unzip-response\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/unzip-response/-/unzip-response-2.0.1.tgz\",\n      \"integrity\": \"sha1-0vD3N9FrBhXnKmk17QQhRXLVb5c=\",\n      \"dev\": true\n    },\n    \"uri-js\": {\n      \"version\": \"4.2.2\",\n      \"resolved\": \"https://registry.npmjs.org/uri-js/-/uri-js-4.2.2.tgz\",\n      \"integrity\": \"sha512-KY9Frmirql91X2Qgjry0Wd4Y+YTdrdZheS8TFwvkbLWf/G5KNJDCh6pKL5OZctEW4+0Baa5idK2ZQuELRwPznQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"punycode\": \"2.1.1\"\n      }\n    },\n    \"url-parse-lax\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/url-parse-lax/-/url-parse-lax-1.0.0.tgz\",\n      \"integrity\": \"sha1-evjzA2Rem9eaJy56FKxovAYJ2nM=\",\n      \"dev\": true,\n      \"requires\": {\n        \"prepend-http\": \"1.0.4\"\n      }\n    },\n    \"url-to-options\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/url-to-options/-/url-to-options-1.0.1.tgz\",\n      \"integrity\": \"sha1-FQWgOiiaSMvXpDTvuu7FBV9WM6k=\",\n      \"dev\": true\n    },\n    \"user-home\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/user-home/-/user-home-2.0.0.tgz\",\n      \"integrity\": \"sha1-nHC/2Babwdy/SGBODwS4tJzenp8=\",\n      \"dev\": true,\n      \"requires\": {\n        \"os-homedir\": \"1.0.2\"\n      }\n    },\n    \"util-deprecate\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz\",\n      \"integrity\": \"sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=\"\n    },\n    \"uuid\": {\n      \"version\": \"3.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/uuid/-/uuid-3.3.2.tgz\",\n      \"integrity\": \"sha512-yXJmeNaw3DnnKAOKJE51sL/ZaYfWJRl1pK9dr19YFCu0ObS231AB1/LbqTKRAQ5kw8A90rA6fr4riOUpTZvQZA==\",\n      \"dev\": true\n    },\n    \"v8-compile-cache\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/v8-compile-cache/-/v8-compile-cache-2.0.2.tgz\",\n      \"integrity\": \"sha512-1wFuMUIM16MDJRCrpbpuEPTUGmM5QMUg0cr3KFwra2XgOgFcPGDQHDh3CszSCD2Zewc/dh/pamNEW8CbfDebUw==\"\n    },\n    \"validate-npm-package-name\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/validate-npm-package-name/-/validate-npm-package-name-3.0.0.tgz\",\n      \"integrity\": \"sha1-X6kS2B630MdK/BQN5zF/DKffQ34=\",\n      \"dev\": true,\n      \"requires\": {\n        \"builtins\": \"1.0.3\"\n      }\n    },\n    \"verror\": {\n      \"version\": \"1.10.0\",\n      \"resolved\": \"https://registry.npmjs.org/verror/-/verror-1.10.0.tgz\",\n      \"integrity\": \"sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=\",\n      \"dev\": true,\n      \"requires\": {\n        \"assert-plus\": \"1.0.0\",\n        \"core-util-is\": \"1.0.2\",\n        \"extsprintf\": \"1.3.0\"\n      }\n    },\n    \"vue-cli\": {\n      \"version\": \"2.9.6\",\n      \"resolved\": \"https://registry.npmjs.org/vue-cli/-/vue-cli-2.9.6.tgz\",\n      \"integrity\": \"sha512-swQ0bfyJSWfFr42IXr8A774yA1n+YudhzsaHBKhWSkczSqjvgZvSvM8NEnx6QKnfOHBXbdNR5vhahjNUMlftQQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"async\": \"2.6.1\",\n        \"chalk\": \"2.4.1\",\n        \"coffee-script\": \"1.12.7\",\n        \"commander\": \"2.19.0\",\n        \"consolidate\": \"0.14.5\",\n        \"download-git-repo\": \"1.1.0\",\n        \"handlebars\": \"4.0.12\",\n        \"inquirer\": \"6.2.1\",\n        \"metalsmith\": \"2.3.0\",\n        \"minimatch\": \"3.0.4\",\n        \"multimatch\": \"2.1.0\",\n        \"ora\": \"1.4.0\",\n        \"read-metadata\": \"1.0.0\",\n        \"request\": \"2.88.0\",\n        \"rimraf\": \"2.6.2\",\n        \"semver\": \"5.6.0\",\n        \"tildify\": \"1.2.0\",\n        \"uid\": \"0.0.2\",\n        \"user-home\": \"2.0.0\",\n        \"validate-npm-package-name\": \"3.0.0\"\n      }\n    },\n    \"ware\": {\n      \"version\": \"1.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/ware/-/ware-1.3.0.tgz\",\n      \"integrity\": \"sha1-0bFPOdLiy0q4xAmPdW/ksWTkc9Q=\",\n      \"dev\": true,\n      \"requires\": {\n        \"wrap-fn\": \"0.1.5\"\n      }\n    },\n    \"webpack-cli\": {\n      \"version\": \"3.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/webpack-cli/-/webpack-cli-3.1.2.tgz\",\n      \"integrity\": \"sha512-Cnqo7CeqeSvC6PTdts+dywNi5CRlIPbLx1AoUPK2T6vC1YAugMG3IOoO9DmEscd+Dghw7uRlnzV1KwOe5IrtgQ==\",\n      \"requires\": {\n        \"chalk\": \"2.4.1\",\n        \"cross-spawn\": \"6.0.5\",\n        \"enhanced-resolve\": \"4.1.0\",\n        \"global-modules-path\": \"2.3.1\",\n        \"import-local\": \"2.0.0\",\n        \"interpret\": \"1.1.0\",\n        \"loader-utils\": \"1.1.0\",\n        \"supports-color\": \"5.5.0\",\n        \"v8-compile-cache\": \"2.0.2\",\n        \"yargs\": \"12.0.5\"\n      }\n    },\n    \"which\": {\n      \"version\": \"1.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/which/-/which-1.3.1.tgz\",\n      \"integrity\": \"sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==\",\n      \"requires\": {\n        \"isexe\": \"2.0.0\"\n      }\n    },\n    \"which-module\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/which-module/-/which-module-2.0.0.tgz\",\n      \"integrity\": \"sha1-2e8H3Od7mQK4o6j6SzHD4/fm6Ho=\"\n    },\n    \"win-fork\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/win-fork/-/win-fork-1.1.1.tgz\",\n      \"integrity\": \"sha1-j1jgZW/KAK3IyGoriePNLWotXl4=\",\n      \"dev\": true\n    },\n    \"wordwrap\": {\n      \"version\": \"0.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.3.tgz\",\n      \"integrity\": \"sha1-o9XabNXAvAAI03I0u68b7WMFkQc=\",\n      \"dev\": true\n    },\n    \"wrap-ansi\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"http://registry.npmjs.org/wrap-ansi/-/wrap-ansi-2.1.0.tgz\",\n      \"integrity\": \"sha1-2Pw9KE3QV5T+hJc8rs3Rz4JP3YU=\",\n      \"requires\": {\n        \"string-width\": \"1.0.2\",\n        \"strip-ansi\": \"3.0.1\"\n      },\n      \"dependencies\": {\n        \"ansi-regex\": {\n          \"version\": \"2.1.1\",\n          \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz\",\n          \"integrity\": \"sha1-w7M6te42DYbg5ijwRorn7yfWVN8=\"\n        },\n        \"is-fullwidth-code-point\": {\n          \"version\": \"1.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-1.0.0.tgz\",\n          \"integrity\": \"sha1-754xOG8DGn8NZDr4L95QxFfvAMs=\",\n          \"requires\": {\n            \"number-is-nan\": \"1.0.1\"\n          }\n        },\n        \"string-width\": {\n          \"version\": \"1.0.2\",\n          \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz\",\n          \"integrity\": \"sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M=\",\n          \"requires\": {\n            \"code-point-at\": \"1.1.0\",\n            \"is-fullwidth-code-point\": \"1.0.0\",\n            \"strip-ansi\": \"3.0.1\"\n          }\n        },\n        \"strip-ansi\": {\n          \"version\": \"3.0.1\",\n          \"resolved\": \"http://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz\",\n          \"integrity\": \"sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=\",\n          \"requires\": {\n            \"ansi-regex\": \"2.1.1\"\n          }\n        }\n      }\n    },\n    \"wrap-fn\": {\n      \"version\": \"0.1.5\",\n      \"resolved\": \"https://registry.npmjs.org/wrap-fn/-/wrap-fn-0.1.5.tgz\",\n      \"integrity\": \"sha1-8htuQQFv9KfjFyDbxjoJAWvfmEU=\",\n      \"dev\": true,\n      \"requires\": {\n        \"co\": \"3.1.0\"\n      }\n    },\n    \"wrappy\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz\",\n      \"integrity\": \"sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=\",\n      \"dev\": true\n    },\n    \"xtend\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/xtend/-/xtend-4.0.1.tgz\",\n      \"integrity\": \"sha1-pcbVMr5lbiPbgg77lDofBJmNY68=\",\n      \"dev\": true\n    },\n    \"y18n\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/y18n/-/y18n-4.0.0.tgz\",\n      \"integrity\": \"sha512-r9S/ZyXu/Xu9q1tYlpsLIsa3EeLXXk0VwlxqTcFRfg9EhMW+17kbt9G0NrgCmhGb5vT2hyhJZLfDGx+7+5Uj/w==\"\n    },\n    \"yaml-js\": {\n      \"version\": \"0.0.8\",\n      \"resolved\": \"https://registry.npmjs.org/yaml-js/-/yaml-js-0.0.8.tgz\",\n      \"integrity\": \"sha1-h8+lqWE/SOJgBUINao7g2m/o2uw=\",\n      \"dev\": true\n    },\n    \"yargs\": {\n      \"version\": \"12.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/yargs/-/yargs-12.0.5.tgz\",\n      \"integrity\": \"sha512-Lhz8TLaYnxq/2ObqHDql8dX8CJi97oHxrjUcYtzKbbykPtVW9WB+poxI+NM2UIzsMgNCZTIf0AQwsjK5yMAqZw==\",\n      \"requires\": {\n        \"cliui\": \"4.1.0\",\n        \"decamelize\": \"1.2.0\",\n        \"find-up\": \"3.0.0\",\n        \"get-caller-file\": \"1.0.3\",\n        \"os-locale\": \"3.0.1\",\n        \"require-directory\": \"2.1.1\",\n        \"require-main-filename\": \"1.0.1\",\n        \"set-blocking\": \"2.0.0\",\n        \"string-width\": \"2.1.1\",\n        \"which-module\": \"2.0.0\",\n        \"y18n\": \"4.0.0\",\n        \"yargs-parser\": \"11.1.1\"\n      }\n    },\n    \"yargs-parser\": {\n      \"version\": \"11.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/yargs-parser/-/yargs-parser-11.1.1.tgz\",\n      \"integrity\": \"sha512-C6kB/WJDiaxONLJQnF8ccx9SEeoTTLek8RVbaOIsrAUS8VrBEXfmeSnCZxygc+XC2sNMBIwOOnfcxiynjHsVSQ==\",\n      \"requires\": {\n        \"camelcase\": \"5.0.0\",\n        \"decamelize\": \"1.2.0\"\n      }\n    },\n    \"yauzl\": {\n      \"version\": \"2.10.0\",\n      \"resolved\": \"https://registry.npmjs.org/yauzl/-/yauzl-2.10.0.tgz\",\n      \"integrity\": \"sha1-x+sXyT4RLLEIb6bY5R+wZnt5pfk=\",\n      \"dev\": true,\n      \"requires\": {\n        \"buffer-crc32\": \"0.2.13\",\n        \"fd-slicer\": \"1.1.0\"\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "parseFilters.html",
          "type": "blob",
          "size": 8.634765625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    /*\r\n     匹配 ) 或 . 或 + 或 - 或 _ 或 $ 或 ]\r\n     */\r\n    var validDivisionCharRE = /[\\w).+\\-_$\\]]/;\r\n\r\n    /*处理value 解析成正确的value，把过滤器 转换成vue 虚拟dom的解析方法函数\r\n     * 表达式中的过滤器解析 方法\r\n     * @param {*} exp\r\n     */\r\n    console.log(parseFilters(' ab | c | d'))\r\n    function parseFilters(exp) {\r\n        // 是否在 ''中\r\n        var inSingle = false;\r\n        // 是否在 \"\" 中\r\n        var inDouble = false;\r\n        // 是否在 ``\r\n        var inTemplateString = false;\r\n        //  是否在 正则 \\\\ 中\r\n        var inRegex = false;\r\n        // 是否在 {{ 中发现一个 culy加1 然后发现一个 } culy减1 直到culy为0 说明 { .. }闭合\r\n        var curly = 0;\r\n        // 跟{{ 一样 有一个 [ 加1 有一个 ] 减1\r\n        var square = 0;\r\n        // 跟{{ 一样 有一个 ( 加1 有一个 ) 减1\r\n        var paren = 0;\r\n        var lastFilterIndex = 0;\r\n        var c, prev, i, expression, filters;\r\n\r\n        for (i = 0; i < exp.length; i++) {\r\n            prev = c;\r\n            c = exp.charCodeAt(i);\r\n            console.log('c ='+exp[i])\r\n            console.log('c === 0x7C='+(c === 0x7C))\r\n            console.log('exp.charCodeAt(i + 1) !== 0x7C='+(exp.charCodeAt(i + 1) !== 0x7C) )\r\n            console.log('exp.charCodeAt(i - 1) !== 0x7C='+(exp.charCodeAt(i - 1) !== 0x7C))\r\n            console.log('curly='+(curly))\r\n            console.log('!curly='+(!curly))\r\n            console.log('square='+(square ))\r\n            console.log('!square='+(!square ))\r\n            console.log('!paren='+(!paren))\r\n            console.log('最后一个='+( c === 0x7C && // pipe\r\n            exp.charCodeAt(i + 1) !== 0x7C &&\r\n            exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren))\r\n\r\n\r\n            if (inSingle) {\r\n                //  '  \\\r\n                if (c === 0x27 && prev !== 0x5C) {\r\n                    inSingle = false;\r\n                }\r\n            } else if (inDouble) {\r\n                // \" \\\r\n                if (c === 0x22 && prev !== 0x5C) {\r\n                    inDouble = false;\r\n                }\r\n            } else if (inTemplateString) {\r\n                //  `\r\n                if (c === 0x60 && prev !== 0x5C) {\r\n                    inTemplateString = false;\r\n                }\r\n            } else if (inRegex) {\r\n                // 当前在正则表达式中  /开始\r\n                //  / \\\r\n                if (c === 0x2f && prev !== 0x5C) {\r\n                    inRegex = false;\r\n                }\r\n            } else if (\r\n                    // 如果在 之前不在 ' \" ` / 即字符串 或者正则中\r\n            // 那么就判断 当前字符是否是 |\r\n            //  如果当前 字符为 |\r\n            // 且 不在 { } 对象中\r\n            // 且 不在 [] 数组中\r\n            // 且不在  () 中\r\n            // 那么说明此时是过滤器的一个 分界点\r\n\r\n            c === 0x7C && // |\r\n            exp.charCodeAt(i + 1) !== 0x7C &&\r\n            exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren\r\n            ) {\r\n\r\n\r\n                /*\r\n                 如果前面没有表达式那么说明这是第一个 管道符号 \"|\"\r\n                 再次遇到 | 因为前面 expression = 'message '\r\n                 执行  pushFilter()\r\n                 */\r\n                if (expression === undefined) {\r\n                    // first filter, end of expression\r\n                    // 过滤器表达式 就是管道符号之后开始\r\n                    lastFilterIndex = i + 1;\r\n                    // 存储过滤器的 表达式\r\n                    expression = exp.slice(0, i).trim(); //这里匹配如果字符串是 'ab|c' 则把ab匹配出来\r\n\r\n                    console.log(expression)\r\n                    debugger\r\n                } else {\r\n                    pushFilter();\r\n                }\r\n            } else {\r\n                switch (c) {\r\n                    case 0x22:\r\n                        inDouble = true;\r\n                        break                 // 匹配\"\r\n                    case 0x27:\r\n                        inSingle = true;\r\n                        break                // 匹配'\r\n                    case 0x60:\r\n                        inTemplateString = true;\r\n                        break                // 匹配`\r\n                    case 0x28:\r\n                        paren++;\r\n                        break                 // 匹配(\r\n                    case 0x29:\r\n                        paren--;\r\n                        break                 // 匹配)\r\n                    case 0x5B:\r\n                        square++;\r\n                        break                // 匹配[\r\n                    case 0x5D:\r\n                        square--;\r\n                        break                // 匹配]\r\n                    case 0x7B:\r\n                        curly++;\r\n                        break                 // 匹配 {\r\n                    case 0x7D:\r\n                        curly--;\r\n                        break                 //  匹配 }\r\n                    case 0x5C:\r\n                        break                //   匹配   \\\r\n                    case 0x2f:\r\n                        break;                //   匹配   /\r\n\r\n                    case  0x7C:               //   匹配   |\r\n                        break;\r\n                }\r\n\r\n\r\n\r\n\r\n                if (c === 0x2f) { //  /\r\n                    var j = i - 1;\r\n                    var p = (void 0);\r\n                    // find first non-whitespace prev char\r\n                    //查找第一个非空白的prev字符\r\n                    for (; j >= 0; j--) {\r\n                        p = exp.charAt(j);\r\n                        if (p !== ' ') {\r\n                            break\r\n                        }\r\n                    }\r\n                    if (!p || !validDivisionCharRE.test(p)) {\r\n                        inRegex = true;\r\n                    }\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n        if (expression === undefined) {\r\n            expression = exp.slice(0, i).trim();\r\n        } else if (lastFilterIndex !== 0) {\r\n            pushFilter();\r\n        }\r\n        // 获取当前过滤器的 并将其存储在filters 数组中\r\n        //  filters = [ 'filterA' , 'filterB']\r\n        function pushFilter() {\r\n            (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\r\n            lastFilterIndex = i + 1;\r\n        }\r\n\r\n        if (filters) {\r\n            console.log(filters)\r\n            for (i = 0; i < filters.length; i++) {\r\n                //把过滤器封装成函数 虚拟dom需要渲染的函数\r\n                expression = wrapFilter(expression, filters[i]);\r\n            }\r\n        }\r\n        console.log(expression)\r\n\r\n        //返回值\r\n        return expression\r\n    }\r\n    /*\r\n     生成过滤器的 表达式字符串\r\n     如上面的\r\n     exp = message\r\n     filters = ['filterA','filterB(arg1,arg2)']\r\n     第一步  以exp 为入参 生成 filterA 的过滤器表达式字符串  _f(\"filterA\")(message)\r\n     第二步 以第一步字符串作为入参 生成第二个过滤器的表达式字符串 _f(\"filterB\")(_f(\"filterA\")(message),arg1,arg2)\r\n     => _f(\"filterB\")(_f(\"filterA\")(message),arg1,arg2)\r\n     * @param {string} exp   上一个过滤器的值 没有就是 表达式的值\r\n     * @param {string} filter\r\n     * @returns {string}\r\n     */\r\n//    console.log(wrapFilter('abc','defg(hijk)')) //结果 _f(\"defg\")(abc,hijk)\r\n    function wrapFilter(exp, filter) {\r\n        var i = filter.indexOf('('); //返回字符串第一次出现索引的位置\r\n        console.log('i='+i)\r\n        if (i < 0) {\r\n            // _f: resolveFilter\r\n            return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\") //闭包\r\n        } else {\r\n            //name 是 从字符串开始到(结束的字符串,不包含(\r\n            var name = filter.slice(0, i); //截取字符串 arrayObject.slice(start,end)\r\n            console.log('==name==')\r\n            console.log(name)\r\n\r\n            //args是从(开始匹配，到字符串末端，不包含(\r\n            var args = filter.slice(i + 1); //如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。\r\n            console.log('==args==')\r\n            console.log(args)\r\n            return (\r\n                    \"_f(\\\"\" + name + \"\\\")(\" + exp +\r\n                    (\r\n                            args !== ')' ?\r\n                            ',' + args\r\n                                    : args\r\n                    )\r\n            )\r\n        }\r\n    }\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "parseModel.html",
          "type": "blob",
          "size": 4.951171875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    /**\r\n     * Parse a v-model expression into a base path and a final key segment.\r\n     * Handles both dot-path and possible square brackets.\r\n     * 将v-model表达式解析为基路径和最后一个键段。\r\n     *处理点路径和可能的方括号。\r\n     *\r\n     * Possible cases:\r\n     * 可能的情况下:\r\n     *\r\n     * - test\r\n     * - test[key]\r\n     * - test[test1[key]]\r\n     * - test[\"a\"][key]\r\n     * - xxx.test[a[a].test1[key]]\r\n     * - test.xxx.a[\"asa\"][test1[key]]\r\n     *\r\n     */\r\n\r\n    var len; //字符串长度\r\n    var str; //字符串\r\n    var chr; //字符串的编码\r\n    var index$1; //循环的索引\r\n    var expressionPos; //匹配到   符号 [ 的开始索引\r\n    var expressionEndPos; // 如果匹配上一对 [] 的时候就跳出循环  则是匹配\r\n\r\n\r\n    function parseModel(val) {\r\n        // Fix https://github.com/vuejs/vue/pull/7730\r\n        // allow v-model=\"obj.val \" (trailing whitespace)\r\n        val = val.trim(); //值\r\n        len = val.length; //获取长度\r\n        //lastIndexOf 方法可返回一个指定的字符串值最后出现的位置\r\n        if (\r\n                val.indexOf('[') < 0 || //这个字符串没有出现过[\r\n                val.lastIndexOf(']') < len - 1 //这个字符串 没有出现过]这个符号  或者是出现位置不是在最后一位的时候\r\n        ) {\r\n            index$1 = val.lastIndexOf('.'); //获取最后一位出现 . 的位置\r\n            if (index$1 > -1) { //说明有点.\r\n                return {\r\n                    exp: val.slice(0, index$1), //丢弃最后一位 比如data.object.info.age获取data.object.info\r\n                    key: '\"' + val.slice(index$1 + 1) + '\"' //获取最后一位 age\r\n                }\r\n            } else {\r\n                return {\r\n                    exp: val, //如果没有点 则只有一个值\r\n                    key: null\r\n                }\r\n            }\r\n        }\r\n\r\n        str = val;\r\n        index$1 = expressionPos = expressionEndPos = 0;\r\n        // 索引和字符串长度比较 如果索引大于或者等于字符串的时候返回真\r\n        //看到这\r\n        while (!eof()) { //循环获取字符串的编码 直到把字符编码循环完\r\n            //获取字符串的编码\r\n            chr = next();\r\n            /* istanbul ignore if */\r\n\r\n            if (isStringStart(chr)) { //如果是 \" 或者 ' 的时候返回真\r\n                parseString(chr); //循环匹配一对''或者\"\"符号\r\n            } else if (chr === 0x5B) { // 符号 [\r\n                //检测 匹配[] 一对这样的=括号\r\n                parseBracket(chr);\r\n            }\r\n        }\r\n\r\n        return {\r\n            exp: val.slice(0, expressionPos),\r\n            key: val.slice(expressionPos + 1, expressionEndPos)\r\n        }\r\n    }\r\n\r\n    //索引加加 获取字符串的编码\r\n    function next() {\r\n        //charCodeAt() 方法可返回指定位置的字符的 Unicode 编码。这个返回值是 0 - 65535 之间的整数。\r\n        return str.charCodeAt(++index$1)\r\n    }\r\n\r\n    // 索引和字符串长度比较 如果索引大于或者等于字符串的时候返回真\r\n    function eof() {\r\n        //索引和字符串长度比较\r\n        return index$1 >= len\r\n    }\r\n\r\n    //如果是 \" 或者 ' 的时候返回真\r\n    function isStringStart(chr) {\r\n        //    \"              '\r\n        return chr === 0x22 || chr === 0x27\r\n    }\r\n\r\n    //检测 匹配[] 一对这样的=括号\r\n    function parseBracket(chr) {\r\n        var inBracket = 1;\r\n        expressionPos = index$1;\r\n        while (!eof()) {\r\n            chr = next();\r\n            if (isStringStart(chr)) { //如果是 \" 或者 ' 的时候返回真\r\n                parseString(chr); //循环匹配一对''或者\"\"符号\r\n                continue\r\n            }\r\n            if (chr === 0x5B) { // 匹配上\r\n                inBracket++;\r\n            }\r\n            if (chr === 0x5D) {  //匹配上 ]\r\n                inBracket--;\r\n            }\r\n            if (inBracket === 0) {  //如果匹配上一对 [] 的时候就跳出循环\r\n                expressionEndPos = index$1;\r\n                break\r\n            }\r\n        }\r\n    }\r\n    //循环匹配一对''或者\"\"符号\r\n    function parseString(chr) {\r\n        var stringQuote = chr; //记录当前的'或者\"\r\n        while (!eof()) {\r\n            chr = next();\r\n            if (chr === stringQuote) {  //当他们匹配上一对的时候退出循环\r\n                break\r\n            }\r\n        }\r\n    }\r\n    console.log(parseModel('object'))\r\n    console.log(parseModel('object[info][name]'))\r\n    console.log(parseModel('object.info.name'))\r\n    console.log(parseModel('test[key]'))\r\n    console.log(parseModel('test[test1[key]]'))\r\n    console.log(parseModel('test[\"a\"][key]'))\r\n    console.log(parseModel('xxx.test[a[a].test1[key]]'))\r\n    console.log(parseModel('test.xxx.a[\"asa\"][test1[key]]'))\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "parseModifiers.html",
          "type": "blob",
          "size": 1.0322265625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      var modifierRE = /\\.[^.]+/g; // 匹配以点开头的分组 不属于点 data.object.info.age  匹配到 ['.object'，'.info' , '.age']\r\n\r\n      function parseModifiers(name) {\r\n          // 匹配以点开头的分组 不属于点 data.object.info.age  匹配到 ['.object'，'.info' , '.age']\r\n          var match = name.match(modifierRE);\r\n          console.log(match)\r\n          if (match) {\r\n              var ret = {};\r\n              match.forEach(function (m) {\r\n                  console.log(m)\r\n                  console.log(m.slice(1))\r\n                  ret[m.slice(1)] = true;\r\n              });\r\n              return ret\r\n          }\r\n      }\r\n\r\n      let name = 'data.props.name'\r\n      let modifiers = parseModifiers(name);\r\n      console.log(modifiers)\r\n      debugger\r\n      if (modifiers) {\r\n          name = name.replace(modifierRE, '');\r\n      }\r\n      console.log(name)\r\n\r\n\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "parsePath.html",
          "type": "blob",
          "size": 1.0341796875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n   <script>\r\n       /**\r\n        * Parse simple path.\r\n        * 解析简单路径。\r\n        */\r\n       var bailRE = /[^\\w.$]/;  //匹配任何字符 已点结束的字符串\r\n\r\n       function parsePath(path) {\r\n           if (bailRE.test(path)) {  //匹配上 返回 true\r\n               return\r\n           }\r\n           //匹配不上  path在已点分割\r\n           var segments = path.split('.');\r\n           return function (obj) {\r\n\r\n               for (var i = 0; i < segments.length; i++) {\r\n                   //如果有参数则返回真\r\n                   if (!obj) {\r\n                       return\r\n                   }\r\n                   //将对象中的一个key值 赋值给该对象 相当于 obj = obj[segments[segments.length-1]];\r\n                   obj = obj[segments[i]];\r\n               }\r\n               //否则返回一个对象\r\n               return obj\r\n           }\r\n       }\r\n   </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "parseStyleText.html",
          "type": "blob",
          "size": 2.4013671875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n\r\n    /**\r\n     * Create a cached version of a pure function.\r\n     */\r\n    /**\r\n     * Create a cached version of a pure function.\r\n     * 创建纯函数的缓存版本。\r\n     * 创建一个函数，缓存，再return 返回柯里化函数\r\n     * 闭包用法\r\n     */\r\n    /***********************************************************************************************\r\n     *函数名 ：cached\r\n     *函数功能描述 ： 创建纯函数的缓存版本。 创建一个函数，缓存，再return 返回柯里化函数 闭包用法\r\n     *函数参数 ： fn 函数\r\n     *函数返回值 ：    fn\r\n     *作者 ：\r\n     *函数创建日期 ：\r\n     *函数修改日期 ：\r\n     *修改人 ：\r\n     *修改原因 ：\r\n     *版本 ：\r\n     *历史版本 ：\r\n     ***********************************************************************************************/\r\n\r\n    /*\r\n     * var aFn =  cached(function(string){\r\n     *\r\n     *      return string\r\n     *  })\r\n     * aFn(string1);\r\n     * aFn(string2);\r\n     * aFn(string);\r\n     * aFn(string1);\r\n     * aFn(string2);\r\n     *\r\n     * aFn 函数会多次调用 里面就能体现了\r\n     *  用对象去缓存记录函数\r\n     * */\r\n\r\n    function cached(fn) {\r\n        var cache = Object.create(null);\r\n        return (function cachedFn(str) {\r\n            var hit = cache[str];\r\n            return hit || (cache[str] = fn(str))\r\n        })\r\n    }\r\n\r\n    //把style 字符串 转换成对象 比如'width:100px;height:200px;' 转化成 {width:100px,height:200px}\r\n    var parseStyleText = cached(function (cssText) {\r\n        var res = {};\r\n        var listDelimiter = /;(?![^(]*\\))/g; //匹配字符串中的 ;符号。但是不属于 (;)的 符号 如果是括号中的;不能匹配出来\r\n        var propertyDelimiter = /:(.+)/;  //:+任何字符串\r\n        console.log(cssText.split(listDelimiter))\r\n        debugger;\r\n        cssText.split(listDelimiter).forEach(function (item) {\r\n            if (item) {\r\n                var tmp = item.split(propertyDelimiter);\r\n                console.log(tmp)\r\n                debugger;\r\n                tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\r\n            }\r\n        });\r\n        return res\r\n    });\r\n\r\n    console.log(parseStyleText('width:100px;(height:200px);'))\r\n\r\n\r\n\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "parseText.html",
          "type": "blob",
          "size": 14.1123046875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    /*\r\n     匹配 ) 或 . 或 + 或 - 或 _ 或 $ 或 ]\r\n     */\r\n    var validDivisionCharRE = /[\\w).+\\-_$\\]]/;\r\n    /*处理value 解析成正确的value，把过滤器 转换成vue 虚拟dom的解析方法函数 比如把过滤器 ' ab | c | d' 转换成 _f(\"d\")(_f(\"c\")(ab))\r\n     * 表达式中的过滤器解析 方法\r\n     * @param {*} exp\r\n     */\r\n    console.log(parseFilters(' ab | c | d')) //转化成 _f(\"d\")(_f(\"c\")(ab))\r\n    function parseFilters(exp) {\r\n        // 是否在 ''中\r\n        var inSingle = false;\r\n        // 是否在 \"\" 中\r\n        var inDouble = false;\r\n        // 是否在 ``\r\n        var inTemplateString = false;\r\n        //  是否在 正则 \\\\ 中\r\n        var inRegex = false;\r\n        // 是否在 {{ 中发现一个 culy加1 然后发现一个 } culy减1 直到culy为0 说明 { .. }闭合\r\n        var curly = 0;\r\n        // 跟{{ 一样 有一个 [ 加1 有一个 ] 减1\r\n        var square = 0;\r\n        // 跟{{ 一样 有一个 ( 加1 有一个 ) 减1\r\n        var paren = 0;\r\n        var lastFilterIndex = 0;\r\n        var c, prev, i, expression, filters;\r\n\r\n        for (i = 0; i < exp.length; i++) {\r\n            prev = c;\r\n            c = exp.charCodeAt(i);\r\n            console.log('c ='+exp[i])\r\n            console.log('c === 0x7C='+(c === 0x7C))\r\n            console.log('exp.charCodeAt(i + 1) !== 0x7C='+(exp.charCodeAt(i + 1) !== 0x7C) )\r\n            console.log('exp.charCodeAt(i - 1) !== 0x7C='+(exp.charCodeAt(i - 1) !== 0x7C))\r\n            console.log('curly='+(curly))\r\n            console.log('!curly='+(!curly))\r\n            console.log('square='+(square ))\r\n            console.log('!square='+(!square ))\r\n            console.log('!paren='+(!paren))\r\n            console.log('最后一个='+( c === 0x7C && // pipe\r\n                    exp.charCodeAt(i + 1) !== 0x7C &&\r\n                    exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren))\r\n\r\n\r\n            if (inSingle) {\r\n                //  '  \\\r\n                if (c === 0x27 && prev !== 0x5C) {\r\n                    inSingle = false;\r\n                }\r\n            } else if (inDouble) {\r\n                // \" \\\r\n                if (c === 0x22 && prev !== 0x5C) {\r\n                    inDouble = false;\r\n                }\r\n            } else if (inTemplateString) {\r\n                //  `\r\n                if (c === 0x60 && prev !== 0x5C) {\r\n                    inTemplateString = false;\r\n                }\r\n            } else if (inRegex) {\r\n                // 当前在正则表达式中  /开始\r\n                //  / \\\r\n                if (c === 0x2f && prev !== 0x5C) {\r\n                    inRegex = false;\r\n                }\r\n            } else if (\r\n                    // 如果在 之前不在 ' \" ` / 即字符串 或者正则中\r\n            // 那么就判断 当前字符是否是 |\r\n            //  如果当前 字符为 |\r\n            // 且 不在 { } 对象中\r\n            // 且 不在 [] 数组中\r\n            // 且不在  () 中\r\n            // 那么说明此时是过滤器的一个 分界点\r\n\r\n            c === 0x7C && // |\r\n            exp.charCodeAt(i + 1) !== 0x7C &&\r\n            exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren\r\n            ) {\r\n\r\n\r\n                /*\r\n                 如果前面没有表达式那么说明这是第一个 管道符号 \"|\"\r\n                 再次遇到 | 因为前面 expression = 'message '\r\n                 执行  pushFilter()\r\n                 */\r\n                if (expression === undefined) {\r\n                    // first filter, end of expression\r\n                    // 过滤器表达式 就是管道符号之后开始\r\n                    lastFilterIndex = i + 1;\r\n                    // 存储过滤器的 表达式\r\n                    expression = exp.slice(0, i).trim(); //这里匹配如果字符串是 'ab|c' 则把ab匹配出来\r\n\r\n                    console.log(expression)\r\n//                    debugger\r\n                } else {\r\n                    pushFilter();\r\n                }\r\n            } else {\r\n                switch (c) {\r\n                    case 0x22:\r\n                        inDouble = true;\r\n                        break                 // 匹配\"\r\n                    case 0x27:\r\n                        inSingle = true;\r\n                        break                // 匹配'\r\n                    case 0x60:\r\n                        inTemplateString = true;\r\n                        break                // 匹配`\r\n                    case 0x28:\r\n                        paren++;\r\n                        break                 // 匹配(\r\n                    case 0x29:\r\n                        paren--;\r\n                        break                 // 匹配)\r\n                    case 0x5B:\r\n                        square++;\r\n                        break                // 匹配[\r\n                    case 0x5D:\r\n                        square--;\r\n                        break                // 匹配]\r\n                    case 0x7B:\r\n                        curly++;\r\n                        break                 // 匹配 {\r\n                    case 0x7D:\r\n                        curly--;\r\n                        break                 //  匹配 }\r\n                    case 0x5C:\r\n                        break                //   匹配   \\\r\n                    case 0x2f:\r\n                        break;                //   匹配   /\r\n\r\n                    case  0x7C:               //   匹配   |\r\n                        break;\r\n                }\r\n\r\n\r\n\r\n\r\n                if (c === 0x2f) { //  /\r\n                    var j = i - 1;\r\n                    var p = (void 0);\r\n                    // find first non-whitespace prev char\r\n                    //查找第一个非空白的prev字符\r\n                    for (; j >= 0; j--) {\r\n                        p = exp.charAt(j);\r\n                        if (p !== ' ') {\r\n                            break\r\n                        }\r\n                    }\r\n                    if (!p || !validDivisionCharRE.test(p)) {\r\n                        inRegex = true;\r\n                    }\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n        if (expression === undefined) {\r\n            expression = exp.slice(0, i).trim();\r\n        } else if (lastFilterIndex !== 0) {\r\n            pushFilter();\r\n        }\r\n        // 获取当前过滤器的 并将其存储在filters 数组中\r\n        //  filters = [ 'filterA' , 'filterB']\r\n        function pushFilter() {\r\n            (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\r\n            lastFilterIndex = i + 1;\r\n        }\r\n\r\n        if (filters) {\r\n            console.log(filters)\r\n            for (i = 0; i < filters.length; i++) {\r\n                //把过滤器封装成函数 虚拟dom需要渲染的函数\r\n                expression = wrapFilter(expression, filters[i]);\r\n            }\r\n        }\r\n        console.log(expression)\r\n\r\n        //返回值\r\n        return expression\r\n    }\r\n    /*\r\n     生成过滤器的 表达式字符串\r\n     如上面的\r\n     exp = message\r\n     filters = ['filterA','filterB(arg1,arg2)']\r\n     第一步  以exp 为入参 生成 filterA 的过滤器表达式字符串  _f(\"filterA\")(message)\r\n     第二步 以第一步字符串作为入参 生成第二个过滤器的表达式字符串 _f(\"filterB\")(_f(\"filterA\")(message),arg1,arg2)\r\n     => _f(\"filterB\")(_f(\"filterA\")(message),arg1,arg2)\r\n     * @param {string} exp   上一个过滤器的值 没有就是 表达式的值\r\n     * @param {string} filter\r\n     * @returns {string}\r\n     */\r\n    console.log(wrapFilter('abc','defg(hijk)')) //结果 _f(\"defg\")(abc,hijk)\r\n    function wrapFilter(exp, filter) {\r\n        var i = filter.indexOf('('); //返回字符串第一次出现索引的位置\r\n        console.log('i='+i)\r\n        if (i < 0) {\r\n            // _f: resolveFilter\r\n            return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\") //闭包\r\n        } else {\r\n            //name 是 从字符串开始到(结束的字符串,不包含(\r\n            var name = filter.slice(0, i); //截取字符串 arrayObject.slice(start,end)\r\n            console.log('==name==')\r\n            console.log(name)\r\n\r\n            //args是从(开始匹配，到字符串末端，不包含(\r\n            var args = filter.slice(i + 1); //如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。\r\n            console.log('==args==')\r\n            console.log(args)\r\n            return (\r\n                    \"_f(\\\"\" + name + \"\\\")(\" + exp +\r\n                    (\r\n                            args !== ')' ?\r\n                            ',' + args\r\n                                    : args\r\n                    )\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    var defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g; //匹配viwe 视图中的{{指令}}\r\n    var regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g; //匹配特殊符号  - 或者. 或者* 或者+ 或者? 或者^ 或者$ 或者{ 或者} 或者( 或者) 或者| 或者[ 或者] 或者/ 或者\\\r\n\r\n\r\n    /**\r\n     * Create a cached version of a pure function.\r\n     */\r\n    /**\r\n     * Create a cached version of a pure function.\r\n     * 创建纯函数的缓存版本。\r\n     * 创建一个函数，缓存，再return 返回柯里化函数\r\n     * 闭包用法\r\n     */\r\n    /***********************************************************************************************\r\n     *函数名 ：cached\r\n     *函数功能描述 ： 创建纯函数的缓存版本。 创建一个函数，缓存，再return 返回柯里化函数 闭包用法\r\n     *函数参数 ： fn 函数\r\n     *函数返回值 ：    fn\r\n     *作者 ：\r\n     *函数创建日期 ：\r\n     *函数修改日期 ：\r\n     *修改人 ：\r\n     *修改原因 ：\r\n     *版本 ：\r\n     *历史版本 ：\r\n     ***********************************************************************************************/\r\n\r\n    /*\r\n     * var aFn =  cached(function(string){\r\n     *\r\n     *      return string\r\n     *  })\r\n     * aFn(string1);\r\n     * aFn(string2);\r\n     * aFn(string);\r\n     * aFn(string1);\r\n     * aFn(string2);\r\n     *\r\n     * aFn 函数会多次调用 里面就能体现了\r\n     *  用对象去缓存记录函数\r\n     * */\r\n\r\n    function cached(fn) {\r\n        var cache = Object.create(null);\r\n        return (function cachedFn(str) {\r\n            var hit = cache[str];\r\n            return hit || (cache[str] = fn(str))\r\n        })\r\n    }\r\n\r\n\r\n\r\n    var buildRegex = cached(function (delimiters) {\r\n        var open = delimiters[0].replace(regexEscapeRE, '\\\\$&'); //$&\t与 regexp 相匹配的子串。 这里的意思是遇到了特殊符号的时候在正则里面需要替换加多一个/斜杠\r\n        var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\r\n        return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g') // 匹配开始的open +任意字符或者换行符+ close 全局匹配\r\n    });\r\n\r\n   //匹配view 指令，并且把他转换成 虚拟dom vonde 需要渲染的函数,比如指令{{name}}转换成 _s(name)\r\n    //比如字符串  我叫{{name}},今年{{age}},数据{{data.number}}个手机  转换成 我叫+_s(name)+,今年+_s(age)+,数据+_s(data.number)+个手机\r\n    function parseText(\r\n            text, //字符串\r\n            delimiters //被修改默认的标签匹配\r\n    ) {\r\n        var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE; // 如果delimiters不存在则 用默认指令 {{}}，如果修改成其他指令则用其他指令\r\n        if (!tagRE.test(text)) { //判断字符串是否含有指令\r\n            return\r\n        }\r\n        var tokens = [];\r\n        var rawTokens = [];\r\n        var lastIndex = tagRE.lastIndex = 0;\r\n        var match, index, tokenValue;\r\n        while ((match = tagRE.exec(text))) { //循环能匹配上的指令，全局匹配代码：的时候会有个lastIndex  执行exec方法后，lastIndex就会记录匹配的字符串在原始字符串中最后一位的索引加一，\r\n            console.log('match=')\r\n            console.log(match)\r\n            console.log('match.index='+match.index)\r\n            console.log('lastIndex='+lastIndex)\r\n            index = match.index; //当前匹配上的字符串位置，也可以是上一次匹配出来的位置\r\n            // push text token\r\n            if (index > lastIndex) { //\r\n                rawTokens.push(tokenValue = text.slice(lastIndex, index)); //截取匹配到字符串指令前面的字符串，并添加到rawTokens\r\n                tokens.push(JSON.stringify(tokenValue)); //添加匹配到字符串指令前面的字符串\r\n            }\r\n            // tag token\r\n            //处理value 解析成正确的value，把过滤器 转换成vue 虚拟dom的解析方法函数 比如把过滤器 ' ab | c | d' 转换成 _f(\"d\")(_f(\"c\")(ab))\r\n            var exp = parseFilters(match[1].trim()); //\r\n            tokens.push((\"_s(\" + exp + \")\")); //把指令转义成函数，便于vonde 虚拟dom 渲染 比如指令{{name}} 转换成 _s(name)\r\n            rawTokens.push({'@binding': exp}); //绑定指令{{name}} 指令转换成  [{@binding: \"name\"}]\r\n            lastIndex = index + match[0].length; // 上一次匹配出来的字符串的位置+上一次字符串的长度  比如字符串   我叫{{name}},今年{{age}},数据{{data.number}}个手机  这时候lastIndex 等于10\r\n\r\n        }\r\n        console.log(lastIndex)\r\n        console.log(text.length)\r\n        if (lastIndex < text.length) { //拼接最后一个字符， 数据{{data.number}}个手机    把个手机 的字符串连接起来\r\n            rawTokens.push(tokenValue = text.slice(lastIndex)); //截取字符串。到最后一位\r\n            tokens.push(JSON.stringify(tokenValue)); //拼接最后一位字符串\r\n        }\r\n        return {\r\n            expression: tokens.join('+'), //把数组变成字符串，用加号链接 比如数组为 ['我叫','_s(name)',',今年','_s(age)',',数据','_s(data.number)','个手机']  变成   我叫+_s(name)+,今年+_s(age)+,数据+_s(data.number)+个手机\r\n            tokens: rawTokens\r\n        }\r\n    }\r\nconsole.log(parseText('我叫{{name}},今年{{age}},数据{{data.number}}个手机'))\r\n//    console.log(parseText('{{name}}这个'))\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "performance.html",
          "type": "blob",
          "size": 0.94140625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    // 以一个标志开始。\r\n    performance.mark(\"mySetTimeout-start\");\r\n\r\n    // 等待一些时间。\r\n    setTimeout(function() {\r\n        // 标志时间的结束。\r\n        performance.mark(\"mySetTimeout-end\");\r\n\r\n        // 测量两个不同的标志。\r\n        performance.measure(\r\n                \"mySetTimeout\",\r\n                \"mySetTimeout-start\",\r\n                \"mySetTimeout-end\"\r\n        );\r\n\r\n        // 获取所有的测量输出。\r\n        // 在这个例子中只有一个。\r\n        var measures = performance.getEntriesByName(\"mySetTimeout\");\r\n        var measure = measures[0];\r\n        console.log(\"setTimeout milliseconds:\", measure.duration)\r\n\r\n        // 清除存储的标志位\r\n//        performance.clearMarks();\r\n//        performance.clearMeasures();\r\n    }, 1000);\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "performance对象.docx",
          "type": "blob",
          "size": 18.1513671875,
          "content": null
        },
        {
          "name": "prohibitedKeywordRE.html",
          "type": "blob",
          "size": 0.8046875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n\r\n\r\n  //没有全局匹配 只会匹配到一个\r\n    var prohibitedKeywordRE = new RegExp('\\\\b' + (\r\n                    'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\r\n                    'super,throw,while,yield,delete,export,import,return,switch,default,' +\r\n                    'extends,finally,continue,debugger,function,arguments'\r\n            ).split(',').join('\\\\b|\\\\b') + '\\\\b');\r\n\r\n    var str = 'do else var cc if'\r\n\r\n\r\n\r\n\r\n\r\n        console.log(prohibitedKeywordRE)\r\n        console.log(prohibitedKeywordRE.test(str));\r\n        console.log(prohibitedKeywordRE.exec(str));\r\n        console.log(str.match(prohibitedKeywordRE));\r\n\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "promise.html",
          "type": "blob",
          "size": 1.1298828125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      //then 中接受两个参数是函数的，第一个是成功的状态，\r\n      // 第二个是失败的状态，如果参数有第二个的时候，\r\n      // 则promise失败的时候则会优先走then中的第二个参数，而不是走catch\r\n        new Promise((resolved,rejected)=>{\r\n            resolved('成功')\r\n        }).then((data)=>{\r\n              console.log(data)\r\n        }).catch()\r\n\r\n        new Promise((resolved,rejected)=>{\r\n            rejected('失败')\r\n        }).then((data)=>{\r\n            console.log(data)\r\n        },(data)=>{\r\n            console.log(data)\r\n        }).catch(()=>{\r\n            console.log(data)\r\n        })\r\n\r\n        new Promise((resolved,rejected)=>{\r\n            rejected('失败')\r\n        }).then((data)=>{\r\n            console.log(data)\r\n        }).catch((data)=>{\r\n            console.log(data)\r\n        })\r\n\r\n      new Promise((a,b)=>{\r\n          a('成功')\r\n      }).then((data)=>{\r\n          console.log('a='+data)\r\n      }).catch()\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "proxy.html",
          "type": "blob",
          "size": 1.2431640625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    var Odata={\r\n        data:{\r\n            name:'yao',\r\n            age:28,\r\n            array:[1,2,3,4,5,6,7,8,9],\r\n            obj:{\r\n                area:'guangxi',\r\n                work:'engineer'\r\n\r\n            }\r\n        }\r\n    }\r\n    var sharedPropertyDefinition = { //共享属性定义\r\n        enumerable: true,\r\n        configurable: true,\r\n        get: ()=>{},\r\n        set: ()=>{},\r\n    };\r\n    // 设置 监听 观察者, 该函数是可以让 对象中的三级key 直接冒泡到1级key中\r\n    //比如 name 只能在Odata.data.name 获取到数据，执行 proxy(Odata,'data','name')之后可以Odata.name 获取值\r\n    function proxy(target, sourceKey, key) {\r\n\r\n        sharedPropertyDefinition.get = function proxyGetter() { //设置get函数\r\n            return this[sourceKey][key]\r\n        };\r\n        sharedPropertyDefinition.set = function proxySetter(val) {//设置set函数\r\n            this[sourceKey][key] = val;\r\n        };\r\n        Object.defineProperty(target, key, sharedPropertyDefinition); //设置监听观察者\r\n    }\r\n    proxy(Odata,'data','name')\r\n    console.log(Odata.name)\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "repeat.html",
          "type": "blob",
          "size": 0.7841796875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n   <script>\r\n       var repeat = function (str, n) {\r\n           var res = '';\r\n           while (n) {\r\n               if (n % 2 === 1) {\r\n                   console.log('n % 2='+n % 2)\r\n                   res += str;\r\n\r\n\r\n               }\r\n               if (n > 1) {\r\n                   str += str;\r\n               }\r\n\r\n               n >>= 1;\r\n               console.log('=res=')\r\n               console.log(res)\r\n               console.log('n='+n)\r\n\r\n           }\r\n           return res\r\n       };\r\n       console.log(repeat('abcd',10));\r\n       var a=16;\r\n       //16 8\r\n       //15 7 相当于除2 向下取整2的倍数\r\n       console.log(  a >>= 1)\r\n   </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "requestAnimationFrame.html",
          "type": "blob",
          "size": 1.7705078125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<style>\r\n    #SomeElementYouWantToAnimate{\r\n        width: 100px;\r\n        height: 100px;\r\n        background: red;\r\n    }\r\n</style>\r\n<body>\r\n    <div id=\"SomeElementYouWantToAnimate\">\r\n\r\n    </div>\r\n  <script>\r\n      var start = null;\r\n      var element = document.getElementById('SomeElementYouWantToAnimate');\r\n      element.style.position = 'absolute';\r\n\r\n     /*\r\n      window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，\r\n      并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。\r\n      该方法需要传入一个回调函数作为参数，\r\n      该回调函数会在浏览器下一次重绘之前执行\r\n      注意：若你想在浏览器下次重绘之前继续更新下一帧动画，\r\n      那么回调函数自身必须再次调用window.requestAnimationFrame()\r\n      */\r\n     function step(timestamp) {\r\n          console.log('step')\r\n          if (!start) start = timestamp;\r\n          var progress = timestamp - start;\r\n          element.style.left = Math.min(progress / 10, 200) + 'px';\r\n          if (progress < 2000) {\r\n              window.requestAnimationFrame.bind(window)(step);\r\n          }\r\n      }\r\n\r\n      window.requestAnimationFrame(step);\r\n\r\n\r\n   var inBrowser=true;\r\n      var raf = inBrowser ?\r\n              (window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout)\r\n              : function (fn) {\r\n          return fn();\r\n      };\r\n\r\n      //下一帧\r\n      function nextFrame(fn) {\r\n\r\n          raf(function () {\r\n              raf(fn);\r\n          });\r\n      }\r\n\r\n      nextFrame(function () {\r\n           console.log('nextFrame')\r\n      })\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "requestAnimationFrame2.html",
          "type": "blob",
          "size": 1.8623046875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<style>\r\n    #SomeElementYouWantToAnimate{\r\n        width: 100px;\r\n        height: 100px;\r\n        background: red;\r\n    }\r\n</style>\r\n<body>\r\n    <div id=\"SomeElementYouWantToAnimate\">\r\n\r\n    </div>\r\n  <script>\r\n      var start = null;\r\n      var element = document.getElementById('SomeElementYouWantToAnimate');\r\n      element.style.position = 'absolute';\r\n\r\n     /*\r\n      window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，\r\n      并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。\r\n      该方法需要传入一个回调函数作为参数，\r\n      该回调函数会在浏览器下一次重绘之前执行\r\n      注意：若你想在浏览器下次重绘之前继续更新下一帧动画，\r\n      那么回调函数自身必须再次调用window.requestAnimationFrame()\r\n      */\r\n     function step(timestamp) {\r\n\r\n          console.log('step')\r\n          if (!start) start = timestamp;\r\n          var progress = timestamp - start;\r\n          element.style.left = Math.min(progress / 10, 200) + 'px';\r\n          if (progress < 2000) {\r\n              window.requestAnimationFrame.bind(window)(function () {\r\n                 window.requestAnimationFrame.bind(window)(step)\r\n              });\r\n          }\r\n      }\r\n\r\n      window.requestAnimationFrame(step);\r\n\r\n\r\n   var inBrowser=true;\r\n      var raf = inBrowser ?\r\n              (window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout)\r\n              : function (fn) {\r\n          return fn();\r\n      };\r\n\r\n      //下一帧\r\n      function nextFrame(fn) {\r\n\r\n          raf(function () {\r\n              raf(fn);\r\n          });\r\n      }\r\n\r\n      nextFrame(function () {\r\n           console.log('nextFrame')\r\n      })\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "setget.html",
          "type": "blob",
          "size": 0.447265625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n       var Vue = function () {\r\n\r\n       }\r\n       Vue.prototype={\r\n           init:function () {\r\n\r\n           }\r\n       }\r\n       Vue.set = function (target,key) {\r\n           console.log(target)\r\n           console.log(key)\r\n       }\r\n       var _vue= new Vue();\r\n       _vue.name='yao guan shou ';\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "simpleCheckRE.html",
          "type": "blob",
          "size": 1.2373046875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n\r\n   //检测数据类型\r\n   var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\r\n\r\n\r\n   //检查函数是否是函数声明  如果是函数表达式或者匿名函数是匹配不上的\r\n    function getType(fn) {\r\n        var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\r\n        console.log('match')\r\n        console.log(match)\r\n        return match ? match[1] : ''\r\n    }\r\n\r\n   //getType检查函数是否是函数声明  如果是函数表达式或者匿名函数是匹配不上的\r\n   var expectedType = getType(12);\r\n   var expectedType1 = getType(12);\r\n   var expectedType2 = getType(12);\r\n   var expectedType3 = getType(12);\r\n\r\n\r\n   //检测改函数是什么类型\r\n   console.log(simpleCheckRE.test(expectedType))\r\n   console.log(simpleCheckRE.test(expectedType1))\r\n   console.log(simpleCheckRE.test(expectedType2))\r\n   console.log(simpleCheckRE.test(expectedType3))\r\n   console.log(simpleCheckRE.test(expectedType4))\r\n\r\n\r\n//   console.log(simpleCheckRE.test('Array') )\r\n//   console.log(simpleCheckRE.test('Number') )\r\n//   console.log(simpleCheckRE.test('String') )\r\n\r\n\r\n\r\n\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "slice splice.html",
          "type": "blob",
          "size": 0.8623046875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n   <script>\r\n       //slice splice\r\n        var  str='abcdefg';\r\n       var arr = [1,2,3,4,5,6,7,8,9];\r\n       var arrObj = [1,2,3,{\r\n            name:'abc',\r\n            age:27\r\n       }];\r\n\r\n       var arrObj2 = arrObj\r\n       var arrObj3 =  arrObj.slice()\r\n\r\n\r\n\r\n        console.log(str.charAt(0))\r\n       //数组或者字符串api\r\n       console.log(str.slice(1))\r\n       console.log(arr.slice(1))\r\n       console.log(arr.slice())\r\n\r\n       console.log(arrObj2)\r\n       console.log(arrObj3)\r\n\r\n       arrObj2[3].name='bcd'\r\n       arrObj2[0].name='00'\r\n\r\n       console.log(arrObj)\r\n\r\n       arrObj3[3].age=28\r\n       arrObj3[1].age='11'\r\n       console.log(arrObj)\r\n\r\n\r\n\r\n       //数组 api\r\n//       console.log(str.splice(0))\r\n\r\n   </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "split.html",
          "type": "blob",
          "size": 0.904296875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      var arrStr=['st ig ood shit gonging good shit gonging good' ,'play admin office friend,quick ready thank yellow'];\r\n      arrStr = arrStr.map(item=>{\r\n          var  itemArrStr = item.split(' ');\r\n          let length = 0;\r\n          let str = ''\r\n          for(let index=0;index<itemArrStr.length;index++){\r\n              length+=itemArrStr[index].length+1;\r\n              if(length>15){\r\n                 length=0;\r\n                 str +='<br/>'+itemArrStr[index]+' ';\r\n              }else{\r\n                  str +=itemArrStr[index]+' ';\r\n              }\r\n\r\n          }\r\n          length=length-1;\r\n          console.log(length);\r\n          console.log(str);\r\n          return str\r\n\r\n      })\r\n\r\nconsole.log('st ig ood shit'.length)\r\n      console.log(arrStr)\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "startTagClose.html",
          "type": "blob",
          "size": 0.3857421875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    var html='   /> '\r\n    var html1='   > '\r\n    var startTagClose = /^\\s*(\\/?)>/; //   匹配 > 标签 或者/>\r\n    var end = html.match(startTagClose);\r\n  console.log(end)\r\n    var end1 = html1.match(startTagClose);\r\n    console.log(end1)\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "stopImmediatePropagation.html",
          "type": "blob",
          "size": 1.2509765625,
          "content": "<!DOCTYPE html>\r\n<html>\r\n<meta charset=\"UTF-8\">\r\n<title>Title</title>\r\n<head>\r\n    <style>\r\n        p { height: 30px; width: 150px; background-color: #ccf; }\r\n        div {height: 30px; width: 150px; background-color: #cfc; }\r\n    </style>\r\n</head>\r\n<body>\r\n<div>\r\n    <p>paragraph</p>\r\n</div>\r\n<script>\r\n    const p = document.querySelector('p')\r\n    p.addEventListener(\"click\", (event) => {\r\n        alert(\"我是p元素上被绑定的第一个监听函数\");\r\n    }, false);\r\n\r\n    p.addEventListener(\"click\", (event) => {\r\n        alert(\"我是p元素上被绑定的第二个监听函数\");\r\n        event.stopImmediatePropagation();\r\n        // 执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.\r\n    }, false);\r\n\r\n    p.addEventListener(\"click\",(event) => {\r\n        alert(\"我是p元素上被绑定的第三个监听函数\");\r\n        // 该监听函数排在上个函数后面，该函数不会被执行\r\n    }, false);\r\n\r\n    document.querySelector(\"div\").addEventListener(\"click\", (event) => {\r\n        alert(\"我是div元素,我是p元素的上层元素\");\r\n        // p元素的click事件没有向上冒泡，该函数不会被执行\r\n    }, false);\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "stripStringRE.html",
          "type": "blob",
          "size": 0.8427734375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n//    3.方法\r\n//    通常对于一个正则对象来讲，我们能够使用的方法基本上有三个，即regObj.test,regObj.exec及regObj.compile\r\n    var stripStringRE = /'(?:[^'\\\\]|\\\\.)*'  |   \"(?:[^\"\\\\]|\\\\.)*\"  |  `(?:[^`\\\\]|\\\\.)* \\$\\{|\\}(?:[^`\\\\]|\\\\.)*`  |  `(?:[^`\\\\]|\\\\.)*`  /g;\r\n    var str = '\".1234134 as d 54sdf 353.:a$24 ads5`'\r\n\r\n//'([^'\\\\]|\\\\.)*'　''内的若干字符\r\n//|\r\n//\"([^\"\\\\]|\\\\.)*\" \"\"内的若干字符\r\n//|\r\n// `(?:[^`\\\\]|\\\\.)* \\$\\{|\\}(?:[^`\\\\]|\\\\.)*`  `字符和${字符}和字符`\r\n//|\r\n//`([^`\\\\]|\\\\.)*`　`和`之间的若干字符\r\n\r\n\r\n\r\n\r\n    console.log(stripStringRE.test(str));\r\n    console.log(stripStringRE.exec(str));\r\n    console.log(str.match(stripStringRE));\r\n\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "toUnicodeFun.html",
          "type": "blob",
          "size": 0.998046875,
          "content": "<!DOCTYPE html>\r\n<html class=\"ui-page-login\">\r\n\r\n<head>\r\n\r\n\r\n</head>\r\n\r\n\r\n<body>\r\n<script type=\"text/javascript\">\r\n    function toUnicodeFun(data){\r\n        if(data == '' || typeof data == 'undefined') return '请输入汉字';\r\n        var str ='';\r\n        for(var i=0;i<data.length;i++){\r\n            str+=\"\\\\u\"+data.charCodeAt(i).toString(16);\r\n        }\r\n        return str;\r\n    }\r\n\r\n    var resultUnicode = toUnicodeFun('中国'); // \\u4e2d\\u56fd\r\n    console.log(resultUnicode);\r\n\r\n\r\n    function toChineseWords(data){\r\n        if(data == '' || typeof data == 'undefined') return '请输入十六进制unicode';\r\n        data = data.split(\"\\\\u\");\r\n        var str ='';\r\n        for(var i=0;i<data.length;i++){\r\n            str+=String.fromCharCode(parseInt(data[i],16).toString(10));\r\n        }\r\n        return str;\r\n    }\r\n\r\n    var resultChineseWords = toChineseWords(\"\\u4e2d\\u56fd\");\r\n    console.log(resultChineseWords);//中国\r\n    document.write(String.fromCharCode(0x7C))\r\n\r\n</script>\r\n\r\n</body>\r\n\r\n</html>"
        },
        {
          "name": "transformModel.html",
          "type": "blob",
          "size": 1.263671875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      function isDef(v) {\r\n          //判断数据 是否不等于 undefined或者null\r\n          return v !== undefined && v !== null\r\n      }\r\n\r\n      transformModel({\r\n\r\n      }, {\r\n          props:{},\r\n          model:{\r\n              value:''\r\n          }\r\n      })\r\n\r\n      function transformModel(options, data) {\r\n          //获取prop 如果获取不到 则取值 value\r\n          var prop = (options.model && options.model.prop) || 'value';\r\n          console.log(prop)\r\n\r\n          //获取event如果获取不到 则取值 input\r\n         var event = (options.model && options.model.event) || 'input';\r\n          console.log(event)\r\n          console.log(data)\r\n       (data.props || (data.props = {}))\r\n//           [prop] = data.model.value;\r\n//          console.log(prop)\r\n//          console.log(event)\r\n//          var on = data.on || (data.on = {});\r\n//          if (isDef(on[event])) {\r\n//              on[event] = [data.model.callback].concat(on[event]);\r\n//          } else {\r\n//              on[event] = data.model.callback;\r\n//          }\r\n//          console.log(options)\r\n//          console.log(data)\r\n      }\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "transition.html",
          "type": "blob",
          "size": 0.12890625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n\r\n</body>\r\n</html>"
        },
        {
          "name": "unaryOperatorsRE.html",
          "type": "blob",
          "size": 0.77734375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n\r\n\r\n    //没有全局匹配 只会匹配到一个\r\n    var unaryOperatorsRE = new RegExp('\\\\b' + (\r\n                    'delete,typeof,void'\r\n            ).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\r\n\r\n\r\n    /delete\\s*\\([^\\)]*\\)|typeof\\s*\\([^\\)]*\\)|void\\s*\\([^\\)]*\\)/\r\n    var str = '$delete  (aa) $typeof  (aa)'\r\n\r\n\r\n\r\n\r\n\r\n    console.log(unaryOperatorsRE)\r\n    console.log(unaryOperatorsRE.test(str));\r\n    console.log(unaryOperatorsRE.exec(str));\r\n\r\n    var regStr =str.match(unaryOperatorsRE);\r\n\r\n    console.log(str.match(unaryOperatorsRE));\r\n    console.log(regStr.index-1);\r\n    console.log(str[regStr.index-1])\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "unaryOperatorsRE匹配字符串前一个字符串是什么.html",
          "type": "blob",
          "size": 0.822265625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n\r\n\r\n    //没有全局匹配 只会匹配到一个\r\n    var unaryOperatorsRE = new RegExp('\\\\b' + (\r\n                    'delete,typeof,void'\r\n            ).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)','g');\r\n\r\n\r\n    /delete\\s*\\([^\\)]*\\)|typeof\\s*\\([^\\)]*\\)|void\\s*\\([^\\)]*\\)/\r\n    var str = '$delete  (aa)  typeof  (aa)'\r\n\r\n\r\n\r\n\r\n\r\n    console.log(unaryOperatorsRE)\r\n    console.log(unaryOperatorsRE.test(str));\r\n    console.log(unaryOperatorsRE.exec(str));\r\n\r\n    var regStr =str.match(unaryOperatorsRE);\r\n\r\n    console.log(str.match(unaryOperatorsRE));\r\n//    console.log(unaryOperatorsRE.exec(str).index-1);\r\n    console.log(str[unaryOperatorsRE.exec(str).index-1])\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "unaryOperatorsRE匹配字符串前一个字符串是什么2.html",
          "type": "blob",
          "size": 0.8701171875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n\r\n\r\n    var str='1abcde2abcde3abcde4abcde5abcde6abcde7abcde'\r\n    var reg = /(abc)/;\r\n\r\n   function getPrevString(reg,str,getPrevStrArr) {\r\n       getPrevStrArr=getPrevStrArr||[];\r\n       var regStr = reg.exec(str);\r\n       var arrStr = str.match(reg);\r\n       console.log(regStr)\r\n       console.log(arrStr)\r\n       if(arrStr&&arrStr.length>=1){\r\n           getPrevStrArr.push(str.charAt(regStr.index-1));\r\n           str=str.replace(reg,'');\r\n           console.log(str)\r\n           arrStr.pop();\r\n//           setTimeout(()=>{\r\n               getPrevStrArr.concat(getPrevString(reg,str,getPrevStrArr));\r\n//           },500)\r\n\r\n       }\r\n       return getPrevStrArr;\r\n   }\r\n\r\n\r\n    console.log(getPrevString(reg,str));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "vm._watcher === watcher.html",
          "type": "blob",
          "size": 0.4580078125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    var queue={\r\n        name:'abc',\r\n        age:19,\r\n        vm:{\r\n            _watcher:{}\r\n        },\r\n    }\r\n    queue.vm._watcher=queue;\r\n    var watcher = queue;\r\n    var vm = watcher.vm; //获取到虚拟dom\r\n    if (vm._watcher === watcher) { //判断watcher与vm._watcher 相等\r\n          alert(1)\r\n    }\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "vue.js",
          "type": "blob",
          "size": 645.701171875,
          "content": "/*!\n * Vue.js v2.5.16\n * (c) 2014-2018 Evan You\n * Released under the MIT License.\n * development   开发\n * production    生产\n /*\n *  兼容 amd cmd 模块写法\n * */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n        typeof define === 'function' && define.amd ? define(factory) :\n            (global.Vue = factory());\n}(this, (function () {\n    'use strict';\n\n    /*  */\n    //Object.freeze()阻止修改现有属性的特性和值，并阻止添加新属性。\n    var emptyObject = Object.freeze({});\n\n    // these helpers produces better vm code in JS engines due to their\n    // explicitness and function inlining\n    // these helpers produces better vm code in JS engines due to their\n    // explicitness and function inlining\n    //判断数据 是否是undefined或者null\n    function isUndef(v) {\n        return v === undefined || v === null\n    }\n\n    //判断数据 是否不等于 undefined或者null\n    function isDef(v) {\n        return v !== undefined && v !== null\n    }\n\n    //判断是否真的等于true\n    function isTrue(v) {\n        return v === true\n    }\n\n    //  判断是否是false\n    function isFalse(v) {\n\n        return v === false\n    }\n\n    /**\n     * Check if value is primitive\n     *  //判断数据类型是否是string，number，symbol，boolean\n     */\n    function isPrimitive(value) {\n        //判断数据类型是否是string，number，symbol，boolean\n        return (\n            typeof value === 'string' ||\n            typeof value === 'number' ||\n            // $flow-disable-line\n            typeof value === 'symbol' ||\n            typeof value === 'boolean'\n        )\n    }\n\n    /**\n     * Quick object check - this is primarily used to tell\n     * Objects from primitive values when we know the value\n     * is a JSON-compliant type.\n     */\n    function isObject(obj) {\n        //判断是否是对象\n        return obj !== null && typeof obj === 'object'\n    }\n\n    /**\n     * Get the raw type string of a value e.g. [object Object]\n     */\n    //获取toString 简写\n    var _toString = Object.prototype.toString;\n\n    function toRawType(value) {\n        //类型判断 返会Array ，Function，String,Object,Re 等\n        return _toString.call(value).slice(8, -1)\n    }\n\n    /**\n     * Strict object type check. Only returns true\n     * for plain JavaScript objects.\n     */\n    function isPlainObject(obj) {\n        //判断是否是对象\n        return _toString.call(obj) === '[object Object]'\n    }\n\n    function isRegExp(v) {\n        //判断是否是正则对象\n        return _toString.call(v) === '[object RegExp]'\n    }\n\n    /**\n     * Check if val is a valid array index.\n     */\n    /**\n     * Check if val is a valid array index.\n     * 检查VAL是否是有效的数组索引。\n     */\n    function isValidArrayIndex(val) {\n        //isFinite 检测是否是数据\n        //Math.floor 向下取整\n        var n = parseFloat(String(val));\n        //isFinite 如果 number 是有限数字（或可转换为有限数字），那么返回 true。否则，如果 number 是 NaN（非数字），或者是正、负无穷大的数，则返回 false。\n        return n >= 0 && Math.floor(n) === n && isFinite(val)\n    }\n\n    /**\n     * Convert a value to a string that is actually rendered.\n     */\n    function toString(val) {\n\n        //将对象或者其他基本数据 变成一个 字符串\n        return val == null\n            ? ''\n            : typeof val === 'object'\n                ? JSON.stringify(val, null, 2)\n                : String(val)\n    }\n\n    /**\n     * Convert a input value to a number for persistence.\n     * If the conversion fails, return original string.\n     */\n    function toNumber(val) {\n        //字符串转数字，如果失败则返回字符串\n        var n = parseFloat(val);\n        return isNaN(n) ? val : n\n    }\n\n    /**\n     * Make a map and return a function for checking if a key\n     * is in that map.\n     *\n     *  //map 对象中的[name1,name2,name3,name4]  变成这样的map{name1:true,name2:true,name3:true,name4:true}\n     *  并且传进一个key值取值，这里用到策略者模式\n     */\n    function makeMap(str,\n        expectsLowerCase) {\n        var map = Object.create(null);   //创建一个新的对象\n        var list = str.split(',');    //按字符串,分割\n        for (var i = 0; i < list.length; i++) {\n            map[list[i]] = true;   //map 对象中的[name1,name2,name3,name4]  变成这样的map{name1:true,name2:true,name3:true,name4:true}\n        }\n        return expectsLowerCase\n            ? function (val) {\n                return map[val.toLowerCase()];\n            }   //返回一个柯里化函数 toLowerCase转换成小写\n            : function (val) {\n                return map[val];\n            }   //返回一个柯里化函数 并且把map中添加一个 属性建\n    }\n\n    /**\n     * Check if a tag is a built-in tag.\n     * 检查标记是否为内置标记。\n     */\n    var isBuiltInTag = makeMap('slot,component', true);\n\n    /**\n     * Check if a attribute is a reserved attribute.\n     * 检查属性是否为保留属性。\n     * isReservedAttribute=function(vale){ map{key:true,ref:true,slot-scope:true,is:true,vaule:undefined}  }\n     */\n    var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n    /**\n     * Remove an item from an array\n     *    //删除数组\n     */\n    function remove(arr, item) {\n        if (arr.length) {\n            var index = arr.indexOf(item);\n            if (index > -1) {\n                return arr.splice(index, 1)\n            }\n        }\n    }\n\n    /**\n     * Check whether the object has the property.\n     *检查对象属性是否是实例化还是原型上面的\n     */\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n    function hasOwn(obj, key) {\n        return hasOwnProperty.call(obj, key)\n    }\n\n    /**\n     * Create a cached version of a pure function.\n     */\n    /**\n     * Create a cached version of a pure function.\n     * 创建纯函数的缓存版本。\n     * 创建一个函数，缓存，再return 返回柯里化函数\n     * 闭包用法\n     */\n    /***********************************************************************************************\n     *函数名 ：cached\n     *函数功能描述 ： 创建纯函数的缓存版本。 创建一个函数，缓存，再return 返回柯里化函数 闭包用法\n     *函数参数 ： fn 函数\n     *函数返回值 ：    fn\n     *作者 ：\n     *函数创建日期 ：\n     *函数修改日期 ：\n     *修改人 ：\n     *修改原因 ：\n     *版本 ：\n     *历史版本 ：\n     ***********************************************************************************************/\n\n    /*\n     * var aFn =  cached(function(string){\n     *\n     *      return string\n     *  })\n     * aFn(string1);\n     * aFn(string2);\n     * aFn(string);\n     * aFn(string1);\n     * aFn(string2);\n     *\n     * aFn 函数会多次调用 里面就能体现了\n     *  用对象去缓存记录函数\n     * */\n\n    function cached(fn) {\n        var cache = Object.create(null);\n        return (function cachedFn(str) {\n            var hit = cache[str];\n            return hit || (cache[str] = fn(str))\n        })\n    }\n\n    /**\n     * Camelize a hyphen-delimited string.\n     * 用连字符分隔的字符串。\n     * camelize = cachedFn(str)=>{ var hit = cache[str];\n    return hit || (cache[str] = fn(str))}\n\n     调用一个camelize 存一个建进来 调用两次 如果建一样就返回 hit\n\n     横线-的转换成驼峰写法\n     可以让这样的的属性 v-model 变成 vModel\n     */\n    var camelizeRE = /-(\\w)/g;\n    var camelize = cached(function (str) {\n        return str.replace(camelizeRE, function (_, c) {\n            return c ? c.toUpperCase() : '';\n        })\n    });\n\n    /**\n     * Capitalize a string.  将首字母变成大写。\n     */\n    var capitalize = cached(function (str) {\n        return str.charAt(0).toUpperCase() + str.slice(1)\n    });\n\n    /**\n     * Hyphenate a camelCase string.\n     * \\B的用法\n     \\B是非单词分界符，即可以查出是否包含某个字，如“ABCDEFGHIJK”中是否包含“BCDEFGHIJK”这个字。\n     */\n    var hyphenateRE = /\\B([A-Z])/g;\n    var hyphenate = cached(function (str) {\n        //大写字母，加完减号又转成小写了 比如把驼峰 aBc 变成了 a-bc\n        //匹配大写字母并且两面不是空白的 替换成 '-' + '字母' 在全部转换成小写\n        return str.replace(hyphenateRE, '-$1').toLowerCase();\n    });\n\n    /**\n     * Simple bind polyfill for environments that do not support it... e.g.\n     * PhantomJS 1.x. Technically we don't need this anymore since native bind is\n     * now more performant in most browsers, but removing it would be breaking for\n     * code that was able to run in PhantomJS 1.x, so this must be kept for\n     * backwards compatibility.\n     *  改变this 上下文\n     *  执行方式\n     */\n\n    /* istanbul ignore next */\n    //绑定事件 并且改变上下文指向\n    function polyfillBind(fn, ctx) {\n        function boundFn(a) {\n            var l = arguments.length;\n            return l\n                ? l > 1\n                    ? fn.apply(ctx, arguments)\n                    : fn.call(ctx, a)\n                : fn.call(ctx)\n        }\n\n        boundFn._length = fn.length;\n        return boundFn\n    }\n\n    //执行方式\n    function nativeBind(fn, ctx) {\n        return fn.bind(ctx)\n    }\n\n    //bing 改变this上下文\n    var bind = Function.prototype.bind\n        ? nativeBind\n        : polyfillBind;\n\n    /**\n     * Convert an Array-like object to a real Array.\n     * 将假的数组转换成真的数组\n     */\n    function toArray(list, start) {\n        start = start || 0;\n        var i = list.length - start;\n        var ret = new Array(i);\n        while (i--) {\n            ret[i] = list[i + start];\n        }\n        return ret\n    }\n\n    /**\n     * Mix properties into target object.\n     * * 浅拷贝\n     */\n    /***********************************************************************************************\n     *函数名 ：extend\n     *函数功能描述 ： 浅拷贝\n     *函数参数 ： to 超类， _from 子类\n     *函数返回值 ： 合并类\n     *作者 ：\n     *函数创建日期 ：\n     *函数修改日期 ：\n     *修改人 ：\n     *修改原因 ：\n     *版本 ：\n     *历史版本 ：\n     ***********************************************************************************************/\n    //对象浅拷贝，参数（to, _from）循环_from的值，会覆盖掉to的值\n    function extend(to, _from) {\n        for (var key in _from) {\n            to[key] = _from[key];\n        }\n        return to\n    }\n\n    /**\n     * Merge an Array of Objects into a single Object.\n     *\n     */\n    /***********************************************************************************************\n     *函数名 ：toObject\n     *函数功能描述 ： 和并对象数组合并成一个对象\n     *函数参数 ： arr 数组对象类\n     *函数返回值 ：\n     *作者 ：\n     *函数创建日期 ：\n     *函数修改日期 ：\n     *修改人 ：\n     *修改原因 ：\n     *版本 ：\n     *历史版本 ：\n     ***********************************************************************************************/\n\n    function toObject(arr) {\n        var res = {};\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i]) {\n                extend(res, arr[i]);\n            }\n        }\n        return res\n    }\n\n    /**\n     * Perform no operation.\n     * Stubbing args to make Flow happy without leaving useless transpiled code\n     * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\n\n     */\n    function noop(a, b, c) {\n    }\n\n    /**\n     * Always return false.\n     * 返回假的\n     */\n    var no = function (a, b, c) {\n        return false;\n    };\n\n    /**\n     * Return same value\n     *返回相同值\n     */\n    var identity = function (_) {\n        return _;\n    };\n\n    /**\n     * Generate a static keys string from compiler modules.\n     *\n     *    [{ staticKeys:1},{staticKeys:2},{staticKeys:3}]\n     * 连接数组对象中的 staticKeys key值，连接成一个字符串 str=‘1,2,3’\n     */\n    function genStaticKeys(modules) {\n        return modules.reduce(\n            function (keys, m) {\n                //累加staticKeys的值变成数组\n                return keys.concat(m.staticKeys || [])\n            },\n            []\n        ).join(',') //转换成字符串\n    }\n\n    /**\n     * Check if two values are loosely equal - that is,\n     * if they are plain objects, do they have the same shape?\n     * 检测a和b的数据类型，是否是不是数组或者对象，对象的key长度一样即可，数组长度一样即可\n     */\n    function looseEqual(a, b) {\n        if (a === b) {\n            return true\n        }  //如果a和b是完全相等 则true\n        var isObjectA = isObject(a);\n        var isObjectB = isObject(b);\n        if (isObjectA && isObjectB) {  //如果a和都是对象则让下走\n            try {\n                var isArrayA = Array.isArray(a);\n                var isArrayB = Array.isArray(b);\n                if (isArrayA && isArrayB) {  //如果a和b都是数组\n                    // every  条件判断\n                    return a.length === b.length && a.every(function (e, i) {  //如果a长度和b长度一样的时候\n                        return looseEqual(e, b[i])  //递归\n                    })\n                } else if (!isArrayA && !isArrayB) {  //或者a和b都不是数组\n                    var keysA = Object.keys(a);  // 获取到a的key值 变成一个数组\n                    var keysB = Object.keys(b); // 获取到b的key值 变成一个数组\n                    //他们的对象key值长度是一样的时候  则加载every 条件函数\n                    return keysA.length === keysB.length && keysA.every(function (key) {\n                        //递归 a和b的值\n                        return looseEqual(a[key], b[key])\n                    })\n                } else {\n                    //如果不是对象跳槽循环\n                    /* istanbul ignore next */\n                    return false\n                }\n            } catch (e) {\n                //如果不是对象跳槽循环\n                /* istanbul ignore next */\n                return false\n            }\n        } else if (!isObjectA && !isObjectB) {  //b和a 都不是对象的时候\n            //把a和b变成字符串，判断他们是否相同\n            return String(a) === String(b)\n        } else {\n            return false\n        }\n    }\n\n    // 判断 arr数组中的数组 是否和val相等。\n    // 或者 arr数组中的对象，或者对象数组 是否和val 相等\n    function looseIndexOf(arr, val) {\n        for (var i = 0; i < arr.length; i++) {\n            if (looseEqual(arr[i], val)) {\n                return i\n            }\n        }\n        return -1\n    }\n\n    /**\n     * Ensure a function is called only once.\n     *  确保该函数只调用一次 闭包函数\n     */\n    function once(fn) {\n        var called = false;\n        return function () {\n            if (!called) {\n                called = true;\n                fn.apply(this, arguments);\n            }\n        }\n    }\n\n    //ssr标记属性\n    var SSR_ATTR = 'data-server-rendered';\n\n    var ASSET_TYPES = [\n        'component',  //组建指令\n        'directive', //定义指令 指令\n        'filter'  //过滤器指令\n    ];\n\n\n    var LIFECYCLE_HOOKS = [\n        'beforeCreate',  //  生命周期 开始实例化 vue 指令\n        'created',       //生命周期   结束实例化完 vue 指令\n        'beforeMount',  //生命周期 开始渲染虚拟dom ，挂载event 事件 指令\n        'mounted',      //生命周期  渲染虚拟dom ，挂载event 事件 完 指令\n        'beforeUpdate',  //生命周期  开始更新view 数据指令\n        'updated',       //生命周期  结束更新view 数据指令\n        'beforeDestroy', //生命周期  开始销毁 new 实例 指令\n        'destroyed',     //生命周期  结束销毁 new 实例 指令\n        'activated',   //keep-alive组件激活时调用。\n        'deactivated',  //deactivated keep-alive组件停用时调用。\n        'errorCaptured'  // 具有此钩子的组件捕获其子组件树（不包括其自身）中的所有错误（不包括在异步回调中调用的那些）。\n    ];\n    /*  */\n\n    var config = ({\n        /**\n         * Option merge strategies (used in core/util/options)\n         */\n        // $flow-disable-line\n        //合并对象 策略\n        optionMergeStrategies: Object.create(null),\n\n        /**\n         * Whether to suppress warnings.\n         * * 是否禁止警告。\n         */\n        silent: false,\n\n        /**\n         * Show production mode tip message on boot?\n         * 在引导时显示生产模式提示消息？\n         * webpack打包判断执行环境是不是生产环境，如果是生产环境会压缩并且没有提示警告之类的东西\n         */\n        productionTip: \"development\" !== 'production',\n        /**\n         * Whether to enable devtools\n         * 是否启用DevTools\n         */\n        devtools: \"development\" !== 'production',\n\n        /**\n         * Whether to record perf\n         * 是否记录PERF\n         */\n        performance: false,\n\n        /**\n         * Error handler for watcher errors\n         *监视器错误的错误处理程序\n         */\n        errorHandler: null,\n\n        /**\n         * Warn handler for watcher warns\n         * 观察加警告处理。\n         */\n        warnHandler: null,\n\n        /**\n         * Ignore certain custom elements\n         * 忽略某些自定义元素\n         */\n        ignoredElements: [],\n\n        /**\n         * Custom user key aliases for v-on\n         * 用于V-on的自定义用户密钥别名 键盘码\n         */\n        // $flow-disable-line\n        keyCodes: Object.create(null),\n\n        /**\n         * Check if a tag is reserved so that it cannot be registered as a\n         * component. This is platform-dependent and may be overwritten.\n         * 检查是否保留了一个标签，使其不能注册为组件。这是平台相关的，可能会被覆盖。\n         */\n        isReservedTag: no,\n\n        /**\n         * Check if an attribute is reserved so that it cannot be used as a component\n         * prop. This is platform-dependent and may be overwritten.\n         * 检查属性是否被保留，使其不能用作组件支持。这是平台相关的，可能会被覆盖。\n         */\n        isReservedAttr: no,\n\n        /**\n         * Check if a tag is an unknown element.\n         * Platform-dependent.\n         * Check if a tag is an unknown element.  Platform-dependent.\n         * 检查标签是否为未知元素依赖于平台的检查，如果标签是未知元素。平台相关的\n         *\n         */\n        isUnknownElement: no,\n\n        /**\n         * Get the namespace of an element\n         * 获取元素的命名空间\n         */\n        getTagNamespace: noop,\n\n        /**\n         * Parse the real tag name for the specific platform.\n         * 解析真实的标签平台\n         */\n        parsePlatformTagName: identity,\n\n        /**\n         * Check if an attribute must be bound using property, e.g. value\n         * Platform-dependent.\n         * 检查属性是否必须使用属性绑定，例如依赖于依赖于平台的属性。\n         */\n        mustUseProp: no,\n\n        /**\n         * Exposed for legacy reasons\n         * 因遗产原因暴露\n         * 声明周期对象\n         */\n        _lifecycleHooks: LIFECYCLE_HOOKS\n    })\n\n    /*  */\n\n    /**\n     * Check if a string starts with $ or _\n     * 检查一个字符串是否以$或者_开头\n     */\n    function isReserved(str) {\n        var c = (str + '').charCodeAt(0);\n        return c === 0x24 || c === 0x5F\n    }\n\n    /**\n     * Define a property.\n     * 用defineProperty 定义属性\n     * 详细地址 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n     第一个参数是对象\n     第二个是key\n     第三个是vue\n     第四个是 是否可以枚举\n     */\n    function def(obj, key, val, enumerable) {\n\n        Object.defineProperty(obj, key, {\n            value: val, //值\n            enumerable: !!enumerable,  //定义了对象的属性是否可以在 for...in 循环和 Object.keys() 中被枚举。\n            writable: true, //可以 改写 value\n            configurable: true  //configurable特性表示对象的属性是否可以被删除，以及除writable特性外的其他特性是否可以被修改。\n        });\n    }\n\n\n    /**\n     * Parse simple path.\n     * 解析。\n     */\n    var bailRE = /[^\\w.$]/;  //匹配不是 数字字母下划线 $符号   开头的为true\n\n    function parsePath(path) {\n        console.log(path)\n\n        if (bailRE.test(path)) {  //匹配上 返回 true\n            return\n        }\n        //匹配不上  path在已点分割\n        var segments = path.split('.');\n        return function (obj) {\n\n            for (var i = 0; i < segments.length; i++) {\n                //如果没有参数则返回\n                if (!obj) {\n                    return\n                }\n                //将对象中的一个key值 赋值给该对象 相当于 obj = obj[segments[segments.length-1]];\n                obj = obj[segments[i]];\n            }\n            //否则返回一个对象\n            return obj\n        }\n    }\n\n    /*  */\n\n    // can we use __proto__?\n    var hasProto = '__proto__' in {};\n\n    // Browser environment sniffing\n    //判断设备和浏览器\n    var inBrowser = typeof window !== 'undefined';\n\n    //如果不是浏览器\n    var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform; //weex 环境 一个 vue做app包的框架\n    var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();//weex 环境 一个 vue做app包的框架\n\n    //window.navigator.userAgent属性包含了浏览器类型、版本、操作系统类型、浏览器引擎类型等信息，通过这个属性来判断浏览器类型\n    var UA = inBrowser && window.navigator.userAgent.toLowerCase(); //获取浏览器\n    var isIE = UA && /msie|trident/.test(UA);  //ie\n    var isIE9 = UA && UA.indexOf('msie 9.0') > 0;  //ie9\n    var isEdge = UA && UA.indexOf('edge/') > 0; //ie10 以上\n    var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');  //安卓\n    var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');  //ios\n    var isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge; //谷歌浏览器\n\n    // Firefox has a \"watch\" function on Object.prototype...\n    var nativeWatch = ({}).watch;\n\n    //兼容火狐浏览器写法\n    var supportsPassive = false;\n    if (inBrowser) {\n        try {\n            var opts = {};\n            Object.defineProperty(opts, 'passive', ({\n                get: function get() {\n                    /* istanbul ignore next */\n                    supportsPassive = true;\n                }\n            })); // https://github.com/facebook/flow/issues/285\n            window.addEventListener('test-passive', null, opts);\n        } catch (e) {\n        }\n    }\n\n    // this needs to be lazy-evaled because vue may be required before\n    // vue-server-renderer can set VUE_ENV\n    //vue 服务器渲染 可以设置   VUE_ENV\n    var _isServer;\n    //判断是不是node 服务器环境\n    var isServerRendering = function () {\n        if (_isServer === undefined) {\n            /* istanbul ignore if */\n            //如果不是浏览器 并且global 对象存在，那么有可能是node 脚本\n            if (!inBrowser && typeof global !== 'undefined') {\n                //\n                // detect presence of vue-server-renderer and avoid\n                // Webpack shimming the process\n                //_isServer 设置是服务器渲染\n                _isServer = global['process'].env.VUE_ENV === 'server';\n            } else {\n                _isServer = false;\n            }\n        }\n        return _isServer\n    };\n\n    // detect devtools\n    //检测开发者工具。\n    var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n    /* istanbul ignore next */\n    function isNative(Ctor) {\n        //或者判断该函数是不是系统内置函数\n        //判断一个函数中是否含有 'native code' 字符串 比如\n        //   function code(){\n        //       var native='native code'\n        //   }\n        //   或者\n        //   function code(){\n        //       var native='native codeasdfsda'\n        //   }\n\n        return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n    }\n\n    //判断是否支持Symbol 数据类型\n    var hasSymbol =\n        //Symbol es6新出来的一种数据类型，类似于string类型，声明唯一的数据值\n        typeof Symbol !== 'undefined' && isNative(Symbol) &&\n        // Reflect.ownKeys\n        // Reflect.ownKeys方法用于返回对象的所有属性，基本等同于Object.getOwnPropertyNames与Object.getOwnPropertySymbols之和。\n        typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\n    var _Set;\n    /* istanbul ignore if */ // $flow-disable-line\n    //ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。\n    //     Set 本身是一个构造函数，用来生成 Set 数据结构。\n    //判断是否有set这个方法\n    if (typeof Set !== 'undefined' && isNative(Set)) {\n        // use native Set when available.\n        _Set = Set;\n    } else {\n        // a non-standard Set polyfill that only works with primitive keys.\n        //如果没有他自己写一个\n        _Set = (function () {\n            function Set() {\n                this.set = Object.create(null);\n            }\n\n            Set.prototype.has = function has(key) {\n                return this.set[key] === true\n            };\n            Set.prototype.add = function add(key) {\n                this.set[key] = true;\n            };\n            Set.prototype.clear = function clear() {\n                this.set = Object.create(null);\n            };\n\n            return Set;\n        }());\n    }\n\n    var warn = noop;\n    var tip = noop;\n\n    var generateComponentTrace = (noop); // work around flow check 绕流检查\n    var formatComponentName = (noop);\n\n    {\n        //判断是否有console 打印输出属性\n        var hasConsole = typeof console !== 'undefined';\n\n        var classifyRE = /(?:^|[-_])(\\w)/g;\n        //非捕获  匹配不分组 。 就是可以包含，但是不匹配上\n        //过滤掉class中的 -_ 符号 并且把字母开头的改成大写\n        var classify = function (str) {\n            return str.replace(classifyRE,\n                function (c) {\n                    return c.toUpperCase();\n                }).replace(/[-_]/g, '');\n        };\n\n\n        /***********************************************************************************************\n         *函数名 ：warn\n         *函数功能描述 ：    警告信息提示\n         *函数参数 ： msg： 警告信息， vm：vue对象\n         *函数返回值 ： void\n         *作者 ：\n         *函数创建日期 ：\n         *函数修改日期 ：\n         *修改人 ：\n         *修改原因 ：\n         *版本 ：\n         *历史版本 ：\n         ***********************************************************************************************/\n        warn = function (msg, vm) {\n            //vm 如果没有传进来就给空， 不然给执行generateComponentTrace 收集 vue错误码\n            var trace = vm ? generateComponentTrace(vm) : '';\n            //warnHandler 如果存在 则调用他\n            if (config.warnHandler) {\n                config.warnHandler.call(null, msg, vm, trace);\n            } else if (hasConsole && (!config.silent)) {\n                //如果config.warnHandler 不存在则 console 内置方法打印\n                console.error((\"[Vue warn]: \" + msg + trace));\n            }\n        };\n\n        //也是个警告输出方法\n        tip = function (msg, vm) {\n\n            if (hasConsole && (!config.silent)) {\n                //\n                console.warn(\"[Vue tip]: \" + msg + (\n                    vm ? generateComponentTrace(vm) : ''\n                ));\n            }\n        };\n\n        /***********************************************************************************************\n         *函数名 ：formatComponentName\n         *函数功能描述 ：   格式组件名\n         *函数参数 ： msg： 警告信息， vm：vue对象\n         *函数返回值 ： void\n         *作者 ：\n         *函数创建日期 ：\n         *函数修改日期 ：\n         *修改人 ：\n         *修改原因 ：\n         *版本 ：\n         *历史版本 ：\n         ***********************************************************************************************/\n\n\n        formatComponentName = function (vm, includeFile) {\n\n            if (vm.$root === vm) {\n                return '<Root>'\n            }\n            /*\n             * 如果 vm === 'function' && vm.cid != null 条件成立 则options等于vm.options\n             * 当vm === 'function' && vm.cid != null 条件不成立的时候 vm._isVue ? vm.$options || vm.constructor.options : vm || {};\n             *  vm._isVue为真的时候 vm.$options || vm.constructor.options ，vm._isVue为假的时候 vm || {}\n             * */\n            var options =\n                typeof vm === 'function' && vm.cid != null\n                    ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm || {};\n\n            var name = options.name || options._componentTag;\n            console.log('name=' + name);\n\n            var file = options.__file;\n\n            if (!name && file) {\n                //匹配.vue 后缀的文件名\n                //如果文件名中含有vue的文件将会被匹配出来 但是会多虑掉 \\符号\n                var match = file.match(/([^/\\\\]+)\\.vue$/);\n                name = match && match[1];\n            }\n\n            //可能返回 classify(name)\n            //name 组件名称或者是文件名称\n            /*\n             * classify 去掉-_连接  大些字母连接起来\n             * 如果name存在则返回name\n             * 如果name不存在那么返回‘<Anonymous>’+ 如果file存在并且includeFile！==false的时候 返回\" at \" + file 否则为空\n             *\n             * */\n            return (\n                (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n                (file && includeFile !== false ? (\" at \" + file) : '')\n            )\n        };\n\n        /*\n         *重复 递归 除2次 方法+ str\n         * */\n        var repeat = function (str, n) {\n            var res = '';\n            while (n) {\n                if (n % 2 === 1) {\n                    res += str;\n                }\n                if (n > 1) {\n                    str += str;\n                }\n                n >>= 1;\n                //16 8\n                //15 7 相当于除2 向下取整2的倍数\n                //console.log(  a >>= 1)\n            }\n            return res\n        };\n        /***********************************************************************************************\n         *函数名 ：generateComponentTrace\n         *函数功能描述 ： 生成组建跟踪 vm=vm.$parent递归收集到msg出处。\n         *函数参数 ： vm 组建\n         *函数返回值 ：\n         *作者 ：\n         *函数创建日期 ：\n         *函数修改日期 ：\n         *修改人 ：\n         *修改原因 ：\n         *版本 ：\n         *历史版本 ：\n         ***********************************************************************************************/\n        generateComponentTrace = function (vm) {\n            if (vm._isVue && vm.$parent) { //如果_isVue 等于真，并且有父亲节点的\n                var tree = [];   //记录父节点\n                var currentRecursiveSequence = 0;\n                while (vm) {  //循环 vm 节点\n                    if (tree.length > 0) {//tree如果已经有父节点的\n                        var last = tree[tree.length - 1];\n                        if (last.constructor === vm.constructor) { //上一个节点等于父节点 个人感觉这里用户不会成立\n                            currentRecursiveSequence++;\n                            vm = vm.$parent;\n                            continue\n                        } else if (currentRecursiveSequence > 0) { //这里也不会成立\n                            tree[tree.length - 1] = [last, currentRecursiveSequence];\n                            currentRecursiveSequence = 0;\n                        }\n                    }\n                    tree.push(vm);  //把vm添加到队列中\n                    vm = vm.$parent;\n                }\n                return '\\n\\nfound in\\n\\n' + tree\n                    .map(function (vm, i) {\n                        //如果i是0 则输出 ‘---->’\n                        //如果i 不是0的时候输出组件名称\n                        return (\"\" + (i === 0 ?\n                            '---> ' : repeat(' ', 5 + i * 2)) +\n                            (\n                                Array.isArray(vm) ?\n                                    ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n                                    : formatComponentName(vm)\n                            )\n                        );\n                    })\n                    .join('\\n')\n            } else {\n                //如果没有父组件则输出一个组件名称\n                return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n            }\n        };\n\n\n    }\n\n    /*  */\n\n    /*  */\n\n\n    var uid = 0;\n\n    /**\n     * A dep is an observable that can have multiple dep是可观察到的，可以有多个\n     * directives subscribing to it.订阅它的指令。\n     *\n     */\n    //主题对象Dep构造函数  主要用于添加发布事件后，用户更新数据的 响应式原理之一函数\n    var Dep = function Dep() {\n        //uid  初始化为0\n        this.id = uid++;\n        /* 用来存放Watcher对象的数组 */\n        this.subs = [];\n    };\n\n    Dep.prototype.addSub = function addSub(sub) {\n        /* 在subs中添加一个Watcher对象 */\n        this.subs.push(sub);\n    };\n\n    Dep.prototype.removeSub = function removeSub(sub) {\n        /*删除 在subs中添加一个Watcher对象 */\n        remove(this.subs, sub);\n    };\n    //this$1.deps[i].depend();\n    //为Watcher 添加 为Watcher.newDeps.push(dep); 一个dep对象\n    Dep.prototype.depend = function depend() {\n        //添加一个dep    target 是Watcher dep就是dep对象\n        if (Dep.target) {\n            //像指令添加依赖项\n            Dep.target.addDep(this);\n        }\n    };\n    /* 通知所有Watcher对象更新视图 */\n    Dep.prototype.notify = function notify() {\n        // stabilize the subscriber list first\n        var subs = this.subs.slice();\n        for (var i = 0, l = subs.length; i < l; i++) {\n            //更新数据\n            subs[i].update();\n        }\n    };\n\n    // the current target watcher being evaluated.\n    // this is globally unique because there could be only one\n    // watcher being evaluated at any time.\n    //当前正在评估的目标监视程序。\n    //这在全球是独一无二的，因为只有一个\n    //观察者在任何时候都被评估。\n    Dep.target = null;\n    var targetStack = [];\n\n    function pushTarget(_target) {\n        //target 是Watcher dep就是dep对象\n        if (Dep.target) { //静态标志 Dep当前是否有添加了target\n            //添加一个pushTarget\n            targetStack.push(Dep.target);\n        }\n        Dep.target = _target;\n    }\n\n    //\n    function popTarget() {\n        // 出盏一个pushTarget\n        Dep.target = targetStack.pop();\n    }\n\n    /*\n     * 创建标准的vue vnode\n     *\n     * */\n\n    var VNode = function VNode(\n        tag, /*当前节点的标签名*/\n        data, /*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/\n        children, //子节点\n        text, //文本\n        elm, /*当前节点的dom */\n        context, /*编译作用域*/\n        componentOptions, /*组件的option选项*/\n        asyncFactory/*异步工厂*/) {\n        /*当前节点的标签名*/\n        this.tag = tag;\n\n        /*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/\n        this.data = data;\n\n        /*当前节点的子节点，是一个数组*/\n        this.children = children;\n\n        /*当前节点的文本*/\n        this.text = text;\n\n        /*当前虚拟节点对应的真实dom节点*/\n        this.elm = elm;\n\n        /*当前节点的名字空间*/\n        this.ns = undefined;\n\n        /*编译作用域 vm*/\n        this.context = context;\n\n        this.fnContext = undefined;\n        this.fnOptions = undefined;\n        this.fnScopeId = undefined;\n\n        /*节点的key属性，被当作节点的标志，用以优化*/\n        this.key = data && data.key;\n\n        /*组件的option选项*/\n        this.componentOptions = componentOptions;\n\n        /*当前节点对应的组件的实例*/\n        this.componentInstance = undefined;\n\n        /*当前节点的父节点*/\n        this.parent = undefined;\n\n        /*简而言之就是是否为原生HTML或只是普通文本，innerHTML的时候为true，textContent的时候为false*/\n        this.raw = false;\n\n        /*静态节点标志*/\n        this.isStatic = false;\n\n        /*是否作为跟节点插入*/\n        this.isRootInsert = true;\n\n        /*是否为注释节点*/\n        this.isComment = false;\n\n        /*是否为克隆节点*/\n        this.isCloned = false;\n\n        /*是否有v-once指令*/\n        this.isOnce = false;\n\n        /*异步工厂*/\n        this.asyncFactory = asyncFactory;\n\n        this.asyncMeta = undefined;\n        this.isAsyncPlaceholder = false;\n    };\n    //当且仅当该属性描述符的类型可以被改变并且该属性可以从对应对象中删除。默认为 false\n    var prototypeAccessors = { child: { configurable: true } };\n\n    // DEPRECATED: alias for componentInstance for backwards compat.\n    /* istanbul ignore next */\n\n    prototypeAccessors.child.get = function () {\n        return this.componentInstance\n    };\n    /*设置所有VNode.prototype 属性方法  都为\n     {\n     'child':{\n     configurable: true,\n     get:function(){\n     return this.componentInstance\n     }\n     }\n     }\n     */\n    Object.defineProperties(VNode.prototype, prototypeAccessors);\n\n    //创建一个节点    空的vnode\n    var createEmptyVNode = function (text) {\n        if (text === void 0) text = '';\n\n        var node = new VNode();\n        node.text = text;\n        node.isComment = true;\n        return node\n    };\n\n    //创建一个文本节点\n    function createTextVNode(val) {\n\n        return new VNode(\n            undefined,\n            undefined,\n            undefined,\n            String(val)\n        )\n    }\n\n    // optimized shallow clone\n    // used for static nodes and slot nodes because they may be reused across\n    // multiple renders, cloning them avoids errors when DOM manipulations rely\n    // on their elm reference.\n    //优化浅克隆\n    //用于静态节点和时隙节点，因为它们可以被重用。\n    //多重渲染，克隆它们避免DOM操作依赖时的错误\n    //他们的榆树参考。\n\n    //克隆节点  把节点变成静态节点\n    function cloneVNode(vnode, deep) {\n        //\n        var componentOptions = vnode.componentOptions;\n        /*组件的option选项*/\n        var cloned = new VNode(\n            vnode.tag,\n            vnode.data,\n            vnode.children,\n            vnode.text,\n            vnode.elm,\n            vnode.context,\n            componentOptions,\n            vnode.asyncFactory\n        );\n        cloned.ns = vnode.ns;/*当前节点的名字空间*/\n        cloned.isStatic = vnode.isStatic;/*静态节点标志*/\n        cloned.key = vnode.key;/*节点的key属性，被当作节点的标志，用以优化*/\n        cloned.isComment = vnode.isComment;/*是否为注释节点*/\n        cloned.fnContext = vnode.fnContext; //函数上下文\n        cloned.fnOptions = vnode.fnOptions; //函数Options选项\n        cloned.fnScopeId = vnode.fnScopeId; //函数范围id\n        cloned.isCloned = true;\n        /*是否为克隆节点*/\n        if (deep) { //如果deep存在\n            if (vnode.children) { //如果有子节点\n                //深度拷贝子节点\n                cloned.children = cloneVNodes(vnode.children, true);\n            }\n            if (componentOptions && componentOptions.children) {\n                //深度拷贝子节点\n                componentOptions.children = cloneVNodes(componentOptions.children, true);\n            }\n        }\n        return cloned\n    }\n\n    //克隆多个节点 为数组的\n    function cloneVNodes(vnodes, deep) {\n        var len = vnodes.length;\n        var res = new Array(len);\n        for (var i = 0; i < len; i++) {\n            res[i] = cloneVNode(vnodes[i], deep);\n        }\n        return res\n    }\n\n\n    /*\n     * not type checking this file because flow doesn't play well with\n     * dynamically accessing methods on Array prototype\n     */\n\n    var arrayProto = Array.prototype;\n    var arrayMethods = Object.create(arrayProto);\n\n    var methodsToPatch = [\n        'push',\n        'pop',\n        'shift',\n        'unshift',\n        'splice',\n        'sort',\n        'reverse'\n    ];\n\n    /**\n     * Intercept mutating methods and emit events\n     */\n    /***********************************************************************************************\n     *函数名 ：methodsToPatch\n     *函数功能描述 ： 更新数据时候如果是数组拦截方法，如果在数据中更新用的是'push','pop','shift','unshift','splice','sort','reverse' 方法则会调用这里\n     *函数参数 ：\n     *函数返回值 ：\n     *作者 ：\n     *函数创建日期 ：\n     *函数修改日期 ：\n     *修改人 ：\n     *修改原因 ：\n     *版本 ：\n     *历史版本 ：\n     ***********************************************************************************************/\n\n\n    methodsToPatch.forEach(function (method) {\n        console.log('methodsToPatch')\n\n        // cache original method\n        var original = arrayProto[method];\n        console.log('==method==')\n        console.log(method)\n        console.log('==original==')\n        console.log(original)\n\n        def(arrayMethods, method, function mutator() {\n            console.log('==def_original==')\n            console.log(original)\n\n            var args = [], len = arguments.length;\n            while (len--) args[len] = arguments[len];\n\n            var result = original.apply(this, args);\n            var ob = this.__ob__;\n            console.log('this.__ob__')\n            console.log(this.__ob__)\n\n\n            var inserted;\n            switch (method) {\n                case 'push':\n                case 'unshift':\n                    inserted = args;\n                    break\n                case 'splice':\n                    inserted = args.slice(2);\n                    break\n            }\n            if (inserted) {\n                //观察数组数据\n                ob.observeArray(inserted);\n            }\n            // notify change\n            //更新通知\n            ob.dep.notify();\n            console.log('====result====')\n            console.log(result)\n            return result\n        });\n    });\n\n    /*  */\n    // 方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组,只包括实例化的属性和方法，不包括原型上的。\n    var arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n\n    /**\n     * In some cases we may want to disable observation inside a component's\n     * update computation.\n     *在某些情况下，我们可能希望禁用组件内部的观察。\n     *更新计算。\n     */\n    var shouldObserve = true; //标志是否禁止还是添加到观察者模式\n    function toggleObserving(value) {\n        shouldObserve = value;\n    }\n\n    /**\n     * Observer class that is attached to each observed\n     * object. Once attached, the observer converts the target\n     * object's property keys into getter/setters that\n     * collect dependencies and dispatch updates.\n     * *每个观察到的观察者类\n     *对象。一旦被连接，观察者就转换目标。\n     *对象的属性键为吸收器/设置器\n     *收集依赖关系并发送更新。\n     *\n     * 实例化 dep对象,获取dep对象  为 value添加__ob__ 属性\n     */\n    var Observer = function Observer(value) {\n\n\n        this.value = value;\n        this.dep = new Dep();\n        this.vmCount = 0;\n        //设置监听 value 必须是对象\n        def(value, '__ob__', this);\n        if (Array.isArray(value)) { //判断是不是数组\n            var augment = hasProto  //__proto__ 存在么 高级浏览器都会有这个\n                ? protoAugment\n                : copyAugment;\n            augment(value, arrayMethods, arrayKeys);\n            this.observeArray(value);\n        } else {\n            this.walk(value);\n        }\n    };\n\n    /**\n     * Walk through each property and convert them into\n     * getter/setters. This method should only be called when\n     * value type is Object.\n     * *遍历每个属性并将其转换为\n     * getter / setter。此方法只应在调用时调用\n     *值类型是Object。\n     */\n    Observer.prototype.walk = function walk(obj) {\n        var keys = Object.keys(obj);\n        for (var i = 0; i < keys.length; i++) {\n            defineReactive(obj, keys[i]);\n        }\n    };\n\n    /**\n     * Observe a list of Array items.\n     * 观察数组项的列表。\n     * 把数组拆分一个个 添加到观察者 上面去\n     */\n    Observer.prototype.observeArray = function observeArray(items) {\n        for (var i = 0, l = items.length; i < l; i++) {\n            console.log('items[i]')\n            console.log(items[i])\n\n            observe(items[i]);\n        }\n    };\n\n    // helpers\n\n    /**\n     * Augment an target Object or Array by intercepting\n     * the prototype chain using __proto__\n     * 通过拦截来增强目标对象或数组\n     * 使用原型原型链\n     * target 目标对象\n     * src 原型 对象或者属性、\n     * keys key\n     *\n     */\n    function protoAugment(target, src, keys) {\n        /* eslint-disable no-proto */\n        target.__proto__ = src;\n        /* eslint-enable no-proto */\n    }\n\n    /**\n     * Augment an target Object or Array by defining\n     * hidden properties.\n     * 复制扩充\n     * 定义添加属性 并且添加 监听\n     *target 目标对象\n     * src对象\n     * keys 数组keys\n     */\n    /* istanbul ignore next */\n    function copyAugment(target, src, keys) {\n        for (var i = 0, l = keys.length; i < l; i++) {\n            var key = keys[i];\n            def(target, key, src[key]);\n        }\n    }\n\n    /**\n     * Attempt to create an observer instance for a value,\n     * returns the new observer if successfully observed,\n     * or the existing observer if the value already has one.\n     *尝试为值创建一个观察者实例，\n     *如果成功观察，返回新的观察者；\n     *或现有的观察员，如果值已经有一个。\n     *\n     * 判断value 是否有__ob__    实例化 dep对象,获取dep对象  为 value添加__ob__ 属性  返回 new Observer 实例化的对象\n     */\n    function observe(value, asRootData) {\n\n        if (!isObject(value) || value instanceof VNode) {\n            //value 不是一个对象 或者 实例化 的VNode\n            console.log(value)\n\n            return\n        }\n        var ob;\n\n        if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n            console.log('hasOwn value')\n            console.log(value)\n\n\n            ob = value.__ob__;\n        } else if (\n            shouldObserve &&  //shouldObserve 为真\n            !isServerRendering() &&  //并且不是在服务器node环境下\n            (Array.isArray(value) || isPlainObject(value)) && //是数组或者是对象\n            Object.isExtensible(value) && //Object.preventExtensions(O) 方法用于锁住对象属性，使其不能够拓展，也就是不能增加新的属性，但是属性的值仍然可以更改，也可以把属性删除，Object.isExtensible用于判断对象是否可以被拓展\n            !value._isVue //_isVue为假\n        ) {\n            console.log('new Observer value')\n            console.log(value)\n            //实例化 dep对象 为 value添加__ob__ 属性\n            ob = new Observer(value);\n        }\n        console.log(value)\n        //如果是RootData，即咱们在新建Vue实例时，传到data里的值，只有RootData在每次observe的时候，会进行计数。 vmCount是用来记录此Vue实例被使用的次数的， 比如，我们有一个组件logo，页面头部和尾部都需要展示logo，都用了这个组件，那么这个时候vmCount就会计数，值为2\n\n        if (asRootData && ob) { //是根节点数据的话 并且 ob 存在\n            ob.vmCount++; //统计有几个vm\n        }\n        //    * 实例化 dep对象,获取dep对象  为 value添加__ob__ 属性\n        return ob\n    }\n\n    /**\n     * Define a reactive property on an Object.\n     * 在对象上定义一个无功属性。\n     * 更新数据\n     * 通过defineProperty的set方法去通知notify()订阅者subscribers有新的值修改\n     * 添加观察者 get set方法\n     */\n    function defineReactive(obj, //对象\n        key,//对象的key\n        val, //监听的数据 返回的数据\n        customSetter, //  日志函数\n        shallow //是否要添加__ob__ 属性\n    ) {\n        //实例化一个主题对象，对象中有空的观察者列表\n        var dep = new Dep();\n        //获取描述属性\n        var property = Object.getOwnPropertyDescriptor(obj, key);\n        var _property = Object.getOwnPropertyNames(obj); //获取实力对象属性或者方法，包括定义的描述属性\n        console.log(property);\n        console.log(_property);\n\n        if (property && property.configurable === false) {\n            return\n        }\n\n        // cater for pre-defined getter/setters\n\n        var getter = property && property.get;\n        console.log('arguments.length=' + arguments.length)\n\n        if (!getter && arguments.length === 2) {\n            val = obj[key];\n        }\n        var setter = property && property.set;\n        console.log(val)\n        //判断value 是否有__ob__    实例化 dep对象,获取dep对象  为 value添加__ob__ 属性递归把val添加到观察者中  返回 new Observer 实例化的对象\n        var childOb = !shallow && observe(val);\n        //定义描述\n        Object.defineProperty(obj, key, {\n            enumerable: true,\n            configurable: true,\n            get: function reactiveGetter() {\n\n                var value = getter ? getter.call(obj) : val;\n                if (Dep.target) {  //Dep.target 静态标志 标志了Dep添加了Watcher 实例化的对象\n                    //添加一个dep\n                    dep.depend();\n                    if (childOb) {  //如果子节点存在也添加一个dep\n                        childOb.dep.depend();\n                        if (Array.isArray(value)) {  //判断是否是数组 如果是数组\n                            dependArray(value);   //则数组也添加dep\n                        }\n                    }\n                }\n                return value\n            },\n            set: function reactiveSetter(newVal) {\n                var value = getter ? getter.call(obj) : val;\n                /* eslint-disable no-self-compare  新旧值比较 如果是一样则不执行了*/\n                if (newVal === value || (newVal !== newVal && value !== value)) {\n                    return\n                }\n                /* eslint-enable no-self-compare\n                 *   不是生产环境的情况下\n                 * */\n                if (\"development\" !== 'production' && customSetter) {\n                    customSetter();\n                }\n                if (setter) {\n                    //set 方法 设置新的值\n                    setter.call(obj, newVal);\n                } else {\n                    //新的值直接给他\n                    val = newVal;\n                }\n                console.log(newVal)\n\n                //observe 添加 观察者\n                childOb = !shallow && observe(newVal);\n                //更新数据\n                dep.notify();\n            }\n        });\n    }\n\n    /**\n     * Set a property on an object. Adds the new property and\n     * triggers change notification if the property doesn't\n     * already exist.\n     **在对象上设置属性。添加新属性和\n     *触发器更改通知，如果该属性不\n     *已经存在。\n     */\n    //如果是数组  并且key是数字 就更新数组\n    //如果是对象则重新赋值\n    //如果 (target).__ob__ 存在则表明该数据以前添加过观察者对象中  //通知订阅者ob.value更新数据 添加观察者  define  set get 方法\n    function set(target, key, val) {\n        if (\"development\" !== 'production' &&\n            //判断数据 是否是undefined或者null\n            (isUndef(target) || isPrimitive(target))   //判断数据类型是否是string，number，symbol，boolean\n        ) {\n            //必须是对象数组才可以 否则发出警告\n            warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n        }\n\n        //如果是数组  并且key是数字\n        if (Array.isArray(target) && isValidArrayIndex(key)) {\n            //设置数组的长度\n            target.length = Math.max(target.length, key);\n            //像数组尾部添加一个新数据，相当于push\n            target.splice(key, 1, val);\n            return val\n        }\n        //判断key是否在target 上，并且不是在Object.prototype 原型上，而不是通过父层原型链查找的\n        if (key in target && !(key in Object.prototype)) {\n            target[key] = val;  //赋值\n            return val\n        }\n        var ob = (target).__ob__;  //声明一个对象ob 值为该target对象中的原型上面的所有方法和属性 ，表明该数据加入过观察者中\n        //vmCount 记录vue被实例化的次数\n        //是不是vue\n        if (target._isVue || (ob && ob.vmCount)) {\n            //如果不是生产环境，发出警告\n            \"development\" !== 'production' && warn(\n                'Avoid adding reactive properties to a Vue instance or its root $data ' +\n                'at runtime - declare it upfront in the data option.'\n            );\n            return val\n        }\n        //如果ob不存在 说明他没有添加观察者 则直接赋值\n        if (!ob) {\n            target[key] = val;\n            return val\n        }\n        //通知订阅者ob.value更新数据 添加观察者  define  set get 方法\n        defineReactive(ob.value, key, val);\n        //通知订阅者ob.value更新数据\n        ob.dep.notify();\n        return val\n    }\n\n    /**\n     * Delete a property and trigger change if necessary.\n     * 删除属性并在必要时触发更改数据。\n     */\n    function del(target, key) {\n        //如果不是生产环境\n\n        if (\"development\" !== 'production' &&\n            (isUndef(target) || isPrimitive(target))\n        ) {\n            //无法删除未定义的、空的或原始值的无功属性：\n            warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n        }\n\n        //如果是数据则用splice方法删除\n        if (Array.isArray(target) && isValidArrayIndex(key)) {\n            target.splice(key, 1);\n            return\n        }\n\n\n        var ob = (target).__ob__;\n        //vmCount 记录vue被实例化的次数\n        //是不是vue\n        if (target._isVue || (ob && ob.vmCount)) {\n            //如果是开发环境就警告\n            \"development\" !== 'production' && warn(\n                'Avoid deleting properties on a Vue instance or its root $data ' +\n                '- just set it to null.'\n            );\n            return\n        }\n        //如果不是target 实例化不删除原型方法\n        if (!hasOwn(target, key)) {\n            return\n        }\n        //删除对象中的属性或者方法\n        delete target[key];\n        if (!ob) {\n            return\n        }\n        //更新数据\n        ob.dep.notify();\n    }\n\n    /**\n     * Collect dependencies on array elements when the array is touched, since\n     * we cannot intercept array element access like property getters.\n     * 在数组被触摸时收集数组元素的依赖关系，因为\n     * 我们不能拦截数组元素访问，如属性吸收器。\n     * 参数是数组\n     */\n    function dependArray(value) {\n        for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n            e = value[i];\n            //添加一个dep\n            e && e.__ob__ && e.__ob__.dep.depend();\n            //递归\n            if (Array.isArray(e)) {\n                dependArray(e);\n            }\n        }\n    }\n\n    /*  */\n\n    /**\n     * Option overwriting strategies are functions that handle\n     * how to merge a parent option value and a child option\n     * value into the final value.\n     * *选项重写策略是处理的函数\n\n     *如何合并父选项值和子选项\n\n     *值为最终值。\n     */\n    //选择策略\n    var strats = config.optionMergeStrategies;\n\n    /**\n     * Options with restrictions\n     * 选择与限制\n     */\n    {\n        strats.el = strats.propsData = function (parent, child, vm, key) {\n            if (!vm) {\n                warn(\n                    \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n                    'creation with the `new` keyword.'\n                );\n            }\n            //默认开始\n            return defaultStrat(parent, child)\n        };\n    }\n\n    /**\n     * Helper that recursively merges two data objects together.\n     * 递归合并数据 深度拷贝\n     */\n    function mergeData(to, from) {\n        if (!from) {\n            return to\n        }\n        var key, toVal, fromVal;\n        var keys = Object.keys(from); //获取对象的keys 变成数组\n        for (var i = 0; i < keys.length; i++) {\n            key = keys[i]; //获取对象的key\n            toVal = to[key]; //\n            fromVal = from[key]; //获取对象的值\n            if (!hasOwn(to, key)) { //如果from对象的key在to对象中没有\n                set(to, key, fromVal);\n            } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n                //深层递归\n                mergeData(toVal, fromVal);\n            }\n        }\n        return to\n    }\n\n    /**\n     * Data\n     * mergeDataOrFn递归合并数据 深度拷贝。如果vm不存在，并且childVal不存在就返回parentVal。如果vm不存在并且parentVal不存在则返回childVal。如果vm不存在parentVal和childVal都存在则返回mergedDataFn。如果vm存在则返回 mergedInstanceDataFn函数\n     */\n    function mergeDataOrFn(\n        parentVal,\n        childVal,\n        vm\n    ) {\n        //vm不存在的时候\n        if (!vm) {\n            // in a Vue.extend merge, both should be functions Vue。扩展合并，两者都应该是函数\n            if (!childVal) {\n                return parentVal\n            }\n            if (!parentVal) {\n                return childVal\n            }\n            // when parentVal & childVal are both present,\n            // we need to return a function that returns the\n            // merged result of both functions... no need to\n            // check if parentVal is a function here because\n            // it has to be a function to pass previous merges.\n            //当父母和孩子都在场时，\n            //我们需要返回一个函数，该函数返回\n            //两个函数的合并结果…不需要\n            //检查parentVal是否是一个函数，因为\n            //它必须是一个函数来传递以前的合并。\n            return function mergedDataFn() {\n                //如果childVal，parentVal是函数 先改变this\n                return mergeData(\n                    typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n                    typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n                )\n            }\n        } else {\n            //如果vm 存在 则是合并vm的数据\n            return function mergedInstanceDataFn() {\n                // instance merge\n                var instanceData = typeof childVal === 'function'\n                    ? childVal.call(vm, vm)\n                    : childVal;\n\n                var defaultData = typeof parentVal === 'function'\n                    ? parentVal.call(vm, vm)\n                    : parentVal;\n\n                if (instanceData) {\n                    return mergeData(instanceData, defaultData)\n                } else {\n                    return defaultData\n                }\n            }\n        }\n    }\n\n    strats.data = function (\n        parentVal,\n        childVal,\n        vm\n    ) {\n        if (!vm) {\n            if (childVal && typeof childVal !== 'function') {\n                \"development\" !== 'production' && warn(\n                    'The \"data\" option should be a function ' +\n                    'that returns a per-instance value in component ' +\n                    'definitions.',\n                    vm\n                );\n\n                return parentVal\n            }\n            return mergeDataOrFn(parentVal, childVal)\n        }\n\n        return mergeDataOrFn(parentVal, childVal, vm)\n    };\n\n    /**\n     * Hooks and props are merged as arrays.\n     * 钩子和道具被合并成数组。\n     * 判断childVal存在么？如果不存在 则返回parentVal\n     * 如果childVal存在 则判断parentVal存在么。如果parentVal存在则返回 parentVal.concat(childVal)，如果不存在，则判断childVal是不是数组如果是数组直接返回去，\n     * 如果不是数组把childVal变成数组在返回出去\n     */\n    function mergeHook(\n        parentVal,\n        childVal\n    ) {\n        return childVal ? (parentVal ?\n            parentVal.concat(childVal) :\n            (Array.isArray(childVal) ?\n                childVal :\n                [childVal]\n            )\n        ) : parentVal\n    }\n\n    LIFECYCLE_HOOKS.forEach(function (hook) {\n        strats[hook] = mergeHook;\n    });\n\n    /**\n     * Assets\n     *\n     * When a vm is present (instance creation), we need to do\n     * a three-way merge between constructor options, instance\n     * options and parent options.\n     *\n     ＊资产\n     *当存在虚拟机（实例创建）时，我们需要做\n     *构造函数选项之间的三路合并，实例\n     *选项和父选项。\n     * 创建一个res对象，获取parentVal对象中的数据。如果parentVal存在则获取parentVal对象 的数据存在res中的  __props__ 中，如果没有则创建一个空的对象。\n     * 如果childVal 存在，则用浅拷贝吧 childVal 合并到res中，返回res对象\n     */\n    function mergeAssets(\n        parentVal,\n        childVal,\n        vm,\n        key\n    ) {\n        var res = Object.create(parentVal || null);\n        if (childVal) {\n            \"development\" !== 'production' && assertObjectType(key, childVal, vm);\n            return extend(res, childVal)\n        } else {\n            return res\n        }\n    }\n\n    //为每一个组件指令添加一个\n    ASSET_TYPES.forEach(function (type) {\n        strats[type + 's'] = mergeAssets;\n    });\n\n    /**\n     * Watchers.\n     *\n     * Watchers hashes should not overwrite one\n     * another, so we merge them as arrays.\n     * *观察者散列不应该覆盖一个\n     *另一个，所以我们将它们合并为数组。\n     *\n     * 循环childVal。获取到子节点childVal的key如果在父亲节点上面有，则先获取到父亲节点的值，如果父亲节点的上没有值得获取子节点的值。 变成数组存在ret对象中。\n     */\n    strats.watch = function (\n        parentVal,   //父节点值\n        childVal,  //子节点值\n        vm,   //vm  vue实例化的对象\n        key) {  // key值\n        // work around Firefox's Object.prototype.watch... 在Firefox的对象周围工作。原型\n        //// Firefox has a \"watch\" function on Object.prototype...\n        //var nativeWatch = ({}).watch;\n        if (parentVal === nativeWatch) {\n            parentVal = undefined;\n        }\n        if (childVal === nativeWatch) {\n            childVal = undefined;\n        }\n        /* istanbul ignore if */\n        if (!childVal) {  //如果子节点不存在 则创建一个 对象\n            return Object.create(parentVal || null)\n        }\n        {\n            //检测childVal是不是对象\n            assertObjectType(key, childVal, vm);\n        }\n        if (!parentVal) {  //如果父节点不存在 则返回子节点\n            return childVal\n        }\n        var ret = {};\n        extend(ret, parentVal); //合并对象 一个新的对象\n        for (var key$1 in childVal) { //循环子节点\n            var parent = ret[key$1]; // 把子节点的kye放到父节点中\n            var child = childVal[key$1]; //获取子节点的值\n            if (parent && !Array.isArray(parent)) {  //如果子节点的key放到父节点中能获取到子节点 ，并且子节点不是一个数组\n                parent = [parent];  //\n            }\n            ret[key$1] = parent ? parent.concat(child)\n                : Array.isArray(child) ?\n                    child :\n                    [child];\n        }\n        return ret\n    };\n\n    /**\n     * Other object hashes.\n     */\n    strats.props =\n        strats.methods =\n        strats.inject =\n        strats.computed = function (\n            parentVal,\n            childVal,\n            vm,\n            key\n        ) {\n            if (childVal && \"development\" !== 'production') {\n                //判断是否是对象\n                assertObjectType(key, childVal, vm);\n            }\n            if (!parentVal) {\n                return childVal\n            }\n            var ret = Object.create(null);\n            //对象浅拷贝，参数（to, _from）循环_from的值，会覆盖掉to的值\n            extend(ret, parentVal);\n            if (childVal) {\n                //对象浅拷贝，参数（to, _from）循环_from的值，会覆盖掉to的值\n                extend(ret, childVal);\n            }\n            return ret\n        };\n    strats.provide = mergeDataOrFn;\n\n    /**\n     * Default strategy.\n     * 如果没有子节点就返回父节点，如果有子节点就返回子节点\n     */\n    var defaultStrat = function (parentVal, childVal) {\n        return childVal === undefined ? parentVal : childVal\n    };\n\n    /**\n     * Validate component names\n     *验证组件名称\n     */\n    function checkComponents(options) {\n        for (var key in options.components) {\n            // 验证组件名称 必须是大小写，并且是-横杆\n            validateComponentName(key);\n        }\n    }\n\n    //验证组件名称 必须是大小写，并且是-横杆\n    function validateComponentName(name) {\n        if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n            warn(\n                'Invalid component name: \"' + name + '\". Component names ' +\n                'can only contain alphanumeric characters and the hyphen, ' +\n                'and must start with a letter.'\n            );\n        }\n        if (isBuiltInTag(name) || config.isReservedTag(name)) {\n            warn(\n                'Do not use built-in or reserved HTML elements as component ' +\n                'id: ' + name\n            );\n        }\n    }\n\n    /**\n     * Ensure all props option syntax are normalized into the\n     * 确保所有props选项语法都规范化为\n     * Object-based format.\n     * 基于对象格式\n     *\n     * 检查 props 数据类型\n     * normalizeProps 检查 props 数据类型，并把type标志打上。如果是数组循环props属性数组，如果val是string则把它变成驼峰写法  res[name] = {type: null}; 。如果是对象也循环props把key变成驼峰，并且判断val是不是对象如果是对象则    res[name] 是{type: val}否则    res[name] 是val。\n     *\n     */\n    function normalizeProps(options, vm) {\n        //参数中有没有props\n        var props = options.props;\n        if (!props) {\n            return\n        }\n        var res = {};\n        var i, val, name;\n\n        //如果props 是一个数组\n        if (Array.isArray(props)) {\n            i = props.length;\n            while (i--) {\n                val = props[i];\n                if (typeof val === 'string') {\n                    //把含有横岗的字符串 变成驼峰写法\n                    name = camelize(val);\n\n                    res[name] = { type: null };\n                } else {\n                    //当使用数组语法时，道具必须是字符串。 如果是props 是数组必须是字符串\n                    warn('props must be strings when using array syntax.');\n                }\n            }\n        } else if (isPlainObject(props)) { //如果是对象\n            for (var key in props) {  //for in 提取值\n                val = props[key];\n                name = camelize(key);   //把含有横岗的字符串 变成驼峰写法\n                res[name] = isPlainObject(val)  //判断值是不是对象\n                    ? val\n                    : { type: val };\n            }\n        } else {\n            //如果不是对象和数组则警告\n            warn(\n                \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n                \"but got \" + (toRawType(props)) + \".\",\n                vm\n            );\n        }\n        options.props = res;\n    }\n\n    /**\n     * Normalize all injections into Object-based format\n     * 将所有注入规范化为基于对象的格式\n     *\n     *\n     * 将数组转化成对象 比如 [1,2,3]转化成\n     * normalized[1]={from: 1}\n     * normalized[2]={from: 2}\n     * normalized[3]={from: 3}\n     *\n     *\n     * *\n     */\n    function normalizeInject(options, vm) {\n        //  provide 和 inject 主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。\n        // 这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。如果你熟悉 React，这与 React 的上下文特性很相似。\n\n        var inject = options.inject;\n        if (!inject) {\n            return\n        }\n        var normalized = options.inject = {};\n        if (Array.isArray(inject)) { //如果是数组\n            for (var i = 0; i < inject.length; i++) {\n                // * 将数组转化成对象 比如 [1,2,3]转化成\n                // * normalized[1]={from: 1}\n                // * normalized[2]={from: 2}\n                // * normalized[3]={from: 3}\n                normalized[inject[i]] = { from: inject[i] };\n            }\n        } else if (isPlainObject(inject)) { //如果是对象\n            for (var key in inject) {\n                var val = inject[key];\n                normalized[key] = isPlainObject(val) ? extend({ from: key }, val) : { from: val };\n            }\n        } else {\n            warn(\n                \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n                \"but got \" + (toRawType(inject)) + \".\",\n                vm\n            );\n        }\n    }\n\n    /**\n     * Normalize raw function directives into object format.\n     *\n     * 将原始函数指令归一化为对象格式。\n     *\n     *\n     * normalizeDirectives获取到指令对象值。循环对象指令的值，如果是函数则把它变成dirs[key] = {bind: def, update: def} 这种形式\n     */\n    function normalizeDirectives(options) {\n        //获取参数中的指令\n        var dirs = options.directives;\n        console.log(options)\n\n        if (dirs) { //如果指令存在\n            for (var key in dirs) {  //循环该指令\n                var def = dirs[key];  //获取到指令的值\n                console.log(def)\n\n                if (typeof def === 'function') { //如果是函数\n                    //为该函数添加一个对象和值\n                    dirs[key] = { bind: def, update: def };\n                }\n            }\n        }\n    }\n\n    //判断是否是对象\n    function assertObjectType(name, value, vm) {\n        if (!isPlainObject(value)) {\n            warn(\n                \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n                \"but got \" + (toRawType(value)) + \".\",\n                vm\n            );\n        }\n    }\n\n    /**\n     * Merge two option objects into a new one.\n     * Core utility used in both instantiation and inheritance.\n     * 将两个对象合成一个对象 将父值对象和子值对象合并在一起，并且优先取值子值，如果没有则取子值\n     *\n     * 用于实例化和继承的核心实用程序。\n     */\n    function mergeOptions(parent, //父值\n        child, //子值 优选取子值\n        vm) {\n\n        {\n            //检验子组件\n            checkComponents(child);\n        }\n\n        if (typeof child === 'function') {\n            //如果child 是函数则获取他的参数\n            child = child.options;\n        }\n        //检查 props 数据类型\n        normalizeProps(child, vm);\n\n        // 将数组转化成对象 比如 [1,2,3]转化成\n        normalizeInject(child, vm);\n\n        // * normalizeDirectives获取到指令对象值。循环对象指令的值，如果是函数则把它变成dirs[key] = {bind: def, update: def} 这种形式\n        normalizeDirectives(child);\n\n        //子组件是否有需要合并的对象继承 方式\n        var extendsFrom = child.extends;\n\n        if (extendsFrom) {\n            //如果有则递归\n            parent = mergeOptions(parent, extendsFrom, vm);\n        }\n\n        //如果 子组件有mixins 数组 则也递归合并，继承 方式 mixins 必须是数组\n        if (child.mixins) {\n            for (var i = 0, l = child.mixins.length; i < l; i++) {\n                parent = mergeOptions(parent, child.mixins[i], vm);\n            }\n        }\n        var options = {};\n        var key;\n        for (key in parent) {  //循环合并后的key\n            mergeField(key);\n        }\n        for (key in child) {  //循环子组件的\n            if (!hasOwn(parent, key)) {\n                mergeField(key);\n            }\n        }\n\n        //获取到key 去读取strats类的方法\n        // strats类 有方法 el，propsData，data，provide，watch，props，methods，inject，computed，components，directives，filters 。\n        // strats类里面的方法都是  合并数据 如果没有子节点childVal，\n        // 就返回父节点parentVal，如果有子节点childVal就返回子节点childVal。\n        function mergeField(key) {\n            //defaultStrat 获取子值还是父组的值\n            var strat = strats[key] ||  //\n                defaultStrat;  //* 如果没有子节点就返回父节点，如果有子节点就返回子节点\n            //获取子值还是父组的值\n            options[key] = strat(parent[key], child[key], vm, key);\n        }\n\n        //返回参数\n        return options\n    }\n\n    /**\n     * Resolve an asset.\n     * This function is used because child instances need access\n     * to assets defined in its ancestor chain.\n     *  检测指令是否在 组件对象上面 ,返回注册指令或者组建的对象, 包括检查directives ， filters ，components\n     *\n     */\n    function resolveAsset(options, //参数\n        type, // 类型：directives ， filters ，components\n        id,   // 指令的key 属性\n        warnMissing //警告的信息 true\n    ) {\n        console.log('==resolveAsset==')\n        console.log(options)\n        console.log(type)\n        console.log(id)\n        console.log(warnMissing)\n\n\n\n        /* istanbul ignore if  如果id不是字符串 */\n        if (typeof id !== 'string') {\n            return\n        }\n        var assets = options[type]; //\n        console.log('==assets==')\n        console.log(assets)\n\n        // check local registration variations first\n        //首先检查本地注册的变化 检查id是否是assets 实例化的属性或者方法\n        if (hasOwn(assets, id)) {\n            return assets[id]\n        }\n        //   可以让这样的的属性 v-model 变成 vModel  变成驼峰\n        var camelizedId = camelize(id);\n\n        console.log('==camelizedId==')\n        console.log(camelizedId)\n\n        // 检查camelizedId是否是assets 实例化的属性或者方法\n        if (hasOwn(assets, camelizedId)) {\n            return assets[camelizedId]\n        }\n        console.log('==assets==')\n        console.log(assets)\n\n        //    将首字母变成大写 变成 VModel\n        var PascalCaseId = capitalize(camelizedId);\n        console.log('==PascalCaseId==')\n        console.log(PascalCaseId)\n        // 检查PascalCaseId是否是assets 实例化的属性或者方法\n        if (hasOwn(assets, PascalCaseId)) {\n            return assets[PascalCaseId]\n        }\n        console.log('==assets==')\n        console.log(assets)\n\n        console.log('==id-camelizedId-PascalCaseId==')\n        console.log(assets)\n        console.log(assets[id])\n        console.log(assets[camelizedId])\n        console.log(assets[PascalCaseId])\n\n        // fallback to prototype chain  回到原型链\n        var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n\n        //如果检查不到id 实例化则如果是开发环境则警告\n        if (\"development\" !== 'production' && warnMissing && !res) {\n            warn(\n                'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n                options\n            );\n        }\n        console.log('==res==')\n        console.log(res)\n        //返回注册指令或者组建的对象\n        return res\n    }\n\n    /*\n     *验证支柱  验证 prosp 是否是规范数据 并且为props 添加 value.__ob__  属性，把prosp添加到观察者中\n     *  校验 props 参数 就是组建 定义的props 类型数据，校验类型\n     *\n     * 判断prop.type的类型是不是Boolean或者String，如果不是他们两类型，调用getPropDefaultValue获取默认值并且把value添加到观察者模式中\n     *\n     *\n     */\n    function validateProp(\n        key,  //key\n        propOptions,  //原始props 参数\n        propsData, //转义过的组件props数据\n        vm //    VueComponent 组件构造函数\n    ) {  //vm this属性\n\n\n        var prop = propOptions[key]; //获取组件定义的props 属性\n        var absent = !hasOwn(propsData, key);  // 如果该为假的那么可能  a-b 这样的key才能获取到值\n        var value = propsData[key]; // 获取值\n        // boolean casting\n        //Boolean 传一个布尔值  但是 一般是函数或者数组函数才有意义，而且是函数声明的函数并不是 函数表达式prop.type 也需要是函数\n        //返回的是相同的索引  判断 属性类型定义的是否是Boolean\n        var booleanIndex = getTypeIndex(Boolean, prop.type);\n        if (booleanIndex > -1) {  //如果是boolean值\n\n            if (absent && !hasOwn(prop, 'default')) { //如果key 不是propsData 实例化，或者 没有定义default 默认值的时候   设置value 为false\n                value = false;\n            } else if (\n                value === ''  //如果value 是空\n                || value === hyphenate(key) //或者key转出 - 形式和value 相等的时候\n            ) { //\n                // only cast empty string / same name to boolean if 仅将空字符串/相同名称转换为boolean if\n                // boolean has higher priority  获取到相同的\n                //判断prop.type 的类型是否是string字符串类型\n                var stringIndex = getTypeIndex(String, prop.type);\n\n                if (\n                    stringIndex < 0 || //如果匹配不到字符串\n                    booleanIndex < stringIndex) { //或者布尔值索引小于字符串 索引的时候\n                    value = true;\n                }\n            }\n        }\n        // check default value 检查默认值\n        if (value === undefined) {  //如果没有值 value 也不是boolean， 也不是string的时候\n            //  有可能是 函数\n            value = getPropDefaultValue(vm, prop, key);\n            // since the default value is a fresh copy, 由于默认值是一个新的副本，\n            // make sure to observe it. 一定要遵守。\n            var prevShouldObserve = shouldObserve;\n            toggleObserving(true);\n            console.log('===value===')\n            console.log(value);\n            //为 value添加 value.__ob__  属性，把value添加到观察者中\n            observe(value);\n            toggleObserving(prevShouldObserve);\n        }\n        {\n            console.log(prop,\n                key,\n                value,\n                vm,\n                absent)\n\n            //检查prop 是否合格\n            assertProp(\n                prop, //属性的type值\n                key, //props属性中的key\n                value, //view 属性的值\n                vm, // VueComponent 组件构造函数\n                absent //false\n            );\n        }\n        return value\n    }\n\n    /**\n     * Get the default value of a prop.\n     *获取prop 属性默认的vue值\n     */\n    function getPropDefaultValue(vm, prop, key) {\n        // no default, return undefined\n        //判断该对象prop 中的default 是否是prop 实例化的\n        if (!hasOwn(prop, 'default')) {\n            return undefined\n        }\n        var def = prop.default;\n        // warn against non-factory defaults for Object & Array\n        //警告对象和数组的非工厂默认值\n        if (\"development\" !== 'production' && isObject(def)) {\n            warn(\n                'Invalid default value for prop \"' + key + '\": ' +\n                'Props with type Object/Array must use a factory function ' +\n                'to return the default value.',\n                vm\n            );\n        }\n        // the raw prop value was also undefined from previous render,\n        //原始PROP值也未从先前的渲染中定义，\n        // return previous default value to avoid unnecessary watcher trigger\n        //返回先前的默认值以避免不必要的监视触发器\n        if (vm && vm.$options.propsData &&\n            vm.$options.propsData[key] === undefined &&\n            vm._props[key] !== undefined\n        ) {\n            return vm._props[key]\n        }\n        // call factory function for non-Function types\n        //非功能类型调用工厂函数\n        // a value is Function if its prototype is function even across different execution context\n        //一个值是函数，即使它的原型在不同的执行上下文中也是函数。\n        //getType检查函数是否是函数声明  如果是函数表达式或者匿名函数是匹配不上的\n        //判断def 是不是函数 如果是则执行，如果不是则返回props的PropDefaultValue\n        return typeof def === 'function' && getType(prop.type) !== 'Function'\n            ? def.call(vm)\n            : def\n    }\n\n    /**\n     * Assert whether a prop is valid.\n     * 断言一个属性是否有效。\n     *\n     *\n     *\n     *  prop, //属性的type值\n     key, //props属性中的key\n     value, //view 属性的值\n     vm, //组件构造函数\n     absent //false\n     */\n\n\n\n    function assertProp(\n        prop,  //属性的type值\n        name, //props属性中的key\n        value, //view 属性的值\n        vm, //组件构造函数\n        absent//false\n    ) {\n        //必须有required 和 absent\n        if (prop.required && absent) {\n            warn(\n                'Missing required prop: \"' + name + '\"',\n                vm\n            );\n            return\n        }\n        //如果vual 为空 或者 不是必填项 则不执行下面代码\n        if (value == null && !prop.required) {\n            return\n        }\n        //类型\n        var type = prop.type;\n\n        //如果类型为真 或者类型 不存在\n        var valid = !type || type === true;\n\n        var expectedTypes = [];\n\n        if (type) { //如果type存在\n            if (!Array.isArray(type)) {  //如果不是数组\n                type = [type];  //再包裹成数组\n            }\n            for (var i = 0; i < type.length && !valid; i++) {\n                var assertedType = assertType(value, type[i]);\n                expectedTypes.push(assertedType.expectedType || '');\n                valid = assertedType.valid;\n            }\n        }\n        if (!valid) {\n            warn(\n                \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n                \" Expected \" + (expectedTypes.map(capitalize).join(', ')) +\n                \", got \" + (toRawType(value)) + \".\",\n                vm\n            );\n            return\n        }\n        var validator = prop.validator;\n        if (validator) {\n            if (!validator(value)) {\n                warn(\n                    'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n                    vm\n                );\n            }\n        }\n    }\n\n    //检测数据类型 是否是String|Number|Boolean|Function|Symbol 其中的一个数据类型\n    var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\n    //获取type类型\n    function assertType(value, type) {\n        var valid;\n        //getType检查函数是否是函数声明  如果是函数表达式或者匿名函数是匹配不上的\n        //type 必须是String|Number|Boolean|Function|Symbol 构造函数\n        var expectedType = getType(type);\n\n        //检测改函数是什么类型\n        if (simpleCheckRE.test(expectedType)) { //type 必须是String|Number|Boolean|Function|Symbol 构造函数 这里才为真 (String|Number|Boolean|Function|Symbol)\n            var t = typeof value;\n            //转换成小写\n            valid = t === expectedType.toLowerCase(); //布尔值\n            // for primitive wrapper objects 对于原始包装对象\n            if (!valid && t === 'object') {\n                valid = value instanceof type;\n            }\n        } else if (expectedType === 'Object') {\n            //检测是否是真正的对象\n            valid = isPlainObject(value);\n        } else if (expectedType === 'Array') {\n            //检测是否是真正的数组\n            valid = Array.isArray(value);\n        } else {\n            //判断 value 是否是type中的实例化对象\n            valid = value instanceof type;\n        }\n        //返回出去值\n        return {\n            valid: valid,\n            expectedType: expectedType\n        }\n    }\n\n    /**\n     * Use function string name to check built-in types,\n     * because a simple equality check will fail when running\n     * across different vms / iframes.\n     * 检查函数是否是函数声明  如果是函数表达式或者匿名函数是匹配不上的\n     *\n     *\n     */\n    function getType(fn) {\n        var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n        return match ? match[1] : ''\n    }\n\n    //判断两个函数声明是否是相等\n    function isSameType(a, b) {\n        return getType(a) === getType(b)\n    }\n\n\n    //判断expectedTypes 中的函数和 type 函数是否有相等的如有有则返回索引index 如果没有则返回-1\n\n    function getTypeIndex(type, expectedTypes) {\n        //如果不是数组直接比较 如果真则返回0\n        if (!Array.isArray(expectedTypes)) {\n            return isSameType(expectedTypes, type) ? 0 : -1\n        }\n        for (var i = 0, len = expectedTypes.length; i < len; i++) {\n            //如果是数组则寻找索引\n            if (isSameType(expectedTypes[i], type)) {\n                return i\n            }\n        }\n        return -1\n    }\n\n    /*\n\n     向外暴露了一个 handleError 方法，在需要捕获异常的\b地方调用。\n     handleError 方法中首先获取到报错的组件，之后递归查找当前组件的父组件，\n     依次调用\b errorCaptured 方法。在遍历调用完所有 errorCaptured 方法、或 errorCaptured 方法有报错时，\n\n     会调用 globalHandleError 方法。\n\n     globalHandleError 方法调用了全局的 errorHandler 方法。\n\n     如果 errorHandler 方法自己又报错了呢？生产环境下会使用 console.error 在控制台中输出。\n\n     可以看到 errorCaptured 和 errorHandler 的触发时机都是相同的，不同的是 errorCaptured 发生在前，\n     且如果某个组件的 errorCaptured 方法返回了 false，那么这个异常信息不会再向上冒泡也不会再调用\n     errorHandler 方法。\n\n     */\n\n    function handleError(err, vm, info) {\n        if (vm) {\n            var cur = vm;\n            //循环父组件\n            while ((cur = cur.$parent)) {\n                //如果hooks 存在 则循环 所有的hooks\n                var hooks = cur.$options.errorCaptured;\n                if (hooks) {\n                    for (var i = 0; i < hooks.length; i++) {\n                        try {\n                            //调用hooks 中函数，如果发生错误则调用globalHandleError\n                            var capture = hooks[i].call(cur, err, vm, info) === false;\n                            if (capture) {\n                                return\n                            }\n                        } catch (e) {\n                            //调用全局日志输出\n                            globalHandleError(e, cur, 'errorCaptured hook');\n                        }\n                    }\n                }\n            }\n        }\n        //调用全局日志输出\n        globalHandleError(err, vm, info);\n    }\n\n    function globalHandleError(err, vm, info) {\n\n        //如果errorHandler 存在 则调用 errorHandler函数\n        if (config.errorHandler) {\n\n            try {\n                return config.errorHandler.call(null, err, vm, info)\n            } catch (e) {\n                //错误日志信息输出\n                logError(e, null, 'config.errorHandler');\n            }\n        }\n        logError(err, vm, info);\n    }\n\n    //错误日志信息输出\n    function logError(err, vm, info) {\n        {\n            warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n        }\n        /* istanbul ignore else 如果是浏览器或者是 微信端，输出console */\n        if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n            console.error(err);\n        } else {\n            //如果是服务器端 则抛出错误\n            throw err\n        }\n    }\n\n    /*  */\n    /* globals MessageChannel 全局消息通道 */\n\n    //回调函数队列\n    var callbacks = [];\n    var pending = false;\n    // 触发 callbacks 队列中的函数\n    function flushCallbacks() {\n\n        pending = false;\n        //.slice(0) 浅拷贝\n        var copies = callbacks.slice(0);\n        callbacks.length = 0;\n        console.log(copies)\n\n        for (var i = 0; i < copies.length; i++) {\n            //执行回调函数\n            copies[i]();\n        }\n    }\n\n    // Here we have async deferring wrappers using both microtasks and (macro) tasks. 在这里，我们使用了微任务和宏任务的异步包装器。\n    // In < 2.4 we used microtasks everywhere, but there are some scenarios where 在< 2.4中，我们到处使用微任务，但也有一些场景。\n    // microtasks have too high a priority and fire in between supposedly  微任务优先级太高，据称介于两者之间。\n    // sequential events (e.g. #4521, #6690) or even between bubbling of the same 序贯事件（例如α4521，α6690），甚至在同一气泡之间\n    // event (#6566). However, using (macro) tasks everywhere also has subtle problems 事件（α6566）。然而，到处使用（宏）任务也有微妙的问题。\n    // when state is changed right before repaint (e.g. #6813, out-in transitions). 当状态在重新绘制之前被正确改变（例如，α6813，在过渡中出现）。\n    // Here we use microtask by default, but expose a way to force (macro) task when  这里，我们默认使用微任务，但是暴露一种方法来强制（宏）任务\n    // needed (e.g. in event handlers attached by v-on). 需要的（例如在事件处理程序中附加的V-on）。\n\n\n    var microTimerFunc; //微计时器功能\n    var macroTimerFunc; //宏计时器功能\n    var useMacroTask = false; //使用宏任务\n\n    // Determine (macro) task defer implementation. 确定（宏）任务延迟实现。\n    // Technically setImmediate should be the ideal choice, but it's only available 技术上应该是理想的选择，但它是唯一可用的。\n    // in IE. The only polyfill that consistently queues the callback after all DOM 在IE.中，唯一的填充在所有DOM之后始终排队回叫。\n    // events triggered in the same loop is by using MessageChannel. 在同一循环中触发的事件是通过使用消息通道。\n    /* istanbul ignore if */\n    //判断setImmediate 是否存在，如果存在则判断下是是否是系统内置函数\n    if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n        //函数表达式赋值给macroTimerFunc\n        macroTimerFunc = function () {\n\n            setImmediate(flushCallbacks);\n        };\n    } else if (typeof MessageChannel !== 'undefined' && (\n        isNative(MessageChannel) ||\n        // PhantomJS\n        MessageChannel.toString() === '[object MessageChannelConstructor]'\n    )) {\n        //如果有 消息体 内置函数则实例化\n        var channel = new MessageChannel();\n        //获取端口2\n        var port = channel.port2;\n\n        //设置端口1 的接受函数为flushCallbacks\n        channel.port1.onmessage = flushCallbacks;\n\n        //端口2推送信息给端口1\n        macroTimerFunc = function () {\n\n            port.postMessage(1);\n        };\n    } else {\n        /* istanbul ignore next */\n        // 异步执行\n        macroTimerFunc = function () {\n\n            setTimeout(flushCallbacks, 0);\n        };\n    }\n\n    // Determine microtask defer implementation.\n    //确定微任务延迟执行。\n    /* istanbul ignore next, $flow-disable-line */\n    if (typeof Promise !== 'undefined' && isNative(Promise)) {\n        // 声明一个成功的 Promise\n        var p = Promise.resolve();\n        //microTimerFunc 一个异步 队列函数\n        microTimerFunc = function () {\n            p.then(flushCallbacks);\n            // in problematic UIWebViews, Promise.then doesn't completely break, but 在有问题的UIWebVIEW中，Promise.then并没有完全崩溃，而是\n            // it can get stuck in a weird state where callbacks are pushed into the 它可能会陷入一种怪异的状态，其中回调被推到\n            // microtask queue but the queue isn't being flushed, until the browser 微任务队列，但队列没有刷新，直到浏览器\n            // needs to do some other work, e.g. handle a timer. Therefore we can 需要做一些其他的工作，例如处理计时器。因此我们可以\n            // \"force\" the microtask queue to be flushed by adding an empty timer. [强制]通过添加空计时器来刷新微任务队列。\n            //如果是ios 执行下 noop 空函数\n            if (isIOS) {\n                setTimeout(noop);\n            }\n        };\n    } else {\n        // fallback to macro\n        //回归宏\n\n        microTimerFunc = macroTimerFunc;\n    }\n\n    /**\n     * Wrap a function so that if any code inside triggers state change, 包装一个函数，如果内部的任何代码触发状态改变，\n     * the changes are queued using a (macro) task instead of a microtask. 使用宏（宏）任务而不是微任务对这些队列进行排队\n     */\n    function withMacroTask(fn) {\n        //宏任务\n        return fn._withTask || (fn._withTask = function () {\n            useMacroTask = true;\n            var res = fn.apply(null, arguments);\n            useMacroTask = false;\n            return res\n        })\n    }\n\n    //为callbacks 收集队列cb 函数 并且根据 pending 状态是否要触发callbacks 队列函数\n    function nextTick(cb, ctx) {\n        //cb 回调函数\n        //ctx this的指向\n        var _resolve;\n        //添加一个回调函数到队列里面去\n\n        callbacks.push(function () {\n            if (cb) {\n                //如果cb存在 并且是一个函数就执行\n                try {\n                    cb.call(ctx);\n                } catch (e) {\n                    //如果不是函数则报错\n                    handleError(e, ctx, 'nextTick');\n                }\n            } else if (_resolve) {\n                //_resolve 如果存在则执行\n                _resolve(ctx);\n            }\n        });\n        console.log('==callbacks==')\n        console.log(callbacks)\n        console.log(pending)\n\n        if (!pending) {\n\n            pending = true;\n            //执行异步宏任务\n            if (useMacroTask) {\n\n                macroTimerFunc(); //异步触发 或者 实现观察者 触发  callbacks 队列中的函数\n            } else {\n                microTimerFunc(); //异步触发 或者 实现观察者 触发  callbacks 队列中的函数\n            }\n        }\n\n\n        // $flow-disable-line\n        if (!cb && typeof Promise !== 'undefined') {\n            //如果回调函数不存在 则声明一个Promise 函数\n            return new Promise(function (resolve) {\n                _resolve = resolve;\n            })\n        }\n    }\n\n    /*  */\n\n    var mark;\n    var measure;\n\n    {\n        //浏览器性能监控\n        var perf = inBrowser && window.performance;\n        /* istanbul ignore if */\n        if (\n            perf &&\n            perf.mark &&\n            perf.measure &&\n            perf.clearMarks &&\n            perf.clearMeasures\n        ) {\n            mark = function (tag) {\n                return perf.mark(tag);\n            };\n            measure = function (name, startTag, endTag) {\n                perf.measure(name, startTag, endTag);\n                perf.clearMarks(startTag);\n                perf.clearMarks(endTag);\n                perf.clearMeasures(name);\n            };\n        }\n    }\n\n    /*\n     not type checking this file because flow doesn't play well with Proxy\n     不检查此文件，因为流不能很好地使用代理\n     * */\n\n    var initProxy;\n\n    {\n        //map 对象中的[name1,name2,name3,name4]  变成这样的map{name1:true,name2:true,name3:true,name4:true}\n        /*全局api 匹配'Infinity,undefined,NaN,isFinite,isNaN,' +\n        'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n        'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n        'require'\n        */\n        var allowedGlobals = makeMap(\n            'Infinity,undefined,NaN,isFinite,isNaN,' +\n            'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n            'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n            'require' // for Webpack/Browserify\n        );\n\n        //不存在的key 发出警告\n        var warnNonPresent = function (target, key) {\n            warn(\n                \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n                'referenced during render. Make sure that this property is reactive, ' +\n                'either in the data option, or for class-based components, by ' +\n                'initializing the property. ' +\n                'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n                target\n            );\n        };\n\n        //判断 系统内置 函数有没有 es6的Proxy 代理对象api\n        var hasProxy =\n            typeof Proxy !== 'undefined' && isNative(Proxy);\n\n        if (hasProxy) {\n            //这些修改键就是 Shift、Ctrl、Alt和 Meta（在 Windows键盘中是 Windows键，在苹果机中 是 Cmd 键）它们经常被用来修改鼠标事件的行为。\n            var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n            //声明代理拦截对象\n            config.keyCodes = new Proxy(config.keyCodes, {\n                set: function set(target, key, value) {\n                    if (isBuiltInModifier(key)) { //匹配键盘上的快捷键 'stop,prevent,self,ctrl,shift,alt,meta,exact'\n                        //避免在配置键代码中重写内置修改器： 在一些快捷键中不需要加vue事件修饰器\n                        warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n                        return false\n                    } else {\n                        //记录不是快捷键的键盘码\n                        target[key] = value;\n                        return true\n                    }\n                }\n            });\n        }\n\n        var hasHandler = {\n            has: function has(target, key) {\n                var has = key in target;\n                //是否含有全局api 就是window 的内置函数\n                //全局api\n                // var allowedGlobals = makeMap(\n                //     'Infinity,undefined,NaN,isFinite,isNaN,' +\n                //     'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n                //     'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n                //     'require' // for Webpack/Browserify\n                // );\n\n                var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n                //如果  key 在target对象中 不存在 或者 isAllowed 不是全局api 并且 第一个字符不是_的时候 发出警告\n                if (!has && !isAllowed) {\n                    //不存在key发出警告\n                    warnNonPresent(target, key);\n                }\n                //返回true\n                return has || !isAllowed\n            }\n        };\n\n        var getHandler = {\n            get: function get(target, key) {\n                //key必须是等于string 并且 key在target中含有属性或者方法\n                if (typeof key === 'string' && !(key in target)) {\n                    //如果没有则发出警告\n                    warnNonPresent(target, key);\n                }\n                //返回target值\n                return target[key]\n            }\n        };\n\n        //初始化 代理 监听\n        initProxy = function initProxy(vm) {\n            if (hasProxy) {\n                // determine which proxy handler to use 确定使用哪个代理处理程序\n                var options = vm.$options; //获取vm中的参数\n                //render 渲染 如果是渲染 并且含有_withStripped\n                var handlers = options.render && options.render._withStripped\n                    ? getHandler  //获取值\n                    : hasHandler;  //判断内部函数，这样vue中模板就可以使用内置函数\n                //实例化 代理对象，只是这里添加了 警告的日志而已\n                vm._renderProxy = new Proxy(vm, handlers);\n            } else {\n                //如果不能代理直接赋值\n                vm._renderProxy = vm;\n            }\n        };\n    }\n\n    /*\n     * 实例化set对象\n     * */\n\n    var seenObjects = new _Set();\n\n    /**\n     * Recursively traverse an object to evoke all converted 递归遍历对象以唤起所有转换\n     * getters, so that every nested property inside the object 吸收器，以便对象内的每个嵌套属性\n     * is collected as a \"deep\" dependency. 被收集为一个“深度”依赖。\n     *   为 seenObjects 深度收集val 中的key\n     */\n    function traverse(val) {\n        // 搜索seen 为seen添加depId\n        //seenObjects set对象\n        //  为 seenObjects 深度收集val 中的key\n\n        _traverse(val, seenObjects);\n        //清除对象 给对象置空\n        seenObjects.clear();\n    }\n\n    //搜集依赖\n    /*\n     * 搜索seen 为seen添加depId\n     *  为 seenObjects 深度收集val 中的key\n     *\n     * */\n    //看到这里\n    function _traverse(val, seen) {\n        console.log(val)\n        console.log(seen.add)\n\n        var i, keys;\n        //判断是否是数组\n        var isA = Array.isArray(val);\n        //isFrozen 方法判断一个对象是否被冻结。 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n        //val 是否是被VNode 实例化\n        if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n            return\n        }\n        console.log(val.__ob__)\n\n        //如果val 有__ob__ 属性\n        if (val.__ob__) {\n            var depId = val.__ob__.dep.id;\n            // seen 中是否含有depId 属性或者方法\n            if (seen.has(depId)) {\n                return\n            }\n            console.log(seen.add)\n\n            // seen 是 seenObjects = new _Set(); add 就是set对象中的add方法，添加为一的值得key\n            //如果没有则添加进去\n            seen.add(depId);\n        }\n        //如果是数组\n        if (isA) {\n            i = val.length;\n            //则循环检查 回调递归\n            while (i--) {\n                _traverse(val[i], seen);\n            }\n        } else {\n\n            keys = Object.keys(val);\n            i = keys.length;\n            //如果是对象也循环递归检查\n            while (i--) {\n                _traverse(val[keys[i]], seen);\n            }\n        }\n    }\n\n    /*\n     *\n     * // normalizeEvent函数主要用于将传入的带有特殊前缀的事件修饰符分解为具有特定值的事件对象\n     * cachedFn\n     *\n     function cached(fn) {\n     var cache = Object.create(null);\n     return (function cachedFn(str) {\n     var hit = cache[str];\n     return hit || (cache[str] = fn(str))\n     })\n     }\n     *   normalizeEvent 得到的是一个函数  如果传入的 name 中 在cache 对象中有值 则返回这个值\n     *   如果该对象没有值则 调用该函数 并且用返回值 记录 当前执行函数返回值记录起来\n     * */\n    //该函数是过滤 vue 事件中的修饰符\n    var normalizeEvent = cached(function (name) {\n        //判断第一个字符是否是'&\n        var passive = name.charAt(0) === '&';\n        //slice()，返回一个新的字符串，该方法可从已有的数组中,或者字符串中返回选定的元素。\n        name = passive ? name.slice(1) : name;\n\n        //判断第一个字符串是否是~\n        var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n\n        //slice()，返回一个新的字符串，该方法可从已有的数组中,或者字符串中返回选定的元素。\n        name = once$$1 ? name.slice(1) : name;\n        //判断第一个位是否是 ！\n        var capture = name.charAt(0) === '!';\n        //slice()，返回一个新的字符串，该方法可从已有的数组中,或者字符串中返回选定的元素。\n        name = capture ? name.slice(1) : name;\n        return {\n            name: name,\n            once: once$$1,\n            capture: capture,\n            passive: passive\n        }\n    });\n\n    //createFnInvoker 创建一个调用程序 创建一个钩子函数\n    //createFnInvoker，如果事件只是个函数就为为事件添加多一个静态类， invoker.fns = fns; 把真正的事件放在fns。而 invoker 则是转义fns然后再运行fns\n    function createFnInvoker(fns) {\n        function invoker() {\n            //获取传进来的参数，是一个数组\n            var arguments$1 = arguments;\n\n            //静态方法传进来的函数 赋值给fns\n            var fns = invoker.fns;\n\n            //判断fns 是否是一个数组\n            if (Array.isArray(fns)) {\n                //如果是数组 浅拷贝\n                var cloned = fns.slice();\n                //执行fns 数组中的函数 并且把 invoker  arguments$1参数一个个传给fns 函数中\n                for (var i = 0; i < cloned.length; i++) {\n\n                    cloned[i].apply(null, arguments$1);\n                }\n            } else {\n                // return handler return value for single handlers\n                //如果fns 不是数组函数，而是一个函数 则执行arguments$1参数一个个传给fns 函数中\n                return fns.apply(null, arguments)\n            }\n        }\n\n        invoker.fns = fns;\n        return invoker  //静态类\n    }\n\n\n    //更新事件 并且为新的值 添加函数 旧的值删除函数等功能\n    function updateListeners(\n        on,  //新的事件\n        oldOn, //旧的事件\n        add,  //添加事件函数\n        remove$$1, //删除事件函数\n        vm//vue 实例化对象\n    ) {\n        var name, def, cur, old, event;\n\n        for (name in on) {  // 遍历on\n            def = cur = on[name];  //on 新的事件值\n            old = oldOn[name];  //oldOn 对象中的 与 name 匹配 并且赋值 old 估计这个是旧的值\n            event = normalizeEvent(name);   //normalizeEvent 如果是事件，则过滤 事件修饰符\n\n            /* istanbul ignore if */\n            // isUndef 判断值存在 并且是空的  return v === undefined || v === null\n            if (isUndef(cur)) {\n                //如果不是生产环境\n                \"development\" !== 'production' && warn(\n                    \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n                    vm\n                );\n            } else if (isUndef(old)) {  //判断旧的值是否存在 为空的时候  没有定义旧的事件\n\n                if (isUndef(cur.fns)) { //如果函数不存在 则绑定函数\n                    //函数 获取钩子函数\n                    // 创建函数调用器并重新复制给cur和on[name]\n                    cur = on[name] = createFnInvoker(cur); //这个时候cur.fns就存在了\n                }\n\n\n\n                name = '&' + name; // mark the event as passive 将事件标记为被动的\n                //添加事件\n                add(\n                    event.name, //事件名称\n                    cur, // 转义过的事件 执行静态类\n                    event.once, //是否只触发一次的状态\n                    event.capture, //  事件俘获或是冒泡行为\n                    event.passive, // 检测事件修饰符 是否是   '&'\n                    event.params //事件参数\n                );\n\n            } else if (cur !== old) {\n                //如果新的值不等于旧的值\n                //则更新新旧值\n                old.fns = cur;\n                on[name] = old;\n            }\n        }\n        for (name in oldOn) {\n            //循环旧的值 为空的时候\n            if (isUndef(on[name])) {\n                //获取事件\n                event = normalizeEvent(name);\n                //删除旧的值的事件\n                remove$$1(event.name, oldOn[name], event.capture);\n            }\n        }\n    }\n\n    /*\n     *\n     *  合并vue vnode 钩子函数，\n      *  def[hookKey] = invoker; //把钩子函数用对象存起来\n     * */\n\n    function mergeVNodeHook(def, hookKey, hook) {\n        //判断def  是否 是vnode 实例化的对象\n        if (def instanceof VNode) {\n            // 重新赋值def 把def.data.hook  赋值给def\n            def = def.data.hook || (def.data.hook = {});\n        }\n\n        var invoker;\n        //获取旧的oldHook 钩子\n        var oldHook = def[hookKey];\n\n        function wrappedHook() {\n            //执行钩子函数\n            hook.apply(this, arguments);\n            // important: remove merged hook to ensure it's called only once\n            // and prevent memory leak\n            //重要：删除合并钩子以确保只调用一次\n            //和防止内存泄漏\n            remove(invoker.fns, wrappedHook);\n        }\n\n        if (isUndef(oldHook)) { //如果旧的钩子函数没有 为空的时候\n            // no existing hook 无现有钩 则创建一个钩子函数\n            invoker = createFnInvoker([wrappedHook]);\n        } else {\n            /* istanbul ignore if  如果有老的钩子函数，并且fns钩子函数存在 并且已经合并过*/\n            if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n                // already a merged invoker 已合并的调用程序\n                invoker = oldHook; //直接老的钩子函数直接覆盖新的钩子函数\n                //为钩子函数的fns 添加一个函数\n                invoker.fns.push(wrappedHook);\n            } else {\n                // existing plain hook\n                invoker = createFnInvoker([oldHook, wrappedHook]);\n            }\n        }\n\n        invoker.merged = true;\n        //把钩子函数用对象存起来\n        def[hookKey] = invoker;\n    }\n\n    /*\n     extractPropsFromVNodeData 从 props属性中获取vnode数据\n     extractPropsFromVNodeData循环propOptions对象，把驼峰的key转换成横杠的key。校验props属性的key是否和attrs属性值相同，如果相同删除掉attrs属性的同样key的值。获取props属性的值添加搞res对象中，返回出去\n     *\n     * */\n    function extractPropsFromVNodeData(\n        data, //tag标签属性数据\n        Ctor, //组件构造函数VueComponent\n        tag //tag标签名称\n    ) {\n        // we are only extracting raw values here.\n        // validation and default values are handled in the child\n        // component itself.\n        //我们只是在这里提取原始值。\n        //验证和默认值在孩子中被处理\n        //组件本身。\n\n        //获取Ctor 参数中的 props\n        var propOptions = Ctor.options.props; //获取组件的props属性\n        console.log(Ctor.options)\n\n        //如果propOptions 属性是空或者不存在 这不执行下面代码\n        if (isUndef(propOptions)) {\n            return\n        }\n\n\n        var res = {};\n        var attrs = data.attrs;\n        var props = data.props;\n\n        //如果data中的属性attrs或者props 属性 数据存在\n        if (isDef(attrs) || isDef(props)) {\n            //遍历propOptions  props属性中的值\n            for (var key in propOptions) {\n\n                //altKey获取到一个函数，该函数功能是把 abCd 驼峰字母改写成 ab-c 如果是 aB cd 则是 ab cd\n                //大写字母，加完减号又转成小写了 比如把驼峰 aBc 变成了 a-bc\n                //匹配大写字母并且两面不是空白的 替换成 '-' + '字母' 在全部转换成小写\n\n                var altKey = hyphenate(key);\n\n\n                {\n                    //把key 转换成小写\n                    var keyInLowerCase = key.toLowerCase();\n                    //如果他们key不相同 并且 属性attrs存在 并且keyInLowerCase 属性存在 attrs对象中\n                    if (\n                        key !== keyInLowerCase &&\n                        attrs && hasOwn(attrs, keyInLowerCase)\n                    ) {\n                        //输出一个警告信息\n                        tip(\n                            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n                            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n                            \" \\\"\" + key + \"\\\". \" +\n                            \"Note that HTML attributes are case-insensitive and camelCased \" +\n                            \"props need to use their kebab-case equivalents when using in-DOM \" +\n                            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n                        );\n                    }\n                }\n                //检查属性\n                checkProp(\n                    res,  //空对象\n                    props, //props 属性\n                    key, //propOptions 的原始key\n                    altKey, //转换后的 横杆key\n                    true\n                ) ||\n                    checkProp(\n                        res,\n                        attrs,\n                        key,\n                        altKey,\n                        false\n                    );\n            }\n        }\n        return res\n    }\n\n\n    //检查  属性  检查key和altKey 在hash属性对象中有没有，如果有则赋值给res对象\n    function checkProp(\n        res,   //需要添加值的对象\n        hash,   // 属性对象\n        key,    // 原始key\n        altKey,  //转换后的 横杆key\n        preserve  //是否要删除hash 对象中的属性或者方法   状态 布尔值\n    ) {\n        //hash 值存在\n        if (isDef(hash)) {\n            //如果是hash对象中含有key 属性或者方法\n            if (hasOwn(hash, key)) {\n                //添加res值\n                res[key] = hash[key];\n                //preserve 不存在的时候则在hash对象中删除该key 属性或者方法\n                if (!preserve) {\n                    delete hash[key];\n                }\n                return true\n            } else if (hasOwn(hash, altKey)) {      //如果是hash对象中含有altKey 属性或者方法\n                //添加res值\n                res[key] = hash[altKey];\n                //preserve 不存在的时候则在hash对象中删除该key 属性或者方法\n                if (!preserve) {\n                    delete hash[altKey];\n                }\n                return true\n            }\n        }\n        return false\n    }\n\n    /*  */\n\n    // The template compiler attempts to minimize the need for normalization by 模板编译器试图最小化对规范化的需要。\n    // statically analyzing the template at compile time. 在编译时静态分析模板。\n    //\n    // For plain HTML markup, normalization can be completely skipped because the 对于普通HTML标记，可以完全跳过标准化，因为\n    // generated render function is guaranteed to return Array<VNode>. There are 生成的渲染函数保证返回数组<VNoCT>。有\n    // two cases where extra normalization is needed: 需要额外标准化的两种情况：\n\n    // 1. When the children contains components - because a functional component 当儿童包含组件时，因为函数组件\n    // may return an Array instead of a single root. In this case, just a simple 可以返回数组而不是单个根。在这种情况下，只是一个简单的例子\n    // normalization is needed - if any child is an Array, we flatten the whole 规范化是必要的-如果任何一个孩子是一个数组，我们扁平化整个\n    // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep 和Array.prototype.concat在一起。保证仅为1级深\n    // because functional components already normalize their own children. 因为功能组件已经规范了他们自己的孩子。\n\n    //循环子节点children，把他连在一起，其实就是把伪数组变成真正的数组\n    function simpleNormalizeChildren(children) {\n        for (var i = 0; i < children.length; i++) {\n            if (Array.isArray(children[i])) {\n                return Array.prototype.concat.apply([], children)\n            }\n        }\n        return children\n    }\n\n    // 2. When the children contains constructs that always generated nested Arrays, 2。当子类包含总是生成嵌套数组的结构时，\n    // e.g. <template>, <slot>, v-for, or when the children is provided by user 例如，模板缝隙＞＜＞、＜V时，或当孩子由用户提供\n    // with hand-written render functions / JSX. In such cases a full normalization       具有手写渲染功能/JSX。在这种情况下，完全归一化。\n    // is needed to cater to all possible types of children values.   需要满足所有可能的儿童价值类型。\n    //判断children的数据类型 而创建不同的虚拟dom vonde\n    function normalizeChildren(children) {\n        return isPrimitive(children) ?  //判断数据类型是否是string，number，symbol，boolean\n            [createTextVNode(children)]  // 创建一个文本节点\n            : Array.isArray(children) ?  //判断是否是数组\n                normalizeArrayChildren(children) //创建一个规范的子节点数组。\n                : undefined\n    }\n\n    //判断是否是文本节点\n    function isTextNode(node) {\n        return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n    }\n\n\n    //规范的子节点\n    //  normalizeArrayChildren接收 2 个参数，\n    //  children 表示要规范的子节点，nestedIndex 表示嵌套的索引，\n\n    //  主要的逻辑就是遍历 children，获得单个节点 c，然后对 c 的类型判断，\n    //  如果是一个数组类型，则递归调用 normalizeArrayChildren;\n    //  如果是基础类型，则通过 createTextVNode 方法转换成 VNode 类型；\n    //  否则就已经是 VNode 类型了，如果 children \n    //  是一个列表并且列表还存在嵌套的情况，则根据 nestedIndex \n    //  去更新它的 key。这里需要注意一点，在遍历的过程中，\n    //  对这 3 种情况都做了如下处理：如果存在两个连续的 text 节点，\n    //  会把它们合并成一个 text 节点。\n    //  因为单个 child 可能是一个数组类型。把这个深层的数组遍历到一层数组上面去。如果是深层数组则调用递.归 normalizeArrayChildren\n\n\n    function normalizeArrayChildren(\n        children,\n        nestedIndex\n    ) {\n        var res = [];\n        var i, c, lastIndex, last;\n\n        for (i = 0; i < children.length; i++) {  //循环数组子节点children\n            c = children[i];\n            //判断是否是空 并且 c是一个布尔值的时候\n            if (isUndef(c) || typeof c === 'boolean') {\n                continue\n            }\n            // 获取  res 数组的长度\n            lastIndex = res.length - 1;\n            //获取res 最后一个数据\n            last = res[lastIndex];\n            //  nested\n            if (Array.isArray(c)) { //如果c 子节点还是一个数组\n                if (c.length > 0) { //并且 长度 不为0\n                    //数组则用递归   nestedIndex 有可能是 0_0  0_0_0 0_0_1 0_0_2  0_1  0_1_0 0_1_1 0_1_2\n                    //如果含有子节点，则递归，把所有子节点变成文本节点\n                    c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n                    // merge adjacent text nodes 合并相邻文本节点\n                    //如果c[0] 中的第一个是文本节点 并且 res 最后一个节点是 文本节点\n                    if (isTextNode(c[0]) && isTextNode(last)) {\n                        //创建一个文本节点 并且是合并他们的文本内容\n                        res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n                        //从c 出栈第一个数据\n                        c.shift();\n                    }\n                    //res 添加 数据 相当于 concat 链接数组\n                    res.push.apply(res, c);\n                }\n            } else if (isPrimitive(c)) {  //判断数据类型是否是string，number，symbol，boolean\n                //如果res最后数据一个是文本节点\n                if (isTextNode(last)) {\n                    // merge adjacent text nodes 合并相邻文本节点\n                    // this is necessary for SSR hydration because text nodes are 这对于SSR水化是必要的，因为文本节点是\n                    // essentially merged when rendered to HTML strings 当呈现到HTML字符串时本质上合并\n                    // 创建文本节点\n                    res[lastIndex] = createTextVNode(last.text + c);\n                } else if (c !== '') { //c不等于空\n                    // convert primitive to vnode\n                    //转换成 vnode  创建 文本节点\n                    res.push(createTextVNode(c));\n                }\n            } else {\n                //如果c  中的第一个是文本节点 并且 res 最后一个节点是 文本节点\n                if (isTextNode(c) && isTextNode(last)) {\n                    // merge adjacent text nodes 合并相邻文本节点\n                    //创建文本节点\n                    res[lastIndex] = createTextVNode(last.text + c.text);\n                } else {\n                    // default key for nested array children (likely generated by v-for)\n                    //嵌套数组子的默认键 可能v-for产生的\n\n                    if (\n                        isTrue(children._isVList) && //如果children._isVList 为true\n                        isDef(c.tag) &&   //c.tag 不为空\n                        isUndef(c.key) && //c.key 为空的时候\n                        isDef(nestedIndex)) { //nestedIndex不为空\n                        //赋值key的值为__vlist+1+\"_\" + 1 + \"__\";\n                        c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n                    }\n                    //把VNode 添加到res 中\n                    res.push(c);\n                }\n            }\n        }\n        console.log(res)\n\n        //返回 res 值\n        return res\n    }\n\n    /*\n     判断是否是对象 如果是则合并起来\n     */\n    function ensureCtor(comp, base) {\n        //https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag\n        if (\n\n            //__webpack_require__.n会判断module是否为es模块，当__esModule为true的时候，标识module为es模块，那么module.a默认返回module.default，否则返回module。\n            //https://segmentfault.com/a/1190000010955254\n            comp.__esModule ||  //如果 comp.__esModule 存在\n            (hasSymbol && comp[Symbol.toStringTag] === 'Module') //或者 支持hasSymbol 类型 并且判断 对象类的标签属性是Module \"[object Module]\"\n        ) {\n            //将 comp 默认属性给 comp\n            comp = comp.default;\n        }\n        //如果comp 是对象 则合并 base，否则返回comp\n        return isObject(comp)\n            ? base.extend(comp)\n            : comp\n    }\n\n    //createAsyncPlaceholder 创建简单的占位符 创建一个节点\n    //解决异步组件\n    function createAsyncPlaceholder(factory, //工厂\n        data,  //数据\n        context, //语境\n        children, //子节点\n        tag) {  //标签\n        //创建一个空节点\n        var node = createEmptyVNode();\n        node.asyncFactory = factory;\n        /*异步工厂*/\n        node.asyncMeta = {\n            data: data,\n            context: context,\n            children: children,\n            tag: tag\n        };\n        return node\n    }\n\n    // 解析异步组件 更新数据\n    function resolveAsyncComponent(\n        factory,  //函数工厂\n        baseCtor, //构造函数或者vue\n        context //vue实例化 对象\n    ) {\n        console.log(factory);\n        console.log(baseCtor);\n        console.log(context);\n\n        //如果  有错误     则返回错误信息\n        if (isTrue(factory.error) && isDef(factory.errorComp)) {\n            return factory.errorComp\n        }\n        //成功状态\n        if (isDef(factory.resolved)) {\n            return factory.resolved\n        }\n        //等待状态\n        if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n            return factory.loadingComp\n        }\n        //环境\n        if (isDef(factory.contexts)) {\n            // already pending 已经等待\n            factory.contexts.push(context);\n        } else {\n            var contexts = factory.contexts = [context]; //转化成数组\n            var sync = true;\n            //渲染\n            var forceRender = function () {\n                for (var i = 0, l = contexts.length; i < l; i++) {\n                    //更新数据 观察者数据\n                    contexts[i].$forceUpdate();\n                }\n            };\n            //成功 状态渲染\n            var resolve = once(function (res) { //确保只是渲染一次\n                // cache resolved\n                factory.resolved = ensureCtor(res, baseCtor);\n                // invoke callbacks only if this is not a synchronous resolve\n                // (async resolves are shimmed as synchronous during SSR)\n                //只有在这不是同步解析时才调用回调\n                //(异步解析在SSR期间以同步的方式进行调整)\n                if (!sync) {\n                    //渲染组件更新数据\n                    forceRender();\n                }\n            });\n            //失败状态\n            var reject = once(function (reason) {\n                \"development\" !== 'production' && warn(\n                    \"Failed to resolve async component: \" + (String(factory)) +\n                    (reason ? (\"\\nReason: \" + reason) : '')\n                );\n                if (isDef(factory.errorComp)) {\n                    factory.error = true;\n                    //渲染组件更新数据\n                    forceRender();\n                }\n            });\n\n            var res = factory(resolve, reject);\n\n            if (isObject(res)) {  //如果是对象 表明支持promise\n                //如果 then 是函数\n                if (typeof res.then === 'function') {\n                    // () => Promise 执行 promise\n                    if (isUndef(factory.resolved)) {//没有定义 resolved 成功\n                        res.then(resolve, reject); //执行 then\n                    }\n                } else if (isDef(res.component) && typeof res.component.then === 'function') { //如果组件有定义并且有值，而且组件是异步的then是函数\n                    res.component.then(resolve, reject);  //执行组件的异步\n\n                    if (isDef(res.error)) {  //如果有错误则 把错误合并\n                        factory.errorComp = ensureCtor(res.error, baseCtor);\n                    }\n\n                    if (isDef(res.loading)) {  //如果组件在加载\n                        //则合并组件加载时候baseCtor合并\n                        factory.loadingComp = ensureCtor(res.loading, baseCtor);\n                        if (res.delay === 0) {\n                            //delay 在加载等待\n                            factory.loading = true;\n                        } else {\n                            setTimeout(function () {\n                                //如果没有resolved成功 并且没有错误\n                                if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                                    factory.loading = true;\n                                    //渲染组件更新数据\n                                    forceRender();\n                                }\n                            }, res.delay || 200);\n                        }\n                    }\n\n                    if (isDef(res.timeout)) { //如果有定义一般渲染时间\n                        setTimeout(function () {\n                            if (isUndef(factory.resolved)) {  //没有执行成功\n                                reject( // 则执行失败\n                                    \"timeout (\" + (res.timeout) + \"ms)\"\n                                );\n                            }\n                        }, res.timeout);\n                    }\n                }\n            }\n\n            sync = false;\n            // return in case resolved synchronously 在同步解析的情况下返回\n            return factory.loading\n                ? factory.loadingComp\n                : factory.resolved\n        }\n    }\n\n    /*\n     *  判断是否是异步的\n     * */\n    function isAsyncPlaceholder(node) {\n        return node.isComment && node.asyncFactory\n    }\n\n    /*\n     *  获取第一个子组件并且子组件有options参数，并且是异步组件的\n     *\n     * */\n\n    function getFirstComponentChild(children) {\n        if (Array.isArray(children)) { //如果组件是个数组\n            for (var i = 0; i < children.length; i++) { //循环子组件\n                var c = children[i];\n                //如果子组件存在，并且子组件有options参数，不是空组件的，并且是异步组件的\n                if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n                    return c\n                }\n            }\n        }\n    }\n\n\n    /*\n     * 初始化事件\n     * */\n\n    function initEvents(vm) {\n        vm._events = Object.create(null);\n        vm._hasHookEvent = false;\n        // init parent attached events  初始化 父亲事件\n        var listeners = vm.$options._parentListeners;\n        if (listeners) {\n            //更新组件事件\n            updateComponentListeners(vm, listeners);\n        }\n    }\n\n    var target;\n\n    /**\n     * 添加事件\n     * event 添加事件名称\n     * fn 函数\n     *\n     *  */\n    function add(event, fn, once) {\n        if (once) {\n            //第一个参数是事件类型，第二个参数是事件的函数\n            target.$once(event, fn);\n        } else {\n            //第一个参数是事件类型，第二个参数是事件的函数\n            target.$on(event, fn);\n        }\n    }\n\n    //解绑事件\n    function remove$1(event, fn) {\n        target.$off(event, fn);\n    }\n\n    //更新组件事件\n    function updateComponentListeners(vm,  //虚拟dom\n        listeners,  //新的数据队列\n        oldListeners //旧的事件数据队列\n    ) {\n        target = vm;\n        //更新数据源 并且为新的值 添加函数 旧的值删除函数等功能\n        updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n        target = undefined;\n    }\n\n    /*\n     初始化事件绑定方法\n     *\n     */\n    function eventsMixin(Vue) {\n        var hookRE = /^hook:/;  //开头是^hook: 的字符串\n        /*\n         * 添加绑定事件\n         * vm._events[event]\n         * */\n        Vue.prototype.$on = function (event, fn) {\n            var this$1 = this;\n\n            var vm = this;\n            //如果事件是数组\n            if (Array.isArray(event)) {\n                for (var i = 0, l = event.length; i < l; i++) {\n                    //绑定事件\n                    this$1.$on(event[i], fn);\n                }\n            } else {\n                //把所有事件拆分存放到_events 数组中\n                (vm._events[event] || (vm._events[event] = [])).push(fn);\n                // optimize hook:event cost by using a boolean flag marked at registration\n                // instead of a hash lookup\n                //如果是 hook: 开头的标记为vue vue系统内置钩子函数 比如vue 生命周期函数等\n                if (hookRE.test(event)) {\n                    vm._hasHookEvent = true;\n                }\n            }\n            return vm\n        };\n        /*\n         *  添加事件\n         * */\n        Vue.prototype.$once = function (event, fn) {\n            var vm = this;\n\n            function on() {\n                //解绑事件\n                vm.$off(event, on);\n                //执行事件\n                fn.apply(vm, arguments);\n            }\n\n            on.fn = fn;\n            //添加事件\n            vm.$on(event, on);\n            return vm\n        };\n\n        /*\n         *  vue把事件添加到一个数组队列里面，通过删除该数组事件队列，而达到解绑事件\n         * */\n        Vue.prototype.$off = function (event, fn) {\n            var this$1 = this;\n\n            var vm = this;\n            // all 如果没有参数的情况下 返回 this vm\n            if (!arguments.length) {\n                //创建一个事件对象\n                vm._events = Object.create(null);\n                return vm\n            }\n            // array of events 如果事件是数组事件 则循环回调递归\n            if (Array.isArray(event)) {\n                for (var i = 0, l = event.length; i < l; i++) {\n                    this$1.$off(event[i], fn);\n                }\n                return vm\n            }\n            // specific event 特定的事件 如果事件不存在则返回vm\n            var cbs = vm._events[event];\n            if (!cbs) {\n                return vm\n            }\n            if (!fn) {\n                //如果函数不存在则清空函数对象属性\n                vm._events[event] = null;\n                return vm\n            }\n            if (fn) {\n                // specific handler 具体的处理程序\n                //如果函数存在 并且事件cbs是一个数组\n                var cb;\n                var i$1 = cbs.length;\n                while (i$1--) {\n                    cb = cbs[i$1];\n                    if (cb === fn || cb.fn === fn) {\n                        //清空事件数组\n                        cbs.splice(i$1, 1);\n                        break\n                    }\n                }\n            }\n            return vm\n        };\n\n        //触发事件\n        Vue.prototype.$emit = function (event) {\n            var vm = this;\n            {\n                var lowerCaseEvent = event.toLowerCase(); //转成小写\n                //如果事件转成小写之后并不相等以前字符串，并且是不存在_events 事件队列中\n                if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n                    //然后根据组件追踪发出一个警告\n                    tip(\n                        \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n                        (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n                        \"Note that HTML attributes are case-insensitive and you cannot use \" +\n                        \"v-on to listen to camelCase events when using in-DOM templates. \" +\n                        \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n                    );\n                }\n            }\n            //获取事件值\n            var cbs = vm._events[event];\n            if (cbs) {\n                //如果长度大于1 将它变成一个真正的数组\n                cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n                //将参数变成一个真正数组\n                var args = toArray(arguments, 1);\n                //循环事件\n                for (var i = 0, l = cbs.length; i < l; i++) {\n                    try {\n                        //执行触发事件\n                        cbs[i].apply(vm, args);\n                    } catch (e) {\n                        //如果发生错误则发出报错警告\n                        handleError(e, vm, (\"event handler for \\\"\" + event + \"\\\"\"));\n                    }\n                }\n            }\n            return vm\n        };\n    }\n\n    /*  */\n\n\n    /**\n     * Runtime helper for resolving raw children VNodes into a slot object.\n     * 用于将原始子节点vnode解析为槽对象的运行时帮助器。\n     *\n     * 判断children 有没有分发式插槽 并且过滤掉空的插槽,并且收集插槽\n     *\n     */\n    function resolveSlots(children,\n        context) {\n        var slots = {};\n        //如果没有子节点 则返回一个空对象\n        if (!children) {\n            return slots\n        }\n        //循环子节点\n        for (var i = 0, l = children.length; i < l; i++) {\n            //获取单个子节点\n            var child = children[i];\n            //获取子节点数据\n            var data = child.data;\n            // remove slot attribute if the node is resolved as a Vue slot node\n            //如果节点被解析为Vue槽节点，则删除slot属性 slot 分发式属性\n            if (data && data.attrs && data.attrs.slot) {\n                delete data.attrs.slot;\n            }\n            //只有在\n            // named slots should only be respected if the vnode was rendered in the\n            //如果在VN节点中呈现VNT，则只应命名命名槽。\n\n            // same context.\n            //同样的背景。\n            //context 上下文\n            if ((child.context === context || child.fnContext === context) &&\n                data && data.slot != null\n            ) {\n                //如果有内容分发 插槽\n                var name = data.slot;\n                var slot = (slots[name] || (slots[name] = []));\n                //child 有模板\n                if (child.tag === 'template') {\n                    //把子节点的 子节点 添加 到slot插槽中\n                    slot.push.apply(slot, child.children || []);\n                } else {\n                    //把子节点 添加 到slot插槽中\n                    slot.push(child);\n                }\n            } else {\n                //\n                (slots.default || (slots.default = [])).push(child);\n            }\n        }\n        // ignore slots that contains only whitespace\n        //忽略只包含空白的槽\n        for (var name$1 in slots) {\n            //删除空的插槽\n            if (slots[name$1].every(isWhitespace)) {\n                delete slots[name$1];\n            }\n        }\n        return slots\n    }\n\n    function isWhitespace(node) {\n        //不是异步\n        return (node.isComment && !node.asyncFactory) || node.text === ' '\n    }\n\n    //解决范围槽\n    //把对象数组事件分解成 对象\n\n    /*\n     * [\n     *\n     * {\n     *  key:'name',\n     *  fn:()=>{}\n     * },\n     * {\n     *  key:'name1',\n     *  fn:()=>{}\n     * },\n     * {\n     *  key:'name2',\n     *  fn:()=>{}\n     * },\n     * {\n     *  key:'name3',\n     *  fn:()=>{}\n     * },\n     * ]\n     * 变成\n     * {\n     *   name:()=>{},\n     *   name1:()=>{},\n     *   name2:()=>{},\n     *   name3:()=>{},\n     * }\n     * */\n    function resolveScopedSlots(fns, // see flow/vnode\n        res) {\n        res = res || {};\n        for (var i = 0; i < fns.length; i++) {  //\n            if (Array.isArray(fns[i])) { //如果是数组则递归\n\n                resolveScopedSlots(fns[i], res);\n            } else {\n                //可以去重\n                res[fns[i].key] = fns[i].fn;\n            }\n        }\n        return res\n    }\n\n    /*  */\n\n    var activeInstance = null;\n    var isUpdatingChildComponent = false;\n\n    //初始化生命周期\n    function initLifecycle(vm) {\n        var options = vm.$options;\n\n        // locate first non-abstract parent\n        //定位第一个非抽象父节点\n        var parent = options.parent;\n        if (parent && !options.abstract) {\n            //判断parent父亲节点是否存在，并且判断抽象节点是否存在\n            while (parent.$options.abstract && parent.$parent) {\n                //如果有父亲抽象节点，则把父层或爷爷节点   给当前节点的父亲节点\n                parent = parent.$parent;\n            }\n            //子节点添加 vm\n            parent.$children.push(vm);\n        }\n        //添加$parent 参数\n        vm.$parent = parent;\n\n        //判断parent 是否是顶层 root 如果是 则$root赋值给$root\n        vm.$root = parent ? parent.$root : vm;\n\n        // 情况 $children 节点\n        vm.$children = [];\n        //获取节点的key\n        vm.$refs = {};\n\n        vm._watcher = null; //观察者\n        vm._inactive = null; //禁用的组件状态标志\n        vm._directInactive = false;  // 不活跃 禁用的组件标志\n        vm._isMounted = false; //标志是否 触发过 钩子Mounted\n        vm._isDestroyed = false; //是否已经销毁的组件标志\n        vm._isBeingDestroyed = false; //是否已经销毁的组件标志 如果为true 则不触发 beforeDestroy 钩子函数 和destroyed 钩子函数\n    }\n\n    //初始化vue 更新 销毁 函数\n    function lifecycleMixin(Vue) {\n        //更新数据函数\n        Vue.prototype._update = function (vnode, hydrating) {\n            var vm = this;\n\n            if (vm._isMounted) {\n                //触发更新数据 触发生命周期函数\n                callHook(vm, 'beforeUpdate');\n            }\n\n            //获取 vue 的el节点\n            var prevEl = vm.$el;\n            //vue 的标准 vnode\n            var prevVnode = vm._vnode;  //标志上一个 vonde\n            console.log(prevVnode)\n\n            var prevActiveInstance = activeInstance;\n            activeInstance = vm;\n            vm._vnode = vnode; //标志上一个 vonde\n            // Vue.prototype.__patch__ is injected in entry points 注入入口点\n            // based on the rendering backend used. 基于所使用的呈现后端。\n            if (!prevVnode) { //如果这个prevVnode不存在表示上一次没有创建过vnode，这个组件或者new Vue 是第一次进来\n                // initial render    起始指令\n                //创建dmo 虚拟dom\n                console.log('vm.$el=')\n                console.log(vm.$el)\n                console.log(['vnode=', vnode])\n                console.log(['hydrating=', hydrating])\n                console.log(['vm.$options._parentElm=', vm.$options._parentElm])\n                console.log(['vm.$options._refElm=', vm.$options._refElm])\n                console.log('====vm.$el===')\n                console.log(vm.$el)\n\n                debugger;\n                //更新虚拟dom\n                vm.$el = vm.__patch__(\n                    vm.$el, //真正的dom\n                    vnode, //vnode\n                    hydrating, // 空\n                    false /* removeOnly */,\n                    vm.$options._parentElm, //父节点 空\n                    vm.$options._refElm //当前节点 空\n                );\n                console.log('=vm.$el=')\n                console.log(vm.$el)\n                // no need for the ref nodes after initial patch 初始补丁之后不需要ref节点\n                // this prevents keeping a detached DOM tree in memory (#5851) 这可以防止在内存中保留分离的DOM树\n                vm.$options._parentElm = vm.$options._refElm = null;\n            } else { //如果这个prevVnode存在，表示vno的已经创建过，只是更新数据而已\n                // updates 更新  上一个旧的节点prevVnode 更新虚拟dom\n                vm.$el = vm.__patch__(prevVnode, vnode);\n            }\n            activeInstance = prevActiveInstance; //vue实例化的对象\n            // update __vue__ reference 更新vue参考\n            console.log('==prevEl==')\n            console.log(prevEl)\n            console.log(typeof prevEl)\n            console.log(Object.prototype.toString.call(prevEl))\n            console.log(vm);\n\n\n            if (prevEl) {\n                prevEl.__vue__ = null;\n            }\n            if (vm.$el) { //更新 __vue__\n                vm.$el.__vue__ = vm;\n            }\n            // if parent is an HOC, update its $el as well\n            //如果parent是一个HOC，那么也要更新它的$el\n            if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n                vm.$parent.$el = vm.$el;\n            }\n            // updated hook is called by the scheduler to ensure that children are\n            //调度器调用update hook以确保子节点是\n            // updated in a parent's updated hook.\n            //在父类的更新钩子中更新。\n        };\n\n        //更新数据 观察者数据\n        Vue.prototype.$forceUpdate = function () {\n            var vm = this;\n            //如果_watcher 观察者在就更新数据\n            if (vm._watcher) {\n                vm._watcher.update(); //更新观察者数据\n            }\n        };\n\n        //销毁组建周期函数\n        Vue.prototype.$destroy = function () {\n            var vm = this;\n            //如果是已经销毁过则不会再执行\n            if (vm._isBeingDestroyed) {\n                return\n            }\n            //触发生命周期beforeDestroy 钩子函数\n            callHook(vm, 'beforeDestroy');\n            vm._isBeingDestroyed = true;\n            // remove self from parent\n            //从父节点移除self\n            var parent = vm.$parent;\n            //删除父节点\n            if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n                remove(parent.$children, vm);\n            }\n            // teardown watchers 拆卸观察者\n            if (vm._watcher) {\n                vm._watcher.teardown();\n            }\n            //获取观察者的长度\n            var i = vm._watchers.length;\n            // //把观察者添加到队列里面 当前Watcher添加到vue实例上\n            //vm._watchers.push(this);\n            while (i--) {\n                vm._watchers[i].teardown();\n            }\n            // remove reference from data ob\n            //从数据ob中删除引用\n            // frozen object may not have observer.\n            //被冻结的对象可能没有观察者。\n            if (vm._data.__ob__) {\n                vm._data.__ob__.vmCount--;\n            }\n            // call the last hook...\n            //调用最后一个钩子…\n            vm._isDestroyed = true;\n            // invoke destroy hooks on current rendered tree\n            //调用当前渲染树上的销毁钩子\n            vm.__patch__(vm._vnode, null);\n            // fire destroyed hook\n            // 销毁组建\n            callHook(vm, 'destroyed');\n            // turn off all instance listeners.\n            //销毁事件监听器\n            vm.$off();\n            // remove __vue__ reference\n            //删除vue 参数\n            if (vm.$el) {\n                vm.$el.__vue__ = null;\n            }\n            // release circular reference (#6759)\n            //释放循环引用 销毁父节点\n            if (vm.$vnode) {\n                vm.$vnode.parent = null;\n            }\n        };\n    }\n\n    //安装组件\n    function mountComponent(\n        vm,  //vnode\n        el,  //dom\n        hydrating\n    ) {\n        vm.$el = el; //dom\n        console.log(vm.$options.render)\n\n        //如果参数中没有渲染\n        if (!vm.$options.render) { //实例化vm的渲染函数，虚拟dom调用参数的渲染函数\n            //创建一个空的组件\n            vm.$options.render = createEmptyVNode;\n\n            {\n                /* istanbul ignore if */\n                //如果参数中的模板第一个不为# 号则会 警告\n                if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n                    vm.$options.el || el) {\n                    warn(\n                        'You are using the runtime-only build of Vue where the template ' +\n                        'compiler is not available. Either pre-compile the templates into ' +\n                        'render functions, or use the compiler-included build.',\n                        vm\n                    );\n                } else {\n                    warn(\n                        'Failed to mount component: template or render function not defined.',\n                        vm\n                    );\n                }\n            }\n        }\n\n\n\n        //执行生命周期函数 beforeMount\n        callHook(vm, 'beforeMount');\n        //更新组件\n        var updateComponent;\n        /* istanbul ignore if */\n        //如果开发环境\n        if (\"development\" !== 'production' && config.performance && mark) {\n            updateComponent = function () {\n                var name = vm._name;\n                var id = vm._uid;\n                var startTag = \"vue-perf-start:\" + id;\n                var endTag = \"vue-perf-end:\" + id;\n\n                mark(startTag); //插入一个名称 并且记录插入名称的时间\n                var vnode = vm._render();\n                mark(endTag);\n                measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n                mark(startTag); //浏览器 性能时间戳监听\n                //更新组件\n                vm._update(vnode, hydrating);\n                mark(endTag);\n                measure((\"vue \" + name + \" patch\"), startTag, endTag);\n            };\n        } else {\n            updateComponent = function () {\n                console.log(vm._render())\n\n\n                //直接更新view试图\n                vm._update(\n\n                    /*\n                     render 是  虚拟dom，需要执行的编译函数 类似于这样的函数\n                     (function anonymous( ) {\n                     with(this){return _c('div',{attrs:{\"id\":\"app\"}},[_c('input',{directives:[{name:\"info\",rawName:\"v-info\"},{name:\"data\",rawName:\"v-data\"}],attrs:{\"type\":\"text\"}}),_v(\" \"),_m(0)])}\n                     })\n                     */\n                    vm._render(), //先执行_render,返回vnode\n                    hydrating\n                );\n            };\n        }\n\n        // we set this to vm._watcher inside the watcher's constructor\n        // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n        // component's mounted hook), which relies on vm._watcher being already defined\n        //我们将其设置为vm。在观察者的构造函数中\n        //因为观察者的初始补丁可能调用$forceUpdate(例如inside child)\n        //组件的挂载钩子)，它依赖于vm。_watcher已经定义\n        //创建观察者\n        new Watcher(\n            vm,  //vm vode\n            updateComponent, //数据绑定完之后回调该函数。更新组件函数 更新 view试图\n            noop, //回调函数\n            null, //参数\n            true //是否渲染过得观察者\n            /* isRenderWatcher */);\n        hydrating = false;\n\n        // manually mounted instance, call mounted on self\n        // mounted is called for render-created child components in its inserted hook\n        //手动挂载实例，调用挂载在self上\n        // 在插入的钩子中为呈现器创建的子组件调用// mount\n        if (vm.$vnode == null) {\n            vm._isMounted = true;\n            //执行生命周期函数mounted\n            callHook(vm, 'mounted');\n        }\n\n        return vm\n    }\n\n    //更新子组件 循环props 把他们添加到观察者中 ，更新事件\n    function updateChildComponent(\n        vm,// 虚拟dom vonde\n        propsData, //props 数据属性\n        listeners, //事件\n        parentVnode, //父亲 虚拟dom vonde\n        renderChildren) { //子节点\n        {\n            isUpdatingChildComponent = true; //标志 是否已经更新过了子组件\n        }\n\n\n        // determine whether component has slot children 确定组件是否有槽子组件\n        // we need to do this before overwriting $options._renderChildren 在覆盖$options._renderChildren之前，我们需要这样做\n        //\n        var hasChildren = !!(\n            renderChildren ||               // has new static slots  是否有新的静态插槽\n            vm.$options._renderChildren ||  // has old static slots  是否有旧的 静态插槽\n            parentVnode.data.scopedSlots || // has new scoped slots  是否有范围插槽\n            vm.$scopedSlots !== emptyObject // has old scoped slots  是否有旧的范围插槽 emptyObject 是一个空的对象\n        );\n\n        vm.$options._parentVnode = parentVnode; //父亲 虚拟dom vonde\n        vm.$vnode = parentVnode; // update vm's placeholder node without re-render 无需重新渲染即可更新vm的占位符节点\n\n        if (vm._vnode) { // update child tree's parent 更新子树的父树\n            vm._vnode.parent = parentVnode;\n        }\n        vm.$options._renderChildren = renderChildren; //子节点\n\n        // update $attrs and $listeners hash\n        // these are also reactive so they may trigger child update if the child\n        // used them during render\n        //更新$attrs和$listener散列\n        //它们也是反应性的，因此如果子进程更新，它们可能触发子进程更新\n        //渲染时使用它们\n        vm.$attrs = parentVnode.data.attrs || emptyObject; //虚拟dom的属性\n        vm.$listeners = listeners || emptyObject; //虚拟dom的 事件\n\n        // update props  更新props 属性\n        if (propsData && vm.$options.props) {\n            toggleObserving(false); // 标志是否禁止还是添加到观察者模式\n            var props = vm._props;  //获取属性对象\n            var propKeys = vm.$options._propKeys || []; //获取属性的prop的key\n            for (var i = 0; i < propKeys.length; i++) { //循环props属性\n                var key = propKeys[i]; //获取props 单个 属性的key\n                var propOptions = vm.$options.props; // wtf flow?\n                /*\n                 验证支柱  验证 prosp 是否是规范数据 并且为props 添加 value.__ob__  属性，把prosp添加到观察者中\n                 *  校验 props 参数 就是组建 定义的props 类型数据，校验类型\n                 *\n                 * 判断prop.type的类型是不是Boolean或者String，如果不是他们两类型，调用getPropDefaultValue获取默认值并且把value添加到观察者模式中\n                 */\n                props[key] = validateProp(key, propOptions, propsData, vm);\n            }\n            toggleObserving(true);\n\n            // keep a copy of raw propsData\n            //保留原始propsData的副本\n            vm.$options.propsData = propsData;\n        }\n\n        // update listeners 更新事件\n        listeners = listeners || emptyObject;\n        var oldListeners = vm.$options._parentListeners; //旧的事件\n        vm.$options._parentListeners = listeners; //新的事件\n        //更新组件事件\n        updateComponentListeners(vm, listeners, oldListeners);\n\n        // resolve slots + force update if has children\n        //解决插槽+强制更新如果有 子节点\n        if (hasChildren) {\n            //判断children 有没有分发式插槽 并且过滤掉空的插槽,并且收集插槽\n            vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n            //更新数据 观察者数据\n            vm.$forceUpdate();\n        }\n\n        {\n            isUpdatingChildComponent = false;\n        }\n    }\n\n    //循环父树层 如果有不活跃的则返回真\n    function isInInactiveTree(vm) { //活动中的树\n        while (vm && (vm = vm.$parent)) { //循环父节点如果父节点有_inactive 则返回true\n            if (vm._inactive) { //不活跃\n                return true\n            }\n        }\n        return false\n    }\n\n    //判断是否有不活跃的组件 禁用他 如果有活跃组件则触发钩子函数activated\n    function activateChildComponent(vm, // 虚拟dom vode\n        direct //布尔值\n    ) {\n        if (direct) {\n            vm._directInactive = false;\n            if (isInInactiveTree(vm)) { //如果有不活跃的树，或者被禁用组件\n                return\n            }\n        } else if (vm._directInactive) { //单个不活跃的\n            return\n        }\n        if (vm._inactive || vm._inactive === null) { //如果 _inactive=true 不活跃组件 或者 vm._inactive === null\n            vm._inactive = false;\n            for (var i = 0; i < vm.$children.length; i++) { //循环禁止子组件\n                activateChildComponent(vm.$children[i]); //递归循环 禁用子组件\n            }\n            callHook(vm, 'activated'); //触发activated 生命周期钩子函数\n        }\n    }\n\n    // 循环子组件 和父组件  判断是否有禁止的组件 如果有活跃组件则执行生命后期函数deactivated\n    function deactivateChildComponent(vm, direct) {\n        if (direct) {\n            vm._directInactive = true;\n            if (isInInactiveTree(vm)) {\n                return\n            }\n        }\n        if (!vm._inactive) { //如果该组件是活跃的\n            vm._inactive = true; //设置活动中的树\n            for (var i = 0; i < vm.$children.length; i++) {\n                deactivateChildComponent(vm.$children[i]);\n            }\n            //执行生命周期函数deactivated\n            callHook(vm, 'deactivated');\n        }\n    }\n\n    //触发钩子函数\n    function callHook(vm,  //虚拟dom  vonde\n        hook //钩子函数的key\n    ) {\n        // #7573 disable dep collection when invoking lifecycle hooks\n        //调用生命周期钩子时禁用dep集合\n        //Dep.target = _target; //存储\n        pushTarget();\n        //在vm 中添加声明周期函数\n        var handlers = vm.$options[hook];\n        console.log('hook=' + hook)\n        console.log('vm.$options[hook]')\n        console.log(vm.$options[hook])\n        console.log('==handlers==')\n        console.log(handlers)\n        if (handlers) {  //数组\n            for (var i = 0, j = handlers.length; i < j; i++) {\n                try {\n                    //执行生命周期函数\n                    handlers[i].call(vm);\n                } catch (e) {\n                    handleError(e, vm, (hook + \" hook\"));\n                }\n            }\n        }\n        if (vm._hasHookEvent) {\n            vm.$emit('hook:' + hook);\n        }\n        popTarget();\n    }\n\n    /*  */\n\n\n    var MAX_UPDATE_COUNT = 100;\n\n    var queue = []; //记录观察者队列的数组\n    var activatedChildren = []; //记录活跃的子组件\n    var has = {}; //  记录观察者的id\n    var circular = {}; //持续循环更新的次数，如果超过100次 则判断已经进入了死循环，则会报错\n    var waiting = false; //观察者在更新数据时候 等待的标志\n    var flushing = false; //进入flushSchedulerQueue 函数等待标志\n    var index = 0; //queue 观察者队列的索引\n\n    /**\n     * Reset the scheduler's state.\n     * 重置调度程序的状态。\n     * 清空观察者watcher队列中的数据\n     */\n    function resetSchedulerState() {\n        index = queue.length = activatedChildren.length = 0;\n        has = {}; //观察者记录的id\n        {\n            circular = {};\n        }\n        waiting = flushing = false;\n    }\n\n    /**\n     * Flush both queues and run the watchers. 刷新两个队列并运行监视程序。\n     * 更新观察者 运行观察者watcher.run() 函数 并且   调用组件更新和激活的钩子\n     */\n    function flushSchedulerQueue() {\n        flushing = true;\n        var watcher, id;\n\n        // Sort queue before flush.\n        // This ensures that:\n        // 1. Components are updated from parent to child. (because parent is always\n        //    created before the child)\n        // 2. A component's user watchers are run before its render watcher (because\n        //    user watchers are created before the render watcher)\n        // 3. If a component is destroyed during a parent component's watcher run,\n        //    its watchers can be skipped.\n        //刷新前对队列排序。\n        //这确保:\n        // 1。组件从父组件更新到子组件。因为父母总是在孩子之前创建)\n        // 2。组件的用户观察者在其呈现观察者之前运行(因为用户观察者是在渲染观察者之前创建的)\n        // 3。如果一个组件在父组件的监视程序运行期间被销毁，可以跳过它的观察者。\n        //观察者根据id去排序\n        queue.sort(function (a, b) {\n            return a.id - b.id;\n        });\n\n        // do not cache length because more watchers might be pushed 不要缓存长度，因为可能会推入更多的观察者\n        // as we run existing watchers 我们运行现有的观察者\n        for (index = 0; index < queue.length; index++) {\n            watcher = queue[index]; //获取单个观察者\n            id = watcher.id;\n            has[id] = null;\n            watcher.run(); //运行观察者\n            // in dev build, check and stop circular updates. 在dev build中，检查并停止循环更新。\n            if (\"development\" !== 'production' && has[id] != null) {\n                circular[id] = (circular[id] || 0) + 1;\n                if (circular[id] > MAX_UPDATE_COUNT) {\n                    warn(\n                        'You may have an infinite update loop ' + (\n                            watcher.user\n                                ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n                                : \"in a component render function.\"\n                        ),\n                        watcher.vm\n                    );\n                    break\n                }\n            }\n        }\n\n        // keep copies of post queues before resetting state 在重置状态之前保留post队列的副本\n        var activatedQueue = activatedChildren.slice(); // 浅拷贝\n        var updatedQueue = queue.slice();// 浅拷贝\n\n        //清空观察者watcher队列中的数据\n        resetSchedulerState();\n\n        // call component updated and activated hooks 调用组件更新和激活的钩子\n        callActivatedHooks(activatedQueue);\n        callUpdatedHooks(updatedQueue);\n\n        // devtool hook\n        /* istanbul ignore if */\n        //触发父层flush 钩子函数\n        if (devtools && config.devtools) {\n            devtools.emit('flush');\n        }\n    }\n\n    //触发更新updated 钩子函数\n    function callUpdatedHooks(queue) {\n        var i = queue.length;\n        while (i--) {\n            var watcher = queue[i];\n            var vm = watcher.vm; //获取到虚拟dom\n            if (vm._watcher === watcher && vm._isMounted) { //判断watcher与vm._watcher 相等 _isMounted已经更新触发了 mounted 钩子函数\n                //触发updated 更新数据钩子函数\n                callHook(vm, 'updated');\n            }\n        }\n    }\n\n    /**\n     * Queue a kept-alive component that was activated during patch. 对补丁期间激活的kept-alive组件进行队列。\n     * The queue will be processed after the entire tree has been patched. 队列将在整个树被修补之后处理。\n     * 添加活跃的组件函数 把活跃的vm添加到activatedChildren 中\n     */\n    function queueActivatedComponent(vm) {\n        // setting _inactive to false here so that a render function can 在这里将_inactive设置为false，以便呈现函数可以\n        // rely on checking whether it's in an inactive tree (e.g. router-view) 依赖于检查它是否在非活动树中(例如router-view)\n        vm._inactive = false;\n        activatedChildren.push(vm);\n    }\n\n    //  调用组件激活的钩子\n    function callActivatedHooks(queue) {\n        for (var i = 0; i < queue.length; i++) {\n            queue[i]._inactive = true;\n            //判断是否有不活跃的组件 禁用他 如果有活跃组件则触发钩子函数activated\n            activateChildComponent(queue[i], true /* true */);\n        }\n    }\n\n    /**\n     * Push a watcher into the watcher queue. *将一个观察者推入观察者队列。\n     * Jobs with duplicate IDs will be skipped unless it's id重复的作业将被跳过，除非是\n     * pushed when the queue is being flushed. *刷新队列时推送。\n     *\n     * 将观察者推进 queue 队列中 过滤重复的 id 除非是*刷新队列时推送。\n     */\n    function queueWatcher(watcher) {\n        var id = watcher.id;\n        if (has[id] == null) {\n            has[id] = true;\n            // flushing=true; //这个标志需要去掉\n            console.log(flushing)\n\n            if (!flushing) {\n                queue.push(watcher); //把观察者添加到队列中\n            } else {\n                // if already flushing, splice the watcher based on its id 如果已经刷新，则根据监视程序的id拼接它\n                // if already past its id, it will be run next immediately. 如果已经通过了它的id，那么将立即运行next。\n                var i = queue.length - 1;\n                while (i > index && queue[i].id > watcher.id) {\n                    i--;\n                }\n                //根据id大小拼接插入在数组的哪个位置\n                queue.splice(i + 1, 0, watcher);\n            }\n            console.log(waiting)\n\n            // queue the flush\n            if (!waiting) {\n                waiting = true;\n                //为callbacks 收集队列cb 函数 并且根据 pending 状态是否要触发callbacks 队列函数\n                nextTick(\n                    flushSchedulerQueue//更新观察者 运行观察者watcher.run() 函数 并且   调用组件更新和激活的钩子\n                );\n            }\n        }\n    }\n\n    /*  */\n\n    var uid$1 = 0; //观察者的id\n\n    /**\n     * A watcher parses an expression, collects dependencies,\n     * and fires callback when the expression value changes.\n     * This is used for both the $watch() api and directives.\n     * *观察者分析表达式，收集依赖项，\n     *并在表达式值更改时触发回调。\n     *这用于$watch() api和指令。\n     * 当前vue实例、updateComponent函数、空函数。\n     */\n    var Watcher = function Watcher(\n        vm, //vm dom\n        expOrFn,  //获取值的函数，或者是更新viwe试图函数\n        cb, //回调函数,回调值给回调函数\n        options, //参数\n        isRenderWatcher//是否渲染过得观察者\n    ) {\n        console.log('====Watcher====')\n        this.vm = vm;\n        //是否是已经渲染过得观察者\n        if (isRenderWatcher) { //把当前 Watcher 对象赋值给 vm._watcher上\n            vm._watcher = this;\n        }\n        //把观察者添加到队列里面 当前Watcher添加到vue实例上\n        vm._watchers.push(this);\n        // options\n        if (options) { //如果有参数\n            this.deep = !!options.deep; //实际\n            this.user = !!options.user; //用户\n            this.lazy = !!options.lazy; //懒惰 ssr 渲染\n            this.sync = !!options.sync; //如果是同步\n        } else {\n\n            this.deep = this.user = this.lazy = this.sync = false;\n        }\n        this.cb = cb; //回调函数\n        this.id = ++uid$1; // uid for batching uid为批处理  监听者id\n        this.active = true; //激活\n        this.dirty = this.lazy; // for lazy watchers 对于懒惰的观察者\n        this.deps = [];    // 观察者队列\n        this.newDeps = []; // 新的观察者队列\n        // 内容不可重复的数组对象\n        this.depIds = new _Set();\n        this.newDepIds = new _Set();\n        // 把函数变成字符串形式\n        this.expression = expOrFn.toString();\n        // parse expression for getter\n        //getter的解析表达式\n        if (typeof expOrFn === 'function') {\n            //获取值的函数\n            this.getter = expOrFn;\n        } else {\n            //如果是keepAlive 组件则会走这里\n            //path 因该是路由地址\n            if (bailRE.test(path)) {  //  匹配上 返回 true     var bailRE = /[^\\w.$]/;  //匹配不是 数字字母下划线 $符号   开头的为true\n                return\n            }\n\n            // //匹配不上  path在已点分割\n            // var segments = path.split('.');\n            // return function (obj) {\n            //\n            //     for (var i = 0; i < segments.length; i++) {\n            //         //如果有参数则返回真\n            //         if (!obj) {\n            //             return\n            //         }\n            //         //将对象中的一个key值 赋值给该对象 相当于 segments 以点拆分的数组做obj 的key\n            //         obj = obj[segments[i]];\n            //     }\n            //     //否则返回一个对象\n            //     return obj\n            // }\n\n            //匹配不是 数字字母下划线 $符号   开头的为true\n\n            this.getter = parsePath(expOrFn);\n            if (!this.getter) { //如果不存在 则给一个空的数组\n                this.getter = function () {\n                };\n                \"development\" !== 'production' && warn(\n                    \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n                    'Watcher only accepts simple dot-delimited paths. ' +\n                    'For full control, use a function instead.',\n                    vm\n                );\n            }\n        }\n        this.value = this.lazy ?  //   lazy为真的的时候才能获取值  这个有是组件才为真\n            undefined :\n            this.get(); //计算getter，并重新收集依赖项。 获取值\n    };\n\n    /**\n     * Evaluate the getter, and re-collect dependencies.\n     * 计算getter，并重新收集依赖项。 获取value值\n     */\n    Watcher.prototype.get = function get() {\n        //添加一个dep target\n        pushTarget(this);\n        var value;\n        var vm = this.vm;\n        try {\n            console.log(this.getter)\n            //获取值 如果报错 则执行catch\n            value = this.getter.call(vm, vm);\n            console.log(value)\n\n        } catch (e) {\n            if (this.user) {\n                handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n            } else {\n                throw e\n            }\n        } finally {\n            // \"touch\" every property so they are all tracked as\n            // dependencies for deep watching\n            //“触摸”每个属性，以便它们都被跟踪为\n            //依赖深度观察\n            if (this.deep) {\n\n                // //如果val 有__ob__ 属性\n                // if (val.__ob__) {\n                //     var depId = val.__ob__.dep.id;\n                //     // seen 中是否含有depId 属性或者方法\n                //     if (seen.has(depId)) {\n                //         return\n                //     }\n                //     //如果没有则添加进去\n                //     seen.add(depId);\n                // }\n                //为 seenObjects 深度收集val 中的key\n                traverse(value);\n            }\n            // 出盏一个pushTarget\n            popTarget();\n            //清理依赖项集合。\n            this.cleanupDeps();\n        }\n        //返回值\n        return value\n    };\n\n    /**\n     * Add a dependency to this directive. 向该指令添加依赖项。\n     */\n    Watcher.prototype.addDep = function addDep(dep) {\n        var id = dep.id; //dep.id 一个持续相加的id\n        if (!this.newDepIds.has(id)) {//如果id存在\n            this.newDepIds.add(id); //添加一个id\n            this.newDeps.push(dep); //添加一个deps\n            if (!this.depIds.has(id)) {  //如果depIds 不存在id则添加一个addSub  //添加一个sub\n                dep.addSub(this);\n            }\n        }\n    };\n\n    /**\n     * Clean up for dependency collection.\n     * 清理观察者依赖项集合。\n     */\n    Watcher.prototype.cleanupDeps = function cleanupDeps() {\n        var this$1 = this;\n        var i = this.deps.length; //遍历\n        while (i--) {\n            var dep = this$1.deps[i];\n            if (!this$1.newDepIds.has(dep.id)) {\n                //清除 sub\n                dep.removeSub(this$1);\n            }\n        }\n        var tmp = this.depIds; //获取depid\n        this.depIds = this.newDepIds; //获取新的depids\n        this.newDepIds = tmp;  //旧的覆盖新的\n        this.newDepIds.clear(); //清空对象\n\n        //互换值\n        tmp = this.deps; //\n        this.deps = this.newDeps;\n        this.newDeps = tmp;\n        this.newDeps.length = 0;\n    };\n\n    /**\n     * Subscriber interface.用户界面。\n     * Will be called when a dependency changes.\n     * 将在依赖项更改时调用。\n     */\n    Watcher.prototype.update = function update() {\n\n        /* istanbul ignore else  伊斯坦布尔忽略其他 */\n        if (this.lazy) { //懒惰的 忽略\n            this.dirty = true;\n\n        } else if (this.sync) { //如果是同步\n\n            //更新数据\n            this.run();\n        } else {\n\n            //如果是多个观察者\n            queueWatcher(this); //队列中的观察者\n        }\n    };\n\n    /**\n     * Scheduler job interface. 调度器的工作界面。\n     * Will be called by the scheduler. 将被调度程序调用。\n     */\n    Watcher.prototype.run = function run() {\n        if (this.active) { //活跃\n            var value = this.get(); //获取值 函数 expOrFn\n            if (\n                value !== this.value ||  //如果值不相等\n                // Deep watchers and watchers on Object/Arrays should fire even 深度观察和对象/数组上的观察应该是均匀的\n                // when the value is the same, because the value may 当值相等时，因为值可以\n                // have mutated. 有突变。\n                isObject(value) || //或者值的object\n                this.deep  //获取deep为true\n            ) {\n                // set new value\n                var oldValue = this.value; //获取旧的值\n                this.value = value; //新的值赋值\n                if (this.user) { //如果是user 用更新值\n                    try {\n                        this.cb.call(this.vm, value, oldValue); //更新回调函数  获取到新的值 和旧的值\n                    } catch (e) {\n                        handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n                    }\n                } else {\n                    this.cb.call(this.vm, value, oldValue);//更新回调函数  获取到新的值 和旧的值\n                }\n            }\n        }\n    };\n\n    /**\n     * Evaluate the value of the watcher. 评估观察者的值。\n     * This only gets called for lazy watchers. 这只适用于懒惰的观察者。\n     */\n    Watcher.prototype.evaluate = function evaluate() {\n        this.value = this.get(); //获取值\n        this.dirty = false; // 懒惰者标志  标志已经获取过一次值\n    };\n\n    /**\n     * Depend on all deps collected by this watcher.\n     * 依赖于此监视程序收集的所有dep。\n     * 循环deps 收集 newDeps dep 当newDeps 数据被清空的时候重新收集依赖\n     */\n    Watcher.prototype.depend = function depend() {\n        // this.newDeps.push(dep); //添加一个deps\n        //deps=this.newDeps\n        var this$1 = this;\n        var i = this.deps.length;\n        console.log('==  this.deps.length  ==')\n        while (i--) {\n            // 为Watcher 添加dep 对象\n            // this.newDeps.push(dep); //添加一个deps\n            this$1.deps[i].depend();\n        }\n    };\n\n    /**\n     * Remove self from all dependencies' subscriber list.\n     * 从所有依赖项的订阅方列表中删除self。\n     */\n    Watcher.prototype.teardown = function teardown() {\n        var this$1 = this;\n        if (this.active) {\n            // remove self from vm's watcher list 从vm的监视者列表中删除self\n            // this is a somewhat expensive operation so we skip it 这是一个有点昂贵的操作，所以我们跳过它\n            // if the vm is being destroyed. 如果vm被销毁。\n            if (!this.vm._isBeingDestroyed) { //是否销毁的标志\n                remove(this.vm._watchers, this); //删除观察者\n            }\n            var i = this.deps.length;\n            while (i--) {\n                //删除 removeSub\n                this$1.deps[i].removeSub(this$1);\n            }\n            this.active = false;\n        }\n    };\n\n    /*\n     *\n     Object.defineProperty(person,'name',{\n     configurable:false,//能否使用delete、能否需改属性特性、或能否修改访问器属性、，false为不可重新定义，默认值为true 是否可以编辑\n     enumerable:false,//对象属性是否可通过for-in循环，flase为不可循环，默认值为true 是否可以枚举遍历\n     writable:false,//对象属性是否可修改,flase为不可修改，默认值为true\n     value:'' //对象属性的默认值，默认值为undefined\n     });\n     * */\n    var sharedPropertyDefinition = { //共享属性定义\n        enumerable: true,\n        configurable: true,\n        get: noop,\n        set: noop\n    };\n\n    // var Odata={\n    //     data:{\n    //         name:'yao',\n    //         age:28,\n    //         array:[1,2,3,4,5,6,7,8,9],\n    //         obj:{\n    //             area:'guangxi',\n    //             work:'engineer'\n    //\n    //         }\n    //     }\n    // }\n    // 设置 监听 观察者, 该函数是可以让 对象中的三级key 直接冒泡到1级key中\n    //比如 name 只能在Odata.data.name 获取到数据，执行 proxy(Odata,'data','name')之后可以Odata.name 获取值\n    function proxy(target, sourceKey, key) {\n        sharedPropertyDefinition.get = function proxyGetter() { //设置get函数\n            return this[sourceKey][key]\n        };\n        sharedPropertyDefinition.set = function proxySetter(val) {//设置set函数\n            this[sourceKey][key] = val;\n        };\n        Object.defineProperty(target, key, sharedPropertyDefinition); //设置监听观察者\n    }\n\n    //初始化状态\n    function initState(vm) {\n        vm._watchers = []; //初始化观察者队列\n        var opts = vm.$options; //初始化参数\n        //判断是否有props属性，如果有则添加观察者\n        if (opts.props) {\n            //初始化props 检验props 数据格式是否是规范的如果是规范的则添加到观察者队列中\n            initProps(vm, opts.props);\n        }\n\n\n        if (opts.methods) { //事件\n            //   初始化事件Methods 把事件 冒泡到 vm[key] 虚拟dom  最外层中\n            initMethods(vm, opts.methods);\n        }\n        if (opts.data) { //初始化数据\n            // 初始化数据 获取options.data 的数据 将他们添加到 监听者中\n            console.log(vm)\n\n            initData(vm);\n            console.log(vm)\n\n        } else {\n            console.log('vm._data')\n            console.log(vm._data)\n\n\n            //  判断value 是否有__ob__    实例化 dep对象,获取dep对象  为 value添加__ob__ 属性，把vm._data添加到观察者中  返回 new Observer 实例化的对象\n            observe(vm._data = {}, true /* asRootData */);\n\n        }\n        if (opts.computed) { //计算属性\n            //初始化计算属性 并且判断属性的key 是否 在 data ，将 计算属性的key 添加入监听者中\n            initComputed(vm, opts.computed);\n        }\n        //options 中的 watch\n        if (opts.watch && opts.watch !== nativeWatch) {\n            //初始化Watch\n            initWatch(vm, opts.watch);\n        }\n    }\n\n    //初始化props 检验props 数据格式是否是规范的如果是规范的则添加到观察者队列中\n    function initProps(vm, propsOptions) {\n        var propsData = vm.$options.propsData || {};\n        var props = vm._props = {};\n        // cache prop keys so that future props updates can iterate using Array\n        //缓存道具键，以便以后道具更新可以使用数组迭代\n        // instead of dynamic object key enumeration.\n        //而不是动态对象键枚举。\n        var keys = vm.$options._propKeys = [];\n        var isRoot = !vm.$parent;\n        // root instance props should be converted\n        //应该转换根实例道具\n        if (!isRoot) {  //则不会监听 观察者\n            toggleObserving(false);\n        }\n        var loop = function (key) {\n            keys.push(key);\n            /*\n             验证支柱  验证 prosp 是否是规范数据 并且为props 添加 value.__ob__  属性，把prosp添加到观察者中\n             *  校验 props 参数 就是组建 定义的props 类型数据，校验类型\n             *\n             * 判断prop.type的类型是不是Boolean或者String，如果不是他们两类型，调用getPropDefaultValue获取默认值并且把value添加到观察者模式中\n             */\n            var value = validateProp(\n                key, //props 对象的key\n                propsOptions,\n                propsData,\n                vm\n            );\n            /* istanbul ignore else 伊斯坦布尔忽略其他 */\n            {\n                //大写字母，加完减号又转成小写了 比如把驼峰 aBc 变成了 a-bc\n                //匹配大写字母并且两面不是空白的 替换成 - 在转换成小写\n                var hyphenatedKey = hyphenate(key);\n                // 检查属性是否为保留属性。\n                //var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n                if (isReservedAttribute(hyphenatedKey) ||\n                    config.isReservedAttr(hyphenatedKey)) {\n                    //输出警告\n                    warn(\n                        (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n                        vm\n                    );\n                }\n                //通过defineProperty的set方法去通知notify()订阅者subscribers有新的值修改\n                defineReactive(props, key, value, function () {\n                    if (vm.$parent && !isUpdatingChildComponent) {\n                        warn(\n                            \"Avoid mutating a prop directly since the value will be \" +\n                            \"overwritten whenever the parent component re-renders. \" +\n                            \"Instead, use a data or computed property based on the prop's \" +\n                            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n                            vm\n                        );\n                    }\n                });\n            }\n            // static props are already proxied on the component's prototype\n            // during Vue.extend(). We only need to proxy props defined at\n            // instantiation here.\n            if (!(key in vm)) { //如果vm中没有props属性，则把他添加到vm中，这样组件this.[propsKey] 就可以获取到值了\n                proxy(vm, \"_props\", key);\n            }\n        };\n        //循环校验 props 是否 是合格数据 并且添加观察者\n        for (var key in propsOptions) loop(key);\n        toggleObserving(true);\n    }\n\n    //初始化数据 获取options.data 的数据 将他们添加到 监听者中\n    function initData(vm) {\n        //获取到$options.data 数据\n        var data = vm.$options.data;\n\n        //获取data中的数据   判断如果是函数则\n        data = vm._data = typeof data === 'function' //如果data是函数\n            ? getData(data, vm)  //转换数据 如果数据是 一个函数的时候 执行该函数 拿到数据\n            : data || {}; //直接获取数据\n\n        if (!isPlainObject(data)) { //如果不是对象 则发出警告日志\n            data = {};\n            \"development\" !== 'production' && warn(\n                'data functions should return an object:\\n' +\n                'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n                vm\n            );\n        }\n        // proxy data on instance\n        var keys = Object.keys(data); //获取数据的key\n        var props = vm.$options.props; //获取props 属性\n        var methods = vm.$options.methods; //获取事件\n        var i = keys.length; //获取数据key的长度\n        while (i--) { //循环data\n            var key = keys[i];\n            {\n                if (methods && hasOwn(methods, key)) { //如果数据中的 key 与事件 中的定义的key 一样 则发出警告\n                    warn(\n                        (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n                        vm\n                    );\n                }\n            }\n\n            if (props && hasOwn(props, key)) { //如果数据中的 key 与props属性 中的定义的key 一样 则发出警告\n                \"development\" !== 'production' && warn(\n                    \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n                    \"Use prop default value instead.\",\n                    vm\n                );\n            } else if (!isReserved(key)) { //如果不是 以$或者_开头\n                console.log(vm)\n                console.log(key)\n\n                proxy(vm, \"_data\", key); //把数据添加到监听者中\n                console.log(vm)\n\n\n            }\n        }\n        // observe data\n        console.log('data')\n        console.log(data)\n\n        observe(data, true /* asRootData */);\n    }\n\n    //转换数据 如果数据是 一个函数的时候 执行该函数 拿到数据\n    function getData(data, vm) {\n        // #7573 disable dep collection when invoking data getters\n        //调用数据getter时禁用dep收集\n        pushTarget();\n        try {\n            //执行函数 获取数据\n            return data.call(vm, vm)\n        } catch (e) {\n            //收集错误信息\n            handleError(e, vm, \"data()\");\n            return {}\n        } finally {\n            //调用数据getter时禁用dep收集\n            popTarget();\n        }\n    }\n\n    var computedWatcherOptions = { lazy: true };\n\n    //初始化计算属性 并且判断属性的key 是否 在 data ，将 计算属性的key 添加入监听者中\n    function initComputed(vm, computed) {\n        // $flow-disable-line\n        //创建一个新的监听者对象空对象\n        var watchers = vm._computedWatchers = Object.create(null);\n        // computed properties are just getters during SSR 计算的属性只是SSR期间的getter\n        var isSSR = isServerRendering(); // 服务器呈现  判断是不是node 服务器环境\n\n        for (var key in computed) {\n            var userDef = computed[key]; //获取值\n            var getter = typeof userDef === 'function' ? userDef : userDef.get; //获取值函数\n            if (\"development\" !== 'production' && getter == null) { //如果getter 是 空 警告\n                warn(\n                    (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n                    vm\n                );\n            }\n\n            if (!isSSR) { //如果不是node ssr渲染\n                // create internal watcher for the computed property.\n                watchers[key] = new Watcher(\n                    vm, //vm  vode\n                    getter || noop,  //函数\n                    noop,  //回调函数\n                    computedWatcherOptions  //参数 lazy = true\n                );\n            }\n\n            // component-defined computed properties are already defined on the 组件定义的计算属性已经在\n            // component prototype. We only need to define computed properties defined 组件原型。我们只需要定义已定义的计算属性\n            // at instantiation here. 在实例化。\n            if (!(key in vm)) { //如果computed 属性key 不在虚拟dom中\n                defineComputed(vm, key, userDef); //定义计算属性 并且 把属性的数据 添加到对象监听中\n            } else {\n                if (key in vm.$data) {  //如果判断属性监听的key在 data 中则发出警告\n                    warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n                } else if (vm.$options.props && key in vm.$options.props) {\n                    warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n                }\n            }\n        }\n    }\n\n    //定义计算属性 并且 把属性的数据 添加到对象监听中\n    function defineComputed(target, //目标\n        key, //key\n        userDef //值\n    ) {\n        var shouldCache = !isServerRendering(); //如果不是node服务器 是浏览器\n        if (typeof userDef === 'function') { //属性的值如果是个函数\n            sharedPropertyDefinition.get = shouldCache\n                ? createComputedGetter(key) //如果不是node服务器 是浏览器    创建计算属性 获取值 收集 dep 依赖\n                : userDef; //node 服务器取值 直接调用该函数\n            sharedPropertyDefinition.set = noop; //赋值一个空函数\n        } else {\n            sharedPropertyDefinition.get = userDef.get ?//如果userDef.get 存在\n                (shouldCache && userDef.cache !== false ? //缓存\n                    createComputedGetter(key) :  //创建计算属性 获取值 收集 dep 依赖\n                    userDef.get\n                ) :\n                noop;  //如果userDef.get 不存在给一个空的函数\n            sharedPropertyDefinition.set = userDef.set //如果userDef.set 存在\n                ? userDef.set\n                : noop;\n        }\n        if (\"development\" !== 'production' &&\n            sharedPropertyDefinition.set === noop) { //如果设置值等于一个空函数则警告\n            sharedPropertyDefinition.set = function () {\n                warn(\n                    (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n                    this\n                );\n            };\n        }\n        //添加对象监听\n        Object.defineProperty(target, key, sharedPropertyDefinition);\n    }\n\n    //创建计算属性 获取值 收集 dep 依赖\n    function createComputedGetter(key) {\n        return function computedGetter() {\n            // Watcher 实例化之后的对象\n            var watcher = this._computedWatchers && this._computedWatchers[key];\n            if (watcher) {\n                if (watcher.dirty) {\n                    //this.value 获取值 this.getter\n                    watcher.evaluate(); //评估\n                }\n                if (Dep.target) {\n                    //为Watcher 添加 为Watcher.newDeps.push(dep); 一个dep对象\n                    //循环deps 收集 newDeps dep 当newDeps 数据被清空的时候重新收集依赖\n                    watcher.depend();\n                }\n                //返回值\n                return watcher.value\n            }\n        }\n    }\n\n    //初始化事件Methods 把事件 冒泡到 vm[key] 虚拟dom  最外层中\n    function initMethods(vm, methods) {\n        var props = vm.$options.props;\n        //循环 methods 事件对象\n        for (var key in methods) {\n            {\n                //如果事件是null则发出警告\n                if (methods[key] == null) {\n                    warn(\n                        \"Method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n                        \"Did you reference the function correctly?\",\n                        vm\n                    );\n                }\n\n                //判断key是否是改对象实例化的\n                //如果属性中定义了key，则在methods中不能定义同样的key\n                if (props && hasOwn(props, key)) {\n                    warn(\n                        (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n                        vm\n                    );\n                }\n                //isReserved 检查一个字符串是否以$或者_开头的字母\n                if ((key in vm) && isReserved(key)) { //事件不能以$或者_开头的字母\n                    warn(\n                        \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n                        \"Avoid defining component methods that start with _ or $.\"\n                    );\n                }\n            }\n            //把事件放在最外层对象中，如果是函数为空则给一个空函数，如果是有函数则执行改函数\n            vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n        }\n    }\n\n    //初始化Watch监听\n    function initWatch(vm, watch) {\n        //循环watch对象\n        for (var key in watch) {\n            var handler = watch[key]; //获取单个watch\n            //如果他是数组handler\n            if (Array.isArray(handler)) {\n                //循环数组 创建 监听\n                for (var i = 0; i < handler.length; i++) {\n                    createWatcher(\n                        vm, //vm 是 vue对象\n                        key, //key\n                        handler[i]//函数或者对象\n                    );\n                }\n            } else {\n                //循环数组 创建 监听\n                createWatcher(\n                    vm, // vm 是 vue对象\n                    key, //key\n                    handler //函数或者对象\n                );\n            }\n        }\n    }\n\n    // 转义handler 并且为数据 创建 Watcher 观察者\n    function createWatcher(vm,  //vm对象\n        expOrFn, // key 值 或者函数\n        handler, // 函数 或者 对象 或者key\n        options  // 参数\n    ) {\n        if (isPlainObject(handler)) {  //判断是否是对象\n            options = handler;\n            handler = handler.handler; //对象中的handler 一定是函数或者字符串\n        }\n        if (typeof handler === 'string') { //判断handler 是否是字符串 如果是 则是key\n            handler = vm[handler]; //取值 vm 就是Vue 最外层 中的函数\n        }\n        //转义handler 并且为数据 创建 Watcher 观察者\n        return vm.$watch(\n            expOrFn,// key 值 或者函数\n            handler, //函数\n            options //参数\n        )\n    }\n\n    //数据绑定，$watch方法\n    function stateMixin(Vue) {\n        // flow somehow has problems with directly declared definition object\n        //流在某种程度上与直接声明的定义对象有问题\n        // when using Object.defineProperty, so we have to procedurally build up\n        //在使用Object.defineProperty时，我们必须循序渐进地进行构建\n        // the object here. 这里的对象。\n        var dataDef = {};\n        //重新定义get 和set方法\n        dataDef.get = function () {\n            return this._data //获取data中的数据\n        };\n\n        var propsDef = {};\n        propsDef.get = function () {\n            return this._props// 获取props 数据\n        };\n\n        {\n            dataDef.set = function (newData) {\n                //避免替换实例根$data。 使用嵌套数据属性代替\n                warn(\n                    'Avoid replacing instance root $data. ' +\n                    'Use nested data properties instead.',\n                    this\n                );\n            };\n            propsDef.set = function () {\n                //props 只是可度的数据不可以设置更改\n                warn(\"$props is readonly.\", this);\n            };\n        }\n        console.log('==dataDef==')\n        console.log(dataDef)\n\n\n        Object.defineProperty(Vue.prototype, '$data', dataDef);\n        Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n        //添加多一个数组数据或者对象数据\n        Vue.prototype.$set = set;\n        //删除一个数组数据或者对象数据\n        Vue.prototype.$delete = del;\n\n        Vue.prototype.$watch = function (expOrFn, //用户手动监听\n            cb, // 监听 变化之后 回调函数\n            options //参数\n        ) {\n            var vm = this;\n            if (isPlainObject(cb)) { //判断是否是对象 如果是对象则递归 深层 监听 直到它不是一个对象的时候才会跳出递归\n                //    转义handler 并且为数据 创建 Watcher 观察者\n                return createWatcher(\n                    vm,\n                    expOrFn,\n                    cb,\n                    options\n                )\n            }\n            options = options || {};\n            options.user = true; //用户手动监听， 就是在 options 自定义的 watch\n            console.log(expOrFn)\n\n            //实例化Watcher 观察者\n            var watcher = new Watcher(\n                vm, //vm  vode\n                expOrFn,  //函数 手动\n                cb, //回调函数\n                options  //参数\n            );\n            if (options.immediate) {\n                //回调触发函数\n                cb.call(vm, watcher.value);\n            }\n            return function unwatchFn() { //卸载观察者\n                //从所有依赖项的订阅方列表中删除self。\n                watcher.teardown();\n            }\n        };\n    }\n\n    /*\n     provide 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性，用于组件之间通信。\n     *  */\n    function initProvide(vm) {\n        var provide = vm.$options.provide; //provide 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。\n        if (provide) {  //判断provide 存在么\n            vm._provided = typeof provide === 'function' //判断是否是函数如果是函数则执行\n                ? provide.call(vm)\n                : provide;\n        }\n    }\n\n    //初始化 inject\n    function initInjections(vm) {\n        //provide 和 inject 主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。\n        //这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。如果你熟悉 React，这与 React 的上下文特性很相似。\n        //更多详情信息https://cn.vuejs.org/v2/api/#provide-inject\n        var result = resolveInject(vm.$options.inject, vm);\n        if (result) {\n            toggleObserving(false);\n            Object.keys(result).forEach(function (key) { //注入的值不能修改，相当于props属性一样\n                /* istanbul ignore else */\n                {\n                    // 通过defineProperty的set方法去通知notify()订阅者subscribers有新的值修改\n                    //  * 添加观察者 get set方法\n                    defineReactive(\n                        vm,\n                        key,\n                        result[key],\n                        function () {\n                            warn(\n                                \"Avoid mutating an injected value directly since the changes will be \" +\n                                \"overwritten whenever the provided component re-renders. \" +\n                                \"injection being mutated: \\\"\" + key + \"\\\"\",\n                                vm\n                            );\n                        });\n                }\n            });\n            toggleObserving(true);\n        }\n    }\n\n    // inject 选项应该是一个字符串数组或一个对象，该对象的 key 代表了本地绑定的名称，value 为其 key (字符串或 Symbol) 以在可用的注入中搜索。\n    function resolveInject(inject, vm) {\n\n        if (inject) {\n            // inject is :any because flow is not smart enough to figure out cached\n            // inject是:any，因为flow不够智能，无法计算缓存\n            var result = Object.create(null);\n            var keys = hasSymbol ?  //判断是否支持Symbol 数据类型\n                Reflect.ownKeys(inject).filter(function (key) {\n                    //Object.getOwnPropertyDescriptor 查看描述对象 并且获取到enumerable 为true 的时候才会获取到该数组\n                    return Object.getOwnPropertyDescriptor(inject, key).enumerable\n                }) :\n                Object.keys(inject); //如果不支持hasSymbol 则降级用 Object.keys\n\n            // 将数组转化成对象 比如 [1,2,3]转化成\n            // * normalized[1]={from: 1}\n            for (var i = 0; i < keys.length; i++) { //循环key\n                var key = keys[i];  //获取单个key值\n                var provideKey = inject[key].from; //normalized[3]={from: 3} 获取key的值\n                var source = vm;\n                while (source) {\n                    if (source._provided && hasOwn(source._provided, provideKey)) { //判断_provided 存在么 并且是对象的时候，并且实例化属性provideKey 存在\n                        result[key] = source._provided[provideKey]; //获取值 存起来\n                        break\n                    }\n                    source = source.$parent; //循环父节点\n                }\n                if (!source) {  //如果vm 不存在\n                    if ('default' in inject[key]) { // 判断default key存在inject[key]中么\n                        var provideDefault = inject[key].default; //如果存在则获取默认default的值\n                        result[key] = typeof provideDefault === 'function' //如果是函数则执行\n                            ? provideDefault.call(vm)\n                            : provideDefault;\n                    } else {\n                        warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n                    }\n                }\n            }\n            return result\n        }\n    }\n\n    /*  */\n\n    /**\n     * Runtime helper for rendering v-for lists.\n     * 用于呈现v-for列表的运行时助手。\n     * 根据value 判断是数字，数组，对象，字符串，循环渲染\n     */\n    function renderList(val, //值\n        render //渲染函数\n    ) {\n        var ret, i, l, keys, key; //\n        if (\n            Array.isArray(val) ||  //如果是数组\n            typeof val === 'string' //或者字符串\n        ) {\n            ret = new Array(val.length); //获取长度\n            for (i = 0, l = val.length; i < l; i++) { //循环数组或者字符串\n                ret[i] = render(val[i], i);\n            }\n        } else if (typeof val === 'number') { //如果是数字\n            ret = new Array(val); //变成数组 获取长度\n            for (i = 0; i < val; i++) { //循环数字\n                ret[i] = render(i + 1, i);\n            }\n        } else if (isObject(val)) { //如果是对象\n            keys = Object.keys(val); //获取对象的key\n            ret = new Array(keys.length); //获取数组长度\n            for (i = 0, l = keys.length; i < l; i++) {\n                key = keys[i];\n                ret[i] = render(val[key], key, i);\n            }\n        }\n        if (isDef(ret)) { //判断是否定义有ret\n            (ret)._isVList = true;  //标志是否定义有ret\n        }\n        //返回一个空数组对象\n        return ret\n    }\n\n    /*  */\n\n    /**\n     * Runtime helper for rendering <slot>\n     * 用于呈现<slot>的运行时帮助程序\n     */\n    function renderSlot(name, //子组件中slot的name，匿名default\n        fallback, //子组件插槽中默认内容VNode数组，如果没有插槽内容，则显示该内容\n        props, //子组件传递到插槽的props\n        bindObject // 针对<slot v-bind=\"obj\"></slot> obj必须是一个对象\n    ) {\n        var scopedSlotFn = this.$scopedSlots[name];  // 判断父组件是否传递作用域插槽\n        var nodes; //虚拟dom\n        if (scopedSlotFn) { // scoped slot\n            props = props || {};\n            if (bindObject) { //bindObject 必须是一个对象\n                if (\"development\" !== 'production' && !isObject(bindObject)) {\n                    warn(\n                        'slot v-bind without argument expects an Object',\n                        this\n                    );\n                }\n                //合并对象和props属性\n                props = extend(extend({}, bindObject), props);\n            }\n            // 传入props生成相应的VNode\n            nodes = scopedSlotFn(props) || fallback;\n        } else {\n            // 如果父组件没有传递作用域插槽\n            var slotNodes = this.$slots[name]; //所以在插槽 嵌入引入插槽时候不能命名一样\n            // warn duplicate slot usage 警告重复槽的使用\n            if (slotNodes) {\n                if (\"development\" !== 'production' && slotNodes._rendered) {\n                    warn(\n                        \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n                        \"- this will likely cause render errors.\",\n                        this\n                    );\n                }\n                // 设置父组件传递插槽的VNode._rendered，用于后面判断是否有重名slot\n                slotNodes._rendered = true;\n            }\n            nodes = slotNodes || fallback;\n        }\n\n        // 如果还需要向子组件的子组件传递slot\n        /*举个栗子：\n         * Bar组件: <p class=\"bar\"><slot name=\"foo\"/></p>\n         * Foo组件：<p class=\"foo\"><bar><slot slot=\"foo\"/></bar></p>\n         * main组件：<p><foo>hello</foo></p>\n         *\n         * 最终渲染：<p class=\"foo\"><p class=\"bar\">hello</p></p>\n         */\n\n\n        var target = props && props.slot; //如果props属性存在并且属性的插槽存在props.slot\n        if (target) {\n            //创建模板 创建dom节点 虚拟dom需要渲染的数据结构\n            return this.$createElement('template', { slot: target }, nodes)\n        } else {\n            return nodes\n        }\n    }\n\n    /*  */\n\n    /**\n     * Runtime helper for resolving filters\n     * 用于解析过滤器的运行时助手\n     * 返回注册指令或者组建的对象\n     *  检测指令是否在 组件对象上面 包括\n     *\n     */\n    function resolveFilter(id) {\n        return resolveAsset(this.$options, 'filters', id, true) || identity\n    }\n\n    /*\n     * 检查key是否匹配\n     * 如果没有匹配上的就返回true\n     */\n    function isKeyNotMatch(expect, actual) {\n        if (Array.isArray(expect)) { //检查expect 是否是数组\n            return expect.indexOf(actual) === -1 //检查数组中是否含有actual\n        } else {\n            return expect !== actual\n        }\n    }\n\n    /**\n     * Runtime helper for checking keyCodes from config. 用于从配置中检查密钥代码的运行时帮助程序。\n     * exposed as Vue.prototype._k 暴露为Vue.prototype._k\n     * passing in eventKeyName as last argument separately for backwards compat   为向后compat分别传入eventKeyName作为最后一个参数\n     检查两个key是否相等，如果不想等返回true 如果相等返回false\n     */\n    function checkKeyCodes(eventKeyCode, //事件key\n        key, //键\n        builtInKeyCode, //内建键码\n        eventKeyName, //事件键名\n        builtInKeyName //内建键名\n    ) {\n        var mappedKeyCode = config.keyCodes[key] || builtInKeyCode; //映射的关键代码\n        if (\n            builtInKeyName &&\n            eventKeyName && !config.keyCodes[key]\n        ) {\n            //比较两个key是否相等\n            return isKeyNotMatch(builtInKeyName, eventKeyName)\n        } else if (mappedKeyCode) {\n            //比较两个key是否相等\n            return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n        } else if (eventKeyName) {\n            //把驼峰的key 转换成 -链接  判断 key 不一样\n            return hyphenate(eventKeyName) !== key\n        }\n    }\n\n    /*  */\n\n    /**\n     * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n     * 用于将v-bind=\"object\"合并到VNode的数据中的运行时助手。\n     * 检查value 是否是对象，并且为value 添加update 事件\n     */\n    function bindObjectProps(data, //数据\n        tag, //vonde 节点\n        value, //value值\n        asProp, //prosp属性\n        isSync) { //是否 同步\n        if (value) {\n            if (!isObject(value)) { //判断绑定值如果不是对象\n                \"development\" !== 'production' && warn(\n                    'v-bind without argument expects an Object or Array value',\n                    this\n                );\n            } else {\n                if (Array.isArray(value)) { //判断值如果是数组\n                    value = toObject(value);  //转成对象\n                }\n                var hash;\n                var loop = function (key) {\n                    if (\n                        key === 'class' || //如果key 是class\n                        key === 'style' || //获取是style\n                        isReservedAttribute(key) //或者是'key,ref,slot,slot-scope,is'\n                    ) {\n                        hash = data;\n                    } else {\n                        var type = data.attrs && data.attrs.type; //如果含有其他属性 或者 tyep\n\n                        /* mustUseProp\n                         * 1. attr === 'value', tag 必须是 'input,textarea,option,select,progress' 其中一个 type !== 'button'\n                         * 2. attr === 'selected' && tag === 'option'\n                         * 3. attr === 'checked' && tag === 'input'\n                         * 4. attr === 'muted' && tag === 'video'\n                         * 的情况下为真\n                         * */\n\n                        hash = asProp || config.mustUseProp(tag, type, key) ?\n                            data.domProps || (data.domProps = {}) :\n                            data.attrs || (data.attrs = {});\n                    }\n                    if (!(key in hash)) { //如果数据和属性都没有这个key的时候，判断他应该是事件\n                        hash[key] = value[key];\n                        if (isSync) { //判断是否是同步\n                            var on = data.on || (data.on = {});\n                            on[(\"update:\" + key)] = function ($event) { //更新数据事件\n                                value[key] = $event;\n                            };\n                        }\n                    }\n                };\n                //循环 value中的所有key\n                for (var key in value) {\n                    loop(key)\n                }\n                ;\n            }\n        }\n        return data\n    }\n\n    /*  */\n\n    /**\n     * Runtime helper for rendering static trees.\n     * 用于呈现静态树的运行时助手。\n     */\n    function renderStatic(index, //索引\n        isInFor //是否是for指令\n    ) {\n        var cached = this._staticTrees || (this._staticTrees = []); //静态数\n        var tree = cached[index]; //获取单个数\n        // if has already-rendered static tree and not inside v-for, 如果已经渲染的静态树不在v-for中，\n        // we can reuse the same tree. 我们可以重用相同的树。\n        if (tree && !isInFor) {\n            return tree\n        }\n        // otherwise, render a fresh tree. 否则，渲染一个新的树。\n        tree = cached[index] = this.$options.staticRenderFns[index].call(\n            this._renderProxy,\n            null,\n            this // for render fns generated for functional component templates 用于为功能组件模板生成的呈现fns\n        );\n        //循环标志静态的vonde 虚拟dom\n        markStatic(tree, (\"__static__\" + index), false);\n        return tree\n    }\n\n    /**\n     * Runtime helper for v-once. v的运行时助手。\n     * Effectively it means marking the node as static with a unique key.\n     * 实际上，这意味着使用唯一键将节点标记为静态。\n     * 标志 v-once. 指令\n     */\n    function markOnce(tree,\n        index,\n        key) {\n        //循环标志静态的vonde 虚拟dom\n        markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n        return tree\n    }\n\n    //循环标志静态的vonde 虚拟dom\n    function markStatic(tree, //树\n        key, //key\n        isOnce //是否是v-once指令\n    ) {\n        if (Array.isArray(tree)) { //判断是否是数组\n            for (var i = 0; i < tree.length; i++) {\n                if (tree[i] && typeof tree[i] !== 'string') {\n                    //标志静态的vonde 虚拟dom\n                    markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n                }\n            }\n        } else {\n            //标志静态的vonde 虚拟dom\n            markStaticNode(tree, key, isOnce);\n        }\n    }\n\n    //标志静态的vonde 虚拟dom\n    function markStaticNode(node, key, isOnce) {\n        node.isStatic = true;\n        node.key = key;\n        node.isOnce = isOnce;\n    }\n\n    /*\n     *绑定对象监听器\n     * 判断value 是否是对象，并且为数据 data.on 合并data和value 的on\n     * */\n    function bindObjectListeners(data, value) {\n        if (value) {\n            if (!isPlainObject(value)) { //value 如果不是对象则发出警告日志\n                \"development\" !== 'production' && warn(\n                    'v-on without argument expects an Object value',\n                    this\n                );\n            } else {\n                var on = data.on = data.on ? extend({}, data.on) : {}; //获取事件\n                for (var key in value) { //遍历循环value 值\n                    var existing = on[key];  // 合并他们两事件\n                    var ours = value[key];\n                    on[key] = existing ? [].concat(existing, ours) : ours;\n                }\n            }\n        }\n        //返回合并过的数据\n        return data\n    }\n\n    /*\n     *\n     * 安装渲染助手\n     * */\n    function installRenderHelpers(target) {\n        target._o = markOnce; //实际上，这意味着使用唯一键将节点标记为静态。* 标志 v-once. 指令\n        target._n = toNumber; //字符串转数字，如果失败则返回字符串\n        target._s = toString; // 将对象或者其他基本数据 变成一个 字符串\n        target._l = renderList; //根据value 判断是数字，数组，对象，字符串，循环渲染\n        target._t = renderSlot; //用于呈现<slot>的运行时帮助程序 创建虚拟slot vonde\n        target._q = looseEqual; //检测a和b的数据类型，是否是不是数组或者对象，对象的key长度一样即可，数组长度一样即可\n        target._i = looseIndexOf; //或者 arr数组中的对象，或者对象数组 是否和val 相等\n        target._m = renderStatic;//用于呈现静态树的运行时助手。 创建静态虚拟vnode\n        target._f = resolveFilter; // 用于解析过滤器的运行时助手\n        target._k = checkKeyCodes; // 检查两个key是否相等，如果不想等返回true 如果相等返回false\n        target._b = bindObjectProps; //用于将v-bind=\"object\"合并到VNode的数据中的运行时助手。  检查value 是否是对象，并且为value 添加update 事件\n        target._v = createTextVNode; //创建一个文本节点 vonde\n        target._e = createEmptyVNode;  // 创建一个节点 为注释节点 空的vnode\n        target._u = resolveScopedSlots; //  解决范围槽 把对象数组事件分解成 对象\n        target._g = bindObjectListeners; //判断value 是否是对象，并且为数据 data.on 合并data和value 的on 事件\n    }\n\n    /*\n     *\n     *  添加虚拟dom 属性data，添加事件，添加props属性，添加parent 属性 添加injections属性\n     *  添加slots插槽渲染方法 重写 this._c   createElement 函数 渲染vonde\n     *  安渲染函数到FunctionalRenderContext.prototype原型中，这样该对象和 Vue有着同样的渲染功能\n     *  installRenderHelpers(FunctionalRenderContext.prototype)\n     *\n     * */\n    function FunctionalRenderContext(\n        data, // vonde 虚拟dom的属性数据\n        props,  //props 属性 包含值和key\n        children, //子节点\n        parent, //vm vue实例化，如果parent也组件 也可能是VueComponent 构造函数 实例化的对象\n        Ctor  //VueComponent 构造函数\n    ) {\n        console.log([\n            data, // vonde 虚拟dom的属性数据\n            props,  //props 属性\n            children, //子节点\n            parent, //vm\n            Ctor  //VueComponent 构造函数\n        ])\n\n        var options = Ctor.options;\n        // ensure the createElement function in functional components\n        // gets a unique context - this is necessary for correct named slot check\n        //确保函数组件中的createElement函数\n        // 获取唯一上下文——这对于正确的命名槽检查是必要的\n        var contextVm;\n        console.log(hasOwn(parent, '_uid'))\n        if (hasOwn(parent, '_uid')) { //判断这个组件是否是 new _init  过\n            contextVm = Object.create(parent); //创建一个对象\n            // $flow-disable-line  流禁用线\n            contextVm._original = parent;\n        } else {\n            // the context vm passed in is a functional context as well.\n            // in this case we want to make sure we are able to get a hold to the\n            // real context instance.\n            //传入的上下文vm也是一个功能上下文。\n            //在这种情况下，我们想确定一下我们能否得到\n            //真实的上下文实例。\n            contextVm = parent;\n            // $flow-disable-line\n            parent = parent._original;\n        }\n        var isCompiled = isTrue(options._compiled); // 判断是否是模板编译\n        var needNormalization = !isCompiled; //如果不是模板编译\n\n        // data, // vonde 虚拟dom的数据\n        //   props,  //props 属性\n        //   children, //子节点\n        //   parent, //vm\n        //   Ctor  //VueComponent 构造函数\n\n        this.data = data;     // vonde 虚拟dom的数据\n        this.props = props;  //  props 属性\n        this.children = children; //子节点\n        this.parent = parent; //vm\n        this.listeners = data.on || emptyObject; // 事件\n        // inject 选项应该是一个字符串数组或一个对象，该对象的 key 代表了本地绑定的名称，value 为其 key (字符串或 Symbol) 以在可用的注入中搜索。\n        this.injections = resolveInject(options.inject, parent);\n        this.slots = function () { //插槽\n            // 判断children 有没有分发式插槽 并且过滤掉空的插槽\n            return resolveSlots(children, parent);\n        };\n\n        // support for compiled functional template\n        //支持编译的函数模板\n        if (isCompiled) {\n            // exposing $options for renderStatic() 为renderStatic()公开$options\n            this.$options = options;\n            // pre-resolve slots for renderSlot() renderSlot()的预解析槽()\n            this.$slots = this.slots(); //收集插槽\n            // data.scopedSlots = {default: children[0]};  //获取插槽\n            this.$scopedSlots = data.scopedSlots || emptyObject;\n        }\n\n        if (options._scopeId) { //范围id\n            this._c = function (a, b, c, d) { //\n\n                //创建子节点 vonde\n                var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n\n                if (vnode && !Array.isArray(vnode)) {\n                    vnode.fnScopeId = options._scopeId;\n                    vnode.fnContext = parent;\n                }\n                return vnode\n            };\n        } else {\n\n            this._c = function (a, b, c, d) {\n\n                //创建子节点 vonde\n                return createElement(contextVm, a, b, c, d, needNormalization);\n            };\n        }\n    }\n\n    //安装渲染助手\n    installRenderHelpers(FunctionalRenderContext.prototype);\n\n    //创建功能组件 通过检测 props 属性 然后合并props   之后创建 vond 虚拟dom\n    function createFunctionalComponent(\n        Ctor, //组件构造函数VueComponent\n        propsData, //组件props数据\n        data,  //  组件属性 数据\n        contextVm, //vm  vue实例化对象\n        children //组件子节点\n    ) {\n        console.log('==Ctor==')\n        console.log(Ctor)\n        console.log('==propsData==')\n        console.log(propsData)\n        console.log('==data==')\n        console.log(data)\n        console.log('==contextVm==')\n        console.log(contextVm)\n        console.log('==children==')\n        console.log(children)\n\n\n\n        var options = Ctor.options; //获取拓展参数\n        var props = {};\n        var propOptions = options.props; //获取props 参数 就是组建 定义的props 类型数据\n        console.log('==options.props==')\n        console.log(options.props)\n\n        if (isDef(propOptions)) { //如果定义了props 参数\n            for (var key in propOptions) { //循环 propOptions 参数\n\n                /*\n                    验证支柱  验证 prosp 是否是规范数据 并且为props 添加 value.__ob__  属性，把prosp添加到观察者中\n                     *  校验 props 参数 就是组建 定义的props 类型数据，校验类型\n                     *\n                     * 判断prop.type的类型是不是Boolean或者String，如果不是他们两类型，调用getPropDefaultValue获取默认值并且把value添加到观察者模式中\n                     */\n                props[key] = validateProp(\n                    key,  //key\n                    propOptions, //原始props 参数\n                    propsData || emptyObject  // 转义过的组件props数据\n                );\n            }\n        } else {\n            if (isDef(data.attrs)) {  //如果定义有属性\n                // 前拷贝合并 props属性 并且把 from 的key 由 - 写法变成 驼峰的写法。\n                mergeProps(props, data.attrs); //合并props 和 属性\n            }\n            if (isDef(data.props)) { //如果data定义有props 合并props\n                mergeProps(props, data.props);\n            }\n        }\n        //  Ctor,\n        // propsData, //组件props数据\n        // data,  // vonde 虚拟dom的数据\n        // contextVm, //上下文this Vm\n        // children //子节点\n        console.log(Ctor)\n        // Ctor = function VueComponent(options) {\n        //     this._init(options);\n        // }\n        //\n        //返回\n        var renderContext = new FunctionalRenderContext(  //实例化一个对象\n            data,// vonde 虚拟dom的数据\n            props, //props 属性\n            children, //子节点\n            contextVm, //vm\n            Ctor  //VueComponent 构造函数\n        );\n\n        // children : undefined\n        // data : Object\n        // injections :  undefined\n        // listeners  : Object\n        // parent :  Vue\n        // props :  Object\n        // slots : function ()\n        // _c: function (a, b, c, d)\n        // __proto__:  Object\n        console.log('==renderContext==')\n        console.log(renderContext)\n\n        //创建 vnode\n        var vnode = options.render.call(null, renderContext._c, renderContext);\n\n        if (vnode instanceof VNode) { //如果 vnode 的构造函数是VNode\n\n            //克隆并标记函数结果\n            return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options)\n        } else if (Array.isArray(vnode)) { //如果vnode 是数组\n\n            //normalizeArrayChildren 创建一个规范的子节点 vonde\n            var vnodes = normalizeChildren(vnode) || [];\n            var res = new Array(vnodes.length); // 创建一个空数组\n            for (var i = 0; i < vnodes.length; i++) {\n                //克隆并标记函数结果 静态 节点\n                res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);\n            }\n            return res\n        }\n    }\n\n    //克隆并标记函数结果 静态 节点\n    function cloneAndMarkFunctionalResult(vnode,   //vnode 虚拟dom\n        data,  //虚拟dom 数据\n        contextVm, //vm this\n        options // options 拓展函数\n    ) {\n        // #7817 clone node before setting fnContext, otherwise if the node is reused\n        // (e.g. it was from a cached normal slot) the fnContext causes named slots\n        // that should not be matched to match.\n        // #7817在设置fnContext之前克隆节点，否则如果节点被重用\n        //(例如，它来自一个缓存的正常槽)fnContext导致命名槽\n        //这是不应该匹配的。\n        //克隆节点  把节点变成静态节点\n        var clone = cloneVNode(vnode);\n        clone.fnContext = contextVm;\n        clone.fnOptions = options;\n        if (data.slot) { //判断是否有插槽\n            (clone.data || (clone.data = {})).slot = data.slot;\n        }\n        return clone\n    }\n\n    // 前拷贝合并 props属性 并且把 from 的key 由 - 写法变成 驼峰的写法。\n    function mergeProps(to, from) {\n        for (var key in from) {\n            to[camelize(key)] = from[key];\n        }\n    }\n\n    /*  */\n\n\n    // Register the component hook to weex native render engine.\n    // The hook will be triggered by native, not javascript.\n\n\n    // Updates the state of the component to weex native render engine.\n\n    /*  */\n\n    // https://github.com/Hanks10100/weex-native-directive/tree/master/component\n\n    // listening on native callback\n\n    /*  */\n\n    /*  */\n\n    // inline hooks to be invoked on component VNodes during patch\n    //补丁期间在组件vnode上调用的内联钩子\n    var componentVNodeHooks = {  //组件钩子函数\n        init: function init(    //初始化组件函数\n            vnode, //vonde虚拟dom\n            hydrating, //新的虚拟dom vonde\n            parentElm,  //父亲 dom\n            refElm\n        ) {  //当前elm dom\n\n\n            //根据Vnode生成VueComponent实例\n            if (\n                vnode.componentInstance &&  //已经实例过的组件就只更新\n                !vnode.componentInstance._isDestroyed && //并且没有销毁\n                vnode.data.keepAlive //并且是keepAlive 组件\n            ) {\n\n\n                // kept-alive components, treat as a patch\n                // kept-alive组件，当作补丁\n                // work around flow 围绕流程工作\n                var mountedNode = vnode;\n                //触发更新虚拟比较\n\n                componentVNodeHooks.prepatch(mountedNode, mountedNode);\n            } else {\n\n                // 调用VueComponent构造函数去实例化组件对象\n                var child = vnode.componentInstance = createComponentInstanceForVnode(\n                    vnode, //虚拟dom vonde\n                    activeInstance, //活动实例 vue 实例化的对象\n                    parentElm, //父dom el\n                    refElm //当前dom el\n                );\n                //实例方法挂载 vm\n                child.$mount(\n                    hydrating ? vnode.elm : undefined,\n                    hydrating //新的虚拟dom vonde\n                );\n            }\n        },\n\n        prepatch: function prepatch(\n            oldVnode,  //旧的\n            vnode) {  //比较新旧的虚拟dom 更新组件数据\n\n\n            var options = vnode.componentOptions; //组件的参数\n            var child = vnode.componentInstance = oldVnode.componentInstance; //组件实例\n            updateChildComponent( //更新子组建\n                child, //子节点\n                options.propsData, // updated props 组件属性。属性数据\n                options.listeners, // updated listeners 属性事件\n                vnode, // new parent vnode 新的vond 虚拟dom\n                options.children // new children 新的子节点 虚拟dom\n            );\n        },\n\n        insert: function insert(vnode) { //安装插入\n            var context = vnode.context; //vm vue 实例化对象或者是VueComponent 构造函数实例化对象\n            var componentInstance = vnode.componentInstance; //组件实例化对象\n            if (!componentInstance._isMounted) { //\n                componentInstance._isMounted = true;\n                callHook(\n                    componentInstance,\n                    'mounted' //触发mounted钩子函数\n                ); //\n            }\n            //如果有keepAlive 组件才触发下面\n            if (vnode.data.keepAlive) {\n                if (context._isMounted) {\n                    // vue-router#1212\n                    // During updates, a kept-alive component's child components may\n                    // change, so directly walking the tree here may call activated hooks\n                    // on incorrect children. Instead we push them into a queue which will\n                    // be processed after the whole patch process ended.\n                    // vue-router # 1212\n                    //在更新期间，kept-alive组件的子组件可以\n                    //改变，所以直接在树中行走可能会调用激活钩子\n                    //关于不正确的孩子。相反，我们把它们推到一个队列中\n                    //在整个补丁过程结束后处理。\n                    //添加活跃的组件函数 把活跃的vm添加到activatedChildren 中\n                    queueActivatedComponent(componentInstance);\n                } else {\n                    //判断是否有不活跃的组件 禁用他 如果有活跃组件则触发钩子函数activated\n                    activateChildComponent(componentInstance, true /* direct */);\n                }\n            }\n        },\n        //销毁钩子函数\n        destroy: function destroy(vnode) {\n            var componentInstance = vnode.componentInstance; //组件实例化\n            if (!componentInstance._isDestroyed) {\n                if (!vnode.data.keepAlive) { //如果组件不是keepAlive 则销毁掉\n                    // 销毁不是keepAlive 的组件 改组件是虚拟组件 用于 缓存单页 返回上一页数据\n                    componentInstance.$destroy();\n                } else {\n                    //keepAlive组件则走这里\n                    // 循环子组件 和父组件  判断是否有禁止的组件 如果有活跃组件则执行生命后期函数deactivated\n                    deactivateChildComponent(componentInstance, true /* direct */);\n                }\n            }\n        }\n    };\n\n    //获取对象的key值并且以数组形式封装\n    var hooksToMerge = Object.keys(componentVNodeHooks);\n\n    //创建组件\n    function createComponent(\n        Ctor, //VueComponen函数\n        data, // 组件标签上面的属性数据\n        context, //vm Vue 实例化之后的对象上下文\n        children, //子节点\n        tag) {  //标签\n\n\n\n        if (isUndef(Ctor)) {\n            return\n        }\n        //vue\n        //用来标识扩展所有普通对象的“基”构造函数\n        // Weex的多实例场景中的组件。\n        var baseCtor = context.$options._base;  //基本的Vue 静态类\n\n        // plain options object: turn it into a constructor\n        //普通选项对象:将其转换为构造函数  _base vue 的 构造函数\n        if (isObject(Ctor)) {\n            Ctor = baseCtor.extend(Ctor);\n        }\n\n        // if at this stage it's not a constructor or an async component factory,\n        //如果在这个阶段它不是构造函数或异步组件工厂，\n        // reject.\n        if (typeof Ctor !== 'function') { //如果不是函数则发出警告\n            {\n                warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n            }\n            return\n        }\n        console.log(Ctor)\n        console.log(baseCtor)\n        console.log(context)\n\n\n        // async component\n        //异步组件\n        var asyncFactory;\n        // Vue.cid = 0;\n\n\n        if (isUndef(Ctor.cid)) { //组件的id 唯一标识符\n\n            asyncFactory = Ctor; //\n            // 解决异步组件 更新组建数据\n            Ctor = resolveAsyncComponent(  //返回组件现在的状态\n                asyncFactory, //新的\n                baseCtor, //基本的Vue 静态类\n                context //当前已经实例化的vm对象\n            );\n\n            if (Ctor === undefined) {\n                // return a placeholder node for async component, which is rendered\n                // as a comment node but preserves all the raw information for the node.\n                // the information will be used for async server-rendering and hydration.\n\n                //为已呈现的异步组件返回占位符节点\n                //作为注释节点，但保留该节点的所有原始信息。\n                //这些信息将用于异步服务器呈现和水合作用。\n\n                //      factory, //工厂\n                //     data,  //数据\n                //     context, //语境\n                //     children, //子节点\n                //     tag) {  //标签\n\n                return createAsyncPlaceholder(\n                    asyncFactory, //VueComponent  构造函数\n                    data,  //组件tag的属性数据\n                    context, //Vue 实例化对象\n                    children, //子节点\n                    tag  //组件标签\n                )\n            }\n        }\n\n        data = data || {};\n        console.log(Ctor)\n\n\n        // resolve constructor options in case global mixins are applied after\n        // component constructor creation\n        //解析构造函数选项，以防在后面应用全局mixin\n        //组件构造函数创建\n        //解决构造函数的选择 options 参数，合并，过滤重复 options参数\n        resolveConstructorOptions(Ctor);\n\n        // transform component v-model data into props & events\n        //将组件转换   v-model data into props & events\n        //转换v-model 并且 绑定事件\n        if (isDef(data.model)) {  //如果定义有 model 转义 model 并且绑定 v-model\n            transformModel(Ctor.options, data);\n        }\n        console.log(data)\n        console.log(Ctor)\n        console.log(tag)\n\n\n        // extract props  从…提取，文件的摘录 extractPropsFromVNodeData 从 props属性中获取vnode数据\n        var propsData = extractPropsFromVNodeData(\n            data, //tag标签属性数据\n            Ctor, //组件构造函数VueComponent\n            tag //tag标签名称\n        );\n\n        // functional component 功能组成部分，功能部件\n        if (isTrue(Ctor.options.functional)) { //为真\n            return createFunctionalComponent(\n                Ctor,  //组件构造函数VueComponent\n                propsData, //组件props 数据\n                data,  //组件属性 数据\n                context,  //vm  vue实例化对象\n                children //组件子节点\n            )\n        }\n\n        // extract listeners, since these needs to be treated as\n        // child component listeners instead of DOM listeners\n        //提取监听器，因为这些监听器需要被当作\n        //子组件监听器而不是DOM监听器\n        var listeners = data.on;  //事件\n        // replace with listeners with .native modifier\n        // so it gets processed during parent component patch.\n        //用.native修饰符替换监听器\n        //因此它在父组件补丁中被处理\n        data.on = data.nativeOn;\n        //你可能有很多次想要在一个组件的根元素上直接监听一个原生事件。这时，你可以使用 v-on 的 .native 修饰符：\n        // <base-input v-on:focus.native=\"onFocus\"></base-input>\n\n        if (isTrue(Ctor.options.abstract)) {  //静态\n            // abstract components do not keep anything\n            // other than props & listeners & slot\n            // work around flow\n            //抽象组件不保存任何东西\n            //除了道具、监听器和插槽\n            //围绕流程工作\n            var slot = data.slot; //插槽\n            data = {};\n            if (slot) {\n                data.slot = slot;\n            }\n        }\n\n        // install component management hooks onto the placeholder node\n        //将组件管理钩子安装到占位符节点上\n        console.log(data);\n\n        installComponentHooks(data);\n\n        // return a placeholder vnode\n        var name = Ctor.options.name || tag;\n\n\n\n        console.log((\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')))\n        console.log(data)\n        console.log(context)\n        console.log({ Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children })\n        console.log(asyncFactory)\n\n        // 创建虚拟dom\n        var vnode = new VNode(\n            (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n            data,  // 标签 属性数据\n            undefined,//子节点\n            undefined,//文本\n            undefined,/*当前节点的dom */\n            context, //vm vue实例化对象或者父组件。\n            { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }, //当前组件 构造函数propsData属性  事件，tag标签， 子节点\n            asyncFactory\n        );\n\n\n        // Weex specific: invoke recycle-list optimized @render function for\n        // extracting cell-slot template.\n        // https://github.com/Hanks10100/weex-native-directive/tree/master/component\n        /* istanbul ignore if */\n        console.log('===vnode===')\n        console.log(vnode)\n        return vnode\n    }\n\n    //调用VueComponent构造函数去实例化组件对象\n    function createComponentInstanceForVnode(\n        vnode, // we know it's MountedComponentVNode but flow doesn't //我们知道它是MountedComponentVNode，但flow不是\n        parent, // activeInstance in lifecycle state 处于生命周期状态的activeInstance\n        parentElm, // 父亲dom\n        refElm //当前的dom\n    ) {\n        var options = {\n            _isComponent: true, //是否是组件\n            parent: parent, //组件的父节点\n            _parentVnode: vnode, //组件的 虚拟vonde 父节点\n            _parentElm: parentElm || null, //父节点的dom el\n            _refElm: refElm || null //当前节点 el\n        };\n        // check inline-template render functions  检查内联模板渲染函数\n        var inlineTemplate = vnode.data.inlineTemplate; //内联模板\n        if (isDef(inlineTemplate)) { //是否有内联模板\n            options.render = inlineTemplate.render; //如果有内联模板 获取内联模板的渲染函数\n            options.staticRenderFns = inlineTemplate.staticRenderFns; //获取静态渲染函数\n        }\n        return new vnode.componentOptions.Ctor(options) //实例化 VueComponent 构造函数\n    }\n\n    //安装组件钩子函数\n    function installComponentHooks(\n        data //vonde 虚拟dom\n    ) {\n\n        //安装组件钩子函数\n        var hooks = data.hook || (data.hook = {});\n        for (var i = 0; i < hooksToMerge.length; i++) {\n            var key = hooksToMerge[i];\n            hooks[key] = componentVNodeHooks[key]; //组建钩子函数\n        }\n        console.log('==hooks==')\n        console.log(hooks)\n\n    }\n\n    // transform component v-model info (value and callback) into\n    // prop and event handler respectively.\n    //将组件v-model信息(值和回调)转换为\n    //分别是prop和event handler。\n\n    //将标签含有v-model 信息属性转换为\n    //获取options.model.prop属性  获取options.model.event 事件类型，\n    // 把data.model.value 数据赋值到data.props.value中 如果value的key没有定义 则是input\n    // 把事件  data.model.callback 添加到 data.on[event] 中  如果没有定义是input\n    function transformModel(options, data) {\n        //获取prop 如果获取不到 则取值 value\n        var prop = (options.model && options.model.prop) || 'value';\n\n        //获取event如果获取不到 则取值 input\n        var event = (options.model && options.model.event) || 'input';\n\n        //把data.model.value的值赋值到data.props.value 中\n        (data.props || (data.props = {}))[prop] = data.model.value;\n        var on = data.on || (data.on = {});\n        if (isDef(on[event])) {  //如果model 事件已经定义了则是和钩子函数合并\n            on[event] = [data.model.callback].concat(on[event]);\n        } else {\n            on[event] = data.model.callback;  //只赋值钩子函数\n        }\n    }\n\n    /*  */\n\n    var SIMPLE_NORMALIZE = 1;\n    var ALWAYS_NORMALIZE = 2;\n\n    // wrapper function for providing a more flexible interface 包装器功能，提供更灵活的接口\n    // without getting yelled at by flow 而不是被心流狂吼\n\n    //创建dom节点\n    function createElement(\n        context, //vm new Vue 实例化的对象\n        tag, //标签标签名称\n        data, //标签数据，包括属性，class style 指令等\n        children, //子节点\n        normalizationType,//应该设置为常量ALWAYS_NORMALIZE的值\n        alwaysNormalize //布尔值 是否是真的是true\n\n    ) {\n        console.log(data)\n\n        //如果数据是数组  或者是  //判断数据类型是否是string，number，symbol，boolean\n        if (Array.isArray(data) || isPrimitive(data)) {\n            normalizationType = children;\n            children = data;\n            data = undefined;\n        }\n        //如果是真的是  true\n        if (isTrue(alwaysNormalize)) {\n            normalizationType = ALWAYS_NORMALIZE; //type等于2\n        }\n        //创建节点\n        return _createElement(\n            context, //vm new Vue 实例化的对象\n            tag,//节点标签\n            data, //标签数据，包括属性，class style 指令等\n            children, //子节点\n            normalizationType\n        )\n    }\n\n    //创建虚拟dom节点\n    function _createElement(context,  //vm vue实例化的对象\n        tag,  //节点\n        data,  //标签数据，包括属性，class style 指令等\n        children, //子节点\n        normalizationType // 1或者2\n    ) {\n        /**\n         *  如果存在data.__ob__，\n         * 说明data是被Observer观察的数据\n         * 不能用作虚拟节点的data\n         * 需要抛出警告，\n         * 并返回一个空节点\n         * 被监控的data不能被用作vnode渲染的数据的原因是：data在vnode渲染过程中可能会被改变，\n         * 这样会触发监控，\n         * 导致不符合预期的操作\n         * */\n        if (isDef(data) && isDef((data).__ob__)) {\n            \"development\" !== 'production' && warn(\n                \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n                'Always create fresh vnode data objects in each render!',\n                context\n            );\n            //创建一个空的节点\n            return createEmptyVNode()\n        }\n        // object syntax in v-bind\n        // v-bind中的对象语法\n        //如果定义有数据并且数据中的is也定义了\n        if (isDef(data) && isDef(data.is)) {\n            tag = data.is; //tag等于is\n        }\n        //如果tag不存在\n        // 当组件的is属性被设置为一个falsy的值\n        // Vue将不会知道要把这个组件渲染成什么\n        // 所以渲染一个空节点\n        if (!tag) {\n            // in case of component :is set to falsy value\n            //组件的情况:设置为falsy值 创建一个空节点\n            return createEmptyVNode()\n        }\n        // warn against non-primitive key\n        //警告非原始键\n        if (\"development\" !== 'production' &&\n            isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n        ) {\n            {\n                warn(\n                    'Avoid using non-primitive value as key, ' +\n                    'use string/number value instead.',\n                    context\n                );\n            }\n        }\n        // support single function children as default scoped slot\n        //支持作为默认作用域插槽的单函数子函数\n        if (\n            Array.isArray(children) &&  //如果子节点是数组\n            typeof children[0] === 'function' //并且第一个子节点类型是函数\n        ) {\n            data = data || {};\n            data.scopedSlots = { default: children[0] };  //获取插槽\n            children.length = 0;\n        }\n        // 根据normalizationType的值，选择不同的处理方法\n        if (normalizationType === ALWAYS_NORMALIZE) { //2\n\n\n\n            //创建一个规范的子节点\n            children = normalizeChildren(children);\n        } else if (normalizationType === SIMPLE_NORMALIZE) { //1\n            //把所有子节点的数组 子孙连接在一个数组。\n            children = simpleNormalizeChildren(children);\n        }\n\n        var vnode, ns;\n        if (typeof tag === 'string') { //类型是string\n            var Ctor;\n\n            //getTagNamespace  判断 tag 是否是svg或者math 标签\n            // 获取标签名的命名空间\n            ns = (context.$vnode && context.$vnode.ns) ||\n                config.getTagNamespace(tag); //判断 tag 是否是svg或者math 标签\n\n            //判断标签是不是html 原有的标签\n            if (config.isReservedTag(tag)) {\n                // platform built-in elements\n                //平台内置的元素\n                //创建一个vnode\n\n                // tag, /*当前节点的标签名*/\n                //     data, /*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/\n                //     children, //子节点\n                //     text, //文本\n                //     elm, /*当前节点的dom */\n                //     context, /*编译作用域*/\n                //     componentOptions, /*组件的option选项*/\n                //     asyncFactory/*异步工厂*/\n\n\n                vnode = new VNode(\n                    config.parsePlatformTagName(tag), //返回相同的值 。当前tag的标签名称\n                    data, //tag标签的属性数据\n                    children, //子节点\n                    undefined,  //文本\n                    undefined, //*当前节点的dom */\n                    context // vm vue实例化的对象\n                );\n                // 如果不是保留标签，那么我们将尝试从vm的components上查找是否有这个标签的定义\n            } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n                // component  如果有则创建一个组件\n                console.log('===Ctor===')\n                console.log(Ctor) //获取到 VueComponent 构造函数 sup类\n\n                //Ctor是VueComponent 组件构造函数\n                //创建一个组件  调用6000多行的createComponent\n                vnode = createComponent(\n                    Ctor,  //组件构造函数\n                    data, //组件虚拟dom数据\n                    context, //this上下文\n                    children,  //子节点\n                    tag //组件标签\n                );\n\n            } else {\n                // unknown or unlisted namespaced elements\n                // check at runtime because it may get assigned a namespace when its\n                // parent normalizes children\n                //创建标准的vue vnode // 兜底方案，正常创建一个vnode\n                vnode = new VNode(\n                    tag, //虚拟dom的标签\n                    data,  //虚拟dom的数据\n                    children,  //虚拟dom的子节点\n                    undefined,\n                    undefined,\n                    context\n                );\n            }\n        } else {\n            // 当tag不是字符串的时候，我们认为tag是组件的构造类 // 所以直接创建\n            // direct component options / constructor  直接组件选项/构造函数     //创建组件\n            vnode = createComponent(tag, data, context, children);\n        }\n        if (Array.isArray(vnode)) { //如果vnode 是数组\n            return vnode\n        } else if (isDef(vnode)) { //如果vnode 有定义\n            if (isDef(ns)) {//如果ns 有定义 标签名\n                // 如果有namespace，就应用下namespace，然后返回vnode\n                //检测 vnode中的tag === 'foreignObject' 是否相等。并且修改ns值与force 标志\n                applyNS(vnode, ns);\n            }\n            if (isDef(data)) {\n                //注册深绑定\n                registerDeepBindings(data);\n            }\n            return vnode\n        } else {\n            // 否则，返回一个空节点\n            return createEmptyVNode()\n        }\n    }\n\n    //检测 vnode中的tag === 'foreignObject' 是否相等。并且修改ns值与force 标志\n    function applyNS(\n        vnode, //虚拟dom\n        ns, // namespace 标签 应该是svg标签吧 不是很清楚\n        force\n    ) {\n        vnode.ns = ns; //\n        if (vnode.tag === 'foreignObject') { //svg标签\n            // use default namespace inside foreignObject //使用foreignObject中的默认名称空间\n            ns = undefined;\n            force = true;\n        }\n        if (isDef(vnode.children)) { //虚拟dom是否后子节点 递归循环\n            for (var i = 0, l = vnode.children.length; i < l; i++) {\n                var child = vnode.children[i];\n                if (isDef(child.tag) &&\n                    (\n                        isUndef(child.ns) || //子节点没有定义ns\n                        (isTrue(force) && child.tag !== 'svg') //force为真，子节点不为svg\n                    )\n                ) {\n                    applyNS(child, ns, force); //递归\n                }\n            }\n        }\n    }\n\n    // ref #5318\n    // necessary to ensure parent re-render when deep bindings like :style and\n    // :class are used on slot nodes\n    //裁判# 5318\n    //必须确保父元素在深度绑定时重新呈现，比如:style和\n    //类在槽节点上使\n    function registerDeepBindings(data) {\n        if (isObject(data.style)) { //\n            //为 seenObjects 深度收集val 中的key\n            traverse(data.style);\n        }\n        if (isObject(data.class)) {\n            //为 seenObjects 深度收集val 中的key\n            traverse(data.class);\n        }\n    }\n\n    /*\n     * 初始化渲染\n     *\n     */\n    function initRender(vm) {\n        //vm 是Vue 对象\n        vm._vnode = null; // the root of the child tree 上一个 vonde\n        vm._staticTrees = null; // v-once cached trees v-once缓存的树\n        var options = vm.$options; //获取参数\n        var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree 父树中的占位符节点\n        var renderContext = parentVnode && parentVnode.context; // this 上下文\n        //判断children 有没有分发式插槽 并且过滤掉空的插槽,并且收集插槽\n        vm.$slots = resolveSlots(options._renderChildren, renderContext);\n        vm.$scopedSlots = emptyObject;\n        // bind the createElement fn to this instance\n        // so that we get proper render context inside it.\n        // args order: tag, data, children, normalizationType, alwaysNormalize\n        // internal version is used by render functions compiled from templates\n        //将createElement fn绑定到这个实例\n        //这样我们就得到了合适的渲染上下文。\n        // args order: tag, data, children, normalizationType, alwaysNormalize\n        //内部版本由模板编译的呈现函数使用\n        //创建虚拟dom的数据结构\n        vm._c = function (a, b, c, d) {\n            console.log(a)\n            console.log(b)\n            console.log(c)\n            console.log(d)\n\n            return createElement(\n                vm, //vm  new Vue 实例化的对象\n                a, //有可能是vonde或者指令\n                b,\n                c,\n                d,\n                false\n            );\n        };\n        // normalization is always applied for the public version, used in\n        //的公共版本总是应用规范化\n        // user-written render functions.\n        //用户编写的渲染功能。\n        vm.$createElement = function (a, b, c, d) {\n\n            return createElement(vm, a, b, c, d, true);\n        };\n\n        // $attrs & $listeners are exposed for easier HOC creation.\n        // they need to be reactive so that HOCs using them are always updated\n        // $attrs和$listener将被公开，以便更容易地进行临时创建。\n        //它们需要是反应性的，以便使用它们的HOCs总是更新的\n        var parentData = parentVnode && parentVnode.data; //获取父vnode\n\n        /* istanbul ignore else */\n        {\n            // 通过defineProperty的set方法去通知notify()订阅者subscribers有新的值修改\n            defineReactive(\n                vm,\n                '$attrs',\n                parentData && parentData.attrs || emptyObject,\n                function () {\n                    !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n                },\n                true\n            );\n            // 通过defineProperty的set方法去通知notify()订阅者subscribers有新的值修改\n            defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {\n                !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n            }, true);\n        }\n    }\n\n    function renderMixin(Vue) {\n        // install runtime convenience helpers 安装运行时方便助手\n        // 安装渲染助手\n        installRenderHelpers(Vue.prototype);\n\n        Vue.prototype.$nextTick = function (fn) {\n            //为callbacks 收集队列cb 函数 并且根据 pending 状态是否要触发callbacks 队列函数\n            return nextTick(fn, this)\n        };\n        //渲染函数\n        Vue.prototype._render = function () {\n            var vm = this;\n            //获取vm参数\n            var ref = vm.$options;\n            /*\n             render 是  虚拟dom，需要执行的编译函数 类似于这样的函数\n             (function anonymous( ) {\n                   with(this){return _c('div',{attrs:{\"id\":\"app\"}},[_c('input',{directives:[{name:\"info\",rawName:\"v-info\"},{name:\"data\",rawName:\"v-data\"}],attrs:{\"type\":\"text\"}}),_v(\" \"),_m(0)])}\n             })\n             */\n            var render = ref.render;\n            var _parentVnode = ref._parentVnode;\n\n            // reset _rendered flag on slots for duplicate slot check\n            //重置槽上的_render标记，以检查重复槽\n            {\n                for (var key in vm.$slots) {\n                    // $flow-disable-line\n                    //标志位\n                    vm.$slots[key]._rendered = false;\n                }\n            }\n\n            if (_parentVnode) {  //判断是否有parentVnode\n                // data.scopedSlots = {default: children[0]};  //获取插槽\n                vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;\n            }\n\n            // set parent vnode. this allows render functions to have access\n            //设置父vnode。这允许呈现函数具有访问权限\n            // to the data on the placeholder node.\n            //到占位符节点上的数据。\n\n            //把父层的Vnode 赋值的到$vnode\n            vm.$vnode = _parentVnode;\n            // render self\n            var vnode;\n            try {\n                //创建一个空的组件\n                // vm.$options.render = createEmptyVNode;\n                //_renderProxy 代理拦截\n                /*\n                 render 是  虚拟dom，需要执行的编译函数 类似于这样的函数\n                 (function anonymous(\n                 ) {\n\n                      with(this){return _c('div',{attrs:{\"id\":\"app\"}},[_c('input',{directives:[{name:\"info\",rawName:\"v-info\"},{name:\"data\",rawName:\"v-data\"}],attrs:{\"type\":\"text\"}}),_v(\" \"),_m(0),_v(\" \"),_c('div',[_v(\"\\n        \"+_s(message)+\"\\n    \")])])}\n                 })\n                 */\n\n                vnode = render.call(\n                    vm._renderProxy, //this指向 其实就是vm\n                    vm.$createElement //这里虽然传参进去但是没有接收参数\n                );\n                console.log(vnode)\n\n\n            } catch (e) { //收集错误信息 并抛出\n                handleError(e, vm, \"render\");\n                // return error render result,\n                // or previous vnode to prevent render error causing blank component\n                //返回错误渲染结果，\n                //或以前的vnode，以防止渲染错误导致空白组件\n                /* istanbul ignore else */\n                {\n                    if (vm.$options.renderError) {\n                        try {\n                            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n                        } catch (e) {\n                            handleError(e, vm, \"renderError\");\n                            vnode = vm._vnode;\n                        }\n                    } else {\n                        vnode = vm._vnode;\n                    }\n                }\n            }\n            // return empty vnode in case the render function errored out 如果呈现函数出错，返回空的vnode\n            if (!(vnode instanceof VNode)) {\n                if (\"development\" !== 'production' && Array.isArray(vnode)) {\n                    warn(\n                        'Multiple root nodes returned from render function. Render function ' +\n                        'should return a single root node.',\n                        vm\n                    );\n                }\n                //创建一个节点 为注释节点 空的vnode\n                vnode = createEmptyVNode();\n            }\n            // set parent\n            vnode.parent = _parentVnode; //设置父vnode\n            return vnode\n        };\n    }\n\n    /*  */\n\n    var uid$3 = 0;\n    //初始化vue\n    function initMixin(Vue) {\n        Vue.prototype._init = function (options) { //初始化函数\n\n            var vm = this;\n            // a uid\n            vm._uid = uid$3++; //id\n\n            var startTag,  //开始标签\n                endTag;  //结束标签\n            /* istanbul ignore if */\n            //浏览器性能监控\n            if (\"development\" !== 'production' && config.performance && mark) {\n                startTag = \"vue-perf-start:\" + (vm._uid);\n                endTag = \"vue-perf-end:\" + (vm._uid);\n                mark(startTag);\n            }\n\n            // a flag to avoid this being observed 一个避免被观察到的标志\n            vm._isVue = true;\n            // merge options 合并选项 参数\n            if (options && options._isComponent) { //判断是否是组件\n                // optimize internal component instantiation\n                // since dynamic options merging is pretty slow, and none of the\n                // internal component options needs special treatment.\n                //优化内部组件实例化\n                //因为动态选项合并非常慢，没有一个是内部组件选项需要特殊处理。\n                //初始化内部组件\n                initInternalComponent(vm, options);\n            } else {\n                //合并参数 将两个对象合成一个对象 将父值对象和子值对象合并在一起，并且优先取值子值，如果没有则取子值\n                vm.$options = mergeOptions(\n                    resolveConstructorOptions(vm.constructor), //  //解析constructor上的options属性的\n                    options || {},\n                    vm\n                );\n            }\n            /* istanbul ignore else */\n            {\n                //初始化 代理 监听\n                initProxy(vm);\n            }\n\n            // expose real self 暴露真实的self\n            vm._self = vm;\n            initLifecycle(vm); //初始化生命周期 标志\n            initEvents(vm); //初始化事件\n            initRender(vm); // 初始化渲染\n            callHook(vm, 'beforeCreate'); //触发beforeCreate钩子函数\n            initInjections(vm); // resolve injections before data/props 在数据/道具之前解决注入问题 //初始化 inject\n            initState(vm);  //    //初始化状态\n            initProvide(vm); // resolve provide after data/props  解决后提供数据/道具  provide 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性，用于组件之间通信。\n            callHook(vm, 'created'); //触发created钩子函数\n\n            /* istanbul ignore if */\n            //浏览器 性能监听\n            if (\"development\" !== 'production' && config.performance && mark) {\n                vm._name = formatComponentName(vm, false);\n                mark(endTag);\n                measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n            }\n\n            if (vm.$options.el) {\n                // Vue 的$mount()为手动挂载，\n                // 在项目中可用于延时挂载（例如在挂载之前要进行一些其他操作、判断等），之后要手动挂载上。\n                // new Vue时，el和$mount并没有本质上的不同。\n                vm.$mount(vm.$options.el);\n            }\n        };\n\n    }\n\n    //初始化内部组件\n    function initInternalComponent(\n        vm,  //vue实例\n        options //选项参数\n    ) {\n        var opts = vm.$options = Object.create(vm.constructor.options); //vm的参数\n        // doing this because it's faster than dynamic enumeration. 这样做是因为它比动态枚举快。\n        // var options = {\n        //     _isComponent: true, //是否是组件\n        //     parent: parent, //组件的父节点\n        //     _parentVnode: vnode, //组件的 虚拟vonde 父节点\n        //     _parentElm: parentElm || null, //父节点的dom el\n        //     _refElm: refElm || null //当前节点 el\n        // }\n        var parentVnode = options._parentVnode;\n        opts.parent = options.parent; //组件的父节点\n        opts._parentVnode = parentVnode; //组件的 虚拟vonde 父节点\n        opts._parentElm = options._parentElm; //父节点的dom el\n        opts._refElm = options._refElm; //当前节点 el\n\n        var vnodeComponentOptions = parentVnode.componentOptions; //组件参数\n        opts.propsData = vnodeComponentOptions.propsData; //组件数据\n        opts._parentListeners = vnodeComponentOptions.listeners;//组件 事件\n        opts._renderChildren = vnodeComponentOptions.children;  //组件子节点\n        opts._componentTag = vnodeComponentOptions.tag; //组件的标签\n\n        if (options.render) { //渲染函数\n            opts.render = options.render; //渲染函数\n            opts.staticRenderFns = options.staticRenderFns; //静态渲染函数\n        }\n    }\n\n    //解析new Vue constructor上的options拓展参数属性的 合并 过滤去重数据\n    function resolveConstructorOptions(Ctor) {\n        var options = Ctor.options;\n        // 有super属性，说明Ctor是Vue.extend构建的子类 继承的子类\n        if (Ctor.super) { //超类\n            var superOptions = resolveConstructorOptions(Ctor.super); //回调超类 表示继承父类\n            var cachedSuperOptions = Ctor.superOptions; // Vue构造函数上的options,如directives,filters,....\n            if (superOptions !== cachedSuperOptions) { //判断如果 超类的options不等于子类的options 的时候\n                // super option changed,\n                // need to resolve new options.\n                //超级选项改变，\n                //需要解决新的选项。\n                Ctor.superOptions = superOptions; //让他的超类选项赋值Ctor.superOptions\n                // check if there are any late-modified/attached options (#4976) 检查是否有任何后期修改/附加选项(#4976)\n                // 解决修改选项 转义数据 合并 数据\n                var modifiedOptions = resolveModifiedOptions(Ctor);\n                // update base extend options 更新基本扩展选项\n                if (modifiedOptions) {\n                    //extendOptions合并拓展参数\n                    extend(Ctor.extendOptions, modifiedOptions);\n                }\n                // 优先取Ctor.extendOptions 将两个对象合成一个对象 将父值对象和子值对象合并在一起，并且优先取值子值，如果没有则取子值\n                options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n                if (options.name) { //如果参数含有name 组件name\n\n                    options.components[options.name] = Ctor;\n                }\n            }\n        }\n        return options //返回参数\n    }\n\n    //解决修改options 转义数据 合并 数据\n    function resolveModifiedOptions(Ctor) {\n        var modified;\n        var latest = Ctor.options; //获取选项\n        var extended = Ctor.extendOptions;  //获取拓展的选项\n        var sealed = Ctor.sealedOptions;  //获取子类选项\n        for (var key in latest) {  //遍历最新选项\n            if (latest[key] !== sealed[key]) {  //如果选项不等于子类选项\n                if (!modified) {\n                    modified = {};\n                }\n                //合并参数\n                modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n            }\n        }\n        //返回合并后的参数\n        return modified\n    }\n\n    //转换判断最新的选项是否是数组，如果是数组则将他们拓展和最新还有自选项 合并数组。如果是对象直接返回最新的对象\n    function dedupe(\n        latest,//最新的选项\n        extended, //拓展的选项\n        sealed  //获取子类选项\n    ) {\n        // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n        // between merges\n        //比较最新的和密封的，确保生命周期钩子不会重复\n        //之间的合并\n        if (Array.isArray(latest)) {  //如果是数组\n            var res = [];\n            sealed = Array.isArray(sealed) ? sealed : [sealed]; //对象转义数组\n            extended = Array.isArray(extended) ? extended : [extended];//对象转义数组\n            for (var i = 0; i < latest.length; i++) {\n                // push original options and not sealed options to exclude duplicated options\n                //推动原始选项和非密封选项排除重复的选项 过滤重复选项\n                if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n                    res.push(latest[i]);\n                }\n            }\n            //返回数组\n            return res\n        } else {\n            //返回对象\n            return latest\n        }\n    }\n\n    //vue 构造函数\n    function Vue(options) {\n        if (\"development\" !== 'production' && !(this instanceof Vue)\n        ) {\n            warn('Vue is a constructor and should be called with the `new` keyword');\n        }\n        this._init(options);\n    }\n\n    initMixin(Vue);    //初始化vue\n    stateMixin(Vue);  //数据绑定，$watch方法\n    eventsMixin(Vue);  // 初始化事件绑定方法\n    lifecycleMixin(Vue); // 初始化vue 更新 销毁 函数\n    renderMixin(Vue); //初始化vue 需要渲染的函数\n\n\n    /*  */\n    // 初始化vue 安装插件函数\n    function initUse(Vue) {\n        //安装 Vue.js 插件。\n        Vue.use = function (plugin) {\n            var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n            //\n            if (installedPlugins.indexOf(plugin) > -1) { //判断是否已经安装过插件了\n\n                return this\n            }\n\n            // additional parameters//额外的参数\n            var args = toArray(arguments, 1);  //变成真的数组\n            args.unshift(this); //在前面添加\n            if (typeof plugin.install === 'function') { //如果plugin.install 是个函数 则执行安装\n                plugin.install.apply(plugin, args);\n            } else if (typeof plugin === 'function') { //如果plugin 是个函数则安装\n                plugin.apply(null, args);\n            }\n            installedPlugins.push(plugin); // 将已经安装过的插件添加到队列去\n            return this\n        };\n    }\n\n    /*  */\n    //初始化vue mixin 函数\n    function initMixin$1(Vue) {\n        Vue.mixin = function (mixin) {\n            // 合并 对象\n            this.options = mergeOptions(this.options, mixin);\n            return this\n        };\n    }\n\n    /*  */\n    //初始化 vue extend 函数\n    function initExtend(Vue) {\n        /**\n         * Each instance constructor, including Vue, has a unique\n         * cid. This enables us to create wrapped \"child\n         * constructors\" for prototypal inheritance and cache them.\n         */\n        Vue.cid = 0;\n        var cid = 1;\n\n        /**\n         Vue.extend//使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。合并继承new 实例化中的拓展参数或者是用户直接使用Vue.extend 的拓展参数。把对象转义成组件构造函数。创建一个sub类 构造函数是VueComponent，合并options参数，把props属性和计算属性添加到观察者中。//如果组件含有名称 则 把这个对象存到 组件名称中, 在options拓展参数的原型中能获取到该数据Sub.options.components[name] = Sub 简称Ctor，返回该构造函数\n         */\n        Vue.extend = function (extendOptions) { //使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。\n\n            extendOptions = extendOptions || {};\n            var Super = this;\n            var SuperId = Super.cid;\n            var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {}); //组件构造函数\n            if (cachedCtors[SuperId]) { //父类 超类id\n                return cachedCtors[SuperId] //获取 超类\n            }\n            var name = extendOptions.name || Super.options.name; //获取组件的name\n            if (\"development\" !== 'production' && name) {\n                //  验证组件名称 必须是大小写，并且是-横杆\n                validateComponentName(name);\n            }\n            //实例化 组件 对象\n            var Sub = function VueComponent(options) {\n                console.log('==this._init')\n                console.log(this._init)\n\n                // vue中的_init 函数   Vue.prototype._init\n                this._init(options);\n            };\n            //创建一个对象 继承 超类的原型\n            Sub.prototype = Object.create(Super.prototype);\n            //让他的构造函数指向回来，防止继承扰乱。\n            Sub.prototype.constructor = Sub;\n            //id 加加。标志 不同的组件\n            Sub.cid = cid++;\n            //合并参数\n            Sub.options = mergeOptions(\n                Super.options,\n                extendOptions\n            );\n            //记录超类\n            Sub['super'] = Super;\n\n            // For props and computed properties, we define the proxy getters on\n            // the Vue instances at extension time, on the extended prototype. This\n            // avoids Object.defineProperty calls for each instance created.\n            //对于道具和计算属性，我们定义代理getter\n            //在扩展原型上的扩展时的Vue实例。这避免为创建的每个实例调用Object.defineProperty。\n            if (Sub.options.props) { //获取props属性 如果有\n                //初始化属性 并且把组件的属性 加入 观察者中\n                initProps$1(Sub);\n            }\n            if (Sub.options.computed) { //组件计算属性\n                //定义计算属性 并且 把属性的数据 添加到对象监听中\n                initComputed$1(Sub);\n            }\n\n            // allow further extension/mixin/plugin usage 允许进一步的扩展/混合/插件使用\n            Sub.extend = Super.extend;\n            Sub.mixin = Super.mixin;\n            Sub.use = Super.use;\n\n            // create asset registers, so extended classes\n            // can have their private assets too.\n            //创建资产注册，所以扩展类\n            //也可以拥有他们的私人资产。\n\n            // var ASSET_TYPES = [\n            //     'component',  //组建指令\n            //     'directive', //定义指令 指令\n            //     'filter'  //过滤器指令\n            // ];\n            ASSET_TYPES.forEach(function (type) {\n                Sub[type] = Super[type];\n            });\n            // enable recursive self-lookup 使递归self-lookup\n            if (name) { //如果组件含有名称 则 把这个对象存到 组件名称中, 在options拓展参数的原型中能获取到该数据\n                console.log(name)\n\n                Sub.options.components[name] = Sub;\n            }\n\n            // keep a reference to the super options at extension time.\n            // later at instantiation we can check if Super's options have\n            // been updated.\n            //在扩展时保留对超级选项的引用。\n            //稍后在实例化时，我们可以检查Super的选项是否具有\n            //更新。\n            Sub.superOptions = Super.options; //超类 父类的拓展参数\n            Sub.extendOptions = extendOptions; //子类拓参数\n            Sub.sealedOptions = extend({}, Sub.options); //合并\n\n            // cache constructor\n            cachedCtors[SuperId] = Sub; // 当前缓存的构造函数\n            console.log(cachedCtors)\n\n            return Sub\n        };\n    }\n\n\n    //初始化属性 并且把组件的属性 加入 观察者中\n    function initProps$1(Comp) {\n        var props = Comp.options.props; //组件属性\n        for (var key in props) { //\n            proxy(Comp.prototype, \"_props\", key);\n        }\n    }\n\n    //初始化 组件计算属性\n    function initComputed$1(Comp) {\n        var computed = Comp.options.computed;\n        for (var key in computed) {\n            //定义计算属性 并且 把属性的数据 添加到对象监听中\n            defineComputed(Comp.prototype, key, computed[key]);\n        }\n    }\n\n    /*\n     *  为vue 添加 静态方法component，directive，，filter\n     * */\n    function initAssetRegisters(Vue) {\n        /**\n         * Create asset registration methods.\n         *\n         *\n         *  // var ASSET_TYPES = [\n         //     'component',  //组建指令\n         //     'directive', //定义指令 指令\n         //     'filter'  //过滤器指令\n         // ];\n         *为vue 添加 静态方法component，directive，filter\n         *\n         */\n        ASSET_TYPES.forEach(function (type) {\n\n            Vue[type] = function (\n                id, //id\n                definition //new Vue拓展参数对象\n            ) {\n                console.log(definition)\n\n\n                if (!definition) {  //如果definition不存在\n                    return this.options[type + 's'][id] //返回\n                } else {\n                    /* istanbul ignore if */\n                    if (\"development\" !== 'production' && type === 'component') {\n                        // 验证组件名称 必须是大小写，并且是-横杆\n                        validateComponentName(id);\n                    }\n                    if (type === 'component' && isPlainObject(definition)) { //如果类型是组件\n                        definition.name = definition.name || id; //名称如果有定义就获取 如果没有 就按照id的来\n\n                        definition = this.options._base.extend(definition); // Class inheritance 类继承 用于vue多个组件中的合并拓展参数\n\n                    }\n                    if (type === 'directive' && typeof definition === 'function') { //如果类型是指令\n                        definition = { bind: definition, update: definition };\n                    }\n                    this.options[type + 's'][id] = definition; //返回集合\n                    return definition\n                }\n            };\n        });\n    }\n\n    /*\n     * 获取组件的名称\n     */\n    function getComponentName(opts) {\n        return opts && (opts.Ctor.options.name || opts.tag)\n    }\n\n    // 判断pattern 中是否还有 name\n    function matches(pattern, name) {\n        if (Array.isArray(pattern)) { //如果是数组\n            return pattern.indexOf(name) > -1 // 是否存在\n        } else if (typeof pattern === 'string') { //如果是字符串\n            return pattern.split(',').indexOf(name) > -1 //判断是否存在\n        } else if (isRegExp(pattern)) { // 如果是正则 则用正则表示\n            return pattern.test(name)\n        }\n        /* istanbul ignore next */\n        return false\n    }\n\n    function pruneCache(keepAliveInstance, //当前保持活着的实例\n        filter //函数过滤器\n    ) {\n        var cache = keepAliveInstance.cache; // 控对象\n        var keys = keepAliveInstance.keys; //获取key\n        var _vnode = keepAliveInstance._vnode;\n        for (var key in cache) { // 循环\n            var cachedNode = cache[key]; //获取值\n            if (cachedNode) { //值存在\n                var name = getComponentName(cachedNode.componentOptions); // 获取组件的名称\n                if (name && !filter(name)) { //如果name已经被销毁掉\n                    pruneCacheEntry( //检测缓存中的组件，如果不是当前激活的组件则销毁\n                        cache,\n                        key,\n                        keys,\n                        _vnode\n                    );\n                }\n            }\n        }\n    }\n\n    //检测缓存中的组件，如果不是当前激活的组件则销毁\n    function pruneCacheEntry(cache, //缓存对象\n        key, //单个key\n        keys, //多个key\n        current //当前虚拟dom\n    ) {\n        var cached$$1 = cache[key]; //获取值遍历中的值\n        if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n            //判断遍历中的值 如果不等于当前活跃的组件则让他销毁\n            cached$$1.componentInstance.$destroy();\n        }\n\n        cache[key] = null;\n        remove(keys, key);\n    }\n\n    var patternTypes = [String, RegExp, Array]; //类型\n\n    var KeepAlive = {   //  <keep-alive> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。\n        name: 'keep-alive',\n        abstract: true, //标准是静态组件\n        props: {\n            include: patternTypes,  // 设置include类型 允许[String, RegExp, Array]  缓存还没有销毁的组件\n            exclude: patternTypes, // 设置include类型 允许[String, RegExp, Array]   缓存已经被销毁的组件\n            max: [String, Number] // 设置include类型 允许 [String, Number]\n        },\n        created: function created() { //created生命周期\n            this.cache = Object.create(null); //创建一个缓存的空对象\n            this.keys = []; //缓存key\n        },\n\n        destroyed: function destroyed() { //销毁 生命周期\n            var this$1 = this;\n            for (var key in this$1.cache) {\n                //销毁所有组件\n                pruneCacheEntry(\n                    this$1.cache, key,\n                    this$1.keys\n                );\n            }\n        },\n\n        mounted: function mounted() { //组件初始化 生命周期\n            var this$1 = this;\n            this.$watch(\n                'include',  //监听 include 数据是否有变化\n                function (val) { //监听为完后更新的值\n                    pruneCache(\n                        this$1,\n                        function (name) {\n                            // 判断include 中是否还有 name 就证明组件还在\n                            return matches(val, name);\n                            //判断include 对象中 name 不存在了 就 调用 检测缓存中的组件，如果不是当前激活的组件则销毁\n                        });\n                });\n            this.$watch(\n                'exclude',  //监听 exclude 数据是否有变化\n                function (val) {\n                    pruneCache(this$1, function (name) {\n                        //如果exclude 对象中存在name 不存在了 就 调用 检测缓存中的组件，如果不是当前激活的组件则销毁\n                        return !matches(val, name);\n                    });\n                });\n        },\n\n        // 渲染 keepAlive 组件\n        render: function render() {\n            var slot = this.$slots.default; //获取插槽\n            var vnode = getFirstComponentChild(slot); // 获取插槽子组件\n            var componentOptions = vnode && vnode.componentOptions; //获取组件参数\n            if (componentOptions) {\n                // check pattern\n                var name = getComponentName(componentOptions); //获取组件名称\n                var ref = this;\n                var include = ref.include; //获取include\n                var exclude = ref.exclude; //获取exclude\n                if (\n                    // not included 没有包括在内\n                    (include && (!name || !matches(include, name))) || //如果include存在,并且name不存在，或者name不存在include中则进if\n                    // excluded\n                    (exclude && name && matches(exclude, name)) //如果exclude存在 并且name存在 并且name存在exclude对象中\n                ) {\n                    return vnode  //返回虚拟dom\n                }\n\n                var ref$1 = this; //获取当前this vm\n                var cache = ref$1.cache; //缓存的对象\n                var keys = ref$1.keys; //获取keys 所有的key\n                var key = vnode.key == null // 判断当前虚拟dom得key 是否为空\n                    // same constructor may get registered as different local components\n                    // so cid alone is not enough (#3269)\n                    //同一个构造函数可以注册为不同的本地组件\n                    //单靠cid是不够的(#3269)\n                    //这里三木是 判断组件是否有cid 如果有 则 判断 是否有组件标签，如果有组件标签则返回 '::'+组件标签，如果没有组件标签则返回空。如果没有 判断组件是否有cid 则返回 vnode.key\n\n                    ? componentOptions.Ctor.cid + (componentOptions.tag ?\n                        (\"::\" + (componentOptions.tag)) :\n                        '') :\n                    vnode.key;\n                if (cache[key]) { //获取值 如果key存在\n                    vnode.componentInstance = cache[key].componentInstance; //直接获取组件实例化\n                    // make current key freshest\n                    remove(keys, key);  //把key添加到末端\n                    keys.push(key);\n                } else {\n                    //将虚拟dom缓存起来\n                    cache[key] = vnode;\n                    keys.push(key); //key缓存起来\n                    // prune oldest entry //删除最老的条目\n                    //设定最大的缓存值\n                    if (this.max && keys.length > parseInt(this.max)) {\n                        pruneCacheEntry(\n                            cache,\n                            keys[0], //第一个key\n                            keys, //keys[]\n                            this._vnode //当前活跃的组件\n                        );\n                    }\n                }\n\n                vnode.data.keepAlive = true;\n            }\n            return vnode || (slot && slot[0])\n        }\n    }\n    //\n    var builtInComponents = {\n        KeepAlive: KeepAlive\n    }\n\n    /*\n     * 初始化全局api 并且暴露 一些静态方法\n     */\n    function initGlobalAPI(Vue) {\n        // config\n        var configDef = {};\n        configDef.get = function () {\n            return config;\n        };\n        {\n            configDef.set = function () {\n                warn(\n                    'Do not replace the Vue.config object, set individual fields instead.'\n                );\n            };\n        }\n        Object.defineProperty(Vue, 'config', configDef);\n\n        // exposed util methods.\n        // NOTE: these are not considered part of the public API - avoid relying on\n        // them unless you are aware of the risk.\n        //暴露的util方法。\n        //注意:这些不是公共API的一部分——避免依赖\n        //除非你意识到其中的风险。\n        Vue.util = {\n            warn: warn, //警告函数\n            extend: extend, //继承方式\n            mergeOptions: mergeOptions, //合并参数\n            defineReactive: defineReactive // 通过defineProperty的set方法去通知notify()订阅者subscribers有新的值修改 添加观察者 get set方法\n        };\n\n        Vue.set = set; //暴露接口静态方法 set\n        Vue.delete = del; //暴露接口静态方法 delete 方法\n        Vue.nextTick = nextTick; // 暴露接口静态方法 nextTick 方法\n\n        Vue.options = Object.create(null); //创建一个空的参数\n        // var ASSET_TYPES = [\n        //     'component',  //组建指令\n        //     'directive', //定义指令 指令\n        //     'filter'  //过滤器指令\n        // ];\n        //\n        //添加components ，directives， filters 指令组件 控对象\n        ASSET_TYPES.forEach(function (type) {\n            Vue.options[type + 's'] = Object.create(null);\n        });\n\n        // this is used to identify the \"base\" constructor to extend all plain-object\n        // components with in Weex's multi-instance scenarios.\n        //用来标识扩展所有普通对象的“基”构造函数\n        // Weex的多实例场景中的组件。\n        Vue.options._base = Vue;\n\n        extend(Vue.options.components, builtInComponents); //合并  KeepAlive参数中的组件对象\n        initUse(Vue); //  初始化vue 安装插件函数\n        initMixin$1(Vue);  //初始化vue mixin 函数\n        initExtend(Vue); //初始化 vue extend 函数\n        initAssetRegisters(Vue); //为vue 添加 静态方法component，directive，，filter\n    }\n\n    //初始化全局api 并且暴露 一些静态方法\n    initGlobalAPI(Vue);\n\n    //监听是否是服务器环境\n    Object.defineProperty(Vue.prototype, '$isServer', {\n        get: isServerRendering\n    });\n    // 获取$ssrContext\n    Object.defineProperty(Vue.prototype, '$ssrContext', {\n        get: function get() {\n            /* istanbul ignore next */\n            return this.$vnode && this.$vnode.ssrContext\n        }\n    });\n\n    // expose FunctionalRenderContext for ssr runtime helper installation\n    //为ssr运行时帮助程序安装公开FunctionalRenderContext 创建 虚拟dom vonde 渲染 slots插槽\n    Object.defineProperty(Vue, 'FunctionalRenderContext', {\n        value: FunctionalRenderContext\n    });\n\n    Vue.version = '2.5.16'; //版本号\n\n\n    // these are reserved for web because they are directly compiled away\n    // during template compilation\n    //这些是为web保留的，因为它们是直接编译掉的\n    //在模板编译期间\n    //  isReservedAttr是一个函数判断 传入字符串style或者class的是否返回真\n    var isReservedAttr = makeMap('style,class');\n\n    // attributes that should be using props for binding\n    //用于绑定props的属性 acceptValue是一个函数判断传入字符串'input,textarea,option,select,progress'的是否返回真\n    var acceptValue = makeMap('input,textarea,option,select,progress');\n    //校验属性\n    var mustUseProp = function (tag, type, attr) {\n        /*\n         * 1. attr === 'value', tag 必须是 'input,textarea,option,select,progress' 其中一个 type !== 'button'\n         * 2. attr === 'selected' && tag === 'option'\n         * 3. attr === 'checked' && tag === 'input'\n         * 4. attr === 'muted' && tag === 'video'\n         * 的情况下为真\n         * */\n        return (\n            (attr === 'value' && acceptValue(tag)) && type !== 'button' || //\n            (attr === 'selected' && tag === 'option') ||\n            (attr === 'checked' && tag === 'input') ||\n            (attr === 'muted' && tag === 'video')\n        )\n    };\n\n    //contenteditable 是否可以编辑属性\n    //draggable html5设置是否可以拖动\n    //spellcheck 进行拼写检查的可编辑段落：\n    var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\n\n    //检查是否是html中的布尔值属性  就是该属性只有 true 和 false\n    //     HTML5的boolean值得属性：\n    // checkd,checked=\"\",checked=\"checked\",checked=true,checke=false 只要有checked属性，其属性值有没有都认为选中状态\n    var isBooleanAttr = makeMap(\n        'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n        'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n        'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n        'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n        'required,reversed,scoped,seamless,selected,sortable,translate,' +\n        'truespeed,typemustmatch,visible'\n    );\n\n    var xlinkNS = 'http://www.w3.org/1999/xlink';\n    //判断是否是xmlns 属性 例子 <bookstore xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    var isXlink = function (name) {\n        return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n    };\n\n    //获取xml link的属性\n    var getXlinkProp = function (name) {\n        return isXlink(name) ? name.slice(6, name.length) : ''\n    };\n\n    //判断val 是否是 null 或者 false\n    var isFalsyAttrValue = function (val) {\n        return val == null || val === false\n    };\n\n    /*\n\n     * class 转码获取vonde 中的staticClass 静态class  和class动态class转义成真实dom需要的class格式。然后返回class字符串\n     * */\n    function genClassForVnode(vnode) {\n        var data = vnode.data;  //获取vnode.data 数据 标签属性数据\n        var parentNode = vnode; //获取 父节点\n        var childNode = vnode; //获取子节点\n        //  this.componentInstance = undefined;  /*当前节点对应的组件的实例*/\n        while (isDef(childNode.componentInstance)) { //如果定义了componentInstance 组件实例  递归合并子组件的class\n            childNode = childNode.componentInstance._vnode; //上一个vnode\n            if (childNode && childNode.data) {\n                data = mergeClassData(childNode.data, data);\n            }\n        }\n        while (isDef(parentNode = parentNode.parent)) { //递归父组件parent 合并父组件class\n            if (parentNode && parentNode.data) {\n                //合并calss数据\n                data = mergeClassData(data, parentNode.data);\n            }\n        }\n        return renderClass(data.staticClass, data.class) //渲染calss\n    }\n\n    //合并calss数据\n    function mergeClassData(child, parent) {\n\n        return {\n            staticClass: concat(child.staticClass, parent.staticClass), //静态calss\n            class: isDef(child.class)  //data中动态calss\n                ? [child.class, parent.class]\n                : parent.class\n        }\n    }\n\n    //渲染calss 这里获取到已经转码的calss\n    function renderClass(\n        staticClass, //静态class\n        dynamicClass //动态calss\n    ) {\n        if (isDef(staticClass) || isDef(dynamicClass)) {\n            //连接class\n            return concat(\n                staticClass, //静态的class 就是class 属性的class\n                stringifyClass(dynamicClass) //动态class就是vonde对象中的class 需要stringifyClass转义成 真实dom需要的class\n            )\n        }\n        /* istanbul ignore next */\n        return ''\n    }\n\n\n    //class 连接\n    function concat(a, b) {\n        return a ?\n            (b ?\n                (a + ' ' + b) :\n                a\n            ) :\n            (b || '')\n    }\n\n\n    //转码 class，把数组格式，对象格式的calss 全部转化成 字符串格式\n    function stringifyClass(value) {\n        if (Array.isArray(value)) { //如果是数组\n            //数组变成字符串，然后用空格 隔开 拼接 起来变成字符串\n            return stringifyArray(value)\n        }\n        if (isObject(value)) {\n            return stringifyObject(value)\n        }\n        //直到全部转成 字符串才结束递归\n        if (typeof value === 'string') {\n            return value\n        }\n        /* istanbul ignore next */\n        return ''\n    }\n\n    //数组字符串变成字符串，然后用空格 隔开 拼接 起来变成字符串\n    function stringifyArray(value) {\n        var res = '';\n        var stringified;\n        for (var i = 0, l = value.length; i < l; i++) {\n            if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n                if (res) {\n                    res += ' ';\n                }\n                res += stringified;\n            }\n        }\n        return res\n    }\n\n    //对象字符串变成字符串，然后用空格 隔开 拼接 起来变成字符串\n    function stringifyObject(value) {\n        var res = '';\n        for (var key in value) {\n            if (value[key]) {\n                if (res) {\n                    res += ' ';\n                }\n                res += key;\n            }\n        }\n        return res\n    }\n\n    /*\n     *\n     * */\n    var namespaceMap = {\n        svg: 'http://www.w3.org/2000/svg', //svg标签命名xmlns属性\n        math: 'http://www.w3.org/1998/Math/MathML' //math 中的xmlns属性声明 XHTML 文件\n    };\n\n\n    //isHTMLTag 函数，验证是否是html中的原始标签\n    var isHTMLTag = makeMap(\n        'html,body,base,head,link,meta,style,title,' +\n        'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n        'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n        'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n        's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n        'embed,object,param,source,canvas,script,noscript,del,ins,' +\n        'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n        'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n        'output,progress,select,textarea,' +\n        'details,dialog,menu,menuitem,summary,' +\n        'content,element,shadow,template,blockquote,iframe,tfoot'\n    );\n\n    // this map is intentionally selective, only covering SVG elements that may\n    // contain child elements.\n    //此映射是有意选择的，只覆盖可能的SVG元素\n    //包含子元素。\n    //isSVG函数  判断svg 标签，包括svg子元素标签\n    var isSVG = makeMap(\n        'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n        'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n        'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n        true\n    );\n    //判断标签是否是pre 如果是则返回真\n    var isPreTag = function (tag) {\n        return tag === 'pre';\n    };\n    //保留标签 判断是不是真的是 html 原有的标签 或者svg标签\n    var isReservedTag = function (tag) {\n        return isHTMLTag(tag) || isSVG(tag)\n    };\n\n    //判断 tag 是否是svg或者math 标签\n    function getTagNamespace(tag) {\n        //如果是svg\n        if (isSVG(tag)) {\n            return 'svg'\n        }\n        // basic support for MathML\n        // note it doesn't support other MathML elements being component roots\n        // MathML的基本支持\n        //注意，它不支持作为组件根的其他MathML元素\n        if (tag === 'math') {\n            return 'math'\n        }\n    }\n\n    var unknownElementCache = Object.create(null);\n\n\n    //判断是不是真的是 html 原有的标签，判断是否是浏览器标准标签 包括标准html和svg标签\n    //如果不是则返回真，这样就是用户自定义标签\n    function isUnknownElement(tag) {\n        /* istanbul ignore if */\n        if (!inBrowser) {  //判断是否是浏览器\n            return true\n        }\n\n        //保留标签 判断是不是真的是 html 原有的标签\n        if (isReservedTag(tag)) {\n            return false\n        }\n        //把标签转化成小写\n        tag = tag.toLowerCase();\n        /* istanbul ignore if */\n        //缓存未知标签\n        if (unknownElementCache[tag] != null) {\n            //如果缓存有则返回出去\n            return unknownElementCache[tag]\n        }\n        //创建该标签\n        var el = document.createElement(tag);\n        //判断是否是含有 - 的组件标签\n        if (tag.indexOf('-') > -1) {\n            // http://stackoverflow.com/a/28210364/1070244\n            return (unknownElementCache[tag] = (\n                el.constructor === window.HTMLUnknownElement ||\n                el.constructor === window.HTMLElement\n            ))\n        } else {\n            //正则判断标签是否是HTMLUnknownElement\n            return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n        }\n    }\n\n    //map 对象中的[name1,name2,name3,name4]  变成这样的map{name1:true,name2:true,name3:true,name4:true}\n    //匹配'text,number,password,search,email,tel,url'\n    var isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n    /*  */\n\n    /**\n     * Query an element selector if it's not an element already.\n     * html5 获取dom\n     */\n    function query(el) {\n        if (typeof el === 'string') {\n            var selected = document.querySelector(el);\n            if (!selected) {\n                \"development\" !== 'production' && warn(\n                    'Cannot find element: ' + el\n                );\n                return document.createElement('div')\n            }\n            return selected\n        } else {\n            return el\n        }\n    }\n\n    /* \n     创建一个真实的dom\n     */\n    function createElement$1(tagName, vnode) {\n        //创建一个真实的dom\n        var elm = document.createElement(tagName);\n        if (tagName !== 'select') { //如果不是select标签则返回dom出去\n            return elm\n        }\n        // false or null will remove the attribute but undefined will not\n        // false或null将删除属性，但undefined不会\n        if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) { //如果是select标签 判断是否设置了multiple属性。如果设置了则加上去\n\n            elm.setAttribute('multiple', 'multiple');\n        }\n        return elm\n    }\n\n    //XML  createElementNS() 方法可创建带有指定命名空间的元素节点。\n    //createElement差不多 创建一个dom节点\n    //  document.createElementNS('http://www.w3.org/2000/svg','svg');\n    //创建一个真实的dom svg方式\n    function createElementNS(namespace, tagName) {\n        // var namespaceMap = {\n        //     svg: 'http://www.w3.org/2000/svg',\n        //     math: 'http://www.w3.org/1998/Math/MathML'\n        // };\n        return document.createElementNS(namespaceMap[namespace], tagName)\n    }\n\n    //创建文本节点真是dom节点\n    function createTextNode(text) {\n        return document.createTextNode(text)\n    }\n\n    //创建一个注释节点\n    function createComment(text) {\n        return document.createComment(text)\n    }\n\n    //插入节点 在referenceNode  dom 前面插入一个节点\n    function insertBefore(parentNode, newNode, referenceNode) {\n\n        parentNode.insertBefore(newNode, referenceNode);\n    }\n\n    //删除子节点\n    function removeChild(node, child) {\n        node.removeChild(child);\n    }\n\n    //添加子节点 尾部\n    function appendChild(node, child) {\n        node.appendChild(child);\n    }\n\n    //获取父亲子节点dom\n    function parentNode(node) {\n        return node.parentNode\n    }\n\n    //获取下一个兄弟节点\n    function nextSibling(node) {\n        return node.nextSibling\n    }\n\n    //获取dom标签名称\n    function tagName(node) {\n        return node.tagName\n    }\n\n    //设置dom 文本\n    function setTextContent(node, text) {\n        node.textContent = text;\n    }\n\n\n    //设置组建样式的作用域\n    function setStyleScope(node, scopeId) {\n        node.setAttribute(scopeId, '');\n    }\n\n    //Object.freeze()阻止修改现有属性的特性和值，并阻止添加新属性。\n    var nodeOps = Object.freeze({\n        createElement: createElement$1, //创建一个真实的dom\n        createElementNS: createElementNS, //创建一个真实的dom svg方式\n        createTextNode: createTextNode, // 创建文本节点\n        createComment: createComment,  // 创建一个注释节点\n        insertBefore: insertBefore,  //插入节点 在xxx  dom 前面插入一个节点\n        removeChild: removeChild,   //删除子节点\n        appendChild: appendChild,  //添加子节点 尾部\n        parentNode: parentNode,  //获取父亲子节点dom\n        nextSibling: nextSibling,     //获取下一个兄弟节点\n        tagName: tagName,   //获取dom标签名称\n        setTextContent: setTextContent, //  //设置dom 文本\n        setStyleScope: setStyleScope  //设置组建样式的作用域\n    });\n\n    /*\n     * ref 创建 更新 和 销毁 事件\n     * */\n\n    var ref = {\n        create: function create(_, vnode) {\n            //创建注册一个ref\n            registerRef(vnode);\n        },\n        update: function update(oldVnode, vnode) {\n            //更新ref\n            if (oldVnode.data.ref !== vnode.data.ref) {\n\n                registerRef(oldVnode, true); //先删除\n                registerRef(vnode);  //在添加\n            }\n        },\n        destroy: function destroy(vnode) {\n            registerRef(vnode, true); //删除销毁ref\n        }\n    }\n    //注册ref或者删除ref。比如标签上面设置了ref='abc' 那么该函数就是为this.$refs.abc 注册ref 把真实的dom存进去\n    function registerRef(vnode, isRemoval) {\n        var key = vnode.data.ref;  //获取vond ref的字符串\n        if (!isDef(key)) {  //如果没有定义则不执行下面的代码了\n            return\n        }\n\n        var vm = vnode.context;  //vm 上下文\n        var ref = vnode.componentInstance || vnode.elm; //组件实例   或者   elm DOM 节点\n        var refs = vm.$refs;   //获取vm总共的refs\n        if (isRemoval) {  //标志是否删除ref\n            if (Array.isArray(refs[key])) { //如果定义有多个同名的ref 则会定义为一个数组，删除refs 这个key 定义的数组\n                remove(refs[key], ref); //删除ref\n            } else if (refs[key] === ref) { //如果是单个的时候\n                refs[key] = undefined;  //直接置空\n            }\n        } else {\n            if (vnode.data.refInFor) { //如果ref和for一起使用的时候\n                if (!Array.isArray(refs[key])) { //refs[key] 不是数组 则变成一个数组\n                    refs[key] = [ref];\n                } else if (refs[key].indexOf(ref) < 0) { //如果ref 不存在 refs的时候则添加进去\n                    // $flow-disable-line\n                    refs[key].push(ref);\n                }\n            } else {\n                refs[key] = ref; //如果是单个直接赋值\n            }\n        }\n    }\n\n    /**\n     * Virtual DOM patching algorithm based on Snabbdom by\n     * Simon Friis Vindum (@paldepind)\n     * Licensed under the MIT License\n     * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n     *\n     * modified by Evan You (@yyx990803)\n     *\n     * Not type-checking this because this file is perf-critical and the cost\n     * of making flow understand it is not worth it.\n     */\n    //创建一个空的vnode\n    var emptyNode = new VNode('', {}, []);\n\n    var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\n    //sameVnode(oldVnode, vnode)2个节点的基本属性相同，那么就进入了2个节点的diff过程。\n    function sameVnode(a, b) {\n        return (\n\n            a.key === b.key && (   //如果a的key 等于b的key\n                (\n\n                    a.tag === b.tag && // 如果a的tag 等于b的tag\n                    a.isComment === b.isComment && // 如果a和b 都是注释节点\n                    isDef(a.data) === isDef(b.data) && //如果a.data 和 b.data 都定义后，是组件，或者是都含有tag属性\n                    sameInputType(a, b)   //相同的输入类型。判断a和b的属性是否相同\n                ) || (\n                    isTrue(a.isAsyncPlaceholder) && //判断是否是异步的\n                    a.asyncFactory === b.asyncFactory &&\n                    isUndef(b.asyncFactory.error)\n                )\n            )\n        )\n    }\n\n    //相同的输入类型。判断a和b的属性是否相同\n    function sameInputType(a, b) {\n        if (a.tag !== 'input') { //如果a标签不是input\n            return true\n        }\n        var i;\n        var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type; //获取a的tag标签属性\n        var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;//获取b的tag标签属性\n        return typeA === typeB || //typeA和typeB 都相同\n            //匹配'text,number,password,search,email,tel,url'\n            isTextInputType(typeA) && isTextInputType(typeB)\n    }\n\n    // 创建key 如果没有key 则用索引作为key\n    function createKeyToOldIdx(children, beginIdx, endIdx) {\n        var i, key;\n        var map = {};\n        for (i = beginIdx; i <= endIdx; ++i) {\n            key = children[i].key;\n            if (isDef(key)) {\n                map[key] = i;\n            }\n        }\n        return map\n    }\n\n    //创建虚拟dom\n    function createPatchFunction(backend) {\n        /*\n         var nodeOps = Object.freeze({\n         createElement: createElement$1, //创建一个真实的dom\n         createElementNS: createElementNS, //创建一个真实的dom svg方式\n         createTextNode: createTextNode, // 创建文本节点\n         createComment: createComment,  // 创建一个注释节点\n         insertBefore: insertBefore,  //插入节点 在xxx  dom 前面插入一个节点\n         removeChild: removeChild,   //删除子节点\n         appendChild: appendChild,  //添加子节点 尾部\n         parentNode: parentNode,  //获取父亲子节点dom\n         nextSibling: nextSibling,     //获取下一个兄弟节点\n         tagName: tagName,   //获取dom标签名称\n         setTextContent: setTextContent, //  //设置dom 文本\n         setStyleScope: setStyleScope  //设置组建样式的作用域\n         });\n         modules=[\n         attrs,  // attrs包含两个方法create和update都是更新设置真实dom属性值 {create: updateAttrs,  update: updateAttrs   }\n         klass, //klass包含类包含两个方法create和update都是更新calss。其实就是updateClass方法。 设置真实dom的class\n         events, //更新真实dom的事件\n         domProps, //更新真实dom的props 属性值\n         style, // 更新真实dom的style属性。有两个方法create 和update 不过函数都是updateStyle更新真实dom的style属性值.将vonde虚拟dom的css 转义成并且渲染到真实dom的css中\n         transition // 过度动画\n         ref,  //ref创建，更新 ， 销毁 函数\n         directives //自定义指令 创建 ，更新，销毁函数\n         ]\n         */\n        console.log(backend)\n\n        var i, j;\n        var cbs = {};\n        console.log('==backend==')\n        console.log(backend)\n        var modules = backend.modules;\n        var nodeOps = backend.nodeOps;\n\n\n        //  把钩子函数添加到cbs队列中  循环数字 var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n        for (i = 0; i < hooks.length; ++i) {\n            cbs[hooks[i]] = [];\n            //循环modules 数组\n            for (j = 0; j < modules.length; ++j) {\n                //判断modules上面是否有定义有  'create', 'activate', 'update', 'remove', 'destroy'\n                if (isDef(modules[j][hooks[i]])) {\n                    //如果有则把他添加到cbs 对象数组中\n                    cbs[hooks[i]].push(modules[j][hooks[i]]); //把钩子函数添加到cbs队列中\n                }\n            }\n        }\n        /*\n         cbs={\n                 'create':[],\n                 'activate':[],\n                 'update':[],\n                 'remove':[],\n                 'destroy:[]\n         }\n         */\n\n\n        //创建一个vnode节点\n        function emptyNodeAt(elm) {\n            // tag,  /*当前节点的标签名*/\n            //     data, /*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/\n            //     children, //子节点\n            //     text, //文本\n            //     elm, /*当前节点*/\n            //     context,  /*编译作用域*/\n            //     componentOptions, /*组件的option选项*/\n            //     asyncFactory\n            return new VNode(\n                nodeOps.tagName(elm).toLowerCase(),\n                {},\n                [],\n                undefined,\n                elm\n            )\n        }\n\n        //创建一个RmCb\n        function createRmCb(\n            childElm,  //子节点\n            listeners //事件数组\n        ) {\n\n            function remove() {\n                //如果listeners === 0 的时候就删除掉该子节点\n                if (--remove.listeners === 0) {\n                    removeNode(childElm);\n                }\n            }\n\n            remove.listeners = listeners;\n            return remove\n        }\n\n        //删除真实的dom  参数el 是dom\n        function removeNode(el) {\n            // function parentNode(node) {\n            //     return node.parentNode\n            // }\n            //获取父亲dom\n            var parent = nodeOps.parentNode(el);\n            // element may have already been removed due to v-html / v-text\n            // 元素可能已经由于v-html / v-text而被删除\n            //判断父亲dom是否存在 如果存在则\n            // function removeChild(node, child) {\n            //     node.removeChild(child);\n            // }\n            //删除子节点\n            if (isDef(parent)) {\n                nodeOps.removeChild(parent, el);\n            }\n        }\n\n        // 检查dom 节点的tag标签 类型 是否是VPre 标签 或者是判断是否是浏览器自带原有的标签\n        function isUnknownElement$$1(\n            vnode,   //vnode\n            inVPre      //标记 标签是否还有 v-pre 指令，如果没有则是false\n        ) {\n            return (\n                !inVPre && // 标记 标签是否还有 v-pre 指令，如果没有则是false\n                !vnode.ns && !(\n                    config.ignoredElements.length &&\n                    config.ignoredElements.some(function (ignore) {  //some() 方法测试是否至少有一个元素通过由提供的函数实现的测试。\n                        return isRegExp(ignore)   //判断是否是正则对象\n                            ? ignore.test(vnode.tag)\n                            : ignore === vnode.tag\n                    })\n                ) &&\n                //判断是不是真的是 html 原有的标签，判断是否是浏览器标准标签\n                config.isUnknownElement(vnode.tag)\n            )\n        }\n\n        var creatingElmInVPre = 0;\n        //创建dom 节点\n        function createElm(\n            vnode,  //vnode 节点，\n            insertedVnodeQueue, //插入Vnode队列\n            parentElm, //父亲节点\n            refElm,  //当前的节点的兄弟节点\n            nested,  //嵌套\n            ownerArray, //主数组 节点\n            index  //索引\n        ) {\n            console.log(vnode)\n            //判断是否定义有vnode.elm 和 定义有ownerArray\n            if (isDef(vnode.elm) && isDef(ownerArray)) {\n                // This vnode was used in a previous render!\n                // now it's used as a new node, overwriting its elm would cause\n                // potential patch errors down the road when it's used as an insertion\n                // reference node. Instead, we clone the node on-demand before creating\n                // associated DOM element for it.\n                //这个vnode在之前的渲染中使用过!\n                //现在它被用作一个新节点，覆盖它的elm将导致\n                //当它被用作插入时，将来可能会出现补丁错误\n                //引用节点。相反，我们在创建之前按需克隆节点\n                //关联的DOM元素。\n                //克隆一个新的节点\n\n                vnode = ownerArray[index] = cloneVNode(vnode);\n            }\n\n            vnode.isRootInsert = !nested; // for transition enter check //对于过渡输入检查\n            //创建组件，并且判断它是否实例化过\n            if (createComponent(\n                vnode, //虚拟dom vonde\n                insertedVnodeQueue, //插入Vnode队列\n                parentElm,//父亲节点\n                refElm //当前节点\n            )) {\n                return\n            }\n\n            var data = vnode.data;  //vnode 数据 如 属性等\n            var children = vnode.children; //vonde 子节点\n            var tag = vnode.tag;  //vonde 标签\n\n\n            if (isDef(tag)) {   //如果组件标签定义了\n                console.log(vnode)\n\n                {\n\n                    if (data && data.pre) { //标记是否是pre 标签吧\n                        creatingElmInVPre++;\n                    }\n                    // 检查dom 节点的tag标签 类型 是否是VPre 标签 或者是判断是否是浏览器自带原有的标签\n                    if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n                        warn(\n                            'Unknown custom element: <' + tag + '> - did you ' +\n                            'register the component correctly? For recursive components, ' +\n                            'make sure to provide the \"name\" option.',\n                            vnode.context\n                        );\n                    }\n                }\n\n                vnode.elm =\n                    vnode.ns //   字符串值，可为此元素节点规定命名空间的名称。 可能是svg 或者 math 节点\n                        ? nodeOps.createElementNS(vnode.ns, tag) //   字符串值，可为此元素节点规定命名空间的名称。 可能是svg 或者 math 节点\n                        : nodeOps.createElement(tag, vnode);   //html创建一个dom 节点\n                setScope(vnode); //设置样式的作用域\n                console.log('====tag====' + tag)\n\n                /* istanbul ignore if */\n                {\n                    //创建子节点\n                    createChildren(\n                        vnode, //虚拟dom\n                        children,  // vonde 子节点\n                        insertedVnodeQueue //已经安装好的vonde\n                    );\n                    if (isDef(data)) {\n\n                        // invokeCreateHooks，循环cbs.create 钩子函数，并且执行调用，其实cbs.create 钩子函数就是platformModules中的attrs中 updateAttrs更新属性函数。如果是组件则调用componentVNodeHooks中的 create\n                        invokeCreateHooks(vnode, insertedVnodeQueue);\n                    }\n                    //插入一个真实的dom，如果ref$$1.parentNode等于parent是。ref$$1和elm他们是兄弟节点则插入ref$$1前面\n                    //如果ref$$1的ref$$1.parentNode不等于parent。那么elm就直接append到parent中\n                    insert(\n                        parentElm,\n                        vnode.elm,\n                        refElm\n                    );\n                }\n\n                if (\"development\" !== 'production' && data && data.pre) {\n                    creatingElmInVPre--;\n                }\n            } else if (isTrue(vnode.isComment)) {\n                vnode.elm = nodeOps.createComment(vnode.text);\n                //插入一个真实的dom，如果ref$$1.parentNode等于parent是。ref$$1和elm他们是兄弟节点则插入ref$$1前面\n                //如果ref$$1的ref$$1.parentNode不等于parent。那么elm就直接append到parent中\n                insert(parentElm, vnode.elm, refElm);\n            } else {\n                vnode.elm = nodeOps.createTextNode(vnode.text);\n                //插入一个真实的dom，如果ref$$1.parentNode等于parent是。ref$$1和elm他们是兄弟节点则插入ref$$1前面\n                //如果ref$$1的ref$$1.parentNode不等于parent。那么elm就直接append到parent中\n                insert(parentElm, vnode.elm, refElm);\n            }\n        }\n\n\n\n        //如果组件已经实例化过了才会初始化组件，才会返回值为真\n        function createComponent(  //创建组件\n            vnode,\n            insertedVnodeQueue,// insertedVnodeQueue 插入vnode队列\n            parentElm, //父节点 dom\n            refElm //当前节点 dom\n        ) {\n            var i = vnode.data; //标签 dom 中的属性 或者是组件\n            console.log(i)\n\n            if (isDef(i)) { //如果i有定义\n                var isReactivated = isDef(vnode.componentInstance) && i.keepAlive; //如果已经实例化过，并且是keepAlive组件\n                if (isDef(i = i.hook) && isDef(i = i.init)) { //触发钩子函数。或者init，\n                    console.log(i)\n\n                    i(\n                        vnode,\n                        false /* hydrating */,\n                        parentElm,\n                        refElm\n                    );\n                }\n                // after calling the init hook, if the vnode is a child component\n                // it should've created a child instance and mounted it. the child\n                // component also has set the placeholder vnode's elm.\n                // in that case we can just return the element and be done.\n                //调用init钩子后，如果vnode是一个子组件\n                //它应该创建一个子实例并挂载它。这个孩子\n                //组件还设置了占位符vnode的elm。\n                //在这种情况下，我们只需要返回元素就可以了。\n                if (isDef(vnode.componentInstance)) { //组件已经实例过\n                    //initComponent 初始化组建，如果没有tag标签则去更新真实dom的属性，如果有tag标签，则注册或者删除ref 然后为insertedVnodeQueue.push(vnode);确保调用插入钩子如果vnode.data.pendingInsert为反正则也为insertedVnodeQueue插入缓存 vnode.data.pendingInsert\n                    initComponent(\n                        vnode,\n                        insertedVnodeQueue\n                    );\n                    //判断是否是真的true\n                    if (isTrue(isReactivated)) {\n                        //激活组件\n                        reactivateComponent(\n                            vnode, //新的vonde\n                            insertedVnodeQueue, //\n                            parentElm,\n                            refElm\n                        );\n                    }\n                    return true\n                }\n            }\n        }\n\n        // 初始化组建，如果没有tag标签则去更新真实dom的属性，如果有tag标签，则注册或者删除ref 然后为insertedVnodeQueue.push(vnode);确保调用插入钩子如果vnode.data.pendingInsert为反正则也为insertedVnodeQueue插入缓存 vnode.data.pendingInsert\n        function initComponent(\n            vnode, //node 虚拟dom\n            insertedVnodeQueue //插入Vnode队列 记录已经实例化过的组件\n        ) {\n            if (isDef(vnode.data.pendingInsert)) {  //模板缓存 待插入\n                insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n                vnode.data.pendingInsert = null;\n            }\n            vnode.elm = vnode.componentInstance.$el; //组件实例\n            if (isPatchable(vnode)) { //   判断组件是否定义有 tag标签\n                //invokeCreateHooks，循环cbs.create 钩子函数，并且执行调用，其实cbs.create 钩子函数就是platformModules中的attrs中 updateAttrs更新属性函数。如果是组件则调用componentVNodeHooks中的 create\n                invokeCreateHooks(vnode, insertedVnodeQueue);\n                //为有作用域的CSS设置作用域id属性。\n                //这是作为一种特殊情况来实现的，以避免开销\n                //通过常规属性修补过程。\n                setScope(vnode);\n            } else {\n                // empty component root.\n                // skip all element-related modules except for ref (#3455)\n                //空组件根。\n                //跳过除ref(#3455)之外的所有与元素相关的模块\n                //注册ref\n                registerRef(vnode);\n                // make sure to invoke the insert hook\n                //确保调用插入钩子\n                insertedVnodeQueue.push(vnode);\n            }\n        }\n\n        //激活组建。把vonde添加到parentElm中。如果是transition组件则 调用 transition中的activate就是_enter\n        function reactivateComponent(\n            vnode, //新的vonde\n            insertedVnodeQueue,//\n            parentElm,\n            refElm\n        ) {\n            var i;\n            // hack for #4339: a reactivated component with inner transition\n            // does not trigger because the inner node's created hooks are not called\n            // again. It's not ideal to involve module-specific logic in here but\n            // there doesn't seem to be a better way to do it.\n            //破解#4339:一个内部转换的重新激活的组件\n            //不触发，因为没有调用内部节点创建的钩子\n            //一次。在这里使用特定于模块的逻辑并不理想，但是\n            //似乎没有比这更好的方法了。\n            var innerNode = vnode;\n            while (innerNode.componentInstance) { //如果已经实例过的\n                innerNode = innerNode.componentInstance._vnode; // 标志上一个 vonde 就是旧的 vonde\n                if (isDef(i = innerNode.data) && isDef(i = i.transition)) { //如果是transition 组件 _enter\n                    for (i = 0; i < cbs.activate.length; ++i) {\n                        cbs.activate[i](emptyNode, innerNode); //调用 transition中的activate就是_enter\n                    }\n                    insertedVnodeQueue.push(innerNode);\n                    break\n                }\n            }\n            // unlike a newly created component,\n            // a reactivated keep-alive component doesn't insert itself\n            //与新创建的组件不同，\n            //重新激活的keep-alive组件不会插入\n            insert(\n                parentElm,  //父真实dom\n                vnode.elm, //当前vonde的真实dom\n                refElm //当前vonde的真实dom的兄弟节点或者不是\n            );\n        }\n\n        //插入一个真实的dom，如果ref$$1.parentNode等于parent是。ref$$1和elm他们是兄弟节点则插入ref$$1前面\n        //如果ref$$1的ref$$1.parentNode不等于parent。那么elm就直接append到parent中\n        function insert(\n            parent,//父真实dom\n            elm,//当前vonde的真实dom\n            ref$$1 // 当前vonde的真实dom的兄弟节点或者不是\n        ) {\n            if (isDef(parent)) {\n                if (isDef(ref$$1)) {\n                    if (ref$$1.parentNode === parent) {\n                        nodeOps.insertBefore(parent, elm, ref$$1);\n                    }\n                } else {\n                    nodeOps.appendChild(parent, elm);\n                }\n            }\n        }\n\n        //创建子节点\n        function createChildren(\n            vnode, //虚拟dom\n            children,  //子节点\n            insertedVnodeQueue //插入Vnode队列\n        ) {\n            console.log('==children==')\n            console.log(children)\n\n            if (Array.isArray(children)) { //如果children 是数组\n                {\n                    //检测key是否有重复\n                    checkDuplicateKeys(children);\n                }\n                //创造节点\n                for (var i = 0; i < children.length; ++i) {\n                    //创造节点\n                    createElm(\n                        children[i], //vnode 节点\n                        insertedVnodeQueue, //插入Vnode队列\n                        vnode.elm, //父亲节点\n                        null, //当前节点\n                        true, //嵌套\n                        children, //主数组 节点\n                        i //索引\n                    );\n                }\n                //判断数据类型是否是string，number，symbol，boolean\n            } else if (isPrimitive(vnode.text)) {\n                //添加子节点                       创建一个文本节点\n                nodeOps.appendChild(\n                    vnode.elm,\n                    nodeOps.createTextNode(String(vnode.text)) //创建文本节点真是dom节点\n                );\n            }\n        }\n\n        //循环组件实例 是否定义有 tag标签\n        function isPatchable(vnode) {\n            while (vnode.componentInstance) { //组件实例  循环n层组件实例\n                vnode = vnode.componentInstance._vnode;\n            }\n            //判断组件是否定义有 tag标签\n            return isDef(vnode.tag)\n        }\n\n        // invokeCreateHooks，循环cbs.create 钩子函数，并且执行调用，其实cbs.create 钩子函数就是platformModules中的attrs中 updateAttrs更新属性函数。如果是组件则调用componentVNodeHooks中的 create\n        function invokeCreateHooks(vnode, insertedVnodeQueue) {\n            // 这里的cbs如下：\n            /*\n             cbs={\n             'create':[],\n             'activate':[],\n             'update':[],\n             'remove':[],\n             'destroy:[]\n             }\n             */\n            // activate:Array(1)\n            // create:Array(8)\n            // destroy:Array(2)\n            // remove:Array(1)\n            // update:Array(7)\n            // __proto__:Object\n            console.log('==cbs.create==')\n            console.log(cbs)\n            for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n\n                cbs.create[i$1](emptyNode, vnode);\n            }\n            i = vnode.data.hook; // Reuse variable 如果他是组件\n            console.log(i)\n            // 如果是组件则调用componentVNodeHooks中的 create\n            if (isDef(i)) {\n                if (isDef(i.create)) { //但是componentVNodeHooks 中没有create 所以下面可能不会执行\n                    i.create(emptyNode, vnode);\n                }\n                if (isDef(i.insert)) {\n                    insertedVnodeQueue.push(vnode);\n                }\n            }\n        }\n\n        // set scope id attribute for scoped CSS.\n        // this is implemented as a special case to avoid the overhead\n        // of going through the normal attribute patching process.\n        //为有作用域的CSS设置作用域id属性。\n        //这是作为一种特殊情况来实现的，以避免开销\n        //通过常规属性修补过程。\n        function setScope(vnode) {\n            var i;\n            //fnScopeId 判断css作用 有没有设置Scope 如果有则设置 css作用域\n            if (isDef(i = vnode.fnScopeId)) {\n                nodeOps.setStyleScope(vnode.elm, i);\n            } else {\n                var ancestor = vnode;\n                while (ancestor) {\n                    // context,  /*编译作用域*/ 上下文 判断vnode 是否设置有作用于 与css是否设置有作用域 _scopeId 是放在dom属性上面做标记\n                    if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n                        //设置css作用域\n                        nodeOps.setStyleScope(vnode.elm, i);\n                    }\n                    //循环父节点\n                    ancestor = ancestor.parent;\n                }\n            }\n            // for slot content they should also get the scopeId from the host instance.\n            // 对于插槽内容，它们还应该从主机实例获得scopeId\n            // activeInstance 可能是 vm\n            if (isDef(i = activeInstance) &&\n                i !== vnode.context &&\n                i !== vnode.fnContext &&\n                isDef(i = i.$options._scopeId)\n            ) {\n                nodeOps.setStyleScope(vnode.elm, i);\n            }\n        }\n\n\n        function addVnodes(parentElm, //父亲节点\n            refElm,    //当前点\n            vnodes,  //虚拟dom\n            startIdx,  // 开始index\n            endIdx, // 结束index\n            insertedVnodeQueue   //插入Vnode队列\n        ) {\n\n            for (; startIdx <= endIdx; ++startIdx) {\n\n                //创造dom节点\n                createElm(\n                    vnodes[startIdx],  //vnode 节点\n                    insertedVnodeQueue,  //插入Vnode队列\n                    parentElm,  //父亲节点\n                    refElm, //当前节点\n                    false,   //嵌套\n                    vnodes,  //vnodes 数组\n                    startIdx //索引\n                );\n            }\n        }\n\n        //组件销毁，触发销毁钩子函数\n        function invokeDestroyHook(vnode) {\n            var i, j;\n            var data = vnode.data; //如果vonde有标签属性\n            if (isDef(data)) {  //如果vonde有标签属性\n                if (isDef(i = data.hook) && isDef(i = i.destroy)) { //如果有钩子函数，或者销毁的钩子函数destroy 就调用destroy或者钩子函数\n                    i(vnode);\n                }\n                for (i = 0; i < cbs.destroy.length; ++i) { //并且判断有几个销毁的钩子函数，循环调用\n                    cbs.destroy[i](vnode); //\n                }\n            }\n            if (isDef(i = vnode.children)) { //如果有子节点则递归\n                for (j = 0; j < vnode.children.length; ++j) {\n                    invokeDestroyHook(vnode.children[j]);\n                }\n            }\n        }\n\n        function removeVnodes(parentElm, vnodes, startIdx, endIdx) {\n            for (; startIdx <= endIdx; ++startIdx) {\n                var ch = vnodes[startIdx];\n                if (isDef(ch)) {\n                    if (isDef(ch.tag)) {\n                        removeAndInvokeRemoveHook(ch);\n                        invokeDestroyHook(ch);\n                    } else { // Text node\n                        removeNode(ch.elm);\n                    }\n                }\n            }\n        }\n\n        function removeAndInvokeRemoveHook(vnode, rm) {\n            if (isDef(rm) || isDef(vnode.data)) {\n                var i;\n                var listeners = cbs.remove.length + 1;\n                if (isDef(rm)) {\n                    // we have a recursively passed down rm callback\n                    // increase the listeners count\n                    rm.listeners += listeners;\n                } else {\n                    // directly removing\n                    rm = createRmCb(vnode.elm, listeners);\n                }\n                // recursively invoke hooks on child component root node\n                if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n                    removeAndInvokeRemoveHook(i, rm);\n                }\n                for (i = 0; i < cbs.remove.length; ++i) {\n                    cbs.remove[i](vnode, rm);\n                }\n                if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n                    i(vnode, rm);\n                } else {\n                    rm();\n                }\n            } else {\n                removeNode(vnode.elm);\n            }\n        }\n\n\n        // ddif 算法\n        function updateChildren(\n            parentElm,  // 父亲dom\n            oldCh,  // 旧的虚拟dom\n            newCh,  // 新的虚拟dom\n            insertedVnodeQueue,\n            removeOnly\n        ) {\n            var oldStartIdx = 0;  // 旧的虚拟dom开始指针 \n            var newStartIdx = 0; // 新的虚拟dom开始指针 \n            var oldEndIdx = oldCh.length - 1; // 旧的虚拟dom结束指针 \n            var newEndIdx = newCh.length - 1;// 新的虚拟dom结束指针 \n\n            var oldStartVnode = oldCh[0];  // 旧的虚拟dom开始节点\n            var newStartVnode = newCh[0]; // 新的虚拟dom开始节点\n\n            var oldEndVnode = oldCh[oldEndIdx]; // 旧的虚拟dom结束节点\n            var newEndVnode = newCh[newEndIdx];// 新的虚拟dom结束节点\n\n            var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n            // removeOnly is a special flag used only by <transition-group>\n            // to ensure removed elements stay in correct relative positions\n            // during leaving transitions\n            var canMove = !removeOnly;\n\n            {\n                // 检查同一个兄弟节点是否有重复的key，如果有则发出警告日志\n                checkDuplicateKeys(newCh);\n            }\n\n            /*\n            diff 算法开始\n              这里diff算法其实就是\n\n            */\n            while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n\n                if (isUndef(oldStartVnode)) {\n                    // 如果旧的开始节点不存在或者为空\n                    // 如果旧的开始节点指针往中间偏移\n                    oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n                } else if (isUndef(oldEndVnode)) {\n                    // 如果旧的结束节点不存在或者为空\n                    // 如果旧的结束节点指针往中间偏移\n                    oldEndVnode = oldCh[--oldEndIdx];\n\n                } else if (sameVnode(oldStartVnode, newStartVnode)) {   //sameVnode(oldVnode, vnode)2个节点的基本属性相同，那么就进入了2个节点的diff过程。\n\n\n\n                    // 在对比下虚拟dom \n                    patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n\n                    //开始指针 两个都往中间偏移\n                    oldStartVnode = oldCh[++oldStartIdx];\n                    newStartVnode = newCh[++newStartIdx];\n\n                } else if (sameVnode(oldEndVnode, newEndVnode)) {  //sameVnode(oldVnode, vnode)2个节点的基本属性相同，那么就进入了2个节点的diff过程。\n                    // 在对比下虚拟dom \n                    patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n                    // 结束指针 两个都往中间偏移\n                    oldEndVnode = oldCh[--oldEndIdx];\n                    newEndVnode = newCh[--newEndIdx];\n                } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right  //sameVnode(oldVnode, vnode)2个节点的基本属性相同，那么就进入了2个节点的diff过程。\n\n                    // 交叉对比 深度优先算法入口\n                    patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n                    // 交叉对比\n                    canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n\n                    oldStartVnode = oldCh[++oldStartIdx];\n                    newEndVnode = newCh[--newEndIdx];\n                } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n                    // 交叉对比\n                    patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n                    // 交叉对比\n                    canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n                    oldEndVnode = oldCh[--oldEndIdx];\n                    newStartVnode = newCh[++newStartIdx];\n                } else {\n                    // 如果没有key 则给塔新的key\n                    if (isUndef(oldKeyToIdx)) {\n\n                        // 创建key 如果没有key 则用索引作为key\n                        oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n                    }\n                    \n                    // 获取 旧的vnode key\n                    idxInOld = isDef(newStartVnode.key)\n                        ? oldKeyToIdx[newStartVnode.key]\n                          // 查找旧的vnode key\n                        : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n                        // 如果旧的 vnode key 未定义则创建新的真实dom\n                    if (isUndef(idxInOld)) { // New element\n                         //创建真实 dom 节点\n                        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n                    } else {\n\n                        vnodeToMove = oldCh[idxInOld];\n                        if (sameVnode(vnodeToMove, newStartVnode)) {\n                            // 对比虚拟dom\n                            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n                            \n                            oldCh[idxInOld] = undefined;\n                            // 真实节点交换\n                            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n                        } else {\n                            // same key but different element. treat as new element\n                            // 创建真实dom\n                            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n                        }\n                    }\n                    newStartVnode = newCh[++newStartIdx];\n                }\n            }\n            if (oldStartIdx > oldEndIdx) {\n                refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n                // 添加虚拟dom\n                addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n            } else if (newStartIdx > newEndIdx) {\n                // 删除虚拟dom\n                removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n            }\n        }\n\n        //检测key是否有重复\n        function checkDuplicateKeys(children) {\n            var seenKeys = {};\n            for (var i = 0; i < children.length; i++) {  //循环子节点\n                var vnode = children[i]; //获取子节点\n                var key = vnode.key; //获取子节点的key\n                if (isDef(key)) { //判断key是否有定义过\n                    if (seenKeys[key]) { //如果定义过则发出警告\n                        warn(\n                            //检测到重复键:“+ key +”。这可能会导致更新错误。\n                            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n                            vnode.context\n                        );\n                    } else {\n                        //标志key 状态是 true\n                        seenKeys[key] = true;\n                    }\n                }\n            }\n        }\n\n        // 查找旧的vnode key\n        function findIdxInOld(node, oldCh, start, end) {\n            for (var i = start; i < end; i++) {\n                var c = oldCh[i];\n                if (isDef(c) && sameVnode(node, c)) {\n                    return i\n                }\n            }\n        }\n\n        // 对比 虚拟dom\n        function patchVnode(\n            oldVnode, // 旧的虚拟dom\n            vnode,  // 新的虚拟dom\n            insertedVnodeQueue,  // 删除虚拟dom队列\n            removeOnly\n        ) {\n            if (oldVnode === vnode) { //如果他们相等\n                return\n            }\n\n            var elm = vnode.elm = oldVnode.elm; //获取真实的dom\n\n            // 判断是否有isAsyncPlaceholder 属性\n            if (isTrue(oldVnode.isAsyncPlaceholder)) {\n                //判断数据 是否不等于 undefined或者null\n                if (isDef(vnode.asyncFactory.resolved)) {\n                    // ssr 渲染\n                    hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n                } else {\n                    vnode.isAsyncPlaceholder = true;\n                }\n                return\n            }\n\n            // reuse element for static trees.\n            // note we only do this if the vnode is cloned -\n            // if the new node is not cloned it means the render functions have been\n            // reset by the hot-reload-api and we need to do a proper re-render.\n            //为静态树重用元素。\n            //注意，只有当vnode被克隆时，我们才这样做\n            //如果新节点没有克隆，则表示渲染函数已经克隆\n            //由hot-reload api重置，我们需要做一个适当的重新渲染。\n            if (isTrue(vnode.isStatic) &&\n                isTrue(oldVnode.isStatic) &&\n                vnode.key === oldVnode.key &&\n                (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n            ) {\n                vnode.componentInstance = oldVnode.componentInstance;\n                return\n            }\n\n            var i;\n            var data = vnode.data;\n            // 钩子函数\n            if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n                i(oldVnode, vnode);\n            }\n\n            var oldCh = oldVnode.children;\n            var ch = vnode.children;\n            //循环组件实例 是否定义有 tag标签\n            if (isDef(data) && isPatchable(vnode)) {\n                // 触发钩子函数 更新钩子函数\n                for (i = 0; i < cbs.update.length; ++i) {\n                    cbs.update[i](oldVnode, vnode);\n                }\n                // 触发钩子函数\n                if (isDef(i = data.hook) && isDef(i = i.update)) {\n                    i(oldVnode, vnode);\n                }\n            }\n\n            //如果是文本虚拟dom\n            if (isUndef(vnode.text)) {\n                // 两个虚拟dom都存在\n                if (isDef(oldCh) && isDef(ch)) {\n                    // 如果他们不相等\n                    if (oldCh !== ch) {\n                        // diff算法更新\n                        updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);\n                    }\n                } else if (isDef(ch)) {  // 如果是有新的虚拟dom\n                    // 如果是文本虚拟dom 则 设置 空\n                    if (isDef(oldVnode.text)) {\n                        nodeOps.setTextContent(elm, '');\n                    }\n                    // 添加 vnode\n                    addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n                } else if (isDef(oldCh)) { // 如果旧的有 新的虚拟dom没有则删除 虚拟dom\n                    removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n                } else if (isDef(oldVnode.text)) { // 如果是文本虚拟dom则设置文本\n                    nodeOps.setTextContent(elm, '');\n                }\n\n\n            } else if (oldVnode.text !== vnode.text) {\n                // 如果新旧的文本不相同则设置文本\n                nodeOps.setTextContent(elm, vnode.text);\n            }\n            if (isDef(data)) {\n                // 触发钩子\n                if (isDef(i = data.hook) && isDef(i = i.postpatch)) {\n                    i(oldVnode, vnode);\n                }\n            }\n        }\n\n        function invokeInsertHook(vnode, queue, initial) {\n            // delay insert hooks for component root nodes, invoke them after the\n            // element is really inserted\n            if (isTrue(initial) && isDef(vnode.parent)) {\n                vnode.parent.data.pendingInsert = queue;\n            } else {\n                for (var i = 0; i < queue.length; ++i) {\n                    queue[i].data.hook.insert(queue[i]);\n                }\n            }\n        }\n\n        var hydrationBailed = false;\n        // list of modules that can skip create hook during hydration because they\n        // are already rendered on the client or has no need for initialization\n        // Note: style is excluded because it relies on initial clone for future\n        // deep updates (#7063).\n        var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n        // Note: this is a browser-only function so we can assume elms are DOM nodes.\n        // ssr 渲染\n        function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {\n            var i;\n            var tag = vnode.tag;\n            var data = vnode.data;\n            var children = vnode.children;\n            inVPre = inVPre || (data && data.pre);\n            vnode.elm = elm;\n\n            if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n                vnode.isAsyncPlaceholder = true;\n                return true\n            }\n            // assert node match\n            {\n                if (!assertNodeMatch(elm, vnode, inVPre)) {\n                    return false\n                }\n            }\n            if (isDef(data)) {\n                if (isDef(i = data.hook) && isDef(i = i.init)) {\n                    i(vnode, true /* hydrating */);\n                }\n                if (isDef(i = vnode.componentInstance)) {\n                    // child component. it should have hydrated its own tree.\n                    // 初始化组建，如果没有tag标签则去更新真实dom的属性，如果有tag标签，则注册或者删除ref 然后为insertedVnodeQueue.push(vnode);确保调用插入钩子如果vnode.data.pendingInsert为反正则也为insertedVnodeQueue插入缓存 vnode.data.pendingInsert\n\n                    initComponent(vnode, insertedVnodeQueue);\n                    return true\n                }\n            }\n            if (isDef(tag)) {\n                if (isDef(children)) {\n                    // empty element, allow client to pick up and populate children\n                    if (!elm.hasChildNodes()) {\n                        createChildren(vnode, children, insertedVnodeQueue);\n                    } else {\n                        // v-html and domProps: innerHTML\n                        if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n                            if (i !== elm.innerHTML) {\n                                /* istanbul ignore if */\n                                if (\"development\" !== 'production' &&\n                                    typeof console !== 'undefined' && !hydrationBailed\n                                ) {\n                                    hydrationBailed = true;\n                                    console.warn('Parent: ', elm);\n                                    console.warn('server innerHTML: ', i);\n                                    console.warn('client innerHTML: ', elm.innerHTML);\n                                }\n                                return false\n                            }\n                        } else {\n                            // iterate and compare children lists\n                            var childrenMatch = true;\n                            var childNode = elm.firstChild;\n                            for (var i$1 = 0; i$1 < children.length; i$1++) {\n                                if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                                    childrenMatch = false;\n                                    break\n                                }\n                                childNode = childNode.nextSibling;\n                            }\n                            // if childNode is not null, it means the actual childNodes list is\n                            // longer than the virtual children list.\n                            if (!childrenMatch || childNode) {\n                                /* istanbul ignore if */\n                                if (\"development\" !== 'production' &&\n                                    typeof console !== 'undefined' && !hydrationBailed\n                                ) {\n                                    hydrationBailed = true;\n                                    console.warn('Parent: ', elm);\n                                    console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n                                }\n                                return false\n                            }\n                        }\n                    }\n                }\n                if (isDef(data)) {\n                    var fullInvoke = false;\n                    for (var key in data) {\n                        if (!isRenderedModule(key)) {\n                            fullInvoke = true;\n                            // invokeCreateHooks，循环cbs.create 钩子函数，并且执行调用，其实cbs.create 钩子函数就是platformModules中的attrs中 updateAttrs更新属性函数。如果是组件则调用componentVNodeHooks中的 create\n                            invokeCreateHooks(vnode, insertedVnodeQueue);\n                            break\n                        }\n                    }\n                    if (!fullInvoke && data['class']) {\n                        // ensure collecting deps for deep class bindings for future updates\n                        traverse(data['class']);\n                    }\n                }\n            } else if (elm.data !== vnode.text) {\n                elm.data = vnode.text;\n            }\n            return true\n        }\n\n        function assertNodeMatch(node, vnode, inVPre) {\n            if (isDef(vnode.tag)) {\n                return vnode.tag.indexOf('vue-component') === 0 || (\n                    !isUnknownElement$$1(vnode, inVPre) &&\n                    vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n                )\n            } else {\n                return node.nodeType === (vnode.isComment ? 8 : 3)\n            }\n        }\n        // patch入口是这里\n        //   vm.$el, //真正的dom\n        // vnode, //vnode\n        /*\n           __patch__(\n                        vm.$el, //真正的dom\n                        vnode, //vnode\n                        hydrating, // 空\n                        false  // removeOnly  ,\n                        vm.$options._parentElm, //父节点 空\n                        vm.$options._refElm //当前节点 空\n                   );\n          */\n        return function patch(\n            oldVnode, //旧的vonde或者是真实的dom. 或者是没有\n            vnode, //新的vode\n            hydrating,\n            removeOnly, //是否要全部删除标志\n            parentElm, //父节点 真实的dom\n            refElm//当前节点 真实的dom\n        ) {\n            console.log('===oldVnode===')\n            console.log(oldVnode)\n            debugger;\n            if (isUndef(vnode)) {　　　　//如果没有定义新的vonde\n                if (isDef(oldVnode)) { //如果没有定义旧的vonde\n                    invokeDestroyHook(oldVnode); //如果vnode不存在但是oldVnode存在，说明意图是要销毁老节点，那么就调用invokeDestroyHook(oldVnode)来进行销毁\n                }\n                return\n            }\n\n            var isInitialPatch = false;\n            var insertedVnodeQueue = []; //vonde队列 如果vnode上有insert钩子，那么就将这个vnode放入insertedVnodeQueue中作记录，到时再在全局批量调用insert钩子回调\n\n            if (isUndef(oldVnode)) { //如果没有定义旧的vonde\n                // empty mount (likely as component), create new root element 空挂载(可能作为组件)，创建新的根元素\n                isInitialPatch = true;\n                createElm( //创建节点\n                    vnode, //虚拟dom\n                    insertedVnodeQueue, //vonde队列空数组\n                    parentElm, //真实的 父节点\n                    refElm  //当前节点\n                );\n            } else {\n                var isRealElement = isDef(oldVnode.nodeType); //获取 真实的dom 类型\n                if (!isRealElement &&  //如果获取不到真实的dom 类型\n                    sameVnode(oldVnode, vnode) //sameVnode(oldVnode, vnode)2个节点的基本属性相同，那么就进入了2个节点的diff过程。\n                ) {\n                    // patch existing root node\n                    //修补现有根节点 整理 虚拟dom 也是深度优先算法一个入口\n                    patchVnode(\n                        oldVnode, // 旧的虚拟dom \n                        vnode,  // 新的虚拟dom\n                        insertedVnodeQueue, //vonde队列\n                        removeOnly  //是否要全部删除标志\n                    );\n                } else {\n                    if (isRealElement) {\n                        // mounting to a real element\n                        // check if this is server-rendered content and if we can perform\n                        // a successful hydration.\n                        if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n                            oldVnode.removeAttribute(SSR_ATTR);\n                            hydrating = true;\n                        }\n                        if (isTrue(hydrating)) {\n                            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n                                invokeInsertHook(vnode, insertedVnodeQueue, true);\n                                return oldVnode\n                            } else {\n                                warn(\n                                    'The client-side rendered virtual DOM tree is not matching ' +\n                                    'server-rendered content. This is likely caused by incorrect ' +\n                                    'HTML markup, for example nesting block-level elements inside ' +\n                                    '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                                    'full client-side render.'\n                                );\n                            }\n                        }\n                        // either not server-rendered, or hydration failed.\n                        // create an empty node and replace it\n                        oldVnode = emptyNodeAt(oldVnode);\n                    }\n\n                    // replacing existing element\n                    var oldElm = oldVnode.elm;\n                    var parentElm$1 = nodeOps.parentNode(oldElm);\n\n                    // create new node\n                    createElm(\n                        vnode,\n                        insertedVnodeQueue,\n                        // extremely rare edge case: do not insert if old element is in a\n                        // leaving transition. Only happens when combining transition +\n                        // keep-alive + HOCs. (#4590)\n                        oldElm._leaveCb ? null : parentElm$1,\n                        nodeOps.nextSibling(oldElm)\n                    );\n\n                    // update parent placeholder node element, recursively\n                    if (isDef(vnode.parent)) {\n                        var ancestor = vnode.parent;\n                        var patchable = isPatchable(vnode);\n                        while (ancestor) {\n                            for (var i = 0; i < cbs.destroy.length; ++i) {\n                                cbs.destroy[i](ancestor);\n                            }\n                            ancestor.elm = vnode.elm;\n                            if (patchable) {\n                                for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                                    cbs.create[i$1](emptyNode, ancestor);\n                                }\n                                // #6513\n                                // invoke insert hooks that may have been merged by create hooks.\n                                // e.g. for directives that uses the \"inserted\" hook.\n                                var insert = ancestor.data.hook.insert;\n                                if (insert.merged) {\n                                    // start at index 1 to avoid re-invoking component mounted hook\n                                    for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                                        insert.fns[i$2]();\n                                    }\n                                }\n                            } else {\n                                registerRef(ancestor);\n                            }\n                            ancestor = ancestor.parent;\n                        }\n                    }\n\n                    // destroy old node\n                    if (isDef(parentElm$1)) {\n                        removeVnodes(parentElm$1, [oldVnode], 0, 0);\n                    } else if (isDef(oldVnode.tag)) {\n                        invokeDestroyHook(oldVnode);\n                    }\n                }\n            }\n\n            invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n            return vnode.elm\n        }\n\n\n    }\n\n\n    //创建虚拟dom-end\n\n    /*\n     *  vue 指令\n     * */\n\n    var directives = {\n        create: updateDirectives, //创建指令\n        update: updateDirectives,  //更新指令\n        destroy: function unbindDirectives(vnode) {  //销毁指令\n            updateDirectives(vnode, emptyNode);\n        }\n    }\n\n    //更新数据\n    //oldVnode 老数据\n    //vnode 新数据 //更新指令\n    function updateDirectives(oldVnode, vnode) {\n        //判断旧的指令 或者现在指令存在么\n        if (oldVnode.data.directives || vnode.data.directives) {\n            _update(oldVnode, vnode);\n        }\n    }\n\n    //更新指令 比较oldVnode和vnode，根据oldVnode和vnode的情况 触发指令钩子函数bind，update，inserted，insert，componentUpdated，unbind钩子函数\n    function _update(oldVnode, vnode) {\n\n\n        var isCreate = oldVnode === emptyNode;  // 判断旧的指令是否等于一个空的指令\n        var isDestroy = vnode === emptyNode;// 判断现在指令是否等于一个空的指令\n        //指令字符串                 vm this上下文\n        console.log(oldVnode)\n        console.log(vnode)\n        //规范化的指令，为指令属性修正变成规范的指令数据。返回指令数据集合\n        var oldDirs = normalizeDirectives$1(\n            oldVnode.data.directives, //vonde指令对象集合\n            oldVnode.context //vm vne实例化对象，或者是组件实例化的对象\n        );\n        //规范化的指令，为指令属性修正变成规范的指令数据。返回指令数据集合\n        var newDirs = normalizeDirectives$1(\n            vnode.data.directives, //vonde指令对象集合\n            vnode.context //vm vne实例化对象，或者是组件实例化的对象\n        );\n\n        var dirsWithInsert = [];\n        var dirsWithPostpatch = [];\n\n        var key, oldDir, dir;\n        for (key in newDirs) { //循环新的指令集合\n            console.log(newDirs[key])\n\n            oldDir = oldDirs[key]; //获取旧的单个指令值\n            dir = newDirs[key];//获取新的单个指令值\n            if (!oldDir) { //如果旧的不存在了\n                // new directive, bind 新指令,绑定\n                callHook$1(\n                    dir, //新的指令值\n                    'bind', //触发bind钩子函数\n                    vnode,//新的vonde\n                    oldVnode //旧的vonde\n                );\n                if (dir.def && dir.def.inserted) { //获取指令的属性。 插入标记，指令\n                    dirsWithInsert.push(dir); //记录插入指令\n                }\n            } else {\n\n                // existing directive, update 现有的指令,更新\n                dir.oldValue = oldDir.value; // 如有指令 <div v-hello='123'></div> value=123. 如果更新了123 就是更新值\n                callHook$1(dir,\n                    'update',  //触发更新钩子函数\n                    vnode,\n                    oldVnode\n                );\n                if (dir.def && dir.def.componentUpdated) { // 组件更新\n                    dirsWithPostpatch.push(dir); //记录更新\n                }\n            }\n        }\n\n        if (dirsWithInsert.length) {\n            var callInsert = function () {\n                for (var i = 0; i < dirsWithInsert.length; i++) {\n                    callHook$1(\n                        dirsWithInsert[i], //新的指令值\n                        'inserted', //触发inserted钩子函数\n                        vnode, //新的vonde\n                        oldVnode //旧的vonde\n                    );\n                }\n            };\n            if (isCreate) { //是否是第一次创建的指令\n                mergeVNodeHook(\n                    vnode,\n                    'insert',//合并钩子函数\n                    callInsert\n                );\n            } else {\n                callInsert();\n            }\n        }\n\n        if (dirsWithPostpatch.length) {\n            mergeVNodeHook(vnode,\n                'postpatch',\n                function () {\n                    for (var i = 0; i < dirsWithPostpatch.length; i++) {\n                        callHook$1(\n                            dirsWithPostpatch[i],\n                            'componentUpdated',\n                            vnode, oldVnode);\n                    }\n                });\n        }\n\n        if (!isCreate) {\n            for (key in oldDirs) {\n                if (!newDirs[key]) { //新的vonde 中没有了指令\n                    // no longer present, unbind 不再存在，解除束缚\n                    callHook$1(\n                        oldDirs[key],\n                        'unbind', //触发unbind 钩子\n                        oldVnode,\n                        oldVnode,\n                        isDestroy\n                    );\n                }\n            }\n        }\n    }\n\n    var emptyModifiers = Object.create(null);\n\n    //规范化的指令，为指令属性修正变成规范的指令数据。返回指令数据集合\n    function normalizeDirectives$1(\n        dirs, //vonde 指令集合\n        vm //vm vne实例化对象，或者是组件实例化的对象\n    ) {\n        //创建一个空的对象\n        var res = Object.create(null);\n        //如果 指令 名称dirs 不存在 则返回一个空的对象\n        if (!dirs) {\n            // $flow-disable-line\n            return res\n        }\n\n        var i, dir;\n        for (i = 0; i < dirs.length; i++) { //循环遍历指令集合\n            dir = dirs[i];\n            if (!dir.modifiers) { //判断是否有修饰符\n                // $flow-disable-line\n                dir.modifiers = emptyModifiers; //空对象\n            }\n            //返回指令名称 或者属性name名称+修饰符\n            res[getRawDirName(dir)] = dir;\n            //指令属性，该属性由用户自定义如 bind，inserted，update，componentUpdated，unbind这些\n            dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n        }\n        // $flow-disable-line\n        return res\n    }\n\n    //返回指令名称 或者属性name名称+修饰符\n    function getRawDirName(dir) {\n        //rawName 视图中的 指令如 <div v-hello></div>  就是v-hello\n        //name 视图中的 指令如 <div v-hello></div>  就是hello\n        //modifiers 修饰符\n        console.log(dir)\n\n        return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n    }\n\n    //触发指令钩子函数\n    function callHook$1(\n        dir,  //新的指令值\n        hook, //钩子函数\n        vnode, //新的vnode\n        oldVnode, //旧的vnode\n        isDestroy\n    ) {\n        var fn = dir.def && dir.def[hook]; //获取属性上面的钩子函数\n        if (fn) {\n            try {\n                fn(\n                    vnode.elm, //真实dom\n                    dir, //指令的参数\n                    vnode, //新的vond\n                    oldVnode, //旧的vonde\n                    isDestroy //是否要销毁标记\n                );\n            } catch (e) {\n                handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n            }\n        }\n    }\n\n    var baseModules = [\n        ref,  //ref创建，更新 ， 销毁 函数\n        directives //自定义指令 创建 ，更新，销毁函数\n    ]\n\n    /*\n     *\n     * 更新属性，比较新的vnode和旧的oldVnode中的属性值，如果不相等则设置属性,就更新属性值，如果新的vnode 属性中没有了则删除该属性\n     *\n     * */\n\n    function updateAttrs(oldVnode, vnode) {\n        debugger\n        var opts = vnode.componentOptions;  //获取组件的拓展参数\n        if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {  // 判断是否定义有拓展参数，并且需要Ctor.options.inheritAttrs 不等于 false的 时候才执行下面的代码\n            return\n        }\n        //如果 oldVnode和vnode 没有定义有attrs 属性  也不会执行下面的代码\n        if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n            return\n        }\n        var key, cur, old;\n        var elm = vnode.elm;\n        var oldAttrs = oldVnode.data.attrs || {};  //获取旧的vonde attrs\n        var attrs = vnode.data.attrs || {}; //获取新的vonde attrs\n        // clone observed objects, as the user probably wants to mutate it\n        ////克隆观察到的对象，因为用户可能希望对其进行变异\n\n        if (isDef(attrs.__ob__)) { //判断attrs.__ob__ 如果定义了 就执行 从新克隆一个\n            attrs = vnode.data.attrs = extend({}, attrs);\n        }\n\n        for (key in attrs) {  //循环attrs\n            cur = attrs[key];  //获取到 attrs 值\n            old = oldAttrs[key]; //获取到旧的 attrs 值\n            if (old !== cur) {  //如果他们两值不相等的时候就设置值\n                //设置属性\n                setAttr(elm, key, cur);\n            }\n        }\n        // #4391: in IE9, setting type can reset value for input[type=radio] 在IE9中，设置类型可以重置输入值[type=radio]\n        // #6666: IE/Edge forces progress value down to 1 before setting a max 在设置最大值之前，IE/Edge会将进度值降低到1\n        /* istanbul ignore if */\n\n        if ((isIE || isEdge) && attrs.value !== oldAttrs.value) { //如果是ie浏览器，或者是edge浏览器 新的值和旧的值不相等的时候\n            setAttr(elm, 'value', attrs.value); //设置新的value值\n        }\n        for (key in oldAttrs) { //遍历循环旧的属性\n            if (isUndef(attrs[key])) { // 如果新的属性中 还含有旧的属性key 并且有值的时候\n                if (isXlink(key)) { //判断是否是xml\n                    elm.removeAttributeNS(xlinkNS, getXlinkProp(key)); //设置属性\n                } else if (!isEnumeratedAttr(key)) { //如果不是 'contenteditable,draggable,spellcheck' 属性\n                    elm.removeAttribute(key); //设置属性\n                }\n            }\n        }\n    }\n\n    //设置属性\n    function setAttr(el, key, value) {\n        //如果dom点 tag标签 含有- 则是自定义标签\n        if (el.tagName.indexOf('-') > -1) {\n            //设置属性\n            baseSetAttr(el, key, value);\n\n        } else if (isBooleanAttr(key)) {   //检查是否是html中的布尔值属性  就是该属性只有 true 和 false\n            // set attribute for blank value 为空值设置属性\n            // e.g. <option disabled>Select one</option>\n            if (isFalsyAttrValue(value)) { //判断val 是否是 null 或者 false\n                el.removeAttribute(key); //删除属性\n            } else {\n                // technically allowfullscreen is a boolean attribute for <iframe>, 从技术上讲，allowfullscreen是一个布尔属性\n                // but Flash expects a value of \"true\" when used on <embed> tag  但是Flash希望在<embed>标签上使用时，其值为\"true\"\n                //判断标签是否是EMBED 如果是 true 如果不是则给标签key就行了\n                value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n                    ? 'true'\n                    : key;\n                //设置属性\n                el.setAttribute(key, value);\n            }\n        } else if (isEnumeratedAttr(key)) { //判断是否是contenteditable，draggable，spellcheck 这三个属性的其中一个\n            //设置属性\n            el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n        } else if (isXlink(key)) {   //判断是否是xmlns 属性 例子 <bookstore xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n            if (isFalsyAttrValue(value)) { //value 没有值\n                //xml 则用个方法删除属性\n                el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n            } else {\n                //设置xml 属性\n                el.setAttributeNS(xlinkNS, key, value);\n            }\n        } else {\n            //设置基本属性\n            baseSetAttr(el, key, value);\n        }\n    }\n\n    // 设置基本的属性\n    //设置属性，并且判断是否是ie浏览器 如果是 并且不是ie九的时候 更新input事件\n    function baseSetAttr(el, //dom节点\n        key,  //属性的 key\n        value //属性的值\n    ) {\n\n        if (isFalsyAttrValue(value)) {  // 判断value 是否是 null 或者 false\n            el.removeAttribute(key);  //从dom中删除属性\n        } else {\n            // #7138: IE10 & 11 fires input event when setting placeholder on IE10和11在设置占位符时触发输入事件\n            // <textarea>... block the first input event and remove the blocker 阻塞第一个输入事件并删除该阻塞程序\n            // immediately.\n            /* istanbul ignore if */\n            if (\n                isIE &&  //如果是is\n                !isIE9 &&  //如果不是ie9  不支持ie9\n                el.tagName === 'TEXTAREA' &&  //如果标签是TEXTAREA\n                key === 'placeholder' && //如果key等于html5文本提示输入的placeholder\n                !el.__ieph  //__ieph 等于假的 标志位\n            ) {\n                var blocker = function (e) {\n                    // 如果有多个相同类型事件的事件监听函数绑定到同一个元素，当该类型的事件触发时，它们会按照被添加的顺序执行。如果其中某个监听函数执行了 event.stopImmediatePropagation() 方法，则当前元素剩下的监听函数将不会被执行。\n                    // stopImmediatePropagation 则是阻止事件冒泡\n                    e.stopImmediatePropagation();\n                    //删除input 事件\n                    el.removeEventListener('input', blocker);\n                };\n                //添加新的input 事件\n                el.addEventListener('input', blocker);\n                // $flow-disable-line\n                //标志已经添加过 或者更新过input事件\n                el.__ieph = true;\n                /* IE placeholder patched  占位符打补丁 */\n            }\n            //设置属性\n            el.setAttribute(key, value);\n        }\n    }\n\n    var attrs = {\n        create: updateAttrs, //创建属性\n        update: updateAttrs  //更新属性\n    }\n\n    /*\n     * 更新 真实dom的  calss\n     * */\n\n    function updateClass(oldVnode, vnode) {\n        var el = vnode.elm;  //获取dom节点\n        var data = vnode.data; //获取新的 vnode数据\n        var oldData = oldVnode.data; //获取旧的 oldVnode 数据\n        if (\n            isUndef(data.staticClass) && //如果没有定义静态的 staticClass\n            isUndef(data.class) && //没有定义calss\n            (\n                isUndef(oldData) || //如果旧的oldData 没有定义\n                (\n                    isUndef(oldData.staticClass) &&  //旧的oldData staticClass  class 没有定义\n                    isUndef(oldData.class)\n                )\n            )\n        ) {\n            //返回去 不执行下面的代码\n            return\n        }\n        //class 转码获取vonde 中的staticClass 静态class  和class动态class转义成真实dom需要的class格式。然后返回class字符串\n\n        var cls = genClassForVnode(vnode);\n\n        // handle transition classes\n        var transitionClass = el._transitionClasses;\n        if (isDef(transitionClass)) {\n            cls = concat(cls, stringifyClass(transitionClass));\n        }\n\n        // set the class _prevClass 上一个css表示是否已经更新过\n        if (cls !== el._prevClass) {\n            el.setAttribute('class', cls);\n            el._prevClass = cls;\n        }\n    }\n\n    var klass = {\n        create: updateClass,\n        update: updateClass\n    }\n\n    /*\n     匹配 ) 或 . 或 + 或 - 或 _ 或 $ 或 ]\n     */\n    var validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n    /*处理value 解析成正确的value，把过滤器 转换成vue 虚拟dom的解析方法函数 比如把过滤器 ' ab | c | d' 转换成 _f(\"d\")(_f(\"c\")(ab))\n     * 表达式中的过滤器解析 方法\n     * @param {*} exp\n     */\n    console.log(parseFilters(' ab | c | d')) //转化成 _f(\"d\")(_f(\"c\")(ab))\n    function parseFilters(exp) {\n        // 是否在 ''中\n        var inSingle = false;\n        // 是否在 \"\" 中\n        var inDouble = false;\n        // 是否在 ``\n        var inTemplateString = false;\n        //  是否在 正则 \\\\ 中\n        var inRegex = false;\n        // 是否在 {{ 中发现一个 culy加1 然后发现一个 } culy减1 直到culy为0 说明 { .. }闭合\n        var curly = 0;\n        // 跟{{ 一样 有一个 [ 加1 有一个 ] 减1\n        var square = 0;\n        // 跟{{ 一样 有一个 ( 加1 有一个 ) 减1\n        var paren = 0;\n        var lastFilterIndex = 0;\n        var c, prev, i, expression, filters;\n\n        for (i = 0; i < exp.length; i++) {\n            prev = c;\n            c = exp.charCodeAt(i);\n            console.log('c =' + exp[i])\n            console.log('c === 0x7C=' + (c === 0x7C))\n            console.log('exp.charCodeAt(i + 1) !== 0x7C=' + (exp.charCodeAt(i + 1) !== 0x7C))\n            console.log('exp.charCodeAt(i - 1) !== 0x7C=' + (exp.charCodeAt(i - 1) !== 0x7C))\n            console.log('curly=' + (curly))\n            console.log('!curly=' + (!curly))\n            console.log('square=' + (square))\n            console.log('!square=' + (!square))\n            console.log('!paren=' + (!paren))\n            console.log('最后一个=' + (c === 0x7C && // pipe\n                exp.charCodeAt(i + 1) !== 0x7C &&\n                exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren))\n\n\n            if (inSingle) {\n                //  '  \\\n                if (c === 0x27 && prev !== 0x5C) {\n                    inSingle = false;\n                }\n            } else if (inDouble) {\n                // \" \\\n                if (c === 0x22 && prev !== 0x5C) {\n                    inDouble = false;\n                }\n            } else if (inTemplateString) {\n                //  `\n                if (c === 0x60 && prev !== 0x5C) {\n                    inTemplateString = false;\n                }\n            } else if (inRegex) {\n                // 当前在正则表达式中  /开始\n                //  / \\\n                if (c === 0x2f && prev !== 0x5C) {\n                    inRegex = false;\n                }\n            } else if (\n                // 如果在 之前不在 ' \" ` / 即字符串 或者正则中\n                // 那么就判断 当前字符是否是 |\n                //  如果当前 字符为 |\n                // 且 不在 { } 对象中\n                // 且 不在 [] 数组中\n                // 且不在  () 中\n                // 那么说明此时是过滤器的一个 分界点\n\n                c === 0x7C && // |\n                exp.charCodeAt(i + 1) !== 0x7C &&\n                exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren\n            ) {\n\n\n                /*\n                 如果前面没有表达式那么说明这是第一个 管道符号 \"|\"\n                 再次遇到 | 因为前面 expression = 'message '\n                 执行  pushFilter()\n                 */\n                if (expression === undefined) {\n                    // first filter, end of expression\n                    // 过滤器表达式 就是管道符号之后开始\n                    lastFilterIndex = i + 1;\n                    // 存储过滤器的 表达式\n                    expression = exp.slice(0, i).trim(); //这里匹配如果字符串是 'ab|c' 则把ab匹配出来\n                    console.log(expression)\n                } else {\n                    pushFilter();\n                }\n            } else {\n                switch (c) {\n                    case 0x22:\n                        inDouble = true;\n                        break                 // 匹配\"\n                    case 0x27:\n                        inSingle = true;\n                        break                // 匹配'\n                    case 0x60:\n                        inTemplateString = true;\n                        break                // 匹配`\n                    case 0x28:\n                        paren++;\n                        break                 // 匹配(\n                    case 0x29:\n                        paren--;\n                        break                 // 匹配)\n                    case 0x5B:\n                        square++;\n                        break                // 匹配[\n                    case 0x5D:\n                        square--;\n                        break                // 匹配]\n                    case 0x7B:\n                        curly++;\n                        break                 // 匹配 {\n                    case 0x7D:\n                        curly--;\n                        break                 //  匹配 }\n                    case 0x5C:\n                        break                //   匹配   \\\n                    case 0x2f:\n                        break;                //   匹配   /\n\n                    case 0x7C:               //   匹配   |\n                        break;\n                }\n\n\n                if (c === 0x2f) { //  /\n                    var j = i - 1;\n                    var p = (void 0);\n                    // find first non-whitespace prev char\n                    //查找第一个非空白的prev字符\n                    for (; j >= 0; j--) {\n                        p = exp.charAt(j);\n                        if (p !== ' ') {\n                            break\n                        }\n                    }\n                    if (!p || !validDivisionCharRE.test(p)) {\n                        inRegex = true;\n                    }\n                }\n\n\n            }\n\n\n        }\n\n        if (expression === undefined) {\n            expression = exp.slice(0, i).trim();\n        } else if (lastFilterIndex !== 0) {\n            pushFilter();\n        }\n        // 获取当前过滤器的 并将其存储在filters 数组中\n        //  filters = [ 'filterA' , 'filterB']\n        function pushFilter() {\n            (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n            lastFilterIndex = i + 1;\n        }\n\n        if (filters) {\n            console.log(filters)\n            for (i = 0; i < filters.length; i++) {\n                //把过滤器封装成函数 虚拟dom需要渲染的函数\n                expression = wrapFilter(expression, filters[i]);\n            }\n        }\n        console.log(expression)\n\n        //返回值\n        return expression\n    }\n\n    /*\n     生成过滤器的 表达式字符串\n     如上面的\n     exp = message\n     filters = ['filterA','filterB(arg1,arg2)']\n     第一步  以exp 为入参 生成 filterA 的过滤器表达式字符串  _f(\"filterA\")(message)\n     第二步 以第一步字符串作为入参 生成第二个过滤器的表达式字符串 _f(\"filterB\")(_f(\"filterA\")(message),arg1,arg2)\n     => _f(\"filterB\")(_f(\"filterA\")(message),arg1,arg2)\n     * @param {string} exp   上一个过滤器的值 没有就是 表达式的值\n     * @param {string} filter\n     * @returns {string}\n     */\n    console.log(wrapFilter('abc', 'defg(hijk)')) //结果 _f(\"defg\")(abc,hijk)\n    function wrapFilter(exp, filter) {\n        var i = filter.indexOf('('); //返回字符串第一次出现索引的位置\n        console.log('i=' + i)\n        if (i < 0) {\n            // _f: resolveFilter\n            return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\") //闭包\n        } else {\n            //name 是 从字符串开始到(结束的字符串,不包含(\n            var name = filter.slice(0, i); //截取字符串 arrayObject.slice(start,end)\n            console.log('==name==')\n            console.log(name)\n\n            //args是从(开始匹配，到字符串末端，不包含(\n            var args = filter.slice(i + 1); //如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。\n            console.log('==args==')\n            console.log(args)\n            return (\n                \"_f(\\\"\" + name + \"\\\")(\" + exp +\n                (\n                    args !== ')' ?\n                        ',' + args\n                        : args\n                )\n            )\n        }\n    }\n\n\n    /*  */\n\n    function baseWarn(msg) {\n        console.error((\"[Vue compiler]: \" + msg));\n    }\n\n    //循环过滤数组或者对象的值，根据key循环 过滤对象或者数组[key]值，如果不存在则丢弃，如果有相同多个的key值，返回多个值的数组\n    function pluckModuleFunction(\n        modules, //数组或者对象\n        key //key\n    ) {\n        return modules ?\n            modules.map(function (m) {\n                return m[key]; // 获取modules[key] 值\n            }).filter(function (_) {\n                return _;  //过滤modules[key] 值，如果不存在则丢弃\n            }) : []\n    }\n    //在虚拟dom中添加prop属性\n    function addProp(el, name, value) {\n        (el.props || (el.props = [])).push({ name: name, value: value });\n        el.plain = false;\n    }\n\n    //添加attrs属性\n    function addAttr(el, name, value) {\n        (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n        el.plain = false;\n    }\n\n    // add a raw attr (use this in preTransforms)\n    //添加原始attr(在预转换中使用)\n    function addRawAttr(el, name, value) {\n        el.attrsMap[name] = value;\n        el.attrsList.push({ name: name, value: value });\n    }\n\n\n\n\n    //为虚拟dom 添加一个 指令directives属性 对象\n    function addDirective(\n        el, //虚拟dom\n        name, //获取 view 原始属性的名称 不包含 v- : @的\n        rawName, // 获取 view 原始属性的名称 包含 v- : @的\n        value, //属性view 属性上的值\n        arg,  // efg:hig 属性名称冒号后面多出来的标签\n        modifiers\n    ) {\n        (el.directives || (el.directives = [])).push({\n            name: name,\n            rawName: rawName,\n            value: value,\n            arg: arg,\n            modifiers: modifiers\n        });\n        el.plain = false;\n    }\n\n\n    //为虚拟dom添加events 事件对象属性，如果添加@click='clickEvent' 则此时 虚拟dom为el.events.click.value=\"clickEvent\"\n    //或者虚拟dom添加nativeEvents 事件对象属性，如果添加@click.native='clickEvent' 则此时 虚拟dom为el.nativeEvents.click.value=\"clickEvent\"\n    function addHandler(\n        el, //虚拟dom\n        name, //name 事件名称 事件类型\n        value, //事件函数\n        modifiers, //事件类型状态状态\n        important, // 根据important为true 把事件添加在前面 假就添加在尾部\n        warn //警告日志\n    ) {\n\n        modifiers = modifiers || emptyObject;\n        // warn prevent and passive modifier\n        /* istanbul ignore if */\n        if (\n            \"development\" !== 'production' && warn &&\n            modifiers.prevent && modifiers.passive\n        ) {\n            warn(\n                'passive and prevent can\\'t be used together. ' +\n                'Passive handler can\\'t prevent default event.'\n            );\n        }\n\n        // check capture modifier 检查捕获修饰符\n        if (modifiers.capture) {\n            delete modifiers.capture;\n            name = '!' + name; // mark the event as captured 将事件标记为捕获\n        }\n        if (modifiers.once) { //将事件标记为一次\n            delete modifiers.once;\n            name = '~' + name; // mark the event as once 将事件标记为一次\n        }\n        /* istanbul ignore if */\n        if (modifiers.passive) {\n            delete modifiers.passive;\n            name = '&' + name; // mark the event as passive 将事件标记为被动的\n        }\n\n        // normalize click.right and click.middle since they don't actually fire\n        // this is technically browser-specific, but at least for now browsers are\n        // the only target envs that have right/middle clicks.\n        //点击正常化。并点击。中间，因为它们实际上不会开火\n        //这在技术上是特定于浏览器的，但至少现在浏览器是\n        //唯一有右/中点击的目标环境。\n        if (name === 'click') {//判断是否是点击事件\n            if (modifiers.right) { //判断是否是鼠标右击\n                name = 'contextmenu';\n                delete modifiers.right;\n            } else if (modifiers.middle) {//如果是鼠标左击\n                name = 'mouseup';  //变成鼠标抬起事件\n            }\n        }\n\n        var events;\n        if (modifiers.native) { // 判断是有原生事件修饰符 通俗点讲：就是在父组件中给子组件绑定一个原生的事件，就将子组件变成了普通的HTML标签，不加'. native'事件是无法触  发的。\n            /*\n            * 比如<my-component @click=\"outClick\"></my-component> 这样是不会触发事件的\n            * 需要加修饰符<my-component @click.native=\"outClick\"></my-component> 这样是不会触发事件的\n            * */\n            delete modifiers.native;\n            events = el.nativeEvents || (el.nativeEvents = {}); //获取修饰符事件，如果虚拟dom没有nativeEvents 这个属性则为他添加\n        } else {\n            events = el.events || (el.events = {}); //直接获取事件对象，如果虚拟dom没有events属性则为他添加一个\n        }\n\n        //此时下面操作events 就相当于操作 el.nativeEvents 或者 el.events 对象\n\n        var newHandler = {\n            value: value.trim() //把事件函数 去除两边空格\n        };\n        if (modifiers !== emptyObject) { //如果 modifiers 不是一个空的对象\n            newHandler.modifiers = modifiers;\n        }\n\n        var handlers = events[name]; //获取事件的值。\n        /* istanbul ignore if */\n        if (Array.isArray(handlers)) { //判断事件是否是数组\n            //根据important 判断在前面添加事件还是在末端加\n            important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n\n        } else if (handlers) { //如果handlers 已经存在，但是不是数组，说明现在是有两个事件\n            //将handlers 修改为数组，新的事件和旧的事件一起\n            events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n        } else {\n            //如果handlers 不存在 则直接获取事件，说明该事件同名的只有一个，\n            events[name] = newHandler;\n        }\n\n        el.plain = false;\n    }\n\n\n\n\n\n\n\n\n\n    //  获取 :属性 或者v-bind:属性，或者获取属性 移除传进来的属性name，并且返回获取到 属性的值\n    function getBindingAttr(el, //虚拟dom  vonde\n        name, //name\n        getStatic //\n    ) {\n        //获取 :属性 或者v-bind:属性\n        var dynamicValue = getAndRemoveAttr(el, ':' + name) ||\n            getAndRemoveAttr(el, 'v-bind:' + name);\n        console.log(el)\n        console.log(dynamicValue)\n        if (dynamicValue != null) {\n            /*\n             *处理value 解析成正确的value，把过滤器 转换成vue 虚拟dom的解析方法函数 比如把过滤器 ' ab | c | d' 转换成 _f(\"d\")(_f(\"c\")(ab))\n             * 表达式中的过滤器解析 方法\n             */\n            let parseFiltersValue = parseFilters(dynamicValue);\n            console.log(parseFiltersValue)\n            return parseFiltersValue\n        } else if (getStatic !== false) {\n            //移除传进来的属性name，并且返回获取到 属性的值\n            var staticValue = getAndRemoveAttr(el, name);\n            if (staticValue != null) {\n                //转换成字符串\n                return JSON.stringify(staticValue)\n            }\n        }\n    }\n\n    // note: this only removes the attr from the Array (attrsList) so that it\n    // doesn't get processed by processAttrs.\n    // By default it does NOT remove it from the map (attrsMap) because the map is\n    // needed during codegen.\n    //注意:这只是从数组(attrsList)中移除attr\n    //不会被processAttrs处理。\n    //默认情况下，它不会从地图(attrsMap)中删除它，因为地图是\n    //在codegen期间需要。\n\n    //移除传进来的属性name，并且返回获取到 属性的值\n    function getAndRemoveAttr(el, //el  虚拟dom\n        name,//属性名称 需要删除的属性 name，获取值的name属性\n        removeFromMap //是否要删除属性的标志\n    ) {\n        var val;\n        if ((val = el.attrsMap[name]) != null) {\n            var list = el.attrsList; //按地址引用\n            for (var i = 0, l = list.length; i < l; i++) {\n                if (list[i].name === name) {\n                    list.splice(i, 1); //按地址引用 删除一个属性name\n                    break\n                }\n            }\n        }\n        if (removeFromMap) { //是否要删除属性的标志\n            delete el.attrsMap[name];\n        }\n        return val\n    }\n\n    /*  */\n\n    /**\n     * Cross-platform code generation for component v-model\n     * 组件v-model的跨平台代码生成 更新$$v 数据\n     *  为虚拟dom添加model属性，\n     */\n    function genComponentModel(\n        el, //虚拟dom\n        value, //绑定v-model 的值\n        modifiers\n    ) {\n        var ref = modifiers || {};\n        var number = ref.number; //数字\n        var trim = ref.trim; //去除字符串\n        // 给baseValueExpression赋值一个默认的字符串\n        var baseValueExpression = '$$v';\n        var valueExpression = baseValueExpression;\n        if (trim) {\n            // 判断类型是否为字符串，如果是使用去空格方法，如果不是返回原值\n            valueExpression =\n                \"(typeof \" + baseValueExpression + \" === 'string'\" +\n                \"? \" + baseValueExpression + \".trim()\" +\n                \": \" + baseValueExpression + \")\";\n        }\n        if (number) { //如果是数字 则用数字渲染方法\n            valueExpression = \"_n(\" + valueExpression + \")\";\n        }\n\n        /*\n         *创赋值代码，转义字符串对象拆分字符串对象  把后一位key分离出来\n        * 返回 key\"=\" value\n        * 或者 $set(object[info],key,valueExpression)\n        */\n        var assignment = genAssignmentCode(\n            value, //绑定v-model 的属性值\n            valueExpression //值\n        );\n        console.log(value)\n        console.log(valueExpression)\n        console.log(baseValueExpression)\n        console.log(assignment)\n\n\n        //如果 trim不存在，number 不存在 则 valueExpression 默认为$$v\n        //回调函数是 $set(object[info],key,$$v) 更新$$v的值\n        el.model = {\n            value: (\"(\" + value + \")\"), // 绑定v-model 的值\n            expression: (\"\\\"\" + value + \"\\\"\"), //绑定v-model 的值\n            //函数  $set(object[info],key,$$v) //$set更新值函数\n            callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n        };\n\n\n    }\n\n    /**\n     * Cross-platform codegen helper for generating v-model value assignment code.\n     * 用于生成v-model值赋值代码的跨平台codegen助手。\n     * 创赋值代码，转义字符串对象拆分字符串对象  把后一位key分离出来\n     *\n     * 返回 key\"=\" value\n     * 或者 $set(object[info],key,value)\n     */\n    function genAssignmentCode(\n        value, //key\n        assignment //值\n    ) {\n\n        //转义字符串对象拆分字符串对象  把后一位key分离出来\n        // 两种情况分析1 如果数据是object.info.name的情况下 则返回是 {exp: \"object.info\",key: \"name\"}\n        //如果数据是object[info][name]的情况下 则返回是 {exp: \"object[info]\",key: \"name\"}\n        var res = parseModel(value);\n        if (res.key === null) {\n            return (value + \"=\" + assignment) // 没有key就是当前值，返回当前值的key\n        } else {\n            return (\"$set(\" + (res.exp) + \", \" + (res.key) + \", \" + assignment + \")\")  // 返回更新值 '$set(object[info],key,value)'\n        }\n    }\n\n    /**\n     * Parse a v-model expression into a base path and a final key segment.\n     * Handles both dot-path and possible square brackets.\n     * 将v-model表达式解析为基路径和最后一个键段。\n     *处理点路径和可能的方括号。\n     *\n     * Possible cases:\n     * 可能的情况下:\n     *\n     * - test\n     * - test[key]\n     * - test[test1[key]]\n     * - test[\"a\"][key]\n     * - xxx.test[a[a].test1[key]]\n     * - test.xxx.a[\"asa\"][test1[key]]\n     *\n     */\n\n    var len; //字符串长度\n    var str; //字符串\n    var chr; //字符串的编码\n    var index$1; //循环的索引\n    var expressionPos; //匹配到   符号 [ 的开始索引\n    var expressionEndPos; // 如果匹配上一对 [] 的时候就跳出循环  则是匹配\n\n    console.log(parseModel('object'))\n    console.log(parseModel('object[info][name]'))\n    console.log(parseModel('object.info.name'))\n    console.log(parseModel('test[key]'))\n    console.log(parseModel('test[test1[key]]'))\n    console.log(parseModel('test[\"a\"][key]'))\n    console.log(parseModel('xxx.test[a[a].test1[key]]'))\n    console.log(parseModel('test.xxx.a[\"asa\"][test1[key]]'))\n\n    //转义字符串对象拆分字符串对象  把后一位key分离出来\n    // 两种情况分析1 如果数据是object.info.name的情况下 则返回是 {exp: \"object.info\",key: \"name\"}\n    //如果数据是object[info][name]的情况下 则返回是 {exp: \"object[info]\",key: \"name\"}\n    function parseModel(val) {\n        // Fix https://github.com/vuejs/vue/pull/7730\n        // allow v-model=\"obj.val \" (trailing whitespace)\n        val = val.trim(); //值\n        len = val.length; //获取长度\n        //lastIndexOf 方法可返回一个指定的字符串值最后出现的位置\n        if (\n            val.indexOf('[') < 0 || //这个字符串没有出现过[\n            val.lastIndexOf(']') < len - 1 //这个字符串 没有出现过]这个符号  或者是出现位置不是在最后一位的时候\n        ) {\n            index$1 = val.lastIndexOf('.'); //获取最后一位出现 . 的位置\n            if (index$1 > -1) { //说明有点.\n                return {\n                    exp: val.slice(0, index$1), //丢弃最后一位 比如data.object.info.age获取data.object.info\n                    key: '\"' + val.slice(index$1 + 1) + '\"' //获取最后一位 age\n                }\n            } else {\n                return {\n                    exp: val, //如果没有点 则只有一个值\n                    key: null\n                }\n            }\n        }\n\n        str = val;\n        index$1 = expressionPos = expressionEndPos = 0;\n        // 索引和字符串长度比较 如果索引大于或者等于字符串的时候返回真\n\n        while (!eof()) { //循环获取字符串的编码 直到把字符编码循环完\n            //获取字符串的编码\n            chr = next();\n            /* istanbul ignore if */\n\n            if (isStringStart(chr)) { //如果是 \" 或者 ' 的时候返回真\n                parseString(chr); //循环匹配一对''或者\"\"符号\n            } else if (chr === 0x5B) { // 符号 [\n                //检测 匹配[] 一对这样的=括号\n                parseBracket(chr);\n            }\n        }\n\n        return {\n            exp: val.slice(0, expressionPos),\n            key: val.slice(expressionPos + 1, expressionEndPos)\n        }\n    }\n\n    //索引加加 获取字符串的编码\n    function next() {\n        //charCodeAt() 方法可返回指定位置的字符的 Unicode 编码。这个返回值是 0 - 65535 之间的整数。\n        return str.charCodeAt(++index$1)\n    }\n\n    // 索引和字符串长度比较 如果索引大于或者等于字符串的时候返回真\n    function eof() {\n        //索引和字符串长度比较\n        return index$1 >= len\n    }\n\n    //如果是 \" 或者 ' 的时候返回真\n    function isStringStart(chr) {\n        //    \"              '\n        return chr === 0x22 || chr === 0x27\n    }\n\n    //检测 匹配[] 一对这样的=括号\n    function parseBracket(chr) {\n        var inBracket = 1;\n        expressionPos = index$1;\n        while (!eof()) {\n            chr = next();\n            if (isStringStart(chr)) { //如果是 \" 或者 ' 的时候返回真\n                parseString(chr); //循环匹配一对''或者\"\"符号\n                continue\n            }\n            if (chr === 0x5B) { // 匹配上\n                inBracket++;\n            }\n            if (chr === 0x5D) {  //匹配上 ]\n                inBracket--;\n            }\n            if (inBracket === 0) {  //如果匹配上一对 [] 的时候就跳出循环\n                expressionEndPos = index$1;\n                break\n            }\n        }\n    }\n    //循环匹配一对''或者\"\"符号\n    function parseString(chr) {\n        var stringQuote = chr; //记录当前的'或者\"\n        while (!eof()) {\n            chr = next();\n            if (chr === stringQuote) {  //当他们匹配上一对的时候退出循环\n                break\n            }\n        }\n    }\n\n    /*  */\n\n    var warn$1;\n\n    // in some cases, the event used has to be determined at runtime\n    // so we used some reserved tokens during compile.\n    //在某些情况下，使用的事件必须在运行时确定\n    //因此我们在编译期间使用了一些保留的令牌。\n    var RANGE_TOKEN = '__r'; //虚拟dom渲染函数\n    var CHECKBOX_RADIO_TOKEN = '__c';\n    //根据判断虚拟dom的标签类型是什么？给相应的标签绑定 相应的 v-model 双数据绑定代码函数\n    function model(\n        el, //虚拟dom\n        dir, // v-model 属性的key和值\n        _warn //警告日志函数\n    ) {\n        console.log(el)\n        console.log(dir)\n        // {name: \"model\"\n        //     rawName: \"v-model\"\n        //     value: \"item.url\"}\n        warn$1 = _warn;\n        var value = dir.value; //\n        var modifiers = dir.modifiers;\n        var tag = el.tag;\n        var type = el.attrsMap.type;\n\n        {\n            // inputs with type=\"file\" are read only and setting the input's\n            // value will throw an error.\n            if (tag === 'input' && type === 'file') {\n                warn$1(\n                    \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n                    \"File inputs are read only. Use a v-on:change listener instead.\"\n                );\n            }\n        }\n        //根据表单元素的tag标签以及type属性的值，调用不同的方法也就验证了官网所说的“随表单控件类型不同而不同。”这里调用的就是genDefaultModel().\n        if (el.component) { //如果是组件\n            // 组件v-model的跨平台代码生成 更新$$v 数据\n            // *  为虚拟dom添加model属性，\n            genComponentModel(el, value, modifiers);\n            // 组件v-model不需要额外的运行时\n            // component v-model doesn't need extra runtime\n            return false\n        } else if (tag === 'select') {\n            //为虚拟dom select添加change 函数 ，change函数调用 set 去更新 select选中数据的值\n            genSelect(el, value, modifiers);\n        } else if (tag === 'input' && type === 'checkbox') {\n            //为input type=\"checkbox\" 虚拟dom添加 change 函数 ，根据v-model是否是数组，调用change函数，调用 set 去更新 checked选中数据的值\n            genCheckboxModel(el, value, modifiers);\n        } else if (tag === 'input' && type === 'radio') {\n            //为虚拟dom  inpu标签 type === 'radio' 添加change 事件 更新值\n            genRadioModel(el, value, modifiers);\n        } else if (tag === 'input' || tag === 'textarea') {\n            //为虚拟dom  inpu标签   事件 更新值\n            genDefaultModel(el, value, modifiers);\n        } else if (!config.isReservedTag(tag)) {   //保留标签 判断是不是真的是 html 原有的标签 或者svg标签 如果不是则表示是组件 标签\n            // 组件v-model的跨平台代码生成 更新$$v 数据\n            // *  为虚拟dom添加model属性，\n            genComponentModel(el, value, modifiers);\n            // component v-model doesn't need extra runtime\n            return false\n        } else {\n            warn$1(\n                \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n                \"v-model is not supported on this element type. \" +\n                'If you are working with contenteditable, it\\'s recommended to ' +\n                'wrap a library dedicated for that purpose inside a custom component.'\n            );\n        }\n\n        // ensure runtime directive metadata\n        return true\n    }\n\n\n    //为input type=\"checkbox\" 虚拟dom添加 change 函数 ，根据v-model是否是数组，调用change函数，调用 set 去更新 checked选中数据的值\n    function genCheckboxModel(\n        el, //虚拟dom\n        value, //v-model view的属性值\n        modifiers\n    ) {\n        console.log(el)\n\n        var number = modifiers && modifiers.number;\n        var valueBinding = getBindingAttr(el, 'value') || 'null'; //获取 表单的 value属性值 如果 view 是 value=\"1\"\n        var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n        var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n\n        /*\n         view 绑定的 v-model=\"item.selected\" 第二个参数为\n         *  Array.isArray(item.selected)?_i(item.selected,\"index\")>-1:(item.selected)\n         * */\n\n        console.log(\"Array.isArray(\" + value + \")\" +\n            \"?_i(\" + value + \",\" + valueBinding + \")>-1\" +\n            (\n                trueValueBinding === 'true' ?\n                    (\":(\" + value + \")\")\n                    : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n            ))\n\n        //在虚拟dom中添加prop属性\n        addProp(el,\n            'checked',\n            \"Array.isArray(\" + value + \")\" +\n            \"?_i(\" + value + \",\" + valueBinding + \")>-1\" +\n            (\n                trueValueBinding === 'true' ?\n                    (\":(\" + value + \")\")\n                    : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n            )\n        );\n\n\n\n\n\n\n\n        console.log(\"var $$a=\" + value + \",\" +\n            '$$el=$event.target,' +\n            \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n            'if(Array.isArray($$a)){' +\n            \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n            '$$i=_i($$a,$$v);' +\n            \"if($$el.checked){$$i<0&&(\" + (genAssignmentCode(value, '$$a.concat([$$v])')) + \")}\" +\n            \"else{$$i>-1&&(\" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + \")}\" +\n            \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\")\n        /*\n         view 绑定的 v-model=\"item.selected\" 第二个参数为\n\n         var $$a = item.selected,  //属性值  v-model view的属性值  item.selected是否是数组\n         $$el = $event.target,  //目标dom 真实dom\n         $$c = $$el.checked ? (true) : (false);  //是否有选中\n         if (Array.isArray($$a)) {\n                     var $$v = \"1\",  //获取 表单的 value属性值 如果 view 是 value=\"1\"\n                     $$i = _i($$a, $$v); //获取到数组的索引，如果没有匹配上则是新的数据\n                     if ($$el.checked) {\n                                  //更新数组的值\n                                 $$i < 0 && ($set(item, \"selected\", $$a.concat([$$v])))\n                     } else {\n                              //截取数组 更新获取到索引的数组 从匹配到到最后一位\n                                 $$i > -1 && ($set(item, \"selected\", $$a.slice(0, $$i).concat($$a.slice($$i + 1))))\n                     }\n         } else {\n                     $set(item, \"selected\", $$c)\n         }\n         * */\n\n        //更新函数绑定change事件\n        addHandler(\n            el, //虚拟dom\n            'change',  //事件\n            \"var $$a=\" + value + \",\" +\n            '$$el=$event.target,' +\n            \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n            'if(Array.isArray($$a)){' +\n            \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n            '$$i=_i($$a,$$v);' +\n            \"if($$el.checked){$$i<0&&(\" + (genAssignmentCode(value, '$$a.concat([$$v])')) + \")}\" +\n            \"else{$$i>-1&&(\" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + \")}\" +\n            \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n            null,\n            true\n        );\n    }\n\n    //为虚拟dom  inpu标签 type === 'radio' 添加change 事件 更新值\n    function genRadioModel(\n        el, //虚拟dom\n        value, //v-model 在view中的属性值\n        modifiers\n    ) {\n        var number = modifiers && modifiers.number; //是否是数字\n        var valueBinding = getBindingAttr(el, 'value') || 'null'; //获取虚拟dom view标签value属性值\n        //如果是数字 则调用_n() 转义\n        valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n        addProp(\n            el,\n            'checked',\n            (\"_q(\" + value + \",\" + valueBinding + \")\")\n        );\n\n\n        //添加事件\n        addHandler(\n            el, //虚拟dom\n            'change', //change事件\n            //     返回 key\"=\" valueBinding\n            // * 或者 $set(object[info],key,valueBinding)\n            genAssignmentCode(value, valueBinding), //事件函数\n            null,// modifiers, //事件类型状态状态\n            true// 根据important为true 把事件添加在前面 假就添加在尾部\n        );\n    }\n\n    //为虚拟dom添加change 函数 ，change函数调用 set 去更新 select选中数据的值\n    function genSelect(\n        el, //虚拟dom\n        value, //v-model属性值\n        modifiers\n    ) {\n        var number = modifiers && modifiers.number;\n        var selectedVal = \"Array.prototype.filter\" +\n            \".call($event.target.options,\" +\n            \"function(o){\" +\n            \"           return o.selected\" +\n            \"})\" +\n            \".map(function(o){\" +\n            \"var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n            \"return \" + (number ? '_n(val)' : 'val') + \"\" +\n            \"})\";\n        console.log(selectedVal)\n\n        var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n        var code = \"var $$selectedVal = \" + selectedVal + \";\";\n\n        // * 返回 key\"=\" $$selectedVal\n        //     * 或者 $set(object[info],key,$$selectedVal)\n\n        code = code + \" \" + (\n            genAssignmentCode(\n                value,  //v-model属性值\n                assignment // $$selectedVal是select选中数据的值\n            )\n        );\n        //这里字符串js意思是。先执行Array.prototype.filter 获取到值之后 在调用 $set(object[info],key,value) 更新数据\n        //在把这个事件添加到change事件中\n        addHandler(\n            el, //虚拟dom\n            'change',   //name 事件名称 事件类型\n            code, //事件函数\n            null,  //事件类型状态\n            true // 根据important为true 把事件添加在前面 假就添加在尾部\n        );\n    }\n    // 如果虚拟dom标签是  'input' 类型不是checkbox，radio 或者是'textarea' 标签的时候，获取真实的dom的value值调用 change或者input方法执行set方法更新数据\n    function genDefaultModel(\n        el, //虚拟dom\n        value, //属性在view 的值\n        modifiers   //标签类型对象  修饰符\n    ) {\n        console.log(el)\n        console.log(value)\n\n        var type = el.attrsMap.type; //获取类型\n\n        // warn if v-bind:value conflicts with v-model 警告如果v-bind:值与v-model冲突\n        // except for inputs with v-bind:type 除了输入v-bind:type\n        {\n            var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\n            var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n            if (value$1 && !typeBinding) { //如果type属性没有则发出警告\n                var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\n                warn$1(\n                    binding + \"=\\\"\" + value$1 + \"\\\" conflicts with v-model on the same element \" +\n                    'because the latter already expands to a value binding internally'\n                );\n            }\n        }\n\n        var ref = modifiers || {};\n        var lazy = ref.lazy; //只有在焦点不集中时，才应该更新带有lazy的输入 失去焦点\n        var number = ref.number; //数字\n        var trim = ref.trim; //去除两边空格\n        var needCompositionGuard = !lazy && type !== 'range'; //如果不是滑动类型input\n        var event = lazy ?  //获取类型事件 可以是change或者是input 事件\n            'change'\n            : type === 'range' ? //判断是否是滑动块\n                RANGE_TOKEN    //'__r'虚拟dom渲染函数\n                : 'input';\n\n        var valueExpression = '$event.target.value';\n        if (trim) {\n            valueExpression = \"$event.target.value.trim()\"; //获取真实dom的value\n        }\n        if (number) {\n            valueExpression = \"_n(\" + valueExpression + \")\";\n        }\n        //更新值\n        // * 返回 key\"=\" value\n        //     * 或者 $set(object[info],key,value)\n        var code = genAssignmentCode(\n            value,  //v-model 的属性值\n            valueExpression //真实dom的value\n        );\n        if (needCompositionGuard) { //如果不是滑动块\n            code = \"if($event.target.composing)return;\" + code;\n        }\n        //添加props 属性\n        addProp(el, 'value', (\"(\" + value + \")\"));\n        //添加绑定事件\n        addHandler(\n            el, //虚拟dom\n            event, //事件类型\n            code, //事件函数\n            null, //事件类型状态状态 修饰符\n            true // 根据important为true 把事件添加在前面 假就添加在尾部\n        );\n        if (trim || number) {\n\n            addHandler(el, 'blur', '$forceUpdate()');\n        }\n    }\n\n    /*  */\n\n    // normalize v-model event tokens that can only be determined at runtime.\n    // it's important to place the event as the first in the array because\n    // the whole point is ensuring the v-model callback gets called before\n    // user-attached handlers.\n    //规范化只能在运行时确定的v-model事件令牌。\n    //将事件放在数组的第一个位置很重要，因为\n    //关键是确保v-model回调函数在之前被调用\n    //user-attached处理程序。\n\n    //为事件 多添加 change 或者input 事件加进去\n    function normalizeEvents(on) {\n        /* istanbul ignore if */\n        if (isDef(on[RANGE_TOKEN])) {\n            // IE input[type=range] only supports `change` event\n            //\n            var event = isIE ? 'change' : 'input';  //判断是否是ie 浏览器，如果是则选择 change 事件，如果不是则选择input事件\n            on[event] = [].concat(on[RANGE_TOKEN], on[event] || []); //连接事件 把change或者input 事件添加进去\n            delete on[RANGE_TOKEN]; //删除旧的事件\n        }\n        // This was originally intended to fix #4521 but no longer necessary\n        // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n        /* istanbul ignore if */\n        //最初的目的是修复#4521，但现在已经没有必要了\n        // 2.5之后。保留它以便与< 2.4生成的代码进行反向比较\n        //添加change事件\n        if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n\n            on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n            delete on[CHECKBOX_RADIO_TOKEN];\n        }\n    }\n\n    var target$1;\n    //柯理化函数，返回一个直接调用函数的方法，调用完就删除事件\n\n    function createOnceHandler(\n        handler,//转义过的事件\n        event, //事件名称\n        capture  // 事件俘获或是冒泡行为\n    ) {\n        var _target = target$1; // save current target element in closure\n        return function onceHandler() {\n            var res = handler.apply(null, arguments);\n            if (res !== null) {\n                remove$2(\n                    event,  //事件名称\n                    onceHandler, //绑定的事件\n                    capture, //事件俘获或是冒泡行为\n                    _target //真实的dom\n                );\n            }\n        }\n    }\n\n\n    //withMacroTask，为事件添加一个静态属性_withTask为红任务，则是执行fn的。\n    // 判断once$$1是否存在，如果存在则调用createOnceHandler  返回一个直接调用函数的方法，调用完就删除事件\n    // 为真实的dom添加事件\n    function add$1(\n        event,  //事件名称\n        handler, // 转义过的事件 执行事件静态类\n        once$$1, //是否只触发一次的状态\n        capture, //  事件俘获或是冒泡行为\n        passive // 检测事件修饰符 是否是   '&'\n    ) {\n        //withMacroTask，为事件添加一个静态属性_withTask为红任务，则是执行fn的。\n        handler = withMacroTask(handler);\n        if (once$$1) {\n            //创建一次处理程序\n            //柯理化函数，返回一个直接调用函数的方法，调用完就删除事件\n            handler = createOnceHandler(\n                handler,//转义过的事件\n                event, //事件名称\n                capture  //事件俘获或是冒泡行为\n            );\n        }\n        //为真实的dom添加事件\n        target$1.addEventListener(\n            event, //事件名称\n            handler, //事件函数\n            supportsPassive ? { capture: capture, passive: passive } : capture //事件是俘获还是冒泡\n        );\n    }\n    //删除真实dom的事件\n    function remove$2(\n        event,//事件名称\n        handler, //转义过的事件 dom绑定的事件\n        capture, //事件俘获或是冒泡行为\n        _target //真实的dom\n    ) {\n        (_target || target$1).removeEventListener(\n            event,\n            handler._withTask || handler,\n            capture //事件俘获或是冒泡行为\n        );\n    }\n\n    //更新dom事件\n    function updateDOMListeners(oldVnode, vnode) {\n        //判断是否定义了事件on 如果他们两不定义有则不执行下面代码\n        if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n            return\n        }\n        var on = vnode.data.on || {};\n        var oldOn = oldVnode.data.on || {};\n        target$1 = vnode.elm; //真实的dom\n        normalizeEvents(on);    //为事件 多添加 change 或者input 事件加进去\n        //更新数据源 并且为新的值 添加函数 旧的值删除函数等功能\n        updateListeners(\n            on, //新的事件对象\n            oldOn, //旧的事件对象\n            add$1, //添加真实dom的事件函数\n            remove$2, //删除真实dom的事件函数\n            vnode.context //vue 实例化的对象 new Vue 或者组件 构造函数实例化的对象\n        );\n        target$1 = undefined;\n    }\n\n    var events = {\n        create: updateDOMListeners,\n        update: updateDOMListeners\n    }\n\n    /* \n     *   更新真实dom的props属性\n     *  */\n    function updateDOMProps(oldVnode, vnode) {\n\n        if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n            return\n        }\n        var key, cur;\n        var elm = vnode.elm;\n        var oldProps = oldVnode.data.domProps || {}; //获取旧的props属性\n        var props = vnode.data.domProps || {}; //获取新的props\n        // clone observed objects, as the user probably wants to mutate it\n        //克隆观察到的对象，因为用户可能希望对其进行修改\n        if (isDef(props.__ob__)) { //如果是props添加了观察者，重新克隆他，这样就可以修改了\n            props = vnode.data.domProps = extend({}, props);\n        }\n        consolelog(props)\n        consolelog(oldProps)\n\n        for (key in oldProps) { //循环旧的props属性，如果没有定义了 就给空\n            if (isUndef(props[key])) {\n                elm[key] = '';\n            }\n        }\n        for (key in props) { //循环新的props属性\n            cur = props[key]; //获取props 的值\n            // ignore children if the node has textContent or innerHTML,\n            // as these will throw away existing DOM nodes and cause removal errors\n            // on subsequent patches (#3360)\n            //忽略子节点，如果节点有textContent或innerHTML，\n            //因为这将丢弃现有的DOM节点并导致删除错误\n            //其后的修补程式(#3360)\n            if (\n                key === 'textContent' ||\n                key === 'innerHTML'\n            ) {\n                if (vnode.children) {\n                    vnode.children.length = 0;\n                }\n                if (cur === oldProps[key]) {\n                    continue\n                }\n                // #6601 work around Chrome version <= 55 bug where single textNode\n                // replaced by innerHTML/textContent retains its parentNode property\n                // #6601解决Chrome版本<= 55的bug，其中只有一个textNode\n                //被innerHTML/textContent替换后，保留了它的parentNode属性\n                if (elm.childNodes.length === 1) { //文本节点\n                    elm.removeChild(elm.childNodes[0]);\n                }\n            }\n\n            if (key === 'value') {\n                // store value as _value as well since\n                // non-string values will be stringified\n                //将value存储为_value以及since\n                //非字符串值将被字符串化\n                elm._value = cur;\n                // avoid resetting cursor position when value is the same\n                // 当值相同时，避免重置光标位置\n                var strCur = isUndef(cur) ? '' : String(cur); //转义成字符串\n                if (shouldUpdateValue(\n                    elm,   //真实的dom\n                    strCur //value\n                )) {\n                    elm.value = strCur; //赋值\n                }\n            } else {\n                elm[key] = cur; //直接赋值\n            }\n        }\n    }\n\n    // check platforms/web/util/attrs.js acceptValue\n\n    // 判断你是否更新value\n    function shouldUpdateValue(elm, checkVal) {\n        return (!elm.composing && (\n            elm.tagName === 'OPTION' ||\n            isNotInFocusAndDirty(elm, checkVal) ||\n            isDirtyWithModifiers(elm, checkVal)\n        ))\n    }\n\n    function isNotInFocusAndDirty(elm, checkVal) {\n        // return true when textbox (.number and .trim) loses focus and its value is\n        // not equal to the updated value\n        var notInFocus = true;\n        // #6157\n        // work around IE bug when accessing document.activeElement in an iframe\n        try {\n            notInFocus = document.activeElement !== elm;\n        } catch (e) {\n        }\n        return notInFocus && elm.value !== checkVal\n    }\n\n    function isDirtyWithModifiers(elm, newVal) {\n        var value = elm.value;\n        var modifiers = elm._vModifiers; // injected by v-model runtime\n        if (isDef(modifiers)) {\n            if (modifiers.lazy) {\n                // inputs with lazy should only be updated when not in focus\n                return false\n            }\n            if (modifiers.number) {\n                return toNumber(value) !== toNumber(newVal)\n            }\n            if (modifiers.trim) {\n                return value.trim() !== newVal.trim()\n            }\n        }\n        return value !== newVal\n    }\n\n    var domProps = {\n        create: updateDOMProps, //更新真实dom的props 属性值\n        update: updateDOMProps//更新真实dom的props 属性值\n    }\n\n    /*  */\n\n    //把style 字符串 转换成对象 比如'width:100px;height:200px;' 转化成 {width:100px,height:200px}\n    var parseStyleText = cached(function (cssText) {\n        var res = {};\n        var listDelimiter = /;(?![^(]*\\))/g; //匹配字符串中的 ;符号。但是不属于 (;)的 符号 如果是括号中的;不能匹配出来\n        var propertyDelimiter = /:(.+)/;  //:+任何字符串\n        console.log(cssText.split(listDelimiter))\n\n        cssText.split(listDelimiter).forEach(function (item) {\n            if (item) {\n                var tmp = item.split(propertyDelimiter);\n                console.log(tmp)\n\n                tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n            }\n        });\n        return res\n    });\n\n    console.log(parseStyleText('width:100px;(height:200px);'))\n\n    // merge static and dynamic style data on the same vnode\n    //在同一个vnode上合并静态和动态样式数据\n    function normalizeStyleData(data) {\n        // //将可能的数组/字符串值规范化为对象  把style 字符串 转换成对象 比如'width:100px;height:200px;' 转化成 {width:100px,height:200px} 返回该字符串。\n        var style = normalizeStyleBinding(data.style); //获取到vonde中的style属性值\n        // static style is pre-processed into an object during compilation\n        // and is always a fresh object, so it's safe to merge into it\n        //静态样式在编译期间被预处理为对象\n        //始终是一个新鲜的对象，所以可以安全地融入其中\n        return data.staticStyle ?\n            extend(data.staticStyle, style) : //合并静态\n            style\n    }\n\n    // normalize possible array / string values into Object\n    //将可能的数组/字符串值规范化为对象\n    //看到这里\n    function normalizeStyleBinding(bindingStyle) {\n        if (Array.isArray(bindingStyle)) {\n            return toObject(bindingStyle)\n        }\n        if (typeof bindingStyle === 'string') {\n            //把style 字符串 转换成对象 比如'width:100px;height:200px;' 转化成 {width:100px,height:200px}\n            return parseStyleText(bindingStyle)\n        }\n        return bindingStyle\n    }\n\n    /**\n     * parent component style should be after child's\n     * so that parent component's style could override it\n     * 父组件样式应该在子组件样式之后\n     * 这样父组件的样式就可以覆盖它\n     * 循环子组件和组件的样式，把它全部合并到一个样式对象中返回 样式对象 如{width:100px,height:200px} 返回该字符串。\n     */\n    function getStyle(\n        vnode, //虚拟dom\n        checkChild //标志点 布尔值\n    ) {\n        var res = {};\n        var styleData; //style data\n        if (checkChild) { // 标志点 布尔值\n            var childNode = vnode; //获取子节点\n            while (childNode.componentInstance) { //已经实例化过的 就是子节点有vonde\n                childNode = childNode.componentInstance._vnode;\n                if (\n                    childNode &&\n                    childNode.data &&\n                    (styleData = normalizeStyleData(childNode.data))\n                ) {\n                    extend(res, styleData);\n                }\n            }\n        }\n\n        if ((styleData = normalizeStyleData(vnode.data))) {\n            extend(res, styleData);\n        }\n\n        var parentNode = vnode;\n        while ((parentNode = parentNode.parent)) {\n            if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n                extend(res, styleData);\n            }\n        }\n        return res\n    }\n\n    /*  */\n\n    var cssVarRE = /^--/; //开始以 --开始\n    var importantRE = /\\s*!important$/; //以!important 结束\n\n    var setProp = function (el, name, val) {\n        //object.setProperty(propertyname, value, priority)\n        //         参数\t描述\n        //         propertyname\t必需。一个字符串，表示创建或修改的属性。\n        // value\t可选，新的属性值。\n        // priority\t可选。字符串，规定是否需要设置属性的优先级 important。\n        // 可以是下面三个值:\"important\"，undefined，\"\"\n        /* istanbul ignore if */\n        if (cssVarRE.test(name)) { //开始以 --开始\n            el.style.setProperty(name, val); //设置真实dom样式\n        } else if (importantRE.test(val)) { //以!important 结束\n            el.style.setProperty(\n                name,\n                val.replace(importantRE, ''),\n                'important'\n            );\n        } else {\n            //给css加前缀\n            var normalizedName = normalize(name);\n            if (Array.isArray(val)) {\n                // Support values array created by autoprefixer, e.g.\n                // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n                // Set them one by one, and the browser will only set those it can recognize\n                //支持自动修复程序创建的值数组。\n                //{显示:[“-webkit-box”、“-ms-flexbox”,“柔化”)}\n                //一个一个设置，浏览器只会设置它能识别的\n                for (var i = 0, len = val.length; i < len; i++) {\n                    el.style[normalizedName] = val[i]; //循环一个个设置样式\n                }\n            } else {\n                el.style[normalizedName] = val;\n            }\n        }\n    };\n\n    var vendorNames = ['Webkit', 'Moz', 'ms'];\n    var emptyStyle;\n    //给css加前缀。解决浏览器兼用性问题，加前缀\n    var normalize = cached(function (prop) {\n        emptyStyle = emptyStyle || document.createElement('div').style; //获取浏览器中的style样式\n        prop = camelize(prop);\n        if (prop !== 'filter' && (prop in emptyStyle)) { //如果该属性已经在样式中\n            return prop\n        }\n        var capName = prop.charAt(0).toUpperCase() + prop.slice(1); //首字母变成大写\n        for (var i = 0; i < vendorNames.length; i++) {\n            var name = vendorNames[i] + capName; //加前缀\n            if (name in emptyStyle) {\n                return name\n            }\n        }\n    });\n    // 将vonde虚拟dom的css 转义成并且渲染到真实dom的csszhong\n    function updateStyle(oldVnode, vnode) {\n        var data = vnode.data; //获取新虚拟dom的标签属性\n        var oldData = oldVnode.data; //获取旧虚拟dom的标签属性\n\n        if (isUndef(data.staticStyle) && isUndef(data.style) &&\n            isUndef(oldData.staticStyle) && isUndef(oldData.style)\n        ) {\n            return\n        }\n\n        var cur, name;\n        var el = vnode.elm; //获取真实的dom\n        var oldStaticStyle = oldData.staticStyle; //获取旧的静态 staticStyle\n        var oldStyleBinding = oldData.normalizedStyle || oldData.style || {}; //获取旧的动态style\n\n        // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n        //  如果存在静态样式，则在执行normalizeStyleData时，stylebinding已经合并到其中\n        var oldStyle = oldStaticStyle || oldStyleBinding; //旧的style样式\n\n\n        //将可能的数组/字符串值规范化为对象 //把style 字符串 转换成对象 比如'width:100px;height:200px;' 转化成 {width:100px,height:200px}\n        var style = normalizeStyleBinding(vnode.data.style) || {};\n\n        // store normalized style under a different key for next diff\n        // make sure to clone it if it's reactive, since the user likely wants\n        // to mutate it.\n        //为下一个diff在不同的键下存储规范化样式\n        //如果它是反应性的，请确保克隆它，因为用户可能希望这样做\n        //使之变异\n        vnode.data.normalizedStyle = isDef(style.__ob__) ? //如果style 加入了观察者之后\n            extend({}, style) :  //重新克隆,可以修改\n            style; //直接赋值\n        //getStyle循环子组件和组件的样式，把它全部合并到一个样式对象中返回 样式对象 如{width:100px,height:200px} 返回该字符串。\n        var newStyle = getStyle(\n            vnode,\n            true\n        );\n\n        for (name in oldStyle) { //获取旧虚拟dom的样式\n            if (isUndef(newStyle[name])) { // 如果新的虚拟dom vonde没有了\n                setProp(el, name, ''); //则设置样式为空\n            }\n        }\n        for (name in newStyle) { //循环新的虚拟dom vonde 样式\n            cur = newStyle[name];\n            if (cur !== oldStyle[name]) { //如果旧的和新的不同了 就设置新的样式\n                // ie9 setting to null has no effect, must use empty string\n                setProp(el, name, cur == null ? '' : cur);\n            }\n        }\n    }\n\n    var style = {\n        create: updateStyle,\n        update: updateStyle\n    }\n\n    /*  */\n\n    /**\n     * Add class with compatibility for SVG since classList is not supported on\n     * SVG elements in IE\n     * *添加与SVG兼容的类，因为不支持类列表\n     * IE中的SVG元素\n     *为真实dom 元素添加class类\n     */\n    function addClass(el, cls) {\n        /* istanbul ignore if */\n        if (!cls || !(cls = cls.trim())) {\n            return\n        }\n\n        /* istanbul ignore else */\n        if (el.classList) { //如果浏览器支持classList\n            if (cls.indexOf(' ') > -1) {\n                cls.split(/\\s+/).forEach(function (c) {\n                    return el.classList.add(c);\n                });\n            } else {\n                el.classList.add(cls);\n            }\n        } else { //不支持classList  直接用字符串拼接\n            var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n            if (cur.indexOf(' ' + cls + ' ') < 0) {\n                el.setAttribute('class', (cur + cls).trim());\n            }\n        }\n    }\n\n    /**\n     * Remove class with compatibility for SVG since classList is not supported on\n     * SVG elements in IE\n      *删除与SVG兼容的类，因为不支持类列表\n     * IE中的SVG元素\n      \n     删除真实dom的css类名\n     */\n    function removeClass(el, cls) {\n        /* istanbul ignore if */\n        if (!cls || !(cls = cls.trim())) {\n            return\n        }\n\n        /* istanbul ignore else */\n        if (el.classList) {\n            if (cls.indexOf(' ') > -1) {\n                cls.split(/\\s+/).forEach(function (c) {\n                    return el.classList.remove(c);\n                });\n            } else {\n                el.classList.remove(cls);\n            }\n            if (!el.classList.length) {\n                el.removeAttribute('class');\n            }\n        } else {\n            var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n            var tar = ' ' + cls + ' ';\n            while (cur.indexOf(tar) >= 0) {\n                cur = cur.replace(tar, ' ');\n            }\n            cur = cur.trim();\n            if (cur) {\n                el.setAttribute('class', cur);\n            } else {\n                el.removeAttribute('class');\n            }\n        }\n    }\n\n    /*\n    *\n    *    解析vonde中的transition的name属性获取到一个css过度对象类\n    * */\n\n    function resolveTransition(def) {\n        if (!def) {\n            return\n        }\n        /* istanbul ignore else */\n        if (typeof def === 'object') {\n            var res = {};\n            if (def.css !== false) {\n                // 使用 name，默认为 v\n                //  通过 name 属性获取过渡 CSS 类名   比如标签上面定义name是 fade  css就要定义  .fade-enter-active,.fade-leave-active，.fade-enter,.fade-leave-to 这样的class\n                extend(res, autoCssTransition(def.name || 'v'));\n            }\n            extend(res, def);\n            return res\n        } else if (typeof def === 'string') {\n            return autoCssTransition(def)\n        }\n    }\n\n    //  通过 name 属性获取过渡 CSS 类名   比如标签上面定义name是 fade  css就要定义  .fade-enter-active,.fade-leave-active，.fade-enter,.fade-leave-to 这样的class\n    var autoCssTransition = cached(function (name) {\n        return {\n            enterClass: (name + \"-enter\"), //\n            enterToClass: (name + \"-enter-to\"), //\n            enterActiveClass: (name + \"-enter-active\"), //进入激活动画的css类   类似这样的 v-enter-active {transition: all .3s ease;}\n            leaveClass: (name + \"-leave\"), //离开动画的css 动画过度类\n            leaveToClass: (name + \"-leave-to\"), //离开动画的css 动画过度类\n            leaveActiveClass: (name + \"-leave-active\")//激活离开动画的css 动画过度类\n        }\n    });\n\n    var hasTransition = inBrowser && !isIE9;\n    var TRANSITION = 'transition';\n    var ANIMATION = 'animation';\n\n    // Transition property/event sniffing\n    var transitionProp = 'transition';\n    var transitionEndEvent = 'transitionend';\n    var animationProp = 'animation';\n    var animationEndEvent = 'animationend';\n    if (hasTransition) {\n        /* istanbul ignore if */\n        if (window.ontransitionend === undefined &&\n            window.onwebkittransitionend !== undefined\n        ) {\n            transitionProp = 'WebkitTransition';\n            transitionEndEvent = 'webkitTransitionEnd';\n        }\n        if (window.onanimationend === undefined &&\n            window.onwebkitanimationend !== undefined\n        ) {\n            animationProp = 'WebkitAnimation';\n            animationEndEvent = 'webkitAnimationEnd';\n        }\n    }\n\n    // binding to window is necessary to make hot reload work in IE in strict mode\n    //绑定到窗口是必要的，使热重载工作在IE严格模式\n    //如果是浏览器如果浏览器支持requestAnimationFrame就用requestAnimationFrame，不支持就用setTimeout\n    var raf = inBrowser ?\n        (window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout)\n        : function (fn) {\n            return fn();\n        };\n\n    //下一帧\n    function nextFrame(fn) {\n        raf(function () {\n            raf(fn);\n        });\n    }\n    //获取 真实dom addTransitionClass 记录calss类\n    function addTransitionClass(el, cls) {\n        var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n        if (transitionClasses.indexOf(cls) < 0) { //如果没有添加则添加\n            transitionClasses.push(cls);\n            //为真实的dom添加class\n            addClass(el, cls);\n        }\n    }\n\n    //删除vonde的class类和删除真实dom的class类\n    function removeTransitionClass(el, cls) {\n        if (el._transitionClasses) {\n\n            remove(el._transitionClasses, cls); //删除数组\n        }\n        // 删除真实dom的css类名\n        removeClass(el, cls);\n    }\n\n    // 获取动画的信息，执行动画。\n    function whenTransitionEnds(\n        el, //真实的dom\n        expectedType,//动画类型\n        cb //回调方法\n    ) {\n        //获取返回transition，或者animation 动画的类型，动画个数，动画执行时间\n        var ref = getTransitionInfo(el, expectedType);\n        var type = ref.type; //动画类型\n        var timeout = ref.timeout;//总动画执行的时长\n        var propCount = ref.propCount; //动画的个数\n        if (!type) {\n            return cb()\n        }\n        //TRANSITION=transition\n        //判断是transition动画还是animation动画\n        var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n        var ended = 0;\n        var end = function () { //结束动画函数\n            //删除动画事件\n            el.removeEventListener(event, onEnd);\n            cb(); //回调执行动画\n        };\n        var onEnd = function (e) {\n            if (e.target === el) {\n                if (++ended >= propCount) {\n                    end();\n                }\n            }\n        };\n        setTimeout(function () { //执行动画\n            if (ended < propCount) {\n                end(); //时间到了就执行动画并且删除事件。\n            }\n        }, timeout + 1);\n        el.addEventListener(event, onEnd);\n    }\n\n    var transformRE = /\\b(transform|all)(,|$)/;\n    //获取Transition 过度动画信息\n    //获取transition，或者animation 动画的类型，动画个数，动画执行时间\n    function getTransitionInfo(\n        el, //真实的dom\n        expectedType //动画类型\n    ) {\n        //  Window.getComputedStyle()方法返回一个对象，\n        // 该对象在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有CSS属性的值\n        // 私有的CSS属性值可以通过对象提供的API或通过简单地使用CSS属性名称进行索引来访问。\n        var styles = window.getComputedStyle(el); //\n        console.log('==styles==')\n        console.log(styles)\n        //          var transitionProp = 'transition';\n        var transitionDelays = styles[transitionProp + 'Delay'].split(', '); //获取动画时间\n        var transitionDurations = styles[transitionProp + 'Duration'].split(', '); //获取动画时间\n        //transitionDelays=5s\n        var transitionTimeout = getTimeout(transitionDelays, transitionDurations);//获取动画时间\n        var animationDelays = styles[animationProp + 'Delay'].split(', ');//获取动画时间\n        var animationDurations = styles[animationProp + 'Duration'].split(', ');//获取动画时间\n        var animationTimeout = getTimeout(animationDelays, animationDurations); //获取动画时间\n        console.log('transitionDelays=' + transitionDelays)\n        console.log('transitionDurations=' + transitionDurations)\n        console.log('transitionTimeout=' + transitionTimeout)\n        console.log('animationDelays=' + animationDelays)\n        console.log('animationDurations=' + animationDurations)\n        console.log('animationTimeout=' + animationTimeout)\n\n\n        var type;  //动画类型\n        var timeout = 0; //动画时长\n        var propCount = 0; //动画个数\n        /* istanbul ignore if */\n        if (expectedType === TRANSITION) {// 判断动画是否是transition\n            if (transitionTimeout > 0) {\n                type = TRANSITION;\n                timeout = transitionTimeout;\n                propCount = transitionDurations.length;\n            }\n        } else if (expectedType === ANIMATION) { //判断动画是否是animation\n            if (animationTimeout > 0) {\n                type = ANIMATION;\n                timeout = animationTimeout;\n                propCount = animationDurations.length;\n            }\n        } else {\n            timeout = Math.max(transitionTimeout, animationTimeout);\n            type = timeout > 0\n                ? transitionTimeout > animationTimeout\n                    ? TRANSITION\n                    : ANIMATION\n                : null;\n            propCount = type\n                ? type === TRANSITION\n                    ? transitionDurations.length\n                    : animationDurations.length\n                : 0;\n        }\n        var hasTransform =\n            type === TRANSITION &&\n            transformRE.test(styles[transitionProp + 'Property']);\n        console.log(styles[transitionProp + 'Property']) //获取动画设置在哪些属性上面\n\n        return {\n            type: type,//过度或者css3动画类型\n            timeout: timeout, //执行动画的时长\n            propCount: propCount, //动画个数 执行多个动画\n            hasTransform: hasTransform //布尔值 是不是  transition 动画\n        }\n    }\n\n    function getTimeout(delays, durations) {\n        console.log(delays)\n        console.log(durations)\n        debugger\n        /* istanbul ignore next */\n        while (delays.length < durations.length) {\n            delays = delays.concat(delays);\n        }\n\n        return Math.max.apply(null, durations.map(function (d, i) {\n            return toMs(d) + toMs(delays[i])\n        }))\n    }\n\n    function toMs(s) {\n        return Number(s.slice(0, -1)) * 1000\n    }\n\n    //resolveTransition 解析vonde中的transition的name属性获取到一个css过度对象类\n    function enter(\n        vnode,\n        toggleDisplay\n    ) {\n        var el = vnode.elm; //真实的dom\n\n\n\n        //  call leave callback now 执行 leave 回调函数\n        if (isDef(el._leaveCb)) {\n            el._leaveCb.cancelled = true; //标志已经执行过_leaveCb函数\n            el._leaveCb(); //执行_leaveCb回调\n        }\n        //resolveTransition 解析vonde中的transition的name属性获取到一个css过度对象类\n        var data = resolveTransition(vnode.data.transition);\n        console.log(vnode.data.transition)\n        console.log(data)\n\n        if (isUndef(data)) {\n            return\n        }\n\n        /* istanbul ignore if */\n        if (isDef(el._enterCb) || el.nodeType !== 1) { //不是真实的dom\n            return\n        }\n\n        var css = data.css; //css类\n        var type = data.type; //dom类型\n        var enterClass = data.enterClass; //动画进入中的 css 中的过度类\n        var enterToClass = data.enterToClass; //动画退出中的 css 中的过度类\n        var enterActiveClass = data.enterActiveClass; //动画进入活跃的类  类似这样的    enter-active {transition: all .3s ease;}\n        var appearClass = data.appearClass;  //  自定义动画props属性 过度\n        var appearToClass = data.appearToClass; //自定义动画props属性 离开的过度 css 类名\n        var appearActiveClass = data.appearActiveClass;//自定义动画props属性 激活 css 类名\n        var beforeEnter = data.beforeEnter; //进入动画钩子函数\n        var enter = data.enter;//进入动画钩子函数\n        var afterEnter = data.afterEnter; //进入动画钩子函数\n        var enterCancelled = data.enterCancelled;//进入动画钩子函数\n        var beforeAppear = data.beforeAppear; //自定义过过度动画的钩子函数\n        var appear = data.appear; //自定义过度动画的 属性名称\n        var afterAppear = data.afterAppear; //自定义过度动画的 钩子函数\n        var appearCancelled = data.appearCancelled;  //自定义过度动画的 钩子函数\n        var duration = data.duration; //定义动画的时长\n\n        // activeInstance will always be the <transition> component managing this\n        // transition. One edge case to check is when the <transition> is placed\n        // as the root node of a child component. In that case we need to check\n        // <transition>'s parent for appear check.\n        //activeInstance始终是管理这个的<transition>组件\n        //转换。要检查的一种边缘情况是何时放置<transition>\n        //作为子组件的根节点。那样的话，我们需要检查一下\n        // <切换到>的父节点以查看是否出现。\n        var context = activeInstance; //vue 实例化的对象\n        var transitionNode = activeInstance.$vnode;     // 父层的Vnode\n        while (transitionNode && transitionNode.parent) { //循环父层vonde 一直到顶层的 vonde\n            transitionNode = transitionNode.parent;\n            context = transitionNode.context;\n        }\n\n        var isAppear =\n            !context._isMounted ||  //是否已经调用过Mounted 生命周期函数\n            !vnode.isRootInsert; //   /*是否作为跟节点插入*/\n\n\n        if (isAppear && !appear && appear !== '') {\n            return\n        }\n        //获取静态css类，\n        var startClass = isAppear && appearClass ?\n            appearClass : enterClass;\n\n        /*\n            获取激活css类  类似这样的\n            .v-leave-active {\n                     transition: opacity .5s;\n                 }\n             .v-enter-active{\n                     transition: opacity .5s;\n                 }\n          */\n\n        var activeClass = isAppear && appearActiveClass\n            ? appearActiveClass\n            : enterActiveClass;\n\n\n\n        /*\n         获取过度时候的css类，类似这样的\n          .fade-enter,\n         .fade-leave-to  {\n         opacity: 0;\n         }\n        * */\n        var toClass = isAppear && appearToClass // 离开的过度 css 类名\n            ? appearToClass\n            : enterToClass;\n\n        //钩子函数 进入动画的钩子函数\n        var beforeEnterHook = isAppear\n            ? (beforeAppear || beforeEnter)\n            : beforeEnter;\n\n        //\n        var enterHook = isAppear\n            ? (typeof appear === 'function' ? appear : enter)\n            : enter;\n\n        //进入过度动画的钩子函数\n        var afterEnterHook = isAppear\n            ? (afterAppear || afterEnter)\n            : afterEnter;\n\n        //取消过度动画的钩子函数\n        var enterCancelledHook = isAppear\n            ? (appearCancelled || enterCancelled)\n            : enterCancelled;\n        //动画时长\n        var explicitEnterDuration = toNumber(\n            isObject(duration)\n                ? duration.enter\n                : duration\n        );\n\n        if (\"development\" !== 'production' && explicitEnterDuration != null) {\n            checkDuration(explicitEnterDuration, 'enter', vnode);\n        }\n\n        var expectsCSS = css !== false && !isIE9; //如果不是在ie9的环境下。还有css类\n\n        //检测钩子函数 fns 的长度\n        var userWantsControl = getHookArgumentsLength(enterHook);\n\n        var cb = el._enterCb = once(function () { //只执行一次函数\n            //这个函数就是给dom添加css class 让dom执行动画的\n            if (expectsCSS) {\n                removeTransitionClass(el, toClass); //删除了   离开的过度 css 类名\n                removeTransitionClass(el, activeClass); //删除了 激活过度 css 类名\n            }\n            if (cb.cancelled) { //如果执行过了_enterCb函数\n                if (expectsCSS) {\n                    removeTransitionClass(el, startClass); //\n                }\n                enterCancelledHook && enterCancelledHook(el); //回调 取消过度动画的钩子函数\n            } else {\n                afterEnterHook && afterEnterHook(el); //回调进入过度动画的钩子函数\n            }\n            el._enterCb = null;\n        });\n\n        if (!vnode.data.show) {\n            // remove pending leave element on enter by injecting an insert hook\n            //通过注入插入钩子，在进入时删除挂起的leave元素\n            mergeVNodeHook(\n                vnode,\n                'insert',\n                function () {\n                    var parent = el.parentNode; //获取真实dom的父节点\n                    var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n                    if (\n                        pendingNode &&\n                        pendingNode.tag === vnode.tag &&\n                        pendingNode.elm._leaveCb\n                    ) {\n                        //调用离开回调函数\n                        pendingNode.elm._leaveCb();\n                    }\n                    //调用的进入过度动画钩子函数\n                    enterHook && enterHook(el, cb);\n                });\n        }\n\n        // start enter transition\n        //开始进入过渡 动画 钩子函数\n        beforeEnterHook && beforeEnterHook(el);\n\n\n        if (expectsCSS) { //如果没有dom中没有clss类\n            //为真实dom添加class类\n            addTransitionClass(\n                el,\n                startClass\n            );\n            //为真实dom添加class类\n            addTransitionClass(\n                el,\n                activeClass\n            );\n            nextFrame(function () {\n                console.log('nextFrame')\n\n\n                removeTransitionClass(el, startClass); //执行过了就删除class类\n                if (!cb.cancelled) { //如果还是取消动画\n                    addTransitionClass(el, toClass); //则添加过度动画 class\n                    if (!userWantsControl) {  //检测钩子函数 fns 的长度\n                        if (isValidDuration(explicitEnterDuration)) {   //如果是  number 类型\n                            setTimeout(cb, explicitEnterDuration); //设置延迟过度事件\n                        } else {\n\n                            whenTransitionEnds(\n                                el, //真实的dom\n                                type, //动画类型\n                                cb //_enterCb 回调函数\n                            );\n                        }\n                    }\n                }\n            });\n        }\n\n        if (vnode.data.show) {\n            toggleDisplay && toggleDisplay(); //执行回调切换显示或者隐藏函数\n            enterHook && enterHook(el, cb);\n        }\n\n        if (!expectsCSS && !userWantsControl) {\n            cb();\n        }\n    }\n    //执行离开过度动画效果执行方式\n    function leave(\n        vnode,  //虚拟dom\n        rm      //回调函数                  \n    ) {\n        var el = vnode.elm;\n\n        // call enter callback now\n        if (isDef(el._enterCb)) { //标志是否执行过_enterCb\n            el._enterCb.cancelled = true; //取消\n            el._enterCb();\n        }\n        //解析vonde中的transition的name属性获取到一个css过度对象类\n        var data = resolveTransition(vnode.data.transition);\n\n        if (isUndef(data) || el.nodeType !== 1) {\n            return rm()\n        }\n\n        /* istanbul ignore if */\n        if (isDef(el._leaveCb)) {\n            return\n        }\n\n        var css = data.css; //vonde 的css类\n        var type = data.type; //vonde 的 类型 如 1,2,3,4.真实dom的类型\n        var leaveClass = data.leaveClass; //离开动画的css 动画过度类\n        var leaveToClass = data.leaveToClass; //离开动画的css 动画过度类\n        var leaveActiveClass = data.leaveActiveClass;//激活离开动画的css 动画过度类\n\n        var beforeLeave = data.beforeLeave; //离开动画的钩子函数\n        var leave = data.leave; //离开动画的钩子函数\n        var afterLeave = data.afterLeave;//离开动画的钩子函数\n        var leaveCancelled = data.leaveCancelled;//离开动画的钩子函数\n        var delayLeave = data.delayLeave; //延迟动画钩子函数\n        var duration = data.duration; //动画时长\n\n        var expectsCSS = css !== false && !isIE9;\n\n        // 检测钩子函数 fns 的长度\n        // 数据必须是这样才返回真，也可以是n层fns只要规律是一样嵌套下去就行\n        var userWantsControl = getHookArgumentsLength(leave);\n\n        var explicitLeaveDuration = toNumber(\n            isObject(duration)\n                ? duration.leave\n                : duration\n        );\n\n        if (\"development\" !== 'production' && isDef(explicitLeaveDuration)) {\n            checkDuration(explicitLeaveDuration, 'leave', vnode);\n        }\n\n        var cb = el._leaveCb = once(function () {\n            if (el.parentNode && el.parentNode._pending) {\n                el.parentNode._pending[vnode.key] = null;\n            }\n            if (expectsCSS) {\n                removeTransitionClass(el, leaveToClass); //离开动画的css 动画过度类\n                removeTransitionClass(el, leaveActiveClass);//激活离开动画的css 动画过度类\n            }\n            if (cb.cancelled) { //取消过度动画标志\n                if (expectsCSS) {\n                    removeTransitionClass(el, leaveClass);  //离开动画的css 动画过度类\n                }\n                leaveCancelled && leaveCancelled(el); //钩子函数\n            } else {\n                rm(); //执行回调函数\n                afterLeave && afterLeave(el); //执行钩子函数\n            }\n            el._leaveCb = null;\n        });\n\n        if (delayLeave) {\n            delayLeave(performLeave); //delayLeave 延迟动画钩子函数\n        } else {\n            performLeave();\n        }\n\n        function performLeave() {\n            // the delayed leave may have already been cancelled\n            if (cb.cancelled) { //取消过度动画标志\n                return\n            }\n            // record leaving element\n            if (!vnode.data.show) {\n                (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n            }\n            beforeLeave && beforeLeave(el); //离开动画的钩子函数\n            if (expectsCSS) {\n                addTransitionClass(el, leaveClass);//  为真实dom添加 css 过度动画leaveClass类\n                addTransitionClass(el, leaveActiveClass);//激活离开动画的css 动画过度类\n                nextFrame(function () {\n                    removeTransitionClass(el, leaveClass);//  为真实dom删除 css 过度动画leaveClass类\n                    if (!cb.cancelled) { //取消过度动画标志\n                        addTransitionClass(el, leaveToClass); //离开动画的css 动画过度类\n                        if (!userWantsControl) {\n                            if (isValidDuration(explicitLeaveDuration)) { //如果是数字\n                                setTimeout(cb, explicitLeaveDuration); //执行回调函数 _leaveCb\n                            } else {\n                                // 获取动画的信息，执行动画。\n                                whenTransitionEnds(\n                                    el, //真实的dom\n                                    type,  //动画类型\n                                    cb//执行回调函数 _leaveCb\n                                ); //\n                            }\n                        }\n                    }\n                });\n            }\n            leave && leave(el, cb);\n            if (!expectsCSS && !userWantsControl) {\n                cb();\n            }\n        }\n    }\n\n    // only used in dev mode\n    //检测 val必需是数字\n    function checkDuration(val, name, vnode) {\n        if (typeof val !== 'number') {\n            warn(\n                \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n                \"got \" + (JSON.stringify(val)) + \".\",\n                vnode.context\n            );\n        } else if (isNaN(val)) {\n            warn(\n                \"<transition> explicit \" + name + \" duration is NaN - \" +\n                'the duration expression might be incorrect.',\n                vnode.context\n            );\n        }\n    }\n    //如果是  number 类型\n    function isValidDuration(val) {\n        return typeof val === 'number' && !isNaN(val)\n    }\n\n    /**\n     * Normalize a transition hook's argument length. The hook may be:\n     * - a merged hook (invoker) with the original in .fns\n     * - a wrapped component method (check ._length)\n     * - a plain function (.length)\n     *规范化转换钩子的参数长度。问题可能是:\n     * -一个合并的钩子(调用程序)与原始的。fns\n     * -封装的组件方法(检查._length)\n     * -一个普通函数(.length)\n\n\n\n\n      检测钩子函数 fns 的长度\n     数据必须是这样才返回真，也可以是n层fns只要规律是一样嵌套下去就行\n     var fn1=[1,2,3,4];\n     var fn={\n                fns:[\n\n                        [1,2,3,45,34]\n\n              ]\n           }\n     var fn2={\n          fns:[\n              {\n                  fns:[\n                      {\n                          fns:[[1,2,3,45,9]]\n                      }\n                  ]\n              }\n          ]\n      }\n\n     */\n    function getHookArgumentsLength(fn) {\n        if (isUndef(fn)) {\n            return false\n        }\n        var invokerFns = fn.fns;\n        if (isDef(invokerFns)) {\n            // invoker\n\n            return getHookArgumentsLength(\n                Array.isArray(invokerFns) ?\n                    invokerFns[0] :\n                    invokerFns\n            )\n        } else {\n            return (fn._length || fn.length) > 1\n        }\n    }\n\n    function _enter(_, vnode) {\n        if (vnode.data.show !== true) { //如果不是show的时候\n            enter(vnode);\n        }\n    }\n    //\n    var transition = inBrowser ? //如果是浏览器环境\n        {\n            create: _enter, //进入时\n            activate: _enter, //激活\n            remove: function remove$$1(vnode, rm) { //删除\n                /* istanbul ignore else */\n                if (vnode.data.show !== true) {\n                    leave(vnode, rm);\n                } else {\n                    rm();\n                }\n            }\n        } :\n        {}\n\n    var platformModules = [\n        attrs,  // attrs包含两个方法create和update都是更新设置真实dom属性值 {create: updateAttrs, /*创建属性*/ update: updateAttrs  /*更新属性 */}\n        klass, //klass包含类包含两个方法create和update都是更新calss。其实就是updateClass方法。 设置真实dom的class\n        events, //更新真实dom的事件\n        domProps, //更新真实dom的props 属性值\n        style, // 更新真实dom的style属性。有两个方法create 和update 不过函数都是updateStyle更新真实dom的style属性值.将vonde虚拟dom的css 转义成并且渲染到真实dom的css中\n        transition // 过度动画\n    ]\n\n    /*  */\n\n    // the directive module should be applied last, after all\n    // built-in modules have been applied.\n    //毕竟，指令模块应该是最后应用的\n    //已应用内置模块。\n    //baseModules 包括了 ref创建，更新 ， 销毁 函数 和 directives自定义指令 创建 ，更新，销毁函数\n\n    var modules = platformModules.concat(baseModules);\n\n    //创建补丁函数 创建虚拟dom\n    /*\n     var nodeOps = Object.freeze({\n     createElement: createElement$1, //创建一个真实的dom\n     createElementNS: createElementNS, //创建一个真实的dom svg方式\n     createTextNode: createTextNode, // 创建文本节点\n     createComment: createComment,  // 创建一个注释节点\n     insertBefore: insertBefore,  //插入节点 在xxx  dom 前面插入一个节点\n     removeChild: removeChild,   //删除子节点\n     appendChild: appendChild,  //添加子节点 尾部\n     parentNode: parentNode,  //获取父亲子节点dom\n     nextSibling: nextSibling,     //获取下一个兄弟节点\n     tagName: tagName,   //获取dom标签名称\n     setTextContent: setTextContent, //  //设置dom 文本\n     setStyleScope: setStyleScope  //设置组建样式的作用域\n     });\n     modules=[\n        attrs,  // attrs包含两个方法create和update都是更新设置真实dom属性值 {create: updateAttrs,  update: updateAttrs   }\n        klass, //klass包含类包含两个方法create和update都是更新calss。其实就是updateClass方法。 设置真实dom的class\n        events, //更新真实dom的事件\n        domProps, //更新真实dom的props 属性值\n        style, // 更新真实dom的style属性。有两个方法create 和update 不过函数都是updateStyle更新真实dom的style属性值.将vonde虚拟dom的css 转义成并且渲染到真实dom的css中\n        transition // 过度动画\n        ref,  //ref创建，更新 ， 销毁 函数\n        directives //自定义指令 创建 ，更新，销毁函数\n        ]\n     */\n    //path 把vonde 渲染成真实的dom\n    var patch = createPatchFunction(\n        {\n            nodeOps: nodeOps,\n            modules: modules\n        }\n    );\n    console.log('===patch==')\n    console.log(patch)\n\n\n    /**\n     * Not type checking this file because flow doesn't like attaching\n     * properties to Elements.\n     */\n\n    /* istanbul ignore if */\n    if (isIE9) {\n        // http://www.matts411.com/post/internet-explorer-9-oninput/\n        document.addEventListener('selectionchange', function () {\n            var el = document.activeElement;\n            if (el && el.vmodel) {\n                trigger(el, 'input');\n            }\n        });\n    }\n\n    var directive = {\n        inserted: function inserted(el, binding, vnode, oldVnode) {\n\n            if (vnode.tag === 'select') {\n                // #6903\n                if (oldVnode.elm && !oldVnode.elm._vOptions) {\n                    mergeVNodeHook(vnode, 'postpatch', function () {\n                        directive.componentUpdated(el, binding, vnode);\n                    });\n                } else {\n                    setSelected(el, binding, vnode.context);\n                }\n                el._vOptions = [].map.call(el.options, getValue);\n            } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n                el._vModifiers = binding.modifiers;\n                if (!binding.modifiers.lazy) {\n                    el.addEventListener('compositionstart', onCompositionStart);\n                    el.addEventListener('compositionend', onCompositionEnd);\n                    // Safari < 10.2 & UIWebView doesn't fire compositionend when\n                    // switching focus before confirming composition choice\n                    // this also fixes the issue where some browsers e.g. iOS Chrome\n                    // fires \"change\" instead of \"input\" on autocomplete.\n                    el.addEventListener('change', onCompositionEnd);\n                    /* istanbul ignore if */\n                    if (isIE9) {\n                        el.vmodel = true;\n                    }\n                }\n            }\n        },\n\n        componentUpdated: function componentUpdated(el, binding, vnode) {\n            if (vnode.tag === 'select') {\n                setSelected(el, binding, vnode.context);\n                // in case the options rendered by v-for have changed,\n                // it's possible that the value is out-of-sync with the rendered options.\n                // detect such cases and filter out values that no longer has a matching\n                // option in the DOM.\n                var prevOptions = el._vOptions;\n                var curOptions = el._vOptions = [].map.call(el.options, getValue);\n                if (curOptions.some(function (o, i) {\n                    return !looseEqual(o, prevOptions[i]);\n                })) {\n                    // trigger change event if\n                    // no matching option found for at least one value\n                    var needReset = el.multiple\n                        ? binding.value.some(function (v) {\n                            return hasNoMatchingOption(v, curOptions);\n                        })\n                        : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n                    if (needReset) {\n                        trigger(el, 'change');\n                    }\n                }\n            }\n        }\n    };\n\n    function setSelected(el, binding, vm) {\n        actuallySetSelected(el, binding, vm);\n        /* istanbul ignore if */\n        if (isIE || isEdge) {\n            setTimeout(function () {\n                actuallySetSelected(el, binding, vm);\n            }, 0);\n        }\n    }\n\n    function actuallySetSelected(el, binding, vm) {\n        var value = binding.value;\n        var isMultiple = el.multiple;\n        if (isMultiple && !Array.isArray(value)) {\n            \"development\" !== 'production' && warn(\n                \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n                \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n                vm\n            );\n            return\n        }\n        var selected, option;\n        for (var i = 0, l = el.options.length; i < l; i++) {\n            option = el.options[i];\n            if (isMultiple) {\n                selected = looseIndexOf(value, getValue(option)) > -1;\n                if (option.selected !== selected) {\n                    option.selected = selected;\n                }\n            } else {\n                if (looseEqual(getValue(option), value)) {\n                    if (el.selectedIndex !== i) {\n                        el.selectedIndex = i;\n                    }\n                    return\n                }\n            }\n        }\n        if (!isMultiple) {\n            el.selectedIndex = -1;\n        }\n    }\n\n    function hasNoMatchingOption(value, options) {\n        return options.every(function (o) {\n            return !looseEqual(o, value);\n        })\n    }\n\n    function getValue(option) {\n        return '_value' in option\n            ? option._value\n            : option.value\n    }\n\n    function onCompositionStart(e) {\n        e.target.composing = true;\n    }\n\n    function onCompositionEnd(e) {\n        // prevent triggering an input event for no reason\n        if (!e.target.composing) {\n            return\n        }\n        e.target.composing = false;\n        trigger(e.target, 'input');\n    }\n\n    function trigger(el, type) {\n        var e = document.createEvent('HTMLEvents');\n        e.initEvent(type, true, true);\n        el.dispatchEvent(e);\n    }\n\n    /*  */\n\n    // recursively search for possible transition defined inside the component root\n    function locateNode(vnode) {\n        return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n            ? locateNode(vnode.componentInstance._vnode)\n            : vnode\n    }\n\n    var show = {\n        bind: function bind(el, ref, vnode) {\n            var value = ref.value;\n\n            vnode = locateNode(vnode);\n            var transition$$1 = vnode.data && vnode.data.transition;\n            var originalDisplay = el.__vOriginalDisplay =\n                el.style.display === 'none' ? '' : el.style.display;\n            if (value && transition$$1) {\n                vnode.data.show = true;\n                enter(vnode, function () {\n                    el.style.display = originalDisplay;\n                });\n            } else {\n                el.style.display = value ? originalDisplay : 'none';\n            }\n        },\n\n        update: function update(el, ref, vnode) {\n            var value = ref.value;\n            var oldValue = ref.oldValue;\n\n            /* istanbul ignore if */\n            if (!value === !oldValue) {\n                return\n            }\n            vnode = locateNode(vnode);\n            var transition$$1 = vnode.data && vnode.data.transition;\n            if (transition$$1) {\n                vnode.data.show = true;\n                if (value) {\n                    enter(vnode, function () {\n                        el.style.display = el.__vOriginalDisplay;\n                    });\n                } else {\n                    leave(vnode, function () {\n                        el.style.display = 'none';\n                    });\n                }\n            } else {\n                el.style.display = value ? el.__vOriginalDisplay : 'none';\n            }\n        },\n\n        unbind: function unbind(el,\n            binding,\n            vnode,\n            oldVnode,\n            isDestroy) {\n            if (!isDestroy) {\n                el.style.display = el.__vOriginalDisplay;\n            }\n        }\n    }\n\n    var platformDirectives = {\n        model: directive,\n        show: show\n    }\n\n    /*  */\n\n    // Provides transition support for a single element/component.\n    // supports transition mode (out-in / in-out)\n\n    var transitionProps = {\n        name: String, //\n        appear: Boolean,\n        css: Boolean,\n        mode: String,\n        type: String,\n        enterClass: String,\n        leaveClass: String, //离开动画的css 动画过度类\n        enterToClass: String, //   动画退出中的 css 中的过度类\n        leaveToClass: String, //离开动画的css 动画过度类\n        enterActiveClass: String, //激活过度动画 的css  类\n        leaveActiveClass: String, //激活离开动画的css 动画过度类\n        appearClass: String, //  自定义动画props属性 过度\n        appearActiveClass: String, //自定义动画props属性 激活 css 类名\n        appearToClass: String,  //自定义动画props属性 离开的过度 css 类名\n        duration: [Number, String, Object] //持续的时间\n    };\n\n    // in case the child is also an abstract component, e.g. <keep-alive>\n    // we want to recursively retrieve the real component to be rendered\n    function getRealChild(vnode) {\n        var compOptions = vnode && vnode.componentOptions;\n        if (compOptions && compOptions.Ctor.options.abstract) {\n            return getRealChild(getFirstComponentChild(compOptions.children))\n        } else {\n            return vnode\n        }\n    }\n\n    function extractTransitionData(comp) {\n        var data = {};\n        var options = comp.$options;\n        // props\n        for (var key in options.propsData) {\n            data[key] = comp[key];\n        }\n        // events.\n        // extract listeners and pass them directly to the transition methods\n        var listeners = options._parentListeners;\n        for (var key$1 in listeners) {\n            data[camelize(key$1)] = listeners[key$1];\n        }\n        return data\n    }\n\n    function placeholder(h, rawChild) {\n        if (/\\d-keep-alive$/.test(rawChild.tag)) {\n            return h('keep-alive', {\n                props: rawChild.componentOptions.propsData\n            })\n        }\n    }\n\n    function hasParentTransition(vnode) {\n        while ((vnode = vnode.parent)) {\n            if (vnode.data.transition) {\n                return true\n            }\n        }\n    }\n\n    function isSameChild(child, oldChild) {\n        return oldChild.key === child.key && oldChild.tag === child.tag\n    }\n\n    var Transition = { //动画组件\n        name: 'transition',\n        props: transitionProps, //动画属性\n        abstract: true,\n\n        render: function render(h) { //动画组件的vonde\n            var this$1 = this;\n\n            var children = this.$slots.default;\n            if (!children) {\n                return\n            }\n\n            // filter out text nodes (possible whitespaces)\n            children = children.filter(function (c) {\n                return c.tag || isAsyncPlaceholder(c);\n            });\n            /* istanbul ignore if */\n            if (!children.length) {\n                return\n            }\n\n            // warn multiple elements\n            if (\"development\" !== 'production' && children.length > 1) {\n                warn(\n                    '<transition> can only be used on a single element. Use ' +\n                    '<transition-group> for lists.',\n                    this.$parent\n                );\n            }\n\n            var mode = this.mode;\n\n            // warn invalid mode\n            if (\"development\" !== 'production' &&\n                mode && mode !== 'in-out' && mode !== 'out-in'\n            ) {\n                warn(\n                    'invalid <transition> mode: ' + mode,\n                    this.$parent\n                );\n            }\n\n            var rawChild = children[0];\n\n            // if this is a component root node and the component's\n            // parent container node also has transition, skip.\n            if (hasParentTransition(this.$vnode)) {\n                return rawChild\n            }\n\n            // apply transition data to child\n            // use getRealChild() to ignore abstract components e.g. keep-alive\n            var child = getRealChild(rawChild);\n            /* istanbul ignore if */\n            if (!child) {\n                return rawChild\n            }\n\n            if (this._leaving) {\n                return placeholder(h, rawChild)\n            }\n\n            // ensure a key that is unique to the vnode type and to this transition\n            // component instance. This key will be used to remove pending leaving nodes\n            // during entering.\n            var id = \"__transition-\" + (this._uid) + \"-\";\n            child.key = child.key == null\n                ? child.isComment\n                    ? id + 'comment'\n                    : id + child.tag\n                : isPrimitive(child.key)\n                    ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n                    : child.key;\n\n            var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n            var oldRawChild = this._vnode;\n            var oldChild = getRealChild(oldRawChild);\n\n            // mark v-show\n            // so that the transition module can hand over the control to the directive\n            if (child.data.directives && child.data.directives.some(function (d) {\n                return d.name === 'show';\n            })) {\n                child.data.show = true;\n            }\n\n            if (\n                oldChild &&\n                oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) &&\n                // #6687 component root is a comment node\n                !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n            ) {\n                // replace old child transition data with fresh one\n                // important for dynamic transitions!\n                var oldData = oldChild.data.transition = extend({}, data);\n                // handle transition mode\n                if (mode === 'out-in') {\n                    // return placeholder node and queue update when leave finishes\n                    this._leaving = true;\n                    mergeVNodeHook(oldData, 'afterLeave', function () {\n                        this$1._leaving = false;\n                        this$1.$forceUpdate();\n                    });\n                    return placeholder(h, rawChild)\n                } else if (mode === 'in-out') {\n                    if (isAsyncPlaceholder(child)) {\n                        return oldRawChild\n                    }\n                    var delayedLeave;\n                    var performLeave = function () {\n                        delayedLeave();\n                    };\n                    mergeVNodeHook(data, 'afterEnter', performLeave);\n                    mergeVNodeHook(data, 'enterCancelled', performLeave);\n                    mergeVNodeHook(oldData, 'delayLeave', function (leave) {\n                        delayedLeave = leave;\n                    });\n                }\n            }\n\n            return rawChild\n        }\n    }\n\n    /*  */\n\n    // Provides transition support for list items.\n    // supports move transitions using the FLIP technique.\n\n    // Because the vdom's children update algorithm is \"unstable\" - i.e.\n    // it doesn't guarantee the relative positioning of removed elements,\n    // we force transition-group to update its children into two passes:\n    // in the first pass, we remove all nodes that need to be removed,\n    // triggering their leaving transition; in the second pass, we insert/move\n    // into the final desired state. This way in the second pass removed\n    // nodes will remain where they should be.\n\n    var props = extend({\n        tag: String,\n        moveClass: String\n    }, transitionProps);\n\n    delete props.mode;\n\n    var TransitionGroup = {\n        props: props,\n\n        render: function render(h) {\n            var tag = this.tag || this.$vnode.data.tag || 'span';\n            var map = Object.create(null);\n            var prevChildren = this.prevChildren = this.children;\n            var rawChildren = this.$slots.default || [];\n            var children = this.children = [];\n            var transitionData = extractTransitionData(this);\n\n            for (var i = 0; i < rawChildren.length; i++) {\n                var c = rawChildren[i];\n                if (c.tag) {\n                    if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n                        children.push(c);\n                        map[c.key] = c\n                            ;\n                        (c.data || (c.data = {})).transition = transitionData;\n                    } else {\n                        var opts = c.componentOptions;\n                        var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n                        warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n                    }\n                }\n            }\n\n            if (prevChildren) {\n                var kept = [];\n                var removed = [];\n                for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n                    var c$1 = prevChildren[i$1];\n                    c$1.data.transition = transitionData;\n                    c$1.data.pos = c$1.elm.getBoundingClientRect();\n                    if (map[c$1.key]) {\n                        kept.push(c$1);\n                    } else {\n                        removed.push(c$1);\n                    }\n                }\n                this.kept = h(tag, null, kept);\n                this.removed = removed;\n            }\n\n            return h(tag, null, children)\n        },\n\n        beforeUpdate: function beforeUpdate() {\n            // force removing pass\n            this.__patch__(\n                this._vnode,\n                this.kept,\n                false, // hydrating\n                true // removeOnly (!important, avoids unnecessary moves)\n            );\n            this._vnode = this.kept;\n        },\n\n        updated: function updated() {\n            var children = this.prevChildren;\n            var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n            if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n                return\n            }\n\n            // we divide the work into three loops to avoid mixing DOM reads and writes\n            // in each iteration - which helps prevent layout thrashing.\n            children.forEach(callPendingCbs);\n            children.forEach(recordPosition);\n            children.forEach(applyTranslation);\n\n            // force reflow to put everything in position\n            // assign to this to avoid being removed in tree-shaking\n            // $flow-disable-line\n            this._reflow = document.body.offsetHeight;\n\n            children.forEach(function (c) {\n                if (c.data.moved) {\n                    var el = c.elm;\n                    var s = el.style;\n                    addTransitionClass(el, moveClass);\n                    s.transform = s.WebkitTransform = s.transitionDuration = '';\n                    el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {\n                        if (!e || /transform$/.test(e.propertyName)) {\n                            el.removeEventListener(transitionEndEvent, cb);\n                            el._moveCb = null;\n                            removeTransitionClass(el, moveClass);\n                        }\n                    });\n                }\n            });\n        },\n\n        methods: {\n            hasMove: function hasMove(el, moveClass) {\n                /* istanbul ignore if */\n                if (!hasTransition) {\n                    return false\n                }\n                /* istanbul ignore if */\n                if (this._hasMove) {\n                    return this._hasMove\n                }\n                // Detect whether an element with the move class applied has\n                // CSS transitions. Since the element may be inside an entering\n                // transition at this very moment, we make a clone of it and remove\n                // all other transition classes applied to ensure only the move class\n                // is applied.\n                var clone = el.cloneNode();\n                if (el._transitionClasses) {\n                    el._transitionClasses.forEach(function (cls) {\n                        removeClass(clone, cls);\n                    });\n                }\n                addClass(clone, moveClass);\n                clone.style.display = 'none';\n                this.$el.appendChild(clone);\n                var info = getTransitionInfo(clone);\n                this.$el.removeChild(clone);\n                return (this._hasMove = info.hasTransform)\n            }\n        }\n    }\n\n    function callPendingCbs(c) {\n        /* istanbul ignore if */\n        if (c.elm._moveCb) {\n            c.elm._moveCb();\n        }\n        /* istanbul ignore if */\n        if (c.elm._enterCb) {\n            c.elm._enterCb();\n        }\n    }\n\n    function recordPosition(c) {\n        c.data.newPos = c.elm.getBoundingClientRect();\n    }\n\n    function applyTranslation(c) {\n        var oldPos = c.data.pos;\n        var newPos = c.data.newPos;\n        var dx = oldPos.left - newPos.left;\n        var dy = oldPos.top - newPos.top;\n        if (dx || dy) {\n            c.data.moved = true;\n            var s = c.elm.style;\n            s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n            s.transitionDuration = '0s';\n        }\n    }\n\n    var platformComponents = {\n        Transition: Transition,\n        TransitionGroup: TransitionGroup\n    }\n\n    /*  */\n\n    // install platform specific utils\n    /*校验属性\n     * 1. attr === 'value', tag 必须是 'input,textarea,option,select,progress' 其中一个 type !== 'button'\n     * 2. attr === 'selected' && tag === 'option'\n     * 3. attr === 'checked' && tag === 'input'\n     * 4. attr === 'muted' && tag === 'video'\n     * 的情况下为真\n     * */\n    Vue.config.mustUseProp = mustUseProp;    //校验属性\n\n\n    Vue.config.isReservedTag = isReservedTag;\n    Vue.config.isReservedAttr = isReservedAttr;\n    Vue.config.getTagNamespace = getTagNamespace;\n    Vue.config.isUnknownElement = isUnknownElement;\n\n    // install platform runtime directives & components\n    extend(Vue.options.directives, platformDirectives);\n    extend(Vue.options.components, platformComponents);\n\n    // install platform patch function 安装平台补丁功能\n    Vue.prototype.__patch__ = inBrowser ? patch : noop;\n\n    // public mount method 安装方法 实例方法挂载 vm\n    // 手动地挂载一个未挂载的实例。\n\n    Vue.prototype.$mount = function (\n        el,  //真实dom 或者是string\n        hydrating  //新的虚拟dom vonde\n    ) {\n\n        console.log('$mount12248==')\n        debugger\n  \n        el = el && inBrowser ? query(el) : undefined;\n        return mountComponent(\n            this,\n            el,\n            hydrating\n        )\n    };\n\n    // devtools global hook\n    /* istanbul ignore next */\n    if (inBrowser) {\n        setTimeout(function () {\n            if (config.devtools) {\n                if (devtools) {\n                    devtools.emit('init', Vue);\n                } else if (\n                    \"development\" !== 'production' &&\n                    \"development\" !== 'test' &&\n                    isChrome\n                ) {\n                    console[console.info ? 'info' : 'log'](\n                        'Download the Vue Devtools extension for a better development experience:\\n' +\n                        'https://github.com/vuejs/vue-devtools'\n                    );\n                }\n            }\n            //如果不是生产环境\n            if (\"development\" !== 'production' &&\n                \"development\" !== 'test' &&\n                config.productionTip !== false &&\n                typeof console !== 'undefined'\n            ) {\n                console[console.info ? 'info' : 'log'](\n                    \"You are running Vue in development mode.\\n\" +\n                    \"Make sure to turn on production mode when deploying for production.\\n\" +\n                    \"See more tips at https://vuejs.org/guide/deployment.html\"\n                );\n            }\n        }, 0);\n    }\n\n    /*  */\n    //\n    var defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g; //匹配viwe 视图中的{{指令}}\n    var regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g; //匹配特殊符号  - 或者. 或者* 或者+ 或者? 或者^ 或者$ 或者{ 或者} 或者( 或者) 或者| 或者[ 或者] 或者/ 或者\\\n\n\n    var buildRegex = cached(function (delimiters) {\n        var open = delimiters[0].replace(regexEscapeRE, '\\\\$&'); //$&\t与 regexp 相匹配的子串。 这里的意思是遇到了特殊符号的时候在正则里面需要替换加多一个/斜杠\n        var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n        return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g') // 匹配开始的open +任意字符或者换行符+ close 全局匹配\n    });\n\n\n    //匹配view 指令，并且把他转换成 虚拟dom vonde 需要渲染的函数,比如指令{{name}}转换成 _s(name)\n    //比如字符串  我叫{{name}},今年{{age}},数据{{data.number}}个手机  转换成 我叫+_s(name)+,今年+_s(age)+,数据+_s(data.number)+个手机\n    function parseText(text, //字符串\n        delimiters //被修改默认的标签匹配\n    ) {\n        var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE; // 如果delimiters不存在则 用默认指令 {{}}，如果修改成其他指令则用其他指令\n        if (!tagRE.test(text)) { //判断字符串是否含有指令\n            return\n        }\n        var tokens = [];\n        var rawTokens = [];\n        var lastIndex = tagRE.lastIndex = 0;\n        var match, index, tokenValue;\n        while ((match = tagRE.exec(text))) { //循环能匹配上的指令，全局匹配代码：的时候会有个lastIndex  执行exec方法后，lastIndex就会记录匹配的字符串在原始字符串中最后一位的索引加一，\n            console.log('match=')\n            console.log(match)\n            console.log('match.index=' + match.index)\n            console.log('lastIndex=' + lastIndex)\n            index = match.index; //当前匹配上的字符串位置，也可以是上一次匹配出来的位置\n            // push text token\n            if (index > lastIndex) { //\n                rawTokens.push(tokenValue = text.slice(lastIndex, index)); //截取匹配到字符串指令前面的字符串，并添加到rawTokens\n                tokens.push(JSON.stringify(tokenValue)); //添加匹配到字符串指令前面的字符串\n            }\n            // tag token\n            //处理value 解析成正确的value，把过滤器 转换成vue 虚拟dom的解析方法函数 比如把过滤器 ' ab | c | d' 转换成 _f(\"d\")(_f(\"c\")(ab))\n            var exp = parseFilters(match[1].trim()); //\n            tokens.push((\"_s(\" + exp + \")\")); //把指令转义成函数，便于vonde 虚拟dom 渲染 比如指令{{name}} 转换成 _s(name)\n            rawTokens.push({ '@binding': exp }); //绑定指令{{name}} 指令转换成  [{@binding: \"name\"}]\n            lastIndex = index + match[0].length; // 上一次匹配出来的字符串的位置+上一次字符串的长度  比如字符串   我叫{{name}},今年{{age}},数据{{data.number}}个手机  这时候lastIndex 等于10\n\n        }\n        console.log(lastIndex)\n        console.log(text.length)\n        if (lastIndex < text.length) { //拼接最后一个字符， 数据{{data.number}}个手机    把个手机 的字符串连接起来\n            rawTokens.push(tokenValue = text.slice(lastIndex)); //截取字符串。到最后一位\n            tokens.push(JSON.stringify(tokenValue)); //拼接最后一位字符串\n        }\n        return {\n            expression: tokens.join('+'), //把数组变成字符串，用加号链接 比如数组为 ['我叫','_s(name)',',今年','_s(age)',',数据','_s(data.number)','个手机']  变成   我叫+_s(name)+,今年+_s(age)+,数据+_s(data.number)+个手机\n            tokens: rawTokens\n        }\n    }\n\n    console.log(parseText('我叫{{name}},今年{{age}},数据{{data.number}}个手机'))\n    //    console.log(parseText('{{name}}这个'))\n\n    /*\n     * 获取 class 属性和:class或者v-bind的动态属性值，并且转化成字符串 添加到staticClass和classBinding 属性中\n     * */\n    function transformNode(\n        el, //虚拟dom vonde\n        options //用户 new Vue 的参数\n    ) {\n        var warn = options.warn || baseWarn; //警告日志\n        var staticClass = getAndRemoveAttr(el, 'class'); //获取class\n\n        if (\"development\" !== 'production' && staticClass) {\n            //匹配view 指令，并且把他转换成 虚拟dom vonde 需要渲染的函数,比如指令{{name}}转换成 _s(name)\n            var res = parseText(\n                staticClass, //class 属性值\n                options.delimiters //指令 {{ }} 或者自定义指令['${',  '}']\n            );\n            //如果在静态的class中有动态 指令的话 则发出警告\n            //当用户设置  class=\"{ active: isActive }\"    data={ active:true}, 应该用户是不是忘记加 : 点了\n            if (res) {\n                warn(\n                    \"class=\\\"\" + staticClass + \"\\\": \" +\n                    'Interpolation inside attributes has been removed. ' +\n                    'Use v-bind or the colon shorthand instead. For example, ' +\n                    'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n                );\n            }\n        }\n        if (staticClass) {\n            //获取原始class属性的值  转化成字符串\n            el.staticClass = JSON.stringify(staticClass);\n        }\n        //获取 :class或者v-bind的动态属性值\n        var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n        if (classBinding) {\n            el.classBinding = classBinding;\n        }\n    }\n\n    //创数据，转换class\n    function genData(el) {\n        var data = '';\n        if (el.staticClass) {\n            //el.staticClass 比如我们设置样式是这样  class=\"classA classB\" 此时将数据变成   staticClass:classA classB,\n            data += \"staticClass:\" + (el.staticClass) + \",\";\n        }\n        if (el.classBinding) {\n            //el.staticClass 比如我们设置样式是这样  class=\"classC classD\" 此时将数据变成   class:classC classD,\n            data += \"class:\" + (el.classBinding) + \",\";\n        }\n        return data\n    }\n\n    var klass$1 = {\n        staticKeys: ['staticClass'],\n        transformNode: transformNode,\n        genData: genData\n    }\n\n    /*\n     transformNode$1获取 style属性和:style或者v-bind的动态属性值，并且转化成字符串 添加到staticStyle和styleBinding属性中\n     * */\n    function transformNode$1(el, options) {\n        var warn = options.warn || baseWarn;\n        var staticStyle = getAndRemoveAttr(el, 'style');\n        if (staticStyle) {\n            /* istanbul ignore if */\n            {\n                //匹配view 指令，并且把他转换成 虚拟dom vonde 需要渲染的函数,比如指令{{name}}转换成 _s(name)\n                var res = parseText(staticStyle, options.delimiters);\n                //如果在静态的class中有动态 指令的话 则发出警告\n                //当用户设置  style=\"{ width: num }\"    data={ num:'100px'}, 应该用户是不是忘记加 : 点了\n                if (res) {\n                    warn(\n                        \"style=\\\"\" + staticStyle + \"\\\": \" +\n                        'Interpolation inside attributes has been removed. ' +\n                        'Use v-bind or the colon shorthand instead. For example, ' +\n                        'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n                    );\n                }\n            }\n            //把style 字符串 转换成对象 比如'width:100px;height:200px;' 转化成 {width:100px,height:200px}\n            // 然后在转换成字符串\n            el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n        }\n\n        var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n        if (styleBinding) {\n            el.styleBinding = styleBinding;\n        }\n    }\n\n    //style 数据转换\n    function genData$1(el) {\n        var data = '';\n        if (el.staticStyle) {\n            //比如staticStyle的值是  {width:100px,height:200px} 转换成 staticStyle:{width:100px,height:200px},\n            data += \"staticStyle:\" + (el.staticStyle) + \",\";\n        }\n        if (el.styleBinding) {\n            //比如style的值是  {width:100px,height:200px} 转换成 style:(width:100px,height:200px),\n            data += \"style:(\" + (el.styleBinding) + \"),\";\n        }\n        return data\n    }\n\n    var style$1 = {\n        staticKeys: ['staticStyle'],\n        transformNode: transformNode$1,\n        genData: genData$1\n    }\n\n    /*  */\n\n    var decoder;\n    //获取html文本内容\n    var he = {\n        decode: function decode(html) {\n            decoder = decoder || document.createElement('div');\n            decoder.innerHTML = html;\n            return decoder.textContent\n        }\n    }\n\n    /*  */\n\n    var isUnaryTag = makeMap(\n        'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n        'link,meta,param,source,track,wbr'\n    );\n\n    // Elements that you can, intentionally, leave open\n    // (and which close themselves)\n    var canBeLeftOpenTag = makeMap(\n        'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n    );\n\n    // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n    // Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\n    /*          判断标签是否是\n                'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n                'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n                'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n                'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n                'title,tr,track'\n    */\n    var isNonPhrasingTag = makeMap(\n        'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n        'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n        'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n        'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n        'title,tr,track'\n    );\n\n    /**\n     * Not type-checking this file because it's mostly vendor code.\n     */\n\n    /*!\n     * HTML Parser By John Resig (ejohn.org)\n     * Modified by Juriy \"kangax\" Zaytsev\n     * Original code by Erik Arvidsson, Mozilla Public License\n     * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n     */\n\n    // Regular Expressions for parsing tags and attributes 解析标记和属性的正则表达式\n    var attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n    // could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n    // but for Vue templates we can enforce a simple charset\n    var ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\n    var qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\"; //  ((?:[a-zA-Z_][\\\\w\\\\-\\\\.]*\\\\:)?[a-zA-Z_][\\\\w\\\\-\\\\.]*)\n    var startTagOpen = new RegExp((\"^<\" + qnameCapture))  // 匹配开头必需是< 后面可以忽略是任何字符串  ^<((?:[a-zA-Z_][\\\\w\\\\-\\\\.]*\\\\:)?[a-zA-Z_][\\\\w\\\\-\\\\.]*)\n    var startTagClose = /^\\s*(\\/?)>/; //     匹配 > 标签 或者/> 闭合标签\n    var endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));  //匹配开头必需是</ 后面可以忽略是任何字符串  ^<\\\\/((?:[a-zA-Z_][\\\\w\\\\-\\\\.]*\\\\:)?[a-zA-Z_][\\\\w\\\\-\\\\.]*)[^>]*>\n    var doctype = /^<!DOCTYPE [^>]+>/i; //匹配html的头文件 <!DOCTYPE html>\n    // #7298: escape - to avoid being pased as HTML comment when inlined in page\n    var comment = /^<!\\--/; // 匹配 开始字符串为<!--任何字符串\n    var conditionalComment = /^<!\\[/; //匹配开始为 <![ 字符串    匹配这样动态加ie浏览器的 字符串  <!--[if IE 8]><link href=\"ie8only.css\" rel=\"stylesheet\"><![endif]-->\n\n    var IS_REGEX_CAPTURING_BROKEN = false;\n    'x'.replace(/x(.)?/g, function (m, g) {\n        IS_REGEX_CAPTURING_BROKEN = g === '';\n    });\n\n    // Special Elements (can contain anything)  判断标签是是否是script,style,textarea\n    var isPlainTextElement = makeMap('script,style,textarea', true);\n    var reCache = {};\n    //替换 把   &lt;替换 <  ， &gt; 替换 > ， &quot;替换  \"， &amp;替换 & ， &#10;替换\\n  ，&#9;替换\\t\n    var decodingMap = {\n        '&lt;': '<',\n        '&gt;': '>',\n        '&quot;': '\"',\n        '&amp;': '&',\n        '&#10;': '\\n',\n        '&#9;': '\\t'\n    };\n    var encodedAttr = /&(?:lt|gt|quot|amp);/g;   //匹配 &lt或&gt或&quot或&amp\n    var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10|#9);/g; //匹配 &lt或&gt或&quot或&amp或&#10或&#9\n\n    //判断标签是否pre,textarea\n    var isIgnoreNewlineTag = makeMap('pre,textarea', true);\n    //匹配tag标签是pre,textarea，并且第二个参数的第一个字符是回车键\n    var shouldIgnoreFirstNewline = function (tag, html) {\n        return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n';\n    };\n\n    //替换html 中的特殊符号，转义成js解析的字符串,替换 把   &lt;替换 <  ， &gt; 替换 > ， &quot;替换  \"， &amp;替换 & ， &#10;替换\\n  ，&#9;替换\\t\n    function decodeAttr(\n        value, //标签中属性的值\n        shouldDecodeNewlines  //状态布尔值 标志。判断是否是a标签和是ie浏览器还是谷歌浏览器\n    ) {\n        console.log(value)\n        console.log(shouldDecodeNewlines)\n\n        var re = shouldDecodeNewlines ? encodedAttrWithNewLines :  //匹配 &lt或&gt或&quot或&amp或&#10或&#9\n            encodedAttr;   //匹配 &lt或&gt或&quot或&amp\n        //替换html 中的特殊符号，转义成js解析的字符串\n        return value.replace(re, function (match) {\n            // 替换 把   &lt;替换 <  ， &gt; 替换 > ， &quot;替换  \"， &amp;替换 & ， &#10;替换\\n  ，&#9;替换\\t\n            return decodingMap[match];\n        })\n    }\n\n    function parseHTML(\n        html, //字符串模板\n        options //参数\n    ) {\n        var stack = []; // parseHTML 节点标签堆栈\n        var expectHTML = options.expectHTML; //true\n        var isUnaryTag$$1 = options.isUnaryTag || no; //函数匹配标签是否是 'area,base,br,col,embed,frame,hr,img,input,isindex,keygen, link,meta,param,source,track,wbr'\n        var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no; //函数 //判断标签是否是 'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n        var index = 0;\n        var last, //\n            lastTag; //\n        console.log(html)\n\n\n\n        while (html) { //循环html\n            last = html; //\n            // Make sure we're not in a plaintext content element like script/style 确保我们不在像脚本/样式这样的纯文本内容元素中\n            if (\n                !lastTag || //lastTag 不存在\n                !isPlainTextElement(lastTag)  // 如果标签不是script,style,textarea\n            ) {\n\n                var textEnd = html.indexOf('<'); //匹配开始标签或者结束标签的位置\n                if (textEnd === 0) { //标识是开始标签\n                    // Comment:\n                    if (comment.test(html)) { //匹配 开始字符串为<!--任何字符串,注释标签  如果匹配上\n                        var commentEnd = html.indexOf('-->'); //获取注释标签的结束位置\n\n                        if (commentEnd >= 0) { //如果注释标签结束标签位置大于0，则有注释内容\n                            console.log(html.substring(4, commentEnd))\n                            if (options.shouldKeepComment) { //shouldKeepComment为真时候。获取注释标签内容\n\n                                //截取注释标签的内容\n                                options.comment(html.substring(4, commentEnd));\n                            }\n                            //截取字符串重新循环  while 跳出循环就是靠该函数，每次匹配到之后就截取掉字符串，知道最后一个标签被截取完没有匹配到则跳出循环\n                            advance(commentEnd + 3);\n                            continue\n                        }\n                    }\n\n                    //这里思路是先匹配到注释节点，在匹配到这里的ie浏览器加载样式节点\n                    // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n                    if (conditionalComment.test(html)) {  //匹配开始为 <![ 字符串  <![endif]-->   匹配这样动态加ie浏览器的 字符串  <!--[if IE 8]><link href=\"ie8only.css\" rel=\"stylesheet\"><![endif]-->\n                        //匹配ie浏览器动态加样式结束符号\n                        var conditionalEnd = html.indexOf(']>');\n\n                        if (conditionalEnd >= 0) {\n                            //截取字符串重新循环  while 跳出循环就是靠该函数，每次匹配到之后就截取掉字符串，知道最后一个标签被截取完没有匹配到则跳出循环\n                            advance(conditionalEnd + 2);\n                            continue\n                        }\n                    }\n\n                    // Doctype:\n                    //匹配html的头文件 <!DOCTYPE html>\n                    var doctypeMatch = html.match(doctype);\n                    if (doctypeMatch) {\n                        //截取字符串重新循环  while 跳出循环就是靠该函数，每次匹配到之后就截取掉字符串，知道最后一个标签被截取完没有匹配到则跳出循环\n                        advance(doctypeMatch[0].length);\n                        continue\n                    }\n\n                    // End tag:\n                    //匹配开头必需是</ 后面可以忽略是任何字符串  ^<\\\\/((?:[a-zA-Z_][\\\\w\\\\-\\\\.]*\\\\:)?[a-zA-Z_][\\\\w\\\\-\\\\.]*)[^>]*>\n                    var endTagMatch = html.match(endTag);\n                    if (endTagMatch) {\n\n                        var curIndex = index;\n                        //标签分隔函数 while 跳出循环就是靠该函数，每次匹配到之后就截取掉字符串，知道最后一个标签被截取完没有匹配到则跳出循环\n                        advance(endTagMatch[0].length);\n                        console.log(endTagMatch)\n                        console.log(curIndex, index)\n                        //查找parseHTML的stack栈中与当前tagName标签名称相等的标签，\n                        //调用options.end函数，删除当前节点的子节点中的最后一个如果是空格或者空的文本节点则删除，\n                        //为stack出栈一个当前标签，为currentParent变量获取到当前节点的父节点\n                        parseEndTag(\n                            endTagMatch[1],\n                            curIndex,\n                            index\n                        );\n                        continue\n                    }\n\n                    // Start tag:\n                    //解析开始标记 标记开始标签\n                    //  获取开始标签的名称，属性集合，开始位置和结束位置，并且返回该对象\n                    var startTagMatch = parseStartTag();\n\n                    if (startTagMatch) {\n                        //把数组对象属性值循环变成对象，这样可以过滤相同的属性\n                        //为parseHTML 节点标签堆栈 插入一个桟数据\n                        //调用options.start  为parse函数 stack标签堆栈 添加一个标签\n                        handleStartTag(startTagMatch);\n                        //匹配tag标签是pre,textarea，并且第二个参数的第一个字符是回车键\n                        if (shouldIgnoreFirstNewline(lastTag, html)) {\n                            //去除回车键空格\n                            advance(1);\n                        }\n                        continue\n                    }\n                }\n\n                var text = (void 0),\n                    rest = (void 0),\n                    next = (void 0);\n                if (textEnd >= 0) {\n\n                    rest = html.slice(textEnd); //截取字符串  var textEnd = html.indexOf('<'); //匹配开始标签或者结束标签的位置\n                    console.log(rest)\n\n                    while (\n                        !endTag.test(rest) && //匹配开头必需是</ 后面可以忽略是任何字符串\n                        !startTagOpen.test(rest) && // 匹配开头必需是< 后面可以忽略是任何字符串\n                        !comment.test(rest) && // 匹配 开始字符串为<!--任何字符串\n                        !conditionalComment.test(rest) //匹配开�"
        },
        {
          "name": "vue.js中HOOK函数.docx",
          "type": "blob",
          "size": 14.83203125,
          "content": null
        },
        {
          "name": "vue实现单页返回缓存，下一页刷新.doc",
          "type": "blob",
          "size": 297.2900390625,
          "content": null
        },
        {
          "name": "vue数据监听.docx",
          "type": "blob",
          "size": 40.1435546875,
          "content": null
        },
        {
          "name": "vue源码分析.docx",
          "type": "blob",
          "size": 12.9794921875,
          "content": null
        },
        {
          "name": "vue源码分析.jpg",
          "type": "blob",
          "size": 42.591796875,
          "content": null
        },
        {
          "name": "vue源码帖子分析.docx",
          "type": "blob",
          "size": 11.474609375,
          "content": null
        },
        {
          "name": "vue零散代码分析.html",
          "type": "blob",
          "size": 0.375,
          "content": " <html>\r\n   <body>\r\n<script type=\"text/javascript\">\r\n     /* istanbul ignore next */\r\nfunction isNative (Ctor) {\r\n\r\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\r\n}\r\nfunction code(){\r\n  var native='native codedsfgf'\r\n}\r\nconsole.log(typeof code === 'function')\r\nconsole.log( code.toString() )\r\nconsole.log(isNative(code))\r\n</script>\r\n   </body>\r\n </html>\r\n"
        },
        {
          "name": "window_performance.html",
          "type": "blob",
          "size": 2.6650390625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"//cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css\" />\r\n</head>\r\n<body>\r\n  <script>\r\n     for(var i=0; i<1000000000; i++){\r\n\r\n     }\r\n      ;\r\n      (function() {\r\n\r\n          handleAddListener('load', getTiming)\r\n\r\n          function handleAddListener(type, fn) {\r\n              if(window.addEventListener) {\r\n                  window.addEventListener(type, fn)\r\n              } else {\r\n                  window.attachEvent('on' + type, fn)\r\n              }\r\n          }\r\n\r\n          function getTiming() {\r\n              try {\r\n                  var time = performance.timing;\r\n                  var timingObj = {};\r\n\r\n                  var loadTime = (time.loadEventEnd - time.loadEventStart) / 1000;\r\n\r\n                  if(loadTime < 0) {\r\n                      setTimeout(function() {\r\n                          getTiming();\r\n                      }, 200);\r\n                      return;\r\n                  }\r\n\r\n                  timingObj['重定向时间'] = (time.redirectEnd - time.redirectStart) / 1000;\r\n                  timingObj['DNS解析时间'] = (time.domainLookupEnd - time.domainLookupStart) / 1000;\r\n                  timingObj['TCP完成握手时间'] = (time.connectEnd - time.connectStart) / 1000;\r\n                  timingObj['HTTP请求响应完成时间'] = (time.responseEnd - time.requestStart) / 1000;\r\n                  timingObj['DOM开始加载前所花费时间'] = (time.responseEnd - time.navigationStart) / 1000;\r\n                  timingObj['DOM加载完成时间'] = (time.domComplete - time.domLoading) / 1000;\r\n                  timingObj['DOM结构解析完成时间'] = (time.domInteractive - time.domLoading) / 1000;\r\n                  timingObj['脚本加载时间'] = (time.domContentLoadedEventEnd - time.domContentLoadedEventStart) / 1000;\r\n                  timingObj['onload事件时间'] = (time.loadEventEnd - time.loadEventStart) / 1000;\r\n                  timingObj['页面完全加载时间'] = (timingObj['重定向时间'] + timingObj['DNS解析时间'] + timingObj['TCP完成握手时间'] + timingObj['HTTP请求响应完成时间'] + timingObj['DOM结构解析完成时间'] + timingObj['DOM加载完成时间']);\r\n\r\n                  for(item in timingObj) {\r\n                      console.log(item + \":\" + timingObj[item] + '毫秒(ms)');\r\n                  }\r\n\r\n                  console.log(performance.timing);\r\n\r\n              } catch(e) {\r\n                  console.log(timingObj)\r\n                  console.log(performance.timing);\r\n              }\r\n          }\r\n      })();\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "window_performance1.html",
          "type": "blob",
          "size": 1.15234375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"//cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css\" />\r\n</head>\r\n<body>\r\n  <script>\r\n   //   https://segmentfault.com/a/1190000002445735\r\n\r\n//      window.webkitPerformance : chrome6-9\r\n//      window.performance :  ie9 chrome10+\r\n      {\r\n\r\n          var perf =  window.performance||window.webkitPerformance;\r\n\r\n\r\n          /* istanbul ignore if */\r\n          if (\r\n              perf &&\r\n              perf.mark &&\r\n              perf.measure &&\r\n              perf.clearMarks &&\r\n              perf.clearMeasures\r\n          ) {\r\n              mark = function (tag) { return perf.mark(tag); };\r\n              measure = function (name, startTag, endTag) {\r\n                  perf.measure(name, startTag, endTag);\r\n                  perf.clearMarks(startTag);\r\n                  perf.clearMarks(endTag);\r\n                  perf.clearMeasures(name);\r\n              };\r\n          }\r\n      }\r\n      console.log(perf.mark)\r\n\r\n      console.log(mark('vue-perf-start1'))\r\n      console.log(measure)\r\n\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "with.html",
          "type": "blob",
          "size": 1.865234375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n\r\n</head>\r\n<body>\r\n<script>\r\n    //https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with\r\n//    不建议使用with语句，因为它可能是混淆错误和兼容性问题的根源。有关详细信息，请参阅下面“说明”一节中的“歧义对比”部分。\r\n//    with语句 扩展一个语句的作用域链。\r\n//    语法节\r\n//    with (expression) {\r\n//        statement\r\n//    }\r\n//    expression\r\n//    将给定的表达式添加到在评估语句时使用的作用域链上。表达式周围的括号是必需的。\r\n//    statement\r\n//    任何语句。要执行多个语句，请使用一个块语句 ({ ... })对这些语句进行分组。\r\n//性能方面的利与弊节\r\n//利：with语句可以在不造成性能损失的情況下，减少变量的长度。其造成的附加计算量很少。使用'with'可以减少不必要的指针路径解析运算。需要注意的是，很多情況下，也可以不使用with语句，而是使用一个临时变量来保存指针，来达到同样的效果。\r\n//\r\n//弊：with语句使得程序在查找变量值时，都是先在指定的对象中查找。所以那些本来不是这个对象的属性的变量，查找起来将会很慢。如果是在对性能要求较高的场合，'with'下面的statement语句中的变量，只应该包含这个指定对象的属性。\r\n//\r\n//语义不明的弊端节\r\n//弊端：with语句使得代码不易阅读，同时使得JavaScript编译器难以在作用域链上查找某个变量，难以决定应该在哪个对象上来取值。请看下面的例子：\r\n    var a={};\r\n    a.name='张三';a.sex='女';\r\n    console.log(a.name);\r\n    console.log(a.sex);\r\n    with(a){\r\n        console.log(name);\r\n        console.log(sex);\r\n    }\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "wrapFilter.html",
          "type": "blob",
          "size": 1.3046875,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    function wrapFilter(exp, filter) {\r\n        var i = filter.indexOf('('); //返回字符串第一次出现索引的位置\r\n        console.log('i='+i)\r\n        if (i < 0) {\r\n            // _f: resolveFilter\r\n            return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\") //闭包\r\n        } else {\r\n            //name 是 从字符串开始到(结束的字符串,不包含(\r\n            var name = filter.slice(0, i); //截取字符串 arrayObject.slice(start,end)\r\n            console.log('==name==')\r\n            console.log(name)\r\n\r\n            //args是从(开始匹配，到字符串末端，不包含(\r\n            var args = filter.slice(i + 1); //如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。\r\n            console.log('==args==')\r\n            console.log(args)\r\n            return (\r\n                    \"_f(\\\"\" + name + \"\\\")(\" + exp +\r\n                    (\r\n                            args !== ')' ?\r\n                                            ',' + args\r\n                                            : args\r\n                    )\r\n                   )\r\n        }\r\n    }\r\n    console.log(wrapFilter('abc','defg(hijk)'))\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "三木分析.html",
          "type": "blob",
          "size": 0.537109375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<style>\r\n     div{\r\n         position: absolute;\r\n         position: relative;\r\n         position: fixed;\r\n     }\r\n</style>\r\n  <script>\r\n       var a=typeof function () {}==='function'&&5>4?6:9;\r\n      console.log(a)\r\n       console.log(typeof function () {}==='function')\r\n       console.log(typeof function () {}==='asdf')\r\n      console.log(true&&5>4?6:!9)\r\n      console.log( false&&!false||5<4?6:9)\r\n\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "三木分析1.html",
          "type": "blob",
          "size": 0.8017578125,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      var vm= {\r\n          cid:2345234,\r\n          _isVue:true,\r\n          $options:{\r\n              _$options:'_$options'\r\n          },\r\n          options:{\r\n              name:'vue'\r\n\r\n          }\r\n      };\r\n      var options =\r\n              (typeof vm === 'function' && vm.cid != null) ?\r\n                                                              vm.options :\r\n                                                              (vm._isVue ?\r\n                                                                         vm.$options || vm.constructor.options\r\n                                                                         : vm || {});\r\nconsole.dir(options)\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "与或非优先图jpg.jpg",
          "type": "blob",
          "size": 32.9619140625,
          "content": null
        },
        {
          "name": "匿名函数执行.html",
          "type": "blob",
          "size": 0.2109375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n      function noop (a, b, c) {}\r\n      console.log((noop))\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "发布-订阅模式.html",
          "type": "blob",
          "size": 4.1474609375,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n  <script>\r\n\r\n      var pubsub = {};\r\n\r\n      (function(myObject) {\r\n\r\n          // Storage for topics that can be broadcast 可以广播的主题的存储\r\n          // or listened to 或者听\r\n          var topics = {};\r\n\r\n          // A topic identifier 主题标识符\r\n          var subUid = -1;\r\n\r\n          // Publish or broadcast events of interest 发布或广播感兴趣的事件\r\n          // with a specific topic name and arguments   具有特定的主题名称和参数\r\n          // such as the data to pass along 如数据传递\r\n          myObject.publish = function( topic, args ) {\r\n\r\n              if ( !topics[topic] ) {\r\n                  return false;\r\n              }\r\n\r\n              var subscribers = topics[topic],\r\n                      len = subscribers ? subscribers.length : 0;\r\n\r\n              while (len--) {\r\n                  subscribers[len].func( topic, args );\r\n              }\r\n\r\n              return this;\r\n          };\r\n\r\n          // Subscribe to events of interest  订阅感兴趣的事件\r\n          // with a specific topic name and a 具有特定的主题名称和\r\n          // callback function, to be executed 回调函数，将被执行\r\n          // when the topic/event is observed 当观察到主题/事件时\r\n          myObject.subscribe = function( topic, func ) {\r\n\r\n              if (!topics[topic]) {\r\n                  topics[topic] = [];\r\n              }\r\n\r\n              var token = ( ++subUid ).toString();\r\n              topics[topic].push({\r\n                  token: token,\r\n                  func: func\r\n              });\r\n              return token;\r\n          };\r\n\r\n          // Unsubscribe from a specific 取消订阅\r\n          // topic, based on a tokenized reference 主题，基于标记化参考\r\n          // to the subscription 订阅\r\n          myObject.unsubscribe = function( token ) {\r\n              for ( var m in topics ) {\r\n                  if ( topics[m] ) {\r\n                      for ( var i = 0, j = topics[m].length; i < j; i++ ) {\r\n                          if ( topics[m][i].token === token ) {\r\n                              topics[m].splice( i, 1 );\r\n                              return token;\r\n                          }\r\n                      }\r\n                  }\r\n              }\r\n              return this;\r\n          };\r\n      }( pubsub ));\r\n\r\n      // A simple message logger that logs any topics and data received through our 一个简单的消息记录器，记录通过我们接收的任何主题和数据。\r\n      // subscriber 用户\r\n      var messageLogger = function ( topics, data ) {\r\n          console.log( \"Logging: \" + topics + \": \" + data );\r\n      };\r\n\r\n\r\n      // Subscribers listen for topics they have subscribed to and 订阅者监听他们订阅的主题和\r\n      // invoke a callback function (e.g messageLogger) once a new 调用一个新的回调函数（例如MasigelgGER）\r\n      // notification is broadcast on that topic 这个主题广播通知\r\n      var subscription = pubsub.subscribe( \"inbox/newMessage\", messageLogger );\r\n\r\n      // Publishers are in charge of publishing topics or notifications of 出版商负责出版主题或通知。\r\n      // interest to the application. e.g: 对应用程序有兴趣。例如：\r\n\r\n      pubsub.publish( \"inbox/newMessage\", \"hello world!\" );\r\n\r\n      // or\r\n      pubsub.publish( \"inbox/newMessage\", [\"test\", \"a\", \"b\", \"c\"] );\r\n\r\n      // or\r\n      pubsub.publish( \"inbox/newMessage\", {\r\n          sender: \"hello@google.com\",\r\n          body: \"Hey again!\"\r\n      });\r\n\r\n      // We can also unsubscribe if we no longer wish for our subscribers   如果我们不再希望我们的订户，我们也可以退订。\r\n      // to be notified  被通知\r\n      pubsub.unsubscribe( subscription );\r\n\r\n      // Once unsubscribed, this for example won't result in our  一旦退订，这将不会导致我们的\r\n      // messageLogger being executed as the subscriber is MasaGelgGER作为订阅服务器执行\r\n      // no longer listening 不再听\r\n      pubsub.publish( \"inbox/newMessage\", \"Hello! are you still there?\" );\r\n  </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "数组api.html",
          "type": "blob",
          "size": 1.884765625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<script>\r\n    var arr = [1,2,3,4,5,6,7,8,9,10];\r\n        arr.pop() //从数组中删除最后一个数组\r\n        arr.push(11); //从数组最后一个添加一个数字\r\n        arr.unshift(-1) //从数组前面添加一位数\r\n        arr.shift() //从数组前面删除一位\r\n    console.log(arr.splice(1,2)) //选中后的数组\r\n    console.log(arr) //被删除后的数组\r\n    console.log( arr.slice(1,4))//选中截取数组\r\n    console.log(arr.shift()) //删除数组中的第一个数据\r\n    console.log(arr.concat([1,2,3,4,5])) //链接拼接数组\r\n    console.log(arr.join(','))  //把数组才分成，变成字符串\r\n    console.log(arr.filter(item=>item>=4)); //数组过滤器\r\n    console.log(arr.every(item=>item>=-3)) //遍历数组每一条条件成功，才会返回成功状态\r\n    console.log(arr.some(item=>item>=10)) //遍历数组 只要有一个条件成功则返回true\r\n    console.log(arr.reduce((a,b)=>a+b)) //遍历数组 只要有一个条件成功则返回true\r\n    console.log(arr.find(item=>item>1)) //遍历数组 返回第一个条件满足的数组数据\r\n    console.log(arr.findIndex(item=>item>5)) //遍历数组 返回第一个条件为true的数组索引\r\n\r\n    for (let index of ['a', 'b'].keys()) { //获取数组key\r\n        console.log(index);\r\n        // 0\r\n        // 1\r\n    }\r\n\r\n    for (let elem of ['a', 'b'].values()) {\r\n        console.log(elem);\r\n        // 'a'\r\n        // 'b'\r\n    }\r\n\r\n    for (let [index, elem] of ['a', 'b'].entries()) {\r\n        console.log(index, elem);\r\n        // 0 \"a\"\r\n        // 1 \"b\"\r\n    }\r\n    //如果返回值大于等于1则是正序,a-b 也是正序， 小到大。如果是0 则是同级排序，如果是-1则是倒序，b-a, 大到小\r\n   console.log(arr.sort((a,b)=>{return b-a}));\r\n\r\n\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "数组的扩展-array.some()和array.every()区别？.docx",
          "type": "blob",
          "size": 12.0048828125,
          "content": null
        },
        {
          "name": "正则$.html",
          "type": "blob",
          "size": 1,
          "content": "<html>\r\n<meta charset=\"UTF-8\">\r\n<script language=\"javascript\" type=\"text/javascript\">\r\n    // 那个$0,$1....$9是表示正则匹配的组。\r\n    //$1-$9存放着正则表达式中最近的9个正则表达式的匹配结果，这些结果按照子匹配的出现顺序依次排列  正则匹配的组。\r\n    //创建要进行匹配的字符串\r\n    var objStr=\"这是我的手机号13100000012\"\r\n    //创建正则表达式匹配手机号码\r\n    var re =/(13)(\\d)(\\d{8})/;//该正则表达式可以匹配手机号码以13开头的11为号码以()为子匹配的标志\r\n    document.write(objStr.replace(re,\"$1$2********\"));//处于隐私对字符串按照正则表达式的内容进行替换\r\n    //如果第二个子匹配结果，即手机号码中的第三位数字小于等于3则该手机号为联通号码，否则为其他运营商的号码\r\n    if(RegExp.$2<=3){\r\n        document.write(\"这是联通手机号\");\r\n    }else{\r\n        document.write(\"这是移动或者电信手机号\");\r\n    }\r\n</script>\r\n</html>"
        },
        {
          "name": "理解vue实现原理，实现一个简单的Vue框架.docx",
          "type": "blob",
          "size": 71.76171875,
          "content": null
        },
        {
          "name": "虚拟dom.docx",
          "type": "blob",
          "size": 13.9462890625,
          "content": null
        },
        {
          "name": "观察者模式.html",
          "type": "blob",
          "size": 7.923828125,
          "content": "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>The \"Click the button\" page</title>\r\n    <meta charset=\"UTF-8\">\r\n</head>\r\n<body>\r\n<button id=\"addNewObserver\">Add New Observer checkbox</button>\r\n<input id=\"mainCheckbox\" type=\"checkbox\"/>\r\n<div id=\"observersContainer\"></div>\r\n<script type=\"text/javascript\" >\r\n    /*\r\n     * Subject\r\n     * 内部创建了三个方法，内部维护了一个ObserverList。\r\n     */\r\n\r\n\r\n    //contructor function\r\n    function Subject(){\r\n        this.observers = new ObserverList();\r\n    }\r\n\r\n    //addObserver: 调用内部维护的ObserverList的add方法\r\n    Subject.prototype.addObserver = function( observer ){\r\n        this.observers.add( observer );\r\n    };\r\n\r\n    //removeObserver: 调用内部维护的ObserverList的removeat方法\r\n    Subject.prototype.removeObserver = function( observer ){\r\n        this.observers.removeAt( this.observers.indexOf( observer, 0 ) );\r\n    };\r\n\r\n\r\n    //notify: 通知函数，用于通知观察者并且执行update函数，update是一个实现接口的方法，是一个通知的触发方法。\r\n     //更新数据通知\r\n\r\n    Subject.prototype.notify = function( context ){\r\n        var observerCount = this.observers.count(); //获取长度\r\n\r\n        for(var i=0; i < observerCount; i++){\r\n            this.observers.get(i).update( context );\r\n        }\r\n    };\r\n\r\n    /*\r\n     * ObserverList\r\n     * 内部维护了一个数组，4个方法用于数组的操作，这里相关的内容还是属于subject，因为ObserverList的存在是为了将subject和内部维护的observers分离开来，清晰明了的作用。\r\n     */\r\n    function ObserverList(){\r\n        this.observerList = [];\r\n    }\r\n\r\n    //添加一个订阅数组\r\n    ObserverList.prototype.add = function( obj ){\r\n        return this.observerList.push( obj );\r\n    };\r\n   //计算长度\r\n    ObserverList.prototype.count = function(){\r\n        return this.observerList.length;\r\n    };\r\n\r\n    //获取数据\r\n    ObserverList.prototype.get = function( index ){\r\n        if( index > -1 && index < this.observerList.length ){\r\n            return this.observerList[ index ];\r\n        }\r\n    };\r\n\r\n    //获取索引\r\n    ObserverList.prototype.indexOf = function( obj, startIndex ){\r\n        var i = startIndex;\r\n\r\n        while( i < this.observerList.length ){\r\n            if( this.observerList[i] === obj ){\r\n                return i;\r\n            }\r\n            i++;\r\n        }\r\n\r\n        return -1;\r\n    };\r\n\r\n    //删除队列\r\n    ObserverList.prototype.removeAt = function( index ){\r\n        this.observerList.splice( index, 1 );\r\n    };\r\n\r\n    /*\r\n     * The Observer\r\n     * 提供更新接口，为想要得到通知消息的主体提供接口。\r\n     */\r\n    function Observer(){\r\n        this.update = function(){\r\n            // ...\r\n        };\r\n    }\r\n\r\n\r\n    // Extend an object with an extension\r\n    //合并继承\r\n    function extend( obj, extension ){\r\n        for ( var key in extension ){\r\n            obj[key] = extension[key];\r\n        }\r\n    }\r\n\r\n    // References to our DOM elements\r\n  //获取dom\r\n    var controlCheckbox = document.getElementById( \"mainCheckbox\" ),\r\n            addBtn = document.getElementById( \"addNewObserver\" ),\r\n            container = document.getElementById( \"observersContainer\" );\r\n\r\n\r\n    // Concrete Subject\r\n\r\n    // Extend the controlling checkbox with the Subject class\r\n    //把Subject 方法合并到节点controlCheckbox中\r\n    extend( controlCheckbox, new Subject() );\r\n\r\n    // Clicking the checkbox will trigger notifications to its observers\r\n    //点击选中的时候更新数据\r\n    controlCheckbox.onclick = function(){\r\n        controlCheckbox.notify( controlCheckbox.checked );\r\n    };\r\n\r\n    addBtn.onclick = addNewObserver;\r\n\r\n    // Concrete Observer\r\n    function addNewObserver(){\r\n        console.log('addNewObserver')\r\n        // Create a new checkbox to be added\r\n        var check = document.createElement( \"input\" );  //创建一个input\r\n        check.type = \"checkbox\";\r\n\r\n        // Extend the checkbox with the Observer class\r\n        //用观测器类扩展复选框\r\n        extend( check, new Observer() );\r\n\r\n        // Override with custom update behaviour\r\n        //用自定义更新行为重写\r\n        check.update = function( value ){\r\n            this.checked = value;\r\n        };\r\n\r\n        // Add the new observer to our list of observers  将新观察者添加到我们的观察者列表中\r\n        // for our main subject 对于我们的主体\r\n        //添加一个观察者数据 其实就是添加一个dom进去\r\n        controlCheckbox.addObserver( check );\r\n\r\n        // Append the item to the container\r\n        container.appendChild( check );\r\n    }\r\n\r\n\r\n//    var pubsub = {};\r\n//\r\n//    (function(myObject) {\r\n//\r\n//        // Storage for topics that can be broadcast\r\n//        // or listened to\r\n//        var topics = {};\r\n//\r\n//        // A topic identifier\r\n//        var subUid = -1;\r\n//\r\n//        // Publish or broadcast events of interest\r\n//        // with a specific topic name and arguments\r\n//        // such as the data to pass along\r\n//        myObject.publish = function( topic, args ) {\r\n//\r\n//            if ( !topics[topic] ) {\r\n//                return false;\r\n//            }\r\n//\r\n//            var subscribers = topics[topic],\r\n//                    len = subscribers ? subscribers.length : 0;\r\n//\r\n//            while (len--) {\r\n//                subscribers[len].func( topic, args );\r\n//            }\r\n//\r\n//            return this;\r\n//        };\r\n//\r\n//        // Subscribe to events of interest\r\n//        // with a specific topic name and a\r\n//        // callback function, to be executed\r\n//        // when the topic/event is observed\r\n//        myObject.subscribe = function( topic, func ) {\r\n//\r\n//            if (!topics[topic]) {\r\n//                topics[topic] = [];\r\n//            }\r\n//\r\n//            var token = ( ++subUid ).toString();\r\n//            topics[topic].push({\r\n//                token: token,\r\n//                func: func\r\n//            });\r\n//            return token;\r\n//        };\r\n//\r\n//        // Unsubscribe from a specific\r\n//        // topic, based on a tokenized reference\r\n//        // to the subscription\r\n//        myObject.unsubscribe = function( token ) {\r\n//            for ( var m in topics ) {\r\n//                if ( topics[m] ) {\r\n//                    for ( var i = 0, j = topics[m].length; i < j; i++ ) {\r\n//                        if ( topics[m][i].token === token ) {\r\n//                            topics[m].splice( i, 1 );\r\n//                            return token;\r\n//                        }\r\n//                    }\r\n//                }\r\n//            }\r\n//            return this;\r\n//        };\r\n//    }( pubsub ));\r\n//\r\n//    // A simple message logger that logs any topics and data received through our\r\n//    // subscriber\r\n//    var messageLogger = function ( topics, data ) {\r\n//        console.log( \"Logging: \" + topics + \": \" + data );\r\n//    };\r\n//\r\n//\r\n//    // Subscribers listen for topics they have subscribed to and\r\n//    // invoke a callback function (e.g messageLogger) once a new\r\n//    // notification is broadcast on that topic\r\n//    var subscription = pubsub.subscribe( \"inbox/newMessage\", messageLogger );\r\n//\r\n//    // Publishers are in charge of publishing topics or notifications of\r\n//    // interest to the application. e.g:\r\n//\r\n//    pubsub.publish( \"inbox/newMessage\", \"hello world!\" );\r\n//\r\n//    // or\r\n//    pubsub.publish( \"inbox/newMessage\", [\"test\", \"a\", \"b\", \"c\"] );\r\n//\r\n//    // or\r\n//    pubsub.publish( \"inbox/newMessage\", {\r\n//        sender: \"hello@google.com\",\r\n//        body: \"Hey again!\"\r\n//    });\r\n//\r\n//    // We can also unsubscribe if we no longer wish for our subscribers\r\n//    // to be notified\r\n//    pubsub.unsubscribe( subscription );\r\n//\r\n//    // Once unsubscribed, this for example won't result in our\r\n//    // messageLogger being executed as the subscriber is\r\n//    // no longer listening\r\n//    pubsub.publish( \"inbox/newMessage\", \"Hello! are you still there?\" );\r\n</script>\r\n</body>\r\n</html>"
        },
        {
          "name": "静态方法与原型.html",
          "type": "blob",
          "size": 0.3994140625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n   <script>\r\n         var Vue=function () {\r\n              this.age=10;\r\n         }\r\n         Vue.prototype={\r\n\r\n         }\r\n\r\n         Vue.getAge=function () {\r\n              return this.age;\r\n         }\r\n         Vue.age=100;\r\n         console.log(Vue.getAge())\r\n   </script>\r\n</body>\r\n</html>"
        },
        {
          "name": "高阶组件.html",
          "type": "blob",
          "size": 0.12890625,
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n\r\n</body>\r\n</html>"
        }
      ]
    }
  ]
}