{
  "metadata": {
    "timestamp": 1736562932321,
    "page": 529,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "airbnb/hypernova",
      "stars": 5816,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".babelrc",
          "type": "blob",
          "size": 0.1513671875,
          "content": "{\n  \"presets\": [\"airbnb\"],\n  \"plugins\": [\n    \"add-module-exports\",\n    [\"transform-replace-object-assign\", { \"moduleSpecifier\": \"object.assign\" }],\n  ]\n}\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.556640625,
          "content": "{\n  \"root\": true,\n  \"extends\": \"airbnb-base\",\n  \"env\": {\n    \"node\": true,\n  },\n\n  \"rules\": {\n    \"function-paren-newline\": 0,\n    \"no-console\": 0,\n    \"no-underscore-dangle\": 1,\n    \"object-curly-newline\": 0,\n    \"max-len\": 0,\n  },\n\n  \"overrides\": [\n    {\n      \"files\": \"test/**/*\",\n      \"env\": {\n        \"mocha\": true,\n      },\n      \"rules\": {\n        \"indent\": 1,\n        \"prefer-promise-reject-errors\": 0,\n      },\n    },\n    {\n      \"files\": \"test/components/**/*\",\n      \"rules\": {\n        \"object-shorthand\": 0,\n        \"func-names\": 0,\n      },\n    },\n  ],\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6552734375,
          "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directory\nnode_modules\n\n# Optional npm cache directory\n.npm\n\n# Optional REPL history\n.node_repl_history\n\nTODO\n\n# coverage\n.nyc_output\ncoverage\n\n# build output\nlib\n\n# Only apps should have lockfiles\nyarn.lock\nnpm-shrinkwrap.json\npackage-lock.json\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.5693359375,
          "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directory\nnode_modules\n\n# Optional npm cache directory\n.npm\n\n# Optional REPL history\n.node_repl_history\n\nTODO\n\n# coverage\n.nyc_output\ncoverage\n\nexamples\ndocs\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0390625,
          "content": "package-lock=false\naudit-level=critical\n"
        },
        {
          "name": ".nycrc",
          "type": "blob",
          "size": 0.2109375,
          "content": "{\n\t\"all\": true,\n\t\"check-coverage\": false,\n\t\"reporter\": [\"text-summary\", \"text\", \"html\", \"json\"],\n\t\"lines\": 86,\n\t\"statements\": 85.93,\n\t\"functions\": 82.43,\n\t\"branches\": 76.06,\n\t\"exclude\": [\n\t\t\"coverage\",\n\t\t\"test\"\n\t]\n}\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.3447265625,
          "content": "# Change Log\n\nAll notable changes to this project will be documented in this file.\nThis project adheres to [Semantic Versioning](http://semver.org/).\n\n## [2.5.0] - 2019-01-02\n\n### Added\n- worker: Add graceful shutdown (#147, #148)\n\n## [2.4.0] - 2018-08-04\n\n### Added\n- Add option to pass an express instance in the configuration (#132)\n\n### Docs\n- Update README.md: correctly use curly quotation marks (#143)\n\n## [2.3.0] - 2018-08-04\n\n### Added\n- [deps] allow `airbnb-js-shims v2 or v3\n\n## [2.2.6] - 2018-05-10\n\n### Added\n\n- Allow logger instance to be injected\n\n## [2.2.5] - 2018-04-05\n\n### Added\n\n- Handle timeout in coordinator shutdown to kill workers that have not shut down.\n\n## [2.2.4] - 2018-03-20\n\n### Changed\n\n- Refactor server/worker configuration into smaller pieces to be exported\n\n## [2.2.3] - 2018-03-01\n\n### Changed\n\n- Clear timeout set in raceTo\n\n## [2.2.2] - 2018-02-26\n\n### Added\n\n- Option to execute jobs in a batch serially, rather than concurrently\n\n## [2.2.1] - 2018-02-26\n\nBit of a flub with dist-tags, skipped version\n\n## [2.2.0] - 2017-10-06\n\n### Changed\n\n- If no HTML is returned from the render function then Hypernova will reject the Promise.\n\n## [2.1.3] - 2017-06-16\n\n### Added\n\n- Number of CPUs is now configurable.\n- Host is configurable.\n\n\n## [2.1.1] - 2017-06-15\n\n### Changed\n\n- You may now return a Promise from the top-level render function.\n\n\n## [2.0.0] - 2016-09-15\n\n### Breaking Changes\n\n- `toScript` function signature changed. It now expects an object of data attributes to value.\n\n  ```js\n  // before\n  toScript('foo', 'bar', { hello: 'world' })\n\n  // now\n  toScript({ foo: 'bar' }, { hello: 'world' })\n  ```\n\n- `fromScript` function signature changed.\n\n  ```js\n  // before\n  fromScript('foo', 'bar')\n\n  // now\n  fromScript({ foo: 'bar' })\n  ```\n\n## [1.2.0] - 2016-09-08\n\n### Changed\n\n- Exceptions that are not Errors are no longer wrapped in an Error so the stack trace does not\n  include the Hypernova callsite.\n\n### Added\n\n- Passing in `context` into `getComponent` which contains things like the `props` that the\n  component will receive.\n\n## [1.1.0] - 2016-06-15\n\n### Changed\n\n- Documentation fixes.\n- Allows non-errors to be rejected from Promises in getComponent.\n- Sets worker count to 1 when cpu count is 1.\n- Makes the endpoint configurable.\n- Exports worker functions so you can customize your own worker.\n\n## [1.0.0] - 2016-06-06\n\nInitial Release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Airbnb\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.857421875,
          "content": "| :exclamation: Deprecation Notice |\n|:-|\n|We want to express our sincere gratitude for your support and contributions to the Hypernova open source project. As we are no longer using this technology internally, we have come to the decision to archive the Hypernova repositories. While we won't be providing further updates or support, the existing code and resources will remain accessible for your reference. We encourage anyone interested to fork the repository and continue the project's legacy independently. Thank you for being a part of this journey and for your patience and understanding.|\n---\n\n# Hypernova\n\n> A service for server-side rendering your JavaScript views\n\n[![Join the chat at https://gitter.im/airbnb/hypernova](https://badges.gitter.im/airbnb/hypernova.svg)](https://gitter.im/airbnb/hypernova?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![NPM version](https://badge.fury.io/js/hypernova.svg)](http://badge.fury.io/js/hypernova)\n[![Build Status](https://secure.travis-ci.org/airbnb/hypernova.svg?branch=master)](http://travis-ci.org/airbnb/hypernova)\n[![Dependency Status](https://david-dm.org/airbnb/hypernova.svg)](https://david-dm.org/airbnb/hypernova)\n\n## Why?\n\nFirst and foremost, server-side rendering is a better user experience compared to just client-side rendering. The user gets the content faster, the webpage is more accessible when JS fails or is disabled, and search engines have an easier time indexing it.\n\nSecondly, it provides a better developer experience. Writing the same markup twice both on the server in your preferred templating library and in JavaScript can be tedious and hard to maintain. Hypernova lets you write all of your view code in a single place without having to sacrifice the userâ€™s experience.\n\n## How?\n\n![Diagram that visually explains how hypernova works](docs/hypernova-how-it-works.png)\n\n1. A user requests a page on your server.\n1. Your server then gathers all the data it needs to render the page.\n1. Your server uses a Hypernova client to submit an HTTP request to a Hypernova server.\n1. Hypernova server computes all the views into an HTML string and sends them back to the client.\n1. Your server then sends down the markup plus the JavaScript to the browser.\n1. On the browser, JavaScript is used to progressively enhance the application and make it dynamic.\n\n## Terminology\n\n* **hypernova/server** - Service that accepts data via HTTP request and responds with HTML.\n* **hypernova** - The universal component that takes care of turning your view into the HTML structure it needs to server-render. On the browser it bootstraps the server-rendered markup and runs it.\n* **hypernova-${client}** - This can be something like `hypernova-ruby` or `hypernova-node`. It is the client which gives your application the superpower of querying Hypernova and understanding how to fallback to client-rendering in case there is a failure.\n\n## Get Started\n\nFirst youâ€™ll need to install a few packages: the server, the browser component, and the client. For development purposes it is recommended to install either alongside the code you wish to server-render or in the same application.\n\nFrom here on out weâ€™ll assume youâ€™re using [`hypernova-ruby`](https://github.com/airbnb/hypernova-ruby) and `React` with [`hypernova-react`](https://github.com/airbnb/hypernova-react).\n\n### Node\n\n```sh\nnpm install hypernova --save\n```\n\nThis package contains both the server and the client.\n\nNext, lets configure the development server. To keep things simple we can put the configuration in your root folder, it can be named something like `hypernova.js`.\n\n```js\nvar hypernova = require('hypernova/server');\n\nhypernova({\n  devMode: true,\n\n  getComponent(name) {\n    if (name === 'MyComponent.js') {\n      return require('./app/assets/javascripts/MyComponent.js');\n    }\n    return null;\n  },\n\n  port: 3030,\n});\n```\n\nOnly the `getComponent` function is required for Hypernova. All other configuration options are optional. [Notes on `getComponent` can be found below](#getcomponent).\n\nWe can run this server by starting it up with node.\n\n```sh\nnode hypernova.js\n```\n\nIf all goes well you should see a message that says \"Connected\". If there is an issue, a stack trace should appear in `stderr`.\n\n### Rails\n\nIf your server code is written in a language other than Ruby, then you can build your own client for Hypernova. A [spec](docs/client-spec.md) exists and details on how clients should function as well as fall-back in case of failure.\n\nAdd this line to your applicationâ€™s Gemfile:\n\n```ruby\ngem 'hypernova'\n```\n\nAnd then execute:\n\n    $ bundle\n\nOr install it yourself as:\n\n    $ gem install hypernova\n\nNow lets add support on the Rails side for Hypernova. First, weâ€™ll need to create an initializer.\n\n`config/initializers/hypernova_initializer.rb`\n\n```ruby\nHypernova.configure do |config|\n  config.host = \"localhost\"\n  config.port = 3030            # The port where the node service is listening\nend\n```\n\nIn your controller, youâ€™ll need an `:around_filter` so you can opt into Hypernova rendering of view partials.\n\n```ruby\nclass SampleController < ApplicationController\n  around_filter :hypernova_render_support\nend\n```\n\nAnd then in your view we `render_react_component`.\n\n```ruby\n<%= render_react_component('MyComponent.js', :name => 'Hypernova The Renderer') %>\n```\n\n### JavaScript\n\nFinally, lets set up `MyComponent.js` to be server-rendered. We will be using React to render.\n\n```js\nconst React = require('react');\nconst renderReact = require('hypernova-react').renderReact;\n\nfunction MyComponent(props) {\n  return <div>Hello, {props.name}!</div>;\n}\n\nmodule.exports = renderReact('MyComponent.js', MyComponent);\n```\n\nVisit the page and you should see your React component has been server-rendered. If youâ€™d like to confirm, you can view the source of the page and look for `data-hypernova-key`. If you see a `div` filled with HTML then your component was server-rendered, if the `div` is empty then there was a problem and your component was client-rendered as a fall-back strategy.\n\nIf the `div` was empty, you can check `stderr` where youâ€™re running the node service.\n\n## Debugging\n\nThe [developer plugin](https://github.com/airbnb/hypernova-ruby/blob/master/lib/hypernova/plugins/development_mode_plugin.rb) for [`hypernova-ruby`](https://github.com/airbnb/hypernova-ruby) is useful for debugging issues with Hypernova and why it falls back to client-rendering. Itâ€™ll display a warning plus a stack trace on the page whenever a component fails to render server-side.\n\nYou can install the developer plugin in `examples/simple/config/environments/development.rb`\n\n```ruby\nrequire 'hypernova'\nrequire 'hypernova/plugins/development_mode_plugin'\n\nHypernova.add_plugin!(DevelopmentModePlugin.new)\n```\n\nYou can also check the output of the server. The server outputs to `stdout` and `stderr` so if there is an error, check the process where you ran `node hypernova.js` and you should see the error.\n\n## Deploying\n\nThe recommended approach is running two separate servers, one that contains your server code and another that contains the Hypernova service. Youâ€™ll need to deploy the JavaScript code to the server that contains the Hypernova service as well.\n\nDepending on how you have `getComponent` configured, you might need to restart your Hypernova service on every deploy. If `getComponent` caches any code then a restart is paramount so that Hypernova receives the new changes. Caching is recommended because it helps speed up the service.\n\n## FAQ\n\n> Isnâ€™t sending an HTTP request slow?\n\nThere isnâ€™t a lot of overhead or latency, especially if you keep the servers in close proximity to each other. Itâ€™s as fast as compiling many ERB templates and gives you the benefit of unifying your view code.\n\n> Why not an in-memory JS VM?\n\nThis is a valid option. If youâ€™re looking for a siloed experience where the JS service is kept separate, then Hypernova is right for you. This approach also lends itself better to environments that donâ€™t already have a JS VM available.\n\n> What if the server blows up?\n\nIf something bad happens while Hypernova is attempting to server-render your components itâ€™ll default to failure mode where your page will be client-rendered instead. While this is a comfortable safety net, the goal is to server-render every request.\n\n## Pitfalls\n\nThese are pitfalls of server-rendering JavaScript code and are not specific to Hypernova.\n\n* Youâ€™ll want to do any DOM-related manipulations in `componentDidMount`. `componentDidMount` runs\n  on the browser but not the server, which means itâ€™s safe to put DOM logic in there.\n  Putting logic outside of the component, in the constructor, or in `componentWillMount` will\n  cause the code to fail since the DOM isnâ€™t present on the server.\n\n* It is recommended that you run your code in a VM sandbox so that requests get a fresh new\n  JavaScript environment. In the event that you decide not to use a VM, you should be aware that\n  singleton patterns and globals run the risk of leaking memory and/or leaking data\n  between requests. If you use `createGetComponent` youâ€™ll get VM by default.\n\n## Clients\n\nSee [clients.md](docs/clients.md)\n\n## Browser\n\nThe included browser package is a barebones helper which renders markup on the server and then loads it on the browser.\n\nList of compatible browser packages:\n\n* [`hypernova-react`](https://github.com/airbnb/hypernova-react)\n* [`hypernova-aphrodite`](https://github.com/airbnb/hypernova-aphrodite)\n* [`hypernova-styled-components`](https://github.com/viatsko/hypernova-styled-components)\n\n## Server\n\nStarting up a Hypernova server\n\n```js\nconst hypernova = require('hypernova/server');\n\nhypernova({\n  getComponent: require,\n});\n```\n\nOptions, and their defaults\n\n```js\n{\n  // the limit at which body parser will throw\n  bodyParser: {\n    limit: 1024 * 1000,\n  },\n  // runs on a single process\n  devMode: false,\n  // how components will be retrieved,\n  getComponent: undefined,\n  // if not overridden, default will return the number of reported cpus  - 1\n  getCPUs: undefined,\n  // the host the app will bind to\n  host: '0.0.0.0',\n  // configure the default winston logger\n  logger: {},\n  // logger instance to use instead of the default winston logger\n  loggerInstance: undefined,\n  // the port the app will start on\n  port: 8080,\n  // default endpoint path\n  endpoint: '/batch',\n  // whether jobs in a batch are processed concurrently\n  processJobsConcurrently: true,\n  // arguments for server.listen, by default set to the configured [port, host]\n  listenArgs: null,\n  // default function to create an express app\n  createApplication: () => express()\n}\n```\n\n#### `getComponent`\n\nThis lets you provide your own implementation on how components are retrieved.\n\nThe most common use-case would be to use a VM to keep each module sandboxed between requests. You can use `createGetComponent` from Hypernova to retrieve a `getComponent` function that does this.\n\n`createGetComponent` receives an Object whose keys are the componentâ€™s registered name and the value is the absolute path to the component.\n\n```js\nconst path = require('path');\n\nhypernova({\n  getComponent: createGetComponent({\n    MyComponent: path.resolve(path.join('app', 'assets', 'javascripts', 'MyComponent.js')),\n  }),\n});\n```\n\nThe simplest `getComponent` would be to use `require`. One drawback here is that your components would be cached between requests and thus could leak memory and/or data. Another drawback is that the files would have to exist relative to where this require is being used.\n\n```js\nhypernova({\n  getComponent: require,\n});\n```\n\nYou can also fetch components asynchronously if you wish, and/or cache them. Just return a `Promise` from `getComponent`.\n\n```js\nhypernova({\n  getComponent(name) {\n    return promiseFetch('https://MyComponent');\n  },\n});\n```\n\n#### `getCPUs`\n\nThis lets you specify the number of cores Hypernova will run workers on. Receives an argument containing the number of cores as reported by the OS.\n\nIf this method is not overridden, or if a falsy value is passed, the default method will return the number of reported cores minus 1.\n\n#### `loggerInstance`\nThis lets you provide your own implementation of a logger as long as it has a `log()` method.\n\n```js\nconst winston = require('winston');\nconst options = {};\n\nhypernova({\n  loggerInstance: new winston.Logger({\n        transports: [\n          new winston.transports.Console(options),\n        ],\n      }),\n});\n```\n\n#### `processJobsConcurrently`\n\nThis determines whether jobs in a batch are processed concurrently or serially.  Serial execution is preferable if you use a renderer that is CPU bound and your plugins do not perform IO in the per job hooks.\n\n#### `createApplication`\nThis lets you provide your own function that creates an express app.\nYou are able to add your own express stuff like more routes, middlewares, etc.\nNotice that you __must__ pass a function that returns an express app without calling the `listen` method!\n\n```js\nconst express = require('express');\nconst yourOwnAwesomeMiddleware = require('custom-middleware');\n\nhypernova({\n  createApplication: function() {\n    const app = express();\n    app.use(yourOwnAwesomeMiddleware);\n\n    app.get('/health', function(req, res) {\n      return res.status(200).send('OK');\n    });\n\n    // this is mandatory.\n    return app;\n  }\n```\n\n## API\n\n### Browser\n\n#### load\n\n```typescript\ntype DeserializedData = { [x: string]: any };\ntype ServerRenderedPair = { node: HTMLElement, data: DeserializedData };\n\nfunction load(name: string): Array<ServerRenderedPair> {}\n```\n\nLooks up the server-rendered DOM markup and its corresponding `script` JSON payload and returns it.\n\n#### serialize\n\n```typescript\ntype DeserializedData = { [x: string]: any };\n\nfunction serialize(name: string, html: string, data: DeserializedData): string {}\n```\n\nGenerates the markup that the browser will need to bootstrap your view on the browser.\n\n#### toScript\n\n```typescript\ntype DeserializedData = { [x: string]: any };\ntype Attributes = { [x: string]: string };\n\nfunction toScript(attrs: Attributes, props: DeserializedData): string {}\n```\n\nAn interface that allows you to create extra `script` tags for loading more data on the browser.\n\n#### fromScript\n\n```typescript\ntype DeserializedData = { [x: string]: any };\ntype Attributes = { [x: string]: string };\n\nfunction fromScript(attrs: Attributes): DeserializedData {}\n```\n\nThe inverse of `toScript`, this function runs on the browser and attempts to find and `JSON.parse` the contents of the server generated script.\n`attrs` is an object where the key will be a `data-key` to be placed on the element, and the value is the data attribute's value.\n\nThe `serialize` function uses the attributes `DATA_KEY` and `DATA_ID` to generate the data markup. They can be used in the `fromScript` function to get the serialized data.\n\n```typescript\nimport { DATA_KEY, DATA_ID } from 'hypernova'\n\nfromScript({\n    [DATA_KEY]: key,\n    [DATA_ID]: id,\n });\n```\n\n### Server\n\n#### [createGetComponent](src/createGetComponent.js)\n\n```typescript\ntype Files = { [key: string]: string };\ntype VMOptions = { cacheSize: number, environment?: () => any };\ntype GetComponent = (name: string) => any;\n\nfunction createGetComponent(files: Files, vmOptions: VMOptions): GetComponent {}\n```\n\nCreates a `getComponent` function which can then be passed into Hypernova so it knows how to retrieve your components. `createGetComponent` will create a VM so all your bundles can run independently from each other on each request so they donâ€™t interfere with global state. Each component is also cached at startup in order to help speed up run time. The files Object key is the componentâ€™s name and its value is the absolute path to the component.\n\n#### [createVM](src/createVM.js)\n\n```typescript\ntype VMOptions = { cacheSize: number, environment?: () => any };\ntype Run = (name: string, code: string) => any;\ntype VMContainer = { exportsCache: any, run: Run };\n\nfunction createVM(options: VMOptions): VMContainer {}\n```\n\nCreates a VM using Nodeâ€™s [`vm`](https://nodejs.org/api/vm.html) module. Calling `run` will run the provided code and return its `module.exports`. `exportsCache` is an instance of [`lru-cache`](https://github.com/isaacs/node-lru-cache).\n\n#### [getFiles](src/getFiles.js)\n\n```typescript\nfunction getFiles(fullPathStr: string): Array<{name: string, path: string}> {}\n```\n\nA utility function that allows you to retrieve all JS files recursively given an absolute path.\n\n#### [Module](src/Module.js)\n\n`Module` is a class that mimics Nodeâ€™s [`module`](https://github.com/nodejs/node/blob/master/lib/module.js) interface. It makes `require` relative to whatever directory itâ€™s run against and makes sure that each JavaScript module runs in its own clean sandbox.\n\n#### [loadModules](src/loadModules.js)\n\n```typescript\nfunction loadModules(require: any, files: Array<string>): () => Module? {}\n```\n\nLoads all of the provided files into a `Module` that can be used as a parent `Module` inside a `VM`. This utility is useful when you need to pre-load a set of shims, shams, or JavaScript files that alter the runtime context. The `require` parameter is Node.jsâ€™ `require` function.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.6689453125,
          "content": "{\n  \"name\": \"hypernova\",\n  \"version\": \"2.5.0\",\n  \"description\": \"A service for server-side rendering your JavaScript views\",\n  \"main\": \"lib/index.js\",\n  \"scripts\": {\n    \"prepublishOnly\": \"safe-publish-latest && npm run build\",\n    \"prepublish\": \"not-in-publish || npm run prepublishOnly\",\n    \"clean\": \"rimraf lib\",\n    \"prebuild\": \"npm run clean\",\n    \"build\": \"babel src -d lib\",\n    \"prelint\": \"npm run build\",\n    \"lint\": \"eslint src test\",\n    \"pretest\": \"npm run --silent lint\",\n    \"test\": \"npm run coverage\",\n    \"pretests-only\": \"npm run build\",\n    \"tests-only\": \"npm run test:quick\",\n    \"posttest\": \"aud --production\",\n    \"precoverage\": \"npm run build\",\n    \"coverage\": \"babel-node node_modules/.bin/istanbul cover --report html node_modules/.bin/_mocha -- -R tap test/init.js test/*-test.js\",\n    \"postcoverage\": \"npm run cover:check\",\n    \"cover:check\": \"istanbul check-coverage && echo code coverage thresholds met, achievement unlocked!\",\n    \"test:quick\": \"babel-node node_modules/.bin/_mocha -R tap test/init.js test/*-test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:airbnb/hypernova.git\"\n  },\n  \"keywords\": [\n    \"react\",\n    \"server\",\n    \"render\",\n    \"isomorphic\",\n    \"universal\",\n    \"express\"\n  ],\n  \"author\": \"Josh Perez <josh.perez@airbnb.com>\",\n  \"contributors\": [\n    \"Leland Richardson <leland.richardson@airbnb.com>\",\n    \"Jordan Harband <ljharb@gmail.com>\",\n    \"Gary Borton <gary.borton@airbnb.com>\",\n    \"Stephen Bush <stephen.bush@airbnb.com>\",\n    \"Ian Myers <ian.myers@airbnb.com>\",\n    \"Jake Teton-Landis <jake.tl@airbnb.com>\"\n  ],\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/airbnb/hypernova/issues\"\n  },\n  \"homepage\": \"https://github.com/airbnb/hypernova\",\n  \"devDependencies\": {\n    \"aud\": \"^2.0.0\",\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-plugin-add-module-exports\": \"^0.2.1\",\n    \"babel-plugin-transform-replace-object-assign\": \"^1.0.0\",\n    \"babel-preset-airbnb\": \"^2.5.3\",\n    \"chai\": \"^4.3.6\",\n    \"cheerio\": \"=1.0.0-rc.3\",\n    \"eslint\": \"^8.14.0\",\n    \"eslint-config-airbnb-base\": \"^15.0.0\",\n    \"eslint-plugin-import\": \"^2.26.0\",\n    \"in-publish\": \"^2.0.1\",\n    \"mocha\": \"^3.5.3\",\n    \"mocha-wrap\": \"^2.1.2\",\n    \"nyc\": \"^10.3.2\",\n    \"rimraf\": \"^2.6.3\",\n    \"safe-publish-latest\": \"^2.0.0\",\n    \"sinon\": \"^3.3.0\",\n    \"sinon-sandbox\": \"^1.0.2\"\n  },\n  \"dependencies\": {\n    \"airbnb-js-shims\": \"^2 || ^3\",\n    \"bluebird\": \"^3.7.2\",\n    \"body-parser\": \"^1.20.0\",\n    \"express\": \"^4.18.0\",\n    \"glob\": \"^7.2.0\",\n    \"has\": \"^1.0.3\",\n    \"lru-cache\": \"^4.1.5\",\n    \"object.assign\": \"^4.1.2\",\n    \"winston\": \"^2.4.5\"\n  },\n  \"engines\": {\n    \"node\": \">= 0.10\"\n  },\n  \"greenkeeper\": {\n    \"ignore\": [\n      \"mocha\",\n      \"sinon\"\n    ]\n  }\n}\n"
        },
        {
          "name": "server.js",
          "type": "blob",
          "size": 0.0439453125,
          "content": "module.exports = require('./lib/server.js');\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}