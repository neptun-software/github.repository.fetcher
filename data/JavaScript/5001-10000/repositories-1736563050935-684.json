{
  "metadata": {
    "timestamp": 1736563050935,
    "page": 684,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "GoogleChromeLabs/sw-precache",
      "stars": 5221,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.052734375,
          "content": "demo/dist/\ndemo/app/service-worker.js\napp-shell-demo/\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.31640625,
          "content": "{\n  \"extends\": \"google\",\n  \"rules\": {\n    \"default-case\": 0,\n    \"indent\": [2, 2, {\"SwitchCase\": 1}],\n    \"no-console\": 0,\n    \"no-inline-comments\": 0,\n    \"space-before-function-paren\": [2, \"never\"],\n    \"require-jsdoc\": 0,\n    \"no-var\": 0,\n    \"comma-dangle\": 0,\n    \"max-len\": [\"error\", { \"ignoreComments\": true }]\n  }\n}\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.05078125,
          "content": "node_modules/\ndemo/dist/\ndemo/app/service-worker.js\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.044921875,
          "content": "language: node_js\nnode_js:\n  - \"4\"\n  - \"node\"\n"
        },
        {
          "name": "GettingStarted.md",
          "type": "blob",
          "size": 7.55859375,
          "content": "# Table of Contents\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Why Should I Use a Service Worker?](#why-should-i-use-a-service-worker)\n- [Terminology](#terminology)\n  - [Service Worker](#service-worker)\n  - [App Shell](#app-shell)\n  - [Dynamic Content](#dynamic-content)\n  - [Caching Strategy](#caching-strategy)\n- [Add `sw-precache` to Your Build](#add-sw-precache-to-your-build)\n  - [Automation](#automation)\n  - [Configuration](#configuration)\n    - [Basic](#basic)\n    - [Runtime Caching for Dynamic Content](#runtime-caching-for-dynamic-content)\n    - [Server-side Templating](#server-side-templating)\n    - [Fallback URL](#fallback-url)\n- [Examples](#examples)\n- [Other Resources](#other-resources)\n  - [Articles](#articles)\n  - [Videos](#videos)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n# Why Should I Use a Service Worker?\n\nYou have a web app, and you'd like it to load quickly and work offline.\n\nYou'd like to use proven tools to handle the details for you, to work around\ncommon gotchas and follow best practices.\n\n# Terminology\n\n## Service Worker\n\nA [service worker](http://www.html5rocks.com/en/tutorials/service-worker/introduction/)\nis a background script that intercepts network requests made by your web app.\nIt can use the [Cache Storage API](https://developer.mozilla.org/en-US/docs/Web/API/Cache)\nto respond to those requests.\n\nYou do not have to write your own service worker script; this guide will explain\nhow to generate one customized for your web app.\n\n## App Shell\n\n\"App Shell\" refers to the local resources that your web app needs to load its\nbasic structure. This will always include some HTML, and will likely also\ninclude CSS and JavaScript, either inline or in external files.\n\nSome static web apps consist entirely of an App Shell.\n\nA helpful analogy is to think of your App Shell as the code and resources that\nwould be published to an app store for a native iOS or Android application.\n\nThe App Shell should ideally be loaded directly from the local cache, just like\na native iOS or Android application is loaded directly from a device's storage.\n\n## Dynamic Content\n\nThe dynamic content is all of the data, images, and other resources that your\nweb app needs to function, but exists independently from your App Shell.\n\nSometimes this data will come from external, third-party APIs, and sometimes\nthis will be first-party data that is dynamically generated or frequently\nupdated.\n\nFor example, if your web app is for a newspaper, it might make use of a\nfirst-party API to fetch recent articles, and a third-party API to fetch the\ncurrent weather. Both of those types of requests fall into the category of\n\"dynamic content\".\n\nUnlike the App Shell, dynamic content is usually ephemeral, and it's important\nto choose the right caching strategy for each source of dynamic content.\n\n## Caching Strategy\n\nYou should always use a\n[cache-first strategy](https://jakearchibald.com/2014/offline-cookbook/#cache-falling-back-to-network)\nfor your App Shell. `sw-precache` handles the details of that for you.\n\nHowever, the right caching strategy for your dynamic content is not always\nclear-cut. It's recommended that you read through the\n[The Offline Cookbook](https://jakearchibald.com/2014/offline-cookbook/) and\nthink about which strategy provides the right balance between speed and data\nfreshness for each of your data sources.\n\nRegardless of which strategy you choose, `sw-precache` handles the\nimplementation for you. All of the standard caching strategies, along with\ncontrol over advanced options like maximum cache size and age, are supported via\nthe automatic inclusion of the `sw-toolbox` library.\n\n# Add `sw-precache` to Your Build\n\n## Automation\n\n`sw-precache` should be automated to run as part of your site's existing build\nprocess. It's important that it's re-run each time any of your App Shell\nresources change, so that it can pick up the latest versions.\n\nIt is available as a Node module for use in [Gulp](http://gulpjs.com/),\n[Grunt](http://gruntjs.com/), or other Node-based build systems. It is also\navailable as a command-line binary, suitable for inclusion as part of an\n[`npm`-based build](https://gist.github.com/addyosmani/9f10c555e32a8d06ddb0).\n\n## Configuration\n\n### Basic\n\nA basic configuration for a web app that relies entirely on local resources, all\nlocated as subdirectories of an `app` directory, might look like:\n\n```js\n{\n  staticFileGlobs: ['app/**/*.{js,html,css,png,jpg,gif}'],\n  stripPrefix: 'app',\n  // ...other options as needed...\n}\n```\n\n### Runtime Caching for Dynamic Content\n\nOnce you've chosen an appropriate caching strategy to use for your dynamic\ncontent, you can tell `sw-precache` which\n[strategies](https://googlechromelabs.github.io/sw-toolbox/api.html#handlers) to\nuse for runtime requests that match specific URL patterns:\n\n```js\n{\n  runtimeCaching: [{\n    urlPattern: /^https:\\/\\/example\\.com\\/api/,\n    handler: 'networkFirst'\n  }, {\n    urlPattern: /\\/articles\\//,\n    handler: 'fastest',\n    options: {\n        cache: {\n          maxEntries: 10,\n          name: 'articles-cache'\n        }\n    }\n  }],\n  // ...other options as needed...\n}\n```\n\nIf you use the `runtimeCaching` option, `sw-precache` will automatically include\nthe [`sw-toolbox` library](https://github.com/GoogleChrome/sw-toolbox) and the\ncorresponding [routing configuration](https://googlechromelabs.github.io/sw-toolbox/usage.html#basic-routes)\nin the service worker file that it generates.\n\n### Server-side Templating\n\nIf your web app relies on server-side templating to use several partial files to\nconstruct your App Shell's HTML, it's important to let `sw-precache` know about\nthose dependencies.\n\nFor example, if your web app has two pages, `/home` and `/about`, each of which\ndepends on both a shared master template and a page-specific template, you can\nrepresent those dependencies as follows:\n\n```js\n{\n  dynamicUrlToDependencies: {\n    '/home': ['templates/master.hbs', 'templates/home.hbs'],\n    '/about': ['templates/master.hbs', 'templates/about.hbs']\n  },\n  // ...other options as needed...\n}\n```\n\n### Fallback URL\n\nA common pattern when developing\n[single page applications](https://en.wikipedia.org/wiki/Single-page_application)\n(SPAs) is to bootstrap initial navigations with an App Shell, and then load\ndynamic content based on URL routing rules. `sw-precache` supports this with the\nconcept of a \"fallback URL\":\n\n```js\n{\n  navigateFallback: '/app-shell',\n  // ...other options as needed...\n}\n```\n\nIn this configuration, whenever the service worker intercepts a\n[navigate request](https://fetch.spec.whatwg.org/#concept-request-mode) for a\nURL that doesn't exist in the cache, it will respond with the cached contents of\n`/app-shell`. It's up to you to ensure that `/app-shell` contains all of the\nresources needed to bootstrap your SPA.\n\n# Examples\n\nThere are several ready-made examples of varying complexity that use\n`sw-preache` as part of their build process:\n\n- https://github.com/GoogleChrome/sw-precache/tree/master/demo\n- https://github.com/GoogleChrome/sw-precache/tree/master/app-shell-demo\n- https://github.com/GoogleChrome/application-shell\n\n# Other Resources\n\n## Articles\n- [Service Workers in Production](https://developers.google.com/web/showcase/case-study/service-workers-iowa)\n- [Instant Loading Web Apps with An Application Shell Architecture\n](https://developers.google.com/web/updates/2015/11/app-shell)\n- [Offline Cookbook](https://jakearchibald.com/2014/offline-cookbook/)\n\n## Videos\n- [Instant Loading with Service Workers (Chrome Dev Summit 2015)](https://www.youtube.com/watch?v=jCKZDTtUA2A)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.044921875,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2015 Google, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 30.62109375,
          "content": "# ⚠️ sw-precache ⚠️\n\n`sw-toolbox` and `sw-precache` are deprecated in favor of Workbox.\nPlease read [this migration guide](https://developers.google.com/web/tools/workbox/guides/migrations/migrate-from-sw)\nfor information on upgrading.\n\n## About\n\nService Worker Precache is a module for generating a service worker that\nprecaches resources. It integrates with your build process. Once configured, it\ndetects all your static resources (HTML, JavaScript, CSS, images, etc.) and\ngenerates a hash of each file's contents. Information about each file's URL and\nversioned hash are stored in the generated service worker file, along with logic\nto serve those files cache-first, and automatically keep those files up to date\nwhen changes are detected in subsequent builds.\n\nServing your local static resources cache-first means that you can get all the\ncrucial scaffolding for your web app—your App Shell—on the screen without having\nto wait for any network responses.\n\nThe module can be used in JavaScript-based build scripts,\nlike those written with [`gulp`](http://gulpjs.com/), and it also provides a\n[command-line interface](#command-line-interface). You can use the module\ndirectly, or if you'd prefer, use one of the [wrappers](#wrappers-and-starter-kits)\naround `sw-precache` for specific build environments, like\n[`webpack`](https://webpack.github.io/).\n\nIt can be [used alongside](sw-precache-and-sw-toolbox.md) the [`sw-toolbox`](https://github.com/GoogleChrome/sw-toolbox)\nlibrary, which works well when following the App Shell + dynamic content model.\n\nThe full documentation is in this README, and the\n[getting started guide](GettingStarted.md) provides a quicker jumping off point.\n\nTo learn more about the internals of the generated service worker, you can read\n[this deep-dive](https://medium.com/@Huxpro/how-does-sw-precache-works-2d99c3d3c725)\nby [Huang Xuan](https://twitter.com/Huxpro).\n\n\n# Table of Contents\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Install](#install)\n- [Usage](#usage)\n  - [Overview](#overview)\n  - [Example](#example)\n  - [Considerations](#considerations)\n  - [Command-line interface](#command-line-interface)\n- [Runtime Caching](#runtime-caching)\n- [API](#api)\n  - [Methods](#methods)\n    - [generate(options, callback)](#generateoptions-callback)\n    - [write(filePath, options, callback)](#writefilepath-options-callback)\n  - [Options Parameter](#options-parameter)\n    - [cacheId [String]](#cacheid-string)\n    - [clientsClaim [Boolean]](#clientsclaim-boolean)\n    - [directoryIndex [String]](#directoryindex-string)\n    - [dontCacheBustUrlsMatching [Regex]](#dontcachebusturlsmatching-regex)\n    - [dynamicUrlToDependencies [Object&#x27e8;String,Buffer,Array&#x27e8;String&#x27e9;&#x27e9;]](#dynamicurltodependencies-objectstringbufferarraystring)\n    - [handleFetch [boolean]](#handlefetch-boolean)\n    - [ignoreUrlParametersMatching [Array&#x27e8;Regex&#x27e9;]](#ignoreurlparametersmatching-arrayregex)\n    - [importScripts [Array&#x27e8;String&#x27e9;]](#importscripts-arraystring)\n    - [logger [function]](#logger-function)\n    - [maximumFileSizeToCacheInBytes [Number]](#maximumfilesizetocacheinbytes-number)\n    - [navigateFallback [String]](#navigatefallback-string)\n    - [navigateFallbackWhitelist [Array&#x27e8;RegExp&#x27e9;]](#navigatefallbackwhitelist-arrayregexp)\n    - [replacePrefix [String]](#replaceprefix-string)\n    - [runtimeCaching [Array&#x27e8;Object&#x27e9;]](#runtimecaching-arrayobject)\n    - [skipWaiting [Boolean]](#skipwaiting-boolean)\n    - [staticFileGlobs [Array&#x27e8;String&#x27e9;]](#staticfileglobs-arraystring)\n    - [stripPrefix [String]](#stripprefix-string)\n    - [stripPrefixMulti [Object]](#stripprefixmulti-object)\n    - [templateFilePath [String]](#templatefilepath-string)\n    - [verbose [boolean]](#verbose-boolean)\n- [Wrappers and Starter Kits](#wrappers-and-starter-kits)\n  - [CLIs](#clis)\n  - [Starter Kits](#starter-kits)\n  - [Recipes for writing a custom wrapper](#recipes-for-writing-a-custom-wrapper)\n- [Acknowledgements](#acknowledgements)\n- [Support](#support)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\n## Install\n\nLocal build integration:\n```sh\n$ npm install --save-dev sw-precache\n```\n\nGlobal command-line interface:\n```sh\n$ npm install --global sw-precache\n```\n\n\n## Usage\n\n### Overview\n\n1. **Make sure your site is served using HTTPS!**\nService worker functionality is only available on pages that are accessed via HTTPS.\n(`http://localhost` will also work, to facilitate testing.) The rationale for this restriction is\noutlined in the\n[\"Prefer Secure Origins For Powerful New Features\" document](http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features).\n\n2. **Incorporate `sw-precache` into your `node`-based build script.** It should\nwork well with either `gulp` or `Grunt`, or other build scripts that run on\n`node`. In fact, we've provided examples of both in the `demo/` directory. Each\nbuild script in `demo` has a function called `writeServiceWorkerFile()` that\nshows how to use the API. Both scripts generate fully-functional JavaScript code\nthat takes care of precaching and fetching all the resources your site needs to\nfunction offline. There is also a [command-line interface](#command-line-interface)\navailable, for those using alternate build setups.\n\n3. **Register the service worker JavaScript.** The JavaScript that's generated\nneeds to be registered as the controlling service worker for your pages. This\ntechnically only needs to be done from within a top-level \"entry\" page for your\nsite, since the registration includes a [`scope`](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-registration-scope)\nwhich will apply to all pages underneath your top-level page. [`service-worker-registration.js`](/demo/app/js/service-worker-registration.js) is a sample\nscript that illustrates the best practices for registering the generated service\nworker and handling the various [lifecycle](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-state.1) events.\n\n### Example\n\nThe project's [sample `gulpfile.js`](/demo/gulpfile.js) illustrates the full use of sw-precache\nin context. (Note that the sample gulpfile.js is the one in the `demo` folder,\nnot the one in the root of the project.) You can run the sample by cloning this\nrepo, using [`npm install`](https://docs.npmjs.com/) to pull in the\ndependencies, changing to the `demo/` directory, running `` `npm bin`/gulp serve-dist ``, and\nthen visiting http://localhost:3000.\n\nThere's also a [sample `Gruntfile.js`](/demo/Gruntfile.js) that shows service worker generation in\nGrunt. Though, it doesn't run a server on localhost.\n\nHere's a simpler gulp example for a basic use case. It assumes your site's resources are located under\n`app` and that you'd like to cache *all* your JavaScript, HTML, CSS, and image files.\n\n```js\ngulp.task('generate-service-worker', function(callback) {\n  var swPrecache = require('sw-precache');\n  var rootDir = 'app';\n\n  swPrecache.write(`${rootDir}/service-worker.js`, {\n    staticFileGlobs: [rootDir + '/**/*.{js,html,css,png,jpg,gif,svg,eot,ttf,woff}'],\n    stripPrefix: rootDir\n  }, callback);\n});\n```\n\nThis task will create `app/service-worker.js`, which your client pages need to\n[register](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#navigator-service-worker-register) before it can take control of your site's\npages. [`service-worker-registration.js`](/demo/app/js/service-worker-registration.js) is a ready-to-\nuse script to handle registration.\n\n\n### Considerations\n\n- Service worker caching should be considered a progressive enhancement. If you follow the model of\nconditionally registering a service worker only if it's supported (determined by\n`if('serviceWorker' in navigator)`), you'll get offline support on browsers with service workers and\non browsers that don't support service workers, the offline-specific code will never be called.\nThere's no overhead/breakage for older browsers if you add `sw-precache` to your build.\n\n- **All** resources that are precached will be fetched by a service worker running in a separate\nthread as soon as the service worker is installed. You should be judicious in what you list in the\n`dynamicUrlToDependencies` and `staticFileGlobs` options, since listing files that are non-essential\n(large images that are not shown on every page, for instance) will result in browsers downloading\nmore data than is strictly necessary.\n\n- Precaching doesn't make sense for all types of resources (see the previous\npoint). Other caching strategies, like those outlined in the [Offline Cookbook](https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/), can be used in\nconjunction with `sw-precache` to provide the best experience for your users. If\nyou do implement additional caching logic, put the code in a separate JavaScript\nfile and include it using the `importScripts()` method.\n\n- `sw-precache` uses a [cache-first](http://jakearchibald.com/2014/offline-cookbook/#cache-falling-back-to-network) strategy, which results in a copy of\nany cached content being returned without consulting the network. A useful\npattern to adopt with this strategy is to display a toast/alert to your users\nwhen there's new content available, and give them an opportunity to reload the\npage to pick up that new content (which the service worker will have added to\nthe cache, and will be available at the next page load). The sample [`service-worker-registration.js`](/demo/app/js/service-worker-registration.js) file [illustrates](https://github.com/GoogleChrome/sw-precache/blob/7688ee8ccdaddd9171af352384d04d16d712f9d3/demo/app/js/service-worker-registration.js#L51)\nthe service worker lifecycle event you can listen for to trigger this message.\n\n\n### Command-line interface\n\nFor those who would prefer not to use `sw-precache` as part of a `gulp` or\n`Grunt` build, there's a [command-line interface](cli.js) which supports the\n[options listed](#options-parameter) in the API, provided via flags or an\nexternal JavaScript configuration file.\n\nHypenated flags are converted to camelCase [options](#options-parameter).  \nOptions starting with `--no` prefix negate the boolean value. For example, `--no-clients-claim` sets the value of `clientsClaim` to `false`.\n\n**Warning:** When using `sw-precache` \"by hand\", outside of an automated build process, it's your\nresponsibility to re-run the command each time there's a change to any local resources! If `sw-precache`\nis not run again, the previously cached local resources will be reused indefinitely.\n\nSensible defaults are assumed for options that are not provided. For example, if you are inside\nthe top-level directory that contains your site's contents, and you'd like to generate a\n`service-worker.js` file that will automatically precache all of the local files, you can simply run\n\n```sh\n$ sw-precache\n```\n\nAlternatively, if you'd like to only precache `.html` files that live within `dist/`, which is a\nsubdirectory of the current directory, you could run\n\n```sh\n$ sw-precache --root=dist --static-file-globs='dist/**/*.html'\n```\n\n**Note:** Be sure to use quotes around parameter values that have special meanings\nto your shell (such as the `*` characters in the sample command line above,\nfor example).\n\nFinally, there's support for passing complex configurations using `--config <file>`.\nAny of the options from the file can be overridden via a command-line flag.\nWe strongly recommend passing it an external JavaScript file defining config via\n[`module.exports`](https://nodejs.org/api/modules.html#modules_module_exports).\nFor example, assume there's a `path/to/sw-precache-config.js` file that contains:\n\n```js\nmodule.exports = {\n  staticFileGlobs: [\n    'app/css/**.css',\n    'app/**.html',\n    'app/images/**.*',\n    'app/js/**.js'\n  ],\n  stripPrefix: 'app/',\n  runtimeCaching: [{\n    urlPattern: /this\\\\.is\\\\.a\\\\.regex/,\n    handler: 'networkFirst'\n  }]\n};\n```\n\nThat file could be passed to the command-line interface, while also setting the\n`verbose` option, via\n\n```sh\n$ sw-precache --config=path/to/sw-precache-config.js --verbose\n```\n\nThis provides the most flexibility, such as providing a regular expression for\nthe `runtimeCaching.urlPattern` option.\n\nWe also support passing in a JSON file for `--config`, though this provides\nless flexibility:\n\n```json\n{\n  \"staticFileGlobs\": [\n    \"app/css/**.css\",\n    \"app/**.html\",\n    \"app/images/**.*\",\n    \"app/js/**.js\"\n  ],\n  \"stripPrefix\": \"app/\",\n  \"runtimeCaching\": [{\n    \"urlPattern\": \"/express/style/path/(.*)\",\n    \"handler\": \"networkFirst\"\n  }]\n}\n```\n\n## Runtime Caching\n\nIt's often desireable, even necessary to use precaching and runtime caching together. You may have seen our [`sw-toolbox`](https://github.com/GoogleChrome/sw-toolbox) tool, which handles runtime caching, and wondered how to use them together. Fortunately, `sw-precache` handles this for you.\n\nThe `sw-precache` module has the ability to include the `sw-toolbox` code and configuration alongside its own configuration. Using the `runtimeCaching` configuration option in `sw-precache` ([see below](#runtimecaching-arrayobject)) is a shortcut that accomplishes what you could do manually by importing `sw-toolbox` in your service worker and writing your own routing rules.\n\n## API\n\n### Methods\n\nThe `sw-precache` module exposes two methods: `generate` and `write`.\n\n#### generate(options, callback)\n\n`generate` takes in [options](#options), generates a service worker\nfrom them and passes the result to a callback function, which must\nhave the following interface:\n\n`callback(error, serviceWorkerString)`\n\nIn the 1.x releases of `sw-precache`, this was the default and only method\nexposed by the module.\n\nSince 2.2.0, `generate()` also returns a\n[`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n#### write(filePath, options, callback)\n`write` takes in [options](#options), generates a service worker from them,\nand writes the service worker to a specified file. This method always\ninvokes `callback(error)`. If no error was found, the `error` parameter will\nbe `null`\n\nSince 2.2.0, `write()` also returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n### Options Parameter\n\nBoth the `generate()` and `write()` methods take the same options.\n\n#### cacheId [String]\nA string used to distinguish the caches created by different web applications that are served off\nof the same origin and path. While serving completely different sites from the same URL is not\nlikely to be an issue in a production environment, it avoids cache-conflicts when testing various\nprojects all served off of `http://localhost`. You may want to set it to, e.g., the `name`\nproperty from your `package.json`.\n\n_Default_: `''`\n\n#### clientsClaim [Boolean]\nControls whether or not the generated service worker will call\n[`clients.claim()`](https://developer.mozilla.org/en-US/docs/Web/API/Clients/claim)\ninside the `activate` handler.\n\nCalling `clients.claim()` allows a newly registered service worker to take\ncontrol of a page immediately, instead of having to wait until the next page\nnavigation.\n\n_Default_: `true`\n\n#### directoryIndex [String]\nSets a default filename to return for URL's formatted like directory paths (in\nother words, those ending in `'/'`). `sw-precache` will take that translation\ninto account and serve the contents a relative `directoryIndex` file when\nthere's no other match for a URL ending in `'/'`. To turn off this behavior,\nset `directoryIndex` to `false` or `null`. To override this behavior for one\nor more URLs, use the `dynamicUrlToDependencies` option to explicitly set up\nmappings between a directory URL and a corresponding file.\n\n_Default_: `'index.html'`\n\n#### dontCacheBustUrlsMatching [Regex]\nIt's very important that the requests `sw-precache` makes to populate your cache\nresult in the most up-to-date version of a resource at a given URL. Requests\nthat are fulfilled with out-of-date responses (like those found in your\nbrowser's HTTP cache) can end up being read from the service worker's cache\nindefinitely. Jake Archibald's [blog post](https://jakearchibald.com/2016/caching-best-practices/#a-service-worker-can-extend-the-life-of-these-bugs)\nprovides more context about this problem.\n\nIn the interest of avoiding that scenario, `sw-precache` will, by default,\nappend a cache-busting parameter to the end of each URL it requests when\npopulating or updating its cache. Developers who are explicitly doing \"the right\nthing\" when it comes to setting HTTP caching headers on their responses might\nwant to opt out of this cache-busting. For example, if all of your static\nresources already include versioning information in their URLs (via a tool like\n[`gulp-rev`](https://github.com/sindresorhus/gulp-rev)), and are served with\nlong-lived HTTP caching headers, then the extra cache-busting URL parameter\nis not needed, and can be safely excluded.\n\n`dontCacheBustUrlsMatching` gives you a way of opting-in to skipping the cache\nbusting behavior for a subset of your URLs (or all of them, if a catch-all value\nlike `/./` is used).\nIf set, then the [pathname](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname)\nof each URL that's prefetched will be matched against this value.\nIf there's a match, then the URL will be prefetched as-is, without an additional\ncache-busting URL parameter appended.\n\nNote: Prior to `sw-precache` v5.0.0, `dontCacheBustUrlsMatching` matched against\nthe entire request URL. As of v5.0.0, it only matches against the URL's\n[pathname](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname).\n\n_Default_: not set\n\n#### dynamicUrlToDependencies [Object&#x27e8;String,Buffer,Array&#x27e8;String&#x27e9;&#x27e9;]\nMaps a dynamic URL string to an array of all the files that URL's contents\ndepend on. E.g., if the contents of `/pages/home` are generated server-side via\nthe templates `layout.jade` and `home.jade`, then specify `'/pages/home':\n['layout.jade', 'home.jade']`. The MD5 hash is used to determine whether\n`/pages/home` has changed will depend on the hashes of both `layout.jade` and\n`home.jade`.\n\nAn alternative value for the mapping is supported as well. You can specify\na string or a Buffer instance rather than an array of file names. If you use this option, then the\nhash of the string/Buffer will be used to determine whether the URL used as a key has changed.\nFor example, `'/pages/dynamic': dynamicStringValue` could be used if the contents of\n`/pages/dynamic` changes whenever the string stored in `dynamicStringValue` changes.\n\n_Default_: `{}`\n\n#### handleFetch [boolean]\nDetermines whether the `fetch` event handler is included in the generated\nservice worker code. It is useful to set this to `false` in development builds,\nto ensure that features like live reload still work. Otherwise, the content\nwould always be served from the service worker cache.\n\n_Default_: `true`\n\n#### ignoreUrlParametersMatching [Array&#x27e8;Regex&#x27e9;]\n`sw-precache` finds matching cache entries by doing a comparison with the full request URL. It's\ncommon for sites to support URL query parameters that don't affect the site's content and should\nbe effectively ignored for the purposes of cache matching. One example is the\n[`utm_`-prefixed](https://support.google.com/analytics/answer/1033867) parameters used for tracking\ncampaign performance. By default, `sw-precache` will ignore `key=value` when `key` matches _any_ of\nthe regular expressions provided in this option.\nTo ignore all parameters, use `[/./]`. To take all parameters into account when matching, use `[]`.\n\n_Default_: `[/^utm_/]`\n\n#### importScripts [Array&#x27e8;String&#x27e9;]\nWrites calls to [`importScripts()`](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/basic_usage#Importing_scripts_and_libraries)\nto the resulting service worker to import the specified scripts.\n\n_Default_: `[]`\n\n#### logger [function]\n\nSpecifies a callback function for logging which resources are being precached and\na precache size. Use `function() {}` if you'd prefer that nothing is logged.\nWithin a `gulp` script, it's recommended that you use [`gulp-util`](https://github.com/gulpjs/gulp-util) and pass in `gutil.log`.\n\n_Default_: `console.log`\n\n#### maximumFileSizeToCacheInBytes [Number]\nSets the maximum allowed size for a file in the precache list.\n\n_Default_: `2097152` (2 megabytes)\n\n#### navigateFallback [String]\nSets an HTML document to use as a fallback for URLs not found in the `sw-precache` cache. This\nfallback URL needs to be cached via `staticFileGlobs` or `dynamicUrlToDependencies` otherwise it\nwon't work.\n\n```js\n// via staticFileGlobs\nstaticFileGlobs: ['/shell.html']\nnavigateFallback: '/shell.html'\n\n// via dynamicUrlToDependencies\ndynamicUrlToDependencies: {\n  '/shell': ['/shell.hbs']\n},\nnavigateFallback: '/shell'\n```\n\nThis comes in handy when used with a web application that performs client-side URL routing\nusing the [History API](https://developer.mozilla.org/en-US/docs/Web/API/History). It allows any\narbitrary URL that the client generates to map to a fallback cached HTML entry. This fallback entry\nideally should serve as an \"application shell\" that is able to load the appropriate resources\nclient-side, based on the request URL.\n\n**Note:** This is **not** intended to be used to route failed navigations to a\ngeneric \"offline fallback\" page. The `navigateFallback` page is used whether the\nbrowser is online or offline. If you want to implement an \"offline fallback\",\nthen using an approach similar to [this example](https://googlechrome.github.io/samples/service-worker/custom-offline-page/)\nis more appropriate.\n\n_Default_: `''`\n\n#### navigateFallbackWhitelist [Array&#x27e8;RegExp&#x27e9;]\nWorks to limit the effect of `navigateFallback`, so that the fallback only\napplies to requests for URLs with paths that match at least one\n[`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).\n\nThis option is useful if you want to fallback to the cached App Shell for\ncertain specific subsections of your site, but not have that behavior apply\nto all of your site's URLs.\n\nFor example, if you would like to have `navigateFallback` only apply to\nnavigation requests to URLs whose path begins with `/guide/`\n(e.g. `https://example.com/guide/1234`), the following configuration could be\nused:\n\n```js\nnavigateFallback: '/shell',\nnavigateFallbackWhitelist: [/^\\/guide\\//]\n```\n\nIf set to `[]` (the default), the whitelist will be effectively bypassed, and\n`navigateFallback` will apply to all navigation requests, regardless of URL.\n\n_Default_: `[]`\n\n#### replacePrefix [String]\nReplaces a specified string at the beginning of path URL's at runtime. Use this\noption when you are serving static files from a different directory at runtime\nthan you are at build time. For example, if your local files are under\n`dist/app/` but your static asset root is at `/public/`, you'd strip 'dist/app/'\nand replace it with '/public/'.\n\n_Default_: `''`\n\n#### runtimeCaching [Array&#x27e8;Object&#x27e9;]\nConfigures runtime caching for dynamic content. If you use this option, the `sw-toolbox`\nlibrary configured with the caching strategies you specify will automatically be included in\nyour generated service worker file.\n\nEach `Object` in the `Array` needs a `urlPattern`, which is either a\n[`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\nor a string, following the conventions of the `sw-toolbox` library's\n[routing configuration](https://googlechromelabs.github.io/sw-toolbox/api.html#main). Also required is\na `handler`, which should be either a string corresponding to one of the\n[built-in handlers](https://googlechromelabs.github.io/sw-toolbox/api.html#handlers) under the `toolbox.` namespace, or a function corresponding to your custom\n[request handler](https://googlechromelabs.github.io/sw-toolbox/api.html#handlers).\nOptionally, `method` can be added to specify one of the [supported HTTP methods](https://googlechromelabs.github.io/sw-toolbox/api.html#expressive-approach) (_default: `'get'`_). There is also\nsupport for `options`, which corresponds to the same options supported by a\n[`sw-toolbox` handler](https://googlechromelabs.github.io/sw-toolbox/api.html#handlers).\n\nFor example, the following defines runtime caching behavior for two different URL patterns. It uses a\ndifferent handler for each, and specifies a dedicated cache with maximum size for requests\nthat match `/articles/`:\n\n```js\nruntimeCaching: [{\n  urlPattern: /^https:\\/\\/example\\.com\\/api/,\n  handler: 'networkFirst'\n}, {\n  urlPattern: /\\/articles\\//,\n  handler: 'fastest',\n  options: {\n    cache: {\n      maxEntries: 10,\n      name: 'articles-cache'\n    }\n  }\n}]\n```\n\nThe [`sw-precache` + `sw-toolbox` explainer](sw-precache-and-sw-toolbox.md) has\nmore information about how and why you'd use both libraries together.\n\n_Default_: `[]`\n\n#### skipWaiting [Boolean]\nControls whether or not the generated service worker will call\n[`skipWaiting()`](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/skipWaiting)\ninside the `install` handler.\n\nBy default, when there's an update to a previously installed\nservice worker, then the new service worker delays activation and stays in a\n`waiting` state until all pages controlled by the old service worker are\nunloaded. Calling `skipWaiting()` allows a newly registered service worker to\nbypass the `waiting` state.\n\nWhen `skipWaiting` is `true`, the new service worker's `activate` handler will\nbe called immediately, and any out of date cache entries from the previous\nservice worker will be deleted. Please keep this in mind if you rely on older\ncached resources to be available throughout the page's lifetime, because, for\nexample, you [defer the loading of some resources](https://github.com/GoogleChrome/sw-precache/issues/180)\nuntil they're needed at runtime.\n\n_Default_: `true`\n\n#### staticFileGlobs [Array&#x27e8;String&#x27e9;]\nAn array of one or more string patterns that will be passed in to\n[`glob`](https://github.com/isaacs/node-glob).\nAll files matching these globs will be automatically precached by the generated service worker.\nYou'll almost always want to specify something for this.\n\n_Default_: `[]`\n\n#### stripPrefix [String]\nRemoves a specified string from the beginning of path URL's at runtime. Use this\noption when there's a discrepancy between a relative path at build time and\nthe same path at run time. For example, if all your local files are under\n`dist/app/` and your web root is also at `dist/app/`, you'd strip that prefix\nfrom the start of each local file's path in order to get the correct relative\nURL.\n\n_Default_: `''`\n\n#### stripPrefixMulti [Object]\nMaps multiple strings to be stripped and replaced from the beginning of URL paths at runtime.\nUse this option when you have multiple discrepancies between relative paths at build time and\nthe same path at run time.\nIf `stripPrefix` and `replacePrefix` are not equal to `''`, they are automatically added to this option.\n```js\nstripPrefixMulti: {\n  'www-root/public-precached/': 'public/',\n  'www-root/public/': 'public/'\n}\n```\n\n_Default_: `{}`\n\n#### templateFilePath [String]\n\nThe path to the  ([lo-dash](https://lodash.com/docs#template)) template used to\ngenerate `service-worker.js`. If you need to add additional functionality to the\ngenerated service worker code, it's recommended that you use the\n[`importScripts`](#importscripts-arraystring) option to include extra JavaScript rather than\nusing a different template. But if you do need to change the basic generated\nservice worker code, please make a copy of the [original template](https://github.com/googlechrome/sw-precache/blob/master/service-worker.tmpl),\nmodify it locally, and use this option to point to your template file.\n\n_Default_: `service-worker.tmpl` (in the directory that this module lives in)\n\n#### verbose [boolean]\nDetermines whether there's log output for each individual static/dynamic resource that's precached.\nEven if this is set to false, there will be a final log entry indicating the total size of all\nprecached resources.\n\n_Default_: `false`\n\n\n## Wrappers and Starter Kits\n\nWhile it's possible to use the `sw-precache` module's API directly within any\nJavaScript environment, several wrappers have been developed by members of the\ncommunity tailored to specific build environments. They include:\n- [`sw-precache-webpack-plugin`](https://www.npmjs.com/package/sw-precache-webpack-plugin)\n- [`sw-precache-brunch`](https://www.npmjs.com/package/sw-precache-brunch)\n- [`grunt-sw-precache`](https://www.npmjs.com/package/grunt-sw-precache)\n- [`exhibit-builder-sw-precache`](https://www.npmjs.com/package/exhibit-builder-sw-precache)\n\nThere are also several starter kits or scaffolding projects that incorporate\n`sw-precache` into their build process, giving you a full service worker out of\nthe box. The include:\n\n### CLIs\n\n- [`polymer-cli`](https://github.com/Polymer/polymer-cli)\n- [`create-react-pwa`](https://github.com/jeffposnick/create-react-pwa)\n\n### Starter Kits\n\n- [`react-redux-universal-hot-example`](https://github.com/bertho-zero/react-redux-universal-hot-example)\n- [Polymer Starter Kit](https://github.com/polymerelements/polymer-starter-kit)\n- [Web Starter Kit](https://github.com/google/web-starter-kit)\n\n### Recipes for writing a custom wrapper\n\nWhile there are not always ready-to-use wrappers for specific environments, this list contains some recipes to integrate `sw-precache` in your workflow:\n\n- [Gradle wrapper for offline JavaDoc](https://gist.github.com/TimvdLippe/4c39b99e3b0ffbcdd8814a31e2969ed1)\n- [Brunch starter for Phoenix Framework](https://gist.github.com/natecox/b19c4e08408a5bf0d4cf4d74f1902260)\n\n## Acknowledgements\n\nThanks to [Sindre Sorhus](https://github.com/sindresorhus) and\n[Addy Osmani](https://github.com/addyosmani) for their advice and code reviews.\n[Jake Archibald](https://github.com/jakearchibald) was kind enough to review the service worker logic.\n\n## License\n\nCopyright © 2017 Google, Inc.\n\nLicensed under the [Apache License, Version 2.0](LICENSE) (the \"License\");\nyou may not use this file except in compliance with the License. You may\nobtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n[npm-url]: https://npmjs.org/package/sw-precache\n[npm-image]: https://badge.fury.io/js/sw-precache.svg\n[travis-url]: https://travis-ci.org/GoogleChrome/sw-precache\n[travis-image]: https://travis-ci.org/GoogleChrome/sw-precache.svg?branch=master\n[daviddm-url]: https://david-dm.org/googlechrome/sw-precache.svg?theme=shields.io\n[daviddm-image]: https://david-dm.org/googlechrome/sw-precache\n"
        },
        {
          "name": "app-shell-demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "cli.js",
          "type": "blob",
          "size": 5.298828125,
          "content": "#!/usr/bin/env node\n/**\n * Copyright 2015 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-env node */\n/* eslint no-nested-ternary: 0 */\n'use strict';\n\nvar meow = require('meow');\nvar path = require('path');\nvar pkg = require('./package.json');\nvar swPrecache = require('./');\nvar updateNotifier = require('update-notifier');\n\nupdateNotifier({pkg: pkg}).notify();\n\nfunction setDefaults(cli, configFileFlags) {\n  var compositeFlags = cli.flags;\n\n  compositeFlags.root = compositeFlags.root || configFileFlags.root || './';\n  if (compositeFlags.root.lastIndexOf('/') !== compositeFlags.root.length - 1) {\n    compositeFlags.root += '/';\n  }\n\n  compositeFlags.stripPrefix = compositeFlags.stripPrefix ||\n    configFileFlags.stripPrefix || compositeFlags.root;\n\n  compositeFlags.stripPrefixMulti = compositeFlags.stripPrefixMulti ||\n    configFileFlags.stripPrefixMulti || {};\n\n  compositeFlags.swFile = compositeFlags.swFile || configFileFlags.swFile ||\n    'service-worker.js';\n  compositeFlags.swFilePath = compositeFlags.swFilePath ||\n    configFileFlags.swFilePath ||\n    path.join(compositeFlags.root, compositeFlags.swFile);\n\n  compositeFlags.cacheId = compositeFlags.cacheId ||\n    configFileFlags.cacheId || cli.pkg.name;\n\n  compositeFlags.dynamicUrlToDependencies =\n    compositeFlags.dynamicUrlToDependencies ||\n    configFileFlags.dynamicUrlToDependencies;\n\n  compositeFlags.directoryIndex = compositeFlags.directoryIndex ||\n    configFileFlags.directoryIndex;\n\n  compositeFlags.navigateFallback = compositeFlags.navigateFallback ||\n    configFileFlags.navigateFallback;\n\n  compositeFlags.navigateFallbackWhitelist =\n    compositeFlags.navigateFallbackWhitelist ||\n    configFileFlags.navigateFallbackWhitelist;\n\n  compositeFlags.staticFileGlobs = compositeFlags.staticFileGlobs ||\n    configFileFlags.staticFileGlobs;\n  if (compositeFlags.staticFileGlobs) {\n    if (typeof compositeFlags.staticFileGlobs === 'string') {\n      compositeFlags.staticFileGlobs = [compositeFlags.staticFileGlobs];\n    }\n  } else {\n    compositeFlags.staticFileGlobs = [compositeFlags.root + '/**/*.*'];\n  }\n\n  compositeFlags.ignoreUrlParametersMatching =\n    compositeFlags.ignoreUrlParametersMatching ||\n    configFileFlags.ignoreUrlParametersMatching;\n  if (compositeFlags.ignoreUrlParametersMatching &&\n      typeof compositeFlags.ignoreUrlParametersMatching === 'string') {\n    compositeFlags.ignoreUrlParametersMatching =\n      compositeFlags.ignoreUrlParametersMatching.split(',').map(function(s) {\n        return new RegExp(s);\n      });\n  }\n\n  compositeFlags.importScripts = compositeFlags.importScripts ||\n    configFileFlags.importScripts;\n  if (compositeFlags.importScripts &&\n      typeof compositeFlags.importScripts === 'string') {\n    compositeFlags.importScripts = compositeFlags.importScripts.split(',');\n  }\n\n  compositeFlags.runtimeCaching = compositeFlags.runtimeCaching ||\n    configFileFlags.runtimeCaching;\n\n  compositeFlags.templateFilePath = compositeFlags.templateFilePath ||\n    configFileFlags.templateFilePath;\n\n  compositeFlags.maximumFileSizeToCacheInBytes =\n    compositeFlags.maximumFileSizeToCacheInBytes ||\n    configFileFlags.maximumFileSizeToCacheInBytes;\n\n  // We can't just use ||, since compositeFlags.skipWaiting might be false.\n  compositeFlags.skipWaiting = ('skipWaiting' in compositeFlags) ?\n    compositeFlags.skipWaiting :\n    (('skipWaiting' in configFileFlags) ?\n      configFileFlags.skipWaiting : undefined);\n\n  // We can't just use ||, since compositeFlags.clientsClaim might be false.\n  compositeFlags.clientsClaim = ('clientsClaim' in compositeFlags) ?\n    compositeFlags.clientsClaim :\n    (('clientsClaim' in configFileFlags) ?\n      configFileFlags.clientsClaim : undefined);\n\n  compositeFlags.dontCacheBustUrlsMatching =\n    compositeFlags.dontCacheBustUrlsMatching ||\n    configFileFlags.dontCacheBustUrlsMatching;\n\n  return compositeFlags;\n}\n\nvar cli = meow({\n  help: 'Options from https://github.com/GoogleChrome/sw-precache#options ' +\n        'are accepted as flags.\\nAlternatively, use --config <file>, where ' +\n        '<file> is the path to a JavaScript file that defines the same ' +\n        'options via module.exports.\\n' +\n        'When both a config file and command line option is given, the ' +\n        'command line option takes precedence.'\n});\n\n// If the --config option is used, then read the options from an external\n// JSON configuration file. Options from the --config file can be overwritten\n// by any command line options.\nvar configFileFlags = cli.flags.config ?\n  require(path.resolve(cli.flags.config)) : {};\nvar options = setDefaults(cli, configFileFlags);\n\nswPrecache.write(options.swFilePath, options, function(error) {\n  if (error) {\n    console.error(error.stack);\n    process.exit(1);\n  }\n\n  console.log(options.swFilePath,\n    'has been generated with the service worker contents.');\n});\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "gulpfile.js",
          "type": "blob",
          "size": 1.5810546875,
          "content": "/* eslint-env node */\n'use strict';\n\nvar $ = require('gulp-load-plugins')();\nvar gulp = require('gulp');\nvar runSequence = require('run-sequence');\nvar spawn = require('child_process').spawn;\n\ngulp.task('default', ['test', 'lint']);\n\ngulp.task('generate-demo-service-worker', function(callback) {\n  spawn('gulp', ['--cwd', 'demo', 'generate-service-worker-dev'],\n    {stdio: 'inherit'}).on('close', callback);\n});\n\ngulp.task('lint', ['generate-demo-service-worker'], function() {\n  return gulp.src(['./**/*.js'])\n    .pipe($.eslint())\n    .pipe($.eslint.format())\n    .pipe($.eslint.failOnError());\n});\n\ngulp.task('test', function() {\n  return gulp.src('test/*.js', {read: false})\n    .pipe($.mocha())\n    .on('error', function(error) {\n      console.error(error);\n      process.exit(1);\n    });\n});\n\ngulp.task('update-markdown-toc', function() {\n  return gulp.src('README.md')\n    .pipe($.doctoc())\n    // Get rid of the HTML character entities from the anchor values.\n    .pipe($.replace(/(\\w)x27e[89]/g, '$1'))\n    // This needs to be run twice since there are additional HTML character\n    // entities picked up via the RegExp once the first stripping is done.\n    .pipe($.replace(/(\\w)x27e[89]/g, '$1'))\n    .pipe(gulp.dest('.'));\n});\n\ngulp.task('publish', ['test', 'lint'], function(callback) {\n  spawn('npm', ['publish'], {stdio: 'inherit'})\n    .on('close', callback);\n});\n\ngulp.task('gh-pages', function(callback) {\n  spawn('gulp', ['--cwd', 'demo', 'gh-pages'], {stdio: 'inherit'})\n    .on('close', callback);\n});\n\ngulp.task('release', function(callback) {\n  runSequence('publish', 'gh-pages', callback);\n});\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.6005859375,
          "content": "{\n  \"name\": \"sw-precache\",\n  \"version\": \"5.2.1\",\n  \"description\": \"Generates a service worker to cache your local App Shell resources.\",\n  \"author\": {\n    \"name\": \"Jeff Posnick\",\n    \"email\": \"jeffy@google.com\",\n    \"url\": \"https://jeffy.info\"\n  },\n  \"homepage\": \"https://github.com/googlechrome/sw-precache\",\n  \"main\": \"lib/sw-precache.js\",\n  \"keywords\": [\n    \"caching\",\n    \"offline\",\n    \"precaching\",\n    \"service-worker\",\n    \"serviceworker\",\n    \"appshell\",\n    \"pwa\"\n  ],\n  \"engines\": {\n    \"node\": \">=4.0.0\"\n  },\n  \"devDependencies\": {\n    \"del\": \"^2.2.2\",\n    \"eslint\": \"^3.15.0\",\n    \"eslint-config-google\": \"^0.7.1\",\n    \"express\": \"^4.14.1\",\n    \"gh-pages\": \"^0.12.0\",\n    \"grunt\": \"^1.0.1\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-doctoc\": \"^0.1.4\",\n    \"gulp-eslint\": \"^3.0.1\",\n    \"gulp-load-plugins\": \"^1.5.0\",\n    \"gulp-mocha\": \"^3.0.1\",\n    \"gulp-replace\": \"^0.5.4\",\n    \"gulp-util\": \"^3.0.8\",\n    \"jade\": \"^1.11.0\",\n    \"mocha\": \"^3.2.0\",\n    \"node-fetch\": \"^1.6.3\",\n    \"run-sequence\": \"^1.2.2\"\n  },\n  \"dependencies\": {\n    \"dom-urls\": \"^1.1.0\",\n    \"es6-promise\": \"^4.0.5\",\n    \"glob\": \"^7.1.1\",\n    \"lodash.defaults\": \"^4.2.0\",\n    \"lodash.template\": \"^4.4.0\",\n    \"meow\": \"^3.7.0\",\n    \"mkdirp\": \"^0.5.1\",\n    \"pretty-bytes\": \"^4.0.2\",\n    \"sw-toolbox\": \"^3.4.0\",\n    \"update-notifier\": \"^2.3.0\"\n  },\n  \"repository\": \"googlechrome/sw-precache\",\n  \"bugs\": \"https://github.com/googlechrome/sw-precache/issues\",\n  \"license\": \"Apache-2.0\",\n  \"scripts\": {\n    \"test\": \"gulp test lint\",\n    \"doctoc\": \"doctoc\"\n  },\n  \"files\": [\n    \"cli.js\",\n    \"lib\",\n    \"service-worker.tmpl\"\n  ],\n  \"bin\": {\n    \"sw-precache\": \"cli.js\"\n  }\n}\n"
        },
        {
          "name": "service-worker.tmpl",
          "type": "blob",
          "size": 7.4267578125,
          "content": "/**\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n*/\n\n// DO NOT EDIT THIS GENERATED OUTPUT DIRECTLY!\n// This file should be overwritten as part of your build process.\n// If you need to extend the behavior of the generated service worker, the best approach is to write\n// additional code and include it using the importScripts option:\n//   https://github.com/GoogleChrome/sw-precache#importscripts-arraystring\n//\n// Alternatively, it's possible to make changes to the underlying template file and then use that as the\n// new base for generating output, via the templateFilePath option:\n//   https://github.com/GoogleChrome/sw-precache#templatefilepath-string\n//\n// If you go that route, make sure that whenever you update your sw-precache dependency, you reconcile any\n// changes made to this original template file with your modified copy.\n\n// This generated service worker JavaScript will precache your site's resources.\n// The code needs to be saved in a .js file at the top-level of your site, and registered\n// from your pages in order to be used. See\n// https://github.com/googlechrome/sw-precache/blob/master/demo/app/js/service-worker-registration.js\n// for an example of how you can register this script and handle various service worker events.\n\n/* eslint-env worker, serviceworker */\n/* eslint-disable indent, no-unused-vars, no-multiple-empty-lines, max-nested-callbacks, space-before-function-paren, quotes, comma-spacing */\n'use strict';\n\nvar precacheConfig = <%= precacheConfig %>;\nvar cacheName = 'sw-precache-<%= version %>-<%= cacheId %>-' + (self.registration ? self.registration.scope : '');\n\n<% if (handleFetch) { %>\nvar ignoreUrlParametersMatching = [<%= ignoreUrlParametersMatching %>];\n<% } %>\n\n<% Object.keys(externalFunctions).sort().forEach(function(functionName) {%>\nvar <%- functionName %> = <%= externalFunctions[functionName] %>;\n<% }); %>\n\nvar hashParamName = '_sw-precache';\nvar urlsToCacheKeys = new Map(\n  precacheConfig.map(function(item) {\n    var relativeUrl = item[0];\n    var hash = item[1];\n    var absoluteUrl = new URL(relativeUrl, self.location);\n    var cacheKey = createCacheKey(absoluteUrl, hashParamName, hash, <%= dontCacheBustUrlsMatching %>);\n    return [absoluteUrl.toString(), cacheKey];\n  })\n);\n\nfunction setOfCachedUrls(cache) {\n  return cache.keys().then(function(requests) {\n    return requests.map(function(request) {\n      return request.url;\n    });\n  }).then(function(urls) {\n    return new Set(urls);\n  });\n}\n\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(cacheName).then(function(cache) {\n      return setOfCachedUrls(cache).then(function(cachedUrls) {\n        return Promise.all(\n          Array.from(urlsToCacheKeys.values()).map(function(cacheKey) {\n            // If we don't have a key matching url in the cache already, add it.\n            if (!cachedUrls.has(cacheKey)) {\n              var request = new Request(cacheKey, {credentials: 'same-origin'});\n              return fetch(request).then(function(response) {\n                // Bail out of installation unless we get back a 200 OK for\n                // every request.\n                if (!response.ok) {\n                  throw new Error('Request for ' + cacheKey + ' returned a ' +\n                    'response with status ' + response.status);\n                }\n\n                return cleanResponse(response).then(function(responseToCache) {\n                  return cache.put(cacheKey, responseToCache);\n                });\n              });\n            }\n          })\n        );\n      });\n    }).then(function() {\n      <% if (skipWaiting) { %>\n      // Force the SW to transition from installing -> active state\n      return self.skipWaiting();\n      <% } %>\n    })\n  );\n});\n\nself.addEventListener('activate', function(event) {\n  var setOfExpectedUrls = new Set(urlsToCacheKeys.values());\n\n  event.waitUntil(\n    caches.open(cacheName).then(function(cache) {\n      return cache.keys().then(function(existingRequests) {\n        return Promise.all(\n          existingRequests.map(function(existingRequest) {\n            if (!setOfExpectedUrls.has(existingRequest.url)) {\n              return cache.delete(existingRequest);\n            }\n          })\n        );\n      });\n    }).then(function() {\n      <% if (clientsClaim) { %>\n      return self.clients.claim();\n      <% } %>\n    })\n  );\n});\n\n<% if (handleFetch) { %>\nself.addEventListener('fetch', function(event) {\n  if (event.request.method === 'GET') {\n    // Should we call event.respondWith() inside this fetch event handler?\n    // This needs to be determined synchronously, which will give other fetch\n    // handlers a chance to handle the request if need be.\n    var shouldRespond;\n\n    // First, remove all the ignored parameters and hash fragment, and see if we\n    // have that URL in our cache. If so, great! shouldRespond will be true.\n    var url = stripIgnoredUrlParameters(event.request.url, ignoreUrlParametersMatching);\n    shouldRespond = urlsToCacheKeys.has(url);\n\n    // If shouldRespond is false, check again, this time with 'index.html'\n    // (or whatever the directoryIndex option is set to) at the end.\n    var directoryIndex = '<%= directoryIndex %>';\n    if (!shouldRespond && directoryIndex) {\n      url = addDirectoryIndex(url, directoryIndex);\n      shouldRespond = urlsToCacheKeys.has(url);\n    }\n\n    // If shouldRespond is still false, check to see if this is a navigation\n    // request, and if so, whether the URL matches navigateFallbackWhitelist.\n    var navigateFallback = '<%= navigateFallback %>';\n    if (!shouldRespond &&\n        navigateFallback &&\n        (event.request.mode === 'navigate') &&\n        isPathWhitelisted(<%= navigateFallbackWhitelist %>, event.request.url)) {\n      url = new URL(navigateFallback, self.location).toString();\n      shouldRespond = urlsToCacheKeys.has(url);\n    }\n\n    // If shouldRespond was set to true at any point, then call\n    // event.respondWith(), using the appropriate cache key.\n    if (shouldRespond) {\n      event.respondWith(\n        caches.open(cacheName).then(function(cache) {\n          return cache.match(urlsToCacheKeys.get(url)).then(function(response) {\n            if (response) {\n              return response;\n            }\n            throw Error('The cached response that was expected is missing.');\n          });\n        }).catch(function(e) {\n          // Fall back to just fetch()ing the request if some unexpected error\n          // prevented the cached response from being valid.\n          console.warn('Couldn\\'t serve response for \"%s\" from cache: %O', event.request.url, e);\n          return fetch(event.request);\n        })\n      );\n    }\n  }\n});\n\n<% if (swToolboxCode) { %>\n// *** Start of auto-included sw-toolbox code. ***\n<%= swToolboxCode %>\n// *** End of auto-included sw-toolbox code. ***\n<% } %>\n\n<% if (runtimeCaching) { %>\n// Runtime cache configuration, using the sw-toolbox library.\n<%= runtimeCaching %>\n<% } %>\n<% } %>\n\n<% if (importScripts) { %>\nimportScripts(<%= importScripts %>);\n<% } %>\n"
        },
        {
          "name": "sw-precache-and-sw-toolbox.md",
          "type": "blob",
          "size": 2.107421875,
          "content": "# sw-precache? sw-toolbox? What's the difference?\n\n## sw-precache ⇒ app shell, sw-toolbox ⇒ dynamic content\n\nIt's very common to use `sw-precache` and `sw-toolbox` in conjunction with each\nother, especially when following the\n[App Shell](https://github.com/GoogleChrome/sw-precache/blob/master/GettingStarted.md#app-shell) +\n[dynamic content](https://github.com/GoogleChrome/sw-precache/blob/master/GettingStarted.md#dynamic-content)\nmodel.\n\nThe service worker that `sw-precache` generates handles the local asset\nversioning and uses cache-first strategy for your App Shell.\n\n`sw-toolbox` handles runtime caching strategies for dynamic content, such as API\ncalls, third-party resources, and large or infrequently used local resources\nthat you don't want precached.\n\n## Using them together via sw-precache's runtimeCaching\n\nWe wanted to make it easier for developers to use the two libraries together.\nBecause `sw-precache` has to be directly integrated with your build environment\nand must be responsible for outputting your top-level service worker file, it\nmade the most sense as an integration point to give `sw-precache` the ability to\ninclude the `sw-toolbox` code and configuration alongside its own\nconfiguration. Using the\n[`runtimeCaching`](https://github.com/GoogleChrome/sw-precache#runtimecaching-arrayobject)\nconfiguration option in `sw-precache` is a shortcut that accomplishes what you\ncould do manually by importing `sw-toolbox` in your service worker and writing\nyour own routing rules. You can confirm this by looking at a\n[sample `service-worker.js`](https://github.com/GoogleChrome/sw-precache/blob/5fede7148a516c0bf555e9580c74b9accffe721c/service-worker.js#L206)\nfile generated by `sw-precache` when the\n[`runtimeCaching` option is used](https://github.com/GoogleChrome/sw-precache/blob/9118fe1e3905f959198f3bdd21004238b1c884f5/demo/gulpfile.js#L55).\n\n## The future\n\nThis relationship might change at some point in the future once changes to the\nservice worker specification make it possible to\n[relax the requirement](https://github.com/GoogleChrome/sw-precache/issues/147)\nthat `sw-precache` generate the top-level service worker.\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}