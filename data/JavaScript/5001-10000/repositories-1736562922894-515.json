{
  "metadata": {
    "timestamp": 1736562922894,
    "page": 515,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "matthewmueller/x-ray",
      "stars": 5887,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.09375,
          "content": "node_modules\nnpm-debug.log\n.DS_Store\nexamples/_*\nexamples/*.json\ncoverage\n.idea\ntravis-phantomjs"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.037109375,
          "content": "support\ntest\nexamples\n*.sock\ncoverage\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2294921875,
          "content": "language: node_js\nnode_js:\n  - \"stable\"\n  - \"6\"\n  - \"8\"\n  - \"9\"\n  - \"10\"\n  - \"11\"\n  - \"12\"\nscript: npm run-script pretest && npm run-script coveralls\nafter_script: \"cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js\"\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 14.587890625,
          "content": "\n<a name=\"2.3.3\"></a>\n# 2.3.2 (2018-06-22)\n==================\n\n  * removed bumped\n  * Merge pull request #283 from matthewmueller/renovate/pin-dependencies\n  * Pin Dependencies\n  * Merge pull request #282 from matthewmueller/renovate/configure\n  * Add renovate.json\n  * Merge pull request #241 from kengz/master\n  * Merge pull request #232 from dfcowell/master\n  * Merge pull request #218 from jmichelin/master\n  * Merge pull request #200 from thangngoc89/master\n  * Merge branch 'master' into master\n  * Merge pull request #253 from linguistbreaker/master\n  * Merge pull request #250 from mandeldl/master\n  * add job board\n  * fixing path for require() for XRay and a typo in path.resolve\n  * fix example typos and relative paths\n  * add json parsing error handler to promisify\n  * add readme for promisify\n  * add promisify option for xray.then(); add tests\n  * Update readme.\n  * Remove test constraints.\n  * Add abort function to allow for ending pagination based on returned results/next url.\n  * Merge pull request #1 from jmichelin/jmichelin-patch-1\n  * [bug](examples) fix typo in selector example\n  * Fix Composition and collection error\n\n<a name=\"2.3.2\"></a>\n# 2.3.2 (2017-02-24)\n\n  * Merge pull request #221 from cvan/patch-1\n  * Merge pull request #233 from sagivo/patch-1\n  * Merge pull request #246 from paulbarrett/patch-1\n  * fix broken code sample using alt test site\n  * fix broken tests caused by removal of dribbble pagination\n  * modify test spec to account for dribble dom mods\n  * fix broken selector in the dribbble sample code\n  * remove commented code\n  * include both hostname + port when absolute-izing URLs\n\n<a name=\"2.3.1\"></a>\n# 2.3.1 (2016-10-13)\n\n  * Merge pull request #181 from Muscot/master\n  * Merge pull request #209 from Crazometer/readme-driver-fix\n  * Clarification suggested by @gebrits\n  * Merge pull request #216 from 600rr/patch-1\n  * Update index.js\n  * Moved driver list to correct place and added request driver.\n  * Merge pull request #179 from fatman-/patch-1\n  * Merge pull request #191 from piamancini/patch-1\n  * Merge pull request #192 from GeoffreyEmery/patch-1\n  * update to readme\n  * Update Read.me\n  * Added backers and sponsors from OpenCollective\n  * Merge pull request #190 from davidarnarsson/master\n  * Fixed spaces\n  * Fixed coding style\n  * Fixes a problem when encountering malformed URLs while \"absolutizing\" urls in a document.\n  * Merge pull request #186 from wayneashleyberry/patch-1\n  * Update Readme.md\n  * Moved example follow.js to a folder crawler that test to follow many links and retrieve information. Changed to standard js.\n  *           // Nested crawling broken on 'master'. When to merge 'bugfix/nested-crawling' #111           // -------------------------------------------------------------------------------           // Needed to exit this without calling next, the problem was that it returned to           // the \"finished\" callback before it had retrived all pending request. it should           // wait for \"return next(null, compact(out))\"\n  * Fix typo in index.js in the collections example\n\n<a name=\"2.3.0\"></a>\n# 2.3.0 (2016-04-26)\n\n* fix README code in 'Collections' ([3a8470c](https://github.com/lapwinglabs/x-ray/commit/3a8470c))\n* Support x-ray-parse filters ([0fa5093](https://github.com/lapwinglabs/x-ray/commit/0fa5093))\n* Update Readme and contributors ([faabc13](https://github.com/lapwinglabs/x-ray/commit/faabc13))\n\n\n\n<a name=\"2.2.0\"></a>\n# 2.2.0 (2016-03-30)\n\n* fix error when html is null ([f73990f](https://github.com/lapwinglabs/x-ray/commit/f73990f))\n* Fix style ([636d4f0](https://github.com/lapwinglabs/x-ray/commit/636d4f0))\n* run pretest on travis ([21eabfb](https://github.com/lapwinglabs/x-ray/commit/21eabfb))\n\n\n\n<a name=\"2.1.1\"></a>\n## 2.1.1 (2016-03-29)\n\n* delete unnecessary fixture ([85a42a7](https://github.com/lapwinglabs/x-ray/commit/85a42a7))\n* Extra util.isObject method ([cd56198](https://github.com/lapwinglabs/x-ray/commit/cd56198))\n* Fix #162 ([7484e20](https://github.com/lapwinglabs/x-ray/commit/7484e20)), closes [#162](https://github.com/lapwinglabs/x-ray/issues/162)\n* fix example links in readme ([29ab95e](https://github.com/lapwinglabs/x-ray/commit/29ab95e))\n* Setup correctly init state ([0c3f421](https://github.com/lapwinglabs/x-ray/commit/0c3f421))\n* upgrade rimraf ([43c2eb9](https://github.com/lapwinglabs/x-ray/commit/43c2eb9))\n\n\n\n<a name=\"2.1.0\"></a>\n# 2.1.0 (2016-03-25)\n\n* Add .stream section in docs ([3dbaa61](https://github.com/lapwinglabs/x-ray/commit/3dbaa61))\n* Add badges ([5ca8cbd](https://github.com/lapwinglabs/x-ray/commit/5ca8cbd))\n* Add bumped integration ([70c39b0](https://github.com/lapwinglabs/x-ray/commit/70c39b0))\n* Add cheerio dev dependency ([c34fed4](https://github.com/lapwinglabs/x-ray/commit/c34fed4))\n* Add coveralls integration ([fc9b6d5](https://github.com/lapwinglabs/x-ray/commit/fc9b6d5))\n* Add missing fields ([1d2f669](https://github.com/lapwinglabs/x-ray/commit/1d2f669))\n* Add node.stream ([c573cda](https://github.com/lapwinglabs/x-ray/commit/c573cda))\n* Add phantom setup ([c116752](https://github.com/lapwinglabs/x-ray/commit/c116752))\n* Add travis ([32c74c6](https://github.com/lapwinglabs/x-ray/commit/32c74c6))\n* Change to documentation of support for raw HTML ([959f791](https://github.com/lapwinglabs/x-ray/commit/959f791))\n* Cleanup dependencies ([27933d8](https://github.com/lapwinglabs/x-ray/commit/27933d8))\n* Delete commented code ([b788d93](https://github.com/lapwinglabs/x-ray/commit/b788d93))\n* Disable security in testing ([a26f8e5](https://github.com/lapwinglabs/x-ray/commit/a26f8e5))\n* doc - API usage correction ([324291b](https://github.com/lapwinglabs/x-ray/commit/324291b))\n* Ensure to have last mocha version ([96264af](https://github.com/lapwinglabs/x-ray/commit/96264af))\n* Extract stream helpers and WalkHTML methods ([6f73cac](https://github.com/lapwinglabs/x-ray/commit/6f73cac))\n* Extract util methods ([0781058](https://github.com/lapwinglabs/x-ray/commit/0781058))\n* Fix #148 ([d79f94e](https://github.com/lapwinglabs/x-ray/commit/d79f94e)), closes [#148](https://github.com/lapwinglabs/x-ray/issues/148)\n* Fix examples ([a9c9c5f](https://github.com/lapwinglabs/x-ray/commit/a9c9c5f))\n* Fix package ([a0e8be7](https://github.com/lapwinglabs/x-ray/commit/a0e8be7))\n* Fix potential issue when selector is a function following comments on commit e7318d591908d04b439c1ff ([9327cfa](https://github.com/lapwinglabs/x-ray/commit/9327cfa))\n* Fix some linter messages ([50c00cc](https://github.com/lapwinglabs/x-ray/commit/50c00cc))\n* Fix test ([2b2f027](https://github.com/lapwinglabs/x-ray/commit/2b2f027))\n* Fix test ([1adf200](https://github.com/lapwinglabs/x-ray/commit/1adf200))\n* Fix test ([760b615](https://github.com/lapwinglabs/x-ray/commit/760b615))\n* Fix travis integration with phantom ([0966ef1](https://github.com/lapwinglabs/x-ray/commit/0966ef1))\n* Fix typo ([03d044c](https://github.com/lapwinglabs/x-ray/commit/03d044c))\n* Generate (again) changelog ([8610ff5](https://github.com/lapwinglabs/x-ray/commit/8610ff5))\n* Handle invalid URL and invalid HTML input ([61738eb](https://github.com/lapwinglabs/x-ray/commit/61738eb))\n* little refactor ([78cf007](https://github.com/lapwinglabs/x-ray/commit/78cf007))\n* Move xray phantom out of xray dep ([0cf2be3](https://github.com/lapwinglabs/x-ray/commit/0cf2be3))\n* Prevent lint phantom stuff ([58cb404](https://github.com/lapwinglabs/x-ray/commit/58cb404))\n* Remove testing section, just look badges! ([978306f](https://github.com/lapwinglabs/x-ray/commit/978306f))\n* Rename testing files. More easy to search ([0a269fd](https://github.com/lapwinglabs/x-ray/commit/0a269fd))\n* Setup node version ([6f77635](https://github.com/lapwinglabs/x-ray/commit/6f77635))\n* Sort requires ([9b204dd](https://github.com/lapwinglabs/x-ray/commit/9b204dd))\n* total refactor ([6d30434](https://github.com/lapwinglabs/x-ray/commit/6d30434))\n* Update travis phantom build ([cd37e33](https://github.com/lapwinglabs/x-ray/commit/cd37e33))\n* Update travis phantom pattern ([db9e63b](https://github.com/lapwinglabs/x-ray/commit/db9e63b))\n* Upgrade dependency ([3aeea03](https://github.com/lapwinglabs/x-ray/commit/3aeea03))\n* upgrade deps ([cef188e](https://github.com/lapwinglabs/x-ray/commit/cef188e))\n* WIP ([1f0bc2f](https://github.com/lapwinglabs/x-ray/commit/1f0bc2f))\n* WIP ([6fece6c](https://github.com/lapwinglabs/x-ray/commit/6fece6c))\n* xit tests that doesn't work well. ([095ad5f](https://github.com/lapwinglabs/x-ray/commit/095ad5f))\n\n\n\n<a name=\"2.0.3\"></a>\n## 2.0.3 (2016-01-06)\n\n* Added support for <base> tag when generating absolute URLs. ([11dd8f7](https://github.com/lapwinglabs/x-ray/commit/11dd8f7))\n* added video ([46abded](https://github.com/lapwinglabs/x-ray/commit/46abded))\n* Do no error on trying to follow a non-url ([030e5ea](https://github.com/lapwinglabs/x-ray/commit/030e5ea))\n* Emit error on correct stream ([488d5dd](https://github.com/lapwinglabs/x-ray/commit/488d5dd)), closes [#98](https://github.com/lapwinglabs/x-ray/issues/98)\n* Fix issue when one of the selector is null ([e7318d5](https://github.com/lapwinglabs/x-ray/commit/e7318d5))\n* Fix potential issue when selector is a function following comments on commit e7318d591908d04b439c1ff ([9327cfa](https://github.com/lapwinglabs/x-ray/commit/9327cfa))\n* Paginating => Crawling ([6750a38](https://github.com/lapwinglabs/x-ray/commit/6750a38))\n* Release 2.0.3 ([8c3b6e3](https://github.com/lapwinglabs/x-ray/commit/8c3b6e3))\n\n\n\n<a name=\"2.0.2\"></a>\n## 2.0.2 (2015-07-04)\n\n* add test dependency ([de3a3f0](https://github.com/lapwinglabs/x-ray/commit/de3a3f0))\n* handle the empty result set case ([a257ef7](https://github.com/lapwinglabs/x-ray/commit/a257ef7))\n* Release 2.0.2 ([c179fbb](https://github.com/lapwinglabs/x-ray/commit/c179fbb))\n\n\n\n<a name=\"2.0.1\"></a>\n## 2.0.1 (2015-06-24)\n\n* Added running test note ([f27ebc1](https://github.com/lapwinglabs/x-ray/commit/f27ebc1))\n* basic repl working ([9228ee0](https://github.com/lapwinglabs/x-ray/commit/9228ee0))\n* build out documentation ([2603c0b](https://github.com/lapwinglabs/x-ray/commit/2603c0b))\n* bump x-ray-select ([eb766b0](https://github.com/lapwinglabs/x-ray/commit/eb766b0))\n* cleanup ([31a2490](https://github.com/lapwinglabs/x-ray/commit/31a2490))\n* cleanup and start format ([7709e08](https://github.com/lapwinglabs/x-ray/commit/7709e08))\n* fix `make test` ([ad54ad4](https://github.com/lapwinglabs/x-ray/commit/ad54ad4))\n* fix convert URLs ([246915c](https://github.com/lapwinglabs/x-ray/commit/246915c))\n* fix example ([3b3338c](https://github.com/lapwinglabs/x-ray/commit/3b3338c))\n* fixed the double call of the callback function ([d1a955c](https://github.com/lapwinglabs/x-ray/commit/d1a955c))\n* ignored webstorm specific files ([7494d9a](https://github.com/lapwinglabs/x-ray/commit/7494d9a))\n* more API docs ([4e77f5b](https://github.com/lapwinglabs/x-ray/commit/4e77f5b))\n* new x-ray ([8fe7ae7](https://github.com/lapwinglabs/x-ray/commit/8fe7ae7))\n* phantomjs is required to run the tests ([ba47969](https://github.com/lapwinglabs/x-ray/commit/ba47969))\n* Release 2.0.0 ([80414cb](https://github.com/lapwinglabs/x-ray/commit/80414cb))\n* Release 2.0.1 ([3c6f6db](https://github.com/lapwinglabs/x-ray/commit/3c6f6db))\n* remove coverage from git ([4a71923](https://github.com/lapwinglabs/x-ray/commit/4a71923))\n* remove old tests ([3820c2e](https://github.com/lapwinglabs/x-ray/commit/3820c2e))\n* small cleanup ([8ce66a6](https://github.com/lapwinglabs/x-ray/commit/8ce66a6))\n* update absolutes ([f246874](https://github.com/lapwinglabs/x-ray/commit/f246874))\n* update example ([b0529b7](https://github.com/lapwinglabs/x-ray/commit/b0529b7))\n* update iamge ([a1865c1](https://github.com/lapwinglabs/x-ray/commit/a1865c1))\n* update image ([6aca14d](https://github.com/lapwinglabs/x-ray/commit/6aca14d))\n* Update index.js ([5a8f05f](https://github.com/lapwinglabs/x-ray/commit/5a8f05f))\n* update readme ([2636061](https://github.com/lapwinglabs/x-ray/commit/2636061))\n* Update Readme.md ([c9f06e6](https://github.com/lapwinglabs/x-ray/commit/c9f06e6))\n\n\n\n<a name=\"1.0.5\"></a>\n## 1.0.5 (2015-03-10)\n\n* fix readme ([9e51e82](https://github.com/lapwinglabs/x-ray/commit/9e51e82))\n* Release 1.0.5 ([f827a90](https://github.com/lapwinglabs/x-ray/commit/f827a90))\n* x-ray: Add `#ua()` ([43a2824](https://github.com/lapwinglabs/x-ray/commit/43a2824)), closes [#4](https://github.com/lapwinglabs/x-ray/issues/4)\n\n\n\n<a name=\"1.0.4\"></a>\n## 1.0.4 (2015-03-08)\n\n* Add img[src] to absolute urls ([d9090d2](https://github.com/lapwinglabs/x-ray/commit/d9090d2))\n* add test ([2d9edc6](https://github.com/lapwinglabs/x-ray/commit/2d9edc6))\n* Added Gitter badge ([c8a09d9](https://github.com/lapwinglabs/x-ray/commit/c8a09d9))\n* Delete dribbble-search.js ([109da37](https://github.com/lapwinglabs/x-ray/commit/109da37))\n* Release 1.0.4 ([524ed37](https://github.com/lapwinglabs/x-ray/commit/524ed37))\n* update list of attribute affected by absolute urls ([bae1926](https://github.com/lapwinglabs/x-ray/commit/bae1926))\n\n\n\n<a name=\"1.0.3\"></a>\n## 1.0.3 (2015-02-07)\n\n* add xray.prepare(str, fn) for custom 'title | uppercase' filters ([4cf1897](https://github.com/lapwinglabs/x-ray/commit/4cf1897))\n* better spot for badges ([d62f2a0](https://github.com/lapwinglabs/x-ray/commit/d62f2a0))\n* Release 1.0.3 ([d9d93aa](https://github.com/lapwinglabs/x-ray/commit/d9d93aa))\n\n\n\n<a name=\"1.0.2\"></a>\n## 1.0.2 (2015-02-06)\n\n* fix bold ([e1416a7](https://github.com/lapwinglabs/x-ray/commit/e1416a7))\n* fix url (thanks Jonah) ([d63a15a](https://github.com/lapwinglabs/x-ray/commit/d63a15a))\n* more linking ([74a08df](https://github.com/lapwinglabs/x-ray/commit/74a08df))\n* Release 1.0.2 ([b5f9043](https://github.com/lapwinglabs/x-ray/commit/b5f9043))\n* Update Readme.md ([f673628](https://github.com/lapwinglabs/x-ray/commit/f673628))\n* added: gittask ([c3a1f8c](https://github.com/lapwinglabs/x-ray/commit/c3a1f8c))\n\n\n\n<a name=\"1.0.1\"></a>\n## 1.0.1 (2015-02-05)\n\n* add xray.format(fn) ([bfea5f0](https://github.com/lapwinglabs/x-ray/commit/bfea5f0))\n* cleanup ([a1289d9](https://github.com/lapwinglabs/x-ray/commit/a1289d9))\n* more testing and finished readme ([0aa0fcc](https://github.com/lapwinglabs/x-ray/commit/0aa0fcc))\n* Release 1.0.1 ([871c833](https://github.com/lapwinglabs/x-ray/commit/871c833))\n\n\n\n<a name=\"1.0.0\"></a>\n# 1.0.0 (2015-02-04)\n\n* all new x-ray ([6377062](https://github.com/lapwinglabs/x-ray/commit/6377062))\n* Initial commit ([ea51a7f](https://github.com/lapwinglabs/x-ray/commit/ea51a7f))\n* Release 1.0.0 ([0989cdc](https://github.com/lapwinglabs/x-ray/commit/0989cdc))\n* remove node_modules ([92e6085](https://github.com/lapwinglabs/x-ray/commit/92e6085))\n* updates ([9c4e329](https://github.com/lapwinglabs/x-ray/commit/9c4e329))\n* written, needs to be tested better. ([427e7f2](https://github.com/lapwinglabs/x-ray/commit/427e7f2))\n* added: gitignore ([da14f58](https://github.com/lapwinglabs/x-ray/commit/da14f58))\n\n\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "MIT License\n\nCopyright (c) 2015-2019 Matthew Mueller\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 17.7578125,
          "content": "![x-ray](https://cldup.com/fMBbTcVtwB.png)\n\n![Last version](https://img.shields.io/github/tag/matthewmueller/x-ray.svg?style=flat-square)\n[![Build Status](http://img.shields.io/travis/matthewmueller/x-ray/master.svg?style=flat-square)](https://travis-ci.org/matthewmueller/x-ray)\n[![Coverage Status](https://coveralls.io/repos/github/matthewmueller/x-ray/badge.svg?branch=master&style=flat-square)](https://coveralls.io/github/matthewmueller/x-ray?branch=master)\n[![Dependency status](http://img.shields.io/david/matthewmueller/x-ray.svg?style=flat-square)](https://david-dm.org/matthewmueller/x-ray)\n[![Dev Dependencies Status](http://img.shields.io/david/dev/matthewmueller/x-ray.svg?style=flat-square)](https://david-dm.org/matthewmueller/x-ray#info=devDependencies)\n[![NPM Status](http://img.shields.io/npm/dm/x-ray.svg?style=flat-square)](https://www.npmjs.org/package/x-ray)\n![Node version](https://img.shields.io/node/v/x-ray.svg?style=flat-square)\n[![OpenCollective](https://opencollective.com/x-ray/backers/badge.svg)](#backers)\n[![OpenCollective](https://opencollective.com/x-ray/sponsors/badge.svg)](#sponsors)\n[![Gitter](https://badges.gitter.im/lapwinglabs/x-ray.svg)](https://gitter.im/lapwinglabs/x-ray?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n```js\nvar Xray = require('x-ray')\nvar x = Xray()\n\nx('https://blog.ycombinator.com/', '.post', [\n  {\n    title: 'h1 a',\n    link: '.article-title@href'\n  }\n])\n  .paginate('.nav-previous a@href')\n  .limit(3)\n  .write('results.json')\n```\n\n## Installation\n\n```\nnpm install x-ray\n```\n\n## Features\n\n- **Flexible schema:** Supports strings, arrays, arrays of objects, and nested object structures. The schema is not tied to the structure of the page you're scraping, allowing you to pull the data in the structure of your choosing.\n\n- **Composable:** The API is entirely composable, giving you great flexibility in how you scrape each page.\n\n- **Pagination support:** Paginate through websites, scraping each page. X-ray also supports a request `delay` and a pagination `limit`. Scraped pages can be streamed to a file, so if there's an error on one page, you won't lose what you've already scraped.\n\n- **Crawler support:** Start on one page and move to the next easily. The flow is predictable, following\n  a breadth-first crawl through each of the pages.\n\n- **Responsible:** X-ray has support for concurrency, throttles, delays, timeouts and limits to help you scrape any page responsibly.\n\n- **Pluggable drivers:** Swap in different scrapers depending on your needs. Currently supports HTTP and [PhantomJS driver](http://github.com/lapwinglabs/x-ray-phantom) drivers. In the future, I'd like to see a Tor driver for requesting pages through the Tor network.\n\n## Selector API\n\n### xray(url, selector)(fn)\n\nScrape the `url` for the following `selector`, returning an object in the callback `fn`.\nThe `selector` takes an enhanced jQuery-like string that is also able to select on attributes. The syntax for selecting on attributes is `selector@attribute`. If you do not supply an attribute, the default is selecting the `innerText`.\n\nHere are a few examples:\n\n- Scrape a single tag\n\n```js\nxray('http://google.com', 'title')(function(err, title) {\n  console.log(title) // Google\n})\n```\n\n- Scrape a single class\n\n```js\nxray('http://reddit.com', '.content')(fn)\n```\n\n- Scrape an attribute\n\n```js\nxray('http://techcrunch.com', 'img.logo@src')(fn)\n```\n\n- Scrape `innerHTML`\n\n```js\nxray('http://news.ycombinator.com', 'body@html')(fn)\n```\n\n### xray(url, scope, selector)\n\nYou can also supply a `scope` to each `selector`. In jQuery, this would look something like this: `$(scope).find(selector)`.\n\n### xray(html, scope, selector)\n\nInstead of a url, you can also supply raw HTML and all the same semantics apply.\n\n```js\nvar html = '<body><h2>Pear</h2></body>'\nx(html, 'body', 'h2')(function(err, header) {\n  header // => Pear\n})\n```\n\n## API\n\n### xray.driver(driver)\n\nSpecify a `driver` to make requests through. Available drivers include:\n\n- [request](https://github.com/Crazometer/request-x-ray) - A simple driver built around request. Use this to set headers, cookies or http methods.\n- [phantom](https://github.com/lapwinglabs/x-ray-phantom) - A high-level browser automation library. Use this to render pages or when elements need to be interacted with, or when elements are created dynamically using javascript (e.g.: Ajax-calls).\n\n### xray.stream()\n\nReturns Readable Stream of the data. This makes it easy to build APIs around x-ray. Here's an example with Express:\n\n```js\nvar app = require('express')()\nvar x = require('x-ray')()\n\napp.get('/', function(req, res) {\n  var stream = x('http://google.com', 'title').stream()\n  stream.pipe(res)\n})\n```\n\n### xray.write([path])\n\nStream the results to a `path`.\n\nIf no path is provided, then the behavior is the same as [.stream()](#xraystream).\n\n### xray.then(cb)\n\nConstructs a `Promise` object and invoke its `then` function with a callback `cb`. Be sure to invoke `then()` at the last step of xray method chaining, since the other methods are not promisified.\n\n```js\nx('https://dribbble.com', 'li.group', [\n  {\n    title: '.dribbble-img strong',\n    image: '.dribbble-img [data-src]@data-src'\n  }\n])\n  .paginate('.next_page@href')\n  .limit(3)\n  .then(function(res) {\n    console.log(res[0]) // prints first result\n  })\n  .catch(function(err) {\n    console.log(err) // handle error in promise\n  })\n```\n\n### xray.paginate(selector)\n\nSelect a `url` from a `selector` and visit that page.\n\n### xray.limit(n)\n\nLimit the amount of pagination to `n` requests.\n\n### xray.abort(validator)\n\nAbort pagination if `validator` function returns `true`.\nThe `validator` function receives two arguments:\n\n- `result`: The scrape result object for the current page.\n- `nextUrl`: The URL of the next page to scrape.\n\n### xray.delay(from, [to])\n\nDelay the next request between `from` and `to` milliseconds.\nIf only `from` is specified, delay exactly `from` milliseconds.\n```js\nvar x = Xray().delay('1s', '10s')\n```\n\n### xray.concurrency(n)\n\nSet the request concurrency to `n`. Defaults to `Infinity`.\n```js\nvar x = Xray().concurrency(2)\n```\n\n### xray.throttle(n, ms)\n\nThrottle the requests to `n` requests per `ms` milliseconds.\n```js\nvar x = Xray().throttle(2, '1s')\n```\n\n### xray.timeout (ms)\n\nSpecify a timeout of `ms` milliseconds for each request.\n```js\nvar x = Xray().timeout(30)\n```\n\n## Collections\n\nX-ray also has support for selecting collections of tags. While `x('ul', 'li')` will only select the first list item in an unordered list, `x('ul', ['li'])` will select all of them.\n\nAdditionally, X-ray supports \"collections of collections\" allowing you to smartly select all list items in all lists with a command like this: `x(['ul'], ['li'])`.\n\n## Composition\n\nX-ray becomes more powerful when you start composing instances together. Here are a few possibilities:\n\n### Crawling to another site\n\n```js\nvar Xray = require('x-ray')\nvar x = Xray()\n\nx('http://google.com', {\n  main: 'title',\n  image: x('#gbar a@href', 'title') // follow link to google images\n})(function(err, obj) {\n  /*\n  {\n    main: 'Google',\n    image: 'Google Images'\n  }\n*/\n})\n```\n\n### Scoping a selection\n\n```js\nvar Xray = require('x-ray')\nvar x = Xray()\n\nx('http://mat.io', {\n  title: 'title',\n  items: x('.item', [\n    {\n      title: '.item-content h2',\n      description: '.item-content section'\n    }\n  ])\n})(function(err, obj) {\n  /*\n  {\n    title: 'mat.io',\n    items: [\n      {\n        title: 'The 100 Best Children\\'s Books of All Time',\n        description: 'Relive your childhood with TIME\\'s list...'\n      }\n    ]\n  }\n*/\n})\n```\n\n### Filters\n\nFilters can specified when creating a new Xray instance. To apply filters to a value, append them to the selector using `|`.\n\n```js\nvar Xray = require('x-ray')\nvar x = Xray({\n  filters: {\n    trim: function(value) {\n      return typeof value === 'string' ? value.trim() : value\n    },\n    reverse: function(value) {\n      return typeof value === 'string'\n        ? value\n            .split('')\n            .reverse()\n            .join('')\n        : value\n    },\n    slice: function(value, start, end) {\n      return typeof value === 'string' ? value.slice(start, end) : value\n    }\n  }\n})\n\nx('http://mat.io', {\n  title: 'title | trim | reverse | slice:2,3'\n})(function(err, obj) {\n  /*\n  {\n    title: 'oi'\n  }\n*/\n})\n```\n\n## Examples\n\n- [selector](/examples/selector/index.js): simple string selector\n- [collections](/examples/collections/index.js): selects an object\n- [arrays](/examples/arrays/index.js): selects an array\n- [collections of collections](/examples/collection-of-collections/index.js): selects an array of objects\n- [array of arrays](/examples/array-of-arrays/index.js): selects an array of arrays\n\n## In the Wild\n\n- [Levered Returns](http://leveredreturns.com): Uses x-ray to pull together financial data from various unstructured sources around the web.\n\n## Resources\n\n- Video: https://egghead.io/lessons/node-js-intro-to-web-scraping-with-node-and-x-ray\n\n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/x-ray#backer)]\n\n<a href=\"https://opencollective.com/x-ray/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/backer/29/avatar.svg\"></a>\n\n## Sponsors\n\nBecome a sponsor and get your logo on our website and on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/x-ray#sponsor)]\n\n<a href=\"https://opencollective.com/x-ray/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/x-ray/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/x-ray/sponsor/29/avatar.svg\"></a>\n\n## License\n\nMIT\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 6.9619140625,
          "content": "'use strict'\n\nvar objectAssign = require('./lib/util').objectAssign\nvar streamToPromise = require('./lib/promisify')\nvar compact = require('./lib/util').compact\nvar isArray = require('./lib/util').isArray\nvar absolutes = require('./lib/absolutes')\nvar streamHelper = require('./lib/stream')\nvar isUrl = require('./lib/util').isUrl\nvar Crawler = require('x-ray-crawler')\nvar resolve = require('./lib/resolve')\nvar root = require('./lib/util').root\nvar params = require('./lib/params')\nvar debug = require('debug')('x-ray')\nvar cheerio = require('cheerio')\nvar enstore = require('enstore')\nvar walk = require('./lib/walk')\nvar fs = require('fs')\n\nvar CONST = {\n  CRAWLER_METHODS: ['concurrency', 'throttle', 'timeout', 'driver', 'delay', 'limit', 'abort'],\n  INIT_STATE: {\n    stream: false,\n    concurrency: Infinity,\n    paginate: false,\n    limit: Infinity,\n    abort: false\n  }\n}\n\nfunction Xray (options) {\n  var crawler = Crawler()\n  options = options || {}\n  var filters = options.filters || {}\n\n  function xray (source, scope, selector) {\n    var args = params(source, scope, selector)\n    selector = args.selector\n    source = args.source\n    scope = args.context\n\n    var state = objectAssign({}, CONST.INIT_STATE)\n    var store = enstore()\n    var pages = []\n    var stream\n\n    var walkHTML = WalkHTML(xray, selector, scope, filters)\n    var request = Request(crawler)\n\n    function node (source2, fn) {\n      if (arguments.length === 1) {\n        fn = source2\n      } else {\n        source = source2\n      }\n\n      debug('params: %j', {\n        source: source,\n        scope: scope,\n        selector: selector\n      })\n\n      if (isUrl(source)) {\n        debug('starting at: %s', source)\n        request(source, function (err, html) {\n          if (err) return next(err)\n          var $ = load(html, source)\n          walkHTML($, next)\n        })\n      } else if (scope && ~scope.indexOf('@')) {\n        debug('resolving to a url: %s', scope)\n        var url = resolve(source, false, scope, filters)\n\n        // ensure that a@href is a URL\n        if (!isUrl(url)) {\n          debug('%s is not a url. Skipping!', url)\n          return walkHTML(load(''), next)\n        }\n\n        debug('resolved \"%s\" to a %s', scope, url)\n        request(url, function (err, html) {\n          if (err) return next(err)\n          var $ = load(html, url)\n          walkHTML($, next)\n        })\n      } else if (source) {\n        var $ = load(source)\n        walkHTML($, next)\n      } else {\n        debug('%s is not a url or html. Skipping!', source)\n        return walkHTML(load(''), next)\n      }\n\n      function next (err, obj, $) {\n        if (err) return fn(err)\n        var paginate = state.paginate\n        var limit = --state.limit\n\n        // create the stream\n        if (!stream) {\n          if (paginate) stream = streamHelper.array(state.stream)\n          else stream = streamHelper.object(state.stream)\n        }\n\n        if (paginate) {\n          if (isArray(obj)) {\n            pages = pages.concat(obj)\n          } else {\n            pages.push(obj)\n          }\n\n          if (limit <= 0) {\n            debug('reached limit, ending')\n            stream(obj, true)\n            return fn(null, pages)\n          }\n\n          var url = resolve($, false, paginate, filters)\n          debug('paginate(%j) => %j', paginate, url)\n\n          if (!isUrl(url)) {\n            debug('%j is not a url, finishing up', url)\n            stream(obj, true)\n            return fn(null, pages)\n          }\n\n          if (state.abort && state.abort(obj, url)) {\n            debug('abort check passed, ending')\n            stream(obj, true)\n            return fn(null, pages)\n          }\n\n          stream(obj)\n\n          // debug\n          debug('paginating %j', url)\n          isFinite(limit) && debug('%s page(s) left to crawl', limit)\n\n          request(url, function (err, html) {\n            if (err) return next(err)\n            var $ = load(html, url)\n            walkHTML($, next)\n          })\n        } else {\n          stream(obj, true)\n          fn(null, obj)\n        }\n      }\n\n      return node\n    }\n\n    node.abort = function (validator) {\n      if (!arguments.length) return state.abort\n      state.abort = validator\n      return node\n    }\n\n    node.paginate = function (paginate) {\n      if (!arguments.length) return state.paginate\n      state.paginate = paginate\n      return node\n    }\n\n    node.limit = function (limit) {\n      if (!arguments.length) return state.limit\n      state.limit = limit\n      return node\n    }\n\n    node.stream = function () {\n      state.stream = store.createWriteStream()\n      var rs = store.createReadStream()\n      streamHelper.waitCb(rs, node)\n      return rs\n    }\n\n    node.write = function (path) {\n      if (!arguments.length) return node.stream()\n      state.stream = fs.createWriteStream(path)\n      streamHelper.waitCb(state.stream, node)\n      return state.stream\n    }\n\n    node.then = function (resHandler, errHandler) {\n      return streamToPromise(node.stream()).then(resHandler, errHandler)\n    }\n\n    return node\n  }\n\n  CONST.CRAWLER_METHODS.forEach(function (method) {\n    xray[method] = function () {\n      if (!arguments.length) return crawler[method]()\n      crawler[method].apply(crawler, arguments)\n      return this\n    }\n  })\n\n  return xray\n}\n\nfunction Request (crawler) {\n  return function request (url, fn) {\n    debug('fetching %s', url)\n    crawler(url, function (err, ctx) {\n      if (err) return fn(err)\n      debug('got response for %s with status code: %s', url, ctx.status)\n      return fn(null, ctx.body)\n    })\n  }\n}\n\nfunction load (html, url) {\n  html = html || ''\n  var $ = html.html ? html : cheerio.load(html, { decodeEntities: false })\n  if (url) $ = absolutes(url, $)\n  return $\n}\n\nfunction WalkHTML (xray, selector, scope, filters) {\n  return function walkHTML ($, fn) {\n    walk(selector, function (v, k, next) {\n      if (typeof v === 'string') {\n        var value = resolve($, root(scope), v, filters)\n        return next(null, value)\n      } else if (typeof v === 'function') {\n        return v($, function (err, obj) {\n          if (err) return next(err)\n          return next(null, obj)\n        })\n      } else if (isArray(v)) {\n        if (typeof v[0] === 'string') {\n          return next(null, resolve($, root(scope), v, filters))\n        } else if (typeof v[0] === 'object') {\n          var $scope = $.find ? $.find(scope) : $(scope)\n          var pending = $scope.length\n          var out = []\n\n          // Handle the empty result set (thanks @jenbennings!)\n          if (!pending) return next(null, out)\n\n          return $scope.each(function (i, el) {\n            var $innerscope = $scope.eq(i)\n            var node = xray(scope, v[0])\n            node($innerscope, function (err, obj) {\n              if (err) return next(err)\n              out[i] = obj\n              if (!--pending) {\n                return next(null, compact(out))\n              }\n            })\n          })\n        }\n      }\n      return next()\n    }, function (err, obj) {\n      if (err) return fn(err)\n      fn(null, obj, $)\n    })\n  }\n}\n\nmodule.exports = Xray\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.5361328125,
          "content": "{\n  \"name\": \"x-ray\",\n  \"description\": \"structure any website\",\n  \"homepage\": \"https://github.com/matthewmueller/x-ray#readme\",\n  \"version\": \"2.3.4\",\n  \"main\": \"index.js\",\n  \"author\": {\n    \"name\": \"Matthew Mueller\",\n    \"email\": \"matt@lapwinglabs.com\"\n  },\n  \"contributors\": [\n   \"Paul Barrett\",\n   \"Kiko Beats <josefrancisco.verdu@gmail.com>\",    \n   \"Fabien Franzen <info@atelierfabien.be>\",\n   \"Wah Loon Keng <kengzwl@gmail.com>\",\n   \"Daniel Lathrop <daniel.lathrop@gmail.com>\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/matthewmueller/x-ray.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/matthewmueller/x-ray/issues\"\n  },\n  \"keywords\": [\n    \"api\",\n    \"cheerio\",\n    \"scrape\",\n    \"scraper\",\n    \"structure\",\n    \"web\"\n  ],\n  \"dependencies\": {\n    \"batch\": \"~0.6.0\",\n    \"bluebird\": \"^3.4.7\",\n    \"chalk\": \"~2.4.0\",\n    \"cheerio\": \"~0.22.0\",\n    \"debug\": \"~4.1.0\",\n    \"enstore\": \"~1.0.1\",\n    \"is-url\": \"~1.2.0\",\n    \"isobject\": \"~4.0.0\",\n    \"object-assign\": \"~4.1.0\",\n    \"stream-to-string\": \"^1.1.0\",\n    \"x-ray-crawler\": \"~2.0.1\",\n    \"x-ray-parse\": \"~1.0.1\"\n  },\n  \"devDependencies\": {\n    \"coveralls\": \"3.0.6\",\n    \"istanbul\": \"0.4.5\",\n    \"mocha\": \"~6.1.4\",\n    \"mocha-lcov-reporter\": \"1.3.0\",\n    \"multiline\": \"1.0.2\",\n    \"rimraf\": \"3.0.0\",\n    \"sinon\": \"^7.3.2\",\n    \"standard\": \"6.0.8\"\n  },\n  \"engines\": {\n    \"node\": \">= 6.0.0\"\n  },\n  \"scripts\": {\n    \"coveralls\": \"./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report lcovonly\",\n    \"pretest\": \"standard\",\n    \"test\": \"mocha\"\n  },\n  \"license\": \"MIT\"\n}\n"
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.0400390625,
          "content": "{\n  \"extends\": [\n    \"config:base\"\n  ]\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}