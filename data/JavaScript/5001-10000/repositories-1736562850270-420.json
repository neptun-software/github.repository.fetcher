{
  "metadata": {
    "timestamp": 1736562850270,
    "page": 420,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vincelwt/chatgpt-mac",
      "stars": 6368,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.1767578125,
          "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n.DS_Store\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# TypeScript v1 declaration files\ntypings/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.test\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n\n# next.js build output\n.next\n\n# nuxt.js build output\n.nuxt\n\n# vuepress build output\n.vuepress/dist\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# Webpack\n.webpack/\n\n# Electron-Forge\nout/\n\n.env"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.837890625,
          "content": "⭐ Building in AI? My new project is an [open-source toolkit for AI devs](https://github.com/llmonitor/llmonitor), a star would mean the world ⭐\n\n---\n\n# ChatGPT for desktop\n\nThis is a simple app that makes ChatGPT live in your menubar.\n\nYou can use Cmd+Shift+G (Mac) or Ctrl+Shift+G (Win) to quickly open it from anywhere.\n\nDownload:\n\n- [Mac Arm64 .dmg](https://github.com/vincelwt/chatgpt-mac/releases/download/v0.0.5/ChatGPT-0.0.5-arm64.dmg)\n- [Mac Intel .dmg](https://github.com/vincelwt/chatgpt-mac/releases/download/v0.0.5/ChatGPT-0.0.5-x64.dmg)\n\nNo Windows binaries currently offered. Clone the repo, npm install electron-forge and run.\n\n<p align=\"center\">\n  <img src=\"./images/screenshot.jpeg\" width=\"500\">\n</p>\n\n## Credit\n\nAll credit and copyrights goes to OpenAI.\n\n## Author\n\nYou can find me on Twitter [@vincelwt](https://twitter.com/vincelwt).\n"
        },
        {
          "name": "forge.config.js",
          "type": "blob",
          "size": 1.1923828125,
          "content": "const { parsed } = require(\"dotenv\").config();\nmodule.exports = {\n  packagerConfig: {\n    name: \"ChatGPT\",\n    executableName: \"ChatGPT\",\n    icon: \"images/icon\",\n    appBundleId: \"com.vincelwt.chatgptmac\",\n    extendInfo: {\n      LSUIElement: \"true\",\n    },\n    osxSign: {\n      hardenedRuntime: false,\n      gatekeeperAssess: false,\n      identity: \"Developer ID Application: Lyser.io Ltd (R4PF6TTR6Z)\",\n    },\n    osxNotarize: {\n      appBundleId: \"com.vincelwt.chatgptmac\",\n\n      tool: \"notarytool\",\n      appleId: parsed.APPLE_ID,\n      appleIdPassword: parsed.APPLE_PASSWORD,\n      teamId: parsed.APPLE_TEAM_ID,\n    },\n  },\n  publishers: [\n    {\n      name: \"@electron-forge/publisher-github\",\n      config: {\n        repository: {\n          owner: \"vincelwt\",\n          name: \"chatgpt-mac\",\n        },\n        prerelease: true,\n      },\n    },\n  ],\n\n  rebuildConfig: {},\n  makers: [\n    {\n      name: \"@electron-forge/maker-squirrel\",\n      config: {},\n    },\n    {\n      name: \"@electron-forge/maker-dmg\",\n      platforms: [\"darwin\"],\n      config: {},\n    },\n    {\n      name: \"@electron-forge/maker-deb\",\n      config: {},\n    },\n    {\n      name: \"@electron-forge/maker-rpm\",\n      config: {},\n    },\n  ],\n};\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.css",
          "type": "blob",
          "size": 1.041015625,
          "content": "body {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica,\n    Arial, sans-serif;\n  padding: 0;\n  margin: 0;\n  overflow: hidden;\n}\n\n:root {\n  /* account for the arrow */\n  --actual-height: calc(100vh - 12px);\n}\n\n.myarrow {\n  position: relative;\n  /* padding-top: 12px; */\n  padding: 12px 0 0 0 ;\n}\n\n.myarrow:before {\n  content: '';\n  height: 0;\n  width: 0;\n  border-width: 0 8px 12px 8px;\n  border-style: solid;\n  border-color: transparent transparent white transparent;\n  position: absolute;\n\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n@media (prefers-color-scheme: dark) {\n  .myarrow:before {\n    border-color: transparent transparent #343541 transparent !important;\n  }\n}\n\n.page {\n  background: #eeeeee;\n  width: 100%;\n  height: 100vh;\n  margin-top: 12px;\n  margin: 0 auto;\n  position: relative;\n}\n\n.darwin.page {\n  border-radius: 8px;\n  overflow: hidden;\n}\n\nwebview {\n  /* overflow: hidden; */\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height:  calc(100vh - 12px);\n  display: inline-flex !important;\n}"
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 1.27734375,
          "content": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>ChatGPT</title>\n    <link rel=\"stylesheet\" href=\"index.css\" />\n  </head>\n  <body class=\"myarrow\">\n    <div class=\"page darwin\">\n    <webview id=\"webview\" src=\"https://chat.openai.com/chat\" autosize=\"on\" >\n   </webview>\n  </div>\n    <script>\n    const webview = document.getElementById('webview');\n    webview.addEventListener('dom-ready', function() {\n\n      // hide message below text input, sidebar, suggestions on new chat\n      webview.insertCSS(`\n        .text-xs.text-center {\n          opacity: 0;\n          height: 0;\n          margin-bottom: -10px;\n        }\n        \n        .sticky,\n        .pointer-events-auto.flex.border-orange-500,\n        [class*=\"shared__Capabilities\"] {\n          display: none !important;\n        }\n\n        [class*=\"shared__Wrapper\"] {\n          align-items: center;\n          justify-content: center;\n          text-align: center;\n          margin-top: 15vh;\n        }\n\n        [class*=\"shared__Wrapper\"] h3 {\n          margin-top: -40px;\n          font-size: 20px;\n        }\n      `)\n\n      const element = webview.executeJavaScript(`\n        document.querySelector(\"[class*='shared__Wrapper']\").innerHTML += \"<h3>Start by asking anything.</h3>\"\n      `);\n    });\n\n    </script>\n  </body>\n</html>\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 4.38671875,
          "content": "require(\"update-electron-app\")();\n\nconst { menubar } = require(\"menubar\");\nconst Nucleus = require(\"nucleus-analytics\");\n\nconst path = require(\"path\");\nconst {\n  app,\n  nativeImage,\n  Tray,\n  Menu,\n  globalShortcut,\n  shell,\n} = require(\"electron\");\nconst contextMenu = require(\"electron-context-menu\");\n\nconst image = nativeImage.createFromPath(\n  path.join(__dirname, `images/newiconTemplate.png`)\n);\n\napp.on(\"ready\", () => {\n  Nucleus.init(\"638d9ccf4a5ed2dae43ce122\");\n\n  const tray = new Tray(image);\n\n  const mb = menubar({\n    browserWindow: {\n      icon: image,\n      transparent: path.join(__dirname, `images/iconApp.png`),\n      webPreferences: {\n        webviewTag: true,\n        // nativeWindowOpen: true,\n      },\n      width: 450,\n      height: 550,\n    },\n    tray,\n    showOnAllWorkspaces: true,\n    preloadWindow: true,\n    showDockIcon: false,\n    icon: image,\n  });\n\n  mb.on(\"ready\", () => {\n    const { window } = mb;\n\n\n    if (process.platform !== \"darwin\") {\n      window.setSkipTaskbar(true);\n    } else {\n      app.dock.hide();\n    }\n\n    const contextMenuTemplate = [\n      // add links to github repo and vince's twitter\n      {\n        label: \"Quit\",\n        accelerator: \"Command+Q\",\n        click: () => {\n          app.quit();\n        },\n      },\n      {\n        label: \"Reload\",\n        accelerator: \"Command+R\",\n        click: () => {\n          window.reload();\n        },\n      },\n      {\n        label: \"Open in browser\",\n        click: () => {\n          shell.openExternal(\"https://chat.openai.com/chat\");\n        },\n      },\n      {\n        type: \"separator\",\n      },\n      {\n        label: \"View on GitHub\",\n        click: () => {\n          shell.openExternal(\"https://github.com/vincelwt/chatgpt-mac\");\n        },\n      },\n      {\n        label: \"Author on Twitter\",\n        click: () => {\n          shell.openExternal(\"https://twitter.com/vincelwt\");\n        },\n      },\n    ];\n\n    tray.on(\"right-click\", () => {\n      mb.tray.popUpContextMenu(Menu.buildFromTemplate(contextMenuTemplate));\n    });\n\n    tray.on(\"click\", (e) => {\n      //check if ctrl or meta key is pressed while clicking\n      e.ctrlKey || e.metaKey\n        ? mb.tray.popUpContextMenu(Menu.buildFromTemplate(contextMenuTemplate))\n        : null;\n    });\n    const menu = new Menu();\n\n    globalShortcut.register(\"CommandOrControl+Shift+g\", () => {\n      if (window.isVisible()) {\n        mb.hideWindow();\n      } else {\n        mb.showWindow();\n        if (process.platform == \"darwin\") {\n          mb.app.show();\n        }\n        mb.app.focus();\n      }\n    });\n\n    Menu.setApplicationMenu(menu);\n\n    // open devtools\n    // window.webContents.openDevTools();\n\n    console.log(\"Menubar app is ready.\");\n  });\n\n  app.on(\"web-contents-created\", (e, contents) => {\n    if (contents.getType() == \"webview\") {\n      // open link with external browser in webview\n      contents.on(\"new-window\", (e, url) => {\n        e.preventDefault();\n        shell.openExternal(url);\n      });\n      // set context menu in webview\n      contextMenu({\n        window: contents,\n      });\n\n      // we can't set the native app menu with \"menubar\" so need to manually register these events\n      // register cmd+c/cmd+v events\n      contents.on(\"before-input-event\", (event, input) => {\n        const { control, meta, key } = input;\n        if (!control && !meta) return;\n        if (key === \"c\") contents.copy();\n        if (key === \"v\") contents.paste();\n        if (key === \"a\") contents.selectAll();\n        if (key === \"z\") contents.undo();\n        if (key === \"y\") contents.redo();\n        if (key === \"q\") app.quit();\n        if (key === \"r\") contents.reload();\n      });\n    }\n  });\n\n  if (process.platform == \"darwin\") {\n    // restore focus to previous app on hiding\n    mb.on(\"after-hide\", () => {\n      mb.app.hide();\n    });\n  }\n\n  // open links in new window\n  // app.on(\"web-contents-created\", (event, contents) => {\n  //   contents.on(\"will-navigate\", (event, navigationUrl) => {\n  //     event.preventDefault();\n  //     shell.openExternal(navigationUrl);\n  //   });\n  // });\n\n  // prevent background flickering\n  app.commandLine.appendSwitch(\n    \"disable-backgrounding-occluded-windows\",\n    \"true\"\n  );\n});\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n});\n"
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.2294921875,
          "content": "{\n  \"name\": \"chatgpt-mac\",\n  \"productName\": \"chatgpt-mac\",\n  \"version\": \"0.0.5\",\n  \"description\": \"Menubar app for ChatGPT\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"electron-forge start\",\n    \"package\": \"electron-forge package --arch arm64,x64\",\n    \"make\": \" electron-forge make --arch arm64,x64\",\n    \"publish\": \"electron-forge publish --arch arm64,x64\",\n    \"lint\": \"echo \\\"No linting configured\\\"\"\n  },\n  \"keywords\": [\n    \"chatgpt\",\n    \"openai\",\n    \"mac\"\n  ],\n  \"author\": {\n    \"name\": \"Vince Loewe\",\n    \"email\": \"vince@lyser.io\"\n  },\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"electron-context-menu\": \"^3.6.0\",\n    \"menubar\": \"^9.2.3\",\n    \"nucleus-analytics\": \"^4.0.3\",\n    \"update-electron-app\": \"^2.0.1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/vincelwt/chatgpt-mac\"\n  },\n  \"devDependencies\": {\n    \"@electron-forge/cli\": \"^6.0.4\",\n    \"@electron-forge/maker-deb\": \"^6.0.4\",\n    \"@electron-forge/maker-dmg\": \"^6.0.4\",\n    \"@electron-forge/maker-rpm\": \"^6.0.4\",\n    \"@electron-forge/maker-squirrel\": \"^6.0.4\",\n    \"@electron-forge/maker-zip\": \"^6.0.4\",\n    \"@electron-forge/publisher-github\": \"^6.0.4\",\n    \"dotenv\": \"^16.0.3\",\n    \"electron\": \"^21.0.0\",\n    \"electron-squirrel-startup\": \"^1.0.0\"\n  }\n}\n"
        }
      ]
    }
  ]
}