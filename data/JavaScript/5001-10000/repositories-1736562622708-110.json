{
  "metadata": {
    "timestamp": 1736562622708,
    "page": 110,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chvin/react-tetris",
      "stars": 8456,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".babelrc",
          "type": "blob",
          "size": 0.0361328125,
          "content": "{\n  \"presets\": [\"react\", \"es2015\"]\n}\n"
        },
        {
          "name": ".eslintrc.js",
          "type": "blob",
          "size": 0.4013671875,
          "content": "module.exports = {\n    \"extends\": \"airbnb\",\n    \"installedESLint\": true,\n    \"plugins\": [\n        \"react\"\n    ],\n    \"rules\": {\n        \"react/jsx-filename-extension\": [2, { extensions: ['.js','.jsx'] }],\n        \"func-names\": [0],\n        \"new-cap\": [2, { newIsCap: true ,capIsNew: true, capIsNewExceptions: ['List', 'Map']}],\n        \"linebreak-style\": [0]\n    },\n    \"env\": {\n        \"browser\": true\n    }\n};"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.767578125,
          "content": "### Node template\n# Logs\nlogs\n*.log\nnpm-debug.log*\n.DS_Store\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules\njspm_packages\n\n# Optional npm cache directory\n.npm\n\n# Optional REPL history\n.node_repl_history\n\n# Created by .ignore support plugin (hsz.mobi)\n.idea\n.idea/workspace.xml\n.idea/encodings.xml\n.idea/jsLibraryMappings.xml\n.idea/misc.xml\n.idea/modules.xml\n.idea/react-tetris.iml\n.idea/vcs.xml\n.idea/watcherTasks.xml"
        },
        {
          "name": "README-EN.md",
          "type": "blob",
          "size": 13.455078125,
          "content": "### 中文介绍\n请查看 [README.md](https://github.com/chvin/react-tetris/blob/master/README.md)\n\n----\n## Use React, Redux, Immutable to code Tetris.\n\n----\nTetris is a classic game that has always been enthusiastically implemented in various languages. There are many versions of it in Javascript, and using React to do Tetris has become my goal.\n\nOpen [https://chvin.github.io/react-tetris/?lan=en](https://chvin.github.io/react-tetris/?lan=en) to play!\n\n----\n### Interface preview\n![Interface review](https://img.alicdn.com/tps/TB1Ag7CNXXXXXaoXXXXXXXXXXXX-320-483.gif)\n\nThis is the normal speed of recording, you can see it has a smooth experience.\n\n### Responsive\n![Responsive](https://img.alicdn.com/tps/TB1AdjZNXXXXXcCapXXXXXXXXXX-480-343.gif)\n\nNot only refers to the screen adaptation, `but the change of input depending on your platform, use of the keyboard in the PC and in the phone using the touch as input`:\n\n![phone](https://img.alicdn.com/tps/TB1kvJyOVXXXXbhaFXXXXXXXXXX-320-555.gif)\n\n### Data persistence\n![Data persistence](https://img.alicdn.com/tps/TB1EY7cNXXXXXXraXXXXXXXXXXX-320-399.gif)\n\nWhat's the worst can happen when you're playing stand-alone games? Power outage. The state is stored in the `localStorage` by subscribing to `store.subscribe`, which records exactly all the state. Web page refreshes, the program crashes, the phone is dead, just re-open the connection and you can continue playing.\n\n### Redux state preview ([Redux DevTools extension](https://github.com/zalmoxisus/redux-devtools-extension))\n![Redux state preview](https://img.alicdn.com/tps/TB1hGQqNXXXXXX3XFXXXXXXXXXX-640-381.gif)\n\nRedux manages all the state that should be stored, which is a guarantee to be persisted as mentioned above.\n\n----\nThe Game framework is the use of [React](https://facebook.github.io/react/) + [Redux](http://redux.js.org/), together with [Immutable.js](https://facebook.github.io/immutable-js/).\n\n## 1. What is Immutable.js?\nImmutable is data that can not be changed once it is created. Any modification or addition to or deletion of an Immutable object returns a new Immutable object.\n\n### Acquaintance：\nLet's look at the following code:\n``` JavaScript\nfunction keyLog(touchFn) {\n  let data = { key: 'value' };\n  f(data);\n  console.log(data.key); // Guess what will be printed?\n}\n```\nIf we do not look at `f`, and do not know what it did to `data`, we can not confirm what will be printed. But if `data` is *Immutable*, you can be sure that `data` haven't changed and `value` is printed:\n``` JavaScript\nfunction keyLog(touchFn) {\n  let data = Immutable.Map({ key: 'value' });\n  f(data);\n  console.log(data.get('key'));  // value\n}\n```\n\nJavaScript uses a reference assignment, meaning that the new object simply refers to the original object, changing the new will also affect the old:\n``` JavaScript\nfoo = {a: 1};  bar = foo;  bar.a = 2;\nfoo.a // 2\n```\nAlthough this can save memory, when the application is complex, it can result in the state not being controllable, posing a big risk. The advantages of saving memory, in this case, become more harm than good.\n\nWith Immutable.js the same doesn't happen:\n``` JavaScript\nfoo = Immutable.Map({ a: 1 });  bar = foo.set('a', 2);\nfoo.get('a') // 1\n```\n\n### Concise：\nIn `Redux`, it's a good practice to return a new object (array) to each `reducer`, so we often see code like this:\n``` JavaScript\n// reducer\n...\nreturn [\n   ...oldArr.slice(0, 3),\n   newValue,\n   ...oldArr.slice(4)\n];\n```\nIn order modify one item in the array and return the new object (array), the code has this strange appearance above, and it becomes worse the deeper the data structure.\nLet's take a look at Immutable.js's approach:\n``` JavaScript\n// reducer\n...\nreturn oldArr.set(4, newValue);\n```\nIsn't it simpler?\n\n### About “===”：\nWe know that ```===``` operator for the `Object` and `Array` compares the reference to the address of the object rather than its \"value comparison\", such as:\n``` JavaScript\n{a:1, b:2, c:3} === {a:1, b:2, c:3}; // false\n[1, 2, [3, 4]] === [1, 2, [3, 4]]; // false\n```\n\nTo achieve the above we could only `deepCopy` and `deepCompare` to traverse the objects, but this is not only cumbersome it also harms performance.\n\nLet's check `Immutable.js` approach!\n``` JavaScript\nmap1 = Immutable.Map({a:1, b:2, c:3});\nmap2 = Immutable.Map({a:1, b:2, c:3});\nImmutable.is(map1, map2); // true\n\n// List1 = Immutable.List([1, 2, Immutable.List[3, 4]]);\nList1 = Immutable.fromJS([1, 2, [3, 4]]);\nList2 = Immutable.fromJS([1, 2, [3, 4]]);\nImmutable.is(List1, List2); // true\n```\nIt's smooth like a breeze blowing.\n\nReact has a big trick when it comes to performance tuning. It uses `shouldComponentUpdate()` to check (as the name says) if the component should be re-rendered, it returns `true` by default, which always executes the `render()` method followed by the Virtual DOM comparison.\n\nIf we don't return a new object when making state updates, we would have to use `deepCopy` and `deepCompare` to calculate if the new state is equal to the previous one, the consumption of the performance is not worth it. With Immutable.js, it's easy to compare deep structures using the method above.\n\nFor Tetris, imagine that the board is a `two-dimensional array`. The square that can be moved is `shape (also a two-dimensional array) + coordinates`. The superposition of the board and the box is composed of the final result of `Matrix`. The properties above are built by `Immutable.js`, through its comparison method, you can easily write `shouldComponentUpdate`. Source Code:[/src/components/matrix/index.js#L35](https://github.com/chvin/react-tetris/blob/master/src/components/matrix/index.js#L35)\n\nImmutable learning materials:\n* [Immutable.js](http://facebook.github.io/immutable-js/)\n* [Immutable Detailed and React in practice](https://github.com/camsong/blog/issues/3)\n\n\n----\n## 2. How to use Immutable.js in Redux\nGoal: `state` -> Immutable.\nImportant plug-ins: [gajus/redux-immutable](https://github.com/gajus/redux-immutable)\nWill be provided by the original Redux combineReducers provided by the above plug-ins:\n``` JavaScript\n// rootReducers.js\n// import { combineReducers } from 'redux'; // The old method\nimport { combineReducers } from 'redux-immutable'; // The new method\n\nimport prop1 from './prop1';\nimport prop2 from './prop2';\nimport prop3 from './prop3';\n\nconst rootReducer = combineReducers({\n  prop1, prop2, prop3,\n});\n\n\n// store.js\n// Create a store method and the same general\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\nexport default store;\n```\nThrough the new `combineReducers` the store object will be stored as an Immutable.js object, the container will be slightly different, but this is what we want:\n``` JavaScript\nconst mapStateToProps = (state) => ({\n  prop1: state.get('prop1'),\n  prop2: state.get('prop2'),\n  prop3: state.get('prop3'),\n  next: state.get('next'),\n});\nexport default connect(mapStateToProps)(App);\n```\n\n\n----\n## 3. Web Audio Api\nThere are many different sound effects in the game, but in fact we keep only a reference to a sound file: [/build/music.mp3](https://github.com/chvin/react-tetris/blob/master/build/music.mp3). With the help of `Web Audio Api`, you can play audio in millisecond precision, with a high frequency, which is not possible with the `<audio>` tag. Press the arrow keys to move the box while the game is in progress, you can hear high-frequency sound.\n\n![Web audio advanced](https://img.alicdn.com/tps/TB1fYgzNXXXXXXnXpXXXXXXXXXX-633-358.png)\n\n`WAA` is a new set of relatively independent interface system, the audio file has a higher processing power and more professional built-in audio effects, is the W3C recommended interface, can deal with professional \"sound speed, volume, environment, sound visualization, High-frequency, sound to \" and other needs. The following figure describes the use of WAA process.\n\n![Process](https://img.alicdn.com/tps/TB1nBf1NXXXXXagapXXXXXXXXXX-520-371.png)\n\nWhere `Source` represents an audio source, `Destination` represents the final output. Multiple Sources compose the Destination.\nSource Code:[/src/unit/music.js](https://github.com/chvin/react-tetris/blob/master/src/unit/music.js). To achieve ajax loading mp3, and to WAA, control the playback process.\n\n`WAA` is supported in the latest 2 versions of each browser([CanIUse](http://caniuse.com/#search=webaudio))\n\n![browser compatibility](https://img.alicdn.com/tps/TB15z4VOVXXXXahaXXXXXXXXXXX-679-133.png)\n\nIE and Android lack support though.\n\nWeb Audio Api learning materials:\n* [Web audio concepts and usage| MDN](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API)\n* [Getting Started with Web Audio API](http://www.html5rocks.com/en/tutorials/webaudio/intro/)\n\n\n----\n## 4. Game on the experience of optimization\n* Experience:\n\t* Press the arrow keys to move vertically and horizontally. The trigger frequency is different, the game can define the trigger frequency, instead of the original event frequency, the source code:[/src/unit/event.js](https://github.com/chvin/react-tetris/blob/master/src/unit/event.js) ;\n\t* Left and right to move the delay can drop the speed, but when moving in the wall smaller delay; in the speed of 6 through the delay will ensure a complete horizontal movement in a row;\n\t* The `touchstart` and `mousedown` events are also registered for the button for responsive games. When `touchstart` occurs, `mousedown` is not triggered, and when `mousedown` occurs, the `mouseup` simulator `mouseup` will also be listened to as `mouseup`, since the mouse-removed event element can not fire. Source Code:[/src/components/keyboard/index.js](https://github.com/chvin/react-tetris/blob/master/src/components/keyboard/index.js);\n\t* The `visibilitychange` event, when the page is hidden\\switch, the game will not proceed, switch back and it will continue, the `focus` state has also been written into the Redux. So when playing with the phone and the phone has a `call`, the progress of the game will be saved; PC open the game do not hear any other gameover, which is a bit like `ios` application switch;\n\t* In the game `any` time you refresh the page, (such as the closing the tab or the end of the game) can restore the current state;\n\t* The only pictures used in the game are ![image](https://img.alicdn.com/tps/TB1qq7kNXXXXXacXFXXXXXXXXXX-400-186.png), all the rest is CSS;\n\t* Game compatible with Chrome, Firefox, IE9 +, Edge, etc .;\n* Rules：\n\t* You can specify the initial board (ten levels) and speed (six levels) before the start of the game;\n\t* 100 points for 1 line, 300 points for 2 lines, 700 points for 3 lines, 1500 points for 4 lines;\n\t* The drop speed of the box increases with the number of rows eliminated (one level for every 20 lines);\n\n\n----\n## 5. Experience in Development\n* `shouldComponentUpdate` is written for all react components, which on the phone causes a significant performance improvement. For Large and medium-sized applications when facing performance problems, try writing your own  `shouldComponentUpdate`, it will most probably help you.\n* `Stateless Functional Components`([Stateless Functional Components](https://medium.com/@joshblack/stateless-components-in-react-0-14-f9798f8b992d#.xjqnbfx4e)) has no lifecycle hooks. And because all components need to write the life cycle hook `shouldComponentUpdate`, they are not used.\n* In the `webpack.config.js` `devServer` attribute is written `host: '0.0.0.0'`, but you can be use in the development any other ip, not limited to localhost;\n* Redux in the `store` not only connect to the method passed to `container`, you can jump out of the component, in other documents out to do flow control (dispatch), the source code:[/src/control/states.js](https://github.com/chvin/react-tetris/blob/master/src/control/states.js)；\n* Dealing with persistence in React + Redux is very convenient, as long as the redux state of storage, reducers do read in each of the initialization time.\n* By configuring `.eslintrc.js` and `webpack.config.js`, the `ESLint` test is integrated in the project. Using ESLint allows coding to be written to specifications, effectively controlling code quality. Code that does not conform to the specifications can be found through the IDE and the console at development time (or build time). reference:[Airbnb React/JSX Style Guide](https://github.com/airbnb/javascript/tree/master/react)；\n\n\n----\n## 6. Summary\n* As a React hand application, in the realization of the process found a small \"box\" or a lot of details can be optimized and polished, this time is a test of a front-end engineers and the skill of the time carefully.\n* Optimization of the direction of both React itself, such as what state is stored by the Redux, which states to the state of the component like; and out of the framework of the product can have a lot of features to play, in order to meet your needs, these will be natural propulsion technology development of.\n* An application from scratch, the function slowly accumulate bit by bit, it will build into a high-rise, do not fear it difficult to have the idea to knock on it. ^_^\n\n\n----\n## 7. Flowchart\n![Flowchart](https://img.alicdn.com/tfs/TB1B6ODRXXXXXXHaFXXXXXXXXXX-1920-1080.png)\n\n----\n## 8. Development\n### Install\n```\nnpm install\n```\n### Run\n```\nnpm start\n```\nThe browser will go to [http://127.0.0.1:8080/](http://127.0.0.1:8080/)\n### multi-language\nIn the [i18n.json](https://github.com/chvin/react-tetris/blob/master/i18n.json) is the configuration for the multi-language environment. You can change the language by passing the url parameter `lan` like this: `https://chvin.github.io/react-tetris/?lan=en`\n### Build\n```\nnpm run build\n```\n\nWill build the application in the build folder.\n\n\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.0654296875,
          "content": "### English introduction\nPlease view [README-EN.md](https://github.com/chvin/react-tetris/blob/master/README-EN.md)\n\n----\n## 用React、Redux、Immutable做俄罗斯方块\n\n----\n俄罗斯方块是一直各类程序语言热衷实现的经典游戏，JavaScript的实现版本也有很多，用React 做好俄罗斯方块则成了我一个目标。\n\n戳：[https://chvin.github.io/react-tetris/](https://chvin.github.io/react-tetris/) 玩一玩！\n\n----\n### 效果预览\n![效果预览](https://img.alicdn.com/tps/TB1Ag7CNXXXXXaoXXXXXXXXXXXX-320-483.gif)\n\n正常速度的录制，体验流畅。\n\n### 响应式\n![响应式](https://img.alicdn.com/tps/TB1AdjZNXXXXXcCapXXXXXXXXXX-480-343.gif)\n\n不仅指屏幕的自适应，而是`在PC使用键盘、在手机使用手指的响应式操作`：\n\n![手机](https://img.alicdn.com/tps/TB1kvJyOVXXXXbhaFXXXXXXXXXX-320-555.gif)\n\n### 数据持久化\n![数据持久化](https://img.alicdn.com/tps/TB1EY7cNXXXXXXraXXXXXXXXXXX-320-399.gif)\n\n玩单机游戏最怕什么？断电。通过订阅 `store.subscribe`，将state储存在localStorage，精确记录所有状态。网页关了刷新了、程序崩溃了、手机没电了，重新打开连接，都可以继续。\n\n### Redux 状态预览（[Redux DevTools extension](https://github.com/zalmoxisus/redux-devtools-extension)）\n![Redux状态预览](https://img.alicdn.com/tps/TB1hGQqNXXXXXX3XFXXXXXXXXXX-640-381.gif)\n\nRedux设计管理了所有应存的状态，这是上面持久化的保证。\n\n----\n游戏框架使用的是 React + Redux，其中再加入了 Immutable，用它的实例来做来Redux的state。（有关React和Redux的介绍可以看：[React入门实例](http://www.ruanyifeng.com/blog/2015/03/react.html)、[Redux中文文档](https://camsong.github.io/redux-in-chinese/index.html)）\n\n## 1、什么是 Immutable？\nImmutable 是一旦创建，就不能再被更改的数据。对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象。\n\n### 初识：\n让我们看下面一段代码：\n``` JavaScript\nfunction keyLog(touchFn) {\n  let data = { key: 'value' };\n  f(data);\n  console.log(data.key); // 猜猜会打印什么？\n}\n```\n不查看f，不知道它对 `data` 做了什么，无法确认会打印什么。但如果 `data` 是 Immutable，你可以确定打印的是 `value`：\n``` JavaScript\nfunction keyLog(touchFn) {\n  let data = Immutable.Map({ key: 'value' });\n  f(data);\n  console.log(data.get('key'));  // value\n}\n```\n\nJavaScript 中的`Object`与`Array`等使用的是引用赋值，新的对象简单的引用了原始对象，改变新也将影响旧的：\n``` JavaScript\nfoo = {a: 1};  bar = foo;  bar.a = 2;\nfoo.a // 2\n```\n虽然这样做可以节约内存，但当应用复杂后，造成了状态不可控，是很大的隐患，节约的内存优点变得得不偿失。\n\nImmutable则不一样，相应的：\n``` JavaScript\nfoo = Immutable.Map({ a: 1 });  bar = foo.set('a', 2);\nfoo.get('a') // 1\n```\n\n### 简洁：\n在`Redux`中，它的最优做法是每个`reducer`都返回一个新的对象（数组），所以我们常常会看到这样的代码：\n``` JavaScript\n// reducer\n...\nreturn [\n   ...oldArr.slice(0, 3),\n   newValue,\n   ...oldArr.slice(4)\n];\n```\n为了返回新的对象（数组），不得不有上面奇怪的样子，而在使用更深的数据结构时会变的更棘手。\n让我们看看Immutable的做法：\n``` JavaScript\n// reducer\n...\nreturn oldArr.set(4, newValue);\n```\n是不是很简洁？\n\n### 关于 “===”：\n我们知道对于`Object`与`Array`的`===`比较，是对引用地址的比较而不是“值比较”，如：\n``` JavaScript\n{a:1, b:2, c:3} === {a:1, b:2, c:3}; // false\n[1, 2, [3, 4]] === [1, 2, [3, 4]]; // false\n```\n对于上面只能采用 `deepCopy`、`deepCompare`来遍历比较，不仅麻烦且好性能。\n\n我们感受来一下`Immutable`的做法！\n``` JavaScript\nmap1 = Immutable.Map({a:1, b:2, c:3});\nmap2 = Immutable.Map({a:1, b:2, c:3});\nImmutable.is(map1, map2); // true\n\n// List1 = Immutable.List([1, 2, Immutable.List[3, 4]]);\nList1 = Immutable.fromJS([1, 2, [3, 4]]);\nList2 = Immutable.fromJS([1, 2, [3, 4]]);\nImmutable.is(List1, List2); // true\n```\n似乎有阵清风吹过。\n\nReact 做性能优化时有一个`大招`，就是使用 `shouldComponentUpdate()`，但它默认返回 `true`，即始终会执行 `render()` 方法，后面做 Virtual DOM 比较。\n\n在使用原生属性时，为了得出shouldComponentUpdate正确的`true` or `false`，不得不用deepCopy、deepCompare来算出答案，消耗的性能很不划算。而在有了Immutable之后，使用上面的方法对深层结构的比较就变的易如反掌。\n\n对于「俄罗斯方块」，试想棋盘是一个`二维数组`，可以移动的方块则是`形状(也是二维数组)`+`坐标`。棋盘与方块的叠加则组成了最后的结果`Matrix`。游戏中上面的属性都由`Immutable`构建，通过它的比较方法，可以轻松写好`shouldComponentUpdate`。源代码：[/src/components/matrix/index.js#L35](https://github.com/chvin/react-tetris/blob/master/src/components/matrix/index.js#L35)\n\nImmutable学习资料：\n* [Immutable.js](http://facebook.github.io/immutable-js/)\n* [Immutable 详解及 React 中实践](https://github.com/camsong/blog/issues/3)\n\n\n----\n## 2、如何在Redux中使用Immutable\n目标：将`state` -> Immutable化。\n关键的库：[gajus/redux-immutable](https://github.com/gajus/redux-immutable)\n将原来 Redux提供的combineReducers改由上面的库提供：\n``` JavaScript\n// rootReducers.js\n// import { combineReducers } from 'redux'; // 旧的方法\nimport { combineReducers } from 'redux-immutable'; // 新的方法\n\nimport prop1 from './prop1';\nimport prop2 from './prop2';\nimport prop3 from './prop3';\n\nconst rootReducer = combineReducers({\n  prop1, prop2, prop3,\n});\n\n\n// store.js\n// 创建store的方法和常规一样\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\nexport default store;\n```\n通过新的`combineReducers`将把store对象转化成Immutable，在container中使用时也会略有不同（但这正是我们想要的）：\n\n``` JavaScript\nconst mapStateToProps = (state) => ({\n  prop1: state.get('prop1'),\n  prop2: state.get('prop2'),\n  prop3: state.get('prop3'),\n  next: state.get('next'),\n});\nexport default connect(mapStateToProps)(App);\n```\n\n----\n## 3、Web Audio Api\n游戏里有很多不同的音效，而实际上只引用了一个音效文件：[/build/music.mp3](https://github.com/chvin/react-tetris/blob/master/build/music.mp3)。借助`Web Audio Api`能够以毫秒级精确、高频率的播放音效，这是`<audio>`标签所做不到的。在游戏进行中按住方向键移动方块，便可以听到高频率的音效。\n\n![网页音效进阶](https://img.alicdn.com/tps/TB1fYgzNXXXXXXnXpXXXXXXXXXX-633-358.png)\n\n`WAA` 是一套全新的相对独立的接口系统，对音频文件拥有更高的处理权限以及更专业的内置音频效果，是W3C的推荐接口，能专业处理“音速、音量、环境、音色可视化、高频、音向”等需求，下图介绍了WAA的使用流程。\n\n![流程](https://img.alicdn.com/tps/TB1nBf1NXXXXXagapXXXXXXXXXX-520-371.png)\n\n其中Source代表一个音频源，Destination代表最终的输出，多个Source合成出了Destination。\n源代码：[/src/unit/music.js](https://github.com/chvin/react-tetris/blob/master/src/unit/music.js) 实现了ajax加载mp3，并转为WAA，控制播放的过程。\n\n`WAA` 在各个浏览器的最新2个版本下的支持情况（[CanIUse](http://caniuse.com/#search=webaudio)）\n\n![浏览器兼容](https://img.alicdn.com/tps/TB15z4VOVXXXXahaXXXXXXXXXXX-679-133.png)\n\n可以看到IE阵营与大部分安卓机不能使用，其他ok。\n\n\nWeb Audio Api 学习资料：\n* [Web API 接口| MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Audio_API)\n* [Getting Started with Web Audio API](http://www.html5rocks.com/en/tutorials/webaudio/intro/)\n\n----\n## 4、游戏在体验上的优化\n* 技术：\n\t* 按下方向键水平移动和竖直移动的触发频率是不同的，游戏可以定义触发频率，代替原生的事件频率，源代码：[/src/unit/event.js](https://github.com/chvin/react-tetris/blob/master/src/unit/event.js) ；\n\t* 左右移动可以 delay 掉落的速度，但在撞墙移动的时候 delay 的稍小；在速度为6级时 通过delay 会保证在一行内水平完整移动一次；\n\t* 对按钮同时注册`touchstart`和`mousedown`事件，以供响应式游戏。当`touchstart`发生时，不会触发`mousedown`，而当`mousedown`发生时，由于鼠标移开事件元素可以不触发`mouseup`，将同时监听`mouseout` 模拟 `mouseup`。源代码：[/src/components/keyboard/index.js](https://github.com/chvin/react-tetris/blob/master/src/components/keyboard/index.js)；\n\t* 监听了 `visibilitychange` 事件，当页面被隐藏\\切换的时候，游戏将不会进行，切换回来将继续，这个`focus`状态也被写进了Redux中。所以当用手机玩来`电话`时，游戏进度将保存；PC开着游戏干别的也不会听到gameover，这有点像 `ios` 应用的切换。\n\t* 在`任意`时刻刷新网页，（比如消除方块时、游戏结束时）也能还原当前状态；\n\t* 游戏中唯一用到的图片是![image](https://img.alicdn.com/tps/TB1qq7kNXXXXXacXFXXXXXXXXXX-400-186.png)，其他都是CSS；\n\t* 游戏兼容 Chrome、Firefox、IE9+、Edge等；\n* 玩法：\n\t* 可以在游戏未开始时制定初始的棋盘（十个级别）和速度（六个级别）；\n\t* 一次消除1行得100分、2行得300分、3行得700分、4行得1500分；\n\t* 方块掉落速度会随着消除的行数增加（每20行增加一个级别）；\n\n----\n## 5、开发中的经验梳理\n* 为所有的`component`都编写了`shouldComponentUpdate`，在手机上的性能相对有显著的提升。中大型应用在遇到性能上的问题的时候，写好shouldComponentUpdate 一定会帮你一把。\n* `无状态组件`（[Stateless Functional Components](https://medium.com/@joshblack/stateless-components-in-react-0-14-f9798f8b992d#.xjqnbfx4e)）是没有生命周期的。而因为上条因素，所有组件都需要生命周期 shouldComponentUpdate，所以未使用无状态组件。\n* 在 `webpack.config.js` 中的 devServer属性写入`host: '0.0.0.0'`，可以在开发时用ip访问，不局限在localhost；\n* redux中的`store`并非只能通过connect将方法传递给`container`，可以跳出组件，在别的文件拿出来做流程控制(dispatch)，源代码：[/src/control/states.js](https://github.com/chvin/react-tetris/blob/master/src/control/states.js)；\n* 用 react+redux 做持久化非常的方便，只要将redux状态储存，在每一个reduers做初始化的时候读取就好。\n* 通过配置 .eslintrc.js` 与 webpack.config.js` ，项目中集成了 `ESLint` 检验。使用 ESLint 可以使编码按规范编写，有效地控制代码质量。不符规范的代码在开发时（或build时）都能通过IDE与控制台发现错误。 参考：[Airbnb: React使用规范](https://github.com/dwqs/react-style-guide)；\n\n----\n## 6、总结\n* 作为一个 React 的练手应用，在实现的过程中发现小小的“方块”还是有很多的细节可以优化和打磨，这时就是考验一名前端工程师的细心和功力的时候。\n* 优化的方向既有 React 的本身，比如哪些状态由 Redux存，哪些状态给组件的state就好；而跳出框架又有产品的很多特点可以玩，为了达到你的需求，这些都将自然的推进技术的发展。\n* 一个项目从零开始，功能一点一滴慢慢累积，就会盖成高楼，不要畏难，有想法就敲起来吧。 ^_^\n\n----\n## 7、控制流程\n![控制流程](https://img.alicdn.com/tfs/TB1B6ODRXXXXXXHaFXXXXXXXXXX-1920-1080.png)\n\n----\n## 8、开发\n### 安装\n```\nnpm install\n```\n### 运行\n```\nnpm start\n```\n浏览自动打开 [http://127.0.0.1:8080/](http://127.0.0.1:8080/)\n### 多语言\n在 [i18n.json](https://github.com/chvin/react-tetris/blob/master/i18n.json) 配置多语言环境，使用\"lan\"参数匹配语言如：`https://chvin.github.io/react-tetris/?lan=en`\n### 打包编译\n```\nnpm run build\n```\n\n在build文件夹下生成结果。\n\n\n\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "i18n.json",
          "type": "blob",
          "size": 2.45703125,
          "content": "{\n  \"lan\": [\"cn\", \"en\", \"fr\", \"fa\"],\n  \"default\": \"cn\",\n  \"data\": {\n    \"title\": {\n      \"cn\": \"俄罗斯方块\",\n      \"en\": \"T E T R I S\",\n      \"fr\": \"T E T R I S\",\n      \"fa\": \"خانه سازی\"\n    },\n    \"github\": {\n      \"cn\": \"GitHub\",\n      \"en\": \"GitHub\",\n      \"fr\": \"GitHub\",\n      \"fa\": \"گیت‌هاب\"\n    },\n    \"linkTitle\": {\n      \"cn\": \"查看源代码\",\n      \"en\": \"View data source\",\n      \"fr\": \"Afficher la source des données\",\n      \"fa\": \"مشاهده سورس پروژه\"\n    },\n    \"QRCode\":{\n      \"cn\": \"二维码\",\n      \"en\": \"QR code\",\n      \"fr\": \"QR code\",\n      \"fa\": \"کیوآر کد\"\n    },\n    \"titleCenter\": {\n      \"cn\": \"俄罗斯方块<br />TETRIS\",\n      \"en\": \"TETRIS\",\n      \"fr\": \"TETRIS\",\n      \"fa\": \"خانه سازی\"\n    },\n    \"point\": {\n      \"cn\": \"得分\",\n      \"en\": \"Point\",\n      \"fr\": \"Score\",\n      \"fa\": \"امتیاز\"\n    },\n    \"highestScore\": {\n      \"cn\": \"最高分\",\n      \"en\": \"Max\",\n      \"fr\": \"Max\",\n      \"fa\": \"حداکثر\"\n    },\n    \"lastRound\": {\n      \"cn\": \"上轮得分\",\n      \"en\": \"Last Round\",\n      \"fr\": \"Dernier Tour\",\n      \"fa\": \"آخرین دور\"\n    },\n    \"cleans\": {\n      \"cn\": \"消除行\",\n      \"en\": \"Cleans\",\n      \"fr\": \"Lignes\",\n      \"fa\": \"پاک کرد\"\n    },\n    \"level\": {\n      \"cn\": \"级别\",\n      \"en\": \"Level\",\n      \"fr\": \"Difficulté\",\n      \"fa\": \"سطح\"\n    },\n    \"startLine\": {\n      \"cn\": \"起始行\",\n      \"en\": \"Start Line\",\n      \"fr\": \"Ligne Départ\",\n      \"fa\": \"خط شروع\"\n    },\n    \"next\": {\n      \"cn\": \"下一个\",\n      \"en\": \"Next\",\n      \"fr\": \"Prochain\",\n      \"fa\": \"بعدی\"\n    },\n    \"pause\": {\n      \"cn\": \"暂停\",\n      \"en\": \"Pause\",\n      \"fr\": \"Pause\",\n      \"fa\": \"مکث\"\n    },\n    \"sound\": {\n      \"cn\": \"音效\",\n      \"en\": \"Sound\",\n      \"fr\": \"Sonore\",\n      \"fa\": \"صدا\"\n    },\n    \"reset\": {\n      \"cn\": \"重玩\",\n      \"en\": \"Reset\",\n      \"fr\": \"Réinitialiser\",\n      \"fa\": \"ریست\"\n    },\n    \"rotation\": {\n      \"cn\": \"旋转\",\n      \"en\": \"Rotation\",\n      \"fr\": \"Rotation\",\n      \"fa\": \"چرخش\"\n    },\n    \"left\": {\n      \"cn\": \"左移\",\n      \"en\": \"Left\",\n      \"fr\": \"Gauche\",\n      \"fa\": \"چپ\"\n    },\n    \"right\": {\n      \"cn\": \"右移\",\n      \"en\": \"Right\",\n      \"fr\": \"Droite\",\n      \"fa\": \"راست\"\n    },\n    \"down\": {\n      \"cn\": \"下移\",\n      \"en\": \"Down\",\n      \"fr\": \"Bas\",\n      \"fa\": \"پایین\"\n    },\n    \"drop\": {\n      \"cn\": \"掉落\",\n      \"en\": \"Drop\",\n      \"fr\": \"Tomber\",\n      \"fa\": \"سقوط\"\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.9541015625,
          "content": "{\n  \"name\": \"react-tetris\",\n  \"version\": \"1.0.1\",\n  \"description\": \"使用React、Redux、Immutable编写「俄罗斯方块」。Use Tetact, Redux, Immutable to coding \\\"Tetris\\\".\",\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --progress\",\n    \"build\": \"rm -rf ./docs/* && webpack --config ./webpack.production.config.js --progress && ls ./docs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/chvin/react-tetris.git\"\n  },\n  \"keywords\": [\n    \"Tetris\",\n    \"React\",\n    \"Redux\",\n    \"Immutable\",\n    \"俄罗斯方块\"\n  ],\n  \"author\": \"Chvin\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/chvin/react-tetris/issues\"\n  },\n  \"homepage\": \"https://github.com/chvin/react-tetris#readme\",\n  \"devDependencies\": {\n    \"autoprefixer\": \"^6.7.2\",\n    \"babel-core\": \"^6.13.2\",\n    \"babel-loader\": \"^6.2.4\",\n    \"babel-plugin-react-transform\": \"^2.0.2\",\n    \"babel-preset-es2015\": \"^6.13.2\",\n    \"babel-preset-react\": \"^6.16.0\",\n    \"copy-webpack-plugin\": \"^3.0.1\",\n    \"css-loader\": \"^0.23.1\",\n    \"eslint\": \"^3.3.1\",\n    \"eslint-config-airbnb\": \"^10.0.1\",\n    \"eslint-loader\": \"^1.6.1\",\n    \"eslint-plugin-import\": \"^1.13.0\",\n    \"eslint-plugin-jsx-a11y\": \"^2.1.0\",\n    \"eslint-plugin-react\": \"^6.1.1\",\n    \"extract-text-webpack-plugin\": \"^1.0.1\",\n    \"file-loader\": \"^0.9.0\",\n    \"html-webpack-plugin\": \"^2.22.0\",\n    \"json-loader\": \"^0.5.4\",\n    \"less\": \"^2.7.1\",\n    \"less-loader\": \"^2.2.3\",\n    \"open-browser-webpack-plugin\": \"0.0.3\",\n    \"postcss\": \"^5.2.12\",\n    \"postcss-loader\": \"^1.2.2\",\n    \"precss\": \"^1.4.0\",\n    \"react-transform-hmr\": \"^1.0.4\",\n    \"style-loader\": \"^0.13.1\",\n    \"url-loader\": \"^0.5.7\",\n    \"webpack\": \"^1.13.1\",\n    \"webpack-dev-server\": \"^1.14.1\"\n  },\n  \"dependencies\": {\n    \"classnames\": \"^2.2.5\",\n    \"immutable\": \"^3.8.1\",\n    \"prop-types\": \"^15.5.10\",\n    \"qrcode\": \"^1.2.0\",\n    \"react\": \"^15.3.0\",\n    \"react-dom\": \"^15.3.0\",\n    \"react-redux\": \"^4.4.5\",\n    \"redux\": \"^3.5.2\",\n    \"redux-immutable\": \"^3.0.8\"\n  }\n}\n"
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "w.config.js",
          "type": "blob",
          "size": 2.748046875,
          "content": "var webpack = require('webpack');\nvar OpenBrowserPlugin = require('open-browser-webpack-plugin');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar precss = require('precss');\nvar autoprefixer = require('autoprefixer');\nvar CopyWebpackPlugin = require('copy-webpack-plugin');\nvar version = require('./package.json').version;\n\n\n// 程序入口\nvar entry =  __dirname + '/src/index.js';\n\n// 输出文件\nvar output =  {\n  filename: 'page/[name]/index.js',\n  chunkFilename: 'chunk/[name].[chunkhash:5].chunk.js',\n};\n\n// 生成source-map追踪js错误\nvar devtool = 'source-map';\n\n// eslint\nvar eslint =  {\n  configFile: __dirname + '/.eslintrc.js',\n}\n\n// loader\nvar loaders = [\n    {\n      test: /\\.(json)$/,\n      exclude: /node_modules/,\n      loader: 'json',\n    },\n    {\n      test: /\\.(js|jsx)$/,\n      exclude: /node_modules/,\n      loader: 'babel!eslint-loader',\n    },\n    {\n      test: /\\.(?:png|jpg|gif)$/,\n      loader: 'url?limit=8192', //小于8k,内嵌;大于8k生成文件\n    },\n    {\n      test: /\\.less/,\n      loader: ExtractTextPlugin.extract('style', 'css?modules&localIdentName=[hash:base64:4]!postcss!less'),\n    }\n];\n\n// dev plugin\nvar devPlugins =  [\n  new CopyWebpackPlugin([\n    { from: './src/resource/music/music.mp3' },\n    { from: './src/resource/css/loader.css' },\n  ]),\n  // 热更新\n  new webpack.HotModuleReplacementPlugin(),\n  // 允许错误不打断程序, 仅开发模式需要\n  new webpack.NoErrorsPlugin(),\n  // 打开浏览器页面\n  new OpenBrowserPlugin({\n    url: 'http://127.0.0.1:8080/'\n  }),\n  // css打包\n  new ExtractTextPlugin('css.css', {\n    allChunks: true\n  }),\n]\n\n// production plugin\nvar productionPlugins = [\n  // 定义生产环境\n  new webpack.DefinePlugin({\n    'process.env.NODE_ENV': '\"production\"',\n  }),\n  // 复制\n  new CopyWebpackPlugin([\n    { from: './src/resource/music/music.mp3' },\n    { from: './src/resource/css/loader.css' },\n  ]),\n  // HTML 模板\n  new HtmlWebpackPlugin({\n    template: __dirname + '/server/index.tmpl.html'\n  }),\n  // JS压缩\n  new webpack.optimize.UglifyJsPlugin({\n    compress: {\n      warnings: false\n    }}\n  ),\n  // css打包\n  new ExtractTextPlugin('css-' + version + '.css', {\n    allChunks: true\n  }),\n];\n\n// dev server\nvar devServer = {\n  contentBase: './server',\n  colors: true,\n  historyApiFallback: false,\n  port: 8080, // defaults to \"8080\"\n  hot: true, // Hot Module Replacement\n  inline: true, // Livereload\n  host: '0.0.0.0',\n  disableHostCheck: true\n};\n\nmodule.exports = {\n  entry: entry,\n  devtool: devtool,\n  output: output,\n  loaders: loaders,\n  devPlugins: devPlugins,\n  productionPlugins: productionPlugins,\n  devServer: devServer,\n  postcss: function () {\n    return [precss, autoprefixer];\n  },\n  version: version\n};\n"
        },
        {
          "name": "webpack.config.js",
          "type": "blob",
          "size": 0.3505859375,
          "content": "var config = require('./w.config');\n\n// dev环境配置\nmodule.exports = {\n  devtool: config.devtool,\n  entry: config.entry,\n  output: {\n    path: __dirname + '/server',\n    filename: 'app.js',\n  },\n  eslint: config.eslint,\n  module: {\n    loaders: config.loaders\n  },\n  plugins: config.devPlugins,\n  devServer: config.devServer,\n  postcss: config.postcss\n};\n"
        },
        {
          "name": "webpack.production.config.js",
          "type": "blob",
          "size": 0.3525390625,
          "content": "var config = require('./w.config');\n\n// production环境配置\nmodule.exports = {\n  devtool: config.devtool,\n  entry: config.entry,\n  output: {\n    path: __dirname + '/docs',\n    filename: 'app-' + config.version+'.js',\n  },\n  eslint: config.eslint,\n  module: {\n    loaders: config.loaders\n  },\n  plugins: config.productionPlugins,\n  postcss: config.postcss\n};\n"
        }
      ]
    }
  ]
}