{
  "metadata": {
    "timestamp": 1736563071832,
    "page": 711,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bgrins/TinyColor",
      "stars": 5124,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.091796875,
          "content": ".DS_Store\nehthumbs.db\nIcon?\nThumbs.db\nnode_modules\n.idea\n.vscode\ncov_profile\ncov_profile.lcov\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "Copyright (c), Brian Grinstead, http://briangrinstead.com\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.529296875,
          "content": "# TinyColor\n\n## JavaScript color tooling\n\nTinyColor is a small, fast library for color manipulation and conversion in JavaScript.  It allows many forms of input, while providing color conversions and other color utility functions.  It has no dependencies.\n\n## Including in node\n\n`tinycolor` can be installed from npm:\n\n    npm install tinycolor2\n\nThen it can be used in your script like so:\n\n```js\nvar tinycolor = require(\"tinycolor2\");\nvar color = tinycolor(\"red\");\n```\n\nOr in a module like so:\n\n```js\nimport tinycolor from \"tinycolor2\";\nvar color = tinycolor(\"red\");\n```\n\n## Including in a browser\n\nThe package can be bundled from npm, but if you prefer to download it locally you have two choices:\n\n### ESM\n\nIt can be used as a module by downloading [npm/esm/tinycolor.js](https://github.com/bgrins/TinyColor/blob/master/npm/esm/tinycolor.js) or using https://esm.sh/tinycolor2.\n\n```html\n<script type='module'>\nimport tinycolor from \"https://esm.sh/tinycolor2\";\nvar color = tinycolor(\"red\");\n</script>\n```\n\n### UMD\n\nYou can use it directly in a script tag by downloading the UMD file from [npm/cjs/tinycolor.js](https://github.com/bgrins/TinyColor/blob/master/npm/cjs/tinycolor.js):\n\n```html\n<script type='text/javascript' src='tinycolor.js'></script>\n<script type='text/javascript'>\nvar color = tinycolor(\"red\");\n</script>\n```\n\n## Usage\n\nCall `tinycolor(input)` or `new tinycolor(input)`, and you will have an object with the following properties.  See Accepted String Input and Accepted Object Input below for more information about what is accepted.\n\n## Accepted String Input\n\nThe string parsing is very permissive.  It is meant to make typing a color as input as easy as possible.  All commas, percentages, parenthesis are optional, and most input allow either 0-1, 0%-100%, or 0-n (where n is either 100, 255, or 360 depending on the value).\n\nHSL and HSV both require either 0%-100% or 0-1 for the `S`/`L`/`V` properties.  The `H` (hue) can have values between 0%-100% or 0-360.\n\nRGB input requires either 0-255 or 0%-100%.\n\nIf you call `tinycolor.fromRatio`, RGB and Hue input can also accept 0-1.\n\nHere are some examples of string input:\n\n### Hex, 8-digit (RGBA) Hex\n```js\ntinycolor(\"#000\");\ntinycolor(\"000\");\ntinycolor(\"#369C\");\ntinycolor(\"369C\");\ntinycolor(\"#f0f0f6\");\ntinycolor(\"f0f0f6\");\ntinycolor(\"#f0f0f688\");\ntinycolor(\"f0f0f688\");\n```\n### RGB, RGBA\n```js\ntinycolor(\"rgb (255, 0, 0)\");\ntinycolor(\"rgb 255 0 0\");\ntinycolor(\"rgba (255, 0, 0, .5)\");\ntinycolor({ r: 255, g: 0, b: 0 });\ntinycolor.fromRatio({ r: 1, g: 0, b: 0 });\ntinycolor.fromRatio({ r: .5, g: .5, b: .5 });\n```\n### HSL, HSLA\n```js\ntinycolor(\"hsl(0, 100%, 50%)\");\ntinycolor(\"hsla(0, 100%, 50%, .5)\");\ntinycolor(\"hsl(0, 100%, 50%)\");\ntinycolor(\"hsl 0 1.0 0.5\");\ntinycolor({ h: 0, s: 1, l: .5 });\ntinycolor.fromRatio({ h: 1, s: 0, l: 0 });\ntinycolor.fromRatio({ h: .5, s: .5, l: .5 });\n```\n### HSV, HSVA\n```js\ntinycolor(\"hsv(0, 100%, 100%)\");\ntinycolor(\"hsva(0, 100%, 100%, .5)\");\ntinycolor(\"hsv (0 100% 100%)\");\ntinycolor(\"hsv 0 1 1\");\ntinycolor({ h: 0, s: 100, v: 100 });\ntinycolor.fromRatio({ h: 1, s: 0, v: 0 });\ntinycolor.fromRatio({ h: .5, s: .5, v: .5 });\n```\n### Named\n\nCase insenstive names are accepted, using the [list of colors in the CSS spec](https://www.w3.org/TR/css-color-4/#named-colors).\n\n```js\ntinycolor(\"RED\");\ntinycolor(\"blanchedalmond\");\ntinycolor(\"darkblue\");\n```\n### Accepted Object Input\n\nIf you are calling this from code, you may want to use object input.  Here are some examples of the different types of accepted object inputs:\n\n    { r: 255, g: 0, b: 0 }\n    { r: 255, g: 0, b: 0, a: .5 }\n    { h: 0, s: 100, l: 50 }\n    { h: 0, s: 100, v: 100 }\n\n## Methods\n\n### getFormat\n\nReturns the format used to create the tinycolor instance\n```js\nvar color = tinycolor(\"red\");\ncolor.getFormat(); // \"name\"\ncolor = tinycolor({r:255, g:255, b:255});\ncolor.getFormat(); // \"rgb\"\n```\n\n### getOriginalInput\n\nReturns the input passed into the constructor used to create the tinycolor instance\n```js\nvar color = tinycolor(\"red\");\ncolor.getOriginalInput(); // \"red\"\ncolor = tinycolor({r:255, g:255, b:255});\ncolor.getOriginalInput(); // \"{r: 255, g: 255, b: 255}\"\n```\n\n### isValid\n\nReturn a boolean indicating whether the color was successfully parsed.  Note: if the color is not valid then it will act like `black` when being used with other methods.\n```js\nvar color1 = tinycolor(\"red\");\ncolor1.isValid(); // true\ncolor1.toHexString(); // \"#ff0000\"\n\nvar color2 = tinycolor(\"not a color\");\ncolor2.isValid(); // false\ncolor2.toString(); // \"#000000\"\n```\n### getBrightness\n\nReturns the perceived brightness of a color, from `0-255`, as defined by [Web Content Accessibility Guidelines (Version 1.0)](http://www.w3.org/TR/AERT#color-contrast).\n```js\nvar color1 = tinycolor(\"#fff\");\ncolor1.getBrightness(); // 255\n\nvar color2 = tinycolor(\"#000\");\ncolor2.getBrightness(); // 0\n```\n### isLight\n\nReturn a boolean indicating whether the color's perceived brightness is light.\n```js\nvar color1 = tinycolor(\"#fff\");\ncolor1.isLight(); // true\n\nvar color2 = tinycolor(\"#000\");\ncolor2.isLight(); // false\n```\n### isDark\n\nReturn a boolean indicating whether the color's perceived brightness is dark.\n```js\nvar color1 = tinycolor(\"#fff\");\ncolor1.isDark(); // false\n\nvar color2 = tinycolor(\"#000\");\ncolor2.isDark(); // true\n```\n### getLuminance\n\nReturns the perceived luminance of a color, from `0-1` as defined by [Web Content Accessibility Guidelines (Version 2.0).](http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef)\n```js\nvar color1 = tinycolor(\"#fff\");\ncolor1.getLuminance(); // 1\n\nvar color2 = tinycolor(\"#000\");\ncolor2.getLuminance(); // 0\n```\n### getAlpha\n\nReturns the alpha value of a color, from `0-1`.\n```js\nvar color1 = tinycolor(\"rgba(255, 0, 0, .5)\");\ncolor1.getAlpha(); // 0.5\n\nvar color2 = tinycolor(\"rgb(255, 0, 0)\");\ncolor2.getAlpha(); // 1\n\nvar color3 = tinycolor(\"transparent\");\ncolor3.getAlpha(); // 0\n```\n### setAlpha\n\nSets the alpha value on a current color.  Accepted range is in between `0-1`.\n```js\nvar color = tinycolor(\"red\");\ncolor.getAlpha(); // 1\ncolor.setAlpha(.5);\ncolor.getAlpha(); // .5\ncolor.toRgbString(); // \"rgba(255, 0, 0, .5)\"\n```\n### String Representations\n\nThe following methods will return a property for the `alpha` value, which can be ignored: `toHsv`, `toHsl`, `toRgb`\n\n### toHsv\n```js\nvar color = tinycolor(\"red\");\ncolor.toHsv(); // { h: 0, s: 1, v: 1, a: 1 }\n```\n### toHsvString\n```js\nvar color = tinycolor(\"red\");\ncolor.toHsvString(); // \"hsv(0, 100%, 100%)\"\ncolor.setAlpha(0.5);\ncolor.toHsvString(); // \"hsva(0, 100%, 100%, 0.5)\"\n```\n### toHsl\n```js\nvar color = tinycolor(\"red\");\ncolor.toHsl(); // { h: 0, s: 1, l: 0.5, a: 1 }\n```\n### toHslString\n```js\nvar color = tinycolor(\"red\");\ncolor.toHslString(); // \"hsl(0, 100%, 50%)\"\ncolor.setAlpha(0.5);\ncolor.toHslString(); // \"hsla(0, 100%, 50%, 0.5)\"\n```\n### toHex\n```js\nvar color = tinycolor(\"red\");\ncolor.toHex(); // \"ff0000\"\n```\n### toHexString\n```js\nvar color = tinycolor(\"red\");\ncolor.toHexString(); // \"#ff0000\"\n```\n### toHex8\n```js\nvar color = tinycolor(\"red\");\ncolor.toHex8(); // \"ff0000ff\"\n```\n### toHex8String\n```js\nvar color = tinycolor(\"red\");\ncolor.toHex8String(); // \"#ff0000ff\"\n```\n### toRgb\n```js\nvar color = tinycolor(\"red\");\ncolor.toRgb(); // { r: 255, g: 0, b: 0, a: 1 }\n```\n### toRgbString\n```js\nvar color = tinycolor(\"red\");\ncolor.toRgbString(); // \"rgb(255, 0, 0)\"\ncolor.setAlpha(0.5);\ncolor.toRgbString(); // \"rgba(255, 0, 0, 0.5)\"\n```\n### toPercentageRgb\n```js\nvar color = tinycolor(\"red\");\ncolor.toPercentageRgb() // { r: \"100%\", g: \"0%\", b: \"0%\", a: 1 }\n```\n### toPercentageRgbString\n```js\nvar color = tinycolor(\"red\");\ncolor.toPercentageRgbString(); // \"rgb(100%, 0%, 0%)\"\ncolor.setAlpha(0.5);\ncolor.toPercentageRgbString(); // \"rgba(100%, 0%, 0%, 0.5)\"\n```\n### toName\n```js\nvar color = tinycolor(\"red\");\ncolor.toName(); // \"red\"\n```\n### toFilter\n```\nvar color = tinycolor(\"red\");\ncolor.toFilter(); // \"progid:DXImageTransform.Microsoft.gradient(startColorstr=#ffff0000,endColorstr=#ffff0000)\"\n```\n### toString\n\nPrint to a string, depending on the input format.  You can also override this by passing one of `\"rgb\", \"prgb\", \"hex6\", \"hex3\", \"hex8\", \"name\", \"hsl\", \"hsv\"` into the function.\n```js\nvar color1 = tinycolor(\"red\");\ncolor1.toString(); // \"red\"\ncolor1.toString(\"hsv\"); // \"hsv(0, 100%, 100%)\"\n\nvar color2 = tinycolor(\"rgb(255, 0, 0)\");\ncolor2.toString(); // \"rgb(255, 0, 0)\"\ncolor2.setAlpha(.5);\ncolor2.toString(); // \"rgba(255, 0, 0, 0.5)\"\n```\n### Color Modification\n\nThese methods manipulate the current color, and return it for chaining.  For instance:\n```js\ntinycolor(\"red\").lighten().desaturate().toHexString() // \"#f53d3d\"\n```\n### lighten\n\n`lighten: function(amount = 10) -> TinyColor`.  Lighten the color a given amount, from 0 to 100.  Providing 100 will always return white.\n```js\ntinycolor(\"#f00\").lighten().toString(); // \"#ff3333\"\ntinycolor(\"#f00\").lighten(100).toString(); // \"#ffffff\"\n```\n### brighten\n\n`brighten: function(amount = 10) -> TinyColor`.  Brighten the color a given amount, from 0 to 100.\n```js\ntinycolor(\"#f00\").brighten().toString(); // \"#ff1919\"\n```\n### darken\n\n`darken: function(amount = 10) -> TinyColor`.  Darken the color a given amount, from 0 to 100.  Providing 100 will always return black.\n```js\ntinycolor(\"#f00\").darken().toString(); // \"#cc0000\"\ntinycolor(\"#f00\").darken(100).toString(); // \"#000000\"\n```\n### desaturate\n\n`desaturate: function(amount = 10) -> TinyColor`.  Desaturate the color a given amount, from 0 to 100.  Providing 100 will is the same as calling `greyscale`.\n```js\ntinycolor(\"#f00\").desaturate().toString(); // \"#f20d0d\"\ntinycolor(\"#f00\").desaturate(100).toString(); // \"#808080\"\n```\n### saturate\n\n`saturate: function(amount = 10) -> TinyColor`.  Saturate the color a given amount, from 0 to 100.\n```js\ntinycolor(\"hsl(0, 10%, 50%)\").saturate().toString(); // \"hsl(0, 20%, 50%)\"\n```\n### greyscale\n\n`greyscale: function() -> TinyColor`.  Completely desaturates a color into greyscale.  Same as calling `desaturate(100)`.\n```js\ntinycolor(\"#f00\").greyscale().toString(); // \"#808080\"\n```\n### spin\n\n`spin: function(amount = 0) -> TinyColor`.  Spin the hue a given amount, from -360 to 360.  Calling with 0, 360, or -360 will do nothing (since it sets the hue back to what it was before).\n```js\ntinycolor(\"#f00\").spin(180).toString(); // \"#00ffff\"\ntinycolor(\"#f00\").spin(-90).toString(); // \"#7f00ff\"\ntinycolor(\"#f00\").spin(90).toString(); // \"#80ff00\"\n\n// spin(0) and spin(360) do nothing\ntinycolor(\"#f00\").spin(0).toString(); // \"#ff0000\"\ntinycolor(\"#f00\").spin(360).toString(); // \"#ff0000\"\n```\n### Color Combinations\n\nCombination functions return an array of TinyColor objects unless otherwise noted.\n\n### analogous\n\n`analogous: function(, results = 6, slices = 30) -> array<TinyColor>`.\n```js\nvar colors = tinycolor(\"#f00\").analogous();\n\ncolors.map(function(t) { return t.toHexString(); }); // [ \"#ff0000\", \"#ff0066\", \"#ff0033\", \"#ff0000\", \"#ff3300\", \"#ff6600\" ]\n```\n### monochromatic\n\n`monochromatic: function(, results = 6) -> array<TinyColor>`.\n```js\nvar colors = tinycolor(\"#f00\").monochromatic();\n\ncolors.map(function(t) { return t.toHexString(); }); // [ \"#ff0000\", \"#2a0000\", \"#550000\", \"#800000\", \"#aa0000\", \"#d40000\" ]\n```\n### splitcomplement\n\n`splitcomplement: function() -> array<TinyColor>`.\n```js\nvar colors = tinycolor(\"#f00\").splitcomplement();\n\ncolors.map(function(t) { return t.toHexString(); }); // [ \"#ff0000\", \"#ccff00\", \"#0066ff\" ]\n```\n### triad\n\n`triad: function() -> array<TinyColor>`.\n```js\nvar colors = tinycolor(\"#f00\").triad();\n\ncolors.map(function(t) { return t.toHexString(); }); // [ \"#ff0000\", \"#00ff00\", \"#0000ff\" ]\n```\n### tetrad\n\n`tetrad: function() -> array<TinyColor>`.\n```js\nvar colors = tinycolor(\"#f00\").tetrad();\n\ncolors.map(function(t) { return t.toHexString(); }); // [ \"#ff0000\", \"#80ff00\", \"#00ffff\", \"#7f00ff\" ]\n\n```\n### complement\n\n`complement: function() -> TinyColor`.\n```js\ntinycolor(\"#f00\").complement().toHexString(); // \"#00ffff\"\n```\n## Color Utilities\n```js\ntinycolor.equals(color1, color2)\ntinycolor.mix(color1, color2, amount = 50)\n```\n### random\n\nReturns a random color.\n```js\nvar color = tinycolor.random();\ncolor.toRgb(); // \"{r: 145, g: 40, b: 198, a: 1}\"\n```\n\n### Readability\n\nTinyColor assesses readability based on the [Web Content Accessibility Guidelines (Version 2.0)](http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef).\n\n#### readability\n\n`readability: function(TinyColor, TinyColor) -> Object`.\nReturns the contrast ratio between two colors.\n```js\ntinycolor.readability(\"#000\", \"#000\"); // 1\ntinycolor.readability(\"#000\", \"#111\"); // 1.1121078324840545\ntinycolor.readability(\"#000\", \"#fff\"); // 21\n```\nUse the values in your own calculations, or use one of the convenience functions below.\n\n#### isReadable\n\n`isReadable: function(TinyColor, TinyColor, Object) -> Boolean`.  Ensure that foreground and background color combinations meet WCAG guidelines. `Object` is optional, defaulting to `{level: \"AA\",size: \"small\"}`.  `level` can be `\"AA\"` or \"AAA\" and `size` can be `\"small\"` or `\"large\"`.\n\nHere are links to read more about the [AA](http://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) and [AAA](http://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html) requirements.\n```js\ntinycolor.isReadable(\"#000\", \"#111\", {}); // false\ntinycolor.isReadable(\"#ff0088\", \"#5c1a72\",{level:\"AA\",size:\"small\"}); //false\ntinycolor.isReadable(\"#ff0088\", \"#5c1a72\",{level:\"AA\",size:\"large\"}), //true\n```\n#### mostReadable\n\n`mostReadable: function(TinyColor, [TinyColor, Tinycolor ...], Object) -> Boolean`.\nGiven a base color and a list of possible foreground or background colors for that base, returns the most readable color.\nIf none of the colors in the list is readable, `mostReadable` will return the better of black or white if `includeFallbackColors:true`.\n```js\ntinycolor.mostReadable(\"#000\", [\"#f00\", \"#0f0\", \"#00f\"]).toHexString(); // \"#00ff00\"\ntinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\ntinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\ntinycolor.mostReadable(\"#ff0088\", [\"#2e0c3a\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString()   // \"#2e0c3a\",\ntinycolor.mostReadable(\"#ff0088\", [\"#2e0c3a\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString()   // \"#000000\",\n```\nSee [index.html](https://github.com/bgrins/TinyColor/blob/master/index.html) in the project for a demo.\n\n## Common operations\n\n### clone\n\n`clone: function() -> TinyColor`.\nInstantiate a new TinyColor object with the same color.  Any changes to the new one won't affect the old one.\n```js\nvar color1 = tinycolor(\"#F00\");\nvar color2 = color1.clone();\ncolor2.setAlpha(.5);\n\ncolor1.toString(); // \"#ff0000\"\ncolor2.toString(); // \"rgba(255, 0, 0, 0.5)\"\n```\n"
        },
        {
          "name": "build.js",
          "type": "blob",
          "size": 3.3115234375,
          "content": "import { rollup } from \"npm:rollup@3.13.0\";\nimport { minify } from \"npm:terser@5.16.1\";\nimport { babel } from \"npm:@rollup/plugin-babel@6.0.3\";\n// This import is required for presetEnv to work:\nimport _ from \"https://esm.sh/@babel/core@7.20.12\";\nimport babelPresetEnv from \"https://esm.sh/@babel/preset-env@7.20.2\";\n\nlet bundle = await rollup({\n  input: \"mod.js\",\n  plugins: [\n    babel({\n      babelHelpers: \"bundled\",\n      presets: [[babelPresetEnv]],\n    }),\n  ],\n});\n\n// Write legacy UMD files to tinycolor.js and dist/tinycolor-min.js.\n// It'd be nice to get rid of these, if we could ensure they aren't used.\nasync function write_cdn_umd() {\n  let { output } = await bundle.generate({\n    format: \"umd\",\n    name: \"tinycolor\",\n  });\n  let minified = await minify(output[0].code);\n  const preamble = `// This file is autogenerated.\n// It's here at this path for backwards compatibility for links to it\n// but the npm package now exports both CJS and ESM.\n// See https://github.com/bgrins/TinyColor/ for instructions.\n  `;\n  Deno.writeTextFileSync(\"npm/tinycolor.js\", preamble + output[0].code);\n  Deno.writeTextFileSync(\"npm/dist/tinycolor-min.js\", preamble + minified.code);\n\n  // Keeping these (without preamble) until we can confirm they aren't used by CDNs\n  // after moving to the npm/ path. At that point these files can be removed in\n  // https://github.com/bgrins/TinyColor/issues/260.\n  Deno.writeTextFileSync(\"tinycolor.js\", output[0].code);\n  Deno.writeTextFileSync(\"dist/tinycolor-min.js\", minified.code);\n}\n\n// Write necessary files for testing & publishing commonjs to npm.\n// The subdirectory sets { \"type\": \"commonjs\" } in the package.json,\n// and includes a lightweight test runner to ensure it works like mod.js.\nasync function write_npm_cjs() {\n  let { output } = await bundle.generate({\n    format: \"umd\",\n    name: \"tinycolor\",\n  });\n\n  Deno.writeTextFileSync(\n    \"./npm/cjs/tinycolor.js\",\n    `// This file is autogenerated. It's used to publish CJS to npm.\n` + output[0].code\n  );\n  const test_template = Deno.readTextFileSync(\"./npm/cjs/test_template.js\");\n  const test_content = Deno.readTextFileSync(\"test.js\");\n  Deno.writeTextFileSync(\n    \"./npm/cjs/test.js\",\n    test_template.replace(\n      \"// CONTENT_GOES_HERE\",\n      test_content.substring(\n        test_content.indexOf(\"// TEST_BEGINS_HERE\"),\n        test_content.length - 1\n      )\n    )\n  );\n}\n\n// Write necessary files for testing & publishing esm to npm.\n// The subdirectory sets { \"type\": \"module\" } in the package.json,\n// and includes a lightweight test runner to ensure it works like mod.js.\nasync function write_npm_esm() {\n  let { output } = await bundle.generate({\n    format: \"esm\",\n  });\n\n  Deno.writeTextFileSync(\n    \"./npm/esm/tinycolor.js\",\n    `// This file is autogenerated. It's used to publish ESM to npm.\n` + output[0].code\n  );\n  const test_template = Deno.readTextFileSync(\"./npm/esm/test_template.js\");\n  const test_content = Deno.readTextFileSync(\"test.js\");\n  Deno.writeTextFileSync(\n    \"./npm/esm/test.js\",\n    test_template.replace(\n      \"// CONTENT_GOES_HERE\",\n      test_content.substring(\n        test_content.indexOf(\"// TEST_BEGINS_HERE\"),\n        test_content.length - 1\n      )\n    )\n  );\n}\n\nawait write_cdn_umd();\nawait write_npm_cjs();\nawait write_npm_esm();\n\nawait Deno.copyFile(\"README.md\", \"npm/README.md\");\nawait Deno.copyFile(\"LICENSE\", \"npm/LICENSE\");\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "deno.json",
          "type": "blob",
          "size": 0.8134765625,
          "content": "{\n  \"tasks\": {\n    \"test\": \"deno test\",\n    \"dev\": \"deno test --watch test.js\",\n    \"coverage\": \"deno test --coverage=cov_profile && deno coverage cov_profile --lcov --output=cov_profile.lcov && genhtml -o cov_profile/html cov_profile.lcov && open cov_profile/html/TinyColor/mod.js.gcov.html\",\n    \"serve\": \"deno run --watch --allow-env --allow-net=unpkg.com,0.0.0.0 --allow-read=. demo/server.jsx\",\n    \"test-npm\": \"npm install --prefix npm && npm test --prefix npm\",\n    \"build\": \"deno task test && deno run --allow-env --allow-read --allow-write=. build.js && deno task test-npm\",\n    \"publish\": \"deno task build && cd npm && npm publish --access public\",\n    \"publish-beta\": \"deno task build && cd npm && npm publish --tag beta --access public\"\n  },\n  \"test\": {\n    \"files\": {\n      \"exclude\": [\n        \"npm\"\n      ]\n    }\n  }\n}"
        },
        {
          "name": "deno.lock",
          "type": "blob",
          "size": 72.7841796875,
          "content": "{\n  \"version\": \"2\",\n  \"remote\": {\n    \"https://deno.land/std@0.168.0/fmt/colors.ts\": \"03ad95e543d2808bc43c17a3dd29d25b43d0f16287fe562a0be89bf632454a12\",\n    \"https://deno.land/std@0.168.0/testing/_diff.ts\": \"a23e7fc2b4d8daa3e158fa06856bedf5334ce2a2831e8bf9e509717f455adb2c\",\n    \"https://deno.land/std@0.168.0/testing/_format.ts\": \"cd11136e1797791045e639e9f0f4640d5b4166148796cad37e6ef75f7d7f3832\",\n    \"https://deno.land/std@0.168.0/testing/asserts.ts\": \"51353e79437361d4b02d8e32f3fc83b22231bc8f8d4c841d86fd32b0b0afe940\",\n    \"https://deno.land/std@0.175.0/_util/asserts.ts\": \"178dfc49a464aee693a7e285567b3d0b555dc805ff490505a8aae34f9cfb1462\",\n    \"https://deno.land/std@0.175.0/_util/os.ts\": \"d932f56d41e4f6a6093d56044e29ce637f8dcc43c5a90af43504a889cf1775e3\",\n    \"https://deno.land/std@0.175.0/async/abortable.ts\": \"73acfb3ed7261ce0d930dbe89e43db8d34e017b063cf0eaa7d215477bf53442e\",\n    \"https://deno.land/std@0.175.0/async/deadline.ts\": \"b98e50d2c42399af03ad13bbb8cf59dadb9f0cd5d70648cc0c3b9202d75ab565\",\n    \"https://deno.land/std@0.175.0/async/debounce.ts\": \"adab11d04ca38d699444ac8a9d9856b4155e8dda2afd07ce78276c01ea5a4332\",\n    \"https://deno.land/std@0.175.0/async/deferred.ts\": \"42790112f36a75a57db4a96d33974a936deb7b04d25c6084a9fa8a49f135def8\",\n    \"https://deno.land/std@0.175.0/async/delay.ts\": \"73aa04cec034c84fc748c7be49bb15cac3dd43a57174bfdb7a4aec22c248f0dd\",\n    \"https://deno.land/std@0.175.0/async/mod.ts\": \"f04344fa21738e5ad6bea37a6bfffd57c617c2d372bb9f9dcfd118a1b622e576\",\n    \"https://deno.land/std@0.175.0/async/mux_async_iterator.ts\": \"70c7f2ee4e9466161350473ad61cac0b9f115cff4c552eaa7ef9d50c4cbb4cc9\",\n    \"https://deno.land/std@0.175.0/async/pool.ts\": \"fd082bd4aaf26445909889435a5c74334c017847842ec035739b4ae637ae8260\",\n    \"https://deno.land/std@0.175.0/async/retry.ts\": \"5efa3ba450ac0c07a40a82e2df296287b5013755d232049efd7ea2244f15b20f\",\n    \"https://deno.land/std@0.175.0/async/tee.ts\": \"47e42d35f622650b02234d43803d0383a89eb4387e1b83b5a40106d18ae36757\",\n    \"https://deno.land/std@0.175.0/bytes/index_of_needle.ts\": \"65c939607df609374c4415598fa4dad04a2f14c4d98cd15775216f0aaf597f24\",\n    \"https://deno.land/std@0.175.0/crypto/timing_safe_equal.ts\": \"8d69ab611c67fe51b6127d97fcfb4d8e7d0e1b6b4f3e0cc4ab86744c3691f965\",\n    \"https://deno.land/std@0.175.0/encoding/base64.ts\": \"7de04c2f8aeeb41453b09b186480be90f2ff357613b988e99fabb91d2eeceba1\",\n    \"https://deno.land/std@0.175.0/encoding/base64url.ts\": \"3f1178f6446834457b16bfde8b559c1cd3481727fe384d3385e4a9995dc2d851\",\n    \"https://deno.land/std@0.175.0/flags/mod.ts\": \"d1cdefa18472ef69858a17df5cf7c98445ed27ac10e1460183081303b0ebc270\",\n    \"https://deno.land/std@0.175.0/fmt/colors.ts\": \"938c5d44d889fb82eff6c358bea8baa7e85950a16c9f6dae3ec3a7a729164471\",\n    \"https://deno.land/std@0.175.0/fmt/printf.ts\": \"e5b426cd6ad13df5d408e9c375c025d59de30e380c5534715bd892df874ab057\",\n    \"https://deno.land/std@0.175.0/fs/exists.ts\": \"b8c8a457b71e9d7f29b9d2f87aad8dba2739cbe637e8926d6ba6e92567875f8e\",\n    \"https://deno.land/std@0.175.0/node/_core.ts\": \"32a72a2166688d0051db7771e76af823d87a19e84ed073604a0bf4fa2706403f\",\n    \"https://deno.land/std@0.175.0/node/_events.d.ts\": \"1347437fd6b084d7c9a4e16b9fe7435f00b030970086482edeeb3b179d0775af\",\n    \"https://deno.land/std@0.175.0/node/_events.mjs\": \"d4ba4e629abe3db9f1b14659fd5c282b7da8b2b95eaf13238eee4ebb142a2448\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_access.ts\": \"48a722db00fd34ec567c1d03c47f6b94d07658c658eeb7d9a10c6b823ebdefbd\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_appendFile.ts\": \"2e5230c88804f4b5bee29efa1ba723d71a53f9b0f85d5e6372509ba12e9c00c3\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_chmod.ts\": \"fcba6aa4fe2d9178746b5b4ae7f42a72a971007c855988f0e26ff8f694c3c212\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_chown.ts\": \"6a24414772d689f8e83b6f53f134420dc25d752bd5be56cade39e92f182c9c9a\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_close.ts\": \"8fc5819affb69fb5708f3babce49cd673133e939cebef0665099da78a0d0be7a\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_common.ts\": \"21caae4ab7c07c66244446c63c50291cc553d1224d3f6a0cd7bea688c6b2a815\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_constants.ts\": \"22ce5f8b07fa8fd7ba37718ad85f6655954b7585d21e6d0b9d73676c16ef1b15\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_copy.ts\": \"9074e3a1609b9ee10ca1a2d77e94836c57190e791a0878f7e03b2f0e4e0d5dfb\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_dir.ts\": \"26c16ef8003772c9cd2439b448530443ea09a1508a6d808a5913576c3d11882b\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_dirent.ts\": \"e8c30d8059336cb6b122738c487cb46c1bcfc4c99fd6d64186f04b4e1805be34\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_exists.ts\": \"012e8bf6a6a9b53f9e6451db6ddabf1b883a25e6aebb8aadf8958b57efffefd0\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_fdatasync.ts\": \"cfe9409aed4bfe707fb497fe5be449a678b4ae454c9068f3720138ff06f7a71f\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_fstat.ts\": \"b15968d0f0da997960f0814e52beee35aff5e04519f007c3ac1c431829a03ac4\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_fsync.ts\": \"902c1d4ef9b022c61a12c5f85db3ec4e14778019697cf453822313f9eab9516b\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_ftruncate.ts\": \"36d76a3d6b325345ba6fbef745ec1a39d6efb4472214ede8421449296fd25711\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_futimes.ts\": \"75b9aaa28588d94b9d8be3c5ca4b74595cde342d644afc9c5dda1e1dcc1e604f\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_link.ts\": \"5cfa4f02cbedf913d90618c1bf130796bc3cdd7cd0e59cf5defb05619ae10b8a\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_lstat.ts\": \"da6a26b4745dbb92eda21f07992d16497a6848fe2ded6a425ade4a2418262b57\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_mkdir.ts\": \"94e4341f9bbc3bae9f1474e86621d48101a4a863ce51fd6b1170ef244533c494\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_mkdtemp.ts\": \"33658ccb449f90d69305868b718f8fe8d72a2a8e2be7136ebd69ba313fd0b4a9\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_open.ts\": \"9f728953c07748a54a73bb9ff0013530e33556a688a359a554d5db5b4ed30d06\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_opendir.ts\": \"fe65a45b92b6b970da8f3acec15920cb5669c7a19fd07afa8ebcd248ec69740b\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_read.ts\": \"a0223081bc460a8af5d1bb01e59a44182629bf7bff7c583031912abf20ac6b04\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_readFile.ts\": \"2c155de6b568a4e5d3d089e58723355fc519de2d2c9422f7dd211cda2c8f36dc\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_readdir.ts\": \"85f742c2ad38bebb8ba5dee72b37a966fc4b42b10382a76a60d7a2dda0a6278c\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_readlink.ts\": \"d5d9746c1d3c76cce0be5045dbb3bfde100406a98f1d4db8243776a2fc5619af\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_realpath.ts\": \"671afd8bc1b33126d56155de3827d6ec55361631eec9f4944d7f91835d897329\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_rename.ts\": \"2fd973c38ab5c66d806a954914a2d2b6beec55308b6da0616837ba81946bba3b\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_rm.ts\": \"27c01d261a3631729f9406d9dc7be263a7adf240094ba9133da511169785023b\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_rmdir.ts\": \"d9a35aa265670aba4a6da10cb151139bd69762ccfb88e27f266c1260c244d3ec\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_stat.ts\": \"bf1ca585b624f5b183ff547f02ad40b51d47247a7fd5df84f8c27376e7a7c2d5\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_symlink.ts\": \"89752d75dd823be7ea2c0f2ca024b14c954f7d1507360abf883245f4b700464b\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_truncate.ts\": \"4333d191574be1d6ab20fdee346c0dd4868e5c9c5e8ee716e3b09bf562aee698\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_unlink.ts\": \"6a760088a99c7465d9da3cbd67a456a6207c9764c65926ce1e0d3172aab780a2\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_utimes.ts\": \"c433ef58bfd20d84d0f940c17575b496dcd4706e8dc86aea777c73f667164444\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_watch.ts\": \"2ed05b68759e1771515efa4c6d19db9c956cfbc79a715d61e4ce8f38ac12c966\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_write.d.ts\": \"a405627931c1a5a3160d3f1cf028761d51b50cd632d6602cb0f98c6b39c96b23\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_write.mjs\": \"595abc0d7be9ef3709b62bf09972c2836b25c945f4c531a6688b910e428e1b42\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_writeFile.ts\": \"c65f61a167e5f80f29a88147012ade2a81233c882e51c6a07f45a153f2316a58\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_writev.d.ts\": \"2cd3596fe24579debe43b587d5bb5845f6f0ce3913357376eb279511ce832d15\",\n    \"https://deno.land/std@0.175.0/node/_fs/_fs_writev.mjs\": \"54adae0d5e5148d2ee0690d04f7272dbccd1242ffbdf838778ac514c10197844\",\n    \"https://deno.land/std@0.175.0/node/_global.d.ts\": \"2d88342f38b4083b858998e27c706725fb03a74aa14ef8d985dc18438b5188e4\",\n    \"https://deno.land/std@0.175.0/node/_next_tick.ts\": \"9a3cf107d59b019a355d3cf32275b4c6157282e4b68ea85b46a799cb1d379305\",\n    \"https://deno.land/std@0.175.0/node/_process/exiting.ts\": \"6e336180aaabd1192bf99ffeb0d14b689116a3dec1dfb34a2afbacd6766e98ab\",\n    \"https://deno.land/std@0.175.0/node/_process/process.ts\": \"c96bb1f6253824c372f4866ee006dcefda02b7050d46759736e403f862d91051\",\n    \"https://deno.land/std@0.175.0/node/_process/stdio.mjs\": \"cf17727eac8da3a665851df700b5aca6a12bacc3ebbf33e63e4b919f80ba44a6\",\n    \"https://deno.land/std@0.175.0/node/_process/streams.mjs\": \"c1461c4dbf963a93a0ca8233467573a685bbde347562573761cc9435fd7080f6\",\n    \"https://deno.land/std@0.175.0/node/_stream.d.ts\": \"112e1a0677cd6db932c3ce0e6e5bbdc7a2ac1874572f449044ecc82afcf5ee2e\",\n    \"https://deno.land/std@0.175.0/node/_stream.mjs\": \"d6e2c86c1158ac65b4c2ca4fa019d7e84374ff12e21e2175345fe68c0823efe3\",\n    \"https://deno.land/std@0.175.0/node/_util/_util_callbackify.ts\": \"a7ffe799ac5f54f3a780ee1c9b190b94dc7dc8afbb430c0e1c73756638d25d64\",\n    \"https://deno.land/std@0.175.0/node/_utils.ts\": \"7fd55872a0cf9275e3c080a60e2fa6d45b8de9e956ebcde9053e72a344185884\",\n    \"https://deno.land/std@0.175.0/node/assert.ts\": \"52a682477f2b849b3e451a140d665faa2c26a9ac8f615191fe3d9ec18f55b0c8\",\n    \"https://deno.land/std@0.175.0/node/assertion_error.ts\": \"8d208eab48e50ed56fe0f82f755a0d471dc7cd0acd3947b51aa9764de7d30b86\",\n    \"https://deno.land/std@0.175.0/node/buffer.ts\": \"85617be2063eccaf177dbb84c7580d1e32023724ed14bd9df4e453b152a26167\",\n    \"https://deno.land/std@0.175.0/node/events.ts\": \"d2de352d509de11a375e2cb397d6b98f5fed4e562fc1d41be33214903a38e6b0\",\n    \"https://deno.land/std@0.175.0/node/fs.ts\": \"de13cb511655b594157b327cd11bb833cc96051409f34148f043e8a8a92d66a1\",\n    \"https://deno.land/std@0.175.0/node/fs/promises.ts\": \"5db686797cec9a6bc7b1460beb7e049ada81a43bbc0ff8231a26442261ec3fd0\",\n    \"https://deno.land/std@0.175.0/node/internal/assert.mjs\": \"1d50c20eeaf16a6d9c1d90347e497669cebc915f5ee238417a73847eb4c2f0de\",\n    \"https://deno.land/std@0.175.0/node/internal/buffer.d.ts\": \"bdfa991cd88cb02fd08bf8235d2618550e3e511c970b2a8f2e1a6885a2793cac\",\n    \"https://deno.land/std@0.175.0/node/internal/buffer.mjs\": \"e92303a3cc6d9aaabcd270a937ad9319825d9ba08cb332650944df4562029b27\",\n    \"https://deno.land/std@0.175.0/node/internal/crypto/_keys.ts\": \"8f3c3b5a141aa0331a53c205e9338655f1b3b307a08085fd6ff6dda6f7c4190b\",\n    \"https://deno.land/std@0.175.0/node/internal/crypto/constants.ts\": \"544d605703053218499b08214f2e25cf4310651d535b7ab995891c4b7a217693\",\n    \"https://deno.land/std@0.175.0/node/internal/error_codes.ts\": \"8495e33f448a484518d76fa3d41d34fc20fe03c14b30130ad8e936b0035d4b8b\",\n    \"https://deno.land/std@0.175.0/node/internal/errors.ts\": \"1c699b8a3cb93174f697a348c004b1c6d576b66688eac8a48ebb78e65c720aae\",\n    \"https://deno.land/std@0.175.0/node/internal/fixed_queue.ts\": \"62bb119afa5b5ae8fc0c7048b50502347bec82e2588017d0b250c4671d6eff8f\",\n    \"https://deno.land/std@0.175.0/node/internal/fs/streams.d.ts\": \"23571ff9af59d86307831b80823e440953f3e57b134ca7ec6e55b60b845d38de\",\n    \"https://deno.land/std@0.175.0/node/internal/fs/streams.mjs\": \"5de00d105009fb8cec6b6d0a6e6e6288ae40879cc64d9bf7a84852220be9fa34\",\n    \"https://deno.land/std@0.175.0/node/internal/fs/utils.mjs\": \"64b6dc17752fa861b46a0876647336ba24efe3b5130bd1826f1f2d59b9b374ed\",\n    \"https://deno.land/std@0.175.0/node/internal/hide_stack_frames.ts\": \"9dd1bad0a6e62a1042ce3a51eb1b1ecee2f246907bff44835f86e8f021de679a\",\n    \"https://deno.land/std@0.175.0/node/internal/idna.ts\": \"034043ac9273eb5ba83112c926dba1777775f1eca40e021c8703cd1720bedd9f\",\n    \"https://deno.land/std@0.175.0/node/internal/net.ts\": \"5538d31b595ac63d4b3e90393168bc65ace2f332c3317cffa2fd780070b2d86c\",\n    \"https://deno.land/std@0.175.0/node/internal/normalize_encoding.mjs\": \"fd1d9df61c44d7196432f6e8244621468715131d18cc79cd299fc78ac549f707\",\n    \"https://deno.land/std@0.175.0/node/internal/options.ts\": \"888f267c3fe8f18dc7b2f2fbdbe7e4a0fd3302ff3e99f5d6645601e924f3e3fb\",\n    \"https://deno.land/std@0.175.0/node/internal/primordials.mjs\": \"a72d86b5aa55d3d50b8e916b6a59b7cc0dc5a31da8937114b4a113ad5aa08c74\",\n    \"https://deno.land/std@0.175.0/node/internal/process/per_thread.mjs\": \"10142bbb13978c2f8f79778ad90f3a67a8ea6d8d2970f3dfc6bf2c6fff0162a2\",\n    \"https://deno.land/std@0.175.0/node/internal/querystring.ts\": \"479f30c136555dc3b6f09af7d0de8a70c753035c1d5b57acc696722028788323\",\n    \"https://deno.land/std@0.175.0/node/internal/readline/callbacks.mjs\": \"bdb129b140c3b21b5e08cdc3d8e43517ad818ac03f75197338d665cca1cbaed3\",\n    \"https://deno.land/std@0.175.0/node/internal/readline/utils.mjs\": \"c3dbf3a97c01ed14052cca3848f09e2fc24818c1822ceed57c33b9f0840f3b87\",\n    \"https://deno.land/std@0.175.0/node/internal/streams/destroy.mjs\": \"b665fc71178919a34ddeac8389d162a81b4bc693ff7dc2557fa41b3a91011967\",\n    \"https://deno.land/std@0.175.0/node/internal/streams/end-of-stream.mjs\": \"a4fb1c2e32d58dff440d4e716e2c4daaa403b3095304a028bb428575cfeed716\",\n    \"https://deno.land/std@0.175.0/node/internal/streams/utils.mjs\": \"f2fe2e6bdc506da24c758970890cc2a21642045b129dee618bd3827c60dd9e33\",\n    \"https://deno.land/std@0.175.0/node/internal/url.ts\": \"7e62e16520de552c130c354d9c725a2f5e2af453ff929a2009fa66ae445bbe14\",\n    \"https://deno.land/std@0.175.0/node/internal/util.mjs\": \"f7fe2e1ca5e66f550ad0856b9f5ee4d666f0c071fe212ea7fc7f37cfa81f97a5\",\n    \"https://deno.land/std@0.175.0/node/internal/util/comparisons.ts\": \"0da27292b2714c14873a798221189321ee044e52a9c5df99979f8415f1348665\",\n    \"https://deno.land/std@0.175.0/node/internal/util/debuglog.ts\": \"a2392980a65cc6916afc17fa6686242ee0e3b47bd98c792ff59358560b24185e\",\n    \"https://deno.land/std@0.175.0/node/internal/util/inspect.mjs\": \"11d7c9cab514b8e485acc3978c74b837263ff9c08ae4537fa18ad56bae633259\",\n    \"https://deno.land/std@0.175.0/node/internal/util/types.ts\": \"4f3625ea39111eaae1443c834e769b0c5ce9ea33b31d5a853b02af6a78105178\",\n    \"https://deno.land/std@0.175.0/node/internal/validators.mjs\": \"e02f2b02dd072a5d623970292588d541204dc82207b4c58985d933a5f4b382e6\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/_libuv_winerror.ts\": \"30c9569603d4b97a1f1a034d88a3f74800d5ea1f12fcc3d225c9899d4e1a518b\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/_listen.ts\": \"c6038be47116f7755c01fd98340a0d1e8e66ef874710ab59ed3f5607d50d7a25\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/_node.ts\": \"cb2389b0eab121df99853eb6a5e3a684e4537e065fb8bf2cca0cbf219ce4e32e\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/_timingSafeEqual.ts\": \"7d9732464d3c669ff07713868ce5d25bc974a06112edbfb5f017fc3c70c0853e\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/_utils.ts\": \"7c58a2fbb031a204dee9583ba211cf9c67922112fe77e7f0b3226112469e9fe1\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/_winerror.ts\": \"3e8cfdfe22e89f13d2b28529bab35155e6b1730c0221ec5a6fc7077dc037be13\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/ares.ts\": \"bdd34c679265a6c115a8cfdde000656837a0a0dcdb0e4c258e622e136e9c31b8\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/async_wrap.ts\": \"0dc5ae64eea2c9e57ab17887ef1573922245167ffe38e3685c28d636f487f1b7\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/buffer.ts\": \"31729e0537921d6c730ad0afea44a7e8a0a1044d070ade8368226cb6f7390c8b\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/cares_wrap.ts\": \"9b7247772167f8ed56acd0244a232d9d50e8d7c9cfc379f77f3d54cecc2f32ab\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/config.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/connection_wrap.ts\": \"7dd089ea46de38e4992d0f43a09b586e4cf04878fb06863c1cb8cb2ece7da521\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/constants.ts\": \"21ff9d1ee71d0a2086541083a7711842fc6ae25e264dbf45c73815aadce06f4c\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/contextify.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/credentials.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/crypto.ts\": \"29e8f94f283a2e7d4229d3551369c6a40c2af9737fad948cb9be56bef6c468cd\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/errors.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/fs.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/fs_dir.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/fs_event_wrap.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/handle_wrap.ts\": \"adf0b8063da2c54f26edd5e8ec50296a4d38e42716a70a229f14654b17a071d9\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/heap_utils.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/http_parser.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/icu.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/inspector.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/js_stream.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/messaging.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/mod.ts\": \"9fc65f7af1d35e2d3557539a558ea9ad7a9954eefafe614ad82d94bddfe25845\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/module_wrap.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/native_module.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/natives.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/node_file.ts\": \"21edbbc95653e45514aff252b6cae7bf127a4338cbc5f090557d258aa205d8a5\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/node_options.ts\": \"0b5cb0bf4379a39278d7b7bb6bb2c2751baf428fe437abe5ed3e8441fae1f18b\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/options.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/os.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/performance.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/pipe_wrap.ts\": \"e5429879551fb7195039986fe6da920a86971fad4342046cbf653643e6c85e21\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/process_methods.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/report.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/serdes.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/signal_wrap.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/spawn_sync.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/stream_wrap.ts\": \"452bff74d1db280a0cd78c75a95bb6d163e849e06e9638c4af405d40296bd050\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/string_decoder.ts\": \"54c3c1cbd5a9254881be58bf22637965dc69535483014dab60487e299cb95445\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/symbols.ts\": \"4dee2f3a400d711fd57fa3430b8de1fdb011e08e260b81fef5b81cc06ed77129\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/task_queue.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/tcp_wrap.ts\": \"cbede7224fcf0adc4b04e2e1222488a7a9c137807f143bd32cc8b1a121e0d4fa\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/timers.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/tls_wrap.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/trace_events.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/tty_wrap.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/types.ts\": \"5a658bf08975af30d0fad6fa6247274379be26ba3f023425bec03e61c74083ef\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/udp_wrap.ts\": \"cc86f7e51bf56fd619505cf9d4f77d7aae1526abdf295399dd277162d28ca6c1\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/url.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/util.ts\": \"808ff3b92740284184ab824adfc420e75398c88c8bccf5111f0c24ac18c48f10\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/uv.ts\": \"eb0048e30af4db407fb3f95563e30d70efd6187051c033713b0a5b768593a3a3\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/v8.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/worker.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/internal_binding/zlib.ts\": \"37d293009d1718205bf28e878e54a9f1ca24c1c320cee2416c20dc054104c6ea\",\n    \"https://deno.land/std@0.175.0/node/path.ts\": \"1c6aa9101554136525b368e8280f0f78136d4071dd71ad3a70477f27d9e4dd91\",\n    \"https://deno.land/std@0.175.0/node/path/_constants.ts\": \"2e2f68b8679cbf0ef118de8e5719e90cfb091de17d4a7c026c911b6772e6a247\",\n    \"https://deno.land/std@0.175.0/node/path/_interface.ts\": \"c67d76726d0f86ea62ec68d17f11d50680c4659a60a0ea6dcd2488109435b4ce\",\n    \"https://deno.land/std@0.175.0/node/path/_util.ts\": \"44deaf5bbd947eafb3439ea7208d0625e231c5f55c421fe83f5ef91218dcd28c\",\n    \"https://deno.land/std@0.175.0/node/path/common.ts\": \"ee7505ab01fd22de3963b64e46cff31f40de34f9f8de1fff6a1bd2fe79380000\",\n    \"https://deno.land/std@0.175.0/node/path/glob.ts\": \"b5fc2aed74aa7511cfd07d52dcd595cc18cd7ca431326a664e735d8905d85ce8\",\n    \"https://deno.land/std@0.175.0/node/path/mod.ts\": \"cad27b16a7a3a8c2bb3ad1ba68a63d11e4fb616d63fd55c95e399a0a3a927be2\",\n    \"https://deno.land/std@0.175.0/node/path/posix.ts\": \"a066e77f554358a82b4a693726faa41932f02f5bcd520f07afb6b2372e62484d\",\n    \"https://deno.land/std@0.175.0/node/path/separator.ts\": \"5cfefe182e88bc8138022475703a9b39b13250c79bf234cdc6e3be9afd639662\",\n    \"https://deno.land/std@0.175.0/node/path/win32.ts\": \"3a1b21948e0063cf1ac1c6834ef3ed633b5405f107be01aadfaedd2088b57eef\",\n    \"https://deno.land/std@0.175.0/node/process.ts\": \"6608012d6d51a17a7346f36079c574b9b9f81f1b5c35436489ad089f39757466\",\n    \"https://deno.land/std@0.175.0/node/querystring.ts\": \"2dce8068cb80ce2bf503aecd888be1b89827288352b6581e0fc401886d56cd86\",\n    \"https://deno.land/std@0.175.0/node/stream.ts\": \"09e348302af40dcc7dc58aa5e40fdff868d11d8d6b0cfb85cbb9c75b9fe450c7\",\n    \"https://deno.land/std@0.175.0/node/string_decoder.ts\": \"1a17e3572037c512cc5fc4b29076613e90f225474362d18da908cb7e5ccb7e88\",\n    \"https://deno.land/std@0.175.0/node/url.ts\": \"f8c6656f32728a447705a273e3d8a5118631c0b6560d13fc613901ec9a3f69d0\",\n    \"https://deno.land/std@0.175.0/node/util.ts\": \"4c12edeafde7e50dfe2d4022e383decb422c77858b938b093698cb7250c9e125\",\n    \"https://deno.land/std@0.175.0/node/util/types.ts\": \"461b2e1118fd32456967e14b99f01c892dee1e94d144d6b96e9d94eb086a9574\",\n    \"https://deno.land/std@0.175.0/path/_constants.ts\": \"e49961f6f4f48039c0dfed3c3f93e963ca3d92791c9d478ac5b43183413136e0\",\n    \"https://deno.land/std@0.175.0/path/_interface.ts\": \"6471159dfbbc357e03882c2266d21ef9afdb1e4aa771b0545e90db58a0ba314b\",\n    \"https://deno.land/std@0.175.0/path/_util.ts\": \"d7abb1e0dea065f427b89156e28cdeb32b045870acdf865833ba808a73b576d0\",\n    \"https://deno.land/std@0.175.0/path/common.ts\": \"ee7505ab01fd22de3963b64e46cff31f40de34f9f8de1fff6a1bd2fe79380000\",\n    \"https://deno.land/std@0.175.0/path/glob.ts\": \"d479e0a695621c94d3fd7fe7abd4f9499caf32a8de13f25073451c6ef420a4e1\",\n    \"https://deno.land/std@0.175.0/path/mod.ts\": \"4b83694ac500d7d31b0cdafc927080a53dc0c3027eb2895790fb155082b0d232\",\n    \"https://deno.land/std@0.175.0/path/posix.ts\": \"8b7c67ac338714b30c816079303d0285dd24af6b284f7ad63da5b27372a2c94d\",\n    \"https://deno.land/std@0.175.0/path/separator.ts\": \"0fb679739d0d1d7bf45b68dacfb4ec7563597a902edbaf3c59b50d5bcadd93b1\",\n    \"https://deno.land/std@0.175.0/path/win32.ts\": \"d186344e5583bcbf8b18af416d13d82b35a317116e6460a5a3953508c3de5bba\",\n    \"https://deno.land/std@0.175.0/streams/write_all.ts\": \"3b2e1ce44913f966348ce353d02fa5369e94115181037cd8b602510853ec3033\",\n    \"https://deno.land/std@0.175.0/testing/_diff.ts\": \"1a3c044aedf77647d6cac86b798c6417603361b66b54c53331b312caeb447aea\",\n    \"https://deno.land/std@0.175.0/testing/_format.ts\": \"a69126e8a469009adf4cf2a50af889aca364c349797e63174884a52ff75cf4c7\",\n    \"https://deno.land/std@0.175.0/testing/asserts.ts\": \"984ab0bfb3faeed92ffaa3a6b06536c66811185328c5dd146257c702c41b01ab\",\n    \"https://deno.land/std@0.175.0/types.d.ts\": \"220ed56662a0bd393ba5d124aa6ae2ad36a00d2fcbc0e8666a65f4606aaa9784\",\n    \"https://esm.sh/@babel/core@7.20.12\": \"3861b5449eef4e85e3d43eb61b5d1a031ceb641f35616a9b33f2751e2e6f5060\",\n    \"https://esm.sh/@babel/preset-env@7.20.2\": \"7553a2bdd9238358f73b2adc4f8eae3576d0b11d2e4dea3031a9fc18362dd646\",\n    \"https://esm.sh/v106/@ampproject/remapping@2.2.0/deno/remapping.js\": \"dd03e541f1504f91e9bc27fc45571475b63692aa36945bc46990763bd8e2b05a\",\n    \"https://esm.sh/v106/@babel/code-frame@7.18.6/deno/code-frame.js\": \"ad2600ed5c49087e29e3c15993a628f26fc40b93d4b4c52e5daf9532eb9734d7\",\n    \"https://esm.sh/v106/@babel/compat-data@7.20.14/deno/corejs2-built-ins.js\": \"40d911d7f9867ac8fde6195868488c555de3ada8bd67ba31e764a795fe6dd87d\",\n    \"https://esm.sh/v106/@babel/compat-data@7.20.14/deno/native-modules.js\": \"624b143f7a90918cd12fcf68fe3938b14cf22ebe6a4bca70df284c9c2299abe7\",\n    \"https://esm.sh/v106/@babel/compat-data@7.20.14/deno/overlapping-plugins.js\": \"aec7b68029a9b06bd9f445044bae6f6a53c3879c6e90ea241bf515ce6dd734d4\",\n    \"https://esm.sh/v106/@babel/compat-data@7.20.14/deno/plugin-bugfixes.js\": \"f465f5a395fa34032b022107e462f96eb5d44b33d7986115d73f4796b730642f\",\n    \"https://esm.sh/v106/@babel/compat-data@7.20.14/deno/plugins.js\": \"4055bc7e7f4753dbeb64f5bccd68ca3b173aac0c977499fed331f1d5f62f6b26\",\n    \"https://esm.sh/v106/@babel/core@7.20.12/deno/core.js\": \"27a7380554109c90cda300d24ecb01e38e6c8f928266f7a62c82270ba0db7007\",\n    \"https://esm.sh/v106/@babel/generator@7.20.14/deno/generator.js\": \"deb9597468cfbab62c26a5f42af52b89d8ea344d06fbf47b51998a07c0d22b0a\",\n    \"https://esm.sh/v106/@babel/helper-annotate-as-pure@7.18.6/deno/helper-annotate-as-pure.js\": \"514e9cb799caaaacd266748e3fbc9f7886db0375b92fdc7b7e7ca37868efdd89\",\n    \"https://esm.sh/v106/@babel/helper-builder-binary-assignment-operator-visitor@7.18.9/deno/helper-builder-binary-assignment-operator-visitor.js\": \"c53f666f9e6a169a84437539e82d291ac4fafe4b9f4a501cfc4f8ffaa7d5693f\",\n    \"https://esm.sh/v106/@babel/helper-compilation-targets@7.20.7/deno/helper-compilation-targets.js\": \"639ba158dd951c48684f83711a9a2459e204dfbcd527283858733c476533f7e9\",\n    \"https://esm.sh/v106/@babel/helper-create-class-features-plugin@7.20.12/deno/helper-create-class-features-plugin.js\": \"fe224c239b7490f4f2a57216808ef8903b493bfb5c8fe8e81d232eaf5068294d\",\n    \"https://esm.sh/v106/@babel/helper-create-regexp-features-plugin@7.20.5/deno/helper-create-regexp-features-plugin.js\": \"5b48378375aeb0654d6e133ef3caa937bb2b45a21c580290831cb5d07d64102a\",\n    \"https://esm.sh/v106/@babel/helper-define-polyfill-provider@0.3.3/deno/helper-define-polyfill-provider.js\": \"d8fd60166f9fcf7032816bd6266fc54eabf8086efaf3cc366d3a0abc5e2da07e\",\n    \"https://esm.sh/v106/@babel/helper-environment-visitor@7.18.9/deno/helper-environment-visitor.js\": \"389fc43517b0bf0a65f4e1e6f7b53f392fdeea1609a803a1fb25065df4c54ead\",\n    \"https://esm.sh/v106/@babel/helper-explode-assignable-expression@7.18.6/deno/helper-explode-assignable-expression.js\": \"93ffd54db1f87e754e031f1ee3786bf2c5abbae92d4a33fd6ce23d20772c064b\",\n    \"https://esm.sh/v106/@babel/helper-function-name@7.19.0/deno/helper-function-name.js\": \"c742f28aa4c1bd338d152d06c838ef6d22d3f2583923014dfca884f0d416f41e\",\n    \"https://esm.sh/v106/@babel/helper-hoist-variables@7.18.6/deno/helper-hoist-variables.js\": \"4951780601644f1707648b931208bab961d83cf9081246133937eba4ec670385\",\n    \"https://esm.sh/v106/@babel/helper-member-expression-to-functions@7.20.7/deno/helper-member-expression-to-functions.js\": \"81d1d1ff9f359fd88d6b4c83651924ac645988fe9f866026c24a1514f48d8f2b\",\n    \"https://esm.sh/v106/@babel/helper-module-imports@7.18.6/deno/helper-module-imports.js\": \"1a4ce2396b1af2459badc297d2b355eec8fb93fade2635249ed67029e4e0469d\",\n    \"https://esm.sh/v106/@babel/helper-module-transforms@7.20.11/deno/helper-module-transforms.js\": \"9831919ce9760957521e2d2794f4e46bb465f2c012f836de84769edafe8f6447\",\n    \"https://esm.sh/v106/@babel/helper-optimise-call-expression@7.18.6/deno/helper-optimise-call-expression.js\": \"506671c6589413103363af9a45d0c3043e2c4db036a4d8f7a95ad0b202a44af1\",\n    \"https://esm.sh/v106/@babel/helper-plugin-utils@7.20.2/deno/helper-plugin-utils.js\": \"27bf9f40d1b0b5fb83dd52aacf42df8e7b7eb7635b6da4c17413b4f34d290d43\",\n    \"https://esm.sh/v106/@babel/helper-remap-async-to-generator@7.18.9/deno/helper-remap-async-to-generator.js\": \"eafd27f6bb74530f067815c146cee92326bfff0b9114b346b7a710ddf8fe0058\",\n    \"https://esm.sh/v106/@babel/helper-replace-supers@7.20.7/deno/helper-replace-supers.js\": \"aaa15db0f5c732d9062dfc02d0769e461068b199161661fad5e14eca03c9418b\",\n    \"https://esm.sh/v106/@babel/helper-simple-access@7.20.2/deno/helper-simple-access.js\": \"55cb962a731d27b9ea0aeeb7ffabf85d66f3c6596c489859cbe8ee8ab36f597d\",\n    \"https://esm.sh/v106/@babel/helper-skip-transparent-expression-wrappers@7.20.0/deno/helper-skip-transparent-expression-wrappers.js\": \"c133b80edbc2a6c27d47e83a4fe848cca0353a6a88b804138698470e294134ec\",\n    \"https://esm.sh/v106/@babel/helper-split-export-declaration@7.18.6/deno/helper-split-export-declaration.js\": \"d8ff95107ac057c219af91f4ff123ef5e3a1a885dbf848b8fb7f66d9709d8251\",\n    \"https://esm.sh/v106/@babel/helper-string-parser@7.19.4/deno/helper-string-parser.js\": \"8fd4f88a62fe4c4f5d5fc668b1d2fe177a12d741ab23de16acc1bbf2cd84b1cb\",\n    \"https://esm.sh/v106/@babel/helper-validator-identifier@7.19.1/deno/helper-validator-identifier.js\": \"0420a01d841c49fc6a0d0eaca9a97fdfb3c35795d62fb0be720f07df2c27452e\",\n    \"https://esm.sh/v106/@babel/helper-validator-option@7.18.6/deno/helper-validator-option.js\": \"efd82805c89c9a608e0540156627b9a0fcaf015ae6aab7a5376366657e6ccaaf\",\n    \"https://esm.sh/v106/@babel/helper-wrap-function@7.20.5/deno/helper-wrap-function.js\": \"ac1168ed3b5a3ac2eb1623b32797454c69010b20d2d490d4775237f548737133\",\n    \"https://esm.sh/v106/@babel/helpers@7.20.13/deno/helpers.js\": \"fe0f12b1db86c16d15fe94cdb3e00bc10e11393b389808075d1542102834c8b2\",\n    \"https://esm.sh/v106/@babel/highlight@7.18.6/deno/highlight.js\": \"2704698b19d2c450dfc00d302da22d0370513dd3b7f45b396dcbf9653e1c358d\",\n    \"https://esm.sh/v106/@babel/parser@7.20.13/deno/parser.js\": \"d12f2a2f9ff8526931c638d0a8069dfd35eebca81514e2d85b146e188e8c3249\",\n    \"https://esm.sh/v106/@babel/parser@7.20.13/typings/babel-parser.d.ts\": \"365101960e8f56d9d8bfc6c4328fd7780644d6fef3fb5587a900963d12c0ac2a\",\n    \"https://esm.sh/v106/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression@7.18.6/deno/plugin-bugfix-safari-id-destructuring-collision-in-function-expression.js\": \"7ba715db381bee011da34badbe2fa22eefc53dd11dfdd2221aeb1e39c982f561\",\n    \"https://esm.sh/v106/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining@7.20.7/deno/plugin-bugfix-v8-spread-parameters-in-optional-chaining.js\": \"8cc4b06c65ba92edb2c946448c8a05d932a4f05a47b7102cd70a801f065ee89c\",\n    \"https://esm.sh/v106/@babel/plugin-proposal-async-generator-functions@7.20.7/deno/plugin-proposal-async-generator-functions.js\": \"81013c1f3059ba50d3e659b56f45aa2a644df2a010a5bfad00ff136b9d7b9ed7\",\n    \"https://esm.sh/v106/@babel/plugin-proposal-class-properties@7.18.6/deno/plugin-proposal-class-properties.js\": \"60880594e211299975563cda6fe8427ccb8ba0be367c90bc9b3745e5c9f4188c\",\n    \"https://esm.sh/v106/@babel/plugin-proposal-class-static-block@7.20.7/deno/plugin-proposal-class-static-block.js\": \"0c6f0ce054cf554b32449ba6985016b295e28d8a22dab71df1625c5e0254af72\",\n    \"https://esm.sh/v106/@babel/plugin-proposal-dynamic-import@7.18.6/deno/plugin-proposal-dynamic-import.js\": \"0dcba7324f7f59f50de20175a036d7f44e207e46b909c778df73932029d92b21\",\n    \"https://esm.sh/v106/@babel/plugin-proposal-export-namespace-from@7.18.9/deno/plugin-proposal-export-namespace-from.js\": \"bda5f190781f4c011398975c96cbf15d355a077bc87ac60150e6d67a56fd94b8\",\n    \"https://esm.sh/v106/@babel/plugin-proposal-json-strings@7.18.6/deno/plugin-proposal-json-strings.js\": \"6cf1fe32603a874930baea508e662039c59e299f362c20c998cc2cb023ad4824\",\n    \"https://esm.sh/v106/@babel/plugin-proposal-logical-assignment-operators@7.20.7/deno/plugin-proposal-logical-assignment-operators.js\": \"f681ddf81d6c5fbec9ff65bd187d7ebb8ce153ca3cfed9525b227dfbe0faf545\",\n    \"https://esm.sh/v106/@babel/plugin-proposal-nullish-coalescing-operator@7.18.6/deno/plugin-proposal-nullish-coalescing-operator.js\": \"5969afbcd611e2c5244d07c2e73c354af63b8b629a83c0b096c0d625ce7bd64a\",\n    \"https://esm.sh/v106/@babel/plugin-proposal-numeric-separator@7.18.6/deno/plugin-proposal-numeric-separator.js\": \"6e8633128d3f51e48f207ba5f17f700beb412a063205074cacf1a1221b1206da\",\n    \"https://esm.sh/v106/@babel/plugin-proposal-object-rest-spread@7.20.7/deno/plugin-proposal-object-rest-spread.js\": \"683d05e6868edff970fb4dd9f7b420592f78d437cd4d25f811e0067da982c125\",\n    \"https://esm.sh/v106/@babel/plugin-proposal-optional-catch-binding@7.18.6/deno/plugin-proposal-optional-catch-binding.js\": \"f0b30640819b0e4dc243da0e842e87685e10e890cadca2b04e9c8d9ccb0e1622\",\n    \"https://esm.sh/v106/@babel/plugin-proposal-optional-chaining@7.20.7/deno/plugin-proposal-optional-chaining.js\": \"e3b3880b93299d4139348371fd594c023fad7651795dea795ae91f607d2252cc\",\n    \"https://esm.sh/v106/@babel/plugin-proposal-private-methods@7.18.6/deno/plugin-proposal-private-methods.js\": \"6191c050816f059e91cf827739afa23a8c44cdbec602474ca58aa758ca67eb73\",\n    \"https://esm.sh/v106/@babel/plugin-proposal-private-property-in-object@7.20.5/deno/plugin-proposal-private-property-in-object.js\": \"37b01b96563c14d47787e4d69e01b92188aeb302d36d7a6e8d0d7af1688895a4\",\n    \"https://esm.sh/v106/@babel/plugin-proposal-unicode-property-regex@7.18.6/deno/plugin-proposal-unicode-property-regex.js\": \"a64677e6745df204a66ca8c706b9c4baa7505320931856633fcb0ffd0049fdb1\",\n    \"https://esm.sh/v106/@babel/plugin-syntax-async-generators@7.8.4/deno/plugin-syntax-async-generators.js\": \"ac2a699d8df844fb8a254bc04d1f03effa17eae493a54ca86f6bfaa88619f2ba\",\n    \"https://esm.sh/v106/@babel/plugin-syntax-class-properties@7.12.13/deno/plugin-syntax-class-properties.js\": \"ff394862020bfe67545a7e18a92ea6284ad20b9d90125d6ad16d240611f80311\",\n    \"https://esm.sh/v106/@babel/plugin-syntax-class-static-block@7.14.5/deno/plugin-syntax-class-static-block.js\": \"3db9aa0c7005d643ef18cdca5ee038af50091667cd39cb969392293130e22ab6\",\n    \"https://esm.sh/v106/@babel/plugin-syntax-dynamic-import@7.8.3/deno/plugin-syntax-dynamic-import.js\": \"778c2b48d281339ae031231c3d7d1c72aed3dd31a83f819810016d9e01a60e0a\",\n    \"https://esm.sh/v106/@babel/plugin-syntax-export-namespace-from@7.8.3/deno/plugin-syntax-export-namespace-from.js\": \"bf452c9454585d44252fa2d4536918ac5dfb934b29b024e54fe8bb36e8efd61d\",\n    \"https://esm.sh/v106/@babel/plugin-syntax-import-assertions@7.20.0/deno/plugin-syntax-import-assertions.js\": \"13d8905d7a0c160e88546715ed141adaf75a1ab5561168d486885eb5167eca03\",\n    \"https://esm.sh/v106/@babel/plugin-syntax-json-strings@7.8.3/deno/plugin-syntax-json-strings.js\": \"e83fcb79cca3c44b75b9f224ce664b98bc698eba2fa5e45ce07a7282b9b4f1f0\",\n    \"https://esm.sh/v106/@babel/plugin-syntax-logical-assignment-operators@7.10.4/deno/plugin-syntax-logical-assignment-operators.js\": \"39220dc36c8821588572a21a01992075c8048e868b41ce301e102c7a51500590\",\n    \"https://esm.sh/v106/@babel/plugin-syntax-nullish-coalescing-operator@7.8.3/deno/plugin-syntax-nullish-coalescing-operator.js\": \"428ec9476e1434099cb5d8122faf91f3bf69fa974e58ab0bdf4a3761facd7d46\",\n    \"https://esm.sh/v106/@babel/plugin-syntax-numeric-separator@7.10.4/deno/plugin-syntax-numeric-separator.js\": \"73755ec9ca1582fa3f61edbbdf490f2017f484d31f18651ab98847b15f15be90\",\n    \"https://esm.sh/v106/@babel/plugin-syntax-object-rest-spread@7.8.3/deno/plugin-syntax-object-rest-spread.js\": \"241f983c19ff0f77284623f1e7caec0729205ace9199091c1b3f7ce398179fc3\",\n    \"https://esm.sh/v106/@babel/plugin-syntax-optional-catch-binding@7.8.3/deno/plugin-syntax-optional-catch-binding.js\": \"297197ec8806ea56e9d7e25855dcc1877392f6ee5e799346f112fb5656496b15\",\n    \"https://esm.sh/v106/@babel/plugin-syntax-optional-chaining@7.8.3/deno/plugin-syntax-optional-chaining.js\": \"74e9a98bb848470df8629fd5b1e23cd39b8c6acd1bd822b88e0516e65fe4831e\",\n    \"https://esm.sh/v106/@babel/plugin-syntax-private-property-in-object@7.14.5/deno/plugin-syntax-private-property-in-object.js\": \"f9a0ed6fc7a8e2fcf526d2a6aa93b0b460523e5858d66c5ef97da21d9a84a43d\",\n    \"https://esm.sh/v106/@babel/plugin-syntax-top-level-await@7.14.5/deno/plugin-syntax-top-level-await.js\": \"ba53c89fde2eb8ccad932216237caa3cc4397282af66fb45d6d449d23ca6b613\",\n    \"https://esm.sh/v106/@babel/plugin-transform-arrow-functions@7.20.7/deno/plugin-transform-arrow-functions.js\": \"90edef6a7717837e5e53e9a2e01ad6fa085fc2003dc7065cf10db570d99f0103\",\n    \"https://esm.sh/v106/@babel/plugin-transform-async-to-generator@7.20.7/deno/plugin-transform-async-to-generator.js\": \"929d261be54cd44abd2895d660c411026cf85aabe5964b67683dce4862c07c77\",\n    \"https://esm.sh/v106/@babel/plugin-transform-block-scoped-functions@7.18.6/deno/plugin-transform-block-scoped-functions.js\": \"4c30611e686f029eca10ecad0136590b8250039791ceacbb70912ae7573b82f0\",\n    \"https://esm.sh/v106/@babel/plugin-transform-block-scoping@7.20.15/deno/plugin-transform-block-scoping.js\": \"fab1c3f6ecd6d05d979606858eabb36ad1c787677366e8a8bf930d385bd8558e\",\n    \"https://esm.sh/v106/@babel/plugin-transform-classes@7.20.7/deno/plugin-transform-classes.js\": \"d2c3d6e8b4fb89f79eb4fd07333c5acd71e3af529df264dc169a7ed43e598ba3\",\n    \"https://esm.sh/v106/@babel/plugin-transform-computed-properties@7.20.7/deno/plugin-transform-computed-properties.js\": \"34fd438bb229d7bba5284f103ba93cc0a847a1cf9bb1936bf8343e2d0762d396\",\n    \"https://esm.sh/v106/@babel/plugin-transform-destructuring@7.20.7/deno/plugin-transform-destructuring.js\": \"241bd968ce26e3f4b2eb6bc1e50037bc0b1fe789c558cd49cdf19d38b51e6a8c\",\n    \"https://esm.sh/v106/@babel/plugin-transform-dotall-regex@7.18.6/deno/plugin-transform-dotall-regex.js\": \"3135e3cdb3cc6798bc3b13ab27ae7ff43ac8077b5ffc9b51f1a652e757711773\",\n    \"https://esm.sh/v106/@babel/plugin-transform-duplicate-keys@7.18.9/deno/plugin-transform-duplicate-keys.js\": \"61d2231a0e2bf46e1988362c3e81e53d3f0e9fe6dc31fc03b49624faa4fce268\",\n    \"https://esm.sh/v106/@babel/plugin-transform-exponentiation-operator@7.18.6/deno/plugin-transform-exponentiation-operator.js\": \"9d49f815beedeec74e2ef16fc34bc94e4f7ae54e6bb210a31092ea59d4310e6a\",\n    \"https://esm.sh/v106/@babel/plugin-transform-for-of@7.18.8/deno/plugin-transform-for-of.js\": \"7732f67f75363f5c72c44960dd66aa4f0f68a1fafb4a6f5d98135da3621cccff\",\n    \"https://esm.sh/v106/@babel/plugin-transform-function-name@7.18.9/deno/plugin-transform-function-name.js\": \"def66951126d94e3038ac53cfc311a5cf064fa3b18c59444580ed6f89e525dd2\",\n    \"https://esm.sh/v106/@babel/plugin-transform-literals@7.18.9/deno/plugin-transform-literals.js\": \"cb4db6bb4e272264f13ee0e7ff4fb97e050da94e1c95a074eef44b08404c191a\",\n    \"https://esm.sh/v106/@babel/plugin-transform-member-expression-literals@7.18.6/deno/plugin-transform-member-expression-literals.js\": \"f26357ca2768c2f380d1793b0b5e85d5f4e2f3a4c09d349081f464232500f02c\",\n    \"https://esm.sh/v106/@babel/plugin-transform-modules-amd@7.20.11/deno/plugin-transform-modules-amd.js\": \"248da9883467973352524b13ec8cb8528a624e65a1b9cc6fbb0b8781d5e02802\",\n    \"https://esm.sh/v106/@babel/plugin-transform-modules-commonjs@7.20.11/deno/plugin-transform-modules-commonjs.js\": \"6916bf59608dc6c771b772f2b8d63f0b8d93a6f15a33d641de3b985a2076d2be\",\n    \"https://esm.sh/v106/@babel/plugin-transform-modules-systemjs@7.20.11/deno/plugin-transform-modules-systemjs.js\": \"2977ff6250560bbca2633241e9ddf8f287048bf810e83e5e6a967dbf11f968e4\",\n    \"https://esm.sh/v106/@babel/plugin-transform-modules-umd@7.18.6/deno/plugin-transform-modules-umd.js\": \"8813bdf4862ef89f6507224a582aba350e5896ac5427a491d662bae5a81d6dd4\",\n    \"https://esm.sh/v106/@babel/plugin-transform-named-capturing-groups-regex@7.20.5/deno/plugin-transform-named-capturing-groups-regex.js\": \"e914fd2b4ea981a19287650633a8ed128f30c28bf0c760ea26281b1063b0916b\",\n    \"https://esm.sh/v106/@babel/plugin-transform-new-target@7.18.6/deno/plugin-transform-new-target.js\": \"db809fe065e3aa03d1aba3a2b58bede0a4401973a911a25ce84341fa3614e3fd\",\n    \"https://esm.sh/v106/@babel/plugin-transform-object-super@7.18.6/deno/plugin-transform-object-super.js\": \"a44eb2c337744722844c4980478d1f5a5fa885e4cb08954b8359896b2032e978\",\n    \"https://esm.sh/v106/@babel/plugin-transform-parameters@7.20.7/deno/plugin-transform-parameters.js\": \"a1c8666959b86eb132d6d0179a90b44287edc31ee7a96163a5ef05f078943c0c\",\n    \"https://esm.sh/v106/@babel/plugin-transform-property-literals@7.18.6/deno/plugin-transform-property-literals.js\": \"8c3dad09f0f4e6383930593cd52675efefcebca42685ebf0d9e8eff3e533ce54\",\n    \"https://esm.sh/v106/@babel/plugin-transform-regenerator@7.20.5/deno/plugin-transform-regenerator.js\": \"193de1e8808049ff65d90f5e1bb14e05c6958f450ec18167942c9e6e82855d36\",\n    \"https://esm.sh/v106/@babel/plugin-transform-reserved-words@7.18.6/deno/plugin-transform-reserved-words.js\": \"614e2bfc418b2f2cd6c5cacd9a08c299d19741df35a006412e7aa89588389b03\",\n    \"https://esm.sh/v106/@babel/plugin-transform-shorthand-properties@7.18.6/deno/plugin-transform-shorthand-properties.js\": \"941693a132a32942ab46588010e64920db96dfdbc781f836d32dc5b0aa91c3ab\",\n    \"https://esm.sh/v106/@babel/plugin-transform-spread@7.20.7/deno/plugin-transform-spread.js\": \"1ae3aa05970b603d896da456f0645d753181680f063c7d850d0b827deba1b5cf\",\n    \"https://esm.sh/v106/@babel/plugin-transform-sticky-regex@7.18.6/deno/plugin-transform-sticky-regex.js\": \"c31178c36e55285aedc689e566760a2f7657501cee4e10f76f5a3cf616b8d915\",\n    \"https://esm.sh/v106/@babel/plugin-transform-template-literals@7.18.9/deno/plugin-transform-template-literals.js\": \"8aae360f35ab90b3e4dca4d31f80903c9446fb25b87060c35571c25ec3d6033c\",\n    \"https://esm.sh/v106/@babel/plugin-transform-typeof-symbol@7.18.9/deno/plugin-transform-typeof-symbol.js\": \"5400741f2ce46be077ecaef2365fe1ae612646a4120843d4b18a934d55d9c2c5\",\n    \"https://esm.sh/v106/@babel/plugin-transform-unicode-escapes@7.18.10/deno/plugin-transform-unicode-escapes.js\": \"4f90b881d4622f584f7bd4e61f67a44e29263a4d8e7c878a91cca8506ee7be9b\",\n    \"https://esm.sh/v106/@babel/plugin-transform-unicode-regex@7.18.6/deno/plugin-transform-unicode-regex.js\": \"78df41f3ae70a037500ed86ffc688e6e3bb3786f1a10476c4546395370868f24\",\n    \"https://esm.sh/v106/@babel/preset-env@7.20.2/deno/preset-env.js\": \"ef29f9fc1f4476f0bbf911fb39f872daac8cffd9f072073f7aa7123718a50940\",\n    \"https://esm.sh/v106/@babel/preset-modules@0.1.5/deno/lib/plugins/transform-async-arrows-in-class.js\": \"a516a479ebefb1e1c7627148d743592d48dd4917c8d1c24bec7987266d079f19\",\n    \"https://esm.sh/v106/@babel/preset-modules@0.1.5/deno/lib/plugins/transform-edge-default-parameters.js\": \"039099dbb94255418dc1cd58234d3b68ad3db4300f49f76b0d1330afb895a299\",\n    \"https://esm.sh/v106/@babel/preset-modules@0.1.5/deno/lib/plugins/transform-edge-function-name.js\": \"49fa6f9e23b12a15be78c267d2ff7b3ffde589bf96ac2c46e6e68f17514753a1\",\n    \"https://esm.sh/v106/@babel/preset-modules@0.1.5/deno/lib/plugins/transform-safari-block-shadowing.js\": \"aadb4c16ffff235540a12273e24093a617ae0bb7369a1ed250f6d856525ab9ea\",\n    \"https://esm.sh/v106/@babel/preset-modules@0.1.5/deno/lib/plugins/transform-safari-for-shadowing.js\": \"681019328a367953a19e761fd8c3c37b1047cc7c520f0e30090c3b70bbc8b1e5\",\n    \"https://esm.sh/v106/@babel/preset-modules@0.1.5/deno/lib/plugins/transform-tagged-template-caching.js\": \"faba073a785d70fed5117e730fcb28578b0c7b77eda115a88594c085ff560ec1\",\n    \"https://esm.sh/v106/@babel/runtime@7.20.13/deno/helpers/interopRequireDefault.js\": \"8e1a7eeef2b8369e016a10b52245f2d0649693486381c13f02c30276e06e167d\",\n    \"https://esm.sh/v106/@babel/template@7.20.7/deno/template.js\": \"2ccd7dd3da29adf8d107eb6a8ab565ecbef8ba9a37ae9b33d67816fd43fe1a66\",\n    \"https://esm.sh/v106/@babel/traverse@7.20.13/deno/traverse.js\": \"2642c89955ae506047eb65462bdd500f1f30e1c3dff371d2f2f4e0f9504f076a\",\n    \"https://esm.sh/v106/@babel/types@7.20.7/deno/types.js\": \"2d0c385833dfb6be9a0d8e14549388df205d10a648b35098ee847a361a56b9ee\",\n    \"https://esm.sh/v106/@babel/types@7.20.7/lib/index-legacy.d.ts\": \"500cd3a6b69408560fd50b7386c5bf0f1a11da7ece18357c8ca5cb4f21ff9f74\",\n    \"https://esm.sh/v106/@jridgewell/gen-mapping@0.1.1/deno/gen-mapping.js\": \"067773c42d72867809d7bb5d5978c5929d55dbb5ece904b27ca3876026b078d5\",\n    \"https://esm.sh/v106/@jridgewell/gen-mapping@0.3.2/deno/gen-mapping.js\": \"c17bf536a324f55ce356ab94561dd60df73722463c4c44fdb63079556979573d\",\n    \"https://esm.sh/v106/@jridgewell/resolve-uri@3.1.0/deno/resolve-uri.js\": \"532be46eb58021c43ac0b7648bbb6b010aa37fbb79d14267b4c5833df63379a3\",\n    \"https://esm.sh/v106/@jridgewell/set-array@1.1.2/deno/set-array.js\": \"6209cc2b94c3abd764bf7e0c58d2de5a82f743b53af9c14d42481ff6a9742538\",\n    \"https://esm.sh/v106/@jridgewell/sourcemap-codec@1.4.14/deno/sourcemap-codec.js\": \"37c1afa7832d355bc9586ebe40edf9cfdcb728996ae4fb890b79c9a01b61e5b9\",\n    \"https://esm.sh/v106/@jridgewell/trace-mapping@0.3.17/deno/trace-mapping.js\": \"8f07d8d4bbb2c9c525a3e64aa6f7461db57598abba6506384acca59de6a0d17c\",\n    \"https://esm.sh/v106/@types/babel__core@7.20.0/index.d.ts\": \"311af0473116345d23c092587bd583263776019e906ac877bdfd809477110cf3\",\n    \"https://esm.sh/v106/@types/babel__generator@7.6.4/index.d.ts\": \"c465296b6632976d06d490ec7db93347ec764d2fb8577033e436a8bed919fa04\",\n    \"https://esm.sh/v106/@types/babel__preset-env@7.9.2/index.d.ts\": \"f59e11c58af9c0b11c963414efb620b636df11a4bac4b48f27807a620d039ec5\",\n    \"https://esm.sh/v106/@types/babel__template@7.4.1/index.d.ts\": \"383d4f5e1b156eb46c4ff1c90dd1e4f542a2bd25961247abe7e496721d223db8\",\n    \"https://esm.sh/v106/@types/babel__traverse@7.18.3/index.d.ts\": \"bb311c1adbeeb21c79a7d91a02cc2b92cc0c57a4a8ea6507c13555dc30fc8ac6\",\n    \"https://esm.sh/v106/ansi-styles@3.2.1/deno/ansi-styles.js\": \"a19e74151a886b6cb83263cc1e01dd8c1881833be460542067df3539f694c957\",\n    \"https://esm.sh/v106/babel-plugin-polyfill-corejs2@0.3.3/deno/babel-plugin-polyfill-corejs2.js\": \"aae1370982390ec0898e47b5d98a3f60dfb2f46c714448a4da97b1e6be6967b0\",\n    \"https://esm.sh/v106/babel-plugin-polyfill-corejs3@0.6.0/deno/babel-plugin-polyfill-corejs3.js\": \"717f1b035440818ab1d88bd2db6c9d38009be87bd081e795f2789c0ed3ec7f49\",\n    \"https://esm.sh/v106/babel-plugin-polyfill-regenerator@0.4.1/deno/babel-plugin-polyfill-regenerator.js\": \"4a2d620576bd0d8f9e48e31d0705ed23899a2a59193360901dafcd156cf8d654\",\n    \"https://esm.sh/v106/browserslist@4.21.5/deno/browserslist.js\": \"094452ac2f4b6396f2b26d62632b5769de9fa076066a9c61c7aa1a7ea8c872c1\",\n    \"https://esm.sh/v106/caniuse-lite@1.0.30001449/deno/data/agents.js\": \"e28db4a87a9877312480283b18a28f4841a45e7e6837a639c1d47ce80dd50340\",\n    \"https://esm.sh/v106/caniuse-lite@1.0.30001449/deno/data/browserVersions.js\": \"1f8f0ebfc4fe65a68e5bad4f2f75e3415528117bd66d11568247748215bd555c\",\n    \"https://esm.sh/v106/caniuse-lite@1.0.30001449/deno/data/browsers.js\": \"e1b0c785d546b8e28b11f54b0941dec17fe25ef226c5edc5f0470ffc9ad6f5fe\",\n    \"https://esm.sh/v106/caniuse-lite@1.0.30001449/deno/dist/unpacker/agents.js\": \"0ae95b170ef265f8322704851351b8ffde57f4cf779d8df2b1b4a6c372fef2b6\",\n    \"https://esm.sh/v106/caniuse-lite@1.0.30001449/deno/dist/unpacker/browserVersions.js\": \"7e14196967850f6ce88a5c41d2215e86545dafa583827f808e54ba07383b2f32\",\n    \"https://esm.sh/v106/caniuse-lite@1.0.30001449/deno/dist/unpacker/browsers.js\": \"c05b532893801462ecc28d14d3cf14d4e22ea59b65008189b67e260a100074c1\",\n    \"https://esm.sh/v106/chalk@2.4.2/deno/chalk.js\": \"66076ac347686e9733934a54aa62a915a438472c73f2ebf064066cf863978806\",\n    \"https://esm.sh/v106/color-convert@1.9.3/deno/color-convert.js\": \"a32a2bbf972f182309176052a9dac5ea21925b493196aeb7e6d6f6686ac5f579\",\n    \"https://esm.sh/v106/color-name@1.1.3/deno/color-name.js\": \"91e521e1a5dc98a5655466c457c86a163117c69edd3a9c7d23162787b35b8504\",\n    \"https://esm.sh/v106/convert-source-map@1.9.0/deno/convert-source-map.js\": \"03350078e3e4cf887a4932b13b4fdb507c30e10ebbb6d6d701b029377d85d36b\",\n    \"https://esm.sh/v106/core-js-compat@3.27.2/deno/data.js\": \"a7e98262c919a050a97ee57537ad1e752120ce4e146d6690a8fab033aaebcf1e\",\n    \"https://esm.sh/v106/core-js-compat@3.27.2/deno/data.json.js\": \"0e0b946c53a7bd8162c71608c9b51f566856c5982dc3ecaf6d261cab029a22a2\",\n    \"https://esm.sh/v106/core-js-compat@3.27.2/deno/entries.js\": \"90c395818735a2897e947eb35baef3ee0d2e7d69df14905eb024eeba9f688608\",\n    \"https://esm.sh/v106/core-js-compat@3.27.2/deno/get-modules-list-for-target-version.js\": \"d3753d697d565fe2b695b962f9c01c7753de1cf82961e0da84fbb245ec4e70e5\",\n    \"https://esm.sh/v106/core-js-compat@3.27.2/deno/helpers.js\": \"f7bac541759b99da6de0dd841ad837e4d153cf0e862ef2a55987b0fc6015b8db\",\n    \"https://esm.sh/v106/core-js-compat@3.27.2/deno/modules-by-versions.js\": \"6e1ec5c65ad0a732af3cc8503c1eb80422319c3a631d340e8cda08c03c908bb5\",\n    \"https://esm.sh/v106/core-js-compat@3.27.2/deno/modules.js\": \"7243d0303469ba8a05e46847720b8778a6f46dab4080b47ecae27060e1ee0830\",\n    \"https://esm.sh/v106/debug@4.3.4/deno/debug.js\": \"795a6ed1ee3840e120e08fdc19ccae89ef4720d5a31e6f609de684b767be991e\",\n    \"https://esm.sh/v106/electron-to-chromium@1.4.284/deno/versions.js\": \"e112f928d5e4b05de66687353fa9b1e684eb619cc54593628e46946634b3d384\",\n    \"https://esm.sh/v106/escape-string-regexp@1.0.5/deno/escape-string-regexp.js\": \"65295de159fc0f387ac0aaa220aa74b853d01972b92f3a5fbefa76e4000acaf4\",\n    \"https://esm.sh/v106/gensync@1.0.0-beta.2/deno/gensync.js\": \"fe4bca845682a50b402ad945ff8b91bcba67a9bd730f07f954ac892b44637faa\",\n    \"https://esm.sh/v106/globals@11.12.0/deno/globals.js\": \"4c2b81e111c472bb0f2e7f18265086ea9a0b4a7d59960dabff34e799172f6e4a\",\n    \"https://esm.sh/v106/js-tokens@4.0.0/deno/js-tokens.js\": \"9cd280862778fb89ba4584eb450f84f2719d7fcd8c230283dc57632d4de3d74e\",\n    \"https://esm.sh/v106/jsesc@2.5.2/deno/jsesc.js\": \"06bd1752bcefb9547fe2899f0c5b04a97a001a96a6aa683d9af6aefddf275b56\",\n    \"https://esm.sh/v106/lru-cache@5.1.1/deno/lru-cache.js\": \"c924a4d5489e5ae14ecfcf7b2d694f1def56e21d3397ac0ea6963d7687bd0fe6\",\n    \"https://esm.sh/v106/ms@2.1.2/deno/ms.js\": \"8b0c2de5da189c681bae93d8482b42402e039b6438c16a686e0339374038636e\",\n    \"https://esm.sh/v106/node-releases@2.0.8/deno/data/processed/envs.json.js\": \"6e25e9d5f5294a3b1253f669747fdb548391bae93ac19d0067240969731f1814\",\n    \"https://esm.sh/v106/node-releases@2.0.8/deno/data/release-schedule/release-schedule.json.js\": \"120b702a3f7c56c50b74927d803e703b8b0efb80c10b7f64e196c53d2be6cf5d\",\n    \"https://esm.sh/v106/regenerate@1.4.2/deno/regenerate.js\": \"8d91480f2b6d156bcd32cb30cc2cf7e824a2fa372c2d1da2d63e15155fa93a35\",\n    \"https://esm.sh/v106/regenerator-transform@0.15.1/deno/regenerator-transform.js\": \"7dc67496324034e45a89ea1e67d8d9ad249194b249b00381be216c22370002bb\",\n    \"https://esm.sh/v106/regexpu-core@5.2.2/deno/regexpu-core.js\": \"a89b479d923d6bbc2d7363cf55a8ba682f5f8a544ba14da9c9f3e760a3df9b8b\",\n    \"https://esm.sh/v106/regjsgen@0.7.1/deno/regjsgen.js\": \"0e4fe0cab56dba800d1922acaa282cfc585005a17acabe2e290ed8e22992a0df\",\n    \"https://esm.sh/v106/regjsparser@0.9.1/deno/regjsparser.js\": \"1d170fed8201572959ec4bd10e63700ff93c4eab652fd4b15fab22be7010bb4b\",\n    \"https://esm.sh/v106/semver@6.3.0/deno/semver.js\": \"9e85b448f1ee6bfff5dc450fdc8ededb077b601faefd4d0257c854f72f443505\",\n    \"https://esm.sh/v106/supports-color@5.5.0/deno/supports-color.js\": \"70bd789fbdf8401ce76106c5413de72c96731c2a4f3925caae8266a4db9e1889\",\n    \"https://esm.sh/v106/to-fast-properties@2.0.0/deno/to-fast-properties.js\": \"503b515d1f05830169bd581d4d2ff4b217189aa0dc883bf75dd11221e918fd7e\",\n    \"https://esm.sh/v106/unicode-canonical-property-names-ecmascript@2.0.0/deno/unicode-canonical-property-names-ecmascript.js\": \"a04bdfd4f44d792b9ede751fd52ec4587b051c4c4db9049e1fcfa496299d116e\",\n    \"https://esm.sh/v106/unicode-match-property-ecmascript@2.0.0/deno/unicode-match-property-ecmascript.js\": \"ac01eb940f20d960837ab542f05062fd4f3d577b0302198193b1908d8cbd5511\",\n    \"https://esm.sh/v106/unicode-match-property-value-ecmascript@2.1.0/deno/unicode-match-property-value-ecmascript.js\": \"c1b93dc44ec967dc1373ea3cee4ea218b8fac55357209d35b140aecae6537eef\",\n    \"https://esm.sh/v106/unicode-property-aliases-ecmascript@2.1.0/deno/unicode-property-aliases-ecmascript.js\": \"df94dfeea15e82b172b0a874d79d56b9525beaed10d28306393538206ab83be5\",\n    \"https://esm.sh/v106/yallist@3.1.1/deno/yallist.js\": \"386d8dd24347b6c2f3fbbebdfd046498ee89107e699e35067de552d904dda266\"\n  },\n  \"npm\": {\n    \"specifiers\": {\n      \"@rollup/plugin-babel@6.0.3\": \"@rollup/plugin-babel@6.0.3_rollup@3.13.0\",\n      \"rollup@3.13.0\": \"rollup@3.13.0\",\n      \"terser@5.16.1\": \"terser@5.16.1\"\n    },\n    \"packages\": {\n      \"@ampproject/remapping@2.2.0\": {\n        \"integrity\": \"sha512-qRmjj8nj9qmLTQXXmaR1cck3UXSRMPrbsLJAasZpF+t3riI71BXed5ebIOYwQntykeZuhjsdweEc9BxH5Jc26w==\",\n        \"dependencies\": {\n          \"@jridgewell/gen-mapping\": \"@jridgewell/gen-mapping@0.1.1\",\n          \"@jridgewell/trace-mapping\": \"@jridgewell/trace-mapping@0.3.17\"\n        }\n      },\n      \"@babel/code-frame@7.18.6\": {\n        \"integrity\": \"sha512-TDCmlK5eOvH+eH7cdAFlNXeVJqWIQ7gW9tY1GJIpUtFb6CmjVyq2VM3u71bOyR8CRihcCgMUYoDNyLXao3+70Q==\",\n        \"dependencies\": {\n          \"@babel/highlight\": \"@babel/highlight@7.18.6\"\n        }\n      },\n      \"@babel/compat-data@7.20.14\": {\n        \"integrity\": \"sha512-0YpKHD6ImkWMEINCyDAD0HLLUH/lPCefG8ld9it8DJB2wnApraKuhgYTvTY1z7UFIfBTGy5LwncZ+5HWWGbhFw==\",\n        \"dependencies\": {}\n      },\n      \"@babel/core@7.20.12\": {\n        \"integrity\": \"sha512-XsMfHovsUYHFMdrIHkZphTN/2Hzzi78R08NuHfDBehym2VsPDL6Zn/JAD/JQdnRvbSsbQc4mVaU1m6JgtTEElg==\",\n        \"dependencies\": {\n          \"@ampproject/remapping\": \"@ampproject/remapping@2.2.0\",\n          \"@babel/code-frame\": \"@babel/code-frame@7.18.6\",\n          \"@babel/generator\": \"@babel/generator@7.20.14\",\n          \"@babel/helper-compilation-targets\": \"@babel/helper-compilation-targets@7.20.7_@babel+core@7.20.12\",\n          \"@babel/helper-module-transforms\": \"@babel/helper-module-transforms@7.20.11\",\n          \"@babel/helpers\": \"@babel/helpers@7.20.13\",\n          \"@babel/parser\": \"@babel/parser@7.20.15\",\n          \"@babel/template\": \"@babel/template@7.20.7\",\n          \"@babel/traverse\": \"@babel/traverse@7.20.13\",\n          \"@babel/types\": \"@babel/types@7.20.7\",\n          \"convert-source-map\": \"convert-source-map@1.9.0\",\n          \"debug\": \"debug@4.3.4\",\n          \"gensync\": \"gensync@1.0.0-beta.2\",\n          \"json5\": \"json5@2.2.3\",\n          \"semver\": \"semver@6.3.0\"\n        }\n      },\n      \"@babel/generator@7.20.14\": {\n        \"integrity\": \"sha512-AEmuXHdcD3A52HHXxaTmYlb8q/xMEhoRP67B3T4Oq7lbmSoqroMZzjnGj3+i1io3pdnF8iBYVu4Ilj+c4hBxYg==\",\n        \"dependencies\": {\n          \"@babel/types\": \"@babel/types@7.20.7\",\n          \"@jridgewell/gen-mapping\": \"@jridgewell/gen-mapping@0.3.2\",\n          \"jsesc\": \"jsesc@2.5.2\"\n        }\n      },\n      \"@babel/helper-compilation-targets@7.20.7_@babel+core@7.20.12\": {\n        \"integrity\": \"sha512-4tGORmfQcrc+bvrjb5y3dG9Mx1IOZjsHqQVUz7XCNHO+iTmqxWnVg3KRygjGmpRLJGdQSKuvFinbIb0CnZwHAQ==\",\n        \"dependencies\": {\n          \"@babel/compat-data\": \"@babel/compat-data@7.20.14\",\n          \"@babel/core\": \"@babel/core@7.20.12\",\n          \"@babel/helper-validator-option\": \"@babel/helper-validator-option@7.18.6\",\n          \"browserslist\": \"browserslist@4.21.5\",\n          \"lru-cache\": \"lru-cache@5.1.1\",\n          \"semver\": \"semver@6.3.0\"\n        }\n      },\n      \"@babel/helper-environment-visitor@7.18.9\": {\n        \"integrity\": \"sha512-3r/aACDJ3fhQ/EVgFy0hpj8oHyHpQc+LPtJoY9SzTThAsStm4Ptegq92vqKoE3vD706ZVFWITnMnxucw+S9Ipg==\",\n        \"dependencies\": {}\n      },\n      \"@babel/helper-function-name@7.19.0\": {\n        \"integrity\": \"sha512-WAwHBINyrpqywkUH0nTnNgI5ina5TFn85HKS0pbPDfxFfhyR/aNQEn4hGi1P1JyT//I0t4OgXUlofzWILRvS5w==\",\n        \"dependencies\": {\n          \"@babel/template\": \"@babel/template@7.20.7\",\n          \"@babel/types\": \"@babel/types@7.20.7\"\n        }\n      },\n      \"@babel/helper-hoist-variables@7.18.6\": {\n        \"integrity\": \"sha512-UlJQPkFqFULIcyW5sbzgbkxn2FKRgwWiRexcuaR8RNJRy8+LLveqPjwZV/bwrLZCN0eUHD/x8D0heK1ozuoo6Q==\",\n        \"dependencies\": {\n          \"@babel/types\": \"@babel/types@7.20.7\"\n        }\n      },\n      \"@babel/helper-module-imports@7.18.6\": {\n        \"integrity\": \"sha512-0NFvs3VkuSYbFi1x2Vd6tKrywq+z/cLeYC/RJNFrIX/30Bf5aiGYbtvGXolEktzJH8o5E5KJ3tT+nkxuuZFVlA==\",\n        \"dependencies\": {\n          \"@babel/types\": \"@babel/types@7.20.7\"\n        }\n      },\n      \"@babel/helper-module-transforms@7.20.11\": {\n        \"integrity\": \"sha512-uRy78kN4psmji1s2QtbtcCSaj/LILFDp0f/ymhpQH5QY3nljUZCaNWz9X1dEj/8MBdBEFECs7yRhKn8i7NjZgg==\",\n        \"dependencies\": {\n          \"@babel/helper-environment-visitor\": \"@babel/helper-environment-visitor@7.18.9\",\n          \"@babel/helper-module-imports\": \"@babel/helper-module-imports@7.18.6\",\n          \"@babel/helper-simple-access\": \"@babel/helper-simple-access@7.20.2\",\n          \"@babel/helper-split-export-declaration\": \"@babel/helper-split-export-declaration@7.18.6\",\n          \"@babel/helper-validator-identifier\": \"@babel/helper-validator-identifier@7.19.1\",\n          \"@babel/template\": \"@babel/template@7.20.7\",\n          \"@babel/traverse\": \"@babel/traverse@7.20.13\",\n          \"@babel/types\": \"@babel/types@7.20.7\"\n        }\n      },\n      \"@babel/helper-simple-access@7.20.2\": {\n        \"integrity\": \"sha512-+0woI/WPq59IrqDYbVGfshjT5Dmk/nnbdpcF8SnMhhXObpTq2KNBdLFRFrkVdbDOyUmHBCxzm5FHV1rACIkIbA==\",\n        \"dependencies\": {\n          \"@babel/types\": \"@babel/types@7.20.7\"\n        }\n      },\n      \"@babel/helper-split-export-declaration@7.18.6\": {\n        \"integrity\": \"sha512-bde1etTx6ZyTmobl9LLMMQsaizFVZrquTEHOqKeQESMKo4PlObf+8+JA25ZsIpZhT/WEd39+vOdLXAFG/nELpA==\",\n        \"dependencies\": {\n          \"@babel/types\": \"@babel/types@7.20.7\"\n        }\n      },\n      \"@babel/helper-string-parser@7.19.4\": {\n        \"integrity\": \"sha512-nHtDoQcuqFmwYNYPz3Rah5ph2p8PFeFCsZk9A/48dPc/rGocJ5J3hAAZ7pb76VWX3fZKu+uEr/FhH5jLx7umrw==\",\n        \"dependencies\": {}\n      },\n      \"@babel/helper-validator-identifier@7.19.1\": {\n        \"integrity\": \"sha512-awrNfaMtnHUr653GgGEs++LlAvW6w+DcPrOliSMXWCKo597CwL5Acf/wWdNkf/tfEQE3mjkeD1YOVZOUV/od1w==\",\n        \"dependencies\": {}\n      },\n      \"@babel/helper-validator-option@7.18.6\": {\n        \"integrity\": \"sha512-XO7gESt5ouv/LRJdrVjkShckw6STTaB7l9BrpBaAHDeF5YZT+01PCwmR0SJHnkW6i8OwW/EVWRShfi4j2x+KQw==\",\n        \"dependencies\": {}\n      },\n      \"@babel/helpers@7.20.13\": {\n        \"integrity\": \"sha512-nzJ0DWCL3gB5RCXbUO3KIMMsBY2Eqbx8mBpKGE/02PgyRQFcPQLbkQ1vyy596mZLaP+dAfD+R4ckASzNVmW3jg==\",\n        \"dependencies\": {\n          \"@babel/template\": \"@babel/template@7.20.7\",\n          \"@babel/traverse\": \"@babel/traverse@7.20.13\",\n          \"@babel/types\": \"@babel/types@7.20.7\"\n        }\n      },\n      \"@babel/highlight@7.18.6\": {\n        \"integrity\": \"sha512-u7stbOuYjaPezCuLj29hNW1v64M2Md2qupEKP1fHc7WdOA3DgLh37suiSrZYY7haUB7iBeQZ9P1uiRF359do3g==\",\n        \"dependencies\": {\n          \"@babel/helper-validator-identifier\": \"@babel/helper-validator-identifier@7.19.1\",\n          \"chalk\": \"chalk@2.4.2\",\n          \"js-tokens\": \"js-tokens@4.0.0\"\n        }\n      },\n      \"@babel/parser@7.20.15\": {\n        \"integrity\": \"sha512-DI4a1oZuf8wC+oAJA9RW6ga3Zbe8RZFt7kD9i4qAspz3I/yHet1VvC3DiSy/fsUvv5pvJuNPh0LPOdCcqinDPg==\",\n        \"dependencies\": {}\n      },\n      \"@babel/template@7.20.7\": {\n        \"integrity\": \"sha512-8SegXApWe6VoNw0r9JHpSteLKTpTiLZ4rMlGIm9JQ18KiCtyQiAMEazujAHrUS5flrcqYZa75ukev3P6QmUwUw==\",\n        \"dependencies\": {\n          \"@babel/code-frame\": \"@babel/code-frame@7.18.6\",\n          \"@babel/parser\": \"@babel/parser@7.20.15\",\n          \"@babel/types\": \"@babel/types@7.20.7\"\n        }\n      },\n      \"@babel/traverse@7.20.13\": {\n        \"integrity\": \"sha512-kMJXfF0T6DIS9E8cgdLCSAL+cuCK+YEZHWiLK0SXpTo8YRj5lpJu3CDNKiIBCne4m9hhTIqUg6SYTAI39tAiVQ==\",\n        \"dependencies\": {\n          \"@babel/code-frame\": \"@babel/code-frame@7.18.6\",\n          \"@babel/generator\": \"@babel/generator@7.20.14\",\n          \"@babel/helper-environment-visitor\": \"@babel/helper-environment-visitor@7.18.9\",\n          \"@babel/helper-function-name\": \"@babel/helper-function-name@7.19.0\",\n          \"@babel/helper-hoist-variables\": \"@babel/helper-hoist-variables@7.18.6\",\n          \"@babel/helper-split-export-declaration\": \"@babel/helper-split-export-declaration@7.18.6\",\n          \"@babel/parser\": \"@babel/parser@7.20.15\",\n          \"@babel/types\": \"@babel/types@7.20.7\",\n          \"debug\": \"debug@4.3.4\",\n          \"globals\": \"globals@11.12.0\"\n        }\n      },\n      \"@babel/types@7.20.7\": {\n        \"integrity\": \"sha512-69OnhBxSSgK0OzTJai4kyPDiKTIe3j+ctaHdIGVbRahTLAT7L3R9oeXHC2aVSuGYt3cVnoAMDmOCgJ2yaiLMvg==\",\n        \"dependencies\": {\n          \"@babel/helper-string-parser\": \"@babel/helper-string-parser@7.19.4\",\n          \"@babel/helper-validator-identifier\": \"@babel/helper-validator-identifier@7.19.1\",\n          \"to-fast-properties\": \"to-fast-properties@2.0.0\"\n        }\n      },\n      \"@jridgewell/gen-mapping@0.1.1\": {\n        \"integrity\": \"sha512-sQXCasFk+U8lWYEe66WxRDOE9PjVz4vSM51fTu3Hw+ClTpUSQb718772vH3pyS5pShp6lvQM7SxgIDXXXmOX7w==\",\n        \"dependencies\": {\n          \"@jridgewell/set-array\": \"@jridgewell/set-array@1.1.2\",\n          \"@jridgewell/sourcemap-codec\": \"@jridgewell/sourcemap-codec@1.4.14\"\n        }\n      },\n      \"@jridgewell/gen-mapping@0.3.2\": {\n        \"integrity\": \"sha512-mh65xKQAzI6iBcFzwv28KVWSmCkdRBWoOh+bYQGW3+6OZvbbN3TqMGo5hqYxQniRcH9F2VZIoJCm4pa3BPDK/A==\",\n        \"dependencies\": {\n          \"@jridgewell/set-array\": \"@jridgewell/set-array@1.1.2\",\n          \"@jridgewell/sourcemap-codec\": \"@jridgewell/sourcemap-codec@1.4.14\",\n          \"@jridgewell/trace-mapping\": \"@jridgewell/trace-mapping@0.3.17\"\n        }\n      },\n      \"@jridgewell/resolve-uri@3.1.0\": {\n        \"integrity\": \"sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w==\",\n        \"dependencies\": {}\n      },\n      \"@jridgewell/set-array@1.1.2\": {\n        \"integrity\": \"sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==\",\n        \"dependencies\": {}\n      },\n      \"@jridgewell/source-map@0.3.2\": {\n        \"integrity\": \"sha512-m7O9o2uR8k2ObDysZYzdfhb08VuEml5oWGiosa1VdaPZ/A6QyPkAJuwN0Q1lhULOf6B7MtQmHENS743hWtCrgw==\",\n        \"dependencies\": {\n          \"@jridgewell/gen-mapping\": \"@jridgewell/gen-mapping@0.3.2\",\n          \"@jridgewell/trace-mapping\": \"@jridgewell/trace-mapping@0.3.17\"\n        }\n      },\n      \"@jridgewell/sourcemap-codec@1.4.14\": {\n        \"integrity\": \"sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==\",\n        \"dependencies\": {}\n      },\n      \"@jridgewell/trace-mapping@0.3.17\": {\n        \"integrity\": \"sha512-MCNzAp77qzKca9+W/+I0+sEpaUnZoeasnghNeVc41VZCEKaCH73Vq3BZZ/SzWIgrqE4H4ceI+p+b6C0mHf9T4g==\",\n        \"dependencies\": {\n          \"@jridgewell/resolve-uri\": \"@jridgewell/resolve-uri@3.1.0\",\n          \"@jridgewell/sourcemap-codec\": \"@jridgewell/sourcemap-codec@1.4.14\"\n        }\n      },\n      \"@rollup/plugin-babel@6.0.3_rollup@3.13.0\": {\n        \"integrity\": \"sha512-fKImZKppa1A/gX73eg4JGo+8kQr/q1HBQaCGKECZ0v4YBBv3lFqi14+7xyApECzvkLTHCifx+7ntcrvtBIRcpg==\",\n        \"dependencies\": {\n          \"@babel/core\": \"@babel/core@7.20.12\",\n          \"@babel/helper-module-imports\": \"@babel/helper-module-imports@7.18.6\",\n          \"@rollup/pluginutils\": \"@rollup/pluginutils@5.0.2_rollup@3.13.0\",\n          \"rollup\": \"rollup@3.13.0\"\n        }\n      },\n      \"@rollup/pluginutils@5.0.2_rollup@3.13.0\": {\n        \"integrity\": \"sha512-pTd9rIsP92h+B6wWwFbW8RkZv4hiR/xKsqre4SIuAOaOEQRxi0lqLke9k2/7WegC85GgUs9pjmOjCUi3In4vwA==\",\n        \"dependencies\": {\n          \"@types/estree\": \"@types/estree@1.0.0\",\n          \"estree-walker\": \"estree-walker@2.0.2\",\n          \"picomatch\": \"picomatch@2.3.1\",\n          \"rollup\": \"rollup@3.13.0\"\n        }\n      },\n      \"@types/estree@1.0.0\": {\n        \"integrity\": \"sha512-WulqXMDUTYAXCjZnk6JtIHPigp55cVtDgDrO2gHRwhyJto21+1zbVCtOYB2L1F9w4qCQ0rOGWBnBe0FNTiEJIQ==\",\n        \"dependencies\": {}\n      },\n      \"acorn@8.8.2\": {\n        \"integrity\": \"sha512-xjIYgE8HBrkpd/sJqOGNspf8uHG+NOHGOw6a/Urj8taM2EXfdNAH2oFcPeIFfsv3+kz/mJrS5VuMqbNLjCa2vw==\",\n        \"dependencies\": {}\n      },\n      \"ansi-styles@3.2.1\": {\n        \"integrity\": \"sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==\",\n        \"dependencies\": {\n          \"color-convert\": \"color-convert@1.9.3\"\n        }\n      },\n      \"browserslist@4.21.5\": {\n        \"integrity\": \"sha512-tUkiguQGW7S3IhB7N+c2MV/HZPSCPAAiYBZXLsBhFB/PCy6ZKKsZrmBayHV9fdGV/ARIfJ14NkxKzRDjvp7L6w==\",\n        \"dependencies\": {\n          \"caniuse-lite\": \"caniuse-lite@1.0.30001450\",\n          \"electron-to-chromium\": \"electron-to-chromium@1.4.286\",\n          \"node-releases\": \"node-releases@2.0.9\",\n          \"update-browserslist-db\": \"update-browserslist-db@1.0.10_browserslist@4.21.5\"\n        }\n      },\n      \"buffer-from@1.1.2\": {\n        \"integrity\": \"sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==\",\n        \"dependencies\": {}\n      },\n      \"caniuse-lite@1.0.30001450\": {\n        \"integrity\": \"sha512-qMBmvmQmFXaSxexkjjfMvD5rnDL0+m+dUMZKoDYsGG8iZN29RuYh9eRoMvKsT6uMAWlyUUGDEQGJJYjzCIO9ew==\",\n        \"dependencies\": {}\n      },\n      \"chalk@2.4.2\": {\n        \"integrity\": \"sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==\",\n        \"dependencies\": {\n          \"ansi-styles\": \"ansi-styles@3.2.1\",\n          \"escape-string-regexp\": \"escape-string-regexp@1.0.5\",\n          \"supports-color\": \"supports-color@5.5.0\"\n        }\n      },\n      \"color-convert@1.9.3\": {\n        \"integrity\": \"sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==\",\n        \"dependencies\": {\n          \"color-name\": \"color-name@1.1.3\"\n        }\n      },\n      \"color-name@1.1.3\": {\n        \"integrity\": \"sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==\",\n        \"dependencies\": {}\n      },\n      \"commander@2.20.3\": {\n        \"integrity\": \"sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==\",\n        \"dependencies\": {}\n      },\n      \"convert-source-map@1.9.0\": {\n        \"integrity\": \"sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==\",\n        \"dependencies\": {}\n      },\n      \"debug@4.3.4\": {\n        \"integrity\": \"sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==\",\n        \"dependencies\": {\n          \"ms\": \"ms@2.1.2\"\n        }\n      },\n      \"electron-to-chromium@1.4.286\": {\n        \"integrity\": \"sha512-Vp3CVhmYpgf4iXNKAucoQUDcCrBQX3XLBtwgFqP9BUXuucgvAV9zWp1kYU7LL9j4++s9O+12cb3wMtN4SJy6UQ==\",\n        \"dependencies\": {}\n      },\n      \"escalade@3.1.1\": {\n        \"integrity\": \"sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==\",\n        \"dependencies\": {}\n      },\n      \"escape-string-regexp@1.0.5\": {\n        \"integrity\": \"sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==\",\n        \"dependencies\": {}\n      },\n      \"estree-walker@2.0.2\": {\n        \"integrity\": \"sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==\",\n        \"dependencies\": {}\n      },\n      \"fsevents@2.3.2\": {\n        \"integrity\": \"sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==\",\n        \"dependencies\": {}\n      },\n      \"gensync@1.0.0-beta.2\": {\n        \"integrity\": \"sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==\",\n        \"dependencies\": {}\n      },\n      \"globals@11.12.0\": {\n        \"integrity\": \"sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==\",\n        \"dependencies\": {}\n      },\n      \"has-flag@3.0.0\": {\n        \"integrity\": \"sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==\",\n        \"dependencies\": {}\n      },\n      \"js-tokens@4.0.0\": {\n        \"integrity\": \"sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==\",\n        \"dependencies\": {}\n      },\n      \"jsesc@2.5.2\": {\n        \"integrity\": \"sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==\",\n        \"dependencies\": {}\n      },\n      \"json5@2.2.3\": {\n        \"integrity\": \"sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==\",\n        \"dependencies\": {}\n      },\n      \"lru-cache@5.1.1\": {\n        \"integrity\": \"sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==\",\n        \"dependencies\": {\n          \"yallist\": \"yallist@3.1.1\"\n        }\n      },\n      \"ms@2.1.2\": {\n        \"integrity\": \"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==\",\n        \"dependencies\": {}\n      },\n      \"node-releases@2.0.9\": {\n        \"integrity\": \"sha512-2xfmOrRkGogbTK9R6Leda0DGiXeY3p2NJpy4+gNCffdUvV6mdEJnaDEic1i3Ec2djAo8jWYoJMR5PB0MSMpxUA==\",\n        \"dependencies\": {}\n      },\n      \"picocolors@1.0.0\": {\n        \"integrity\": \"sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==\",\n        \"dependencies\": {}\n      },\n      \"picomatch@2.3.1\": {\n        \"integrity\": \"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\n        \"dependencies\": {}\n      },\n      \"rollup@3.13.0\": {\n        \"integrity\": \"sha512-HJwQtrXAc0AmyDohTJ/2c+Bx/sWPScJLlAUJ1kuD7rAkCro8Cr2SnVB2gVYBiSLxpgD2kZ24jbyXtG++GumrYQ==\",\n        \"dependencies\": {\n          \"fsevents\": \"fsevents@2.3.2\"\n        }\n      },\n      \"semver@6.3.0\": {\n        \"integrity\": \"sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==\",\n        \"dependencies\": {}\n      },\n      \"source-map-support@0.5.21\": {\n        \"integrity\": \"sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==\",\n        \"dependencies\": {\n          \"buffer-from\": \"buffer-from@1.1.2\",\n          \"source-map\": \"source-map@0.6.1\"\n        }\n      },\n      \"source-map@0.6.1\": {\n        \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",\n        \"dependencies\": {}\n      },\n      \"supports-color@5.5.0\": {\n        \"integrity\": \"sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==\",\n        \"dependencies\": {\n          \"has-flag\": \"has-flag@3.0.0\"\n        }\n      },\n      \"terser@5.16.1\": {\n        \"integrity\": \"sha512-xvQfyfA1ayT0qdK47zskQgRZeWLoOQ8JQ6mIgRGVNwZKdQMU+5FkCBjmv4QjcrTzyZquRw2FVtlJSRUmMKQslw==\",\n        \"dependencies\": {\n          \"@jridgewell/source-map\": \"@jridgewell/source-map@0.3.2\",\n          \"acorn\": \"acorn@8.8.2\",\n          \"commander\": \"commander@2.20.3\",\n          \"source-map-support\": \"source-map-support@0.5.21\"\n        }\n      },\n      \"to-fast-properties@2.0.0\": {\n        \"integrity\": \"sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==\",\n        \"dependencies\": {}\n      },\n      \"update-browserslist-db@1.0.10_browserslist@4.21.5\": {\n        \"integrity\": \"sha512-OztqDenkfFkbSG+tRxBeAnCVPckDBcvibKd35yDONx6OU8N7sqgwc7rCbkJ/WcYtVRZ4ba68d6byhC21GFh7sQ==\",\n        \"dependencies\": {\n          \"browserslist\": \"browserslist@4.21.5\",\n          \"escalade\": \"escalade@3.1.1\",\n          \"picocolors\": \"picocolors@1.0.0\"\n        }\n      },\n      \"yallist@3.1.1\": {\n        \"integrity\": \"sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==\",\n        \"dependencies\": {}\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 6.4091796875,
          "content": "<!DOCTYPE html>\n<html>\n\n<head>\n\t<meta charset='utf-8'>\n\n\t<title>TinyColor - Fast, small color manipulation in JavaScript</title>\n\n\t<link rel=\"stylesheet\" href=\"demo/demo.css\" type=\"text/css\" media=\"screen\" />\n\t<script type='text/javascript' src='tinycolor.js'></script>\n\t<script type='text/javascript'>\n\n\t\tfunction colorChange(color) {\n\t\t\tvar tiny = tinycolor(color);\n\n\t\t\tvar output = [\n\t\t\t\t\"hex:\\t\" + tiny.toHexString(),\n\t\t\t\t\"hex8:\\t\" + tiny.toHex8String(),\n\t\t\t\t\"rgb:\\t\" + tiny.toRgbString(),\n\t\t\t\t\"hsl:\\t\" + tiny.toHslString(),\n\t\t\t\t\"hsv:\\t\" + tiny.toHsvString(),\n\t\t\t\t\"name:\\t\" + (tiny.toName() || \"none\"),\n\t\t\t\t\"format:\\t\" + (tiny.getFormat()),\n\t\t\t\t\"format string:\\t\" + tiny.toString(),\n\t\t\t].join(\"\\n\");\n\n\t\t\tlet codeOutput = document.querySelector(\"#code-output\");\n\t\t\tcodeOutput.textContent = output;\n\t\t\tcodeOutput.style.borderColor = tiny.toHexString();\n\n\t\t\tvar filters = document.querySelector(\"#filter-output\");\n\t\t\tfilters.classList.toggle(\"invisible\", !tiny.isValid());\n\n\t\t\tfilters.querySelector(\".lighten\").style.backgroundColor =\n\t\t\t\ttinycolor(color).lighten(20).toHexString();\n\t\t\tfilters.querySelector(\".darken\").style.backgroundColor =\n\t\t\t\ttinycolor(color).darken(20).toHexString();\n\t\t\tfilters.querySelector(\".saturate\").style.backgroundColor =\n\t\t\t\ttinycolor(color).saturate(20).toHexString();\n\t\t\tfilters.querySelector(\".desaturate\").style.backgroundColor =\n\t\t\t\ttinycolor(color).desaturate(20).toHexString();\n\t\t\tfilters.querySelector(\".greyscale\").style.backgroundColor =\n\t\t\t\ttinycolor(color).greyscale().toHexString();\n\t\t\tfilters.querySelector(\".brighten\").style.backgroundColor =\n\t\t\t\ttinycolor(color).brighten(20).toHexString();\n\n\t\t\tvar allColors = [];\n\t\t\tfor (var i in tinycolor.names) {\n\t\t\t\tallColors.push(i);\n\t\t\t}\n\t\t\tvar mostReadable = tinycolor.mostReadable(color, allColors);\n\n\t\t\tdocument.querySelector(\"#mostReadable\").style.backgroundColor =\n\t\t\t\tmostReadable.toHexString();\n\n\t\t\tvar combines = document.querySelector(\"#combine-output\");\n\t\t\tcombines.classList.toggle(\"invisible\", !tiny.isValid());\n\n\t\t\tfunction colorArrayToHTML(arr) {\n\t\t\t\treturn arr.map(function (e) {\n\t\t\t\t\treturn '<span style=\"background:' + e.toHexString() + '\"></span>'\n\t\t\t\t}).join('');\n\t\t\t}\n\n\t\t\tvar triad = tiny.triad();\n\t\t\tcombines.querySelector(\".triad\").innerHTML = colorArrayToHTML(triad);\n\t\t\tconsole.log(triad.map(function (f) { return f.toHexString(); }));\n\n\t\t\tvar tetrad = tiny.tetrad();\n\t\t\tcombines.querySelector(\".tetrad\").innerHTML = colorArrayToHTML(tetrad);\n\n\t\t\tvar mono = tiny.monochromatic();\n\t\t\tcombines.querySelector(\".mono\").innerHTML = colorArrayToHTML(mono);\n\n\t\t\tvar analogous = tiny.analogous();\n\t\t\tcombines.querySelector(\".analogous\").innerHTML = colorArrayToHTML(analogous);\n\n\t\t\tvar splitcomplement = tiny.splitcomplement();\n\t\t\tcombines.querySelector(\".sc\").innerHTML = colorArrayToHTML(splitcomplement);\n\t\t}\n\n\t\tdocument.addEventListener(\"DOMContentLoaded\", function () {\n\t\t\tvar color = document.querySelector(\"#color\");\n\t\t\tcolor.addEventListener(\"keyup\", onchange);\n\t\t\tcolor.addEventListener(\"change\", onchange);\n\n\t\t\tfunction onchange() {\n\t\t\t\tcolorChange(color.value);\n\t\t\t}\n\t\t\tcolorChange({ r: 150, g: 0, b: 100 });\n\n\t\t\tdocument.querySelector(\"#inputter\").addEventListener(\"click\", function (e) {\n\t\t\t\tif (e.target.matches(\"a\")) {\n\t\t\t\t\tcolor.value = e.target.textContent;\n\t\t\t\t\tonchange();\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t</script>\n</head>\n\n<body>\n\t<div id=\"container\">\n\t\t<h1>TinyColor</h1>\n\t\t<h2>Fast, small color manipulation and conversion for JavaScript</h2>\n\n\t\t<p>\n\t\t\t<a href=\"https://github.com/bgrins/TinyColor\">TinyColor</a> is a micro framework for inputting colors and\n\t\t\toutputting colors as different formats.\n\t\t\tInput is meant to be as permissive as possible.\n\t\t</p>\n\n\t\t<h3>Usage Documentation</h3>\n\t\t<p>Read all the documentation on the <a href='https://github.com/bgrins/TinyColor'>TinyColor project page</a> on\n\t\t\tgithub.</p>\n\n\t\t<h3>Tests</h3>\n\t\t<p><a href='test.js'>View the tests</a>.</p>\n\n\t\t<h3>Demo</h3>\n\t\t<div id='demo'>\n\t\t\t<div id='inputter'>\n\t\t\t\t<p>\n\t\t\t\t\tEnter a color: <input type=\"text\" placeholder=\"any color.\" id='color' />\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tOr try these:\n\t\t\t\t\t<a href=\"#\">red</a>\n\t\t\t\t\t<a href=\"#\">0f0</a>\n\t\t\t\t\t<a href=\"#\">rgb 255 128 128</a>\n\t\t\t\t\t<a href='#'>hsl(0, 100%, 50%)</a>\n\t\t\t\t\t<a href='#'>hsv 0, 100%, 50%</a>\n\t\t\t\t</p>\n\t\t\t\t<p>And I'll tell you what I know about it:</p>\n\t\t\t</div>\n\n\t\t\t<pre id='code-output'></pre>\n\n\t\t\t<div id='filter-output'>\n\t\t\t\t<table>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Lighten</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div class='lighten'></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Darken</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div class='darken'></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Saturate</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div class='saturate'></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Desaturate</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div class='desaturate'></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Greyscale</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div class='greyscale'></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Brighten</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div class='brighten'></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Most Readable</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div id='mostReadable'></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t</div>\n\n\t\t\t<div id='combine-output'>\n\t\t\t\t<table>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Triad</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div class='triad'></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Tetrad</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div class='tetrad'></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Monochromatic</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div class='mono'></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Analogous</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div class='analogous'></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Split Complements</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div class='sc'></div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</div>\n\n\n\t\t<h3>Credit</h3>\n\t\t<p>\n\t\t\tDeveloped by <a href='http://briangrinstead.com'>Brian Grinstead</a>. Big thanks to the following places:\n\t\t</p>\n\t\t<ul>\n\t\t\t<li><a href='https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js'>less.js</a> for some of the\n\t\t\t\tmodification functions</li>\n\t\t\t<li><a href='https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js'>jQuery xColor</a> for some of\n\t\t\t\tthe combination functions</li>\n\t\t\t<li><a href='http://www.w3.org/TR/css3-color/#svg-color'>w3.org</a> for the color list and parsing rules</li>\n\t\t\t<li><a\n\t\t\t\t\thref='http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript'>mjijackson.com</a>\n\t\t\t\tfor the first stab at RGB / HSL / HSV converters</li>\n\n\t\t</ul>\n\n\t</div>\n</body>\n\n</html>"
        },
        {
          "name": "mod.js",
          "type": "blob",
          "size": 33.861328125,
          "content": "// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\nconst trimLeft = /^\\s+/;\nconst trimRight = /\\s+$/;\n\nexport default function tinycolor(color, opts) {\n  color = color ? color : \"\";\n  opts = opts || {};\n\n  // If input is already a tinycolor, return itself\n  if (color instanceof tinycolor) {\n    return color;\n  }\n  // If we are called as a function, call using new instead\n  if (!(this instanceof tinycolor)) {\n    return new tinycolor(color, opts);\n  }\n\n  var rgb = inputToRGB(color);\n  (this._originalInput = color),\n    (this._r = rgb.r),\n    (this._g = rgb.g),\n    (this._b = rgb.b),\n    (this._a = rgb.a),\n    (this._roundA = Math.round(100 * this._a) / 100),\n    (this._format = opts.format || rgb.format);\n  this._gradientType = opts.gradientType;\n\n  // Don't let the range of [0,255] come back in [0,1].\n  // Potentially lose a little bit of precision here, but will fix issues where\n  // .5 gets interpreted as half of the total, instead of half of 1\n  // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n  if (this._r < 1) this._r = Math.round(this._r);\n  if (this._g < 1) this._g = Math.round(this._g);\n  if (this._b < 1) this._b = Math.round(this._b);\n\n  this._ok = rgb.ok;\n}\n\ntinycolor.prototype = {\n  isDark: function () {\n    return this.getBrightness() < 128;\n  },\n  isLight: function () {\n    return !this.isDark();\n  },\n  isValid: function () {\n    return this._ok;\n  },\n  getOriginalInput: function () {\n    return this._originalInput;\n  },\n  getFormat: function () {\n    return this._format;\n  },\n  getAlpha: function () {\n    return this._a;\n  },\n  getBrightness: function () {\n    //http://www.w3.org/TR/AERT#color-contrast\n    var rgb = this.toRgb();\n    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n  },\n  getLuminance: function () {\n    //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n    var rgb = this.toRgb();\n    var RsRGB, GsRGB, BsRGB, R, G, B;\n    RsRGB = rgb.r / 255;\n    GsRGB = rgb.g / 255;\n    BsRGB = rgb.b / 255;\n\n    if (RsRGB <= 0.03928) R = RsRGB / 12.92;\n    else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n    if (GsRGB <= 0.03928) G = GsRGB / 12.92;\n    else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n    if (BsRGB <= 0.03928) B = BsRGB / 12.92;\n    else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n    return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n  },\n  setAlpha: function (value) {\n    this._a = boundAlpha(value);\n    this._roundA = Math.round(100 * this._a) / 100;\n    return this;\n  },\n  toHsv: function () {\n    var hsv = rgbToHsv(this._r, this._g, this._b);\n    return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n  },\n  toHsvString: function () {\n    var hsv = rgbToHsv(this._r, this._g, this._b);\n    var h = Math.round(hsv.h * 360),\n      s = Math.round(hsv.s * 100),\n      v = Math.round(hsv.v * 100);\n    return this._a == 1\n      ? \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\"\n      : \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + this._roundA + \")\";\n  },\n  toHsl: function () {\n    var hsl = rgbToHsl(this._r, this._g, this._b);\n    return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n  },\n  toHslString: function () {\n    var hsl = rgbToHsl(this._r, this._g, this._b);\n    var h = Math.round(hsl.h * 360),\n      s = Math.round(hsl.s * 100),\n      l = Math.round(hsl.l * 100);\n    return this._a == 1\n      ? \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\"\n      : \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + this._roundA + \")\";\n  },\n  toHex: function (allow3Char) {\n    return rgbToHex(this._r, this._g, this._b, allow3Char);\n  },\n  toHexString: function (allow3Char) {\n    return \"#\" + this.toHex(allow3Char);\n  },\n  toHex8: function (allow4Char) {\n    return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n  },\n  toHex8String: function (allow4Char) {\n    return \"#\" + this.toHex8(allow4Char);\n  },\n  toRgb: function () {\n    return {\n      r: Math.round(this._r),\n      g: Math.round(this._g),\n      b: Math.round(this._b),\n      a: this._a,\n    };\n  },\n  toRgbString: function () {\n    return this._a == 1\n      ? \"rgb(\" +\n          Math.round(this._r) +\n          \", \" +\n          Math.round(this._g) +\n          \", \" +\n          Math.round(this._b) +\n          \")\"\n      : \"rgba(\" +\n          Math.round(this._r) +\n          \", \" +\n          Math.round(this._g) +\n          \", \" +\n          Math.round(this._b) +\n          \", \" +\n          this._roundA +\n          \")\";\n  },\n  toPercentageRgb: function () {\n    return {\n      r: Math.round(bound01(this._r, 255) * 100) + \"%\",\n      g: Math.round(bound01(this._g, 255) * 100) + \"%\",\n      b: Math.round(bound01(this._b, 255) * 100) + \"%\",\n      a: this._a,\n    };\n  },\n  toPercentageRgbString: function () {\n    return this._a == 1\n      ? \"rgb(\" +\n          Math.round(bound01(this._r, 255) * 100) +\n          \"%, \" +\n          Math.round(bound01(this._g, 255) * 100) +\n          \"%, \" +\n          Math.round(bound01(this._b, 255) * 100) +\n          \"%)\"\n      : \"rgba(\" +\n          Math.round(bound01(this._r, 255) * 100) +\n          \"%, \" +\n          Math.round(bound01(this._g, 255) * 100) +\n          \"%, \" +\n          Math.round(bound01(this._b, 255) * 100) +\n          \"%, \" +\n          this._roundA +\n          \")\";\n  },\n  toName: function () {\n    if (this._a === 0) {\n      return \"transparent\";\n    }\n\n    if (this._a < 1) {\n      return false;\n    }\n\n    return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n  },\n  toFilter: function (secondColor) {\n    var hex8String = \"#\" + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n    var secondHex8String = hex8String;\n    var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n    if (secondColor) {\n      var s = tinycolor(secondColor);\n      secondHex8String = \"#\" + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n    }\n\n    return (\n      \"progid:DXImageTransform.Microsoft.gradient(\" +\n      gradientType +\n      \"startColorstr=\" +\n      hex8String +\n      \",endColorstr=\" +\n      secondHex8String +\n      \")\"\n    );\n  },\n  toString: function (format) {\n    var formatSet = !!format;\n    format = format || this._format;\n\n    var formattedString = false;\n    var hasAlpha = this._a < 1 && this._a >= 0;\n    var needsAlphaFormat =\n      !formatSet &&\n      hasAlpha &&\n      (format === \"hex\" ||\n        format === \"hex6\" ||\n        format === \"hex3\" ||\n        format === \"hex4\" ||\n        format === \"hex8\" ||\n        format === \"name\");\n\n    if (needsAlphaFormat) {\n      // Special case for \"transparent\", all other non-alpha formats\n      // will return rgba when there is transparency.\n      if (format === \"name\" && this._a === 0) {\n        return this.toName();\n      }\n      return this.toRgbString();\n    }\n    if (format === \"rgb\") {\n      formattedString = this.toRgbString();\n    }\n    if (format === \"prgb\") {\n      formattedString = this.toPercentageRgbString();\n    }\n    if (format === \"hex\" || format === \"hex6\") {\n      formattedString = this.toHexString();\n    }\n    if (format === \"hex3\") {\n      formattedString = this.toHexString(true);\n    }\n    if (format === \"hex4\") {\n      formattedString = this.toHex8String(true);\n    }\n    if (format === \"hex8\") {\n      formattedString = this.toHex8String();\n    }\n    if (format === \"name\") {\n      formattedString = this.toName();\n    }\n    if (format === \"hsl\") {\n      formattedString = this.toHslString();\n    }\n    if (format === \"hsv\") {\n      formattedString = this.toHsvString();\n    }\n\n    return formattedString || this.toHexString();\n  },\n  clone: function () {\n    return tinycolor(this.toString());\n  },\n\n  _applyModification: function (fn, args) {\n    var color = fn.apply(null, [this].concat([].slice.call(args)));\n    this._r = color._r;\n    this._g = color._g;\n    this._b = color._b;\n    this.setAlpha(color._a);\n    return this;\n  },\n  lighten: function () {\n    return this._applyModification(lighten, arguments);\n  },\n  brighten: function () {\n    return this._applyModification(brighten, arguments);\n  },\n  darken: function () {\n    return this._applyModification(darken, arguments);\n  },\n  desaturate: function () {\n    return this._applyModification(desaturate, arguments);\n  },\n  saturate: function () {\n    return this._applyModification(saturate, arguments);\n  },\n  greyscale: function () {\n    return this._applyModification(greyscale, arguments);\n  },\n  spin: function () {\n    return this._applyModification(spin, arguments);\n  },\n\n  _applyCombination: function (fn, args) {\n    return fn.apply(null, [this].concat([].slice.call(args)));\n  },\n  analogous: function () {\n    return this._applyCombination(analogous, arguments);\n  },\n  complement: function () {\n    return this._applyCombination(complement, arguments);\n  },\n  monochromatic: function () {\n    return this._applyCombination(monochromatic, arguments);\n  },\n  splitcomplement: function () {\n    return this._applyCombination(splitcomplement, arguments);\n  },\n  // Disabled until https://github.com/bgrins/TinyColor/issues/254\n  // polyad: function (number) {\n  //   return this._applyCombination(polyad, [number]);\n  // },\n  triad: function () {\n    return this._applyCombination(polyad, [3]);\n  },\n  tetrad: function () {\n    return this._applyCombination(polyad, [4]);\n  },\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function (color, opts) {\n  if (typeof color == \"object\") {\n    var newColor = {};\n    for (var i in color) {\n      if (color.hasOwnProperty(i)) {\n        if (i === \"a\") {\n          newColor[i] = color[i];\n        } else {\n          newColor[i] = convertToPercentage(color[i]);\n        }\n      }\n    }\n    color = newColor;\n  }\n\n  return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n  var rgb = { r: 0, g: 0, b: 0 };\n  var a = 1;\n  var s = null;\n  var v = null;\n  var l = null;\n  var ok = false;\n  var format = false;\n\n  if (typeof color == \"string\") {\n    color = stringInputToObject(color);\n  }\n\n  if (typeof color == \"object\") {\n    if (\n      isValidCSSUnit(color.r) &&\n      isValidCSSUnit(color.g) &&\n      isValidCSSUnit(color.b)\n    ) {\n      rgb = rgbToRgb(color.r, color.g, color.b);\n      ok = true;\n      format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n    } else if (\n      isValidCSSUnit(color.h) &&\n      isValidCSSUnit(color.s) &&\n      isValidCSSUnit(color.v)\n    ) {\n      s = convertToPercentage(color.s);\n      v = convertToPercentage(color.v);\n      rgb = hsvToRgb(color.h, s, v);\n      ok = true;\n      format = \"hsv\";\n    } else if (\n      isValidCSSUnit(color.h) &&\n      isValidCSSUnit(color.s) &&\n      isValidCSSUnit(color.l)\n    ) {\n      s = convertToPercentage(color.s);\n      l = convertToPercentage(color.l);\n      rgb = hslToRgb(color.h, s, l);\n      ok = true;\n      format = \"hsl\";\n    }\n\n    if (color.hasOwnProperty(\"a\")) {\n      a = color.a;\n    }\n  }\n\n  a = boundAlpha(a);\n\n  return {\n    ok: ok,\n    format: color.format || format,\n    r: Math.min(255, Math.max(rgb.r, 0)),\n    g: Math.min(255, Math.max(rgb.g, 0)),\n    b: Math.min(255, Math.max(rgb.b, 0)),\n    a: a,\n  };\n}\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b) {\n  return {\n    r: bound01(r, 255) * 255,\n    g: bound01(g, 255) * 255,\n    b: bound01(b, 255) * 255,\n  };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n  r = bound01(r, 255);\n  g = bound01(g, 255);\n  b = bound01(b, 255);\n\n  var max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  var h,\n    s,\n    l = (max + min) / 2;\n\n  if (max == min) {\n    h = s = 0; // achromatic\n  } else {\n    var d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n  var r, g, b;\n\n  h = bound01(h, 360);\n  s = bound01(s, 100);\n  l = bound01(l, 100);\n\n  function hue2rgb(p, q, t) {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n  }\n\n  if (s === 0) {\n    r = g = b = l; // achromatic\n  } else {\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n  r = bound01(r, 255);\n  g = bound01(g, 255);\n  b = bound01(b, 255);\n\n  var max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  var h,\n    s,\n    v = max;\n\n  var d = max - min;\n  s = max === 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n  return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hsvToRgb(h, s, v) {\n  h = bound01(h, 360) * 6;\n  s = bound01(s, 100);\n  v = bound01(v, 100);\n\n  var i = Math.floor(h),\n    f = h - i,\n    p = v * (1 - s),\n    q = v * (1 - f * s),\n    t = v * (1 - (1 - f) * s),\n    mod = i % 6,\n    r = [v, q, p, p, t, v][mod],\n    g = [t, v, v, q, p, p][mod],\n    b = [p, p, t, v, v, q][mod];\n\n  return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n  var hex = [\n    pad2(Math.round(r).toString(16)),\n    pad2(Math.round(g).toString(16)),\n    pad2(Math.round(b).toString(16)),\n  ];\n\n  // Return a 3 character hex if possible\n  if (\n    allow3Char &&\n    hex[0].charAt(0) == hex[0].charAt(1) &&\n    hex[1].charAt(0) == hex[1].charAt(1) &&\n    hex[2].charAt(0) == hex[2].charAt(1)\n  ) {\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n  }\n\n  return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n  var hex = [\n    pad2(Math.round(r).toString(16)),\n    pad2(Math.round(g).toString(16)),\n    pad2(Math.round(b).toString(16)),\n    pad2(convertDecimalToHex(a)),\n  ];\n\n  // Return a 4 character hex if possible\n  if (\n    allow4Char &&\n    hex[0].charAt(0) == hex[0].charAt(1) &&\n    hex[1].charAt(0) == hex[1].charAt(1) &&\n    hex[2].charAt(0) == hex[2].charAt(1) &&\n    hex[3].charAt(0) == hex[3].charAt(1)\n  ) {\n    return (\n      hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0)\n    );\n  }\n\n  return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n  var hex = [\n    pad2(convertDecimalToHex(a)),\n    pad2(Math.round(r).toString(16)),\n    pad2(Math.round(g).toString(16)),\n    pad2(Math.round(b).toString(16)),\n  ];\n\n  return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n  if (!color1 || !color2) return false;\n  return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function () {\n  return tinycolor.fromRatio({\n    r: Math.random(),\n    g: Math.random(),\n    b: Math.random(),\n  });\n};\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n  amount = amount === 0 ? 0 : amount || 10;\n  var hsl = tinycolor(color).toHsl();\n  hsl.s -= amount / 100;\n  hsl.s = clamp01(hsl.s);\n  return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n  amount = amount === 0 ? 0 : amount || 10;\n  var hsl = tinycolor(color).toHsl();\n  hsl.s += amount / 100;\n  hsl.s = clamp01(hsl.s);\n  return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n  return tinycolor(color).desaturate(100);\n}\n\nfunction lighten(color, amount) {\n  amount = amount === 0 ? 0 : amount || 10;\n  var hsl = tinycolor(color).toHsl();\n  hsl.l += amount / 100;\n  hsl.l = clamp01(hsl.l);\n  return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n  amount = amount === 0 ? 0 : amount || 10;\n  var rgb = tinycolor(color).toRgb();\n  rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n  rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n  rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n  return tinycolor(rgb);\n}\n\nfunction darken(color, amount) {\n  amount = amount === 0 ? 0 : amount || 10;\n  var hsl = tinycolor(color).toHsl();\n  hsl.l -= amount / 100;\n  hsl.l = clamp01(hsl.l);\n  return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n  var hsl = tinycolor(color).toHsl();\n  var hue = (hsl.h + amount) % 360;\n  hsl.h = hue < 0 ? 360 + hue : hue;\n  return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n  var hsl = tinycolor(color).toHsl();\n  hsl.h = (hsl.h + 180) % 360;\n  return tinycolor(hsl);\n}\n\nfunction polyad(color, number) {\n  if (isNaN(number) || number <= 0) {\n    throw new Error(\"Argument to polyad must be a positive number\");\n  }\n  var hsl = tinycolor(color).toHsl();\n  var result = [tinycolor(color)];\n  var step = 360 / number;\n  for (var i = 1; i < number; i++) {\n    result.push(tinycolor({ h: (hsl.h + i * step) % 360, s: hsl.s, l: hsl.l }));\n  }\n\n  return result;\n}\n\nfunction splitcomplement(color) {\n  var hsl = tinycolor(color).toHsl();\n  var h = hsl.h;\n  return [\n    tinycolor(color),\n    tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),\n    tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),\n  ];\n}\n\nfunction analogous(color, results, slices) {\n  results = results || 6;\n  slices = slices || 30;\n\n  var hsl = tinycolor(color).toHsl();\n  var part = 360 / slices;\n  var ret = [tinycolor(color)];\n\n  for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results; ) {\n    hsl.h = (hsl.h + part) % 360;\n    ret.push(tinycolor(hsl));\n  }\n  return ret;\n}\n\nfunction monochromatic(color, results) {\n  results = results || 6;\n  var hsv = tinycolor(color).toHsv();\n  var h = hsv.h,\n    s = hsv.s,\n    v = hsv.v;\n  var ret = [];\n  var modification = 1 / results;\n\n  while (results--) {\n    ret.push(tinycolor({ h: h, s: s, v: v }));\n    v = (v + modification) % 1;\n  }\n\n  return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function (color1, color2, amount) {\n  amount = amount === 0 ? 0 : amount || 50;\n\n  var rgb1 = tinycolor(color1).toRgb();\n  var rgb2 = tinycolor(color2).toRgb();\n\n  var p = amount / 100;\n\n  var rgba = {\n    r: (rgb2.r - rgb1.r) * p + rgb1.r,\n    g: (rgb2.g - rgb1.g) * p + rgb1.g,\n    b: (rgb2.b - rgb1.b) * p + rgb1.b,\n    a: (rgb2.a - rgb1.a) * p + rgb1.a,\n  };\n\n  return tinycolor(rgba);\n};\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function (color1, color2) {\n  var c1 = tinycolor(color1);\n  var c2 = tinycolor(color2);\n  return (\n    (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) /\n    (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05)\n  );\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function (color1, color2, wcag2) {\n  var readability = tinycolor.readability(color1, color2);\n  var wcag2Parms, out;\n\n  out = false;\n\n  wcag2Parms = validateWCAG2Parms(wcag2);\n  switch (wcag2Parms.level + wcag2Parms.size) {\n    case \"AAsmall\":\n    case \"AAAlarge\":\n      out = readability >= 4.5;\n      break;\n    case \"AAlarge\":\n      out = readability >= 3;\n      break;\n    case \"AAAsmall\":\n      out = readability >= 7;\n      break;\n  }\n  return out;\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function (baseColor, colorList, args) {\n  var bestColor = null;\n  var bestScore = 0;\n  var readability;\n  var includeFallbackColors, level, size;\n  args = args || {};\n  includeFallbackColors = args.includeFallbackColors;\n  level = args.level;\n  size = args.size;\n\n  for (var i = 0; i < colorList.length; i++) {\n    readability = tinycolor.readability(baseColor, colorList[i]);\n    if (readability > bestScore) {\n      bestScore = readability;\n      bestColor = tinycolor(colorList[i]);\n    }\n  }\n\n  if (\n    tinycolor.isReadable(baseColor, bestColor, {\n      level: level,\n      size: size,\n    }) ||\n    !includeFallbackColors\n  ) {\n    return bestColor;\n  } else {\n    args.includeFallbackColors = false;\n    return tinycolor.mostReadable(baseColor, [\"#fff\", \"#000\"], args);\n  }\n};\n\n// Big List of Colors\n// ------------------\n// <https://www.w3.org/TR/css-color-4/#named-colors>\nvar names = (tinycolor.names = {\n  aliceblue: \"f0f8ff\",\n  antiquewhite: \"faebd7\",\n  aqua: \"0ff\",\n  aquamarine: \"7fffd4\",\n  azure: \"f0ffff\",\n  beige: \"f5f5dc\",\n  bisque: \"ffe4c4\",\n  black: \"000\",\n  blanchedalmond: \"ffebcd\",\n  blue: \"00f\",\n  blueviolet: \"8a2be2\",\n  brown: \"a52a2a\",\n  burlywood: \"deb887\",\n  burntsienna: \"ea7e5d\",\n  cadetblue: \"5f9ea0\",\n  chartreuse: \"7fff00\",\n  chocolate: \"d2691e\",\n  coral: \"ff7f50\",\n  cornflowerblue: \"6495ed\",\n  cornsilk: \"fff8dc\",\n  crimson: \"dc143c\",\n  cyan: \"0ff\",\n  darkblue: \"00008b\",\n  darkcyan: \"008b8b\",\n  darkgoldenrod: \"b8860b\",\n  darkgray: \"a9a9a9\",\n  darkgreen: \"006400\",\n  darkgrey: \"a9a9a9\",\n  darkkhaki: \"bdb76b\",\n  darkmagenta: \"8b008b\",\n  darkolivegreen: \"556b2f\",\n  darkorange: \"ff8c00\",\n  darkorchid: \"9932cc\",\n  darkred: \"8b0000\",\n  darksalmon: \"e9967a\",\n  darkseagreen: \"8fbc8f\",\n  darkslateblue: \"483d8b\",\n  darkslategray: \"2f4f4f\",\n  darkslategrey: \"2f4f4f\",\n  darkturquoise: \"00ced1\",\n  darkviolet: \"9400d3\",\n  deeppink: \"ff1493\",\n  deepskyblue: \"00bfff\",\n  dimgray: \"696969\",\n  dimgrey: \"696969\",\n  dodgerblue: \"1e90ff\",\n  firebrick: \"b22222\",\n  floralwhite: \"fffaf0\",\n  forestgreen: \"228b22\",\n  fuchsia: \"f0f\",\n  gainsboro: \"dcdcdc\",\n  ghostwhite: \"f8f8ff\",\n  gold: \"ffd700\",\n  goldenrod: \"daa520\",\n  gray: \"808080\",\n  green: \"008000\",\n  greenyellow: \"adff2f\",\n  grey: \"808080\",\n  honeydew: \"f0fff0\",\n  hotpink: \"ff69b4\",\n  indianred: \"cd5c5c\",\n  indigo: \"4b0082\",\n  ivory: \"fffff0\",\n  khaki: \"f0e68c\",\n  lavender: \"e6e6fa\",\n  lavenderblush: \"fff0f5\",\n  lawngreen: \"7cfc00\",\n  lemonchiffon: \"fffacd\",\n  lightblue: \"add8e6\",\n  lightcoral: \"f08080\",\n  lightcyan: \"e0ffff\",\n  lightgoldenrodyellow: \"fafad2\",\n  lightgray: \"d3d3d3\",\n  lightgreen: \"90ee90\",\n  lightgrey: \"d3d3d3\",\n  lightpink: \"ffb6c1\",\n  lightsalmon: \"ffa07a\",\n  lightseagreen: \"20b2aa\",\n  lightskyblue: \"87cefa\",\n  lightslategray: \"789\",\n  lightslategrey: \"789\",\n  lightsteelblue: \"b0c4de\",\n  lightyellow: \"ffffe0\",\n  lime: \"0f0\",\n  limegreen: \"32cd32\",\n  linen: \"faf0e6\",\n  magenta: \"f0f\",\n  maroon: \"800000\",\n  mediumaquamarine: \"66cdaa\",\n  mediumblue: \"0000cd\",\n  mediumorchid: \"ba55d3\",\n  mediumpurple: \"9370db\",\n  mediumseagreen: \"3cb371\",\n  mediumslateblue: \"7b68ee\",\n  mediumspringgreen: \"00fa9a\",\n  mediumturquoise: \"48d1cc\",\n  mediumvioletred: \"c71585\",\n  midnightblue: \"191970\",\n  mintcream: \"f5fffa\",\n  mistyrose: \"ffe4e1\",\n  moccasin: \"ffe4b5\",\n  navajowhite: \"ffdead\",\n  navy: \"000080\",\n  oldlace: \"fdf5e6\",\n  olive: \"808000\",\n  olivedrab: \"6b8e23\",\n  orange: \"ffa500\",\n  orangered: \"ff4500\",\n  orchid: \"da70d6\",\n  palegoldenrod: \"eee8aa\",\n  palegreen: \"98fb98\",\n  paleturquoise: \"afeeee\",\n  palevioletred: \"db7093\",\n  papayawhip: \"ffefd5\",\n  peachpuff: \"ffdab9\",\n  peru: \"cd853f\",\n  pink: \"ffc0cb\",\n  plum: \"dda0dd\",\n  powderblue: \"b0e0e6\",\n  purple: \"800080\",\n  rebeccapurple: \"663399\",\n  red: \"f00\",\n  rosybrown: \"bc8f8f\",\n  royalblue: \"4169e1\",\n  saddlebrown: \"8b4513\",\n  salmon: \"fa8072\",\n  sandybrown: \"f4a460\",\n  seagreen: \"2e8b57\",\n  seashell: \"fff5ee\",\n  sienna: \"a0522d\",\n  silver: \"c0c0c0\",\n  skyblue: \"87ceeb\",\n  slateblue: \"6a5acd\",\n  slategray: \"708090\",\n  slategrey: \"708090\",\n  snow: \"fffafa\",\n  springgreen: \"00ff7f\",\n  steelblue: \"4682b4\",\n  tan: \"d2b48c\",\n  teal: \"008080\",\n  thistle: \"d8bfd8\",\n  tomato: \"ff6347\",\n  turquoise: \"40e0d0\",\n  violet: \"ee82ee\",\n  wheat: \"f5deb3\",\n  white: \"fff\",\n  whitesmoke: \"f5f5f5\",\n  yellow: \"ff0\",\n  yellowgreen: \"9acd32\",\n});\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = (tinycolor.hexNames = flip(names));\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n  var flipped = {};\n  for (var i in o) {\n    if (o.hasOwnProperty(i)) {\n      flipped[o[i]] = i;\n    }\n  }\n  return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n  a = parseFloat(a);\n\n  if (isNaN(a) || a < 0 || a > 1) {\n    a = 1;\n  }\n\n  return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n  if (isOnePointZero(n)) n = \"100%\";\n\n  var processPercent = isPercentage(n);\n  n = Math.min(max, Math.max(0, parseFloat(n)));\n\n  // Automatically convert percentage into number\n  if (processPercent) {\n    n = parseInt(n * max, 10) / 100;\n  }\n\n  // Handle floating point rounding errors\n  if (Math.abs(n - max) < 0.000001) {\n    return 1;\n  }\n\n  // Convert into [0, 1] range if it isn't already\n  return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n  return Math.min(1, Math.max(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n  return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n  return typeof n == \"string\" && n.indexOf(\".\") != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n  return typeof n === \"string\" && n.indexOf(\"%\") != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n  return c.length == 1 ? \"0\" + c : \"\" + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n  if (n <= 1) {\n    n = n * 100 + \"%\";\n  }\n\n  return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n  return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n  return parseIntFromHex(h) / 255;\n}\n\nvar matchers = (function () {\n  // <http://www.w3.org/TR/css3-values/#integers>\n  var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n  // <http://www.w3.org/TR/css3-values/#number-value>\n  var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n  // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n  var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n  // Actual matching.\n  // Parentheses and commas are optional, but not required.\n  // Whitespace can take the place of commas or opening paren\n  var PERMISSIVE_MATCH3 =\n    \"[\\\\s|\\\\(]+(\" +\n    CSS_UNIT +\n    \")[,|\\\\s]+(\" +\n    CSS_UNIT +\n    \")[,|\\\\s]+(\" +\n    CSS_UNIT +\n    \")\\\\s*\\\\)?\";\n  var PERMISSIVE_MATCH4 =\n    \"[\\\\s|\\\\(]+(\" +\n    CSS_UNIT +\n    \")[,|\\\\s]+(\" +\n    CSS_UNIT +\n    \")[,|\\\\s]+(\" +\n    CSS_UNIT +\n    \")[,|\\\\s]+(\" +\n    CSS_UNIT +\n    \")\\\\s*\\\\)?\";\n\n  return {\n    CSS_UNIT: new RegExp(CSS_UNIT),\n    rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n    rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n    hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n    hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n    hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n    hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n  };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n  return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n  color = color.replace(trimLeft, \"\").replace(trimRight, \"\").toLowerCase();\n  var named = false;\n  if (names[color]) {\n    color = names[color];\n    named = true;\n  } else if (color == \"transparent\") {\n    return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n  }\n\n  // Try to match string input using regular expressions.\n  // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n  // Just return an object and let the conversion functions handle that.\n  // This way the result will be the same whether the tinycolor is initialized with string or object.\n  var match;\n  if ((match = matchers.rgb.exec(color))) {\n    return { r: match[1], g: match[2], b: match[3] };\n  }\n  if ((match = matchers.rgba.exec(color))) {\n    return { r: match[1], g: match[2], b: match[3], a: match[4] };\n  }\n  if ((match = matchers.hsl.exec(color))) {\n    return { h: match[1], s: match[2], l: match[3] };\n  }\n  if ((match = matchers.hsla.exec(color))) {\n    return { h: match[1], s: match[2], l: match[3], a: match[4] };\n  }\n  if ((match = matchers.hsv.exec(color))) {\n    return { h: match[1], s: match[2], v: match[3] };\n  }\n  if ((match = matchers.hsva.exec(color))) {\n    return { h: match[1], s: match[2], v: match[3], a: match[4] };\n  }\n  if ((match = matchers.hex8.exec(color))) {\n    return {\n      r: parseIntFromHex(match[1]),\n      g: parseIntFromHex(match[2]),\n      b: parseIntFromHex(match[3]),\n      a: convertHexToDecimal(match[4]),\n      format: named ? \"name\" : \"hex8\",\n    };\n  }\n  if ((match = matchers.hex6.exec(color))) {\n    return {\n      r: parseIntFromHex(match[1]),\n      g: parseIntFromHex(match[2]),\n      b: parseIntFromHex(match[3]),\n      format: named ? \"name\" : \"hex\",\n    };\n  }\n  if ((match = matchers.hex4.exec(color))) {\n    return {\n      r: parseIntFromHex(match[1] + \"\" + match[1]),\n      g: parseIntFromHex(match[2] + \"\" + match[2]),\n      b: parseIntFromHex(match[3] + \"\" + match[3]),\n      a: convertHexToDecimal(match[4] + \"\" + match[4]),\n      format: named ? \"name\" : \"hex8\",\n    };\n  }\n  if ((match = matchers.hex3.exec(color))) {\n    return {\n      r: parseIntFromHex(match[1] + \"\" + match[1]),\n      g: parseIntFromHex(match[2] + \"\" + match[2]),\n      b: parseIntFromHex(match[3] + \"\" + match[3]),\n      format: named ? \"name\" : \"hex\",\n    };\n  }\n\n  return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n  // return valid WCAG2 parms for isReadable.\n  // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n  var level, size;\n  parms = parms || { level: \"AA\", size: \"small\" };\n  level = (parms.level || \"AA\").toUpperCase();\n  size = (parms.size || \"small\").toLowerCase();\n  if (level !== \"AA\" && level !== \"AAA\") {\n    level = \"AA\";\n  }\n  if (size !== \"small\" && size !== \"large\") {\n    size = \"small\";\n  }\n  return { level: level, size: size };\n}\n"
        },
        {
          "name": "npm",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.js",
          "type": "blob",
          "size": 54.48828125,
          "content": "import {\n  assert,\n  assertEquals,\n  assertThrows,\n} from \"https://deno.land/std@0.168.0/testing/asserts.ts\";\nimport tinycolor from \"./mod.js\";\n\n// The following comment is used by build.js to copy tests to cjs:\n// TEST_BEGINS_HERE\n\nDeno.test(\"TinyColor initialization\", function () {\n  assert(\n    typeof tinycolor != \"undefined\",\n    \"tinycolor is initialized on the page\"\n  );\n  assert(\n    typeof tinycolor(\"red\") == \"object\",\n    \"tinycolor is able to be instantiated\"\n  );\n\n  var r = tinycolor(\"red\");\n  assert(\n    tinycolor(r) === r,\n    \"when given a tinycolor instance, tinycolor() returns it\"\n  );\n  assert(\n    new tinycolor(r) === r,\n    \"when given a tinycolor instance, new tinycolor() returns it\"\n  );\n  assertEquals(\n    tinycolor(\"red\", { format: \"hex\" }).toString(),\n    \"#ff0000\",\n    \"tinycolor options are being parsed\"\n  );\n  assertEquals(\n    tinycolor.fromRatio({ r: 1, g: 0, b: 0 }, { format: \"hex\" }).toString(),\n    \"#ff0000\",\n    \"tinycolor options are being parsed\"\n  );\n\n  var obj = { h: 180, s: 0.5, l: 0.5 };\n  var color = tinycolor(obj);\n  assert(\n    obj.s === 0.5,\n    \"when given an object, the original object is not modified\"\n  );\n});\n\nDeno.test(\"Original input\", function () {\n  var colorRgbUp = \"RGB(39, 39, 39)\";\n  var colorRgbLow = \"rgb(39, 39, 39)\";\n  var colorRgbMix = \"RgB(39, 39, 39)\";\n  var tinycolorObj = tinycolor(colorRgbMix);\n  var inputObj = { r: 100, g: 100, b: 100 };\n  var r = tinycolor(\"red\");\n\n  assert(\n    tinycolor(colorRgbLow).getOriginalInput() === colorRgbLow,\n    \"original lowercase input is returned\"\n  );\n  assert(\n    tinycolor(colorRgbUp).getOriginalInput() === colorRgbUp,\n    \"original uppercase input is returned\"\n  );\n  assert(\n    tinycolor(colorRgbMix).getOriginalInput() === colorRgbMix,\n    \"original mixed input is returned\"\n  );\n  assert(\n    tinycolor(tinycolorObj).getOriginalInput() === colorRgbMix,\n    \"when given a tinycolor instance, the color string is returned\"\n  );\n  assert(\n    tinycolor(inputObj).getOriginalInput() === inputObj,\n    \"when given an object, the object is returned\"\n  );\n  assert(\n    new tinycolor(\"\").getOriginalInput() === \"\",\n    \"when given an empty string, an empty string is returned\"\n  );\n  assert(\n    new tinycolor(null).getOriginalInput() === \"\",\n    \"when given a null value, an empty string is returned\"\n  );\n});\n\nDeno.test(\"Cloning color\", function () {\n  var originalColor = tinycolor(\"red\");\n  var originalColorRgbString = originalColor.toRgbString();\n\n  var clonedColor = originalColor.clone();\n  assert(\n    clonedColor.toRgbString() === originalColor.toRgbString(),\n    \"cloned color is identical\"\n  );\n\n  clonedColor.setAlpha(0.5);\n  assert(\n    clonedColor.toRgbString() !== originalColor.toRgbString(),\n    \"cloned color is changing independently from original color\"\n  );\n  assert(\n    originalColorRgbString === originalColor.toRgbString(),\n    \"original color was not changed by cloned color change\"\n  );\n});\nDeno.test(\"Random color\", function () {\n  var randomColor = tinycolor.random();\n  assertEquals(randomColor.getAlpha(), 1);\n  assertEquals(randomColor.getFormat(), \"prgb\");\n\n  randomColor.setAlpha(0.5);\n  assertEquals(randomColor.toHex8String().slice(-2), \"80\");\n});\n\n// Taken from convertWikipediaColors.html\nvar conversions = [\n  {\n    hex: \"#FFFFFF\",\n    hex8: \"#FFFFFFFF\",\n    rgb: { r: \"100.0%\", g: \"100.0%\", b: \"100.0%\" },\n    hsv: { h: \"0\", s: \"0.000\", v: \"1.000\" },\n    hsl: { h: \"0\", s: \"0.000\", l: \"1.000\" },\n  },\n  {\n    hex: \"#808080\",\n    hex8: \"#808080FF\",\n    rgb: { r: \"050.0%\", g: \"050.0%\", b: \"050.0%\" },\n    hsv: { h: \"0\", s: \"0.000\", v: \"0.500\" },\n    hsl: { h: \"0\", s: \"0.000\", l: \"0.500\" },\n  },\n  {\n    hex: \"#000000\",\n    hex8: \"#000000FF\",\n    rgb: { r: \"000.0%\", g: \"000.0%\", b: \"000.0%\" },\n    hsv: { h: \"0\", s: \"0.000\", v: \"0.000\" },\n    hsl: { h: \"0\", s: \"0.000\", l: \"0.000\" },\n  },\n  {\n    hex: \"#FF0000\",\n    hex8: \"#FF0000FF\",\n    rgb: { r: \"100.0%\", g: \"000.0%\", b: \"000.0%\" },\n    hsv: { h: \"0.0\", s: \"1.000\", v: \"1.000\" },\n    hsl: { h: \"0.0\", s: \"1.000\", l: \"0.500\" },\n  },\n  {\n    hex: \"#BFBF00\",\n    hex8: \"#BFBF00FF\",\n    rgb: { r: \"075.0%\", g: \"075.0%\", b: \"000.0%\" },\n    hsv: { h: \"60.0\", s: \"1.000\", v: \"0.750\" },\n    hsl: { h: \"60.0\", s: \"1.000\", l: \"0.375\" },\n  },\n  {\n    hex: \"#008000\",\n    hex8: \"#008000FF\",\n    rgb: { r: \"000.0%\", g: \"050.0%\", b: \"000.0%\" },\n    hsv: { h: \"120.0\", s: \"1.000\", v: \"0.500\" },\n    hsl: { h: \"120.0\", s: \"1.000\", l: \"0.250\" },\n  },\n  {\n    hex: \"#80FFFF\",\n    hex8: \"#80FFFFFF\",\n    rgb: { r: \"050.0%\", g: \"100.0%\", b: \"100.0%\" },\n    hsv: { h: \"180.0\", s: \"0.500\", v: \"1.000\" },\n    hsl: { h: \"180.0\", s: \"1.000\", l: \"0.750\" },\n  },\n  {\n    hex: \"#8080FF\",\n    hex8: \"#8080FFFF\",\n    rgb: { r: \"050.0%\", g: \"050.0%\", b: \"100.0%\" },\n    hsv: { h: \"240.0\", s: \"0.500\", v: \"1.000\" },\n    hsl: { h: \"240.0\", s: \"1.000\", l: \"0.750\" },\n  },\n  {\n    hex: \"#BF40BF\",\n    hex8: \"#BF40BFFF\",\n    rgb: { r: \"075.0%\", g: \"025.0%\", b: \"075.0%\" },\n    hsv: { h: \"300.0\", s: \"0.667\", v: \"0.750\" },\n    hsl: { h: \"300.0\", s: \"0.500\", l: \"0.500\" },\n  },\n  {\n    hex: \"#A0A424\",\n    hex8: \"#A0A424FF\",\n    rgb: { r: \"062.8%\", g: \"064.3%\", b: \"014.2%\" },\n    hsv: { h: \"61.8\", s: \"0.779\", v: \"0.643\" },\n    hsl: { h: \"61.8\", s: \"0.638\", l: \"0.393\" },\n  },\n  {\n    hex: \"#1EAC41\",\n    hex8: \"#1EAC41FF\",\n    rgb: { r: \"011.6%\", g: \"067.5%\", b: \"025.5%\" },\n    hsv: { h: \"134.9\", s: \"0.828\", v: \"0.675\" },\n    hsl: { h: \"134.9\", s: \"0.707\", l: \"0.396\" },\n  },\n  {\n    hex: \"#B430E5\",\n    hex8: \"#B430E5FF\",\n    rgb: { r: \"070.4%\", g: \"018.7%\", b: \"089.7%\" },\n    hsv: { h: \"283.7\", s: \"0.792\", v: \"0.897\" },\n    hsl: { h: \"283.7\", s: \"0.775\", l: \"0.542\" },\n  },\n  {\n    hex: \"#FEF888\",\n    hex8: \"#FEF888FF\",\n    rgb: { r: \"099.8%\", g: \"097.4%\", b: \"053.2%\" },\n    hsv: { h: \"56.9\", s: \"0.467\", v: \"0.998\" },\n    hsl: { h: \"56.9\", s: \"0.991\", l: \"0.765\" },\n  },\n  {\n    hex: \"#19CB97\",\n    hex8: \"#19CB97FF\",\n    rgb: { r: \"009.9%\", g: \"079.5%\", b: \"059.1%\" },\n    hsv: { h: \"162.4\", s: \"0.875\", v: \"0.795\" },\n    hsl: { h: \"162.4\", s: \"0.779\", l: \"0.447\" },\n  },\n  {\n    hex: \"#362698\",\n    hex8: \"#362698FF\",\n    rgb: { r: \"021.1%\", g: \"014.9%\", b: \"059.7%\" },\n    hsv: { h: \"248.3\", s: \"0.750\", v: \"0.597\" },\n    hsl: { h: \"248.3\", s: \"0.601\", l: \"0.373\" },\n  },\n  {\n    hex: \"#7E7EB8\",\n    hex8: \"#7E7EB8FF\",\n    rgb: { r: \"049.5%\", g: \"049.3%\", b: \"072.1%\" },\n    hsv: { h: \"240.5\", s: \"0.316\", v: \"0.721\" },\n    hsl: { h: \"240.5\", s: \"0.290\", l: \"0.607\" },\n  },\n];\n\nDeno.test(\"Color Equality\", function () {\n  for (var i = 0; i < conversions.length; i++) {\n    var c = conversions[i];\n    var tiny = tinycolor(c.hex);\n\n    assert(true, tiny.isValid());\n    assert(\n      true,\n      \"Testing \" +\n        c.hex +\n        \": \" +\n        tiny.toRgbString() +\n        \" \" +\n        tiny.toPercentageRgbString() +\n        \" \" +\n        tiny.toHsvString() +\n        \" \" +\n        tiny.toHslString() +\n        \" \" +\n        tiny.toHexString() +\n        \"Original: \" +\n        JSON.stringify(c.rgb) +\n        \" \" +\n        JSON.stringify(c.hsv) +\n        \" \" +\n        JSON.stringify(c.hsl)\n    );\n    assert(tinycolor.equals(c.rgb, c.hex), \"RGB equals hex \" + c.hex);\n    assert(tinycolor.equals(c.rgb, c.hex8), \"RGB equals hex \" + c.hex);\n    assert(tinycolor.equals(c.rgb, c.hsl), \"RGB equals HSL \" + c.hex);\n    assert(tinycolor.equals(c.rgb, c.hsv), \"RGB equals HSV \" + c.hex);\n    assert(tinycolor.equals(c.rgb, c.rgb), \"RGB equals RGB \" + c.hex);\n\n    assert(tinycolor.equals(c.hex, c.hex), \"hex equals hex \" + c.hex);\n    assert(tinycolor.equals(c.hex, c.hex8), \"hex equals hex8 \" + c.hex);\n    assert(tinycolor.equals(c.hex, c.hsl), \"hex equals HSL \" + c.hex);\n    assert(tinycolor.equals(c.hex, c.hsv), \"hex equals HSV \" + c.hex);\n\n    assert(tinycolor.equals(c.hsl, c.hsv), \"HSL equals HSV \" + c.hex);\n  }\n});\n\nDeno.test(\"With Ratio\", function () {\n  assertEquals(\n    tinycolor.fromRatio({ r: 1, g: 1, b: 1 }).toHexString(),\n    \"#ffffff\",\n    \"white\"\n  );\n  assertEquals(\n    tinycolor.fromRatio({ r: 1, g: 0, b: 0, a: 0.5 }).toRgbString(),\n    \"rgba(255, 0, 0, 0.5)\",\n    \"alpha works when ratio is parsed\"\n  );\n  assertEquals(\n    tinycolor.fromRatio({ r: 1, g: 0, b: 0, a: 1 }).toRgbString(),\n    \"rgb(255, 0, 0)\",\n    \"alpha = 1 works when ratio is parsed\"\n  );\n  assertEquals(\n    tinycolor.fromRatio({ r: 1, g: 0, b: 0, a: 10 }).toRgbString(),\n    \"rgb(255, 0, 0)\",\n    \"alpha > 1 works when ratio is parsed\"\n  );\n  assertEquals(\n    tinycolor.fromRatio({ r: 1, g: 0, b: 0, a: -1 }).toRgbString(),\n    \"rgb(255, 0, 0)\",\n    \"alpha < 1 works when ratio is parsed\"\n  );\n});\n\nDeno.test(\"Without Ratio\", function () {\n  assertEquals(\n    tinycolor({ r: 1, g: 1, b: 1 }).toHexString(),\n    \"#010101\",\n    \"010101\"\n  );\n  assertEquals(\n    tinycolor({ r: 0.1, g: 0.1, b: 0.1 }).toHexString(),\n    \"#000000\",\n    \"000000\"\n  );\n  assertEquals(tinycolor(\"rgb .1 .1 .1\").toHexString(), \"#000000\", \"000000\");\n});\n\nDeno.test(\"RGB Text Parsing\", function () {\n  assertEquals(\n    tinycolor(\"rgb 255 0 0\").toHexString(),\n    \"#ff0000\",\n    \"spaced input\"\n  );\n  assertEquals(\n    tinycolor(\"rgb(255, 0, 0)\").toHexString(),\n    \"#ff0000\",\n    \"parenthesized input\"\n  );\n  assertEquals(\n    tinycolor(\"rgb (255, 0, 0)\").toHexString(),\n    \"#ff0000\",\n    \"parenthesized spaced input\"\n  );\n  assertEquals(\n    tinycolor({ r: 255, g: 0, b: 0 }).toHexString(),\n    \"#ff0000\",\n    \"object input\"\n  );\n  assertEquals(\n    tinycolor({ r: 255, g: 0, b: 0 }).toRgb(),\n    {\n      r: 255,\n      g: 0,\n      b: 0,\n      a: 1,\n    },\n    \"object input and compare\"\n  );\n\n  assert(tinycolor.equals({ r: 200, g: 100, b: 0 }, \"rgb(200, 100, 0)\"));\n  assert(tinycolor.equals({ r: 200, g: 100, b: 0 }, \"rgb 200 100 0\"));\n  assert(tinycolor.equals({ r: 200, g: 100, b: 0 }, \"rgb 200 100 0\"));\n  assert(\n    tinycolor.equals({ r: 200, g: 100, b: 0, a: 0.4 }, \"rgba 200 100 0 .4\")\n  );\n  assert(!tinycolor.equals({ r: 199, g: 100, b: 0 }, \"rgba 200 100 0 1\"));\n\n  assert(!tinycolor.equals({ r: 199, g: 100, b: 0 }, \"rgb(200, 100, 0)\"));\n  assert(!tinycolor.equals({ r: 199, g: 100, b: 0 }, \"rgb 200 100 0\"));\n  assert(!tinycolor.equals({ r: 199, g: 100, b: 0 }, \"rgb 200 100 0\"));\n\n  assert(\n    tinycolor.equals(tinycolor({ r: 200, g: 100, b: 0 }), \"rgb(200, 100, 0)\")\n  );\n  assert(\n    tinycolor.equals(tinycolor({ r: 200, g: 100, b: 0 }), \"rgb 200 100 0\")\n  );\n  assert(\n    tinycolor.equals(tinycolor({ r: 200, g: 100, b: 0 }), \"rgb 200 100 0\")\n  );\n});\n\nDeno.test(\"Percentage RGB Text Parsing\", function () {\n  assertEquals(\n    tinycolor(\"rgb 100% 0% 0%\").toHexString(),\n    \"#ff0000\",\n    \"spaced input\"\n  );\n  assertEquals(\n    tinycolor(\"rgb(100%, 0%, 0%)\").toHexString(),\n    \"#ff0000\",\n    \"parenthesized input\"\n  );\n  assertEquals(\n    tinycolor(\"rgb (100%, 0%, 0%)\").toHexString(),\n    \"#ff0000\",\n    \"parenthesized spaced input\"\n  );\n  assertEquals(\n    tinycolor({ r: \"100%\", g: \"0%\", b: \"0%\" }).toHexString(),\n    \"#ff0000\",\n    \"object input\"\n  );\n  assertEquals(\n    tinycolor({ r: \"100%\", g: \"0%\", b: \"0%\" }).toRgb(),\n    {\n      r: 255,\n      g: 0,\n      b: 0,\n      a: 1,\n    },\n    \"object input and compare\"\n  );\n\n  assert(\n    tinycolor.equals({ r: \"90%\", g: \"45%\", b: \"0%\" }, \"rgb(90%, 45%, 0%)\")\n  );\n  assert(tinycolor.equals({ r: \"90%\", g: \"45%\", b: \"0%\" }, \"rgb 90% 45% 0%\"));\n  assert(tinycolor.equals({ r: \"90%\", g: \"45%\", b: \"0%\" }, \"rgb 90% 45% 0%\"));\n  assert(\n    tinycolor.equals(\n      { r: \"90%\", g: \"45%\", b: \"0%\", a: 0.4 },\n      \"rgba 90% 45% 0% .4\"\n    )\n  );\n  assert(\n    !tinycolor.equals({ r: \"89%\", g: \"45%\", b: \"0%\" }, \"rgba 90% 45% 0% 1\")\n  );\n\n  assert(\n    !tinycolor.equals({ r: \"89%\", g: \"45%\", b: \"0%\" }, \"rgb(90%, 45%, 0%)\")\n  );\n  assert(!tinycolor.equals({ r: \"89%\", g: \"45%\", b: \"0%\" }, \"rgb 90% 45% 0%\"));\n  assert(!tinycolor.equals({ r: \"89%\", g: \"45%\", b: \"0%\" }, \"rgb 90% 45% 0%\"));\n\n  assert(\n    tinycolor.equals(\n      tinycolor({ r: \"90%\", g: \"45%\", b: \"0%\" }),\n      \"rgb(90%, 45%, 0%)\"\n    )\n  );\n  assert(\n    tinycolor.equals(\n      tinycolor({ r: \"90%\", g: \"45%\", b: \"0%\" }),\n      \"rgb 90% 45% 0%\"\n    )\n  );\n  assert(\n    tinycolor.equals(\n      tinycolor({ r: \"90%\", g: \"45%\", b: \"0%\" }),\n      \"rgb 90% 45% 0%\"\n    )\n  );\n});\n\nDeno.test(\"HSL parsing\", function () {\n  assertEquals(\n    tinycolor({ h: 251, s: 100, l: 0.38 }).toHexString(),\n    \"#2400c2\",\n    \"to hex\"\n  );\n  assertEquals(\n    tinycolor({ h: 251, s: 100, l: 0.38 }).toRgbString(),\n    \"rgb(36, 0, 194)\",\n    \"to rgb\"\n  );\n  assertEquals(\n    tinycolor({ h: 251, s: 100, l: 0.38 }).toHslString(),\n    \"hsl(251, 100%, 38%)\",\n    \"to hsl\"\n  );\n  assertEquals(\n    tinycolor({ h: 251, s: 100, l: 0.38, a: 0.5 }).toHslString(),\n    \"hsla(251, 100%, 38%, 0.5)\",\n    \"to hsla\"\n  );\n  assertEquals(\n    tinycolor(\"hsl(251, 100, 38)\").toHexString(),\n    \"#2400c2\",\n    \"to hex\"\n  );\n  assertEquals(\n    tinycolor(\"hsl(251, 100%, 38%)\").toRgbString(),\n    \"rgb(36, 0, 194)\",\n    \"to rgb\"\n  );\n  assertEquals(\n    tinycolor(\"hsl(251, 100%, 38%)\").toHslString(),\n    \"hsl(251, 100%, 38%)\",\n    \"to hsl\"\n  );\n  assertEquals(\n    tinycolor(\"hsl 100 20 10\").toHslString(),\n    \"hsl(100, 20%, 10%)\",\n    \"problematic hsl\"\n  );\n});\n\nDeno.test(\"Hex Parsing\", function () {\n  assertEquals(tinycolor(\"rgb 255 0 0\").toHexString(), \"#ff0000\");\n  assertEquals(tinycolor(\"rgb 255 0 0\").toHexString(true), \"#f00\");\n\n  assertEquals(tinycolor(\"rgba 255 0 0 0.5\").toHex8String(), \"#ff000080\");\n  assertEquals(tinycolor(\"rgba 255 0 0 0\").toHex8String(), \"#ff000000\");\n  assertEquals(tinycolor(\"rgba 255 0 0 1\").toHex8String(), \"#ff0000ff\");\n  assertEquals(tinycolor(\"rgba 255 0 0 1\").toHex8String(true), \"#f00f\");\n\n  assertEquals(tinycolor(\"rgb 255 0 0\").toHex(), \"ff0000\");\n  assertEquals(tinycolor(\"rgb 255 0 0\").toHex(true), \"f00\");\n  assertEquals(tinycolor(\"rgba 255 0 0 0.5\").toHex8(), \"ff000080\");\n});\n\nDeno.test(\"HSV Parsing\", function () {\n  assertEquals(\n    tinycolor(\"hsv 251.1 0.887 .918\").toHsvString(),\n    \"hsv(251, 89%, 92%)\"\n  );\n  assertEquals(\n    tinycolor(\"hsv 251.1 0.887 0.918\").toHsvString(),\n    \"hsv(251, 89%, 92%)\"\n  );\n  assertEquals(\n    tinycolor(\"hsva 251.1 0.887 0.918 0.5\").toHsvString(),\n    \"hsva(251, 89%, 92%, 0.5)\"\n  );\n});\n\nDeno.test(\"Invalid Parsing\", function () {\n  var invalidColor = tinycolor(\"this is not a color\");\n  assertEquals(invalidColor.toHexString(), \"#000000\");\n  assertEquals(false, invalidColor.isValid());\n\n  invalidColor = tinycolor(\"#red\");\n  assertEquals(invalidColor.toHexString(), \"#000000\");\n  assertEquals(false, invalidColor.isValid());\n\n  invalidColor = tinycolor(\"  #red\");\n  assertEquals(invalidColor.toHexString(), \"#000000\");\n  assertEquals(false, invalidColor.isValid());\n\n  invalidColor = tinycolor(\"##123456\");\n  assertEquals(invalidColor.toHexString(), \"#000000\");\n  assertEquals(false, invalidColor.isValid());\n\n  invalidColor = tinycolor(\"  ##123456\");\n  assertEquals(invalidColor.toHexString(), \"#000000\");\n  assertEquals(false, invalidColor.isValid());\n\n  invalidColor = tinycolor({ r: \"invalid\", g: \"invalid\", b: \"invalid\" });\n  assertEquals(invalidColor.toHexString(), \"#000000\");\n  assertEquals(false, invalidColor.isValid());\n\n  invalidColor = tinycolor({ h: \"invalid\", s: \"invalid\", l: \"invalid\" });\n  assertEquals(invalidColor.toHexString(), \"#000000\");\n  assertEquals(false, invalidColor.isValid());\n\n  invalidColor = tinycolor({ h: \"invalid\", s: \"invalid\", v: \"invalid\" });\n  assertEquals(invalidColor.toHexString(), \"#000000\");\n  assertEquals(false, invalidColor.isValid());\n});\n\nDeno.test(\"Named colors\", function () {\n  assertEquals(tinycolor(\"aliceblue\").toHex(), \"f0f8ff\");\n  assertEquals(tinycolor(\"antiquewhite\").toHex(), \"faebd7\");\n  assertEquals(tinycolor(\"aqua\").toHex(), \"00ffff\");\n  assertEquals(tinycolor(\"aquamarine\").toHex(), \"7fffd4\");\n  assertEquals(tinycolor(\"azure\").toHex(), \"f0ffff\");\n  assertEquals(tinycolor(\"beige\").toHex(), \"f5f5dc\");\n  assertEquals(tinycolor(\"bisque\").toHex(), \"ffe4c4\");\n  assertEquals(tinycolor(\"black\").toHex(), \"000000\");\n  assertEquals(tinycolor(\"blanchedalmond\").toHex(), \"ffebcd\");\n  assertEquals(tinycolor(\"blue\").toHex(), \"0000ff\");\n  assertEquals(tinycolor(\"blueviolet\").toHex(), \"8a2be2\");\n  assertEquals(tinycolor(\"brown\").toHex(), \"a52a2a\");\n  assertEquals(tinycolor(\"burlywood\").toHex(), \"deb887\");\n  assertEquals(tinycolor(\"cadetblue\").toHex(), \"5f9ea0\");\n  assertEquals(tinycolor(\"chartreuse\").toHex(), \"7fff00\");\n  assertEquals(tinycolor(\"chocolate\").toHex(), \"d2691e\");\n  assertEquals(tinycolor(\"coral\").toHex(), \"ff7f50\");\n  assertEquals(tinycolor(\"cornflowerblue\").toHex(), \"6495ed\");\n  assertEquals(tinycolor(\"cornsilk\").toHex(), \"fff8dc\");\n  assertEquals(tinycolor(\"crimson\").toHex(), \"dc143c\");\n  assertEquals(tinycolor(\"cyan\").toHex(), \"00ffff\");\n  assertEquals(tinycolor(\"darkblue\").toHex(), \"00008b\");\n  assertEquals(tinycolor(\"darkcyan\").toHex(), \"008b8b\");\n  assertEquals(tinycolor(\"darkgoldenrod\").toHex(), \"b8860b\");\n  assertEquals(tinycolor(\"darkgray\").toHex(), \"a9a9a9\");\n  assertEquals(tinycolor(\"darkgreen\").toHex(), \"006400\");\n  assertEquals(tinycolor(\"darkkhaki\").toHex(), \"bdb76b\");\n  assertEquals(tinycolor(\"darkmagenta\").toHex(), \"8b008b\");\n  assertEquals(tinycolor(\"darkolivegreen\").toHex(), \"556b2f\");\n  assertEquals(tinycolor(\"darkorange\").toHex(), \"ff8c00\");\n  assertEquals(tinycolor(\"darkorchid\").toHex(), \"9932cc\");\n  assertEquals(tinycolor(\"darkred\").toHex(), \"8b0000\");\n  assertEquals(tinycolor(\"darksalmon\").toHex(), \"e9967a\");\n  assertEquals(tinycolor(\"darkseagreen\").toHex(), \"8fbc8f\");\n  assertEquals(tinycolor(\"darkslateblue\").toHex(), \"483d8b\");\n  assertEquals(tinycolor(\"darkslategray\").toHex(), \"2f4f4f\");\n  assertEquals(tinycolor(\"darkturquoise\").toHex(), \"00ced1\");\n  assertEquals(tinycolor(\"darkviolet\").toHex(), \"9400d3\");\n  assertEquals(tinycolor(\"deeppink\").toHex(), \"ff1493\");\n  assertEquals(tinycolor(\"deepskyblue\").toHex(), \"00bfff\");\n  assertEquals(tinycolor(\"dimgray\").toHex(), \"696969\");\n  assertEquals(tinycolor(\"dodgerblue\").toHex(), \"1e90ff\");\n  assertEquals(tinycolor(\"firebrick\").toHex(), \"b22222\");\n  assertEquals(tinycolor(\"floralwhite\").toHex(), \"fffaf0\");\n  assertEquals(tinycolor(\"forestgreen\").toHex(), \"228b22\");\n  assertEquals(tinycolor(\"fuchsia\").toHex(), \"ff00ff\");\n  assertEquals(tinycolor(\"gainsboro\").toHex(), \"dcdcdc\");\n  assertEquals(tinycolor(\"ghostwhite\").toHex(), \"f8f8ff\");\n  assertEquals(tinycolor(\"gold\").toHex(), \"ffd700\");\n  assertEquals(tinycolor(\"goldenrod\").toHex(), \"daa520\");\n  assertEquals(tinycolor(\"gray\").toHex(), \"808080\");\n  assertEquals(tinycolor(\"grey\").toHex(), \"808080\");\n  assertEquals(tinycolor(\"green\").toHex(), \"008000\");\n  assertEquals(tinycolor(\"greenyellow\").toHex(), \"adff2f\");\n  assertEquals(tinycolor(\"honeydew\").toHex(), \"f0fff0\");\n  assertEquals(tinycolor(\"hotpink\").toHex(), \"ff69b4\");\n  assertEquals(tinycolor(\"indianred \").toHex(), \"cd5c5c\");\n  assertEquals(tinycolor(\"indigo \").toHex(), \"4b0082\");\n  assertEquals(tinycolor(\"ivory\").toHex(), \"fffff0\");\n  assertEquals(tinycolor(\"khaki\").toHex(), \"f0e68c\");\n  assertEquals(tinycolor(\"lavender\").toHex(), \"e6e6fa\");\n  assertEquals(tinycolor(\"lavenderblush\").toHex(), \"fff0f5\");\n  assertEquals(tinycolor(\"lawngreen\").toHex(), \"7cfc00\");\n  assertEquals(tinycolor(\"lemonchiffon\").toHex(), \"fffacd\");\n  assertEquals(tinycolor(\"lightblue\").toHex(), \"add8e6\");\n  assertEquals(tinycolor(\"lightcoral\").toHex(), \"f08080\");\n  assertEquals(tinycolor(\"lightcyan\").toHex(), \"e0ffff\");\n  assertEquals(tinycolor(\"lightgoldenrodyellow\").toHex(), \"fafad2\");\n  assertEquals(tinycolor(\"lightgrey\").toHex(), \"d3d3d3\");\n  assertEquals(tinycolor(\"lightgreen\").toHex(), \"90ee90\");\n  assertEquals(tinycolor(\"lightpink\").toHex(), \"ffb6c1\");\n  assertEquals(tinycolor(\"lightsalmon\").toHex(), \"ffa07a\");\n  assertEquals(tinycolor(\"lightseagreen\").toHex(), \"20b2aa\");\n  assertEquals(tinycolor(\"lightskyblue\").toHex(), \"87cefa\");\n  assertEquals(tinycolor(\"lightslategray\").toHex(), \"778899\");\n  assertEquals(tinycolor(\"lightsteelblue\").toHex(), \"b0c4de\");\n  assertEquals(tinycolor(\"lightyellow\").toHex(), \"ffffe0\");\n  assertEquals(tinycolor(\"lime\").toHex(), \"00ff00\");\n  assertEquals(tinycolor(\"limegreen\").toHex(), \"32cd32\");\n  assertEquals(tinycolor(\"linen\").toHex(), \"faf0e6\");\n  assertEquals(tinycolor(\"magenta\").toHex(), \"ff00ff\");\n  assertEquals(tinycolor(\"maroon\").toHex(), \"800000\");\n  assertEquals(tinycolor(\"mediumaquamarine\").toHex(), \"66cdaa\");\n  assertEquals(tinycolor(\"mediumblue\").toHex(), \"0000cd\");\n  assertEquals(tinycolor(\"mediumorchid\").toHex(), \"ba55d3\");\n  assertEquals(tinycolor(\"mediumpurple\").toHex(), \"9370db\");\n  assertEquals(tinycolor(\"mediumseagreen\").toHex(), \"3cb371\");\n  assertEquals(tinycolor(\"mediumslateblue\").toHex(), \"7b68ee\");\n  assertEquals(tinycolor(\"mediumspringgreen\").toHex(), \"00fa9a\");\n  assertEquals(tinycolor(\"mediumturquoise\").toHex(), \"48d1cc\");\n  assertEquals(tinycolor(\"mediumvioletred\").toHex(), \"c71585\");\n  assertEquals(tinycolor(\"midnightblue\").toHex(), \"191970\");\n  assertEquals(tinycolor(\"mintcream\").toHex(), \"f5fffa\");\n  assertEquals(tinycolor(\"mistyrose\").toHex(), \"ffe4e1\");\n  assertEquals(tinycolor(\"moccasin\").toHex(), \"ffe4b5\");\n  assertEquals(tinycolor(\"navajowhite\").toHex(), \"ffdead\");\n  assertEquals(tinycolor(\"navy\").toHex(), \"000080\");\n  assertEquals(tinycolor(\"oldlace\").toHex(), \"fdf5e6\");\n  assertEquals(tinycolor(\"olive\").toHex(), \"808000\");\n  assertEquals(tinycolor(\"olivedrab\").toHex(), \"6b8e23\");\n  assertEquals(tinycolor(\"orange\").toHex(), \"ffa500\");\n  assertEquals(tinycolor(\"orangered\").toHex(), \"ff4500\");\n  assertEquals(tinycolor(\"orchid\").toHex(), \"da70d6\");\n  assertEquals(tinycolor(\"palegoldenrod\").toHex(), \"eee8aa\");\n  assertEquals(tinycolor(\"palegreen\").toHex(), \"98fb98\");\n  assertEquals(tinycolor(\"paleturquoise\").toHex(), \"afeeee\");\n  assertEquals(tinycolor(\"palevioletred\").toHex(), \"db7093\");\n  assertEquals(tinycolor(\"papayawhip\").toHex(), \"ffefd5\");\n  assertEquals(tinycolor(\"peachpuff\").toHex(), \"ffdab9\");\n  assertEquals(tinycolor(\"peru\").toHex(), \"cd853f\");\n  assertEquals(tinycolor(\"pink\").toHex(), \"ffc0cb\");\n  assertEquals(tinycolor(\"plum\").toHex(), \"dda0dd\");\n  assertEquals(tinycolor(\"powderblue\").toHex(), \"b0e0e6\");\n  assertEquals(tinycolor(\"purple\").toHex(), \"800080\");\n  assertEquals(tinycolor(\"rebeccapurple\").toHex(), \"663399\");\n  assertEquals(tinycolor(\"red\").toHex(), \"ff0000\");\n  assertEquals(tinycolor(\"rosybrown\").toHex(), \"bc8f8f\");\n  assertEquals(tinycolor(\"royalblue\").toHex(), \"4169e1\");\n  assertEquals(tinycolor(\"saddlebrown\").toHex(), \"8b4513\");\n  assertEquals(tinycolor(\"salmon\").toHex(), \"fa8072\");\n  assertEquals(tinycolor(\"sandybrown\").toHex(), \"f4a460\");\n  assertEquals(tinycolor(\"seagreen\").toHex(), \"2e8b57\");\n  assertEquals(tinycolor(\"seashell\").toHex(), \"fff5ee\");\n  assertEquals(tinycolor(\"sienna\").toHex(), \"a0522d\");\n  assertEquals(tinycolor(\"silver\").toHex(), \"c0c0c0\");\n  assertEquals(tinycolor(\"skyblue\").toHex(), \"87ceeb\");\n  assertEquals(tinycolor(\"slateblue\").toHex(), \"6a5acd\");\n  assertEquals(tinycolor(\"slategray\").toHex(), \"708090\");\n  assertEquals(tinycolor(\"snow\").toHex(), \"fffafa\");\n  assertEquals(tinycolor(\"springgreen\").toHex(), \"00ff7f\");\n  assertEquals(tinycolor(\"steelblue\").toHex(), \"4682b4\");\n  assertEquals(tinycolor(\"tan\").toHex(), \"d2b48c\");\n  assertEquals(tinycolor(\"teal\").toHex(), \"008080\");\n  assertEquals(tinycolor(\"thistle\").toHex(), \"d8bfd8\");\n  assertEquals(tinycolor(\"tomato\").toHex(), \"ff6347\");\n  assertEquals(tinycolor(\"turquoise\").toHex(), \"40e0d0\");\n  assertEquals(tinycolor(\"violet\").toHex(), \"ee82ee\");\n  assertEquals(tinycolor(\"wheat\").toHex(), \"f5deb3\");\n  assertEquals(tinycolor(\"white\").toHex(), \"ffffff\");\n  assertEquals(tinycolor(\"whitesmoke\").toHex(), \"f5f5f5\");\n  assertEquals(tinycolor(\"yellow\").toHex(), \"ffff00\");\n  assertEquals(tinycolor(\"yellowgreen\").toHex(), \"9acd32\");\n\n  assertEquals(tinycolor(\"#f00\").toName(), \"red\");\n  assertEquals(tinycolor(\"#fa0a0a\").toName(), false);\n});\n\nDeno.test(\"Invalid alpha should normalize to 1\", function () {\n  assertEquals(\n    tinycolor({ r: 255, g: 20, b: 10, a: -1 }).toRgbString(),\n    \"rgb(255, 20, 10)\",\n    \"Negative value\"\n  );\n  assertEquals(\n    tinycolor({ r: 255, g: 20, b: 10, a: -0 }).toRgbString(),\n    \"rgba(255, 20, 10, 0)\",\n    \"Negative 0\"\n  );\n  assertEquals(\n    tinycolor({ r: 255, g: 20, b: 10, a: 0 }).toRgbString(),\n    \"rgba(255, 20, 10, 0)\",\n    \"0\"\n  );\n  assertEquals(\n    tinycolor({ r: 255, g: 20, b: 10, a: 0.5 }).toRgbString(),\n    \"rgba(255, 20, 10, 0.5)\",\n    \".5\"\n  );\n  assertEquals(\n    tinycolor({ r: 255, g: 20, b: 10, a: 1 }).toRgbString(),\n    \"rgb(255, 20, 10)\",\n    \"1\"\n  );\n  assertEquals(\n    tinycolor({ r: 255, g: 20, b: 10, a: 100 }).toRgbString(),\n    \"rgb(255, 20, 10)\",\n    \"Greater than 1\"\n  );\n  assertEquals(\n    tinycolor({ r: 255, g: 20, b: 10, a: \"asdfasd\" }).toRgbString(),\n    \"rgb(255, 20, 10)\",\n    \"Non Numeric\"\n  );\n\n  assertEquals(\n    tinycolor(\"#fff\").toRgbString(),\n    \"rgb(255, 255, 255)\",\n    \"Hex should be 1\"\n  );\n  assertEquals(\n    tinycolor(\"rgba 255 0 0 100\").toRgbString(),\n    \"rgb(255, 0, 0)\",\n    \"Greater than 1 in string parsing\"\n  );\n});\n\nDeno.test(\"toString() with alpha set\", function () {\n  var redNamed = tinycolor.fromRatio(\n    { r: 255, g: 0, b: 0, a: 0.6 },\n    {\n      format: \"name\",\n    }\n  );\n  var transparentNamed = tinycolor.fromRatio(\n    { r: 255, g: 0, b: 0, a: 0 },\n    {\n      format: \"name\",\n    }\n  );\n  var redHex = tinycolor.fromRatio(\n    { r: 255, g: 0, b: 0, a: 0.4 },\n    {\n      format: \"hex\",\n    }\n  );\n\n  assertEquals(redNamed.getFormat(), \"name\", \"getFormat() is correct\");\n  assertEquals(redHex.getFormat(), \"hex\", \"getFormat() is correct\");\n\n  assertEquals(\n    redNamed.toString(),\n    \"rgba(255, 0, 0, 0.6)\",\n    \"Names should default to rgba if alpha is < 1\"\n  );\n  assertEquals(\n    redHex.toString(),\n    \"rgba(255, 0, 0, 0.4)\",\n    \"Hex should default to rgba if alpha is < 1\"\n  );\n\n  assertEquals(\n    redNamed.toString(\"hex\"),\n    \"#ff0000\",\n    \"Names should not be returned as rgba if format is specified\"\n  );\n  assertEquals(\n    redNamed.toString(\"hex6\"),\n    \"#ff0000\",\n    \"Names should not be returned as rgba if format is specified\"\n  );\n  assertEquals(\n    redNamed.toString(\"hex3\"),\n    \"#f00\",\n    \"Names should not be returned as rgba if format is specified\"\n  );\n  assertEquals(\n    redNamed.toString(\"hex8\"),\n    \"#ff000099\",\n    \"Names should not be returned as rgba if format is specified\"\n  );\n  assertEquals(\n    redNamed.toString(\"hex4\"),\n    \"#f009\",\n    \"Names should not be returned as rgba if format is specified\"\n  );\n  assertEquals(\n    redNamed.toString(\"name\"),\n    \"#ff0000\",\n    \"Semi transparent names should return hex in toString() if name format is specified\"\n  );\n\n  assertEquals(\n    redNamed.toName(),\n    false,\n    \"Semi transparent names should be false in toName()\"\n  );\n\n  assertEquals(\n    redHex.toString(),\n    \"rgba(255, 0, 0, 0.4)\",\n    \"Hex should default to rgba if alpha is < 1\"\n  );\n  assertEquals(\n    transparentNamed.toString(),\n    \"transparent\",\n    \"Named color should equal transparent if alpha == 0\"\n  );\n\n  redHex.setAlpha(0);\n  assertEquals(\n    redHex.toString(),\n    \"rgba(255, 0, 0, 0)\",\n    \"Hex should default to rgba if alpha is = 0\"\n  );\n});\n\nDeno.test(\"setting alpha\", function () {\n  var hexSetter = tinycolor(\"rgba(255, 0, 0, 1)\");\n  assertEquals(hexSetter.getAlpha(), 1, \"Alpha should start as 1\");\n  var returnedFromSetAlpha = hexSetter.setAlpha(0.9);\n  assertEquals(\n    returnedFromSetAlpha,\n    hexSetter,\n    \"setAlpha return value should be the color.\"\n  );\n  assertEquals(hexSetter.getAlpha(), 0.9, \"setAlpha should change alpha value\");\n  hexSetter.setAlpha(0.5);\n  assertEquals(hexSetter.getAlpha(), 0.5, \"setAlpha should change alpha value\");\n  hexSetter.setAlpha(0);\n  assertEquals(hexSetter.getAlpha(), 0, \"setAlpha should change alpha value\");\n  hexSetter.setAlpha(-1);\n  assertEquals(\n    hexSetter.getAlpha(),\n    1,\n    \"setAlpha with value < 0 should be bound to 1\"\n  );\n  hexSetter.setAlpha(2);\n  assertEquals(\n    hexSetter.getAlpha(),\n    1,\n    \"setAlpha with value > 1 should be bound to 1\"\n  );\n  hexSetter.setAlpha();\n  assertEquals(\n    hexSetter.getAlpha(),\n    1,\n    \"setAlpha with invalid value should be bound to 1\"\n  );\n  hexSetter.setAlpha(null);\n  assertEquals(\n    hexSetter.getAlpha(),\n    1,\n    \"setAlpha with invalid value should be bound to 1\"\n  );\n  hexSetter.setAlpha(\"test\");\n  assertEquals(\n    hexSetter.getAlpha(),\n    1,\n    \"setAlpha with invalid value should be bound to 1\"\n  );\n});\n\nDeno.test(\"Alpha = 0 should act differently on toName()\", function () {\n  assertEquals(\n    tinycolor({ r: 255, g: 20, b: 10, a: 0 }).toName(),\n    \"transparent\",\n    \"0\"\n  );\n  assertEquals(\n    tinycolor(\"transparent\").toString(),\n    \"transparent\",\n    \"toString when passed\"\n  );\n  assertEquals(tinycolor(\"transparent\").toHex(), \"000000\", \"toHex\");\n});\n\nDeno.test(\"getBrightness\", function () {\n  assertEquals(tinycolor(\"#000\").getBrightness(), 0, \"returns 0 for #000\");\n  assertEquals(tinycolor(\"#fff\").getBrightness(), 255, \"returns 255 for #fff\");\n});\n\nDeno.test(\"getLuminance\", function () {\n  assertEquals(tinycolor(\"#000\").getLuminance(), 0, \"returns 0 for #000\");\n  assertEquals(tinycolor(\"#fff\").getLuminance(), 1, \"returns 1 for #fff\");\n});\n\nDeno.test(\"isDark returns true/false for dark/light colors\", function () {\n  assertEquals(tinycolor(\"#000\").isDark(), true, \"#000 is dark\");\n  assertEquals(tinycolor(\"#111\").isDark(), true, \"#111 is dark\");\n  assertEquals(tinycolor(\"#222\").isDark(), true, \"#222 is dark\");\n  assertEquals(tinycolor(\"#333\").isDark(), true, \"#333 is dark\");\n  assertEquals(tinycolor(\"#444\").isDark(), true, \"#444 is dark\");\n  assertEquals(tinycolor(\"#555\").isDark(), true, \"#555 is dark\");\n  assertEquals(tinycolor(\"#666\").isDark(), true, \"#666 is dark\");\n  assertEquals(tinycolor(\"#777\").isDark(), true, \"#777 is dark\");\n  assertEquals(tinycolor(\"#888\").isDark(), false, \"#888 is not dark\");\n  assertEquals(tinycolor(\"#999\").isDark(), false, \"#999 is not dark\");\n  assertEquals(tinycolor(\"#aaa\").isDark(), false, \"#aaa is not dark\");\n  assertEquals(tinycolor(\"#bbb\").isDark(), false, \"#bbb is not dark\");\n  assertEquals(tinycolor(\"#ccc\").isDark(), false, \"#ccc is not dark\");\n  assertEquals(tinycolor(\"#ddd\").isDark(), false, \"#ddd is not dark\");\n  assertEquals(tinycolor(\"#eee\").isDark(), false, \"#eee is not dark\");\n  assertEquals(tinycolor(\"#fff\").isDark(), false, \"#fff is not dark\");\n});\n\nDeno.test(\"isLight returns true/false for light/dark colors\", function () {\n  assertEquals(tinycolor(\"#000\").isLight(), false, \"#000 is not light\");\n  assertEquals(tinycolor(\"#111\").isLight(), false, \"#111 is not light\");\n  assertEquals(tinycolor(\"#222\").isLight(), false, \"#222 is not light\");\n  assertEquals(tinycolor(\"#333\").isLight(), false, \"#333 is not light\");\n  assertEquals(tinycolor(\"#444\").isLight(), false, \"#444 is not light\");\n  assertEquals(tinycolor(\"#555\").isLight(), false, \"#555 is not light\");\n  assertEquals(tinycolor(\"#666\").isLight(), false, \"#666 is not light\");\n  assertEquals(tinycolor(\"#777\").isLight(), false, \"#777 is not light\");\n  assertEquals(tinycolor(\"#888\").isLight(), true, \"#888 is light\");\n  assertEquals(tinycolor(\"#999\").isLight(), true, \"#999 is light\");\n  assertEquals(tinycolor(\"#aaa\").isLight(), true, \"#aaa is light\");\n  assertEquals(tinycolor(\"#bbb\").isLight(), true, \"#bbb is light\");\n  assertEquals(tinycolor(\"#ccc\").isLight(), true, \"#ccc is light\");\n  assertEquals(tinycolor(\"#ddd\").isLight(), true, \"#ddd is light\");\n  assertEquals(tinycolor(\"#eee\").isLight(), true, \"#eee is light\");\n  assertEquals(tinycolor(\"#fff\").isLight(), true, \"#fff is light\");\n});\n\nDeno.test(\"HSL Object\", function () {\n  for (var i = 0; i < conversions.length; i++) {\n    var c = conversions[i];\n    var tiny = tinycolor(c.hex);\n    assertEquals(\n      tiny.toHexString(),\n      tinycolor(tiny.toHsl()).toHexString(),\n      \"HSL Object\"\n    );\n  }\n});\n\nDeno.test(\"HSL String\", function () {\n  for (var i = 0; i < conversions.length; i++) {\n    var c = conversions[i];\n    var tiny = tinycolor(c.hex);\n    var input = tiny.toRgb();\n    var output = tinycolor(tiny.toHslString()).toRgb();\n    var maxDiff = 2;\n\n    assertEquals(\n      Math.abs(input.r - output.r) <= maxDiff,\n      true,\n      \"toHslString red value difference <= \" + maxDiff\n    );\n    assertEquals(\n      Math.abs(input.g - output.g) <= maxDiff,\n      true,\n      \"toHslString green value difference <= \" + maxDiff\n    );\n    assertEquals(\n      Math.abs(input.b - output.b) <= maxDiff,\n      true,\n      \"toHslString blue value difference <= \" + maxDiff\n    );\n  }\n});\n\nDeno.test(\"HSV String\", function () {\n  for (var i = 0; i < conversions.length; i++) {\n    var c = conversions[i];\n    var tiny = tinycolor(c.hex);\n    var input = tiny.toRgb();\n    var output = tinycolor(tiny.toHsvString()).toRgb();\n    var maxDiff = 2;\n\n    assertEquals(\n      Math.abs(input.r - output.r) <= maxDiff,\n      true,\n      \"toHsvString red value difference <= \" + maxDiff\n    );\n    assertEquals(\n      Math.abs(input.g - output.g) <= maxDiff,\n      true,\n      \"toHsvString green value difference <= \" + maxDiff\n    );\n    assertEquals(\n      Math.abs(input.b - output.b) <= maxDiff,\n      true,\n      \"toHsvString blue value difference <= \" + maxDiff\n    );\n  }\n});\n\nDeno.test(\"HSV Object\", function () {\n  for (var i = 0; i < conversions.length; i++) {\n    var c = conversions[i];\n    var tiny = tinycolor(c.hex);\n    assertEquals(\n      tiny.toHexString(),\n      tinycolor(tiny.toHsv()).toHexString(),\n      \"HSV Object\"\n    );\n  }\n});\n\nDeno.test(\"RGB Object\", function () {\n  for (var i = 0; i < conversions.length; i++) {\n    var c = conversions[i];\n    var tiny = tinycolor(c.hex);\n    assertEquals(\n      tiny.toHexString(),\n      tinycolor(tiny.toRgb()).toHexString(),\n      \"RGB Object\"\n    );\n  }\n});\n\nDeno.test(\"RGB String\", function () {\n  for (var i = 0; i < conversions.length; i++) {\n    var c = conversions[i];\n    var tiny = tinycolor(c.hex);\n    assertEquals(\n      tiny.toHexString(),\n      tinycolor(tiny.toRgbString()).toHexString(),\n      \"RGB String\"\n    );\n  }\n});\n\nDeno.test(\"PRGB Object\", function () {\n  for (var i = 0; i < conversions.length; i++) {\n    var c = conversions[i];\n    var tiny = tinycolor(c.hex);\n    var input = tiny.toRgb();\n    var output = tinycolor(tiny.toPercentageRgb()).toRgb();\n    var maxDiff = 2;\n\n    assertEquals(\n      Math.abs(input.r - output.r) <= maxDiff,\n      true,\n      \"Red value difference <= \" + maxDiff\n    );\n    assertEquals(\n      Math.abs(input.g - output.g) <= maxDiff,\n      true,\n      \"Green value difference <= \" + maxDiff\n    );\n    assertEquals(\n      Math.abs(input.b - output.b) <= maxDiff,\n      true,\n      \"Blue value difference <= \" + maxDiff\n    );\n  }\n});\n\nDeno.test(\"PRGB String\", function () {\n  for (var i = 0; i < conversions.length; i++) {\n    var c = conversions[i];\n    var tiny = tinycolor(c.hex);\n    var input = tiny.toRgb();\n    var output = tinycolor(tiny.toPercentageRgbString()).toRgb();\n    var maxDiff = 2;\n\n    assertEquals(\n      Math.abs(input.r - output.r) <= maxDiff,\n      true,\n      \"Red value difference <= \" + maxDiff\n    );\n    assertEquals(\n      Math.abs(input.g - output.g) <= maxDiff,\n      true,\n      \"Green value difference <= \" + maxDiff\n    );\n    assertEquals(\n      Math.abs(input.b - output.b) <= maxDiff,\n      true,\n      \"Blue value difference <= \" + maxDiff\n    );\n  }\n});\n\nDeno.test(\"Object\", function () {\n  for (var i = 0; i < conversions.length; i++) {\n    var c = conversions[i];\n    var tiny = tinycolor(c.hex);\n    assertEquals(tiny.toHexString(), tinycolor(tiny).toHexString(), \"Object\");\n  }\n});\n\nDeno.test(\"Color equality\", function () {\n  assert(tinycolor.equals(\"#ff0000\", \"#ff0000\"), \"Same hex\");\n  assert(tinycolor.equals(\"#ff0000\", \"rgb(255, 0, 0)\"), \"Same alphas\");\n  assert(\n    !tinycolor.equals(\"#ff0000\", \"rgba(255, 0, 0, .1)\"),\n    \"Different alphas\"\n  );\n  assert(tinycolor.equals(\"#ff000066\", \"rgba(255, 0, 0, .4)\"), \"Same alphas\");\n  assert(tinycolor.equals(\"#f009\", \"rgba(255, 0, 0, .6)\"), \"Same alphas\");\n  assert(tinycolor.equals(\"#336699CC\", \"369C\"), \"Same hex\");\n  assert(tinycolor.equals(\"ff0000\", \"#ff0000\"), \"Same hex\");\n  assert(tinycolor.equals(\"#f00\", \"#ff0000\"), \"Same hex\");\n  assert(tinycolor.equals(\"#f00\", \"#ff0000\"), \"Same hex\");\n  assert(tinycolor.equals(\"f00\", \"#ff0000\"), \"Same hex\");\n  assertEquals(tinycolor(\"010101\").toHexString(), \"#010101\");\n  assert(!tinycolor.equals(\"#ff0000\", \"#00ff00\"), \"Different hex\");\n  assert(\n    tinycolor.equals(\"#ff8000\", \"rgb(100%, 50%, 0%)\"),\n    \"Percentage bounds checking\"\n  );\n});\n\nDeno.test(\"isReadable\", function () {\n  // \"#ff0088\", \"#8822aa\" (values used in old WCAG1 tests)\n  assert(\n    tinycolor.isReadable(\"#000000\", \"#ffffff\", { level: \"AA\", size: \"small\" }),\n    \"white/black is readable\"\n  );\n  assert(\n    !tinycolor.isReadable(\"#ff0088\", \"#5c1a72\", {}),\n    \"not readable - empty wcag2 object\"\n  );\n  assert(\n    !tinycolor.isReadable(\"#ff0088\", \"#8822aa\", { level: \"AA\", size: \"small\" }),\n    \"not readable - AA small\"\n  );\n  assert(\n    !tinycolor.isReadable(\"#ff0088\", \"#8822aa\", { level: \"AA\", size: \"large\" }),\n    \"not  readable - AA large\"\n  );\n  assert(\n    !tinycolor.isReadable(\"#ff0088\", \"#8822aa\", {\n      level: \"AAA\",\n      size: \"small\",\n    }),\n    \"not readable - AAA small\"\n  );\n  assert(\n    !tinycolor.isReadable(\"#ff0088\", \"#8822aa\", {\n      level: \"AAA\",\n      size: \"large\",\n    }),\n    \"not readable - AAA large\"\n  );\n\n  // values derived from and validated using the calculators at http://www.dasplankton.de/ContrastA/\n  // and http://webaim.org/resources/contrastchecker/\n\n  // \"#ff0088\", \"#5c1a72\": contrast ratio 3.04\n  assert(\n    !tinycolor.isReadable(\"#ff0088\", \"#5c1a72\", { level: \"AA\", size: \"small\" }),\n    \"not readable - AA small\"\n  );\n  assert(\n    tinycolor.isReadable(\"#ff0088\", \"#5c1a72\", { level: \"AA\", size: \"large\" }),\n    \"readable - AA large\"\n  );\n  assert(\n    !tinycolor.isReadable(\"#ff0088\", \"#5c1a72\", {\n      level: \"AAA\",\n      size: \"small\",\n    }),\n    \"not readable - AAA small\"\n  );\n  assert(\n    !tinycolor.isReadable(\"#ff0088\", \"#5c1a72\", {\n      level: \"AAA\",\n      size: \"large\",\n    }),\n    \"not readable - AAA large\"\n  );\n\n  // \"#ff0088\", \"#2e0c3a\": contrast ratio 4.56\n  assert(\n    tinycolor.isReadable(\"#ff0088\", \"#2e0c3a\", { level: \"AA\", size: \"small\" }),\n    \"readable - AA small\"\n  );\n  assert(\n    tinycolor.isReadable(\"#ff0088\", \"#2e0c3a\", { level: \"AA\", size: \"large\" }),\n    \"readable - AA large\"\n  );\n  assert(\n    !tinycolor.isReadable(\"#ff0088\", \"#2e0c3a\", {\n      level: \"AAA\",\n      size: \"small\",\n    }),\n    \"not readable - AAA small\"\n  );\n  assert(\n    tinycolor.isReadable(\"#ff0088\", \"#2e0c3a\", { level: \"AAA\", size: \"large\" }),\n    \"readable - AAA large\"\n  );\n\n  // \"#db91b8\", \"#2e0c3a\":  contrast ratio 7.12\n  assert(\n    tinycolor.isReadable(\"#db91b8\", \"#2e0c3a\", { level: \"AA\", size: \"small\" }),\n    \"readable - AA small\"\n  );\n  assert(\n    tinycolor.isReadable(\"#db91b8\", \"#2e0c3a\", { level: \"AA\", size: \"large\" }),\n    \"readable - AA large\"\n  );\n  assert(\n    tinycolor.isReadable(\"#db91b8\", \"#2e0c3a\", { level: \"AAA\", size: \"small\" }),\n    \"readable - AAA small\"\n  );\n  assert(\n    tinycolor.isReadable(\"#db91b8\", \"#2e0c3a\", { level: \"AAA\", size: \"large\" }),\n    \"readable - AAA large\"\n  );\n});\n\nDeno.test(\"readability\", function () {\n  // check return values from readability function. See isReadable above for standards tests.\n  assertEquals(\n    tinycolor.readability(\"#000\", \"#000\"),\n    1,\n    \"Readability function test 0\"\n  );\n  assertEquals(\n    tinycolor.readability(\"#000\", \"#111\"),\n    1.1121078324840545,\n    \"Readability function test 1\"\n  );\n  assertEquals(\n    tinycolor.readability(\"#000\", \"#fff\"),\n    21,\n    \"Readability function test 2\"\n  );\n});\n\nDeno.test(\"mostReadable\", function () {\n  assertEquals(\n    tinycolor\n      .mostReadable(\"#000\", [\"#111\", \"#222\", { wcag2: {} }])\n      .toHexString(),\n    \"#222222\",\n    \"readable color present\"\n  );\n  assertEquals(\n    tinycolor\n      .mostReadable(\"#f00\", [\"#d00\", \"#0d0\"], { wcag2: {} })\n      .toHexString(),\n    \"#00dd00\",\n    \"readable color present\"\n  );\n  assertEquals(\n    tinycolor\n      .mostReadable(\"#fff\", [\"#fff\", \"#fff\"], { wcag2: {} })\n      .toHexString(),\n    \"#ffffff\",\n    \"no different color in list\"\n  );\n  //includeFallbackColors\n  assertEquals(\n    tinycolor\n      .mostReadable(\"#fff\", [\"#fff\", \"#fff\"], {\n        includeFallbackColors: true,\n      })\n      .toHexString(),\n    \"#000000\",\n    \"no different color in list\"\n  );\n  assertEquals(\n    tinycolor\n      .mostReadable(\"#123\", [\"#124\", \"#125\"], {\n        includeFallbackColors: false,\n      })\n      .toHexString(),\n    \"#112255\",\n    \"no readable color in list\"\n  );\n  assertEquals(\n    tinycolor\n      .mostReadable(\"#123\", [\"#000\", \"#fff\"], {\n        includeFallbackColors: false,\n      })\n      .toHexString(),\n    \"#ffffff\",\n    \"verify assumption\"\n  );\n  assertEquals(\n    tinycolor\n      .mostReadable(\"#123\", [\"#124\", \"#125\"], {\n        includeFallbackColors: true,\n      })\n      .toHexString(),\n    \"#ffffff\",\n    \"no readable color in list\"\n  );\n\n  assertEquals(\n    tinycolor\n      .mostReadable(\"#ff0088\", [\"#000\", \"#fff\"], {\n        includeFallbackColors: false,\n      })\n      .toHexString(),\n    \"#000000\",\n    \"verify assumption\"\n  );\n  assertEquals(\n    tinycolor\n      .mostReadable(\"#ff0088\", [\"#2e0c3a\"], {\n        includeFallbackColors: true,\n        level: \"AAA\",\n        size: \"large\",\n      })\n      .toHexString(),\n    \"#2e0c3a\",\n    \"readable color present\"\n  );\n  assertEquals(\n    tinycolor\n      .mostReadable(\"#ff0088\", [\"#2e0c3a\"], {\n        includeFallbackColors: true,\n        level: \"AAA\",\n        size: \"small\",\n      })\n      .toHexString(),\n    \"#000000\",\n    \"no readable color in list\"\n  );\n\n  assertEquals(\n    tinycolor\n      .mostReadable(\"#371b2c\", [\"#000\", \"#fff\"], {\n        includeFallbackColors: false,\n      })\n      .toHexString(),\n    \"#ffffff\",\n    \"verify assumption\"\n  );\n  assertEquals(\n    tinycolor\n      .mostReadable(\"#371b2c\", [\"#a9acb6\"], {\n        includeFallbackColors: true,\n        level: \"AAA\",\n        size: \"large\",\n      })\n      .toHexString(),\n    \"#a9acb6\",\n    \"readable color present\"\n  );\n  assertEquals(\n    tinycolor\n      .mostReadable(\"#371b2c\", [\"#a9acb6\"], {\n        includeFallbackColors: true,\n        level: \"AAA\",\n        size: \"small\",\n      })\n      .toHexString(),\n    \"#ffffff\",\n    \"no readable color in list\"\n  );\n});\n\nDeno.test(\"Filters\", function () {\n  assertEquals(\n    tinycolor(\"red\").toFilter(),\n    \"progid:DXImageTransform.Microsoft.gradient(startColorstr=#ffff0000,endColorstr=#ffff0000)\"\n  );\n  assertEquals(\n    tinycolor(\"red\").toFilter(\"blue\"),\n    \"progid:DXImageTransform.Microsoft.gradient(startColorstr=#ffff0000,endColorstr=#ff0000ff)\"\n  );\n\n  assertEquals(\n    tinycolor(\"transparent\").toFilter(),\n    \"progid:DXImageTransform.Microsoft.gradient(startColorstr=#00000000,endColorstr=#00000000)\"\n  );\n  assertEquals(\n    tinycolor(\"transparent\").toFilter(\"red\"),\n    \"progid:DXImageTransform.Microsoft.gradient(startColorstr=#00000000,endColorstr=#ffff0000)\"\n  );\n\n  assertEquals(\n    tinycolor(\"#f0f0f0dd\").toFilter(),\n    \"progid:DXImageTransform.Microsoft.gradient(startColorstr=#ddf0f0f0,endColorstr=#ddf0f0f0)\"\n  );\n  assertEquals(\n    tinycolor(\"rgba(0, 0, 255, .5\").toFilter(),\n    \"progid:DXImageTransform.Microsoft.gradient(startColorstr=#800000ff,endColorstr=#800000ff)\"\n  );\n});\n\n/* Originally generated with:\nvar results = [];\nfor (var i = 0; i <= 100; i++) results.push( tinycolor.saturate(\"red\", i).toHex() )\nconsole.log(JSON.stringify(results))\n*/\nvar DESATURATIONS = [\n  \"ff0000\",\n  \"fe0101\",\n  \"fc0303\",\n  \"fb0404\",\n  \"fa0505\",\n  \"f90606\",\n  \"f70808\",\n  \"f60909\",\n  \"f50a0a\",\n  \"f40b0b\",\n  \"f20d0d\",\n  \"f10e0e\",\n  \"f00f0f\",\n  \"ee1111\",\n  \"ed1212\",\n  \"ec1313\",\n  \"eb1414\",\n  \"e91616\",\n  \"e81717\",\n  \"e71818\",\n  \"e61919\",\n  \"e41b1b\",\n  \"e31c1c\",\n  \"e21d1d\",\n  \"e01f1f\",\n  \"df2020\",\n  \"de2121\",\n  \"dd2222\",\n  \"db2424\",\n  \"da2525\",\n  \"d92626\",\n  \"d72828\",\n  \"d62929\",\n  \"d52a2a\",\n  \"d42b2b\",\n  \"d22d2d\",\n  \"d12e2e\",\n  \"d02f2f\",\n  \"cf3030\",\n  \"cd3232\",\n  \"cc3333\",\n  \"cb3434\",\n  \"c93636\",\n  \"c83737\",\n  \"c73838\",\n  \"c63939\",\n  \"c43b3b\",\n  \"c33c3c\",\n  \"c23d3d\",\n  \"c13e3e\",\n  \"bf4040\",\n  \"be4141\",\n  \"bd4242\",\n  \"bb4444\",\n  \"ba4545\",\n  \"b94646\",\n  \"b84747\",\n  \"b64949\",\n  \"b54a4a\",\n  \"b44b4b\",\n  \"b34d4d\",\n  \"b14e4e\",\n  \"b04f4f\",\n  \"af5050\",\n  \"ad5252\",\n  \"ac5353\",\n  \"ab5454\",\n  \"aa5555\",\n  \"a85757\",\n  \"a75858\",\n  \"a65959\",\n  \"a45b5b\",\n  \"a35c5c\",\n  \"a25d5d\",\n  \"a15e5e\",\n  \"9f6060\",\n  \"9e6161\",\n  \"9d6262\",\n  \"9c6363\",\n  \"9a6565\",\n  \"996666\",\n  \"986767\",\n  \"966969\",\n  \"956a6a\",\n  \"946b6b\",\n  \"936c6c\",\n  \"916e6e\",\n  \"906f6f\",\n  \"8f7070\",\n  \"8e7171\",\n  \"8c7373\",\n  \"8b7474\",\n  \"8a7575\",\n  \"887777\",\n  \"877878\",\n  \"867979\",\n  \"857a7a\",\n  \"837c7c\",\n  \"827d7d\",\n  \"817e7e\",\n  \"808080\",\n];\nvar SATURATIONS = [\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n  \"ff0000\",\n];\nvar LIGHTENS = [\n  \"ff0000\",\n  \"ff0505\",\n  \"ff0a0a\",\n  \"ff0f0f\",\n  \"ff1414\",\n  \"ff1a1a\",\n  \"ff1f1f\",\n  \"ff2424\",\n  \"ff2929\",\n  \"ff2e2e\",\n  \"ff3333\",\n  \"ff3838\",\n  \"ff3d3d\",\n  \"ff4242\",\n  \"ff4747\",\n  \"ff4d4d\",\n  \"ff5252\",\n  \"ff5757\",\n  \"ff5c5c\",\n  \"ff6161\",\n  \"ff6666\",\n  \"ff6b6b\",\n  \"ff7070\",\n  \"ff7575\",\n  \"ff7a7a\",\n  \"ff8080\",\n  \"ff8585\",\n  \"ff8a8a\",\n  \"ff8f8f\",\n  \"ff9494\",\n  \"ff9999\",\n  \"ff9e9e\",\n  \"ffa3a3\",\n  \"ffa8a8\",\n  \"ffadad\",\n  \"ffb3b3\",\n  \"ffb8b8\",\n  \"ffbdbd\",\n  \"ffc2c2\",\n  \"ffc7c7\",\n  \"ffcccc\",\n  \"ffd1d1\",\n  \"ffd6d6\",\n  \"ffdbdb\",\n  \"ffe0e0\",\n  \"ffe5e5\",\n  \"ffebeb\",\n  \"fff0f0\",\n  \"fff5f5\",\n  \"fffafa\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n  \"ffffff\",\n];\nvar BRIGHTENS = [\n  \"ff0000\",\n  \"ff0303\",\n  \"ff0505\",\n  \"ff0808\",\n  \"ff0a0a\",\n  \"ff0d0d\",\n  \"ff0f0f\",\n  \"ff1212\",\n  \"ff1414\",\n  \"ff1717\",\n  \"ff1919\",\n  \"ff1c1c\",\n  \"ff1f1f\",\n  \"ff2121\",\n  \"ff2424\",\n  \"ff2626\",\n  \"ff2929\",\n  \"ff2b2b\",\n  \"ff2e2e\",\n  \"ff3030\",\n  \"ff3333\",\n  \"ff3636\",\n  \"ff3838\",\n  \"ff3b3b\",\n  \"ff3d3d\",\n  \"ff4040\",\n  \"ff4242\",\n  \"ff4545\",\n  \"ff4747\",\n  \"ff4a4a\",\n  \"ff4c4c\",\n  \"ff4f4f\",\n  \"ff5252\",\n  \"ff5454\",\n  \"ff5757\",\n  \"ff5959\",\n  \"ff5c5c\",\n  \"ff5e5e\",\n  \"ff6161\",\n  \"ff6363\",\n  \"ff6666\",\n  \"ff6969\",\n  \"ff6b6b\",\n  \"ff6e6e\",\n  \"ff7070\",\n  \"ff7373\",\n  \"ff7575\",\n  \"ff7878\",\n  \"ff7a7a\",\n  \"ff7d7d\",\n  \"ff7f7f\",\n  \"ff8282\",\n  \"ff8585\",\n  \"ff8787\",\n  \"ff8a8a\",\n  \"ff8c8c\",\n  \"ff8f8f\",\n  \"ff9191\",\n  \"ff9494\",\n  \"ff9696\",\n  \"ff9999\",\n  \"ff9c9c\",\n  \"ff9e9e\",\n  \"ffa1a1\",\n  \"ffa3a3\",\n  \"ffa6a6\",\n  \"ffa8a8\",\n  \"ffabab\",\n  \"ffadad\",\n  \"ffb0b0\",\n  \"ffb2b2\",\n  \"ffb5b5\",\n  \"ffb8b8\",\n  \"ffbaba\",\n  \"ffbdbd\",\n  \"ffbfbf\",\n  \"ffc2c2\",\n  \"ffc4c4\",\n  \"ffc7c7\",\n  \"ffc9c9\",\n  \"ffcccc\",\n  \"ffcfcf\",\n  \"ffd1d1\",\n  \"ffd4d4\",\n  \"ffd6d6\",\n  \"ffd9d9\",\n  \"ffdbdb\",\n  \"ffdede\",\n  \"ffe0e0\",\n  \"ffe3e3\",\n  \"ffe5e5\",\n  \"ffe8e8\",\n  \"ffebeb\",\n  \"ffeded\",\n  \"fff0f0\",\n  \"fff2f2\",\n  \"fff5f5\",\n  \"fff7f7\",\n  \"fffafa\",\n  \"fffcfc\",\n  \"ffffff\",\n];\nvar DARKENS = [\n  \"ff0000\",\n  \"fa0000\",\n  \"f50000\",\n  \"f00000\",\n  \"eb0000\",\n  \"e60000\",\n  \"e00000\",\n  \"db0000\",\n  \"d60000\",\n  \"d10000\",\n  \"cc0000\",\n  \"c70000\",\n  \"c20000\",\n  \"bd0000\",\n  \"b80000\",\n  \"b30000\",\n  \"ad0000\",\n  \"a80000\",\n  \"a30000\",\n  \"9e0000\",\n  \"990000\",\n  \"940000\",\n  \"8f0000\",\n  \"8a0000\",\n  \"850000\",\n  \"800000\",\n  \"7a0000\",\n  \"750000\",\n  \"700000\",\n  \"6b0000\",\n  \"660000\",\n  \"610000\",\n  \"5c0000\",\n  \"570000\",\n  \"520000\",\n  \"4d0000\",\n  \"470000\",\n  \"420000\",\n  \"3d0000\",\n  \"380000\",\n  \"330000\",\n  \"2e0000\",\n  \"290000\",\n  \"240000\",\n  \"1f0000\",\n  \"190000\",\n  \"140000\",\n  \"0f0000\",\n  \"0a0000\",\n  \"050000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n  \"000000\",\n];\n\nDeno.test(\"Modifications\", function () {\n  for (var i = 0; i <= 100; i++) {\n    assertEquals(\n      tinycolor(\"red\").desaturate(i).toHex(),\n      DESATURATIONS[i],\n      \"Desaturation \" + i + \" works\"\n    );\n  }\n  for (var i = 0; i <= 100; i++) {\n    assertEquals(\n      tinycolor(\"red\").saturate(i).toHex(),\n      SATURATIONS[i],\n      \"Saturation \" + i + \" works\"\n    );\n  }\n  for (var i = 0; i <= 100; i++) {\n    assertEquals(\n      tinycolor(\"red\").lighten(i).toHex(),\n      LIGHTENS[i],\n      \"Lighten \" + i + \" works\"\n    );\n  }\n  for (var i = 0; i <= 100; i++) {\n    assertEquals(\n      tinycolor(\"red\").brighten(i).toHex(),\n      BRIGHTENS[i],\n      \"Brighter \" + i + \" works\"\n    );\n  }\n  for (var i = 0; i <= 100; i++) {\n    assertEquals(\n      tinycolor(\"red\").darken(i).toHex(),\n      DARKENS[i],\n      \"Darken \" + i + \" works\"\n    );\n  }\n\n  assertEquals(\n    tinycolor(\"red\").greyscale().toHex(),\n    \"808080\",\n    \"Greyscale works\"\n  );\n});\n\nDeno.test(\"Spin\", function () {\n  assertEquals(\n    Math.round(tinycolor(\"#f00\").spin(-1234).toHsl().h),\n    206,\n    \"Spinning -1234 works\"\n  );\n  assertEquals(\n    Math.round(tinycolor(\"#f00\").spin(-360).toHsl().h),\n    0,\n    \"Spinning -360 works\"\n  );\n  assertEquals(\n    Math.round(tinycolor(\"#f00\").spin(-120).toHsl().h),\n    240,\n    \"Spinning -120 works\"\n  );\n  assertEquals(\n    Math.round(tinycolor(\"#f00\").spin(0).toHsl().h),\n    0,\n    \"Spinning 0 works\"\n  );\n  assertEquals(\n    Math.round(tinycolor(\"#f00\").spin(10).toHsl().h),\n    10,\n    \"Spinning 10 works\"\n  );\n  assertEquals(\n    Math.round(tinycolor(\"#f00\").spin(360).toHsl().h),\n    0,\n    \"Spinning 360 works\"\n  );\n  assertEquals(\n    Math.round(tinycolor(\"#f00\").spin(2345).toHsl().h),\n    185,\n    \"Spinning 2345 works\"\n  );\n\n  [-360, 0, 360].forEach(function (delta) {\n    Object.keys(tinycolor.names).forEach(function (name) {\n      assertEquals(\n        tinycolor(name).toHex(),\n        tinycolor(name).spin(delta).toHex(),\n        \"Spinning \" + delta.toString() + \" has no effect\"\n      );\n    });\n  });\n});\n\nDeno.test(\"Mix\", function () {\n  // amount 0 or none\n  assertEquals(\n    tinycolor.mix(\"#000\", \"#fff\").toHsl().l,\n    0.5,\n    \"Mixing without amount works\"\n  );\n  assertEquals(\n    tinycolor.mix(\"#f00\", \"#000\", 0).toHex(),\n    \"ff0000\",\n    \"Mixing with 0 amount works\"\n  );\n  // This case checks the the problem with floating point numbers (eg 255/90)\n  assertEquals(\n    tinycolor.mix(\"#fff\", \"#000\", 90).toHex(),\n    \"1a1a1a\",\n    \"Mixing with 90 amount works correctly\"\n  );\n\n  // black and white\n  for (var i = 0; i < 100; i++) {\n    assertEquals(\n      Math.round(tinycolor.mix(\"#000\", \"#fff\", i).toHsl().l * 100) / 100,\n      i / 100,\n      \"Mixing black and white with \" + i + \" amount works\"\n    );\n  }\n\n  // with colors\n  for (var i = 0; i < 100; i++) {\n    var new_hex = Math.round((255 * (100 - i)) / 100).toString(16);\n\n    if (new_hex.length === 1) {\n      new_hex = \"0\" + new_hex;\n    }\n\n    assertEquals(\n      tinycolor.mix(\"#f00\", \"#000\", i).toHex(),\n      new_hex + \"0000\",\n      \"Mixing \" + i + \" (red channel)\"\n    );\n    assertEquals(\n      tinycolor.mix(\"#0f0\", \"#000\", i).toHex(),\n      \"00\" + new_hex + \"00\",\n      \"Mixing \" + i + \" (green channel)\"\n    );\n    assertEquals(\n      tinycolor.mix(\"#00f\", \"#000\", i).toHex(),\n      \"0000\" + new_hex,\n      \"Mixing \" + i + \" (blue channel)\"\n    );\n    assertEquals(\n      tinycolor.mix(tinycolor(\"transparent\"), \"#000\", i).toRgb().a,\n      i / 100,\n      \"Mixing \" + i + \" (alpha channel)\"\n    );\n  }\n});\n\n// The combination tests need to be expanded furthe\n\nfunction colorsToHexString(colors) {\n  return colors\n    .map(function (c) {\n      return c.toHex();\n    })\n    .join(\",\");\n}\n\nDeno.test(\"complement\", function () {\n  var complementDoesntModifyInstance = tinycolor(\"red\");\n  assertEquals(\n    complementDoesntModifyInstance.complement().toHex(),\n    \"00ffff\",\n    \"Complement works\"\n  );\n  assertEquals(\n    complementDoesntModifyInstance.toHex(),\n    \"ff0000\",\n    \"Complement did not modify this color\"\n  );\n});\n\nDeno.test(\"analogous\", function () {\n  var combination = tinycolor(\"red\").analogous();\n  assertEquals(\n    colorsToHexString(combination),\n    \"ff0000,ff0066,ff0033,ff0000,ff3300,ff6600\",\n    \"Correct Combination\"\n  );\n});\n\nDeno.test(\"monochromatic\", function () {\n  var combination = tinycolor(\"red\").monochromatic();\n  assertEquals(\n    colorsToHexString(combination),\n    \"ff0000,2a0000,550000,800000,aa0000,d40000\",\n    \"Correct Combination\"\n  );\n});\n\nDeno.test(\"splitcomplement\", function () {\n  var combination = tinycolor(\"red\").splitcomplement();\n  assertEquals(\n    colorsToHexString(combination),\n    \"ff0000,ccff00,0066ff\",\n    \"Correct Combination\"\n  );\n});\n\nDeno.test(\"triad\", function () {\n  var combination = tinycolor(\"red\").triad();\n  assertEquals(\n    colorsToHexString(combination),\n    \"ff0000,00ff00,0000ff\",\n    \"Correct Combination\"\n  );\n});\n\nDeno.test(\"tetrad\", function () {\n  var combination = tinycolor(\"red\").tetrad();\n  assertEquals(\n    colorsToHexString(combination),\n    \"ff0000,80ff00,00ffff,7f00ff\",\n    \"Correct Combination\"\n  );\n});\n\nDeno.test({\n  name: \"polyad\",\n  // Disabled until https://github.com/bgrins/TinyColor/issues/254\n  ignore: true,\n  fn: function () {\n    assertThrows(() => {\n      tinycolor(\"red\").polyad();\n    });\n    assertThrows(() => {\n      tinycolor(\"red\").polyad(-1);\n    });\n    assertThrows(() => {\n      tinycolor(\"red\").polyad(\"invalid\");\n    });\n    assertEquals(colorsToHexString(tinycolor(\"red\").polyad(1)), \"ff0000\");\n    assertEquals(colorsToHexString(tinycolor(\"red\").polyad(\"1\")), \"ff0000\");\n    assertEquals(\n      colorsToHexString(tinycolor(\"red\").polyad(2)),\n      \"ff0000,00ffff\"\n    );\n    assertEquals(\n      colorsToHexString(tinycolor(\"red\").polyad(3)),\n      \"ff0000,00ff00,0000ff\"\n    );\n    assertEquals(\n      colorsToHexString(tinycolor(\"red\").polyad(4)),\n      \"ff0000,80ff00,00ffff,7f00ff\"\n    );\n    assertEquals(\n      colorsToHexString(tinycolor(\"red\").polyad(5)),\n      \"ff0000,ccff00,00ff66,0066ff,cc00ff\"\n    );\n  },\n});\n"
        },
        {
          "name": "tinycolor.js",
          "type": "blob",
          "size": 36.640625,
          "content": "(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.tinycolor = factory());\n})(this, (function () { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n      return typeof obj;\n    } : function (obj) {\n      return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n  }\n\n  // https://github.com/bgrins/TinyColor\n  // Brian Grinstead, MIT License\n\n  var trimLeft = /^\\s+/;\n  var trimRight = /\\s+$/;\n  function tinycolor(color, opts) {\n    color = color ? color : \"\";\n    opts = opts || {};\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n      return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n      return new tinycolor(color, opts);\n    }\n    var rgb = inputToRGB(color);\n    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) this._r = Math.round(this._r);\n    if (this._g < 1) this._g = Math.round(this._g);\n    if (this._b < 1) this._b = Math.round(this._b);\n    this._ok = rgb.ok;\n  }\n  tinycolor.prototype = {\n    isDark: function isDark() {\n      return this.getBrightness() < 128;\n    },\n    isLight: function isLight() {\n      return !this.isDark();\n    },\n    isValid: function isValid() {\n      return this._ok;\n    },\n    getOriginalInput: function getOriginalInput() {\n      return this._originalInput;\n    },\n    getFormat: function getFormat() {\n      return this._format;\n    },\n    getAlpha: function getAlpha() {\n      return this._a;\n    },\n    getBrightness: function getBrightness() {\n      //http://www.w3.org/TR/AERT#color-contrast\n      var rgb = this.toRgb();\n      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function getLuminance() {\n      //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n      var rgb = this.toRgb();\n      var RsRGB, GsRGB, BsRGB, R, G, B;\n      RsRGB = rgb.r / 255;\n      GsRGB = rgb.g / 255;\n      BsRGB = rgb.b / 255;\n      if (RsRGB <= 0.03928) R = RsRGB / 12.92;else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n      if (GsRGB <= 0.03928) G = GsRGB / 12.92;else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n      if (BsRGB <= 0.03928) B = BsRGB / 12.92;else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n      return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    },\n    setAlpha: function setAlpha(value) {\n      this._a = boundAlpha(value);\n      this._roundA = Math.round(100 * this._a) / 100;\n      return this;\n    },\n    toHsv: function toHsv() {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      return {\n        h: hsv.h * 360,\n        s: hsv.s,\n        v: hsv.v,\n        a: this._a\n      };\n    },\n    toHsvString: function toHsvString() {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      var h = Math.round(hsv.h * 360),\n        s = Math.round(hsv.s * 100),\n        v = Math.round(hsv.v * 100);\n      return this._a == 1 ? \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\" : \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + this._roundA + \")\";\n    },\n    toHsl: function toHsl() {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      return {\n        h: hsl.h * 360,\n        s: hsl.s,\n        l: hsl.l,\n        a: this._a\n      };\n    },\n    toHslString: function toHslString() {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      var h = Math.round(hsl.h * 360),\n        s = Math.round(hsl.s * 100),\n        l = Math.round(hsl.l * 100);\n      return this._a == 1 ? \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\" : \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + this._roundA + \")\";\n    },\n    toHex: function toHex(allow3Char) {\n      return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function toHexString(allow3Char) {\n      return \"#\" + this.toHex(allow3Char);\n    },\n    toHex8: function toHex8(allow4Char) {\n      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function toHex8String(allow4Char) {\n      return \"#\" + this.toHex8(allow4Char);\n    },\n    toRgb: function toRgb() {\n      return {\n        r: Math.round(this._r),\n        g: Math.round(this._g),\n        b: Math.round(this._b),\n        a: this._a\n      };\n    },\n    toRgbString: function toRgbString() {\n      return this._a == 1 ? \"rgb(\" + Math.round(this._r) + \", \" + Math.round(this._g) + \", \" + Math.round(this._b) + \")\" : \"rgba(\" + Math.round(this._r) + \", \" + Math.round(this._g) + \", \" + Math.round(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function toPercentageRgb() {\n      return {\n        r: Math.round(bound01(this._r, 255) * 100) + \"%\",\n        g: Math.round(bound01(this._g, 255) * 100) + \"%\",\n        b: Math.round(bound01(this._b, 255) * 100) + \"%\",\n        a: this._a\n      };\n    },\n    toPercentageRgbString: function toPercentageRgbString() {\n      return this._a == 1 ? \"rgb(\" + Math.round(bound01(this._r, 255) * 100) + \"%, \" + Math.round(bound01(this._g, 255) * 100) + \"%, \" + Math.round(bound01(this._b, 255) * 100) + \"%)\" : \"rgba(\" + Math.round(bound01(this._r, 255) * 100) + \"%, \" + Math.round(bound01(this._g, 255) * 100) + \"%, \" + Math.round(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function toName() {\n      if (this._a === 0) {\n        return \"transparent\";\n      }\n      if (this._a < 1) {\n        return false;\n      }\n      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function toFilter(secondColor) {\n      var hex8String = \"#\" + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n      var secondHex8String = hex8String;\n      var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n      if (secondColor) {\n        var s = tinycolor(secondColor);\n        secondHex8String = \"#\" + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n      }\n      return \"progid:DXImageTransform.Microsoft.gradient(\" + gradientType + \"startColorstr=\" + hex8String + \",endColorstr=\" + secondHex8String + \")\";\n    },\n    toString: function toString(format) {\n      var formatSet = !!format;\n      format = format || this._format;\n      var formattedString = false;\n      var hasAlpha = this._a < 1 && this._a >= 0;\n      var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n      if (needsAlphaFormat) {\n        // Special case for \"transparent\", all other non-alpha formats\n        // will return rgba when there is transparency.\n        if (format === \"name\" && this._a === 0) {\n          return this.toName();\n        }\n        return this.toRgbString();\n      }\n      if (format === \"rgb\") {\n        formattedString = this.toRgbString();\n      }\n      if (format === \"prgb\") {\n        formattedString = this.toPercentageRgbString();\n      }\n      if (format === \"hex\" || format === \"hex6\") {\n        formattedString = this.toHexString();\n      }\n      if (format === \"hex3\") {\n        formattedString = this.toHexString(true);\n      }\n      if (format === \"hex4\") {\n        formattedString = this.toHex8String(true);\n      }\n      if (format === \"hex8\") {\n        formattedString = this.toHex8String();\n      }\n      if (format === \"name\") {\n        formattedString = this.toName();\n      }\n      if (format === \"hsl\") {\n        formattedString = this.toHslString();\n      }\n      if (format === \"hsv\") {\n        formattedString = this.toHsvString();\n      }\n      return formattedString || this.toHexString();\n    },\n    clone: function clone() {\n      return tinycolor(this.toString());\n    },\n    _applyModification: function _applyModification(fn, args) {\n      var color = fn.apply(null, [this].concat([].slice.call(args)));\n      this._r = color._r;\n      this._g = color._g;\n      this._b = color._b;\n      this.setAlpha(color._a);\n      return this;\n    },\n    lighten: function lighten() {\n      return this._applyModification(_lighten, arguments);\n    },\n    brighten: function brighten() {\n      return this._applyModification(_brighten, arguments);\n    },\n    darken: function darken() {\n      return this._applyModification(_darken, arguments);\n    },\n    desaturate: function desaturate() {\n      return this._applyModification(_desaturate, arguments);\n    },\n    saturate: function saturate() {\n      return this._applyModification(_saturate, arguments);\n    },\n    greyscale: function greyscale() {\n      return this._applyModification(_greyscale, arguments);\n    },\n    spin: function spin() {\n      return this._applyModification(_spin, arguments);\n    },\n    _applyCombination: function _applyCombination(fn, args) {\n      return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function analogous() {\n      return this._applyCombination(_analogous, arguments);\n    },\n    complement: function complement() {\n      return this._applyCombination(_complement, arguments);\n    },\n    monochromatic: function monochromatic() {\n      return this._applyCombination(_monochromatic, arguments);\n    },\n    splitcomplement: function splitcomplement() {\n      return this._applyCombination(_splitcomplement, arguments);\n    },\n    // Disabled until https://github.com/bgrins/TinyColor/issues/254\n    // polyad: function (number) {\n    //   return this._applyCombination(polyad, [number]);\n    // },\n    triad: function triad() {\n      return this._applyCombination(polyad, [3]);\n    },\n    tetrad: function tetrad() {\n      return this._applyCombination(polyad, [4]);\n    }\n  };\n\n  // If input is an object, force 1 into \"1.0\" to handle ratios properly\n  // String input requires \"1.0\" as input, so 1 will be treated as 1\n  tinycolor.fromRatio = function (color, opts) {\n    if (_typeof(color) == \"object\") {\n      var newColor = {};\n      for (var i in color) {\n        if (color.hasOwnProperty(i)) {\n          if (i === \"a\") {\n            newColor[i] = color[i];\n          } else {\n            newColor[i] = convertToPercentage(color[i]);\n          }\n        }\n      }\n      color = newColor;\n    }\n    return tinycolor(color, opts);\n  };\n\n  // Given a string or object, convert that input to RGB\n  // Possible string inputs:\n  //\n  //     \"red\"\n  //     \"#f00\" or \"f00\"\n  //     \"#ff0000\" or \"ff0000\"\n  //     \"#ff000000\" or \"ff000000\"\n  //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n  //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n  //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n  //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n  //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n  //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n  //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n  //\n  function inputToRGB(color) {\n    var rgb = {\n      r: 0,\n      g: 0,\n      b: 0\n    };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n    if (typeof color == \"string\") {\n      color = stringInputToObject(color);\n    }\n    if (_typeof(color) == \"object\") {\n      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n        rgb = rgbToRgb(color.r, color.g, color.b);\n        ok = true;\n        format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n        s = convertToPercentage(color.s);\n        v = convertToPercentage(color.v);\n        rgb = hsvToRgb(color.h, s, v);\n        ok = true;\n        format = \"hsv\";\n      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n        s = convertToPercentage(color.s);\n        l = convertToPercentage(color.l);\n        rgb = hslToRgb(color.h, s, l);\n        ok = true;\n        format = \"hsl\";\n      }\n      if (color.hasOwnProperty(\"a\")) {\n        a = color.a;\n      }\n    }\n    a = boundAlpha(a);\n    return {\n      ok: ok,\n      format: color.format || format,\n      r: Math.min(255, Math.max(rgb.r, 0)),\n      g: Math.min(255, Math.max(rgb.g, 0)),\n      b: Math.min(255, Math.max(rgb.b, 0)),\n      a: a\n    };\n  }\n\n  // Conversion Functions\n  // --------------------\n\n  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n  // `rgbToRgb`\n  // Handle bounds / percentage checking to conform to CSS color spec\n  // <http://www.w3.org/TR/css3-color/>\n  // *Assumes:* r, g, b in [0, 255] or [0, 1]\n  // *Returns:* { r, g, b } in [0, 255]\n  function rgbToRgb(r, g, b) {\n    return {\n      r: bound01(r, 255) * 255,\n      g: bound01(g, 255) * 255,\n      b: bound01(b, 255) * 255\n    };\n  }\n\n  // `rgbToHsl`\n  // Converts an RGB color value to HSL.\n  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n  // *Returns:* { h, s, l } in [0,1]\n  function rgbToHsl(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b),\n      min = Math.min(r, g, b);\n    var h,\n      s,\n      l = (max + min) / 2;\n    if (max == min) {\n      h = s = 0; // achromatic\n    } else {\n      var d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n        case g:\n          h = (b - r) / d + 2;\n          break;\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n      h /= 6;\n    }\n    return {\n      h: h,\n      s: s,\n      l: l\n    };\n  }\n\n  // `hslToRgb`\n  // Converts an HSL color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n  function hslToRgb(h, s, l) {\n    var r, g, b;\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n    function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    }\n    if (s === 0) {\n      r = g = b = l; // achromatic\n    } else {\n      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      var p = 2 * l - q;\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n    return {\n      r: r * 255,\n      g: g * 255,\n      b: b * 255\n    };\n  }\n\n  // `rgbToHsv`\n  // Converts an RGB color value to HSV\n  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n  // *Returns:* { h, s, v } in [0,1]\n  function rgbToHsv(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b),\n      min = Math.min(r, g, b);\n    var h,\n      s,\n      v = max;\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n    if (max == min) {\n      h = 0; // achromatic\n    } else {\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n        case g:\n          h = (b - r) / d + 2;\n          break;\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n      h /= 6;\n    }\n    return {\n      h: h,\n      s: s,\n      v: v\n    };\n  }\n\n  // `hsvToRgb`\n  // Converts an HSV color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n  function hsvToRgb(h, s, v) {\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n    var i = Math.floor(h),\n      f = h - i,\n      p = v * (1 - s),\n      q = v * (1 - f * s),\n      t = v * (1 - (1 - f) * s),\n      mod = i % 6,\n      r = [v, q, p, p, t, v][mod],\n      g = [t, v, v, q, p, p][mod],\n      b = [p, p, t, v, v, q][mod];\n    return {\n      r: r * 255,\n      g: g * 255,\n      b: b * 255\n    };\n  }\n\n  // `rgbToHex`\n  // Converts an RGB color to hex\n  // Assumes r, g, and b are contained in the set [0, 255]\n  // Returns a 3 or 6 character hex\n  function rgbToHex(r, g, b, allow3Char) {\n    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n    return hex.join(\"\");\n  }\n\n  // `rgbaToHex`\n  // Converts an RGBA color plus alpha transparency to hex\n  // Assumes r, g, b are contained in the set [0, 255] and\n  // a in [0, 1]. Returns a 4 or 8 character rgba hex\n  function rgbaToHex(r, g, b, a, allow4Char) {\n    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n    return hex.join(\"\");\n  }\n\n  // `rgbaToArgbHex`\n  // Converts an RGBA color to an ARGB Hex8 string\n  // Rarely used, but required for \"toFilter()\"\n  function rgbaToArgbHex(r, g, b, a) {\n    var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];\n    return hex.join(\"\");\n  }\n\n  // `equals`\n  // Can be called with any tinycolor input\n  tinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) return false;\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n  };\n  tinycolor.random = function () {\n    return tinycolor.fromRatio({\n      r: Math.random(),\n      g: Math.random(),\n      b: Math.random()\n    });\n  };\n\n  // Modification Functions\n  // ----------------------\n  // Thanks to less.js for some of the basics here\n  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\n  function _desaturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n  function _saturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n  function _greyscale(color) {\n    return tinycolor(color).desaturate(100);\n  }\n  function _lighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  }\n  function _brighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n    return tinycolor(rgb);\n  }\n  function _darken(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  }\n\n  // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n  // Values outside of this range will be wrapped into this range.\n  function _spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n  }\n\n  // Combination Functions\n  // ---------------------\n  // Thanks to jQuery xColor for some of the ideas behind these\n  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\n  function _complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n  }\n  function polyad(color, number) {\n    if (isNaN(number) || number <= 0) {\n      throw new Error(\"Argument to polyad must be a positive number\");\n    }\n    var hsl = tinycolor(color).toHsl();\n    var result = [tinycolor(color)];\n    var step = 360 / number;\n    for (var i = 1; i < number; i++) {\n      result.push(tinycolor({\n        h: (hsl.h + i * step) % 360,\n        s: hsl.s,\n        l: hsl.l\n      }));\n    }\n    return result;\n  }\n  function _splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [tinycolor(color), tinycolor({\n      h: (h + 72) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 216) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  }\n  function _analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {\n      hsl.h = (hsl.h + part) % 360;\n      ret.push(tinycolor(hsl));\n    }\n    return ret;\n  }\n  function _monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h,\n      s = hsv.s,\n      v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n    while (results--) {\n      ret.push(tinycolor({\n        h: h,\n        s: s,\n        v: v\n      }));\n      v = (v + modification) % 1;\n    }\n    return ret;\n  }\n\n  // Utility Functions\n  // ---------------------\n\n  tinycolor.mix = function (color1, color2, amount) {\n    amount = amount === 0 ? 0 : amount || 50;\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n    var p = amount / 100;\n    var rgba = {\n      r: (rgb2.r - rgb1.r) * p + rgb1.r,\n      g: (rgb2.g - rgb1.g) * p + rgb1.g,\n      b: (rgb2.b - rgb1.b) * p + rgb1.b,\n      a: (rgb2.a - rgb1.a) * p + rgb1.a\n    };\n    return tinycolor(rgba);\n  };\n\n  // Readability Functions\n  // ---------------------\n  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n  // `contrast`\n  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n  tinycolor.readability = function (color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);\n  };\n\n  // `isReadable`\n  // Ensure that foreground and background color combinations meet WCAG2 guidelines.\n  // The third argument is an optional Object.\n  //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n  //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n  // If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n  // *Example*\n  //    tinycolor.isReadable(\"#000\", \"#111\") => false\n  //    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\n  tinycolor.isReadable = function (color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n    out = false;\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n      case \"AAsmall\":\n      case \"AAAlarge\":\n        out = readability >= 4.5;\n        break;\n      case \"AAlarge\":\n        out = readability >= 3;\n        break;\n      case \"AAAsmall\":\n        out = readability >= 7;\n        break;\n    }\n    return out;\n  };\n\n  // `mostReadable`\n  // Given a base color and a list of possible foreground or background\n  // colors for that base, returns the most readable color.\n  // Optionally returns Black or White if the most readable color is unreadable.\n  // *Example*\n  //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n  //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n  //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n  //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\n  tinycolor.mostReadable = function (baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors;\n    level = args.level;\n    size = args.size;\n    for (var i = 0; i < colorList.length; i++) {\n      readability = tinycolor.readability(baseColor, colorList[i]);\n      if (readability > bestScore) {\n        bestScore = readability;\n        bestColor = tinycolor(colorList[i]);\n      }\n    }\n    if (tinycolor.isReadable(baseColor, bestColor, {\n      level: level,\n      size: size\n    }) || !includeFallbackColors) {\n      return bestColor;\n    } else {\n      args.includeFallbackColors = false;\n      return tinycolor.mostReadable(baseColor, [\"#fff\", \"#000\"], args);\n    }\n  };\n\n  // Big List of Colors\n  // ------------------\n  // <https://www.w3.org/TR/css-color-4/#named-colors>\n  var names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n  };\n\n  // Make it easy to access colors via `hexNames[hex]`\n  var hexNames = tinycolor.hexNames = flip(names);\n\n  // Utilities\n  // ---------\n\n  // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\n  function flip(o) {\n    var flipped = {};\n    for (var i in o) {\n      if (o.hasOwnProperty(i)) {\n        flipped[o[i]] = i;\n      }\n    }\n    return flipped;\n  }\n\n  // Return a valid alpha value [0,1] with all invalid values being set to 1\n  function boundAlpha(a) {\n    a = parseFloat(a);\n    if (isNaN(a) || a < 0 || a > 1) {\n      a = 1;\n    }\n    return a;\n  }\n\n  // Take input from [0, n] and return it as [0, 1]\n  function bound01(n, max) {\n    if (isOnePointZero(n)) n = \"100%\";\n    var processPercent = isPercentage(n);\n    n = Math.min(max, Math.max(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n      n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if (Math.abs(n - max) < 0.000001) {\n      return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return n % max / parseFloat(max);\n  }\n\n  // Force a number between 0 and 1\n  function clamp01(val) {\n    return Math.min(1, Math.max(0, val));\n  }\n\n  // Parse a base-16 hex value into a base-10 integer\n  function parseIntFromHex(val) {\n    return parseInt(val, 16);\n  }\n\n  // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n  function isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf(\".\") != -1 && parseFloat(n) === 1;\n  }\n\n  // Check to see if string passed in is a percentage\n  function isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf(\"%\") != -1;\n  }\n\n  // Force a hex value to have 2 characters\n  function pad2(c) {\n    return c.length == 1 ? \"0\" + c : \"\" + c;\n  }\n\n  // Replace a decimal with it's percentage value\n  function convertToPercentage(n) {\n    if (n <= 1) {\n      n = n * 100 + \"%\";\n    }\n    return n;\n  }\n\n  // Converts a decimal to a hex value\n  function convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n  }\n  // Converts a hex value to a decimal\n  function convertHexToDecimal(h) {\n    return parseIntFromHex(h) / 255;\n  }\n  var matchers = function () {\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    return {\n      CSS_UNIT: new RegExp(CSS_UNIT),\n      rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n      rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n      hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n      hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n      hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n      hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n  }();\n\n  // `isValidCSSUnit`\n  // Take in a single string / number and check to see if it looks like a CSS unit\n  // (see `matchers` above for definition).\n  function isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n  }\n\n  // `stringInputToObject`\n  // Permissive string parsing.  Take in a number of formats, and output an object\n  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n  function stringInputToObject(color) {\n    color = color.replace(trimLeft, \"\").replace(trimRight, \"\").toLowerCase();\n    var named = false;\n    if (names[color]) {\n      color = names[color];\n      named = true;\n    } else if (color == \"transparent\") {\n      return {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 0,\n        format: \"name\"\n      };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if (match = matchers.rgb.exec(color)) {\n      return {\n        r: match[1],\n        g: match[2],\n        b: match[3]\n      };\n    }\n    if (match = matchers.rgba.exec(color)) {\n      return {\n        r: match[1],\n        g: match[2],\n        b: match[3],\n        a: match[4]\n      };\n    }\n    if (match = matchers.hsl.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        l: match[3]\n      };\n    }\n    if (match = matchers.hsla.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        l: match[3],\n        a: match[4]\n      };\n    }\n    if (match = matchers.hsv.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        v: match[3]\n      };\n    }\n    if (match = matchers.hsva.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        v: match[3],\n        a: match[4]\n      };\n    }\n    if (match = matchers.hex8.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        a: convertHexToDecimal(match[4]),\n        format: named ? \"name\" : \"hex8\"\n      };\n    }\n    if (match = matchers.hex6.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        format: named ? \"name\" : \"hex\"\n      };\n    }\n    if (match = matchers.hex4.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1] + \"\" + match[1]),\n        g: parseIntFromHex(match[2] + \"\" + match[2]),\n        b: parseIntFromHex(match[3] + \"\" + match[3]),\n        a: convertHexToDecimal(match[4] + \"\" + match[4]),\n        format: named ? \"name\" : \"hex8\"\n      };\n    }\n    if (match = matchers.hex3.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1] + \"\" + match[1]),\n        g: parseIntFromHex(match[2] + \"\" + match[2]),\n        b: parseIntFromHex(match[3] + \"\" + match[3]),\n        format: named ? \"name\" : \"hex\"\n      };\n    }\n    return false;\n  }\n  function validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\n      level: \"AA\",\n      size: \"small\"\n    };\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n      level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n      size = \"small\";\n    }\n    return {\n      level: level,\n      size: size\n    };\n  }\n\n  return tinycolor;\n\n}));\n"
        }
      ]
    }
  ]
}