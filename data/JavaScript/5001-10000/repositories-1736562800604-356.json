{
  "metadata": {
    "timestamp": 1736562800604,
    "page": 356,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "choojs/choo",
      "stars": 6770,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.16015625,
          "content": "node_modules/\ncoverage/\ndist/\ntmp/\n.sauce-credentials.json\nsauce_connect.log\nnpm-debug.log*\ncoverage.json\n.DS_Store\n*.swp\n.zuulrc\npackage-lock.json\nyarn.lock\n.idea\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.3984375,
          "content": "node_js:\n  - 'node'\n  - 'lts/*'\ndist: xenial\nlanguage: node_js\nnotifications:\n  irc:\n    on_success: change\n    on_failure: always\n    use_notice: true\n    channels:\n      - \"chat.freenode.net#choo\"\n    template:\n      - \"%{repository_slug} #%{build_number} %{result}: %{build_url}\"\nservices:\n  - xvfb\ninstall:\n  - npm install\nscript:\n  - npm run test:node\n  - xvfb-run --auto-servernum npm run test:browser\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 16.1328125,
          "content": "## `7.0.0` All the little things\nIt has been quite a while since the last major version of Choo. Since it's\nrelease, `choo@6` has recieved a bunch of features and patches, but some changes\nhas been put off because they'd have an affect on the API in a way that could be\nbreaking for some users. With this release we've merged all these minor, but\nbreaking changes all at once.\n\nThe way in which Choo handles hashes in the URL has proved confusing for both\nnewcomers and seasoned Choo users. In a prior patch the `hash` option was added\nwhich could be used to disable hash routing. With this release we're changing it\nto be *disabled by default*.\n\nRendering pages server side is an excellent way to increase page performance and\nChoo supports it out of the box. Choo also allows for rehydrating the client\nwith what state was used when rendering on the server side. To ensure that the\napplication state is identicial regardless if hydrated or not, the internals for\nrouting has been changes so that `href`, `query`, `param` and `route` are all\navailable on application state at the time when stores are initialized.\n\nIn prior versions, when rendering on the server, the state that was provided to\n`toString` would be merged onto the application state. Meaning consecutive calls\nto `toString` would accumulate on the application state and persist in-between\nrender. With this change, application state is no longer mutated during server\nside render. This will affects those of you doing server side rendering and then\nplucking out properties from the application state. You can now be assured that\nonly the state that is provided to `toString` is modified during rendering.\n\n```diff\nvar html = app.toString('/', state)\n- var title = app.state.title\n+ var title = state.title\n```\n\nAnd lastly, we've updated depndencies and even dropped a dependency which is\nno longer required by modern browsers. The dependency `xtend` was dropped in\nfavour of\n[Object.assign](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign). This change has also been propagated throughout\nthe Choo universe i.e. choo-devtools and choo-service-worker etc. If you are\nsupporting legacy browsers (IE11 and bellow), we recommend the polyfill service\nhttps://polyfill.io which will detect legacy browsers and load the appropiate\npolyfills.\n\nThat's all for now, keep being awesome!\n\n## `6.0.0` Same as it ever was\nIn the past few months we've been able to use `choo@5` a bunch, and people seem\nto like it a lot! In this patch all we're doing is taking choo's existing API,\nand polishing the internals. In theory this means breaking changes, but in\npractice it will mostly mean people need to update their dependencies, and\nthings will work great.\n\nChoo v6 includes the upgrades to `bel@5` and `nanomorph@5`. This means up to\n20x faster server rendering, and up to 10x improved browser rendering speeds.\nWe've also fixed DOM node caching, and introduced sibling node reordering.\n\nThis release also includes an overhauled timing API. We're now capturing more\nevents, and are leveraging this in tools like `choo-log` to provide consistent\nfeedback on performance.\n\nChoo is now also completely prototype based. It not only means faster execution\ntimes, and more maintainable codebase - but you can also override methods if\nyou ever need to.\n\nWe've also tweaked the event system a little. All built-in event names are now\navailable as constants under `app.state.events`. And we've introduced three new\nevents: `'navigate'` will trigger whenever a route changes, `'replaceState'`\ncan be called to redirect routes, and `popState` which is emitted when the back\nbutton in the browser is pressed.\n\nTo top things off, we've reintroduced querystring parsing. An object containing\nthe current represenation of the search query (e.g. `?foo=bar`) can be found\nunder `state.query`. We used to do something similar in choo v4 and below, and\nwe're happy to reintroduce it in this release!\n\nAnd that's about it - we've upgraded a whole slew of deps, and removed a few we\ndidn't quite use. Overall we're quite proud of the new codebase, and filled\nwith joy we didn't have to make any changes to the API - additions only.\n\nThanks heaps for reading this far, we hope you enjoy this release as much as we\ndid building it. Happy coding! -Team Choo :sparkles:\n\n## `5.1.0` Timing API support\nIn order to improve, we must measure first. Specifically when it comes to\nframerate there are very specific numbers we can rely on: `~16ms` for any given\nframe to achieve 60fps. That's why in `5.1.0` we're adding support for the\n[window.Performance](https://developer.mozilla.org/en-US/docs/Web/API/Performance)\nAPI.\n\nWe hope that by adding support for timers, people building applications on\n`choo` will become more aware of their application's performance and learn how\nand when to optimize. Hopefully this will help in making applications\naccessible to all sorts of devices, and not just the latest and greatest.\n\nTiming support will be enabled by default, and can be toggled off by passing\n`{ timing: false }` to the `var app = choo()` constructor.\n\nTiming calls will not run in browsers that don't support it out of the box.\nFor unsupported browser's there's a polyfill available at\n[nolanlawson/marky](https://github.com/nolanlawson/marky). The timing marks are\n`choo:renderStart`, `choo:renderEnd`. The resulting diff is stored as\n`choo:render`.\n\nWe hope you'll enjoy this release; thanks heaps for using choo!\n\n### changes\n- added out of the box support for performance timings (`window.performance`)\n- updated `nanobus` to `3.0.0`; `'*'` events now run after named events\n\n---\n\n## `5.0.0` Welp Welp Welp\nSo it turns out Choo could be radically simplified. We're now comfortably\nsitting at `~4kb`, have removed a whole bunch of words from the API and should\nbe a whole lot faster. We've [written about it\nbefore](https://medium.com/@yoshuawuyts/choo-v5-bc775b007b5e); if you're\ninterested we recommend reading through that post.\n\nWe're now using an event emitter, mutable state and explicit re-renders. Some\npeople might frown at first at the words \"mutable state\", but if you think it\nthrough the mental model doesn't change. \"State\" has always been a concept of\nan object that changes over time; we then render the DOM as a snapshot of that\nstate.\n\nWhat we've done is change the way we mutate that state - we no longer generate\na ton of expensive intermediate objects to mutate the state, but instead mutate\nthe state directly. In turn we've also removed the magic re-rendering and made\nit explicit. This enables people to create tight render loops that can even be\nused in GC constrained environments like games or music production. We think\nthis change was well worth it, and will make a lot of sense going forward.\n\nPeople might also wonder why we've moved away from `flux`/`elm` and are using\nan event emitter now. It turns out that the previous architecture had a lot of\nconfusing words that made it harder to learn than it should. It was also not\npossible to react to changes; the thing that changed always had to specify what\nneeded to respond to it. By using event emitters we've changed this, which will\nmake relations in the application more expressive. All in all, it turned out\nthat all we needed for this was a simple event emitter - we think this was well\nworth the change and breaking away from what we were previously doing.\n\n_Pretty much everything about the API changed in this version. There's\nliterally nothing left to remove from the API tho so this is probably the last\ntime we get to break anything in a significant way._\n\n### changes\n- :exclamation: state is now mutable and renders are triggered through\n  `.emit('render')`.\n- :exclamation: we've replaced `.use()`, `.model()` and the rest of the choo\n  architecture with a reworked `.use()` method. It's called once on boot, and\n  exposes a mutable reference to `state` and [an event\n  emitter](https://github.com/yoshuawuyts/nanobus/) that's compatible with\n  Node's\n  [`require('events').EventEmitter`](https://nodejs.org/api/events.html#events_class_eventemitter)\n- :exclamation: the `.router()` method has been replaced with `.route()`,\n  replacing the nested array API. This should be easier to remember and more\n  performant.\n- :exclamation: we've replaced `morphdom`/`yo-yo` with `nanomorph`. The two\n  algorithms are very comparable. The differences are that the new algorithm\n  is smaller and the value of input fields on re-rendering will be whatever the\n  `value=\"\"` attribute is.\n- :exclamation: `choo/mount` is now available as `app.mount()` and calls\n  `app.start()` internally now\n\n---\n\n## `4.0.0` The routing patch\nThis patch changes the way we handle routes. It introduces query string\nsupport (!), and changes the router to use a lisp-like syntax. It also inverts\nthe argument order of effects and reducers to be more intuitive. We also\nmanaged to sneak in some performance upgrades :sparkles: - We hope you enjoy\nit!\n\n### changes\n- :exclamation: slim down server side rendering API |\n  [issue](https://github.com/yoshuawuyts/choo/issues/191) |\n  [pull-request](https://github.com/yoshuawuyts/choo/pull/203)\n- :exclamation: update router API to be lisp-like\n- :exclamation: swap `state` and `data` argument order |\n  [issue](https://github.com/yoshuawuyts/choo/issues/179)\n- :exclamation: remove `choo/http`. Use [xhr](https://github.com/naugtur/xhr)\n  instead | [pull-request](https://github.com/yoshuawuyts/choo/pull/269)\n- update `router` to use memoization |\n  [issue](https://github.com/yoshuawuyts/sheet-router/issues/17) |\n  [pull-request](https://github.com/yoshuawuyts/sheet-router/pull/34)\n- support inline anchor links |\n  [issue](https://github.com/yoshuawuyts/choo/issues/65)\n- allow bypassing of link clicks in `sheet-router` |\n  [issue](https://github.com/yoshuawuyts/sheet-router/issues/15) |\n  [pull-request](https://github.com/yoshuawuyts/sheet-router/pull/27)\n- update router API to handle hashes by default\n- update router to provide out of the box support for Electron\n- update `location` state to expose `search` parameters (query strings) |\n  [issue](https://github.com/yoshuawuyts/sheet-router/issues/31)\n\n---\n\n## `3.3.0`\nYay, `plugins` now support `wrappers` which is a segway onto HMR, time travel\nand other cool plugins. These changes have come through in barracks `v8.3.0`\nand a lil fix in `v8.3.1`. This is a lil patch before `4.0.0` comes through,\nbut should be super valuable. Wooh!\n\n### changes\n- updated barracks to `v8.3.1`\n\n---\n\n## `3.2.0`\nWooh, `plugins` are a first class citizen now thanks to the `.use()` API. It's\na multiplexed version of the old `app = choo(hooks)`. It should enable\nattaching multiple hooks onto the same API, which is useful to create re-usable\nextensions to `choo`. They should be used with care though, and be as generic\nas possible, but the docs should provide enough backdrop for that. Anyway,\nhave fun with plugins! :tada:\n\n### changes\n- added `app.use()`\n\n---\n\n## `3.1.0`\nAnd another patch down. This time around it's mostly maintenance and a bit of\nperf:\n- The addition of the [nanoraf](https://github.com/yoshuawuyts/nanoraf)\n  dependency prevents bursts of DOM updates thrashing application performance,\n  quite possibly making choo amongst the fastest frameworks out there.\n- We now ship standalone `UMD` bundles on each release, available through\n  [https://unpkg.com/choo](https://unpkg.com/choo). The goal of this is to\n  support sites like codepen and the like; __this should not be used for\n  production__.\n\n---\n\n## `3.0.0`\nWoooh, happy third birthday `choo` - _thanks dad_. You're all grown up now;\nlook at how far you've come in the last month. You've grown... tinier? But yet\nyou do more? I love you `choo` - _shut up dad_.\n\n### Notable changes\n#### Who's the tiniest of them all?\n`choo` is now `5kb` optimized! That's `2kb` less compared to v2. _Woah, how?_\nWe now support [yo-yoify](https://github.com/shama/yo-yoify) which optimizes\nthose lil template tags to `document.createElement()` calls. So not only is it\nsmaller, creating elements now has no overhead. Pretty nifty eh? Mad shoutout\nto [Shama](http://twitter.com/shamakry) for building this!\n\n#### Captain Hook(s)\nV3 introduces `hooks` - powerful functions that are called at certain points in\nthe refresh cycle. Unlike functions in `models` these functions have unfiltered\naccess to all properties, call stacks and more. They're super useful when\nbuilding error handling, logging or persisting for stuff like `hot reloading`.\nI quite like them, and I'm def keen to see what uses people will come up with!\n\n#### Effect Composition :train::train::train::train:\n`effects` are now composable by calling a `done(err, res)` callback when\nthey're done executing. This means that multiple namespaced effects can be\nchained together to form some higher level behavior.\n\nThink of cases like \"logout\" - multiple models must be cleared, perhaps tokens\ninvalidated on the server, all in a certain order. This requires multiple\nmodels to work in tandem. - And now that's possible! :sparkles:\n\n#### Pathfinders guide\nWe've started work on the [choo\nhandbook](https://github.com/yoshuawuyts/choo-handbook) - a lil manual to help\nyou get started, not only with choo, but with web development in general. It's\nsuper modest still, only containing a single `choo` tutorial, but we'll be\nexpanding this over the coming months. If you want to contribute some docs,\nthere's [a whole section of\nideas](https://github.com/yoshuawuyts/choo-handbook/issues/10) on stuff that\nmight be neat to write. Any lil bits are welcome! Shout out to\n[Tim](https://twitter.com/timwis) for making this happen :tada:\n\n#### The Cycle of Life\n`views` have gone through a bit of a change - they're now required using\n`require('choo/html')` so they can be factored out of a project into standalone\n[bel](https://github.com/shama/bel) components at any time. But additionally\nthese components have gained super powers through the adition of `onload` and\n`onunload` hooks. Components can now react to being mounted or not, which makes\nthem ideal to implement standalone widgets. This behavior uses [html5\nMutationObserver](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)\nunder the hood, so it will work anywhere with a DOM!  Again, this was all\n[Shama](http://twitter.com/shamakry)'s hard work.\n\n#### Test coverage\n`choo` has gained a beaut blanket of tests, courtesy of\n[Todd](https://twitter.com/whale_eat_squid) and\n[Ben](https://twitter.com/bendrucker/). We've got server, browser and\n_pretty-much-all-browsers-known-to-mankind_ style testing which should give us\na pretty good idea if stuff breaks. Neat!\n\n#### Core dump\nInternally we've moved the core of `choo` into a separate package -\n[barracks](https://github.com/yoshuawuyts/barracks). `choo` is now mere glue\ncode around `barracks`, `yo-yo` and `sheet-router`. This is good news for folks\nwho like `choo`, but don't agree with all decisions. Go forth and build your\nown lil framework!\n\n### Changelog\n- move `choo.view` out to `require('choo/html')` #71 | pr #103\n- streamline view API #35 | pr #111\n- higher order functions #34 | pr #104\n- create lifecycle hooks #1 | feature addition in dependency covered by semver\n- implement state hooks #15 | pr #104\n- add yo-yoify #3 | pr #110\n- rename \"app\" namespace #82 | pr #111\n- enable browser testing | pr #86\n- propagating actions creates infinite loop #114 | pr #104\n- state is now immutable in `reducers` and `effects`\n\n### Thanks\nHuge thanks to everyone who's collaborated on this, provided feedback or\neven mentioned it anywhere. It's been a hella lot of people, but seriously,\nyou're the best :steam_locomotive::train::train::train::train::train:\n\n---\n\n## `2.3.1`\n- [76](https://github.com/yoshuawuyts/choo/pull/76) - fix router arguments\n\n---\n\n## `2.3.0`\n- [55](https://github.com/yoshuawuyts/choo/pull/55) - load subscriptions once\n  DOM is ready\n- heaps of documentation fixes; looks like choo is taking off 🐨\n\n---\n\n## `2.2.2`\n- [53](https://github.com/yoshuawuyts/choo/pull/53) - fix assert call for\n  subscriptions\n- [52](https://github.com/yoshuawuyts/choo/pull/52) - fix naming rootId\n\n---\n\n## `2.0.0`\n### breaking changes\n- namespaces are now enforced more strictly\n- models now only accept a single argument\n- the `namespace` key was introduced inside of models (was prior the leading\n  string in models)\n- namespaced models can now only operate within themselves\n\n---\n\n## `1.0.0`\n- first version of choo\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Yoshua Wuyts\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 31.869140625,
          "content": "<h1 align=\"center\">Choo</h1>\n\n<div align=\"center\">\n  :steam_locomotive::train::train::train::train::train:\n</div>\n<div align=\"center\">\n  <strong>Fun functional programming</strong>\n</div>\n<div align=\"center\">\n  A <code>4kb</code> framework for creating sturdy frontend applications\n</div>\n\n<br />\n\n<div align=\"center\">\n  <!-- Stability -->\n  <a href=\"https://nodejs.org/api/documentation.html#documentation_stability_index\">\n    <img src=\"https://img.shields.io/badge/stability-experimental-orange.svg?style=flat-square\"\n      alt=\"API stability\" />\n  </a>\n  <!-- NPM version -->\n  <a href=\"https://npmjs.org/package/choo\">\n    <img src=\"https://img.shields.io/npm/v/choo.svg?style=flat-square\"\n      alt=\"NPM version\" />\n  </a>\n  <!-- Build Status -->\n  <a href=\"https://travis-ci.org/choojs/choo\">\n    <img src=\"https://img.shields.io/travis/choojs/choo/master.svg?style=flat-square\"\n      alt=\"Build Status\" />\n  </a>\n  <!-- Test Coverage -->\n  <a href=\"https://codecov.io/github/choojs/choo\">\n    <img src=\"https://img.shields.io/codecov/c/github/choojs/choo/master.svg?style=flat-square\"\n      alt=\"Test Coverage\" />\n  </a>\n  <!-- Downloads -->\n  <a href=\"https://npmjs.org/package/choo\">\n    <img src=\"https://img.shields.io/npm/dt/choo.svg?style=flat-square\"\n      alt=\"Download\" />\n  </a>\n  <!-- Standard -->\n  <a href=\"https://standardjs.com\">\n    <img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\"\n      alt=\"Standard\" />\n  </a>\n</div>\n\n<div align=\"center\">\n  <h3>\n    <a href=\"https://choo.io\">\n      Website\n    </a>\n    <span> | </span>\n    <a href=\"https://github.com/choojs/choo-handbook\">\n      Handbook\n    </a>\n    <span> | </span>\n    <a href=\"https://github.com/YerkoPalma/awesome-choo\">\n      Ecosystem\n    </a>\n    <span> | </span>\n    <!-- <a href=\"https://github.com/trainyard/choo-cli\"> -->\n    <!--   CLI -->\n    <!-- </a> -->\n    <!-- <span> | </span> -->\n    <a href=\"https://github.com/choojs/choo/blob/master/.github/CONTRIBUTING.md\">\n      Contributing\n    </a>\n    <span> | </span>\n    <a href=\"https://www.reddit.com/r/choojs/\">\n      Reddit\n    </a>\n    <span> | </span>\n    <a href=\"https://webchat.freenode.net/?channels=choo\">\n      Chat\n    </a>\n  </h3>\n</div>\n\n<div align=\"center\">\n  <sub>The little framework that could. Built with ❤︎ by\n  <a href=\"https://twitter.com/yoshuawuyts\">Yoshua Wuyts</a> and\n  <a href=\"https://github.com/choojs/choo/graphs/contributors\">\n    contributors\n  </a>\n</div>\n\n## Table of Contents\n- [Features](#features)\n- [Example](#example)\n- [Philosophy](#philosophy)\n- [Events](#events)\n- [State](#state)\n- [Routing](#routing)\n- [Server Rendering](#server-rendering)\n- [Components](#components)\n- [Optimizations](#optimizations)\n- [FAQ](#faq)\n- [API](#api)\n- [Installation](#installation)\n- [See Also](#see-also)\n- [Support](#support)\n\n## Features\n- __minimal size:__ weighing `4kb`, Choo is a tiny little framework\n- __event based:__ our performant event system makes writing apps easy\n- __small api:__ with only 6 methods there's not much to learn\n- __minimal tooling:__ built for the cutting edge `browserify` compiler\n- __isomorphic:__ renders seamlessly in both Node and browsers\n- __very cute:__ choo choo!\n\n## Example\n```js\nvar html = require('choo/html')\nvar devtools = require('choo-devtools')\nvar choo = require('choo')\n\nvar app = choo()\napp.use(devtools())\napp.use(countStore)\napp.route('/', mainView)\napp.mount('body')\n\nfunction mainView (state, emit) {\n  return html`\n    <body>\n      <h1>count is ${state.count}</h1>\n      <button onclick=${onclick}>Increment</button>\n    </body>\n  `\n\n  function onclick () {\n    emit('increment', 1)\n  }\n}\n\nfunction countStore (state, emitter) {\n  state.count = 0\n  emitter.on('increment', function (count) {\n    state.count += count\n    emitter.emit('render')\n  })\n}\n```\nWant to see more examples? Check out the [Choo handbook][handbook].\n\n## Philosophy\nWe believe programming should be fun and light, not stern and stressful. It's\ncool to be cute; using serious words without explaining them doesn't make for\nbetter results - if anything it scares people off. We don't want to be scary,\nwe want to be nice and fun, and then _casually_ be the best choice around.\n_Real casually._\n\nWe believe frameworks should be disposable, and components recyclable. We don't\nwant a web where walled gardens jealously compete with one another. By making\nthe DOM the lowest common denominator, switching from one framework to another\nbecomes frictionless. Choo is modest in its design; we don't believe it will\nbe top of the class forever, so we've made it as easy to toss out as it is to\npick up.\n\nWe don't believe that bigger is better. Big APIs, large complexities, long\nfiles - we see them as omens of impending userland complexity. We want everyone\non a team, no matter the size, to fully understand how an application is laid\nout. And once an application is built, we want it to be small, performant and\neasy to reason about. All of which makes for easy to debug code, better results\nand super smiley faces.\n\n## Events\nAt the core of Choo is an event emitter, which is used for both application\nlogic but also to interface with the framework itself. The package we use for\nthis is [nanobus](https://github.com/choojs/nanobus).\n\nYou can access the emitter through `app.use(state, emitter, app)`, `app.route(route,\nview(state, emit))` or `app.emitter`. Routes only have access to the\n`emitter.emit` method to encourage people to separate business logic from\nrender logic.\n\nThe purpose of the emitter is two-fold: it allows wiring up application code\ntogether, and splitting it off nicely - but it also allows communicating with\nthe Choo framework itself. All events can be read as constants from\n`state.events`. Choo ships with the following events built in:\n\n### `'DOMContentLoaded'`|`state.events.DOMCONTENTLOADED`\nChoo emits this when the DOM is ready. Similar to the DOM's\n`'DOMContentLoaded'` event, except it will be emitted even if the listener is\nadded _after_ the DOM became ready. Uses\n[document-ready](https://github.com/bendrucker/document-ready) under the hood.\n\n### `'render'`|`state.events.RENDER`\nThis event should be emitted to re-render the DOM. A common pattern is to\nupdate the `state` object, and then emit the `'render'` event straight after.\nNote that `'render'` will only have an effect once the `DOMContentLoaded` event\nhas been fired.\n\n### `'navigate'`|`state.events.NAVIGATE`\nChoo emits this event whenever routes change. This is triggered by either\n`'pushState'`, `'replaceState'` or `'popState'`.\n\n### `'pushState'`|`state.events.PUSHSTATE`\nThis event should be emitted to navigate to a new route. The new route is added\nto the browser's history stack, and will emit `'navigate'` and `'render'`.\nSimilar to\n[history.pushState](http://devdocs.io/dom/history_api).\n\n### `'replaceState'`|`state.events.REPLACESTATE`\nThis event should be emitted to navigate to a new route. The new route replaces\nthe current entry in the browser's history stack, and will emit `'navigate'`\nand `'render'`. Similar to\n[history.replaceState](http://devdocs.io/dom/history#history-replacestate).\n\n### `'popState'`|`state.events.POPSTATE`\nThis event is emitted when the user hits the 'back' button in their browser.\nThe new route will be a previous entry in the browser's history stack, and\nimmediately afterward the`'navigate'` and `'render'`events will be emitted.\nSimilar to [history.popState](http://devdocs.io/dom_events/popstate). (Note\nthat `emit('popState')` will _not_ cause a popState action - use\n`history.go(-1)` for that - this is different from the behaviour of `pushState`\nand `replaceState`!)\n\n### `'DOMTitleChange'`|`state.events.DOMTITLECHANGE`\nThis event should be emitted whenever the `document.title` needs to be updated.\nIt will set both `document.title` and `state.title`.  This value can be used\nwhen server rendering to accurately include a `<title>` tag in the header.\nThis is derived from the\n[DOMTitleChanged event](https://developer.mozilla.org/en-US/docs/Web/Events/DOMTitleChanged).\n\n## State\nChoo comes with a shared state object. This object can be mutated freely, and\nis passed into the view functions whenever `'render'` is emitted. The state\nobject comes with a few properties set.\n\nWhen initializing the application, `window.initialState` is used to provision\nthe initial state. This is especially useful when combined with server\nrendering. See [server rendering](#server-rendering) for more details.\n\n### `state.events`\nA mapping of Choo's built in events. It's recommended to extend this object\nwith your application's events. By defining your event names once and setting\nthem on `state.events`, it reduces the chance of typos, generally autocompletes\nbetter, makes refactoring easier and compresses better.\n\n### `state.params`\nThe current params taken from the route. E.g. `/foo/:bar` becomes available as\n`state.params.bar` If a wildcard route is used (`/foo/*`) it's available as\n`state.params.wildcard`.\n\n### `state.query`\nAn object containing the current queryString. `/foo?bin=baz` becomes `{ bin:\n'baz' }`.\n\n### `state.href`\nAn object containing the current href. `/foo?bin=baz` becomes `/foo`.\n\n### `state.route`\nThe current name of the route used in the router (e.g. `/foo/:bar`).\n\n### `state.title`\nThe current page title. Can be set using the `DOMTitleChange` event.\n\n### `state.components`\nAn object _recommended_ to use for local component state.\n\n### `state.cache(Component, id, [...args])`\nGeneric class cache. Will lookup Component instance by id and create one if not\nfound. Useful for working with stateful [components](#components).\n\n## Routing\nChoo is an application level framework. This means that it takes care of\neverything related to routing and pathnames for you.\n\n### Params\nParams can be registered by prepending the route name with `:routename`, e.g.\n`/foo/:bar/:baz`. The value of the param will be saved on `state.params` (e.g.\n`state.params.bar`). Wildcard routes can be registered with `*`, e.g. `/foo/*`.\nThe value of the wildcard will be saved under `state.params.wildcard`.\n\n### Default routes\nSometimes a route doesn't match, and you want to display a page to handle it.\nYou can do this by declaring `app.route('*', handler)` to handle all routes\nthat didn't match anything else.\n\n### Querystrings\nQuerystrings (e.g. `?foo=bar`) are ignored when matching routes. An object\ncontaining the key-value mappings exists as `state.query`.\n\n### Hash routing\nBy default, hashes are ignored when routing. When enabling hash routing\n(`choo({ hash: true })`) hashes will be treated as part of the url, converting\n`/foo#bar` to `/foo/bar`. This is useful if the application is not mounted at\nthe website root. Unless hash routing is enabled, if a hash is found we check if\nthere's an anchor on the same page, and will scroll the element into view. Using\nboth hashes in URLs and anchor links on the page is generally not recommended.\n\n### Following links\nBy default all clicks on `<a>` tags are handled by the router through the\n[nanohref](https://github.com/choojs/nanohref) module. This can be\ndisabled application-wide by passing `{ href: false }` to the application\nconstructor. The event is not handled under the following conditions:\n- the click event had `.preventDefault()` called on it\n- the link has a `target=\"_blank\"` attribute with `rel=\"noopener noreferrer\"`\n- a modifier key is enabled (e.g. `ctrl`, `alt`, `shift` or `meta`)\n- the link's href starts with protocol handler such as `mailto:` or `dat:`\n- the link points to a different host\n- the link has a `download` attribute\n\n:warn: Note that we only handle `target=_blank` if they also have\n`rel=\"noopener noreferrer\"` on them. This is needed to [properly sandbox web\npages](https://mathiasbynens.github.io/rel-noopener/).\n\n### Navigating programmatically\nTo navigate routes you can emit `'pushState'`, `'popState'` or\n`'replaceState'`. See [#events](#events) for more details about these events.\n\n## Server Rendering\nChoo was built with Node in mind. To render on the server call\n`.toString(route, [state])` on your `choo` instance.\n\n```js\nvar html = require('choo/html')\nvar choo = require('choo')\n\nvar app = choo()\napp.route('/', function (state, emit) {\n  return html`<div>Hello ${state.name}</div>`\n})\n\nvar state = { name: 'Node' }\nvar string = app.toString('/', state)\n\nconsole.log(string)\n// => '<div>Hello Node</div>'\n```\n\nWhen starting an application in the browser, it's recommended to provide the\nsame `state` object available as `window.initialState`. When the application is\nstarted, it'll be used to initialize the application state. The process of\nserver rendering, and providing an initial state on the client to create the\nexact same document is also known as \"rehydration\".\n\nFor security purposes, after `window.initialState` is used it is deleted from\nthe `window` object.\n\n```html\n<html>\n  <head>\n    <script>window.initialState = { initial: 'state' }</script>\n  </head>\n  <body>\n  </body>\n</html>\n```\n\n## Components\nFrom time to time there will arise a need to have an element in an application\nhold a self-contained state or to not rerender when the application does. This\nis common when using 3rd party libraries to e.g. display an interactive map or a\ngraph and you rely on this 3rd party library to handle modifications to the DOM.\nComponents come baked in to Choo for these kinds of situations. See\n[nanocomponent][nanocomponent] for documentation on the component class.\n\n```javascript\n// map.js\nvar html = require('choo/html')\nvar mapboxgl = require('mapbox-gl')\nvar Component = require('choo/component')\n\nmodule.exports = class Map extends Component {\n  constructor (id, state, emit) {\n    super(id)\n    this.local = state.components[id] = {}\n  }\n\n  load (element) {\n    this.map = new mapboxgl.Map({\n      container: element,\n      center: this.local.center\n    })\n  }\n\n  update (center) {\n    if (center.join() !== this.local.center.join()) {\n      this.map.setCenter(center)\n    }\n    return false\n  }\n\n  createElement (center) {\n    this.local.center = center\n    return html`<div></div>`\n  }\n}\n```\n\n```javascript\n// index.js\nvar choo = require('choo')\nvar html = require('choo/html')\nvar Map = require('./map.js')\n\nvar app = choo()\napp.route('/', mainView)\napp.mount('body')\n\nfunction mainView (state, emit) {\n  return html`\n    <body>\n      <button onclick=${onclick}>Where am i?</button>\n      ${state.cache(Map, 'my-map').render(state.center)}\n    </body>\n  `\n\n  function onclick () {\n    emit('locate')\n  }\n}\n\napp.use(function (state, emitter) {\n  state.center = [18.0704503, 59.3244897]\n  emitter.on('locate', function () {\n    window.navigator.geolocation.getCurrentPosition(function (position) {\n      state.center = [position.coords.longitude, position.coords.latitude]\n      emitter.emit('render')\n    })\n  })\n})\n```\n\n### Caching components\nWhen working with stateful components, one will need to keep track of component\ninstances – `state.cache` does just that. The component cache is a function\nwhich takes a component class and a unique id (`string`) as its first two\narguments. Any following arguments will be forwarded to the component constructor\ntogether with `state` and `emit`.\n\nThe default class cache is an LRU cache (using [nanolru][nanolru]), meaning it\nwill only hold on to a fixed amount of class instances (`100` by default) before\nstarting to evict the least-recently-used instances. This behavior can be\noverriden with [options](#app--chooopts).\n\n## Optimizations\nChoo is reasonably fast out of the box. But sometimes you might hit a scenario\nwhere a particular part of the UI slows down the application, and you want to\nspeed it up. Here are some optimizations that are possible.\n\n### Caching DOM elements\nSometimes we want to tell the algorithm to not evaluate certain nodes (and its\nchildren). This can be because we're sure they haven't changed, or perhaps\nbecause another piece of code is managing that part of the DOM tree. To achieve\nthis `nanomorph` evaluates the `.isSameNode()` method on nodes to determine if\nthey should be updated or not.\n\n```js\nvar el = html`<div>node</div>`\n\n// tell nanomorph to not compare the DOM tree if they're both divs\nel.isSameNode = function (target) {\n  return (target && target.nodeName && target.nodeName === 'DIV')\n}\n```\n\n### Reordering lists\nIt's common to work with lists of elements on the DOM. Adding, removing or\nreordering elements in a list can be rather expensive. To optimize this you can\nadd an `id` attribute to a DOM node. When reordering nodes it will compare\nnodes with the same ID against each other, resulting in far fewer re-renders.\nThis is especially potent when coupled with DOM node caching.\n\n```js\nvar el = html`\n  <section>\n    <div id=\"first\">hello</div>\n    <div id=\"second\">world</div>\n  </section>\n`\n```\n\n### Pruning dependencies\nWe use the `require('assert')` module from Node core to provide helpful error\nmessages in development. In production you probably want to strip this using\n[unassertify][unassertify].\n\nTo convert inlined HTML to valid DOM nodes we use `require('nanohtml')`. This has\noverhead during runtime, so for production environments we should unwrap this\nusing the [nanohtml transform][nanohtml].\n\nSetting up browserify transforms can sometimes be a bit of hassle; to make this\nmore convenient we recommend using [bankai build][bankai] to build your assets for production.\n\n## FAQ\n### Why is it called Choo?\nBecause I thought it sounded cute. All these programs talk about being\n_\"performant\"_, _\"rigid\"_, _\"robust\"_ - I like programming to be light, fun and\nnon-scary. Choo embraces that.\n\nAlso imagine telling some business people you chose to rewrite something\ncritical for serious bizcorp using a train themed framework.\n:steam_locomotive::train::train::train:\n\n### Is it called Choo, Choo.js or...?\nIt's called \"Choo\", though we're fine if you call it \"Choo-choo\" or\n\"Chugga-chugga-choo-choo\" too. The only time \"choo.js\" is tolerated is if /\nwhen you shimmy like you're a locomotive.\n\n### Does Choo use a virtual-dom?\nChoo uses [nanomorph][nanomorph], which diffs real DOM nodes instead of\nvirtual nodes. It turns out that [browsers are actually ridiculously good at\ndealing with DOM nodes][morphdom-bench], and it has the added benefit of\nworking with _any_ library that produces valid DOM nodes. So to put a long\nanswer short: we're using something even better.\n\n### How can I support older browsers?\nTemplate strings aren't supported in all browsers, and parsing them creates\nsignificant overhead. To optimize we recommend running `browserify` with\n[nanohtml][nanohtml] as a global transform or using [bankai][bankai] directly.\n```sh\n$ browserify -g nanohtml\n```\n\n### Is choo production ready?\nSure.\n\n## API\nThis section provides documentation on how each function in Choo works. It's\nintended to be a technical reference. If you're interested in learning choo for\nthe first time, consider reading through the [handbook][handbook] first\n:sparkles:\n\n### `app = choo([opts])`\nInitialize a new `choo` instance. `opts` can also contain the following values:\n- __opts.history:__ default: `true`. Listen for url changes through the\n  history API.\n- __opts.href:__ default: `true`. Handle all relative `<a\n  href=\"<location>\"></a>` clicks and call `emit('render')`\n- __opts.cache:__ default: `undefined`. Override default class cache used by\n  `state.cache`. Can be a a `number` (maximum number of instances in cache,\n  default `100`) or an `object` with a [nanolru][nanolru]-compatible API.\n- __opts.hash:__ default: `false`. Treat hashes in URLs as part of the pathname,\n  transforming `/foo#bar` to `/foo/bar`. This is useful if the application is\n  not mounted at the website root.\n\n### `app.use(callback(state, emitter, app))`\nCall a function and pass it a `state`, `emitter` and `app`. `emitter` is an instance\nof [nanobus](https://github.com/choojs/nanobus/). You can listen to\nmessages by calling `emitter.on()` and emit messages by calling\n`emitter.emit()`. `app` is the same Choo instance. Callbacks passed to `app.use()` are commonly referred to as\n`'stores'`.\n\nIf the callback has a `.storeName` property on it, it will be used to identify\nthe callback during tracing.\n\nSee [#events](#events) for an overview of all events.\n\n### `app.route(routeName, handler(state, emit))`\nRegister a route on the router. The handler function is passed `app.state`\nand `app.emitter.emit` as arguments. Uses [nanorouter][nanorouter] under the\nhood.\n\nSee [#routing](#routing) for an overview of how to use routing efficiently.\n\n### `app.mount(selector)`\nStart the application and mount it on the given `querySelector`,\nthe given selector can be a String or a DOM element.\n\nIn the browser, this will _replace_ the selector provided with the tree returned from `app.start()`.\nIf you want to add the app as a child to an element, use `app.start()` to obtain the tree and manually append it.\n\nOn the server, this will save the `selector` on the app instance.\nWhen doing server side rendering, you can then check the `app.selector` property to see where the render result should be inserted.\n\nReturns `this`, so you can easily export the application for server side rendering:\n\n```js\nmodule.exports = app.mount('body')\n```\n\n### `tree = app.start()`\nStart the application. Returns a tree of DOM nodes that can be mounted using\n`document.body.appendChild()`.\n\n### `app.toString(location, [state])`\nRender the application to a string. Useful for rendering on the server.\n\n### `choo/html`\nCreate DOM nodes from template string literals. Exposes\n[nanohtml](https://github.com/choojs/nanohtml). Can be optimized using\n[nanohtml][nanohtml].\n\n### `choo/html/raw`\nExposes [nanohtml/raw](https://github.com/shama/nanohtml#unescaping) helper for rendering raw HTML content.\n\n## Installation\n```sh\n$ npm install choo\n```\n\n## See Also\n- [bankai](https://github.com/choojs/bankai) - streaming asset compiler\n- [stack.gl](http://stack.gl/) - open software ecosystem for WebGL\n- [yo-yo](https://github.com/maxogden/yo-yo) - tiny library for modular UI\n- [tachyons](https://github.com/tachyons-css/tachyons) - functional CSS for\n  humans\n- [sheetify](https://github.com/stackcss/sheetify) - modular CSS bundler for\n  `browserify`\n\n## Support\nCreating a quality framework takes a lot of time. Unlike others frameworks,\nChoo is completely independently funded. We fight for our users. This does mean\nhowever that we also have to spend time working contracts to pay the bills.\nThis is where you can help: by chipping in you can ensure more time is spent\nimproving Choo rather than dealing with distractions.\n\n### Sponsors\nBecome a sponsor and help ensure the development of independent quality\nsoftware. You can help us keep the lights on, bellies full and work days sharp\nand focused on improving the state of the web. [Become a\nsponsor](https://opencollective.com/choo#sponsor)\n\n<a href=\"https://opencollective.com/choo/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/sponsor/29/avatar.svg\"></a>\n\n### Backers\nBecome a backer, and buy us a coffee (or perhaps lunch?) every month or so.\n[Become a backer](https://opencollective.com/choo#backer)\n\n<a href=\"https://opencollective.com/choo/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/choo/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/choo/backer/29/avatar.svg\"></a>\n\n## License\n[MIT](https://tldrlegal.com/license/mit-license)\n\n[nanocomponent]: https://github.com/choojs/nanocomponent\n[nanolru]: https://github.com/s3ththompson/nanolru\n[bankai]: https://github.com/choojs/bankai\n[nanohtml]: https://github.com/choojs/nanohtml\n[browserify]: https://github.com/substack/node-browserify\n[budo]: https://github.com/mattdesl/budo\n[es2020]: https://github.com/yoshuawuyts/es2020\n[handbook]: https://github.com/yoshuawuyts/choo-handbook\n[hyperx]: https://github.com/substack/hyperx\n[morphdom-bench]: https://github.com/patrick-steele-idem/morphdom#benchmarks\n[nanomorph]: https://github.com/choojs/nanomorph\n[nanorouter]: https://github.com/choojs/nanorouter\n[yo-yo]: https://github.com/maxogden/yo-yo\n[unassertify]: https://github.com/unassert-js/unassertify\n[window-performance]: https://developer.mozilla.org/en-US/docs/Web/API/Performance\n"
        },
        {
          "name": "component",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "html",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.d.ts",
          "type": "blob",
          "size": 0.9169921875,
          "content": "import Nanobus = require('nanobus')\n\nexport = Choo\n\ndeclare class Choo {\n  constructor (opts?: Choo.IChoo)\n  use (callback: (state: Choo.IState, emitter: Nanobus, app: this) => void): void\n  route (routeName: string, handler: (state: Choo.IState, emit: Nanobus['emit']) => void): void\n  mount (selector: string): void\n  start (): HTMLElement\n  toString (location: string, state?: Choo.IState): string\n}\n\ndeclare namespace Choo {\n  export interface IChoo {\n    history?: boolean\n    href?: boolean\n    hash?: boolean\n    cache?: number | ICache\n  }\n\n  export interface ICache {\n    get(id: string | number): undefined | null | any\n    set(id: string | number, element: any): void\n  }\n\n  export interface IState {\n    events: {\n      [key: string]: string\n    }\n    params: {\n      [key: string]: string\n    }\n    query?: {\n      [key: string]: string\n    }\n    href: string\n    route: string\n    title: string\n    [key: string]: any\n  }\n}\n\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 9.140625,
          "content": "var scrollToAnchor = require('scroll-to-anchor')\nvar documentReady = require('document-ready')\nvar nanotiming = require('nanotiming')\nvar nanorouter = require('nanorouter')\nvar nanomorph = require('nanomorph')\nvar nanoquery = require('nanoquery')\nvar nanohref = require('nanohref')\nvar nanoraf = require('nanoraf')\nvar nanobus = require('nanobus')\nvar assert = require('assert')\n\nvar Cache = require('./component/cache')\n\nmodule.exports = Choo\n\nvar HISTORY_OBJECT = {}\n\nfunction Choo (opts) {\n  var timing = nanotiming('choo.constructor')\n  if (!(this instanceof Choo)) return new Choo(opts)\n  opts = opts || {}\n\n  assert.equal(typeof opts, 'object', 'choo: opts should be type object')\n\n  var self = this\n\n  // define events used by choo\n  this._events = {\n    DOMCONTENTLOADED: 'DOMContentLoaded',\n    DOMTITLECHANGE: 'DOMTitleChange',\n    REPLACESTATE: 'replaceState',\n    PUSHSTATE: 'pushState',\n    NAVIGATE: 'navigate',\n    POPSTATE: 'popState',\n    RENDER: 'render'\n  }\n\n  // properties for internal use only\n  this._historyEnabled = opts.history === undefined ? true : opts.history\n  this._hrefEnabled = opts.href === undefined ? true : opts.href\n  this._hashEnabled = opts.hash === undefined ? false : opts.hash\n  this._hasWindow = typeof window !== 'undefined'\n  this._cache = opts.cache\n  this._loaded = false\n  this._stores = [ondomtitlechange]\n  this._tree = null\n\n  // state\n  var _state = {\n    events: this._events,\n    components: {}\n  }\n  if (this._hasWindow) {\n    this.state = window.initialState\n      ? Object.assign({}, window.initialState, _state)\n      : _state\n    delete window.initialState\n  } else {\n    this.state = _state\n  }\n\n  // properties that are part of the API\n  this.router = nanorouter({ curry: true })\n  this.emitter = nanobus('choo.emit')\n  this.emit = this.emitter.emit.bind(this.emitter)\n\n  // listen for title changes; available even when calling .toString()\n  if (this._hasWindow) this.state.title = document.title\n  function ondomtitlechange (state) {\n    self.emitter.prependListener(self._events.DOMTITLECHANGE, function (title) {\n      assert.equal(typeof title, 'string', 'events.DOMTitleChange: title should be type string')\n      state.title = title\n      if (self._hasWindow) document.title = title\n    })\n  }\n  timing()\n}\n\nChoo.prototype.route = function (route, handler) {\n  var routeTiming = nanotiming(\"choo.route('\" + route + \"')\")\n  assert.equal(typeof route, 'string', 'choo.route: route should be type string')\n  assert.equal(typeof handler, 'function', 'choo.handler: route should be type function')\n  this.router.on(route, handler)\n  routeTiming()\n}\n\nChoo.prototype.use = function (cb) {\n  assert.equal(typeof cb, 'function', 'choo.use: cb should be type function')\n  var self = this\n  this._stores.push(function (state) {\n    var msg = 'choo.use'\n    msg = cb.storeName ? msg + '(' + cb.storeName + ')' : msg\n    var endTiming = nanotiming(msg)\n    cb(state, self.emitter, self)\n    endTiming()\n  })\n}\n\nChoo.prototype.start = function () {\n  assert.equal(typeof window, 'object', 'choo.start: window was not found. .start() must be called in a browser, use .toString() if running in Node')\n  var startTiming = nanotiming('choo.start')\n\n  var self = this\n  if (this._historyEnabled) {\n    this.emitter.prependListener(this._events.NAVIGATE, function () {\n      self._matchRoute(self.state)\n      if (self._loaded) {\n        self.emitter.emit(self._events.RENDER)\n        setTimeout(scrollToAnchor.bind(null, window.location.hash), 0)\n      }\n    })\n\n    this.emitter.prependListener(this._events.POPSTATE, function () {\n      self.emitter.emit(self._events.NAVIGATE)\n    })\n\n    this.emitter.prependListener(this._events.PUSHSTATE, function (href) {\n      assert.equal(typeof href, 'string', 'events.pushState: href should be type string')\n      window.history.pushState(HISTORY_OBJECT, null, href)\n      self.emitter.emit(self._events.NAVIGATE)\n    })\n\n    this.emitter.prependListener(this._events.REPLACESTATE, function (href) {\n      assert.equal(typeof href, 'string', 'events.replaceState: href should be type string')\n      window.history.replaceState(HISTORY_OBJECT, null, href)\n      self.emitter.emit(self._events.NAVIGATE)\n    })\n\n    window.onpopstate = function () {\n      self.emitter.emit(self._events.POPSTATE)\n    }\n\n    if (self._hrefEnabled) {\n      nanohref(function (location) {\n        var href = location.href\n        var hash = location.hash\n        if (href === window.location.href) {\n          if (!self._hashEnabled && hash) scrollToAnchor(hash)\n          return\n        }\n        self.emitter.emit(self._events.PUSHSTATE, href)\n      })\n    }\n  }\n\n  this._setCache(this.state)\n  this._matchRoute(this.state)\n  this._stores.forEach(function (initStore) {\n    initStore(self.state)\n  })\n\n  this._tree = this._prerender(this.state)\n  assert.ok(this._tree, 'choo.start: no valid DOM node returned for location ' + this.state.href)\n\n  this.emitter.prependListener(self._events.RENDER, nanoraf(function () {\n    var renderTiming = nanotiming('choo.render')\n    var newTree = self._prerender(self.state)\n    assert.ok(newTree, 'choo.render: no valid DOM node returned for location ' + self.state.href)\n\n    assert.equal(self._tree.nodeName, newTree.nodeName, 'choo.render: The target node <' +\n      self._tree.nodeName.toLowerCase() + '> is not the same type as the new node <' +\n      newTree.nodeName.toLowerCase() + '>.')\n\n    var morphTiming = nanotiming('choo.morph')\n    nanomorph(self._tree, newTree)\n    morphTiming()\n\n    renderTiming()\n  }))\n\n  documentReady(function () {\n    self.emitter.emit(self._events.DOMCONTENTLOADED)\n    self._loaded = true\n  })\n\n  startTiming()\n  return this._tree\n}\n\nChoo.prototype.mount = function mount (selector) {\n  var mountTiming = nanotiming(\"choo.mount('\" + selector + \"')\")\n  if (typeof window !== 'object') {\n    assert.ok(typeof selector === 'string', 'choo.mount: selector should be type String')\n    this.selector = selector\n    mountTiming()\n    return this\n  }\n\n  assert.ok(typeof selector === 'string' || typeof selector === 'object', 'choo.mount: selector should be type String or HTMLElement')\n\n  var self = this\n\n  documentReady(function () {\n    var renderTiming = nanotiming('choo.render')\n    var newTree = self.start()\n    if (typeof selector === 'string') {\n      self._tree = document.querySelector(selector)\n    } else {\n      self._tree = selector\n    }\n\n    assert.ok(self._tree, 'choo.mount: could not query selector: ' + selector)\n    assert.equal(self._tree.nodeName, newTree.nodeName, 'choo.mount: The target node <' +\n      self._tree.nodeName.toLowerCase() + '> is not the same type as the new node <' +\n      newTree.nodeName.toLowerCase() + '>.')\n\n    var morphTiming = nanotiming('choo.morph')\n    nanomorph(self._tree, newTree)\n    morphTiming()\n\n    renderTiming()\n  })\n  mountTiming()\n}\n\nChoo.prototype.toString = function (location, state) {\n  state = state || {}\n  state.components = state.components || {}\n  state.events = Object.assign({}, state.events, this._events)\n\n  assert.notEqual(typeof window, 'object', 'choo.mount: window was found. .toString() must be called in Node, use .start() or .mount() if running in the browser')\n  assert.equal(typeof location, 'string', 'choo.toString: location should be type string')\n  assert.equal(typeof state, 'object', 'choo.toString: state should be type object')\n\n  this._setCache(state)\n  this._matchRoute(state, location)\n  this.emitter.removeAllListeners()\n  this._stores.forEach(function (initStore) {\n    initStore(state)\n  })\n\n  var html = this._prerender(state)\n  assert.ok(html, 'choo.toString: no valid value returned for the route ' + location)\n  assert(!Array.isArray(html), 'choo.toString: return value was an array for the route ' + location)\n  return typeof html.outerHTML === 'string' ? html.outerHTML : html.toString()\n}\n\nChoo.prototype._matchRoute = function (state, locationOverride) {\n  var location, queryString\n  if (locationOverride) {\n    location = locationOverride.replace(/\\?.+$/, '').replace(/\\/$/, '')\n    if (!this._hashEnabled) location = location.replace(/#.+$/, '')\n    queryString = locationOverride\n  } else {\n    location = window.location.pathname.replace(/\\/$/, '')\n    if (this._hashEnabled) location += window.location.hash.replace(/^#/, '/')\n    queryString = window.location.search\n  }\n  var matched = this.router.match(location)\n  this._handler = matched.cb\n  state.href = location\n  state.query = nanoquery(queryString)\n  state.route = matched.route\n  state.params = matched.params\n}\n\nChoo.prototype._prerender = function (state) {\n  var routeTiming = nanotiming(\"choo.prerender('\" + state.route + \"')\")\n  var res = this._handler(state, this.emit)\n  routeTiming()\n  return res\n}\n\nChoo.prototype._setCache = function (state) {\n  var cache = new Cache(state, this.emitter.emit.bind(this.emitter), this._cache)\n  state.cache = renderComponent\n\n  function renderComponent (Component, id) {\n    assert.equal(typeof Component, 'function', 'choo.state.cache: Component should be type function')\n    var args = []\n    for (var i = 0, len = arguments.length; i < len; i++) {\n      args.push(arguments[i])\n    }\n    return cache.render.apply(cache, args)\n  }\n\n  // When the state gets stringified, make sure `state.cache` isn't\n  // stringified too.\n  renderComponent.toJSON = function () {\n    return null\n  }\n}\n"
        },
        {
          "name": "index.test-d.ts",
          "type": "blob",
          "size": 0.7060546875,
          "content": "import { expectAssignable, expectType } from 'tsd'\nimport Choo = require('.')\n\nnew Choo({})\nnew Choo()\n\nnew Choo({ cache: 100 })\nnew Choo({\n  cache: new Map()\n})\nnew Choo({\n  cache: {\n    get: (id) => null,\n    set: (id, value) => expectType<any>(value)\n  }\n})\n\nconst app = new Choo({\n  history: false,\n  href: true,\n})\n\napp.use((state, emitter) => {\n  state.title = 'choo choo'\n  emitter.on(state.events.DOMCONTENTLOADED, () => {\n    emitter.emit('example')\n  })\n})\n\napp.route('/', (state, emit) => {\n  expectAssignable<object>(state.params)\n  expectType<string>(state.href)\n  expectType<string>(state.route)\n  expectType<string>(state.title)\n  emit('example')\n})\n\nexpectType<string>(app.toString('/'))\n\napp.mount('body')\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.1875,
          "content": "{\n  \"name\": \"choo\",\n  \"version\": \"7.1.0\",\n  \"description\": \"A 4kb framework for creating sturdy frontend applications\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"html/index.js\",\n    \"html/raw.js\",\n    \"html/index.d.ts\",\n    \"component/cache.js\",\n    \"component/index.js\",\n    \"dist\",\n    \"example\"\n  ],\n  \"browser\": {\n    \"assert\": \"nanoassert\"\n  },\n  \"scripts\": {\n    \"build\": \"mkdir -p dist/ && browserify index -s Choo -p bundle-collapser/plugin > dist/bundle.js && browserify index -s Choo -p tinyify > dist/bundle.min.js && cat dist/bundle.min.js | gzip --best --stdout | wc -c | pretty-bytes\",\n    \"deps\": \"dependency-check --entry ./html/index.js . && dependency-check . --extra --no-dev --entry ./html/index.js --entry ./component/index.js -i nanoassert\",\n    \"inspect\": \"browserify --full-paths index -p tinyify | discify --open\",\n    \"prepublishOnly\": \"npm run build\",\n    \"start\": \"bankai start example\",\n    \"test\": \"standard && npm run deps && npm run test:types && npm run test:node && npm run test:browser\",\n    \"test:types\": \"tsd\",\n    \"test:node\": \"node test/node.js | tap-format-spec\",\n    \"test:browser\": \"browserify test/browser.js | tape-run | tap-format-spec\"\n  },\n  \"repository\": \"choojs/choo\",\n  \"keywords\": [\n    \"client\",\n    \"frontend\",\n    \"framework\",\n    \"minimal\",\n    \"composable\",\n    \"tiny\"\n  ],\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"document-ready\": \"^2.0.1\",\n    \"nanoassert\": \"^1.1.0\",\n    \"nanobus\": \"^4.4.0\",\n    \"nanocomponent\": \"^6.5.0\",\n    \"nanohref\": \"^3.0.0\",\n    \"nanohtml\": \"^1.1.0\",\n    \"nanolru\": \"^1.0.0\",\n    \"nanomorph\": \"^5.1.2\",\n    \"nanoquery\": \"^1.1.0\",\n    \"nanoraf\": \"^3.0.0\",\n    \"nanorouter\": \"^4.0.0\",\n    \"nanotiming\": \"^7.0.0\",\n    \"scroll-to-anchor\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"@tap-format/spec\": \"^0.2.0\",\n    \"browserify\": \"^16.2.2\",\n    \"bundle-collapser\": \"^1.2.1\",\n    \"dependency-check\": \"^3.1.0\",\n    \"disc\": \"^1.3.3\",\n    \"hyperscript\": \"^2.0.2\",\n    \"pretty-bytes-cli\": \"^2.0.0\",\n    \"spok\": \"^0.9.1\",\n    \"standard\": \"^11.0.1\",\n    \"tape\": \"^4.6.3\",\n    \"tape-run\": \"^6.0.0\",\n    \"tinyify\": \"^2.2.0\",\n    \"tsd\": \"^0.11.0\"\n  },\n  \"tsd\": {\n    \"compilerOptions\": {\n      \"lib\": [\n        \"DOM\"\n      ]\n    }\n  }\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}