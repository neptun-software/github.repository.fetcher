{
  "metadata": {
    "timestamp": 1736562926183,
    "page": 520,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ecomfe/fontmin",
      "stars": 5851,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2197265625,
          "content": "root = true\n\n[*]\nindent_style = space\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[package.json]\nindent_style = space\nindent_size = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.09375,
          "content": ".DS_Store\nnpm-debug.log\nnode_modules\nfonts/dest*\n/coverage\npackage-lock.json\ntest/ts/example.js\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.1171875,
          "content": ".DS_Store\n.editorconfig\n.travis.yml\nnpm-debug.log\nfonts/\ntest/\nnode_modules/\ncoverage/\nfontmin.png\nTODO.md\nCHANGELOG.md\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.048828125,
          "content": "language: node_js\nnode_js:\n  - 'lts/*'\n  - 'node'\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.734375,
          "content": "# Change Log\n\n## 1.0.1 (2023-8-14)\n- support esm import\n- add dts support\n\n## 0.9.9 (2021-9-10)\n- merge #75, #76, #86, #92\n- update dependences\n\n## 0.9.8 (2019-7-18)\n- merge #34, #73\n- fix #72 UTF-16-encoded code points\n- update ttf2woff2@3\n- fix (node:48024) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues.\n\n## 0.9.7 (2018-5-11)\n- fix #31 #40 #39 #43 #68\n- add woff2 support\n- nodejs >= 8\n- update dependences\n\n## 0.9.6 (2016-5-6)\n- fix #31 add trim optional\n- add coverage\n\n## 0.9.5 (2016-5-5)\n- merge #33 fix File clone bug\n- update dependences\n\n## 0.9.3 (2016-4-6)\n- fix #28 subset of non-existent character\n- merge #29 Add fontFamily transform function support for css plugin\n- update dependences\n\n## 0.9.2 (2016-1-5)\n- fix #26 parse name table in ASCII\n\n## 0.9.1 (2015-12-22)\n- subset at fonteditor-core\n- performance optimization thx @akira-cn\n\n## 0.9.0-alpha-3 (2015-07-30)\n\n- fix css plugin glyf bug\n- up dependence fonteditor-core\n\n## 0.9.0-alpha-2 (2015-05-20)\n\n- css plugin add option local\n\n## 0.9.0-alpha-1 (2015-05-06)\n\n- add otf2ttf plugin\n\n## 0.8.1 (2015-05-05)\n\n- svgs2ttf plugin add option fontName\n\n## 0.8.0 (2015-04-27)\n\n- add svg2ttf plugin\n- add svgs2ttf plugin\n\n## 0.7.3 (2015-04-22)\n\n- glyph plugin add option hinting: keep ttf hint info (fpgm, prep, cvt). default = true. [\\#4](https://github.com/ecomfe/fontmin/issues/4)\n\n## 0.7.2 (2015-04-20)\n\n- css plugin add option asFileName: rewrite fontFamily as filename force. default = false\n- i18n doc zh-tw, jp, kr, en\n\n## 0.7.1 (2015-04-20)\n\n- css plugin add option fontPath: location of font file. [gulp-fontmin\\#1](https://github.com/ecomfe/gulp-fontmin/issues/1)\n\n## 0.7 (2015-04-16)\n\n- plugins option clone as default\n\n## 0.6 (2015-04-13)\n\n- first release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.068359375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 junmer <junmer@foxmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.705078125,
          "content": "\n<p align=\"center\">\n    <a href=\"http://ecomfe.github.io/fontmin/\">\n        <img height=\"128\" width=\"128\" src=\"https://raw.githubusercontent.com/ecomfe/fontmin/master/fontmin.png\">\n    </a>\n</p>\n\n# fontmin\n**Minify font seamlessly**\n\n[![NPM version][npm-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![Downloads][downloads-image]][npm-url]\n[![Dependencies][dep-image]][dep-url]\n[![Font support][font-image]][font-url]\n\n## Homepage\n\n- [简体中文](http://ecomfe.github.io/fontmin/)\n- [繁體中文](http://ecomfe.github.io/fontmin/tw)\n- [日本語](http://ecomfe.github.io/fontmin/jp)\n- [한국어](http://ecomfe.github.io/fontmin/kr)\n- [English](http://ecomfe.github.io/fontmin/en)\n\n## Install\n\n```sh\n$ npm install --save fontmin\n```\n\n### Notice\n\n**fontmin v2.x only support ES Modules, and run on Node v16+.**\n\nIf you need to use CommonJS version, please install `fontmin v1.x`:\n\n> npm install --save fontmin@1\n\n## Usage\n\n```js\nimport Fontmin from 'fontmin';\n\nconst fontmin = new Fontmin()\n    .src('fonts/*.ttf')\n    .dest('build/fonts');\n\nfontmin.run(function (err, files) {\n    if (err) {\n        throw err;\n    }\n\n    console.log(files[0]);\n    // => { contents: <Buffer 00 01 00 ...> }\n});\n```\n\nYou can use [gulp-rename](https://github.com/hparra/gulp-rename) to rename your files:\n\n```js\nimport Fontmin from 'fontmin';\nconst rename = require('gulp-rename');\n\nconst fontmin = new Fontmin()\n    .src('fonts/big.ttf')\n    .use(rename('small.ttf'));\n```\n\n## API\n\n### new Fontmin()\n\nCreates a new `Fontmin` instance.\n\n### .src(file)\n\nType: `Array|Buffer|String`\n\nSet the files to be optimized. Takes a buffer, glob string or an array of glob strings\nas argument.\n\n### .dest(folder)\n\nType: `String`\n\nSet the destination folder to where your files will be written. If you don't set\nany destination no files will be written.\n\n### .use(plugin)\n\nType: `Function`\n\nAdd a `plugin` to the middleware stack.\n\n### .run(cb)\n\nType: `Function`\n\nOptimize your files with the given settings.\n\n#### cb(err, files, stream)\n\nThe callback will return an array of vinyl files in `files` and a Readable/Writable\nstream in `stream`\n\n## Plugins\n\nThe following plugins are bundled with fontmin:\n\n* [glyph](#glyph) — Compress ttf by glyph.\n* [ttf2eot](#ttf2eot) — Convert ttf to eot.\n* [ttf2woff](#ttf2woff) — Convert ttf to woff.\n* [ttf2woff2](#ttf2woff2) — Convert ttf to woff2.\n* [ttf2svg](#ttf2svg) — Convert ttf to svg.\n* [css](#css) — Generate css from ttf, often used to make iconfont.\n* [svg2ttf](#svg2ttf) — Convert font format svg to ttf.\n* [svgs2ttf](#svgs2ttf) — Concat svg files to a ttf, just like css sprite.\n* [otf2ttf](#otf2ttf) — Convert otf to ttf.\n\n### .glyph()\n\nCompress ttf by glyph.\n\n```js\nimport Fontmin from 'fontmin';\n\nconst fontmin = new Fontmin()\n    .use(Fontmin.glyph({\n        text: '天地玄黄 宇宙洪荒',\n        hinting: false         // keep ttf hint info (fpgm, prep, cvt). default = true\n    }));\n```\n\n### .ttf2eot()\n\nConvert ttf to eot.\n\n```js\nimport Fontmin from 'fontmin';\n\nconst fontmin = new Fontmin()\n    .use(Fontmin.ttf2eot());\n```\n\n### .ttf2woff()\n\nConvert ttf to woff.\n\n```js\nimport Fontmin from 'fontmin';\n\nconst fontmin = new Fontmin()\n    .use(Fontmin.ttf2woff({\n        deflate: true           // deflate woff. default = false\n    }));\n```\n\n### .ttf2woff2()\n\nConvert ttf to woff2.\n\n```js\nimport Fontmin from 'fontmin';\n\nconst fontmin = new Fontmin()\n    .use(Fontmin.ttf2woff2());\n```\n\n### .ttf2svg()\n\nConvert ttf to svg.\n\nyou can use [imagemin-svgo](https://github.com/imagemin/imagemin-svgo) to compress svg:\n\n```js\nimport Fontmin from 'fontmin';\nconst svgo = require('imagemin-svgo');\n\nconst fontmin = new Fontmin()\n    .use(Fontmin.ttf2svg())\n    .use(svgo());\n\n```\n\n### .css()\n\nGenerate css from ttf, often used to make iconfont.\n\n```js\nimport Fontmin from 'fontmin';\n\nconst fontmin = new Fontmin()\n    .use(Fontmin.css({\n        fontPath: './',         // location of font file\n        base64: true,           // inject base64 data:application/x-font-ttf; (gzip font with css).\n                                // default = false\n        glyph: true,            // generate class for each glyph. default = false\n        iconPrefix: 'my-icon',  // class prefix, only work when glyph is `true`. default to \"icon\"\n        fontFamily: 'myfont',   // custom fontFamily, default to filename or get from analysed ttf file\n        asFileName: false,      // rewrite fontFamily as filename force. default = false\n        local: true             // boolean to add local font. default = false\n    }));\n```\n\nAlternatively, a transform function can be passed as `fontFamily` option.\n```js\nimport Fontmin from 'fontmin';\n\nconst fontmin = new Fontmin()\n    .use(Fontmin.css({\n        // ...\n        fontFamily: function(fontInfo, ttf) {\n          return \"Transformed Font Family Name\"\n        },\n        // ...\n    }));\n```\n\n### .svg2ttf()\n\nConvert font format svg to ttf.\n\n```js\nimport Fontmin from 'fontmin';\n\nconst fontmin = new Fontmin()\n    .src('font.svg')\n    .use(Fontmin.svg2ttf());\n```\n\n### .svgs2ttf()\n\nConcat svg files to a ttf, just like css sprite.\n\nawesome work with [css](#css) plugin:\n\n```js\nimport Fontmin from 'fontmin';\n\nconst fontmin = new Fontmin()\n    .src('svgs/*.svg')\n    .use(Fontmin.svgs2ttf('font.ttf', {fontName: 'iconfont'}))\n    .use(Fontmin.css({\n        glyph: true\n    }));\n```\n\n### .otf2ttf()\n\nConvert otf to ttf.\n\n```js\nimport Fontmin from 'fontmin';\n\nconst fontmin = new Fontmin()\n    .src('fonts/*.otf')\n    .use(Fontmin.otf2ttf());\n```\n\n## CLI\n\n```bash\n$ npm install -g fontmin\n```\n\n```sh\n$ fontmin --help\n\n  Usage\n    $ fontmin <file> [<output>]\n    $ fontmin <directory> [<output>]\n    $ fontmin <file> > <output>\n    $ cat <file> | fontmin > <output>\n\n  Example\n    $ fontmin fonts/* build\n    $ fontmin fonts build\n    $ fontmin foo.ttf > foo-optimized.ttf\n    $ cat foo.ttf | fontmin > foo-optimized.ttf\n\n  Options\n    -t, --text                          require glyphs by text\n    -b, --basic-text                    require glyphs with base chars\n    -d, --deflate-woff                  deflate woff\n    --font-family                       font-family for @font-face CSS\n    --css-glyph                         generate class for each glyf. default = false\n    -T, --show-time                     show time fontmin cost\n```\n\nyou can use `curl` to generate font for websites running on PHP, ASP, Rails and more:\n\n```sh\n$ text=`curl www.baidu.com` && fontmin -t \"$text\" font.ttf\n```\nor you can use [html-to-text](https://www.npmjs.com/package/html-to-text) to make it smaller:\n\n```sh\n$ npm install -g html-to-text\n$ text=`curl www.baidu.com | html-to-text` && fontmin -t \"$text\" font.ttf\n```\n\nwhat is more, you can use [phantom-fetch-cli](https://www.npmjs.com/package/phantom-fetch-cli) to generate font for `SPA` running JS template:\n\n```sh\n$ npm install -g phantom-fetch-cli\n$ text=`phantom-fetch http://www.chinaw3c.org` && fontmin -t \"$text\" font.ttf\n```\n\n## Related\n\n- [fontmin-app](https://github.com/ecomfe/fontmin-app)\n- [gulp-fontmin](https://github.com/ecomfe/gulp-fontmin)\n- [fonteditor](https://github.com/ecomfe/fonteditor)\n\n## Thanks\n\n- [imagemin](https://github.com/imagemin/imagemin)\n- [free chinese font](http://zenozeng.github.io/Free-Chinese-Fonts/)\n- [浙江民间书刻体][font-url]\n\n## License\n\nMIT © [fontmin](https://raw.githubusercontent.com/ecomfe/fontmin/master/LICENSE)\n\n\n[downloads-image]: http://img.shields.io/npm/dm/fontmin.svg\n[npm-url]: https://npmjs.org/package/fontmin\n[npm-image]: http://img.shields.io/npm/v/fontmin.svg\n\n[travis-url]: https://travis-ci.org/ecomfe/fontmin\n[travis-image]: http://img.shields.io/travis/ecomfe/fontmin.svg\n\n[dep-url]: https://david-dm.org/ecomfe/fontmin\n[dep-image]: http://img.shields.io/david/ecomfe/fontmin.svg\n\n[font-image]: https://img.shields.io/badge/font-eonway-blue.svg\n[font-url]: http://weibo.com/eonway\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 0.60546875,
          "content": "TODO\n===\n\n- [x] glyph plugin\n- [x] ttf2eot plugin\n- [x] ttf2woff plugin\n- [x] ttf2svg plugin\n- [x] cli\n- [x] test\n- [x] travis ci\n- [x] <del>independent connect middleware</del>\n- [x] <del>independent koa middleware</del>\n- [x] refactor plugin code \n- [x] font-face css generator\n- [x] ttf2woff2\n- [ ] use fonteditor-core builtin ttf2woff2\n- [x] otf2ttf\n- [x] app -> [fontmin-app](https://github.com/ecomfe/fontmin-app)\n- [x] <del>ttfmin, only analysis cmap table, get glyph by buffer offset</del>\n- [x] get font text from web page - cli\n- [x] svgs, merge svgs into one svg\n- [x] svg2ttf\n- [ ] glyph plugin support otf \n"
        },
        {
          "name": "cli.js",
          "type": "blob",
          "size": 3.544921875,
          "content": "#!/usr/bin/env node\n\n/**\n * @file cli\n * @author junmer\n */\n\n/* eslint-env node */\n\nimport * as fs from 'fs';\nimport meow from 'meow';\nimport * as path from 'path';\nimport stdin from 'get-stdin';\nimport Fontmin from './index.js';\nimport _ from 'lodash';\n\nvar cli = meow({\n    importMeta: import.meta,\n    help: [\n        'Usage',\n        '  $ fontmin <file> [<output>]',\n        '  $ fontmin <directory> [<output>]',\n        '  $ fontmin <file> > <output>',\n        '  $ cat <file> | fontmin > <output>',\n        '',\n        'Example',\n        '  $ fontmin fonts/* build',\n        '  $ fontmin fonts build',\n        '  $ fontmin foo.ttf > foo-optimized.ttf',\n        '  $ cat foo.ttf | fontmin > foo-optimized.ttf',\n        '',\n        'Options',\n        '  -t, --text                          require glyphs by text',\n        '  -b, --basic-text                    require glyphs with base chars',\n        '  -d, --deflate-woff                  deflate woff',\n        '  --font-family                       font-family for @font-face CSS',\n        '  --css-glyph                         generate class for each glyf. default = false',\n        '  -T, --show-time                     show time fontmin cost'\n    ].join('\\n'),\n    flags: {\n        basicText: { type: 'boolean', shortFlag: 'b' },\n        showTime: { type: 'boolean', shortFlag: 'T' },\n        deflateWoff: { type: 'boolean', shortFlag: 'd' },\n        cssGlyph: { type: 'boolean' },\n        text: { type: 'string', shortFlag: 't' },\n        fontFamily: { type: 'string' },\n    },\n});\n\nfunction isFile(path) {\n    if (/^[^\\s]+\\.\\w*$/.test(path)) {\n        return true;\n    }\n\n    try {\n        return fs.statSync(path).isFile();\n    }\n    catch (err) {\n        return false;\n    }\n}\n\n\nfunction run(src, dest) {\n\n    cli.flags.showTime && console.time('fontmin use');\n\n    var pluginOpts = _.extend(\n        {},\n        cli.flags,\n        {\n            deflate: cli.flags.deflateWoff,\n            glyph: cli.flags.cssGlyph\n        }\n    );\n\n    var fontmin = new Fontmin()\n        .src(src)\n        .use(Fontmin.otf2ttf(pluginOpts))\n        .use(Fontmin.glyph(pluginOpts))\n        .use(Fontmin.ttf2eot(pluginOpts))\n        .use(Fontmin.ttf2svg(pluginOpts))\n        .use(Fontmin.ttf2woff(pluginOpts))\n        .use(Fontmin.ttf2woff2(pluginOpts))\n        .use(Fontmin.css(pluginOpts));\n\n    if (process.stdout.isTTY) {\n        fontmin.dest(dest ? dest : 'build');\n    }\n\n    fontmin.run(function (err, files) {\n        if (err) {\n            console.error(err.stack || err);\n            process.exit(1);\n        }\n\n        if (!process.stdout.isTTY) {\n            files.forEach(function (file) {\n                process.stdout.write(file.contents);\n            });\n        }\n\n        cli.flags.showTime && console.timeEnd('fontmin use');\n    });\n}\n\nif (process.stdin.isTTY) {\n    var src = cli.input;\n    var dest;\n\n    if (!cli.input.length) {\n        console.error([\n            'Provide at least one file to optimize',\n            '',\n            'Example',\n            '  fontmin font/* build',\n            '  fontmin foo.ttf > foo-optimized.ttf',\n            '  cat foo.ttf | fontmin > foo-optimized.ttf',\n            '',\n            'See `fontmin --help` for more information.'\n        ].join('\\n'));\n\n        process.exit(1);\n    }\n\n    if (src.length > 1 && !isFile(src[src.length - 1])) {\n        dest = src[src.length - 1];\n        src.pop();\n    }\n\n    src = src.map(function (s) {\n        if (!isFile(s) && fs.existsSync(s)) {\n            return path.join(s, '**/*');\n        }\n\n        return s;\n    });\n\n    run(src, dest);\n}\nelse {\n    stdin.buffer(run);\n}\n"
        },
        {
          "name": "fontmin.png",
          "type": "blob",
          "size": 35.9404296875,
          "content": null
        },
        {
          "name": "fonts",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.d.ts",
          "type": "blob",
          "size": 3.8876953125,
          "content": "/**\n * @file fontmin\n * @author kekee000(kekee000@gmail.com)\n */\nimport {Transform} from 'stream';\nimport {TTF} from 'fonteditor-core'\n\ntype PluginDesc = (...args: any[]) => Transform;\ntype InternalPlugin<T extends Record<string, any> = {}> = (opts?: T) => PluginDesc;\n\ninterface GlyphPluginOptions {\n    /**\n     * use this text to generate compressed font\n     */\n    text: string;\n    /**\n     * add basic chars to glyph, default false\n     * @example \"!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\"\n     */\n    basicText?: boolean;\n    /**\n     * keep gylph hinting, defaul true\n     */\n    hinting?: boolean;\n    /**\n     * use other plugin\n     */\n    use?: PluginDesc;\n}\n\ninterface FontInfo {\n    fontFile: string;\n    fontPath: string;\n    base64: string;\n    glyph: boolean;\n    iconPrefix: string;\n    local: boolean;\n}\n\ninterface CssPluginOptions {\n    /**\n     * generate class for each glyph. default = false\n     */\n    glyph?: boolean;\n    /**\n     *  inject base64 data:application/x-font-ttf; (gzip font with css). default = false\n     */\n    base64?: boolean;\n    /**\n     * class prefix, only work when glyph is `true`. default = \"icon\"\n     */\n    iconPrefix?: string;\n    /**\n     * rewrite fontFamily from filename force. default = false\n     */\n    asFileName?: boolean;\n    /**\n     * location of font file\n     */\n    fontPath?: string;\n    /**\n     * custom fontFamily, default = ttf.fontFamily or filename\n     *\n     * if opts.fontFamily is funciton, then fontFamily will be function return value\n     */\n    fontFamily?: string | ((fontInfo: FontInfo, ttf: TTF.TTFObject) => string);\n    /**\n     *  add local font. default = false\n     */\n    local?: boolean;\n}\n\ninterface Svgs2ttfPluginOptions {\n    /**\n     * set svg font name\n     */\n    fontName?: string;\n}\n\ndeclare namespace Fontmin {\n    /*\n     * get font subset with giving text\n     */\n    const glyph: InternalPlugin<GlyphPluginOptions>;\n\n    /*\n     * convert ttf to eot\n     */\n    const ttf2eot: InternalPlugin;\n\n    /*\n     * convert ttf to woff\n     */\n    const ttf2woff: InternalPlugin<{\n        /**\n         * use deflate to transform woff, default false\n         */\n        deflate: boolean;\n    }>;\n\n    /*\n     * convert ttf to woff2\n     */\n    const ttf2woff2: InternalPlugin;\n\n    /*\n     * convert ttf to svg text\n     */\n    const ttf2svg: InternalPlugin;\n\n    /*\n     * Generate css from ttf, often used to make iconfont.\n     */\n    const css: InternalPlugin<CssPluginOptions>;\n\n    /**\n     * convert font format svg to ttf\n     */\n    const svg2ttf: InternalPlugin<{hinting?: boolean}>;\n\n    /**\n     * concat svg files to a ttf, just like css sprite\n     */\n    const svgs2ttf: (file: string, opts?: Svgs2ttfPluginOptions) => PluginDesc;\n\n    /**\n     * convert otf to ttf\n     */\n    const otf2ttf: InternalPlugin;\n}\n\ntype PluginNames = keyof typeof Fontmin;\n\ndeclare class Fontmin {\n    static plugins: PluginNames[];\n    /**\n     * Get or set the source files\n     * @param file files to be optimized\n     */\n    src(src: ArrayLike<number> | Buffer | string): this;\n    /**\n     * Get or set the destination folder\n     * @param dir folder to written\n     */\n    dest(dest: string): this;\n\n    /**\n     * Add a plugin to the middleware stack\n     * @param plugin plugin function\n     */\n    use(plugin: PluginDesc): this;\n\n    /**\n     * run Optimize files with callback\n     * @param callback plugin function\n     */\n    run(callback: (e: Error, files: Buffer[]) => void): Transform;\n\n    /**\n     * run Optimize files with return Promise\n     */\n    runAsync(): Promise<Buffer[]>;\n}\n\nexport default Fontmin;\n\nexport const mime:  {\n    '.*': 'application/octet-stream',\n    'ttf': 'application/font-sfnt',\n    'otf': 'application/font-sfnt',\n    'woff': 'application/font-woff',\n    'woff2': 'application/font-woff2',\n    'eot': 'application/octet-stream',\n    'svg': 'image/svg+xml',\n    'svgz': 'image/svg+xml'\n};\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 3.939453125,
          "content": "/**\n * @file fontmin\n * @author junmer\n */\n\n/* eslint-env node */\n\nimport combine from 'stream-combiner';\nimport concat from 'concat-stream';\nimport { EventEmitter } from 'events';\nimport { inherits } from 'util';\nimport * as bufferToVinyl from 'buffer-to-vinyl';\nimport vfs from 'vinyl-fs';\n\nimport * as util from './lib/util.js';\nimport mime from './lib/mime-types.js';\n\nimport glyph from './plugins/glyph.js';\nimport ttf2eot from './plugins/ttf2eot.js';\nimport ttf2woff from './plugins/ttf2woff.js';\nimport ttf2woff2 from './plugins/ttf2woff2.js';\nimport ttf2svg from './plugins/ttf2svg.js';\nimport css from './plugins/css.js';\nimport svg2ttf from './plugins/svg2ttf.js';\nimport svgs2ttf from './plugins/svgs2ttf.js';\nimport otf2ttf from './plugins/otf2ttf.js';\n\n/**\n * Initialize Fontmin\n *\n * @constructor\n * @api public\n */\nfunction Fontmin() {\n    if (!(this instanceof Fontmin)) {\n        return new Fontmin();\n    }\n\n    EventEmitter.call(this);\n    this.streams = [];\n}\n\n/**\n * Inherit from `EventEmitter`\n * @type {Class}\n */\ninherits(Fontmin, EventEmitter);\n\n/**\n * Get or set the source files\n *\n * @param {Array|Buffer|string} file files to be optimized\n * @return {Object} fontmin\n * @api public\n */\nFontmin.prototype.src = function (file) {\n    if (!arguments.length) {\n        return this._src;\n    }\n\n    this._src = arguments;\n    return this;\n};\n\n/**\n * Get or set the destination folder\n *\n * @param {string} dir folder to written\n * @return {Object} fontmin\n * @api public\n */\nFontmin.prototype.dest = function (dir) {\n    if (!arguments.length) {\n        return this._dest;\n    }\n\n    this._dest = arguments;\n    return this;\n};\n\n/**\n * Add a plugin to the middleware stack\n *\n * @param {Function} plugin plugin\n * @return {Object} fontmin\n * @api public\n */\nFontmin.prototype.use = function (plugin) {\n    this.streams.push(typeof plugin === 'function' ? plugin() : plugin);\n    return this;\n};\n\n/**\n * Optimize files\n *\n * @param {Function} cb callback\n * @return {Stream} file stream\n * @api public\n */\nFontmin.prototype.run = function (cb) {\n    cb = cb || function () {};\n\n    var stream = this.createStream();\n\n    stream.on('error', cb);\n    stream.pipe(concat(cb.bind(null, null)));\n\n    return stream;\n};\n\n/**\n * run Optimize files with return Promise\n *\n * @return {Array<Buffer>} file result\n * @api public\n */\nFontmin.prototype.runAsync = function () {\n    return new Promise((resolve, reject) => {\n        var stream = this.createStream();\n        stream.on('error', reject);\n\n        stream.pipe(concat(resolve));\n    });\n};\n\n\n/**\n * Create stream\n *\n * @return {Stream} file stream\n * @api private\n */\nFontmin.prototype.createStream = function () {\n    this.streams.unshift(this.getFiles());\n\n    if (this.streams.length === 1) {\n        this.use(Fontmin.otf2ttf());\n        this.use(Fontmin.ttf2eot());\n        this.use(Fontmin.ttf2woff());\n        this.use(Fontmin.ttf2woff2());\n        this.use(Fontmin.ttf2svg());\n        this.use(Fontmin.css());\n    }\n\n    if (this.dest()) {\n        this.streams.push(\n            vfs.dest.apply(vfs, this.dest())\n        );\n    }\n\n    return combine(this.streams);\n};\n\n/**\n * Get files\n *\n * @return {Stream} file stream\n * @api private\n */\nFontmin.prototype.getFiles = function () {\n\n    if (Buffer.isBuffer(this._src[0])) {\n        return bufferToVinyl.stream(this._src[0]);\n    }\n\n    var [src, options] = this.src();\n    return vfs.src(src, {encoding: false, ...options});\n};\n\n/**\n * plugins\n *\n * @type {Array}\n */\nFontmin.plugins = [\n    'glyph',\n    'ttf2eot',\n    'ttf2woff',\n    'ttf2woff2',\n    'ttf2svg',\n    'css',\n    'svg2ttf',\n    'svgs2ttf',\n    'otf2ttf'\n];\n\n// export pkged plugins\nFontmin.glyph = glyph;\nFontmin.ttf2eot = ttf2eot;\nFontmin.ttf2woff = ttf2woff;\nFontmin.ttf2woff2 = ttf2woff2;\nFontmin.ttf2svg = ttf2svg;\nFontmin.css = css;\nFontmin.svg2ttf = svg2ttf;\nFontmin.svgs2ttf = svgs2ttf;\nFontmin.otf2ttf = otf2ttf;\n\n/**\n * Module exports\n */\n\nexport { util, mime };\nexport default Fontmin;\nFontmin.util = util;\nFontmin.mime = mime;\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.5791015625,
          "content": "{\n  \"name\": \"fontmin\",\n  \"version\": \"2.0.0\",\n  \"description\": \"Minify font seamlessly, font subsetter, webfont (eot, woff, svg) converter.\",\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"keywords\": [\n    \"font\",\n    \"webfont\",\n    \"icon\",\n    \"iconfont\",\n    \"font-face\",\n    \"compress\",\n    \"minify\",\n    \"font-cli\",\n    \"otf\",\n    \"ttf\",\n    \"woff\",\n    \"woff2\",\n    \"eot\",\n    \"svg\",\n    \"ttf2eot\",\n    \"ttf2woff\",\n    \"ttf2woff2\",\n    \"ttf2svg\",\n    \"svg2ttf\",\n    \"css\",\n    \"base64\"\n  ],\n  \"author\": \"junmer\",\n  \"license\": \"MIT\",\n  \"repository\": \"ecomfe/fontmin\",\n  \"engines\": {\n    \"node\": \">=16\"\n  },\n  \"bin\": {\n    \"fontmin\": \"cli.js\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha test/*.spec.js\",\n    \"coverage\": \"c8 mocha --reporter spec --check-leaks test/*.spec.js\"\n  },\n  \"exports\": {\n    \"require\": \"./index.js\",\n    \"import\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"@types/node\": \"*\",\n    \"@types/through2\": \"^2.0.38\",\n    \"b3b\": \"^0.0.1\",\n    \"buffer-to-vinyl\": \"^1.0.0\",\n    \"code-points\": \"^2.0.0-1\",\n    \"concat-stream\": \"^2.0.0\",\n    \"fonteditor-core\": \"^2.4.0\",\n    \"get-stdin\": \"^9.0.0\",\n    \"is-otf\": \"^0.1.2\",\n    \"is-svg\": \"^5.1.0\",\n    \"is-ttf\": \"^0.2.2\",\n    \"lodash\": \"^4.17.10\",\n    \"meow\": \"^13.2.0\",\n    \"pako\": \"^2.0.3\",\n    \"replace-ext\": \"^2.0.0\",\n    \"stream-combiner\": \"^0.2.1\",\n    \"through2\": \"^4.0.2\",\n    \"ttf2woff2\": \"^6.0.1\",\n    \"vinyl-fs\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"c8\": \"^10.1.2\",\n    \"chai\": \"^5.1.2\",\n    \"gulp-clean\": \"^0.4.0\",\n    \"is-eot\": \"^1.0.0\",\n    \"is-woff\": \"^1.0.1\",\n    \"is-woff2\": \"^1.0.0\",\n    \"mocha\": \"^10.8.2\"\n  }\n}\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}