{
  "metadata": {
    "timestamp": 1736563049658,
    "page": 682,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "alexlenail/NN-SVG",
      "stars": 5235,
      "defaultBranch": "master",
      "files": [
        {
          "name": "AlexNet.html",
          "type": "blob",
          "size": 24.6240234375,
          "content": "<!doctype html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\n<head>\n    <!-- Global site tag (gtag.js) - Google Analytics -->\n    <script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-119008715-1\"></script>\n    <script>\n        window.dataLayer = window.dataLayer || [];\n        function gtag(){dataLayer.push(arguments);}\n        gtag('js', new Date());\n\n        gtag('config', 'UA-119008715-1');\n    </script>\n\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\">\n\n    <style type=\"text/css\">\n        * { font-weight: 100; }\n        h1 { font-weight: 100; }\n        #graph-container {\n            top: 0;\n            bottom: 0;\n            left: 0;\n            right: 0;\n            position: fixed;\n        }\n\n        .nn-picker {\n            width: 410px;\n            margin: 30px;\n            z-index: 1000;\n        }\n        .github-corner {\n            z-index: 1000;\n        }\n\n        [data-toggle=\"collapse\"] .fa:before {\n            font-size: 2rem;\n            color: black;\n            content: \"\\f106\";\n            position: relative;\n            top: 5px;\n        }\n        .fa {\n          transition: 0.3s transform ease-in-out;\n        }\n        .collapsed .fa {\n          transform: rotate(-180deg);\n        }\n        .tab-content {\n            padding: 20px;\n        }\n        input[type=\"range\"] {\n            margin-left: 10px;\n        }\n        #count {\n            position: fixed;\n            bottom: 0;\n            right: 1rem;\n            opacity: 0.4;\n            font-weight: 100;\n        }\n        a.disabled {\n            color: gray;\n            pointer-events: none;\n        }\n    </style>\n\n    <title>NN SVG</title>\n\n</head>\n<body>\n\n    <div id=\"graph-container\"></div>\n\n    <div class=\"container-fluid\">\n\n        <div class=\"row\">\n            <div class=\"nn-picker\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <a class=\"pull-right\" data-toggle=\"collapse\" href=\"#collapsable\" role=\"button\"><i class=\"fa\"></i></a>\n                        <h1>NN-SVG</h1>\n                        <p>Publication-ready NN-architecture schematics. <a id=\"download\" class=\"disabled\" href=\"#\">Download SVG</a></p>\n\n                        <nav>\n                            <div class=\"nav nav-tabs card-header-tabs\" role=\"tablist\">\n                                <a class=\"nav-item nav-link\" href=\"index.html\">FCNN style</a>\n                                <a class=\"nav-item nav-link\" href=\"LeNet.html\">LeNet style</a>\n                                <a class=\"nav-item nav-link active\">AlexNet style</a>\n                            </div>\n                        </nav>\n\n                    </div>\n                    <div class=\"tab-content collapse show\" id=\"collapsable\">\n                        <div class=\"tab-pane fade show active\" id=\"AlexNet\" role=\"tabpanel\">\n\n\n                            <h4>Style:</h4>\n                            <div id=\"rendererType\">\n                                <label for=\"rendererType\" style=\"margin-right:10px;\">Renderer</label>\n                                <div class=\"form-check form-check-inline\">\n                                    <label class=\"form-check-label\">\n                                        <input class=\"form-check-input\" type=\"radio\" name=\"rendererType\" id=\"webGL\" value=\"webgl\" checked> webGL\n                                    </label>\n                                </div>\n                                <div class=\"form-check form-check-inline\">\n                                    <label class=\"form-check-label\">\n                                        <input class=\"form-check-input\" type=\"radio\" name=\"rendererType\" id=\"SVG\" value=\"svg\"> SVG\n                                    </label>\n                                </div>\n                                <small class=\"form-text text-muted\">The SVG renderer is required to download SVG, however the WebGL renderer is required to show tensor dimensions.</small>\n                            </div>\n\n                            <br>\n                            <div>\n                                <input type=\"color\" value=\"#eeeeee\" id=\"color1\">\n                                <label for=\"color1\">Color 1</label>\n                            </div>\n                            <div>\n                                <input type=\"color\" value=\"#99ddff\" id=\"color2\">\n                                <label for=\"color2\">Color 2</label>\n                            </div>\n                            <div>\n                                <input type=\"color\" value=\"#ffbbbb\" id=\"color3\">\n                                <label for=\"color3\">Color 3</label>\n                            </div>\n                            \n                            <div>\n                                <label for=\"rectOpacity\">Tensor Opacity</label>\n                                <input type=\"range\" id=\"rectOpacity\" name=\"\" min=\"0\" max=\"1\" step=\"0.01\" value=\"0.4\" style=\"position: relative; top: 3px;\">\n                            </div>\n                            <div>\n                            <div>\n                                <label for=\"filterOpacity\">Filter Opacity</label>\n                                <input type=\"range\" id=\"filterOpacity\" name=\"\" min=\"0\" max=\"1\" step=\"0.01\" value=\"0.4\" style=\"position: relative; top: 3px;\">\n                            </div>\n<!--                             <div>\n                                <label for=\"borderWidth\">Border Width</label>\n                                <input type=\"range\" id=\"borderWidth\" name=\"\" min=\"0.01\" max=\"3\" step=\"0.01\" value=\"1\" style=\"position: relative; top: 3px;\">\n                            </div> -->\n                            <div>\n                                <label for=\"betweenLayers\">Spacing Between Layers</label>\n                                <input type=\"range\" id=\"betweenLayers\" name=\"\" min=\"10\" max=\"100\" step=\"1\" value=\"20\" style=\"position: relative; top: 3px;\">\n                            </div>\n\n                            <hr>\n                            <div>\n                                <input type=\"checkbox\" id=\"logDepth\" name=\"logDepth\" value=\"logDepth\" checked>\n                                <label for=\"logDepth\">Log Feature-Map Depth Scaling</label>\n                            </div>\n                            <div>\n                                <label for=\"depthScale\">Depth Size Scaling</label>\n                                <input type=\"range\" id=\"depthScale\" name=\"\" min=\"1\" max=\"100\" step=\"1\" value=\"10\" style=\"position: relative; top: 3px;\">\n                                <span id=\"depthSpan\">10</span>\n                            </div>\n                            <div>\n                                <input type=\"checkbox\" id=\"logWidth\" name=\"logWidth\" value=\"logWidth\" checked>\n                                <label for=\"logWidth\">Log Feature-Map Width Scaling</label>\n                            </div>\n                            <div>\n                                <label for=\"widthScale\">Width Size Scaling</label>\n                                <input type=\"range\" id=\"widthScale\" name=\"\" min=\"1\" max=\"100\" step=\"1\" value=\"10\" style=\"position: relative; top: 3px;\">\n                                <span id=\"widthSpan\">10</span>\n                            </div>\n                            <div>\n                                <input type=\"checkbox\" id=\"logConvSize\" name=\"logConvSize\" value=\"logConvSize\">\n                                <label for=\"logConvSize\">Log Convolutional Filter Size Scaling</label>\n                            </div>\n                            <div>\n                                <label for=\"convScale\">Convolutional Filter Scaling</label>\n                                <input type=\"range\" id=\"convScale\" name=\"\" min=\"1\" max=\"10\" step=\"1\" value=\"1\" style=\"position: relative; top: 3px;\">\n                                <span id=\"convSpan\">1</span>\n                            </div>\n\n                            <hr>\n                            <div>\n                                <input type=\"checkbox\" id=\"showDims\" name=\"showDims\" value=\"showDims\">\n                                <label for=\"showDims\">Show Tensor Dimensions</label>\n                            </div>\n                            <div>\n                                <input type=\"checkbox\" id=\"showConvDims\" name=\"showConvDims\" value=\"showConvDims\">\n                                <label for=\"showConvDims\">Show Conv Dimensions</label>\n                            </div>\n                            <div>\n                                <label for=\"fontScale\">Font Size</label>\n                                <input type=\"range\" id=\"fontScale\" name=\"\" min=\"1\" max=\"3\" step=\"0.2\" value=\"1\" style=\"position: relative; top: 3px;\">\n                            </div>\n\n                            <hr>\n                            <h4>Architecture:</h4>\n                            <div id=\"architecture\">\n                                <p>Height | Width | Depth | filter Height | filter Width</p>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"height\" step=\"1\" value=\"224\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"width\" step=\"1\" value=\"224\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"depth\" step=\"1\" value=\"3\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterHeight\" step=\"1\" value=\"11\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterWidth\" step=\"1\" value=\"11\" />\n                                    </div>\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"height\" step=\"1\" value=\"55\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"width\" step=\"1\" value=\"55\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"depth\" step=\"1\" value=\"96\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterHeight\" step=\"1\" value=\"5\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterWidth\" step=\"1\" value=\"5\" />\n                                    </div>\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"height\" step=\"1\" value=\"27\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"width\" step=\"1\" value=\"27\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"depth\" step=\"1\" value=\"256\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterHeight\" step=\"1\" value=\"3\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterWidth\" step=\"1\" value=\"3\" />\n                                    </div>\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"height\" step=\"1\" value=\"13\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"width\" step=\"1\" value=\"13\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"depth\" step=\"1\" value=\"384\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterHeight\" step=\"1\" value=\"3\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterWidth\" step=\"1\" value=\"3\" />\n                                    </div>\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"height\" step=\"1\" value=\"13\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"width\" step=\"1\" value=\"13\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"depth\" step=\"1\" value=\"384\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterHeight\" step=\"1\" value=\"3\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterWidth\" step=\"1\" value=\"3\" />\n                                    </div>\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"height\" step=\"1\" value=\"13\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"width\" step=\"1\" value=\"13\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"depth\" step=\"1\" value=\"256\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterHeight\" step=\"1\" value=\"3\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterWidth\" step=\"1\" value=\"3\" />\n                                    </div>\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                        <button class=\"btn btn-primary btn-add input-group-prepend\"><span class=\"fa fa-plus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"height\" step=\"1\"/>\n                                        <input type=\"number\" class=\"form-control\" name=\"width\" step=\"1\"/>\n                                        <input type=\"number\" class=\"form-control\" name=\"depth\" step=\"1\"/>\n                                        <input type=\"number\" class=\"form-control\" name=\"filterHeight\" step=\"1\"/>\n                                        <input type=\"number\" class=\"form-control\" name=\"filterWidth\" step=\"1\"/>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <hr>\n                            <div id=\"architecture2\">\n                                <p>Vector Length</p>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-5\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"vectorLength\" step=\"1\" value=\"2048\" />\n                                    </div>\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-5\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"vectorLength\" step=\"1\" value=\"2048\" />\n                                    </div>\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-5\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"vectorLength\" step=\"1\" value=\"1000\" />\n                                    </div>\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-5\">\n                                        <button class=\"btn btn-primary btn-add input-group-prepend\"><span class=\"fa fa-plus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"vectorLength\" step=\"1\"/>\n                                    </div>\n                                </div>\n\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div id=\"count\"><a style=\"font-size: 1rem\" href=\"about.html\">About</a></div>\n\n\n\n    <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script>\n\n    <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/underscore@1.13.0/underscore-umd-min.js\"></script>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/91/three.min.js\"></script>\n    <script src=\"OrbitControls.js\"></script>\n    <script src=\"SVGRenderer.js\"></script>\n    <script src=\"Projector.js\"></script>\n\n    <!-- We use locally cached copies of these in case the upstream versions change -->\n    <!-- <script src=\"https://threejs.org/examples/js/controls/OrbitControls.js\"></script> -->\n    <!-- <script src=\"https://threejs.org/examples/js/renderers/Projector.js\"></script> -->\n    <!-- <script src=\"https://threejs.org/examples/js/renderers/SVGRenderer.js\"></script> -->\n    <!-- <script src=\"https://threejs.org/examples/js/renderers/CSS2DRenderer.js\"></script> -->\n    <!-- <script src=\"https://threejs.org/examples/js/renderers/CSS3DRenderer.js\"></script> -->\n\n    <script src=\"util.js\"></script>\n    <script src=\"AlexNet.js\"></script>\n\n    <script type=\"text/javascript\">\n\nalexnet = AlexNet();\n\nfunction restart() {\n\n    architecture = $('#architecture').find('.entry').map((i,el) =>\n        _.object(['height','width','depth','filterHeight','filterWidth','rel_x','rel_y'],\n                 $(el).find('input[type=\"number\"]').map((j,input) => parseFloat($(input).val())).get().concat([rand(-0.4,0.4), rand(-0.4,0.4)]))\n        ).get()\n         .filter(layer => Object.values(layer).every(val => !_.isNaN(val)));\n\n    architecture2 = $('#architecture2').find('input').map((i,el) => $(el).val()).get().filter(input => $.isNumeric(input)).map(s => parseInt(s));\n\n    alexnet.redraw({'architecture_':architecture, 'architecture2_':architecture2});\n\n}\n\nrestart();\n\n// /////////////////////////////////////////////////////////////////////////////\n//                 ///////    Select Styling    ///////\n// /////////////////////////////////////////////////////////////////////////////\n\n\n$('#rendererType input:radio').change(function() {\n    rendererType = this.value;\n    if (rendererType == 'svg') {\n        $(\"#download\").removeClass('disabled');\n    }\n    else if (rendererType == 'webgl') {\n        $(\"#download\").addClass('disabled');\n    }\n    $(this).blur();\n    alexnet.restartRenderer({'rendererType_':rendererType});\n});\n\n$(\"#color1\").change(        function () { alexnet.style({'color1_': this.value}); });\n$(\"#color2\").change(        function () { alexnet.style({'color2_': this.value}); });\n$(\"#color3\").change(        function () { alexnet.style({'color3_': this.value}); });\n$(\"#fontScale\").change(        function () { alexnet.style({'fontScale_': this.value}); });\n$(\"#rectOpacity\").change(   function () { alexnet.style({'rectOpacity_': parseFloat(this.value)}); $(this).blur(); });\n$(\"#filterOpacity\").change( function () { alexnet.style({'filterOpacity_': parseFloat(this.value)}); $(this).blur(); });\n$(\"#betweenLayers\").change( function () { alexnet.redraw({'betweenLayers_': parseFloat(this.value)}); $(this).blur(); });\n$(\"#logDepth\").change(      function () { alexnet.redraw({'logDepth_': this.checked}); });\n$(\"#depthScale\").change(    function () { alexnet.redraw({'depthScale_': parseFloat(this.value)}); $(this).blur(); $(\"#depthSpan\").text(this.value); });\n$(\"#logWidth\").change(      function () { alexnet.redraw({'logWidth_': this.checked}); });\n$(\"#widthScale\").change(    function () { alexnet.redraw({'widthScale_': parseFloat(this.value)}); $(this).blur(); $(\"#widthSpan\").text(this.value); });\n$(\"#logConvSize\").change(   function () { alexnet.redraw({'logConvSize_': this.checked}); });\n$(\"#convScale\").change(     function () { alexnet.redraw({'convScale_': parseFloat(this.value)}); $(this).blur(); $(\"#convSpan\").text(this.value); });\n$(\"#showDims\").change(      function () { alexnet.redraw({'showDims_': this.checked}); });\n$(\"#showConvDims\").change(  function () { alexnet.redraw({'showConvDims_': this.checked}); });\n\n\n// /////////////////////////////////////////////////////////////////////////////\n//                  ///////    Select Architecture    ///////\n// /////////////////////////////////////////////////////////////////////////////\n\n\n$(document).on('click', '#architecture .btn-add', function(e) {\n    e.preventDefault();\n\n    var controlForm = $('#architecture');\n    var currentEntry = $(this).parents('.entry:first');\n    var newEntry = $(currentEntry.clone()).appendTo(controlForm);\n\n    newEntry.find('input').val('');\n    controlForm.find('.entry:not(:last) .btn-add')\n        .removeClass('btn-add').addClass('btn-remove')\n        .removeClass('btn-primary').addClass('btn-secondary')\n        .html('<span class=\"fa fa-minus\"></span>');\n\n    restart();\n\n});\n\n$(document).on('click', '#architecture .btn-remove', function(e) {\n    e.preventDefault();\n\n    $(this).parents('.entry:first').remove();\n\n    restart();\n\n    return false;\n\n});\n\n$(document).on('click', '#architecture2 .btn-add', function(e) {\n    e.preventDefault();\n\n    var controlForm = $('#architecture2');\n    var currentEntry = $(this).parents('.entry:first');\n    var newEntry = $(currentEntry.clone()).appendTo(controlForm);\n\n    newEntry.find('input').val('');\n    controlForm.find('.entry:not(:last) .btn-add')\n        .removeClass('btn-add').addClass('btn-remove')\n        .removeClass('btn-primary').addClass('btn-secondary')\n        .html('<span class=\"fa fa-minus\"></span>');\n\n    restart();\n\n});\n\n$(document).on('click', '#architecture2 .btn-remove', function(e) {\n    e.preventDefault();\n\n    $(this).parents('.entry:first').remove();\n\n    restart();\n\n    return false;\n\n});\n\n$(document).on('change', 'input', function(e) {\n    e.preventDefault();\n\n    restart();\n});\n\n\n$(\"#download\").on(\"click\", function() {\n    // ga('send', 'event', 'downloadSVG', 'AlexNet');\n\n    $(this).attr(\"href\", 'data:application/octet-stream;base64,' + btoa(unescape(encodeURIComponent($('<div>').append($( $(\"#graph-container\").html()).attr(\"xmlns\", \"http://www.w3.org/2000/svg\") ).html()))))\n           .attr(\"download\", \"nn.svg\")\n});\n\n\n    </script>\n\n</body>\n\n</html>"
        },
        {
          "name": "AlexNet.js",
          "type": "blob",
          "size": 15.1083984375,
          "content": "\nfunction AlexNet() {\n\n    // /////////////////////////////////////////////////////////////////////////////\n    //                       ///////    Variables    ///////\n    // /////////////////////////////////////////////////////////////////////////////\n\n    var w = window.innerWidth;\n    var h = window.innerHeight;\n\n    var color1 = '#eeeeee';\n    var color2 = '#99ddff';\n    var color3 = '#ffbbbb';\n\n    var rectOpacity = 0.4;\n    var filterOpacity = 0.4;\n    var fontScale = 1;\n\n    var line_material = new THREE.LineBasicMaterial( { 'color':0x000000 } );\n    var box_material = new THREE.MeshBasicMaterial( {'color':color1, 'side':THREE.DoubleSide, 'transparent':true, 'opacity':rectOpacity, 'depthWrite':false, 'needsUpdate':true} );\n    var conv_material = new THREE.MeshBasicMaterial( {'color':color2, 'side':THREE.DoubleSide, 'transparent':true, 'opacity':filterOpacity, 'depthWrite':false, 'needsUpdate':true} );\n    var pyra_material = new THREE.MeshBasicMaterial( {'color':color3, 'side':THREE.DoubleSide, 'transparent':true, 'opacity':filterOpacity, 'depthWrite':false, 'needsUpdate':true} );\n\n    var architecture = [];\n    var architecture2 = [];\n    var betweenLayers = 20;\n\n    var logDepth = true;\n    var depthScale = 10;\n    var logWidth = true;\n    var widthScale = 10;\n    var logConvSize = false;\n    var convScale = 1;\n\n    var showDims = false;\n    var showConvDims = false;\n\n    let depthFn = (depth) => logDepth ? (Math.log(depth) * depthScale) : (depth * depthScale);\n    let widthFn = (width) => logWidth ? (Math.log(width) * widthScale) : (width * widthScale);\n    let convFn = (conv) => logConvSize ? (Math.log(conv) * convScale) : (conv * convScale);\n\n    function wf(layer) { return widthFn(layer['width']); }\n    function hf(layer) { return widthFn(layer['height']); }\n\n    var layers = new THREE.Group();\n    var convs = new THREE.Group();\n    var pyramids = new THREE.Group();\n    var sprites = new THREE.Group();\n\n\n    var scene = new THREE.Scene();\n    scene.background = new THREE.Color( 0xffffff );\n\n    // var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 100000 );\n    var camera = new THREE.OrthographicCamera( w / - 2, w / 2, h / 2, h / - 2, -10000000, 10000000 );\n    camera.position.set(-219, 92, 84);\n\n    var renderer;\n    var rendererType = 'webgl';\n\n    var controls;\n\n\n    // /////////////////////////////////////////////////////////////////////////////\n    //                       ///////    Methods    ///////\n    // /////////////////////////////////////////////////////////////////////////////\n\n    function restartRenderer({rendererType_=rendererType}={}) {\n\n        rendererType = rendererType_;\n\n        clearThree(scene);\n\n        if (rendererType === 'webgl') { renderer = new THREE.WebGLRenderer( { 'alpha':true } ); }\n        else if (rendererType === 'svg') { renderer = new THREE.SVGRenderer(); }\n\n        renderer.setPixelRatio(window.devicePixelRatio || 1);\n        renderer.setSize( window.innerWidth, window.innerHeight );\n\n        graph_container = document.getElementById('graph-container')\n        while (graph_container.firstChild) { graph_container.removeChild(graph_container.firstChild); }\n        graph_container.appendChild( renderer.domElement );\n\n        if (controls) { controls.dispose(); }\n        controls = new THREE.OrbitControls( camera, renderer.domElement );\n\n        animate();\n\n    }\n\n    function animate() {\n        requestAnimationFrame( animate );\n        sprites.children.forEach(sprite => {\n            sprite.quaternion.copy(camera.quaternion);\n        });\n        renderer.render(scene, camera);\n    };\n\n    restartRenderer();\n\n    function redraw({architecture_=architecture,\n                     architecture2_=architecture2,\n                     betweenLayers_=betweenLayers,\n                     logDepth_=logDepth,\n                     depthScale_=depthScale,\n                     logWidth_=logWidth,\n                     widthScale_=widthScale,\n                     logConvSize_=logConvSize,\n                     convScale_=convScale,\n                     showDims_=showDims,\n                     showConvDims_=showConvDims}={}) {\n\n        architecture = architecture_;\n        architecture2 = architecture2_;\n        betweenLayers = betweenLayers_;\n        logDepth = logDepth_;\n        depthScale = depthScale_;\n        logWidth = logWidth_;\n        widthScale = widthScale_;\n        logConvSize = logConvSize_;\n        convScale = convScale_;\n        showDims = showDims_;\n        showConvDims = showConvDims_;\n\n        clearThree(scene);\n\n        z_offset = -(sum(architecture.map(layer => depthFn(layer['depth']))) + (betweenLayers * (architecture.length - 1))) / 3;\n        layer_offsets = pairWise(architecture).reduce((offsets, layers) => offsets.concat([offsets.last() + depthFn(layers[0]['depth'])/2 + betweenLayers + depthFn(layers[1]['depth'])/2]), [z_offset]);\n        layer_offsets = layer_offsets.concat(architecture2.reduce((offsets, layer) => offsets.concat([offsets.last() + widthFn(2) + betweenLayers]), [layer_offsets.last() + depthFn(architecture.last()['depth'])/2 + betweenLayers + widthFn(2)]));\n\n        architecture.forEach( function( layer, index ) {\n\n            // Layer\n            layer_geometry = new THREE.BoxGeometry( wf(layer), hf(layer), depthFn(layer['depth']) );\n            layer_object = new THREE.Mesh( layer_geometry, box_material );\n            layer_object.position.set(0, 0, layer_offsets[index]);\n            layers.add( layer_object );\n\n            layer_edges_geometry = new THREE.EdgesGeometry( layer_geometry );\n            layer_edges_object = new THREE.LineSegments( layer_edges_geometry, line_material );\n            layer_edges_object.position.set(0, 0, layer_offsets[index]);\n            layers.add( layer_edges_object );\n\n            if (index < architecture.length - 1) {\n\n                // Conv\n                conv_geometry = new THREE.BoxGeometry( convFn(layer['filterWidth']), convFn(layer['filterHeight']), depthFn(layer['depth']) );\n                conv_object = new THREE.Mesh( conv_geometry, conv_material );\n                conv_object.position.set(layer['rel_x'] * wf(layer), layer['rel_y'] * hf(layer), layer_offsets[index]);\n                convs.add( conv_object );\n\n                conv_edges_geometry = new THREE.EdgesGeometry( conv_geometry );\n                conv_edges_object = new THREE.LineSegments( conv_edges_geometry, line_material );\n                conv_edges_object.position.set(layer['rel_x'] * wf(layer), layer['rel_y'] * hf(layer), layer_offsets[index]);\n                convs.add( conv_edges_object );\n\n                // Pyramid\n                pyramid_geometry = new THREE.Geometry();\n\n                base_z = layer_offsets[index] + (depthFn(layer['depth']) / 2);\n                summit_z = layer_offsets[index] + (depthFn(layer['depth']) / 2) + betweenLayers;\n                next_layer_wh = widthFn(architecture[index+1]['width'])\n\n                pyramid_geometry.vertices = [\n                    new THREE.Vector3( (layer['rel_x'] * wf(layer)) + (convFn(layer['filterWidth'])/2), (layer['rel_y'] * hf(layer)) + (convFn(layer['filterHeight'])/2), base_z ),  // base\n                    new THREE.Vector3( (layer['rel_x'] * wf(layer)) + (convFn(layer['filterWidth'])/2), (layer['rel_y'] * hf(layer)) - (convFn(layer['filterHeight'])/2), base_z ),  // base\n                    new THREE.Vector3( (layer['rel_x'] * wf(layer)) - (convFn(layer['filterWidth'])/2), (layer['rel_y'] * hf(layer)) - (convFn(layer['filterHeight'])/2), base_z ),  // base\n                    new THREE.Vector3( (layer['rel_x'] * wf(layer)) - (convFn(layer['filterWidth'])/2), (layer['rel_y'] * hf(layer)) + (convFn(layer['filterHeight'])/2), base_z ),  // base\n                    new THREE.Vector3( (layer['rel_x'] * next_layer_wh),                           (layer['rel_y'] * next_layer_wh),                           summit_z)  // summit\n                ];\n                pyramid_geometry.faces = [new THREE.Face3(0,1,2),new THREE.Face3(0,2,3),new THREE.Face3(1,0,4),new THREE.Face3(2,1,4),new THREE.Face3(3,2,4),new THREE.Face3(0,3,4)];\n\n                pyramid_object = new THREE.Mesh( pyramid_geometry, pyra_material );\n                pyramids.add( pyramid_object );\n\n                pyramid_edges_geometry = new THREE.EdgesGeometry( pyramid_geometry );\n                pyramid_edges_object = new THREE.LineSegments( pyramid_edges_geometry, line_material );\n                pyramids.add( pyramid_edges_object );\n\n            }\n\n            if (showDims) {\n\n                // Dims\n                sprite = makeTextSprite(rendererType === 'svg', layer['depth'].toString(), layer_object.position, new THREE.Vector3( wf(layer)/2 + 2, hf(layer)/2 + 2, 0 ));\n\n                sprite = makeTextSprite(rendererType === 'svg', layer['width'].toString(), layer_object.position, new THREE.Vector3( wf(layer)/2 + 3, 0, depthFn(layer['depth'])/2 + 3 ));\n\n                sprite = makeTextSprite(rendererType === 'svg', layer['height'].toString(), layer_object.position, new THREE.Vector3( 0, -hf(layer)/2 - 3, depthFn(layer['depth'])/2 + 3 ));\n\n            }\n\n            if (showConvDims && index < architecture.length - 1) {\n\n                // Conv Dims\n                sprite = makeTextSprite(rendererType === 'svg', layer['filterHeight'].toString(), conv_object.position, new THREE.Vector3( convFn(layer['filterWidth'])/2, -3, depthFn(layer['depth'])/2 + 3 ));\n\n                sprite = makeTextSprite(rendererType === 'svg', layer['filterWidth'].toString(), conv_object.position, new THREE.Vector3( -1, convFn(layer['filterHeight'])/2, depthFn(layer['depth'])/2 + 3 ));\n\n            }\n\n        });\n\n        architecture2.forEach( function( layer, index ) {\n\n            // Dense\n            layer_geometry = new THREE.BoxGeometry( widthFn(2), depthFn(layer), widthFn(2) );\n            layer_object = new THREE.Mesh( layer_geometry, box_material );\n            layer_object.position.set(0, 0, layer_offsets[architecture.length + index]);\n            layers.add( layer_object );\n\n            layer_edges_geometry = new THREE.EdgesGeometry( layer_geometry );\n            layer_edges_object = new THREE.LineSegments( layer_edges_geometry, line_material );\n            layer_edges_object.position.set(0, 0, layer_offsets[architecture.length + index]);\n            layers.add( layer_edges_object );\n\n            direction = new THREE.Vector3( 0, 0, 1 );\n            origin = new THREE.Vector3( 0, 0, layer_offsets[architecture.length + index] - betweenLayers - widthFn(2)/2 + 1 );\n            length = betweenLayers - 2;\n            headLength = betweenLayers/3;\n            headWidth = 5;\n            arrow = new THREE.ArrowHelper( direction, origin, length, 0x000000, headLength, headWidth );\n            pyramids.add( arrow );\n\n            if (showDims) {\n\n                // Dims\n                sprite = makeTextSprite(rendererType === 'svg', layer.toString(), layer_object.position, new THREE.Vector3( 3, depthFn(layer)/2 + 4, 3 ));\n\n            }\n\n\n        });\n\n        scene.add( layers );\n        scene.add( convs );\n        scene.add( pyramids );\n        scene.add( sprites );\n\n    }\n\n    function clearThree(obj) {\n\n        while(obj.children.length > 0) {\n            clearThree( obj.children[0] )\n            obj.remove( obj.children[0] );\n        }\n\n        if ( obj.geometry ) { obj.geometry.dispose(); }\n        if ( obj.material ) { obj.material.dispose(); }\n        if ( obj.texture ) { obj.texture.dispose(); }\n    }\n\n\n    function makeTextSprite(should_make_geometry, message, copy_pos, sub_pos, opts) {\n        if (should_make_geometry) {\n            const loader = new THREE.FontLoader();\n            loader.load('fonts/helvetiker_regular.typeface.json', function (font) {\n                let geometry = new THREE.TextGeometry(message, {\n                    font: font,\n                    size: 3 * fontScale,\n                    height: 0.01,\n                });\n\n                let material = new THREE.MeshBasicMaterial({ color: 0x000000 });\n                let sprite = new THREE.Mesh(geometry, material);\n                sprite.matrixAutoUpdate = true;\n                sprite.up.set(0, 1, 0);\n                sprite.scale.set(1, 1, 0.1);\n\n                sprite.position.copy(copy_pos).sub(sub_pos);\n                sprites.add(sprite);               \n            });\n        \n        } else {\n            var parameters = opts || {};\n            var fontface = parameters.fontface || 'Helvetica';\n            var fontsize = parameters.fontsize || 120;\n            var canvas = document.createElement('canvas');\n            var context = canvas.getContext('2d');\n            context.font = fontsize + \"px \" + fontface;\n\n            // get size data (height depends only on font size)\n            var metrics = context.measureText(message);\n            var textWidth = metrics.width;\n\n            // text color\n            context.fillStyle = 'rgba(0, 0, 0, 1.0)';\n            context.fillText(message, 0, fontsize);\n\n            // canvas contents will be used for a texture\n            var texture = new THREE.Texture(canvas)\n            texture.minFilter = THREE.LinearFilter;\n            texture.needsUpdate = true;\n\n            var spriteMaterial = new THREE.SpriteMaterial({ map: texture });\n            var sprite = new THREE.Sprite( spriteMaterial );\n            sprite.scale.set( 10 * fontScale, 5* fontScale, 1.0 );\n            sprite.center.set( 0,1 );\n\n            sprite.position.copy(copy_pos).sub(sub_pos);\n            sprites.add(sprite);\n        }\n    }\n\n    function style({color1_=color1,\n                    color2_=color2,\n                    color3_=color3,\n                    rectOpacity_=rectOpacity,\n                    filterOpacity_=filterOpacity,\n                    fontScale_ =fontScale,\n                }={}) {\n        color1        = color1_;\n        color2        = color2_;\n        color3        = color3_;\n        rectOpacity   = rectOpacity_;\n        filterOpacity = filterOpacity_;\n        fontScale = fontScale_;\n\n        box_material.color = new THREE.Color(color1);\n        conv_material.color = new THREE.Color(color2);\n        pyra_material.color = new THREE.Color(color3);\n\n        box_material.opacity = rectOpacity;\n\n        conv_material.opacity = filterOpacity;\n        pyra_material.opacity = filterOpacity;\n    }\n\n    // /////////////////////////////////////////////////////////////////////////////\n    //                  ///////    Window Resize    ///////\n    // /////////////////////////////////////////////////////////////////////////////\n\n    function onWindowResize() {\n\n        renderer.setSize(window.innerWidth, window.innerHeight);\n\n        camFactor = window.devicePixelRatio || 1;\n        camera.left = -window.innerWidth / camFactor;\n        camera.right = window.innerWidth / camFactor;\n        camera.top = window.innerHeight / camFactor;\n        camera.bottom = -window.innerHeight / camFactor;\n        camera.updateProjectionMatrix();\n\n    }\n\n    window.addEventListener('resize', onWindowResize, false);\n\n\n    /////////////////////////////////////////////////////////////////////////////\n                          ///////    Return    ///////\n    /////////////////////////////////////////////////////////////////////////////\n\n    return {\n        'redraw'           : redraw,\n        'restartRenderer'  : restartRenderer,\n        'style'            : style,\n\n    }\n\n}\n"
        },
        {
          "name": "FCNN.js",
          "type": "blob",
          "size": 12.029296875,
          "content": "\nfunction FCNN() {\n\n    let randomWeight = () => Math.random() * 2 - 1;\n\n\n    /////////////////////////////////////////////////////////////////////////////\n                          ///////    Variables    ///////\n    /////////////////////////////////////////////////////////////////////////////\n\n    var w = window.innerWidth;\n    var h = window.innerHeight;\n\n    var svg = d3.select(\"#graph-container\").append(\"svg\").attr(\"xmlns\", \"http://www.w3.org/2000/svg\");\n    var g = svg.append(\"g\");\n    svg.style(\"cursor\", \"move\");\n\n    var edgeWidthProportional = false;\n    var edgeWidth = 0.5;\n    var weightedEdgeWidth = d3.scaleLinear().domain([0, 1]).range([0, edgeWidth]);\n\n    var edgeOpacityProportional = false;\n    var edgeOpacity = 1.0\n    var weightedEdgeOpacity = d3.scaleLinear().domain([0, 1]).range([0, 1]);\n\n    var edgeColorProportional = false;\n    var defaultEdgeColor = \"#505050\";\n    var negativeEdgeColor = \"#0000ff\";\n    var positiveEdgeColor = \"#ff0000\";\n    var weightedEdgeColor = d3.scaleLinear().domain([-1, 0, 1]).range([negativeEdgeColor, \"white\", positiveEdgeColor]);\n\n    var nodeDiameter = 20;\n    var nodeColor = \"#ffffff\";\n    var nodeBorderColor = \"#333333\";\n\n    var betweenLayers = 160;\n\n    var architecture = [8, 12, 8];\n    var betweenNodesInLayer = [20, 20, 20];\n    var graph = {};\n    var layer_offsets = [];\n    var largest_layer_width = 0;\n    var nnDirection = 'right';\n    var showBias = false;\n    var showLabels = true;\n    var showArrowheads = false;\n    var arrowheadStyle = \"empty\";\n    var bezierCurves = false;\n\n    let sup_map = {'0': '⁰', '1': '¹', '2': '²', '3': '³', '4': '⁴', '5': '⁵', '6': '⁶', '7': '⁷', '8': '⁸', '9': '⁹'};\n    let sup = (s) => Array.prototype.map.call(s, (d) => (d in sup_map && sup_map[d]) || d).join('');\n\n    let textFn = (layer_index, layer_width) => ((layer_index === 0 ? \"Input\" : (layer_index === architecture.length-1 ? \"Output\" : \"Hidden\")) + \" Layer ∈ ℝ\" + sup(layer_width.toString()));\n    var nominal_text_size = 12;\n    var textWidth = 70;\n\n    var marker = svg.append(\"svg:defs\").append(\"svg:marker\")\n        .attr(\"id\", \"arrow\")\n        .attr(\"viewBox\", \"0 -5 10 10\")\n        .attr(\"markerWidth\", 7)\n        .attr(\"markerHeight\", 7)\n        .attr(\"orient\", \"auto\");\n\n    var arrowhead = marker.append(\"svg:path\")\n        .attr(\"d\", \"M0,-5L10,0L0,5\")\n        .style(\"stroke\", defaultEdgeColor);\n\n    var link = g.selectAll(\".link\");\n    var node = g.selectAll(\".node\");\n    var text = g.selectAll(\".text\");\n\n    /////////////////////////////////////////////////////////////////////////////\n                          ///////    Methods    ///////\n    /////////////////////////////////////////////////////////////////////////////\n\n    function redraw({architecture_=architecture,\n                     showBias_=showBias,\n                     showLabels_=showLabels,\n                     bezierCurves_=bezierCurves,\n                     }={}) {\n\n        architecture = architecture_;\n        showBias = showBias_;\n        showLabels = showLabels_;\n        bezierCurves = bezierCurves_;\n\n        graph.nodes = architecture.map((layer_width, layer_index) => range(layer_width).map(node_index => {return {'id':layer_index+'_'+node_index,'layer':layer_index,'node_index':node_index}}));\n        graph.links = pairWise(graph.nodes).map((nodes) => nodes[0].map(left => nodes[1].map(right => {return right.node_index >= 0 ? {'id':left.id+'-'+right.id, 'source':left.id,'target':right.id,'weight':randomWeight()} : null })));\n        graph.nodes = flatten(graph.nodes);\n        graph.links = flatten(graph.links).filter(l => (l && (showBias ? (parseInt(l['target'].split('_')[0]) !== architecture.length-1 ? (l['target'].split('_')[1] !== '0') : true) : true)));\n\n        label = architecture.map((layer_width, layer_index) => { return {'id':'layer_'+layer_index+'_label','layer':layer_index,'text':textFn(layer_index, layer_width)}});\n\n        link = link.data(graph.links, d => d.id);\n        link.exit().remove();\n        link = link.enter()\n                   .insert(\"path\", \".node\")\n                   .attr(\"class\", \"link\")\n                   .merge(link);\n\n        node = node.data(graph.nodes, d => d.id);\n        node.exit().remove();\n        node = node.enter()\n                   .append(\"circle\")\n                   .attr(\"r\", nodeDiameter/2)\n                   .attr(\"class\", \"node\")\n                   .attr(\"id\", function(d) { return d.id; })\n                   .on(\"mousedown\", set_focus)\n                   .on(\"mouseup\", remove_focus)\n                   .merge(node);\n\n        text = text.data(label, d => d.id);\n        text.exit().remove();\n        text = text.enter()\n                   .append(\"text\")\n                   .attr(\"class\", \"text\")\n                   .attr(\"dy\", \".35em\")\n                   .style(\"font-size\", nominal_text_size+\"px\")\n                   .merge(text)\n                   .text(function(d) { return (showLabels ? d.text : \"\"); });\n\n        style();\n    }\n\n    function redistribute({betweenNodesInLayer_=betweenNodesInLayer,\n                           betweenLayers_=betweenLayers,\n                           nnDirection_=nnDirection,\n                           bezierCurves_=bezierCurves}={}) {\n\n        betweenNodesInLayer = betweenNodesInLayer_;\n        betweenLayers = betweenLayers_;\n        nnDirection = nnDirection_;\n        bezierCurves = bezierCurves_;\n\n        layer_widths = architecture.map((layer_width, i) => layer_width * nodeDiameter + (layer_width - 1) * betweenNodesInLayer[i])\n\n        largest_layer_width = Math.max(...layer_widths);\n\n        layer_offsets = layer_widths.map(layer_width => (largest_layer_width - layer_width) / 2);\n\n        let indices_from_id = (id) => id.split('_').map(x => parseInt(x));\n\n        let x = (layer, node_index) => layer * (betweenLayers + nodeDiameter) + w/2 - (betweenLayers * layer_offsets.length/3);\n        let y = (layer, node_index) => layer_offsets[layer] + node_index * (nodeDiameter + betweenNodesInLayer[layer]) + h/2 - largest_layer_width/2;\n\n        let xt = (layer, node_index) => layer_offsets[layer] + node_index * (nodeDiameter + betweenNodesInLayer[layer]) + w/2  - largest_layer_width/2;\n        let yt = (layer, node_index) => layer * (betweenLayers + nodeDiameter) + h/2 - (betweenLayers * layer_offsets.length/3);\n\n        if (nnDirection == 'up') { x = xt; y = yt; }\n\n        node.attr('cx', function(d) { return x(d.layer, d.node_index); })\n            .attr('cy', function(d) { return y(d.layer, d.node_index); });\n\n        if(bezierCurves) {\n                link.attr(\"d\", (d) => {\n                let source = [x(...indices_from_id(d.source)), y(...indices_from_id(d.source))];\n                let target = [x(...indices_from_id(d.target)), y(...indices_from_id(d.target))];\n            \n                // control points\n                let cp1 = [(source[0] + target[0]) / 2, source[1]];\n                let cp2 = [(source[0] + target[0]) / 2, target[1]];\n            \n                return \"M\" + source[0] + \",\" + source[1]\n                    + \"C\" + cp1[0] + \",\" + cp1[1]\n                    + \" \" + cp2[0] + \",\" + cp2[1]\n                    + \" \" + target[0] + \",\" + target[1];\n            });\n        } else {\n            link.attr(\"d\", (d) => \"M\" + x(...indices_from_id(d.source)) + \",\" +\n                                        y(...indices_from_id(d.source)) + \", \" +\n                                        x(...indices_from_id(d.target)) + \",\" +\n                                        y(...indices_from_id(d.target)));\n        }\n\n        text.attr(\"x\", function(d) { return (nnDirection === 'right' ? x(d.layer, d.node_index) - textWidth/2 : w/2 + largest_layer_width/2 + 20 ); })\n            .attr(\"y\", function(d) { return (nnDirection === 'right' ? h/2 + largest_layer_width/2 + 20       : y(d.layer, d.node_index) ); });\n\n    }\n\n    function style({edgeWidthProportional_=edgeWidthProportional,\n                    edgeWidth_=edgeWidth,\n                    edgeOpacityProportional_=edgeOpacityProportional,\n                    edgeOpacity_=edgeOpacity,\n                    negativeEdgeColor_=negativeEdgeColor,\n                    positiveEdgeColor_=positiveEdgeColor,\n                    edgeColorProportional_=edgeColorProportional,\n                    defaultEdgeColor_=defaultEdgeColor,\n                    nodeDiameter_=nodeDiameter,\n                    nodeColor_=nodeColor,\n                    nodeBorderColor_=nodeBorderColor,\n                    showArrowheads_=showArrowheads,\n                    arrowheadStyle_=arrowheadStyle,\n                    bezierCurves_=bezierCurves}={}) {\n        // Edge Width\n        edgeWidthProportional   = edgeWidthProportional_;\n        edgeWidth               = edgeWidth_;\n        weightedEdgeWidth       = d3.scaleLinear().domain([0, 1]).range([0, edgeWidth]);\n        // Edge Opacity\n        edgeOpacityProportional = edgeOpacityProportional_;\n        edgeOpacity             = edgeOpacity_;\n        // Edge Color\n        defaultEdgeColor        = defaultEdgeColor_;\n        edgeColorProportional   = edgeColorProportional_;\n        negativeEdgeColor       = negativeEdgeColor_;\n        positiveEdgeColor       = positiveEdgeColor_;\n        weightedEdgeColor       = d3.scaleLinear().domain([-1, 0, 1]).range([negativeEdgeColor, \"white\", positiveEdgeColor]);\n        // Node Styles\n        nodeDiameter            = nodeDiameter_;\n        nodeColor               = nodeColor_;\n        nodeBorderColor         = nodeBorderColor_;\n        // Arrowheads\n        showArrowheads          = showArrowheads_;\n        arrowheadStyle          = arrowheadStyle_;\n        // Bezier curves\n        bezierCurves            = bezierCurves_;\n\n        link.style(\"stroke-width\", function(d) {\n            if (edgeWidthProportional) { return weightedEdgeWidth(Math.abs(d.weight)); } else { return edgeWidth; }\n        });\n\n        link.style(\"stroke-opacity\", function(d) {\n            if (edgeOpacityProportional) { return weightedEdgeOpacity(Math.abs(d.weight)); } else { return edgeOpacity; }\n        });\n\n        link.style(\"stroke\", function(d) {\n            if (edgeColorProportional) { return weightedEdgeColor(d.weight); } else { return defaultEdgeColor; }\n        });\n\n        link.style(\"fill\", \"none\");\n\n        link.attr('marker-end', showArrowheads ? \"url(#arrow)\" : '');\n        marker.attr('refX', nodeDiameter*1.4 + 12);\n        arrowhead.style(\"fill\", arrowheadStyle === 'empty' ? \"none\" : defaultEdgeColor);\n\n        node.attr(\"r\", nodeDiameter/2);\n        node.style(\"fill\", nodeColor);\n        node.style(\"stroke\", nodeBorderColor);\n\n    }\n\n    /////////////////////////////////////////////////////////////////////////////\n                          ///////    Focus    ///////\n    /////////////////////////////////////////////////////////////////////////////\n\n    function set_focus(d) {\n        d3.event.stopPropagation();\n        node.style(\"opacity\", function(o) { return (d == o || o.layer == d.layer - 1) ? 1 : 0.1; });\n        link.style(\"opacity\", function(o) { return (o.target == d.id) ? 1 : 0.02; });\n    }\n\n    function remove_focus() {\n        d3.event.stopPropagation();\n        node.style(\"opacity\", 1);\n        link.style(\"opacity\", function () { return edgeOpacity; })\n    }\n\n    /////////////////////////////////////////////////////////////////////////////\n                          ///////    Zoom & Resize   ///////\n    /////////////////////////////////////////////////////////////////////////////\n\n    svg.call(d3.zoom()\n               .scaleExtent([1 / 2, 8])\n               .on(\"zoom\", zoomed));\n\n    function zoomed() { g.attr(\"transform\", d3.event.transform); }\n\n    function resize() {\n        w = window.innerWidth;\n        h = window.innerHeight;\n        svg.attr(\"width\", w).attr(\"height\", h);\n    }\n\n    d3.select(window).on(\"resize\", resize)\n\n    resize();\n\n    /////////////////////////////////////////////////////////////////////////////\n                          ///////    Return    ///////\n    /////////////////////////////////////////////////////////////////////////////\n\n    return {\n        'redraw'           : redraw,\n        'redistribute'     : redistribute,\n        'style'            : style,\n\n        'graph'            : graph,\n        'link'             : link\n    }\n\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "MIT License\n\nCopyright (c) 2018 Alexander Lenail\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "LeNet.html",
          "type": "blob",
          "size": 20.3486328125,
          "content": "<!doctype html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\n<head>\n    <!-- Global site tag (gtag.js) - Google Analytics -->\n    <script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-119008715-1\"></script>\n    <script>\n        window.dataLayer = window.dataLayer || [];\n        function gtag(){dataLayer.push(arguments);}\n        gtag('js', new Date());\n\n        gtag('config', 'UA-119008715-1');\n    </script>\n\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\">\n\n    <style type=\"text/css\">\n        * { font-weight: 100; }\n        h1 { font-weight: 100; }\n        #graph-container {\n            top: 0;\n            bottom: 0;\n            left: 0;\n            right: 0;\n            position: fixed;\n        }\n\n        .nn-picker {\n            width: 410px;\n            margin: 30px;\n            z-index: 1000;\n        }\n\n        [data-toggle=\"collapse\"] .fa:before {\n            font-size: 2rem;\n            color: black;\n            content: \"\\f106\";\n            position: relative;\n            top: 5px;\n        }\n        .fa {\n          transition: 0.3s transform ease-in-out;\n        }\n        .collapsed .fa {\n          transform: rotate(-180deg);\n        }\n        .tab-content {\n            padding: 20px;\n        }\n        input[type=\"range\"] {\n            margin-left: 10px;\n        }\n        #count {\n            position: fixed;\n            bottom: 0;\n            right: 1rem;\n            opacity: 0.4;\n            font-weight: 100;\n        }\n        .text {\n            font-weight: 300;\n        }\n    </style>\n\n    <title>NN SVG</title>\n\n</head>\n<body>\n\n\n    <div id=\"graph-container\"></div>\n\n    <div class=\"container-fluid\">\n\n        <div class=\"row\">\n            <div class=\"nn-picker\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <a class=\"pull-right\" data-toggle=\"collapse\" href=\"#collapsable\" role=\"button\"><i class=\"fa\"></i></a>\n                        <h1>NN-SVG</h1>\n                        <p>Publication-ready NN-architecture schematics. <a id=\"download\" href=\"#\">Download SVG</a></p>\n\n                        <nav>\n                            <div class=\"nav nav-tabs card-header-tabs\" role=\"tablist\">\n                                <a class=\"nav-item nav-link\" href=\"index.html\">FCNN style</a>\n                                <a class=\"nav-item nav-link active\">LeNet style</a>\n                                <a class=\"nav-item nav-link\" href=\"AlexNet.html\">AlexNet style</a>\n                            </div>\n                        </nav>\n\n                    </div>\n                    <div class=\"tab-content collapse show\" id=\"collapsable\">\n\n                        <div class=\"tab-pane fade show active\" id=\"LeNet\" role=\"tabpanel\">\n                            <h4>Style:</h4>\n\n                            <div>\n                                <input type=\"color\" value=\"#e0e0e0\" id=\"color1\">\n                                <label for=\"color1\">Color 1</label>\n                            </div>\n                            <div>\n                                <input type=\"color\" value=\"#a0a0a0\" id=\"color2\">\n                                <label for=\"color2\">Color 2</label>\n                            </div>\n                            <div>\n                                <label for=\"rectOpacity\">Filter Opacity</label>\n                                <input type=\"range\" id=\"rectOpacity\" name=\"\" min=\"0.2\" max=\"1\" step=\"0.01\" value=\"0.9\" style=\"position: relative; top: 3px;\">\n                            </div>\n                            <div>\n                                <label for=\"borderWidth\">Border Width</label>\n                                <input type=\"range\" id=\"borderWidth\" name=\"\" min=\"0.01\" max=\"3\" step=\"0.01\" value=\"1\" style=\"position: relative; top: 3px;\">\n                            </div>\n                            <div>\n                                <label for=\"betweenSquares\">Spacing Between Filters</label>\n                                <input type=\"range\" id=\"betweenSquares\" name=\"\" min=\"1\" max=\"40\" step=\"1\" value=\"10\" style=\"position: relative; top: 3px;\">\n                            </div>\n                            <div>\n                                <input type=\"checkbox\" id=\"showLabels\" name=\"showLabels\" value=\"showLabels\" checked>\n                                <label for=\"showLabels\">Show Layer Labels</label>\n                            </div>\n                            \n                            <hr>\n                            <div></div>\n                                <input type=\"checkbox\" id=\"sqrtLength\" name=\"sqrtLength\" value=\"sqrtLength\">\n                                <label for=\"sqrtLength\">Sqrt Vector Length Scaling</label>\n                            </div>\n                            <div>\n                                <label for=\"lengthScale\">Length Size Scaling</label>\n                                <input type=\"range\" id=\"lengthScale\" name=\"\" min=\"1\" max=\"200\" step=\"1\" value=\"100\" style=\"position: relative; top: 3px;\">\n                                <span id=\"lengthSpan\">100</span>\n                                <span>%</span>\n                            </div>\n\n                            <hr>\n                            <h4>Architecture:</h4>\n                            <div id=\"architecture\">\n                                <p>Depth | Height | Width | filter Height | filter Width</p>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"numberOfSquares\" step=\"1\" value=\"8\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"squareHeight\" step=\"1\" value=\"128\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"squareWidth\" step=\"1\" value=\"128\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterHeight\" step=\"1\" value=\"8\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterWidth\" step=\"1\" value=\"8\" />\n                                    </div>\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                        <label for=\"Op\" style=\"width: 36px;padding: 4px;\">Op: </label>\n                                        <input type=\"text\"  class=\"form-control\" name=\"Op\" step=\"1\" value=\"Max-Pool\" />\n                                        <input type=\"range\" class=\"form-control\" name=\"spacing\" min=\"-100\" max=\"100\" step=\"1\" value=\"40\" style=\"margin-left: 10px !important;\">\n                                    </div>\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"numberOfSquares\" step=\"1\" value=\"8\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"squareHeight\" step=\"1\" value=\"64\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"squareWidth\" step=\"1\" value=\"64\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterHeight\" step=\"1\" value=\"16\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterWidth\" step=\"1\" value=\"16\" />\n                                    </div>\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                      <label for=\"Op\" style=\"width: 36px;padding: 4px;\">Op: </label>\n                                      <input type=\"text\"  class=\"form-control\" name=\"Op\" step=\"1\" value=\"Convolution\" />\n                                      <input type=\"range\" class=\"form-control\" name=\"spacing\" min=\"-100\" max=\"100\" step=\"1\" value=\"10\" style=\"margin-left: 10px !important;\">\n                                    </div>\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"numberOfSquares\" step=\"1\" value=\"24\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"squareHeight\" step=\"1\" value=\"48\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"squareWidth\" step=\"1\" value=\"48\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterHeight\" step=\"1\" value=\"8\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterWidth\" step=\"1\" value=\"8\" />\n                                    </div>\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                      <label for=\"Op\" style=\"width: 36px;padding: 4px;\">Op: </label>\n                                      <input type=\"text\"  class=\"form-control\" name=\"Op\" step=\"1\" value=\"Max-Pool\" />\n                                      <input type=\"range\" class=\"form-control\" name=\"spacing\" min=\"-100\" max=\"100\" step=\"1\" value=\"-20\" style=\"margin-left: 10px !important;\">\n                                    </div>\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"numberOfSquares\" step=\"1\" value=\"24\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"squareHeight\" step=\"1\" value=\"16\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"squareWidth\" step=\"1\" value=\"16\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterHeight\" step=\"1\" value=\"8\" />\n                                        <input type=\"number\" class=\"form-control\" name=\"filterWidth\" step=\"1\" value=\"8\" />\n                                    </div>\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                      <label for=\"Op\" style=\"width: 36px;padding: 4px;\">Op: </label>\n                                      <input type=\"text\"  class=\"form-control\" name=\"Op\" step=\"1\" value=\"Dense\" />\n                                      <input type=\"range\" class=\"form-control\" name=\"spacing\" min=\"-100\" max=\"100\" step=\"1\" value=\"-20\" style=\"margin-left: 10px !important;\">\n                                    </div>\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                        <button class=\"btn btn-primary btn-add input-group-prepend\"><span class=\"fa fa-plus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"numberOfSquares\" step=\"1\"/>\n                                        <input type=\"number\" class=\"form-control\" name=\"squareHeight\" step=\"1\"/>\n                                        <input type=\"number\" class=\"form-control\" name=\"squareWidth\" step=\"1\"/>\n                                        <input type=\"number\" class=\"form-control\" name=\"filterHeight\" step=\"1\"/>\n                                        <input type=\"number\" class=\"form-control\" name=\"filterWidth\" step=\"1\"/>\n                                    </div>\n                                    <div class=\"input-group mb-2 mr-sm-2 col-12\">\n                                      <label for=\"Op\" style=\"width: 36px;padding: 4px;\">Op: </label>\n                                      <input type=\"text\"  class=\"form-control\" name=\"Op\" step=\"1\" value=\"\" />\n                                      <input type=\"range\" class=\"form-control\" name=\"spacing\" min=\"-100\" max=\"100\" step=\"1\" value=\"10\" style=\"margin-left: 10px !important;\">\n                                    </div>\n                                </div>\n\n                            </div>\n                            \n                            <hr>\n                            <div id=\"architecture2\">\n                                <p>Vector Length</p>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-5\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"vectorLength\" step=\"1\" value=\"256\" />\n                                    </div>\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-5\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"vectorLength\" step=\"1\" value=\"128\" />\n                                    </div>\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-5\">\n                                        <button class=\"btn btn-primary btn-add input-group-prepend\"><span class=\"fa fa-plus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"vectorLength\" step=\"1\"/>\n                                    </div>\n                                </div>\n\n                            </div>\n\n                        </div>\n\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div id=\"count\"><a style=\"font-size: 1rem\" href=\"about.html\">About</a></div>\n\n\n    <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script>\n\n    <script type=\"text/javascript\" src=\"https://d3js.org/d3.v5.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/underscore@1.13.0/underscore-umd-min.js\"></script>\n\n    <script type=\"text/javascript\" src=\"util.js\"></script>\n    <script type=\"text/javascript\" src=\"LeNet.js\"></script>\n\n    <script type=\"text/javascript\">\n\nlenet = LeNet();\n\nfunction restart() {\n\n    architecture = $('#architecture').find('.entry').map((i,el) =>\n        _.object(['numberOfSquares','squareHeight','squareWidth','filterHeight','filterWidth', 'op', 'layer'],\n                 $(el).find('input[type=\"number\"]').map((j,input) => parseFloat($(input).val())).get().concat([$(el).find('input[type=\"text\"]').val(), i]))\n        ).get()\n         .filter(layer => Object.values(layer).every(val => !_.isNaN(val)));\n\n    betweenLayers = $('#architecture').find('input[type=\"range\"]').map((i,el) => $(el).val()).get().filter(input => $.isNumeric(input)).map(s => parseInt(s)); betweenLayers.pop();\n\n    architecture2 = $('#architecture2').find('input').map((i,el) => $(el).val()).get().filter(input => $.isNumeric(input)).map(s => parseInt(s));\n    \n    sqrtLength = $('#sqrtLength').prop('checked');\n    lengthScale = parseFloat($('#lengthScale').prop('value'));\n\n\n    lenet.redraw({'architecture_':architecture, 'architecture2_':architecture2, 'sqrtLength_': sqrtLength, 'lengthScale_': lengthScale});\n    lenet.redistribute({'betweenLayers_':betweenLayers});\n\n}\n\nrestart();\n\n/////////////////////////////////////////////////////////////////////////////\n                ///////    Select Styling    ///////\n/////////////////////////////////////////////////////////////////////////////\n\n$(\"#color1\").change(         function () { lenet.style({'color1_': this.value}); });\n$(\"#color2\").change(         function () { lenet.style({'color2_': this.value}); });\n$(\"#borderWidth\").change(    function () { lenet.style({'borderWidth_': parseFloat(this.value)}); });\n$(\"#rectOpacity\").change(    function () { lenet.style({'rectOpacity_': parseFloat(this.value)}); });\n$(\"#betweenSquares\").change( function () { lenet.redistribute({'betweenSquares_': parseFloat(this.value)}); });\n$(\"#showLabels\").change(     function () { lenet.style({'showLabels_': this.checked}); });\n\n$(\"input[name='spacing']\").change(function() {\n    betweenLayers = $('#architecture').find('input[type=\"range\"]').map((i,el) => $(el).val()).get().filter(input => $.isNumeric(input)).map(s => parseInt(s)); betweenLayers.pop();\n    lenet.redistribute({'betweenLayers_':betweenLayers});\n});\n\n\n/////////////////////////////////////////////////////////////////////////////\n                 ///////    Select Architecture    ///////\n/////////////////////////////////////////////////////////////////////////////\n\n\n$(document).on('click', '#architecture .btn-add', function(e) {\n    e.preventDefault();\n\n    var controlForm = $('#architecture');\n    var currentEntry = $(this).parents('.entry:first');\n    var newEntry = $(currentEntry.clone()).appendTo(controlForm);\n\n    newEntry.find('input').val('');\n    controlForm.find('.entry:not(:last) .btn-add')\n        .removeClass('btn-add').addClass('btn-remove')\n        .removeClass('btn-primary').addClass('btn-secondary')\n        .html('<span class=\"fa fa-minus\"></span>');\n\n    restart();\n\n});\n\n$(document).on('click', '#architecture .btn-remove', function(e) {\n    e.preventDefault();\n\n    $(this).parents('.entry:first').remove();\n\n    restart();\n\n    return false;\n\n});\n\n$(document).on('click', '#architecture2 .btn-add', function(e) {\n    e.preventDefault();\n\n    var controlForm = $('#architecture2');\n    var currentEntry = $(this).parents('.entry:first');\n    var newEntry = $(currentEntry.clone()).appendTo(controlForm);\n\n    newEntry.find('input').val('');\n    controlForm.find('.entry:not(:last) .btn-add')\n        .removeClass('btn-add').addClass('btn-remove')\n        .removeClass('btn-primary').addClass('btn-secondary')\n        .html('<span class=\"fa fa-minus\"></span>');\n\n    restart();\n\n});\n\n$(document).on('click', '#architecture2 .btn-remove', function(e) {\n    e.preventDefault();\n\n    $(this).parents('.entry:first').remove();\n\n    restart();\n\n    return false;\n\n});\n\n$(document).on('change', 'input[type=\"number\"]', function(e) {\n    e.preventDefault();\n\n    restart();  // TODO only fire if the whole row is filled.\n\n});\n\n$(document).on('change', 'input[type=\"text\"]', function(e) {\n    e.preventDefault();\n\n    restart();\n});\n\n$(document).on('change', '#sqrtLength', function(e) {\n    e.preventDefault();\n\n    restart();\n});\n\n$(document).on('change', '#lengthScale', function(e) {\n    e.preventDefault();\n    $(\"#lengthSpan\").text(e.target.value)\n    restart();\n});\n\n\nd3.select(\"#download\").on(\"click\", function() {\n    // ga('send', 'event', 'downloadSVG', 'LeNet');\n\n    d3.select(this)\n      .attr(\"href\", 'data:application/octet-stream;base64,' + btoa(unescape(encodeURIComponent(d3.select(\"#graph-container\").html()))))\n      .attr(\"download\", \"nn.svg\")\n});\n\n    </script>\n\n</body>\n\n</html>\n"
        },
        {
          "name": "LeNet.js",
          "type": "blob",
          "size": 11.4306640625,
          "content": "\nfunction LeNet() {\n\n    /////////////////////////////////////////////////////////////////////////////\n                          ///////    Variables    ///////\n    /////////////////////////////////////////////////////////////////////////////\n\n    var w = window.innerWidth;\n    var h = window.innerHeight;\n\n    var svg = d3.select(\"#graph-container\").append(\"svg\").attr(\"xmlns\", \"http://www.w3.org/2000/svg\");\n    var g = svg.append(\"g\");\n    svg.style(\"cursor\", \"move\");\n\n    var color1 = '#e0e0e0';\n    var color2 = '#a0a0a0';\n    var borderWidth = 1.0;\n    var borderColor = \"black\";\n    var rectOpacity = 0.8;\n    var betweenSquares = 8;\n    var betweenLayers = [];\n    var betweenLayersDefault = 12;\n\n    var architecture = [];\n    var architecture2 = [];\n    var lenet = {};\n    var layer_offsets = [];\n    var largest_layer_width = 0;\n    var showLabels = true;\n\n    var sqrtLength = false;\n    var lengthScale = 100;\n    \n    let lengthFn = (length) => sqrtLength ? (Math.sqrt(length) * lengthScale/10) : (length * lengthScale/100);\n\n    let textFn = (layer) => (typeof(layer) === \"object\" ? layer['numberOfSquares']+'@'+layer['squareHeight']+'x'+layer['squareWidth'] : \"1x\"+layer)\n\n    var rect, conv, link, poly, line, text, info;\n\n    /////////////////////////////////////////////////////////////////////////////\n                          ///////    Methods    ///////\n    /////////////////////////////////////////////////////////////////////////////\n\n    function redraw({architecture_=architecture,\n                     architecture2_=architecture2, \n                     sqrtLength_=sqrtLength,\n                     lengthScale_=lengthScale,}={}) {\n\n        architecture = architecture_;\n        architecture2 = architecture2_;\n        sqrtLength = sqrtLength_;\n        lengthScale = lengthScale_;\n\n        lenet.rects = architecture.map((layer, layer_index) => range(layer['numberOfSquares']).map(rect_index => {return {'id':layer_index+'_'+rect_index,'layer':layer_index,'rect_index':rect_index,'width':layer['squareWidth'],'height':layer['squareHeight']}}));\n        lenet.rects = flatten(lenet.rects);\n\n        lenet.convs = architecture.map((layer, layer_index) => Object.assign({'id':'conv_'+layer_index,'layer':layer_index}, layer)); lenet.convs.pop();\n        lenet.convs = lenet.convs.map(conv => Object.assign({'x_rel':rand(0.1, 0.9),'y_rel':rand(0.1, 0.9)}, conv))\n\n        lenet.conv_links = lenet.convs.map(conv => {return [Object.assign({'id':'link_'+conv['layer']+'_0','i':0},conv), Object.assign({'id':'link_'+conv['layer']+'_1','i':1},conv)]});\n        lenet.conv_links = flatten(lenet.conv_links);\n\n        lenet.fc_layers = architecture2.map((size, fc_layer_index) => {return {'id': 'fc_'+fc_layer_index, 'layer':fc_layer_index+architecture.length, 'size': lengthFn(size)}});\n        lenet.fc_links = lenet.fc_layers.map(fc => { return [Object.assign({'id':'link_'+fc['layer']+'_0','i':0,'prevSize':10},fc), Object.assign({'id':'link_'+fc['layer']+'_1','i':1,'prevSize':10},fc)]});\n        lenet.fc_links = flatten(lenet.fc_links);\n\n        // hacks\n        if (lenet.rects.length > 0 && lenet.fc_layers.length > 0) {\n            lenet.fc_links[0]['prevSize'] = 0;\n            lenet.fc_links[1]['prevSize'] = lenet.rects.last()['width'];\n        }\n\n        label = architecture.map((layer, layer_index) => { return {'id':'data_'+layer_index+'_label','layer':layer_index,'text':textFn(layer)}})\n                             .concat(architecture2.map((layer, layer_index) => { return {'id':'data_'+layer_index+architecture.length+'_label','layer':layer_index+architecture.length,'text':textFn(layer)}}) );\n\n        g.selectAll('*').remove();\n\n        rect = g.selectAll(\".rect\")\n                .data(lenet.rects)\n                .enter()\n                .append(\"rect\")\n                .attr(\"class\", \"rect\")\n                .attr(\"id\", d => d.id)\n                .attr(\"width\", d => d.width)\n                .attr(\"height\", d => d.height);\n\n        conv = g.selectAll(\".conv\")\n                .data(lenet.convs)\n                .enter()\n                .append(\"rect\")\n                .attr(\"class\", \"conv\")\n                .attr(\"id\", d => d.id)\n                .attr(\"width\", d => d.filterWidth)\n                .attr(\"height\", d => d.filterHeight)\n                .style(\"fill-opacity\", 0);\n\n        link = g.selectAll(\".link\")\n                .data(lenet.conv_links)\n                .enter()\n                .append(\"line\")\n                .attr(\"class\", \"link\")\n                .attr(\"id\", d => d.id);\n\n        poly = g.selectAll(\".poly\")\n                .data(lenet.fc_layers)\n                .enter()\n                .append(\"polygon\")\n                .attr(\"class\", \"poly\")\n                .attr(\"id\", d => d.id);\n\n        line = g.selectAll(\".line\")\n                .data(lenet.fc_links)\n                .enter()\n                .append(\"line\")\n                .attr(\"class\", \"line\")\n                .attr(\"id\", d => d.id);\n\n        text = g.selectAll(\".text\")\n                .data(architecture)\n                .enter()\n                .append(\"text\")\n                .text(d => (showLabels ? d.op : \"\"))\n                .attr(\"class\", \"text\")\n                .attr(\"dy\", \".35em\")\n                .style(\"font-size\", \"16px\")\n                .attr(\"font-family\", \"sans-serif\");\n\n        info = g.selectAll(\".info\")\n                .data(label)\n                .enter()\n                .append(\"text\")\n                .text(d => (showLabels ? d.text : \"\"))\n                .attr(\"class\", \"info\")\n                .attr(\"dy\", \"-0.3em\")\n                .style(\"font-size\", \"16px\")\n                .attr(\"font-family\", \"sans-serif\");\n\n        style();\n\n    }\n\n    function redistribute({betweenLayers_=betweenLayers,\n                           betweenSquares_=betweenSquares}={}) {\n\n        betweenLayers = betweenLayers_;\n        betweenSquares = betweenSquares_;\n\n        layer_widths = architecture.map((layer, i) => (layer['numberOfSquares']-1) * betweenSquares + layer['squareWidth']);\n        layer_widths = layer_widths.concat(lenet.fc_layers.map((layer, i) => layer['size'])).concat([0]);\n\n        largest_layer_width = Math.max(...layer_widths);\n\n        layer_x_offsets = layer_widths.reduce((offsets, layer_width, i) => offsets.concat([offsets.last() + layer_width + (betweenLayers[i] || betweenLayersDefault) ]), [0]).concat([0]);\n        layer_y_offsets = layer_widths.map(layer_width => (largest_layer_width - layer_width) / 2).concat([0]);\n\n        screen_center_x = w/2 - architecture.length * largest_layer_width/2;\n        screen_center_y = h/2 - largest_layer_width/2;\n\n        let x = (layer, node_index) => layer_x_offsets[layer] + (node_index * betweenSquares) + screen_center_x;\n        let y = (layer, node_index) => layer_y_offsets[layer] + (node_index * betweenSquares) + screen_center_y;\n\n        rect.attr('x', d => x(d.layer, d.rect_index))\n            .attr('y', d => y(d.layer, d.rect_index));\n\n        let xc = (d) => (layer_x_offsets[d.layer]) + ((d['numberOfSquares']-1) * betweenSquares) + (d['x_rel'] * (d['squareWidth'] - d['filterWidth'])) + screen_center_x;\n        let yc = (d) => (layer_y_offsets[d.layer]) + ((d['numberOfSquares']-1) * betweenSquares) + (d['y_rel'] * (d['squareHeight'] - d['filterHeight'])) + screen_center_y;\n\n        conv.attr('x', d => xc(d))\n            .attr('y', d => yc(d));\n\n        link.attr(\"x1\", d => xc(d) + d['filterWidth'])\n            .attr(\"y1\", d => yc(d) + (d.i ? 0 : d['filterHeight']))\n            .attr(\"x2\", d => (layer_x_offsets[d.layer+1]) + ((architecture[d.layer+1]['numberOfSquares']-1) * betweenSquares) + architecture[d.layer+1]['squareWidth'] * d.x_rel + screen_center_x)\n            .attr(\"y2\", d => (layer_y_offsets[d.layer+1]) + ((architecture[d.layer+1]['numberOfSquares']-1) * betweenSquares) + architecture[d.layer+1]['squareHeight'] * d.y_rel + screen_center_y);\n\n\n        poly.attr(\"points\", function(d) {\n            return ((layer_x_offsets[d.layer]+screen_center_x)           +','+(layer_y_offsets[d.layer]+screen_center_y)+\n                ' '+(layer_x_offsets[d.layer]+screen_center_x+10)        +','+(layer_y_offsets[d.layer]+screen_center_y)+\n                ' '+(layer_x_offsets[d.layer]+screen_center_x+d.size+10) +','+(layer_y_offsets[d.layer]+screen_center_y+d.size)+\n                ' '+(layer_x_offsets[d.layer]+screen_center_x+d.size)    +','+(layer_y_offsets[d.layer]+screen_center_y+d.size));\n        });\n\n        line.attr(\"x1\", d => layer_x_offsets[d.layer-1] + (d.i ? 0 : layer_widths[d.layer-1]) + d.prevSize + screen_center_x)\n            .attr(\"y1\", d => layer_y_offsets[d.layer-1] + (d.i ? 0 : layer_widths[d.layer-1]) + screen_center_y)\n            .attr(\"x2\", d => layer_x_offsets[d.layer] + (d.i ? 0 : d.size) + screen_center_x)\n            .attr(\"y2\", d => layer_y_offsets[d.layer] + (d.i ? 0 : d.size) + screen_center_y)\n            .style('opacity', d => +(d.layer > 0));\n\n        text.attr('x', d => (layer_x_offsets[d.layer] + layer_widths[d.layer] + layer_x_offsets[d.layer+1] + layer_widths[d.layer+1]/2)/2 + screen_center_x -15)\n            .attr('y', d => layer_y_offsets[0] + screen_center_y + largest_layer_width)\n            .style('opacity', d => +(d.layer+1 < architecture.length || architecture2.length > 0));\n\n        info.attr('x', d => layer_x_offsets[d.layer] + screen_center_x)\n            .attr('y', d => layer_y_offsets[d.layer] + screen_center_y - 15);\n\n    }\n\n    function style({color1_=color1,\n                    color2_=color2,\n                    borderWidth_=borderWidth,\n                    rectOpacity_=rectOpacity,\n                    showLabels_=showLabels}={}) {\n        color1      = color1_;\n        color2      = color2_;\n        borderWidth = borderWidth_;\n        rectOpacity = rectOpacity_;\n        showLabels  = showLabels_;\n\n        rect.style(\"fill\", d => d.rect_index % 2 ? color1 : color2);\n        poly.style(\"fill\", color1);\n\n        rect.style(\"stroke\", borderColor);\n        conv.style(\"stroke\", borderColor);\n        link.style(\"stroke\", borderColor);\n        poly.style(\"stroke\", borderColor);\n        line.style(\"stroke\", borderColor);\n\n        rect.style(\"stroke-width\", borderWidth);\n        conv.style(\"stroke-width\", borderWidth);\n        link.style(\"stroke-width\", borderWidth / 2);\n        poly.style(\"stroke-width\", borderWidth);\n        line.style(\"stroke-width\", borderWidth / 2);\n\n        rect.style(\"opacity\", rectOpacity);\n        conv.style(\"stroke-opacity\", rectOpacity);\n        link.style(\"stroke-opacity\", rectOpacity);\n        poly.style(\"opacity\", rectOpacity);\n        line.style(\"stroke-opacity\", rectOpacity);\n\n        text.text(d => (showLabels ? d.op : \"\"));\n        info.text(d => (showLabels ? d.text : \"\"));\n    }\n\n    /////////////////////////////////////////////////////////////////////////////\n                        ///////    Zoom & Resize   ///////\n    /////////////////////////////////////////////////////////////////////////////\n\n    svg.call(d3.zoom()\n               .scaleExtent([1 / 2, 8])\n               .on(\"zoom\", zoomed));\n\n    function zoomed() { g.attr(\"transform\", d3.event.transform); }\n\n    function resize() {\n        w = window.innerWidth;\n        h = window.innerHeight;\n        svg.attr(\"width\", w).attr(\"height\", h);\n    }\n\n    d3.select(window).on(\"resize\", resize)\n\n    resize();\n\n\n    /////////////////////////////////////////////////////////////////////////////\n                          ///////    Return    ///////\n    /////////////////////////////////////////////////////////////////////////////\n\n    return {\n        'redraw'         : redraw,\n        'redistribute'   : redistribute,\n        'style'          : style,\n    }\n\n}\n"
        },
        {
          "name": "OrbitControls.js",
          "type": "blob",
          "size": 22.1435546875,
          "content": "/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: two-finger move\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tthis.object = object;\n\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.25;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = false; // if true, pan in screen-space\n\tthis.keyPanSpeed = 20.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t// restrict theta to be between desired limits\n\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\t\t\tscope.target.add( panOffset );\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = { NONE: - 1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY_PAN: 4 };\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\t//console.log( 'handleMouseDownRotate' );\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\t//console.log( 'handleMouseDownDolly' );\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\t//console.log( 'handleMouseDownPan' );\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\t//console.log( 'handleMouseMoveRotate' );\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t// rotating across whole screen goes 360 degrees around\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth );\n\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\t//console.log( 'handleMouseMoveDolly' );\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\t//console.log( 'handleMouseMovePan' );\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( event ) {\n\n\t\t// console.log( 'handleMouseUp' );\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\t// console.log( 'handleMouseWheel' );\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\t//console.log( 'handleKeyDown' );\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\t//console.log( 'handleTouchStartRotate' );\n\n\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\t//console.log( 'handleTouchStartDollyPan' );\n\n\t\tif ( scope.enableZoom ) {\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyStart.set( 0, distance );\n\n\t\t}\n\n\t\tif ( scope.enablePan ) {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\t//console.log( 'handleTouchMoveRotate' );\n\n\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t// rotating across whole screen goes 360 degrees around\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth );\n\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\t//console.log( 'handleTouchMoveDollyPan' );\n\n\t\tif ( scope.enableZoom ) {\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyEnd.set( 0, distance );\n\n\t\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\t\tdollyIn( dollyDelta.y );\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t}\n\n\t\tif ( scope.enablePan ) {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchEnd( event ) {\n\n\t\t//console.log( 'handleTouchEnd' );\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase scope.mouseButtons.ORBIT:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\tbreak;\n\n\t\t\tcase scope.mouseButtons.ZOOM:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase scope.mouseButtons.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\t// two-fingered touch: dolly-pan\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // two-fingered touch: dolly-pan\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_DOLLY_PAN ) return; // is this needed?\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\nObject.defineProperties( THREE.OrbitControls.prototype, {\n\n\tcenter: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\n\t\t\treturn this.target;\n\n\t\t}\n\n\t},\n\n\t// backward compatibility\n\n\tnoZoom: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\treturn ! this.enableZoom;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\tthis.enableZoom = ! value;\n\n\t\t}\n\n\t},\n\n\tnoRotate: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\treturn ! this.enableRotate;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\tthis.enableRotate = ! value;\n\n\t\t}\n\n\t},\n\n\tnoPan: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\treturn ! this.enablePan;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\tthis.enablePan = ! value;\n\n\t\t}\n\n\t},\n\n\tnoKeys: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\treturn ! this.enableKeys;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\tthis.enableKeys = ! value;\n\n\t\t}\n\n\t},\n\n\tstaticMoving: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\treturn ! this.enableDamping;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\tthis.enableDamping = ! value;\n\n\t\t}\n\n\t},\n\n\tdynamicDampingFactor: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\treturn this.dampingFactor;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\tthis.dampingFactor = value;\n\n\t\t}\n\n\t}\n\n} );\n"
        },
        {
          "name": "Projector.js",
          "type": "blob",
          "size": 22.58984375,
          "content": "/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author julianwa / https://github.com/julianwa\n */\n\nTHREE.RenderableObject = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableFace = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\tthis.v3 = new THREE.RenderableVertex();\n\n\tthis.normalModel = new THREE.Vector3();\n\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\tthis.vertexNormalsLength = 0;\n\n\tthis.color = new THREE.Color();\n\tthis.material = null;\n\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableVertex = function () {\n\n\tthis.position = new THREE.Vector3();\n\tthis.positionWorld = new THREE.Vector3();\n\tthis.positionScreen = new THREE.Vector4();\n\n\tthis.visible = true;\n\n};\n\nTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\n\tthis.positionWorld.copy( vertex.positionWorld );\n\tthis.positionScreen.copy( vertex.positionScreen );\n\n};\n\n//\n\nTHREE.RenderableLine = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\n\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\tthis.material = null;\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableSprite = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\n\tthis.x = 0;\n\tthis.y = 0;\n\tthis.z = 0;\n\n\tthis.rotation = 0;\n\tthis.scale = new THREE.Vector2();\n\n\tthis.material = null;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.Projector = function () {\n\n\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\n\t\t_renderData = { objects: [], lights: [], elements: [] },\n\n\t\t_vector3 = new THREE.Vector3(),\n\t\t_vector4 = new THREE.Vector4(),\n\n\t\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t\t_boundingBox = new THREE.Box3(),\n\t\t_points3 = new Array( 3 ),\n\n\t\t_viewMatrix = new THREE.Matrix4(),\n\t\t_viewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t_modelMatrix,\n\t\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t_normalMatrix = new THREE.Matrix3(),\n\n\t\t_frustum = new THREE.Frustum(),\n\n\t\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\n\t//\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function () {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n\t//\n\n\tvar RenderList = function () {\n\n\t\tvar normals = [];\n\t\tvar colors = [];\n\t\tvar uvs = [];\n\n\t\tvar object = null;\n\t\tvar material = null;\n\n\t\tvar normalMatrix = new THREE.Matrix3();\n\n\t\tfunction setObject( value ) {\n\n\t\t\tobject = value;\n\t\t\tmaterial = object.material;\n\n\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\n\t\t\tnormals.length = 0;\n\t\t\tcolors.length = 0;\n\t\t\tuvs.length = 0;\n\n\t\t}\n\n\t\tfunction projectVertex( vertex ) {\n\n\t\t\tvar position = vertex.position;\n\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\tvar positionScreen = vertex.positionScreen;\n\n\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\n\t\t\tvar invW = 1 / positionScreen.w;\n\n\t\t\tpositionScreen.x *= invW;\n\t\t\tpositionScreen.y *= invW;\n\t\t\tpositionScreen.z *= invW;\n\n\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\n\t\t}\n\n\t\tfunction pushVertex( x, y, z ) {\n\n\t\t\t_vertex = getNextVertexInPool();\n\t\t\t_vertex.position.set( x, y, z );\n\n\t\t\tprojectVertex( _vertex );\n\n\t\t}\n\n\t\tfunction pushNormal( x, y, z ) {\n\n\t\t\tnormals.push( x, y, z );\n\n\t\t}\n\n\t\tfunction pushColor( r, g, b ) {\n\n\t\t\tcolors.push( r, g, b );\n\n\t\t}\n\n\t\tfunction pushUv( x, y ) {\n\n\t\t\tuvs.push( x, y );\n\n\t\t}\n\n\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\n\n\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\n\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t_points3[ 2 ] = v3.positionScreen;\n\n\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\n\n\t\t}\n\n\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\n\n\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\n\t\t}\n\n\t\tfunction pushLine( a, b ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\n\t\t\t// Clip\n\n\t\t\tv1.positionScreen.copy( v1.position ).applyMatrix4( _modelViewProjectionMatrix );\n\t\t\tv2.positionScreen.copy( v2.position ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\tif ( clipLine( v1.positionScreen, v2.positionScreen ) === true ) {\n\n\t\t\t\t// Perform the perspective divide\n\t\t\t\tv1.positionScreen.multiplyScalar( 1 / v1.positionScreen.w );\n\t\t\t\tv2.positionScreen.multiplyScalar( 1 / v2.positionScreen.w );\n\n\t\t\t\t_line = getNextLineInPool();\n\t\t\t\t_line.id = object.id;\n\t\t\t\t_line.v1.copy( v1 );\n\t\t\t\t_line.v2.copy( v2 );\n\t\t\t\t_line.z = Math.max( v1.positionScreen.z, v2.positionScreen.z );\n\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t_line.material = object.material;\n\n\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\t_line.vertexColors[ 0 ].fromArray( colors, a * 3 );\n\t\t\t\t\t_line.vertexColors[ 1 ].fromArray( colors, b * 3 );\n\n\t\t\t\t}\n\n\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushTriangle( a, b, c ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\tvar v3 = _vertexPool[ c ];\n\n\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\n\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\n\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t_face.id = object.id;\n\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t// use first vertex normal as face normal\n\n\t\t\t\t_face.normalModel.fromArray( normals, a * 3 );\n\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\n\n\t\t\t\t}\n\n\t\t\t\t_face.vertexNormalsLength = 3;\n\n\t\t\t\t_face.material = object.material;\n\n\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetObject: setObject,\n\t\t\tprojectVertex: projectVertex,\n\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\tpushVertex: pushVertex,\n\t\t\tpushNormal: pushNormal,\n\t\t\tpushColor: pushColor,\n\t\t\tpushUv: pushUv,\n\t\t\tpushLine: pushLine,\n\t\t\tpushTriangle: pushTriangle\n\t\t};\n\n\t};\n\n\tvar renderList = new RenderList();\n\n\tfunction projectObject( object ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t_renderData.lights.push( object );\n\n\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\n\n\t\t\tif ( object.material.visible === false ) return;\n\t\t\tif ( object.frustumCulled === true && _frustum.intersectsObject( object ) === false ) return;\n\n\t\t\taddObject( object );\n\n\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\tif ( object.material.visible === false ) return;\n\t\t\tif ( object.frustumCulled === true && _frustum.intersectsSprite( object ) === false ) return;\n\n\t\t\taddObject( object );\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction addObject( object ) {\n\n\t\t_object = getNextObjectInPool();\n\t\t_object.id = object.id;\n\t\t_object.object = object;\n\n\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t_vector3.applyMatrix4( _viewProjectionMatrix );\n\t\t_object.z = _vector3.z;\n\t\t_object.renderOrder = object.renderOrder;\n\n\t\t_renderData.objects.push( _object );\n\n\t}\n\n\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\n\t\t_faceCount = 0;\n\t\t_lineCount = 0;\n\t\t_spriteCount = 0;\n\n\t\t_renderData.elements.length = 0;\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t_viewMatrix.copy( camera.matrixWorldInverse );\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\n\n\t\t//\n\n\t\t_objectCount = 0;\n\n\t\t_renderData.objects.length = 0;\n\t\t_renderData.lights.length = 0;\n\n\t\tprojectObject( scene );\n\n\t\tif ( sortObjects === true ) {\n\n\t\t\t_renderData.objects.sort( painterSort );\n\n\t\t}\n\n\t\t//\n\n\t\tvar objects = _renderData.objects;\n\n\t\tfor ( var o = 0, ol = objects.length; o < ol; o ++ ) {\n\n\t\t\tvar object = objects[ o ].object;\n\t\t\tvar geometry = object.geometry;\n\n\t\t\trenderList.setObject( object );\n\n\t\t\t_modelMatrix = object.matrixWorld;\n\n\t\t\t_vertexCount = 0;\n\n\t\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\n\t\t\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\tfor ( var g = 0; g < groups.length; g ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ g ];\n\n\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\n\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t_vector3.copy( vertex );\n\n\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\n\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\n\t\t\t\t\t\tmaterial = isMultiMaterial === true\n\t\t\t\t\t\t\t ? object.material[ face.materialIndex ]\n\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\tvar side = material.side;\n\n\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\n\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\n\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\n\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\n\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t_face.v3.copy( v3 );\n\n\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\n\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t_face.normalModel.negate();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\n\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\n\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t\tnormalModel.negate();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\n\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\n\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\n\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t_face.material = material;\n\n\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attributes.color !== undefined ) {\n\n\t\t\t\t\t\t\tvar colors = attributes.color.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = colors.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushColor( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\n\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\n\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\n\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\n\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\n\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\n\t\t\t\t\t\t\t_line = getNextLineInPool();\n\n\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\n\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t\t_line.material = object.material;\n\n\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Points ) {\n\n\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t_vector4.set( vertex.x, vertex.y, vertex.z, 1 );\n\t\t\t\t\t\t_vector4.applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t_vector4.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ], 1 );\n\t\t\t\t\t\t\t_vector4.applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( sortElements === true ) {\n\n\t\t\t_renderData.elements.sort( painterSort );\n\n\t\t}\n\n\t\treturn _renderData;\n\n\t};\n\n\tfunction pushPoint( _vector4, object, camera ) {\n\n\t\tvar invW = 1 / _vector4.w;\n\n\t\t_vector4.z *= invW;\n\n\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\n\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t_sprite.id = object.id;\n\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t_sprite.z = _vector4.z;\n\t\t\t_sprite.renderOrder = object.renderOrder;\n\t\t\t_sprite.object = object;\n\n\t\t\t_sprite.rotation = object.rotation;\n\n\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\n\t\t\t_sprite.material = object.material;\n\n\t\t\t_renderData.elements.push( _sprite );\n\n\t\t}\n\n\t}\n\n\t// Pools\n\n\tfunction getNextObjectInPool() {\n\n\t\tif ( _objectCount === _objectPoolLength ) {\n\n\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t_objectPool.push( object );\n\t\t\t_objectPoolLength ++;\n\t\t\t_objectCount ++;\n\t\t\treturn object;\n\n\t\t}\n\n\t\treturn _objectPool[ _objectCount ++ ];\n\n\t}\n\n\tfunction getNextVertexInPool() {\n\n\t\tif ( _vertexCount === _vertexPoolLength ) {\n\n\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t_vertexPool.push( vertex );\n\t\t\t_vertexPoolLength ++;\n\t\t\t_vertexCount ++;\n\t\t\treturn vertex;\n\n\t\t}\n\n\t\treturn _vertexPool[ _vertexCount ++ ];\n\n\t}\n\n\tfunction getNextFaceInPool() {\n\n\t\tif ( _faceCount === _facePoolLength ) {\n\n\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t_facePool.push( face );\n\t\t\t_facePoolLength ++;\n\t\t\t_faceCount ++;\n\t\t\treturn face;\n\n\t\t}\n\n\t\treturn _facePool[ _faceCount ++ ];\n\n\n\t}\n\n\tfunction getNextLineInPool() {\n\n\t\tif ( _lineCount === _linePoolLength ) {\n\n\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t_linePool.push( line );\n\t\t\t_linePoolLength ++;\n\t\t\t_lineCount ++;\n\t\t\treturn line;\n\n\t\t}\n\n\t\treturn _linePool[ _lineCount ++ ];\n\n\t}\n\n\tfunction getNextSpriteInPool() {\n\n\t\tif ( _spriteCount === _spritePoolLength ) {\n\n\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t_spritePool.push( sprite );\n\t\t\t_spritePoolLength ++;\n\t\t\t_spriteCount ++;\n\t\t\treturn sprite;\n\n\t\t}\n\n\t\treturn _spritePool[ _spriteCount ++ ];\n\n\t}\n\n\t//\n\n\tfunction painterSort( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else if ( a.id !== b.id ) {\n\n\t\t\treturn a.id - b.id;\n\n\t\t} else {\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t}\n\n\tfunction clipLine( s1, s2 ) {\n\n\t\tvar alpha1 = 0, alpha2 = 1,\n\n\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t// Z = -1 and Z = +1, respectively.\n\n\t\t\tbc1near = s1.z + s1.w,\n\t\t\tbc2near = s2.z + s2.w,\n\t\t\tbc1far = - s1.z + s1.w,\n\t\t\tbc2far = - s2.z + s2.w;\n\n\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\n\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\treturn true;\n\n\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\n\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\treturn false;\n\n\t\t} else {\n\n\t\t\t// The line segment spans at least one clip plane.\n\n\t\t\tif ( bc1near < 0 ) {\n\n\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t} else if ( bc2near < 0 ) {\n\n\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t}\n\n\t\t\tif ( bc1far < 0 ) {\n\n\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t} else if ( bc2far < 0 ) {\n\n\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t}\n\n\t\t\tif ( alpha2 < alpha1 ) {\n\n\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.0771484375,
          "content": "# [NN-SVG](https://alexlenail.me/NN-SVG/)\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![status](https://joss.theoj.org/papers/52b511ab107595a805107aa4ad70161d/status.svg)](https://joss.theoj.org/papers/52b511ab107595a805107aa4ad70161d)\n| [Docs](https://github.com/zfrenchee/NN-SVG/wiki) | [Contributing](https://github.com/zfrenchee/NN-SVG/wiki/Contributing)\n\nIllustrations of Neural Network architectures are often time-consuming to produce, and machine learning researchers all too often find themselves constructing these diagrams from scratch by hand.\n\nNN-SVG is a tool for creating Neural Network (NN) architecture drawings parametrically rather than manually. It also provides the ability to export those drawings to Scalable Vector Graphics (SVG) files, suitable for inclusion in academic papers or web pages.\n\nThe tool provides the ability to generate figures of three kinds: classic Fully-Connected Neural Network (FCNN) figures, Convolutional Neural Network (CNN) figures of the sort introduced in [the LeNet paper](http://yann.lecun.com/exdb/publis/pdf/lecun-01a.pdf), and Deep Neural Network figures following the style introduced in [the AlexNet paper](https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf). The former two are accomplished using the [D3 javascript library](https://d3js.org/) and the latter with the javascript library [Three.js](https://threejs.org/). NN-SVG provides the ability to style the figure to the user's liking via many size, color, and layout parameters.\n\nI hope this tool will save machine learning researchers time, and I hope this software might also serve as a pedagogical tool in some contexts.\n\n<img src=\"./example.svg\">\n\n\n### Citation\n\n> LeNail, (2019). NN-SVG: Publication-Ready Neural Network Architecture Schematics. <br>\n> Journal of Open Source Software, 4(33), 747, https://doi.org/10.21105/joss.00747\n\n### Related\n\n- [vdumoulin/conv_arithmetic](https://github.com/vdumoulin/conv_arithmetic)\n- [TensorSpace](https://github.com/tensorspace-team/tensorspace)\n"
        },
        {
          "name": "SVGRenderer.js",
          "type": "blob",
          "size": 11.4765625,
          "content": "/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SVGObject = function ( node ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.node = node;\n\n};\n\nTHREE.SVGObject.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.SVGObject.prototype.constructor = THREE.SVGObject;\n\nTHREE.SVGRenderer = function () {\n\n\tconsole.log( 'THREE.SVGRenderer', THREE.REVISION );\n\n\tvar _this = this,\n\t\t_renderData, _elements, _lights,\n\t\t_projector = new THREE.Projector(),\n\t\t_svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' ),\n\t\t_svgWidth, _svgHeight, _svgWidthHalf, _svgHeightHalf,\n\n\t\t_v1, _v2, _v3,\n\n\t\t_clipBox = new THREE.Box2(),\n\t\t_elemBox = new THREE.Box2(),\n\n\t\t_color = new THREE.Color(),\n\t\t_diffuseColor = new THREE.Color(),\n\t\t_ambientLight = new THREE.Color(),\n\t\t_directionalLights = new THREE.Color(),\n\t\t_pointLights = new THREE.Color(),\n\t\t_clearColor = new THREE.Color(),\n\t\t_clearAlpha = 1,\n\n\t\t_vector3 = new THREE.Vector3(), // Needed for PointLight\n\t\t_centroid = new THREE.Vector3(),\n\t\t_normal = new THREE.Vector3(),\n\t\t_normalViewMatrix = new THREE.Matrix3(),\n\n\t\t_viewMatrix = new THREE.Matrix4(),\n\t\t_viewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t_svgPathPool = [],\n\t\t_svgNode, _pathCount = 0,\n\n\t\t_currentPath, _currentStyle,\n\n\t\t_quality = 1, _precision = null;\n\n\tthis.domElement = _svg;\n\n\tthis.autoClear = true;\n\tthis.sortObjects = true;\n\tthis.sortElements = true;\n\n\tthis.info = {\n\n\t\trender: {\n\n\t\t\tvertices: 0,\n\t\t\tfaces: 0\n\n\t\t}\n\n\t};\n\n\tthis.setQuality = function ( quality ) {\n\n\t\tswitch ( quality ) {\n\n\t\t\tcase \"high\": _quality = 1; break;\n\t\t\tcase \"low\": _quality = 0; break;\n\n\t\t}\n\n\t};\n\n\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t_clearColor.set( color );\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t};\n\n\tthis.setPixelRatio = function () {};\n\n\tthis.setSize = function ( width, height ) {\n\n\t\t_svgWidth = width; _svgHeight = height;\n\t\t_svgWidthHalf = _svgWidth / 2; _svgHeightHalf = _svgHeight / 2;\n\n\t\t_svg.setAttribute( 'viewBox', ( - _svgWidthHalf ) + ' ' + ( - _svgHeightHalf ) + ' ' + _svgWidth + ' ' + _svgHeight );\n\t\t_svg.setAttribute( 'width', _svgWidth );\n\t\t_svg.setAttribute( 'height', _svgHeight );\n\n\t\t_clipBox.min.set( - _svgWidthHalf, - _svgHeightHalf );\n\t\t_clipBox.max.set( _svgWidthHalf, _svgHeightHalf );\n\n\t};\n\n\tthis.setPrecision = function ( precision ) {\n\n\t\t_precision = precision;\n\n\t};\n\n\tfunction removeChildNodes() {\n\n\t\t_pathCount = 0;\n\n\t\twhile ( _svg.childNodes.length > 0 ) {\n\n\t\t\t_svg.removeChild( _svg.childNodes[ 0 ] );\n\n\t\t}\n\n\t}\n\n\tfunction getSvgColor( color, opacity ) {\n\n\t\tvar arg = Math.floor( color.r * 255 ) + ',' + Math.floor( color.g * 255 ) + ',' + Math.floor( color.b * 255 );\n\n\t\tif ( opacity === undefined || opacity === 1 ) return 'rgb(' + arg + ')';\n\n\t\treturn 'rgb(' + arg + '); fill-opacity: ' + opacity;\n\n\t}\n\n\tfunction convert( c ) {\n\n\t\treturn _precision !== null ? c.toFixed( _precision ) : c;\n\n\t}\n\n\tthis.clear = function () {\n\n\t\tremoveChildNodes();\n\t\t_svg.style.backgroundColor = getSvgColor( _clearColor, _clearAlpha );\n\n\t};\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( camera instanceof THREE.Camera === false ) {\n\n\t\t\tconsole.error( 'THREE.SVGRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar background = scene.background;\n\n\t\tif ( background && background.isColor ) {\n\n\t\t\tremoveChildNodes();\n\t\t\t_svg.style.backgroundColor = getSvgColor( background );\n\n\t\t} else if ( this.autoClear === true ) {\n\n\t\t\tthis.clear();\n\n\t\t}\n\n\t\t_this.info.render.vertices = 0;\n\t\t_this.info.render.faces = 0;\n\n\t\t_viewMatrix.copy( camera.matrixWorldInverse );\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\n\t\t_elements = _renderData.elements;\n\t\t_lights = _renderData.lights;\n\n\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\n\n\t\tcalculateLights( _lights );\n\n\t\t // reset accumulated path\n\n\t\t_currentPath = '';\n\t\t_currentStyle = '';\n\n\t\tfor ( var e = 0, el = _elements.length; e < el; e ++ ) {\n\n\t\t\tvar element = _elements[ e ];\n\t\t\tvar material = element.material;\n\n\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\n\n\t\t\t_elemBox.makeEmpty();\n\n\t\t\tif ( element instanceof THREE.RenderableSprite ) {\n\n\t\t\t\t_v1 = element;\n\t\t\t\t_v1.x *= _svgWidthHalf; _v1.y *= - _svgHeightHalf;\n\n\t\t\t\trenderSprite( _v1, element, material );\n\n\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\n\n\t\t\t\t_v1 = element.v1; _v2 = element.v2;\n\n\t\t\t\t_v1.positionScreen.x *= _svgWidthHalf; _v1.positionScreen.y *= - _svgHeightHalf;\n\t\t\t\t_v2.positionScreen.x *= _svgWidthHalf; _v2.positionScreen.y *= - _svgHeightHalf;\n\n\t\t\t\t_elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen ] );\n\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\trenderLine( _v1, _v2, element, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( element instanceof THREE.RenderableFace ) {\n\n\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\n\n\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\n\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\n\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\n\n\t\t\t\t_v1.positionScreen.x *= _svgWidthHalf; _v1.positionScreen.y *= - _svgHeightHalf;\n\t\t\t\t_v2.positionScreen.x *= _svgWidthHalf; _v2.positionScreen.y *= - _svgHeightHalf;\n\t\t\t\t_v3.positionScreen.x *= _svgWidthHalf; _v3.positionScreen.y *= - _svgHeightHalf;\n\n\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t_v2.positionScreen,\n\t\t\t\t\t_v3.positionScreen\n\t\t\t\t] );\n\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\trenderFace3( _v1, _v2, _v3, element, material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tflushPath(); // just to flush last svg:path\n\n\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\t if ( object instanceof THREE.SVGObject ) {\n\n\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t_vector3.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tvar x = _vector3.x * _svgWidthHalf;\n\t\t\t\tvar y = - _vector3.y * _svgHeightHalf;\n\n\t\t\t\tvar node = object.node;\n\t\t\t\tnode.setAttribute( 'transform', 'translate(' + x + ',' + y + ')' );\n\n\t\t\t\t_svg.appendChild( node );\n\n\t\t\t}\n\n\t\t} );\n\n\t};\n\n\tfunction calculateLights( lights ) {\n\n\t\t_ambientLight.setRGB( 0, 0, 0 );\n\t\t_directionalLights.setRGB( 0, 0, 0 );\n\t\t_pointLights.setRGB( 0, 0, 0 );\n\n\t\tfor ( var l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = lights[ l ];\n\t\t\tvar lightColor = light.color;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t_ambientLight.r += lightColor.r;\n\t\t\t\t_ambientLight.g += lightColor.g;\n\t\t\t\t_ambientLight.b += lightColor.b;\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t_directionalLights.r += lightColor.r;\n\t\t\t\t_directionalLights.g += lightColor.g;\n\t\t\t\t_directionalLights.b += lightColor.b;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t_pointLights.r += lightColor.r;\n\t\t\t\t_pointLights.g += lightColor.g;\n\t\t\t\t_pointLights.b += lightColor.b;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction calculateLight( lights, position, normal, color ) {\n\n\t\tfor ( var l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = lights[ l ];\n\t\t\tvar lightColor = light.color;\n\n\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\n\n\t\t\t\tvar amount = normal.dot( lightPosition );\n\n\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\tamount *= light.intensity;\n\n\t\t\t\tcolor.r += lightColor.r * amount;\n\t\t\t\tcolor.g += lightColor.g * amount;\n\t\t\t\tcolor.b += lightColor.b * amount;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\n\n\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\n\n\t\t\t\tif ( amount == 0 ) continue;\n\n\t\t\t\tamount *= light.intensity;\n\n\t\t\t\tcolor.r += lightColor.r * amount;\n\t\t\t\tcolor.g += lightColor.g * amount;\n\t\t\t\tcolor.b += lightColor.b * amount;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderSprite( v1, element, material ) {\n\n\t\tvar scaleX = element.scale.x * _svgWidthHalf;\n\t\tvar scaleY = element.scale.y * _svgHeightHalf;\n\n\t\tif ( material.isPointsMaterial ) {\n\n\t\t\tscaleX *= material.size;\n\t\t\tscaleY *= material.size;\n\n\t\t}\n\n\t\tvar path = 'M' + convert( v1.x - scaleX * 0.5 ) + ',' + convert( v1.y - scaleY * 0.5 ) + 'h' + convert( scaleX ) + 'v' + convert( scaleY ) + 'h' + convert( - scaleX ) + 'z';\n\t\tvar style = \"\";\n\n\t\tif ( material.isSpriteMaterial || material.isPointsMaterial ) {\n\n\t\t\tstyle = 'fill:' + getSvgColor( material.color, material.opacity );\n\n\t\t}\n\n\t\taddPath( style, path );\n\n\t}\n\n\tfunction renderLine( v1, v2, element, material ) {\n\n\t\tvar path = 'M' + convert( v1.positionScreen.x ) + ',' + convert( v1.positionScreen.y ) + 'L' + convert( v2.positionScreen.x ) + ',' + convert( v2.positionScreen.y );\n\n\t\tif ( material.isLineBasicMaterial ) {\n\n\t\t\tvar style = 'fill:none;stroke:' + getSvgColor( material.color, material.opacity ) + ';stroke-width:' + material.linewidth + ';stroke-linecap:' + material.linecap;\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\tstyle = style + ';stroke-dasharray:' + material.dashSize + \",\" + material.gapSize;\n\n\t\t\t}\n\n\t\t\taddPath( style, path );\n\n\t\t}\n\n\t}\n\n\tfunction renderFace3( v1, v2, v3, element, material ) {\n\n\t\t_this.info.render.vertices += 3;\n\t\t_this.info.render.faces ++;\n\n\t\tvar path = 'M' + convert( v1.positionScreen.x ) + ',' + convert( v1.positionScreen.y ) + 'L' + convert( v2.positionScreen.x ) + ',' + convert( v2.positionScreen.y ) + 'L' + convert( v3.positionScreen.x ) + ',' + convert( v3.positionScreen.y ) + 'z';\n\t\tvar style = '';\n\n\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t_color.copy( material.color );\n\n\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t_color.multiply( element.color );\n\n\t\t\t}\n\n\t\t} else if ( material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial ) {\n\n\t\t\t_diffuseColor.copy( material.color );\n\n\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t_diffuseColor.multiply( element.color );\n\n\t\t\t}\n\n\t\t\t_color.copy( _ambientLight );\n\n\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\n\n\t\t\tcalculateLight( _lights, _centroid, element.normalModel, _color );\n\n\t\t\t_color.multiply( _diffuseColor ).add( material.emissive );\n\n\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );\n\n\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\n\t\t}\n\n\t\tif ( material.wireframe ) {\n\n\t\t\tstyle = 'fill:none;stroke:' + getSvgColor( _color, material.opacity ) + ';stroke-width:' + material.wireframeLinewidth + ';stroke-linecap:' + material.wireframeLinecap + ';stroke-linejoin:' + material.wireframeLinejoin;\n\n\t\t} else {\n\n\t\t\tstyle = 'fill:' + getSvgColor( _color, material.opacity );\n\n\t\t}\n\n\t\taddPath( style, path );\n\n\t}\n\n\tfunction addPath( style, path ) {\n\n\t\tif ( _currentStyle === style ) {\n\n\t\t\t_currentPath += path;\n\n\t\t} else {\n\n\t\t\tflushPath();\n\n\t\t\t_currentStyle = style;\n\t\t\t_currentPath = path;\n\n\t\t}\n\n\t}\n\n\tfunction flushPath() {\n\n\t\tif ( _currentPath ) {\n\n\t\t\t_svgNode = getPathNode( _pathCount ++ );\n\t\t\t_svgNode.setAttribute( 'd', _currentPath );\n\t\t\t_svgNode.setAttribute( 'style', _currentStyle );\n\t\t\t_svg.appendChild( _svgNode );\n\n\t\t}\n\n\t\t_currentPath = '';\n\t\t_currentStyle = '';\n\n\t}\n\n\tfunction getPathNode( id ) {\n\n\t\tif ( _svgPathPool[ id ] == null ) {\n\n\t\t\t_svgPathPool[ id ] = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\n\n\t\t\tif ( _quality == 0 ) {\n\n\t\t\t\t_svgPathPool[ id ].setAttribute( 'shape-rendering', 'crispEdges' ); //optimizeSpeed\n\n\t\t\t}\n\n\t\t\treturn _svgPathPool[ id ];\n\n\t\t}\n\n\t\treturn _svgPathPool[ id ];\n\n\t}\n\n};\n"
        },
        {
          "name": "about.html",
          "type": "blob",
          "size": 3.4453125,
          "content": "<!doctype html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\n<head>\n    <!-- Global site tag (gtag.js) - Google Analytics -->\n    <script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-119008715-1\"></script>\n    <script>\n        window.dataLayer = window.dataLayer || [];\n        function gtag(){dataLayer.push(arguments);}\n        gtag('js', new Date());\n\n        gtag('config', 'UA-119008715-1');\n    </script>\n\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\">\n    <style type=\"text/css\">\n        * { font-weight: 100; }\n        h1 { font-weight: 100; }\n    </style>\n    <title>NN SVG</title>\n</head>\n<body>\n\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-sm-6 offset-sm-3 text-center\" style=\"margin-top: 2rem;\">\n                <div>\n\n                    <h1>NN-SVG</h1>\n                    <br>\n                    <p>This tool was built to save people time. <br> Hopefully it accomplishes that goal.</p>\n\n                    <p>Time was saved <i>building</i> this tool with the help of <br> <a href=\"https://github.com/d3/d3\">d3</a>, <a href=\"https://github.com/mrdoob/three.js/\">three.js</a>, <a href=\"https://github.com/twbs/bootstrap\">bootstrap</a>, <a href=\"https://github.com/jquery/jquery\">jquery</a>, and <a href=\"https://github.com/FortAwesome/Font-Awesome\">font-awesome</a>.</p>\n\n                    <p>If there are additional features you'd like to see, <br>feel free to open an issue on <a href=\"https://github.com/zfrenchee/NN-SVG/issues\">github</a>.<br>PRs welcome too.</p>\n\n                    <a href=\"index.html\">home</a>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <a href=\"https://github.com/zfrenchee/NN-SVG\" class=\"github-corner\" aria-label=\"View source on Github\"><svg width=\"80\" height=\"80\" viewBox=\"0 0 250 250\" style=\"fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;\" aria-hidden=\"true\"><path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path><path d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\" fill=\"currentColor\" style=\"transform-origin: 130px 106px;\" class=\"octo-arm\"></path><path d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\" fill=\"currentColor\" class=\"octo-body\"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>\n</body>\n</html>\n"
        },
        {
          "name": "example.svg",
          "type": "blob",
          "size": 56.4248046875,
          "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1920\" height=\"1103\" style=\"cursor: move;\"><g transform=\"translate(-679.0324303873306,-375.6836219947023) scale(1.64718203453516)\"><line class=\"link\" x1=\"678.6666666666667\" y1=\"241.5\" x2=\"909.6666666666667\" y2=\"321.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"241.5\" x2=\"909.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"241.5\" x2=\"909.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"241.5\" x2=\"909.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"241.5\" x2=\"909.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"241.5\" x2=\"909.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"241.5\" x2=\"909.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"241.5\" x2=\"909.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"241.5\" x2=\"909.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"241.5\" x2=\"909.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"241.5\" x2=\"909.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"241.5\" x2=\"909.6666666666667\" y2=\"761.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"281.5\" x2=\"909.6666666666667\" y2=\"321.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"281.5\" x2=\"909.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"281.5\" x2=\"909.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"281.5\" x2=\"909.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"281.5\" x2=\"909.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"281.5\" x2=\"909.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"281.5\" x2=\"909.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"281.5\" x2=\"909.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"281.5\" x2=\"909.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"281.5\" x2=\"909.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"281.5\" x2=\"909.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"281.5\" x2=\"909.6666666666667\" y2=\"761.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"321.5\" x2=\"909.6666666666667\" y2=\"321.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"321.5\" x2=\"909.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"321.5\" x2=\"909.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"321.5\" x2=\"909.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"321.5\" x2=\"909.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"321.5\" x2=\"909.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"321.5\" x2=\"909.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"321.5\" x2=\"909.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"321.5\" x2=\"909.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"321.5\" x2=\"909.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"321.5\" x2=\"909.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"321.5\" x2=\"909.6666666666667\" y2=\"761.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"361.5\" x2=\"909.6666666666667\" y2=\"321.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"361.5\" x2=\"909.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"361.5\" x2=\"909.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"361.5\" x2=\"909.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"361.5\" x2=\"909.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"361.5\" x2=\"909.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"361.5\" x2=\"909.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"361.5\" x2=\"909.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"361.5\" x2=\"909.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"361.5\" x2=\"909.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"361.5\" x2=\"909.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"361.5\" x2=\"909.6666666666667\" y2=\"761.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"401.5\" x2=\"909.6666666666667\" y2=\"321.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"401.5\" x2=\"909.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"401.5\" x2=\"909.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"401.5\" x2=\"909.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"401.5\" x2=\"909.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"401.5\" x2=\"909.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"401.5\" x2=\"909.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"401.5\" x2=\"909.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"401.5\" x2=\"909.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"401.5\" x2=\"909.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"401.5\" x2=\"909.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"401.5\" x2=\"909.6666666666667\" y2=\"761.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"441.5\" x2=\"909.6666666666667\" y2=\"321.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"441.5\" x2=\"909.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"441.5\" x2=\"909.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"441.5\" x2=\"909.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"441.5\" x2=\"909.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"441.5\" x2=\"909.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"441.5\" x2=\"909.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"441.5\" x2=\"909.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"441.5\" x2=\"909.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"441.5\" x2=\"909.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"441.5\" x2=\"909.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"441.5\" x2=\"909.6666666666667\" y2=\"761.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"481.5\" x2=\"909.6666666666667\" y2=\"321.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"481.5\" x2=\"909.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"481.5\" x2=\"909.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"481.5\" x2=\"909.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"481.5\" x2=\"909.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"481.5\" x2=\"909.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"481.5\" x2=\"909.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"481.5\" x2=\"909.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"481.5\" x2=\"909.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"481.5\" x2=\"909.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"481.5\" x2=\"909.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"481.5\" x2=\"909.6666666666667\" y2=\"761.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"521.5\" x2=\"909.6666666666667\" y2=\"321.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"521.5\" x2=\"909.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"521.5\" x2=\"909.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"521.5\" x2=\"909.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"521.5\" x2=\"909.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"521.5\" x2=\"909.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"521.5\" x2=\"909.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"521.5\" x2=\"909.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"521.5\" x2=\"909.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"521.5\" x2=\"909.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"521.5\" x2=\"909.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"521.5\" x2=\"909.6666666666667\" y2=\"761.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"561.5\" x2=\"909.6666666666667\" y2=\"321.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"561.5\" x2=\"909.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"561.5\" x2=\"909.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"561.5\" x2=\"909.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"561.5\" x2=\"909.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"561.5\" x2=\"909.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"561.5\" x2=\"909.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"561.5\" x2=\"909.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"561.5\" x2=\"909.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"561.5\" x2=\"909.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"561.5\" x2=\"909.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"561.5\" x2=\"909.6666666666667\" y2=\"761.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"601.5\" x2=\"909.6666666666667\" y2=\"321.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"601.5\" x2=\"909.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"601.5\" x2=\"909.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"601.5\" x2=\"909.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"601.5\" x2=\"909.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"601.5\" x2=\"909.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"601.5\" x2=\"909.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"601.5\" x2=\"909.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"601.5\" x2=\"909.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"601.5\" x2=\"909.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"601.5\" x2=\"909.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"601.5\" x2=\"909.6666666666667\" y2=\"761.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"641.5\" x2=\"909.6666666666667\" y2=\"321.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"641.5\" x2=\"909.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"641.5\" x2=\"909.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"641.5\" x2=\"909.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"641.5\" x2=\"909.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"641.5\" x2=\"909.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"641.5\" x2=\"909.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"641.5\" x2=\"909.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"641.5\" x2=\"909.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"641.5\" x2=\"909.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"641.5\" x2=\"909.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"641.5\" x2=\"909.6666666666667\" y2=\"761.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"681.5\" x2=\"909.6666666666667\" y2=\"321.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"681.5\" x2=\"909.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"681.5\" x2=\"909.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"681.5\" x2=\"909.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"681.5\" x2=\"909.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"681.5\" x2=\"909.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"681.5\" x2=\"909.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"681.5\" x2=\"909.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"681.5\" x2=\"909.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"681.5\" x2=\"909.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"681.5\" x2=\"909.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"681.5\" x2=\"909.6666666666667\" y2=\"761.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"721.5\" x2=\"909.6666666666667\" y2=\"321.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"721.5\" x2=\"909.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"721.5\" x2=\"909.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"721.5\" x2=\"909.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"721.5\" x2=\"909.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"721.5\" x2=\"909.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"721.5\" x2=\"909.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"721.5\" x2=\"909.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"721.5\" x2=\"909.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"721.5\" x2=\"909.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"721.5\" x2=\"909.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"721.5\" x2=\"909.6666666666667\" y2=\"761.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"761.5\" x2=\"909.6666666666667\" y2=\"321.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"761.5\" x2=\"909.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"761.5\" x2=\"909.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"761.5\" x2=\"909.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"761.5\" x2=\"909.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"761.5\" x2=\"909.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"761.5\" x2=\"909.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"761.5\" x2=\"909.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"761.5\" x2=\"909.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"761.5\" x2=\"909.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"761.5\" x2=\"909.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"761.5\" x2=\"909.6666666666667\" y2=\"761.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"801.5\" x2=\"909.6666666666667\" y2=\"321.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"801.5\" x2=\"909.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"801.5\" x2=\"909.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"801.5\" x2=\"909.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"801.5\" x2=\"909.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"801.5\" x2=\"909.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"801.5\" x2=\"909.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"801.5\" x2=\"909.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"801.5\" x2=\"909.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"801.5\" x2=\"909.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"801.5\" x2=\"909.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"801.5\" x2=\"909.6666666666667\" y2=\"761.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"841.5\" x2=\"909.6666666666667\" y2=\"321.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"841.5\" x2=\"909.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"841.5\" x2=\"909.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"841.5\" x2=\"909.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"841.5\" x2=\"909.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"841.5\" x2=\"909.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"841.5\" x2=\"909.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"841.5\" x2=\"909.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"841.5\" x2=\"909.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"841.5\" x2=\"909.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"841.5\" x2=\"909.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"678.6666666666667\" y1=\"841.5\" x2=\"909.6666666666667\" y2=\"761.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"321.5\" x2=\"1140.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"321.5\" x2=\"1140.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"321.5\" x2=\"1140.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"321.5\" x2=\"1140.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"321.5\" x2=\"1140.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"321.5\" x2=\"1140.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"321.5\" x2=\"1140.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"321.5\" x2=\"1140.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"321.5\" x2=\"1140.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"321.5\" x2=\"1140.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"361.5\" x2=\"1140.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"361.5\" x2=\"1140.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"361.5\" x2=\"1140.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"361.5\" x2=\"1140.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"361.5\" x2=\"1140.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"361.5\" x2=\"1140.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"361.5\" x2=\"1140.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"361.5\" x2=\"1140.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"361.5\" x2=\"1140.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"361.5\" x2=\"1140.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"401.5\" x2=\"1140.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"401.5\" x2=\"1140.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"401.5\" x2=\"1140.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"401.5\" x2=\"1140.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"401.5\" x2=\"1140.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"401.5\" x2=\"1140.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"401.5\" x2=\"1140.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"401.5\" x2=\"1140.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"401.5\" x2=\"1140.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"401.5\" x2=\"1140.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"441.5\" x2=\"1140.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"441.5\" x2=\"1140.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"441.5\" x2=\"1140.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"441.5\" x2=\"1140.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"441.5\" x2=\"1140.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"441.5\" x2=\"1140.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"441.5\" x2=\"1140.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"441.5\" x2=\"1140.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"441.5\" x2=\"1140.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"441.5\" x2=\"1140.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"481.5\" x2=\"1140.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"481.5\" x2=\"1140.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"481.5\" x2=\"1140.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"481.5\" x2=\"1140.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"481.5\" x2=\"1140.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"481.5\" x2=\"1140.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"481.5\" x2=\"1140.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"481.5\" x2=\"1140.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"481.5\" x2=\"1140.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"481.5\" x2=\"1140.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"521.5\" x2=\"1140.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"521.5\" x2=\"1140.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"521.5\" x2=\"1140.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"521.5\" x2=\"1140.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"521.5\" x2=\"1140.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"521.5\" x2=\"1140.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"521.5\" x2=\"1140.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"521.5\" x2=\"1140.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"521.5\" x2=\"1140.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"521.5\" x2=\"1140.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"561.5\" x2=\"1140.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"561.5\" x2=\"1140.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"561.5\" x2=\"1140.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"561.5\" x2=\"1140.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"561.5\" x2=\"1140.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"561.5\" x2=\"1140.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"561.5\" x2=\"1140.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"561.5\" x2=\"1140.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"561.5\" x2=\"1140.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"561.5\" x2=\"1140.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"601.5\" x2=\"1140.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"601.5\" x2=\"1140.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"601.5\" x2=\"1140.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"601.5\" x2=\"1140.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"601.5\" x2=\"1140.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"601.5\" x2=\"1140.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"601.5\" x2=\"1140.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"601.5\" x2=\"1140.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"601.5\" x2=\"1140.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"601.5\" x2=\"1140.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"641.5\" x2=\"1140.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"641.5\" x2=\"1140.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"641.5\" x2=\"1140.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"641.5\" x2=\"1140.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"641.5\" x2=\"1140.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"641.5\" x2=\"1140.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"641.5\" x2=\"1140.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"641.5\" x2=\"1140.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"641.5\" x2=\"1140.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"641.5\" x2=\"1140.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"681.5\" x2=\"1140.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"681.5\" x2=\"1140.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"681.5\" x2=\"1140.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"681.5\" x2=\"1140.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"681.5\" x2=\"1140.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"681.5\" x2=\"1140.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"681.5\" x2=\"1140.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"681.5\" x2=\"1140.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"681.5\" x2=\"1140.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"681.5\" x2=\"1140.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"721.5\" x2=\"1140.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"721.5\" x2=\"1140.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"721.5\" x2=\"1140.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"721.5\" x2=\"1140.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"721.5\" x2=\"1140.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"721.5\" x2=\"1140.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"721.5\" x2=\"1140.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"721.5\" x2=\"1140.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"721.5\" x2=\"1140.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"721.5\" x2=\"1140.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"761.5\" x2=\"1140.6666666666667\" y2=\"361.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"761.5\" x2=\"1140.6666666666667\" y2=\"401.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"761.5\" x2=\"1140.6666666666667\" y2=\"441.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"761.5\" x2=\"1140.6666666666667\" y2=\"481.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"761.5\" x2=\"1140.6666666666667\" y2=\"521.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"761.5\" x2=\"1140.6666666666667\" y2=\"561.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"761.5\" x2=\"1140.6666666666667\" y2=\"601.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"761.5\" x2=\"1140.6666666666667\" y2=\"641.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"761.5\" x2=\"1140.6666666666667\" y2=\"681.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"909.6666666666667\" y1=\"761.5\" x2=\"1140.6666666666667\" y2=\"721.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"1140.6666666666667\" y1=\"361.5\" x2=\"1371.6666666666667\" y2=\"541.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"1140.6666666666667\" y1=\"401.5\" x2=\"1371.6666666666667\" y2=\"541.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"1140.6666666666667\" y1=\"441.5\" x2=\"1371.6666666666667\" y2=\"541.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"1140.6666666666667\" y1=\"481.5\" x2=\"1371.6666666666667\" y2=\"541.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"1140.6666666666667\" y1=\"521.5\" x2=\"1371.6666666666667\" y2=\"541.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"1140.6666666666667\" y1=\"561.5\" x2=\"1371.6666666666667\" y2=\"541.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"1140.6666666666667\" y1=\"601.5\" x2=\"1371.6666666666667\" y2=\"541.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"1140.6666666666667\" y1=\"641.5\" x2=\"1371.6666666666667\" y2=\"541.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"1140.6666666666667\" y1=\"681.5\" x2=\"1371.6666666666667\" y2=\"541.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><line class=\"link\" x1=\"1140.6666666666667\" y1=\"721.5\" x2=\"1371.6666666666667\" y2=\"541.5\" style=\"stroke-width: 0.5; stroke: rgb(80, 80, 80); opacity: 1;\"></line><circle r=\"10\" class=\"node\" id=\"0_0\" cx=\"678.6666666666667\" cy=\"241.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"0_1\" cx=\"678.6666666666667\" cy=\"281.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"0_2\" cx=\"678.6666666666667\" cy=\"321.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"0_3\" cx=\"678.6666666666667\" cy=\"361.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"0_4\" cx=\"678.6666666666667\" cy=\"401.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"0_5\" cx=\"678.6666666666667\" cy=\"441.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"0_6\" cx=\"678.6666666666667\" cy=\"481.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"0_7\" cx=\"678.6666666666667\" cy=\"521.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"0_8\" cx=\"678.6666666666667\" cy=\"561.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"0_9\" cx=\"678.6666666666667\" cy=\"601.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"0_10\" cx=\"678.6666666666667\" cy=\"641.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"0_11\" cx=\"678.6666666666667\" cy=\"681.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"0_12\" cx=\"678.6666666666667\" cy=\"721.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"0_13\" cx=\"678.6666666666667\" cy=\"761.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"0_14\" cx=\"678.6666666666667\" cy=\"801.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"0_15\" cx=\"678.6666666666667\" cy=\"841.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"1_0\" cx=\"909.6666666666667\" cy=\"321.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"1_1\" cx=\"909.6666666666667\" cy=\"361.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"1_2\" cx=\"909.6666666666667\" cy=\"401.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"1_3\" cx=\"909.6666666666667\" cy=\"441.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"1_4\" cx=\"909.6666666666667\" cy=\"481.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"1_5\" cx=\"909.6666666666667\" cy=\"521.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"1_6\" cx=\"909.6666666666667\" cy=\"561.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"1_7\" cx=\"909.6666666666667\" cy=\"601.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"1_8\" cx=\"909.6666666666667\" cy=\"641.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"1_9\" cx=\"909.6666666666667\" cy=\"681.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"1_10\" cx=\"909.6666666666667\" cy=\"721.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"1_11\" cx=\"909.6666666666667\" cy=\"761.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"2_0\" cx=\"1140.6666666666667\" cy=\"361.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"2_1\" cx=\"1140.6666666666667\" cy=\"401.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"2_2\" cx=\"1140.6666666666667\" cy=\"441.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"2_3\" cx=\"1140.6666666666667\" cy=\"481.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"2_4\" cx=\"1140.6666666666667\" cy=\"521.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"2_5\" cx=\"1140.6666666666667\" cy=\"561.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"2_6\" cx=\"1140.6666666666667\" cy=\"601.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"2_7\" cx=\"1140.6666666666667\" cy=\"641.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"2_8\" cx=\"1140.6666666666667\" cy=\"681.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"2_9\" cx=\"1140.6666666666667\" cy=\"721.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><circle r=\"10\" class=\"node\" id=\"3_0\" cx=\"1371.6666666666667\" cy=\"541.5\" style=\"fill: rgb(255, 255, 255); stroke: rgb(51, 51, 51); stroke-width: 1;\"></circle><text class=\"text\" dy=\".35em\" x=\"643.6666666666667\" y=\"881.5\" style=\"font-size: 12px;\">Input Layer ∈ ℝ¹⁶</text><text class=\"text\" dy=\".35em\" x=\"874.6666666666667\" y=\"881.5\" style=\"font-size: 12px;\">Hidden Layer ∈ ℝ¹²</text><text class=\"text\" dy=\".35em\" x=\"1105.6666666666667\" y=\"881.5\" style=\"font-size: 12px;\">Hidden Layer ∈ ℝ¹⁰</text><text class=\"text\" dy=\".35em\" x=\"1336.6666666666667\" y=\"881.5\" style=\"font-size: 12px;\">Output Layer ∈ ℝ¹</text></g></svg>"
        },
        {
          "name": "fonts",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 18.5966796875,
          "content": "<!doctype html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\n<head>\n    <!-- Global site tag (gtag.js) - Google Analytics -->\n    <script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-119008715-1\"></script>\n    <script>\n        window.dataLayer = window.dataLayer || [];\n        function gtag(){dataLayer.push(arguments);}\n        gtag('js', new Date());\n\n        gtag('config', 'UA-119008715-1');\n    </script>\n\n\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\">\n\n    <style type=\"text/css\">\n        * { font-weight: 100; }\n        h1 { font-weight: 100; }\n        #graph-container {\n            top: 0;\n            bottom: 0;\n            left: 0;\n            right: 0;\n            position: fixed;\n        }\n\n        .nn-picker {\n            width: 410px;\n            margin: 30px;\n            z-index: 1000;\n        }\n\n        [data-toggle=\"collapse\"] .fa:before {\n            font-size: 2rem;\n            color: black;\n            content: \"\\f106\";\n            position: relative;\n            top: 5px;\n        }\n        .fa {\n          transition: 0.3s transform ease-in-out;\n        }\n        .collapsed .fa {\n          transform: rotate(-180deg);\n        }\n        .tab-content {\n            padding: 20px;\n        }\n        input[type=\"range\"] {\n            margin-left: 10px;\n        }\n        #count {\n            position: fixed;\n            bottom: 0;\n            right: 1rem;\n            opacity: 0.4;\n            font-weight: 100;\n        }\n        .text {\n            font-weight: 300;\n        }\n    </style>\n\n    <title>NN SVG</title>\n\n</head>\n<body>\n\n\n    <div id=\"graph-container\"></div>\n\n    <div class=\"container-fluid\">\n\n        <div class=\"row\">\n            <div class=\"nn-picker\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <a class=\"pull-right\" data-toggle=\"collapse\" href=\"#collapsable\" role=\"button\"><i class=\"fa\"></i></a>\n                        <h1>NN-SVG</h1>\n                        <p>Publication-ready NN-architecture schematics. <a id=\"download\" href=\"#\">Download SVG</a></p>\n\n                        <nav>\n                            <div class=\"nav nav-tabs card-header-tabs\" role=\"tablist\">\n                                <a class=\"nav-item nav-link active\">FCNN style</a>\n                                <a class=\"nav-item nav-link\" href=\"LeNet.html\">LeNet style</a>\n                                <a class=\"nav-item nav-link\" href=\"AlexNet.html\">AlexNet style</a>\n                            </div>\n                        </nav>\n\n                    </div>\n                    <div class=\"tab-content collapse show\" id=\"collapsable\">\n                        <div class=\"tab-pane fade show active\" id=\"FCNN\" role=\"tabpanel\">\n\n                            <h4>Style:</h4>\n\n                            <!-- Edge Properties -->\n                            <hr>\n                            <div>\n                                <input type=\"checkbox\" id=\"edgeWidthProportional\" name=\"edgeWidthProportional\" value=\"edgeWidthProportional\">\n                                <label for=\"edgeWidthProportional\">Edge width proportional to edge weights</label>\n                            </div>\n                            <div>\n                                <label for=\"edgeWidth\">Edge Width</label>\n                                <input type=\"range\" id=\"edgeWidth\" name=\"\" min=\"0\" max=\"2\" step=\"0.01\" value=\"0.5\" style=\"position: relative; top: 3px;\">\n                            </div>\n\n                            <hr>\n                            <div>\n                                <input type=\"checkbox\" id=\"edgeOpacityProportional\" name=\"edgeOpacityProportional\" value=\"edgeOpacityProportional\">\n                                <label for=\"edgeOpacityProportional\">Edge opacity proportional to edge weights</label>\n                            </div>\n                            <div>\n                                <label for=\"edgeOpacity\">Edge Opacity</label>\n                                <input type=\"range\" id=\"edgeOpacity\" name=\"\" min=\"0\" max=\"1\" step=\"0.01\" value=\"1\" style=\"position: relative; top: 3px;\">\n                            </div>\n\n                            <hr>\n                            <div>\n                                <input type=\"checkbox\" id=\"edgeColorProportional\" name=\"edgeColorProportional\" value=\"edgeColorProportional\">\n                                <label for=\"edgeColorProportional\">Edge color proportional to edge weights</label>\n                            </div>\n                            <div>\n                                <input type=\"color\" value=\"#0000ff\" id=\"negativeEdgeColor\">\n                                <label for=\"negativeEdgeColor\">Negative Edge Color</label>\n                            </div>\n                            <div>\n                                <input type=\"color\" value=\"#ff0000\" id=\"positiveEdgeColor\">\n                                <label for=\"positiveEdgeColor\">Positive Edge Color</label>\n                            </div>\n                            <div>\n                                <input type=\"color\" value=\"#505050\" id=\"defaultEdgeColor\">\n                                <label for=\"defaultEdgeColor\">Default Edge Color</label>\n                            </div>\n\n                            <hr>\n                            <div>\n                                <input type=\"checkbox\" id=\"bezierCurves\" name=\"bezierCurves\" value=\"bezierCurves\">\n                                <label for=\"bezierCurves\">Use Bezier Curves</label>\n                            </div>\n\n\n                            <!-- Node Properties -->\n                            <hr>\n                            <div>\n                                <label for=\"nodeDiameter\">Node Diameter</label>\n                                <input type=\"range\" id=\"nodeDiameter\" name=\"\" min=\"10\" max=\"50\" step=\"1\" value=\"20\" style=\"position: relative; top: 3px;\">\n                            </div>\n                            <div>\n                                <input type=\"color\" value=\"#ffffff\" id=\"nodeColor\">\n                                <label for=\"nodeColor\">Node Color</label>\n                            </div>\n                            <div>\n                                <input type=\"color\" value=\"#333333\" id=\"nodeBorderColor\">\n                                <label for=\"nodeBorderColor\">Node Border Color</label>\n                            </div>\n\n                            <!-- Layer Properties -->\n                            <hr>\n                            <div>\n                                <label for=\"betweenLayers\">Layer Spacing</label>\n                                <input type=\"range\" id=\"betweenLayers\" name=\"\" min=\"30\" max=\"400\" step=\"1\" value=\"160\" style=\"position: relative; top: 3px;\">\n                            </div>\n                            <div id=\"nnDirection\">\n                                <label for=\"nnDirection\" style=\"margin-right:10px;\">Direction</label>\n                                <div class=\"form-check form-check-inline\">\n                                    <label class=\"form-check-label\">\n                                        <input class=\"form-check-input\" type=\"radio\" name=\"nnDirection\" id=\"horizontal\" value=\"right\" checked> horizontal\n                                    </label>\n                                </div>\n                                <div class=\"form-check form-check-inline\">\n                                    <label class=\"form-check-label\">\n                                        <input class=\"form-check-input\" type=\"radio\" name=\"nnDirection\" id=\"vertical\" value=\"up\"> vertical\n                                    </label>\n                                </div>\n                            </div>\n                            <div>\n                                <input type=\"checkbox\" id=\"showBias\" name=\"showBias\" value=\"showBias\">\n                                <label for=\"showBias\">Show Bias Units</label>\n                            </div>\n                            <div>\n                                <input type=\"checkbox\" id=\"showLabels\" name=\"showLabels\" value=\"showLabels\" checked>\n                                <label for=\"showLabels\">Show Layer Labels</label>\n                            </div>\n                            <div>\n\n                            <div id=\"arrowhead\">\n                                <input type=\"checkbox\" id=\"showArrowheads\" name=\"showArrowheads\" value=\"showArrowheads\">\n                                <label for=\"showArrowheads\">Show Arrowheads</label>\n                                <div class=\"form-check form-check-inline ml-3\">\n                                    <label class=\"form-check-label\">\n                                        <input class=\"form-check-input\" type=\"radio\" name=\"arrowheadStyle\" id=\"empty\" value=\"empty\" checked> empty\n                                    </label>\n                                </div>\n                                <div class=\"form-check form-check-inline\">\n                                    <label class=\"form-check-label\">\n                                        <input class=\"form-check-input\" type=\"radio\" name=\"arrowheadStyle\" id=\"solid\" value=\"solid\"> solid\n                                    </label>\n                                </div>\n                            </div>\n\n                            </div>\n\n                            <hr>\n                            <h4>Architecture:</h4>\n\n                            <hr>\n                            <div id=\"architecture\">\n\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-4\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"numberOfNodes\" step=\"1\" value=\"16\" />\n                                    </div>\n                                    <input type=\"range\" class=\"form-control col-4\" name=\"betweenNodesInLayer\" min=\"0\" max=\"100\" step=\"1\" value=\"20\" style=\"position: relative; top: -4px;\">\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-4\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"numberOfNodes\" step=\"1\" value=\"12\" />\n                                    </div>\n                                    <input type=\"range\" class=\"form-control col-4\" name=\"betweenNodesInLayer\" min=\"0\" max=\"100\" step=\"1\" value=\"20\" style=\"position: relative; top: -4px;\">\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-4\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"numberOfNodes\" step=\"1\" value=\"10\" />\n                                    </div>\n                                    <input type=\"range\" class=\"form-control col-4\" name=\"betweenNodesInLayer\" min=\"0\" max=\"100\" step=\"1\" value=\"20\" style=\"position: relative; top: -4px;\">\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-4\">\n                                        <button class=\"btn btn-secondary btn-remove input-group-prepend\"><span class=\"fa fa-minus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"numberOfNodes\" step=\"1\" value=\"1\" />\n                                    </div>\n                                    <input type=\"range\" class=\"form-control col-4\" name=\"betweenNodesInLayer\" min=\"0\" max=\"100\" step=\"1\" value=\"20\" style=\"position: relative; top: -4px;\">\n                                </div>\n                                <div class=\"row entry\">\n                                    <div class=\"input-group mb-2 mr-sm-2 col-4\">\n                                        <button class=\"btn btn-primary btn-add input-group-prepend\"><span class=\"fa fa-plus\"></span></button>\n                                        <input type=\"number\" class=\"form-control\" name=\"numberOfNodes\" step=\"1\"/>\n                                    </div>\n                                    <input type=\"range\" class=\"form-control col-4\" name=\"betweenNodesInLayer\" min=\"0\" max=\"100\" step=\"1\" value=\"20\" style=\"position: relative; top: -4px;\">\n                                </div>\n\n                            </div>\n\n                            <hr>\n                            <button type=\"button\" class=\"btn btn-sm btn-secondary\" id=\"newRandomWeights\">New Random Weights</button>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div id=\"count\"><span></span><a style=\"font-size: 1rem\" href=\"about.html\">About</a></div>\n\n\n    <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script>\n\n    <script type=\"text/javascript\" src=\"https://d3js.org/d3.v5.min.js\"></script>\n    <script type=\"text/javascript\" src=\"util.js\"></script>\n    <script type=\"text/javascript\" src=\"FCNN.js\"></script>\n\n    <script type=\"text/javascript\">\n\nfcnn = FCNN();\n\nfunction restart() {\n\n    architecture = $('#architecture').find('input[name=\"numberOfNodes\"]').map((i,el) => $(el).val()).get().filter(input => $.isNumeric(input)).map(s => parseInt(s));\n\n    betweenNodesInLayer = $('#architecture').find('input[name=\"betweenNodesInLayer\"]').map((i,el) => parseFloat($(el).val())).get();\n\n    fcnn.redraw({'architecture_':architecture});\n    fcnn.redistribute({'betweenNodesInLayer_':betweenNodesInLayer});\n\n    $('#count span:first').text(fcnn.graph.nodes.length+\" nodes, \"+fcnn.graph.links.length+\" edges you don't need to draw yourself! \")\n}\n\nrestart();\n\n/////////////////////////////////////////////////////////////////////////////\n                ///////    Select Styling    ///////\n/////////////////////////////////////////////////////////////////////////////\n\n$(\"#edgeWidthProportional\").change(   function() { fcnn.style({'edgeWidthProportional_': this.checked}) });\n$(\"#edgeWidth\").change(               function() { fcnn.style({'edgeWidth_': parseFloat(this.value)}) });\n$(\"#edgeOpacityProportional\").change( function() { fcnn.style({'edgeOpacityProportional_': this.checked});\n    if (this.checked) { $(\"#edgeOpacity\").prop('disabled', true); }\n    else { $(\"#edgeOpacity\").prop('disabled', false); }\n});\n$(\"#edgeOpacity\").change(             function() { fcnn.style({'edgeOpacity_': parseFloat(this.value)}) });\n$(\"#negativeEdgeColor\").change(       function() { fcnn.style({'negativeEdgeColor_': this.value}) });\n$(\"#positiveEdgeColor\").change(       function() { fcnn.style({'positiveEdgeColor_': this.value}) });\n$(\"#edgeColorProportional\").change(   function() { fcnn.style({'edgeColorProportional_': this.checked}) });\n$(\"#defaultEdgeColor\").change(        function() { fcnn.style({'defaultEdgeColor_': this.value}) });\n$(\"#nodeDiameter\").change(            function() { fcnn.style({'nodeDiameter_': parseFloat(this.value)}) });\n$(\"#nodeColor\").change(               function() { fcnn.style({'nodeColor_': this.value}) });\n$(\"#nodeBorderColor\").change(         function() { fcnn.style({'nodeBorderColor_': this.value}) });\n$(\"#betweenLayers\").change(           function() { fcnn.redistribute({'betweenLayers_': parseFloat(this.value)}) });\n$('#nnDirection input:radio').change( function() { fcnn.redistribute({'nnDirection_': this.value}) });\n$(\"#showBias\").change(                function() { fcnn.redraw({'showBias_': this.checked}); fcnn.redistribute(); });\n$(\"#showLabels\").change(              function() { fcnn.redraw({'showLabels_': this.checked}) });\n$(\"#showArrowheads\").change(          function() { fcnn.style({'showArrowheads_': this.checked}) });\n$(\"#arrowhead input:radio\").change(   function() { fcnn.style({'arrowheadStyle_': this.value}) });\n$(\"#bezierCurves\").change(            function() { fcnn.redistribute({'bezierCurves_': this.checked}) });\n\n/////////////////////////////////////////////////////////////////////////////\n                 ///////    Select Architecture    ///////\n/////////////////////////////////////////////////////////////////////////////\n\n$(document).on('click', '.btn-add', function(e) {\n    e.preventDefault();\n\n    var controlForm = $('#architecture');\n    var currentEntry = $(this).parents('.entry:first');\n    var newEntry = $(currentEntry.clone()).appendTo(controlForm);\n\n    newEntry.find('input[name=\"numberOfNodes\"]').val('');\n    controlForm.find('.entry:not(:last) .btn-add')\n        .removeClass('btn-add').addClass('btn-remove')\n        .removeClass('btn-primary').addClass('btn-secondary')\n        .html('<span class=\"fa fa-minus\"></span>');\n\n    restart();\n\n});\n\n$(document).on('click', '.btn-remove', function(e) {\n    e.preventDefault();\n\n    $(this).parents('.entry:first').remove();\n\n    restart();\n\n    return false;\n\n});\n\n$(document).on('change', \"input[name='numberOfNodes']\", restart);\n\n$(document).on('change', \"input[name='betweenNodesInLayer']\", restart);  // fix this so we only redistribute\n\n$(document).on('click', '#newRandomWeights', function() {\n    link = fcnn.link.data([]);\n    fcnn.link.exit().remove();\n    restart();\n});\n\nd3.select(\"#download\").on(\"click\", function() {\n    // ga('send', 'event', 'downloadSVG', 'FCNN');\n\n    d3.select(this)\n      .attr(\"href\", 'data:application/octet-stream;base64,' + btoa(unescape(encodeURIComponent(d3.select(\"#graph-container\").html()))))\n      .attr(\"download\", \"nn.svg\")\n})\n\n    </script>\n\n</body>\n\n</html>\n"
        },
        {
          "name": "paper.bib",
          "type": "blob",
          "size": 0.9189453125,
          "content": "@INCOLLECTION{AlexNet,\n\ttitle = {ImageNet Classification with Deep Convolutional Neural Networks},\n\tauthor = {Alex Krizhevsky and Sutskever, Ilya and Hinton, Geoffrey E},\n\tbooktitle = {Advances in Neural Information Processing Systems 25},\n\tyear = {2012},\n\turl = {http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf}\n}\n@INPROCEEDINGS{LeNet,\n\ttitle = {Gradient-based learning applied to document recognition},\n\tauthor = {Yann Lecun and Léon Bottou and Yoshua Bengio and Patrick Haffner},\n\tbooktitle = {Proceedings of the IEEE},\n\tyear = {1998},\n\tpages = {2278--2324}\n}\n@ARTICLE{d3,\n\ttitle = {D3 Data-Driven Documents},\n\tauthor = {Bostock, Michael and Ogievetsky, Vadim and Heer, Jeffrey},\n\tjournal = {IEEE Transactions on Visualization and Computer Graphics},\n\tvolume = {17},\n\tnumber = {12},\n\tyear = {2011},\n\turl = {http://dx.doi.org/10.1109/TVCG.2011.185},\n\tdoi = {10.1109/TVCG.2011.185},\n}\n\n"
        },
        {
          "name": "paper.md",
          "type": "blob",
          "size": 1.5185546875,
          "content": "---\ntitle: 'NN-SVG: Publication-Ready Neural Network Architecture Schematics'\ntags:\n  - machine learning\n  - deep learning\n  - neural networks\n  - visualization\nauthors:\n - name: Alexander LeNail\n   orcid: 0000-0001-8173-2315\n   affiliation: 1\naffiliations:\n - name: Massachusetts Institute of Technology, dept of Biological Engineering\n   index: 1\ndate: 14 May 2018\nbibliography: paper.bib\n---\n\n# Summary\n\nIllustrations of Neural Network architectures are often time-consuming to produce, and machine learning researchers all too often find themselves constructing these diagrams from scratch by hand.\n\nNN-SVG is a tool for creating Neural Network (NN) architecture drawings parametrically rather than manually. It then provides the ability to export those drawings to Scalable Vector Graphics (SVG) files, suitable for inclusion in academic papers or as figures on web pages.\n\nThe tool provides the ability to generate figures of three kinds: classic Fully-Connected Neural Network (FCNN) figures, Convolutional Neural Network (CNN) figures of the sort introduced in [@LeNet], and Deep Neural Network figures following the style introduced in [@AlexNet]. The former two are accomplished using the D3 javascript library [@d3] and the latter with the javascript library Three.js. NN-SVG provides the ability to style the figure to the user's liking via many size, color, and layout parameters.\n\nWe hope this tool will save machine learning researchers time, and we hope this software might also serve as a pedagogical tool in some contexts.\n\n# References\n"
        },
        {
          "name": "paper.pdf",
          "type": "blob",
          "size": 119.650390625,
          "content": null
        },
        {
          "name": "util.js",
          "type": "blob",
          "size": 0.6650390625,
          "content": "\nlet nWise = (n, array) => {\n    iterators = Array(n).fill().map(() => array[Symbol.iterator]());\n    iterators.forEach((it, index) => Array(index).fill().forEach(() => it.next()));\n    return Array(array.length - n + 1).fill().map(() => (iterators.map(it => it.next().value)));\n};\n\nlet pairWise = (array) => nWise(2, array);\n\nlet sum = (arr) => arr.reduce((a,b)=>a+b);\n\nlet range = n => [...Array(n).keys()];\n\nlet rand = (min, max) => Math.random() * (max - min) + min;\n\nArray.prototype.last = function() { return this[this.length - 1]; };\n\nlet flatten = (array) => array.reduce((flat, toFlatten) => (flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten)), []);\n\n"
        }
      ]
    }
  ]
}