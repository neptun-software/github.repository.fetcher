{
  "metadata": {
    "timestamp": 1736562805329,
    "page": 361,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jwilber/roughViz",
      "stars": 6748,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.3251953125,
          "content": "{\n    \"extends\": \"strongloop\",\n    \"parser\": \"babel-eslint\",\n    \"env\": {\n        \"browser\": true,\n        \"jest\": true,\n        \"node\": true\n    },\n    \"rules\": {\n        \"max-len\": [\"error\", {\n            \"code\": 100\n        }],\n        \"no-new\": 0,\n        \"prefer-const\": \"error\",\n        // \"quotes\": [\"error\", \"double\"]\n    }\n}"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0849609375,
          "content": "dist/\nnode_modules\njest.config.js\nexamples/\n.cache\n.eslintrc\n.vscode/\npackage-lock.json"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03125,
          "content": "Copyright (c) 2020 Jared Wilber\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.375,
          "content": "<img src=\"https://raw.githubusercontent.com/jwilber/random_data/master/roughViz_Title.png\"  width=\"350\" alt=\"roughViz.js\"><br>\n\n**roughViz.js** is a reusable JavaScript library for creating sketchy/hand-drawn styled charts in the browser, based on D3v5, roughjs, and handy.\n\n\n<img src=\"https://raw.githubusercontent.com/jwilber/random_data/master/roughViz.gif\" alt=\"roughViz.js\">\n\n\n### Why?\nUse these charts where the communication goal is to show intent or generality, and not absolute precision. Or just because they're fun and look weird.\n\n\n### Chart Types\n\n| Chart Type     | API                                                   |\n| -------------- | ----------------------------------------------------- |\n| Bar            | <a href=\"#roughvizbar\">roughViz.Bar</a>               |\n| Horizontal Bar | <a href=\"#roughvizbarh\">roughViz.BarH</a>             |\n| Donut          | <a href=\"#roughvizdonut\">roughViz.Donut</a>           |\n| Line           | <a href=\"#roughvizline\">roughViz.Line</a>             |\n| Pie            | <a href=\"#roughvizpie\">roughViz.Pie</a>               |\n| Scatter        | <a href=\"#roughvizscatter\">roughViz.Scatter</a>       |\n| Stacked Bar    | <a href=\"#roughvizstackedbar\">roughViz.StackedBar</a> |\n\nVisit [this link](https://observablehq.com/d/6d3209e2f7f114de) for interactive examples of each chart.\n\n### Features\n\nApply the features of `roughjs` to each chart:\n\n**roughness**:\n\n<img src=\"https://raw.githubusercontent.com/jwilber/random_data/master/roughViz_roughnessbars.png\"  alt=\"roughness examples\">\n\n<b id=\"fillStyle\">fillStyle</b>\n<img src=\"https://raw.githubusercontent.com/jwilber/random_data/master/rough_fillStyles.png\"  alt=\"fillStyle examples\">\n\n\n**fillWeight**\n<img src=\"https://raw.githubusercontent.com/jwilber/random_data/master/roughViz_fillweight.png\"  alt=\"fillStyle examples\">\n\n\nAs well as additional chart-specific options ([see API below](#API))\n\n\n### Installation\n\nVia CDN (expose the `roughViz` global in `html`):\n\n```html\n<script src=\"https://unpkg.com/rough-viz@2.0.5\"></script>\n```\n\nVia `npm`:\n\n```sh\nnpm install rough-viz\n```\nWant to use with `React`? [There's a wrapper!](https://github.com/Chris927/react-roughviz):\n\n```sh\nnpm install react-roughviz\n```\n\nWant to use with `Vue`? [There's a wrapper!](https://github.com/jolo-dev/vue-roughviz):\n\n```sh\nnpm install vue-roughviz\n```\n\nWant to use it with `Python`? [Go crazy](https://github.com/charlesdong1991/py-roughviz):\n\n```sh\npip install py-roughviz\n```\n\n\n### How to use\n\nIf you're using ESM, make sure to import the library:\n\n```\nimport roughViz from \"rough-viz\";\n```\n\nCreate some container elements, one for each chart:\n\n```html\n<!--you can name each id whatever you want -->\n<div id=\"viz0\"></div>\n<div id=\"viz1\"></div>\n```\nIn the javascript, just create charts, referencing the desired container:\n```js\n// create Bar chart from csv file, using default options\n new roughViz.Bar({\n    element: '#viz0', // container selection\n    data: 'https://raw.githubusercontent.com/jwilber/random_data/master/flavors.csv',\n    labels: 'flavor',\n    values: 'price'\n});\n\n// create Donut chart using defined data & customize plot options\nnew roughViz.Donut(\n  {\n    element: '#viz1',\n    data: {\n      labels: ['North', 'South', 'East', 'West'],\n      values: [10, 5, 8, 3]\n    },\n    title: \"Regions\",\n    width: window.innerWidth / 4,\n    roughness: 8,\n    colors: ['red', 'orange', 'blue', 'skyblue'],\n    stroke: 'black',\n    strokeWidth: 3,\n    fillStyle: 'cross-hatch',\n    fillWeight: 3.5,\n  }\n);\n```\n\n<h2 id=\"API\">API</h2>\n\n### `roughViz.Bar`\nRequired\n- `element` [string]: Id or class of container element.\n- `data`: Data with which to construct chart.\nCan be either an object or string.\n\n   - If object: must contain `labels` and `values` keys:\n\n    ```js\n    new roughViz.Bar({\n       element: '.viz',\n       data: {labels: ['a', 'b'], values: [10, 20]}\n     })\n     ```\n\n   - If string: must be a path/url to a `csv` or `tsv`, and you must also specify the `labels` and `values` as separate attributes that represent columns in said file:\n   ```js\n   new roughViz.Bar({\n     element: '#viz0',\n     data: 'stringToDataUrl.csv',\n     labels: 'nameOfLabelsColumn',\n     values: 'nameOfValuesColumn',\n   })\n   ```\n\nOptional\n- `axisFontSize` [string]: Font-size for axes' labels. Default: `'1rem'`.\n- `axisRoughness` [number]: Roughness for x & y axes. Default: `0.5`.\n- `axisStrokeWidth` [number]: Stroke-width for x & y axes. Default: `0.5`.\n- `bowing` [number]: Chart bowing. Default: `0`.\n- `color` [string]: Color for each bar. Default: `'skyblue'`.\n- `fillStyle` [string]: Bar fill-style. Should be one of [fillStyles](#fillStyle) shown above.\n- `fillWeight` [number]: Weight of inner paths' color. Default: `0.5`.\n- `font`: Font-family to use. You can use `0` or `gaegu` to use `Gaegu`, or `1` or `indie flower` to use `Indie Flower`. Or feed it something else. Default: `Gaegu`.\n- `highlight` [string]: Color for each bar on hover. Default: `'coral'`.\n- `innerStrokeWidth` [number]: Stroke-width for paths inside bars. Default: `1`.\n- `interactive` [boolean]: Whether or not chart is interactive. Default: `true`.\n- `labelFontSize` [string]: Font-size for axes' labels. Default: `'1rem'`.\n- `margin` [object]: Margin object. Default: `{top: 50, right: 20, bottom: 70, left: 100}`\n- `padding` [number]: Padding between bars. Default: `0.1`.\n- `roughness` [number]: Roughness level of chart. Default: `1`.\n- `simplification` [number]: Chart simplification. Default `0.2`.\n- `stroke` [string]: Color of bars' stroke. Default: `black`.\n- `strokeWidth` [number]: Size of bars' stroke. Default: `1`.\n- `title` [string]: Chart title. Optional.\n- `titleFontSize` [string]: Font-size for chart title. Default: `'1rem'`.\n- `tooltipFontSize` [string]: Font-size for tooltip. Default: `'0.95rem'`.\n- `xLabel` [string]: Label for x-axis.\n- `yLabel` [string]: Label for y-axis.\n\n\n### `roughViz.BarH`\nRequired\n- `element` [string]: Id or class of container element.\n- `data`: Data with which to construct chart.\nCan be either an object or string.\n\n   - If object: must contain `labels` and `values` keys:\n\n    ```js\n    new roughViz.BarH({\n       element: '.viz',\n       data: {labels: ['a', 'b'], values: [10, 20]}\n     })\n     ```\n\n   - If string: must be a path/url to a `csv` or `tsv`, and you must also specify the `labels` and `values` as separate attributes that represent columns in said file:\n   ```js\n   new roughViz.BarH({\n     element: '#viz0',\n     data: 'stringToDataUrl.csv',\n     labels: 'nameOfLabelsColumn',\n     values: 'nameOfValuesColumn',\n   })\n   ```\n\nOptional\n- `axisFontSize` [string]: Font-size for axes' labels. Default: `'1rem'`.\n- `axisRoughness` [number]: Roughness for x & y axes. Default: `0.5`.\n- `axisStrokeWidth` [number]: Stroke-width for x & y axes. Default: `0.5`.\n- `bowing` [number]: Chart bowing. Default: `0`.\n- `color` [string]: Color for each bar. Default: `'skyblue'`.\n- `fillStyle` [string]: Bar fill-style. Should be one of [fillStyles](#fillStyle) shown above.\n- `fillWeight` [number]: Weight of inner paths' color. Default: `0.5`.\n- `font`: Font-family to use. You can use `0` or `gaegu` to use `Gaegu`, or `1` or `indie flower` to use `Indie Flower`. Or feed it something else. Default: `Gaegu`.\n- `highlight` [string]: Color for each bar on hover. Default: `'coral'`.\n- `innerStrokeWidth` [number]: Stroke-width for paths inside bars. Default: `1`.\n- `interactive` [boolean]: Whether or not chart is interactive. Default: `true`.\n- `labelFontSize` [string]: Font-size for axes' labels. Default: `'1rem'`.\n- `margin` [object]: Margin object. Default: `{top: 50, right: 20, bottom: 70, left: 100}`\n- `padding` [number]: Padding between bars. Default: `0.1`.\n- `roughness` [number]: Roughness level of chart. Default: `1`.\n- `simplification` [number]: Chart simplification. Default `0.2`.\n- `stroke` [string]: Color of bars' stroke. Default: `black`.\n- `strokeWidth` [number]: Size of bars' stroke. Default: `1`.\n- `title` [string]: Chart title. Optional.\n- `titleFontSize` [string]: Font-size for chart title. Default: `'1rem'`.\n- `tooltipFontSize` [string]: Font-size for tooltip. Default: `'0.95rem'`.\n- `xLabel` [string]: Label for x-axis.\n- `yLabel` [string]: Label for y-axis.\n\n\n### `roughViz.Donut`\nRequired\n- `element` [string]: Id or class of container element.\n- `data`: Data with which to construct chart.\nCan be either an object or string.\n\n   - If object: must contain `labels` and `values` keys:\n\n    ```js\n    new roughViz.Donut({\n       element: '.viz',\n       data: {labels: ['a', 'b'], values: [10, 20]}\n     })\n     ```\n\n   - If string: must be a path/url to a `csv`, `json`, or `tsv`, and you must also specify the `labels` and `values` as separate attributes that represent columns in said file:\n   ```js\n   new roughViz.Donut({\n     element: '#viz0',\n     data: 'stringToDataUrl.csv',\n     labels: 'nameOfLabelsColumn',\n     values: 'nameOfValuesColumn',\n   })\n   ```\n\nOptional\n- `bowing` [number]: Chart bowing. Default: `0`.\n- `colors` [array]: Array of colors for each arc. Default: `['coral', 'skyblue', '#66c2a5', 'tan', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', 'tan', 'orange']`.\n- `fillStyle` [string]: Bar fill-style. Should be one of [fillStyles](#fillStyle) shown above.\n- `fillWeight` [number]: Weight of inner paths' color. Default: `0.85`.\n- `font`: Font-family to use. You can use `0` or `gaegu` to use `Gaegu`, or `1` or `indie flower` to use `Indie Flower`. Or feed it something else. Default: `Gaegu`.\n- `highlight` [string]: Color for each arc on hover. Default: `'coral'`.\n- `innerStrokeWidth` [number]: Stroke-width for paths inside arcs. Default: `0.75`.\n- `interactive` [boolean]: Whether or not chart is interactive. Default: `true`.\n- `legend` [boolean]: Whether or not to add legend. Default: `'true'`.\n- `legendPosition` [string]: Position of legend. Should be either `'left'` or `'right'`. Default: `'right'`.\n- `margin` [object]: Margin object. Default: `{top: 50, right: 20, bottom: 70, left: 100}`\n- `padding` [number]: Padding between bars. Default: `0.1`.\n- `roughness` [number]: Roughness level of chart. Default: `1`.\n- `simplification` [number]: Chart simplification. Default `0.2`.\n- `strokeWidth` [number]: Size of bars' stroke. Default: `1`.\n- `title` [string]: Chart title. Optional.\n- `titleFontSize` [string]: Font-size for chart title. Default: `'1rem'`.\n- `tooltipFontSize` [string]: Font-size for tooltip. Default: `'0.95rem'`.\n\n\n### `roughViz.Line`\nRequired\n- `element` [string]: Id or class of container element.\n- `data`: Must be a path/url to a `csv` or `tsv`, and you must also specify the each `y` as separate attributes that represent columns in said file. Each attribute prefaced with `y` (except `yLabel`) will receive its own line:\n   ```js\n   new roughViz.Line({\n     element: '#viz0',\n     data: 'https://raw.githubusercontent.com/jwilber/random_data/master/profits.csv',\n     y1: 'revenue',\n     y2: 'cost',\n     y3: 'profit'\n   })\n   ```\n\nOptional\n- `axisFontSize` [string]: Font-size for axes' labels. Default: `'1rem'`.\n- `axisRoughness` [number]: Roughness for x & y axes. Default: `0.5`.\n- `axisStrokeWidth` [number]: Stroke-width for x & y axes. Default: `0.5`.\n- `bowing` [number]: Chart bowing. Default: `0`.\n- `circle` [boolean]: Whether or not to add circles to chart. Default: `true`.\n- `circleRadius` [number]: Radius of circles. Default: `10`.\n- `circleRoughness` [number]: Roughness of circles. Default: `2`.\n- `colors` [array or string]: Array of colors for each arc. Default: `['coral', 'skyblue', '#66c2a5', 'tan', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', 'tan', 'orange']`. If string (e.g. `'blue'`), all circles will take that color.\n- `fillStyle` [string]: Bar fill-style. Should be one of [fillStyles](#fillStyle) shown above.\n- `fillWeight` [number]: Weight of inner paths' color. Default: `0.5`.\n- `font`: Font-family to use. You can use `0` or `gaegu` to use `Gaegu`, or `1` or `indie flower` to use `Indie Flower`. Or feed it something else. Default: `Gaegu`.\n- `interactive` [boolean]: Whether or not chart is interactive. Default: `true`.\n- `labelFontSize` [string]: Font-size for axes' labels. Default: `'1rem'`.\n- `legend` [boolean]: Whether or not to add legend. Default: `true`.\n- `legendPosition` [string]: Position of legend. Should be either `'left'` or `'right'`. Default: `'right'`.\n- `margin` [object]: Margin object. Default: `{top: 50, right: 20, bottom: 70, left: 100}`\n- `roughness` [number]: Roughness level of chart. Default: `1`.\n- `simplification` [number]: Chart simplification. Default `0.2`.\n- `stroke` [string]: Color of lines' stroke. Default: `this.colors`.\n- `strokeWidth` [number]: Size of lines' stroke. Default: `1`.\n- `title` [string]: Chart title. Optional.\n- `titleFontSize` [string]: Font-size for chart title. Default: `'0.95rem'`.\n- `tooltipFontSize` [string]: Font-size for tooltip. Default: `'0.95rem'`.\n- `xLabel` [string]: Label for x-axis.\n- `yLabel` [string]: Label for y-axis.\n\n\n### `roughViz.Pie`\nRequired\n- `element` [string]: Id or class of container element.\n- `data`: Data with which to construct chart.\nCan be either an object or string.\n\n   - If object: must contain `labels` and `values` keys:\n\n    ```js\n    new roughViz.Pie({\n       element: '.viz',\n       data: {labels: ['a', 'b'], values: [10, 20]}\n     })\n     ```\n\n   - If string: must be a path/url to a `csv`, `json`, or `tsv`, and you must also specify the `labels` and `values` as separate attributes that represent columns in said file:\n   ```js\n   new roughViz.Pie({\n     element: '#viz0',\n     data: 'stringToDataUrl.csv',\n     labels: 'nameOfLabelsColumn',\n     values: 'nameOfValuesColumn',\n   })\n   ```\n\nOptional\n- `bowing` [number]: Chart bowing. Default: `0`.\n- `colors` [array]: Array of colors for each arc. Default: `['coral', 'skyblue', '#66c2a5', 'tan', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', 'tan', 'orange']`.\n- `fillStyle` [string]: Bar fill-style. Should be one of [fillStyles](#fillStyle) shown above.\n- `fillWeight` [number]: Weight of inner paths' color. Default: `0.85`.\n- `font`: Font-family to use. You can use `0` or `gaegu` to use `Gaegu`, or `1` or `indie flower` to use `Indie Flower`. Or feed it something else. Default: `Gaegu`.\n- `highlight` [string]: Color for each arc on hover. Default: `'coral'`.\n- `innerStrokeWidth` [number]: Stroke-width for paths inside arcs. Default: `0.75`.\n- `interactive` [boolean]: Whether or not chart is interactive. Default: `true`.\n- `legend` [boolean]: Whether or not to add legend. Default: `true`.\n- `legendPosition` [string]: Position of legend. Should be either `'left'` or `'right'`. Default: `'right'`.\n- `margin` [object]: Margin object. Default: `{top: 50, right: 20, bottom: 70, left: 100}`\n- `padding` [number]: Padding between bars. Default: `0.1`.\n- `roughness` [number]: Roughness level of chart. Default: `1`.\n- `simplification` [number]: Chart simplification. Default `0.2`.\n- `strokeWidth` [number]: Size of bars' stroke. Default: `1`.\n- `title` [string]: Chart title. Optional.\n- `titleFontSize` [string]: Font-size for chart title. Default: `'1rem'`.\n- `tooltipFontSize` [string]: Font-size for tooltip. Default: `'0.95rem'`.\n\n\n### `roughViz.Scatter`\nRequired\n- `element` [string]: Id or class of container element.\n- `data`: Data with which to construct chart.\nCan be either an object or string.\n\n   - If object: must contain `x` and `y` keys:\n\n    ```js\n    new roughViz.Scatter({\n       element: '.viz',\n       data: {x: [1, 2, 35], y: [10, 20, 8]}\n     })\n     ```\n\n   - If string: must be a path/url to a `csv` or `tsv`, and you must also specify the `x` and `y` as separate attributes that represent columns in said file:\n   ```js\n   new roughViz.Scatter({\n     element: '#viz0',\n     data: 'stringToDataUrl.csv',\n     x: 'nameOfLabelsColumn',\n     y: 'nameOfValuesColumn',\n   })\n   ```\n\nOptional\n- `axisFontSize` [string]: Font-size for axes' labels. Default: `'1rem'`.\n- `axisRoughness` [number]: Roughness for x & y axes. Default: `0.5`.\n- `axisStrokeWidth` [number]: Stroke-width for x & y axes. Default: `0.5`.\n- `bowing` [number]: Chart bowing. Default: `0`.\n- `colors` [array or string]: Array of colors for each arc. Default: `['coral', 'skyblue', '#66c2a5', 'tan', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', 'tan', 'orange']`. If string (e.g. `'blue'`), all circles will take that color.\n- `colorVar` [string]: If input data is `csv` or `tsv`, this should be an ordinal column with which to color points by.\n`curbZero` [boolean]: Whether or not to force (x, y) axes to (0, 0). Default: `false`.\n- `fillStyle` [string]: Bar fill-style. Should be one of [fillStyles](#fillStyle) shown above.\n- `fillWeight` [number]: Weight of inner paths' color. Default: `0.5`.\n- `font`: Font-family to use. You can use `0` or `gaegu` to use `Gaegu`, or `1` or `indie flower` to use `Indie Flower`. Or feed it something else. Default: `Gaegu`.\n- `highlight` [string]: Color for each bar on hover. Default: `'coral'`.\n- `highlightLabel` [string]: If input data is `csv` or `tsv`, this should be a column representing what value to display on hover. Otherwise, `(x, y)` values will be shown on hover.\n- `innerStrokeWidth` [number]: Stroke-width for paths inside circles. Default: `1`.\n- `interactive` [boolean]: Whether or not chart is interactive. Default: `true`.\n- `labelFontSize` [string]: Font-size for axes' labels. Default: `'1rem'`.\n- `margin` [object]: Margin object. Default: `{top: 50, right: 20, bottom: 70, left: 100}`\n- `radius` [number]: Circle radius. Default: `8`.\n- `roughness` [number]: Roughness level of chart. Default: `1`.\n- `simplification` [number]: Chart simplification. Default `0.2`.\n- `stroke` [string]: Color of circles' stroke. Default: `black`.\n- `strokeWidth` [number]: Size of circles' stroke. Default: `1`.\n- `title` [string]: Chart title. Optional.\n- `titleFontSize` [string]: Font-size for chart title. Default: `'0.95rem'`.\n- `tooltipFontSize` [string]: Font-size for tooltip. Default: `'0.95rem'`.\n- `xLabel` [string]: Label for x-axis.\n- `yLabel` [string]: Label for y-axis.\n\n\n### `roughViz.StackedBar`\nRequired\n- `element` [string]: Id or class of container element.\n- `data`: Data with which to construct chart. Should be an object.\n- `labels`: String name of label key in `data` object.\n\n    ```js\n    new roughViz.StackedBar({\n       element: '#vis0',\n       data: [\n           {month:'Jan', A:20, B: 5},\n           {month:'Feb', A:25, B: 10},\n       ],\n       labels: 'month',\n     })\n     ```\n\nOptional\n- `axisFontSize` [string]: Font-size for axes' labels. Default: `'1rem'`.\n- `axisRoughness` [number]: Roughness for x & y axes. Default: `0.5`.\n- `axisStrokeWidth` [number]: Stroke-width for x & y axes. Default: `0.5`.\n- `bowing` [number]: Chart bowing. Default: `0`.\n- `colors` [string]: Array of colors for each bar grouping.\n- `fillStyle` [string]: Bar fill-style. Should be one of [fillStyles](#fillStyle) shown above.\n- `fillWeight` [number]: Weight of inner paths' color. Default: `0.5`.\n- `font`: Font-family to use. You can use `0` or `gaegu` to use `Gaegu`, or `1` or `indie flower` to use `Indie Flower`. Or feed it something else. Default: `Gaegu`.\n- `highlight` [string]: Color for each bar on hover. Default: `'coral'`.\n- `innerStrokeWidth` [number]: Stroke-width for paths inside bars. Default: `1`.\n- `interactive` [boolean]: Whether or not chart is interactive. Default: `true`.\n- `labelFontSize` [string]: Font-size for axes' labels. Default: `'1rem'`.\n- `margin` [object]: Margin object. Default: `{top: 50, right: 20, bottom: 70, left: 100}`\n- `padding` [number]: Padding between bars. Default: `0.1`.\n- `roughness` [number]: Roughness level of chart. Default: `1`.\n- `simplification` [number]: Chart simplification. Default `0.2`.\n- `stroke` [string]: Color of bars' stroke. Default: `black`.\n- `strokeWidth` [number]: Size of bars' stroke. Default: `1`.\n- `title` [string]: Chart title. Optional.\n- `titleFontSize` [string]: Font-size for chart title. Default: `'1rem'`.\n- `tooltipFontSize` [string]: Font-size for tooltip. Default: `'0.95rem'`.\n- `xLabel` [string]: Label for x-axis.\n- `yLabel` [string]: Label for y-axis.\n\n\n\n### Contributors\n- [Jared Wilber](https://twitter.com/jdwlbr)\n- [Laimonas Andriejauskas](https://github.com/laimonasA)\n- [Dave Slutzkin](https://github.com/daveslutzkin)\n- [JoLo](https://github.com/jolo-dev)\n- [Lucas Wilber](https://github.com/lucasjwilber)\n\n### Acknowledgements\nThis library wouldn't be possible without the following people:\n\n- [Mike Bostock](https://twitter.com/mbostock) for [D3.js](https://d3js.org/).\n- [Preet Shihn](https://twitter.com/preetster) for [rough.js](https://roughjs.com/).\n- [Jo Wood](https://www.city.ac.uk/people/academics/jo-wood) for [handy](https://www.gicentre.net/software/#/handy/) processing lib.\n\n\n### License\nMIT License\n\nCopyright (c) 2019 Jared Wilber\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "jest.config.js",
          "type": "blob",
          "size": 6.16015625,
          "content": "// For a detailed explanation regarding each configuration property, visit:\n// https://jestjs.io/docs/en/configuration.html\n\nmodule.exports = {\n  // All imported modules in your tests should be mocked automatically\n  // automock: false,\n\n  // Stop running tests after `n` failures\n  // bail: 0,\n\n  // Respect \"browser\" field in package.json when resolving modules\n  // browser: false,\n\n  // The directory where Jest should store its cached dependency information\n  // cacheDirectory: \"/private/var/folders/8p/b6pfnrfn4sz61xsdjvm4xq3w0000gn/T/jest_dx\",\n\n  // Automatically clear mock calls and instances between every test\n  clearMocks: true,\n\n  // Indicates whether the coverage information should be collected while executing the test\n  // collectCoverage: false,\n\n  // An array of glob patterns indicating a set of files for which coverage information should be collected\n  // collectCoverageFrom: null,\n\n  // The directory where Jest should output its coverage files\n  coverageDirectory: \"coverage\",\n\n  // An array of regexp pattern strings used to skip coverage collection\n  // coveragePathIgnorePatterns: [\n  //   \"/node_modules/\"\n  // ],\n\n  // A list of reporter names that Jest uses when writing coverage reports\n  // coverageReporters: [\n  //   \"json\",\n  //   \"text\",\n  //   \"lcov\",\n  //   \"clover\"\n  // ],\n\n  // An object that configures minimum threshold enforcement for coverage results\n  // coverageThreshold: null,\n\n  // A path to a custom dependency extractor\n  // dependencyExtractor: null,\n\n  // Make calling deprecated APIs throw helpful error messages\n  // errorOnDeprecated: false,\n\n  // Force coverage collection from ignored files using an array of glob patterns\n  // forceCoverageMatch: [],\n\n  // A path to a module which exports an async function that is triggered once before all test suites\n  // globalSetup: null,\n\n  // A path to a module which exports an async function that is triggered once after all test suites\n  // globalTeardown: null,\n\n  // A set of global variables that need to be available in all test environments\n  // globals: {},\n\n  // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.\n  // maxWorkers: \"50%\",\n\n  // An array of directory names to be searched recursively up from the requiring module's location\n  // moduleDirectories: [\n  //   \"node_modules\"\n  // ],\n\n  // An array of file extensions your modules use\n  // moduleFileExtensions: [\n  //   \"js\",\n  //   \"json\",\n  //   \"jsx\",\n  //   \"ts\",\n  //   \"tsx\",\n  //   \"node\"\n  // ],\n\n  // A map from regular expressions to module names that allow to stub out resources with a single module\n  // moduleNameMapper: {},\n\n  // An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\n  // modulePathIgnorePatterns: [],\n\n  // Activates notifications for test results\n  // notify: false,\n\n  // An enum that specifies notification mode. Requires { notify: true }\n  // notifyMode: \"failure-change\",\n\n  // A preset that is used as a base for Jest's configuration\n  // preset: null,\n\n  // Run tests from one or more projects\n  // projects: null,\n\n  // Use this configuration option to add custom reporters to Jest\n  // reporters: undefined,\n\n  // Automatically reset mock state between every test\n  // resetMocks: false,\n\n  // Reset the module registry before running each individual test\n  // resetModules: false,\n\n  // A path to a custom resolver\n  // resolver: null,\n\n  // Automatically restore mock state between every test\n  // restoreMocks: false,\n\n  // The root directory that Jest should scan for tests and modules within\n  // rootDir: null,\n\n  // A list of paths to directories that Jest should use to search for files in\n  // roots: [\n  //   \"<rootDir>\"\n  // ],\n\n  // Allows you to use a custom runner instead of Jest's default test runner\n  // runner: \"jest-runner\",\n\n  // The paths to modules that run some code to configure or set up the testing environment before each test\n  // setupFiles: [],\n\n  // A list of paths to modules that run some code to configure or set up the testing framework before each test\n  // setupFilesAfterEnv: [],\n\n  // A list of paths to snapshot serializer modules Jest should use for snapshot testing\n  // snapshotSerializers: [],\n\n  // The test environment that will be used for testing\n  testEnvironment: \"node\",\n\n  // Options that will be passed to the testEnvironment\n  // testEnvironmentOptions: {},\n\n  // Adds a location field to test results\n  // testLocationInResults: false,\n\n  // The glob patterns Jest uses to detect test files\n  // testMatch: [\n  //   \"**/__tests__/**/*.[jt]s?(x)\",\n  //   \"**/?(*.)+(spec|test).[tj]s?(x)\"\n  // ],\n\n  // An array of regexp pattern strings that are matched against all test paths, matched tests are skipped\n  // testPathIgnorePatterns: [\n  //   \"/node_modules/\"\n  // ],\n\n  // The regexp pattern or array of patterns that Jest uses to detect test files\n  // testRegex: [],\n\n  // This option allows the use of a custom results processor\n  // testResultsProcessor: null,\n\n  // This option allows use of a custom test runner\n  // testRunner: \"jasmine2\",\n\n  // This option sets the URL for the jsdom environment. It is reflected in properties such as location.href\n  // testURL: \"http://localhost\",\n\n  // Setting this value to \"fake\" allows the use of fake timers for functions such as \"setTimeout\"\n  // timers: \"real\",\n\n  // A map from regular expressions to paths to transformers\n  // transform: null,\n\n  // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation\n  // transformIgnorePatterns: [\n  //   \"/node_modules/\"\n  // ],\n\n  // An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them\n  // unmockedModulePathPatterns: undefined,\n\n  // Indicates whether each individual test should be reported during the run\n  // verbose: null,\n\n  // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode\n  // watchPathIgnorePatterns: [],\n\n  // Whether to use watchman for file crawling\n  // watchman: true,\n};\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.2421875,
          "content": "{\n  \"name\": \"rough-viz\",\n  \"version\": \"2.0.5\",\n  \"description\": \"Hand drawn, rough, sketchy data visualization in svg.\",\n  \"jsdelivr\": \"dist/roughviz.umd.js\",\n  \"main\": \"dist/roughviz.cjs.js\",\n  \"module\": \"dist/roughviz.es.js\",\n  \"unpkg\": \"dist/roughviz.umd.js\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"serve\": \"vite preview\",\n    \"test\": \"jest --env=jsdom\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/jwilber/roughViz.git\"\n  },\n  \"keywords\": [\n    \"chart\",\n    \"graph\",\n    \"rough\",\n    \"hand-drawn\",\n    \"sketchy\",\n    \"dataviz\",\n    \"data visualization\"\n  ],\n  \"author\": \"jwilber\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/jwilber/roughViz/issues\"\n  },\n  \"homepage\": \"https://github.com/jwilber/roughViz#readme\",\n  \"dependencies\": {\n    \"d3-array\": \"^2.3.1\",\n    \"d3-axis\": \"^1.0.12\",\n    \"d3-fetch\": \"^1.1.2\",\n    \"d3-force\": \"^3.0.0\",\n    \"d3-format\": \"^1.4.1\",\n    \"d3-scale\": \"^3.2.0\",\n    \"d3-scale-chromatic\": \"^1.5.0\",\n    \"d3-selection\": \"^1.4.0\",\n    \"d3-shape\": \"^1.3.5\",\n    \"roughjs\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"eslint\": \"^6.3.0\",\n    \"eslint-config-strongloop\": \"^2.1.0\",\n    \"jest\": \"^24.9.0\",\n    \"rollup-plugin-terser\": \"^7.0.2\",\n    \"vite\": \"^4.4.9\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vite.config.js",
          "type": "blob",
          "size": 0.3876953125,
          "content": "import { defineConfig } from \"vite\";\nimport { terser } from \"rollup-plugin-terser\";\n\nexport default defineConfig({\n  build: {\n    lib: {\n      entry: \"src/index.js\",\n      name: \"roughViz\",\n      formats: [\"es\", \"umd\", \"cjs\"],\n      fileName: (format) => `roughviz.${format}.js`,\n    },\n    rollupOptions: {\n      plugins: [terser()],\n      output: {\n        globals: {},\n      },\n    },\n  },\n});\n"
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}