{
  "metadata": {
    "timestamp": 1736562562033,
    "page": 28,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "GoogleChromeLabs/carlo",
      "stars": 9307,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.021484375,
          "content": "examples\nnode_modules\n"
        },
        {
          "name": ".eslintrc.js",
          "type": "blob",
          "size": 3.154296875,
          "content": "module.exports = {\n    \"root\": true,\n\n    \"env\": {\n        \"node\": true,\n        \"es6\": true\n    },\n\n    \"parserOptions\": {\n        \"ecmaVersion\": 8\n    },\n\n    /**\n     * ESLint rules\n     *\n     * All available rules: http://eslint.org/docs/rules/\n     *\n     * Rules take the following form:\n     *   \"rule-name\", [severity, { opts }]\n     * Severity: 2 == error, 1 == warning, 0 == off.\n     */\n    \"rules\": {\n        /**\n         * Enforced rules\n         */\n\n\n        // syntax preferences\n        \"quotes\": [2, \"single\", {\n            \"avoidEscape\": true,\n            \"allowTemplateLiterals\": true\n        }],\n        \"semi\": 2,\n        \"no-extra-semi\": 2,\n        \"comma-style\": [2, \"last\"],\n        \"wrap-iife\": [2, \"inside\"],\n        \"spaced-comment\": [2, \"always\", {\n            \"markers\": [\"*\"]\n        }],\n        \"eqeqeq\": [2],\n        \"arrow-body-style\": [2, \"as-needed\"],\n        \"accessor-pairs\": [2, {\n            \"getWithoutSet\": false,\n            \"setWithoutGet\": false\n        }],\n        \"brace-style\": [2, \"1tbs\", {\"allowSingleLine\": true}],\n        \"curly\": [2, \"multi-or-nest\", \"consistent\"],\n        \"new-parens\": 2,\n        \"func-call-spacing\": 2,\n        \"arrow-parens\": [2, \"as-needed\"],\n        \"prefer-const\": 2,\n        \"quote-props\": [2, \"consistent\"],\n\n        // anti-patterns\n        \"no-var\": 2,\n        \"no-with\": 2,\n        \"no-multi-str\": 2,\n        \"no-caller\": 2,\n        \"no-implied-eval\": 2,\n        \"no-labels\": 2,\n        \"no-new-object\": 2,\n        \"no-octal-escape\": 2,\n        \"no-self-compare\": 2,\n        \"no-shadow-restricted-names\": 2,\n        \"no-cond-assign\": 2,\n        \"no-debugger\": 2,\n        \"no-dupe-keys\": 2,\n        \"no-duplicate-case\": 2,\n        \"no-empty-character-class\": 2,\n        \"no-unreachable\": 2,\n        \"no-unsafe-negation\": 2,\n        \"radix\": 2,\n        \"valid-typeof\": 2,\n        \"no-unused-vars\": [2, { \"args\": \"none\", \"vars\": \"local\", \"varsIgnorePattern\": \"([fx]?describe|[fx]?it|beforeAll|beforeEach|afterAll|afterEach)\" }],\n        \"no-implicit-globals\": [2],\n\n        // es2015 features\n        \"require-yield\": 2,\n        \"template-curly-spacing\": [2, \"never\"],\n\n        // spacing details\n        \"space-infix-ops\": 2,\n        \"space-in-parens\": [2, \"never\"],\n        \"space-before-function-paren\": [2, \"never\"],\n        \"no-whitespace-before-property\": 2,\n        \"keyword-spacing\": [2, {\n            \"overrides\": {\n                \"if\": {\"after\": true},\n                \"else\": {\"after\": true},\n                \"for\": {\"after\": true},\n                \"while\": {\"after\": true},\n                \"do\": {\"after\": true},\n                \"switch\": {\"after\": true},\n                \"return\": {\"after\": true}\n            }\n        }],\n        \"arrow-spacing\": [2, {\n            \"after\": true,\n            \"before\": true\n        }],\n\n        // file whitespace\n        \"no-multiple-empty-lines\": [2, {\"max\": 2}],\n        \"no-mixed-spaces-and-tabs\": 2,\n        \"no-trailing-spaces\": 2,\n        \"linebreak-style\": [ process.platform === \"win32\" ? 0 : 2, \"unix\" ],\n        \"indent\": [2, 2, { \"SwitchCase\": 1, \"CallExpression\": {\"arguments\": 2}, \"MemberExpression\": 2 }],\n        \"key-spacing\": [2, {\n            \"beforeColon\": false\n        }]\n    }\n};\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1357421875,
          "content": ".DS_Store\n.eslintrc.js\n.eslintignore\n.profile\n.vscode\nnode_modules\npackage-lock.json\nrpc/node_modules\nrpc/package-lock.json\nlib/.local-data"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.2216796875,
          "content": "# repeats from .gitignore\n.DS_Store\n.eslintrc.js\n.eslintignore\n.profile\n.vscode\nnode_modules\npackage-lock.json\nrpc/node_modules\nrpc/package-lock.json\nlib/.local-data\n\n.npmignore\nexamples\nCONTRIBUTING.md\nAPI.md\nrpc/test.js\ntest\n"
        },
        {
          "name": "API.md",
          "type": "blob",
          "size": 19.166015625,
          "content": "## API v0.9\n\n> This is a pre-release API, so it is a subject to change. Please use it at your own risk. Once API is validated, it will be bumped to v1.0 and preserved for backwards compatibility.\n\n##### Node side API\n\n- [carlo.enterTestMode()](#carloentertestmode)\n- [carlo.launch([options])](#carlolaunchoptions)\n- [class: App](#class-app)\n  * [event: 'exit'](#event-exit)\n  * [event: 'window'](#event-window)\n  * [App.browserForTest()](#appbrowserfortest)\n  * [App.createWindow(options)](#appcreatewindowoptions)\n  * [App.evaluate(pageFunction[, ...args])](#appevaluatepagefunction-args)\n  * [App.exit()](#appexit)\n  * [App.exposeFunction(name, carloFunction)](#appexposefunctionname-carlofunction)\n  * [App.load(uri[, ...params])](#apploaduri-params)\n  * [App.mainWindow()](#appmainwindow)\n  * [App.serveFolder(folder[, prefix])](#appservefolderfolder-prefix)\n  * [App.serveHandler(handler)](#appservehandlerhandler)\n  * [App.serveOrigin(base[, prefix])](#appserveoriginbase-prefix)\n  * [App.setIcon(image)](#appseticonimage)\n  * [App.windows()](#appwindows)\n- [class: HttpRequest](#class-httprequest)\n  * [HttpRequest.abort()](#httprequestabort)\n  * [HttpRequest.continue()](#httprequestcontinue)\n  * [HttpRequest.fail()](#httprequestfail)\n  * [HttpRequest.fulfill(options)](#httprequestfulfilloptions)\n  * [HttpRequest.headers()](#httprequestheaders)\n  * [HttpRequest.method()](#httprequestmethod)\n  * [HttpRequest.url()](#httprequesturl)\n- [class: Window](#class-window)\n  * [event: 'close'](#event-close)\n  * [Window.bounds()](#windowbounds)\n  * [Window.bringToFront()](#windowbringtofront)\n  * [Window.close()](#windowclose)\n  * [Window.evaluate(pageFunction[, ...args])](#windowevaluatepagefunction-args)\n  * [Window.exposeFunction(name, carloFunction)](#windowexposefunctionname-carlofunction)\n  * [Window.fullscreen()](#windowfullscreen)\n  * [Window.load(uri[, ...params])](#windowloaduri-params)\n  * [Window.maximize()](#windowmaximize)\n  * [Window.minimize()](#windowminimize)\n  * [Window.pageForTest()](#windowpagefortest)\n  * [Window.paramsForReuse()](#windowparamsforreuse)\n  * [Window.serveFolder(folder[, prefix])](#windowservefolderfolder-prefix)\n  * [Window.serveHandler(handler)](#windowservehandlerhandler)\n  * [Window.serveOrigin(base[, prefix])](#windowserveoriginbase-prefix)\n  * [Window.setBounds(bounds)](#windowsetboundsbounds)\n\n##### Web side API\n\n- [carlo.fileInfo(file)](#carlofileinfofile)\n- [carlo.loadParams()](#carloloadparams)\n\n#### carlo.enterTestMode()\n\nEnters headless test mode. In the test mode, Puppeteer browser and pages are available via\n[App.browserForTest()](#appbrowserfortest) and [Window.pageForTest()](#windowpagefortest) respectively.\nPlease refer to the Puppeteer [documentation](https://pptr.dev) for details on headless testing.\n\n#### carlo.launch([options])\n- `options` <[Object]> Set of configurable options to set on the app. Can have the following fields:\n  - `width` <[number]> App window width in pixels.\n  - `height` <[number]> App window height in pixels.\n  - `top`: <[number]> App window top offset in pixels.\n  - `left` <[number]> App window left offset in pixels.\n  - `bgcolor` <[string]> Background color using hex notation, defaults to `'#ffffff'`.\n  - `channel` <[Array]<[string]>> Browser to be used, defaults to `['stable']`:\n    - `'stable'` only uses locally installed stable channel Chrome.\n    - `'canary'` only uses Chrome SxS aka Canary.\n    - `'chromium'` downloads local version of Chromium compatible with the Puppeteer used.\n    - `'rXXXXXX'` a specific Chromium revision is used.\n  - `icon` <[Buffer]|[string]> Application icon to be used in the system dock. Either buffer containing PNG or a path to the PNG file on the file system. This feature is only available in Chrome M72+. One can use `'canary'` channel to see it in action before M72 hits stable.\n  - `paramsForReuse` <\\*> Optional parameters to share between Carlo instances. See [Window.paramsForReuse](#windowparamsforreuse) for details.\n  - `title` <[string]> Application title.\n  - `userDataDir` <[string]> Path to a [User Data Directory](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md). This folder is created upon the first app launch and contains user settings and Web storage data. Defaults to `'.profile'`.\n  - `executablePath` <[string]> Path to a Chromium or Chrome executable to run instead of the automatically located Chrome. If `executablePath` is a relative path, then it is resolved relative to [current working directory](https://nodejs.org/api/process.html#process_process_cwd). Carlo is only guaranteed to work with the latest Chrome stable version.\n  - `args` <[Array]<[string]>> Additional arguments to pass to the browser instance. The list of Chromium flags can be found [here](https://peter.sh/experiments/chromium-command-line-switches/).\n- `return`: <[Promise]<[App]>> Promise which resolves to the app instance.\n\nLaunches the browser.\n\n### class: App\n\n#### event: 'exit'\nEmitted when the last window closes.\n\n#### event: 'window'\n- <[Window]>\n\nEmitted when the new window opens. This can happen in the following situations:\n- [App.createWindow](#appcreatewindowoptions) was called.\n- [carlo.launch](#carlolaunchoptions) was called from the same or another instance of the Node app.\n- [window.open](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) was called from within the web page.\n\n#### App.browserForTest()\n- `return`: <[Browser]> Puppeteer browser object for testing.\n\n#### App.createWindow([options])\n- `options` <[Object]> Set of configurable options to set on the app. Can have the following fields:\n  - `width` <[number]> Window width in pixels, defaults to app width.\n  - `height` <[number]> Window height in pixels, defaults to app height.\n  - `top` <[number]> Window top in pixels, defaults to app top.\n  - `left` <[number]> Window left in pixels, defaults to app left.\n  - `bgcolor` <[string]> Background color using hex notation, defaults to app `bgcolor`.\n- `return`: <[Promise]<[Window]>> Promise which resolves to the window instance.\n\nCreates a new app window.\n\n#### App.evaluate(pageFunction[, ...args])\n\nShortcut to the main window's [Window.evaluate(pageFunction[, ...args])](#windowevaluatepagefunction-args).\n\n#### App.exit()\n- `return`: <[Promise]>\n\nCloses the browser window.\n\n#### App.exposeFunction(name, carloFunction)\n- `name` <[string]> Name of the function on the window object.\n- `carloFunction` <[function]> Callback function which will be called in Carlo's context.\n- `return`: <[Promise]>\n\nThe method adds a function called `name` on the pages' `window` object.\nWhen called, the function executes `carloFunction` in Node.js and returns a [Promise] which resolves to the return value of `carloFunction`.\n\nIf the `carloFunction` returns a [Promise], it will be awaited.\n\n> **NOTE** Functions installed via `App.exposeFunction` survive navigations.\n\nAn example of adding an `md5` function into the page:\n\n`main.js`\n```js\nconst carlo = require('carlo');\nconst crypto = require('crypto');\n\ncarlo.launch().then(async app => {\n  app.on('exit', () => process.exit());\n  app.serveFolder(__dirname);\n  await app.exposeFunction('md5', text =>  // <-- expose function\n    crypto.createHash('md5').update(text).digest('hex')\n  );\n  await app.load('index.html');\n});\n```\n\n`index.html`\n```html\n<script>\nmd5('digest').then(result => document.body.textContent = result);\n</script>\n```\n\n#### App.load(uri[, ...params])\n\nShortcut to the main window's [Window.load(uri[, ...params])](#windowloaduri-params).\n\n#### App.mainWindow()\n- `return`: <[Window]> Returns main window.\n\nRunning app guarantees to have main window. If current main window closes, a next open window\nbecomes the main one.\n\n#### App.serveFolder(folder[, prefix])\n- `folder` <[string]> Folder with web content to make available to Chrome.\n- `prefix` <[string]> Prefix of the URL path to serve from the given folder.\n\nMakes the content of the given folder available to the Chrome web app.\n\nAn example of adding a local `www` folder along with the `node_modules`:\n\n`main.js`\n```js\nconst carlo = require('carlo');\n\ncarlo.launch().then(async app => {\n  app.on('exit', () => process.exit());\n  app.serveFolder(`${__dirname}/www`);\n  app.serveFolder(`${__dirname}/node_modules`, 'node_modules');\n  await app.load('index.html');\n});\n```\n***www***/`index.html`\n```html\n<style>body { white-space: pre; }</style>\n<script>\nfetch('node_modules/carlo/package.json')\n    .then(response => response.text())\n    .then(text => document.body.textContent = text);\n</script>\n```\n\n#### App.serveHandler(handler)\n- `handler` <[Function]> Network handler callback accepting the [HttpRequest](#class-httprequest) parameter.\n\nAn example serving primitive `index.html`:\n```js\nconst carlo = require('carlo');\n\ncarlo.launch().then(async app => {\n  app.on('exit', () => process.exit());\n  app.serveHandler(request => {\n    if (request.url().endsWith('/index.html'))\n      request.fulfill({body: Buffer.from('<html>Hello World</hmtl>')});\n    else\n      request.continue();  // <-- user needs to resolve each request, otherwise it'll time out.\n  });\n  await app.load('index.html');  // <-- loads index.html served above.\n});\n```\n\nHandler function is called with every network request in this app. It can abort, continue or fulfill each request. Only single app-wide handler can be registered.\n\n#### App.serveOrigin(base[, prefix])\n- `base` <[string]> Base to serve web content from.\n- `prefix` <[string]> Prefix of the URL path to serve from the given folder.\n\nFetches Carlo content from the specified origin instead of reading it from the file system, eg `http://localhost:8080`. This mode can be used for the fast development mode available in web frameworks.\n\nAn example of adding the local `http://localhost:8080` origin:\n\n```js\nconst carlo = require('carlo');\n\ncarlo.launch().then(async app => {\n  app.on('exit', () => process.exit());\n  app.serveOrigin('http://localhost:8080');  // <-- fetch from the local server\n  app.serveFolder(__dirname);  // <-- won't be used\n  await app.load('index.html');\n});\n```\n\n#### App.setIcon(image)\n- `image`: <[Buffer]|[string]> Either buffer containing PNG or a path to the PNG file on the file system.\n\nSpecifies image to be used as an app icon in the system dock.\n\n> This feature is only available in Chrome M72+. One can use `'canary'` channel to see it in action before M72 hits stable.\n\n#### App.windows()\n- `return`: <[Array]<[Window]>> Returns all currently opened windows.\n\nRunning app guarantees to have at least one open window.\n\n### class: HttpRequest\n\nHandlers registered via [App.serveHandler](#appservehandlerhandler) and [Window.serveHandler](#windowservehandlerhandler) receive parameter of this upon every network request.\n\n#### HttpRequest.abort()\n- `return`: <[Promise]>\n\nAborts request. If request is a navigation request, navigation is aborted as well.\n\n#### HttpRequest.continue()\n\nProceeds with the default behavior for this request. Either serves it from the filesystem or defers to the browser.\n\n#### HttpRequest.fail()\n- `return`: <[Promise]>\n\nMarks the request as failed. If request is a navigation request, navigation is still committed, but to a location that fails to be fetched.\n\n#### HttpRequest.fulfill(options)\n- `options`: <[Object]>\n  - `status` <[number]> HTTP status code (200, 304, etc), defaults to 200.\n  - `headers` <[Object]> HTTP response headers.\n  - `body` <[Buffer]> Response body.\n- `return`: <[Promise]>\n\nFulfills the network request with the given data. `'Content-Length'` header is generated in case it is not listed in the headers.\n\n#### HttpRequest.headers()\n- `return`: <[Object]> HTTP headers\n\nNetwork request headers.\n\n#### HttpRequest.method()\n- `return`: <[string]> HTTP method\n\nHTTP method of this network request (GET, POST, etc).\n\n#### HttpRequest.url()\n- `return`: <[string]> HTTP URL\n\nNetwork request URL.\n\n### class: Window\n\n#### event: 'close'\nEmitted when the window closes.\n\n#### Window.bounds()\n- `return`: <[Promise]<[Object]>>\n  - `top` <[number]> Top offset in pixels.\n  - `left` <[number]> Left offset in pixels.\n  - `width` <[number]> Width in pixels.\n  - `height` <[number]> Height in pixels.\n\nReturns window bounds.\n\n#### Window.bringToFront()\n- `return`: <[Promise]>\n\nBrings this window to front.\n\n#### Window.close()\n- `return`: <[Promise]>\n\nCloses this window.\n\n#### Window.evaluate(pageFunction[, ...args])\n- `pageFunction` <[function]|[string]> Function to be evaluated in the page context.\n- `...args` <...[Serializable]> Arguments to pass to `pageFunction`.\n- `return`: <[Promise]<[Serializable]>> Promise which resolves to the return value of `pageFunction`.\n\nIf the function passed to the `Window.evaluate` returns a [Promise], then `Window.evaluate` would wait for the promise to resolve and return its value.\n\nIf the function passed to the `Window.evaluate` returns a non-[Serializable] value, then `Window.evaluate` resolves to `undefined`.\n\n```js\nconst result = await window.evaluate(() => navigator.userAgent);\nconsole.log(result);  // prints \"<UA>\" in Node console\n```\n\nPassing arguments to `pageFunction`:\n```js\nconst result = await window.evaluate(x => {\n  return Promise.resolve(8 * x);\n}, 7);\nconsole.log(result);  // prints \"56\" in Node console\n```\n\nA string can also be passed in instead of a function:\n```js\nconsole.log(await window.evaluate('1 + 2'));  // prints \"3\"\nconst x = 10;\nconsole.log(await window.evaluate(`1 + ${x}`));  // prints \"11\"\n```\n\n#### Window.exposeFunction(name, carloFunction)\n- `name` <[string]> Name of the function on the window object.\n- `carloFunction` <[function]> Callback function which will be called in Carlo's context.\n- `return`: <[Promise]>\n\nSame as [App.exposeFunction](#appexposefunctionname-carlofunction), but only applies to\nthe current window.\n\n> **NOTE** Functions installed via `Window.exposeFunction` survive navigations.\n\n#### Window.fullscreen()\n- `return`: <[Promise]>\n\nTurns the window into the full screen mode. Behavior is platform-specific.\n\n#### Window.load(uri[, ...params])\n- `uri` <[string]> Path to the resource relative to the folder passed into [`serveFolder()`].\n- `params` <\\*> Optional parameters to pass to the web application. Parameters can be\nprimitive types, <[Array]>, <[Object]> or <[rpc]> `handles`.\n- `return`: <[Promise]> Resolves upon DOMContentLoaded event in the web page.\n\nNavigates the corresponding web page to the given `uri`, makes given `params` available in the web page via [carlo.loadParams()](#carloloadparams).\n\n`main.js`\n```js\nconst carlo = require('carlo');\nconst { rpc } = require('carlo/rpc');\n\ncarlo.launch().then(async app => {\n  app.serveFolder(__dirname);\n  app.on('exit', () => process.exit());\n  await app.load('index.html', rpc.handle(new Backend));\n});\n\nclass Backend {\n  hello(name) {\n    console.log(`Hello ${name}`);\n    return 'Backend is happy';\n  }\n\n  setFrontend(frontend) {\n    // Node world can now use frontend RPC handle.\n    this.frontend_ = frontend;\n  }\n}\n```\n\n`index.html`\n```html\n<script>\nclass Frontend {}\n\nasync function load(backend) {\n  // Web world can now use backend RPC handle.\n  console.log(await backend.hello('from frontend'));\n  await backend.setFrontend(rpc.handle(new Frontend));\n}\n</script>\n<body>Open console</body>\n```\n\n#### Window.maximize()\n- `return`: <[Promise]>\n\nMaximizes the window. Behavior is platform-specific.\n\n#### Window.minimize()\n- `return`: <[Promise]>\n\nMinimizes the window. Behavior is platform-specific.\n\n#### Window.pageForTest()\n- `return`: <[Page]> Puppeteer page object for testing.\n\n#### Window.paramsForReuse()\n- `return`: <\\*> parameters.\n\nReturns the `options.paramsForReuse` value passed into the [carlo.launch](#carlolaunchoptions).\n\nThese parameters are useful when Carlo app is started multiple times:\n- First time the Carlo app is started, it successfully calls `carlo.launch` and opens the main window.\n- Second time the Carlo app is started, `carlo.launch` fails with the 'browser is already running' exception.\n- Despite the fact that second call to `carlo.launch` failed, a new window is created in the first Carlo app. This window contains `paramsForReuse` value that was specified in the second (failed) `carlo.launch` call.\n\nThis way app can pass initialization parameters such as command line, etc. to the singleton Carlo that owns the browser.\n\n#### Window.serveFolder(folder[, prefix])\n- `folder` <[string]> Folder with web content to make available to Chrome.\n- `prefix` <[string]> Prefix of the URL path to serve from the given folder.\n\nSame as [App.serveFolder(folder[, prefix])](#appservefolderfolder-prefix), but\nonly applies to current window.\n\n#### Window.serveHandler(handler)\n- `handler` <[Function]> Network handler callback accepting the [HttpRequest](#class-httprequest) parameter.\n\nSame as [App.serveHandler(handler)](#appservehandlerhandler), but only applies to the current window requests.\nOnly single window-level handler can be installed in window.\n\n#### Window.serveOrigin(base[, prefix])\n- `base` <[string]> Base to serve web content from.\n- `prefix` <[string]> Prefix of the URL path to serve from the given folder.\n\nSame as [App.serveOrigin(base[, prefix])](#appserveoriginbase-prefix), but\nonly applies to current window.\n\n#### Window.setBounds(bounds)\n- `bounds` <[Object]> Window bounds:\n  - `top` <[number]> Top offset in pixels.\n  - `left` <[number]> Left offset in pixels.\n  - `width` <[number]> Width in pixels.\n  - `height` <[number]> Height in pixels.\n- `return`: <[Promise]>\n\nSets window bounds. Parameters `top`, `left`, `width` and `height` are all optional. Dimension or\nthe offset is only applied when specified.\n\n#### carlo.fileInfo(file)\n- `file` <[File]> to get additional information for.\n- `return`: <[Promise]<[Object]>>\n  - `path` absolute path to the given file.\n\n> Available in Chrome M73+.\n\nReturns additional information about the file, otherwise not available to the web.\n\n\n#### carlo.loadParams()\n- `return`: <[Promise]<[Array]>> parameters passed into [window.load()](#windowloaduri-params).\n\nThis method is available in the Web world and returns parameters passed into the [window.load()](#windowloaduri-params). This is how Carlo passes initial set of <[rpc]> handles to Node objects into the web world.\n\n[`serveFolder()`]: #windowservefolderfolder-prefix\n[App]: #class-app\n[Array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\"\n[Browser]: https://pptr.dev/#?show=api-class-browser \"Browser\"\n[Buffer]: https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\"\n[File]: https://developer.mozilla.org/en-US/docs/Web/API/File \"File\"\n[Object]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\"\n[Page]: https://pptr.dev/#?show=api-class-page \"Page\"\n[Promise]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"\n[Serializable]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\"\n[Window]: #class-window\n[boolean]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\"\n[function]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\"\n[number]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\"\n[origin]: https://developer.mozilla.org/en-US/docs/Glossary/Origin \"Origin\"\n[rpc]: https://github.com/GoogleChromeLabs/carlo/blob/master/rpc/rpc.md \"rpc\"\n[string]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"String\"\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0751953125,
          "content": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows [Google's Open Source Community\nGuidelines](https://opensource.google.com/conduct/).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.9365234375,
          "content": "# Carlo - headful Node app framework\n\n### ❗Carlo is [no longer maintained](https://github.com/GoogleChromeLabs/carlo/issues/163#issuecomment-592238093). \n\n-----------------------\n\n\n> Carlo provides Node applications with [Google Chrome](https://www.google.com/chrome/) rendering capabilities, communicates with the locally-installed browser instance using the [Puppeteer](https://github.com/GoogleChrome/puppeteer/) project, and implements a remote call infrastructure for communication between Node and the browser.\n\n###### [API](https://github.com/GoogleChromeLabs/carlo/blob/master/API.md) | [FAQ](#faq) | [Contributing](https://github.com/GoogleChromeLabs/carlo/blob/master/CONTRIBUTING.md)\n\n![image](https://user-images.githubusercontent.com/883973/47826256-0531fc80-dd34-11e8-9c8d-c1b93a6ba631.png)\n\n<!-- [START usecases] -->\n###### What can I do?\n\nWith Carlo, users can create hybrid applications that use Web stack for rendering and Node for capabilities:\n- For Node applications, the web rendering stack lets users visualize the dynamic state of the app. \n- For Web applications, additional system capabilities are accessible from Node.\n- The application can be bundled into a single executable using [pkg](https://github.com/zeit/pkg).\n\n###### How does it work?\n\n- Carlo locates Google Chrome installed locally.\n- Launches Chrome and establishes a connection over the process pipe.\n- Exposes a high-level API for rendering in Chrome with the Node environment.\n\n<!-- [END usecases] -->\n\n<!-- [START getstarted] -->\n\n## Usage\n\nInstall Carlo\n\n#### npm\n```bash\nnpm i carlo\n# yarn add carlo\n```\n\n> Carlo requires at least Node v7.6.0.\n\n**Example** - Display local environment\n\nSave file as **example.js**\n\n```js\nconst carlo = require('carlo');\n\n(async () => {\n  // Launch the browser.\n  const app = await carlo.launch();\n\n  // Terminate Node.js process on app window closing.\n  app.on('exit', () => process.exit());\n\n  // Tell carlo where your web files are located.\n  app.serveFolder(__dirname);\n\n  // Expose 'env' function in the web environment.\n  await app.exposeFunction('env', _ => process.env);\n\n  // Navigate to the main page of your app.\n  await app.load('example.html');\n})();\n```\n\nSave file as **example.html**\n\n```html\n<script>\nasync function run() {\n  // Call the function that was exposed in Node.\n  const data = await env();\n  for (const type in data) {\n    const div = document.createElement('div');\n    div.textContent = `${type}: ${data[type]}`;\n    document.body.appendChild(div);\n  }\n}\n</script>\n<body onload=\"run()\">\n```\n\nRun your application:\n\n```bash\nnode example.js\n```\n\nCheck out [systeminfo](https://github.com/GoogleChromeLabs/carlo/tree/master/examples/systeminfo) and [terminal](https://github.com/GoogleChromeLabs/carlo/tree/master/examples/terminal) examples with richer UI and RPC-based communication between the Web and Node in the [examples](https://github.com/GoogleChromeLabs/carlo/tree/master/examples) folder.\n\n<!-- [END getstarted] -->\n\n## API\n\nCheck out the [API](https://github.com/GoogleChromeLabs/carlo/blob/master/API.md) to get familiar with Carlo.\n\n\n## Testing\n\nCarlo uses [Puppeteer](https://pptr.dev/) project for testing. Carlo application and all Carlo windows have\ncorresponding Puppeteer objects exposed for testing. Please refer to the [API](https://github.com/GoogleChromeLabs/carlo/blob/master/API.md) and the [systeminfo](https://github.com/GoogleChromeLabs/carlo/tree/master/examples/systeminfo) project for more details.\n\n## Contributing to Carlo\n\nLook at the [contributing guide](https://github.com/GoogleChromeLabs/carlo/blob/master/CONTRIBUTING.md) to get an overview of Carlo's development.\n\n<!-- [START faq] -->\n\n## FAQ\n\n#### Q: What was the motivation behind this project when we already have Electron and NW.js? How does this project differ from these platforms, how does it achieve something that is not possible/harder with Electron or NW.js?\n\n- One of the motivations of this project is to demonstrate how browsers that are installed locally can be used with Node out of the box.\n- Node v8 and Chrome v8 engines are decoupled in Carlo, providing a maintainable model with the ability to independently update underlying components. Carlo gives the user control over bundling and is more about productivity than branding.\n\n#### Q: Can a Node app using Carlo be packaged as a Desktop app?\n\nThe [pkg](https://github.com/zeit/pkg) project can be used to package a Node app as a Desktop app. Carlo does not provide branding configurability such as application icons or customizable menus, instead, Carlo focuses on productivity and Web/Node interoperability. Check out the [systeminfo](https://github.com/GoogleChromeLabs/carlo/tree/master/examples/systeminfo) example and call `pkg package.json` to see how it works.\n\n#### Q: What happens if the user does not have Chrome installed?\n\nCarlo prints an error message when Chrome can not be located.\n\n#### Q: What is the minimum Chrome version that Carlo supports?\n\nChrome Stable channel, versions 70.* are supported.\n\n\n<!-- [END faq] -->\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.658203125,
          "content": "/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\nmodule.exports = require('./lib/carlo');\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.755859375,
          "content": "{\n  \"name\": \"carlo\",\n  \"version\": \"0.9.46\",\n  \"description\": \"Carlo is a framework for rendering Node data structures using Chrome browser.\",\n  \"repository\": \"github:GoogleChromeLabs/carlo\",\n  \"engines\": {\n    \"node\": \">=7.6.0\"\n  },\n  \"main\": \"index.js\",\n  \"directories\": {\n    \"lib\": \"lib\"\n  },\n  \"scripts\": {\n    \"lint\": \"([ \\\"$CI\\\" = true ] && eslint --quiet -f codeframe . || eslint .)\",\n    \"test\": \"node rpc/test.js && node test/test.js\",\n    \"headful-test\": \"node test/headful.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"The Chromium Authors\",\n  \"license\": \"Apache-2.0\",\n  \"dependencies\": {\n    \"debug\": \"^4.1.0\",\n    \"puppeteer-core\": \"~1.12.0\"\n  },\n  \"devDependencies\": {\n    \"eslint\": \"^5.8.0\",\n    \"@pptr/testrunner\": \"^0.5.0\",\n    \"@pptr/testserver\": \"^0.5.0\"\n  }\n}\n"
        },
        {
          "name": "rpc",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}