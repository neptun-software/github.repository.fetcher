{
  "metadata": {
    "timestamp": 1736562606642,
    "page": 89,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gotwarlost/istanbul",
      "stars": 8699,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.193359375,
          "content": "lib-cov\n.DS_Store\n*.seed\n*.log\n*.csv\n*.dat\n*.out\n*.pid\n*.gz\n\npids\nlogs\nresults\n\nnode_modules/\nbower_components/\n.idea/\nhtml-report/\nbuild/\npublic/\ntest/other/output/\ntest/cli/output/\n\nnpm-debug.log\n"
        },
        {
          "name": ".jshintignore",
          "type": "blob",
          "size": 0.0986328125,
          "content": "lib/assets/vendor\ntest/cli/sample-project\ntest/cli/sample-project-link\ntest/browser/support/vendor\n\n\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 0.994140625,
          "content": "{\n    \"bitwise\": true,\n    \"camelcase\": false,\n    \"curly\": true,\n    \"eqeqeq\": true,\n    \"forin\": true,\n    \"freeze\": true,\n    \"immed\": true,\n    \"latedef\": true,\n    \"maxlen\": 150,\n    \"newcap\": true,\n    \"noarg\": true,\n    \"nonbsp\": true,\n    \"nonew\": true,\n    \"plusplus\": true,\n    \"trailing\": true,\n    \"undef\": true,\n    \"unused\": true,\n\n    \"strict\": false,\n\n    \"asi\": false,\n    \"boss\": false,\n    \"debug\": false,\n    \"eqnull\": false,\n    \"esnext\": false,\n    \"evil\": false,\n    \"expr\": false,\n    \"funcscope\": false,\n    \"globalstrict\": false,\n    \"iterator\": false,\n    \"lastsemic\": false,\n    \"laxbreak\": true,\n    \"laxcomma\": false,\n    \"loopfunc\": false,\n    \"multistr\": false,\n    \"notypeof\": false,\n    \"proto\": false,\n    \"scripturl\": false,\n    \"smarttabs\": false,\n    \"shadow\": false,\n    \"sub\": false,\n    \"supernew\": false,\n    \"validthis\": false,\n    \"noyield\": false,\n\n    \"browser\": true,\n    \"node\": true,\n\n    \"nomen\": false,\n    \"onevar\": true,\n    \"passfail\": false,\n    \"white\": false\n}\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.263671875,
          "content": "language: node_js\n\nnode_js:\n  - \"0.10\"\n  - \"0.12\"\n\nsudo: false\n\nbranches:\n  except:\n    - gh-pages\n\nscript:\n  - npm test --cover\n\nafter_script:\n  - if [[ `node --version` == *v0.12* ]]; then cat ./build/coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js; fi\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 14.34375,
          "content": "Changelog\n---------\n\n<table>\n<tr>\n<td>0.4.5</td>\n<td>\n    <ul>\n        <li>log filename when file fails to parse using esprima, thanks to @djorg83</li>\n        <li>swap fileset for glob (security fix), thanks to @popomore and @graingert</li>\n    </ul>\n</td>\n</tr>\n<tr>\n<td>0.4.4</td>\n<td>\n    <ul>\n        <li>Handle ExportNamedDeclaration, thanks to @VictoryStick</li>\n        <li>Use tmpdir setting in temp store, thanks to @inversion</li>\n        <li>Set \"medium\" coverage CSS color scheme to yellow, thanks to @JamesMGreene</li>\n        <li>use os.tmpdir() instead of os.tmpDir(), thanks to @ChALkeR</li>\n    </ul>\n</td>\n</tr>\n<tr>\n<td>0.4.3</td>\n<td>\n    <ul>\n        <li>Create new handlebars instance for the HTML report, thanks to @doowb</li>\n        <li>MetaProperty support thanks to @steve-gray</li>\n        <li>Use ansi colors from 16-color palette for better console support, thanks to @jtangelder</li>\n        <li>Misc doc/ css fixes thanks to @pra85, @abejfehr</li>\n    </ul>\n</td>\n</tr>\n<tr>\n<td>0.4.2</td>\n<td>Fix confusing error message on check-coverage failures, thanks to @isaacs/td>\n</tr>\n<tr>\n<td>v0.4.1</td>\n<td>\n    <ul>\n        <li>Update esprima to 2.7.x, thanks to @ariya</li>\n        <li>Make table header clickable in HTML report, thanks to @iphands</li>\n        <li>Fix strict mode issues thanks to @kpdecker</li>\n        <li>update ignore code example for UMD, thanks to @pgurnee</li>\n        <li>misc build fixes, no user visible changes, thanks to @ariya</li>\n    </ul>\n</td>\n</tr>\n<tr>\n<td>v0.4.0</td>\n<td>\n    <ul>\n        <li>HTML report design, thanks a bunch to @tmcw</li>\n        <li>\"loading config file\" message on the console is now tied to the verbose state, thanks @asa-git</li>\n        <li>Add the `l` property to documentation, thanks @kitsonk</li>\n\n    </ul>\n</td>\n</tr>\n<tr>\n<td>v0.3.21</td>\n<td>\n    <ul>\n        <li>Updated dependencies to the latest</li>\n    </ul>\n</td>\n</tr>\n<tr>\n<td>v0.3.20</td>\n<td>\n    <ul>\n        <li>Fix broken es6 `super` support, thanks @sterlinghw</li>\n        <li>Improve readability via better lineHeight, thanks @dhoko</li>\n        <li>Adding ability to set custom block name in teamcity report, thanks @aryelu</li>\n        <li>Replaced deprecated util.puts with console.log, thanks @arty-name\n    </ul>\n</td>\n</tr>\n<tr>\n<td>v0.3.19</td>\n<td>Fix instrumenter for multiple blank array positions, thanks @alexdunphy</td>\n</tr>\n<tr>\n<tr>\n<td>v0.3.18</td>\n<td>Upgrade esprima, get support for more ES6 features</td>\n</tr>\n<tr>\n<td>v0.3.17</td>\n<td>Upgrade esprima, get correct for-of support</td>\n</tr>\n<tr>\n<td>v0.3.16</td>\n<td>\n    <ul>\n        <li>upgrades to filset and async modules, thanks to @roderickhsiao, @popomore</li>\n        <li>updated text reporter so that it displays a list of the lines missing coverage, thanks @bcoe</li>\n    </ul>\n</td>\n</tr>\n<tr>\n<td>v0.3.15</td>\n<td>\n    <ul>\n        <li>Fix #375: add nodir option to exclude directory for *.js matcher thanks to @yurenju</li>\n        <li>Fix #362: When setting up the `reportDir` add it to `reporter.dir`</li>\n        <li>Fixes #238 (added a poorman's clone)</li>\n        <li>Incrementing hits on ignored statements implemented</li>\n        <li>`a:visited color: #777` (a nice gray color)</li>\n    </ul>\n</td>\n</tr>\n<tr>\n<td>v0.3.14</td>\n<td>\n    Add text-lcov report format to emit lcov to console, thanks to @bcoe\n</td>\n</tr>\n<tr>\n<td>v0.3.13</td>\n<td>\n    Fix #339\n</td>\n</tr>\n<tr>\n<td>v0.3.12</td>\n<td>\n    Allow other-than-dot-js files to be hooked, thanks to @sethpollack\n</td>\n</tr>\n<tr>\n<td>v0.3.11</td>\n<td>\n    Avoid modification of global objects, thanks to @dominykas\n</td>\n</tr>\n<tr>\n<td>v0.3.10</td>\n<td>\n    Update escodegen to 1.6.x and add browser download script\n</td>\n</tr>\n<tr>\n<td>v0.3.9</td>\n<td>\n    <ul>\n        <li>Merge harmony branch and start adding ES6 features to istanbul</li>\n        <li>Arrow functions are the only feature of interest now</li>\n        <li>`for-of` and `yield` support exist but not present in mainline esprima yet</li>\n    </ul>\n</td>\n</tr>\n<tr>\n<td>v0.3.8</td>\n<td>\n    <ul>\n        <li>Fail check coverage command when no coverage files found, thanks to @nexus-uw</li>\n        <li>handle relative paths in check-coverage, thanks to @dragn</li>\n        <li>support explicit includes for cover, thanks to @tonylukasavage</li>\n    </ul>\n</td>\n</tr>\n<tr>\n<td>v0.3.7</td>\n<td>\n    Fix asset paths on windows, thanks to @juangabreil\n</td>\n</tr>\n<tr>\n<td>v0.3.6</td>\n<td>\n    <ul>\n        <li>Update to Esprima 2.0</li>\n        <li>Remove YUI dependency and provide custom sort code. No network access needed for HTML report view</li>\n        <li>use supports-color module to colorize output, thanks to @gustavnikolaj</li>\n        <li>Fix tests to work on Windows, thanks to @dougwilson</li>\n        <li>Docs: \"Instrument code\" API example correction thanks to @robatron</li>\n        <li>Extracted embedded CSS and JavaScript and made them external files, thanks to @booleangate</td>\n    </ul>\n</td>\n</tr>\n<tr>\n<td>v0.3.5</td>\n<td>\n<p>Merge #275 - `--include-all-sources` option. Thanks @gustavnikolaj</p>\n<p>\nThe `--preload-sources` option is now deprecated and superseded by the\n`--include-all-sources` option instead. This provides a better coverage representation\nof the code that has not been included for testing.\n</p>\n</td>\n</tr>\n<tr>\n<td>v0.3.4</td>\n<td>Merge #219 - Support reporting within symlink/junction. Thanks to @dougwilson</td>\n</tr>\n<tr>\n<td>v0.3.3</td>\n<td>Merge #268 - per file coverage enforcement. Thanks to @ryan-roemer</td>\n</tr>\n<tr>\n<td>v0.3.2</td>\n<td>Republish 0.3.1 because of bad shasum</td>\n</tr>\n<tr>\n<td>v0.3.1</td>\n<td>Fixes #249</td>\n</tr>\n<tr>\n<td>v0.3.0</td>\n<td>\n    The *reports* release. **Potentially backwards-incompatible** if you are using\n    undocumented features or custom report implementations.\n    <ul>\n        <li>Change report command line to support multiple reports, add back-compat processing with warnings</li>\n        <li>Enable `report` command to read report list from config, thanks to @piuccio</li>\n        <li>Support multiple reports for `cover` and `report` commands</li>\n        <li>Support per-report config options in configuration file</li>\n        <li>Turn reports into event emitters so they can signal `done`</li>\n        <li>Add `Reporter` class to be able to generate multiple reports</li>\n        <li>Add a bunch of API docs, refactor README</li>\n    </ul>\n</td>\n</tr>\n<tr>\n<td>v0.2.16</td><td>Make YUI links https-always since relative links break local\nfilesystem use-case\n</td>\n</tr>\n<tr>\n<td>v0.2.15</td><td>make link protocols relative so they don't break on https connections\n(thanks to @yasyf)\n</td>\n</tr>\n<tr>\n<td>v0.2.14</td><td>Fix hook to deal with non-string/ missing filenames\n(thanks to @jason0x43), update dependencies\n</td>\n</tr>\n<tr>\n<td>v0.2.13</td><td>Add `--preload-sources` option to `cover` command to make\ncode not required by tests to appear in the coverage report.\n</td>\n</tr>\n<tr>\n<td>v0.2.12</td><td>Text summary as valid markdown, thanks to @smikes</td>\n</tr>\n<tr>\n<td>v0.2.11</td><td>Allow source map generation, thanks to @jason0x43</td>\n</tr>\n<tr>\n<td>v0.2.10</td><td>Add flag to handle sigints and dump coverage, thanks to @samccone</td>\n</tr>\n<tr>\n<td>v0.2.9</td><td>Fix #202</td>\n</tr>\n<tr>\n<tr>\n<td>v0.2.8</td><td>Upgrade esprima</td>\n</tr>\n<tr>\n<td>v0.2.7</td><td><ul>\n    <li>Upgrade esprima</li>\n    <li>Misc jshint fixes</li>\n</ul></td>\n</tr>\n<tr>\n<td>v0.2.6</td><td><ul>\n    <li>Revert bad commit for tree summarizer</li>\n</ul></td>\n</tr>\n<tr>\n<td>v0.2.5</td><td><ul>\n    <li>Add clover report, thanks to @bixdeng, @mpderbec</li>\n    <li>Fix cobertura report bug for relative paths, thanks to @jxiaodev</li>\n    <li>Run self-coverage on tests always</li>\n    <li>Fix tree summarizer when relative paths are involved, thanks to @Swatinem</li>\n</ul></td>\n</tr>\n<tr>\n<td>v0.2.4</td><td><ul>\n    <li>Fix line-split algo to handle Mac lin separators, thanks to @asifrc</li>\n    <li>Update README for quick intro to ignoring code for coverage, thanks to @gergelyke</li>\n</ul></td>\n</tr>\n<tr>\n<td>v0.2.3</td><td><ul>\n    <li>Add YAML config file. `istanbul help config` has more details</li>\n    <li>Support custom reporting thresholds using the `watermarks` section of the config file</li>\n</ul></td>\n</tr>\n<tr><td>v0.2.2</td><td>update escodegen, handlebars and resolve dependency versions</td></tr>\n<tr>\n<td>v0.2.1</td><td><ul>\n    <li>Add ability to skip branches and other hard-to-test code using comments.\n        See <a href=\"https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md\">the doc</a> for more details</li>\n    <li>Turn `util.error` into `console.error` for node 0.11 compatibility, thanks to @pornel</li>\n</ul></td>\n</tr>\n<tr><td>v0.2.0</td><td><ul>\n    <li>Add --preserve-comments to instrumenter options, thanks to @arikon</li>\n    <li>Support 'use strict;' in file scope, thanks to @pornel</li>\n</ul>\n    Up minor version due to the new way in which the global object is accessed.\n    This _should_ be backwards-compatible but has not been tested in the wild.\n</td></tr>\n<tr><td>v0.1.46</td><td>Fix #114</td></tr>\n<tr><td>v0.1.45</td><td>Add teamcity reporter, thanks to @chrisgladd</td></tr>\n<tr><td>v0.1.44</td><td>Fix inconsistency in processing empty switch with latest esprima, up deps</td></tr>\n<tr><td>v0.1.43</td><td>Add colors to text report thanks to @runk</td></tr>\n<tr><td>v0.1.42</td><td>fix #78: embed source regression introduced in v0.1.38. Fix broken test for this</td></tr>\n<tr><td>v0.1.41</td><td>add json report to dump coverage object for certain use cases</td></tr>\n<tr><td>v0.1.40</td><td>forward sourceStore from lcov to html report, pull request by @vojtajina</td></tr>\n<tr><td>v0.1.39</td><td>add <source> tag to cobertura report, pull request by @jhansche</td></tr>\n<tr><td>v0.1.38</td><td><ul>\n        <li>factor out AST instrumentation into own instrumentASTSync method</li>\n        <li>always set function declaration coverage stats to 1 since every such declaration is \"executed\" exactly one time by the compiler</li>\n    </ul></td></tr>\n<tr><td>v0.1.37</td><td>--complete-copy flag contrib from @kami, correct strict mode semantics for instrumented functions</td></tr>\n<tr><td>v0.1.36</td><td>real quiet when --print=none specified, add repo URL to package.json, add contributors</td></tr>\n<tr><td>v0.1.35</td><td>accept cobertura contrib from @nbrownus, fix #52</td></tr>\n<tr><td>v0.1.34</td><td>fix async reporting, update dependencies, accept html cleanup contrib from @mathiasbynens</td></tr>\n<tr><td>v0.1.33</td><td>initialize global coverage object before running tests to workaround mocha leak detection</td></tr>\n<tr><td>v0.1.32</td><td>Fix for null nodes in array expressions, add @unindented as contributor</td></tr>\n<tr><td>v0.1.31</td><td>Misc internal fixes and test changes</td></tr>\n<tr><td>v0.1.30</td><td>Write standard blurbs (\"writing coverage object...\" etc.) to stderr rather than stdout</td></tr>\n<tr><td>v0.1.29</td><td>Allow --post-require-hook to be a module that can be `require`-d</td></tr>\n<tr><td>v0.1.28</td><td>Add --post-require-hook switch to support use-cases similar to the YUI loader</td></tr>\n<tr><td>v0.1.27</td><td>Add --hook-run-in-context switch to support RequireJS modules. Thanks to @millermedeiros for the pull request</td></tr>\n<tr><td>v0.1.26</td><td>Add support for minimum uncovered unit for check-coverage. Fixes #25</td></tr>\n<tr><td>v0.1.25</td><td>Allow for relative paths in the YUI loader hook</td></tr>\n<tr><td>v0.1.24</td><td>Add lcov summaries. Fixes issue #20</td></tr>\n<tr><td>v0.1.23</td><td>Add ability to save a baseline coverage file for the instrument command. Fixes issue #19</td></tr>\n<tr><td>v0.1.22</td><td>Add signature attribute to cobertura method tags to fix NPE by the Hudson publisher</td></tr>\n<tr><td>v0.1.21</td><td>Add cobertura XML report format; exprimental for now</td></tr>\n<tr><td>v0.1.20</td><td>Fix HTML/ lcov report interface to be more customizable for middleware needs</td></tr>\n<tr><td>v0.1.19</td><td>make all hooking non-destructive in that already loaded modules are never reloaded. Add self-test mode so that already loaded istanbul modules can be unloaded prior to hooking.</td></tr>\n<tr><td>v0.1.18</td><td>Add option to hook in non-destructive mode; i.e. the require cache is not unloaded when hooking</td></tr>\n<tr><td>v0.1.17</td><td>Export some more objects; undocumented for now</td></tr>\n<tr><td>v0.1.16</td><td>Fix npm keywords for istanbul which expects an array of strings but was being fed a single string with keywords instead</td></tr>\n<tr><td>v0.1.15</td><td>Add the 'check-coverage' command so that Istanbul can be used as a posttest script to enforce minimum coverage</td></tr>\n<tr><td>v0.1.14</td><td>Expose the experimental YUI load hook in the interface</td></tr>\n<tr><td>v0.1.13</td><td>Internal jshint cleanup, no features or fixes</td></tr>\n<tr><td>v0.1.12</td><td>Give npm the README that was getting inadvertently excluded</td></tr>\n<tr><td>v0.1.11</td><td>Merge pull request #14 for HTML tweaks. Thanks @davglass. Add @davglass and @nowamasa as contributors in `package.json`</td></tr>\n<tr><td>v0.1.10</td><td>Fix to issue #12. Do not install `uncaughtException` handler and pass input error back to CLI using a callback as opposed to throwing.</td></tr>\n<tr><td>v0.1.9</td><td>Attempt to create reporting directory again just before writing coverage in addition to initial creation</td></tr>\n<tr><td>v0.1.8</td><td>Fix issue #11.</td></tr>\n<tr><td>v0.1.7</td><td>Add text summary and detailed reporting available as --print [summary|detail|both|none]. summary is the default if nothing specified.</td></tr>\n<tr><td>v0.1.6</td><td>Handle backslashes in the file path correctly in emitted code. Fixes #9. Thanks to @nowamasa for bug report and fix</td></tr>\n<tr><td>v0.1.5</td><td>make object-utils.js work on a browser as-is</td></tr>\n<tr><td>v0.1.4</td><td>partial fix for issue #4; add titles to missing coverage spans, remove negative margin for missing if/else indicators</td></tr>\n<tr><td>v0.1.3</td><td>Set the environment variable running_under_istanbul to 1 when that is the case. This allows test runners that use istanbul as a library to back off on using it when set.</td></tr>\n<tr><td>v0.1.2</td><td>HTML reporting cosmetics. Reports now show syntax-colored JS using `prettify`. Summary tables no longer wrap in awkward places.</td></tr>\n<tr><td>v0.1.1</td><td>Fixes issue #1. HTML reports use sources embedded inside the file coverage objects if found rather than reading from the filesystem</td></tr>\n<tr><td>v0.1.0</td><td>Initial version</td></tr>\n</td></tr>\n</table>\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4482421875,
          "content": "Copyright 2012 Yahoo! Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the Yahoo! Inc. nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL YAHOO! INC. BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.8232421875,
          "content": "## Istanbul - a JS code coverage tool written in JS\n\n**Archive notice: This repo has been inactive for 7 years and is now archived. \nPlease use [the supported version](https://github.com/istanbuljs) instead.**\n\n\n[![Build Status](https://secure.travis-ci.org/gotwarlost/istanbul.svg?branch=master)](http://travis-ci.org/gotwarlost/istanbul)\n[![Dependency Status](https://gemnasium.com/gotwarlost/istanbul.svg)](https://gemnasium.com/gotwarlost/istanbul)\n[![Coverage Status](https://img.shields.io/coveralls/gotwarlost/istanbul.svg)](https://coveralls.io/r/gotwarlost/istanbul?branch=master)\n[![bitHound Score](https://www.bithound.io/github/gotwarlost/istanbul/badges/score.svg)](https://www.bithound.io/github/gotwarlost/istanbul)\n\n[![NPM](https://nodei.co/npm/istanbul.png?downloads=true)](https://nodei.co/npm/istanbul/)\n\n> *Deprecation Notice:* this version of _istanbul_ is deprecated, we will not be\n  landing pull requests or releasing new versions. But don't worry, the [Istanbul 2.0\n  API is now available](https://istanbul.js.org/) and is being actively developed\n  in the new [istanbuljs organization](https://github.com/istanbuljs).\n\n**New** `v0.4.0` now has beautiful HTML reports. Props to Tom MacWright @tmcw for a fantastic job!\n\n* [Features and use cases](#features)\n* [Getting started and configuration](#getting-started)\n* [Usage on Windows](#usage-on-windows)\n* [The command line](#the-command-line)\n* [Ignoring code for coverage](#ignoring-code-for-coverage)\n* [API](#api)\n* [Changelog](https://github.com/gotwarlost/istanbul/blob/master/CHANGELOG.md)\n* [License and credits](#license)\n\n### Features\n\n* All-javascript instrumentation library that tracks **statement, branch,\nand function coverage**.\n* **Module loader hooks** to instrument code on the fly\n* **Command line tools** to run node unit tests \"with coverage turned on\" and no cooperation\nwhatsoever from the test runner\n* Multiple report formats: **HTML**, **LCOV**, **Cobertura** and more.\n* Ability to use as [middleware](https://github.com/gotwarlost/istanbul-middleware) when serving JS files that need to be tested on the browser.\n* Can be used on the **command line** as well as a **library**\n* Based on the awesome `esprima` parser and the equally awesome `escodegen` code generator\n* Well-tested on node (prev, current and next versions) and the browser (instrumentation library only)\n\n### Use cases\n\nSupports the following use cases and more\n\n* transparent coverage of nodejs unit tests\n* instrumentation/ reporting of files in batch mode for browser tests\n* Server side code coverage for nodejs by embedding it as [custom middleware](https://github.com/gotwarlost/istanbul-middleware)\n\n### Getting started\n\n    $ npm install -g istanbul\n\nThe best way to see it in action is to run node unit tests. Say you have a test\nscript `test.js` that runs all tests for your node project without coverage.\n\nSimply:\n\n    $ cd /path/to/your/source/root\n    $ istanbul cover test.js\n\nand this should produce a `coverage.json`, `lcov.info` and `lcov-report/*html` under `./coverage`\n\nSample of code coverage reports produced by this tool (for this tool!):\n\n[HTML reports](http://gotwarlost.github.com/istanbul/public/coverage/lcov-report/index.html)\n\n### Usage on Windows\n\nIstanbul assumes that the `command` passed to it is a JS file (e.g. Jasmine, vows etc.),\nthis is however not true on Windows where npm wrap bin files in a `.cmd` file.\nSince Istanbul can not parse `.cmd` files you need to reference the bin file manually.\n\nHere is an example using Jasmine 2:\n\n    istanbul cover node_modules\\jasmine\\bin\\jasmine.js\n\nIn order to use this cross platform (e.i. Linux, Mac and Windows), you can insert\nthe above line into the script object in your package.json file but with normal\nslash.\n\n    \"scripts\": {\n        \"test\": \"istanbul cover node_modules/jasmine/bin/jasmine.js\"\n    }\n\n### Configuring\n\nDrop a `.istanbul.yml` file at the top of the source tree to configure istanbul.\n`istanbul help config` tells you more about the config file format.\n\n### The command line\n\n    $ istanbul help\n\ngives you detailed help on all commands.\n\n```\nUsage: istanbul help config | <command>\n\n`config` provides help with istanbul configuration\n\nAvailable commands are:\n\n      check-coverage\n              checks overall/per-file coverage against thresholds from coverage\n              JSON files. Exits 1 if thresholds are not met, 0 otherwise\n\n\n      cover   transparently adds coverage information to a node command. Saves\n              coverage.json and reports at the end of execution\n\n\n      help    shows help\n\n\n      instrument\n              instruments a file or a directory tree and writes the\n              instrumented code to the desired output location\n\n\n      report  writes reports for coverage JSON objects produced in a previous\n              run\n\n\n      test    cover a node command only when npm_config_coverage is set. Use in\n              an `npm test` script for conditional coverage\n\n\nCommand names can be abbreviated as long as the abbreviation is unambiguous\n```\n\nTo get detailed help for a command and what command-line options it supports, run:\n\n    istanbul help <command>\n\n(Most of the command line options are not covered in this document.)\n\n#### The `cover` command\n\n    $ istanbul cover my-test-script.js -- my test args\n    # note the -- between the command name and the arguments to be passed\n\nThe `cover` command can be used to get a coverage object and reports for any arbitrary\nnode script. By default, coverage information is written under `./coverage` - this\ncan be changed using command-line options.\n\nThe `cover` command can also be passed an optional `--handle-sigint` flag to\nenable writing reports when a user triggers a manual SIGINT of the process that is\nbeing covered. This can be useful when you are generating coverage for a long lived process.\n\n#### The `test` command\n\nThe `test` command has almost the same behavior as the `cover` command, except that\nit skips coverage unless the `npm_config_coverage` environment variable is set.\n\n**This command is deprecated** since the latest versions of npm do not seem to\nset the `npm_config_coverage` variable.\n\n#### The `instrument` command\n\nInstruments a single JS file or an entire directory tree and produces an output\ndirectory tree with instrumented code. This should not be required for running node\nunit tests but is useful for tests to be run on the browser.\n\n#### The `report` command\n\nWrites reports using `coverage*.json` files as the source of coverage information.\nReports are available in multiple formats and can be individually configured\nusing the istanbul config file. See `istanbul help report` for more details.\n\n#### The `check-coverage` command\n\nChecks the coverage of statements, functions, branches, and lines against the\nprovided thresholds. Positive thresholds are taken to be the minimum percentage\nrequired and negative numbers are taken to be the number of uncovered entities\nallowed.\n\n### Ignoring code for coverage\n\n* Skip an `if` or `else` path with `/* istanbul ignore if */` or `/* istanbul ignore else */` respectively.\n* For all other cases, skip the next 'thing' in the source with: `/* istanbul ignore next */`\n\nSee [ignoring-code-for-coverage.md](ignoring-code-for-coverage.md) for the spec.\n\n\n### API\n\nAll the features of istanbul can be accessed as a library.\n\n#### Instrument code\n\n```javascript\n    var istanbul = require('istanbul');\n    var instrumenter = new istanbul.Instrumenter();\n\n    var generatedCode = instrumenter.instrumentSync('function meaningOfLife() { return 42; }',\n        'filename.js');\n```\n\n#### Generate reports given a bunch of coverage JSON objects\n\n```javascript\n    var istanbul = require('istanbul'),\n        collector = new istanbul.Collector(),\n        reporter = new istanbul.Reporter(),\n        sync = false;\n\n    collector.add(obj1);\n    collector.add(obj2); //etc.\n\n    reporter.add('text');\n    reporter.addAll([ 'lcov', 'clover' ]);\n    reporter.write(collector, sync, function () {\n        console.log('All reports generated');\n    });\n```\n\nFor the gory details consult the [public API](http://gotwarlost.github.com/istanbul/public/apidocs/index.html)\n\n\n### Multiple Process Usage\n\nIstanbul can be used in a multiple process environment by running each process\nwith Istanbul, writing a unique coverage file for each process, and combining\nthe results when generating reports. The method used to perform this will\ndepend on the process forking API used. For example when using the\n[cluster module](http://nodejs.org/api/cluster.html) you must setup the master\nto start child processes with Istanbul coverage, disable reporting, and output\ncoverage files that include the PID in the filename.  Before each run you may\nneed to clear out the coverage data directory.\n\n```javascript\n    if(cluster.isMaster) {\n        // setup cluster if running with istanbul coverage\n        if(process.env.running_under_istanbul) {\n            // use coverage for forked process\n            // disabled reporting and output for child process\n            // enable pid in child process coverage filename\n            cluster.setupMaster({\n                exec: './node_modules/.bin/istanbul',\n                args: [\n                    'cover', '--report', 'none', '--print', 'none', '--include-pid',\n                    process.argv[1], '--'].concat(process.argv.slice(2))\n            });\n        }\n        // ...\n        // ... cluster.fork();\n        // ...\n    } else {\n        // ... worker code\n    }\n```\n\n### Coverage.json\n\nFor details on the format of the coverage.json object, [see here](./coverage.json.md).\n\n### License\n\nistanbul is licensed under the [BSD License](http://github.com/gotwarlost/istanbul/raw/master/LICENSE).\n\n### Third-party libraries\n\nThe following third-party libraries are used by this module:\n\n* abbrev: https://github.com/isaacs/abbrev-js -  to handle command abbreviations\n* async: https://github.com/caolan/async - for parallel instrumentation of files\n* escodegen: https://github.com/Constellation/escodegen - for JS code generation\n* esprima: https://github.com/ariya/esprima - for JS parsing\n* glob: https://github.com/isaacs/node-glob - for loading and matching path expressions\n* handlebars: https://github.com/wycats/handlebars.js/ - for report template expansion\n* js-yaml: https://github.com/nodeca/js-yaml - for YAML config file load\n* mkdirp: https://github.com/substack/node-mkdirp - to create output directories\n* nodeunit: https://github.com/caolan/nodeunit - dev dependency for unit tests\n* nopt: https://github.com/isaacs/nopt - for option parsing\n* once: https://github.com/isaacs/once - to ensure callbacks are called once\n* resolve: https://github.com/substack/node-resolve - for resolving a post-require hook module name into its main file.\n* rimraf - https://github.com/isaacs/rimraf - dev dependency for unit tests\n* which: https://github.com/isaacs/node-which - to resolve a node command to a file for the `cover` command\n* wordwrap: https://github.com/substack/node-wordwrap - for prettier help\n* prettify: http://code.google.com/p/google-code-prettify/ - for syntax colored HTML reports. Files checked in under `lib/vendor/`\n\n### Inspired by\n\n* YUI test coverage - https://github.com/yui/yuitest - the grand-daddy of JS coverage tools. Istanbul has been specifically designed to offer an alternative to this library with an easy migration path.\n* cover: https://github.com/itay/node-cover - the inspiration for the `cover` command, modeled after the `run` command in that tool. The coverage methodology used by istanbul is quite different, however\n\n### Shout out to\n\n   * [mfncooper](https://github.com/mfncooper) - for great brainstorming discussions\n   * [reid](https://github.com/reid), [davglass](https://github.com/davglass), the YUI dudes, for interesting conversations, encouragement, support and gentle pressure to get it done :)\n\n### Why the funky name?\n\nSince all the good ones are taken. Comes from the loose association of ideas across\ncoverage, carpet-area coverage, the country that makes good carpets and so on...\n"
        },
        {
          "name": "coverage.json.md",
          "type": "blob",
          "size": 2.9560546875,
          "content": "# Format of coverage.json\n\n`coverage.json` contains a report object, which is a hash where keys are file names (absolute\npaths), and values are coverage data for that file (the result of\n`json.stringify(collector.fileCoverageFor(filename))`)  Each entry consists of:\n\n* `path` - The path to the file.  This is an absolute path, and should be the same as the\n  key in the report object.\n* `s` - Hash of statement counts, where keys as statement IDs.\n* `b` - Hash of branch counts, where keys are branch IDs and values are arrays of counts.\n  For an if statement, the value would have two counts; one for the if, and one for the\n  else.  Switch statements would have an array of values for each case.\n* `f` - Hash of function counts, where keys are function IDs.\n* `fnMap` - Hash of functions where keys are function IDs, and values are `{name, line, loc, skip}`,\n  where `name` is the name of the function, `line` is the line the function is declared on,\n  and `loc` is the `Location` of the function declaration (just the declaration, not the entire\n  function body - see 'Location Objects' below.)  If `skip` is present and true, then this\n  indicates that this function was ignored by a `### instabul ignore ... ###` pragma.  Note that\n  if a function is not ignored the `skip` field will be missing entirely.\n* `statementMap` - Hash where keys are statement IDs, and values are `Location` objects for each\n  statement.  The `Location` for a function definition is really an assignment, and should\n  include the entire function.  In addition to the normal location object fields, a\n  `statementMap` entry can also have an optional `skip` field.\n* `branchMap` - Hash where keys are branch IDs, and values are `{line, type, locations}` objects.\n  `line` is the line the branch starts on.  `type` is the type of the branch (e.g. \"if\", \"switch\").\n  `locations` is an array of `Location` objects, one for each possible outcome of the branch.\n  Note for an `if` statement where there is no `else` clause, there will still be two `locations`\n  generated.  Istanbul does *not* generate coverage for the `default` case of a switch statement\n  if `default` is not explicitly present in the source code.\n* `l` - Hash of line counts, where keys are the line number.\n\n  `locations` for an if statement are always 0-length and located at the start of the `if` (even\n  the location for the \"else\").  For a `switch` statement, `locations` start at the start of the\n  `case` statement and go to the end of the line before the next case statement (note Istanbul\n  does nothing clever here if a `case` is missing a `break`.)  Each location in `locations` can\n  also optionally have a `skip: true` field to indicate that this branch was ignored.\n\nIDs used in the fnMap, statementMap, and branchMap are sequential integers, starting at 1.\n\n## Location Objects\n\nLocation objects are a `{start: {line, column}, end: {line, column}}` object that describes\nthe start and end of a piece of code.  Note that `line` is 1-based, but `column` is 0-based.\n"
        },
        {
          "name": "download-escodegen-browser.sh",
          "type": "blob",
          "size": 0.59765625,
          "content": "#!/bin/sh\n\nESCG_DIR=node_modules/escodegen\nESCG_VERSION=`grep '\"version\"' ${ESCG_DIR}/package.json  | awk '{print $2}' | sed 's/[\",]//g'`\nOUT_FILE=${ESCG_DIR}/escodegen.browser.min.js\nif [ ! -f ${OUT_FILE} ]\nthen\n    set -v\n    rm -rf __escodegen_clone__\n    git clone --branch ${ESCG_VERSION} https://github.com/estools/escodegen.git __escodegen_clone__\n    cd __escodegen_clone__\n\n    # Temporarily ignore missing package, see #489\n    perl -i -ne '/esprima\\-moz/ or print' package.json\n\n    npm i && npm run build-min\n    mv escodegen.browser.min.js ../${OUT_FILE}\n    cd -\n    rm -rf __escodegen_clone__\nfi\n\n"
        },
        {
          "name": "generate-pages.sh",
          "type": "blob",
          "size": 0.2080078125,
          "content": "set -ex\nexport PAGES_DIR=../istanbul-pages\nnpm test --coverage\nmkdir -p public/apidocs\nyuidoc .\nrsync -rvt ./public/apidocs/ ${PAGES_DIR}/public/apidocs/\nrsync -rvt ./build/coverage/ ${PAGES_DIR}/public/coverage\n\n"
        },
        {
          "name": "ignoring-code-for-coverage.md",
          "type": "blob",
          "size": 4.3388671875,
          "content": "## Ignoring code for coverage purposes\n\nSome branches in JS code are typically hard, if not impossible to test.\n\nExamples are a `hasOwnProperty` check, [UMD wrappers](https://github.com/umdjs/umd) and so on. Istanbul now has a\nfacility by which coverage can be excluded for certain sections of code.\n\n### The interface\n\n1. Coverage can be explicitly skipped using comments. There is no automatic pattern match of expressions to determine\nif they should be skipped for coverage.\n2. A coverage skip hint looks like `/* istanbul ignore <word>[non-word] [optional-docs] */`\n3. For `if` conditions you can say `/* istanbul ignore if */` or `/* istanbul ignore else */` and that will end up\nignoring whichever path was required to be ignored.\n4. For all other cases, the Swiss army knife `/* istanbul ignore next */` may be used which skips the \"next thing\" in\nthe source code\n5. The \"next\" thing may be, among other things:\n  * A JS statement (including assignments, ifs, loops, switches, functions) in which case all of the statement is\n  ignored for all forms of coverage.\n  * A switch case statement, in which case the particular case is ignored for branch coverage and its contents ignored\n  for all forms\n  * A conditional inside a ternary expression in which case the branch is ignored\n  * A part of a logical expression in which case that part of the expression is ignored for branch coverage\n6. It is up to the caller to scope this as narrowly as possible. For example, if you have a source file that is wrapped\nin a function expression, adding `/* istanbul ignore next */` at the top of the file will ignore the whole file!\n\n### How it works\n\nWhen some part of the JS is considered skipped, nothing actually happens in terms of changes to the instrumentation. Everything is calculated as though nothing was skipped - all that changes is that there is a `skip` attribute added to the metadata of the statement, function or branch as applicable.\n\nCoverage reporting however takes the `skip` attribute into account and artificially increments counts, when 0 and skipped to pretend that the thing in question was covered. The HTML report shows the coverage after taking skips into account but at the same time colors the skipped statements with a gray color for easy visual scan.\n\nThis design makes it possible to report on either of the coverage numbers (\"raw\" v/s \"processed\"), show a count of statements/ functions/ branches skipped etc. The HTML and text summary reports display counts of how many statements, branches and functions were ignored.\n\n### Some practical examples\n\n#### Ignore an else path\n\n```javascript\n/* istanbul ignore else  */\nif (foo.hasOwnProperty('bar')) {\n    // do something\n}\n```\n\nUsually istanbul would complain about missing coverage for the `else` branch but it won't do so because of the comment.\n\n#### Ignore an if path\n\n```javascript\n/* istanbul ignore if  */\nif (hardToReproduceError)) {\n    return callback(hardToReproduceError);\n}\n```\n\nIn this case, you do not have to produce the error to have full branch coverage.\n\n#### Ignore specific switch cases\n\n```javascript\nswitch (foo) {\n    case 1: /* some code */; break;\n    /* istanbul ignore next */\n    case 2: // really difficult to enter in a unit test for some reason\n        someCode();\n}\n```\n\nIn the above example, the `case 2` branch is treated as covered.\n\n#### Ignore default assignments\n\n```javascript\nvar object = parameter || /* istanbul ignore next: tired of writing tests */ {};\n```\n\nIn the above example, the entire line will be treated a covered even if you don't have a test for a falsy `parameter` value. In this example the trailing `: tired of writing tests` string is an explanatory comment for your future self. It can be anything.\n\n#### Ignore specific conditions in an expression\n\n```javascript\nif (simpleError ||\n    /* istanbul ignore next */ reallyDifficultToProduceError) {\n\n}\n```\n\nYou get the idea by now.\n\n#### Ignore a UMD wrapper\n\n```javascript\n(function (root, factory) {\n    'use strict';\n    /* istanbul ignore next */\n    if (typeof exports === 'object') {\n        // CommonJS\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(factory);\n    } else {\n        // Browser globals\n        root.module = factory();\n    }\n})(this, fn);\n```\n\nThis will cause the entire function expression to be skipped for coverage.\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 4.2353515625,
          "content": "/*\nCopyright (c) 2012, Yahoo! Inc.  All rights reserved.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n*/\n\n/*jslint nomen: true */\nvar path = require('path'),\n    Store = require('./lib/store'),\n    Report = require('./lib/report'),\n    meta = require('./lib/util/meta');\n\n//register our standard plugins\nrequire('./lib/register-plugins');\n\n/**\n * the top-level API for `istanbul`. provides access to the key libraries in\n * istanbul so you can write your own tools using `istanbul` as a library.\n *\n * Usage\n * -----\n *\n *      var istanbul = require('istanbul');\n *\n *\n * @class Istanbul\n * @static\n * @module main\n * @main main\n */\n\nmodule.exports = {\n    /**\n     * the Instrumenter class.\n     * @property Instrumenter\n     * @type Instrumenter\n     * @static\n     */\n    Instrumenter: require('./lib/instrumenter'),\n    /**\n     * the Store class.\n     * @property  Store\n     * @type Store\n     * @static\n     */\n    Store: Store,\n    /**\n     * the Collector class\n     * @property  Collector\n     * @type Collector\n     * @static\n     */\n    Collector: require('./lib/collector'),\n    /**\n     * the hook module\n     * @property hook\n     * @type Hook\n     * @static\n     */\n    hook: require('./lib/hook'),\n    /**\n     * the Report class\n     * @property Report\n     * @type Report\n     * @static\n     */\n    Report: Report,\n    /**\n     * the config module\n     * @property config\n     * @type Config\n     * @static\n     */\n    config: require('./lib/config'),\n    /**\n     * the Reporter class\n     * @property Reporter\n     * @type Reporter\n     * @static\n     */\n    Reporter: require('./lib/reporter'),\n    /**\n     * utility for processing coverage objects\n     * @property utils\n     * @type ObjectUtils\n     * @static\n     */\n    utils: require('./lib/object-utils'),\n    /**\n     * asynchronously returns a function that can match filesystem paths.\n     * The function returned in the callback may be passed directly as a `matcher`\n     * to the functions in the `hook` module.\n     *\n     * When no options are passed, the match function is one that matches all JS\n     * files under the current working directory except ones under `node_modules`\n     *\n     * Match patterns are `ant`-style patterns processed using the `glob` library.\n     * Examples not provided due to limitations in putting asterisks inside\n     * jsdoc comments. Please refer to tests under `test/other/test-matcher.js`\n     * for examples.\n     *\n     * @method matcherFor\n     * @static\n     * @param {Object} options Optional. Lookup options.\n     * @param {String} [options.root] the root of the filesystem tree under\n     *     which to match files. Defaults to `process.cwd()`\n     * @param {Array} [options.includes] an array of include patterns to match.\n     *     Defaults to all JS files under the root.\n     * @param {Array} [options.excludes] and array of exclude patterns. File paths\n     *     matching these patterns will be excluded by the returned matcher.\n     *     Defaults to files under `node_modules` found anywhere under root.\n     * @param {Function(err, matchFunction)} callback  The callback that is\n     *      called with two arguments. The first is an `Error` object in case\n     *      of errors or a falsy value if there were no errors. The second\n     *      is a function that may be use as a matcher.\n     */\n    matcherFor: require('./lib/util/file-matcher').matcherFor,\n    /**\n     * the version of the library\n     * @property VERSION\n     * @type String\n     * @static\n     */\n    VERSION: meta.VERSION,\n    /**\n     * the abstract Writer class\n     * @property Writer\n     * @type Writer\n     * @static\n     */\n    Writer: require('./lib/util/writer').Writer,\n    /**\n     * the abstract ContentWriter class\n     * @property ContentWriter\n     * @type ContentWriter\n     * @static\n     */\n    ContentWriter: require('./lib/util/writer').ContentWriter,\n    /**\n     * the concrete FileWriter class\n     * @property FileWriter\n     * @type FileWriter\n     * @static\n     */\n    FileWriter: require('./lib/util/file-writer'),\n    //undocumented\n    _yuiLoadHook: require('./lib/util/yui-load-hook'),\n    //undocumented\n    TreeSummarizer: require('./lib/util/tree-summarizer'),\n    //undocumented\n    assetsDir: path.resolve(__dirname, 'lib', 'assets')\n};\n\n\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 4.591796875,
          "content": "{\n  \"name\": \"istanbul\",\n  \"version\": \"0.4.5\",\n  \"description\": \"Yet another JS code coverage tool that computes statement, line, function and branch coverage with module loader hooks to transparently add coverage when running tests. Supports all JS coverage use cases including unit tests, server side functional tests and browser tests. Built for scale\",\n  \"keywords\": [\n    \"coverage\",\n    \"code coverage\",\n    \"JS code coverage\",\n    \"JS coverage\"\n  ],\n  \"author\": \"Krishnan Anantheswaran <kananthmail-github@yahoo.com>\",\n  \"license\": \"BSD-3-Clause\",\n  \"contributors\": [\n    \"Reid Burke <me@reidburke.com>\",\n    \"Martin Cooper <mfncooper@gmail.com>\",\n    \"Dav Glass <davglass@gmail.com>\",\n    \"nowamasa <nowamasa@gmail.com>\",\n    \"Miller Medeiros @millermedeiros <contact@millermedeiros.com>\",\n    \"Daniel Perez Alvarez @unindented <unindented@gmail.com>\",\n    \"Mathias Bynens @mathiasbynens <mathias@qiwi.be>\",\n    \"Nathan Brown @nbrownus <nate@betable.com>\",\n    \"Brian Ng @existentialism <bng412@gmail.com>\",\n    \"John Morrison @jrgm\",\n    \"Tomaz Muraus @kami <tomaz+github@tomaz.me>\",\n    \"Joe @jhansche <jhansche@meetme.com>\",\n    \"Vojta Jina @vojtajina <vojta.jina@gmail.com>\",\n    \"Dmitry Shirokov @runk <deadrunk@gmail.com>\",\n    \"Chris Gladd @chrisgladd\",\n    \"Sergey Belov <peimei@ya.ru>\",\n    \"porneL @pornel <pornel@pornel.net>\",\n    \"@asifrc\",\n    \"Gergely Nemeth @gergelyke\",\n    \"@bixdeng\",\n    \"@mpderbec\",\n    \"@jxiaodev\",\n    \"Arpad Borsos @Swatinem <arpad.borsos@googlemail.com>\",\n    \"Ariya Hidayat @ariya\",\n    \"@markyen\",\n    \"Sam Saccone @samccone <sam@samx.it>\",\n    \"Jason Cheatham @jason0x43\",\n    \"@smikes\",\n    \"Yasyf Mohamedali @yasyf <yasyfm@gmail.com>\",\n    \"Fabio Crisci @piuccio <piuccio@gmail.com>\",\n    \"Ryan Roemer @ryan-roemer <ryan@loose-bits.com>\",\n    \"Douglas Christopher Wilson @dougwilson\",\n    \"Gustav Nikolaj @gustavnikolaj <gustavnikolaj@gmail.com>\",\n    \"Denis Sokolov @denis-sokolov <denis@sokolov.cc>\",\n    \"Yann Mainier @ymainier\",\n    \"Yiyu He @dead-horse <heyiyu.deadhorse@gmail.com>\",\n    \"Andrew Kelley @andrewrk <superjoe30@gmail.com>\",\n    \"Will LaBranche @wlabranche <will@labranche.io>\",\n    \"Mathieu Naouache @math-nao <math.nao@outlook.com>\",\n    \"Ron Korving @ronkorving\",\n    \"Rob McGuire-Dale @robatron <rob.mcguiredale@gmail.com>\",\n    \"Justin Johnson @booleangate\",\n    \"Juan Gabriel Jiménez @juangabreil <juangabreil@gmail.com>\",\n    \"Daniel Sabelnikov @dragn <dsabelnikov@gmail.com>\",\n    \"Tony Lukasavage @tonylukasavage <anthony.lukasavage@gmail.com>\",\n    \"Simon Ramsay @nexus-uw\",\n    \"Dominykas Blyžė @dominykas\",\n    \"Seth Pollack @sethpollack\",\n    \"Benjamin E. Coe @bcoe <ben@npmjs.com>\",\n    \"Yuren Ju <yurenju@gmail.com>\",\n    \"Aleksey Verkholantsev <alex-vee@yandex-team.ru>\",\n    \"Ed S <ejsanders@gmail.com>\",\n    \"Mordy Tikotzky <mordytk@gmail.com>\",\n    \"Haoliang Gao @popomore <sakura9515@gmail.com>\",\n    \"Roderick Hsiao @roderickhsiao\",\n    \"Nikita Gusakov @nkt\",\n    \"Alex Dunphy @alexdunphy <alexanderdunphy@gmail.com>\",\n    \"Artemy Tregubenko @arty-name <me@arty.name>\",\n    \"Arye Lukashevski @aryelu\",\n    \"@sterlinghw\",\n    \"Gord Tanner <gord@bithound.io>\",\n    \"Tom MacWright @tmcw <tom@macwright.org>\",\n    \"Kitson Kelly @kitsonk\",\n    \"@asa-git\",\n    \"@RoCat\",\n    \"Ian Page Hands @iphands <iphands@gmail.com>\",\n    \"Eddie Gurnee @pegurnee\",\n    \"Kevin Decker @kpdecker <kpdecker@gmail.com>\",\n    \"isaacs @isaacs <i@izs.me>\",\n    \"Steve Gray @steve-gray\",\n    \"Prayag Verma @pra85 <prayag.verma@gmail.com>\",\n    \"Abe Fehr @abejfehr <abe.fehr@gmail.com>\",\n    \"Brian Woodward @doowb <brian.woodward@gmail.com>\",\n    \"@Victorystick\",\n    \"@inversion\",\n    \"@JamesMGreene\",\n    \"@ChALkeR\",\n    \"@graingert\"\n  ],\n  \"scripts\": {\n    \"pretest\": \"jshint index.js lib/ test/ && ./download-escodegen-browser.sh\",\n    \"test\": \"node --harmony test/run.js\",\n    \"posttest\": \"node ./lib/cli.js check-coverage --statements 95 --branches 80\",\n    \"docs\": \"npm install yuidocjs && node node_modules/yuidocjs/lib/cli.js .\"\n  },\n  \"bin\": {\n    \"istanbul\": \"./lib/cli.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"lib/\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/gotwarlost/istanbul.git\"\n  },\n  \"dependencies\": {\n    \"abbrev\": \"1.0.x\",\n    \"async\": \"1.x\",\n    \"escodegen\": \"1.8.x\",\n    \"esprima\": \"2.7.x\",\n    \"glob\": \"^5.0.15\",\n    \"handlebars\": \"^4.0.1\",\n    \"js-yaml\": \"3.x\",\n    \"mkdirp\": \"0.5.x\",\n    \"nopt\": \"3.x\",\n    \"once\": \"1.x\",\n    \"resolve\": \"1.1.x\",\n    \"supports-color\": \"^3.1.0\",\n    \"which\": \"^1.1.1\",\n    \"wordwrap\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"coveralls\": \"2.x\",\n    \"jshint\": \"^2.8.0\",\n    \"nodeunit\": \"0.9.x\",\n    \"requirejs\": \"2.x\",\n    \"rimraf\": \"^2.4.3\"\n  }\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "yui-coverage-comparison.md",
          "type": "blob",
          "size": 4.576171875,
          "content": "Comparison with YUI coverage\n============================\n\nDifferences in features\n-----------------------\n\n* YUI coverage - line and function coverage. Istanbul - statement, function and branch coverage.\nReverse-engineers line-coverage from statement coverage with 100% fidelity at reporting time.\n\n* Output report formats are not as extensive as YUI coverage reporting. It supports LCOV and a custom\nHTML format (all-JS implementation) that only highlights missing coverage. \"Standard\" LCOV HTML reports can be\ngotten by running `genhtml` on the `lcov.info` file. Notice that this will also have branch coverage\ninformation, assuming you are using a recent `lcov` version.\n\nDifferences in processing\n-------------------------\n\nYUI coverage emits a function call to increment line/ function coverage as\nappropriate. The function call also tests to see if that specific line/ function\nwas covered before and, if not, increments the coverage count for lines/ functions\nas appropriate.\n\nIstanbul emits code that does simple post-increments of object attributes without resorting\nto function calls at all. This also means that it does not keep track of derived information\nand does not bother to keep track of \"how many statements/ branches/ functions have been\ncovered so far\", preferring to do this at report generation time.\n\nDifferences in coverage object and generated code\n-------------------------------------------------\n\nThese are the ways in which the objects differ:\n\n* The YUI coverage object tracks line and function execution counts and also keeps track\nof how many lines/ functions were covered. The Istanbul coverage object only keeps\ntracks of statement, function and branch execution counts.\n\n* Due to the backwards-incompatible format of the Istanbul coverage object, it is not\nnamed `_yuitest_coverage` but `__coverage__` by default. You can change this to any name you\nwant using an instrumenter option.\n\n* The YUI coverage object packs the entire source code of the file into an array for every\nfile. The Istanbul coverage objects prefers to not do this by default and thereby does not automatically double\nthe size of every JS file. YAGNI. Unless you do, in which case you have to ask for it.\n\n* All access to the YUI coverage object is of the form `global_object['/path/to/file'].property`\nIstanbul generates a temporary variable name based on the MD5 hash of the file path and uses\nthat for assignment, as in: `_covRanDomJunk = global_object['/path/to/file']` and, subsequently\n`_covRanDomJunk.property[index]++` - this avoids a hash lookup for every increment call and also\nmakes the generated code size smaller.\n\n* YUI coverage emits code that is human-readable and tries to keep the lines of the generated code\nin around the same place as the source. Istanbul emits minified code by default unless told not to.\nThere is no reason the covered code needs to look anything like the original as long as it works the\nsame way.\n\nIn short, Istanbul provides smaller code size and faster execution at the expense of maintaining only\nraw data and no derived information (even though it tracks one extra metric).\n\nDifferences in tooling\n----------------------\n\n* Istanbul wants to be as unobtrusive as possible and provides module load hooks (for `require` and\n`vm.createScript`) to transparently instrument code in a `node` environment. YUI coverage, being java,\nnecessitates a pre-processing build step (or an expensive runtime one).\n\n* The same concept should be applicable for instrumenting and testing JS code meant for the browser.\nJust serve your file using a nodejs server (or Yeti) and instrument your code using custom middleware/\ninterceptors/ whatever.\n\n* The instrumentation command accepts wildcarded exclusion patterns so as to be able to run all the\nrequired instrumentation in one command for the 'pre-processing step' case.\n\nKnown bugs in YUI coverage fixed\n--------------------------------\n\nThe following known bugs in YUI coverage do not exist in Istanbul. This, of course, says nothing about\nwhat _other_ bugs Istanbul might have :)\n\n* No function calls for incrementing execution counts which implies no \"Deep recursion\" message from older IE (or something like that)\n  when IE sees a bunch of repeated function calls to the same function.\n* Statements with labels correctly handled\n* `if (a) foo() else if (b) bar() else baz()` case correctly handled\n* Coverage object for a file is assigned to the global object at module load only if it already does not exist in it.\nThis handles cases where a module is reloaded in node (as a result of nuking the `require` cache) correctly and\npreserves all execution counts from the previously loaded version.\n"
        },
        {
          "name": "yuidoc.json",
          "type": "blob",
          "size": 0.2080078125,
          "content": "{\n    \"name\": \"The Istanbul API\",\n    \"description\": \"The Istanbul API: a code coverage library\",\n    \"options\": {\n        \"outdir\": \"./public/apidocs\",\n        \"exclude\": \"vendor,node_modules,misc,test\"\n    }\n}\n\n"
        }
      ]
    }
  ]
}