{
  "metadata": {
    "timestamp": 1736562989218,
    "page": 607,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "callmecavs/layzr.js",
      "stars": 5549,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".babelrc",
          "type": "blob",
          "size": 0.056640625,
          "content": "{\n  \"presets\": [\n    \"es2015-rollup\",\n    \"stage-0\"\n  ]\n}\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.02734375,
          "content": "{\n  \"extends\": \"standard\"\n}\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0390625,
          "content": ".DS_Store\ndist\nnode_modules\n*.log\n*.map\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.009765625,
          "content": "*\n!dist/*\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.2958984375,
          "content": "# Conduct\n\nFollow the [golden rule](https://en.wikipedia.org/wiki/Golden_Rule). Be respectful, even to those that are disrespectful. Please understand that no one is getting paid to develop/maintain open source software.\n\n# Issues\n\nMost can be solved by **reading the entire README**. I know it's long, but I promise it's thorough.\n\nBefore opening an issue, please review:\n\n* [Getting Started](https://github.com/callmecavs/layzr.js#getting-started)\n* [Example Code](https://github.com/callmecavs/layzr.js/tree/master/examples)\n\nIn the event that something is still broken, **include the following with a description of your issue**:\n\n1. Browser Version\n2. Browser Console (screenshot preferred)\n3. Relevant HTML/JS (code block preferred)\n\nIssues that don't will take longer to address, and may be outright closed.\n\n# Pull Requests\n\nContributions are encouraged, especially if they address [open issues](https://github.com/callmecavs/layzr.js/issues?q=is%3Aopen+is%3Aissue). Please review the existing source code, and try to match the code style. Be prepared to edit your pull request.\n\nIn regards to additions, enhancements, and API changes... I'm open to new ideas, but these may be declined if I don't think they align with the direction I'd like to project to go in. Please be understanding of that, and consider forking.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.45703125,
          "content": "# Layzr.js\n\n[![Layzr.js on NPM](https://img.shields.io/npm/v/layzr.js.svg?style=flat-square)](https://www.npmjs.com/package/layzr.js) [![Layzr.js Downloads on NPM](https://img.shields.io/npm/dm/layzr.js.svg?style=flat-square)](https://www.npmjs.com/package/layzr.js) [![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/layzr.js/badge)](https://www.jsdelivr.com/package/npm/layzr.js) [![Standard JavaScript Style](https://img.shields.io/badge/code_style-standard-brightgreen.svg?style=flat-square)](http://standardjs.com/)\n\nA modern lazy loading library for images.\n\n* [Demo Page](http://callmecavs.github.io/layzr.js/)\n\n## Getting Started\n\nFollow these steps:\n\n1. [Install](#install)\n2. [Setup Images](#setup-images)\n3. [Instantiate](#instantiate)\n4. [Review Options](#options)\n5. [Review Events](#events)\n6. [Review API](#api)\n7. **[Review Example Code](https://github.com/callmecavs/layzr.js/tree/master/examples)**\n  * Examples progress like a coffee addiction: small -> medium -> large\n\n## Install\n\nLayzr was developed with a modern JavaScript workflow in mind. To use it, it's recommended you have a build system in place that can transpile ES6, and bundle modules. For a minimal boilerplate that fulfills those requirements, check out [outset](https://github.com/callmecavs/outset).\n\nInstall Layzr, and add it to your `package.json` dependencies.\n\n```\n$ npm install layzr.js --save\n```\n\nThen `import` it into the file where you'll use it.\n\n```es6\nimport Layzr from 'layzr.js'\n```\n\n## Setup Images\n\nLayzr intelligently chooses the best image source available **based on an image's data attributes and browser feature detection**.\n\n* In browsers that [support `srcset`](http://caniuse.com/#search=srcset), if available, it will be used to determine the source.\n* In browsers that don't, the normal or retina source will be chosen based on the [devicePixelRatio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) and availability.\n\nNote that all attribute names are configurable via the [options](#options) passed to Layzr. To indicate potential sources, add the following attributes to your images:\n\n| Name                           | Required | Optional |\n| :----------------------------- | :------: | :------: |\n| [`data-normal`](#data-normal)  |  ✓       |          |\n| [`data-retina`](#data-retina)  |          |  ✓       |\n| [`data-srcset`](#data-srcset)  |          |  ✓       |\n\n### data-normal\n\nPut the _normal resolution_ source in the `data-normal` attribute.\n\n```html\n<img data-normal=\"normal.jpg\">\n```\n\nNote that Layzr **selects elements using this attribute**. Elements without it won't be tracked, and will never load.\n\n### data-retina\n\nAdd the _retina/high resolution_ source in the `data-retina` attribute.\n\n```html\n<img data-normal=\"normal.jpg\" data-retina=\"retina.jpg\">\n```\n\n### data-srcset\n\nAdd the _source set_ in the `data-srcset` attribute. For information on the proper syntax, read the official [specification](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img).\n\n```html\n<img data-normal=\"normal.jpg\" data-retina=\"retina.jpg\" data-srcset=\"small.jpg 320w, medium.jpg 768w, large.jpg 1024w\">\n```\n\n## Instantiate\n\nCreate an instance, optionally passing in your [options](#options).\n\nBe sure to **assign your Layzr instance to a variable**. Using your instance, you can:\n\n* start and stop the event listeners\n* add and remove event handlers\n* accommodate dynamically added elements\n\n```es6\n// using the default options\n\nconst instance = Layzr()\n\n// using custom options\n\nconst instance = Layzr({\n  // ...\n})\n```\n\nOptions are explained in the following section.\n\n## Options\n\nDefault options are shown below, and an explanation of each follows:\n\n```es6\nconst instance = Layzr({\n  normal: 'data-normal',\n  retina: 'data-retina',\n  srcset: 'data-srcset',\n  threshold: 0\n})\n```\n\n### normal\n\nCustomize the attribute the normal resolution source is taken from.\n\n```es6\nconst instance = Layzr({\n  normal: 'data-normal'\n})\n```\n\n### retina\n\nCustomize the attribute the retina/high resolution source is taken from.\n\n```es6\nconst instance = Layzr({\n  retina: 'data-retina'\n})\n```\n\n### srcset\n\nCustomize the attribute the source set is taken from.\n\n```es6\nconst instance = Layzr({\n  srcset: 'data-srcset'\n})\n```\n\n### threshold\n\nAdjust when images load, relative to the viewport. _Positive values make images load sooner, negative values make images load later_.\n\nThreshold is a percentage of the viewport height, identical to the CSS `vh` unit.\n\n```es6\nconst instance = Layzr({\n  threshold: 0\n})\n```\n\n## Events\n\nLayzr instances are extended with [Knot.js](https://github.com/callmecavs/knot.js), a browser-based event emitter. Use the event emitter syntax to add and remove handlers. Review the emitter syntax [here](https://github.com/callmecavs/knot.js#api).\n\nLayzr emits the following events:\n\n* [src:before](#srcbefore)\n* [src:after](#srcafter)\n\n### src:before\n\nThis event is emitted immediately _before an image source is set_. The image node is passed to the event handler.\n\n```es6\ninstance.on('src:before', (element) => {\n  // 'this' is your Layzr instance\n  // 'element' is the image node\n  // ...\n})\n```\n\nLoad event handlers should be attached using this event. See the [example](https://github.com/callmecavs/layzr.js/blob/master/examples/large.js), and note the [caveats](https://api.jquery.com/load-event/) associated with image load events before proceeding.\n\n### src:after\n\nThis event is emitted immediately _after an image source is set_. The image node is passed to the event handler.\n\n```es6\ninstance.on('src:after', (element) => {\n  // 'this' is your Layzr instance\n  // 'element' is the image node\n  // ...\n})\n```\n\nNote that the image is not necessarily done loading when this event fires.\n\n## API\n\nAll API methods are **chainable**, including those from the emitter.\n\n### .handlers(flag)\n\nAdd or remove the `scroll` and `resize` event handlers.\n\n```es6\ninstance\n  .handlers(true)       // 'true' adds them\n  .handlers(false)      // 'false' removes them\n```\n\n### .check()\n\nManually check if elements are in the viewport.\n\nThis method is called while the `window` is scrolled or resized.\n\n```es6\ninstance.check()\n```\n\n### .update()\n\nUpdate the elements Layzr is checking.\n\n```es6\ninstance.update()\n```\n\n**Dynamically added elements** should be handled using this method. See the [example](https://github.com/callmecavs/layzr.js/blob/master/examples/large.js).\n\n## Browser Support\n\nLayzr depends on the following browser APIs:\n\n* [classList](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\n* ES5 array methods: [forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach), [slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)\n* [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame)\n\nIt supports the following natively:\n\n* Chrome 24+\n* Firefox 23+\n* Safari 6.1+\n* Opera 15+\n* Edge 12+\n* IE 10+\n* iOS Safari 7.1+\n* Android Browser 4.4+\n\nTo support older browsers, consider including [polyfills/shims](https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills) for the APIs listed above. There are **no plans to include any in the library**, in the interest of file size.\n\n## Colophon\n\n* Site Design: [Chris Allen](https://dribbble.com/cp_allen)\n* Stock Photos: [Unsplash](https://unsplash.com/)\n\n## License\n\n[MIT](https://opensource.org/licenses/MIT). © 2017 Michael Cavalea\n\n[![Built With Love](http://forthebadge.com/images/badges/built-with-love.svg)](http://forthebadge.com)\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.19921875,
          "content": "{\n  \"name\":        \"layzr.js\",\n  \"description\": \"A modern lazy loading library for images.\",\n\n  \"main\":        \"dist/layzr.js\",\n  \"module\":      \"dist/layzr.module.js\",\n  \"jsnext:main\": \"dist/layzr.module.js\",\n\n  \"version\": \"2.2.2\",\n  \"license\": \"MIT\",\n\n  \"repository\": \"callmecavs/layzr.js\",\n\n  \"author\": {\n    \"name\":  \"Michael Cavalea\",\n    \"email\": \"callmecavs@gmail.com\",\n    \"url\":   \"http://callmecavs.com/\"\n  },\n\n  \"scripts\": {\n    \"prebuild\":   \"eslint src\",\n    \"build\":      \"rollup -c\",\n    \"dev\":        \"rollup -c -w -m inline\",\n    \"prepublish\": \"npm run build\",\n    \"server\":     \"python -m SimpleHTTPServer 3000\"\n  },\n\n  \"keywords\": [\n    \"images\",\n    \"lazy\",\n    \"load\",\n    \"scroll\"\n  ],\n\n  \"dependencies\": {\n    \"knot.js\": \"^1.1.5\"\n  },\n\n  \"devDependencies\": {\n    \"babel-eslint\": \"^7.1.1\",\n    \"babel-plugin-external-helpers\": \"^6.18.0\",\n    \"babel-preset-es2015-rollup\": \"^3.0.0\",\n    \"babel-preset-stage-0\": \"^6.16.0\",\n    \"eslint\": \"^3.13.0\",\n    \"eslint-config-standard\": \"^6.2.1\",\n    \"eslint-plugin-promise\": \"^3.4.0\",\n    \"eslint-plugin-standard\": \"^2.0.1\",\n    \"rollup\": \"^0.41.1\",\n    \"rollup-plugin-babel\": \"^2.7.1\",\n    \"rollup-plugin-node-resolve\": \"^2.0.0\",\n    \"rollup-watch\": \"^3.2.2\"\n  }\n}\n"
        },
        {
          "name": "rollup.config.js",
          "type": "blob",
          "size": 0.384765625,
          "content": "import babel from 'rollup-plugin-babel'\nimport resolve from 'rollup-plugin-node-resolve'\n\nconst info = require('./package.json')\n\nconst config = {\n  entry: 'src/layzr.js',\n  plugins: [\n    resolve(),\n    babel()\n  ],\n  targets: [\n    {\n      dest: info.main,\n      format: 'umd',\n      moduleName: 'Layzr'\n    }, {\n      dest: info.module,\n      format: 'es'\n    }\n  ]\n}\n\nexport default config\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}