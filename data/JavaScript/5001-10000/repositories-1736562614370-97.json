{
  "metadata": {
    "timestamp": 1736562614370,
    "page": 97,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ljharb/qs",
      "stars": 8617,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.5830078125,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nmax_line_length = 160\nquote_type = single\n\n[test/*]\nmax_line_length = off\n\n[LICENSE.md]\nindent_size = off\n\n[*.md]\nmax_line_length = off\n\n[*.json]\nmax_line_length = off\n\n[Makefile]\nmax_line_length = off\n\n[CHANGELOG.md]\nindent_style = space\nindent_size = 2\n\n[LICENSE]\nindent_size = 2\nmax_line_length = off\n\n[coverage/**/*]\nindent_size = off\nindent_style = off\nindent = off\nmax_line_length = off\n\n[.nycrc]\nindent_style = tab\n\n[tea.yaml]\nindent_size = 2\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 1.025390625,
          "content": "{\n    \"root\": true,\n\n    \"extends\": \"@ljharb\",\n\n    \"ignorePatterns\": [\n        \"dist/\",\n    ],\n\n    \"rules\": {\n        \"complexity\": 0,\n        \"consistent-return\": 1,\n        \"func-name-matching\": 0,\n        \"id-length\": [2, { \"min\": 1, \"max\": 25, \"properties\": \"never\" }],\n        \"indent\": [2, 4],\n        \"max-lines\": 0,\n        \"max-lines-per-function\": [2, { \"max\": 150 }],\n        \"max-params\": [2, 18],\n        \"max-statements\": [2, 100],\n        \"multiline-comment-style\": 0,\n        \"no-continue\": 1,\n        \"no-magic-numbers\": 0,\n        \"no-restricted-syntax\": [2, \"BreakStatement\", \"DebuggerStatement\", \"ForInStatement\", \"LabeledStatement\", \"WithStatement\"],\n    },\n\n    \"overrides\": [\n        {\n            \"files\": \"test/**\",\n            \"rules\": {\n                \"function-paren-newline\": 0,\n                \"max-lines-per-function\": 0,\n                \"max-statements\": 0,\n                \"no-buffer-constructor\": 0,\n                \"no-extend-native\": 0,\n                \"no-throw-literal\": 0,\n            },\n        },\n    ],\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2041015625,
          "content": "# gitignore\nnpm-debug.log\nnode_modules\n.DS_Store\n\n# build output\ndist/*\n\n# Only apps should have lockfiles\nyarn.lock\npackage-lock.json\nnpm-shrinkwrap.json\n\n# coverage output\ncoverage/\n.nyc_output/\n\n.npmignore\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": ".nycrc",
          "type": "blob",
          "size": 0.2109375,
          "content": "{\n\t\"all\": true,\n\t\"check-coverage\": false,\n\t\"reporter\": [\"text-summary\", \"text\", \"html\", \"json\"],\n\t\"lines\": 86,\n\t\"statements\": 85.93,\n\t\"functions\": 82.43,\n\t\"branches\": 76.06,\n\t\"exclude\": [\n\t\t\"coverage\",\n\t\t\"dist\"\n\t]\n}\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 31.9306640625,
          "content": "## **6.13.1**\n- [Fix] `stringify`: avoid a crash when a `filter` key is `null`\n- [Fix] `utils.merge`: functions should not be stringified into keys\n- [Fix] `parse`: avoid a crash with interpretNumericEntities: true, comma: true, and iso charset\n- [Fix] `stringify`: ensure a non-string `filter` does not crash\n- [Refactor] use `__proto__` syntax instead of `Object.create` for null objects\n- [Refactor] misc cleanup\n- [Tests] `utils.merge`: add some coverage\n- [Tests] fix a test case\n- [actions] split out node 10-20, and 20+\n- [Dev Deps] update `es-value-fixtures`, `mock-property`, `object-inspect`, `tape`\n\n## **6.13.0**\n- [New] `parse`: add `strictDepth` option (#511)\n- [Tests] use `npm audit` instead of `aud`\n\n## **6.12.3**\n- [Fix] `parse`: properly account for `strictNullHandling` when `allowEmptyArrays`\n- [meta] fix changelog indentation\n\n## **6.12.2**\n- [Fix] `parse`: parse encoded square brackets (#506)\n- [readme] add CII best practices badge\n\n## **6.12.1**\n- [Fix] `parse`: Disable `decodeDotInKeys` by default to restore previous behavior (#501)\n- [Performance] `utils`: Optimize performance under large data volumes, reduce memory usage, and speed up processing (#502)\n- [Refactor] `utils`: use `+=`\n- [Tests] increase coverage\n\n## **6.12.0**\n\n- [New] `parse`/`stringify`: add `decodeDotInKeys`/`encodeDotKeys` options (#488)\n- [New] `parse`: add `duplicates` option\n- [New] `parse`/`stringify`: add `allowEmptyArrays` option to allow [] in object values (#487)\n- [Refactor] `parse`/`stringify`: move allowDots config logic to its own variable\n- [Refactor] `stringify`: move option-handling code into `normalizeStringifyOptions`\n- [readme] update readme, add logos (#484)\n- [readme] `stringify`: clarify default `arrayFormat` behavior\n- [readme] fix line wrapping\n- [readme] remove dead badges\n- [Deps] update `side-channel`\n- [meta] make the dist build 50% smaller\n- [meta] add `sideEffects` flag\n- [meta] run build in prepack, not prepublish\n- [Tests] `parse`: remove useless tests; add coverage\n- [Tests] `stringify`: increase coverage\n- [Tests] use `mock-property`\n- [Tests] `stringify`: improve coverage\n- [Dev Deps] update `@ljharb/eslint-config `, `aud`, `has-override-mistake`, `has-property-descriptors`, `mock-property`, `npmignore`, `object-inspect`, `tape`\n- [Dev Deps] pin `glob`, since v10.3.8+ requires a broken `jackspeak`\n- [Dev Deps] pin `jackspeak` since 2.1.2+ depends on npm aliases, which kill the install process in npm < 6\n\n## **6.11.2**\n- [Fix] `parse`: Fix parsing when the global Object prototype is frozen (#473)\n- [Tests] add passing test cases with empty keys (#473)\n\n## **6.11.1**\n- [Fix] `stringify`: encode comma values more consistently (#463)\n- [readme] add usage of `filter` option for injecting custom serialization, i.e. of custom types (#447)\n- [meta] remove extraneous code backticks (#457)\n- [meta] fix changelog markdown\n- [actions] update checkout action\n- [actions] restrict action permissions\n- [Dev Deps] update `@ljharb/eslint-config`, `aud`, `object-inspect`, `tape`\n\n## **6.11.0**\n- [New] [Fix] `stringify`: revert 0e903c0; add `commaRoundTrip` option (#442)\n- [readme] fix version badge\n\n## **6.10.5**\n- [Fix] `stringify`: with `arrayFormat: comma`, properly include an explicit `[]` on a single-item array (#434)\n\n## **6.10.4**\n- [Fix] `stringify`: with `arrayFormat: comma`, include an explicit `[]` on a single-item array (#441)\n- [meta] use `npmignore` to autogenerate an npmignore file\n- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `has-symbol`, `object-inspect`, `tape`\n\n## **6.10.3**\n- [Fix] `parse`: ignore `__proto__` keys (#428)\n- [Robustness] `stringify`: avoid relying on a global `undefined` (#427)\n- [actions] reuse common workflows\n- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `object-inspect`, `tape`\n\n## **6.10.2**\n- [Fix] `stringify`: actually fix cyclic references (#426)\n- [Fix] `stringify`: avoid encoding arrayformat comma when `encodeValuesOnly = true` (#424)\n- [readme] remove travis badge; add github actions/codecov badges; update URLs\n- [Docs] add note and links for coercing primitive values (#408)\n- [actions] update codecov uploader\n- [actions] update workflows\n- [Tests] clean up stringify tests slightly\n- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `object-inspect`, `safe-publish-latest`, `tape`\n\n## **6.10.1**\n- [Fix] `stringify`: avoid exception on repeated object values (#402)\n\n## **6.10.0**\n- [New] `stringify`: throw on cycles, instead of an infinite loop (#395, #394, #393)\n- [New] `parse`: add `allowSparse` option for collapsing arrays with missing indices (#312)\n- [meta] fix README.md (#399)\n- [meta] only run `npm run dist` in publish, not install\n- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `has-symbols`, `tape`\n- [Tests] fix tests on node v0.6\n- [Tests] use `ljharb/actions/node/install` instead of `ljharb/actions/node/run`\n- [Tests] Revert \"[meta] ignore eclint transitive audit warning\"\n\n## **6.9.7**\n- [Fix] `parse`: ignore `__proto__` keys (#428)\n- [Fix] `stringify`: avoid encoding arrayformat comma when `encodeValuesOnly = true` (#424)\n- [Robustness] `stringify`: avoid relying on a global `undefined` (#427)\n- [readme] remove travis badge; add github actions/codecov badges; update URLs\n- [Docs] add note and links for coercing primitive values (#408)\n- [Tests] clean up stringify tests slightly\n- [meta] fix README.md (#399)\n- Revert \"[meta] ignore eclint transitive audit warning\"\n- [actions] backport actions from main\n- [Dev Deps] backport updates from main\n\n## **6.9.6**\n- [Fix] restore `dist` dir; mistakenly removed in d4f6c32\n\n## **6.9.5**\n- [Fix] `stringify`: do not encode parens for RFC1738\n- [Fix] `stringify`: fix arrayFormat comma with empty array/objects (#350)\n- [Refactor] `format`: remove `util.assign` call\n- [meta] add \"Allow Edits\" workflow; update rebase workflow\n- [actions] switch Automatic Rebase workflow to `pull_request_target` event\n- [Tests] `stringify`: add tests for #378\n- [Tests] migrate tests to Github Actions\n- [Tests] run `nyc` on all tests; use `tape` runner\n- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `browserify`, `mkdirp`, `object-inspect`, `tape`; add `aud`\n\n## **6.9.4**\n- [Fix] `stringify`: when `arrayFormat` is `comma`, respect `serializeDate` (#364)\n- [Refactor] `stringify`: reduce branching (part of #350)\n- [Refactor] move `maybeMap` to `utils`\n- [Dev Deps] update `browserify`, `tape`\n\n## **6.9.3**\n- [Fix] proper comma parsing of URL-encoded commas (#361)\n- [Fix] parses comma delimited array while having percent-encoded comma treated as normal text (#336)\n\n## **6.9.2**\n- [Fix] `parse`: Fix parsing array from object with `comma` true (#359)\n- [Fix] `parse`: throw a TypeError instead of an Error for bad charset (#349)\n- [meta] ignore eclint transitive audit warning\n- [meta] fix indentation in package.json\n- [meta] add tidelift marketing copy\n- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `object-inspect`, `has-symbols`, `tape`, `mkdirp`, `iconv-lite`\n- [actions] add automatic rebasing / merge commit blocking\n\n## **6.9.1**\n- [Fix] `parse`: with comma true, handle field that holds an array of arrays (#335)\n- [Fix] `parse`: with comma true, do not split non-string values (#334)\n- [meta] add `funding` field\n- [Dev Deps] update `eslint`, `@ljharb/eslint-config`\n- [Tests] use shared travis-ci config\n\n## **6.9.0**\n- [New] `parse`/`stringify`: Pass extra key/value argument to `decoder` (#333)\n- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `evalmd`\n- [Tests] `parse`: add passing `arrayFormat` tests\n- [Tests] add `posttest` using `npx aud` to run `npm audit` without a lockfile\n- [Tests] up to `node` `v12.10`, `v11.15`, `v10.16`, `v8.16`\n- [Tests] `Buffer.from` in node v5.0-v5.9 and v4.0-v4.4 requires a TypedArray\n\n## **6.8.3**\n- [Fix] `parse`: ignore `__proto__` keys (#428)\n- [Robustness] `stringify`: avoid relying on a global `undefined` (#427)\n- [Fix] `stringify`: avoid encoding arrayformat comma when `encodeValuesOnly = true` (#424)\n- [readme] remove travis badge; add github actions/codecov badges; update URLs\n- [Tests] clean up stringify tests slightly\n- [Docs] add note and links for coercing primitive values (#408)\n- [meta] fix README.md (#399)\n- [actions] backport actions from main\n- [Dev Deps] backport updates from main\n- [Refactor] `stringify`: reduce branching\n- [meta] do not publish workflow files\n\n## **6.8.2**\n- [Fix] proper comma parsing of URL-encoded commas (#361)\n- [Fix] parses comma delimited array while having percent-encoded comma treated as normal text (#336)\n\n## **6.8.1**\n- [Fix] `parse`: Fix parsing array from object with `comma` true (#359)\n- [Fix] `parse`: throw a TypeError instead of an Error for bad charset (#349)\n- [Fix] `parse`: with comma true, handle field that holds an array of arrays (#335)\n- [fix] `parse`: with comma true, do not split non-string values (#334)\n- [meta] add tidelift marketing copy\n- [meta] add `funding` field\n- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `tape`, `safe-publish-latest`, `evalmd`, `has-symbols`, `iconv-lite`, `mkdirp`, `object-inspect`\n- [Tests] `parse`: add passing `arrayFormat` tests\n- [Tests] use shared travis-ci configs\n- [Tests] `Buffer.from` in node v5.0-v5.9 and v4.0-v4.4 requires a TypedArray\n- [actions] add automatic rebasing / merge commit blocking\n\n## **6.8.0**\n- [New] add `depth=false` to preserve the original key; [Fix] `depth=0` should preserve the original key (#326)\n- [New] [Fix] stringify symbols and bigints\n- [Fix] ensure node 0.12 can stringify Symbols\n- [Fix] fix for an impossible situation: when the formatter is called with a non-string value\n- [Refactor] `formats`: tiny bit of cleanup.\n- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `browserify`, `safe-publish-latest`, `iconv-lite`, `tape`\n- [Tests] add tests for `depth=0` and `depth=false` behavior, both current and intuitive/intended (#326)\n- [Tests] use `eclint` instead of `editorconfig-tools`\n- [docs] readme: add security note\n- [meta] add github sponsorship\n- [meta] add FUNDING.yml\n- [meta] Clean up license text so it’s properly detected as BSD-3-Clause\n\n## **6.7.3**\n- [Fix] `parse`: ignore `__proto__` keys (#428)\n- [Fix] `stringify`: avoid encoding arrayformat comma when `encodeValuesOnly = true` (#424)\n- [Robustness] `stringify`: avoid relying on a global `undefined` (#427)\n- [readme] remove travis badge; add github actions/codecov badges; update URLs\n- [Docs] add note and links for coercing primitive values (#408)\n- [meta] fix README.md (#399)\n- [meta] do not publish workflow files\n- [actions] backport actions from main\n- [Dev Deps] backport updates from main\n- [Tests] use `nyc` for coverage\n- [Tests] clean up stringify tests slightly\n\n## **6.7.2**\n- [Fix] proper comma parsing of URL-encoded commas (#361)\n- [Fix] parses comma delimited array while having percent-encoded comma treated as normal text (#336)\n\n## **6.7.1**\n- [Fix] `parse`: Fix parsing array from object with `comma` true (#359)\n- [Fix] `parse`: with comma true, handle field that holds an array of arrays (#335)\n- [fix] `parse`: with comma true, do not split non-string values (#334)\n- [Fix] `parse`: throw a TypeError instead of an Error for bad charset (#349)\n- [Fix] fix for an impossible situation: when the formatter is called with a non-string value\n- [Refactor] `formats`: tiny bit of cleanup.\n- readme: add security note\n- [meta] add tidelift marketing copy\n- [meta] add `funding` field\n- [meta] add FUNDING.yml\n- [meta] Clean up license text so it’s properly detected as BSD-3-Clause\n- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `tape`, `safe-publish-latest`, `evalmd`, `iconv-lite`, `mkdirp`, `object-inspect`, `browserify`\n- [Tests] `parse`: add passing `arrayFormat` tests\n- [Tests] use shared travis-ci configs\n- [Tests] `Buffer.from` in node v5.0-v5.9 and v4.0-v4.4 requires a TypedArray\n- [Tests] add tests for `depth=0` and `depth=false` behavior, both current and intuitive/intended\n- [Tests] use `eclint` instead of `editorconfig-tools`\n- [actions] add automatic rebasing / merge commit blocking\n\n## **6.7.0**\n- [New] `stringify`/`parse`: add `comma` as an `arrayFormat` option (#276, #219)\n- [Fix] correctly parse nested arrays (#212)\n- [Fix] `utils.merge`: avoid a crash with a null target and a truthy non-array source, also with an array source\n- [Robustness] `stringify`: cache `Object.prototype.hasOwnProperty`\n- [Refactor] `utils`: `isBuffer`: small tweak; add tests\n- [Refactor] use cached `Array.isArray`\n- [Refactor] `parse`/`stringify`: make a function to normalize the options\n- [Refactor] `utils`: reduce observable [[Get]]s\n- [Refactor] `stringify`/`utils`: cache `Array.isArray`\n- [Tests] always use `String(x)` over `x.toString()`\n- [Tests] fix Buffer tests to work in node < 4.5 and node < 5.10\n- [Tests] temporarily allow coverage to fail\n\n## **6.6.1**\n- [Fix] `parse`: ignore `__proto__` keys (#428)\n- [Fix] fix for an impossible situation: when the formatter is called with a non-string value\n- [Fix] `utils.merge`: avoid a crash with a null target and an array source\n- [Fix] `utils.merge`: avoid a crash with a null target and a truthy non-array source\n- [Fix] correctly parse nested arrays\n- [Robustness] `stringify`: avoid relying on a global `undefined` (#427)\n- [Robustness] `stringify`: cache `Object.prototype.hasOwnProperty`\n- [Refactor] `formats`: tiny bit of cleanup.\n- [Refactor] `utils`: `isBuffer`: small tweak; add tests\n- [Refactor]: `stringify`/`utils`: cache `Array.isArray`\n- [Refactor] `utils`: reduce observable [[Get]]s\n- [Refactor] use cached `Array.isArray`\n- [Refactor] `parse`/`stringify`: make a function to normalize the options\n- [readme] remove travis badge; add github actions/codecov badges; update URLs\n- [Docs] Clarify the need for \"arrayLimit\" option\n- [meta] fix README.md (#399)\n- [meta] do not publish workflow files\n- [meta] Clean up license text so it’s properly detected as BSD-3-Clause\n- [meta] add FUNDING.yml\n- [meta] Fixes typo in CHANGELOG.md\n- [actions] backport actions from main\n- [Tests] fix Buffer tests to work in node < 4.5 and node < 5.10\n- [Tests] always use `String(x)` over `x.toString()`\n- [Dev Deps] backport from main\n\n## **6.6.0**\n- [New] Add support for iso-8859-1, utf8 \"sentinel\" and numeric entities (#268)\n- [New] move two-value combine to a `utils` function (#189)\n- [Fix] `stringify`: fix a crash with `strictNullHandling` and a custom `filter`/`serializeDate` (#279)\n- [Fix] when `parseArrays` is false, properly handle keys ending in `[]` (#260)\n- [Fix] `stringify`: do not crash in an obscure combo of `interpretNumericEntities`, a bad custom `decoder`, & `iso-8859-1`\n- [Fix] `utils`: `merge`: fix crash when `source` is a truthy primitive & no options are provided\n- [refactor] `stringify`: Avoid arr = arr.concat(...), push to the existing instance (#269)\n- [Refactor] `parse`: only need to reassign the var once\n- [Refactor] `parse`/`stringify`: clean up `charset` options checking; fix defaults\n- [Refactor] add missing defaults\n- [Refactor] `parse`: one less `concat` call\n- [Refactor] `utils`: `compactQueue`: make it explicitly side-effecting\n- [Dev Deps] update `browserify`, `eslint`, `@ljharb/eslint-config`, `iconv-lite`, `safe-publish-latest`, `tape`\n- [Tests] up to `node` `v10.10`, `v9.11`, `v8.12`, `v6.14`, `v4.9`; pin included builds to LTS\n\n## **6.5.3**\n- [Fix] `parse`: ignore `__proto__` keys (#428)\n- [Fix] `utils.merge`: avoid a crash with a null target and a truthy non-array source\n- [Fix] correctly parse nested arrays\n- [Fix] `stringify`: fix a crash with `strictNullHandling` and a custom `filter`/`serializeDate` (#279)\n- [Fix] `utils`: `merge`: fix crash when `source` is a truthy primitive & no options are provided\n- [Fix] when `parseArrays` is false, properly handle keys ending in `[]`\n- [Fix] fix for an impossible situation: when the formatter is called with a non-string value\n- [Fix] `utils.merge`: avoid a crash with a null target and an array source\n- [Refactor] `utils`: reduce observable [[Get]]s\n- [Refactor] use cached `Array.isArray`\n- [Refactor] `stringify`: Avoid arr = arr.concat(...), push to the existing instance (#269)\n- [Refactor] `parse`: only need to reassign the var once\n- [Robustness] `stringify`: avoid relying on a global `undefined` (#427)\n- [readme] remove travis badge; add github actions/codecov badges; update URLs\n- [Docs] Clean up license text so it’s properly detected as BSD-3-Clause\n- [Docs] Clarify the need for \"arrayLimit\" option\n- [meta] fix README.md (#399)\n- [meta] add FUNDING.yml\n- [actions] backport actions from main\n- [Tests] always use `String(x)` over `x.toString()`\n- [Tests] remove nonexistent tape option\n- [Dev Deps] backport from main\n\n## **6.5.2**\n- [Fix] use `safer-buffer` instead of `Buffer` constructor\n- [Refactor] utils: `module.exports` one thing, instead of mutating `exports` (#230)\n- [Dev Deps] update `browserify`, `eslint`, `iconv-lite`, `safer-buffer`, `tape`, `browserify`\n\n## **6.5.1**\n- [Fix] Fix parsing & compacting very deep objects (#224)\n- [Refactor] name utils functions\n- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `tape`\n- [Tests] up to `node` `v8.4`; use `nvm install-latest-npm` so newer npm doesn’t break older node\n- [Tests] Use precise dist for Node.js 0.6 runtime (#225)\n- [Tests] make 0.6 required, now that it’s passing\n- [Tests] on `node` `v8.2`; fix npm on node 0.6\n\n## **6.5.0**\n- [New] add `utils.assign`\n- [New] pass default encoder/decoder to custom encoder/decoder functions (#206)\n- [New] `parse`/`stringify`: add `ignoreQueryPrefix`/`addQueryPrefix` options, respectively (#213)\n- [Fix] Handle stringifying empty objects with addQueryPrefix (#217)\n- [Fix] do not mutate `options` argument (#207)\n- [Refactor] `parse`: cache index to reuse in else statement (#182)\n- [Docs] add various badges to readme (#208)\n- [Dev Deps] update `eslint`, `browserify`, `iconv-lite`, `tape`\n- [Tests] up to `node` `v8.1`, `v7.10`, `v6.11`; npm v4.6 breaks on node < v1; npm v5+ breaks on node < v4\n- [Tests] add `editorconfig-tools`\n\n## **6.4.1**\n- [Fix] `parse`: ignore `__proto__` keys (#428)\n- [Fix] fix for an impossible situation: when the formatter is called with a non-string value\n- [Fix] use `safer-buffer` instead of `Buffer` constructor\n- [Fix] `utils.merge`: avoid a crash with a null target and an array source\n- [Fix] `utils.merge`: avoid a crash with a null target and a truthy non-array source\n- [Fix] `stringify`: fix a crash with `strictNullHandling` and a custom `filter`/`serializeDate` (#279)\n- [Fix] `utils`: `merge`: fix crash when `source` is a truthy primitive & no options are provided\n- [Fix] when `parseArrays` is false, properly handle keys ending in `[]`\n- [Robustness] `stringify`: avoid relying on a global `undefined` (#427)\n- [Refactor] use cached `Array.isArray`\n- [Refactor] `stringify`: Avoid arr = arr.concat(...), push to the existing instance (#269)\n- [readme] remove travis badge; add github actions/codecov badges; update URLs\n- [Docs] Clarify the need for \"arrayLimit\" option\n- [meta] fix README.md (#399)\n- [meta] Clean up license text so it’s properly detected as BSD-3-Clause\n- [meta] add FUNDING.yml\n- [actions] backport actions from main\n- [Tests] remove nonexistent tape option\n- [Dev Deps] backport from main\n\n## **6.4.0**\n- [New] `qs.stringify`: add `encodeValuesOnly` option\n- [Fix] follow `allowPrototypes` option during merge (#201, #201)\n- [Fix] support keys starting with brackets (#202, #200)\n- [Fix] chmod a-x\n- [Dev Deps] update `eslint`\n- [Tests] up to `node` `v7.7`, `v6.10`,` v4.8`; disable osx builds since they block linux builds\n- [eslint] reduce warnings\n\n## **6.3.3**\n- [Fix] `parse`: ignore `__proto__` keys (#428)\n- [Fix] fix for an impossible situation: when the formatter is called with a non-string value\n- [Fix] `utils.merge`: avoid a crash with a null target and an array source\n- [Fix] `utils.merge`: avoid a crash with a null target and a truthy non-array source\n- [Fix] `stringify`: fix a crash with `strictNullHandling` and a custom `filter`/`serializeDate` (#279)\n- [Fix] `utils`: `merge`: fix crash when `source` is a truthy primitive & no options are provided\n- [Fix] when `parseArrays` is false, properly handle keys ending in `[]`\n- [Robustness] `stringify`: avoid relying on a global `undefined` (#427)\n- [Refactor] use cached `Array.isArray`\n- [Refactor] `stringify`: Avoid arr = arr.concat(...), push to the existing instance (#269)\n- [Docs] Clarify the need for \"arrayLimit\" option\n- [meta] fix README.md (#399)\n- [meta] Clean up license text so it’s properly detected as BSD-3-Clause\n- [meta] add FUNDING.yml\n- [actions] backport actions from main\n- [Tests] use `safer-buffer` instead of `Buffer` constructor\n- [Tests] remove nonexistent tape option\n- [Dev Deps] backport from main\n\n## **6.3.2**\n- [Fix] follow `allowPrototypes` option during merge (#201, #200)\n- [Dev Deps] update `eslint`\n- [Fix] chmod a-x\n- [Fix] support keys starting with brackets (#202, #200)\n- [Tests] up to `node` `v7.7`, `v6.10`,` v4.8`; disable osx builds since they block linux builds\n\n## **6.3.1**\n- [Fix] ensure that `allowPrototypes: false` does not ever shadow Object.prototype properties (thanks, @snyk!)\n- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `browserify`, `iconv-lite`, `qs-iconv`, `tape`\n- [Tests] on all node minors; improve test matrix\n- [Docs] document stringify option `allowDots` (#195)\n- [Docs] add empty object and array values example (#195)\n- [Docs] Fix minor inconsistency/typo (#192)\n- [Docs] document stringify option `sort` (#191)\n- [Refactor] `stringify`: throw faster with an invalid encoder\n- [Refactor] remove unnecessary escapes (#184)\n- Remove contributing.md, since `qs` is no longer part of `hapi` (#183)\n\n## **6.3.0**\n- [New] Add support for RFC 1738 (#174, #173)\n- [New] `stringify`: Add `serializeDate` option to customize Date serialization (#159)\n- [Fix] ensure `utils.merge` handles merging two arrays\n- [Refactor] only constructors should be capitalized\n- [Refactor] capitalized var names are for constructors only\n- [Refactor] avoid using a sparse array\n- [Robustness] `formats`: cache `String#replace`\n- [Dev Deps] update `browserify`, `eslint`, `@ljharb/eslint-config`; add `safe-publish-latest`\n- [Tests] up to `node` `v6.8`, `v4.6`; improve test matrix\n- [Tests] flesh out arrayLimit/arrayFormat tests (#107)\n- [Tests] skip Object.create tests when null objects are not available\n- [Tests] Turn on eslint for test files (#175)\n\n## **6.2.4**\n- [Fix] `parse`: ignore `__proto__` keys (#428)\n- [Fix] `utils.merge`: avoid a crash with a null target and an array source\n- [Fix] `utils.merge`: avoid a crash with a null target and a truthy non-array source\n- [Fix] `utils`: `merge`: fix crash when `source` is a truthy primitive & no options are provided\n- [Fix] when `parseArrays` is false, properly handle keys ending in `[]`\n- [Robustness] `stringify`: avoid relying on a global `undefined` (#427)\n- [Refactor] use cached `Array.isArray`\n- [Docs] Clarify the need for \"arrayLimit\" option\n- [meta] fix README.md (#399)\n- [meta] Clean up license text so it’s properly detected as BSD-3-Clause\n- [meta] add FUNDING.yml\n- [actions] backport actions from main\n- [Tests] use `safer-buffer` instead of `Buffer` constructor\n- [Tests] remove nonexistent tape option\n- [Dev Deps] backport from main\n\n## **6.2.3**\n- [Fix] follow `allowPrototypes` option during merge (#201, #200)\n- [Fix] chmod a-x\n- [Fix] support keys starting with brackets (#202, #200)\n- [Tests] up to `node` `v7.7`, `v6.10`,` v4.8`; disable osx builds since they block linux builds\n\n## **6.2.2**\n- [Fix] ensure that `allowPrototypes: false` does not ever shadow Object.prototype properties\n\n## **6.2.1**\n- [Fix] ensure `key[]=x&key[]&key[]=y` results in 3, not 2, values\n- [Refactor] Be explicit and use `Object.prototype.hasOwnProperty.call`\n- [Tests] remove `parallelshell` since it does not reliably report failures\n- [Tests] up to `node` `v6.3`, `v5.12`\n- [Dev Deps] update `tape`, `eslint`, `@ljharb/eslint-config`, `qs-iconv`\n\n## [**6.2.0**](https://github.com/ljharb/qs/issues?milestone=36&state=closed)\n- [New] pass Buffers to the encoder/decoder directly (#161)\n- [New] add \"encoder\" and \"decoder\" options, for custom param encoding/decoding (#160)\n- [Fix] fix compacting of nested sparse arrays (#150)\n\n## **6.1.2**\n- [Fix] follow `allowPrototypes` option during merge (#201, #200)\n- [Fix] chmod a-x\n- [Fix] support keys starting with brackets (#202, #200)\n- [Tests] up to `node` `v7.7`, `v6.10`,` v4.8`; disable osx builds since they block linux builds\n\n## **6.1.1**\n- [Fix] ensure that `allowPrototypes: false` does not ever shadow Object.prototype properties\n\n## [**6.1.0**](https://github.com/ljharb/qs/issues?milestone=35&state=closed)\n- [New] allowDots option for `stringify` (#151)\n- [Fix] \"sort\" option should work at a depth of 3 or more (#151)\n- [Fix] Restore `dist` directory; will be removed in v7 (#148)\n\n## **6.0.4**\n- [Fix] follow `allowPrototypes` option during merge (#201, #200)\n- [Fix] chmod a-x\n- [Fix] support keys starting with brackets (#202, #200)\n- [Tests] up to `node` `v7.7`, `v6.10`,` v4.8`; disable osx builds since they block linux builds\n\n## **6.0.3**\n- [Fix] ensure that `allowPrototypes: false` does not ever shadow Object.prototype properties\n- [Fix] Restore `dist` directory; will be removed in v7 (#148)\n\n## [**6.0.2**](https://github.com/ljharb/qs/issues?milestone=33&state=closed)\n- Revert ES6 requirement and restore support for node down to v0.8.\n\n## [**6.0.1**](https://github.com/ljharb/qs/issues?milestone=32&state=closed)\n- [**#127**](https://github.com/ljharb/qs/pull/127) Fix engines definition in package.json\n\n## [**6.0.0**](https://github.com/ljharb/qs/issues?milestone=31&state=closed)\n- [**#124**](https://github.com/ljharb/qs/issues/124) Use ES6 and drop support for node < v4\n\n## **5.2.1**\n- [Fix] ensure `key[]=x&key[]&key[]=y` results in 3, not 2, values\n\n## [**5.2.0**](https://github.com/ljharb/qs/issues?milestone=30&state=closed)\n- [**#64**](https://github.com/ljharb/qs/issues/64) Add option to sort object keys in the query string\n\n## [**5.1.0**](https://github.com/ljharb/qs/issues?milestone=29&state=closed)\n- [**#117**](https://github.com/ljharb/qs/issues/117) make URI encoding stringified results optional\n- [**#106**](https://github.com/ljharb/qs/issues/106) Add flag `skipNulls` to optionally skip null values in stringify\n\n## [**5.0.0**](https://github.com/ljharb/qs/issues?milestone=28&state=closed)\n- [**#114**](https://github.com/ljharb/qs/issues/114) default allowDots to false\n- [**#100**](https://github.com/ljharb/qs/issues/100) include dist to npm\n\n## [**4.0.0**](https://github.com/ljharb/qs/issues?milestone=26&state=closed)\n- [**#98**](https://github.com/ljharb/qs/issues/98) make returning plain objects and allowing prototype overwriting properties optional\n\n## [**3.1.0**](https://github.com/ljharb/qs/issues?milestone=24&state=closed)\n- [**#89**](https://github.com/ljharb/qs/issues/89) Add option to disable \"Transform dot notation to bracket notation\"\n\n## [**3.0.0**](https://github.com/ljharb/qs/issues?milestone=23&state=closed)\n- [**#80**](https://github.com/ljharb/qs/issues/80) qs.parse silently drops properties\n- [**#77**](https://github.com/ljharb/qs/issues/77) Perf boost\n- [**#60**](https://github.com/ljharb/qs/issues/60) Add explicit option to disable array parsing\n- [**#74**](https://github.com/ljharb/qs/issues/74) Bad parse when turning array into object\n- [**#81**](https://github.com/ljharb/qs/issues/81) Add a `filter` option\n- [**#68**](https://github.com/ljharb/qs/issues/68) Fixed issue with recursion and passing strings into objects.\n- [**#66**](https://github.com/ljharb/qs/issues/66) Add mixed array and object dot notation support Closes: #47\n- [**#76**](https://github.com/ljharb/qs/issues/76) RFC 3986\n- [**#85**](https://github.com/ljharb/qs/issues/85) No equal sign\n- [**#84**](https://github.com/ljharb/qs/issues/84) update license attribute\n\n## [**2.4.1**](https://github.com/ljharb/qs/issues?milestone=20&state=closed)\n- [**#73**](https://github.com/ljharb/qs/issues/73) Property 'hasOwnProperty' of object #<Object> is not a function\n\n## [**2.4.0**](https://github.com/ljharb/qs/issues?milestone=19&state=closed)\n- [**#70**](https://github.com/ljharb/qs/issues/70) Add arrayFormat option\n\n## [**2.3.3**](https://github.com/ljharb/qs/issues?milestone=18&state=closed)\n- [**#59**](https://github.com/ljharb/qs/issues/59) make sure array indexes are >= 0, closes #57\n- [**#58**](https://github.com/ljharb/qs/issues/58) make qs usable for browser loader\n\n## [**2.3.2**](https://github.com/ljharb/qs/issues?milestone=17&state=closed)\n- [**#55**](https://github.com/ljharb/qs/issues/55) allow merging a string into an object\n\n## [**2.3.1**](https://github.com/ljharb/qs/issues?milestone=16&state=closed)\n- [**#52**](https://github.com/ljharb/qs/issues/52) Return \"undefined\" and \"false\" instead of throwing \"TypeError\".\n\n## [**2.3.0**](https://github.com/ljharb/qs/issues?milestone=15&state=closed)\n- [**#50**](https://github.com/ljharb/qs/issues/50) add option to omit array indices, closes #46\n\n## [**2.2.5**](https://github.com/ljharb/qs/issues?milestone=14&state=closed)\n- [**#39**](https://github.com/ljharb/qs/issues/39) Is there an alternative to Buffer.isBuffer?\n- [**#49**](https://github.com/ljharb/qs/issues/49) refactor utils.merge, fixes #45\n- [**#41**](https://github.com/ljharb/qs/issues/41) avoid browserifying Buffer, for #39\n\n## [**2.2.4**](https://github.com/ljharb/qs/issues?milestone=13&state=closed)\n- [**#38**](https://github.com/ljharb/qs/issues/38) how to handle object keys beginning with a number\n\n## [**2.2.3**](https://github.com/ljharb/qs/issues?milestone=12&state=closed)\n- [**#37**](https://github.com/ljharb/qs/issues/37) parser discards first empty value in array\n- [**#36**](https://github.com/ljharb/qs/issues/36) Update to lab 4.x\n\n## [**2.2.2**](https://github.com/ljharb/qs/issues?milestone=11&state=closed)\n- [**#33**](https://github.com/ljharb/qs/issues/33) Error when plain object in a value\n- [**#34**](https://github.com/ljharb/qs/issues/34) use Object.prototype.hasOwnProperty.call instead of obj.hasOwnProperty\n- [**#24**](https://github.com/ljharb/qs/issues/24) Changelog? Semver?\n\n## [**2.2.1**](https://github.com/ljharb/qs/issues?milestone=10&state=closed)\n- [**#32**](https://github.com/ljharb/qs/issues/32) account for circular references properly, closes #31\n- [**#31**](https://github.com/ljharb/qs/issues/31) qs.parse stackoverflow on circular objects\n\n## [**2.2.0**](https://github.com/ljharb/qs/issues?milestone=9&state=closed)\n- [**#26**](https://github.com/ljharb/qs/issues/26) Don't use Buffer global if it's not present\n- [**#30**](https://github.com/ljharb/qs/issues/30) Bug when merging non-object values into arrays\n- [**#29**](https://github.com/ljharb/qs/issues/29) Don't call Utils.clone at the top of Utils.merge\n- [**#23**](https://github.com/ljharb/qs/issues/23) Ability to not limit parameters?\n\n## [**2.1.0**](https://github.com/ljharb/qs/issues?milestone=8&state=closed)\n- [**#22**](https://github.com/ljharb/qs/issues/22) Enable using a RegExp as delimiter\n\n## [**2.0.0**](https://github.com/ljharb/qs/issues?milestone=7&state=closed)\n- [**#18**](https://github.com/ljharb/qs/issues/18) Why is there arrayLimit?\n- [**#20**](https://github.com/ljharb/qs/issues/20) Configurable parametersLimit\n- [**#21**](https://github.com/ljharb/qs/issues/21) make all limits optional, for #18, for #20\n\n## [**1.2.2**](https://github.com/ljharb/qs/issues?milestone=6&state=closed)\n- [**#19**](https://github.com/ljharb/qs/issues/19) Don't overwrite null values\n\n## [**1.2.1**](https://github.com/ljharb/qs/issues?milestone=5&state=closed)\n- [**#16**](https://github.com/ljharb/qs/issues/16) ignore non-string delimiters\n- [**#15**](https://github.com/ljharb/qs/issues/15) Close code block\n\n## [**1.2.0**](https://github.com/ljharb/qs/issues?milestone=4&state=closed)\n- [**#12**](https://github.com/ljharb/qs/issues/12) Add optional delim argument\n- [**#13**](https://github.com/ljharb/qs/issues/13) fix #11: flattened keys in array are now correctly parsed\n\n## [**1.1.0**](https://github.com/ljharb/qs/issues?milestone=3&state=closed)\n- [**#7**](https://github.com/ljharb/qs/issues/7) Empty values of a POST array disappear after being submitted\n- [**#9**](https://github.com/ljharb/qs/issues/9) Should not omit equals signs (=) when value is null\n- [**#6**](https://github.com/ljharb/qs/issues/6) Minor grammar fix in README\n\n## [**1.0.2**](https://github.com/ljharb/qs/issues?milestone=2&state=closed)\n- [**#5**](https://github.com/ljharb/qs/issues/5) array holes incorrectly copied into object on large index\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.5625,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2014, Nathan LaFreniere and other [contributors](https://github.com/ljharb/qs/graphs/contributors)\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 25.2802734375,
          "content": "<p align=\"center\">\n    <img alt=\"qs\" src=\"./logos/banner_default.png\" width=\"800\" />\n</p>\n\n# qs <sup>[![Version Badge][npm-version-svg]][package-url]</sup>\n\n[![github actions][actions-image]][actions-url]\n[![coverage][codecov-image]][codecov-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/9058/badge)](https://bestpractices.coreinfrastructure.org/projects/9058)\n\n[![npm badge][npm-badge-png]][package-url]\n\nA querystring parsing and stringifying library with some added security.\n\nLead Maintainer: [Jordan Harband](https://github.com/ljharb)\n\nThe **qs** module was originally created and maintained by [TJ Holowaychuk](https://github.com/visionmedia/node-querystring).\n\n## Usage\n\n```javascript\nvar qs = require('qs');\nvar assert = require('assert');\n\nvar obj = qs.parse('a=c');\nassert.deepEqual(obj, { a: 'c' });\n\nvar str = qs.stringify(obj);\nassert.equal(str, 'a=c');\n```\n\n### Parsing Objects\n\n[](#preventEval)\n```javascript\nqs.parse(string, [options]);\n```\n\n**qs** allows you to create nested objects within your query strings, by surrounding the name of sub-keys with square brackets `[]`.\nFor example, the string `'foo[bar]=baz'` converts to:\n\n```javascript\nassert.deepEqual(qs.parse('foo[bar]=baz'), {\n    foo: {\n        bar: 'baz'\n    }\n});\n```\n\nWhen using the `plainObjects` option the parsed value is returned as a null object, created via `{ __proto__: null }` and as such you should be aware that prototype methods will not exist on it and a user may set those names to whatever value they like:\n\n```javascript\nvar nullObject = qs.parse('a[hasOwnProperty]=b', { plainObjects: true });\nassert.deepEqual(nullObject, { a: { hasOwnProperty: 'b' } });\n```\n\nBy default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use `plainObjects` as mentioned above, or set `allowPrototypes` to `true` which will allow user input to overwrite those properties.\n*WARNING* It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten.\nAlways be careful with this option.\n\n```javascript\nvar protoObject = qs.parse('a[hasOwnProperty]=b', { allowPrototypes: true });\nassert.deepEqual(protoObject, { a: { hasOwnProperty: 'b' } });\n```\n\nURI encoded strings work too:\n\n```javascript\nassert.deepEqual(qs.parse('a%5Bb%5D=c'), {\n    a: { b: 'c' }\n});\n```\n\nYou can also nest your objects, like `'foo[bar][baz]=foobarbaz'`:\n\n```javascript\nassert.deepEqual(qs.parse('foo[bar][baz]=foobarbaz'), {\n    foo: {\n        bar: {\n            baz: 'foobarbaz'\n        }\n    }\n});\n```\n\nBy default, when nesting objects **qs** will only parse up to 5 children deep.\nThis means if you attempt to parse a string like `'a[b][c][d][e][f][g][h][i]=j'` your resulting object will be:\n\n```javascript\nvar expected = {\n    a: {\n        b: {\n            c: {\n                d: {\n                    e: {\n                        f: {\n                            '[g][h][i]': 'j'\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\nvar string = 'a[b][c][d][e][f][g][h][i]=j';\nassert.deepEqual(qs.parse(string), expected);\n```\n\nThis depth can be overridden by passing a `depth` option to `qs.parse(string, [options])`:\n\n```javascript\nvar deep = qs.parse('a[b][c][d][e][f][g][h][i]=j', { depth: 1 });\nassert.deepEqual(deep, { a: { b: { '[c][d][e][f][g][h][i]': 'j' } } });\n```\n\nYou can configure **qs** to throw an error when parsing nested input beyond this depth using the `strictDepth` option (defaulted to false):\n\n```javascript\ntry {\n    qs.parse('a[b][c][d][e][f][g][h][i]=j', { depth: 1, strictDepth: true });\n} catch (err) {\n    assert(err instanceof RangeError);\n    assert.strictEqual(err.message, 'Input depth exceeded depth option of 1 and strictDepth is true');\n}\n```\n\nThe depth limit helps mitigate abuse when **qs** is used to parse user input, and it is recommended to keep it a reasonably small number. The strictDepth option adds a layer of protection by throwing an error when the limit is exceeded, allowing you to catch and handle such cases.\n\nFor similar reasons, by default **qs** will only parse up to 1000 parameters. This can be overridden by passing a `parameterLimit` option:\n\n```javascript\nvar limited = qs.parse('a=b&c=d', { parameterLimit: 1 });\nassert.deepEqual(limited, { a: 'b' });\n```\n\nIf you want an error to be thrown whenever the a limit is exceeded (eg, `parameterLimit`, `arrayLimit`), set the `throwOnLimitExceeded` option to `true`. This option will generate a descriptive error if the query string exceeds a configured limit.\n```javascript\ntry {\n    qs.parse('a=1&b=2&c=3&d=4', { parameterLimit: 3, throwOnLimitExceeded: true });\n} catch (err) {\n    assert(err instanceof Error);\n    assert.strictEqual(err.message, 'Parameter limit exceeded. Only 3 parameters allowed.');\n}\n```\n\nWhen `throwOnLimitExceeded` is set to `false` (default), **qs** will parse up to the specified `parameterLimit` and ignore the rest without throwing an error.\n\nTo bypass the leading question mark, use `ignoreQueryPrefix`:\n\n```javascript\nvar prefixed = qs.parse('?a=b&c=d', { ignoreQueryPrefix: true });\nassert.deepEqual(prefixed, { a: 'b', c: 'd' });\n```\n\nAn optional delimiter can also be passed:\n\n```javascript\nvar delimited = qs.parse('a=b;c=d', { delimiter: ';' });\nassert.deepEqual(delimited, { a: 'b', c: 'd' });\n```\n\nDelimiters can be a regular expression too:\n\n```javascript\nvar regexed = qs.parse('a=b;c=d,e=f', { delimiter: /[;,]/ });\nassert.deepEqual(regexed, { a: 'b', c: 'd', e: 'f' });\n```\n\nOption `allowDots` can be used to enable dot notation:\n\n```javascript\nvar withDots = qs.parse('a.b=c', { allowDots: true });\nassert.deepEqual(withDots, { a: { b: 'c' } });\n```\n\nOption `decodeDotInKeys` can be used to decode dots in keys\nNote: it implies `allowDots`, so `parse` will error if you set `decodeDotInKeys` to `true`, and `allowDots` to `false`.\n\n```javascript\nvar withDots = qs.parse('name%252Eobj.first=John&name%252Eobj.last=Doe', { decodeDotInKeys: true });\nassert.deepEqual(withDots, { 'name.obj': { first: 'John', last: 'Doe' }});\n```\n\nOption `allowEmptyArrays` can be used to allowing empty array values in object\n```javascript\nvar withEmptyArrays = qs.parse('foo[]&bar=baz', { allowEmptyArrays: true });\nassert.deepEqual(withEmptyArrays, { foo: [], bar: 'baz' });\n```\n\nOption `duplicates` can be used to change the behavior when duplicate keys are encountered\n```javascript\nassert.deepEqual(qs.parse('foo=bar&foo=baz'), { foo: ['bar', 'baz'] });\nassert.deepEqual(qs.parse('foo=bar&foo=baz', { duplicates: 'combine' }), { foo: ['bar', 'baz'] });\nassert.deepEqual(qs.parse('foo=bar&foo=baz', { duplicates: 'first' }), { foo: 'bar' });\nassert.deepEqual(qs.parse('foo=bar&foo=baz', { duplicates: 'last' }), { foo: 'baz' });\n```\n\nIf you have to deal with legacy browsers or services, there's also support for decoding percent-encoded octets as iso-8859-1:\n\n```javascript\nvar oldCharset = qs.parse('a=%A7', { charset: 'iso-8859-1' });\nassert.deepEqual(oldCharset, { a: '§' });\n```\n\nSome services add an initial `utf8=✓` value to forms so that old Internet Explorer versions are more likely to submit the form as utf-8.\nAdditionally, the server can check the value against wrong encodings of the checkmark character and detect that a query string or `application/x-www-form-urlencoded` body was *not* sent as utf-8, eg. if the form had an `accept-charset` parameter or the containing page had a different character set.\n\n**qs** supports this mechanism via the `charsetSentinel` option.\nIf specified, the `utf8` parameter will be omitted from the returned object.\nIt will be used to switch to `iso-8859-1`/`utf-8` mode depending on how the checkmark is encoded.\n\n**Important**: When you specify both the `charset` option and the `charsetSentinel` option, the `charset` will be overridden when the request contains a `utf8` parameter from which the actual charset can be deduced.\nIn that sense the `charset` will behave as the default charset rather than the authoritative charset.\n\n```javascript\nvar detectedAsUtf8 = qs.parse('utf8=%E2%9C%93&a=%C3%B8', {\n    charset: 'iso-8859-1',\n    charsetSentinel: true\n});\nassert.deepEqual(detectedAsUtf8, { a: 'ø' });\n\n// Browsers encode the checkmark as &#10003; when submitting as iso-8859-1:\nvar detectedAsIso8859_1 = qs.parse('utf8=%26%2310003%3B&a=%F8', {\n    charset: 'utf-8',\n    charsetSentinel: true\n});\nassert.deepEqual(detectedAsIso8859_1, { a: 'ø' });\n```\n\nIf you want to decode the `&#...;` syntax to the actual character, you can specify the `interpretNumericEntities` option as well:\n\n```javascript\nvar detectedAsIso8859_1 = qs.parse('a=%26%239786%3B', {\n    charset: 'iso-8859-1',\n    interpretNumericEntities: true\n});\nassert.deepEqual(detectedAsIso8859_1, { a: '☺' });\n```\n\nIt also works when the charset has been detected in `charsetSentinel` mode.\n\n### Parsing Arrays\n\n**qs** can also parse arrays using a similar `[]` notation:\n\n```javascript\nvar withArray = qs.parse('a[]=b&a[]=c');\nassert.deepEqual(withArray, { a: ['b', 'c'] });\n```\n\nYou may specify an index as well:\n\n```javascript\nvar withIndexes = qs.parse('a[1]=c&a[0]=b');\nassert.deepEqual(withIndexes, { a: ['b', 'c'] });\n```\n\nNote that the only difference between an index in an array and a key in an object is that the value between the brackets must be a number to create an array.\nWhen creating arrays with specific indices, **qs** will compact a sparse array to only the existing values preserving their order:\n\n```javascript\nvar noSparse = qs.parse('a[1]=b&a[15]=c');\nassert.deepEqual(noSparse, { a: ['b', 'c'] });\n```\n\nYou may also use `allowSparse` option to parse sparse arrays:\n\n```javascript\nvar sparseArray = qs.parse('a[1]=2&a[3]=5', { allowSparse: true });\nassert.deepEqual(sparseArray, { a: [, '2', , '5'] });\n```\n\nNote that an empty string is also a value, and will be preserved:\n\n```javascript\nvar withEmptyString = qs.parse('a[]=&a[]=b');\nassert.deepEqual(withEmptyString, { a: ['', 'b'] });\n\nvar withIndexedEmptyString = qs.parse('a[0]=b&a[1]=&a[2]=c');\nassert.deepEqual(withIndexedEmptyString, { a: ['b', '', 'c'] });\n```\n\n**qs** will also limit specifying indices in an array to a maximum index of `20`.\nAny array members with an index of greater than `20` will instead be converted to an object with the index as the key.\nThis is needed to handle cases when someone sent, for example, `a[999999999]` and it will take significant time to iterate over this huge array.\n\n```javascript\nvar withMaxIndex = qs.parse('a[100]=b');\nassert.deepEqual(withMaxIndex, { a: { '100': 'b' } });\n```\n\nThis limit can be overridden by passing an `arrayLimit` option:\n\n```javascript\nvar withArrayLimit = qs.parse('a[1]=b', { arrayLimit: 0 });\nassert.deepEqual(withArrayLimit, { a: { '1': 'b' } });\n```\n\nIf you want to throw an error whenever the array limit is exceeded, set the `throwOnLimitExceeded` option to `true`. This option will generate a descriptive error if the query string exceeds a configured limit.\n```javascript\ntry {\n    qs.parse('a[1]=b', { arrayLimit: 0, throwOnLimitExceeded: true });\n} catch (err) {\n    assert(err instanceof Error);\n    assert.strictEqual(err.message, 'Array limit exceeded. Only 0 elements allowed in an array.');\n}\n```\n\nWhen `throwOnLimitExceeded` is set to `false` (default), **qs** will parse up to the specified `arrayLimit` and if the limit is exceeded, the array will instead be converted to an object with the index as the key\n\nTo disable array parsing entirely, set `parseArrays` to `false`.\n\n```javascript\nvar noParsingArrays = qs.parse('a[]=b', { parseArrays: false });\nassert.deepEqual(noParsingArrays, { a: { '0': 'b' } });\n```\n\nIf you mix notations, **qs** will merge the two items into an object:\n\n```javascript\nvar mixedNotation = qs.parse('a[0]=b&a[b]=c');\nassert.deepEqual(mixedNotation, { a: { '0': 'b', b: 'c' } });\n```\n\nYou can also create arrays of objects:\n\n```javascript\nvar arraysOfObjects = qs.parse('a[][b]=c');\nassert.deepEqual(arraysOfObjects, { a: [{ b: 'c' }] });\n```\n\nSome people use comma to join array, **qs** can parse it:\n```javascript\nvar arraysOfObjects = qs.parse('a=b,c', { comma: true })\nassert.deepEqual(arraysOfObjects, { a: ['b', 'c'] })\n```\n(_this cannot convert nested objects, such as `a={b:1},{c:d}`_)\n\n### Parsing primitive/scalar values (numbers, booleans, null, etc)\n\nBy default, all values are parsed as strings.\nThis behavior will not change and is explained in [issue #91](https://github.com/ljharb/qs/issues/91).\n\n```javascript\nvar primitiveValues = qs.parse('a=15&b=true&c=null');\nassert.deepEqual(primitiveValues, { a: '15', b: 'true', c: 'null' });\n```\n\nIf you wish to auto-convert values which look like numbers, booleans, and other values into their primitive counterparts, you can use the [query-types Express JS middleware](https://github.com/xpepermint/query-types) which will auto-convert all request query parameters.\n\n### Stringifying\n\n[](#preventEval)\n```javascript\nqs.stringify(object, [options]);\n```\n\nWhen stringifying, **qs** by default URI encodes output. Objects are stringified as you would expect:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b' }), 'a=b');\nassert.equal(qs.stringify({ a: { b: 'c' } }), 'a%5Bb%5D=c');\n```\n\nThis encoding can be disabled by setting the `encode` option to `false`:\n\n```javascript\nvar unencoded = qs.stringify({ a: { b: 'c' } }, { encode: false });\nassert.equal(unencoded, 'a[b]=c');\n```\n\nEncoding can be disabled for keys by setting the `encodeValuesOnly` option to `true`:\n```javascript\nvar encodedValues = qs.stringify(\n    { a: 'b', c: ['d', 'e=f'], f: [['g'], ['h']] },\n    { encodeValuesOnly: true }\n);\nassert.equal(encodedValues,'a=b&c[0]=d&c[1]=e%3Df&f[0][0]=g&f[1][0]=h');\n```\n\nThis encoding can also be replaced by a custom encoding method set as `encoder` option:\n\n```javascript\nvar encoded = qs.stringify({ a: { b: 'c' } }, { encoder: function (str) {\n    // Passed in values `a`, `b`, `c`\n    return // Return encoded string\n}})\n```\n\n_(Note: the `encoder` option does not apply if `encode` is `false`)_\n\nAnalogue to the `encoder` there is a `decoder` option for `parse` to override decoding of properties and values:\n\n```javascript\nvar decoded = qs.parse('x=z', { decoder: function (str) {\n    // Passed in values `x`, `z`\n    return // Return decoded string\n}})\n```\n\nYou can encode keys and values using different logic by using the type argument provided to the encoder:\n\n```javascript\nvar encoded = qs.stringify({ a: { b: 'c' } }, { encoder: function (str, defaultEncoder, charset, type) {\n    if (type === 'key') {\n        return // Encoded key\n    } else if (type === 'value') {\n        return // Encoded value\n    }\n}})\n```\n\nThe type argument is also provided to the decoder:\n\n```javascript\nvar decoded = qs.parse('x=z', { decoder: function (str, defaultDecoder, charset, type) {\n    if (type === 'key') {\n        return // Decoded key\n    } else if (type === 'value') {\n        return // Decoded value\n    }\n}})\n```\n\nExamples beyond this point will be shown as though the output is not URI encoded for clarity.\nPlease note that the return values in these cases *will* be URI encoded during real usage.\n\nWhen arrays are stringified, they follow the `arrayFormat` option, which defaults to `indices`:\n\n```javascript\nqs.stringify({ a: ['b', 'c', 'd'] });\n// 'a[0]=b&a[1]=c&a[2]=d'\n```\n\nYou may override this by setting the `indices` option to `false`, or to be more explicit, the `arrayFormat` option to `repeat`:\n\n```javascript\nqs.stringify({ a: ['b', 'c', 'd'] }, { indices: false });\n// 'a=b&a=c&a=d'\n```\n\nYou may use the `arrayFormat` option to specify the format of the output array:\n\n```javascript\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'indices' })\n// 'a[0]=b&a[1]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'brackets' })\n// 'a[]=b&a[]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'repeat' })\n// 'a=b&a=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'comma' })\n// 'a=b,c'\n```\n\nNote: when using `arrayFormat` set to `'comma'`, you can also pass the `commaRoundTrip` option set to `true` or `false`, to append `[]` on single-item arrays, so that they can round trip through a parse.\n\nWhen objects are stringified, by default they use bracket notation:\n\n```javascript\nqs.stringify({ a: { b: { c: 'd', e: 'f' } } });\n// 'a[b][c]=d&a[b][e]=f'\n```\n\nYou may override this to use dot notation by setting the `allowDots` option to `true`:\n\n```javascript\nqs.stringify({ a: { b: { c: 'd', e: 'f' } } }, { allowDots: true });\n// 'a.b.c=d&a.b.e=f'\n```\n\nYou may encode the dot notation in the keys of object with option `encodeDotInKeys` by setting it to `true`:\nNote: it implies `allowDots`, so `stringify` will error if you set `decodeDotInKeys` to `true`, and `allowDots` to `false`.\nCaveat: when `encodeValuesOnly` is `true` as well as `encodeDotInKeys`, only dots in keys and nothing else will be encoded.\n```javascript\nqs.stringify({ \"name.obj\": { \"first\": \"John\", \"last\": \"Doe\" } }, { allowDots: true, encodeDotInKeys: true })\n// 'name%252Eobj.first=John&name%252Eobj.last=Doe'\n```\n\nYou may allow empty array values by setting the `allowEmptyArrays` option to `true`:\n```javascript\nqs.stringify({ foo: [], bar: 'baz' }, { allowEmptyArrays: true });\n// 'foo[]&bar=baz'\n```\n\nEmpty strings and null values will omit the value, but the equals sign (=) remains in place:\n\n```javascript\nassert.equal(qs.stringify({ a: '' }), 'a=');\n```\n\nKey with no values (such as an empty object or array) will return nothing:\n\n```javascript\nassert.equal(qs.stringify({ a: [] }), '');\nassert.equal(qs.stringify({ a: {} }), '');\nassert.equal(qs.stringify({ a: [{}] }), '');\nassert.equal(qs.stringify({ a: { b: []} }), '');\nassert.equal(qs.stringify({ a: { b: {}} }), '');\n```\n\nProperties that are set to `undefined` will be omitted entirely:\n\n```javascript\nassert.equal(qs.stringify({ a: null, b: undefined }), 'a=');\n```\n\nThe query string may optionally be prepended with a question mark:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b', c: 'd' }, { addQueryPrefix: true }), '?a=b&c=d');\n```\n\nThe delimiter may be overridden with stringify as well:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b', c: 'd' }, { delimiter: ';' }), 'a=b;c=d');\n```\n\nIf you only want to override the serialization of `Date` objects, you can provide a `serializeDate` option:\n\n```javascript\nvar date = new Date(7);\nassert.equal(qs.stringify({ a: date }), 'a=1970-01-01T00:00:00.007Z'.replace(/:/g, '%3A'));\nassert.equal(\n    qs.stringify({ a: date }, { serializeDate: function (d) { return d.getTime(); } }),\n    'a=7'\n);\n```\n\nYou may use the `sort` option to affect the order of parameter keys:\n\n```javascript\nfunction alphabeticalSort(a, b) {\n    return a.localeCompare(b);\n}\nassert.equal(qs.stringify({ a: 'c', z: 'y', b : 'f' }, { sort: alphabeticalSort }), 'a=c&b=f&z=y');\n```\n\nFinally, you can use the `filter` option to restrict which keys will be included in the stringified output.\nIf you pass a function, it will be called for each key to obtain the replacement value.\nOtherwise, if you pass an array, it will be used to select properties and array indices for stringification:\n\n```javascript\nfunction filterFunc(prefix, value) {\n    if (prefix == 'b') {\n        // Return an `undefined` value to omit a property.\n        return;\n    }\n    if (prefix == 'e[f]') {\n        return value.getTime();\n    }\n    if (prefix == 'e[g][0]') {\n        return value * 2;\n    }\n    return value;\n}\nqs.stringify({ a: 'b', c: 'd', e: { f: new Date(123), g: [2] } }, { filter: filterFunc });\n// 'a=b&c=d&e[f]=123&e[g][0]=4'\nqs.stringify({ a: 'b', c: 'd', e: 'f' }, { filter: ['a', 'e'] });\n// 'a=b&e=f'\nqs.stringify({ a: ['b', 'c', 'd'], e: 'f' }, { filter: ['a', 0, 2] });\n// 'a[0]=b&a[2]=d'\n```\n\nYou could also use `filter` to inject custom serialization for user defined types.\nConsider you're working with some api that expects query strings of the format for ranges:\n\n```\nhttps://domain.com/endpoint?range=30...70\n```\n\nFor which you model as:\n\n```javascript\nclass Range {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\n```\n\nYou could _inject_ a custom serializer to handle values of this type:\n\n```javascript\nqs.stringify(\n    {\n        range: new Range(30, 70),\n    },\n    {\n        filter: (prefix, value) => {\n            if (value instanceof Range) {\n                return `${value.from}...${value.to}`;\n            }\n            // serialize the usual way\n            return value;\n        },\n    }\n);\n// range=30...70\n```\n\n### Handling of `null` values\n\nBy default, `null` values are treated like empty strings:\n\n```javascript\nvar withNull = qs.stringify({ a: null, b: '' });\nassert.equal(withNull, 'a=&b=');\n```\n\nParsing does not distinguish between parameters with and without equal signs.\nBoth are converted to empty strings.\n\n```javascript\nvar equalsInsensitive = qs.parse('a&b=');\nassert.deepEqual(equalsInsensitive, { a: '', b: '' });\n```\n\nTo distinguish between `null` values and empty strings use the `strictNullHandling` flag. In the result string the `null`\nvalues have no `=` sign:\n\n```javascript\nvar strictNull = qs.stringify({ a: null, b: '' }, { strictNullHandling: true });\nassert.equal(strictNull, 'a&b=');\n```\n\nTo parse values without `=` back to `null` use the `strictNullHandling` flag:\n\n```javascript\nvar parsedStrictNull = qs.parse('a&b=', { strictNullHandling: true });\nassert.deepEqual(parsedStrictNull, { a: null, b: '' });\n```\n\nTo completely skip rendering keys with `null` values, use the `skipNulls` flag:\n\n```javascript\nvar nullsSkipped = qs.stringify({ a: 'b', c: null}, { skipNulls: true });\nassert.equal(nullsSkipped, 'a=b');\n```\n\nIf you're communicating with legacy systems, you can switch to `iso-8859-1` using the `charset` option:\n\n```javascript\nvar iso = qs.stringify({ æ: 'æ' }, { charset: 'iso-8859-1' });\nassert.equal(iso, '%E6=%E6');\n```\n\nCharacters that don't exist in `iso-8859-1` will be converted to numeric entities, similar to what browsers do:\n\n```javascript\nvar numeric = qs.stringify({ a: '☺' }, { charset: 'iso-8859-1' });\nassert.equal(numeric, 'a=%26%239786%3B');\n```\n\nYou can use the `charsetSentinel` option to announce the character by including an `utf8=✓` parameter with the proper encoding if the checkmark, similar to what Ruby on Rails and others do when submitting forms.\n\n```javascript\nvar sentinel = qs.stringify({ a: '☺' }, { charsetSentinel: true });\nassert.equal(sentinel, 'utf8=%E2%9C%93&a=%E2%98%BA');\n\nvar isoSentinel = qs.stringify({ a: 'æ' }, { charsetSentinel: true, charset: 'iso-8859-1' });\nassert.equal(isoSentinel, 'utf8=%26%2310003%3B&a=%E6');\n```\n\n### Dealing with special character sets\n\nBy default the encoding and decoding of characters is done in `utf-8`, and `iso-8859-1` support is also built in via the `charset` parameter.\n\nIf you wish to encode querystrings to a different character set (i.e.\n[Shift JIS](https://en.wikipedia.org/wiki/Shift_JIS)) you can use the\n[`qs-iconv`](https://github.com/martinheidegger/qs-iconv) library:\n\n```javascript\nvar encoder = require('qs-iconv/encoder')('shift_jis');\nvar shiftJISEncoded = qs.stringify({ a: 'こんにちは！' }, { encoder: encoder });\nassert.equal(shiftJISEncoded, 'a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I');\n```\n\nThis also works for decoding of query strings:\n\n```javascript\nvar decoder = require('qs-iconv/decoder')('shift_jis');\nvar obj = qs.parse('a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I', { decoder: decoder });\nassert.deepEqual(obj, { a: 'こんにちは！' });\n```\n\n### RFC 3986 and RFC 1738 space encoding\n\nRFC3986 used as default option and encodes ' ' to *%20* which is backward compatible.\nIn the same time, output can be stringified as per RFC1738 with ' ' equal to '+'.\n\n```\nassert.equal(qs.stringify({ a: 'b c' }), 'a=b%20c');\nassert.equal(qs.stringify({ a: 'b c' }, { format : 'RFC3986' }), 'a=b%20c');\nassert.equal(qs.stringify({ a: 'b c' }, { format : 'RFC1738' }), 'a=b+c');\n```\n\n## Security\n\nPlease email [@ljharb](https://github.com/ljharb) or see https://tidelift.com/security if you have a potential security vulnerability to report.\n\n## qs for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of qs and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications.\nSave time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use.\n[Learn more.](https://tidelift.com/subscription/pkg/npm-qs?utm_source=npm-qs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n[package-url]: https://npmjs.org/package/qs\n[npm-version-svg]: https://versionbadg.es/ljharb/qs.svg\n[deps-svg]: https://david-dm.org/ljharb/qs.svg\n[deps-url]: https://david-dm.org/ljharb/qs\n[dev-deps-svg]: https://david-dm.org/ljharb/qs/dev-status.svg\n[dev-deps-url]: https://david-dm.org/ljharb/qs#info=devDependencies\n[npm-badge-png]: https://nodei.co/npm/qs.png?downloads=true&stars=true\n[license-image]: https://img.shields.io/npm/l/qs.svg\n[license-url]: LICENSE\n[downloads-image]: https://img.shields.io/npm/dm/qs.svg\n[downloads-url]: https://npm-stat.com/charts.html?package=qs\n[codecov-image]: https://codecov.io/gh/ljharb/qs/branch/main/graphs/badge.svg\n[codecov-url]: https://app.codecov.io/gh/ljharb/qs/\n[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/ljharb/qs\n[actions-url]: https://github.com/ljharb/qs/actions\n\n## Acknowledgements\n\nqs logo by [NUMI](https://github.com/numi-hq/open-design):\n\n[<img src=\"https://raw.githubusercontent.com/numi-hq/open-design/main/assets/numi-lockup.png\" alt=\"NUMI Logo\" style=\"width: 200px;\"/>](https://numi.tech/?ref=qs)\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.4697265625,
          "content": "{\n    \"name\": \"qs\",\n    \"main\": \"dist/qs.js\",\n    \"homepage\": \"https://github.com/hapijs/qs\",\n    \"authors\": [\n        \"Nathan LaFreniere <quitlahok@gmail.com>\"\n    ],\n    \"description\": \"A querystring parser that supports nesting and arrays, with a depth limit\",\n    \"keywords\": [\n        \"querystring\",\n        \"qs\"\n    ],\n    \"license\": \"BSD-3-Clause\",\n    \"ignore\": [\n        \"**/.*\",\n        \"node_modules\",\n        \"bower_components\",\n        \"test\",\n        \"tests\"\n    ]\n}\n"
        },
        {
          "name": "component.json",
          "type": "blob",
          "size": 0.37890625,
          "content": "{\n    \"name\": \"qs\",\n    \"repository\": \"ljharb/qs\",\n    \"description\": \"query-string parser / stringifier with nesting support\",\n    \"version\": \"6.13.1\",\n    \"keywords\": [\"querystring\", \"query\", \"parser\"],\n    \"main\": \"lib/index.js\",\n    \"scripts\": [\n        \"lib/index.js\",\n        \"lib/parse.js\",\n        \"lib/stringify.js\",\n        \"lib/utils.js\"\n    ],\n    \"license\": \"BSD-3-Clause\"\n}\n"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "logos",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 3.0634765625,
          "content": "{\n    \"name\": \"qs\",\n    \"description\": \"A querystring parser that supports nesting and arrays, with a depth limit\",\n    \"homepage\": \"https://github.com/ljharb/qs\",\n    \"version\": \"6.13.1\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/ljharb/qs.git\"\n    },\n    \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n    },\n    \"main\": \"lib/index.js\",\n    \"sideEffects\": false,\n    \"contributors\": [\n        {\n            \"name\": \"Jordan Harband\",\n            \"email\": \"ljharb@gmail.com\",\n            \"url\": \"http://ljharb.codes\"\n        }\n    ],\n    \"keywords\": [\n        \"querystring\",\n        \"qs\",\n        \"query\",\n        \"url\",\n        \"parse\",\n        \"stringify\"\n    ],\n    \"engines\": {\n        \"node\": \">=0.6\"\n    },\n    \"dependencies\": {\n        \"side-channel\": \"^1.1.0\"\n    },\n    \"devDependencies\": {\n        \"@browserify/envify\": \"^6.0.0\",\n        \"@browserify/uglifyify\": \"^6.0.0\",\n        \"@ljharb/eslint-config\": \"^21.1.1\",\n        \"browserify\": \"^16.5.2\",\n        \"bundle-collapser\": \"^1.4.0\",\n        \"common-shakeify\": \"~1.0.0\",\n        \"eclint\": \"^2.8.1\",\n        \"es-value-fixtures\": \"^1.5.0\",\n        \"eslint\": \"=8.8.0\",\n        \"evalmd\": \"^0.0.19\",\n        \"for-each\": \"^0.3.3\",\n        \"glob\": \"=10.3.7\",\n        \"has-bigints\": \"^1.0.2\",\n        \"has-override-mistake\": \"^1.0.1\",\n        \"has-property-descriptors\": \"^1.0.2\",\n        \"has-proto\": \"^1.2.0\",\n        \"has-symbols\": \"^1.1.0\",\n        \"iconv-lite\": \"^0.5.1\",\n        \"in-publish\": \"^2.0.1\",\n        \"jackspeak\": \"=2.1.1\",\n        \"mkdirp\": \"^0.5.5\",\n        \"mock-property\": \"^1.1.0\",\n        \"module-deps\": \"^6.2.3\",\n        \"npmignore\": \"^0.3.1\",\n        \"nyc\": \"^10.3.2\",\n        \"object-inspect\": \"^1.13.3\",\n        \"qs-iconv\": \"^1.0.4\",\n        \"safe-publish-latest\": \"^2.0.0\",\n        \"safer-buffer\": \"^2.1.2\",\n        \"tape\": \"^5.9.0\",\n        \"unassertify\": \"^3.0.1\"\n    },\n    \"scripts\": {\n        \"prepack\": \"npmignore --auto --commentLines=autogenerated && npm run dist\",\n        \"prepublishOnly\": \"safe-publish-latest\",\n        \"prepublish\": \"not-in-publish || npm run prepublishOnly\",\n        \"pretest\": \"npm run --silent readme && npm run --silent lint\",\n        \"test\": \"npm run tests-only\",\n        \"tests-only\": \"nyc tape 'test/**/*.js'\",\n        \"posttest\": \"npx npm@'>=10.2' audit --production\",\n        \"readme\": \"evalmd README.md\",\n        \"postlint\": \"eclint check $(git ls-files | xargs find 2> /dev/null | grep -vE 'node_modules|\\\\.git' | grep -v dist/)\",\n        \"lint\": \"eslint --ext=js,mjs .\",\n        \"dist\": \"mkdirp dist && browserify --standalone Qs -g unassertify -g @browserify/envify -g [@browserify/uglifyify --mangle.keep_fnames --compress.keep_fnames --format.indent_level=1 --compress.arrows=false --compress.passes=4 --compress.typeofs=false] -p common-shakeify -p bundle-collapser/plugin lib/index.js > dist/qs.js\"\n    },\n    \"license\": \"BSD-3-Clause\",\n    \"publishConfig\": {\n        \"ignore\": [\n            \"!dist/*\",\n            \"bower.json\",\n            \"component.json\",\n            \".github/workflows\",\n            \"logos\",\n            \"tea.yaml\"\n        ]\n    }\n}\n"
        },
        {
          "name": "tea.yaml",
          "type": "blob",
          "size": 0.1318359375,
          "content": "# https://tea.xyz/what-is-this-file\n---\nversion: 1.0.0\ncodeOwners:\n  - '0xcaA2C51DEC43C2ce6174F8a3cBD258BFeECFd5B6' # ljharb\nquorum: 1\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}