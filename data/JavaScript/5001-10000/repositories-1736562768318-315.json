{
  "metadata": {
    "timestamp": 1736562768318,
    "page": 315,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sindresorhus/execa",
      "stars": 6958,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1708984375,
          "content": "root = true\n\n[*]\nindent_style = tab\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.04296875,
          "content": "node_modules\nyarn.lock\n.nyc_output\ncoverage\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.d.ts",
          "type": "blob",
          "size": 1.0654296875,
          "content": "export type {\n\tStdinOption,\n\tStdinSyncOption,\n\tStdoutStderrOption,\n\tStdoutStderrSyncOption,\n} from './types/stdio/type.js';\nexport type {Options, SyncOptions} from './types/arguments/options.js';\nexport type {TemplateExpression} from './types/methods/template.js';\n\nexport type {Result, SyncResult} from './types/return/result.js';\nexport type {ResultPromise, Subprocess} from './types/subprocess/subprocess.js';\nexport {ExecaError, ExecaSyncError} from './types/return/final-error.js';\n\nexport {execa, type ExecaMethod} from './types/methods/main-async.js';\nexport {execaSync, type ExecaSyncMethod} from './types/methods/main-sync.js';\nexport {execaCommand, execaCommandSync, parseCommandString} from './types/methods/command.js';\nexport {$, type ExecaScriptMethod, type ExecaScriptSyncMethod} from './types/methods/script.js';\nexport {execaNode, type ExecaNodeMethod} from './types/methods/node.js';\n\nexport {\n\tsendMessage,\n\tgetOneMessage,\n\tgetEachMessage,\n\tgetCancelSignal,\n\ttype Message,\n} from './types/ipc.js';\nexport type {VerboseObject, SyncVerboseObject} from './types/verbose.js';\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.9560546875,
          "content": "import {createExeca} from './lib/methods/create.js';\nimport {mapCommandAsync, mapCommandSync} from './lib/methods/command.js';\nimport {mapNode} from './lib/methods/node.js';\nimport {mapScriptAsync, setScriptSync, deepScriptOptions} from './lib/methods/script.js';\nimport {getIpcExport} from './lib/ipc/methods.js';\n\nexport {parseCommandString} from './lib/methods/command.js';\nexport {ExecaError, ExecaSyncError} from './lib/return/final-error.js';\n\nexport const execa = createExeca(() => ({}));\nexport const execaSync = createExeca(() => ({isSync: true}));\nexport const execaCommand = createExeca(mapCommandAsync);\nexport const execaCommandSync = createExeca(mapCommandSync);\nexport const execaNode = createExeca(mapNode);\nexport const $ = createExeca(mapScriptAsync, {}, deepScriptOptions, setScriptSync);\n\nconst {\n\tsendMessage,\n\tgetOneMessage,\n\tgetEachMessage,\n\tgetCancelSignal,\n} = getIpcExport();\nexport {\n\tsendMessage,\n\tgetOneMessage,\n\tgetEachMessage,\n\tgetCancelSignal,\n};\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.0908203125,
          "content": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.955078125,
          "content": "{\n\t\"name\": \"execa\",\n\t\"version\": \"9.5.2\",\n\t\"description\": \"Process execution for humans\",\n\t\"license\": \"MIT\",\n\t\"repository\": \"sindresorhus/execa\",\n\t\"funding\": \"https://github.com/sindresorhus/execa?sponsor=1\",\n\t\"author\": {\n\t\t\"name\": \"Sindre Sorhus\",\n\t\t\"email\": \"sindresorhus@gmail.com\",\n\t\t\"url\": \"https://sindresorhus.com\"\n\t},\n\t\"type\": \"module\",\n\t\"exports\": {\n\t\t\"types\": \"./index.d.ts\",\n\t\t\"default\": \"./index.js\"\n\t},\n\t\"sideEffects\": false,\n\t\"engines\": {\n\t\t\"node\": \"^18.19.0 || >=20.5.0\"\n\t},\n\t\"scripts\": {\n\t\t\"test\": \"npm run lint && npm run unit && npm run type\",\n\t\t\"lint\": \"xo\",\n\t\t\"unit\": \"c8 --merge-async ava\",\n\t\t\"type\": \"tsd && tsc && npx --yes tsd@0.29.0 && npx --yes --package typescript@5.1 tsc\"\n\t},\n\t\"files\": [\n\t\t\"index.js\",\n\t\t\"index.d.ts\",\n\t\t\"lib/**/*.js\",\n\t\t\"types/**/*.ts\"\n\t],\n\t\"keywords\": [\n\t\t\"exec\",\n\t\t\"child\",\n\t\t\"process\",\n\t\t\"subprocess\",\n\t\t\"execute\",\n\t\t\"fork\",\n\t\t\"execfile\",\n\t\t\"spawn\",\n\t\t\"file\",\n\t\t\"shell\",\n\t\t\"bin\",\n\t\t\"binary\",\n\t\t\"binaries\",\n\t\t\"npm\",\n\t\t\"path\",\n\t\t\"local\",\n\t\t\"zx\"\n\t],\n\t\"dependencies\": {\n\t\t\"@sindresorhus/merge-streams\": \"^4.0.0\",\n\t\t\"cross-spawn\": \"^7.0.3\",\n\t\t\"figures\": \"^6.1.0\",\n\t\t\"get-stream\": \"^9.0.0\",\n\t\t\"human-signals\": \"^8.0.0\",\n\t\t\"is-plain-obj\": \"^4.1.0\",\n\t\t\"is-stream\": \"^4.0.1\",\n\t\t\"npm-run-path\": \"^6.0.0\",\n\t\t\"pretty-ms\": \"^9.0.0\",\n\t\t\"signal-exit\": \"^4.1.0\",\n\t\t\"strip-final-newline\": \"^4.0.0\",\n\t\t\"yoctocolors\": \"^2.0.0\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@types/node\": \"^22.1.0\",\n\t\t\"ava\": \"^6.0.1\",\n\t\t\"c8\": \"^10.1.2\",\n\t\t\"get-node\": \"^15.0.0\",\n\t\t\"is-in-ci\": \"^1.0.0\",\n\t\t\"is-running\": \"^2.1.0\",\n\t\t\"path-exists\": \"^5.0.0\",\n\t\t\"path-key\": \"^4.0.0\",\n\t\t\"tempfile\": \"^5.0.0\",\n\t\t\"tsd\": \"^0.31.0\",\n\t\t\"typescript\": \"^5.4.5\",\n\t\t\"which\": \"^5.0.0\",\n\t\t\"xo\": \"^0.59.3\"\n\t},\n\t\"c8\": {\n\t\t\"reporter\": [\n\t\t\t\"text\",\n\t\t\t\"lcov\"\n\t\t],\n\t\t\"exclude\": [\n\t\t\t\"**/fixtures/**\",\n\t\t\t\"**/test.js\",\n\t\t\t\"**/test/**\"\n\t\t]\n\t},\n\t\"ava\": {\n\t\t\"workerThreads\": false,\n\t\t\"concurrency\": 1,\n\t\t\"timeout\": \"240s\"\n\t},\n\t\"xo\": {\n\t\t\"rules\": {\n\t\t\t\"unicorn/no-empty-file\": \"off\",\n\t\t\t\"@typescript-eslint/ban-types\": \"off\"\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 11.83984375,
          "content": "<picture>\n\t<source media=\"(prefers-color-scheme: dark)\" srcset=\"media/logo_dark.svg\">\n\t<img alt=\"execa logo\" src=\"media/logo.svg\" width=\"400\">\n</picture>\n<br>\n\n[![Coverage Status](https://codecov.io/gh/sindresorhus/execa/branch/main/graph/badge.svg)](https://codecov.io/gh/sindresorhus/execa)\n\n> Process execution for humans\n\n<br>\n\n---\n\n<div align=\"center\">\n\t<p>\n\t\t<p>\n\t\t\t<sup>\n\t\t\t\t<a href=\"https://github.com/sponsors/sindresorhus\">Sindre's open source work is supported by the community</a>\n\t\t\t</sup>\n\t\t</p>\n\t\t<sup>Special thanks to:</sup>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://transloadit.com?utm_source=sindresorhus&utm_medium=referral&utm_campaign=sponsorship&utm_content=execa\">\n\t\t\t<picture>\n\t\t\t\t<source width=\"360\" media=\"(prefers-color-scheme: dark)\" srcset=\"https://sindresorhus.com/assets/thanks/transloadit-logo-dark.svg\">\n\t\t\t\t<source width=\"360\" media=\"(prefers-color-scheme: light)\" srcset=\"https://sindresorhus.com/assets/thanks/transloadit-logo.svg\">\n\t\t\t\t<img width=\"360\" src=\"https://sindresorhus.com/assets/thanks/transloadit-logo.svg\" alt=\"Transloadit logo\">\n\t\t\t</picture>\n\t\t</a>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://coderabbit.ai?utm_source=sindre&utm_medium=execa\">\n\t\t\t<img width=\"300\" src=\"https://sindresorhus.com/assets/thanks/coderabbit-logo.png\" alt=\"CodeRabbit logo\">\n\t\t</a>\n\t\t<br>\n\t\t<br>\n\t</p>\n</div>\n\n---\n\n<br>\n\nExeca runs commands in your script, application or library. Unlike shells, it is [optimized](docs/bash.md) for programmatic usage. Built on top of the [`child_process`](https://nodejs.org/api/child_process.html) core module.\n\n---\n\nOne of the maintainers [@ehmicky](https://github.com/ehmicky) is looking for a remote full-time position. Specialized in Node.js back-ends and CLIs, he led Netlify [Build](https://www.netlify.com/platform/core/build/), [Plugins](https://www.netlify.com/integrations/) and Configuration for 2.5 years. Feel free to contact him on [his website](https://www.mickael-hebert.com) or on [LinkedIn](https://www.linkedin.com/in/mickaelhebert/)!\n\n---\n\n## Features\n\n- [Simple syntax](#simple-syntax): promises and [template strings](docs/execution.md#template-string-syntax), like [`zx`](docs/bash.md).\n- [Script](#script) interface.\n- [No escaping](docs/escaping.md) nor quoting needed. No risk of shell injection.\n- Execute [locally installed binaries](#local-binaries) without `npx`.\n- Improved [Windows support](docs/windows.md): [shebangs](docs/windows.md#shebang), [`PATHEXT`](https://ss64.com/nt/path.html#pathext), [graceful termination](#graceful-termination), [and more](https://github.com/moxystudio/node-cross-spawn?tab=readme-ov-file#why).\n- [Detailed errors](#detailed-error), [verbose mode](#verbose-mode) and [custom logging](#custom-logging), for [debugging](docs/debugging.md).\n- [Pipe multiple subprocesses](#pipe-multiple-subprocesses) better than in shells: retrieve [intermediate results](docs/pipe.md#result), use multiple [sources](docs/pipe.md#multiple-sources-1-destination)/[destinations](docs/pipe.md#1-source-multiple-destinations), [unpipe](docs/pipe.md#unpipe).\n- [Split](#split-into-text-lines) the output into text lines, or [iterate](#iterate-over-text-lines) progressively over them.\n- Strip [unnecessary newlines](docs/lines.md#newlines).\n- Pass any [input](docs/input.md) to the subprocess: [files](#file-input), [strings](#simple-input), [`Uint8Array`s](docs/binary.md#binary-input), [iterables](docs/streams.md#iterables-as-input), [objects](docs/transform.md#object-mode) and almost any [other type](#any-input-type).\n- Return [almost any type](#any-output-type) from the subprocess, or redirect it to [files](#file-output).\n- Get [interleaved output](#interleaved-output) from `stdout` and `stderr` similar to what is printed on the terminal.\n- Retrieve the output [programmatically and print it](#programmatic--terminal-output) on the console at the same time.\n- [Transform or filter](#transformfilter-output) the input and output with [simple functions](docs/transform.md).\n- Pass [Node.js streams](docs/streams.md#nodejs-streams) or [web streams](#web-streams) to subprocesses, or [convert](#convert-to-duplex-stream) subprocesses to [a stream](docs/streams.md#converting-a-subprocess-to-a-stream).\n- [Exchange messages](#exchange-messages) with the subprocess.\n- Ensure subprocesses exit even when they [intercept termination signals](docs/termination.md#forceful-termination), or when the current process [ends abruptly](docs/termination.md#current-process-exit).\n\n## Install\n\n```sh\nnpm install execa\n```\n\n## Documentation\n\nExecution:\n- ▶️ [Basic execution](docs/execution.md)\n- 💬 [Escaping/quoting](docs/escaping.md)\n- 💻 [Shell](docs/shell.md)\n- 📜 [Scripts](docs/scripts.md)\n- 🐢 [Node.js files](docs/node.md)\n- 🌐 [Environment](docs/environment.md)\n- ❌ [Errors](docs/errors.md)\n- 🏁 [Termination](docs/termination.md)\n\nInput/output:\n- 🎹 [Input](docs/input.md)\n- 📢 [Output](docs/output.md)\n- 📃 [Text lines](docs/lines.md)\n- 🤖 [Binary data](docs/binary.md)\n- 🧙 [Transforms](docs/transform.md)\n\nAdvanced usage:\n- 🔀 [Piping multiple subprocesses](docs/pipe.md)\n- ⏳️ [Streams](docs/streams.md)\n- 📞 [Inter-process communication](docs/ipc.md)\n- 🐛 [Debugging](docs/debugging.md)\n- 📎 [Windows](docs/windows.md)\n- 🔍 [Difference with Bash and zx](docs/bash.md)\n- 🐭 [Small packages](docs/small.md)\n- 🤓 [TypeScript](docs/typescript.md)\n- 📔 [API reference](docs/api.md)\n\n## Examples\n\n### Execution\n\n#### Simple syntax\n\n```js\nimport {execa} from 'execa';\n\nconst {stdout} = await execa`npm run build`;\n// Print command's output\nconsole.log(stdout);\n```\n\n#### Script\n\n```js\nimport {$} from 'execa';\n\nconst {stdout: name} = await $`cat package.json`.pipe`grep name`;\nconsole.log(name);\n\nconst branch = await $`git branch --show-current`;\nawait $`dep deploy --branch=${branch}`;\n\nawait Promise.all([\n\t$`sleep 1`,\n\t$`sleep 2`,\n\t$`sleep 3`,\n]);\n\nconst directoryName = 'foo bar';\nawait $`mkdir /tmp/${directoryName}`;\n```\n\n#### Local binaries\n\n```sh\n$ npm install -D eslint\n```\n\n```js\nawait execa({preferLocal: true})`eslint`;\n```\n\n#### Pipe multiple subprocesses\n\n```js\nconst {stdout, pipedFrom} = await execa`npm run build`\n\t.pipe`sort`\n\t.pipe`head -n 2`;\n\n// Output of `npm run build | sort | head -n 2`\nconsole.log(stdout);\n// Output of `npm run build | sort`\nconsole.log(pipedFrom[0].stdout);\n// Output of `npm run build`\nconsole.log(pipedFrom[0].pipedFrom[0].stdout);\n```\n\n### Input/output\n\n#### Interleaved output\n\n```js\nconst {all} = await execa({all: true})`npm run build`;\n// stdout + stderr, interleaved\nconsole.log(all);\n```\n\n#### Programmatic + terminal output\n\n```js\nconst {stdout} = await execa({stdout: ['pipe', 'inherit']})`npm run build`;\n// stdout is also printed to the terminal\nconsole.log(stdout);\n```\n\n#### Simple input\n\n```js\nconst getInputString = () => { /* ... */ };\nconst {stdout} = await execa({input: getInputString()})`sort`;\nconsole.log(stdout);\n```\n\n#### File input\n\n```js\n// Similar to: npm run build < input.txt\nawait execa({stdin: {file: 'input.txt'}})`npm run build`;\n```\n\n#### File output\n\n```js\n// Similar to: npm run build > output.txt\nawait execa({stdout: {file: 'output.txt'}})`npm run build`;\n```\n\n#### Split into text lines\n\n```js\nconst {stdout} = await execa({lines: true})`npm run build`;\n// Print first 10 lines\nconsole.log(stdout.slice(0, 10).join('\\n'));\n```\n\n### Streaming\n\n#### Iterate over text lines\n\n```js\nfor await (const line of execa`npm run build`) {\n\tif (line.includes('WARN')) {\n\t\tconsole.warn(line);\n\t}\n}\n```\n\n#### Transform/filter output\n\n```js\nlet count = 0;\n\n// Filter out secret lines, then prepend the line number\nconst transform = function * (line) {\n\tif (!line.includes('secret')) {\n\t\tyield `[${count++}] ${line}`;\n\t}\n};\n\nawait execa({stdout: transform})`npm run build`;\n```\n\n#### Web streams\n\n```js\nconst response = await fetch('https://example.com');\nawait execa({stdin: response.body})`sort`;\n```\n\n#### Convert to Duplex stream\n\n```js\nimport {execa} from 'execa';\nimport {pipeline} from 'node:stream/promises';\nimport {createReadStream, createWriteStream} from 'node:fs';\n\nawait pipeline(\n\tcreateReadStream('./input.txt'),\n\texeca`node ./transform.js`.duplex(),\n\tcreateWriteStream('./output.txt'),\n);\n```\n\n### IPC\n\n#### Exchange messages\n\n```js\n// parent.js\nimport {execaNode} from 'execa';\n\nconst subprocess = execaNode`child.js`;\nawait subprocess.sendMessage('Hello from parent');\nconst message = await subprocess.getOneMessage();\nconsole.log(message); // 'Hello from child'\n```\n\n```js\n// child.js\nimport {getOneMessage, sendMessage} from 'execa';\n\nconst message = await getOneMessage(); // 'Hello from parent'\nconst newMessage = message.replace('parent', 'child'); // 'Hello from child'\nawait sendMessage(newMessage);\n```\n\n#### Any input type\n\n```js\n// main.js\nimport {execaNode} from 'execa';\n\nconst ipcInput = [\n\t{task: 'lint', ignore: /test\\.js/},\n\t{task: 'copy', files: new Set(['main.js', 'index.js']),\n}];\nawait execaNode({ipcInput})`build.js`;\n```\n\n```js\n// build.js\nimport {getOneMessage} from 'execa';\n\nconst ipcInput = await getOneMessage();\n```\n\n#### Any output type\n\n```js\n// main.js\nimport {execaNode} from 'execa';\n\nconst {ipcOutput} = await execaNode`build.js`;\nconsole.log(ipcOutput[0]); // {kind: 'start', timestamp: date}\nconsole.log(ipcOutput[1]); // {kind: 'stop', timestamp: date}\n```\n\n```js\n// build.js\nimport {sendMessage} from 'execa';\n\nconst runBuild = () => { /* ... */ };\n\nawait sendMessage({kind: 'start', timestamp: new Date()});\nawait runBuild();\nawait sendMessage({kind: 'stop', timestamp: new Date()});\n```\n\n#### Graceful termination\n\n```js\n// main.js\nimport {execaNode} from 'execa';\n\nconst controller = new AbortController();\nsetTimeout(() => {\n\tcontroller.abort();\n}, 5000);\n\nawait execaNode({\n\tcancelSignal: controller.signal,\n\tgracefulCancel: true,\n})`build.js`;\n```\n\n```js\n// build.js\nimport {getCancelSignal} from 'execa';\n\nconst cancelSignal = await getCancelSignal();\nconst url = 'https://example.com/build/info';\nconst response = await fetch(url, {signal: cancelSignal});\n```\n\n### Debugging\n\n#### Detailed error\n\n```js\nimport {execa, ExecaError} from 'execa';\n\ntry {\n\tawait execa`unknown command`;\n} catch (error) {\n\tif (error instanceof ExecaError) {\n\t\tconsole.log(error);\n\t}\n\t/*\n\tExecaError: Command failed with ENOENT: unknown command\n\tspawn unknown ENOENT\n\t\t\tat ...\n\t\t\tat ... {\n\t\tshortMessage: 'Command failed with ENOENT: unknown command\\nspawn unknown ENOENT',\n\t\toriginalMessage: 'spawn unknown ENOENT',\n\t\tcommand: 'unknown command',\n\t\tescapedCommand: 'unknown command',\n\t\tcwd: '/path/to/cwd',\n\t\tdurationMs: 28.217566,\n\t\tfailed: true,\n\t\ttimedOut: false,\n\t\tisCanceled: false,\n\t\tisTerminated: false,\n\t\tisMaxBuffer: false,\n\t\tcode: 'ENOENT',\n\t\tstdout: '',\n\t\tstderr: '',\n\t\tstdio: [undefined, '', ''],\n\t\tpipedFrom: []\n\t\t[cause]: Error: spawn unknown ENOENT\n\t\t\t\tat ...\n\t\t\t\tat ... {\n\t\t\terrno: -2,\n\t\t\tcode: 'ENOENT',\n\t\t\tsyscall: 'spawn unknown',\n\t\t\tpath: 'unknown',\n\t\t\tspawnargs: [ 'command' ]\n\t\t}\n\t}\n\t*/\n}\n```\n\n#### Verbose mode\n\n```js\nawait execa`npm run build`;\nawait execa`npm run test`;\n```\n\n<img alt=\"execa verbose output\" src=\"media/verbose.png\" width=\"603\">\n\n#### Custom logging\n\n```js\nimport {execa as execa_} from 'execa';\nimport {createLogger, transports} from 'winston';\n\n// Log to a file using Winston\nconst transport = new transports.File({filename: 'logs.txt'});\nconst logger = createLogger({transports: [transport]});\nconst LOG_LEVELS = {\n\tcommand: 'info',\n\toutput: 'verbose',\n\tipc: 'verbose',\n\terror: 'error',\n\tduration: 'info',\n};\n\nconst execa = execa_({\n\tverbose(verboseLine, {message, ...verboseObject}) {\n\t\tconst level = LOG_LEVELS[verboseObject.type];\n\t\tlogger[level](message, verboseObject);\n\t},\n});\n\nawait execa`npm run build`;\nawait execa`npm run test`;\n```\n\n## Related\n\n- [nano-spawn](https://github.com/sindresorhus/nano-spawn) - Like Execa but [smaller](docs/small.md)\n- [gulp-execa](https://github.com/ehmicky/gulp-execa) - Gulp plugin for Execa\n- [nvexeca](https://github.com/ehmicky/nvexeca) - Run Execa using any Node.js version\n\n## Maintainers\n\n- [Sindre Sorhus](https://github.com/sindresorhus)\n- [@ehmicky](https://github.com/ehmicky)\n"
        },
        {
          "name": "test-d",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.1533203125,
          "content": "{\n\t\"compilerOptions\": {\n\t\t\"module\": \"nodenext\",\n\t\t\"moduleResolution\": \"nodenext\",\n\t\t\"target\": \"ES2022\",\n\t\t\"strict\": true\n\t},\n\t\"files\": [\n\t\t\"index.d.ts\"\n\t]\n}\n"
        },
        {
          "name": "types",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}