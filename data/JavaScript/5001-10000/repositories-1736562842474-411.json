{
  "metadata": {
    "timestamp": 1736562842474,
    "page": 411,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nodejs/undici",
      "stars": 6473,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".c8rc.json",
          "type": "blob",
          "size": 0.14453125,
          "content": "{\n  \"all\": true,\n  \"reporter\": [\n    \"lcov\",\n    \"text\",\n    \"html\",\n    \"text-summary\"\n  ],\n  \"include\": [\n    \"lib/**/*.js\",\n    \"index.js\"\n  ]\n}\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.169921875,
          "content": "# Ignore everything but the stuff following the `*` with the `!`\n# See https://docs.docker.com/engine/reference/builder/#dockerignore-file\n\n*\n!package.json\n!lib\n!deps\n!build\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1396484375,
          "content": "# https://editorconfig.org/\n\nroot = true\n\n[*]\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.2177734375,
          "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# TypeScript v1 declaration files\ntypings/\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n\n# next.js build output\n.next\n\n# lock files\npackage-lock.json\nyarn.lock\n\n# IDE files\n.idea\n.vscode\n\n*0x\n*clinic*\n\n# Fuzzing\ncorpus/\ncrash-*\nfuzz-results-*.json\n\n# Bundle output\nundici-fetch.js\n/test/imports/undici-import.js\n\n# .npmrc has platform specific value for windows\n.npmrc\n\n.tap\n\n# File generated by /test/request-timeout.js\ntest/request-timeout.10mb.bin\n"
        },
        {
          "name": ".husky",
          "type": "tree",
          "content": null
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.3037109375,
          "content": "*\n!lib/**/*\n!index.js\n!index-fetch.js\n\n# The wasm files are stored as base64 strings in the corresponding .js files\nlib/llhttp/llhttp_simd.wasm\nlib/llhttp/llhttp.wasm\n\n!types/**/*\n!index.d.ts\n!docs/docs/**/*\n!scripts/strip-comments.js\n\n# File generated by /test/request-timeout.js\ntest/request-timeout.10mb.bin\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.19140625,
          "content": "# Code of Conduct\n\nUndici is committed to upholding the Node.js Code of Conduct.\n\nThe Node.js Code of Conduct document can be found at\nhttps://github.com/nodejs/admin/blob/main/CODE_OF_CONDUCT.md\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.763671875,
          "content": "# Contributing to Undici\n\n* [Guides](#guides)\n  * [Update `llhttp`](#update-llhttp)\n  * [Lint](#lint)\n  * [Test](#test)\n  * [Coverage](#coverage)\n  * [Releases](#releases)\n  * [Update `WPTs`](#update-wpts)\n  * [Building for externally shared node builtins](#external-builds)\n  *  [Benchmarks](#benchmarks)\n  *  [Documentation](#documentation)\n* [Developer's Certificate of Origin 1.1](#developers-certificate-of-origin)\n  * [Moderation Policy](#moderation-policy)\n\n<a id=\"guides\"></a>\n## Guides\n\nThis is a collection of guides on how to run and update `undici`, and how to run different parts of the project.\n\n<a id=\"update-llhttp\"></a>\n### Update `llhttp`\n\nThe HTTP parser used by `undici` is a WebAssembly build of [`llhttp`](https://github.com/nodejs/llhttp).\n\nWhile the project itself provides a way to compile targeting WebAssembly, at the moment we embed the sources\ndirectly and compile the module in `undici`.\n\nThe `deps/llhttp/include` folder contains the C header files, while the `deps/llhttp/src` folder contains\nthe C source files needed to compile the module.\n\nThe `lib/llhttp` folder contains the `.js` transpiled assets required to implement a parser.\n\nThe following are the steps required to perform an update.\n\n#### Clone the [llhttp](https://github.com/nodejs/llhttp) project\n\n```bash\ngit clone git@github.com:nodejs/llhttp.git\n\ncd llhttp\n```\n\n#### Checkout a `llhttp` release\n\n```bash\ngit checkout <tag>\n```\n\n#### Install the `llhttp` dependencies\n\n```bash\nnpm i\n```\n\n#### Run the wasm build script\n\n> This requires [docker](https://www.docker.com/) installed on your machine.\n\n```bash\nnpm run build-wasm\n```\n\n#### Copy the sources to `undici`\n\n```bash\ncp build/wasm/*.js <your-path-to-undici>/lib/llhttp/\n\ncp build/wasm/*.js.map <your-path-to-undici>/lib/llhttp/\n\ncp build/wasm/*.d.ts <your-path-to-undici>/lib/llhttp/\n\ncp src/native/api.c src/native/http.c build/c/llhttp.c <your-path-to-undici>/deps/llhttp/src/\n\ncp src/native/api.h build/llhttp.h <your-path-to-undici>/deps/llhttp/include/\n```\n\n#### Build the WebAssembly module in `undici`\n\n> This requires [docker](https://www.docker.com/) installed on your machine.\n\n```bash\ncd <your-path-to-undici>\n\nnpm run build:wasm\n```\n\n#### Commit the contents of lib/llhttp\n\nCreate a commit which includes all of the updated files in lib/llhttp.\n\n<a id=\"update-wpts\"></a>\n### Update `WPTs`\n\n`undici` runs a subset of the [`web-platform-tests`](https://github.com/web-platform-tests/wpt).\n\n### Requirements:\n- [Node core utils](https://github.com/nodejs/node-core-utils) setup with credentials.\n\nTo update every test, run the following commands. Typically you would only need to update the tests in a specific directory.\n\n```bash\ngit node wpt resources\ngit node wpt interfaces\ngit node wpt common\ngit node wpt fetch\ngit node wpt xhr\ngit node wpt websockets\ngit node wpt mimesniff\ngit node wpt storage\ngit node wpt service-workers\ngit node wpt eventsource\n```\n\n#### Run the tests\n\nRun the tests to ensure that any new failures are marked as such.\n\nYou can mark tests as failing in their corresponding [status](./test/wpt/status) file.\n\n```bash\nnpm run test:wpt\n```\n\n<a id=\"lint\"></a>\n### Lint\n\n```bash\nnpm run lint\n```\n\n<a id=\"test\"></a>\n### Test\n\n```bash\nnpm run test\n```\n\n<a id=\"coverage\"></a>\n### Coverage\n\n```bash\nnpm run coverage\n```\n\n<a id=\"releases\"></a>\n### Issuing Releases\n\nRelease is automatic on commit to main which bumps the package.json version field.\nUse the \"Create release PR\" github action to generate a release PR.\n\n<a id=\"external-builds\"></a>\n### Building for externally shared node builtins\n\nIf you are packaging `undici` for a distro, this might help if you would like to use\nan unbundled version instead of bundling one in `libnode.so`.\n\nTo enable this, pass `EXTERNAL_PATH=/path/to/global/node_modules/undici` to `build/wasm.js`.\nPass this path with `loader.js` appended to `--shared-builtin-undici/undici-path` in Node.js's `configure.py`.\nIf building on a non-Alpine Linux distribution, you may need to also set the `WASM_CC`, `WASM_CFLAGS`, `WASM_LDFLAGS` and `WASM_LDLIBS` environment variables before running `build/wasm.js`.\nSimilarly, you can set the `WASM_OPT` environment variable to utilize your own `wasm-opt` optimizer.\n\n<a id=\"benchmarks\"></a>\n### Benchmarks\n\n```bash\ncd benchmarks && npm i && npm run bench\n```\n\nThe benchmarks will be available at `http://localhost:3042`.\n\n<a id=\"documentation\"></a>\n### Documentation\n\n```bash\ncd docs && npm i && npm run serve\n```\n\nThe documentation will be available at `http://localhost:3000`.\n\n<a id=\"developers-certificate-of-origin\"></a>\n## Developer's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n* (a) The contribution was created in whole or in part by me and I\n  have the right to submit it under the open source license\n  indicated in the file; or\n\n* (b) The contribution is based upon previous work that, to the best\n  of my knowledge, is covered under an appropriate open source\n  license and I have the right under that license to submit that\n  work with modifications, whether created in whole or in part\n  by me, under the same open source license (unless I am\n  permitted to submit under a different license), as indicated\n  in the file; or\n\n* (c) The contribution was provided directly to me by some other\n  person who certified (a), (b) or (c) and I have not modified\n  it.\n\n* (d) I understand and agree that this project and the contribution\n  are public and that a record of the contribution (including all\n  personal information I submit with it, including my sign-off) is\n  maintained indefinitely and may be redistributed consistent with\n  this project or the open source license(s) involved.\n\n<a id=\"moderation-policy\"></a>\n### Moderation Policy\n\nThe [Node.js Moderation Policy] applies to this project.\n\n[Node.js Moderation Policy]: https://github.com/nodejs/admin/blob/main/Moderation-Policy.md\n"
        },
        {
          "name": "GOVERNANCE.md",
          "type": "blob",
          "size": 5.4140625,
          "content": "### Undici Working Group\n\nThe Node.js Undici project is governed by a Working Group (WG)\nthat is responsible for high-level guidance of the project.\n\nThe WG has final authority over this project including:\n\n* Technical direction\n* Project governance and process (including this policy)\n* Contribution policy\n* GitHub repository hosting\n* Conduct guidelines\n* Maintaining the list of additional Collaborators\n\nFor the current list of WG members, see the project\n[README.md](./README.md#collaborators).\n\n### Collaborators\n\nThe undici GitHub repository is\nmaintained by the WG and additional Collaborators who are added by the\nWG on an ongoing basis.\n\nIndividuals making significant and valuable contributions are made\nCollaborators and given commit-access to the project. These\nindividuals are identified by the WG and their addition as\nCollaborators is discussed during the WG meeting.\n\n_Note:_ If you make a significant contribution and are not considered\nfor commit-access log an issue or contact a WG member directly and it\nwill be brought up in the next WG meeting.\n\nModifications of the contents of the undici repository are\nmade on\na collaborative basis. Anybody with a GitHub account may propose a\nmodification via pull request and it will be considered by the project\nCollaborators. All pull requests must be reviewed and accepted by a\nCollaborator with sufficient expertise who is able to take full\nresponsibility for the change. In the case of pull requests proposed\nby an existing Collaborator, an additional Collaborator is required\nfor sign-off. Consensus should be sought if additional Collaborators\nparticipate and there is disagreement around a particular\nmodification. See _Consensus Seeking Process_ below for further detail\non the consensus model used for governance.\n\nCollaborators may opt to elevate significant or controversial\nmodifications, or modifications that have not found consensus to the\nWG for discussion by assigning the ***WG-agenda*** tag to a pull\nrequest or issue. The WG should serve as the final arbiter where\nrequired.\n\nFor the current list of Collaborators, see the project\n[README.md](./README.md#collaborators). The list should be in\nalphabetical order.\n\n### WG Membership\n\nWG seats are not time-limited.  There is no fixed size of the WG.\nHowever, the expected target is between 6 and 12, to ensure adequate\ncoverage of important areas of expertise, balanced with the ability to\nmake decisions efficiently.\n\nThere is no specific set of requirements or qualifications for WG\nmembership beyond these rules.\n\nThe WG may add additional members to the WG by unanimous consensus.\n\nA WG member may be removed from the WG by voluntary resignation, or by\nunanimous consensus of all other WG members.\n\nChanges to WG membership should be posted in the agenda, and may be\nsuggested as any other agenda item (see \"WG Meetings\" below).\n\nIf an addition or removal is proposed during a meeting, and the full\nWG is not in attendance to participate, then the addition or removal\nis added to the agenda for the subsequent meeting.  This is to ensure\nthat all members are given the opportunity to participate in all\nmembership decisions.  If a WG member is unable to attend a meeting\nwhere a planned membership decision is being made, then their consent\nis assumed.\n\nNo more than 1/3 of the WG members may be affiliated with the same\nemployer.  If removal or resignation of a WG member, or a change of\nemployment by a WG member, creates a situation where more than 1/3 of\nthe WG membership shares an employer, then the situation must be\nimmediately remedied by the resignation or removal of one or more WG\nmembers affiliated with the over-represented employer(s).\n\n### WG Meetings\n\nThe WG meets occasionally on Zoom. A designated moderator\napproved by the WG runs the meeting. Each meeting should be\npublished to YouTube.\n\nItems are added to the WG agenda that are considered contentious or\nare modifications of governance, contribution policy, WG membership,\nor release process.\n\nThe intention of the agenda is not to approve or review all patches;\nthat should happen continuously on GitHub and be handled by the larger\ngroup of Collaborators.\n\nAny community member or contributor can ask that something be added to\nthe next meeting's agenda by logging a GitHub Issue. Any Collaborator,\nWG member or the moderator can add the item to the agenda by adding\nthe ***WG-agenda*** tag to the issue.\n\nPrior to each WG meeting the moderator will share the Agenda with\nmembers of the WG. WG members can add any items they like to the\nagenda at the beginning of each meeting. The moderator and the WG\ncannot veto or remove items.\n\nThe WG may invite persons or representatives from certain projects to\nparticipate in a non-voting capacity.\n\nThe moderator is responsible for summarizing the discussion of each\nagenda item and sends it as a pull request after the meeting.\n\n### Consensus Seeking Process\n\nThe WG follows a\n[Consensus\nSeeking](http://en.wikipedia.org/wiki/Consensus-seeking_decision-making)\ndecision-making model.\n\nWhen an agenda item has appeared to reach a consensus the moderator\nwill ask \"Does anyone object?\" as a final call for dissent from the\nconsensus.\n\nIf an agenda item cannot reach a consensus a WG member can call for\neither a closing vote or a vote to table the issue to the next\nmeeting. The call for a vote must be seconded by a majority of the WG\nor else the discussion will continue. Simple majority wins.\n\nNote that changes to WG membership require a majority consensus.  See\n\"WG Membership\" above.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.064453125,
          "content": "MIT License\n\nCopyright (c) Matteo Collina and Undici contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 1.537109375,
          "content": "# Maintainers\n\nThis document details any and all processes relevant to project maintainers. Maintainers should feel empowered to contribute back to this document with any process changes they feel improve the overall experience for themselves and other maintainers.\n\n## Labels\n\nMaintainers are encouraged to use the extensive and detailed list of labels for easier repo management.\n\n* Generally, all issues should be labelled. The most general labels are `bug`, `enhancement`, and `Status: help-wanted`.\n* Issues specific to a certain aspect of the project should be labeled using one of the specificity labels listed below. For example, a bug in the `Client` class should have the `Client` and `bug` label assigned.\n  * Specificity labels:\n    * `Agent`\n    * `Client`\n    * `Docs`\n    * `Performance`\n    * `Pool`\n    * `Tests`\n    * `Types`\n* Any `question` or `usage help` issues should be converted into Q&A Discussions\n* `Status:` labels should be added to all open issues indicating their relative development status.\n  * Status labels:\n    * `Status: blocked`\n    * `Status: help-wanted`\n    * `Status: in-progress`\n    * `Status: wontfix`\n* Issues and/or pull requests with an agreed upon semver status can be assigned the appropriate `semver-` label.\n  * Semver labels:\n    * `semver-major`\n    * `semver-minor`\n    * `semver-patch`\n* Issues with a low-barrier of entry should be assigned the `good first issue` label.\n* Do not use the `invalid` label, instead use `bug` or `Status: wontfix`.\n* Duplicate issues should initially be assigned the `duplicate` label.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.3125,
          "content": "# undici\n\n[![Node CI](https://github.com/nodejs/undici/actions/workflows/nodejs.yml/badge.svg)](https://github.com/nodejs/undici/actions/workflows/nodejs.yml) [![neostandard javascript style](https://img.shields.io/badge/neo-standard-7fffff?style=flat\\&labelColor=ff80ff)](https://github.com/neostandard/neostandard) [![npm version](https://badge.fury.io/js/undici.svg)](https://badge.fury.io/js/undici) [![codecov](https://codecov.io/gh/nodejs/undici/branch/main/graph/badge.svg?token=yZL6LtXkOA)](https://codecov.io/gh/nodejs/undici)\n\nAn HTTP/1.1 client, written from scratch for Node.js.\n\n> Undici means eleven in Italian. 1.1 -> 11 -> Eleven -> Undici.\nIt is also a Stranger Things reference.\n\n## How to get involved\n\nHave a question about using Undici? Open a [Q&A Discussion](https://github.com/nodejs/undici/discussions/new) or join our official OpenJS [Slack](https://openjs-foundation.slack.com/archives/C01QF9Q31QD) channel.\n\nLooking to contribute? Start by reading the [contributing guide](./CONTRIBUTING.md)\n\n## Install\n\n```\nnpm i undici\n```\n\n## Benchmarks\n\nThe benchmark is a simple getting data [example](https://github.com/nodejs/undici/blob/main/benchmarks/benchmark.js) using a\n50 TCP connections with a pipelining depth of 10 running on Node 22.11.0.\n\n```\n┌────────────────────────┬─────────┬────────────────────┬────────────┬─────────────────────────┐\n│  Tests                 │ Samples │ Result             │ Tolerance  │ Difference with slowest │\n├────────────────────────┼─────────┼────────────────────┼────────────┼─────────────────────────┤\n│  'axios'               │ 15      │ '5708.26 req/sec'  │ '± 2.91 %' │ '-'                     │\n│  'http - no keepalive' │ 10      │ '5809.80 req/sec'  │ '± 2.30 %' │ '+ 1.78 %'              │\n│  'request'             │ 30      │ '5828.80 req/sec'  │ '± 2.91 %' │ '+ 2.11 %'              │\n│  'undici - fetch'      │ 40      │ '5903.78 req/sec'  │ '± 2.87 %' │ '+ 3.43 %'              │\n│  'node-fetch'          │ 10      │ '5945.40 req/sec'  │ '± 2.13 %' │ '+ 4.15 %'              │\n│  'got'                 │ 35      │ '6511.45 req/sec'  │ '± 2.84 %' │ '+ 14.07 %'             │\n│  'http - keepalive'    │ 65      │ '9193.24 req/sec'  │ '± 2.92 %' │ '+ 61.05 %'             │\n│  'superagent'          │ 35      │ '9339.43 req/sec'  │ '± 2.95 %' │ '+ 63.61 %'             │\n│  'undici - pipeline'   │ 50      │ '13364.62 req/sec' │ '± 2.93 %' │ '+ 134.13 %'            │\n│  'undici - stream'     │ 95      │ '18245.36 req/sec' │ '± 2.99 %' │ '+ 219.63 %'            │\n│  'undici - request'    │ 50      │ '18340.17 req/sec' │ '± 2.84 %' │ '+ 221.29 %'            │\n│  'undici - dispatch'   │ 40      │ '22234.42 req/sec' │ '± 2.94 %' │ '+ 289.51 %'            │\n└────────────────────────┴─────────┴────────────────────┴────────────┴─────────────────────────┘\n```\n\n## Quick Start\n\n```js\nimport { request } from 'undici'\n\nconst {\n  statusCode,\n  headers,\n  trailers,\n  body\n} = await request('http://localhost:3000/foo')\n\nconsole.log('response received', statusCode)\nconsole.log('headers', headers)\n\nfor await (const data of body) { console.log('data', data) }\n\nconsole.log('trailers', trailers)\n```\n\n## Body Mixins\n\nThe `body` mixins are the most common way to format the request/response body. Mixins include:\n\n- [`.arrayBuffer()`](https://fetch.spec.whatwg.org/#dom-body-arraybuffer)\n- [`.blob()`](https://fetch.spec.whatwg.org/#dom-body-blob)\n- [`.bytes()`](https://fetch.spec.whatwg.org/#dom-body-bytes)\n- [`.json()`](https://fetch.spec.whatwg.org/#dom-body-json)\n- [`.text()`](https://fetch.spec.whatwg.org/#dom-body-text)\n\n> [!NOTE]\n> The body returned from `undici.request` does not implement `.formData()`.\n\nExample usage:\n\n```js\nimport { request } from 'undici'\n\nconst {\n  statusCode,\n  headers,\n  trailers,\n  body\n} = await request('http://localhost:3000/foo')\n\nconsole.log('response received', statusCode)\nconsole.log('headers', headers)\nconsole.log('data', await body.json())\nconsole.log('trailers', trailers)\n```\n\n_Note: Once a mixin has been called then the body cannot be reused, thus calling additional mixins on `.body`, e.g. `.body.json(); .body.text()` will result in an error `TypeError: unusable` being thrown and returned through the `Promise` rejection._\n\nShould you need to access the `body` in plain-text after using a mixin, the best practice is to use the `.text()` mixin first and then manually parse the text to the desired format.\n\nFor more information about their behavior, please reference the body mixin from the [Fetch Standard](https://fetch.spec.whatwg.org/#body-mixin).\n\n## Common API Methods\n\nThis section documents our most commonly used API methods. Additional APIs are documented in their own files within the [docs](./docs/) folder and are accessible via the navigation list on the left side of the docs site.\n\n### `undici.request([url, options]): Promise`\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`RequestOptions`](./docs/docs/api/Dispatcher.md#parameter-requestoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n  * **method** `String` - Default: `PUT` if `options.body`, otherwise `GET`\n\nReturns a promise with the result of the `Dispatcher.request` method.\n\nCalls `options.dispatcher.request(options)`.\n\nSee [Dispatcher.request](./docs/docs/api/Dispatcher.md#dispatcherrequestoptions-callback) for more details, and [request examples](./docs/examples/README.md) for examples.\n\n### `undici.stream([url, options, ]factory): Promise`\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`StreamOptions`](./docs/docs/api/Dispatcher.md#parameter-streamoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n  * **method** `String` - Default: `PUT` if `options.body`, otherwise `GET`\n* **factory** `Dispatcher.stream.factory`\n\nReturns a promise with the result of the `Dispatcher.stream` method.\n\nCalls `options.dispatcher.stream(options, factory)`.\n\nSee [Dispatcher.stream](./docs/docs/api/Dispatcher.md#dispatcherstreamoptions-factory-callback) for more details.\n\n### `undici.pipeline([url, options, ]handler): Duplex`\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`PipelineOptions`](./docs/docs/api/Dispatcher.md#parameter-pipelineoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n  * **method** `String` - Default: `PUT` if `options.body`, otherwise `GET`\n* **handler** `Dispatcher.pipeline.handler`\n\nReturns: `stream.Duplex`\n\nCalls `options.dispatch.pipeline(options, handler)`.\n\nSee [Dispatcher.pipeline](./docs/docs/api/Dispatcher.md#dispatcherpipelineoptions-handler) for more details.\n\n### `undici.connect([url, options]): Promise`\n\nStarts two-way communications with the requested resource using [HTTP CONNECT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT).\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`ConnectOptions`](./docs/docs/api/Dispatcher.md#parameter-connectoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n* **callback** `(err: Error | null, data: ConnectData | null) => void` (optional)\n\nReturns a promise with the result of the `Dispatcher.connect` method.\n\nCalls `options.dispatch.connect(options)`.\n\nSee [Dispatcher.connect](./docs/docs/api/Dispatcher.md#dispatcherconnectoptions-callback) for more details.\n\n### `undici.fetch(input[, init]): Promise`\n\nImplements [fetch](https://fetch.spec.whatwg.org/#fetch-method).\n\n* https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n* https://fetch.spec.whatwg.org/#fetch-method\n\nBasic usage example:\n\n```js\nimport { fetch } from 'undici'\n\n\nconst res = await fetch('https://example.com')\nconst json = await res.json()\nconsole.log(json)\n```\n\nYou can pass an optional dispatcher to `fetch` as:\n\n```js\nimport { fetch, Agent } from 'undici'\n\nconst res = await fetch('https://example.com', {\n  // Mocks are also supported\n  dispatcher: new Agent({\n    keepAliveTimeout: 10,\n    keepAliveMaxTimeout: 10\n  })\n})\nconst json = await res.json()\nconsole.log(json)\n```\n\n#### `request.body`\n\nA body can be of the following types:\n\n- ArrayBuffer\n- ArrayBufferView\n- AsyncIterables\n- Blob\n- Iterables\n- String\n- URLSearchParams\n- FormData\n\nIn this implementation of fetch, ```request.body``` now accepts ```Async Iterables```. It is not present in the [Fetch Standard](https://fetch.spec.whatwg.org).\n\n```js\nimport { fetch } from 'undici'\n\nconst data = {\n  async *[Symbol.asyncIterator]() {\n    yield 'hello'\n    yield 'world'\n  },\n}\n\nawait fetch('https://example.com', { body: data, method: 'POST', duplex: 'half' })\n```\n\n[FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) besides text data and buffers can also utilize streams via [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) objects:\n\n```js\nimport { openAsBlob } from 'node:fs'\n\nconst file = await openAsBlob('./big.csv')\nconst body = new FormData()\nbody.set('file', file, 'big.csv')\n\nawait fetch('http://example.com', { method: 'POST', body })\n```\n\n#### `request.duplex`\n\n- `'half'`\n\nIn this implementation of fetch, `request.duplex` must be set if `request.body` is `ReadableStream` or `Async Iterables`, however, even though the value must be set to `'half'`, it is actually a _full_ duplex. For more detail refer to the [Fetch Standard](https://fetch.spec.whatwg.org/#dom-requestinit-duplex).\n\n#### `response.body`\n\nNodejs has two kinds of streams: [web streams](https://nodejs.org/api/webstreams.html), which follow the API of the WHATWG web standard found in browsers, and an older Node-specific [streams API](https://nodejs.org/api/stream.html). `response.body` returns a readable web stream. If you would prefer to work with a Node stream you can convert a web stream using `.fromWeb()`.\n\n```js\nimport { fetch } from 'undici'\nimport { Readable } from 'node:stream'\n\nconst response = await fetch('https://example.com')\nconst readableWebStream = response.body\nconst readableNodeStream = Readable.fromWeb(readableWebStream)\n```\n\n#### Specification Compliance\n\nThis section documents parts of the [Fetch Standard](https://fetch.spec.whatwg.org) that Undici does\nnot support or does not fully implement.\n\n##### Garbage Collection\n\n* https://fetch.spec.whatwg.org/#garbage-collection\n\nThe [Fetch Standard](https://fetch.spec.whatwg.org) allows users to skip consuming the response body by relying on\n[garbage collection](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management#garbage_collection) to release connection resources. Undici does not do the same. Therefore, it is important to always either consume or cancel the response body.\n\nGarbage collection in Node is less aggressive and deterministic\n(due to the lack of clear idle periods that browsers have through the rendering refresh rate)\nwhich means that leaving the release of connection resources to the garbage collector can lead\nto excessive connection usage, reduced performance (due to less connection re-use), and even\nstalls or deadlocks when running out of connections.\n\n```js\n// Do\nconst { body, headers } = await fetch(url);\nfor await (const chunk of body) {\n  // force consumption of body\n}\n\n// Do not\nconst { headers } = await fetch(url);\n```\n\nThe same applies for `request` too:\n```js\n// Do\nconst { body, headers } = await request(url);\nawait res.body.dump(); // force consumption of body\n\n// Do not\nconst { headers } = await request(url);\n```\n\nHowever, if you want to get only headers, it might be better to use `HEAD` request method. Usage of this method will obviate the need for consumption or cancelling of the response body. See [MDN - HTTP - HTTP request methods - HEAD](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD) for more details.\n\n```js\nconst headers = await fetch(url, { method: 'HEAD' })\n  .then(res => res.headers)\n```\n\n##### Forbidden and Safelisted Header Names\n\n* https://fetch.spec.whatwg.org/#cors-safelisted-response-header-name\n* https://fetch.spec.whatwg.org/#forbidden-header-name\n* https://fetch.spec.whatwg.org/#forbidden-response-header-name\n* https://github.com/wintercg/fetch/issues/6\n\nThe [Fetch Standard](https://fetch.spec.whatwg.org) requires implementations to exclude certain headers from requests and responses. In browser environments, some headers are forbidden so the user agent remains in full control over them. In Undici, these constraints are removed to give more control to the user.\n\n### `undici.upgrade([url, options]): Promise`\n\nUpgrade to a different protocol. See [MDN - HTTP - Protocol upgrade mechanism](https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism) for more details.\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`UpgradeOptions`](./docs/docs/api/Dispatcher.md#parameter-upgradeoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n* **callback** `(error: Error | null, data: UpgradeData) => void` (optional)\n\nReturns a promise with the result of the `Dispatcher.upgrade` method.\n\nCalls `options.dispatcher.upgrade(options)`.\n\nSee [Dispatcher.upgrade](./docs/docs/api/Dispatcher.md#dispatcherupgradeoptions-callback) for more details.\n\n### `undici.setGlobalDispatcher(dispatcher)`\n\n* dispatcher `Dispatcher`\n\nSets the global dispatcher used by Common API Methods.\n\n### `undici.getGlobalDispatcher()`\n\nGets the global dispatcher used by Common API Methods.\n\nReturns: `Dispatcher`\n\n### `undici.setGlobalOrigin(origin)`\n\n* origin `string | URL | undefined`\n\nSets the global origin used in `fetch`.\n\nIf `undefined` is passed, the global origin will be reset. This will cause `Response.redirect`, `new Request()`, and `fetch` to throw an error when a relative path is passed.\n\n```js\nsetGlobalOrigin('http://localhost:3000')\n\nconst response = await fetch('/api/ping')\n\nconsole.log(response.url) // http://localhost:3000/api/ping\n```\n\n### `undici.getGlobalOrigin()`\n\nGets the global origin used in `fetch`.\n\nReturns: `URL`\n\n### `UrlObject`\n\n* **port** `string | number` (optional)\n* **path** `string` (optional)\n* **pathname** `string` (optional)\n* **hostname** `string` (optional)\n* **origin** `string` (optional)\n* **protocol** `string` (optional)\n* **search** `string` (optional)\n\n## Specification Compliance\n\nThis section documents parts of the HTTP/1.1 specification that Undici does\nnot support or does not fully implement.\n\n### Expect\n\nUndici does not support the `Expect` request header field. The request\nbody is  always immediately sent and the `100 Continue` response will be\nignored.\n\nRefs: https://tools.ietf.org/html/rfc7231#section-5.1.1\n\n### Pipelining\n\nUndici will only use pipelining if configured with a `pipelining` factor\ngreater than `1`. Also it is important to pass `blocking: false` to the\nrequest options to properly pipeline requests.\n\nUndici always assumes that connections are persistent and will immediately\npipeline requests, without checking whether the connection is persistent.\nHence, automatic fallback to HTTP/1.0 or HTTP/1.1 without pipelining is\nnot supported.\n\nUndici will immediately pipeline when retrying requests after a failed\nconnection. However, Undici will not retry the first remaining requests in\nthe prior pipeline and instead error the corresponding callback/promise/stream.\n\nUndici will abort all running requests in the pipeline when any of them are\naborted.\n\n* Refs: https://tools.ietf.org/html/rfc2616#section-8.1.2.2\n* Refs: https://tools.ietf.org/html/rfc7230#section-6.3.2\n\n### Manual Redirect\n\nSince it is not possible to manually follow an HTTP redirect on the server-side,\nUndici returns the actual response instead of an `opaqueredirect` filtered one\nwhen invoked with a `manual` redirect. This aligns `fetch()` with the other\nimplementations in Deno and Cloudflare Workers.\n\nRefs: https://fetch.spec.whatwg.org/#atomic-http-redirect-handling\n\n## Workarounds\n\n### Network address family autoselection.\n\nIf you experience problem when connecting to a remote server that is resolved by your DNS servers to a IPv6 (AAAA record)\nfirst, there are chances that your local router or ISP might have problem connecting to IPv6 networks. In that case\nundici will throw an error with code `UND_ERR_CONNECT_TIMEOUT`.\n\nIf the target server resolves to both a IPv6 and IPv4 (A records) address and you are using a compatible Node version\n(18.3.0 and above), you can fix the problem by providing the `autoSelectFamily` option (support by both `undici.request`\nand `undici.Agent`) which will enable the family autoselection algorithm when establishing the connection.\n\n## Collaborators\n\n* [__Daniele Belardi__](https://github.com/dnlup), <https://www.npmjs.com/~dnlup>\n* [__Ethan Arrowood__](https://github.com/ethan-arrowood), <https://www.npmjs.com/~ethan_arrowood>\n* [__Matteo Collina__](https://github.com/mcollina), <https://www.npmjs.com/~matteo.collina>\n* [__Matthew Aitken__](https://github.com/KhafraDev), <https://www.npmjs.com/~khaf>\n* [__Robert Nagy__](https://github.com/ronag), <https://www.npmjs.com/~ronag>\n* [__Szymon Marczak__](https://github.com/szmarczak), <https://www.npmjs.com/~szmarczak>\n\n## Past Collaborators\n* [__Tomas Della Vedova__](https://github.com/delvedor), <https://www.npmjs.com/~delvedor>\n\n### Releasers\n\n* [__Ethan Arrowood__](https://github.com/ethan-arrowood), <https://www.npmjs.com/~ethan_arrowood>\n* [__Matteo Collina__](https://github.com/mcollina), <https://www.npmjs.com/~matteo.collina>\n* [__Robert Nagy__](https://github.com/ronag), <https://www.npmjs.com/~ronag>\n* [__Matthew Aitken__](https://github.com/KhafraDev), <https://www.npmjs.com/~khaf>\n\n## Long Term Support\n\nUndici aligns with the Node.js LTS schedule. The following table shows the supported versions:\n\n| Version | Node.js     | End of Life |\n|---------|-------------|-------------|\n| 5.x     | v18.x       | 2024-04-30  |\n| 6.x     | v20.x v22.x | 2026-04-30  |\n| 7.x     | v24.x       | 2027-04-30  |\n\n## License\n\nMIT\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.1484375,
          "content": "If you believe you have found a security issue in the software in this\nrepository, please consult https://github.com/nodejs/node/blob/HEAD/SECURITY.md.\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "eslint.config.js",
          "type": "blob",
          "size": 0.4931640625,
          "content": "'use strict'\n\nconst neo = require('neostandard')\n\nmodule.exports = [\n  ...neo({\n    ignores: [\n      'lib/llhttp',\n      'test/fixtures/wpt',\n      'test/fixtures/cache-tests',\n      'undici-fetch.js'\n    ],\n    noJsx: true,\n    ts: true\n  }),\n  {\n    rules: {\n      '@stylistic/comma-dangle': ['error', {\n        arrays: 'never',\n        objects: 'never',\n        imports: 'never',\n        exports: 'never',\n        functions: 'never'\n      }],\n      '@typescript-eslint/no-redeclare': 'off'\n    }\n  }\n]\n"
        },
        {
          "name": "index-fetch.js",
          "type": "blob",
          "size": 1.392578125,
          "content": "'use strict'\n\nconst { getGlobalDispatcher, setGlobalDispatcher } = require('./lib/global')\nconst EnvHttpProxyAgent = require('./lib/dispatcher/env-http-proxy-agent')\nconst fetchImpl = require('./lib/web/fetch').fetch\n\nmodule.exports.fetch = function fetch (resource, init = undefined) {\n  return fetchImpl(resource, init).catch((err) => {\n    if (err && typeof err === 'object') {\n      Error.captureStackTrace(err)\n    }\n    throw err\n  })\n}\nmodule.exports.FormData = require('./lib/web/fetch/formdata').FormData\nmodule.exports.Headers = require('./lib/web/fetch/headers').Headers\nmodule.exports.Response = require('./lib/web/fetch/response').Response\nmodule.exports.Request = require('./lib/web/fetch/request').Request\n\nconst { CloseEvent, ErrorEvent, MessageEvent, createFastMessageEvent } = require('./lib/web/websocket/events')\nmodule.exports.WebSocket = require('./lib/web/websocket/websocket').WebSocket\nmodule.exports.CloseEvent = CloseEvent\nmodule.exports.ErrorEvent = ErrorEvent\nmodule.exports.MessageEvent = MessageEvent\nmodule.exports.createFastMessageEvent = createFastMessageEvent\n\nmodule.exports.EventSource = require('./lib/web/eventsource/eventsource').EventSource\n\n// Expose the fetch implementation to be enabled in Node.js core via a flag\nmodule.exports.EnvHttpProxyAgent = EnvHttpProxyAgent\nmodule.exports.getGlobalDispatcher = getGlobalDispatcher\nmodule.exports.setGlobalDispatcher = setGlobalDispatcher\n"
        },
        {
          "name": "index.d.ts",
          "type": "blob",
          "size": 0.0849609375,
          "content": "import Undici from './types/index'\nexport default Undici\nexport * from './types/index'\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 6.1943359375,
          "content": "'use strict'\n\nconst Client = require('./lib/dispatcher/client')\nconst Dispatcher = require('./lib/dispatcher/dispatcher')\nconst Pool = require('./lib/dispatcher/pool')\nconst BalancedPool = require('./lib/dispatcher/balanced-pool')\nconst Agent = require('./lib/dispatcher/agent')\nconst ProxyAgent = require('./lib/dispatcher/proxy-agent')\nconst EnvHttpProxyAgent = require('./lib/dispatcher/env-http-proxy-agent')\nconst RetryAgent = require('./lib/dispatcher/retry-agent')\nconst errors = require('./lib/core/errors')\nconst util = require('./lib/core/util')\nconst { InvalidArgumentError } = errors\nconst api = require('./lib/api')\nconst buildConnector = require('./lib/core/connect')\nconst MockClient = require('./lib/mock/mock-client')\nconst MockAgent = require('./lib/mock/mock-agent')\nconst MockPool = require('./lib/mock/mock-pool')\nconst mockErrors = require('./lib/mock/mock-errors')\nconst RetryHandler = require('./lib/handler/retry-handler')\nconst { getGlobalDispatcher, setGlobalDispatcher } = require('./lib/global')\nconst DecoratorHandler = require('./lib/handler/decorator-handler')\nconst RedirectHandler = require('./lib/handler/redirect-handler')\n\nObject.assign(Dispatcher.prototype, api)\n\nmodule.exports.Dispatcher = Dispatcher\nmodule.exports.Client = Client\nmodule.exports.Pool = Pool\nmodule.exports.BalancedPool = BalancedPool\nmodule.exports.Agent = Agent\nmodule.exports.ProxyAgent = ProxyAgent\nmodule.exports.EnvHttpProxyAgent = EnvHttpProxyAgent\nmodule.exports.RetryAgent = RetryAgent\nmodule.exports.RetryHandler = RetryHandler\n\nmodule.exports.DecoratorHandler = DecoratorHandler\nmodule.exports.RedirectHandler = RedirectHandler\nmodule.exports.interceptors = {\n  redirect: require('./lib/interceptor/redirect'),\n  responseError: require('./lib/interceptor/response-error'),\n  retry: require('./lib/interceptor/retry'),\n  dump: require('./lib/interceptor/dump'),\n  dns: require('./lib/interceptor/dns'),\n  cache: require('./lib/interceptor/cache')\n}\n\nmodule.exports.cacheStores = {\n  MemoryCacheStore: require('./lib/cache/memory-cache-store')\n}\n\nconst SqliteCacheStore = require('./lib/cache/sqlite-cache-store')\nmodule.exports.cacheStores.SqliteCacheStore = SqliteCacheStore\n\nmodule.exports.buildConnector = buildConnector\nmodule.exports.errors = errors\nmodule.exports.util = {\n  parseHeaders: util.parseHeaders,\n  headerNameToString: util.headerNameToString\n}\n\nfunction makeDispatcher (fn) {\n  return (url, opts, handler) => {\n    if (typeof opts === 'function') {\n      handler = opts\n      opts = null\n    }\n\n    if (!url || (typeof url !== 'string' && typeof url !== 'object' && !(url instanceof URL))) {\n      throw new InvalidArgumentError('invalid url')\n    }\n\n    if (opts != null && typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    if (opts && opts.path != null) {\n      if (typeof opts.path !== 'string') {\n        throw new InvalidArgumentError('invalid opts.path')\n      }\n\n      let path = opts.path\n      if (!opts.path.startsWith('/')) {\n        path = `/${path}`\n      }\n\n      url = new URL(util.parseOrigin(url).origin + path)\n    } else {\n      if (!opts) {\n        opts = typeof url === 'object' ? url : {}\n      }\n\n      url = util.parseURL(url)\n    }\n\n    const { agent, dispatcher = getGlobalDispatcher() } = opts\n\n    if (agent) {\n      throw new InvalidArgumentError('unsupported opts.agent. Did you mean opts.client?')\n    }\n\n    return fn.call(dispatcher, {\n      ...opts,\n      origin: url.origin,\n      path: url.search ? `${url.pathname}${url.search}` : url.pathname,\n      method: opts.method || (opts.body ? 'PUT' : 'GET')\n    }, handler)\n  }\n}\n\nmodule.exports.setGlobalDispatcher = setGlobalDispatcher\nmodule.exports.getGlobalDispatcher = getGlobalDispatcher\n\nconst fetchImpl = require('./lib/web/fetch').fetch\nmodule.exports.fetch = async function fetch (init, options = undefined) {\n  try {\n    return await fetchImpl(init, options)\n  } catch (err) {\n    if (err && typeof err === 'object') {\n      Error.captureStackTrace(err)\n    }\n\n    throw err\n  }\n}\nmodule.exports.Headers = require('./lib/web/fetch/headers').Headers\nmodule.exports.Response = require('./lib/web/fetch/response').Response\nmodule.exports.Request = require('./lib/web/fetch/request').Request\nmodule.exports.FormData = require('./lib/web/fetch/formdata').FormData\n\nconst { setGlobalOrigin, getGlobalOrigin } = require('./lib/web/fetch/global')\n\nmodule.exports.setGlobalOrigin = setGlobalOrigin\nmodule.exports.getGlobalOrigin = getGlobalOrigin\n\nconst { CacheStorage } = require('./lib/web/cache/cachestorage')\nconst { kConstruct } = require('./lib/core/symbols')\n\n// Cache & CacheStorage are tightly coupled with fetch. Even if it may run\n// in an older version of Node, it doesn't have any use without fetch.\nmodule.exports.caches = new CacheStorage(kConstruct)\n\nconst { deleteCookie, getCookies, getSetCookies, setCookie, parseCookie } = require('./lib/web/cookies')\n\nmodule.exports.deleteCookie = deleteCookie\nmodule.exports.getCookies = getCookies\nmodule.exports.getSetCookies = getSetCookies\nmodule.exports.setCookie = setCookie\nmodule.exports.parseCookie = parseCookie\n\nconst { parseMIMEType, serializeAMimeType } = require('./lib/web/fetch/data-url')\n\nmodule.exports.parseMIMEType = parseMIMEType\nmodule.exports.serializeAMimeType = serializeAMimeType\n\nconst { CloseEvent, ErrorEvent, MessageEvent } = require('./lib/web/websocket/events')\nmodule.exports.WebSocket = require('./lib/web/websocket/websocket').WebSocket\nmodule.exports.CloseEvent = CloseEvent\nmodule.exports.ErrorEvent = ErrorEvent\nmodule.exports.MessageEvent = MessageEvent\n\nmodule.exports.WebSocketStream = require('./lib/web/websocket/stream/websocketstream').WebSocketStream\nmodule.exports.WebSocketError = require('./lib/web/websocket/stream/websocketerror').WebSocketError\n\nmodule.exports.request = makeDispatcher(api.request)\nmodule.exports.stream = makeDispatcher(api.stream)\nmodule.exports.pipeline = makeDispatcher(api.pipeline)\nmodule.exports.connect = makeDispatcher(api.connect)\nmodule.exports.upgrade = makeDispatcher(api.upgrade)\n\nmodule.exports.MockClient = MockClient\nmodule.exports.MockPool = MockPool\nmodule.exports.MockAgent = MockAgent\nmodule.exports.mockErrors = mockErrors\n\nconst { EventSource } = require('./lib/web/eventsource/eventsource')\n\nmodule.exports.EventSource = EventSource\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 5.8525390625,
          "content": "{\n  \"name\": \"undici\",\n  \"version\": \"7.2.1\",\n  \"description\": \"An HTTP/1.1 client, written from scratch for Node.js\",\n  \"homepage\": \"https://undici.nodejs.org\",\n  \"bugs\": {\n    \"url\": \"https://github.com/nodejs/undici/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/nodejs/undici.git\"\n  },\n  \"license\": \"MIT\",\n  \"contributors\": [\n    {\n      \"name\": \"Daniele Belardi\",\n      \"url\": \"https://github.com/dnlup\",\n      \"author\": true\n    },\n    {\n      \"name\": \"Ethan Arrowood\",\n      \"url\": \"https://github.com/ethan-arrowood\",\n      \"author\": true\n    },\n    {\n      \"name\": \"Matteo Collina\",\n      \"url\": \"https://github.com/mcollina\",\n      \"author\": true\n    },\n    {\n      \"name\": \"Matthew Aitken\",\n      \"url\": \"https://github.com/KhafraDev\",\n      \"author\": true\n    },\n    {\n      \"name\": \"Robert Nagy\",\n      \"url\": \"https://github.com/ronag\",\n      \"author\": true\n    },\n    {\n      \"name\": \"Szymon Marczak\",\n      \"url\": \"https://github.com/szmarczak\",\n      \"author\": true\n    },\n    {\n      \"name\": \"Tomas Della Vedova\",\n      \"url\": \"https://github.com/delvedor\",\n      \"author\": true\n    }\n  ],\n  \"keywords\": [\n    \"fetch\",\n    \"http\",\n    \"https\",\n    \"promise\",\n    \"request\",\n    \"curl\",\n    \"wget\",\n    \"xhr\",\n    \"whatwg\"\n  ],\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"scripts\": {\n    \"build:node\": \"esbuild index-fetch.js --bundle --platform=node --outfile=undici-fetch.js --define:esbuildDetection=1 --keep-names && node scripts/strip-comments.js\",\n    \"build:wasm\": \"node build/wasm.js --docker\",\n    \"generate-pem\": \"node scripts/generate-pem.js\",\n    \"lint\": \"eslint --cache\",\n    \"lint:fix\": \"eslint --fix --cache\",\n    \"test\": \"npm run test:javascript && cross-env NODE_V8_COVERAGE=  npm run test:typescript\",\n    \"test:javascript\": \"npm run test:javascript:no-jest && npm run test:jest\",\n    \"test:javascript:no-jest\": \"npm run generate-pem && npm run test:unit && npm run test:node-fetch && npm run test:cache && npm run test:cache-interceptor && npm run test:interceptors && npm run test:fetch && npm run test:cookies && npm run test:eventsource && npm run test:wpt && npm run test:websocket && npm run test:node-test && npm run test:cache-tests\",\n    \"test:javascript:without-intl\": \"npm run test:javascript:no-jest\",\n    \"test:busboy\": \"borp -p \\\"test/busboy/*.js\\\"\",\n    \"test:cache\": \"borp -p \\\"test/cache/*.js\\\"\",\n    \"test:sqlite\": \"NODE_OPTIONS=--experimental-sqlite borp -p \\\"test/cache-interceptor/*.js\\\"\",\n    \"test:cache-interceptor\": \"borp -p \\\"test/cache-interceptor/*.js\\\"\",\n    \"test:cookies\": \"borp -p \\\"test/cookie/*.js\\\"\",\n    \"test:eventsource\": \"npm run build:node && borp --expose-gc -p \\\"test/eventsource/*.js\\\"\",\n    \"test:fuzzing\": \"node test/fuzzing/fuzzing.test.js\",\n    \"test:fetch\": \"npm run build:node && borp --timeout 180000 --expose-gc --concurrency 1 -p \\\"test/fetch/*.js\\\" && npm run test:webidl && npm run test:busboy\",\n    \"test:h2\": \"npm run test:h2:core && npm run test:h2:fetch\",\n    \"test:h2:core\": \"borp -p \\\"test/http2*.js\\\"\",\n    \"test:h2:fetch\": \"npm run build:node && borp -p \\\"test/fetch/http2*.js\\\"\",\n    \"test:interceptors\": \"borp -p \\\"test/interceptors/*.js\\\"\",\n    \"test:jest\": \"cross-env NODE_V8_COVERAGE= jest\",\n    \"test:unit\": \"borp --expose-gc -p \\\"test/*.js\\\"\",\n    \"test:node-fetch\": \"borp -p \\\"test/node-fetch/**/*.js\\\"\",\n    \"test:node-test\": \"borp -p \\\"test/node-test/**/*.js\\\"\",\n    \"test:tdd\": \"borp --expose-gc -p \\\"test/*.js\\\"\",\n    \"test:tdd:node-test\": \"borp -p \\\"test/node-test/**/*.js\\\" -w\",\n    \"test:typescript\": \"tsd && tsc test/imports/undici-import.ts --typeRoots ./types --noEmit && tsc ./types/*.d.ts --noEmit --typeRoots ./types\",\n    \"test:webidl\": \"borp -p \\\"test/webidl/*.js\\\"\",\n    \"test:websocket\": \"borp -p \\\"test/websocket/*.js\\\"\",\n    \"test:websocket:autobahn\": \"node test/autobahn/client.js\",\n    \"test:websocket:autobahn:report\": \"node test/autobahn/report.js\",\n    \"test:wpt\": \"node test/wpt/start-fetch.mjs && node test/wpt/start-mimesniff.mjs && node test/wpt/start-xhr.mjs && node test/wpt/start-websockets.mjs && node test/wpt/start-cacheStorage.mjs && node test/wpt/start-eventsource.mjs\",\n    \"test:wpt:withoutintl\": \"node test/wpt/start-fetch.mjs && node test/wpt/start-mimesniff.mjs && node test/wpt/start-xhr.mjs && node test/wpt/start-cacheStorage.mjs && node test/wpt/start-eventsource.mjs\",\n    \"test:cache-tests\": \"node test/cache-interceptor/cache-tests.mjs --ci\",\n    \"coverage\": \"npm run coverage:clean && cross-env NODE_V8_COVERAGE=./coverage/tmp npm run test:javascript && npm run coverage:report\",\n    \"coverage:ci\": \"npm run coverage:clean && cross-env NODE_V8_COVERAGE=./coverage/tmp npm run test:javascript && npm run coverage:report:ci\",\n    \"coverage:clean\": \"node ./scripts/clean-coverage.js\",\n    \"coverage:report\": \"cross-env NODE_V8_COVERAGE= c8 report\",\n    \"coverage:report:ci\": \"c8 report\",\n    \"bench\": \"echo \\\"Error: Benchmarks have been moved to '/benchmarks'\\\" && exit 1\",\n    \"serve:website\": \"echo \\\"Error: Documentation has been moved to '/docs'\\\" && exit 1\",\n    \"prepare\": \"husky && node ./scripts/platform-shell.js\"\n  },\n  \"devDependencies\": {\n    \"@fastify/busboy\": \"3.1.1\",\n    \"@matteo.collina/tspl\": \"^0.1.1\",\n    \"@sinonjs/fake-timers\": \"^12.0.0\",\n    \"@types/node\": \"^18.19.50\",\n    \"abort-controller\": \"^3.0.0\",\n    \"borp\": \"^0.19.0\",\n    \"c8\": \"^10.0.0\",\n    \"cross-env\": \"^7.0.3\",\n    \"dns-packet\": \"^5.4.0\",\n    \"esbuild\": \"^0.24.0\",\n    \"eslint\": \"^9.9.0\",\n    \"fast-check\": \"^3.17.1\",\n    \"https-pem\": \"^3.0.0\",\n    \"husky\": \"^9.0.7\",\n    \"jest\": \"^29.0.2\",\n    \"neostandard\": \"^0.12.0\",\n    \"node-forge\": \"^1.3.1\",\n    \"proxy\": \"^2.1.1\",\n    \"tsd\": \"^0.31.2\",\n    \"typescript\": \"^5.6.2\",\n    \"ws\": \"^8.11.0\"\n  },\n  \"engines\": {\n    \"node\": \">=20.18.1\"\n  },\n  \"tsd\": {\n    \"directory\": \"test/types\",\n    \"compilerOptions\": {\n      \"esModuleInterop\": true,\n      \"lib\": [\n        \"esnext\"\n      ]\n    }\n  },\n  \"jest\": {\n    \"testMatch\": [\n      \"<rootDir>/test/jest/**\"\n    ]\n  }\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "types",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}