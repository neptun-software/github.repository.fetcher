{
  "metadata": {
    "timestamp": 1736562800089,
    "page": 355,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rethinkdb/horizon",
      "stars": 6774,
      "defaultBranch": "next",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.251953125,
          "content": "**/node_modules\ndocs\nexamples\nserver/test\n\nclient/test\nclient/lib/\nclient/build\nclient/dist\n\n**/README.md\ndocker-compose.yml\n\n**/rethinkdb_data_test\n**/rethinkdb_data/\n\n**/*.log\n.#*\n**/*-key.pem\n**/*-cert.pem\n\n**/.DS_Store\n\n.hz/\nconfig.toml\nDockerfile*\n.git\n"
        },
        {
          "name": ".eslintrc.js",
          "type": "blob",
          "size": 3.298828125,
          "content": "const OFF = 0;\nconst WARN = 1;\nconst ERROR = 2;\n\nmodule.exports = {\n  extends: \"eslint:recommended\",\n  rules: {\n    \"arrow-body-style\": [ERROR, \"as-needed\"],\n    \"array-bracket-spacing\": [ ERROR, \"always\" ],\n    \"arrow-parens\": [ ERROR, \"always\" ],\n    \"arrow-spacing\": [ ERROR ],\n    \"block-spacing\": [ ERROR, \"always\" ],\n    \"brace-style\": [ ERROR, \"1tbs\", { \"allowSingleLine\": true } ],\n    \"comma-dangle\": [ ERROR, \"always-multiline\" ],\n    \"comma-spacing\": [ ERROR ],\n    \"comma-style\": [ ERROR, \"last\" ],\n    \"constructor-super\": [ ERROR ],\n    \"curly\": [ ERROR, \"all\" ],\n    \"dot-notation\": [ ERROR ],\n    \"eqeqeq\": [ ERROR, \"allow-null\" ],\n    \"func-style\": [ ERROR, \"declaration\", { \"allowArrowFunctions\": true } ],\n    \"indent\": [ ERROR, 2 ],\n    \"key-spacing\": [ ERROR ],\n    \"keyword-spacing\": [ ERROR ],\n    \"linebreak-style\": [ ERROR, \"unix\" ],\n    \"new-parens\": [ ERROR ],\n    \"max-len\": [ ERROR, 80 ],\n    \"no-array-constructor\": [ ERROR ],\n    \"no-case-declarations\": [ ERROR ],\n    \"no-class-assign\": [ ERROR ],\n    \"no-confusing-arrow\": [ ERROR, { \"allowParens\": true } ],\n    \"no-console\": [ OFF ],\n    \"no-const-assign\": [ ERROR ],\n    \"no-constant-condition\": [ ERROR ],\n    \"no-dupe-class-members\": [ ERROR ],\n    \"no-eval\": [ ERROR ],\n    \"no-extend-native\": [ ERROR ],\n    \"no-extra-semi\": [ ERROR ],\n    \"no-floating-decimal\": [ ERROR ],\n    \"no-implicit-coercion\": [ ERROR ],\n    \"no-implied-eval\": [ ERROR ],\n    \"no-invalid-this\": [ ERROR ],\n    \"no-labels\": [ ERROR ],\n    \"no-lonely-if\": [ ERROR ],\n    \"no-mixed-requires\": [ ERROR ],\n    \"no-multi-spaces\": [ ERROR ],\n    \"no-multi-str\": [ ERROR ],\n    \"no-multiple-empty-lines\": [ ERROR, { \"max\": 2, \"maxEOF\": 1 } ],\n    \"no-native-reassign\": [ ERROR ],\n    \"no-new-func\": [ ERROR ],\n    \"no-new-object\": [ ERROR ],\n    \"no-new-require\": [ ERROR ],\n    \"no-new-wrappers\": [ ERROR ],\n    \"no-param-reassign\": [ ERROR ],\n    \"no-proto\": [ ERROR ],\n    \"no-return-assign\": [ ERROR ],\n    \"no-self-compare\": [ ERROR ],\n    \"no-sequences\": [ ERROR ],\n    \"no-shadow\": [ ERROR ],\n    \"no-shadow-restricted-names\": [ ERROR ],\n    \"no-this-before-super\": [ ERROR ],\n    \"no-throw-literal\": [ ERROR ],\n    \"no-trailing-spaces\": [ ERROR ],\n    \"no-unexpected-multiline\": [ ERROR ],\n    \"no-unneeded-ternary\": [ ERROR ],\n    \"no-unreachable\": [ ERROR ],\n    \"no-use-before-define\": [ ERROR, \"nofunc\" ],\n    \"no-var\": [ ERROR ],\n    \"no-void\": [ ERROR ],\n    \"no-with\": [ ERROR ],\n    \"object-curly-spacing\": [ ERROR, \"always\" ],\n    \"one-var\": [ ERROR, { \"uninitialized\": \"always\", \"initialized\": \"never\" } ],\n    \"operator-assignment\": [ ERROR, \"always\" ],\n    \"operator-linebreak\": [ ERROR, \"after\" ],\n    \"padded-blocks\": [ ERROR, \"never\" ],\n    \"prefer-const\": [ ERROR ],\n    \"prefer-template\": [ ERROR ],\n    \"quote-props\": [ ERROR, \"as-needed\" ],\n    \"quotes\": [ ERROR, \"single\", \"avoid-escape\" ],\n    \"semi\": [ ERROR, \"always\" ],\n    \"semi-spacing\": [ ERROR ],\n    \"space-before-blocks\": [ ERROR, \"always\" ],\n    \"space-before-function-paren\": [ ERROR, \"never\" ],\n    \"space-in-parens\": [ ERROR, \"never\" ],\n    \"space-infix-ops\": [ ERROR ],\n    \"space-unary-ops\": [ ERROR ],\n    \"spaced-comment\": [ ERROR, \"always\" ],\n    \"strict\": [ ERROR, \"global\" ],\n    \"wrap-iife\": [ ERROR, \"inside\" ],\n    \"yoda\": [ ERROR, \"never\" ],\n  },\n  env: {\n    \"es6\": true,\n    \"node\": true,\n    \"mocha\": true,\n  },\n};\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.15234375,
          "content": "client/dist/\nclient/lib/\nrethinkdb_data_test\nrethinkdb_data/\n**/*.log\n.#*\n**/*-key.pem\n**/*-cert.pem\nnode_modules/\n**/.DS_Store\n.hz/\nconfig.toml\n**/.vscode\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.099609375,
          "content": "# Contributing\n\nWe're happy you want to contribute! You can help us in different ways:\n\n- [Open an issue][1] with suggestions for improvements and errors you're facing\n- Fork this repository and submit a pull request\n- Improve the <a>documentation</a> (coming soon, see [Resources](#resources) below for now)\n\n[1]: https://github.com/rethinkdb/horizon/issues\n\nTo submit a pull request, fork the [Horizon repository][3] and then clone your fork:\n\n    git clone git@github.com:<your-name>/horizon.git\n\n[3]: https://github.com/rethinkdb/horizon\n\nMake your suggested changes, `git push` and then [submit a pull request][4]. Note that before we can accept your pull requests, you need to sign our [Contributor License Agreement][5].\n\n[4]: https://github.com/rethinkdb/horizon/compare/\n[5]: http://rethinkdb.com/community/cla/\n\n## Resources\n\nSome useful resources to get started:\n* [Getting started with Horizon][getting-started]\n* [The Horizon client library API][client-api]\n* [Configuring the `hz` command-line tool][cli-config]\n\n[cli-config]: /cli/README.md\n[client-api]: /client/README.md\n[getting-started]: GETTING-STARTED.md\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.564453125,
          "content": "# REQUIREMENTS\n# * Needs a RETHINKDB_URI environment variable pushed into the container at runtime, with -e RETHINKDB_URI=HOST:PORT\n# * Your Horizon app needs to be mounted into /usr/app using -v /path/to/app:/usr/app\n\nFROM node:5-slim\n\nRUN yes '' | adduser --disabled-password horizon && \\\n    mkdir -p /usr/horizon /usr/app /usr/certs\n\nRUN apt update && apt install -y git\n\nCOPY . /usr/horizon/\nWORKDIR /usr/horizon\nRUN cd test; ./setupDev.sh\n\nEXPOSE 8181\n\nVOLUME /usr/app\n\nCMD [\"su\", \"-s\", \"/bin/sh\", \"horizon\", \"-c\", \"hz serve --bind all --connect $RETHINKDB_URI /usr/app\"]\n"
        },
        {
          "name": "Dockerfile.dev",
          "type": "blob",
          "size": 0.2529296875,
          "content": "# REQUIREMENTS\n# * Needs a RETHINKDB_URI environment variable pushed into the container at runtime, with -e RETHINKDB_URI=HOST:PORT\n# * Your Horizon app needs to be mounted into /usr/app using -v /path/to/app:/usr/app\n\nFROM rethinkdb/horizon\nENV HZ_DEV = yes\n"
        },
        {
          "name": "GETTING-STARTED.md",
          "type": "blob",
          "size": 21.912109375,
          "content": "![](/horizon.png)\n\n# Getting Started with Horizon\n\n**Getting Started**\n* [Installation](#installation)\n* [Creating your first app](#creating-your-first-app)\n* [Starting Horizon Server](#starting-horizon-server)\n * [Configuring Horizon Server](#configuring-horizon-server)\n * [Adding OAuth authentication](#adding-oauth-authentication)\n* [Intro to the Horizon Client Library](#the-horizon-client-library)\n * [Storing documents](#storing-documents)\n * [Retrieving documents](#retrieving-documents)\n * [Removing documents](#removing-documents)\n * [Watching for changes](#watching-for-changes)\n* [Putting it all together](#putting-it-all-together)\n* [Using an already existing application with Horizon](#bringing-your-app-to-horizon)\n * [Do I need to move all my files into the `dist` folder?](#do-i-need-to-output-all-my-files-into-the-dist-folder)\n * [How do I add Horizon to X?](#how-do-i-add-horizon-to-x)\n\n\n\n**Examples**\n* [Example Horizon Applications](#example-applications)\n* [Extending Horizon Server examples](#extending-horizon-server)\n\n---\n\n## Installation\n\nFirst, install horizon from npm:\n\n```sh\n$ npm install -g horizon\n```\n\n## Creating your first app\n\nNow you can initialize a new horizon project:\n\n```sh\n$ hz init example-app\n```\n\nThis will create a directory with the following files:\n\n```sh\n$ tree -aF example-app/\nexample-app/\n├── dist/\n│   └── index.html\n├── .hz/\n│   └── config.toml\n└── src/\n```\n\nThe `dist` directory is where you should output your static\nfiles. Horizon doesn't have any opinions about what front-end build\nsystem you use, just that the files to serve end up in `dist`. Your\nsource files would go into `src` but that's just a convention.\nHorizon doesn't touch anything in `src`.\n\nIf you want, you can `npm init` or `bower init` in the `example-app`\ndirectory to set up dependencies etc.\n\n`.hz/config.toml` is a [toml](https://github.com/toml-lang/toml) configuration file where you can set all the different options for Horizon Server. [Read more about available configuration options here](/cli/README.md#hzconfigtoml-file).\n\nBy default, horizon creates a basic `index.html` to serve so you can verify everything is working:\n\n```html\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <script src=\"/horizon/horizon.js\"></script>\n    <script>\n      var horizon = Horizon();\n      horizon.onReady(function() {\n        document.querySelector('h1').innerHTML = 'It works!'\n      });\n      horizon.connect();\n    </script>\n  </head>\n  <body>\n   <marquee><h1></h1></marquee>\n  </body>\n</html>\n```\n\n---\n\n## Starting Horizon Server\n\nWe now need to start Horizon Server. Running `hz serve` does three main things:\n\n1. Starts the Horizon Server node app which serves the Horizon Client API / WebSocket endpoint.\n1. Serves the `horizon.js` client library.\n1. Serves everything in the `dist` folder, _if it exists in the current working directory_.\n\n*[RethinkDB](https://www.rethinkdb.com/docs/install/) needs to be installed first and accessible from the Path.*\n\nNormally, running `hz serve` requires a running instance of RethinkDB as well as pre-created tables in your RethinkDB instance.\n\nLuckily, running `hz serve --dev` has all that covered for you. Here's a comparison of what happens with and without `--dev`:\n\n|  | `hz serve`| `hz serve --dev` | Command-line Flag                 |\n|----------------------------|:-----------:|:-----:|----------------------|\n|Starts Horizon Server       | ✅        | ✅  |                      |\n|Starts RethinkDB Server     | ❌        | ✅  | `--start-rethinkdb`  |\n|Insecure Mode (no HTTPS/WSS)| ❌        | ✅  | `--insecure`         |\n|Auto creates tables         | ❌        | ✅  | `--auto-create-table`|\n|Auto creates indexes        | ❌        | ✅  | `--auto-create-index`|\n\nSo when using `hz serve --dev`, you don't have to worry about explicitly creating tables, or  worry about creating indexes to ensure your Horizon queries are always fast. As well, Horizon will start an instance of RethinkDB specifically for Horizon and create a `rethinkdb_data` folder in your current directory when you start `hz serve --dev`\n\n> Using authentication _requires_ that you use TLS. To setup authentication for your app you will have to use `hz serve` without `--dev` and with `--key-file` and `--cert-file` flags as well as any other options you require.\n\nHere you can find\n<a href=\"https://github.com/rethinkdb/horizon/tree/next/cli#hz-serve\">the complete list of command line flags</a> for `hz serve` ➡️.\n\nOn your local dev machine, you will usually use `hz serve --dev` which will begin a new instance of RethinkDB for you and will automatically create tables and indexes making your development workflow easy. In a production environment, you will want to just use `hz serve` and make use of the `.hz/config.toml` file.\n\n### Configuring Horizon Server\n\nHorizon Server is configurable via the `.hz/config.toml` file which is in the [toml](https://github.com/toml-lang/toml) config format. By default, `hz serve` will look for this file\nin the current working directory. Here is [an example `.hz/config.toml` file from the Horizon CLI documentation](/cli/README.md#hzconfigtoml-file) ➡️.\n\n> Be warned that there is a precedence to config file setting in the order of:\n> environment variables > config file > command-line flags\n\n### Adding OAuth authentication\n\nWith Horizon, we wanted to make it easy to allow your users to authenticate with the accounts\nthey already have with the most popular services.\n\nYou can find [a full list of OAuth implementations we support here](/server/src/auth).\n\nThe first thing you need to do is create an application with the provider you'd like to authenticate with, usually at the developer portal portion of their website. Here are links\n to a the providers we currently support.\n\n* 😵📖 - [Facebook](https://developers.facebook.com/apps/)\n* 💻🏦 - [Github](https://github.com/settings/applications/new)\n* 🔟<sup>100</sup> - [Google](https://console.developers.google.com/project)\n* 🎮📹 - [Twitch](https://www.twitch.tv/kraken/oauth2/clients/new)\n* 🐦💬 - [Twitter](https://apps.twitter.com/app/new)\n\nFrom each of these providers you will eventually have a `client_id` and `client_secret`\n(sometimes just `id` and `secret`) that you will need to put into the `.hz/config.toml`\nconfiguration file.\n\nNear the bottom of the automatically generated `.hz/config.toml` file you'll see commented out\nsample OAuth settings, you'll just need to uncomment them out and replace the values with your `client_id` and `client_secret`. Adding Github OAuth configuration would look like this:\n\n```toml\n# [auth.facebook]\n# id = \"000000000000000\"\n# secret = \"00000000000000000000000000000000\"\n#\n# [auth.google]\n# id = \"00000000000-00000000000000000000000000000000.apps.googleusercontent.com\"\n# secret = \"000000000000000000000000\"\n#\n# [auth.twitter]\n# id = \"0000000000000000000000000\"\n# secret = \"00000000000000000000000000000000000000000000000000\"\n#\n\n[auth.github]\nid = \"your_client_id\"\nsecret = \"your_client_secret\"\n```\n\nOnce you've added the lines in your `.hz/config.toml` you're basically all set. To verify that\nHorizon Server picked them up, run `hz serve` then go to\n`https://localhost:8181/horizon/auth_methods` (or where ever you are running Horizon Server) to\nsee a list of currently active authentication options.\n\n> At this point, ensure that you're using `--key-file` and `--cert-file` with `hz serve` as you cannot have authentication without also using TLS to serve assets via HTTPS/WSS. Also ensure that you are now using `https://` for all your URLs.\n\nYou should see `github` included in the object of available auth methods, if you just see a blank object like so `{ }`, ensure that you restarted Horizon Server and that it is using the `.hz/config.toml` you edited. It should look like this:\n\n```js\n{\n  github: \"/horizon/github\"\n}\n```\n\nNow the value of the property `github` is the path to replace on the current `window.location`\nthat will begin the authentication process. Or, just type in\n`https://localhost:8181/horizon/github` in your browser to test it out.\n\nAs a result of a successful authentication, the browser will be redirected to the root of the\ndev server (`https://localhost:8181/`) with the `?horizon_token=` in the query parameters and you\ncan now consider the user properly authenticated at this point. If an error occurs somewhere\nduring the authentication process, the browser will be redirected back to the root of the dev server with an error message in the query parameters.\n\nA couple notes to mention:\n\n* ***Where is the user data from authenticating with OAuth?***: At the moment we just\nallow users to prove they have an account with the given provider. But obviously part of the\npower of OAuth is the convenience of sharing controlled slices of user data. For example, I may want users to allow my app to have access to their friends list, or see who they're following on Github. This is coming soon, and in the future, we will allow developers to specify the requested authentication scopes and give developer access to the returned data via the Users table.\n\n* ***Why can't I configure the final redirect url?***: Customizing the final redirect_url on the\noriginal domain will be possible in the future.\n\n* ***Why doesn't Horizon use Passport?***: Passport was definitely considered for Horizon but\nultimately was too heavily tied with Express to achieve the amount of extensibility we wanted.\nTo ensure this extensibility we decided to implement our own handling of OAuth routes for\nthe different providers. If you're still convinced we should use Passport, feel free to\n[open an issue](https://github.com/rethinkdb/horizon/issues/new) and direct your comments\nto @Tryneus.\n\n---\n\n## The Horizon Client Library\n\nIn the boilerplate created by `hz init`, you can see that the Horizon client library is being\nimported from the path `/horizon/horizon.js` served by Horizon Server. If you\n\n\n```html\n...\n<head>\n  ...\n  <script src=\"/horizon/horizon.js\"></script>\n</head>\n...\n```\n\nAfter this script is loaded, you can connect to your running instance of Horizon Server.\n\n\n```js\nconst horizon = Horizon();\n```\n\nFrom here you can start to interact with Horizon collections. Having `--dev` mode enabled on\nthe Horizon Server creates collections and indexes automatically so you can get your\napplication setup with as little hassle as possible.\n\n> **Note:** With `--dev` mode enabled or `--auto-create-index`, indices will\nbe created automatically for queries that are run that don't already match\na pre-existing query.\n\n```js\n// This automatically creates\nconst chat = horizon(\"messages\");\n```\n\nNow, `chat` is a Horizon collection of documents. You can perform a\nvariety of operations on this collection to filter them down to the ones\nyou need. This most basic operations are [`.store`][store] and [`.fetch`][fetch]:\n\n### Storing documents\n\nTo store documents into the collection, we use [`.store`][store].\n\n```js\n// Object being stored\nlet message = {\n  text: \"What a beautiful horizon 🌄!\",\n  datetime: new Date(),\n  author: \"@dalanmiller\"\n}\n\n// Storing a document\nchat.store(message);\n```\n\nIf we wanted, we could also add `.subscribe` at the end of [`.store`][store] and handle the document `id`s created by the server as well as any errors that occur with storing. Check out [`.store`](https://github.com/rethinkdb/horizon/tree/next/client#store-------) in the [Horizon Client docs](https://github.com/rethinkdb/horizon/tree/next/client) ➡️.\n\n### Retrieving documents\n\nTo retrieve messages from the collection we use [`.fetch`][fetch]. In this case, `.subscribe` takes a result and error handler function.\n\n```js\nchat.fetch().subscribe(\n  (items) => {\n    items.subscribe((item) => {\n      // Each result from the chat collection\n      //  will pass through this function\n      console.log(item);\n    })\n  },\n  // If an error occurs, this function\n  //  will execute with the `err` message\n  (err) => {\n    console.log(err);\n  })\n```\n\n### Removing documents\n\nTo remove documents from a collection, you can use either [`.remove`][remove] or [`.removeAll`][removeAll]:\n\n```js\n// These two queries are equivalent and will remove the document with id: 1.\nchat.remove(1).subscribe((id) => { console.log(id) })\nchat.remove({id: 1}).subscribe((id) => {console.log(id)})\n```\n\nOr, if you have a set of documents that you'd like to remove you can pass them in as an array to [`.removeAll`][removeAll].\n\n```js\n\n// Will remove documents with ids 1, 2, and 3 from the collection.\nchat.removeAll([1, 2, 3])\n```\nAs with the other functions, you can chain `.subscribe` onto the remove functions and provide response and error handlers.\n\n### Watching for changes\n\nWe can also \"listen\" to an entire collection, query, or a single document by using [`.watch`][watch].\nThis is very convenient for building apps that want to update state immediately as data changes\nin the database. Here are a few variations of how you can use [`.watch`][watch]:\n\n```js\n// Watch all documents, if any of them change, call the handler function.\nchat.watch().subscribe((docs) => { console.log(docs)  })\n\n// Query all documents and sort them in ascending order by datetime,\n//  then if any of them change, the handler function is called.\nchat.order(\"datetime\").watch().subscribe((docs) => { console.log(docs)  })\n\n// Find a single document in the collection, if it changes, call the handler function\nchat.find({author: \"@dalanmiller\"}).watch().subscribe((doc) => { console.log(doc) })\n```\n\nBy default, the handler you pass to `.subscribe` chained on [`.watch`][watch] will receive\nthe entire collection of documents when one of them changes. This makes it easy when\nusing frameworks such as [Vue](https://vuejs.org/) or [React](https://facebook.github.io/react/)\nallowing you to replace the current state with the new array given to you by Horizon.\n\n```js\n\n// Our current state of chat messages\nlet chats = [];\n\n// Query chats with `.order` which by default\n//  is in ascending order.\nchat.order(\"datetime\").watch().subscribe(\n\n  // Returns the entire array\n  (newChats) => {\n\n    // Here we replace the old value of `chats` with the new\n    //  array. Frameworks such as React will re-render based\n    //  on the new values inserted into the array. Preventing you\n    //  from having to do modifications on the original array.\n    //\n    // In short, it's this easy! :cool:\n    chats = newChats;\n  },\n\n  (err) => {\n    console.log(err);\n  })\n```\n\nTo learn more about how Horizon works with React, check out [this complete Horizon & React example](https://github.com/rethinkdb/horizon/tree/next/examples/react-chat-app) ➡️.\n\n## Putting it all together\n\nNow that we have the basics covered, let's pretend we are building a\nsimple chat application where the messages are displayed\nin ascending order. Here are some basic functions that would allow\nyou to build such an app.\n\n```js\n\nlet chats = [];\n\n// Retrieve all messages from the server\nconst retrieveMessages = () => {\n  chat.order('datetime')\n  // fetch all results as an array\n  .fetch()\n  // Retrieval successful, update our model\n  .subscribe((newChats) => {\n      chats = chats.concat(newChats);\n    },\n    // Error handler\n    error => console.log(error),\n    // onCompleted handler\n    () => console.log('All results received!')\n    )\n};\n\n// Retrieve an single item by id\nconst retrieveMessage = id => {\n  chat.find(id).fetch()\n    // Retrieval successful\n    .subscribe(result => {\n      chats.push(result);\n    },\n    // Error occurred\n    error => console.log(error))\n};\n\n// Store new item\nconst storeMessage = (message) => {\n   chat.store(message)\n    .subscribe(\n      // Returns id of saved objects\n      result => console.log(result),\n      // Returns server error message\n      error => console.log(error)\n      // called when store is complete\n      () => console.log('completed store')\n    )\n};\n\n// Replace item that has equal `id` field\n//  or insert if it doesn't exist.\nconst updateMessage = message => {\n  chat.replace(message);\n};\n\n// Remove item from collection\nconst deleteMessage = message => {\n  chat.remove(message);\n};\n```\n\nAnd lastly, the [`.watch`][watch] method basically creates a listener on the chat collection. Using just `chat.watch()`, and the new updated results will be pushed to you any time they change on the server. You can also [`.watch`][watch] changes on a query or a single document.\n\n\n```js\n\nchat.watch().subscribe(chats => {\n  // Each time through it will returns all results of your query\n    renderChats(allChats)\n  },\n\n  // When error occurs on server\n  error => console.log(error)\n)\n```\n\nYou can also get notifications when the client connects and disconnects from the server\n\n``` js\n  // Triggers when client successfully connects to server\n  horizon.onReady().subscribe(() => console.log(\"Connected to Horizon Server\"))\n\n  // Triggers when disconnected from server\n  horizon.onDisconnected().subscribe(() => console.log(\"Disconnected from Horizon Server\"))\n```\n\nFrom here, you could take any framework and add these functions to create a realtime chat application\nwithout writing a single line of backend code.\n\nThere's also plenty of other functions in the Horizon Client library to meet your needs, including:\n[above][above], [below][below], [limit][limit], [replace][replace], and [upsert][upsert].\n\n\n## Bringing your app to Horizon\n\nWe expect many people to already have an application in place but want to leverage\nthe power of Horizon for their realtime data. Here are a few scenarios that will\nbe relevant to you:\n\n### Do I need to output all my files into the `dist` folder?\n\nThe short and long answer is, **_no_**.\n\nIf you are already using some other process to serve your static files, you absolutely\ndo not need to now do Yet Another Refactor™️ just to get the power of Horizon. From your already existing code base you have two options to get include and then `require` the Horizon Client library:\n\n1. Use `horizon.js` served by Horizon Server (simplest option)\n1. Install `@horizon/client` as a dependency in your project\n\nWe recommend using the `horizon.js` library as served by Horizon Server for solely the\nreason that there will be no mismatches between your client library version and your\ncurrent running version of Horizon Server.\n\nThis means somewhere in your application, you'll need to have:\n\n```html\n<script src=\"localhost:8181/horizon/horizon.js\"></script>\n```\n\nAnd then when you init the Horizon connection you need to specify the `host` property:\n\n```js\nconst horizon = Horizon({host: 'localhost:8181'});\n```\n\nHowever, if requesting the .js library at page load time isn't desirable, or you are using [webpack](https://webpack.github.io/) and similar build setups for your front-end code, just add `npm install @horizon/client` to your project, and dependency wise, you'll be good to go.\n\nJust remember that when you make connections to Horizon Server to specify the port number (which is by default `8181`) when connecting.\n\n> **Note:** This will likely require setting CORS headers on the Horizon Server responses, which is a feature in progress, refer to [issue #239 for progress](https://github.com/rethinkdb/horizon/issues/239).\n\n### How do I add Horizon to X?\n\nIf you already have a React, Angular, or Whatever Is Cool These Days:tm: application, you should first check our [examples directory](/examples) for different ways on how we have integrated Horizon into these frameworks.\n\n---\n\n## Example Applications\n\nTo show how Horizon fits with your framework of choice, we've put together a handful of\nexample applications to help you get started.\n\n<img src=\"https://i.imgur.com/XFostB8.gif\" align=\"right\" width=\"450px\">\n\n* [Horizon Repo Examples Directory](https://github.com/rethinkdb/horizon/tree/next/examples)\n * [CycleJS Chat App](https://github.com/rethinkdb/horizon/tree/next/examples/cyclejs-chat-app)\n * [RiotJS Chat App](https://github.com/rethinkdb/horizon/tree/next/examples/riotjs-chat-app)\n * [React Chat App](https://github.com/rethinkdb/horizon/tree/next/examples/react-chat-app)\n * [React TodoMVC App](https://github.com/rethinkdb/horizon/tree/next/examples/react-todo-app)\n * [Vue Chat App](https://github.com/rethinkdb/horizon/tree/next/examples/vue-chat-app)\n * [Vue TodoMVC App](https://github.com/rethinkdb/horizon/tree/next/examples/vue-todo-app)\n\n\n## Extending Horizon Server\n\nWe also have a few examples of how you can extend Horizon Server. We imagine that once your application\ngrows beyond the needs of simply providing the Horizon Client API, you'll want to expand and build upon\nHorizon Server. Here are a few examples of how to extend Horizon Server with some popular Node web frameworks.\n\n* [Extending with Koa Server](https://github.com/rethinkdb/horizon/tree/next/examples/koa-server)\n* [Extending with Hapi Server](https://github.com/rethinkdb/horizon/tree/next/examples/hapi-server)\n* [Extending with Express Server](https://github.com/rethinkdb/horizon/tree/next/examples/express-server)\n\n[above]: https://github.com/rethinkdb/horizon/tree/next/client#above-limit-integer--key-value-closed-string-\n[below]: https://github.com/rethinkdb/horizon/tree/next/client#below-limit-integer--key-value-closed-string-\n[Collection]: https://github.com/rethinkdb/horizon/tree/next/client#collection\n[fetch]: https://github.com/rethinkdb/horizon/tree/next/client#fetch\n[find]: https://github.com/rethinkdb/horizon/tree/next/client#find---id-any-\n[findAll]: https://github.com/rethinkdb/horizon/tree/next/client#findall--id-any----id-any--\n[Horizon]: https://github.com/rethinkdb/horizon/tree/next/client#horizon\n[limit]: https://github.com/rethinkdb/horizon/tree/next/client#limit-num-integer-\n[order]: https://github.com/rethinkdb/horizon/tree/next/client#order---directionascending-\n[remove]: https://github.com/rethinkdb/horizon/tree/next/client#remove-id-any--id-any-\n[removeAll]: https://github.com/rethinkdb/horizon/tree/next/client#removeall--id-any--id-any-----id-any---id-any---\n[replace]: https://github.com/rethinkdb/horizon/tree/next/client#replace--\n[store]: https://github.com/rethinkdb/horizon/tree/next/client#store-------\n[store]: https://github.com/rethinkdb/horizon/tree/next/client#store-------\n[upsert]: https://github.com/rethinkdb/horizon/tree/next/client#upsert------\n[watch]: https://github.com/rethinkdb/horizon/tree/next/client#watch--rawchanges-false--\n"
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 0.078125,
          "content": "If you're reporting a bug please include the server version and client version.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\nCopyright (c) 2016 RethinkDB, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.9111328125,
          "content": "<img style=\"width:100%;\" src=\"/github-banner.png\">\n\n# Horizon\n\n[Official Repository](https://github.com/rethinkdb/horizon)\n\n## What is Horizon?\n\nHorizon is an open-source developer platform for building sophisticated realtime\napps. It provides a complete backend that makes it dramatically simpler to\nbuild, deploy, manage, and scale engaging JavaScript web and mobile apps.\nHorizon is extensible, integrates with the Node.js stack, and allows building\nmodern, arbitrarily complex applications.\n\nHorizon is built on top of [RethinkDB](https://www.rethinkdb.com) and consists of\nfour components:\n\n- [__Horizon server__](/server) -- a middleware server that connects to/is built on\n  top of RethinkDB, and exposes a simple API/protocol to front-end\n  applications.\n- [__Horizon client library__](/client) -- a JavaScript client library that wraps\n  Horizon server's protocol in a convenient API for front-end\n  developers.\n- [__Horizon CLI - `hz`__](/cli) -- a command-line tool aiding in scaffolding, development, and deployment\n- [__GraphQL support__](https://github.com/rethinkdb/horizon/issues/125) -- the server will have a GraphQL adapter so anyone can get started building React/Relay apps without writing any backend code at the beginning. This will not ship in v1, but we'll follow up with a GraphQL adapter quickly after launch.\n\nHorizon currently has all the following services available to developers:\n\n- ✅ __Subscribe__ -- a streaming API for building realtime apps directly from the\n  browser without writing any backend code.\n- ✅ __Auth__ -- an authentication API that connects to common auth providers\n  (e.g. Facebook, Google, GitHub).\n- ✅ __Identity__ -- an API for listing and manipulating user accounts.\n- ✅ __Permissions__ -- a security model that allows the developer to protect\n   data from unauthorized access.\n\nUpcoming versions of Horizon will likely expose the following\nadditional services:\n\n- __Session management__ -- manage browser session and session\n  information.\n- __Geolocation__ -- an API that makes it very easy to build\n  location-aware apps.\n- __Presence__ -- an API for detecting presence information for a given\n  user and sharing it with others.\n- __Plugins__ -- a system for extending Horizon with user-defined services\n  in a consistent, discoverable way.\n- __Backend__ -- an API/protocol to integrate custom backend code with\n  Horizon server/client-libraries.\n\n## Why Horizon?\n\nWhile technologies like [RethinkDB](http://www.rethinkdb.com) and\n[WebSocket](https://en.wikipedia.org/wiki/WebSocket) make it possible to build\nengaging realtime apps, empirically there is still too much friction for most\ndevelopers. Building realtime apps now requires understanding and manually\norchestrating multiple systems across the software stack, understanding\ndistributed stream processing, and learning how to deploy and scale realtime systems. The\nlearning curve is quite steep, and most of the initial work involves boilerplate\ncode that is far removed from the primary task of building a realtime app.\n\nHorizon sets out to solve this problem. Developers can start building\napps using their favorite front-end framework using Horizon's APIs\nwithout having to write any backend code.\n\nSince Horizon stores data in RethinkDB, once the app gets sufficiently\ncomplex to need custom business logic on the backend, developers can\nincrementally add backend code at any time in the development cycle of\ntheir app.\n\n## Get Involved\n\nWe'd love for you to help us build Horizon. If you'd like to be a contributor,\ncheck out our [Contributing guide](/CONTRIBUTING.md).\n\nAlso, to stay up-to-date on all Horizon related news and the community you should\ndefinitely [join us on Slack](http://slack.rethinkdb.com) or [follow us on Twitter](https://twitter.com/horizonjs).\n\n![](/assets/Lets-go.png)\n\n## FAQ\n\nCheck out our FAQ at [horizon.io/faq](https://horizon.io/faq/)\n\n### How will Horizon be licensed?\n\nThe Horizon server, client and cli are available under the MIT license\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "circle.yml",
          "type": "blob",
          "size": 1.9580078125,
          "content": "## Customize the test machine\nmachine:\n\n  #timezone:\n  #  America/Los_Angeles # Set the timezone\n\n  # Set version of node to use\n  #node:\n  #  version:\n  #    5.7.0\n\n  post:\n    - source /etc/lsb-release && echo \"deb http://download.rethinkdb.com/apt $DISTRIB_CODENAME main\" | sudo tee /etc/apt/sources.list.d/rethinkdb.list\n    - wget -qO- https://download.rethinkdb.com/apt/pubkey.gpg | sudo apt-key add -\n    - sudo apt-get update -o Dir::Etc::sourcelist=\"/etc/apt/sources.list.d/rethinkdb.list\" -o Dir::Etc::sourceparts=\"-\" -o APT::Get::List-Cleanup=\"0\"\n    - sudo apt-get install rethinkdb\n\n## Set artifacts\n# general:\n#   artifacts:\n#     - \"client/npm-debug.log\"\n#     - \"server/npm-debug.log\"\n#     - \"cli/npm-debug.log\"\n\n## Customize dependencies\ndependencies:\n  # Cache directories for speed\n  cache_directories:\n    - client/node_modules\n    - server/node_modules\n    - cli/node_modules\n  override:\n    # Stop default services\n    #- sudo service redis-server stop\n    #- sudo service postgresql stop\n    #- sudo service mysql stop\n\n    # Prepare for client tests\n    #- npm prune --production:\n    #    pwd: client\n    # Prepare for server tests\n    #- npm prune --production:\n    #    pwd: server\n    #- npm prune --production:\n    #    pwd: cli\n    - ./setupDev.sh:\n        pwd: test\n\n## Customize test commands\ntest:\n  pre:\n    - ./test/serve.js:\n        background: true\n    # - mkdir -p $CIRCLE_TEST_REPORTS/xunit\n    # - touch $CIRCLE_TEST_REPORTS/xunit/cli-tests.xml\n    # - touch $CIRCLE_TEST_REPORTS/xunit/client-tests.xml\n    # - touch $CIRCLE_TEST_REPORTS/xunit/server-tests.xml\n  override:\n    # Run client tests\n    - ./node_modules/.bin/mocha --timeout 100000 dist/test.js:\n        pwd: client\n        parallel: false\n    # Run server tests\n    - ./node_modules/.bin/mocha --timeout 100000 test/test.js test/schema.js:\n        pwd: server\n        parallel: false\n    # Run cli tests\n    - ./node_modules/.bin/mocha --timeout 100000 test:\n        pwd: cli\n        parallel: false\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.dev.yml",
          "type": "blob",
          "size": 0.2978515625,
          "content": "rethinkdb:\n  image: rethinkdb\n  ports:\n    - \"28015:28015\"\n    - \"8080:8080\"\nhorizon:\n  image: rethinkdb/horizon\n  command: su -s /bin/sh horizon -c \"hz serve --dev --connect rethinkdb://rethinkdb:28015 --bind all /usr/app\"\n  volumes:\n    - ./:/usr/app\n  links:\n    - rethinkdb\n  ports:\n    - \"8181:8181\"\n"
        },
        {
          "name": "docker-compose.prod.yml",
          "type": "blob",
          "size": 0.2919921875,
          "content": "rethinkdb:\n  image: rethinkdb\n  ports:\n    - \"28015:28015\"\n    - \"8080:8080\"\nhorizon:\n  image: rethinkdb/horizon\n  command: su -s /bin/sh horizon -c \"hz serve --connect rethinkdb://rethinkdb:28015 --bind all /usr/app\"\n  volumes:\n    - ./:/usr/app\n  links:\n    - rethinkdb\n  ports:\n    - \"8181:8181\"\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "github-banner.png",
          "type": "blob",
          "size": 206.3134765625,
          "content": null
        },
        {
          "name": "horizon.png",
          "type": "blob",
          "size": 647.0498046875,
          "content": null
        },
        {
          "name": "protocol.md",
          "type": "blob",
          "size": 7.4853515625,
          "content": "### Handshake\nThe handshake is required before any requests can be served.  If the first message sent cannot be parsed as a handshake, the connection will be dropped.  The handshake will be used to associate the client with a specific user (and set of security rules) on the server.  This should be extensible in the same way as #12.\n\nFor now let's just leave this a placeholder, since we haven't gotten to authentication yet.\n\n#### Handshake Request\n```\n{\n  \"request_id\": <NUMBER>,\n  \"method\": \"unauthenticated\" | \"anonymous\" | \"token\",\n  \"token\": <STRING>,\n}\n```\n\n* `request_id` is a number uniquely identifying this request, it will be returned in the response.\n* `method` designates the type of authentication to be performed.\n  * `unauthenticated` performs no further steps and will not associate the connection with any user.\n  * `anonymous` will create a new account with no external authentication provider.\n  * `token` will associate the connection with the user in the horizon access token provided.\n* `token` is the horizon access token that the client must already possess.\n  * This field is required when `method` is `token`, and invalid otherwise.\n\n#### Handshake Response\n```\n{\n  \"request_id\": <NUMBER>,\n  \"token\": <STRING>\n}\n```\n* `token` is the horizon access token that is associated with this connection.\n  * This token may be used to establish new connections under the same user account until the token expires.\n\n#### Handshake Error Response\n```\n{\n  \"request_id\": <NUMBER>,\n  \"error\": <STRING>,\n  \"error_code\": <NUMBER>\n}\n```\n\n### Requests\n\nAll requests match the following pattern:\n```\n{\n  \"request_id\": <NUMBER>,\n  \"type\": <STRING>,\n  \"options\": <OBJECT>\n}\n```\n* `request_id` is a number uniquely identifying this request, it will be returned in any responses\n* `type` is the endpoint for the query - one of `query`, `subscribe`, `store_error`, `store_replace`, `update`, or `remove`.\n* `options` is an object structured differently for each endpoint.\n\n\n#### query, subscribe\n\n```\n{\n  \"request_id\": <NUMBER>,\n  \"type\": \"query\" | \"subscribe\",\n  \"options\": {\n    \"collection\": <STRING>,\n    \"order\": [ <ARRAY>, \"ascending\" | \"descending\"],\n    \"above\": [ <OBJECT>, \"open\" | \"closed\" ],\n    \"below\": [ <OBJECT>, \"open\" | \"closed\" ],\n    \"find\": <OBJECT>,\n    \"find_all\": [<OBJECT>, ...],\n    \"limit\": <NUMBER>,\n  }\n}\n```\n* `collection` describes which table to operate on in the horizon database.\n* `order` orders the results according to an array of fields - optional.\n  * The first argument is an array of field names, most-significant first.\n  * The second argument determines which direction the results are sorted in.\n* `above` and `below` are arrays describing the boundaries regarding `order` - optional.\n  * `above` and `below` can only be specified if `order` is provided.\n  * The first argument is an object whose key-value pairs correspond to fields in `order`.\n  * The second argument should be `closed` to include the boundary, and `open` otherwise.\n* `find` returns one object in `collection` that exactly matches the fields in the object given - optional.\n  * `find` cannot be used with `find_all`, `order`, `above`, or `below`.\n* `find_all` is an array of objects whose key-value pairs correspond to keys in `index` - optional.\n  * Returns any object in `collection` that exactly matches the fields in any of the objects given.\n  * `find_all` cannot be used with `find`.\n  * `find_all` with multiple objects cannot be used with `order`, `above`, or `below`.\n* `limit` limits the number of results to be selected - optional.\n\n#### insert, store, upsert, replace, update, remove\n\n```\n{\n  \"request_id\": <NUMBER>,\n  \"type\": \"store\" | \"update\" | \"upsert\" | \"insert\" | \"replace\" | \"remove\",\n  \"options\": {\n    \"collection\": <STRING>,\n    \"data\": [<OBJECT>, ... ]\n  }\n}\n```\n* `collection` describes which table to operate on in the horizon database\n* `data` is the documents to be written (or removed)\n  * `data[i].id` is required for `remove` operations, all other fields are optional\n  * `data[i].id` may be omitted in an `insert`, `store`, or `upsert` operations: a new row will be inserted in the collection\n* `type` is the write operation to perform\n  * `insert` inserts new documents, erroring if any document already exists\n  * `update` updates existing documents. It errors if any document does not already exist\n  * `upsert` updates existing documents or inserts them if they do not exist\n  * `replace` replaces existing documents entirely. It errors if any document does not already exist\n  * `store` replaces existing documents entirely, or inserts them if they don't exist.\n  * `remove` removes documents. It will not error if a document does not exist\n\n#### end_subscription\nTells the horizon server to stop sending data for a given subscription.  Data may still be received until the server has processed this and sent a `\"state\": \"complete\"` response for the subscription.\n```\n{\n  \"request_id\": <NUMBER>,\n  \"type\": \"end_subscription\"\n}\n```\n\n#### Keepalive\nThis is used by the client to perform an empty request to avoid connection interruption.\n```\n{\n  \"request_id\": <NUMBER>,\n  \"type\": \"keepalive\"\n}\n```\n\n### Responses\n\n#### Error Response\nThis can be sent for any request at any time.  Once an error response is sent, no further responses shall be sent for the corresponding `request_id`.\n```\n{\n  \"request_id\": <NUMBER>,\n  \"error\": <STRING>,\n  \"error_code\": <INTEGER>\n}\n```\n* `request_id` is the same as the `request_id` in the corresponding request\n* `error` is a descriptive error string\n* `error_code` is a code that can be used to identify the type of error, values TBD\n\n#### query, subscribe\n`query` and `subscribe` requests will result in a stream of results from the horizon server to the client.  The stream will be an ordered set of messages from the server following the structure below.  If an error occurs, the above Error Response structure will be used, and the stream is considered \"complete\".  An Error Response may still be sent even after a successful data response, but not after `\"state\": \"complete\"`.\n```\n{\n  \"request_id\": <NUMBER>,\n  \"data\": <ARRAY>,\n  \"state\": \"synced\" | \"complete\"\n}\n```\n* `request_id` is the same as the `request_id` in the corresponding request\n* `data` is an array of results for the `query` or `subscribe`, and may be empty\n* `state` is optional, and indicates a change in the stream of data:\n  * `synced` means that following the consumption of `data`, the client has all the initial results of a `subscribe`\n  * `complete` means that following the consumption of `data`, no more results will be returned for the request\n\n#### Write responses\n`store`, `replace`, `insert`, `update`, `upsert`, and `remove` requests will be given a single response.  This may be an Error Response, or:\n```\n{\n  \"request_id\": <NUMBER>,\n  \"data\": [ { \"id\": <DOCUMENT_ID>, \"$hz_v$\": <DOCUMENT_VERSION> } | { \"error\": <STRING>, \"error_code\": <INTEGER> }, ...],\n  \"state\": \"complete\"\n}\n```\n* `data` is an array of objects corresponding to the documents specified in the write (whether or not a change occurred). For inserted documents it will be the id generated by the server as well as the latest version field for the affected document.  If an error occurred, there will instead be an error description string and an error code in the object .  The items in the array correspond directly to the changes in the request, in the same order.\n* `state` can only be \"complete\" for write responses\n\n#### Keepalive\n`keepalive` requests will be given a single response.  This will never be an error response unless there is a protocol error.\n```\n{\n  \"request_id\": <NUMBER>,\n  \"state\": \"complete\"\n}\n```\n"
        },
        {
          "name": "rfcs",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "update_versions.py",
          "type": "blob",
          "size": 1.1689453125,
          "content": "#!/usr/bin/env python2\n'''What? A Python script in a JavaScript library? Well I never...\nThis script is just for updating versions of Horizon, it doesn't get\npackaged or have any use for consumers of Horizon itself.\n'''\n\nimport json\nimport sys\nfrom contextlib import contextmanager\nfrom collections import OrderedDict\n\n@contextmanager\ndef rewrite(filename):\n    with open(filename, 'rb') as f:\n        package_json = json.load(f, object_pairs_hook=OrderedDict)\n\n    yield package_json\n\n    with open(filename, 'wb') as f:\n        json.dump(package_json, f, indent=2, separators=(',', ': '))\n        f.write('\\n') # json dump gives no trailing newline\n\n\ndef main(version):\n    with rewrite('./client/package.json') as client_pkg:\n        client_pkg['version'] = version\n\n    with rewrite('./server/package.json') as server_pkg:\n        server_pkg['version'] = version\n        server_pkg['dependencies']['@horizon/client'] = version\n\n    with rewrite('./cli/package.json') as cli_pkg:\n        cli_pkg['version'] = version\n        cli_pkg['dependencies']['@horizon/server'] = version\n\n\nif __name__ == '__main__':\n    try:\n        main(sys.argv[1])\n    except:\n        print 'Please provide a version'"
        }
      ]
    }
  ]
}