{
  "metadata": {
    "timestamp": 1736563030471,
    "page": 662,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "thinkjs/thinkjs",
      "stars": 5306,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.0234375,
          "content": "{\n  \"extends\": \"think\"\n}"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5966796875,
          "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules\njspm_packages\n\n# Optional npm cache directory\n.npm\n\n# Optional REPL history\n.node_repl_history\n\ndemo/\n\ntest/**/*.json\n.DS_Store\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.0830078125,
          "content": "node_modules/\ncoverage/\ndemo/\ntest/\nISSUE_TEMPLATE.md\nCODE_OF_CONDUCT.md\nappveyor.yml"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2138671875,
          "content": "language: node_js\nnode_js:\n  - '8'\n  - '10'\n  - '12'\nsudo: false\nscript:\n    - \"npm run test\"\nafter_script: \"npm install coveralls && ./node_modules/.bin/nyc report --reporter=text-lcov | ./node_modules/.bin/coveralls\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0693359375,
          "content": "Copyright (c) 2013-2017 lichengyin (welefen@gmail.com) and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.9375,
          "content": "<div align=\"center\">\n  <a href=\"https://github.com/thinkjs/thinkjs\">\n    <img width=\"200\" heigth=\"200\" src=\"https://p1.ssl.qhimg.com/t01c74e1aaed13e64fc.png\">\n  </a>  \n\n  <h1>ThinkJS</h1>\n\n  <div>\n    <a href=\"http://badge.fury.io/js/thinkjs\">\n      <img src=\"https://img.shields.io/npm/v/thinkjs.svg?style=flat-square\" alt=\"NPM version\" />\n    </a>\n    <a href=\"https://travis-ci.org/thinkjs/thinkjs\">\n      <img src=\"https://img.shields.io/travis/thinkjs/thinkjs.svg?style=flat-square\" alt=\"travis-ci\" />\n    </a>\n    <a href=\"https://coveralls.io/github/thinkjs/thinkjs\">\n      <img src=\"https://img.shields.io/coveralls/thinkjs/thinkjs.svg?style=flat-square\" alt=\"Coverage Status\" />\n    </a>\n    <a href=\"https://david-dm.org/thinkjs/thinkjs\">\n      <img src=\"https://img.shields.io/david/thinkjs/thinkjs.svg?style=flat-square\" alt=\"Dependency Status\" />\n    </a>\n    <a href=\"http://packagequality.com/#?package=thinkjs\">\n      <img src=\"http://npm.packagequality.com/shield/thinkjs.svg\"/>\n    </a>\n    <a href=\"https://www.npmjs.com/package/thinkjs\">\n      <img src=\"https://img.shields.io/npm/dm/thinkjs.svg?style=flat-square\" />\n    </a>\n  </div>\n\n  <p>Use full ES2015+ features to develop Node.js applications, Support TypeScript.</p>\n</div>\n\n\n[简体中文文档](https://github.com/thinkjs/thinkjs/blob/master/README_zh-CN.md)\n\n\n## Installation\n\n```sh\nnpm install -g think-cli\n```\n\n## Create Application\n\n```sh\nthinkjs new demo\n```\n\n## Install dependencies\n\n```sh\nnpm install\n```\n\n## Start Application\n\n```sh\nnpm start\n```\n\nYou will see some messages on console like :\n\n```text\n[2017-05-22 15:54:58.281] [INFO] - Server running at http://127.0.0.1:8360\n[2017-05-22 15:54:58.283] [INFO] - ThinkJS version: 3.0.0-alpha1\n[2017-05-22 15:54:58.283] [INFO] - Environment: development\n[2017-05-22 15:54:58.284] [INFO] - Workers: 1\n```\n\n\n## Documentation\n\n[https://thinkjs.org/en](https://thinkjs.org/en)\n\n## License\n\n[MIT](https://github.com/thinkjs/thinkjs/blob/master/LICENSE)\n"
        },
        {
          "name": "README_zh-CN.md",
          "type": "blob",
          "size": 1.53125,
          "content": "<div align=\"center\">\n  <a href=\"https://github.com/thinkjs/thinkjs\">\n    <img width=\"200\" heigth=\"200\" src=\"https://p1.ssl.qhimg.com/t01c74e1aaed13e64fc.png\">\n  </a>  \n\n  <h1>ThinkJS</h1>\n\n  <div>\n    <a href=\"http://badge.fury.io/js/thinkjs\">\n      <img src=\"https://img.shields.io/npm/v/thinkjs.svg?style=flat-square\" alt=\"NPM version\" />\n    </a>\n    <a href=\"https://travis-ci.org/thinkjs/thinkjs\">\n      <img src=\"https://img.shields.io/travis/thinkjs/thinkjs.svg?style=flat-square\" alt=\"travis-ci\" />\n    </a>\n    <a href=\"https://coveralls.io/github/thinkjs/thinkjs\">\n      <img src=\"https://img.shields.io/coveralls/thinkjs/thinkjs.svg?style=flat-square\" alt=\"Coverage Status\" />\n    </a>\n    <a href=\"https://david-dm.org/thinkjs/thinkjs\">\n      <img src=\"https://img.shields.io/david/thinkjs/thinkjs.svg?style=flat-square\" alt=\"Dependency Status\" />\n    </a>\n  </div>\n\n  <p>Use full ES2015+ features to develop Node.js applications, Support TypeScript.</p>\n</div>\n\n## 安装 ThinkJS\n\n```sh\nnpm install -g think-cli\n```\n\n## 创建项目\n\n```sh\nthinkjs new demo\n```\n\n## 安装依赖\n\n```sh\nnpm install\n```\n\n## 启动服务\n\n```sh\nnpm start\n```\n\n启动后，会看到类似下面的信息：\n\n```text\n[2017-05-22 15:54:58.281] [INFO] - Server running at http://127.0.0.1:8360\n[2017-05-22 15:54:58.283] [INFO] - ThinkJS version: 3.0.0-alpha1\n[2017-05-22 15:54:58.283] [INFO] - Environment: development\n[2017-05-22 15:54:58.284] [INFO] - Workers: 1\n```\n\n## 文档\n\n<https://thinkjs.org/>\n\n## License\n\n[MIT](https://github.com/thinkjs/thinkjs/blob/master/LICENSE)\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.3896484375,
          "content": "environment:\n  matrix:\n    - nodejs_version: \"6.0\"\n    - nodejs_version: \"7.0\"\n    - nodejs_version: \"8.0\"\n    - nodejs_version: \"10.0\"\n    - nodejs_version: \"12.0\"\ninstall:\n  - ps: Install-Product node $env:nodejs_version\n  - set PATH=%APPDATA%\\npm;%PATH%\n  - npm -g install npm@latest\n  - npm install\nbuild: off\ntest_script:\n  - node --version\n  - npm --version\n  - npm run test\nversion: \"{build}\""
        },
        {
          "name": "index.d.ts",
          "type": "blob",
          "size": 9.8671875,
          "content": "\nimport * as Koa from 'koa';\nimport * as Helper from 'think-helper';\nimport * as ThinkCluster from 'think-cluster';\nimport { Think } from 'thinkjs';\n\ndeclare module 'thinkjs' {\n  export interface Application extends Koa {\n    think: Think;\n    request: Request;\n    response: Response;\n  }\n\n  export interface Request extends Koa.Request {\n  }\n\n  export interface Response extends Koa.Response {\n  }\n\n  interface ThinkCookie {\n    /**\n     * get cookie\n     */\n    cookie(name: string): string;\n\n    /**\n     * set cookie\n     */\n    cookie(name: string, value: string, options?: object): void;\n    /**\n     *\n     *  delete cookie\n     */\n    cookie(name: string, value: null, options?: object): void;\n  }\n  interface ThinkConfig {\n    /**\n     * get config\n     */\n    config(name: string): any;\n    /**\n     * set config\n     */\n    config(name: string, value: string): any;\n    /**\n     * get or set config\n     */\n    config(name: string, value?: string, module?: string): any;\n\n    /**\n     * set config for all modules\n     */\n    config(name: string, value: string, module: true): any;\n  }\n\n  export interface Context extends Koa.Context, ThinkCookie, ThinkConfig {\n    request: Request;\n    response: Response;\n    readonly module: string;\n    readonly controller: string;\n    readonly action: string;\n    /**\n     * get userAgent header\n     * @memberOf Context\n     */\n    readonly userAgent: string;\n    /**\n     * is get request\n     * @memberOf Context\n     */\n    readonly isGet: boolean;\n    /**\n     * is post request\n     * @memberOf Context\n     */\n    readonly isPost: boolean;\n    /**\n     * is command line invoke\n     * @memberOf Context\n     */\n    readonly isCli: boolean;\n    /**\n     * get referer header\n     * @memberOf Context\n     */\n    referer(onlyHost: boolean): string;\n    /**\n     * get referer header\n     * @memberOf Context\n     */\n    referrer(onlyHost: boolean): string;\n    /**\n     * @memberOf Context\n     */\n    isMethod(method: string): boolean;\n    /**\n     * is ajax request\n     * @memberOf Context\n     */\n    isAjax(method?: string): boolean;\n    /**\n     * is jsonp request\n     *  callbackField default to this.config('jsonpCallbackField')\n     *\n     * @memberOf Context\n     */\n    isJsonp(callbackField?: string): boolean;\n\n    /**\n     * send jsonp data, callbackField default to this.config('jsonpCallbackField')\n     *\n     * @memberOf Context\n     */\n    jsonp(data: any, callbackField?: string): any;\n    /**\n     * send json data\n     * @memberOf Context\n     */\n    json(data: any): any;\n    /**\n     * send success data\n     * @memberOf Context\n     */\n    success(data?: object | string, message?: string): any;\n\n    /**\n     * send fail data\n     * @memberOf Context\n     */\n    fail(errno: any, errmsg?: object | string, data?: any): any;\n    /**\n     * set expires header\n     * @memberOf Context\n     */\n    expires(time: any): any\n\n    /**\n     * get param\n     *\n     * @memberOf Context\n     */\n    param(): object;\n\n    /**\n     * get param\n     * name can be slit by comma 'field1,field2' or 'field'\n     *\n     * @memberOf Context\n     */\n    param(name: string): object;\n\n\n    /**\n     *\n     * set param\n     *\n     * @memberOf Context\n     */\n    param(value: object): this\n    /**\n     * get query data\n     * `query` or `get` is already used in koa\n     * @memberOf Context\n     */\n    param(name: string, value: any): this\n    /**\n     * get post data\n     * @memberOf Context\n     */\n    post(): object;\n\n    /**\n     * set post data\n     * @memberOf Context\n     */\n    post(value: object): this;\n\n    /**\n     * get post data, name can be split by comma 'field1,field2' or 'field'\n     * @memberOf Context\n     */\n    post(name: string): any;\n\n\n    /**\n     *\n     * set post value\n     * @memberOf Context\n     */\n    post(name: string, value: any): this;\n\n\n    /**\n     * get file data\n     *\n     * @memberOf Context\n     */\n    file(): object;\n\n    /**\n     * set file data\n     *\n     * @memberOf Context\n     */\n    file(data: object): this;\n\n\n    /**\n     * get file data by name\n     * @memberOf Context\n     */\n    file(name: string): any;\n\n\n    /**\n     * get file data\n     *\n     * @memberOf Context\n     */\n    file(name: string, value: any): this;\n\n    /**\n     * get service\n     *\n     * @memberOf Context\n     */\n    service(name: string, module?: string, ...args: any[]): any;\n\n    /**\n     * download\n     * @memberOf Context\n     */\n    download(filepath: string, filename?: string): void;\n  }\n\n  export interface Controller extends ThinkCookie, ThinkConfig {\n\n    ctx: Context;\n    body: any;\n    readonly ip: string;\n    readonly ips: string[];\n    status: number | string;\n    type: string;\n\n    /**\n     * get userAgent header\n     * @memberOf Controller\n     */\n    readonly userAgent: string;\n    readonly method: string;\n    /**\n     * is get request\n     * @memberOf Controller\n     */\n    readonly isGet: boolean;\n    /**\n     * is post request\n     * @memberOf Controller\n     */\n    readonly isPost: boolean;\n    /**\n     * is command line invoke\n     * @memberOf Controller\n     */\n    readonly isCli: boolean;\n    /**\n     * @memberOf Controller\n     */\n    isMethod(method: string): boolean;\n    /**\n     * is ajax request\n     * @memberOf Controller\n     */\n    isAjax(method: string): boolean;\n\n    /**\n     * is jsonp request\n     *  callbackField default to this.config('jsonpCallbackField')\n     *\n     * @memberOf Controller\n     */\n    isJsonp(callbackField?: string): boolean;\n    /**\n     * send jsonp data, callbackField default to this.config('jsonpCallbackField')\n     *\n     * @memberOf Controller\n     */\n    jsonp(data: any, callbackField?: string): any;\n\n    /**\n     * send json data\n     * @memberOf Controller\n     */\n    json(data: any): any;\n\n    /**\n     * send success data\n     * @memberOf Controller\n     */\n    success(data?: object | string, message?: string): any;\n\n    /**\n     * send fail data\n     * @memberOf Controller\n     */\n    fail(errno: any, errmsg?: string, data?: any): any;\n    /**\n     * set expires header\n     * @memberOf Controller\n     */\n    expires(time: any): any\n\n    /**\n     * get or set param\n     *\n     * @memberOf Controller\n     */\n    get(name?: string, value?: any): any;\n    /**\n     * get or set param\n     *\n     * @memberOf Controller\n     */\n    query(name?: string, value?: any): any;\n\n    /**\n    * get post data\n    * @memberOf Controller\n    */\n    post(): object;\n\n    /**\n     * set post data\n     * @memberOf Controller\n     */\n    post(value: object): this;\n\n    /**\n     * get post data, name can be split by comma 'field1,field2' or 'field'\n     * @memberOf Controller\n     */\n    post(name: string): any;\n\n\n    /**\n     *\n     * set post value\n     * @memberOf Controller\n     */\n    post(name: string, value: any): this;\n    /**\n     * get or set file data\n     *\n     * @memberOf Controller\n     */\n    file(name?: string, value?: any): any;\n\n\n    /**\n     * get this.ctx.header[name]\n     * @memberOf Controller\n     */\n    header(name: string): Promise<string>;\n\n    /**\n     * get or set headere\n     * @memberOf Controller\n     */\n    header(name?: string, value?: any): any;\n\n    /**\n     * this.ctx.set\n     *\n     * @memberOf Controller\n     */\n    header(keyValues: object): any;\n\n    /**\n     * get referer header\n     * @memberOf Controller\n     */\n    referer(onlyHost: boolean): string;\n    /**\n     * get referer header\n     * @memberOf Controller\n     */\n    referrer(onlyHost: boolean): string;\n    /**\n    * Perform a 302 redirect to `url`.\n    *\n    * The string \"back\" is special-cased\n    * to provide Referrer support, when Referrer\n    * is not present `alt` or \"/\" is used.\n    *\n    * Examples:\n    *\n    *    this.redirect('back');\n    *    this.redirect('back', '/index.html');\n    *    this.redirect('/login');\n    *    this.redirect('http://google.com');\n    */\n    redirect(url: string, alt?: string): void;\n\n    /**\n     * get controller instance\n     * @memberOf Controller\n     */\n    controller(name: string, module?: string): this;\n    /**\n     *\n     * set param\n     *\n     * @memberOf Controller\n     */\n    param(value: object): this\n    /**\n     * get query data\n     * `query` or `get` is already used in koa\n     * @memberOf Controller\n     */\n    param(name: string, value: any): this\n\n    /**\n     * get service\n     *\n     * @memberOf Controller\n     */\n    service(name: string, module?: string, ...args: any[]): any;\n\n\n    /**\n     * execute action\n     *\n     * @memberOf Controller\n     */\n    action(controller: this, actionsName: string, module?: string): Promise<any>;\n\n    /**\n     *\n     * execute action\n     *\n     * @memberOf Controller\n     */\n    action(controllerName: string, actionsName: string, module?: string): Promise<any>;\n    /**\n     * download\n     * @memberOf Controller\n     */\n    download(filepath: string, filename?: string): void;\n  }\n\n  export interface TController extends Controller {\n    new(ctx: Context): Controller;\n  }\n\n  export interface Service {\n    new(): Service;\n  }\n\n  export interface Logger {\n    debug(msg: string): void;\n    info(msg: string): void;\n    warn(msg: string): void;\n    error(msg: string): void;\n  }\n\n  export interface Logic extends Controller {\n    validate(rules: Object, msgs?: Object): Object;\n    validateErrors?: Object;\n    allowMethods: string;\n    rules: Object;\n  }\n\n  export interface TLogic extends Logic {\n    new(ctx: Context): Logic;\n  }\n\n  export interface Think extends Helper.Think, ThinkConfig {\n    app: Application;\n    isCli: boolean;\n    /**\n     * Get thisnk.app.env.\n     */\n    env: string;\n    version: string;\n    messenger: ThinkCluster.Messenger;\n    ROOT_PATH: string;\n    APP_PATH: string;\n    RUNTIME_PATH: string;\n    logger: Logger;\n\n    Controller: TController;\n    Logic: TLogic;\n    Service: Service;\n\n    service(name: string): any;\n    service(name: string, ...args: any[]): any;\n    service(name: string, m: any, ...args: any[]): any;\n    beforeStartServer(fn: Function): Promise<any>;\n  }\n\n  export var think : Think;\n}\n\ndeclare global {\n  var think: Think\n}"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.185546875,
          "content": "{\n  \"name\": \"thinkjs\",\n  \"description\": \"ThinkJS - Use full ES6+ features to develop web applications\",\n  \"version\": \"3.2.15\",\n  \"author\": {\n    \"name\": \"welefen\",\n    \"email\": \"welefen@gmail.com\"\n  },\n  \"pre-commit\": [\n    \"test\"\n  ],\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run test-cov\",\n    \"test-cov\": \"nyc ava test/case/ && nyc report --reporter=html\",\n    \"lint\": \"eslint ./lib/ index.js\",\n    \"prepublish\": \"npm test\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"welefen\",\n      \"email\": \"welefen@gmail.com\"\n    },\n    {\n      \"name\": \"im-kulikov\",\n      \"email\": \"im@kulikov.im\"\n    },\n    {\n      \"name\": \"maxzhang\",\n      \"email\": \"zhangdaiping@gmail.com\"\n    },\n    {\n      \"name\": \"akira-cn\",\n      \"email\": \"akira.cn@gmail.com\"\n    },\n    {\n      \"name\": \"qgy18\",\n      \"email\": \"quguangyu@gmail.com\"\n    }\n  ],\n  \"main\": \"lib/application.js\",\n  \"types\": \"index.d.ts\",\n  \"dependencies\": {\n    \"cookies\": \"^0.8.0\",\n    \"debug\": \"^3.1.0\",\n    \"destroy\": \"^1.0.4\",\n    \"koa\": \"^2.13.1\",\n    \"on-finished\": \"^2.3.0\",\n    \"think-cluster\": \"^1.5.8\",\n    \"think-config\": \"^1.1.2\",\n    \"think-controller\": \"^1.0.5\",\n    \"think-crontab\": \"^1.0.0\",\n    \"think-helper\": \"^1.1.3\",\n    \"think-loader\": \"^1.0.0\",\n    \"think-logger3\": \"^1.2.1\",\n    \"think-logic\": \"^1.0.0\",\n    \"think-meta\": \"^1.0.1\",\n    \"think-mock-http\": \"^1.0.6\",\n    \"think-payload\": \"^1.3.4\",\n    \"think-pm2\": \"^1.0.0\",\n    \"think-resource\": \"^1.0.0\",\n    \"think-router\": \"^1.3.5\",\n    \"think-trace\": \"^1.0.18\",\n    \"think-validator\": \"^1.6.7\"\n  },\n  \"devDependencies\": {\n    \"ava\": \"^0.18.0\",\n    \"eslint\": \"^4.2.0\",\n    \"eslint-config-think\": \"^1.0.2\",\n    \"mkdirp\": \"^0.5.1\",\n    \"mock-require\": \"^2.0.1\",\n    \"nyc\": \"^7.0.0\",\n    \"pre-commit\": \"^1.2.2\"\n  },\n  \"keywords\": [\n    \"thinkjs\",\n    \"framework\",\n    \"web\",\n    \"rest\",\n    \"restful\",\n    \"router\",\n    \"api\",\n    \"es6\",\n    \"es7\",\n    \"async\",\n    \"await\",\n    \"yield\",\n    \"websocket\",\n    \"generator-function\",\n    \"typescript\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/thinkjs/thinkjs\"\n  },\n  \"engines\": {\n    \"node\": \">=6.0.0\"\n  },\n  \"license\": \"MIT\",\n  \"readmeFilename\": \"README.md\",\n  \"bugs\": {\n    \"url\": \"https://github.com/thinkjs/thinkjs/issues\"\n  }\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}