{
  "metadata": {
    "timestamp": 1736562824422,
    "page": 386,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MikeMcl/decimal.js",
      "stars": 6577,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.0166015625,
          "content": "test\nexcluded\n.*\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2158203125,
          "content": "language: node_js\nnode_js:\n  - \"node\"\n  - \"18\"\n  - \"17\"\n  - \"16\"\n  - \"15\"\n  - \"14\"\n  - \"13\"\n  - \"12\"\n  - \"11\"\n  - \"10\"\n  - \"9\"\n  - \"8\"\n  - \"7\"\n  - \"6\"\n  - \"5\"\n  - \"4\"\n  - \"0.12\"\n  - \"0.11\"\n  - \"0.10\"\n  - \"0.8\"\n  - \"iojs\"\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.8916015625,
          "content": "#### 10.4.3\n* 04/12/2022\n* #211 Remove `toStringTag` declaration for type compatibility.\n\n#### 10.4.2\n* 12/10/2022\n* #209 Correct return type.\n\n#### 10.4.1\n* 16/09/2022\n* #205 Add './decimal' subpath to *package.json* `exports`.\n\n#### 10.4.0\n* 14/08/2022\n* #201 Add `exports` field to *package.json*.\n* #203 Preserve license comment after bundling.\n* #198 Use type predicate on `isDecimal`.\n\n#### 10.3.1\n* 25/06/2021\n* Remove minified versions. Refresh *README*.\n\n#### 10.3.0\n* 22/06/2021\n* Support underscores as separators.\n* #101 Add `Decimal.clamp` method.\n* #161 Fix Decimal instances deemed plain objects.\n* #100 Add `Decimal.sum` method.\n* #146 `Symbol.for` to `Symbol['for']` for IE8.\n* #132 Fix possible infinite loop when `minE` is very low.\n* #180 Accept Decimals of different origin.\n* Update Typescript definitions.\n* Update minification examples in *README*.\n* Add minified versions for both *decimal.js* and *decimal.mjs*.\n* Add *files* field to *package.json*, and remove build script.\n\n#### 10.2.1\n* 28/09/2020\n* Correct `sqrt` initial estimate.\n\n#### 10.2.0\n* 08/05/2019\n* #128 Workaround V8 `Math.pow` change.\n* #93 Accept `+` prefix when parsing string values.\n* #129 Fix typo.\n\n#### 10.1.1\n* 27/02/2019\n* Check `Symbol` properly.\n\n#### 10.1.0\n* 26/02/2019\n* #122 Add custom `util.inspect()` function.\n* Add `Symbol.toStringTag`.\n* #121 Constructor: add range check for arguments of type number and Decimal.\n* Remove premable from uglifyjs build script.\n* Move *decimal.min.js.map* to root directory.\n\n#### 10.0.2\n* 13/12/2018\n* #114 Remove soureMappingURL from *decimal.min.js*.\n* Remove *bower.json*.\n\n#### 10.0.1\n* 24/05/2018\n* Add `browser` field to *package.json*.\n\n#### 10.0.0\n* 10/03/2018\n* #88 `toNearest` to return the nearest multiple in the direction of the rounding mode.\n* #82 #91 `const` to `var`.\n* Add trigonometric precision limit explanantion to documentation.\n* Put global ts definitions in separate file (see *bignumber.js* #143).\n\n#### 9.0.1\n* 15/12/2017\n* #80 Typings: correct return type.\n\n#### 9.0.0\n* 14/12/2017\n* #78 Typings: remove `toFormat`.\n\n#### 8.0.0\n* 10/12/2017\n* Correct typings: `toFraction` returns `Decimal[]`.\n* Type-checking: add `Decimal.isDecimal` method.\n* Enable configuration reset with `defaults: true`.\n* Add named export, Decimal, to *decimal.mjs*.\n\n#### 7.5.1\n* 03/12/2017\n* Remove typo.\n\n#### 7.5.0\n* 03/12/2017\n* Use TypeScript declarations outside modules.\n\n#### 7.4.0\n* 25/11/2017\n* Add TypeScript typings.\n\n#### 7.3.0\n* 26/09/2017\n* Rename *decimal.es6.js* to *decimal.mjs*.\n* Amend  *.travis.yml*.\n\n#### 7.2.4\n* 09/09/2017\n* Update docs regarding `global.crypto`.\n* Fix `import` issues.\n\n#### 7.2.3\n* 27/06/2017\n* Bugfix: #58 `pow` sometimes throws when result is `Infinity`.\n\n#### 7.2.2\n* 25/06/2017\n* Bugfix: #57 Powers of -1 for integers over `Number.MAX_SAFE_INTEGER`.\n\n#### 7.2.1\n* 04/05/2017\n* Fix *README* badges.\n\n#### 7.2.0\n* 09/04/2017\n* Add *decimal.es6.js*\n\n#### 7.1.2\n* 05/04/2017\n* `Decimal.default` to `Decimal['default']` IE8 issue\n\n#### 7.1.1\n* 10/01/2017\n* Remove duplicated for-loop\n* Minor refactoring\n\n#### 7.1.0\n* 09/11/2016\n* Support ES6 imports.\n\n#### 7.0.0\n* 09/11/2016\n* Remove `require('crypto')` - leave it to the user\n* Default `Decimal.crypto` to `false`\n* Add `Decimal.set` as `Decimal.config` alias\n\n#### 6.0.0\n* 30/06/2016\n* Removed base-88 serialization format\n* Amended `toJSON` and removed `Decimal.fromJSON` accordingly\n\n#### 5.0.8\n* 09/03/2016\n* Add newline to single test results\n* Correct year\n\n#### 5.0.7\n* 29/02/2016\n* Add decimal.js-light link\n* Remove outdated example from docs\n\n#### 5.0.6\n* 22/02/2016\n* Add bower.json\n\n#### 5.0.5\n* 20/02/2016\n* Bugfix: #26 wrong precision applied\n\n#### 5.0.4\n* 14/02/2016\n* Bugfix: #26 clone\n\n#### 5.0.3\n* 06/02/2016\n* Refactor tests\n\n#### 5.0.2\n* 05/02/2016\n* Added immutability tests\n* Minor *decimal.js* clean-up\n\n#### 5.0.1\n* 28/01/2016\n* Bugfix: #20 cos mutates value\n* Add pi info to docs\n\n#### 5.0.0\n* 25/01/2016\n* Added trigonometric functions and `cubeRoot` method\n* Added most of JavaScript's `Math` object methods as Decimal methods\n* Added `toBinary`, `toHexadecimal` and `toOctal` methods\n* Added `isPositive` method\n* Removed the 15 significant digit limit for numbers\n* `toFraction` now returns an array of two Decimals, not two strings\n* String values containing whitespace or a plus sign are no longer accepted\n* `valueOf` now returns `'-0'` for minus zero\n* `comparedTo` now returns `NaN` not `null` for comparisons with `NaN`\n* `Decimal.max` and `Decimal.min` no longer accept an array\n* The Decimal constructor and `toString` no longer accept a base argument\n* Binary, hexadecimal and octal prefixes are now recognised for string values\n* Removed `Decimal.errors` configuration property\n* Removed `toFormat` method\n* Removed `Decimal.ONE`\n* Renamed `exponential` method to `naturalExponential`\n* Renamed `Decimal.constructor` method to `Decimal.clone`\n* Simplified error handling and amended error messages\n* Refactored the test suite\n* `Decimal.crypto` is now `undefined` by default, and the `crypto` object will be used if available\n* Major internal refactoring\n* Removed *bower.json*\n\n#### 4.0.2\n* 20/02/2015 Add bower.json. Add source map. Amend travis CI. Amend doc/comments\n\n#### 4.0.1\n* 11/12/2014 Assign correct constructor when duplicating a Decimal\n\n#### 4.0.0\n* 10/11/2014 `toFormat` amended to use `Decimal.format` object for more flexible configuration\n\n#### 3.0.1\n* 8/06/2014 Surround crypto require in try catch. See issue #5\n\n#### 3.0.0\n* 4/06/2014 `random` simplified. Major internal changes mean the properties of a Decimal must now be considered read-only\n\n#### 2.1.0\n* 4/06/2014 Amend UMD\n\n#### 2.0.3\n* 8/05/2014 Fix NaN toNumber\n\n#### 2.0.2\n* 30/04/2014 Correct doc links\n\n#### 2.0.1\n* 10/04/2014 Update npmignore\n\n#### 2.0.0\n* 10/04/2014 Add `toSignificantDigits`\n* Remove `toInteger`\n* No arguments to `ceil`, `floor`, `round` and `trunc`\n\n#### 1.0.1\n* 07/04/2014 Minor documentation clean-up\n\n#### 1.0.0\n* 02/04/2014 Initial release\n"
        },
        {
          "name": "LICENCE.md",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT Licence.\n\nCopyright (c) 2022 Michael Mclaughlin\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.1337890625,
          "content": "![decimal.js](https://raw.githubusercontent.com/MikeMcl/decimal.js/gh-pages/decimaljs.png)\n\nAn arbitrary-precision Decimal type for JavaScript.\n\n[![npm version](https://img.shields.io/npm/v/decimal.js.svg)](https://www.npmjs.com/package/decimal.js)\n[![npm downloads](https://img.shields.io/npm/dw/decimal.js)](https://www.npmjs.com/package/decimal.js)\n[![Build Status](https://travis-ci.org/MikeMcl/decimal.js.svg)](https://travis-ci.org/MikeMcl/decimal.js)\n[![CDNJS](https://img.shields.io/cdnjs/v/decimal.js.svg)](https://cdnjs.com/libraries/decimal.js)\n\n<br>\n\n## Features\n\n  - Integers and floats\n  - Simple but full-featured API\n  - Replicates many of the methods of JavaScript's `Number.prototype` and `Math` objects\n  - Also handles hexadecimal, binary and octal values\n  - Faster, smaller, and perhaps easier to use than JavaScript versions of Java's BigDecimal\n  - No dependencies\n  - Wide platform compatibility: uses JavaScript 1.5 (ECMAScript 3) features only\n  - Comprehensive [documentation](https://mikemcl.github.io/decimal.js/) and test set\n  - Used under the hood by [math.js](https://github.com/josdejong/mathjs)\n  - Includes a TypeScript declaration file: *decimal.d.ts*\n\n![API](https://raw.githubusercontent.com/MikeMcl/decimal.js/gh-pages/API.png)\n\nThe library is similar to [bignumber.js](https://github.com/MikeMcl/bignumber.js/), but here\nprecision is specified in terms of significant digits rather than decimal places, and all\ncalculations are rounded to the precision (similar to Python's decimal module) rather than just\nthose involving division.\n\nThis library also adds the trigonometric functions, among others, and supports non-integer powers,\nwhich makes it a significantly larger library than *bignumber.js* and the even smaller\n[big.js](https://github.com/MikeMcl/big.js/).\n\nFor a lighter version of this library without the trigonometric functions see\n[decimal.js-light](https://github.com/MikeMcl/decimal.js-light/).\n\n## Load\n\nThe library is the single JavaScript file *decimal.js* or ES module *decimal.mjs*.\n\nBrowser:\n\n```html\n<script src='path/to/decimal.js'></script>\n\n<script type=\"module\">\n  import Decimal from './path/to/decimal.mjs';\n  ...\n</script>\n```\n\n[Node.js](https://nodejs.org):\n\n```bash\nnpm install decimal.js\n```\n```js\nconst Decimal = require('decimal.js');\n\nimport Decimal from 'decimal.js';\n\nimport {Decimal} from 'decimal.js';\n```\n\n## Use\n\n*In all examples below, semicolons and `toString` calls are not shown.\nIf a commented-out value is in quotes it means `toString` has been called on the preceding expression.*\n\nThe library exports a single constructor function, `Decimal`, which expects a single argument that is a number, string or Decimal instance.\n\n```js\nx = new Decimal(123.4567)\ny = new Decimal('123456.7e-3')\nz = new Decimal(x)\nx.equals(y) && y.equals(z) && x.equals(z)        // true\n```\n\nIf using values with more than a few digits, it is recommended to pass strings rather than numbers to avoid a potential loss of precision.\n\n```js\n// Precision loss from using numeric literals with more than 15 significant digits.\nnew Decimal(1.0000000000000001)         // '1'\nnew Decimal(88259496234518.57)          // '88259496234518.56'\nnew Decimal(99999999999999999999)       // '100000000000000000000'\n\n// Precision loss from using numeric literals outside the range of Number values.\nnew Decimal(2e+308)                     // 'Infinity'\nnew Decimal(1e-324)                     // '0'\n\n// Precision loss from the unexpected result of arithmetic with Number values.\nnew Decimal(0.7 + 0.1)                  // '0.7999999999999999'\n```\n\nAs with JavaScript numbers, strings can contain underscores as separators to improve readability.\n\n```js\nx = new Decimal('2_147_483_647')\n```\n\nString values in binary, hexadecimal or octal notation are also accepted if the appropriate prefix is included.\n\n```js\nx = new Decimal('0xff.f')            // '255.9375'\ny = new Decimal('0b10101100')        // '172'\nz = x.plus(y)                        // '427.9375'\n\nz.toBinary()                         // '0b110101011.1111'\nz.toBinary(13)                       // '0b1.101010111111p+8'\n\n// Using binary exponential notation to create a Decimal with the value of `Number.MAX_VALUE`.\nx = new Decimal('0b1.1111111111111111111111111111111111111111111111111111p+1023')\n// '1.7976931348623157081e+308'\n```\n\nDecimal instances are immutable in the sense that they are not changed by their methods.\n\n```js\n0.3 - 0.1                     // 0.19999999999999998\nx = new Decimal(0.3)\nx.minus(0.1)                  // '0.2'\nx                             // '0.3'\n```\n\nThe methods that return a Decimal can be chained.\n\n```js\nx.dividedBy(y).plus(z).times(9).floor()\nx.times('1.23456780123456789e+9').plus(9876.5432321).dividedBy('4444562598.111772').ceil()\n```\n\nMany method names have a shorter alias.\n\n```js\nx.squareRoot().dividedBy(y).toPower(3).equals(x.sqrt().div(y).pow(3))     // true\nx.comparedTo(y.modulo(z).negated() === x.cmp(y.mod(z).neg())              // true\n```\n\nMost of the methods of JavaScript's `Number.prototype` and `Math` objects are replicated.\n\n```js\nx = new Decimal(255.5)\nx.toExponential(5)                       // '2.55500e+2'\nx.toFixed(5)                             // '255.50000'\nx.toPrecision(5)                         // '255.50'\n\nDecimal.sqrt('6.98372465832e+9823')      // '8.3568682281821340204e+4911'\nDecimal.pow(2, 0.0979843)                // '1.0702770511687781839'\n\n// Using `toFixed()` to avoid exponential notation:\nx = new Decimal('0.0000001')\nx.toString()                             // '1e-7'\nx.toFixed()                              // '0.0000001'\n```\n\nAnd there are `isNaN` and `isFinite` methods, as `NaN` and `Infinity` are valid `Decimal` values.\n\n```js\nx = new Decimal(NaN)                                           // 'NaN'\ny = new Decimal(Infinity)                                      // 'Infinity'\nx.isNaN() && !y.isNaN() && !x.isFinite() && !y.isFinite()      // true\n```\n\nThere is also a `toFraction` method with an optional *maximum denominator* argument.\n\n```js\nz = new Decimal(355)\npi = z.dividedBy(113)        // '3.1415929204'\npi.toFraction()              // [ '7853982301', '2500000000' ]\npi.toFraction(1000)          // [ '355', '113' ]\n```\n\nAll calculations are rounded according to the number of significant digits and rounding mode specified\nby the `precision` and `rounding` properties of the Decimal constructor.\n\nFor advanced usage, multiple Decimal constructors can be created, each with their own independent\nconfiguration which applies to all Decimal numbers created from it.\n\n```js\n// Set the precision and rounding of the default Decimal constructor\nDecimal.set({ precision: 5, rounding: 4 })\n\n// Create another Decimal constructor, optionally passing in a configuration object\nDec = Decimal.clone({ precision: 9, rounding: 1 })\n\nx = new Decimal(5)\ny = new Dec(5)\n\nx.div(3)                           // '1.6667'\ny.div(3)                           // '1.66666666'\n```\n\nThe value of a Decimal is stored in a floating point format in terms of its digits, exponent and sign, but these properties should be considered read-only.\n\n```js\nx = new Decimal(-12345.67);\nx.d                            // [ 12345, 6700000 ]    digits (base 10000000)\nx.e                            // 4                     exponent (base 10)\nx.s                            // -1                    sign\n```\n\nFor further information see the [API](http://mikemcl.github.io/decimal.js/) reference in the *doc* directory.\n\n## Test\n\nTo run the tests using Node.js from the root directory:\n\n```bash\nnpm test\n```\n\nEach separate test module can also be executed individually, for example:\n\n```bash\nnode test/modules/toFraction\n```\n\nTo run the tests in a browser, open *test/test.html*.\n\n## Minify\n\nTwo minification examples:\n\nUsing [uglify-js](https://github.com/mishoo/UglifyJS) to minify the *decimal.js* file:\n\n```bash\nnpm install uglify-js -g\nuglifyjs decimal.js --source-map url=decimal.min.js.map -c -m -o decimal.min.js\n```\n\nUsing [terser](https://github.com/terser/terser) to minify the ES module version, *decimal.mjs*:\n\n```bash\nnpm install terser -g\nterser decimal.mjs --source-map url=decimal.min.mjs.map -c -m --toplevel -o decimal.min.mjs\n```\n\n```js\nimport Decimal from './decimal.min.mjs';\n```\n\n## Licence\n\n[The MIT Licence (Expat).](LICENCE.md)\n"
        },
        {
          "name": "decimal.d.ts",
          "type": "blob",
          "size": 8.447265625,
          "content": "// Type definitions for decimal.js >=7.0.0\n// Project: https://github.com/MikeMcl/decimal.js\n// Definitions by: Michael Mclaughlin <https://github.com/MikeMcl>\n// Definitions: https://github.com/MikeMcl/decimal.js\n//\n// Documentation: http://mikemcl.github.io/decimal.js/\n//\n// Exports:\n//\n//   class     Decimal (default export)\n//   type      Decimal.Constructor\n//   type      Decimal.Instance\n//   type      Decimal.Modulo\n//   type      Decimal.Rounding\n//   type      Decimal.Value\n//   interface Decimal.Config\n//\n// Example (alternative syntax commented-out):\n//\n//   import {Decimal} from \"decimal.js\"\n//   //import Decimal from \"decimal.js\"\n//\n//   let r: Decimal.Rounding = Decimal.ROUND_UP;\n//   let c: Decimal.Configuration = {precision: 4, rounding: r};\n//   Decimal.set(c);\n//   let v: Decimal.Value = '12345.6789';\n//   let d: Decimal = new Decimal(v);\n//   //let d: Decimal.Instance = new Decimal(v);\n//\n// The use of compiler option `--strictNullChecks` is recommended.\n\nexport default Decimal;\n\nexport namespace Decimal {\n  export type Constructor = typeof Decimal;\n  export type Instance = Decimal;\n  export type Rounding = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\n  export type Modulo = Rounding | 9;\n  export type Value = string | number | Decimal;\n\n  // http://mikemcl.github.io/decimal.js/#constructor-properties\n  export interface Config {\n    precision?: number;\n    rounding?: Rounding;\n    toExpNeg?: number;\n    toExpPos?: number;\n    minE?: number;\n    maxE?: number;\n    crypto?: boolean;\n    modulo?: Modulo;\n    defaults?: boolean;\n  }\n}\n\nexport declare class Decimal {\n  readonly d: number[];\n  readonly e: number;\n  readonly s: number;\n\n  constructor(n: Decimal.Value);\n\n  absoluteValue(): Decimal;\n  abs(): Decimal;\n\n  ceil(): Decimal;\n  \n  clampedTo(min: Decimal.Value, max: Decimal.Value): Decimal;\n  clamp(min: Decimal.Value, max: Decimal.Value): Decimal;\n\n  comparedTo(n: Decimal.Value): number;\n  cmp(n: Decimal.Value): number;\n\n  cosine(): Decimal;\n  cos(): Decimal;\n\n  cubeRoot(): Decimal;\n  cbrt(): Decimal;\n\n  decimalPlaces(): number;\n  dp(): number;\n\n  dividedBy(n: Decimal.Value): Decimal;\n  div(n: Decimal.Value): Decimal;\n\n  dividedToIntegerBy(n: Decimal.Value): Decimal;\n  divToInt(n: Decimal.Value): Decimal;\n\n  equals(n: Decimal.Value): boolean;\n  eq(n: Decimal.Value): boolean;\n\n  floor(): Decimal;\n\n  greaterThan(n: Decimal.Value): boolean;\n  gt(n: Decimal.Value): boolean;\n\n  greaterThanOrEqualTo(n: Decimal.Value): boolean;\n  gte(n: Decimal.Value): boolean;\n\n  hyperbolicCosine(): Decimal;\n  cosh(): Decimal;\n\n  hyperbolicSine(): Decimal;\n  sinh(): Decimal;\n\n  hyperbolicTangent(): Decimal;\n  tanh(): Decimal;\n\n  inverseCosine(): Decimal;\n  acos(): Decimal;\n\n  inverseHyperbolicCosine(): Decimal;\n  acosh(): Decimal;\n\n  inverseHyperbolicSine(): Decimal;\n  asinh(): Decimal;\n\n  inverseHyperbolicTangent(): Decimal;\n  atanh(): Decimal;\n\n  inverseSine(): Decimal;\n  asin(): Decimal;\n\n  inverseTangent(): Decimal;\n  atan(): Decimal;\n\n  isFinite(): boolean;\n\n  isInteger(): boolean;\n  isInt(): boolean;\n\n  isNaN(): boolean;\n\n  isNegative(): boolean;\n  isNeg(): boolean;\n\n  isPositive(): boolean;\n  isPos(): boolean;\n\n  isZero(): boolean;\n\n  lessThan(n: Decimal.Value): boolean;\n  lt(n: Decimal.Value): boolean;\n\n  lessThanOrEqualTo(n: Decimal.Value): boolean;\n  lte(n: Decimal.Value): boolean;\n\n  logarithm(n?: Decimal.Value): Decimal;\n  log(n?: Decimal.Value): Decimal;\n\n  minus(n: Decimal.Value): Decimal;\n  sub(n: Decimal.Value): Decimal;\n\n  modulo(n: Decimal.Value): Decimal;\n  mod(n: Decimal.Value): Decimal;\n\n  naturalExponential(): Decimal;\n  exp(): Decimal;\n\n  naturalLogarithm(): Decimal;\n  ln(): Decimal;\n\n  negated(): Decimal;\n  neg(): Decimal;\n\n  plus(n: Decimal.Value): Decimal;\n  add(n: Decimal.Value): Decimal;\n\n  precision(includeZeros?: boolean): number;\n  sd(includeZeros?: boolean): number;\n\n  round(): Decimal;\n\n  sine() : Decimal;\n  sin() : Decimal;\n\n  squareRoot(): Decimal;\n  sqrt(): Decimal;\n\n  tangent() : Decimal;\n  tan() : Decimal;\n\n  times(n: Decimal.Value): Decimal;\n  mul(n: Decimal.Value) : Decimal;\n\n  toBinary(significantDigits?: number): string;\n  toBinary(significantDigits: number, rounding: Decimal.Rounding): string;\n\n  toDecimalPlaces(decimalPlaces?: number): Decimal;\n  toDecimalPlaces(decimalPlaces: number, rounding: Decimal.Rounding): Decimal;\n  toDP(decimalPlaces?: number): Decimal;\n  toDP(decimalPlaces: number, rounding: Decimal.Rounding): Decimal;\n\n  toExponential(decimalPlaces?: number): string;\n  toExponential(decimalPlaces: number, rounding: Decimal.Rounding): string;\n\n  toFixed(decimalPlaces?: number): string;\n  toFixed(decimalPlaces: number, rounding: Decimal.Rounding): string;\n\n  toFraction(max_denominator?: Decimal.Value): Decimal[];\n\n  toHexadecimal(significantDigits?: number): string;\n  toHexadecimal(significantDigits: number, rounding: Decimal.Rounding): string;\n  toHex(significantDigits?: number): string;\n  toHex(significantDigits: number, rounding?: Decimal.Rounding): string;\n\n  toJSON(): string;\n\n  toNearest(n: Decimal.Value, rounding?: Decimal.Rounding): Decimal;\n\n  toNumber(): number;\n\n  toOctal(significantDigits?: number): string;\n  toOctal(significantDigits: number, rounding: Decimal.Rounding): string;\n\n  toPower(n: Decimal.Value): Decimal;\n  pow(n: Decimal.Value): Decimal;\n\n  toPrecision(significantDigits?: number): string;\n  toPrecision(significantDigits: number, rounding: Decimal.Rounding): string;\n\n  toSignificantDigits(significantDigits?: number): Decimal;\n  toSignificantDigits(significantDigits: number, rounding: Decimal.Rounding): Decimal;\n  toSD(significantDigits?: number): Decimal;\n  toSD(significantDigits: number, rounding: Decimal.Rounding): Decimal;\n\n  toString(): string;\n\n  truncated(): Decimal;\n  trunc(): Decimal;\n\n  valueOf(): string;\n\n  static abs(n: Decimal.Value): Decimal;\n  static acos(n: Decimal.Value): Decimal;\n  static acosh(n: Decimal.Value): Decimal;\n  static add(x: Decimal.Value, y: Decimal.Value): Decimal;\n  static asin(n: Decimal.Value): Decimal;\n  static asinh(n: Decimal.Value): Decimal;\n  static atan(n: Decimal.Value): Decimal;\n  static atanh(n: Decimal.Value): Decimal;\n  static atan2(y: Decimal.Value, x: Decimal.Value): Decimal;\n  static cbrt(n: Decimal.Value): Decimal;\n  static ceil(n: Decimal.Value): Decimal;\n  static clamp(n: Decimal.Value, min: Decimal.Value, max: Decimal.Value): Decimal;\n  static clone(object?: Decimal.Config): Decimal.Constructor;\n  static config(object: Decimal.Config): Decimal.Constructor;\n  static cos(n: Decimal.Value): Decimal;\n  static cosh(n: Decimal.Value): Decimal;\n  static div(x: Decimal.Value, y: Decimal.Value): Decimal;\n  static exp(n: Decimal.Value): Decimal;\n  static floor(n: Decimal.Value): Decimal;\n  static hypot(...n: Decimal.Value[]): Decimal;\n  static isDecimal(object: any): object is Decimal;\n  static ln(n: Decimal.Value): Decimal;\n  static log(n: Decimal.Value, base?: Decimal.Value): Decimal;\n  static log2(n: Decimal.Value): Decimal;\n  static log10(n: Decimal.Value): Decimal;\n  static max(...n: Decimal.Value[]): Decimal;\n  static min(...n: Decimal.Value[]): Decimal;\n  static mod(x: Decimal.Value, y: Decimal.Value): Decimal;\n  static mul(x: Decimal.Value, y: Decimal.Value): Decimal;\n  static noConflict(): Decimal.Constructor;   // Browser only\n  static pow(base: Decimal.Value, exponent: Decimal.Value): Decimal;\n  static random(significantDigits?: number): Decimal;\n  static round(n: Decimal.Value): Decimal;\n  static set(object: Decimal.Config): Decimal.Constructor;\n  static sign(n: Decimal.Value): number;\n  static sin(n: Decimal.Value): Decimal;\n  static sinh(n: Decimal.Value): Decimal;\n  static sqrt(n: Decimal.Value): Decimal;\n  static sub(x: Decimal.Value, y: Decimal.Value): Decimal;\n  static sum(...n: Decimal.Value[]): Decimal;\n  static tan(n: Decimal.Value): Decimal;\n  static tanh(n: Decimal.Value): Decimal;\n  static trunc(n: Decimal.Value): Decimal;\n\n  static readonly default?: Decimal.Constructor;\n  static readonly Decimal?: Decimal.Constructor;\n\n  static readonly precision: number;\n  static readonly rounding: Decimal.Rounding;\n  static readonly toExpNeg: number;\n  static readonly toExpPos: number;\n  static readonly minE: number;\n  static readonly maxE: number;\n  static readonly crypto: boolean;\n  static readonly modulo: Decimal.Modulo;\n\n  static readonly ROUND_UP: 0;\n  static readonly ROUND_DOWN: 1;\n  static readonly ROUND_CEIL: 2;\n  static readonly ROUND_FLOOR: 3;\n  static readonly ROUND_HALF_UP: 4;\n  static readonly ROUND_HALF_DOWN: 5;\n  static readonly ROUND_HALF_EVEN: 6;\n  static readonly ROUND_HALF_CEIL: 7;\n  static readonly ROUND_HALF_FLOOR: 8;\n  static readonly EUCLID: 9;\n}\n"
        },
        {
          "name": "decimal.global.d.ts",
          "type": "blob",
          "size": 8.9443359375,
          "content": "// Type definitions for decimal.js >=7.0.0\n// Project: https://github.com/MikeMcl/decimal.js\n// Definitions by: Michael Mclaughlin <https://github.com/MikeMcl>\n// Definitions: https://github.com/MikeMcl/decimal.js\n//\n// Documentation: http://mikemcl.github.io/decimal.js/\n//\n// Exports (available globally or when using import):\n//\n//   class     Decimal (default export)\n//   type      Decimal.Constructor\n//   type      Decimal.Instance\n//   type      Decimal.Modulo\n//   type      Decimal.Rounding\n//   type      Decimal.Value\n//   interface Decimal.Config\n//\n// Example (alternative syntax commented-out):\n//\n//   import {Decimal} from \"decimal.js\"\n//   //import Decimal from \"decimal.js\"\n//\n//   let r: Decimal.Rounding = Decimal.ROUND_UP;\n//   let c: Decimal.Configuration = {precision: 4, rounding: r};\n//   Decimal.set(c);\n//   let v: Decimal.Value = '12345.6789';\n//   let d: Decimal = new Decimal(v);\n//   //let d: Decimal.Instance = new Decimal(v);\n//\n// The use of compiler option `--strictNullChecks` is recommended.\n\nexport default Decimal;\n\nexport namespace Decimal {\n  export type Config = DecimalConfig;\n  export type Constructor = DecimalConstructor;\n  export type Instance = DecimalInstance;\n  export type Modulo = DecimalModulo;\n  export type Rounding = DecimalRounding;\n  export type Value = DecimalValue;\n}\n\ndeclare global {\n  const Decimal: DecimalConstructor;\n  type Decimal = DecimalInstance;\n\n  namespace Decimal {\n    type Config = DecimalConfig;\n    type Constructor = DecimalConstructor;\n    type Instance = DecimalInstance;\n    type Modulo = DecimalModulo;\n    type Rounding = DecimalRounding;\n    type Value = DecimalValue;\n  }\n}\n\ntype DecimalInstance = Decimal;\ntype DecimalConstructor = typeof Decimal;\ntype DecimalValue = string | number | Decimal;\ntype DecimalRounding = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\ntype DecimalModulo = DecimalRounding | 9;\n\n// http://mikemcl.github.io/decimal.js/#constructor-properties\ninterface DecimalConfig {\n  precision?: number;\n  rounding?: DecimalRounding;\n  toExpNeg?: number;\n  toExpPos?: number;\n  minE?: number;\n  maxE?: number;\n  crypto?: boolean;\n  modulo?: DecimalModulo;\n  defaults?: boolean;\n}\n\nexport declare class Decimal {\n  readonly d: number[];\n  readonly e: number;\n  readonly s: number;\n\n  constructor(n: DecimalValue);\n\n  absoluteValue(): Decimal;\n  abs(): Decimal;\n\n  ceil(): Decimal;\n  \n  clampedTo(min: Decimal.Value, max: Decimal.Value): Decimal;\n  clamp(min: Decimal.Value, max: Decimal.Value): Decimal;\n\n  comparedTo(n: DecimalValue): number;\n  cmp(n: DecimalValue): number;\n\n  cosine(): Decimal;\n  cos(): Decimal;\n\n  cubeRoot(): Decimal;\n  cbrt(): Decimal;\n\n  decimalPlaces(): number;\n  dp(): number;\n\n  dividedBy(n: DecimalValue): Decimal;\n  div(n: DecimalValue): Decimal;\n\n  dividedToIntegerBy(n: DecimalValue): Decimal;\n  divToInt(n: DecimalValue): Decimal;\n\n  equals(n: DecimalValue): boolean;\n  eq(n: DecimalValue): boolean;\n\n  floor(): Decimal;\n\n  greaterThan(n: DecimalValue): boolean;\n  gt(n: DecimalValue): boolean;\n\n  greaterThanOrEqualTo(n: DecimalValue): boolean;\n  gte(n: DecimalValue): boolean;\n\n  hyperbolicCosine(): Decimal;\n  cosh(): Decimal;\n\n  hyperbolicSine(): Decimal;\n  sinh(): Decimal;\n\n  hyperbolicTangent(): Decimal;\n  tanh(): Decimal;\n\n  inverseCosine(): Decimal;\n  acos(): Decimal;\n\n  inverseHyperbolicCosine(): Decimal;\n  acosh(): Decimal;\n\n  inverseHyperbolicSine(): Decimal;\n  asinh(): Decimal;\n\n  inverseHyperbolicTangent(): Decimal;\n  atanh(): Decimal;\n\n  inverseSine(): Decimal;\n  asin(): Decimal;\n\n  inverseTangent(): Decimal;\n  atan(): Decimal;\n\n  isFinite(): boolean;\n\n  isInteger(): boolean;\n  isInt(): boolean;\n\n  isNaN(): boolean;\n\n  isNegative(): boolean;\n  isNeg(): boolean;\n\n  isPositive(): boolean;\n  isPos(): boolean;\n\n  isZero(): boolean;\n\n  lessThan(n: DecimalValue): boolean;\n  lt(n: DecimalValue): boolean;\n\n  lessThanOrEqualTo(n: DecimalValue): boolean;\n  lte(n: DecimalValue): boolean;\n\n  logarithm(n?: DecimalValue): Decimal;\n  log(n?: DecimalValue): Decimal;\n\n  minus(n: DecimalValue): Decimal;\n  sub(n: DecimalValue): Decimal;\n\n  modulo(n: DecimalValue): Decimal;\n  mod(n: DecimalValue): Decimal;\n\n  naturalExponential(): Decimal;\n  exp(): Decimal;\n\n  naturalLogarithm(): Decimal;\n  ln(): Decimal;\n\n  negated(): Decimal;\n  neg(): Decimal;\n\n  plus(n: DecimalValue): Decimal;\n  add(n: DecimalValue): Decimal;\n\n  precision(includeZeros?: boolean): number;\n  sd(includeZeros?: boolean): number;\n\n  round(): Decimal;\n\n  sine() : Decimal;\n  sin() : Decimal;\n\n  squareRoot(): Decimal;\n  sqrt(): Decimal;\n\n  tangent() : Decimal;\n  tan() : Decimal;\n\n  times(n: DecimalValue): Decimal;\n  mul(n: DecimalValue) : Decimal;\n\n  toBinary(significantDigits?: number): string;\n  toBinary(significantDigits: number, rounding: DecimalRounding): string;\n\n  toDecimalPlaces(decimalPlaces?: number): Decimal;\n  toDecimalPlaces(decimalPlaces: number, rounding: DecimalRounding): Decimal;\n  toDP(decimalPlaces?: number): Decimal;\n  toDP(decimalPlaces: number, rounding: DecimalRounding): Decimal;\n\n  toExponential(decimalPlaces?: number): string;\n  toExponential(decimalPlaces: number, rounding: DecimalRounding): string;\n\n  toFixed(decimalPlaces?: number): string;\n  toFixed(decimalPlaces: number, rounding: DecimalRounding): string;\n\n  toFraction(max_denominator?: DecimalValue): Decimal[];\n\n  toHexadecimal(significantDigits?: number): string;\n  toHexadecimal(significantDigits: number, rounding: DecimalRounding): string;\n  toHex(significantDigits?: number): string;\n  toHex(significantDigits: number, rounding?: DecimalRounding): string;\n\n  toJSON(): string;\n\n  toNearest(n: DecimalValue, rounding?: DecimalRounding): Decimal;\n\n  toNumber(): number;\n\n  toOctal(significantDigits?: number): string;\n  toOctal(significantDigits: number, rounding: DecimalRounding): string;\n\n  toPower(n: DecimalValue): Decimal;\n  pow(n: DecimalValue): Decimal;\n\n  toPrecision(significantDigits?: number): string;\n  toPrecision(significantDigits: number, rounding: DecimalRounding): string;\n\n  toSignificantDigits(significantDigits?: number): Decimal;\n  toSignificantDigits(significantDigits: number, rounding: DecimalRounding): Decimal;\n  toSD(significantDigits?: number): Decimal;\n  toSD(significantDigits: number, rounding: DecimalRounding): Decimal;\n\n  toString(): string;\n\n  truncated(): Decimal;\n  trunc(): Decimal;\n\n  valueOf(): string;\n\n  static abs(n: DecimalValue): Decimal;\n  static acos(n: DecimalValue): Decimal;\n  static acosh(n: DecimalValue): Decimal;\n  static add(x: DecimalValue, y: DecimalValue): Decimal;\n  static asin(n: DecimalValue): Decimal;\n  static asinh(n: DecimalValue): Decimal;\n  static atan(n: DecimalValue): Decimal;\n  static atanh(n: DecimalValue): Decimal;\n  static atan2(y: DecimalValue, x: DecimalValue): Decimal;\n  static cbrt(n: DecimalValue): Decimal;\n  static ceil(n: DecimalValue): Decimal;\n  static clamp(n: Decimal.Value, min: Decimal.Value, max: Decimal.Value): Decimal;\n  static clone(object?: DecimalConfig): DecimalConstructor;\n  static config(object: DecimalConfig): DecimalConstructor;\n  static cos(n: DecimalValue): Decimal;\n  static cosh(n: DecimalValue): Decimal;\n  static div(x: DecimalValue, y: DecimalValue): Decimal;\n  static exp(n: DecimalValue): Decimal;\n  static floor(n: DecimalValue): Decimal;\n  static hypot(...n: DecimalValue[]): Decimal;\n  static isDecimal(object: any): object is Decimal;\n  static ln(n: DecimalValue): Decimal;\n  static log(n: DecimalValue, base?: DecimalValue): Decimal;\n  static log2(n: DecimalValue): Decimal;\n  static log10(n: DecimalValue): Decimal;\n  static max(...n: DecimalValue[]): Decimal;\n  static min(...n: DecimalValue[]): Decimal;\n  static mod(x: DecimalValue, y: DecimalValue): Decimal;\n  static mul(x: DecimalValue, y: DecimalValue): Decimal;\n  static noConflict(): DecimalConstructor;   // Browser only\n  static pow(base: DecimalValue, exponent: DecimalValue): Decimal;\n  static random(significantDigits?: number): Decimal;\n  static round(n: DecimalValue): Decimal;\n  static set(object: DecimalConfig): DecimalConstructor;\n  static sign(n: DecimalValue): number;\n  static sin(n: DecimalValue): Decimal;\n  static sinh(n: DecimalValue): Decimal;\n  static sqrt(n: DecimalValue): Decimal;\n  static sub(x: DecimalValue, y: DecimalValue): Decimal;\n  static sum(...n: Decimal.Value[]): Decimal;\n  static tan(n: DecimalValue): Decimal;\n  static tanh(n: DecimalValue): Decimal;\n  static trunc(n: DecimalValue): Decimal;\n\n  static readonly default?: DecimalConstructor;\n  static readonly Decimal?: DecimalConstructor;\n\n  static readonly precision: number;\n  static readonly rounding: DecimalRounding;\n  static readonly toExpNeg: number;\n  static readonly toExpPos: number;\n  static readonly minE: number;\n  static readonly maxE: number;\n  static readonly crypto: boolean;\n  static readonly modulo: DecimalModulo;\n\n  static readonly ROUND_UP: 0;\n  static readonly ROUND_DOWN: 1;\n  static readonly ROUND_CEIL: 2;\n  static readonly ROUND_FLOOR: 3;\n  static readonly ROUND_HALF_UP: 4;\n  static readonly ROUND_HALF_DOWN: 5;\n  static readonly ROUND_HALF_EVEN: 6;\n  static readonly ROUND_HALF_CEIL: 7;\n  static readonly ROUND_HALF_FLOOR: 8;\n  static readonly EUCLID: 9;\n}\n"
        },
        {
          "name": "decimal.js",
          "type": "blob",
          "size": 127.91015625,
          "content": ";(function (globalScope) {\n  'use strict';\n\n\n  /*!\n   *  decimal.js v10.4.3\n   *  An arbitrary-precision Decimal type for JavaScript.\n   *  https://github.com/MikeMcl/decimal.js\n   *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\n   *  MIT Licence\n   */\n\n\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\n\n\n    // The maximum exponent magnitude.\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\n\n    // The limit on the value of `precision`, and on the value of the first argument to\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\n\n    // Base conversion alphabet.\n    NUMERALS = '0123456789abcdef',\n\n    // The natural logarithm of 10 (1025 digits).\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\n\n    // Pi (1025 digits).\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\n\n\n    // The initial configuration properties of the Decimal constructor.\n    DEFAULTS = {\n\n      // These values must be integers within the stated ranges (inclusive).\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\n\n      // The maximum number of significant digits of the result of a calculation or base conversion.\n      // E.g. `Decimal.config({ precision: 20 });`\n      precision: 20,                         // 1 to MAX_DIGITS\n\n      // The rounding mode used when rounding to `precision`.\n      //\n      // ROUND_UP         0 Away from zero.\n      // ROUND_DOWN       1 Towards zero.\n      // ROUND_CEIL       2 Towards +Infinity.\n      // ROUND_FLOOR      3 Towards -Infinity.\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n      //\n      // E.g.\n      // `Decimal.rounding = 4;`\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\n      rounding: 4,                           // 0 to 8\n\n      // The modulo mode used when calculating the modulus: a mod n.\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n      // The remainder (r) is calculated as: r = a - n * q.\n      //\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\n      // HALF_EVEN  6 The IEEE 754 remainder function.\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\n      //\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\n      // be used, but they may not give useful results.\n      modulo: 1,                             // 0 to 9\n\n      // The exponent value at and beneath which `toString` returns exponential notation.\n      // JavaScript numbers: -7\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\n\n      // The exponent value at and above which `toString` returns exponential notation.\n      // JavaScript numbers: 21\n      toExpPos:  21,                         // 0 to EXP_LIMIT\n\n      // The minimum exponent value, beneath which underflow to zero occurs.\n      // JavaScript numbers: -324  (5e-324)\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\n\n      // The maximum exponent value, above which overflow to Infinity occurs.\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\n\n      // Whether to use cryptographically-secure random number generation, if available.\n      crypto: false                          // true/false\n    },\n\n\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\n\n\n    Decimal, inexact, noConflict, quadrant,\n    external = true,\n\n    decimalError = '[DecimalError] ',\n    invalidArgument = decimalError + 'Invalid argument: ',\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\n    cryptoUnavailable = decimalError + 'crypto unavailable',\n    tag = '[object Decimal]',\n\n    mathfloor = Math.floor,\n    mathpow = Math.pow,\n\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n\n    BASE = 1e7,\n    LOG_BASE = 7,\n    MAX_SAFE_INTEGER = 9007199254740991,\n\n    LN10_PRECISION = LN10.length - 1,\n    PI_PRECISION = PI.length - 1,\n\n    // Decimal.prototype object\n    P = { toStringTag: tag };\n\n\n  // Decimal prototype methods\n\n\n  /*\n   *  absoluteValue             abs\n   *  ceil\n   *  clampedTo                 clamp\n   *  comparedTo                cmp\n   *  cosine                    cos\n   *  cubeRoot                  cbrt\n   *  decimalPlaces             dp\n   *  dividedBy                 div\n   *  dividedToIntegerBy        divToInt\n   *  equals                    eq\n   *  floor\n   *  greaterThan               gt\n   *  greaterThanOrEqualTo      gte\n   *  hyperbolicCosine          cosh\n   *  hyperbolicSine            sinh\n   *  hyperbolicTangent         tanh\n   *  inverseCosine             acos\n   *  inverseHyperbolicCosine   acosh\n   *  inverseHyperbolicSine     asinh\n   *  inverseHyperbolicTangent  atanh\n   *  inverseSine               asin\n   *  inverseTangent            atan\n   *  isFinite\n   *  isInteger                 isInt\n   *  isNaN\n   *  isNegative                isNeg\n   *  isPositive                isPos\n   *  isZero\n   *  lessThan                  lt\n   *  lessThanOrEqualTo         lte\n   *  logarithm                 log\n   *  [maximum]                 [max]\n   *  [minimum]                 [min]\n   *  minus                     sub\n   *  modulo                    mod\n   *  naturalExponential        exp\n   *  naturalLogarithm          ln\n   *  negated                   neg\n   *  plus                      add\n   *  precision                 sd\n   *  round\n   *  sine                      sin\n   *  squareRoot                sqrt\n   *  tangent                   tan\n   *  times                     mul\n   *  toBinary\n   *  toDecimalPlaces           toDP\n   *  toExponential\n   *  toFixed\n   *  toFraction\n   *  toHexadecimal             toHex\n   *  toNearest\n   *  toNumber\n   *  toOctal\n   *  toPower                   pow\n   *  toPrecision\n   *  toSignificantDigits       toSD\n   *  toString\n   *  truncated                 trunc\n   *  valueOf                   toJSON\n   */\n\n\n  /*\n   * Return a new Decimal whose value is the absolute value of this Decimal.\n   *\n   */\n  P.absoluteValue = P.abs = function () {\n    var x = new this.constructor(this);\n    if (x.s < 0) x.s = 1;\n    return finalise(x);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\n   * direction of positive Infinity.\n   *\n   */\n  P.ceil = function () {\n    return finalise(new this.constructor(this), this.e + 1, 2);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal clamped to the range\n   * delineated by `min` and `max`.\n   *\n   * min {number|string|Decimal}\n   * max {number|string|Decimal}\n   *\n   */\n  P.clampedTo = P.clamp = function (min, max) {\n    var k,\n      x = this,\n      Ctor = x.constructor;\n    min = new Ctor(min);\n    max = new Ctor(max);\n    if (!min.s || !max.s) return new Ctor(NaN);\n    if (min.gt(max)) throw Error(invalidArgument + max);\n    k = x.cmp(min);\n    return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\n  };\n\n\n  /*\n   * Return\n   *   1    if the value of this Decimal is greater than the value of `y`,\n   *  -1    if the value of this Decimal is less than the value of `y`,\n   *   0    if they have the same value,\n   *   NaN  if the value of either Decimal is NaN.\n   *\n   */\n  P.comparedTo = P.cmp = function (y) {\n    var i, j, xdL, ydL,\n      x = this,\n      xd = x.d,\n      yd = (y = new x.constructor(y)).d,\n      xs = x.s,\n      ys = y.s;\n\n    // Either NaN or ±Infinity?\n    if (!xd || !yd) {\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\n    }\n\n    // Either zero?\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\n\n    // Signs differ?\n    if (xs !== ys) return xs;\n\n    // Compare exponents.\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\n\n    xdL = xd.length;\n    ydL = yd.length;\n\n    // Compare digit by digit.\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\n    }\n\n    // Compare lengths.\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-1, 1]\n   *\n   * cos(0)         = 1\n   * cos(-0)        = 1\n   * cos(Infinity)  = NaN\n   * cos(-Infinity) = NaN\n   * cos(NaN)       = NaN\n   *\n   */\n  P.cosine = P.cos = function () {\n    var pr, rm,\n      x = this,\n      Ctor = x.constructor;\n\n    if (!x.d) return new Ctor(NaN);\n\n    // cos(0) = cos(-0) = 1\n    if (!x.d[0]) return new Ctor(1);\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\n\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\n  };\n\n\n  /*\n   *\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\n   * `precision` significant digits using rounding mode `rounding`.\n   *\n   *  cbrt(0)  =  0\n   *  cbrt(-0) = -0\n   *  cbrt(1)  =  1\n   *  cbrt(-1) = -1\n   *  cbrt(N)  =  N\n   *  cbrt(-I) = -I\n   *  cbrt(I)  =  I\n   *\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\n   *\n   */\n  P.cubeRoot = P.cbrt = function () {\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\n      x = this,\n      Ctor = x.constructor;\n\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    external = false;\n\n    // Initial estimate.\n    s = x.s * mathpow(x.s * x, 1 / 3);\n\n     // Math.cbrt underflow/overflow?\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\n    if (!s || Math.abs(s) == 1 / 0) {\n      n = digitsToString(x.d);\n      e = x.e;\n\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\n      s = mathpow(n, 1 / 3);\n\n      // Rarely, e may be one less than the result exponent value.\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\n\n      if (s == 1 / 0) {\n        n = '5e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n\n      r = new Ctor(n);\n      r.s = x.s;\n    } else {\n      r = new Ctor(s.toString());\n    }\n\n    sd = (e = Ctor.precision) + 3;\n\n    // Halley's method.\n    // TODO? Compare Newton's method.\n    for (;;) {\n      t = r;\n      t3 = t.times(t).times(t);\n      t3plusx = t3.plus(x);\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\n\n      // TODO? Replace with for-loop and checkRoundingDigits.\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n        n = n.slice(sd - 3, sd + 1);\n\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\n        // , i.e. approaching a rounding boundary, continue the iteration.\n        if (n == '9999' || !rep && n == '4999') {\n\n          // On the first iteration only, check to see if rounding up gives the exact result as the\n          // nines may infinitely repeat.\n          if (!rep) {\n            finalise(t, e + 1, 0);\n\n            if (t.times(t).times(t).eq(x)) {\n              r = t;\n              break;\n            }\n          }\n\n          sd += 4;\n          rep = 1;\n        } else {\n\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n          // If not, then there are further digits and m will be truthy.\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n            // Truncate to the first rounding digit.\n            finalise(r, e + 1, 1);\n            m = !r.times(r).times(r).eq(x);\n          }\n\n          break;\n        }\n      }\n    }\n\n    external = true;\n\n    return finalise(r, e, Ctor.rounding, m);\n  };\n\n\n  /*\n   * Return the number of decimal places of the value of this Decimal.\n   *\n   */\n  P.decimalPlaces = P.dp = function () {\n    var w,\n      d = this.d,\n      n = NaN;\n\n    if (d) {\n      w = d.length - 1;\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\n\n      // Subtract the number of trailing zeros of the last word.\n      w = d[w];\n      if (w) for (; w % 10 == 0; w /= 10) n--;\n      if (n < 0) n = 0;\n    }\n\n    return n;\n  };\n\n\n  /*\n   *  n / 0 = I\n   *  n / N = N\n   *  n / I = 0\n   *  0 / n = 0\n   *  0 / 0 = N\n   *  0 / N = N\n   *  0 / I = 0\n   *  N / n = N\n   *  N / 0 = N\n   *  N / N = N\n   *  N / I = N\n   *  I / n = I\n   *  I / 0 = I\n   *  I / N = N\n   *  I / I = N\n   *\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\n   * `precision` significant digits using rounding mode `rounding`.\n   *\n   */\n  P.dividedBy = P.div = function (y) {\n    return divide(this, new this.constructor(y));\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\n   *\n   */\n  P.dividedToIntegerBy = P.divToInt = function (y) {\n    var x = this,\n      Ctor = x.constructor;\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\n   *\n   */\n  P.equals = P.eq = function (y) {\n    return this.cmp(y) === 0;\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\n   * direction of negative Infinity.\n   *\n   */\n  P.floor = function () {\n    return finalise(new this.constructor(this), this.e + 1, 3);\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\n   * false.\n   *\n   */\n  P.greaterThan = P.gt = function (y) {\n    return this.cmp(y) > 0;\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\n   * otherwise return false.\n   *\n   */\n  P.greaterThanOrEqualTo = P.gte = function (y) {\n    var k = this.cmp(y);\n    return k == 1 || k === 0;\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\n   * Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [1, Infinity]\n   *\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\n   *\n   * cosh(0)         = 1\n   * cosh(-0)        = 1\n   * cosh(Infinity)  = Infinity\n   * cosh(-Infinity) = Infinity\n   * cosh(NaN)       = NaN\n   *\n   *  x        time taken (ms)   result\n   * 1000      9                 9.8503555700852349694e+433\n   * 10000     25                4.4034091128314607936e+4342\n   * 100000    171               1.4033316802130615897e+43429\n   * 1000000   3817              1.5166076984010437725e+434294\n   * 10000000  abandoned after 2 minute wait\n   *\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\n   *\n   */\n  P.hyperbolicCosine = P.cosh = function () {\n    var k, n, pr, rm, len,\n      x = this,\n      Ctor = x.constructor,\n      one = new Ctor(1);\n\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\n    if (x.isZero()) return one;\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length;\n\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\n\n    // Estimate the optimum number of times to use the argument reduction.\n    // TODO? Estimation reused from cosine() and may not be optimal here.\n    if (len < 32) {\n      k = Math.ceil(len / 3);\n      n = (1 / tinyPow(4, k)).toString();\n    } else {\n      k = 16;\n      n = '2.3283064365386962890625e-10';\n    }\n\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\n\n    // Reverse argument reduction\n    var cosh2_x,\n      i = k,\n      d8 = new Ctor(8);\n    for (; i--;) {\n      cosh2_x = x.times(x);\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\n    }\n\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\n   * Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-Infinity, Infinity]\n   *\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\n   *\n   * sinh(0)         = 0\n   * sinh(-0)        = -0\n   * sinh(Infinity)  = Infinity\n   * sinh(-Infinity) = -Infinity\n   * sinh(NaN)       = NaN\n   *\n   * x        time taken (ms)\n   * 10       2 ms\n   * 100      5 ms\n   * 1000     14 ms\n   * 10000    82 ms\n   * 100000   886 ms            1.4033316802130615897e+43429\n   * 200000   2613 ms\n   * 300000   5407 ms\n   * 400000   8824 ms\n   * 500000   13026 ms          8.7080643612718084129e+217146\n   * 1000000  48543 ms\n   *\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\n   *\n   */\n  P.hyperbolicSine = P.sinh = function () {\n    var k, pr, rm, len,\n      x = this,\n      Ctor = x.constructor;\n\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length;\n\n    if (len < 3) {\n      x = taylorSeries(Ctor, 2, x, x, true);\n    } else {\n\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\n      // 3 multiplications and 1 addition\n\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\n      // 4 multiplications and 2 additions\n\n      // Estimate the optimum number of times to use the argument reduction.\n      k = 1.4 * Math.sqrt(len);\n      k = k > 16 ? 16 : k | 0;\n\n      x = x.times(1 / tinyPow(5, k));\n      x = taylorSeries(Ctor, 2, x, x, true);\n\n      // Reverse argument reduction\n      var sinh2_x,\n        d5 = new Ctor(5),\n        d16 = new Ctor(16),\n        d20 = new Ctor(20);\n      for (; k--;) {\n        sinh2_x = x.times(x);\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\n      }\n    }\n\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return finalise(x, pr, rm, true);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\n   * Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-1, 1]\n   *\n   * tanh(x) = sinh(x) / cosh(x)\n   *\n   * tanh(0)         = 0\n   * tanh(-0)        = -0\n   * tanh(Infinity)  = 1\n   * tanh(-Infinity) = -1\n   * tanh(NaN)       = NaN\n   *\n   */\n  P.hyperbolicTangent = P.tanh = function () {\n    var pr, rm,\n      x = this,\n      Ctor = x.constructor;\n\n    if (!x.isFinite()) return new Ctor(x.s);\n    if (x.isZero()) return new Ctor(x);\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 7;\n    Ctor.rounding = 1;\n\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\n   * this Decimal.\n   *\n   * Domain: [-1, 1]\n   * Range: [0, pi]\n   *\n   * acos(x) = pi/2 - asin(x)\n   *\n   * acos(0)       = pi/2\n   * acos(-0)      = pi/2\n   * acos(1)       = 0\n   * acos(-1)      = pi\n   * acos(1/2)     = pi/3\n   * acos(-1/2)    = 2*pi/3\n   * acos(|x| > 1) = NaN\n   * acos(NaN)     = NaN\n   *\n   */\n  P.inverseCosine = P.acos = function () {\n    var halfPi,\n      x = this,\n      Ctor = x.constructor,\n      k = x.abs().cmp(1),\n      pr = Ctor.precision,\n      rm = Ctor.rounding;\n\n    if (k !== -1) {\n      return k === 0\n        // |x| is 1\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\n        // |x| > 1 or x is NaN\n        : new Ctor(NaN);\n    }\n\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\n\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\n\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n\n    x = x.asin();\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return halfPi.minus(x);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\n   * value of this Decimal.\n   *\n   * Domain: [1, Infinity]\n   * Range: [0, Infinity]\n   *\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\n   *\n   * acosh(x < 1)     = NaN\n   * acosh(NaN)       = NaN\n   * acosh(Infinity)  = Infinity\n   * acosh(-Infinity) = NaN\n   * acosh(0)         = NaN\n   * acosh(-0)        = NaN\n   * acosh(1)         = 0\n   * acosh(-1)        = NaN\n   *\n   */\n  P.inverseHyperbolicCosine = P.acosh = function () {\n    var pr, rm,\n      x = this,\n      Ctor = x.constructor;\n\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\n    if (!x.isFinite()) return new Ctor(x);\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\n    Ctor.rounding = 1;\n    external = false;\n\n    x = x.times(x).minus(1).sqrt().plus(x);\n\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return x.ln();\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\n   * of this Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-Infinity, Infinity]\n   *\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\n   *\n   * asinh(NaN)       = NaN\n   * asinh(Infinity)  = Infinity\n   * asinh(-Infinity) = -Infinity\n   * asinh(0)         = 0\n   * asinh(-0)        = -0\n   *\n   */\n  P.inverseHyperbolicSine = P.asinh = function () {\n    var pr, rm,\n      x = this,\n      Ctor = x.constructor;\n\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\n    Ctor.rounding = 1;\n    external = false;\n\n    x = x.times(x).plus(1).sqrt().plus(x);\n\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return x.ln();\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\n   * value of this Decimal.\n   *\n   * Domain: [-1, 1]\n   * Range: [-Infinity, Infinity]\n   *\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\n   *\n   * atanh(|x| > 1)   = NaN\n   * atanh(NaN)       = NaN\n   * atanh(Infinity)  = NaN\n   * atanh(-Infinity) = NaN\n   * atanh(0)         = 0\n   * atanh(-0)        = -0\n   * atanh(1)         = Infinity\n   * atanh(-1)        = -Infinity\n   *\n   */\n  P.inverseHyperbolicTangent = P.atanh = function () {\n    var pr, rm, wpr, xsd,\n      x = this,\n      Ctor = x.constructor;\n\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    xsd = x.sd();\n\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\n\n    Ctor.precision = wpr = xsd - x.e;\n\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\n\n    Ctor.precision = pr + 4;\n    Ctor.rounding = 1;\n\n    x = x.ln();\n\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return x.times(0.5);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\n   * Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-pi/2, pi/2]\n   *\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\n   *\n   * asin(0)       = 0\n   * asin(-0)      = -0\n   * asin(1/2)     = pi/6\n   * asin(-1/2)    = -pi/6\n   * asin(1)       = pi/2\n   * asin(-1)      = -pi/2\n   * asin(|x| > 1) = NaN\n   * asin(NaN)     = NaN\n   *\n   * TODO? Compare performance of Taylor series.\n   *\n   */\n  P.inverseSine = P.asin = function () {\n    var halfPi, k,\n      pr, rm,\n      x = this,\n      Ctor = x.constructor;\n\n    if (x.isZero()) return new Ctor(x);\n\n    k = x.abs().cmp(1);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n\n    if (k !== -1) {\n\n      // |x| is 1\n      if (k === 0) {\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n        halfPi.s = x.s;\n        return halfPi;\n      }\n\n      // |x| > 1 or x is NaN\n      return new Ctor(NaN);\n    }\n\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\n\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\n\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return x.times(2);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\n   * of this Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-pi/2, pi/2]\n   *\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\n   *\n   * atan(0)         = 0\n   * atan(-0)        = -0\n   * atan(1)         = pi/4\n   * atan(-1)        = -pi/4\n   * atan(Infinity)  = pi/2\n   * atan(-Infinity) = -pi/2\n   * atan(NaN)       = NaN\n   *\n   */\n  P.inverseTangent = P.atan = function () {\n    var i, j, k, n, px, t, r, wpr, x2,\n      x = this,\n      Ctor = x.constructor,\n      pr = Ctor.precision,\n      rm = Ctor.rounding;\n\n    if (!x.isFinite()) {\n      if (!x.s) return new Ctor(NaN);\n      if (pr + 4 <= PI_PRECISION) {\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\n        r.s = x.s;\n        return r;\n      }\n    } else if (x.isZero()) {\n      return new Ctor(x);\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\n      r.s = x.s;\n      return r;\n    }\n\n    Ctor.precision = wpr = pr + 10;\n    Ctor.rounding = 1;\n\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\n\n    // Argument reduction\n    // Ensure |x| < 0.42\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\n\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\n\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\n\n    external = false;\n\n    j = Math.ceil(wpr / LOG_BASE);\n    n = 1;\n    x2 = x.times(x);\n    r = new Ctor(x);\n    px = x;\n\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\n    for (; i !== -1;) {\n      px = px.times(x2);\n      t = r.minus(px.div(n += 2));\n\n      px = px.times(x2);\n      r = t.plus(px.div(n += 2));\n\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\n    }\n\n    if (k) r = r.times(2 << (k - 1));\n\n    external = true;\n\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\n   *\n   */\n  P.isFinite = function () {\n    return !!this.d;\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is an integer, otherwise return false.\n   *\n   */\n  P.isInteger = P.isInt = function () {\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is NaN, otherwise return false.\n   *\n   */\n  P.isNaN = function () {\n    return !this.s;\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is negative, otherwise return false.\n   *\n   */\n  P.isNegative = P.isNeg = function () {\n    return this.s < 0;\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is positive, otherwise return false.\n   *\n   */\n  P.isPositive = P.isPos = function () {\n    return this.s > 0;\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\n   *\n   */\n  P.isZero = function () {\n    return !!this.d && this.d[0] === 0;\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\n   *\n   */\n  P.lessThan = P.lt = function (y) {\n    return this.cmp(y) < 0;\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\n   *\n   */\n  P.lessThanOrEqualTo = P.lte = function (y) {\n    return this.cmp(y) < 1;\n  };\n\n\n  /*\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * If no base is specified, return log[10](arg).\n   *\n   * log[base](arg) = ln(arg) / ln(base)\n   *\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\n   * otherwise:\n   *\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\n   *\n   * log[-b](a)       = NaN\n   * log[0](a)        = NaN\n   * log[1](a)        = NaN\n   * log[NaN](a)      = NaN\n   * log[Infinity](a) = NaN\n   * log[b](0)        = -Infinity\n   * log[b](-0)       = -Infinity\n   * log[b](-a)       = NaN\n   * log[b](1)        = 0\n   * log[b](Infinity) = Infinity\n   * log[b](NaN)      = NaN\n   *\n   * [base] {number|string|Decimal} The base of the logarithm.\n   *\n   */\n  P.logarithm = P.log = function (base) {\n    var isBase10, d, denominator, k, inf, num, sd, r,\n      arg = this,\n      Ctor = arg.constructor,\n      pr = Ctor.precision,\n      rm = Ctor.rounding,\n      guard = 5;\n\n    // Default base is 10.\n    if (base == null) {\n      base = new Ctor(10);\n      isBase10 = true;\n    } else {\n      base = new Ctor(base);\n      d = base.d;\n\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\n\n      isBase10 = base.eq(10);\n    }\n\n    d = arg.d;\n\n    // Is arg negative, non-finite, 0 or 1?\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\n    }\n\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\n    // integer power of 10.\n    if (isBase10) {\n      if (d.length > 1) {\n        inf = true;\n      } else {\n        for (k = d[0]; k % 10 === 0;) k /= 10;\n        inf = k !== 1;\n      }\n    }\n\n    external = false;\n    sd = pr + guard;\n    num = naturalLogarithm(arg, sd);\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n\n    // The result will have 5 rounding digits.\n    r = divide(num, denominator, sd, 1);\n\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\n    // calculate 10 further digits.\n    //\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\n    // further digits, the last 14 are nines, round up and assume the result is exact.\n    // Also assume the result is exact if the last 14 are zero.\n    //\n    // Example of a result that will be incorrectly rounded:\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\n    // place is still 2.6.\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\n\n      do {\n        sd += 10;\n        num = naturalLogarithm(arg, sd);\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n        r = divide(num, denominator, sd, 1);\n\n        if (!inf) {\n\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\n            r = finalise(r, pr + 1, 0);\n          }\n\n          break;\n        }\n      } while (checkRoundingDigits(r.d, k += 10, rm));\n    }\n\n    external = true;\n\n    return finalise(r, pr, rm);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\n   *\n   * arguments {number|string|Decimal}\n   *\n  P.max = function () {\n    Array.prototype.push.call(arguments, this);\n    return maxOrMin(this.constructor, arguments, 'lt');\n  };\n   */\n\n\n  /*\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\n   *\n   * arguments {number|string|Decimal}\n   *\n  P.min = function () {\n    Array.prototype.push.call(arguments, this);\n    return maxOrMin(this.constructor, arguments, 'gt');\n  };\n   */\n\n\n  /*\n   *  n - 0 = n\n   *  n - N = N\n   *  n - I = -I\n   *  0 - n = -n\n   *  0 - 0 = 0\n   *  0 - N = N\n   *  0 - I = -I\n   *  N - n = N\n   *  N - 0 = N\n   *  N - N = N\n   *  N - I = N\n   *  I - n = I\n   *  I - 0 = I\n   *  I - N = N\n   *  I - I = N\n   *\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   */\n  P.minus = P.sub = function (y) {\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\n      x = this,\n      Ctor = x.constructor;\n\n    y = new Ctor(y);\n\n    // If either is not finite...\n    if (!x.d || !y.d) {\n\n      // Return NaN if either is NaN.\n      if (!x.s || !y.s) y = new Ctor(NaN);\n\n      // Return y negated if x is finite and y is ±Infinity.\n      else if (x.d) y.s = -y.s;\n\n      // Return x if y is finite and x is ±Infinity.\n      // Return x if both are ±Infinity with different signs.\n      // Return NaN if both are ±Infinity with the same sign.\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\n\n      return y;\n    }\n\n    // If signs differ...\n    if (x.s != y.s) {\n      y.s = -y.s;\n      return x.plus(y);\n    }\n\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n\n    // If either is zero...\n    if (!xd[0] || !yd[0]) {\n\n      // Return y negated if x is zero and y is non-zero.\n      if (yd[0]) y.s = -y.s;\n\n      // Return x if y is zero and x is non-zero.\n      else if (xd[0]) y = new Ctor(x);\n\n      // Return zero if both are zero.\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\n      else return new Ctor(rm === 3 ? -0 : 0);\n\n      return external ? finalise(y, pr, rm) : y;\n    }\n\n    // x and y are finite, non-zero numbers with the same sign.\n\n    // Calculate base 1e7 exponents.\n    e = mathfloor(y.e / LOG_BASE);\n    xe = mathfloor(x.e / LOG_BASE);\n\n    xd = xd.slice();\n    k = xe - e;\n\n    // If base 1e7 exponents differ...\n    if (k) {\n      xLTy = k < 0;\n\n      if (xLTy) {\n        d = xd;\n        k = -k;\n        len = yd.length;\n      } else {\n        d = yd;\n        e = xe;\n        len = xd.length;\n      }\n\n      // Numbers with massively different exponents would result in a very high number of\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\n\n      if (k > i) {\n        k = i;\n        d.length = 1;\n      }\n\n      // Prepend zeros to equalise exponents.\n      d.reverse();\n      for (i = k; i--;) d.push(0);\n      d.reverse();\n\n    // Base 1e7 exponents equal.\n    } else {\n\n      // Check digits to determine which is the bigger number.\n\n      i = xd.length;\n      len = yd.length;\n      xLTy = i < len;\n      if (xLTy) len = i;\n\n      for (i = 0; i < len; i++) {\n        if (xd[i] != yd[i]) {\n          xLTy = xd[i] < yd[i];\n          break;\n        }\n      }\n\n      k = 0;\n    }\n\n    if (xLTy) {\n      d = xd;\n      xd = yd;\n      yd = d;\n      y.s = -y.s;\n    }\n\n    len = xd.length;\n\n    // Append zeros to `xd` if shorter.\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\n\n    // Subtract yd from xd.\n    for (i = yd.length; i > k;) {\n\n      if (xd[--i] < yd[i]) {\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\n        --xd[j];\n        xd[i] += BASE;\n      }\n\n      xd[i] -= yd[i];\n    }\n\n    // Remove trailing zeros.\n    for (; xd[--len] === 0;) xd.pop();\n\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xd[0] === 0; xd.shift()) --e;\n\n    // Zero?\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\n\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n\n    return external ? finalise(y, pr, rm) : y;\n  };\n\n\n  /*\n   *   n % 0 =  N\n   *   n % N =  N\n   *   n % I =  n\n   *   0 % n =  0\n   *  -0 % n = -0\n   *   0 % 0 =  N\n   *   0 % N =  N\n   *   0 % I =  0\n   *   N % n =  N\n   *   N % 0 =  N\n   *   N % N =  N\n   *   N % I =  N\n   *   I % n =  N\n   *   I % 0 =  N\n   *   I % N =  N\n   *   I % I =  N\n   *\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\n   * `precision` significant digits using rounding mode `rounding`.\n   *\n   * The result depends on the modulo mode.\n   *\n   */\n  P.modulo = P.mod = function (y) {\n    var q,\n      x = this,\n      Ctor = x.constructor;\n\n    y = new Ctor(y);\n\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\n\n    // Return x if y is ±Infinity or x is ±0.\n    if (!y.d || x.d && !x.d[0]) {\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\n    }\n\n    // Prevent rounding of intermediate calculations.\n    external = false;\n\n    if (Ctor.modulo == 9) {\n\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\n      // result = x - q * y    where  0 <= result < abs(y)\n      q = divide(x, y.abs(), 0, 3, 1);\n      q.s *= y.s;\n    } else {\n      q = divide(x, y, 0, Ctor.modulo, 1);\n    }\n\n    q = q.times(y);\n\n    external = true;\n\n    return x.minus(q);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   */\n  P.naturalExponential = P.exp = function () {\n    return naturalExponential(this);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\n   * rounded to `precision` significant digits using rounding mode `rounding`.\n   *\n   */\n  P.naturalLogarithm = P.ln = function () {\n    return naturalLogarithm(this);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\n   * -1.\n   *\n   */\n  P.negated = P.neg = function () {\n    var x = new this.constructor(this);\n    x.s = -x.s;\n    return finalise(x);\n  };\n\n\n  /*\n   *  n + 0 = n\n   *  n + N = N\n   *  n + I = I\n   *  0 + n = n\n   *  0 + 0 = 0\n   *  0 + N = N\n   *  0 + I = I\n   *  N + n = N\n   *  N + 0 = N\n   *  N + N = N\n   *  N + I = N\n   *  I + n = I\n   *  I + 0 = I\n   *  I + N = N\n   *  I + I = I\n   *\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   */\n  P.plus = P.add = function (y) {\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\n      x = this,\n      Ctor = x.constructor;\n\n    y = new Ctor(y);\n\n    // If either is not finite...\n    if (!x.d || !y.d) {\n\n      // Return NaN if either is NaN.\n      if (!x.s || !y.s) y = new Ctor(NaN);\n\n      // Return x if y is finite and x is ±Infinity.\n      // Return x if both are ±Infinity with the same sign.\n      // Return NaN if both are ±Infinity with different signs.\n      // Return y if x is finite and y is ±Infinity.\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\n\n      return y;\n    }\n\n     // If signs differ...\n    if (x.s != y.s) {\n      y.s = -y.s;\n      return x.minus(y);\n    }\n\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n\n    // If either is zero...\n    if (!xd[0] || !yd[0]) {\n\n      // Return x if y is zero.\n      // Return y if y is non-zero.\n      if (!yd[0]) y = new Ctor(x);\n\n      return external ? finalise(y, pr, rm) : y;\n    }\n\n    // x and y are finite, non-zero numbers with the same sign.\n\n    // Calculate base 1e7 exponents.\n    k = mathfloor(x.e / LOG_BASE);\n    e = mathfloor(y.e / LOG_BASE);\n\n    xd = xd.slice();\n    i = k - e;\n\n    // If base 1e7 exponents differ...\n    if (i) {\n\n      if (i < 0) {\n        d = xd;\n        i = -i;\n        len = yd.length;\n      } else {\n        d = yd;\n        e = k;\n        len = xd.length;\n      }\n\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\n      k = Math.ceil(pr / LOG_BASE);\n      len = k > len ? k + 1 : len + 1;\n\n      if (i > len) {\n        i = len;\n        d.length = 1;\n      }\n\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\n      d.reverse();\n      for (; i--;) d.push(0);\n      d.reverse();\n    }\n\n    len = xd.length;\n    i = yd.length;\n\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\n    if (len - i < 0) {\n      i = len;\n      d = yd;\n      yd = xd;\n      xd = d;\n    }\n\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\n    for (carry = 0; i;) {\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\n      xd[i] %= BASE;\n    }\n\n    if (carry) {\n      xd.unshift(carry);\n      ++e;\n    }\n\n    // Remove trailing zeros.\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\n\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n\n    return external ? finalise(y, pr, rm) : y;\n  };\n\n\n  /*\n   * Return the number of significant digits of the value of this Decimal.\n   *\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\n   *\n   */\n  P.precision = P.sd = function (z) {\n    var k,\n      x = this;\n\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\n\n    if (x.d) {\n      k = getPrecision(x.d);\n      if (z && x.e + 1 > k) k = x.e + 1;\n    } else {\n      k = NaN;\n    }\n\n    return k;\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\n   * rounding mode `rounding`.\n   *\n   */\n  P.round = function () {\n    var x = this,\n      Ctor = x.constructor;\n\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-1, 1]\n   *\n   * sin(x) = x - x^3/3! + x^5/5! - ...\n   *\n   * sin(0)         = 0\n   * sin(-0)        = -0\n   * sin(Infinity)  = NaN\n   * sin(-Infinity) = NaN\n   * sin(NaN)       = NaN\n   *\n   */\n  P.sine = P.sin = function () {\n    var pr, rm,\n      x = this,\n      Ctor = x.constructor;\n\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\n\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   *  sqrt(-n) =  N\n   *  sqrt(N)  =  N\n   *  sqrt(-I) =  N\n   *  sqrt(I)  =  I\n   *  sqrt(0)  =  0\n   *  sqrt(-0) = -0\n   *\n   */\n  P.squareRoot = P.sqrt = function () {\n    var m, n, sd, r, rep, t,\n      x = this,\n      d = x.d,\n      e = x.e,\n      s = x.s,\n      Ctor = x.constructor;\n\n    // Negative/NaN/Infinity/zero?\n    if (s !== 1 || !d || !d[0]) {\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\n    }\n\n    external = false;\n\n    // Initial estimate.\n    s = Math.sqrt(+x);\n\n    // Math.sqrt underflow/overflow?\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n    if (s == 0 || s == 1 / 0) {\n      n = digitsToString(d);\n\n      if ((n.length + e) % 2 == 0) n += '0';\n      s = Math.sqrt(n);\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\n\n      if (s == 1 / 0) {\n        n = '5e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n\n      r = new Ctor(n);\n    } else {\n      r = new Ctor(s.toString());\n    }\n\n    sd = (e = Ctor.precision) + 3;\n\n    // Newton-Raphson iteration.\n    for (;;) {\n      t = r;\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\n\n      // TODO? Replace with for-loop and checkRoundingDigits.\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n        n = n.slice(sd - 3, sd + 1);\n\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\n        if (n == '9999' || !rep && n == '4999') {\n\n          // On the first iteration only, check to see if rounding up gives the exact result as the\n          // nines may infinitely repeat.\n          if (!rep) {\n            finalise(t, e + 1, 0);\n\n            if (t.times(t).eq(x)) {\n              r = t;\n              break;\n            }\n          }\n\n          sd += 4;\n          rep = 1;\n        } else {\n\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n          // If not, then there are further digits and m will be truthy.\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n            // Truncate to the first rounding digit.\n            finalise(r, e + 1, 1);\n            m = !r.times(r).eq(x);\n          }\n\n          break;\n        }\n      }\n    }\n\n    external = true;\n\n    return finalise(r, e, Ctor.rounding, m);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-Infinity, Infinity]\n   *\n   * tan(0)         = 0\n   * tan(-0)        = -0\n   * tan(Infinity)  = NaN\n   * tan(-Infinity) = NaN\n   * tan(NaN)       = NaN\n   *\n   */\n  P.tangent = P.tan = function () {\n    var pr, rm,\n      x = this,\n      Ctor = x.constructor;\n\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 10;\n    Ctor.rounding = 1;\n\n    x = x.sin();\n    x.s = 1;\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\n\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\n  };\n\n\n  /*\n   *  n * 0 = 0\n   *  n * N = N\n   *  n * I = I\n   *  0 * n = 0\n   *  0 * 0 = 0\n   *  0 * N = N\n   *  0 * I = N\n   *  N * n = N\n   *  N * 0 = N\n   *  N * N = N\n   *  N * I = N\n   *  I * n = I\n   *  I * 0 = N\n   *  I * N = N\n   *  I * I = I\n   *\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\n   * digits using rounding mode `rounding`.\n   *\n   */\n  P.times = P.mul = function (y) {\n    var carry, e, i, k, r, rL, t, xdL, ydL,\n      x = this,\n      Ctor = x.constructor,\n      xd = x.d,\n      yd = (y = new Ctor(y)).d;\n\n    y.s *= x.s;\n\n     // If either is NaN, ±Infinity or ±0...\n    if (!xd || !xd[0] || !yd || !yd[0]) {\n\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\n\n        // Return NaN if either is NaN.\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\n        ? NaN\n\n        // Return ±Infinity if either is ±Infinity.\n        // Return ±0 if either is ±0.\n        : !xd || !yd ? y.s / 0 : y.s * 0);\n    }\n\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\n    xdL = xd.length;\n    ydL = yd.length;\n\n    // Ensure xd points to the longer array.\n    if (xdL < ydL) {\n      r = xd;\n      xd = yd;\n      yd = r;\n      rL = xdL;\n      xdL = ydL;\n      ydL = rL;\n    }\n\n    // Initialise the result array with zeros.\n    r = [];\n    rL = xdL + ydL;\n    for (i = rL; i--;) r.push(0);\n\n    // Multiply!\n    for (i = ydL; --i >= 0;) {\n      carry = 0;\n      for (k = xdL + i; k > i;) {\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\n        r[k--] = t % BASE | 0;\n        carry = t / BASE | 0;\n      }\n\n      r[k] = (r[k] + carry) % BASE | 0;\n    }\n\n    // Remove trailing zeros.\n    for (; !r[--rL];) r.pop();\n\n    if (carry) ++e;\n    else r.shift();\n\n    y.d = r;\n    y.e = getBase10Exponent(r, e);\n\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\n  };\n\n\n  /*\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\n   * digits using rounding mode `rm`.\n   *\n   * If the optional `sd` argument is present then return binary exponential notation.\n   *\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   */\n  P.toBinary = function (sd, rm) {\n    return toStringBinary(this, 2, sd, rm);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\n   *\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\n   *\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   */\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\n    var x = this,\n      Ctor = x.constructor;\n\n    x = new Ctor(x);\n    if (dp === void 0) return x;\n\n    checkInt32(dp, 0, MAX_DIGITS);\n\n    if (rm === void 0) rm = Ctor.rounding;\n    else checkInt32(rm, 0, 8);\n\n    return finalise(x, dp + x.e + 1, rm);\n  };\n\n\n  /*\n   * Return a string representing the value of this Decimal in exponential notation rounded to\n   * `dp` fixed decimal places using rounding mode `rounding`.\n   *\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   */\n  P.toExponential = function (dp, rm) {\n    var str,\n      x = this,\n      Ctor = x.constructor;\n\n    if (dp === void 0) {\n      str = finiteToString(x, true);\n    } else {\n      checkInt32(dp, 0, MAX_DIGITS);\n\n      if (rm === void 0) rm = Ctor.rounding;\n      else checkInt32(rm, 0, 8);\n\n      x = finalise(new Ctor(x), dp + 1, rm);\n      str = finiteToString(x, true, dp + 1);\n    }\n\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n\n\n  /*\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\n   * omitted.\n   *\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\n   *\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n   * (-0).toFixed(3) is '0.000'.\n   * (-0.5).toFixed(0) is '-0'.\n   *\n   */\n  P.toFixed = function (dp, rm) {\n    var str, y,\n      x = this,\n      Ctor = x.constructor;\n\n    if (dp === void 0) {\n      str = finiteToString(x);\n    } else {\n      checkInt32(dp, 0, MAX_DIGITS);\n\n      if (rm === void 0) rm = Ctor.rounding;\n      else checkInt32(rm, 0, 8);\n\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\n      str = finiteToString(y, false, dp + y.e + 1);\n    }\n\n    // To determine whether to add the minus sign look at the value before it was rounded,\n    // i.e. look at `x` rather than `y`.\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n\n\n  /*\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\n   * numerator and an integer denominator.\n   *\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\n   * value necessary to represent the number exactly.\n   *\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\n   *\n   */\n  P.toFraction = function (maxD) {\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\n      x = this,\n      xd = x.d,\n      Ctor = x.constructor;\n\n    if (!xd) return new Ctor(x);\n\n    n1 = d0 = new Ctor(1);\n    d1 = n0 = new Ctor(0);\n\n    d = new Ctor(d1);\n    e = d.e = getPrecision(xd) - x.e - 1;\n    k = e % LOG_BASE;\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\n\n    if (maxD == null) {\n\n      // d is 10**e, the minimum max-denominator needed.\n      maxD = e > 0 ? d : n1;\n    } else {\n      n = new Ctor(maxD);\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\n    }\n\n    external = false;\n    n = new Ctor(digitsToString(xd));\n    pr = Ctor.precision;\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\n\n    for (;;)  {\n      q = divide(n, d, 0, 1, 1);\n      d2 = d0.plus(q.times(d1));\n      if (d2.cmp(maxD) == 1) break;\n      d0 = d1;\n      d1 = d2;\n      d2 = n1;\n      n1 = n0.plus(q.times(d2));\n      n0 = d2;\n      d2 = d;\n      d = n.minus(q.times(d2));\n      n = d2;\n    }\n\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\n    n0 = n0.plus(d2.times(n1));\n    d0 = d0.plus(d2.times(d1));\n    n0.s = n1.s = x.s;\n\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\n        ? [n1, d1] : [n0, d0];\n\n    Ctor.precision = pr;\n    external = true;\n\n    return r;\n  };\n\n\n  /*\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\n   * digits using rounding mode `rm`.\n   *\n   * If the optional `sd` argument is present then return binary exponential notation.\n   *\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   */\n  P.toHexadecimal = P.toHex = function (sd, rm) {\n    return toStringBinary(this, 16, sd, rm);\n  };\n\n\n  /*\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\n   *\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\n   * or `y` is NaN, in which case the return value will be also be NaN.\n   *\n   * The return value is not affected by the value of `precision`.\n   *\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   * 'toNearest() rounding mode not an integer: {rm}'\n   * 'toNearest() rounding mode out of range: {rm}'\n   *\n   */\n  P.toNearest = function (y, rm) {\n    var x = this,\n      Ctor = x.constructor;\n\n    x = new Ctor(x);\n\n    if (y == null) {\n\n      // If x is not finite, return x.\n      if (!x.d) return x;\n\n      y = new Ctor(1);\n      rm = Ctor.rounding;\n    } else {\n      y = new Ctor(y);\n      if (rm === void 0) {\n        rm = Ctor.rounding;\n      } else {\n        checkInt32(rm, 0, 8);\n      }\n\n      // If x is not finite, return x if y is not NaN, else NaN.\n      if (!x.d) return y.s ? x : y;\n\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\n      if (!y.d) {\n        if (y.s) y.s = x.s;\n        return y;\n      }\n    }\n\n    // If y is not zero, calculate the nearest multiple of y to x.\n    if (y.d[0]) {\n      external = false;\n      x = divide(x, y, 0, rm, 1).times(y);\n      external = true;\n      finalise(x);\n\n    // If y is zero, return zero with the sign of x.\n    } else {\n      y.s = x.s;\n      x = y;\n    }\n\n    return x;\n  };\n\n\n  /*\n   * Return the value of this Decimal converted to a number primitive.\n   * Zero keeps its sign.\n   *\n   */\n  P.toNumber = function () {\n    return +this;\n  };\n\n\n  /*\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\n   * digits using rounding mode `rm`.\n   *\n   * If the optional `sd` argument is present then return binary exponential notation.\n   *\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   */\n  P.toOctal = function (sd, rm) {\n    return toStringBinary(this, 8, sd, rm);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\n   * to `precision` significant digits using rounding mode `rounding`.\n   *\n   * ECMAScript compliant.\n   *\n   *   pow(x, NaN)                           = NaN\n   *   pow(x, ±0)                            = 1\n\n   *   pow(NaN, non-zero)                    = NaN\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\n   *   pow(abs(x) > 1, -Infinity)            = +0\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\n   *   pow(abs(x) < 1, +Infinity)            = +0\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\n   *   pow(+Infinity, y > 0)                 = +Infinity\n   *   pow(+Infinity, y < 0)                 = +0\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\n   *   pow(-Infinity, even integer > 0)      = +Infinity\n   *   pow(-Infinity, odd integer < 0)       = -0\n   *   pow(-Infinity, even integer < 0)      = +0\n   *   pow(+0, y > 0)                        = +0\n   *   pow(+0, y < 0)                        = +Infinity\n   *   pow(-0, odd integer > 0)              = -0\n   *   pow(-0, even integer > 0)             = +0\n   *   pow(-0, odd integer < 0)              = -Infinity\n   *   pow(-0, even integer < 0)             = +Infinity\n   *   pow(finite x < 0, finite non-integer) = NaN\n   *\n   * For non-integer or very large exponents pow(x, y) is calculated using\n   *\n   *   x^y = exp(y*ln(x))\n   *\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\n   * probability of an incorrectly rounded result\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\n   * i.e. 1 in 250,000,000,000,000\n   *\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\n   *\n   * y {number|string|Decimal} The power to which to raise this Decimal.\n   *\n   */\n  P.toPower = P.pow = function (y) {\n    var e, k, pr, r, rm, s,\n      x = this,\n      Ctor = x.constructor,\n      yn = +(y = new Ctor(y));\n\n    // Either ±Infinity, NaN or ±0?\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\n\n    x = new Ctor(x);\n\n    if (x.eq(1)) return x;\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n\n    if (y.eq(1)) return finalise(x, pr, rm);\n\n    // y exponent\n    e = mathfloor(y.e / LOG_BASE);\n\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\n      r = intPow(Ctor, x, k, pr);\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\n    }\n\n    s = x.s;\n\n    // if x is negative\n    if (s < 0) {\n\n      // if y is not an integer\n      if (e < y.d.length - 1) return new Ctor(NaN);\n\n      // Result is positive if x is negative and the last digit of integer y is even.\n      if ((y.d[e] & 1) == 0) s = 1;\n\n      // if x.eq(-1)\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\n        x.s = s;\n        return x;\n      }\n    }\n\n    // Estimate result exponent.\n    // x^y = 10^e,  where e = y * log10(x)\n    // log10(x) = log10(x_significand) + x_exponent\n    // log10(x_significand) = ln(x_significand) / ln(10)\n    k = mathpow(+x, yn);\n    e = k == 0 || !isFinite(k)\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\n      : new Ctor(k + '').e;\n\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\n\n    // Overflow/underflow?\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\n\n    external = false;\n    Ctor.rounding = x.s = 1;\n\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\n    // new Decimal(2.32456).pow('2087987436534566.46411')\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\n    k = Math.min(12, (e + '').length);\n\n    // r = x^y = exp(y*ln(x))\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\n\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\n    if (r.d) {\n\n      // Truncate to the required precision plus five rounding digits.\n      r = finalise(r, pr + 5, 1);\n\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\n      // the result.\n      if (checkRoundingDigits(r.d, pr, rm)) {\n        e = pr + 10;\n\n        // Truncate to the increased precision plus five rounding digits.\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\n\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\n          r = finalise(r, pr + 1, 0);\n        }\n      }\n    }\n\n    r.s = s;\n    external = true;\n    Ctor.rounding = rm;\n\n    return finalise(r, pr, rm);\n  };\n\n\n  /*\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\n   * using rounding mode `rounding`.\n   *\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\n   * the integer part of the value in normal notation.\n   *\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   */\n  P.toPrecision = function (sd, rm) {\n    var str,\n      x = this,\n      Ctor = x.constructor;\n\n    if (sd === void 0) {\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    } else {\n      checkInt32(sd, 1, MAX_DIGITS);\n\n      if (rm === void 0) rm = Ctor.rounding;\n      else checkInt32(rm, 0, 8);\n\n      x = finalise(new Ctor(x), sd, rm);\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\n    }\n\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\n   * omitted.\n   *\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   * 'toSD() digits out of range: {sd}'\n   * 'toSD() digits not an integer: {sd}'\n   * 'toSD() rounding mode not an integer: {rm}'\n   * 'toSD() rounding mode out of range: {rm}'\n   *\n   */\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\n    var x = this,\n      Ctor = x.constructor;\n\n    if (sd === void 0) {\n      sd = Ctor.precision;\n      rm = Ctor.rounding;\n    } else {\n      checkInt32(sd, 1, MAX_DIGITS);\n\n      if (rm === void 0) rm = Ctor.rounding;\n      else checkInt32(rm, 0, 8);\n    }\n\n    return finalise(new Ctor(x), sd, rm);\n  };\n\n\n  /*\n   * Return a string representing the value of this Decimal.\n   *\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\n   *\n   */\n  P.toString = function () {\n    var x = this,\n      Ctor = x.constructor,\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\n   *\n   */\n  P.truncated = P.trunc = function () {\n    return finalise(new this.constructor(this), this.e + 1, 1);\n  };\n\n\n  /*\n   * Return a string representing the value of this Decimal.\n   * Unlike `toString`, negative zero will include the minus sign.\n   *\n   */\n  P.valueOf = P.toJSON = function () {\n    var x = this,\n      Ctor = x.constructor,\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n\n    return x.isNeg() ? '-' + str : str;\n  };\n\n\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\n\n\n  /*\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\n   *                           finiteToString, naturalExponential, naturalLogarithm\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\n   *  convertBase              toStringBinary, parseOther\n   *  cos                      P.cos\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\n   *                           taylorSeries, atan2, parseOther\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\n   *                           naturalLogarithm, ceil, floor, round, trunc\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\n   *                           toStringBinary\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\n   *  getLn10                  P.logarithm, naturalLogarithm\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\n   *  getPrecision             P.precision, P.toFraction\n   *  getZeroString            digitsToString, finiteToString\n   *  intPow                   P.toPower, parseOther\n   *  isOdd                    toLessThanHalfPi\n   *  maxOrMin                 max, min\n   *  naturalExponential       P.naturalExponential, P.toPower\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\n   *                           P.toPower, naturalExponential\n   *  nonFiniteToString        finiteToString, toStringBinary\n   *  parseDecimal             Decimal\n   *  parseOther               Decimal\n   *  sin                      P.sin\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\n   *  toLessThanHalfPi         P.cos, P.sin\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\n   *  truncate                 intPow\n   *\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\n   *                           naturalLogarithm, config, parseOther, random, Decimal\n   */\n\n\n  function digitsToString(d) {\n    var i, k, ws,\n      indexOfLastWord = d.length - 1,\n      str = '',\n      w = d[0];\n\n    if (indexOfLastWord > 0) {\n      str += w;\n      for (i = 1; i < indexOfLastWord; i++) {\n        ws = d[i] + '';\n        k = LOG_BASE - ws.length;\n        if (k) str += getZeroString(k);\n        str += ws;\n      }\n\n      w = d[i];\n      ws = w + '';\n      k = LOG_BASE - ws.length;\n      if (k) str += getZeroString(k);\n    } else if (w === 0) {\n      return '0';\n    }\n\n    // Remove trailing zeros of last w.\n    for (; w % 10 === 0;) w /= 10;\n\n    return str + w;\n  }\n\n\n  function checkInt32(i, min, max) {\n    if (i !== ~~i || i < min || i > max) {\n      throw Error(invalidArgument + i);\n    }\n  }\n\n\n  /*\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\n   * `repeating == null` if caller is `log` or `pow`,\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\n   */\n  function checkRoundingDigits(d, i, rm, repeating) {\n    var di, k, r, rd;\n\n    // Get the length of the first word of the array d.\n    for (k = d[0]; k >= 10; k /= 10) --i;\n\n    // Is the rounding digit in the first word of d?\n    if (--i < 0) {\n      i += LOG_BASE;\n      di = 0;\n    } else {\n      di = Math.ceil((i + 1) / LOG_BASE);\n      i %= LOG_BASE;\n    }\n\n    // i is the index (0 - 6) of the rounding digit.\n    // E.g. if within the word 3487563 the first rounding digit is 5,\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\n    k = mathpow(10, LOG_BASE - i);\n    rd = d[di] % k | 0;\n\n    if (repeating == null) {\n      if (i < 3) {\n        if (i == 0) rd = rd / 100 | 0;\n        else if (i == 1) rd = rd / 10 | 0;\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\n      } else {\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\n      }\n    } else {\n      if (i < 4) {\n        if (i == 0) rd = rd / 1000 | 0;\n        else if (i == 1) rd = rd / 100 | 0;\n        else if (i == 2) rd = rd / 10 | 0;\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\n      } else {\n        r = ((repeating || rm < 4) && rd + 1 == k ||\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\n      }\n    }\n\n    return r;\n  }\n\n\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\n  function convertBase(str, baseIn, baseOut) {\n    var j,\n      arr = [0],\n      arrL,\n      i = 0,\n      strL = str.length;\n\n    for (; i < strL;) {\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\n      for (j = 0; j < arr.length; j++) {\n        if (arr[j] > baseOut - 1) {\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\n          arr[j + 1] += arr[j] / baseOut | 0;\n          arr[j] %= baseOut;\n        }\n      }\n    }\n\n    return arr.reverse();\n  }\n\n\n  /*\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\n   * |x| < pi/2\n   *\n   */\n  function cosine(Ctor, x) {\n    var k, len, y;\n\n    if (x.isZero()) return x;\n\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\n\n    // Estimate the optimum number of times to use the argument reduction.\n    len = x.d.length;\n    if (len < 32) {\n      k = Math.ceil(len / 3);\n      y = (1 / tinyPow(4, k)).toString();\n    } else {\n      k = 16;\n      y = '2.3283064365386962890625e-10';\n    }\n\n    Ctor.precision += k;\n\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\n\n    // Reverse argument reduction\n    for (var i = k; i--;) {\n      var cos2x = x.times(x);\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\n    }\n\n    Ctor.precision -= k;\n\n    return x;\n  }\n\n\n  /*\n   * Perform division in the specified base.\n   */\n  var divide = (function () {\n\n    // Assumes non-zero x and k, and hence non-zero result.\n    function multiplyInteger(x, k, base) {\n      var temp,\n        carry = 0,\n        i = x.length;\n\n      for (x = x.slice(); i--;) {\n        temp = x[i] * k + carry;\n        x[i] = temp % base | 0;\n        carry = temp / base | 0;\n      }\n\n      if (carry) x.unshift(carry);\n\n      return x;\n    }\n\n    function compare(a, b, aL, bL) {\n      var i, r;\n\n      if (aL != bL) {\n        r = aL > bL ? 1 : -1;\n      } else {\n        for (i = r = 0; i < aL; i++) {\n          if (a[i] != b[i]) {\n            r = a[i] > b[i] ? 1 : -1;\n            break;\n          }\n        }\n      }\n\n      return r;\n    }\n\n    function subtract(a, b, aL, base) {\n      var i = 0;\n\n      // Subtract b from a.\n      for (; aL--;) {\n        a[aL] -= i;\n        i = a[aL] < b[aL] ? 1 : 0;\n        a[aL] = i * base + a[aL] - b[aL];\n      }\n\n      // Remove leading zeros.\n      for (; !a[0] && a.length > 1;) a.shift();\n    }\n\n    return function (x, y, pr, rm, dp, base) {\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\n        yL, yz,\n        Ctor = x.constructor,\n        sign = x.s == y.s ? 1 : -1,\n        xd = x.d,\n        yd = y.d;\n\n      // Either NaN, Infinity or 0?\n      if (!xd || !xd[0] || !yd || !yd[0]) {\n\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\n\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\n      }\n\n      if (base) {\n        logBase = 1;\n        e = x.e - y.e;\n      } else {\n        base = BASE;\n        logBase = LOG_BASE;\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\n      }\n\n      yL = yd.length;\n      xL = xd.length;\n      q = new Ctor(sign);\n      qd = q.d = [];\n\n      // Result exponent may be one less than e.\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\n\n      if (yd[i] > (xd[i] || 0)) e--;\n\n      if (pr == null) {\n        sd = pr = Ctor.precision;\n        rm = Ctor.rounding;\n      } else if (dp) {\n        sd = pr + (x.e - y.e) + 1;\n      } else {\n        sd = pr;\n      }\n\n      if (sd < 0) {\n        qd.push(1);\n        more = true;\n      } else {\n\n        // Convert precision in number of base 10 digits to base 1e7 digits.\n        sd = sd / logBase + 2 | 0;\n        i = 0;\n\n        // divisor < 1e7\n        if (yL == 1) {\n          k = 0;\n          yd = yd[0];\n          sd++;\n\n          // k is the carry.\n          for (; (i < xL || k) && sd--; i++) {\n            t = k * base + (xd[i] || 0);\n            qd[i] = t / yd | 0;\n            k = t % yd | 0;\n          }\n\n          more = k || i < xL;\n\n        // divisor >= 1e7\n        } else {\n\n          // Normalise xd and yd so highest order digit of yd is >= base/2\n          k = base / (yd[0] + 1) | 0;\n\n          if (k > 1) {\n            yd = multiplyInteger(yd, k, base);\n            xd = multiplyInteger(xd, k, base);\n            yL = yd.length;\n            xL = xd.length;\n          }\n\n          xi = yL;\n          rem = xd.slice(0, yL);\n          remL = rem.length;\n\n          // Add zeros to make remainder as long as divisor.\n          for (; remL < yL;) rem[remL++] = 0;\n\n          yz = yd.slice();\n          yz.unshift(0);\n          yd0 = yd[0];\n\n          if (yd[1] >= base / 2) ++yd0;\n\n          do {\n            k = 0;\n\n            // Compare divisor and remainder.\n            cmp = compare(yd, rem, yL, remL);\n\n            // If divisor < remainder.\n            if (cmp < 0) {\n\n              // Calculate trial digit, k.\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n              // k will be how many times the divisor goes into the current remainder.\n              k = rem0 / yd0 | 0;\n\n              //  Algorithm:\n              //  1. product = divisor * trial digit (k)\n              //  2. if product > remainder: product -= divisor, k--\n              //  3. remainder -= product\n              //  4. if product was < remainder at 2:\n              //    5. compare new remainder and divisor\n              //    6. If remainder > divisor: remainder -= divisor, k++\n\n              if (k > 1) {\n                if (k >= base) k = base - 1;\n\n                // product = divisor * trial digit.\n                prod = multiplyInteger(yd, k, base);\n                prodL = prod.length;\n                remL = rem.length;\n\n                // Compare product and remainder.\n                cmp = compare(prod, rem, prodL, remL);\n\n                // product > remainder.\n                if (cmp == 1) {\n                  k--;\n\n                  // Subtract divisor from product.\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\n                }\n              } else {\n\n                // cmp is -1.\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\n                if (k == 0) cmp = k = 1;\n                prod = yd.slice();\n              }\n\n              prodL = prod.length;\n              if (prodL < remL) prod.unshift(0);\n\n              // Subtract product from remainder.\n              subtract(rem, prod, remL, base);\n\n              // If product was < previous remainder.\n              if (cmp == -1) {\n                remL = rem.length;\n\n                // Compare divisor and new remainder.\n                cmp = compare(yd, rem, yL, remL);\n\n                // If divisor < new remainder, subtract divisor from remainder.\n                if (cmp < 1) {\n                  k++;\n\n                  // Subtract divisor from remainder.\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\n                }\n              }\n\n              remL = rem.length;\n            } else if (cmp === 0) {\n              k++;\n              rem = [0];\n            }    // if cmp === 1, k will be 0\n\n            // Add the next digit, k, to the result array.\n            qd[i++] = k;\n\n            // Update the remainder.\n            if (cmp && rem[0]) {\n              rem[remL++] = xd[xi] || 0;\n            } else {\n              rem = [xd[xi]];\n              remL = 1;\n            }\n\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\n\n          more = rem[0] !== void 0;\n        }\n\n        // Leading zero?\n        if (!qd[0]) qd.shift();\n      }\n\n      // logBase is 1 when divide is being used for base conversion.\n      if (logBase == 1) {\n        q.e = e;\n        inexact = more;\n      } else {\n\n        // To calculate q.e, first get the number of digits of qd[0].\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\n        q.e = i + e * logBase - 1;\n\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\n      }\n\n      return q;\n    };\n  })();\n\n\n  /*\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\n   * Check for over/under-flow.\n   */\n   function finalise(x, sd, rm, isTruncated) {\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\n      Ctor = x.constructor;\n\n    // Don't round if sd is null or undefined.\n    out: if (sd != null) {\n      xd = x.d;\n\n      // Infinity/NaN.\n      if (!xd) return x;\n\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\n      // w: the word of xd containing rd, a base 1e7 number.\n      // xdi: the index of w within xd.\n      // digits: the number of digits of w.\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\n      // they had leading zeros)\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\n\n      // Get the length of the first word of the digits array xd.\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\n      i = sd - digits;\n\n      // Is the rounding digit in the first word of xd?\n      if (i < 0) {\n        i += LOG_BASE;\n        j = sd;\n        w = xd[xdi = 0];\n\n        // Get the rounding digit at index j of w.\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\n      } else {\n        xdi = Math.ceil((i + 1) / LOG_BASE);\n        k = xd.length;\n        if (xdi >= k) {\n          if (isTruncated) {\n\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\n            for (; k++ <= xdi;) xd.push(0);\n            w = rd = 0;\n            digits = 1;\n            i %= LOG_BASE;\n            j = i - LOG_BASE + 1;\n          } else {\n            break out;\n          }\n        } else {\n          w = k = xd[xdi];\n\n          // Get the number of digits of w.\n          for (digits = 1; k >= 10; k /= 10) digits++;\n\n          // Get the index of rd within w.\n          i %= LOG_BASE;\n\n          // Get the index of rd within w, adjusted for leading zeros.\n          // The number of leading zeros of w is given by LOG_BASE - digits.\n          j = i - LOG_BASE + digits;\n\n          // Get the rounding digit at index j of w.\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\n        }\n      }\n\n      // Are there any non-zero digits after the rounding digit?\n      isTruncated = isTruncated || sd < 0 ||\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\n\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\n      // will give 714.\n\n      roundUp = rm < 4\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\n\n          // Check whether the digit to the left of the rounding digit is odd.\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\n            rm == (x.s < 0 ? 8 : 7));\n\n      if (sd < 1 || !xd[0]) {\n        xd.length = 0;\n        if (roundUp) {\n\n          // Convert sd to decimal places.\n          sd -= x.e + 1;\n\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\n          x.e = -sd || 0;\n        } else {\n\n          // Zero.\n          xd[0] = x.e = 0;\n        }\n\n        return x;\n      }\n\n      // Remove excess digits.\n      if (i == 0) {\n        xd.length = xdi;\n        k = 1;\n        xdi--;\n      } else {\n        xd.length = xdi + 1;\n        k = mathpow(10, LOG_BASE - i);\n\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n        // j > 0 means i > number of leading zeros of w.\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\n      }\n\n      if (roundUp) {\n        for (;;) {\n\n          // Is the digit to be rounded up in the first word of xd?\n          if (xdi == 0) {\n\n            // i will be the length of xd[0] before k is added.\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\n            j = xd[0] += k;\n            for (k = 1; j >= 10; j /= 10) k++;\n\n            // if i != k the length has increased.\n            if (i != k) {\n              x.e++;\n              if (xd[0] == BASE) xd[0] = 1;\n            }\n\n            break;\n          } else {\n            xd[xdi] += k;\n            if (xd[xdi] != BASE) break;\n            xd[xdi--] = 0;\n            k = 1;\n          }\n        }\n      }\n\n      // Remove trailing zeros.\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\n    }\n\n    if (external) {\n\n      // Overflow?\n      if (x.e > Ctor.maxE) {\n\n        // Infinity.\n        x.d = null;\n        x.e = NaN;\n\n      // Underflow?\n      } else if (x.e < Ctor.minE) {\n\n        // Zero.\n        x.e = 0;\n        x.d = [0];\n        // Ctor.underflow = true;\n      } // else Ctor.underflow = false;\n    }\n\n    return x;\n  }\n\n\n  function finiteToString(x, isExp, sd) {\n    if (!x.isFinite()) return nonFiniteToString(x);\n    var k,\n      e = x.e,\n      str = digitsToString(x.d),\n      len = str.length;\n\n    if (isExp) {\n      if (sd && (k = sd - len) > 0) {\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\n      } else if (len > 1) {\n        str = str.charAt(0) + '.' + str.slice(1);\n      }\n\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\n    } else if (e < 0) {\n      str = '0.' + getZeroString(-e - 1) + str;\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\n    } else if (e >= len) {\n      str += getZeroString(e + 1 - len);\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\n    } else {\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\n      if (sd && (k = sd - len) > 0) {\n        if (e + 1 === len) str += '.';\n        str += getZeroString(k);\n      }\n    }\n\n    return str;\n  }\n\n\n  // Calculate the base 10 exponent from the base 1e7 exponent.\n  function getBase10Exponent(digits, e) {\n    var w = digits[0];\n\n    // Add the number of digits of the first word of the digits array.\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\n    return e;\n  }\n\n\n  function getLn10(Ctor, sd, pr) {\n    if (sd > LN10_PRECISION) {\n\n      // Reset global state in case the exception is caught.\n      external = true;\n      if (pr) Ctor.precision = pr;\n      throw Error(precisionLimitExceeded);\n    }\n    return finalise(new Ctor(LN10), sd, 1, true);\n  }\n\n\n  function getPi(Ctor, sd, rm) {\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\n    return finalise(new Ctor(PI), sd, rm, true);\n  }\n\n\n  function getPrecision(digits) {\n    var w = digits.length - 1,\n      len = w * LOG_BASE + 1;\n\n    w = digits[w];\n\n    // If non-zero...\n    if (w) {\n\n      // Subtract the number of trailing zeros of the last word.\n      for (; w % 10 == 0; w /= 10) len--;\n\n      // Add the number of digits of the first word.\n      for (w = digits[0]; w >= 10; w /= 10) len++;\n    }\n\n    return len;\n  }\n\n\n  function getZeroString(k) {\n    var zs = '';\n    for (; k--;) zs += '0';\n    return zs;\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\n   * integer of type number.\n   *\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\n   *\n   */\n  function intPow(Ctor, x, n, pr) {\n    var isTruncated,\n      r = new Ctor(1),\n\n      // Max n of 9007199254740991 takes 53 loop iterations.\n      // Maximum digits array length; leaves [28, 34] guard digits.\n      k = Math.ceil(pr / LOG_BASE + 4);\n\n    external = false;\n\n    for (;;) {\n      if (n % 2) {\n        r = r.times(x);\n        if (truncate(r.d, k)) isTruncated = true;\n      }\n\n      n = mathfloor(n / 2);\n      if (n === 0) {\n\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\n        n = r.d.length - 1;\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\n        break;\n      }\n\n      x = x.times(x);\n      truncate(x.d, k);\n    }\n\n    external = true;\n\n    return r;\n  }\n\n\n  function isOdd(n) {\n    return n.d[n.d.length - 1] & 1;\n  }\n\n\n  /*\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\n   */\n  function maxOrMin(Ctor, args, ltgt) {\n    var y,\n      x = new Ctor(args[0]),\n      i = 0;\n\n    for (; ++i < args.length;) {\n      y = new Ctor(args[i]);\n      if (!y.s) {\n        x = y;\n        break;\n      } else if (x[ltgt](y)) {\n        x = y;\n      }\n    }\n\n    return x;\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\n   * digits.\n   *\n   * Taylor/Maclaurin series.\n   *\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\n   *\n   * Argument reduction:\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\n   *   exp(x) = exp(x / 2^k)^(2^k)\n   *\n   * Previously, the argument was initially reduced by\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\n   * found to be slower than just dividing repeatedly by 32 as above.\n   *\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\n   *\n   *  exp(Infinity)  = Infinity\n   *  exp(-Infinity) = 0\n   *  exp(NaN)       = NaN\n   *  exp(±0)        = 1\n   *\n   *  exp(x) is non-terminating for any finite, non-zero x.\n   *\n   *  The result will always be correctly rounded.\n   *\n   */\n  function naturalExponential(x, sd) {\n    var denominator, guard, j, pow, sum, t, wpr,\n      rep = 0,\n      i = 0,\n      k = 0,\n      Ctor = x.constructor,\n      rm = Ctor.rounding,\n      pr = Ctor.precision;\n\n    // 0/NaN/Infinity?\n    if (!x.d || !x.d[0] || x.e > 17) {\n\n      return new Ctor(x.d\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\n    }\n\n    if (sd == null) {\n      external = false;\n      wpr = pr;\n    } else {\n      wpr = sd;\n    }\n\n    t = new Ctor(0.03125);\n\n    // while abs(x) >= 0.1\n    while (x.e > -2) {\n\n      // x = x / 2^5\n      x = x.times(t);\n      k += 5;\n    }\n\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\n    // necessary to ensure the first 4 rounding digits are correct.\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\n    wpr += guard;\n    denominator = pow = sum = new Ctor(1);\n    Ctor.precision = wpr;\n\n    for (;;) {\n      pow = finalise(pow.times(x), wpr, 1);\n      denominator = denominator.times(++i);\n      t = sum.plus(divide(pow, denominator, wpr, 1));\n\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n        j = k;\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\n\n        // Check to see if the first 4 rounding digits are [49]999.\n        // If so, repeat the summation with a higher precision, otherwise\n        // e.g. with precision: 18, rounding: 1\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\n        // `wpr - guard` is the index of first rounding digit.\n        if (sd == null) {\n\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n            Ctor.precision = wpr += 10;\n            denominator = pow = t = new Ctor(1);\n            i = 0;\n            rep++;\n          } else {\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\n          }\n        } else {\n          Ctor.precision = pr;\n          return sum;\n        }\n      }\n\n      sum = t;\n    }\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\n   * digits.\n   *\n   *  ln(-n)        = NaN\n   *  ln(0)         = -Infinity\n   *  ln(-0)        = -Infinity\n   *  ln(1)         = 0\n   *  ln(Infinity)  = Infinity\n   *  ln(-Infinity) = NaN\n   *  ln(NaN)       = NaN\n   *\n   *  ln(n) (n != 1) is non-terminating.\n   *\n   */\n  function naturalLogarithm(y, sd) {\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\n      n = 1,\n      guard = 10,\n      x = y,\n      xd = x.d,\n      Ctor = x.constructor,\n      rm = Ctor.rounding,\n      pr = Ctor.precision;\n\n    // Is x negative or Infinity, NaN, 0 or 1?\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\n    }\n\n    if (sd == null) {\n      external = false;\n      wpr = pr;\n    } else {\n      wpr = sd;\n    }\n\n    Ctor.precision = wpr += guard;\n    c = digitsToString(xd);\n    c0 = c.charAt(0);\n\n    if (Math.abs(e = x.e) < 1.5e15) {\n\n      // Argument reduction.\n      // The series converges faster the closer the argument is to 1, so using\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\n      // later be divided by this number, then separate out the power of 10 using\n      // ln(a*10^b) = ln(a) + b*ln(10).\n\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\n      // max n is 6 (gives 0.7 - 1.3)\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\n        x = x.times(y);\n        c = digitsToString(x.d);\n        c0 = c.charAt(0);\n        n++;\n      }\n\n      e = x.e;\n\n      if (c0 > 1) {\n        x = new Ctor('0.' + c);\n        e++;\n      } else {\n        x = new Ctor(c0 + '.' + c.slice(1));\n      }\n    } else {\n\n      // The argument reduction method above may result in overflow if the argument y is a massive\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\n      Ctor.precision = pr;\n\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\n    }\n\n    // x1 is x reduced to a value near 1.\n    x1 = x;\n\n    // Taylor series.\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\n    x2 = finalise(x.times(x), wpr, 1);\n    denominator = 3;\n\n    for (;;) {\n      numerator = finalise(numerator.times(x2), wpr, 1);\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\n\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n        sum = sum.times(2);\n\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\n        sum = divide(sum, new Ctor(n), wpr, 1);\n\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\n        // been repeated previously) and the first 4 rounding digits 9999?\n        // If so, restart the summation with a higher precision, otherwise\n        // e.g. with precision: 12, rounding: 1\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\n        // `wpr - guard` is the index of first rounding digit.\n        if (sd == null) {\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n            Ctor.precision = wpr += guard;\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\n            x2 = finalise(x.times(x), wpr, 1);\n            denominator = rep = 1;\n          } else {\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\n          }\n        } else {\n          Ctor.precision = pr;\n          return sum;\n        }\n      }\n\n      sum = t;\n      denominator += 2;\n    }\n  }\n\n\n  // ±Infinity, NaN.\n  function nonFiniteToString(x) {\n    // Unsigned.\n    return String(x.s * x.s / 0);\n  }\n\n\n  /*\n   * Parse the value of a new Decimal `x` from string `str`.\n   */\n  function parseDecimal(x, str) {\n    var e, i, len;\n\n    // Decimal point?\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n    // Exponential form?\n    if ((i = str.search(/e/i)) > 0) {\n\n      // Determine exponent.\n      if (e < 0) e = i;\n      e += +str.slice(i + 1);\n      str = str.substring(0, i);\n    } else if (e < 0) {\n\n      // Integer.\n      e = str.length;\n    }\n\n    // Determine leading zeros.\n    for (i = 0; str.charCodeAt(i) === 48; i++);\n\n    // Determine trailing zeros.\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\n    str = str.slice(i, len);\n\n    if (str) {\n      len -= i;\n      x.e = e = e - i - 1;\n      x.d = [];\n\n      // Transform base\n\n      // e is the base 10 exponent.\n      // i is where to slice str to get the first word of the digits array.\n      i = (e + 1) % LOG_BASE;\n      if (e < 0) i += LOG_BASE;\n\n      if (i < len) {\n        if (i) x.d.push(+str.slice(0, i));\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\n        str = str.slice(i);\n        i = LOG_BASE - str.length;\n      } else {\n        i -= len;\n      }\n\n      for (; i--;) str += '0';\n      x.d.push(+str);\n\n      if (external) {\n\n        // Overflow?\n        if (x.e > x.constructor.maxE) {\n\n          // Infinity.\n          x.d = null;\n          x.e = NaN;\n\n        // Underflow?\n        } else if (x.e < x.constructor.minE) {\n\n          // Zero.\n          x.e = 0;\n          x.d = [0];\n          // x.constructor.underflow = true;\n        } // else x.constructor.underflow = false;\n      }\n    } else {\n\n      // Zero.\n      x.e = 0;\n      x.d = [0];\n    }\n\n    return x;\n  }\n\n\n  /*\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\n   */\n  function parseOther(x, str) {\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\n\n    if (str.indexOf('_') > -1) {\n      str = str.replace(/(\\d)_(?=\\d)/g, '$1');\n      if (isDecimal.test(str)) return parseDecimal(x, str);\n    } else if (str === 'Infinity' || str === 'NaN') {\n      if (!+str) x.s = NaN;\n      x.e = NaN;\n      x.d = null;\n      return x;\n    }\n\n    if (isHex.test(str))  {\n      base = 16;\n      str = str.toLowerCase();\n    } else if (isBinary.test(str))  {\n      base = 2;\n    } else if (isOctal.test(str))  {\n      base = 8;\n    } else {\n      throw Error(invalidArgument + str);\n    }\n\n    // Is there a binary exponent part?\n    i = str.search(/p/i);\n\n    if (i > 0) {\n      p = +str.slice(i + 1);\n      str = str.substring(2, i);\n    } else {\n      str = str.slice(2);\n    }\n\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\n    // fraction part will be restored.\n    i = str.indexOf('.');\n    isFloat = i >= 0;\n    Ctor = x.constructor;\n\n    if (isFloat) {\n      str = str.replace('.', '');\n      len = str.length;\n      i = len - i;\n\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\n    }\n\n    xd = convertBase(str, base, BASE);\n    xe = xd.length - 1;\n\n    // Remove trailing zeros.\n    for (i = xe; xd[i] === 0; --i) xd.pop();\n    if (i < 0) return new Ctor(x.s * 0);\n    x.e = getBase10Exponent(xd, xe);\n    x.d = xd;\n    external = false;\n\n    // At what precision to perform the division to ensure exact conversion?\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\n    // Therefore using 4 * the number of digits of str will always be enough.\n    if (isFloat) x = divide(x, divisor, len * 4);\n\n    // Multiply by the binary exponent part if present.\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\n    external = true;\n\n    return x;\n  }\n\n\n  /*\n   * sin(x) = x - x^3/3! + x^5/5! - ...\n   * |x| < pi/2\n   *\n   */\n  function sine(Ctor, x) {\n    var k,\n      len = x.d.length;\n\n    if (len < 3) {\n      return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\n    }\n\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\n\n    // Estimate the optimum number of times to use the argument reduction.\n    k = 1.4 * Math.sqrt(len);\n    k = k > 16 ? 16 : k | 0;\n\n    x = x.times(1 / tinyPow(5, k));\n    x = taylorSeries(Ctor, 2, x, x);\n\n    // Reverse argument reduction\n    var sin2_x,\n      d5 = new Ctor(5),\n      d16 = new Ctor(16),\n      d20 = new Ctor(20);\n    for (; k--;) {\n      sin2_x = x.times(x);\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\n    }\n\n    return x;\n  }\n\n\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\n    var j, t, u, x2,\n      i = 1,\n      pr = Ctor.precision,\n      k = Math.ceil(pr / LOG_BASE);\n\n    external = false;\n    x2 = x.times(x);\n    u = new Ctor(y);\n\n    for (;;) {\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\n      t = u.plus(y);\n\n      if (t.d[k] !== void 0) {\n        for (j = k; t.d[j] === u.d[j] && j--;);\n        if (j == -1) break;\n      }\n\n      j = u;\n      u = y;\n      y = t;\n      t = j;\n      i++;\n    }\n\n    external = true;\n    t.d.length = k + 1;\n\n    return t;\n  }\n\n\n  // Exponent e must be positive and non-zero.\n  function tinyPow(b, e) {\n    var n = b;\n    while (--e) n *= b;\n    return n;\n  }\n\n\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\n  function toLessThanHalfPi(Ctor, x) {\n    var t,\n      isNeg = x.s < 0,\n      pi = getPi(Ctor, Ctor.precision, 1),\n      halfPi = pi.times(0.5);\n\n    x = x.abs();\n\n    if (x.lte(halfPi)) {\n      quadrant = isNeg ? 4 : 1;\n      return x;\n    }\n\n    t = x.divToInt(pi);\n\n    if (t.isZero()) {\n      quadrant = isNeg ? 3 : 2;\n    } else {\n      x = x.minus(t.times(pi));\n\n      // 0 <= x < pi\n      if (x.lte(halfPi)) {\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\n        return x;\n      }\n\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\n    }\n\n    return x.minus(pi).abs();\n  }\n\n\n  /*\n   * Return the value of Decimal `x` as a string in base `baseOut`.\n   *\n   * If the optional `sd` argument is present include a binary exponent suffix.\n   */\n  function toStringBinary(x, baseOut, sd, rm) {\n    var base, e, i, k, len, roundUp, str, xd, y,\n      Ctor = x.constructor,\n      isExp = sd !== void 0;\n\n    if (isExp) {\n      checkInt32(sd, 1, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;\n      else checkInt32(rm, 0, 8);\n    } else {\n      sd = Ctor.precision;\n      rm = Ctor.rounding;\n    }\n\n    if (!x.isFinite()) {\n      str = nonFiniteToString(x);\n    } else {\n      str = finiteToString(x);\n      i = str.indexOf('.');\n\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\n      // log[2](10) = 3.321928094887362347870319429489390175864\n\n      if (isExp) {\n        base = 2;\n        if (baseOut == 16) {\n          sd = sd * 4 - 3;\n        } else if (baseOut == 8) {\n          sd = sd * 3 - 2;\n        }\n      } else {\n        base = baseOut;\n      }\n\n      // Convert the number as an integer then divide the result by its base raised to a power such\n      // that the fraction part will be restored.\n\n      // Non-integer.\n      if (i >= 0) {\n        str = str.replace('.', '');\n        y = new Ctor(1);\n        y.e = str.length - i;\n        y.d = convertBase(finiteToString(y), 10, base);\n        y.e = y.d.length;\n      }\n\n      xd = convertBase(str, 10, base);\n      e = len = xd.length;\n\n      // Remove trailing zeros.\n      for (; xd[--len] == 0;) xd.pop();\n\n      if (!xd[0]) {\n        str = isExp ? '0p+0' : '0';\n      } else {\n        if (i < 0) {\n          e--;\n        } else {\n          x = new Ctor(x);\n          x.d = xd;\n          x.e = e;\n          x = divide(x, y, sd, rm, 0, base);\n          xd = x.d;\n          e = x.e;\n          roundUp = inexact;\n        }\n\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\n        i = xd[sd];\n        k = base / 2;\n        roundUp = roundUp || xd[sd + 1] !== void 0;\n\n        roundUp = rm < 4\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\n            rm === (x.s < 0 ? 8 : 7));\n\n        xd.length = sd;\n\n        if (roundUp) {\n\n          // Rounding up may mean the previous digit has to be rounded up and so on.\n          for (; ++xd[--sd] > base - 1;) {\n            xd[sd] = 0;\n            if (!sd) {\n              ++e;\n              xd.unshift(1);\n            }\n          }\n        }\n\n        // Determine trailing zeros.\n        for (len = xd.length; !xd[len - 1]; --len);\n\n        // E.g. [4, 11, 15] becomes 4bf.\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\n\n        // Add binary exponent suffix?\n        if (isExp) {\n          if (len > 1) {\n            if (baseOut == 16 || baseOut == 8) {\n              i = baseOut == 16 ? 4 : 3;\n              for (--len; len % i; len++) str += '0';\n              xd = convertBase(str, base, baseOut);\n              for (len = xd.length; !xd[len - 1]; --len);\n\n              // xd[0] will always be be 1\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\n            } else {\n              str = str.charAt(0) + '.' + str.slice(1);\n            }\n          }\n\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\n        } else if (e < 0) {\n          for (; ++e;) str = '0' + str;\n          str = '0.' + str;\n        } else {\n          if (++e > len) for (e -= len; e-- ;) str += '0';\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\n        }\n      }\n\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\n    }\n\n    return x.s < 0 ? '-' + str : str;\n  }\n\n\n  // Does not strip trailing zeros.\n  function truncate(arr, len) {\n    if (arr.length > len) {\n      arr.length = len;\n      return true;\n    }\n  }\n\n\n  // Decimal methods\n\n\n  /*\n   *  abs\n   *  acos\n   *  acosh\n   *  add\n   *  asin\n   *  asinh\n   *  atan\n   *  atanh\n   *  atan2\n   *  cbrt\n   *  ceil\n   *  clamp\n   *  clone\n   *  config\n   *  cos\n   *  cosh\n   *  div\n   *  exp\n   *  floor\n   *  hypot\n   *  ln\n   *  log\n   *  log2\n   *  log10\n   *  max\n   *  min\n   *  mod\n   *  mul\n   *  pow\n   *  random\n   *  round\n   *  set\n   *  sign\n   *  sin\n   *  sinh\n   *  sqrt\n   *  sub\n   *  sum\n   *  tan\n   *  tanh\n   *  trunc\n   */\n\n\n  /*\n   * Return a new Decimal whose value is the absolute value of `x`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function abs(x) {\n    return new this(x).abs();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function acos(x) {\n    return new this(x).acos();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\n   * `precision` significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function acosh(x) {\n    return new this(x).acosh();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\n   * digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   * y {number|string|Decimal}\n   *\n   */\n  function add(x, y) {\n    return new this(x).plus(y);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function asin(x) {\n    return new this(x).asin();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\n   * `precision` significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function asinh(x) {\n    return new this(x).asinh();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function atan(x) {\n    return new this(x).atan();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\n   * `precision` significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function atanh(x) {\n    return new this(x).atanh();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-pi, pi]\n   *\n   * y {number|string|Decimal} The y-coordinate.\n   * x {number|string|Decimal} The x-coordinate.\n   *\n   * atan2(±0, -0)               = ±pi\n   * atan2(±0, +0)               = ±0\n   * atan2(±0, -x)               = ±pi for x > 0\n   * atan2(±0, x)                = ±0 for x > 0\n   * atan2(-y, ±0)               = -pi/2 for y > 0\n   * atan2(y, ±0)                = pi/2 for y > 0\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\n   * atan2(±Infinity, +Infinity) = ±pi/4\n   * atan2(NaN, x) = NaN\n   * atan2(y, NaN) = NaN\n   *\n   */\n  function atan2(y, x) {\n    y = new this(y);\n    x = new this(x);\n    var r,\n      pr = this.precision,\n      rm = this.rounding,\n      wpr = pr + 4;\n\n    // Either NaN\n    if (!y.s || !x.s) {\n      r = new this(NaN);\n\n    // Both ±Infinity\n    } else if (!y.d && !x.d) {\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\n      r.s = y.s;\n\n    // x is ±Infinity or y is ±0\n    } else if (!x.d || y.isZero()) {\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\n      r.s = y.s;\n\n    // y is ±Infinity or x is ±0\n    } else if (!y.d || x.isZero()) {\n      r = getPi(this, wpr, 1).times(0.5);\n      r.s = y.s;\n\n    // Both non-zero and finite\n    } else if (x.s < 0) {\n      this.precision = wpr;\n      this.rounding = 1;\n      r = this.atan(divide(y, x, wpr, 1));\n      x = getPi(this, wpr, 1);\n      this.precision = pr;\n      this.rounding = rm;\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\n    } else {\n      r = this.atan(divide(y, x, wpr, 1));\n    }\n\n    return r;\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\n   * digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function cbrt(x) {\n    return new this(x).cbrt();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function ceil(x) {\n    return finalise(x = new this(x), x.e + 1, 2);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\n   *\n   * x {number|string|Decimal}\n   * min {number|string|Decimal}\n   * max {number|string|Decimal}\n   *\n   */\n  function clamp(x, min, max) {\n    return new this(x).clamp(min, max);\n  }\n\n\n  /*\n   * Configure global settings for a Decimal constructor.\n   *\n   * `obj` is an object with one or more of the following properties,\n   *\n   *   precision  {number}\n   *   rounding   {number}\n   *   toExpNeg   {number}\n   *   toExpPos   {number}\n   *   maxE       {number}\n   *   minE       {number}\n   *   modulo     {number}\n   *   crypto     {boolean|number}\n   *   defaults   {true}\n   *\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\n   *\n   */\n  function config(obj) {\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\n    var i, p, v,\n      useDefaults = obj.defaults === true,\n      ps = [\n        'precision', 1, MAX_DIGITS,\n        'rounding', 0, 8,\n        'toExpNeg', -EXP_LIMIT, 0,\n        'toExpPos', 0, EXP_LIMIT,\n        'maxE', 0, EXP_LIMIT,\n        'minE', -EXP_LIMIT, 0,\n        'modulo', 0, 9\n      ];\n\n    for (i = 0; i < ps.length; i += 3) {\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\n      if ((v = obj[p]) !== void 0) {\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\n        else throw Error(invalidArgument + p + ': ' + v);\n      }\n    }\n\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\n    if ((v = obj[p]) !== void 0) {\n      if (v === true || v === false || v === 0 || v === 1) {\n        if (v) {\n          if (typeof crypto != 'undefined' && crypto &&\n            (crypto.getRandomValues || crypto.randomBytes)) {\n            this[p] = true;\n          } else {\n            throw Error(cryptoUnavailable);\n          }\n        } else {\n          this[p] = false;\n        }\n      } else {\n        throw Error(invalidArgument + p + ': ' + v);\n      }\n    }\n\n    return this;\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\n   * digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function cos(x) {\n    return new this(x).cos();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function cosh(x) {\n    return new this(x).cosh();\n  }\n\n\n  /*\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\n   * constructor.\n   *\n   */\n  function clone(obj) {\n    var i, p, ps;\n\n    /*\n     * The Decimal constructor and exported function.\n     * Return a new Decimal instance.\n     *\n     * v {number|string|Decimal} A numeric value.\n     *\n     */\n    function Decimal(v) {\n      var e, i, t,\n        x = this;\n\n      // Decimal called without new.\n      if (!(x instanceof Decimal)) return new Decimal(v);\n\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\n      // which points to Object.\n      x.constructor = Decimal;\n\n      // Duplicate.\n      if (isDecimalInstance(v)) {\n        x.s = v.s;\n\n        if (external) {\n          if (!v.d || v.e > Decimal.maxE) {\n\n            // Infinity.\n            x.e = NaN;\n            x.d = null;\n          } else if (v.e < Decimal.minE) {\n\n            // Zero.\n            x.e = 0;\n            x.d = [0];\n          } else {\n            x.e = v.e;\n            x.d = v.d.slice();\n          }\n        } else {\n          x.e = v.e;\n          x.d = v.d ? v.d.slice() : v.d;\n        }\n\n        return;\n      }\n\n      t = typeof v;\n\n      if (t === 'number') {\n        if (v === 0) {\n          x.s = 1 / v < 0 ? -1 : 1;\n          x.e = 0;\n          x.d = [0];\n          return;\n        }\n\n        if (v < 0) {\n          v = -v;\n          x.s = -1;\n        } else {\n          x.s = 1;\n        }\n\n        // Fast path for small integers.\n        if (v === ~~v && v < 1e7) {\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\n\n          if (external) {\n            if (e > Decimal.maxE) {\n              x.e = NaN;\n              x.d = null;\n            } else if (e < Decimal.minE) {\n              x.e = 0;\n              x.d = [0];\n            } else {\n              x.e = e;\n              x.d = [v];\n            }\n          } else {\n            x.e = e;\n            x.d = [v];\n          }\n\n          return;\n\n        // Infinity, NaN.\n        } else if (v * 0 !== 0) {\n          if (!v) x.s = NaN;\n          x.e = NaN;\n          x.d = null;\n          return;\n        }\n\n        return parseDecimal(x, v.toString());\n\n      } else if (t !== 'string') {\n        throw Error(invalidArgument + v);\n      }\n\n      // Minus sign?\n      if ((i = v.charCodeAt(0)) === 45) {\n        v = v.slice(1);\n        x.s = -1;\n      } else {\n        // Plus sign?\n        if (i === 43) v = v.slice(1);\n        x.s = 1;\n      }\n\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\n    }\n\n    Decimal.prototype = P;\n\n    Decimal.ROUND_UP = 0;\n    Decimal.ROUND_DOWN = 1;\n    Decimal.ROUND_CEIL = 2;\n    Decimal.ROUND_FLOOR = 3;\n    Decimal.ROUND_HALF_UP = 4;\n    Decimal.ROUND_HALF_DOWN = 5;\n    Decimal.ROUND_HALF_EVEN = 6;\n    Decimal.ROUND_HALF_CEIL = 7;\n    Decimal.ROUND_HALF_FLOOR = 8;\n    Decimal.EUCLID = 9;\n\n    Decimal.config = Decimal.set = config;\n    Decimal.clone = clone;\n    Decimal.isDecimal = isDecimalInstance;\n\n    Decimal.abs = abs;\n    Decimal.acos = acos;\n    Decimal.acosh = acosh;        // ES6\n    Decimal.add = add;\n    Decimal.asin = asin;\n    Decimal.asinh = asinh;        // ES6\n    Decimal.atan = atan;\n    Decimal.atanh = atanh;        // ES6\n    Decimal.atan2 = atan2;\n    Decimal.cbrt = cbrt;          // ES6\n    Decimal.ceil = ceil;\n    Decimal.clamp = clamp;\n    Decimal.cos = cos;\n    Decimal.cosh = cosh;          // ES6\n    Decimal.div = div;\n    Decimal.exp = exp;\n    Decimal.floor = floor;\n    Decimal.hypot = hypot;        // ES6\n    Decimal.ln = ln;\n    Decimal.log = log;\n    Decimal.log10 = log10;        // ES6\n    Decimal.log2 = log2;          // ES6\n    Decimal.max = max;\n    Decimal.min = min;\n    Decimal.mod = mod;\n    Decimal.mul = mul;\n    Decimal.pow = pow;\n    Decimal.random = random;\n    Decimal.round = round;\n    Decimal.sign = sign;          // ES6\n    Decimal.sin = sin;\n    Decimal.sinh = sinh;          // ES6\n    Decimal.sqrt = sqrt;\n    Decimal.sub = sub;\n    Decimal.sum = sum;\n    Decimal.tan = tan;\n    Decimal.tanh = tanh;          // ES6\n    Decimal.trunc = trunc;        // ES6\n\n    if (obj === void 0) obj = {};\n    if (obj) {\n      if (obj.defaults !== true) {\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\n      }\n    }\n\n    Decimal.config(obj);\n\n    return Decimal;\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\n   * digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   * y {number|string|Decimal}\n   *\n   */\n  function div(x, y) {\n    return new this(x).div(y);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\n   *\n   */\n  function exp(x) {\n    return new this(x).exp();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function floor(x) {\n    return finalise(x = new this(x), x.e + 1, 3);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\n   * rounded to `precision` significant digits using rounding mode `rounding`.\n   *\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\n   *\n   * arguments {number|string|Decimal}\n   *\n   */\n  function hypot() {\n    var i, n,\n      t = new this(0);\n\n    external = false;\n\n    for (i = 0; i < arguments.length;) {\n      n = new this(arguments[i++]);\n      if (!n.d) {\n        if (n.s) {\n          external = true;\n          return new this(1 / 0);\n        }\n        t = n;\n      } else if (t.d) {\n        t = t.plus(n.times(n));\n      }\n    }\n\n    external = true;\n\n    return t.sqrt();\n  }\n\n\n  /*\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\n   * otherwise return false.\n   *\n   */\n  function isDecimalInstance(obj) {\n    return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function ln(x) {\n    return new this(x).ln();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\n   *\n   * log[y](x)\n   *\n   * x {number|string|Decimal} The argument of the logarithm.\n   * y {number|string|Decimal} The base of the logarithm.\n   *\n   */\n  function log(x, y) {\n    return new this(x).log(y);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function log2(x) {\n    return new this(x).log(2);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function log10(x) {\n    return new this(x).log(10);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the maximum of the arguments.\n   *\n   * arguments {number|string|Decimal}\n   *\n   */\n  function max() {\n    return maxOrMin(this, arguments, 'lt');\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the minimum of the arguments.\n   *\n   * arguments {number|string|Decimal}\n   *\n   */\n  function min() {\n    return maxOrMin(this, arguments, 'gt');\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\n   * using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   * y {number|string|Decimal}\n   *\n   */\n  function mod(x, y) {\n    return new this(x).mod(y);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\n   * digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   * y {number|string|Decimal}\n   *\n   */\n  function mul(x, y) {\n    return new this(x).mul(y);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} The base.\n   * y {number|string|Decimal} The exponent.\n   *\n   */\n  function pow(x, y) {\n    return new this(x).pow(y);\n  }\n\n\n  /*\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\n   * are produced).\n   *\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\n   *\n   */\n  function random(sd) {\n    var d, e, k, n,\n      i = 0,\n      r = new this(1),\n      rd = [];\n\n    if (sd === void 0) sd = this.precision;\n    else checkInt32(sd, 1, MAX_DIGITS);\n\n    k = Math.ceil(sd / LOG_BASE);\n\n    if (!this.crypto) {\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\n\n    // Browsers supporting crypto.getRandomValues.\n    } else if (crypto.getRandomValues) {\n      d = crypto.getRandomValues(new Uint32Array(k));\n\n      for (; i < k;) {\n        n = d[i];\n\n        // 0 <= n < 4294967296\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\n        if (n >= 4.29e9) {\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\n        } else {\n\n          // 0 <= n <= 4289999999\n          // 0 <= (n % 1e7) <= 9999999\n          rd[i++] = n % 1e7;\n        }\n      }\n\n    // Node.js supporting crypto.randomBytes.\n    } else if (crypto.randomBytes) {\n\n      // buffer\n      d = crypto.randomBytes(k *= 4);\n\n      for (; i < k;) {\n\n        // 0 <= n < 2147483648\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\n\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\n        if (n >= 2.14e9) {\n          crypto.randomBytes(4).copy(d, i);\n        } else {\n\n          // 0 <= n <= 2139999999\n          // 0 <= (n % 1e7) <= 9999999\n          rd.push(n % 1e7);\n          i += 4;\n        }\n      }\n\n      i = k / 4;\n    } else {\n      throw Error(cryptoUnavailable);\n    }\n\n    k = rd[--i];\n    sd %= LOG_BASE;\n\n    // Convert trailing digits to zeros according to sd.\n    if (k && sd) {\n      n = mathpow(10, LOG_BASE - sd);\n      rd[i] = (k / n | 0) * n;\n    }\n\n    // Remove trailing words which are zero.\n    for (; rd[i] === 0; i--) rd.pop();\n\n    // Zero?\n    if (i < 0) {\n      e = 0;\n      rd = [0];\n    } else {\n      e = -1;\n\n      // Remove leading words which are zero and adjust exponent accordingly.\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\n\n      // Count the digits of the first word of rd to determine leading zeros.\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\n\n      // Adjust the exponent for leading zeros of the first word of rd.\n      if (k < LOG_BASE) e -= LOG_BASE - k;\n    }\n\n    r.e = e;\n    r.d = rd;\n\n    return r;\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\n   *\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function round(x) {\n    return finalise(x = new this(x), x.e + 1, this.rounding);\n  }\n\n\n  /*\n   * Return\n   *   1    if x > 0,\n   *  -1    if x < 0,\n   *   0    if x is 0,\n   *  -0    if x is -0,\n   *   NaN  otherwise\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function sign(x) {\n    x = new this(x);\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\n   * using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function sin(x) {\n    return new this(x).sin();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function sinh(x) {\n    return new this(x).sinh();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\n   * digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function sqrt(x) {\n    return new this(x).sqrt();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\n   * using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   * y {number|string|Decimal}\n   *\n   */\n  function sub(x, y) {\n    return new this(x).sub(y);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * Only the result is rounded, not the intermediate calculations.\n   *\n   * arguments {number|string|Decimal}\n   *\n   */\n  function sum() {\n    var i = 0,\n      args = arguments,\n      x = new this(args[i]);\n\n    external = false;\n    for (; x.s && ++i < args.length;) x = x.plus(args[i]);\n    external = true;\n\n    return finalise(x, this.precision, this.rounding);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\n   * digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function tan(x) {\n    return new this(x).tan();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function tanh(x) {\n    return new this(x).tanh();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` truncated to an integer.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function trunc(x) {\n    return finalise(x = new this(x), x.e + 1, 1);\n  }\n\n\n  // Create and configure initial Decimal constructor.\n  Decimal = clone(DEFAULTS);\n  Decimal.prototype.constructor = Decimal;\n  Decimal['default'] = Decimal.Decimal = Decimal;\n\n  // Create the internal constants from their string values.\n  LN10 = new Decimal(LN10);\n  PI = new Decimal(PI);\n\n\n  // Export.\n\n\n  // AMD.\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return Decimal;\n    });\n\n  // Node and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\n      P[Symbol['for']('nodejs.util.inspect.custom')] = P.toString;\n      P[Symbol.toStringTag] = 'Decimal';\n    }\n\n    module.exports = Decimal;\n\n  // Browser.\n  } else {\n    if (!globalScope) {\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\n    }\n\n    noConflict = globalScope.Decimal;\n    Decimal.noConflict = function () {\n      globalScope.Decimal = noConflict;\n      return Decimal;\n    };\n\n    globalScope.Decimal = Decimal;\n  }\n})(this);\n"
        },
        {
          "name": "decimal.mjs",
          "type": "blob",
          "size": 119.291015625,
          "content": "/*!\n *  decimal.js v10.4.3\n *  An arbitrary-precision Decimal type for JavaScript.\n *  https://github.com/MikeMcl/decimal.js\n *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\n *  MIT Licence\n */\n\n\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\n\n\n  // The maximum exponent magnitude.\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\n\n  // The limit on the value of `precision`, and on the value of the first argument to\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\n\n  // Base conversion alphabet.\n  NUMERALS = '0123456789abcdef',\n\n  // The natural logarithm of 10 (1025 digits).\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\n\n  // Pi (1025 digits).\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\n\n\n  // The initial configuration properties of the Decimal constructor.\n  DEFAULTS = {\n\n    // These values must be integers within the stated ranges (inclusive).\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\n\n    // The maximum number of significant digits of the result of a calculation or base conversion.\n    // E.g. `Decimal.config({ precision: 20 });`\n    precision: 20,                         // 1 to MAX_DIGITS\n\n    // The rounding mode used when rounding to `precision`.\n    //\n    // ROUND_UP         0 Away from zero.\n    // ROUND_DOWN       1 Towards zero.\n    // ROUND_CEIL       2 Towards +Infinity.\n    // ROUND_FLOOR      3 Towards -Infinity.\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n    //\n    // E.g.\n    // `Decimal.rounding = 4;`\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\n    rounding: 4,                           // 0 to 8\n\n    // The modulo mode used when calculating the modulus: a mod n.\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n    // The remainder (r) is calculated as: r = a - n * q.\n    //\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\n    // HALF_EVEN  6 The IEEE 754 remainder function.\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\n    //\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\n    // be used, but they may not give useful results.\n    modulo: 1,                             // 0 to 9\n\n    // The exponent value at and beneath which `toString` returns exponential notation.\n    // JavaScript numbers: -7\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\n\n    // The exponent value at and above which `toString` returns exponential notation.\n    // JavaScript numbers: 21\n    toExpPos:  21,                         // 0 to EXP_LIMIT\n\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // JavaScript numbers: -324  (5e-324)\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\n\n    // The maximum exponent value, above which overflow to Infinity occurs.\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\n\n    // Whether to use cryptographically-secure random number generation, if available.\n    crypto: false                          // true/false\n  },\n\n\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\n\n\n  inexact, quadrant,\n  external = true,\n\n  decimalError = '[DecimalError] ',\n  invalidArgument = decimalError + 'Invalid argument: ',\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\n  cryptoUnavailable = decimalError + 'crypto unavailable',\n  tag = '[object Decimal]',\n\n  mathfloor = Math.floor,\n  mathpow = Math.pow,\n\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n\n  BASE = 1e7,\n  LOG_BASE = 7,\n  MAX_SAFE_INTEGER = 9007199254740991,\n\n  LN10_PRECISION = LN10.length - 1,\n  PI_PRECISION = PI.length - 1,\n\n  // Decimal.prototype object\n  P = { toStringTag: tag };\n\n\n// Decimal prototype methods\n\n\n/*\n *  absoluteValue             abs\n *  ceil\n *  clampedTo                 clamp\n *  comparedTo                cmp\n *  cosine                    cos\n *  cubeRoot                  cbrt\n *  decimalPlaces             dp\n *  dividedBy                 div\n *  dividedToIntegerBy        divToInt\n *  equals                    eq\n *  floor\n *  greaterThan               gt\n *  greaterThanOrEqualTo      gte\n *  hyperbolicCosine          cosh\n *  hyperbolicSine            sinh\n *  hyperbolicTangent         tanh\n *  inverseCosine             acos\n *  inverseHyperbolicCosine   acosh\n *  inverseHyperbolicSine     asinh\n *  inverseHyperbolicTangent  atanh\n *  inverseSine               asin\n *  inverseTangent            atan\n *  isFinite\n *  isInteger                 isInt\n *  isNaN\n *  isNegative                isNeg\n *  isPositive                isPos\n *  isZero\n *  lessThan                  lt\n *  lessThanOrEqualTo         lte\n *  logarithm                 log\n *  [maximum]                 [max]\n *  [minimum]                 [min]\n *  minus                     sub\n *  modulo                    mod\n *  naturalExponential        exp\n *  naturalLogarithm          ln\n *  negated                   neg\n *  plus                      add\n *  precision                 sd\n *  round\n *  sine                      sin\n *  squareRoot                sqrt\n *  tangent                   tan\n *  times                     mul\n *  toBinary\n *  toDecimalPlaces           toDP\n *  toExponential\n *  toFixed\n *  toFraction\n *  toHexadecimal             toHex\n *  toNearest\n *  toNumber\n *  toOctal\n *  toPower                   pow\n *  toPrecision\n *  toSignificantDigits       toSD\n *  toString\n *  truncated                 trunc\n *  valueOf                   toJSON\n */\n\n\n/*\n * Return a new Decimal whose value is the absolute value of this Decimal.\n *\n */\nP.absoluteValue = P.abs = function () {\n  var x = new this.constructor(this);\n  if (x.s < 0) x.s = 1;\n  return finalise(x);\n};\n\n\n/*\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\n * direction of positive Infinity.\n *\n */\nP.ceil = function () {\n  return finalise(new this.constructor(this), this.e + 1, 2);\n};\n\n\n/*\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\n * delineated by `min` and `max`.\n *\n * min {number|string|Decimal}\n * max {number|string|Decimal}\n *\n */\nP.clampedTo = P.clamp = function (min, max) {\n  var k,\n    x = this,\n    Ctor = x.constructor;\n  min = new Ctor(min);\n  max = new Ctor(max);\n  if (!min.s || !max.s) return new Ctor(NaN);\n  if (min.gt(max)) throw Error(invalidArgument + max);\n  k = x.cmp(min);\n  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\n};\n\n\n/*\n * Return\n *   1    if the value of this Decimal is greater than the value of `y`,\n *  -1    if the value of this Decimal is less than the value of `y`,\n *   0    if they have the same value,\n *   NaN  if the value of either Decimal is NaN.\n *\n */\nP.comparedTo = P.cmp = function (y) {\n  var i, j, xdL, ydL,\n    x = this,\n    xd = x.d,\n    yd = (y = new x.constructor(y)).d,\n    xs = x.s,\n    ys = y.s;\n\n  // Either NaN or ±Infinity?\n  if (!xd || !yd) {\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\n  }\n\n  // Either zero?\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\n\n  // Signs differ?\n  if (xs !== ys) return xs;\n\n  // Compare exponents.\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\n\n  xdL = xd.length;\n  ydL = yd.length;\n\n  // Compare digit by digit.\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\n  }\n\n  // Compare lengths.\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\n};\n\n\n/*\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\n *\n * Domain: [-Infinity, Infinity]\n * Range: [-1, 1]\n *\n * cos(0)         = 1\n * cos(-0)        = 1\n * cos(Infinity)  = NaN\n * cos(-Infinity) = NaN\n * cos(NaN)       = NaN\n *\n */\nP.cosine = P.cos = function () {\n  var pr, rm,\n    x = this,\n    Ctor = x.constructor;\n\n  if (!x.d) return new Ctor(NaN);\n\n  // cos(0) = cos(-0) = 1\n  if (!x.d[0]) return new Ctor(1);\n\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n  Ctor.rounding = 1;\n\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\n\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\n};\n\n\n/*\n *\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\n * `precision` significant digits using rounding mode `rounding`.\n *\n *  cbrt(0)  =  0\n *  cbrt(-0) = -0\n *  cbrt(1)  =  1\n *  cbrt(-1) = -1\n *  cbrt(N)  =  N\n *  cbrt(-I) = -I\n *  cbrt(I)  =  I\n *\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\n *\n */\nP.cubeRoot = P.cbrt = function () {\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\n    x = this,\n    Ctor = x.constructor;\n\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\n  external = false;\n\n  // Initial estimate.\n  s = x.s * mathpow(x.s * x, 1 / 3);\n\n   // Math.cbrt underflow/overflow?\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\n  if (!s || Math.abs(s) == 1 / 0) {\n    n = digitsToString(x.d);\n    e = x.e;\n\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\n    s = mathpow(n, 1 / 3);\n\n    // Rarely, e may be one less than the result exponent value.\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\n\n    if (s == 1 / 0) {\n      n = '5e' + e;\n    } else {\n      n = s.toExponential();\n      n = n.slice(0, n.indexOf('e') + 1) + e;\n    }\n\n    r = new Ctor(n);\n    r.s = x.s;\n  } else {\n    r = new Ctor(s.toString());\n  }\n\n  sd = (e = Ctor.precision) + 3;\n\n  // Halley's method.\n  // TODO? Compare Newton's method.\n  for (;;) {\n    t = r;\n    t3 = t.times(t).times(t);\n    t3plusx = t3.plus(x);\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\n\n    // TODO? Replace with for-loop and checkRoundingDigits.\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n      n = n.slice(sd - 3, sd + 1);\n\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\n      // , i.e. approaching a rounding boundary, continue the iteration.\n      if (n == '9999' || !rep && n == '4999') {\n\n        // On the first iteration only, check to see if rounding up gives the exact result as the\n        // nines may infinitely repeat.\n        if (!rep) {\n          finalise(t, e + 1, 0);\n\n          if (t.times(t).times(t).eq(x)) {\n            r = t;\n            break;\n          }\n        }\n\n        sd += 4;\n        rep = 1;\n      } else {\n\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n        // If not, then there are further digits and m will be truthy.\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n          // Truncate to the first rounding digit.\n          finalise(r, e + 1, 1);\n          m = !r.times(r).times(r).eq(x);\n        }\n\n        break;\n      }\n    }\n  }\n\n  external = true;\n\n  return finalise(r, e, Ctor.rounding, m);\n};\n\n\n/*\n * Return the number of decimal places of the value of this Decimal.\n *\n */\nP.decimalPlaces = P.dp = function () {\n  var w,\n    d = this.d,\n    n = NaN;\n\n  if (d) {\n    w = d.length - 1;\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\n\n    // Subtract the number of trailing zeros of the last word.\n    w = d[w];\n    if (w) for (; w % 10 == 0; w /= 10) n--;\n    if (n < 0) n = 0;\n  }\n\n  return n;\n};\n\n\n/*\n *  n / 0 = I\n *  n / N = N\n *  n / I = 0\n *  0 / n = 0\n *  0 / 0 = N\n *  0 / N = N\n *  0 / I = 0\n *  N / n = N\n *  N / 0 = N\n *  N / N = N\n *  N / I = N\n *  I / n = I\n *  I / 0 = I\n *  I / N = N\n *  I / I = N\n *\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\n * `precision` significant digits using rounding mode `rounding`.\n *\n */\nP.dividedBy = P.div = function (y) {\n  return divide(this, new this.constructor(y));\n};\n\n\n/*\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\n *\n */\nP.dividedToIntegerBy = P.divToInt = function (y) {\n  var x = this,\n    Ctor = x.constructor;\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\n};\n\n\n/*\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\n *\n */\nP.equals = P.eq = function (y) {\n  return this.cmp(y) === 0;\n};\n\n\n/*\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\n * direction of negative Infinity.\n *\n */\nP.floor = function () {\n  return finalise(new this.constructor(this), this.e + 1, 3);\n};\n\n\n/*\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\n * false.\n *\n */\nP.greaterThan = P.gt = function (y) {\n  return this.cmp(y) > 0;\n};\n\n\n/*\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\n * otherwise return false.\n *\n */\nP.greaterThanOrEqualTo = P.gte = function (y) {\n  var k = this.cmp(y);\n  return k == 1 || k === 0;\n};\n\n\n/*\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\n * Decimal.\n *\n * Domain: [-Infinity, Infinity]\n * Range: [1, Infinity]\n *\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\n *\n * cosh(0)         = 1\n * cosh(-0)        = 1\n * cosh(Infinity)  = Infinity\n * cosh(-Infinity) = Infinity\n * cosh(NaN)       = NaN\n *\n *  x        time taken (ms)   result\n * 1000      9                 9.8503555700852349694e+433\n * 10000     25                4.4034091128314607936e+4342\n * 100000    171               1.4033316802130615897e+43429\n * 1000000   3817              1.5166076984010437725e+434294\n * 10000000  abandoned after 2 minute wait\n *\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\n *\n */\nP.hyperbolicCosine = P.cosh = function () {\n  var k, n, pr, rm, len,\n    x = this,\n    Ctor = x.constructor,\n    one = new Ctor(1);\n\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\n  if (x.isZero()) return one;\n\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n  Ctor.rounding = 1;\n  len = x.d.length;\n\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\n\n  // Estimate the optimum number of times to use the argument reduction.\n  // TODO? Estimation reused from cosine() and may not be optimal here.\n  if (len < 32) {\n    k = Math.ceil(len / 3);\n    n = (1 / tinyPow(4, k)).toString();\n  } else {\n    k = 16;\n    n = '2.3283064365386962890625e-10';\n  }\n\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\n\n  // Reverse argument reduction\n  var cosh2_x,\n    i = k,\n    d8 = new Ctor(8);\n  for (; i--;) {\n    cosh2_x = x.times(x);\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\n  }\n\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\n};\n\n\n/*\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\n * Decimal.\n *\n * Domain: [-Infinity, Infinity]\n * Range: [-Infinity, Infinity]\n *\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\n *\n * sinh(0)         = 0\n * sinh(-0)        = -0\n * sinh(Infinity)  = Infinity\n * sinh(-Infinity) = -Infinity\n * sinh(NaN)       = NaN\n *\n * x        time taken (ms)\n * 10       2 ms\n * 100      5 ms\n * 1000     14 ms\n * 10000    82 ms\n * 100000   886 ms            1.4033316802130615897e+43429\n * 200000   2613 ms\n * 300000   5407 ms\n * 400000   8824 ms\n * 500000   13026 ms          8.7080643612718084129e+217146\n * 1000000  48543 ms\n *\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\n *\n */\nP.hyperbolicSine = P.sinh = function () {\n  var k, pr, rm, len,\n    x = this,\n    Ctor = x.constructor;\n\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\n\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n  Ctor.rounding = 1;\n  len = x.d.length;\n\n  if (len < 3) {\n    x = taylorSeries(Ctor, 2, x, x, true);\n  } else {\n\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\n    // 3 multiplications and 1 addition\n\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\n    // 4 multiplications and 2 additions\n\n    // Estimate the optimum number of times to use the argument reduction.\n    k = 1.4 * Math.sqrt(len);\n    k = k > 16 ? 16 : k | 0;\n\n    x = x.times(1 / tinyPow(5, k));\n    x = taylorSeries(Ctor, 2, x, x, true);\n\n    // Reverse argument reduction\n    var sinh2_x,\n      d5 = new Ctor(5),\n      d16 = new Ctor(16),\n      d20 = new Ctor(20);\n    for (; k--;) {\n      sinh2_x = x.times(x);\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\n    }\n  }\n\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n\n  return finalise(x, pr, rm, true);\n};\n\n\n/*\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\n * Decimal.\n *\n * Domain: [-Infinity, Infinity]\n * Range: [-1, 1]\n *\n * tanh(x) = sinh(x) / cosh(x)\n *\n * tanh(0)         = 0\n * tanh(-0)        = -0\n * tanh(Infinity)  = 1\n * tanh(-Infinity) = -1\n * tanh(NaN)       = NaN\n *\n */\nP.hyperbolicTangent = P.tanh = function () {\n  var pr, rm,\n    x = this,\n    Ctor = x.constructor;\n\n  if (!x.isFinite()) return new Ctor(x.s);\n  if (x.isZero()) return new Ctor(x);\n\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  Ctor.precision = pr + 7;\n  Ctor.rounding = 1;\n\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\n};\n\n\n/*\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\n * this Decimal.\n *\n * Domain: [-1, 1]\n * Range: [0, pi]\n *\n * acos(x) = pi/2 - asin(x)\n *\n * acos(0)       = pi/2\n * acos(-0)      = pi/2\n * acos(1)       = 0\n * acos(-1)      = pi\n * acos(1/2)     = pi/3\n * acos(-1/2)    = 2*pi/3\n * acos(|x| > 1) = NaN\n * acos(NaN)     = NaN\n *\n */\nP.inverseCosine = P.acos = function () {\n  var halfPi,\n    x = this,\n    Ctor = x.constructor,\n    k = x.abs().cmp(1),\n    pr = Ctor.precision,\n    rm = Ctor.rounding;\n\n  if (k !== -1) {\n    return k === 0\n      // |x| is 1\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\n      // |x| > 1 or x is NaN\n      : new Ctor(NaN);\n  }\n\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\n\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\n\n  Ctor.precision = pr + 6;\n  Ctor.rounding = 1;\n\n  x = x.asin();\n  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n\n  return halfPi.minus(x);\n};\n\n\n/*\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\n * value of this Decimal.\n *\n * Domain: [1, Infinity]\n * Range: [0, Infinity]\n *\n * acosh(x) = ln(x + sqrt(x^2 - 1))\n *\n * acosh(x < 1)     = NaN\n * acosh(NaN)       = NaN\n * acosh(Infinity)  = Infinity\n * acosh(-Infinity) = NaN\n * acosh(0)         = NaN\n * acosh(-0)        = NaN\n * acosh(1)         = 0\n * acosh(-1)        = NaN\n *\n */\nP.inverseHyperbolicCosine = P.acosh = function () {\n  var pr, rm,\n    x = this,\n    Ctor = x.constructor;\n\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\n  if (!x.isFinite()) return new Ctor(x);\n\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\n  Ctor.rounding = 1;\n  external = false;\n\n  x = x.times(x).minus(1).sqrt().plus(x);\n\n  external = true;\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n\n  return x.ln();\n};\n\n\n/*\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\n * of this Decimal.\n *\n * Domain: [-Infinity, Infinity]\n * Range: [-Infinity, Infinity]\n *\n * asinh(x) = ln(x + sqrt(x^2 + 1))\n *\n * asinh(NaN)       = NaN\n * asinh(Infinity)  = Infinity\n * asinh(-Infinity) = -Infinity\n * asinh(0)         = 0\n * asinh(-0)        = -0\n *\n */\nP.inverseHyperbolicSine = P.asinh = function () {\n  var pr, rm,\n    x = this,\n    Ctor = x.constructor;\n\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\n\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\n  Ctor.rounding = 1;\n  external = false;\n\n  x = x.times(x).plus(1).sqrt().plus(x);\n\n  external = true;\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n\n  return x.ln();\n};\n\n\n/*\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\n * value of this Decimal.\n *\n * Domain: [-1, 1]\n * Range: [-Infinity, Infinity]\n *\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\n *\n * atanh(|x| > 1)   = NaN\n * atanh(NaN)       = NaN\n * atanh(Infinity)  = NaN\n * atanh(-Infinity) = NaN\n * atanh(0)         = 0\n * atanh(-0)        = -0\n * atanh(1)         = Infinity\n * atanh(-1)        = -Infinity\n *\n */\nP.inverseHyperbolicTangent = P.atanh = function () {\n  var pr, rm, wpr, xsd,\n    x = this,\n    Ctor = x.constructor;\n\n  if (!x.isFinite()) return new Ctor(NaN);\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\n\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  xsd = x.sd();\n\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\n\n  Ctor.precision = wpr = xsd - x.e;\n\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\n\n  Ctor.precision = pr + 4;\n  Ctor.rounding = 1;\n\n  x = x.ln();\n\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n\n  return x.times(0.5);\n};\n\n\n/*\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\n * Decimal.\n *\n * Domain: [-Infinity, Infinity]\n * Range: [-pi/2, pi/2]\n *\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\n *\n * asin(0)       = 0\n * asin(-0)      = -0\n * asin(1/2)     = pi/6\n * asin(-1/2)    = -pi/6\n * asin(1)       = pi/2\n * asin(-1)      = -pi/2\n * asin(|x| > 1) = NaN\n * asin(NaN)     = NaN\n *\n * TODO? Compare performance of Taylor series.\n *\n */\nP.inverseSine = P.asin = function () {\n  var halfPi, k,\n    pr, rm,\n    x = this,\n    Ctor = x.constructor;\n\n  if (x.isZero()) return new Ctor(x);\n\n  k = x.abs().cmp(1);\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n\n  if (k !== -1) {\n\n    // |x| is 1\n    if (k === 0) {\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n      halfPi.s = x.s;\n      return halfPi;\n    }\n\n    // |x| > 1 or x is NaN\n    return new Ctor(NaN);\n  }\n\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\n\n  Ctor.precision = pr + 6;\n  Ctor.rounding = 1;\n\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\n\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n\n  return x.times(2);\n};\n\n\n/*\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\n * of this Decimal.\n *\n * Domain: [-Infinity, Infinity]\n * Range: [-pi/2, pi/2]\n *\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\n *\n * atan(0)         = 0\n * atan(-0)        = -0\n * atan(1)         = pi/4\n * atan(-1)        = -pi/4\n * atan(Infinity)  = pi/2\n * atan(-Infinity) = -pi/2\n * atan(NaN)       = NaN\n *\n */\nP.inverseTangent = P.atan = function () {\n  var i, j, k, n, px, t, r, wpr, x2,\n    x = this,\n    Ctor = x.constructor,\n    pr = Ctor.precision,\n    rm = Ctor.rounding;\n\n  if (!x.isFinite()) {\n    if (!x.s) return new Ctor(NaN);\n    if (pr + 4 <= PI_PRECISION) {\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\n      r.s = x.s;\n      return r;\n    }\n  } else if (x.isZero()) {\n    return new Ctor(x);\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\n    r.s = x.s;\n    return r;\n  }\n\n  Ctor.precision = wpr = pr + 10;\n  Ctor.rounding = 1;\n\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\n\n  // Argument reduction\n  // Ensure |x| < 0.42\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\n\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\n\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\n\n  external = false;\n\n  j = Math.ceil(wpr / LOG_BASE);\n  n = 1;\n  x2 = x.times(x);\n  r = new Ctor(x);\n  px = x;\n\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\n  for (; i !== -1;) {\n    px = px.times(x2);\n    t = r.minus(px.div(n += 2));\n\n    px = px.times(x2);\n    r = t.plus(px.div(n += 2));\n\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\n  }\n\n  if (k) r = r.times(2 << (k - 1));\n\n  external = true;\n\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\n};\n\n\n/*\n * Return true if the value of this Decimal is a finite number, otherwise return false.\n *\n */\nP.isFinite = function () {\n  return !!this.d;\n};\n\n\n/*\n * Return true if the value of this Decimal is an integer, otherwise return false.\n *\n */\nP.isInteger = P.isInt = function () {\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\n};\n\n\n/*\n * Return true if the value of this Decimal is NaN, otherwise return false.\n *\n */\nP.isNaN = function () {\n  return !this.s;\n};\n\n\n/*\n * Return true if the value of this Decimal is negative, otherwise return false.\n *\n */\nP.isNegative = P.isNeg = function () {\n  return this.s < 0;\n};\n\n\n/*\n * Return true if the value of this Decimal is positive, otherwise return false.\n *\n */\nP.isPositive = P.isPos = function () {\n  return this.s > 0;\n};\n\n\n/*\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\n *\n */\nP.isZero = function () {\n  return !!this.d && this.d[0] === 0;\n};\n\n\n/*\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\n *\n */\nP.lessThan = P.lt = function (y) {\n  return this.cmp(y) < 0;\n};\n\n\n/*\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\n *\n */\nP.lessThanOrEqualTo = P.lte = function (y) {\n  return this.cmp(y) < 1;\n};\n\n\n/*\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\n * significant digits using rounding mode `rounding`.\n *\n * If no base is specified, return log[10](arg).\n *\n * log[base](arg) = ln(arg) / ln(base)\n *\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\n * otherwise:\n *\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\n *\n * log[-b](a)       = NaN\n * log[0](a)        = NaN\n * log[1](a)        = NaN\n * log[NaN](a)      = NaN\n * log[Infinity](a) = NaN\n * log[b](0)        = -Infinity\n * log[b](-0)       = -Infinity\n * log[b](-a)       = NaN\n * log[b](1)        = 0\n * log[b](Infinity) = Infinity\n * log[b](NaN)      = NaN\n *\n * [base] {number|string|Decimal} The base of the logarithm.\n *\n */\nP.logarithm = P.log = function (base) {\n  var isBase10, d, denominator, k, inf, num, sd, r,\n    arg = this,\n    Ctor = arg.constructor,\n    pr = Ctor.precision,\n    rm = Ctor.rounding,\n    guard = 5;\n\n  // Default base is 10.\n  if (base == null) {\n    base = new Ctor(10);\n    isBase10 = true;\n  } else {\n    base = new Ctor(base);\n    d = base.d;\n\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\n\n    isBase10 = base.eq(10);\n  }\n\n  d = arg.d;\n\n  // Is arg negative, non-finite, 0 or 1?\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\n  }\n\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\n  // integer power of 10.\n  if (isBase10) {\n    if (d.length > 1) {\n      inf = true;\n    } else {\n      for (k = d[0]; k % 10 === 0;) k /= 10;\n      inf = k !== 1;\n    }\n  }\n\n  external = false;\n  sd = pr + guard;\n  num = naturalLogarithm(arg, sd);\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n\n  // The result will have 5 rounding digits.\n  r = divide(num, denominator, sd, 1);\n\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\n  // calculate 10 further digits.\n  //\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\n  // further digits, the last 14 are nines, round up and assume the result is exact.\n  // Also assume the result is exact if the last 14 are zero.\n  //\n  // Example of a result that will be incorrectly rounded:\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\n  // place is still 2.6.\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\n\n    do {\n      sd += 10;\n      num = naturalLogarithm(arg, sd);\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n      r = divide(num, denominator, sd, 1);\n\n      if (!inf) {\n\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\n          r = finalise(r, pr + 1, 0);\n        }\n\n        break;\n      }\n    } while (checkRoundingDigits(r.d, k += 10, rm));\n  }\n\n  external = true;\n\n  return finalise(r, pr, rm);\n};\n\n\n/*\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\n *\n * arguments {number|string|Decimal}\n *\nP.max = function () {\n  Array.prototype.push.call(arguments, this);\n  return maxOrMin(this.constructor, arguments, 'lt');\n};\n */\n\n\n/*\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\n *\n * arguments {number|string|Decimal}\n *\nP.min = function () {\n  Array.prototype.push.call(arguments, this);\n  return maxOrMin(this.constructor, arguments, 'gt');\n};\n */\n\n\n/*\n *  n - 0 = n\n *  n - N = N\n *  n - I = -I\n *  0 - n = -n\n *  0 - 0 = 0\n *  0 - N = N\n *  0 - I = -I\n *  N - n = N\n *  N - 0 = N\n *  N - N = N\n *  N - I = N\n *  I - n = I\n *  I - 0 = I\n *  I - N = N\n *  I - I = N\n *\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\n * significant digits using rounding mode `rounding`.\n *\n */\nP.minus = P.sub = function (y) {\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\n    x = this,\n    Ctor = x.constructor;\n\n  y = new Ctor(y);\n\n  // If either is not finite...\n  if (!x.d || !y.d) {\n\n    // Return NaN if either is NaN.\n    if (!x.s || !y.s) y = new Ctor(NaN);\n\n    // Return y negated if x is finite and y is ±Infinity.\n    else if (x.d) y.s = -y.s;\n\n    // Return x if y is finite and x is ±Infinity.\n    // Return x if both are ±Infinity with different signs.\n    // Return NaN if both are ±Infinity with the same sign.\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\n\n    return y;\n  }\n\n  // If signs differ...\n  if (x.s != y.s) {\n    y.s = -y.s;\n    return x.plus(y);\n  }\n\n  xd = x.d;\n  yd = y.d;\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n\n  // If either is zero...\n  if (!xd[0] || !yd[0]) {\n\n    // Return y negated if x is zero and y is non-zero.\n    if (yd[0]) y.s = -y.s;\n\n    // Return x if y is zero and x is non-zero.\n    else if (xd[0]) y = new Ctor(x);\n\n    // Return zero if both are zero.\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\n    else return new Ctor(rm === 3 ? -0 : 0);\n\n    return external ? finalise(y, pr, rm) : y;\n  }\n\n  // x and y are finite, non-zero numbers with the same sign.\n\n  // Calculate base 1e7 exponents.\n  e = mathfloor(y.e / LOG_BASE);\n  xe = mathfloor(x.e / LOG_BASE);\n\n  xd = xd.slice();\n  k = xe - e;\n\n  // If base 1e7 exponents differ...\n  if (k) {\n    xLTy = k < 0;\n\n    if (xLTy) {\n      d = xd;\n      k = -k;\n      len = yd.length;\n    } else {\n      d = yd;\n      e = xe;\n      len = xd.length;\n    }\n\n    // Numbers with massively different exponents would result in a very high number of\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\n\n    if (k > i) {\n      k = i;\n      d.length = 1;\n    }\n\n    // Prepend zeros to equalise exponents.\n    d.reverse();\n    for (i = k; i--;) d.push(0);\n    d.reverse();\n\n  // Base 1e7 exponents equal.\n  } else {\n\n    // Check digits to determine which is the bigger number.\n\n    i = xd.length;\n    len = yd.length;\n    xLTy = i < len;\n    if (xLTy) len = i;\n\n    for (i = 0; i < len; i++) {\n      if (xd[i] != yd[i]) {\n        xLTy = xd[i] < yd[i];\n        break;\n      }\n    }\n\n    k = 0;\n  }\n\n  if (xLTy) {\n    d = xd;\n    xd = yd;\n    yd = d;\n    y.s = -y.s;\n  }\n\n  len = xd.length;\n\n  // Append zeros to `xd` if shorter.\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\n\n  // Subtract yd from xd.\n  for (i = yd.length; i > k;) {\n\n    if (xd[--i] < yd[i]) {\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\n      --xd[j];\n      xd[i] += BASE;\n    }\n\n    xd[i] -= yd[i];\n  }\n\n  // Remove trailing zeros.\n  for (; xd[--len] === 0;) xd.pop();\n\n  // Remove leading zeros and adjust exponent accordingly.\n  for (; xd[0] === 0; xd.shift()) --e;\n\n  // Zero?\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\n\n  y.d = xd;\n  y.e = getBase10Exponent(xd, e);\n\n  return external ? finalise(y, pr, rm) : y;\n};\n\n\n/*\n *   n % 0 =  N\n *   n % N =  N\n *   n % I =  n\n *   0 % n =  0\n *  -0 % n = -0\n *   0 % 0 =  N\n *   0 % N =  N\n *   0 % I =  0\n *   N % n =  N\n *   N % 0 =  N\n *   N % N =  N\n *   N % I =  N\n *   I % n =  N\n *   I % 0 =  N\n *   I % N =  N\n *   I % I =  N\n *\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\n * `precision` significant digits using rounding mode `rounding`.\n *\n * The result depends on the modulo mode.\n *\n */\nP.modulo = P.mod = function (y) {\n  var q,\n    x = this,\n    Ctor = x.constructor;\n\n  y = new Ctor(y);\n\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\n\n  // Return x if y is ±Infinity or x is ±0.\n  if (!y.d || x.d && !x.d[0]) {\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\n  }\n\n  // Prevent rounding of intermediate calculations.\n  external = false;\n\n  if (Ctor.modulo == 9) {\n\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\n    // result = x - q * y    where  0 <= result < abs(y)\n    q = divide(x, y.abs(), 0, 3, 1);\n    q.s *= y.s;\n  } else {\n    q = divide(x, y, 0, Ctor.modulo, 1);\n  }\n\n  q = q.times(y);\n\n  external = true;\n\n  return x.minus(q);\n};\n\n\n/*\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\n * significant digits using rounding mode `rounding`.\n *\n */\nP.naturalExponential = P.exp = function () {\n  return naturalExponential(this);\n};\n\n\n/*\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\n * rounded to `precision` significant digits using rounding mode `rounding`.\n *\n */\nP.naturalLogarithm = P.ln = function () {\n  return naturalLogarithm(this);\n};\n\n\n/*\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\n * -1.\n *\n */\nP.negated = P.neg = function () {\n  var x = new this.constructor(this);\n  x.s = -x.s;\n  return finalise(x);\n};\n\n\n/*\n *  n + 0 = n\n *  n + N = N\n *  n + I = I\n *  0 + n = n\n *  0 + 0 = 0\n *  0 + N = N\n *  0 + I = I\n *  N + n = N\n *  N + 0 = N\n *  N + N = N\n *  N + I = N\n *  I + n = I\n *  I + 0 = I\n *  I + N = N\n *  I + I = I\n *\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\n * significant digits using rounding mode `rounding`.\n *\n */\nP.plus = P.add = function (y) {\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\n    x = this,\n    Ctor = x.constructor;\n\n  y = new Ctor(y);\n\n  // If either is not finite...\n  if (!x.d || !y.d) {\n\n    // Return NaN if either is NaN.\n    if (!x.s || !y.s) y = new Ctor(NaN);\n\n    // Return x if y is finite and x is ±Infinity.\n    // Return x if both are ±Infinity with the same sign.\n    // Return NaN if both are ±Infinity with different signs.\n    // Return y if x is finite and y is ±Infinity.\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\n\n    return y;\n  }\n\n   // If signs differ...\n  if (x.s != y.s) {\n    y.s = -y.s;\n    return x.minus(y);\n  }\n\n  xd = x.d;\n  yd = y.d;\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n\n  // If either is zero...\n  if (!xd[0] || !yd[0]) {\n\n    // Return x if y is zero.\n    // Return y if y is non-zero.\n    if (!yd[0]) y = new Ctor(x);\n\n    return external ? finalise(y, pr, rm) : y;\n  }\n\n  // x and y are finite, non-zero numbers with the same sign.\n\n  // Calculate base 1e7 exponents.\n  k = mathfloor(x.e / LOG_BASE);\n  e = mathfloor(y.e / LOG_BASE);\n\n  xd = xd.slice();\n  i = k - e;\n\n  // If base 1e7 exponents differ...\n  if (i) {\n\n    if (i < 0) {\n      d = xd;\n      i = -i;\n      len = yd.length;\n    } else {\n      d = yd;\n      e = k;\n      len = xd.length;\n    }\n\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\n    k = Math.ceil(pr / LOG_BASE);\n    len = k > len ? k + 1 : len + 1;\n\n    if (i > len) {\n      i = len;\n      d.length = 1;\n    }\n\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\n    d.reverse();\n    for (; i--;) d.push(0);\n    d.reverse();\n  }\n\n  len = xd.length;\n  i = yd.length;\n\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\n  if (len - i < 0) {\n    i = len;\n    d = yd;\n    yd = xd;\n    xd = d;\n  }\n\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\n  for (carry = 0; i;) {\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\n    xd[i] %= BASE;\n  }\n\n  if (carry) {\n    xd.unshift(carry);\n    ++e;\n  }\n\n  // Remove trailing zeros.\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\n\n  y.d = xd;\n  y.e = getBase10Exponent(xd, e);\n\n  return external ? finalise(y, pr, rm) : y;\n};\n\n\n/*\n * Return the number of significant digits of the value of this Decimal.\n *\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\n *\n */\nP.precision = P.sd = function (z) {\n  var k,\n    x = this;\n\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\n\n  if (x.d) {\n    k = getPrecision(x.d);\n    if (z && x.e + 1 > k) k = x.e + 1;\n  } else {\n    k = NaN;\n  }\n\n  return k;\n};\n\n\n/*\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\n * rounding mode `rounding`.\n *\n */\nP.round = function () {\n  var x = this,\n    Ctor = x.constructor;\n\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\n};\n\n\n/*\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\n *\n * Domain: [-Infinity, Infinity]\n * Range: [-1, 1]\n *\n * sin(x) = x - x^3/3! + x^5/5! - ...\n *\n * sin(0)         = 0\n * sin(-0)        = -0\n * sin(Infinity)  = NaN\n * sin(-Infinity) = NaN\n * sin(NaN)       = NaN\n *\n */\nP.sine = P.sin = function () {\n  var pr, rm,\n    x = this,\n    Ctor = x.constructor;\n\n  if (!x.isFinite()) return new Ctor(NaN);\n  if (x.isZero()) return new Ctor(x);\n\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n  Ctor.rounding = 1;\n\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\n\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\n};\n\n\n/*\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\n * significant digits using rounding mode `rounding`.\n *\n *  sqrt(-n) =  N\n *  sqrt(N)  =  N\n *  sqrt(-I) =  N\n *  sqrt(I)  =  I\n *  sqrt(0)  =  0\n *  sqrt(-0) = -0\n *\n */\nP.squareRoot = P.sqrt = function () {\n  var m, n, sd, r, rep, t,\n    x = this,\n    d = x.d,\n    e = x.e,\n    s = x.s,\n    Ctor = x.constructor;\n\n  // Negative/NaN/Infinity/zero?\n  if (s !== 1 || !d || !d[0]) {\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\n  }\n\n  external = false;\n\n  // Initial estimate.\n  s = Math.sqrt(+x);\n\n  // Math.sqrt underflow/overflow?\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n  if (s == 0 || s == 1 / 0) {\n    n = digitsToString(d);\n\n    if ((n.length + e) % 2 == 0) n += '0';\n    s = Math.sqrt(n);\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\n\n    if (s == 1 / 0) {\n      n = '5e' + e;\n    } else {\n      n = s.toExponential();\n      n = n.slice(0, n.indexOf('e') + 1) + e;\n    }\n\n    r = new Ctor(n);\n  } else {\n    r = new Ctor(s.toString());\n  }\n\n  sd = (e = Ctor.precision) + 3;\n\n  // Newton-Raphson iteration.\n  for (;;) {\n    t = r;\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\n\n    // TODO? Replace with for-loop and checkRoundingDigits.\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n      n = n.slice(sd - 3, sd + 1);\n\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\n      if (n == '9999' || !rep && n == '4999') {\n\n        // On the first iteration only, check to see if rounding up gives the exact result as the\n        // nines may infinitely repeat.\n        if (!rep) {\n          finalise(t, e + 1, 0);\n\n          if (t.times(t).eq(x)) {\n            r = t;\n            break;\n          }\n        }\n\n        sd += 4;\n        rep = 1;\n      } else {\n\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n        // If not, then there are further digits and m will be truthy.\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n          // Truncate to the first rounding digit.\n          finalise(r, e + 1, 1);\n          m = !r.times(r).eq(x);\n        }\n\n        break;\n      }\n    }\n  }\n\n  external = true;\n\n  return finalise(r, e, Ctor.rounding, m);\n};\n\n\n/*\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\n *\n * Domain: [-Infinity, Infinity]\n * Range: [-Infinity, Infinity]\n *\n * tan(0)         = 0\n * tan(-0)        = -0\n * tan(Infinity)  = NaN\n * tan(-Infinity) = NaN\n * tan(NaN)       = NaN\n *\n */\nP.tangent = P.tan = function () {\n  var pr, rm,\n    x = this,\n    Ctor = x.constructor;\n\n  if (!x.isFinite()) return new Ctor(NaN);\n  if (x.isZero()) return new Ctor(x);\n\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  Ctor.precision = pr + 10;\n  Ctor.rounding = 1;\n\n  x = x.sin();\n  x.s = 1;\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\n\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\n};\n\n\n/*\n *  n * 0 = 0\n *  n * N = N\n *  n * I = I\n *  0 * n = 0\n *  0 * 0 = 0\n *  0 * N = N\n *  0 * I = N\n *  N * n = N\n *  N * 0 = N\n *  N * N = N\n *  N * I = N\n *  I * n = I\n *  I * 0 = N\n *  I * N = N\n *  I * I = I\n *\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\n * digits using rounding mode `rounding`.\n *\n */\nP.times = P.mul = function (y) {\n  var carry, e, i, k, r, rL, t, xdL, ydL,\n    x = this,\n    Ctor = x.constructor,\n    xd = x.d,\n    yd = (y = new Ctor(y)).d;\n\n  y.s *= x.s;\n\n   // If either is NaN, ±Infinity or ±0...\n  if (!xd || !xd[0] || !yd || !yd[0]) {\n\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\n\n      // Return NaN if either is NaN.\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\n      ? NaN\n\n      // Return ±Infinity if either is ±Infinity.\n      // Return ±0 if either is ±0.\n      : !xd || !yd ? y.s / 0 : y.s * 0);\n  }\n\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\n  xdL = xd.length;\n  ydL = yd.length;\n\n  // Ensure xd points to the longer array.\n  if (xdL < ydL) {\n    r = xd;\n    xd = yd;\n    yd = r;\n    rL = xdL;\n    xdL = ydL;\n    ydL = rL;\n  }\n\n  // Initialise the result array with zeros.\n  r = [];\n  rL = xdL + ydL;\n  for (i = rL; i--;) r.push(0);\n\n  // Multiply!\n  for (i = ydL; --i >= 0;) {\n    carry = 0;\n    for (k = xdL + i; k > i;) {\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\n      r[k--] = t % BASE | 0;\n      carry = t / BASE | 0;\n    }\n\n    r[k] = (r[k] + carry) % BASE | 0;\n  }\n\n  // Remove trailing zeros.\n  for (; !r[--rL];) r.pop();\n\n  if (carry) ++e;\n  else r.shift();\n\n  y.d = r;\n  y.e = getBase10Exponent(r, e);\n\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\n};\n\n\n/*\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\n * digits using rounding mode `rm`.\n *\n * If the optional `sd` argument is present then return binary exponential notation.\n *\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n *\n */\nP.toBinary = function (sd, rm) {\n  return toStringBinary(this, 2, sd, rm);\n};\n\n\n/*\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\n *\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\n *\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n *\n */\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\n  var x = this,\n    Ctor = x.constructor;\n\n  x = new Ctor(x);\n  if (dp === void 0) return x;\n\n  checkInt32(dp, 0, MAX_DIGITS);\n\n  if (rm === void 0) rm = Ctor.rounding;\n  else checkInt32(rm, 0, 8);\n\n  return finalise(x, dp + x.e + 1, rm);\n};\n\n\n/*\n * Return a string representing the value of this Decimal in exponential notation rounded to\n * `dp` fixed decimal places using rounding mode `rounding`.\n *\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n *\n */\nP.toExponential = function (dp, rm) {\n  var str,\n    x = this,\n    Ctor = x.constructor;\n\n  if (dp === void 0) {\n    str = finiteToString(x, true);\n  } else {\n    checkInt32(dp, 0, MAX_DIGITS);\n\n    if (rm === void 0) rm = Ctor.rounding;\n    else checkInt32(rm, 0, 8);\n\n    x = finalise(new Ctor(x), dp + 1, rm);\n    str = finiteToString(x, true, dp + 1);\n  }\n\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\n};\n\n\n/*\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\n * omitted.\n *\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\n *\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n * (-0).toFixed(3) is '0.000'.\n * (-0.5).toFixed(0) is '-0'.\n *\n */\nP.toFixed = function (dp, rm) {\n  var str, y,\n    x = this,\n    Ctor = x.constructor;\n\n  if (dp === void 0) {\n    str = finiteToString(x);\n  } else {\n    checkInt32(dp, 0, MAX_DIGITS);\n\n    if (rm === void 0) rm = Ctor.rounding;\n    else checkInt32(rm, 0, 8);\n\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\n    str = finiteToString(y, false, dp + y.e + 1);\n  }\n\n  // To determine whether to add the minus sign look at the value before it was rounded,\n  // i.e. look at `x` rather than `y`.\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\n};\n\n\n/*\n * Return an array representing the value of this Decimal as a simple fraction with an integer\n * numerator and an integer denominator.\n *\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\n * value necessary to represent the number exactly.\n *\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\n *\n */\nP.toFraction = function (maxD) {\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\n    x = this,\n    xd = x.d,\n    Ctor = x.constructor;\n\n  if (!xd) return new Ctor(x);\n\n  n1 = d0 = new Ctor(1);\n  d1 = n0 = new Ctor(0);\n\n  d = new Ctor(d1);\n  e = d.e = getPrecision(xd) - x.e - 1;\n  k = e % LOG_BASE;\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\n\n  if (maxD == null) {\n\n    // d is 10**e, the minimum max-denominator needed.\n    maxD = e > 0 ? d : n1;\n  } else {\n    n = new Ctor(maxD);\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\n  }\n\n  external = false;\n  n = new Ctor(digitsToString(xd));\n  pr = Ctor.precision;\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\n\n  for (;;)  {\n    q = divide(n, d, 0, 1, 1);\n    d2 = d0.plus(q.times(d1));\n    if (d2.cmp(maxD) == 1) break;\n    d0 = d1;\n    d1 = d2;\n    d2 = n1;\n    n1 = n0.plus(q.times(d2));\n    n0 = d2;\n    d2 = d;\n    d = n.minus(q.times(d2));\n    n = d2;\n  }\n\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\n  n0 = n0.plus(d2.times(n1));\n  d0 = d0.plus(d2.times(d1));\n  n0.s = n1.s = x.s;\n\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\n      ? [n1, d1] : [n0, d0];\n\n  Ctor.precision = pr;\n  external = true;\n\n  return r;\n};\n\n\n/*\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\n * digits using rounding mode `rm`.\n *\n * If the optional `sd` argument is present then return binary exponential notation.\n *\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n *\n */\nP.toHexadecimal = P.toHex = function (sd, rm) {\n  return toStringBinary(this, 16, sd, rm);\n};\n\n\n/*\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\n *\n * The return value will always have the same sign as this Decimal, unless either this Decimal\n * or `y` is NaN, in which case the return value will be also be NaN.\n *\n * The return value is not affected by the value of `precision`.\n *\n * y {number|string|Decimal} The magnitude to round to a multiple of.\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n *\n * 'toNearest() rounding mode not an integer: {rm}'\n * 'toNearest() rounding mode out of range: {rm}'\n *\n */\nP.toNearest = function (y, rm) {\n  var x = this,\n    Ctor = x.constructor;\n\n  x = new Ctor(x);\n\n  if (y == null) {\n\n    // If x is not finite, return x.\n    if (!x.d) return x;\n\n    y = new Ctor(1);\n    rm = Ctor.rounding;\n  } else {\n    y = new Ctor(y);\n    if (rm === void 0) {\n      rm = Ctor.rounding;\n    } else {\n      checkInt32(rm, 0, 8);\n    }\n\n    // If x is not finite, return x if y is not NaN, else NaN.\n    if (!x.d) return y.s ? x : y;\n\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\n    if (!y.d) {\n      if (y.s) y.s = x.s;\n      return y;\n    }\n  }\n\n  // If y is not zero, calculate the nearest multiple of y to x.\n  if (y.d[0]) {\n    external = false;\n    x = divide(x, y, 0, rm, 1).times(y);\n    external = true;\n    finalise(x);\n\n  // If y is zero, return zero with the sign of x.\n  } else {\n    y.s = x.s;\n    x = y;\n  }\n\n  return x;\n};\n\n\n/*\n * Return the value of this Decimal converted to a number primitive.\n * Zero keeps its sign.\n *\n */\nP.toNumber = function () {\n  return +this;\n};\n\n\n/*\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\n * digits using rounding mode `rm`.\n *\n * If the optional `sd` argument is present then return binary exponential notation.\n *\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n *\n */\nP.toOctal = function (sd, rm) {\n  return toStringBinary(this, 8, sd, rm);\n};\n\n\n/*\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\n * to `precision` significant digits using rounding mode `rounding`.\n *\n * ECMAScript compliant.\n *\n *   pow(x, NaN)                           = NaN\n *   pow(x, ±0)                            = 1\n\n *   pow(NaN, non-zero)                    = NaN\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\n *   pow(abs(x) > 1, -Infinity)            = +0\n *   pow(abs(x) == 1, ±Infinity)           = NaN\n *   pow(abs(x) < 1, +Infinity)            = +0\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\n *   pow(+Infinity, y > 0)                 = +Infinity\n *   pow(+Infinity, y < 0)                 = +0\n *   pow(-Infinity, odd integer > 0)       = -Infinity\n *   pow(-Infinity, even integer > 0)      = +Infinity\n *   pow(-Infinity, odd integer < 0)       = -0\n *   pow(-Infinity, even integer < 0)      = +0\n *   pow(+0, y > 0)                        = +0\n *   pow(+0, y < 0)                        = +Infinity\n *   pow(-0, odd integer > 0)              = -0\n *   pow(-0, even integer > 0)             = +0\n *   pow(-0, odd integer < 0)              = -Infinity\n *   pow(-0, even integer < 0)             = +Infinity\n *   pow(finite x < 0, finite non-integer) = NaN\n *\n * For non-integer or very large exponents pow(x, y) is calculated using\n *\n *   x^y = exp(y*ln(x))\n *\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\n * probability of an incorrectly rounded result\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\n * i.e. 1 in 250,000,000,000,000\n *\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\n *\n * y {number|string|Decimal} The power to which to raise this Decimal.\n *\n */\nP.toPower = P.pow = function (y) {\n  var e, k, pr, r, rm, s,\n    x = this,\n    Ctor = x.constructor,\n    yn = +(y = new Ctor(y));\n\n  // Either ±Infinity, NaN or ±0?\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\n\n  x = new Ctor(x);\n\n  if (x.eq(1)) return x;\n\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n\n  if (y.eq(1)) return finalise(x, pr, rm);\n\n  // y exponent\n  e = mathfloor(y.e / LOG_BASE);\n\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\n    r = intPow(Ctor, x, k, pr);\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\n  }\n\n  s = x.s;\n\n  // if x is negative\n  if (s < 0) {\n\n    // if y is not an integer\n    if (e < y.d.length - 1) return new Ctor(NaN);\n\n    // Result is positive if x is negative and the last digit of integer y is even.\n    if ((y.d[e] & 1) == 0) s = 1;\n\n    // if x.eq(-1)\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\n      x.s = s;\n      return x;\n    }\n  }\n\n  // Estimate result exponent.\n  // x^y = 10^e,  where e = y * log10(x)\n  // log10(x) = log10(x_significand) + x_exponent\n  // log10(x_significand) = ln(x_significand) / ln(10)\n  k = mathpow(+x, yn);\n  e = k == 0 || !isFinite(k)\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\n    : new Ctor(k + '').e;\n\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\n\n  // Overflow/underflow?\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\n\n  external = false;\n  Ctor.rounding = x.s = 1;\n\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\n  // new Decimal(2.32456).pow('2087987436534566.46411')\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\n  k = Math.min(12, (e + '').length);\n\n  // r = x^y = exp(y*ln(x))\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\n\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\n  if (r.d) {\n\n    // Truncate to the required precision plus five rounding digits.\n    r = finalise(r, pr + 5, 1);\n\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\n    // the result.\n    if (checkRoundingDigits(r.d, pr, rm)) {\n      e = pr + 10;\n\n      // Truncate to the increased precision plus five rounding digits.\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\n\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\n        r = finalise(r, pr + 1, 0);\n      }\n    }\n  }\n\n  r.s = s;\n  external = true;\n  Ctor.rounding = rm;\n\n  return finalise(r, pr, rm);\n};\n\n\n/*\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\n * using rounding mode `rounding`.\n *\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n *\n */\nP.toPrecision = function (sd, rm) {\n  var str,\n    x = this,\n    Ctor = x.constructor;\n\n  if (sd === void 0) {\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n  } else {\n    checkInt32(sd, 1, MAX_DIGITS);\n\n    if (rm === void 0) rm = Ctor.rounding;\n    else checkInt32(rm, 0, 8);\n\n    x = finalise(new Ctor(x), sd, rm);\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\n  }\n\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\n};\n\n\n/*\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\n * omitted.\n *\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n *\n * 'toSD() digits out of range: {sd}'\n * 'toSD() digits not an integer: {sd}'\n * 'toSD() rounding mode not an integer: {rm}'\n * 'toSD() rounding mode out of range: {rm}'\n *\n */\nP.toSignificantDigits = P.toSD = function (sd, rm) {\n  var x = this,\n    Ctor = x.constructor;\n\n  if (sd === void 0) {\n    sd = Ctor.precision;\n    rm = Ctor.rounding;\n  } else {\n    checkInt32(sd, 1, MAX_DIGITS);\n\n    if (rm === void 0) rm = Ctor.rounding;\n    else checkInt32(rm, 0, 8);\n  }\n\n  return finalise(new Ctor(x), sd, rm);\n};\n\n\n/*\n * Return a string representing the value of this Decimal.\n *\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\n *\n */\nP.toString = function () {\n  var x = this,\n    Ctor = x.constructor,\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\n};\n\n\n/*\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\n *\n */\nP.truncated = P.trunc = function () {\n  return finalise(new this.constructor(this), this.e + 1, 1);\n};\n\n\n/*\n * Return a string representing the value of this Decimal.\n * Unlike `toString`, negative zero will include the minus sign.\n *\n */\nP.valueOf = P.toJSON = function () {\n  var x = this,\n    Ctor = x.constructor,\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n\n  return x.isNeg() ? '-' + str : str;\n};\n\n\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\n\n\n/*\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\n *                           finiteToString, naturalExponential, naturalLogarithm\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\n *  convertBase              toStringBinary, parseOther\n *  cos                      P.cos\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\n *                           taylorSeries, atan2, parseOther\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\n *                           naturalLogarithm, ceil, floor, round, trunc\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\n *                           toStringBinary\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\n *  getLn10                  P.logarithm, naturalLogarithm\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\n *  getPrecision             P.precision, P.toFraction\n *  getZeroString            digitsToString, finiteToString\n *  intPow                   P.toPower, parseOther\n *  isOdd                    toLessThanHalfPi\n *  maxOrMin                 max, min\n *  naturalExponential       P.naturalExponential, P.toPower\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\n *                           P.toPower, naturalExponential\n *  nonFiniteToString        finiteToString, toStringBinary\n *  parseDecimal             Decimal\n *  parseOther               Decimal\n *  sin                      P.sin\n *  taylorSeries             P.cosh, P.sinh, cos, sin\n *  toLessThanHalfPi         P.cos, P.sin\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\n *  truncate                 intPow\n *\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\n *                           naturalLogarithm, config, parseOther, random, Decimal\n */\n\n\nfunction digitsToString(d) {\n  var i, k, ws,\n    indexOfLastWord = d.length - 1,\n    str = '',\n    w = d[0];\n\n  if (indexOfLastWord > 0) {\n    str += w;\n    for (i = 1; i < indexOfLastWord; i++) {\n      ws = d[i] + '';\n      k = LOG_BASE - ws.length;\n      if (k) str += getZeroString(k);\n      str += ws;\n    }\n\n    w = d[i];\n    ws = w + '';\n    k = LOG_BASE - ws.length;\n    if (k) str += getZeroString(k);\n  } else if (w === 0) {\n    return '0';\n  }\n\n  // Remove trailing zeros of last w.\n  for (; w % 10 === 0;) w /= 10;\n\n  return str + w;\n}\n\n\nfunction checkInt32(i, min, max) {\n  if (i !== ~~i || i < min || i > max) {\n    throw Error(invalidArgument + i);\n  }\n}\n\n\n/*\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\n * `repeating == null` if caller is `log` or `pow`,\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\n */\nfunction checkRoundingDigits(d, i, rm, repeating) {\n  var di, k, r, rd;\n\n  // Get the length of the first word of the array d.\n  for (k = d[0]; k >= 10; k /= 10) --i;\n\n  // Is the rounding digit in the first word of d?\n  if (--i < 0) {\n    i += LOG_BASE;\n    di = 0;\n  } else {\n    di = Math.ceil((i + 1) / LOG_BASE);\n    i %= LOG_BASE;\n  }\n\n  // i is the index (0 - 6) of the rounding digit.\n  // E.g. if within the word 3487563 the first rounding digit is 5,\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\n  k = mathpow(10, LOG_BASE - i);\n  rd = d[di] % k | 0;\n\n  if (repeating == null) {\n    if (i < 3) {\n      if (i == 0) rd = rd / 100 | 0;\n      else if (i == 1) rd = rd / 10 | 0;\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\n    } else {\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\n    }\n  } else {\n    if (i < 4) {\n      if (i == 0) rd = rd / 1000 | 0;\n      else if (i == 1) rd = rd / 100 | 0;\n      else if (i == 2) rd = rd / 10 | 0;\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\n    } else {\n      r = ((repeating || rm < 4) && rd + 1 == k ||\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\n    }\n  }\n\n  return r;\n}\n\n\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\n// Eg. convertBase('255', 10, 16) returns [15, 15].\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\nfunction convertBase(str, baseIn, baseOut) {\n  var j,\n    arr = [0],\n    arrL,\n    i = 0,\n    strL = str.length;\n\n  for (; i < strL;) {\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\n    for (j = 0; j < arr.length; j++) {\n      if (arr[j] > baseOut - 1) {\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\n        arr[j + 1] += arr[j] / baseOut | 0;\n        arr[j] %= baseOut;\n      }\n    }\n  }\n\n  return arr.reverse();\n}\n\n\n/*\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\n * |x| < pi/2\n *\n */\nfunction cosine(Ctor, x) {\n  var k, len, y;\n\n  if (x.isZero()) return x;\n\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\n\n  // Estimate the optimum number of times to use the argument reduction.\n  len = x.d.length;\n  if (len < 32) {\n    k = Math.ceil(len / 3);\n    y = (1 / tinyPow(4, k)).toString();\n  } else {\n    k = 16;\n    y = '2.3283064365386962890625e-10';\n  }\n\n  Ctor.precision += k;\n\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\n\n  // Reverse argument reduction\n  for (var i = k; i--;) {\n    var cos2x = x.times(x);\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\n  }\n\n  Ctor.precision -= k;\n\n  return x;\n}\n\n\n/*\n * Perform division in the specified base.\n */\nvar divide = (function () {\n\n  // Assumes non-zero x and k, and hence non-zero result.\n  function multiplyInteger(x, k, base) {\n    var temp,\n      carry = 0,\n      i = x.length;\n\n    for (x = x.slice(); i--;) {\n      temp = x[i] * k + carry;\n      x[i] = temp % base | 0;\n      carry = temp / base | 0;\n    }\n\n    if (carry) x.unshift(carry);\n\n    return x;\n  }\n\n  function compare(a, b, aL, bL) {\n    var i, r;\n\n    if (aL != bL) {\n      r = aL > bL ? 1 : -1;\n    } else {\n      for (i = r = 0; i < aL; i++) {\n        if (a[i] != b[i]) {\n          r = a[i] > b[i] ? 1 : -1;\n          break;\n        }\n      }\n    }\n\n    return r;\n  }\n\n  function subtract(a, b, aL, base) {\n    var i = 0;\n\n    // Subtract b from a.\n    for (; aL--;) {\n      a[aL] -= i;\n      i = a[aL] < b[aL] ? 1 : 0;\n      a[aL] = i * base + a[aL] - b[aL];\n    }\n\n    // Remove leading zeros.\n    for (; !a[0] && a.length > 1;) a.shift();\n  }\n\n  return function (x, y, pr, rm, dp, base) {\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\n      yL, yz,\n      Ctor = x.constructor,\n      sign = x.s == y.s ? 1 : -1,\n      xd = x.d,\n      yd = y.d;\n\n    // Either NaN, Infinity or 0?\n    if (!xd || !xd[0] || !yd || !yd[0]) {\n\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\n\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\n    }\n\n    if (base) {\n      logBase = 1;\n      e = x.e - y.e;\n    } else {\n      base = BASE;\n      logBase = LOG_BASE;\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\n    }\n\n    yL = yd.length;\n    xL = xd.length;\n    q = new Ctor(sign);\n    qd = q.d = [];\n\n    // Result exponent may be one less than e.\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\n\n    if (yd[i] > (xd[i] || 0)) e--;\n\n    if (pr == null) {\n      sd = pr = Ctor.precision;\n      rm = Ctor.rounding;\n    } else if (dp) {\n      sd = pr + (x.e - y.e) + 1;\n    } else {\n      sd = pr;\n    }\n\n    if (sd < 0) {\n      qd.push(1);\n      more = true;\n    } else {\n\n      // Convert precision in number of base 10 digits to base 1e7 digits.\n      sd = sd / logBase + 2 | 0;\n      i = 0;\n\n      // divisor < 1e7\n      if (yL == 1) {\n        k = 0;\n        yd = yd[0];\n        sd++;\n\n        // k is the carry.\n        for (; (i < xL || k) && sd--; i++) {\n          t = k * base + (xd[i] || 0);\n          qd[i] = t / yd | 0;\n          k = t % yd | 0;\n        }\n\n        more = k || i < xL;\n\n      // divisor >= 1e7\n      } else {\n\n        // Normalise xd and yd so highest order digit of yd is >= base/2\n        k = base / (yd[0] + 1) | 0;\n\n        if (k > 1) {\n          yd = multiplyInteger(yd, k, base);\n          xd = multiplyInteger(xd, k, base);\n          yL = yd.length;\n          xL = xd.length;\n        }\n\n        xi = yL;\n        rem = xd.slice(0, yL);\n        remL = rem.length;\n\n        // Add zeros to make remainder as long as divisor.\n        for (; remL < yL;) rem[remL++] = 0;\n\n        yz = yd.slice();\n        yz.unshift(0);\n        yd0 = yd[0];\n\n        if (yd[1] >= base / 2) ++yd0;\n\n        do {\n          k = 0;\n\n          // Compare divisor and remainder.\n          cmp = compare(yd, rem, yL, remL);\n\n          // If divisor < remainder.\n          if (cmp < 0) {\n\n            // Calculate trial digit, k.\n            rem0 = rem[0];\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n            // k will be how many times the divisor goes into the current remainder.\n            k = rem0 / yd0 | 0;\n\n            //  Algorithm:\n            //  1. product = divisor * trial digit (k)\n            //  2. if product > remainder: product -= divisor, k--\n            //  3. remainder -= product\n            //  4. if product was < remainder at 2:\n            //    5. compare new remainder and divisor\n            //    6. If remainder > divisor: remainder -= divisor, k++\n\n            if (k > 1) {\n              if (k >= base) k = base - 1;\n\n              // product = divisor * trial digit.\n              prod = multiplyInteger(yd, k, base);\n              prodL = prod.length;\n              remL = rem.length;\n\n              // Compare product and remainder.\n              cmp = compare(prod, rem, prodL, remL);\n\n              // product > remainder.\n              if (cmp == 1) {\n                k--;\n\n                // Subtract divisor from product.\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\n              }\n            } else {\n\n              // cmp is -1.\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\n              if (k == 0) cmp = k = 1;\n              prod = yd.slice();\n            }\n\n            prodL = prod.length;\n            if (prodL < remL) prod.unshift(0);\n\n            // Subtract product from remainder.\n            subtract(rem, prod, remL, base);\n\n            // If product was < previous remainder.\n            if (cmp == -1) {\n              remL = rem.length;\n\n              // Compare divisor and new remainder.\n              cmp = compare(yd, rem, yL, remL);\n\n              // If divisor < new remainder, subtract divisor from remainder.\n              if (cmp < 1) {\n                k++;\n\n                // Subtract divisor from remainder.\n                subtract(rem, yL < remL ? yz : yd, remL, base);\n              }\n            }\n\n            remL = rem.length;\n          } else if (cmp === 0) {\n            k++;\n            rem = [0];\n          }    // if cmp === 1, k will be 0\n\n          // Add the next digit, k, to the result array.\n          qd[i++] = k;\n\n          // Update the remainder.\n          if (cmp && rem[0]) {\n            rem[remL++] = xd[xi] || 0;\n          } else {\n            rem = [xd[xi]];\n            remL = 1;\n          }\n\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\n\n        more = rem[0] !== void 0;\n      }\n\n      // Leading zero?\n      if (!qd[0]) qd.shift();\n    }\n\n    // logBase is 1 when divide is being used for base conversion.\n    if (logBase == 1) {\n      q.e = e;\n      inexact = more;\n    } else {\n\n      // To calculate q.e, first get the number of digits of qd[0].\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\n      q.e = i + e * logBase - 1;\n\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\n    }\n\n    return q;\n  };\n})();\n\n\n/*\n * Round `x` to `sd` significant digits using rounding mode `rm`.\n * Check for over/under-flow.\n */\n function finalise(x, sd, rm, isTruncated) {\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\n    Ctor = x.constructor;\n\n  // Don't round if sd is null or undefined.\n  out: if (sd != null) {\n    xd = x.d;\n\n    // Infinity/NaN.\n    if (!xd) return x;\n\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\n    // w: the word of xd containing rd, a base 1e7 number.\n    // xdi: the index of w within xd.\n    // digits: the number of digits of w.\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\n    // they had leading zeros)\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\n\n    // Get the length of the first word of the digits array xd.\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\n    i = sd - digits;\n\n    // Is the rounding digit in the first word of xd?\n    if (i < 0) {\n      i += LOG_BASE;\n      j = sd;\n      w = xd[xdi = 0];\n\n      // Get the rounding digit at index j of w.\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\n    } else {\n      xdi = Math.ceil((i + 1) / LOG_BASE);\n      k = xd.length;\n      if (xdi >= k) {\n        if (isTruncated) {\n\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\n          for (; k++ <= xdi;) xd.push(0);\n          w = rd = 0;\n          digits = 1;\n          i %= LOG_BASE;\n          j = i - LOG_BASE + 1;\n        } else {\n          break out;\n        }\n      } else {\n        w = k = xd[xdi];\n\n        // Get the number of digits of w.\n        for (digits = 1; k >= 10; k /= 10) digits++;\n\n        // Get the index of rd within w.\n        i %= LOG_BASE;\n\n        // Get the index of rd within w, adjusted for leading zeros.\n        // The number of leading zeros of w is given by LOG_BASE - digits.\n        j = i - LOG_BASE + digits;\n\n        // Get the rounding digit at index j of w.\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\n      }\n    }\n\n    // Are there any non-zero digits after the rounding digit?\n    isTruncated = isTruncated || sd < 0 ||\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\n\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\n    // will give 714.\n\n    roundUp = rm < 4\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\n\n        // Check whether the digit to the left of the rounding digit is odd.\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\n          rm == (x.s < 0 ? 8 : 7));\n\n    if (sd < 1 || !xd[0]) {\n      xd.length = 0;\n      if (roundUp) {\n\n        // Convert sd to decimal places.\n        sd -= x.e + 1;\n\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\n        x.e = -sd || 0;\n      } else {\n\n        // Zero.\n        xd[0] = x.e = 0;\n      }\n\n      return x;\n    }\n\n    // Remove excess digits.\n    if (i == 0) {\n      xd.length = xdi;\n      k = 1;\n      xdi--;\n    } else {\n      xd.length = xdi + 1;\n      k = mathpow(10, LOG_BASE - i);\n\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n      // j > 0 means i > number of leading zeros of w.\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\n    }\n\n    if (roundUp) {\n      for (;;) {\n\n        // Is the digit to be rounded up in the first word of xd?\n        if (xdi == 0) {\n\n          // i will be the length of xd[0] before k is added.\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\n          j = xd[0] += k;\n          for (k = 1; j >= 10; j /= 10) k++;\n\n          // if i != k the length has increased.\n          if (i != k) {\n            x.e++;\n            if (xd[0] == BASE) xd[0] = 1;\n          }\n\n          break;\n        } else {\n          xd[xdi] += k;\n          if (xd[xdi] != BASE) break;\n          xd[xdi--] = 0;\n          k = 1;\n        }\n      }\n    }\n\n    // Remove trailing zeros.\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\n  }\n\n  if (external) {\n\n    // Overflow?\n    if (x.e > Ctor.maxE) {\n\n      // Infinity.\n      x.d = null;\n      x.e = NaN;\n\n    // Underflow?\n    } else if (x.e < Ctor.minE) {\n\n      // Zero.\n      x.e = 0;\n      x.d = [0];\n      // Ctor.underflow = true;\n    } // else Ctor.underflow = false;\n  }\n\n  return x;\n}\n\n\nfunction finiteToString(x, isExp, sd) {\n  if (!x.isFinite()) return nonFiniteToString(x);\n  var k,\n    e = x.e,\n    str = digitsToString(x.d),\n    len = str.length;\n\n  if (isExp) {\n    if (sd && (k = sd - len) > 0) {\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\n    } else if (len > 1) {\n      str = str.charAt(0) + '.' + str.slice(1);\n    }\n\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\n  } else if (e < 0) {\n    str = '0.' + getZeroString(-e - 1) + str;\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\n  } else if (e >= len) {\n    str += getZeroString(e + 1 - len);\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\n  } else {\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\n    if (sd && (k = sd - len) > 0) {\n      if (e + 1 === len) str += '.';\n      str += getZeroString(k);\n    }\n  }\n\n  return str;\n}\n\n\n// Calculate the base 10 exponent from the base 1e7 exponent.\nfunction getBase10Exponent(digits, e) {\n  var w = digits[0];\n\n  // Add the number of digits of the first word of the digits array.\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\n  return e;\n}\n\n\nfunction getLn10(Ctor, sd, pr) {\n  if (sd > LN10_PRECISION) {\n\n    // Reset global state in case the exception is caught.\n    external = true;\n    if (pr) Ctor.precision = pr;\n    throw Error(precisionLimitExceeded);\n  }\n  return finalise(new Ctor(LN10), sd, 1, true);\n}\n\n\nfunction getPi(Ctor, sd, rm) {\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\n  return finalise(new Ctor(PI), sd, rm, true);\n}\n\n\nfunction getPrecision(digits) {\n  var w = digits.length - 1,\n    len = w * LOG_BASE + 1;\n\n  w = digits[w];\n\n  // If non-zero...\n  if (w) {\n\n    // Subtract the number of trailing zeros of the last word.\n    for (; w % 10 == 0; w /= 10) len--;\n\n    // Add the number of digits of the first word.\n    for (w = digits[0]; w >= 10; w /= 10) len++;\n  }\n\n  return len;\n}\n\n\nfunction getZeroString(k) {\n  var zs = '';\n  for (; k--;) zs += '0';\n  return zs;\n}\n\n\n/*\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\n * integer of type number.\n *\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\n *\n */\nfunction intPow(Ctor, x, n, pr) {\n  var isTruncated,\n    r = new Ctor(1),\n\n    // Max n of 9007199254740991 takes 53 loop iterations.\n    // Maximum digits array length; leaves [28, 34] guard digits.\n    k = Math.ceil(pr / LOG_BASE + 4);\n\n  external = false;\n\n  for (;;) {\n    if (n % 2) {\n      r = r.times(x);\n      if (truncate(r.d, k)) isTruncated = true;\n    }\n\n    n = mathfloor(n / 2);\n    if (n === 0) {\n\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\n      n = r.d.length - 1;\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\n      break;\n    }\n\n    x = x.times(x);\n    truncate(x.d, k);\n  }\n\n  external = true;\n\n  return r;\n}\n\n\nfunction isOdd(n) {\n  return n.d[n.d.length - 1] & 1;\n}\n\n\n/*\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\n */\nfunction maxOrMin(Ctor, args, ltgt) {\n  var y,\n    x = new Ctor(args[0]),\n    i = 0;\n\n  for (; ++i < args.length;) {\n    y = new Ctor(args[i]);\n    if (!y.s) {\n      x = y;\n      break;\n    } else if (x[ltgt](y)) {\n      x = y;\n    }\n  }\n\n  return x;\n}\n\n\n/*\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\n * digits.\n *\n * Taylor/Maclaurin series.\n *\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\n *\n * Argument reduction:\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\n *   exp(x) = exp(x / 2^k)^(2^k)\n *\n * Previously, the argument was initially reduced by\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\n * found to be slower than just dividing repeatedly by 32 as above.\n *\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\n *\n *  exp(Infinity)  = Infinity\n *  exp(-Infinity) = 0\n *  exp(NaN)       = NaN\n *  exp(±0)        = 1\n *\n *  exp(x) is non-terminating for any finite, non-zero x.\n *\n *  The result will always be correctly rounded.\n *\n */\nfunction naturalExponential(x, sd) {\n  var denominator, guard, j, pow, sum, t, wpr,\n    rep = 0,\n    i = 0,\n    k = 0,\n    Ctor = x.constructor,\n    rm = Ctor.rounding,\n    pr = Ctor.precision;\n\n  // 0/NaN/Infinity?\n  if (!x.d || !x.d[0] || x.e > 17) {\n\n    return new Ctor(x.d\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\n  }\n\n  if (sd == null) {\n    external = false;\n    wpr = pr;\n  } else {\n    wpr = sd;\n  }\n\n  t = new Ctor(0.03125);\n\n  // while abs(x) >= 0.1\n  while (x.e > -2) {\n\n    // x = x / 2^5\n    x = x.times(t);\n    k += 5;\n  }\n\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\n  // necessary to ensure the first 4 rounding digits are correct.\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\n  wpr += guard;\n  denominator = pow = sum = new Ctor(1);\n  Ctor.precision = wpr;\n\n  for (;;) {\n    pow = finalise(pow.times(x), wpr, 1);\n    denominator = denominator.times(++i);\n    t = sum.plus(divide(pow, denominator, wpr, 1));\n\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n      j = k;\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\n\n      // Check to see if the first 4 rounding digits are [49]999.\n      // If so, repeat the summation with a higher precision, otherwise\n      // e.g. with precision: 18, rounding: 1\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\n      // `wpr - guard` is the index of first rounding digit.\n      if (sd == null) {\n\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n          Ctor.precision = wpr += 10;\n          denominator = pow = t = new Ctor(1);\n          i = 0;\n          rep++;\n        } else {\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\n        }\n      } else {\n        Ctor.precision = pr;\n        return sum;\n      }\n    }\n\n    sum = t;\n  }\n}\n\n\n/*\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\n * digits.\n *\n *  ln(-n)        = NaN\n *  ln(0)         = -Infinity\n *  ln(-0)        = -Infinity\n *  ln(1)         = 0\n *  ln(Infinity)  = Infinity\n *  ln(-Infinity) = NaN\n *  ln(NaN)       = NaN\n *\n *  ln(n) (n != 1) is non-terminating.\n *\n */\nfunction naturalLogarithm(y, sd) {\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\n    n = 1,\n    guard = 10,\n    x = y,\n    xd = x.d,\n    Ctor = x.constructor,\n    rm = Ctor.rounding,\n    pr = Ctor.precision;\n\n  // Is x negative or Infinity, NaN, 0 or 1?\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\n  }\n\n  if (sd == null) {\n    external = false;\n    wpr = pr;\n  } else {\n    wpr = sd;\n  }\n\n  Ctor.precision = wpr += guard;\n  c = digitsToString(xd);\n  c0 = c.charAt(0);\n\n  if (Math.abs(e = x.e) < 1.5e15) {\n\n    // Argument reduction.\n    // The series converges faster the closer the argument is to 1, so using\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\n    // later be divided by this number, then separate out the power of 10 using\n    // ln(a*10^b) = ln(a) + b*ln(10).\n\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\n    // max n is 6 (gives 0.7 - 1.3)\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\n      x = x.times(y);\n      c = digitsToString(x.d);\n      c0 = c.charAt(0);\n      n++;\n    }\n\n    e = x.e;\n\n    if (c0 > 1) {\n      x = new Ctor('0.' + c);\n      e++;\n    } else {\n      x = new Ctor(c0 + '.' + c.slice(1));\n    }\n  } else {\n\n    // The argument reduction method above may result in overflow if the argument y is a massive\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\n    Ctor.precision = pr;\n\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\n  }\n\n  // x1 is x reduced to a value near 1.\n  x1 = x;\n\n  // Taylor series.\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\n  x2 = finalise(x.times(x), wpr, 1);\n  denominator = 3;\n\n  for (;;) {\n    numerator = finalise(numerator.times(x2), wpr, 1);\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\n\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n      sum = sum.times(2);\n\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\n      sum = divide(sum, new Ctor(n), wpr, 1);\n\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\n      // been repeated previously) and the first 4 rounding digits 9999?\n      // If so, restart the summation with a higher precision, otherwise\n      // e.g. with precision: 12, rounding: 1\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\n      // `wpr - guard` is the index of first rounding digit.\n      if (sd == null) {\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n          Ctor.precision = wpr += guard;\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\n          x2 = finalise(x.times(x), wpr, 1);\n          denominator = rep = 1;\n        } else {\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\n        }\n      } else {\n        Ctor.precision = pr;\n        return sum;\n      }\n    }\n\n    sum = t;\n    denominator += 2;\n  }\n}\n\n\n// ±Infinity, NaN.\nfunction nonFiniteToString(x) {\n  // Unsigned.\n  return String(x.s * x.s / 0);\n}\n\n\n/*\n * Parse the value of a new Decimal `x` from string `str`.\n */\nfunction parseDecimal(x, str) {\n  var e, i, len;\n\n  // Decimal point?\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n  // Exponential form?\n  if ((i = str.search(/e/i)) > 0) {\n\n    // Determine exponent.\n    if (e < 0) e = i;\n    e += +str.slice(i + 1);\n    str = str.substring(0, i);\n  } else if (e < 0) {\n\n    // Integer.\n    e = str.length;\n  }\n\n  // Determine leading zeros.\n  for (i = 0; str.charCodeAt(i) === 48; i++);\n\n  // Determine trailing zeros.\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\n  str = str.slice(i, len);\n\n  if (str) {\n    len -= i;\n    x.e = e = e - i - 1;\n    x.d = [];\n\n    // Transform base\n\n    // e is the base 10 exponent.\n    // i is where to slice str to get the first word of the digits array.\n    i = (e + 1) % LOG_BASE;\n    if (e < 0) i += LOG_BASE;\n\n    if (i < len) {\n      if (i) x.d.push(+str.slice(0, i));\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\n      str = str.slice(i);\n      i = LOG_BASE - str.length;\n    } else {\n      i -= len;\n    }\n\n    for (; i--;) str += '0';\n    x.d.push(+str);\n\n    if (external) {\n\n      // Overflow?\n      if (x.e > x.constructor.maxE) {\n\n        // Infinity.\n        x.d = null;\n        x.e = NaN;\n\n      // Underflow?\n      } else if (x.e < x.constructor.minE) {\n\n        // Zero.\n        x.e = 0;\n        x.d = [0];\n        // x.constructor.underflow = true;\n      } // else x.constructor.underflow = false;\n    }\n  } else {\n\n    // Zero.\n    x.e = 0;\n    x.d = [0];\n  }\n\n  return x;\n}\n\n\n/*\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\n */\nfunction parseOther(x, str) {\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\n\n  if (str.indexOf('_') > -1) {\n    str = str.replace(/(\\d)_(?=\\d)/g, '$1');\n    if (isDecimal.test(str)) return parseDecimal(x, str);\n  } else if (str === 'Infinity' || str === 'NaN') {\n    if (!+str) x.s = NaN;\n    x.e = NaN;\n    x.d = null;\n    return x;\n  }\n\n  if (isHex.test(str))  {\n    base = 16;\n    str = str.toLowerCase();\n  } else if (isBinary.test(str))  {\n    base = 2;\n  } else if (isOctal.test(str))  {\n    base = 8;\n  } else {\n    throw Error(invalidArgument + str);\n  }\n\n  // Is there a binary exponent part?\n  i = str.search(/p/i);\n\n  if (i > 0) {\n    p = +str.slice(i + 1);\n    str = str.substring(2, i);\n  } else {\n    str = str.slice(2);\n  }\n\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\n  // fraction part will be restored.\n  i = str.indexOf('.');\n  isFloat = i >= 0;\n  Ctor = x.constructor;\n\n  if (isFloat) {\n    str = str.replace('.', '');\n    len = str.length;\n    i = len - i;\n\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\n  }\n\n  xd = convertBase(str, base, BASE);\n  xe = xd.length - 1;\n\n  // Remove trailing zeros.\n  for (i = xe; xd[i] === 0; --i) xd.pop();\n  if (i < 0) return new Ctor(x.s * 0);\n  x.e = getBase10Exponent(xd, xe);\n  x.d = xd;\n  external = false;\n\n  // At what precision to perform the division to ensure exact conversion?\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\n  // Therefore using 4 * the number of digits of str will always be enough.\n  if (isFloat) x = divide(x, divisor, len * 4);\n\n  // Multiply by the binary exponent part if present.\n  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\n  external = true;\n\n  return x;\n}\n\n\n/*\n * sin(x) = x - x^3/3! + x^5/5! - ...\n * |x| < pi/2\n *\n */\nfunction sine(Ctor, x) {\n  var k,\n    len = x.d.length;\n\n  if (len < 3) {\n    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\n  }\n\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\n\n  // Estimate the optimum number of times to use the argument reduction.\n  k = 1.4 * Math.sqrt(len);\n  k = k > 16 ? 16 : k | 0;\n\n  x = x.times(1 / tinyPow(5, k));\n  x = taylorSeries(Ctor, 2, x, x);\n\n  // Reverse argument reduction\n  var sin2_x,\n    d5 = new Ctor(5),\n    d16 = new Ctor(16),\n    d20 = new Ctor(20);\n  for (; k--;) {\n    sin2_x = x.times(x);\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\n  }\n\n  return x;\n}\n\n\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\n  var j, t, u, x2,\n    i = 1,\n    pr = Ctor.precision,\n    k = Math.ceil(pr / LOG_BASE);\n\n  external = false;\n  x2 = x.times(x);\n  u = new Ctor(y);\n\n  for (;;) {\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\n    t = u.plus(y);\n\n    if (t.d[k] !== void 0) {\n      for (j = k; t.d[j] === u.d[j] && j--;);\n      if (j == -1) break;\n    }\n\n    j = u;\n    u = y;\n    y = t;\n    t = j;\n    i++;\n  }\n\n  external = true;\n  t.d.length = k + 1;\n\n  return t;\n}\n\n\n// Exponent e must be positive and non-zero.\nfunction tinyPow(b, e) {\n  var n = b;\n  while (--e) n *= b;\n  return n;\n}\n\n\n// Return the absolute value of `x` reduced to less than or equal to half pi.\nfunction toLessThanHalfPi(Ctor, x) {\n  var t,\n    isNeg = x.s < 0,\n    pi = getPi(Ctor, Ctor.precision, 1),\n    halfPi = pi.times(0.5);\n\n  x = x.abs();\n\n  if (x.lte(halfPi)) {\n    quadrant = isNeg ? 4 : 1;\n    return x;\n  }\n\n  t = x.divToInt(pi);\n\n  if (t.isZero()) {\n    quadrant = isNeg ? 3 : 2;\n  } else {\n    x = x.minus(t.times(pi));\n\n    // 0 <= x < pi\n    if (x.lte(halfPi)) {\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\n      return x;\n    }\n\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\n  }\n\n  return x.minus(pi).abs();\n}\n\n\n/*\n * Return the value of Decimal `x` as a string in base `baseOut`.\n *\n * If the optional `sd` argument is present include a binary exponent suffix.\n */\nfunction toStringBinary(x, baseOut, sd, rm) {\n  var base, e, i, k, len, roundUp, str, xd, y,\n    Ctor = x.constructor,\n    isExp = sd !== void 0;\n\n  if (isExp) {\n    checkInt32(sd, 1, MAX_DIGITS);\n    if (rm === void 0) rm = Ctor.rounding;\n    else checkInt32(rm, 0, 8);\n  } else {\n    sd = Ctor.precision;\n    rm = Ctor.rounding;\n  }\n\n  if (!x.isFinite()) {\n    str = nonFiniteToString(x);\n  } else {\n    str = finiteToString(x);\n    i = str.indexOf('.');\n\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\n    // log[2](10) = 3.321928094887362347870319429489390175864\n\n    if (isExp) {\n      base = 2;\n      if (baseOut == 16) {\n        sd = sd * 4 - 3;\n      } else if (baseOut == 8) {\n        sd = sd * 3 - 2;\n      }\n    } else {\n      base = baseOut;\n    }\n\n    // Convert the number as an integer then divide the result by its base raised to a power such\n    // that the fraction part will be restored.\n\n    // Non-integer.\n    if (i >= 0) {\n      str = str.replace('.', '');\n      y = new Ctor(1);\n      y.e = str.length - i;\n      y.d = convertBase(finiteToString(y), 10, base);\n      y.e = y.d.length;\n    }\n\n    xd = convertBase(str, 10, base);\n    e = len = xd.length;\n\n    // Remove trailing zeros.\n    for (; xd[--len] == 0;) xd.pop();\n\n    if (!xd[0]) {\n      str = isExp ? '0p+0' : '0';\n    } else {\n      if (i < 0) {\n        e--;\n      } else {\n        x = new Ctor(x);\n        x.d = xd;\n        x.e = e;\n        x = divide(x, y, sd, rm, 0, base);\n        xd = x.d;\n        e = x.e;\n        roundUp = inexact;\n      }\n\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\n      i = xd[sd];\n      k = base / 2;\n      roundUp = roundUp || xd[sd + 1] !== void 0;\n\n      roundUp = rm < 4\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\n          rm === (x.s < 0 ? 8 : 7));\n\n      xd.length = sd;\n\n      if (roundUp) {\n\n        // Rounding up may mean the previous digit has to be rounded up and so on.\n        for (; ++xd[--sd] > base - 1;) {\n          xd[sd] = 0;\n          if (!sd) {\n            ++e;\n            xd.unshift(1);\n          }\n        }\n      }\n\n      // Determine trailing zeros.\n      for (len = xd.length; !xd[len - 1]; --len);\n\n      // E.g. [4, 11, 15] becomes 4bf.\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\n\n      // Add binary exponent suffix?\n      if (isExp) {\n        if (len > 1) {\n          if (baseOut == 16 || baseOut == 8) {\n            i = baseOut == 16 ? 4 : 3;\n            for (--len; len % i; len++) str += '0';\n            xd = convertBase(str, base, baseOut);\n            for (len = xd.length; !xd[len - 1]; --len);\n\n            // xd[0] will always be be 1\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\n          } else {\n            str = str.charAt(0) + '.' + str.slice(1);\n          }\n        }\n\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\n      } else if (e < 0) {\n        for (; ++e;) str = '0' + str;\n        str = '0.' + str;\n      } else {\n        if (++e > len) for (e -= len; e-- ;) str += '0';\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\n      }\n    }\n\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\n  }\n\n  return x.s < 0 ? '-' + str : str;\n}\n\n\n// Does not strip trailing zeros.\nfunction truncate(arr, len) {\n  if (arr.length > len) {\n    arr.length = len;\n    return true;\n  }\n}\n\n\n// Decimal methods\n\n\n/*\n *  abs\n *  acos\n *  acosh\n *  add\n *  asin\n *  asinh\n *  atan\n *  atanh\n *  atan2\n *  cbrt\n *  ceil\n *  clamp\n *  clone\n *  config\n *  cos\n *  cosh\n *  div\n *  exp\n *  floor\n *  hypot\n *  ln\n *  log\n *  log2\n *  log10\n *  max\n *  min\n *  mod\n *  mul\n *  pow\n *  random\n *  round\n *  set\n *  sign\n *  sin\n *  sinh\n *  sqrt\n *  sub\n *  sum\n *  tan\n *  tanh\n *  trunc\n */\n\n\n/*\n * Return a new Decimal whose value is the absolute value of `x`.\n *\n * x {number|string|Decimal}\n *\n */\nfunction abs(x) {\n  return new this(x).abs();\n}\n\n\n/*\n * Return a new Decimal whose value is the arccosine in radians of `x`.\n *\n * x {number|string|Decimal}\n *\n */\nfunction acos(x) {\n  return new this(x).acos();\n}\n\n\n/*\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\n * `precision` significant digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal} A value in radians.\n *\n */\nfunction acosh(x) {\n  return new this(x).acosh();\n}\n\n\n/*\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\n * digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal}\n * y {number|string|Decimal}\n *\n */\nfunction add(x, y) {\n  return new this(x).plus(y);\n}\n\n\n/*\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\n * significant digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal}\n *\n */\nfunction asin(x) {\n  return new this(x).asin();\n}\n\n\n/*\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\n * `precision` significant digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal} A value in radians.\n *\n */\nfunction asinh(x) {\n  return new this(x).asinh();\n}\n\n\n/*\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\n * significant digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal}\n *\n */\nfunction atan(x) {\n  return new this(x).atan();\n}\n\n\n/*\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\n * `precision` significant digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal} A value in radians.\n *\n */\nfunction atanh(x) {\n  return new this(x).atanh();\n}\n\n\n/*\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\n *\n * Domain: [-Infinity, Infinity]\n * Range: [-pi, pi]\n *\n * y {number|string|Decimal} The y-coordinate.\n * x {number|string|Decimal} The x-coordinate.\n *\n * atan2(±0, -0)               = ±pi\n * atan2(±0, +0)               = ±0\n * atan2(±0, -x)               = ±pi for x > 0\n * atan2(±0, x)                = ±0 for x > 0\n * atan2(-y, ±0)               = -pi/2 for y > 0\n * atan2(y, ±0)                = pi/2 for y > 0\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\n * atan2(±Infinity, x)         = ±pi/2 for finite x\n * atan2(±Infinity, -Infinity) = ±3*pi/4\n * atan2(±Infinity, +Infinity) = ±pi/4\n * atan2(NaN, x) = NaN\n * atan2(y, NaN) = NaN\n *\n */\nfunction atan2(y, x) {\n  y = new this(y);\n  x = new this(x);\n  var r,\n    pr = this.precision,\n    rm = this.rounding,\n    wpr = pr + 4;\n\n  // Either NaN\n  if (!y.s || !x.s) {\n    r = new this(NaN);\n\n  // Both ±Infinity\n  } else if (!y.d && !x.d) {\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\n    r.s = y.s;\n\n  // x is ±Infinity or y is ±0\n  } else if (!x.d || y.isZero()) {\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\n    r.s = y.s;\n\n  // y is ±Infinity or x is ±0\n  } else if (!y.d || x.isZero()) {\n    r = getPi(this, wpr, 1).times(0.5);\n    r.s = y.s;\n\n  // Both non-zero and finite\n  } else if (x.s < 0) {\n    this.precision = wpr;\n    this.rounding = 1;\n    r = this.atan(divide(y, x, wpr, 1));\n    x = getPi(this, wpr, 1);\n    this.precision = pr;\n    this.rounding = rm;\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\n  } else {\n    r = this.atan(divide(y, x, wpr, 1));\n  }\n\n  return r;\n}\n\n\n/*\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\n * digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal}\n *\n */\nfunction cbrt(x) {\n  return new this(x).cbrt();\n}\n\n\n/*\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\n *\n * x {number|string|Decimal}\n *\n */\nfunction ceil(x) {\n  return finalise(x = new this(x), x.e + 1, 2);\n}\n\n\n/*\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\n *\n * x {number|string|Decimal}\n * min {number|string|Decimal}\n * max {number|string|Decimal}\n *\n */\nfunction clamp(x, min, max) {\n  return new this(x).clamp(min, max);\n}\n\n\n/*\n * Configure global settings for a Decimal constructor.\n *\n * `obj` is an object with one or more of the following properties,\n *\n *   precision  {number}\n *   rounding   {number}\n *   toExpNeg   {number}\n *   toExpPos   {number}\n *   maxE       {number}\n *   minE       {number}\n *   modulo     {number}\n *   crypto     {boolean|number}\n *   defaults   {true}\n *\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\n *\n */\nfunction config(obj) {\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\n  var i, p, v,\n    useDefaults = obj.defaults === true,\n    ps = [\n      'precision', 1, MAX_DIGITS,\n      'rounding', 0, 8,\n      'toExpNeg', -EXP_LIMIT, 0,\n      'toExpPos', 0, EXP_LIMIT,\n      'maxE', 0, EXP_LIMIT,\n      'minE', -EXP_LIMIT, 0,\n      'modulo', 0, 9\n    ];\n\n  for (i = 0; i < ps.length; i += 3) {\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\n    if ((v = obj[p]) !== void 0) {\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\n      else throw Error(invalidArgument + p + ': ' + v);\n    }\n  }\n\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\n  if ((v = obj[p]) !== void 0) {\n    if (v === true || v === false || v === 0 || v === 1) {\n      if (v) {\n        if (typeof crypto != 'undefined' && crypto &&\n          (crypto.getRandomValues || crypto.randomBytes)) {\n          this[p] = true;\n        } else {\n          throw Error(cryptoUnavailable);\n        }\n      } else {\n        this[p] = false;\n      }\n    } else {\n      throw Error(invalidArgument + p + ': ' + v);\n    }\n  }\n\n  return this;\n}\n\n\n/*\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\n * digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal} A value in radians.\n *\n */\nfunction cos(x) {\n  return new this(x).cos();\n}\n\n\n/*\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\n * significant digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal} A value in radians.\n *\n */\nfunction cosh(x) {\n  return new this(x).cosh();\n}\n\n\n/*\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\n * constructor.\n *\n */\nfunction clone(obj) {\n  var i, p, ps;\n\n  /*\n   * The Decimal constructor and exported function.\n   * Return a new Decimal instance.\n   *\n   * v {number|string|Decimal} A numeric value.\n   *\n   */\n  function Decimal(v) {\n    var e, i, t,\n      x = this;\n\n    // Decimal called without new.\n    if (!(x instanceof Decimal)) return new Decimal(v);\n\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\n    // which points to Object.\n    x.constructor = Decimal;\n\n    // Duplicate.\n    if (isDecimalInstance(v)) {\n      x.s = v.s;\n\n      if (external) {\n        if (!v.d || v.e > Decimal.maxE) {\n\n          // Infinity.\n          x.e = NaN;\n          x.d = null;\n        } else if (v.e < Decimal.minE) {\n\n          // Zero.\n          x.e = 0;\n          x.d = [0];\n        } else {\n          x.e = v.e;\n          x.d = v.d.slice();\n        }\n      } else {\n        x.e = v.e;\n        x.d = v.d ? v.d.slice() : v.d;\n      }\n\n      return;\n    }\n\n    t = typeof v;\n\n    if (t === 'number') {\n      if (v === 0) {\n        x.s = 1 / v < 0 ? -1 : 1;\n        x.e = 0;\n        x.d = [0];\n        return;\n      }\n\n      if (v < 0) {\n        v = -v;\n        x.s = -1;\n      } else {\n        x.s = 1;\n      }\n\n      // Fast path for small integers.\n      if (v === ~~v && v < 1e7) {\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\n\n        if (external) {\n          if (e > Decimal.maxE) {\n            x.e = NaN;\n            x.d = null;\n          } else if (e < Decimal.minE) {\n            x.e = 0;\n            x.d = [0];\n          } else {\n            x.e = e;\n            x.d = [v];\n          }\n        } else {\n          x.e = e;\n          x.d = [v];\n        }\n\n        return;\n\n      // Infinity, NaN.\n      } else if (v * 0 !== 0) {\n        if (!v) x.s = NaN;\n        x.e = NaN;\n        x.d = null;\n        return;\n      }\n\n      return parseDecimal(x, v.toString());\n\n    } else if (t !== 'string') {\n      throw Error(invalidArgument + v);\n    }\n\n    // Minus sign?\n    if ((i = v.charCodeAt(0)) === 45) {\n      v = v.slice(1);\n      x.s = -1;\n    } else {\n      // Plus sign?\n      if (i === 43) v = v.slice(1);\n      x.s = 1;\n    }\n\n    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\n  }\n\n  Decimal.prototype = P;\n\n  Decimal.ROUND_UP = 0;\n  Decimal.ROUND_DOWN = 1;\n  Decimal.ROUND_CEIL = 2;\n  Decimal.ROUND_FLOOR = 3;\n  Decimal.ROUND_HALF_UP = 4;\n  Decimal.ROUND_HALF_DOWN = 5;\n  Decimal.ROUND_HALF_EVEN = 6;\n  Decimal.ROUND_HALF_CEIL = 7;\n  Decimal.ROUND_HALF_FLOOR = 8;\n  Decimal.EUCLID = 9;\n\n  Decimal.config = Decimal.set = config;\n  Decimal.clone = clone;\n  Decimal.isDecimal = isDecimalInstance;\n\n  Decimal.abs = abs;\n  Decimal.acos = acos;\n  Decimal.acosh = acosh;        // ES6\n  Decimal.add = add;\n  Decimal.asin = asin;\n  Decimal.asinh = asinh;        // ES6\n  Decimal.atan = atan;\n  Decimal.atanh = atanh;        // ES6\n  Decimal.atan2 = atan2;\n  Decimal.cbrt = cbrt;          // ES6\n  Decimal.ceil = ceil;\n  Decimal.clamp = clamp;\n  Decimal.cos = cos;\n  Decimal.cosh = cosh;          // ES6\n  Decimal.div = div;\n  Decimal.exp = exp;\n  Decimal.floor = floor;\n  Decimal.hypot = hypot;        // ES6\n  Decimal.ln = ln;\n  Decimal.log = log;\n  Decimal.log10 = log10;        // ES6\n  Decimal.log2 = log2;          // ES6\n  Decimal.max = max;\n  Decimal.min = min;\n  Decimal.mod = mod;\n  Decimal.mul = mul;\n  Decimal.pow = pow;\n  Decimal.random = random;\n  Decimal.round = round;\n  Decimal.sign = sign;          // ES6\n  Decimal.sin = sin;\n  Decimal.sinh = sinh;          // ES6\n  Decimal.sqrt = sqrt;\n  Decimal.sub = sub;\n  Decimal.sum = sum;\n  Decimal.tan = tan;\n  Decimal.tanh = tanh;          // ES6\n  Decimal.trunc = trunc;        // ES6\n\n  if (obj === void 0) obj = {};\n  if (obj) {\n    if (obj.defaults !== true) {\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\n    }\n  }\n\n  Decimal.config(obj);\n\n  return Decimal;\n}\n\n\n/*\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\n * digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal}\n * y {number|string|Decimal}\n *\n */\nfunction div(x, y) {\n  return new this(x).div(y);\n}\n\n\n/*\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\n * significant digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\n *\n */\nfunction exp(x) {\n  return new this(x).exp();\n}\n\n\n/*\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\n *\n * x {number|string|Decimal}\n *\n */\nfunction floor(x) {\n  return finalise(x = new this(x), x.e + 1, 3);\n}\n\n\n/*\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\n * rounded to `precision` significant digits using rounding mode `rounding`.\n *\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\n *\n * arguments {number|string|Decimal}\n *\n */\nfunction hypot() {\n  var i, n,\n    t = new this(0);\n\n  external = false;\n\n  for (i = 0; i < arguments.length;) {\n    n = new this(arguments[i++]);\n    if (!n.d) {\n      if (n.s) {\n        external = true;\n        return new this(1 / 0);\n      }\n      t = n;\n    } else if (t.d) {\n      t = t.plus(n.times(n));\n    }\n  }\n\n  external = true;\n\n  return t.sqrt();\n}\n\n\n/*\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\n * otherwise return false.\n *\n */\nfunction isDecimalInstance(obj) {\n  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\n}\n\n\n/*\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\n * significant digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal}\n *\n */\nfunction ln(x) {\n  return new this(x).ln();\n}\n\n\n/*\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\n *\n * log[y](x)\n *\n * x {number|string|Decimal} The argument of the logarithm.\n * y {number|string|Decimal} The base of the logarithm.\n *\n */\nfunction log(x, y) {\n  return new this(x).log(y);\n}\n\n\n/*\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\n * significant digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal}\n *\n */\nfunction log2(x) {\n  return new this(x).log(2);\n}\n\n\n/*\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\n * significant digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal}\n *\n */\nfunction log10(x) {\n  return new this(x).log(10);\n}\n\n\n/*\n * Return a new Decimal whose value is the maximum of the arguments.\n *\n * arguments {number|string|Decimal}\n *\n */\nfunction max() {\n  return maxOrMin(this, arguments, 'lt');\n}\n\n\n/*\n * Return a new Decimal whose value is the minimum of the arguments.\n *\n * arguments {number|string|Decimal}\n *\n */\nfunction min() {\n  return maxOrMin(this, arguments, 'gt');\n}\n\n\n/*\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\n * using rounding mode `rounding`.\n *\n * x {number|string|Decimal}\n * y {number|string|Decimal}\n *\n */\nfunction mod(x, y) {\n  return new this(x).mod(y);\n}\n\n\n/*\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\n * digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal}\n * y {number|string|Decimal}\n *\n */\nfunction mul(x, y) {\n  return new this(x).mul(y);\n}\n\n\n/*\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\n * significant digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal} The base.\n * y {number|string|Decimal} The exponent.\n *\n */\nfunction pow(x, y) {\n  return new this(x).pow(y);\n}\n\n\n/*\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\n * are produced).\n *\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\n *\n */\nfunction random(sd) {\n  var d, e, k, n,\n    i = 0,\n    r = new this(1),\n    rd = [];\n\n  if (sd === void 0) sd = this.precision;\n  else checkInt32(sd, 1, MAX_DIGITS);\n\n  k = Math.ceil(sd / LOG_BASE);\n\n  if (!this.crypto) {\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\n\n  // Browsers supporting crypto.getRandomValues.\n  } else if (crypto.getRandomValues) {\n    d = crypto.getRandomValues(new Uint32Array(k));\n\n    for (; i < k;) {\n      n = d[i];\n\n      // 0 <= n < 4294967296\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\n      if (n >= 4.29e9) {\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\n      } else {\n\n        // 0 <= n <= 4289999999\n        // 0 <= (n % 1e7) <= 9999999\n        rd[i++] = n % 1e7;\n      }\n    }\n\n  // Node.js supporting crypto.randomBytes.\n  } else if (crypto.randomBytes) {\n\n    // buffer\n    d = crypto.randomBytes(k *= 4);\n\n    for (; i < k;) {\n\n      // 0 <= n < 2147483648\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\n\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\n      if (n >= 2.14e9) {\n        crypto.randomBytes(4).copy(d, i);\n      } else {\n\n        // 0 <= n <= 2139999999\n        // 0 <= (n % 1e7) <= 9999999\n        rd.push(n % 1e7);\n        i += 4;\n      }\n    }\n\n    i = k / 4;\n  } else {\n    throw Error(cryptoUnavailable);\n  }\n\n  k = rd[--i];\n  sd %= LOG_BASE;\n\n  // Convert trailing digits to zeros according to sd.\n  if (k && sd) {\n    n = mathpow(10, LOG_BASE - sd);\n    rd[i] = (k / n | 0) * n;\n  }\n\n  // Remove trailing words which are zero.\n  for (; rd[i] === 0; i--) rd.pop();\n\n  // Zero?\n  if (i < 0) {\n    e = 0;\n    rd = [0];\n  } else {\n    e = -1;\n\n    // Remove leading words which are zero and adjust exponent accordingly.\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\n\n    // Count the digits of the first word of rd to determine leading zeros.\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\n\n    // Adjust the exponent for leading zeros of the first word of rd.\n    if (k < LOG_BASE) e -= LOG_BASE - k;\n  }\n\n  r.e = e;\n  r.d = rd;\n\n  return r;\n}\n\n\n/*\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\n *\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\n *\n * x {number|string|Decimal}\n *\n */\nfunction round(x) {\n  return finalise(x = new this(x), x.e + 1, this.rounding);\n}\n\n\n/*\n * Return\n *   1    if x > 0,\n *  -1    if x < 0,\n *   0    if x is 0,\n *  -0    if x is -0,\n *   NaN  otherwise\n *\n * x {number|string|Decimal}\n *\n */\nfunction sign(x) {\n  x = new this(x);\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\n}\n\n\n/*\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\n * using rounding mode `rounding`.\n *\n * x {number|string|Decimal} A value in radians.\n *\n */\nfunction sin(x) {\n  return new this(x).sin();\n}\n\n\n/*\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\n * significant digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal} A value in radians.\n *\n */\nfunction sinh(x) {\n  return new this(x).sinh();\n}\n\n\n/*\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\n * digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal}\n *\n */\nfunction sqrt(x) {\n  return new this(x).sqrt();\n}\n\n\n/*\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\n * using rounding mode `rounding`.\n *\n * x {number|string|Decimal}\n * y {number|string|Decimal}\n *\n */\nfunction sub(x, y) {\n  return new this(x).sub(y);\n}\n\n\n/*\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\n * significant digits using rounding mode `rounding`.\n *\n * Only the result is rounded, not the intermediate calculations.\n *\n * arguments {number|string|Decimal}\n *\n */\nfunction sum() {\n  var i = 0,\n    args = arguments,\n    x = new this(args[i]);\n\n  external = false;\n  for (; x.s && ++i < args.length;) x = x.plus(args[i]);\n  external = true;\n\n  return finalise(x, this.precision, this.rounding);\n}\n\n\n/*\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\n * digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal} A value in radians.\n *\n */\nfunction tan(x) {\n  return new this(x).tan();\n}\n\n\n/*\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\n * significant digits using rounding mode `rounding`.\n *\n * x {number|string|Decimal} A value in radians.\n *\n */\nfunction tanh(x) {\n  return new this(x).tanh();\n}\n\n\n/*\n * Return a new Decimal whose value is `x` truncated to an integer.\n *\n * x {number|string|Decimal}\n *\n */\nfunction trunc(x) {\n  return finalise(x = new this(x), x.e + 1, 1);\n}\n\n\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\nP[Symbol.toStringTag] = 'Decimal';\n\n// Create and configure initial Decimal constructor.\nexport var Decimal = P.constructor = clone(DEFAULTS);\n\n// Create the internal constants from their string values.\nLN10 = new Decimal(LN10);\nPI = new Decimal(PI);\n\nexport default Decimal;\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.1083984375,
          "content": "{\n  \"name\": \"decimal.js\",\n  \"description\": \"An arbitrary-precision Decimal type for JavaScript.\",\n  \"version\": \"10.4.3\",\n  \"keywords\": [\n    \"arbitrary\",\n    \"precision\",\n    \"arithmetic\",\n    \"big\",\n    \"number\",\n    \"decimal\",\n    \"float\",\n    \"biginteger\",\n    \"bigdecimal\",\n    \"bignumber\",\n    \"bigint\",\n    \"bignum\"\n  ],\n  \"repository\" : {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/MikeMcl/decimal.js.git\"\n  },\n  \"main\": \"decimal\",\n  \"module\": \"decimal.mjs\",\n  \"browser\": \"decimal.js\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./decimal.d.ts\",\n      \"import\": \"./decimal.mjs\",\n      \"require\": \"./decimal.js\"\n    },\n    \"./decimal.mjs\": \"./decimal.mjs\",\n    \"./decimal.js\": \"./decimal.js\",\n    \"./package.json\": \"./package.json\",\n    \"./decimal\": {\n      \"types\": \"./decimal.d.ts\",\n      \"import\": \"./decimal.mjs\",\n      \"require\": \"./decimal.js\"\n    }\n  },\n  \"author\": {\n    \"name\": \"Michael Mclaughlin\",\n    \"email\": \"M8ch88l@gmail.com\"\n  },\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"test\": \"node ./test/test.js\"\n  },\n  \"types\": \"decimal.d.ts\",\n  \"files\": [\n    \"decimal.js\",\n    \"decimal.mjs\",\n    \"decimal.d.ts\"\n  ]\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}