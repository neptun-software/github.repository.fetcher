{
  "metadata": {
    "timestamp": 1736563062779,
    "page": 698,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chieffancypants/angular-loading-bar",
      "stars": 5162,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4052734375,
          "content": "# EditorConfig helps developers define and maintain consistent\n# coding styles between different editors and IDEs\n# editorconfig.org\n\nroot = true\n\n\n[*]\n\n# Change these settings to your own preference\nindent_style = space\nindent_size = 2\n\n# We recommend you to keep these unchanged\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.04296875,
          "content": "node_modules\ntest/coverage\nbower_components\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 5.7822265625,
          "content": "{\n  \"globals\": {\n    \"angular\": false\n  },\n\n  \"bitwise\"       : true,     // Prohibit bitwise operators (&, |, ^, etc.).\n  \"curly\"         : true,     // Require {} for every new block or scope.\n  \"eqeqeq\"        : true,     // Require triple equals i.e. `===`.\n  \"forin\"         : true,     // Tolerate `for in` loops without `hasOwnPrototype`.\n  \"immed\"         : true,     // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`\n  \"latedef\"       : true,     // Prohibit variable use before definition.\n  \"newcap\"        : true,     // Require capitalization of all constructor functions e.g. `new F()`.\n  \"noarg\"         : true,     // Prohibit use of `arguments.caller` and `arguments.callee`.\n  \"noempty\"       : true,     // Prohibit use of empty blocks.\n  \"nonew\"         : true,     // Prohibit use of constructors for side-effects.\n  \"plusplus\"      : false,    // Prohibit use of `++` & `--`.\n  \"regexp\"        : true,     // Prohibit `.` and `[^...]` in regular expressions.\n  \"undef\"         : true,     // Require all non-global variables be declared before they are used.\n  \"strict\"        : false,    // Require `use strict` pragma in every file.\n  \"trailing\"      : true,     // Prohibit trailing whitespaces.\n\n\n  // Relaxing options:\n  \"asi\"           : false,    // Tolerate Automatic Semicolon Insertion (no semicolons).\n  \"boss\"          : false,    // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.\n  \"debug\"         : false,    // Allow debugger statements e.g. browser breakpoints.\n  \"eqnull\"        : false,    // Tolerate use of `== null`.\n  \"es5\"           : false,    // Allow EcmaScript 5 syntax.\n  \"esnext\"        : false,    // Allow ES.next specific features such as `const` and `let`.\n  \"evil\"          : false,    // Tolerate use of `eval`.\n  \"expr\"          : false,    // Tolerate `ExpressionStatement` as Programs.\n  \"funcscope\"     : false,    // Tolerate declarations of variables inside of control structures while accessing them later from the outside.\n  \"globalstrict\"  : false,    // Allow global \"use strict\" (also enables 'strict').\n  \"iterator\"      : false,    // Allow usage of __iterator__ property.\n  \"lastsemic\"     : false,    // Tolerat missing semicolons when the it is omitted for the last statement in a one-line block.\n  \"laxbreak\"      : false,    // Tolerate unsafe line breaks e.g. `return [\\n] x` without semicolons.\n  \"laxcomma\"      : false,    // Suppress warnings about comma-first coding style.\n  \"loopfunc\"      : false,    // Allow functions to be defined within loops.\n  \"multistr\"      : false,    // Tolerate multi-line strings.\n  \"onecase\"       : false,    // Tolerate switches with just one case.\n  \"proto\"         : false,    // Tolerate __proto__ property. This property is deprecated.\n  \"regexdash\"     : false,    // Tolerate unescaped last dash i.e. `[-...]`.\n  \"scripturl\"     : false,    // Tolerate script-targeted URLs.\n  \"smarttabs\"     : false,    // Tolerate mixed tabs and spaces when the latter are used for alignmnent only.\n  \"shadow\"        : false,    // Allows re-define variables later in code e.g. `var x=1; x=2;`.\n  \"sub\"           : false,    // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.\n  \"supernew\"      : false,    // Tolerate `new function () { ... };` and `new Object;`.\n  \"validthis\"     : false,    // Tolerate strict violations when the code is running in strict mode and you use this in a non-constructor function.\n\n  // == Environments ====================================================\n  //\n  // These options pre-define global variables that are exposed by\n  // popular JavaScript libraries and runtime environmentsâ€”such as\n  // browser or node.js.\n\n  \"browser\"       : true,     // Standard browser globals e.g. `window`, `document`.\n  \"couch\"         : false,    // Enable globals exposed by CouchDB.\n  \"devel\"         : false,    // Allow development statements e.g. `console.log();`.\n  \"dojo\"          : false,    // Enable globals exposed by Dojo Toolkit.\n  \"jquery\"        : false,    // Enable globals exposed by jQuery JavaScript library.\n  \"mootools\"      : false,    // Enable globals exposed by MooTools JavaScript framework.\n  \"node\"          : false,    // Enable globals available when code is running inside of the NodeJS runtime environment.\n  \"nonstandard\"   : false,    // Define non-standard but widely adopted globals such as escape and unescape.\n  \"prototypejs\"   : false,    // Enable globals exposed by Prototype JavaScript framework.\n  \"rhino\"         : false,    // Enable globals available when your code is running inside of the Rhino runtime environment.\n  \"wsh\"           : false,    // Enable globals available when your code is running as a script for the Windows Script Host.\n\n  // == JSLint Legacy ===================================================\n  //\n  // These options are legacy from JSLint. Aside from bug fixes they will\n  // not be improved in any way and might be removed at any point.\n\n  \"nomen\"         : false,    // Prohibit use of initial or trailing underbars in names.\n  \"onevar\"        : false,    // Allow only one `var` statement per function.\n  \"passfail\"      : false,    // Stop on first error.\n  \"white\"         : false,    // Check against strict whitespace and indentation rules.\n\n  // == Undocumented Options ============================================\n  //\n  // While I've found these options in [example1][2] and [example2][3]\n  // they are not described in the [JSHint Options documentation][4].\n  //\n  // [4]: http://www.jshint.com/options/\n\n  \"maxerr\"        : 100,      // Maximum errors before stopping.\n  \"predef\"        : [         // Extra globals.\n    //\"exampleVar\",\n    //\"anotherCoolGlobal\",\n    //\"iLoveDouglas\"\n  ],\n  \"indent\"        : 2         // Specify indentation spacing\n\n}\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.58984375,
          "content": "Changelog\n==========\n## 0.9.0\n- resolved issue with parentSelector when parent has no children\n([#244](https://github.com/chieffancypants/angular-loading-bar/pull/244))\n([#251](https://github.com/chieffancypants/angular-loading-bar/issues/251))\n([#239](https://github.com/chieffancypants/angular-loading-bar/issues/239))\n([#179](https://github.com/chieffancypants/angular-loading-bar/issues/179))\n- added style property to package.json\n([#271](https://github.com/chieffancypants/angular-loading-bar/pull/271))\n([#231](https://github.com/chieffancypants/angular-loading-bar/pull/231))\n- Removed duplicated property declaration in CSS\n([#226](https://github.com/chieffancypants/angular-loading-bar/pull/226))\n\n\n\n## 0.8.0\n- auto incrementing is now configurable\n([#209](https://github.com/chieffancypants/angular-loading-bar/pull/209))\n- removed `version` from bower.json\n([#207](https://github.com/chieffancypants/angular-loading-bar/pull/207))\n- added support for webpack and browserify\n([#200](https://github.com/chieffancypants/angular-loading-bar/pull/200))\n- spinner border radius 10px -> 50%\n([#184](https://github.com/chieffancypants/angular-loading-bar/issues/184))\n\n\n## 0.7.1\n- Merge correct PR for broken interceptor detection ([#133](https://github.com/chieffancypants/angular-loading-bar/pull/133), [#50](https://github.com/chieffancypants/angular-loading-bar/pull/50))\n\n## 0.7.0\n- Changes for animate.enter compatibility for 1.2 and 1.3 ([#170](https://github.com/chieffancypants/angular-loading-bar/pull/170))\n- Detect errors with other interceptors ([#133](https://github.com/chieffancypants/angular-loading-bar/pull/133), [#50](https://github.com/chieffancypants/angular-loading-bar/pull/50))\n- Provide more detail on response/responseError events ([#128](https://github.com/chieffancypants/angular-loading-bar/pull/128))\n- Change angular dependency in bower ([#126](https://github.com/chieffancypants/angular-loading-bar/issues/126))\n\n## 0.6.0\n- Customize progress bar template: ([#111](https://github.com/chieffancypants/angular-loading-bar/pull/111))\n- Only append bar to first parent found ([#108](https://github.com/chieffancypants/angular-loading-bar/pull/108))\n\n## 0.5.2:\nFixes for Angular 1.3 breaking changes:\n- Circular dependencies: ([#98](https://github.com/chieffancypants/angular-loading-bar/issues/98)), ([#101](https://github.com/chieffancypants/angular-loading-bar/pull/101))\n- $animate no longer accepts callbacks: ([#102](https://github.com/chieffancypants/angular-loading-bar/pull/102))\n\n## 0.5.1\n- Reworked cache logic to allow cache:true ([#96](https://github.com/chieffancypants/angular-loading-bar/pull/96))\n\n## 0.5.0\n- Added spinner template configuration ([#82](https://github.com/chieffancypants/angular-loading-bar/pull/82))\n- $timeout was not canceled properly ([#79](https://github.com/chieffancypants/angular-loading-bar/pull/79))\n\n## 0.4.3\n- update z-index to work with other css frameworks ([#69](https://github.com/chieffancypants/angular-loading-bar/pull/69))\n- ignoreLoadingBar not ignored when calculating percentage complete ([#70](https://github.com/chieffancypants/angular-loading-bar/pull/70))\n\n## 0.4.2\n- Split loading bar into different modules so they can be included separately ([#46](https://github.com/chieffancypants/angular-loading-bar/issues/46))\n\n## 0.4.1\n- Fix for route views defined on body where loading bar is also attached ([#56](https://github.com/chieffancypants/angular-loading-bar/issues/56))\n\n## 0.4.0\n- Initial load percentage is now configurable ([#47](https://github.com/chieffancypants/angular-loading-bar/issues/47))\n- Peg graphic reworked so the loadingbar does not require CSS changes when not at the very top of the page ([#42](https://github.com/chieffancypants/angular-loading-bar/issues/42), [#45](https://github.com/chieffancypants/angular-loading-bar/issues/45), [#10](https://github.com/chieffancypants/angular-loading-bar/issues/10))\n- z-index of spinner increased to work with Bootstrap 3 z-indexes ([#53](https://github.com/chieffancypants/angular-loading-bar/issues/53))\n\n## 0.3.0\n- Loading bar only appears on XHR requests with high latency ([#27](https://github.com/chieffancypants/angular-loading-bar/issues/27))\n\n## 0.2.0\n- Progression bar not calculated correctly for consecutive calls within the 500ms delay ([#29](https://github.com/chieffancypants/angular-loading-bar/issues/29), [#32](https://github.com/chieffancypants/angular-loading-bar/issues/32))\n- Event broadcasts when loading (#31)\n\n## 0.1.1\n- Alias chieffancypants.loadingbar to angular-loading-bar (#25, #19)\n\n## 0.1.0\n- Fixed issues with Angular 1.2-rc3+\n- Ability to ignore particular XHR requests (#21)\n- Broadcasting of events (#18)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.5361328125,
          "content": "### Submitting a PR\nExcellent! You've chosen to help advance the project by either fixing a bug, or implementing a new feature.  Before you put forth any work on a PR, please follow these steps:\n\n1. Ensure a similar PR has not already been opened or closed.\n1. Clearly define the intent of the PR.  The more detail, the more likelihood of it getting merged.\n1. Is this a feature that would benefit the **majority** of users?  This is a small library, and it intends to stay that way.  If you do not believe most users of the project will benefit from your work, it should probably be added in your own application. \n1. Be sure to include test cases that cover all newly introduced code.  This part is essential, as any PRs without tests will be closed.\n1. Link any [issues](https://github.com/chieffancypants/angular-loading-bar/issues) that are addressed by the PR.\n\n### Submitting a bug report\nIf you believe you've found a bug in the source code, and are unable to fix it yourself (by submitting a PR) please follow these steps:\n\n1. Ensure the bug has not already been reported by searching the [issues](https://github.com/chieffancypants/angular-loading-bar/issues)\n1. Submit a reduced test case that clearly demonstrates the bug. This means submitting a plunker or jsfiddle with the bare minimum of code necessary to reproduce the bug. Without this, your issue may be closed as invalid.\n1. Include any relevant browser information\n1. If you're unable to fix this bug yourself, but can point to why it is occuring, please send that information along (line# or commit)\n\n"
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 2.390625,
          "content": "/*global module:false*/\nmodule.exports = function(grunt) {\n\n  grunt.initConfig({\n\n    // Metadata.\n    pkg: grunt.file.readJSON('package.json'),\n    banner: '/*! \\n * <%= pkg.title || pkg.name %> v<%= pkg.version %>\\n' +\n      ' * <%= pkg.homepage %>\\n' +\n      ' * Copyright (c) <%= grunt.template.today(\"yyyy\") %> <%= pkg.author %>\\n' +\n      ' * License: <%= pkg.license %>\\n' +\n      ' */\\n',\n\n    // Task configuration.\n    uglify: {\n      options: {\n        banner: '<%= banner %>',\n        report: 'gzip'\n      },\n      build: {\n        src: 'src/loading-bar.js',\n        dest: 'build/loading-bar.min.js'\n      }\n    },\n\n    cssmin: {\n      options: {\n        banner: '<%= banner %>',\n        report: 'gzip'\n      },\n      minify: {\n        src: 'src/loading-bar.css',\n        dest: 'build/loading-bar.min.css'\n      }\n    },\n\n    karma: {\n      unit: {\n        configFile: 'test/karma-angular-1.2.conf.js',\n        singleRun: true,\n        coverageReporter: {\n          type: 'text',\n          dir: 'coverage/'\n        }\n      },\n      unit13: {\n        configFile: 'test/karma-angular-1.3.conf.js',\n        singleRun: true,\n        coverageReporter: {\n          type: 'text',\n          dir: 'coverage/'\n        }\n      },\n      unit14: {\n        configFile: 'test/karma-angular-1.4.conf.js',\n        singleRun: true,\n        coverageReporter: {\n          type: 'text',\n          dir: 'coverage/'\n        }\n      },\n      watch: {\n        configFile: 'test/karma-angular-1.2.conf.js',\n        singleRun: false,\n        reporters: ['progress']  // Don't display coverage\n      }\n    },\n\n    jshint: {\n      jshintrc: '.jshintrc',\n      gruntfile: {\n        src: 'Gruntfile.js'\n      },\n      src: {\n        src: ['src/*.js']\n      }\n    },\n\n    concat: {\n      build: {\n        options: {\n          banner: '<%= banner %>'\n        },\n        files: {\n          'build/loading-bar.css': 'src/loading-bar.css',\n          'build/loading-bar.js':  'src/loading-bar.js',\n        }\n      }\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-cssmin');\n  grunt.loadNpmTasks('grunt-contrib-concat');\n  grunt.loadNpmTasks('grunt-karma');\n\n  grunt.registerTask('default', ['jshint', 'karma:unit', 'karma:unit13', 'karma:unit14', 'uglify', 'cssmin', 'concat:build']);\n  grunt.registerTask('test', ['karma:watch']);\n  grunt.registerTask('build', ['default']);\n\n};\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013-2014 Wes Cruver\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.8427734375,
          "content": "angular-loading-bar\n===================\n\nThe idea is simple: Add a loading bar / progress bar whenever an XHR request goes out in angular.  Multiple requests within the same time period get bundled together such that each response increments the progress bar by the appropriate amount.\n\nThis is mostly cool because you simply include it in your app, and it works.  There's no complicated setup, and no need to maintain the state of the loading bar; it's all handled automatically by the interceptor.\n\n**Requirements:** AngularJS 1.2+\n\n**File Size:** 2.4Kb minified, 0.5Kb gzipped\n\n\n## Usage:\n\n1. include the loading bar as a dependency for your app.  If you want animations, include `ngAnimate` as well. *note: ngAnimate is optional*\n\n    ```js\n    angular.module('myApp', ['angular-loading-bar', 'ngAnimate'])\n    ```\n\n2. include the supplied JS and CSS file (or create your own CSS to override defaults).\n\n    ```html\n    <link rel='stylesheet' href='build/loading-bar.min.css' type='text/css' media='all' />\n    <script type='text/javascript' src='build/loading-bar.min.js'></script>\n    ```\n\n3. That's it -- you're done!\n\n#### via bower:\n```\n$ bower install angular-loading-bar\n```\n#### via npm:\n```\n$ npm install angular-loading-bar\n```\n\n#### via CDN:\n```html\n <link rel='stylesheet' href='//cdnjs.cloudflare.com/ajax/libs/angular-loading-bar/0.9.0/loading-bar.min.css' type='text/css' media='all' />\n <script type='text/javascript' src='//cdnjs.cloudflare.com/ajax/libs/angular-loading-bar/0.9.0/loading-bar.min.js'></script>\n```\n\n## Why I created this\nThere are a couple projects similar to this out there, but none were ideal for me.  All implementations I've seen require that you maintain state on behalf of the loading bar.  In other words, you're setting the value of the loading/progress bar manually from potentially many different locations.  This becomes complicated when you have a very large application with several services all making independent XHR requests. It becomes even more complicated if you want these services to be loosly coupled.\n\nAdditionally, Angular was created as a highly testable framework, so it pains me to see Angular modules without tests.  That is not the case here as this loading bar ships with 100% code coverage.\n\n\n**Goals for this project:**\n\n1. Make it automatic\n2. Unit tests, 100% coverage\n3. Must work well with ngAnimate\n4. Must be styled via external CSS (not inline)\n5. No jQuery dependencies\n\n\n## Configuration\n\n#### Turn the spinner on or off:\nThe insertion of the spinner can be controlled through configuration.  It's on by default, but if you'd like to turn it off, simply configure the service:\n\n```js\nangular.module('myApp', ['angular-loading-bar'])\n  .config(['cfpLoadingBarProvider', function(cfpLoadingBarProvider) {\n    cfpLoadingBarProvider.includeSpinner = false;\n  }])\n```\n\n#### Turn the loading bar on or off:\nLike the spinner configuration above, the loading bar can also be turned off for cases where you only want the spinner:\n\n```js\nangular.module('myApp', ['angular-loading-bar'])\n  .config(['cfpLoadingBarProvider', function(cfpLoadingBarProvider) {\n    cfpLoadingBarProvider.includeBar = false;\n  }])\n```\n\n#### Customize the template:\nIf you'd like to replace the default HTML template you can configure it by providing inline HTML as a string:\n\n```js\nangular.module('myApp', ['angular-loading-bar'])\n  .config(['cfpLoadingBarProvider', function(cfpLoadingBarProvider) {\n    cfpLoadingBarProvider.spinnerTemplate = '<div><span class=\"fa fa-spinner\">Loading...</div>';\n  }])\n```\n\n#### Position the template:\nIf you'd like to position the loadingBar or spinner, provide a CSS selector to the element you'd like the template injected into. The default is the `<body>` element:\n\n```js\nangular.module('myApp', ['angular-loading-bar'])\n  .config(['cfpLoadingBarProvider', function(cfpLoadingBarProvider) {\n    cfpLoadingBarProvider.parentSelector = '#loading-bar-container';\n    cfpLoadingBarProvider.spinnerTemplate = '<div><span class=\"fa fa-spinner\">Custom Loading Message...</div>';\n  }])\n```\n```html\n<div id=\"loading-bar-container\"></div>\n```\n\nAlso keep in mind you'll likely want to change the CSS to reflect it's new position, so you'll need to override the default CSS:\n```css\n#loading-bar .bar {\n  position: relative;\n}\n```\n\n#### Latency Threshold\nBy default, the loading bar will only display after it has been waiting for a response for over 100ms.  This helps keep things feeling snappy, and avoids the annoyingness of showing a loading bar every few seconds on really chatty applications.  This threshold is totally configurable:\n\n```js\nangular.module('myApp', ['angular-loading-bar'])\n  .config(['cfpLoadingBarProvider', function(cfpLoadingBarProvider) {\n    cfpLoadingBarProvider.latencyThreshold = 500;\n  }])\n```\n\n#### Ignoring particular XHR requests:\nThe loading bar can also be forced to ignore certain requests, for example, when long-polling or periodically sending debugging information back to the server.\n\n```js\n// ignore a particular $http GET:\n$http.get('/status', {\n  ignoreLoadingBar: true\n});\n\n// ignore a particular $http POST.  Note: POST and GET have different\n// method signatures:\n$http.post('/save', data, {\n  ignoreLoadingBar: true\n});\n\n```\n\n\n```js\n// ignore particular $resource requests:\n.factory('Restaurant', function($resource) {\n  return $resource('/api/restaurant/:id', {id: '@id'}, {\n    query: {\n      method: 'GET',\n      isArray: true,\n      ignoreLoadingBar: true\n    }\n  });\n});\n\n```\n\n\n\n\n## How it works:\nThis library is split into two modules, an $http `interceptor`, and a `service`:\n\n**Interceptor**  \nThe interceptor simply listens for all outgoing XHR requests, and then instructs the loadingBar service to start, stop, and increment accordingly.  There is no public API for the interceptor.  It can be used stand-alone by including `cfp.loadingBarInterceptor` as a dependency for your module.\n\n**Service**  \nThe service is responsible for the presentation of the loading bar.  It injects the loading bar into the DOM, adjusts the width whenever `set()` is called, and `complete()`s the whole show by removing the loading bar from the DOM.\n\n## Service API (advanced usage)\nUnder normal circumstances you won't need to use this.  However, if you wish to use the loading bar without the interceptor, you can do that as well.  Simply include the loading bar service as a dependency instead of the main `angular-loading-bar` module:\n\n```js\nangular.module('myApp', ['cfp.loadingBar'])\n```\n\n\n```js\n\ncfpLoadingBar.start();\n// will insert the loading bar into the DOM, and display its progress at 1%.\n// It will automatically call `inc()` repeatedly to give the illusion that the page load is progressing.\n\ncfpLoadingBar.inc();\n// increments the loading bar by a random amount.\n// It is important to note that the auto incrementing will begin to slow down as\n// the progress increases.  This is to prevent the loading bar from appearing\n// completed (or almost complete) before the XHR request has responded.\n\ncfpLoadingBar.set(0.3) // Set the loading bar to 30%\ncfpLoadingBar.status() // Returns the loading bar's progress.\n// -> 0.3\n\ncfpLoadingBar.complete()\n// Set the loading bar's progress to 100%, and then remove it from the DOM.\n\n```\n\n## Events\nThe loading bar broadcasts the following events over $rootScope allowing further customization:\n\n**`cfpLoadingBar:loading`** triggered upon each XHR request that is not already cached\n\n**`cfpLoadingBar:loaded`** triggered each time an XHR request recieves a response (either successful or error)\n\n**`cfpLoadingBar:started`** triggered once upon the first XHR request.  Will trigger again if another request goes out after `cfpLoadingBar:completed` has triggered.\n\n**`cfpLoadingBar:completed`** triggered once when the all XHR requests have returned (either successfully or not)\n\n## Credits:\nCredit goes to [rstacruz](https://github.com/rstacruz) for his excellent [nProgress](https://github.com/rstacruz/nprogress).\n\n## License:\nLicensed under the MIT license\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.6640625,
          "content": "{\n  \"name\": \"angular-loading-bar\",\n  \"main\": [\n    \"build/loading-bar.js\",\n    \"build/loading-bar.css\"\n  ],\n  \"ignore\": [\n    \"**/.*\",\n    \"node_modules\",\n    \"components\",\n    \"test\",\n    \"example\"\n  ],\n  \"dependencies\": {\n    \"angular\": \"^1.2.9\"\n  },\n  \"devDependencies\": {\n    \"angular\": \"~1.2.23\",\n    \"angular-1.3\": \"angular#1.3\",\n    \"angular-1.4\": \"angular#1.4\",\n    \"angular-mocks\": \"~1.2.9\",\n    \"angular-mocks-1.3\": \"angular-mocks#1.3\",\n    \"angular-mocks-1.4\": \"angular-mocks#1.4\",\n    \"angular-animate\": \"~1.2.9\",\n    \"angular-animate-1.3\": \"angular-animate#1.3\",\n    \"angular-animate-1.4\": \"angular-animate#1.4\"\n  },\n  \"resolutions\": {\n    \"angular\": \"~1.2.23\"\n  }\n}\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.0703125,
          "content": "require('./build/loading-bar');\nmodule.exports = 'angular-loading-bar';\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.13671875,
          "content": "{\n  \"name\": \"angular-loading-bar\",\n  \"version\": \"0.9.0\",\n  \"description\": \"An automatic loading bar for AngularJS\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"build/loading-bar.js\",\n    \"build/loading-bar.css\"\n  ],\n  \"style\": \"build/loading-bar.css\",\n  \"directories\": {\n    \"example\": \"example\",\n    \"test\": \"test\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/chieffancypants/angular-loading-bar.git\"\n  },\n  \"keywords\": [\n    \"angular\",\n    \"angularjs\",\n    \"loading\",\n    \"loadingbar\",\n    \"progress\",\n    \"progressbar\"\n  ],\n  \"author\": \"Wes Cruver\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/chieffancypants/angular-loading-bar/issues\"\n  },\n  \"homepage\": \"https://chieffancypants.github.io/angular-loading-bar\",\n  \"devDependencies\": {\n    \"karma-jasmine\": \"^0.1.3\",\n    \"karma-coffee-preprocessor\": \"^0.2.0\",\n    \"karma-phantomjs-launcher\": \"^0.1.0\",\n    \"karma\": \"~0.12.0\",\n    \"karma-coverage\": \"^0.1.0\",\n    \"grunt\": \"~0.4.1\",\n    \"grunt-contrib-jshint\": \"~0.6.4\",\n    \"grunt-contrib-uglify\": \"^0.9.1\",\n    \"grunt-contrib-cssmin\": \"~0.12.0\",\n    \"grunt-karma\": \"~0.11.0\",\n    \"grunt-contrib-concat\": \"^0.5.0\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}