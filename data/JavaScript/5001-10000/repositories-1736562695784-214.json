{
  "metadata": {
    "timestamp": 1736562695784,
    "page": 214,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xojs/xo",
      "stars": 7722,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1708984375,
          "content": "root = true\n\n[*]\nindent_style = tab\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0302734375,
          "content": "* text=auto eol=lf\n*.ai binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.466796875,
          "content": "node_modules\nyarn.lock\n!test/fixtures/project/node_modules\ntest/fixtures/project/node_modules/.cache\n!test/fixtures/typescript/extends-module/node_modules\ntest/fixtures/typescript/extends-module/node_modules/.cache\n!test/fixtures/typescript/extends-tsconfig-bases/node_modules\ntest/fixtures/typescript/extends-tsconfig-bases/node_modules/.cache\n!test/fixtures/typescript/extends-array/node_modules\ntest/fixtures/typescript/extends-array/node_modules/.cache\n.nyc_output\ncoverage\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": "cli.js",
          "type": "blob",
          "size": 5.7138671875,
          "content": "#!/usr/bin/env node\n/* eslint-disable unicorn/prefer-top-level-await -- TODO: Use top-level await */\nimport process from 'node:process';\nimport getStdin from 'get-stdin';\nimport meow from 'meow';\nimport formatterPretty from 'eslint-formatter-pretty';\nimport semver from 'semver';\nimport openReport from './lib/open-report.js';\nimport xo from './index.js';\n\nconst cli = meow(`\n\tUsage\n\t  $ xo [<file|glob> ...]\n\n\tOptions\n\t  --fix             Automagically fix issues\n\t  --reporter        Reporter to use\n\t  --env             Environment preset  [Can be set multiple times]\n\t  --global          Global variable  [Can be set multiple times]\n\t  --ignore          Additional paths to ignore  [Can be set multiple times]\n\t  --space           Use space indent instead of tabs  [Default: 2]\n\t  --no-semicolon    Prevent use of semicolons\n\t  --prettier        Conform to Prettier code style\n\t  --node-version    Range of Node.js version to support\n\t  --plugin          Include third-party plugins  [Can be set multiple times]\n\t  --extend          Extend defaults with a custom config  [Can be set multiple times]\n\t  --open            Open files with issues in your editor\n\t  --quiet           Show only errors and no warnings\n\t  --extension       Additional extension to lint [Can be set multiple times]\n\t  --cwd=<dir>       Working directory for files\n\t  --stdin           Validate/fix code from stdin\n\t  --stdin-filename  Specify a filename for the --stdin option\n\t  --print-config    Print the effective ESLint config for the given file\n\n\tExamples\n\t  $ xo\n\t  $ xo index.js\n\t  $ xo *.js !foo.js\n\t  $ xo --space\n\t  $ xo --env=node --env=mocha\n\t  $ xo --plugin=react\n\t  $ xo --plugin=html --extension=html\n\t  $ echo 'const x=true' | xo --stdin --fix\n\t  $ xo --print-config=index.js\n\n\tTips\n\t  - Add XO to your project with \\`npm init xo\\`.\n\t  - Put options in package.json instead of using flags so other tools can read it.\n`, {\n\timportMeta: import.meta,\n\tautoVersion: false,\n\tbooleanDefault: undefined,\n\tflags: {\n\t\tfix: {\n\t\t\ttype: 'boolean',\n\t\t},\n\t\treporter: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tenv: {\n\t\t\ttype: 'string',\n\t\t\tisMultiple: true,\n\t\t},\n\t\tglobal: {\n\t\t\ttype: 'string',\n\t\t\tisMultiple: true,\n\t\t},\n\t\tignore: {\n\t\t\ttype: 'string',\n\t\t\tisMultiple: true,\n\t\t},\n\t\tspace: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tsemicolon: {\n\t\t\ttype: 'boolean',\n\t\t},\n\t\tprettier: {\n\t\t\ttype: 'boolean',\n\t\t},\n\t\tnodeVersion: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tplugin: {\n\t\t\ttype: 'string',\n\t\t\tisMultiple: true,\n\t\t},\n\t\textend: {\n\t\t\ttype: 'string',\n\t\t\tisMultiple: true,\n\t\t},\n\t\topen: {\n\t\t\ttype: 'boolean',\n\t\t},\n\t\tquiet: {\n\t\t\ttype: 'boolean',\n\t\t},\n\t\textension: {\n\t\t\ttype: 'string',\n\t\t\tisMultiple: true,\n\t\t},\n\t\tcwd: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tprintConfig: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tstdin: {\n\t\t\ttype: 'boolean',\n\t\t},\n\t\tstdinFilename: {\n\t\t\ttype: 'string',\n\t\t},\n\t},\n});\n\nconst {input, flags: options, showVersion} = cli;\n\n// TODO: Fix this properly instead of the below workaround.\n// Revert behavior of meow >8 to pre-8 (7.1.1) for flags using `isMultiple: true`.\n// Otherwise, options defined in package.json can't be merged by lib/options-manager.js `mergeOptions()`.\nfor (const key in options) {\n\tif (Array.isArray(options[key]) && options[key].length === 0) {\n\t\tdelete options[key];\n\t}\n}\n\n// Make data types for `options.space` match those of the API\n// Check for string type because `xo --no-space` sets `options.space` to `false`\nif (typeof options.space === 'string') {\n\tif (/^\\d+$/u.test(options.space)) {\n\t\toptions.space = Number.parseInt(options.space, 10);\n\t} else if (options.space === 'true') {\n\t\toptions.space = true;\n\t} else if (options.space === 'false') {\n\t\toptions.space = false;\n\t} else {\n\t\tif (options.space !== '') {\n\t\t\t// Assume `options.space` was set to a filename when run as `xo --space file.js`\n\t\t\tinput.push(options.space);\n\t\t}\n\n\t\toptions.space = true;\n\t}\n}\n\nif (process.env.GITHUB_ACTIONS && !options.fix && !options.reporter) {\n\toptions.quiet = true;\n}\n\nconst log = async report => {\n\tconst reporter = options.reporter || process.env.GITHUB_ACTIONS ? await xo.getFormatter(options.reporter || 'compact') : formatterPretty;\n\tprocess.stdout.write(reporter(report.results, {rulesMeta: report.rulesMeta}));\n\tprocess.exitCode = report.errorCount === 0 ? 0 : 1;\n};\n\n// `xo -` => `xo --stdin`\nif (input[0] === '-') {\n\toptions.stdin = true;\n\tinput.shift();\n}\n\nif (options.version) {\n\tshowVersion();\n}\n\nif (options.nodeVersion) {\n\tif (options.nodeVersion === 'false') {\n\t\toptions.nodeVersion = false;\n\t} else if (!semver.validRange(options.nodeVersion)) {\n\t\tconsole.error('The `--node-engine` flag must be a valid semver range (for example `>=6`)');\n\t\tprocess.exit(1);\n\t}\n}\n\n(async () => {\n\tif (typeof options.printConfig === 'string') {\n\t\tif (input.length > 0 || options.printConfig === '') {\n\t\t\tconsole.error('The `--print-config` flag must be used with exactly one filename');\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tif (options.stdin) {\n\t\t\tconsole.error('The `--print-config` flag is not supported on stdin');\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\toptions.filePath = options.printConfig;\n\t\tconst config = await xo.getConfig(options);\n\t\tconsole.log(JSON.stringify(config, undefined, '\\t'));\n\t} else if (options.stdin) {\n\t\tconst stdin = await getStdin();\n\n\t\tif (options.stdinFilename) {\n\t\t\toptions.filePath = options.stdinFilename;\n\t\t}\n\n\t\tif (options.fix) {\n\t\t\tconst {results: [result]} = await xo.lintText(stdin, options);\n\t\t\t// If there is no output, pass the stdin back out\n\t\t\tprocess.stdout.write((result && result.output) || stdin);\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.open) {\n\t\t\tconsole.error('The `--open` flag is not supported on stdin');\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tawait log(await xo.lintText(stdin, options));\n\t} else {\n\t\tconst report = await xo.lintFiles(input, options);\n\n\t\tif (options.fix) {\n\t\t\tawait xo.outputFixes(report);\n\t\t}\n\n\t\tif (options.open) {\n\t\t\topenReport(report);\n\t\t}\n\n\t\tawait log(report);\n\t}\n})();\n"
        },
        {
          "name": "code-of-conduct.md",
          "type": "blob",
          "size": 3.119140625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at sindresorhus@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "contributing.md",
          "type": "blob",
          "size": 2.765625,
          "content": "# Contributing to XO\n\n✨ Thanks for contributing to XO! ✨\n\nPlease note that this project is released with a [Contributor Code of Conduct](code-of-conduct.md). By participating in this project you agree to abide by its terms.\n\n## How can I contribute?\n\n### Improve documentation\n\nAs a user of XO you're the perfect candidate to help us improve our documentation. Typo corrections, error fixes, better explanations, more examples, etc. Open issues for things that could be improved. Anything. Even improvements to this document.\n\n### Improve issues\n\nSome issues are created with missing information, not reproducible, or plain invalid. Help make them easier to resolve. Handling issues takes a lot of time that we could rather spend on fixing bugs and adding features.\n\n### Give feedback on issues\n\nWe're always looking for more opinions on discussions in the issue tracker. It's a good opportunity to influence the future direction of XO.\n\n### Submitting an issue\n\n- The issue tracker is for issues. Use Stack Overflow for support.\n- Search the issue tracker before opening an issue.\n- Ensure you're using the latest version of XO.\n- Use a clear and descriptive title.\n- Include as much information as possible: Steps to reproduce the issue, error message, Node.js version, operating system, etc.\n- The more time you put into an issue, the more we will.\n- [The best issue report is a failing test proving it.](https://twitter.com/sindresorhus/status/579306280495357953)\n\n### Submitting a pull request\n\n- Non-trivial changes are often best discussed in an issue first, to prevent you from doing unnecessary work.\n- For ambitious tasks, you should try to get your work in front of the community for feedback as soon as possible. Open a pull request as soon as you have done the minimum needed to demonstrate your idea. At this early stage, don't worry about making things perfect, or 100% complete. Add a [WIP] prefix to the title, and describe what you still need to do. This lets reviewers know not to nit-pick small details or point out improvements you already know you need to make.\n- New features should be accompanied with tests and documentation.\n- Don't include unrelated changes.\n- Lint and test before submitting the pull request by running `$ npm test`.\n- Make the pull request from a [topic branch](https://github.com/dchelimsky/rspec/wiki/Topic-Branches), not master.\n- Use a clear and descriptive title for the pull request and commits.\n- Write a convincing description of why we should land your pull request. It's your job to convince us. Answer \"why\" it's needed and provide use-cases.\n- You might be asked to do changes to your pull request. There's never a need to open another pull request. [Just update the existing one.](https://github.com/RichardLitt/knowledge/blob/master/github/amending-a-commit-guide.md)\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 3.345703125,
          "content": "import path from 'node:path';\nimport {ESLint} from 'eslint';\nimport {globby, isGitIgnoredSync} from 'globby';\nimport {isEqual} from 'lodash-es';\nimport micromatch from 'micromatch';\nimport arrify from 'arrify';\nimport slash from 'slash';\nimport {\n\tparseOptions,\n\tgetIgnores,\n\tmergeWithFileConfig,\n\tgetOptionGroups,\n} from './lib/options-manager.js';\nimport {mergeReports, processReport, getIgnoredReport} from './lib/report.js';\n\nconst globFiles = async (patterns, options) => {\n\tconst {\n\t\toptions: {\n\t\t\tignores,\n\t\t\textensions,\n\t\t\tcwd,\n\t\t},\n\t} = await mergeWithFileConfig(options);\n\n\tpatterns = patterns.length === 0\n\t\t? [`**/*.{${extensions.join(',')}}`]\n\t\t: arrify(patterns).map(pattern => slash(pattern));\n\n\tconst files = await globby(\n\t\tpatterns,\n\t\t{\n\t\t\tignore: ignores, gitignore: true, absolute: true, cwd,\n\t\t},\n\t);\n\n\treturn files.filter(file => extensions.includes(path.extname(file).slice(1)));\n};\n\nconst getConfig = async options => {\n\tconst {filePath, eslintOptions} = await parseOptions(options);\n\tconst engine = new ESLint(eslintOptions);\n\treturn engine.calculateConfigForFile(filePath);\n};\n\nconst lintText = async (string, options) => {\n\tconst [[options_]] = Object.values(await getOptionGroups([options && options.filePath], options));\n\tconst {filePath, warnIgnored, eslintOptions, isQuiet} = options_;\n\tconst {cwd, baseConfig: {ignorePatterns}} = eslintOptions;\n\n\tif (typeof filePath !== 'string' && !isEqual(getIgnores({}), ignorePatterns)) {\n\t\tthrow new Error('The `ignores` option requires the `filePath` option to be defined.');\n\t}\n\n\tif (\n\t\tfilePath\n\t\t&& (\n\t\t\tmicromatch.isMatch(path.relative(cwd, filePath), ignorePatterns)\n\t\t\t|| isGitIgnoredSync({cwd})(filePath)\n\t\t)\n\t) {\n\t\treturn getIgnoredReport(filePath);\n\t}\n\n\tconst eslint = new ESLint(eslintOptions);\n\n\tif (filePath && await eslint.isPathIgnored(filePath)) {\n\t\treturn getIgnoredReport(filePath);\n\t}\n\n\tconst report = await eslint.lintText(string, {filePath, warnIgnored});\n\n\tconst rulesMeta = eslint.getRulesMetaForResults(report);\n\n\treturn processReport(report, {isQuiet, rulesMeta});\n};\n\nconst lintFiles = async (patterns, options) => {\n\tconst files = await globFiles(patterns, options);\n\n\tconst groups = await getOptionGroups(files, options);\n\n\tconst reports = await Promise.all(\n\t\tObject.values(groups)\n\t\t\t.map(async filesWithOptions => {\n\t\t\t\tconst options = filesWithOptions[0];\n\t\t\t\tconst eslint = new ESLint(options.eslintOptions);\n\t\t\t\tconst files = [];\n\n\t\t\t\tfor (const options of filesWithOptions) {\n\t\t\t\t\tconst {filePath, eslintOptions} = options;\n\t\t\t\t\tconst {cwd, baseConfig: {ignorePatterns}} = eslintOptions;\n\t\t\t\t\tif (\n\t\t\t\t\t\tmicromatch.isMatch(path.relative(cwd, filePath), ignorePatterns)\n\t\t\t\t\t\t// eslint-disable-next-line no-await-in-loop -- Not worth refactoring\n\t\t\t\t\t\t|| await eslint.isPathIgnored(filePath)\n\t\t\t\t\t) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tfiles.push(filePath);\n\t\t\t\t}\n\n\t\t\t\tconst report = await eslint.lintFiles(files);\n\n\t\t\t\tconst rulesMeta = eslint.getRulesMetaForResults(report);\n\n\t\t\t\treturn processReport(report, {isQuiet: options.isQuiet, rulesMeta});\n\t\t\t}));\n\n\tconst report = mergeReports(reports);\n\n\treturn report;\n};\n\nconst getFormatter = async name => {\n\tconst {format} = await new ESLint().loadFormatter(name);\n\treturn format;\n};\n\nconst xo = {\n\tgetFormatter,\n\tgetErrorResults: ESLint.getErrorResults,\n\toutputFixes: async ({results}) => ESLint.outputFixes(results),\n\tgetConfig,\n\tlintText,\n\tlintFiles,\n};\n\nexport default xo;\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.0908203125,
          "content": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.681640625,
          "content": "{\n\t\"name\": \"xo\",\n\t\"version\": \"0.60.0\",\n\t\"description\": \"JavaScript/TypeScript linter (ESLint wrapper) with great defaults\",\n\t\"license\": \"MIT\",\n\t\"repository\": \"xojs/xo\",\n\t\"funding\": \"https://github.com/sponsors/sindresorhus\",\n\t\"author\": {\n\t\t\"name\": \"Sindre Sorhus\",\n\t\t\"email\": \"sindresorhus@gmail.com\",\n\t\t\"url\": \"https://sindresorhus.com\"\n\t},\n\t\"type\": \"module\",\n\t\"bin\": \"./cli.js\",\n\t\"sideEffects\": false,\n\t\"engines\": {\n\t\t\"node\": \">=18.18\"\n\t},\n\t\"scripts\": {\n\t\t\"test:clean\": \"find ./test -type d -name 'node_modules' -prune -not -path ./test/fixtures/project/node_modules -exec rm -rf '{}' +\",\n\t\t\"test\": \"node cli.js && nyc ava\"\n\t},\n\t\"files\": [\n\t\t\"config\",\n\t\t\"lib\",\n\t\t\"*.js\"\n\t],\n\t\"keywords\": [\n\t\t\"cli-app\",\n\t\t\"cli\",\n\t\t\"xo\",\n\t\t\"xoxo\",\n\t\t\"happy\",\n\t\t\"happiness\",\n\t\t\"code\",\n\t\t\"quality\",\n\t\t\"style\",\n\t\t\"lint\",\n\t\t\"linter\",\n\t\t\"jshint\",\n\t\t\"jslint\",\n\t\t\"eslint\",\n\t\t\"validate\",\n\t\t\"code style\",\n\t\t\"standard\",\n\t\t\"strict\",\n\t\t\"check\",\n\t\t\"checker\",\n\t\t\"verify\",\n\t\t\"enforce\",\n\t\t\"hint\",\n\t\t\"simple\",\n\t\t\"javascript\",\n\t\t\"typescript\"\n\t],\n\t\"dependencies\": {\n\t\t\"@eslint/eslintrc\": \"^3.2.0\",\n\t\t\"@typescript-eslint/eslint-plugin\": \"^7.16.1\",\n\t\t\"@typescript-eslint/parser\": \"^7.16.1\",\n\t\t\"arrify\": \"^3.0.0\",\n\t\t\"cosmiconfig\": \"^9.0.0\",\n\t\t\"define-lazy-prop\": \"^3.0.0\",\n\t\t\"eslint\": \"^8.57.0\",\n\t\t\"eslint-config-prettier\": \"^9.1.0\",\n\t\t\"eslint-config-xo\": \"^0.45.0\",\n\t\t\"eslint-config-xo-typescript\": \"^5.0.0\",\n\t\t\"eslint-formatter-pretty\": \"^6.0.1\",\n\t\t\"eslint-import-resolver-webpack\": \"^0.13.9\",\n\t\t\"eslint-plugin-ava\": \"^14.0.0\",\n\t\t\"eslint-plugin-eslint-comments\": \"^3.2.0\",\n\t\t\"eslint-plugin-import\": \"^2.31.0\",\n\t\t\"eslint-plugin-n\": \"^17.14.0\",\n\t\t\"eslint-plugin-no-use-extend-native\": \"^0.5.0\",\n\t\t\"eslint-plugin-prettier\": \"^5.2.1\",\n\t\t\"eslint-plugin-promise\": \"^6.4.0\",\n\t\t\"eslint-plugin-unicorn\": \"^56.0.1\",\n\t\t\"esm-utils\": \"^4.3.0\",\n\t\t\"find-cache-dir\": \"^5.0.0\",\n\t\t\"find-up-simple\": \"^1.0.0\",\n\t\t\"get-stdin\": \"^9.0.0\",\n\t\t\"get-tsconfig\": \"^4.8.1\",\n\t\t\"globby\": \"^14.0.2\",\n\t\t\"imurmurhash\": \"^0.1.4\",\n\t\t\"json-stable-stringify-without-jsonify\": \"^1.0.1\",\n\t\t\"lodash-es\": \"^4.17.21\",\n\t\t\"meow\": \"^13.2.0\",\n\t\t\"micromatch\": \"^4.0.8\",\n\t\t\"open-editor\": \"^5.0.0\",\n\t\t\"prettier\": \"^3.4.2\",\n\t\t\"semver\": \"^7.6.3\",\n\t\t\"slash\": \"^5.1.0\",\n\t\t\"to-absolute-glob\": \"^3.0.0\",\n\t\t\"typescript\": \"^5.7.2\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^6.2.0\",\n\t\t\"eslint-config-xo-react\": \"^0.27.0\",\n\t\t\"eslint-plugin-react\": \"^7.37.2\",\n\t\t\"eslint-plugin-react-hooks\": \"^5.1.0\",\n\t\t\"execa\": \"^9.5.1\",\n\t\t\"nyc\": \"^17.1.0\",\n\t\t\"proxyquire\": \"^2.1.3\",\n\t\t\"temp-write\": \"^6.0.0\",\n\t\t\"webpack\": \"^5.97.1\"\n\t},\n\t\"xo\": {\n\t\t\"ignores\": [\n\t\t\t\"test/fixtures\",\n\t\t\t\"test/temp\",\n\t\t\t\"coverage\"\n\t\t]\n\t},\n\t\"ava\": {\n\t\t\"files\": [\n\t\t\t\"!test/temp\"\n\t\t],\n\t\t\"timeout\": \"1m\",\n\t\t\"workerThreads\": false\n\t},\n\t\"nyc\": {\n\t\t\"reporter\": [\n\t\t\t\"text\",\n\t\t\t\"lcov\"\n\t\t]\n\t}\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 18.9638671875,
          "content": "<h1 align=\"center\">\n\t<br>\n\t<img width=\"400\" src=\"media/logo.svg\" alt=\"XO\">\n\t<br>\n\t<br>\n\t<br>\n</h1>\n\n> JavaScript/TypeScript linter (ESLint wrapper) with great defaults\n\n[![Coverage Status](https://codecov.io/gh/xojs/xo/branch/main/graph/badge.svg)](https://codecov.io/gh/xojs/xo/branch/main)\n[![XO code style](https://shields.io/badge/code_style-5ed9c7?logo=xo&labelColor=gray&logoSize=auto&logoWidth=20)](https://github.com/xojs/xo)\n\nOpinionated but configurable ESLint wrapper with lots of goodies included. Enforces strict and readable code. Never discuss code style on a pull request again! No decision-making. No `.eslintrc` to manage. It just works!\n\nIt uses [ESLint](https://eslint.org) underneath, so issues regarding built-in rules should be opened over [there](https://github.com/eslint/eslint/issues).\n\n**XO requires your project to be [ESM](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c).**\n\n![](https://raw.githubusercontent.com/sindresorhus/eslint-formatter-pretty/main/screenshot.png)\n\n## Highlights\n\n- Beautiful output.\n- Zero-config, but [configurable when needed](#config).\n- Enforces readable code, because you read more code than you write.\n- No need to specify file paths to lint as it lints all JS/TS files except for [commonly ignored paths](#ignores).\n- [Config overrides per files/globs.](#config-overrides)\n- [TypeScript supported by default.](#typescript)\n- Includes many useful ESLint plugins, like [`unicorn`](https://github.com/sindresorhus/eslint-plugin-unicorn), [`import`](https://github.com/benmosher/eslint-plugin-import), [`ava`](https://github.com/avajs/eslint-plugin-ava), [`n`](https://github.com/eslint-community/eslint-plugin-n) and more.\n- Automatically enables rules based on the [`engines`](https://docs.npmjs.com/files/package.json#engines) field in your `package.json`.\n- Caches results between runs for much better performance.\n- Super simple to add XO to a project with [`$ npm init xo`](https://github.com/xojs/create-xo).\n- Fix many issues automagically with `$ xo --fix`.\n- Open all files with errors at the correct line in your editor with `$ xo --open`.\n- Specify [indent](#space) and [semicolon](#semicolon) preferences easily without messing with the rule config.\n- Optionally use the [Prettier](https://github.com/prettier/prettier) code style.\n- Great [editor plugins](#editor-plugins).\n\n## Install\n\n```sh\nnpm install xo --save-dev\n```\n\n*You must install XO locally. You can run it directly with `$ npx xo`.*\n\n*JSX is supported by default, but you'll need [eslint-config-xo-react](https://github.com/xojs/eslint-config-xo-react#use-with-xo) for React specific linting. Vue components are not supported by default. You'll need [eslint-config-xo-vue](https://github.com/ChocPanda/eslint-config-xo-vue#use-with-xo) for specific linting in a Vue app.*\n\n## Usage\n\n```\n$ xo --help\n\n  Usage\n    $ xo [<file|glob> ...]\n\n  Options\n    --fix             Automagically fix issues\n    --reporter        Reporter to use\n    --env             Environment preset  [Can be set multiple times]\n    --global          Global variable  [Can be set multiple times]\n    --ignore          Additional paths to ignore  [Can be set multiple times]\n    --space           Use space indent instead of tabs  [Default: 2]\n    --no-semicolon    Prevent use of semicolons\n    --prettier        Conform to Prettier code style\n    --node-version    Range of Node.js version to support\n    --plugin          Include third-party plugins  [Can be set multiple times]\n    --extend          Extend defaults with a custom config  [Can be set multiple times]\n    --open            Open files with issues in your editor\n    --quiet           Show only errors and no warnings\n    --extension       Additional extension to lint [Can be set multiple times]\n    --cwd=<dir>       Working directory for files\n    --stdin           Validate/fix code from stdin\n    --stdin-filename  Specify a filename for the --stdin option\n    --print-config    Print the ESLint configuration for the given file\n\n  Examples\n    $ xo\n    $ xo index.js\n    $ xo *.js !foo.js\n    $ xo --space\n    $ xo --env=node --env=mocha\n    $ xo --plugin=react\n    $ xo --plugin=html --extension=html\n    $ echo 'const x=true' | xo --stdin --fix\n    $ xo --print-config=index.js\n\n  Tips\n    - Add XO to your project with `npm init xo`.\n    - Put options in package.json instead of using flags so other tools can read it.\n```\n\n## Default code style\n\n*Any of these can be [overridden](#rules) if necessary.*\n\n- Tab indentation *[(or space)](#space)*\n- Semicolons *[(or not)](#semicolon)*\n- Single-quotes\n- [Trailing comma](https://medium.com/@nikgraf/why-you-should-enforce-dangling-commas-for-multiline-statements-d034c98e36f8) for multiline statements\n- No unused variables\n- Space after keyword `if (condition) {}`\n- Always `===` instead of `==`\n\nCheck out an [example](index.js) and the [ESLint rules](https://github.com/xojs/eslint-config-xo/blob/main/index.js).\n\n## Workflow\n\nThe recommended workflow is to add XO locally to your project and run it with the tests.\n\nSimply run `$ npm init xo` (with any options) to add XO to your package.json or create one.\n\n### Before/after\n\n```diff\n {\n \t\"name\": \"awesome-package\",\n \t\"scripts\": {\n-\t\t\"test\": \"ava\",\n+\t\t\"test\": \"xo && ava\"\n \t},\n \t\"devDependencies\": {\n-\t\t\"ava\": \"^3.0.0\"\n+\t\t\"ava\": \"^3.0.0\",\n+\t\t\"xo\": \"^0.41.0\"\n \t}\n }\n```\n\nThen just run `$ npm test` and XO will be run before your tests.\n\n## Config\n\nYou can configure XO options with one of the following files:\n\n1. As JSON in the `xo` property in `package.json`:\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"xo\": {\n\t\t\"space\": true\n\t}\n}\n```\n\n2. As JSON in `.xo-config` or `.xo-config.json`:\n\n```json\n{\n\t\"space\": true\n}\n```\n\n3. As a JavaScript module in `.xo-config.js` or `xo.config.js`:\n\n```js\nmodule.exports = {\n\tspace: true\n};\n```\n\n4. For [ECMAScript module (ESM)](https://nodejs.org/api/esm.html) packages with [`\"type\": \"module\"`](https://nodejs.org/api/packages.html#packages_type), as a JavaScript module in `.xo-config.cjs` or `xo.config.cjs`:\n\n```js\nmodule.exports = {\n\tspace: true\n};\n```\n\n[Globals](https://eslint.org/docs/user-guide/configuring/language-options#specifying-globals) and [rules](https://eslint.org/docs/user-guide/configuring/rules#configuring-rules) can be configured inline in files.\n\n### envs\n\nType: `string[]`\\\nDefault: `['es2021', 'node']`\n\nWhich [environments](https://eslint.org/docs/user-guide/configuring/language-options#specifying-environments) your code is designed to run in. Each environment brings with it a certain set of predefined global variables.\n\n### globals\n\nType: `string[]`\n\nAdditional global variables your code accesses during execution.\n\n### ignores\n\nType: `string[]`\n\nSome [paths](lib/options-manager.js) are ignored by default, including paths in `.gitignore` and [.eslintignore](https://eslint.org/docs/user-guide/configuring/ignoring-code#the-eslintignore-file). Additional ignores can be added here.\n\n### space\n\nType: `boolean | number`\\\nDefault: `false` *(tab indentation)*\n\nSet it to `true` to get 2-space indentation or specify the number of spaces.\n\nThis option exists for pragmatic reasons, but I would strongly recommend you read [\"Why tabs are superior\"](http://lea.verou.me/2012/01/why-tabs-are-clearly-superior/).\n\n### rules\n\nType: `object`\n\nOverride any of the [default rules](https://github.com/xojs/eslint-config-xo/blob/main/index.js). See the [ESLint docs](https://eslint.org/docs/rules/) for more info on each rule.\n\nDisable a rule in your XO config to turn it off globally in your project.\n\nExample using `package.json`:\n\n```json\n{\n\t\"xo\": {\n\t\t\"rules\": {\n\t\t\t\"unicorn/no-array-for-each\": \"off\"\n\t\t}\n\t}\n}\n```\n\nYou could also use `.xo-config.json` or one of the other config file formats supported by XO.\n\nPlease take a moment to consider if you really need to use this option.\n\n### semicolon\n\nType: `boolean`\\\nDefault: `true` *(Semicolons required)*\n\nSet it to `false` to enforce no-semicolon style.\n\n### prettier\n\nType: `boolean`\\\nDefault: `false`\n\nFormat code with [Prettier](https://github.com/prettier/prettier).\n\n[Prettier options](https://prettier.io/docs/en/options.html) will be based on your [Prettier config](https://prettier.io/docs/en/configuration.html). XO will then **merge** your options with its own defaults:\n- [semi](https://prettier.io/docs/en/options.html#semicolons): based on [semicolon](#semicolon) option\n- [useTabs](https://prettier.io/docs/en/options.html#tabs): based on [space](#space) option\n- [tabWidth](https://prettier.io/docs/en/options.html#tab-width): based on [space](#space) option\n- [trailingComma](https://prettier.io/docs/en/options.html#trailing-commas): `all`\n- [singleQuote](https://prettier.io/docs/en/options.html#quotes): `true`\n- [bracketSpacing](https://prettier.io/docs/en/options.html#bracket-spacing): `false`\n\nTo stick with Prettier's defaults, add this to your Prettier config:\n\n```js\nmodule.exports = {\n\ttrailingComma: 'es5',\n\tsingleQuote: false,\n\tbracketSpacing: true,\n};\n```\n\nIf contradicting options are set for both Prettier and XO, an error will be thrown.\n\n### nodeVersion\n\nType: `string | boolean`\\\nDefault: Value of the `engines.node` key in the project `package.json`\n\nEnable rules specific to the Node.js versions within the configured range.\n\nIf set to `false`, no rules specific to a Node.js version will be enabled.\n\n### plugins\n\nType: `string[]`\n\nInclude third-party [plugins](https://eslint.org/docs/user-guide/configuring/plugins#configuring-plugins).\n\n### extends\n\nType: `string | string[]`\n\nUse one or more [shareable configs](https://eslint.org/docs/developer-guide/shareable-configs) or [plugin configs](https://eslint.org/docs/user-guide/configuring/configuration-files#using-a-configuration-from-a-plugin) to override any of the default rules (like `rules` above).\n\n### extensions\n\nType: `string[]`\n\nAllow more extensions to be linted besides `.js`, `.jsx`, `.mjs`, and `.cjs` as well as their TypeScript equivalents `.ts`, `.tsx`, `.mts` and `.cts`. Make sure they're supported by ESLint or an ESLint plugin.\n\n### settings\n\nType: `object`\n\n[Shared ESLint settings](https://eslint.org/docs/user-guide/configuring/configuration-files#adding-shared-settings) exposed to rules.\n\n### parser\n\nType: `string`\n\nESLint parser. For example, [`@babel/eslint-parser`](https://github.com/babel/babel/tree/main/eslint/babel-eslint-parser) if you're using language features that ESLint doesn't yet support.\n\n### processor\n\nType: `string`\n\n[ESLint processor.](https://eslint.org/docs/user-guide/configuring/plugins#specifying-processor)\n\n### webpack\n\nType: `boolean | object`\nDefault: `false`\n\nUse [eslint-import-resolver-webpack](https://github.com/benmosher/eslint-plugin-import/tree/master/resolvers/webpack) to resolve import search paths. This is enabled automatically if a `webpack.config.js` file is found.\n\nSet this to a boolean to explicitly enable or disable the resolver.\n\nSetting this to an object enables the resolver and passes the object as configuration. See the [resolver readme](https://github.com/benmosher/eslint-plugin-import/blob/master/resolvers/webpack/README.md) along with the [webpack documentation](https://webpack.js.org/configuration/resolve/) for more information.\n\n## TypeScript\n\nXO will automatically lint TypeScript files (`.ts`, `.mts`, `.cts`, `.d.ts` and `.tsx`) with the rules defined in [eslint-config-xo-typescript#use-with-xo](https://github.com/xojs/eslint-config-xo-typescript#use-with-xo).\n\nXO will handle the [@typescript-eslint/parser `project` option](https://typescript-eslint.io/packages/parser/#project) automatically even if you don't have a `tsconfig.json` in your project.\n\n## GitHub Actions\n\nXO uses a different formatter when running in a GitHub Actions workflow to be able to get [inline annotations](https://developer.github.com/changes/2019-09-06-more-check-annotations-shown-in-files-changed-tab/). XO also disables warnings here.\n\n**Note**: For this to work, the [setup-node](https://github.com/actions/setup-node) action must be run before XO.\n\n## Config Overrides\n\nXO makes it easy to override configs for specific files. The `overrides` property must be an array of override objects. Each override object must contain a `files` property which is a glob string, or an array of glob strings, relative to the config file. The remaining properties are identical to those described above, and will override the settings of the base config. If multiple override configs match the same file, each matching override is applied in the order it appears in the array. This means the last override in the array takes precedence over earlier ones. Consider the following example:\n\n```json\n{\n\t\"xo\": {\n\t\t\"semicolon\": false,\n\t\t\"space\": 2,\n\t\t\"overrides\": [\n\t\t\t{\n\t\t\t\t\"files\": \"test/*.js\",\n\t\t\t\t\"space\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t \"files\": \"test/foo.js\",\n\t\t\t\t \"semicolon\": true\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n- The base configuration is simply `space: 2`, `semicolon: false`. These settings are used for every file unless otherwise noted below.\n\n- For every file in `test/*.js`, the base config is used, but `space` is overridden with `3`. The resulting config is:\n\n```json\n{\n\t\"semicolon\": false,\n\t\"space\": 3\n}\n```\n\n- For `test/foo.js`, the base config is first applied, followed the first overrides config (its glob pattern also matches `test/foo.js`), finally the second override config is applied. The resulting config is:\n\n```json\n{\n\t\"semicolon\": true,\n\t\"space\": 3\n}\n```\n\n## Tips\n\n### Using a parent's config\n\nIf you have a directory structure with nested `package.json` files and you want one of the child manifests to be skipped, you can do so by ommiting the `xo` property in the child's `package.json`. For example, when you have separate app and dev `package.json` files with `electron-builder`.\n\n### Monorepo\n\nPut a `package.json` with your config at the root and omit the `xo` property in the `package.json` of your bundled packages.\n\n### Transpilation\n\nIf some files in your project are transpiled in order to support an older Node.js version, you can use the [config overrides](#config-overrides) option to set a specific [`nodeVersion`](#nodeversion) to target your sources files.\n\nFor example, if your project targets Node.js 8 but you want to use the latest JavaScript syntax as supported in Node.js 12:\n1. Set the `engines.node` property of your `package.json` to `>=8`\n2. Configure [Babel](https://babeljs.io) to transpile your source files (in `source` directory in this example)\n3. Make sure to include the transpiled files in your published package with the [`files`](https://docs.npmjs.com/files/package.json#files) and [`main`](https://docs.npmjs.com/files/package.json#main) properties of your `package.json`\n4. Configure the XO `overrides` option to set `nodeVersion` to `>=12` for your source files directory\n\n```json\n{\n\t\"engines\": {\n\t\t\"node\": \">=12\"\n\t},\n\t\"scripts\": {\n\t\t\"build\": \"babel source --out-dir distribution\"\n\t},\n\t\"main\": \"distribution/index.js\",\n\t\"files\": [\n\t\t\"distribution/**/*.js\"\n\t],\n\t\"xo\": {\n\t\t\"overrides\": [\n\t\t\t{\n\t\t\t\t\"files\": \"source/**/*.js\",\n\t\t\t\t\"nodeVersion\": \">=16\"\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\nThis way your `package.json` will contain the actual minimum Node.js version supported by your published code, but XO will lint your source code as if it targets Node.js 16.\n\n### Including files ignored by default\n\nTo include files that XO [ignores by default](lib/constants.js#L1), add them as negative globs in the `ignores` option:\n\n```json\n{\n\t\"xo\": {\n\t\t\"ignores\": [\n\t\t\t\"!vendor/**\"\n\t\t]\n\t}\n}\n```\n\n## FAQ\n\n#### What does XO mean?\n\nIt means [hugs and kisses](https://en.wiktionary.org/wiki/xoxo).\n\n#### Why not Standard?\n\nThe [Standard style](https://standardjs.com) is a really cool idea. I too wish we could have one style to rule them all! But the reality is that the JS community is just too diverse and opinionated to create *one* code style. They also made the mistake of pushing their own style instead of the most popular one. In contrast, XO is more pragmatic and has no aspiration of being *the* style. My goal with XO is to make it simple to enforce consistent code style with close to no config. XO comes with my code style preference by default, as I mainly made it for myself, but everything is configurable.\n\n#### Why not ESLint?\n\nXO is based on ESLint. This project started out as just a shareable ESLint config, but it quickly grew out of that. I wanted something even simpler. Just typing `xo` and be done. No decision-making. No config. I also have some exciting future plans for it. However, you can still get most of the XO benefits while using ESLint directly with the [ESLint shareable config](https://github.com/xojs/eslint-config-xo).\n\n## Editor plugins\n\n- [Sublime Text](https://github.com/xojs/SublimeLinter-contrib-xo)\n- [Atom](https://github.com/xojs/atom-linter-xo)\n- [Vim](https://github.com/xojs/vim-xo)\n- [TextMate 2](https://github.com/claylo/XO.tmbundle)\n- [VSCode](https://github.com/SamVerschueren/vscode-linter-xo)\n- [Emacs](https://github.com/j-em/xo-emacs)\n- [WebStorm](https://github.com/jamestalmage/xo-with-webstorm)\n\n## Build-system plugins\n\n- [Gulp](https://github.com/xojs/gulp-xo)\n- [Grunt](https://github.com/xojs/grunt-xo)\n- [webpack loader](https://github.com/Semigradsky/xo-loader)\n- [webpack plugin](https://github.com/nstanard/xo-webpack-plugin)\n- [Metalsmith](https://github.com/blainsmith/metalsmith-xo)\n- [Fly](https://github.com/lukeed/fly-xo)\n\n## Configs\n\n- [eslint-config-xo](https://github.com/xojs/eslint-config-xo) - ESLint shareable config for XO with tab indent\n- [eslint-config-xo-space](https://github.com/xojs/eslint-config-xo-space) - ESLint shareable config for XO with 2-space indent\n- [eslint-config-xo-react](https://github.com/xojs/eslint-config-xo-react) - ESLint shareable config for React to be used with the above\n- [eslint-config-xo-vue](https://github.com/ChocPanda/eslint-config-xo-vue) - ESLint shareable config for Vue to be used with the above\n- [stylelint-config-xo](https://github.com/xojs/stylelint-config-xo) - Stylelint shareable config for XO with tab indent\n- [stylelint-config-xo-space](https://github.com/xojs/stylelint-config-xo-space) - Stylelint shareable config for XO with 2-space indent\n- [eslint-config-xo-typescript](https://github.com/xojs/eslint-config-xo-typescript) - ESLint shareable config for TypeScript\n\n## Support\n\n- [Twitter](https://twitter.com/sindresorhus)\n\n## Related\n\n- [eslint-plugin-unicorn](https://github.com/sindresorhus/eslint-plugin-unicorn) - Various awesome ESLint rules *(Bundled in XO)*\n- [xo-summary](https://github.com/LitoMore/xo-summary) - Display output from `xo` as a list of style errors, ordered by count\n\n## Badge\n\nShow the world you're using XO → [![XO code style](https://shields.io/badge/code_style-5ed9c7?logo=xo&labelColor=gray&logoSize=auto&logoWidth=20)](https://github.com/xojs/xo)\n\n```md\n[![XO code style](https://shields.io/badge/code_style-5ed9c7?logo=xo&labelColor=gray&logoSize=auto&logoWidth=20)](https://github.com/xojs/xo)\n```\n\nOr [customize the badge](https://github.com/xojs/xo/issues/689#issuecomment-1253127616).\n\nYou can also find some nice dynamic XO badges on [badgen.net](https://badgen.net/#xo).\n\n## Team\n\n- [Sindre Sorhus](https://github.com/sindresorhus)\n\n###### Former\n\n- [James Talmage](https://github.com/jamestalmage)\n- [Michael Mayer](https://github.com/schnittstabil)\n- [Mario Nebl](https://github.com/marionebl)\n- [Pierre Vanduynslager](https://github.com/pvdlg)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}