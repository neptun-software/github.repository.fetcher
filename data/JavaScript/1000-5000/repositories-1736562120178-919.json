{
  "metadata": {
    "timestamp": 1736562120178,
    "page": 919,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cronvel/terminal-kit",
      "stars": 3135,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintrc.js",
          "type": "blob",
          "size": 3.697265625,
          "content": "module.exports = {\n\t'root': true ,\n\t'env': {\n\t\t'browser': true ,\n\t\t'es6': true ,\n\t\t'node': true\n\t} ,\n\t'parserOptions': {\n\t\t'ecmaVersion': 2020\n\t} ,\n\t'extends': [ 'eslint:recommended' ] ,\n\t'rules': {\n\t\t\n\t\t/*\n\t\t\tBad code -- detect anything that can be broken or lead to bugs\n\t\t*/\n\t\t\n\t\t\n\t\t\n\t\t'strict': [ 'error' , 'global' ] ,\n\t\t'unicode-bom': [ 'error' , 'never' ] ,\n\t\t'radix': 'error' ,\n\t\t'eqeqeq': 'error' ,\n\t\t'consistent-return': 'off' ,\n\t\t'valid-typeof': 'error' ,\n\t\t'no-unneeded-ternary': 'error' ,\n\t\t'no-unused-vars': 'warn' ,\t// During development phase, it's boring to clean unused var since they can be used later\n\t\t'no-lonely-if': 'off' ,\t\t// Can hurt semantic programming\n\t\t'no-nested-ternary': 'off' ,\t// Now I use the streamlined ternary operator a lot\n\t\t'no-shadow': 'warn' ,\n\t\t'no-shadow-restricted-names': 'error' ,\n\t\t'require-atomic-updates': 'off' ,\t// check for possible race condition on assignment, interesting but too nitpicky\n\t\t\n\t\t\n\t\t\n\t\t/*\n\t\t\tCode preferences\n\t\t*/\n\t\t\n\t\t\n\t\t\n\t\t'prefer-arrow-callback': 'error' ,\n\t\t'prefer-spread': 'warn' ,\n\t\t'prefer-rest-params': 'warn' ,\n\t\t'no-control-regex': 'off' ,\t// because thing like \\x00 are considered like a control even if escaped...\n\t\t'no-fallthrough': 'off' ,\n\t\t'no-empty': [ 'error' , {\n\t\t\t'allowEmptyCatch': true\n\t\t} ] ,\n\t\t\n\t\t\n\t\t\n\t\t/*\n\t\t\tCoding styles -- cosmetic rules and opinionated preferences\n\t\t*/\n\t\t\n\t\t\n\t\t\n\t\t// Indent & spaces (general)\n\t\t'indent': [ 'error' , 'tab' , {\n\t\t\t'SwitchCase': 1 ,\n\t\t\t'MemberExpression': 1 ,\n\t\t\t'flatTernaryExpressions': true\n\t\t} ] ,\n\t\t'newline-per-chained-call': 'off',\n\t\t'no-multi-spaces': 'off' ,\n\t\t'block-spacing': 'error' ,\n\t\t'comma-spacing': [ 'error' , {\n\t\t\t'before': true ,\n\t\t\t'after': true\n\t\t} ] ,\n\t\t'no-whitespace-before-property': 'error' ,\n\t\t'space-before-blocks': 'error' ,\n\t\t'space-before-function-paren': [ 'error' , {\n\t\t\t'anonymous': 'never',\n\t\t\t'named': 'never',\n\t\t\t'asyncArrow': 'always'\n\t\t} ] ,\n\t\t'space-infix-ops': 'error' ,\n\t\t'space-unary-ops': [ 'error' , {\n\t\t\t'words': true ,\n\t\t\t'nonwords': true ,\n\t\t\t'overrides': {\n\t\t\t\t'-': false ,\n\t\t\t}\n\t\t} ] ,\n\t\t'space-in-parens': [ 'error' , 'always' , {\n\t\t\t'exceptions': [ 'empty' ]\n\t\t} ] ,\n\t\t'no-trailing-spaces': 'error' ,\n\t\t'switch-colon-spacing': [ 'error' , {\n\t\t\t'after': true ,\n\t\t\t'before': true\n\t\t} ] ,\n\t\t'arrow-spacing': 'error' ,\n\t\t'rest-spread-spacing': [ 'error' , 'always' ] ,\n\t\t/* Troublesome with commented line of code\n\t\t'spaced-comment': [ 'error' , 'always' , {\n\t\t\t'line': {\n\t\t\t\t'markers': [ '/' ],\n\t\t\t\t'exceptions': [ '-', '*', '/' ]\n\t\t\t} ,\n\t\t\t'block': {\n\t\t\t\t'exceptions': [ '*' ] ,\n\t\t\t\t'balanced': true\n\t\t\t}\n\t\t} ] ,\n\t\t*/\n\t\t\n\t\t\n\t\t// Semi-colon\n\t\t'semi': [ 'error' , 'always' ] ,\n\t\t'semi-style': [ 'error' , 'last' ] ,\n\t\t'semi-spacing': [ 'error' , {\n\t\t\t'before': true ,\n\t\t\t'after': true\n\t\t} ] ,\n\n\t\t// Objects\n\t\t'key-spacing': [ 'error' , {\n\t\t\t'beforeColon': false ,\n\t\t\t'afterColon': true ,\n\t\t\t'mode': 'strict'\n\t\t} ] ,\n\t\t'object-curly-newline': [ 'error' , {\n\t\t\t'ObjectExpression' : {\n\t\t\t\t'consistent': true ,\n\t\t\t\t'minProperties': 4\n\t\t\t} ,\n\t\t\t'ObjectPattern' : {\n\t\t\t\t// object destructuring assigment\n\t\t\t\t'consistent': true ,\n\t\t\t\t'minProperties': 8\n\t\t\t}\n\t\t} ] ,\n\t\t'object-curly-spacing': [ 'error' , 'always' ] ,\n\t\t'object-property-newline': [ 'error' , { 'allowMultiplePropertiesPerLine': true } ] ,\n\n\t\t\n\t\t// Arrays\n\t\t'array-bracket-newline': [ 'error' , 'consistent' ] ,\n\t\t//'array-element-newline': [ 'error' , { 'multiline': true , 'minItems': 5 } ] ,\n\t\t'array-bracket-spacing': [ 'error' , 'always' ],\n\t\t\n\t\t'brace-style': [ 'error' , 'stroustrup' , {\n\t\t\t'allowSingleLine': true\n\t\t} ] ,\n\t\t\n\t\t\n\t\t// Misc style\n\t\t'no-else-return': 'warn' ,\n\t\t'comma-dangle': [ 'error' , 'never' ] ,\n\t\t'quotes': 'off' ,\n\t\t'camelcase': 'warn' ,\n\t\t\n\t\t\n\t\t\n\t\t/*\n\t\t\tMethod limitation\n\t\t*/\n\t\t\n\t\t\n\t\t\n\t\t'no-console': 'off'\n\t}\n} ;\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5087890625,
          "content": "# Specific #\n############\n\n*.local.*\n*.local\n*.log\n*.html.gz\n*.css.gz\n*.js.gz\n.spellcast\nbuild\nlog\n_build\n_templates\n_static\nemoji-width.map.json\nemoji-width.ranges.json\n\n# gitignore / Node.gitignore #\n##############################\nlib-cov\nlcov.info\nnpm-debug.log.*\n*.seed\n*.log\n*.csv\n*.dat\n*.out\n*.pid\n*.gz\n\npids\nlogs\nresults\nbuild\n.grunt\n__issue.js\n__issues\npackage-lock.json\n\nnode_modules\n\n\n# OS generated files #\n######################\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nIcon?\nehthumbs.db\nThumbs.db\n\n\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.6123046875,
          "content": "# +++ .gitignore\n# Specific #\n############\n\n*.local.*\n*.local\n*.log\n*.html.gz\n*.css.gz\n*.js.gz\n.spellcast\nbuild\nlog\n_build\n_templates\n_static\nemoji-width.map.json\nemoji-width.ranges.json\n\n# gitignore / Node.gitignore #\n##############################\nlib-cov\nlcov.info\nnpm-debug.log.*\n*.seed\n*.log\n*.csv\n*.dat\n*.out\n*.pid\n*.gz\n\npids\nlogs\nresults\nbuild\n.grunt\n__issue.js\n__issues\npackage-lock.json\n\nnode_modules\n\n\n# OS generated files #\n######################\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nIcon?\nehthumbs.db\nThumbs.db\n\n\n\n# --- .gitignore\n\ntest/\ndoc/\next-doc/\nlog/\nsample/\nbuilder/\ndemo/\n/utilities/\n\nwfm.json\n"
        },
        {
          "name": ".replit",
          "type": "blob",
          "size": 0.146484375,
          "content": "language = \"nodejs\"\nrun = \"npm install && mkdir sample/node_modules && ln -s ../../ sample/node_modules/terminal-kit && cd demo && node spaceship.js\"\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 59.2900390625,
          "content": "\nv3.1.1\n------\n\nMore paths added to .npmignore\n\n\nv3.1.0\n------\n\nPublishing the new Document widget: Inspector\n\n\nv3.0.2\n------\n\nNew Document's Element API: .destroyNoRedraw()\nColumnMenu (and BaseMenu): improved key navigation\nDependencies upgraded\n\n\nv3.0.1\n------\n\nPiping to a file should provide a virtually infinite width and height (should partly fix #240)\n\n\nv3.0.0\n------\n\nBREAKING: requires at least Node v16.13\nEditableTextBox now has a 'debounceTimeout' parameter (defaulting to 100ms), avoiding redrawing too much (and recomputing color hilighting) when the user slam the keyboard\n\n\nv2.11.7\n-------\n\nFix TextBuffer#moveTo() not respecting 'forceInBound' property\n\n\nv2.11.6\n-------\n\nAdd missing API method: TextBox#setTabWidth()\n\n\nv2.11.5\n-------\n\nElement: get key binding/action binding\n\n\nv2.11.4\n-------\n\nTextBuffer fixes, and .removeTrailingSpaces()\n\n\nv2.11.3\n-------\n\nNew (missing) method: EditableTextBox#setStateMachine()\n\n\nv2.11.2\n-------\n\nElement#redraw() is DEPRECATED, replaced by Element#outerDraw() (more meaningful name)\nfix some drawing issue\nEditableTextBox has new property: this.autoCompleteHintMinInput \n\n\nv2.11.1\n-------\n\nTextBuffer: Support for regexp with .regexpFindNext()\n\n\nv2.11.0\n-------\n\nNew (pseudo) widget: Border, add border (with or without shadow) to any other widgets, just by setting the 'parent' parameter\n\n\nv2.10.6\n-------\n\nFix InlineInput and InlineFileInput completion's hint\n\n\nv2.10.5\n-------\n\nEditableTextBox now supports 'smartStartOfLine' action (aka smarthome)\n\n\nv2.10.4\n-------\n\nFix EditableTextBox scrolling redraw issues\n\n\nv2.10.3\n-------\n\nFix TextBuffer#offsetToCoordinate() bug when the offset is just after a filler char\n\n\nv2.10.2\n-------\n\nTextBuffer#updateCursorFromCell() now return true if successful\nBetter META names\n\n\nv2.10.1\n-------\n\nTextBuffer: selection highlighting is now done at blitter time (more flexible, less bugs)\n\n\nv2.10.0\n-------\n\nNew: InlineMenu\n\n\nv2.9.8\n------\n\nTextBuffer: .findNext() and .findPrevious()\n\n\nv2.9.7\n------\n\nFix broken DropDownMenu keyboard navigation\n\n\nv2.9.6\n------\n\nEditableTextBox: dragEnd behavior improved/fixed\ndelete/backDelete on selection boundary improved/fixed (delete the whole selection)\n\n\nv2.9.5\n------\n\nTextBuffer/EditableTextBox/TextBox: lot of copy/paste from/to selection/documentClipboard/systemClipboard improvements and fixes\n\n\nv2.9.4\n------\n\nDocument widgets: fix focus and .hasFocus property, fix drag event handling (no more sending drag event outside the drag source element, except for widgets having outerDrag turned on) and bugs\nTextBuffer: fix region/selectionRegion\nTextBox/EditableTextBox fix mouse and keyboard selection bugs\n\n\nv2.9.3\n------\n\nTextBuffer: fix a lot of selection issue when editing\n\n\nv2.9.2\n------\n\nTextBuffer fix various bugs with selection+edition\nEditableTextBox: fix selection+edition\ncore: add missing keys Ctrl-arrows and Ctrl-Shift-arrows\n\n\nv2.9.1\n------\n\nFix .insert()/.inlineInsert() char count reporting\n\n\nv2.9.0\n------\n\nTextBuffer: new .deleteSelection()/.deleteRegion()\nEditableTextBox: supports for deleteSelection and extendSelection* actions\n\n\nv2.8.12\n-------\n\nNew: TextBuffer#deleteLine()\nEditableTextBox now support deleteLine action\n\n\nv2.8.11\n-------\n\nVarious bugfixes\nDocument's widget emitting a 'submit' event have a fourth argument: the original widget that triggered the submit (usually a Button)\nnew ColumnMenuMixed widget\nFix ToggleButton and ColumnMenuMulti constructor's params: blurLeftPadding/focusLeftPadding/etc now set default values for turned\nOn/turnedOff*Padding\nDropDownMenu now fully works with togglable entries\n\n\nv2.8.10\n-------\n\nButton/ToggleButton: fix content variation depending on things like focus/blur/turned on/turned off/etc...\n\n\nv2.8.9\n------\n\nEditableTextBox: support for newline auto-indent hook\n\n\nv2.8.8\n------\n\nFix TextBuffer's .delete() and .backDelete() bugs when count > 1 and there are filler chars\n\n\nv2.8.7\n------\n\nNew Meta key behaviour fixed/refined\n\n\nv2.8.6\n------\n\nFix bug introduced in 2.6.0 (drawing bug on EditableTextBox creation, happens too soon)\n\n\nv2.8.5\n------\n\nFix LabeledInput init troubles\nDocument widget -- key bindings / .onKey() refacto: everything is inherted now and user actions are inside Element#userAction name => method\nNow inheriting Widget from another must be done with Element.inherit()\n\n\nv2.8.4\n------\n\nImprove Meta Key behaviour\n\n\nv2.8.3\n------\n\nEditableTextBox: Fix bug introduced in 2.8.x that prevented content passed to the constructor to be set\nAdd methods term.setMetaKeyPrefix() and Document#setMetaKeyPrefix() to handle meta key combo, use it on various widget (NOT DOCUMENTED ATM)\nAdd methods Document#getCopyBuffer()/.setCopyBuffer() and differentiate between OS clipboard and internal application clipboard (NOT DOCUMENTED ATM)\nAdd startOfSelection/endOfSelection to widgets/TextBuffer (NOT DOCUMENTED ATM)\n\n\nv2.8.2\n------\n\nFix debug issue\n\n\nv2.8.1\n------\n\nDocument widgets: fix issues when destroying widgets, and issues with event listener + inheritance\n\n\nv2.8.0\n------\n\nNew Document widget - InlineFileInput: an InlineInput that autocomplete for files and/or directories, accepting or not unexisting files, etc...\n\n\nv2.7.0\n------\n\nMINOR: now all document widgets that support copy and paste will use Ctrl-Y (by default) for copy instead of Ctrl-O (vi/vim use 'y' for copying, aka 'yank'), it still use Ctrl-P for paste (vi/vim use 'p' for paste, aka 'put')\n\n\nv2.6.0\n------\n\nPrepare for third-party text-editor\n\n\nv2.5.1\n------\n\nString-kit unicode width improvements\n\n\nv2.5.0\n------\n\nDependencies upgraded: greatly improving emoji full-width detection (#193)\n\n\nv2.4.0\n------\n\nNew: Android Termux detection and support\n\n\nv2.3.0\n------\n\nTextBuffer now supports wide characters (aka full-width char), so does class depending on it like TextTable (#193)\n\n\nv2.2.4\n------\n\nFix .contentWidth/.contentHeight bug in TextTable, creating new (private props) .rawContentWidth/.rawContentHeight to store the content size before shrinking/expanding (#189)\n\n\nv2.2.3\n------\n\nImprove the new 'complex' markup support, and fix related bugs\n\n\nv2.2.2\n------\n\nMarkup doc updated\n\n\nv2.2.1\n------\n\nSupport for ^[#<color>] markup in inline term()\n\n\nv2.2.0\n------\n\nRefacto: Using new string-kit's markup parser\n\n\nv2.1.8\n------\n\nFix a possible ReDoS\n\n\nv2.1.7\n------\n\nFix inline table behavior (#186)\n\n\nv2.1.6\n------\n\nFix a circular require error (#181)\n\n\nv2.1.5\n------\n\nFix no lazy require mode\n\n\nv2.1.4\n------\n\nAdd a browser build (#176)\n\n\nv2.1.3\n------\n\nNew: use require('terminal-kit/lib/termkit-no-lazy-require.js') if lazy loading is troublesome (#176)\n\n\nv2.1.2\n------\n\nFix TextTable 'autoWidth' bug (#177)\n\n\nv2.1.1\n------\n\nTextTable fix: when providing a custom 'borderChars', check that all character types exists (#173)\n\n\nv2.1.0\n------\n\nNew TextTable methods: .setCellAttr() and variations (methods named: set/reset + Cell/Row/Column/Table + Attr()) allowing to modify text attribute of cells (a first step for #166)\n\n\nv2.0.7\n------\n\nsample/detect-terminal-test.js now returns the lib version\n\n\nv2.0.6\n------\n\nFix BACKSPACE key on OSX\n\n\nv2.0.5\n------\n\nDependencies\n\n\nv2.0.4\n------\n\nBar widget: fix rate calculation bug when minValue and maxValue is used (#159)\n\n\nv2.0.3\n------\n\nFix 'legacyAnsi' markup option for document's widgets (#155)\n\n\nv2.0.2\n------\n\nSubmenus now propagate 'itemFocus' events to the main ColumnMenu (fix bug #151)\n\n\nv2.0.1\n------\n\nFix some niche ansi markup issues, adding a 'legacyAnsi' markup option for document's widgets (#155)\n\n\nv2.0.0\n------\n\nBREAKING: Node >= 14.15.0 (Fermium LTS) required (#156)\n\n\nv1.49.3\n-------\n\nRevert engine changes introduced in v1.49.0 (#156) (will re-introduce it as of v2.0.0)\n\n\nv1.49.2\n-------\n\nFix a .destroy() bug on ColumnMenu's submenu (#151)\n\n\nv1.49.1\n-------\n\nFix wrong keybinding for ColumnMenu's submenu (#151)\n\n\nv1.49.0\n-------\n\nNow Node.js v14 is required\nColumnMenu now supports submenu (still beta) (#151)\n\n\nv1.48.1\n-------\n\nScreenBuffer#put() now supports 'ansi' for the 'markup' option (#153)\nImproved the TextBuffer's doc\n\n\nv1.48.0\n-------\n\nNew method: BaseMenu#setItem() (#150)\n\n\nv1.47.2\n-------\n\nAdd the Element#show() and Element#hide() methods, fixing the missing API (#151)\n\n\nv1.47.1\n-------\n\nFix #147 (ANSI parser bug)\n\n\nv1.47.0\n-------\n\nDocument model: better handling of middle and right click, and now Button are sensible to all 3 clicks\n\n\nv1.46.1\n-------\n\nNew: DropDownMenu#setDropDownItem()\n\n\nv1.46.0\n-------\n\nDocument model: new 'blinked' event emitted by Button, re-emitted by all *Menu* widget\nDropDownMenu now have the option 'clearColumnMenuOnSubmit' (boolean) that clear the drop down column menu on submit (on 'submit' then and once 'blinked')\n\n\nv1.45.9\n-------\n\nButton: submitOnce option\n\n\nv1.45.8\n-------\n\nButton: fixed more .setContent() bugs\n\n\nv1.45.7\n-------\n\nButton: fixed some .setContent() bugs\n\n\nv1.45.6\n-------\n\nButton: fixed some .setContent() bugs\n\n\nv1.45.6\n-------\n\nButton: fixed some .setContent() bugs\n\n\nv1.45.5\n-------\n\nFix Linux Console default BG color\n\n\nv1.45.4\n-------\n\nMarkup: add special reset that also reset forced attr (document-model) (#144)\n\n\nv1.45.3\n-------\n\nAdd 'kitty' termconfig (dummy, fully based upon xterm 256/true color config) (#139)\n\n\nv1.45.2\n-------\n\nFollowing v1.45.1, adding 'itemToggle' event on the ColumnMenuMulti and derivated class\n\n\nv1.45.1\n-------\n\nAdd the 'itemFocus' event on the BaseMenu superclass (#143)\n\n\nv1.45.0\n-------\n\nFix keyboard navigation with Form having SelectList and SelectListMulti (#142), and some 'focus' event issues\n\n\nv1.44.3\n-------\n\nFix a memory leak in the Document model (#138)\n\n\nv1.44.2\n-------\n\nFix a memory leak in the Document model (#138)\n\n\nv1.44.1\n-------\n\nMitigate leak issue with term.table() (#138)\n\n\nv1.44.0\n-------\n\nBetter OSX support (see #126 and #127)\n\n\nv1.43.0\n-------\n\nNew method TextTable#setCellContent() (#123)\nFix Text#setContent()\nFix a LabeledInput's label highlight bug on direct click focus\n\n\nv1.42.0\n-------\n\nDependencies upgraded (get-pixels and underlying jpeg-js, pngjs and other lib)\nUpgrade forces Node v8 drop, now supports Node >= v10\n\n\nv1.41.0\n-------\n\nContainer now supports scrolling, and so does Window.\n\n\nv1.40.0\n-------\n\nFix a bad ScreenBuffer#put() behavior when trying to write out of the buffer without wrap:true\nContainer now supports a 'movable' option that makes them movable by mouse-drag\nNew Window widget with title, border, movable by default, that will serve as a base to iterate upon (planned feature: resizing, minimizing, docking, closing, scrolling)\n\n\nv1.39.0\n-------\n\nNew TextBox methods: .scrollToTop(), .scrollToBottom() and .appendLog() (see the doc), and minor draw fix\n\n\nv1.38.0\n-------\n\nNew: Bar widget, featuring text-over-bar, suitable as a component for a future progress-bar widget\nFixing SelectList master-button enlargement bug\n\n\nv1.37.0\n-------\n\nNew: AnimatedText widget, used for the new .spinner() (#98)\nLot of inline mode fixes for document-model widget\nDocumentation on .spinner(), .table() and TextTable (#109), built-in box/border/frame and animation/spinner\n\n\nv1.36.0\n-------\n\nColumnMenu height bugfixes, autoWidth/Height support, and 'parentResize' event support (issue #120)\n\n\nv1.35.13\n--------\n\nDocument model -- ColumnMenu: fix a redraw bug introduced in v1.35.0 (issue #120)\n\n\nv1.35.12\n--------\n\nDocumentation\n\n\nv1.35.11\n--------\n\nDocument model: new option 'autoWidth' and 'autoHeight' to adjust width/height to the parent Container size\nTextBox inside a Layout/Container auto-adjust itself on Container resizing (#119)\nFix Text/Button display error when on the last column of a Container\n\n\nv1.35.10\n--------\n\nTextBuffer now supports content containing ANSI code, and so does TextBox (#119)\n\n\nv1.35.9\n-------\n\nFix a nasty bug/regression introduced in v1.35.8 (TextBuffer)\n\n\nv1.35.8\n-------\n\nTextBuffer now supports .append() and .prepend()\nTextBox now supports .appendContent() and .prependContent()\n\n\nv1.35.7\n-------\n\n.inputField(): Fixing (again) issues related to full-width char (#117)\n\n\nv1.35.6\n-------\n\nAdd debug facilities for issue #116, and a maybe-fix\n\n\nv1.35.5\n-------\n\n.inputField(), .progressBar() and all .*Menu() fallback to the last line position when requesting cursor location is not possible on the terminal (mainly a Windows problem) (#74)\n\n\nv1.35.4\n-------\n\nFix backDelete behavior when the previous char is a full-width char (#117)\n\n\nv1.35.3\n-------\n\nAdd 'cli' to the package keywords\n\n\nv1.35.2\n-------\n\nFix the 'strictInline' mode clipping issue for widget with a height greater than the terminal height (#111)\n\n\nv1.35.1\n-------\n\nMany Document-model fix, including not altering user passed options\n\n\nv1.35.0\n-------\n\nNew document-model widget: InlineInput, it's like .inputField() and implements almost every features of it, and will supersede it once its inline-mode is ready\nTextBuffer: fix some cursor position issue with line-wrapping\nRowMenu now supports pagination\nTextBuffer now supports voidTextBuffer (a kind of 'ghost' textBuffer companion, used to implement hint and placeholder in InlineInput)\n\n\nv1.34.5\n-------\n\nTransmit lineWrap/wordWrap options from LabeledInput and Form to EditableTextBox\n\n\nv1.34.4\n-------\n\nTextBuffer now supports auto-wrapping\n\n\nv1.34.3\n-------\n\nTextBuffer now supports both word-wrapping and 'hard' line-wrapping\nword-wrapping options are now spelled 'wordWrap' everywhere in Terminal Kit, old 'wordwrap' spelling is DEPRECATED but kept for backward compatibility\n\n\nv1.34.2\n-------\n\n.inputField() now supports CTRL_R auto-completion, using history as its source instead of options.autoComplete\n\n\nv1.34.1\n-------\n\nTextTable fixed when hasBorder:false, plus a whole bunch of new options to set attributes of columns, rows, cells, borders... as well as markup support (#109)\n\n\nv1.34.0\n-------\n\nNew: document model TextTable\nNew: term.table() (using TextTable in inline mode)\nNew: ScreenBuffer* now support inline terminal rendering (i.e.: no moveTo operation, just newlines)\nNew: Document model now supports “strict” inline mode (no grabInput, no asyncness, but only for static and one-time-renderable elements, like TextTable)\n\n\nv1.33.15\n--------\n\nDependency\n\n\nv1.33.14\n--------\n\nFix the SelectMenuMulti behavior, submitting on 'clickOut'\n\n\nv1.33.13\n--------\n\nFix a scrolling bug in EditableTextBox\n\n\nv1.33.12\n--------\n\nSome word-wrapping bugs fixed for TextBuffer\nhorizontal Slider supported\nTextBox supports horizontal scroll bar now\n\n\nv1.33.11\n--------\n\nWord-wrapping support for TextBuffer and TextBox\nImproved scrolling on Slider, TextBox and EditableTextBox, as well as more navigation keys and tiny draw-code performances bugs fixed\n\n\nv1.33.10\n--------\n\nMinor improvement on Slider (fix micro bug of the cursor hanging at the bottom and one cell right off of the slider)\n\n\nv1.33.9\n-------\n\nDocument model: Fix some scrollbar/slider bug, allow Form/LabelledInput to have scrollbar\n\n\nv1.33.8\n-------\n\nNew: Document model has now a Slider widget (only vertical support ATM)\nNow TextBox and EditableTextBox can have a vertical scrollbar using the new Slider widget\n\n\nv1.33.7\n-------\n\nFix scrollable for TextBox, it can now get focus for listening key events (page up/down)\nAll *Menu* are now sensible to mouse wheel\n\n\nv1.33.6\n-------\n\nForm/LabeledInput: fix the scrollable option\n\n\nv1.33.5\n-------\n\nForm/LabeledInput: add the scrollable option\n\n\nv1.33.4\n-------\n\nDocument model: improved mouse event\nTextBox and EditableTextBox scrolling is greatly improved (auto scroll when needed, scroll move cursor, mouse wheel support)\n\n\nv1.33.3\n-------\n\nFix Document model drag event\nbasic support for scrollable TextBox\n\n\nv1.33.2\n-------\n\nColumnMenu* support next/previous/first/last page key bindings\n\n\nv1.33.1\n-------\n\nEditableTextBox supports cursor moves on click, and supports middle-click that paste the so-called 'primary' clipboard\nLabeledInput support clipboard operation\n\n\nv1.33.0\n-------\n\nNew: clipboard API\nMouse event: new event subtype MOUSE_DRAG\nTextBuffer support selection with hilight (inverse foreground and background)\nTextBox are selectable and copy to primary clipboard on doing so while CTRL_O copy current selection to cut clipboard\nEditableTextBox: CTRL_P paste from cut clipboard\n\n\nv1.32.3\n-------\n\n.singleLineMenu() now supports option 'align' (=right|center|left) and 'fillIn' (boolean) (inspired by PR #105)\n\n\nv1.32.2\n-------\n\nDependencies\n\n\nv1.32.0 - v1.32.1\n-----------------\n\nString-kit dependency upgraded: better formatting options!\n\n\nv1.31.7 - v1.31.10\n------------------\n\nDependencies (string-kit format improvements)\n\n\nv1.31.6\n-------\n\nSupport for new line in ScreenBuffer#put() need the opt-in option 'newLine' set to true, fixing v1.31.5 non-backward compatible behavior change (#103)\n\n\nv1.31.5\n-------\n\nLimited support for newline in ScreenBuffer#put(), replace other control chars by a space (#103)\n\n\nv1.31.4\n-------\n\nAdd the x,y option to .progressBar() (may somewhat solve #99)\n\n\nv1.31.3\n-------\n\nDependencies\n\n\nv1.31.2\n-------\n\nReject bad RegExp for .inputField's tokenRegExp option: throw if the RegExp doesn't have the 'g' flag (fix #97)\n\n\nv1.31.1\n-------\n\nFix gnome color reporting\n\n\nv1.31.0\n-------\n\nNew: ScreenBuffer#fill() now supports a 'region' option, when specified only that region will be filled\n\n\nv1.30.0\n-------\n\nFinally ScreenBuffer* support fullwidth char\nWARNING: ScreenBufferHD breaking changes (beta API - not under SemVer)\n\t* Support for *defaultColor is dropped because it is not compatible with alpha channel and blending\n\t* attributes changed: now color channels are inside 'color', and bgColor is consistent, allowing to pass similar (standard) color object\n\t\t to both the foreground and background (see the doc)\n\n\nv1.29.3\n-------\n\nEmergency bugfix (#95)\n\n\nv1.29.2\n-------\n\nFix a TextBuffer bug in .setText() when markup is on\n\n\nv1.29.1\n-------\n\nPalette now has a 256-colors fallback\nANSI colors are available in complex markup\n\n\nv1.29.0\n-------\n\nNew: 24 bits Palette for the ScreenBuffer, complex markup for using new colorscheme/color name of the Palette\nLot of bug related to markup fixed (width, wordwrap, ...)\n\n\nv1.28.42\n--------\n\nFixed markup's parameters pollution (markup + TextBuffer)\n\n\nv1.28.41\n--------\n\nAdd some 256-color names (grayscale)\n\n\nv1.28.40\n--------\n\nDocument model -- New ColumnMenu* attr option: 'buttonEvenBlurAttr', that match only even entries\n\n\nv1.28.39\n--------\n\nFixed ScreenBuffer#put() regression ('reset' markup should reset to the provided 'attr' option, if any)\n\n\nv1.28.38\n--------\n\nDocument model -- fixed Document#focusNext() regression, refacto of ScreenBuffer#put() to work with the new factorized markup parser\n\n\nv1.28.37\n--------\n\nFix ScreenBufferHD#put() regression: 'markup' option is working again\nupdate the doc to add a list of supported markup\n\n\nv1.28.36\n--------\n\nDocument model -- New: BaseMenu now has a .focusValue() method that give focus to the element having that value\n\n\nv1.28.35\n--------\n\nDocument model -- New: Buttons now have a special action key bindings\n\n\nv1.28.34\n--------\n\nDocument model -- better default colors for SelectList* and better default handling\n\n\nv1.28.33\n--------\n\nTextBuffer#setContent() now support markup\n\n\nv1.28.32\n--------\n\nFix markup width bug\n\n\nv1.28.31\n--------\n\nFix empty SelectList* bug\n\n\nv1.28.30\n--------\n\nDocument model -- SelectList* now options.content is a shortcut for options.master.content\n\n\nv1.28.29\n--------\n\nDocument model -- SelectListMulti now submit when reducing\n\n\nv1.28.28\n--------\n\nDocument model -- New: Form now supports SelectListMulti\n\n\nv1.28.27\n--------\n\nDocument model -- New: ColumnMenuMulti, SelectListMulti: for multiple choices\n\n\nv1.28.26\n--------\n\nDocument model -- new widget: ToggleButton\n\n\nv1.28.25\n--------\n\nDocument Model -- Fix zIndex trouble in Form when multiple SelectList exist, now there is a zIndex propagation mecanism\n\n\nv1.28.24\n--------\n\nTextBuffer: fixing the .setText() bug that stripped newLines (wasn't affecting display, only once .getText() is called)\n\n\nv1.28.23\n--------\n\nDocument model -- Form: fix regression, multi-line text input are possible again\n\n\nv1.28.22\n--------\n\nDocument model -- SelectList: initial value and .setValue() are fixed\n\n\nv1.28.21\n--------\n\nDocument model -- Hidden element fixed to not interfere with any click or mouse motion, or whatever, SelectList dimension fixed, Form: support for SelectList added\n\n\nv1.28.20\n--------\n\nFix .inputField() delete and backDelete bug under 'alwaysRedraw' behavior, e.g. when a tokenHook is provided (issue #79, replace PR #94)\n\n\nv1.28.19\n--------\n\nDocument model -- New: SelectList\n\n\nv1.28.18\n--------\n\nDocument model -- fixing z-aware click detection\n\n\nv1.28.17\n--------\n\nDocument model -- new: zIndex, drawing and detecting click is now z-aware\n\n\nv1.28.16\n--------\n\nNew methods for TextBuffer: .moveToEndOfWord() and .moveToStartOfWord()\nDocument model: EditableTextBox and widget using it now supports moving from word to word using CTRL+LEFT/RIGHT\n\n\nv1.28.15\n--------\n\nDocument model: better behavior of multi-line text-input in forms\ndependencies upgraded\n\n\nv1.28.14\n--------\n\nDocument Model: now Document emit 'key' events only when no default nor shortcut prevailed\n\n\nv1.28.13\n--------\n\nDocument Model: new: shortcut registration and 'shortcut' event on all Elements\n\n\nv1.28.12\n--------\n\nDocument Model: improved ColumnMenu pagination\nButton now have an 'internalRole' property\n\n\nv1.28.11\n--------\n\nDocument Model: very raw support for pagination in ColumnMenu\n\n\nv1.28.10\n--------\n\nDocument model: now support those new events: 'clickOut', 'leave', 'enter'\nDropDownMenu disappear on clicked out\n\n\nv1.28.9\n-------\n\nDocument model: fixing TextBox and non-string content\n\n\nv1.28.8\n-------\n\nNew: document model's RowMenu now have 'buttonSeparator' and 'buttonSeparatorAttr' options\n\n\nv1.28.7\n-------\n\nDocument model: DropDownMenu has ENTER/KP_ENTER key to submit top-level buttons (since it can be submittable now)\n\n\nv1.28.6\n-------\n\nDocument model: now 'click' and 'hover' events are emitted on the first leaf Element that has a listener for either 'click' or 'hover'\n\n\nv1.28.5\n-------\n\nDocument model: DropDownMenu now can have submittable top button (buttons from the row menu)\n\n\nv1.28.4\n-------\n\nDocument model: TextInput now correctly set content/value on creation\n\n\nv1.28.3\n-------\n\nNew: .singleLineMenu() has the 'selectedIndex' option just like .singleColumnMenu() (#93)\n\n\nv1.28.2\n-------\n\nDependencies\n\n\nv1.28.1\n-------\n\nFixing .singleLineMenu() 'highlight' event to correctly report the highlight index (#90)\n\n\nv1.28.0\n-------\n\nNew: now term.color() and term.bgColor() accepts color names (#87)\n\n\nv1.27.3\n-------\n\nstring-kit dependency\n\n\nv1.27.2\n-------\n\nDependencies upgraded, CHANGELOG edited (missing Node engine v8.10+ requirement informations #86)\n\n\nv1.27.1\n-------\n\nDependencies upgraded, CHANGELOG edited (missing Node engine v8.10+ requirement informations #86)\n\n\nv1.27.0\n-------\n\nNew: 'highlight' event in .inputField(), .singleLineMenu() and .singleColumnMenu(), see the doc (issue #81, replace PR #82)\n\n\nv1.26.11\n--------\n\nFix the doc, add a notice about .drawImage() and HTTP URL (#83)\n\n\nv1.26.10\n--------\n\nNow relying on string-kit@0.9.0 which completely remove xregexp dependency\n\n\nv1.26.9\n-------\n\nEmergency fix: xregexp does not work as of v4.2.2\n\n\nv1.26.8\n-------\n\nA progress bar controler now has a .reset() method #77\n\n\nv1.26.7\n-------\n\nFix issue #76 (TextBuffer)\n\n\nv1.26.6\n-------\n\nReport bad escape sequence entry and continue anyway\n\n\nv1.26.5\n-------\n\nDependencies upgraded\n\n\nv1.26.4\n-------\n\nImportant notice: Node engine v8.10.0 Dubnium LTS is now required, but still it's not a minor semver because it's a fix:\nthe lib uses async functions since v1.19.0 and thus won't load on Node v6, therefore the strict engine limitation\nshould have been done on v1.19.0. This update just make thing clear. Sorry about that.\n\nDependencies upgraded.\n\n\nv1.26.3\n-------\n\nAdd the 'cancelable' option for .singleLineMenu() and .singleColumnMenu()\n\n\nv1.26.2\n-------\n\nImportant String-kit dependency fixed (format %I %Y and %E had bug)\nDocument model: fix focus cycling with Form\n\n\nv1.26.1\n-------\n\nIf present, loads the original 'get-pixels' instead of '@cronvel/get-pixels'\n\n\nv1.26.0\n-------\n\nTextBuffer now supports the text-machine module (state machine)\nTextBox/EditableTextBox constructor now support the 'stateMachine' option\n\n\nv1.25.0\n-------\n\nCompatibility WARNING:\nFix ScreenBuffer, so default fg/bg colors are... well... the default. (instead of black background)\nThis behavior was a bug, but it may change existing app, especially when the terminal 'default' background color\nis different from the color register 0, and the app forgot to initialize the screenBuffer with\na background color (many terminals use color 0 or 7 as the default for background, some like Gnome-Terminal have a special\ncolor for that).\nSo before 1.25, when unspecified, the background color was 'black' (color register 0, it was a bug),\nstarting from 1.25, when unspecified, the background color is 'default' (the terminal default).\n\nNew: TextBox and EditableTextBox\nTextInput now rely on EditableTextBox\nTextBuffer#drawCursor() fixed\n\n\nv1.24.1\n-------\n\nTextBuffer: fixing misc data back to its old behavior\n\n\nv1.24.0\n-------\n\nTextBuffer minor fix ('misc' data)\n\n\nv1.23.0\n-------\n\nTextBuffer has been internally refactored\n\n\nv1.22.1\n-------\n\nForm now support default content\n\n\nv1.22.0\n-------\n\nDocument Form submit value has changed (unstable/undocumented API, not under SemVer)\n\n\nv1.21.0\n-------\n\nNew: lazy-load everything except core submodule\n\n\nv1.20.0\n-------\n\nInternal refacto, backward compatible API changes, document model and menu overhaul\n\n\nv1.19.2\n-------\n\n.getCursorLocation() bug fixed\n\n\nv1.19.1\n-------\n\n.inputField() now support promise returning function for its 'autoComplete' option.\nAll promise API are now documented (#18).\n\n\nv1.19.0\n-------\n\nBreaking change: Node engine v8+ is now mandatory because of async functions, but I forgot to update the package.json until Terminal-kit@1.26.4.\n\nAlmost all features now have a Promise variant (#18).\nStill not documented.\n\n\nv1.18.0\n-------\n\nAdd promises to some API (#18).\n\n\nv1.17.13\n--------\n\nshould provide a more insightful error when the terminal is not capable of requesting cursor location (#16)\n\n\nv1.17.12\n--------\n\nDependencies\n\n\nv1.17.11\n--------\n\nThis may fix an incomprehensible Windows bug (#16)\n\n\nv1.17.10\n--------\n\n.singleLineMenu(): added all improvements made to .singleColumnMenu() (full-width chars and escape sequence aware, see #68)\n\n\nv1.17.9\n-------\n\n.singleColumnMenu() with escape sequences in menu item improved: various minor fixes and now detect style reset (#68)\n\n\nv1.17.8\n-------\n\n.singleColumnMenu() with long entry and escape sequences fixed (#68)\n\n\nv1.17.7\n-------\n\nFix .inputField() behavior with full-width chars (#70)\n\n\nv1.17.6\n-------\n\n.singleColumnMenu() now has a .cancel() method exposed on the returned controller ; Dependencies upgraded\n\n\nv1.17.5\n-------\n\nSmall documentation fixes\n\n\nv1.17.4\n-------\n\nMany bugs on non-TTY output are now fixed ; minor .wrap() bugs fixed ; documentation improved on .wrap()/.wrapColumn()\n\n\nv1.17.3\n-------\n\nFixed .wrap()'s auto-width for x > 1\n\n\nv1.17.2\n-------\n\nWord-wrapping is now documented and its API considered stable\n\n\nv1.17.1\n-------\n\nword-wrap API refined\n\n\nv1.17.0\n-------\n\nNew: word-wrapping (EXPERIMENTAL/UNSTABLE API -- NEED DOC) using term.wrap() / term.wrapColumn()\n\n\nv1.16.1\n-------\n\nDocumentation updated for new options 'isTTY' and 'isSSH' of termkit.createTerminal()\n\n\nv1.16.0\n-------\n\nFixed: avoid sending escape sequences when the output is not a TTY (probably piping or redirecting to a file).\n\nNote: this is a bugfix and should theorically be a SEMVER PATCH, but since it could affect people actually wanting to write\nterminal's escape sequences inside a file/pipe, it will be flagged as a SEMVER MINOR.\n\n\nv1.15.6\n-------\n\nBugfix: do not clean up when not inside a TTY\n\n\nv1.15.5 - v1.15.4\n-----------------\n\nDependencies cleaned up.\n\n\nv1.15.2\n-------\n\nTo solve 'npm audit' issues, I now use my own fork of the 'get-pixels' module, with everything not related to Terminal-kit\npruned (it removes a lot of packages).\n\n\nv1.15.1\n-------\n\nPR #68 - Use stdout columns/rows properties for terminal size\n\n\nv1.15.0\n-------\n\nMoved from JSHint to ESLint, upgraded coding style\n\n\nv1.14.3\n-------\n\nDocumentation fixed\n\n\nv1.14.2\n-------\n\nDocumentation fixed\n\n\nv1.14.1\n-------\n\nFixed issue #58 for all .*Menu()\n\n\nv1.14.0\n-------\n\n.inputField(): now it is possible to get/set cursor position at instantiation using a new 'cursorPosition' option, and real-time using the returned object to get/set the cursor position with the methods getCursorPosition() and setCursorPosition() (issue #56)\n\n\nv1.13.13\n--------\n\nTry to fix terminal resizing detection on windows (#54)\n\n\nv1.13.12\n--------\n\nNew method: .eraseArea() -- a handy higher level method that erases a rectangular area on the screen (#51)\n\n\nv1.13.11\n--------\n\nMitigated an issue with terminal detection on Windows\n\n\nv1.13.10\n--------\n\n.inputField(): new option echoChar (issue #45) ; + fixed few redraw bug\n\n\nv1.13.9\n-------\n\nNew: term.tabSet() .tabClear() .tabClearAll() .forwardTab() and .backwardTab()\n\n\nv1.13.8\n-------\n\n.gridMenu() now supports an 'x' and 'width' option (issue #45)\n\n\nv1.13.7\n-------\n\nScreenBufferHD is not considered unstable anymore, it is now under the SemVer contract\n\n\nv1.13.6\n-------\n\nDocumentation improvements\n\n\nv1.13.5\n-------\n\n.stripEscapeSequences(), .stringWidth() and .truncateString() are now documentated and part of the SemVer contract\n\n\nv1.13.4\n-------\n\nUnstable API fixed: termkit.stringTruncate() -> termkit.truncateString()\n\n\nv1.13.3\n-------\n\nString-kit dependency upgraded.\nUtilities: termkit.stringWidth(), termkit.stringTruncate().\n\n\nv1.13.2\n-------\n\nNew: termkit.stripEscapeSequences()\n\n\nv1.13.1\n-------\n\nNew: term.eraseScrollback() -- erase the scrollback buffer, a.k.a. saved line.\nterm.bindArgs() is now documented thus under the SemVer contract\n\n\nv1.13.0\n-------\n\nNew: term.bindArgs() refacto, it is now a regular chainable method, returned bounded function is chainable as well.\nToo much chainable refacto, so this is a SemVer minor.\n\n\nv1.12.3\n-------\n\nDocumentation improved (issue #42), more color utilities and term.bindArgs() (both beta/undocumented)\n\n\nv1.12.2\n-------\n\nNew: term.colorNameForRgb()\n\n\nv1.12.1\n-------\n\nterm.bar() bugfixed + new options: barStyle\n\n\nv1.12.0\n-------\n\n* New: term.bar() -- it creates a bar representing the value, it uses unicode to improve the precision\n* Undocumented spChars.enlargingBlocks and spChars.growingBlocks fixed: now index 0 is for whitespace like it should,\n  all other characters are shifted.\n\n\nv1.11.2\n-------\n\nNew: .inputField() now supports a meta key binding (PR #40 by samizdatco)\n\n\nv1.11.1\n-------\n\nNew: .inputField()'s .rebase() method now supports an x and y arguments to use as the new coordinates instead of the result of an asynchronous internal call to .getCursorLocation() (PR #38)\n\n\nv1.11.0\n-------\n\nNew: .progressBar() now supports option 'inline', so it redraws itself at the begining of the current line instead of being locked in-place (fix issue #36)\n\n\nv1.10.2\n-------\n\nTextBuffer: bugfixing ScreenBufferHD backing\n\n\nv1.10.1\n-------\n\nScreenBuffer*: Fixing bugs in the new default fg/bg color feature\n\n\nv1.10.0\n-------\n\nScreenBuffer/ScreenBufferHD:\n* support for terminal default BG/FG color (#30), this works through the new attr options: 'defaultColor'\n  and 'bgDefaultColor', this is the default options for .fill() and at ScreenBuffer/ScreenBufferHD creation\n* support for full transparency in the terminal blitter (BTW partial transparency is not possible, since we can't\n  access terminal cells)\n\n\nv1.9.0\n------\n\n.inputField(): Cherry-picking (and improving) from @samizdatco PR: adding Ctrl-W/Alt-D to produce delete previous/next word (#21)\n\n\nv1.8.13\n-------\n\nFixed Ctrl-U/Ctrl-K redraw issues when hint are turned off #21\n\n\nv1.8.12\n-------\n\nspChars: rounded box\n\n\nv1.8.11\n-------\n\nFixed #29 (ndarray should be listed as direct dependency, so it would not break when node_modules/ is not flat)\n\n\nv1.8.10\n-------\n\n.singleColumnMenu(): more improvements\n\n\nv1.8.8 - v1.8.9\n---------------\n\n.inputField() fixed coordinate\n\n\nv1.8.7\n------\n\n.singleColumnMenu(): fixed minor initialization issues\n\n\nv1.8.6\n------\n\nFixed issue when leaving mouse motion grabbing (e.g.: when exiting using term.processExit()),\nadded an async mode to .grabInput() necessary to accomplish this.\nBasically, there is a delay between turning off mouse grabbing and turning off raw mode\n\n\nv1.8.5\n------\n\nLot of minor fixes (exit cleanup, menu, .getCursorLocation(), etc)\n\n\nv1.8.4\n------\n\n.singleColumnMenu(): more minor fixes\n\n\nv1.8.3\n------\n\n.singleColumnMenu() and .gridMenu() extra lines fixed\n\n\nv1.8.2\n------\n\n.singleColumnMenu() fixed and improved, Terminal detection fixed and improved (fix #26)\n\n\nv1.8.1\n------\n\nFix some shutdown issues in .processExit()\n\n\nv1.8.0\n------\n\nFixed spelling error in options of .singleColumnMenu() and .gridMenu()\n\n\nv1.7.2\n------\n\nImage loader: better error handling\n\n\nv1.7.1\n------\n\nImage loader fixed: now the callback is optional\n\n\nv1.7.0\n------\n\nScreenBuffer*#vScrollBuffer() is renamed ScreenBuffer*#vScroll(), is refactored,\nit manages dst terminal scrolling, and is now part of the public API\n\n\nv1.6.8\n------\n\nGreatly improved image drawing performance, + more ScreenBuffer* optimizations\n\n\nv1.6.7\n------\n\nGreatly improved the ScreenBufferHD performance\n\n\nv1.6.6\n------\n\nAdding missing escape sequence to set/reset the scrolling region, new (private?) method ScreenBuffer*#vScrollBuffer(),\nimage-viewer sample code improved, ScreenBuffer#fill() improved and fixed\n\n\nv1.6.5\n------\n\n.singleColumnMenu() and .gridMenu(): fixed a minor bug (was adding one extra line when at the bottom of the terminal)\nand improved the documentation (example and screenshot)\n\n\nv1.6.4\n------\n\nDocumentation on .singleColumnMenu() and .gridMenu()\n\n\nv1.6.3\n------\n\n.singleLineMenu() documentation updated\n\n\nv1.6.2\n------\n\nAdded mouse support to .singleLineMenu()\n\n\nv1.6.1\n------\n\n.singleColumnMenu() and .gridMenu() now supports the mouse\n\n\nv1.6.0\n------\n\nNew: .gridMenu(), bugfixed .singleColumnMenu()\n\n\nv1.5.4\n------\n\n.singleLineMenu() and .singleColumnMenu() now supports key bindings customization\n\n\nv1.5.3\n------\n\nRemoved deprecated, undocumented and duplicated area mode for .inputField()\n\n\nv1.5.2\n------\n\nBugfixed .singleColumnMenu(), and correctly wordwrap menu items\n\n\nv1.5.1\n------\n\nMany .singleColumnMenu() bugfixes\n\n\nv1.5.0\n------\n\nNew: .singleColumnMenu()\n\n\nv1.4.4\n------\n\nAnother .inputField() bug fixed\n\n\nv1.4.3\n------\n\n.inputField() history redraw bug fixed\n\n\nv1.4.2\n------\n\nFixed: missing .scrollUp() and .scrollDown() ANSI escape sequences are now included in the lib\n\n\nv1.4.1\n------\n\nFixed: missing term.reset*ColorRgb(), that reset anything set by term.set*ColorRgb().\nFixed: term.windowTitle() now just set the window title, not the icon name anymore.\nIcon name can be set with term.iconName().\n\n\nv1.4.0\n------\n\nNew: term.cwd() and term.notify()\n\n\nv1.3.0\n------\n\nNew: term.colorRgbHex() and term.bgColorRgbHex()\n\n\nv1.2.8 - v1.2.12\n----------------\n\nMarkup reset string\n\n\nv1.2.7\n------\n\nMarkup shift/modifier support for background color\n\n\nv1.2.6\n------\n\n.inputField() fixed: now hints are removed on submit\n\n\nv1.2.5\n------\n\nBlock special chars\n\n\nv1.2.4\n------\n\nDocumentation improvements\n\n\nv1.2.1 - v1.2.3\n---------------\n\nDocumentation on Terminal#drawImage(), ScreenBuffer*#loadImage() and fixed some escape sequences for the linux console\n\n\nv1.2.0\n------\n\n* .inputField(): Added support for Ctrl-Left/Ctrl-right moving to the previous/next word\nand support for Ctrl-U/Ctrl-K delete all characters before/after (issue #21)\n* 'gray' and 'bgGray' are now aliases of 'brightBlack' and 'bgBrightBlack' (issue #22)\n\n\nv1.1.5\n------\n\nScreenBufferHD.loadImage() minor bug fixed. Added a shrink options.\n\n\nv1.1.4\n------\n\nDocumentation improvements\n\n\nv1.1.3\n------\n\nNew: Unleash incredible terminal gfx! Now the 32-bit ScreenBuffer supports image loading!\n\n\nv1.1.2\n------\n\nDocumentation improved on ScreenBuffer HD\n\n\nv1.1.1\n------\n\nDocumentation fixed and improved on ScreenBuffer HD\n\n\nv1.1.0\n------\n\nNew: ScreenBufferHD, a 32-bit (RGBA) screen buffer with composition (issue #9).\n\n\nv1.0.5\n------\n\n24 bits colors are back:\nA couple of month ago (around nov 2016 and feb 2017), major terminals (gnome-terminal, Konsole, iTerm, ...)\nchanged the behavior of the $COLORTERM environment variable (without much advertising, BTW...),\nand that totally messed up terminal detection.\n\nInstead of containing the terminal identifier, now it contains \"truecolor\" if the terminal supports true-color.\nFailing to find a terminal named \"truecolor\", Terminal-kit was falling back to \"xterm\".\n\nI noticed that just now. -_-'\nFixed.\n\n\nv1.0.4\n------\n\nDependency upgraded\n\n\nv1.0.3\n------\n\n.grabInput() bug introduced by the fix at v1.0.2 fixed (misleading Node.js stream's flowing/pause mode behavior)\n\n\nv1.0.2\n------\n\n.grabInput( false ) bug fixed: it was not switching stdin back to pause mode\n\n\nv1.0.1\n------\n\nDocumentation\n\n\nv0.30.7\n-------\n\nDocumentation fixed\n\n\nv0.30.6\n-------\n\nDocumentation fixed\n\n\nv0.30.5\n-------\n\n.fileInput() documentation\n\n\nv0.30.4\n-------\n\nDocumentation improvements\n\n\nv0.30.3\n-------\n\nTextBuffer documentation done\n\n\nv0.30.2\n-------\n\nDocumentation\n\n\nv0.30.1\n-------\n\nDocumentation\n\n\nv0.30.0\n-------\n\nBreaking change -- ScreenBuffer.create(): wrap is disabled by default. Documentation improvements.\n\n\nv0.29.0\n-------\n\nBreaking change: the long-time deprecated (since v0.16.0) 'SCREEN_RESIZE' sub-type of the 'terminal' event is dropped,\nin favor of the 'resize' event.\nDocumentation improved.\n\n\nv0.28.4\n-------\n\nDocumentation improvements\n\n\nv0.28.3\n-------\n\nThe documentation has been totally restructured.\n\n\nv0.28.2\n-------\n\n.inputField(): tokenHook() can return a string now. (part of issue #19)\n\n\nv0.28.1\n-------\n\nTypo in the doc\n\n\nv0.28.0\n-------\n\nBreaking change: .inputField()'s tokenHook option has changed, the arguments of the function\nare now ( token , isEndOfInput , previousTokens , term , config ). See the doc. #19\n\n\nv0.27.4\n-------\n\n.inputField(): Auto-Completer can return an array having a 'postfix' property (similar than 'prefix')\n\n\nv0.27.3\n-------\n\n.inputField() documentation updated\n\n\nv0.27.2\n-------\n\ninputField(): fixed a bug introduced in v0.27.0, autoCompleteMenu was not exiting without choosing an existing alternative\n\n\nv0.27.1\n-------\n\ninputField() token hilighting API fixed, all features of issue #19 are coded, documentation not updated ATM\n\n\nv0.27.0\n-------\n\nNew: inputField() support token hilighting\n\n\nv0.26.2\n-------\n\nFixing TextBuffer#load()\n\n\nv0.26.1\n-------\n\nBugfix: this was not returned when shutting down\n\n\nv0.26.0\n-------\n\nBreaking change: process exit refactoring\n\n\nv0.25.6\n-------\n\nProgressBar sync mode\n\n\nv0.25.5\n-------\n\nA tool moved jshint from dev-dependency to dependency: fixing it now\n\n\nv0.25.4\n-------\n\nDependencies\n\n\nv0.25.3\n-------\n\nDocumentation fixed\n\n\nv0.25.2\n-------\n\nDependencies\n\n\nv0.25.1\n-------\n\nDocumentation: fixing the TOC\n\n\nv0.25.0\n-------\n\nBreaking changes: engine node >= 4.5, because of node v6 'new Buffer' deprecation migration\n\n\nv0.24.30\n--------\n\nFixed bad right bitshift >> to >>>\n\n\nv0.24.28 - v0.24.29\n-------------------\n\nReplace the '&' in the package description by 'and' (because of a long running bug on npmjs.org)\n\n\nv0.24.27\n--------\n\nDependencies\n\n\nv0.24.26\n--------\n\ntermkit.autoComplete() now accept a fourth argument: 'prefix', useful to ease issue #13\n\n\nv0.24.25\n--------\n\nNew: term.markupOnly()\n\n\nv0.24.24\n--------\n\nBadges\n\n\nv0.24.23\n--------\n\nNextGenEvents updated\n\n\nv0.24.22\n--------\n\nBugfix: ^ caret in inputField() now works\n\n\nv0.24.21\n--------\n\nDependencies\n\n\nv0.24.20\n--------\n\nCodewake badge\n\n\nv0.24.19\n--------\n\nDependencies\n\n\nv0.24.18\n--------\n\nMarkup not performing styleReset is now fixed\n\n\nv0.24.17\n--------\n\nDependencies\n\n\nv0.24.15 - v0.24.16\n-------------------\n\nForce CRLF with `term.options.crlf = true`.\nNot official ATM.\n\n\nv0.24.14\n--------\n\nFix issue #12 (when the TERM env variable does not exist)\n\n\nv0.24.13\n--------\n\nDependencies\n\n\nv0.24.12\n--------\n\nDependencies\n\n\nv0.24.11\n--------\n\nDependencies\n\n\nv0.24.10\n--------\n\nDependencies\n\n\nv0.24.9\n-------\n\nYet another fix to progressBar. Using async-kit's setSafeTimeout() instead of an internal one.\n\n\nv0.24.8\n-------\n\nMinor fix in progressBar (bad size when progress/eta/item is undefined)\n\n\nv0.24.7\n-------\n\nTimeout issues fixed when CPU-bound/sync task kick in\n\n\nv0.24.6\n-------\n\nDependencies\n\n\nv0.24.5\n-------\n\nMore progressBar (minor) bugs fixed + using ES6 String#repeat()\n\n\nv0.24.4\n-------\n\nProgressBar width fixed.\n\n\nv0.24.3\n-------\n\nDependencies\n\n\nv0.24.2\n-------\n\nDependencies\n\n\nv0.24.1\n-------\n\nDependencies\n\n\nv0.24.0\n-------\n\n\"use strict\" everywhere\n\n\nv0.23.1\n-------\n\nUpgrade string-kit from v0.4.0 to v0.4.1, fixing an issue with formatter count and detection\n\n\nv0.23.0\n-------\n\nBreaking change: now rely on string-kit v0.4.x (.format()), so '%[]' -like markup becomes '%[]F'\nand '%/F3/f -like markup becomes '%[f3]f\n\n\nv0.22.4 - v0.22.7\n-----------------\n\nString-kit dependency.\n\n\nv0.22.3\n-------\n\nDocumentation: spelling.\n\n\nv0.22.2\n-------\n\nBetter doc on the 'realTerminal' feature.\n\n\nv0.22.1\n-------\n\nNew: termkit.realTerminal -- like termkit.terminal but escape pipes.\n\n\nv0.22.0\n-------\n\nNo more relying on Node.js core events, now using NextGenEvents for everything.\n\n\nv0.21.8\n-------\n\nDocument: more cycle focus bugfixes\n\n\nv0.21.7\n-------\n\nDocument: Element#focusNextChild() and Element#focusPreviousChild() bugfix\n\n\nv0.21.6\n-------\n\nDocument#giveFocusTo() argument check.\n\n\nv0.21.5\n-------\n\nDependencies.\n\n\nv0.21.4\n-------\n\nScreenBuffer: optimized (delta) escape sequences for the terminal blitter are now working properly.\n\n\nv0.21.3\n-------\n\nScreenBuffer improvements.\n\n\nv0.21.2\n-------\n\nLinux Console: repairing .color256(), thus repairing ScreenBuffer features.\n\n\nv0.21.1\n-------\n\nDocument: .focusPrevious() bugfixed.\n\n\nv0.21.0\n-------\n\nRemoving inline widget: .layout() and .form(), their Document counter-part should be used instead.\n\n\nv0.20.32\n--------\n\nInternally replacing home-made arrayKit.fill() with ES6 Array#fill().\n\n\nv0.20.31\n--------\n\nTextBuffer: 'hidden' option, .setHidden(), .getHidden(). Document TextInput Element now has the 'hidden' option for passwords.\n\n\nv0.20.30\n--------\n\nTextBuffer: 'hidden' option, .setHidden(), .getHidden(). Document TextInput Element now has the 'hidden' option for passwords.\n\n\nv0.20.29\n--------\n\nDocument: Document#focusNext() infinite loop bugfixed, .redraw() for moving and resizing Element, Text#setContent() redraw bugfixed.\n\n\nv0.20.28\n--------\n\nDocumentation spelling.\n\n\nv0.20.27\n--------\n\nDocument: Text, Element Id and Layout bugfixes.\n\n\nv0.20.26\n--------\n\nDocument: .draw() and detached Element bugfix.\n\n\nv0.20.25\n--------\n\nExit minor bugfix.\n\n\nv0.20.24\n--------\n\nDocument: .attach()/.detach()/.destroy() bugfixes.\n\n\nv0.20.23\n--------\n\nDocument: .attach()/.detach()/.destroy() bugfixes.\n\n\nv0.20.22\n--------\n\nDocument: ENTER and KP_ENTER move to next TextInput in Forms.\n\n\nv0.20.21\n--------\n\nDocument: new method .clear() that remove all children\n\n\nv0.20.20\n--------\n\nDocument: all Element now have a .destroy() method.\n\n\nv0.20.19\n--------\n\nButtons are now blinking on submit\n\n\nv0.20.18\n--------\n\nNew: all interactive Document Elements now react to the mouse 'click' and 'hover' event!\n\n\nv0.20.17\n--------\n\nDocument: MenuBar is renamed DropDownMenu\n\n\nv0.20.15 - v0.20.16\n-------------------\n\nDocument MenuBar is now working.\n\n\nv0.20.14\n--------\n\nDocument Form navigation. TextBuffer .moveForward() bugfix\n\n\nv0.20.13\n--------\n\nDocument MenuBar: better default settings.\n\n\nv0.20.12\n--------\n\nDocument MenuBar: work in progress!\n\n\nv0.20.11\n--------\n\nDocument ColumnMenu is working!\n\n\nv0.20.10\n--------\n\nDocument: Menu is now known as RowMenu. ColumnMenu is in progress.\n(Those features are not under semver yet - i.e. not documented yet, so no minor version bump for that).\n\n\nv0.20.9\n-------\n\nDocument: reversing the logic of preventing propagation of event to parent: now returning a truthy value prevent that.\n\n\nv0.20.8\n-------\n\nDocument: event bubbling\n\n\nv0.20.7\n-------\n\nDocument: event management changes\n\n\nv0.20.6\n-------\n\nDocument Container now has a backgroundAttr option\n\n\nv0.20.5\n-------\n\nDocument now rely on nextgen-events instead of Node.js' built-in events.\n\n\nv0.20.4\n-------\n\nNew Document Element: Menu.\n\n\nv0.20.3\n-------\n\nScreenBuffer clipping bugfixed. Document drawing algorithm refactored to support resizing.\n\n\nv0.20.2\n-------\n\nDocument: redraw mecanism.\n\n\nv0.20.1\n-------\n\nDocument Element Layout is now resizable like the deprecated inline layout was.\n\n\nv0.20.0\n-------\n\nBreaking API change: the Terminal 'resize' event now produces 2 args: width and height, instead of an object to be consistent\nwith other internal events\n\n\nv0.19.4\n-------\n\nInline layout ported to Document.\n\n\nv0.19.3\n-------\n\nDocument: minor improvement, unique id, document.elements[ id ] access...\n\n\nv0.19.2\n-------\n\nDocument element: now perform recursive draw() and drawCursor() automatically\n\n\nv0.19.1\n-------\n\nDocument model: Container.\n\n\nv0.19.0\n-------\n\nNow require node.js v4. Document widget currently working: Button, Text, TextInput and Form.\n\n\nv0.18.0\n-------\n\nNew feature in progress: Document! It mimics the browser somewhat: a document with element, etc... \nlayout, form and area-type inputField will move to this new Document feature (every 'inline' features will be kept separated).\n\n\nv0.17.0\n-------\n\nNew: .inputField() now has an 'area' mode (standard mode is now known as 'inline' mode) that use ScreenBuffer and TextBuffer\nfor its rendering, allowing confined text-area-like inputs. This is still a work in progress and many features of the 'inline' mode\nare missing. This will allow creation of terminal forms.\n\n\nv0.16.14\n--------\n\n.createLayout(): it is now possible to pass the x,y coordinate of the top-left corner of the layout\n\n\nv0.16.13\n--------\n\n.createLayout(): now creates accessible and resizable ScreenBuffer surfaces on layout's leaf\n\n\nv0.16.12\n--------\n\nBugfix .createLayout(): now it creates cross-junction like it should when two tee-junction overlap\n\n\nv0.16.11\n--------\n\nBasic 'responsive' layout drawing is now working.\n\n\nv0.16.10\n--------\n\nLayout: work in progress.\n\n\nv0.16.9\n-------\n\nNew feature: .createLayout() -- still in alpha.\n\n\nv0.16.8\n-------\n\nNew terminal state: term.state.fullscreen\n\n\nv0.16.7\n-------\n\nAdding new spChars again.\n\n\nv0.16.6\n-------\n\nAdding new spChars.\n\n\nv0.16.5\n-------\n\nNew: termkit.spChars now contains some useful utf-8 characters\n\n\nv0.16.4\n-------\n\nUpgrade the string-kit dependency (important bugfix on the style markup feature)\n\n\nv0.16.3\n-------\n\nDocumentation on style markup.\n\n\nv0.16.2\n-------\n\nFixing the new format feature so it works properly.\n\n\nv0.16.1\n-------\n\nLinux gpm patch for node v4.\n\n\nv0.16.0\n-------\n\nUsing new string-kit's format feature.\n\n\nv0.15.12\n--------\n\n.yesOrNo(): now it returns a controler featuring the abort() method (see the doc).\n\n\nv0.15.11\n--------\n\nDependencies: string-kit 0.2.x, async-kit 0.6.x.\n\n\nv0.15.10\n--------\n\nTextBuffer: miscBuffer for application data.\n\n\nv0.15.9\n-------\n\nScreenBuffer/TextBuffer: Rect constructor improvement.\n\n\nv0.15.8\n-------\n\nScreenBuffer: redraw delta bugfix.\n\n\nv0.15.7\n-------\n\nTextBuffer: work in progress! (minor bugfixes)\n\n\nv0.15.6\n-------\n\nfileInput() and inputField() improvement and options: 'style', 'default', 'cancelable'.\n\n\nv0.15.4 - v0.15.5\n-----------------\n\nTextBuffer: work in progress! (minor bugfixes)\n\n\nv0.15.3\n-------\n\nfileInput(): fixed few minor bugs.\n\n\nv0.15.2\n-------\n\nNew method: fileInput(): it is build on an inputField() that auto-complete and display an auto-complete menu\nwith all files available in the current directory.\n\n\nv0.15.1\n-------\n\nTextBuffer: work in progress! (TAB support)\n\n\nv0.15.0\n-------\n\nScreenBuffer: backward incompatible change: \"draw( { diffOnly: true } )\" is now \"draw( { delta: true } )\".\nTextBuffer: work in progress!\n\n\nv0.14.8 - v0.14.10\n------------------\n\nTextBuffer: work in progress!\n\n\nv0.14.7\n-------\n\nTextBuffer: Basic support is ok!\n\n\nv0.14.6\n-------\n\nScreenBuffer: delta optimization introduced in v0.14.5 is now disabled - not stable enough.\n\n\nv0.14.5\n-------\n\nScreenBuffer: attribute delta optimization.\n\n\nv0.14.4\n-------\n\n.inputField(): fixed some issues with BACKSPACE when at the first column, and history UP and DOWN at the bottom line.\n\n\nv0.14.3\n-------\n\nOn the previous version, 'prependText' becomes 'prefix' (this feature is still not documented, thus not in the SemVer contract).\n\n\nv0.14.2\n-------\n\n.inputField() autoComplete function: if an array is returned and it contains a custom property 'prependText', the autoCompleteMenu\nwill display items normaly, but it will return the chosen entry prepended with that text.\n\n\nv0.14.1\n-------\n\nNew method: .slowTyping(): it outputs some text with an old-fashioned slow-typing effect. See the doc.\n\n\nv0.14.0\n-------\n\n.singleLineMenu(): support for TAB and SHIFT_TAB keys that cycle forward and backward.\n.inputField(): same when in the auto-complete menu (since it uses .singleLineMenu() behind the scene)\n\n\nv0.13.16\n--------\n\nImprovement of cleanup code on exit.\nIssue #3 is fixed again (regression somewhere between 0.13.6 and 0.13.14).\n\n\nv0.13.15\n--------\n\nDocumentation: \n* nice animated gif for each example of: progressBar, inputField, singleLineMenu, yesOrNo\n* fixes in the examples\n* .processExit() is now documentated, thus under SemVer\n* .progressBar(): .stop() and .resume() method are now documentated, thus under SemVer\n\n\nv0.13.14\n--------\n\n.progressBar(): .stop() and .resume() method (should be documented)\nNew method: .processExit() that exit cleanly (should be documented)\n.getCursorLocation(): do not run in concurrency anymore (fix some issue getting values for another call)\n\n\nv0.13.11 - v0.13.13\n-------------------\n\n.progressBar(): update immediately if the progress value is >= 1, to prevent program from quitting before the progress bar\nhad a chance to display 'done'.\n\n\nv0.13.10\n--------\n\n.progressBar(): documentation of title and items.\n\n\nv0.13.9\n-------\n\n.progressBar() improvement: 'title mode'. Documentation will be written once stabilized.\n\n\nv0.13.8\n-------\n\n.progressBar() improvement: 'item mode'. Documentation will be written once stabilized.\n\n\nv0.13.7\n-------\n\n.progressBar() can display ETA (activated with the 'eta' option, see the doc)\n\n\nv0.13.6\n-------\n\nNew method: .progressBar(), which creates a nice progress bar, see the documentation for details.\n\n\nv0.13.5\n-------\n\nFix issue #3.\n\n\nv0.13.3 - v0.13.4\n-----------------\n\nFixing issue #2 with Terminology and mouse reporting.\n\n\nv0.13.2\n-------\n\n.inputField():\n* now patched to support characters larger than 2 bytes, but it still has bugs due to full-width chars\n* new option 'maxLength': to not allow user to add more characters than this\n\n\nv0.13.0 - v0.13.1\n-----------------\n\n.beep() is deprecated, in favor of .bell().\nSHIFT / CTRL / ALT + INSERT / DELETE / PAGE_UP / PAGE_DOWN / HOME / END combo.\n\n\nv0.12.8\n-------\n\nMinor fixes in the demo and tests.\n\n\nv0.12.7\n-------\n\nFixed an error in the code that may have produced unreported bugs.\n\n\nv0.12.6\n-------\n\nTry-catch when raw mode is not possible.\n\n\nv0.12.4 - v0.12.5\n-----------------\n\nAtomic-Terminal support.\n\n\nv0.12.3\n-------\n\nBugfix: timeout detection for .getColor() and .getCursorLocation(), .inputField() is changed accordingly (and cleaned up)\n\n\nv0.12.2\n-------\n\nDocumentation improvements.\n\n\nv0.12.1\n-------\n\n.singleLineMenu() callback's 'response' argument has 2 new properties: 'x' and 'y', the coordinates of the selected item.\n\n\nv0.12.0\n-------\n\nBackward compatibility broken: .singleLineMenu()'s callback is now:\n* callback( error , response ), where:\n\t* error `mixed` truthy if an underlying error occurs\n\t* response `Object` where\n\t\t* selectedIndex `number` the user-selected menu item index\n\t\t* selectedText `string` the user-selected menu item text\n\t\t* unexpectedKey `string` when 'exitOnUnexpectedKey' option is set and an unexpected key is pressed, this contains\n\t\t  the key that produced the exit\n\nUsing named parameters for the callback is a more reliable and flexible API that will avoid breakage in the future,\nwhen feature will be added.\n\n\nv0.11.3\n-------\n\n* .inputField(): custom auto-completer can be asynchronous now, see the doc.\n\n* Documentation: static method termkit.autoComplete() is now documented.\n\n\nv0.11.2\n-------\n\nImproved documentation: formatting, Table of Contents, etc...\n\n\nv0.11.1\n-------\n\nDocumentation: features introduced since v0.10.8.\n\n\nv0.11.0\n-------\n\n* .singleLineMenu() has more options: it is possible to define its own item separator, and customize the\n  new next/previous page hint feature\n\n* .inputField() option 'menuOption' has moved to/mixed with 'autoCompleteMenu'\n\n\nv0.10.9\n-------\n\n.inputField() now has the option 'autoCompleteMenu' to use in conjunction with 'autoComplete', it displays a single line menu\ndisplaying all the completion candidate, when more than one is possible.\n\n\nv0.10.8\n-------\n\nNew method: .singleLineMenu(), which creates a simple menu, the user can select item with arrow keys and RETURN/ENTER.\n\n\nv0.10.7\n-------\n\nDocumentation on .createTerminal() is now available.\n\n\nv0.10.6\n-------\n\nStupid Gnome-terminal do not set COLORTERM environment variable anymore... this is a workaround to detect it.\n\n\nv0.10.5\n-------\n\nGnome-terminal now supports 24bits colors, so the support for it has been added.\n\n\nv0.10.4\n-------\n\n.inputField() returned value, the inputControler, is now an event emitter (it emits 'ready'), and it features a 'redraw()' method.\n\n\nv0.10.3\n-------\n\n.inputField() now supports an 'autoComplete' option, see the doc\n\n\nv0.10.2\n-------\n\n.inputField() now supports an 'history' option, so UP and DOWN keys move up and down in the history\n\n\nv0.10.1\n-------\n\n.inputField() returns more way to control it:\n\t* getPosition(): return an object containing 'x' and 'y' properties, the coordinates where the input field starts\n\t* hide(): hide the input field, it still records keystrokes\n\t* show(): show the input field again\n\t* rebase(): rebase the input field to the current cursor position (it does NOT erase the previous one,\n\t  use hide() before, see the doc)\n\n\nv0.10.0\n-------\n\n.inputField() now returns an object featuring some functions to control things during the input process:\n\t* abort(): abort the input process and do not even call the inputField()'s callback\n\t* stop(): stop the input process now, call the inputField()'s callback (same behaviour than a regular 'ENTER' key pressed)\n\t* getInput(): get the current input string\n\n\nv0.9.14\n-------\n\nAdded a link to the tutorials at blog.soulserv.net/tag/terminal.\n\n\nv0.9.13\n-------\n\nUpgraded dependencies.\n\n\nv0.9.11 - v0.9.12\n-----------------\n\n.noFormat() is now documented (thus under the SemVer contract).\n\n\nv0.9.10\n-------\n\nUpgraded to string-kit@0.1.5.\n\n\nv0.9.9\n------\n\nJust a small addition to the documentation: require() are added in most example (user's feedback).\n\n\nv0.9.8\n------\n\nUpgraded dependencies.\n\n\nv0.9.2 - v0.9.7\n---------------\n\nPackage description & README.md that better fit the new npmjs.org site.\n\n\nv0.9.1\n-------\n\nRemoving tools/sprite-editor.js: the editor has now its own package: 'leeted'.\nThe demo located in demo/spaceship.js works again (sprites have been converted to file format V2).\nSome performance optimization have greatly improved CPU usage.\n\n\nv0.9.0\n-------\n\nFile format has changed for ScreenBuffer.loadSync() and screenBuffer.saveSync().\nThis is now the format version 2.\nFile of format version 1 can still be loaded/saved using ScreenBuffer.loadSyncV1() and screenBuffer.saveSyncV1().\nThis file format is more flexible, so improvement to the lib can be achieved without changing the file format each time.\n\n\nv0.8.0\n-------\n\nThe Rect class has moved from termkit.ScreenBuffer.Rect to termkit.Rect\nThe 'key' event callback's argument #2 (data) now contains a 'isCharacter' property, true for printable, false for control\nscreenBuffer.clear() -> screenBuffer.fill()\n\n\nv0.7.1\n-------\n\nSprite editor now support the mouse.\n\n\nv0.7.0\n-------\n\nScreenBuffer now use Big Endian: there is no performance drop on Little Endian system and the code is less error prone.\n\n\nv0.6.14\n-------\n\nScreenBuffer .put() now support the 'wrap' option, bypassing the default 'wrap' value of the current screenBuffer.\n\n\nv0.6.13\n-------\n\nScreenBuffer .put() now support writing in any of the 4 directions.\nThe sprite editor can set the writing direction.\n\n\nv0.6.12\n-------\n\nScreenBuffer blending: style transparency bugfix.\nImprovement of the sprite editor (new features: fill colors/style, put only attributes).\nImprovement of the demo graphics.\n\n\nv0.6.11\n-------\n\nImprovement of the sprite editor (editor's background character is not customizable).\n\n\nv0.6.10\n-------\n\nNow it is possible to resize a ScreenBuffer.\nImprovement of the sprite editor (sprite resizing, editor's background colors are customizable).\n\n\nv0.6.9\n------\n\nMany type of transparencies: foreground color, background color, style & character.\nNew: a sprite editor, located in demo/sprite-editor.js.\n\n\nv0.6.8\n------\n\nRefactoring, so the tile-variant & the wrap-variant of blitter are now available for the terminal blitter.\n\n\nv0.6.7\n------\n\nThe 'tile' blitter is now faster and cleaner.\nSome bugfix on buffer creation (size should be integer, not float).\n\n\nv0.6.6\n------\n\nThe buffer to buffer blitter now support the 'tile' option.\n\n\nv0.6.5\n------\n\nThe buffer to buffer blitter now support the 'wrap' option.\n\n\nv0.6.2 - v0.6.4\n---------------\n\nImproved terminal's blitter.\n\n\nv0.6.1\n------\n\nScreenBuffer refactoring.\n\n\nv0.6.0\n------\n\nMajor change in the module.exports tree: the backward compatibility is broken, but it can be easily fixed.\nJust replace:\n\nvar term = require( 'terminal-kit' ) ;\n\n... by:\n\nvar term = require( 'terminal-kit' ).terminal ;\n\nNow, that is when the .terminal property is accessed for the first time that a terminal is guessed.\n\nThis make the code cleaner and remove any trouble when circular require() occurs: the module does not perform\nanything until an userland code request so.\n\n\nv0.5.17\n-------\n\nSpaceship demo: added a spaceship moving with the arrow keys.\n\n\nv0.5.16\n-------\n\nSpaceship demo: scrolling space.\n\n\nv0.5.15\n-------\n\nNew: term.ScreenBuffer object. Still a work in progress. Documentation will be available when stabilized.\n\n\nv0.5.14\n-------\n\nGreat news: now GPM is supported, so if the daemon is running, the mouse is supported even in the Linux Console!\n\n\nv0.5.13\n-------\n\nBugfix when COLORTERM is not defined, it causes a crash.\n\n\nv0.5.12\n-------\n\nDocumentation on 'MOUSE_BUTTON_RELEASED'.\n\n\nv0.5.10 - v0.5.11\n-----------------\n\nSSH tests.\n\n\nv0.5.9\n------\n\nSSH detection, this does not improve things except that .getDetectedTerminal() use simple guessing\nrather than the expensive .getParentTerminalInfo().\n\n\nv0.5.8\n------\n\nEterm support.\n\n\nv0.5.7\n------\n\nBetter support for rxvt/urxvt.\nBetter terminal guessing.\n\n\nv0.5.6\n------\n\nBugfix: .grabInput() leak when called multiple times.\nBetter support for rxvt/urxvt.\n\n\nv0.5.5\n------\n\nBetter support for xfce4-terminal.\n\n\nv0.5.4\n------\n\nNew terminals supported: Terminator, rxvt, urxvt, xfce4-terminal.\n\n\nv0.5.3\n------\n\nDocumentation: DEPRECATE .requestScreenSize()\n\n\nv0.5.2\n------\n\nRefactoring\n.setColor() now accept a \"names\" argument\n\n\nv0.5.1\n------\n\n.getColorRegister() -> .getColor()\nDocumentation on v0.4.4 features, and about the 24 bits feature.\n\n\nv0.4.5\n------\n\nBugfix: now Konsole can use 24 bits colors.\n\n\nv0.4.4\n------\n\n.setColor() set a color register to RGB\n.getPalette() request from the terminal (if supported) the current 16 colors palette in use.\n.setPalette() set the 16 colors palette, it is possible to specify a color scheme name\n\n\nv0.4.3\n------\n\nNow the lib is aware of the default VGA palette for the Linux Console.\n\n\nv0.4.2\n------\n\nBugfix: .getDetectedTerminal() do not issue error anymore if no terminal was detected, it simply returns\nthe default terminal.\nNew: the HSL cylender coordinate is now used to pick up the closest color register match for RGB.\nStatus of the lib is now BETA.\n\n\nv0.4.1\n------\n\nNew high-level function: .getColorRegister()\n\n\nv0.4.0\n------\n\n.color256rgb() -> .colorRgb()\n.bgColor256rgb() -> .bgColororRgb()\n.color256gray() -> .colorGrayscale()\n.bgColor256gray() -> .bgColorGrayscale()\n\nFallback for 256 colors, if not supported by the terminal, it picks the closest color in the 16 colors.\n.setCursorColor() & .setCursorColorRgb() now work fine with the Linux Console.\n\n\nv0.3.8\n------\n\n.setCursorColor() & .setCursorColorRgb() to change the color of the cursor.\n\n\nv0.3.4 - v0.3.7\n---------------\n\nDependency hell.\n\n\nv0.3.3\n------\n\nUpgraded dependencies (async-kit, tree-kit, string-kit).\n"
        },
        {
          "name": "COMBO_CHAR_SUPPORT.md",
          "type": "blob",
          "size": 0.6943359375,
          "content": "\nTo do that, ScreenBuffer need to support a sort of indexed chars.\n\nUnicode greatest code points is 1FFFFF, so it never use the highest byte of an UInt32.\nThat byte could be used to store some flags.\nA flag could be used to tell that the cell contains multiple combined chars (like diacritics).\n\nIf so, the lowest 24 bits would not be a code point, but an index to a globally shared lookup table containing\nthe one cell string for that index.\n\nTo do so, .readChar() and .writeChar() should be replaced.\n\nLoader/saver should be rewritten.\nWhen saving, the lookup table should be saved as well into the JSON header.\n\nAlso string-kit should be updated, new methods like .unicode.toComboArray() should be created.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 cronvel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.4091796875,
          "content": "\n\n\n# User rules\n\n# The first rule is the default rule, when invoking \"make\" without argument...\n# Build every buildable things\nall: install\n\n# Things to build\nbuild: browser\n\n# Just install things so it works, basicaly: it just performs a \"npm install --production\" ATM\ninstall: log/npm-install.log\n\n# Just install things so it works, basicaly: it just performs a \"npm install\" ATM\ndev-install: log/npm-dev-install.log\n\n# This run the JsHint & Mocha BDD test, display it to STDOUT & save it to log/mocha.log and log/jshint.log\ntest: log/jshint.log log/mocha.log\n\n# This run the JsHint, display it to STDOUT & save it to log/jshint.log\nlint: log/jshint.log\n\n# This run the Mocha BDD test, display it to STDOUT & save it to log/mocha.log\nunit: log/mocha.log\n\n# This publish to NPM and push to Github, if we are on master branch only\npublish: log/npm-publish.log log/github-push.log\n\n# Clean temporary things, or things that can be automatically regenerated\nclean: clean-all\n\n# browserify\nbrowser: browser/termkit.js browser/termkit.min.js\n\n\n\n# Variables\n\nMOCHA=./node_modules/mocha/bin/mocha\nJSHINT=./node_modules/jshint/bin/jshint --verbose\nBROWSERIFY=browserify\nUGLIFY=uglifyjs\n\n\n\n# Files rules\n\n# Build the browser lib\nbrowser/termkit.js: lib/*.js lib/*/*.js\n\t${BROWSERIFY} lib/browser.js -s TerminalKit -i get-pixels -i child_pty -o browser/termkit.js\n\n# Build the browser minified lib\nbrowser/termkit.min.js: browser/termkit.js\n\t${UGLIFY} browser/termkit.js -o browser/termkit.min.js -m\n\n# JsHint STDOUT test\nlog/jshint.log: log/npm-dev-install.log lib/*.js lib/colorScheme/*.json lib/termconfig/*.js\n\t${JSHINT} lib/*.js lib/colorScheme/*.json lib/termconfig/*.js | tee log/jshint.log ; exit $${PIPESTATUS[0]}\n\n# Mocha BDD STDOUT test\nlog/mocha.log: log/npm-dev-install.log lib/*.js lib/colorScheme/*.json lib/termconfig/*.js test/terminal-test.js\n\t${MOCHA} test/terminal-test.js -R spec | tee log/mocha.log ; exit $${PIPESTATUS[0]}\n\n# Mocha Markdown BDD spec\nbdd-spec.md: log/npm-dev-install.log lib/*.js lib/colorScheme/*.json lib/termconfig/*.js test/terminal-test.js\n\t${MOCHA} test/terminal-test.js -R markdown > bdd-spec.md\n\n# Upgrade version in package.json\nlog/upgrade-package.log: lib/*.js lib/colorScheme/*.json lib/termconfig/*.js test/terminal-test.js demo/*.js documentation.md\n\tnpm version patch -m \"Upgrade package.json version to %s\" | tee log/upgrade-package.log ; exit $${PIPESTATUS[0]}\n\n# Publish to NPM\nlog/npm-publish.log: check-if-master-branch log/upgrade-package.log\n\tnpm publish | tee log/npm-publish.log ; exit $${PIPESTATUS[0]}\n\n# Push to Github/master\nlog/github-push.log: lib/*.js lib/colorScheme/*.json lib/termconfig/*.js test/terminal-test.js demo/*.js package.json\n\t#'npm version patch' create the git tag by itself... \n\t#git tag v`cat package.json | grep version | sed -r 's/.*\"([0-9.]*)\".*/\\1/'`\n\tgit push origin master --tags | tee log/github-push.log ; exit $${PIPESTATUS[0]}\n\n# NPM install\nlog/npm-install.log: package.json\n\tnpm install --production | tee log/npm-install.log ; exit $${PIPESTATUS[0]}\n\n# NPM install for developpement usage\nlog/npm-dev-install.log: package.json\n\tnpm install | tee log/npm-dev-install.log ; exit $${PIPESTATUS[0]}\n\n\n\n# PHONY rules\n\n.PHONY: clean-all check-if-master-branch\n\n# Delete files, mostly log and non-versioned files\nclean-all:\n\trm -rf log/*.log bdd-spec.md node_modules\n\n# This will fail if we are not on master branch (grep exit 1 if nothing found)\ncheck-if-master-branch:\n\tgit branch | grep  \"^* master$$\"\n\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.1181640625,
          "content": "\n[![★](https://img.shields.io/github/stars/cronvel/terminal-kit.svg?label=❤)](https://github.com/cronvel/terminal-kit/stargazers)\n[![License](https://img.shields.io/github/license/cronvel/terminal-kit.svg)](https://github.com/cronvel/terminal-kit)\n[![Downloads](https://img.shields.io/npm/dm/terminal-kit.svg)](https://www.npmjs.com/package/terminal-kit)\n[![Version](https://img.shields.io/npm/v/terminal-kit.svg)](https://www.npmjs.com/package/terminal-kit)\n[![Run on repl.it](http://repl.it/badge/github/cronvel/terminal-kit)](https://repl.it/github/cronvel/terminal-kit)\n\n[![Stats](https://nodei.co/npm/terminal-kit.png?downloads=true&downloadRank=true&stars=true)](https://www.npmjs.com/package/terminal-kit)\n\n\n\n# Terminal Kit\n\nA full-blown terminal lib featuring: 256 colors, styles, keys & mouse handling, input field, progress bars, \nscreen buffer (including **32-bit composition** and **image loading**), text buffer, and many more...\n\nWhether you just need colors & styles, build a simple interactive command line tool or a complexe terminal application:\nthis is the absolute terminal lib for Node.js!\n\nIt does **NOT** depend on ncurses.\n\nSome tutorials are available at [blog.soulserv.net/tag/terminal](http://blog.soulserv.net/tag/terminal/).\n\n\n\n## Screenshot, PleaZe!\n\nThis is a fraction of what Terminal-Kit can do, with only few lines of code.\nClick any image to see the documentation related to the feature!\n\n[![Styles output](https://raw.githubusercontent.com/cronvel/terminal-kit/master/sample/style-doc1.png)](doc/low-level.md)\n\n[![Word-wrapping](https://raw.githubusercontent.com/cronvel/terminal-kit/master/sample/wordwrap-doc1.png)](doc/high-level.md#ref.wrapColumn)\n← Word-wrapping\n\n[![Table](https://raw.githubusercontent.com/cronvel/terminal-kit/master/sample/table-doc1.png)](doc/high-level.md#ref.table)\n← Table with automatic column computing, cell fitting and word-wrapping\n\n[![Input field output](https://raw.githubusercontent.com/cronvel/terminal-kit/master/sample/input-field-doc1.gif)](doc/high-level.md#ref.inputField)\n\n[![File input output](https://raw.githubusercontent.com/cronvel/terminal-kit/master/sample/file-input-doc1.gif)](doc/high-level.md#ref.fileInput)\n\n[![Input field output](https://raw.githubusercontent.com/cronvel/terminal-kit/master/sample/input-field-doc4.gif)](doc/high-level.md#ref.inputField)\n\n[![Single line menu output](https://raw.githubusercontent.com/cronvel/terminal-kit/master/sample/single-line-menu-doc1.gif)](doc/high-level.md#ref.singleLineMenu)\n\n[![Single column menu output](https://raw.githubusercontent.com/cronvel/terminal-kit/master/sample/single-column-menu-doc1.gif)](doc/high-level.md#ref.singleColumnMenu)\n\n[![Grid menu output](https://raw.githubusercontent.com/cronvel/terminal-kit/master/sample/grid-menu-doc1.gif)](doc/high-level.md#ref.gridMenu)\n\n[![Progress bar output](https://raw.githubusercontent.com/cronvel/terminal-kit/master/sample/progress-bar-doc1.gif)](doc/high-level.md#ref.progressBar)\n\n[![Progress bar output](https://raw.githubusercontent.com/cronvel/terminal-kit/master/sample/progress-bar-doc2.gif)](doc/high-level.md#ref.progressBar)\n\n[![Slow typing output](https://raw.githubusercontent.com/cronvel/terminal-kit/master/sample/slow-typing-doc1.gif)](doc/high-level.md#ref.slowTyping)\n\n[![Yes or no output](https://raw.githubusercontent.com/cronvel/terminal-kit/master/sample/yes-no-doc1.gif)](doc/high-level.md#ref.yesOrNo)\n\n[![Spaceship](https://raw.githubusercontent.com/cronvel/terminal-kit/master/demo/record.gif)](doc/ScreenBuffer.md)\n← Surfaces and Sprites\n\n[![Draw an image inside the terminal](https://raw.githubusercontent.com/cronvel/terminal-kit/master/sample/image-loading.png)](doc/high-level.md#ref.drawImage)\n← Load and draw an image inside the terminal\n\n\n\n## Key features\n\n*New:* [Document model](doc/document-model.md#top) for building rich app GUI\n\n*New:* [Spinner](doc/high-level.md#ref.spinner)\n\n*New:* [Table](doc/high-level.md#ref.table) with automatic column computing, cell fitting and word-wrapping\n\n*New:* Promises can be used instead of callback everywhere\n\n*New:* [Word-wrapping](doc/high-level.md#ref.wrapColumn) along full terminal width or a pre-defined column-width\n\n*New:* [ScreenBuffer HD](doc/ScreenBufferHD.md#top) 32-bit (RGBA) surfaces with composition and image loading\n\n* [colors, 256 colors or even 24-bit colors](doc/low-level.md#ref.colors), if the terminal supports it\n* [styles (bold, underline, italic, and many more)](doc/low-level.md#ref.styles)\n* [style mixing](doc/low-level.md#ref.chainable)\n* [chainable](doc/low-level.md#ref.chainable)\n* [string formatting](doc/low-level.md#ref.string-formatting)\n* [short style markup](doc/low-level.md#ref.style-markup)\n* [terminal window title](doc/low-level.md#ref.misc)\n* [cursor positioning](doc/low-level.md#ref.movingCursor)\n* [keyboard input](doc/high-level.md#ref.grabInput)\n* [mouse support (GPM is supported for the Linux Console)](doc/high-level.md#ref.grabInput)\n* [input field](doc/high-level.md#ref.inputField)\n* [single line menu](doc/high-level.md#ref.singleLineMenu)\n* [single column menu](doc/high-level.md#ref.singleColumnMenu)\n* [grid/table menu](doc/high-level.md#ref.gridMenu)\n* [progress bar](doc/high-level.md#ref.progressBar)\n* [interactive 'yes or no'](doc/high-level.md#ref.yesOrNo)\n* [screen & off-screen buffers (a concept similar to SDL's *Surface*)](doc/ScreenBuffer.md#top)\n* [text buffers](doc/TextBuffer.md#top)\n* [change the terminal color palette](doc/high-level.md#ref.setPalette)\n* [draw an image file (PNG, JPEG, GIF) directly inside the terminal](doc/high-level.md#ref.drawImage)\n* [event-driven](doc/events.md#top)\n\n\n\n## Quick examples\n\n```js\n// Require the lib, get a working terminal\nvar term = require( 'terminal-kit' ).terminal ;\n\n// The term() function simply output a string to stdout, using current style\n// output \"Hello world!\" in default terminal's colors\nterm( 'Hello world!\\n' ) ;\n\n// This output 'red' in red\nterm.red( 'red' ) ;\n\n// This output 'bold' in bold\nterm.bold( 'bold' ) ;\n\n// output 'mixed' using bold, underlined & red, exposing the style-mixing syntax\nterm.bold.underline.red( 'mixed' ) ;\n\n// printf() style formatting everywhere:\n// this will output 'My name is Jack, I'm 32.' in green\nterm.green( \"My name is %s, I'm %d.\\n\" , 'Jack' , 32 ) ;\n\n// Since v0.16.x, style markup are supported as a shorthand.\n// Those two lines produce the same result.\nterm( \"My name is \" ).red( \"Jack\" )( \" and I'm \" ).green( \"32\\n\" ) ;\nterm( \"My name is ^rJack^ and I'm ^g32\\n\" ) ;\n\n// Width and height of the terminal\nterm( 'The terminal size is %dx%d' , term.width , term.height ) ;\n\n// Move the cursor at the upper-left corner\nterm.moveTo( 1 , 1 ) ;\n\n// We can always pass additional arguments that will be displayed...\nterm.moveTo( 1 , 1 , 'Upper-left corner' ) ;\n\n// ... and formated\nterm.moveTo( 1 , 1 , \"My name is %s, I'm %d.\\n\" , 'Jack' , 32 ) ;\n\n// ... or even combined with other styles\nterm.moveTo.cyan( 1 , 1 , \"My name is %s, I'm %d.\\n\" , 'Jack' , 32  ) ;\n\n// Get some user input\nterm.magenta( \"Enter your name: \" ) ;\nterm.inputField(\n\tfunction( error , input ) {\n\t\tterm.green( \"\\nYour name is '%s'\\n\" , input ) ;\n\t}\n) ;\n```\n\n\n### ♥♥ [I want to READ THE DOC NOW!](doc/documentation.md#ref.TOC) ♥♥\n\n\n#### License: MIT\n\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.5732421875,
          "content": "\n## Reporting a Vulnerability\n\nIf you think you have found a vulnerability, _please report responsibly_.\nDon't create GitHub issues for security issues.\nInstead, send an email to cedric dot ronvel at gmail dot com and I will look into it as soon as possible.\n\n**A note for bounty hunters:** I should mention that I *usually* prefer to fix security issues by myself,\nbecause it could involve rethinking API or fixing it / working around it in a way only an official maintainer can do it.\nI want to avoid people getting frustrated: **don't work on a fix before getting in touch with me**.\n"
        },
        {
          "name": "bdd-spec.md",
          "type": "blob",
          "size": 0.171875,
          "content": "# TOC\n   - [Find](#find)\n   - [Misc](#misc)\n<a name=\"\"></a>\n \n<a name=\"find\"></a>\n# Find\n<a name=\"misc\"></a>\n# Misc\n.\n\n```js\nexpect( term ).to.be.an( termkit.Terminal ) ;\n```\n\n"
        },
        {
          "name": "browser",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext-doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "log",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.4990234375,
          "content": "{\n  \"name\": \"terminal-kit\",\n  \"version\": \"3.1.1\",\n  \"description\": \"256 colors, keys and mouse, input field, progress bars, screen buffer (including 32-bit composition and image loading), text buffer, and many more... Whether you just need colors and styles, build a simple interactive command line tool or a complexe terminal app: this is the absolute terminal lib for Node.js!\",\n  \"main\": \"lib/termkit.js\",\n  \"directories\": {\n    \"test\": \"test\"\n  },\n  \"engines\": {\n    \"node\": \">=16.13.0\"\n  },\n  \"dependencies\": {\n    \"@cronvel/get-pixels\": \"^3.4.1\",\n    \"chroma-js\": \"^2.4.2\",\n    \"lazyness\": \"^1.2.0\",\n    \"ndarray\": \"^1.0.19\",\n    \"nextgen-events\": \"^1.5.3\",\n    \"seventh\": \"^0.9.2\",\n    \"string-kit\": \"^0.18.1\",\n    \"tree-kit\": \"^0.8.7\"\n  },\n  \"scripts\": {\n    \"test\": \"tea-time -R dot\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/cronvel/terminal-kit.git\"\n  },\n  \"keywords\": [\n    \"terminal\",\n    \"console\",\n    \"ansi\",\n    \"cli\",\n    \"xterm\",\n    \"color\",\n    \"256 colors\",\n    \"true color\",\n    \"style\",\n    \"input\",\n    \"input field\",\n    \"mouse\",\n    \"gpm\",\n    \"cursor\",\n    \"menu\",\n    \"spinner\",\n    \"progress bar\",\n    \"screenbuffer\",\n    \"textbuffer\",\n    \"32-bit\",\n    \"composition\",\n    \"image\",\n    \"png\",\n    \"jpeg\",\n    \"gif\"\n  ],\n  \"author\": \"Cédric Ronvel\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/cronvel/terminal-kit/issues\"\n  },\n  \"copyright\": {\n    \"title\": \"Terminal Kit\",\n    \"years\": [\n      2009,\n      2022\n    ],\n    \"owner\": \"Cédric Ronvel\"\n  }\n}\n"
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "utilities",
          "type": "tree",
          "content": null
        },
        {
          "name": "wfm.json",
          "type": "blob",
          "size": 0.0185546875,
          "content": "{\n\t\"prepare\": {}\n}\n"
        }
      ]
    }
  ]
}