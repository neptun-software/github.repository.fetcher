{
  "metadata": {
    "timestamp": 1736562061255,
    "page": 826,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "stereobooster/react-ideal-image",
      "stars": 3257,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".all-contributorsrc",
          "type": "blob",
          "size": 2.166015625,
          "content": "{\n  \"projectName\": \"react-ideal-image\",\n  \"projectOwner\": \"stereobooster\",\n  \"files\": [\n    \"README.md\"\n  ],\n  \"imageSize\": 100,\n  \"commit\": false,\n  \"contributors\": [\n    {\n      \"login\": \"stereobooster\",\n      \"name\": \"stereobooster\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/179534?s=460&v=4\",\n      \"profile\": \"https://github.com/stereobooster\",\n      \"contributions\": [\n        \"code\",\n        \"doc\",\n        \"infra\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"sompylasar\",\n      \"name\": \"Ivan Babak\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/498274?s=460&v=4\",\n      \"profile\": \"https://github.com/sompylasar\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"palerdot\",\n      \"name\": \"Arun Kumar\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/4299398?s=460&v=4\",\n      \"profile\": \"https://github.com/palerdot\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"hipstersmoothie\",\n      \"name\": \"Andrew Lisowski\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/1192452?v=4\",\n      \"profile\": \"http://hipstersmoothie.com\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"tvthatsme\",\n      \"name\": \"Timothy Vernon\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/3386714?v=4\",\n      \"profile\": \"https://github.com/tvthatsme\",\n      \"contributions\": [\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"vs1682\",\n      \"name\": \"vishalShinde\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/5151881?v=4\",\n      \"profile\": \"http://vs1682.github.io\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"EvgeniyKumachev\",\n      \"name\": \"Evgeniy Kumachev\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/5207796?v=4\",\n      \"profile\": \"https://github.com/EvgeniyKumachev\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"Tawe\",\n      \"name\": \"John Munn\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/2087056?v=4\",\n      \"profile\": \"https://github.com/Tawe\",\n      \"contributions\": [\n        \"code\"\n      ]\n    }\n  ],\n  \"repoType\": \"github\"\n}\n"
        },
        {
          "name": ".babelrc",
          "type": "blob",
          "size": 0.1474609375,
          "content": "{\n  \"presets\": [\"@babel/env\", \"@babel/react\"],\n  \"plugins\": [\"@babel/plugin-proposal-class-properties\", \"@babel/plugin-proposal-object-rest-spread\"]\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0283203125,
          "content": "* text=auto\n*.js text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1845703125,
          "content": "node_modules\ncoverage\ndist\nstyleguide\n.opt-in\n.opt-out\n.DS_Store\n.eslintcache\n\n# these cause more harm than good\n# when working with contributors\npackage-lock.json\nyarn.lock\nyarn-error.log\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0537109375,
          "content": "registry=http://registry.npmjs.org/\npackage-lock=false\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.970703125,
          "content": "sudo: false\nlanguage: node_js\ncache:\n  directories:\n    - \"~/.npm\"\n    - \"node_modules\"\nnotifications:\n  email: false\nnode_js:\n  - '10'\ninstall:\n  - npm install -g npm\n  - npm install\nscript: npm run validate\nafter_success: kcd-scripts travis-after-success\nbranches:\n  only: master\nenv:\n  global:\n    secure: hG6olL1YgWWkvDW+oVQ4BNIape5GsI9uOqPG6WAP2t1LjG5McqFCP6N0HJLfGI/iiTjbhDhBi69lFXyBzWGEM8Smvmnh1iekRQ+Vrt1L9Q+aXEoRm97LtAbIlKNat4QP9ZW1gaNAPgWrzE0mlPxtOYUNjpR8+T6Ivt2Q04iT2cP7kqgC6CmGVVEk3hOAQqWXkkzUUNifcRs9IdeJrBQzWBE2s1Pw+e2GSvb75fW0hXT9AzfFbl5Q1Nw4R2Mai8uDcqaTEROYxdipz1NJTxvEzix71a2vNEXDGMocnLJldd6SCIJ4SzTwq2qcTnlH0PizvK7ym9yRqDbUudxq09/hqf/q8UzjbWMxImB6Aa7E6KH0zfguJUb0jlOd5mkGnJBE67G+yYrgfCutmGIho4UzWgwpu5PJsENzy1xUN/syKtgCc7Nu1l4tag+3U1vo45GcN+CcY05gKWj7rK9RkXTwBvloXJXhocXfVP3hoQq+WDqFyfEdg74U97Rn6bJ7kluC14m7IAoKRwLjJpLx8BRGCVhMwvPlCdW2ZkBkLgkQVHuNXXZ41sSVxq4PEI+04CncEvmrrWbyBJSApq998hKVkVLwtl1RtVxBN5jJJk59JuDjpq4WTN5GIDNs7x6/oyuGFAQzPJ4/tKxXPA6Jls+TzruY837oG5hfhk2vUY1NzHg=\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.1826171875,
          "content": "# CHANGELOG\n\nThe changelog is automatically updated using [semantic-release](https://github.com/semantic-release/semantic-release).\nYou can see it on the [releases page](../../releases).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.5341796875,
          "content": "# Contributing\n\nThanks for being willing to contribute!\n\n**Working on your first Pull Request?** You can learn how from this _free_ series\n[How to Contribute to an Open Source Project on GitHub][egghead]\n\n## Project setup\n\n1.  Fork and clone the repo\n2.  Run `npm run setup -s` to install dependencies and run validation\n3.  Create a branch for your PR with `git checkout -b pr/your-branch-name`\n\n> Tip: Keep your `master` branch pointing at the original repository and make\n> pull requests from branches on your fork. To do this, run:\n>\n> ```\n> git remote add upstream https://github.com/stereobooster/react-ideal-image.git\n> git fetch upstream\n> git branch --set-upstream-to=upstream/master master\n> ```\n>\n> This will add the original repository as a \"remote\" called \"upstream,\"\n> Then fetch the git information from that remote, then set your local `master`\n> branch to use the upstream master branch whenever you run `git pull`.\n> Then you can make all of your pull request branches based on this `master`\n> branch. Whenever you want to update your version of `master`, do a regular\n> `git pull`.\n\n## Add yourself as a contributor\n\nThis project follows the [all contributors][all-contributors] specification.\nTo add yourself to the table of contributors on the `README.md`, please use the\nautomated script as part of your PR:\n\n```console\nnpm run add-contributor\n```\n\nFollow the prompt and commit `.all-contributorsrc` and `README.md` in the PR.\nIf you've already added yourself to the list and are making\na new type of contribution, you can run it again and select the added\ncontribution type.\n\n## Committing and Pushing changes\n\nPlease make sure to run the tests before you commit your changes. You can run\n`npm run test:update` which will update any snapshots that need updating.\nMake sure to include those changes (if they exist) in your commit.\n\n### opt into git hooks\n\nThere are git hooks set up with this project that are automatically installed\nwhen you install dependencies. They're really handy, but are turned off by\ndefault (so as to not hinder new contributors). You can opt into these by\ncreating a file called `.opt-in` at the root of the project and putting this\ninside:\n\n```\npre-commit\n```\n\n## Help needed\n\nPlease checkout the [the open issues][issues]\n\nAlso, please watch the repo and respond to questions/bug reports/feature\nrequests! Thanks!\n\n[egghead]: https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github\n[all-contributors]: https://github.com/stereobooster/all-contributors\n[issues]: https://github.com/stereobooster/react-ideal-image/issues\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License (MIT)\nCopyright (c) 2017 stereobooster\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.14453125,
          "content": "[![Stand With Ukraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg)](https://vshymanskyy.github.io/StandWithUkraine)\n\n<div align=\"center\">\n<h1>react-ideal-image</h1>\n\n<p>Adaptive image component</p>\n</div>\n\n<hr />\n\n[![Build Status][build-badge]][build]\n[![Code Coverage][coverage-badge]][coverage]\n[![version][version-badge]][package]\n[![downloads][downloads-badge]][npmtrends]\n[![MIT License][license-badge]][license]\n\n[![All Contributors](https://img.shields.io/badge/all_contributors-8-orange.svg?style=flat-square)](#contributors)\n[![PRs Welcome][prs-badge]][prs]\n[![Code of Conduct][coc-badge]][coc]\n\n[![Watch on GitHub][github-watch-badge]][github-watch]\n[![Star on GitHub][github-star-badge]][github-star]\n[![Tweet][twitter-badge]][twitter]\n\n## The problem\n\nI need React component to asynchronously load images, which will adapt based on network, which will allow a user to control, which image to load.\n\n## This solution\n\nRead the [introduction](introduction.md).\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Props](#props)\n  - [getIcon](#geticon)\n  - [getMessage](#getmessage)\n  - [getUrl](#geturl)\n  - [height](#height)\n  - [icons](#icons)\n  - [loader](#loader)\n  - [placeholder](#placeholder)\n  - [shouldAutoDownload](#shouldautodownload)\n  - [srcSet](#srcset)\n  - [theme](#theme)\n  - [threshold](#threshold)\n  - [width](#width)\n- [Other Solutions](#other-solutions)\n- [Contributors](#contributors)\n- [LICENSE](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n\nThis module is distributed via [npm][npm] which is bundled with [node][node] and\nshould be installed as one of your project's `dependencies`:\n\n```\nnpm install react-ideal-image --save\n```\n\n> This package also depends on `react`, `prop-types`, and `react-waypoint`.\n> Please make sure you have those installed as well.\n\n## Usage\n\nExample for create-react-app (you need v2 for macros) based project\n\n```js\nimport React from 'react'\nimport lqip from 'lqip.macro'\nimport IdealImage from 'react-ideal-image'\n\nimport image from './images/doggo.jpg'\nconst lqip = lqip('./images/doggo.jpg')\n\nconst App = () => (\n  <IdealImage\n    placeholder={{lqip}}\n    srcSet={[{src: image, width: 3500}]}\n    alt=\"doggo\"\n    width={3500}\n    height={2095}\n  />\n)\n```\n\n## Props\n\nThis is the list of props that you need to pass to the component.\n\n### getIcon\n\n> `function(state: object)` | optional, default icon is provided based on state object\n\nThis function decides what icon to show based on the current state of the component.\n\n### getMessage\n\n> `function(icon: string, state: object)` | optional, default message is provided based on the icon and state object.\n\nThis function decides what message to show based on the icon (returned from getIcon prop) and the current state of the component.\n\n### getUrl\n\n> `function({})` | optional, no useful default\n\nThis function is called as soon as the component enters the viewport and is used to generate urls based on width and format if `props.srcSet` doesn't provide src field.\n\n### height\n\n> `number` | required\n\nThe Height of the image in px.\n\n### icons\n\n> `object` | required\n\nThis provides a map of the icons. By default, the component uses icons from material design, implemented as React components with the SVG element. You can customize icons\n\n```js\nconst icons = {\n  load: DownloadIcon,\n  //...\n}\n```\n\n### loader\n\n> `string` | optional, defaults to 'xhr'\n\nThis prop takes one of the 2 options, `xhr` and `image`. Read more about it [here](https://github.com/stereobooster/react-ideal-image/blob/master/introduction.md#cancel-download).\n\n### placeholder\n\n> `object` | required\n\nThis takes one of the 2 objects\n\n```js\n// To add a solid color placeholder\n{\n  color: ''\n}\n```\n\nor\n\n```js\n/**\n * To add a low quality image\n * [Low Quality Image Placeholder](https://github.com/zouhir/lqip)\n * [SVG-Based Image Placeholder](https://github.com/technopagan/sqip)\n * base64 encoded image of low quality\n */\n{\n  lqip: ''\n}\n```\n\nRead more about it [here](https://github.com/stereobooster/react-ideal-image/blob/master/introduction.md#lqip).\n\n### shouldAutoDownload\n\n> `function({})` | optional, default function is provided which decides based on the device network.\n\nThis function decides if image should be downloaded automatically. The default function returns `false` for a `2g` network,\nfor a `3g` network it decides based on `props.threshold` and for a `4g` network it returns `true` by default.\n\n### srcSet\n\n> `array[srcType: object]` | required\n\nThis provides an array of sources of different format and size of the image. Read more about it [here](https://github.com/stereobooster/react-ideal-image/blob/master/introduction.md#srcset).\nThe `srcType` has below structure\n\n```js\nsrcType = {\n  width: number, // required\n  src: string,\n  size: number,\n  format: string, // one of the 'jpeg' or 'webp'\n}\n```\n\n### theme\n\n> `object` | required\n\nThis provides a theme to the component. By default, the component uses inline styles, but it is also possible to use CSS modules and override all styles.\n\n```js\nconst theme = {\n  placeholder: {\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    position: 'relative',\n  },\n  // ...\n}\n```\n\n### threshold\n\n> `number` | optional\n\nTells how much to wait in milliseconds until consider the download to be slow.\n\n### width\n\n> `number` | required\n\nWidth of the image in px.\n\n## Other Solutions\n\n- [react-progressive-image](https://github.com/FormidableLabs/react-progressive-image)\n- [react-lazyload](https://github.com/jasonslyvia/react-lazyload)\n- [react-lazy-image](https://github.com/sergiodxa/react-lazy-image)\n- [react-image](https://github.com/mbrevda/react-image)\n- [react-lazy-load](https://github.com/loktar00/react-lazy-load)\n- [react-graceful-image](https://github.com/linasmnew/react-graceful-image)\n- [react-worker-image](https://github.com/nitish24p/react-worker-image)\n- [lazy-image](https://github.com/notwaldorf/lazy-image)\n- [react-simple-image](https://github.com/bitjourney/react-simple-image)\n- [react-power-picture](https://github.com/tvthatsme/react-power-picture)\n- [react-shimmer](https://github.com/gokcan/react-shimmer)\n- [gatsby-image](https://www.gatsbyjs.org/packages/gatsby-image/)\n- [react-async-elements `<Img>`](https://github.com/palmerhq/react-async-elements#img)\n\n## Contributors\n\nThanks goes to these people ([emoji key][emojis]):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars3.githubusercontent.com/u/179534?s=460&v=4\" width=\"100px;\"/><br /><sub><b>stereobooster</b></sub>](https://github.com/stereobooster)<br />[💻](https://github.com/stereobooster/react-ideal-image/commits?author=stereobooster \"Code\") [📖](https://github.com/stereobooster/react-ideal-image/commits?author=stereobooster \"Documentation\") [🚇](#infra-stereobooster \"Infrastructure (Hosting, Build-Tools, etc)\") [⚠️](https://github.com/stereobooster/react-ideal-image/commits?author=stereobooster \"Tests\") | [<img src=\"https://avatars1.githubusercontent.com/u/498274?s=460&v=4\" width=\"100px;\"/><br /><sub><b>Ivan Babak</b></sub>](https://github.com/sompylasar)<br />[📖](https://github.com/stereobooster/react-ideal-image/commits?author=sompylasar \"Documentation\") | [<img src=\"https://avatars1.githubusercontent.com/u/4299398?s=460&v=4\" width=\"100px;\"/><br /><sub><b>Arun Kumar</b></sub>](https://github.com/palerdot)<br />[📖](https://github.com/stereobooster/react-ideal-image/commits?author=palerdot \"Documentation\") | [<img src=\"https://avatars3.githubusercontent.com/u/1192452?v=4\" width=\"100px;\"/><br /><sub><b>Andrew Lisowski</b></sub>](http://hipstersmoothie.com)<br />[💻](https://github.com/stereobooster/react-ideal-image/commits?author=hipstersmoothie \"Code\") | [<img src=\"https://avatars1.githubusercontent.com/u/3386714?v=4\" width=\"100px;\"/><br /><sub><b>Timothy Vernon</b></sub>](https://github.com/tvthatsme)<br />[⚠️](https://github.com/stereobooster/react-ideal-image/commits?author=tvthatsme \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/5151881?v=4\" width=\"100px;\"/><br /><sub><b>vishalShinde</b></sub>](http://vs1682.github.io)<br />[📖](https://github.com/stereobooster/react-ideal-image/commits?author=vs1682 \"Documentation\") | [<img src=\"https://avatars3.githubusercontent.com/u/5207796?v=4\" width=\"100px;\"/><br /><sub><b>Evgeniy Kumachev</b></sub>](https://github.com/EvgeniyKumachev)<br />[📖](https://github.com/stereobooster/react-ideal-image/commits?author=EvgeniyKumachev \"Documentation\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/2087056?v=4\" width=\"100px;\"/><br /><sub><b>John Munn</b></sub>](https://github.com/Tawe)<br />[💻](https://github.com/stereobooster/react-ideal-image/commits?author=Tawe \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors][all-contributors] specification.\nContributions of any kind welcome!\n\n## LICENSE\n\nCode - MIT\n\nIcons - [Apache License 2.0](https://github.com/google/material-design-icons/blob/master/LICENSE)\n\n[npm]: https://www.npmjs.com/\n[node]: https://nodejs.org\n[build-badge]: https://img.shields.io/travis/stereobooster/react-ideal-image.svg?style=flat-square\n[build]: https://travis-ci.org/stereobooster/react-ideal-image\n[coverage-badge]: https://img.shields.io/codecov/c/github/stereobooster/react-ideal-image.svg?style=flat-square\n[coverage]: https://codecov.io/github/stereobooster/react-ideal-image\n[version-badge]: https://img.shields.io/npm/v/react-ideal-image.svg?style=flat-square\n[package]: https://www.npmjs.com/package/react-ideal-image\n[downloads-badge]: https://img.shields.io/npm/dm/react-ideal-image.svg?style=flat-square\n[npmtrends]: http://www.npmtrends.com/react-ideal-image\n[license-badge]: https://img.shields.io/npm/l/react-ideal-image.svg?style=flat-square\n[license]: https://github.com/stereobooster/react-ideal-image/blob/master/LICENSE\n[prs-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\n[prs]: http://makeapullrequest.com\n[donate-badge]: https://img.shields.io/badge/$-support-green.svg?style=flat-square\n[coc-badge]: https://img.shields.io/badge/code%20of-conduct-ff69b4.svg?style=flat-square\n[coc]: https://github.com/stereobooster/react-ideal-image/blob/master/other/CODE_OF_CONDUCT.md\n[github-watch-badge]: https://img.shields.io/github/watchers/stereobooster/react-ideal-image.svg?style=social\n[github-watch]: https://github.com/stereobooster/react-ideal-image/watchers\n[github-star-badge]: https://img.shields.io/github/stars/stereobooster/react-ideal-image.svg?style=social\n[github-star]: https://github.com/stereobooster/react-ideal-image/stargazers\n[twitter]: https://twitter.com/intent/tweet?text=Check%20out%20react-ideal-image%20by%20%40stereobooster%20https%3A%2F%2Fgithub.com%2Fstereobooster%2Freact-ideal-image%20%F0%9F%91%8D\n[twitter-badge]: https://img.shields.io/twitter/url/https/github.com/stereobooster/react-ideal-image.svg?style=social\n[emojis]: https://github.com/kentcdodds/all-contributors#emoji-key\n[all-contributors]: https://github.com/kentcdodds/all-contributors\n"
        },
        {
          "name": "index.d.ts",
          "type": "blob",
          "size": 2.8583984375,
          "content": "import {Component, ComponentType, ComponentClass, CSSProperties} from 'react'\n\nexport type LoadingState = 'initial' | 'loading' | 'loaded' | 'error'\n\nexport type IconKey =\n  | 'load'\n  | 'loading'\n  | 'loaded'\n  | 'error'\n  | 'noicon'\n  | 'offline'\n\nexport interface SrcType {\n  width: number\n  src?: string\n  size?: number\n  format?: 'webp' | 'jpeg'\n}\n\ntype ThemeKey = 'placeholder' | 'img' | 'icon' | 'noscript'\n\nexport interface ImageProps {\n  /**\n   * This function decides what icon to show based on the current state of the component.\n   */\n  getIcon?: (state: LoadingState) => IconKey\n  /**\n   * This function decides what message to show based on the icon (returned from getIcon prop) and\n   * the current state of the component.\n   */\n  getMessage?: (icon: IconKey, state: LoadingState) => string\n  /**\n   * This function is called as soon as the component enters the viewport and is used to generate urls\n   * based on width and format if props.srcSet doesn't provide src field.\n   */\n  getUrl?: (srcType: SrcType) => string\n  /**\n   * The Height of the image in px.\n   */\n  height: number\n  /**\n   * This provides a map of the icons. By default, the component uses icons from material design,\n   * implemented as React components with the SVG element. You can customize icons\n   */\n  icons: Partial<Record<IconKey, ComponentType>>\n  /**\n   * This prop takes one of the 2 options, xhr and image.\n   * Read more about it:\n   * https://github.com/stereobooster/react-ideal-image/blob/master/introduction.md#cancel-download\n   */\n  loader?: 'xhr' | 'image'\n  /**\n   * https://github.com/stereobooster/react-ideal-image/blob/master/introduction.md#lqip\n   */\n  placeholder: {color: string} | {lqip: string}\n  /**\n   * This function decides if image should be downloaded automatically. The default function\n   * returns false for a 2g network, for a 3g network it decides based on props.threshold\n   * and for a 4g network it returns true by default.\n   */\n  shouldAutoDownload?: (\n    options: {\n      connection?: 'slow-2g' | '2g' | '3g' | '4g'\n      size?: number\n      threshold?: number\n      possiblySlowNetwork?: boolean\n    },\n  ) => boolean\n  /**\n   * This provides an array of sources of different format and size of the image.\n   * Read more about it:\n   * https://github.com/stereobooster/react-ideal-image/blob/master/introduction.md#srcset\n   */\n  srcSet: SrcType[]\n  /**\n   * This provides a theme to the component. By default, the component uses inline styles,\n   * but it is also possible to use CSS modules and override all styles.\n   */\n  theme?: Partial<Record<ThemeKey, string | CSSProperties>>\n  /**\n   * Tells how much to wait in milliseconds until consider the download to be slow.\n   */\n  threshold?: number\n  /**\n   * Width of the image in px.\n   */\n  width: number\n}\n\ntype IdealImageComponent = ComponentClass<ImageProps>\n\ndeclare const IdealImage: IdealImageComponent\nexport default IdealImage\n"
        },
        {
          "name": "introduction.md",
          "type": "blob",
          "size": 13.556640625,
          "content": "# An Almost Ideal React Image Component\n\nTL;DR. This started as an exercise - how to build ideal React image component. The focus was more on UX and browser capabilities, rather than React code. I created react component and published it to npm, but it has no tests and not battle tested in the wild, use it at your own risk.\n\n[Online example](https://stereobooster.github.io/react-ideal-image-experiments/) | [HN discussion](https://news.ycombinator.com/item?id=17210378) | [Guide To Async Components](https://github.com/stereobooster/guide-to-async-components) | [IdealImage vs img](https://github.com/stereobooster/react-ideal-image/blob/master/other/idealimage-vs-img.md)\n\n## Lazy loading\n\nThis is a straightforward feature - do not load images which are outside of the screen. Do not need to reinvent a wheel, there is [react-waypoint](https://github.com/brigade/react-waypoint), to trigger actions in the component as soon as it appears on the screen (pseudo code):\n\n```js\n<Waypoint onEnter={() => this.setState({src})}>\n  <img src={this.state.src} />\n</Waypoint>\n```\n\n<table>\n  <tr>\n    <td>\n      <b>Pic 1.</b> Browser's `img` loads all 5 images on the page, but only 3 are visible\n      <img src=\"other/introduction/waterfall-img.png\" />\n    </td>\n    <td rowspan=\"2\">\n      <b>Pic 3.</b> Screenshot of the page\n      <img src=\"other/introduction/screen.jpg\" />\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <b>Pic 2.</b> \"Lazy-load\" loads only 3 visible images\n      <img src=\"other/introduction/waterfall-lazy-load.png\" />\n    </td>\n  </tr>\n</table>\n\n## Placeholder\n\nAs soon as you start to do lazy loading you will notice unpleasant content jumps as soon as images get loaded. This is bad for two reasons: UX - content jumps make user loose visual track, performance - content jumps are [browser redraws](https://developers.google.com/speed/docs/insights/browser-reflow). This is why we need a placeholder - a thing which will fill place until the image gets loaded. To do this we need to know image size upfront. AMP has same requirements for all blocks. Simplest placeholder(pseudo code):\n\n```js\nload () {\n  const img = new Image()\n  img.onload = () => this.setState({loaded:true})\n  img.src = this.props.src\n}\nrender() {\n  if (!this.state.loaded) {\n    return (<svg width={this.props.width} height={this.props.height} />)\n  } else {\n    return (<img {...this.props} />)\n   }\n}\n```\n\n**Pic 4.** Load progress of images without dimension\n\n![](other/introduction/filmstrip-img.png)\n\n### LQIP\n\nBetter, but not ideal. A user will see blank space until image load, this can be perceived as broken functionality - what if the image fails to load, what if it takes too long. Low-Quality Image Placeholder to the rescue. This technique is known since times of progressive JPEGs, later forgotten and reinvented by Facebook, Medium, and others. Also, we can use solid color placeholder or SQIP. Read more about placeholders [here](https://medium.freecodecamp.org/using-svg-as-placeholders-more-image-loading-techniques-bed1b810ab2c). To get LQIP you can use [sharp](https://github.com/lovell/sharp)\n\n```js\nconst getLqip = file =>\n  new Promise((resolve, reject) => {\n    sharp(file)\n      .resize(20)\n      .toBuffer((err, data, info) => {\n        if (err) return reject(err)\n        const {format} = info\n        return resolve(`data:image/${format};base64,${data.toString('base64')}`)\n      })\n  })\n\nconst lqip = await getLqip('cute-dog.jpg')\n```\n\nAlso check: [lqip](https://github.com/zouhir/lqip) or [lqip.macro](https://github.com/stereobooster/lqip.macro); [sqip](https://github.com/technopagan/sqip) or [sqip.macro](https://github.com/stereobooster/sqip.macro);\n\nUse LQIP like this (pseudo code):\n\n```js\n<div style={{background: `no-repeat cover url(\"${this.props.lqip}\")`}}>\n  <svg width={this.props.width} height={this.props.height} />\n</div>\n```\n\nOr in the component:\n\n```js\n<IdealImage width={100} height={100} placeholder={{lqip: ''}} />\n```\n\n**Pic 5.** Load progress of images with LQIP, but without JS\n\n![](other/introduction/filmstrip-lqip.png)\n\n**Pic 6.** Load progress of images with LQIP and with JS\n\n![](other/introduction/filmstrip-lqip-react.png)\n\n## Responsive\n\n### Styles\n\nWe are specifying exact width and height of the image and the placeholder. To make it responsive we need to add some CSS (pseudo code):\n\n```js\nconst img = {\n  width: '100%',\n  height: 'auto',\n  maxWidth: '100%',\n}\n\nrender() {\n  if (this.state.loaded) {\n    return (<svg style={img} width={this.props.width} height={this.props.height} />)\n  } else {\n    return (<img style={img} {...this.props} />)\n   }\n}\n```\n\n**Pic 7.1** Load progress of `img` with \"responsive style\" in Android (0.1s interval)\n\n![](other/introduction/filmstrip-img-android-0.1.png)\n\n**Pic 7.2.** Load progress of `img` with \"responsive style\" in iOS (0.5s interval)\n\n![](other/introduction/filmstrip-img-ios-0.1.png)\n\n### `srcSet`\n\nThis feature is about reimplementing `srcSet` property of [responsive image](https://css-tricks.com/responsive-images-youre-just-changing-resolutions-use-srcSet/). It would be nice to use image based on the size of the screen, to minimize traffic for the images on small devices.\n\nTo do this we will need:\n\n- Set of images resized for different devices. You can use [sharp](https://github.com/lovell/sharp) to resize images.\n- Data about how much space image takes on the screen. This is easy because we mount placeholder before the image, so the reference to the placeholder can be used to get dimensions\n- Some heuristic based on `screen.width`, `screen.height`, `window.devicePixelRatio`, `body.clientHeight` to guess maximum image size for given device\n- Would be nice to take into account `orientationchange` events, but will not do this for now.\n\nSee exact implementation in the code (`guessMaxImageWidth`). Our component will look like this:\n\n```js\n<IdealImage\n  width={100}\n  height={100}\n  placeholder={{lqip: ''}}\n  {...props}\n  srcSet={[\n    {width: 100, src: 'cute-dog-100.jpg'},\n    {width: 200, src: 'cute-dog-200.jpg'},\n  ]}\n/>\n```\n\nAlso possible to reimplement `sizes` param with [css-mediaquery](https://github.com/ericf/css-mediaquery), but this potentially can give more bugs than the actual value.\n\n## Adaptive\n\nMost likely you haven't heard this term applied to the images, because I made it up. Adaptive image - an image which adapts to the environment, for example, if the browser supports WebP use it if the network is too slow stop auto download images if the browser is offline communicate to the user that download of the image is not possible at the moment.\n\n### WebP\n\nTo detect WebP support we can use this snippet copy-pasted from StackOverflow:\n\n```js\nconst detectWebpSupport = () => {\n  if (ssr) return false\n  const elem = document.createElement('canvas')\n  if (elem.getContext && elem.getContext('2d')) {\n    // was able or not to get WebP representation\n    return elem.toDataURL('image/webp').indexOf('data:image/webp') === 0\n  } else {\n    // very old browser like IE 8, canvas not supported\n    return false\n  }\n}\n```\n\nUse component like this:\n\n```js\n<IdealImage\n  {...props}\n  srcSet={[\n    {width: 100, src: 'cute-dog-100.jpg'},\n    {width: 100, src: 'cute-dog-100.webp'},\n  ]}\n/>\n```\n\n### Slow network\n\nIf the network is slow it makes no sense to auto-download image (as soon as it appears on the screen), because it will take a long time to load even more time if the browser tries to download more than one image simultaneously.\n\nInstead, we can let the user decide if they want to download image or not. There should be an icon over placeholder, so the user can click it to start the download, and click again to cancel the download. As soon as the download starts there should be no icon, but if it takes too long some indicator of loading state should appear to inform the user that it is still working.\n\n| load                             | no icon                            | loading                             |\n| -------------------------------- | ---------------------------------- | ----------------------------------- |\n| ![](other/introduction/load.png) | ![](other/introduction/noicon.png) | ![](other/introduction/loading.png) |\n\nIn Chrome it is pretty easy to detect the slow network with `navigator.connection.effectiveType`. If it is 'slow-2g', '2g', '3g' then the component will not auto-download images.\n\n| Component detected slow network and didn't try to load images ![](other/introduction/waterfall-slow3g-chrome.png) | Component switched to manual mode ![](other/introduction/screen-slow3g-chrome.jpg) |\n| :---------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------- |\n\n\nFor other browsers, we can try to guess if the download of the image takes too much time. How much time should be considered as too much is up-to developer, via `threshold` property (optional):\n\n```js\n<IdealImage {...props} threshold={1000 /* ms */} />\n```\n\nIf image takes too long to download and the load was initiated by \"Lazy loading\" feature then:\n\n- load process will be canceled\n- the component will show control, so the user can initiate the download of the image manually\n- the component will broadcast event `possibly slow network`, so other components would not even try load images and will be switched to \"Manual mode\"\n\n| Component tried to download images, but canceled load after 1 second ![](other/introduction/waterfall-slow3g-safari-1sec.png) | Component switched to manual mode ![](other/introduction/screen-slow3g-safari-1sec.jpg) |\n| :---------------------------------------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------------------------- |\n\n\n### Cancel download\n\nIn Chrome (and probably other browsers) you can asign empty string to `src` to cancel download, but this doesn't work in Mobile Safari:\n\n```js\nconst img = new Image()\n//...\nimg.src = ''\n```\n\nOther way to do it is to use good old `XMLHttpRequest` which supports cancel:\n\n```js\nconst request = new XMLHttpRequest()\n//...\nrequest.abort()\n```\n\nBuuut:\n\n- if images are uncacheable this will not work - the browser will trigger another request for the image as soon as we insert an image in the DOM\n- if images are hosted on the different domain we will need to configure CORS properly\n\nThis is why I chose to let developer decide which approach to use (default is `xhr`):\n\n```js\n<IdealImage {...props} loader=\"image\" />\n```\n\nIt is also possible to use `fetch` with [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController), but it is supported only in Chrome 66+ at the moment.\n\n## More UX\n\n### Network error\n\nIf image network request errored we need to show user message that browser failed to download the image. The user should be able to recover from the error (in case of temporal issue), by clicking on the image user can trigger repetitive load.\n\n### 404 error\n\n404 error is the special one. We use LQIP placeholder, which creates \"impression\" of content, but our component can outlive real image. We need clearly explain to the user that image doesn't exist anymore.\n\n### Offline\n\nBecause we are lazy loading images, it can happen that we have some unloaded images at the moment when the browser goes offline. We should not confuse users in this case with an error message, instead we should clearly identify that browser is offline and this is why browser cannot load images.\n\n| Network error                     | 404 error                             | Offline                             |\n| --------------------------------- | ------------------------------------- | ----------------------------------- |\n| ![](other/introduction/error.png) | ![](other/introduction/error-404.png) | ![](other/introduction/offline.png) |\n\n## SSR or prerendering\n\nOn the server, the component will be rendered with a placeholder (lqip) and without an icon. As soon as React application will boot, the component will decide if it needs to start download image or show download icon.\n\n### Users with disabled JavaScript\n\nFor users with disabled JavaScript or for search bots component will render the good old image in `<noscript>` tag:\n\n```js\n<noscript>\n  <img\n    src={props.src}\n    srcSet={props.srcSet}\n    alt={props.alt}\n    width={props.width}\n    height={props.height}\n  />\n</noscript>\n```\n\n## Customization\n\n### Icons\n\nBy default, the component uses icons from material design, implemented as React components with the SVG element. You can customize icons\n\n```js\nconst icons = {\n  load: DownloadIcon,\n  //...\n}\n\nreturn <IdealImage {...props} icons={icons} iconColor=\"#fff\" iconSize={64} />\n```\n\n### Theme\n\nBy default, the component uses inline styles, but it is also possible to use CCS modules and override all styles\n\n```js\nconst theme = {\n  placeholder: {\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    position: 'relative',\n  },\n  // ...\n}\n\nreturn <IdealImage {...props} theme={theme} />\n```\n\nor with CSS modules\n\n```js\nimport theme from './theme.module.css'\n\nreturn <IdealImage {...props} theme={theme} />\n```\n\n### i18n\n\nAs of now, the solution is primitive - you can pass a function which generates messages\n\n```js\nconst getMessage = (icon, state) => {\n  switch (icon) {\n    case 'loading':\n      return 'Loading...'\n    //...\n  }\n}\n\nreturn <IdealImage {...props} getMessage={getMessage} />\n```\n\nNeed to improve this\n\n## To be continued\n\nWhat is missing:\n\n- tests\n- proper handling of properties update\n- there seems a bug with setTimeout when the browser window is inactive\n- the code doesn't take into account change of the screen size because of the device rotation\n\nIf you want to give it a try:\n\n```\nnpm install react-ideal-image react-waypoint --save\n```\n"
        },
        {
          "name": "jest.config.js",
          "type": "blob",
          "size": 0.185546875,
          "content": "module.exports = {\n  coverageThreshold: {\n    global: {\n      statements: 100,\n      branches: 100,\n      functions: 100,\n      lines: 100,\n    },\n  },\n  setupFiles: ['jest-canvas-mock'],\n}\n"
        },
        {
          "name": "other",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.2041015625,
          "content": "{\n  \"name\": \"react-ideal-image\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"Adaptive image component\",\n  \"main\": \"dist/index.js\",\n  \"typings\": \"index.d.ts\",\n  \"engines\": {\n    \"node\": \"> 4\",\n    \"npm\": \"> 3\"\n  },\n  \"scripts\": {\n    \"add-contributor\": \"kcd-scripts contributors add\",\n    \"build\": \"kcd-scripts build\",\n    \"lint\": \"kcd-scripts lint\",\n    \"test\": \"kcd-scripts test\",\n    \"test:update\": \"npm test -- --updateSnapshot --coverage\",\n    \"test:ts\": \"tsc --noEmit -p ./tsconfig.json\",\n    \"validate\": \"npm run test:ts && kcd-scripts validate\",\n    \"setup\": \"npm install && npm run validate -s\",\n    \"precommit\": \"kcd-scripts precommit\",\n    \"styleguide\": \"styleguidist server\",\n    \"styleguide:build\": \"styleguidist build\",\n    \"predeploy\": \"styleguidist build\",\n    \"deploy\": \"gh-pages -d styleguide\"\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"keywords\": [],\n  \"author\": \"stereobooster <stereobooster@gmail.com>\",\n  \"license\": \"MIT\",\n  \"peerDependencies\": {\n    \"prop-types\": \">=15\",\n    \"react\": \">=0.14.x\",\n    \"react-waypoint\": \">=8.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"16.4.18\",\n    \"babel-loader\": \"7.1.5\",\n    \"@babel/plugin-proposal-class-properties\": \"7.1.0\",\n    \"@babel/plugin-proposal-object-rest-spread\": \"7.0.0\",\n    \"@babel/preset-env\": \"7.1.0\",\n    \"@babel/preset-react\": \"7.0.0\",\n    \"gh-pages\": \"2.0.1\",\n    \"jest-canvas-mock\": \"1.1.0\",\n    \"kcd-scripts\": \"0.45.0\",\n    \"prop-types\": \"15.6.2\",\n    \"react\": \"16.6.0\",\n    \"react-dom\": \"16.6.0\",\n    \"react-styleguidist\": \"8.0.2\",\n    \"react-test-renderer\": \"16.6.0\",\n    \"react-testing-library\": \"5.2.3\",\n    \"react-waypoint\": \"8.0.3\",\n    \"typescript\": \"3.1.5\",\n    \"webpack\": \"4.24.0\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"./node_modules/kcd-scripts/eslint.js\",\n    \"rules\": {\n      \"complexity\": [\n        \"error\",\n        12\n      ],\n      \"no-case-declarations\": \"off\"\n    }\n  },\n  \"eslintIgnore\": [\n    \"node_modules\",\n    \"coverage\",\n    \"dist\",\n    \"styleguide\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/stereobooster/react-ideal-image.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/stereobooster/react-ideal-image/issues\"\n  },\n  \"homepage\": \"https://github.com/stereobooster/react-ideal-image#readme\"\n}\n"
        },
        {
          "name": "prettier.config.js",
          "type": "blob",
          "size": 0.0986328125,
          "content": "// this is really only here for editor integrations\nmodule.exports = require('kcd-scripts/prettier')\n"
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.0400390625,
          "content": "{\n  \"extends\": [\n    \"config:base\"\n  ]\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "styleguide.config.js",
          "type": "blob",
          "size": 0.490234375,
          "content": "module.exports = {\n  title: 'react-ideal-image',\n  components: 'src/components/**/index.js',\n  skipComponentsWithoutExample: true,\n  assetsDir: 'other/images',\n  webpackConfig: {\n    module: {\n      rules: [\n        {\n          test: /\\.jsx?$/,\n          exclude: /node_modules/,\n          loader: 'babel-loader',\n        },\n      ],\n    },\n    externals: {\n      react: 'react',\n      'react-dom': 'react-dom',\n      'prop-types': 'prop-types',\n      'react-waypoint': 'react-waypoint',\n    },\n  },\n}\n"
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.3349609375,
          "content": "{\n  \"compilerOptions\": {\n    \"jsx\": \"react\",\n    \"noUnusedLocals\": true,\n    \"strict\": true,\n    \"noImplicitReturns\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noEmitOnError\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"lib\": [\"es2016\", \"dom\"]\n  },\n  \"include\": [\"src/__tests__/**.tsx\"]\n}\n"
        }
      ]
    }
  ]
}