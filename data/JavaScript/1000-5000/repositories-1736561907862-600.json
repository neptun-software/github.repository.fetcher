{
  "metadata": {
    "timestamp": 1736561907862,
    "page": 600,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "AsyncBanana/microdiff",
      "stars": 3620,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0595703125,
          "content": "pnpm-lock.yaml\nbun.lockb\npackage-lock.json\nnode_modules\ndist\n"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.0234375,
          "content": "{\n    \"useTabs\": true\n}\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.15234375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n[GitHub Discussions](https://github.com/AsyncBanana/microdiff/discussions).\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2021 AsyncBanana\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Logo.svg",
          "type": "blob",
          "size": 2.751953125,
          "content": "<svg width=\"863\" height=\"321\" viewBox=\"0 0 863 321\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"863\" height=\"321\" fill=\"white\"/>\n<path d=\"M205.961 124.273V197H223.078V152.078H223.681L241.153 196.538H252.091L269.562 152.327H270.166V197H287.282V124.273H265.514L247.048 169.301H246.196L227.73 124.273H205.961ZM298.246 197H315.612V142.455H298.246V197ZM306.947 136.098C311.883 136.098 315.86 132.369 315.86 127.788C315.86 123.207 311.883 119.514 306.947 119.514C302.046 119.514 298.033 123.207 298.033 127.788C298.033 132.369 302.046 136.098 306.947 136.098ZM352.126 198.03C367.467 198.03 376.984 189.116 377.446 175.622H361.217C360.578 181.411 357.098 184.571 352.339 184.571C346.231 184.571 342.254 179.422 342.254 169.727C342.254 160.104 346.267 154.955 352.339 154.955C357.311 154.955 360.542 158.328 361.217 163.903H377.446C377.055 150.48 367.254 141.744 352.091 141.744C334.939 141.744 324.569 153.179 324.569 169.905C324.569 186.56 334.868 198.03 352.126 198.03ZM386.332 197H403.697V167.384C403.697 160.885 408.314 156.517 414.528 156.517C416.588 156.517 419.678 156.872 421.347 157.44V142.348C419.891 141.957 418.08 141.709 416.482 141.709C410.516 141.709 405.757 145.189 403.768 152.398H403.2V142.455H386.332V197ZM451.052 198.03C468.204 198.03 478.609 186.702 478.609 169.905C478.609 153.072 468.204 141.744 451.052 141.744C433.9 141.744 423.495 153.072 423.495 169.905C423.495 186.702 433.9 198.03 451.052 198.03ZM451.158 184.926C444.731 184.926 441.18 178.818 441.18 169.798C441.18 160.743 444.731 154.599 451.158 154.599C457.373 154.599 460.924 160.743 460.924 169.798C460.924 178.818 457.373 184.926 451.158 184.926Z\" fill=\"#3828EE\"/>\n<path d=\"M514.386 197C536.545 197 550.288 183.328 550.288 160.601C550.288 137.909 536.545 124.273 514.351 124.273H487.504V197H514.386ZM505.082 182.014V139.259H513.463C525.963 139.259 532.675 144.94 532.675 160.601C532.675 176.332 525.963 182.014 513.712 182.014H505.082ZM560.551 197H577.916V142.455H560.551V197ZM569.251 136.098C574.188 136.098 578.165 132.369 578.165 127.788C578.165 123.207 574.188 119.514 569.251 119.514C564.351 119.514 560.338 123.207 560.338 127.788C560.338 132.369 564.351 136.098 569.251 136.098ZM619.971 142.455H609.566V139.401C609.566 136.276 610.844 134.358 614.892 134.358C616.526 134.358 618.515 134.713 619.793 135.104L622.563 122.391C620.503 121.822 615.78 120.864 610.986 120.864C599.871 120.864 592.236 127.043 592.236 139.685V142.455H584.885V155.239H592.236V197H609.566V155.239H619.971V142.455ZM659.326 142.455H648.921V139.401C648.921 136.276 650.2 134.358 654.248 134.358C655.881 134.358 657.87 134.713 659.148 135.104L661.918 122.391C659.859 121.822 655.136 120.864 650.342 120.864C639.227 120.864 631.592 127.043 631.592 139.685V142.455H624.241V155.239H631.592V197H648.921V155.239H659.326V142.455Z\" fill=\"black\"/>\n</svg>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.80859375,
          "content": "<div align=\"center\">\n\n![Microdiff Logo](https://raw.githubusercontent.com/AsyncBanana/microdiff/master/Logo.svg)\n\nMicrodiff is a tiny (<1kb), fast, zero dependency object and array comparison library. It is significantly faster than most other deep comparison libraries, and has full TypeScript support.\n\n> 💡 I recommend reading this blog post:\n>\n> **[Building the fastest object and array differ](https://byteofdev.com/posts/microdiff/)** for an explanation of how Microdiff achieves its size and speed.\n\n![Minizipped Size (from Bundlephobia)](https://img.shields.io/bundlephobia/minzip/microdiff?style=flat-square) ![License](https://img.shields.io/npm/l/microdiff?style=flat-square) ![dependency Count](https://img.shields.io/badge/dependencies-0-green?style=flat-square)\n\n</div>\n\n# Features\n\n- 🚀 More than double the speed of other object diff libraries\n- 📦 Extremely lightweight, <1kb minified\n- 🌎 Supports Deno, Node, Bun, the web, and even service workers. Also comes with built-in Typescript types\n- 🔰 Very easy to use, having just a single `diff()` function\n- 📅 Full support for objects like `new Date()` and `new RegExp()`\n\n# Get started\n\nFirst, install Microdiff\n\n```\nnpm i microdiff\n```\n\nIf you are using Deno, you can import it from Deno.land with the link `https://deno.land/x/microdiff@VERSION/index.ts` (remember to change `@VERSION` to the version you want to use).\n\nAfter you install it, import it and run it on two objects.\n\n```js\nimport diff from \"microdiff\";\n\nconst obj1 = {\n\toriginalProperty: true,\n};\nconst obj2 = {\n\toriginalProperty: true,\n\tnewProperty: \"new\",\n};\n\nconsole.log(diff(obj1, obj2));\n// [{type: \"CREATE\", path: [\"newProperty\"], value: \"new\"}]\n```\n\nIf you are using CommonJS, you can import it like this:\n\n```js\nconst diff = require(\"microdiff\").default;\n```\n\nThere are three different types of changes: `CREATE`, `REMOVE`, and `CHANGE`.\nThe `path` property gives a path to the property in the new object (or the old object in the case of `REMOVE`).\nEach element in the paths is a key to the next property a level deeper until you get to the property changed, and it is a string or a number, depending on whether the object is an Array or Object (Objects with number keys will still be strings).\nThe `value` property exists in types `CREATE` and `CHANGE`, and it contains the value of the property added/changed/deleted.\nThe `oldValue` property exists in the type `CHANGE` and `REMOVE`, and it contains the old value of the property.\n\n# Cycles support\n\nBy default, Microdiff supports cyclical references, but if you are sure that the object has no cycles like parsed JSON, you can disable cycles using the `cyclesFix` option.\n\n```js\ndiff(obj1, obj2, { cyclesFix: false });\n```\n\n# Benchmarks\n\n```\nGeometric mean of time per operation relative to Microdiff (no cycles) (100%==equal time, lower is better)\nmicrodiff (no cycles): 100%\nmicrodiff: 149%\ndeep-diff: 197%\ndeep-object-diff: 288%\njsDiff: 1565%\n```\n\nThese results are from a suite of benchmarks matching real world use cases of multiple open-source repos using various diffing algorithm, running under Node 22.12.0 on a Ryzen 7950x clocked at ~4.30 GHz. The benchmarks are run through [mitata](https://github.com/evanwashere/mitata) to minimize random variation and time most accurately. You can view the full benchmark code in [bench.js](https://github.com/AsyncBanana/microdiff/blob/master/bench.js) and the benchmarks themselves at [benchmarks/applied](https://github.com/AsyncBanana/microdiff/tree/master/benchmarks/applied).\n\nOf course, [these benchmarks should be taken with a grain of salt](https://byteofdev.com/posts/javascript-benchmarking-mess/) due to the inherent errors present in benchmarking JavaScript, but if you want to run them on your own computer in your own runtime/setup, run `bench.js`.\n\n# Contributing\n\nThanks for helping the project out! Contributing is pretty simple. Fork the repository (if you need more information on how to do this, check out [this GitHub guide](https://docs.github.com/en/get-started/quickstart/contributing-to-projects)), clone it to your computer, and start programming! To compile the program, run `npm run build` (replace `npm` with `pnpm` or `yarn` if you are using one of those). This will create CommonJS and ESM modules in `/dist`.\n\nTo benchmark microdiff, you can run `npm run bench`. This will automatically build Microdiff and run a benchmarking program comparing microdiff to other common diffing libraries.\n\nFinally, Microdiff has an extensive test suite which you should take advantage of. To make sure everything is working correctly, you can run `npm run test`. `npm run test` builds the project and then runs the entire test suite on the new version. If you are fixing a bug, be sure to add a test for that.\nAlso, make sure you read the [Code of Conduct](https://github.com/AsyncBanana/microdiff/blob/master/CODE_OF_CONDUCT.md) before contributing.\n"
        },
        {
          "name": "bench.js",
          "type": "blob",
          "size": 1.8720703125,
          "content": "import { detailedDiff } from \"deep-object-diff\";\nimport { run, bench } from \"mitata\";\nimport microdiff from \"./dist/index.js\";\nimport { diffJson } from \"diff\";\nimport deepDiff from \"deep-diff\";\nimport colors from \"picocolors\";\nimport { readdirSync } from \"node:fs\";\nimport { resolve } from \"node:path\";\nimport { argv } from \"node:process\";\nconst benchmarkType = argv.includes(\"--theoretical\")\n\t? \"theoretical\"\n\t: \"applied\";\nconst avgs = [];\nconst benchmarks = readdirSync(resolve(\"./benchmarks\", benchmarkType)).filter(\n\t(file) => !file.startsWith(\"_\"),\n);\nconsole.log(`Running ${benchmarks.length} ${benchmarkType} benchmarks`);\nfor (const file of benchmarks) {\n\tconst benchmark = await import(resolve(\"benchmarks\", benchmarkType, file));\n\tconst obj = benchmark.original;\n\tconst newObj = benchmark.changed;\n\n\tbench(\"microdiff (no cycles)\", () =>\n\t\tmicrodiff(obj, newObj, { cyclesFix: false }),\n\t);\n\tbench(\"microdiff\", () => microdiff(obj, newObj));\n\tbench(\"deep-diff\", () => deepDiff.diff(obj, newObj));\n\tbench(\"deep-object-diff\", () => detailedDiff(obj, newObj));\n\tbench(\"jsDiff\", () => diffJson(obj, newObj));\n\n\tconsole.log(colors.green(colors.bold(benchmark.name)));\n\tconst res = await run();\n\tconst baselineAvg = res.benchmarks.find(\n\t\t(subres) => subres.alias == \"microdiff (no cycles)\",\n\t).runs[0].stats.avg;\n\tavgs.push(\n\t\tres.benchmarks.map((subres) => ({\n\t\t\talias: subres.alias,\n\t\t\tavg: subres.runs[0].stats.avg / baselineAvg,\n\t\t})),\n\t);\n}\nconst mean = {};\nfor (const ben of avgs) {\n\tfor (const algo of ben) {\n\t\tif (!mean[algo.alias]) {\n\t\t\tmean[algo.alias] = algo.avg;\n\t\t} else mean[algo.alias] *= algo.avg;\n\t}\n}\nconsole.log(\n\tcolors.bold(\n\t\tcolors.green(\n\t\t\t\"Geometric mean of time per operation relative to Microdiff (no cycles) (100%==equal time, lower is better)\",\n\t\t),\n\t),\n);\nfor (const algo in mean) {\n\tconsole.log(\n\t\t`${algo}: ${Math.round(Math.pow(mean[algo], 1 / benchmarks.length) * 100)}%`,\n\t);\n}\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.ts",
          "type": "blob",
          "size": 2.189453125,
          "content": "export interface DifferenceCreate {\n\ttype: \"CREATE\";\n\tpath: (string | number)[];\n\tvalue: any;\n}\n\nexport interface DifferenceRemove {\n\ttype: \"REMOVE\";\n\tpath: (string | number)[];\n\toldValue: any;\n}\n\nexport interface DifferenceChange {\n\ttype: \"CHANGE\";\n\tpath: (string | number)[];\n\tvalue: any;\n\toldValue: any;\n}\n\nexport type Difference = DifferenceCreate | DifferenceRemove | DifferenceChange;\n\ninterface Options {\n\tcyclesFix: boolean;\n}\n\nconst richTypes = { Date: true, RegExp: true, String: true, Number: true };\n\nexport default function diff(\n\tobj: Record<string, any> | any[],\n\tnewObj: Record<string, any> | any[],\n\toptions: Partial<Options> = { cyclesFix: true },\n\t_stack: Record<string, any>[] = [],\n): Difference[] {\n\tlet diffs: Difference[] = [];\n\tconst isObjArray = Array.isArray(obj);\n\n\tfor (const key in obj) {\n\t\tconst objKey = obj[key];\n\t\tconst path = isObjArray ? +key : key;\n\t\tif (!(key in newObj)) {\n\t\t\tdiffs.push({\n\t\t\t\ttype: \"REMOVE\",\n\t\t\t\tpath: [path],\n\t\t\t\toldValue: obj[key],\n\t\t\t});\n\t\t\tcontinue;\n\t\t}\n\t\tconst newObjKey = newObj[key];\n\t\tconst areCompatibleObjects =\n\t\t\ttypeof objKey === \"object\" &&\n\t\t\ttypeof newObjKey === \"object\" &&\n\t\t\tArray.isArray(objKey) === Array.isArray(newObjKey);\n\t\tif (\n\t\t\tobjKey &&\n\t\t\tnewObjKey &&\n\t\t\tareCompatibleObjects &&\n\t\t\t!richTypes[Object.getPrototypeOf(objKey)?.constructor?.name] &&\n\t\t\t(!options.cyclesFix || !_stack.includes(objKey))\n\t\t) {\n\t\t\tdiffs.push.apply(\n\t\t\t\tdiffs,\n\t\t\t\tdiff(\n\t\t\t\t\tobjKey,\n\t\t\t\t\tnewObjKey,\n\t\t\t\t\toptions,\n\t\t\t\t\toptions.cyclesFix ? _stack.concat([objKey]) : [],\n\t\t\t\t).map((difference) => {\n\t\t\t\t\tdifference.path.unshift(path);\n\t\t\t\t\treturn difference;\n\t\t\t\t}),\n\t\t\t);\n\t\t} else if (\n\t\t\tobjKey !== newObjKey &&\n\t\t\t// treat NaN values as equivalent\n\t\t\t!(Number.isNaN(objKey) && Number.isNaN(newObjKey)) &&\n\t\t\t!(\n\t\t\t\tareCompatibleObjects &&\n\t\t\t\t(isNaN(objKey)\n\t\t\t\t\t? objKey + \"\" === newObjKey + \"\"\n\t\t\t\t\t: +objKey === +newObjKey)\n\t\t\t)\n\t\t) {\n\t\t\tdiffs.push({\n\t\t\t\tpath: [path],\n\t\t\t\ttype: \"CHANGE\",\n\t\t\t\tvalue: newObjKey,\n\t\t\t\toldValue: objKey,\n\t\t\t});\n\t\t}\n\t}\n\n\tconst isNewObjArray = Array.isArray(newObj);\n\tfor (const key in newObj) {\n\t\tif (!(key in obj)) {\n\t\t\tdiffs.push({\n\t\t\t\ttype: \"CREATE\",\n\t\t\t\tpath: [isNewObjArray ? +key : key],\n\t\t\t\tvalue: newObj[key],\n\t\t\t});\n\t\t}\n\t}\n\treturn diffs;\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.1181640625,
          "content": "{\n\t\"name\": \"microdiff\",\n\t\"version\": \"1.5.0\",\n\t\"description\": \"Small, fast, zero dependency deep object and array comparison\",\n\t\"main\": \"./dist/index.cjs\",\n\t\"module\": \"./dist/index.js\",\n\t\"exports\": {\n\t\t\"import\": \"./dist/index.js\",\n\t\t\"require\": \"./dist/index.cjs\"\n\t},\n\t\"scripts\": {\n\t\t\"build\": \"tsc --module CommonJS && mv \\\"dist/index.js\\\" \\\"dist/index.cjs\\\" && mv \\\"dist/index.d.ts\\\" \\\"dist/index.d.cts\\\" && tsc --module es2020 && prettier -w dist/*\",\n\t\t\"test\": \"npm run build && node --test ./tests/*\",\n\t\t\"bench\": \"npm run build && node --expose-gc bench.js\",\n\t\t\"prepublish\": \"npm run build\"\n\t},\n\t\"keywords\": [\n\t\t\"diff\",\n\t\t\"comparison\"\n\t],\n\t\"author\": \"AsyncBanana\",\n\t\"license\": \"MIT\",\n\t\"files\": [\n\t\t\"dist\"\n\t],\n\t\"devDependencies\": {\n\t\t\"deep-diff\": \"^1.0.2\",\n\t\t\"deep-object-diff\": \"^1.1.9\",\n\t\t\"diff\": \"^7.0.0\",\n\t\t\"mitata\": \"^1.0.19\",\n\t\t\"picocolors\": \"^1.1.1\",\n\t\t\"prettier\": \"^3.4.1\",\n\t\t\"typescript\": \"^5.7.2\"\n\t},\n\t\"type\": \"module\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/AsyncBanana/microdiff\"\n\t},\n\t\"homepage\": \"https://github.com/AsyncBanana/microdiff#readme\",\n\t\"bugs\": \"https://github.com/AsyncBanana/microdiff/issues\"\n}\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.185546875,
          "content": "{\n\t\"files\": [\"index.ts\"],\n\t\"buildOptions\": {},\n\t\"compilerOptions\": {\n\t\t\"outDir\": \"dist\",\n\t\t\"declaration\": true,\n\t\t\"target\": \"ES2020\",\n\t\t\"moduleResolution\": \"node\",\n\t\t\"module\": \"ES2020\"\n\t}\n}\n"
        }
      ]
    }
  ]
}