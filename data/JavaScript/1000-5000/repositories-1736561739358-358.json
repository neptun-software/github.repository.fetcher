{
  "metadata": {
    "timestamp": 1736561739358,
    "page": 358,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "imsun/gitment",
      "stars": 4062,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".babelrc",
          "type": "blob",
          "size": 0.0263671875,
          "content": "{\n  \"presets\": [\"es2015\"]\n}"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0595703125,
          "content": ".DS_Store\n.idea\n\nnode_modules\n\ndist\ntest/config.js\nindex.html"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.1181640625,
          "content": ".DS_Store\n.idea\n.gitignore\n.npmignore\n.babelrc\n\nnode_modules\n\nsrc\ntest\nindex.html\nwebpack.config.js\nwebpack.dev.config.js"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 imsun\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.32421875,
          "content": "# Gitment\n\n\n[![NPM version][npm-image]][npm-url]\n\n[npm-image]: https://img.shields.io/npm/v/gitment.svg\n[npm-url]: https://www.npmjs.com/package/gitment\n\nGitment is a comment system based on GitHub Issues,\nwhich can be used in the frontend without any server-side implementation.\n\n[Demo Page](https://imsun.github.io/gitment/)\n\n[中文简介](https://imsun.net/posts/gitment-introduction/)\n\n- [Features](#features)\n- [Get Started](#get-started)\n- [Methods](#methods)\n- [Customize](#customize)\n- [About Security](#about-security)\n\n## Features\n\n- GitHub Login\n- Markdown / GFM support\n- Syntax highlighting\n- Notifications from GitHub\n- Easy to customize\n- No server-side implementation\n\n## Get Started\n\n### 1. Install\n\n```html\n<link rel=\"stylesheet\" href=\"https://imsun.github.io/gitment/style/default.css\">\n```\n\n```html\n<script src=\"https://imsun.github.io/gitment/dist/gitment.browser.js\"></script>\n```\n\nor via npm:\n\n```sh\n$ npm i --save gitment\n```\n\n```javascript\nimport 'gitment/style/default.css'\nimport Gitment from 'gitment'\n```\n\n### 2. Register An OAuth Application\n\n[Click here](https://github.com/settings/applications/new) to register an OAuth application, and you will get a client ID and a client secret.\n\nMake sure the callback URL is right. Generally it's the origin of your site, like [https://imsun.net](https://imsun.net).\n\n### 3. Render Gitment\n\n```javascript\nconst gitment = new Gitment({\n  id: 'Your page ID', // optional\n  owner: 'Your GitHub ID',\n  repo: 'The repo to store comments',\n  oauth: {\n    client_id: 'Your client ID',\n    client_secret: 'Your client secret',\n  },\n  // ...\n  // For more available options, check out the documentation below\n})\n\ngitment.render('comments')\n// or\n// gitment.render(document.getElementById('comments'))\n// or\n// document.body.appendChild(gitment.render())\n```\n\n### 4. Initialize Your Comments\n\nAfter the page is published, you should visit your page, login with your GitHub account(make sure you're repo's owner), and click the initialize button, to create a related issue in your repo.\nAfter that, others can leave their comments.\n   \n## Methods\n\n### constructor(options)\n\n#### options:\n\nType: `object` \n\n- owner: Your GitHub ID. Required.\n- repo: The repository to store your comments. Make sure you're repo's owner. Required.\n- oauth: An object contains your client ID and client secret. Required.\n    - client_id: GitHub client ID. Required.\n    - client_secret: GitHub client secret. Required.\n- id: An optional string to identify your page. Default `location.href`.\n- title: An optional title for your page, used as issue's title. Default `document.title`.\n- link: An optional link for your page, used in issue's body. Default `location.href`.\n- desc: An optional description for your page, used in issue's body. Default `''`.\n- labels: An optional array of labels your want to add when creating the issue. Default `[]`.\n- theme: An optional Gitment theme object. Default `gitment.defaultTheme`.\n- perPage: An optional number to which comments will be paginated. Default `20`.\n- maxCommentHeight: An optional number to limit comments' max height, over which comments will be folded. Default `250`.\n\n### gitment.render([element])\n\n#### element\n\nType: `HTMLElement` or `string`\n\nThe DOM element to which comments will be rendered. Can be an HTML element or element's id. When omitted, this function will create a new `div` element.\n\nThis function returns the element to which comments be rendered.\n\n### gitment.renderHeader([element])\n\nSame like `gitment.render([element])`. But only renders the header.\n\n### gitment.renderComments([element])\n\nSame like `gitment.render([element])`. But only renders comments list.\n\n\n### gitment.renderEditor([element])\n\nSame like `gitment.render([element])`. But only renders the editor.\n\n\n### gitment.renderFooter([element])\n\nSame like `gitment.render([element])`. But only renders the footer.\n\n### gitment.init()\n\nInitialize a new page. Returns a `Promise` and resolves when initialized.\n\n### gitment.update()\n\nUpdate data and views. Returns a `Promise` and resolves when data updated. \n\n### gitment.post()\n\nPost comment in the editor. Returns a `Promise` and resolves when posted.\n\n### gitment.markdown(text)\n\n#### text\n\nType: `string`\n\nReturns a `Promise` and resolves rendered text.\n\n### gitment.login()\n\nJump to GitHub OAuth page to login.\n\n### gitment.logout()\n\nLog out current user.\n\n### goto(page)\n\n#### page\n\nType: `number`\n\nJump to the target page of comments. Notice that `page` starts from `1`. Returns a `Promise` and resolves when comments loaded.\n\n### gitment.like()\n\nLike current page. Returns a `Promise` and resolves when liked.\n\n### gitment.unlike()\n\nUnlike current page. Returns a `Promise` and resolves when unliked.\n\n### gitment.likeAComment(commentId)\n\n#### commentId\n\nType: `string`\n\nLike a comment. Returns a `Promise` and resolves when liked.\n\n### gitment.unlikeAComment(commentId)\n\n#### commentId\n\nType: `string`\n\nUnlike a comment. Returns a `Promise` and resolves when unliked.\n\n## Customize\n\nGitment is easy to customize. You can use your own CSS or write a theme.\n(The difference is that customized CSS can't modify DOM structure)\n\n### Use Customized CSS\n\nGitment does't use any atomic CSS, making it easier and more flexible to customize.\nYou can inspect the DOM structure in the browser and write your own styles.\n\n### Write A Theme\n\nA Gitment theme is an object contains several render functions.\n \nBy default Gitment has five render functions: `render`, `renderHeader`, `renderComments`, `renderEditor`, `renderFooter`.\nThe last four render independent components and `render` functions render them together.\nAll of them can be used independently.\n\nYou can override any render function above or write your own render function.\n\nFor example, you can override the `render` function to put an editor before the comment list, and render a new component.\n\n```javascript\nconst myTheme = {\n  render(state, instance) {\n    const container = document.createElement('div')\n    container.lang = \"en-US\"\n    container.className = 'gitment-container gitment-root-container'\n    \n     // your custom component\n    container.appendChild(instance.renderSomething(state, instance))\n    \n    container.appendChild(instance.renderHeader(state, instance))\n    container.appendChild(instance.renderEditor(state, instance))\n    container.appendChild(instance.renderComments(state, instance))\n    container.appendChild(instance.renderFooter(state, instance))\n    return container\n  },\n  renderSomething(state, instance) {\n    const container = document.createElement('div')\n    container.lang = \"en-US\"\n    if (state.user.login) {\n      container.innerText = `Hello, ${state.user.login}`\n    }\n    return container\n  }\n}\n\nconst gitment = new Gitment({\n  // ...\n  theme: myTheme,\n})\n\ngitment.render(document.body)\n// or\n// gitment.renderSomthing(document.body)\n```\n\nEach render function should receive a state object and a gitment instance, and return an HTML element.\nIt will be wrapped attached to the Gitment instance with the same name.\n\nGitment uses [MobX](https://github.com/mobxjs/mobx) to detect states used in render functions.\nOnce used states change, Gitment will call the render function to get a new element and render it.\nUnused states' changing won't affect rendered elements.\n\nAvailable states:\n\n- user: `object`. User info returned from [GitHub Users API](https://developer.github.com/v3/users/#get-the-authenticated-user) with two more keys.\n    - isLoggingIn: `bool`. Indicates if user is logging in.\n    - fromCache: `bool`. Gitment will cache user's information. Its value indicates if current user info is from cache.\n- error: `Error Object`. Will be null if no error occurs.\n- meta: `object`. Issue's info returned from [GitHub Issues API](https://developer.github.com/v3/issues/#list-issues).\n- comments: `array`. Array of comment returned from [GitHub Issue Comments API](/repos/:owner/:repo/issues/:number/comments). Will be `undefined` when comments not loaded.\n- reactions: `array`. Array of reactions added to current page, returned from [GitHub Issues' Reactions API](https://developer.github.com/v3/reactions/#list-reactions-for-an-issue).\n- commentReactions: `object`. Object of reactions added to comments, with comment ID as key, returned from [GitHub Issue Comments' Reactions API](/repos/:owner/:repo/issues/comments/:id/reactions).\n- currentPage: `number`. Which page of comments is user on. Starts from `1`.\n\n## About Security\n\n### Is it safe to make my client secret public?\n\nClient secret is necessary for OAuth, without which users can't login or comment with their GitHub accounts.\nAlthough GitHub does't recommend to hard code client secret in the frontend, you can still do that because GitHub will verify your callback URL. \nIn theory, no one else can use your secret except your site.\n\nIf you find a way to hack it, please [open an issue](https://github.com/imsun/gitment/issues/new).\n\n### Why does Gitment send a request to gh-oauth.imsun.net?\n\n[https://gh-oauth.imsun.net](https://gh-oauth.imsun.net) is an simple open-source service to proxy [one request](https://developer.github.com/v3/oauth/#2-github-redirects-back-to-your-site) during users logging in.\nBecause GitHub doesn't attach a CORS header to it.\n\nThis service won't record or store anything. It only attaches a CORS header to that request and provides proxy.\nSo that users can login in the frontend without any server-side implementation.\n\nFor more details, checkout [this project](https://github.com/imsun/gh-oauth-server).\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.033203125,
          "content": "{\n  \"name\": \"gitment\",\n  \"version\": \"0.0.3\",\n  \"description\": \"A comment system based on GitHub Issues\",\n  \"main\": \"./dist/gitment.js\",\n  \"author\": {\n    \"name\": \"Shiquan Sun\",\n    \"url\": \"https://github.com/imsun\"\n  },\n  \"keywords\": [\n    \"comment system\",\n    \"GitHub Issues\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/imsun/gitment\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/imsun/gitment/issues\"\n  },\n  \"homepage\": \"https://github.com/imsun/gitment\",\n  \"scripts\": {\n    \"build\": \"babel src --out-dir dist --ignore test.js --source-maps & NODE_ENV=production webpack --config webpack.config.js --progress --profile --colors\",\n    \"dev\": \"webpack-dev-server --config webpack.dev.config.js --host 0.0.0.0 --progress --profile --colors\"\n  },\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.24.0\",\n    \"babel-core\": \"^6.24.0\",\n    \"babel-loader\": \"^6.4.1\",\n    \"babel-preset-es2015\": \"^6.24.0\",\n    \"webpack\": \"^2.3.2\",\n    \"webpack-dev-server\": \"^2.4.2\"\n  },\n  \"dependencies\": {\n    \"mobx\": \"^3.1.7\"\n  },\n  \"license\": \"MIT\"\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "style",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "webpack.config.js",
          "type": "blob",
          "size": 0.421875,
          "content": "const path = require('path')\n\nmodule.exports = {\n  context: path.join(__dirname, 'src'),\n  entry: './gitment.js',\n  devtool: 'source-map',\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'gitment.browser.js',\n    libraryTarget: 'var',\n    library: 'Gitment',\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /^node_mocules/,\n        loaders: ['babel-loader'],\n      },\n    ],\n  },\n}\n"
        },
        {
          "name": "webpack.dev.config.js",
          "type": "blob",
          "size": 0.4423828125,
          "content": "const path = require('path')\n\nmodule.exports = {\n  context: path.join(__dirname, 'src'),\n  entry: './test.js',\n  devtool: 'source-map',\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'test.js',\n    publicPath: '/dist/',\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /^node_mocules/,\n        loaders: ['babel-loader'],\n      },\n    ],\n  },\n  devServer: {\n    port: 3000,\n    contentBase: './',\n  },\n}\n"
        }
      ]
    }
  ]
}