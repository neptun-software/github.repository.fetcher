{
  "metadata": {
    "timestamp": 1736561824520,
    "page": 481,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mudcube/MIDI.js",
      "stars": 3825,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2275390625,
          "content": "generator/sf2/*\ngenerator/ruby/soundfont*\n**/source*\n**/build*\n*/soundfont/*\n!examples/soundfont/acoustic_grand_piano*\n!examples/soundfont/synth_drum*\noggenc\noggdec\n\n# NODE/NPM\nnode_modules*\nnpm-debug.log\n\n# FORMATS\n*.gz\n*.DS_Store\n\n"
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 1.154296875,
          "content": "/*\n\t----------------------------------------------------------\n\tBuild environment\n\t----------------------------------------------------------\n\t1) Install NodeJS:\n\t\thttp://nodejs.org/\n\t2) Install dev dependencies\n\t  npm install\n\t3) Install Grunt CLI globally\n\t\tnpm install grunt-cli -g\n\t----------------------------------------------------------\n*/\n\nmodule.exports = function (grunt) {\n\tgrunt.initConfig({\n\t\tconcat: {\n\t\t\t'build/MIDI.js': [\n//\t\t\t\t'js/color/spaceW3.js', // optional\n\t\t\t\t'js/midi/audioDetect.js',\n\t\t\t\t'js/midi/gm.js',\n\t\t\t\t'js/midi/loader.js',\n\t\t\t\t'js/midi/player.js',\n\t\t\t\t'js/midi/plugin.audiotag.js',\n\t\t\t\t'js/midi/plugin.webaudio.js',\n\t\t\t\t'js/midi/plugin.webmidi.js',\n//\t\t\t\t'js/midi/synesthesia.js', // optional\n\t\t\t\t'js/util/dom_request_xhr.js', // req when using XHR\n\t\t\t\t'js/util/dom_request_script.js', // req otherwise\n//\t\t\t\t'js/widget/loader.js', // optional\n\t\t\t\t'inc/polyfill/Base64.js',\n\t\t\t\t'inc/polyfill/base64binary.js'\n\t\t\t]\n\t\t},\n\t\tuglify: {\n\t\t\t'build/MIDI.min.js': [\n\t\t\t\t'build/MIDI.js'\n\t\t\t]\n\t\t}\n\t});\n\n\tgrunt.loadNpmTasks('grunt-contrib-concat');\n\tgrunt.loadNpmTasks('grunt-contrib-uglify');\n\n\t///\n\tgrunt.registerTask('default', ['concat', 'uglify']);\n\t///\n};"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.076171875,
          "content": "The MIT License\n\nCopyright (c) 2010-2013 MIDI.js Authors. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.837890625,
          "content": "## Code examples - from the repo\n\n* [Basic](./examples/Basic.html) - the most basic implementation.\n* [MIDIPlayer](./examples/MIDIPlayer.html) - how to parse MIDI files, and interact with the data stream.\n* [WhitneyMusicBox](./examples/WhitneyMusicBox.html) - a audio/visual experiment by Jim Bumgardner\n\n## Demos\n\n* [3D Piano Player w/ Three.js](http://www.rgba.org/r3d/3d-piano-player/) by Borja Morales @reality3d\n* [Brite Lite](http://labs.uxmonk.com/brite-lite/) by Daniel Christopher @uxmonk\n* [Color Piano](http://mudcu.be/piano) by Michael Deal @mudcube\n* [Euphony 3D Piano](http://qiao.github.com/euphony/) by Xueqiao Xu @qiao\n* [Gbloink!](http://gbloink.com/alpha/) by Phil Jones\n* [Piano Typewriter](http://www.picatino.com/piano_typewriter/) by Andrew Levine\n* [Ragamroll](http://online-compute.rhcloud.com/ragamroll/) by Mani Balasubramanian\n* [Simon Says](http://labs.uxmonk.com/simon-says/) by Daniel Christopher @uxmonk\n* [Spiral Keyboard](http://spiral.qet.me/) by Patrick Snels\n* [VexFlow](http://my.vexflow.com/articles/53) by Mohit Muthanna @11111110b\n\n## Related repositories\n\n* [MIDI Pictures](https://github.com/andruo11/midi-pictures): Pictures of the 128 standard instruments on MIDI piano keyboards\n* [MIDI Soundfonts](https://github.com/gleitz/midi-js-soundfonts): Pre-rendered General MIDI soundfonts that can be used immediately with MIDI.js\n\n## Generating Base64 Soundfonts\n\nThere is two generators for MIDI.js soundfonts:\n\n* NodeJS package for creating soundfonts from WAV files - by Patrick Wolleb\n* Ruby package for creating soundsfonts from SF2 files - by Mohit Muthanna\n\nTo dive in quickly Benjamin Gleitzman has created a package of [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts).\n\n## API\n\n### [MIDI.loadPlugin.js](./js/midi/loader.js) - Decides which framework is best to use\n\n```javascript\n// interface to download soundfont, then execute callback;\nMIDI.loadPlugin(onsuccess);\n// simple example to get started;\nMIDI.loadPlugin({\n    instrument: \"acoustic_grand_piano\", // or the instrument code 1 (aka the default)\n    instruments: [ \"acoustic_grand_piano\", \"acoustic_guitar_nylon\" ], // or multiple instruments\n    onsuccess: function() { }\n});\n```\n\n### [MIDI.Plugin.js](./js/midi/plugin.webaudio.js) - Controls MIDI output\n\n```javascript\nMIDI.noteOn(channel, note, velocity, delay);\nMIDI.noteOff(channel, note, delay);\nMIDI.chordOn(channel, [note, note, note], velocity, delay);\nMIDI.chordOff(channel, [note, note, note], delay);\nMIDI.keyToNote = object; // A0 => 21\nMIDI.noteToKey = object; // 21 => A0\n```\n\n### [MIDI.Player.js](./js/midi/player.js) - Plays MIDI stream\n\n```javascript\nMIDI.Player.currentTime = integer; // time we are at now within the song.\nMIDI.Player.endTime = integer; // time when song ends.\nMIDI.Player.playing = boolean; // are we playing? yes or no.\nMIDI.Player.loadFile(file, onsuccess); // load .MIDI from base64 or binary XML request.\nMIDI.Player.start(); // start the MIDI track (you can put this in the loadFile callback)\nMIDI.Player.resume(); // resume the MIDI track from pause.\nMIDI.Player.pause(); // pause the MIDI track.\nMIDI.Player.stop(); // stops all audio being played, and resets currentTime to 0.\n```\n\n### Listener for when notes are played\n\n```javascript\nMIDI.Player.removeListener(); // removes current listener.\nMIDI.Player.addListener(function(data) { // set it to your own function!\n    var now = data.now; // where we are now\n    var end = data.end; // time when song ends\n    var channel = data.channel; // channel note is playing on\n    var message = data.message; // 128 is noteOff, 144 is noteOn\n    var note = data.note; // the note\n    var velocity = data.velocity; // the velocity of the note\n    // then do whatever you want with the information!\n});\n```\n\n### Smooth animation interpolating between onMidiEvent calls\n\n```javascript\nMIDI.Player.clearAnimation(); // clears current animation.\nMIDI.Player.setAnimation(function(data) {\n    var now = data.now; // where we are now\n    var end = data.end; // time when song ends\n    var events = data.events; // all the notes currently being processed\n    // then do what you want with the information!\n});\n```\n\n### Effects available for WebAudioContext via Tuna.js\n\n```javascript\nMIDI.setEffects([\n        {\n \t\ttype: \"MoogFilter\",\n\t\tbufferSize: 4096,\n\t\tbypass: false,\n\t\tcutoff: 0.065,\n\t\tresonance: 3.5\n\t},\n\t{\n\t\ttype: \"Bitcrusher\",\n\t\tbits: 4,\n\t\tbufferSize: 4096,\n\t\tbypass: false,\n\t\tnormfreq: 0.1\n\t},\n\t{\n\t\ttype: \"Phaser\",\n\t\trate: 1.2, // 0.01 to 8 is a decent range, but higher values are possible\n\t\tdepth: 0.3, // 0 to 1\n\t\tfeedback: 0.2, // 0 to 1+\n\t\tstereoPhase: 30, // 0 to 180\n\t\tbaseModulationFrequency: 700, // 500 to 1500\n\t\tbypass: 0\n\t}, {\n\t\ttype: \"Chorus\",\n\t\trate: 1.5,\n\t\tfeedback: 0.2,\n\t\tdelay: 0.0045,\n\t\tbypass: 0\n\t}, {\n\t\ttype: \"Delay\",\n\t\tfeedback: 0.45, // 0 to 1+\n\t\tdelayTime: 150, // how many milliseconds should the wet signal be delayed? \n\t\twetLevel: 0.25, // 0 to 1+\n\t\tdryLevel: 1, // 0 to 1+\n\t\tcutoff: 20, // cutoff frequency of the built in highpass-filter. 20 to 22050\n\t\tbypass: 0\n\t}, {\n\t\ttype: \"Overdrive\",\n\t\toutputGain: 0.5, // 0 to 1+\n\t\tdrive: 0.7, // 0 to 1\n\t\tcurveAmount: 1, // 0 to 1\n\t\talgorithmIndex: 0, // 0 to 5, selects one of our drive algorithms\n\t\tbypass: 0\n\t}, {\n\t\ttype: \"Compressor\",\n\t\tthreshold: 0.5, // -100 to 0\n\t\tmakeupGain: 1, // 0 and up\n\t\tattack: 1, // 0 to 1000\n\t\trelease: 0, // 0 to 3000\n\t\tratio: 4, // 1 to 20\n\t\tknee: 5, // 0 to 40\n\t\tautomakeup: true, // true/false\n\t\tbypass: 0\n\t}, {\n\t\ttype: \"Convolver\",\n\t\thighCut: 22050, // 20 to 22050\n\t\tlowCut: 20, // 20 to 22050\n\t\tdryLevel: 1, // 0 to 1+\n\t\twetLevel: 1, // 0 to 1+\n\t\tlevel: 1, // 0 to 1+, adjusts total output of both wet and dry\n\t\timpulse: \"./inc/tuna/impulses/impulse_rev.wav\", // the path to your impulse response\n\t\tbypass: 0\n\t}, {\n\t\ttype: \"Filter\",\n\t\tfrequency: 20, // 20 to 22050\n\t\tQ: 1, // 0.001 to 100\n\t\tgain: 0, // -40 to 40\n\t\tbypass: 1, // 0 to 1+\n\t\tfilterType: 0 // 0 to 7, corresponds to the filter types in the native filter node: lowpass, highpass, bandpass, lowshelf, highshelf, peaking, notch, allpass in that order\n\t}, {\n\t\ttype: \"Cabinet\",\n\t\tmakeupGain: 1, // 0 to 20\n\t\timpulsePath: \"./inc/tuna/impulses/impulse_guitar.wav\", // path to your speaker impulse\n\t\tbypass: 0\n\t}, {\n\t\ttype: \"Tremolo\",\n\t\tintensity: 0.3, // 0 to 1\n\t\trate: 0.1, // 0.001 to 8\n\t\tstereoPhase: 0, // 0 to 180\n\t\tbypass: 0\n\t}, {\n\t\ttype: \"WahWah\",\n\t\tautomode: true, // true/false\n\t\tbaseFrequency: 0.5, // 0 to 1\n\t\texcursionOctaves: 2, // 1 to 6\n\t\tsweep: 0.2, // 0 to 1\n\t\tresonance: 10, // 1 to 100\n\t\tsensitivity: 0.5, // -1 to 1\n\t\tbypass: 0\n\t}\n]);\n```\n\n## Libraries\n\n* [colorspace.js](./examples/inc/colorspace.js): Color conversions, music isn&rsquo;t complete without!\n<pre>Color.Space(0xff0000, \"HEX>RGB>HSL\");</pre>\n* [dom_request_script.js](./js/util/dom_request_script.js): Loads scripts in synchronously, or asynchronously.\n<pre>DOMLoader.script.add(src, onsuccess);</pre>\n* [dom_request_xhr.js](./js/util/dom_request_xhr.js): Cross-browser XMLHttpd request.\n<pre>DOMLoader.sendRequest(src, onsuccess);</pre>\n* [synesthesia.js](./js/midi/synesthesia.js): Note-to-color mappings (from Isaac Newton onwards).\n\n### Many thanks to the authors of these libraries\n\n* [Web MIDI API](http://webaudio.github.io/web-midi-api/): W3C proposal by Jussi Kalliokoski & Chris Wilson\n* [Web Audio API](https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html): W3C proposal by Chris Rogers\n* [&lt;audio&gt;](http://dev.w3.org/html5/spec/Overview.html): HTML5 specs\n* Flash package: [SoundManager2](http://www.schillmania.com/projects/soundmanager2/) by [Scott Schiller](http://schillmania.com)\n* [jasmid](https://github.com/gasman/jasmid): Reads MIDI file byte-code, and translats into a Javascript array.\n* [base642binary.js](http://blog.danguer.com/2011/10/24/base64-binary-decoding-in-javascript/): Cleans up XML base64-requests for Web Audio API.\n\n## Similar projects\n* [Wild Web MIDI](http://zz85.github.io/wild-web-midi/) by [@BlurSpline](https://twitter.com/BlurSpline)\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 1.0009765625,
          "content": "----------------------------------------------------------\nTODO\n----------------------------------------------------------\n\t* Sound on Android/iOS working? Check various devices\n\t------------------------------------------------------\n\t* Add browser supports to the project\n\t------------------------------------------------------\n\t* Loading progress feedback example\n\t------------------------------------------------------\n\t* Document how to support from file://\n\t\t<script src=\"./soundfont/acoustic_grand_piano-ogg.js\"></script>\n\t------------------------------------------------------\n\t* better on event listeners for MIDIPlayer, get inspiration from these?\n\t\thttps://github.com/hhromic/midi-utils-js\n\t\thttps://github.com/justinlatimer/node-midi\n\t------------------------------------------------------\n\t* add some docs on color music history: http://www.musanim.com/\n\t------------------------------------------------------\n\t* List of Developers who work w/ MIDI.js\n\t\t???\n\t------------------------------------------------------"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "inc",
          "type": "tree",
          "content": null
        },
        {
          "name": "js",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.5107421875,
          "content": "{\n  \"name\": \"midi\",\n  \"version\": \"0.3.0\",\n  \"description\": \"Library to assist in creating HTML5 MIDI apps.\",\n  \"author\": \"Michael Deal\",\n  \"contributors\": [\n    \"Sergi Mansilla\",\n    \"Daniel van der Meer\",\n    \"Mohit Muthanna\",\n    \"Pete Otaqui\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/mudcube/MIDI.js.git\"\n  },\n  \"main\": \"./build/MIDI.min.js\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"grunt\": \"~0.4.0\",\n    \"grunt-contrib-concat\": \"~0.1.3\",\n    \"grunt-contrib-uglify\": \"~0.1.2\"\n  }\n}\n"
        }
      ]
    }
  ]
}