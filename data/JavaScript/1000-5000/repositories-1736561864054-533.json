{
  "metadata": {
    "timestamp": 1736561864054,
    "page": 533,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nolanlawson/optimize-js",
      "stars": 3751,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0888671875,
          "content": "node_modules\nnpm-debug.log\n/benchmarks/**/*.optimized.js\n/benchmarks/**/*.min.js\n/coverage\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1484375,
          "content": "language: node_js\nnode_js:\n- \"6\"\nsudo: false\nscript: npm run $COMMAND\nenv:\n  matrix:\n  - COMMAND=test\n  - COMMAND=coverage\nbranches:\n  only:\n  - master\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.9267578125,
          "content": "\n                                Apache License\n                          Version 2.0, January 2004\n                       http://www.apache.org/licenses/\n\n  TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n  1. Definitions.\n\n     \"License\" shall mean the terms and conditions for use, reproduction,\n     and distribution as defined by Sections 1 through 9 of this document.\n\n     \"Licensor\" shall mean the copyright owner or entity authorized by\n     the copyright owner that is granting the License.\n\n     \"Legal Entity\" shall mean the union of the acting entity and all\n     other entities that control, are controlled by, or are under common\n     control with that entity. For the purposes of this definition,\n     \"control\" means (i) the power, direct or indirect, to cause the\n     direction or management of such entity, whether by contract or\n     otherwise, or (ii) ownership of fifty percent (50%) or more of the\n     outstanding shares, or (iii) beneficial ownership of such entity.\n\n     \"You\" (or \"Your\") shall mean an individual or Legal Entity\n     exercising permissions granted by this License.\n\n     \"Source\" form shall mean the preferred form for making modifications,\n     including but not limited to software source code, documentation\n     source, and configuration files.\n\n     \"Object\" form shall mean any form resulting from mechanical\n     transformation or translation of a Source form, including but\n     not limited to compiled object code, generated documentation,\n     and conversions to other media types.\n\n     \"Work\" shall mean the work of authorship, whether in Source or\n     Object form, made available under the License, as indicated by a\n     copyright notice that is included in or attached to the work\n     (an example is provided in the Appendix below).\n\n     \"Derivative Works\" shall mean any work, whether in Source or Object\n     form, that is based on (or derived from) the Work and for which the\n     editorial revisions, annotations, elaborations, or other modifications\n     represent, as a whole, an original work of authorship. For the purposes\n     of this License, Derivative Works shall not include works that remain\n     separable from, or merely link (or bind by name) to the interfaces of,\n     the Work and Derivative Works thereof.\n\n     \"Contribution\" shall mean any work of authorship, including\n     the original version of the Work and any modifications or additions\n     to that Work or Derivative Works thereof, that is intentionally\n     submitted to Licensor for inclusion in the Work by the copyright owner\n     or by an individual or Legal Entity authorized to submit on behalf of\n     the copyright owner. For the purposes of this definition, \"submitted\"\n     means any form of electronic, verbal, or written communication sent\n     to the Licensor or its representatives, including but not limited to\n     communication on electronic mailing lists, source code control systems,\n     and issue tracking systems that are managed by, or on behalf of, the\n     Licensor for the purpose of discussing and improving the Work, but\n     excluding communication that is conspicuously marked or otherwise\n     designated in writing by the copyright owner as \"Not a Contribution.\"\n\n     \"Contributor\" shall mean Licensor and any individual or Legal Entity\n     on behalf of whom a Contribution has been received by Licensor and\n     subsequently incorporated within the Work.\n\n  2. Grant of Copyright License. Subject to the terms and conditions of\n     this License, each Contributor hereby grants to You a perpetual,\n     worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n     copyright license to reproduce, prepare Derivative Works of,\n     publicly display, publicly perform, sublicense, and distribute the\n     Work and such Derivative Works in Source or Object form.\n\n  3. Grant of Patent License. Subject to the terms and conditions of\n     this License, each Contributor hereby grants to You a perpetual,\n     worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n     (except as stated in this section) patent license to make, have made,\n     use, offer to sell, sell, import, and otherwise transfer the Work,\n     where such license applies only to those patent claims licensable\n     by such Contributor that are necessarily infringed by their\n     Contribution(s) alone or by combination of their Contribution(s)\n     with the Work to which such Contribution(s) was submitted. If You\n     institute patent litigation against any entity (including a\n     cross-claim or counterclaim in a lawsuit) alleging that the Work\n     or a Contribution incorporated within the Work constitutes direct\n     or contributory patent infringement, then any patent licenses\n     granted to You under this License for that Work shall terminate\n     as of the date such litigation is filed.\n\n  4. Redistribution. You may reproduce and distribute copies of the\n     Work or Derivative Works thereof in any medium, with or without\n     modifications, and in Source or Object form, provided that You\n     meet the following conditions:\n\n     (a) You must give any other recipients of the Work or\n         Derivative Works a copy of this License; and\n\n     (b) You must cause any modified files to carry prominent notices\n         stating that You changed the files; and\n\n     (c) You must retain, in the Source form of any Derivative Works\n         that You distribute, all copyright, patent, trademark, and\n         attribution notices from the Source form of the Work,\n         excluding those notices that do not pertain to any part of\n         the Derivative Works; and\n\n     (d) If the Work includes a \"NOTICE\" text file as part of its\n         distribution, then any Derivative Works that You distribute must\n         include a readable copy of the attribution notices contained\n         within such NOTICE file, excluding those notices that do not\n         pertain to any part of the Derivative Works, in at least one\n         of the following places: within a NOTICE text file distributed\n         as part of the Derivative Works; within the Source form or\n         documentation, if provided along with the Derivative Works; or,\n         within a display generated by the Derivative Works, if and\n         wherever such third-party notices normally appear. The contents\n         of the NOTICE file are for informational purposes only and\n         do not modify the License. You may add Your own attribution\n         notices within Derivative Works that You distribute, alongside\n         or as an addendum to the NOTICE text from the Work, provided\n         that such additional attribution notices cannot be construed\n         as modifying the License.\n\n     You may add Your own copyright statement to Your modifications and\n     may provide additional or different license terms and conditions\n     for use, reproduction, or distribution of Your modifications, or\n     for any such Derivative Works as a whole, provided Your use,\n     reproduction, and distribution of the Work otherwise complies with\n     the conditions stated in this License.\n\n  5. Submission of Contributions. Unless You explicitly state otherwise,\n     any Contribution intentionally submitted for inclusion in the Work\n     by You to the Licensor shall be under the terms and conditions of\n     this License, without any additional terms or conditions.\n     Notwithstanding the above, nothing herein shall supersede or modify\n     the terms of any separate license agreement you may have executed\n     with Licensor regarding such Contributions.\n\n  6. Trademarks. This License does not grant permission to use the trade\n     names, trademarks, service marks, or product names of the Licensor,\n     except as required for reasonable and customary use in describing the\n     origin of the Work and reproducing the content of the NOTICE file.\n\n  7. Disclaimer of Warranty. Unless required by applicable law or\n     agreed to in writing, Licensor provides the Work (and each\n     Contributor provides its Contributions) on an \"AS IS\" BASIS,\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n     implied, including, without limitation, any warranties or conditions\n     of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n     PARTICULAR PURPOSE. You are solely responsible for determining the\n     appropriateness of using or redistributing the Work and assume any\n     risks associated with Your exercise of permissions under this License.\n\n  8. Limitation of Liability. In no event and under no legal theory,\n     whether in tort (including negligence), contract, or otherwise,\n     unless required by applicable law (such as deliberate and grossly\n     negligent acts) or agreed to in writing, shall any Contributor be\n     liable to You for damages, including any direct, indirect, special,\n     incidental, or consequential damages of any character arising as a\n     result of this License or out of the use or inability to use the\n     Work (including but not limited to damages for loss of goodwill,\n     work stoppage, computer failure or malfunction, or any and all\n     other commercial damages or losses), even if such Contributor\n     has been advised of the possibility of such damages.\n\n  9. Accepting Warranty or Additional Liability. While redistributing\n     the Work or Derivative Works thereof, You may choose to offer,\n     and charge a fee for, acceptance of support, warranty, indemnity,\n     or other liability obligations and/or rights consistent with this\n     License. However, in accepting such obligations, You may act only\n     on Your own behalf and on Your sole responsibility, not on behalf\n     of any other Contributor, and only if You agree to indemnify,\n     defend, and hold each Contributor harmless for any liability\n     incurred by, or claims asserted against, such Contributor by reason\n     of your accepting any such warranty or additional liability.\n\n  END OF TERMS AND CONDITIONS\n\n  APPENDIX: How to apply the Apache License to your work.\n\n     To apply the Apache License to your work, attach the following\n     boilerplate notice, with the fields enclosed by brackets \"[]\"\n     replaced with your own identifying information. (Don't include\n     the brackets!)  The text should be enclosed in the appropriate\n     comment syntax for the file format. We also recommend that a\n     file or class name and description of purpose be included on the\n     same \"printed page\" as the copyright notice for easier\n     identification within third-party archives.\n\n  Copyright [yyyy] [name of copyright owner]\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.6669921875,
          "content": "optimize-js [![Build Status](https://travis-ci.org/nolanlawson/optimize-js.svg?branch=master)](https://travis-ci.org/nolanlawson/optimize-js) [![JavaScript Style Guide](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n========\n\nOptimize a JavaScript file for faster initial execution and parsing, by wrapping all immediately-invoked functions or likely-to-be-invoked functions in parentheses.\n\n_**⚠️ Maintenance note ⚠️** This project is unmaintained. I consider it an interesting experiment, but I have no intention to keep updating the benchmark results with every new browser release, or to add new features. I invite folks to keep using it, but to be aware that they should heavily benchmark their own websites to ensure it's actually a significant performance improvement in their target browsers._\n\n_**Update** The V8 team wrote [a blog post](https://v8.dev/blog/preparser#pife) about why you probably shouldn't use optimize-js anymore._\n\nInstall\n---\n\n    npm install -g optimize-js\n\nUsage\n---\n\n    optimize-js input.js > output.js\n\nExample input:\n\n```js\n!function (){}()\nfunction runIt(fun){ fun() }\nrunIt(function (){})\n```\n\nExample output:\n\n```js\n!(function (){})()\nfunction runIt(fun){ fun() }\nrunIt((function (){}))\n```\n\nBenchmark overview\n----\n\n| Browser | Typical speed boost/regression using optimize-js |\n| ---- | ----- |\n| Chrome 55 | 20.63% |\n| Edge 14 | 13.52% |\n| Firefox 50 | 8.26% |\n| Safari 10 | -1.04% |\n\nThese numbers are based on a benchmark of common JS libraries. For benchmark details, see [benchmarks](#benchmarks).\n\nTo test on your own JavaScript bundle, check out [test-optimize-js](https://nolanlawson.github.io/test-optimize-js/).\n\nCLI\n----\n\n```\nUsage: optimize-js [ options ]\n\nOptions:\n  --source-map  include source map                                     [boolean]\n  -h, --help    Show help                                              [boolean]\n\nExamples:\n  optimize-js input.js > output.js    optimize input.js\n  optimize-js < input.js > output.js  read from stdin, write to stdout\n```\n\nJavaScript API\n----\n\n```js\nvar optimizeJs = require('optimize-js');\nvar input = \"!function() {console.log('wrap me!')}\";\nvar output = optimizeJs(input); // \"!(function() {console.log('wrap me!')})()\"\n```\n\nYou can also pass in arguments:\n```js\nvar optimizeJs = require('optimize-js');\nvar input = \"!function() {console.log('wrap me!')}\";\nvar output = optimizeJs(input, {\n  sourceMap: true\n}); // now the output has source maps\n```\n\nWhy?\n----\n\nModern JavaScript engines like V8, Chakra, and SpiderMonkey have a heuristic where they pre-parse most \nfunctions before doing a full parse.\nThe pre-parse step merely checks for syntax errors while avoiding the cost of a full parse.\n\nThis heuristic is based on the assumption that, on the average web page, most JavaScript functions are never\nexecuted or are lazily executed.\nSo a pre-parse can prevent a slower startup time by only checking for what the browser absolutely needs\nto know about the function (i.e. whether it's syntactically well-formed or not).\n\nUnfortunately this assumption breaks down in the case of immediately-invoked function expressions (IIFEs), such as these:\n\n```js\n(function () { console.log('executed!') })();\n(function () { console.log('executed Crockford-style!') }());\n!function () { console.log('executed UglifyJS-style!') }();\n```\n\nThe good news is that JS engines have a _further_ optimization,\nwhere they try to detect such IIFEs and skip the pre-parse step. Hooray!\n\nThe bad news, though, is that these heuristics don't always work,\nbecause they're based on a greedy method of checking for a `'('` token immediately to the left of the function. (The parser\navoids anything more intricate because it would amount to parsing the whole thing, negating the benefit of the pre-parse). \nIn cases without the paren (which include\ncommon module formats like UMD/Browserify/Webpack/etc.), the browser will actually parse the function _twice_, first as a pre-parse and second\nas a full parse. This means that the JavaScript code runs much more slowly overall, because more time is spent parsing than needs to be. See [\"The cost of small modules\"](https://nolanlawson.com/2016/08/15/the-cost-of-small-modules/) for an idea of how bad this can get.\n\nLuckily, because the `'('` optimization for IIFEs is so well-established, we can exploit this during our build process by\nparsing the entire JavaScript file in advance (a luxury the browser can't afford) and inserting parentheses in the cases where we _know_\nthe function will be immediately executed (or where we have a good hunch). That's what `optimize-js` does.\n\nMore details on the IIFE optimization can be found in [this discussion](https://github.com/mishoo/UglifyJS2/issues/886). Some of my thoughts on the virtues of compile-time optimizations can be found in [this post](https://gist.github.com/nolanlawson/e73c61da78ffb39e4fc034a62ce8b263).\n\nFAQs\n----\n\n### How does it work?\n\nThe current implementation is to parse to a syntax tree and check for functions that:\n\n1. Are immediately-invoked via any kind of call statement (`function(){}()`, `!function(){}()`, etc.)\n2. Are passed in directly as arguments to another function\n\nThe first method is an easy win – those functions are immediately executed. The second method is more of a heuristic, but tends\nto be a safe bet given common patterns like Node-style errbacks, Promise chains, and UMD/Browserify/Webpack module declarations. \n\nIn all such cases, `optimize-js` wraps the function in parentheses.\n\n### But... you're adding bytes!\n\nYes, `optimize-js` might add as many as two bytes (horror!) per function, which amounts to practically nil once you\ntake gzip into account. To prove it, here are the gzipped sizes for the libraries I use in the benchmark:\n\n| Script | Size (bytes) | Difference (bytes) |\n| ---- | --- | --- |\n| benchmarks/create-react-app.min.js | 160387 ||\n| benchmarks/create-react-app.min.optimized.js | 160824 |+ 437 |\n| benchmarks/immutable.min.js | 56738 ||\n| benchmarks/immutable.min.optimized.js | 56933 |+ 195 |\n| benchmarks/jquery.min.js | 86808 ||\n| benchmarks/jquery.min.optimized.js | 87109 |+ 301 |\n| benchmarks/lodash.min.js | 71381 ||\n| benchmarks/lodash.min.optimized.js | 71644 |+ 263 |\n| benchmarks/pouchdb.min.js | 140332 ||\n| benchmarks/pouchdb.min.optimized.js | 141231 |+ 899 |\n| benchmarks/three.min.js | 486996 ||\n| benchmarks/three.min.optimized.js | 487279 |+ 283 |\n\n### Is `optimize-js` intended for library authors?\n\nSure! If you are already shipping a bundled, minified version of your library, then there's no reason not to apply `optimize-js` (assuming you benchmark your code to ensure it does indeed help!). However, note that `optimize-js` should run _after_ Uglify, since Uglify strips extra parentheses and also [negates IIFEs by default](https://github.com/mishoo/UglifyJS2/issues/640). This also means that if your users apply Uglification to your bundle, then the optimization will be undone.\n\nAlso note that because `optimize-js` optimizes for some patterns that are based on heuristics rather than _known_ eagerly-invoked\nfunctions, it may actually hurt your performance in some cases. (See benchmarks below for examples.) Be sure to check that `optimize-js` is a help rather than a hindrance for your particular codebase, using something like:\n\n```html\n<script>\nvar start = performance.now();\n</script>\n<script src=\"myscript.js\"></script>\n<script>\nvar end = performance.now();\nconsole.log('took ' + (end - start) + 'ms');\n</script>\n```\n\nNote that the script boundaries are actually recommended, in order to truly measure the full parse/compile time.\nIf you'd like to avoid measuring the network overhead, you can see how we do it in [our benchmarks](https://github.com/nolanlawson/optimize-js/blob/bbac7678656c85a1e4b98cf22ea4d5342965b2fd/benchmarks/index.html#L111-L126).\n\nYou may also want to check out [marky](http://github.com/nolanlawson/marky),\nwhich allows you to easily set mark/measure points that you can visually inspect in the Dev Tools timeline to ensure that the full\ncompile time is being measured.\n\nAlso, be sure to test in multiple browsers! If you need an Edge VM, check out [edge.ms](http://edge.ms).\n\n### Shouldn't this be Uglify's job?\n\nPossibly! This is a free and open-source library, so I encourage anybody to borrow the code or the good ideas. :)\n\n### Why not paren-wrap every single function?\n\nAs described above, the pre-parsing optimization in browsers is a very good idea for the vast majority of the web, where most functions \naren't immediately executed. However, since `optimize-js` knows when your functions are immediately executed (or can make reasonable\nguesses), it can be more judicious in applying the paren hack.\n\n### Does this really work for every JavaScript engine?\n\nBased on my tests, this optimization seems to work best for V8 (Chrome), followed by Chakra (Edge), followed by SpiderMonkey (Firefox). For JavaScriptCore (Safari) it seems to be basically a wash, and may actually be a slight regression overall depending on your codebase. (Again, this is why it's important to actually measure on your own codebase, on the browsers you actually target!)\n\nIn the case of Chakra, [Uglify-style IIFEs are actually already optimized](https://github.com/mishoo/UglifyJS2/issues/640#issuecomment-247792319), but using `optimize-js` doesn't hurt because a\nfunction preceded by `'('` still goes into the fast path.\n\nBenchmarks\n----\n\nThese tests were run using a handful of popular libraries, wrapped in `performance.now()` measurements. Each test reported the median of 251 runs. `optimize-js` commit [da51013](https://github.com/nolanlawson/optimize-js/commit/da51013) was tested. Minification was applied using `uglifyjs -mc`, Uglify 2.7.0.\n\nYou can also try [a live version of the benchmark](https://nolanlawson.github.io/optimize-js/).\n\n### Chrome 55, Windows 10 RS1, Surfacebook i5\n\n| Script | Original | Optimized | Improvement | Minified | Min+Optimized | Improvement |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| Create React App | 55.39ms | 51.71ms | **6.64%** | 26.12ms | 21.09ms | **19.26%** |\n| ImmutableJS | 11.61ms | 7.95ms | **31.50%** | 8.50ms | 5.99ms | **29.55%** |\n| jQuery | 22.51ms | 16.62ms | **26.18%** | 19.35ms | 16.10ms | **16.80%** |\n| Lodash | 20.88ms | 19.30ms | **7.57%** | 20.47ms | 19.86ms | **3.00%** |\n| PouchDB | 43.75ms | 20.36ms | **53.45%** | 36.40ms | 18.78ms | **48.43%** |\n| ThreeJS | 71.04ms | 72.98ms | **-2.73%** | 54.99ms | 39.59ms | **28.00%** |\nOverall improvement: **20.63%**\n\n### Edge 14, Windows 10 RS1, SurfaceBook i5\n\n| Script | Original | Optimized | Improvement | Minified | Min+Optimized | Improvement |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| Create React App | 32.46ms | 24.85ms | **23.44%** | 26.49ms | 20.39ms | **23.03%** |\n| ImmutableJS | 8.94ms | 6.19ms | **30.74%** | 7.79ms | 5.41ms | **30.55%** |\n| jQuery | 22.56ms | 14.45ms | **35.94%** | 16.62ms | 12.99ms | **21.81%** |\n| Lodash | 22.16ms | 21.48ms | **3.05%** | 15.77ms | 15.46ms | **1.96%** |\n| PouchDB | 24.07ms | 21.22ms | **11.84%** | 39.76ms | 52.86ms | **-32.98%** |\n| ThreeJS | 43.77ms | 39.99ms | **8.65%** | 54.00ms | 36.57ms | **32.28%** |\nOverall improvement: **13.52%**\n\n### Firefox 50, Windows 10 RS1, Surfacebook i5\n\n| Script | Original | Optimized | Improvement | Minified | Min+Optimized | Improvement |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| Create React App | 33.56ms | 28.02ms | **16.50%** | 24.71ms | 22.05ms | **10.76%** |\n| ImmutableJS | 6.52ms | 5.75ms | **11.80%** | 4.96ms | 4.58ms | **7.47%** |\n| jQuery | 15.77ms | 13.97ms | **11.41%** | 12.90ms | 12.15ms | **5.85%** |\n| Lodash | 17.08ms | 16.63ms | **2.64%** | 13.11ms | 13.22ms | **-0.80%** |\n| PouchDB | 19.23ms | 16.77ms | **12.82%** | 13.77ms | 12.89ms | **6.42%** |\n| ThreeJS | 38.33ms | 37.36ms | **2.53%** | 33.01ms | 30.32ms | **8.16%** |\nOverall improvement: **8.26%**\n\n### Safari 10, macOS Sierra, 2013 MacBook Pro i5\n\n| Script | Original | Optimized | Improvement | Minified | Min+Optimized | Improvement |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| Create React App | 31.60ms | 31.60ms | **0.00%** | 23.10ms | 23.50ms | **-1.73%** |\n| ImmutableJS | 5.70ms | 5.60ms | **1.75%** | 4.50ms | 4.50ms | **0.00%** |\n| jQuery | 12.40ms | 12.60ms | **-1.61%** | 10.80ms | 10.90ms | **-0.93%** |\n| Lodash | 14.70ms | 14.50ms | **1.36%** | 11.10ms | 11.30ms | **-1.80%** |\n| PouchDB | 14.00ms | 14.20ms | **-1.43%** | 11.70ms | 12.10ms | **-3.42%** |\n| ThreeJS | 35.60ms | 36.30ms | **-1.97%** | 27.50ms | 27.70ms | **-0.73%** |\nOverall improvement: **-1.04%**\n\nNote that these results may vary based on your machine, how taxed your CPU is, gremlins, etc. I ran the full suite a few times on all browsers and found these numbers to be roughly representative. In our test suite, we use a median of 151 runs to reduce variability.\n\nPlugins\n---\n\n* [Grunt plugin for optimize-js](https://github.com/sergejmueller/grunt-optimize-js)\n* [Gulp plugin for optimize-js](https://github.com/prateekbh/gulp-optimize-js)\n* [Webpack plugin for optimize-js](https://github.com/vigneshshanmugam/optimize-js-plugin)\n\nSee also\n---\n\n* [broccoli-ember-preparse](https://www.npmjs.com/package/broccoli-ember-preparse)\n* [to-fast-properties](https://github.com/sindresorhus/to-fast-properties)\n* [V8LazyParsePlugin](https://github.com/TheLarkInn/V8LazyParseWebpackPlugin)\n\nThanks\n----\n\nThanks to [@krisselden](https://github.com/krisselden), [@bmaurer](https://github.com/bmaurer), and [@pleath](https://github.com/pleath) for explaining these concepts in the various GitHub issues. Thanks also to [astexplorer](https://github.com/fkling/astexplorer), [acorn](https://github.com/ternjs/acorn), and [magic-string](https://www.npmjs.com/package/magic-string) for making the implementation so easy.\n\nThanks to [Sasha Aickin](https://github.com/aickin) for generous contributions to improving this library (especially in v1.0.3)\nand prodding me to improve the accuracy of the benchmarks.\n\nContributing\n-----\n\nBuild and run tests:\n\n```bash\nnpm install\nnpm test\n```\n\nRun the benchmarks:\n\n```bash\nnpm run benchmark # then open localhost:9090 in a browser\n```\n\nTest code coverage:\n\n```bash\nnpm run coverage\n```\n\nChangelog\n----\n\n- v1.0.3\n  - Much more accurate benchmark ([#37](https://github.com/nolanlawson/optimize-js/issues/37))\n  - Browserify-specific fixes ([#29](https://github.com/nolanlawson/optimize-js/issues/29), [#36](https://github.com/nolanlawson/optimize-js/issues/36), [#39](https://github.com/nolanlawson/optimize-js/issues/39))\n  - Webpack-specific fixes ([#7](https://github.com/nolanlawson/optimize-js/issues/7), [#34](https://github.com/nolanlawson/optimize-js/issues/34))\n- v1.0.2\n  - Use estree-walker to properly parse ES6 ([#31](https://github.com/nolanlawson/optimize-js/issues/31))\n- v1.0.1:\n  - Don't call process.exit(0) on success ([#11](https://github.com/nolanlawson/optimize-js/issues/11))\n- v1.0.0\n  - Initial release\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.4873046875,
          "content": "{\n  \"name\": \"optimize-js\",\n  \"version\": \"1.0.3\",\n  \"description\": \"Optimize initial JavaScript execution/parsing by wrapping eager functions\",\n  \"main\": \"lib/index.js\",\n  \"scripts\": {\n    \"test\": \"standard && mocha --timeout 60000 test/test.js\",\n    \"benchmark\": \"npm run build-benchmark && hs -p 9090 benchmarks\",\n    \"build-benchmark\": \"sh bin/build-benchmark.sh\",\n    \"publish-benchmark\": \"sh bin/publish-benchmark.sh\",\n    \"coverage\": \"istanbul cover ./node_modules/mocha/bin/_mocha test/test.js && istanbul check-coverage --lines 100 --function 100 --statements 100 --branches 100\"\n  },\n  \"bin\": {\n    \"optimize-js\": \"lib/bin.js\"\n  },\n  \"keywords\": [\n    \"optimize\",\n    \"optimise\",\n    \"js\"\n  ],\n  \"author\": \"Nolan Lawson <nolan@nolanlawson.com>\",\n  \"license\": \"Apache-2.0\",\n  \"dependencies\": {\n    \"acorn\": \"^3.3.0\",\n    \"concat-stream\": \"^1.5.1\",\n    \"estree-walker\": \"^0.3.0\",\n    \"magic-string\": \"^0.16.0\",\n    \"yargs\": \"^4.8.1\"\n  },\n  \"devDependencies\": {\n    \"assert\": \"^1.4.1\",\n    \"denodeify\": \"^1.2.1\",\n    \"http-server\": \"^0.9.0\",\n    \"istanbul\": \"^0.4.5\",\n    \"mocha\": \"^3.0.2\",\n    \"standard\": \"^7.1.2\",\n    \"uglify-js\": \"^2.7.0\"\n  },\n  \"files\": [\n    \"lib\"\n  ],\n  \"standard\": {\n    \"ignore\": [\n      \"test/cases/**\",\n      \"benchmarks/**\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/nolanlawson/optimize-js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/nolanlawson/optimize-js/issues\"\n  },\n  \"homepage\": \"https://github.com/nolanlawson/optimize-js#readme\"\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}