{
  "metadata": {
    "timestamp": 1736562120639,
    "page": 920,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lukeed/pwa",
      "stars": 3134,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2060546875,
          "content": "# http://editorconfig.org\nroot = true\n\n[*]\nindent_size = 2\nindent_style = tab\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.{json,yml,md}]\nindent_style = space\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.060546875,
          "content": "node_modules\n*-lock.json\n.DS_Store\n*.lock\n*.log\n\n*.yaml\nbuild\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lerna.json",
          "type": "blob",
          "size": 0.0810546875,
          "content": "{\n  \"lerna\": \"3.4.1\",\n  \"version\": \"0.5.4\",\n  \"packages\": [\n    \"packages/*\"\n  ]\n}\n"
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 4.341796875,
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.7158203125,
          "content": "{\n  \"private\": true,\n  \"scripts\": {\n    \"pretest\": \"lerna bootstrap --hoist && eslint packages/*\",\n    \"test\": \"tape -r module-alias/register test/**/*.js | tap-spec\"\n  },\n  \"devDependencies\": {\n    \"eslint\": \"^6.8.0\",\n    \"lerna\": \"^3.4.1\",\n    \"module-alias\": \"^2.1.0\",\n    \"tap-spec\": \"^5.0.0\",\n    \"tape\": \"^4.9.1\"\n  },\n  \"_moduleAliases\": {\n    \"@\": \"packages\"\n  },\n  \"eslintConfig\": {\n    \"env\": {\n      \"es6\": true,\n      \"node\": true\n    },\n    \"extends\": \"eslint:recommended\",\n    \"parserOptions\": {\n      \"ecmaVersion\": 10\n    },\n    \"rules\": {\n      \"no-console\": 1,\n      \"no-cond-assign\": 0,\n      \"no-inner-declarations\": 0\n    }\n  },\n  \"eslintIgnore\": [\n    \"**/node_modules/**\",\n    \"packages/cli/templates/**\"\n  ]\n}\n"
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 16.8330078125,
          "content": "<div align=\"center\">\n  <img src=\"logo.png\" alt=\"PWA\" height=\"200\" />\n</div>\n\n<div align=\"center\">\n  <a href=\"https://npmjs.org/package/@pwa/cli\">\n    <img src=\"https://badgen.now.sh/npm/v/@pwa/cli\" alt=\"version\" />\n  </a>\n  <a href=\"https://travis-ci.org/lukeed/pwa\">\n    <img src=\"https://badgen.now.sh/travis/lukeed/pwa\" alt=\"travis\" />\n  </a>\n  <a href=\"https://npmjs.org/package/@pwa/cli\">\n    <img src=\"https://badgen.now.sh/npm/dm/@pwa/cli\" alt=\"downloads\" />\n  </a>\n</div>\n\n---\n\n<p align=\"center\"><strong>WORK IN PROGRESS</strong></p>\n\n---\n\n## Features\n\n* **Framework Agnostic**<br>\n  _Build with your preferred framework or with none at all!<br>Official presets for Preact, React, Vue, and Svelte._\n\n* **Plug 'n Play**<br>\n  _Don't worry about configuration, unless you want to.<br>Presets and plugins are automatically applied. Just install and go!_\n\n* **Fully Extensible**<br>\n  _Includes a plugin system that allows for easy, fine-grain control of your configuration... when needed._\n\n* **Feature Rich**<br>\n  _Supports Babel, Bubl√©, Browserslist, TypeScript, PostCSS, ESLint, Prettier, and Service Workers out of the box!_\n\n* **Instant Prototyping**<br>\n  _Quickly scaffold new projects with your preferred view library and toolkit.<br>Kick it off with a perfect Lighthouse score!_\n\n* **Static Site Generator**<br>\n  _Export your routes as \"pre-rendered\" HTML.<br>Great for SEO and works on any static hosting service._\n\n\n## Installation\n\nPWA is split up into two main components ([`core`](/packages/core) and [`cli`](/packages/cli)) in addition to its list of [presets](#presets) and [plugins](#plugins).\n\n> While most will opt for the CLI, the `core` module handles all configuration and can be used as a standalone module.\n\nPlease refer to each package for installation, API, and Usage information.\n\n#### Quick Start\n\n```sh\n# Install globally\n$ npm install --global @pwa/cli\n# OR\n$ yarn global add @pwa/cli\n\n# Display CLI's help text\n$ pwa --help\n\n# Generate new project\n$ pwa init\n```\n\n> **Note:** The `global` modifiers are only required for _global_ command-line usage!<br>\nLocal `devDependency` installation will also work, but then `pwa` usage is limited to the project.\n\n\n## Concepts\n\n> Please read about [Progressive Web Apps](https://developers.google.com/web/progressive-web-apps/) if the term is unfamiliar to you.\n\n### Presets\n\nPresets are collections of [plugins](#plugins) that are tailored for a particular framework.\n\nWhile there may be \"official\" presets, this **does not** mean that PWA can only support these candidates! The current options are:\n\n* [`@pwa/preset-preact`](/packages/preset-preact)\n* [`@pwa/preset-react`](/packages/preset-react)\n* [`@pwa/preset-svelte`](/packages/preset-svelte)\n* [`@pwa/preset-vue`](/packages/preset-vue)\n\nThese packages are auto-loaded during PWA's initialization and are applied _first_, before any [Plugins](#plugins) or [custom configuration](#customizing). This means that you always have the option to override a value or setting shipped within the Preset.\n\n### Plugins\n\nPlugins are (typically) individual features or chunks of configuration that are encapsulated for easy/automatic application within your build process.\n\nWhile there may be \"official\" plugins, this **does not** mean that PWA can only support these functionalities! The current plugins include:\n\n* [`@pwa/plugin-buble`](/packages/plugin-buble)\n* [`@pwa/plugin-brotli`](/packages/plugin-brotli)\n* [`@pwa/plugin-critters`](/packages/plugin-critters)\n* [`@pwa/plugin-eslint`](/packages/plugin-eslint)\n* [`@pwa/plugin-gzip`](/packages/plugin-gzip)\n* [`@pwa/plugin-imagemin`](/packages/plugin-imagemin)\n* [`@pwa/plugin-offline`](/packages/plugin-offline)\n* [`@pwa/plugin-prettier`](/packages/plugin-prettier)\n* [`@pwa/plugin-sw-precache`](/packages/plugin-sw-precache)\n* [`@pwa/plugin-sw-workbox`](/packages/plugin-sw-workbox)\n* [`@pwa/plugin-typescript`](/packages/plugin-typescript)\n* [`@pwa/plugin-zopfli`](/packages/plugin-zopfli)\n\nThese packages are auto-loaded during PWA's initialization and are applied _second_, after any [Presets](#presets) and before [custom configuration](#customizing). This allows Plugins to override settings from Presets.\n\nPlugins may (sometimes) expose a new [key](#config-keys) on the config tree and then reference this value later in composition. This allows the end-user to change the Plugin's settings before running the build.\n\n> Please see [`@pwa/plugin-critters`](https://github.com/lukeed/pwa/blob/master/packages/plugin-critters/index.js) for an example of this practice.\n\n## Commands\n\n> This section applies to [`@pwa/cli`](/packages/cli) specifically.\n\n### Build\n\n> Build your application for production\n\n```\n$ pwa build --help\n\n  Description\n    Build production assets\n\n  Usage\n    $ pwa build [src] [options]\n\n  Options\n    --analyze     Launch interactive Analyzer to inspect production bundle(s)\n    -o, --dest    Path to output directory  (default build)\n    -h, --help    Displays this message\n```\n\n\n### Export\n\n> Export routes' HTML for static hosting\n\nInstead of `--routes`, you may define a `routes` array within [`pwa.config.js`](#customizing) config file.\n\nIf no routes are defined in either location, PWA will traverse your `\"@pages\"`-aliased directory (default: `src/pages/**`) and attempt to infer URL patterns from the file structure.\n\nIn the event that no files exist within that directory, PWA will show a warning but still scrape the index (`\"/\"`) route.\n\n```\n$ pwa export --help\n\n  Description\n    Export pre-rendered pages\n\n  Usage\n    $ pwa export [src] [options]\n\n  Options\n    -o, --dest        Path to output directory  (default build)\n    -w, --wait        Time (ms) to wait before scraping each route  (default 0)\n    -r, --routes      Comma-delimited list of routes to export\n    -i, --insecure    Launch Chrome Headless without sandbox\n    -h, --help        Displays this message\n```\n\n> **Important:** Using `export` requires a local version of Chrome installed! See [`chrome-launcher`](https://www.npmjs.com/package/chrome-launcher).<br>Additionally, the `--insecure` flag launches Chrome without sandboxing. See [here](https://developers.google.com/web/updates/2017/04/headless-chrome#faq) and [here](https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md#chrome-headless-fails-due-to-sandbox-issues) for help.\n\n\n### Watch\n\n> Develop within a live-reload server\n\nWithin your [`pwa.config.js`](#customizing)'s `webpack` config, any/all [`devServer`](https://webpack.js.org/configuration/dev-server/) options are passed to Webpack Dev Server.\n\n```\n$ pwa watch --help\n\n  Description\n    Start development server\n\n  Usage\n    $ pwa watch [src] [options]\n\n  Options\n    -H, --host     A hostname on which to start the application  (default localhost)\n    -p, --port     A port number on which to start the application  (default 8080)\n    -q, --quiet    Disable logging to terminal, including errors and warnings\n    --https        Run the application over HTTP/2 with HTTPS\n    --key          Path to custom SSL certificate key\n    --cert         Path to custom SSL certificate\n    --cacert       Path to custom CA certificate override\n    -h, --help     Displays this message\n```\n\n### Build vs Export\n\nExport can be thought of as \"Build 2.0\" &mdash; it spins up a [Headless Chrome browser](https://www.npmjs.com/package/chrome-launcher) and programmatically scrapes your routes.\n\nThis is ideal for SEO, PWA behavior, and all-around performance purposes, as your content will exist on the page _before_ the JavaScript application is downloaded, parsed, boots, and (finally) renders the content.\n\nThe generated HTML pages will be placed in your `build` directory. A `/login` route will be exported as `build/login/index.html` &mdash; this makes it compatible with even the \"dumbest\" of static hosting services!\n\n> **Note:** Running `export` will automatically run `build` before scraping.\n\n\n## Configuration\n\n### Overview\n\nAll configuration within the PWA tree is ***mutable***! [Presets](#presets), [Plugins](#plugins), and your [custom config](#customizing) file write into the same object(s). This is great for composability and extensibility, but _be warned_ that your custom config _may_ break the build if you're not careful.\n\n> :bulb: Official presets & plugins are controlled releases and are ensured to play nicely with one another.\n\nThe config object(s) for your project are assembled in this sequence:\n\n1) **Presets:** All non-`webpack` config keys\n2) **Plugins:** All non-`webpack` config keys\n3) **Custom:** All non-`webpack` config keys\n4) **Presets:** The `webpack` config key, if any\n5) **Plugins:** The `webpack` config key, if any\n6) **Custom:** The `webpack` config key, if any\n\nBecause the final config object is passed to Webpack, internally, the `webpack` key always runs last as it composes & moves everything into its relevant loaders, plugins, etc.\n\n> **Important:** When defining a [custom `webpack` key](#webpack) it **must always be a function**!\n\n\n### Mutations\n\nEvery [config key](#config-keys) can be defined or mutated in the same way!\n\nAny non-`Function` key will overwrite the existing value. This allows _strong_ opinions and/or allows a [Plugin]() to define a new config key and reference it later on.\n\nAny [`Function` key](#functions) will receive the existing, _matching_ config-value for direct mutation. This is for fine-grain control over the existing config.\n\n```js\n// defaults:\nexports.hello = { foo:1, bar:2 };\nexports.world = ['How', 'are', 'you?'];\n\n// preset/plugin/custom:\nexports.hello = function (config) {\n  config.bar = 42;\n  config.baz = [7, 8, 9];\n}\nexports.world = ['I', 'am', 'fine'];\nexports.HOWDY = 'PARTNER!';\n\n// result:\nexports.hello = {\n  foo: 1,\n  bar: 42,\n  baz: [7, 8, 9]\n}\nexports.world = ['I', 'am', 'fine'];\nexports.HOWDY = 'PARTNER!';\n```\n\n### Functions\n\nAny config key that is a function will have the signature of `(config, env, opts)`.\n\n#### config\nType: `Mixed`\n\nThis will be the _existing_ value for the current key. It will typically be an Object, but not always.\n\nIt will also be `undefined` if/when defining a new config key &mdash; if you know that to be the case, you shouldn't be using a Function~!\n\n#### env\nType: `Object`\n\nWill be the _environmental_ values for this command.<br>\nThis is passed from [`@pwa/core`](https://github.com/lukeed/pwa/tree/master/packages/core#coresrc-opts)'s options.\n\nThe `env.cwd`, `env.src`, `env.dest`, `env.log`, `env.production` and `env.webpack` keys are always defined.<br>Anything else is contextual information for the current command being run.\n\n#### opts\nType: `Object`\n\nDirect access to configuraton keys, ***except*** `webpack`.\n\nAs an example, this can be used within a [Plugin](#plugins) for gaining insight or gaining access to other packages' settings.\n\nThe default [config keys](#config-keys) (except `webpack`) will always be present here.\n\n\n### Config Keys\n\nThe following keys are defined by default within every PWA instance. You may [mutate](#mutations) or [compose](#functions) with them accordingly.\n\n#### `babel`\nType: `Object`<br>\nDefault: [Link](https://github.com/lukeed/pwa/blob/master/packages/core/config/index.js#L1-L20)\n\nYour Babel config object.\n\n#### `css`\nType: `Object`<br>\nDefault: [Link](https://github.com/lukeed/pwa/blob/master/packages/core/config/index.js#L22-L28)\n\nCore CSS behavior &mdash;¬†see [`css-loader`](https://github.com/webpack-contrib/css-loader#options) for options.\n\n#### `html`\nType: `Object`<br>\nDefault: [Link](https://github.com/lukeed/pwa/blob/master/packages/core/config/index.js#L30-L41)\n\nYour HTML plugin configuration &mdash;¬†see [`html-webpack-plugin`](https://github.com/jantimon/html-webpack-plugin#options) for options.\n\n#### `less`\nType: `Object`<br>\nDefault: [Link](https://github.com/lukeed/pwa/blob/master/packages/core/config/index.js#L51)\n\nAny `less-loader` options &mdash;¬†see [`less-loader`](https://webpack.js.org/loaders/less-loader/#options) for documentation.\n\n> **Note:** This is the entire loader config; you may need to include the `lessOptions` nested object.\n\n#### `postcss`\nType: `Object`<br>\nDefault: [Link](https://github.com/lukeed/pwa/blob/master/packages/core/config/index.js#L45-L47)\n\nYour PostCSS config &mdash; you may also use any config file/method that [`postcss-loader`](https://github.com/postcss/postcss-loader) accepts.\n\n> **Important:** The `postcss.plugins` key cannot be a function!\n\n#### `sass`\nType: `Object`<br>\nDefault: [Link](https://github.com/lukeed/pwa/blob/master/packages/core/config/index.js#L53)\n\nAny `sass-loader` options &mdash;¬†see [`sass-loader`](https://webpack.js.org/loaders/sass-loader/#options) for documentation.\n\nThis object will be used for _both_ `.scss` and `.sass` file extensions.<br>The `.sass` extension will automatically enforce the `indentedSyntax` option.\n\n> **Note:** This is the entire loader config; you may need to include the `sassOptions` nested object.\n\n#### `stylus`\nType: `Object`<br>\nDefault: [Link](https://github.com/lukeed/pwa/blob/master/packages/core/config/index.js#L52)\n\nAny `stylus-loader` options &mdash;¬†see [`stylus-loader`](https://www.npmjs.com/package/stylus-loader) for documentation.\n\n#### `terser`\nType: `Object`<br>\nDefault: [Link](https://github.com/lukeed/pwa/blob/master/packages/core/config/index.js#L57-L70)\n\nThe options for [Terser Plugin](https://github.com/webpack-contrib/terser-webpack-plugin#options).\n\n> **Note:** Expecting UglifyJS? It's no longer maintained!<br>The Terser configuration is nearly identical ‚Äì simply rename `uglifyOptions` to `terserOptions` :+1:\n\n#### `webpack`\nType: `Function`\n\nThe main handler for ***all*** of PWA!<br>\nWhen you define a [custom](#customizing) `webpack`, you are not overriding this function. Instead, you are manipulating Webpack's config immediately before PWA executes the build.\n\n### Browserslist\n\nThe preferred method for customizing your browser targets is thru the `browserslist` key within your `package.json` file.\n\n> **Note:** When creating a new project with `pwa init`, our recommended config is automatically added for you!\n\nYou may choose to change the default values, or use [any configuration method that Browserslist accepts](https://github.com/browserslist/browserslist#queries).\n\nThe resulting array of browser targets will be automatically applied to Autoprefixer, Babel, Bubl√©, PostCSS, Stylelint, ...etc.\n\n\n### Customizing\n\n[Presets](#presets) and [Plugins](#plugins) are just encapsulated config mutations &mdash; that's it!\n\nNow, if you want to _further_ customize your PWA build, beyond what your installed Presets & Plugins are giving you, then you can create a `pwa.config.js` in your project's root directory.\n\n> **Note:** Your new `pwa.config.js` file should sit alongside your `package.json` :thumbsup:\n\nWith this file, you may [mutate](#mutations) or [compose](#functions) _any_ of the [config keys](#config-keys) that either PWA or its [Plugins](#plugins) exposes to you.\n\nHere is an example custom config file:\n\n```js\n// pwa.config.js\nconst OfflinePlugin = require('offline-plugin');\n\n// Mutate \"@pwa/plugin-eslint\" config\nexports.eslint = function (config) {\n  config.formatter = require('eslint-friendly-formatter');\n};\n\n// Add new PostCSS Plugin\nexports.postcss = function (config) {\n  config.plugins.push(\n    require('postcss-flexbugs-fixes')\n  );\n};\n\n// Export these pages during \"pwa export\" command\nexports.routes = ['/login', '/register', '/articles/hello-world'];\n\n// Update Webpack config; ENV-dependent\nexports.webpack = function (config, env) {\n  let { production, webpack } = env;\n\n  if (production) {\n    config.plugins.push(\n      new OfflinePlugin(),\n      new webpack.DefinePlugin({\n        MY_API: JSON.stringify('https://api.example.com')\n      })\n    );\n  } else {\n    config.devServer.https = true;\n    config.plugins.push(\n      new webpack.DefinePlugin({\n        MY_API: JSON.stringify('http://staging.example.com')\n      })\n    );\n  }\n};\n```\n\n\n## Credits\n\nA **huge** thank-you to [Jimmy Moon](https://github.com/ragingwind) for donating the `@pwa` organization on npm! :raised_hands: Aside from being the _perfect_ name, we wouldn't be able to have automatic preset/plugin resolution without a namespace!\n\n**Incredible thanks to the giants whose shoulders this project stands on~!** :heart:\n\nPWA was originally conceived in [2016](https://github.com/lukeed/pwa/commit/8b1c671134a5e8f64081fa2afafebcdd3f392583) but at that time, it wasn't yet possible to build it with the feature set I had in mind. Since then, an amazing amount of work has been done on [Webpack](https://webpack.js.org/) and its ecosystem, which now makes the project goals feasible.\n\nThere's no question that PWA takes inspiration from popular CLI applications, like [Preact CLI](https://github.com/developit/preact-cli), [Vue CLI](https://cli.vuejs.org/), and [Create React App](https://github.com/facebook/create-react-app). They _most definitely_ paved the way. I've used, learned from, and refined my wishlist over years while using these tools. Despite their greatness, I still found a need for a universal, framework-agnostic PWA builder that could unify all these great libraries.\n\n## License\n\nMIT ¬© [Luke Edwards](https://lukeed.com)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}