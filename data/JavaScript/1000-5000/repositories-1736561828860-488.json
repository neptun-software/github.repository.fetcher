{
  "metadata": {
    "timestamp": 1736561828860,
    "page": 488,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "LeaVerou/prefixfree",
      "stars": 3815,
      "defaultBranch": "gh-pages",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2017 Lea Verou\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.13671875,
          "content": "# [-prefix-**free**](https://leaverou.github.io/prefixfree/)\n## Break free from CSS prefix hell!\n\n[Project homepage](https://leaverou.github.io/prefixfree/)\n\nA script that lets you use only unprefixed CSS properties everywhere. \nIt works behind the scenes, adding the current browser’s prefix to any CSS code, only when it’s needed.\n\n## API Documentation\nNote: To use -prefix-free you don't need to write any JS code, just to include prefixfree.js in your page. The following is meant mostly for plugin authors.\n\n-prefix-free creates 2 global variables: `StyleFix` and `PrefixFree`. StyleFix is a framework for building various CSS fixers and -prefix-free depends on it. Currently, StyleFix is bundled with -prefix-free and only available this way, but it might eventually get split to a separate project, with separate documentation.\n\n## StyleFix API Documentation\n\n### Properties\n\tStyleFix.fixers\nAn array of the current callbacks.\n\n### Functions\n\tStyleFix.register(callback)\nAdds `callback` to the queue of functions that will be called when fixing CSS code. `callback` will be called with the following parameters:\n\n* **css** (String): The CSS code that is being processed,\n* **raw** (Boolean): Whether the CSS code can contain rules etc or it's just a bunch of declarations (such as the ones found in the `style` attribute),\n* **element** (HTMLElement): The node that the CSS code came from (such as a `<link>` element, a `<style>` element or any element with a `style` attribute)\n\nand it should return the fixed CSS code.\n\n\tStyleFix.link(linkElement)\n\nProcesses a `<link rel=\"stylesheet\">` element and converts it to a `<style>` element with fixed code. Relative URLs will be converted.\n\n\tStyleFix.styleElement(styleElement)\n\t\nFixes code inside a `<style>` element.\n\n\tStyleFix.styleAttribute(element)\n\t\nFixes code inside the `style` attribute of an element. Will not work in IE and Firefox &lt; 3.6 due to a bug those have with `getAttribute('style')`: In IE invalid values of valid properties will be dropped, and in Firefox &lt; 3.6 anything invalid will be dropped.\n\n\tStyleFix.camelCase(str)\n\tStyleFix.deCamelCase(str)\nUtility methods that convert a string to camelCase and back.\n\n## -prefix-free API Documentation\n\n### Properties\n\tPrefixFree.prefix\nThe detected prefix of the current browser (like `'-moz-'` or `'-webkit-'`)\n\n\tPrefixFree.Prefix\nThe detected prefix of the current browser in camelCase format (like `'Moz'` or `'Webkit'`)\n\n\tPrefixFree.properties\n\tPrefixFree.functions\n\tPrefixFree.keywords\n\tPrefixFree.selectors\n\tPrefixFree.atrules\nProperties/functions/keywords/etc that are **only** available with a prefix in the current browser.\n\n### Functions\n\tPrefixFree.prefixCSS(code [, raw])\nPrefixes the properties and values in the code passed with the prefix of the current browser, only when needed. If the second parameter is truthy, it also prefixes selectors and @-rules. This is the most useful method in -prefix-free.\n\n\tPrefixFree.prefixSelector(selector)\n\tPrefixFree.prefixProperty(property)\nPrefixes the passed selector or property. The property is prefixed **even when it's supported prefix-less**. These are more internal methods and I assume they won't be too useful in general.\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.6162109375,
          "content": "{\n  \"name\": \"prefixfree\",\n  \"main\": \"prefixfree.js\",\n  \"version\": \"1.0.10\",\n  \"homepage\": \"http://leaverou.github.io/prefixfree/\",\n  \"authors\": [\n    \"Lea Verou\"\n  ],\n  \"description\": \"A script that lets you use only unprefixed CSS properties everywhere. It works behind the scenes, adding the current browser’s prefix to any CSS code, only when it’s needed.\",\n  \"license\": \"MIT\",\n  \"ignore\": [\n    \"css/\",\n    \"fonts/\",\n    \"img/\",\n    \"README.md\",\n    \"index.html\",\n    \"index.js\",\n    \"minify\",\n    \"**/*.min.js\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/LeaVerou/prefixfree.git#gh-pages\"\n  }\n}\n"
        },
        {
          "name": "css",
          "type": "tree",
          "content": null
        },
        {
          "name": "fonts",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 12.353515625,
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\n<meta charset=\"utf-8\">\n<title>Prefix free: Break free from CSS vendor prefix hell!</title>\n<link rel=\"stylesheet\" href=\"css/style.css\" />\n<link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\" />\n<link rel=\"shortcut icon\" href=\"img/favicon.png\" />\n<script src=\"prefixfree.js\"></script>\n<style>\n\tbody {\n\t\ttransform:none; /* Just to test embedded styles */\n\t}\t\n</style>\n\n</head>\n<body>\n\n<hgroup>\n\t<h1>-prefix-free</h1>\n\t<h2>Break free from CSS prefix hell!</h2>\n</hgroup>\n\n<a href=\"https://raw.github.com/LeaVerou/prefixfree/gh-pages/prefixfree.min.js\" class=\"download\" title=\"Click to download\" download=\"prefixfree.min.js\">Only <strong>2KB</strong> gzipped</a>\n<a href=\"https://github.com/LeaVerou/prefixfree\" target=\"_blank\" class=\"github-ribbon\"><img src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png\" alt=\"Fork me on GitHub\"></a>\n\n<p id=\"wtf\">\n\t<strong>-prefix-free</strong> lets you use only unprefixed CSS properties everywhere. \n\tIt works behind the scenes, adding the current browser’s prefix to any CSS code, only when it’s needed.\n</p>\n\n<nav>\n\tLearn more:<ul>\n\t\t<li><a href=\"#\">Home</a></li>\n\t\t<li><a href=\"#test-drive\">Test drive</a></li>\n\t\t<li><a href=\"#faq\">FAQ</a></li>\n\t\t<li><a href=\"#plugins\">Plugins</a></li>\n\t</ul>\n</nav>\n\n<blockquote cite=\"https://twitter.com/meyerweb/status/124618575263711232\">\n\t<p>“[-prefix-free is] fantastic, top-notch work! Thank you for creating and sharing it.”</p>\n\t— <a href=\"https://twitter.com/meyerweb/status/124618575263711232\" target=\"_blank\">Eric Meyer</a>\n</blockquote>\n\n<div class=\"section-container\">\n<section id=\"features\">\n\t<h1>Features</h1>\n\t<ul class=\"features\">\n\t\t<li>Processes every stylesheet in <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> elements and adds a vendor prefix where needed</li>\n\t\t<li>Processes elements with a <code>style</code> attribute and adds a vendor prefix where needed</li>\n\t\t<li>Takes care of <strong>new</strong> <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> elements, <code>style</code> attribute changes and CSSOM changes (<a href=\"#dynamic-dom\">requires plugin</a>)</li>\n\t\t<li>Lets <strong>jQuery</strong>’s <code>.css()</code> method get and set unprefixed properties (<a href=\"#jquery\">requires plugin</a>)</li>\n\t</ul>\n</section>\n<section id=\"limitations\">\n\t<h1>Limitations</h1>\n\t<ul class=\"drawbacks\">\n\t\t<li>Prefixing code in <code>@import</code>-ed files is not supported</li>\n\t\t<li>Prefixing <strong>cross-origin</strong> linked stylesheets is not supported, unless they are <a href=\"https://enable-cors.org/\" target=\"_blank\">CORS-enabled</a></li>\n\t\t<li>Unprefixed linked stylesheets won’t work <strong>locally</strong> in Chrome and Opera. <a href=\"#local-xhr\">You can change that for yourself</a> though.</li>\n\t\t<li>Unprefixed <strong>values</strong> in inline styles (in the <code>style</code> attribute) won’t work in IE and Firefox &lt; 3.6. <strong>Properties</strong> as well in Firefox &lt; 3.6.</li>\n\t</ul>\n</section>\n</div>\n\n<div class=\"section-container\">\n<section id=\"demo\">\n\t<h1>Demo?</h1>\n\t<p>Check <a href=\"css/style.css\">this page’s stylesheet</a> ;-)</p>\n\t<p>You can also visit the <a href=\"#test-drive\">Test Drive</a> page, type in any code you want and check out how it would get prefixed for the current browser.</p>\n</section>\n\n<section id=\"howto\">\n\t<h1>How to use</h1>\n\t<p>Just include <code>prefixfree.js</code> anywhere in your page. It is recommended to put it right after the stylesheets, to minimize <abbr title=\"Flash Of UnCSS3-ed Content\">FOUC</abbr>\n\t<p>That’s it, you’re done!</p>\n</section>\n</div>\n\n<section id=\"browser-support\">\n\t<h1>Browser support</h1>\n\t<p>The target browser support is <strong>IE9+</strong>, <strong>Opera 10+</strong>, <strong>Firefox 3.5+</strong>, <strong>Safari 4+</strong> and <strong>Chrome</strong> on desktop and <strong>Mobile Safari</strong>, <strong>Android browser</strong>, <strong>Chrome</strong> and <strong>Opera Mobile</strong> on mobile.</p>\n\t<p>If it doesn’t work in any of those, it’s a bug so please <a href=\"https://github.com/LeaVerou/prefixfree/issues\">report it</a>. Just before you do, please make sure that it’s not because the browser doesn’t support a CSS3 feature at all, even with a prefix.</p>\n\t<p>In older browsers like IE8, nothing will break, just properties won’t get prefixed. Which wouldn’t be useful anyway as IE8 doesn’t support much CSS3 ;)</p>\n</section>\n\n<section id=\"test-drive\" class=\"page\">\n\t<h1>Test drive</h1>\n\t<p>Test the prefixing that -prefix-free would do for this browser, by writing some CSS below:</p>\n\t<textarea id=\"source\">@keyframes rotate {\n    from { transform: rotate(15deg) }\n    to { transform: rotate(375deg) }\t\n}\n\n.download {\n   position: absolute;\n   top: 1em;\n   left: -1.5em;\n   width: 6em;\n   height: 6em;\n   padding: 1em 0;\n   background: #80A060;\n   background-image: linear-gradient(90deg, transparent, rgba(10,0,0,.3)),linear-gradient(transparent, transparent);\n   color: white;\n   line-height: 1;\n   font-size: 140%;\n   text-align: center;\n   text-decoration: initial;\n   text-shadow: .08em .08em .2em rgba(0,0,0,.6);\n   border-radius: 50%;\n   box-shadow: .1em .2em .4em -.2em black;\n   box-sizing: border-box;\n   transform: rotate(15deg);\n   animation: rotate;\n   cursor: zoom-in;\n}\n\n:read-write {}</textarea>\n\t<textarea id=\"prefixed\" readonly></textarea>\n</section>\n\n\n<section id=\"faq\" class=\"page\">\n\t<h1>FAQ</h1>\n\t\n\t<section>\n\t\t<h1>What if I actually want to target only a specific prefix?</h1>\n\t\t<p>Properties/values etc that <strong>already</strong> have a prefix won’t be altered. However, if you use the unprefixed property/value etc after the prefixed properties, you might run into <a href=\"https://github.com/LeaVerou/prefixfree/issues/16#issuecomment-2428237\" target=\"_blank\">issue #16</a>.\n\t\tFor those cases, -prefix-free adds a class on the root element (the <code>&lt;html&gt;</code> element in HTML) with the same name as the current prefix. So for example, to solve the problem presented in the above issue, you could do:</p>\n\t\t<pre>.myselector {\n    transform: rotate(15deg);\n}\n.-webkit- .myselector {\n    transform: rotate(15deg) rotateX(0);\n}</pre>\n\t\t<p>It’s not ideal, but it’s a solution, until a more intuitive way to deal with these cases is added in -prefix-free.</p>\n\t\t<p>Please note that in unsupported browsers like IE8, no such class will be added.</p>\n\t</section>\n\t\n\n\t<section>\n\t\t<h1>How do I exclude specific files from being prefixed?</h1>\n\t\t<p>You can exclude a file from being prefixed by adding the <code>data-noprefix</code> attribute to the <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> element. For example:</p>\n\t\t<pre>&lt;link href=&quot;//example.com/style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; data-noprefix&gt;</pre>\n\t</section>\n\n\t<section id=\"local-xhr\">\n\t\t<h1>How do I enable local testing?</h1>\n\t\t<p>Firefox (and IE?) natively support local XHR, so -prefix-free will work fine locally with them.</p>\n\t\t<p>To enable local XHR for <strong>Chrome</strong>, you need to run it with the flag <code>--allow-file-access-from-files</code>.</p>\n\t\t<p>To enable local XHR for <strong>Opera</strong>, you have to go to <a href=\"opera:config#UserPrefs|AllowFileXMLHttpRequest\">opera:config#UserPrefs|AllowFileXMLHttpRequest</a>, check that option and Save.</p>\n\t</section>\n\t\n\t<section>\n\t\t<h1>Something like this belongs to the server-side</h1>\n\t\t<p>A server side script would need to add all prefixes, making the size of the CSS file considerably larger. Also, it should maintain a list of features that need prefixes, or add them all and unnecessarily bloat the stylesheet. -prefix-free automatically detects what needs a prefix and what doesn’t.</p>\n\t\t<p>Also, a common argument against doing this on the client side, is that it makes the design rely on JavaScript. However, that is completely false: If JS is disabled, only some of the CSS3 won’t show. But if your design <em>relies</em> on CSS3 to be functional, you have bigger problems bro.</p>\n\t\t<p>You can read some more about this in my recent <a href=\"https://css-tricks.com/five-questions-with-lea-verou/#lea-question-2\"/>CSS Tricks interview</a></p>\n\t\t<p>But every solution has its own pros and cons. If you would feel more comfortable with a server-side script, use that and don’t troll me please. Remember: nobody forced you to use -prefix-free. <strong>KTHXBAI ☺</strong></p>\n\t</section>\n</section>\n\n<section id=\"plugins\" class=\"page\">\n\t<h1>Plugins</h1>\n\t<p>Extra code on top of -prefix-free that makes it more flexible, integrates it with different APIs etc</p>\n\t\n\t<section id=\"dynamic-dom\">\n\t\t<h1>Dynamic DOM plugin</h1>\n\t\t<p>Originally a part of -prefix-free, it’s now a separate plugin. It makes -prefix-free take care of:</p>\n\t\t<ul class=\"features\">\n\t\t\t<li><strong>New</strong> <code>&lt;link&gt;</code> and <code>&lt;style&gt;</code> added to the document afterwards</li>\n\t\t\t<li><strong>New</strong> elements with a <code>style</code> attribute added to the document afterwards</li>\n\t\t\t<li><code>style</code> attribute changes through <code>setAttribute()</code> (except in Webkit)</li>\n\t\t\t<li>Getting and setting unprefixed properties through the CSSOM, like:\n\t\t\t\t<pre>element.style.transform = 'rotate(10deg)';</pre>\n\t\t\t</li>\n\t\t</ul>\n\t\tThings to be aware of:\n\t\t<ul class=\"drawbacks\">\n\t\t\t<li>Mutation events have a reputation of being slow, and they are the only way to do stuff when an attribute changes or new elements get added</li>\n\t\t\t<li><code>style</code> attribute modifications will not work in Webkit</li>\n\t\t\t<li>\n\t\t\t\t<em>Setting</em> unprefixed CSSOM properties, like:\n\t\t\t\t<pre>element.style.transform = 'rotate(5deg)';</pre>\n\t\t\t \twill not work in Chrome (<em>reading</em> will)\n\t\t\t </li>\n\t\t</ul>\n\t\t<p>Get the Dynamic DOM plugin now:</p>\n\t\t<ul>\n\t\t\t<li><a href=\"https://raw.github.com/LeaVerou/prefixfree/gh-pages/plugins/prefixfree.dynamic-dom.js\">prefixfree.dynamic-dom.js</a></li>\n\t\t\t<li><a href=\"https://raw.github.com/LeaVerou/prefixfree/gh-pages/plugins/prefixfree.dynamic-dom.min.js\">prefixfree.dynamic-dom.min.js</a></li>\n\t\t</ul>\n\t</section>\n\t\n\t<section id=\"jquery\">\n\t\t<h1>jQuery plugin</h1>\n\t\t<p>A tiny plugin (I didn’t even bother minifying it as it’s so small) that lets you set/get unprefixed CSS properties through jQuery's <code>.css</code> method.</p>\n\t\t<p>Get the jQuery plugin now:</p>\n\t\t<ul>\n\t\t\t<li><a href=\"https://raw.github.com/LeaVerou/prefixfree/gh-pages/plugins/prefixfree.jquery.js\">prefixfree.jquery.js</a></li>\n\t\t</ul>\n\t</section>\n\t\n\t<section id=\"viewport-units\">\n\t\t<h1>Viewport-relative units</h1>\n\t\t<p>A static polyfill for the new <a href=\"https://www.w3.org/TR/css3-values/#viewport-relative-lengths\">vw, vh, vmin, vmax units</a>.</p>\n\t\t<ul class=\"features\">\n\t\t\t<li>Will do nothing if the units are supported natively.</li>\n\t\t\t<li>It’s dynamic. Pixel values are updated on screen resize.</li>\n\t\t</ul>\n\t\t<ul>\n\t\t\t<li><a href=\"https://raw.github.com/LeaVerou/prefixfree/gh-pages/plugins/prefixfree.viewport-units.js\">prefixfree.viewport-units.js</a></li>\n\t\t</ul>\n\t</section>\n\t\n\t<section id=\"css-variables\">\n\t\t<h1>CSS Variables</h1>\n\t\t<p>Enables rudimentary <a href=\"https://www.w3.org/TR/css-variables/\">CSS variables</a> support.</p>\n\t\t<ul class=\"features\">\n\t\t\t<li>If a prefixed implementation is available, it will add the necessary prefixes and use that</li>\n\t\t\t<li>It supports overwriting the variable value</li>\n\t\t</ul>\n\t\tLimitations:\n\t\t<ul class=\"drawbacks\">\n\t\t\t<li>Doesn’t support scoping. Every variable is in the global scope and every subsequent declaration of the same variable overwrites the previous ones, regardless of scoping</li>\n\t\t\t<li>It’s not dynamic. Variables are replaced once, and then they function as normal CSS values</li>\n\t\t</ul>\n\t\t<ul>\n\t\t\t<li><a href=\"https://raw.github.com/LeaVerou/prefixfree/gh-pages/plugins/prefixfree.vars.js\">prefixfree.vars.js</a></li>\n\t\t</ul>\n\t</section>\n</section>\n\n<footer>\n\t<a href=\"https://twitter.com/prefixfree\" target=\"_blank\">@prefixfree</a>\n\t✿ <a href=\"https://github.com/LeaVerou/prefixfree/commits/gh-pages.atom\" target=\"_blank\">Commits feed</a>\n\t✿ Made by <a href=\"https://lea.verou.me/\">Lea Verou</a> with care\n</footer>\n\n<script src=\"index.js\"></script>\n\n<a href=\"https://twitter.com/share\" class=\"twitter-share-button\" data-count=\"vertical\" data-via=\"prefixfree\" data-related=\"LeaVerou\">Tweet</a>\n<script src=\"https://platform.twitter.com/widgets.js\"></script>\n\n<script>var _gaq = [['_setAccount', 'UA-25106441-4'],['_trackPageview']];</script>\n<script src=\"https://www.google-analytics.com/ga.js\" async></script>\n\n</body>\n</html>\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.890625,
          "content": "// Scripts for the demo page of -prefix-free\n\nfunction $(id) { return document.getElementById(id) }\n\n(function(){\n\nif(window.PrefixFree) {\n\tvar source = $('source'),\n\t\tprefixed = $('prefixed');\n\t\t\n\t(source.oninput = function() {\n\t\tprefixed.value = PrefixFree.prefixCSS(source.value, true);\n\t})();\n\t\n\tsource.onscroll = function() {\n\t\tprefixed.scrollTop = source.scrollTop;\n\t}\n}\n\n(window.onhashchange = function() {\n\tvar target, page, previousPage;\n\t\n\tif(location.hash) {\n\t\tpage = target = document.querySelector(location.hash);\n\t\t\n\t\twhile(page && page.className != 'page') {\n\t\t\tpage = page.parentNode;\n\t\t}\n\t}\n\t\n\t(previousPage = document.querySelector('.current.page')) && (previousPage.className = 'page');\n\t\n\tif(page) {\n\t\tpage.className = 'current page';\n\t\t\n\t\tdocument.body.className = 'in-page';\n\t}\n\telse {\n\t\tdocument.body.className = 'home';\n\t}\n\n\tif(target) {\n\t\ttarget.scrollIntoView(true);\n\t}\n})();\n\t\t\n})();\n\n"
        },
        {
          "name": "minify",
          "type": "blob",
          "size": 0.2109375,
          "content": "#!/bin/bash\n(\n    head -n 5 prefixfree.js\n    curl --data-urlencode 'js_code@prefixfree.js' \\\n         --data 'output_info=compiled_code' \\\n         https://closure-compiler.appspot.com/compile\n) > prefixfree.min.js\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "prefixfree.js",
          "type": "blob",
          "size": 13.0244140625,
          "content": "/**\n * StyleFix 1.0.3 & PrefixFree 1.0.7\n * @author Lea Verou\n * MIT license\n */\n\n(function(){\n\nif(!window.addEventListener) {\n\treturn;\n}\n\nvar self = window.StyleFix = {\n\toptIn: document.currentScript.hasAttribute(\"data-prefix\"),\n\n\tlink: function(link) {\n\t\tvar url = link.href || link.getAttribute('data-href');\n\t\ttry {\n\t\t\t// Ignore stylesheets with data-noprefix attribute as well as alternate stylesheets or without (data-)href attribute\n\t\t\tif(!url || link.rel !== 'stylesheet' || link.hasAttribute('data-noprefix')\n\t\t\t\t|| (self.optIn && !link.hasAttribute('data-prefix')) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tcatch(e) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar base = url.replace(/[^\\/]+$/, ''),\n\t\t    base_scheme = (/^[a-z]{3,10}:/.exec(base) || [''])[0],\n\t\t    base_domain = (/^[a-z]{3,10}:\\/\\/[^\\/]+/.exec(base) || [''])[0],\n\t\t    base_query = /^([^?]*)\\??/.exec(url)[1],\n\t\t    parent = link.parentNode,\n\t\t    xhr = new XMLHttpRequest(),\n\t\t    process;\n\n\t\txhr.onreadystatechange = function() {\n\t\t\tif(xhr.readyState === 4) {\n\t\t\t\tprocess();\n\t\t\t}\n\t\t};\n\n\t\tprocess = function() {\n\t\t\t\tvar css = xhr.responseText;\n\n\t\t\t\tif(css && link.parentNode && (!xhr.status || xhr.status < 400 || xhr.status > 600)) {\n\t\t\t\t\tcss = self.fix(css, true, link);\n\n\t\t\t\t\t// Convert relative URLs to absolute, if needed\n\t\t\t\t\tif(css && base) {\n\t\t\t\t\t\tcss = css.replace(/url\\(\\s*?((?:\"|')?)(.+?)\\1\\s*?\\)/gi, function($0, quote, url) {\n\t\t\t\t\t\t\tif(/^([a-z]{3,10}:|#)/i.test(url)) { // Absolute & or hash-relative\n\t\t\t\t\t\t\t\treturn $0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if(/^\\/\\//.test(url)) { // Scheme-relative\n\t\t\t\t\t\t\t\t// May contain sequences like /../ and /./ but those DO work\n\t\t\t\t\t\t\t\treturn 'url(\"' + base_scheme + url + '\")';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if(/^\\//.test(url)) { // Domain-relative\n\t\t\t\t\t\t\t\treturn 'url(\"' + base_domain + url + '\")';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if(/^\\?/.test(url)) { // Query-relative\n\t\t\t\t\t\t\t\treturn 'url(\"' + base_query + url + '\")';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t// Path-relative\n\t\t\t\t\t\t\t\treturn 'url(\"' + base + url + '\")';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// behavior URLs shoudn’t be converted (Issue #19)\n\t\t\t\t\t\t// base should be escaped before added to RegExp (Issue #81)\n\t\t\t\t\t\tvar escaped_base = base.replace(/([\\\\\\^\\$*+[\\]?{}.=!:(|)])/g,\"\\\\$1\");\n\t\t\t\t\t\tcss = css.replace(RegExp('\\\\b(behavior:\\\\s*?url\\\\(\\'?\"?)' + escaped_base, 'gi'), '$1');\n\t\t\t\t\t\t}\n\n\t\t\t\t\tvar style = document.createElement('style');\n\t\t\t\t\tstyle.textContent = '/*# sourceURL='+link.getAttribute('href')+' */\\n/*@ sourceURL='+link.getAttribute('href')+' */\\n' + css;\n\t\t\t\t\tstyle.media = link.media;\n\t\t\t\t\tstyle.disabled = link.disabled;\n\t\t\t\t\tstyle.setAttribute('data-href', link.getAttribute('href'));\n\n\t\t\t\t\tif(link.id) style.id = link.id;\n\n\t\t\t\t\tparent.insertBefore(style, link);\n\t\t\t\t\tparent.removeChild(link);\n\n\t\t\t\t\tstyle.media = link.media; // Duplicate is intentional. See issue #31\n\t\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\txhr.open('GET', url);\n\t\t\txhr.send(null);\n\t\t} catch (e) {\n\t\t\t// Fallback to XDomainRequest if available\n\t\t\tif (typeof XDomainRequest != \"undefined\") {\n\t\t\t\txhr = new XDomainRequest();\n\t\t\t\txhr.onerror = xhr.onprogress = function() {};\n\t\t\t\txhr.onload = process;\n\t\t\t\txhr.open(\"GET\", url);\n\t\t\t\txhr.send(null);\n\t\t\t}\n\t\t}\n\n\t\tlink.setAttribute('data-inprogress', '');\n\t},\n\n\tstyleElement: function(style) {\n\t\tif (style.hasAttribute('data-noprefix')) {\n\t\t\treturn;\n\t\t}\n\t\tvar disabled = style.disabled;\n\n\t\tstyle.textContent = self.fix(style.textContent, true, style);\n\n\t\tstyle.disabled = disabled;\n\t},\n\n\tstyleAttribute: function(element) {\n\t\tvar css = element.getAttribute('style');\n\n\t\tcss = self.fix(css, false, element);\n\n\t\telement.setAttribute('style', css);\n\t},\n\n\tprocess: function() {\n\t\t// Linked stylesheets\n\t\t$('link[rel=\"stylesheet\"]:not([data-inprogress])').forEach(StyleFix.link);\n\n\t\t// Inline stylesheets\n\t\t$('style').forEach(StyleFix.styleElement);\n\n\t\t// Inline styles\n\t\t$('[style]').forEach(StyleFix.styleAttribute);\n\t\t\n\t\tvar event = document.createEvent('Event');\n\t\tevent.initEvent('StyleFixProcessed', true, true);\n\t\tdocument.dispatchEvent(event);\n\n\t},\n\n\tregister: function(fixer, index) {\n\t\t(self.fixers = self.fixers || [])\n\t\t\t.splice(index === undefined? self.fixers.length : index, 0, fixer);\n\t},\n\n\tfix: function(css, raw, element) {\n\t\tif(self.fixers) {\n\t\t  for(var i=0; i<self.fixers.length; i++) {\n\t\t\tcss = self.fixers[i](css, raw, element) || css;\n\t\t  }\n\t\t}\n\n\t\treturn css;\n\t},\n\n\tcamelCase: function(str) {\n\t\treturn str.replace(/-([a-z])/g, function($0, $1) { return $1.toUpperCase(); }).replace('-','');\n\t},\n\n\tdeCamelCase: function(str) {\n\t\treturn str.replace(/[A-Z]/g, function($0) { return '-' + $0.toLowerCase() });\n\t}\n};\n\n/**************************************\n * Process styles\n **************************************/\n(function(){\n\tsetTimeout(function(){\n\t\t$('link[rel=\"stylesheet\"]').forEach(StyleFix.link);\n\t}, 10);\n\n\tdocument.addEventListener('DOMContentLoaded', StyleFix.process, false);\n})();\n\nfunction $(expr, con) {\n\treturn [].slice.call((con || document).querySelectorAll(expr));\n}\n\n})();\n\n/**\n * PrefixFree\n */\n(function(root){\n\nif(!window.StyleFix || !window.getComputedStyle) {\n\treturn;\n}\n\n// Private helper\nfunction fix(what, before, after, replacement, css) {\n\twhat = self[what];\n\n\tif(what.length) {\n\t\tvar regex = RegExp(before + '(' + what.join('|') + ')' + after, 'gi');\n\n\t\tcss = css.replace(regex, replacement);\n\t}\n\n\treturn css;\n}\n\nvar self = window.PrefixFree = {\n\tprefixCSS: function(css, raw, element) {\n\t\tvar prefix = self.prefix;\n\n\t\t// Gradient angles hotfix\n\t\tif(self.functions.indexOf('linear-gradient') > -1) {\n\t\t\t// Gradients are supported with a prefix, convert angles to legacy\n\t\t\tcss = css.replace(/(\\s|:|,)(repeating-)?linear-gradient\\(\\s*(-?\\d*\\.?\\d*)deg/ig, function ($0, delim, repeating, deg) {\n\t\t\t\treturn delim + (repeating || '') + 'linear-gradient(' + (90-deg) + 'deg';\n\t\t\t});\n\t\t}\n\n\t\tcss = fix('functions', '(\\\\s|:|,)', '\\\\s*\\\\(', '$1' + prefix + '$2(', css);\n\t\tcss = fix('keywords', '(\\\\s|:)', '(\\\\s|;|\\\\}|$)', '$1' + prefix + '$2$3', css);\n\t\tcss = fix('properties', '(^|\\\\{|\\\\s|;)', '\\\\s*:', '$1' + prefix + '$2:', css);\n\n\t\t// Prefix properties *inside* values (issue #8)\n\t\tif (self.properties.length) {\n\t\t\tvar regex = RegExp('\\\\b(' + self.properties.join('|') + ')(?!:)', 'gi');\n\n\t\t\tcss = fix('valueProperties', '\\\\b', ':(.+?);', function($0) {\n\t\t\t\treturn $0.replace(regex, prefix + \"$1\")\n\t\t\t}, css);\n\t\t}\n\n\t\tif(raw) {\n\t\t\tcss = fix('selectors', '', '\\\\b', self.prefixSelector, css);\n\t\t\tcss = fix('atrules', '@', '\\\\b', '@' + prefix + '$1', css);\n\t\t}\n\n\t\t// Fix double prefixing\n\t\tcss = css.replace(RegExp('-' + prefix, 'g'), '-');\n\n\t\t// Prefix wildcard\n\t\tcss = css.replace(/-\\*-(?=[a-z]+)/gi, self.prefix);\n\n\t\treturn css;\n\t},\n\n\tproperty: function(property) {\n\t\treturn (self.properties.indexOf(property) >=0 ? self.prefix : '') + property;\n\t},\n\n\tvalue: function(value, property) {\n\t\tvalue = fix('functions', '(^|\\\\s|,)', '\\\\s*\\\\(', '$1' + self.prefix + '$2(', value);\n\t\tvalue = fix('keywords', '(^|\\\\s)', '(\\\\s|$)', '$1' + self.prefix + '$2$3', value);\n\n\t\tif(self.valueProperties.indexOf(property) >= 0) {\n\t\t\tvalue = fix('properties', '(^|\\\\s|,)', '($|\\\\s|,)', '$1'+self.prefix+'$2$3', value);\n\t\t}\n\n\t\treturn value;\n\t},\n\n\tprefixSelector: function(selector) {\n\t\treturn self.selectorMap[selector] || selector\n\t},\n\n\t// Warning: Prefixes no matter what, even if the property is supported prefix-less\n\tprefixProperty: function(property, camelCase) {\n\t\tvar prefixed = self.prefix + property;\n\n\t\treturn camelCase? StyleFix.camelCase(prefixed) : prefixed;\n\t}\n};\n\n/**************************************\n * Properties\n **************************************/\n(function() {\n\tvar prefixes = {},\n\t\tproperties = [],\n\t\tshorthands = {},\n\t\tstyle = getComputedStyle(document.documentElement, null),\n\t\tdummy = document.createElement('div').style;\n\n\t// Why are we doing this instead of iterating over properties in a .style object? Because Webkit.\n\t// 1. Older Webkit won't iterate over those.\n\t// 2. Recent Webkit will, but the 'Webkit'-prefixed properties are not enumerable. The 'webkit'\n\t//    (lower case 'w') ones are, but they don't `deCamelCase()` into a prefix that we can detect.\n\n\tvar iterate = function(property) {\n\t\tif(/^-[^-]/.test(property)) {\n\t\t\tproperties.push(property);\n\n\t\t\tvar parts = property.split('-'),\n\t\t\t\tprefix = parts[1];\n\n\t\t\t// Count prefix uses\n\t\t\tprefixes[prefix] = ++prefixes[prefix] || 1;\n\n\t\t\t// This helps determining shorthands\n\t\t\twhile(parts.length > 3) {\n\t\t\t\tparts.pop();\n\n\t\t\t\tvar shorthand = parts.join('-');\n\n\t\t\t\tif(supported(shorthand) && properties.indexOf(shorthand) === -1) {\n\t\t\t\t\tproperties.push(shorthand);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tsupported = function(property) {\n\t\treturn StyleFix.camelCase(property) in dummy;\n\t}\n\n\t// Some browsers have numerical indices for the properties, some don't\n\tif(style && style.length > 0) {\n\t\tfor(var i=0; i<style.length; i++) {\n\t\t\titerate(style[i])\n\t\t}\n\t}\n\telse {\n\t\tfor(var property in style) {\n\t\t\titerate(StyleFix.deCamelCase(property));\n\t\t}\n\t}\n\n\t// Find most frequently used prefix\n\tvar highest = {uses:0};\n\tfor(var prefix in prefixes) {\n\t\tvar uses = prefixes[prefix];\n\n\t\tif(highest.uses < uses) {\n\t\t\thighest = {prefix: prefix, uses: uses};\n\t\t}\n\t}\n\n\tself.prefix = '-' + highest.prefix + '-';\n\tself.Prefix = StyleFix.camelCase(self.prefix);\n\n\tself.properties = [];\n\n\t// Get properties ONLY supported with a prefix\n\tfor(var i=0; i<properties.length; i++) {\n\t\tvar property = properties[i];\n\n\t\tif(property.indexOf(self.prefix) === 0) { // we might have multiple prefixes, like Opera\n\t\t\tvar unprefixed = property.slice(self.prefix.length);\n\n\t\t\tif(!supported(unprefixed)) {\n\t\t\t\tself.properties.push(unprefixed);\n\t\t\t}\n\t\t}\n\t}\n\n\t// IE fix\n\tif(self.Prefix == 'Ms'\n\t  && !('transform' in dummy)\n\t  && !('MsTransform' in dummy)\n\t  && ('msTransform' in dummy)) {\n\t\tself.properties.push('transform', 'transform-origin');\n\t}\n\n\tself.properties.sort();\n})();\n\n/**************************************\n * Values\n **************************************/\n(function() {\n// Values that might need prefixing\nvar functions = {\n\t'linear-gradient': {\n\t\tproperty: 'backgroundImage',\n\t\tparams: 'red, teal'\n\t},\n\t'calc': {\n\t\tproperty: 'width',\n\t\tparams: '1px + 5%'\n\t},\n\t'element': {\n\t\tproperty: 'backgroundImage',\n\t\tparams: '#foo'\n\t},\n\t'cross-fade': {\n\t\tproperty: 'backgroundImage',\n\t\tparams: 'url(a.png), url(b.png), 50%'\n\t},\n\t'image-set': {\n\t\tproperty: 'backgroundImage',\n\t\tparams: 'url(a.png) 1x, url(b.png) 2x'\n\t}\n};\n\n\nfunctions['repeating-linear-gradient'] =\nfunctions['repeating-radial-gradient'] =\nfunctions['radial-gradient'] =\nfunctions['linear-gradient'];\n\n// Note: The properties assigned are just to *test* support.\n// The keywords will be prefixed everywhere.\nvar keywords = {\n\t'initial': 'color',\n\t'grab': 'cursor',\n\t'grabbing': 'cursor',\n\t'zoom-in': 'cursor',\n\t'zoom-out': 'cursor',\n\t'box': 'display',\n\t'flexbox': 'display',\n\t'inline-flexbox': 'display',\n\t'flex': 'display',\n\t'inline-flex': 'display',\n\t'grid': 'display',\n\t'inline-grid': 'display',\n\t'max-content': 'width',\n\t'min-content': 'width',\n\t'fit-content': 'width',\n\t'fill-available': 'width',\n\t'contain-floats': 'width'\n};\n\nself.functions = [];\nself.keywords = [];\n\nvar style = document.createElement('div').style;\n\nfunction supported(value, property) {\n\tstyle[property] = '';\n\tstyle[property] = value;\n\n\treturn !!style[property];\n}\n\nfor (var func in functions) {\n\tvar test = functions[func],\n\t\tproperty = test.property,\n\t\tvalue = func + '(' + test.params + ')';\n\n\tif (!supported(value, property)\n\t  && supported(self.prefix + value, property)) {\n\t\t// It's supported, but with a prefix\n\t\tself.functions.push(func);\n\t}\n}\n\nfor (var keyword in keywords) {\n\tvar property = keywords[keyword];\n\n\tif (!supported(keyword, property)\n\t  && supported(self.prefix + keyword, property)) {\n\t\t// It's supported, but with a prefix\n\t\tself.keywords.push(keyword);\n\t}\n}\n\n})();\n\n/**************************************\n * Selectors and @-rules\n **************************************/\n(function() {\n\nvar\nselectors = {\n\t':any-link': null,\n\t'::backdrop': null,\n\t':fullscreen': null,\n\t':full-screen': ':fullscreen',\n\t//sigh\n\t'::placeholder': null,\n\t':placeholder': ':placeholder-shown',\n\t'::input-placeholder': '::placeholder',\n\t':input-placeholder': ':placeholder-shown',\n\t':read-only': null,\n\t':read-write': null,\n\t'::selection': null\n},\n\natrules = {\n\t'keyframes': 'name',\n\t'viewport': null,\n\t'document': 'regexp(\".\")'\n};\n\nself.selectors = [];\nself.selectorMap = {};\nself.atrules = [];\n\nvar style = root.appendChild(document.createElement('style'));\n\nfunction supported(selector) {\n\tstyle.textContent = selector + '{}';  // Safari 4 has issues with style.innerHTML\n\n\treturn !!style.sheet.cssRules.length;\n}\n\nfor(var selector in selectors) {\n\tvar standard = selectors[selector] || selector\n\tvar prefixed = selector.replace(/::?/, function($0) { return $0 + self.prefix })\n\tif(!supported(standard) && supported(prefixed)) {\n\t\tself.selectors.push(standard);\n\t\tself.selectorMap[standard] = prefixed;\n\t}\n}\n\nfor(var atrule in atrules) {\n\tvar test = atrule + ' ' + (atrules[atrule] || '');\n\n\tif(!supported('@' + test) && supported('@' + self.prefix + test)) {\n\t\tself.atrules.push(atrule);\n\t}\n}\n\nroot.removeChild(style);\n\n})();\n\n// Properties that accept properties as their value\nself.valueProperties = [\n\t'transition',\n\t'transition-property',\n\t'will-change'\n]\n\n// Add class for current prefix\nroot.className += ' ' + self.prefix;\n\nStyleFix.register(self.prefixCSS);\n\n\n})(document.documentElement);\n"
        },
        {
          "name": "prefixfree.min.js",
          "type": "blob",
          "size": 6.5478515625,
          "content": "/**\n * StyleFix 1.0.3 & PrefixFree 1.0.7\n * @author Lea Verou\n * MIT license\n */\n(function(){function m(a,b){return[].slice.call((b||document).querySelectorAll(a))}if(window.addEventListener){var e=window.StyleFix={link:function(a){var b=a.href||a.getAttribute(\"data-href\");try{if(!b||\"stylesheet\"!==a.rel||a.hasAttribute(\"data-noprefix\"))return}catch(p){return}var d=b.replace(/[^\\/]+$/,\"\"),f=(/^[a-z]{3,10}:/.exec(d)||[\"\"])[0],h=(/^[a-z]{3,10}:\\/\\/[^\\/]+/.exec(d)||[\"\"])[0],k=/^([^?]*)\\??/.exec(b)[1],g=a.parentNode,c=new XMLHttpRequest,l;c.onreadystatechange=function(){4===c.readyState&&\nl()};l=function(){var b=c.responseText;if(b&&a.parentNode&&(!c.status||400>c.status||600<c.status)){if((b=e.fix(b,!0,a))&&d)var b=b.replace(/url\\(\\s*?((?:\"|')?)(.+?)\\1\\s*?\\)/gi,function(b,a,c){return/^([a-z]{3,10}:|#)/i.test(c)?b:/^\\/\\//.test(c)?'url(\"'+f+c+'\")':/^\\//.test(c)?'url(\"'+h+c+'\")':/^\\?/.test(c)?'url(\"'+k+c+'\")':'url(\"'+d+c+'\")'}),n=d.replace(/([\\\\\\^\\$*+[\\]?{}.=!:(|)])/g,\"\\\\$1\"),b=b.replace(RegExp(\"\\\\b(behavior:\\\\s*?url\\\\('?\\\"?)\"+n,\"gi\"),\"$1\");n=document.createElement(\"style\");n.textContent=\n\"/*# sourceURL=\"+a.getAttribute(\"href\")+\" */\\n/*@ sourceURL=\"+a.getAttribute(\"href\")+\" */\\n\"+b;n.media=a.media;n.disabled=a.disabled;n.setAttribute(\"data-href\",a.getAttribute(\"href\"));a.id&&(n.id=a.id);g.insertBefore(n,a);g.removeChild(a);n.media=a.media}};try{c.open(\"GET\",b),c.send(null)}catch(p){\"undefined\"!=typeof XDomainRequest&&(c=new XDomainRequest,c.onerror=c.onprogress=function(){},c.onload=l,c.open(\"GET\",b),c.send(null))}a.setAttribute(\"data-inprogress\",\"\")},styleElement:function(a){if(!a.hasAttribute(\"data-noprefix\")){var b=\na.disabled;a.textContent=e.fix(a.textContent,!0,a);a.disabled=b}},styleAttribute:function(a){var b=a.getAttribute(\"style\"),b=e.fix(b,!1,a);a.setAttribute(\"style\",b)},process:function(){m('link[rel=\"stylesheet\"]:not([data-inprogress])').forEach(StyleFix.link);m(\"style\").forEach(StyleFix.styleElement);m(\"[style]\").forEach(StyleFix.styleAttribute)},register:function(a,b){(e.fixers=e.fixers||[]).splice(void 0===b?e.fixers.length:b,0,a)},fix:function(a,b,d){if(e.fixers)for(var f=0;f<e.fixers.length;f++)a=\ne.fixers[f](a,b,d)||a;return a},camelCase:function(a){return a.replace(/-([a-z])/g,function(b,a){return a.toUpperCase()}).replace(\"-\",\"\")},deCamelCase:function(a){return a.replace(/[A-Z]/g,function(b){return\"-\"+b.toLowerCase()})}};(function(){setTimeout(function(){m('link[rel=\"stylesheet\"]').forEach(StyleFix.link)},10);document.addEventListener(\"DOMContentLoaded\",StyleFix.process,!1)})()}})();\n(function(m){function e(b,d,f,h,k){b=a[b];b.length&&(b=RegExp(d+\"(\"+b.join(\"|\")+\")\"+f,\"gi\"),k=k.replace(b,h));return k}if(window.StyleFix&&window.getComputedStyle){var a=window.PrefixFree={prefixCSS:function(b,d,f){var h=a.prefix;-1<a.functions.indexOf(\"linear-gradient\")&&(b=b.replace(/(\\s|:|,)(repeating-)?linear-gradient\\(\\s*(-?\\d*\\.?\\d*)deg/ig,function(b,a,d,f){return a+(d||\"\")+\"linear-gradient(\"+(90-f)+\"deg\"}));b=e(\"functions\",\"(\\\\s|:|,)\",\"\\\\s*\\\\(\",\"$1\"+h+\"$2(\",b);b=e(\"keywords\",\"(\\\\s|:)\",\"(\\\\s|;|\\\\}|$)\",\n\"$1\"+h+\"$2$3\",b);b=e(\"properties\",\"(^|\\\\{|\\\\s|;)\",\"\\\\s*:\",\"$1\"+h+\"$2:\",b);if(a.properties.length){var k=RegExp(\"\\\\b(\"+a.properties.join(\"|\")+\")(?!:)\",\"gi\");b=e(\"valueProperties\",\"\\\\b\",\":(.+?);\",function(a){return a.replace(k,h+\"$1\")},b)}d&&(b=e(\"selectors\",\"\",\"\\\\b\",a.prefixSelector,b),b=e(\"atrules\",\"@\",\"\\\\b\",\"@\"+h+\"$1\",b));b=b.replace(RegExp(\"-\"+h,\"g\"),\"-\");return b=b.replace(/-\\*-(?=[a-z]+)/gi,a.prefix)},property:function(b){return(0<=a.properties.indexOf(b)?a.prefix:\"\")+b},value:function(b,d){b=\ne(\"functions\",\"(^|\\\\s|,)\",\"\\\\s*\\\\(\",\"$1\"+a.prefix+\"$2(\",b);b=e(\"keywords\",\"(^|\\\\s)\",\"(\\\\s|$)\",\"$1\"+a.prefix+\"$2$3\",b);0<=a.valueProperties.indexOf(d)&&(b=e(\"properties\",\"(^|\\\\s|,)\",\"($|\\\\s|,)\",\"$1\"+a.prefix+\"$2$3\",b));return b},prefixSelector:function(b){return a.selectorMap[b]||b},prefixProperty:function(b,d){var f=a.prefix+b;return d?StyleFix.camelCase(f):f}};(function(){var b={},d=[],f=getComputedStyle(document.documentElement,null),h=document.createElement(\"div\").style,k=function(a){if(\"-\"===\na.charAt(0)){d.push(a);a=a.split(\"-\");var c=a[1];for(b[c]=++b[c]||1;3<a.length;)a.pop(),c=a.join(\"-\"),StyleFix.camelCase(c)in h&&-1===d.indexOf(c)&&d.push(c)}};if(f&&0<f.length)for(var g=0;g<f.length;g++)k(f[g]);else for(var c in f)k(StyleFix.deCamelCase(c));var g=0,e,p;for(p in b)f=b[p],g<f&&(e=p,g=f);a.prefix=\"-\"+e+\"-\";a.Prefix=StyleFix.camelCase(a.prefix);a.properties=[];for(g=0;g<d.length;g++)c=d[g],0===c.indexOf(a.prefix)&&(e=c.slice(a.prefix.length),StyleFix.camelCase(e)in h||a.properties.push(e));\n!(\"Ms\"!=a.Prefix||\"transform\"in h||\"MsTransform\"in h)&&\"msTransform\"in h&&a.properties.push(\"transform\",\"transform-origin\");a.properties.sort()})();(function(){function b(a,b){e[b]=\"\";e[b]=a;return!!e[b]}var d={\"linear-gradient\":{property:\"backgroundImage\",params:\"red, teal\"},calc:{property:\"width\",params:\"1px + 5%\"},element:{property:\"backgroundImage\",params:\"#foo\"},\"cross-fade\":{property:\"backgroundImage\",params:\"url(a.png), url(b.png), 50%\"},\"image-set\":{property:\"backgroundImage\",params:\"url(a.png) 1x, url(b.png) 2x\"}};\nd[\"repeating-linear-gradient\"]=d[\"repeating-radial-gradient\"]=d[\"radial-gradient\"]=d[\"linear-gradient\"];var f={initial:\"color\",grab:\"cursor\",grabbing:\"cursor\",\"zoom-in\":\"cursor\",\"zoom-out\":\"cursor\",box:\"display\",flexbox:\"display\",\"inline-flexbox\":\"display\",flex:\"display\",\"inline-flex\":\"display\",grid:\"display\",\"inline-grid\":\"display\",\"max-content\":\"width\",\"min-content\":\"width\",\"fit-content\":\"width\",\"fill-available\":\"width\",\"contain-floats\":\"width\"};a.functions=[];a.keywords=[];var e=document.createElement(\"div\").style,\nk;for(k in d){var g=d[k],c=g.property,g=k+\"(\"+g.params+\")\";!b(g,c)&&b(a.prefix+g,c)&&a.functions.push(k)}for(var l in f)c=f[l],!b(l,c)&&b(a.prefix+l,c)&&a.keywords.push(l)})();(function(){function b(a){h.textContent=a+\"{}\";return!!h.sheet.cssRules.length}var d={\":any-link\":null,\"::backdrop\":null,\":fullscreen\":null,\":full-screen\":\":fullscreen\",\"::placeholder\":null,\":placeholder\":\"::placeholder\",\"::input-placeholder\":\"::placeholder\",\":input-placeholder\":\"::placeholder\",\":read-only\":null,\":read-write\":null,\n\"::selection\":null},e={keyframes:\"name\",viewport:null,document:'regexp(\".\")'};a.selectors=[];a.selectorMap={};a.atrules=[];var h=m.appendChild(document.createElement(\"style\")),k;for(k in d){var g=d[k]||k,c=k.replace(/::?/,function(b){return b+a.prefix});!b(g)&&b(c)&&(a.selectors.push(g),a.selectorMap[g]=c)}for(var l in e)d=l+\" \"+(e[l]||\"\"),!b(\"@\"+d)&&b(\"@\"+a.prefix+d)&&a.atrules.push(l);m.removeChild(h)})();a.valueProperties=[\"transition\",\"transition-property\",\"will-change\"];m.className+=\" \"+a.prefix;\nStyleFix.register(a.prefixCSS)}})(document.documentElement);\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}