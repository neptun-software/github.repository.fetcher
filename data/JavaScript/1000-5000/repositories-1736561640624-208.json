{
  "metadata": {
    "timestamp": 1736561640624,
    "page": 208,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "faye/faye",
      "stars": 4392,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0927734375,
          "content": "*.gem\nbuild\nGemfile.lock\nlib/client\nnode_modules\npackage-lock.json\nspec/*_bundle.js\nspec/*.map\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 19.6376953125,
          "content": "### 1.4.0 / 2020-07-31\n\n- Implement TLS certificate verification and enable it by default in the Ruby\n  client class `Faye::Client`\n- Add a `:tls` option to the Ruby client with sub-field `:verify_peer` for\n  configuring TLS verification\n- Officially support the `tls` option in the Node.js client, whose contents are\n  forward to the `https` and `tls` modules as appropriate\n\n### 1.3.0 / 2020-06-08\n\n- Support `user:pass@` authorization in URIs and send `Authorization` headers\n  from the Node HTTP transport\n- Support IPv6 hostnames in URIs\n- Allow credentials (cookies and `Authorization` headers) in cross-origin\n  requests, by:\n  - setting `Access-Control-Allow-Origin` to the value of the `Origin` header\n    (not `*`)\n  - enabling `Access-Control-Allow-Credentials`\n- Enable credentials when sending cross-origin requests\n- Don't disconnect WebSocket on page unload if `autodisconnect` is turned off\n- Catch errors when creating a WebSocket, which happens when Content Security\n  Policy blocks it, allowing other transports to be tried\n- Fix a bug in the client where it handles messages from other clients as though\n  they're the server's response to its own messages, based on the `id` field;\n  now we only treat messages as server responses if they contain `successful:\n  true`\n- Stop sending an empty message list `[]` from the WebSocket client as a\n  keep-alive mechanism since CometD does not accept this message\n- Fix deprecation warnings for using the `new Buffer()` constructor\n- Switch to the Apache 2.0 license\n\n\n### 1.2.5 / 2020-04-28\n\n- Fix `/meta/*` channel recognition bug in the server that enables\n  authentication bypass\n  - https://blog.jcoglan.com/2020/04/28/authentication-bypass-in-faye/\n\n\n### 1.2.4 / 2017-01-28\n\n- Fix `RackAdapter#get_client` that was failing due to a URI error\n- Define `Promise#catch` in a safe way for old browsers\n- Log errors in the Node HTTP transport\n\n\n### 1.2.3 / 2016-10-11\n\n- Return an error if the `data` field is missing on published messages\n- Fix errors that occur in the new `websocket` util when the browser does not\n  support WebSocket\n\n\n### 1.2.2 / 2016-07-18\n\n- Mitigate the HTTPoxy vulnerability: https://httpoxy.org/\n\n\n### 1.2.1 / 2016-06-29\n\n- Fix a missing variable error in `NodeAdapter`\n\n\n### 1.2.0 / 2016-06-26\n\n- Add `client.subscribe().withChannel()` to yield the message channel for\n  wildcard subscriptions\n- Restructure the JavaScript codebase around Node modules (require/exports)\n  rather than globals\n- Update the Promise shim to reflect the standard API, including `catch()` and\n  `all()`\n- Support connecting to servers that use SNI in the Ruby client\n- Make the JavaScript client work inside React Native and Web Workers\n- Remove JSON2; you should import a JSON shim yourself if necessary\n- Handle errors that occur when a message is partially delivered via EventSource\n- Reject requests with invalid (non-array or -object) top-level JSON values\n- Make local client requests asynchronous to avoid re-entrant request handling\n  errors\n- Remove `Connection: Close` from HTTP responses to allow use of keep-alive\n- Use `XMLHttpRequest` in preference to the ActiveX API in IE10\n- Fix bug where flushing large message batches puts promises in an invalid state\n\n\n### 1.1.3 / 2020-04-28\n\n- Fix `/meta/*` channel recognition bug in the server that enables\n  authentication bypass\n  - https://blog.jcoglan.com/2020/04/28/authentication-bypass-in-faye/\n\n\n### 1.1.2 / 2015-07-19\n\n- Allow the `Authorization` header to be used on CORS requests\n- Disallow unused methods like PUT and DELETE on CORS requests\n- Stop IE prematurely garbage-collecting `XDomainRequest` objects\n- Make sure messages can be sent if they overflow the request size limit and the\n  outbox is empty\n- Don't send messages over WebSockets unless they are in the 'open' ready-state\n- Fix a bug preventing use of the in-process transport in Ruby\n\n\n### 1.1.1 / 2015-02-25\n\n- Make sure the client ID associated with a WebSocket is not dropped, so the\n  socket can be closed properly\n- Handle cases where a JSON-P endpoint returns no response argument\n- Stop trying to retry messages after the client has been disconnected\n- Remove duplication of the client ID in EventSource URLs\n\n\n### 1.1.0 / 2014-12-22\n\n- Allow the server and client to use WebSocket extensions, for example\n  permessage-deflate\n- Support the `HTTP_PROXY` and `HTTPS_PROXY` environment variables to send all\n  client connections through an HTTP proxy\n- Introduce the `Scheduler` API to allow the user to control message retries\n- Add the `attempts` and `deadline` options to `Client#publish()`\n- Let `RackAdapter` take a block that yields the instance, so extensions can be\n  added to middleware\n- Allow monitoring listeners to see the `clientId` on publishd messages but\n  still avoid sending it to subscribers\n- Return a promise from `Client#disconnect()`\n- Fix client-side retry bugs causing the client to flood the server with\n  duplicate messages\n- Send all transport types in the `supportedConnectionTypes` handshake parameter\n- Don't close WebSockets when the client recovers from an error and sends a new\n  `clientId`\n- Replace `cookiejar` with `tough-cookie` to avoid global variable leaks\n\n\n### 1.0.4 / 2020-04-28\n\n- Fix `/meta/*` channel recognition bug in the server that enables\n  authentication bypass\n  - https://blog.jcoglan.com/2020/04/28/authentication-bypass-in-faye/\n\n\n### 1.0.3 / 2014-07-08\n\n- Make some changes to JSON-P responses to mitigate the Rosetta Flash attack\n- http://miki.it/blog/2014/7/8/abusing-jsonp-with-rosetta-flash/\n\n\n### 1.0.2 -- removed due to error while publishing\n\n\n### 1.0.1 / 2013-12-10\n\n- Add `Adapter#close()` method for gracefully shutting down the server\n- Fix error recover bug in WebSocket that made transport cycle through\n  `up`/`down` state\n- Update Promise implementation to pass `promises-aplus-tests 2.0`\n- Correct some incorrect variable names in the Ruby transports\n- Make logging methods public to fix a problem on Ruby 2.1\n\n\n### 1.0.0 / 2013-10-01\n\n- Client changes:\n  - Allow clients to be instantiated with URI objects rather than strings\n  - Add a `ca` option to the Node `Client` class for passing in trusted server\n    certificates\n  - Objects supporting the `callback()` method in JavaScript are now Promises\n  - Fix protocol-relative URI parsing in the client\n  - Remove the `getClientId()` and `getState()` methods from the `Client` class\n- Transport changes:\n  - Add request-size limiting to all batching transports\n  - Make the WebSocket transport more robust against quiet network periods and\n    clients going to sleep\n  - Support cookies across all transports when using the client on Node.js or\n    Ruby\n  - Support custom headers in the `cross-origin-long-polling` and server-side\n    `websocket` transports\n- Adapter changes:\n  - Support the `rack.hijack` streaming API\n  - Migrate to MultiJson for JSON handling on Ruby, allowing use of JRuby\n  - Escape U+2028 and U+2029 in JSON-P output\n  - Fix a bug stopping requests being routed when the mount point is `/`\n  - Fix various bugs that cause errors to be thrown if we try to send a message\n    over a closed socket\n  - Remove the `listen()` method from `Adapter` in favour of using\n    server-specific APIs\n- Server changes:\n  - Use cryptographically secure random number generators to create client IDs\n  - Allow extensions to access request properties by using 3-ary methods\n  - Objects supporting the `bind()` method now implement the full `EventEmitter`\n    API\n  - Stop the server from forwarding the `clientId` property of published\n    messages\n- Miscellaneous:\n  - Support Browserify by returning the client module\n  - `Faye.logger` can now be a logger object rather than a function\n\n\n### 0.8.11 / 2014-07-08\n\n- Make some changes to JSON-P responses to mitigate the Rosetta Flash attack\n- http://miki.it/blog/2014/7/8/abusing-jsonp-with-rosetta-flash/\n\n\n### 0.8.10 -- removed due to error while publishing\n\n\n### 0.8.9 / 2013-02-26\n\n- Specify ciphers for SSL on Node to mitigate the BEAST attack\n- Mitigate increased risk of socket hang-up errors in Node v0.8.20\n- Fix race condition when processing outgoing extensions in the Node server\n- Fix problem loading the client script when using `{mount: '/'}`\n- Clean up connection objects when a WebSocket is re-used with a new clientId\n- All JavaScript code now runs in strict mode\n- Select transport on handshake, instead of on client creation to allow time for\n  `disable()` calls\n- Do not speculatively open WebSocket/EventSource connections if they are\n  disabled\n- Gracefully handle WebSocket messages with no data on the client side\n- Close and reconnect WebSocket when onerror is fired, not just when onclose is\n  fired\n- Fix problem with caching of EventSource connections with stale clientIds\n- Don't parse query strings when checking if a URL is same-origin or not\n\n\n### 0.8.8 / 2013-01-10\n\n- Patch security hole allowing remote execution of arbitrary Server methods\n\n\n### 0.8.7 -- removed due to error while publishing\n\n\n### 0.8.6 / 2012-10-07\n\n- Make sure messages pushed to the client over a socket pass through outgoing\n  extensions\n\n\n### 0.8.5 / 2012-09-30\n\n- Fix a bug in `URI.parse()` that caused Faye endpoints to inherit search and\n  hash from `window.location`\n\n\n### 0.8.4 / 2012-09-29\n\n- Optimise upgrade process so that WebSocket is tested earlier and the\n  connection is cached\n- Check that EventSource actually works to work around broken Opera\n  implementation\n- Emit `connection:open` and `connection:close` events from the Engine proxy\n- Increase size of client IDs from 128 to 160 bits\n- Fix bug with relative URL resolution in IE\n- Limit the JSON-P transport's message buffer so it doesn't create over-long\n  URLs\n- Send `Pragma: no-cache` with XHR requests to guard against iOS 6 POST caching\n- Add `charset=utf-8` to response Content-Type headers\n\n\n### 0.8.3 / 2012-07-15\n\n- `Client#subscribe` returns an array of Subscriptions if given an array of\n  channels\n- Allow different endpoints to be specified per-transport\n- Only use IE's `XDomainRequest` for same-protocol requests\n- Replace URL parser with one that treats relative URLs the same as the browser\n- Improve logging of malformed requests and detect problems earlier\n- Make sure socket connections are closed when a client session is timed out\n- Stop WebSocket reconnecting after `window.onbeforeunload`\n\n\n### 0.8.2 / 2012-04-12\n\n- Fix replacement of `null` with `{}` in `copyObject()`\n- Make EventSource transport trigger `transport:up/down` events\n- Supply source map for minified JavaScript client, and include source in gem\n- Return `Content-Length: 0` for 304 responses\n- Handle pre-flight CORS requests from old versions of Safari\n\n\n### 0.8.1 / 2012-03-15\n\n- Make `Publisher#trigger` safe for event listeners that modify the listener\n  list\n- Make `Server#subscribe` return a response if the incoming message has an error\n- Fix edge case in code that identifies the `clientId` of socket connections\n- Return `Content-Length` headers for HTTP responses\n- Don't send empty lists of messages from the WebSocket transport\n- Stop client sending multiple `/meta/subscribe` messages for subscriptions made\n  before handshaking\n- Stop client treating incoming published messages as responses to `/meta/*`\n  messages\n\n\n### 0.8.0 / 2012-02-26\n\n- Extract the Redis engine into a separate library, `faye-redis`\n- Stabilize and document the Engine API so others can write backends\n- Extract WebSocket and EventSource tools into a separate library,\n  `faye-websocket`\n- Improve use of WebSocket so messages are immediately pushed rather than\n  polling\n- Introduce new EventSource-based transport, for proxies that block WebSocket\n- Support the Rainbows and Goliath web servers for Ruby, same as\n  `faye-websocket`\n- Improve detection of network errors and switch to fixed-interval for\n  reconnecting\n- Add `setHeader()` method to Client (e.g. for connecting to Salesforce API)\n- Add `timeout()` method to `Faye.Deferrable` to match\n  `EventMachine::Deferrable`\n- Fix some bugs in client-side message handlers created with `subscribe()`\n- Improve speed and memory consumption of `copyObject()`\n- Switch from JSON to Yajl for JSON parsing in Ruby\n\n\n### 0.7.2 / 2013-01-10\n\n- Patch security hole allowing remote execution of arbitrary Server methods\n\n\n### 0.7.1 / 2011-12-22\n\n- Extension `added()` and `removed()` methods now receive the extended object\n- Detection of WebSockets in RackAdapter is more strict\n\n\n### 0.7.0 / 2011-11-22\n\n- Provide an event API for monitoring engine events on the server side\n- Implement server-side WebSocket connections for improved latency\n- Fix WebSocket protocol bugs and expose APIs for developers to use\n- Make server-side HTTP transports support SSL and cookies\n- Allow clients to disable selected transports and autodisconnection\n- Add callback/errback API to `Client#publish()` interface\n- Add `socket` setting for the Redis engine for connecting through a Unix socket\n\n\n### 0.6.8 / 2013-01-10\n\n- Patch security hole allowing remote execution of arbitrary Server methods\n\n\n### 0.6.7 / 2011-10-20\n\n- Cache client script in memory and add `ETag` and `Last-Modified` headers\n- Fix bug in Node Redis engine where `undefined` was used if no namespace given\n- Flush Redis message queues using a transaction to avoid re-delivery of\n  messages\n- Fix race condition and timing errors present in Redis locking code\n- Use `Cache-Control: no-cache, no-store` on JSON-P responses\n- Improvements to the CORS and JSON-P transports\n- Prevent retry handlers in transports from being invoked multiple times\n- Use the current page protocol by default when parsing relative URIs\n\n\n### 0.6.6 / 2011-09-12\n\n- Add `:key` and `:cert` options to the `Adapter#listen` methods for setting up\n  SSL\n- Fix error detection of CORS transport in IE9 running IE8 compatibility mode\n- Fix dependency versions so that Rubygems lets Faye install\n\n\n### 0.6.5 / 2011-08-29\n\n- Fix UTF-8 encoding bugs in draft-75/76 and protocol-8 WebSocket parsers\n- Switch to streaming parser for WebSocket protocol-8\n- Remove an `SREM` operation that shouldn't have been in the Redis engine\n- Move `thin_extensions.rb` so it's not on the Rubygems load path\n\n\n### 0.6.4 / 2011-08-18\n\n- Support WebSocket protocol used by Chrome 14 and Firefox 6\n- Fix handling of multibyte characters in WebSocket messages on Node\n- Improve message routing in Node memory engine to avoid false duplicates\n\n\n### 0.6.3 / 2011-07-10\n\n- Use sequential message IDs to reduce memory usage on the client side\n- Only send advice with handshake and connect responses\n- Stop trying to publish `/meta/*` messages - no-one is listening and it breaks\n  `/**`\n- Fix bug causing invalid listeners to appear after a client reconnection\n- Stop loading `rubygems` within our library code\n- Make sure we only queue a message for each client once in the Redis engine\n- Use lists instead of sets for message queues in Redis\n- Improve clean-up of expired clients in Redis engine\n\n\n### 0.6.2 / 2011-06-19\n\n- Add authentication, database selection and namespacing to Redis engine\n- Clean up all client data when removing clients from Redis\n- Fix `cross-origin-long-polling` for `OPTIONS`-aware browsers\n- Update secure WebSocket detection for recent Node versions\n- Reinstate `faye.client` field in Rack environment\n\n\n### 0.6.1 / 2011-06-06\n\n- Fix `cross-origin-long-polling` support in `RackAdapter`\n- Plug some potential memory leaks in `Memory` engine\n\n\n### 0.6.0 / 2011-05-21\n\n- Extract core logic into the `Engine` class to support swappable backends\n- Introduce a Redis-backed engine to support clustered web front-ends\n- Use CORS for `cross-domain long-polling`\n- Make server more resilient against bad requests, including empty message lists\n- Perform subscription validation on the server and use errbacks to signal\n  errors\n- Prohibit publishing to wildcard channels\n- Unsubscribing from a channel is now O(1) instead of O(N)\n- Much more thorough and consistent unit test coverage of both versions\n- Automatic integration tests using Terminus and TestSwarm\n\n\n### 0.5.5 / 2011-01-16\n\n- Open a real socket to check for WebSocket usability, not just object detection\n- Catch server-side errors when handshaking with WebSockets\n\n\n### 0.5.4 / 2010-12-19\n\n- Add a `#callback` method to `Subscriptions` to detect when they become active\n- Add `:extensions` option to `RackAdapter` to make it easier to extend\n  middleware\n- Detect secure WebSocket requests through the `HTTP_X_FORWARDED_PROTO` header\n- Handle socket errors when sending WebSocket messages from `NodeAdapter`\n- Use exponential backoff to reconnect client-side WebSockets to reduce CPU load\n\n\n### 0.5.3 / 2010-10-21\n\n- Improve detection of `wss:` requirement for secure WebSocket connections\n- Correctly use default ports (80,443) for server-side HTTP connections\n- Support legacy `application/x-www-form-urlencoded` POST requests\n- Delete unused Channel objects that have all their subscribers removed\n- Fix resend/reconnect logic in WebSocket transport\n- Keep client script in memory rather than reading it from disk every time\n- Prevent error-adding extensions from breaking the core protocol\n\n\n### 0.5.2 / 2010-08-12\n\n- Support draft-76 of the WebSocket protocol (FF4, Chrome 6)\n- Reduce `Connection::MAX_DELAY` to improve latency\n\n\n### 0.5.1 / 2010-07-21\n\n- Fix a publishing problem in Ruby `LocalTransport`\n\n\n### 0.5.0 / 2010-07-17 \n\n- Handle multiple event listeners bound to a channel\n- Add extension system for adding domain-specific logic to the protocol\n- Improve handling of client reconnections if the server goes down\n- Change default polling interval to 0 (immediate reconnect)\n- Add support for WebSockets (draft75 only) as a network transport\n- Remove support for Ruby servers other than Thin\n- Make client and server compatible with CometD (1.x and 2.0) components\n- Improve clean-up of unused server-side connections\n- Change Node API for adding Faye service to an HTTP server\n\n\n### 0.3.4 / 2010-06-20\n\n- Stop local clients going into an infinite loop if a subscription block causes\n  a reconnect\n\n\n### 0.3.3 / 2010-06-07\n\n- Bring Node APIs up to date with 0.1.97\n- Catch `ECONNREFUSED` errors in Node clients to withstand server outages\n- Refactor the `Server` internals\n\n\n### 0.3.2 / 2010-04-04\n\n- Fix problems with JSON serialization when Prototype, MooTools present\n- Make the client reconnect if it doesn't hear from the server after a timeout\n- Stop JavaScript server returning `NaN` for `advice.interval`\n- Make Ruby server return an integer for `advice.interval`\n- Ensure EventMachine is running before handling messages\n- Handle `data` and `end` events properly in Node HTTP API\n- Switch to `application/json` for content types and stop using querystring\n  format in POST bodies\n- Respond to any URL path under the mount point, not just the exact match\n\n\n### 0.3.1 / 2010-03-09\n\n- Pass client down through Rack stack as `env['faye.client']`\n- Refactor some JavaScript internals to mirror Ruby codebase\n\n\n### 0.3.0 / 2010-03-01\n\n- Add server-side clients for Node.js and Ruby environments\n- Clients support both HTTP and in-process transports\n- Fix ID generation in JavaScript version to 128-bit IDs\n- Fix bug in interpretation of `**` channel wildcard\n- Users don't have to call `#connect()` on clients any more\n- Fix timeout race conditions that were killing active connections\n- Support new Node APIs from 0.1.29.\n\n\n### 0.2.2 / 2010-02-10\n\n- Kick out requests with malformed JSON as 400s\n\n\n### 0.2.1 / 2010-02-04\n\n- Fix server-side flushing of callback-polling connections\n- Backend can be used cross-domain if running on Node or Thin\n\n\n### 0.2.0 / 2010-02-02\n\n- Port server to JavaScript with an adapter for Node.js\n- Support Thin's async responses in the Ruby version for complete non-blocking\n- Fix some minor client-side bugs in transport choice\n\n\n### 0.1.1 / 2009-07-26\n\n- Fix a broken client build\n\n\n### 0.1.0 / 2009-06-15\n\n- Ruby Bayeux server and Rack adapter\n- Internally evented using EventMachine, web frontend blocks\n- JavaScript client with `long-polling` and `callback-polling`\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.158203125,
          "content": "# Code of Conduct\n\nAll projects under the [Faye](https://github.com/faye) umbrella are covered by\nthe [Code of Conduct](https://github.com/faye/code-of-conduct).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.986328125,
          "content": "# Contributing to Faye\n\nFaye is implemented in both JavaScript and Ruby. You should be able to hack on\neach implementation independently, although since both implementations include a\nbuild of the JS client, you will need Node if you want to build the Ruby gem.\n\nTo get the code:\n\n    git clone git://github.com/faye/faye.git\n    cd faye\n\n## Working on the JavaScript codebase\n\nTo install the dependencies (you will need to do this if you need to build the\nRuby gem as well):\n\n    npm install\n\nTo run the tests on Node:\n\n    npm test\n\nTo run the tests in the browser, you should run\n\n    make test\n\nwhich starts a process to continuously rebuild the source code and tests as you\nedit them. Open `spec/index.html` to run the tests.\n\nTo build the package that we release to npm, run:\n\n    make\n\n## Working on the Ruby codebase\n\nTo install the dependencies:\n\n    bundle install\n\nTo run the tests:\n\n    bundle exec rspec\n\nTo build the gem (you will need to install the Node dependencies for this):\n\n    make gem\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.037109375,
          "content": "source 'https://rubygems.org'\ngemspec\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.544921875,
          "content": "Copyright 2009-2020 James Coglan\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See the License for the\nspecific language governing permissions and limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.8515625,
          "content": "PATH  := node_modules/.bin:$(PATH)\nSHELL := /bin/bash\n\nsource_files   := $(shell find src -name '*.js')\nspec_files     := $(shell find spec -name '*_spec.js')\nwebpack_config := webpack.config.js\n\nname           := faye-browser\nbundles        := $(name).js $(name)-min.js\n\nclient_dir     := build/client\nclient_bundles := $(bundles:%=$(client_dir)/%)\ntop_files      := CHANGELOG.md LICENSE.md README.md package.json src\ntop_level      := $(top_files:%=build/%)\n\n.PHONY: all gem clean\n\nall: $(client_bundles) $(top_level)\n\ngem: all\n\tgem build faye.gemspec\n\nclean:\n\trm -rf build *.gem spec/*_bundle.js{,.map}\n\n$(client_dir)/$(name).js: $(webpack_config) $(source_files)\n\twebpack\n\n$(client_dir)/$(name)-min.js: $(webpack_config) $(source_files)\n\tNODE_ENV=production webpack\n\nbuild/src: $(source_files) build\n\trsync -a src/ $@/\n\nbuild/%: % build\n\tcp $< $@\n\nbuild:\n\tmkdir -p $@\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.421875,
          "content": "# Faye\n\nFaye is a set of tools for simple publish-subscribe messaging between web\nclients. It ships with easy-to-use message routing servers for Node.js and Rack\napplications, and clients that can be used on the server and in the browser.\n\n- Documentation: http://faye.jcoglan.com\n- Mailing list: http://groups.google.com/group/faye-users\n- Bug tracker: http://github.com/faye/faye/issues\n- Source code: http://github.com/faye/faye\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 0.583984375,
          "content": "require 'rubygems'\nrequire './lib/faye'\n\ntask :example, :port, :ssl do |t, args|\n  exec \"ruby examples/ruby/server.rb #{args[:port]} #{args[:ssl] && 'ssl'}\"\nend\n\ntask :handshake, :port, :n, :c do |t, args|\n  require 'cgi'\n  require 'json'\n  \n  message = {:channel => '/meta/handshake',\n             :version => '1.0',\n             :supportedConnectionTypes => ['long-polling']}\n  \n  message = CGI.escape(JSON.dump message)\n  url = \"http://127.0.0.1:#{args[:port]}/bayeux?jsonp=callback&message=#{message}\"\n  puts \"Request URL:\\n#{url}\\n\\n\"\n  \n  exec \"ab -n #{args[:n]} -c #{args[:c]} '#{url}'\"\nend\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "faye.gemspec",
          "type": "blob",
          "size": 2.2021484375,
          "content": "Gem::Specification.new do |s|\n  s.name     = 'faye'\n  s.version  = '1.4.0'\n  s.summary  = 'Simple pub/sub messaging for the web'\n  s.author   = 'James Coglan'\n  s.email    = 'jcoglan@gmail.com'\n  s.homepage = 'https://faye.jcoglan.com'\n  s.license  = 'Apache-2.0'\n\n  s.extra_rdoc_files = %w[README.md]\n  s.rdoc_options     = %w[--main README.md --markup markdown]\n  s.require_paths    = %w[lib]\n\n  # It is important that the JavaScript files listed here are not removed: they\n  # contain the browser client and the gem should fail to build without them.\n  # You should generate them by running `make` in the project root.\n  client_suffix = %w[.js .js.map -min.js -min.js.map]\n  client_files  = client_suffix.map { |ext| \"build/client/faye-browser#{ext}\" }\n\n  s.files = %w[CHANGELOG.md LICENSE.md README.md] +\n            Dir.glob('lib/**/*.rb') +\n            client_files\n  \n  s.add_dependency 'cookiejar', '>= 0.3.0'\n  s.add_dependency 'em-http-request', '>= 1.1.6'\n  s.add_dependency 'eventmachine', '>= 0.12.0'\n  s.add_dependency 'faye-websocket', '>= 0.11.0'\n  s.add_dependency 'multi_json', '>= 1.0.0'\n  s.add_dependency 'rack', '>= 1.0.0'\n  s.add_dependency 'websocket-driver', '>= 0.5.1'\n\n  s.add_development_dependency 'compass', '~> 0.11.0'\n  s.add_development_dependency 'haml', '~> 3.1.0'\n  s.add_development_dependency 'permessage_deflate', '>= 0.1.0'\n  s.add_development_dependency 'puma', '>= 2.0.0'\n  s.add_development_dependency 'rack-proxy', '~> 0.4.0'\n  s.add_development_dependency 'rack-test'\n  s.add_development_dependency 'rake'\n  s.add_development_dependency 'RedCloth', '~> 3.0.0'\n  s.add_development_dependency 'rspec', '~> 2.99.0'\n  s.add_development_dependency 'rspec-eventmachine', '>= 0.2.0'\n  s.add_development_dependency 'sass', '~> 3.2.0'\n  s.add_development_dependency 'sinatra'\n  s.add_development_dependency 'staticmatic'\n\n  jruby = RUBY_PLATFORM =~ /java/\n  rbx   = defined?(RUBY_ENGINE) && RUBY_ENGINE =~ /rbx/\n\n  unless jruby\n    s.add_development_dependency 'rainbows', '~> 4.4.0'\n    s.add_development_dependency 'thin', '>= 1.2.0'\n  end\n\n  unless rbx or RUBY_VERSION < '1.9'\n    s.add_development_dependency 'goliath'\n  end\n\n  unless jruby or rbx\n    s.add_development_dependency 'passenger', '>= 4.0.0'\n  end\nend\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.6650390625,
          "content": "{\n          \"name\": \"faye\",\n          \"description\": \"Simple pub/sub messaging for the web\",\n          \"homepage\": \"https://faye.jcoglan.com\",\n          \"author\": \"James Coglan <jcoglan@gmail.com> (http://jcoglan.com/)\",\n          \"keywords\": [\n                    \"comet\",\n                    \"websocket\",\n                    \"pubsub\",\n                    \"bayeux\",\n                    \"ajax\",\n                    \"http\"\n          ],\n          \"license\": \"Apache-2.0\",\n          \"version\": \"1.4.0\",\n          \"engines\": {\n                    \"node\": \">=0.8.0\"\n          },\n          \"main\": \"src/faye_node\",\n          \"browser\": \"src/faye_browser\",\n          \"dependencies\": {\n                    \"asap\": \"*\",\n                    \"csprng\": \"*\",\n                    \"faye-websocket\": \">=0.9.1\",\n                    \"safe-buffer\": \"*\",\n                    \"tough-cookie\": \"*\",\n                    \"tunnel-agent\": \"*\"\n          },\n          \"devDependencies\": {\n                    \"jstest\": \"~1.0.0\",\n                    \"mime\": \"~1.2.0\",\n                    \"permessage-deflate\": \">=0.1.0\",\n                    \"promises-aplus-tests\": \"~2.1.0\",\n                    \"webpack\": \"*\",\n                    \"webpack-cli\": \"*\",\n                    \"imports-loader\": \"<1.0.0\"\n          },\n          \"scripts\": {\n                    \"start\": \"webpack --watch\",\n                    \"test\": \"find spec -name '*_spec.js' | xargs jstest\",\n                    \"promise\": \"promises-aplus-tests src/util/promise.js\"\n          },\n          \"repository\": {\n                    \"type\": \"git\",\n                    \"url\": \"git://github.com/faye/faye.git\"\n          },\n          \"bugs\": \"https://github.com/faye/faye/issues\"\n}\n"
        },
        {
          "name": "site",
          "type": "tree",
          "content": null
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "webpack.config.js",
          "type": "blob",
          "size": 0.5703125,
          "content": "let mode = process.env.NODE_ENV || 'development',\n    name;\n\nif (mode === 'production') {\n  name = 'faye-browser-min';\n} else {\n  name = 'faye-browser';\n}\n\nmodule.exports = {\n  mode,\n  devtool: 'source-map',\n\n  entry: {\n    ['build/client/' + name]: '.',\n    'spec/browser_bundle': './spec/browser'\n  },\n\n  output: {\n    path: __dirname,\n    filename: '[name].js',\n    library: 'Faye'\n  },\n\n  module: {\n    rules: [\n      {\n        test: /\\/spec\\/.*\\.js$/,\n        loader: 'imports-loader?define=>false'\n      }\n    ],\n\n    noParse: /jstest/\n  },\n\n  node: {\n    process: false\n  }\n};\n"
        }
      ]
    }
  ]
}