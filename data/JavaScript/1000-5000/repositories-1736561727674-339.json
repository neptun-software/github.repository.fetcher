{
  "metadata": {
    "timestamp": 1736561727674,
    "page": 339,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "actuallymentor/battery",
      "stars": 4105,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".DS_Store",
          "type": "blob",
          "size": 6.00390625,
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0048828125,
          "content": "*.app"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING",
          "type": "blob",
          "size": 0.2001953125,
          "content": "Contributions are welcome. Open a pull-request for any improvements or additions. It might take me a while to get to seeing it though, please contact me on Twitter if I'm being very slow (@actuallymentor)."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2022 Mentor Palokaj\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.6181640625,
          "content": "# Battery charge limiter for Apple Silicon Macbook devices\n\n<img width=\"300px\" align=\"right\" src=\"./screenshots/tray.png\"/>This tool makes it possible to keep a chronically plugged in Apple Silicon Macbook at `80%` battery, since that will prolong the longevity of the battery. It is free and open-source and will remain that way.\n\n> Want to know if this tool does anything or is just a placebo? Read [this excellent article](https://batteryuniversity.com/article/bu-808-how-to-prolong-lithium-based-batteries). TL;DR: keep your battery cool, keep it at 80% when plugged in, and discharge it as shallowly as feasible.\n\n### Requirements\n\nThis is an app for Apple Silicon Macs. It will not work on Intel macs. Do you have an older Mac? Consider the free version of the [Al Dente](https://apphousekitchen.com/) software package. It is a good alternative and has a premium version with many more features.\n\n### Installation\n\n- Option 1: install the app through brew with `brew install battery`\n- Option 2: [download the app dmg version here](https://github.com/actuallymentor/battery/releases/)\n- Option 3: install ONLY the command line interface (see section below)\n\nWhen installing via brew or dmg, opening the macOS app is required to complete the installation.\n\nThe first time you open the app, it will ask for your administator password so it can install the needed components. Please note that the app:\n\n- Discharges your battery until it reaches 80%, **even when plugged in**\n- Disables charging when your battery is above 80% charged\n- Enables charging when your battery is under 80% charged\n- Keeps the limit engaged even after rebooting\n- Keeps the limit engaged even after closing the tray app\n- Also automatically installs the `battery` command line tool. If you want a custom charging percentage, the CLI is the only way to do that.\n\nDo you have questions, comments, or feature requests? [Open an issue here](https://github.com/actuallymentor/battery/issues) or [Tweet at me](https://twitter.com/actuallymentor).\n\n---\n\n## 🖥 Command-line version\n\n> If you don't know what a \"command line\" is, ignore this section. You don't need it.\n\nThe GUI app uses a command line tool under the hood. Installing the GUI automatically installs the CLI as well. You can also separately install the CLI.\n\nThe CLI is used for managing the battery charging status for Apple Silicon Macbooks. Can be used to enable/disable the Macbook from charging the battery when plugged into power.\n\n### Installation\n\nOne-line installation:\n\n```bash\ncurl -s https://raw.githubusercontent.com/actuallymentor/battery/main/setup.sh | bash\n```\n\nThis will:\n\n1. Download the precompiled `smc` tool in this repo (built from the [hholtmann/smcFanControl](https://github.com/hholtmann/smcFanControl.git) repository)\n2. Install `smc` to `/usr/local/bin`\n3. Install `battery` to `/usr/local/bin`\n\n### Usage\n\nExample usage:\n\n```shell\n# This will enable charging when your battery dips under 80, and disable it when it exceeds 80\nbattery maintain 80\n```\n\nAfter running a command like `battery charging off` you can verify the change visually by looking at the battery icon:\n\n![Battery not charging](./screenshots/not-charging-screenshot.png)\n\nAfter running `battery charging on` you will see it change to this:\n\n![Battery charging](./screenshots/charging-screenshot.png)\n\nFor help, run `battery` without parameters:\n\n```\nBattery CLI utility v1.0.1\n\nUsage:\n\n  battery status\n    output battery SMC status, % and time remaining\n\n  battery maintain LEVEL[1-100,stop]\n    reboot-persistent battery level maintenance: turn off charging above, and on below a certain value\n    eg: battery maintain 80\n    eg: battery maintain stop\n\n  battery charging SETTING[on/off]\n    manually set the battery to (not) charge\n    eg: battery charging on\n\n  battery adapter SETTING[on/off]\n    manually set the adapter to (not) charge even when plugged in\n    eg: battery adapter off\n\n  battery charge LEVEL[1-100]\n    charge the battery to a certain percentage, and disable charging when that percentage is reached\n    eg: battery charge 90\n\n  battery discharge LEVEL[1-100]\n    block power input from the adapter until battery falls to this level\n    eg: battery discharge 90\n\n  battery visudo\n    ensure you don't need to call battery with sudo\n    This is already used in the setup script, so you should't need it.\n\n  battery update\n    update the battery utility to the latest version\n\n  battery reinstall\n    reinstall the battery utility to the latest version (reruns the installation script)\n\n  battery uninstall\n    enable charging, remove the smc tool, and the battery script\n```\n\n## FAQ & Troubleshooting\n\n### Why does this exist?\n\nI was looking at the Al Dente software package for battery limiting, but I found the [license too limiting](https://github.com/davidwernhart/AlDente/discussions/558) for a poweruser like myself.\n\nI would actually have preferred using Al Dente, but decided to create a command-line utility to replace it as a side-project on holiday. A colleague mentioned they would like a GUI, so I spend a few evenings setting up an Electron app. And voila, here we are.\n\n### \"It's not working\"\n\nIf you used one of the earlier versions of the `battery` utility, you may run into [path/permission issues](https://github.com/actuallymentor/battery/issues/8). This is not your fault but mine. To fix it:\n\n```\nsudo rm -rf ~/.battery\nbinfolder=/usr/local/bin\nsudo rm -v \"$binfolder/smc\" \"$binfolder/battery\"\n```\n\nThen reopen the app and things should work. If not, [open an issue](https://github.com/actuallymentor/battery/issues/new/choose) and I'll try to help you fix it.\n\n### A note to Little Snitch users\n\nThis tool calls a number of urls, blocking all of them will only break auto-updates.\n\n1. `unidentifiedanalytics.web.app` is a self-made app that tracks app installations, I use it to see if enough people use the app to justify spending time on it. It tracks only how many unique ip addresses open the app.\n1. `icanhazip.com` is used to see if there is an internet connection\n1. `github.com` is used both as a liveness check and as the source of updates for the underlying command-line utility\n1. `electronjs.org` hosts the update server for the GUI\n\nAll urls are called over `https` and so not leak data. Unidentified Analytics keeps track of unique ip addresses that open the app, but nothing else.\n\n### What distinguishes this project from Optimized Charging?\n\nOptimized Charging, a feature that is built into MacOS, aims to ensure the longevity and health of your battery. It does so by \"delaying charging the battery past 80% when it predicts that you’ll be plugged in for an extended period of time, and aims to charge the battery before you unplug,\" as explained in [Apple's user guide](https://support.apple.com/en-ca/guide/mac-help/mchlfc3b7879/mac#:~:text=Optimized%20Battery%20Charging%3A%20To%20reduce,the%20battery%20before%20you%20unplug.).\n\nAdditionally, Optimized Charging uses machine learning to decide when the battery should be held at 80%, and when it should become fully charged. If your Mac is not plugged in on a regular schedule, optimized charging will not work as intended.\n\nThis app is a similar alternative to Optimized Charging, giving the user control over when it is activated, what percentage the battery should be held at, and more.\n\n### How do I support this project?\n\nDo you know how to code? Open a pull-request for a feature with the label [help wanted (PR welcome)](https://github.com/actuallymentor/battery/labels/help%20wanted%20%28PR%20welcome%29).\n\nDo you have an awesome feature idea? [Add a feature request](https://github.com/actuallymentor/battery/issues/new/choose)\n\nDo you just want to keep me motivated to update the app? [Tweet at me](https://twitter.com/actuallymentor)\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "battery.sh",
          "type": "blob",
          "size": 24.794921875,
          "content": "#!/bin/bash\n\n## ###############\n## Update management\n## variables are used by this binary as well at the update script\n## ###############\nBATTERY_CLI_VERSION=\"v1.2.7\"\n\n# Path fixes for unexpected environments\nPATH=/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n\n## ###############\n## Variables\n## ###############\nbinfolder=/usr/local/bin\nvisudo_folder=/private/etc/sudoers.d\nvisudo_file=${visudo_folder}/battery\nconfigfolder=$HOME/.battery\npidfile=$configfolder/battery.pid\nlogfile=$configfolder/battery.log\nmaintain_percentage_tracker_file=$configfolder/maintain.percentage\nmaintain_voltage_tracker_file=$configfolder/maintain.voltage\ndaemon_path=$HOME/Library/LaunchAgents/battery.plist\ncalibrate_pidfile=$configfolder/calibrate.pid\n\n# Voltage limits\nvoltage_min=\"10.5\"\nvoltage_max=\"12.6\"\nvoltage_hyst_min=\"0.1\"\nvoltage_hyst_max=\"2\"\n\n## ###############\n## Housekeeping\n## ###############\n\n# Create config folder if needed\nmkdir -p $configfolder\n\n# create logfile if needed\ntouch $logfile\n\n# Trim logfile if needed\nlogsize=$(stat -f%z \"$logfile\")\nmax_logsize_bytes=5000000\nif ((logsize > max_logsize_bytes)); then\n\ttail -n 100 $logfile >$logfile\nfi\n\n# CLI help message\nhelpmessage=\"\nBattery CLI utility $BATTERY_CLI_VERSION\n\nUsage:\n\n  battery status\n    output battery SMC status, % and time remaining\n\n  battery logs LINES[integer, optional]\n    output logs of the battery CLI and GUI\n\teg: battery logs 100\n\n  battery maintain PERCENTAGE[1-100,stop]\n    reboot-persistent battery level maintenance: turn off charging above, and on below a certain value\n\tit has the option of a --force-discharge flag that discharges even when plugged in (this does NOT work well with clamshell mode)\n    eg: battery maintain 80\n    eg: battery maintain stop\n\n  battery maintain VOLTAGE[${voltage_min}V-${voltage_max}V,stop] (HYSTERESIS[${voltage_hyst_min}V-${voltage_hyst_max}V])\n    reboot-persistent battery level maintenance: keep battery at a certain voltage\n  default hysteresis: 0.1V\n    eg: battery maintain 11.4V       # keeps battery between 11.3V and 11.5V\n    eg: battery maintain 11.4V 0.3V  # keeps battery between 11.1V and 11.7V\n\n  battery charging SETTING[on/off]\n    manually set the battery to (not) charge\n    eg: battery charging on\n\n  battery adapter SETTING[on/off]\n    manually set the adapter to (not) charge even when plugged in\n    eg: battery adapter off\n\n  battery calibrate\n    calibrate the battery by discharging it to 15%, then recharging it to 100%, and keeping it there for 1 hour\n\n  battery charge LEVEL[1-100]\n    charge the battery to a certain percentage, and disable charging when that percentage is reached\n    eg: battery charge 90\n\n  battery discharge LEVEL[1-100]\n    block power input from the adapter until battery falls to this level\n    eg: battery discharge 90\n\n  battery visudo\n    ensure you don't need to call battery with sudo\n    This is already used in the setup script, so you should't need it.\n\n  battery update\n    update the battery utility to the latest version\n\n  battery reinstall\n    reinstall the battery utility to the latest version (reruns the installation script)\n\n  battery uninstall\n    enable charging, remove the smc tool, and the battery script\n\n\"\n\n# Visudo instructions\nvisudoconfig=\"\n# Visudo settings for the battery utility installed from https://github.com/actuallymentor/battery\n# intended to be placed in $visudo_file on a mac\nCmnd_Alias      BATTERYOFF = $binfolder/smc -k CH0B -w 02, $binfolder/smc -k CH0C -w 02, $binfolder/smc -k CH0B -r, $binfolder/smc -k CH0C -r\nCmnd_Alias      BATTERYON = $binfolder/smc -k CH0B -w 00, $binfolder/smc -k CH0C -w 00\nCmnd_Alias      DISCHARGEOFF = $binfolder/smc -k CH0I -w 00, $binfolder/smc -k CH0I -r\nCmnd_Alias      DISCHARGEON = $binfolder/smc -k CH0I -w 01\nCmnd_Alias      LEDCONTROL = $binfolder/smc -k ACLC -w 04, $binfolder/smc -k ACLC -w 03, $binfolder/smc -k ACLC -w 02, $binfolder/smc -k ACLC -w 01, $binfolder/smc -k ACLC -w 00, $binfolder/smc -k ACLC -r\nALL ALL = NOPASSWD: BATTERYOFF\nALL ALL = NOPASSWD: BATTERYON\nALL ALL = NOPASSWD: DISCHARGEOFF\nALL ALL = NOPASSWD: DISCHARGEON\nALL ALL = NOPASSWD: LEDCONTROL\n\"\n\n# Get parameters\nbattery_binary=$0\naction=$1\nsetting=$2\nsubsetting=$3\n\n## ###############\n## Helpers\n## ###############\n\nfunction log() {\n\techo -e \"$(date +%D-%T) - $1\"\n}\n\nfunction valid_percentage() {\n\tif ! [[ \"$1\" =~ ^[0-9]+$ ]] || [[ \"$1\" -lt 0 ]] || [[ \"$1\" -gt 100 ]]; then\n\t\treturn 1\n\telse\n\t\treturn 0\n\tfi\n}\n\nfunction valid_voltage() {\n\tif [[ \"$1\" =~ ^[0-9]+(\\.[0-9]+)?V$ ]]; then\n\t\treturn 0\n\tfi\n\treturn 1\n}\n\n## #################\n## SMC Manipulation\n## #################\n\n# Change magsafe color\n# see community sleuthing: https://github.com/actuallymentor/battery/issues/71\nfunction change_magsafe_led_color() {\n\tlog \"MagSafe LED function invoked\"\n\tcolor=$1\n\n\t# Check whether user can run color changes without password (required for backwards compatibility)\n\tif sudo -n smc -k ACLC -r &>/dev/null; then\n\t\tlog \"💡 Setting magsafe color to $color\"\n\telse\n\t\tlog \"🚨 Your version of battery is using an old visudo file, please run 'battery visudo' to fix this, until you do battery cannot change magsafe led colors\"\n\t\treturn\n\tfi\n\n\tif [[ \"$color\" == \"green\" ]]; then\n\t\tlog \"setting LED to green\"\n\t\tsudo smc -k ACLC -w 03\n\telif [[ \"$color\" == \"orange\" ]]; then\n\t\tlog \"setting LED to orange\"\n\t\tsudo smc -k ACLC -w 04\n\telse\n\t\t# Default action: reset. Value 00 is a guess and needs confirmation\n\t\tlog \"resetting LED\"\n\t\tsudo smc -k ACLC -w 00\n\tfi\n}\n\n# Re:discharging, we're using keys uncovered by @howie65: https://github.com/actuallymentor/battery/issues/20#issuecomment-1364540704\n# CH0I seems to be the \"disable the adapter\" key\nfunction enable_discharging() {\n\tlog \"🔽🪫 Enabling battery discharging\"\n\tsudo smc -k CH0I -w 01\n\tsudo smc -k ACLC -w 01\n}\n\nfunction disable_discharging() {\n\tlog \"🔼🪫 Disabling battery discharging\"\n\tsudo smc -k CH0I -w 00\n\t# Keep track of status\n\tis_charging=$(get_smc_charging_status)\n\n\tif ! valid_percentage \"$setting\"; then\n\n\t\tlog \"Disabling discharging: No valid maintain percentage set, enabling charging\"\n\t\t# use direct commands since enable_charging also calls disable_discharging, and causes an eternal loop\n\t\tsudo smc -k CH0B -w 00\n\t\tsudo smc -k CH0C -w 00\n\t\tchange_magsafe_led_color \"orange\"\n\n\telif [[ \"$battery_percentage\" -ge \"$setting\" && \"$is_charging\" == \"enabled\" ]]; then\n\n\t\tlog \"Disabling discharging: Charge above $setting, disabling charging\"\n\t\tdisable_charging\n\t\tchange_magsafe_led_color \"green\"\n\n\telif [[ \"$battery_percentage\" -lt \"$setting\" && \"$is_charging\" == \"disabled\" ]]; then\n\n\t\tlog \"Disabling discharging: Charge below $setting, enabling charging\"\n\t\t# use direct commands since enable_charging also calls disable_discharging, and causes an eternal loop\n\t\tsudo smc -k CH0B -w 00\n\t\tsudo smc -k CH0C -w 00\n\t\tchange_magsafe_led_color \"orange\"\n\n\tfi\n\n\tbattery_percentage=$(get_battery_percentage)\n}\n\n# Re:charging, Aldente uses CH0B https://github.com/davidwernhart/AlDente/blob/0abfeafbd2232d16116c0fe5a6fbd0acb6f9826b/AlDente/Helper.swift#L227\n# but @joelucid uses CH0C https://github.com/davidwernhart/AlDente/issues/52#issuecomment-1019933570\n# so I'm using both since with only CH0B I noticed sometimes during sleep it does trigger charging\nfunction enable_charging() {\n\tlog \"🔌🔋 Enabling battery charging\"\n\tsudo smc -k CH0B -w 00\n\tsudo smc -k CH0C -w 00\n\tdisable_discharging\n}\n\nfunction disable_charging() {\n\tlog \"🔌🪫 Disabling battery charging\"\n\tsudo smc -k CH0B -w 02\n\tsudo smc -k CH0C -w 02\n}\n\nfunction get_smc_charging_status() {\n\thex_status=$(smc -k CH0B -r | awk '{print $4}' | sed s:\\)::)\n\tif [[ \"$hex_status\" == \"00\" ]]; then\n\t\techo \"enabled\"\n\telse\n\t\techo \"disabled\"\n\tfi\n}\n\nfunction get_smc_discharging_status() {\n\thex_status=$(smc -k CH0I -r | awk '{print $4}' | sed s:\\)::)\n\tif [[ \"$hex_status\" == \"0\" ]]; then\n\t\techo \"not discharging\"\n\telse\n\t\techo \"discharging\"\n\tfi\n}\n\n## ###############\n## Statistics\n## ###############\n\nfunction get_battery_percentage() {\n\tbattery_percentage=$(pmset -g batt | tail -n1 | awk '{print $3}' | sed s:\\%\\;::)\n\techo \"$battery_percentage\"\n}\n\nfunction get_remaining_time() {\n\ttime_remaining=$(pmset -g batt | tail -n1 | awk '{print $5}')\n\techo \"$time_remaining\"\n}\n\nfunction get_charger_state() {\n\tac_attached=$(pmset -g batt | tail -n1 | awk '{ x=match($0, /AC attached/) > 0; print x }')\n\techo \"$ac_attached\"\n}\n\nfunction get_maintain_percentage() {\n\tmaintain_percentage=$(cat $maintain_percentage_tracker_file 2>/dev/null)\n\techo \"$maintain_percentage\"\n}\n\nfunction get_voltage() {\n\tvoltage=$(ioreg -l -n AppleSmartBattery -r | grep \"\\\"Voltage\\\" =\" | awk '{ print $3/1000 }' | tr ',' '.')\n\techo \"$voltage\"\n}\n\n## ###############\n## Actions\n## ###############\n\n# Help message\nif [ -z \"$action\" ] || [[ \"$action\" == \"help\" ]]; then\n\techo -e \"$helpmessage\"\n\texit 0\nfi\n\n# Visudo message\nif [[ \"$action\" == \"visudo\" ]]; then\n\n\t# User to set folder ownership to is $setting if it is defined and $USER otherwise\n\tif [[ -z \"$setting\" ]]; then\n\t\tsetting=$USER\n\tfi\n\n\t# Set visudo tempfile ownership to current user\n\tlog \"Setting visudo file permissions to $setting\"\n\tsudo chown -R $setting $configfolder\n\n\t# Write the visudo file to a tempfile\n\tvisudo_tmpfile=\"$configfolder/visudo.tmp\"\n\tsudo rm visudo_tmpfile 2>/dev/null\n\techo -e \"$visudoconfig\" >$visudo_tmpfile\n\n\t# If the visudo file is the same (no error, exit code 0), set the permissions just\n\tif sudo cmp $visudo_file $visudo_tmpfile &>/dev/null; then\n\n\t\techo \"The existing battery visudo file is what it should be for version $BATTERY_CLI_VERSION\"\n\n\t\t# Check if file permissions are correct, if not, set them\n\t\tcurrent_visudo_file_permissions=$(stat -f \"%Lp\" $visudo_file)\n\t\tif [[ \"$current_visudo_file_permissions\" != \"440\" ]]; then\n\t\t\tsudo chmod 440 $visudo_file\n\t\tfi\n\n\t\t# exit because no changes are needed\n\t\texit 0\n\n\tfi\n\n\t# Validate that the visudo tempfile is valid\n\tif sudo visudo -c -f $visudo_tmpfile &>/dev/null; then\n\n\t\t# If the visudo folder does not exist, make it\n\t\tif ! test -d \"$visudo_folder\"; then\n\t\t\tsudo mkdir -p \"$visudo_folder\"\n\t\tfi\n\n\t\t# Copy the visudo file from tempfile to live location\n\t\tsudo cp $visudo_tmpfile $visudo_file\n\n\t\t# Delete tempfile\n\t\trm $visudo_tmpfile\n\n\t\t# Set correct permissions on visudo file\n\t\tsudo chmod 440 $visudo_file\n\n\t\techo \"Visudo file updated successfully\"\n\n\telse\n\t\techo \"Error validating visudo file, this should never happen:\"\n\t\tsudo visudo -c -f $visudo_tmpfile\n\tfi\n\n\texit 0\nfi\n\n# Reinstall helper\nif [[ \"$action\" == \"reinstall\" ]]; then\n\techo \"This will run curl -sS https://raw.githubusercontent.com/actuallymentor/battery/main/setup.sh | bash\"\n\tif [[ ! \"$setting\" == \"silent\" ]]; then\n\t\techo \"Press any key to continue\"\n\t\tread\n\tfi\n\tcurl -sS https://raw.githubusercontent.com/actuallymentor/battery/main/setup.sh | bash\n\texit 0\nfi\n\n# Update helper\nif [[ \"$action\" == \"update\" ]]; then\n\n\t# Check if we have the most recent version\n\tif curl -sS https://raw.githubusercontent.com/actuallymentor/battery/main/battery.sh | grep -q \"$BATTERY_CLI_VERSION\"; then\n\t\techo \"No need to update, offline version number $BATTERY_CLI_VERSION matches remote version number\"\n\telse\n\t\techo \"This will run curl -sS https://raw.githubusercontent.com/actuallymentor/battery/main/update.sh | bash\"\n\t\tif [[ ! \"$setting\" == \"silent\" ]]; then\n\t\t\techo \"Press any key to continue\"\n\t\t\tread\n\t\tfi\n\t\tcurl -sS https://raw.githubusercontent.com/actuallymentor/battery/main/update.sh | bash\n\tfi\n\texit 0\nfi\n\n# Uninstall helper\nif [[ \"$action\" == \"uninstall\" ]]; then\n\n\tif [[ ! \"$setting\" == \"silent\" ]]; then\n\t\techo \"This will enable charging, and remove the smc tool and battery script\"\n\t\techo \"Press any key to continue\"\n\t\tread\n\tfi\n\tenable_charging\n\tdisable_discharging\n\t$battery_binary remove_daemon\n\tsudo rm -v \"$binfolder/smc\" \"$binfolder/battery\" $visudo_file\n\tsudo rm -v -r \"$configfolder\"\n\tpkill -f \"/usr/local/bin/battery.*\"\n\texit 0\nfi\n\n# Charging on/off controller\nif [[ \"$action\" == \"charging\" ]]; then\n\n\tlog \"Setting $action to $setting\"\n\n\t# Disable running daemon\n\t$battery_binary maintain stop\n\n\t# Set charging to on and off\n\tif [[ \"$setting\" == \"on\" ]]; then\n\t\tenable_charging\n\telif [[ \"$setting\" == \"off\" ]]; then\n\t\tdisable_charging\n\telse\n\t\tlog \"Error: $setting is not \\\"on\\\" or \\\"off\\\".\"\n\t\texit 1\n\tfi\n\n\texit 0\n\nfi\n\n# Discharge on/off controller\nif [[ \"$action\" == \"adapter\" ]]; then\n\n\tlog \"Setting $action to $setting\"\n\n\t# Disable running daemon\n\t$battery_binary maintain stop\n\n\t# Set charging to on and off\n\tif [[ \"$setting\" == \"on\" ]]; then\n\t\tenable_discharging\n\telif [[ \"$setting\" == \"off\" ]]; then\n\t\tdisable_discharging\n\telse\n\t\tlog \"Error: $setting is not \\\"on\\\" or \\\"off\\\".\"\n\t\texit 1\n\tfi\n\n\texit 0\n\nfi\n\n# Charging on/off controller\nif [[ \"$action\" == \"charge\" ]]; then\n\n\tif ! valid_percentage \"$setting\"; then\n\t\tlog \"Error: $setting is not a valid setting for battery charge. Please use a number between 0 and 100\"\n\t\texit 1\n\tfi\n\n\t# Disable running daemon\n\t$battery_binary maintain stop\n\n\t# Disable charge blocker if enabled\n\t$battery_binary adapter on\n\n\t# Start charging\n\tbattery_percentage=$(get_battery_percentage)\n\tlog \"Charging to $setting% from $battery_percentage%\"\n\tenable_charging # also disables discharging\n\n\t# Loop until battery percent is exceeded\n\twhile [[ \"$battery_percentage\" -lt \"$setting\" ]]; do\n\n\t\tif [[ \"$battery_percentage\" -ge \"$((setting - 3))\" ]]; then\n\t\t\tsleep 20\n\t\telse\n\t\t\tcaffeinate -is sleep 60\n\t\tfi\n\n\tdone\n\n\tdisable_charging\n\tlog \"Charging completed at $battery_percentage%\"\n\n\texit 0\n\nfi\n\n# Discharging on/off controller\nif [[ \"$action\" == \"discharge\" ]]; then\n\n\tif ! valid_percentage \"$setting\"; then\n\t\tlog \"Error: $setting is not a valid setting for battery discharge. Please use a number between 0 and 100\"\n\t\texit 1\n\tfi\n\n\t# Start charging\n\tbattery_percentage=$(get_battery_percentage)\n\tlog \"Discharging to $setting% from $battery_percentage%\"\n\tenable_discharging\n\n\t# Loop until battery percent is exceeded\n\twhile [[ \"$battery_percentage\" -gt \"$setting\" ]]; do\n\n\t\tlog \"Battery at $battery_percentage% (target $setting%)\"\n\t\tcaffeinate -is sleep 60\n\t\tbattery_percentage=$(get_battery_percentage)\n\n\tdone\n\n\tdisable_discharging\n\tlog \"Discharging completed at $battery_percentage%\"\n\nfi\n\n# Maintain at level\nif [[ \"$action\" == \"maintain_synchronous\" ]]; then\n\n\t# Checking if the calibration process is running\n\tif test -f \"$calibrate_pidfile\"; then\n\t\tpid=$(cat \"$calibrate_pidfile\" 2>/dev/null)\n\t\tkill $calibrate_pidfile &>/dev/null\n\t\tlog \"🚨 Calibration process have been stopped\"\n\tfi\n\n\t# Recover old maintain status if old setting is found\n\tif [[ \"$setting\" == \"recover\" ]]; then\n\n\t\t# Before doing anything, log out environment details as a debugging trail\n\t\tlog \"Debug trail. User: $USER, config folder: $configfolder, logfile: $logfile, file called with 1: $1, 2: $2\"\n\n\t\tmaintain_percentage=$(cat $maintain_percentage_tracker_file 2>/dev/null)\n\t\tif [[ $maintain_percentage ]]; then\n\t\t\tlog \"Recovering maintenance percentage $maintain_percentage\"\n\t\t\tsetting=$(echo $maintain_percentage)\n\t\telse\n\t\t\tlog \"No setting to recover, exiting\"\n\t\t\texit 0\n\t\tfi\n\tfi\n\n\tif ! valid_percentage \"$setting\"; then\n\t\tlog \"Error: $setting is not a valid setting for battery maintain. Please use a number between 0 and 100\"\n\t\texit 1\n\tfi\n\n\t# Check if the user requested that the battery maintenance first discharge to the desired level\n\tif [[ \"$subsetting\" == \"--force-discharge\" ]]; then\n\t\t# Before we start maintaining the battery level, first discharge to the target level\n\t\tlog \"Triggering discharge to $setting before enabling charging limiter\"\n\t\t$battery_binary discharge \"$setting\"\n\t\tlog \"Discharge pre battery-maintenance complete, continuing to battery maintenance loop\"\n\telse\n\t\tlog \"Not triggering discharge as it is not requested\"\n\tfi\n\n\t# Start charging\n\tbattery_percentage=$(get_battery_percentage)\n\n\tlog \"Charging to and maintaining at $setting% from $battery_percentage%\"\n\n\t# Loop until battery percent is exceeded\n\twhile true; do\n\n\t\t# Keep track of status\n\t\tis_charging=$(get_smc_charging_status)\n\t\tac_attached=$(get_charger_state)\n\n\t\tif [[ \"$battery_percentage\" -ge \"$setting\" && (\"$is_charging\" == \"enabled\" || \"$ac_attached\" == \"1\") ]]; then\n\n\t\t\tlog \"Charge above $setting\"\n\t\t\tif [[ \"$is_charging\" == \"enabled\" ]]; then\n\t\t\t\tdisable_charging\n\t\t\tfi\n\t\t\tchange_magsafe_led_color \"green\"\n\n\t\telif [[ \"$battery_percentage\" -lt \"$setting\" && \"$is_charging\" == \"disabled\" ]]; then\n\n\t\t\tlog \"Charge below $setting\"\n\t\t\tenable_charging\n\t\t\tchange_magsafe_led_color \"orange\"\n\n\t\tfi\n\n\t\tsleep 60\n\n\t\tbattery_percentage=$(get_battery_percentage)\n\n\tdone\n\n\texit 0\n\nfi\n\n# Maintain at voltage\nif [[ \"$action\" == \"maintain_voltage_synchronous\" ]]; then\n\n\t# Recover old maintain status if old setting is found\n\tif [[ \"$setting\" == \"recover\" ]]; then\n\n\t\t# Before doing anything, log out environment details as a debugging trail\n\t\tlog \"Debug trail. User: $USER, config folder: $configfolder, logfile: $logfile, file called with 1: $1, 2: $2\"\n\n\t\tmaintain_voltage=$(cat $maintain_voltage_tracker_file 2>/dev/null)\n\t\tif [[ $maintain_voltage ]]; then\n\t\t\tlog \"Recovering maintenance voltage $maintain_voltage\"\n\t\t\tsetting=$(echo $maintain_voltage | awk '{print $1}')\n\t\t\tsubsetting=$(echo $maintain_voltage | awk '{print $2}')\n\t\telse\n\t\t\tlog \"No setting to recover, exiting\"\n\t\t\texit 0\n\t\tfi\n\tfi\n\n\tvoltage=$(get_voltage)\n\tlower_voltage=$(echo \"$setting - $subsetting\" | bc -l)\n\tupper_voltage=$(echo \"$setting + $subsetting\" | bc -l)\n\tlog \"Keeping voltage between ${lower_voltage}V and ${upper_voltage}V\"\n\n\t# Loop\n\twhile true; do\n\t\tis_charging=$(get_smc_charging_status)\n\n\t\tif (($(echo \"$voltage < $lower_voltage\" | bc -l))) && [[ \"$is_charging\" == \"disabled\" ]]; then\n\t\t\tlog \"Battery at ${voltage}V\"\n\t\t\tenable_charging\n\t\tfi\n\t\tif (($(echo \"$voltage >= $upper_voltage\" | bc -l))) && [[ \"$is_charging\" == \"enabled\" ]]; then\n\t\t\tlog \"Battery at ${voltage}V\"\n\t\t\tdisable_charging\n\t\tfi\n\n\t\tsleep 60\n\n\t\tvoltage=$(get_voltage)\n\n\tdone\n\n\texit 0\n\nfi\n\n# Asynchronous battery level maintenance\nif [[ \"$action\" == \"maintain\" ]]; then\n\n\t# Kill old process silently\n\tif test -f \"$pidfile\"; then\n\t\tlog \"Killing old maintain process at $(cat $pidfile)\"\n\t\tpid=$(cat \"$pidfile\" 2>/dev/null)\n\t\tkill $pid &>/dev/null\n\tfi\n\n\tif test -f \"$calibrate_pidfile\"; then\n\t\tpid=$(cat \"$calibrate_pidfile\" 2>/dev/null)\n\t\tkill $calibrate_pidfile &>/dev/null\n\t\tlog \"🚨 Calibration process have been stopped\"\n\tfi\n\n\tif [[ \"$setting\" == \"stop\" ]]; then\n\t\tlog \"Killing running maintain daemons & enabling charging as default state\"\n\t\trm $pidfile 2>/dev/null\n\t\t$battery_binary disable_daemon\n\t\tenable_charging\n\t\t$battery_binary status\n\t\texit 0\n\tfi\n\n\t# Check if setting is a voltage\n\tis_voltage=false\n\tif valid_voltage \"$setting\"; then\n\t\tsetting=\"${setting//V/}\"\n\n\t\tif valid_voltage \"$subsetting\"; then\n\t\t\tsubsetting=\"${subsetting//V/}\"\n\t\telse\n\t\t\tsubsetting=\"0.1\"\n\t\tfi\n\n\t\tif (($(echo \"$setting < $voltage_min\" | bc -l) || $(echo \"$setting > $voltage_max\" | bc -l))); then\n\t\t\tlog \"Error: ${setting}V is not a valid setting. Please use a value between ${voltage_min}V and ${voltage_max}V\"\n\t\t\texit 1\n\t\tfi\n\t\tif (($(echo \"$subsetting < $voltage_hyst_min\" | bc -l) || $(echo \"$subsetting > $voltage_max\" | bc -l))); then\n\t\t\tlog \"Error: ${subsetting}V is not a valid setting. Please use a value between ${voltage_hyst_min}V and ${voltage_hyst_max}V\"\n\t\t\texit 1\n\t\tfi\n\n\t\tis_voltage=true\n\n\t# Check if setting is value between 0 and 100\n\telif ! valid_percentage \"$setting\"; then\n\t\tlog \"Called with $setting $action\"\n\t\t# If non 0-100 setting is not a special keyword, exit with an error.\n\t\tif ! { [[ \"$setting\" == \"stop\" ]] || [[ \"$setting\" == \"recover\" ]]; }; then\n\t\t\tlog \"Error: $setting is not a valid setting for battery maintain. Please use a number between 0 and 100, or an action keyword like 'stop' or 'recover'.\"\n\t\t\texit 1\n\t\tfi\n\n\tfi\n\n\t# Start maintenance script\n\tif [ \"$is_voltage\" = true ]; then\n\t\tlog \"Starting battery maintenance at ${setting}V ±${subsetting}V\"\n\t\tnohup $battery_binary maintain_voltage_synchronous $setting $subsetting >>$logfile &\n\telse\n\t\tlog \"Starting battery maintenance at $setting% $subsetting\"\n\t\tnohup $battery_binary maintain_synchronous $setting $subsetting >>$logfile &\n\tfi\n\n\t# Store pid of maintenance process and setting\n\techo $! >$pidfile\n\tpid=$(cat \"$pidfile\" 2>/dev/null)\n\n\tif ! [[ \"$setting\" == \"recover\" ]]; then\n\n\t\trm \"$maintain_percentage_tracker_file\" \"$maintain_voltage_tracker_file\" 2>/dev/null\n\n\t\tif [[ \"$is_voltage\" = true ]]; then\n\t\t\tlog \"Writing new setting $setting $subsetting to $maintain_voltage_tracker_file\"\n\t\t\techo \"$setting $subsetting\" >$maintain_voltage_tracker_file\n\t\t\tlog \"Maintaining battery at ${setting}V ±${subsetting}V\"\n\n\t\telse\n\t\t\tlog \"Writing new setting $setting to $maintain_percentage_tracker_file\"\n\t\t\techo $setting >$maintain_percentage_tracker_file\n\t\t\tlog \"Maintaining battery at $setting%\"\n\t\tfi\n\n\tfi\n\n\t# Enable the daemon that continues maintaining after reboot\n\t$battery_binary create_daemon\n\n\texit 0\n\nfi\n\n# Battery calibration\nif [[ \"$action\" == \"calibrate_synchronous\" ]]; then\n\tlog \"Starting calibration\"\n\n\t# Stop the maintaining\n\tbattery maintain stop\n\n\t# Discharge battery to 15%\n\tbattery discharge 15\n\n\twhile true; do\n\t\tlog \"checking if at 100%\"\n\t\t# Check if battery level has reached 100%\n\t\tif battery status | head -n 1 | grep -q \"Battery at 100%\"; then\n\t\t\tbreak\n\t\telse\n\t\t\tsleep 300\n\t\t\tcontinue\n\t\tfi\n\tdone\n\n\t# Wait before discharging to target level\n\tlog \"reached 100%, maintaining for 1 hour\"\n\tsleep 3600\n\n\t# Discharge battery to 80%\n\tbattery discharge 80\n\n\t# Recover old maintain status\n\tbattery maintain recover\n\texit 0\nfi\n\n# Asynchronous battery level maintenance\nif [[ \"$action\" == \"calibrate\" ]]; then\n\t# Kill old process silently\n\tif test -f \"$calibrate_pidfile\"; then\n\t\tpid=$(cat \"$calibrate_pidfile\" 2>/dev/null)\n\t\tkill $pid &>/dev/null\n\tfi\n\n\tif [[ \"$setting\" == \"stop\" ]]; then\n\t\tlog \"Killing running calibration daemon\"\n\t\tkill $calibrate_pidfile &>/dev/null\n\t\trm $calibrate_pidfile 2>/dev/null\n\n\t\texit 0\n\tfi\n\n\t# Start calibration script\n\tlog \"Starting calibration script\"\n\tnohup battery calibrate_synchronous >>$logfile &\n\n\t# Store pid of calibration process and setting\n\techo $! >$calibrate_pidfile\n\tpid=$(cat \"$calibrate_pidfile\" 2>/dev/null)\nfi\n\n# Status logger\nif [[ \"$action\" == \"status\" ]]; then\n\n\tlog \"Battery at $(get_battery_percentage)% ($(get_remaining_time) remaining), $(get_voltage)V, smc charging $(get_smc_charging_status)\"\n\tif test -f $pidfile; then\n\t\tmaintain_percentage=$(cat $maintain_percentage_tracker_file 2>/dev/null)\n\t\tif [[ $maintain_percentage ]]; then\n\t\t\tmaintain_level=\"$maintain_percentage%\"\n\t\telse\n\t\t\tmaintain_level=$(cat $maintain_voltage_tracker_file 2>/dev/null)\n\t\t\tmaintain_level=$(echo \"$maintain_level\" | awk '{print $1 \"V ±\" $2 \"V\"}')\n\t\tfi\n\t\tlog \"Your battery is currently being maintained at $maintain_level\"\n\tfi\n\texit 0\n\nfi\n\n# Status logger in csv format\nif [[ \"$action\" == \"status_csv\" ]]; then\n\n\techo \"$(get_battery_percentage),$(get_remaining_time),$(get_smc_charging_status),$(get_smc_discharging_status),$(get_maintain_percentage)\"\n\nfi\n\n# launchd daemon creator, inspiration: https://www.launchd.info/\nif [[ \"$action\" == \"create_daemon\" ]]; then\n\n\tcall_action=\"maintain_synchronous\"\n\tif test -f \"$maintain_voltage_tracker_file\"; then\n\t\tcall_action=\"maintain_voltage_synchronous\"\n\tfi\n\n\tdaemon_definition=\"\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\n<!DOCTYPE plist PUBLIC \\\"-//Apple//DTD PLIST 1.0//EN\\\" \\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\\">\n<plist version=\\\"1.0\\\">\n\t<dict>\n\t\t<key>Label</key>\n\t\t<string>com.battery.app</string>\n\t\t<key>ProgramArguments</key>\n\t\t<array>\n\t\t\t<string>$binfolder/battery</string>\n\t\t\t<string>$call_action</string>\n\t\t\t<string>recover</string>\n\t\t</array>\n\t\t<key>StandardOutPath</key>\n\t\t<string>$logfile</string>\n\t\t<key>StandardErrorPath</key>\n\t\t<string>$logfile</string>\n\t\t<key>RunAtLoad</key>\n\t\t<true/>\n\t</dict>\n</plist>\n\"\n\n\tmkdir -p \"${daemon_path%/*}\"\n\n\t# check if daemon already exists\n\tif test -f \"$daemon_path\"; then\n\n\t\tlog \"Daemon already exists, checking for differences\"\n\t\tdaemon_definition_difference=$(diff --brief --ignore-space-change --strip-trailing-cr --ignore-blank-lines <(cat \"$daemon_path\" 2>/dev/null) <(echo \"$daemon_definition\"))\n\n\t\t# remove leading and trailing whitespaces\n\t\tdaemon_definition_difference=$(echo \"$daemon_definition_difference\" | xargs)\n\t\tif [[ \"$daemon_definition_difference\" != \"\" ]]; then\n\n\t\t\tlog \"daemon_definition changed: replace with new definitions\"\n\t\t\techo \"$daemon_definition\" >\"$daemon_path\"\n\n\t\tfi\n\telse\n\n\t\t# daemon not available, create new launch deamon\n\t\tlog \"Daemon does not yet exist, creating daemon file at $daemon_path\"\n\t\techo \"$daemon_definition\" >\"$daemon_path\"\n\n\tfi\n\n\t# enable daemon\n\tlaunchctl enable \"gui/$(id -u $USER)/com.battery.app\"\n\texit 0\n\nfi\n\n# Disable daemon\nif [[ \"$action\" == \"disable_daemon\" ]]; then\n\n\tlog \"Disabling daemon at gui/$(id -u $USER)/com.battery.app\"\n\tlaunchctl disable \"gui/$(id -u $USER)/com.battery.app\"\n\texit 0\n\nfi\n\n# Remove daemon\nif [[ \"$action\" == \"remove_daemon\" ]]; then\n\n\trm $daemon_path 2>/dev/null\n\texit 0\n\nfi\n\n# Display logs\nif [[ \"$action\" == \"logs\" ]]; then\n\n\tamount=\"${2:-100}\"\n\n\techo -e \"👾 Battery CLI logs:\\n\"\n\ttail -n $amount $logfile\n\n\techo -e \"\\n🖥️\tBattery GUI logs:\\n\"\n\ttail -n $amount \"$configfolder/gui.log\"\n\n\techo -e \"\\n📁 Config folder details:\\n\"\n\tls -lah $configfolder\n\n\techo -e \"\\n⚙️\tBattery data:\\n\"\n\t$battery_binary status\n\t$battery_binary | grep -E \"v\\d.*\"\n\n\texit 0\n\nfi\n"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.sh",
          "type": "blob",
          "size": 2.4521484375,
          "content": "#!/bin/bash\n\n# User welcome message\necho -e \"\\n####################################################################\"\necho '# 👋 Welcome, this is the setup script for the battery CLI tool.'\necho -e \"# Note: this script will ask for your password once or multiple times.\"\necho -e \"####################################################################\\n\\n\"\n\n# Set environment variables\ntempfolder=~/.battery-tmp\nbinfolder=/usr/local/bin\nmkdir -p $tempfolder\n\n# Set script value\ncalling_user=${1:-\"$USER\"}\nconfigfolder=/Users/$calling_user/.battery\npidfile=$configfolder/battery.pid\nlogfile=$configfolder/battery.log\n\n# Ask for sudo once, in most systems this will cache the permissions for a bit\nsudo echo \"🔋 Starting battery installation\"\necho -e \"[ 1 ] Superuser permissions acquired.\"\n\n# Note: github names zips by <reponame>-<branchname>.replace( '/', '-' )\nupdate_branch=\"main\"\nin_zip_folder_name=\"battery-$update_branch\"\nbatteryfolder=\"$tempfolder/battery\"\necho \"[ 2 ] Downloading latest version of battery CLI\"\nrm -rf $batteryfolder\nmkdir -p $batteryfolder\ncurl -sSL -o $batteryfolder/repo.zip \"https://github.com/actuallymentor/battery/archive/refs/heads/$update_branch.zip\"\nunzip -qq $batteryfolder/repo.zip -d $batteryfolder\ncp -r $batteryfolder/$in_zip_folder_name/* $batteryfolder\nrm $batteryfolder/repo.zip\n\n# Move built file to bin folder\necho \"[ 3 ] Move smc to executable folder\"\nsudo mkdir -p $binfolder\nsudo cp $batteryfolder/dist/smc $binfolder\nsudo chown $calling_user $binfolder/smc\nsudo chmod 755 $binfolder/smc\nsudo chmod +x $binfolder/smc\n\necho \"[ 4 ] Writing script to $binfolder/battery for user $calling_user\"\nsudo cp $batteryfolder/battery.sh $binfolder/battery\n\necho \"[ 5 ] Setting correct file permissions for $calling_user\"\n# Set permissions for battery executables\nsudo chown -R $calling_user $binfolder/battery\nsudo chmod 755 $binfolder/battery\nsudo chmod +x $binfolder/battery\n\n# Set permissions for logfiles\nmkdir -p $configfolder\nsudo chown -R $calling_user $configfolder\n\ntouch $logfile\nsudo chown $calling_user $logfile\nsudo chmod 755 $logfile\n\ntouch $pidfile\nsudo chown $calling_user $pidfile\nsudo chmod 755 $pidfile\n\nsudo chown $calling_user $binfolder/battery\n\necho \"[ 6 ] Setting up visudo declarations\"\nsudo $batteryfolder/battery.sh visudo $USER\nsudo chown -R $calling_user $configfolder\n\n# Remove tempfiles\ncd ../..\necho \"[ 7 ] Removing temp folder $tempfolder\"\nrm -rf $tempfolder\n\necho -e \"\\n🎉 Battery tool installed. Type \\\"battery help\\\" for instructions.\\n\"\n"
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 0.7880859375,
          "content": "#!/bin/bash\n\n# Force-set path to include sbin\nPATH=\"$PATH:/usr/sbin\"\n\n# Set environment variables\ntempfolder=~/.battery-tmp\nbinfolder=/usr/local/bin\nbatteryfolder=\"$tempfolder/battery\"\nmkdir -p $batteryfolder\n\necho -e \"🔋 Starting battery update\\n\"\n\n# Write battery function as executable\n\necho \"[ 1 ] Downloading latest battery version\"\nrm -rf $batteryfolder\nmkdir -p $batteryfolder\ncurl -sS -o $batteryfolder/battery.sh https://raw.githubusercontent.com/actuallymentor/battery/main/battery.sh\n\necho \"[ 2 ] Writing script to $binfolder/battery\"\ncp $batteryfolder/battery.sh $binfolder/battery\nchown $USER $binfolder/battery\nchmod 755 $binfolder/battery\nchmod u+x $binfolder/battery\n\n# Remove tempfiles\ncd\nrm -rf $tempfolder\necho \"[ 3 ] Removed temporary folder\"\n\necho -e \"\\n🎉 Battery tool updated.\\n\"\n"
        }
      ]
    }
  ]
}