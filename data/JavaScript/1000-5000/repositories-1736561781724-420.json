{
  "metadata": {
    "timestamp": 1736561781724,
    "page": 420,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ngbp/ngbp",
      "stars": 3920,
      "defaultBranch": "v0.3.2-release",
      "files": [
        {
          "name": ".bowerrc",
          "type": "blob",
          "size": 0.0517578125,
          "content": "{\n  \"directory\": \"vendor\",\n  \"json\": \"bower.json\"\n}\n\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0419921875,
          "content": "*.sw*\n*~\nbuild/\nbin/\nnode_modules/\nvendor/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2060546875,
          "content": "language: node_js\nnode_js:\n  - \"0.10\"\n\nbefore_script:\n  - export DISPLAY=:99.0\n  - sh -e /etc/init.d/xvfb start\n  - npm install --quiet -g grunt-cli karma bower\n  - npm install\n  - bower install\n\nscript: grunt\n\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.466796875,
          "content": "# 0.3.2 (2014-04-15)\n\n## Features\n\n* Updated to bootstrap 3 and ui-bootstrap 0.10 ([55682310](git@github.com:ngbp/ngbp/commit/55682310))\n\n## Bug fixes\n\n* Karma unit port changed to 9019 ([0c354e90](git@github.com:ngbp/ngbp/commit/0c354e90))\n* Updated Travis links to new name ([3346a704](git@github.com:ngbp/ngbp/commit/3346a704))\n* Typo in copy watch task. ([00834319](git@github.com:ngbp/ngbp/commit/00834319))\n* Vendor assets were ignored during watch ([a94bb652](git@github.com:ngbp/ngbp/commit/a94bb652))\n\n\n\n\n# 0.3.1 (2013-09-13)\n\n## Features\n\n* Page titles are now set via state objects ([33de8097](git@github.com:joshdmiller/ng-boilerplate/commit/33de8097))\n* Append pkg.version to JS and CSS ([90e1b71f](git@github.com:joshdmiller/ng-boilerplate/commit/90e1b71f))\n* Vendor CSS is copied and concatenated with the app's CSS ([dda8792c](git@github.com:joshdmiller/ng-boilerplate/commit/dda8792c))\n* Vendor assets are copied to the build too ([29502bff](git@github.com:joshdmiller/ng-boilerplate/commit/29502bff))\n* Treat JS in src/assets as assets (i.e. don't do anything with it) ([99b50751](git@github.com:joshdmiller/ng-boilerplate/commit/99b50751))\n* Added PhantomJS support ([89acf5f6](git@github.com:joshdmiller/ng-boilerplate/commit/89acf5f6))\n* Files for use only in testing are now configurable ([a04e663b](git@github.com:joshdmiller/ng-boilerplate/commit/a04e663b))\n\n## Bug fixes\n\n* CopyPasteException in index.html comments ([3a0596a7](git@github.com:joshdmiller/ng-boilerplate/commit/3a0596a7))\n* Fixed typos in the README ([5ae95393](git@github.com:joshdmiller/ng-boilerplate/commit/5ae95393)), ([8c362208](git@github.com:joshdmiller/ng-boilerplate/commit/8c362208)), and ([6b617282](git@github.com:joshdmiller/ng-boilerplate/commit/6b617282))\n* Vendor files were added to build twice ([09277b74](git@github.com:joshdmiller/ng-boilerplate/commit/09277b74))\n* IE7 Font Awesome stylesheet pointed nowhere ([515673b1](git@github.com:joshdmiller/ng-boilerplate/commit/515673b1))\n\n# 0.3.0 (2013-06-25)\n\n## Features\n### build\n\n* split build into build+compile ([97fb290d](https://github.com/joshdmiller/ng-boilerplate/commits/97fb290d))\n* Moved config to separate file ([ff5d8b58](https://github.com/joshdmiller/ng-boilerplate/commits/ff5d8b58))\n* Added grunt-bump to ease releasing ([27312de1](https://github.com/joshdmiller/ng-boilerplate/commits/27312de1))\n* Added changelog generation ([328d25d2](https://github.com/joshdmiller/ng-boilerplate/commits/328d25d2))\n* karma config managed automatically ([3384b6fd](https://github.com/joshdmiller/ng-boilerplate/commits/3384b6fd))\n* CoffeeScript support ([0f308f2f](https://github.com/joshdmiller/ng-boilerplate/commits/0f308f2f))\n\n### *\n\n* switched to ui-router for state mgmt ([7bec0378](https://github.com/joshdmiller/ng-boilerplate/commits/7bec0378))\n\n## Bug fixes\n### build\n\n* Karma no longer hangs the watch (([f66cfcc6])(https://github.com/joshdmiller/ng-boilerplate/commits/f66cfcc6))\n\n\n\n# 0.2.0 (2013-05-10)\n\n## Features\n### build\n\n* live reload added through grunt-watch ([653df741](https://github.com/joshdmiller/ng-boilerplate/commits/653df741))\n\n* Add grunt ng-min for annotation ([9c529ccb](https://github.com/joshdmiller/ng-boilerplate/commits/9c529ccb))\n\n### *\n\n* far better Bower integration ([864c2656](https://github.com/joshdmiller/ng-boilerplate/commits/864c2656))\n\n* included AngularUI `utils` to use uiRoute ([df08e4be](https://github.com/joshdmiller/ng-boilerplate/commits/df08e4be))\n\n\n\n\n\n\n# 0.1.0 (2013-03-11)\n\n## Features\n### *\n\n* Initial application structure ([7c149227](https://github.com/joshdmiller/ng-boilerplate/commits/7c149227))\n\n* improved navigation styling and added home page tpl ([e1a655e0](https://github.com/joshdmiller/ng-boilerplate/commits/e1a655e0))\n\n### app\n\n* added current route indication to menu with appropriate unit test ([14d35da8](https://github.com/joshdmiller/ng-boilerplate/commits/14d35da8))\n\n### index\n\n* improved navbar style and added additional links ([a7c4504c](https://github.com/joshdmiller/ng-boilerplate/commits/a7c4504c))\n\n### about\n\n* Added an about page with some descriptive content ([290704ab](https://github.com/joshdmiller/ng-boilerplate/commits/290704ab))\n\n* Added placeholders demo to about page ([89a06e9f](https://github.com/joshdmiller/ng-boilerplate/commits/89a06e9f))\n\n### titleService\n\n* dynamic title support) ([3db6ec2b](https://github.com/joshdmiller/ng-boilerplate/commits/3db6ec2b))\n\n* suffix is now customizable ([9f8b4c73](https://github.com/joshdmiller/ng-boilerplate/commits/9f8b4c73))\n\n### activeIfCurrentDirective\n\n* created directory to test for current route ([0ac1f4b4](https://github.com/joshdmiller/ng-boilerplate/commits/0ac1f4b4))\n\n### home\n\n* replaced placeholder text with mrktg copy ([dcaf7237](https://github.com/joshdmiller/ng-boilerplate/commits/dcaf7237))\n\n* added google +1 button ([98d3312b](https://github.com/joshdmiller/ng-boilerplate/commits/98d3312b))\n\n\n\n## Bug fixes\n### build\n\n* Removed unnecessary step from delta:unittest ([5ffbfd78](https://github.com/joshdmiller/ng-boilerplate/commits/5ffbfd78))\n\n* delta tasks that concat must also uglify ([926983f8](https://github.com/joshdmiller/ng-boilerplate/commits/926983f8))\n\n### test-config\n\n* Change browser-name case, add browser list ([682b1ea4](https://github.com/joshdmiller/ng-boilerplate/commits/682b1ea4))\n\n### home\n\n* corrected typo in tweet button URL ([b9920eea](https://github.com/joshdmiller/ng-boilerplate/commits/b9920eea))\n\n### testacular\n\n* fixed typo in browser docstring ([11a60fa7](https://github.com/joshdmiller/ng-boilerplate/commits/11a60fa7))\n\n\n\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0029296875,
          "content": "# Contributing to `ngbp`\n\n## Getting Started\n\nTo get started, follow the [Detailed Installation](./README.md#detailed-installation)\nguide from the main project README.\n\n## Style\n\nAll pull requests must follow a few simple guidelines:\n\n- One logical feature per commit. When you submit a pull request, it should\n  *not* include more than one commit. If it does, please squash them first.\n- Avoid unnecessary changes. A PR should only contain the necessary changes for\n  the particular feature/bug/documentation/... that it is meant for.\n- Commit messages (and therefore PR titles) must follow the format\n  `type(component): short message` and be absolutely no longer than 100\n  characters in length. 80 characters or less is preferable.\n\nThis style is very similar to those for AngularJS, so check out [their\ncontributing guide](https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md).\n\n## Notes\n\n- Please keep `package.json` package list in alphabetical order. Using\n`npm install --save-dev` automatically does this."
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 17.876953125,
          "content": "module.exports = function ( grunt ) {\n  \n  /** \n   * Load required Grunt tasks. These are installed based on the versions listed\n   * in `package.json` when you do `npm install` in this directory.\n   */\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-contrib-copy');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-concat');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-contrib-coffee');\n  grunt.loadNpmTasks('grunt-contrib-less');\n  grunt.loadNpmTasks('grunt-conventional-changelog');\n  grunt.loadNpmTasks('grunt-bump');\n  grunt.loadNpmTasks('grunt-coffeelint');\n  grunt.loadNpmTasks('grunt-karma');\n  grunt.loadNpmTasks('grunt-ng-annotate');\n  grunt.loadNpmTasks('grunt-html2js');\n\n  /**\n   * Load in our build configuration file.\n   */\n  var userConfig = require( './build.config.js' );\n\n  /**\n   * This is the configuration object Grunt uses to give each plugin its \n   * instructions.\n   */\n  var taskConfig = {\n    /**\n     * We read in our `package.json` file so we can access the package name and\n     * version. It's already there, so we don't repeat ourselves here.\n     */\n    pkg: grunt.file.readJSON(\"package.json\"),\n\n    /**\n     * The banner is the comment that is placed at the top of our compiled \n     * source files. It is first processed as a Grunt template, where the `<%=`\n     * pairs are evaluated based on this very configuration object.\n     */\n    meta: {\n      banner: \n        '/**\\n' +\n        ' * <%= pkg.name %> - v<%= pkg.version %> - <%= grunt.template.today(\"yyyy-mm-dd\") %>\\n' +\n        ' * <%= pkg.homepage %>\\n' +\n        ' *\\n' +\n        ' * Copyright (c) <%= grunt.template.today(\"yyyy\") %> <%= pkg.author %>\\n' +\n        ' * Licensed <%= pkg.licenses.type %> <<%= pkg.licenses.url %>>\\n' +\n        ' */\\n'\n    },\n\n    /**\n     * Creates a changelog on a new version.\n     */\n    changelog: {\n      options: {\n        dest: 'CHANGELOG.md',\n        template: 'changelog.tpl'\n      }\n    },\n\n    /**\n     * Increments the version number, etc.\n     */\n    bump: {\n      options: {\n        files: [\n          \"package.json\", \n          \"bower.json\"\n        ],\n        commit: false,\n        commitMessage: 'chore(release): v%VERSION%',\n        commitFiles: [\n          \"package.json\", \n          \"client/bower.json\"\n        ],\n        createTag: false,\n        tagName: 'v%VERSION%',\n        tagMessage: 'Version %VERSION%',\n        push: false,\n        pushTo: 'origin'\n      }\n    },    \n\n    /**\n     * The directories to delete when `grunt clean` is executed.\n     */\n    clean: [ \n      '<%= build_dir %>', \n      '<%= compile_dir %>'\n    ],\n\n    /**\n     * The `copy` task just copies files from A to B. We use it here to copy\n     * our project assets (images, fonts, etc.) and javascripts into\n     * `build_dir`, and then to copy the assets to `compile_dir`.\n     */\n    copy: {\n      build_app_assets: {\n        files: [\n          { \n            src: [ '**' ],\n            dest: '<%= build_dir %>/assets/',\n            cwd: 'src/assets',\n            expand: true\n          }\n       ]   \n      },\n      build_vendor_assets: {\n        files: [\n          { \n            src: [ '<%= vendor_files.assets %>' ],\n            dest: '<%= build_dir %>/assets/',\n            cwd: '.',\n            expand: true,\n            flatten: true\n          }\n       ]   \n      },\n      build_appjs: {\n        files: [\n          {\n            src: [ '<%= app_files.js %>' ],\n            dest: '<%= build_dir %>/',\n            cwd: '.',\n            expand: true\n          }\n        ]\n      },\n      build_vendorjs: {\n        files: [\n          {\n            src: [ '<%= vendor_files.js %>' ],\n            dest: '<%= build_dir %>/',\n            cwd: '.',\n            expand: true\n          }\n        ]\n      },\n      build_vendorcss: {\n        files: [\n          {\n            src: [ '<%= vendor_files.css %>' ],\n            dest: '<%= build_dir %>/',\n            cwd: '.',\n            expand: true\n          }\n        ]\n      },\n      compile_assets: {\n        files: [\n          {\n            src: [ '**' ],\n            dest: '<%= compile_dir %>/assets',\n            cwd: '<%= build_dir %>/assets',\n            expand: true\n          },\n          {\n            src: [ '<%= vendor_files.css %>' ],\n            dest: '<%= compile_dir %>/',\n            cwd: '.',\n            expand: true\n          }\n        ]\n      }\n    },\n\n    /**\n     * `grunt concat` concatenates multiple source files into a single file.\n     */\n    concat: {\n      /**\n       * The `build_css` target concatenates compiled CSS and vendor CSS\n       * together.\n       */\n      build_css: {\n        src: [\n          '<%= vendor_files.css %>',\n          '<%= build_dir %>/assets/<%= pkg.name %>-<%= pkg.version %>.css'\n        ],\n        dest: '<%= build_dir %>/assets/<%= pkg.name %>-<%= pkg.version %>.css'\n      },\n      /**\n       * The `compile_js` target is the concatenation of our application source\n       * code and all specified vendor source code into a single file.\n       */\n      compile_js: {\n        options: {\n          banner: '<%= meta.banner %>'\n        },\n        src: [ \n          '<%= vendor_files.js %>', \n          'module.prefix', \n          '<%= build_dir %>/src/**/*.js', \n          '<%= html2js.app.dest %>', \n          '<%= html2js.common.dest %>', \n          'module.suffix' \n        ],\n        dest: '<%= compile_dir %>/assets/<%= pkg.name %>-<%= pkg.version %>.js'\n      }\n    },\n\n    /**\n     * `grunt coffee` compiles the CoffeeScript sources. To work well with the\n     * rest of the build, we have a separate compilation task for sources and\n     * specs so they can go to different places. For example, we need the\n     * sources to live with the rest of the copied JavaScript so we can include\n     * it in the final build, but we don't want to include our specs there.\n     */\n    coffee: {\n      source: {\n        options: {\n          bare: true\n        },\n        expand: true,\n        cwd: '.',\n        src: [ '<%= app_files.coffee %>' ],\n        dest: '<%= build_dir %>',\n        ext: '.js'\n      }\n    },\n\n    /**\n     * `ngAnnotate` annotates the sources before minifying. That is, it allows us\n     * to code without the array syntax.\n     */\n    ngAnnotate: {\n      compile: {\n        files: [\n          {\n            src: [ '<%= app_files.js %>' ],\n            cwd: '<%= build_dir %>',\n            dest: '<%= build_dir %>',\n            expand: true\n          }\n        ]\n      }\n    },\n\n    /**\n     * Minify the sources!\n     */\n    uglify: {\n      compile: {\n        options: {\n          banner: '<%= meta.banner %>'\n        },\n        files: {\n          '<%= concat.compile_js.dest %>': '<%= concat.compile_js.dest %>'\n        }\n      }\n    },\n\n    /**\n     * `grunt-contrib-less` handles our LESS compilation and uglification automatically.\n     * Only our `main.less` file is included in compilation; all other files\n     * must be imported from this file.\n     */\n    less: {\n      build: {\n        files: {\n          '<%= build_dir %>/assets/<%= pkg.name %>-<%= pkg.version %>.css': '<%= app_files.less %>'\n        }\n      },\n      compile: {\n        files: {\n          '<%= build_dir %>/assets/<%= pkg.name %>-<%= pkg.version %>.css': '<%= app_files.less %>'\n        },\n        options: {\n          cleancss: true,\n          compress: true\n        }\n      }\n    },\n\n    /**\n     * `jshint` defines the rules of our linter as well as which files we\n     * should check. This file, all javascript sources, and all our unit tests\n     * are linted based on the policies listed in `options`. But we can also\n     * specify exclusionary patterns by prefixing them with an exclamation\n     * point (!); this is useful when code comes from a third party but is\n     * nonetheless inside `src/`.\n     */\n    jshint: {\n      src: [ \n        '<%= app_files.js %>'\n      ],\n      test: [\n        '<%= app_files.jsunit %>'\n      ],\n      gruntfile: [\n        'Gruntfile.js'\n      ],\n      options: {\n        curly: true,\n        immed: true,\n        newcap: true,\n        noarg: true,\n        sub: true,\n        boss: true,\n        eqnull: true\n      },\n      globals: {}\n    },\n\n    /**\n     * `coffeelint` does the same as `jshint`, but for CoffeeScript.\n     * CoffeeScript is not the default in ngBoilerplate, so we're just using\n     * the defaults here.\n     */\n    coffeelint: {\n      src: {\n        files: {\n          src: [ '<%= app_files.coffee %>' ]\n        }\n      },\n      test: {\n        files: {\n          src: [ '<%= app_files.coffeeunit %>' ]\n        }\n      }\n    },\n\n    /**\n     * HTML2JS is a Grunt plugin that takes all of your template files and\n     * places them into JavaScript files as strings that are added to\n     * AngularJS's template cache. This means that the templates too become\n     * part of the initial payload as one JavaScript file. Neat!\n     */\n    html2js: {\n      /**\n       * These are the templates from `src/app`.\n       */\n      app: {\n        options: {\n          base: 'src/app'\n        },\n        src: [ '<%= app_files.atpl %>' ],\n        dest: '<%= build_dir %>/templates-app.js'\n      },\n\n      /**\n       * These are the templates from `src/common`.\n       */\n      common: {\n        options: {\n          base: 'src/common'\n        },\n        src: [ '<%= app_files.ctpl %>' ],\n        dest: '<%= build_dir %>/templates-common.js'\n      }\n    },\n\n    /**\n     * The Karma configurations.\n     */\n    karma: {\n      options: {\n        configFile: '<%= build_dir %>/karma-unit.js'\n      },\n      unit: {\n        port: 9019,\n        background: true\n      },\n      continuous: {\n        singleRun: true\n      }\n    },\n\n    /**\n     * The `index` task compiles the `index.html` file as a Grunt template. CSS\n     * and JS files co-exist here but they get split apart later.\n     */\n    index: {\n\n      /**\n       * During development, we don't want to have wait for compilation,\n       * concatenation, minification, etc. So to avoid these steps, we simply\n       * add all script files directly to the `<head>` of `index.html`. The\n       * `src` property contains the list of included files.\n       */\n      build: {\n        dir: '<%= build_dir %>',\n        src: [\n          '<%= vendor_files.js %>',\n          '<%= build_dir %>/src/**/*.js',\n          '<%= html2js.common.dest %>',\n          '<%= html2js.app.dest %>',\n          '<%= vendor_files.css %>',\n          '<%= build_dir %>/assets/<%= pkg.name %>-<%= pkg.version %>.css'\n        ]\n      },\n\n      /**\n       * When it is time to have a completely compiled application, we can\n       * alter the above to include only a single JavaScript and a single CSS\n       * file. Now we're back!\n       */\n      compile: {\n        dir: '<%= compile_dir %>',\n        src: [\n          '<%= concat.compile_js.dest %>',\n          '<%= vendor_files.css %>',\n          '<%= build_dir %>/assets/<%= pkg.name %>-<%= pkg.version %>.css'\n        ]\n      }\n    },\n\n    /**\n     * This task compiles the karma template so that changes to its file array\n     * don't have to be managed manually.\n     */\n    karmaconfig: {\n      unit: {\n        dir: '<%= build_dir %>',\n        src: [ \n          '<%= vendor_files.js %>',\n          '<%= html2js.app.dest %>',\n          '<%= html2js.common.dest %>',\n          '<%= test_files.js %>'\n        ]\n      }\n    },\n\n    /**\n     * And for rapid development, we have a watch set up that checks to see if\n     * any of the files listed below change, and then to execute the listed \n     * tasks when they do. This just saves us from having to type \"grunt\" into\n     * the command-line every time we want to see what we're working on; we can\n     * instead just leave \"grunt watch\" running in a background terminal. Set it\n     * and forget it, as Ron Popeil used to tell us.\n     *\n     * But we don't need the same thing to happen for all the files. \n     */\n    delta: {\n      /**\n       * By default, we want the Live Reload to work for all tasks; this is\n       * overridden in some tasks (like this file) where browser resources are\n       * unaffected. It runs by default on port 35729, which your browser\n       * plugin should auto-detect.\n       */\n      options: {\n        livereload: true\n      },\n\n      /**\n       * When the Gruntfile changes, we just want to lint it. In fact, when\n       * your Gruntfile changes, it will automatically be reloaded!\n       */\n      gruntfile: {\n        files: 'Gruntfile.js',\n        tasks: [ 'jshint:gruntfile' ],\n        options: {\n          livereload: false\n        }\n      },\n\n      /**\n       * When our JavaScript source files change, we want to run lint them and\n       * run our unit tests.\n       */\n      jssrc: {\n        files: [ \n          '<%= app_files.js %>'\n        ],\n        tasks: [ 'jshint:src', 'karma:unit:run', 'copy:build_appjs' ]\n      },\n\n      /**\n       * When our CoffeeScript source files change, we want to run lint them and\n       * run our unit tests.\n       */\n      coffeesrc: {\n        files: [ \n          '<%= app_files.coffee %>'\n        ],\n        tasks: [ 'coffeelint:src', 'coffee:source', 'karma:unit:run', 'copy:build_appjs' ]\n      },\n\n      /**\n       * When assets are changed, copy them. Note that this will *not* copy new\n       * files, so this is probably not very useful.\n       */\n      assets: {\n        files: [ \n          'src/assets/**/*'\n        ],\n        tasks: [ 'copy:build_app_assets', 'copy:build_vendor_assets' ]\n      },\n\n      /**\n       * When index.html changes, we need to compile it.\n       */\n      html: {\n        files: [ '<%= app_files.html %>' ],\n        tasks: [ 'index:build' ]\n      },\n\n      /**\n       * When our templates change, we only rewrite the template cache.\n       */\n      tpls: {\n        files: [ \n          '<%= app_files.atpl %>', \n          '<%= app_files.ctpl %>'\n        ],\n        tasks: [ 'html2js' ]\n      },\n\n      /**\n       * When the CSS files change, we need to compile and minify them.\n       */\n      less: {\n        files: [ 'src/**/*.less' ],\n        tasks: [ 'less:build' ]\n      },\n\n      /**\n       * When a JavaScript unit test file changes, we only want to lint it and\n       * run the unit tests. We don't want to do any live reloading.\n       */\n      jsunit: {\n        files: [\n          '<%= app_files.jsunit %>'\n        ],\n        tasks: [ 'jshint:test', 'karma:unit:run' ],\n        options: {\n          livereload: false\n        }\n      },\n\n      /**\n       * When a CoffeeScript unit test file changes, we only want to lint it and\n       * run the unit tests. We don't want to do any live reloading.\n       */\n      coffeeunit: {\n        files: [\n          '<%= app_files.coffeeunit %>'\n        ],\n        tasks: [ 'coffeelint:test', 'karma:unit:run' ],\n        options: {\n          livereload: false\n        }\n      }\n    }\n  };\n\n  grunt.initConfig( grunt.util._.extend( taskConfig, userConfig ) );\n\n  /**\n   * In order to make it safe to just compile or copy *only* what was changed,\n   * we need to ensure we are starting from a clean, fresh build. So we rename\n   * the `watch` task to `delta` (that's why the configuration var above is\n   * `delta`) and then add a new task called `watch` that does a clean build\n   * before watching for changes.\n   */\n  grunt.renameTask( 'watch', 'delta' );\n  grunt.registerTask( 'watch', [ 'build', 'karma:unit', 'delta' ] );\n\n  /**\n   * The default task is to build and compile.\n   */\n  grunt.registerTask( 'default', [ 'build', 'compile' ] );\n\n  /**\n   * The `build` task gets your app ready to run for development and testing.\n   */\n  grunt.registerTask( 'build', [\n    'clean', 'html2js', 'jshint', 'coffeelint', 'coffee', 'less:build',\n    'concat:build_css', 'copy:build_app_assets', 'copy:build_vendor_assets',\n    'copy:build_appjs', 'copy:build_vendorjs', 'copy:build_vendorcss', 'index:build', 'karmaconfig',\n    'karma:continuous' \n  ]);\n\n  /**\n   * The `compile` task gets your app ready for deployment by concatenating and\n   * minifying your code.\n   */\n  grunt.registerTask( 'compile', [\n    'less:compile', 'copy:compile_assets', 'ngAnnotate', 'concat:compile_js', 'uglify', 'index:compile'\n  ]);\n\n  /**\n   * A utility function to get all app JavaScript sources.\n   */\n  function filterForJS ( files ) {\n    return files.filter( function ( file ) {\n      return file.match( /\\.js$/ );\n    });\n  }\n\n  /**\n   * A utility function to get all app CSS sources.\n   */\n  function filterForCSS ( files ) {\n    return files.filter( function ( file ) {\n      return file.match( /\\.css$/ );\n    });\n  }\n\n  /** \n   * The index.html template includes the stylesheet and javascript sources\n   * based on dynamic names calculated in this Gruntfile. This task assembles\n   * the list into variables for the template to use and then runs the\n   * compilation.\n   */\n  grunt.registerMultiTask( 'index', 'Process index.html template', function () {\n    var dirRE = new RegExp( '^('+grunt.config('build_dir')+'|'+grunt.config('compile_dir')+')\\/', 'g' );\n    var jsFiles = filterForJS( this.filesSrc ).map( function ( file ) {\n      return file.replace( dirRE, '' );\n    });\n    var cssFiles = filterForCSS( this.filesSrc ).map( function ( file ) {\n      return file.replace( dirRE, '' );\n    });\n\n    grunt.file.copy('src/index.html', this.data.dir + '/index.html', { \n      process: function ( contents, path ) {\n        return grunt.template.process( contents, {\n          data: {\n            scripts: jsFiles,\n            styles: cssFiles,\n            version: grunt.config( 'pkg.version' )\n          }\n        });\n      }\n    });\n  });\n\n  /**\n   * In order to avoid having to specify manually the files needed for karma to\n   * run, we use grunt to manage the list for us. The `karma/*` files are\n   * compiled as grunt templates for use by Karma. Yay!\n   */\n  grunt.registerMultiTask( 'karmaconfig', 'Process karma config templates', function () {\n    var jsFiles = filterForJS( this.filesSrc );\n    \n    grunt.file.copy( 'karma/karma-unit.tpl.js', grunt.config( 'build_dir' ) + '/karma-unit.js', { \n      process: function ( contents, path ) {\n        return grunt.template.process( contents, {\n          data: {\n            scripts: jsFiles\n          }\n        });\n      }\n    });\n  });\n\n};\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "Copyright (c) 2013 Josh David Miller <josh@joshdmiller.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.1796875,
          "content": "# [ngBoilerplate](http://joshdmiller.github.com/ng-boilerplate) [![Build Status](https://api.travis-ci.org/ngbp/ngbp.png?branch=v0.3.2-release)](https://travis-ci.org/ngbp/ngbp)\n\nAn opinionated kickstarter for [AngularJS](http://angularjs.org) projects.\n\n***\n\n## Quick Start\n\nInstall Node.js and then:\n\n```sh\n$ git clone git://github.com/joshdmiller/ng-boilerplate\n$ cd ng-boilerplate\n$ sudo npm -g install grunt-cli karma bower\n$ npm install\n$ bower install\n$ grunt watch\n```\n\nFinally, open `file:///path/to/ng-boilerplate/build/index.html` in your browser.\n\nHappy hacking!\n\n## Purpose\n\n`ngBoilerplate` is designed to make life easy by providing a basic framework\nwith which to kickstart AngularJS projects. It contains a best-practice\ndirectory structure to ensure code reusability and maximum scalability.\nngBoilerplate also comes prepackaged with the most popular design frameworks\naround: [Twitter Bootstrap](http://getbootstrap.com),\n[Angular UI](http://angular-ui.github.io),\n[Angular Bootstrap](http://angular-ui.github.io/bootstrap),\n[Font Awesome](http://fortawesome.github.com/Font-Awesome), and\n[LESS](http://lesscss.org). Lastly, it contains a sophisticated\n[Grunt](http://gruntjs.org)-based build system to ensure maximum productivity.\nAll you have to do is clone it and start coding!\n\n## Philosophy\n\nThe principal goal of `ngBoilerplate` is to set projects up for long-term\nsuccess.  So `ngBoilerplate` tries to follow best practices everywhere it can.\nThese are:\n\n- Properly orchestrated modules to encourage drag-and-drop component re-use.\n- Tests exist alongside the component they are testing with no separate `test`\n  directory required; the build process should be sophisticated enough to handle\n  this.\n- Speaking of which, the build system should work automagically, without\n  involvement from the developer. It should do what needs to be done, while\n  staying out of the way. Components should end up tested, linted, compiled,\n  and minified, ready for use in a production environment.\n- Integration with popular tools like Bower, Karma, and LESS.\n- *Encourages* test-driven development. It's the only way to code.\n- A directory structure that is cogent, meaningful to new team members, and\n  supporting of the above points.\n- Well-documented, to show new developers *why* things are set up the way they\n  are.\n- It should be responsive to evidence. Community feedback is therefore crucial\n  to the success of `ngBoilerplate`.\n\nBut `ngBoilerplate` is not an example of an AngularJS app: this is a\nkickstarter. If you're looking for an example of what a complete, non-trivial\nAngularJS app that does something real looks like, complete with a REST backend\nand authentication and authorization, then take a look at\n[`angular-app`](http://github.com/angular-app/angular-app), which does just\nthat - and does it well.\n\n## Learn\n\n### Overall Directory Structure\n\nAt a high level, the structure looks roughly like this:\n\n```\nng-boilerplate/\n  |- grunt-tasks/\n  |- karma/\n  |- src/\n  |  |- app/\n  |  |  |- <app logic>\n  |  |- assets/\n  |  |  |- <static files>\n  |  |- common/\n  |  |  |- <reusable code>\n  |  |- less/\n  |  |  |- main.less\n  |- vendor/\n  |  |- angular-bootstrap/\n  |  |- bootstrap/\n  |  |- placeholders/\n  |- .bowerrc\n  |- bower.json\n  |- build.config.js\n  |- Gruntfile.js\n  |- module.prefix\n  |- module.suffix\n  |- package.json\n```\n\nWhat follows is a brief description of each entry, but most directories contain\ntheir own `README.md` file with additional documentation, so browse around to\nlearn more.\n\n- `karma/` - test configuration.\n- `src/` - our application sources. [Read more &raquo;](src/README.md)\n- `vendor/` - third-party libraries. [Bower](http://bower.io) will install\n  packages here. Anything added to this directory will need to be manually added\n  to `build.config.js` and `karma/karma-unit.js` to be picked up by the build\n  system.\n- `.bowerrc` - the Bower configuration file. This tells Bower to install\n  components into the `vendor/` directory.\n- `bower.json` - this is our project configuration for Bower and it contains the\n  list of Bower dependencies we need.\n- `build.config.js` - our customizable build settings; see \"The Build System\"\n  below.\n- `Gruntfile.js` - our build script; see \"The Build System\" below.\n- `module.prefix` and `module.suffix` - our compiled application script is\n  wrapped in these, which by default are used to place the application inside a\n  self-executing anonymous function to ensure no clashes with other libraries.\n- `package.json` - metadata about the app, used by NPM and our build script. Our\n  NPM dependencies are listed here.\n\n### Detailed Installation\n\nThis section provides a little more detailed understanding of what goes into\ngetting `ngBoilerplate` up and running. Though `ngBoilerplate` is really simple\nto use, it might help to have an understanding of the tools involved here, like\nNode.js and Grunt and Bower. If you're completely new to highly organized,\nmodern JavaScript development, take a few short minutes to read [this overview\nof the tools](tools.md) before continuing with this section.\n\nOkay, ready to go? Here it is:\n\n`ngBoilerplate` uses [Grunt](http://gruntjs.org) as its build system, so\n[Node.js](http://nodejs.org) is required. Also, Grunt by default no longer comes\nwith a command-line utility and Karma and Bower must end up in your global path\nfor the build system to find it, so they must be installed independently. Once\nyou have Node.js installed, you can simply use `npm` to make it all happen:\n\n```sh\n$ npm -g install grunt-cli karma bower\n```\n\nIf you're on Linux (like I am) then throw `sudo` in front of that command.  If\nyou're on Windows, then you're on your own.\n\nNext, you can either clone this repository using Git, download it as a zip file\nfrom GitHub, or merge the branch into your existing repository. Assuming you're\nstarting from scratch, simply clone this repository using git:\n\n```sh\n$ git clone git://github.com/joshdmiller/ng-boilerplate my-project-name\n$ cd my-project-name\n```\n\nAnd then install the remaining build dependencies locally:\n\n```sh\n$ npm install\n```\n\nThis will read the `dependencies` (empty by default) and the `devDependencies`\n(which contains our build requirements) from `package.json` and install\neverything needed into a folder called `node_modules/`.\n\nThere are many Bower packages used by `ngBoilerplate`, like Twitter Bootstrap\nand Angular UI, which are listed in `bower.js`. To install them into the\n`vendor/` directory, simply run:\n\n```sh\n$ bower install\n```\n\nIn the future, should you want to add a new Bower package to your app, run the\n`install` command:\n\n```sh\n$ bower install packagename --save-dev\n```\n\nThe `--save-dev` flag tells Bower to add the package at its current version to\nour project's `bower.js` file so should another developer download our\napplication (or we download it from a different computer), we can simply run the\n`bower install` command as above and all our dependencies will be installed for\nus. Neat!\n\nTechnically, `ngBoilerplate` is now ready to go.\n\nHowever, prior to hacking on your application, you will want to modify the\n`package.json` file to contain your project's information. Do not remove any\nitems from the `devDependencies` array as all are needed for the build process\nto work.\n\nTo ensure your setup works, launch grunt:\n\n```sh\n$ grunt watch\n```\n\nThe built files are placed in the `build/` directory by default. Open the\n`build/index.html` file in your browser and check it out! Because everything is\ncompiled, no XHR requests are needed to retrieve templates, so until this needs\nto communicate with your backend there is no need to run it from a web server.\n\n`watch` is actually an alias of the `grunt-contrib-watch` that will first run a\npartial build before watching for file changes. With this setup, any file that\nchanges will trigger only those build tasks necessary to bring the app up to\ndate. For example, when a template file changes, the templates are recompiled\nand concatenated, but when a test/spec file changes, only the tests are run.\nThis allows the watch command to complete in a fraction of the time it would\nordinarily take.\n\nIn addition, if you're running a Live Reload plugin in your browser (see below),\nyou won't even have to refresh to see the changes! When the `watch` task detects\na file change, it will reload the page for you. Sweet.\n\nWhen you're ready to push your app into production, just run the `compile`\ncommand:\n\n```sh\n$ grunt compile\n```\n\nThis will concatenate and minify your sources and place them by default into the\n`bin/` directory. There will only be three files: `index.html`,\n`your-app-name.js`, and `your-app-name.css`. All of the vendor dependencies like\nBootstrap styles and AngularJS itself have been added to them for super-easy\ndeploying. If you use any assets (`src/assets/`) then they will be copied to\n`bin/` as is.\n\nLastly, a complete build is always available by simply running the default\ntask, which runs `build` and then `compile`:\n\n```sh\n$ grunt\n```\n\n### The Build System\n\nThe best way to learn about the build system is by familiarizing yourself with\nGrunt and then reading through the heavily documented build script,\n`Gruntfile.js`. But you don't need to do that to be very productive with\n`ngBoilerplate`. What follows in this section is a quick introduction to the\ntasks provided and should be plenty to get you started.\n\nThe driver of the process is the `delta` multi-task, which watches for file\nchanges using `grunt-contrib-watch` and executes one of nine tasks when a file\nchanges:\n\n* `delta:gruntfile` - When `Gruntfile.js` changes, this task runs the linter\n  (`jshint`) on that one file and reloads the configuration.\n* `delta:assets` - When any file within `src/assets/` changes, all asset files\n  are copied to `build/assets/`.\n* `delta:html` - When `src/index.html` changes, it is compiled as a Grunt\n  template, so script names, etc., are dynamically replaced with the correct\n  values configured dynamically by Grunt.\n* `delta:less` - When any `*.less` file within `src/` changes, the\n  `src/less/main.less` file is linted and copied into\n  `build/assets/ng-boilerplate.css`.\n* `delta:jssrc` - When any JavaScript file within `src/` that does not end in\n  `.spec.js` changes, all JavaScript sources are linted, all unit tests are run,\n  and the all source files are re-copied to `build/src`.\n* `delta:coffeesrc` - When any `*.coffee` file in `src/` that doesn't match\n  `*.spec.coffee` changes, the Coffee scripts are compiled independently into\n  `build/src` in a structure mirroring where they were in `src/` so it's easy to\n  locate problems. For example, the file\n  `src/common/titleService/titleService.coffee` is compiled to\n  `build/src/common/titleService/titleService.js`.\n* `delta:tpls` - When any `*.tpl.html` file within `src/` changes, all templates\n  are put into strings in a JavaScript file (technically two, one for\n  `src/common/` and another for `src/app/`) that will add the template to\n  AngularJS's\n  [`$templateCache`](http://docs.angularjs.org/api/ng.$templateCache) so\n  template files are part of the initial JavaScript payload and do not require\n  any future XHR.  The template cache files are `build/template-app.js` and\n  `build/template-common.js`.\n* `delta:jsunit` - When any `*.spec.js` file in `src/` changes, the test files\n  are linted and the unit tests are executed.\n* `delta:coffeeunit` - When any `*.spec.coffee` file in `src/` changes, the test\n  files are linted, compiled their tests executed.\n\nAs covered in the previous section, `grunt watch` will execute a full build\nup-front and then run any of the aforementioned `delta:*` tasks as needed to\nensure the fastest possible build. So whenever you're working on your project,\nstart with:\n\n```sh\n$ grunt watch\n```\n\nAnd everything will be done automatically!\n\n### Build vs. Compile\n\nTo make the build even faster, tasks are placed into two categories: build and\ncompile. The build tasks (like those we've been discussing) are the minimal\ntasks required to run your app during development.\n\nCompile tasks, however, get your app ready for production. The compile tasks\ninclude concatenation, minification, compression, etc. These tasks take a little\nbit longer to run and are not at all necessary for development so are not called\nautomatically during build or watch.\n\nTo initiate a full compile, you simply run the default task:\n\n```sh\n$ grunt\n```\n\nThis will perform a build and then a compile. The compiled site - ready for\nuploading to the server! - is located in `bin/`, taking a cue from\ntraditional software development. To test that your full site works as\nexpected, open the `bin/index.html` file in your browser. Voila!\n\n### Live Reload!\n\n`ngBoilerplate` also includes [Live Reload](http://livereload.com/), so you no\nlonger have to refresh your page after making changes! You need a Live Reload\nbrowser plugin for this:\n\n- Chrome - [Chrome Webstore](https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei)\n- Firefox - [Download from Live Reload](http://download.livereload.com/2.0.8/LiveReload-2.0.8.xpi)\n- Safari - [Download from Live Reload](http://download.livereload.com/2.0.9/LiveReload-2.0.9.safariextz)\n- Internet Explorer - Surely you jest.\n\nNote that if you're using the Chrome version with `file://` URLs (as is the\ndefault with `ngBoilerplate`) you need to tell Live Reload to allow it. Go to\n`Menu -> Tools -> Extensions` and check the \"Allow access to file URLs\" box next\nto the Live Reload plugin.\n\nWhen you load your page, click the Live Reload icon in your toolbar and\neverything should work magically. w00t!\n\nIf you'd prefer to not install a browser extension, then you must add the\nfollowing to the end of the `body` tag in `index.html`:\n\n```html\n<script src=\"http://localhost:35729/livereload.js\"></script>\n```\n\nBoom!\n\n## Roadmap\n\nThis is a project that is not broad in scope, so there's not really much of a\nwish list here. But I would like to see a couple of things:\n\nI'd like it to be a little simpler. I want this to be a universal starting\npoint. If someone is starting a new AngularJS project, she should be able to\nclone, merge, or download its source and immediately start doing what she needs\nwithout renaming a bunch of files and methods or deleting spare parts. What I\nhave works for a first release, but I just think there is a little too much here\nright now.\n\nI'd also like to see a simple generator. Nothing like Yeoman, as there already\nis one of those, but just something that allows the user to say \"I want\nBootstrap but not Font Awesome and my app is called 'coolApp'. Gimme.\" Perhaps a\ncustom download builder like UI Bootstrap has. Like that. Then again, perhaps\nsome Yeoman generators wouldn't be out of line. I don't know. What do you think?\n\nNaturally, I am open to all manner of ideas and suggestions. See the\n\"Contributing\" section below.\n\n### To Do\n\nSee the [issues list](http://github.com/joshdmiller/ng-boilerplate/issues). And\nfeel free to submit your own!\n\n### Contributing\n\nThis is an opinionated kickstarter, but the opinions are fluid and\nevidence-based. Don't like the way I did something? Think you know of a better\nway? Have an idea to make this more useful? Let me know! You can contact me\nthrough all the usual channels or you can open an issue on the GitHub page. If\nyou're feeling ambitious, you can even submit a pull request - how thoughtful\nof you!\n\nMake sure to check out the [Contributing Guide](./CONTRIBUTING.md).\n\nSo join the team! We're good people.\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.2421875,
          "content": "{\n  \"name\": \"ng-boilerplate\",\n  \"version\": \"0.3.2\",\n  \"devDependencies\": {\n    \"angular\": \"~1.2\",\n    \"angular-mocks\": \"~1.2\",\n    \"bootstrap\": \"~3.1\",\n    \"angular-bootstrap\": \"~0.10.0\",\n    \"angular-ui-router\": \"~0.2\"\n  },\n  \"dependencies\": {}\n}\n"
        },
        {
          "name": "build.config.js",
          "type": "blob",
          "size": 2.505859375,
          "content": "/**\n * This file/module contains all configuration for the build process.\n */\nmodule.exports = {\n  /**\n   * The `build_dir` folder is where our projects are compiled during\n   * development and the `compile_dir` folder is where our app resides once it's\n   * completely built.\n   */\n  build_dir: 'build',\n  compile_dir: 'bin',\n\n  /**\n   * This is a collection of file patterns that refer to our app code (the\n   * stuff in `src/`). These file paths are used in the configuration of\n   * build tasks. `js` is all project javascript, less tests. `ctpl` contains\n   * our reusable components' (`src/common`) template HTML files, while\n   * `atpl` contains the same, but for our app's code. `html` is just our\n   * main HTML file, `less` is our main stylesheet, and `unit` contains our\n   * app's unit tests.\n   */\n  app_files: {\n    js: [ 'src/**/*.js', '!src/**/*.spec.js', '!src/assets/**/*.js' ],\n    jsunit: [ 'src/**/*.spec.js' ],\n    \n    coffee: [ 'src/**/*.coffee', '!src/**/*.spec.coffee' ],\n    coffeeunit: [ 'src/**/*.spec.coffee' ],\n\n    atpl: [ 'src/app/**/*.tpl.html' ],\n    ctpl: [ 'src/common/**/*.tpl.html' ],\n\n    html: [ 'src/index.html' ],\n    less: 'src/less/main.less'\n  },\n\n  /**\n   * This is a collection of files used during testing only.\n   */\n  test_files: {\n    js: [\n      'vendor/angular-mocks/angular-mocks.js'\n    ]\n  },\n\n  /**\n   * This is the same as `app_files`, except it contains patterns that\n   * reference vendor code (`vendor/`) that we need to place into the build\n   * process somewhere. While the `app_files` property ensures all\n   * standardized files are collected for compilation, it is the user's job\n   * to ensure non-standardized (i.e. vendor-related) files are handled\n   * appropriately in `vendor_files.js`.\n   *\n   * The `vendor_files.js` property holds files to be automatically\n   * concatenated and minified with our project source files.\n   *\n   * The `vendor_files.css` property holds any CSS files to be automatically\n   * included in our app.\n   *\n   * The `vendor_files.assets` property holds any assets to be copied along\n   * with our app's assets. This structure is flattened, so it is not\n   * recommended that you use wildcards.\n   */\n  vendor_files: {\n    js: [\n      'vendor/angular/angular.js',\n      'vendor/angular-bootstrap/ui-bootstrap-tpls.min.js',\n      'vendor/placeholders/angular-placeholders-0.0.1-SNAPSHOT.min.js',\n      'vendor/angular-ui-router/release/angular-ui-router.js',\n      'vendor/angular-ui-utils/modules/route/route.js'\n    ],\n    css: [\n    ],\n    assets: [\n    ]\n  },\n};\n"
        },
        {
          "name": "changelog.tpl",
          "type": "blob",
          "size": 0.779296875,
          "content": "\n# <%= version%> (<%= today%>) \n\n<% if (_(changelog.feat).size() > 0) { %> ## Features\n<% _(changelog.feat).forEach(function(changes, scope) { %>\n- **<%= scope%>:**\n  <% changes.forEach(function(change) { %> - <%= change.msg%> (<%= helpers.commitLink(change.sha1) %>)\n  <% }); %>\n<% }); %> <% } %>\n\n<% if (_(changelog.fix).size() > 0) { %> ## Fixes\n<% _(changelog.fix).forEach(function(changes, scope) { %>\n- **<%= scope%>:**\n  <% changes.forEach(function(change) { %> - <%= change.msg%> (<%= helpers.commitLink(change.sha1) %>)\n  <% }); %>\n<% }); %> <% } %>\n\n<% if (_(changelog.breaking).size() > 0) { %> ## Breaking Changes\n<% _(changelog.breaking).forEach(function(changes, scope) { %>\n- **<%= scope%>:**\n  <% changes.forEach(function(change) { %> <%= change.msg%>\n  <% }); %>\n<% }); %> <% } %>\n"
        },
        {
          "name": "karma",
          "type": "tree",
          "content": null
        },
        {
          "name": "module.prefix",
          "type": "blob",
          "size": 0.0419921875,
          "content": "(function ( window, angular, undefined ) {\n"
        },
        {
          "name": "module.suffix",
          "type": "blob",
          "size": 0.029296875,
          "content": "})( window, window.angular );\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.04296875,
          "content": "{\n  \"author\": \"Josh David Miller\",\n  \"name\": \"ngbp\",\n  \"version\": \"0.3.2\",\n  \"homepage\": \"https://github.com/ngbp/ngbp\",\n  \"licenses\": {\n    \"type\": \"MIT\",\n    \"url\": \"https://raw.github.com/ngbp/ngbp/master/LICENSE\"\n  },\n  \"bugs\": \"https://github.com/ngbp/ngbp/issues\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:ngbp/ngbp.git\"\n  },\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"grunt\": \"~0.4.1\",\n    \"grunt-bump\": \"0.0.6\",\n    \"grunt-coffeelint\": \"~0.0.10\",\n    \"grunt-contrib-clean\": \"^0.4.1\",\n    \"grunt-contrib-coffee\": \"^0.7.0\",\n    \"grunt-contrib-concat\": \"^0.3.0\",\n    \"grunt-contrib-copy\": \"^0.4.1\",\n    \"grunt-contrib-jshint\": \"^0.4.3\",\n    \"grunt-contrib-less\": \"~0.11.0\",\n    \"grunt-contrib-uglify\": \"^0.2.7\",\n    \"grunt-contrib-watch\": \"^0.4.4\",\n    \"grunt-conventional-changelog\": \"^0.1.2\",\n    \"grunt-html2js\": \"^0.1.9\",\n    \"grunt-karma\": \"^0.8.2\",\n    \"grunt-ng-annotate\": \"^0.8.0\",\n    \"karma\": \"^0.12.9\",\n    \"karma-coffee-preprocessor\": \"^0.2.1\",\n    \"karma-firefox-launcher\": \"^0.1.3\",\n    \"karma-jasmine\": \"^0.1.5\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools.md",
          "type": "blob",
          "size": 8.6904296875,
          "content": "# The Tools Used in `ngBoilerplate`\n\n## Introduction\n\n`ngBoilerplate` is standards-based, so it uses all the usual tools to manage\nand develop client-side code. If you've developed modern, highly-organized\nJavaScript projects before, you are probably already familiar with at least most\nof these tools. What follows is a simple description of the tools of which this\nproject makes use and how they fit in to the `ngBoilerplate` picture.\n\n## Git\n\n[Git](http://git-scm.com/) is a distributed version control system.\n`ngBoilerplate` uses git to manage its codebase. While in theory you don't have\nto use Git once you download `ngBoilerplate`, this project makes the assumption\nthat you do. If you're on GitHub, I assume you already have a basic\nunderstanding of Git, which is all you need to make effective use of this\nproject. You just need to be able to commit and push and junk - nothing funky.\nIf you're not familiar with it, check out the documentation linked to above.\nGitHub also has a great [help section](https://help.github.com/).\n\n## Node.js & NPM\n\n[Node.js](http://nodejs.org) is a platform based on Chrome's JavaScript runtime,\ncalled [V8](http://code.google.com/p/v8/). It allows you to develop all kinds of\nsoftware using the JavaScript you already know and love.\n\nA great feature of Node.js is its wide variety of existing libraries and tools.\nAs the developer community is absolutely massive and incredibly active, Node.js\nhas a basic package manager called NPM that you can use to install Node.js-based\nsoftware and libraries from the command line.\n\nWhile `ngBoilerplate` makes heavy use of Node.js behind the scenes, you as the\napplication developer don't need to really think about it much. Most of the\ninteraction with Node.js will occur through Grunt (see next section), so you\nreally only need to know how get the initial setup working.\n\n`package.json` is an NPM package description file written in JSON. It contains\nbasic metadata about your application, like its name, version, and dependencies.\nBy default, several packages are required for the build process to work; so when\nyou first start with `ngBoilerplate` you have to tell NPM to install the\npackages; this is covered in detail in the [main README](README.md). Some of\nthe required packages are Grunt build tasks (see below), while others are\ncommand-line tools either we (or the build system) need, like Karma, Grunt, and\nBower.\n\nDon't worry about knowing Node.js in order to use `ngBoilerplate`; Grunt is\nwhere the magic happens.\n\n## Grunt.js\n\n[Grunt](http://gruntjs.com) is a JavaScript task runner that runs on top of\nNode.js. Most importantly, Grunt brings us automation. There are lots of steps\nthat go into taking our manageable codebase and making it into a\nproduction-ready website; we must gather, lint, test, annotate, and copy files\nabout. Instead of doing all of that manually, we write (and use others') Grunt\ntasks to do things for us.\n\nWhen we want to build our site, we can just type:\n\n```sh\n$ grunt\n```\n\nThis will do everything needed and place our built code inside a folder called\n`bin/`. Even more magical, we can tell Grunt to watch for file changes we make\nso it can re-build our site on-the-fly:\n\n```sh\n$ grunt watch\n```\n\nThe built files will be in `build/`. See the main [README](README.md) for more\ninfo.\n\nThe next time we change a source file, Grunt will re-build the changed parts of\nthe site. If you have a Live Reload plugin installed in your browser, it will\neven auto-refresh your browser for you. You lazy bum.\n\nGrunt is controlled through `Gruntfile.js`. This file is heavily documented in\nthe source, so I will only provide a high-altitude overview here. Also note that\nunless you need to modify the build process, you don't need to know anything\nelse from this section. The two commands above really are all you need to know\nto get started with `ngBoilerplate`. But for those curious or looking to go a\nlittle more advanced, here's what you'll find.\n\nFirst, we tell Grunt which tasks we might want to use:\n\n```js\n// ...\ngrunt.loadNpmTasks('grunt-recess');\ngrunt.loadNpmTasks('grunt-contrib-clean');\ngrunt.loadNpmTasks('grunt-contrib-copy');\ngrunt.loadNpmTasks('grunt-contrib-jshint');\n// ...\n```\n\nEach of these tasks must already be installed. Remember the dependencies from\n`package.json` that NPM installed for us? Well, this is where they get used!\n\nThen we get the opportunity to tell the tasks to behave like we want by\ndefining a configuration object. While we can (and do) define all sorts of\ncustom configuration values that we reference later on, tasks look for\nconfiguration properties of their own name. For example, the `clean` task just\ntakes an array of files to delete when the task runs:\n\n```js\nclean: [ '<%= build_dir %>', '<%= compile_dir %>' ],\n```\n\nIn Grunt, the `<%= varName %>` is a way of re-using configuration variables.\nIn the `build.config.js`, we defined what `build_dir` meant:\n\n```js\nbuild_dir: 'build',\n```\n\nWhen the clean task runs, it will delete the `build/` folder entirely so that\nwhen our new build runs, we don't encounter any problems with stale or old\nfiles. Most tasks, however, have considerably more complicated configuration\nrequirements, but I've tried to document what each one is doing and what the\nconfiguration properties mean. If I was vague or ambiguous or just plain\nunclear, please file an issue and I'll get it fixed. Boom - problem solved.\n\nAfter our configuration is complete, we can define some of our own tasks. For\nexample, we could do the build by running all of the separate tasks that we\ninstalled from NPM and configured as above:\n\n```sh\n$ grunt clean\n$ grunt html2js\n$ grunt jshint\n$ grunt karma:continuous\n$ grunt concat\n$ grunt ngmin:dist\n$ grunt uglify\n$ grunt recess\n$ grunt index\n$ grunt copy\n```\n\nBut how automated is that? So instead we define a composite task that executes\nall that for us. The commands above make up the `default` tasks, which can be\nrun by typing *either* of these commands:\n\n```js\n$ grunt\n$ grunt default\n```\n\nWe also define the `watch` task discussed earlier. This is covered in more\ndetail in the main (README)[README.md].\n\nGrunt is the engine behind `ngBoilerplate`. It's the magic that makes it move.\nJust getting started, you won't need to alter `Gruntfile.js` at all, but\nas you get into more advanced application development, you will probably need to\nadd more tasks and change some steps around to make this build your own.\nHopefully, this readme and the documentation within `Gruntfile.js` (as well as\nof course the documentation at gruntjs.com) will set you on the right path.\n\n## Bower\n\n[Bower](bower.io) is a package manager for the web. It's similar in many\nrespects to NPM, though it is significantly simpler and only contains code for\nweb projects, like Twitter Bootstrap and its AngularJS counterpart Angular\nBootstrap. Bower allows us to say that our app depends in some way on these\nother libraries so that we can manage all of them in one simple place.\n\n`ngBoilerplate` comes with a `bower.json` file that looks something like this:\n\n```js\n{\n  \"name\": \"ng-boilerplate\",\n  \"version\": \"0.2.0-SNAPSHOT\",\n  \"devDependencies\": {\n    \"angular\": \"~1.0.7\",\n    \"angular-mocks\": \"~1.0.7\",\n    \"bootstrap\": \"~2.3.2\",\n    \"angular-bootstrap\": \"~0.3.0\",\n    \"angular-ui-router\": \"~0.0.1\",\n    \"angular-ui-utils\": \"~0.0.3\"\n  },\n  \"dependencies\": {}\n}\n```\n\nThis file is fairly self-explanatory; it gives the package name and version\n(duplicated from `package.json`, but this is unavoidable) as well as a list of\ndependencies our application needs in order to work. If we simply call\n\n```sh\n$ bower install\n```\n\nit will read these three dependencies and install them into the `vendor/` folder\n(along with any dependencies they have) so that we can use them in our app. If\nwe want to add a new package like AngularUI's\n[ngGrid](http://angular-ui.github.io/ng-grid/), then we can tell Bower to\ninstall that from the web, place it into the `vendor/` folder for us to use, and\nthen add it as a dependency to `bower.json`:\n\n```js\n$ bower install angular-grid --save-dev\n```\n\nBower can also update all of our packages for us at a later date, though that\nand its many other awesome features are beyond the scope of this simple\noverview.\n\nOne last thing to note is that packages installed with Bower are not\nstandardized, so we cannot automatically add them to the build process; anything\ninstalled with Bower (or placed in the `vendor/` directory manually) *must* be\nadded to your `build.config.js` file manually; look for the Bower libs included\nin `ngBoilerplate` by default in there to see what I mean.\n\n## Where to Go From Here\n\nThat's it! Now that you have a basic understanding of the tools involved, read\nthrough the [main README](README.md) to dive another level deeper and apply what\nyou've learned for great good. I promise it will all make sense it short order.\n\nHappy programming!\n\n"
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}