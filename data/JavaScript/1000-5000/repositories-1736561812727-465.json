{
  "metadata": {
    "timestamp": 1736561812727,
    "page": 465,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "eth0izzle/shhgit",
      "stars": 3854,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0478515625,
          "content": "Dockerfile\nLICENSE\nREADME.md\nconfig.yaml\nimages/\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1005859375,
          "content": "*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n*.test\n*.out\nworkspace.code-workspace\nbuild.sh\nvendor/\nbuild/\n.vscode/\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2548828125,
          "content": "FROM golang:alpine AS builder\nWORKDIR /go/src\nCOPY . .\n\nRUN export CGO_ENABLED=0 && go install && go build -o /\n\nFROM golang:alpine AS runtime\nWORKDIR /app\n\nRUN apk update && apk add --no-cache git\n\nCOPY --from=builder /shhgit /app\n\nENTRYPOINT [ \"/app/shhgit\" ]"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "MIT License\n\nCopyright (c) 2020 Paul Price (@darkp0rt)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.060546875,
          "content": "<p align=\"center\">\n<img src=\"./images/logo.png\" height=\"30%\" width=\"30%\" />\n\n# ðŸš¨ shhgit is no longer maintained ðŸš¨\n\n## **shhgit helps secure forward-thinking development, operations, and security teams by finding secrets across their code before it leads to a security breach.**\n\n![Go](https://github.com/eth0izzle/shhgit/workflows/Go/badge.svg) ![](https://img.shields.io/docker/cloud/build/eth0izzle/shhgit.svg)\n\n<a href=\"https://www.shhgit.com?utm_source=github&utm_medium=opensource&utm_campaign=readme\"><img src=\"https://user-images.githubusercontent.com/97316/90076719-5ee09c80-dcf8-11ea-87c7-c5f3b454f246.gif\" /></a>\n</p>\n\nAccidentally leaking secrets â€” usernames and passwords, API tokens, or private keys â€” in a public code repository is a developers and security teams worst nightmare. Fraudsters constantly scan public code repositories for these secrets to gain a foothold in to systems. Code is more connected than ever so often these secrets provide access to private and sensitive data â€” cloud infrastructures, database servers, payment gateways, and file storage systems to name a few.\n\nshhgit can constantly scan your code repositories to find and alert you of these secrets. \n\n## Installation\n\nYou have two options. I'd recommend the first as it will give you access to the shhgit live web interface. Use the second option if you just want the command line interface.\n\n### via Docker\n\n1. Clone this repository: `git clone https://github.com/eth0izzle/shhgit.git`\n2. Build via Docker compose: `docker-compose build`\n3. Edit your `config.yaml` file (i.e. adding your GitHub tokens)\n4. Bring up the stack: `docker-compose up`\n5. Open up http://localhost:8080/\n\n### via Go get\n\n_Note_: this method does not include the shhgit web interface\n\n1. Install [Go](https://golang.org/doc/install) for your platform.\n2. `go get github.com/eth0izzle/shhgit` will download and build shhgit automatically. Or you can clone this repository and run `go build -v -i`.\n3. Edit your `config.yaml` file and see usage below.\n\n## Usage\n\nshhgit can work in two ways: consuming the public APIs of GitHub, Gist, GitLab and BitBucket  or by processing files in a local directory.\n\nBy default, shhgit will run in the former 'public mode'. For GitHub and Gist, you will need to obtain and provide an access token (see [this guide](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line); it doesn't require any scopes or permissions. And then place it under `github_access_tokens` in `config.yaml`). GitLab and BitBucket do not require any API tokens.\n\nYou can also forgo the signatures and use shhgit with your own custom search query, e.g. to find all AWS keys you could use `shhgit --search-query AWS_ACCESS_KEY_ID=AKIA`. And to run in local mode (and perhaps integrate in to your CI pipelines) you can pass the `--local` flag (see usage below).\n\n### Options\n\n```\n--clone-repository-timeout\n        Maximum time it should take to clone a repository in seconds (default 10)\n--config-path\n        Searches for config.yaml from given directory. If not set, tries to find if from shhgit binary's and current directory\n--csv-path\n        Specify a path if you want to write found secrets to a CSV. Leave blank to disable\n--debug\n        Print debugging information\n--entropy-threshold\n        Finds high entropy strings in files. Higher threshold = more secret secrets, lower threshold = more false positives. Set to 0 to disable entropy checks (default 5.0)\n--local\n        Specify local directory (absolute path) which to scan. Scans only given directory recursively. No need to have Github tokens with local run.\n--maximum-file-size\n        Maximum file size to process in KB (default 512)\n--maximum-repository-size\n        Maximum repository size to download and process in KB) (default 5120)\n--minimum-stars\n        Only clone repositories with this many stars or higher. Set to 0 to ignore star count (default 0)\n--path-checks\n        Set to false to disable file name/path signature checking, i.e. just match regex patterns (default true)\n--process-gists\n        Watch and process Gists in real time. Set to false to disable (default true)\n--search-query\n        Specify a search string to ignore signatures and filter on files containing this string (regex compatible)\n--silent\n        Suppress all output except for errors\n--temp-directory\n        Directory to store repositories/matches (default \"%temp%\\shhgit\")\n--threads\n        Number of concurrent threads to use (default number of logical CPUs)\n```\n\n### Config\n\nThe `config.yaml` file has 7 elements. A [default is provided](https://github.com/eth0izzle/shhgit/blob/master/config.yaml).\n\n```\ngithub_access_tokens: # provide at least one token\n  - 'token one'\n  - 'token two'\nwebhook: '' # URL to a POST webhook.\nwebhook_payload: '' # Payload to POST to the webhook URL\nblacklisted_strings: [] # list of strings to ignore\nblacklisted_extensions: [] # list of extensions to ignore\nblacklisted_paths: [] # list of paths to ignore\nblacklisted_entropy_extensions: [] # additional extensions to ignore for entropy checks\nsignatures: # list of signatures to check\n  - part: '' # either filename, extension, path or contents\n    match: '' # simple text comparison (if no regex element)\n    regex: '' # regex pattern (if no match element)\n    name: '' # name of the signature\n```\n\n#### Signatures\n\nshhgit comes with 150 signatures. You can remove or add more by editing the `config.yaml` file.\n\n```\n1Password password manager database file, Amazon MWS Auth Token, Apache htpasswd file, Apple Keychain database file, Artifactory, AWS Access Key ID, AWS Access Key ID Value, AWS Account ID, AWS CLI credentials file, AWS cred file info, AWS Secret Access Key, AWS Session Token, Azure service configuration schema file, Carrierwave configuration file, Chef Knife configuration file, Chef private key, CodeClimate, Configuration file for auto-login process, Contains a private key, Contains a private key, cPanel backup ProFTPd credentials file, Day One journal file, DBeaver SQL database manager configuration file, DigitalOcean doctl command-line client configuration file, Django configuration file, Docker configuration file, Docker registry authentication file, Environment configuration file, esmtp configuration, Facebook access token, Facebook Client ID, Facebook Secret Key, FileZilla FTP configuration file, FileZilla FTP recent servers file, Firefox saved passwords DB, git-credential-store helper credentials file, Git configuration file, GitHub Hub command-line client configuration file, Github Key, GNOME Keyring database file, GnuCash database file, Google (GCM) Service account, Google Cloud API Key, Google OAuth Access Token, Google OAuth Key, Heroku API key, Heroku config file, Hexchat/XChat IRC client server list configuration file, High entropy string, HockeyApp, Irssi IRC client configuration file, Java keystore file, Jenkins publish over SSH plugin file, Jetbrains IDE Config, KDE Wallet Manager database file, KeePass password manager database file, Linkedin Client ID, LinkedIn Secret Key, Little Snitch firewall configuration file, Log file, MailChimp API Key, MailGun API Key, Microsoft BitLocker recovery key file, Microsoft BitLocker Trusted Platform Module password file, Microsoft SQL database file, Microsoft SQL server compact database file, Mongoid config file, Mutt e-mail client configuration file, MySQL client command history file, MySQL dump w/ bcrypt hashes, netrc with SMTP credentials, Network traffic capture file, NPM configuration file, NuGet API Key, OmniAuth configuration file, OpenVPN client configuration file, Outlook team, Password Safe database file, PayPal/Braintree Access Token, PHP configuration file, Picatic API key, Pidgin chat client account configuration file, Pidgin OTR private key, PostgreSQL client command history file, PostgreSQL password file, Potential cryptographic private key, Potential Jenkins credentials file, Potential jrnl journal file, Potential Linux passwd file, Potential Linux shadow file, Potential MediaWiki configuration file, Potential private key (.asc), Potential private key (.p21), Potential private key (.pem), Potential private key (.pfx), Potential private key (.pkcs12), Potential PuTTYgen private key, Potential Ruby On Rails database configuration file, Private SSH key (.dsa), Private SSH key (.ecdsa), Private SSH key (.ed25519), Private SSH key (.rsa), Public ssh key, Python bytecode file, Recon-ng web reconnaissance framework API key database, remote-sync for Atom, Remote Desktop connection file, Robomongo MongoDB manager configuration file, Rubygems credentials file, Ruby IRB console history file, Ruby on Rails master key, Ruby on Rails secrets, Ruby On Rails secret token configuration file, S3cmd configuration file, Salesforce credentials, Sauce Token, Sequel Pro MySQL database manager bookmark file, sftp-deployment for Atom, sftp-deployment for Atom, SFTP connection configuration file, Shell command alias configuration file, Shell command history file, Shell configuration file (.bashrc, .zshrc, .cshrc), Shell configuration file (.exports), Shell configuration file (.extra), Shell configuration file (.functions), Shell profile configuration file, Slack Token, Slack Webhook, SonarQube Docs API Key, SQL Data dump file, SQL dump file, SQLite3 database file, SQLite database file, Square Access Token, Square OAuth Secret, SSH configuration file, SSH Password, Stripe API key, T command-line Twitter client configuration file, Terraform variable config file, Tugboat DigitalOcean management tool configuration, Tunnelblick VPN configuration file, Twilo API Key, Twitter Client ID, Twitter Secret Key, Username and password in URI, Ventrilo server configuration file, vscode-sftp for VSCode, Windows BitLocker full volume encrypted data file, WP-Config\n```\n\n## Contributing\n\n1. Fork it, baby!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -am 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request.\n\n## Disclaimer\n\nI take no responsibility for how you use this tool. Don't be a dick.\n\n## License\n\nMIT. See [LICENSE](https://github.com/eth0izzle/shhgit/blob/master/LICENSE)\n"
        },
        {
          "name": "config.yaml",
          "type": "blob",
          "size": 16.880859375,
          "content": "github_access_tokens:\r\n  - ''\r\nwebhook: '' # URL to which the payload is POSTed\r\n\r\n# This default payload will work for Slack and MatterMost.\r\n# Consult your webhook API for additional configurations.\r\nwebhook_payload: |\r\n  {\r\n    \"text\": \"%s\"\r\n  }\r\n\r\nblacklisted_strings: [\"AKIAIOSFODNN7EXAMPLE\", \"username:password\", \"sshpass -p $SSH_PASS\"] # skip matches containing any of these strings (case insensitive\r\nblacklisted_extensions: [\".exe\", \".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\", \".tiff\", \".tif\", \".psd\", \".xcf\", \".zip\", \".tar.gz\", \".ttf\", \".lock\"]\r\nblacklisted_paths: [\"node_modules{sep}\", \"vendor{sep}bundle\", \"vendor{sep}cache\"] # use {sep} for the OS' path seperator (i.e. / or \\)\r\nblacklisted_entropy_extensions: [\".pem\", \"id_rsa\", \".asc\", \".ovpn\", \".sqlite\", \".sqlite3\", \".log\"] # additional extensions to skip entropy checks\r\nsignatures:\r\n  - part:  'extension'\r\n    match: '.pem'\r\n    name: 'Potential cryptographic private key'\r\n  - part:  'extension'\r\n    match: '.log'\r\n    name: 'Log file'\r\n  - part:  'extension'\r\n    match: '.pkcs12'\r\n    name: 'Potential cryptographic key bundle'\r\n  - part:  'extension'\r\n    match: '.p12'\r\n    name: 'Potential cryptographic key bundle'\r\n  - part:  'extension'\r\n    match: '.pfx'\r\n    name: 'Potential cryptographic key bundle'\r\n  - part:  'extension'\r\n    match: '.asc'\r\n    name: 'Potential cryptographic key bundle'\r\n  - part:  'filename'\r\n    match: 'otr.private_key'\r\n    name: 'Pidgin OTR private key'\r\n  - part:  'extension'\r\n    match: '.ovpn'\r\n    name: 'OpenVPN client configuration file'\r\n  - part:  'extension'\r\n    match: '.cscfg'\r\n    name: 'Azure service configuration schema file'\r\n  - part:  'extension'\r\n    match: '.rdp'\r\n    name: 'Remote Desktop connection file'\r\n  - part:  'extension'\r\n    match: '.mdf'\r\n    name: 'Microsoft SQL database file'\r\n  - part:  'extension'\r\n    match: '.sdf'\r\n    name: 'Microsoft SQL server compact database file'\r\n  - part:  'extension'\r\n    match: '.sqlite'\r\n    name: 'SQLite database file'\r\n  - part:  'extension'\r\n    match: '.sqlite3'\r\n    name: 'SQLite3 database file'\r\n  - part:  'extension'\r\n    match: '.bek'\r\n    name: 'Microsoft BitLocker recovery key file'\r\n  - part:  'extension'\r\n    match: '.tpm'\r\n    name: 'Microsoft BitLocker Trusted Platform Module password file'\r\n  - part:  'extension'\r\n    match: '.fve'\r\n    name: 'Windows BitLocker full volume encrypted data file'\r\n  - part:  'extension'\r\n    match: '.jks'\r\n    name: 'Java keystore file'\r\n  - part:  'extension'\r\n    match: '.psafe3'\r\n    name: 'Password Safe database file'\r\n  - part:  'filename'\r\n    match: 'secret_token.rb'\r\n    name: 'Ruby On Rails secret token configuration file'\r\n  - part:  'filename'\r\n    match: 'carrierwave.rb'\r\n    name: 'Carrierwave configuration file'\r\n  - part:  'filename'\r\n    match: 'database.yml'\r\n    name: 'Potential Ruby On Rails database configuration file'\r\n  - part:  'filename'\r\n    match: 'omniauth.rb'\r\n    name: 'OmniAuth configuration file'\r\n  - part:  'filename'\r\n    match: 'settings.py'\r\n    name: 'Django configuration file'\r\n  - part:  'extension'\r\n    match: '.agilekeychain'\r\n    name: '1Password password manager database file'\r\n  - part:  'extension'\r\n    match: '.keychain'\r\n    name: 'Apple Keychain database file'\r\n  - part:  'extension'\r\n    match: '.pcap'\r\n    name: 'Network traffic capture file'\r\n  - part:  'extension'\r\n    match: '.gnucash'\r\n    name: 'GnuCash database file'\r\n  - part:  'filename'\r\n    match: 'jenkins.plugins.publish_over_ssh.BapSshPublisherPlugin.xml'\r\n    name: 'Jenkins publish over SSH plugin file'\r\n  - part:  'filename'\r\n    match: 'credentials.xml'\r\n    name: 'Potential Jenkins credentials file'\r\n  - part:  'extension'\r\n    match: '.kwallet'\r\n    name: 'KDE Wallet Manager database file'\r\n  - part:  'filename'\r\n    match: 'LocalSettings.php'\r\n    name: 'Potential MediaWiki configuration file'\r\n  - part:  'extension'\r\n    match: '.tblk'\r\n    name: 'Tunnelblick VPN configuration file'\r\n  - part:  'filename'\r\n    match: 'Favorites.plist'\r\n    name: 'Sequel Pro MySQL database manager bookmark file'\r\n  - part:  'filename'\r\n    match: 'configuration.user.xpl'\r\n    name: 'Little Snitch firewall configuration file'\r\n  - part:  'extension'\r\n    match: '.dayone'\r\n    name: 'Day One journal file'\r\n  - part:  'filename'\r\n    match: 'journal.txt'\r\n    name: 'Potential jrnl journal file'\r\n  - part:  'filename'\r\n    match: 'knife.rb'\r\n    name: 'Chef Knife configuration file'\r\n  - part:  'filename'\r\n    match: 'proftpdpasswd'\r\n    name: 'cPanel backup ProFTPd credentials file'\r\n  - part:  'filename'\r\n    match: 'robomongo.json'\r\n    name: 'Robomongo MongoDB manager configuration file'\r\n  - part:    'filename'\r\n    match:   'filezilla.xml'\r\n    name:   'FileZilla FTP configuration file'\r\n  - part:    'filename'\r\n    match:   'recentservers.xml'\r\n    name:   'FileZilla FTP recent servers file'\r\n  - part:    'filename'\r\n    match:   'ventrilo_srv.ini'\r\n    name:   'Ventrilo server configuration file'\r\n  - part:    'filename'\r\n    match:   'terraform.tfvars'\r\n    name:   'Terraform variable config file'\r\n  - part:    'filename'\r\n    match:   '.exports'\r\n    name:   'Shell configuration file'\r\n  - part:    'filename'\r\n    match:   '.functions'\r\n    name:   'Shell configuration file'\r\n  - part:    'filename'\r\n    match:   '.extra'\r\n    name:   'Shell configuration file'\r\n  - part:  'filename'\r\n    regex: '^.*_rsa$'\r\n    name: 'Private SSH key'\r\n  - part:  'filename'\r\n    regex: '^.*_dsa$'\r\n    name: 'Private SSH key'\r\n  - part:  'filename'\r\n    regex: '^.*_ed25519$'\r\n    name: 'Private SSH key'\r\n  - part:  'filename'\r\n    regex: '^.*_ecdsa$'\r\n    name: 'Private SSH key'\r\n  - part:  'path'\r\n    regex: '\\.?ssh/config$'\r\n    name: 'SSH configuration file'\r\n  - part:  'extension'\r\n    regex: '^key(pair)?$'\r\n    name: 'Potential cryptographic private key'\r\n  - part:  'filename'\r\n    regex: '^\\.?(bash_|zsh_|sh_|z)?history$'\r\n    name: 'Shell command history file'\r\n  - part:  'filename'\r\n    regex: '^\\.?mysql_history$'\r\n    name: 'MySQL client command history file'\r\n  - part:  'filename'\r\n    regex: '^\\.?psql_history$'\r\n    name: 'PostgreSQL client command history file'\r\n  - part:  'filename'\r\n    regex: '^\\.?pgpass$'\r\n    name: 'PostgreSQL password file'\r\n  - part:  'filename'\r\n    regex: '^\\.?irb_history$'\r\n    name: 'Ruby IRB console history file'\r\n  - part:  'path'\r\n    regex: '\\.?purple/accounts\\.xml$'\r\n    name: 'Pidgin chat client account configuration file'\r\n  - part:  'path'\r\n    regex: '\\.?xchat2?/servlist_?\\.conf$'\r\n    name: 'Hexchat/XChat IRC client server list configuration file'\r\n  - part:  'path'\r\n    regex: '\\.?irssi/config$'\r\n    name: 'Irssi IRC client configuration file'\r\n  - part:  'path'\r\n    regex: '\\.?recon-ng/keys\\.db$'\r\n    name: 'Recon-ng web reconnaissance framework API key database'\r\n  - part:  'filename'\r\n    regex: '^\\.?dbeaver-data-sources.xml$'\r\n    name: 'DBeaver SQL database manager configuration file'\r\n  - part:  'filename'\r\n    regex: '^\\.?muttrc$'\r\n    name: 'Mutt e-mail client configuration file'\r\n  - part:  'filename'\r\n    regex: '^\\.?s3cfg$'\r\n    name: 'S3cmd configuration file'\r\n  - part:  'path'\r\n    regex: '\\.?aws/credentials$'\r\n    name: 'AWS CLI credentials file'\r\n  - part:  'filename'\r\n    regex: '^sftp-config(\\.json)?$'\r\n    name: 'SFTP connection configuration file'\r\n  - part:  'filename'\r\n    regex: '^\\.?trc$'\r\n    name: 'T command-line Twitter client configuration file'\r\n  - part:    'filename'\r\n    regex:   '^\\.?(bash|zsh|csh)rc$'\r\n    name:   'Shell configuration file'\r\n  - part:    'filename'\r\n    regex:   '^\\.?(bash_|zsh_)?profile$'\r\n    name:   'Shell profile configuration file'\r\n  - part:    'filename'\r\n    regex:   '^\\.?(bash_|zsh_)?aliases$'\r\n    name:   'Shell command alias configuration file'\r\n  - part:  'filename'\r\n    regex: 'config(\\.inc)?\\.php$'\r\n    name: 'PHP configuration file'\r\n  - part:  'extension'\r\n    regex: '^key(store|ring)$'\r\n    name: 'GNOME Keyring database file'\r\n  - part:    'extension'\r\n    regex:   '^kdbx?$'\r\n    name:   'KeePass password manager database file'\r\n  - part:  'extension'\r\n    regex: '^sql(dump)?$'\r\n    name: 'SQL dump file'\r\n  - part:  'filename'\r\n    regex: '^\\.?htpasswd$'\r\n    name: 'Apache htpasswd file'\r\n  - part:    'filename'\r\n    regex:   '^(\\.|_)?netrc$'\r\n    name:   'Configuration file for auto-login process'\r\n  - part:    'path'\r\n    regex:   '\\.?gem/credentials$'\r\n    name:   'Rubygems credentials file'\r\n  - part:  'filename'\r\n    regex: '^\\.?tugboat$'\r\n    name: 'Tugboat DigitalOcean management tool configuration'\r\n  - part:    'path'\r\n    regex:   'doctl/config.yaml$'\r\n    name:   'DigitalOcean doctl command-line client configuration file'\r\n  - part:  'filename'\r\n    regex: '^\\.?git-credentials$'\r\n    name: 'git-credential-store helper credentials file'\r\n  - part:    'path'\r\n    regex:   'config/hub$'\r\n    name:   'GitHub Hub command-line client configuration file'\r\n  - part:  'filename'\r\n    regex: '^\\.?gitconfig$'\r\n    name: 'Git configuration file'\r\n  - part:    'path'\r\n    regex:   '\\.?chef/(.*)\\.pem$'\r\n    name:   'Chef private key'\r\n  - part:    'path'\r\n    regex:   'etc/shadow$'\r\n    name:   'Potential Linux shadow file'\r\n  - part:    'path'\r\n    regex:   'etc/passwd$'\r\n    name:   'Potential Linux passwd file'\r\n    comment: 'Contains system user information'\r\n  - part:    'filename'\r\n    regex:   '^\\.?dockercfg$'\r\n    name:   'Docker configuration file'\r\n  - part:    'filename'\r\n    regex:   '^\\.?npmrc$'\r\n    name:   'NPM configuration file'\r\n  - part:  'filename'\r\n    regex: '^\\.?env$'\r\n    name: 'Environment configuration file'\r\n  - part: 'contents'\r\n    regex: '(A3T[A-Z0-9]|AKIA|AGPA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}'\r\n    name: 'AWS Access Key ID Value'\r\n  - part: 'contents'\r\n    regex: \"((\\\\\\\"|'|`)?((?i)aws)?_?((?i)access)_?((?i)key)?_?((?i)id)?(\\\\\\\"|'|`)?\\\\\\\\s{0,50}(:|=>|=)\\\\\\\\s{0,50}(\\\\\\\"|'|`)?(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}(\\\\\\\"|'|`)?)\"\r\n    name: 'AWS Access Key ID'\r\n  - part: 'contents'\r\n    regex: \"((\\\\\\\"|'|`)?((?i)aws)?_?((?i)account)_?((?i)id)?(\\\\\\\"|'|`)?\\\\\\\\s{0,50}(:|=>|=)\\\\\\\\s{0,50}(\\\\\\\"|'|`)?[0-9]{4}-?[0-9]{4}-?[0-9]{4}(\\\\\\\"|'|`)?)\"\r\n    name: 'AWS Account ID'\r\n  - part: 'contents'\r\n    regex: \"((\\\\\\\"|'|`)?((?i)aws)?_?((?i)secret)_?((?i)access)?_?((?i)key)?_?((?i)id)?(\\\\\\\"|'|`)?\\\\\\\\s{0,50}(:|=>|=)\\\\\\\\s{0,50}(\\\\\\\"|'|`)?[A-Za-z0-9/+=]{40}(\\\\\\\"|'|`)?)\"\r\n    name: 'AWS Secret Access Key'\r\n  - part: 'contents'\r\n    regex: \"((\\\\\\\"|'|`)?((?i)aws)?_?((?i)session)?_?((?i)token)?(\\\\\\\"|'|`)?\\\\\\\\s{0,50}(:|=>|=)\\\\\\\\s{0,50}(\\\\\\\"|'|`)?[A-Za-z0-9/+=]{16,}(\\\\\\\"|'|`)?)\"\r\n    name: 'AWS Session Token'\r\n  - part: 'contents'\r\n    regex: \"(?i)artifactory.{0,50}(\\\\\\\"|'|`)?[a-zA-Z0-9=]{112}(\\\\\\\"|'|`)?\"\r\n    name: 'Artifactory'\r\n  - part: 'contents'\r\n    regex: \"(?i)codeclima.{0,50}(\\\\\\\"|'|`)?[0-9a-f]{64}(\\\\\\\"|'|`)?\"\r\n    name: 'CodeClimate'\r\n  - part:  'contents'\r\n    regex: 'EAACEdEose0cBA[0-9A-Za-z]+'\r\n    name: 'Facebook access token'\r\n  - part: 'contents'\r\n    regex: \"((\\\\\\\"|'|`)?type(\\\\\\\"|'|`)?\\\\\\\\s{0,50}(:|=>|=)\\\\\\\\s{0,50}(\\\\\\\"|'|`)?service_account(\\\\\\\"|'|`)?,?)\"\r\n    name: 'Google (GCM) Service account'\r\n  - part:  'contents'\r\n    regex: '(?:r|s)k_[live|test]_[0-9a-zA-Z]{24}'\r\n    name: 'Stripe API key'\r\n  - part:  'contents'\r\n    regex: '[0-9]+-[0-9A-Za-z_]{32}\\.apps\\.googleusercontent\\.com'\r\n    name: 'Google OAuth Key'\r\n  - part: 'contents'\r\n    regex: 'AIza[0-9A-Za-z\\\\-_]{35}'\r\n    name: 'Google Cloud API Key'\r\n  - part: 'contents'\r\n    regex: 'ya29\\\\.[0-9A-Za-z\\\\-_]+'\r\n    name: 'Google OAuth Access Token'\r\n  - part:  'contents'\r\n    regex: 'sk_[live|test]_[0-9a-z]{32}'\r\n    name: 'Picatic API key'\r\n  - part:  'contents'\r\n    regex: 'sq0atp-[0-9A-Za-z\\-_]{22}'\r\n    name: 'Square Access Token'\r\n  - part:  'contents'\r\n    regex: 'sq0csp-[0-9A-Za-z\\-_]{43}'\r\n    name: 'Square OAuth Secret'\r\n  - part:  'contents'\r\n    regex: 'access_token\\$production\\$[0-9a-z]{16}\\$[0-9a-f]{32}'\r\n    name: 'PayPal/Braintree Access Token'\r\n  - part:  'contents'\r\n    regex: 'amzn\\.mws\\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'\r\n    name: 'Amazon MWS Auth Token'\r\n  - part:  'contents'\r\n    regex: 'SK[0-9a-fA-F]{32}'\r\n    name: 'Twilo API Key'\r\n  - part:  'contents'\r\n    regex: 'SG\\.[0-9A-Za-z\\-_]{22}\\.[0-9A-Za-z\\-_]{43}'\r\n    name: 'SendGrid API Key'\r\n  - part:  'contents'\r\n    regex: 'key-[0-9a-zA-Z]{32}'\r\n    name: 'MailGun API Key'\r\n  - part:  'contents'\r\n    regex: '[0-9a-f]{32}-us[0-9]{12}'\r\n    name: 'MailChimp API Key'\r\n  - part:  'contents'\r\n    regex: \"sshpass -p.*['|\\\\\\\"]\"\r\n    name: 'SSH Password'\r\n  - part: 'contents'\r\n    regex: '(https\\\\://outlook\\\\.office.com/webhook/[0-9a-f-]{36}\\\\@)'\r\n    name: 'Outlook team'\r\n  - part: 'contents'\r\n    regex: \"(?i)sauce.{0,50}(\\\\\\\"|'|`)?[0-9a-f-]{36}(\\\\\\\"|'|`)?\"\r\n    name: 'Sauce Token'\r\n  - part: 'contents'\r\n    regex: '(xox[pboa]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})'\r\n    name: 'Slack Token'\r\n  - part: 'contents'\r\n    regex: 'https://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}'\r\n    name: 'Slack Webhook'\r\n  - part: 'contents'\r\n    regex: \"(?i)sonar.{0,50}(\\\\\\\"|'|`)?[0-9a-f]{40}(\\\\\\\"|'|`)?\"\r\n    name: 'SonarQube Docs API Key'\r\n  - part: 'contents'\r\n    regex: \"(?i)hockey.{0,50}(\\\\\\\"|'|`)?[0-9a-f]{32}(\\\\\\\"|'|`)?\"\r\n    name: 'HockeyApp'\r\n  - part: 'contents'\r\n    regex: '([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):([^$<]{1})([^\\s\";/]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,24}([^\\s]+)'\r\n    name: 'Username and password in URI'\r\n  - part: 'contents'\r\n    regex: 'oy2[a-z0-9]{43}'\r\n    name: 'NuGet API Key'\r\n  - part:  'contents'\r\n    regex: 'hawk\\.[0-9A-Za-z\\-_]{20}\\.[0-9A-Za-z\\-_]{20}'\r\n    name: 'StackHawk API Key'\r\n  - part:  'extension'\r\n    match: '.ppk'\r\n    name: 'Potential PuTTYgen private key'\r\n  - part:  'filename'\r\n    match: 'heroku.json'\r\n    name: 'Heroku config file'\r\n  - part:  'extension'\r\n    match: '.sqldump'\r\n    name: 'SQL Data dump file'\r\n  - part:  'filename'\r\n    match: 'dump.sql'\r\n    name: 'MySQL dump w/ bcrypt hashes'\r\n  - part:  'filename'\r\n    match: 'id_rsa_pub'\r\n    name: 'Public ssh key'\r\n  - part: 'filename'\r\n    match: 'mongoid.yml'\r\n    name: 'Mongoid config file'\r\n  - part: 'filename'\r\n    match: 'salesforce.js'\r\n    name: 'Salesforce credentials in a nodejs project'\r\n  - part: 'extension'\r\n    match: '.netrc'\r\n    name: 'netrc with SMTP credentials'\r\n  - part:  'filename'\r\n    regex: '.remote-sync.json$'\r\n    name: 'Created by remote-sync for Atom, contains FTP and/or SCP/SFTP/SSH server details and credentials'\r\n  - part:  'filename'\r\n    regex: '.esmtprc$'\r\n    name: 'esmtp configuration'\r\n  - part:  'filename'\r\n    regex: '^deployment-config.json?$'\r\n    name: 'Created by sftp-deployment for Atom, contains server details and credentials'\r\n  - part:  'filename'\r\n    regex: '.ftpconfig$'\r\n    name: 'Created by sftp-deployment for Atom, contains server details and credentials'\r\n  - part: 'contents'\r\n    regex: '-----BEGIN (EC|RSA|DSA|OPENSSH|PGP) PRIVATE KEY'\r\n    name: 'Contains a private key'\r\n  - part: 'contents'\r\n    regex: 'define(.{0,20})?(DB_CHARSET|NONCE_SALT|LOGGED_IN_SALT|AUTH_SALT|NONCE_KEY|DB_HOST|DB_PASSWORD|AUTH_KEY|SECURE_AUTH_KEY|LOGGED_IN_KEY|DB_NAME|DB_USER)(.{0,20})?[''|\"].{10,120}[''|\"]'\r\n    name: 'WP-Config'\r\n  - part: 'contents'\r\n    regex: '(?i)(aws_access_key_id|aws_secret_access_key)(.{0,20})?=.[0-9a-zA-Z\\/+]{20,40}'\r\n    name: 'AWS cred file info'\r\n  - part: 'contents'\r\n    regex: '(?i)(facebook|fb)(.{0,20})?(?-i)[''\\\"][0-9a-f]{32}[''\\\"]'\r\n    name: 'Facebook Secret Key'\r\n  - part: 'contents'\r\n    regex: '(?i)(facebook|fb)(.{0,20})?[''\\\"][0-9]{13,17}[''\\\"]'\r\n    name: 'Facebook Client ID'\r\n  - part: 'contents'\r\n    regex: '(?i)twitter(.{0,20})?[''\\\"][0-9a-z]{35,44}[''\\\"]'\r\n    name: 'Twitter Secret Key'\r\n  - part: 'contents'\r\n    regex: '(?i)twitter(.{0,20})?[''\\\"][0-9a-z]{18,25}[''\\\"]'\r\n    name: 'Twitter Client ID'\r\n  - part: 'contents'\r\n    regex: '(?i)github(.{0,20})?(?-i)[''\\\"][0-9a-zA-Z]{35,40}[''\\\"]'\r\n    name: 'Github Key'\r\n  - part: 'contents'\r\n    regex: '(?i)heroku(.{0,20})?[''\"][0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}[''\"]'\r\n    name: 'Heroku API key'\r\n  - part: 'contents'\r\n    regex: '(?i)linkedin(.{0,20})?(?-i)[''\\\"][0-9a-z]{12}[''\\\"]'\r\n    name: 'Linkedin Client ID'\r\n  - part: 'contents'\r\n    regex: '(?i)linkedin(.{0,20})?[''\\\"][0-9a-z]{16}[''\\\"]'\r\n    name: 'LinkedIn Secret Key'\r\n  - part: 'path'\r\n    regex: '\\.?idea[\\\\\\/]WebServers.xml$'\r\n    name: 'Created by Jetbrains IDEs, contains webserver credentials with encoded passwords (not encrypted!)'\r\n  - part: 'path'\r\n    regex: '\\.?vscode[\\\\\\/]sftp.json$'\r\n    name: 'Created by vscode-sftp for VSCode, contains SFTP/SSH server details and credentials'\r\n  - part:  'path'\r\n    regex: 'web[\\\\\\/]ruby[\\\\\\/]secrets.yml'\r\n    name: 'Ruby on rails secrets.yml file (contains passwords)'\r\n  - part:  'path'\r\n    regex: '\\.?docker[\\\\\\/]config.json$'\r\n    name: 'Docker registry authentication file'\r\n  - part:  'path'\r\n    regex: 'ruby[\\\\\\/]config[\\\\\\/]master.key$'\r\n    name: 'Rails master key (used for decrypting credentials.yml.enc for Rails 5.2+)'\r\n  - part:  'path'\r\n    regex: '\\.?mozilla[\\\\\\/]firefox[\\\\\\/]logins.json$'\r\n    name: 'Firefox saved password collection (can be decrypted using keys4.db)'\r\n"
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.4384765625,
          "content": "version: '2.4'\n\nservices:\n  shhgit-www:\n    build: ./www\n    container_name: shhgit.www\n    ports:\n      - 8080:80 # if you change your local port update public/script.js:1273\n    volumes:\n      - ./www/public:/usr/share/nginx/html:ro\n\n  shhgit-app:\n    build: ./\n    container_name: shhgit.app\n    entrypoint: [\"/app/shhgit\", \"--live=http://shhgit-www/push\"]\n    depends_on:\n      - shhgit-www\n    volumes:\n      - ./config.yaml:/app/config.yaml:ro"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.4208984375,
          "content": "module github.com/eth0izzle/shhgit\n\ngo 1.14\n\nrequire (\n\tgithub.com/fatih/color v1.7.0\n\tgithub.com/google/go-github v17.0.0+incompatible\n\tgithub.com/google/go-querystring v1.0.0 // indirect\n\tgithub.com/mattn/go-colorable v0.1.2 // indirect\n\tgithub.com/mattn/go-isatty v0.0.9 // indirect\n\tgolang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45\n\tgopkg.in/src-d/go-git.v4 v4.13.1\n\tgopkg.in/yaml.v3 v3.0.0-20190709130402-674ba3eaed22\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 8.6962890625,
          "content": "cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ngithub.com/alcortesm/tgz v0.0.0-20161220082320-9c5fe88206d7 h1:uSoVVbwJiQipAclBbw+8quDsfcvFjOpI5iCf4p/cqCs=\ngithub.com/alcortesm/tgz v0.0.0-20161220082320-9c5fe88206d7/go.mod h1:6zEj6s6u/ghQa61ZWa/C2Aw3RkjiTBOix7dkqa1VLIs=\ngithub.com/anmitsu/go-shlex v0.0.0-20161002113705-648efa622239/go.mod h1:2FmKhYUyUczH0OGQWaF5ceTx0UBShxjsH6f8oGKYe2c=\ngithub.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5/go.mod h1:wHh0iHkYZB8zMSxRWpUBQtwG5a7fFgvEO+odwuTv2gs=\ngithub.com/boz/go-throttle v0.0.0-20160922054636-fdc4eab740c1 h1:1fx+RA5lk1ZkzPAUP7DEgZnVHYxEcHO77vQO/V8z/2Q=\ngithub.com/boz/go-throttle v0.0.0-20160922054636-fdc4eab740c1/go.mod h1:z0nyIb42Zs97wyX1V+8MbEFhHeTw1OgFQfR6q57ZuHc=\ngithub.com/creack/pty v1.1.7/go.mod h1:lj5s0c3V2DBrqTV7llrYr5NG6My20zk30Fl46Y7DoTY=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/emirpasic/gods v1.12.0 h1:QAUIPSaCu4G+POclxeqb3F+WPpdKqFGlw36+yOzGlrg=\ngithub.com/emirpasic/gods v1.12.0/go.mod h1:YfzfFFoVP/catgzJb4IKIqXjX78Ha8FMSDh3ymbK86o=\ngithub.com/fatih/color v1.7.0 h1:DkWD4oS2D8LGGgTQ6IvwJJXSL5Vp2ffcQg58nFV38Ys=\ngithub.com/fatih/color v1.7.0/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=\ngithub.com/flynn/go-shlex v0.0.0-20150515145356-3f9db97f8568/go.mod h1:xEzjJPgXI435gkrCt3MPfRiAkVrwSbHsst4LCFVfpJc=\ngithub.com/gliderlabs/ssh v0.2.2/go.mod h1:U7qILu1NlMHj9FlMhZLlkCdDnU1DBEAqr0aevW3Awn0=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-github v17.0.0+incompatible h1:N0LgJ1j65A7kfXrZnUDaYCs/Sf4rEjNlfyDHW9dolSY=\ngithub.com/google/go-github v17.0.0+incompatible/go.mod h1:zLgOLi98H3fifZn+44m+umXrS52loVEgC2AApnigrVQ=\ngithub.com/google/go-querystring v1.0.0 h1:Xkwi/a1rcvNg1PPYe5vI8GbeBY/jrVuDX5ASuANWTrk=\ngithub.com/google/go-querystring v1.0.0/go.mod h1:odCYkC5MyYFN7vkCjXpyrEuKhc/BUO6wN/zVPAxq5ck=\ngithub.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 h1:BQSFePA1RWJOlocH6Fxy8MmwDt+yVQYULKfN0RoTN8A=\ngithub.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99/go.mod h1:1lJo3i6rXxKeerYnT8Nvf0QmHCRC1n8sfWVwXF2Frvo=\ngithub.com/jessevdk/go-flags v1.4.0/go.mod h1:4FA24M0QyGHXBuZZK/XkWh8h0e1EYbRYJSGM75WSRxI=\ngithub.com/kevinburke/ssh_config v0.0.0-20190725054713-01f96b0aa0cd h1:Coekwdh0v2wtGp9Gmz1Ze3eVRAWJMLokvN3QjdzCHLY=\ngithub.com/kevinburke/ssh_config v0.0.0-20190725054713-01f96b0aa0cd/go.mod h1:CT57kijsi8u/K/BOFA39wgDQJ9CxiF4nAY/ojJ6r6mM=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/pty v1.1.8/go.mod h1:O1sed60cT9XZ5uDucP5qwvh+TE3NnUj51EiZO/lmSfw=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/mattn/go-colorable v0.1.2 h1:/bC9yWikZXAL9uJdulbSfyVNIR3n3trXl+v8+1sx8mU=\ngithub.com/mattn/go-colorable v0.1.2/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=\ngithub.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.9 h1:d5US/mDsogSGW37IV293h//ZFaeajb69h+EHFsv2xGg=\ngithub.com/mattn/go-isatty v0.0.9/go.mod h1:YNRxwqDuOph6SZLI9vUUz6OYw3QyUt7WiY2yME+cCiQ=\ngithub.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/pelletier/go-buffruneio v0.2.0/go.mod h1:JkE26KsDizTr40EUHkXVtNPvgGtbSNq5BcowyYOWdKo=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/sergi/go-diff v1.0.0 h1:Kpca3qRNrduNnOQeazBd0ysaKrUJiIuISHxogkT9RPQ=\ngithub.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=\ngithub.com/src-d/gcfg v1.4.0 h1:xXbNR5AlLSA315x2UO+fTSSAXCDf+Ar38/6oyGbDKQ4=\ngithub.com/src-d/gcfg v1.4.0/go.mod h1:p/UMsR43ujA89BJY9duynAwIpvqEujIH/jFlfL7jWoI=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.2.0/go.mod h1:qt09Ya8vawLte6SNmTgCsAVtYtaKzEcn8ATUoHMkEqE=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/xanzy/ssh-agent v0.2.1 h1:TCbipTQL2JiiCprBWx9frJ2eJlCYT00NmctrHxVAr70=\ngithub.com/xanzy/ssh-agent v0.2.1/go.mod h1:mLlQY/MoOhWBj+gOGMQkOeiEvkx+8pJSI+0Bx9h2kr4=\ngolang.org/x/crypto v0.0.0-20190219172222-a4c6cb3142f2/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4 h1:HuIa8hRrWRSrqYzx1qI49NNxhdi2PrY7gxVSq1JjLDc=\ngolang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190724013045-ca1201d0de80 h1:Ao/3l156eZf2AW5wK8a7/smtodRU+gha3+BeqJ69lRk=\ngolang.org/x/net v0.0.0-20190724013045-ca1201d0de80/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45 h1:SVwTIAaPC2U/AvvLNZ2a7OVsmBpC8L5BlwK1whH3hm0=\ngolang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190221075227-b4e8571b14e0/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190726091711-fc99dfbffb4e h1:D5TXcfTk7xF7hvieo4QErS3qqCB4teTffacDWr7CI+0=\ngolang.org/x/sys v0.0.0-20190726091711-fc99dfbffb4e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190813064441-fde4db37ae7a h1:aYOabOQFp6Vj6W1F80affTUvO9UxmJRx8K0gsfABByQ=\ngolang.org/x/sys v0.0.0-20190813064441-fde4db37ae7a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2 h1:tW2bmiBqwgJj/UpqtC8EpXEZVYOwU0yG4iWbprSVAcs=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190729092621-ff9f1409240a/go.mod h1:jcCCGcm9btYwXyDqrUWc6MKQKKGJCWEQ3AfLSRIbEuI=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/src-d/go-billy.v4 v4.3.2 h1:0SQA1pRztfTFx2miS8sA97XvooFeNOmvUenF4o0EcVg=\ngopkg.in/src-d/go-billy.v4 v4.3.2/go.mod h1:nDjArDMp+XMs1aFAESLRjfGSgfvoYN0hDfzEk0GjC98=\ngopkg.in/src-d/go-git-fixtures.v3 v3.5.0 h1:ivZFOIltbce2Mo8IjzUHAFoq/IylO9WHhNOAJK+LsJg=\ngopkg.in/src-d/go-git-fixtures.v3 v3.5.0/go.mod h1:dLBcvytrw/TYZsNTWCnkNF2DSIlzWYqTe3rJR56Ac7g=\ngopkg.in/src-d/go-git.v4 v4.13.1 h1:SRtFyV8Kxc0UP7aCHcijOMQGPxHSmMOPrzulQWolkYE=\ngopkg.in/src-d/go-git.v4 v4.13.1/go.mod h1:nx5NYcxdKxq5fpltdHnPa2Exj4Sx0EclMWZQbYDu2z8=\ngopkg.in/warnings.v0 v0.1.2 h1:wFXVbFY8DY5/xOe1ECiWdKCzZlxgshcYVNkBHstARME=\ngopkg.in/warnings.v0 v0.1.2/go.mod h1:jksf8JmL6Qr/oQM2OXTHunEvvTAsrWBLb6OOjuVWRNI=\ngopkg.in/yaml.v3 v3.0.0-20190709130402-674ba3eaed22 h1:0efs3hwEZhFKsCoP8l6dDB1AZWMgnEl3yWXWRZTOaEA=\ngopkg.in/yaml.v3 v3.0.0-20190709130402-674ba3eaed22/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 7.27734375,
          "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/eth0izzle/shhgit/core\"\n\t\"github.com/fatih/color\"\n)\n\ntype MatchEvent struct {\n\tUrl       string\n\tMatches   []string\n\tSignature string\n\tFile      string\n\tStars     int\n\tSource    core.GitResourceType\n}\n\nvar session = core.GetSession()\n\nfunc ProcessRepositories() {\n\tthreadNum := *session.Options.Threads\n\n\tfor i := 0; i < threadNum; i++ {\n\t\tgo func(tid int) {\n\t\t\tfor {\n\t\t\t\ttimeout := time.Duration(*session.Options.CloneRepositoryTimeout) * time.Second\n\t\t\t\t_, cancel := context.WithTimeout(context.Background(), timeout)\n\t\t\t\tdefer cancel()\n\n\t\t\t\trepository := <-session.Repositories\n\n\t\t\t\trepo, err := core.GetRepository(session, repository.Id)\n\n\t\t\t\tif err != nil {\n\t\t\t\t\tsession.Log.Warn(\"Failed to retrieve repository %d: %s\", repository.Id, err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tif repo.GetPermissions()[\"pull\"] &&\n\t\t\t\t\tuint(repo.GetStargazersCount()) >= *session.Options.MinimumStars &&\n\t\t\t\t\tuint(repo.GetSize()) < *session.Options.MaximumRepositorySize {\n\n\t\t\t\t\tprocessRepositoryOrGist(repo.GetCloneURL(), repository.Ref, repo.GetStargazersCount(), core.GITHUB_SOURCE)\n\t\t\t\t}\n\t\t\t}\n\t\t}(i)\n\t}\n}\n\nfunc ProcessGists() {\n\tthreadNum := *session.Options.Threads\n\n\tfor i := 0; i < threadNum; i++ {\n\t\tgo func(tid int) {\n\t\t\tfor {\n\t\t\t\tgistUrl := <-session.Gists\n\t\t\t\tprocessRepositoryOrGist(gistUrl, \"\", -1, core.GIST_SOURCE)\n\t\t\t}\n\t\t}(i)\n\t}\n}\n\nfunc ProcessComments() {\n\tthreadNum := *session.Options.Threads\n\n\tfor i := 0; i < threadNum; i++ {\n\t\tgo func(tid int) {\n\t\t\tfor {\n\t\t\t\tcommentBody := <-session.Comments\n\t\t\t\tdir := core.GetTempDir(core.GetHash(commentBody))\n\t\t\t\tioutil.WriteFile(filepath.Join(dir, \"comment.ignore\"), []byte(commentBody), 0644)\n\n\t\t\t\tif !checkSignatures(dir, \"ISSUE\", 0, core.GITHUB_COMMENT) {\n\t\t\t\t\tos.RemoveAll(dir)\n\t\t\t\t}\n\t\t\t}\n\t\t}(i)\n\t}\n}\n\nfunc processRepositoryOrGist(url string, ref string, stars int, source core.GitResourceType) {\n\tvar (\n\t\tmatchedAny bool = false\n\t)\n\n\tdir := core.GetTempDir(core.GetHash(url))\n\t_, err := core.CloneRepository(session, url, ref, dir)\n\n\tif err != nil {\n\t\tsession.Log.Debug(\"[%s] Cloning failed: %s\", url, err.Error())\n\t\tos.RemoveAll(dir)\n\t\treturn\n\t}\n\n\tsession.Log.Debug(\"[%s] Cloning %s in to %s\", url, ref, strings.Replace(dir, *session.Options.TempDirectory, \"\", -1))\n\tmatchedAny = checkSignatures(dir, url, stars, source)\n\tif !matchedAny {\n\t\tos.RemoveAll(dir)\n\t}\n}\n\nfunc checkSignatures(dir string, url string, stars int, source core.GitResourceType) (matchedAny bool) {\n\tfor _, file := range core.GetMatchingFiles(dir) {\n\t\tvar (\n\t\t\tmatches          []string\n\t\t\trelativeFileName string\n\t\t)\n\t\tif strings.Contains(dir, *session.Options.TempDirectory) {\n\t\t\trelativeFileName = strings.Replace(file.Path, *session.Options.TempDirectory, \"\", -1)\n\t\t} else {\n\t\t\trelativeFileName = strings.Replace(file.Path, dir, \"\", -1)\n\t\t}\n\n\t\tif *session.Options.SearchQuery != \"\" {\n\t\t\tqueryRegex := regexp.MustCompile(*session.Options.SearchQuery)\n\t\t\tfor _, match := range queryRegex.FindAllSubmatch(file.Contents, -1) {\n\t\t\t\tmatches = append(matches, string(match[0]))\n\t\t\t}\n\n\t\t\tif matches != nil {\n\t\t\t\tcount := len(matches)\n\t\t\t\tm := strings.Join(matches, \", \")\n\t\t\t\tsession.Log.Important(\"[%s] %d %s for %s in file %s: %s\", url, count, core.Pluralize(count, \"match\", \"matches\"), color.GreenString(\"Search Query\"), relativeFileName, color.YellowString(m))\n\t\t\t\tsession.WriteToCsv([]string{url, \"Search Query\", relativeFileName, m})\n\t\t\t}\n\t\t} else {\n\t\t\tfor _, signature := range session.Signatures {\n\t\t\t\tif matched, part := signature.Match(file); matched {\n\t\t\t\t\tif part == core.PartContents {\n\t\t\t\t\t\tif matches = signature.GetContentsMatches(file.Contents); len(matches) > 0 {\n\t\t\t\t\t\t\tcount := len(matches)\n\t\t\t\t\t\t\tm := strings.Join(matches, \", \")\n\t\t\t\t\t\t\tpublish(&MatchEvent{Source: source, Url: url, Matches: matches, Signature: signature.Name(), File: relativeFileName, Stars: stars})\n\t\t\t\t\t\t\tmatchedAny = true\n\n\t\t\t\t\t\t\tsession.Log.Important(\"[%s] %d %s for %s in file %s: %s\", url, count, core.Pluralize(count, \"match\", \"matches\"), color.GreenString(signature.Name()), relativeFileName, color.YellowString(m))\n\t\t\t\t\t\t\tsession.WriteToCsv([]string{url, signature.Name(), relativeFileName, m})\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif *session.Options.PathChecks {\n\t\t\t\t\t\t\tpublish(&MatchEvent{Source: source, Url: url, Matches: matches, Signature: signature.Name(), File: relativeFileName, Stars: stars})\n\t\t\t\t\t\t\tmatchedAny = true\n\n\t\t\t\t\t\t\tsession.Log.Important(\"[%s] Matching file %s for %s\", url, color.YellowString(relativeFileName), color.GreenString(signature.Name()))\n\t\t\t\t\t\t\tsession.WriteToCsv([]string{url, signature.Name(), relativeFileName, \"\"})\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif *session.Options.EntropyThreshold > 0 && file.CanCheckEntropy() {\n\t\t\t\t\t\t\tscanner := bufio.NewScanner(bytes.NewReader(file.Contents))\n\n\t\t\t\t\t\t\tfor scanner.Scan() {\n\t\t\t\t\t\t\t\tline := scanner.Text()\n\n\t\t\t\t\t\t\t\tif len(line) > 6 && len(line) < 100 {\n\t\t\t\t\t\t\t\t\tentropy := core.GetEntropy(line)\n\n\t\t\t\t\t\t\t\t\tif entropy >= *session.Options.EntropyThreshold {\n\t\t\t\t\t\t\t\t\t\tblacklistedMatch := false\n\n\t\t\t\t\t\t\t\t\t\tfor _, blacklistedString := range session.Config.BlacklistedStrings {\n\t\t\t\t\t\t\t\t\t\t\tif strings.Contains(strings.ToLower(line), strings.ToLower(blacklistedString)) {\n\t\t\t\t\t\t\t\t\t\t\t\tblacklistedMatch = true\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif !blacklistedMatch {\n\t\t\t\t\t\t\t\t\t\t\tpublish(&MatchEvent{Source: source, Url: url, Matches: []string{line}, Signature: \"High entropy string\", File: relativeFileName, Stars: stars})\n\t\t\t\t\t\t\t\t\t\t\tmatchedAny = true\n\n\t\t\t\t\t\t\t\t\t\t\tsession.Log.Important(\"[%s] Potential secret in %s = %s\", url, color.YellowString(relativeFileName), color.GreenString(line))\n\t\t\t\t\t\t\t\t\t\t\tsession.WriteToCsv([]string{url, \"High entropy string\", relativeFileName, line})\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif !matchedAny && len(*session.Options.Local) <= 0 {\n\t\t\tos.Remove(file.Path)\n\t\t}\n\t}\n\treturn\n}\n\nfunc publish(event *MatchEvent) {\n\t// todo: implement a modular plugin system to handle the various outputs (console, live, csv, webhooks, etc)\n\tif len(*session.Options.Live) > 0 {\n\t\tdata, _ := json.Marshal(event)\n\t\thttp.Post(*session.Options.Live, \"application/json\", bytes.NewBuffer(data))\n\t}\n}\n\nfunc main() {\n\tsession.Log.Info(color.HiBlueString(core.Banner))\n\tsession.Log.Info(\"\\t%s\\n\", color.HiCyanString(core.Author))\n\tsession.Log.Info(\"[*] Loaded %s signatures. Using %s worker threads. Temp work dir: %s\\n\", color.BlueString(\"%d\", len(session.Signatures)), color.BlueString(\"%d\", *session.Options.Threads), color.BlueString(*session.Options.TempDirectory))\n\n\tif len(*session.Options.Local) > 0 {\n\t\tsession.Log.Info(\"[*] Scanning local directory: %s - skipping public repository checks...\", color.BlueString(*session.Options.Local))\n\t\trc := 0\n\t\tif checkSignatures(*session.Options.Local, *session.Options.Local, -1, core.LOCAL_SOURCE) {\n\t\t\trc = 1\n\t\t} else {\n\t\t\tsession.Log.Info(\"[*] No matching secrets found in %s!\", color.BlueString(*session.Options.Local))\n\t\t}\n\t\tos.Exit(rc)\n\t} else {\n\t\tif *session.Options.SearchQuery != \"\" {\n\t\t\tsession.Log.Important(\"Search Query '%s' given. Only returning matching results.\", *session.Options.SearchQuery)\n\t\t}\n\n\t\tgo core.GetRepositories(session)\n\t\tgo ProcessRepositories()\n\t\tgo ProcessComments()\n\n\t\tif *session.Options.ProcessGists {\n\t\t\tgo core.GetGists(session)\n\t\t\tgo ProcessGists()\n\t\t}\n\n\t\tspinny := core.ShowSpinner()\n\t\tselect {}\n\t\tspinny()\n\t}\n}\n"
        },
        {
          "name": "www",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}