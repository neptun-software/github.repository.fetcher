{
  "metadata": {
    "timestamp": 1736562147686,
    "page": 957,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "breejs/bree",
      "stars": 3091,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".commitlintrc.js",
          "type": "blob",
          "size": 0.076171875,
          "content": "module.exports = {\n  \"extends\": [\n    \"@commitlint/config-conventional\"\n  ]\n}\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1435546875,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n"
        },
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.0068359375,
          "content": "!.*.js\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1357421875,
          "content": ".DS_Store\n*.log\n.idea\nnode_modules\ncoverage\n.nyc_output\nlocales/\npackage-lock.json\nyarn.lock\nexamples/**/dist\n\nThumbs.db\ntmp/\ntemp/\n*.lcov\n"
        },
        {
          "name": ".husky",
          "type": "tree",
          "content": null
        },
        {
          "name": ".lintstagedrc.js",
          "type": "blob",
          "size": 0.1962890625,
          "content": "module.exports = {\n  '*.md,!test/**/*.md': [\n    (filenames) => filenames.map((filename) => `remark ${filename} -qfo`)\n  ],\n  './package.json': 'fixpack',\n  '*.js': 'xo --fix',\n  '*.ts': 'xo --fix'\n};\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": ".prettierrc.js",
          "type": "blob",
          "size": 0.09375,
          "content": "module.exports = {\n  \"singleQuote\": true,\n  \"bracketSpacing\": true,\n  \"trailingComma\": \"none\"\n}\n"
        },
        {
          "name": ".remarkignore",
          "type": "blob",
          "size": 0.0361328125,
          "content": "test/snapshots/**/*.md\nexamples/**/*\n"
        },
        {
          "name": ".remarkrc.js",
          "type": "blob",
          "size": 0.0498046875,
          "content": "module.exports = {\n  plugins: ['preset-github']\n};\n"
        },
        {
          "name": ".xo-config.js",
          "type": "blob",
          "size": 1.2314453125,
          "content": "module.exports = {\n  prettier: true,\n  space: true,\n  extends: ['xo-lass'],\n  ignore: ['config.js'],\n  rules: {\n    'capitalized-comments': 'off',\n    'unicorn/catch-error-name': 'off',\n    'unicorn/require-post-message-target-origin': 'off',\n    'unicorn/prefer-node-protocol': 'warn',\n    'unicorn/prefer-top-level-await': 'warn',\n    'unicorn/prefer-event-target': 'off',\n    'unicorn/no-empty-file': 'warn',\n    'unicorn/no-process-exit': 'warn',\n    'unicorn/prefer-logical-operator-over-ternary': 'warn'\n  },\n  overrides: [\n    {\n      files: '**/*.mjs',\n      parserOptions: {\n        sourceType: 'module'\n      }\n    },\n    {\n      files: 'test/jobs/*.js',\n      rules: {\n        'unicorn/no-process-exit': 'off'\n      }\n    },\n    {\n      files: ['**/*.d.ts'],\n      rules: {\n        'no-unused-vars': 'off',\n        '@typescript-eslint/naming-convention': 'off',\n        'no-redeclare': 'off',\n        '@typescript-eslint/no-redeclare': 'off'\n      }\n    },\n    {\n      files: ['**/*.test-d.ts'],\n      rules: {\n        '@typescript-eslint/no-unsafe-call': 'off',\n        '@typescript-eslint/no-confusing-void-expression': 'off', // Conflicts with `expectError` assertion.\n        '@typescript-eslint/no-unsafe-assignment': 'off'\n      }\n    }\n  ]\n};\n"
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.0166015625,
          "content": "jobscheduler.net\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0927734375,
          "content": "MIT License\n\nCopyright (c) 2020 Nick Baugh <niftylettuce@gmail.com> (http://niftylettuce.com/)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 41.5263671875,
          "content": "<h1 align=\"center\">\n  <a href=\"https://jobscheduler.net\"><img src=\"https://d1i8ikybhfrv4r.cloudfront.net/bree/bree.png\" alt=\"bree\" /></a>\n</h1>\n<div align=\"center\">\n  <a href=\"https://github.com/breejs/bree/actions/workflows/ci.yml\"><img src=\"https://github.com/breejs/bree/actions/workflows/ci.yml/badge.svg\" alt=\"build status\" /></a>\n  <a href=\"https://github.com/sindresorhus/xo\"><img src=\"https://img.shields.io/badge/code_style-XO-5ed9c7.svg\" alt=\"code style\" /></a>\n  <a href=\"https://github.com/prettier/prettier\"><img src=\"https://img.shields.io/badge/styled_with-prettier-ff69b4.svg\" alt=\"styled with prettier\" /></a>\n  <a href=\"https://lass.js.org\"><img src=\"https://img.shields.io/badge/made_with-lass-95CC28.svg\" alt=\"made with lass\" /></a>\n  <a href=\"LICENSE\"><img src=\"https://img.shields.io/github/license/breejs/bree.svg\" alt=\"license\" /></a>\n  <a href=\"https://npm.im/bree\"><img src=\"https://img.shields.io/npm/dt/bree.svg\" alt=\"npm downloads\" /></a>\n</div>\n<br />\n<div align=\"center\">\n  Bree is the best job scheduler for <a href=\"https://nodejs.org\">Node.js</a> and JavaScript with <a href=\"https://en.wikipedia.org/wiki/Cron\">cron</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">dates</a>, <a href=\"https://github.com/vercel/ms\">ms</a>, <a href=\"https://github.com/breejs/later\">later</a>, and <a href=\"https://github.com/agenda/human-interval\">human-friendly</a> support.\n</div>\n<hr />\n<div align=\"center\">\n  Works in Node v12.17.0+, uses <a href=\"https://nodejs.org/api/worker_threads.html\">worker threads</a> (Node.js) to spawn sandboxed processes, and supports <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async/await</a>, <a href=\"https://github.com/sindresorhus/p-retry\">retries</a>, <a href=\"https://github.com/sindresorhus/p-throttle\">throttling</a>, <a href=\"#concurrency\">concurrency</a>, and <a href=\"#cancellation-retries-stalled-jobs-and-graceful-reloading\">cancelable jobs with graceful shutdown</a>.  Simple, fast, and lightweight.  <strong>Made for <a href=\"https://forwardemail.net\">Forward Email</a> and <a href=\"https://lad.js.org\">Lad</a></strong>.\n</div>\n\n\n## Table of Contents\n\n* [Foreword](#foreword)\n* [Install](#install)\n* [Upgrading](#upgrading)\n* [Usage and Examples](#usage-and-examples)\n  * [ECMAScript modules (ESM)](#ecmascript-modules-esm)\n  * [CommonJS (CJS)](#commonjs-cjs)\n* [Instance Options](#instance-options)\n* [Job Options](#job-options)\n* [Job Interval and Timeout Values](#job-interval-and-timeout-values)\n* [Listening for events](#listening-for-events)\n* [Custom error/message handling](#custom-errormessage-handling)\n* [Cancellation, Retries, Stalled Jobs, and Graceful Reloading](#cancellation-retries-stalled-jobs-and-graceful-reloading)\n* [Interval, Timeout, Date, and Cron Validation](#interval-timeout-date-and-cron-validation)\n* [Writing jobs with Promises and async-await](#writing-jobs-with-promises-and-async-await)\n* [Callbacks, Done, and Completion States](#callbacks-done-and-completion-states)\n* [Long-running jobs](#long-running-jobs)\n* [Complex timeouts and intervals](#complex-timeouts-and-intervals)\n* [Custom Worker Options](#custom-worker-options)\n* [Using functions for jobs](#using-functions-for-jobs)\n* [Typescript and Usage with Bundlers](#typescript-and-usage-with-bundlers)\n* [Concurrency](#concurrency)\n* [Plugins](#plugins)\n  * [Available Plugins](#available-plugins)\n  * [Creating plugins for Bree](#creating-plugins-for-bree)\n* [Real-world usage](#real-world-usage)\n* [Contributors](#contributors)\n* [License](#license)\n\n\n## Foreword\n\nBree was created to give you fine-grained control with simplicity, and has built-in support for workers, sandboxed processes, graceful reloading, cron jobs, dates, human-friendly time representations, and much more.\n\nWe recommend you to query a persistent database in your jobs, to prevent specific operations from running more than once.\n\nBree does not force you to use an additional database layer of [Redis][] or [MongoDB][] to manage job state.\n\nIn doing so, you should manage boolean job states yourself using queries.  For instance, if you have to send a welcome email to users, only send a welcome email to users that do not have a Date value set yet for `welcome_email_sent_at`.\n\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install bree\n```\n\n[yarn][]:\n\n```sh\nyarn add bree\n```\n\n\n## Upgrading\n\nTo see details about upgrading from the last major version, please see [UPGRADING.md](https://github.com/breejs/bree/blob/master/UPGRADING.md).\n\n> **IMPORTANT:** [Bree v9.0.0](https://github.com/breejs/bree/releases/tag/v9.0.0) has several breaking changes, please see [UPGRADING.md](https://github.com/breejs/bree/blob/master/UPGRADING.md) for more insight.\n\n> **NOTE:** [Bree v6.5.0](https://github.com/breejs/bree/releases/tag/v6.5.0) is the last version to support Node v10 and browsers.\n\n\n## Usage and Examples\n\nThe example below assumes that you have a directory `jobs` in the root of the directory from which you run this example.  For example, if the example below is at `/path/to/script.js`, then `/path/to/jobs/` must also exist as a directory.  If you wish to disable this feature, then pass `root: false` as an option.\n\nInside this `jobs` directory are individual scripts which are run using [Workers][] per optional timeouts, and additionally, an optional interval or cron expression.  The example below contains comments, which help to clarify how this works.\n\nThe option `jobs` passed to a new instance of `Bree` (as shown below) is an Array.  It contains values which can either be a String (name of a job in the `jobs` directory, which is run on boot) OR it can be an Object with `name`, `path`, `timeout`, and `interval` properties.  If you do not supply a `path`, then the path is created using the root directory (defaults to `jobs`) in combination with the `name`.  If you do not supply values for `timeout` and/nor `interval`, then these values are defaulted to `0` (which is the default for both, see [index.js](https://github.com/breejs/bree/blob/master/src/index.js) for more insight into configurable default options).\n\nWe have also documented all [Instance Options](#instance-options) and [Job Options](#job-options) in this README below.  Be sure to read those sections so you have a complete understanding of how Bree works.\n\n### ECMAScript modules (ESM)\n\n```js\n// app.mjs\n\nimport Bree from 'bree';\n\nconst bree = new Bree({\n  // ... (see below) ...\n});\n\n// top-level await supported in Node v14.8+\nawait bree.start();\n\n// ... (see below) ...\n```\n\n**Please reference the [#CommonJS](#commonjs-cjs) example below for more insight and options.**\n\n### CommonJS (CJS)\n\n```js\n// app.js\n\nconst path = require('path');\n\n// optional\nconst ms = require('ms');\nconst dayjs = require('dayjs');\nconst Graceful = require('@ladjs/graceful');\nconst Cabin = require('cabin');\n\n// required\nconst Bree = require('bree');\n\n//\n// NOTE: see the \"Instance Options\" section below in this README\n// for the complete list of options and their defaults\n//\nconst bree = new Bree({\n  //\n  // NOTE: by default the `logger` is set to `console`\n  // however we recommend you to use CabinJS as it\n  // will automatically add application and worker metadata\n  // to your log output, and also masks sensitive data for you\n  // <https://cabinjs.com>\n  //\n  // NOTE: You can also pass `false` as `logger: false` to disable logging\n  //\n  logger: new Cabin(),\n\n  //\n  // NOTE: instead of passing this Array as an option\n  // you can create a `./jobs/index.js` file, exporting\n  // this exact same array as `module.exports = [ ... ]`\n  // doing so will allow you to keep your job configuration and the jobs\n  // themselves all in the same folder and very organized\n  //\n  // See the \"Job Options\" section below in this README\n  // for the complete list of job options and configurations\n  //\n  jobs: [\n    // runs `./jobs/foo.js` on start\n    'foo',\n\n    // runs `./jobs/foo-bar.js` on start\n    {\n      name: 'foo-bar'\n    },\n\n    // runs `./jobs/some-other-path.js` on start\n    {\n      name: 'beep',\n      path: path.join(__dirname, 'jobs', 'some-other-path')\n    },\n\n    // runs `./jobs/worker-1.js` on the last day of the month\n    {\n      name: 'worker-1',\n      interval: 'on the last day of the month'\n    },\n\n    // runs `./jobs/worker-2.js` every other day\n    {\n      name: 'worker-2',\n      interval: 'every 2 days'\n    },\n\n    // runs `./jobs/worker-3.js` at 10:15am and 5:15pm every day except on Tuesday\n    {\n      name: 'worker-3',\n      interval: 'at 10:15 am also at 5:15pm except on Tuesday'\n    },\n\n    // runs `./jobs/worker-4.js` at 10:15am every weekday\n    {\n      name: 'worker-4',\n      cron: '15 10 ? * *',\n      cronValidate: {\n        override: {\n          useBlankDay: true\n        }\n      }\n    },\n\n    // runs `./jobs/worker-5.js` on after 10 minutes have elapsed\n    {\n      name: 'worker-5',\n      timeout: '10m'\n    },\n\n    // runs `./jobs/worker-6.js` after 1 minute and every 5 minutes thereafter\n    {\n      name: 'worker-6',\n      timeout: '1m',\n      interval: '5m'\n      // this is unnecessary but shows you can pass a Number (ms)\n      // interval: ms('5m')\n    },\n\n    // runs `./jobs/worker-7.js` after 3 days and 4 hours\n    {\n      name: 'worker-7',\n      // this example uses `human-interval` parsing\n      timeout: '3 days and 4 hours'\n    },\n\n    // runs `./jobs/worker-8.js` at midnight (once)\n    {\n      name: 'worker-8',\n      timeout: 'at 12:00 am'\n    },\n\n    // runs `./jobs/worker-9.js` every day at midnight\n    {\n      name: 'worker-9',\n      interval: 'at 12:00 am'\n    },\n\n    // runs `./jobs/worker-10.js` at midnight on the 1st of every month\n    {\n      name: 'worker-10',\n      cron: '0 0 1 * *'\n    },\n\n    // runs `./jobs/worker-11.js` at midnight on the last day of month\n    {\n      name: 'worker-11',\n      cron: '0 0 L * *',\n      cronValidate: {\n        useLastDayOfMonth: true\n      }\n    },\n\n    // runs `./jobs/worker-12.js` at a specific Date (e.g. in 3 days)\n    {\n      name: 'worker-12',\n      // <https://github.com/iamkun/dayjs>\n      date: dayjs().add(3, 'days').toDate()\n      // you can also use momentjs\n      // <https://momentjs.com/>\n      // date: moment('1/1/20', 'M/D/YY').toDate()\n      // you can pass Date instances (if it's in the past it will not get run)\n      // date: new Date()\n    },\n\n    // runs `./jobs/worker-13.js` on start and every 2 minutes\n    {\n      name: 'worker-13',\n      interval: '2m'\n    },\n\n    // runs `./jobs/worker-14.js` on start with custom `new Worker` options (see below)\n    {\n      name: 'worker-14',\n      // <https://nodejs.org/api/worker_threads.html#worker_threads_new_worker_filename_options>\n      worker: {\n        workerData: {\n          foo: 'bar',\n          beep: 'boop'\n        }\n      }\n    },\n\n    // runs `./jobs/worker-15.js` **NOT** on start, but every 2 minutes\n    {\n      name: 'worker-15',\n      timeout: false, // <-- specify `false` here to prevent default timeout (e.g. on start)\n      interval: '2m'\n    },\n\n    // runs `./jobs/worker-16.js` on January 1st, 2022\n    // and at midnight on the 1st of every month thereafter\n    {\n      name: 'worker-16',\n      date: dayjs('1-1-2022', 'M-D-YYYY').toDate(),\n      cron: '0 0 1 * *'\n    }\n  ]\n});\n\n// handle graceful reloads, pm2 support, and events like SIGHUP, SIGINT, etc.\nconst graceful = new Graceful({ brees: [bree] });\ngraceful.listen();\n\n// start all jobs (this is the equivalent of reloading a crontab):\n(async () => {\n  await bree.start();\n})();\n\n/*\n// start only a specific job:\n(async () => {\n  await bree.start('foo');\n})();\n\n// stop all jobs\nbree.stop();\n\n// stop only a specific job:\nbree.stop('beep');\n\n// run all jobs (this does not abide by timeout/interval/cron and spawns workers immediately)\nbree.run();\n\n// run a specific job (...)\nbree.run('beep');\n\n(async () => {\n  // add a job array after initialization:\n  const added = await bree.add(['boop']); // will return array of added jobs\n  // this must then be started using one of the above methods\n\n  // add a job after initialization:\n  await bree.add('boop');\n  // this must then be started using one of the above methods\n})();\n\n\n// remove a job after initialization:\nbree.remove('boop');\n*/\n```\n\nFor more examples - including setting up bree with TypeScript, ESModules, and implementing an Email Queue, see the [examples](./examples) folder.\n\nFor a more complete demo using express see: [Bree Express Demo](https://github.com/breejs/express-example)\n\n\n## Instance Options\n\nHere is the full list of options and their defaults.  See [src/index.js](https://github.com/breejs/bree/blob/master/src/index.js) for more insight if necessary.\n\n| Property                | Type     | Default Value          | Description                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| ----------------------- | -------- | ---------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `logger`                | Object   | `console`              | This is the default logger.  **We recommend using [Cabin][cabin]** instead of using `console` as your default logger.  Set this value to `false` to disable logging entirely (uses noop function)                                                                                                                                                                                                                                                        |\n| `root`                  | String   | `path.resolve('jobs')` | Resolves a jobs folder relative to where the project is ran (the directory you call `node` in). Set this value to `false` to prevent requiring a root directory of jobs (e.g. if your jobs are not all in one directory). Set this to `path.join(__dirname, 'jobs')` to keep your jobs directory relative to the file where Bree is set up.                                                                                                              |\n| `silenceRootCheckError` | Boolean  | `false`                | Silences errors from requiring the root folder. Set this to `false` if you do not want to see errors from this operation                                                                                                                                                                                                                                                                                                                                 |\n| `doRootCheck`           | Boolean  | `true`                 | Attempts to `require` the root directory, when `jobs` is empty or `null`. Set this to `false` to prevent requiring the root directory                                                                                                                                                                                                                                                                                                                    |\n| `removeCompleted`       | Boolean  | `false`                | Removes job upon completion. Set this to `true` in order to remove jobs from the array upon completion.                                                                                                                                                                                                                                                                                                                                                  |\n| `timeout`               | Number   | `0`                    | Default timeout for jobs (e.g. a value of `0` means that jobs will start on boot by default unless a job has a property of `timeout` or `interval` defined.  Set this to `false` if you do not wish for a default value to be set for jobs. **This value does not apply to jobs with a property of `date`.**                                                                                                                                             |\n| `interval`              | Number   | `0`                    | Default interval for jobs (e.g. a value of `0` means that there is no interval, and a value greater than zero indicates a default interval will be set with this value).  **This value does not apply to jobs with a property of `cron`**.                                                                                                                                                                                                               |\n| `jobs`                  | Array    | `[]`                   | Defaults to an empty Array, but if the `root` directory has a `index.js` file, then it will be used.  This allows you to keep your jobs and job definition index in the same place.  See [Job Options](#job-options) below, and [Usage and Examples](#usage-and-examples) above for more insight.                                                                                                                                                        |\n| `hasSeconds`            | Boolean  | `false`                | This value is passed to `later` for parsing jobs, and can be overridden on a per job basis.  See [later cron parsing](https://breejs.github.io/later/parsers.html#cron) documentation for more insight. Note that setting this to `true` will automatically set `cronValidate` defaults to have `{ preset: 'default', override: { useSeconds: true } }`                                                                                                  |\n| `cronValidate`          | Object   | `{}`                   | This value is passed to `cron-validate` for validation of cron expressions.  See the [cron-validate](https://github.com/Airfooox/cron-validate) documentation for more insight.                                                                                                                                                                                                                                                                          |\n| `closeWorkerAfterMs`    | Number   | `0`                    | If you set a value greater than `0` here, then it will terminate workers after this specified time (in milliseconds).  **As of v6.0.0, workers now terminate after they have been signaled as \"online\" (as opposed to previous versions which did not take this into account and started the timer when jobs were initially \"run\").**  By default there is no termination done, and jobs can run for infinite periods of time.                           |\n| `defaultRootIndex`      | String   | `index.js`             | This value should be the file name inside of the `root` directory option (if you pass a `root` directory or use the default `root` String value (and your index file name is different than `index.js`).                                                                                                                                                                                                                                                 |\n| `defaultExtension`      | String   | `js`                   | This value can either be `js` or `mjs`.  The default is `js`, and is the default extension added to jobs that are simply defined with a name and without a path.  For example, if you define a job `test`, then it will look for `/path/to/root/test.js` as the file used for workers.                                                                                                                                                                   |\n| `acceptedExtensions`    | Array    | `['.js', '.mjs']`      | This defines all of the accepted extensions for file validation and job creation. Please note if you add to this list you must override the `createWorker` function to properly handle the new file types.                                                                                                                                                                                                                                               |\n| `worker`                | Object   | `{}`                   | These are default options to pass when creating a `new Worker` instance.  See the [Worker class](https://nodejs.org/api/worker_threads.html#worker_threads_new_worker_filename_options) documentation for more insight.                                                                                                                                                                                                                                  |\n| `outputWorkerMetadata`  | Boolean  | `false`                | By default worker metadata is not passed to the second Object argument of `logger`.  However if you set this to `true`, then `logger` will be invoked internally with two arguments (e.g. `logger.info('...', { worker: ... })`).  This `worker` property contains `isMainThread` (Boolean), `resourceLimits` (Object), and `threadId` (String) properties; all of which correspond to [Workers][] metadata.  This can be overridden on a per job basis. |\n| `errorHandler`          | Function | `null`                 | Set this function to receive a callback when an error is encountered during worker execution (e.g. throws an exception) or when it exits with non-zero code (e.g. `process.exit(1)`). The callback receives two parameters `error` and `workerMetadata`. Important note, when this callback is present default error logging will not be executed.                                                                                                       |\n| `workerMessageHandler`  | Function | `null`                 | Set this function to receive a callback when a worker sends a message through [parentPort.postMessage](https://nodejs.org/docs/latest-v14.x/api/worker_threads.html#worker_threads_port_postmessage_value_transferlist). The callback receives at least two parameters `name` (of the worker) and `message` (coming from `postMessage`), if `outputWorkerMetadata` is enabled additional metadata will be sent to this handler.                          |\n\n\n## Job Options\n\nSee [Interval, Timeout, Date, and Cron Validate](#interval-timeout-date-and-cron-validation) below for more insight besides this table:\n\n| Property               | Type                               | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| ---------------------- | ---------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `name`                 | String                             | The name of the job.  This should match the base file path (e.g. `foo` if `foo.js` is located at `/path/to/jobs/foo.js`) unless `path` option is specified.  A value of `index`, `index.js`, and `index.mjs` are reserved values and cannot be used here.                                                                                                                                                                                                                                                       |\n| `path`                 | String                             | The path of the job or function used for spawning a new [Worker][workers] with.  If not specified, then it defaults to the value for `name` plus the default file extension specified under [Instance Options](#instance-options).                                                                                                                                                                                                                                                                              |\n| `timeout`              | Number, Object, String, or Boolean | Sets the duration in milliseconds before the job starts (it overrides the default inherited `timeout` as set in [Instance Options](#instance-options).  A value of `0` indicates it will start immediately.  This value can be a Number, String, or a Boolean of `false` (which indicates it will NOT inherit the default `timeout` from [Instance Options](#instance-options)).  See [Job Interval and Timeout Values](#job-interval-and-timeout-values) below for more insight into how this value is parsed. |\n| `interval`             | Number, Object, or String          | Sets the duration in milliseconds for the job to repeat itself, otherwise known as its interval (it overrides the default inherited `interval` as set in [Instance Options](#instance-options)).  A value of `0` indicates it will not repeat and there will be no interval.  If the value is greater than `0` then this value will be used as the interval.  See [Job Interval and Timeout Values](#job-interval-and-timeout-values) below for more insight into how this value is parsed.                     |\n| `date`                 | Date                               | This must be a valid JavaScript Date (we use `instance of Date` for comparison).  If this value is in the past, then it is not run when jobs are started (or run manually).  We recommend using [dayjs][] for creating this date, and then formatting it using the `toDate()` method (e.g. `dayjs().add('3, 'days').toDate()`).  You could also use [moment][] or any other JavaScript date library, as long as you convert the value to a Date instance here.                                                  |\n| `cron`                 | String                             | A cron expression to use as the job's interval, which is validated against [cron-validate][] and parsed by [later][].                                                                                                                                                                                                                                                                                                                                                                                           |\n| `hasSeconds`           | Boolean                            | Overrides the [Instance Options](#instance-options) `hasSeconds` property if set.  Note that setting this to `true` will automatically set `cronValidate` defaults to have `{ preset: 'default', override: { useSeconds: true } }`                                                                                                                                                                                                                                                                              |\n| `cronValidate`         | Object                             | Overrides the [Instance Options](#instance-options) `cronValidate` property if set.                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| `closeWorkerAfterMs`   | Number                             | Overrides the [Instance Options](#instance-options) `closeWorkerAfterMs` property if set.                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| `worker`               | Object                             | Overrides the [Instance Options](#instance-options) `worker` property if set.                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| `outputWorkerMetadata` | Boolean                            | Overrides the [Instance Options](#instance-options) `outputWorkerMetadata` property if set.                                                                                                                                                                                                                                                                                                                                                                                                                     |\n\n\n## Job Interval and Timeout Values\n\nThese values can include Number, Object, and String variable types:\n\n* Number values indicates the number of milliseconds for the timeout or interval\n* Object values must be a [later][] schedule object value (e.g. `later.parse.cron('15 10 * * ? *'))`)\n* String values can be either a [later][], [human-interval][], or [ms][] String values (e.g. [later][] supports Strings such as `every 5 mins`, [human-interval][] supports Strings such as `3 days and 4 hours`, and [ms][] supports Strings such as `4h` for four hours)\n\n\n## Listening for events\n\nBree extends from [EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter) and emits two events:\n\n* `worker created` with an argument of `name`\n* `worker deleted` with an argument of `name`\n\nIf you'd like to know when your workers are created (or deleted), you can do so through this example:\n\n```js\nbree.on('worker created', (name) => {\n  console.log('worker created', name);\n  console.log(bree.workers.get(name));\n});\n\nbree.on('worker deleted', (name) => {\n  console.log('worker deleted', name);\n  console.log(!bree.worker.has(name));\n});\n```\n\n\n## Custom error/message handling\n\nIf you'd like to override default behavior for worker error/message handling, provide a callback function as `errorHandler` or `workerMessageHandler` parameter when creating a Bree instance.\n\n> **NOTE:** Any `console.log` calls, from within the worker,  will not be sent to `stdout`/`stderr` until the main thread is available. Furthermore, any `console.log` calls, from within the worker, will not be sent if the process is terminated before the message is printed. You should use `parentPort.postMessage()` alongside `errorHandler` or `workerMessageHandler` to print to `stdout`/`stderr` during worker execution. This is a known [bug](https://github.com/nodejs/node/issues/30491) for workers.\n\nAn example use-case. If you want to call an external service to record an error (like Honeybadger, Sentry, etc.) along with logging the error internally. You can do so with:\n\n```js\nconst logger = ('../path/to/logger');\nconst errorService = ('../path/to/error-service');\n\nnew Bree({\n  jobs: [\n    {\n      name: 'job that sometimes throws errors',\n      path: jobFunction\n    }\n  ],\n  errorHandler: (error, workerMetadata) => {\n    // workerMetadata will be populated with extended worker information only if\n    // Bree instance is initialized with parameter `workerMetadata: true`\n    if (workerMetadata.threadId) {\n      logger.info(`There was an error while running a worker ${workerMetadata.name} with thread ID: ${workerMetadata.threadId}`)\n    } else {\n      logger.info(`There was an error while running a worker ${workerMetadata.name}`)\n    }\n\n    logger.error(error);\n    errorService.captureException(error);\n  }\n});\n```\n\n\n## Cancellation, Retries, Stalled Jobs, and Graceful Reloading\n\nWe recommend that you listen for \"cancel\" event in your worker paths.  Doing so will allow you to handle graceful cancellation of jobs.  For example, you could use [p-cancelable][]\n\nHere's a quick example of how to do that (e.g. `./jobs/some-worker.js`):\n\n```js\n// <https://nodejs.org/api/worker_threads.html>\nconst { parentPort } = require('worker_threads');\n\n// ...\n\nfunction cancel() {\n  // do cleanup here\n  // (if you're using @ladjs/graceful, the max time this can run by default is 5s)\n\n  // send a message to the parent that we're ready to terminate\n  // (you could do `process.exit(0)` or `process.exit(1)` instead if desired\n  // but this is a bit of a cleaner approach for worker termination\n  if (parentPort) parentPort.postMessage('cancelled');\n  else process.exit(0);\n}\n\nif (parentPort)\n  parentPort.once('message', message => {\n    if (message === 'cancel') return cancel();\n  });\n```\n\nIf you'd like jobs to retry, simply wrap your usage of promises with [p-retry][].\n\nWe leave it up to you to have as much fine-grained control as you wish.\n\nSee [@ladjs/graceful][lad-graceful] for more insight into how this package works.\n\n\n## Interval, Timeout, Date, and Cron Validation\n\nIf you need help writing cron expressions, you can reference [crontab.guru](https://crontab.guru/).\n\nWe support [later][], [human-interval][], or [ms][] String values for both `timeout` and `interval`.\n\nIf you pass a `cron` property, then it is validated against [cron-validate][].\n\nYou can pass a Date as the `date` property, but you cannot combine both `date` and `timeout`.\n\nIf you do pass a Date, then it is only run if it is in the future.\n\nSee [Job Interval and Timeout Values](#job-interval-and-timeout-values) above for more insight.\n\n\n## Writing jobs with Promises and async-await\n\nIf jobs are running with Node pre-[v14.8.0](https://nodejs.org/en/blog/release/v14.8.0/), which [enables top-level async-await](https://github.com/nodejs/node/commit/62bb2e757f) support, here is the working alternative:\n\n```js\nconst { parentPort } = require('worker_threads');\n\nconst delay = require('delay');\nconst ms = require('ms');\n\n(async () => {\n  // wait for a promise to finish\n  await delay(ms('10s'));\n\n  // signal to parent that the job is done\n  if (parentPort) parentPort.postMessage('done');\n  else process.exit(0);\n})();\n```\n\n\n## Callbacks, Done, and Completion States\n\nTo close out the worker and signal that it is done, you can simply `parentPort.postMessage('done');` and/or `process.exit(0)`.\n\nWhile writing your jobs (which will run in [worker][workers] threads), you should do one of the following:\n\n* Signal to the main thread that the process has completed by sending a \"done\" message (per the example above in [Writing jobs with Promises and async-await](#writing-jobs-with-promises-and-async-await))\n* Exit the process if there is NOT an error with code `0` (e.g. `process.exit(0);`)\n* Throw an error if an error occurs (this will bubble up to the worker event error listener and terminate it)\n* Exit the process if there IS an error with code `1` (e.g. `process.exit(1)`)\n\n\n## Long-running jobs\n\nIf a job is already running, a new worker thread will not be spawned, instead `logger.error` will be invoked with an error message (no error will be thrown, don't worry).  This is to prevent bad practices from being used.  If you need something to be run more than one time, then make the job itself run the task multiple times.  This approach gives you more fine-grained control.\n\nBy default, workers run indefinitely and are not closed until they exit (e.g. via `process.exit(0)` or `process.exit(1)`, OR send to the parent port a \"close\" message, which will subsequently call `worker.close()` to close the worker thread.\n\nIf you wish to specify a maximum time (in milliseconds) that a worker can run, then pass `closeWorkerAfterMs` (Number) either as a default option when creating a `new Bree()` instance (e.g. `new Bree({ closeWorkerAfterMs: ms('10s') })`) or on a per-job configuration, e.g. `{ name: 'beep', closeWorkerAfterMs: ms('5m') }`.\n\nAs of v6.0.0 when you pass `closeWorkerAfterMs`, the timer will start once the worker is signaled as \"online\" (as opposed to previous versions which did not take this into account).\n\n\n## Complex timeouts and intervals\n\nSince we use [later][], you can pass an instance of `later.parse.recur`, `later.parse.cron`, or `later.parse.text` as the `timeout` or `interval` property values (e.g. if you need to construct something manually).\n\nYou can also use [dayjs][] to construct dates (e.g. from now or a certain date) to millisecond differences using `dayjs().diff(new Date(), 'milliseconds')`.  You would then pass that returned Number value as `timeout` or `interval` as needed.\n\n\n## Custom Worker Options\n\nYou can pass a default worker configuration object as `new Bree({ worker: { ... } });`.\n\nThese options are passed to the `options` argument when we internally invoke `new Worker(path, options)`.\n\nAdditionally, you can pass custom worker options on a per-job basis through a `worker` property Object on the job definition.\n\nSee [complete documentation](https://nodejs.org/api/worker_threads.html#worker_threads_new_worker_filename_options) for options (but you usually don't have to modify these).\n\n\n## Using functions for jobs\n\nIt is highly recommended to use files instead of functions. However, sometimes it is necessary to use functions.\n\nYou can pass a function to be run as a job:\n\n```js\nnew Bree({ jobs: [someFunction] });\n```\n\n(or)\n\n```js\nnew Bree({\n  jobs: [\n    {\n      name: 'job with function',\n      path: someFunction\n    }\n  ]\n});\n```\n\nThe function will be run as if it's in its own file, therefore no variables or dependencies will be shared from the local context by default.\n\nYou should be able to pass data via `worker.workerData` (see [Custom Worker Options](#custom-worker-options)).\n\nNote that you cannot pass a built-in nor bound function.\n\n\n## Typescript and Usage with Bundlers\n\nWhen working with a bundler or a tool that transpiles your code in some form or another, we recommend that your bundler is set up in a way that transforms both your application code and your jobs. Because your jobs are in their own files and are run in their own separate threads, they will not be part of your applications dependency graph and need to be setup as their own entry points. You need to ensure you have configured your tool to bundle your jobs into a jobs folder and keep them properly relative to your entry point folder.\n\nWe recommend setting the `root` instance options to `path.join(__dirname,'jobs')` so that bree searches for your jobs folder relative to the file being ran. (by default it searches for jobs relative to where `node` is invoked). We recommend treating each job as an entry point and running all jobs through the same transformations as your app code.\n\nAfter an example transformation - you should expect the output in your `dist` folder to look like:\n\n```sh\n- dist\n  |-jobs\n    |-job.js\n  |-index.js\n```\n\nFor some example TypeScript set ups - see the [examples folder](https://github.com/breejs/bree/tree/master/examples).\n\nFor another alternative also see the [@breejs/ts-worker](https://github.com/breejs/ts-worker) plugin.\n\n\n## Concurrency\n\nWe recommend using the following packages in your workers for handling concurrency:\n\n* <https://github.com/sindresorhus/p-all>\n* <https://github.com/sindresorhus/p-limit>\n* <https://github.com/sindresorhus/p-queue>\n* <https://github.com/sindresorhus/p-map>\n\n\n## Plugins\n\nPlugins can be added to Bree using a similar method to [Day.js](https://day.js.org/)\n\nTo add a plugin use the following method:\n\n```js\nBree.extend(plugin, options);\n```\n\n### Available Plugins\n\n* [API](https://github.com/breejs/api)\n* [TypeScript Worker](https://github.com/breejs/ts-worker)\n\n### Creating plugins for Bree\n\nPlugins should be a function that recieves an `options` object and the `Bree` class:\n\n```js\n  const plugin = (options, Bree) => {\n    /* plugin logic */\n  };\n```\n\n\n## Real-world usage\n\nMore detailed examples can be found in [Forward Email][forward-email], [Lad][], and [Ghost][ghost].\n\n\n## Contributors\n\n| Name             | Website                           |\n| ---------------- | --------------------------------- |\n| **Nick Baugh**   | <http://niftylettuce.com/>        |\n| **shadowgate15** | <https://github.com/shadowgate15> |\n\n\n## License\n\n[MIT](LICENSE) © [Nick Baugh](http://niftylettuce.com/)\n\n\n##\n\n<a href=\"#\"><img src=\"https://d1i8ikybhfrv4r.cloudfront.net/bree/footer.png\" alt=\"#\" /></a>\n\n[ms]: https://github.com/vercel/ms\n\n[human-interval]: https://github.com/agenda/human-interval\n\n[npm]: https://www.npmjs.com/\n\n[yarn]: https://yarnpkg.com/\n\n[workers]: https://nodejs.org/api/worker_threads.html\n\n[lad]: https://lad.js.org\n\n[p-retry]: https://github.com/sindresorhus/p-retry\n\n[p-cancelable]: https://github.com/sindresorhus/p-cancelable\n\n[later]: https://breejs.github.io/later/parsers.html\n\n[cron-validate]: https://github.com/Airfooox/cron-validate\n\n[forward-email]: https://github.com/forwardemail/forwardemail.net\n\n[dayjs]: https://github.com/iamkun/dayjs\n\n[redis]: https://redis.io/\n\n[mongodb]: https://www.mongodb.com/\n\n[lad-graceful]: https://github.com/ladjs/graceful\n\n[cabin]: https://cabinjs.com\n\n[moment]: https://momentjs.com\n\n[ghost]: https://ghost.org/\n"
        },
        {
          "name": "UPGRADING.md",
          "type": "blob",
          "size": 4.6123046875,
          "content": "# Upgrading\n\n\n## Upgrading from v8 to v9\n\n**There are three major breaking changes:**\n\n1. The usage of `bree.start()` and `bree.run()` methods must be changed to `await bree.start()` or `await bree.run()` (see the example below).\n2. The usage of `bree.add()` must be changed to `await bree.add()` (since we now have asynchronous job validation and loading).\n3. We have opted for `util.debuglog` as opposed to the userland `debug` package for debug logging.  This means you must run `NODE_DEBUG=bree node app.js` as opposed to `DEBUG=bree node app.js`.\n\nHere is a complete list of the underlying changes made:\n\n* The method `start()` is now a Promise and you should either call `await bree.start()` or additionally call `await bree.init()` (an internal private method called by Bree) before attempting to start or use your Bree instance.\n\n  > CJS:\n\n  ```diff\n  // if you're using CJS and you run such as `node app.js`\n  -bree.start();\n\n  +// async/await iif style\n  +(async () => {\n  +  await bree.start();\n  +})();\n  ```\n\n  > ESM:\n\n  ```diff\n  -bree.start();\n\n  +// leverage top-level await support (requires Node v14.8+)\n  +await bree.start();\n  ```\n\n* ESM module support has been added (per [#180](https://github.com/breejs/bree/issues/180)) by using dynamic imports to load the job Array (CJS is still supported).\n  * For a majority of users, you do not need to make any changes to your code for v9 to work when you upgrade from v8 (**with the exception of now having to do `await bree.start()`**).\n  * Top-level await support is added in Node v14.8+ (without requiring any Node flags), and therefore you can call `await bree.start();` (e.g. if your `package.json` has `\"type\": \"module\"` and/or the file extension you're running with Node is `.mjs`).  Note that Bree still works in Node v12.17+\n  * The major difference is that Bree no longer initializes `this.config.jobs` in the constructor.\n  * However we have dummy-proofed this new approach, and `bree.init()` will be invoked (if and only if it has not yet been invoked successfully) when you call `bree.start()` (or any similar method that accesses `this.config.jobs` internally).\n  * Internal methods such as `validate` exported by `src/job-validator.js` are now asynchronous and return Promises (you do not need to worry about this unless you're doing something custom with these functions).\n\n* The default `root` option will now attempt to resolve an absolute file path for an index since we are using dynamic imports.  If you are using `index.mjs` (as opposed to `index.js` then you will need to set a value for the option `defaultRootIndex`).  See <https://nodejs.org/api/esm.html#esm_mandatory_file_extensions> for more insight.\n\n* The method `add()` is now a Promise (you should call `await bree.add(jobs)`.\n\n* Several methods are now Promises in order to dummy-proof Bree for users that may not wish to call `await bree.init()` before calling `await bree.start()` (as per above).\n  * The method `run()` is now a Promise (**but you do not need to `await` it** if you already called `await bree.start()` or `await bree.init()` or any of the methods listed below).\n  * The method `stop()` is now a Promise (**but you do not need to `await` it** if you already called `await bree.start()` or `await bree.init()` or `await bree.run()` nor any of the methods listed below).\n\n* We've also refactored synchronous methods such as `fs.statSync` to `fs.promises.stat` and made job validation asynchronous.\n\n* Plugins that extend `bree.init()` may need rewritten, as `bree.init()` is now a Promise.\n\n* If you are on Node version <= v12.20.0, please upgrade to the latest Node v12, but preferably please upgrade to the latest Node LTS (at the time of this writing it is Node v16, but if you can't upgrade to Node v16, at least upgrade to Node v14).  Node v12 is EOL as of April 2022.\n\n* Plugins will need to now `return init()` if you override the `init` function, for example (this is the change we had to make in `@breejs/ts-worker`):\n\n```diff\n// define accepted extensions\n-Bree.prototype.init = function () {\n+Bree.prototype.init = async function () {\n  if (!this.config.acceptedExtensions.includes('.ts'))\n    this.config.acceptedExtensions.push('.ts');\n\n-  oldInit.bind(this)();\n+  return oldInit.call(this);\n};\n```\n\n\n## Upgrading from v7 to v8\n\n* Some fields have been converted from Objects to [Maps](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map):\n  * `closeWorkerAfterMs`\n  * `workers`\n  * `timeouts`\n  * `intervals`\n  * Instead of accessing them via `bree.workers.NAME`, you should access them with `.get` (e.g. `bree.workers.get(NAME);`).\n* The method `start()` will now throw an error if the job has already started.\n"
        },
        {
          "name": "ava.config.js",
          "type": "blob",
          "size": 0.23828125,
          "content": "module.exports = {\n  files: [\n    'test/*.js',\n    'test/**/*.js',\n    '!test/jobs',\n    '!test/noIndexJobs',\n    '!test/issues/**/jobs',\n    '!test/issues/**/jobs-no-default-export'\n  ],\n  verbose: true,\n  require: ['events.once/polyfill']\n};\n"
        },
        {
          "name": "config.js",
          "type": "blob",
          "size": 0.46484375,
          "content": "// eslint-disable-next-line no-undef\ndocute.init({\n  debug: true,\n  title: 'Bree',\n  repo: 'breejs/bree',\n  'edit-link': 'https://github.com/breejs/bree/tree/master/',\n  twitter: 'niftylettuce',\n  nav: {\n    default: [\n      {\n        title: 'The best job scheduler for Node.js and JavaScript',\n        path: '/'\n      },\n      {\n        title: 'Upgrading',\n        path: '/UPGRADING'\n      }\n    ]\n  },\n  // eslint-disable-next-line no-undef\n  plugins: [docuteEmojify()]\n});\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "favicon.ico",
          "type": "blob",
          "size": 15.044921875,
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 1.470703125,
          "content": "<!DOCTYPE html>\n\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\"\n    />\n    <link rel=\"shortcut icon\" href=\"/favicon.ico\" type=\"image/x-icon\" />\n    <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\" />\n    <title>The best job scheduler for Node.js and JavaScript</title>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/docute@3/dist/docute.css\"\n      type=\"text/css\"\n    />\n\n    <meta\n      property=\"og:title\"\n      content=\"The best job scheduler for Node.js with workers and cron support\"\n    />\n    <meta\n      property=\"og:description\"\n      content=\"Bree is the best job scheduler for Node.js and JavaScript. Built-in support for workers, cron expression syntax, human-friendly times, Dates, and more. Made by @niftylettuce.\"\n    />\n    <meta property=\"og:site_name\" content=\"Bree\" />\n    <meta property=\"og:type\" content=\"website\" />\n    <meta\n      property=\"og:image\"\n      content=\"https://raw.githubusercontent.com/breejs/bree/master/media/bree.png\"\n    />\n  </head>\n\n  <body>\n    <div id=\"app\"></div>\n    <script\n      src=\"https://unpkg.com/docute-emojify@0.1\"\n      type=\"text/javascript\"\n    ></script>\n    <script\n      src=\"https://unpkg.com/docute@3/dist/docute.js\"\n      type=\"text/javascript\"\n    ></script>\n    <script src=\"./config.js\" type=\"text/javascript\"></script>\n  </body>\n</html>\n"
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "nyc.config.js",
          "type": "blob",
          "size": 0.2119140625,
          "content": "module.exports = {\n  extension: ['.js'],\n  'report-dir': './coverage',\n  'temp-dir': './.nyc_output',\n  reporter: ['lcov', 'html', 'text'],\n  'check-coverage': true,\n  lines: 100,\n  functions: 100,\n  branches: 100\n};\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 3.6162109375,
          "content": "{\n  \"name\": \"bree\",\n  \"description\": \"The best job scheduler for Node.js and JavaScript with cron, dates, ms, later, and human-friendly support.  Works in Node v12.17.0+, uses worker threads to spawn sandboxed processes, and supports async/await, retries, throttling, concurrency, and cancelable promises (graceful shutdown).  Simple, fast, and lightweight.  Made for Forward Email and Lad.\",\n  \"version\": \"9.2.4\",\n  \"author\": \"Nick Baugh <niftylettuce@gmail.com> (http://niftylettuce.com/)\",\n  \"bugs\": {\n    \"url\": \"https://github.com/breejs/bree/issues\",\n    \"email\": \"niftylettuce@gmail.com\"\n  },\n  \"contributors\": [\n    \"Nick Baugh <niftylettuce@gmail.com> (http://niftylettuce.com/)\",\n    \"shadowgate15 (https://github.com/shadowgate15)\"\n  ],\n  \"dependencies\": {\n    \"@breejs/later\": \"^4.2.0\",\n    \"boolean\": \"^3.2.0\",\n    \"combine-errors\": \"^3.0.3\",\n    \"cron-validate\": \"^1.4.5\",\n    \"human-interval\": \"^2.0.1\",\n    \"is-string-and-not-blank\": \"^0.0.2\",\n    \"is-valid-path\": \"^0.1.1\",\n    \"ms\": \"^2.1.3\",\n    \"p-wait-for\": \"3\",\n    \"safe-timers\": \"^1.1.0\"\n  },\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"^19.3.0\",\n    \"@commitlint/config-conventional\": \"^19.2.2\",\n    \"@goto-bus-stop/envify\": \"^5.0.0\",\n    \"@sinonjs/fake-timers\": \"^11.2.2\",\n    \"@types/node\": \"^20.12.7\",\n    \"@types/safe-timers\": \"^1.1.2\",\n    \"@typescript-eslint/eslint-plugin\": \"6.21.0\",\n    \"@typescript-eslint/parser\": \"6.21.0\",\n    \"ava\": \"^5.3.1\",\n    \"cross-env\": \"^7.0.3\",\n    \"delay\": \"5\",\n    \"eslint\": \"8.39.0\",\n    \"eslint-config-xo-lass\": \"^2.0.1\",\n    \"events.once\": \"^2.0.2\",\n    \"fixpack\": \"^4.0.0\",\n    \"husky\": \"8.0.3\",\n    \"into-stream\": \"7\",\n    \"lint-staged\": \"^15.2.2\",\n    \"nyc\": \"^15.1.0\",\n    \"remark-cli\": \"11\",\n    \"remark-preset-github\": \"^4.0.4\",\n    \"tsd\": \"^0.31.0\",\n    \"xo\": \"0.54\"\n  },\n  \"engines\": {\n    \"node\": \">=12.17.0 <13.0.0-0||>=13.2.0\"\n  },\n  \"files\": [\n    \"src\"\n  ],\n  \"homepage\": \"https://github.com/breejs/bree\",\n  \"keywords\": [\n    \"agenda\",\n    \"async\",\n    \"await\",\n    \"bee\",\n    \"bree\",\n    \"bull\",\n    \"callback\",\n    \"cancel\",\n    \"cancelable\",\n    \"child\",\n    \"clear\",\n    \"cron\",\n    \"cronjob\",\n    \"crontab\",\n    \"date\",\n    \"dates\",\n    \"day\",\n    \"dayjs\",\n    \"delay\",\n    \"english\",\n    \"express\",\n    \"expression\",\n    \"frequencies\",\n    \"frequency\",\n    \"frequent\",\n    \"friendly\",\n    \"graceful\",\n    \"human\",\n    \"humans\",\n    \"interval\",\n    \"job\",\n    \"jobs\",\n    \"js\",\n    \"koa\",\n    \"koatiming\",\n    \"lad\",\n    \"lass\",\n    \"later\",\n    \"moment\",\n    \"momentjs\",\n    \"mongo\",\n    \"mongodb\",\n    \"mongoose\",\n    \"p-cancel\",\n    \"p-cancelable\",\n    \"p-retry\",\n    \"parse\",\n    \"parser\",\n    \"pretty\",\n    \"process\",\n    \"processors\",\n    \"promise\",\n    \"promises\",\n    \"queue\",\n    \"queues\",\n    \"readable\",\n    \"recur\",\n    \"recurring\",\n    \"redis\",\n    \"redis\",\n    \"reload\",\n    \"restart\",\n    \"run\",\n    \"runner\",\n    \"schedule\",\n    \"scheduler\",\n    \"setup\",\n    \"spawn\",\n    \"tab\",\n    \"task\",\n    \"tasker\",\n    \"time\",\n    \"timeout\",\n    \"timer\",\n    \"timers\",\n    \"translated\",\n    \"universalify\",\n    \"worker\",\n    \"workers\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"src/index.js\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/breejs/bree\"\n  },\n  \"scripts\": {\n    \"ava\": \"cross-env NODE_ENV=test ava\",\n    \"lint\": \"npm run lint:js && npm run lint:md && fixpack\",\n    \"lint:js\": \"xo --fix --ignore examples/\",\n    \"lint:md\": \"remark . -qfo\",\n    \"nyc\": \"cross-env NODE_ENV=test nyc ava\",\n    \"prepare\": \"husky install\",\n    \"pretest\": \"npm run lint\",\n    \"test\": \"npm run ava && tsd\",\n    \"test-coverage\": \"cross-env NODE_ENV=test nyc npm run test\"\n  },\n  \"types\": \"src/index.d.ts\"\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-d",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}