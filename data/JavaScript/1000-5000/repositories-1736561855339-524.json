{
  "metadata": {
    "timestamp": 1736561855339,
    "page": 524,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TechXueXi/techxuexi-js",
      "stars": 3764,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.6533203125,
          "content": "# techxuexi-js\n\n**[交流群地址及说明（点击查看）](https://github.com/TechXueXi/TechXueXi/issues/14)**\n\n**我们随时删库跑路，请加交流群防失联。**\n\n有建议说上传到 greasyfork，方便更新。其实，我们在这里发布，是因为有同志发现 greasyfork **有审查**，上传就被举报，被封，**都没有地方可以下载**，所以在这里开库收集的。**该同志表示： 习惯在 greasyfork 找强国佛系xx的人，太年轻了，还不知道社会的险恶**\n\n收集油猴等插件的科技强国 js 代码。\n\n这里没有各种恶心的审查，欢迎大家提交贡献，比如新增脚本，修改代码等。\n\n提交贡献方法： https://github.com/TechXueXi/TechXueXi/blob/dev/CONTRIBUTING.md\n\n## 使用方法\n\n请优先使用 不学习何以强国 ，它可以全自动，以后维护工作以它为主， 强国学习 需要手动进入答题。\n\n装个浏览器插件 tampermonkey （可以从这里下载 https://github.com/TechXueXi/Tampermonkey ，网上也很多教程），点击插件里添加按钮，去掉编辑框里原来的代码，把 不学习何以强国 js 脚本复制粘贴进编辑框保存。开启这个脚本，然后进入网页强国 www.xuexi.cn 登录，刷新登录网页，左上角有启动按钮。\n\n### 如何设置自动升级？\n\n看图：\n\n![image](https://user-images.githubusercontent.com/86897692/149704031-d69cc183-ff29-40a0-94d4-a74f1d2a0edc.png)\n\n![image](https://user-images.githubusercontent.com/86897692/149704044-2fb0c908-c312-42a1-9b14-1a71411b54fe.png)\n\n\n## 不想每天开电脑学习，可以配置 techxuexi python 在服务器。  https://github.com/TechXueXi/TechXueXi\n"
        },
        {
          "name": "techxuexi-js",
          "type": "tree",
          "content": null
        },
        {
          "name": "不学习何以强国.js",
          "type": "blob",
          "size": 51.08984375,
          "content": "// ==UserScript==\n// @name         不学习何以强国-beta\n// @namespace    http://tampermonkey.net/\n// @version      20230318\n// @description  问题反馈位置： https://github.com/TechXueXi/techxuexi-js/issues 。读文章,看视频，做习题。\n// @author       techxuexi ，荷包蛋。\n// @match        https://www.xuexi.cn\n// @match        https://www.xuexi.cn/*\n// @match        https://pc.xuexi.cn/points/login.html*\n// @match        https://pc.xuexi.cn/points/exam-practice.html\n// @match        https://pc.xuexi.cn/points/exam-weekly-detail.html?id=*\n// @match        https://pc.xuexi.cn/points/exam-weekly-list.html\n// @match        https://pc.xuexi.cn/points/exam-paper-detail.html?id=*\n// @match        https://pc.xuexi.cn/points/exam-paper-list.html\n// @require      https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.5.1.min.js\n// @require      https://cdn.jsdelivr.net/npm/blueimp-md5@2.9.0\n// @grant        GM_addStyle\n// @grant        GM_setValue\n// @grant        GM_getValue\n// @grant        GM_deleteValue\n// @grant        GM_openInTab\n// ==/UserScript==\nvar study_css = \".egg_study_btn{outline:0;border:0;position:fixed;top:5px;left:5px;padding:12px 20px;border-radius:10px;cursor:pointer;background-color:#fff;color:#d90609;font-size:18px;font-weight:bold;text-align:center;box-shadow:0 0 9px #666777}.egg_manual_btn{transition:0.5s;outline:none;border:none;padding:12px 20px;border-radius:10px;cursor:pointer;background-color:#e3484b;color:rgb(255,255,255);font-size:18px;font-weight:bold;text-align:center;}.egg_auto_btn{transition:0.5s;outline:none;border:none;padding:12px 20px;border-radius:10px;cursor:pointer;background-color:#666777;color:rgb(255,255,255);font-size:18px;font-weight:bold;text-align:center;}.egg_setting_box{position:fixed;top:70px;left:5px;padding:12px 20px;border-radius:10px;background-color:#fff;box-shadow:0 0 9px #666777}.egg_setting_item{margin-top:5px;height:30px;width:140px;font-size:16px;display:flex;justify-items:center;justify-content:space-between}input[type='checkbox'].egg_setting_switch{cursor:pointer;margin:0;outline:0;appearance:none;-webkit-appearance:none;-moz-appearance:none;position:relative;width:40px;height:22px;background:#ccc;border-radius:50px;transition:border-color .3s,background-color .3s}input[type='checkbox'].egg_setting_switch::after{content:'';display:inline-block;width:1rem;height:1rem;border-radius:50%;background:#fff;box-shadow:0,0,2px,#999;transition:.4s;top:3px;position:absolute;left:3px}input[type='checkbox'].egg_setting_switch:checked{background:#fd5052}input[type='checkbox'].egg_setting_switch:checked::after{content:'';position:absolute;left:55%;top:3px}\";\nGM_addStyle(study_css);\n//https://www.xuexi.cn/lgdata/3uoe1tg20en0.json\n//查询今日完成情况\nconst SearchSocreUrl = \"https://pc-proxy-api.xuexi.cn/delegate/score/days/listScoreProgress?sence=score&deviceType=2\";\n//重要新闻列表（主）\nconst NewsUrl1 = \"https://www.xuexi.cn/lgdata/1jscb6pu1n2.json\";\n//学习时评新闻列表\nconst NewsUrl2 = \"https://www.xuexi.cn/lgdata/1ap1igfgdn2.json\";\n//新闻视频列表\nconst VideosUrl1 = \"https://www.xuexi.cn/lgdata/3o3ufqgl8rsn.json\";\n//新闻视频列表\nconst VideosUrl2 = \"https://www.xuexi.cn/lgdata/1742g60067k.json\";\n//每日答题页面\nconst ExamPracticeUrl = \"https://pc.xuexi.cn/points/exam-practice.html\";\n//每周答题列表API\nconst ExamWeeklyListUrl = \"https://pc-proxy-api.xuexi.cn/api/exam/service/practice/pc/weekly/more?pageNo={pageNo}&pageSize=50\";\n//专项答题列表API\nconst ExamPaperListUrl = \"https://pc-proxy-api.xuexi.cn/api/exam/service/paper/pc/list?pageSize=50&pageNo={pageNo}\";\n//题目API（只有每周答题和专项练习）\n//const ExamQueryUrl = \"https://pc-proxy-api.xuexi.cn/api/exam/service/detail/queryV3?type={type}&id={id}&forced=true\";//type=1专项练习，type=2每周答题\n//每周答题页面\nconst ExamWeeklyUrl = \"https://pc.xuexi.cn/points/exam-weekly-detail.html?id={id}\";\n//专项测试页面\nconst ExamPaperUrl = \"https://pc.xuexi.cn/points/exam-paper-detail.html?id={id}\";\n//文本服务器保存API\nconst AnswerSaveUrl = \"https://a6.qikekeji.com/txt/data/save/\";\n//文本服务器获取API\nconst AnswerDetailUrl = \"https://a6.qikekeji.com/txt/data/detail/\";\n//获取当前日期\nvar currDate = new Date().toISOString().split('T')[0];\nvar newsNum = 6;\nvar news = [];\nvar videoNum = 6;\nvar videos = [];\n//配置\nvar settings = {};\nvar settingsDefault = {\n    News: true, //0\n    Video: true,//1\n    ExamPractice: true, //6 每日答题\n    ExamWeekly: true,//2 每周答题\n    ExamPaper: true,//5 专项练习\n    ShowMenu: false, //7 隐藏菜单\n    AutoStart: false, //是否加载脚本后自动播放\n}\nvar pause = false;//是否暂停答题\n//每周答题当前页码\nvar examWeeklyPageNo = 1;\n//每周答题总页码\nvar examWeeklyTotalPageCount = null;\n//每周答题开启逆序答题: false: 顺序答题; true: 逆序答题\nvar examWeeklyReverse = false;\n//专项答题当前页码\nvar examPaperPageNo = 1;\n//专项答题总页码\nvar examPaperTotalPageCount = null;\n//专项答题开启逆序答题: false: 顺序答题; true: 逆序答题\nvar examPaperReverse = false;\n//每周答题，专项答题 请求rate 限制 每 3000ms 一次\nconst ratelimitms = 3000;\n\n//默认情况下, chrome 只允许 window.close 关闭 window.open 打开的窗口,所以我们就要用window.open命令,在原地网页打开自身窗口再关上,就可以成功关闭了\nfunction closeWin() {\n    try {\n        window.opener = window;\n        var win = window.open(\"\", \"_self\");\n        win.close();\n        top.close();\n    } catch (e) {\n    }\n\n}\n\nasync function sleep( timeMS ) {\n    return new Promise( res => setTimeout( res, time ) );\n}\n\n/**  模拟鼠标移动  改方法来自https://blog.csdn.net/Wuzihui___/article/details/79952068\n * @param id\n * @param clientX  相对窗口横坐标\n * @param clientY  相对窗口纵坐标\n * @param distance 滑动距离\n */\nfunction dragandDrop(btn_hk, clientX, clientY, distance) {\n    var elem = btn_hk,\n        k = 0,\n        interval;\n    iME(elem,\"mousedown\",0, 0, clientX, clientY);\n    let waitTime = Math.floor(Math.random() * (0.005 * 1000 - 0.09 * 1000) + 0.09 * 1000)\n    interval = setInterval(function() {\n        k++;\n        iter(k);\n        if (k === distance) {\n            clearInterval(interval);\n            iME(elem, \"mouseup\", clientX + k, clientY, 220 + k, 400);\n        }\n    }, waitTime);\n    function iter(y) {\n        iME(elem, \"mousemove\", clientX + y, clientY, clientX + y, clientY);\n    }\n    function iME(obj, event, screenXArg, screenYArg, clientXArg, clientYArg) {\n        var mousemove = document.createEvent(\"MouseEvent\");\n        mousemove.initMouseEvent(event, true, true, unsafeWindow, 0, screenXArg, screenYArg, clientXArg, clientYArg, 0, 0, 0, 0, 0, null);\n        obj.dispatchEvent(mousemove);\n    }\n}\n\n/**\n * 随机等待最小到最大之间几秒, 需要await\n * @param {number} minSecond 最短时长\n * @param {number} MaxSecond 最长时长\n * @returns Promise\n */\nfunction waitRandomBetween(minSecond = 2, MaxSecond = 5) {\n    if (MaxSecond <= minSecond) {\n        MaxSecond = minSecond + 3\n    }\n\n    let waitTime = Math.floor(Math.random() * (MaxSecond * 1000 - minSecond * 1000) + minSecond * 1000)\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log(`随机等待${waitTime / 1000}秒`)\n            resolve()\n        }, waitTime)\n    })\n}\n\n$(document).ready(function () {\n    let url = window.location.href;\n    if (url == \"https://www.xuexi.cn\" || url == \"https://www.xuexi.cn/\" || url == \"https://www.xuexi.cn/index.html\") {\n        let ready = setInterval(function () {\n            if (document.getElementsByClassName(\"text-wrap\")[0]) {\n                clearInterval(ready);//停止定时器\n                //初始化设置\n                initSetting();\n                //创建\"开始学习\"按钮\n                createStartButton();\n            }\n        }, 800);\n    } else if (url.indexOf(\"login.html\") !== -1) {\n        console.log(\"检测到登录页\")\n        setTimeout(() => {\n            window.scrollTo(0, 1000);\n        }, 500);\n    }\n    else if (typeof GM_getValue(\"readingUrl\") != 'object' && url == GM_getValue(\"readingUrl\")) {\n        try {\n            let settingTemp = JSON.parse(GM_getValue('studySetting'));\n            if (!settingTemp[7]) {\n                createTip();//创建学习提示\n            }\n            reading(0);\n        } catch (e) {\n            createTip();//创建学习提示\n            reading(0);\n        }\n    } else if (typeof GM_getValue(\"watchingUrl\") != 'object' && url == GM_getValue(\"watchingUrl\")) {\n        try {\n            let settingTemp = JSON.parse(GM_getValue('studySetting'));\n            if (!settingTemp[7]) {\n                createTip();//创建学习提示\n            }\n        } catch (e) {\n            createTip();//创建学习提示\n        }\n        let randNum = 0;\n        var checkVideoPlayingInterval = setInterval(function () {\n            let temp = getVideoTag();\n            if (temp.video) {\n                if (!temp.video.muted) {\n                    temp.video.muted = true;\n                }\n                if (temp.video.paused) {\n                    temp.video.paused = false;\n                    console.log(\"正在尝试播放视频\")\n                    if (randNum == 0) {//尝试使用js的方式播放\n                        try {\n                            temp.video.play();//尝试使用js的方式播放\n                        } catch (e) { }\n                        randNum++;\n                    } else {\n                        try {\n                            temp.pauseButton.click();//尝试点击播放按钮播放\n                        } catch (e) { }\n                        randNum--;\n                    }\n                } else {\n                    console.log(\"成功播放\")\n                    clearInterval(checkVideoPlayingInterval);\n                    reading(1);\n                }\n            } else {\n                console.log(\"等待加载\")\n            }\n        }, 800);\n    } else if (url.indexOf(\"exam\") != -1 && url.indexOf(\"list\") == -1) {\n        //答题页面\n        let ready = setInterval(function () {\n            if (document.getElementsByClassName(\"title\")[0]) {\n                clearInterval(ready);//停止定时器\n                //创建“手动答题”按钮\n                createManualButton();\n                //去除答题验证\n                //cancelVerify();\n                //开始答题\n                doingExam();\n            }\n        }, 500);\n    } else {\n    }\n});\n\n\n//获取video标签\nfunction getVideoTag() {\n    let iframe = document.getElementsByTagName(\"iframe\")[0];\n    let video = null;\n    let pauseButton = null;\n    var u = navigator.userAgent;\n\n    // 视频播放按钮更新\n    video = document.getElementsByTagName(\"video\")[0];\n    pauseButton = document.getElementsByClassName(\"prism-big-play-btn\")[0];\n\n    return {\n        \"video\": video,\n        \"pauseButton\": pauseButton\n    }\n\n    // if (u.indexOf('Mac') > -1) {//Mac\n    //     if (iframe != null && iframe.innerHTML) {\n    //         //如果有iframe,说明外面的video标签是假的\n    //         video = iframe.contentWindow.document.getElementsByTagName(\"video\")[0];\n    //         pauseButton = iframe.contentWindow.document.getElementsByClassName(\"prism-play-btn\")[0];\n    //     } else {\n    //         //否则这个video标签是真的\n    //         video = document.getElementsByTagName(\"video\")[0];\n    //         pauseButton = document.getElementsByClassName(\"prism-play-btn\")[0];\n    //     }\n    //     return {\n    //         \"video\": video,\n    //         \"pauseButton\": pauseButton\n    //     }\n    // }\n    // else {\n    //     if (iframe) {\n    //         //如果有iframe,说明外面的video标签是假的\n    //         video = iframe.contentWindow.document.getElementsByTagName(\"video\")[0];\n    //         pauseButton = iframe.contentWindow.document.getElementsByClassName(\"prism-play-btn\")[0];\n    //     } else {\n    //         //否则这个video标签是真的\n    //         video = document.getElementsByTagName(\"video\")[0];\n    //         pauseButton = document.getElementsByClassName(\"prism-play-btn\")[0];\n    //     }\n    //     return {\n    //         \"video\": video,\n    //         \"pauseButton\": pauseButton\n    //     }\n    // }\n}\n\n//读新闻或者看视频\n//type:0为新闻，1为视频\nasync function reading(type) {\n    //看文章或者视频\n    var time = 1;\n    if (type == 0) {\n        time = parseInt(Math.random() * (100 - 80 + 1) + 80, 10);//80-100秒后关闭页面，看文章\n    } else {\n        time = parseInt(Math.random() * (250 - 230 + 1) + 230, 10);//230-250秒后关闭页面，看视频\n    }\n    let firstTime = time - 2;\n    let secendTime = 12;\n    let scrollLength = document.body.scrollHeight / 2;\n    var readingInterval = setInterval(function () {\n        time--;\n        $(\"#studyTip\").text(time + \" 秒后关闭页面\");\n        if (time <= firstTime) {\n            try {\n                $(\"html,body\").animate({ scrollTop: 394 }, 1000);\n            } catch (e) {\n                window.scrollTo(0, 394);\n            }\n            firstTime = -1;\n        }\n        if (time <= secendTime) {\n            try {\n                $(\"html,body\").animate({ scrollTop: scrollLength / 3 }, 1000);\n            } catch (e) {\n                window.scrollTo(0, scrollLength / 3);\n            }\n            secendTime = -1;\n        }\n        if (time <= 0) {\n            if (type == 0) {\n                GM_setValue('readingUrl', null);\n            } else {\n                GM_setValue('watchingUrl', null);\n            }\n            clearInterval(readingInterval);\n            closeWin();\n        }\n    }, 1000);\n    //关闭文章或视频页面\n}\n//创建学习提示\nfunction createTip() {\n    let tipInfo = document.createElement(\"div\");\n    //添加样式\n    tipInfo.setAttribute(\"id\", \"studyTip\");\n    tipInfo.innerText = \"正在初始化....\";\n    tipInfo.style.position = \"fixed\";\n    tipInfo.style.bottom = \"15px\";\n    tipInfo.style.left = \"5px\";\n    tipInfo.style.padding = \"12px 14px\";\n    tipInfo.style.border = \"none\";\n    tipInfo.style.borderRadius = \"10px\";\n    tipInfo.style.backgroundColor = \"#222222\";\n    tipInfo.style.color = \"#ffffff\";\n    tipInfo.style.fontSize = \"14px\";\n    tipInfo.style.fontWeight = \"bold\";\n    //插入节点\n    let body = document.getElementsByTagName(\"body\")[0];\n    body.append(tipInfo)\n}\n//等待窗口关闭\nfunction waitingClose(newPage) {\n    return new Promise(resolve => {\n        let doing = setInterval(function () {\n            if (newPage.closed) {\n                clearInterval(doing);//停止定时器\n                resolve('done');\n            }\n        }, 1000);\n    });\n}\n//阅读文章\nasync function readNews() {\n    await getNews();\n    for (let i = 0; i < news.length; i++) {\n        GM_setValue('readingUrl', news[i].url);\n        console.log(\"正在看第\" + (i + 1) + \"个新闻\");\n        let newPage = GM_openInTab(news[i].url, { active: true, insert: true, setParent: true });\n        await waitingClose(newPage);\n        await waitRandomBetween(1, 3);\n    }\n}\n//获取新闻列表\nfunction getNews() {\n    return new Promise(resolve => {\n        news = new Array();\n        let n = 6;\n        if (newsNum < 6) {//如果需要学习的新闻数量不到6，也就是已经学过了，但是积分不够，补的\n            n = newsNum;\n        }\n        console.log(\"还需要看\" + n + \"个新闻\")\n        //新闻数量是否足够\n        let enough = true;\n        //获取重要新闻\n        $.ajax({\n            type: \"GET\",\n            url: NewsUrl1,\n            dataType: \"json\",\n            success: function (data) {\n                let j = 0;\n                if (n == 6) {//如果今天还没学过，则优先找今天的新闻\n                    for (let i = 0; i < n; i++) {\n                        //如果有当天日期的,则加入\n                        if (data[j].auditTime.indexOf(currDate) != -1) {\n                            news.push(data[j]);\n                            j++;\n                        } else {//否则跳出循环\n                            break;\n                        }\n                    }\n                }\n                for (j; j < n; j++) {\n                    let temp = parseInt(Math.random() * (data.length + 1), 10);\n                    news.push(data[temp]);\n                }\n                resolve('done');\n            },\n            error: function () {\n                news = null;\n                resolve('done');\n            }\n        });\n    });\n}\n//获取视频列表\nfunction getVideos() {\n    return new Promise(resolve => {\n        videos = new Array();\n        let n = 6;\n        if (videoNum < 6) {//如果需要学习的视频数量不到6，也就是已经学过了，但是积分不够，补的\n            n = videoNum;\n        }\n        console.log(\"还需要看\" + n + \"个视频\")\n        $.ajax({\n            type: \"GET\",\n            url: VideosUrl1,\n            dataType: \"json\",\n            success: function (data) {\n                let j = 0;\n                if (n == 6) {\n                    for (let i = 0; i < n; i++) {\n                        //如果有当天日期的,则加入\n                        if (data[j].auditTime.indexOf(currDate) != -1) {\n                            videos.push(data[j]);\n                            j++;\n                        } else {//否则跳出循环\n                            break;\n                        }\n                    }\n                }\n                for (j; j < n; j++) {\n                    let temp = parseInt(Math.random() * (data.length + 1), 10);\n                    videos.push(data[temp]);\n                }\n                resolve('done');\n            },\n            error: function () {\n                videos = [];\n                resolve('done');\n            }\n        });\n    });\n}\n//看学习视频\nasync function watchVideo() {\n    await getVideos();\n    for (let i = 0; i < videos.length; i++) {\n        GM_setValue('watchingUrl', videos[i].url);\n        console.log(\"正在观看第\" + (i + 1) + \"个视频\");\n        let newPage = GM_openInTab(videos[i].url, { active: true, insert: true, setParent: true })\n        await waitingClose(newPage);\n        await waitRandomBetween(1, 3);\n    }\n}\n//做每日答题\nfunction doExamPractice() {\n    return new Promise(resolve => {\n        console.log(\"正在完成每日答题\")\n        let newPage = GM_openInTab(ExamPracticeUrl, { active: true, insert: true, setParent: true });\n        let doing = setInterval(function () {\n            if (newPage.closed) {\n                clearInterval(doing);//停止定时器\n                resolve('done');\n            }\n        }, 1000);\n    });\n}\n\n//fix code = 429\nasync function waitingDependStartTime(startTime) {\n    let remainms = Date.now() - startTime;\n    if (remainms < ratelimitms) {\n        let second = (ratelimitms - remainms) / 1000\n        await waitRandomBetween(second + 1, second + 3)\n    }\n}\n//初始化专项答题总页数属性\nasync function InitExamPaperAttr() {\n    let startTime = Date.now();\n    var data = await getExamPaperByPageNo(1); // 默认从第一页获取全部页属性\n    if (data) {\n        // 初始化总页码\n        examPaperTotalPageCount = data.totalPageCount;\n        // 若专项答题逆序, 则从最后一页开始\n        if (examPaperReverse) {\n            examPaperPageNo = examPaperTotalPageCount;\n        }\n    }\n    await waitingDependStartTime(startTime);\n}\n\n//获取指定页数的专项答题列表\nfunction getExamPaperByPageNo(examPaperPageNoParam) {\n    return new Promise(function (resolve) {\n        $.ajax({\n            type: \"GET\",\n            url: ExamPaperListUrl.replace(\"{pageNo}\", examPaperPageNoParam),\n            xhrFields: {\n                withCredentials: true //如果没有这个请求失败\n            },\n            dataType: \"json\",\n            success: function (data) {\n                data = decodeURIComponent(escape(window.atob(data.data_str.replace(/-/g, \"+\").replace(/_/g, \"/\"))));\n                //JSON格式化\n                data = JSON.parse(data);\n                resolve(data);\n            },\n            error: function () {\n                resolve(new Array());\n            }\n        });\n    })\n}\n\n//查询专项答题列表看看还有没有没做过的，有则返回id\nasync function findExamPaper() {\n    var continueFind = true;\n    var examPaperId = null;\n    console.log(\"初始化专项答题属性\");\n    await InitExamPaperAttr();\n    console.log(\"正在寻找未完成的专项答题\");\n    while (continueFind) {\n        let startTime = Date.now();\n\n        await getExamPaperByPageNo(examPaperPageNo).then(async (data) => {\n            if (data) {\n                let examPapers = data.list;//获取专项答题的列表\n                if (examPaperReverse) {\n                    // 若开启逆序答题, 则反转专项答题列表\n                    console.log(\"专项答题,开启逆序模式,从最早的题目开始答题\");\n                    examPapers.reverse();\n                }\n                for (let j = 0; j < examPapers.length; j++) {\n                    //遍历查询有没有没做过的\n                    if (examPapers[j].status != 2) {//status： 1为\"开始答题\" , 2为\"重新答题\"\n                        //如果不是\"重新答题\"，则可以做\n                        examPaperId = examPapers[j].id;\n                        continueFind = false;\n                        break;\n                    }\n                }\n                if (!continueFind) {\n                } else {\n                    //增加页码 (若开启逆序翻页, 则减少页码)\n                    examPaperPageNo += examPaperReverse ? -1 : 1;\n                    if (examPaperTotalPageCount == null\n                        || examPaperPageNo > examPaperTotalPageCount\n                        || examPaperPageNo < 1) {\n                        //已经找完所有页码，还是没找到，不再继续查找\n                        continueFind = false;\n                    }\n                }\n            } else {\n                continueFind = false;\n            }\n            //fix code = 429\n            await waitingDependStartTime(startTime);\n        })\n    }\n    return examPaperId;\n}\n\n//做专项答题\nfunction doExamPaper() {\n    return new Promise(function (resolve) {\n        //查找有没有没做过的专项答题，有则返回ID\n        findExamPaper().then(examPaperId => {\n            if (examPaperId != null) {\n                console.log(\"正在做专项答题\")\n                let newPage = GM_openInTab(ExamPaperUrl.replace(\"{id}\", examPaperId), { active: true, insert: true, setParent: true });\n                let doing = setInterval(function () {\n                    if (newPage.closed) {\n                        clearInterval(doing);//停止定时器\n                        resolve('done');\n                    }\n                }, 1000);\n            } else {\n                console.log(\"没有找到未完成的专项答题，跳过\")\n                resolve('noTest');\n            }\n        });\n    })\n}\n\n//初始化每周答题总页数属性\nasync function InitExamWeeklyAttr() {\n    let startTime = Date.now();\n    var data = await getExamWeeklyByPageNo(1); // 默认从第一页获取全部页属性\n    if (data) {\n        // 初始化总页码\n        examWeeklyTotalPageCount = data.totalPageCount;\n        // 若每周答题逆序, 则从最后一页开始\n        if (examWeeklyReverse) {\n            examWeeklyPageNo = examWeeklyTotalPageCount;\n        }\n    }\n    await waitingDependStartTime(startTime);\n}\n\n//获取指定页数的每周答题列表\nfunction getExamWeeklyByPageNo(examWeeklyPageNoParam) {\n    return new Promise(function (resolve) {\n        $.ajax({\n            type: \"GET\",\n            url: ExamWeeklyListUrl.replace(\"{pageNo}\", examWeeklyPageNoParam),\n            xhrFields: {\n                withCredentials: true //如果没有这个请求失败\n            },\n            dataType: \"json\",\n            success: function (data) {\n                data = decodeURIComponent(escape(window.atob(data.data_str.replace(/-/g, \"+\").replace(/_/g, \"/\"))));\n                //JSON格式化\n                data = JSON.parse(data);\n                resolve(data);\n            },\n            error: function () {\n                resolve(new Array());\n            }\n        });\n    })\n}\n\n//查询每周答题列表看看还有没有没做过的，有则返回id\nasync function findExamWeekly() {\n    var continueFind = true;\n    var examWeeklyId = null;\n    console.log(\"初始化每周答题\");\n    await InitExamWeeklyAttr();\n    console.log(\"正在寻找未完成的每周答题\");\n    while (continueFind) {\n        let startTime = Date.now();\n        await getExamWeeklyByPageNo(examWeeklyPageNo).then(async (data) => {\n            if (data) {\n                if (examWeeklyReverse) {\n                    // 若开启逆序答题, 则反转列表\n                    console.log(\"每周答题,开启逆序模式,从最早的题目开始答题\");\n                    data.list.reverse();\n                }\n                for (let i = 0; i < data.list.length; i++) {\n                    let examWeeks = data.list[i].practices;//获取每周的测试列表\n                    if (examWeeklyReverse) {\n                        // 若开启逆序, 则反转每周的测试列表\n                        examWeeks.reverse();\n                    }\n                    for (let j = 0; j < examWeeks.length; j++) {\n                        //遍历查询有没有没做过的\n                        if (examWeeks[j].status != 2) {//status： 1为\"开始答题\" , 2为\"重新答题\"\n                            //如果不是\"重新答题\"，则可以做\n                            examWeeklyId = examWeeks[j].id;\n                            continueFind = false;\n                            break;\n                        }\n                    }\n                    if (!continueFind) {\n                        //如果已经找到了，则退出循环\n                        break;\n                    }\n                }\n                if (!continueFind) {\n                } else {\n                    //增加页码\n                    examWeeklyPageNo += examWeeklyReverse ? -1 : 1;\n                    if (examWeeklyTotalPageCount == null\n                        || examWeeklyPageNo > examWeeklyTotalPageCount\n                        || examWeeklyPageNo < 1) {\n                        //已经找完所有页码，还是没找到，不再继续查找\n                        continueFind = false;\n                    }\n                }\n            } else {\n                continueFind = false;\n            }\n\n            //fix code = 429\n            await waitingDependStartTime(startTime);\n        })\n    }\n    return examWeeklyId;\n}\n//做每周答题\nfunction doExamWeekly() {\n    return new Promise(function (resolve) {\n        //查找有没有没做过的每周测试，有则返回ID\n        //examWeeklyId = 147;//测试题目\n        findExamWeekly().then(examWeeklyId => {\n            if (examWeeklyId != null) {\n                console.log(\"正在做每周答题\")\n                let newPage = GM_openInTab(ExamWeeklyUrl.replace(\"{id}\", examWeeklyId), { active: true, insert: true, setParent: true });\n                let doing = setInterval(function () {\n                    if (newPage.closed) {\n                        clearInterval(doing);//停止定时器\n                        resolve('done');\n                    }\n                }, 1000);\n            } else {\n                console.log(\"没有找到未完成的每周答题，跳过\")\n                resolve('noTest');\n            }\n        });\n    })\n}\n//获取答题按钮\nfunction getNextButton() {\n    return new Promise(function (resolve) {\n        let nextInterVal = setInterval(() => {\n            let nextAll = document.querySelectorAll(\".ant-btn\");\n            let next = nextAll[0];\n            if (nextAll.length == 2) {\n                next = nextAll[1];\n            }\n            if (next.textContent) {\n                clearInterval(nextInterVal);//停止定时器\n                resolve(next);\n            }\n        }, 800);\n    })\n}\n//暂停锁\nfunction doingPause() {\n    return new Promise(function (resolve) {\n        let doing = setInterval(function () {\n            if (!pause) {\n                clearInterval(doing);//停止定时器\n                resolve('done');\n            }\n            console.log(\"等待\")\n        }, 500);\n    })\n}\n//答题过程(整合)\nasync function doingExam() {\n    let nextButton = null;\n    let qNum = 0;//题号,第一题从0开始算\n    let shouldSaveAnswer = false;\n    while (true) {\n        //先等等再开始做题\n        await waitRandomBetween(2, 5);\n        await doingPause();\n        nextButton = await getNextButton();\n        if (document.getElementsByClassName('nc_iconfont btn_slide')[0] != null) {\n            dragandDrop(document.getElementsByClassName('nc_iconfont btn_slide')[0], 0, 0, 300);\n        }\n        if (nextButton.textContent == \"再练一次\" || nextButton.textContent == \"再来一组\" || nextButton.textContent == \"查看解析\") {\n            break;\n        }\n        try {\n            document.querySelector(\".tips\").click();\n        } catch (e) {\n            console.log(e);\n        }\n        //所有提示\n        var allTips = document.querySelectorAll(\"font[color=red]\");\n        await waitRandomBetween(2, 3);\n        //选项按钮\n        var allbuttons = document.querySelectorAll(\".q-answer\");\n        //获取所有填空\n        var blanks = document.querySelectorAll(\"input[type=text][class=blank]\");\n        try {\n            //获取问题类型\n            var questionType = document.querySelector(\".q-header\").textContent;\n            questionType = questionType.substr(0, 3)\n        } catch (e) {\n        }\n        var results = [];\n        switch (questionType) {\n            case \"填空题\": {\n                //第几个填空\n                var inputBubblesEvent = new Event('input', { bubbles: true });\n                if (blanks.length > 1) {//如果有多个填空\n                    if (allTips.length == 0) {//如果没有提示，先获取看看有没有答案\n                        try {//尝试点击视频播放按钮,播不播都没关系\n                            document.getElementsByClassName(\"outter\")[0].click();\n                        } catch (e) { }\n                        //生成秘钥\n                        let key = getKey();\n                        //尝试获取答案\n                        let answerData = await getAnswer(key);\n                        if (answerData.status == 0 || answerData == \"error\") {//没有答案\n                            for (let i = 0; i < blanks.length; i++) {//没答案，随便填点东西\n                                blanks[i].setAttribute(\"value\", i);\n                                //必须要阻止事件，不然无效\n                                blanks[i].dispatchEvent(inputBubblesEvent);\n                            }\n                            shouldSaveAnswer = true;//答完保存答案\n                        } else {//获取到了答案\n                            //格式化\n                            answerData = JSON.parse(answerData.data.txt_content);\n                            answerData = answerData[0].content;\n                            //因为有多个空，所以有多个答案，先切割\n                            answerData = answerData.split(\";\");\n                            for (let i = 0; i < answerData.length; i++) {//将答案填入\n                                blanks[i].setAttribute(\"value\", answerData[i]);\n                                blanks[i].dispatchEvent(inputBubblesEvent);\n                            }\n                        }\n                    } else if (allTips.length == blanks.length) {\n                        //如果填空数量和提示数量一致\n                        for (let i = 0; i < allTips.length; i++) {\n                            //将答案填写到对应的空中\n                            let answer = allTips[i].textContent;\n                            if (answer && answer.length > 0) {\n                                blanks[i].setAttribute(\"value\", answer);\n                                blanks[i].dispatchEvent(inputBubblesEvent);\n                            } else {\n                                //发生了错误，只好随便填一下\n                                blanks[i].setAttribute(\"value\", i);\n                                blanks[i].dispatchEvent(inputBubblesEvent);\n                            }\n                        }\n                    } else if (allTips.length > blanks.length) {\n                        //若提示数量比填空的数量多\n                        //直接将所有答案整合填进去\n                        let answer = \"\";\n                        for (let i = 0; i < allTips.length; allTips++) {\n                            answer += allTips[i].textContent();\n                        }\n                        for (let j = 0; j < blanks.length; j++) {\n                            blanks[j].setAttribute(\"value\", answer);\n                            blanks[j].dispatchEvent(inputBubblesEvent);\n                        }\n                    } else {\n                        //一般不会跑到这，如果到这了输出一下，表示惊讶\n                        console.log(\"居然跑到了这里\")\n                    }\n                } else if (blanks.length == 1) {//只有一个空，直接把所有tips合并。\n                    let answer = \"\";\n                    if (allTips.length != 0) {//如果有提示\n                        for (let i = 0; i < allTips.length; i++) {\n                            answer += allTips[i].textContent;\n                        }\n                    } else {\n                        try {//尝试点击视频播放按钮,不过播不播都没关系\n                            document.querySelector('video').play();\n                        } catch (e) { }\n                        let key = getKey();\n                        let answerData = await getAnswer(key);\n                        if (answerData.status == 0 || answerData == \"error\") {\n                            //没有获取到答案\n                            answer = \"不知道\";\n                            //没有其他人做过这道视频题，所以需要答完保存答案，这样其他人遇到就能做对\n                            shouldSaveAnswer = true;\n                        } else {\n                            //有答案\n                            answerData = JSON.parse(answerData.data.txt_content);\n                            answer = answerData[0].content;\n                        }\n                    }\n                    blanks[0].setAttribute(\"value\", answer);\n                    blanks[0].dispatchEvent(inputBubblesEvent);\n                    break;\n                }\n                else {\n                    //怕有没空白的情况。\n                }\n                break;\n            }\n            case \"多选题\": {\n                results = [];\n                let hasButton = false;\n                for (let i = 0; i < allTips.length; i++) {\n                    let tip = allTips[i];\n                    let answer = tip.textContent;\n                    if (answer && answer.length > 0) {\n                        for (let j = 0; j < allbuttons.length; j++) {\n                            //获取按钮\n                            let selectButton = allbuttons[j];\n                            //获取按钮的上的答案\n                            let buttonAnswer = selectButton.textContent;\n                            if (buttonAnswer == answer || buttonAnswer.indexOf(answer) != -1 || answer.indexOf(buttonAnswer) != -1) {\n                                hasButton = true;\n                                if (!$(selectButton).hasClass(\"chosen\")) {\n                                    selectButton.click();\n                                }\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (!hasButton) {\n                    allbuttons[0].click();\n                }\n                break;\n            }\n            case \"单选题\": {\n                let results = [];\n                let answer = \"\";\n                for (let i = 0; i < allTips.length; i++) {\n                    answer += allTips[i].textContent;\n                }\n                if (answer && answer.length > 0) {\n                    let hasButton = false;\n                    for (let i = 0; i < allbuttons.length; i++) {\n                        let radioButton = allbuttons[i];\n                        let buttonAnswer = radioButton.textContent;\n                        //对比答案\n                        if (buttonAnswer == answer || buttonAnswer.indexOf(answer) != -1 || answer.indexOf(buttonAnswer) != -1) {\n                            hasButton = true;\n                            radioButton.click();\n                            break;\n                        }\n                    }\n                    if (!hasButton) {\n                        //没找到按钮，随便选一个\n                        allbuttons[0].click();\n                    }\n                } else {\n                    //没答案，随便选一个\n                    try {\n                        allbuttons[0].click();\n                    } catch(e) {\n                        console.log(e);\n                    }\n                }\n                break;\n            }\n            default:\n                break;\n        }\n        qNum++;\n        nextButton = await getNextButton();\n        if (nextButton.textContent != \"再练一次\" && nextButton.textContent != \"再来一组\" && nextButton.textContent != \"查看解析\") {\n            nextButton.click();\n            if (shouldSaveAnswer) {//如果应该保存答案\n                let key = getKey();//获取key\n                let answerTemp = document.getElementsByClassName(\"answer\")[0].innerText;\n                let reg = new RegExp(' ', \"g\")\n                let answer = \"\";\n                try {//从字符串中拿出答案\n                    answer = answerTemp.split(\"：\")[1];\n                    answer = answer.replace(reg, \";\");\n                } catch (e) {\n                    answer = answerTemp;\n                }\n                await saveAnswer(key, answer);\n                shouldSaveAnswer = false;\n            }\n        } else {\n            //已经做完，跳出循环\n            break;\n        }\n    }\n    closeWin();\n}\n//获取关键字\nfunction getKey() {\n    //获取题目的文本内容\n    let key = document.getElementsByClassName(\"q-body\")[0].innerText;\n    //外部引用md5加密\n    key = md5(key);\n    console.log(key)\n    return key;\n}\n//保存答案\nfunction saveAnswer(key, value) {\n    return new Promise(function (resolve) {\n        value = [{ \"title\": key, \"content\": value }];\n        value = JSON.stringify(value);\n        $.ajax({\n            type: \"POST\",\n            url: AnswerSaveUrl,\n            data: {\n                txt_name: key,\n                txt_content: value,\n                password: \"\",\n                v_id: \"\"\n            },\n            dataType: \"json\",\n            success: function (data) {\n                resolve(data);\n            },\n            error: function () {\n                resolve(\"error\");\n            }\n        });\n    })\n}\n//获取答案\nfunction getAnswer(key) {\n    return new Promise(function (resolve) {\n        $.ajax({\n            type: \"POST\",\n            url: AnswerDetailUrl,\n            data: {\n                txt_name: key,\n                password: \"\"\n            },\n            dataType: \"json\",\n            success: function (data) {\n                resolve(data);\n            },\n            error: function () {\n                resolve(\"error\");\n            }\n        });\n    })\n}\n//去除答题验证\nfunction cancelVerify() {\n    try {\n        let verifyBox = document.getElementById(\"nc_mask\");\n        verifyBox.id = \"egg_nc_mask\";\n        verifyBox.innerHTML = \"\";\n        verifyBox.remove();\n    } catch (e) {\n        console.log(\"去除验证失败\");\n    }\n}\n//查询今日完成情况\nfunction getToday() {\n    return new Promise(function (resolve) {\n        $.ajax({\n            type: \"GET\",\n            url: SearchSocreUrl,\n            xhrFields: {\n                withCredentials: true //如果没有这个请求失败\n            },\n            dataType: \"json\",\n            success: function (temp) {\n                resolve(temp.data.taskProgress);\n            },\n            error: function () {\n                resolve(new Array());\n            }\n        });\n    })\n}\n//初始化配置\nfunction initSetting() {\n    try {\n        let settingTemp = JSON.parse(GM_getValue('studySetting'));\n        if (settingTemp != null && Object.prototype.toString.call(settingTemp) === '[object Object]') {\n            // 增加判断是否为旧数组类型缓存\n            settings = settingTemp;\n        } else {\n            settings = JSON.parse(JSON.stringify(settingsDefault));\n        }\n    } catch (e) {\n        //没有则直接初始化\n        settings = JSON.parse(JSON.stringify(settingsDefault));\n    }\n}\n//创建“手动答题”按钮\nfunction createManualButton() {\n    let title = document.getElementsByClassName(\"title\")[0];\n    let manualButton = document.createElement(\"button\");\n    manualButton.setAttribute(\"id\", \"manualButton\");\n    manualButton.innerText = \"关闭自动答题\";\n    manualButton.className = \"egg_auto_btn\";\n    //添加事件监听\n    try {// Chrome、FireFox、Opera、Safari、IE9.0及其以上版本\n        manualButton.addEventListener(\"click\", clickManualButton, false);\n    } catch (e) {\n        try {// IE8.0及其以下版本\n            manualButton.attachEvent('onclick', clickManualButton);\n        } catch (e) {// 早期浏览器\n            console.log(\"不学习何以强国error: 手动答题按钮绑定事件失败\")\n        }\n    }\n    //插入节点\n    title.parentNode.insertBefore(manualButton, title.nextSibling);\n}\n//点击手动学习按钮\nfunction clickManualButton() {\n    let manualButton = document.getElementById(\"manualButton\");\n    if (manualButton.innerText == \"关闭自动答题\") {\n        manualButton.innerText = \"开启自动答题\";\n        manualButton.className = \"egg_manual_btn\";\n        pause = true;\n    } else {\n        manualButton.innerText = \"关闭自动答题\";\n        manualButton.className = \"egg_auto_btn\";\n        pause = false;\n    }\n}\n//创建“开始学习”按钮和配置\nfunction createStartButton() {\n    let base = document.createElement(\"div\");\n    var baseInfo = \"\";\n    baseInfo += \"<form id=\\\"settingData\\\" class=\\\"egg_menu\\\" action=\\\"\\\" target=\\\"_blank\\\" onsubmit=\\\"return false\\\"><div class=\\\"egg_setting_box\\\"><div class=\\\"egg_setting_item\\\"><label>新闻<\\/label><input class=\\\"egg_setting_switch\\\" type=\\\"checkbox\\\" name=\\\"News\\\" \" + (settings.News ? 'checked' : '') + \"\\/>\t\t\t\t<\\/div>\t\t\t\t<div class=\\\"egg_setting_item\\\">\t\t\t\t\t<label>视频<\\/label>\t\t\t\t\t<input class=\\\"egg_setting_switch\\\" type=\\\"checkbox\\\" name=\\\"Video\\\" \" + (settings.Video ? 'checked' : '') + \"\\/>\t\t\t\t<\\/div>\t\t\t\t<div class=\\\"egg_setting_item\\\">\t\t\t\t\t<label>每日答题<\\/label>\t\t\t\t\t<input class=\\\"egg_setting_switch\\\" type=\\\"checkbox\\\" name=\\\"ExamPractice\\\" \" + (settings.ExamPractice ? 'checked' : '') + \"\\/>\t\t\t\t<\\/div>\t<div class=\\\"egg_setting_item\\\">\t\t\t\t\t<label>专项练习<\\/label>\t\t\t\t\t<input class=\\\"egg_setting_switch\\\" type=\\\"checkbox\\\" name=\\\"ExamPaper\\\" \" + (settings.ExamPaper ? 'checked' : '') + \"\\/><\\/div><hr \\/><div title='Tip:开始学习后，隐藏相关页面和提示（不隐藏答题中的关闭自动答题按钮）' class=\\\"egg_setting_item\\\"> <label>运行隐藏<\\/label> <input class=\\\"egg_setting_switch\\\" type=\\\"checkbox\\\" name=\\\"ShowMenu\\\"\" + (settings.ShowMenu ? 'checked' : '') + \"/></div>\" +\n        \"<div title='Tip:进入学习首页5秒后自动开始学习' class=\\\"egg_setting_item\\\"> <label>自动开始<\\/label> <input class=\\\"egg_setting_switch\\\" type=\\\"checkbox\\\" name=\\\"AutoStart\\\"\" + (settings.AutoStart ? 'checked' : '') + \"/></div>\"\n        +\n        \"<a style=\\\"text-decoration: none;\\\" title=\\\"视频不自动播放？点此查看解决办法\\\" target=\\\"blank\\\" href=\\\"https://docs.qq.com/doc/DZllGcGlJUG1qT3Vx\\\"><div style=\\\"color:#5F5F5F;font-size:14px;\\\" class=\\\"egg_setting_item\\\"><label style=\\\"cursor: pointer;\\\">视频不自动播放?<\\/label><\\/div><\\/a><\\/div><\\/form>\";\n    base.innerHTML = baseInfo;\n    let body = document.getElementsByTagName(\"body\")[0];\n    body.append(base)\n    let startButton = document.createElement(\"button\");\n    startButton.setAttribute(\"id\", \"startButton\");\n    startButton.innerText = \"开始学习\";\n    startButton.className = \"egg_study_btn egg_menu\";\n    //添加事件监听\n    try {// Chrome、FireFox、Opera、Safari、IE9.0及其以上版本\n        startButton.addEventListener(\"click\", start, false);\n    } catch (e) {\n        try {// IE8.0及其以下版本\n            startButton.attachEvent('onclick', start);\n        } catch (e) {// 早期浏览器\n            console.log(\"不学习何以强国error: 开始学习按钮绑定事件失败\")\n        }\n    }\n    //插入节点\n    body.append(startButton)\n\n    if (settings.AutoStart) {\n        setTimeout(() => {\n            if (startButton.innerText === \"开始学习\") {\n                start()\n            }\n        }, 5000)\n    }\n}\n//保存配置\nfunction saveSetting() {\n    let form = document.getElementById(\"settingData\");\n    let formData = new FormData(form);\n    settings.News = (formData.get('News') != null);\n    settings.Video = (formData.get('Video') != null);\n    settings.ExamPractice = (formData.get('ExamPractice') != null);\n    settings.ExamWeekly = (formData.get('ExamWeekly') != null);\n    settings.ExamPaper = (formData.get('ExamPaper') != null);\n    settings.ShowMenu = (formData.get('ShowMenu') != null);//运行时是否要隐藏\n    settings.AutoStart = (formData.get('AutoStart') != null);//是否自动启动\n    GM_setValue('studySetting', JSON.stringify(settings));\n}\n//是否显示目录\nfunction showMenu(isShow = true) {\n    let items = document.getElementsByClassName(\"egg_menu\");\n    for (let i = 0; i < items.length; i++) {\n        items[i].style.display = isShow ? \"block\" : \"none\";\n    }\n}\n//开始\nasync function start() {\n    //保存配置\n    console.log(\"初始化...\")\n    saveSetting();\n    let loggedBox = document.querySelectorAll(\"a[class='logged-link']\")[0];\n    console.log(\"检查是否登录...\")\n    if (loggedBox && loggedBox.innerText) {\n        let startButton = document.getElementById(\"startButton\");\n        startButton.innerText = \"正在学习\";\n        startButton.style.cursor = \"default\";\n        startButton.setAttribute(\"disabled\", true);\n        if (settings.ShowMenu) {\n            showMenu(false);\n        }\n        let taskProgress = null;\n        let continueToDo = true;\n        let tasks = [false, false, false, false, false]\n        while (continueToDo) {\n            //查询今天还有什么任务没做完\n            console.log(\"检查今天还有什么任务没做完\")\n            taskProgress = await getToday();\n            if (taskProgress != null) {\n                console.log(\"开始学习\")\n\n                // 显示目前得分\n                /*\n                let eggSettingItems = document.getElementsByClassName(\"egg_setting_item\");\n                console.log(eggSettingItems[0].children[0].innerHTML);\n                eggSettingItems[0].children[0].innerHTML += ' ' + taskProgress[0].currentScore + '/' + taskProgress[0].dayMaxScore;\n                eggSettingItems[1].children[0].innerHTML += ' ' + ( taskProgress[1].currentScore + taskProgress[2].currentScore ) + '/' + ( taskProgress[1].dayMaxScore + taskProgress[2].dayMaxScore );\n                eggSettingItems[2].children[0].innerHTML += ' ' + taskProgress[5].currentScore + '/' + taskProgress[5].dayMaxScore;\n                eggSettingItems[3].children[0].innerHTML += ' ' + taskProgress[4].currentScore + '/' + taskProgress[4].dayMaxScore;\n                */\n                //检查新闻\n                if (settings.News && taskProgress[0].currentScore != taskProgress[0].dayMaxScore) {\n                    tasks[0] = false;//只要还有要做的，就当做没完成\n                    newsNum = taskProgress[0].dayMaxScore - taskProgress[0].currentScore;//还需要看多少个新闻\n                    console.log(\"1.看新闻\");\n                    await readNews();\n                } else {\n                    tasks[0] = true;\n                }\n\n                //检查视频\n                let temp = parseInt(taskProgress[1].dayMaxScore - taskProgress[1].currentScore);\n                let temp2 = parseInt(taskProgress[2].dayMaxScore - taskProgress[2].currentScore);\n                if (settings.Video && (temp != 0 || temp2 != 0)) {\n                    tasks[1] = false;//只要还有要做的，就当做没完成\n                    videoNum = temp > temp2 ? temp : temp2;//还需要看多少个视频\n                    console.log(\"2.看视频\");\n                    await watchVideo();\n                } else {\n                    tasks[1] = true;\n                }\n\n                //检查每日答题\n                if (settings.ExamPractice && taskProgress[3].currentScore != taskProgress[3].dayMaxScore) {\n                    tasks[2] = false;//只要还有要做的，就当做没完成\n                    console.log(\"3.做每日答题\");\n                    await doExamPractice();\n                } else {\n                    tasks[2] = true;\n                }\n                tasks[3] = true\n                /*\n                //检查每周答题\n                if (settings.ExamWeekly && taskProgress[2].currentScore == 0) {\n                    tasks[3] = false;//只要还有要做的，就当做没完成\n                    console.log(\"4.做每周答题\");\n                    let result = await doExamWeekly();\n                    if (result == \"noTest\") {\n                        //如果是全都完成了，已经没有能做的了\n                        tasks[3] = true;\n                    }\n                } else {\n                    tasks[3] = true;\n                }*/\n                    tasks[4] = true;\n                //检查专项练习\n                /*if (settings.ExamPaper && taskProgress[4].currentScore == 0) {\n                    tasks[4] = false;//只要还有要做的，就当做没完成\n                    console.log(\"5.做专项练习\");\n                    let result = await doExamPaper();\n                    if (result == \"noTest\") {\n                        //如果是全都完成了，已经没有能做的了\n                        tasks[4] = true;\n                    }\n                } else {\n                    tasks[4] = true;\n                }*/\n\n                if (tasks[0] && tasks[1] && tasks[2] && tasks[3] && tasks[4]) {\n                    //如果检查都做完了，就不用继续了\n                    continueToDo = false;\n                }\n            } else {\n                alert(\"发生意外错误\")\n                continueToDo = false;\n            }\n            console.log(\"continueToDo : \" + continueToDo)\n        }\n        console.log(\"已完成\")\n        startButton.innerText = \"已完成\";\n        startButton.style.color = \"#c7c7c7\";\n        if (settings.ShowMenu) {\n            showMenu()\n        }\n    } else {\n        //提醒登录\n        // alert(\"请先登录\");\n\n        //修改为跳转到登陆页\n        let loggedButton = document.querySelectorAll(\"a[class='icon login-icon']\")[0];\n        loggedButton.click()\n        setTimeout(() => {\n            closeWin()\n        }, 2000);\n    }\n    return false;\n}\n"
        },
        {
          "name": "强国学习.js",
          "type": "blob",
          "size": 13.310546875,
          "content": "// ==UserScript==\n// @name         强国学习\n// @namespace    雪导.\n// @version      2.1.1\n// @description  问题反馈位置： https://github.com/TechXueXi/techxuexi-js/issues 。 强国学习自动答题，目前实现 每日答题，每周答题，专项答题(操作方法更新为：打开答题页面后，手动刷新下自动开启)\n// @author       雪导、天幽\n// @require      https://greasyfork.org/scripts/423313-utils%E7%8E%AF%E5%A2%83/code/Utils%E7%8E%AF%E5%A2%83.js?version=911306\n// @require      http://cdn.bootcss.com/jquery/1.8.3/jquery.min.js\n// @match        https://www.xuexi.cn\n// @match        https://www.xuexi.cn/*\n// @match        https://pc.xuexi.cn/points/exam-practice.html*\n// @match        https://pc.xuexi.cn/points/exam-weekly-detail.html*\n// @match        https://pc.xuexi.cn/points/exam-paper-detail.html*\n// @match        https://pc.xuexi.cn/points/my-study.html*\n// @match        https://pc.xuexi.cn/points/exam-index.html*\n// @match        https://pc-api.xuexi.cn/open/api/score/today/queryrate\n// @grant        none\n// ==/UserScript==\nwindow.onload = async function () {\n  const $X = new Utils(\"学习强国\");\n  //移除顶部\n  const header = document.querySelector(\"#app > div > div.layout-header\");\n  if (header != null) {\n    header.parentNode.removeChild(header);\n    console.log(\"移除header乱七八糟的dom\");\n  }\n  //移除底部\n  const footer = document.querySelector(\"#app > div > div.layout-footer\");\n  if (footer != null) {\n    footer.parentNode.removeChild(footer);\n    console.log(\"移除footer乱七八糟的dom\");\n  }\n\n  // 创建问题反馈\n  const startQuestionBtn = () => {\n    var div = document.createElement(\"div\");\n    div.innerHTML = \"<span>问题反馈</span>\";\n    //为div创建属性class = \"test\"\n    var divattr = document.createAttribute(\"class\");\n    divattr.value = \"question-btn\";\n    //把属性class = \"test\"添加到div\n    div.setAttributeNode(divattr);\n    //为div添加样式\n    var style = document.createAttribute(\"style\");\n    div.setAttributeNode(style);\n    div.style.backgroundColor = \"green\";\n    div.style.color = \"#fff\";\n    div.style.textAlign = \"center\";\n    div.style.width = \"80px\";\n    div.style.borderColor = \"#000\";\n    div.style.marginLeft = \"0%\";\n    div.style.marginTop = \"1%\";\n    document.querySelector(\".ant-breadcrumb\").appendChild(div);\n    $(\".question-btn\").click(() => {\n      window.open(\"https://gitee.com/qq34347476/tampermonkey/issues\");\n    });\n  };\n\n  // 创建每日答题\n  const startDayBtn = () => {\n    var div = document.createElement(\"div\");\n    div.innerHTML = \"<span>每日答题</span>\";\n    //为div创建属性class = \"test\"\n    var divattr = document.createAttribute(\"class\");\n    divattr.value = \"start-btn\";\n    //把属性class = \"test\"添加到div\n    div.setAttributeNode(divattr);\n    //为div添加样式\n    var style = document.createAttribute(\"style\");\n    div.setAttributeNode(style);\n    div.style.backgroundColor = \"#F00\";\n    div.style.color = \"#fff\";\n    div.style.textAlign = \"center\";\n    div.style.width = \"80px\";\n    div.style.borderColor = \"#000\";\n    div.style.marginLeft = \"0%\";\n    div.style.marginTop = \"1%\";\n    document.querySelector(\".ant-breadcrumb\").appendChild(div);\n    $(\".start-btn\").click(() => {\n      window.open(\"https://pc.xuexi.cn/points/exam-practice.html\");\n    });\n  };\n\n  // 创建专项答题\n  const startExamBtn = () => {\n    var div = document.createElement(\"div\");\n    div.innerHTML = \"<span>专项答题</span>\";\n    //为div创建属性class = \"test\"\n    var divattr = document.createAttribute(\"class\");\n    divattr.value = \"start-btn3\";\n    //把属性class = \"test\"添加到div\n    div.setAttributeNode(divattr);\n    //为div添加样式\n    var style = document.createAttribute(\"style\");\n    div.setAttributeNode(style);\n    div.style.backgroundColor = \"#F00\";\n    div.style.color = \"#fff\";\n    div.style.textAlign = \"center\";\n    div.style.width = \"80px\";\n    div.style.borderColor = \"#000\";\n    div.style.marginLeft = \"0%\";\n    div.style.marginTop = \"1%\";\n    document.querySelector(\".ant-breadcrumb\").appendChild(div);\n    $(\".start-btn3\").click(() => {\n      window.open(\"https://pc.xuexi.cn/points/exam-paper-list.html\");\n    });\n  };\n\n  // 创建每周答题\n  const startWeekBtn = () => {\n    var div = document.createElement(\"div\");\n    div.innerHTML = \"<span>每周答题</span>\";\n    //为div创建属性class = \"test\"\n    var divattr = document.createAttribute(\"class\");\n    divattr.value = \"start-btn2\";\n    //把属性class = \"test\"添加到div\n    div.setAttributeNode(divattr);\n    //为div添加样式\n    var style = document.createAttribute(\"style\");\n    div.setAttributeNode(style);\n    div.style.backgroundColor = \"#F00\";\n    div.style.color = \"#fff\";\n    div.style.textAlign = \"center\";\n    div.style.width = \"80px\";\n    div.style.borderColor = \"#000\";\n    div.style.marginLeft = \"0%\";\n    div.style.marginTop = \"1%\";\n    document.querySelector(\".ant-breadcrumb\").appendChild(div);\n    $(\".start-btn2\").click(() => {\n      window.open(\"https://pc.xuexi.cn/points/exam-weekly-list.html\");\n    });\n  };\n\n  const getBtnDom = async () => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        let nextAll = document.querySelectorAll(\".ant-btn\");\n        let next = nextAll[0];\n\n        if (nextAll.length == 2) {\n          //俩按钮，说明有个按钮是交卷。\n          next = nextAll[1];\n        }\n        console.log(\"btn按钮状态\", next);\n        resolve(next);\n      }, 2000);\n    });\n  };\n\n  const doit = async () => {\n    console.log(\"===========开始答题===========\");\n    console.log(\"延时500ms\");\n    await $X.wait(500);\n    const next = await getBtnDom();\n    console.log(\"next\", next);\n\n    if (next.disabled) {\n      document.querySelector(\".tips\").click();\n      console.log(\"延时500ms\");\n      await $X.wait(500);\n      if (\n        document.querySelector(\".ant-popover-inner-content\").textContent ===\n        \"请观看视频\"\n      ) {\n        console.log(\"需要观看视频\");\n        alert(\"请手动作答\");\n        // window.location.reload()\n        return;\n      }\n\n      //所有提示\n      let allTips = document.querySelectorAll(\"font[color=red]\");\n\n      //单选多选时候的按钮\n      let buttons = document.querySelectorAll(\".q-answer\");\n\n      //填空时候的那个textbox，这里假设只有一个填空\n      let textboxs = document.querySelectorAll(\"input\");\n      //问题类型\n      let qType = document.querySelector(\".q-header\").textContent;\n      console.log(\"问题类型qType\", qType);\n\n      qType = qType.substr(0, 3);\n      switch (qType) {\n        case \"填空题\":\n          //第几个填空\n          let mevent = new Event(\"input\", { bubbles: true });\n          if (textboxs.length > 1) {\n            //若不止是一个空\n            //填空数量和提示数量是否一致\n            if (allTips.length == textboxs.length) {\n              for (\n                let i = 0;\n                i < allTips.length;\n                i++ //数量一致，则一一对应。\n              ) {\n                let tip = allTips[i];\n                let tipText = tip.textContent;\n                if (tipText.length > 0) {\n                  //通过设置属性,然后立即让他冒泡这个input事件.\n                  //否则1,setattr后,内容消失.\n                  //否则2,element.value=124后,属性值value不会改变,所以冒泡也不管用.\n                  textboxs[i].setAttribute(\"value\", tipText);\n                  textboxs[i].dispatchEvent(mevent);\n                }\n              }\n            } else {\n              //若填空数量和提示数量不一致，那么，应该都是提示数量多。\n\n              if (allTips.length > textboxs.length) {\n                let lineFeed = document.querySelector(\".line-feed\").textContent; //这个是提示的所有内容，不仅包含红色答案部分。\n\n                let n = 0; //计数，第几个tip。\n                for (\n                  let j = 0;\n                  j < textboxs.length;\n                  j++ //多个填空\n                ) {\n                  let tipText = allTips[n].textContent;\n                  let nextTipText = \"\";\n                  do {\n                    tipText += nextTipText;\n                    if (n < textboxs.length - 1) {\n                      n++;\n                      nextTipText = allTips[n].textContent;\n                    } else {\n                      nextTipText = \"结束了，没有了。\";\n                    }\n                  } while (lineFeed.indexOf(tipText + nextTipText));\n\n                  textboxs[j].setAttribute(\"value\", tipText);\n                  textboxs[j].dispatchEvent(mevent);\n                }\n              } else {\n                //提示数量少于填空数量，则我无法分析, 回头研究，暂时放弃作答，刷新题库浏览器\n                // location.reload()\n              }\n              return doit();\n            }\n          } else if (textboxs.length == 1) {\n            //只有一个空，直接把所有tips合并。\n            let tipText = \"\";\n            for (let i = 0; i < allTips.length; i++) {\n              tipText += allTips[i].textContent;\n            }\n            textboxs[0].setAttribute(\"value\", tipText);\n            textboxs[0].dispatchEvent(mevent);\n            await $X.wait(500);\n            // return doit()\n          } else {\n            //怕有没空白的情况。  看视频。。\n            console.log(\"填空题，看视频？\");\n            window.location.href = \"http://www.baidu.com\";\n          }\n          return doit();\n        case \"多选题\":\n          //循环选项列表。用来点击\n          for (let js = 0; js < buttons.length; js++) {\n            let cButton = buttons[js];\n            for (\n              let i = 0;\n              i < allTips.length;\n              i++ //循环提示列表。\n            ) {\n              let tip = allTips[i];\n              let tipText = tip.textContent;\n              if (tipText.length > 0) {\n                //提示内容长度大于0\n                let cButtonText = cButton.textContent; //选项按钮的内容\n                console.log(\"cButtonText\", cButtonText);\n                console.log(\"tipText\", tipText);\n                //循环对比点击\n                if (\n                  cButtonText.indexOf(tipText) > -1 ||\n                  tipText.indexOf(cButtonText) > -1\n                ) {\n                  cButton.click();\n                }\n              }\n            }\n          }\n          return doit();\n        case \"单选题\":\n          //单选，所以所有的提示，其实是同一个。有时候，对方提示会分成多个部分。\n          //case 块里不能直接用let。所以增加了个if。\n          if (true) {\n            //把红色提示组合为一条\n            let tipText = \"\";\n            for (let i = 0; i < allTips.length; i++) {\n              tipText += allTips[i].textContent;\n            }\n\n            if (tipText.length > 0) {\n              //循环对比后点击 答案是否包含正确答案\n              for (let js = 0; js < buttons.length; js++) {\n                let cButton = buttons[js];\n                let cButtonText = cButton.textContent;\n                //通过判断是否相互包含，来确认是不是此选项\n                if (\n                  cButtonText.indexOf(tipText) > -1 ||\n                  tipText.indexOf(cButtonText) > -1\n                ) {\n                  console.log(\"延时500选择\");\n                  await $X.wait(500);\n                  cButton.click();\n                  await $X.wait(500);\n                  console.log(\"下一步\");\n                  return doit();\n                }\n              }\n\n              // 循环对比答案，若不纯在包含答案  则走 这套比对答案逻辑\n              console.log(\"循环比对答案 【相似度】\");\n              let xiangsidu = []; // 相似度\n              let max_xiangsidu = 0;\n              let index = 0;\n              for (let js = 0; js < buttons.length; js++) {\n                let cButton = buttons[js];\n                let cButtonText = cButton.textContent;\n                //通过判断是否相互包含，来确认是不是此选项\n                xiangsidu.push($X.strSimilarity2Percent(tipText, cButtonText));\n              }\n\n              max_xiangsidu = $X.getMaxNumOfArr(xiangsidu);\n              index = xiangsidu.findIndex((item) => item === max_xiangsidu);\n              console.log(`几个答案相似度【$X{max_xiangsidu}】`);\n              console.log(`找最相似的答案【$X{index}】`);\n              buttons[index].click();\n              await $X.wait(500);\n              document.querySelector(\".ant-btn\").click();\n              await $X.wait(500);\n              return doit();\n            }\n          }\n          break;\n        default:\n          break;\n      }\n    } else {\n      // 可以点击\n      if (\n        next.textContent != \"再练一次\" &&\n        next.textContent != \"再来一组\" &&\n        next.textContent != \"查看解析\"\n      ) {\n        next.click();\n        await $X.wait(500);\n        doit();\n      } else {\n        // 结束\n        console.log(\"答题结束\");\n        $X.done();\n      }\n    }\n  };\n  startQuestionBtn();\n  startDayBtn();\n  startWeekBtn();\n  startExamBtn();\n  let btn = document.querySelector(\".ant-btn\");\n  if (btn) {\n    if (btn.textContent === \"确 定\" || btn.textContent === \"下一题\") {\n      await $X.wait(500);\n      doit();\n    } else {\n      location.reload();\n    }\n  }\n};\n"
        }
      ]
    }
  ]
}