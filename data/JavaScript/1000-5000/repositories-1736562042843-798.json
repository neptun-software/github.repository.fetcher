{
  "metadata": {
    "timestamp": 1736562042843,
    "page": 798,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/bottery",
      "stars": 3295,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.013671875,
          "content": "*~\n*.DS_STORE\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.3125,
          "content": "# This is the list of Bottery authors for copyright purposes.\n#\n# This does not necessarily list everyone who has contributed code, since in\n# some cases, their employer may be the copyright holder.  To see the full list\n# of contributors, see the revision history in source control.\nGoogle Inc.\nand other contributors\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.416015625,
          "content": "Want to contribute? Great! First, read this page (including the small print at the end).\n\n### Before you contribute\nBefore we can use your code, you must sign the\n[Google Individual Contributor License Agreement](https://cla.developers.google.com/about/google-individual)\n(CLA), which you can do online. The CLA is necessary mainly because you own the\ncopyright to your changes, even after your contribution becomes part of our\ncodebase, so we need your permission to use and distribute your code. We also\nneed to be sure of various other things—for instance that you'll tell us if you\nknow that your code infringes on other people's patents. You don't have to sign\nthe CLA until after you've submitted your code for review and a member has\napproved it, but you must do it before we can put your code into our codebase.\nBefore you start working on a larger contribution, you should get in touch with\nus first through the issue tracker with your idea so that we can help out and\npossibly guide you. Coordinating up front makes it much easier to avoid\nfrustration later on.\n\n### Code reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose.\n\n### The small print\nContributions made by corporations are covered by a different agreement than\nthe one above, the\n[Software Grant and Corporate Contributor License Agreement](https://cla.developers.google.com/about/google-corporate).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0771484375,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2017 Google, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "PULL_REQUEST_TEMPLATE.md",
          "type": "blob",
          "size": 0.3466796875,
          "content": "###### Explanation About What Code Achieves:\n<!-- Please explain why this code is necessary / what it does -->\n  - Explain\n\n###### Steps To Test:\n<!-- What would someone do to be able to see the effects of your code? -->\n  - Steps\n\n###### TODOs:\n<!-- Is there any tests or logic that isn't in the pr that you want the reviewer to know about? -->\n  - None\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.3017578125,
          "content": "# Bottery\n\n## A conversational agent prototyping platform by [Kate Compton](https://github.com/galaxykate).\n\n(This is not an official Google product.)\n\n## What is this?\n\nBottery is a syntax, editor, and simulator for prototyping **generative contextual conversations** modeled as **finite state machines**.\n\nBottery takes inspiration from the **[Tracery](http://tracery.io/)** open-source project for generative text (also by katecompton@ in a non-google capacity) and the [Cheap Bots, Done Quick!](https://cheapbotsdonequick.com/) bot-hosting platform, as well as open FSM-based storytelling tools like Twine.  \n\nLike Tracery, Bottery is a *syntax* that specifies the script of a conversation (a *map*) with JSON.  Like Cheap Bots, Done Quick!, the BotteryStudio can take that JSON and run a simulation of that conversation in a nice JavaScript front-end, with helpful visualizations and editing ability.\n\nThe goal of Bottery is to help *everyone*, from designers to writers to coders, be able to write simple and engaging  contextual conversational agents, and to test them out in a realistic interactive simulation, mimicking how they'd work on a \"real\" platform like DialogFlow.  \n\n\n## Bottery concepts\n\nUsers in Tracery write **grammars**, JSON objects that recursively define how to generate some text, like [the musings of a lost self-driving car](https://cheapbotsdonequick.com/source/losttesla) or [outer-space adventures](https://cheapbotsdonequick.com/source/tinyadv).  Tracery grammars are lists of symbol names (like \"animal\") and their expansion rules (like \"emu, okapi, pangolin\").\n\nIn Bottery, users write **maps**. Each map is composed of four sub-components\n* A set of **states**, with information about what to do on entering them, and how to get from one to another\n* A set of initial **blackboard** values\n* An optional Tracery **grammar**\n\n### Blackboard (and the pointer)\n\nYou can imagine a Bottery map like a finite state machine or a [boardgame board](https://www.pinterest.com/pin/361273201334614541/?lp=true): there are spaces, and connections between the spaces, and rules for how to move between them.  The map itself doesn't change or store information during play.  Instead, you have a **pointer** showing which state you are on, all the variables in the blackboard (like the number of kids in your Game of Life car).\n\nAn RPG map might use the blackboard to store the number of hit points for the main character, their current weapon and its stats, their gold, and quest progress.  A quiz bot might store all of its categories, questions and answers, the players' current points, and which questions it wants to ask next.  You can store strings, booleans, numbers, hierarchical objects, and arrays in the blackboard.  Storing and retrieving information is done with a JavaScript-like syntax: `foo.bar[5]` gets the value at the 5th index of object `bar` in object `foo`.  `foo.baz[10][20] = 10` behaves similarly, though unlike JavaScript, if these parameters don't exist, it will create new objects or arrays and fill them rather than throwing an error. See `parseMapPath` in `map.js` for details.\n\nVariables in the blackboard can be accessed from within Tracery with the syntax `You have guessed #/guessCount# times.`\n\n### States\n\nEach state is a node in the Bottery map. A state has\n* An **id**\n* A list of **actions** to be taken when the state is entered\n* A dictionary of **exits** to other states.\n* Optionally, a list of **suggestion chips** (using tracery syntax) of suggested user inputs. This is commonly used in text based bots.\n\nThere are several ways to express the actions that are taken when the state is entered, depending on the desired behavior. The following are currently defined:\n* `onEnter`: This takes a string of actions defined in the action syntax (see below). For example: `“‘hello’ greeting++”`. these are space delineated commands, and the extra quotation marks around the phrase are necessary\n* `onEnterDoOne` Takes an array of strings in format `\"[condition] [action]\"`. The first condition that evaluates to true has its action executed.\n* `onEnterSay` Takes a singe string and outputs it. The string can use tracery expansion syntax.\n* `onEnterPlay` Plays the audio file specified.\n* `onEnterFxn` Executes the given function (but must be defined in `map.js`)\n\nAll bots must have an `origin` state, which is the first state entered when the bot starts.\n\n### Exits\n\nExits are described by strings in the format:\n`[conditions] ->TARGET_NAME [actions to take when taken]`\n\nSyntax for actions and conditions are described below.\n\nIf all the conditions are true then the exit becomes active. If there are *no* conditions, the exit is always active.\n\nThen there is an arrow (`->`) and a target.  The target is either an **id of a state** or an at sign `@` that indicates the pointer should re-enter the current state.\n\nThe list of actions is in **action syntax** (see below).\n\n### Condition\n\nConditions fall under the following categories:\n* Inputs: User input matching a string. E.g., `\"one\"` or `\"two\"`. The presence of quotes indicates a string that must be matched by the last user input. An asterisk `*` matches *any* user input.\n* Expressions: Mathematical syntax representing equality, inequality, and so on. Most basic math expressions are valid e.g. `count>4`. Expressions can use variables that exist in the blackboard, using the blackboard variable syntax (see above). \n* Values: There is only one type of these at present, `wait:[time in seconds to wait]`. This evaluates to true after that much time has elapsed after entering the current state.\n\n### Actions\n\nAction syntax is similar to condition syntax:\n* Assignment: Sets a variable in the blackboard. If the variable does not exist it is created. E.g. `partyMember[1].weapon=\"sword\"`.\n* Output: Raw text with quotes is outputted using selected output method. ‘\"hello\"’. This uses tracery expansion syntax, so `\"hello #/playerName#\"`\n* Play sound: `playSound([sound name])`\n* Incrementation: Increments or decrements a variable in the blackboard. E.g.:`[varName]++` or `[varName]--`\n\n### How the pointer decides how to move\n\nWhen the pointer enters a state, the following things happen:\n1. Any `onEnter` actions are executed.\n2. Any **suggestion chips** are created and displayed to the user.\n3. All available exits (including the exits specified in the state, as well as global exits) are collected.\n\nThe pointer then waits for state change. At the moment, state change includes user input, and the passage of time. If no `wait` conditions are present, then the bot will wait for user input forever. When that state change occurs, the pointer will re-evaluate all the conditions on the currently available exits. If all the conditions on an exit evaluate to true, then that exit becomes active.\n\nIt is often the case that multiple exits are active at the same time. For example:\n`\"yes\" ->startGame`\n`* ->askForClarification`\n\nIf the user types \"yes\", both exits are active. The first exit in in the list of active exits is selected. In this case `\"yes\" ->startGame` will be chosen.\n\nWhen the pointer uses an exit, the following occurs:\n1. The actions associated with the exit are executed.\n2. The pointer moves to the state of that exit and the process begins anew.\n\n## Interface Overview\n\n![UI overview](doc_images/bottery_ui.png?raw=true)\n\n### Chat\n\nTab for interacting with the bot. Occasionally, the player may be offered suggestion chips (e.g., \"heads\" and \"tails\") that can allow the player to interact without entering text.\n\n### Controls\n\nSwitches between text and speech, and also commands for working with state.\nIf there are errors in the bot’s underlying script, then they will appear here.\n\n### Editor\n\nAn inline editor for the underlying bot script. A user can edit the script and see changes without having to edit the underlying `.js` files. Changes here will be saved in local storage, so they will only be accessible to the current user.\n\n### Blackboard\n\nDisplays the current state of the variables known by the bot. These variables can be used to affect conditional behavior (e.g., the mood of the bot), some tracked information (e.g., the number of correct guesses in a quiz), the name of something (e.g., something the player is allowed to name), and much more.\n\nThis information is typically invisible to an end user interacting with the bot.\n\n### Inspector\n\nPresents a view of the bot’s state machine. This shows all the states that the bot can traverse through, and within them indicates the commands that are executed by the bot, and the ways to traverse to the next state[s]. The initial state is always \"origin\". This view is not interactive, but is a visual representation of the underlying script.\n\n### State view\n\nThis is a representation of the current state of the bot, and the potential next states, as well as the conditions for enabling these particular transitions.\n\n### Viz\n\nDisplays the directed connectivity graph of states and exits. Highlights the current state and any active exit transitions.\n\n## Example bot (kitten simulator!)\n\nNow that we have reviewed the underlying concepts and the interface, it is time to build a bot!\n\nWhen you have checked out the git repository, create a new file `kittens.js` in the `bots` directory, and add `kittens` to the list of bots in `bots.js`.\n\nWe can start with the following in `kittens.js`:\n\n```javascript\nbot = {\n  states: {\n    origin: {\n      onEnter: \"'You have a kitten!'\",\n    },\n  },\n}\n```\n\nThis is a minimal valid bot. It has one state, the `origin`, and that has a single `onEnter` associated with it. Note the fact that the text `'You have a kitten!'` is in single quotes. This is an output action and denotes that this string is to be output as text. We will add additional actions later.\n\nA note on syntax: The format of this is valid javascript, and is very similar to JSON, but is not valid JSON because of two key differences: trailing commas are permitted, and object keys do not require quotes.\n\n### Interactive kitten\n\nA bot isn't very interesting until you can interact with it, so let's add some interactivity:\n\n```javascript\nbot = {\n  states: {\n    origin: {\n      onEnter: \"'You have a kitten!'\",\n      exits: \"->name\",\n    },\n    name: {\n      onEnter: \"'What do you want to name your kitten?'\",\n      exits: \"'*' ->respondToName name=INPUT\",\n    },\n    respondToName: {\n      onEnterSay: \"The kitten purrs happily, I guess it likes the name #/name#!\",\n    },\n  },\n}\n```\n\nThis example introduces two new states: `name` and `respondToName`. These states are connected via `exits`. The exit on `origin` has no conditions, and therefore is entered immediately by the Pointer. The exit in the state `name` requires some form of user input indicated by the asterisk. This exit has an action associated with it in the form `name=INPUT`. `INPUT` is a special variable indicating the user's input. `name=INPUT` has the effect that the variable `name` is assigned to what the user entered, and is saved in the blackboard. In state `respondToName` there is an `onEnterSay` behavior, which is similar to `onEnter`, but does not require extra single quotes around the text outputted. The blackboard variable `name` is accessed via Tracery syntax using `#/name#`.\n\nInteracting with this bot, you can see that the **viz** view displays the state graph, and the blackboard view displays the user-entered name.\n\n![](doc_images/kittens1.png?raw=true)\n\n### Suggestion chips\n\nUser interactions can be expedited though the use of suggestion chips. These are prompts that are shown to the user when interacting through text. \n\n```javascript\nbot = {\n  states: {\n    origin: {\n      onEnter: \"'You have a kitten!'\",\n      exits: \"->name\",\n    },\n    name: {\n      onEnter: \"'What do you want to name your kitten?'\",\n      chips: [\"Cupcake\", \"Dark Lord Satan\"],\n      exits: \"'*' ->respond_to_name name=INPUT\",\n    },\n    respond_to_name: {\n      onEnterSay: \"The kitten purrs happily, I guess it likes the name #/name#!\",\n    },\n  },\n}\n```\n\n### Adding Tracery grammar\n\nA little more flavor can be added using a Tracery grammar:\n\n```javascript\nbot = {\n  grammar: {\n    noun: [\"cat\", \"monkey\",\"butter\", \"pants\", \"demon\", \"fluff\", \"taco\", \"mountain\", \"butt\"],\n    adj: [\"fluffy\", \"fat\", \"puff\", \"tepid\", \"love\", \"unruly\"],\n    name: [\"#noun.capitalize##noun#\", \"#adj.capitalize##noun#\", \"#noun.capitalize# the #adj.capitalize#\"],\n  },\n  states: {\n    origin: {\n      onEnter: \"'You have a kitten!'\",\n      exits: \"->name\",\n    },\n    name: {\n      onEnter: \"'What do you want to name your kitten?'\",\n      chips: [\"#name#\", \"#name#\", \"Cupcake\", \"Dark Lord Satan\"],\n      exits: \"'*' ->respond_to_name name=INPUT\",\n    },\n    respond_to_name: {\n      onEnterSay: \"The kitten purrs happily, I guess it likes the name #/name#!\",\n    },\n  },\n}\n```\n\n![](doc_images/kittens2.png?raw=true)\n\n### Petting the kitten\n\nWhat are some of the things that a user might want to do with a kitten bot? A natural thing to do would be to pet the kitten. Real life kittens are temperamental creatures, and can behave unpredictably. We can use the blackboard to store a variable indicating the number of times the kitten wants to be petted, and anything beyond that will cause the kitten to bite the user.\n\n```javascript\nbot = {\n  grammar: {\n    noun: [\"cat\", \"monkey\",\"butter\", \"pants\", \"demon\", \"fluff\", \"taco\", \"mountain\", \"butt\"],\n    adj: [\"fluffy\", \"fat\", \"puff\", \"tepid\", \"love\", \"unruly\"],\n    name: [\"#noun.capitalize##noun#\", \"#adj.capitalize##noun#\", \"#noun.capitalize# the #adj.capitalize#\"],\n  },\n  states: {\n    origin: {\n      onEnter: \"'You have a kitten!' desired_pets=randomInt(1,5)\",\n      exits: \"->name\",\n    },\n    name: {\n      onEnter: \"'What do you want to name your kitten?'\",\n      chips: [\"#name#\", \"#name#\", \"Cupcake\", \"Dark Lord Satan\"],\n      exits: \"'*' ->respond_to_name name=INPUT\",\n    },\n    respond_to_name: {\n      onEnterSay: \"The kitten purrs happily, I guess it likes the name #/name#!\",\n    },\n    pet: {\n      onEnter: \"'You pet the kitten' desired_pets--\",\n      exits: [\"desired_pets>=0 ->happy_pet\", \"->angry_pet\"]\n    },\n    happy_pet: {\n      onEnterSay: \"#/name# loves you and is in ecstacy\",\n    },\n    angry_pet: {\n      onEnterSay: \"why did you pet #/name# when it didn't want to be petted!?\",\n      onEnter: \"desired_pets=randomInt(1,5)\",\n    }\n  },\n  exits: \"'pet' ->pet\",\n  initialBlackboard: {\n    name: \"the kitten\",\n  },\n}\n```\n\nThis example adds a global exit. No matter where the Pointer is at on the graph, the user can always pet the kitten. This introduces a problem, though, because the user could potentially pet the kitten before it was named, so an initial value for the name is configured in the blackboard. When the origin is entered, the variable `desired_pets` is set to a random value between 1 and 5. When the user pets the kitten too much, the `angry_pet` node is entered. \n\n![](doc_images/kittens3.png?raw=true)\n\n### State flow\n\nFinally, we should add some idle behavior for the kitten when it is not being petted.\n\n```javascript\nbot = {\n  grammar: {\n    noun: [\"cat\", \"monkey\",\"butter\", \"pants\", \"demon\", \"fluff\", \"taco\", \"mountain\", \"butt\"],\n    adj: [\"fluffy\", \"fat\", \"puff\", \"tepid\", \"love\", \"unruly\"],\n    name: [\"#noun.capitalize##noun#\", \"#adj.capitalize##noun#\", \"#noun.capitalize# the #adj.capitalize#\"],\n    catSpeak: [\"mmrrr\", \"meow\", \"mmrrrrow\", \"meep\", \"#catSpeak# #catSpeak#\"],\n  },\n  states: {\n    origin: {\n      onEnter: \"'You have a kitten!' desired_pets=randomInt(1,5)\",\n      exits: \"->name\",\n    },\n    name: {\n      onEnter: \"'What do you want to name your kitten?'\",\n      chips: [\"#name#\", \"#name#\", \"Cupcake\", \"Dark Lord Satan\"],\n      exits: \"'*' ->respond_to_name name=INPUT\",\n    },\n    respond_to_name: {\n      onEnterSay: \"The kitten purrs happily, I guess it likes the name #/name#!\",\n      exits: \"->idle\"\n    },\n    pet: {\n      onEnter: \"'You pet the kitten' desired_pets--\",\n      exits: [\"desired_pets>=0 ->happy_pet\", \"->angry_pet\"]\n    },\n    happy_pet: {\n      onEnterSay: \"#/name# loves you and is in ecstacy\",\n      exits: \"wait:10 ->idle\"\n    },\n    angry_pet: {\n      onEnterSay: \"why did you pet #/name# when it didn't want to be petted!?\",\n      onEnter: \"desired_pets=randomInt(1,5)\",\n      exits: \"->angry\"\n    },\n    idle: {\n      onEnterSay: \"#/name# rolls around and makes cute noises\",\n      exits: \"wait:10 ->hungry\",\n    },\n    angry: {\n      onEnter: \"'The kitten is angry! *bite*'\",\n      exits: \"wait:10 ->sleeping\",\n    },\n    sleeping: {\n      onEnter: \"'The kitten is sleeping! zzzzzzzzz'\",\n      exits: \"wait:10 ->hungry\",\n    },\n    hungry: {\n      onEnter: \"'The kitten is hungry! meow meow #catSpeak#'\",\n      exits: \"wait:10 ->angry\",\n    },\n  },\n  exits: \"'pet' ->pet\",\n  initialBlackboard: {\n    name: \"the kitten\",\n  },\n}\n```\n\nThis final example adds state transitions that form a cycle of activity. If no interaction occurs, the kitten will naturally cycle between the states of `hungry`, `sleeping`, and `angry`. The `wait:10` condition on the exit will delay for a particular amount of time before automatically advancing into that state. \n\n![](doc_images/kittens4.png?raw=true)\n\n### Additional resources.\n\nThis concludes the tutorial. For more examples of types of bots, check out:\n* `amIPsychic.js` This is a simple guessing game where the user guesses whether a random coin will flip heads or tails. The bot tracks the longest winning and losing streak.\n* `quiz.js` A basic quiz game where the user answers questions and these are used to determine a Hip Hop DJ name.\n* `tesla.js` A bot based on the tracery [twitter bot](https://twitter.com/losttesla) of the same name.\n\n"
        },
        {
          "name": "bots",
          "type": "tree",
          "content": null
        },
        {
          "name": "css",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc_images",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 2.34765625,
          "content": "<!--\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n-->\n<!doctype html>\n\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n\n  <title>Bottery</title>\n  <meta name=\"application-name\" content=\"Bottery\">\n  <meta name=\"description\" content=\"Bottery is a syntax, editor, and simulator for prototyping generative contextual conversations modeled as finite state machines.\">\n  <meta name=\"author\" content=\"Kate Compton\">\n\n  <link rel=\"stylesheet\" href=\"css/jquery-ui.min.css?v=1.1\">\n  \n  <link rel=\"stylesheet\" href=\"css/page.css?v=1.1\">\n  <link rel=\"stylesheet\" href=\"css/viz.css?v=1.1\">\n  <link rel=\"stylesheet\" href=\"css/chat.css?v=1.1\">\n</head>\n\n<body>\n  \n  <main id=\"content\">\n    <div class=\"header\">\n      <div id=\"main-controls\" class=\"controls\">\n      </div>\n    </div>\n\n    <div id=\"main\">\n      <div id=\"panel-holder\">\n      </div>\n    </div>\n    <div id=\"footer\">\n    </div>\n  </main>\n  \n  <script src=\"js/vendor/jquery-3.2.1.min.js\"></script>\n  <script src=\"js/vendor/jquery-ui.min.js\"></script>\n\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/cytoscape/2.7.0/cytoscape.js\"></script>\n  <script src=\"http://marvl.infotech.monash.edu/webcola/cola.v3.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/gh/cytoscape/cytoscape.js-cola@1.1.1/cytoscape-cola.js\"></script>\n\n  <script src=\"https://cdn.jsdelivr.net/gh/galaxykate/tracery-sugar@00e7fc454a54ee270bb1809f354efee925dc6a66/js/tracery/tracery.js\"></script>\n  \n  <script src=\"js/bots.js\"></script>\n\n  <script src=\"js/editor.js\"></script>\n  <script src=\"js/blackboard2.js\"></script>\n  <script src=\"js/parsingDiagrams.js\"></script>\n  \n  <script src=\"js/chat.js\"></script>\n  <script src=\"js/io.js\"></script>\n  <script src=\"js/map.js\"></script>\n  <script src=\"js/pointer.js\"></script>\n  <script src=\"js/viz.js\"></script>\n  <script src=\"js/controls.js\"></script>\n  <script src=\"js/app.js\"></script>\n</body>\n</html>\n"
        },
        {
          "name": "js",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}