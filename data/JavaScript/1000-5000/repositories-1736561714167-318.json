{
  "metadata": {
    "timestamp": 1736561714167,
    "page": 318,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MrRio/vtop",
      "stars": 4131,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "*.swp\nnode_modules/\nnpm-debug.log\n"
        },
        {
          "name": ".npm_ignore",
          "type": "blob",
          "size": 0.0126953125,
          "content": "node_modules\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1328125,
          "content": "language: node_js\nnode_js:\n  - 6\n  - 7\n  - 8\ninstall:\n  - npm -g install yarn\n  - yarn\ncache:\n  directories:\n    - ~/.yarn\n    - ~/.nvm\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.1728515625,
          "content": "# Changelog\n\n## 0.5.0\n\n- Upgrade drawille and blessed deps\n\n## 0.4.10\n\n- Fix for issue #2 where people had set a different TERM variable\n\n## 0.4.6\n\n- Fix for systems that called the node binary 'nodejs'\n\n## 0.4.0\n\n- Add sort by CPU and Memory\n\n## 0.3.3\n\n- Fix bug after auto update showing multiple selected items\n\n## 0.3.2\n\n- Add colors for item selection to the other themes\n\n## 0.3.1\n\n- Add keyboard and mouse support\n- Add killall support\n\n## 0.2.8\n\n- Improve Makefile\n\n## 0.2.7 - 2014-06-12\n\n- Add Becca theme. http://www.zeldman.com/2014/06/10/the-color-purple/\n\n## 0.2.6 - 2014-06-11\n\n- Fix major perf problem that some users were having relating to \n  drawing the header for update notifications.\n\n## 0.2.5\n\n- Delete old data points to improve performance\n\n## 0.2.4, 0.2.3, 0.2.2 - 2014-06-11\n\n- Fixes to the upgrade script\n- Added --version and -V command line arguments for version\n\n## 0.2.0 - 2014-06-11\n\n- Add new theme 'dark'\n- Add auto-update mechanism\n\n## 0.1.7 - 2014-06-11\n\n- Add a fix for user submitted ps outputs - #5 #6 #7\n- Fix issue with 'NaN' appearing for some users\n\n## 0.1.4 - 2014-06-09\n\n- Slice the row strings smaller in table view\n\n## 0.1.0 - 2014-06-08\n\n- First release"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0712890625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 James Hall, Parallax Agency Ltd\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.5361328125,
          "content": "all:\n\tnpm install\n\ntest:\n\t# todo - Add unit tests here\n\t@echo \"Testing...\"\n\t@echo \"\"\n\t@echo \"Performance stats after 5 seconds:\"\n\t@screen time node app.js --quit-after 5\n\nrelease-patch: test\n\tnpm version patch -m \"Release vtop patch version %s\"\n\tsudo npm publish\n\tgit push origin master\n\nrelease-minor: test\n\tnpm version minor -m \"Release vtop minor version %s\"\n\tsudo npm publish\n\tgit push origin master\n\nrelease-major: test\n\tnpm version major -m \"Release vtop major version %s\"\n\tsudo npm publish\n\tgit push origin master\n\nclean:\n\trm -Rf node_modules"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.96875,
          "content": "vtop\n=========\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/MrRio/vtop.svg)](https://greenkeeper.io/) [![Build Status](https://travis-ci.org/MrRio/vtop.svg?branch=master)](https://travis-ci.org/MrRio/vtop)\n\nA graphical activity monitor for the command line.\n\n![](https://raw.githubusercontent.com/MrRio/vtop/master/docs/example.gif)\n\nHow to install\n---\n\nIf you haven't already got Node.js, then [go get it](http://nodejs.org/).\n\n```\nnpm install -g vtop\n```\n\nIf you're on macOS, or get an error about file permissions, you may need to do ```sudo npm install -g vtop```. Don't do this if you're using [nvm](https://github.com/creationix/nvm).\n\nRunning\n---\n\nThis is pretty simple too.\n\n```\nvtop\n```\n\nIf you *really* like vtop, but your finger muscle memory means you keep typing 'top' then why not add an alias to ~/.bashrc.\n\n```\nalias top=\"vtop\"\nalias oldtop=\"/usr/bin/top\"\n```\n\nKeyboard shortcuts\n---\n\n* Press 'u' to update to the latest version of vtop.\n* Arrow up or k to move up the process list.\n* Arrow down or j to move down.\n* Arrow left or h to zoom the graphs in.\n* Arrow right or l to zoom the graphs out.\n* g to go to the top of the process list.\n* G to move to the end of the list.\n* dd to kill all the processes in that group\n\nMouse control\n---\n\nIf your terminal supports mouse events (like iTerm) then\nyou can click on the items in the process list. As well as\nuse the scroll wheel. You can disable mouse control with\nthe `vtop --no-mouse` option.\n\nFAQs\n----\n\n### How does it work?\n\nIt uses [drawille](https://github.com/madbence/node-drawille) to draw CPU and Memory charts with Unicode braille characters, helping you visualize spikes. We also group processes with the same name together.\n\n### I think the CPU % is coming out wrong.\n\nWe calculate the CPU percentage as a total of your overall system power. 100% is all cores and HyperThreads maxed out. This is different to how Apple Activity monitor works.\n\n### Can I change the color scheme?\n\nSure, just do:\n\n```\nvtop --theme wizard\n```\n\nThis loads the theme file in themes/ with the same name. Make your own and send me a Pull Request :)\n\nYou could add this to your aliases if you'd like to use it always.\n\n```\nalias vtop=\"vtop --theme brew\"\n```\n\n### What about measuring server req/s, log entries, etc etc?\n\nYeah that's on the list :) Feel free to send a pull request though. Check out the sensors/ folder.\n\n### What license is this under?\n\nMIT – do what you like with it :)\n\n### Contributing \n\nGet stuck in – click the fork button, then clone to your local machine. Use the [GitHub Desktop client](https://desktop.github.com/) if you don't know Git. Tinker with the code then run this from the command line:\n\n```\n./bin/vtop.js\n```\n\nWhen you push it'll run the Standard JS checker http://standardjs.com/. If you run 'npm test' in your own terminal too, this runs in Travis, your PR will fail the test if this command fails.\n\n[![Standard - JavaScript Style Guide](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\n\n"
        },
        {
          "name": "app.js",
          "type": "blob",
          "size": 18.4365234375,
          "content": "'use strict'\n\nconst App = ((() => {\n  // Load in required libs\n  const Canvas = require('drawille')\n  const blessed = require('blessed')\n  const os = require('os')\n  const cli = require('commander')\n  const upgrade = require('./upgrade.js')\n  const VERSION = require('./package.json').version\n  const childProcess = require('child_process')\n  const glob = require('glob')\n  const path = require('path')\n  let themes = ''\n  let program = blessed.program()\n\n  const files = glob.sync(path.join(__dirname, 'themes', '*.json'))\n  for (var i = 0; i < files.length; i++) {\n    let themeName = files[i].replace(path.join(__dirname, 'themes') + path.sep, '').replace('.json', '')\n    themes += `${themeName}|`\n  }\n  themes = themes.slice(0, -1)\n\n  // Set up the commander instance and add the required options\n  cli\n    .option('-t, --theme  [name]', `set the vtop theme [${themes}]`, 'parallax')\n    .option('--no-mouse', 'Disables mouse interactivity')\n    .option('--quit-after [seconds]', 'Quits vtop after interval', '0')\n    .option('--update-interval [milliseconds]', 'Interval between updates', '300')\n    .version(VERSION)\n    .parse(process.argv)\n\n  /**\n   * Instance of blessed screen, and the charts object\n   */\n  let screen\n  const charts = []\n  let loadedTheme\n  const intervals = []\n\n  let upgradeNotice = false\n  let disableTableUpdate = false\n  let disableTableUpdateTimeout = setTimeout(() => {}, 0)\n\n  let graphScale = 1\n\n  // Private variables\n\n  /**\n   * This is the number of data points drawn\n   * @type {Number}\n   */\n  let position = 0\n\n  const size = {\n    pixel: {\n      width: 0,\n      height: 0\n    },\n    character: {\n      width: 0,\n      height: 0\n    }\n  }\n\n  // @todo: move this into charts array\n  // This is an instance of Blessed Box\n  let graph\n\n  let graph2\n  let processList\n  let processListSelection\n\n  // Private functions\n\n  /**\n   * Draw header\n   * @param  {string} left  This is the text to go on the left\n   * @param  {string} right This is the text for the right\n   * @return {void}\n   */\n  const drawHeader = () => {\n    let headerText\n    let headerTextNoTags\n    if (upgradeNotice) {\n      upgradeNotice = `${upgradeNotice}`\n      headerText = ` {bold}vtop{/bold}{white-fg} for ${os.hostname()} {red-bg} Press 'u' to upgrade to v${upgradeNotice} {/red-bg}{/white-fg}`\n      headerTextNoTags = ` vtop for ${os.hostname()}  Press 'u' to upgrade to v${upgradeNotice} `\n    } else {\n      headerText = ` {bold}vtop{/bold}{white-fg} for ${os.hostname()} `\n      headerTextNoTags = ` vtop for ${os.hostname()} `\n    }\n\n    const header = blessed.text({\n      top: 'top',\n      left: 'left',\n      width: headerTextNoTags.length,\n      height: '1',\n      fg: loadedTheme.title.fg,\n      content: headerText,\n      tags: true\n    })\n    const date = blessed.text({\n      top: 'top',\n      right: 0,\n      width: 9,\n      height: '1',\n      align: 'right',\n      content: '',\n      tags: true\n    })\n    const loadAverage = blessed.text({\n      top: 'top',\n      height: '1',\n      align: 'center',\n      content: '',\n      tags: true,\n      left: Math.floor(program.cols / 2 - (28 / 2))\n    })\n    screen.append(header)\n    screen.append(date)\n    screen.append(loadAverage)\n\n    const zeroPad = input => (`0${input}`).slice(-2)\n\n    const updateTime = () => {\n      const time = new Date()\n      date.setContent(`${zeroPad(time.getHours())}:${zeroPad(time.getMinutes())}:${zeroPad(time.getSeconds())} `)\n      screen.render()\n    }\n\n    const updateLoadAverage = () => {\n      const avg = os.loadavg()\n      loadAverage.setContent(`Load Average: ${avg[0].toFixed(2)} ${avg[1].toFixed(2)} ${avg[2].toFixed(2)}`)\n      screen.render()\n    }\n\n    updateTime()\n    updateLoadAverage()\n    setInterval(updateTime, 1000)\n    setInterval(updateLoadAverage, 1000)\n  }\n\n  /**\n   * Draw the footer\n   *\n   * @todo This appears to break on some viewports\n   */\n  const drawFooter = () => {\n    const commands = {\n      'dd': 'Kill process',\n      'j': 'Down',\n      'k': 'Up',\n      'g': 'Jump to top',\n      'G': 'Jump to bottom',\n      'c': 'Sort by CPU',\n      'm': 'Sort by Mem'\n    }\n    let text = ''\n    for (const c in commands) {\n      const command = commands[c]\n      text += `  {white-bg}{black-fg}${c}{/black-fg}{/white-bg} ${command}`\n    }\n    text += '{|}http://parall.ax/vtop'\n    const footerRight = blessed.box({\n      width: '100%',\n      top: program.rows - 1,\n      tags: true,\n      fg: loadedTheme.footer.fg\n    })\n    footerRight.setContent(text)\n    screen.append(footerRight)\n  }\n\n  /**\n   * Repeats a string\n   * @var string The string to repeat\n   * @var integer The number of times to repeat\n   * @return {string} The repeated chars as a string.\n   */\n  const stringRepeat = (string, num) => {\n    if (num < 0) {\n      return ''\n    }\n    return new Array(num + 1).join(string)\n  }\n\n  /**\n   * This draws a chart\n   * @param  {int} chartKey The key of the chart.\n   * @return {string}       The text output to draw.\n   */\n  const drawChart = chartKey => {\n    const chart = charts[chartKey]\n    const c = chart.chart\n    c.clear()\n\n    if (!charts[chartKey].plugin.initialized) {\n      return false\n    }\n\n    const dataPointsToKeep = 5000\n\n    charts[chartKey].values[position] = charts[chartKey].plugin.currentValue\n\n    const computeValue = input => chart.height - Math.floor(((chart.height + 1) / 100) * input) - 1\n\n    if (position > dataPointsToKeep) {\n      delete charts[chartKey].values[position - dataPointsToKeep]\n    }\n\n    for (const pos in charts[chartKey].values) {\n      if (graphScale >= 1 || (graphScale < 1 && pos % (1 / graphScale) === 0)) {\n        const p = parseInt(pos, 10) + (chart.width - charts[chartKey].values.length)\n        // calculated x-value based on graphScale\n        const x = (p * graphScale) + ((1 - graphScale) * chart.width)\n\n        // draws top line of chart\n        if (p > 1 && computeValue(charts[chartKey].values[pos - 1]) > 0) {\n          c.set(x, computeValue(charts[chartKey].values[pos - 1]))\n        }\n\n        // Start deleting old data points to improve performance\n        // @todo: This is not be the best place to do this\n\n        // fills all area underneath top line\n        for (let y = computeValue(charts[chartKey].values[pos - 1]); y < chart.height; y++) {\n          if (graphScale > 1 && p > 0 && y > 0) {\n            const current = computeValue(charts[chartKey].values[pos - 1])\n            const next = computeValue(charts[chartKey].values[pos])\n            const diff = (next - current) / graphScale\n\n            // adds columns between data if graph is zoomed in, takes average where data is missing to make smooth curve\n            for (let i = 0; i < graphScale; i++) {\n              c.set(x + i, y + (diff * i))\n              for (let j = y + (diff * i); j < chart.height; j++) {\n                c.set(x + i, j)\n              }\n            }\n          } else if (graphScale <= 1) {\n            // magic number used to calculate when to draw a value onto the chart\n            // @TODO: Remove this?\n            // var allowedPValues = (charts[chartKey].values.length - ((graphScale * charts[chartKey].values.length) + 1)) * -1\n            c.set(x, y)\n          }\n        }\n      }\n    }\n\n    // Add percentage to top right of the chart by splicing it into the braille data\n    const textOutput = c.frame().split('\\n')\n    const percent = `   ${chart.plugin.currentValue}`\n    textOutput[0] = `${textOutput[0].slice(0, textOutput[0].length - 4)}{white-fg}${percent.slice(-3)}%{/white-fg}`\n\n    return textOutput.join('\\n')\n  }\n\n  /**\n   * Draws a table.\n   * @param  {int} chartKey The key of the chart.\n   * @return {string}       The text output to draw.\n   */\n  const drawTable = chartKey => {\n    const chart = charts[chartKey]\n    const columnLengths = {}\n    // Clone the column array\n    const columns = chart.plugin.columns.slice(0)\n    columns.reverse()\n    let removeColumn = false\n    const lastItem = columns[columns.length - 1]\n\n    const minimumWidth = 12\n    let padding = 1\n\n    if (chart.width > 50) {\n      padding = 2\n    }\n\n    if (chart.width > 80) {\n      padding = 3\n    }\n    // Keep trying to reduce the number of columns\n    do {\n      let totalUsed = 0\n      let firstLength = 0\n      // var totalColumns = columns.length\n      // Allocate space for each column in reverse order\n      for (const column in columns) {\n        const item = columns[column]\n        i++\n        // If on the last column (actually first because of array order)\n        // then use up all the available space\n        if (item === lastItem) {\n          columnLengths[item] = chart.width - totalUsed\n          firstLength = columnLengths[item]\n        } else {\n          columnLengths[item] = item.length + padding\n        }\n        totalUsed += columnLengths[item]\n      }\n      if (firstLength < minimumWidth && columns.length > 1) {\n        totalUsed = 0\n        columns.shift()\n        removeColumn = true\n      } else {\n        removeColumn = false\n      }\n    } while (removeColumn)\n\n    // And back again\n    columns.reverse()\n    let titleOutput = '{bold}'\n    for (const headerColumn in columns) {\n      var colText = ` ${columns[headerColumn]}`\n      titleOutput += (colText + stringRepeat(' ', columnLengths[columns[headerColumn]] - colText.length))\n    }\n    titleOutput += '{/bold}' + '\\n'\n\n    const bodyOutput = []\n    for (const row in chart.plugin.currentValue) {\n      const currentRow = chart.plugin.currentValue[row]\n      let rowText = ''\n      for (const bodyColumn in columns) {\n        let colText = ` ${currentRow[columns[bodyColumn]]}`\n        rowText += (colText + stringRepeat(' ', columnLengths[columns[bodyColumn]] - colText.length)).slice(0, columnLengths[columns[bodyColumn]])\n      }\n      bodyOutput.push(rowText)\n    }\n    return {\n      title: titleOutput,\n      body: bodyOutput,\n      processWidth: columnLengths[columns[0]]\n    }\n  }\n\n  // This is set to the current items displayed\n  let currentItems = []\n  let processWidth = 0\n  /**\n   * Overall draw function, this should poll and draw results of\n   * the loaded sensors.\n   */\n  const draw = () => {\n    position++\n\n    const chartKey = 0\n    graph.setContent(drawChart(chartKey))\n    graph2.setContent(drawChart(chartKey + 1))\n\n    if (!disableTableUpdate) {\n      const table = drawTable(chartKey + 2)\n      processList.setContent(table.title)\n\n      // If we keep the stat numbers the same immediately, then update them\n      // after, the focus will follow. This is a hack.\n\n      const existingStats = {}\n      // Slice the start process off, then store the full stat,\n      // so we can inject the same stat onto the new order for a brief render\n      // cycle.\n      for (var stat in currentItems) {\n        var thisStat = currentItems[stat]\n        existingStats[thisStat.slice(0, table.processWidth)] = thisStat\n      }\n      processWidth = table.processWidth\n      // Smush on to new stats\n      const tempStats = []\n      for (let stat in table.body) {\n        let thisStat = table.body[stat]\n        tempStats.push(existingStats[thisStat.slice(0, table.processWidth)])\n      }\n      // Move cursor position with temp stats\n      // processListSelection.setItems(tempStats);\n\n      // Update the numbers\n      processListSelection.setItems(table.body)\n\n      processListSelection.focus()\n\n      currentItems = table.body\n    }\n\n    screen.render()\n  }\n\n  // Public function (just the entry point)\n  return {\n\n    init () {\n      let theme\n      if (typeof process.theme !== 'undefined') {\n        theme = process.theme\n      } else {\n        theme = cli.theme\n      }\n      /**\n       * Quits running vtop after so many seconds\n       * This is mainly for perf testing.\n       */\n      if (cli['quitAfter'] !== '0') {\n        setTimeout(() => {\n          process.exit(0)\n        }, parseInt(cli['quitAfter'], 10) * 1000)\n      }\n\n      try {\n        loadedTheme = require(`./themes/${theme}.json`)\n      } catch (e) {\n        console.log(`The theme '${theme}' does not exist.`)\n        process.exit(1)\n      }\n      // Create a screen object.\n      screen = blessed.screen()\n\n      // Configure 'q', esc, Ctrl+C for quit\n      let upgrading = false\n\n      const doCheck = () => {\n        upgrade.check(v => {\n          upgradeNotice = v\n          drawHeader()\n        })\n      }\n\n      doCheck()\n      // Check for updates every 5 minutes\n      // setInterval(doCheck, 300000);\n\n      let lastKey = ''\n\n      screen.on('keypress', (ch, key) => {\n        if (key === 'up' || key === 'down' || key === 'k' || key === 'j') {\n          // Disable table updates for half a second\n          disableTableUpdate = true\n          clearTimeout(disableTableUpdateTimeout)\n          disableTableUpdateTimeout = setTimeout(() => {\n            disableTableUpdate = false\n          }, 1000)\n        }\n\n        if (\n          upgrading === false &&\n          (\n            key.name === 'q' ||\n            key.name === 'escape' ||\n            (key.name === 'c' && key.ctrl === true)\n          )\n        ) {\n          return process.exit(0)\n        }\n        // dd killall\n        // @todo: Factor this out\n        if (lastKey === 'd' && key.name === 'd') {\n          let selectedProcess = processListSelection.getItem(processListSelection.selected).content\n          selectedProcess = selectedProcess.slice(0, processWidth).trim()\n\n          childProcess.exec(`killall \"${selectedProcess}\"`, () => {})\n        }\n\n        if (key.name === 'c' && charts[2].plugin.sort !== 'cpu') {\n          charts[2].plugin.sort = 'cpu'\n          charts[2].plugin.poll()\n          setTimeout(() => {\n            processListSelection.select(0)\n          }, 200)\n        }\n        if (key.name === 'm' && charts[2].plugin.sort !== 'mem') {\n          charts[2].plugin.sort = 'mem'\n          charts[2].plugin.poll()\n          setTimeout(() => {\n            processListSelection.select(0)\n          }, 200)\n        }\n        lastKey = key.name\n\n        if (key.name === 'u' && upgrading === false) {\n          upgrading = true\n          // Clear all intervals\n          for (const interval in intervals) {\n            clearInterval(intervals[interval])\n          }\n          processListSelection.detach()\n          program = blessed.program()\n          program.clear()\n          program.disableMouse()\n          program.showCursor()\n          program.normalBuffer()\n\n          // @todo: show changelog  AND  smush existing data into it :D\n          upgrade.install('vtop', [\n            {\n              'theme': theme\n            }\n          ])\n        }\n\n        if ((key.name === 'left' || key.name === 'h') && graphScale < 8) {\n          graphScale *= 2\n        } else if ((key.name === 'right' || key.name === 'l') && graphScale > 0.125) {\n          graphScale /= 2\n        }\n      })\n\n      drawHeader()\n\n      // setInterval(drawHeader, 1000);\n      drawFooter()\n\n      graph = blessed.box({\n        top: 1,\n        left: 'left',\n        width: '100%',\n        height: '50%',\n        content: '',\n        fg: loadedTheme.chart.fg,\n        tags: true,\n        border: loadedTheme.chart.border\n      })\n\n      screen.append(graph)\n\n      let graph2appended = false\n\n      const createBottom = () => {\n        if (graph2appended) {\n          screen.remove(graph2)\n          screen.remove(processList)\n        }\n        graph2appended = true\n        graph2 = blessed.box({\n          top: graph.height + 1,\n          left: 'left',\n          width: '50%',\n          height: graph.height - 2,\n          content: '',\n          fg: loadedTheme.chart.fg,\n          tags: true,\n          border: loadedTheme.chart.border\n        })\n        screen.append(graph2)\n\n        processList = blessed.box({\n          top: graph.height + 1,\n          left: '50%',\n          width: screen.width - graph2.width,\n          height: graph.height - 2,\n          keys: true,\n          mouse: cli.mouse,\n          fg: loadedTheme.table.fg,\n          tags: true,\n          border: loadedTheme.table.border\n        })\n        screen.append(processList)\n\n        processListSelection = blessed.list({\n          height: processList.height - 3,\n          top: 1,\n          width: processList.width - 2,\n          left: 0,\n          keys: true,\n          vi: true,\n          search (jump) {\n            // @TODO\n            // jump('string of thing to jump to');\n          },\n          style: loadedTheme.table.items,\n          mouse: cli.mouse\n        })\n        processList.append(processListSelection)\n        processListSelection.focus()\n        screen.render()\n      }\n\n      screen.on('resize', () => {\n        createBottom()\n      })\n      createBottom()\n\n      screen.append(graph)\n      screen.append(processList)\n\n      // Render the screen.\n      screen.render()\n\n      const setupCharts = () => {\n        size.pixel.width = (graph.width - 2) * 2\n        size.pixel.height = (graph.height - 2) * 4\n\n        const plugins = ['cpu', 'memory', 'process']\n\n        for (const plugin in plugins) {\n          let width\n          let height\n          let currentCanvas\n          // @todo Refactor this\n          switch (plugins[plugin]) {\n            case 'cpu':\n              width = (graph.width - 3) * 2\n              height = (graph.height - 2) * 4\n              currentCanvas = new Canvas(width, height)\n              break\n            case 'memory':\n              width = (graph2.width - 3) * 2\n              height = ((graph2.height - 2) * 4)\n              currentCanvas = new Canvas(width, height)\n              break\n            case 'process':\n              width = processList.width - 3\n              height = processList.height - 2\n              break\n          }\n\n          // If we're reconfiguring a plugin, then preserve the already recorded values\n          let values\n          if (typeof charts[plugin] !== 'undefined' && typeof charts[plugin].values !== 'undefined') {\n            values = charts[plugin].values\n          } else {\n            values = []\n          }\n          charts[plugin] = {\n            chart: currentCanvas,\n            values,\n            plugin: require(`./sensors/${plugins[plugin]}.js`),\n            width,\n            height\n          }\n          charts[plugin].plugin.poll()\n        }\n        // @TODO Make this less hard-codey\n        graph.setLabel(` ${charts[0].plugin.title} `)\n        graph2.setLabel(` ${charts[1].plugin.title} `)\n        processList.setLabel(` ${charts[2].plugin.title} `)\n      }\n\n      setupCharts()\n      screen.on('resize', setupCharts)\n      intervals.push(setInterval(draw, parseInt(cli['updateInterval'], 10)))\n\n      // @todo Make this more sexy\n      intervals.push(setInterval(charts[0].plugin.poll, charts[0].plugin.interval))\n      intervals.push(setInterval(charts[1].plugin.poll, charts[1].plugin.interval))\n      intervals.push(setInterval(charts[2].plugin.poll, charts[2].plugin.interval))\n    }\n  }\n})())\n\nApp.init()\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.82421875,
          "content": "{\n  \"name\": \"vtop\",\n  \"version\": \"0.6.1\",\n  \"description\": \"Wow such top. So stats\",\n  \"homepage\": \"http://parall.ax/vtop\",\n  \"main\": \"app.js\",\n  \"preferGlobal\": true,\n  \"engines\": {\n    \"node\": \">= 4\"\n  },\n  \"scripts\": {\n    \"test\": \"make test\",\n    \"precommit\": \"standard\"\n  },\n  \"standard\": {\n    \"ignore\": [\n      \"bin/vtop.js\"\n    ]\n  },\n  \"bin\": {\n    \"vtop\": \"./bin/vtop.js\"\n  },\n  \"author\": {\n    \"name\": \"James Hall\",\n    \"email\": \"james@parall.ax\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:MrRio/vtop.git\"\n  },\n  \"license\": \"MIT\",\n  \"readmeFilename\": \"README.md\",\n  \"dependencies\": {\n    \"blessed\": \"0.1.81\",\n    \"commander\": \"2.11.0\",\n    \"drawille\": \"1.1.0\",\n    \"glob\": \"7.1.2\",\n    \"husky\": \"^0.14.3\",\n    \"os-utils\": \"0.0.14\",\n    \"read\": \"1.0.7\",\n    \"sudo\": \"1.0.3\",\n    \"use-strict\": \"^1.0.1\"\n  }\n}\n"
        },
        {
          "name": "sensors",
          "type": "tree",
          "content": null
        },
        {
          "name": "themes",
          "type": "tree",
          "content": null
        },
        {
          "name": "upgrade.js",
          "type": "blob",
          "size": 2.2978515625,
          "content": "/**\n * npm package updater\n *\n * @copyright 2014 James HAll\n *\n * This will detect if a package needs and update,\n * and also update it\n */\n\nvar upgrade = (function () {\n  return {\n    /**\n     * Should call the callback with a new version number, or false\n     */\n    check: function (callback) {\n      try {\n        var packageObj = require('./package.json')\n\n        var childProcess = require('child_process')\n        childProcess.exec('npm info --json ' + packageObj.name, function (error, stdout, stderr) {\n          if (error) {\n            callback(null, null)\n            return\n          }\n          var output\n          try {\n            output = JSON.parse(stdout)\n          } catch (e) {\n            callback(null, null)\n            return\n          }\n          if (output['dist-tags']['latest'] !== packageObj.version) {\n            callback(output['dist-tags']['latest'])\n          } else {\n            callback(null, null)\n          }\n        })\n      } catch (e) {\n        callback(null, null)\n      }\n    },\n    /**\n     * This will install the update and relaunch\n     */\n    install: function (packageName, vars) {\n      var sudo = require('sudo')\n      console.log('')\n      console.log('Installing vtop update...')\n      console.log('')\n      console.log(' ** You will need to enter your password to upgrade ** ')\n      console.log('')\n\n      var args = ['npm', 'install', '-g', 'vtop']\n      console.log(args.join(' '))\n\n      var options = {\n        cachePassword: false,\n        prompt: 'Password:',\n        spawnOptions: { stdio: 'inherit' }\n      }\n      var child = sudo(args, options)\n\n      var path = false\n      child.stdout.on('data', function (data) {\n        console.log(data.toString())\n\n        if (data.toString().indexOf('vtop.js') !== -1) {\n          path = data.toString().trim().split(' ')[2]\n        }\n      })\n      child.stderr.on('data', function (data) {\n        console.log(data.toString())\n      })\n\n      child.on('close', function () {\n        for (var file in require.cache) {\n          delete require.cache[file]\n        }\n        console.log('Finished updating. Clearing cache and relaunching...')\n        setTimeout(function () {\n          for (var v in vars) {\n            process[v] = vars[v]\n          }\n          require(path)\n        }, 1000)\n      })\n    }\n  }\n}())\n\nmodule.exports = upgrade\n"
        },
        {
          "name": "yarn.lock",
          "type": "blob",
          "size": 4.103515625,
          "content": "# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# yarn lockfile v1\n\n\nbalanced-match@^1.0.0:\n  version \"1.0.0\"\n  resolved \"https://registry.yarnpkg.com/balanced-match/-/balanced-match-1.0.0.tgz#89b4d199ab2bee49de164ea02b89ce462d71b767\"\n\nblessed@0.1.81:\n  version \"0.1.81\"\n  resolved \"https://registry.yarnpkg.com/blessed/-/blessed-0.1.81.tgz#f962d687ec2c369570ae71af843256e6d0ca1129\"\n\nbrace-expansion@^1.1.7:\n  version \"1.1.11\"\n  resolved \"https://registry.yarnpkg.com/brace-expansion/-/brace-expansion-1.1.11.tgz#3c7fcbf529d87226f3d2f52b966ff5271eb441dd\"\n  dependencies:\n    balanced-match \"^1.0.0\"\n    concat-map \"0.0.1\"\n\ncommander@2.11.0:\n  version \"2.11.0\"\n  resolved \"https://registry.yarnpkg.com/commander/-/commander-2.11.0.tgz#157152fd1e7a6c8d98a5b715cf376df928004563\"\n\nconcat-map@0.0.1:\n  version \"0.0.1\"\n  resolved \"https://registry.yarnpkg.com/concat-map/-/concat-map-0.0.1.tgz#d8a96bd77fd68df7793a73036a3ba0d5405d477b\"\n\ndrawille@1.1.0:\n  version \"1.1.0\"\n  resolved \"https://registry.yarnpkg.com/drawille/-/drawille-1.1.0.tgz#5f7cec246d31b5a10044be84cedd9a486fa31ced\"\n\nfs.realpath@^1.0.0:\n  version \"1.0.0\"\n  resolved \"https://registry.yarnpkg.com/fs.realpath/-/fs.realpath-1.0.0.tgz#1504ad2523158caa40db4a2787cb01411994ea4f\"\n\nglob@7.1.2:\n  version \"7.1.2\"\n  resolved \"https://registry.yarnpkg.com/glob/-/glob-7.1.2.tgz#c19c9df9a028702d678612384a6552404c636d15\"\n  dependencies:\n    fs.realpath \"^1.0.0\"\n    inflight \"^1.0.4\"\n    inherits \"2\"\n    minimatch \"^3.0.4\"\n    once \"^1.3.0\"\n    path-is-absolute \"^1.0.0\"\n\nhusky:\n  version \"0.11.9\"\n  resolved \"https://registry.yarnpkg.com/husky/-/husky-0.11.9.tgz#28cd1dc16bffdca1d4d93592814e5f3c327b38ee\"\n  dependencies:\n    is-ci \"^1.0.9\"\n    normalize-path \"^1.0.0\"\n\ninflight@^1.0.4:\n  version \"1.0.6\"\n  resolved \"https://registry.yarnpkg.com/inflight/-/inflight-1.0.6.tgz#49bd6331d7d02d0c09bc910a1075ba8165b56df9\"\n  dependencies:\n    once \"^1.3.0\"\n    wrappy \"1\"\n\ninherits@2:\n  version \"2.0.3\"\n  resolved \"https://registry.yarnpkg.com/inherits/-/inherits-2.0.3.tgz#633c2c83e3da42a502f52466022480f4208261de\"\n\ninpath@~1.0.2:\n  version \"1.0.2\"\n  resolved \"https://registry.yarnpkg.com/inpath/-/inpath-1.0.2.tgz#4ac219710ec7a72f460ff94bf424dd3ef0e52817\"\n\nis-ci@^1.0.9:\n  version \"1.0.9\"\n  resolved \"https://registry.yarnpkg.com/is-ci/-/is-ci-1.0.9.tgz#de2c5ffe49ab3237fda38c47c8a3bbfd55bbcca7\"\n\nminimatch@^3.0.4:\n  version \"3.0.4\"\n  resolved \"https://registry.yarnpkg.com/minimatch/-/minimatch-3.0.4.tgz#5166e286457f03306064be5497e8dbb0c3d32083\"\n  dependencies:\n    brace-expansion \"^1.1.7\"\n\nmute-stream@~0.0.4:\n  version \"0.0.6\"\n  resolved \"https://registry.yarnpkg.com/mute-stream/-/mute-stream-0.0.6.tgz#48962b19e169fd1dfc240b3f1e7317627bbc47db\"\n\nnormalize-path@^1.0.0:\n  version \"1.0.0\"\n  resolved \"https://registry.yarnpkg.com/normalize-path/-/normalize-path-1.0.0.tgz#32d0e472f91ff345701c15a8311018d3b0a90379\"\n\nonce@^1.3.0:\n  version \"1.4.0\"\n  resolved \"https://registry.yarnpkg.com/once/-/once-1.4.0.tgz#583b1aa775961d4b113ac17d9c50baef9dd76bd1\"\n  dependencies:\n    wrappy \"1\"\n\nos-utils@0.0.14:\n  version \"0.0.14\"\n  resolved \"https://registry.yarnpkg.com/os-utils/-/os-utils-0.0.14.tgz#29e511697b1982b8c627722175fe39797ef64156\"\n\npath-is-absolute@^1.0.0:\n  version \"1.0.1\"\n  resolved \"https://registry.yarnpkg.com/path-is-absolute/-/path-is-absolute-1.0.1.tgz#174b9268735534ffbc7ace6bf53a5a9e1b5c5f5f\"\n\npidof@~1.0.2:\n  version \"1.0.2\"\n  resolved \"https://registry.yarnpkg.com/pidof/-/pidof-1.0.2.tgz#fba0eae1c8335a11eb8099f5d0f3efbc45cb4e90\"\n\nread@1.0.7, read@~1.0.3:\n  version \"1.0.7\"\n  resolved \"https://registry.yarnpkg.com/read/-/read-1.0.7.tgz#b3da19bd052431a97671d44a42634adf710b40c4\"\n  dependencies:\n    mute-stream \"~0.0.4\"\n\nsudo@1.0.3:\n  version \"1.0.3\"\n  resolved \"https://registry.yarnpkg.com/sudo/-/sudo-1.0.3.tgz#ccf28669120f8b74f82b846dff7f1c95120eff20\"\n  dependencies:\n    inpath \"~1.0.2\"\n    pidof \"~1.0.2\"\n    read \"~1.0.3\"\n\nuse-strict:\n  version \"1.0.1\"\n  resolved \"https://registry.yarnpkg.com/use-strict/-/use-strict-1.0.1.tgz#0bb80d94f49a4a05192b84a8c7d34e95f1a7e3a0\"\n\nwrappy@1:\n  version \"1.0.2\"\n  resolved \"https://registry.yarnpkg.com/wrappy/-/wrappy-1.0.2.tgz#b5243d8f3ec1aa35f1364605bc0d1036e30ab69f\"\n"
        }
      ]
    }
  ]
}