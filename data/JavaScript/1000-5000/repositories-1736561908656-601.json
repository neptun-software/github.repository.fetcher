{
  "metadata": {
    "timestamp": 1736561908656,
    "page": 601,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "geuis/helium-css",
      "stars": 3619,
      "defaultBranch": "master",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.7265625,
          "content": "Helium is a tool for discovering unused CSS across many pages on a web site.\n\nThe tool is javascript-based and runs from the browser.\n\nHelium accepts a list of URLs for different sections of a site then loads and parses each page to build up a list of all stylesheets. It then visits each page in the URL list and checks if the selectors found in the stylesheets are used on the pages. Finally, it generates a report that details each stylesheet and the selectors that were not found to be used on any of the given pages.\n\n\n\n\n##### Note: You really should only run Helium on a local, development, or otherwise privately accessible version of your site. If you run this on your public site, every visitor will see the Helium test environment.\n\n#####  PLEASE READ THE \"IMPORTANT STUFF\" SECTION BELOW!!\n\n### Installation\n\n1. Add a script element somewhere on your site that is loaded into every page that will be tested. This is typically a header or footer section. The element looks like:\n\n\t```html\n\t<script type=\"text/javascript\" src=\"path/to/helium.js\"></script>\n\t```\n\t##### Note: path/to/helium.js needs to reflect the path of where you place the javascript file.\n  \n  If you would like to use a CDN hosted version of Helium, checkout https://cdnjs.com/libraries/helium-css.\n\n2. Helium is initiated by calling the method \"helium.init()\". This has to be placed somewhere on the page where it gets called after page load. An example of this is:\n\n\t```html\n\t<script type=\"text/javascript\">\n\t\twindow.addEventListener('load', function(){\n\t\t\t\n\t\t\thelium.init();\n\t\n\t\t}, false);\n\t</script>\n\t```\n\t##### Note: Depending on the javascript loading strategy your site employs, you may wish to place \"helium.init()\" within a location that executes javascript after page load.\n\n\n### Usage\n\n1. Once Helium is setup, when you load your site you will see a box with a textarea where you input your URL list.\n\n2. After you paste your list of links, click Start (lower left) to begin the process. Clicking \"Reset to Beginning\" clears the textarea and stored data.\n\n3. The test will proceed to load and process each url you gave. When it is finished, you are presented with a report window that lists each stylesheet URL that was detected. Under each stylesheet, it will list the CSS selectors that were not detected to be in use on any page. \n\n4. The selectors are color-coded. \n\n   * ##### Green: Unmatched selectors. \n   \tThese are the primary ones that were not detected as in-use.\n\n   * ##### Black: Matched selectors that are grouped with non-matched selectors. \n   \tBasically this means that multiple selectors were defined together like \"h1,h2,h3{}\". All selectors are tested individually so these are displayed to make them easier to find in the stylesheets later.\n\n   * ##### Red: Malformed selectors. \n   \tThese are likely to be rare. This means that when the browser tried testing for a selector, it can't parse the syntax of how it was written. This could be like \".classname# idname{}\" or a \"CSS hack\" often used for Internet Explorer.\n\n   * ##### Blue: Pseudo-class selector. \n  \tThese are selectors like \".div:hover\" or \"input:focus\". These are selectors that require user interaction to activate. Currently, Helium can't simulate the interactions required to see if these are found or not. It is the developer's responsibility to test for these manually.\n\n### Browser Support:\n\nAny modern browser that supports LocalStorage and document.querySelector.\n\nI have decided I will never adapt Helium to support IE6 or 7.\n\n### IMPORTANT STUFF:\n1. No cross-domain stylesheets: Helium has to load the stylesheets on your site via XHR in order to parse out the selectors to test. This means that all stylesheets URLs have to be on the same domain as the pages being tested. There's currently no back-end server to proxy requests, but this might be an option in the future.\n\n2. No javascript errors on your pages: If Helium is run on a page that has one or more javascript errors, it can easily prevent Helium and other scripts from running on the page. This will stop your tests dead in their tracks. Verify ahead of time that all of the URLs you are testing do not generate any javascript errors. If you aren't sure, try running some Helium tests and see what page it stops at. Check out your error consoles on such pages.\n\n3. No sitemap XML support: Right now, the URL list has to be line separated. No CSV or sitemap XML format is currently supported, though it will be in a future release.\n\n### Running the tests:\nHelium doesn't have actual unit tests yet. I've been meaning to add them for a while (years) and will soon.\n\nTo run the test pages, run a local server from the project root directory and hit http://localhost/test/test1.html. \n\nFor a very simple server example using Ruby (because its on most systems):\n\n    ruby -run -e httpd . -p 5000\n"
        },
        {
          "name": "component.json",
          "type": "blob",
          "size": 0.1474609375,
          "content": "{\n    \"name\": \"helium\",\n    \"version\": \"1.1\",\n    \"main\": \"helium.js\",\n    \"ignore\": [\n      \"**/.*\",\n      \"node_modules\",\n      \"components\"\n    ]\n}\n"
        },
        {
          "name": "helium.js",
          "type": "blob",
          "size": 20.4638671875,
          "content": "/* global alert, ActiveXObject */\n// Helium-css v1.1\n// License: MIT License(http://opensource.org/licenses/mit-license.php)\n// Copyright 2010 - 2014, Charles Lawrence http://twitter.com/geuis\n// Release: 1/13/10\n// Last update: 8/29/2014\n\nvar helium = {\n\n  callback: undefined,\n\n\tdata: {\n\t\t//timeout\n\t\t//status,\n\t\t//findinglist,\n\t\t//pagelist,\n\t\t//currenturl,\n\t\t//pages,\n\t\t//stylesheets\n  },\n\n  init: function () {\n\n    // Callback on init or default to running the report.\n    helium.callback = (arguments.length > 0) ? arguments[0] : helium.report;\n\n    //silently fail if localStorage is not available\n    if (window.localStorage) {\n\n      //load page data\n      helium.load();\n\n      helium.data.timeout = 3000;\n      helium.save();\n\n      helium.checkstatus();\n\n    } else {\n      throw new Error('localStorage API not found');\n    }\n\n  },\n\n  checkstatus: function () {\n    //determine state\n    //0: not started\n    //1: finding stylesheets on all pages\n    //2: loading/parsing stylesheets\n    //3: check if selectors found on pages\n    //4: finished, show report\n\n    if (typeof helium.data.status === 'undefined') {\n      helium.data.status = 0;\n    }\n\n    if (helium.data.status === 0) {\n      //not started\n      \n      //prompt for list of pages. Build and display html overlay\n      var html = [\n        '<h1>Paste a list of pages on your site you want to test</h1>',\n        '<textarea id=\"cssdetectTextarea\"></textarea><input type=\"button\" id=\"cssdetectStart\" value=\"Start\"/>',\n        '<input type=\"button\" id=\"cssdetectRestart\" value=\"Reset to Beginning\"/>'\n      ];\n\n      helium.generateCSS();\n\n      var div = document.createElement('div');\n      div.id = 'cssdetectID';\n      div.innerHTML = html.join('');\n\n      helium.$('body')[0].appendChild(div);\n\n      //add listener to save list and start processing\n      helium.on(helium.$('#cssdetectStart'), 'click', function () {\n\n        //currently based on new-line separated values. Eventually supports sitemap XML format and comma-delineated.\n        var list = document.getElementById('cssdetectTextarea').value.split('\\n');\n        \n        helium.setPageList(list);\n\n        //set status to 'finding'\n        helium.data.status = 1;\n\n        //copy pagelist\n        helium.data.findinglist = helium.data.pagelist.slice(0); //copy not reference\n        helium.save();\n        \n        //navigate to first page\n        helium.nav(helium.data.findinglist);\n            \n      }, false);\n\n      //add listener to reset all data\n      helium.on(helium.$('#cssdetectRestart'), 'click', function () {\n\n        //clear stored pages\n        document.getElementById('cssdetectTextarea').value = '';\n        \n        helium.reset();\n                \n      }, false);\n\n      return false;\n    }\n    \n    if (helium.data.status === 1) {\n\n      //finding stylesheets\n      helium.findstylesheets();\n      \n      return false;\n    }\n\n    if (helium.data.status === 2) {\n      //loading & parsing stylesheets\n      helium.getcss();\n      \n      return false;\n    }\n\n    if (helium.data.status === 3) {\n\n      //check if selectors found on pages\n      helium.checkcss();\n\n      return false;\n    }\n    \n    if (helium.data.status === 4) {\n\n      //Finished, issue report\n      helium.callback();\n    }\n\n  },\n\n  //display final report for unused selectors\n  report: function () {\n\n    var flip = false;\n    var html = [\n      '<h1>CSS Detection Report</h1>',\n      '<input type=\"button\" id=\"cssreportResetID\" value=\"New Test (Warning: This erases all data from the current test)\"/>',\n      '<h2> <a id=\"cssreportDownloadReport\" href=\"\" target=\"_blank\"> Download Report </a> </h2>',\n      '<div class=\"cell\" id=\"cssdetectDesc\">',\n      '<div class=\"green\">Green: unmatched selectors</div>',\n      '<div class=\"black\">Black: matched selectors that are defined with non-matched selectors</div>',\n      '<div class=\"red\">Red: a malformed selector. ** Note: not all malformed selectors are bad. Chrome won\\'t parse -moz extensions for example.</div>',\n      '<div class=\"blue\">Blue: a selector with a pseudo-class. You must test these manually.</div>',\n      '</div>'\n    ];\n    var download_report = [\n      '{G} Green: unmatched selectors',\n      '{B} Black: matched selectors that are defined with non-matched selectors',\n      '{R} Red: a malformed selector. ** Note: not all malformed selectors are bad. Chrome won\\'t parse -moz extensions for example.',\n      '{BL} Blue: a selector with a pseudo-class. You must test these manually.'\n    ];\n\n    //loop through stylesheets\n    for (var i = 0; i < helium.data.stylesheets.length; i++) {\n\n      //add stylesheet link\n      html.push('<h2><a href=\"' + helium.data.stylesheets[i].url + '\">' + helium.data.stylesheets[i].url + '</a></h2>');\n\n      download_report.push('\\r\\nStylesheet: ' + helium.data.stylesheets[i].url + '\\r\\n');\n\n      var sels = helium.data.stylesheets[i].selectors;\n\n      if (sels.length > 0) {\n\n        html.push('<ul class=\"cell\">');\n\n        //display selectors that are false, ie never found on any tested pages\n        for (var d = 0; d < sels.length; d++) {\n\n          var tmpstr = [];\n          var counttrue = 0;\n\n          download_report.push([]);\n          var download_report_length = download_report.length - 1;\n\n          for (var e = 0; e < sels[d].length; e++) {\n\n            //trim white space\n            sels[d][e].s = helium.trim(sels[d][e].s);\n\n            //identify selectors that were matched on a page somewhere, but are defined in combination with non-matched selectors.\n            if (sels[d][e].v === true && sels[d].length > 1) {\n              tmpstr.push('<span class=\"matched_selector selector\">' + sels[d][e].s + '</span>');\n              download_report[download_report_length].push('{B}' + sels[d][e].s);\n              counttrue++;\n            }\n\n            //shows if a pseudo-class is found. Not currently testing these so the user must do so manually\n            if (sels[d][e].v === 'pseudo_class') {\n              tmpstr.push('<span class=\"pseudo_class selector\">' + sels[d][e].s + '</span>');\n              download_report[download_report_length].push('{BL}' + sels[d][e].s);\n            }\n\n            //shows as a broken selecgtor, ie it is written in a way the browser cannot parse.\n            if (sels[d][e].v === 'invalid_selector') {\n              tmpstr.push('<span class=\"invalid_selector selector\">' + sels[d][e].s + '</span>');\n              download_report[download_report_length].push('{R}' + sels[d][e].s);\n            }\n\n            //shows if the selector was not found anywhere.\n            if (sels[d][e].v === false) {\n              tmpstr.push('<span class=\"selector\">' + sels[d][e].s + '</span>');\n              download_report[download_report_length].push('{G}' + sels[d][e].s);\n            }\n\n          }\n\n          //detect if multiple selectors defined together are all matched. Remove if so.\n          if (counttrue === sels[d].length) {\n            tmpstr = [];\n          }\n          counttrue = 0;\n\n          if (tmpstr.length > 0) {\n\n            var classname;\n            if (flip) {\n              classname = ' class=\"alternate\"';\n              flip = false;\n            } else {\n              classname = '';\n              flip = true;\n            }\n            html.push('<li' + classname + '>' + tmpstr.join(', ') + '</li>');\n            download_report[download_report_length] = download_report[download_report_length].join(', ');\n\n          } else {\n\n            download_report.pop();\n\n          }\n\n        }\n        html.push('</ul>');\n\n      } else {\n        html.push('<div class=\"cell\">No unmatched selectors found.</div>');\n        download_report.push('No unmatched selectors found.');\n      }\n\n    }\n\n    var div = document.createElement('div');\n    div.id = 'cssdetectID';\n    div.innerHTML = html.join('');\n\n    helium.generateCSS();\n    \n    helium.$('body')[0].appendChild(div);\n\n    //toggle selector visibility\n    var toggles = helium.$('#cssdetectID ul li');\n\n    for (var s = 0; s < toggles.length; s++) {\n\n      (function () {\n        var i = s;\n        helium.on(toggles[i], 'click', function () {\n\n          if (this.style.opacity === '0.5') {\n            this.style.opacity = '1';\n          } else {\n            this.style.opacity = '0.5';\n          }\n\n        }, false);\n      })();\n\n    }\n\n    //setup New Test button\n    helium.on(helium.$('#cssreportResetID'), 'click', function () {\n      helium.reset();\n    }, false);\n\n    if (window.URL.createObjectURL && window.Blob) {\n\n      //setup Download Report button\n      var blob = new Blob([download_report.join('\\r\\n')], {type : 'text/rtf'});\n      var btn = helium.$('#cssreportDownloadReport');\n      btn[0].href = window.URL.createObjectURL(blob);\n      btn[0].download = 'helium-report.txt';\n\n    } else {\n\n      helium.on(helium.$('#cssreportDownloadReport'), 'click', function () {\n        alert('Report downloads aren\\'t supported in this browser. The necessary file api\\'s aren\\'t available. Use Chrome or Firefox.');\n      });\n\n    }\n\n  },\n\n  generateCSS: function () {\n  /* jshint ignore:start */\n    var css = [\n      '#cssdetectID{',\n        'font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;',\n        'font-size: 16px;',\n        'font-weight: bold;',\n        'color: #fff;',\n        'position: absolute;',\n        'z-index: 999999999;',\n        'top: 10%;',\n        'width: 80%;',\n        'left: 10%;',\n        'background-color: #3498db;', //blue\n        //'background-color: #B9090B;', //red\n        'padding: 10px 20px 20px 20px;',\n        'border: none',\n      '}',\n      '#cssdetectID .cell{',\n        'background: #fff;',\n        'padding: 10px;',\n        'color: #000;',\n      '}',\n      '#cssdetectID div{',\n        'border:none;',\n      '}',\n      '#cssdetectID .alternate{',\n        'border: 1px solid #eee;',\n        'border-width: 1px 0 1px 0;',\n      '}',\n      '#cssdetectID ul{',\n        'list-style: none;',\n        'padding: 0;',\n        'margin: 0;',\n      '}',\n      '#cssdetectID li:hover{',\n        'background: #eee',\n      '}',\n      '#cssdetectID h1{',\n        'margin: 0 0 10px 0;',\n        'padding: 0;',\n        'font-size: 20px;',\n      '}',\n      '#cssdetectID h2{',\n        'margin: 0 0 0 0;',\n        'padding: 0;',\n        'font-size: 16px;',\n      '}',\n      '#cssdetectDesc{',\n        'background: #8ac6ed;',\n      '}',\n      '#cssdetectID textarea{',\n        'width: 100%;',\n        'height:300px;',\n        'border: none;',\n        'margin: 0 0 10px 0;',\n        'padding: 10px;',\n        'resize: none;',\n        'outline: 1px none transparent;',\n        'border-radius: 0;',\n      '}',\n      '#cssdetectID input{',\n        'background: #fff !important;',\n        'color: #000 !important;',\n        'border: none;',\n        'padding: 10px 20px 10px 20px;',\n        'margin: 0 10px 0 0;',\n        'font-size: 18px;',\n        'cursor: pointer;',\n        '-webkit-appearance: button;',\n      '}',\n      '#cssdetectID input:hover{',\n        'background: #ecf0f1;',\n        'pointer: cursor;',\n      '}',\n      '#cssdetectID a{',\n        'color: #fff',\n      '}',\n      '#cssreportResetID{',\n        'position:absolute;',\n        'top: 10px;',\n        'right: 10px;',\n      '}',\n      '#cssdetectID .green, #cssdetectID .selector{',\n        'color: #009000;',\n      '}',\n\n      '#cssdetectID .black, #cssdetectID .matched_selector{',\n        'color: #000000;',\n      '}',\n\n      '#cssdetectID .red, #cssdetectID .invalid_selector{',\n        'color: #cc0000;',\n      '}',\n\n      '#cssdetectID .blue, #cssdetectID .pseudo_class{',\n        'color: #0000cc',\n      '}'\n    ];\n\n\n    var style = document.createElement('style');\n    style.innerHTML = css.join('');\n\n    helium.$('body')[0].appendChild(style);\n    /* jshint ignore:end */\n  },\n\n  reset: function () {\n    //resets to beginning\n    localStorage.removeItem('cssdetect');\n\n    var nodes = helium.$('#cssdetectID');\n    for (var i = 0; i < nodes.length; i++) {\n      nodes[i].parentNode.removeChild(nodes[i]);\n    }\n\n    helium.init();\n  },\n\n  //check if selectors found on pages\n  checkcss: function () {\n\n    //delay time period set with helium.data.timeout. For purposes of waiting for content to render after load event(XHR)\n    setTimeout(function () {\n\n      //find the current page in the list of pages\n      for (var i = 0; i < helium.data.pages.length; i++) {\n\n        if (helium.data.pages[i].url === helium.data.currenturl) {\n\n          //loop through stylesheet links on page\n          for (var b = 0; b < helium.data.pages[i].links.length; b++) {\n\n            //find the stylesheet array element that matches the stylesheet link currently being worked on\n            var thislink = helium.data.pages[i].links[b];\n\n            for (var c = 0; c < helium.data.stylesheets.length; c++) {\n\n              if (helium.data.stylesheets[c].url === thislink) {\n\n                var stylesheet = helium.data.stylesheets[c];\n\n                //loop through selectors and test if active on this page. \n                //If it is a single selector( length===1 ), remove them from the array\n                //If length > 1, the \"sub selector\" gets an attribute of 'true' to indicate it was found\n                for (var d = 0; d < stylesheet.selectors.length; d++) {\n\n                  for (var e = 0; e < stylesheet.selectors[d].length; e++) {\n\n                    var response = helium.find(stylesheet.selectors[d][e].s);\n\n                    if (response === true) {\n                      stylesheet.selectors[d][e].v = true;\n                    }\n                    if (response === 'invalid_selector') {\n                      stylesheet.selectors[d][e].v = 'invalid_selector';\n                    }\n                    if (response === 'pseudo_class') {\n                      stylesheet.selectors[d][e].v = 'pseudo_class';\n                    }\n\n                  }\n\n                }\n\n                //end the current loop\n                c = helium.data.stylesheets.length;\n              }\n            }\n\n          }\n\n          //end the current loop\n          i = helium.data.pages.length;\n        }\n      \n      }\n\n      helium.save();\n      \n      if (helium.data.pagelist.length > 0) {\n\n        //navigate to next page\n        helium.nav();\n\n      } else {\n      \n        helium.data.status = 4;\n        helium.save();\n        \n        //run callback\n        helium.callback();\n\n      }\n      \n    }, helium.data.timeout);\n\n\n  },\n\n  //search current page for selectors\n  find: function (selector) {\n\n    //try/catch is used because querySelectorAll throws errors when syntactically invalid selectors are passed through. Useful for detection purposes.\n    try {\n\n      //returns true if selector found on page, false if not\n      if (helium.$(selector).length > 0) {\n        return true;\n      }\n\n    } catch (err) {\n      return 'invalid_selector';\n    }\n\n    //detect if the selector includes a pseudo-class, i.e. :active, :focus\n    var parse = selector.match(/\\:+[\\w-]+/gi);\n    if (parse !== null && parse.hasOwnProperty('length') && parse.length > 0) {\n      return 'pseudo_class';\n    } else {\n      return false;\n    }\n\n  },\n\n  findstylesheets: function () {\n\n    var page = {\n      url: helium.data.currenturl,\n      links: []\n    };\n\n    //find link elements on the page\n    var links = helium.$('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n\n      //get href\n      var tmplink = links[i].getAttribute('href');\n\n      //append full URI if absent\n      if (tmplink.indexOf('http') !== 0 && tmplink.substr(0, 2) !== '//') {\n\n        // make sure that relative URLs work too\n        if (tmplink.indexOf('/') !== 0) {\n          var lastDir = window.location.pathname.lastIndexOf('/');\n          var directory;\n\n          if (lastDir > 0) {\n            directory = window.location.pathname.substring(0, lastDir + 1);\n          } else {\n            directory = '/';\n          }\n          tmplink = directory + tmplink;\n        }\n        tmplink = window.location.protocol + '//' + window.location.hostname + ':' + window.location.port + tmplink;\n\n      }\n\n      //filter out urls not on this domain\n      if (tmplink.indexOf(window.location.hostname) !== -1) {\n        page.links.push(tmplink);\n        \n        if (typeof helium.data.stylesheets === 'undefined') {\n          helium.data.stylesheets = [];\n        }\n        \n        helium.data.stylesheets.push(tmplink);\n      }\n\n    }\n\n    //check if data field exists\n    if (typeof helium.data.pages === 'undefined') {\n      helium.data.pages = [];\n    }\n\n    //save pages\n    helium.data.pages.push(page);\n    helium.save();\n\n    //go to next page\n    if (helium.data.findinglist.length > 0) {\n\n      helium.nav(helium.data.findinglist);\n\n    } else {\n\n      //remove duplicates from stylesheets list\n      helium.data.stylesheets.sort();\n\n      for (var i = 0; i < helium.data.stylesheets.length - 1; i++) {\n        if (helium.data.stylesheets[i] === helium.data.stylesheets[i + 1]) {\n          helium.data.stylesheets.splice(i--, 1);\n        }\n      }\n\n      for (var i = 0; i < helium.data.stylesheets.length; i++) {\n        var tmp = helium.data.stylesheets[i];\n        helium.data.stylesheets[i] = {\n          url: tmp,\n          selectors: []\n        };\n      }\n      \n      //update status\n      helium.data.status = 2;\n      helium.save();\n      \n      helium.checkstatus();\n\n    }\n\n  },\n\n  //list of stylesheet links on page\n  getcss: function () {\n\n    for (var i = 0; i < helium.data.stylesheets.length; i++) {\n\n      //get content of stylesheets via XHR\n      helium.get(helium.data.stylesheets[i].url, i, function (index, data) {\n\n        //remove css comments\n        data = data.replace(/\\/\\*[\\s\\S]*?\\*\\//gim, '');\n\n        //parse selectors. ##NEWLINE REMOVAL IS HACKISH, CAN BE DONE BETTER WITH A BETTER REGEX\n        var selectors = data.replace(/\\n/g, '').match(/[^\\}]+[\\.\\#\\-\\w]?(?=\\{)/gim) || [];\n\n        //results of selector tests\n        var results = [];\n\n        for (var e = 0; e < selectors.length; e++) {\n\n          var sel = selectors[e].split(',');\n\n          //check for multiple selectors defined together. eg body,h1,h2,h3{}\n          if (sel.length > 1) {\n\n            var arr = [];\n            for (var t = 0; t < sel.length; t++) {\n\n              if (sel[t] !== '') { //don't add empty selectors\n                arr.push({s: sel[t], v: false});\n              }\n\n            }\n\n            results.push(arr);\n\n          } else {\n\n            results.push([{s: selectors[e], v: false}]);\n\n          }\n\n        }\n\n        //store stylesheet results\n        helium.data.stylesheets[index].selectors = results;\n        helium.save();\n\n        //set status if the last request is done\n        if (index === helium.data.stylesheets.length - 1) {\n          helium.data.status = 3;\n          \n          //navigate to first page in helium.pagelist\n          helium.nav();\n        }\n        \n      });\n    \n    }\n    \n  },\n\n  //navigate to next page in list\n  nav: function (list) {\n\n    //if no list is provided, default to pagelist\n    if (!list) {\n      list = helium.data.pagelist;\n    }\n    \n    //remove first url in list\n    var next = list.shift();\n\n    //stores the url that is being redirected to\n    if (next !== undefined) {\n      helium.data.currenturl = next;\n    }\n\n    helium.save();\n\n    //redirect\n    if (next !== undefined) {\n      window.location = next;\n    }\n\n  },\n\n  //store list of pages to be checked\n  setPageList: function (pagelist) {\n\n    helium.data.pagelist = pagelist;\n    helium.save();\n\n  },\n\n  trim: function (str) {\n\n    if (typeof String.prototype.trim === 'function') {\n      return str.trim();\n    } else {\n      return str.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    }\n\n  },\n\n  on: function (target, ev, fn) {\n    //only add events to the first element in the target/querySelectorAll nodeList.\n    //don't need to add in support for multiple targets\n    target = target[0] || target;\n    target.addEventListener(ev, fn, false);\n  },\n\n  //return info from localStorage\n  load: function () {\n\n    if (!localStorage.cssdetect) {\n      localStorage.cssdetect = JSON.stringify({});\n    }\n\n    helium.data = JSON.parse(localStorage.cssdetect);\n\n  },\n\n  save: function () {\n    \n    //store page data into localStorage\n    localStorage.cssdetect = JSON.stringify(helium.data);\n\n  },\n\n  // when something goes wrong, nice to helium.clear() to nuke the local storage\n  clear: function () {\n    delete localStorage['cssdetect'];\n  },\n\n  get: function (url, index, callback) {\n    var http;\n    if (window.attachEvent) {\n      http = new ActiveXObject('Microsoft.XMLHTTP');\n    } else {\n      http = new XMLHttpRequest();\n    }\n    http.open('GET', url);\n    http.onreadystatechange = function () {\n      if (http.readyState === 4) {\n        callback(index, http.responseText);\n      }\n    };\n    http.send(null);\n  },\n    \n  $: function (selector) {\n    return document.querySelectorAll(selector);\n  }\n\n};\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}