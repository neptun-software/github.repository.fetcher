{
  "metadata": {
    "timestamp": 1736561599551,
    "page": 144,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jamiewilson/form-to-google-sheets",
      "stars": 4568,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.6904296875,
          "content": "# Submit a Form to Google Sheets | [Demo](https://form-to-google-sheets.surge.sh)\n\n#### How to create an HTML form that stores the submitted form data in Google Sheets using plain 'ol JavaScript (ES6), [Google Apps Script](https://developers.google.com/apps-script/), [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) and [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData).\n\n## 1. Create a new Google Sheet\n\n- First, go to [Google Sheets](https://docs.google.com/spreadsheets) and `Start a new spreadsheet` with the `Blank` template.\n- Rename it `Email Subscribers`. Or whatever, it doesn't matter.\n- Put the following headers into the first row:\n\n|   |     A     |   B   | C | ... |\n|---|:---------:|:-----:|:-:|:---:|\n| 1 | timestamp | email |   |     |\n\n> To learn how to add additional input fields, [checkout section 7 below](#7-adding-additional-form-data).\n\n## 2. Create a Google Apps Script\n\n- Click on `Tools > Script Editor…` which should open a new tab.\n- Rename it `Submit Form to Google Sheets`. _Make sure to wait for it to actually save and update the title before editing the script._\n- Now, delete the `function myFunction() {}` block within the `Code.gs` tab.\n- Paste the following script in it's place and `File > Save`:\n\n```js\nvar sheetName = 'Sheet1'\nvar scriptProp = PropertiesService.getScriptProperties()\n\nfunction intialSetup () {\n  var activeSpreadsheet = SpreadsheetApp.getActiveSpreadsheet()\n  scriptProp.setProperty('key', activeSpreadsheet.getId())\n}\n\nfunction doPost (e) {\n  var lock = LockService.getScriptLock()\n  lock.tryLock(10000)\n\n  try {\n    var doc = SpreadsheetApp.openById(scriptProp.getProperty('key'))\n    var sheet = doc.getSheetByName(sheetName)\n\n    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0]\n    var nextRow = sheet.getLastRow() + 1\n\n    var newRow = headers.map(function(header) {\n      return header === 'timestamp' ? new Date() : e.parameter[header]\n    })\n\n    sheet.getRange(nextRow, 1, 1, newRow.length).setValues([newRow])\n\n    return ContentService\n      .createTextOutput(JSON.stringify({ 'result': 'success', 'row': nextRow }))\n      .setMimeType(ContentService.MimeType.JSON)\n  }\n\n  catch (e) {\n    return ContentService\n      .createTextOutput(JSON.stringify({ 'result': 'error', 'error': e }))\n      .setMimeType(ContentService.MimeType.JSON)\n  }\n\n  finally {\n    lock.releaseLock()\n  }\n}\n```\n\n> If you want to better understand what this script is doing, checkout the [`form-script-commented.js`](https://github.com/jamiewilson/form-to-google-sheets/blob/master/form-script-commented.js) file in the repo for a detailed explanation. \n\n## 3. Run the setup function\n\n- Next, go to `Run > Run Function > initialSetup` to run this function.\n- In the `Authorization Required` dialog, click on `Review Permissions`.\n- Sign in or pick the Google account associated with this projects.\n- You should see a dialog that says `Hi {Your Name}`, `Submit Form to Google Sheets wants to`...\n- Click `Allow`\n\n## 4. Add a new project trigger \n- Click on `Edit > Current project’s triggers`. \n- In the dialog click `No triggers set up. Click here to add one now.` \n- In the dropdowns select `doPost`\n- Set the events fields to `From spreadsheet` and `On form submit`\n- Then click `Save`\n\n## 5. Publish the project as a web app\n\n- Click on `Publish > Deploy as web app…`.\n- Set `Project Version` to `New` and put `initial version` in the input field below.\n- Leave `Execute the app as:` set to `Me(your@address.com)`.\n- For `Who has access to the app:` select `Anyone, even anonymous`.\n- Click `Deploy`.\n- In the popup, copy the `Current web app URL` from the dialog.\n- And click `OK`.\n\n> **IMPORTANT!** If you have a custom domain with Gmail, you _might_ need to click `OK`, refresh the page, and then go to `Publish > Deploy as web app…` again to get the proper web app URL. It should look something like `https://script.google.com/a/yourdomain.com/macros/s/XXXX…`.\n\n## 6. Input your web app URL\n\nOpen the file named `index.html`. On line 12 replace `<SCRIPT URL>` with your script url:\n\n```js\n<form name=\"submit-to-google-sheet\">\n  <input name=\"email\" type=\"email\" placeholder=\"Email\" required>\n  <button type=\"submit\">Send</button>\n</form>\n\n<script>\n  const scriptURL = '<SCRIPT URL>'\n  const form = document.forms['submit-to-google-sheet']\n\n  form.addEventListener('submit', e => {\n    e.preventDefault()\n    fetch(scriptURL, { method: 'POST', body: new FormData(form)})\n      .then(response => console.log('Success!', response))\n      .catch(error => console.error('Error!', error.message))\n  })\n</script>\n```\n\nAs you can see, this script uses the the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API), a fairly new promise-based mechanism for making web requests. It makes a \"POST\" request to your script URL and uses [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) to pass in our data as URL paramters.\n\nBecause Fetch and FormData aren't fully supported, you'll likely want to include their respective polyfills. [See section #8](#8-related-polyfills). \n\n> **Fun fact!** The `<html>`, `<head>`, and `body` tags are actually among a handful of optional tags, but since the [rules around how the browser parses a page are kinda complicated](https://www.w3.org/TR/2011/WD-html5-20110525/syntax.html#optional-tags), you'd probably not want to omit them on real websites.\n\n## 7. Adding additional form data\nTo capture additional data, you'll just need to create new columns with titles matching exactly the `name` values from your form inputs. For example, if you want to add first and last name inputs, you'd give them `name` values like so:\n\n```html\n<form name=\"submit-to-google-sheet\">\n  <input name=\"email\" type=\"email\" placeholder=\"Email\" required>\n  <input name=\"firstName\" type=\"text\" placeholder=\"First Name\">\n  <input name=\"lastName\" type=\"text\" placeholder=\"Last Name\">\n  <button type=\"submit\">Send</button>\n</form>\n```\n\nThen create new headers with the exact, case-sensitive `name` values:\n\n|   |     A     |   B   |     C     |     D    | ... |\n|---|:---------:|:-----:|:---------:|:--------:|:---:|\n| 1 | timestamp | email | firstName | lastName |     |\n\n## 8. Related Polyfills\nSome of this stuff is not yet fully supported by browsers or doesn't work on older ones. Here are some polyfill options to use for better support.\n\n- [Promise Polyfill](https://github.com/taylorhakes/promise-polyfill)\n- [Fetch Polyfill](https://github.com/github/fetch)\n- [FormData Polyfill](https://github.com/jimmywarting/FormData)\n\nSince the FormData polyfill is published as a Node package and needs to be compiled for browsers to work with, a good option for including these is using [Browserify's CDN called wzrd.in](https://wzrd.in/). This service compiles, minifies and serves the latest version of these scripts for us.\n\nYou'll want to make sure these load before the main script handling the form submission. e.g.:\n\n```html\n<script src=\"https://wzrd.in/standalone/formdata-polyfill\"></script>\n<script src=\"https://wzrd.in/standalone/promise-polyfill@latest\"></script>\n<script src=\"https://wzrd.in/standalone/whatwg-fetch@latest\"></script>\n\n<script>\n  const scriptURL = '<SCRIPT URL>'\n  const form = document.forms['submit-to-google-sheet']\n  ...\n</script>\n```\n\n# Have feedback/requests/issues?\nPlease [create a new issue](https://github.com/jamiewilson/form-to-google-sheet/issues). PRs are definitely welcome, but please run your ideas by me before putting in a lot of work. Thanks!\n\n#### Related/Inspirational Articles\n- [Google Spreadsheets as a Database – INSERT with Apps Script form POST/GET submit method](https://mashe.hawksey.info/2011/10/google-spreadsheets-as-a-database-insert-with-apps-script-form-postget-submit-method/)\n- [Step by step setup to send form data to Google Sheets](http://railsrescue.com/blog/2015-05-28-step-by-step-setup-to-send-form-data-to-google-sheets/)\n- [Google Sheet Form Post](https://gist.github.com/willpatera/ee41ae374d3c9839c2d6)\n- [How to Submit an HTML Form to Google Sheets…without Google Forms](https://medium.com/@dmccoy/how-to-submit-an-html-form-to-google-sheets-without-google-forms-b833952cc175)\n- [Send Email from a Static HTML Form using Google Apps Mail!](https://github.com/dwyl/html-form-send-email-via-google-script-without-server)\n\n#### Documentation\n- [Google Apps Script](https://developers.google.com/apps-script/)\n- [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\n- [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n- [HTML `<form>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form)\n- [Document.forms](https://developer.mozilla.org/en-US/docs/Web/API/Document/forms)\n- [Sending forms through JavaScript](https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Sending_forms_through_JavaScript)\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "form-script-commented.js",
          "type": "blob",
          "size": 4.3203125,
          "content": "// The default sheet name is 'Sheet1'. To target a different sheet, update this variable.\nvar sheetName = 'Sheet1'\n\n/*\nGets a property store that all users can access, but only within this script.\nhttps://developers.google.com/apps-script/reference/properties/properties-service#getScriptProperties()\n*/\nvar scriptProp = PropertiesService.getScriptProperties()\n\n/*\nThis is the initial setup function. It gets the active SpreadsheetApp ID and adds it to our PropertiesService.\nhttps://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app#getactivespreadsheet\n*/\nfunction setup () {\n  var doc = SpreadsheetApp.getActiveSpreadsheet()\n  scriptProp.setProperty('key', doc.getId())\n}\n\nfunction doPost (e) {\n  /*\n  Gets a lock that prevents any user from concurrently running a section of code. A code section\n  guarded by a script lock cannot be executed simultaneously regardless of the identity of the user.\n  https://developers.google.com/apps-script/reference/lock/lock-service#getScriptLock()\n  */\n  var lock = LockService.getScriptLock()\n\n  /*\n  Attempts to acquire the lock, timing out with an exception after the provided number of milliseconds.\n  This method is the same as tryLock(timeoutInMillis) except that it throws an exception when the lock\n  could not be acquired instead of returning false.\n  https://developers.google.com/apps-script/reference/lock/lock#waitLock(Integer)\n  */\n  lock.waitLock(10000)\n\n  try {\n    /*\n    Opens the spreadsheet with the given ID. A spreadsheet ID can be extracted from its URL. For example,\n    the spreadsheet ID in the URL https://docs.google.com/spreadsheets/d/abc1234567/edit#gid=0 is \"abc1234567\".\n    https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app#openbyidid\n    */\n    var doc = SpreadsheetApp.openById(scriptProp.getProperty('key'))\n\n    /*\n    Returns a sheet with the given name. If multiple sheets have the same name,\n    the leftmost one is returned. Returns null if there is no sheet with the given name.\n    https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet#getSheetByName(String)\n    */\n    var sheet = doc.getSheetByName(sheetName)\n\n    /*\n    Returns the range with the top left cell at the given coordinates, and with the given number of rows.\n    https://developers.google.com/apps-script/reference/spreadsheet/sheet#getRange(Integer,Integer)\n\n    Then returns the position of the last column that has content.\n    https://developers.google.com/apps-script/reference/spreadsheet/sheet#getlastcolumn\n\n    Then returns the rectangular grid of values for this range (a two-dimensional array of values, indexed by row, then by column.)\n    https://developers.google.com/apps-script/reference/spreadsheet/range#getValues()\n    */\n    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0]\n    // Gets the last row and then adds one\n    var nextRow = sheet.getLastRow() + 1\n\n    /*\n    Maps the headers array to a new array. If a header's value is 'timestamp' then it\n    returns a new Date() object, otherwise it returns the value of the matching URL parameter\n    https://developers.google.com/apps-script/guides/web\n    */\n    var newRow = headers.map(function(header) {\n      return header === 'timestamp' ? new Date() : e.parameter[header]\n    })\n\n    /*\n    Gets a range from the next row to the end row based on how many items are in newRow\n    then sets the new values of the whole array at once.\n    https://developers.google.com/apps-script/reference/spreadsheet/range#setValues(Object)\n    */\n    sheet.getRange(nextRow, 1, 1, newRow.length).setValues([newRow])\n\n    /*\n    Return success results as JSON\n    https://developers.google.com/apps-script/reference/content/content-service\n    */\n    return ContentService\n      .createTextOutput(JSON.stringify({ 'result': 'success', 'row': nextRow }))\n      .setMimeType(ContentService.MimeType.JSON)\n  }\n\n  /*\n  Return error results as JSON\n  https://developers.google.com/apps-script/reference/content/content-service\n  */\n  catch (e) {\n    return ContentService\n      .createTextOutput(JSON.stringify({ 'result': 'error', 'error': e }))\n      .setMimeType(ContentService.MimeType.JSON)\n  }\n\n  finally {\n    /*\n    Releases the lock, allowing other processes waiting on the lock to continue.\n    https://developers.google.com/apps-script/reference/lock/lock#releaseLock()\n    */\n    lock.releaseLock()\n  }\n}\n"
        },
        {
          "name": "form-script.js",
          "type": "blob",
          "size": 1.2470703125,
          "content": "/*\nPaste this script into the 'Code.gs' tab in the Script Editor\nFor a detailed explanation of this file, view 'form-script-commented.js'\n*/\n\nvar sheetName = 'Sheet1'\nvar scriptProp = PropertiesService.getScriptProperties()\n\nfunction intialSetup () {\n  var activeSpreadsheet = SpreadsheetApp.getActiveSpreadsheet()\n  scriptProp.setProperty('key', activeSpreadsheet.getId())\n}\n\nfunction doPost (e) {\n  var lock = LockService.getScriptLock()\n  lock.tryLock(10000)\n\n  try {\n    var doc = SpreadsheetApp.openById(scriptProp.getProperty('key'))\n    var sheet = doc.getSheetByName(sheetName)\n\n    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0]\n    var nextRow = sheet.getLastRow() + 1\n\n    var newRow = headers.map(function(header) {\n      return header === 'timestamp' ? new Date() : e.parameter[header]\n    })\n\n    sheet.getRange(nextRow, 1, 1, newRow.length).setValues([newRow])\n\n    return ContentService\n      .createTextOutput(JSON.stringify({ 'result': 'success', 'row': nextRow }))\n      .setMimeType(ContentService.MimeType.JSON)\n  }\n\n  catch (e) {\n    return ContentService\n      .createTextOutput(JSON.stringify({ 'result': 'error', 'error': e }))\n      .setMimeType(ContentService.MimeType.JSON)\n  }\n\n  finally {\n    lock.releaseLock()\n  }\n}\n"
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 0.50390625,
          "content": "<form name=\"submit-to-google-sheet\">\n  <input name=\"email\" type=\"email\" placeholder=\"Email\" required>\n  <button type=\"submit\">Send</button>\n</form>\n\n<script>\n  const scriptURL = '<SCRIPT URL>'\n  const form = document.forms['submit-to-google-sheet']\n\n  form.addEventListener('submit', e => {\n    e.preventDefault()\n    fetch(scriptURL, { method: 'POST', body: new FormData(form)})\n      .then(response => console.log('Success!', response))\n      .catch(error => console.error('Error!', error.message))\n  })\n</script>\n"
        }
      ]
    }
  ]
}