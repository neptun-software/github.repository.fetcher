{
  "metadata": {
    "timestamp": 1736561653613,
    "page": 227,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sindresorhus/eslint-plugin-unicorn",
      "stars": 4343,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1708984375,
          "content": "root = true\n\n[*]\nindent_style = tab\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".eslint-doc-generatorrc.js",
          "type": "blob",
          "size": 0.7099609375,
          "content": "/* eslint unicorn/prevent-abbreviations:\"off\" -- https://github.com/sindresorhus/eslint-plugin-unicorn/issues/2015 */\n\n/** @type {import('eslint-doc-generator').GenerateOptions} */\nconst config = {\n  ignoreConfig: ['all', 'flat/all', 'flat/recommended'],\n  ignoreDeprecatedRules: true,\n  ruleDocTitleFormat: 'desc',\n  ruleListColumns: [\n    'name',\n    'description',\n    'configsError',\n    // Omit `configsOff` since we don't intend to convey meaning by setting rules to `off` in the `recommended` config.\n    'configsWarn',\n    'fixable',\n    'hasSuggestions',\n    'requiresTypeChecking',\n  ],\n  urlConfigs: 'https://github.com/sindresorhus/eslint-plugin-unicorn#preset-configs-eslintconfigjs',\n};\n\nmodule.exports = config;\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.13671875,
          "content": "node_modules\nyarn.lock\ncoverage\npackage-lock.json\n/test/integration/fixtures\n.cache-eslint-remote-tester\neslint-remote-tester-results\n*.log\n"
        },
        {
          "name": ".markdownlint.json",
          "type": "blob",
          "size": 0.1162109375,
          "content": "{\n\t\"line-length\": false,\n\t\"no-duplicate-heading\": false,\n\t\"no-hard-tabs\": false,\n\t\"ul-style\": {\n\t\t\"style\": \"dash\"\n\t}\n}\n"
        },
        {
          "name": ".markdownlintignore",
          "type": "blob",
          "size": 0.052734375,
          "content": "node_modules\ntest/snapshots\ntest/integration/fixtures\n"
        },
        {
          "name": ".npmpackagejsonlintrc.json",
          "type": "blob",
          "size": 0.58203125,
          "content": "{\n\t\"rules\": {\n\t\t\"no-duplicate-properties\": \"error\",\n\t\t\"no-repeated-dependencies\": \"error\",\n\t\t\"prefer-alphabetical-dependencies\": \"error\",\n\t\t\"prefer-alphabetical-devDependencies\": \"error\",\n\t\t\"prefer-alphabetical-optionalDependencies\": \"error\",\n\t\t\"prefer-alphabetical-bundledDependencies\": \"error\",\n\t\t\"prefer-alphabetical-scripts\": \"error\",\n\t\t\"prefer-caret-version-dependencies\": \"error\",\n\t\t\"prefer-caret-version-devDependencies\": [\n\t\t\t\"error\",\n\t\t\t{\n\t\t\t\t\"exceptions\": [\n\t\t\t\t\t\"eslint-plugin-internal-rules\"\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"prefer-scripts\": [\n\t\t\t\"error\",\n\t\t\t[\n\t\t\t\t\"lint\",\n\t\t\t\t\"test\"\n\t\t\t]\n\t\t]\n\t}\n}\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.1025390625,
          "content": "coverage:\n  status:\n    project:\n      default:\n        target: 99%\n        threshold: 1%\n    patch: off\n"
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "eslint.dogfooding.config.mjs",
          "type": "blob",
          "size": 1.1162109375,
          "content": "/* Run all unicorn rules on codebase */\n/*\n! If you're making a new rule, you can ignore this before review.\n*/\n\nimport eslintPluginUnicorn from './index.js';\n\nconst config = [\n\teslintPluginUnicorn.configs['flat/all'],\n\t{\n\t\tlinterOptions: {\n\t\t\treportUnusedDisableDirectives: false,\n\t\t},\n\t\t// Fake rule to allow inline config to disable\n\t\tplugins: {\n\t\t\tn: {\n\t\t\t\trules: {'no-unsupported-features/es-syntax': {}},\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tignores: [\n\t\t\t'coverage',\n\t\t\t'test/integration/fixtures',\n\t\t\t'test/integration/fixtures-local',\n\t\t\t'rules/utils/lodash.js',\n\t\t],\n\t},\n\t{\n\t\trules: {\n\t\t\t// https://github.com/sindresorhus/eslint-plugin-unicorn/issues/1109#issuecomment-782689255\n\t\t\t'unicorn/consistent-destructuring': 'off',\n\t\t\t// https://github.com/sindresorhus/eslint-plugin-unicorn/issues/2341\n\t\t\t'unicorn/escape-case': 'off',\n\t\t\t'unicorn/no-hex-escape': 'off',\n\t\t\t// Buggy\n\t\t\t'unicorn/custom-error-definition': 'off',\n\t\t\t'unicorn/consistent-function-scoping': 'off',\n\t\t\t// Annoying\n\t\t\t'unicorn/no-keyword-prefix': 'off',\n\t\t},\n\t},\n\t{\n\t\tfiles: [\n\t\t\t'**/*.js',\n\t\t],\n\t\trules: {\n\t\t\t'unicorn/prefer-module': 'off',\n\t\t},\n\t},\n];\n\nexport default config;\n"
        },
        {
          "name": "index.d.ts",
          "type": "blob",
          "size": 0.267578125,
          "content": "import type {ESLint, Linter} from 'eslint';\n\ndeclare const eslintPluginUnicorn: ESLint.Plugin & {\n\tconfigs: {\n\t\trecommended: Linter.Config;\n\t\tall: Linter.Config;\n\t\t'flat/all': Linter.FlatConfig;\n\t\t'flat/recommended': Linter.FlatConfig;\n\t};\n};\n\nexport = eslintPluginUnicorn;\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 2.4404296875,
          "content": "'use strict';\nconst createDeprecatedRules = require('./rules/utils/create-deprecated-rules.js');\nconst {loadRules} = require('./rules/utils/rule.js');\nconst legacyConfigBase = require('./configs/legacy-config-base.js');\nconst flatConfigBase = require('./configs/flat-config-base.js');\nconst {name, version} = require('./package.json');\n\nconst deprecatedRules = createDeprecatedRules({\n\t// {ruleId: ReplacementRuleId | ReplacementRuleId[]}, if no replacement, use `{ruleId: []}`\n\t'import-index': [],\n\t'no-array-instanceof': 'unicorn/no-instanceof-array',\n\t'no-fn-reference-in-iterator': 'unicorn/no-array-callback-reference',\n\t'no-reduce': 'unicorn/no-array-reduce',\n\t'no-unsafe-regex': [],\n\t'prefer-dataset': 'unicorn/prefer-dom-node-dataset',\n\t'prefer-event-key': 'unicorn/prefer-keyboard-event-key',\n\t'prefer-exponentiation-operator': 'prefer-exponentiation-operator',\n\t'prefer-flat-map': 'unicorn/prefer-array-flat-map',\n\t'prefer-node-append': 'unicorn/prefer-dom-node-append',\n\t'prefer-node-remove': 'unicorn/prefer-dom-node-remove',\n\t'prefer-object-has-own': 'prefer-object-has-own',\n\t'prefer-replace-all': 'unicorn/prefer-string-replace-all',\n\t'prefer-starts-ends-with': 'unicorn/prefer-string-starts-ends-with',\n\t'prefer-text-content': 'unicorn/prefer-dom-node-text-content',\n\t'prefer-trim-start-end': 'unicorn/prefer-string-trim-start-end',\n\t'regex-shorthand': 'unicorn/better-regex',\n});\n\nconst externalRules = {\n\t// Covered by `unicorn/no-negated-condition`\n\t'no-negated-condition': 'off',\n\t// Covered by `unicorn/no-nested-ternary`\n\t'no-nested-ternary': 'off',\n};\n\nconst rules = loadRules();\nconst recommendedRules = Object.fromEntries(\n\tObject.entries(rules).map(([id, rule]) => [\n\t\t`unicorn/${id}`,\n\t\trule.meta.docs.recommended ? 'error' : 'off',\n\t]),\n);\nconst allRules = Object.fromEntries(\n\tObject.keys(rules).map(id => [\n\t\t`unicorn/${id}`,\n\t\t'error',\n\t]),\n);\n\nconst createConfig = (rules, flatConfigName = false) => ({\n\t...(\n\t\tflatConfigName\n\t\t\t? {...flatConfigBase, name: flatConfigName, plugins: {unicorn}}\n\t\t\t: {...legacyConfigBase, plugins: ['unicorn']}\n\t),\n\trules: {...externalRules, ...rules},\n});\n\nconst unicorn = {\n\tmeta: {\n\t\tname,\n\t\tversion,\n\t},\n\trules: {\n\t\t...rules,\n\t\t...deprecatedRules,\n\t},\n};\n\nconst configs = {\n\trecommended: createConfig(recommendedRules),\n\tall: createConfig(allRules),\n\t'flat/recommended': createConfig(recommendedRules, 'unicorn/flat/recommended'),\n\t'flat/all': createConfig(allRules, 'unicorn/flat/all'),\n};\n\nmodule.exports = {...unicorn, configs};\n"
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.0908203125,
          "content": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 4.525390625,
          "content": "{\n\t\"name\": \"eslint-plugin-unicorn\",\n\t\"version\": \"56.0.1\",\n\t\"description\": \"More than 100 powerful ESLint rules\",\n\t\"license\": \"MIT\",\n\t\"repository\": \"sindresorhus/eslint-plugin-unicorn\",\n\t\"funding\": \"https://github.com/sindresorhus/eslint-plugin-unicorn?sponsor=1\",\n\t\"author\": {\n\t\t\"name\": \"Sindre Sorhus\",\n\t\t\"email\": \"sindresorhus@gmail.com\",\n\t\t\"url\": \"https://sindresorhus.com\"\n\t},\n\t\"main\": \"index.js\",\n\t\"types\": \"index.d.ts\",\n\t\"sideEffects\": false,\n\t\"engines\": {\n\t\t\"node\": \">=18.18\"\n\t},\n\t\"scripts\": {\n\t\t\"bundle-lodash\": \"echo \\\"export {defaultsDeep, camelCase, kebabCase, snakeCase, upperFirst, lowerFirst} from 'lodash-es';\\\" | npx esbuild --bundle --outfile=rules/utils/lodash.js --format=cjs\",\n\t\t\"create-rule\": \"node ./scripts/create-rule.mjs && npm run fix:eslint-docs\",\n\t\t\"fix\": \"run-p --continue-on-error fix:*\",\n\t\t\"fix:eslint-docs\": \"eslint-doc-generator\",\n\t\t\"fix:js\": \"npm run lint:js -- --fix\",\n\t\t\"fix:markdown\": \"npm run lint:markdown -- --fix\",\n\t\t\"fix:snapshots\": \"ava --update-snapshots\",\n\t\t\"integration\": \"node ./test/integration/test.mjs\",\n\t\t\"lint\": \"run-p --continue-on-error lint:*\",\n\t\t\"lint:eslint-docs\": \"npm run fix:eslint-docs -- --check\",\n\t\t\"lint:js\": \"xo\",\n\t\t\"lint:markdown\": \"markdownlint \\\"**/*.md\\\"\",\n\t\t\"lint:package-json\": \"npmPkgJsonLint .\",\n\t\t\"run-rules-on-codebase\": \"eslint --config=./eslint.dogfooding.config.mjs\",\n\t\t\"smoke\": \"eslint-remote-tester --config ./test/smoke/eslint-remote-tester.config.mjs\",\n\t\t\"test\": \"npm-run-all --continue-on-error lint test:*\",\n\t\t\"test:js\": \"c8 ava\"\n\t},\n\t\"files\": [\n\t\t\"index.js\",\n\t\t\"index.d.ts\",\n\t\t\"rules\",\n\t\t\"configs\"\n\t],\n\t\"keywords\": [\n\t\t\"eslint\",\n\t\t\"eslintplugin\",\n\t\t\"eslint-plugin\",\n\t\t\"unicorn\",\n\t\t\"linter\",\n\t\t\"lint\",\n\t\t\"style\",\n\t\t\"xo\"\n\t],\n\t\"dependencies\": {\n\t\t\"@babel/helper-validator-identifier\": \"^7.24.7\",\n\t\t\"@eslint-community/eslint-utils\": \"^4.4.0\",\n\t\t\"ci-info\": \"^4.0.0\",\n\t\t\"clean-regexp\": \"^1.0.0\",\n\t\t\"core-js-compat\": \"^3.38.1\",\n\t\t\"esquery\": \"^1.6.0\",\n\t\t\"globals\": \"^15.9.0\",\n\t\t\"indent-string\": \"^4.0.0\",\n\t\t\"is-builtin-module\": \"^3.2.1\",\n\t\t\"jsesc\": \"^3.0.2\",\n\t\t\"pluralize\": \"^8.0.0\",\n\t\t\"read-pkg-up\": \"^7.0.1\",\n\t\t\"regexp-tree\": \"^0.1.27\",\n\t\t\"regjsparser\": \"^0.10.0\",\n\t\t\"semver\": \"^7.6.3\",\n\t\t\"strip-indent\": \"^3.0.0\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@babel/code-frame\": \"^7.24.7\",\n\t\t\"@babel/core\": \"^7.25.2\",\n\t\t\"@babel/eslint-parser\": \"^7.25.1\",\n\t\t\"@eslint/eslintrc\": \"^3.1.0\",\n\t\t\"@lubien/fixture-beta-package\": \"^1.0.0-beta.1\",\n\t\t\"@typescript-eslint/parser\": \"^8.4.0\",\n\t\t\"ava\": \"^6.1.3\",\n\t\t\"c8\": \"^10.1.2\",\n\t\t\"chalk\": \"^5.3.0\",\n\t\t\"enquirer\": \"^2.4.1\",\n\t\t\"eslint\": \"^9.10.0\",\n\t\t\"eslint-ava-rule-tester\": \"^5.0.1\",\n\t\t\"eslint-doc-generator\": \"^2.0.1\",\n\t\t\"eslint-plugin-eslint-plugin\": \"^6.2.0\",\n\t\t\"eslint-plugin-internal-rules\": \"file:./scripts/internal-rules/\",\n\t\t\"eslint-remote-tester\": \"^4.0.1\",\n\t\t\"eslint-remote-tester-repositories\": \"^2.0.0\",\n\t\t\"espree\": \"^10.1.0\",\n\t\t\"execa\": \"^8.0.1\",\n\t\t\"listr\": \"^0.14.3\",\n\t\t\"lodash-es\": \"^4.17.21\",\n\t\t\"markdownlint-cli\": \"^0.41.0\",\n\t\t\"memoize\": \"^10.0.0\",\n\t\t\"npm-package-json-lint\": \"^8.0.0\",\n\t\t\"npm-run-all2\": \"^6.2.2\",\n\t\t\"outdent\": \"^0.8.0\",\n\t\t\"pretty-ms\": \"^9.1.0\",\n\t\t\"typescript\": \"^5.5.4\",\n\t\t\"vue-eslint-parser\": \"^9.4.3\",\n\t\t\"xo\": \"^0.59.3\",\n\t\t\"yaml\": \"^2.5.1\"\n\t},\n\t\"peerDependencies\": {\n\t\t\"eslint\": \">=8.56.0\"\n\t},\n\t\"ava\": {\n\t\t\"files\": [\n\t\t\t\"test/*.mjs\",\n\t\t\t\"test/unit/*.mjs\"\n\t\t]\n\t},\n\t\"c8\": {\n\t\t\"reporter\": [\n\t\t\t\"text\",\n\t\t\t\"lcov\"\n\t\t]\n\t},\n\t\"xo\": {\n\t\t\"extends\": [\n\t\t\t\"plugin:internal-rules/all\"\n\t\t],\n\t\t\"ignores\": [\n\t\t\t\".cache-eslint-remote-tester\",\n\t\t\t\"eslint-remote-tester-results\",\n\t\t\t\"rules/utils/lodash.js\",\n\t\t\t\"test/integration/{fixtures,fixtures-local}/**\"\n\t\t],\n\t\t\"rules\": {\n\t\t\t\"unicorn/escape-case\": \"off\",\n\t\t\t\"unicorn/expiring-todo-comments\": \"off\",\n\t\t\t\"unicorn/no-hex-escape\": \"off\",\n\t\t\t\"unicorn/no-null\": \"error\",\n\t\t\t\"unicorn/prefer-array-flat\": [\n\t\t\t\t\"error\",\n\t\t\t\t{\n\t\t\t\t\t\"functions\": [\n\t\t\t\t\t\t\"flat\",\n\t\t\t\t\t\t\"flatten\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"import/order\": \"off\",\n\t\t\t\"func-names\": \"off\"\n\t\t},\n\t\t\"overrides\": [\n\t\t\t{\n\t\t\t\t\"files\": [\n\t\t\t\t\t\"**/*.js\"\n\t\t\t\t],\n\t\t\t\t\"parserOptions\": {\n\t\t\t\t\t\"sourceType\": \"script\"\n\t\t\t\t},\n\t\t\t\t\"rules\": {\n\t\t\t\t\t\"strict\": \"error\",\n\t\t\t\t\t\"unicorn/prefer-module\": \"off\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"files\": [\n\t\t\t\t\t\"rules/*.js\"\n\t\t\t\t],\n\t\t\t\t\"plugins\": [\n\t\t\t\t\t\"eslint-plugin\"\n\t\t\t\t],\n\t\t\t\t\"extends\": [\n\t\t\t\t\t\"plugin:eslint-plugin/all\"\n\t\t\t\t],\n\t\t\t\t\"rules\": {\n\t\t\t\t\t\"eslint-plugin/require-meta-docs-description\": [\n\t\t\t\t\t\t\"error\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"pattern\": \".+\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"eslint-plugin/require-meta-docs-url\": \"off\",\n\t\t\t\t\t\"eslint-plugin/require-meta-has-suggestions\": \"off\",\n\t\t\t\t\t\"eslint-plugin/require-meta-schema\": \"off\",\n\t\t\t\t\t\"eslint-plugin/require-meta-schema-description\": \"off\"\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 46.3330078125,
          "content": "# eslint-plugin-unicorn [![Coverage Status](https://codecov.io/gh/sindresorhus/eslint-plugin-unicorn/branch/main/graph/badge.svg)](https://codecov.io/gh/sindresorhus/eslint-plugin-unicorn/branch/main) [![npm version](https://img.shields.io/npm/v/eslint-plugin-unicorn.svg?style=flat)](https://npmjs.com/package/eslint-plugin-unicorn)\n\n<!-- markdownlint-disable-next-line no-inline-html -->\n<img src=\"https://cloud.githubusercontent.com/assets/170270/18659176/1cc373d0-7f33-11e6-890f-0ba35362ee7e.jpg\" width=\"180\" align=\"right\" alt=\"Unicorn\">\n\n> More than 100 powerful ESLint rules\n\nYou might want to check out [XO](https://github.com/xojs/xo), which includes this plugin.\n\n[**Propose or contribute a new rule ➡**](.github/contributing.md)\n\n## Install\n\n```sh\nnpm install --save-dev eslint eslint-plugin-unicorn\n```\n\n## Usage (`eslint.config.js`)\n\n**Requires ESLint `>=8.56.0`.**\n\nUse a [preset config](#preset-configs-eslintconfigjs) or configure each rule in `eslint.config.js`.\n\nIf you don't use the preset, ensure you use the same `languageOptions` config as below.\n\n### ES Module (Recommended)\n\n```js\nimport eslintPluginUnicorn from 'eslint-plugin-unicorn';\nimport globals from 'globals';\n\nexport default [\n\t{\n\t\tlanguageOptions: {\n\t\t\tglobals: globals.builtin,\n\t\t},\n\t\tplugins: {\n\t\t\tunicorn: eslintPluginUnicorn,\n\t\t},\n\t\trules: {\n\t\t\t'unicorn/better-regex': 'error',\n\t\t\t'unicorn/…': 'error',\n\t\t},\n\t},\n\t// …\n];\n```\n\n### CommonJS\n\n```js\n'use strict';\nconst eslintPluginUnicorn = require('eslint-plugin-unicorn');\nconst globals = require('globals');\n\nmodule.exports = [\n\t{\n\t\tlanguageOptions: {\n\t\t\tglobals: globals.builtin,\n\t\t},\n\t\tplugins: {\n\t\t\tunicorn: eslintPluginUnicorn,\n\t\t},\n\t\trules: {\n\t\t\t'unicorn/better-regex': 'error',\n\t\t\t'unicorn/…': 'error',\n\t\t},\n\t},\n\t// …\n];\n```\n\n## Usage (legacy: `.eslintrc.*` or `package.json`)\n\nUse a [preset config](#legacy-preset-configs-eslintrc-or-packagejson) or configure each rule in `package.json`.\n\nIf you don't use the preset, ensure you use the same `env` and `parserOptions` config as below.\n\n```json\n{\n\t\"name\": \"my-awesome-project\",\n\t\"eslintConfig\": {\n\t\t\"env\": {\n\t\t\t\"es2024\": true\n\t\t},\n\t\t\"parserOptions\": {\n\t\t\t\"ecmaVersion\": \"latest\",\n\t\t\t\"sourceType\": \"module\"\n\t\t},\n\t\t\"plugins\": [\n\t\t\t\"unicorn\"\n\t\t],\n\t\t\"rules\": {\n\t\t\t\"unicorn/better-regex\": \"error\",\n\t\t\t\"unicorn/…\": \"error\"\n\t\t}\n\t}\n}\n```\n\n## Rules\n\n<!-- Do not manually modify this list. Run: `npm run fix:eslint-docs` -->\n<!-- begin auto-generated rules list -->\n\n💼 [Configurations](https://github.com/sindresorhus/eslint-plugin-unicorn#preset-configs-eslintconfigjs) enabled in.\\\n✅ Set in the `recommended` [configuration](https://github.com/sindresorhus/eslint-plugin-unicorn#preset-configs-eslintconfigjs).\\\n🔧 Automatically fixable by the [`--fix` CLI option](https://eslint.org/docs/user-guide/command-line-interface#--fix).\\\n💡 Manually fixable by [editor suggestions](https://eslint.org/docs/latest/use/core-concepts#rule-suggestions).\n\n| Name                                                                                             | Description                                                                                                                                                                                                       | 💼 | 🔧 | 💡 |\n| :----------------------------------------------------------------------------------------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :- | :- | :- |\n| [better-regex](docs/rules/better-regex.md)                                                       | Improve regexes by making them shorter, consistent, and safer.                                                                                                                                                    |    | 🔧 |    |\n| [catch-error-name](docs/rules/catch-error-name.md)                                               | Enforce a specific parameter name in catch clauses.                                                                                                                                                               | ✅  | 🔧 |    |\n| [consistent-destructuring](docs/rules/consistent-destructuring.md)                               | Use destructured variables over properties.                                                                                                                                                                       |    | 🔧 | 💡 |\n| [consistent-empty-array-spread](docs/rules/consistent-empty-array-spread.md)                     | Prefer consistent types when spreading a ternary in an array literal.                                                                                                                                             | ✅  | 🔧 |    |\n| [consistent-existence-index-check](docs/rules/consistent-existence-index-check.md)               | Enforce consistent style for element existence checks with `indexOf()`, `lastIndexOf()`, `findIndex()`, and `findLastIndex()`.                                                                                    | ✅  | 🔧 |    |\n| [consistent-function-scoping](docs/rules/consistent-function-scoping.md)                         | Move function definitions to the highest possible scope.                                                                                                                                                          | ✅  |    |    |\n| [custom-error-definition](docs/rules/custom-error-definition.md)                                 | Enforce correct `Error` subclassing.                                                                                                                                                                              |    | 🔧 |    |\n| [empty-brace-spaces](docs/rules/empty-brace-spaces.md)                                           | Enforce no spaces between braces.                                                                                                                                                                                 | ✅  | 🔧 |    |\n| [error-message](docs/rules/error-message.md)                                                     | Enforce passing a `message` value when creating a built-in error.                                                                                                                                                 | ✅  |    |    |\n| [escape-case](docs/rules/escape-case.md)                                                         | Require escape sequences to use uppercase values.                                                                                                                                                                 | ✅  | 🔧 |    |\n| [expiring-todo-comments](docs/rules/expiring-todo-comments.md)                                   | Add expiration conditions to TODO comments.                                                                                                                                                                       | ✅  |    |    |\n| [explicit-length-check](docs/rules/explicit-length-check.md)                                     | Enforce explicitly comparing the `length` or `size` property of a value.                                                                                                                                          | ✅  | 🔧 | 💡 |\n| [filename-case](docs/rules/filename-case.md)                                                     | Enforce a case style for filenames.                                                                                                                                                                               | ✅  |    |    |\n| [import-style](docs/rules/import-style.md)                                                       | Enforce specific import styles per module.                                                                                                                                                                        | ✅  |    |    |\n| [new-for-builtins](docs/rules/new-for-builtins.md)                                               | Enforce the use of `new` for all builtins, except `String`, `Number`, `Boolean`, `Symbol` and `BigInt`.                                                                                                           | ✅  | 🔧 |    |\n| [no-abusive-eslint-disable](docs/rules/no-abusive-eslint-disable.md)                             | Enforce specifying rules to disable in `eslint-disable` comments.                                                                                                                                                 | ✅  |    |    |\n| [no-anonymous-default-export](docs/rules/no-anonymous-default-export.md)                         | Disallow anonymous functions and classes as the default export.                                                                                                                                                   | ✅  |    | 💡 |\n| [no-array-callback-reference](docs/rules/no-array-callback-reference.md)                         | Prevent passing a function reference directly to iterator methods.                                                                                                                                                | ✅  |    | 💡 |\n| [no-array-for-each](docs/rules/no-array-for-each.md)                                             | Prefer `for…of` over the `forEach` method.                                                                                                                                                                        | ✅  | 🔧 | 💡 |\n| [no-array-method-this-argument](docs/rules/no-array-method-this-argument.md)                     | Disallow using the `this` argument in array methods.                                                                                                                                                              | ✅  | 🔧 | 💡 |\n| [no-array-push-push](docs/rules/no-array-push-push.md)                                           | Enforce combining multiple `Array#push()` into one call.                                                                                                                                                          | ✅  | 🔧 | 💡 |\n| [no-array-reduce](docs/rules/no-array-reduce.md)                                                 | Disallow `Array#reduce()` and `Array#reduceRight()`.                                                                                                                                                              | ✅  |    |    |\n| [no-await-expression-member](docs/rules/no-await-expression-member.md)                           | Disallow member access from await expression.                                                                                                                                                                     | ✅  | 🔧 |    |\n| [no-await-in-promise-methods](docs/rules/no-await-in-promise-methods.md)                         | Disallow using `await` in `Promise` method parameters.                                                                                                                                                            | ✅  |    | 💡 |\n| [no-console-spaces](docs/rules/no-console-spaces.md)                                             | Do not use leading/trailing space between `console.log` parameters.                                                                                                                                               | ✅  | 🔧 |    |\n| [no-document-cookie](docs/rules/no-document-cookie.md)                                           | Do not use `document.cookie` directly.                                                                                                                                                                            | ✅  |    |    |\n| [no-empty-file](docs/rules/no-empty-file.md)                                                     | Disallow empty files.                                                                                                                                                                                             | ✅  |    |    |\n| [no-for-loop](docs/rules/no-for-loop.md)                                                         | Do not use a `for` loop that can be replaced with a `for-of` loop.                                                                                                                                                | ✅  | 🔧 | 💡 |\n| [no-hex-escape](docs/rules/no-hex-escape.md)                                                     | Enforce the use of Unicode escapes instead of hexadecimal escapes.                                                                                                                                                | ✅  | 🔧 |    |\n| [no-instanceof-array](docs/rules/no-instanceof-array.md)                                         | Require `Array.isArray()` instead of `instanceof Array`.                                                                                                                                                          | ✅  | 🔧 |    |\n| [no-invalid-fetch-options](docs/rules/no-invalid-fetch-options.md)                               | Disallow invalid options in `fetch()` and `new Request()`.                                                                                                                                                        | ✅  |    |    |\n| [no-invalid-remove-event-listener](docs/rules/no-invalid-remove-event-listener.md)               | Prevent calling `EventTarget#removeEventListener()` with the result of an expression.                                                                                                                             | ✅  |    |    |\n| [no-keyword-prefix](docs/rules/no-keyword-prefix.md)                                             | Disallow identifiers starting with `new` or `class`.                                                                                                                                                              |    |    |    |\n| [no-length-as-slice-end](docs/rules/no-length-as-slice-end.md)                                   | Disallow using `.length` as the `end` argument of `{Array,String,TypedArray}#slice()`.                                                                                                                            | ✅  | 🔧 |    |\n| [no-lonely-if](docs/rules/no-lonely-if.md)                                                       | Disallow `if` statements as the only statement in `if` blocks without `else`.                                                                                                                                     | ✅  | 🔧 |    |\n| [no-magic-array-flat-depth](docs/rules/no-magic-array-flat-depth.md)                             | Disallow a magic number as the `depth` argument in `Array#flat(…).`                                                                                                                                               | ✅  |    |    |\n| [no-negated-condition](docs/rules/no-negated-condition.md)                                       | Disallow negated conditions.                                                                                                                                                                                      | ✅  | 🔧 |    |\n| [no-negation-in-equality-check](docs/rules/no-negation-in-equality-check.md)                     | Disallow negated expression in equality check.                                                                                                                                                                    | ✅  |    | 💡 |\n| [no-nested-ternary](docs/rules/no-nested-ternary.md)                                             | Disallow nested ternary expressions.                                                                                                                                                                              | ✅  | 🔧 |    |\n| [no-new-array](docs/rules/no-new-array.md)                                                       | Disallow `new Array()`.                                                                                                                                                                                           | ✅  | 🔧 | 💡 |\n| [no-new-buffer](docs/rules/no-new-buffer.md)                                                     | Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`.                                                                                                                 | ✅  | 🔧 | 💡 |\n| [no-null](docs/rules/no-null.md)                                                                 | Disallow the use of the `null` literal.                                                                                                                                                                           | ✅  | 🔧 | 💡 |\n| [no-object-as-default-parameter](docs/rules/no-object-as-default-parameter.md)                   | Disallow the use of objects as default parameters.                                                                                                                                                                | ✅  |    |    |\n| [no-process-exit](docs/rules/no-process-exit.md)                                                 | Disallow `process.exit()`.                                                                                                                                                                                        | ✅  |    |    |\n| [no-single-promise-in-promise-methods](docs/rules/no-single-promise-in-promise-methods.md)       | Disallow passing single-element arrays to `Promise` methods.                                                                                                                                                      | ✅  | 🔧 | 💡 |\n| [no-static-only-class](docs/rules/no-static-only-class.md)                                       | Disallow classes that only have static members.                                                                                                                                                                   | ✅  | 🔧 |    |\n| [no-thenable](docs/rules/no-thenable.md)                                                         | Disallow `then` property.                                                                                                                                                                                         | ✅  |    |    |\n| [no-this-assignment](docs/rules/no-this-assignment.md)                                           | Disallow assigning `this` to a variable.                                                                                                                                                                          | ✅  |    |    |\n| [no-typeof-undefined](docs/rules/no-typeof-undefined.md)                                         | Disallow comparing `undefined` using `typeof`.                                                                                                                                                                    | ✅  | 🔧 | 💡 |\n| [no-unnecessary-await](docs/rules/no-unnecessary-await.md)                                       | Disallow awaiting non-promise values.                                                                                                                                                                             | ✅  | 🔧 |    |\n| [no-unnecessary-polyfills](docs/rules/no-unnecessary-polyfills.md)                               | Enforce the use of built-in methods instead of unnecessary polyfills.                                                                                                                                             | ✅  |    |    |\n| [no-unreadable-array-destructuring](docs/rules/no-unreadable-array-destructuring.md)             | Disallow unreadable array destructuring.                                                                                                                                                                          | ✅  | 🔧 |    |\n| [no-unreadable-iife](docs/rules/no-unreadable-iife.md)                                           | Disallow unreadable IIFEs.                                                                                                                                                                                        | ✅  |    |    |\n| [no-unused-properties](docs/rules/no-unused-properties.md)                                       | Disallow unused object properties.                                                                                                                                                                                |    |    |    |\n| [no-useless-fallback-in-spread](docs/rules/no-useless-fallback-in-spread.md)                     | Disallow useless fallback when spreading in object literals.                                                                                                                                                      | ✅  | 🔧 |    |\n| [no-useless-length-check](docs/rules/no-useless-length-check.md)                                 | Disallow useless array length check.                                                                                                                                                                              | ✅  | 🔧 |    |\n| [no-useless-promise-resolve-reject](docs/rules/no-useless-promise-resolve-reject.md)             | Disallow returning/yielding `Promise.resolve/reject()` in async functions or promise callbacks                                                                                                                    | ✅  | 🔧 |    |\n| [no-useless-spread](docs/rules/no-useless-spread.md)                                             | Disallow unnecessary spread.                                                                                                                                                                                      | ✅  | 🔧 |    |\n| [no-useless-switch-case](docs/rules/no-useless-switch-case.md)                                   | Disallow useless case in switch statements.                                                                                                                                                                       | ✅  |    | 💡 |\n| [no-useless-undefined](docs/rules/no-useless-undefined.md)                                       | Disallow useless `undefined`.                                                                                                                                                                                     | ✅  | 🔧 |    |\n| [no-zero-fractions](docs/rules/no-zero-fractions.md)                                             | Disallow number literals with zero fractions or dangling dots.                                                                                                                                                    | ✅  | 🔧 |    |\n| [number-literal-case](docs/rules/number-literal-case.md)                                         | Enforce proper case for numeric literals.                                                                                                                                                                         | ✅  | 🔧 |    |\n| [numeric-separators-style](docs/rules/numeric-separators-style.md)                               | Enforce the style of numeric separators by correctly grouping digits.                                                                                                                                             | ✅  | 🔧 |    |\n| [prefer-add-event-listener](docs/rules/prefer-add-event-listener.md)                             | Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions.                                                                                                                                    | ✅  | 🔧 |    |\n| [prefer-array-find](docs/rules/prefer-array-find.md)                                             | Prefer `.find(…)` and `.findLast(…)` over the first or last element from `.filter(…)`.                                                                                                                            | ✅  | 🔧 | 💡 |\n| [prefer-array-flat](docs/rules/prefer-array-flat.md)                                             | Prefer `Array#flat()` over legacy techniques to flatten arrays.                                                                                                                                                   | ✅  | 🔧 |    |\n| [prefer-array-flat-map](docs/rules/prefer-array-flat-map.md)                                     | Prefer `.flatMap(…)` over `.map(…).flat()`.                                                                                                                                                                       | ✅  | 🔧 |    |\n| [prefer-array-index-of](docs/rules/prefer-array-index-of.md)                                     | Prefer `Array#{indexOf,lastIndexOf}()` over `Array#{findIndex,findLastIndex}()` when looking for the index of an item.                                                                                            | ✅  | 🔧 | 💡 |\n| [prefer-array-some](docs/rules/prefer-array-some.md)                                             | Prefer `.some(…)` over `.filter(…).length` check and `.{find,findLast,findIndex,findLastIndex}(…)`.                                                                                                               | ✅  | 🔧 | 💡 |\n| [prefer-at](docs/rules/prefer-at.md)                                                             | Prefer `.at()` method for index access and `String#charAt()`.                                                                                                                                                     | ✅  | 🔧 | 💡 |\n| [prefer-blob-reading-methods](docs/rules/prefer-blob-reading-methods.md)                         | Prefer `Blob#arrayBuffer()` over `FileReader#readAsArrayBuffer(…)` and `Blob#text()` over `FileReader#readAsText(…)`.                                                                                             | ✅  |    |    |\n| [prefer-code-point](docs/rules/prefer-code-point.md)                                             | Prefer `String#codePointAt(…)` over `String#charCodeAt(…)` and `String.fromCodePoint(…)` over `String.fromCharCode(…)`.                                                                                           | ✅  |    | 💡 |\n| [prefer-date-now](docs/rules/prefer-date-now.md)                                                 | Prefer `Date.now()` to get the number of milliseconds since the Unix Epoch.                                                                                                                                       | ✅  | 🔧 |    |\n| [prefer-default-parameters](docs/rules/prefer-default-parameters.md)                             | Prefer default parameters over reassignment.                                                                                                                                                                      | ✅  | 🔧 | 💡 |\n| [prefer-dom-node-append](docs/rules/prefer-dom-node-append.md)                                   | Prefer `Node#append()` over `Node#appendChild()`.                                                                                                                                                                 | ✅  | 🔧 |    |\n| [prefer-dom-node-dataset](docs/rules/prefer-dom-node-dataset.md)                                 | Prefer using `.dataset` on DOM elements over calling attribute methods.                                                                                                                                           | ✅  | 🔧 |    |\n| [prefer-dom-node-remove](docs/rules/prefer-dom-node-remove.md)                                   | Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.                                                                                                                                             | ✅  | 🔧 | 💡 |\n| [prefer-dom-node-text-content](docs/rules/prefer-dom-node-text-content.md)                       | Prefer `.textContent` over `.innerText`.                                                                                                                                                                          | ✅  |    | 💡 |\n| [prefer-event-target](docs/rules/prefer-event-target.md)                                         | Prefer `EventTarget` over `EventEmitter`.                                                                                                                                                                         | ✅  |    |    |\n| [prefer-export-from](docs/rules/prefer-export-from.md)                                           | Prefer `export…from` when re-exporting.                                                                                                                                                                           | ✅  | 🔧 | 💡 |\n| [prefer-global-this](docs/rules/prefer-global-this.md)                                           | Prefer `globalThis` over `window`, `self`, and `global`.                                                                                                                                                          | ✅  | 🔧 |    |\n| [prefer-includes](docs/rules/prefer-includes.md)                                                 | Prefer `.includes()` over `.indexOf()`, `.lastIndexOf()`, and `Array#some()` when checking for existence or non-existence.                                                                                        | ✅  | 🔧 | 💡 |\n| [prefer-json-parse-buffer](docs/rules/prefer-json-parse-buffer.md)                               | Prefer reading a JSON file as a buffer.                                                                                                                                                                           |    | 🔧 |    |\n| [prefer-keyboard-event-key](docs/rules/prefer-keyboard-event-key.md)                             | Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`.                                                                                                                                                          | ✅  | 🔧 |    |\n| [prefer-logical-operator-over-ternary](docs/rules/prefer-logical-operator-over-ternary.md)       | Prefer using a logical operator over a ternary.                                                                                                                                                                   | ✅  |    | 💡 |\n| [prefer-math-min-max](docs/rules/prefer-math-min-max.md)                                         | Prefer `Math.min()` and `Math.max()` over ternaries for simple comparisons.                                                                                                                                       | ✅  | 🔧 |    |\n| [prefer-math-trunc](docs/rules/prefer-math-trunc.md)                                             | Enforce the use of `Math.trunc` instead of bitwise operators.                                                                                                                                                     | ✅  | 🔧 | 💡 |\n| [prefer-modern-dom-apis](docs/rules/prefer-modern-dom-apis.md)                                   | Prefer `.before()` over `.insertBefore()`, `.replaceWith()` over `.replaceChild()`, prefer one of `.before()`, `.after()`, `.append()` or `.prepend()` over `insertAdjacentText()` and `insertAdjacentElement()`. | ✅  | 🔧 |    |\n| [prefer-modern-math-apis](docs/rules/prefer-modern-math-apis.md)                                 | Prefer modern `Math` APIs over legacy patterns.                                                                                                                                                                   | ✅  | 🔧 |    |\n| [prefer-module](docs/rules/prefer-module.md)                                                     | Prefer JavaScript modules (ESM) over CommonJS.                                                                                                                                                                    | ✅  | 🔧 | 💡 |\n| [prefer-native-coercion-functions](docs/rules/prefer-native-coercion-functions.md)               | Prefer using `String`, `Number`, `BigInt`, `Boolean`, and `Symbol` directly.                                                                                                                                      | ✅  | 🔧 |    |\n| [prefer-negative-index](docs/rules/prefer-negative-index.md)                                     | Prefer negative index over `.length - index` when possible.                                                                                                                                                       | ✅  | 🔧 |    |\n| [prefer-node-protocol](docs/rules/prefer-node-protocol.md)                                       | Prefer using the `node:` protocol when importing Node.js builtin modules.                                                                                                                                         | ✅  | 🔧 |    |\n| [prefer-number-properties](docs/rules/prefer-number-properties.md)                               | Prefer `Number` static properties over global ones.                                                                                                                                                               | ✅  | 🔧 | 💡 |\n| [prefer-object-from-entries](docs/rules/prefer-object-from-entries.md)                           | Prefer using `Object.fromEntries(…)` to transform a list of key-value pairs into an object.                                                                                                                       | ✅  | 🔧 |    |\n| [prefer-optional-catch-binding](docs/rules/prefer-optional-catch-binding.md)                     | Prefer omitting the `catch` binding parameter.                                                                                                                                                                    | ✅  | 🔧 |    |\n| [prefer-prototype-methods](docs/rules/prefer-prototype-methods.md)                               | Prefer borrowing methods from the prototype instead of the instance.                                                                                                                                              | ✅  | 🔧 |    |\n| [prefer-query-selector](docs/rules/prefer-query-selector.md)                                     | Prefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()` and `.getElementsByName()`.                                              | ✅  | 🔧 |    |\n| [prefer-reflect-apply](docs/rules/prefer-reflect-apply.md)                                       | Prefer `Reflect.apply()` over `Function#apply()`.                                                                                                                                                                 | ✅  | 🔧 |    |\n| [prefer-regexp-test](docs/rules/prefer-regexp-test.md)                                           | Prefer `RegExp#test()` over `String#match()` and `RegExp#exec()`.                                                                                                                                                 | ✅  | 🔧 | 💡 |\n| [prefer-set-has](docs/rules/prefer-set-has.md)                                                   | Prefer `Set#has()` over `Array#includes()` when checking for existence or non-existence.                                                                                                                          | ✅  | 🔧 | 💡 |\n| [prefer-set-size](docs/rules/prefer-set-size.md)                                                 | Prefer using `Set#size` instead of `Array#length`.                                                                                                                                                                | ✅  | 🔧 |    |\n| [prefer-spread](docs/rules/prefer-spread.md)                                                     | Prefer the spread operator over `Array.from(…)`, `Array#concat(…)`, `Array#{slice,toSpliced}()` and `String#split('')`.                                                                                           | ✅  | 🔧 | 💡 |\n| [prefer-string-raw](docs/rules/prefer-string-raw.md)                                             | Prefer using the `String.raw` tag to avoid escaping `\\`.                                                                                                                                                          | ✅  | 🔧 |    |\n| [prefer-string-replace-all](docs/rules/prefer-string-replace-all.md)                             | Prefer `String#replaceAll()` over regex searches with the global flag.                                                                                                                                            | ✅  | 🔧 |    |\n| [prefer-string-slice](docs/rules/prefer-string-slice.md)                                         | Prefer `String#slice()` over `String#substr()` and `String#substring()`.                                                                                                                                          | ✅  | 🔧 |    |\n| [prefer-string-starts-ends-with](docs/rules/prefer-string-starts-ends-with.md)                   | Prefer `String#startsWith()` & `String#endsWith()` over `RegExp#test()`.                                                                                                                                          | ✅  | 🔧 | 💡 |\n| [prefer-string-trim-start-end](docs/rules/prefer-string-trim-start-end.md)                       | Prefer `String#trimStart()` / `String#trimEnd()` over `String#trimLeft()` / `String#trimRight()`.                                                                                                                 | ✅  | 🔧 |    |\n| [prefer-structured-clone](docs/rules/prefer-structured-clone.md)                                 | Prefer using `structuredClone` to create a deep clone.                                                                                                                                                            | ✅  |    | 💡 |\n| [prefer-switch](docs/rules/prefer-switch.md)                                                     | Prefer `switch` over multiple `else-if`.                                                                                                                                                                          | ✅  | 🔧 |    |\n| [prefer-ternary](docs/rules/prefer-ternary.md)                                                   | Prefer ternary expressions over simple `if-else` statements.                                                                                                                                                      | ✅  | 🔧 |    |\n| [prefer-top-level-await](docs/rules/prefer-top-level-await.md)                                   | Prefer top-level await over top-level promises and async function calls.                                                                                                                                          | ✅  |    | 💡 |\n| [prefer-type-error](docs/rules/prefer-type-error.md)                                             | Enforce throwing `TypeError` in type checking conditions.                                                                                                                                                         | ✅  | 🔧 |    |\n| [prevent-abbreviations](docs/rules/prevent-abbreviations.md)                                     | Prevent abbreviations.                                                                                                                                                                                            | ✅  | 🔧 |    |\n| [relative-url-style](docs/rules/relative-url-style.md)                                           | Enforce consistent relative URL style.                                                                                                                                                                            | ✅  | 🔧 | 💡 |\n| [require-array-join-separator](docs/rules/require-array-join-separator.md)                       | Enforce using the separator argument with `Array#join()`.                                                                                                                                                         | ✅  | 🔧 |    |\n| [require-number-to-fixed-digits-argument](docs/rules/require-number-to-fixed-digits-argument.md) | Enforce using the digits argument with `Number#toFixed()`.                                                                                                                                                        | ✅  | 🔧 |    |\n| [require-post-message-target-origin](docs/rules/require-post-message-target-origin.md)           | Enforce using the `targetOrigin` argument with `window.postMessage()`.                                                                                                                                            |    |    | 💡 |\n| [string-content](docs/rules/string-content.md)                                                   | Enforce better string content.                                                                                                                                                                                    |    | 🔧 | 💡 |\n| [switch-case-braces](docs/rules/switch-case-braces.md)                                           | Enforce consistent brace style for `case` clauses.                                                                                                                                                                | ✅  | 🔧 |    |\n| [template-indent](docs/rules/template-indent.md)                                                 | Fix whitespace-insensitive template indentation.                                                                                                                                                                  | ✅  | 🔧 |    |\n| [text-encoding-identifier-case](docs/rules/text-encoding-identifier-case.md)                     | Enforce consistent case for text encoding identifiers.                                                                                                                                                            | ✅  | 🔧 | 💡 |\n| [throw-new-error](docs/rules/throw-new-error.md)                                                 | Require `new` when creating an error.                                                                                                                                                                             | ✅  | 🔧 |    |\n\n<!-- end auto-generated rules list -->\n\n### Deprecated Rules\n\nSee [docs/deprecated-rules.md](docs/deprecated-rules.md)\n\n## Preset configs (`eslint.config.js`)\n\nSee the [ESLint docs](https://eslint.org/docs/latest/use/configure/configuration-files) for more information about extending config files.\n\n**Note**: Preset configs will also enable the correct [language options](https://eslint.org/docs/latest/use/configure/language-options).\n\n### Recommended config\n\nThis plugin exports a `recommended` config that enforces good practices.\n\n#### ES Module (Recommended)\n\n```js\nimport eslintPluginUnicorn from 'eslint-plugin-unicorn';\n\nexport default [\n\t\t// …\n\t\teslintPluginUnicorn.configs['flat/recommended'],\n\t\t{\n\t\t\trules: {\n\t\t\t\t'unicorn/better-regex': 'warn',\n\t\t\t},\n\t\t},\n];\n```\n\n#### CommonJS\n\n```js\n'use strict';\nconst eslintPluginUnicorn = require('eslint-plugin-unicorn');\n\nmodule.exports = [\n\t\t// …\n\t\teslintPluginUnicorn.configs['flat/recommended'],\n\t\t{\n\t\t\trules: {\n\t\t\t\t'unicorn/better-regex': 'warn',\n\t\t\t},\n\t\t},\n];\n```\n\n### All config\n\nThis plugin exports an `all` that makes use of all rules (except for deprecated ones).\n\n#### ES Module (Recommended)\n\n```js\nimport eslintPluginUnicorn from 'eslint-plugin-unicorn';\n\nexport default [\n\t\t// …\n\t\teslintPluginUnicorn.configs['flat/all'],\n\t\t{\n\t\t\trules: {\n\t\t\t\t'unicorn/better-regex': 'warn',\n\t\t\t},\n\t\t},\n];\n```\n\n#### CommonJS\n\n```js\n'use strict';\nconst eslintPluginUnicorn = require('eslint-plugin-unicorn');\n\nmodule.exports = [\n\t\t// …\n\t\teslintPluginUnicorn.configs['flat/all'],\n\t\t{\n\t\t\trules: {\n\t\t\t\t'unicorn/better-regex': 'warn',\n\t\t\t},\n\t\t},\n];\n```\n\n## Legacy preset configs (`.eslintrc.*` or `package.json`)\n\nSee the [ESLint docs](https://eslint.org/docs/latest/use/configure/configuration-files-deprecated) for more information about extending deprecated legacy config files.\n\n**Note**: Preset configs will also enable the correct [parser options](https://eslint.org/docs/latest/use/configure/parser-deprecated) and [environment](https://eslint.org/docs/latest/use/configure/language-options-deprecated).\n\n### Recommended legacy config\n\nThis plugin exports a `recommended` legacy config that enforces good practices.\n\n```json\n{\n\t\"name\": \"my-awesome-project\",\n\t\"eslintConfig\": {\n\t\t\"extends\": \"plugin:unicorn/recommended\",\n\t\t\"rules\": {\n\t\t\t\"unicorn/better-regex\": \"warn\"\n\t\t}\n\t}\n}\n```\n\n### All legacy config\n\nThis plugin exports an `all` legacy config that makes use of all rules (except for deprecated ones).\n\n```json\n{\n\t\"name\": \"my-awesome-project\",\n\t\"eslintConfig\": {\n\t\t\"extends\": \"plugin:unicorn/all\"\n\t}\n}\n```\n\n## Maintainers\n\n- [Sindre Sorhus](https://github.com/sindresorhus)\n- [Fisker Cheung](https://github.com/fisker)\n- [Bryan Mishkin](https://github.com/bmish)\n- [futpib](https://github.com/futpib)\n\n### Former\n\n- [Jeroen Engels](https://github.com/jfmengels)\n- [Sam Verschueren](https://github.com/SamVerschueren)\n- [Adam Babcock](https://github.com/MrHen)\n"
        },
        {
          "name": "rules",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}