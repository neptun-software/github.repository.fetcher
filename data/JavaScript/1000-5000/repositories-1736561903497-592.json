{
  "metadata": {
    "timestamp": 1736561903497,
    "page": 592,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "moshang-ax/lottery",
      "stars": 3634,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0439453125,
          "content": "#npm\nnode_modules/\ndist/\ntemp.json\nerror.json"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.923828125,
          "content": "# Use the official Node.js 16 image as base image\nFROM node:16.14.0-buster\n\n# Upgrade npm to the latest version\nRUN npm install -g npm@9.6.2\n\n# Set the author of the Dockerfile\nLABEL maintainer=\"YIN\"\n\n# Add the application source code to the container\nADD lottery.tar.gz  /\n\n# Set the working directory to the root directory of the application\nWORKDIR /lottery\n\n# Set the ownership of the application directory to root\nRUN chown -R root /lottery \\\n    # Remove the line that opens the default browser when starting the server\n    && sed -i '/openBrowser/ d' ./server/server.js \\\n    # Install dependencies for the server and product directories\n    && cd server && npm install \\\n    && cd ../product && npm install \\\n    # Build the application\n    && npm run build\n\n# Expose port 8080 to the outside world\nEXPOSE 8080\n\n# Set the working directory to the product directory\nWORKDIR /lottery/product\n\n# Start the server\nCMD [\"npm\", \"run\", \"serve\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.037109375,
          "content": "MIT License\n\nCopyright (c) 2017 Pavel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README-ZH_CN.MD",
          "type": "blob",
          "size": 6.3818359375,
          "content": "# 抽奖程序\n\n年会抽奖程序，3D 球体抽奖，支持奖品信息配置，参与抽奖人员信息`Excel`导入，抽奖结果`Excel`导出\n\n如果该程序对你有帮助😎😎😎，希望给个⭐**star**⭐喔。😘😘😘😍🥰🎉🎈🎃\n\n> 立即体验一下： [https://moshang-xc.github.io/lottery/](https://moshang-xc.github.io/lottery/)\n\n## 技术\n\n技术：Node + Express + Three.js\n\n后台通过`Express`实现\n\n前端抽奖界面通过`Three.js`实现 3D 抽奖球，引用了`Three.js`的官方 3D 示例\n\n## 功能描述：\n\n1. 可将抽奖结果进行保存实时下载到 excel 中🎉\n2. 已抽取人员不在参与抽取，抽中的人员不在现场可以重新抽取🎁\n3. 刷新或者关掉服务器，会保存当前已抽取的数据，不会进行数据重置，只有点击界面上的重置按钮，才能重置抽奖数据🧧\n4. 每次抽取的奖品数目可配置🎈\n5. 抽取完所有奖品后还可以继续抽取特别奖(例如：现在抽取红包，追加的奖品等)，此时默认一次抽取一个🧨\n\n## 预览\n\n![lottery.gif](https://raw.githubusercontent.com/moshang-xc/blog/master/share/lottery.gif)\n\n![index.jpg](https://raw.githubusercontent.com/moshang-xc/blog/master/share/index.jpg)\n\n![start.jpg](https://raw.githubusercontent.com/moshang-xc/blog/master/share/start.jpg)\n\n![end.jpg](https://raw.githubusercontent.com/moshang-xc/blog/master/share/end.jpg)\n\n## 安装\n\n```\ngit clone https://github.com/moshang-xc/lottery.git\n\ncd lottery\n\n# 服务端插件安装\ncd server\nnpm install\n\n# 前端插件安装\ncd ../product\nnpm install\n\n# 打包\nnpm run build\n\n# 运行\nnpm run serve\n\n# 开发调试\nnpm run dev\n\n```\n\n## 目录结构\n\n```\nLottery\n├── product\n│   ├── src\n│   │   ├── lottery\n│   │   │   └── index.js\n│   │   ├── lib\n│   │   ├── img\n│   │   ├── css\n│   │   └── data\n│   ├── package.json\n│   └── webpack.config.js\n├── server\n│   ├── config.js\n│   ├── server.js\n│   └── package.js\n```\n\n> 1. product 为前端页面目录\n> 2. package.josn web 项目配置文件\n> 3. webpack.config.js 打包配置文件\n> 4. server 为服务器目录\n> 5. config 为奖品信息的配置文件\n\n## 配置信息\n\n### 抽奖用户信息配置\n\n抽奖用户信息在**`server/data/user.xlsx`**文件中，按文件格式进行填充，不能修改文件名和列头\n\n### 奖品信息配置\n\n奖品的配置信息填写在**server/config.js**文件中，不能修改文件名。\n\n**其中奖品 prizes 的配置描述如下：**\n\n| 参数  | 值类型 | 描述                                                         |\n| ----- | ------ | ------------------------------------------------------------ |\n| type  | Number | 奖品类型，唯一标识，0 是默认特别奖的占位符，其它奖品不可使用 |\n| count | Number | 奖品数量                                                     |\n| text  | String | 奖项名称                                                     |\n| title | String | 奖品描述                                                     |\n| img   | String | 奖品的图片地址，图片在**img**目录下                          |\n\n```js\n// 奖品信息，第一项为预留项不可修改，其他项可根据需要修改\nlet prizes = [{\n        type: 0,\n        count: 1000,\n        title: \"\",\n        text: \"特别奖\"\n    },\n    {\n        type: 1,\n        count: 2,\n        text: \"特等奖\",\n        title: \"神秘大礼\",\n        img: \"../img/secrit.jpg\"\n    },\n    {\n        type: 2,\n        count: 5,\n        text: \"一等奖\",\n        title: \"Mac Pro\",\n        img: \"../img/mbp.jpg\"\n    }\n    ...\n];\n```\n\n### 奖品每次抽取个数配置\n\n**EACH_COUNT**用于配置每次的抽奖个数，与 prizes 奖品一一对应，例如上面的奖品配置对应的抽奖个数配置如下：\n\n```js\nconst EACH_COUNT = [1, 1, 5];\n```\n\n如上配置，表示一次抽取的奖品个数顺序为：特别奖每次抽一个，特等奖每次抽一个，一等奖每次抽五个\n\n### 企业标识配置\n\n该标识用于显示在抽奖卡片上。\n\n```js\nconst COMPANY = \"MoShang\";\n```\n\n\n## Docker部署方案\n\n### 概述\n\n该项目现在支持使用Docker进行部署。Docker是一个轻量级的容器化平台，可以让您快速地部署、测试和运行应用程序。本文档将向您介绍如何使用Docker部署该项目。\n\n### 系统要求\n\n在您开始使用Docker部署该项目之前，您需要确保已经安装了以下软件：\n\n- Docker（请参阅Docker的官方文档以获取安装说明）\n- Docker Compose\n\n### 安装\n\n1. 下载并解压该项目的源代码。\n\n2. 进入解压后的项目目录。\n\n3. 执行以下命令以构建Docker镜像：\n\n   ```\n   ./build.sh [TAG]\n   ```\n\n   这将使用Dockerfile构建一个名为`lottery:[TAG]`的Docker镜像。如果未指定标签，则默认使用`latest`标签。\n\n4. 执行以下命令以在本地运行容器：\n\n   ```\n   ./dev.sh [TAG]\n   ```\n\n   这将启动容器并将应用程序部署在Docker容器中。您可以在本地进行测试，确保一切正常。请注意，容器内部的应用程序将会监听8888端口和443端口。\n\n5. 执行以下命令以将Docker镜像标记并推送到远程Docker仓库：\n\n   ```\n   ./tagpush.sh [TAG]\n   ```\n\n   这将为Docker镜像打上标签并将其推送到远程Docker仓库，如果要使用docker官方的hub请先在https://hub.docker.com/新建自己的repo，然后将文件中的用户名改为自己。请注意，`[TAG]`应替换为您要使用的标签名称。\n\n6. 确保有一个名为`docker-compose.yml`的文件，并添加以下内容：\n\n   ```\n   version: '3.8'\n   \n   volumes:\n     lottery_log:\n   \n   services:\n     lottery:\n       container_name: lottery\n       expose:\n         - 8888\n       ports:\n         - \"28458:8888\"\n         - \"443:443\"\n       volumes:\n         - \"lottery_log:/var/log\"\n       image: \"panda1024/lottery:[TAG]\" \n       restart: always\n   ```\n\n   请注意，`[TAG]`应替换为您推送到Docker仓库的镜像名称。\n\n7. 在服务器上的项目目录中运行以下命令以使用Docker Compose部署应用程序：\n\n```\n\tdocker-compose up -d\n```\n\n​\t\t这将启动一个Docker Compose堆栈，并将该项目部署在其中。请注意，此处将容器的8888端口和443端口映射\t\t到了服务器上的8888端口和443端口。如果您希望使用其他端口，请相应地更改`docker-compose.yml`文件。\n\n\n\n## License\n\nMIT\n"
        },
        {
          "name": "README.MD",
          "type": "blob",
          "size": 7.173828125,
          "content": "# Lottery program\n\nAnnual dinner lottery program, 3D sphere raffle, support for configuration of prize information, import participants information by `Excel`, and export lottery results by `Excel`\nIf programm is helpful for you😎😎😎, it will be greatful to comment us with⭐**star**⭐ 😘😘😘😍🥰🎉🎈🎃\n\n[点击跳转至中文使用文档](https://github.com/moshang-xc/lottery/blob/master/README-ZH_CN.MD)\n\n> Try it now:  [https://moshang-xc.github.io/lottery/](https://moshang-xc.github.io/lottery/)\n\n## Technology Stack\n\nTechnology stack: Node + Express + Three.js\n\nServer: Express + Node\n\nWeb Page: Three.js, References to the official 3D example of `Three.js`\n\n## Function Description:\n\n1. The result can ben save and downloaded to excel synchronously🎉\n2. The winner will not participate in the drawing, and the drawing person can be drawn again if he/she not on site🎁\n3. Refresh or trun off the server will save the winner data and will not resrt the lottery data, only by click the reset button on the page can the  lottery data be reset🧧\n4. The number of prizes is able to configure🎈\n5. After all the prizes have been drawn, you can continue to draw special prizes(For example:Red pockets, additional prizes, etc). By default, one is extracted at once🧨\n\n## Preview\n\n> Try it now:  [https://moshang-xc.github.io/lottery/](https://moshang-xc.github.io/lottery/)\n\n![lottery.gif](https://raw.githubusercontent.com/moshang-xc/blog/master/share/lottery.gif)\n\n![index.jpg](https://raw.githubusercontent.com/moshang-xc/blog/master/share/index.jpg)\n\n![start.jpg](https://raw.githubusercontent.com/moshang-xc/blog/master/share/start.jpg)\n\n![end.jpg](https://raw.githubusercontent.com/moshang-xc/blog/master/share/end.jpg)\n\n## Install\n```\ngit clone https://github.com/moshang-xc/lottery.git\n\ncd lottery\n\n# Server plugin installation\ncd server\nnpm install\n\n# Front-end plugin installation\ncd ../product\nnpm install\n\n# Package\nnpm run build\n\n# Running\nnpm run serve\n\n# Developing & debugging\nnpm run dev\n\n```\n\n## Directory Structure\n```\nLottery\n├── product\n│   ├── src\n│   │   ├── lottery\n│   │   │   └── index.js\n│   │   ├── lib\n│   │   ├── img\n│   │   ├── css\n│   │   └── data\n│   ├── package.json\n│   └── webpack.config.js\n├── server\n│   ├── config.js\n│   ├── server.js\n│   └── package.js\n```\n\n> 1. product is Front-end page directory\n> 4. server is Server directory\n> 5. config is Profile for prize information\n\n## Configuration Information\n### Lottery personnel list information configuration\nThe lottery list information is in the **`server/data/user.xlsx`** file, information could only fill in base on the format, file name and title are not able to revise\n\n### Prize information configuration\nPrize information is filled in the **server/config.js** file, and the file name cannot be modified.\n\n**The configuration of the prizes is described as follows:**\n\n| Parameter | Value Type | Description                                                  |\n| --------- | ---------- | ------------------------------------------------------------ |\n| type      | Number     | Type of prize, unique identifier, 0 is the placeholder for the default special prize, other prizes cannot be used |\n| count | Number | Prizes amount                                                 |\n| text  | String |  Prizes name                                     |\n| title | String | Prizes description                                              |\n| img   | String | Image URL of the prize, image is under**img** catalog                |\n\n\n```js\n// Prize information, the first item is reserved and cannot be modified. Other items can be modified as required\n// Prize in\nlet prizes = [{\n        type: 0,\n        count: 1000,\n        title: \"\",\n        text: \"Special Price\"\n    },\n    {\n        type: 1,\n        count: 2,\n        text: \"Special Price\"\n        title: \"Mystery jackpot\"\n        img: \"../img/secrit.jpg\"\n    },\n    {\n        type: 2,\n        count: 5,\n        text: \"First prize\"\n        title: \"Mac Pro\",\n        img: \"../img/mbp.jpg\"\n    }\n    ...\n];\n```\n\n### The configuration of the number of prizes drawn each time\n\n**EACH_COUNT**It is used to configure the number of lottery draws each time, which corresponds to the prizes one by one. For example, the number of lottery draws corresponding to the above prize configuration is as follows：\n\n```js\nconst EACH_COUNT = [1, 1, 5];\n```\n\nConfiguration above means the order of the number of prizes to be drawn at one time is：one special prize per time, one grand prize per time and 5 first prize per time.\n\n### Enterprise Identity Configuration\n\nThis identification is used to display on the lottery card. \n\n```js\nconst COMPANY = \"MoShang\";\n```\n\n\n## Docker Deployment plan\n\n### Summary\n\nThis project is support to deploy by Docker. Docker is a platform with lightweight containerization, allows you to quickly deploy, test and run the applications. This text will introduce how to deploy the project by Docker.\n\n### System Requirement\n\nBefore you use the Docker to deploy the project, you need to ensure you have download below software:\n\n- Docker (Please refer Docker official file to get the installation instructions)\n- Docker Compose\n\n### Installation\n\n1. Download and unzip the source code for the project\n\n2. Access the project directory after unzipped the file\n\n3. Execute the following command to build the Docker mirror image:\n\n   ```\n   ./build.sh [TAG]\n   ```\n\n   It will use Dockerfile to set up the Docker mirror image named `lottery:[TAG]`. If no tag is specified, the 'latest' tag is used by default\n   \n4. Execute the following command to run the local container:\n\n   ```\n   ./dev.sh [TAG]\n   ```\n\n   This will start the container and deploy the application in the Docker container. You can test loacally to ensure all running fulently.  \nPlease be pay attention that all applicaiton in the container will monitor port 8888 and port 443.\n\n5. Execute the following command to tag the Docker mirror image and push it to the remote Docker repository\n\n   ```\n   ./tagpush.sh [TAG]\n   ```\n\n   It will tag the Docker mirror image and push it to the remote Docker repository, please build up your repo at https://hub.docker.com/ if you want to us Docker official hub.\n\n6. Ensure it has a file named `docker-compose.yml` and add below information:\n\n   ```\n   version: '3.8'\n   \n   volumes:\n     lottery_log:\n   \n   services:\n     lottery:\n       container_name: lottery\n       expose:\n         - 8888\n       ports:\n         - \"28458:8888\"\n         - \"443:443\"\n       volumes:\n         - \"lottery_log:/var/log\"\n       image: \"panda1024/lottery:[TAG]\" \n       restart: always\n   ```\n\n  Kindly take note that `[TAG]` should be replaced with the name of the mirror image you pushed to the Docker repository\n\n7. Run the following command in the project directory on the server to deploy the application using Docker Compose:\n\n```\ndocker-compose up -d\n```\n\nThis will start a Docker Compose stack and deploy the project into it. Note that port 8888 and port 443 of the container are mapped to port 8888 and port 443 on the server. If you wish to use a different port, please change the `docker-compose.yml` file accordingly.\n\n\n## License\n\nMIT\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.1220703125,
          "content": "TAG=${1:-latest}\n\nrm -f lottery.tar.gz\ntar -czvf lottery.tar.gz ../lottery/\ndocker build -t lottery:$TAG  -f ./Dockerfile .\n\n"
        },
        {
          "name": "dev.sh",
          "type": "blob",
          "size": 0.142578125,
          "content": "TAG=${1:-latest}\n\ndocker run --rm -it \\\n    -p 5003:8888 \\\n    -p 443:443 \\\n    -v \"$(pwd)\"/server/data:/lottery/server/data/ \\\n     lottery:$TAG\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.2412109375,
          "content": "version: '3.8'\n\nvolumes:\n  lottery_log:\nservices:\n  lottery:\n    container_name: lottery\n    expose:\n      - 28458\n    ports:\n      - \"28458:8888\"\n    volumes:\n      - \"lottery_log:/var/log\"\n    image: \"panda1024/lottery:v0.3\"\n    restart: always\n"
        },
        {
          "name": "product",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "tagpush.sh",
          "type": "blob",
          "size": 0.09375,
          "content": "TAG=$1\n\ndocker tag lottery:latest panda1024/lottery:${TAG}\ndocker push panda1024/lottery:${TAG}\n"
        }
      ]
    }
  ]
}