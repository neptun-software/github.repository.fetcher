{
  "metadata": {
    "timestamp": 1736561497037,
    "page": 10,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "openexchangerates/accounting.js",
      "stars": 4970,
      "defaultBranch": "master",
      "files": [
        {
          "name": "accounting.js",
          "type": "blob",
          "size": 13.1875,
          "content": "/*!\n * accounting.js v0.4.2\n * Copyright 2014 Open Exchange Rates\n *\n * Freely distributable under the MIT license.\n * Portions of accounting.js are inspired or borrowed from underscore.js\n *\n * Full details and documentation:\n * http://openexchangerates.github.io/accounting.js/\n */\n\n(function(root, undefined) {\n\n\t/* --- Setup --- */\n\n\t// Create the local library object, to be exported or referenced globally later\n\tvar lib = {};\n\n\t// Current version\n\tlib.version = '0.4.2';\n\n\n\t/* --- Exposed settings --- */\n\n\t// The library's settings configuration object. Contains default parameters for\n\t// currency and number formatting\n\tlib.settings = {\n\t\tcurrency: {\n\t\t\tsymbol : \"$\",\t\t// default currency symbol is '$'\n\t\t\tformat : \"%s%v\",\t// controls output: %s = symbol, %v = value (can be object, see docs)\n\t\t\tdecimal : \".\",\t\t// decimal point separator\n\t\t\tthousand : \",\",\t\t// thousands separator\n\t\t\tprecision : 2,\t\t// decimal places\n\t\t\tgrouping : 3\t\t// digit grouping (not implemented yet)\n\t\t},\n\t\tnumber: {\n\t\t\tprecision : 0,\t\t// default precision on numbers is 0\n\t\t\tgrouping : 3,\t\t// digit grouping (not implemented yet)\n\t\t\tthousand : \",\",\n\t\t\tdecimal : \".\"\n\t\t}\n\t};\n\n\n\t/* --- Internal Helper Methods --- */\n\n\t// Store reference to possibly-available ECMAScript 5 methods for later\n\tvar nativeMap = Array.prototype.map,\n\t\tnativeIsArray = Array.isArray,\n\t\ttoString = Object.prototype.toString;\n\n\t/**\n\t * Tests whether supplied parameter is a string\n\t * from underscore.js\n\t */\n\tfunction isString(obj) {\n\t\treturn !!(obj === '' || (obj && obj.charCodeAt && obj.substr));\n\t}\n\n\t/**\n\t * Tests whether supplied parameter is an array\n\t * from underscore.js, delegates to ECMA5's native Array.isArray\n\t */\n\tfunction isArray(obj) {\n\t\treturn nativeIsArray ? nativeIsArray(obj) : toString.call(obj) === '[object Array]';\n\t}\n\n\t/**\n\t * Tests whether supplied parameter is a true object\n\t */\n\tfunction isObject(obj) {\n\t\treturn obj && toString.call(obj) === '[object Object]';\n\t}\n\n\t/**\n\t * Extends an object with a defaults object, similar to underscore's _.defaults\n\t *\n\t * Used for abstracting parameter handling from API methods\n\t */\n\tfunction defaults(object, defs) {\n\t\tvar key;\n\t\tobject = object || {};\n\t\tdefs = defs || {};\n\t\t// Iterate over object non-prototype properties:\n\t\tfor (key in defs) {\n\t\t\tif (defs.hasOwnProperty(key)) {\n\t\t\t\t// Replace values with defaults only if undefined (allow empty/zero values):\n\t\t\t\tif (object[key] == null) object[key] = defs[key];\n\t\t\t}\n\t\t}\n\t\treturn object;\n\t}\n\n\t/**\n\t * Implementation of `Array.map()` for iteration loops\n\t *\n\t * Returns a new Array as a result of calling `iterator` on each array value.\n\t * Defers to native Array.map if available\n\t */\n\tfunction map(obj, iterator, context) {\n\t\tvar results = [], i, j;\n\n\t\tif (!obj) return results;\n\n\t\t// Use native .map method if it exists:\n\t\tif (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n\n\t\t// Fallback for native .map:\n\t\tfor (i = 0, j = obj.length; i < j; i++ ) {\n\t\t\tresults[i] = iterator.call(context, obj[i], i, obj);\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t * Check and normalise the value of precision (must be positive integer)\n\t */\n\tfunction checkPrecision(val, base) {\n\t\tval = Math.round(Math.abs(val));\n\t\treturn isNaN(val)? base : val;\n\t}\n\n\n\t/**\n\t * Parses a format string or object and returns format obj for use in rendering\n\t *\n\t * `format` is either a string with the default (positive) format, or object\n\t * containing `pos` (required), `neg` and `zero` values (or a function returning\n\t * either a string or object)\n\t *\n\t * Either string or format.pos must contain \"%v\" (value) to be valid\n\t */\n\tfunction checkCurrencyFormat(format) {\n\t\tvar defaults = lib.settings.currency.format;\n\n\t\t// Allow function as format parameter (should return string or object):\n\t\tif ( typeof format === \"function\" ) format = format();\n\n\t\t// Format can be a string, in which case `value` (\"%v\") must be present:\n\t\tif ( isString( format ) && format.match(\"%v\") ) {\n\n\t\t\t// Create and return positive, negative and zero formats:\n\t\t\treturn {\n\t\t\t\tpos : format,\n\t\t\t\tneg : format.replace(\"-\", \"\").replace(\"%v\", \"-%v\"),\n\t\t\t\tzero : format\n\t\t\t};\n\n\t\t// If no format, or object is missing valid positive value, use defaults:\n\t\t} else if ( !format || !format.pos || !format.pos.match(\"%v\") ) {\n\n\t\t\t// If defaults is a string, casts it to an object for faster checking next time:\n\t\t\treturn ( !isString( defaults ) ) ? defaults : lib.settings.currency.format = {\n\t\t\t\tpos : defaults,\n\t\t\t\tneg : defaults.replace(\"%v\", \"-%v\"),\n\t\t\t\tzero : defaults\n\t\t\t};\n\n\t\t}\n\t\t// Otherwise, assume format was fine:\n\t\treturn format;\n\t}\n\n\n\t/* --- API Methods --- */\n\n\t/**\n\t * Takes a string/array of strings, removes all formatting/cruft and returns the raw float value\n\t * Alias: `accounting.parse(string)`\n\t *\n\t * Decimal must be included in the regular expression to match floats (defaults to\n\t * accounting.settings.number.decimal), so if the number uses a non-standard decimal \n\t * separator, provide it as the second argument.\n\t *\n\t * Also matches bracketed negatives (eg. \"$ (1.99)\" => -1.99)\n\t *\n\t * Doesn't throw any errors (`NaN`s become 0) but this may change in future\n\t */\n\tvar unformat = lib.unformat = lib.parse = function(value, decimal) {\n\t\t// Recursively unformat arrays:\n\t\tif (isArray(value)) {\n\t\t\treturn map(value, function(val) {\n\t\t\t\treturn unformat(val, decimal);\n\t\t\t});\n\t\t}\n\n\t\t// Fails silently (need decent errors):\n\t\tvalue = value || 0;\n\n\t\t// Return the value as-is if it's already a number:\n\t\tif (typeof value === \"number\") return value;\n\n\t\t// Default decimal point comes from settings, but could be set to eg. \",\" in opts:\n\t\tdecimal = decimal || lib.settings.number.decimal;\n\n\t\t // Build regex to strip out everything except digits, decimal point and minus sign:\n\t\tvar regex = new RegExp(\"[^0-9-\" + decimal + \"]\", [\"g\"]),\n\t\t\tunformatted = parseFloat(\n\t\t\t\t(\"\" + value)\n\t\t\t\t.replace(/\\((?=\\d+)(.*)\\)/, \"-$1\") // replace bracketed values with negatives\n\t\t\t\t.replace(regex, '')         // strip out any cruft\n\t\t\t\t.replace(decimal, '.')      // make sure decimal point is standard\n\t\t\t);\n\n\t\t// This will fail silently which may cause trouble, let's wait and see:\n\t\treturn !isNaN(unformatted) ? unformatted : 0;\n\t};\n\n\n\t/**\n\t * Implementation of toFixed() that treats floats more like decimals\n\t *\n\t * Fixes binary rounding issues (eg. (0.615).toFixed(2) === \"0.61\") that present\n\t * problems for accounting- and finance-related software.\n\t */\n\tvar toFixed = lib.toFixed = function(value, precision) {\n\t\tprecision = checkPrecision(precision, lib.settings.number.precision);\n\n\t\tvar exponentialForm = Number(lib.unformat(value) + 'e' + precision);\n\t\tvar rounded = Math.round(exponentialForm);\n\t\tvar finalResult = Number(rounded + 'e-' + precision).toFixed(precision);\n\t\treturn finalResult;\n\t};\n\n\n\t/**\n\t * Format a number, with comma-separated thousands and custom precision/decimal places\n\t * Alias: `accounting.format()`\n\t *\n\t * Localise by overriding the precision and thousand / decimal separators\n\t * 2nd parameter `precision` can be an object matching `settings.number`\n\t */\n\tvar formatNumber = lib.formatNumber = lib.format = function(number, precision, thousand, decimal) {\n\t\t// Resursively format arrays:\n\t\tif (isArray(number)) {\n\t\t\treturn map(number, function(val) {\n\t\t\t\treturn formatNumber(val, precision, thousand, decimal);\n\t\t\t});\n\t\t}\n\n\t\t// Clean up number:\n\t\tnumber = unformat(number);\n\n\t\t// Build options object from second param (if object) or all params, extending defaults:\n\t\tvar opts = defaults(\n\t\t\t\t(isObject(precision) ? precision : {\n\t\t\t\t\tprecision : precision,\n\t\t\t\t\tthousand : thousand,\n\t\t\t\t\tdecimal : decimal\n\t\t\t\t}),\n\t\t\t\tlib.settings.number\n\t\t\t),\n\n\t\t\t// Clean up precision\n\t\t\tusePrecision = checkPrecision(opts.precision),\n\n\t\t\t// Do some calc:\n\t\t\tnegative = number < 0 ? \"-\" : \"\",\n\t\t\tbase = parseInt(toFixed(Math.abs(number || 0), usePrecision), 10) + \"\",\n\t\t\tmod = base.length > 3 ? base.length % 3 : 0;\n\n\t\t// Format the number:\n\t\treturn negative + (mod ? base.substr(0, mod) + opts.thousand : \"\") + base.substr(mod).replace(/(\\d{3})(?=\\d)/g, \"$1\" + opts.thousand) + (usePrecision ? opts.decimal + toFixed(Math.abs(number), usePrecision).split('.')[1] : \"\");\n\t};\n\n\n\t/**\n\t * Format a number into currency\n\t *\n\t * Usage: accounting.formatMoney(number, symbol, precision, thousandsSep, decimalSep, format)\n\t * defaults: (0, \"$\", 2, \",\", \".\", \"%s%v\")\n\t *\n\t * Localise by overriding the symbol, precision, thousand / decimal separators and format\n\t * Second param can be an object matching `settings.currency` which is the easiest way.\n\t *\n\t * To do: tidy up the parameters\n\t */\n\tvar formatMoney = lib.formatMoney = function(number, symbol, precision, thousand, decimal, format) {\n\t\t// Resursively format arrays:\n\t\tif (isArray(number)) {\n\t\t\treturn map(number, function(val){\n\t\t\t\treturn formatMoney(val, symbol, precision, thousand, decimal, format);\n\t\t\t});\n\t\t}\n\n\t\t// Clean up number:\n\t\tnumber = unformat(number);\n\n\t\t// Build options object from second param (if object) or all params, extending defaults:\n\t\tvar opts = defaults(\n\t\t\t\t(isObject(symbol) ? symbol : {\n\t\t\t\t\tsymbol : symbol,\n\t\t\t\t\tprecision : precision,\n\t\t\t\t\tthousand : thousand,\n\t\t\t\t\tdecimal : decimal,\n\t\t\t\t\tformat : format\n\t\t\t\t}),\n\t\t\t\tlib.settings.currency\n\t\t\t),\n\n\t\t\t// Check format (returns object with pos, neg and zero):\n\t\t\tformats = checkCurrencyFormat(opts.format),\n\n\t\t\t// Choose which format to use for this value:\n\t\t\tuseFormat = number > 0 ? formats.pos : number < 0 ? formats.neg : formats.zero;\n\n\t\t// Return with currency symbol added:\n\t\treturn useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(Math.abs(number), checkPrecision(opts.precision), opts.thousand, opts.decimal));\n\t};\n\n\n\t/**\n\t * Format a list of numbers into an accounting column, padding with whitespace\n\t * to line up currency symbols, thousand separators and decimals places\n\t *\n\t * List should be an array of numbers\n\t * Second parameter can be an object containing keys that match the params\n\t *\n\t * Returns array of accouting-formatted number strings of same length\n\t *\n\t * NB: `white-space:pre` CSS rule is required on the list container to prevent\n\t * browsers from collapsing the whitespace in the output strings.\n\t */\n\tlib.formatColumn = function(list, symbol, precision, thousand, decimal, format) {\n\t\tif (!list || !isArray(list)) return [];\n\n\t\t// Build options object from second param (if object) or all params, extending defaults:\n\t\tvar opts = defaults(\n\t\t\t\t(isObject(symbol) ? symbol : {\n\t\t\t\t\tsymbol : symbol,\n\t\t\t\t\tprecision : precision,\n\t\t\t\t\tthousand : thousand,\n\t\t\t\t\tdecimal : decimal,\n\t\t\t\t\tformat : format\n\t\t\t\t}),\n\t\t\t\tlib.settings.currency\n\t\t\t),\n\n\t\t\t// Check format (returns object with pos, neg and zero), only need pos for now:\n\t\t\tformats = checkCurrencyFormat(opts.format),\n\n\t\t\t// Whether to pad at start of string or after currency symbol:\n\t\t\tpadAfterSymbol = formats.pos.indexOf(\"%s\") < formats.pos.indexOf(\"%v\") ? true : false,\n\n\t\t\t// Store value for the length of the longest string in the column:\n\t\t\tmaxLength = 0,\n\n\t\t\t// Format the list according to options, store the length of the longest string:\n\t\t\tformatted = map(list, function(val, i) {\n\t\t\t\tif (isArray(val)) {\n\t\t\t\t\t// Recursively format columns if list is a multi-dimensional array:\n\t\t\t\t\treturn lib.formatColumn(val, opts);\n\t\t\t\t} else {\n\t\t\t\t\t// Clean up the value\n\t\t\t\t\tval = unformat(val);\n\n\t\t\t\t\t// Choose which format to use for this value (pos, neg or zero):\n\t\t\t\t\tvar useFormat = val > 0 ? formats.pos : val < 0 ? formats.neg : formats.zero,\n\n\t\t\t\t\t\t// Format this value, push into formatted list and save the length:\n\t\t\t\t\t\tfVal = useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(Math.abs(val), checkPrecision(opts.precision), opts.thousand, opts.decimal));\n\n\t\t\t\t\tif (fVal.length > maxLength) maxLength = fVal.length;\n\t\t\t\t\treturn fVal;\n\t\t\t\t}\n\t\t\t});\n\n\t\t// Pad each number in the list and send back the column of numbers:\n\t\treturn map(formatted, function(val, i) {\n\t\t\t// Only if this is a string (not a nested array, which would have already been padded):\n\t\t\tif (isString(val) && val.length < maxLength) {\n\t\t\t\t// Depending on symbol position, pad after symbol or at index 0:\n\t\t\t\treturn padAfterSymbol ? val.replace(opts.symbol, opts.symbol+(new Array(maxLength - val.length + 1).join(\" \"))) : (new Array(maxLength - val.length + 1).join(\" \")) + val;\n\t\t\t}\n\t\t\treturn val;\n\t\t});\n\t};\n\n\n\t/* --- Module Definition --- */\n\n\t// Export accounting for CommonJS. If being loaded as an AMD module, define it as such.\n\t// Otherwise, just add `accounting` to the global object\n\tif (typeof exports !== 'undefined') {\n\t\tif (typeof module !== 'undefined' && module.exports) {\n\t\t\texports = module.exports = lib;\n\t\t}\n\t\texports.accounting = lib;\n\t} else if (typeof define === 'function' && define.amd) {\n\t\t// Return the library as an AMD module:\n\t\tdefine([], function() {\n\t\t\treturn lib;\n\t\t});\n\t} else {\n\t\t// Use accounting.noConflict to restore `accounting` back to its original value.\n\t\t// Returns a reference to the library's `accounting` object;\n\t\t// e.g. `var numbers = accounting.noConflict();`\n\t\tlib.noConflict = (function(oldAccounting) {\n\t\t\treturn function() {\n\t\t\t\t// Reset the value of the root's `accounting` variable:\n\t\t\t\troot.accounting = oldAccounting;\n\t\t\t\t// Delete the noConflict method:\n\t\t\t\tlib.noConflict = undefined;\n\t\t\t\t// Return reference to the library to re-assign it:\n\t\t\t\treturn lib;\n\t\t\t};\n\t\t})(root.accounting);\n\n\t\t// Declare `fx` on the root (global/window) object:\n\t\troot['accounting'] = lib;\n\t}\n\n\t// Root will be `window` in browser or `global` on the server:\n}(this));\n"
        },
        {
          "name": "accounting.min.js",
          "type": "blob",
          "size": 3.0771484375,
          "content": "/*!\n * accounting.js v0.4.2, copyright 2014 Open Exchange Rates, MIT license, http://openexchangerates.github.io/accounting.js\n */\n(function(p,z){function q(a){return!!(\"\"===a||a&&a.charCodeAt&&a.substr)}function m(a){return u?u(a):\"[object Array]\"===v.call(a)}function r(a){return\"[object Object]\"===v.call(a)}function s(a,b){var d,a=a||{},b=b||{};for(d in b)b.hasOwnProperty(d)&&null==a[d]&&(a[d]=b[d]);return a}function j(a,b,d){var c=[],e,h;if(!a)return c;if(w&&a.map===w)return a.map(b,d);for(e=0,h=a.length;e<h;e++)c[e]=b.call(d,a[e],e,a);return c}function n(a,b){a=Math.round(Math.abs(a));return isNaN(a)?b:a}function x(a){var b=c.settings.currency.format;\"function\"===typeof a&&(a=a());return q(a)&&a.match(\"%v\")?{pos:a,neg:a.replace(\"-\",\"\").replace(\"%v\",\"-%v\"),zero:a}:!a||!a.pos||!a.pos.match(\"%v\")?!q(b)?b:c.settings.currency.format={pos:b,neg:b.replace(\"%v\",\"-%v\"),zero:b}:a}var c={version:\"0.4.1\",settings:{currency:{symbol:\"$\",format:\"%s%v\",decimal:\".\",thousand:\",\",precision:2,grouping:3},number:{precision:0,grouping:3,thousand:\",\",decimal:\".\"}}},w=Array.prototype.map,u=Array.isArray,v=Object.prototype.toString,o=c.unformat=c.parse=function(a,b){if(m(a))return j(a,function(a){return o(a,b)});a=a||0;if(\"number\"===typeof a)return a;var b=b||\".\",c=RegExp(\"[^0-9-\"+b+\"]\",[\"g\"]),c=parseFloat((\"\"+a).replace(/\\((.*)\\)/,\"-$1\").replace(c,\"\").replace(b,\".\"));return!isNaN(c)?c:0},y=c.toFixed=function(a,b){var b=n(b,c.settings.number.precision),d=Math.pow(10,b);return(Math.round(c.unformat(a)*d)/d).toFixed(b)},t=c.formatNumber=c.format=function(a,b,d,i){if(m(a))return j(a,function(a){return t(a,b,d,i)});var a=o(a),e=s(r(b)?b:{precision:b,thousand:d,decimal:i},c.settings.number),h=n(e.precision),f=0>a?\"-\":\"\",g=parseInt(y(Math.abs(a||0),h),10)+\"\",l=3<g.length?g.length%3:0;return f+(l?g.substr(0,l)+e.thousand:\"\")+g.substr(l).replace(/(\\d{3})(?=\\d)/g,\"$1\"+e.thousand)+(h?e.decimal+y(Math.abs(a),h).split(\".\")[1]:\"\")},A=c.formatMoney=function(a,b,d,i,e,h){if(m(a))return j(a,function(a){return A(a,b,d,i,e,h)});var a=o(a),f=s(r(b)?b:{symbol:b,precision:d,thousand:i,decimal:e,format:h},c.settings.currency),g=x(f.format);return(0<a?g.pos:0>a?g.neg:g.zero).replace(\"%s\",f.symbol).replace(\"%v\",t(Math.abs(a),n(f.precision),f.thousand,f.decimal))};c.formatColumn=function(a,b,d,i,e,h){if(!a)return[];var f=s(r(b)?b:{symbol:b,precision:d,thousand:i,decimal:e,format:h},c.settings.currency),g=x(f.format),l=g.pos.indexOf(\"%s\")<g.pos.indexOf(\"%v\")?!0:!1,k=0,a=j(a,function(a){if(m(a))return c.formatColumn(a,f);a=o(a);a=(0<a?g.pos:0>a?g.neg:g.zero).replace(\"%s\",f.symbol).replace(\"%v\",t(Math.abs(a),n(f.precision),f.thousand,f.decimal));if(a.length>k)k=a.length;return a});return j(a,function(a){return q(a)&&a.length<k?l?a.replace(f.symbol,f.symbol+Array(k-a.length+1).join(\" \")):Array(k-a.length+1).join(\" \")+a:a})};if(\"undefined\"!==typeof exports){if(\"undefined\"!==typeof module&&module.exports)exports=module.exports=c;exports.accounting=c}else\"function\"===typeof define&&define.amd?define([],function(){return c}):(c.noConflict=function(a){return function(){p.accounting=a;c.noConflict=z;return c}}(p.accounting),p.accounting=c)})(this);\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.4775390625,
          "content": "{\n  \"author\"      : \"Open Exchange Rates <info@openexchangerates.org> (https://www.openexchangerates.org)\",\n  \"description\" : \"number, money and currency formatting library\",\n  \"homepage\"    : \"http://openexchangerates.github.io/accounting.js\",\n  \"ignore\"      : [\"**/.*\", \"tests\"],\n  \"keywords\"    : [\"accounting\", \"number\", \"money\", \"currency\", \"format\", \"utilities\", \"finance\", \"exchange\"],\n  \"main\"        : \"accounting.js\",\n  \"name\"        : \"accounting\",\n  \"version\"     : \"0.4.2\"\n}\n"
        },
        {
          "name": "demo-resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 18.611328125,
          "content": "<!doctype html>\n<html lang=\"en\" class=\"no-js\">\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>accounting.js: JavaScript number and currency formatting library</title>\n\t<link href=\"demo-resources/style.css\" rel=\"stylesheet\"/>\n\t<link rel=\"canonical\" href=\"http://openexchangerates.github.io/accounting.js/\" />\n\t<script type=\"text/javascript\">\n\t\tvar _gaq = _gaq || [];\n\t\t_gaq.push(['_setAccount', 'UA-17884149-3']);\n\t\t_gaq.push(['_trackPageview']);\n\t\t(function() {\n\t\t\tvar ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n\t\t\tga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n\t\t\tvar s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n\t\t})();\n\t</script>\n</head>\n\n<body>\n\t<section>\n\t\t<h1>accounting.js</h1>\n\t\t<p><strong>accounting.js</strong> is a tiny JavaScript library by <a href=\"https://openexchangerates.org\" title=\"Open Exchange Rates free currency data API\" target=\"_blank\">Open Exchange Rates</a>, providing simple and advanced number, money and currency formatting.</p>\n\n\t\t<p>Features custom output formats, parsing/unformatting of numbers, easy localisation and spreadsheet-style column formatting (to line up symbols and decimals).</p>\n\n\t\t<p>It's lightweight, has no dependencies and is suitable for all client-side and server-side JavaScript applications.</p>\n\n\t\t<p><a href=\"http://twitter.com/share\" class=\"twitter-share-button\" data-count=\"horizontal\" data-via=\"josscrowcroft\" data-url=\"http://openexchangerates.github.io/accounting.js\" data-text=\"accounting.js - JavaScript library for money/currency formatting\">Tweet</a> &nbsp; <g:plusone size=\"medium\"></g:plusone></p>\n\t\t<ul>\n\t\t\t<li><a href=\"#methods\" title=\"library methods overvew\">methods &amp; examples</a>\n\t\t\t<li><a href=\"#demo\" title=\"demo\">demo</a>\n\t\t\t<li><a href=\"#instructions\" title=\"instructions\">instructions</a>\n\t\t\t<li><a href=\"#documentation\" title=\"documentation\">documentation</a>\n\t\t\t<li><a href=\"#roadmap\" title=\"roadmap\">roadmap</a>\n\t\t\t<li><a href=\"#support\" title=\"support\">feedback / support</a>\n\t\t\t<li><a href=\"#download\" title=\"download\">download</a>\n\t\t\t<li><a href=\"#links\" title=\"links\">links</a>\n\t\t</ul>\n\t</section>\n\n\t<section id=\"methods\">\n\t\t<h2>Library Methods</h2>\n\n\t\t<h4><strong>formatMoney()</strong> - format any number into currency</h4>\n\n\t\t<p>The most basic library function for formatting numbers as money values, with customisable currency symbol, precision (decimal places), and thousand/decimal separators:</p>\n\t\t<pre class=\"prettyprint lang-js\">// Default usage:\naccounting.formatMoney(12345678); // $12,345,678.00\n\n// European formatting (custom symbol and separators), can also use options object as second parameter:\naccounting.formatMoney(4999.99, \"&euro;\", 2, \".\", \",\"); // &euro;4.999,99\n\n// Negative values can be formatted nicely:\naccounting.formatMoney(-500000, \"&pound; \", 0); // &pound; -500,000\n\n// Simple `format` string allows control of symbol position (%v = value, %s = symbol):\naccounting.formatMoney(5318008, { symbol: \"GBP\",  format: \"%v %s\" }); // 5,318,008.00 GBP</pre>\n\n\n\t\t<h4><strong>formatColumn()</strong> - format a list of values for column-display</h4>\n\n\t\t<p>This table demonstrates how <strong>accounting.js</strong> can take a list of numbers and money-format them with padding to line up currency symbols and decimal places</p>\n\t\t<p>In order for the padded spaces to render correctly, the containing element must be CSS styled with <code>white-space: pre</code> (pre-formatted) - otherwise the browser will squash them into single spaces.</p>\n\n\t\t<table id=\"demo-table\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Original Number:</th>\n\t\t\t\t\t<th>With accounting.js:</th>\n\t\t\t\t\t<th>Different settings:</th>\n\t\t\t\t\t<th>European format:</th>\n\t\t\t\t\t<th>Symbol after value:</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody></tbody>\n\t\t</table>\n\t\t<pre class=\"prettyprint lang-js\">// Format list of numbers for display:\naccounting.formatColumn([123.5, 3456.49, 777888.99, 12345678, -5432], \"$ \");</pre>\n\n\n\t\t<h4><strong>formatNumber()</strong> - format a number with custom precision and localisation</h4>\n\n\t\t<p>The base function of the library, which takes any number or array of numbers, runs <code>accounting.unformat()</code> to remove any formatting, and returns the number(s) formatted with separated thousands and custom precision:</p>\n\t\t<pre class=\"prettyprint lang-js\">accounting.formatNumber(5318008); // 5,318,008\naccounting.formatNumber(9876543.21, 3, \" \"); // 9 876 543.210</pre>\n\n\n\t\t<h4><strong>toFixed()</strong> - better rounding for floating point numbers</h4>\n\n\t\t<p>Implementation of toFixed() that treats floats more like decimal values than binary, fixing inconsistent precision rounding in JavaScript (where some .05 values round up, while others round down):</p>\n\t\t<pre class=\"prettyprint lang-js\">(0.615).toFixed(2); // \"0.61\"\naccounting.toFixed(0.615, 2); // \"0.62\"</pre>\n\n\n\t\t<h4><strong>unformat()</strong> - parse a value from any formatted number/currency string</h4>\n\n\t\t<p>Takes any number and removes all currency formatting. Aliased as <code>accounting.parse()</code></p>\n\t\t<pre class=\"prettyprint lang-js\">accounting.unformat(\"&pound; 12,345,678.90 GBP\"); // 12345678.9</pre>\n\t</section>\n\n\t<section id=\"demo\">\n\t\t<h2>Demo / Try it out</h2>\n\n\n\t\t<h4>Money formatting:</h4>\n\n\t\t<div class=\"well\">\n\t\t\t<p>Enter any number into the box and choose currency. Uses <code>accounting.formatMoney()</code>:</p>\n\t\t\t<p>\n\t\t\t\t<select id=\"demo-number-symbol\">\n\t\t\t\t\t<option value=\"$ \">$</option>\n\t\t\t\t\t<option value=\"&pound; \">&pound;</option>\n\t\t\t\t\t<option value=\"HK$ \">HK$</option>\n\t\t\t\t\t<option data-locale=\"european\" value=\"&euro; \">&euro; </option>\n\t\t\t\t</select>\n\t\t\t\t<input type=\"text\" maxlength=\"20\" class=\"\" id=\"demo-number-value\" value=\"\" />\n\t\t\t</p>\n\t\t\t<p>Result: <strong><span id=\"demo-number-result\">$ 0.00</span></strong></p>\n\t\t</div>\n\n\n\t\t<h4>Column formatting:</h4>\n\n\t\t<div class=\"well\">\n\t\t\t<p>Edit the values in the table to see how <strong>formatColumn()</strong> keeps them aligned:</p>\n\t\t\t<table id=\"demo-column\">\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td><input type=\"text\" value=\"1000000\" maxlength=\"20\" /></td>\n\t\t\t\t\t\t<td class=\"output\">$ 1,000,000.00</td>\n\t\t\t\t\t\t<td class=\"output2\">GBP 1,000,000</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td><input type=\"text\" value=\"-5000\" maxlength=\"20\" /></td>\n\t\t\t\t\t\t<td class=\"output\">$    -5,000.00</td>\n\t\t\t\t\t\t<td class=\"output2\">GBP   (5,000)</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td><input type=\"text\" value=\"0\" maxlength=\"20\" /></td>\n\t\t\t\t\t\t<td class=\"output\">$         0.00</td>\n\t\t\t\t\t\t<td class=\"output2\">GBP        --</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t</section>\n\n\n\t<section id=\"instructions\">\n\t\t<h2>Basic Instructions:</h2>\n\n\t\t<p>1. Download the script and put it somewhere, then reference it in your HTML like so:</p>\n\t\t<pre class=\"prettyprint\">&lt;script src=&quot;path/to/accounting.js&quot;&gt;&lt;/script&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n\t// Library ready to use:\n\taccounting.formatMoney(5318008);\n&lt;/script&gt;</pre>\n\n\t\t<p>2. See the documentation and source-code for full method/parameter information.</p>\n\t</section>\n\n\n\t<section id=\"documentation\">\n\n\t\t<h2>Documentation</h2>\n\n\t\t<p>Information on the parameters of each method. See <a href=\"#methods\" title=\"accounting.js library methods\">library methods</a> above for more examples. Optional parameters are in <code><em>[italics]</em></code>, with the default value indicated.</p>\n\n\n\t\t<h4><strong>accounting.settings</strong></h4>\n\n\t\t<pre class=\"prettyprint lang-js\">// Settings object that controls default parameters for library methods:\naccounting.settings = {\n\tcurrency: {\n\t\tsymbol : \"$\",   // default currency symbol is '$'\n\t\tformat: \"%s%v\", // controls output: %s = symbol, %v = value/number (can be object: see below)\n\t\tdecimal : \".\",  // decimal point separator\n\t\tthousand: \",\",  // thousands separator\n\t\tprecision : 2   // decimal places\n\t},\n\tnumber: {\n\t\tprecision : 0,  // default precision on numbers is 0\n\t\tthousand: \",\",\n\t\tdecimal : \".\"\n\t}\n}\n\n// These can be changed externally to edit the library's defaults:\naccounting.settings.currency.format = \"%s %v\";\n\n// Format can be an object, with `pos`, `neg` and `zero`:\naccounting.settings.currency.format = {\n\tpos : \"%s %v\",   // for positive values, eg. \"$ 1.00\" (required)\n\tneg : \"%s (%v)\", // for negative values, eg. \"$ (1.00)\" <em>[optional]</em>\n\tzero: \"%s  -- \"  // for zero values, eg. \"$  --\" <em>[optional]</em>\n};\n\n// Example using underscore.js - extend default settings (also works with $.extend in jQuery):\naccounting.settings.number = _.defaults({\n\tprecision: 2,\n\tthousand: \" \"\n}, accounting.settings.number);</pre>\n\n\n\t\t<h4><strong>accounting.formatMoney()</strong></h4>\n\n\t\t<pre class=\"prettyprint lang-js\">// Standard usage and parameters (returns string):\naccounting.formatMoney(number<em>,[symbol = \"$\"],[precision = 2],[thousand = \",\"],[decimal = \".\"],[format = \"%s%v\"]</em>)\n\n// Second parameter can be an object:\naccounting.formatMoney(number<em>, [options]</em>)\n\n// Available fields in options object, matching `settings.currency`:\nvar options = {\n\tsymbol : \"$\",\n\tdecimal : \".\",\n\tthousand: \",\",\n\tprecision : 2,\n\tformat: \"%s%v\"\n};\n\n// Example usage:\naccounting.formatMoney(12345678); // $12,345,678.00\naccounting.formatMoney(4999.99, \"&euro;\", 2, \".\", \",\"); // &euro;4.999,99\naccounting.formatMoney(-500000, \"&pound; \", 0); // &pound; -500,000\n\n// Example usage with options object:\naccounting.formatMoney(5318008, {\n\tsymbol: \"GBP\",\n\tprecision: 0,\n\tthousand: \"&middot\",\n\tformat: {\n\t\tpos : \"%s %v\",\n\t\tneg : \"%s (%v)\",\n\t\tzero: \"%s  --\"\n\t}\n});\n\n// Will recursively format an array of values:\naccounting.formatMoney([123, 456, [78, 9]], \"$\", 0); // [\"$123\", \"$456\", [\"$78\", \"$9\"]]</pre>\n\n\n\n\t\t<h4><strong>accounting.formatColumn()</strong></h4>\n\n\t\t<pre class=\"prettyprint lang-js\">// Standard usage and parameters (returns array):\naccounting.formatColumn(list<em>, [symbol = \"$\"],[precision = 2],[thousand = \",\"],[decimal = \".\"],[format = \"%s%v\"]</em>)\n\n// Second parameter can be an object (see formatNumber for available options):\naccounting.formatColumn(list, <em>[options]</em>)\n\n// Example usage (NB. use a space after the symbol to add arbitrary padding to all values):\nvar list = [123, 12345];\naccounting.formatColumn(list, \"$ \", 0); // [\"$    123\", \"$ 12,345\"]\n\n// List of numbers can be a multi-dimensional array (formatColumn is applied recursively):\nvar list = [[1, 100], [900, 9]];\naccounting.formatColumn(list); // [[\"$  1.00\", \"$100.00\"], [\"$900.00\", \"$  9.00\"]]</pre>\n\n\n\t\t<h4><strong>accounting.formatNumber()</strong></h4>\n\n\t\t<pre class=\"prettyprint lang-js\">// Standard usage and parameters (returns string):\naccounting.formatNumber(number<em>, [precision = 0], [thousand = \",\"], [decimal = \".\"]</em>)\n\n// Second parameter can also be an object matching `settings.number`:\naccounting.formatNumber(number<em>, [object]</em>)\n\n// Example usage:\naccounting.formatNumber(9876543); // 9,876,543\naccounting.formatNumber(4999.99, 2, \".\", \",\"); // 4.999,99\n\n// Example usage with options object:\naccounting.formatNumber(5318008, {\n\tprecision : 3,\n\tthousand : \" \"\n});\n\n// Will recursively format an array of values:\naccounting.formatNumber([123456, [7890, 123]]); // [\"123,456\", [\"7,890\", \"123\"]]</pre>\n\n\n\t\t<h4><strong>accounting.toFixed()</strong></h4>\n\n\t\t<pre class=\"prettyprint lang-js\">// Standard usage and parameters (returns string):\naccounting.toFixed(number<em>, [precision = 0]</em>);\n\n// Example usage:\naccounting.toFixed(0.615, 2); // \"0.62\"\n\n// Compare to regular JavaScript `Number.toFixed()` method:\n(0.615).toFixed(2); // \"0.61\"</pre>\n\n\n\t\t<h4><strong>accounting.unformat()</strong></h4>\n\n\t\t<pre class=\"prettyprint lang-js\">// Standard usage and parameters (returns number):\naccounting.unformat(string<em>, [decimal]</em>);\n\n// Example usage:\naccounting.unformat(\"GBP &pound; 12,345,678.90\"); // 12345678.9\n\n// If a non-standard decimal separator was used (eg. a comma) unformat() will need it in order to work out\n// which part of the number is a decimal/float:\naccounting.unformat(\"&euro; 1.000.000,00\", \",\"); // 1000000</pre>\n\n\t</section>\n\n\n\t<section id=\"roadmap\">\n\t\t<h2>Roadmap</h2>\n\n\t\t<h4>Next Version:</h4>\n\t\t<ul>\n\t\t\t<li><s>Add more fine-grained control of formatting, with negatives and zero-values</s></li>\n\t\t\t<li><s>Implement <code>map()</code> and type-checking helper methods to clean up API methods</s></li>\n\t\t\t<li>Find performance bottlenecks and work on speed optimisations</li>\n\t\t\t<li>Write more tests, docs and examples, add FAQ</li>\n\t\t\t<li>Implement <a href=\"https://github.com/openexchangerates/accounting.js/issues/\" title=\"accounting.js issues\">feedback</a></li>\n\t\t</ul>\n\n\t\t<h4>Later:</h4>\n\t\t<ul>\n\t\t\t<li>Add padding parameter to override amount of space between currency symbol and value.</li>\n\t\t\t<li>Add digit-grouping control, to allow eg. \"$10,0000\"</li>\n\t\t\t<li>Add choice of rounding method for precision (up, down or nearest-neighbour).</li>\n\t\t\t<li>Add several other general and excel-style money formatting methods.</li>\n\t\t\t<li>Create NPM package, if there's demand for it.</li>\n\t\t\t<li>Create wrapper for jQuery as a separate plugin (not in core) to allow eg. <code>$('td.accounting').formatMoney()</code></li>\n\t\t</ul>\n\n\t\t<p>See the <a href=\"https://github.com/openexchangerates/accounting.js/issues\" title=\"accounting.js issues\">Github Issues page</a> for currently active issues.</p>\n\t</section>\n\n\t<section id=\"support\">\n\t\t<h2>Feedback / Support</h2>\n\n\t\t<p>Please create issues on the <a href=\"https://github.com/openexchangerates/accounting.js\" title=\"accounting.js Github repository\">accounting.js Github repository</a> if you have feedback or need support, or <a href=\"mailto:info@openexchangerates.org\" title=\"Contact Open Exchange Rates\">contact Open Exchange Rates here</a>.</p>\n\t</section>\n\n\t<section id=\"download\">\n\t\t<h2>Download</h2>\n\n\t\t<ul>\n\t\t\t<li><strong><a href=\"https://raw.github.com/openexchangerates/accounting.js/master/accounting.js\" title=\"accounting.js\">accounting.js</a></strong> - Latest version from Github (12kb)</li>\n\t\t\t<li><strong><a href=\"https://raw.github.com/openexchangerates/accounting.js/master/accounting.min.js\" title=\"accounting.min.js\">accounting.min.js</a></strong> - Latest version from Github (3kb, minified)</li>\n\t\t\t<li>Or check out the <a href=\"https://github.com/openexchangerates/accounting.js\" title=\"accounting.js Github repository\">accounting.js Github repository</a> for the full package.</li>\n\t\t</ul>\n\t</section>\n\n\t<section id=\"links\">\n\n\t\t<h2>Links</h2>\n\t\t<p>accounting.js is maintained by <strong><a href=\"https://openexchangerates.org\" title=\"Open Exchange Rates free currency data API\" target=\"_blank\">Open Exchange Rates</a></strong> - the lightweight currency data API for startups, SMEs and Fortune 500s.</p>\n\t\t<p>Feedback, support or questions? <strong><a href=\"mailto:info@openexchangerates.org\" title=\"Contact Open Exchange Rates\">Contact Open Exchange Rates</a></strong> for guidance.</p>\n\t\t<p>Bugs, issues, suggestions or contributions? Please <strong><a href=\"https://github.com/openexchangerates/accounting.js\" title=\"accounting.js Github repository\">post them here</a></strong>.</p>\n\t\t<p>accounting.js works great with <strong><a href=\"http://openexchangerates.github.com/money.js\" title=\"money.js - JavaScript currency conversion library\">money.js</a></strong> - the tiny (1kb) standalone JavaScript currency conversion library, for web & nodeJS</p>\n\n\t\t<br />\n\t\t<hr />\n\t\t<p><a href=\"http://twitter.com/share\" class=\"twitter-share-button\" data-count=\"horizontal\" data-via=\"josscrowcroft\" data-url=\"http://openexchangerates.github.io/accounting.js\" data-text=\"accounting.js - JavaScript library for money/currency formatting\">Tweet</a> &nbsp; <g:plusone size=\"medium\"></g:plusone></p>\n\t</section>\n\n\n\t<script src=\"accounting.js\"></script>\n\t<script src=\"demo-resources/js/libs/jquery.min.js\"></script>\n\t<script src=\"demo-resources/js/prettify.js\"></script>\n\n\t<script type=\"text/javascript\">\n\n\t\t// demo functions:\n\t\tjQuery(document).ready(function($) {\n\t\t\tvar numbers = [123.5, 3456.615, 777888.99, -5432, -1234567, 0];\n\n\t\t\t// Use accounting.js to format the list of numbers several ways:\n\t\t\tvar formatted = accounting.formatColumn(numbers, \"$ \"),\n\t\t\t    different = accounting.formatColumn(numbers, {\n\t\t\t    \tsymbol:\"HK$\",\n\t\t\t    \tprecision:0,\n\t\t\t    \tformat: {\n\t\t\t    \t\tpos : \"%s %v\",\n\t\t\t    \t\tneg : \"%s (%v)\",\n\t\t\t    \t\tzero : \"%s --\"\n\t\t\t    \t}\n\t\t\t    }),\n\t\t\t    european  = accounting.formatColumn(numbers, {\n\t\t\t    \tsymbol: '&euro; ',\n\t\t\t    \tthousand:'.',\n\t\t\t    \tdecimal:','\n\t\t\t    }),\n\t\t\t    symbolAfter = accounting.formatColumn(numbers, {\n\t\t\t    \tsymbol : \"GBP\",\n\t\t\t    \tformat : \"%v %s\"\n\t\t\t    });\n\n\t\t\t// Concat some nasty demo HTML:\n\t\t\tfor ( var i = 0; i < numbers.length; i++ ) {\n\t\t\t\t$('<tr><td>'+numbers[i]+'</td><td>'+formatted[i]+'</td><td>'+different[i]+'</td><td>'+european[i]+'</td><td>'+symbolAfter[i]+'</td></tr>').appendTo('table#demo-table tbody');\n\t\t\t}\n\n\n\t\t\t// Try it yourself clicky demo:\n\t\t\tvar $demoValue = $('#demo-number-value'),\n\t\t\t    $demoSymbol = $('#demo-number-symbol'),\n\t\t\t    $demoResult = $('#demo-number-result');\n\n\t\t\t$demoValue.add($demoSymbol).bind('keydown keyup keypress focus blur paste change', function() {\n\t\t\t \tvar symbol = $demoSymbol.find(':selected').val(),\n\t\t\t \t    result = accounting.formatMoney(\n\t\t\t \t    \t$demoValue.val(),\n\t\t\t \t    \tsymbol,\n\t\t\t \t    \t2,\n\t\t\t \t    \t($demoSymbol.find(':selected').data('locale') === 'european') ? \".\" : \",\",\n\t\t\t \t    \t($demoSymbol.find(':selected').data('locale') === 'european') ? \",\" : \".\"\n\t\t\t \t    );\n\t\t\t\t$demoResult.text(result);\n\t\t\t});\n\n\n\t\t\t// Try it yourself clicky column formatting demo:\n\t\t\tvar $columnValues = $('#demo-column').find('input'),\n\t\t\t    $columnOutputs = $('#demo-column').find('.output'),\n\t\t\t    $columnOutputs2 = $('#demo-column').find('.output2');\n\n\t\t\t$columnValues.bind('keydown keyup keypress focus blur paste', function() {\n\t\t\t \tvar list = $.map( $columnValues, function(each) { return $(each).val(); } ),\n\t\t\t \t\tformatted = accounting.formatColumn(list, {\n\t\t\t \t\t\tformat : \"%s %v\"\n\t\t\t \t\t}),\n\t\t\t \t\tformatted2 = accounting.formatColumn(list, {\n\t\t\t \t\t\tsymbol : \"GBP\",\n\t\t\t \t\t\tprecision : 0,\n\t\t\t \t\t\tformat : {\n\t\t\t \t\t\t\tpos : \"%s %v\",\n\t\t\t \t\t\t\tneg : \"%s (%v)\",\n\t\t\t \t\t\t\tzero: \"%s --\"\n\t\t\t \t\t\t}\n\t\t\t \t\t});\n\n\t\t\t \t$.each($columnOutputs, function(i, each) {\n\t\t\t \t\t$(each).text(formatted[i]);\n\t\t\t \t});\n\t\t\t \t$.each($columnOutputs2, function(i, each) {\n\t\t\t \t\t$(each).text(formatted2[i]);\n\t\t\t \t});\n\t\t\t});\n\n\t\t});\n\n\t\t// prettify:\n\t\tprettyPrint();\n\n\t\t// twitter:\n\t\t(function(d, t) {\n\t\t\tvar g = d.createElement(t),\n\t\t\t\ts = d.getElementsByTagName(t)[0];\n\t\t\tg.async = true;\n\t\t\tg.src = 'http://platform.twitter.com/widgets.js';\n\t\t\ts.parentNode.insertBefore(g, s);\n\t\t})(document, 'script');\n\n\t\t// google plus:\n\t\twindow.___gcfg = {lang: 'en-GB'};\n\t\t(function() {\n\t\t\tvar po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;\n\t\t\tpo.src = 'https://apis.google.com/js/plusone.js';\n\t\t\tvar s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);\n\t\t})();\n\t</script>\n</body>\n</html>\n"
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.037109375,
          "content": "Copyright (c) 2014 Open Exchange Rates\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.7177734375,
          "content": "{\n\t\"name\" : \"accounting\",\n\t\"description\" : \"number, money and currency formatting library\",\n\t\"homepage\": \"http://openexchangerates.github.io/accounting.js\",\n\t\"license\": \"MIT\",\n\t\"keywords\" : [\"accounting\", \"number\", \"money\", \"currency\", \"format\", \"utilities\", \"finance\", \"exchange\"],\n\t\"author\": \"Open Exchange Rates <info@openexchangerates.org> (https://www.openexchangerates.org)\",\n\t\"contributors\" : [\n\t\t\"Open Exchange Rates <info@openxchangerates.org> (https://openexchangerates.org)\",\n\t\t\"Joss Crowcroft <josscrowcroft@gmail.com> (http://www.josscrowcroft.com)\"\n\t],\n\t\"dependencies\" : [],\n\t\"repository\" : {\"type\": \"git\", \"url\": \"git://github.com/openexchangerates/accounting.js.git\"},\n\t\"main\" : \"accounting.js\",\n\t\"version\" : \"0.4.2\"\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 3.359375,
          "content": "**accounting.js** is a tiny JavaScript library for number, money and currency parsing/formatting. It's lightweight, fully localisable, has no dependencies, and works great client-side or server-side. Use standalone or as a nodeJS/npm and AMD/requireJS module.\n\nVisit the plugin homepage for demos and documentation: **http://openexchangerates.github.io/accounting.js/**\n\nPlease checkout or download the latest stable tag before using in production. [Bug reports](https://github.com/openexchangerates/accounting.js/issues) and pull requests are welcome.\n\nMaintained by [Open Exchange Rates](https://openexchangerates.org \"Free reliable exchange rates/currency conversion data API\") and originally by [@josscrowcroft](http://twitter.com/josscrowcroft) and other [contributors](https://github.com/openexchangerates/accounting.js/contributors).\n\n---\n\n### Works great with:\n\n* **[money.js](http://openexchangerates.github.com/money.js \"JavaScript and NodeJS Currency Conversion Library\")** - a tiny (1kb) standalone JavaScript currency conversion library, for web & nodeJS\n* **[Open Exchange Rates](https://openexchangerates.org \"realtime and historical exchange rates/currency conversion data API\")** - the free currency conversion data API\n\n---\n\n## Changelog\n\n**v0.4.2** - Added bower.json\n\n**v0.4.1** - Alias `accounting.formatNumber()` as `accounting.format()`\n\n**v0.4** - Transferred repository to Open Exchange Rates for ongoing maintenance\n\n**v0.3.2** - Fixed package.json dependencies (should be empty object)\n\n**v0.3.0**\n* Rewrote library structure similar to underscore.js for use as a nodeJS/npm and AMD module. Use `npm install accounting` and then `var accounting = require(\"accounting\");` in your nodeJS scripts. \n* Also works with requireJS or any AMD module loader.\n* **unformat** now only attempts to parse the number if it's not already a valid number. \n* `acounting.unformat` now also aliased as `acounting.parse`\n* Fixed an IE bug in the `defaults` method\n\n**v0.2.2** - Fixed same issue as \\#Num: #24 in **formatNumber**; switch to Google Closure Compiler for minified version.\n\n**v0.2.1** - Fixed issue \\#Num: #24 (locally-defined settings object was being modified by **formatMoney**)\n\n**v0.2**\n* Rewrote formatting system for **formatMoney** and **formatColumn** for better control of string output\n* Now supports separate formats for negative and zero values (optionally) via `accounting.settings.currency.format`\n* Internal improvements and helper methods\n\n**v0.1.4**\n* **formatMoney** recursively formats arrays\n* Added Jasmine test suite (thanks to [millermedeiros](https://github.com/millermedeiros)) and QUnit functionality/speed tests\n\n**v0.1.3**\n* Added configurable settings object for default formatting parameters.\n* Added `format` parameter to control symbol and value position (default `\"%s%v\"`, or [symbol][value])\n* Methods consistently accept object as 2nd parameter, matching/overriding the library defaults\n\n**v0.1.2**\n* **formatColumn** works recursively on nested arrays (e.g. `accounting.formatColumn( [[1,12,123,1234], [1234,123,12,1]] )`, returns matching array with inner columns lined up)\n* Fix rounding in **formatNumber**\n\n**v0.1.1**\n* Added **toFixed** method (`accounting.toFixed(value, precision)`), which treats floats more like decimals for more accurate currency rounding\n* Minified version preserves semicolons\n* Fixed `NaN` errors when no value in **unformat**\n\n**v0.1** - First version\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}