{
  "metadata": {
    "timestamp": 1736561997445,
    "page": 727,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "noble/noble",
      "stars": 3424,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.189453125,
          "content": "root = true\n[*]\ncharset = utf-8\nindent_size = 2\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n [*.{diff,md}]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1025390625,
          "content": "lib-cov\n*.seed\n*.log\n*.csv\n*.dat\n*.out\n*.pid\n*.gz\n\npids\nlogs\nresults\n\nbuild/\nnode_modules/\nnpm-debug.log\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 0.173828125,
          "content": "{\n  \"browser\": true,\n  \"node\": true,\n  \"mocha\": true,\n  \"unused\": false, //enable after cleanup\n  \"undef\": false, //enable after cleanup\n  \"globals\": {\n    \"Promise\": true\n  }\n}\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.658203125,
          "content": "os:\n  - linux\n  - osx\nlanguage: cpp\nenv:\n  - NODE_VERSION=\"0.8\"\n  - NODE_VERSION=\"0.10\"\n  - NODE_VERSION=\"0.12\"\n  - NODE_VERSION=\"4\"\n  - NODE_VERSION=\"6\"\n  - NODE_VERSION=\"8\"\nmatrix:\n  fast_finish: true\nbefore_install:\n  - git clone https://github.com/creationix/nvm.git /tmp/.nvm;\n  - source /tmp/.nvm/nvm.sh;\n  - nvm install $NODE_VERSION;\n  - nvm use --delete-prefix $NODE_VERSION;\n  - if [ $TRAVIS_OS_NAME == \"linux\" ]; then\n      export CC=\"g++-4.8\";\n    fi\n  - if [ $NODE_VERSION == \"0.8\" ]; then\n      npm install -g npm@2;\n    fi\ninstall:\n  - npm install\nscript:\n  - npm test\naddons:\n  apt:\n    sources:\n      - ubuntu-toolchain-r-test\n    packages:\n      - g++-4.8\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.140625,
          "content": "## Version 1.9.1\n\n * Don't forget previously discovered services and characteristics ([@elafargue](https://github.com/elafargue))\n * Fixed peripheral-explorer example with newer async versions\n * web socket binding: various fixes ([@hadrienk](https://github.com/hadrienk))\n * Fix multiple init of bindings with multiple stateChange listeners added or noble.state is accessed\n\n## Version 1.9.0\n\n * Don't initialize bindings until first state change listener added\n * webble: hooked up disconnect event\n * webble: clear cached services on reconnect\n * hci-socket: Added upport 32-bit and 128-bit service data UUIDs ([@arekzelechowski](https://github.com/arekzelechowski))\n * Update 'connectable' property upon discovery ([@dimitrisx](https://github.com/dimitrisx))\n * macOS: Added support for High Sierra\n * webble: remove subscribe listeners on disconnect\n\n## Version 1.8.1\n\n * easier install instructions for Windows ([@don](https://github.com/don))\n * hci-socket binding: more descriptive error outputs ([@mbifulco](https://github.com/mbifulco))\n * hci-socket binding: report non-connectable advertisements without scan response\n * Corrected deprecated `read` event for characteristics no emitting for notifications\n\n## Version 1.8.0\n\n * hci-socket binding: always set scan parameters before scanning ([@Lahorde](https://github.com/Lahorde))\n * hci-socket binding: add L2CAP signaling layer for non-Linux or Linux user channel mode\n * hci-socket binding: Workarounds for scanning with N.T.C. C.H.I.P\n * hci-socket binding: if `init()` fails we don't want to try and clear up ([@gfwilliams](https://github.com/gfwilliams))\n * Fix read events firing for notifications ([@zkiiito](https://github.com/zkiiito))\n * Add FreeBSD support ([@myfreeweb](https://github.com/myfreeweb))\n * Fix startScanning callback calling setting error to try ([@MarSoft](https://github.com/MarSoft))\n * New Web Bluetooth API shim ([@monteslu](https://github.com/monteslu))\n\n## Version 1.7.0\n\n * hci-socket binding: now supports \"long writes\" ([@projectgus](https://github.com/projectgus))\n * hci-socket binding: use latest bluetooth-hci-socket dependency (~0.5.1)\n * hci-socket binding: add support to extract service solicitation UUID's from advertisement ([@smartyw](https://github.com/smartyw))\n * web-socket binding: fixed write handle not working ([@christopherhex](https://github.com/christopherhex))\n * hci-socket binding: initial bindUser support via HCI_CHANNEL_USER environment variable\n\n## Version 1.6.0\n\n * hci-socket binding: use latest bluetooth-hci-socket dependency (~0.4.4)\n * Added characteristic.subscribe and characteristic.unsubscribe API's (characteristic.notify is now deprecated)\n * hci-socket binding: use OCF_LE_SET_EVENT_MASK for LE_SET_EVENT_MASK_CMD\n * hci-socket binding: check READ_LE_HOST_SUPPORTED_CMD status before parsing result\n\n## Version 1.5.0\n\n * hci-socket binding: add NOBLE_MULTI_ROLE flag for ignoring peripheral role commands ([@popasquat89](https://github.com/bradjc))\n * Fix variable typo in ```with-bindings.js`` ([@rclai](https://github.com/rclai))\n\n## Version 1.4.0\n\n * hci-socket binding: include service data UUID's when filtering discover\n * hci-socket binding: emit scan start/stop when external app changes scanning start ([@bradjc](https://github.com/bradjc))\n * Support for pluggable bindings ([@hgwood](https://github.com/hgwood))\n * hci-socket binding: don't kill all descriptors when looking for new Characteristics ([@Neutrosider](https://github.com/Neutrosider))\n\n## Version 1.3.0\n\n * Check and report LE Create Conn command status\n * Correct parsing master clock accuracy value from LE Conn Complete event\n * Added logic to reject rather than ignore unknown requests/commands. ([@george-hawkins](https://github.com/george-hawkins))\n * Don't reset scan state on read local version response if state is powered on\n * Expose local adapter address via ```noble.address```, available after ```poweredOn``` state change event\n * Fix ```serviceUuids``` var check in ```peripheral-explorer.js``` ([@jrobeson](https://github.com/jrobeson))\n\n## Version 1.2.1\n\n * Use latest v0.4.1 bluetooth-hci-socket dependency (for kernel 4.1.x disconnect workaround)\n * Add read + write LE host supported commands (for kernel 4.1.x disconnect workaround)\n * Fix a potential exception when accessing a non existent element ([@Loghorn](https://github.com/Loghorn))\n\n## Version 1.2.0\n\n * Use v0.4.0 of bluetooth-hci-socket\n * Ignore peripherals with only connectable flag on OS X 10.10\n * Bindings no longer init themselves\n * Fix this._discoveredPeripheralUUids = []; variable not initalized in constructor ([@jacobrosenthal](https://github.com/jacobrosenthal))\n * New ```peripheral.connectable``` property\n * Updates to Linux prerequisites in read me\n * Throw error if scanning is started when state is not powered on\n\n## Version 1.1.0\n\n * Introduce ```peripheral.id```, ```periheral.uuid``` is deprecated now\n * Initial Windows support via WinUSB and bluetooth-hci-socket\n * Rework Linux stack to use [bluetooth-hci-socket](https://github.com/sandeepmistry/node-bluetooth-hci-socket)\n * Clarify notify related API's in read me ([@OJFord](https://github.com/OJFord))\n\n## Version 1.0.2\n\n * Add mac dummy in binding.pyq ([@DomiR](https://github.com/DomiR))\n * Fixes for distributed and websocket bindings ([@Loghorn](https://github.com/Loghorn))\n * OS X Mavericks and legacy: manually emit write event for write without response requests\n * Update README for packages needed for rpm-based systems ([@ppannuto](https://github.com/ppannuto))\n * Linux: refresh serviceUuids for incoming advertisement ([@BBarash](https://github.com/BBarash))\n\n## Version 1.0.1\n\n * correct peripherals not being created correctly\n\n## Version 1.0\n\n * remove unneeded setTimeout's in OS X bindings\n * added persistent peripherals between calls to .startScanning() on mavericks ([@andySigler](https://github.com/andySigler))\n * report error or print warning if startScanning is called with state is not poweredOn\n * emit events for warnings ([@voodootikigod ](https://github.com/voodootikigod))\n * disable scanning flag on start on Linux to prevent unsupport adapter state in some cases\n * update debug dependency version\n * add address type to peripheral if known\n\n## Older\n\n * Changes not recorded\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Sandeep Mistry\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 23.2109375,
          "content": "# ![noble](assets/noble-logo.png)\n\n[![Build Status](https://travis-ci.org/noble/noble.svg?branch=master)](https://travis-ci.org/noble/noble)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/sandeepmistry/noble?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![OpenCollective](https://opencollective.com/noble/backers/badge.svg)](#backers)\n[![OpenCollective](https://opencollective.com/noble/sponsors/badge.svg)](#sponsors)\n\n\nA Node.js BLE (Bluetooth Low Energy) central module.\n\nWant to implement a peripheral? Checkout [bleno](https://github.com/sandeepmistry/bleno)\n\n__Note:__ macOS / Mac OS X, Linux, FreeBSD and Windows are currently the only supported OSes. Other platforms may be developed later on.\n\n## Prerequisites\n\n### OS X\n\n * install [Xcode](https://itunes.apple.com/ca/app/xcode/id497799835?mt=12)\n\n### Linux\n\n * Kernel version 3.6 or above\n * ```libbluetooth-dev```\n\n#### Ubuntu/Debian/Raspbian\n\n```sh\nsudo apt-get install bluetooth bluez libbluetooth-dev libudev-dev\n```\n\nMake sure ```node``` is on your path, if it's not, some options:\n * symlink ```nodejs``` to ```node```: ```sudo ln -s /usr/bin/nodejs /usr/bin/node```\n * [install Node.js using the NodeSource package](https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions)\n\n#### Fedora / Other-RPM based\n\n```sh\nsudo yum install bluez bluez-libs bluez-libs-devel\n```\n\n#### Intel Edison\n\nSee [Configure Intel Edison for Bluetooth LE (Smart) Development](http://rexstjohn.com/configure-intel-edison-for-bluetooth-le-smart-development/)\n\n### FreeBSD\n\nMake sure you have GNU Make:\n\n```sh\nsudo pkg install gmake\n```\n\nDisable automatic loading of the default Bluetooth stack by putting [no-ubt.conf](https://gist.github.com/myfreeweb/44f4f3e791a057bc4f3619a166a03b87) into ```/usr/local/etc/devd/no-ubt.conf``` and restarting devd (```sudo service devd restart```).\n\nUnload ```ng_ubt``` kernel module if already loaded:\n\n```sh\nsudo kldunload ng_ubt\n```\n\nMake sure you have read and write permissions on the ```/dev/usb/*``` device that corresponds to your Bluetooth adapter.\n\n### Windows\n\n[node-gyp requirements for Windows](https://github.com/TooTallNate/node-gyp#installation)\n\nInstall the required tools and configurations using Microsoft's [windows-build-tools](https://github.com/felixrieseberg/windows-build-tools) from an elevated PowerShell or cmd.exe (run as Administrator).\n\n```cmd\nnpm install --global --production windows-build-tools\n```\n\n[node-bluetooth-hci-socket prerequisites](https://github.com/sandeepmistry/node-bluetooth-hci-socket#windows)\n   * Compatible Bluetooth 4.0 USB adapter\n   * [WinUSB](https://msdn.microsoft.com/en-ca/library/windows/hardware/ff540196(v=vs.85).aspx) driver setup for Bluetooth 4.0 USB adapter, using [Zadig tool](http://zadig.akeo.ie/)\n\nSee [@don](https://github.com/don)'s set up guide on [Bluetooth LE with Node.js and Noble on Windows](https://www.youtube.com/watch?v=mL9B8wuEdms&feature=youtu.be&t=1m46s)\n\n## Notes\n\n### Maximum simultaneous connections\n\nThis limit is imposed upon by the Bluetooth adapter hardware as well as it's firmware.\n\n| Platform |     |\n| :------- | --- |\n| OS X 10.11 (El Capitan) | 6 |\n| Linux/Windows - Adapter dependent | 5 (CSR based adapter) |\n\n### Adapter specific known issues\n\nSome BLE adapters cannot connect to a peripheral while they are scanning (examples below). You will get the following messages when trying to connect :\n\nSena UD-100 (Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)) : `Error: Command disallowed`\n\nIntel Dual Band Wireless-AC 7260 (Intel Corporation Wireless 7260 (rev 73)) : `Error: Connection Rejected due to Limited Resources (0xd)`\n\nYou need to stop scanning before trying to connect in order to solve this issue.\n\n## Install\n\n```sh\nnpm install noble\n```\n\n## Usage\n\n```javascript\nvar noble = require('noble');\n```\n\n### Actions\n\n#### Start scanning\n\n```javascript\nnoble.startScanning(); // any service UUID, no duplicates\n\n\nnoble.startScanning([], true); // any service UUID, allow duplicates\n\n\nvar serviceUUIDs = [\"<service UUID 1>\", ...]; // default: [] => all\nvar allowDuplicates = <false|true>; // default: false\n\nnoble.startScanning(serviceUUIDs, allowDuplicates[, callback(error)]); // particular UUID's\n```\n\n__NOTE:__ ```noble.state``` must be ```poweredOn``` before scanning is started. ```noble.on('stateChange', callback(state));``` can be used register for state change events.\n\n#### Stop scanning\n\n```javascript\nnoble.stopScanning();\n```\n\n#### Peripheral\n\n##### Connect\n\n```javascript\nperipheral.connect([callback(error)]);\n```\n\n##### Disconnect or cancel pending connection\n\n```javascript\nperipheral.disconnect([callback(error)]);\n```\n\n##### Update RSSI\n\n```javascript\nperipheral.updateRssi([callback(error, rssi)]);\n```\n\n##### Discover services\n\n```javascript\nperipheral.discoverServices(); // any service UUID\n\nvar serviceUUIDs = [\"<service UUID 1>\", ...];\nperipheral.discoverServices(serviceUUIDs[, callback(error, services)]); // particular UUID's\n```\n\n##### Discover all services and characteristics\n\n```javascript\nperipheral.discoverAllServicesAndCharacteristics([callback(error, services, characteristics)]);\n```\n\n##### Discover some services and characteristics\n\n```javascript\nvar serviceUUIDs = [\"<service UUID 1>\", ...];\nvar characteristicUUIDs = [\"<characteristic UUID 1>\", ...];\nperipheral.discoverSomeServicesAndCharacteristics(serviceUUIDs, characteristicUUIDs, [callback(error, services, characteristics));\n```\n#### Service\n\n##### Discover included services\n\n```javascript\nservice.discoverIncludedServices(); // any service UUID\n\nvar serviceUUIDs = [\"<service UUID 1>\", ...];\nservice.discoverIncludedServices(serviceUUIDs[, callback(error, includedServiceUuids)]); // particular UUID's\n```\n\n##### Discover characteristics\n\n```javascript\nservice.discoverCharacteristics() // any characteristic UUID\n\nvar characteristicUUIDs = [\"<characteristic UUID 1>\", ...];\nservice.discoverCharacteristics(characteristicUUIDs[, callback(error, characteristics)]); // particular UUID's\n```\n\n#### Characteristic\n\n##### Read\n\n```javascript\ncharacteristic.read([callback(error, data)]);\n```\n\n##### Write\n\n```javascript\ncharacteristic.write(data, withoutResponse[, callback(error)]); // data is a buffer, withoutResponse is true|false\n```\n\n* ```withoutResponse```:\n  * ```false```: send a write request, used with \"write\" characteristic property\n  * ```true```: send a write command, used with \"write without response\" characteristic property\n\n##### Broadcast\n\n```javascript\ncharacteristic.broadcast(broadcast[, callback(error)]); // broadcast is true|false\n```\n\n##### Subscribe\n\n```javascript\ncharacteristic.subscribe([callback(error)]);\n```\n\n  * subscribe to a characteristic, triggers `'data'` events when peripheral sends an notification or indication\n  * use for characteristics with notify or indicate properties\n\n##### Unsubscribe\n\n```javascript\ncharacteristic.unsubscribe([callback(error)]);\n```\n\n  * unsubscribe to a characteristic\n  * use for characteristics with notify or indicate properties\n\n##### Discover descriptors\n\n```javascript\ncharacteristic.discoverDescriptors([callback(error, descriptors)]);\n```\n\n##### Read value\n\n```javascript\ndescriptor.readValue([callback(error, data)]);\n```\n\n##### Write value\n\n```javascript\ndescriptor.writeValue(data[, callback(error)]); // data is a buffer\n```\n\n#### Handle\n\n##### Read\n\n```javascript\nperipheral.readHandle(handle, callback(error, data));\n```\n\n##### Write\n\n```javascript\nperipheral.writeHandle(handle, data, withoutResponse, callback(error));\n```\n\n### Events\n\nSee [Node.js EventEmitter docs](https://nodejs.org/api/events.html) for more info. on API's.\n\n#### Adapter state change\n\n```javascript\nstate = <\"unknown\" | \"resetting\" | \"unsupported\" | \"unauthorized\" | \"poweredOff\" | \"poweredOn\">\n\nnoble.on('stateChange', callback(state));\n```\n\n#### Scan started:\n\n```javascript\nnoble.on('scanStart', callback);\n```\n\nThe event is emitted when scanning is started or if another application enables scanning or changes scanning settings.\n\n#### Scan stopped\n\n```javascript\nnoble.on('scanStop', callback);\n```\n\nThe event is emitted when scanning is stopped or if another application stops scanning.\n\n#### Peripheral discovered\n\n```javascript\nperipheral = {\n  id: \"<id>\",\n  address: \"<BT address\">, // Bluetooth Address of device, or 'unknown' if not known\n  addressType: \"<BT address type>\", // Bluetooth Address type (public, random), or 'unknown' if not known\n  connectable: <connectable>, // true or false, or undefined if not known\n  advertisement: {\n    localName: \"<name>\",\n    txPowerLevel: <int>,\n    serviceUuids: [\"<service UUID>\", ...],\n    serviceSolicitationUuid: [\"<service solicitation UUID>\", ...],\n    manufacturerData: <Buffer>,\n    serviceData: [\n        {\n            uuid: \"<service UUID>\"\n            data: <Buffer>\n        },\n        ...\n    ]\n  },\n  rssi: <rssi>\n};\n\nnoble.on('discover', callback(peripheral));\n```\n\n__Note:__ on OS X the address will be set to 'unknown' if the device has not been connected previously.\n\n#### Warnings\n\n```javascript\nnoble.on('warning', callback(message));\n```\n\n#### Peripheral\n\n##### Connected\n\n```javascript\nperipheral.once('connect', callback);\n```\n\n##### Disconnected:\n\n```javascript\nperipheral.once('disconnect', callback);\n```\n\n##### RSSI update\n\n```javascript\nperipheral.once('rssiUpdate', callback(rssi));\n```\n\n##### Services discovered\n\n```javascript\nperipheral.once('servicesDiscover', callback(services));\n```\n\n#### Service\n\n##### Included services discovered\n\n```javascript\nservice.once('includedServicesDiscover', callback(includedServiceUuids));\n```\n\n##### Characteristics discovered\n\n```javascript\ncharacteristic = {\n  uuid: \"<uuid>\",\n   // properties: 'broadcast', 'read', 'writeWithoutResponse', 'write', 'notify', 'indicate', 'authenticatedSignedWrites', 'extendedProperties'\n  properties: [...]\n};\n\nservice.once('characteristicsDiscover', callback(characteristics));\n```\n\n#### Characteristic\n\n##### Data\n\nEmitted when characteristic read has completed, result of ```characteristic.read(...)``` or characteristic value has been updated by peripheral via notification or indication - after having been enabled with ```notify(true[, callback(error)])```.\n\n```javascript\ncharacteristic.on('data', callback(data, isNotification));\n\ncharacteristic.once('read', callback(data, isNotification)); // legacy\n```\n\n**Note:** `isNotification` event parameter value MAY be `undefined` depending on platform support. The parameter is **deprecated** after version 1.8.1, and not supported when on macOS High Sierra and later.\n\n##### Write\n\nEmitted when characteristic write has completed, result of ```characteristic.write(...)```.\n\n```javascript\ncharacteristic.once('write', withoutResponse, callback());\n```\n\n##### Broadcast\n\nEmitted when characteristic broadcast state changes, result of ```characteristic.broadcast(...)```.\n\n```javascript\ncharacteristic.once('broadcast', callback(state));\n```\n\n##### Notify\n\nEmitted when characteristic notification state changes, result of ```characteristic.notify(...)```.\n\n```javascript\ncharacteristic.once('notify', callback(state));\n```\n\n##### Descriptors discovered\n\n```javascript\ndescriptor = {\n  uuid: '<uuid>'\n};\n\ncharacteristic.once('descriptorsDiscover', callback(descriptors));\n```\n\n#### Descriptor\n\n##### Value read\n\n```javascript\ndescriptor.once('valueRead', data);\n```\n\n##### Value write\n\n```javascript\ndescriptor.once('valueWrite');\n```\n\n## Running on Linux\n\n### Running without root/sudo\n\nRun the following command:\n\n```sh\nsudo setcap cap_net_raw+eip $(eval readlink -f `which node`)\n```\n\nThis grants the ```node``` binary ```cap_net_raw``` privileges, so it can start/stop BLE advertising.\n\n__Note:__ The above command requires ```setcap``` to be installed, it can be installed using the following:\n\n * apt: ```sudo apt-get install libcap2-bin```\n * yum: ```su -c \\'yum install libcap2-bin\\'```\n\n### Multiple Adapters\n\n```hci0``` is used by default to override set the ```NOBLE_HCI_DEVICE_ID``` environment variable to the interface number.\n\nExample, specify ```hci1```:\n\n```sh\nsudo NOBLE_HCI_DEVICE_ID=1 node <your file>.js\n```\n\n### Reporting all HCI events\n\nBy default noble waits for both the advertisement data and scan response data for each Bluetooth address. If your device does not use scan response the following environment variable can be used to bypass it.\n\n\n```sh\nsudo NOBLE_REPORT_ALL_HCI_EVENTS=1 node <your file>.js\n```\n\n### bleno compatibility\n\nBy default noble will respond with an error whenever a GATT request message is received. If your intention is to use bleno in tandem with noble, the following environment variable can be used to bypass this functionality. __Note:__ this requires a Bluetooth 4.1 adapter.\n\n```sh\nsudo NOBLE_MULTI_ROLE=1 node <your file>.js\n```\n\n\n## Advanced usage\n\n### Override default bindings\n\nBy default, noble will select bindings to communicate with Bluetooth devices depending on your platform. If you prefer to specify what bindings noble should use:\n\n```javascript\nvar noble = require('noble/with-bindings')(require('./my-custom-bindings'));\n```\n\n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/noble#backer)]\n\n<a href=\"https://opencollective.com/noble/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/backer/29/avatar.svg\"></a>\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/noble#sponsor)]\n\n<a href=\"https://opencollective.com/noble/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/noble/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/noble/sponsor/29/avatar.svg\"></a>\n\n## Useful Links\n\n * [Bluetooth Development Portal](http://developer.bluetooth.org)\n   * [GATT Specifications](http://developer.bluetooth.org/gatt/Pages/default.aspx)\n * [Bluetooth: ATT and GATT](http://epx.com.br/artigos/bluetooth_gatt.php)\n\n## License\n\nCopyright (C) 2015 Sandeep Mistry <sandeep.mistry@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[![Analytics](https://ga-beacon.appspot.com/UA-56089547-1/sandeepmistry/noble?pixel)](https://github.com/igrigorik/ga-beacon)\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.1240234375,
          "content": "var Noble = require('./lib/noble');\nvar bindings = require('./lib/resolve-bindings')();\n\nmodule.exports = new Noble(bindings);\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.15625,
          "content": "{\n  \"author\": \"Sandeep Mistry\",\n  \"maintainers\": [\n    \"Jacob Rosenthal\",\n    \"Luis Montes\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"noble\",\n  \"description\": \"A Node.js BLE (Bluetooth Low Energy) central library.\",\n  \"version\": \"1.9.1\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/sandeepmistry/noble.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/sandeepmistry/noble/issues\"\n  },\n  \"keywords\": [\n    \"bluetooth\",\n    \"BLE\",\n    \"bluetooth low energy\",\n    \"bluetooth smart\",\n    \"central\"\n  ],\n  \"main\": \"./index.js\",\n  \"engines\": {\n    \"node\": \">=0.8\"\n  },\n  \"os\": [\n    \"darwin\",\n    \"linux\",\n    \"freebsd\",\n    \"win32\"\n  ],\n  \"dependencies\": {\n    \"debug\": \"~2.2.0\"\n  },\n  \"optionalDependencies\": {\n    \"bluetooth-hci-socket\": \"^0.5.1\",\n    \"bplist-parser\": \"0.0.6\",\n    \"xpc-connection\": \"~0.1.4\"\n  },\n  \"devDependencies\": {\n    \"jshint\": \"latest\",\n    \"mocha\": \"~1.8.2\",\n    \"should\": \"~1.2.2\",\n    \"sinon\": \"~1.6.0\",\n    \"async\": \"~0.2.9\",\n    \"ws\": \"~0.4.31\"\n  },\n  \"scripts\": {\n    \"pretest\": \"jshint *.js lib/. test/.\",\n    \"test\": \"mocha -R spec test/*.js\"\n  },\n  \"browser\": {\n    \"./lib/resolve-bindings.js\": \"./lib/resolve-bindings-web.js\"\n  }\n}\n"
        },
        {
          "name": "test.js",
          "type": "blob",
          "size": 3.236328125,
          "content": "var noble = require('./index');\n\nconsole.log('noble');\n\nnoble.on('stateChange', function(state) {\n  console.log('on -> stateChange: ' + state);\n\n  if (state === 'poweredOn') {\n    noble.startScanning();\n  } else {\n    noble.stopScanning();\n  }\n});\n\nnoble.on('scanStart', function() {\n  console.log('on -> scanStart');\n});\n\nnoble.on('scanStop', function() {\n  console.log('on -> scanStop');\n});\n\n\n\nnoble.on('discover', function(peripheral) {\n  console.log('on -> discover: ' + peripheral);\n\n  noble.stopScanning();\n\n  peripheral.on('connect', function() {\n    console.log('on -> connect');\n    this.updateRssi();\n  });\n\n  peripheral.on('disconnect', function() {\n    console.log('on -> disconnect');\n  });\n\n  peripheral.on('rssiUpdate', function(rssi) {\n    console.log('on -> RSSI update ' + rssi);\n    this.discoverServices();\n  });\n\n  peripheral.on('servicesDiscover', function(services) {\n    console.log('on -> peripheral services discovered ' + services);\n\n    var serviceIndex = 0;\n\n    services[serviceIndex].on('includedServicesDiscover', function(includedServiceUuids) {\n      console.log('on -> service included services discovered ' + includedServiceUuids);\n      this.discoverCharacteristics();\n    });\n\n    services[serviceIndex].on('characteristicsDiscover', function(characteristics) {\n      console.log('on -> service characteristics discovered ' + characteristics);\n\n      var characteristicIndex = 0;\n\n      characteristics[characteristicIndex].on('read', function(data, isNotification) {\n        console.log('on -> characteristic read ' + data + ' ' + isNotification);\n        console.log(data);\n\n        peripheral.disconnect();\n      });\n\n      characteristics[characteristicIndex].on('write', function() {\n        console.log('on -> characteristic write ');\n\n        peripheral.disconnect();\n      });\n\n      characteristics[characteristicIndex].on('broadcast', function(state) {\n        console.log('on -> characteristic broadcast ' + state);\n\n        peripheral.disconnect();\n      });\n\n      characteristics[characteristicIndex].on('notify', function(state) {\n        console.log('on -> characteristic notify ' + state);\n\n        peripheral.disconnect();\n      });\n\n      characteristics[characteristicIndex].on('descriptorsDiscover', function(descriptors) {\n        console.log('on -> descriptors discover ' + descriptors);\n\n        var descriptorIndex = 0;\n\n        descriptors[descriptorIndex].on('valueRead', function(data) {\n          console.log('on -> descriptor value read ' + data);\n          console.log(data);\n          peripheral.disconnect();\n        });\n\n        descriptors[descriptorIndex].on('valueWrite', function() {\n          console.log('on -> descriptor value write ');\n          peripheral.disconnect();\n        });\n\n        descriptors[descriptorIndex].readValue();\n        //descriptors[descriptorIndex].writeValue(new Buffer([0]));\n      });\n\n\n      characteristics[characteristicIndex].read();\n      //characteristics[characteristicIndex].write(new Buffer('hello'));\n      //characteristics[characteristicIndex].broadcast(true);\n      //characteristics[characteristicIndex].notify(true);\n      // characteristics[characteristicIndex].discoverDescriptors();\n    });\n\n    \n    services[serviceIndex].discoverIncludedServices();\n  });\n\n  peripheral.connect();\n});\n\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "with-bindings.js",
          "type": "blob",
          "size": 0.10546875,
          "content": "var Noble = require('./lib/noble');\n\nmodule.exports = function(bindings) {\n  return new Noble(bindings);\n};\n"
        },
        {
          "name": "ws-slave.js",
          "type": "blob",
          "size": 10.5673828125,
          "content": "/* jshint loopfunc: true */\nvar events = require('events');\n\nvar debug = require('debug')('slave');\nvar WebSocket = require('ws');\n\nvar noble = require('./index');\n\nvar serverMode = !process.argv[2];\nvar port = 0xB1e;\nvar host = process.argv[2];\n\n\nvar ws;\nvar wss;\n\nif (serverMode) {\n  console.log('noble - ws slave - server mode');\n  wss = new WebSocket.Server({\n    port: 0xB1e\n  });\n\n  wss.on('connection', function(ws_) {\n    console.log('ws -> connection');\n\n    ws = ws_;\n\n    ws.on('message', onMessage);\n\n    ws.on('close', function() {\n      console.log('ws -> close');\n      noble.stopScanning();\n    });\n\n    noble.on('stateChange', function(state) {\n      sendEvent({\n        type: 'stateChange',\n        state: state\n      });\n    });\n\n    // Send poweredOn if already in this state.\n    if (noble.state == \"poweredOn\") {\n      sendEvent({\n        type: 'stateChange',\n        state: \"poweredOn\"\n      });\n    }\n\n\n  });\n} else {\n  ws = new WebSocket('ws://' + host + ':' + port);\n\n  ws.on('open', function() {\n    console.log('ws -> open');\n  });\n\n  ws.on('message', function(message) {\n    onMessage(message);\n  });\n\n  ws.on('close', function() {\n    console.log('ws -> close');\n\n    noble.stopScanning();\n  });\n}\n\nvar peripherals = {};\n\n// TODO: open/close ws on state change\n\nfunction sendEvent(event) {\n  var message = JSON.stringify(event);\n\n  console.log('ws -> send: ' + message);\n\n  var clients = serverMode ? wss.clients : [ws];\n\n  for (var i = 0; i < clients.length; i++) {\n    clients[i].send(message);\n  }\n}\n\nvar onMessage = function(message) {\n  console.log('ws -> message: ' + message);\n\n  var command = JSON.parse(message);\n\n  var action = command.action;\n  var peripheralUuid = command.peripheralUuid;\n  var serviceUuids = command.serviceUuids;\n  var serviceUuid = command.serviceUuid;\n  var characteristicUuids = command.characteristicUuids;\n  var characteristicUuid = command.characteristicUuid;\n  var data = command.data ? new Buffer(command.data, 'hex') : null;\n  var withoutResponse = command.withoutResponse;\n  var broadcast = command.broadcast;\n  var notify = command.notify;\n  var descriptorUuid = command.descriptorUuid;\n  var handle = handle;\n\n  var peripheral = peripherals[peripheralUuid];\n  var service = null;\n  var characteristic = null;\n  var descriptor = null;\n\n\n  if (peripheral && serviceUuid) {\n    var services = peripheral.services;\n\n    for (var i in services) {\n      if (services[i].uuid === serviceUuid) {\n        service = services[i];\n\n        if (characteristicUuid) {\n          var characteristics = service.characteristics;\n\n          for (var j in characteristics) {\n            if (characteristics[j].uuid === characteristicUuid) {\n              characteristic = characteristics[j];\n\n              if (descriptorUuid) {\n                var descriptors = characteristic.descriptors;\n\n                for (var k in descriptors) {\n                  if (descriptors[k].uuid === descriptorUuid) {\n                    descriptor = descriptors[k];\n                    break;\n                  }\n                }\n              }\n              break;\n            }\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  if (action === 'startScanning') {\n    noble.startScanning(serviceUuids, command.allowDuplicates);\n  } else if (action === 'stopScanning') {\n    noble.stopScanning();\n  } else if (action === 'connect') {\n    peripheral.connect();\n  } else if (action === 'disconnect') {\n    peripheral.disconnect();\n  } else if (action === 'updateRssi') {\n    peripheral.updateRssi();\n  } else if (action === 'discoverServices') {\n    peripheral.discoverServices(command.uuids);\n  } else if (action === 'discoverIncludedServices') {\n    service.discoverIncludedServices(serviceUuids);\n  } else if (action === 'discoverCharacteristics') {\n    service.discoverCharacteristics(characteristicUuids);\n  } else if (action === 'read') {\n    characteristic.read();\n  } else if (action === 'write') {\n    characteristic.write(data, withoutResponse);\n  } else if (action === 'broadcast') {\n    characteristic.broadcast(broadcast);\n  } else if (action === 'notify') {\n    characteristic.notify(notify);\n  } else if (action === 'discoverDescriptors') {\n    characteristic.discoverDescriptors();\n  } else if (action === 'readValue') {\n    descriptor.readValue();\n  } else if (action === 'writeValue') {\n    descriptor.writeValue(data);\n  } else if (action === 'readHandle') {\n    peripheral.readHandle(handle);\n  } else if (action === 'writeHandle') {\n    peripheral.writeHandle(handle, data, withoutResponse);\n  }\n};\n\nnoble.on('discover', function(peripheral) {\n  peripherals[peripheral.uuid] = peripheral;\n\n  peripheral.on('connect', function() {\n    sendEvent({\n      type: 'connect',\n      peripheralUuid: this.uuid\n    });\n  });\n\n  peripheral.on('disconnect', function() {\n    sendEvent({\n      type: 'disconnect',\n      peripheralUuid: this.uuid\n    });\n\n    for (var i in this.services) {\n      for (var j in this.services[i].characteristics) {\n        for (var k in this.services[i].characteristics[j].descriptors) {\n          this.services[i].characteristics[j].descriptors[k].removeAllListeners();\n        }\n\n        this.services[i].characteristics[j].removeAllListeners();\n      }\n      this.services[i].removeAllListeners();\n    }\n\n    this.removeAllListeners();\n  });\n\n  peripheral.on('rssiUpdate', function(rssi) {\n    sendEvent({\n      type: 'rssiUpdate',\n      peripheralUuid: this.uuid,\n      rssi: rssi\n    });\n  });\n\n  peripheral.on('servicesDiscover', function(services) {\n    var peripheral = this;\n    var serviceUuids = [];\n\n    var includedServicesDiscover = function(includedServiceUuids) {\n      sendEvent({\n        type: 'includedServicesDiscover',\n        peripheralUuid: peripheral.uuid,\n        serviceUuid: this.uuid,\n        includedServiceUuids: includedServiceUuids\n      });\n    };\n\n    var characteristicsDiscover = function(characteristics) {\n      var service = this;\n      var discoveredCharacteristics = [];\n\n      var read = function(data, isNotification) {\n        var characteristic = this;\n\n        sendEvent({\n          type: 'read',\n          peripheralUuid: peripheral.uuid,\n          serviceUuid: service.uuid,\n          characteristicUuid: characteristic.uuid,\n          data: data.toString('hex'),\n          isNotification: isNotification\n        });\n      };\n\n      var write = function() {\n        var characteristic = this;\n\n        sendEvent({\n          type: 'write',\n          peripheralUuid: peripheral.uuid,\n          serviceUuid: service.uuid,\n          characteristicUuid: characteristic.uuid\n        });\n      };\n\n      var broadcast = function(state) {\n        var characteristic = this;\n\n        sendEvent({\n          type: 'broadcast',\n          peripheralUuid: peripheral.uuid,\n          serviceUuid: service.uuid,\n          characteristicUuid: characteristic.uuid,\n          state: state\n        });\n      };\n\n      var notify = function(state) {\n        var characteristic = this;\n\n        sendEvent({\n          type: 'notify',\n          peripheralUuid: peripheral.uuid,\n          serviceUuid: service.uuid,\n          characteristicUuid: characteristic.uuid,\n          state: state\n        });\n      };\n\n      var descriptorsDiscover = function(descriptors) {\n        var characteristic = this;\n\n        var discoveredDescriptors = [];\n\n        var valueRead = function(data) {\n          var descriptor = this;\n\n          sendEvent({\n            type: 'valueRead',\n            peripheralUuid: peripheral.uuid,\n            serviceUuid: service.uuid,\n            characteristicUuid: characteristic.uuid,\n            descriptorUuid: descriptor.uuid,\n            data: data.toString('hex')\n          });\n        };\n\n        var valueWrite = function(data) {\n          var descriptor = this;\n\n          sendEvent({\n            type: 'valueWrite',\n            peripheralUuid: peripheral.uuid,\n            serviceUuid: service.uuid,\n            characteristicUuid: characteristic.uuid,\n            descriptorUuid: descriptor.uuid\n          });\n        };\n\n        for (var k in descriptors) {\n          descriptors[k].on('valueRead', valueRead);\n\n          descriptors[k].on('valueWrite', valueWrite);\n\n          discoveredDescriptors.push(descriptors[k].uuid);\n        }\n\n        sendEvent({\n          type: 'descriptorsDiscover',\n          peripheralUuid: peripheral.uuid,\n          serviceUuid: service.uuid,\n          characteristicUuid: this.uuid,\n          descriptors: discoveredDescriptors\n        });\n      };\n\n      for (var j = 0; j < characteristics.length; j++) {\n        characteristics[j].on('read', read);\n\n        characteristics[j].on('write', write);\n\n        characteristics[j].on('broadcast', broadcast);\n\n        characteristics[j].on('notify', notify);\n\n        characteristics[j].on('descriptorsDiscover', descriptorsDiscover);\n\n        discoveredCharacteristics.push({\n          uuid: characteristics[j].uuid,\n          properties: characteristics[j].properties\n        });\n      }\n\n      sendEvent({\n        type: 'characteristicsDiscover',\n        peripheralUuid: peripheral.uuid,\n        serviceUuid: this.uuid,\n        characteristics: discoveredCharacteristics\n      });\n    };\n\n    for (var i in services) {\n      services[i].on('includedServicesDiscover', includedServicesDiscover);\n\n      services[i].on('characteristicsDiscover', characteristicsDiscover);\n\n      serviceUuids.push(services[i].uuid);\n    }\n\n    sendEvent({\n      type: 'servicesDiscover',\n      peripheralUuid: this.uuid,\n      serviceUuids: serviceUuids\n    });\n  });\n\n  peripheral.on('handleRead', function(handle, data) {\n    sendEvent({\n      type: 'handleRead',\n      peripheralUuid: this.uuid,\n      handle: handle,\n      data: data.toString('hex')\n    });\n  });\n\n  peripheral.on('handleWrite', function(handle) {\n    sendEvent({\n      type: 'handleWrite',\n      peripheralUuid: this.uuid,\n      handle: handle\n    });\n  });\n\n  peripheral.on('handleNotify', function(handle, data) {\n    sendEvent({\n      type: 'handleNotify',\n      peripheralUuid: this.uuid,\n      handle: handle,\n      data: data.toString('hex')\n    });\n  });\n\n  sendEvent({\n    type: 'discover',\n    peripheralUuid: peripheral.uuid,\n    address: peripheral.address,\n    addressType: peripheral.addressType,\n    connectable: peripheral.connectable,\n    advertisement: {\n      localName: peripheral.advertisement.localName,\n      txPowerLevel: peripheral.advertisement.txPowerLevel,\n      serviceUuids: peripheral.advertisement.serviceUuids,\n      manufacturerData: (peripheral.advertisement.manufacturerData ? peripheral.advertisement.manufacturerData.toString('hex') : null),\n      serviceData: (peripheral.advertisement.serviceData ? peripheral.advertisement.serviceData.toString('hex') : null)\n    },\n    rssi: peripheral.rssi\n  });\n});"
        }
      ]
    }
  ]
}