{
  "metadata": {
    "timestamp": 1736561818310,
    "page": 473,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nodeca/pica",
      "stars": 3838,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintrc.yml",
          "type": "blob",
          "size": 4.62890625,
          "content": "env:\n  node:    true\n  browser: true\n  es6:     true\n\n#parserOptions:\n#  ecmaVersion: 6\n\nignorePatterns:\n  - benchmark/implementations\n  - demo\n  - dist\n  - node_modules\n\nglobals:\n  createImageBitmap: false\n  WebAssembly:       false\n#  Uint8Array:   false\n#  Int16Array:   false\n#  Uint16Array:  false\n#  Float32Array: false\n\nrules:\n  accessor-pairs:         2\n  array-bracket-spacing:  [ 2, \"always\", { \"singleValue\": true, \"objectsInArrays\": true, \"arraysInArrays\": true } ]\n  block-scoped-var:       2\n  block-spacing:          2\n  brace-style:            [ 2, '1tbs', { allowSingleLine: true } ]\n  # Postponed\n  #callback-return:        2\n  comma-dangle:           2\n  comma-spacing:          2\n  comma-style:            2\n  computed-property-spacing: [ 2, never ]\n  #consistent-this:        [ 2, self ]\n  consistent-return:      2\n  # ? change to multi\n  curly:                  [ 2, 'multi-line' ]\n  dot-notation:           2\n  eol-last:               2\n  eqeqeq:                 2\n  #func-style:             [ 2, declaration ]\n  # Postponed\n  #global-require:         2\n  guard-for-in:           2\n  handle-callback-err:    2\n\n  indent:                 [ 2, 2, { VariableDeclarator: { var: 2, let: 2, const: 3 }, SwitchCase: 1, MemberExpression: off } ]\n\n  # key-spacing:            [ 2, { \"align\": \"value\" } ]\n  keyword-spacing:        2\n  linebreak-style:        2\n  max-depth:              [ 1, 6 ]\n  #max-nested-callbacks:   [ 1, 4 ]\n  # string can exceed 80 chars, but should not overflow github website :)\n  max-len:                [ 2, 120, 1000 ]\n  new-cap:                2\n  new-parens:             2\n  # Postponed\n  #newline-after-var:      2\n  no-alert:               2\n  no-array-constructor:   2\n  #no-bitwise:             2\n  no-caller:              2\n  #no-case-declarations:   2\n  no-catch-shadow:        2\n  no-cond-assign:         2\n  no-console:             1\n  no-constant-condition:  2\n  no-control-regex:       2\n  no-debugger:            2\n  no-delete-var:          2\n  no-div-regex:           2\n  no-dupe-args:           2\n  no-dupe-keys:           2\n  no-duplicate-case:      2\n  no-else-return:         2\n  # Tend to drop\n  # no-empty:               1\n  no-empty-character-class: 2\n  no-empty-pattern:       2\n  no-eq-null:             2\n  no-eval:                2\n  no-ex-assign:           2\n  no-extend-native:       2\n  no-extra-bind:          2\n  no-extra-boolean-cast:  2\n  no-extra-semi:          2\n  no-fallthrough:         2\n  no-floating-decimal:    2\n  no-func-assign:         2\n  # Postponed\n  #no-implicit-coercion:   [2, { \"boolean\": true, \"number\": true, \"string\": true } ]\n  no-implied-eval:        2\n  no-inner-declarations:  2\n  no-invalid-regexp:      2\n  no-irregular-whitespace: 2\n  no-iterator:            2\n  no-label-var:           2\n  no-labels:              2\n  no-lone-blocks:         2\n  no-lonely-if:           2\n  no-loop-func:           2\n  no-mixed-requires:      2\n  no-mixed-spaces-and-tabs: 2\n  # Postponed\n  #no-native-reassign:     2\n  no-negated-in-lhs:      2\n  # Postponed\n  #no-nested-ternary:      2\n  no-new:                 2\n  no-new-func:            2\n  no-new-object:          2\n  no-new-require:         2\n  no-new-wrappers:        2\n  no-obj-calls:           2\n  no-octal:               2\n  no-octal-escape:        2\n  no-path-concat:         2\n  no-proto:               2\n  no-redeclare:           2\n  # Postponed\n  #no-regex-spaces:        2\n  no-return-assign:       2\n  no-self-compare:        2\n  no-sequences:           2\n  # no-shadow:              2\n  no-shadow-restricted-names: 2\n  no-sparse-arrays:       2\n  no-trailing-spaces:     2\n  no-undef:               2\n  no-undef-init:          2\n  no-undefined:           2\n  no-unexpected-multiline: 2\n  no-unreachable:         2\n  no-unused-expressions:  2\n  no-unused-vars:         2\n  no-use-before-define:   2\n  no-void:                2\n  no-with:                2\n  object-curly-spacing:   [ 2, always, { \"objectsInObjects\": true, \"arraysInObjects\": true } ]\n  operator-assignment:    1\n  # Postponed\n  #operator-linebreak:     [ 2, after ]\n  semi:                   2\n  semi-spacing:           2\n  space-before-function-paren: [ 2, { \"anonymous\": \"always\", \"named\": \"never\" } ]\n  space-in-parens:        [ 2, never ]\n  space-infix-ops:        [ 2, { int32Hint: true } ]\n  space-unary-ops:        2\n  # Postponed\n  #spaced-comment:         [ 1, always, { exceptions: [ '/', '=' ] } ]\n  strict:                 [ 2, global ]\n  quotes:                 [ 2, single, avoid-escape ]\n  quote-props:            [ 1, 'as-needed', { \"keywords\": true } ]\n  radix:                  2\n  use-isnan:              2\n  valid-typeof:           2\n  yoda:                   [ 2, never, { \"exceptRange\": true } ]\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0400390625,
          "content": "doc/\nnode_modules/\nv8.log\nfixture-test-*\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 9.958984375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n\n## [9.0.1] - 2021-12-14\n### Fixed\n- Fixed feature test in `ServiceWorker`, #255.\n\n\n## [9.0.0] - 2021-12-10\n### Fixed\n- Fixed resize of images with transparency. Thanks to @chebum.\n\n### Changed\n- Dropped `.alpha` option.\n- Increased 2x data precision between convolver passes.\n\n\n## [8.0.0] - 2021-11-22\n### Changed\n- Replaced `.quality` with `.filter`.\n- Added `mks2013` filter and use it by default.\n\n\n## [7.1.1] - 2021-11-22\n### Fixed\n- Force webworker always return typed array, to avoid artifacts in Chrome, #223.\n\n\n## [7.1.0] - 2021-06-21\n### Changed\n- In FireFox experimental resist fingerprinting mode `pica.resize()` now returns an error\n  instead of returning random data, nodeca/image-blob-reduce#28.\n\n### Fixed\n- Images with Exif orientation are now resized correctly in Chromium-based browsers\n  (it was previously broken in pica 7.0.0), #211.\n\n\n## [7.0.0] - 2021-05-23\n### Changed\n- [BREAKING] Rewrite unsharp mask, use `V` channel of HSV instead of `L` channel\n  of HSL, to reduce color shift (#209).\n- [BREAKING] Unsharp mask options are now more close to Photoshop (`unsharpAmount`\n  should be multiplied by 2 and `unsharpThreshold` should be divided by 2\n  if you switch from v6.x).\n- Splitted big `Pica` methods to smaller ones.\n- Use docker to build webassembly modules.\n\n### Added\n- Use `OffscreenCanvas` when possible (extract image bitmap in webworker).\n\n\n## [6.1.1] - 2020-08-20\n### Fixed\n- Aded Safari canvas GC workaround, #199.\n\n\n## [6.1.0] - 2020-07-10\n### Added\n- Aded OffscreenCanvas support, #195.\n\n\n## [6.0.0] - 2020-06-25\n### Changed\n- Use `dist/pica.js` as main entry. No more workarounds needed for webpack.\n- Avoid babelify dependency in dependent packages if browserify used.\n- Rewrite build scripts.\n\n### Added\n- Added `ImageBitmap` input support.\n\n\n## [5.3.0] - 2020-06-09\n### Changed\n- Use `derequire` to allow nested `browserify` for `/dist/pica.js`.\n\n\n## [5.2.0] - 2020-05-25\n### Added\n- Aded OffscreenCanvas support, #195.\n\n\n## [5.1.1] - 2020-05-18\n### Fixed\n- Suppress `createImageBitmap` errors to use fallback, #190.\n\n\n## [5.1.0] - 2019-07-15\n### Changed\n- Bump multimath dependency.\n\n### Fixed\n- Avoid possible CSP warnings, caused by WASM check, when feature not requested\n  in options.\n\n\n## [5.0.1] - 2019-07-12\n### Fixed\n- Fix unsharp crash when CIB enabled (from 4.0.0), #160.\n\n### Changed\n- Dev deps bump.\n\n\n## [5.0.0] - 2018-11-02\n### Changed\n- Maintenance, babelify upgrade: switch to @babel/core and @babel/preset-env.\n\n\n## [4.2.0] - 2018-10-25\n### Fixed\n- Added bounds check for invalid output canvas size (#155).\n\n### Changed\n- Maintenance: dev deps bump.\n\n\n## [4.1.1] - 2018-03-31\n### Changed\n- Should return result via promise (regression), fix #139.\n\n\n## [4.1.0] - 2018-03-27\n### Changed\n- Resize in multiple steps for big scales, fix #135.\n\n\n## [4.0.2] - 2018-03-05\n### Fixed\n- Multimath bump, should fix issue with broken WebAssembly engine in IOS 11.2.x\n  Webkit (Safary/Chrome).\n\n\n## [4.0.1] - 2017-10-13\n### Fixed\n- Attempt to fix failure when WebAssembly disabled via CSP.\n\n\n## [4.0.0] - 2017-09-30\n### Changed\n- Internals rewritten to use `multimath` library.\n- WebAssembly implementation for `unsharp mask`, as bonus.\n\n\n## [3.0.6] - 2017-07-13\n### Fixed\n- More constrains for `createImageBitmap()` use. Filter out browsers\n  without `ImageBitmap.prototype.close()` method (Chrome 51 etc).\n\n\n## [3.0.5] - 2017-06-30\n### Fixed\n- Avoid Promise use in webworker. Should help with IE11, which suddently\n  fixed creating of webworkers from data URI.\n\n\n## [3.0.4] - 2017-04-20\n### Fixed\n- IE fix.\n\n\n## [3.0.3] - 2017-04-18\n### Fixed\n- Fixed non working `.createImageBitmap()` resize, but disabled\n  by default due bad quality.\n\n### Added\n- Added debug messages.\n\n\n## [3.0.2] - 2017-04-16\n### Fixed\n- Fix wasm crash on upscale, #87.\n\n\n## [3.0.1] - 2017-04-14\n### Fixed\n- Add missed `.set()` fallback for ancient browsers.\n\n\n## [3.0.0] - 2017-04-11\n### Added\n- Add WebAssembly resizer.\n- Add createImageBitmap() resizer.\n- Add .toBlob() method.\n\n### Changed\n- Major rewrite. New API, promise-based.\n- Add async image decode via createImageBitmap().\n\n### Removed\n- Drop WebGL resizer.\n\n\n## [2.0.8] - 2016-10-01\n### Changed\n- Set default number of CPUs (workers) to 1 if `navigator.hardwareConcurrency`\n  not supported (ancient browsers).\n\n\n## [2.0.7] - 2016-10-01\n### Fixed\n- Fix Safary bug (grid could appear on downscaled image).\n\n### Changed\n- WEBGL shaders rework (still buggy, not for production).\n\n\n## [2.0.6] - 2016-08-04\n### Fixed\n- Fix tiler math: bad rounding could produce tiles out of src area, #61.\n\n\n## [2.0.5] - 2016-07-19\n### Fixed\n- Fix mem leak: release objectURL, used to create Web Workers.\n\n\n## [2.0.4] - 2016-06-24\n### Changed\n- Deps bump (`webworkify`). Previous version had problems with IE Edge, #56.\n\n\n## [2.0.3] - 2016-06-07\n### Changed\n- Deps bump. Use fresh `webworkify` with proper ObjectURL release, #55.\n\n\n## [2.0.2] - 2016-03-30\n### Changed\n- Optimised previous fix.\n\n\n## [2.0.1] - 2016-03-30\n### Fixed\n- Fixed garbage on image edge tiles when alpha exists.\n\n\n## [2.0.0] - 2016-03-12\n### Added\n- Support `Image()` as input src.\n\n### Changed\n- Architecture rework: images are now splitted to tiles to restrict memory use\n  and allow parallel processing.\n- Built-in WebWorkers manager to use all available CPU cores.\n- Feature flags (WW, WEBGL) are forced to `false` after resize call,\n  if feature not supported or disabled due fatal error.\n- `unsharpRadius` range restricted to 0.5..2.0.\n- Experimental code for WebGL support (noisy & buggy, disabled by default).\n- `.resizeBuffer()` is no longer recommended for use. It does not use webworkers\n  anymore (and option `transferable` is not used too).\n\n\n## [1.1.1] - 2015-11-10\n### Changed\n- Bumped `glur` version to fix bug in unsharp mask with vertical images.\n\n\n## [1.1.0] - 2015-11-09\n### Changed\n- Unsharp mask now useable.\n\n\n## [1.0.8] - 2015-10-28\n### Fixed\n- Fixed brightness loss due missed value rounding in convolvers.\n\n\n## [1.0.7] - 2014-11-18\n### Fixed\n- Fixed alpha reset for images without alpha channel (regression in 1.0.5).\n\n\n## [1.0.6] - 2014-11-08\n### Changed\n- Removed alpha correction, because canvas data is not premultipled (#13).\n  Thanks to @devongovett.\n\n\n## [1.0.5] - 2014-11-03\n### Changed\n- Expose WebWorker on pica call, to allow early termination of task.\n- Minor speed opts.\n\n\n## [1.0.4] - 2014-10-04\n### Added\n- Added transferable objects support.\n\n### Fixed\n- Fixed demo to fork over ssl too.\n\n\n## [1.0.3] - 2014-09-29\n### Added\n- Added unsharp mask implementation (very naive). Need futher work.\n\n### Changed\n- ~25% speed boost (thanks to @mraleph for advice).\n\n\n## [1.0.2] - 2014-09-27\n### Fixed\n- Improved capabilities detection.\n- `.WW` now shows if pica can use Web Workers or not.\n\n\n## [1.0.1] - 2014-09-25\n### Added\n- Enchanced API to allow pass destination buffer by reference.\n\n### Fixed\n- Added IE workarounds. Thanks to @noomorph.\n\n\n## [1.0.0] - 2014-09-24\n### Changed\n- First release.\n\n\n[9.0.1]: https://github.com/nodeca/pica/compare/9.0.0...9.0.1\n[9.0.0]: https://github.com/nodeca/pica/compare/8.0.0...9.0.0\n[8.0.0]: https://github.com/nodeca/pica/compare/7.1.1...8.0.0\n[7.1.1]: https://github.com/nodeca/pica/compare/7.1.0...7.1.1\n[7.1.0]: https://github.com/nodeca/pica/compare/7.0.0...7.1.0\n[7.0.0]: https://github.com/nodeca/pica/compare/6.1.1...7.0.0\n[6.1.1]: https://github.com/nodeca/pica/compare/6.1.0...6.1.1\n[6.1.0]: https://github.com/nodeca/pica/compare/6.0.0...6.1.0\n[6.0.0]: https://github.com/nodeca/pica/compare/5.3.0...6.0.0\n[5.3.0]: https://github.com/nodeca/pica/compare/5.2.0...5.3.0\n[5.2.0]: https://github.com/nodeca/pica/compare/5.1.1...5.2.0\n[5.1.1]: https://github.com/nodeca/pica/compare/5.1.0...5.1.1\n[5.1.0]: https://github.com/nodeca/pica/compare/5.0.1...5.1.0\n[5.0.1]: https://github.com/nodeca/pica/compare/5.0.0...5.0.1\n[5.0.0]: https://github.com/nodeca/pica/compare/4.2.0...5.0.0\n[4.2.0]: https://github.com/nodeca/pica/compare/4.1.1...4.2.0\n[4.1.1]: https://github.com/nodeca/pica/compare/4.1.0...4.1.1\n[4.1.0]: https://github.com/nodeca/pica/compare/4.0.2...4.1.0\n[4.0.2]: https://github.com/nodeca/pica/compare/4.0.1...4.0.2\n[4.0.1]: https://github.com/nodeca/pica/compare/4.0.0...4.0.1\n[4.0.0]: https://github.com/nodeca/pica/compare/3.0.6...4.0.0\n[3.0.6]: https://github.com/nodeca/pica/compare/3.0.5...3.0.6\n[3.0.5]: https://github.com/nodeca/pica/compare/3.0.4...3.0.5\n[3.0.4]: https://github.com/nodeca/pica/compare/3.0.3...3.0.4\n[3.0.3]: https://github.com/nodeca/pica/compare/3.0.2...3.0.3\n[3.0.2]: https://github.com/nodeca/pica/compare/3.0.1...3.0.2\n[3.0.1]: https://github.com/nodeca/pica/compare/3.0.0...3.0.1\n[3.0.0]: https://github.com/nodeca/pica/compare/2.0.8...3.0.0\n[2.0.8]: https://github.com/nodeca/pica/compare/2.0.7...2.0.8\n[2.0.7]: https://github.com/nodeca/pica/compare/2.0.6...2.0.7\n[2.0.6]: https://github.com/nodeca/pica/compare/2.0.5...2.0.6\n[2.0.5]: https://github.com/nodeca/pica/compare/2.0.4...2.0.5\n[2.0.4]: https://github.com/nodeca/pica/compare/2.0.3...2.0.4\n[2.0.3]: https://github.com/nodeca/pica/compare/2.0.2...2.0.3\n[2.0.2]: https://github.com/nodeca/pica/compare/2.0.1...2.0.2\n[2.0.1]: https://github.com/nodeca/pica/compare/2.0.0...2.0.1\n[2.0.0]: https://github.com/nodeca/pica/compare/1.1.1...2.0.0\n[1.1.1]: https://github.com/nodeca/pica/compare/1.1.0...1.1.1\n[1.1.0]: https://github.com/nodeca/pica/compare/1.0.8...1.1.0\n[1.0.8]: https://github.com/nodeca/pica/compare/1.0.7...1.0.8\n[1.0.7]: https://github.com/nodeca/pica/compare/1.0.6...1.0.7\n[1.0.6]: https://github.com/nodeca/pica/compare/1.0.5...1.0.6\n[1.0.5]: https://github.com/nodeca/pica/compare/1.0.4...1.0.5\n[1.0.4]: https://github.com/nodeca/pica/compare/1.0.3...1.0.4\n[1.0.3]: https://github.com/nodeca/pica/compare/1.0.2...1.0.3\n[1.0.2]: https://github.com/nodeca/pica/compare/1.0.1...1.0.2\n[1.0.1]: https://github.com/nodeca/pica/compare/1.0.0...1.0.1\n[1.0.0]: https://github.com/nodeca/pica/releases/tag/1.0.0\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "(The MIT License)\n\nCopyright (C) 2014-2017 by Vitaly Puzrin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.0185546875,
          "content": "pica - high quality image resize in browser\n===========================================\n\n[![CI](https://github.com/nodeca/pica/actions/workflows/ci.yml/badge.svg)](https://github.com/nodeca/pica/actions/workflows/ci.yml)\n[![NPM version](https://img.shields.io/npm/v/pica.svg)](https://www.npmjs.org/package/pica)\n\n> Resize images in browser without pixelation and reasonably fast.\n> Autoselect the best of available technologies: webworkers,\n> webassembly, createImageBitmap, pure JS.\n\n[__demo__](http://nodeca.github.io/pica/demo/)\n\n\nWith pica you can:\n\n- Reduce upload size for large images, saving upload time.\n- Saves server resources on image processing.\n- Generate thumbnails in browser.\n- ...\n\n**Note. If you need File/Blob resize (from form's file input), consider use\n[image-blob-reduce](https://github.com/nodeca/image-blob-reduce).** It has\nadditional machinery to process orientation, keep EXIF metadata and so on.\n\n\nMigration from pica v6 to pica v7\n---------------------------------\n\nMultiply `unsharpAmount` by 2, divide `unsharpThreshold` by 2, example:\n\n - `pica@6`: `pica.resize(a, b, { unsharpAmount: 80, unsharpThreshold: 2 })`\n - `pica@7`: `pica.resize(a, b, { unsharpAmount: 160, unsharpThreshold: 1 })`\n\n\nPrior to use\n------------\n\nHere is a short list of problems you can face:\n\n- Loading image:\n  - Due to JS security restrictions, you can process images\n    from the same domain or local files only. If you load images from\n    remote domain use proper `Access-Control-Allow-Origin` header.\n  - iOS has a memory limits for canvas elements, that may cause\n    problems in some cases, [more details](https://github.com/nodeca/pica/wiki/iOS-Memory-Limit).\n  - If your source data is jpeg image, it can be rotated. Consider use\n    [image-blob-reduce](https://github.com/nodeca/image-blob-reduce).\n- Saving image:\n  - Some ancient browsers do not support `canvas.toBlob()` method.\n    Use `pica.toBlob()`, it includes required shim.\n  - For jpeg source, it's a good idea to keep `exif` data. Consider use\n    [image-blob-reduce](https://github.com/nodeca/image-blob-reduce).\n- Quality\n  - JS canvas does not support access to info about gamma correction.\n    Bitmaps have 8 bits per channel. That causes some quality loss,\n    because with gamma correction precision could be 12 bits per\n    channel.\n  - Precision loss will not be noticeable for ordinary images like\n    kittens, selfies and so on. But we don't recommend this library\n    for resizing professional quality images.\n\n\nInstall\n-------\n\n```sh\nnpm install pica\n```\n\n\nUse\n---\n\n```js\nconst pica = require('pica')();\n\n// Resize from Canvas/Image to another Canvas\npica.resize(from, to)\n  .then(result => console.log('resize done!'));\n\n// Resize & convert to blob\npica.resize(from, to)\n  .then(result => pica.toBlob(result, 'image/jpeg', 0.90))\n  .then(blob => console.log('resized to canvas & created blob!'));\n```\n\n\nAPI\n---\n\n### new Pica(config)\n\nCreate resizer instance with given config (optional):\n\n- __tile__ - tile width/height. Images are processed by regions,\n  to restrict peak memory use. Default 1024.\n- __features__ - list of features to use. Default is\n  `[ 'js', 'wasm', 'ww' ]`. Can be `[ 'js', 'wasm', 'cib', 'ww' ]`\n  or `[ 'all' ]`. Note, `cib` is buggy in Chrome and not supports default\n  `mks2013` filter.\n- __idle__ - cache timeout, ms. Webworkers create is not fast.\n  This option allow reuse webworkers effectively. Default 2000.\n- __concurrency__ - max webworkers pool size. Default is autodetected\n  CPU count, but not more than 4.\n- __createCanvas__ - function which returns a new canvas, used internally\n   by pica.\n   Default returns a [\\<canvas\\> element](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API),\n   but this function could return an [OffscreenCanvas](https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas)\n   instead (to run pica in a Service Worker). Function signature: createCanvas(width: number, height: number): Canvas\n\n\n__Important!__ Latest browsers may support resize via [createImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/createImageBitmap).\nThis feature is supported (`cib`) but disabled by default and not recommended\nfor use. So:\n\n- `createImageBitmap()` is used for non-blocking image decode (when available,\n  without downscale).\n- It's resize feature is blocked by default pica config. Enable it only on your\n  own risk. Result with enabled `cib` will depend on your browser. Result\n  without `cib` will be predictable and good.\n\n\n### .resize(from, to, options) -> Promise\n\nResize image from one canvas (or image) to another. Sizes are\ntaken from source and destination objects.\n\n- __from__ - source, can be `Canvas`, `Image` or `ImageBitmap`.\n- __to__ - destination canvas, its size is supposed to be non-zero.\n- __options__ - quality (number) or object:\n  - __quality__ (deprecated, use `.filter` instead) - 0..3.\n  - __filter__ - filter name (Default - `mks2013`). See [resize_filter_info.js](https://github.com/nodeca/pica/blob/master/lib/mm_resize/resize_filter_info.js) for details. `mks2013` does both resize and sharpening, it's optimal and not recommended to change.\n  - __unsharpAmount__ - >=0. Default = `0` (off). Usually\n    value between 100 to 200 is good. Note, `mks2013` filter already does\n    optimal sharpening.\n  - __unsharpRadius__ - 0.5..2.0. By default it's not set. Radius of Gaussian\n    blur. If it is less than 0.5, Unsharp Mask is off. Big values are clamped\n    to 2.0.\n  - __unsharpThreshold__ - 0..255. Default = `0`. Threshold for\n    applying unsharp mask.\n  - __cancelToken__ - Promise instance. If defined, current\n    operation will be terminated on rejection.\n\nResult is Promise, resolved with `to` on success.\n\n__(!)__ If you need to process multiple images, do it\nsequentially to optimize CPU & memory use. Pica already knows\nhow to use multiple cores (if browser allows).\n\n\n### .toBlob(canvas, mimeType [, quality]) -> Promise\n\nConvenience method, similar to `canvas.toBlob()`, but with\npromise interface & polyfill for old browsers.\n\n\n### .resizeBuffer(options) -> Promise\n\nSupplementary method, not recommended for direct use. Resize\nUint8Array with raw RGBA bitmap (don't confuse with\njpeg / png  / ... binaries). It does not use tiles & webworkers.\nLeft for special cases when you really need to process raw\nbinary data (for example, if you decode jpeg files \"manually\").\n\n- __options:__\n  - __src__ - Uint8Array with source data.\n  - __width__ - src image width.\n  - __height__ - src image height.\n  - __toWidth__ - output width, >=0, in pixels.\n  - __toHeight__ - output height, >=0, in pixels.\n  - __quality__ (deprecated, use `.filter` instead) - 0..3.\n  - __filter__ - filter name (Default - `mks2013`). See [resize_filter_info.js](https://github.com/nodeca/pica/blob/master/lib/mm_resize/resize_filter_info.js) for details. `mks2013` does both resize and sharpening, it's optimal and not recommended to change.\n  - __unsharpAmount__ - >=0. Default = `0` (off). Usually\n    value between 100 to 200 is good. Note, `mks2013` filter already does\n    optimal sharpening.\n  - __unsharpRadius__ - 0.5..2.0. Radius of Gaussian blur.\n    If it is less than 0.5, Unsharp Mask is off. Big values are\n    clamped to 2.0.\n  - __unsharpThreshold__ - 0..255. Default = `0`. Threshold\n    for applying unsharp mask.\n  - __dest__ - Optional. Output buffer to write data,\n    if you don't wish `pica` to create new one.\n\nResult is Promise, resolved with resized rgba buffer.\n\n\n### What is \"quality\"\n\nPica has presets to adjust speed/quality ratio.\nSimply use `quality` option param:\n\n- 0 - Box filter, window 0.5px\n- 1 - Hamming filter, window 1.0px\n- 2 - Lanczos filter, window 2.0px\n- 3 - Lanczos filter, window 3.0px\n\nIn real world you will never need to change default (max)\nquality. All this variations were implemented to better\nunderstand resize math :)\n\n\n### Unsharp mask\n\nAfter scale down image can look a bit blured. It's good idea to sharpen it\na bit. Pica has built-in \"unsharp mask\" filter (off by default).\nSet `unsharpAmount` to positive number to activate the filter.\n\nFilter's parameters are similar to ones from Photoshop.\nWe recommend to start with `unsharpAmount = 160`,\n`unsharpRadius = 0.6` and `unsharpThreshold = 1`.\nThere is [a correspondence between UnsharpMask parameters\nin popular graphics software](https://github.com/nodeca/pica/wiki/Unsharp-mask-params-in-popular-softare).\n\n\nBrowser support\n----------------\n\nWe didn't have time to test all possible combinations, but in general:\n\n- Top level API should work in all browsers,\n  supporting [canvas](http://caniuse.com/#feat=canvas)\n  and [typed arrays](http://caniuse.com/#feat=typedarrays).\n- [Webworkers](http://caniuse.com/#feat=webworkers),\n  [WebAssembly](http://webassembly.org/) and\n  [createImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/createImageBitmap)\n  are not required, but they will be used if available.\n- If you plan to use only pure math core,\n  then [typed arrays support](http://caniuse.com/#feat=typedarrays) will be enough.\n\n__Note.__ Though you can run this package on `node.js`, browsers\nare the main target platform. On server side we recommend to use\n[sharp](https://github.com/lovell/sharp).\n\n\nReferences\n----------\n\nYou can find these links useful:\n\n- discussions on stackoverflow:\n  [1](http://stackoverflow.com/questions/943781/),\n  [2](http://stackoverflow.com/questions/18922880/),\n  [3](http://stackoverflow.com/questions/2303690/).\n- chromium skia sources:\n  [image_operations.cc](http://src.chromium.org/svn/trunk/src/skia/ext/image_operations.cc),\n  [convolver.cc](http://src.chromium.org/svn/trunk/src/skia/ext/convolver.cc).\n\n\npica for enterprise\n-------------------\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of pica and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-pica?utm_source=npm-pica&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 20.4033203125,
          "content": "'use strict';\n\n\nconst assign        = require('object-assign');\nconst webworkify    = require('webworkify');\n\n\nconst MathLib       = require('./lib/mathlib');\nconst Pool          = require('./lib/pool');\nconst utils         = require('./lib/utils');\nconst worker        = require('./lib/worker');\nconst createStages  = require('./lib/stepper');\nconst createRegions = require('./lib/tiler');\nconst filter_info   = require('./lib/mm_resize/resize_filter_info');\n\n\n// Deduplicate pools & limiters with the same configs\n// when user creates multiple pica instances.\nconst singletones = {};\n\n\nlet NEED_SAFARI_FIX = false;\ntry {\n  if (typeof navigator !== 'undefined' && navigator.userAgent) {\n    NEED_SAFARI_FIX = navigator.userAgent.indexOf('Safari') >= 0;\n  }\n} catch (e) {}\n\n\nlet concurrency = 1;\nif (typeof navigator !== 'undefined') {\n  concurrency = Math.min(navigator.hardwareConcurrency || 1, 4);\n}\n\n\nconst DEFAULT_PICA_OPTS = {\n  tile: 1024,\n  concurrency,\n  features: [ 'js', 'wasm', 'ww' ],\n  idle: 2000,\n  createCanvas:  function (width, height) {\n    let tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width  = width;\n    tmpCanvas.height = height;\n    return tmpCanvas;\n  }\n};\n\n\nconst DEFAULT_RESIZE_OPTS = {\n  filter:           'mks2013',\n  unsharpAmount:    0,\n  unsharpRadius:    0.0,\n  unsharpThreshold: 0\n};\n\nlet CAN_NEW_IMAGE_DATA            = false;\nlet CAN_CREATE_IMAGE_BITMAP       = false;\nlet CAN_USE_CANVAS_GET_IMAGE_DATA = false;\nlet CAN_USE_OFFSCREEN_CANVAS      = false;\nlet CAN_USE_CIB_REGION_FOR_IMAGE  = false;\n\n\nfunction workerFabric() {\n  return {\n    value: webworkify(worker),\n    destroy: function () {\n      this.value.terminate();\n\n      if (typeof window !== 'undefined') {\n        let url = window.URL || window.webkitURL || window.mozURL || window.msURL;\n        if (url && url.revokeObjectURL && this.value.objectURL) {\n          url.revokeObjectURL(this.value.objectURL);\n        }\n      }\n    }\n  };\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n// API methods\n\nfunction Pica(options) {\n  if (!(this instanceof Pica)) return new Pica(options);\n\n  this.options = assign({}, DEFAULT_PICA_OPTS, options || {});\n\n  let limiter_key = `lk_${this.options.concurrency}`;\n\n  // Share limiters to avoid multiple parallel workers when user creates\n  // multiple pica instances.\n  this.__limit = singletones[limiter_key] || utils.limiter(this.options.concurrency);\n\n  if (!singletones[limiter_key]) singletones[limiter_key] = this.__limit;\n\n  // List of supported features, according to options & browser/node.js\n  this.features = {\n    js:   false, // pure JS implementation, can be disabled for testing\n    wasm: false, // webassembly implementation for heavy functions\n    cib:  false, // resize via createImageBitmap (only FF at this moment)\n    ww:   false  // webworkers\n  };\n\n  this.__workersPool = null;\n\n  // Store requested features for webworkers\n  this.__requested_features = [];\n\n  this.__mathlib = null;\n}\n\n\nPica.prototype.init = function () {\n  if (this.__initPromise) return this.__initPromise;\n\n  // Test if we can create ImageData without canvas and memory copy\n  if (typeof ImageData !== 'undefined' && typeof Uint8ClampedArray !== 'undefined') {\n    try {\n      /* eslint-disable no-new */\n      new ImageData(new Uint8ClampedArray(400), 10, 10);\n      CAN_NEW_IMAGE_DATA = true;\n    } catch (__) {}\n  }\n\n  // ImageBitmap can be effective in 2 places:\n  //\n  // 1. Threaded jpeg unpack (basic)\n  // 2. Built-in resize (blocked due problem in chrome, see issue #89)\n  //\n  // For basic use we also need ImageBitmap wo support .close() method,\n  // see https://developer.mozilla.org/ru/docs/Web/API/ImageBitmap\n\n  if (typeof ImageBitmap !== 'undefined') {\n    if (ImageBitmap.prototype && ImageBitmap.prototype.close) {\n      CAN_CREATE_IMAGE_BITMAP = true;\n    } else {\n      this.debug('ImageBitmap does not support .close(), disabled');\n    }\n  }\n\n\n  let features = this.options.features.slice();\n\n  if (features.indexOf('all') >= 0) {\n    features = [ 'cib', 'wasm', 'js', 'ww' ];\n  }\n\n  this.__requested_features = features;\n\n  this.__mathlib = new MathLib(features);\n\n  // Check WebWorker support if requested\n  if (features.indexOf('ww') >= 0) {\n    if ((typeof window !== 'undefined') && ('Worker' in window)) {\n      // IE <= 11 don't allow to create webworkers from string. We should check it.\n      // https://connect.microsoft.com/IE/feedback/details/801810/web-workers-from-blob-urls-in-ie-10-and-11\n      try {\n        let wkr = require('webworkify')(function () {});\n        wkr.terminate();\n        this.features.ww   = true;\n\n        // pool uniqueness depends on pool config + webworker config\n        let wpool_key = `wp_${JSON.stringify(this.options)}`;\n\n        if (singletones[wpool_key]) {\n          this.__workersPool = singletones[wpool_key];\n        } else {\n          this.__workersPool = new Pool(workerFabric, this.options.idle);\n          singletones[wpool_key] = this.__workersPool;\n        }\n      } catch (__) {}\n    }\n  }\n\n  let initMath = this.__mathlib.init().then(mathlib => {\n    // Copy detected features\n    assign(this.features, mathlib.features);\n  });\n\n  let checkCibResize;\n\n  if (!CAN_CREATE_IMAGE_BITMAP) {\n    checkCibResize = Promise.resolve(false);\n  } else {\n    checkCibResize = utils.cib_support(this.options.createCanvas).then(status => {\n      if (this.features.cib && features.indexOf('cib') < 0) {\n        this.debug('createImageBitmap() resize supported, but disabled by config');\n        return;\n      }\n\n      if (features.indexOf('cib') >= 0) this.features.cib = status;\n    });\n  }\n\n  CAN_USE_CANVAS_GET_IMAGE_DATA = utils.can_use_canvas(this.options.createCanvas);\n\n  let checkOffscreenCanvas;\n\n  if (CAN_CREATE_IMAGE_BITMAP && CAN_NEW_IMAGE_DATA && features.indexOf('ww') !== -1) {\n    checkOffscreenCanvas = utils.worker_offscreen_canvas_support();\n  } else {\n    checkOffscreenCanvas = Promise.resolve(false);\n  }\n\n  checkOffscreenCanvas = checkOffscreenCanvas.then(\n    result => { CAN_USE_OFFSCREEN_CANVAS = result; }\n  );\n\n  // we use createImageBitmap to crop image data and pass it to workers,\n  // so need to check whether function works correctly;\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=1220671\n  let checkCibRegion = utils.cib_can_use_region().then(\n    result => { CAN_USE_CIB_REGION_FOR_IMAGE = result; }\n  );\n\n  // Init math lib. That's async because can load some\n  this.__initPromise = Promise.all([\n    initMath, checkCibResize, checkOffscreenCanvas, checkCibRegion\n  ]).then(() => this);\n\n  return this.__initPromise;\n};\n\n\n// Call resizer in webworker or locally, depending on config\nPica.prototype.__invokeResize = function (tileOpts, opts) {\n  // Share cache between calls:\n  //\n  // - wasm instance\n  // - wasm memory object\n  //\n  opts.__mathCache = opts.__mathCache || {};\n\n  return Promise.resolve().then(() => {\n    if (!this.features.ww) {\n      // not possible to have ImageBitmap here if user disabled WW\n      return { data: this.__mathlib.resizeAndUnsharp(tileOpts, opts.__mathCache) };\n    }\n\n    return new Promise((resolve, reject) => {\n      let w = this.__workersPool.acquire();\n\n      if (opts.cancelToken) opts.cancelToken.catch(err => reject(err));\n\n      w.value.onmessage = ev => {\n        w.release();\n\n        if (ev.data.err) reject(ev.data.err);\n        else resolve(ev.data);\n      };\n\n      let transfer = [];\n\n      if (tileOpts.src) transfer.push(tileOpts.src.buffer);\n      if (tileOpts.srcBitmap) transfer.push(tileOpts.srcBitmap);\n\n      w.value.postMessage({\n        opts: tileOpts,\n        features: this.__requested_features,\n        preload: {\n          wasm_nodule: this.__mathlib.__\n        }\n      }, transfer);\n    });\n  });\n};\n\n\n// this function can return promise if createImageBitmap is used\nPica.prototype.__extractTileData = function (tile, from, opts, stageEnv, extractTo) {\n  if (this.features.ww && CAN_USE_OFFSCREEN_CANVAS &&\n      // createImageBitmap doesn't work for images (Image, ImageBitmap) with Exif orientation in Chrome,\n      // can use canvas because canvas doesn't have orientation;\n      // see https://bugs.chromium.org/p/chromium/issues/detail?id=1220671\n      (utils.isCanvas(from) || CAN_USE_CIB_REGION_FOR_IMAGE)) {\n    this.debug('Create tile for OffscreenCanvas');\n\n    return createImageBitmap(stageEnv.srcImageBitmap || from, tile.x, tile.y, tile.width, tile.height)\n      .then(bitmap => {\n        extractTo.srcBitmap = bitmap;\n        return extractTo;\n      });\n  }\n\n  // Extract tile RGBA buffer, depending on input type\n  if (utils.isCanvas(from)) {\n    if (!stageEnv.srcCtx) stageEnv.srcCtx = from.getContext('2d');\n\n    // If input is Canvas - extract region data directly\n    this.debug('Get tile pixel data');\n    extractTo.src = stageEnv.srcCtx.getImageData(tile.x, tile.y, tile.width, tile.height).data;\n    return extractTo;\n  }\n\n  // If input is Image or decoded to ImageBitmap,\n  // draw region to temporary canvas and extract data from it\n  //\n  // Note! Attempt to reuse this canvas causes significant slowdown in chrome\n  //\n  this.debug('Draw tile imageBitmap/image to temporary canvas');\n\n  let tmpCanvas = this.options.createCanvas(tile.width, tile.height);\n\n  let tmpCtx = tmpCanvas.getContext('2d');\n  tmpCtx.globalCompositeOperation = 'copy';\n  tmpCtx.drawImage(stageEnv.srcImageBitmap || from,\n    tile.x, tile.y, tile.width, tile.height,\n    0, 0, tile.width, tile.height);\n\n  this.debug('Get tile pixel data');\n\n  extractTo.src = tmpCtx.getImageData(0, 0, tile.width, tile.height).data;\n\n  // Safari 12 workaround\n  // https://github.com/nodeca/pica/issues/199\n  tmpCanvas.width = tmpCanvas.height = 0;\n\n  return extractTo;\n};\n\n\nPica.prototype.__landTileData = function (tile, result, stageEnv) {\n  let toImageData;\n\n  this.debug('Convert raw rgba tile result to ImageData');\n\n  if (result.bitmap) {\n    stageEnv.toCtx.drawImage(result.bitmap, tile.toX, tile.toY);\n    return null;\n  }\n\n  if (CAN_NEW_IMAGE_DATA) {\n    // this branch is for modern browsers\n    // If `new ImageData()` & Uint8ClampedArray suported\n    toImageData = new ImageData(new Uint8ClampedArray(result.data), tile.toWidth, tile.toHeight);\n  } else {\n    // fallback for `node-canvas` and old browsers\n    // (IE11 has ImageData but does not support `new ImageData()`)\n    toImageData = stageEnv.toCtx.createImageData(tile.toWidth, tile.toHeight);\n\n    if (toImageData.data.set) {\n      toImageData.data.set(result.data);\n    } else {\n      // IE9 don't have `.set()`\n      for (let i = toImageData.data.length - 1; i >= 0; i--) {\n        toImageData.data[i] = result.data[i];\n      }\n    }\n  }\n\n  this.debug('Draw tile');\n\n  if (NEED_SAFARI_FIX) {\n    // Safari draws thin white stripes between tiles without this fix\n    stageEnv.toCtx.putImageData(toImageData, tile.toX, tile.toY,\n      tile.toInnerX - tile.toX, tile.toInnerY - tile.toY,\n      tile.toInnerWidth + 1e-5, tile.toInnerHeight + 1e-5);\n  } else {\n    stageEnv.toCtx.putImageData(toImageData, tile.toX, tile.toY,\n      tile.toInnerX - tile.toX, tile.toInnerY - tile.toY,\n      tile.toInnerWidth, tile.toInnerHeight);\n  }\n\n  return null;\n};\n\n\nPica.prototype.__tileAndResize = function (from, to, opts) {\n  let stageEnv = {\n    srcCtx: null,\n    srcImageBitmap: null,\n    isImageBitmapReused: false,\n    toCtx: null\n  };\n\n  const processTile = (tile => this.__limit(() => {\n    if (opts.canceled) return opts.cancelToken;\n\n    let tileOpts = {\n      width:            tile.width,\n      height:           tile.height,\n      toWidth:          tile.toWidth,\n      toHeight:         tile.toHeight,\n      scaleX:           tile.scaleX,\n      scaleY:           tile.scaleY,\n      offsetX:          tile.offsetX,\n      offsetY:          tile.offsetY,\n      filter:           opts.filter,\n      unsharpAmount:    opts.unsharpAmount,\n      unsharpRadius:    opts.unsharpRadius,\n      unsharpThreshold: opts.unsharpThreshold\n    };\n\n    this.debug('Invoke resize math');\n\n    return Promise.resolve(tileOpts)\n      .then(tileOpts => this.__extractTileData(tile, from, opts, stageEnv, tileOpts))\n      .then(tileOpts => {\n        this.debug('Invoke resize math');\n        return this.__invokeResize(tileOpts, opts);\n      })\n      .then(result => {\n        if (opts.canceled) return opts.cancelToken;\n        stageEnv.srcImageData = null;\n        return this.__landTileData(tile, result, stageEnv);\n      });\n  }));\n\n\n  // Need to normalize data source first. It can be canvas or image.\n  // If image - try to decode in background if possible\n  return Promise.resolve().then(() => {\n    stageEnv.toCtx = to.getContext('2d');\n\n    if (utils.isCanvas(from)) return null;\n\n    if (utils.isImageBitmap(from)) {\n      stageEnv.srcImageBitmap = from;\n      stageEnv.isImageBitmapReused = true;\n      return null;\n    }\n\n    if (utils.isImage(from)) {\n      // try do decode image in background for faster next operations;\n      // if we're using offscreen canvas, cib is called per tile, so not needed here\n      if (!CAN_CREATE_IMAGE_BITMAP) return null;\n\n      this.debug('Decode image via createImageBitmap');\n\n      return createImageBitmap(from)\n        .then(imageBitmap => {\n          stageEnv.srcImageBitmap = imageBitmap;\n        })\n        // Suppress error to use fallback, if method fails\n        // https://github.com/nodeca/pica/issues/190\n        /* eslint-disable no-unused-vars */\n        .catch(e => null);\n    }\n\n    throw new Error('Pica: \".from\" should be Image, Canvas or ImageBitmap');\n  })\n  .then(() => {\n    if (opts.canceled) return opts.cancelToken;\n\n    this.debug('Calculate tiles');\n\n    //\n    // Here we are with \"normalized\" source,\n    // follow to tiling\n    //\n\n    let regions = createRegions({\n      width:          opts.width,\n      height:         opts.height,\n      srcTileSize:    this.options.tile,\n      toWidth:        opts.toWidth,\n      toHeight:       opts.toHeight,\n      destTileBorder: opts.__destTileBorder\n    });\n\n    let jobs = regions.map(tile => processTile(tile));\n\n    function cleanup(stageEnv) {\n      if (stageEnv.srcImageBitmap) {\n        if (!stageEnv.isImageBitmapReused) stageEnv.srcImageBitmap.close();\n        stageEnv.srcImageBitmap = null;\n      }\n    }\n\n    this.debug('Process tiles');\n\n    return Promise.all(jobs).then(\n      () => {\n        this.debug('Finished!');\n        cleanup(stageEnv); return to;\n      },\n      err => { cleanup(stageEnv); throw err; }\n    );\n  });\n};\n\n\nPica.prototype.__processStages = function (stages, from, to, opts) {\n  if (opts.canceled) return opts.cancelToken;\n\n  let [ toWidth, toHeight ] = stages.shift();\n\n  let isLastStage = (stages.length === 0);\n\n  // Optimization for legacy filters -\n  // only use user-defined quality for the last stage,\n  // use simpler (Hamming) filter for the first stages where\n  // scale factor is large enough (more than 2-3)\n  //\n  // For advanced filters (mks2013 and custom) - skip optimization,\n  // because need to apply sharpening every time\n  let filter;\n\n  if (isLastStage || filter_info.q2f.indexOf(opts.filter) < 0) filter = opts.filter;\n  else if (opts.filter === 'box') filter = 'box';\n  else filter = 'hamming';\n\n  opts = assign({}, opts, {\n    toWidth,\n    toHeight,\n    filter\n  });\n\n  let tmpCanvas;\n\n  if (!isLastStage) {\n    // create temporary canvas\n    tmpCanvas = this.options.createCanvas(toWidth, toHeight);\n  }\n\n  return this.__tileAndResize(from, (isLastStage ? to : tmpCanvas), opts)\n    .then(() => {\n      if (isLastStage) return to;\n\n      opts.width = toWidth;\n      opts.height = toHeight;\n      return this.__processStages(stages, tmpCanvas, to, opts);\n    })\n    .then(res => {\n      if (tmpCanvas) {\n        // Safari 12 workaround\n        // https://github.com/nodeca/pica/issues/199\n        tmpCanvas.width = tmpCanvas.height = 0;\n      }\n\n      return res;\n    });\n};\n\n\nPica.prototype.__resizeViaCreateImageBitmap = function (from, to, opts) {\n  let toCtx = to.getContext('2d');\n\n  this.debug('Resize via createImageBitmap()');\n\n  return createImageBitmap(from, {\n    resizeWidth:   opts.toWidth,\n    resizeHeight:  opts.toHeight,\n    resizeQuality: utils.cib_quality_name(filter_info.f2q[opts.filter])\n  })\n  .then(imageBitmap => {\n    if (opts.canceled) return opts.cancelToken;\n\n    // if no unsharp - draw directly to output canvas\n    if (!opts.unsharpAmount) {\n      toCtx.drawImage(imageBitmap, 0, 0);\n      imageBitmap.close();\n      toCtx = null;\n\n      this.debug('Finished!');\n\n      return to;\n    }\n\n    this.debug('Unsharp result');\n\n    let tmpCanvas = this.options.createCanvas(opts.toWidth, opts.toHeight);\n\n    let tmpCtx = tmpCanvas.getContext('2d');\n\n    tmpCtx.drawImage(imageBitmap, 0, 0);\n    imageBitmap.close();\n\n    let iData = tmpCtx.getImageData(0, 0, opts.toWidth, opts.toHeight);\n\n    this.__mathlib.unsharp_mask(\n      iData.data,\n      opts.toWidth,\n      opts.toHeight,\n      opts.unsharpAmount,\n      opts.unsharpRadius,\n      opts.unsharpThreshold\n    );\n\n    toCtx.putImageData(iData, 0, 0);\n\n    // Safari 12 workaround\n    // https://github.com/nodeca/pica/issues/199\n    tmpCanvas.width = tmpCanvas.height = 0;\n\n    iData = tmpCtx = tmpCanvas = toCtx = null;\n\n    this.debug('Finished!');\n\n    return to;\n  });\n};\n\n\nPica.prototype.resize = function (from, to, options) {\n  this.debug('Start resize...');\n\n\n  let opts = assign({}, DEFAULT_RESIZE_OPTS);\n\n  if (!isNaN(options)) {\n    opts = assign(opts, { quality: options });\n  } else if (options) {\n    opts = assign(opts, options);\n  }\n\n  opts.toWidth  = to.width;\n  opts.toHeight = to.height;\n  opts.width    = from.naturalWidth || from.width;\n  opts.height   = from.naturalHeight || from.height;\n\n  // Legacy `.quality` option\n  if (Object.prototype.hasOwnProperty.call(opts, 'quality')) {\n    if (opts.quality < 0 || opts.quality > 3) {\n      throw new Error(`Pica: .quality should be [0..3], got ${opts.quality}`);\n    }\n    opts.filter = filter_info.q2f[opts.quality];\n  }\n\n  // Prevent stepper from infinite loop\n  if (to.width === 0 || to.height === 0) {\n    return Promise.reject(new Error(`Invalid output size: ${to.width}x${to.height}`));\n  }\n\n  if (opts.unsharpRadius > 2) opts.unsharpRadius = 2;\n\n  opts.canceled = false;\n\n  if (opts.cancelToken) {\n    // Wrap cancelToken to avoid successive resolve & set flag\n    opts.cancelToken = opts.cancelToken.then(\n      data => { opts.canceled = true; throw data; },\n      err  => { opts.canceled = true; throw err; }\n    );\n  }\n\n  let DEST_TILE_BORDER = 3; // Max possible filter window size\n  opts.__destTileBorder = Math.ceil(Math.max(DEST_TILE_BORDER, 2.5 * opts.unsharpRadius|0));\n\n  return this.init().then(() => {\n    if (opts.canceled) return opts.cancelToken;\n\n    // if createImageBitmap supports resize, just do it and return\n    if (this.features.cib) {\n      if (filter_info.q2f.indexOf(opts.filter) >= 0) {\n        return this.__resizeViaCreateImageBitmap(from, to, opts);\n      }\n\n      this.debug('cib is enabled, but not supports provided filter, fallback to manual math');\n    }\n\n    if (!CAN_USE_CANVAS_GET_IMAGE_DATA) {\n      let err = new Error('Pica: cannot use getImageData on canvas, ' +\n                          \"make sure fingerprinting protection isn't enabled\");\n      err.code = 'ERR_GET_IMAGE_DATA';\n      throw err;\n    }\n\n    //\n    // No easy way, let's resize manually via arrays\n    //\n\n    let stages = createStages(\n      opts.width,\n      opts.height,\n      opts.toWidth,\n      opts.toHeight,\n      this.options.tile,\n      opts.__destTileBorder\n    );\n\n    return this.__processStages(stages, from, to, opts);\n  });\n};\n\n// RGBA buffer resize\n//\nPica.prototype.resizeBuffer = function (options) {\n  const opts = assign({}, DEFAULT_RESIZE_OPTS, options);\n\n  // Legacy `.quality` option\n  if (Object.prototype.hasOwnProperty.call(opts, 'quality')) {\n    if (opts.quality < 0 || opts.quality > 3) {\n      throw new Error(`Pica: .quality should be [0..3], got ${opts.quality}`);\n    }\n    opts.filter = filter_info.q2f[opts.quality];\n  }\n\n  return this.init()\n    .then(() => this.__mathlib.resizeAndUnsharp(opts));\n};\n\n\nPica.prototype.toBlob = function (canvas, mimeType, quality) {\n  mimeType = mimeType || 'image/png';\n\n  return new Promise(resolve => {\n    if (canvas.toBlob) {\n      canvas.toBlob(blob => resolve(blob), mimeType, quality);\n      return;\n    }\n\n    if (canvas.convertToBlob) {\n      resolve(canvas.convertToBlob({\n        type: mimeType,\n        quality\n      }));\n      return;\n    }\n\n    // Fallback for old browsers\n    const asString = atob(canvas.toDataURL(mimeType, quality).split(',')[1]);\n    const len      = asString.length;\n    const asBuffer = new Uint8Array(len);\n\n    for (let i = 0; i < len; i++) {\n      asBuffer[i] = asString.charCodeAt(i);\n    }\n\n    resolve(new Blob([ asBuffer ], { type: mimeType }));\n  });\n};\n\n\nPica.prototype.debug = function () {};\n\n\nmodule.exports = Pica;\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.5048828125,
          "content": "{\n  \"name\": \"pica\",\n  \"description\": \"High quality image resize in browser.\",\n  \"version\": \"9.0.1\",\n  \"keywords\": [\n    \"resize\",\n    \"scale\",\n    \"image\",\n    \"lanczos\",\n    \"canvas\"\n  ],\n  \"main\": \"dist/pica.js\",\n  \"homepage\": \"https://github.com/nodeca/pica\",\n  \"license\": \"MIT\",\n  \"repository\": \"nodeca/pica\",\n  \"scripts\": {\n    \"test\": \"npm run lint && electron-mocha --renderer ./test\",\n    \"lint\": \"eslint .\",\n    \"gh-pages\": \"gh-pages -d . -s {demo,dist}/* -f\",\n    \"browserify\": \"browserify -r ./index.js -s pica -t [ babelify --presets [ @babel/preset-env ] ] -p [ browserify-header --file support/header.js ] | derequire > dist/pica.js\",\n    \"minify\": \"terser dist/pica.js -c -m > dist/pica.min.js\",\n    \"wasm\": \"docker run --rm -v $(pwd):/src -u $(id -u):$(id -g) emscripten/emsdk:2.0.20 ./support/compile-emsdk.sh\",\n    \"build\": \"npm run browserify && npm run minify\",\n    \"prepublishOnly\": \"npm run gh-pages\"\n  },\n  \"files\": [\n    \"dist/\",\n    \"lib/\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"glur\": \"^1.1.2\",\n    \"multimath\": \"^2.0.0\",\n    \"object-assign\": \"^4.1.1\",\n    \"webworkify\": \"^1.5.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.1.2\",\n    \"@babel/preset-env\": \"^7.1.0\",\n    \"babelify\": \"^10.0.0\",\n    \"benchmark\": \"^2.1.0\",\n    \"browserify\": \"^17.0.0\",\n    \"browserify-header\": \"^1.0.1\",\n    \"derequire\": \"^2.1.0\",\n    \"electron\": \"^16.0.4\",\n    \"electron-mocha\": \"^11.0.2\",\n    \"eslint\": \"^8.3.0\",\n    \"gh-pages\": \"^3.1.0\",\n    \"mocha\": \"^9.1.3\",\n    \"pixelmatch\": \"^5.0.2\",\n    \"terser\": \"^5.10.0\"\n  }\n}\n"
        },
        {
          "name": "support",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}