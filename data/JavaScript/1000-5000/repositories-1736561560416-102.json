{
  "metadata": {
    "timestamp": 1736561560416,
    "page": 102,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "callmecavs/bricks.js",
      "stars": 4673,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.02734375,
          "content": "{\n  \"extends\": \"standard\"\n}\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0390625,
          "content": ".DS_Store\ndist\nnode_modules\n*.log\n*.map\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.009765625,
          "content": "*\n!dist/*\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.298828125,
          "content": "# Conduct\n\nFollow the [golden rule](https://en.wikipedia.org/wiki/Golden_Rule). Be respectful, even to those that are disrespectful. Please understand that no one is getting paid to develop/maintain open source software.\n\n# Issues\n\nMost can be solved by **reading the entire README**. I know it's long, but I promise it's thorough.\n\nBefore opening an issue, please review:\n\n* [Getting Started](https://github.com/callmecavs/bricks.js#getting-started)\n* [Example Code](https://github.com/callmecavs/bricks.js/tree/master/examples)\n\nIn the event that something is still broken, **include the following with a description of your issue**:\n\n1. Browser Version\n2. Browser Console (screenshot preferred)\n3. Relevant HTML/JS (code block preferred)\n\nIssues that don't will take longer to address, and may be outright closed.\n\n# Pull Requests\n\nContributions are encouraged, especially if they address [open issues](https://github.com/callmecavs/bricks.js/issues?q=is%3Aopen+is%3Aissue). Please review the existing source code, and try to match the code style. Be prepared to edit your pull request.\n\nIn regards to additions, enhancements, and API changes... I'm open to new ideas, but these may be declined if I don't think they align with the direction I'd like to project to go in. Please be understanding of that, and consider forking.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.5673828125,
          "content": "# Bricks.js\n\n[![Bricks.js on NPM](https://img.shields.io/npm/v/bricks.js.svg?style=flat-square)](https://www.npmjs.com/package/bricks.js) [![Bricks.js Downloads on NPM](https://img.shields.io/npm/dm/bricks.js.svg?style=flat-square)](https://www.npmjs.com/package/bricks.js) [![Standard JavaScript Style](https://img.shields.io/badge/code_style-standard-brightgreen.svg?style=flat-square)](http://standardjs.com/)\n\n> Momma said, \"Stay patient.\" - Bricks, DJ Carnage\n\nBut you don't need to, because Bricks is **a blazing fast masonry layout generator for fixed width elements**.\n\n* [Demo Page](http://callmecavs.com/bricks.js/)\n\n## Getting Started\n\nFollow these steps:\n\n1. [Install](#install)\n2. [Instantiate](#instantiate)\n3. [Review Parameters](#parameters)\n4. [Review API / Events](#api--events)\n5. **[Review Example Code](https://github.com/callmecavs/bricks.js/tree/master/examples)**\n\n## Install\n\nBricks was developed with a modern JavaScript workflow in mind. To use it, it's recommended you have a build system in place that can transpile ES6, and bundle modules. For a minimal boilerplate that does so, check out [outset](https://github.com/callmecavs/outset).\n\nUsing NPM, install Bricks.js, and add it to your `package.json` dependencies.\n\n```\n$ npm install bricks.js --save\n```\n\nRefer to the [releases](https://github.com/callmecavs/bricks.js/releases) page for version specific information.\n\n## Instantiate\n\nSimply import Bricks, then instantiate it.\n\nIt's recommended that you **assign your Bricks instance to a variable**. Using your instance, you can:\n\n* enable and disable the resize handler\n* add and remove event handlers\n* accommodate dynamically added elements\n\n```es6\n// import Bricks\nimport Bricks from 'bricks.js'\n\n// create an instance\nconst instance = Bricks({\n  // ...\n})\n```\n\nParameters passed to the constructor are detailed below.\n\n## Parameters\n\nNote that all parameters, _except `position`_, are **required**:\n\n* A [container](#container) (node or CSS selector)\n* A [packed](#packed) attribute\n* A [sizes](#sizes) array\n* A [position](#position) boolean (defaulting to `true`)\n\n### container\n\nA node, or CSS selector, that represents the grid wrapper. The _direct children_ of this element must be the grid items.\n\n```es6\n// passing a node\n\nconst instance = Bricks({\n  container: node\n})\n\n// passing a selector (document.querySelector is used to get the node)\n\nconst instance = Bricks({\n  container: '.selector'\n})\n```\n\n### packed\n\nAn attribute added to the grid items after they're positioned within the grid. If the attribute is not prefixed with `data-`, it will be added.\n\n```es6\n// prefixed\n\nconst instance = Bricks({\n  packed: 'data-packed'\n})\n\n// unprefixed\n\nconst instance = Bricks({\n  // becomes: 'data-packed'\n  packed: 'packed'\n})\n```\n\nNote that Bricks uses this attribute internally to avoiding unnecessarily repositioning grid items already in place. It's best to avoid manipulating it.\n\n### sizes\n\nAn array of objects describing the grid's properties at different breakpoints.\n\nWhen defining your sizes, note the following:\n\n* Sizes must be listed **smallest to largest**\n* Sizes must use **`min-width` media queries (any unit)**\n* Width of the grid items at each breakpoint **should be set in your CSS (in px)**\n* The size without the `mq` property is assumed to be your **smallest breakpoint, and must appear first**\n\n```es6\n// mq      - the minimum viewport width (String CSS unit: em, px, rem)\n// columns - the number of vertical columns\n// gutter  - the space (in px) between the columns and grid items\n\nconst sizes = [\n  { columns: 2, gutter: 10 },\n  { mq: '768px', columns: 3, gutter: 25 },\n  { mq: '1024px', columns: 4, gutter: 50 }\n]\n\nconst instance = Bricks({\n  sizes: sizes\n})\n```\n\n### position\n\nA boolean, defaulting to `true`, indicating that the grid items should be positioned using the `top` and `left` CSS properties.\n\nIf set to `false`, the grid items will be positioned using the `transform` CSS property.\n\n```es6\n// default ('true')\n// grid items are positioned via the 'top' and 'left' properties\n\nconst instance = Bricks({\n  position: true\n})\n\n// explicitly 'false' (not any falsy value!)\n// grid items are positioned via the 'transform' property\n\nconst instance = Bricks({\n  position: false\n})\n```\n\nPositioning using `transform` is done via `translate3d` for optimal performance. Coupled with a CSS `transition`, this option allows for smoothly animating the grid items into place.\n\n## API / Events\n\nBricks instances are extended with [Knot.js](https://github.com/callmecavs/knot.js), a browser-based event emitter. Use the event emitter syntax to add and remove handlers for the events emitted by the API methods. Review the emitter syntax [here](https://github.com/callmecavs/knot.js#api).\n\nBricks exposes the following methods, and corresponding events:\n\n* [pack](#pack)\n* [update](#update)\n* [resize](#resize)\n\nNote that **all methods, including those from the event emitter, are chainable**.\n\n### .pack()\n\nUsed to pack _all elements_ within the container.\n\n```es6\n// pack ALL grid items\ninstance.pack()\n\n// 'pack' is emitted when ALL items have been packed\ninstance.on('pack', () => {\n  // ...\n})\n```\n\nNote that it should be called when creating your instance, to pack the initial items.\n\n### .update()\n\nUsed to pack _elements without the `packed` attribute_ within the container.\n\n```es6\n// pack NEW grid items\ninstance.update()\n\n// 'update' is emitted when NEW items have been packed\ninstance.on('update', () => {\n  // ...\n})\n```\n\nNote that this is the **preferred method for handling dynamically added items**, because it will only operate on items that have not yet been packed (i.e. don't have the `packed` attribute).\n\n### .resize(flag)\n\nUsed to add or remove the `resize` event handler. It's recommended that you add the resize handler when you create your instance.\n\n```es6\n// add or remove the resize handler\ninstance\n  .resize(true)       // 'true' adds it\n  .resize(false)      // 'false' removes it\n\n// 'resize' is emitted when resizing has resulted in a new matching 'size' object\ninstance.on('resize', size => {\n  // 'size' is the newly matching size object\n  // ...\n})\n```\n\nNote that the resize handler fires the `pack` method **if the resulting screen size matches a size parameter other than the current one**. In this case, the `pack` event will be fired immediately before the `resize` event. Use the `resize` event **only for breakpoint specific code, not code meant for when the grid has been packed**.\n\n## Browser Support\n\nBricks depends on the following browser APIs:\n\n* ES5 array methods: [forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach), [map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), [indexOf](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)\n* [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame)\n* [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia)\n\nConsequently, it supports the following natively:\n\n* Chrome 24+\n* Firefox 23+\n* Safari 6.1+\n* Opera 15+\n* IE 10+\n* iOS Safari 7.1+\n* Android Browser 4.4+\n\nTo support older browsers, consider including [polyfills/shims](https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills) for the APIs listed above. There are **no plans to include any in the library**, in the interest of file size.\n\n## Colophon\n\n* Site Design: [Chris Allen](https://dribbble.com/cp_allen)\n\n## License\n\n[MIT](https://opensource.org/licenses/MIT). © 2017 Michael Cavalea\n\n[![Built With Love](http://forthebadge.com/images/badges/built-with-love.svg)](http://forthebadge.com)\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.2353515625,
          "content": "{\n  \"name\":        \"bricks.js\",\n  \"description\": \"A blazing fast masonry layout generator for fixed width elements.\",\n\n  \"main\":        \"dist/bricks.js\",\n  \"module\":      \"dist/bricks.module.js\",\n  \"jsnext:main\": \"dist/bricks.module.js\",\n\n  \"version\": \"1.8.0\",\n  \"license\": \"MIT\",\n\n  \"repository\": \"callmecavs/bricks.js\",\n\n  \"author\": {\n    \"name\":  \"Michael Cavalea\",\n    \"email\": \"callmecavs@gmail.com\",\n    \"url\":   \"http://callmecavs.com/\"\n  },\n\n  \"scripts\": {\n    \"build\":      \"rollup -c\",\n    \"dev\":        \"rollup -c -w -m inline\",\n    \"lint\":       \"eslint src\",\n    \"prebuild\":   \"rm -rf dist\",\n    \"prepublish\": \"npm run test\",\n    \"pretest\":    \"npm run build\",\n    \"server\":     \"python -m SimpleHTTPServer 3000\",\n    \"test\":       \"npm run lint\"\n  },\n\n  \"keywords\": [\n    \"grid\",\n    \"masonry\",\n    \"layout\",\n    \"packing\"\n  ],\n\n  \"dependencies\": {\n    \"knot.js\": \"^1.1.5\"\n  },\n\n  \"devDependencies\": {\n    \"babel-eslint\": \"^7.1.1\",\n    \"babel-preset-env\": \"^1.2.2\",\n    \"eslint\": \"^3.13.0\",\n    \"eslint-config-standard\": \"^6.2.1\",\n    \"eslint-plugin-promise\": \"^3.4.0\",\n    \"eslint-plugin-standard\": \"^2.0.1\",\n    \"rollup\": \"^0.41.1\",\n    \"rollup-plugin-babel\": \"^2.7.1\",\n    \"rollup-plugin-node-resolve\": \"^2.0.0\",\n    \"rollup-watch\": \"^3.2.2\"\n  }\n}\n"
        },
        {
          "name": "rollup.config.js",
          "type": "blob",
          "size": 0.595703125,
          "content": "import babel from 'rollup-plugin-babel'\nimport resolve from 'rollup-plugin-node-resolve'\n\nconst info = require('./package.json')\n\nconst config = {\n  entry: 'src/bricks.js',\n  plugins: [\n    resolve(),\n    babel({\n      babelrc: false,\n      presets: [\n        [\n          'env', {\n            modules: false,\n            targets: {\n              browsers: ['last 2 versions']\n            }\n          }\n        ]\n      ]\n    })\n  ],\n  targets: [\n    {\n      dest: info.main,\n      format: 'umd',\n      moduleName: 'Bricks'\n    }, {\n      dest: info.module,\n      format: 'es'\n    }\n  ]\n}\n\nexport default config\n"
        },
        {
          "name": "site",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}