{
  "metadata": {
    "timestamp": 1736561906610,
    "page": 598,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "electerious/basicScroll",
      "stars": 3624,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.015625,
          "content": "dist/**/* binary"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0400390625,
          "content": "node_modules/\nyarn.lock\npackage-lock.json"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.974609375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/) and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n## [3.0.4] - 2021-01-17\n\n### Changed\n\n- Updated dependencies\n\n## [3.0.3] - 2020-03-20\n\n### Changed\n\n- Updated dependencies\n- Updated documentation\n\n## [3.0.2] - 2019-02-23\n\n### Changed\n\n- Replace `gulp` and `basicTasks` with custom build process\n\n## [3.0.1] - 2018-12-20\n\n### Added\n\n- Support SSR by checking if `window` exists (#32)\n\n## [3.0.0] - 2018-10-03\n\n### Added\n\n- Reduced the size of the minified version by almost 50%\n- `Object.assign` must be supported by the browser\n\n### Fixed\n\n- \"Missing property `from`\" error (#21)\n\n## [2.1.1] - 2018-04-01\n\n### Changed\n\n- Precise property rounding to avoid choppy animations (#16)\n\n## [2.1.0] - 2018-03-09\n\n### Added\n\n- `direct` option can be used to apply properties to another element than `elem` (#11)\n- More demos\n\n## [2.0.0] - 2018-02-25\n\n### Added\n\n- [Track window size changes](README.md#track-window-size-changes) and recalculate and update instances when the size changes (#7)\n- `track` option to disable [window size tracking](README.md#track-window-size-changes) for each instance individually (#7)\n\n### Changed\n\n- The `props` callback parameter is now nicely formatted\n- The `update` method returns a nicely formatted object of props\n- [Direct mode](README.md#data) must now be defined globally per instance instead of setting it on each prop individually\n\n## [1.3.0] - 2018-02-24\n\n### Added\n\n- Callback demo\n- Destroy method (#6)\n\n## [1.2.0] - 2018-01-18\n\n### Added\n\n- `inside` and `outside` callbacks now receive the calculated properties\n\n## [1.1.5] - 2017-12-17\n\n### Changed\n\n- Syntax of JS files\n\n## [1.1.4] - 2017-09-01\n\n### Changed\n\n- Switched from `deepcopy` to `lodash.clonedeep`\n\n## [1.1.3] - 2017-08-08\n\n### Added\n\n- Added a changelog\n\n### Changed\n\n- Ignore `yarn.lock` and `package-lock.json` files"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "The MIT License (MIT)\n\nCopyright (c) Tobias Reich\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.2939453125,
          "content": "# basicScroll\n\n[![Donate via PayPal](https://img.shields.io/badge/paypal-donate-009cde.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=CYKBESW577YWE)\n\nStandalone parallax scrolling for mobile and desktop with CSS variables.\n\nbasicScroll allows you to change CSS variables depending on the scroll position. Use the variables directly in your CSS to animate whatever you want. Highly inspired by [skrollr](https://github.com/Prinzhorn/skrollr) and [Reactive Animations with CSS Variables](http://slides.com/davidkhourshid/reactanim#/).\n\n## Contents\n\n- [Demos](#demos)\n- [Tutorials](#tutorials)\n- [Features](#features)\n- [Requirements](#requirements)\n- [Setup](#setup)\n- [API](#api)\n- [Instance API](#instance-api)\n- [Data](#data)\n- [Related](#related)\n- [Tips](#tips)\n\n## Demos\n\n| Name | Description | Link | Author |\n|:-----------|:------------|:------------|:------------|\n| Default | Includes most features | [Try it on CodePen](http://codepen.io/electerious/pen/QGNxxx) |\n| Callback | Animate properties in JS via callbacks | [Try it on CodePen](https://codepen.io/electerious/pen/goZRBv) |\n| Parallax scene | A composition of multiple, moving layers | [Try it on CodePen](http://codepen.io/electerious/pen/gLLozQ) | [@electerious](https://twitter.com/electerious) |\n| Rolling eyes | Custom element to track scrolling | [Try it on CodePen](https://codepen.io/electerious/pen/MZJZxm) | [@electerious](https://twitter.com/electerious) |\n| Headline explosion | Animated letters | [Try it on CodePen](https://codepen.io/electerious/pen/EQzxxJ) | [@electerious](https://twitter.com/electerious) |\n| Scroll and morph | Morph text using CSS clip-path | [Try it on CodePen](https://codepen.io/ainalem/pen/jZzxrP) | [@mikaelainalem](https://twitter.com/mikaelainalem) |\n| Parallax with JS | Several examples and a debug mode | [Try it on CodePen](https://codepen.io/animaticss/pen/rNBJwmq) | [AnimatiCSS](https://www.youtube.com/channel/UC73Tk5wfEBh67Vm7gM_zaAw) |\n\n## Tutorials\n\n| Name | Link |\n|:-----------|:------------|\n| ðŸ“ƒ Parallax scrolling with JS controlled CSS variables | [Read it on Medium](https://medium.com/@electerious/parallax-scrolling-with-js-controlled-css-variables-63cfe96820c7) |\n| ðŸŽ¬ Apple-like scroll animations | [Watch it on YouTube](https://www.youtube.com/watch?v=hPd1srSWDU4) |\n| ðŸŽ¬ Parallax effect tutorial (ðŸ‡ªðŸ‡¸) | [Watch it on YouTube](https://www.youtube.com/watch?v=QeRg4t3I2zc) |\n\n## Features\n\n- Framework independent\n- Insane performance\n- Support for mobile and desktop\n- CommonJS and AMD support\n- Simple JS API\n\n## Requirements\n\nbasicScroll depends on the following browser features and APIs:\n\n- [CSS Custom Properties](https://developer.mozilla.org/en-US/docs/Web/CSS/--*)\n- [Object.assign](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n- [window.requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame)\n\nSome of these APIs are capable of being polyfilled in older browsers. Check the linked resources above to determine if you must polyfill to achieve your desired level of browser support.\n\n## Setup\n\nWe recommend installing basicScroll using [npm](https://npmjs.com) or [yarn](https://yarnpkg.com).\n\n```sh\nnpm install basicscroll\n```\n\n```sh\nyarn add basicscroll\n```\n\nInclude the JS file at the end of your `body` tagâ€¦\n\n```html\n<script src=\"dist/basicScroll.min.js\"></script>\n```\n\nâ€¦or skip the JS file and use basicScroll as a module:\n\n```js\nconst basicScroll = require('basicscroll')\n```\n\n```js\nimport * as basicScroll from 'basicscroll'\n```\n\n## Usage\n\nThis demo shows how to to change the opacity of an element when the user scrolls. The element starts to fade as soon as the top of the element reaches the bottom of the viewport. A opacity of `.99` is reached when the middle of the element is in the middle of the viewport.\n\nTip: Animating from `.01` to `.99` avoids the repaints that normally occur when the element changes from fully transparent to translucent and from translucent to fully visible.\n\n```js\nconst instance = basicScroll.create({\n\telem: document.querySelector('.element'),\n\tfrom: 'top-bottom',\n\tto: 'middle-middle',\n\tprops: {\n\t\t'--opacity': {\n\t\t\tfrom: .01,\n\t\t\tto: .99\n\t\t}\n\t}\n})\n\ninstance.start()\n```\n\n```css\n.element {\n\t/*\n\t * Use the same CSS variable as specified in our instance.\n\t */\n\topacity: var(--opacity);\n\t/*\n\t * The will-change CSS property provides a way for authors to hint browsers about the kind of changes\n\t * to be expected on an element, so that the browser can setup appropriate optimizations ahead of time\n\t * before the element is actually changed.\n\t */\n\twill-change: opacity;\n}\n```\n\n## API\n\n### .create(html, opts)\n\nCreates a new basicScroll instance.\n\nBe sure to assign your instance to a variable. Using your instance, you canâ€¦\n\n* â€¦start and stop the animation.\n* â€¦check if the instance is active.\n* â€¦get the current props.\n* â€¦recalculate the props when the window size changes.\n\nExamples:\n\n```js\nconst instance = basicScroll.create({\n\tfrom: '0',\n\tto: '100px',\n\tprops: {\n\t\t'--opacity': {\n\t\t\tfrom: 0,\n\t\t\tto: 1\n\t\t}\n\t}\n})\n```\n\n```js\nconst instance = basicScroll.create({\n\telem: document.querySelector('.element'),\n\tfrom: 'top-bottom',\n\tto: 'bottom-top',\n\tprops: {\n\t\t'--translateY': {\n\t\t\tfrom: '0',\n\t\t\tto: '100%',\n\t\t\ttiming: 'elasticOut'\n\t\t}\n\t}\n})\n```\n\n```js\nconst instance = basicScroll.create({\n\telem: document.querySelector('.element'),\n\tfrom: 'top-middle',\n\tto: 'bottom-middle',\n\tinside: (instance, percentage, props) => {\n\t\tconsole.log('viewport is inside from and to')\n\t},\n\toutside: (instance, percentage, props) => {\n\t\tconsole.log('viewport is outside from and to')\n\t}\n})\n```\n\nParameters:\n\n- `data` `{Object}` An object of [data](#data).\n\nReturns:\n\n- `{Object}` The created instance.\n\n## Instance API\n\nEach basicScroll instance has a handful of handy functions. Below are all of them along with a short description.\n\n### .start()\n\nStarts to animate the instance. basicScroll will track the scroll position and adjust the [props](#props) of the instance accordingly. An update will be performed only when the scroll position has changed.\n\nExample:\n\n```js\ninstance.start()\n```\n\n### .stop()\n\nStops to animate the instance. All [props](#props) of the instance will keep their last value.\n\nExample:\n\n```js\ninstance.stop()\n```\n\n### .destroy()\n\nDestroys the instance. Should be called when the instance is no longer needed. All [props](#props) of the instance will keep their last value.\n\nExample:\n\n```js\ninstance.destroy()\n```\n\n### .update()\n\nTriggers an update of an instance, even when the instance is currently stopped.\n\nExample:\n\n```js\nconst props = instance.update()\n```\n\nReturns:\n\n- `{Object}` Applied props.\n\n### .calculate()\n\nConverts the [start and stop position](#start-and-stop-position) of the instance to absolute values. basicScroll relies on those values to start and stop the animation at the right position. It runs the calculation once during the instance creation. `.calculate()` should be called when elements have altered their position or when the size of the site/viewport has changed.\n\nExample:\n\n```js\ninstance.calculate()\n```\n\n### .isActive()\n\nReturns `true` when the instance is started and `false` when the instance is stopped.\n\nExample:\n\n```js\ninstance.isActive()\n```\n\nReturns:\n\n- `{Boolean}`\n\n### .getData()\n\nReturns calculated data. More or less a parsed version of the [data](#data) used for the instance creation. The data might change when calling the [calculate](#calculate) function.\n\nExample:\n\n```js\ninstance.getData()\n```\n\nReturns:\n\n- `{Object}` Parsed [data](#data).\n\n## Data\n\nThe data object can include the following properties:\n\n```js\n{\n\t/*\n\t * DOM element/node.\n\t */\n\telem: null,\n\t/*\n\t * Start and stop position.\n\t */\n\tfrom: null,\n \tto: null,\n\t/*\n\t * Direct mode.\n\t */\n\tdirect: false,\n\t/*\n\t * Track window size changes.\n\t */\n\ttrack: true,\n\t/*\n\t * Callback functions.\n\t */\n\tinside: (instance, percentage, props) => {},\n\toutside: (instance, percentage, props) => {},\n\t/*\n\t * Props.\n\t */\n\tprops: {\n\t\t/*\n\t\t * Property name / CSS Custom Properties.\n\t\t */\n\t\t'--name': {\n\t\t\t/*\n\t\t\t * Start and end values.\n\t\t\t */\n\t\t\tfrom: null,\n\t\t\tto: null,\n\t\t\t/*\n\t\t\t * Animation timing.\n\t\t\t */\n\t\t\ttiming: 'ease'\n\t\t}\n\t}\n}\n```\n\n### DOM element/node\n\nType: `Node` Default: `null` Optional: `true`\n\nA DOM element/node.\n\nThe position and size of the element will be used to convert the [start and stop position](#start-and-stop-position) to absolute values. How else is basicScroll supposed to know when to start and stop an animation with relative values?\n\nYou can skip the property when using absolute values.\n\nExample:\n\n```js\n{\n\telem: document.querySelector('.element')\n\t/* ... */\n}\n```\n\n### Start and stop position\n\nType: `Integer|String` Default: `null` Optional: `false`\n\nbasicScroll starts to animate the [props](#props) when the scroll position is above `from` and below `to`. Absolute and relative values are allowed.\n\nRelative values require a [DOM element/node](#dom-elementnode). The first part of the value describes the element position, the last part describes the viewport position: `<element>-<viewport>`. `middle-bottom` in `from` specifies that the animation starts when the middle of the element reaches the bottom of the viewport.\n\nKnown relative values: `top-top`, `top-middle`, `top-bottom`, `middle-top`, `middle-middle`, `middle-bottom`, `bottom-top`, `bottom-middle`, `bottom-bottom`\n\nIt's possible to track a custom anchor when you want to animate for [a specific viewport height](https://github.com/electerious/basicScroll/issues/26#issuecomment-449130809) or when you need to [start and end with an offset](https://github.com/electerious/basicScroll/issues/17#issuecomment-449134650).\n\nExamples:\n\n```js\n{\n\t/* ... */\n\tfrom: '0px',\n\tto: '100px',\n\t/* ... */\n}\n```\n\n```js\n{\n\t/* ... */\n\tfrom: 0,\n\tto: 360,\n\t/* ... */\n}\n```\n\n```js\n{\n\t/* ... */\n\tfrom: 'top-middle',\n\tto: 'bottom-middle',\n\t/* ... */\n}\n```\n\n### Direct mode\n\nType: `Boolean|Node` Default: `false` Optional: `true`\n\nbasicScroll applies all [props](#props) globally by default. This way you can use variables everywhere in your CSS, even when the instance tracks just one element. Set `direct` to `true` or to a DOM element/node to apply all [props](#props) directly to the [DOM element/node](#dom-elementnode) or to the DOM element/node you have specified. This also allows you to animate CSS properties, not just CSS variables.\n\n- `false`: Apply props globally (default)\n- `true`: Apply props to the [DOM element/node](#dom-elementnode)\n- `Node`: Apply props to a DOM element/node of your choice\n\nExamples:\n\n```html\n<!-- direct: false -->\n<html style=\"--name: 0;\">\n\t<div class=\"trackedElem\"></div>\n\t<div class=\"anotherElem\"></div>\n</html>\n```\n\n```html\n<!-- direct: true -->\n<html>\n\t<div class=\"trackedElem\" style=\"--name: 0;\"></div>\n\t<div class=\"anotherElem\"></div>\n</html>\n```\n\n```html\n<!-- direct: document.querySelector('.anotherElem') -->\n<html>\n\t<div class=\"trackedElem\"></div>\n\t<div class=\"anotherElem\" style=\"--name: 0;\"></div>\n</html>\n```\n\n### Track window size changes\n\nType: `Boolean` Default: `true` Optional: `true`\n\nbasicScroll automatically recalculates and updates instances when the size of the window changes. You can disable the tracking for each instance individually when you want to take care of it by yourself.\n\nNote: basicScroll only tracks the window size. You still must recalculate and update your instances manually when you modify your site. Each modification that changes the layout of the page should trigger such an update in your code.\n\nExample:\n\n```js\nconst instance = basicScroll.create({\n\telem: document.querySelector('.element'),\n\tfrom: 'top-bottom',\n\tto: 'bottom-top',\n\ttrack: false,\n\tprops: {\n\t\t'--opacity': {\n\t\t\tfrom: 0,\n\t\t\tto: 1\n\t\t}\n\t}\n})\n\n// Recalculate and update your instance manually when the tracking is disabled.\n// Debounce this function in production to avoid unnecessary calculations.\nwindow.onresize = function() {\n\n\tinstance.calculate()\n\tinstance.update()\n\n}\n```\n\n### Callback functions\n\nType: `Function` Default: `() => {}` Optional: `true`\n\n- The `inside` callback executes when the user scrolls and the viewport is within the given [start and stop position](#start-and-stop-position).\n- The `outside` callback executes when the user scrolls and the viewport is outside the given [start and stop position](#start-and-stop-position).\n\nBoth callbacks receive the current instance, a percentage and the calculated properties:\n\n- `< 0%` percent = Scroll position is below `from`\n- `= 0%` percent = Scroll position is `from`\n- `= 100%` percent = Scroll position is `to`\n- `> 100%` percent = Scroll position is above `from`\n\nExample:\n\n```js\n{\n\t/* ... */\n\tinside: (instance, percentage, props) => {},\n\toutside: (instance, percentage, props) => {},\n\t/* ... */\n}\n```\n\n### Props\n\nType: `Object` Default: `{}` Optional: `true`\n\nValues to animate when the scroll position changes.\n\nEach prop of the object represents a CSS property or CSS Custom Property (CSS variables). Custom CSS properties always start with two dashes. A prop with the name `--name` is accessible with `var(--name)` in CSS.\n\nMore about [CSS custom properties](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables).\n\nExample:\n\n```js\n{\n\t/* ... */\n\tprops: {\n\t\t'--one-variable': { /* ... */ },\n\t\t'--another-variable': { /* ... */ }\n\t}\n}\n```\n\n### Start and end values\n\nType: `Integer|String` Default: `null` Optional: `false`\n\nWorks with all kinds of units. basicScroll uses the unit of `to` when `from` has no unit.\n\nExamples:\n\n```js\n'--name': {\n\t/* ... */\n\tfrom: '0',\n\tto: '100px',\n\t/* ... */\n}\n```\n\n```js\n'--name': {\n\t/* ... */\n\tfrom: '50%',\n\tto: '100%',\n\t/* ... */\n}\n```\n\n```js\n'--name': {\n\t/* ... */\n\tfrom: '0',\n\tto: '1turn',\n\t/* ... */\n}\n```\n\n### Animation timing\n\nType: `String|Function` Default: `linear` Optional: `true`\n\nA known timing or a custom function. Easing functions get just one argument, which is a value between 0 and 1 (the percentage of how much of the animation is done). The function should return a value between 0 and 1 as well, but for some timings a value less than 0 or greater than 1 is just fine.\n\nKnown timings: `backInOut`, `backIn`, `backOut`, `bounceInOut`, `bounceIn`, `bounceOut`, `circInOut`, `circIn`, `circOut`, `cubicInOut`, `cubicIn`, `cubicOut`, `elasticInOut`, `elasticIn`, `elasticOut`, `expoInOut`, `expoIn`, `expoOut`, `linear`, `quadInOut`, `quadIn`, `quadOut`, `quartInOut`, `quartIn`, `quartOut`, `quintInOut`, `quintIn`, `quintOut`, `sineInOut`, `sineIn`, `sineOut`\n\nExamples:\n\n```js\n'--name': {\n\t/* ... */\n\ttiming: 'circInOut'\n}\n```\n\n```js\n'--name': {\n\t/* ... */\n\ttiming: (t) => t * t\n}\n```\n\n## Related\n\n- [ngx-basicscroll](https://github.com/theunreal/ngx-basicscroll) - Angular wrapper for basicScroll\n- [react-basic-scroll](https://github.com/liorbd/react-basic-scroll) - React wrapper for basicScroll\n\n## Tips\n\n- Only animate `transform` and `opacity` and use `will-change` to [hint browsers about the kind of changes](https://developer.mozilla.org/de/docs/Web/CSS/will-change). This way the browser can setup appropriate optimizations ahead of time before the element is actually changed.\n- Keep the amount of instances low. More instances means more checks, calculations and style changes.\n- Don't animate everything at once and don't animate too many properties. Browsers don't like this.\n- Smooth animations by adding a short transition to the element: `transform: translateY(var(--ty)); transition: transform .1s`.\n- basicScroll applies all [props](#props) globally by default. Try to reuse variables across elements instead of creating more instances."
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.4990234375,
          "content": "{\n  \"name\": \"basicScroll\",\n  \"authors\": [\n    \"Tobias Reich <tobias@electerious.com>\"\n  ],\n  \"description\": \"Standalone parallax scrolling for mobile and desktop with CSS variables\",\n  \"main\": [\n    \"dist/basicScroll.min.js\"\n  ],\n  \"keywords\": [],\n  \"ignore\": [\n    \"**/.*\",\n    \"demos\",\n    \"build.js\",\n    \"package.json\"\n  ],\n  \"license\": \"MIT\",\n  \"homepage\": \"https://github.com/electerious/basicScroll\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/electerious/basicScroll.git\"\n  }\n}\n"
        },
        {
          "name": "build.js",
          "type": "blob",
          "size": 0.2607421875,
          "content": "'use strict'\n\nconst { writeFile } = require('fs').promises\nconst js = require('rosid-handler-js')\n\njs('src/scripts/main.js', {\n\n\toptimize: true,\n\tbrowserify: {\n\t\tstandalone: 'basicScroll'\n\t}\n\n}).then((data) => {\n\n\treturn writeFile('dist/basicScroll.min.js', data)\n\n})"
        },
        {
          "name": "demos",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.701171875,
          "content": "{\n  \"name\": \"basicscroll\",\n  \"version\": \"3.0.4\",\n  \"authors\": [\n    \"Tobias Reich <tobias@electerious.com>\"\n  ],\n  \"description\": \"Standalone parallax scrolling for mobile and desktop with CSS variables\",\n  \"main\": \"dist/basicScroll.min.js\",\n  \"keywords\": [\n    \"parallax\",\n    \"scroll\",\n    \"scrolling\"\n  ],\n  \"scripts\": {\n    \"build\": \"node build.js\"\n  },\n  \"license\": \"MIT\",\n  \"homepage\": \"https://github.com/electerious/basicScroll\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/electerious/basicScroll.git\"\n  },\n  \"files\": [\n    \"dist\",\n    \"src\"\n  ],\n  \"dependencies\": {\n    \"eases\": \"^1.0.8\",\n    \"parse-unit\": \"^1.0.1\"\n  },\n  \"devDependencies\": {\n    \"rosid-handler-js\": \"^13.0.0\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}