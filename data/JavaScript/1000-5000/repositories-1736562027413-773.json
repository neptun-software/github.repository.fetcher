{
  "metadata": {
    "timestamp": 1736562027413,
    "page": 773,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "devongovett/regexgen",
      "stars": 3347,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1435546875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nindent_style = space\nindent_size = 2\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0546875,
          "content": "node_modules/\n.DS_Store\nyarn.lock\ncoverage/\n.nyc_output\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.0146484375,
          "content": "# regexgen\n\nGenerates regular expressions that match a set of strings.\n\n## Installation\n\n`regexgen` can be installed using [npm](https://npmjs.com):\n\n```\nnpm install regexgen\n```\n\n## Example\n\nThe simplest use is to simply pass an array of strings to `regexgen`:\n\n```javascript\nconst regexgen = require('regexgen');\n\nregexgen(['foobar', 'foobaz', 'foozap', 'fooza']); // => /foo(?:zap?|ba[rz])/\n```\n\nYou can also use the `Trie` class directly:\n\n```javascript\nconst {Trie} = require('regexgen');\n\nlet t = new Trie;\nt.add('foobar');\nt.add('foobaz');\n\nt.toRegExp(); // => /fooba[rz]/\n```\n\n## CLI\n\n`regexgen` also has a simple CLI to generate regexes using inputs from the command line.\n\n```shell\n$ regexgen\nUsage: regexgen [-gimuy] string1 string2 string3...\n```\n\nThe optional first parameter is the [flags](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) to add\nto the regex (e.g. `-i` for a case insensitive match).\n\n## ES2015 and Unicode\n\nBy default `regexgen` will output a standard JavaScript regular expression, with Unicode codepoints converted into UCS-2 surrogate pairs.\n\nIf desired, you can request an ES2015-compatible Unicode regular expression by supplying the `-u` flag, which results in those codepoints being retained.\n\n```shell\n$ regexgen 👩 👩‍💻 👩🏻‍💻 👩🏼‍💻 👩🏽‍💻 👩🏾‍💻 👩🏿‍💻\n/\\uD83D\\uDC69(?:(?:\\uD83C[\\uDFFB-\\uDFFF])?\\u200D\\uD83D\\uDCBB)?/\n\n$ regexgen -u 👩 👩‍💻 👩🏻‍💻 👩🏼‍💻 👩🏽‍💻 👩🏾‍💻 👩🏿‍💻\n/\\u{1F469}(?:[\\u{1F3FB}-\\u{1F3FF}]?\\u200D\\u{1F4BB})?/u\n```\n\n\nSuch regular expressions are compatible with current versions of Node, as well as the latest browsers, and may be more transferrable to other languages.\n\n## How does it work?\n\n1. Generate a [Trie](https://en.wikipedia.org/wiki/Trie) containing all of the input strings.\n   This is a tree structure where each edge represents a single character. This removes\n   redundancies at the start of the strings, but common branches further down are not merged.\n\n2. A trie can be seen as a tree-shaped deterministic finite automaton (DFA), so DFA algorithms\n   can be applied. In this case, we apply [Hopcroft's DFA minimization algorithm](https://en.wikipedia.org/wiki/DFA_minimization#Hopcroft.27s_algorithm)\n   to merge the nondistinguishable states.\n\n3. Convert the resulting minimized DFA to a regular expression. This is done using\n   [Brzozowski's algebraic method](http://cs.stackexchange.com/questions/2016/how-to-convert-finite-automata-to-regular-expressions#2392),\n   which is quite elegant. It expresses the DFA as a system of equations which can be solved\n   for a resulting regex. Along the way, some additional optimizations are made, such\n   as hoisting common substrings out of an alternation, and using character class ranges.\n   This produces an an [Abstract Syntax Tree](https://en.wikipedia.org/wiki/Abstract_syntax_tree)\n   (AST) for the regex, which is then converted to a string and compiled to a JavaScript\n   `RegExp` object.\n\n## License\n\nMIT\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.3505859375,
          "content": "const Trie = require('./src/trie');\n\n/**\n * Generates a regular expression that matches the given input strings.\n * @param {Array<string>} inputs\n * @param {string} flags\n * @return {RegExp}\n */\nfunction regexgen(inputs, flags) {\n  let trie = new Trie;\n  trie.addAll(inputs);\n  return trie.toRegExp(flags);\n}\n\nregexgen.Trie = Trie;\nmodule.exports = regexgen;\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.8818359375,
          "content": "{\n  \"name\": \"regexgen\",\n  \"version\": \"1.3.0\",\n  \"description\": \"Generate regular expressions that match a set of strings\",\n  \"main\": \"index.js\",\n  \"bin\": {\n    \"regexgen\": \"bin/cli.js\"\n  },\n  \"dependencies\": {\n    \"jsesc\": \"^2.3.0\",\n    \"regenerate\": \"^1.3.2\"\n  },\n  \"devDependencies\": {\n    \"mocha\": \"^3.2.0\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha\"\n  },\n  \"engines\": {\n    \"node\": \">= 6\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/devongovett/regexgen.git\"\n  },\n  \"keywords\": [\n    \"regex\",\n    \"trie\",\n    \"regular\",\n    \"expression\"\n  ],\n  \"author\": \"Devon Govett <devongovett@gmail.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/devongovett/regexgen/issues\"\n  },\n  \"homepage\": \"https://github.com/devongovett/regexgen#readme\",\n  \"runkitExample\": \"const regexgen = require('regexgen');\\n\\nregexgen(['foobar', 'foobaz', 'foozap', 'fooza']);\"\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}