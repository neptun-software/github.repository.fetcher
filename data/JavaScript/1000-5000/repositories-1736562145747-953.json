{
  "metadata": {
    "timestamp": 1736562145747,
    "page": 953,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ashtuchkin/iconv-lite",
      "stars": 3096,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.158203125,
          "content": "# Node.js stuff\nnode_modules\npackage-lock.json\n\n# Editors\n*~\n*sublime-*\n/.idea\n\n# Development environment\n/coverage\n/benchmarks/node_envs\n/generation/source-data\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.068359375,
          "content": "*~\n*sublime-*\ngeneration\ntest\nwiki\ncoverage\n.github\n.idea\n.travis.yml\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2421875,
          "content": "language: node_js\nnode_js:\n  - \"0.10\"\n  - \"0.11\"\n  - \"0.12\"\n  - \"iojs\"\n  - \"4\"\n  - \"6\"\n  - \"8\"\n  - \"10\"\n  - \"12\"\n  - \"node\"\n\njobs:\n  include:\n    - name: webpack\n      node_js: \"12\"\n      install: cd test/webpack; npm install\n      script: npm test"
        },
        {
          "name": "Changelog.md",
          "type": "blob",
          "size": 6.4267578125,
          "content": "## 0.6.3 / 2021-05-23\n  * Fix HKSCS encoding to prefer Big5 codes if both Big5 and HKSCS codes are possible (#264)\n\n\n## 0.6.2 / 2020-07-08\n  * Support Uint8Array-s decoding without conversion to Buffers, plus fix an edge case.\n\n\n## 0.6.1 / 2020-06-28\n  * Support Uint8Array-s directly when decoding (#246, by @gyzerok)\n  * Unify package.json version ranges to be strictly semver-compatible (#241)\n  * Fix minor issue in UTF-32 decoder's endianness detection code.\n\n\n## 0.6.0 / 2020-06-08\n  * Updated 'gb18030' encoding to :2005 edition (see https://github.com/whatwg/encoding/issues/22).\n  * Removed `iconv.extendNodeEncodings()` mechanism. It was deprecated 5 years ago and didn't work \n    in recent Node versions.\n  * Reworked Streaming API behavior in browser environments to fix #204. Streaming API will be \n    excluded by default in browser packs, saving ~100Kb bundle size, unless enabled explicitly using \n    `iconv.enableStreamingAPI(require('stream'))`.\n  * Updates to development environment & tests:\n    * Added ./test/webpack private package to test complex new use cases that need custom environment. \n      It's tested as a separate job in Travis CI.\n    * Updated generation code for the new EUC-KR index file format from Encoding Standard.\n    * Removed Buffer() constructor in tests (#197 by @gabrielschulhof).\n\n\n## 0.5.2 / 2020-06-08\n  * Added `iconv.getEncoder()` and `iconv.getDecoder()` methods to typescript definitions (#229).\n  * Fixed semver version to 6.1.2 to support Node 8.x (by @tanandara).\n  * Capped iconv version to 2.x as 3.x has dropped support for older Node versions.\n  * Switched from instanbul to c8 for code coverage.\n\n\n## 0.5.1 / 2020-01-18\n\n  * Added cp720 encoding (#221, by @kr-deps)\n  * (minor) Changed Changelog.md formatting to use h2. \n\n\n## 0.5.0 / 2019-06-26\n\n  * Added UTF-32 encoding, both little-endian and big-endian variants (UTF-32LE, UTF32-BE). If endianness\n    is not provided for decoding, it's deduced automatically from the stream using a heuristic similar to\n    what we use in UTF-16. (great work in #216 by @kshetline)\n  * Several minor updates to README (#217 by @oldj, plus some more)\n  * Added Node versions 10 and 12 to Travis test harness.\n\n\n## 0.4.24 / 2018-08-22\n\n  * Added MIK encoding (#196, by @Ivan-Kalatchev)\n\n\n## 0.4.23 / 2018-05-07\n\n  * Fix deprecation warning in Node v10 due to the last usage of `new Buffer` (#185, by @felixbuenemann)\n  * Switched from NodeBuffer to Buffer in typings (#155 by @felixfbecker, #186 by @larssn)\n\n\n## 0.4.22 / 2018-05-05\n\n  * Use older semver style for dependencies to be compatible with Node version 0.10 (#182, by @dougwilson)\n  * Fix tests to accomodate fixes in Node v10 (#182, by @dougwilson)\n\n\n## 0.4.21 / 2018-04-06\n\n  * Fix encoding canonicalization (#156)\n  * Fix the paths in the \"browser\" field in package.json (#174 by @LMLB)\n  * Removed \"contributors\" section in package.json - see Git history instead.\n\n\n## 0.4.20 / 2018-04-06\n\n  * Updated `new Buffer()` usages with recommended replacements as it's being deprecated in Node v10 (#176, #178 by @ChALkeR)\n\n\n## 0.4.19 / 2017-09-09\n\n  * Fixed iso8859-1 codec regression in handling untranslatable characters (#162, caused by #147)\n  * Re-generated windows1255 codec, because it was updated in iconv project\n  * Fixed grammar in error message when iconv-lite is loaded with encoding other than utf8\n\n\n## 0.4.18 / 2017-06-13\n\n  * Fixed CESU-8 regression in Node v8.\n\n\n## 0.4.17 / 2017-04-22\n\n * Updated typescript definition file to support Angular 2 AoT mode (#153 by @larssn)\n\n\n## 0.4.16 / 2017-04-22\n\n * Added support for React Native (#150)\n * Changed iso8859-1 encoding to usine internal 'binary' encoding, as it's the same thing (#147 by @mscdex)\n * Fixed typo in Readme (#138 by @jiangzhuo)\n * Fixed build for Node v6.10+ by making correct version comparison\n * Added a warning if iconv-lite is loaded not as utf-8 (see #142)\n\n\n## 0.4.15 / 2016-11-21\n\n * Fixed typescript type definition (#137)\n\n\n## 0.4.14 / 2016-11-20\n\n * Preparation for v1.0\n * Added Node v6 and latest Node versions to Travis CI test rig\n * Deprecated Node v0.8 support\n * Typescript typings (@larssn)\n * Fix encoding of Euro character in GB 18030 (inspired by @lygstate)\n * Add ms prefix to dbcs windows encodings (@rokoroku)\n\n\n## 0.4.13 / 2015-10-01\n\n * Fix silly mistake in deprecation notice.\n\n\n## 0.4.12 / 2015-09-26\n\n * Node v4 support:\n   * Added CESU-8 decoding (#106)\n   * Added deprecation notice for `extendNodeEncodings`\n   * Added Travis tests for Node v4 and io.js latest (#105 by @Mithgol)\n\n\n## 0.4.11 / 2015-07-03\n\n * Added CESU-8 encoding.\n\n\n## 0.4.10 / 2015-05-26\n\n * Changed UTF-16 endianness heuristic to take into account any ASCII chars, not\n   just spaces. This should minimize the importance of \"default\" endianness.\n\n\n## 0.4.9 / 2015-05-24\n\n * Streamlined BOM handling: strip BOM by default, add BOM when encoding if \n   addBOM: true. Added docs to Readme.\n * UTF16 now uses UTF16-LE by default.\n * Fixed minor issue with big5 encoding.\n * Added io.js testing on Travis; updated node-iconv version to test against.\n   Now we just skip testing SBCS encodings that node-iconv doesn't support.\n * (internal refactoring) Updated codec interface to use classes.\n * Use strict mode in all files.\n\n\n## 0.4.8 / 2015-04-14\n \n * added alias UNICODE-1-1-UTF-7 for UTF-7 encoding (#94)\n\n\n## 0.4.7 / 2015-02-05\n\n * stop official support of Node.js v0.8. Should still work, but no guarantees.\n   reason: Packages needed for testing are hard to get on Travis CI.\n * work in environment where Object.prototype is monkey patched with enumerable \n   props (#89).\n\n\n## 0.4.6 / 2015-01-12\n \n * fix rare aliases of single-byte encodings (thanks @mscdex)\n * double the timeout for dbcs tests to make them less flaky on travis\n\n\n## 0.4.5 / 2014-11-20\n\n * fix windows-31j and x-sjis encoding support (@nleush)\n * minor fix: undefined variable reference when internal error happens\n\n\n## 0.4.4 / 2014-07-16\n\n * added encodings UTF-7 (RFC2152) and UTF-7-IMAP (RFC3501 Section 5.1.3)\n * fixed streaming base64 encoding\n\n\n## 0.4.3 / 2014-06-14\n\n * added encodings UTF-16BE and UTF-16 with BOM\n\n\n## 0.4.2 / 2014-06-12\n\n * don't throw exception if `extendNodeEncodings()` is called more than once\n\n\n## 0.4.1 / 2014-06-11\n\n * codepage 808 added\n\n\n## 0.4.0 / 2014-06-10\n\n * code is rewritten from scratch\n * all widespread encodings are supported\n * streaming interface added\n * browserify compatibility added\n * (optional) extend core primitive encodings to make usage even simpler\n * moved from vows to mocha as the testing framework\n\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "Copyright (c) 2011 Alexander Shtuchkin\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.181640625,
          "content": "## iconv-lite: Pure JS character encoding conversion\n\n * No need for native code compilation. Quick to install, works on Windows, Web, and in sandboxed environments.\n * Used in popular projects like [Express.js (body_parser)](https://github.com/expressjs/body-parser), \n   [Grunt](http://gruntjs.com/), [Nodemailer](http://www.nodemailer.com/), [Yeoman](http://yeoman.io/) and others.\n * Faster than [node-iconv](https://github.com/bnoordhuis/node-iconv) (see below for performance comparison).\n * Intuitive encode/decode API, including Streaming support.\n * In-browser usage via [browserify](https://github.com/substack/node-browserify) or [webpack](https://webpack.js.org/) (~180kb gzip compressed with Buffer shim included).\n * Typescript [type definition file](https://github.com/ashtuchkin/iconv-lite/blob/master/lib/index.d.ts) included.\n * React Native is supported (need to install `stream` module to enable Streaming API).\n * License: MIT.\n\n[![NPM Stats](https://nodei.co/npm/iconv-lite.png)](https://npmjs.org/package/iconv-lite/)  \n[![Build Status](https://travis-ci.org/ashtuchkin/iconv-lite.svg?branch=master)](https://travis-ci.org/ashtuchkin/iconv-lite)\n[![npm](https://img.shields.io/npm/v/iconv-lite.svg)](https://npmjs.org/package/iconv-lite/)\n[![npm downloads](https://img.shields.io/npm/dm/iconv-lite.svg)](https://npmjs.org/package/iconv-lite/)\n[![npm bundle size](https://img.shields.io/bundlephobia/min/iconv-lite.svg)](https://npmjs.org/package/iconv-lite/)\n\n## Usage\n### Basic API\n```javascript\nvar iconv = require('iconv-lite');\n\n// Convert from an encoded buffer to a js string.\nstr = iconv.decode(Buffer.from([0x68, 0x65, 0x6c, 0x6c, 0x6f]), 'win1251');\n\n// Convert from a js string to an encoded buffer.\nbuf = iconv.encode(\"Sample input string\", 'win1251');\n\n// Check if encoding is supported\niconv.encodingExists(\"us-ascii\")\n```\n\n### Streaming API\n```javascript\n\n// Decode stream (from binary data stream to js strings)\nhttp.createServer(function(req, res) {\n    var converterStream = iconv.decodeStream('win1251');\n    req.pipe(converterStream);\n\n    converterStream.on('data', function(str) {\n        console.log(str); // Do something with decoded strings, chunk-by-chunk.\n    });\n});\n\n// Convert encoding streaming example\nfs.createReadStream('file-in-win1251.txt')\n    .pipe(iconv.decodeStream('win1251'))\n    .pipe(iconv.encodeStream('ucs2'))\n    .pipe(fs.createWriteStream('file-in-ucs2.txt'));\n\n// Sugar: all encode/decode streams have .collect(cb) method to accumulate data.\nhttp.createServer(function(req, res) {\n    req.pipe(iconv.decodeStream('win1251')).collect(function(err, body) {\n        assert(typeof body == 'string');\n        console.log(body); // full request body string\n    });\n});\n```\n\n## Supported encodings\n\n *  All node.js native encodings: utf8, ucs2 / utf16-le, ascii, binary, base64, hex.\n *  Additional unicode encodings: utf16, utf16-be, utf-7, utf-7-imap, utf32, utf32-le, and utf32-be.\n *  All widespread singlebyte encodings: Windows 125x family, ISO-8859 family, \n    IBM/DOS codepages, Macintosh family, KOI8 family, all others supported by iconv library. \n    Aliases like 'latin1', 'us-ascii' also supported.\n *  All widespread multibyte encodings: CP932, CP936, CP949, CP950, GB2312, GBK, GB18030, Big5, Shift_JIS, EUC-JP.\n\nSee [all supported encodings on wiki](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings).\n\nMost singlebyte encodings are generated automatically from [node-iconv](https://github.com/bnoordhuis/node-iconv). Thank you Ben Noordhuis and libiconv authors!\n\nMultibyte encodings are generated from [Unicode.org mappings](http://www.unicode.org/Public/MAPPINGS/) and [WHATWG Encoding Standard mappings](http://encoding.spec.whatwg.org/). Thank you, respective authors!\n\n\n## Encoding/decoding speed\n\nComparison with node-iconv module (1000x256kb, on MacBook Pro, Core i5/2.6 GHz, Node v0.12.0). \nNote: your results may vary, so please always check on your hardware.\n\n    operation             iconv@2.1.4   iconv-lite@0.4.7\n    ----------------------------------------------------------\n    encode('win1251')     ~96 Mb/s      ~320 Mb/s\n    decode('win1251')     ~95 Mb/s      ~246 Mb/s\n\n## BOM handling\n\n * Decoding: BOM is stripped by default, unless overridden by passing `stripBOM: false` in options\n   (f.ex. `iconv.decode(buf, enc, {stripBOM: false})`).\n   A callback might also be given as a `stripBOM` parameter - it'll be called if BOM character was actually found.\n * If you want to detect UTF-8 BOM when decoding other encodings, use [node-autodetect-decoder-stream](https://github.com/danielgindi/node-autodetect-decoder-stream) module.\n * Encoding: No BOM added, unless overridden by `addBOM: true` option.\n\n## UTF-16 Encodings\n\nThis library supports UTF-16LE, UTF-16BE and UTF-16 encodings. First two are straightforward, but UTF-16 is trying to be\nsmart about endianness in the following ways:\n * Decoding: uses BOM and 'spaces heuristic' to determine input endianness. Default is UTF-16LE, but can be \n   overridden with `defaultEncoding: 'utf-16be'` option. Strips BOM unless `stripBOM: false`.\n * Encoding: uses UTF-16LE and writes BOM by default. Use `addBOM: false` to override.\n\n## UTF-32 Encodings\n\nThis library supports UTF-32LE, UTF-32BE and UTF-32 encodings. Like the UTF-16 encoding above, UTF-32 defaults to UTF-32LE, but uses BOM and 'spaces heuristics' to determine input endianness. \n * The default of UTF-32LE can be overridden with the `defaultEncoding: 'utf-32be'` option. Strips BOM unless `stripBOM: false`.\n * Encoding: uses UTF-32LE and writes BOM by default. Use `addBOM: false` to override. (`defaultEncoding: 'utf-32be'` can also be used here to change encoding.)\n\n## Other notes\n\nWhen decoding, be sure to supply a Buffer to decode() method, otherwise [bad things usually happen](https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding).  \nUntranslatable characters are set to � or ?. No transliteration is currently supported.  \nNode versions 0.10.31 and 0.11.13 are buggy, don't use them (see #65, #77).  \n\n## Testing\n\n```bash\n$ git clone git@github.com:ashtuchkin/iconv-lite.git\n$ cd iconv-lite\n$ npm install\n$ npm test\n    \n$ # To view performance:\n$ node test/performance.js\n\n$ # To view test coverage:\n$ npm run coverage\n$ open coverage/lcov-report/index.html\n```\n"
        },
        {
          "name": "encodings",
          "type": "tree",
          "content": null
        },
        {
          "name": "generation",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.1044921875,
          "content": "{\n    \"name\": \"iconv-lite\",\n    \"description\": \"Convert character encodings in pure javascript.\",\n    \"version\": \"0.6.3\",\n    \"license\": \"MIT\",\n    \"keywords\": [\n        \"iconv\",\n        \"convert\",\n        \"charset\",\n        \"icu\"\n    ],\n    \"author\": \"Alexander Shtuchkin <ashtuchkin@gmail.com>\",\n    \"main\": \"./lib/index.js\",\n    \"typings\": \"./lib/index.d.ts\",\n    \"homepage\": \"https://github.com/ashtuchkin/iconv-lite\",\n    \"bugs\": \"https://github.com/ashtuchkin/iconv-lite/issues\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git://github.com/ashtuchkin/iconv-lite.git\"\n    },\n    \"engines\": {\n        \"node\": \">=0.10.0\"\n    },\n    \"scripts\": {\n        \"coverage\": \"c8 _mocha --grep .\",\n        \"test\": \"mocha --reporter spec --grep .\"\n    },\n    \"browser\": {\n        \"stream\": false\n    },\n    \"devDependencies\": {\n        \"async\": \"^3.2.0\",\n        \"c8\": \"^7.2.0\",\n        \"errto\": \"^0.2.1\",\n        \"iconv\": \"^2.3.5\",\n        \"mocha\": \"^3.5.3\",\n        \"request\": \"^2.88.2\",\n        \"semver\": \"^6.3.0\",\n        \"unorm\": \"^1.6.0\"\n    },\n    \"dependencies\": {\n        \"safer-buffer\": \">= 2.1.2 < 3.0.0\"\n    }\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}