{
  "metadata": {
    "timestamp": 1736561829378,
    "page": 489,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rmm5t/jquery-timeago",
      "stars": 3814,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".DS_Store",
          "type": "blob",
          "size": 6.00390625,
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0400390625,
          "content": ".bundle\nvendor/ruby\npublic\nnode_modules/\n"
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.0166015625,
          "content": "timeago.yarp.com\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.4482421875,
          "content": "## Want to Contribute?\n\nFound an issue? Thank you for helping out by reporting it. Please describe the\nproblem, what you tried, what you expected to see, and what you actually\nexperienced. Please [re-read the documentation](http://timeago.yarp.com/) to\nmake sure you're using the API as designed, but if you found something that's\nbroken, we really appreciate your efforts in letting us know. Bonus points for\nsubmitting a failing test case to help us diagnose and potentially fix the\nissue.\n\n## Want to Contribute?\n\nAwesome. We love help, but before getting started, please read:\n\n**[Don't \"Push\" Your Pull Requests](http://www.igvita.com/2011/12/19/dont-push-your-pull-requests/)**\n\n## Ready for a Pull-Request?\n\n1. Fork the repo.\n\n2. Run the tests. Run `rake` or open `open test/index.html`. We only take pull\n   requests with passing tests, and it's great to know that you started from a\n   clean slate.\n\n3. Add a test for your change. Only refactoring and documentation change\n  require no new tests. If you are adding functionality or fixing a bug, we\n  need a test!\n\n4. Make the test pass.\n\n5. Push to your fork (hopefully this comes from a topical branch) and submit a\n   pull request.\n\nAt this point you're waiting on us. Please keep in mind that OSS maintainers\nare often very busy. We'll do our best to at least comment on issues and\npull-requests as soon as possible, but sometimes life gets in the way.  We may\nalso suggest some changes or improvements or alternatives.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.048828125,
          "content": "Copyright (c) 2008-2019 Ryan McGeary\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.markdown",
          "type": "blob",
          "size": 4.8115234375,
          "content": "# timeago: a jQuery plugin\n\n[![NPM](https://img.shields.io/npm/v/timeago.svg)](https://www.npmjs.com/package/timeago)\n[![Bower](https://img.shields.io/bower/v/jquery-timeago.svg)](http://bower.io/search/?q=jquery-timeago)\n\nTimeago is a jQuery plugin that makes it easy to support automatically updating\nfuzzy timestamps (e.g. \"4 minutes ago\" or \"about 1 day ago\") from ISO 8601\nformatted dates and times embedded in your HTML (Ã  la microformats).\n\n## Usage\n\nFirst, load jQuery and the plugin:\n\n```html\n<script src=\"jquery.min.js\" type=\"text/javascript\"></script>\n<script src=\"jquery.timeago.js\" type=\"text/javascript\"></script>\n```\n\nNow, let's attach it to your timestamps on DOM ready - put this in the head\nsection:\n\n```html\n<script type=\"text/javascript\">\n   jQuery(document).ready(function() {\n     $(\"time.timeago\").timeago();\n   });\n</script>\n```\n\nThis will turn all `<time>` elements with a class of `timeago` and a\n`datetime` attribute formatted according to the\n[ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) standard:\n\n```html\n<time class=\"timeago\" datetime=\"2011-12-17T09:24:17Z\">December 17, 2011</time>\n```\n\ninto something like this:\n\n```html\n<time class=\"timeago\" datetime=\"2011-12-17T09:24:17Z\" title=\"December 17, 2011\">about 1 day ago</time>\n```\n\n`<abbr>` elements (or any other HTML elements) are also supported (this is for\n[legacy microformat support](http://microformats.org/wiki/datetime-design-pattern)\nand was originally supported by the library before the `time` element was\nintroduced to HTML5):\n\n```html\n<abbr class=\"timeago\" title=\"2011-12-17T09:24:17Z\">December 17, 2011</abbr>\n```\n\nAs time passes, the timestamps will automatically update.\n\nIf you want to update a timestamp programatically later, call the `update`\nfunction with a new ISO8601 timestamp of `Date` object. For example:\n\n```javascript\n$(\"time#some_id\").timeago(\"update\", \"2013-12-17T09:24:17Z\");\n// or\n$(\"time#some_id\").timeago(\"update\", new Date());\n```\n\n**For more usage and examples**: [http://timeago.yarp.com/](http://timeago.yarp.com/)\n\n**For different language configurations**: visit the [`locales`](https://github.com/rmm5t/jquery-timeago/tree/master/locales) directory.\n\n## Settings\n\n**`cutoff`** : Return the original date if time distance is older than `cutoff` (miliseconds).\n\n```javascript\n// Display original dates older than 24 hours\njQuery.timeago.settings.cutoff = 1000*60*60*24;\n```\n\n## Changes\n\n| Version | Notes                                                                           |\n|---------|---------------------------------------------------------------------------------|\n|   1.6.x | ([compare][compare-1.6]) Wraped locales in UMD wrappers; locale improvements    |\n|   1.5.x | ([compare][compare-1.5]) Added Date as argument to update function; locales     |\n|   1.4.x | ([compare][compare-1.4]) Added allowPast setting; locale updates                |\n|   1.3.x | ([compare][compare-1.3]) Added updateFromDOM function; bug fixes; bower support |\n|   1.2.x | ([compare][compare-1.2]) Added cutoff setting; locale updates                   |\n|   1.1.x | ([compare][compare-1.1]) Added update function; locale updates                  |\n|   1.0.x | ([compare][compare-1.0]) locale updates; bug fixes; AMD wrapper                 |\n|  0.11.x | ([compare][compare-0.11]) natural rounding; locale updates;                     |\n|  0.10.x | ([compare][compare-0.10]) locale updates                                        |\n|   0.9.x | ([compare][compare-0.9]) microsecond support; bug fixes                         |\n|   0.8.x | ([compare][compare-0.8]) `<time>` element support; bug fixes                    |\n|   0.7.x | ([compare][compare-0.7]) locale function overrides; unit tests                  |\n|     ... | ...                                                                             |\n\n[compare-1.6]: https://github.com/rmm5t/jquery-timeago/compare/v1.5.4...v1.6.7\n[compare-1.5]: https://github.com/rmm5t/jquery-timeago/compare/v1.4.3...v1.5.4\n[compare-1.4]: https://github.com/rmm5t/jquery-timeago/compare/v1.3.2...v1.4.3\n[compare-1.3]: https://github.com/rmm5t/jquery-timeago/compare/v1.2.0...v1.3.2\n[compare-1.2]: https://github.com/rmm5t/jquery-timeago/compare/v1.1.0...v1.2.0\n[compare-1.1]: https://github.com/rmm5t/jquery-timeago/compare/v1.0.2...v1.1.0\n[compare-1.0]: https://github.com/rmm5t/jquery-timeago/compare/v0.11.4...v1.0.2\n[compare-0.11]: https://github.com/rmm5t/jquery-timeago/compare/v0.10.1...v0.11.4\n[compare-0.10]: https://github.com/rmm5t/jquery-timeago/compare/v0.9.3...v0.10.1\n[compare-0.9]: https://github.com/rmm5t/jquery-timeago/compare/v0.8.2...v0.9.3\n[compare-0.8]: https://github.com/rmm5t/jquery-timeago/compare/v0.7.2...v0.8.2\n[compare-0.7]: https://github.com/rmm5t/jquery-timeago/compare/v0.6.2...v0.7.2\n\n## Author\n\n[Ryan McGeary](http://ryan.mcgeary.org) ([@rmm5t](http://twitter.com/rmm5t))\n\n## License\n\n[MIT License](https://rmm5t.mit-license.org/)\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 1.2275390625,
          "content": "require \"bundler/setup\"\n\ntask default: :test\n\ndesc \"Publish new release\"\ntask :publish do\n  sh(\"git push --tags\")\n  sh(\"npm publish\")\nend\n\ndesc \"Open your default browser with the test page\"\ntask :test do\n  sh(\"open test/index.html\")\nend\n\ndesc \"Automatically wrap given locale files in UMD declarations\"\ntask :umd, [:files] do |t, args|\n    def indent(str)\n        indented = str.split(\"\\n\").map do |line|\n          \"  #{line}\"\n        end\n        indented.join(\"\\n\")\n    end\n\n    def wrap_in_umd(str)\n      <<~HEREDOC\n        (function (factory) {\n          if (typeof define === 'function' && define.amd) {\n            define(['jquery'], factory);\n          } else if (typeof module === 'object' && typeof module.exports === 'object') {\n            factory(require('jquery'));\n          } else {\n            factory(jQuery);\n          }\n        }(function (jQuery) {\n        #{indent(str)}\n        }));\n      HEREDOC\n    end\n\n    matches = Dir.glob(args[:files])\n    puts \"Pattern did not match any file\" if matches.length == 0\n    matches.each do |file|\n        input = File.read(file)\n        base = Pathname.new(file).basename\n        output = File.open(\"locales/#{base}\", \"w\")\n        output.write(wrap_in_umd(input))\n        output.close\n    end\nend\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.1689453125,
          "content": "{\n  \"name\": \"jquery-timeago\",\n  \"license\": \"MIT\",\n  \"main\": \"jquery.timeago.js\",\n  \"ignore\": [\n    \"test\",\n    \"vendor\"\n  ],\n  \"dependencies\": {\n    \"jquery\": \">=1.4\"\n  }\n}\n"
        },
        {
          "name": "clock.png",
          "type": "blob",
          "size": 5.400390625,
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.6875,
          "content": "{\n  \"name\": \"rmm5t/jquery-timeago\",\n  \"description\": \"jQuery plugin that makes it easy to support automatically updating fuzzy timestamps (e.g. \\\"4 minutes ago\\\" or \\\"about 1 day ago\\\").\",\n  \"license\": \"MIT\",\n  \"homepage\": \"http://timeago.yarp.com/\",\n  \"authors\": [\n    {\n      \"name\": \"Ryan McGeary\",\n      \"email\": \"ryan@mcgeary.org\"\n    }\n  ],\n  \"support\": {\n    \"issues\": \"https://github.com/rmm5t/jquery-timeago/issues\"\n  },\n  \"keywords\": [\n    \"time\",\n    \"microformat\"\n  ],\n  \"require\": {\n    \"components/jquery\": \">=1.5.0 <4.0\"\n  },\n  \"extra\": {\n    \"component\": {\n      \"scripts\": [\n        \"jquery.timeago.js\"\n      ],\n      \"files\": [\n        \"locales/jquery.timeago.*.js\"\n      ]\n    }\n  }\n}\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 10.521484375,
          "content": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <meta name=\"microid\" content=\"mailto+http:sha1:566841e568e84b46c92d2291b44b836dfddc5c42\" />\n    <title>timeago: a jQuery plugin</title>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js\"></script>\n    <script src=\"jquery.timeago.js\" type=\"text/javascript\"></script>\n    <script src=\"test/test_helpers.js\" type=\"text/javascript\"></script>\n    <script type=\"text/javascript\">\n      jQuery(document).ready(function($) {\n        prepareDynamicDates();\n        $(\".timeago\").timeago();\n\n        $(\"#prog_date\").text(jQuery.timeago(new Date()));\n        $(\"#prog_string\").text(jQuery.timeago(\"2008-07-17\"));\n        $(\"#prog_element\").text(jQuery.timeago(\"2008-07-20\"));\n      });\n\n    </script>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/github-fork-ribbon-css/0.2.0/gh-fork-ribbon.min.css\" />\n    <style>\n      * { margin: 0; padding: 0; }\n      body { font-family: Helvetica,Arial,sans-serif; color: #333; background-color: #ccc; font-size: 16px; line-height: 24px; }\n      h1 { margin: 0; font-size: 60px; line-height: 100px; text-align: center; }\n      h2 { margin: -30px 0 40px 50px; font-size: 20px; line-height: 20px; text-align: center; color: #999; }\n      h3 { margin: 24px 0 6px 0; font-size: 18px; line-height: 18px; border-bottom: 1px solid #ccc; }\n      h1 img { vertical-align: middle; }\n      p { margin: 0 0 24px 0; }\n      p.example { margin: 0 0 12px 0; }\n      p.how, p.last { margin: 0; }\n      ul { margin: 0 24px 24px; }\n      li { line-height: 24px; }\n      pre { background-color: #333; color: #fff; margin: 12px 0; font-size: 12px; padding: 0 6px; }\n      pre em { font-style: normal; background-color: #554; }\n      pre, tt { font-family: monaco, \"courier new\", mono, monospace; }\n      abbr[title], time[title] { border-bottom: 1px dotted #333; }\n      tt { font-size: 14px; }\n      a { color: #06e; padding: 1px; }\n      em { font-style: normal; background-color: #feb; }\n      a:hover { background-color: #06c; color: #fff; text-decoration: none; }\n      #content { margin:0 auto; padding: 24px; width:700px; background-color:#fff; border: 1px solid #999; border-width: 0 1px 1px 1px; }\n      #footer { margin:0 auto 24px; padding: 12px; width:700px; line-height: 24px; }\n      .help { font-size: 14px; color: #888; }\n      .github-fork-ribbon:before { background-color: #f80; }\n    </style>\n    <!-- Google Analytics -->\n    <script>\n      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n              (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\n      ga('create', 'UA-2856277-2', 'auto');\n      ga('send', 'pageview');\n    </script>\n    <!-- End Google Analytics -->\n  </head>\n  <body>\n    <div id=\"content\">\n      <h1><img src=\"clock.png\" /> timeago</h1>\n      <h2>a jQuery plugin</h2>\n\n      <h3>What?</h3>\n      <p>\n        Timeago is a jQuery plugin that makes it easy to support automatically updating fuzzy\n        timestamps (e.g. \"4 minutes ago\" or \"about 1 day ago\").  <a href=\"jquery.timeago.js\">Download</a>, view\n        the examples, and enjoy.\n      </p>\n      <noscript><p class=\"example\"><strong>Whoah, whoah, whoah. You see the irony here, don't you? You're looking for a jQuery plugin, yet you surf the Internet with JavaScript turned off. This confuses the Interwebs. Afterall, there might be some useful demos and such that you could enjoy, but instead, you're wasting your time reading this. I'm so sorry.</strong></p></noscript>\n      <p class=\"example\">\n        You opened this page <time class=\"loaded timeago\">when you opened the page</time>. <span class=\"help\">(This will update every minute. Wait for it.)</span>\n      </p>\n      <p class=\"example\">\n        This page was last modified <time class=\"modified timeago\">sometime before now [browser might not support document.lastModified]</time>.\n      </p>\n      <p class=\"example\">\n        Ryan was born <time class=\"timeago\" datetime=\"1978-12-18T17:17:00Z\">Dec 18, 1978</time>.\n      </p>\n\n      <h3>Why?</h3>\n      <p>Timeago was originally built for use with <a href=\"http://yarp.com\">Yarp.com</a> to timestamp comments.</p>\n      <ul>\n        <li>Avoid timestamps dated \"1 minute ago\" even though the page was opened 10 minutes ago; <em>timeago refreshes automatically</em>.</li>\n        <li>You can <em>take full advantage of page caching</em> in your web applications, because the timestamps aren't calculated on the server.</li>\n        <li>You get to <em>use standard HTML5 tags</em>.</li>\n      </ul>\n\n      <h3>How?</h3>\n      <p class=\"how\">\n        First, load <a href=\"http://jquery.com/\">jQuery</a> and the plugin:\n      </p>\n      <pre>\n&lt;script src=&quot;jquery.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;jquery.timeago.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</pre>\n      <p class=\"how\">\n        Now, let's attach it to your timestamps on DOM ready:\n      </p>\n      <pre>\njQuery(document).ready(function() {\n  jQuery(\"time.timeago\").timeago();\n});</pre>\n      <p class=\"how\">\n        This will turn all <tt>time</tt> elements with a class\n        of <tt>timeago</tt> and an <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> timestamp in the datetime:\n      </p>\n      <pre>\n&lt;time class=&quot;<em>timeago</em>&quot; datetime=&quot;<em>2008-07-17T09:24:17Z</em>&quot;&gt;July 17, 2008&lt;/time&gt;</pre>\n      <p class=\"how\">\n        into something like this:\n      </p>\n      <pre>\n&lt;time class=&quot;timeago&quot; datetime=&quot;<em>2008-07-17T09:24:17Z</em>&quot; title=&quot;July 17, 2008&quot;&gt;<em><time class=\"timeago\" datetime=\"2008-07-17T09:24:17Z\">time ago</time></em>&lt;/time&gt;</pre>\n      <p>\n        which yields: <time class=\"timeago\" datetime=\"2008-07-17T09:24:17Z\">July 17, 2008</time>.  As time passes, the timestamps will automatically update.\n      </p>\n\n      <p class=\"how\">\n        You can also use it programmatically:\n      </p>\n      <pre>\njQuery.timeago(new Date());             //=> &quot;<span id=\"prog_date\"></span>&quot;\njQuery.timeago(\"2008-07-17\");           //=> &quot;<span id=\"prog_string\"></span>&quot;\njQuery.timeago(jQuery(\"time#some_id\")); //=> &quot;<span id=\"prog_element\"></span>&quot;     // [title=&quot;2008-07-20&quot;]</pre>\n\n      <p class=\"how\">\n        To support timestamps in the future, use the <tt>allowFuture</tt> setting:\n      </p>\n      <pre>\njQuery.timeago.settings.allowFuture = true;</pre>\n\n      <p class=\"how\">\n        To disable timestamps in the past, use the <tt>allowPast</tt> setting.\n        This setting is set to true by default. When set to false, if the time is in the past then instead of displaying a message like \"5 minutes ago\" a static message will be displayed.\n        The static message displayed can be configured with the <tt>strings.inPast</tt> setting:\n      </p>\n      <pre>\njQuery.timeago.settings.strings.inPast = \"time has elapsed\";\njQuery.timeago.settings.allowPast = false;</pre>\n\n      <h3>Excusez-moi?</h3>\n      <p>\n        Yes, timeago has locale/i18n/language support.  Here are some <a href=\"https://github.com/rmm5t/jquery-timeago/tree/master/locales\">configuration examples</a>.  Please submit a <a href=\"https://github.com/rmm5t/jquery-timeago\">GitHub pull request</a> for corrections or additional languages.\n      </p>\n\n      <h3>Where?</h3>\n      <p><a href=\"jquery.timeago.js\">Download the &quot;stable&quot; release</a>.</p>\n      <p>\n        The code is hosted on\n        GitHub: <a href=\"http://github.com/rmm5t/jquery-timeago\">http://github.com/rmm5t/jquery-timeago</a>.\n        Go on, live on the edge.\n      </p>\n\n      <h3>Who?</h3>\n      <p>\n        Timeago was built by <a href=\"http://ryan.mcgeary.org\">Ryan McGeary</a>\n        (<a href=\"http://twitter.com/rmm5t\">@rmm5t</a>) while standing on the\n        shoulders of giants.  John Resig wrote about\n        a <a href=\"http://ejohn.org/blog/javascript-pretty-date/\">similar\n        approach</a>.  The verbiage was based on\n        the <tt>distance_of_time_in_words</tt> ActionView helper\n        in <a href=\"http://rubyonrails.org\">Ruby on Rails</a>.\n      </p>\n\n      <h3>When?</h3>\n      <p>\n        Timeago was conceived <time class=\"timeago\" datetime=\"2008-07-17T07:30:00-0500\">on July 17, 2008</time>.  <span class=\"help\">(Yup, that's powered by timeago too)</span>\n      </p>\n\n      <h3>What else?</h3>\n      <p class=\"example\">\n        The HTML5 <tt>time</tt> tag is strongly recommended, but the legacy <a href=\"http://microformats.org/wiki/datetime-design-pattern\">datetime microformat</a> using the <tt>abbr</tt> tag ( or any other HTML element ) is also supported:\n      </p>\n      <pre>\n&lt;abbr class=&quot;<em>timeago</em>&quot; title=&quot;<em>2008-07-17T09:24:17Z</em>&quot;&gt;July 17, 2008&lt;/abbr&gt;</pre>\n      <p class=\"how\">\n        Attach timeago like so:\n      </p>\n      <pre>\njQuery(document).ready(function() {\n  jQuery(\"abbr.timeago\").timeago();\n});</pre>\n\n      <p>\n        Are you concerned about time zone support? Don't be. Timeago handles\n        this too. As long as your timestamps are\n        in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format\n        and include a\n        full <a href=\"http://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators\">time\n        zone designator</a> (Â±hhmm), everything should work out of the box\n        regardless of the time zone that your visitors live in.\n      </p>\n\n      <h3>Huh?</h3>\n      <p class=\"last\">\n        Need a Rails helper to make those fancy microformat <tt>time</tt> tags?  Fine, here ya go:\n      </p>\n      <pre>\ndef timeago(time, options = {})\n  options[:class] ||= \"timeago\"\n  content_tag(:time, time.to_s, options.merge(datetime: time.getutc.iso8601)) if time\nend</pre>\n\n      <h3>Do you use Timeago?</h3>\n\n      <p>\n        Great! Please add your site to the list\n        of <a href=\"https://github.com/rmm5t/jquery-timeago/wiki/Sites-that-use-Timeago\">Sites\n        that use Timeago</a>.\n      </p>\n\n    </div>\n    <div id=\"footer\">\n      <div style=\"float:right;\">\n        <a href=\"http://www.opensource.org/licenses/mit-license.php\">MIT\n        License</a>\n      </div>\n      Copyright &copy; 2008-2019 <a href=\"http://ryan.mcgeary.org\">Ryan McGeary</a>\n      (<a href=\"http://twitter.com/rmm5t\">@rmm5t</a>)\n    </div>\n\n    <a class=\"github-fork-ribbon\" href=\"http://github.com/rmm5t/jquery-timeago\" title=\"Fork me on GitHub\">Fork me on GitHub</a>\n  </body>\n</html>\n"
        },
        {
          "name": "jquery.timeago.js",
          "type": "blob",
          "size": 7.23046875,
          "content": "/**\n * Timeago is a jQuery plugin that makes it easy to support automatically\n * updating fuzzy timestamps (e.g. \"4 minutes ago\" or \"about 1 day ago\").\n *\n * @name timeago\n * @version 1.6.7\n * @requires jQuery >=1.5.0 <4.0\n * @author Ryan McGeary\n * @license MIT License - http://www.opensource.org/licenses/mit-license.php\n *\n * For usage and examples, visit:\n * http://timeago.yarp.com/\n *\n * Copyright (c) 2008-2019, Ryan McGeary (ryan -[at]- mcgeary [*dot*] org)\n */\n\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof module === 'object' && typeof module.exports === 'object') {\n    factory(require('jquery'));\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n}(function ($) {\n  $.timeago = function(timestamp) {\n    if (timestamp instanceof Date) {\n      return inWords(timestamp);\n    } else if (typeof timestamp === \"string\") {\n      return inWords($.timeago.parse(timestamp));\n    } else if (typeof timestamp === \"number\") {\n      return inWords(new Date(timestamp));\n    } else {\n      return inWords($.timeago.datetime(timestamp));\n    }\n  };\n  var $t = $.timeago;\n\n  $.extend($.timeago, {\n    settings: {\n      refreshMillis: 60000,\n      allowPast: true,\n      allowFuture: false,\n      localeTitle: false,\n      cutoff: 0,\n      autoDispose: true,\n      strings: {\n        prefixAgo: null,\n        prefixFromNow: null,\n        suffixAgo: \"ago\",\n        suffixFromNow: \"from now\",\n        inPast: \"any moment now\",\n        seconds: \"less than a minute\",\n        minute: \"about a minute\",\n        minutes: \"%d minutes\",\n        hour: \"about an hour\",\n        hours: \"about %d hours\",\n        day: \"a day\",\n        days: \"%d days\",\n        month: \"about a month\",\n        months: \"%d months\",\n        year: \"about a year\",\n        years: \"%d years\",\n        wordSeparator: \" \",\n        numbers: []\n      }\n    },\n\n    inWords: function(distanceMillis) {\n      if (!this.settings.allowPast && ! this.settings.allowFuture) {\n          throw 'timeago allowPast and allowFuture settings can not both be set to false.';\n      }\n\n      var $l = this.settings.strings;\n      var prefix = $l.prefixAgo;\n      var suffix = $l.suffixAgo;\n      if (this.settings.allowFuture) {\n        if (distanceMillis < 0) {\n          prefix = $l.prefixFromNow;\n          suffix = $l.suffixFromNow;\n        }\n      }\n\n      if (!this.settings.allowPast && distanceMillis >= 0) {\n        return this.settings.strings.inPast;\n      }\n\n      var seconds = Math.abs(distanceMillis) / 1000;\n      var minutes = seconds / 60;\n      var hours = minutes / 60;\n      var days = hours / 24;\n      var years = days / 365;\n\n      function substitute(stringOrFunction, number) {\n        var string = $.isFunction(stringOrFunction) ? stringOrFunction(number, distanceMillis) : stringOrFunction;\n        var value = ($l.numbers && $l.numbers[number]) || number;\n        return string.replace(/%d/i, value);\n      }\n\n      var words = seconds < 45 && substitute($l.seconds, Math.round(seconds)) ||\n        seconds < 90 && substitute($l.minute, 1) ||\n        minutes < 45 && substitute($l.minutes, Math.round(minutes)) ||\n        minutes < 90 && substitute($l.hour, 1) ||\n        hours < 24 && substitute($l.hours, Math.round(hours)) ||\n        hours < 42 && substitute($l.day, 1) ||\n        days < 30 && substitute($l.days, Math.round(days)) ||\n        days < 45 && substitute($l.month, 1) ||\n        days < 365 && substitute($l.months, Math.round(days / 30)) ||\n        years < 1.5 && substitute($l.year, 1) ||\n        substitute($l.years, Math.round(years));\n\n      var separator = $l.wordSeparator || \"\";\n      if ($l.wordSeparator === undefined) { separator = \" \"; }\n      return $.trim([prefix, words, suffix].join(separator));\n    },\n\n    parse: function(iso8601) {\n      var s = $.trim(iso8601);\n      s = s.replace(/\\.\\d+/,\"\"); // remove milliseconds\n      s = s.replace(/-/,\"/\").replace(/-/,\"/\");\n      s = s.replace(/T/,\" \").replace(/Z/,\" UTC\");\n      s = s.replace(/([\\+\\-]\\d\\d)\\:?(\\d\\d)/,\" $1$2\"); // -04:00 -> -0400\n      s = s.replace(/([\\+\\-]\\d\\d)$/,\" $100\"); // +09 -> +0900\n      return new Date(s);\n    },\n    datetime: function(elem) {\n      var iso8601 = $t.isTime(elem) ? $(elem).attr(\"datetime\") : $(elem).attr(\"title\");\n      return $t.parse(iso8601);\n    },\n    isTime: function(elem) {\n      // jQuery's `is()` doesn't play well with HTML5 in IE\n      return $(elem).get(0).tagName.toLowerCase() === \"time\"; // $(elem).is(\"time\");\n    }\n  });\n\n  // functions that can be called via $(el).timeago('action')\n  // init is default when no action is given\n  // functions are called with context of a single element\n  var functions = {\n    init: function() {\n      functions.dispose.call(this);\n      var refresh_el = $.proxy(refresh, this);\n      refresh_el();\n      var $s = $t.settings;\n      if ($s.refreshMillis > 0) {\n        this._timeagoInterval = setInterval(refresh_el, $s.refreshMillis);\n      }\n    },\n    update: function(timestamp) {\n      var date = (timestamp instanceof Date) ? timestamp : $t.parse(timestamp);\n      $(this).data('timeago', { datetime: date });\n      if ($t.settings.localeTitle) {\n        $(this).attr(\"title\", date.toLocaleString());\n      }\n      refresh.apply(this);\n    },\n    updateFromDOM: function() {\n      $(this).data('timeago', { datetime: $t.parse( $t.isTime(this) ? $(this).attr(\"datetime\") : $(this).attr(\"title\") ) });\n      refresh.apply(this);\n    },\n    dispose: function () {\n      if (this._timeagoInterval) {\n        window.clearInterval(this._timeagoInterval);\n        this._timeagoInterval = null;\n      }\n    }\n  };\n\n  $.fn.timeago = function(action, options) {\n    var fn = action ? functions[action] : functions.init;\n    if (!fn) {\n      throw new Error(\"Unknown function name '\"+ action +\"' for timeago\");\n    }\n    // each over objects here and call the requested function\n    this.each(function() {\n      fn.call(this, options);\n    });\n    return this;\n  };\n\n  function refresh() {\n    var $s = $t.settings;\n\n    //check if it's still visible\n    if ($s.autoDispose && !$.contains(document.documentElement,this)) {\n      //stop if it has been removed\n      $(this).timeago(\"dispose\");\n      return this;\n    }\n\n    var data = prepareData(this);\n\n    if (!isNaN(data.datetime)) {\n      if ( $s.cutoff === 0 || Math.abs(distance(data.datetime)) < $s.cutoff) {\n        $(this).text(inWords(data.datetime));\n      } else {\n        if ($(this).attr('title').length > 0) {\n            $(this).text($(this).attr('title'));\n        }\n      }\n    }\n    return this;\n  }\n\n  function prepareData(element) {\n    element = $(element);\n    if (!element.data(\"timeago\")) {\n      element.data(\"timeago\", { datetime: $t.datetime(element) });\n      var text = $.trim(element.text());\n      if ($t.settings.localeTitle) {\n        element.attr(\"title\", element.data('timeago').datetime.toLocaleString());\n      } else if (text.length > 0 && !($t.isTime(element) && element.attr(\"title\"))) {\n        element.attr(\"title\", text);\n      }\n    }\n    return element.data(\"timeago\");\n  }\n\n  function inWords(date) {\n    return $t.inWords(distance(date));\n  }\n\n  function distance(date) {\n    return (new Date().getTime() - date.getTime());\n  }\n\n  // fix for IE6 suckage\n  document.createElement(\"abbr\");\n  document.createElement(\"time\");\n}));\n"
        },
        {
          "name": "locales",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.9736328125,
          "content": "{\n  \"name\": \"timeago\",\n  \"version\": \"1.6.7\",\n  \"title\": \"jQuery Timeago\",\n  \"author\": {\n    \"name\": \"Ryan McGeary\",\n    \"email\": \"ryan@mcgeary.org\",\n    \"url\": \"http://ryan.mcgeary.org/\"\n  },\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://opensource.org/licenses/mit-license.php\"\n    }\n  ],\n  \"dependencies\": {\n    \"jquery\": \">=1.5.0 <4.0\"\n  },\n  \"description\": \"jQuery plugin that makes it easy to support automatically updating fuzzy timestamps (e.g. \\\"4 minutes ago\\\" or \\\"about 1 day ago\\\").\",\n  \"keywords\": [\n    \"time\",\n    \"microformat\"\n  ],\n  \"homepage\": \"http://timeago.yarp.com/\",\n  \"docs\": \"https://github.com/rmm5t/jquery-timeago\",\n  \"demo\": \"http://timeago.yarp.com/\",\n  \"download\": \"http://timeago.yarp.com/jquery.timeago.js\",\n  \"bugs\": \"https://github.com/rmm5t/jquery-timeago/issues\",\n  \"maintainers\": [],\n  \"spm\": {\n    \"main\": \"jquery.timeago.js\"\n  },\n  \"browser\": {\n    \"timeago\": \"./node_modules/timeago/jquery.timeago.js\"\n  },\n  \"main\": \"jquery.timeago.js\"\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "timeago.jquery.json",
          "type": "blob",
          "size": 0.8203125,
          "content": "{\n  \"name\": \"timeago\",\n  \"version\": \"1.6.7\",\n  \"title\": \"jQuery Timeago\",\n  \"author\": {\n    \"name\": \"Ryan McGeary\",\n    \"email\": \"ryan@mcgeary.org\",\n    \"url\": \"http://ryan.mcgeary.org/\"\n  },\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://opensource.org/licenses/mit-license.php\"\n    }\n  ],\n  \"dependencies\": {\n    \"jquery\": \">=1.5.0 <4.0\"\n  },\n  \"description\": \"jQuery plugin that makes it easy to support automatically updating fuzzy timestamps (e.g. \\\"4 minutes ago\\\" or \\\"about 1 day ago\\\").\",\n  \"keywords\": [\n    \"time\",\n    \"microformat\"\n  ],\n  \"homepage\": \"http://timeago.yarp.com/\",\n  \"docs\": \"https://github.com/rmm5t/jquery-timeago\",\n  \"demo\": \"http://timeago.yarp.com/\",\n  \"download\": \"http://timeago.yarp.com/jquery.timeago.js\",\n  \"bugs\": \"https://github.com/rmm5t/jquery-timeago/issues\",\n  \"maintainers\": []\n}\n"
        }
      ]
    }
  ]
}