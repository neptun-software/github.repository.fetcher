{
  "metadata": {
    "timestamp": 1736561789681,
    "page": 432,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wendux/fly",
      "stars": 3904,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0458984375,
          "content": ".idea\n.DS_Store\n/node_modules\npackage-lock.json"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.060546875,
          "content": "/extend\nnode_modules/\nbuild.js\npackage-lock.json\n/demon\n.idea/"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0849609375,
          "content": "language: node_js\nnode_js:\n  - node\ninstall:\n  - npm install -g codecov\n  - npm install"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.5341796875,
          "content": "# Changelog\n\n### **v0.6.1** (Sep 6, 2018)\n\n+ 添加“params”配置项：\n - 可以设置公共的的get参数：fly.config.params={token:\"xxxx\"}\n - 非Get请求也可以设置Url params\n - Get请求的话会合并data和“params”\n\n- 在非浏览器环境下，响应头中有多个\"set-cookie\"字段时，headers[\"set-cookie\"]值为数组类型(之前为字符串)\n\n### **v0.5.4** (Apr 20, 2018)\n\n+ Adding `lock/unlock` API for interceptors and fly propotype.\n+ update typings file for typescript\n+ delete ~~`await`~~ that added in v0.5.2.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0380859375,
          "content": "MIT License\n\nCopyright (c) 2018 wendux\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README-EN.md",
          "type": "blob",
          "size": 22.861328125,
          "content": "[![fly.js](https://github.com/wendux/fly/raw/master/fly.png)](https://wendux.github.io/dist/#/doc/flyio/readme)\n\n[![npm version](https://img.shields.io/npm/v/flyio.svg)](https://www.npmjs.org/package/flyio)\n[![build status](https://travis-ci.org/wendux/fly.svg?branch=master)](https://travis-ci.org/wendux/fly)\n[![coverage](https://img.shields.io/codecov/c/github/wendux/fly/master.svg)](https://codecov.io/github/wendux/fly?branch=master)\n[![size](https://img.shields.io/github/size/wendux/fly/dist/fly.min.js.svg)](https://unpkg.com/flyio@0.3.1/dist/fly.min.js)\n![platform](https://img.shields.io/badge/platforms-All%20JavaScript%20Runtimes-blue.svg)\n\n## Fly.js\n\nSupporting request forwarding and Promise based HTTP client for all JavaScript runtimes.\n\nChinese documentation : [中文文档](https://github.com/wendux/fly/blob/master/README.md)\n\n\n\n### Browser Support\n\n| ![Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Edge](https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png) | ![IE](https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png) |\n| ---------------------------------------- | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- |\n| ✔                                        | ✔                                        | ✔                                        | ✔                                        | ✔                                        | > 8                                      |\n\n### Other Platforms  Support\n<table>\n    <tbody>\n    <tr>\n        <td align=\"center\" valign=\"middle\">\n            <a href=\"https://nodejs.org/\">\n                <img  src=\"https://github.com/wendux/fly/raw/master/imgs/node.png\" alt=\"node logo\">\n            </a>\n        </td>\n        <td align=\"center\" valign=\"middle\">\n            <a href=\"https://mp.weixin.qq.com/\">\n                <img  src=\"https://github.com/wendux/fly/raw/master/imgs/mp.png\" alt=\"Mini Program logo\">\n            </a>\n        </td>\n        <td align=\"center\" valign=\"middle\">\n            <a href=\"http://facebook.github.io/react-native/\">\n                <img  src=\"https://github.com/wendux/fly/raw/master/imgs/rn.png\" alt=\"mpvue logo\">\n            </a>\n        </td>\n        <td align=\"center\" valign=\"middle\">\n            <a href=\"http://weex.apache.org/\">\n                <img  src=\"https://github.com/wendux/fly/raw/master/imgs/weex.png\" alt=\"weex logo\">\n            </a>\n        </td>\n        <td align=\"center\" valign=\"middle\">\n            <a href=\"https://www.quickapp.cn/\">\n                <img  src=\"https://github.com/wendux/fly/raw/master/imgs/hp.png\" alt=\"quick app logo\">\n            </a>\n        </td>\n    </tr>\n    </tbody>\n</table>  \n\nCurrently the platforms that fly.js supported include  [Node.js](https://nodejs.org/) 、[WeChat Mini Program](https://mp.weixin.qq.com/cgi-bin/wx) 、[Weex](http://weex.apache.org/) 、[React Native](http://facebook.github.io/react-native/) 、[Quick App](https://www.quickapp.cn/) and the browers, all  JavaScript runtimes of these are different. More platforms  are supporting...\n\n## Features\n\n1. Supports the [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) API\n2. Make [XMLHttpRequests](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) from the browser，**light-weight and very light-weight**\n3. Supports  various  JavaScript runtimes\n4. Supports  request and response interceptors。\n5. Automatic transforms for JSON data。\n6. Supports switching the underlying Http Engine, easy to adapt to various JavaScript Runtime.\n7. Supports global Ajax interception on browser\n8. Supports request forwarding in hybrid applications\n\n\n\n\n## Positioning & target\n\nFly.is  locates to be the ultimate solution for Javascript http requests. That is to say, in any environment that can execute Javascript, as long as it has the ability to access the network, Fly can run on it and provide unified APIs. At the same time, keep lightweight on the browser side.\n\n\n\n## Documentation\n\nYou can find the Fly documentation [on the offical website](https://wendux.github.io/dist/#/language).\n\n[中文文档](https://wendux.github.io/dist/#/doc/flyio/readme)\n\n## Installing\n\nUsing npm \n\n```shell\nnpm install flyio\n```\n\nUsing CDN （on browsers）\n\n```javascript\n<script src=\"https://cdn.jsdelivr.net/npm/flyio/dist/fly.min.js\"></script>\n```\n\nUMD （on browsers）\n\n```http\nhttps://cdn.jsdelivr.net/npm/flyio/dist/umd/fly.umd.min.js\n```\n\n\n\n## Require flyio\n\nThe entry files of  different JavaScript Runtimes may be different, you can refer on the below，\nbut the entries of  Browsers, Node, and React Native are the same。each requirement  ways  of these platforms are as follows:\n\n1. Requiring On browsers、Node、React Native\n\n   ```javascript\n   //for Browsers, Node, and React Native\n   var fly=require(\"flyio\")\n   ```\n\n   The above method requires the default instance of Fly, and you can also create an Fly instance by yourself:\n\n   ```javascript\n   // for browsers and React Native\n   var Fly=require(\"flyio/dist/npm/fly\")\n   // for Node\n   //var Fly=require(\"flyio/src/node\")\n   var fly=new Fly;\n   ```\n\n2. Requiring on WeChat Mini Program\n\n   ```javascript\n   var Fly=require(\"flyio/dist/npm/wx\") \n   var fly=new Fly\n   ```\n\n   If your  project does not use NPM to manage dependencies, you can download the source code directly to your project 。The download links are [wx.js](https://github.com/wendux/fly/tree/master/dist/npm/wx.js) or  [wx.umd.min.js](https://github.com/wendux/fly/tree/master/dist/umd/wx.umd.min.js)  . Download any one, save it to your project directory (assuming named \"lib\") , and then requiring:\n\n   ```javascript\n   var Fly=require(\"../lib/wx\") \n   var fly=new Fly; \n   ```\n\n3. Requiring on Quick App\n\n   On [Quick App](https://www.quickapp.cn/), Fly relies on the `fetch` module, which needs to be defined in the manifest.json first:\n\n   ```java\n     \"features\": [\n        ...\n       {\"name\": \"system.fetch\"}\n     ]\n   ```\n\n   And then create Fly instance:\n\n   ```javascript\n    var fetch = require(\"@system.fetch\")\n    var Fly=require(\"flyio/dist/npm/hap\")\n    var fly=new Fly(fetch)\n   ```\n\n4. Requiring on Weex\n\n   ```javascript\n   var Fly=require(\"flyio/dist/npm/weex\")\n   var fly=new Fly\n   ```\n\nAfter the requirement, you can make the global configuration and add the interceptor to `fly` , and peform network request with `fly`.\n\n## Example\n\nThe following example, if not specified, can be executed in all JavaScript Runtimes.\n\n### Performing a `GET` request\n\n```javascript\nvar fly=require(\"flyio\")\n// Make a request for a user with a given ID,  and the parameter is passed directly in URL\nfly.get('/user?id=133')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n// The parameter is passed by a object\nfly.get('/user', {\n      id: 133\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\n### Performing a `POST` request\n\n```javascript\nfly.post('/user', {\n    name: 'Doris',\n    age: 24\n    phone:\"18513222525\"\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\n### `POST` request with Url params\n\n```javascript\nfly.get(\"../package.json\", \"xxx=5\", {\n        params: {\n            c: 1\n        }\n    }\n)\n```\n\nThe final url is \"package.json?c=1&xxx=5\".\n\n### Performing multiple concurrent requests\n\n```javascript\nfunction getUserRecords() {\n  return fly.get('/user/133/records');\n}\n\nfunction getUserProjects() {\n  return fly.get('/user/133/projects');\n}\n\nfly.all([getUserRecords(), getUserProjects()])\n  .then(fly.spread(function (records, projects) {\n    // Both requests are now complete\n  }))\n  .catch(function(error){\n    console.log(error)\n  })\n```\n\n### Performing the request by `request`\n\n```javascript\nfly.request(\"/test\",{hh:5},{\n    method:\"post\",\n    timeout:5000 // Set timeout to 5 seconds\n })\n.then(d=>{ console.log(\"request result:\",d)})\n.catch((e) => console.log(\"error\", e))\n```\n\n\n\n### Sending `URLSearchParams`\n\n```javascript\nconst params = new URLSearchParams();\nparams.append('a', 1);\nfly.post(\"\",params)\n.then(d=>{ console.log(\"request result:\",d)})\n```\n\n> Note that `URLSearchParams` is not supported by all browsers (see [caniuse.com](http://www.caniuse.com/#feat=urlsearchparams)), but there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\n### Sending `FormData`\n\n```javascript\n var formData = new FormData();\n var log=console.log\n formData.append('username', 'Chris');\n fly.post(\"../package.json\",formData).then(log).catch(log)\n```\n\n> Note that `FormData` is not supported by all browsers (see [caniuse.com](http://www.caniuse.com/#feat=urlsearchparams)), but there is a [polyfill](https://github.com/form-data/form-data) available (make sure to polyfill the global environment).  And there are some differences on the way to support formData in node environment. Please click [here](#/doc/flyio/node) for more details\n\n### Requesting Stream\n\n```javascript\nfly.get(\"/Fly/v.png\",null,{\n\tresponseType:\"arraybuffer\"\n}).then(d=>{\n  //d.data is a ArrayBuffer instance\n})\n```\n\n> In browser, the value of responseType can be one of \"arraybuffer\" or \"blob\". In node, you can just set it as \"stream\"\n>\n\n## interceptors\n\nYou can intercept requests or responses before they are handled by `then` or `catch`.\n\n```javascript\n\n// Add a request interceptor\nfly.interceptors.request.use((request)=>{\n    // Do something before request is sent\n    request.headers[\"X-Tag\"]=\"flyio\";\n  \tconsole.log(request.body)\n    // Complete the request with custom data\n    // return Promise.resolve(\"fake data\")\n})\n\n// Add a response interceptor\nfly.interceptors.response.use(\n    (response) => {\n      // Do something with response data .\n      // Just return the data field of response\n      return response.data\n    },\n    (err) => {\n      // Do something with response error\n      //return Promise.resolve(\"ssss\")\n    }\n)\n```\n\nThe structures of the `request ` object in request interceptor.\n\n```javascript\n{\n  baseURL,  //base url\n  body, // request parameters\n  headers, //custom request headers\n  method, // http request method\n  timeout, // request time\n  url, // request url (or relative path)\n  withCredentials, // determine whether sending thirdparty cookies in cross-domain request\n  ... // custom field defined in options\n}\n```\n\nThe structures of the `response` object in response interceptor.\n\n```javascript\n{\n  data, //response data\n  engine, //http engine,In browser,it's a instance of XMLHttpRequest.\n  headers, //response headers\n  request  //the origin request object\n}\n```\n\n### Remove interceptors \n\nIf you may need to remove an interceptor later,    just set it to null.\n\n```javascript\nfly.interceptors.request.use(null)\nfly.interceptors.response.use(null,null)\n```\n\n### Perform  an async task in  interceptors\n\nNow,  you can perform  async task in interceptors !\n\nLet's see an example:\n\nbecause of security reasons, we need all the requests to set up a csrfToken in the header, if csrfToken does not exist, we need to request a csrfToken first, and then perform the network request, because the request csrfToken progress is asynchronous, so we need to execute  this async request in request interceptor. the code is as follows:\n\n```javascript\nvar csrfToken=\"\";\nvar tokenFly=new Fly();\nvar fly=new Fly();\nfly.interceptors.request.use(function (request) {\n    //if csrfToken does not exist, we need to request a csrfToken first\n    if(!csrfToken) {\n         // locking the current instance, let the incomming request task enter a \n         // queue before they enter the request interceptors.\n         fly.lock();\n         //Using  another fly instance to request csrfToken.\n         //If use the same fly instance, there may lead a infinite loop:\n         //(The request will go to the interceptor first, and then\n         //enter the interceptor again when launching the new request \n         //in the interceptor....)\n         return tokenFly.get(\"/token\").then((d)=>{\n            request.headers[\"csrfToken\"]=csrfToken=d.data.data.token;\n            //only return the origin `request` object can make the http request continue.\n            // otherwise, the return data will be teated as \"response\" data.\n            return request \n          }).finally(()=>{\n           //fly.clear(); //clear the request queue\n           // unlock the current instance, flush the request queue.   \n           fly.unlock()\n         })  \n        \n    }else {\n        request.headers[\"csrfToken\"]= csrfToken;\n        //This line can be omitted. \n        //If the interceptor doesn't return value, `request` will be used by default.\n        return request \n    }\n})\n```\n\n**Note**: \n\n1. The current fly instance will be locked  when call `fly.lock()` . Once  the fly instance is locked,  the incomming request task maked by it will be hang up and enter a queue before they enter the request interceptors, you can call `fly.unlock()` to continue the requests or call `fly.clear()` to cancel the requests in the queue.\n2. **Only when you return the `request` object  passed by interceptor at the final , the origin http request  will be continued**.  \n\nAnd you can also make an async task in the **response** interceptor. More information about interceptors and examples refer to [flyio interceptor](https://wendux.github.io/dist/#/doc/flyio/interceptor).\n\n## Error handling\n\nIf  the request fails, `catch`  will be called;  the error object's fields as follows :\n\n```javascript\n{\n  message:\"Not Find 404\", //error description\n  status:404, // error code\n  request:{...}, //the request info\n  response:{...}, //the error response,\n  engine:{}, // The Http engine, it's a instance of XmlHttpRequest in browser.\n}\n```\n\n| Code  | Description                              |\n| ----- | ---------------------------------------- |\n| 0     | network error                            |\n| 1     | timeout                                  |\n| 2     | The file was downloaded successfully, but the save failed. **This error only occurred in the node environment** |\n| >=200 | http status code                         |\n\n**Example**\n\n```javascript\nfly.get('/user/12345')\n  .catch(function (error) {\n    console.log('Error', error.message);\n    console.log('Error engine:', error.engine)\n    // The request was made but no response was received\n    // `error.request` holds the request info.\n    console.log('Error request info:',error.request);\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx and 304\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.statusText);\n      console.log(error.response.headers);\n    }\n  });\n```\n\n## Request configuration options\n\n**Configurable options**：\n\n```javascript\n{\n // `method` is the request method to be used when making the request\n  method: 'get', // default\n  // `headers` are custom headers to be sent\n  headers:{},\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of fly to pass relative URLs\n  // to methods of that instance.\n  baseURL:\"\",\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout:0,  //default\n  // `parseJson` indicates whether or not it is  automatically converted response \n  //  data , the Content-Type of which is application/json, to JSON object,     \n  parseJson:true,\n  //Common URL params\n  params:{}     \n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n}\n```\n\nConfiguration supports **instance level configuration** and **single request configuration**\n\n### Instance level\n\nInstance level configuration can be applied to all requests initiated by the current Fly instance:\n\n```javascript\n// Add common headers\nfly.config.headers={xx:5,bb:6,dd:7}\n// Set timeout\nfly.config.timeout=10000;\n// Set base url\nfly.config.baseURL=\"https://wendux.github.io/\"\n// Common URL params\nfly.config.params={\"token\":\"testtoken\"}\n```\n\n### Single request configuration\n\nSingle request configuration is valid only once:\n\n```javascript\nfly.request(\"/test\",{hh:5},{\n    method:\"post\",\n    timeout:5000 //超时设置为5s\n})\n```\n\n> If the single configuration and the instance configuration conflict, the single request configuration is preferred .\n\n## API\n\n#### `fly.get(url, data, options)`\n\n#### `fly.post(url, data, options)`\n\nIn browser environment, the type of data can be:\n\n```shell\nString|Json|Object|Array|Blob|ArrayBuffer|FormData\n```\n\n`options` is the  request configuration。\n\n\n\n#### `fly.request(url, data, options)`\n\nWhen you use this API, you should explicitly specify  the method of options, and the default method is `get`\n\n```javascript\n// Perform a get request\nfly.request(\"/user/8\" null, {method:\"get\"})\n// Perform a delete request\nfly.request(\"/user/8/delete\", null, {method:\"delete\"})\n// Perform a put request\nfly.request(\"/user/register\", {name:\"doris\"}, {method:\"PUT\"})\n......\n```\n\nThis API is suitable for use in RESTful API scenarios. For convenience, the corresponding alias methods are provided\n**alias**\n\n`fly.put(url, data, options)`\n\n`fly.delete(url,data,options)`\n\n`fly.patch(url,data,options)`\n\n### Concurrency\n\nHelper functions for dealing with concurrent requests.\n\n##### `fly.all([])`\n##### `fly.spread(callback)`\n\nThe parameter of all is an array of `promise`,  `then` will be called only when all requests are successful, and` catch` will be called as long as one fails.\n\n## Using application/x-www-form-urlencoded format\n\nBy default, fly serializes JavaScript objects to `JSON`. To send data in the `application/x-www-form-urlencoded` format instead, you can use one of the following options.\n\n### By specifying `content-type` request header\n\nWhen you specify  `content-type` value as \"application/x-www-form-urlencoded\", fly will encode the request data automatically, for example：\n\n```javascript\nfly.post(\"../package.json\",{aa:8,bb:9,tt:{xx:5}},{headers:{\n    \"content-type\":\"application/x-www-form-urlencoded\"\n}})\n.then(console.log)\n```\n\nThis method is universal, which means that it can work well in any JavaScript runtime. There are also some other ways for some specific platforms:\n\n### Other ways\n\n#### Browser\n\nIn a browser, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API as follows:\n\n```js\nvar params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\nfly.post('/foo', params);\n```\n\n> Note that `URLSearchParams` is not supported by all browsers (see [caniuse.com](http://www.caniuse.com/#feat=urlsearchparams)), but there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\n\n```js\nvar qs = require('qs');\nfly.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n\n#### Node.js\n\nIn node.js, you can use the [`querystring`](https://nodejs.org/api/querystring.html) module as follows:\n\n```js\nvar querystring = require('querystring');\nfly.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\nYou can also use the [`qs`](https://github.com/ljharb/qs) library.\n\n\n\n## Promises\n\nFly depends on a native ES6 Promise implementation to be [supported](http://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\nfly includes [TypeScript](http://typescriptlang.org) definitions.\n```typescript\nimport fly from \"flyio\"\nfly.get('/user?ID=12345');\n```\n## Creating  an instance\n\nYou can create a new instance of Fly , and then apply different configurations:\n\n```javascript\n// Notice require path is  \"flyio/dist/npm/fly\"\nvar  Fly=require(\"flyio/dist/npm/fly\")\nvar nFly=new Fly();\n// Apply different configurations\nnFly.config.timeout=15000\nnfly.interceptors.request.use(...)\n```\n\n\n\n## Http Engine\n\nFly introduces the concept of Http Engine, and Http Engine is the engine that really initiates http requests. This is typically XMLHttpRequest in browser environment, and in Node environments, any module or library that can initiate a network request can be implemented. Fly can switch the Http Engine freely. In fact, Fly is implemented by switching Http Engine, supporting both the browser environment and the Node environment.However, Http Engine is not limited to Node and browser environment, also can be Android, IOS, electron and so on, it is because of these, Fly has a very unique and powerful feature \"request forwarding\". Based on the request forwarding, we can implement some useful functions, such as redirecting all the HTTP requests of the hybrid application to Native, and then complete the network request on natvie side.  The benefit of this is that  we can perform unified certificate validation, cookie management, access control and son on on natvie.  More details click here  [http engine](https://wendux.github.io/dist/#/doc/flyio-en/engine) .\n\n## Global Ajax interception\n\nIn browsers, you can intercept global Ajax requests by replacing XMLHttpRequest with Fly engine, regardless of what network library the upper layer uses.  More details click here [Ajax hook](https://wendux.github.io/dist/#/doc/flyio-en/hook)\n\n## Using in Node\n\nWhether in browser environment or in Node environment, Fly provides a unified Promise API in the upper layer. This means that, regardless of whether you are in web development or node development, you can perform HTTP requests in the same way. However, because of the difference of node and browser environment, under the environment of Node, Fly in addition to basic API support, also provides some enhancements to the API, the API mainly involves the file download, file upload,  HTTP agents and other powerful features, please refer to [Node enhanced API](https://wendux.github.io/dist/#/doc/flyio-en/node) .\n\n\n## Size\n\nIn  browser environment, the size of a library is very important. In this regard, Fly is doing a good job, on the on hand  Fly maintains the powerful function, on the other hand, Fly control its body to the minimum. Min is only about 4.6K, and GZIP is less than 2K after compression, and the volume is 1/4 of Axios。\n\n## Project structure\n\nLearn the project structure of Fly.js please refer to : [Fly.js source structure](https://wendux.github.io/dist/#/doc/flyio-en/files) \n\n\n## Finally\n\nWelcome stars 。\n\n\n\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.4130859375,
          "content": "[English](https://github.com/wendux/fly/blob/master/README-EN.md)|中文简体\n\n[![fly.js](https://github.com/wendux/fly/raw/master/fly.png)](https://wendux.github.io/dist/#/doc/flyio/readme)\n\n[![npm version](https://img.shields.io/npm/v/flyio.svg)](https://www.npmjs.org/package/flyio)\n[![build status](https://travis-ci.org/wendux/fly.svg?branch=master)](https://travis-ci.org/wendux/fly)\n[![coverage](https://img.shields.io/codecov/c/github/wendux/fly/master.svg)](https://codecov.io/github/wendux/fly?branch=master)\n[![size](https://img.shields.io/github/size/wendux/fly/dist/fly.min.js.svg)](https://unpkg.com/flyio@0.3.1/dist/fly.min.js)\n![platform](https://img.shields.io/badge/platforms-All%20JavaScript%20Runtimes-blue.svg)\n\n## Fly.js\n\n一个支持所有JavaScript运行环境的基于Promise的、支持请求转发、强大的http请求库。可以让您在多个端上尽可能大限度的实现代码复用。\n\n\n### 浏览器支持\n\n| ![Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Edge](https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png) | ![IE](https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png) |\n| ---------------------------------------- | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- |\n| ✔                                        | ✔                                        | ✔                                        | ✔                                        | ✔                                        | > 8                                      |\n\n\n\n### 其它支持的平台\n<table>\n    <tbody>\n    <tr>\n        <td align=\"center\" valign=\"middle\">\n            <a href=\"https://nodejs.org/\">\n                <img  src=\"https://github.com/wendux/fly/raw/master/imgs/node.png\" alt=\"node logo\">\n            </a>\n        </td>\n        <td align=\"center\" valign=\"middle\">\n            <a href=\"https://mp.weixin.qq.com/\">\n                <img  src=\"https://github.com/wendux/fly/raw/master/imgs/mp.png\" alt=\"Mini Program logo\">\n            </a>\n        </td>\n        <td align=\"center\" valign=\"middle\">\n            <a href=\"http://facebook.github.io/react-native/\">\n                <img  src=\"https://github.com/wendux/fly/raw/master/imgs/rn.png\" alt=\"mpvue logo\">\n            </a>\n        </td>\n        <td align=\"center\" valign=\"middle\">\n            <a href=\"http://weex.apache.org/\">\n                <img  src=\"https://github.com/wendux/fly/raw/master/imgs/weex.png\" alt=\"weex logo\">\n            </a>\n        </td>\n        <td align=\"center\" valign=\"middle\">\n            <a href=\"https://www.quickapp.cn/\">\n                <img  src=\"https://github.com/wendux/fly/raw/master/imgs/hp.png\" alt=\"quick app logo\">\n            </a>\n</td>\n<td align=\"center\" valign=\"middle\">\n            <a href=\"https://mini.open.alipay.com/channel/miniIndex.htm\">\n<img width=\"40\" src=\"https://gw.alipayobjects.com/zos/rmsportal/kjenedafWxLSvoQqNxUF.png\" alt=\"支付宝小程序\"> 支付宝小程序\n            </a>\n        </td>\n    </tr>\n    </tbody>\n</table>  \n\n目前Fly.js支持的平台包括：[Node.js](https://nodejs.org/) 、[微信小程序](https://mp.weixin.qq.com/cgi-bin/wx) 、[Weex](http://weex.apache.org/) 、[React Native](http://facebook.github.io/react-native/) 、[Quick App](https://www.quickapp.cn/) 和浏览器，这些平台的 JavaScript 运行时都是不同的。更多的平台正在持续添加中，请保持关注。\n\n## 简介\n\nFly.js 是一个基于 promise 的，轻量且强大的Javascript http 网络库，它有如下特点：\n\n1. 提供统一的 Promise API。\n2. 浏览器环境下，**轻量且非常轻量** 。\n3. 支持多种JavaScript 运行环境\n4. 支持请求／响应拦截器。\n5. 自动转换 JSON 数据。\n6. **支持切换底层 Http Engine，可轻松适配各种运行环境**。\n7. **浏览器端支持全局Ajax拦截 。**\n8. **H5页面内嵌到原生 APP 中时，支持将 http 请求转发到 Native。支持直接请求图片**。\n\n\n\n\n\n## 定位与目标\n\nFly 的定位是成为 Javascript http请求的终极解决方案。也就是说，在任何能够执行 Javascript 的环境，只要具有访问网络的能力，Fly都能运行在其上，提供统一的API。\n\n\n\n## 官网\n\n详细的文档请移步：[Flyio官网文档](https://wendux.github.io/dist/#/language) 。 官网http请求使用的正是fly，为了方便大家验证fly功能特性，官网对fly进行了全局引入，您可以在官网页面打开控制台直接验证。\n\n[English doc](https://wendux.github.io/dist/#/doc/flyio-en/readme)\n\n\n\n## 安装\n\n使用NPM\n\n```shell\nnpm install flyio\n```\n\n使用CDN(浏览器中)\n\n```javascript\n<script src=\"https://unpkg.com/flyio/dist/fly.min.js\"></script>\n```\n\nUMD（浏览器中）\n\n```http\nhttps://unpkg.com/flyio/dist/umd/fly.umd.min.js\n```\n\n## 引入flyio\n\n**不同JavaScript运行时的入口文件不同** ，请查看文档后面相应平台的引入方式，但在浏览器、Node、React Native中引入的方式是一样的，下面是不同平台下的引入的方式：\n\n1. 浏览器、Node、React Native中引入\n\n   ```javascript\n   //引入fly实例\n   var fly=require(\"flyio\")\n   ```\n\n   上面方式引入的是Fly的默认实例（浏览器、Node、React Native中相同），你也可以自己创建Fly实例：\n\n   ```javascript\n   // 浏览器和React Native\n   var Fly=require(\"flyio/dist/npm/fly\")\n   // Node 入口\n   // var Fly=require(\"flyio/src/node\")\n   var fly=new Fly;\n   ```\n\n2. 在微信小程序中引入\n\n   ```javascript\n   var Fly=require(\"flyio/dist/npm/wx\") \n   var fly=new Fly\n   ```\n\n   如果您的微信小程序项目没有使用`npm`来管理依赖，您可以直接下载源码到您的小程序工程，下载链接[wx.js](https://github.com/wendux/fly/tree/master/dist/npm/wx.js) 或 [wx.umd.min.js](https://github.com/wendux/fly/tree/master/dist/umd/wx.umd.min.js) .下载任意一个，保存到本地工程目录，假设在“lib”目录，接下来引入：\n\n   ```javascript\n   var Fly=require(\"../lib/wx\") //wx.js为您下载的源码文件\n   var fly=new Fly; //创建fly实例\n   ```\n\n3. 在支付宝小程序中引入\n\n   ```javascript\n   var Fly=require(\"flyio/dist/npm/ap\") \n   var fly=new Fly\n   ```\n\n   如果您的支付宝小程序项目没有使用`npm`来管理依赖，您可以直接下载源码到您的小程序工程，下载链接[ap.js](https://github.com/wendux/fly/tree/master/dist/npm/ap.js) 或 [ap.umd.min.js](https://github.com/wendux/fly/tree/master/dist/umd/ap.umd.min.js) .下载任意一个，保存到本地工程目录，假设在“lib”目录，接下来引入：\n\n   ```javascript\n   var Fly=require(\"../lib/ap\") //ap.js为您下载的源码文件\n   var fly=new Fly; //创建fly实例\n   ```\n\n4. 快应用中引入\n\n   [快应用](https://www.quickapp.cn/) 中Fly依赖 `fetch`模块，需要先在 `manifest.json`中添加引用：\n\n   ```javascript\n     \"features\": [\n        ...\n       {\"name\": \"system.fetch\"}\n     ]\n   ```\n\n   然后创建fly实例\n\n   ```javascript\n    //依赖快应用中的fetch模块，需要在\n    var fetch = require(\"@system.fetch\")\n    var Fly=require(\"flyio/dist/npm/hap\")\n    var fly=new Fly(fetch)\n   ```\n\n5. Weex中引入\n\n   ```javascript\n   var Fly=require(\"flyio/dist/npm/weex\")\n   var fly=new Fly\n   ```\n\n\n引入之后，您就可以对fly实例进行全局配置、添加拦截器、发起网络请求了。\n\n## 例子\n\n下面示例如无特殊说明，则在所有支持的平台下都能执行。\n\n### 发起GET请求\n\n```javascript\n//通过用户id获取信息,参数直接写在url中\nfly.get('/user?id=133')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n//query参数通过对象传递\nfly.get('/user', {\n      id: 133\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n```\n\n### 发起POST请求\n\n```javascript\nfly.post('/user', {\n    name: 'Doris',\n    age: 24\n    phone:\"18513222525\"\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\n### Post请求添加Url参数\n\n```dart\nfly.get(\"../package.json\", \"xxx=5\", {\n        params: {\n            c: 1\n        }\n    }\n)\n```\n\n最终的URL是“package.json?c=1&xxx=5”。\n\n### 发起多个并发请求\n\n```javascript\nfunction getUserRecords() {\n  return fly.get('/user/133/records');\n}\n\nfunction getUserProjects() {\n  return fly.get('/user/133/projects');\n}\n\nfly.all([getUserRecords(), getUserProjects()])\n  .then(fly.spread(function (records, projects) {\n    //两个请求都完成\n  }))\n  .catch(function(error){\n    console.log(error)\n  })\n```\n\n### 直接通过 `request` 接口发起请求\n\n```javascript\n//直接调用request函数发起post请求\nfly.request(\"/test\",{hh:5},{\n    method:\"post\",\n    timeout:5000 //超时设置为5s\n })\n.then(d=>{ console.log(\"request result:\",d)})\n.catch((e) => console.log(\"error\", e))\n```\n\n### 发送`URLSearchParams`\n\n```javascript\nconst params = new URLSearchParams();\nparams.append('a', 1);\nfly.post(\"\",params)\n.then(d=>{ console.log(\"request result:\",d)})\n```\n\n注：Node环境不存在URLSearchParams。各个浏览器对URLSearchParams的支持程度也不同，使用时务必注意\n\n### 发送 `FormData`\n\n```javascript\n var formData = new FormData();\n var log=console.log\n formData.append('username', 'Chris');\n fly.post(\"../package.json\",formData).then(log).catch(log)\n```\n\n注：Fly目前只在支持 `FormData` 的浏览器环境中支持 `FormData`，Node环境下对  `FormData` 的支持方式稍有不同，详情戳这里 [Node 下增强的API ](https://wendux.github.io/dist/#/doc/flyio/node)\n\n### 请求二进制数据\n\n```javascript\nfly.get(\"/Fly/v.png\",null,{\n\tresponseType:\"arraybuffer\"\n}).then(d=>{\n  //d.data 为ArrayBuffer实例\n})\n```\n\n注：在浏览器中时 `responseType` 值可为 \"arraybuffer\" 或\"blob\"之一。在node下只需设为 \"stream\"即可。\n\n## 拦截器\n\nFly支持请求／响应拦截器，可以通过它在请求发起之前和收到响应数据之后做一些预处理。\n\n```javascript\n\n//添加请求拦截器\nfly.interceptors.request.use((request)=>{\n    //给所有请求添加自定义header\n    request.headers[\"X-Tag\"]=\"flyio\";\n  \t//打印出请求体\n  \tconsole.log(request.body)\n  \t//终止请求\n  \t//var err=new Error(\"xxx\")\n  \t//err.request=request\n  \t//return Promise.reject(new Error(\"\"))\n  \n    //可以显式返回request, 也可以不返回，没有返回值时拦截器中默认返回request\n    return request;\n})\n\n//添加响应拦截器，响应拦截器会在then/catch处理之前执行\nfly.interceptors.response.use(\n    (response) => {\n        //只将请求结果的data字段返回\n        return response.data\n    },\n    (err) => {\n        //发生网络错误后会走到这里\n        //return Promise.resolve(\"ssss\")\n    }\n)\n```\n\n**请求拦截器**中的request对象结构如下：\n\n```javascript\n{\n  baseURL,  //请求的基地址\n  body, //请求的参数\n  headers, //自定义的请求头\n  method, // 请求方法\n  timeout, //本次请求的超时时间\n  url, // 本次请求的地址\n  params, //url get参数(post请求或默认的get参数)    \n  withCredentials, //跨域请求是否发送第三方cookie\n  ... //options中自定义的属性\n}\n```\n\n**响应拦截器**中的response对象结构如下：\n\n```javascript\n{\n  data, //服务器返回的数据\n  engine, //请求使用的http engine(见下面文档),浏览器中为本次请求的XMLHttpRequest对象\n  headers, //响应头信息\n  request  //本次响应对应的请求信息，即上面的request结构\n}\n```\n\n\n### 移除拦截器\n\n如果你想移除拦截器，只需要将拦截器设为null即可：\n\n```javascript\nfly.interceptors.request.use(null)\nfly.interceptors.response.use(null,null)\n```\n\n### 在拦截器中执行异步任务\n\n现在，您可以在拦截器中执行异步任务了!\n\n下面我们看一个例子：由于安全原因，我们需要所有的请求都需要在header中设置一个`csrfToken`，如果`csrfToken`不存在时，我们需要先请求一个`csrfToken`，然后再发起网络请求，由于请求`csrfToken`是异步的，所以我们需要在拦截器中执行异步请求，代码如下：\n\n```javascript\nvar csrfToken=\"\";\nvar tokenFly=new Fly();\nvar fly=new Fly();\nfly.interceptors.request.use(function (request) {\n  log(`发起请求：path:${request.url}，baseURL:${request.baseURL}`)\n  if (!csrfToken) {\n    log(\"没有token，先请求token...\");\n    //锁定当天实例，后续请求会在拦截器外排队\n    fly.lock();\n    return newFly.get(\"/token\").then((d) => {\n      request.headers[\"csrfToken\"] = csrfToken = d.data.data.token;\n      log(\"token请求成功，值为: \" + d.data.data.token);\n      log(`继续完成请求：path:${request.url}，baseURL:${request.baseURL}`)\n      return request; //只有最终返回request对象时，原来的请求才会继续\n    }).finally(()=>{\n      //fly.clear(); //clear the request queue\n      fly.unlock();//解锁后，会继续发起请求队列中的任务\n    }) \n  } else {\n    request.headers[\"csrfToken\"] = csrfToken;\n  }\n})\n```\n\n注意：\n\n1. 当前Fly实例会在调用`fly.lock`时会被锁定，fly实例锁定后，接下来的请求在进入请求拦截器前会进入一个队列排队，当解锁后(通过调用`fly.unlock`)，才会进入拦截器，这提供一种同步多个任务的方式。如果你想取消队列里的所有请求，可以调用`fly.clear()` 。\n2. 只有当最终返回`request`对象时(拦截器传递给你的回调参数)，请求才会继续（如代码中注释）， 否则将会把返回的值作为本次请求。\n\n有关拦截器的详细信息和示例，请参阅[flyio interceptor](https://wendux.github.io/dist/#/doc/flyio/interceptor)。\n\n## 错误处理\n\n请求失败之后，`catch` 捕获到的 err 是一个对象，它的字段如下：\n\n```javascript\n{\n  message:\"Not Find 404\", //错误消息\n  status:404, //如果服务器可通，则为http请求状态码。网络异常时为0，网络超时为1\n  request:{...}, //对应的请求信息\n  response:{}, //响应信息\n  engine:{}//请求使用的http engine(见下面文档),浏览器中为本次请求的XMLHttpRequest对象\n}\n```\n\n**错误码**\n\n| 错误码   | 含义                         |\n| ----- | -------------------------- |\n| 0     | 网络错误                       |\n| 1     | 请求超时                       |\n| 2     | 文件下载成功，但保存失败，此错误只出现node环境下 |\n| >=200 | http请求状态码                  |\n\n**示例**\n\n```javascript\nfly.get('/user/12345')\n  .catch(function (error) {\n    console.log('Error', error.message);\n    console.log('Error engine:', error.engine)\n    // The request was made but no response was received\n    // `error.request` holds the request info.\n    console.log('Error request info:',error.request);\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx and 304\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.statusText);\n      console.log(error.response.headers);\n    }\n  });\n```\n\n## 请求配置选项\n\n可配置选项：\n\n```javascript\n{\n  headers:{}, //http请求头，\n  baseURL:\"\", //请求基地址\n  timeout:0,//超时时间，为0时则无超时限制\n  //是否自动将Content-Type为“application/json”的响应数据转化为JSON对象，默认为true    \n  parseJson:true,\n  params:{}, //默认公共的url get参数     \n  withCredentials:false //跨域时是否发送cookie\n}\n```\n\n配置支持**实例级配置**和**单次请求配置**\n\n### 实例级配置\n\n实例级配置可用于当前Fly实例发起的所有请求\n\n```javascript\n//定义公共headers\nfly.config.headers={xx:5,bb:6,dd:7}\n//设置超时\nfly.config.timeout=10000;\n//设置请求基地址\nfly.config.baseURL=\"https://wendux.github.io/\"\n//设置公共的Get参数\nfly.config.params={\"token\":\"testtoken\"};\n```\n\n### 单次请求配置\n\n需要对单次请求配置时，配置只对当次请求有效。\n\n```javascript\nfly.request(\"/test\",{hh:5},{\n    method:\"post\",\n    timeout:5000 //超时设置为5s\n})\n```\n\n**注：若单次配置和实例配置冲突，则会优先使用单次请求配置**\n\n详细的配置请参考 [Fly请求配置](https://wendux.github.io/dist/#/doc/flyio/config) 。\n\n\n\n## API\n\n#### `fly.get(url, data, options)`\n\n发起 get 请求，url请求地址，data为请求数据，在浏览器环境下类型可以是:\n\n```shell\nString|Json|Object|Array|Blob|ArrayBuffer|FormData\n```\n\noptions为请求配置项。\n\n#### `fly.post(url, data, options)`\n\n发起post请求，参数含义同fly.get。\n\n#### `fly.request(url, data, options)`\n\n发起请求，参数含义同上，在使用此API时需要指定options 的method：\n\n```javascript\n//GET请求\nfly.request(\"/user/8\" null, {method:\"get\"})\n//DELETE 请求\nfly.request(\"/user/8/delete\", null, {method:\"delete\"})\n//PUT请求\nfly.request(\"/user/register\", {name:\"doris\"}, {method:\"PUT\"})\n......\n```\nrequest 适合在 [RESTful API](http://en.wikipedia.org/wiki/Representational_state_transfer) 的场景下使用，为了方便使用，fly提供了响应的别名方法\n\n**别名方法**\n\n`fly.put(url, data, options)`\n\n`fly.delete(url,data,options)`\n\n`fly.patch(url,data,options)`\n\n#### `fly.all([])`\n#### `fly.spread([])`\n\n发起多个并发请求，参数是一个promise 数组；当所有请求都成功后才会调用`then`，只要有一个失败，就会调 `catch`。\n\n\n\n## 使用application/x-www-form-urlencoded 编码\n\nFly默认会将JavaScript objects 序列化为 `JSON` 发送（RequestBody），如果想以 `application/x-www-form-urlencoded` 编码格式发送，你可以使用如下方式：\n\n### 通过设置请求头\n\n将请求头`content-type`设置为\"application/x-www-form-urlencoded\"后fly会自动对请求数据进行编码，如：\n\n```javascript\nfly.post(\"../package.json\",{aa:8,bb:9,tt:{xx:5}},{headers:{\n    \"content-type\":\"application/x-www-form-urlencoded\"\n}})\n.then(console.log)\n```\n\n这种方法是通用的，意味着在任何JavaScript运行环境下都能正常工作，还有一些其它特定平台的方法：\n\n### 其它方法\n\n#### 浏览器中\n\n在浏览器中, 你可以使用 [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) ，如下:\n\n```js\nvar params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\nfly.post('/foo', params);\n```\n\n> 注意，现在不是所有浏览器都支持 `URLSearchParams` (参考 [caniuse.com](http://www.caniuse.com/#feat=urlsearchparams)), 但是有一个 [polyfill](https://github.com/WebReflection/url-search-params) 可用 (确保polyfill为全局变量).\n\n另一种方法，你可以使用 [`qs`](https://github.com/ljharb/qs) 库:\n\n```js\nvar qs = require('qs');\nfly.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n\n#### Node.js\n\n在node中，你可以使用 [`querystring`](https://nodejs.org/api/querystring.html) 模块，如:\n\n```js\nvar querystring = require('querystring');\nfly.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\n你仍然可以使用 [`qs`](https://github.com/ljharb/qs) 库.\n\n\n\n## Promises\n\nFly 依赖  ES6 Promise  [支持情况](http://caniuse.com/promises). 如果你的环境不支持 ES6 Promises, 你需要 [polyfill](https://github.com/jakearchibald/es6-promise).\n\n\n\n## TypeScript\n\nFly 提供了 [TypeScript](http://typescriptlang.org) 描述文件.你可以在TypeScript中方便使用：\n```typescript\nimport fly from 'flyio';\nfly.get('/user?ID=12345');\n```\n\n\n## 创建Fly实例\n\n为方便使用，在引入flyio库之后，会创建一个默认实例，一般情况下大多数请求都是通过默认实例发出的，但在一些场景中需要多个实例（可能使用不同的配置请求），这时你可以手动new一个：\n\n```javascript\n//npm、node环境下\nvar  Fly=require(\"flyio/dist/npm/fly\") //注意！此时引入的是 \"flyio/dist/npm/fly\"\nvar nFly=new Fly();\n\n//CDN引入时直接new\nvar nFly=new Fly();\n```\n\n\n\n## Http engine\n\nFly 引入了Http engine 的概念，所谓 Http engine，就是真正发起http请求的引擎，这在浏览器中一般都是`XMLHttpRequest`，而在 node 环境中，可以用任何能发起网络请求的库／模块实现，Fly 可以自由更换底层 http engine ，Fly 正是通过更换 engine 而实现同时支持 node 和 browser 。值得注意的是，http engine 不局限于node 和 browser 环境中，也可以是 android、ios、electron，正是由于这些，Fly 才有了一个非常强大的功能——**请求重定向**。基于请求重定向，我们可以实现一些非常有用的功能，比如**将内嵌到 APP 的所有 http 请求重定向到 Native ，然后在端上( android、ios )统一发起网络请求、进行 cookie 管理、证书校验**。详情请戳 [Fly Http Engine ](https://wendux.github.io/dist/#/doc/flyio/engine)\n\n\n\n## 全局Ajax拦截\n\n在浏览器中，可以通过用 Fly  engine 替换 `XMLHttpRequest` 的方式拦截**全局**的的 Ajax 请求，无论上层使用的是何种网络库。详细的内容请参考 [Fly拦截全局Ajax](https://wendux.github.io/dist/#/doc/flyio/hook)\n\n## Node\n\n无论是在浏览器环境，还是在 Node 环境，Fly在上层提供了统一的 Promise API。这意味着无论您是 web 开发还是 node 开发，您都可以以相同的调用方式来发起http请求。不过，由于node和浏览器环境本身的差异，在Node环境下，Fly除了支持基本的API之外，还提供了一些增强的API，这些 API 主要涉及文件下载、多文件上传、http代理等众多强大的功能，详情请参考 [Node下增强的API](https://wendux.github.io/dist/#/doc/flyio/node)\n\n## 体积\n\n在浏览器环境下，一个库的大小是非常重要的。这方面 Fly 做的很好，它在保持强大的功能的同时，将自己的身材控制到了最好。min 只有 4.6K 左右，GZIP 压缩后不到 2K，体积是 axios 的四分之一。\n\n## 工程目录结构\n\n工程目录结构及文件说明请参照  [fly源码目录说明](https://wendux.github.io/dist/#/doc/flyio/files) 。\n\n## 最后\n\n如果感觉 Fly 对您有用，欢迎 star 。\n\n\n\n\n"
        },
        {
          "name": "_.js",
          "type": "blob",
          "size": 12.7900390625,
          "content": "var utils = require('./utils/utils');\nvar isBrowser = typeof document !== \"undefined\";\n\nclass Fly {\n    constructor(engine) {\n        this.engine = engine || XMLHttpRequest;\n\n        this.default = this   //For typeScript\n\n        /**\n         * Add  lock/unlock API for interceptor.\n         *\n         * Once an request/response interceptor is locked, the incoming request/response\n         * will be added to a queue before they enter the interceptor, they will not be\n         * continued  until the interceptor is unlocked.\n         *\n         * @param [interceptor] either is interceptors.request or interceptors.response\n         */\n        function wrap(interceptor) {\n            var resolve;\n            var reject;\n\n            function _clear() {\n                interceptor.p = resolve = reject = null;\n            }\n\n            utils.merge(interceptor, {\n                lock() {\n                    if (!resolve) {\n                        interceptor.p = new Promise((_resolve, _reject) => {\n                            resolve = _resolve\n                            reject = _reject;\n                        })\n                    }\n                },\n                unlock() {\n                    if (resolve) {\n                        resolve()\n                        _clear();\n                    }\n                },\n                clear() {\n                    if (reject) {\n                        reject(\"cancel\");\n                        _clear();\n                    }\n                }\n            })\n        }\n\n        var interceptors = this.interceptors = {\n            response: {\n                use(handler, onerror) {\n                    this.handler = handler;\n                    this.onerror = onerror;\n                }\n            },\n            request: {\n                use(handler) {\n                    this.handler = handler;\n                }\n            }\n        }\n\n        var irq = interceptors.request;\n        var irp = interceptors.response;\n        wrap(irp);\n        wrap(irq);\n\n        this.config = {\n            method: \"GET\",\n            baseURL: \"\",\n            headers: {},\n            timeout: 0,\n            parseJson: true, // Convert response data to JSON object automatically.\n            withCredentials: false\n        }\n    }\n\n    request(url, data, options) {\n        var engine = new this.engine;\n        var contentType = \"Content-Type\";\n        var interceptors = this.interceptors;\n        var requestInterceptor = interceptors.request;\n        var responseInterceptor = interceptors.response;\n        var requestInterceptorHandler = requestInterceptor.handler;\n        var promise = new Promise((resolve, reject) => {\n            if (utils.isObject(url)) {\n                options = url;\n                url = options.url;\n            }\n            options = options || {};\n            options.headers = options.headers || {};\n\n            function isPromise(p) {\n                // some  polyfill implementation of Promise may be not standard,\n                // so, we test by duck-typing\n                return p && p.then && p.catch\n            }\n\n            /**\n             * If the request/response interceptor has been locked，\n             * the new request/response will enter a queue. otherwise, it will be performed directly.\n             * @param [promise] if the promise exist, means the interceptor is  locked.\n             * @param [callback]\n             */\n            function enqueueIfLocked(promise, callback) {\n                if (promise) {\n                    promise.then(() => {\n                        callback()\n                    })\n                } else {\n                    callback()\n                }\n            }\n\n            // make the http request\n            function makeRequest(options) {\n                data = options.body;\n                // Normalize the request url\n                url = utils.trim(options.url);\n                var baseUrl = utils.trim(options.baseURL || \"\");\n                if (!url && isBrowser && !baseUrl) url = location.href;\n                if (url.indexOf(\"http\") !== 0) {\n                    var isAbsolute = url[0] === \"/\";\n                    if (!baseUrl && isBrowser) {\n                        var arr = location.pathname.split(\"/\");\n                        arr.pop();\n                        baseUrl = location.protocol + \"//\" + location.host + (isAbsolute ? \"\" : arr.join(\"/\"))\n                    }\n                    if (baseUrl[baseUrl.length - 1] !== \"/\") {\n                        baseUrl += \"/\"\n                    }\n                    url = baseUrl + (isAbsolute ? url.substr(1) : url)\n                    if (isBrowser) {\n\n                        // Normalize the url which contains the \"..\" or \".\", such as\n                        // \"http://xx.com/aa/bb/../../xx\" to \"http://xx.com/xx\" .\n                        var t = document.createElement(\"a\");\n                        t.href = url;\n                        url = t.href;\n                    }\n                }\n\n                var responseType = utils.trim(options.responseType || \"\")\n                engine.withCredentials = !!options.withCredentials;\n                var isGet = options.method === \"GET\";\n                if (isGet) {\n                    if (data) {\n                        if (utils.type(data) !== \"string\") {\n                            data = utils.formatParams(data);\n                        }\n                        url += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + data;\n                    }\n                }\n                engine.open(options.method, url);\n\n                // try catch for ie >=9\n                try {\n                    engine.timeout = options.timeout || 0;\n                    if (responseType !== \"stream\") {\n                        engine.responseType = responseType\n                    }\n                } catch (e) {\n                }\n\n                var customContentType = options.headers[contentType] || options.headers[contentType.toLowerCase()];\n\n                // default content type\n                var _contentType = \"application/x-www-form-urlencoded\";\n                // If the request data is json object, transforming it  to json string,\n                // and set request content-type to \"json\". In browser,  the data will\n                // be sent as RequestBody instead of FormData\n                if (utils.trim((customContentType || \"\").toLowerCase()) === _contentType) {\n                    data = utils.formatParams(data);\n                } else if (!utils.isFormData(data) && [\"object\", \"array\"].indexOf(utils.type(data)) !== -1) {\n                    _contentType = 'application/json;charset=utf-8'\n                    data = JSON.stringify(data);\n                }\n                //If user doesn't set content-type, set default.\n                if (!customContentType) {\n                    options.headers[contentType] = _contentType;\n                }\n\n                for (var k in options.headers) {\n                    if (k === contentType && utils.isFormData(data)) {\n                        // Delete the content-type, Let the browser set it\n                        delete options.headers[k];\n                    } else {\n                        try {\n                            // In browser environment, some header fields are readonly,\n                            // write will cause the exception .\n                            engine.setRequestHeader(k, options.headers[k])\n                        } catch (e) {\n                        }\n                    }\n                }\n\n                function onresult(handler, data, type) {\n                    enqueueIfLocked(responseInterceptor.p, function () {\n                        if (handler) {\n                            //如果失败，添加请求信息\n                            if (type) {\n                                data.request = options;\n                            }\n                            var ret = handler.call(responseInterceptor, data, Promise)\n                            data = ret === undefined ? data : ret;\n                        }\n                        if (!isPromise(data)) {\n                            data = Promise[type === 0 ? \"resolve\" : \"reject\"](data)\n                        }\n                        data.then(d => {\n                            resolve(d)\n                        }).catch((e) => {\n                            reject(e)\n                        })\n                    })\n                }\n\n\n                function onerror(e) {\n                    e.engine = engine;\n                    onresult(responseInterceptor.onerror, e, -1)\n                }\n\n                function Err(msg, status) {\n                    this.message = msg\n                    this.status = status;\n                }\n\n                engine.onload = () => {\n                    // The xhr of IE9 has not response filed\n                    var response = engine.response || engine.responseText;\n                    if (response && options.parseJson && (engine.getResponseHeader(contentType) || \"\").indexOf(\"json\") !== -1\n                        // Some third engine implementation may transform the response text to json object automatically,\n                        // so we should test the type of response before transforming it\n                        && !utils.isObject(response)) {\n                        response = JSON.parse(response);\n                    }\n                    var headers = {};\n                    var items = (engine.getAllResponseHeaders() || \"\").split(\"\\r\\n\");\n                    items.pop();\n                    items.forEach((e) => {\n                        var key = e.split(\":\")[0]\n                        headers[key] = engine.getResponseHeader(key)\n                    })\n                    var status = engine.status\n                    var statusText = engine.statusText\n                    var data = {data: response, headers, status, statusText};\n                    // The _response filed of engine is set in  adapter which be called in engine-wrapper.js\n                    utils.merge(data, engine._response)\n                    if ((status >= 200 && status < 300) || status === 304) {\n                        data.engine = engine;\n                        data.request = options;\n                        onresult(responseInterceptor.handler, data, 0)\n                    } else {\n                        var e = new Err(statusText, status);\n                        e.response = data\n                        onerror(e)\n                    }\n                }\n\n                engine.onerror = (e) => {\n                    onerror(new Err(e.msg || \"Network Error\", 0))\n                }\n\n                engine.ontimeout = () => {\n                    onerror(new Err(`timeout [ ${engine.timeout}ms ]`, 1))\n                }\n                engine._options = options;\n                setTimeout(() => {\n                    engine.send(isGet ? null : data)\n                }, 0)\n            }\n\n            enqueueIfLocked(requestInterceptor.p, () => {\n                utils.merge(options, this.config)\n                var headers = options.headers;\n                headers[contentType] = headers[contentType] || headers[contentTypeLowerCase] || \"\";\n                delete headers[contentTypeLowerCase]\n                options.body = data || options.body;\n                url = utils.trim(url || \"\");\n                options.method = options.method.toUpperCase();\n                options.url = url;\n                var ret = options;\n                if (requestInterceptorHandler) {\n                    ret = requestInterceptorHandler.call(requestInterceptor, options, Promise) || options;\n                }\n                if (!isPromise(ret)) {\n                    ret = Promise.resolve(ret)\n                }\n                ret.then((d) => {\n                    //if options continue\n                    if (d === options) {\n                        makeRequest(d)\n                    } else {\n                        resolve(d)\n                    }\n                }, (err) => {\n                    reject(err)\n                })\n            })\n        })\n        promise.engine = engine;\n        return promise;\n    }\n\n    all(promises) {\n        return Promise.all(promises)\n    }\n\n    spread(callback) {\n        return function (arr) {\n            return callback.apply(null, arr);\n        }\n    }\n}\n\n//For typeScript\nFly.default = Fly;\n\n[\"get\", \"post\", \"put\", \"patch\", \"head\", \"delete\"].forEach(e => {\n    Fly.prototype[e] = function (url, data, option) {\n        return this.request(url, data, utils.merge({method: e}, option))\n    }\n})\n    [\"lock\", \"unlock\", \"clear\"].forEach(e => {\n    Fly.prototype[e] = function () {\n        this.interceptors.request[e]();\n    }\n})\n// Learn more about keep-loader: https://github.com/wendux/keep-loader\nKEEP(\"cdn||cdn-min\", () => {\n    // This code block will be removed besides the  \"CDN\" and \"cdn-min\" build environment\n    window.fly = new Fly;\n    window.Fly = Fly;\n})\nmodule.exports = Fly;\n\n\n"
        },
        {
          "name": "build.js",
          "type": "blob",
          "size": 2.62890625,
          "content": "/**\n * Created by du on 16/9/24.\n */\nvar path = require('path');\nvar webpack = require('webpack');\nvar env=process.argv[2]||\"dev\"\nrequire(\"shelljs/global\")\n\n//For cdn entry\nvar entry={\n    \"engine-wrapper\": \"./src/engine-wrapper.js\",\n    \"fly\": \"./src/fly.js\",\n    \"adapter/dsbridge\":\"./src/adapter/dsbridge.js\",\n    \"adapter/webviewjsbridge\":\"./src/adapter/webviewjsbridge.js\",\n}\n\nvar output = {\n    path: path.resolve(\"./dist\"),\n    filename: \"[name].js\"\n}\n\nvar plugins=[];\n\nvar npmExtra = {\n    \"wx\": \"./src/wx.js\",\n    \"weex\": \"./src/weex.js\",\n    \"hap\": \"./src/hap.js\",\n    \"ap\": \"./src/ap.js\"\n}\n\n\n//for npm require\nif(env===\"npm\"){\n    Object.assign(entry, npmExtra)\n    output.path=path.resolve(\"./dist/npm\")\n    output.libraryTarget = \"umd\"\n} else if (env === \"dev\") {\n    entry={\n        \"../demon/dist/test\": \"./demon/test.js\",\n        \"../demon/dist/typeScriptTest\": \"./demon/typeScriptTest.js\"\n    }\n} else if (env === \"test\") {\n    entry = {\"test\": \"./test/test.js\"}\n    output = {\n        path: path.resolve(\"./test/output\"),\n        filename: \"[name].js\"\n    }\n}\nelse {\n    if(env===\"cdn-min\"||env===\"umd\"){\n        output.filename = \"[name].min.js\"\n        plugins.push(new webpack.optimize.UglifyJsPlugin({\n            // compress: {\n            //     warnings: true\n            // },\n            sourceMap: true\n        }))\n    }\n    if(env===\"umd\") {\n        Object.assign(entry, npmExtra)\n        output.libraryTarget = \"umd\"\n        output.path=path.resolve(\"./dist/umd\")\n        output.filename = \"[name].umd.min.js\"\n    }\n}\n\nvar config= {\n    entry: entry,\n    output: output,\n    //devtool: env !== \"dev\"? '#source-map': false,\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                include: [path.resolve('./src'), path.resolve('./test'), path.resolve('./index.js')],\n                use:[\n                    {\n                        loader: 'keep-loader',\n                        options:{\n                            keep:env\n                        }\n                    },\n                    {\n                        loader: \"babel-loader\",\n                        options: {\n                            presets: ['es2015']\n                        }\n                    },\n                ]\n            }\n        ]\n    },\n    plugins: plugins\n}\nwebpack(config,function (err,stats) {\n    if(err) throw err;\n    process.stdout.write(stats.toString({\n        colors: true,\n        modules: false,\n        children: false,\n        chunks: false,\n        chunkModules: false\n    }) + '\\n')\n});\n\ncp(\"./dist/npm/wx.js\", \"./miniprogram_dist/index.js\")\ncp(\"./dist/npm/engine-wrapper.js\", \"./miniprogram_dist/engine-wrapper.js\")\n\n\n"
        },
        {
          "name": "coverage",
          "type": "tree",
          "content": null
        },
        {
          "name": "demon",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "fly.png",
          "type": "blob",
          "size": 22.6865234375,
          "content": null
        },
        {
          "name": "imgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.d.ts",
          "type": "blob",
          "size": 2.0439453125,
          "content": "export interface FlyRequestConfig extends Object {\n    url?: string;\n    method?: string;\n    baseURL?: string;\n    headers?: any;\n    body?: any;\n    timeout?: number;\n    withCredentials?: boolean;\n    parseJson?: boolean;\n    responseType?: string;\n}\n\nexport interface FlyError {\n    status: number;\n    message: string;\n    engine: XMLHttpRequest;\n    request?: FlyRequestConfig;\n    response?: FlyErrResponse;\n}\n\nexport interface FlyResponse<T = any> {\n    data: T;\n    request: FlyRequestConfig;\n    engine: XMLHttpRequest;\n    headers: Object;\n}\n\nexport interface FlyErrResponse {\n    data: any;\n    headers: Object;\n    status: number;\n    statusText: string;\n}\n\nexport interface FlyPromise<T = any> extends Promise<FlyResponse<T>> {\n}\n\nexport interface FlyRequestInterceptor<V> {\n    use(onSend?: (request: V) => any): void;\n    lock(): void;\n    unlock(): void;\n\n    clear(): void;\n}\nexport interface FlyResponseInterceptor<V> {\n    use(onSucceed?: (response: V) => any, onError?: (err: Error) => any): void;\n    lock(): void;\n    unlock(): void;\n\n    clear(): void;\n}\n\nexport interface Fly {\n    config: FlyRequestConfig;\n    interceptors: {\n        request: FlyRequestInterceptor<FlyRequestConfig>;\n        response:FlyResponseInterceptor<FlyResponse>;\n    };\n    engine:any;\n    request<T = any>(url: string, data?: any, config?: FlyRequestConfig): FlyPromise<T>;\n    get<T = any>(url: string, data?:any, config?: FlyRequestConfig): FlyPromise<T>;\n    delete(url: string, data?:any, config?: FlyRequestConfig): FlyPromise;\n    head(url: string,data?:any, config?: FlyRequestConfig): FlyPromise;\n    post<T = any>(url: string, data?: any, config?: FlyRequestConfig): FlyPromise<T>;\n    put<T = any>(url: string, data?: any, config?: FlyRequestConfig): FlyPromise<T>;\n    patch<T = any>(url: string, data?: any, config?: FlyRequestConfig): FlyPromise<T>;\n    all<T>(values: (T | Promise<T>)[]): Promise<T[]>;\n    spread<T, R>(callback: (...args: T[]) => R): (array: T[]) => R;\n\n    lock(): void;\n    unlock(): void;\n\n    clear(): void;\n}\ndeclare const fly:Fly;\nexport default fly;\n\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.0927734375,
          "content": "//For browser entry\nvar Fly= require(\"./dist/npm/fly\")\nvar fly= new Fly;\nmodule.exports = fly;\n"
        },
        {
          "name": "karma.conf.js",
          "type": "blob",
          "size": 2.2646484375,
          "content": "// Karma configuration\n// Generated on Wed May 02 2018 10:45:31 GMT+0800 (CST)\n\nmodule.exports = function (config) {\n    config.set({\n\n        // base path that will be used to resolve all patterns (eg. files, exclude)\n        basePath: '',\n\n\n        // frameworks to use\n        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n        frameworks: ['mocha'],\n\n\n        // list of files / patterns to load in the browser\n        files: [\n            'node_modules/babel-polyfill/dist/polyfill.js',\n            'node_modules/promise-polyfill/dist/polyfill.js',\n            'dist/fly.js',\n            'test/*.js',\n        ],\n\n\n        // list of files / patterns to exclude\n        exclude: [],\n\n\n        // preprocess matching files before serving them to the browser\n        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n        preprocessors: {\n            'dist/fly.js': ['coverage'],\n        },\n\n\n        // test results reporter to use\n        // possible values: 'dots', 'progress'\n        // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n        reporters: ['progress', 'coverage'],\n\n\n        coverageReporter: {\n            reporters: [\n                // generates ./coverage/lcov.info\n                {type: 'lcovonly', subdir: '.'},\n                // generates ./coverage/coverage-final.json\n                {type: 'json', subdir: '.'},\n            ]\n        },\n\n\n        // web server port\n        port: 9876,\n\n\n        // enable / disable colors in the output (reporters and logs)\n        colors: true,\n\n\n        // level of logging\n        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n        logLevel: config.LOG_INFO,\n\n\n        // enable / disable watching file and executing tests whenever any file changes\n        autoWatch: true,\n\n\n        // start these browsers\n        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n        browsers: ['PhantomJS'],\n\n        // Continuous Integration mode\n        // if true, Karma captures browsers, runs the tests and exits\n        singleRun: true,\n\n        // Concurrency level\n        // how many browser should be started simultaneous\n        concurrency: Infinity\n    })\n}\n"
        },
        {
          "name": "miniprogram_dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "node-index.js",
          "type": "blob",
          "size": 0.0546875,
          "content": "var Fly= require(\"./src/node\")\nmodule.exports = new Fly;"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.4697265625,
          "content": "{\n  \"name\": \"flyio\",\n  \"version\": \"0.6.14\",\n  \"main\": \"node-index.js\",\n  \"browser\": \"index.js\",\n  \"weapp\": \"dist/npm/wx.js\",\n  \"author\": {\n    \"name\": \"wendux\",\n    \"email\": \"824783146@qq.com\",\n    \"url\": \"https://github.com/wendux/fly\"\n  },\n  \"license\": \"MIT\",\n  \"description\": \"Lightweigh Promise based HTTP client for the browser and node.js\",\n  \"keywords\": [\n    \"flyjs\",\n    \"fly.js\"\n  ],\n  \"respository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/wendux/fly\"\n  },\n  \"homepage\": \"https://github.com/wendux/fly\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wendux/fly/issues\"\n  },\n  \"scripts\": {\n    \"dev\": \"node build.js dev\",\n    \"build\": \"node build.js npm && node build.js cdn && node build.js cdn-min && node build.js umd\",\n    \"nodeTest\": \"node ./demon/nodeTest.js\",\n    \"test\": \"karma start && codecov\",\n    \"report-coverage\": \"codecov\"\n  },\n  \"typings\": \"./index.d.ts\",\n  \"devDependencies\": {\n    \"babel-core\": \"^6.0.0\",\n    \"babel-loader\": \"^6.0.0\",\n    \"babel-plugin-transform-runtime\": \"^6.0.0\",\n    \"babel-preset-es2015\": \"^6.0.0\",\n    \"babel-preset-es2017\": \"^6.24.1\",\n    \"karma\": \"^2.0.2\",\n    \"karma-babel-preprocessor\": \"^7.0.0\",\n    \"karma-coverage\": \"^1.1.1\",\n    \"karma-mocha\": \"^1.3.0\",\n    \"karma-phantomjs-launcher\": \"^1.0.4\",\n    \"karma-webpack\": \"^3.0.0\",\n    \"keep-loader\": \"^0.7.1\",\n    \"mocha\": \"^5.1.1\",\n    \"promise-polyfill\": \"^7.1.2\",\n    \"qs\": \"^6.5.1\",\n    \"shelljs\": \"^0.8.1\",\n    \"webpack\": \"^2.6.0\"\n  },\n  \"dependencies\": {\n    \"request\": \"^2.85.0\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "upload.txt",
          "type": "blob",
          "size": 0.0390625,
          "content": "你好， 世界\n&\n$\n%  U。想 。。\n\n"
        },
        {
          "name": "v.png",
          "type": "blob",
          "size": 5.541015625,
          "content": null
        }
      ]
    }
  ]
}