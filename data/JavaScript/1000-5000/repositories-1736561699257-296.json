{
  "metadata": {
    "timestamp": 1736561699257,
    "page": 296,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dwyl/learn-json-web-tokens",
      "stars": 4181,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.607421875,
          "content": "# Logs\nlogs\n*.log\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directory\n# Commenting this out is preferred by some people, see\n# https://www.npmjs.org/doc/misc/npm-faq.html#should-i-check-my-node_modules-folder-into-git-\nnode_modules\n\n# Users Environment Variables\n.lock-wscript\nexample/lib/db\npackage-lock.json\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.1015625,
          "content": "ports:\n- port: 1337\n  onOpen: open-preview\ntasks:\n- init: npm install\n  command: node example/server.js\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 0.64453125,
          "content": "{\n  \"asi\"           : true,\n  \"laxbreak\"      : true,\n  \"bitwise\"       : true,\n  \"boss\"          : false,\n  \"curly\"         : true,\n  \"eqeqeq\"        : true,\n  \"eqnull\"        : false,\n  \"evil\"          : false,\n  \"expr\"          : false,\n  \"forin\"         : false,\n  \"immed\"         : true,\n  \"indent\"        : 2,\n  \"latedef\"       : true,\n  \"loopfunc\"      : false,\n  \"noarg\"         : true,\n  \"node\"          : true,\n  \"regexp\"        : true,\n  \"regexdash\"     : false,\n  \"strict\"        : false,\n  \"scripturl\"     : true,\n  \"shadow\"        : false,\n  \"supernew\"      : false,\n  \"sub\"           : true,\n  \"undef\"         : true,\n  \"white\"         : true\n}\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0947265625,
          "content": "language: node_js\nnode_js:\n  - \"node\"\nafter_success:\n  - bash <(curl -s https://codecov.io/bash)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.09765625,
          "content": "_**Please read** our_\n[**contribution guide**](https://github.com/dwyl/contributing)\n(_thank you_!)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "Copyright (c) 2025 Do What You Love (DWYL)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Procfile",
          "type": "blob",
          "size": 0.02734375,
          "content": "web: node example/server.js\n"
        },
        {
          "name": "README-zh_CN.md",
          "type": "blob",
          "size": 18.9169921875,
          "content": "![JWT logo wider](https://i.imgur.com/qDOOu4o.jpg)\n\n# 学习如何使用 **JSON Web Tokens** (JWT) 进行**鉴权**\n\n![dilbert fixed the internet](https://i.imgur.com/cNElVof.jpg)\n\n学习怎么使用 JSON Web Token (JWT) 来**加密**你的 Web 应用或者移动应用!\n\n[![Build Status](https://img.shields.io/travis/dwyl/learn-json-web-tokens/master.svg?style=flat-square)](https://travis-ci.org/dwyl/learn-json-web-tokens)\n[![codecov.io](https://img.shields.io/codecov/c/github/dwyl/learn-json-web-tokens/master.svg?style=flat-square)](https://codecov.io/github/dwyl/learn-json-web-tokens?branch=master)\n[![codeclimate-maintainability](https://img.shields.io/codeclimate/maintainability/dwyl/learn-json-web-tokens.svg?style=flat-square)](https://codeclimate.com/github/dwyl/learn-json-web-tokens/maintainability)\n[![Dependencies Status](https://david-dm.org/dwyl/learn-json-web-tokens/status.svg?style=flat-square)](https://david-dm.org/dwyl/learn-json-web-tokens)\n[![devDependencies Status](https://david-dm.org/dwyl/learn-json-web-tokens/dev-status.svg?style=flat-square)](https://david-dm.org/dwyl/learn-json-web-tokens?type=dev)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat-square)](https://github.com/dwyl/learn-json-web-tokens/issues)\n[![HitCount](https://hits.dwyl.com/dwyl/learn-json-web-tokens.svg)](https://hits.dwyl.io/dwyl/learn-json-web-tokens)\n\n\n## **为什么**?\n\nJSON Web Tokens (JWTs) 使得在服务之间（**包括在你 app 或者网站的内部和外部**） _**发送只读签名**_ 的 “_**声明**_“ 变得很**简单**。\n\n声明是你想让某些人**阅读**或**校验**但不能修改的**任意**字节的数据。\n\n> **注意**：**如果听起来很啰嗦，请不要担心，阅读 5 分钟之后一切都会变得清晰起来的！**\n\n## 是什么?\n\n> “***JSON Web Token***（JWT）是一种紧凑的 URL 安全方式，用于表示在双方之间传输的声明。JWT 中的声明被**编码**为使用JSON Web 签名（JWS）进行数字签名的 **JSON 对象**。——IETF\n\n###  **通俗一点**\n\n为了在你的 app（web或者移动端）中辨识或授权用户，在 **header** 或者页面（或者 API）的 **url** 中放置一个**基于标准的 token**，它表明了这个用户已经登录并且被允许获取到他想要的内容。\n\n示例：`https://www.yoursite.com/private-content/?token=eyJ0eXAiOiJKV1Qi.eyJrZXkiOi.eUiabuiKv`\n\n> **注意**：如果这对于你而言还不够“安全”，往下翻到“[***security***](#q-我把-jwt-放在-url-或者-header-是安全的吗)”这一节。\n\n### JWT **看起来**是什么样的？\n\nTokens 是一系列“url 安全”的字符所组成的字符串，它包含了**编码**后的信息。\nTokens 由**三部分**组成（用小数点分割）,为了便于阅读，下面用三行来展示，但是实际使用时是一个单独的字符串。\n\n```\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9           // 头部\n.eyJrZXkiOiJ2YWwiLCJpYXQiOjE0MjI2MDU0NDV9      // 载荷\n.eUiabuiKv-8PYk2AkGY4Fb5KMZeorYBLw261JPQD5lM   // 签名\n```\n\n#### 1. 头部\n\nJWT 的第一部分是一个编码的字符串，它表示一个简单的 JavaScript 对象，这个对象描述了 token 所使用的哈希算法。\n\n#### 2. 载荷\n\nJWT 的第二部分是 token 的核心，负载的长度与你在 JWT 中所存储的数据长度有关。\n通常所遵守的准则是：存储尽量少的必要的数据在 JWT 中。\n\n\n#### 3. 签名\n\n第三部分是最后一部分，是根据头部（第一部分）和主体（第二部分）所计算出来的一个签名，会被用于**校验** JWT 是否有效。\n\n### 什么是“声明”？\n\nClaims are the predefined **keys** and their **values**:\n\n声明是预定义的一系列**键**和它们所对应的**值**：\n\n+ **iss**: token 的发行人。\n+ **exp**: 到期时间戳（已过期的令牌会被拒绝）。注意：如规范中所定义，以秒为单位。\n+ **iat**: token 的发行时间。可以用于判断 JWT 的发行时间长。\n+ **nbf**: \"not before\" 是 JWT 被激活的某个未来时间（可以理解为生效时间）。\n+ **jti**: JWT 的第一无二的标识（编号），用于防止 JWT 被重复使用或者重复产生。\n+ **sub**: token 的主题（很少使用）。\n+ **aud**: token 的受众（同样很少使用）。\n\n详情阅读： https://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#RegisteredClaimName\n\n# 示例 [![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/dwyl/learn-json-web-tokens/issues)\n\n让我们通过一个简单的示例来继续深入学习 JWT。\n（**全部**源码都在 **/example** 目录下）\n\n> 动手尝试： https://jwt.herokuapp.com/\n\n可以在 Gitpod（需要通过 GitHub 授权登录） 上亲自动手尝试一下这个示例。\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io#https://github.com/dwyl/learn-json-web-tokens/blob/master/example/lib/helpers.js)\n\n## 服务器\n\n通过使用 **node.js 的 核心模块 http** 服务器，我们在 **/example/server.js** 创建了四个接口：\n\n1. **/home** : 首页（不是必要的，但是我们的 **login** 表单放在这里）。\n2. **/auth** : 对游客进行**授权** （如果授权失败会返回错误并且回到首页的 login 表单）。\n3. **/private** : 我们的受保护的内容 - ***需要登录***（有合法的会话 token）才能看到这个页面。\n4. **/logout** : 使 token 失效并且登出用户（防止重复使用旧的 token）。\n\n我们已经**有意地**把 **server.js** 写得足够的简单了：\n\n+ 可阅读\n+ 可维护\n+ 可测试（所有的 helper/handler 方法都已经被单独测试）\n\n> 注意： 如果你可以让示例更**简单**，请提交 [issue](https://github.com/dwyl/learn-json-web-tokens/issues) 一起讨论！\n\n## Helper 方法\n\n所有 helper 类方法都保存在 **/example/lib/helpers.js**\n两个最有意思或者说最相关的方法是（下面是简化版本）：\n\n```javascript\n// 构造 JWT 的方法。\nfunction generateToken(req){\n  return jwt.sign({\n    auth:  'magic',\n    agent: req.headers['user-agent'],\n    exp:   Math.floor(new Date().getTime()/1000) + 7*24*60*60; // 注意：单位是秒！\n  }, secret);  // secret 被定义在环境变量 JWT_SECRET 中\n}\n```\n\n当用户进行授权的时候，这个方法会计算出我们的 JWT token，这个 token 随后会被放在 **Authorization** 响应头发送回客户端，用于后续的请求。\n\n另外一个\n\n```javascript\n// 校验请求头 Authorization 中的 token 是否有效。\nfunction validate(req, res) {\n  var token = req.headers.authorization;\n  try {\n    var decoded = jwt.verify(token, secret);\n  } catch (e) {\n    return authFail(res);\n  }\n  if(!decoded || decoded.auth !== 'magic') {\n    return authFail(res);\n  } else {\n    return privado(res, token);\n  }\n}\n```\n\nWhich **checks the JWT supplied by the client is valid**,\nshows private (\"privado\") content to the requestor if valid\nand renders the **authFail** ***error*** page if its not.\n\n该方法**会检查客户端提供的 JWT 是否有效**，如果有效就会展示私有内容（通过 \"privado\" 方法）给请求者；如果校验失败，会通过**authFail** 方法渲染 ***错误页*** 。\n\n**注意**: 这两个方法**都是同步的**。这两个方法都没有进行任何的 IO 操作或者网络请求，所以同步计算是安全的。\n\n> 提示：如果你正在为你的 Hapi.js 应用寻找 ***全能的*** **JWT Auth Hapi.js 插件** （**异步**校验或验证） 请查看： [https://github.com/**dwyl/hapi-auth-jwt2**](https://github.com/dwyl/hapi-auth-jwt2)\n\n## 测试\n\n你可能已经注意到了教程开头的 [![Build Status][travis-image]][travis-url] 这些铭牌，这是一个标志，作者不只是**堆砌**代码在一起。\n\n对服务器路由和 helper 类方法的测试都放在 **/example/test**。\n\n1. /example/test/**functional.js** - 测试我们在 /example/lib/**helpers.js** 中创建的所有 **helper 类方法**。\n[![Test Coverage](https://codeclimate.com/github/dwyl/learn-json-web-tokens/badges/coverage.svg)](https://codeclimate.com/github/dwyl/learn-json-web-tokens)\n2. /example/test/**integration.js** - 模拟**用户**对服务器所发起的请求并测试服务器**响应**。\n\n请**阅读**所有测试案例，如有不清楚的地方，可以**告诉我们**。\n\n**注意**：我们为 http req/res 对象写了一个基本的“**mock**”: /example/test/**mock.js**\n\n如果还不懂 mock 或者很好奇，请阅读：[When to Mock (by \"Uncle Bob\")](https://blog.8thlight.com/uncle-bob/2014/05/10/WhenToMock.html)\n\n- - -\n\n## 常见问题及解答\n\n> ***有问题吗? 马上提问!*** >> https://github.com/dwyl/learn-json-web-tokens/issues\n\n### Q: 我把 JWT 放在 *URL* 或者 *Header* 是**安全**的吗？\n\n问得好！答案是：“**否**”，除非你使用 SSL/TLS 加密你的连接（https），使用[明文](https://en.wikipedia.org/wiki/Plaintext)发送 Token 永远都是不安全的（token 可以被拦截并且被坏蛋重用）。一种比较笨拙简单的方法是添加校验声明到 token，比如检查请求是否来自于同一个浏览器（user-agent），添加IP 地址或者更先进的“[**browser fingerprints**](https://stackoverflow.com/a/3287761/1148249)”…… https://programmers.stackexchange.com/a/122385\n\n解决方案包括:\n+ 使用一次性 token，在链接点击后即失效 ***或者***\n+ 在安全性要求较高的场景下不把 token 放在 url 中。\n(比如：不把执行交易的链接发送给别人)\n\nJWT 放在 url 中的**使用场景**:\n+ 账户校验 - 当你把激活账户的链接通过 Email 发送给在你网站注册了的客户的时候。 `https://yoursite.co/account/verify?token=jwt.goes.here`\n+ 密码重置 - 确保重置密码的人能够登录与账户有关的邮件。\n `https://yoursite.co/account/reset-password?token=jwt.goes.here`\n\n上面的案例都是使用一次性 token 的适用场景 (****点击后就失效****)。\n\n### Q: 怎么使会话失效?\n\n如果使用你 app 的人的**设备**（手机/平板电脑/笔记本电脑）**被盗了**，那你应该如何使它们使用的 token 失效？\n\nJWT 背后的思想是**无状态**，它们可以被集群中的任意节点计算出来并且验证，而不用对数据库发起任何请求。\n\n#### 把 token 存在数据库中?\n\n##### LevelDB\n\n如果你的应用规模比较**小**，或者你不想运行一个 Redis 服务器，你可以通过使用 LevelDB：http://leveldb.org/ 来从 Redis 获取最大的好处。\n\n我们可以把有效的 token 存储在数据库中，或者相反地把非法的 token 存储在数据库中。这两种方案都需要往返数据库以检查 token 是否有效。所以我们倾向于存储所有的 token 到数据库，并且把 token 的 *valid* 字段从 true 更新为 false，表示 token 已经过期。\n\n存储在 LevelDB 中的示例：\n```json\n\"GUID\" : {\n  \"auth\" : \"true\",\n  \"created\" : \"timestamp\",\n  \"uid\" : \"1234\"\n}\n```\n我们将通过 GUID 来查找这条记录：\n\n```js\nvar db = require('level');\ndb.get(GUID, function(err, record){\n  // pseudo-code\n  if(record.auth){\n    // 展示私有内容（通过了校验）\n  } else {\n    // 展示错误信息（校验未通过）\n  }\n});\n```\n通过查看 example/lib/helpers.js 中的 **validate** 方法获取更多详情。\n\n##### Redis\n\nRedis 是存储令牌的**可扩展**方式。\n\n如果你**从未**接触过 Redis，请阅读:\n+ Intro: https://redis.io/topics/introduction\n+ Redis in 30 mins:\nhttps://openmymind.net/2011/11/8/Redis-Zero-To-Master-In-30-Minutes-Part-1/\n+ What is Redis? https://www.slideshare.net/dvirsky/introduction-to-redis\n\nRedis ***Scales*** (provided you have the RAM):\nhttps://stackoverflow.com/questions/10478794/more-than-4-billion-key-value-pairs-in-redis\n\n> ***从现在开始学习 Redis！*** [https://github.com/dwyl/**learn-redis**](https://github.com/dwyl/learn-redis)\n\n#### Memcache?\n\n***Quick* answer**: *使用 **Redis***:\nhttps://stackoverflow.com/questions/10558465/memcache-vs-redis\n\n\n### Q: 返回游客（**会话之间没有状态保存**）\n\nCookie 存储在客户端，并且每次请求时都会由浏览器发送到服务器。如果关闭了浏览器，则会保留 Cookie，因此可以在上次停止的地方继续操作而不必再次登录。但是 cookie 会在与路径和发布域匹配的所有请求上发送，包括不需要的图像和 css 请求。\n\n[`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window.localStorage) 提供了一种更好的在浏览器会话之间存储 token 的机制。\n\n#### 基于浏览器的应用\n\n有以下两种方式存储你的 JWT：\n\n1. 使用 ***localStorage*** 在客户端存储你的 JWT（**意味着你需要把 JWT 放在 `authorization` header 中返回给客户端，以便后续 http/ajax 请求使用**）\n2. 把 JWT 存储在 cookie 中。\n\n> 我们更倾向于第一种方法。但是如果使用得当的话，cookie 仍然可以在现代 web 应用中发挥他们的作用！\n\n##### 一些有用的网站\n\n+ Good ***history*** & overview of **Localstorage**:\nhttp://diveintohtml5.info/storage.html\n+ MDN **Window.localStorage**:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Window.localStorage\n+ Brief description + basic *examples*:\nhttps://www.html5rocks.com/en/features/storage\n+ Will it work for *my* visitors?\nhttps://caniuse.com/#search=localstorage\n(**Quick answer**: ***Yes***! IE 8 & above, Android 4.0+, IOS 7.1+, Chrome & Firefox )\n\n\n#### 编程式（API）访问\n\n其它服务访问你的 API 时必须把令牌存储在检索系统中（比如：移动应用的 Redis 或 SQLite）并且把 token 带入到每一个请求中。\n\n### 如何生成密钥？\n\n> “**如果这个问题在其它地方被提到过的话我感到抱歉。用于计算 token 的私钥和 ssh-keygen 生成的私钥是一样的吗？** ~最初由 [@skota](https://github.com/skota) 提出问题，更多详细: [dwyl/**hapi-auth-jwt2/issues**/48](https://github.com/dwyl/hapi-auth-jwt2/issues/48)\n\n因为 JSON Web Token（JWT）不要求使用[**非对称加密**](https://en.wikipedia.org/wiki/Public-key_cryptography)进行签名，所以**不必**使用 ssh-keygen 生成密钥。你可以简单地只使用一个**强密码**,例如：https://www.grc.com/passwords.htm 提供了足够长的复杂的随机的字符串。这样的话使用相同加密字符串的可能性（有人能够修改有效负载，添加或修改声明以及创建有效签名的可能性）非常低。如果你将两个**强密码**（字符串）连接在一起，你将拥有一个 128 位的 ASCII 字符串。因此，碰撞的可能性小于[宇宙中的原子数](https://en.wikipedia.org/wiki/Observable_universe#Matter_content_.E2.80.94_number_of_atoms)。\n\nTo quickly and easily create a secret key using Node's crypto library, run this command.\n\n使用以下命令可以通过 Node 的 crypto 模块快速而简单地创建一个密钥。\n\n    node -e \"console.log(require('crypto').randomBytes(32).toString('hex'));\"\n\n换句话说，你**可以**使用一个 ***RSA 密钥***，但是这不是必要的。\n\n你需要记住的最重要的一件事就是：不要把这个密钥泄露给核心组（”*DevOps Team*“）成员之外的任何人或者**意外地**将它发布到了 GitHub！\n\n\n## 哪个 Node.js 模块？\n\n在 NPM 上搜索 ”**JSON Web Token**“：https://www.npmjs.com/search?q=json+web+token 会产生许多结果！\n\n![npm search for json web token](https://i.imgur.com/ZLN3LlW.png)\n\n### 使用 Hapi.js 构建 Web 应用？\n\n我们努力简化在 Hapi.js 应用程序中使用 JWT 的过程，在这个过程中我们写了这个模块：https://github.com/dwyl/hapi-auth-jwt2\n\n\n### **其它** Node.js 项目的常用方法\n\n我们**强烈**推荐 **jsonwebtoken** 这个模块，它由我们的朋友[@auth0](https://twitter.com/auth0)\n([校验/鉴权领域的专家](https://auth0.com/about))编写:\n- https://github.com/auth0/node-jsonwebtoken\nWhich in turn uses:\nhttps://github.com/brianloveswords/node-jws\n[![NPM][jsonwebtoken-icon] ][jsonwebtoken-url]\n\n另外一个非常棒的选择是： https://github.com/joaquimserafim/json-web-token\n也是我们的朋友 [@joaquimserafim](https://github.com/joaquimserafim) 编写的。\n\n## 必要的阅读(**预习**)\n\n- Original **Specification** (Draft):\nhttps://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32\n- Great overview from Atlassian:\nhttps://developer.atlassian.com/cloud/jira/platform/understanding-jwt/\n- Good intro (ruby-specific examples):\nhttps://www.intridea.com/blog/2013/11/7/json-web-token-the-useful-little-standard-you-haven-t-heard-about\n+ Friendlier introduction: https://jwt.io/\n+ Getting to know JWT:\nhttps://scotch.io/tutorials/the-anatomy-of-a-json-web-token\n- Discussion: https://ask.auth0.com/c/jwt\n+ ***How to*** do **stateless authentication** (session-less & cookie-less):\nhttps://stackoverflow.com/questions/20588467/how-to-do-stateless-session-less-cookie-less-authentication\n\n\n## 深入阅读(**推荐**) [![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/dwyl/learn-json-web-tokens/issues)\n\n+ JWT with Passport.js:\nhttps://stackoverflow.com/questions/20228572/passport-local-with-node-jwt-simple\n+ JWT Tokens as API Keys:\nhttps://auth0.com/blog/2014/12/02/using-json-web-tokens-as-api-keys/\n+ **10 Things you should know** about ***Tokens and Cookies***:\nhttps://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/#xss-xsrf\n+ Information Security discussion:\nhttps://security.stackexchange.com/questions/51294/json-web-tokens-jwt-as-user-identification-and-authentication-tokens\n+ Using JWT with node.js (express + backbone):\nhttps://www.sitepoint.com/using-json-web-tokens-node-js/\n+ Token-based Authentication with Socket.IO\nhttps://auth0.com/blog/2014/01/15/auth-with-socket-io/\n+ JWT Auth *discussion* on Hacker News:\nhttps://news.ycombinator.com/item?id=7084435\n+ The Spec but nicer:\nhttps://self-issued.info/docs/draft-ietf-oauth-json-web-token.html\n+ Extended (Wiki) article on Claims-based authentication:\nhttps://en.wikipedia.org/wiki/Claims-based_identity\n+ Securing Requests with JWT:\nhttps://websec.io/2014/08/04/Securing-Requests-with-JWT.html\n+ Avoid Database in authenticating user for each request (stateless):\nhttps://security.stackexchange.com/questions/49145/avoid-hitting-db-to-authenticate-a-user-on-every-request-in-stateless-web-app-ar\n+ The Twelve-Factor App: https://12factor.net/ + https://12factor.net/processes\n+ Auth in Hapi with JWT: https://medium.com/@thedon/auth-in-hapi-with-jwt-780ce4d072c7#.clgj5lknq\n+ Token based authentication in Node.js with Passport, JWT and bcrypt: https://jonathas.com/token-based-authentication-in-nodejs-with-passport-jwt-and-bcrypt/\n\n# **感谢**您和我们一起学习！\n\n如果您认为这篇快速阅读很有帮助, 请在 GitHub 上给我们一颗星星（Star）并且转推分享给其他人：https://twitter.com/olizilla/status/626487231860080640\n\n[![olizilla tweet](https://i.imgur.com/rCvNvvk.jpg)](https://twitter.com/olizilla/status/626487231860080640 \"Please Re-Tweet!\")\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.5146484375,
          "content": "![JWT logo wider](https://i.imgur.com/qDOOu4o.jpg)\n\n# Learn how to use *JSON Web Tokens* (JWT) for *Authentication*\n\n![dilbert fixed the internet](https://i.imgur.com/cNElVof.jpg)\n\nLearn how to use JSON Web Token (JWT) to *secure* your Web and/or Mobile Application!\n\n[![Build Status](https://img.shields.io/travis/dwyl/learn-json-web-tokens/master.svg?style=flat-square)](https://travis-ci.org/dwyl/learn-json-web-tokens)\n[![codecov.io](https://img.shields.io/codecov/c/github/dwyl/learn-json-web-tokens/master.svg?style=flat-square)](https://codecov.io/github/dwyl/learn-json-web-tokens?branch=master)\n[![codeclimate-maintainability](https://img.shields.io/codeclimate/maintainability/dwyl/learn-json-web-tokens.svg?style=flat-square)](https://codeclimate.com/github/dwyl/learn-json-web-tokens/maintainability)\n[![Dependencies Status](https://david-dm.org/dwyl/learn-json-web-tokens/status.svg?style=flat-square)](https://david-dm.org/dwyl/learn-json-web-tokens)\n[![devDependencies Status](https://david-dm.org/dwyl/learn-json-web-tokens/dev-status.svg?style=flat-square)](https://david-dm.org/dwyl/learn-json-web-tokens?type=dev)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat-square)](https://github.com/dwyl/learn-json-web-tokens/issues)\n[![HitCount](https://hits.dwyl.com/dwyl/learn-json-web-tokens.svg)](https://hits.dwyl.io/dwyl/learn-json-web-tokens)\n\n\n## *Why*?\n\nJSON Web Tokens (JWTs) make it *easy* to _**send read-only signed**_ \"_**claims**_\"\nbetween services (*both internal and external to your app/site*).\nClaims are *any* bits of data that you want someone else to be able to *read*\nand/or *verify* but ***not alter***.\n\n\n> **Note**: *If that sounds buzz-wordy, don't worry, it will all become clear in the next 5 mins of reading!*\n\n## What?\n\n> \"***JSON Web Token*** *(JWT) is a compact* ***URL-safe*** *means of\n> representing claims to be transferred between two parties.\n> The claims in a JWT are* ***encoded*** *as a* ***JSON object*** *that is* ***digitally\n> signed*** *using JSON Web Signature (JWS)*.  ~ IETF\n\n###  In *English*\n\nTo identify/authenticate people in your (web/mobile) app,\nput a ***standards-based token*** in the **header** or **url** of the page\n(or API endpoint) which proves the user has logged in and is allowed to\naccess the desired content.\n\nexample: `https://www.yoursite.com/private-content/?token=eyJ0eXAiOiJKV1Qi.eyJrZXkiOi.eUiabuiKv`\n\n> **Note**: if this does not *look* \"secure\" to you,\nscroll down to the \"[***security***](https://github.com/dwyl/learn-json-web-tokens#q-if-i-put-the-jwt-in-the-url-or-header-is-it-secure)\" section.\n\n### What does a JWT *Look* Like?\n\nTokens are a string of \"url safe\" characters which *encode* information.\nTokens have **three components** (separated by periods)\n(shown here on multiple lines for *readability* but used as a single string of text)\n\n```\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9           // header\n.eyJrZXkiOiJ2YWwiLCJpYXQiOjE0MjI2MDU0NDV9      // payload\n.eUiabuiKv-8PYk2AkGY4Fb5KMZeorYBLw261JPQD5lM   // signature\n```\n\n#### 1. Header\n\nThe first part of a JWT is an encoded string representation\nof a simple JavaScript object which describes the token along with the hashing algorithm used.\n\n#### 2. Payload\n\nThe second part of the JWT forms the core of the token.\nPayload length is proportional to the amount of data you store in the JWT.\nGeneral rule of thumb is: store the bare minimum in the JWT.\n\n\n#### 3. Signature\n\nThe third, and final, part of the JWT is a signature generated\nbased on the header (part one) and the body (part two) and will be used\nto *verify* that the JWT is valid.\n\n### What are \"Claims\"?\n\nClaims are the predefined **keys** and their **values**:\n\n+ **iss**: issuer of the token\n+ **exp**: the expiration timestamp (reject tokens which have expired). Note: as defined in the spec, this must be in seconds.\n+ **iat**: The time the JWT was issued. Can be used to determine the age of the JWT\n+ **nbf**: \"not before\" is a future time when the token will become active.\n+ **jti**: unique identifier for the JWT. Used to prevent the JWT from being re-used or replayed.\n+ **sub**: subject of the token (rarely used)\n+ **aud**: audience of the token (also rarely used)\n\nSee: https://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#RegisteredClaimName\n\n# Example [![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/dwyl/learn-json-web-tokens/issues)\n\nLets get stuck in with a simple example.\n(the *full* source is in the **/example** directory)\n\n> TRY it: https://jwt.herokuapp.com/\n\nTo play around with the example you can open it in Gitpod (requires OAuth with GitHub).\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io#https://github.com/dwyl/learn-json-web-tokens/blob/master/example/lib/helpers.js)\n\n## Server\n\nUsing the *core* **node.js http** server we create 4 endpoints in **/example/server.js**:\n\n1. **/home** : home page (not essential but its where our **login** form is.)\n2. **/auth** : *authenticate* the visitor (returns error + login form if failed)\n3. **/private** : our restricted content - ***login required*** (valid session token) to see this page\n4. **/logout** : invalidates the token and logs out the user (prevent from re-using old token)\n\nWe have *deliberately* made **server.js** as _simple as possible_ for:\n\n+ Readability\n+ Maintainability\n+ Testability (all helper/handler methods are tested separately)\n\n> note: if you can make it _simpler_, please submit an [issue](https://github.com/dwyl/learn-json-web-tokens/issues) to discuss!\n\n## Helper Methods\n\nAll the helper methods are kept in **/example/lib/helpers.js**\nThe two most interesting/relevant methods are (simplified versions shown here):\n\n```javascript\n// generate the JWT\nfunction generateToken(req){\n  return jwt.sign({\n    auth:  'magic',\n    agent: req.headers['user-agent'],\n    exp:   Math.floor(new Date().getTime()/1000) + 7*24*60*60; // Note: in seconds!\n  }, secret);  // secret is defined in the environment variable JWT_SECRET\n}\n```\nWhich ***generates*** our JWT token when the user authenticates (this is then sent back to the client in the **Authorization** header for use in subsequent requests),\n\nand\n\n```javascript\n// validate the token supplied in request header\nfunction validate(req, res) {\n  var token = req.headers.authorization;\n  try {\n    var decoded = jwt.verify(token, secret);\n  } catch (e) {\n    return authFail(res);\n  }\n  if(!decoded || decoded.auth !== 'magic') {\n    return authFail(res);\n  } else {\n    return privado(res, token);\n  }\n}\n```\n\nWhich **checks the JWT supplied by the client is valid**,\nshows private (\"privado\") content to the requestor if valid\nand renders the **authFail** ***error*** page if its not.\n\n**Note**: *Yes*, *both* these methods are ***synchronous***.\nBut, given that neither of these methods require *any* **I/O** *or* **Network** requests,\nits pretty safe to compute them synchronously.\n\n> Tip: If you're looking for a ***Full Featured*** **JWT Auth Hapi.js plugin** (which does the verification/validation *asynchronously*) for your Hapi.js-based app please check out: [https://github.com/**dwyl/hapi-auth-jwt2**](https://github.com/dwyl/hapi-auth-jwt2)\n\n## Tests\n\nYou may have noticed the [![Build Status][travis-image]][travis-url] badge at the *start* of this tutorial.\nThis is a sign the author(s) are not just *cobbling* code together.\nThe tests for both the server routes and helper functions are in: **/example/test**\n\n1. /example/test/**functional.js** - *exercises* all the **helper methods** we created in /example/lib/**helpers.js**\n[![Test Coverage](https://codeclimate.com/github/dwyl/learn-json-web-tokens/badges/coverage.svg)](https://codeclimate.com/github/dwyl/learn-json-web-tokens)\n2. /example/test/**integration.js** - simulates the requests a *user* would send to the server and tests the *responses*.\n\nPlease *read* through the tests and *tell us* if anything is unclear!\n**Note**: We wrote a basic \"***mock***\" of the http req/res objects see: /example/test/**mock.js**\nConfused/curious about Mocking? Read [When to Mock (by \"Uncle Bob\")](https://blog.8thlight.com/uncle-bob/2014/05/10/WhenToMock.html)\n\n- - -\n\n## Frequently Asked Questions (*FAQ*)\n\n> ***Got a Question? Ask!*** >> https://github.com/dwyl/learn-json-web-tokens/issues\n\n\n### Q: If I put the JWT in the *URL* or *Header* is it *secure*?\n\nGood question! The *quick* **answer** is: ***No***.\nUnless you are using SSL/TLS (http**s** in your url) to encrypt the connection,\nsending the Token [***in-the-clear***](https://en.wikipedia.org/wiki/Plaintext)\nis *always* going to be insecure (the token can be intercepted and re-used by a bad person...).\nA *naive* \"*mitigation*\" is to add *verifiable* \"claims\" to the token\nsuch as checking that the request came from the ***same browser*** (user-agent),\n**IP address** or more advanced\n\"[**browser fingerprints**](https://stackoverflow.com/a/3287761/1148249)\"\n... https://programmers.stackexchange.com/a/122385\n\nThe solution is to *either*:\n+ use one-time-use (_single use_) tokens (_which expire after the link has been clicked_) ***or***\n+ Don't use url-tokens where high degree of security is required.\n(e.g: don't send someone a link which allows them to perform a transaction)\n\n**Use-cases** for a JWT token in a url are:\n+ account verification - when you email a person a link after they register on your site. `https://yoursite.co/account/verify?token=jwt.goes.here`\n+ password re-set - ensures that the person re-setting the password has access to the email belonging to the account.\n `https://yoursite.co/account/reset-password?token=jwt.goes.here`\n\nBoth of these are good candidates for single-use tokens (_which expire after they have been clicked_).\n\n### Q: How do we *Invalidate* sessions?\n\nThe person using your app has their **device** (phone/tablet/laptop)\n***stolen***. How do you invalidate the token they were using?\n\nThe idea behind JWT is that the tokens are ***stateless***\nthey can be **computed** by any node in a cluster and verified\nwithout a (slow) request to a database.\n\n#### Store the Token in a Database?\n\n##### LevelDB\n\nIf your app is *small* or you don't want to have to run a Redis server,\nyou can get most of the benefits of Redis by using LevelDB: http://leveldb.org/\n\nWe can ***either*** store the ***valid*** Tokens in the DB **or**\nwe can store the ***invalid*** tokens.\nBoth of these require a round-trip to the DB to check if valid/invalid.\nSo we prefer to store ***all*** tokens and update the\n**valid** property of the token from true to false.\n\nExample record stored in LevelDB\n```json\n\"GUID\" : {\n  \"auth\" : \"true\",\n  \"created\" : \"timestamp\",\n  \"uid\" : \"1234\"\n}\n```\nWe would lookup this record by its GUID:\n\n```js\nvar db = require('level');\ndb.get(GUID, function(err, record){\n  // pseudo-code\n  if(record.auth){\n    // display private content\n  } else {\n    // show error message\n  }\n});\n```\nsee: example/lib/helpers.js **validate** method for detail.\n\n##### Redis\n\nRedis is the *scalable* way of storing your tokens.\n\nIf you are *totally* new to Redis read:\n+ Intro: https://redis.io/topics/introduction\n+ Redis in 30 mins:\nhttps://openmymind.net/2011/11/8/Redis-Zero-To-Master-In-30-Minutes-Part-1/\n+ What is Redis? https://www.slideshare.net/dvirsky/introduction-to-redis\n\nRedis ***Scales*** (provided you have the RAM):\nhttps://stackoverflow.com/questions/10478794/more-than-4-billion-key-value-pairs-in-redis\n\n> ***Get Started with Redis today***! [https://github.com/dwyl/**learn-redis**](https://github.com/dwyl/learn-redis)\n\n#### Memcache?\n\n***Quick* answer**: *use **Redis***:\nhttps://stackoverflow.com/questions/10558465/memcache-vs-redis\n\n\n### Q: Returning Visitor (*no State Preservation between sessions*)\n\nCookies are stored on the client and are sent by the browser to the server on every request. If the person *closes* their browser, cookies are preserved, so they can continue where they left off without having to log-in again. However, cookies will be sent on **all** requests that match the path and issuing domain, including those for images and css, where it isn't needed.\n\n[`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window.localStorage) provides a better mechanism for storing tokens during and between browser sessions.\n\n#### Browser-based Applications\n\nThere are two options for storing your JWTs:\n1. Use ***localStorage*** to store your JWTs on the client side (_means you need to remember to send the JWT in your `authorization` header for subsequent http/ajax requests_)\n2. Store your JWT in a cookie (_set and forget_)\n\n> We _obviously_ prefer the cookie-less approach.\nBut if done right, cookies still have their place in modern web apps!\n(_see the Auth0 article on \"10 things you should know\" in the further reading below_)\n\n##### Useful Links\n\n+ Good ***history*** & overview of **Localstorage**:\nhttp://diveintohtml5.info/storage.html\n+ MDN **Window.localStorage**:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Window.localStorage\n+ Brief description + basic *examples*:\nhttps://www.html5rocks.com/en/features/storage\n+ Will it work for *my* visitors?\nhttps://caniuse.com/#search=localstorage\n(**Quick answer**: ***Yes***! IE 8 & above, Android 4.0+, IOS 7.1+, Chrome & Firefox )\n\n\n#### Programmatic (API) Access\n\nOther services accessing your API will have to store the token in a\nretrieval system (e.g: Redis or SQLite for mobile apps) and send the token back on each request.\n\n### How to generate secret key?\n\n> \"*Apologies if this is mentioned elsewhere. The private key used for signing the tokens, is this the same as a private key generated using ssh-keygen?*\" ~ Originally asked by [@skota](https://github.com/skota) see: [dwyl/**hapi-auth-jwt2/issues**/48](https://github.com/dwyl/hapi-auth-jwt2/issues/48)\n\n\nSince JSON Web Tokens (JWT) do not have to be signed using [***asymmetric encryption***](https://en.wikipedia.org/wiki/Public-key_cryptography) you do not *have* to generate your secret key using ***ssh-keygen***. You can just as easily use a ***strong password*** e.g: https://www.grc.com/passwords.htm provided it's ***long and random***. The chance of collision (and thus someone being able to modify the payload, adding or modifying claims, and create a valid signature) is pretty low. And if you join two of those **Strong Passwords** (*strings*) together, you'll have a 128bit ASCII String. So the chances of collision are less than the [number of *atoms* in the universe](https://en.wikipedia.org/wiki/Observable_universe#Matter_content_.E2.80.94_number_of_atoms).\n\nTo quickly and easily create a secret key using Node's crypto library, run this command.\n\n    node -e \"console.log(require('crypto').randomBytes(32).toString('hex'));\"\n\nIn other words, you *can* use an ***RSA key***, but you don't *have to*.\n\nThe main thing you need to remember is: don't share the key with people who are not in your core (\"*DevOps Team*\") or *accidentally* publish it by committing it to GitHub!\n\n\n\n\n## Which Node.js Module?\n\nA search for \"**JSON Web Token**\" on NPM:\nhttps://www.npmjs.com/search?q=json+web+token yields ***many*** results!\n\n![npm search for json web token](https://i.imgur.com/ZLN3LlW.png)\n\n### Building a Web App with Hapi.js?\n\nIn our efforts to simplify using JWTs in Hapi.js apps,\nwe wrote this module: https://github.com/dwyl/hapi-auth-jwt2\n\n\n### General Use in *Other* Node.js Projects\n\nWe *highly* recommend using the **jsonwebtoken** module\nmade by our friends [@auth0](https://twitter.com/auth0)\n([the identity/authentication experts](https://auth0.com/about)):\n- https://github.com/auth0/node-jsonwebtoken\nWhich in turn uses:\nhttps://github.com/brianloveswords/node-jws\n[![NPM][jsonwebtoken-icon] ][jsonwebtoken-url]\n\nAnother great option is: https://github.com/joaquimserafim/json-web-token\nby our friend [@joaquimserafim](https://github.com/joaquimserafim)\n\n## Essential Reading (_Background_)\n\n- Original **Specification** (Draft):\nhttps://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32\n- Great overview from Atlassian:\nhttps://developer.atlassian.com/cloud/jira/platform/understanding-jwt/\n- Good intro (ruby-specific examples):\nhttp://www.intridea.com/blog/2013/11/7/json-web-token-the-useful-little-standard-you-haven-t-heard-about\n+ Friendlier introduction: https://jwt.io/\n+ Getting to know JWT:\nhttps://scotch.io/tutorials/the-anatomy-of-a-json-web-token\n- Discussion: https://ask.auth0.com/c/jwt\n+ ***How to*** do **stateless authentication** (session-less & cookie-less):\nhttps://stackoverflow.com/questions/20588467/how-to-do-stateless-session-less-cookie-less-authentication\n\n\n## Further Reading (_Recommended_) [![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/dwyl/learn-json-web-tokens/issues)\n\n+ JWT with Passport.js:\nhttps://stackoverflow.com/questions/20228572/passport-local-with-node-jwt-simple\n+ JWT Tokens as API Keys:\nhttps://auth0.com/blog/2014/12/02/using-json-web-tokens-as-api-keys/\n+ **10 Things you should know** about ***Tokens and Cookies***:\nhttps://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/#xss-xsrf\n+ Information Security discussion:\nhttps://security.stackexchange.com/questions/51294/json-web-tokens-jwt-as-user-identification-and-authentication-tokens\n+ Using JWT with node.js (express + backbone):\nhttps://www.sitepoint.com/using-json-web-tokens-node-js/\n+ Token-based Authentication with Socket.IO\nhttps://auth0.com/blog/2014/01/15/auth-with-socket-io/\n+ JWT Auth *discussion* on Hacker News:\nhttps://news.ycombinator.com/item?id=7084435\n+ The Spec but nicer:\nhttps://self-issued.info/docs/draft-ietf-oauth-json-web-token.html\n+ Extended (Wiki) article on Claims-based authentication:\nhttps://en.wikipedia.org/wiki/Claims-based_identity\n+ Securing Requests with JWT:\nhttps://websec.io/2014/08/04/Securing-Requests-with-JWT.html\n+ Avoid Database in authenticating user for each request (stateless):\nhttps://security.stackexchange.com/questions/49145/avoid-hitting-db-to-authenticate-a-user-on-every-request-in-stateless-web-app-ar\n+ The Twelve-Factor App: https://12factor.net/ + https://12factor.net/processes\n+ Auth in Hapi with JWT: https://medium.com/@thedon/auth-in-hapi-with-jwt-780ce4d072c7#.clgj5lknq\n+ Token based authentication in Node.js with Passport, JWT and bcrypt: https://jonathas.com/token-based-authentication-in-nodejs-with-passport-jwt-and-bcrypt/\n+ JWT Signing Algorithms: https://www.loginradius.com/blog/async/jwt-signing-algorithms/\n\n# *Thanks* for Learning with Us!\n\nIf you found this quick guide useful, please star it on GitHub!\nand re-tweet to share it with others: https://twitter.com/olizilla/status/626487231860080640\n\n[![olizilla tweet](https://i.imgur.com/rCvNvvk.jpg)](https://twitter.com/olizilla/status/626487231860080640 \"Please Re-Tweet!\")\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.46875,
          "content": "{\n  \"name\": \"learn-json-web-tokens\",\n  \"version\": \"1.0.6\",\n  \"description\": \"A JSON Web Tokens Tutorial to secure your node.js apps!\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"functional\": \"istanbul cover ./node_modules/tape/bin/tape ./example/test/functional.js | tap-spec\",\n    \"coverage\": \"istanbul cover ./node_modules/tape/bin/tape ./example/test/functional.js && istanbul check-coverage --statements 100 --functions 100 --lines 100 --branches 100\",\n    \"spec\": \"tape ./example/test/integration.js | tap-spec\",\n    \"test\": \"istanbul cover ./node_modules/tape/bin/tape ./example/test/functional.js\",\n    \"start\": \"node ./example/server.js\",\n    \"jshint\": \"jshint -c .jshintrc --exclude-path .gitignore .\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/dwyl/learn-json-web-tokens.git\"\n  },\n  \"keywords\": [\n    \"JSON\",\n    \"Web\",\n    \"Tokens\",\n    \"JWT\",\n    \"Security\"\n  ],\n  \"author\": \"@nelsonic <contact.nelsonic@gmail.com> (https://github.com/nelsonic)\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/dwyl/learn-json-web-tokens/issues\"\n  },\n  \"homepage\": \"https://github.com/dwyl/learn-json-web-tokens\",\n  \"dependencies\": {\n    \"jsonwebtoken\": \"^8.5.1\",\n    \"level\": \"^5.0.1\"\n  },\n  \"devDependencies\": {\n    \"istanbul\": \"^0.4.3\",\n    \"jshint\": \"^2.8.0\",\n    \"pre-commit\": \"^1.0.10\",\n    \"request\": \"^2.60.0\",\n    \"tap-spec\": \"^5.0.0\",\n    \"tape\": \"^4.0.1\"\n  },\n  \"engines\": {\n    \"node\": \">= 6\"\n  },\n  \"pre-commit\": [\n    \"jshint\",\n    \"coverage\"\n  ]\n}\n"
        }
      ]
    }
  ]
}