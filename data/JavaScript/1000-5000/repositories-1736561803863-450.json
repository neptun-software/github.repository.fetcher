{
  "metadata": {
    "timestamp": 1736561803863,
    "page": 450,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mrvautin/adminMongo",
      "stars": 3877,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0078125,
          "content": "app.json"
        },
        {
          "name": ".eslintrc.json",
          "type": "blob",
          "size": 0.7744140625,
          "content": "{\n    \"extends\": \"standard\",\n    \"installedESLint\": true,\n    \"plugins\": [\n        \"standard\",\n        \"promise\"\n    ],\n    \"globals\": {\n        \"$\": true\n    },\n    \"env\": {\n        \"browser\": true,\n        \"node\": true\n    },\n    \"rules\": {\n        \"consistent-return\": 2,\n        \"indent\"           : [1, 4],\n        \"no-else-return\"   : 1,\n        \"semi\"             : [1, \"always\"],\n        \"space-unary-ops\"  : 2,\n        \"no-undef\": 1,\n        \"no-new\": 0,\n        \"no-unused-vars\": 1,\n        \"keyword-spacing\": [\"error\", { \"before\": false, \"after\": false }],\n        \"space-before-function-paren\": 0,\n        \"space-before-blocks\": [\"error\", \"never\"],\n        \"camelcase\": 0,\n        \"handle-callback-err\": [\"error\", \"none\"],\n        \"object-curly-spacing\": [\"error\", \"never\"]\n    }\n}"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.634765625,
          "content": "config/\ndata/\nnode_modules/\nreleases/\n\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules\njspm_packages\n\n# Optional npm cache directory\n.npm\n\n# Optional REPL history\n.node_repl_history\nbackups\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.091796875,
          "content": "language: node_js\nservices:\n  - mongodb\nnode_js:\n  - \"4.0.0\"\n  - \"4.4.5\"\n  - \"5.4.1\"\n  - \"6.2\""
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.1083984375,
          "content": "FROM node:alpine\nWORKDIR /app/user\n\nCOPY package.json .\nRUN npm install --production\n\nCOPY . .\nCMD node app.js\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Mark Moffat\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Procfile",
          "type": "blob",
          "size": 0.0166015625,
          "content": "web: node app.js\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.1240234375,
          "content": "# adminMongo\n\n![npm downloads badge](https://img.shields.io/npm/dm/admin-mongo.svg \"npm download badge\")\n![npm version badge](https://img.shields.io/npm/v/admin-mongo.svg \"npm version badge\")\n[![Build Status](https://travis-ci.org/mrvautin/adminMongo.svg?branch=master)](https://travis-ci.org/mrvautin/adminMongo)\n[![Github stars](https://img.shields.io/github/stars/mrvautin/adminMongo.svg?style=social&label=Star)](https://github.com/mrvautin/adminMongo)\n\nadminMongo is a cross platform user interface (GUI) to handle all your MongoDB connections/databases needs. adminMongo is fully responsive and should work on a range of devices.\n\n> adminMongo connection information (including username/password) is stored unencrypted in a config file, it is not recommended to run this application on a production or public facing server without proper security considerations.\n\n## Support\n\nIf my work helps you, please consider [![buying me a coffee](https://cdn-images-1.medium.com/max/738/1*G95uyokAH4JC5Ppvx4LmoQ@2x.png)](https://www.buymeacoffee.com/mrvautin)\n\n## Installation\n\n1. Navigate to folder & install adminMongo: `git clone https://github.com/mrvautin/adminMongo.git && cd adminMongo`\n2. Install dependencies: `npm install`\n3. Start application: `npm start` or `node app`\n4. Visit [http://127.0.0.1:1234](http://127.0.0.1:1234) in your browser\n\n> Note: Node.js version 4.x or above is required\n\n## Electron App\n\nadminMongo can also be used as a cross platform Electron application. Due to the size of Electron it will need to be built manually.\n\nTo build for Mac:\n\n`$ npm run-script packageOsx`\n\nTo build for Windows:\n\n`$ npm run-script packageWin32`\n\nTo build for Linux:\n\n`$ npm run-script packageLinux`\n\nOnce built, the executable will be in the `/releases` folder.\n\n### Prebuilt binaries\n\nPrebuilt binaries can be downloaded here:\n\n[Mac 64bit](https://github.com/mrvautin/adminMongo/releases/download/1.0.0/adminMongo_Mac.zip)\n\n[Windows 32bit](https://github.com/mrvautin/adminMongo/releases/download/1.0.0/adminMongo_Win32.zip)\n\n[Windows 64bit](https://github.com/mrvautin/adminMongo/releases/download/1.0.0/adminMongo_Win64.zip)\n\n> The Electron builds have been tested on Mac and Windows 10. Linux has not been tested. Please report any issues.\n\n## Deploy on Heroku\n\n[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/mrvautin/adminMongo)\n\n## Demo (read only)\n\nA read only demo can be seen [here](http://demo.adminmongo.markmoffat.com)\n\n## Features\n\n* Manage from a connection level for easy access to multiple databases\n* Create/Delete databases\n* Backup/Restore databases\n* Create/Delete/Edit collection\n* Create/Delete/Edit documents\n* Create/Delete indexes\n* Query documents\n* Collection statistics\n* Export collections in JSON format\n* Server monitoring\n\n### Current limitations\n\n* Documents need to have an \"_id\" value which is a string, integer, or MongoDB ObjectId. Documents using Composite ID indexing is currently not supported.\n* Connection strings with multiple hosts for replica sets are currently not supported.\n\n## Configuration\n\nadminMongo will listen on host: `localhost` and  port: `1234` by default. This can be overwritten by adding a config file in `/config/app.json`. For example:\n\n```\n{\n    \"app\": {\n        \"host\": \"10.0.0.1\",\n        \"port\": 4321,\n        \"password\": \"secureadminpassword\",\n        \"locale\": \"de\",\n        \"context\": \"dbApp\",\n        \"monitoring\": false\n    }\n}\n```\n\n> Note: Any changes to the config file requires a restart of the application\n\nAll above parameters are usable through the environment which makes it very handy to when using adminMongo as a docker container!\njust run `docker run -e HOST=yourchoice -e PORT=1234 ...`\n\nThe config file (optional) options are:\n\n|Option|Env-variable|Definition|\n|--- |--- |--- |\n|`host`|`HOST`|The IP address  `adminMongo`  will listen on|\n|`port`|`PORT`|The Port `adminMongo` will listen on|\n|`password`|`PASSWORD`|An application level password to add simply authentication|\n|`locale`|`LOCALE`|The locale is automatically set to the detected locale of Nodejs. If there is not a translation, `adminMongo` will default to English. This setting overrides the default/detected value|\n|`context`|`CONTEXT`|Setting a `context` of \"dbApp\" is like changing the base URL of the app and will mean the app will listen on `http://10.0.0.1:4321/dbApp`. Ommiting a context will mean the application will listen on root. Eg: `http://10.0.0.1:4321`. This setting can be useful when running `adminMongo` behind Nginx etc.|\n|`monitoring`|`MONITORING`|Whether to run monitoring at regular intervals. Defaults to true or on|\n\n### Setting a context path\n\nSetting a `context` of \"dbApp\" is like changing the base URL of the app and will mean the app will listen on `http://10.0.0.1:4321/dbApp`. Ommiting a context will mean the application will listen on\nroot. Eg: `http://10.0.0.1:4321`. This setting can be useful when running `adminMongo` behind Nginx etc.\n\nAn example Nginx server block. Note the `location /dbApp {` and `proxy_pass http://10.0.0.1:4321/dbApp;` lines match\nthe `context` set in the `/config/app.json` file.\n\n```\nserver {\n    listen 80;\n\n    server_name mydomain.com www.mydomain.com;\n\n    location /dbApp {\n        proxy_pass http://10.0.0.1:4321/dbApp;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n```\n\n### Language locale\n\n> Looking for people to translate into other languages. If you can help, grab the `/locale/en.js` file, translate to your language and submit a pull request.\n\nThe locale is automatically set to the detected locale of Nodejs. If there is not a translation, `adminMongo` will default to English. To override the detected locale\na setting can be added to the `app.json` file. See Configuration section for a \"German\" example.\n\n### Authentication\n\nBy default `adminMongo` is not password protected. You can add password authentication by adding a `password` value to the `/config/app.json` file\n(See the Configuration section). Once added you will need to restart `adminMongo` and all routes will be protected until the correct password is added. You\nwill then be authenticated for the life of the session (60 mins by default) or if the \"Logout\" link is clicked.\n\n## Usage\n\n### Create a connection\n\nAfter visiting [http://127.0.0.1:1234](http://127.0.0.1:1234) you will be presented with a connection screen. You need to give your connection a unique name as a reference when using adminMongo and a MongoDB formatted connection string. The format of a MongoDB connection string can form: `mongodb://<user>:<password>@127.0.0.1:<port>/<db>` where specifying to the `<db>` level is optional. For more information on MongoDB connection strings, see the [official MongoDB documentation](http://docs.mongodb.org/manual/reference/connection-string/).\n\nYou can supply a connection options object (see [docs](http://mongodb.github.io/node-mongodb-native/2.1/reference/connecting/connection-settings/)) with each connection.\n\nFor example:\n\n```\n{\n    \"poolSize\": 10,\n    \"autoReconnect\": false,\n    \"ssl\": false\n}\n```\n\nNote: The connection can be either local or remote hosted on VPS or MongoDB service such as mLab.\n\nThe connection can also be automatically initiated through the environment (or with the docker -e parameters)\n\n|Env-variable|Description|\n|--- |--- |\n|`CONN_NAME`|The name of the connection to create on boot|\n|`DB_USERNAME`|The username for the database connection|\n|`DB_PASSWORD`|The password for the database user|\n|`DB_HOST`|The host IP address or DNS name without the port!|\n|`DB_PORT`|The port of the mongoDB database, if not provided the default 27017 will be used|\n|`DB_NAME`|The name of the database|\n\n*The Connection setup screen*\n![adminMongo connections screen](https://raw.githubusercontent.com/mrvautin/mrvautin.github.io/master/images/adminMongo/adminMongo_connections.png \"adminMongo connections screen\")\n\n### Connection/Database admin\n\nAfter opening your newly created connection, you are able to see all database objects associated with your connection. Here you can create/delete collections, create/delete users and see various stats for your database.\n\n*The connections/database screen*\n![adminMongo database screen](https://raw.githubusercontent.com/mrvautin/mrvautin.github.io/master/images/adminMongo/adminMongo_dbview.png \"adminMongo database screen\")\n\n### Collections\n\nAfter selecting your collection from the \"Database Objects\" menu, you will be presented with the collections screen. Here you can see documents in pagination form, create new documents, search documents, delete, edit documents and view/add indexes to your collection.\n\n*The collections screen*\n![adminMongo collections screen](https://raw.githubusercontent.com/mrvautin/mrvautin.github.io/master/images/adminMongo/adminMongo_collectionview.png \"adminMongo collections screen\")\n\n### Searching/Querying documents\n\nYou can perform searches of documents using the `Search documents` button on the collections screen. You will need to enter the key (field name) and value. Eg: key = \"_id\" and value = \"569ff81e0077663d78a114ce\" (Only works on string \"_id\" fields - Use \"Query Documents\" for ObjectID's).\n\n> You can clear your search by clicking the `Reset` button on the collections screen.\n\n*Simple search documents*\n![adminMongo search documents](https://raw.githubusercontent.com/mrvautin/mrvautin.github.io/master/images/adminMongo/adminMongo_searchdocuments.png \"adminMongo search documents\")\n\nComplex querying of documents is done through the \"Query documents\" button. This allows a query Object to be passed to MongoDB to return results.\nQueries can be written in full BSON format or EJSON format. For example these queries should return the same results:\n\n```\n{\n    ObjectId(\"56a97ed3f718fe9a4f599489\")\n}\n```\n\nis equivalent to:\n\n```\n{\n    \"$oid\": \"56a97ed3f718fe9a4f599489\"\n}\n```\n\n*Query documents*\n![adminMongo search documents](https://raw.githubusercontent.com/mrvautin/mrvautin.github.io/master/images/adminMongo/adminMongo_querydocuments.png \"adminMongo search documents\")\n\n\n### Documents\n\nAdding and editing documents is done using a JSON syntax highlighting control.\n\n*Editing a document*\n![adminMongo documents](https://raw.githubusercontent.com/mrvautin/mrvautin.github.io/master/images/adminMongo/adminMongo_docedit.png \"adminMongo documents\")\n\nDocuments with Media embedded show previews\n\n*Documents with media*\n![adminMongo media](https://raw.githubusercontent.com/mrvautin/mrvautin.github.io/master/images/adminMongo/adminMongo_media.png \"adminMongo media documents\")\n\n### Server Monitoring\n\n*Functionality currently in Beta*\n\nSelected server monitoring is done at regular intervals and stored in local database store for 24hrs.\n\n*New connections require an app restart for monitoring to commence*\n\n*Server monitoring*\n![adminMongo server monitoring](https://raw.githubusercontent.com/mrvautin/mrvautin.github.io/master/images/adminMongo/adminMongo_servermonitoring.png \"adminMongo server monitoring\")\n\n### Indexes\n\nIndexes can be added from the collection screen. Please see the [official MongoDB documentation](https://docs.mongodb.org/manual/indexes/) on adding indexes.\n\n*Viewing/Adding indexes*\n![adminMongo documents](https://raw.githubusercontent.com/mrvautin/mrvautin.github.io/master/images/adminMongo/adminMongo_manageindexes.png \"adminMongo indexes\")\n\n## Tests\n\nThe `adminMongo` API tests include:\n\n- Add and remove a connection\n- Add and remove a database\n- Add, remove and rename a collection\n- Create and delete a user\n- Add, query and delete a document\n\nTo run tests, simply run:\n\n```\nnpm test\n```\n\n**Note: You will need to ensure there is no password protection setup in the `/config/app.json`.**\n\n*You may need to edit the variables and connection string in `/tests/tests.js` for your MongoDB instance.*\n\nIf you see any missing tests, please submit a PR.\n\n## Contributing\n\n1. Fork it!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -am 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request :D\n\n## Future plans\n\nPlease make any suggestions.\n\n## License\n\n[The MIT License](https://github.com/mrvautin/adminMongo/tree/master/LICENSE)\n"
        },
        {
          "name": "app.js",
          "type": "blob",
          "size": 10.919921875,
          "content": "var express = require('express');\nvar path = require('path');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar handlebars = require('express-handlebars');\nvar nconf = require('nconf');\nvar session = require('express-session');\nvar async = require('async');\nvar moment = require('moment');\nvar fs = require('fs');\n\n// Define routes\nvar indexRoute = require('./routes/index');\nvar apiRoute = require('./routes/api');\nvar usersRoute = require('./routes/users');\nvar configRoute = require('./routes/config');\nvar docRoute = require('./routes/document');\nvar dbRoute = require('./routes/database');\nvar collectionRoute = require('./routes/collection');\n\n// set the base dir to __dirname when running as webapp and electron path if running as electron app\nvar dir_base = __dirname;\nif(process.versions['electron']){\n    dir_base = path.join(process.resourcesPath.toString(), 'app/');\n}\n\nvar app = express();\n\n// setup the translation\nvar i18n = new (require('i18n-2'))({\n    locales: ['en', 'de', 'es', 'ru', 'zh-cn', 'it'],\n    directory: path.join(dir_base, 'locales/')\n});\n\n// setup DB for server stats\nvar Datastore = require('nedb');\nvar db = new Datastore({filename: path.join(dir_base, 'data/dbStats.db'), autoload: true});\n\n// view engine setup\napp.set('views', path.join(dir_base, 'views/'));\napp.engine('hbs', handlebars({extname: 'hbs', defaultLayout: path.join(dir_base, 'views/layouts/layout.hbs')}));\napp.set('view engine', 'hbs');\n\n// Check existence of backups dir, create if nothing\nif(!fs.existsSync(path.join(dir_base, 'backups'))) fs.mkdirSync(path.join(dir_base, 'backups'));\n\n// helpers for the handlebars templating platform\nhandlebars = handlebars.create({\n    helpers: {\n        __: function (value){\n            return i18n.__(value);\n        },\n        toJSON: function (object){\n            return JSON.stringify(object);\n        },\n        niceBool: function (object){\n            if(object === undefined)return'No';\n            if(object === true)return'Yes';\n            return'No';\n        },\n        app_context: function (){\n            if(nconf.stores.app.get('app:context') !== undefined){\n                return'/' + nconf.stores.app.get('app:context');\n            }return'';\n        },\n        ifOr: function (v1, v2, options){\n            return(v1 || v2) ? options.fn(this) : options.inverse(this);\n        },\n        ifNotOr: function (v1, v2, options){\n            return(v1 || v2) ? options.inverse(this) : options.fn(this);\n        },\n        formatBytes: function (bytes){\n            if(bytes === 0)return'0 Byte';\n            var k = 1000;\n            var decimals = 2;\n            var dm = decimals + 1 || 3;\n            var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n            var i = Math.floor(Math.log(bytes) / Math.log(k));\n            return(bytes / Math.pow(k, i)).toPrecision(dm) + ' ' + sizes[i];\n        },\n        formatDuration: function(time){\n            return moment.duration(time, 'seconds').humanize();\n        }\n    }\n});\n\n// setup nconf to read in the file\n// create config dir and blank files if they dont exist\nvar dir_config = path.join(dir_base, 'config/');\nvar config_connections = path.join(dir_config, 'config.json');\nvar config_app = path.join(dir_config, 'app.json');\n\n// Check existence of config dir and config files, create if nothing\nif(!fs.existsSync(dir_config)) fs.mkdirSync(dir_config);\n\n// The base of the /config/app.json file, will check against environment values\nvar configApp = {\n    app: {}\n};\nif(process.env.HOST) configApp.app.host = process.env.HOST;\nif(process.env.PORT) configApp.app.port = process.env.PORT;\nif(process.env.PASSWORD) configApp.app.password = process.env.PASSWORD;\nif(process.env.LOCALE) configApp.app.locale = process.env.LOCALE;\nif(process.env.CONTEXT) configApp.app.context = process.env.CONTEXT;\nif(process.env.MONITORING) configApp.app.monitoring = process.env.MONITORING;\n\nif(!fs.existsSync(config_app)) fs.writeFileSync(config_app, JSON.stringify(configApp));\n\n// Check the env for a connection to initiate\nvar configConnection = {\n    connections: {}\n};\nif(process.env.CONN_NAME && process.env.DB_HOST) {\n    if(!process.env.DB_PORT) process.env.DB_PORT = '27017'; // Use the default mongodb port when DB_PORT is not set\n    var connectionString = 'mongodb://';\n    if(process.env.DB_USERNAME && process.env.DB_PASSWORD && process.env.DB_NAME) {\n        connectionString += process.env.DB_USERNAME + ':' + process.env.DB_PASSWORD + '@' + process.env.DB_HOST + ':' + process.env.DB_PORT + '/' + process.env.DB_NAME;\n    }else if (process.env.DB_USERNAME && process.env.DB_PASSWORD) {\n        connectionString += process.env.DB_USERNAME + ':' + process.env.DB_PASSWORD + '@' + process.env.DB_HOST + ':' + process.env.DB_PORT + '/'\n    } else {    \n        connectionString += process.env.DB_HOST + ':' + process.env.DB_PORT\n    }\n    configConnection.connections[process.env.CONN_NAME] = {\n        connection_options: {},\n        connection_string: connectionString\n    };\n}\nif (!fs.existsSync(config_connections) || fs.readFileSync(config_connections, 'utf8') === '{}')\n    fs.writeFileSync(config_connections, JSON.stringify(configConnection));\n\n// if config files exist but are blank we write blank files for nconf\nif(fs.existsSync(config_app, 'utf8')){\n    if(fs.readFileSync(config_app, 'utf8') === ''){\n        fs.writeFileSync(config_app, '{}', 'utf8');\n    }\n}\nif(fs.existsSync(config_connections, 'utf8')){\n    if(fs.readFileSync(config_connections, 'utf8') === ''){\n        fs.writeFileSync(config_connections, '{}', 'utf8');\n    }\n}\n\n// setup the two conf. 'app' holds application config, and connections\n// holds the mongoDB connections\nnconf.add('connections', {type: 'file', file: config_connections});\nnconf.add('app', {type: 'file', file: config_app});\n\n// set app defaults\nvar app_host = process.env.HOST || 'localhost';\nvar app_port = process.env.PORT || 1234;\n\n// get the app configs and override if present\nif(nconf.stores.app.get('app:host') !== undefined){\n    app_host = nconf.stores.app.get('app:host');\n}\nif(nconf.stores.app.get('app:port') !== undefined){\n    app_port = nconf.stores.app.get('app:port');\n}\nif(nconf.stores.app.get('app:locale') !== undefined){\n    i18n.setLocale(nconf.stores.app.get('app:locale'));\n}\n\napp.locals.app_host = app_host;\napp.locals.app_port = app_port;\n\n// setup the app context\nvar app_context = '';\nif(nconf.stores.app.get('app:context') !== undefined){\n    app_context = '/' + nconf.stores.app.get('app:context');\n}\n\napp.use(logger('dev'));\napp.use(bodyParser.json({limit: '16mb'}));\napp.use(bodyParser.urlencoded({extended: false}));\napp.use(cookieParser());\n\n// setup session\napp.use(session({\n    secret: '858SGTUyX8w1L6JNm1m93Cvm8uX1QX2D',\n    resave: true,\n    saveUninitialized: true\n}));\n\n// front-end modules loaded from NPM\napp.use(app_context + '/static', express.static(path.join(dir_base, 'public/')));\napp.use(app_context + '/font-awesome', express.static(path.join(dir_base, 'node_modules/font-awesome/')));\napp.use(app_context + '/jquery', express.static(path.join(dir_base, 'node_modules/jquery/dist/')));\napp.use(app_context + '/bootstrap', express.static(path.join(dir_base, 'node_modules/bootstrap/dist/')));\napp.use(app_context + '/css', express.static(path.join(dir_base, 'public/css')));\napp.use(app_context + '/fonts', express.static(path.join(dir_base, 'public/fonts')));\napp.use(app_context + '/js', express.static(path.join(dir_base, 'public/js')));\napp.use(app_context + '/favicon.ico', express.static(path.join(dir_base, 'public/favicon.ico')));\n\n// Make stuff accessible to our router\napp.use(function (req, res, next){\n    req.nconf = nconf.stores;\n    req.handlebars = handlebars;\n    req.i18n = i18n;\n    req.app_context = app_context;\n    req.db = db;\n    next();\n});\n\n// add context to route if required\nif(app_context !== ''){\n    app.use(app_context, apiRoute);\n    app.use(app_context, usersRoute);\n    app.use(app_context, configRoute);\n    app.use(app_context, docRoute);\n    app.use(app_context, dbRoute);\n    app.use(app_context, collectionRoute);\n    app.use(app_context, indexRoute);\n}else{\n    app.use('/', apiRoute);\n    app.use('/', usersRoute);\n    app.use('/', configRoute);\n    app.use('/', docRoute);\n    app.use('/', dbRoute);\n    app.use('/', collectionRoute);\n    app.use('/', indexRoute);\n}\n\n// catch 404 and forward to error handler\napp.use(function (req, res, next){\n    var err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n\n// === Error handlers ===\n\n// development error handler\n// will print stacktrace\nif(app.get('env') === 'development'){\n    app.use(function (err, req, res, next){\n        console.log(err.stack);\n        res.status(err.status || 500);\n        res.render('error', {\n            message: err.message,\n            error: err,\n            helpers: handlebars.helpers\n        });\n    });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use(function (err, req, res, next){\n    console.log(err.stack);\n    res.status(err.status || 500);\n    res.render('error', {\n        message: err.message,\n        error: {},\n        helpers: handlebars.helpers\n    });\n});\n\napp.on('uncaughtException', function(err){\n    console.error(err.stack);\n    process.exit();\n});\n\n// add the connections to the connection pool\nvar connection_list = nconf.stores.connections.get('connections');\nvar connPool = require('./connections');\nvar monitoring = require('./monitoring');\napp.locals.dbConnections = null;\n\nasync.forEachOf(connection_list, function (value, key, callback){\n    var MongoURI = require('mongo-uri');\n\n    try{\n        MongoURI.parse(value.connection_string);\n        connPool.addConnection({connName: key, connString: value.connection_string, connOptions: value.connection_options}, app, function (err, data){\n            if(err)delete connection_list[key];\n            callback();\n        });\n    }catch(err){\n        callback();\n    }\n},\n    function (err){\n        if(err) console.error(err.message);\n        // lift the app\n        app.listen(app_port, app_host, function (){\n            console.log('adminMongo listening on host: http://' + app_host + ':' + app_port + app_context);\n\n            // used for electron to know when express app has started\n            app.emit('startedAdminMongo');\n\n            if(nconf.stores.app.get('app:monitoring') !== false){\n                // start the initial monitoring\n                monitoring.serverMonitoring(db, app.locals.dbConnections);\n\n                // Keep firing monitoring every 30 seconds\n                setInterval(function (){\n                    monitoring.serverMonitoring(db, app.locals.dbConnections);\n                }, 30000);\n            }\n        }).on('error', function (err){\n            if(err.code === 'EADDRINUSE'){\n                console.error('Error starting adminMongo: Port ' + app_port + ' already in use, choose another');\n            }else{\n                console.error('Error starting adminMongo: ' + err);\n                app.emit('errorAdminMongo');\n            }\n        });\n    });\n\nmodule.exports = app;\n"
        },
        {
          "name": "app.json",
          "type": "blob",
          "size": 0.365234375,
          "content": "{\n  \"name\": \"adminMongo\",\n  \"description\": \"adminMongo is a Web based user interface (GUI) to handle all your MongoDB connections/databases needs.\",\n  \"repository\": \"https://github.com/mrvautin/adminMongo\",\n  \"logo\": \"https://raw.githubusercontent.com/mrvautin/mrvautin.github.io/master/images/adminMongo/adminMongo-Logo.png\",\n  \"keywords\": [\"node\", \"express\", \"mongodb\"]\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "connections.js",
          "type": "blob",
          "size": 1.05859375,
          "content": "var MongoClient = require('mongodb').MongoClient;\n\nexports.addConnection = function (connection, app, callback){\n    if(!app.locals.dbConnections){\n        app.locals.dbConnections = [];\n    }\n\n    if(!connection.connOptions){\n        connection.connOptions = {};\n    }\n\n    MongoClient.connect(connection.connString, connection.connOptions, function(err, database){\n        if(err){\n            callback(err, null);\n        }else{\n            var dbObj = {};\n            dbObj.native = database;\n            dbObj.connString = connection.connString;\n            dbObj.connOptions = connection.connOptions;\n\n            app.locals.dbConnections[connection.connName] = null;\n            app.locals.dbConnections[connection.connName] = dbObj;\n            callback(null, null);\n        }\n    });\n};\n\nexports.removeConnection = function (connection, app){\n    if(!app.locals.dbConnections){\n        app.locals.dbConnections = [];\n    }\n\n    try{\n        app.locals.dbConnections[connection].native.close();\n    }catch(e){}\n\n    delete app.locals.dbConnections[connection];\n    return;\n};\n"
        },
        {
          "name": "electron.js",
          "type": "blob",
          "size": 2.9375,
          "content": "const electron = require('electron');\n// Module to control application life.\nconst app = electron.app;\n// Module to create native browser window.\nconst BrowserWindow = electron.BrowserWindow;\n\nvar express = require('./app.js');\n\nconst{dialog} = require('electron');\nconst{Menu} = require('electron');\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet mainWindow;\n\nfunction createWindow(){\n    // Create the browser window.\n    mainWindow = new BrowserWindow({width: 1400, height: 800, 'node-integration': false});\n\n    // and load the index.html of the app.\n    mainWindow.loadURL('http://' + express.locals.app_host + ':' + express.locals.app_port);\n\n    // max the window\n    mainWindow.maximize();\n\n    // Emitted when the window is closed.\n    mainWindow.on('closed', function (){\n        // Dereference the window object, usually you would store windows\n        // in an array if your app supports multi windows, this is the time\n        // when you should delete the corresponding element.\n        mainWindow = null;\n    });\n\n        // Create the Application's main menu\n    var template = [{\n        label: 'Application',\n        submenu: [\n            {label: 'About Application', selector: 'orderFrontStandardAboutPanel:'},\n            {type: 'separator'},\n            {label: 'Quit', accelerator: 'Command+Q', click: function(){ app.quit(); }}\n        ]}, {\n            label: 'Edit',\n            submenu: [\n                {label: 'Undo', accelerator: 'CmdOrCtrl+Z', selector: 'undo:'},\n                {label: 'Redo', accelerator: 'Shift+CmdOrCtrl+Z', selector: 'redo:'},\n                {type: 'separator'},\n                {label: 'Cut', accelerator: 'CmdOrCtrl+X', selector: 'cut:'},\n                {label: 'Copy', accelerator: 'CmdOrCtrl+C', selector: 'copy:'},\n                {label: 'Paste', accelerator: 'CmdOrCtrl+V', selector: 'paste:'},\n                {label: 'Select All', accelerator: 'CmdOrCtrl+A', selector: 'selectAll:'}\n            ]}\n    ];\n\n    Menu.setApplicationMenu(Menu.buildFromTemplate(template));\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\n// express.on('startedAdminMongo', createWindow);\napp.on('ready', function (){\n    express.on('startedAdminMongo', function (){\n        createWindow();\n    });\n});\n\nexpress.on('errorAdminMongo', function (){\n    dialog.showErrorBox('Error', 'Error starting adminMongo. Please ensure no other instances are running before trying again.');\n    app.quit();\n});\n\n// Quit when all windows are closed.\napp.on('window-all-closed', function (){\n    app.quit();\n});\n\napp.on('activate', function (){\n    // On OS X it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if(mainWindow === null){\n        createWindow();\n    }\n});\n"
        },
        {
          "name": "locales",
          "type": "tree",
          "content": null
        },
        {
          "name": "monitoring.js",
          "type": "blob",
          "size": 4.1337890625,
          "content": "var _ = require('lodash');\n\n// Removes old monitoring data. We only want basic monitoring with the last 100 events.\n// We keep last 80 and remove the rest to be sure.\nfunction serverMonitoringCleanup(db, conn){\n    var exclude = {\n        eventDate: 0,\n        pid: 0,\n        version: 0,\n        uptime: 0,\n        network: 0,\n        connectionName: 0,\n        connections: 0,\n        memory: 0,\n        dataRetrieved: 0,\n        docCounts: 0\n    };\n\n    var retainedRecords = (24 * 60) * 60 / 30; // 24 hours worth of 30 sec blocks (data refresh interval)\n\n    db.find({connectionName: conn}).skip(retainedRecords).sort({eventDate: -1}).projection(exclude).exec(function (err, serverEvents){\n        var idArray = [];\n        _.each(serverEvents, function(value, key){\n            idArray.push(value._id);\n        });\n\n        db.remove({'_id': {'$in': idArray}}, {multi: true}, function (err, newDoc){});\n    });\n};\n\n// runs a regular job against the connections and inserts into a local DB\nvar currDocCounts = {\n    queried: 0,\n    inserted: 0,\n    deleted: 0,\n    updated: 0\n};\n\nexports.serverMonitoring = function (monitoringDB, dbs){\n    if(dbs){\n        Object.keys(dbs).forEach(function(key){\n            var adminDb = dbs[key].native.admin();\n            adminDb.serverStatus(function(err, info){\n                // if we got data back from db. If not, normally related to permissions\n                var dataRetrieved = false;\n                if(info){\n                    dataRetrieved = true;\n                }\n\n                // doc numbers. We get the last interval number and subtract the current to get the diff\n                var docCounts = '';\n                var activeClients = '';\n                var pid = 'N/A';\n                var version = 'N/A';\n                var uptime = 'N/A';\n                var connections = '';\n                var memory = '';\n\n                // set the values if we can get them\n                if(info){\n                    docCounts = info.metrics ? getDocCounts(currDocCounts, info.metrics.document) : 0;\n                    activeClients = info.globalLock ? info.globalLock.activeClients : 0;\n                    pid = info.pid;\n                    version = info.version;\n                    uptime = info.uptime;\n                    connections = info.connections;\n                    memory = info.mem;\n                }\n\n                var doc = {\n                    eventDate: new Date(),\n                    pid: pid,\n                    version: version,\n                    uptime: uptime,\n                    activeClients: activeClients,\n                    connectionName: key,\n                    connections: connections,\n                    memory: memory,\n                    dataRetrieved: dataRetrieved,\n                    docCounts: docCounts\n                };\n\n                // insert the data into local DB\n                monitoringDB.insert(doc, function (err, newDoc){});\n\n                // clean up old docs\n                serverMonitoringCleanup(monitoringDB, key);\n            });\n        });\n    }\n};\n\nfunction getDocCounts(currCounts, newCounts){\n    var newDocCounts = {\n        queried: 0,\n        inserted: 0,\n        deleted: 0,\n        updated: 0\n    };\n\n    // queried\n    if(currCounts.queried === 0){\n        currCounts.queried = newCounts.returned;\n    }else{\n        newDocCounts.queried = newCounts.returned - currCounts.queried;\n        currCounts.queried = newCounts.returned;\n    }\n\n    // inserts\n    if(currCounts.inserted === 0){\n        currCounts.inserted = newCounts.inserted;\n    }else{\n        newDocCounts.inserted = newCounts.inserted - currCounts.inserted;\n        currCounts.inserted = newCounts.inserted;\n    }\n\n    // deleted\n    if(currCounts.deleted === 0){\n        currCounts.deleted = newCounts.deleted;\n    }else{\n        newDocCounts.deleted = newCounts.deleted - currCounts.deleted;\n        currCounts.deleted = newCounts.deleted;\n    }\n\n    // updated\n    if(currCounts.updated === 0){\n        currCounts.updated = newCounts.updated;\n    }else{\n        newDocCounts.updated = newCounts.updated - currCounts.updated;\n        currCounts.updated = newCounts.updated;\n    }\n\n    return newDocCounts;\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.578125,
          "content": "{\n  \"name\": \"admin-mongo\",\n  \"version\": \"0.0.23\",\n  \"description\": \"A Web user interface to administer MongoDB databases built using Express\",\n  \"author\": \"Mark Moffat <mrvautin@gmail.com>\",\n  \"private\": false,\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mrvautin/adminmongo\"\n  },\n  \"main\": \"electron.js\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mrvautin/adminmongo/issues\"\n  },\n  \"scripts\": {\n    \"start\": \"node app.js\",\n    \"test\": \"find ./tests -name '*.js' | xargs mocha -R spec -t 5000\",\n    \"packageOsx\": \"electron-packager ./ adminMongo --out=releases/ --platform=darwin --arch=x64 --prune --overwrite --ignore=releases/* --icon=public/logo.icns\",\n    \"packageWin32\": \"electron-packager ./ adminMongo --out=releases/ --platform=win32 --arch=ia32 --prune --overwrite --ignore=releases/* --icon=public/logo.ico\",\n    \"packageWin64\": \"electron-packager ./ adminMongo --out=releases/ --platform=win32 --arch=x64 --prune --overwrite --ignore=releases/* --icon=public/logo.ico\",\n    \"packageLinux\": \"electron-packager ./ adminMongo --out=releases/ --platform=linux --arch=ia32 --prune --overwrite --ignore=releases/* --icon=public/logo.ico\"\n  },\n  \"keywords\": [\n    \"mongo\",\n    \"mongodb\",\n    \"admin\",\n    \"web\",\n    \"ui\",\n    \"UI\",\n    \"gui\",\n    \"GUI\",\n    \"DB\",\n    \"database\",\n    \"user\",\n    \"manage\",\n    \"manager\",\n    \"administer\",\n    \"interface\",\n    \"document\",\n    \"collection\",\n    \"express\",\n    \"electron\",\n    \"cross platform\",\n    \"open source\",\n    \"admin-mongo\",\n    \"adminmongo\"\n  ],\n  \"dependencies\": {\n    \"async\": \"^2.0.0\",\n    \"body-parser\": \"^1.15.2\",\n    \"bootstrap\": \"^3.3.7\",\n    \"config\": \"^1.21.0\",\n    \"cookie-parser\": \"^1.4.3\",\n    \"express\": \"^4.14.0\",\n    \"express-handlebars\": \"^3.0.0\",\n    \"express-session\": \"^1.14.0\",\n    \"font-awesome\": \"^4.6.3\",\n    \"hbs\": \"^4.0.0\",\n    \"i18n-2\": \"^0.6.3\",\n    \"jquery\": \"^3.1.0\",\n    \"junk\": \"^2.0.0\",\n    \"lodash\": \"^4.13.1\",\n    \"moment\": \"^2.14.1\",\n    \"mongo-uri\": \"^0.1.2\",\n    \"mongodb\": \"^2.2.4\",\n    \"mongodb-backup\": \"^1.6.4\",\n    \"mongodb-extended-json\": \"^1.7.0\",\n    \"mongodb-restore\": \"^1.5.4\",\n    \"morgan\": \"~1.9.0\",\n    \"nconf\": \"^0.8.4\",\n    \"ncp\": \"^2.0.0\",\n    \"nedb\": \"^1.8.0\",\n    \"node-delete\": \"^0.1.2\",\n    \"serve-favicon\": \"~2.4.3\"\n  },\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"chai\": \"^3.5.0\",\n    \"colors\": \"^1.1.2\",\n    \"electron-prebuilt\": \"^1.2.8\",\n    \"eslint\": \"^3.2.0\",\n    \"eslint-config-standard\": \"^5.3.5\",\n    \"eslint-plugin-promise\": \"^2.0.0\",\n    \"eslint-plugin-standard\": \"^2.0.0\",\n    \"jsdom\": \"^9.4.1\",\n    \"mocha\": \"^2.5.3\",\n    \"mocha-jsdom\": \"^1.1.0\",\n    \"supertest\": \"^1.2.0\"\n  }\n}\n"
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        },
        {
          "name": "routes",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "views",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}