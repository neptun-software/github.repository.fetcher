{
  "metadata": {
    "timestamp": 1736561909700,
    "page": 603,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fzaninotto/uptime",
      "stars": 3617,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.091796875,
          "content": "config/development.yaml\nconfig/runtime.json\nplugins/index.js\nnode_modules\nnpm-debug.log\n*.swp\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.06640625,
          "content": "Uptime Changelog\n================\n\nTo be released\n--------------\n\n* Remove ICMP poller as it requires Uptime to be launched with root permissions to work\n* Add basicAuth plugin to restrict access to the API and dashboard apps using Basic Authentication\n* Upgrade moment.js to version 2.1\n* Add httpOptions plugin to allow setting custom headers or HTTP options to a check\n* Update the README about the plugin system\n* Update plugins system to make it easier to enable new plugins, just by adding a line in the configuration\n* Add pollerCollections to allow the addition of custom pollers\n* Update HTTP and HTTPS pollers (they now specialize a BaseHttpPoller, to reduce code duplication)\n* Fix monitor crash when poller is badly set\n* Update plugins to let them extend both the monitor and the webapp (warning: changes plugins signature)\n* Add architecture schema in the README\n* Update Dummy Target more to make it verbose on the console\n* Update Check model to store pollerParams\n* Update Ping model to store pollerDetails\n* Add new events to Monitor and dashboard app\n* Add more plugins extension points: they can now add details to checks, abilities to pollers, and store additional details about pings\n* Fix warnings in production by using cookie store for sessions\n* Add mention of external plugins in README\n* Add patternMatcher plugin to allow pattern detection in response body\n* Fix bug allowing the creation of empty checks\n* Add Http Status 303 to allowed redirect Types\n* Fix \"Cannot set property 'protocol' of undefined\" error when running Uptime behind a proxy\n* Node 0.10 support\n\n2013-04-22, v3.1\n----------------\n\n* Update README.md\n* Use Url as Check name when left empty\n* Stop the server if MongoDB is not started\n* Support port overriding via process.env.PORT\n* Fix bug with pause and email\n* Fix bug where checks are pinged too often when they timeout\n* Add link to uptime home page in the dashboard footer\n* Mention the fact that the monitor URL must be accessible without proxy\n* Add email plugin\n* Added uptime version in the footer\n\n2012-12-07, v3.0\n----------------\n\n* Uptime bars\n* Exact availability calculation\n* New stats page and date navigation\n* Replaced Highcharts by Flotr2 for charts. No more licence problem!\n* Upgraded to Twitter Bootstrap V2\n* Many tweaks in the GUI\n* Heavy refactoring\n\n2012-12-07, v2.0\n----------------\n\n* Moved Mongo initialization to a dedicated bootstrap file\n* Added support for setting the full MongoDB connection string in the config file\n* Fixed engine requirement in package.json\n* Updated Node poller user agent version\n* Fixed console plugin\n* Fixed fixtures to let them generate CheckEvents\n* Fixed pings list not refreshing live in dashboard\n\n2012-09-19, v2.0rc0\n-------------------\n\n* Upgraded Node.js to 0.8\n* Bumped main dependencies (Express and Mongoose) to v3. This lead to some refactoring in the model classes.\n* Switched to local jQuery to avoid networking issue\n\n2012-09-19, v1.4\n----------------\n\n* This is the last release compatible with Node 0.6.\n* New events appear as such when watching event list\n* Added favicon. The favicon turns red when at least one check is down.\n\n2012-08-05, v1.3\n----------------\n\n* Added a User-Agent header to both http and https pollers, to identify pings from the monitor in server logs; you can override the header via configuration\n* Fixed \"Save and add\" redirection\n* Made check title optional (falls back to the url)\n* Fixed handling of relative Location headers\n* Fixed chart timezone and vertical scale bugs\n* Made new events more apparent in the navbar, and in the events page\n* Removed custom date display logic and added [moment.js](http://momentjs.com/) as a dependency.\n* Fixed check when http redirects to https\n* Removed lifecycleEventsPlugin and added [mongoose-lifecycle](https://github.com/fzaninotto/mongoose-lifecycle) module as a dependency. This change renames events on Mongoose models from 'pre-' to 'before-' and from 'post-' to 'after-' (e.g. 'postRemove' becomes 'afterRemove').\n* Modified API routes to be more RESTful\n* Upgraded dependencies (mongoose, express, ejs, config, async, socket.io)\n* Added a Reports tab for tags, offering easily accessible monthly reports\n* Made tabs compatible with direct links and back button in tag and check view\n\n2012-04-21, v1.2\n----------------\n\n* Ping list is now updated in real time\n* Added 'Save and add' button in new check form to facilitate batch check creation\n* Changed the CheckEvent format for better extensibility (use the fixtures/fixEvents.js fix to migrate existing events)\n* Fix polling interval to mimic the behavior of a cron\n* Add a way to pause checks in the dashboard GUI, in the API, and in the model\n* Split Monitor class and configuration, to fix polling when `autoStartMonitor` is false\n* Fixed failure to add check in the dashboard when the protocol wasn't set\n* Added UDP poller (bolgovr)\n\n2012-04-10, v1.1\n----------------\n\n* Add support for HTTPS checks\n* Refactor poller class to allow adapter pattern. Opens the door for UDP, FTP, complete page... check types.\n* Removed proxy configuration (now uses environment variables)\n\n2012-03-28, v1.0\n----------------\n\n* Initial version"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.037109375,
          "content": "Copyright (c) 2012 Francois Zaninotto\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.9609375,
          "content": "uptime\n======\n\nA remote monitoring application using Node.js, MongoDB, and Twitter Bootstrap.\n\n<img src=\"https://raw.github.com/fzaninotto/uptime/downloads/check_details.png\" title=\"Visualizing the availability of an HTTP check in Uptime\" width=\"50%\" valign=\"top\" />\n<img src=\"https://raw.github.com/fzaninotto/uptime/downloads/check_form.png\" title=\"Editing check attributes (polling interval, slow threshold, alert threshold, pattern to match, tags) in Uptime\" width=\"50%\" valign=\"top\" />\n\nYou can watch a [demo screencast on Vimeo](https://vimeo.com/39302164).\n\n**Warning**: This application isn't actively maintained anymore. You can find many alternatives, from completely free to very cheap, in [this list of website monitoring services](http://www.supermonitoring.com/blog/the-updated-list-of-website-monitoring-services/).\n\nFeatures\n--------\n\n* Monitor thousands of websites (powered by [Node.js asynchronous programming](http://redotheweb.com/2012/01/23/nodejs-for-php-programmers-1-event-driven-programming-and-pasta.html))\n* Tweak frequency of monitoring on a per-check basis, up to the second\n* Check the presence of a pattern in the response body\n* Receive notifications whenever a check goes down\n  * On screen (powered by [socket.io](http://socket.io/))\n  * By email\n  * On the console\n* Record availability statistics for further reporting (powered by [MongoDB](http://www.mongodb.org/))\n* Detailed uptime reports with animated charts (powered by [Flotr2](http://www.humblesoftware.com/flotr2/))\n* Monitor availability, responsiveness, average response time, and total uptime/downtime\n* Get details about failed checks (HTTP error code, etc.)\n* Group checks by tags and get reports by tag\n* Familiar web interface (powered by [Twitter Bootstrap 2.0](http://twitter.github.com/bootstrap/index.html))\n* Complete API for integration with third-party monitoring services\n* Powerful plugin system to ease extension and customization\n* Easy installation and zero administration\n\nInstalling Uptime\n-----------------\n\nUptime 3.2 requires Node.js 0.10 and MongoDB 2.1. Older versions provide compatibility with Node 0.8 (Uptime v3.1) and 0.6 (Uptime v1.4).\n\nTo install from GitHub, clone the repository and install dependencies using `npm`:\n\n```sh\n$ git clone git://github.com/fzaninotto/uptime.git\n$ cd uptime\n$ npm install\n```\n\nLastly, start the application with:\n\n```sh\n$ node app\n```\n\nIf you want a production environment:\n\n```sh\n$ NODE_ENV=production node app\n```\n\nUpgrading From a 2.0 Install\n----------------------------\n\nIf you have been using uptime 1.0 or 2.0, you have to execute the migration script before using the new release.\n\n```sh\n$ node models/migrations/upgrade2to3\n```\n\nAdding Checks\n-------------\n\nBy default, the web UI runs on port 8082, so just browse to \n\n    http://localhost:8082/\n\nAnd you're ready to begin. Create your first check by entering an URL, wait for the first ping, and you'll soon see data flowing through your charts!\n\nConfiguring\n-----------\n\nUptime uses [node-config](https://github.com/lorenwest/node-config) to allow YAML configuration and environment support. Here is the default configuration, taken from `config/default.yaml`:\n\n```yaml\nurl:        'http://localhost:8082'\n\nmongodb:\n  server:   localhost\n  database: uptime\n  user:     root \n  password:\n  connectionString:       # alternative to setting server, database, user and password separately\n\nmonitor:\n  name:                   origin\n  apiUrl:                 'http://localhost:8082/api' # must be accessible without a proxy\n  pollingInterval:        10000      # ten seconds\n  timeout:                5000       # five seconds\n  userAgent:              NodeUptime/2.0 (https://github.com/fzaninotto/uptime)\n\nanalyzer:\n  updateInterval:         60000      # one minute\n  qosAggregationInterval: 600000     # ten minutes\n  pingHistory:            8035200000 # three months\n\nautoStartMonitor: true\n\nplugins:\n  - ./plugins/console\n  - ./plugins/patternMatcher\n  - ./plugins/httpOptions\n  # - ./plugins/email\n```\n\nTo modify this configuration, create a `development.yaml` or a `production.yaml` file in the same directory, and override just the settings you need. For instance, to run Uptime on port 80 in production, create a `production.yaml` file as follows:\n\n```yaml\nurl: 'http://myDomain.com'\n```\n\nNode that Uptime works great behind a proxy - it uses the `http_proxy` environment variable transparently.\n\nArchitecture\n------------\n\nUptime is composed of two services: a webapp (in `app.js`), and a polling monitor (in `monitor.js)`. For your convenience, the two services start together when you call `node app`.\n\n<img src=\"https://raw.github.com/fzaninotto/uptime/downloads/architecture.png\" title=\"Uptime architecture\" />\n\nHowever, heavily browsing the webapp may slow down the whole server - including the polling monitor. In other terms, using the application can influence the uptime measurements. To avoid this effect, it is recommended to run the polling monitor in a separate process.\n\nTo that extent, set the `autoStartMonitor` setting to `false` in the `production.yaml`, and launch the monitor by hand:\n\n```sh\n$ node monitor &\n$ node app\n```\n\nDon't forget to set `NODE_ENV=production` if you want to run the app in production environment.\n\nYou can also run the monitor in a different server. This second server must be able to reach the API of the webapp server: set the `monitor.apiUrl` setting accordingly in the `production.yaml` file of the monitor server.\n\nMonitoring From Various Locations\n---------------------------------\n\nYou can even run several monitor servers in several datacenters to get average response time. In that case, make sure you set a different `monitor.name` setting for all monitor servers to be able to tell which server make a particular ping.\n\nUsing Plugins\n-------------\n\nPlugins can add more notification types, more poller types, new routes to the webapp, etc. Uptime currently bundles three plugins:\n\n * [`console`](https://github.com/fzaninotto/uptime/blob/master/plugins/console/index.js): log pings and events in the console in real time\n * [`email`](https://github.com/fzaninotto/uptime/blob/master/plugins/email/index.js): notify events (up, down pause) by email\n * [`patternMatcher`](https://github.com/fzaninotto/uptime/blob/master/plugins/patternMatcher/index.js): allow HTTP & HTTPS pollers to test the response body against a pattern\n * [`httpOptions`](https://github.com/fzaninotto/uptime/blob/master/plugins/httpOptions/index.js): add custom HTTP options and headers to HTTP and HTTPS checks (e.g. to allow self-signed certificate on HTTPS, custom headers, custom HTTP methods, ...)\n * [`basicAuth`](https://github.com/fzaninotto/uptime/blob/master/plugins/basicAuth/index.js): add HTTP Basic Access Authentication to the dashboard and API applications\n\nTo enable plugins, just add a line to the `plugins:` section of the configuration file.\nThree of the bundled plugins are already enabled by default:\n\n```yaml\n# in config/default.yaml\nplugins:\n  - ./plugins/console\n  - ./plugins/patternMatcher\n  - ./plugins/httpOptions\n  # - ./plugins/email\n  # - ./plugins/basicAuth\n```\n\nYou can override these settings in your environment configuration, for instance:\n\n```yaml\n# in config/production.yaml\n# disable the console plugin and enable the email plugin\nplugins:\n  # - ./plugins/console\n  - ./plugins/patternMatcher\n  - ./plugins/httpOptions\n  - ./plugins/email\n  # - ./plugins/basicAuth\n```\n\nThird-party plugins:\n\n * [`webhooks`](https://github.com/mintbridge/uptime-webhooks): notify events to an URL by sending an HTTP POST request \n * [`campfire`](https://gist.github.com/dmathieu/5592418): notify events to Campfire\n * [`pushover`](https://gist.github.com/xphyr/5994345): Notify events to mobile devices\n\nWriting Plugins\n---------------\n\nA plugin is a simple Node.js module which hooks into predefined extension points. Uptime automatically requires plugin modules when starting the webapp and the monitor, and tries to call the two following functions:\n\n* `initWebApp(options)` when starting the webapp\n* `initMonitor(options)` when starting the monitor\n\nCheck the [app.js](https://github.com/fzaninotto/uptime/blob/master/app.js#L97) and [monitor.js](https://github.com/fzaninotto/uptime/blob/master/monitor.js#L8) to see a detail of the options passed to each hook. Also, check the code of existing plugins to understand how they can add new pollers, new notification types, etc.\n\nFor instance, if you had to recreate a simple version of the `console` plugin, you could write it as follows:\n\n```js\n// in plugins/console/index.js\nvar CheckEvent = require('../../models/checkEvent');\nexports.initWebapp = function() {\n  CheckEvent.on('afterInsert', function(checkEvent) {\n    checkEvent.findCheck(function(err, check) {\n      console.log(new Date() + check.name + checkEvent.isGoDown ? ' goes down' : ' goes back up');\n    });\n  });\n}\n```\nAll Uptime entities emit lifecycle events that you can listen to on the Model class. These events are `beforeInsert`, `afterInsert`, `beforeUpdate`, `afterUpdate`, `beforeSave` (called for both inserts and updates), `afterSave` (called for both inserts and updates), `beforeRemove`, and `afterRemove`. For more information about these events, check the [mongoose-lifecycle](https://github.com/fzaninotto/mongoose-lifecycle) plugin.\n\nAPI\n---------------\n\nAll API requests should be prefixed with `api`.\nThe API response always uses the `application/json` mimetype.\nAPI requests do not require authentication.\n\nExample of a valid API request:\n\n`GET http://example.com/api/checks`\n\nExample for a valid API request using curl :\n\n`curl -i -H \"Accept: application/json\" -X PUT -d \"name=example\" -d \"url=http://mysite.com\" -d \"interval=120\" http://example.com/api/checks`\n\n### Status codes\n\nThe API is designed to return different status codes :\n\n* `200 Ok` : The request was successful, the resource(s) itself is returned as JSON\n* `400 Bad Request` : An attribute of the API request is invalid or missing (e.g. the url of a check is missing)\n* `404 Not Found` : A resource could not be accessed (e.g. a check ID could not be found)\n* `500 Server Error` : Something went wrong on the server side (e.g. a check could not be saved in database)\n\n### CRUD routes\n\n#### `GET /checks`\n\nReturn a list of all checks\n\n#### `GET /checks/needingPoll`\n\nReturn a list of checks that need a poll (i.e. not paused, plus new or last tested > interval set between tests)\n\n#### `GET /checks/:id`\n\nReturn a single check\n\nParameter :\n\n* `id` : (required) Id of the check\n\nEx: `http://localhost:8082/api/checks/527a25bdc9de6e0000000004`\n\n#### `GET /checks/:id/pause`\n\nToggle the status (isPaused) of a check\n\nParameter :\n\n* `id` : (required) Id of the check\n\nEx: `http://localhost:8082/api/checks/527a25bdc9de6e0000000004/pause`\n\n#### `PUT /check/:id/test`\n\nUpdates the last checked date for a check. Used to avoid double check when a target is slow.\nReturn the number of affected records in the database (1 or 0).\n\nParameter :\n\n* `id` : (required) Id of the check\n\nEx: `http://localhost:8082/api/checks/527a25bdc9de6e0000000004/test`\n\n#### `GET /pings`\n\nReturn a list of all pings\n\nParameters :\n\n* `?page=1` : (optional) Paginate results by 50\n* `?check=:id` : (optional) Return only the pings for a given check\n\nEx: `http://localhost:8082/api/pings?check=527a25bdc9de6e0000000004`\n\n#### `GET /pings/events`\n\nReturn a list of events (CheckEvent) aggregated by day, limited to the latest week, and to 100 results\n\n#### `POST /pings`\n\nCreate a ping for a check, if the check exists and is not already polled\n\nParameters :\n\n* `checkId` : (required) Id of the check\n* `status` : (required)  Status\n* `timestamp` : (optional) Date of polling\n* `time` : (required) Response time\n* `name` : (optional) Monitor name\n* `error` : (optional)\n* `details` : (optional)\n\n#### `GET /tags`\n\nReturn list of all tags\n\n#### `GET /tags/:name`\n\nReturn a single tag\n\nParameter :\n\n* `name` : (required) name of the tag\n\nEx: `http://localhost:8082/tags/good`\n\n#### `PUT /checks`\n\nCreate a new check and return it\n\nParameters :\n\n* `url` : (required) Url of the check\n* `name` : (optional) Name of the check - if empty, url will be set as check name\n* `interval` : (optional) Interval of polling\n* `maxTime` : (optional) Slow threshold\n* `isPaused` : (optional) Status of polling\n* `alertTreshold` : (optional) set the threshold of failed pings that will create an alert\n* `tags` : (optional) list of tags (comma-separated values)\n* `type` : (optional) type of check (auto|http|https|udp)\n\n#### `POST /checks/:id`\n\nUpdate a check and return it\n\nParameters :\n\n* `id` : (required) Id of the check\n* `url` : (optional) Url of the check\n* `name` : (optional) Name of the check - if empty, url will be set as check name\n* `interval` : (optional) Interval of polling\n* `maxTime` : (optional) Slow threshold\n* `isPaused` : (optional) Status of polling\n* `alertTreshold` : (optional) set the threshold of failed pings that will create an alert\n* `tags` : (optional) list of tags (comma-separated values)\n* `type` : (optional) type of check - values : `auto`|`http`|`https`|`udp`\n\nEx: `http://localhost:8082/api/checks/527a25bdc9de6e0000000004`\n\n#### `DELETE /checks/:id`\n\nDelete a check\n\nParameters :\n\n* `id` : (required) Id of the check\n\nEx: `http://localhost:8082/api/checks/527a25bdc9de6e0000000004`\n\n### Statistics routes\n\n#### `GET /checks/:id/stat/:period/:timestamp`\n\nReturn check stats for a period\n\nParameters :\n\n   * `id` : (required) Id of the check\n   * `period` : (required) Period - values :  `hour`|`day`|`month`|`year`\n   * `timestamp` : (required) Start date (timestamp)\n\nEx: `http://localhost:8082/api/checks/527a25bdc9de6e0000000004/stat/day/1383260400000`\n\n#### `GET /checks/:id/stats/:type`\n\nReturn check stats for a period\n\nParameters :\n\n* `id` : (required) Id of the check\n* `type` : (required) Period - values :  `hour`|`day`|`month`|`year`\n* `?begin=` : (required) Start date (timestamp)\n* `?end=` : (required) End date (timestamp)\n\nEx: `http://localhost:8082/api/checks/527a25bdc9de6e0000000004/stats/month?begin=1383260400000&end=1385852399999`\n\n#### `GET /tags/:name/checks/:period/:timestamp`\n\nReturn tag stats for a period, joined by checks\n\nParameters :\n\n* `name` : (required) Name of the tag\n* `period` : (required) Period - values :  `hour`|`day`|`month`|`year`\n* `timestamp` : (required) Start date (timestamp)\n\nEx: `http://localhost:8082/api/tags/good/checks/month/1384816432099`\n\n#### `GET /tags/:name/stat/:period/:timestamp`\n\nReturn tag stats for a period\n\nParameters :\n\n* `name` : (required) Name of the tag\n* `period` : (required) Period - values :  `hour`|`day`|`month`|`year`\n* `timestamp` : (required) Start date (timestamp)\n\nEx: `http://localhost:8082/api/tags/good/stat/month/1383260400000`\n\n#### `GET /tags/:name/stats/:type`\n\nReturn tag stats for a period\n\nParameters :\n\n* `name` : (required) Name of the tag\n* `type` : (required) Period - values :  `day`|`month`|`year`\n* `?begin=` : (required) Start date (timestamp)\n* `?end=` : (required) End date (timestamp)\n\nEx: `http://localhost:8082/api/tags/good/stats/month?begin=1383260400000&end=1385852399999`\n\n### Event routes\n\n#### `GET /checks/:id/events`\n\nReturn the list of all events for the check\n\nParameter :\n\n* `id` : (required) Id of the check\n\nEx: `http://localhost:8082/api/checks/527a25bdc9de6e0000000004/events`\n\n#### `GET /tags/:name/events`\n\nReturn the list of all events associated to the tag\n\nParameter :\n\n* `name` : (required) Name of the tag\n* `?begin=` : (optional) Start date (timestamp)\n* `?end=` : (optional) End date (timestamp)\n\nEx: `http://localhost:8082/api/tags/good/events?begin=1383260400000&end=1385852399999`\n\nSupport and Discussion\n----------------------\n\nJoin the [node-uptime](https://groups.google.com/d/forum/node-uptime) Google Group to discuss features, bugs and use cases related to Uptime.\n\nLicense\n-------\n\nThe Uptime code is free to use and distribute, under the [MIT license](https://raw.github.com/fzaninotto/uptime/master/LICENSE).\n\nUptime uses third-party libraries:\n\n* [NodeJS](http://nodejs.org/), licensed under the [MIT License](https://github.com/joyent/node/blob/master/LICENSE#L5-22),\n* [Socket.io](http://socket.io/), licensed under the [MIT License](https://github.com/LearnBoost/socket.io/blob/master/Readme.md),\n* [MongooseJS](http://mongoosejs.com/), licensed under the [MIT License](https://github.com/LearnBoost/mongoose/blob/master/README.md),\n* [jQuery](http://jquery.com/), licensed under the [MIT License](http://jquery.org/license),\n* [TwitterBootstrap](http://twitter.github.com/bootstrap/), licensed under the [Apache License v2.0](http://www.apache.org/licenses/LICENSE-2.0),\n* [Flotr2](http://www.humblesoftware.com/flotr2/), licensed under the [MIT License](https://github.com/HumbleSoftware/Flotr2/blob/master/LICENSE).\n* [Favicon](http://www.alexpeattie.com/projects/justvector_icons/), distributed under the [Free Art License](http://artlibre.org/licence/lal/en).\n\nIf you like the software, please help improving it by contributing PRs on the [GitHub project](https://github.com/fzaninotto/uptime)!\n\nTODO\n----\n\n* Account for scheduled maintenance (and provide two QoS calculations: with and without scheduled maintenance)\n* Allow for JavaScript execution in the monitored resources by using a headless browser (probably zombie.js)\n* Unit tests\n"
        },
        {
          "name": "app.js",
          "type": "blob",
          "size": 4.685546875,
          "content": "/*\n * Monitor remote server uptime.\n */\n\nvar http       = require('http');\nvar url        = require('url');\nvar express    = require('express');\nvar config     = require('config');\nvar socketIo   = require('socket.io');\nvar fs         = require('fs');\nvar monitor    = require('./lib/monitor');\nvar analyzer   = require('./lib/analyzer');\nvar CheckEvent = require('./models/checkEvent');\nvar Ping       = require('./models/ping');\nvar PollerCollection = require('./lib/pollers/pollerCollection');\nvar apiApp     = require('./app/api/app');\nvar dashboardApp = require('./app/dashboard/app');\n\n// database\n\nvar mongoose   = require('./bootstrap');\n\nvar a = analyzer.createAnalyzer(config.analyzer);\na.start();\n\n// web front\n\nvar app = module.exports = express();\nvar server = http.createServer(app);\n\napp.configure(function(){\n  app.use(app.router);\n  // the following middlewares are only necessary for the mounted 'dashboard' app, \n  // but express needs it on the parent app (?) and it therefore pollutes the api\n  app.use(express.bodyParser());\n  app.use(express.methodOverride());\n  app.use(express.cookieParser('Z5V45V6B5U56B7J5N67J5VTH345GC4G5V4'));\n  app.use(express.cookieSession({\n    key:    'uptime',\n    secret: 'FZ5HEE5YHD3E566756234C45BY4DSFZ4',\n    proxy:  true,\n    cookie: { maxAge: 60 * 60 * 1000 }\n  }));\n  app.set('pollerCollection', new PollerCollection());\n});\n\n// load plugins (may add their own routes and middlewares)\nconfig.plugins.forEach(function(pluginName) {\n  var plugin = require(pluginName);\n  if (typeof plugin.initWebApp !== 'function') return;\n  console.log('loading plugin %s on app', pluginName);\n  plugin.initWebApp({\n    app:       app,\n    api:       apiApp,       // mounted into app, but required for events\n    dashboard: dashboardApp, // mounted into app, but required for events\n    io:        io,\n    config:    config,\n    mongoose:  mongoose\n  });\n});\n\napp.emit('beforeFirstRoute', app, apiApp);\n\napp.configure('development', function() {\n  if (config.verbose) mongoose.set('debug', true);\n  app.use(express.static(__dirname + '/public'));\n  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));\n});\n\napp.configure('production', function() {\n  var oneYear = 31557600000;\n  app.use(express.static(__dirname + '/public', { maxAge: oneYear }));\n  app.use(express.errorHandler());\n});\n\n// Routes\napp.emit('beforeApiRoutes', app, apiApp);\napp.use('/api', apiApp);\n\napp.emit('beforeDashboardRoutes', app, dashboardApp);\napp.use('/dashboard', dashboardApp);\napp.get('/', function(req, res) {\n  res.redirect('/dashboard/events');\n});\n\napp.get('/favicon.ico', function(req, res) {\n  res.redirect(301, '/dashboard/favicon.ico');\n});\n\napp.emit('afterLastRoute', app);\n\n// Sockets\nvar io = socketIo.listen(server);\n\nio.configure('production', function() {\n  io.enable('browser client etag');\n  io.set('log level', 1);\n});\n\nio.configure('development', function() {\n  if (!config.verbose) io.set('log level', 1);\n});\n\nCheckEvent.on('afterInsert', function(event) {\n  io.sockets.emit('CheckEvent', event.toJSON());\n});\n\nio.sockets.on('connection', function(socket) {\n  socket.on('set check', function(check) {\n    socket.set('check', check);\n  });\n  Ping.on('afterInsert', function(ping) {\n    socket.get('check', function(err, check) {\n      if (ping.check == check) {\n        socket.emit('ping', ping);\n      }\n    });\n  });\n});\n\n// old way to load plugins, kept for BC\nfs.exists('./plugins/index.js', function(exists) {\n  if (exists) {\n    var pluginIndex = require('./plugins');\n    var initFunction = pluginIndex.init || pluginIndex.initWebApp;\n    if (typeof initFunction === 'function') {\n      initFunction({\n        app:       app,\n        api:       apiApp,       // mounted into app, but required for events\n        dashboard: dashboardApp, // mounted into app, but required for events\n        io:        io,\n        config:    config,\n        mongoose:  mongoose\n      });\n    }\n  }\n});\n\nmodule.exports = app;\n\nvar monitorInstance;\n\nif (!module.parent) {\n  var serverUrl = url.parse(config.url);\n  var port;\n  if (config.server && config.server.port) {\n    console.error('Warning: The server port setting is deprecated, please use the url setting instead');\n    port = config.server.port;\n  } else {\n    port = serverUrl.port;\n    if (port === null) {\n      port = 80;\n    }\n  }\n  var port = process.env.PORT || port;\n  var host = process.env.HOST || serverUrl.hostname;\n  server.listen(port, function(){\n    console.log(\"Express server listening on host %s, port %d in %s mode\", host, port, app.settings.env);\n  });\n  server.on('error', function(e) {\n    if (monitorInstance) {\n      monitorInstance.stop();\n      process.exit(1);\n    }\n  });\n}\n\n// monitor\nif (config.autoStartMonitor) {\n  monitorInstance = require('./monitor');\n}\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "bootstrap.js",
          "type": "blob",
          "size": 1.3701171875,
          "content": "var mongoose   = require('mongoose');\nvar config     = require('config');\nvar semver     = require('semver');\n\n// configure mongodb\nmongoose.connect(config.mongodb.connectionString || 'mongodb://' + config.mongodb.user + ':' + config.mongodb.password + '@' + config.mongodb.server +'/' + config.mongodb.database);\nmongoose.connection.on('error', function (err) {\n  console.error('MongoDB error: ' + err.message);\n  console.error('Make sure a mongoDB server is running and accessible by this application');\n  process.exit(1);\n});\nmongoose.connection.on('open', function (err) {\n  mongoose.connection.db.admin().serverStatus(function(err, data) {\n    if (err) {\n      if (err.name === \"MongoError\" && (err.errmsg === 'need to login' || err.errmsg === 'unauthorized') && !config.mongodb.connectionString) {\n        console.log('Forcing MongoDB authentication');\n        mongoose.connection.db.authenticate(config.mongodb.user, config.mongodb.password, function(err) {\n          if (!err) return;\n          console.error(err);\n          process.exit(1);\n        });\n        return;\n      } else {\n        console.error(err);\n        process.exit(1);\n      }\n    }\n    if (!semver.satisfies(data.version, '>=2.1.0')) {\n      console.error('Error: Uptime requires MongoDB v2.1 minimum. The current MongoDB server uses only '+ data.version);\n      process.exit(1);\n    }\n  });\n});\n\n\nmodule.exports = mongoose;\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "fixtures",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "makefile",
          "type": "blob",
          "size": 0.05078125,
          "content": "test:\n\tNODE_ENV=test mocha test/*/*.js\n\n.PHONY: test"
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "monitor.js",
          "type": "blob",
          "size": 0.494140625,
          "content": "var fs      = require('fs');\nvar config  = require('config');\nvar Monitor = require('./lib/monitor');\n\n// start the monitor\nmonitor = Monitor.createMonitor(config.monitor);\n\n// load plugins\nconfig.plugins.forEach(function(pluginName) {\n  var plugin = require(pluginName);\n  if (typeof plugin.initMonitor !== 'function') return;\n  console.log('loading plugin %s on monitor', pluginName);\n  plugin.initMonitor({\n    monitor: monitor,\n    config:  config\n  });\n});\n\nmonitor.start();\n\nmodule.exports = monitor;"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.9248046875,
          "content": "{\n  \"name\":    \"node-uptime\",\n  \"description\": \"Remote monitoring for HTTP applications\",\n  \"version\": \"3.2.0\",\n  \"author\": \"Francois Zaninotto\",\n  \"dependencies\": {\n    \"mongoose\":  \"3.6.7\",\n    \"mongoose-lifecycle\": \"1.0.0\",\n    \"express\":   \"3.2.0\",\n    \"express-partials\": \"0.1.1\",\n    \"connect-flash\": \"0.1.0\",\n    \"ejs\":       \"0.8.3\",\n    \"config\":    \"0.4.32\",\n    \"async\":     \"0.1.22\",\n    \"socket.io\": \"0.9.14\",\n    \"semver\":    \"1.1.0\",\n    \"moment\":    \"2.1.0\",\n    \"nodemailer\": \"0.3.35\",\n    \"net-ping\":  \"1.1.7\",\n    \"js-yaml\": \"2.1.0\",\n    \"webpagetest\": \"0.2.0\"\n  },\n  \"devDependencies\": {\n    \"mocha\": \"1.7.x\",\n    \"should\": \"1.1.0\"\n  },\n  \"keywords\": [\"uptime\", \"monitoring\", \"api\", \"check\"],\n  \"repository\": \"https://github.com/fzaninotto/uptime\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \"0.10.x\",\n    \"npm\": \"1.2.x\"\n  },\n  \"scripts\": {\n    \"test\": \"node_modules/.bin/mocha test/lib/\",\n    \"start\": \"node app.js\"\n  }\n}\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}