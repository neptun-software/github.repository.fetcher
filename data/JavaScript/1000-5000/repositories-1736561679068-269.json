{
  "metadata": {
    "timestamp": 1736561679068,
    "page": 269,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OscarGodson/EpicEditor",
      "stars": 4241,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.10546875,
          "content": "root = true\n\n; 2 spaces for indentation for all JavaScript files\n[*.js]\nindent_style = space\nindent_size = 2"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.046875,
          "content": ".DS_STORE\n.idea/\ndocs/downloads/*/\nnode_modules\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 5.0400390625,
          "content": "{\n    \"asi\"             : true      // if automatic semicolon insertion should be tolerated\n  , \"bitwise\"         : true      // if bitwise operators should not be allowed\n  , \"boss\"            : true      // if advanced usage of assignments should be allowed\n  , \"browser\"         : true      // if the standard browser globals should be predefined\n  , \"couch\"           : false     // if CouchDB globals should be predefined\n  , \"curly\"           : true      // if curly braces around all blocks should be required\n  , \"debug\"           : false     // if debugger statements should be allowed\n  , \"devel\"           : false     // if logging globals should be predefined (console, alert, etc.)\n  , \"dojo\"            : false     // if Dojo Toolkit globals should be predefined\n  , \"eqeqeq\"          : false     // if === should be required\n  , \"eqnull\"          : true      // if == null comparisons should be tolerated\n  , \"es5\"             : false     // if ES5 syntax should be allowed\n  , \"esnext\"          : false     // if es.next specific syntax should be allowed\n  , \"evil\"            : false     // if eval should be allowed\n  , \"expr\"            : false     // if ExpressionStatement should be allowed as Programs\n  , \"forin\"           : true      // if for in statements must filter\n  , \"funcscope\"       : false     // if only function scope should be used for scope tests\n  , \"globalstrict\"    : false     // if global \"use strict\"; should be allowed (also enables 'strict')\n  , \"immed\"           : false     // if immediate invocations must be wrapped in parens\n  , \"iterator\"        : false     // if the `__iterator__` property should be allowed\n  , \"jquery\"          : false     // if jQuery globals should be predefined\n  , \"lastsemic\"       : true      // if semicolons may be ommitted for the trailing statements inside of a one-line blocks.\n  , \"latedef\"         : true      // if the use before definition should not be tolerated\n  , \"laxbreak\"        : false     // if line breaks should not be checked\n  , \"laxcomma\"        : true      // if line breaks should not be checked around commas\n  , \"loopfunc\"        : true      // if functions should be allowed to be defined within loops\n  , \"mootools\"        : false     // if MooTools globals should be predefined\n  , \"multistr\"        : false     // allow multiline strings\n  , \"newcap\"          : true      // if constructor names must be capitalized\n  , \"noarg\"           : true      // if arguments.caller and arguments.callee should be disallowed\n  , \"node\"            : true      // if the Node.js environment globals should be predefined\n  , \"noempty\"         : false     // if empty blocks should be disallowed\n  , \"nonew\"           : true      // if using `new` for side-effects should be disallowed\n  , \"nonstandard\"     : true      // if non-standard (but widely adopted) globals should be predefined\n  , \"nomen\"           : false     // if names should be checked\n  , \"onecase\"         : true      // if one case switch statements should be allowed\n  , \"onevar\"          : false     // if only one var statement per function should be allowed\n  , \"passfail\"        : false     // if the scan should stop on first error\n  , \"plusplus\"        : false     // if increment/decrement should not be allowed\n  , \"proto\"           : false     // if the `__proto__` property should be allowed\n  , \"prototypejs\"     : false     // if Prototype and Scriptaculous globals should be predefined\n  , \"regexdash\"       : false     // if unescaped first/last dash (-) inside brackets should be tolerated\n  , \"regexp\"          : false     // if the . should not be allowed in regexp literals\n  , \"rhino\"           : false     // if the Rhino environment globals should be predefined\n  , \"undef\"           : true      // if variables should be declared before used\n  , \"scripturl\"       : false     // if script-targeted URLs should be tolerated\n  , \"shadow\"          : false     // if variable shadowing should be tolerated\n  , \"smarttabs\"       : false     // if smarttabs should be tolerated (http://www.emacswiki.org/emacs/SmartTabs)\n  , \"strict\"          : false     // require the \"use strict\"; pragma\n  , \"sub\"             : true      // if all forms of subscript notation are tolerated\n  , \"supernew\"        : false     // if `new function () { ... };` and `new Object;` should be tolerated\n  , \"trailing\"        : true      // if trailing whitespace rules apply\n  , \"validthis\"       : true      // if 'this' inside a non-constructor function is valid. This is a function scoped option only.\n  , \"white\"           : true      // if strict whitespace rules apply\n  , \"wsh\"             : false     // if the Windows Scripting Host environment globals should be predefined\n\n  , \"indent\"          : 2\n  , \"predef\"          :\n      [ \"EpicEditor\"\n      , \"marked\"\n      // Jake\n      , \"jake\"\n      , \"desc\"\n      , \"task\"\n      , \"complete\"\n      , \"fail\"\n      , \"namespace\"\n      // Mocha\n      , \"mocha\"\n      , \"describe\"\n      , \"expect\"\n      , \"before\"\n      , \"beforeEach\"\n      , \"after\"\n      , \"afterEach\"\n      , \"it\"\n      , \"be\"\n      , \"throwError\"\n      , \"match\"\n      ]\n}\n"
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.0146484375,
          "content": "epiceditor.com\n"
        },
        {
          "name": "Jakefile.js",
          "type": "blob",
          "size": 5.9052734375,
          "content": "var fs = require('fs')\n  , watch = require('node-watch')\n  , VERSION = fs.readFileSync('VERSION', 'utf-8');\n\nfunction concat(fileList, destPath) {\n  var out = fileList.map(function (filePath) {\n    var file = fs.readFileSync(filePath, 'utf-8')\n    file = file.replace(/@VERSION/g, VERSION)\n    return file\n  })\n  fs.writeFileSync(destPath, out.join('\\n'))\n}\n\nfunction colorize(str, color) {\n  var colors =\n    { 'blue': '34m'\n    , 'cyan': '36m'\n    , 'green': '01;32m'\n    , 'magenta': '35m'\n    , 'red': '31m'\n    , 'yellow': '33m'\n    }\n\n  return colors[color] ? '\\033[' + colors[color] + str + '\\033[39m' : str\n}\n\ndesc('Lint all js files')\ntask('lint', [], function () {\n  jake.Task['lint:all'].invoke()\n}, {async: true})\n\nnamespace('lint', function () {\n  var jakefile = 'Jakefile.js'\n    , hint = 'node node_modules/jshint/bin/hint '\n    , jshintrc = '.jshintrc'\n    , editor = 'src/editor.js'\n    , tests = 'test'\n\n  task('all', ['lint:editor', 'lint:tests', 'lint:util'], function () {\n    complete()\n  }, {async: true})\n\n  desc('Lint core EpicEditor: src/editor.js')\n  task('editor', [], function () {\n    console.log(colorize('--> Linting editor', 'yellow'))\n    var files = [ editor ]\n      , cmds = [hint + files.join(' ') + ' --config .jshintrc']\n\n    jake.exec(cmds, function () {\n      console.log(colorize('  √ ok', 'green'))\n      complete()\n    }, {stdout: true})\n  }, {async: true})\n\n  desc('Lint test related js: test/*')\n  task('tests', [], function () {\n    console.log(colorize('--> Linting tests', 'yellow'))\n    var files = [ tests ]\n      , cmds = [hint + files.join(' ') + ' --config .jshintrc']\n\n    jake.exec(cmds, function () {\n      console.log(colorize('  √ ok', 'green'))\n      complete()\n    }, {stdout: true})\n  }, {async: true})\n\n  desc('Lint utility and config js files')\n  task('util', [], function () {\n    console.log(colorize('--> Linting utils', 'yellow'))\n    var files = [jshintrc, jakefile]\n      , cmds = [hint + files.join(' ') + ' --config .jshintrc --extra-ext .jshintrc']\n\n    jake.exec(cmds, function () {\n      console.log(colorize('  √ ok', 'green'))\n      complete()\n    }, {stdout: true})\n  }, {async: true})\n})\n\ndesc('Build epiceditor.js and minify to epiceditor.min.js')\ntask('build', ['lint:editor'], function () {\n  console.log(colorize('--> Building', 'yellow'))\n  var destDir = 'epiceditor/js/'\n    , srcDir = 'src/'\n    , parser = process.env.parser ? process.env.parser : 'node_modules/marked/lib/marked.js'\n    , srcPaths =\n      [ srcDir + 'editor.js'\n      , parser\n      ]\n    , destPath = destDir + 'epiceditor.js'\n    , destPathMin = destDir + 'epiceditor.min.js'\n    , cmds = ['node node_modules/uglify-js/bin/uglifyjs ' + destPath + ' > ' + destPathMin]\n\n  // If the destination directory does not exist, create it\n  jake.mkdirP('epiceditor/js')\n\n  if (!fs.existsSync(parser)) {\n    fail(\"Parser path not found.\")\n  }\n\n  concat(srcPaths, destPath)\n\n  // Minify\n  jake.exec(cmds, function () {\n    console.log(colorize('  √ ok', 'green'))\n    complete()\n  }, {stdout: true})\n}, {async: true})\n\nnamespace('build', function () {\n  desc('Force build epiceditor.js and epiceditor.min.js skipping pre-reqs')\n  task('force', [], function () {\n    console.log(colorize('--> Warning: Force build skips build pre-reqs. This build should not be commited.', 'magenta'))\n    jake.Task['build'].execute()\n  })\n})\n\ndesc('Build index.html from the README')\ntask('docs', function () {\n  console.log(colorize('--> Building docs', 'yellow'))\n  var destDir = ''\n    , srcDir = 'docs/'\n    , readmePath = destDir + 'README.md'\n    , tempPath = srcDir + 'README.html'\n    , destPath = destDir + 'index.html'\n    , srcPaths =\n      [ srcDir + 'header.html'\n      , tempPath\n      , srcDir + 'footer.html'\n      ]\n    , cmds = ['node node_modules/marked/bin/marked -o ' + tempPath + ' -i ' + readmePath + ' --gfm']\n\n  jake.exec(cmds, function () {\n    concat(srcPaths, destPath)\n    // remove temporary README.html\n    fs.unlink(tempPath)\n    console.log(colorize('  √ ok', 'green'))\n    complete()\n  }, {stdout: true})\n}, {async: true})\n\ndesc('Test code against tests')\ntask('test', ['lint:tests'], function () {\n  console.log(colorize('--> Test suite is now running (CTRL+C to quit)', 'magenta'))\n  console.log(colorize('--> http://localhost:8888/test/tests.html', 'yellow'))\n  jake.exec(['node test/server.js'], function () {\n    complete()\n  }, {stdout: false})\n}, {async: true})\n\nvar pkg = new jake.PackageTask('EpicEditor', 'v' + VERSION, function () {\n  var fileList = ['epiceditor/**']\n  this.packageDir = \"docs/downloads\"\n  this.packageFiles.include(fileList)\n  this.needZip = true\n});\n\ndesc('Watch for changes and automatically build');\ntask('watch', function () {\n  console.log('================================================\\n| Files are now being watched. ctrl+c to exit. |\\n================================================');\n  jake.Task.build.execute();\n  jake.Task.docs.execute();\n  watch('src/', function () {\n    jake.Task.build.execute();\n  });\n  watch('README.md', function () {\n    jake.Task.docs.execute();\n  });\n});\n\ndesc('Kick out some ascii')\ntask('ascii', [], function () {\n  var epicAscii = \"\" +\n      \"                                           \\n\" +\n      \"                               ',          \\n\" +\n      \"                    .eee.     .'           \\n\" +\n      \"                  .eeEEEEEe.               \\n\" +\n      \" EEEEEEEEEEEE'  .E'   `eEE'  .EEEEEEEEEEE  \\n\" +\n      \" EE           .E'    eEE`  .E          EE  \\n\" +\n      \" EE         .E'    eEE`    EE          EE  \\n\" +\n      \" EE       .E'    eEE`      EE              \\n\" +\n      \" EE     .E'    eEE`        EEEEEEEEEE      \\n\" +\n      \" EE          eEE`          EE              \\n\" +\n      \" EE   .    `eE`            EE              \\n\" +\n      \" EE   Ee'                  EE          EE  \\n\" +\n      \" EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE  \\n\"\n  console.log(colorize(epicAscii, 'yellow'))\n  console.log(colorize('EpicEditor - An Embeddable JavaScript Markdown Editor', 'yellow'))\n})\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0615234375,
          "content": "Copyright (c) 2011-2014, Oscar Godson (http://oscargodson.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 24.986328125,
          "content": "# ⚠️ DEPRECATION WARNING\n\nThis repository is no longer actively maintained. \n\n# ![EpicEditor](http://epiceditor.com/docs/images/epiceditor-logo.png)\n\n## An Embeddable JavaScript Markdown Editor\n\nEpicEditor is an embeddable JavaScript [Markdown](http://daringfireball.net/projects/markdown/) editor with split fullscreen editing, live previewing, automatic draft saving, offline support, and more. For developers, it offers a robust API, can be easily themed, and allows you to swap out the bundled Markdown parser with anything you throw at it.\n\n## Why\n\nBecause, WYSIWYGs suck. Markdown is quickly becoming the replacement. [GitHub](http://github.com), [Stackoverflow](http://stackoverflow.com), and even blogging apps like [Posterous](http://posterous.com) are now supporting Markdown. EpicEditor allows you to create a Markdown editor with a single line of JavaScript:\n\n```javascript\nvar editor = new EpicEditor().load();\n```\n\n## Quick Start\n\nEpicEditor is easy to implement. Add the script and assets to your page, provide a target container and call `load()`.\n\n### Step 1: Download\n\n[Download the latest release](http://epiceditor.com) or clone the repo:\n\n```bash\n$ git clone git@github.com:OscarGodson/EpicEditor\n```\n\n### Step 2: Install\n\nCopy `EpicEditor/epiceditor/` onto your webserver, for example to `/static/lib/epiceditor`.\n\n```bash\n$ scp -r EpicEditor/epiceditor you@webserver:public_html/static/lib/\n```\n\nYou can of course customize this step for your directory layout.\n\n### Step 3: Create your container element\n\n```html\n<div id=\"epiceditor\"></div>\n```\n\nAlternately, wrap an existing textarea to load the contents into the EpicEditor instance.\n\n```html\n<div id=\"epiceditor\"><textarea id=\"my-edit-area\"></textarea></div>\n```\n\n### Step 4: Add the `epiceditor.js` file\n\n```html\n<script src=\"/static/lib/epiceditor/js/epiceditor.min.js\"></script>\n```\n\n### Step 5: Init EpicEditor\n\nEpicEditor needs to know where to find its themes, so it needs to be told its install directory at init.\n```javascript\nvar editor = new EpicEditor({basePath: '/static/lib/epiceditor'}).load();\n```\n\n## API\n\n### EpicEditor([_options_])\n\nThe `EpicEditor` constructor creates a new editor instance. Customize the instance by passing the `options` parameter. The example below uses all options and their defaults:\n\n```javascript\nvar opts = {\n  container: 'epiceditor',\n  textarea: null,\n  basePath: 'epiceditor',\n  clientSideStorage: true,\n  localStorageName: 'epiceditor',\n  useNativeFullscreen: true,\n  parser: marked,\n  file: {\n    name: 'epiceditor',\n    defaultContent: '',\n    autoSave: 100\n  },\n  theme: {\n    base: '/themes/base/epiceditor.css',\n    preview: '/themes/preview/preview-dark.css',\n    editor: '/themes/editor/epic-dark.css'\n  },\n  button: {\n    preview: true,\n    fullscreen: true,\n    bar: \"auto\"\n  },\n  focusOnLoad: false,\n  shortcut: {\n    modifier: 18,\n    fullscreen: 70,\n    preview: 80\n  },\n  string: {\n    togglePreview: 'Toggle Preview Mode',\n    toggleEdit: 'Toggle Edit Mode',\n    toggleFullscreen: 'Enter Fullscreen'\n  },\n  autogrow: false\n}\nvar editor = new EpicEditor(opts);\n```\n\n### Options\n<table cellspacing=\"0\">\n  <tr>\n    <th>Option</th>\n    <th>Description</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td><code>container</code></td>\n    <td>The ID (string) or element (object) of the target container in which you want the editor to appear.</td>\n    <td><code>epiceditor</code></td>\n  </tr>\n  <tr>\n    <td><code>textarea</code></td>\n    <td>The ID (string) or element (object) of a textarea you would like to sync the editor's content with. On page load if there is content in the textarea, the editor will use that as its content.</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>basePath</code></td>\n    <td>The base path of the directory containing the <code>/themes</code>.</td>\n    <td><code>epiceditor</code></td>\n  </tr>\n  <tr>\n    <td><code>clientSideStorage</code></td>\n    <td>Setting this to false will disable localStorage.</td>\n    <td><code>true</code></td>\n  </tr>\n  <tr>\n    <td><code>localStorageName</code></td>\n    <td>The name to use for the localStorage object.</td>\n    <td><code>epiceditor</code></td>\n  </tr>\n  <tr>\n    <td><code>useNativeFullscreen</code></td>\n    <td>Set to false to always use faux fullscreen (the same as what is used for unsupported browsers).</td>\n    <td><code>true</code></td>\n  </tr>\n  <tr>\n    <td><code>parser</code></td>\n    <td>[Marked](https://github.com/chjj/marked) is the only parser built into EpicEditor, but you can customize or toggle this by passing a parsing function to this option. For example:<br><code>parser: MyCustomParser.parse</code></td>\n    <td><code>marked</code></td>\n  </tr>\n  <tr>\n    <td><code>focusOnLoad</code></td>\n    <td>If <code>true</code>, editor will focus on load.</td>\n    <td><code>false</code></td>\n  </tr>\n  <tr>\n    <td><code>file.name</code></td>\n    <td>If no file exists with this name a new one will be made, otherwise the existing will be opened.</td>\n    <td>container ID</td>\n  </tr>\n  <tr>\n    <td><code>file.defaultContent</code></td>\n    <td>The content to show if no content exists for a file. NOTE: if the <code>textarea</code> option is used, the textarea's value will take precedence over <code>defaultContent</code>.</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>file.autoSave</code></td>\n    <td>How often to auto save the file in milliseconds. Set to <code>false</code> to turn it off.</td>\n    <td><code>100</code></td>\n  </tr>\n  <tr>\n    <td><code>theme.base</code></td>\n    <td>The base styles such as the utility bar with the buttons.</td>\n    <td><code>themes/base/epiceditor.css</code></td>\n  </tr>\n  <tr>\n    <td><code>theme.editor</code></td>\n    <td>The theme for the editor which is the area you type into.</td>\n    <td><code>themes/editor/epic-dark.css</code></td>\n  </tr>\n  <tr>\n    <td><code>theme.preview</code></td>\n    <td>The theme for the previewer.</td>\n    <td><code>themes/preview/github.css</code></td>\n  </tr>\n  <tr>\n    <td><code>button</code></td>\n    <td>If set to <code>false</code> will remove all buttons.</td>\n    <td>All buttons set to <code>true</code>.</td>\n  </tr>\n  <tr>\n    <td><code>button.preview</code></td>\n    <td>If set to <code>false</code> will remove the preview button.</td>\n    <td><code>true</code></td>\n  </tr>\n  <tr>\n    <td><code>button.fullscreen</code></td>\n    <td>If set to <code>false</code> will remove the fullscreen button.</td>\n    <td><code>true</code></td>\n  </tr>\n  <tr>\n    <td><code>button.bar</code></td>\n    <td>If <code>true</code> or <code>\"show\"</code>, any defined buttons will always be visible. If <code>false</code> or <code>\"hide\"</code>, any defined buttons will never be visible. If <code>\"auto\"</code>, buttons will usually be hidden, but shown if whenever the mouse is moved.</td>\n    <td><code>\"auto\"</code></td>\n  </tr>\n  <tr>\n    <td><code>shortcut.modifier</code></td>\n    <td>The key to hold while holding the other shortcut keys to trigger a key combo.</td>\n    <td><code>18</code> (<code>alt</code> key)</td>\n  </tr>\n  <tr>\n    <td><code>shortcut.fullscreen</code></td>\n    <td>The shortcut to open fullscreen.</td>\n    <td><code>70</code> (<code>f</code> key)</td>\n  </tr>\n  <tr>\n    <td><code>shortcut.preview</code></td>\n    <td>The shortcut to toggle the previewer.</td>\n    <td><code>80</code> (<code>p</code> key)</td>\n  </tr>\n  <tr>\n    <td><code>string.togglePreview</code></td>\n    <td>The tooltip text that appears when hovering the preview icon.</td>\n    <td><code>Toggle Preview Mode</code></td>\n  </tr>\n  <tr>\n    <td><code>string.toggleEdit</code></td>\n    <td>The tooltip text that appears when hovering the edit icon.</td>\n    <td><code>Toggle Edit Mode</code></td>\n  </tr>\n  <tr>\n    <td><code>string.toggleFullscreen</code></td>\n    <td>The tooltip text that appears when hovering the fullscreen icon.</td>\n    <td><code>Enter Fullscreen</code></td>\n  </tr>\n  <tr>\n    <td><code>autogrow</code></td>\n    <td>Whether to autogrow EpicEditor to fit its contents. If autogrow is desired one can either specify <code>true</code>, meaning to use default autogrow settings, or an object to define custom settings</td>\n    <td><code>false</code></td>\n  </tr>\n  <tr>\n    <td><code>autogrow.minHeight</code></td>\n    <td>The minimum height (in pixels) that the editor should ever shrink to. This may also take a function that returns the desired minHeight if this is not a constant, or a falsey value if no minimum is desired</td>\n    <td><code>80</code></td>\n  </tr>\n  <tr>\n    <td><code>autogrow.maxHeight</code></td>\n    <td>The maximum height (in pixels) that the editor should ever grow to. This may also take a function that returns the desired maxHeight if this is not a constant, or a falsey value if no maximum is desired</td>\n    <td><code>false</code></td>\n  </tr>\n  <tr>\n    <td><code>autogrow.scroll</code></td>\n    <td>Whether the page should scroll to keep the caret in the same vertical place while autogrowing (recommended for mobile in particular)</td>\n    <td><code>true</code></td>\n  </tr>\n</table>\n\n### load([_callback_])\n\nLoads the editor by inserting it into the DOM by creating an `iframe`. Will trigger the `load` event, or you can provide a callback.\n\n```javascript\neditor.load(function () {\n  console.log(\"Editor loaded.\")\n});\n```\n\n### unload([_callback_])\n\nUnloads the editor by removing the `iframe`. Keeps any options and file contents so you can easily call `.load()` again. Will trigger the `unload` event, or you can provide a callback.\n\n```javascript\neditor.unload(function () {\n  console.log(\"Editor unloaded.\")\n});\n```\n\n### getElement(_element_)\n\nGrabs an editor element for easy DOM manipulation. See the Themes section below for more on the layout of EpicEditor elements.\n\n* `container`: The element given at setup in the options.\n* `wrapper`: The wrapping `<div>` containing the 2 editor and previewer iframes.\n* `wrapperIframe`: The iframe containing the `wrapper` element.\n* `editor`: The #document of the editor iframe (i.e. you could do `editor.getElement('editor').body`).\n* `editorIframe`: The iframe containing the `editor` element.\n* `previewer`: The #document of the previewer iframe (i.e. you could do `editor.getElement('previewer').body`).\n* `previewerIframe`: The iframe containing the `previewer` element.\n\n```javascript\nsomeBtn.onclick = function () {\n  console.log(editor.getElement('editor').body.innerHTML); // Returns the editor's content\n}\n```\n\n### is(_state_)\n\nReturns a boolean for the requested state. Useful when you need to know if the editor is loaded yet for example. Below is a list of supported states:\n\n* `loaded`\n* `unloaded`\n* `edit`\n* `preview`\n* `fullscreen`\n\n```javascript\nfullscreenBtn.onclick = function () {\n  if (!editor.is('loaded')) { return; }\n  editor.enterFullscreen();\n}\n```\n\n### open(_filename_)\n\nOpens a client side storage file into the editor.\n\n**Note:** This does _not_ open files on your server or machine (yet). This simply looks in localStorage where EpicEditor stores drafts.\n\n```javascript\nopenFileBtn.onclick = function () {\n  editor.open('some-file'); // Opens a file when the user clicks this button\n}\n```\n\n### importFile([_filename_],[_content_])\n\nImports a string of content into a client side storage file. If the file already exists, it will be overwritten. Useful if you want to inject a bunch of content via AJAX. Will also run `.open()` after import automatically.\n\n**Note:** This does _not_ import files on your server or machine (yet). This simply looks in localStorage where EpicEditor stores drafts.\n\n```javascript\nimportFileBtn.onclick = function () {\n  editor.importFile('some-file',\"#Imported markdown\\nFancy, huh?\"); //Imports a file when the user clicks this button\n}\n```\n\n### exportFile([_filename_],[_type_])\n\nReturns the plain text of the client side storage file, or if given a `type`, will return the content in the specified type. If you leave both parameters `null` it will return the current document's content in plain text. The supported export file types are:\n\n**Note:** This does _not_ export files to your server or machine (yet). This simply looks in localStorage where EpicEditor stores drafts.\n\n* text (default)\n* html\n* json (includes metadata)\n* raw (warning: this is browser specific!)\n\n```javascript\nsyncWithServerBtn.onclick = function () {\n  var theContent = editor.exportFile();\n  saveToServerAjaxCall('/save', {data:theContent}, function () {\n    console.log('Data was saved to the database.');\n  });\n}\n```\n\n### rename(_oldName_, _newName_)\n\nRenames a client side storage file.\n\n**Note:** This does _not_ rename files on your server or machine (yet). This simply looks in localStorage where EpicEditor stores drafts.\n\n```javascript\nrenameFileBtn.onclick = function () {\n  var newName = prompt('What do you want to rename this file to?');\n  editor.rename('old-filename.md', newName); //Prompts a user and renames a file on button click\n}\n```\n\n### save()\n\nManually saves a file to client side storage (localStorage by default). EpicEditor will save continuously every 100ms by default, but if you set `autoSave` in the options to `false` or to longer intervals it's useful to manually save.\n\n**Note:** This does _not_ save files to your server or machine (yet). This simply looks in localStorage where EpicEditor stores drafts.\n\n```javascript\nsaveFileBtn.onclick = function () {\n  editor.save();\n}\n```\n\n### remove(_name_)\n\nDeletes a client side storage file.\n\n**Note:** This does _not_ remove files from your server or machine (yet). This simply looks in localStorage where EpicEditor stores drafts.\n\n```javascript\nremoveFileBtn.onclick = function () {\n  editor.remove('example.md');\n}\n```\n\n### getFiles([_name_], [_excludeContent_])\n\nIf no `name` is given it returns an object containing the names and metadata of all client side storage file objects. If a `name` is specified it will return just the metadata of that single file object. If `excludeContent` is true, it will remove the content from the returned object. This is useful when you just want a list of files or get some meta data. If `excludeContent` is false (default), it'll return a `content` property per file in plain text format.\n\n**Note:** This does _not_ get files from your server or machine (yet). This simply looks in localStorage where EpicEditor stores drafts.\n\n```javascript\nvar files = editor.getFiles();\nfor (x in files) {\n  console.log('File: ' + x); //Returns the name of each file\n};\n```\n\n### on(_event_, _handler_)\n\nSets up an event handler (callback) for a specified event. For all event types, see the Events section below.\n\n```javascript\neditor.on('unload', function () {\n  console.log('Editor was removed');\n});\n```\n\n### emit(_event_)\n\nFires an event programatically. Similar to jQuery's `.trigger()`\n\n```javascript\neditor.emit('unload'); // Triggers the handler provided in the \"on\" method above\n```\n\n### removeListener(_event_, [_handler_])\n\nAllows you to remove all listeners for an event, or just the specified one.\n\n```javascript\neditor.removeListener('unload'); //The handler above would no longer fire\n```\n\n### preview()\n\nPuts the editor into preview mode.\n\n```javascript\npreviewBtn.onclick = function () {\n  editor.preview();\n}\n```\n\n### edit()\n\nPuts the editor into edit mode.\n\n```javascript\neditBtn.onclick = function () {\n  editor.edit();\n}\n```\n\n### focus()\n\nPuts focus on the editor or previewer (whichever is visible). Works just like\ndoing plain old JavaScript and input focus like `someInput.focus()`. The\nbenefit of using this method however, is that it handles cross browser issues\nand also will focus on the visible view (edit or preview).\n\n```\nshowEditorBtn.onclick = function () {\n  editorWrapper.style.display = 'block'; // switch from being hidden from the user\n  editor.focus(); // Focus and allow user to start editing right away\n}\n```\n\n### enterFullscreen([callback])\n\nPuts the editor into fullscreen mode. A callback will be fired after the entering fullscreen animation completes. Some browsers\nwill be nearly instant while others, mainly Chrome, take 750ms before this event is fired. If already in fullscreen, the\ncallback will fire immediately.\n\n**Note:** due to browser security restrictions, calling `enterFullscreen` programmatically\nlike this will not trigger native fullscreen. Native fullscreen can only be triggered by a user interaction like mousedown or keyup.\n\n```javascript\nenterFullscreenBtn.onclick = function () {\n  editor.enterFullscreen(function () {\n    console.log('Welcome to fullscreen mode!');\n  });\n}\n```\n### exitFullscreen([callback])\n\nCloses fullscreen mode. A callback will be fired after the exiting fullscreen animation completes. If already not in fullscreen, the\ncallback will fire immediately.\n\n\n```javascript\nexitFullscreenBtn.onclick = function () {\n  editor.exitFullscreen(function () {\n    console.log('Finished closing fullscreen!');\n  });\n}\n```\n\n### reflow([type], [callback])\n\n`reflow()` allows you to \"reflow\" the editor in it's container. For example, let's say you increased\nthe height of your wrapping element and want the editor to resize too. You could call `reflow`\nand the editor will resize to fit. You can pass it one of two strings as the first parameter to\nconstrain the reflow to either `width` or `height`.\n\nIt also provides you with a callback parameter if you'd like to do something after the resize is finished.\nThe callback will return the new width and/or height in an object. Additionally, you can also listen for\nthe `reflow` event. This will also give you back the new size.\n\n**Note:** If you call `reflow()` or `reflow('width')` and you have a fluid width container\nEpicEditor will no longer be fluid because doing a reflow on the width sets an inline style on the editor.\n\n```javascript\n// For an editor that takes up the whole browser window:\nwindow.onresize = function () {\n  editor.reflow();\n}\n\n// Constrain the reflow to just height:\nsomeDiv.resizeHeightHandle = function () {\n  editor.reflow('height');\n}\n\n// Same as the first example, but this has a callback\nwindow.onresize = function () {\n  editor.reflow(function (data) {\n    console.log('width: ', data.width, ' ', 'height: ', data.height);\n  });\n}\n```\n\n## Events\n\nYou can hook into specific events in EpicEditor with <a href=\"#onevent-handler\"><code>on()</code></a> such as when a file is\ncreated, removed, or updated. Below is a complete list of currently supported events and their description.\n\n<table cellspacing=\"0\" class=\"event-table\">\n  <tr>\n    <th>Event Name</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>create</code></td>\n    <td>Fires whenever a new file is created.</td>\n  </tr>\n  <tr>\n    <td><code>read</code></td>\n    <td>Fires whenever a file is read.</td>\n  </tr>\n  <tr>\n    <td><code>update</code></td>\n    <td>Fires whenever a file is updated.</td>\n  </tr>\n  <tr>\n    <td><code>remove</code></td>\n    <td>Fires whenever a file is deleted.</td>\n  </tr>\n  <tr>\n    <td><code>load</code></td>\n    <td>Fires when the editor loads via <code>load()</code>.</td>\n  </tr>\n  <tr>\n    <td><code>unload</code></td>\n    <td>Fires whenever the editor is unloaded via <code>unload()</code></td>\n  </tr>\n  <tr>\n    <td><code>preview</code></td>\n    <td>Fires whenever the previewer is opened (excluding fullscreen) via <code>preview()</code> or the preview button.</td>\n  </tr>\n  <tr>\n    <td><code>edit</code></td>\n    <td>Fires whenever the editor is opened (excluding fullscreen) via <code>edit()</code> or the edit button.</td>\n  </tr>\n  <tr>\n    <td><code>fullscreenenter</code></td>\n    <td>Fires whenever the editor opens in fullscreen via <code>fullscreen()</code> or the fullscreen button.</td>\n  </tr>\n  <tr>\n    <td><code>fullscreenexit</code></td>\n    <td>Fires whenever the editor closes in fullscreen via <code>fullscreen()</code> or the fullscreen button.</td>\n  </tr>\n  <tr>\n    <td><code>save</code></td>\n    <td>Fires whenever <code>save()</code> is called manually, or implicitly by ```importFile``` or ```open```.</td>\n  </tr>\n  <tr>\n    <td><code>autosave</code></td>\n    <td>Fires whenever the autoSave interval fires, and the file contents have been updated since the last save.</td>\n  </tr>\n  <tr>\n    <td><code>open</code></td>\n    <td>Fires whenever a file is opened or loads automatically by EpicEditor or when <code>open()</code> is called.</td>\n  </tr>\n  <tr>\n    <td><code>reflow</code></td>\n    <td>Fires whenever <code>reflow()</code> is called. Will return the new dimensions in the callback. Will also fire every time there is a resize from autogrow.</td>\n  </tr>\n</table>\n\n## Themes\n\nTheming is easy in EpicEditor. There are three different `<iframe>`s which means styles wont leak between the \"chrome\" of\nEpicEditor, previewer, or editor. Each one is like it's own web page. In the `themes` directory  you'll see `base`, `preview`,  and\n`editor`. The base styles are for the \"chrome\" of the editor which contains elements such as the utility bar containing the icons.\nThe editor is the styles for the contents of editor `<iframe>` and the preview styles are applied to the preview `<iframe>`.\n\nThe HTML of a generated editor (excluding contents) looks like this:\n\n```html\n<div id=\"container\">\n  <iframe id=\"epiceditor-instance-id\">\n    <html>\n      <head>\n        <link type=\"text/css\" id=\"\" rel=\"stylesheet\" href=\"epiceditor/themes/base/epiceditor.css\" media=\"screen\">\n      </head>\n      <body>\n        <div id=\"epiceditor-wrapper\">\n          <iframe id=\"epiceditor-editor-frame\">\n            <html>\n              <head>\n                <link type=\"text/css\" rel=\"stylesheet\" href=\"epiceditor/themes/editor/epic-dark.css\" media=\"screen\">\n              </head>\n              <body contenteditable=\"true\">\n                <!-- raw content -->\n              </body>\n            </html>\n          </iframe>\n          <iframe id=\"epiceditor-previewer-frame\">\n            <html>\n              <head>\n                <link type=\"text/css\" rel=\"stylesheet\" href=\"epiceditor/themes/preview/github.css\" media=\"screen\">\n              </head>\n              <body>\n                <div id=\"epiceditor-preview\" class=\"epiceditor-preview\">\n                  <!-- rendered html -->\n                </div>\n              </body>\n            </html>\n          </iframe>\n          <div id=\"epiceditor-utilbar\">\n            <span title=\"Toggle Preview Mode\" class=\"epiceditor-toggle-btn epiceditor-toggle-preview-btn\"></span>\n            <span title=\"Enter Fullscreen\" class=\"epiceditor-fullscreen-btn\"></span>\n          </div>\n        </div>\n      </body>\n    </html>\n  </iframe>\n</div>\n```\n\nUnlike the \"chrome\" of `base` or `editor`, the theming of the `preview` is done by CSS class so that\nyou can reuse EpicEditor's theme to make your rendered page match your previewed.\n\nFirst, include your chosen theme on every page:\n```html\n<link rel=\"stylesheet\" href=\"/epiceditor/themes/preview/github.css\">\n```\n(you may need to adjust the path)\n\nMark your rendered content with `.epiceditor-preview`:\n```html\n<div id=\"my-content\" class=\"epiceditor-preview\"> ... </div>\n```\n\n\n## Custom Parsers\n\nEpicEditor is set up to allow you to use any parser that accepts and returns a string. This means you can use any flavor of Markdown, process Textile, or even create a simple HTML editor/previewer (`parser: false`). The possibilities are endless. Just make the parser available and pass its parsing function to the EpicEditor setting and you should be all set. You can output plain text or HTML. Here's an example of a parser that could remove \"bad words\" from the preview:\n\n```js\nvar editor = new EpicEditor({\n  parser: function (str) {\n    var blacklist = ['foo', 'bar', 'baz'];\n    return str.split(' ').map(function (word) {\n      // If the word exists, replace with asterisks\n      if (blacklist.indexOf(word) > -1) {\n        return '****'\n      }\n      return word;\n    }).join(' ');\n  }\n}).load();\n```\n\nHere's a [Wiki to HTML](http://remysharp.com/2008/04/01/wiki-to-html-using-javascript/) parser by Remy Sharp used with EpicEditor:\n\n```js\nvar editor = new EpicEditor({\n  parser: function (str) {\n    return str.wiki2html();\n  }\n}).load();\n```\n\nFor even more customization and optimization you can replace the default built-in processor on build. Running `jake build parser=path/to/parser.js` will override the default Marked build and replace it with your custom script.\n\n## Support\n\nIf you're having any problems with EpicEditor feel free to open a [new ticket](http://github.com/OscarGodson/EpicEditor/issues/new). Go ahead and ask us anything and we'll try to help however we can. You can also see if there's someone available at the #epiceditor IRC channel on irc.freenode.net. If you need a little more help with implementing EpicEditor on your site we've teamed up with [CodersClan](http://codersclan.net) to offer support:\n\n<a href=\"http://codersclan.net/support/step1.php?repo_id=2\"><img src=\"http://www.codersclan.net/graphics/getSupport_blue_big.png\" width=\"160\"></a>\n\n## Contributing\n\nContributions are greatly encouraged and appreciated. For more on ways to contribute please check the wiki: [Contributing Guide](https://github.com/OscarGodson/EpicEditor/wiki/Contributing).\n\n## Credits\n\nEpicEditor relies on [Marked](https://github.com/chjj/marked) to parse markdown and is brought to you in part by [Oscar Godson](http://twitter.com/oscargodson) and [John Donahue](http://twitter.com/johnmdonahue). Special thanks to [Adam Bickford](http://twitter.com/adam_bickford) for the bug fixes and being the QA for pull requests. Lastly, huge thanks to [Sebastian Nitu](http://twitter.com/sebnitu) for the amazing logo and doc styles.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0048828125,
          "content": "0.2.2"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.646484375,
          "content": "{\n  \"name\": \"EpicEditor\",\n  \"homepage\": \"http://epiceditor.com/\",\n  \"authors\": [\n    \"Oscar Godson <oscargodson@outlook.com>\"\n  ],\n  \"description\": \"EpicEditor is an embeddable JavaScript Markdown editor with split fullscreen editing, live previewing, automatic draft saving, offline support, and more. For developers, it offers a robust API, can be easily themed, and allows you to swap out the bundled Markdown parser with anything you throw at it.\",\n  \"main\": [\n    \"./epiceditor/js/epiceditor.js\"\n  ],\n  \"keywords\": [\n    \"editor\"\n  ],\n  \"license\": \"MIT\",\n  \"ignore\": [\n    \"**/.*\",\n    \"node_modules\",\n    \"bower_components\",\n    \"test\",\n    \"tests\"\n  ] \n}\n"
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "epiceditor",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 31.4541015625,
          "content": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>EpicEditor - An embeddable JavaScript Markdown editor</title>\n    <meta name=\"description\" content=\"EpicEditor is an embeddable JavaScript Markdown editor with split fullscreen editing, live previewing, automatic draft saving, offline support, and more.\">\n    <link href='http://fonts.googleapis.com/css?family=Lato:400,400italic|Arvo:400,400italic' rel='stylesheet' type='text/css'>\n    <link rel=\"stylesheet\" href=\"docs/css/main.css\">\n    <link rel=\"stylesheet\" href=\"docs/css/prettify.css\">\n    <link rel=\"shortcut icon\" href=\"docs/favicon.ico\">\n    <script type=\"text/javascript\">\n\n      var _gaq = _gaq || [];\n      _gaq.push(['_setAccount', 'UA-4491651-6']);\n      _gaq.push(['_trackPageview']);\n\n      (function() {\n        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n      })();\n\n    </script>\n  </head>\n  <body>\n    <div id=\"wrapper\">\n\n<h1 id=\"-epiceditor-http-epiceditor-com-docs-images-epiceditor-logo-png-\"><img src=\"http://epiceditor.com/docs/images/epiceditor-logo.png\" alt=\"EpicEditor\"></h1>\n<h2 id=\"an-embeddable-javascript-markdown-editor\">An Embeddable JavaScript Markdown Editor</h2>\n<p>EpicEditor is an embeddable JavaScript <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a> editor with split fullscreen editing, live previewing, automatic draft saving, offline support, and more. For developers, it offers a robust API, can be easily themed, and allows you to swap out the bundled Markdown parser with anything you throw at it.</p>\n<h2 id=\"why\">Why</h2>\n<p>Because, WYSIWYGs suck. Markdown is quickly becoming the replacement. <a href=\"http://github.com\">GitHub</a>, <a href=\"http://stackoverflow.com\">Stackoverflow</a>, and even blogging apps like <a href=\"http://posterous.com\">Posterous</a> are now supporting Markdown. EpicEditor allows you to create a Markdown editor with a single line of JavaScript:</p>\n<pre><code class=\"lang-javascript\">var editor = new EpicEditor().load();\n</code></pre>\n<h2 id=\"quick-start\">Quick Start</h2>\n<p>EpicEditor is easy to implement. Add the script and assets to your page, provide a target container and call <code>load()</code>.</p>\n<h3 id=\"step-1-download\">Step 1: Download</h3>\n<p><a href=\"http://epiceditor.com\">Download the latest release</a> or clone the repo:</p>\n<pre><code class=\"lang-bash\">$ git clone git@github.com:OscarGodson/EpicEditor\n</code></pre>\n<h3 id=\"step-2-install\">Step 2: Install</h3>\n<p>Copy <code>EpicEditor/epiceditor/</code> onto your webserver, for example to <code>/static/lib/epiceditor</code>.</p>\n<pre><code class=\"lang-bash\">$ scp -r EpicEditor/epiceditor you@webserver:public_html/static/lib/\n</code></pre>\n<p>You can of course customize this step for your directory layout.</p>\n<h3 id=\"step-3-create-your-container-element\">Step 3: Create your container element</h3>\n<pre><code class=\"lang-html\">&lt;div id=&quot;epiceditor&quot;&gt;&lt;/div&gt;\n</code></pre>\n<p>Alternately, wrap an existing textarea to load the contents into the EpicEditor instance.</p>\n<pre><code class=\"lang-html\">&lt;div id=&quot;epiceditor&quot;&gt;&lt;textarea id=&quot;my-edit-area&quot;&gt;&lt;/textarea&gt;&lt;/div&gt;\n</code></pre>\n<h3 id=\"step-4-add-the-epiceditor-js-file\">Step 4: Add the <code>epiceditor.js</code> file</h3>\n<pre><code class=\"lang-html\">&lt;script src=&quot;/static/lib/epiceditor/js/epiceditor.min.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<h3 id=\"step-5-init-epiceditor\">Step 5: Init EpicEditor</h3>\n<p>EpicEditor needs to know where to find its themes, so it needs to be told its install directory at init.</p>\n<pre><code class=\"lang-javascript\">var editor = new EpicEditor({basePath: &#39;/static/lib/epiceditor&#39;}).load();\n</code></pre>\n<h2 id=\"api\">API</h2>\n<h3 id=\"epiceditor-_options_-\">EpicEditor([<em>options</em>])</h3>\n<p>The <code>EpicEditor</code> constructor creates a new editor instance. Customize the instance by passing the <code>options</code> parameter. The example below uses all options and their defaults:</p>\n<pre><code class=\"lang-javascript\">var opts = {\n  container: &#39;epiceditor&#39;,\n  textarea: null,\n  basePath: &#39;epiceditor&#39;,\n  clientSideStorage: true,\n  localStorageName: &#39;epiceditor&#39;,\n  useNativeFullscreen: true,\n  parser: marked,\n  file: {\n    name: &#39;epiceditor&#39;,\n    defaultContent: &#39;&#39;,\n    autoSave: 100\n  },\n  theme: {\n    base: &#39;/themes/base/epiceditor.css&#39;,\n    preview: &#39;/themes/preview/preview-dark.css&#39;,\n    editor: &#39;/themes/editor/epic-dark.css&#39;\n  },\n  button: {\n    preview: true,\n    fullscreen: true,\n    bar: &quot;auto&quot;\n  },\n  focusOnLoad: false,\n  shortcut: {\n    modifier: 18,\n    fullscreen: 70,\n    preview: 80\n  },\n  string: {\n    togglePreview: &#39;Toggle Preview Mode&#39;,\n    toggleEdit: &#39;Toggle Edit Mode&#39;,\n    toggleFullscreen: &#39;Enter Fullscreen&#39;\n  },\n  autogrow: false\n}\nvar editor = new EpicEditor(opts);\n</code></pre>\n<h3 id=\"options\">Options</h3>\n<table cellspacing=\"0\">\n  <tr>\n    <th>Option</th>\n    <th>Description</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td><code>container</code></td>\n    <td>The ID (string) or element (object) of the target container in which you want the editor to appear.</td>\n    <td><code>epiceditor</code></td>\n  </tr>\n  <tr>\n    <td><code>textarea</code></td>\n    <td>The ID (string) or element (object) of a textarea you would like to sync the editor&#39;s content with. On page load if there is content in the textarea, the editor will use that as its content.</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>basePath</code></td>\n    <td>The base path of the directory containing the <code>/themes</code>.</td>\n    <td><code>epiceditor</code></td>\n  </tr>\n  <tr>\n    <td><code>clientSideStorage</code></td>\n    <td>Setting this to false will disable localStorage.</td>\n    <td><code>true</code></td>\n  </tr>\n  <tr>\n    <td><code>localStorageName</code></td>\n    <td>The name to use for the localStorage object.</td>\n    <td><code>epiceditor</code></td>\n  </tr>\n  <tr>\n    <td><code>useNativeFullscreen</code></td>\n    <td>Set to false to always use faux fullscreen (the same as what is used for unsupported browsers).</td>\n    <td><code>true</code></td>\n  </tr>\n  <tr>\n    <td><code>parser</code></td>\n    <td><a href=\"https://github.com/chjj/marked\">Marked</a> is the only parser built into EpicEditor, but you can customize or toggle this by passing a parsing function to this option. For example:<br><code>parser: MyCustomParser.parse</code></td>\n    <td><code>marked</code></td>\n  </tr>\n  <tr>\n    <td><code>focusOnLoad</code></td>\n    <td>If <code>true</code>, editor will focus on load.</td>\n    <td><code>false</code></td>\n  </tr>\n  <tr>\n    <td><code>file.name</code></td>\n    <td>If no file exists with this name a new one will be made, otherwise the existing will be opened.</td>\n    <td>container ID</td>\n  </tr>\n  <tr>\n    <td><code>file.defaultContent</code></td>\n    <td>The content to show if no content exists for a file. NOTE: if the <code>textarea</code> option is used, the textarea&#39;s value will take precedence over <code>defaultContent</code>.</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>file.autoSave</code></td>\n    <td>How often to auto save the file in milliseconds. Set to <code>false</code> to turn it off.</td>\n    <td><code>100</code></td>\n  </tr>\n  <tr>\n    <td><code>theme.base</code></td>\n    <td>The base styles such as the utility bar with the buttons.</td>\n    <td><code>themes/base/epiceditor.css</code></td>\n  </tr>\n  <tr>\n    <td><code>theme.editor</code></td>\n    <td>The theme for the editor which is the area you type into.</td>\n    <td><code>themes/editor/epic-dark.css</code></td>\n  </tr>\n  <tr>\n    <td><code>theme.preview</code></td>\n    <td>The theme for the previewer.</td>\n    <td><code>themes/preview/github.css</code></td>\n  </tr>\n  <tr>\n    <td><code>button</code></td>\n    <td>If set to <code>false</code> will remove all buttons.</td>\n    <td>All buttons set to <code>true</code>.</td>\n  </tr>\n  <tr>\n    <td><code>button.preview</code></td>\n    <td>If set to <code>false</code> will remove the preview button.</td>\n    <td><code>true</code></td>\n  </tr>\n  <tr>\n    <td><code>button.fullscreen</code></td>\n    <td>If set to <code>false</code> will remove the fullscreen button.</td>\n    <td><code>true</code></td>\n  </tr>\n  <tr>\n    <td><code>button.bar</code></td>\n    <td>If <code>true</code> or <code>&quot;show&quot;</code>, any defined buttons will always be visible. If <code>false</code> or <code>&quot;hide&quot;</code>, any defined buttons will never be visible. If <code>&quot;auto&quot;</code>, buttons will usually be hidden, but shown if whenever the mouse is moved.</td>\n    <td><code>&quot;auto&quot;</code></td>\n  </tr>\n  <tr>\n    <td><code>shortcut.modifier</code></td>\n    <td>The key to hold while holding the other shortcut keys to trigger a key combo.</td>\n    <td><code>18</code> (<code>alt</code> key)</td>\n  </tr>\n  <tr>\n    <td><code>shortcut.fullscreen</code></td>\n    <td>The shortcut to open fullscreen.</td>\n    <td><code>70</code> (<code>f</code> key)</td>\n  </tr>\n  <tr>\n    <td><code>shortcut.preview</code></td>\n    <td>The shortcut to toggle the previewer.</td>\n    <td><code>80</code> (<code>p</code> key)</td>\n  </tr>\n  <tr>\n    <td><code>string.togglePreview</code></td>\n    <td>The tooltip text that appears when hovering the preview icon.</td>\n    <td><code>Toggle Preview Mode</code></td>\n  </tr>\n  <tr>\n    <td><code>string.toggleEdit</code></td>\n    <td>The tooltip text that appears when hovering the edit icon.</td>\n    <td><code>Toggle Edit Mode</code></td>\n  </tr>\n  <tr>\n    <td><code>string.toggleFullscreen</code></td>\n    <td>The tooltip text that appears when hovering the fullscreen icon.</td>\n    <td><code>Enter Fullscreen</code></td>\n  </tr>\n  <tr>\n    <td><code>autogrow</code></td>\n    <td>Whether to autogrow EpicEditor to fit its contents. If autogrow is desired one can either specify <code>true</code>, meaning to use default autogrow settings, or an object to define custom settings</td>\n    <td><code>false</code></td>\n  </tr>\n  <tr>\n    <td><code>autogrow.minHeight</code></td>\n    <td>The minimum height (in pixels) that the editor should ever shrink to. This may also take a function that returns the desired minHeight if this is not a constant, or a falsey value if no minimum is desired</td>\n    <td><code>80</code></td>\n  </tr>\n  <tr>\n    <td><code>autogrow.maxHeight</code></td>\n    <td>The maximum height (in pixels) that the editor should ever grow to. This may also take a function that returns the desired maxHeight if this is not a constant, or a falsey value if no maximum is desired</td>\n    <td><code>false</code></td>\n  </tr>\n  <tr>\n    <td><code>autogrow.scroll</code></td>\n    <td>Whether the page should scroll to keep the caret in the same vertical place while autogrowing (recommended for mobile in particular)</td>\n    <td><code>true</code></td>\n  </tr>\n</table>\n\n<h3 id=\"load-_callback_-\">load([<em>callback</em>])</h3>\n<p>Loads the editor by inserting it into the DOM by creating an <code>iframe</code>. Will trigger the <code>load</code> event, or you can provide a callback.</p>\n<pre><code class=\"lang-javascript\">editor.load(function () {\n  console.log(&quot;Editor loaded.&quot;)\n});\n</code></pre>\n<h3 id=\"unload-_callback_-\">unload([<em>callback</em>])</h3>\n<p>Unloads the editor by removing the <code>iframe</code>. Keeps any options and file contents so you can easily call <code>.load()</code> again. Will trigger the <code>unload</code> event, or you can provide a callback.</p>\n<pre><code class=\"lang-javascript\">editor.unload(function () {\n  console.log(&quot;Editor unloaded.&quot;)\n});\n</code></pre>\n<h3 id=\"getelement-_element_-\">getElement(<em>element</em>)</h3>\n<p>Grabs an editor element for easy DOM manipulation. See the Themes section below for more on the layout of EpicEditor elements.</p>\n<ul>\n<li><code>container</code>: The element given at setup in the options.</li>\n<li><code>wrapper</code>: The wrapping <code>&lt;div&gt;</code> containing the 2 editor and previewer iframes.</li>\n<li><code>wrapperIframe</code>: The iframe containing the <code>wrapper</code> element.</li>\n<li><code>editor</code>: The #document of the editor iframe (i.e. you could do <code>editor.getElement(&#39;editor&#39;).body</code>).</li>\n<li><code>editorIframe</code>: The iframe containing the <code>editor</code> element.</li>\n<li><code>previewer</code>: The #document of the previewer iframe (i.e. you could do <code>editor.getElement(&#39;previewer&#39;).body</code>).</li>\n<li><code>previewerIframe</code>: The iframe containing the <code>previewer</code> element.</li>\n</ul>\n<pre><code class=\"lang-javascript\">someBtn.onclick = function () {\n  console.log(editor.getElement(&#39;editor&#39;).body.innerHTML); // Returns the editor&#39;s content\n}\n</code></pre>\n<h3 id=\"is-_state_-\">is(<em>state</em>)</h3>\n<p>Returns a boolean for the requested state. Useful when you need to know if the editor is loaded yet for example. Below is a list of supported states:</p>\n<ul>\n<li><code>loaded</code></li>\n<li><code>unloaded</code></li>\n<li><code>edit</code></li>\n<li><code>preview</code></li>\n<li><code>fullscreen</code></li>\n</ul>\n<pre><code class=\"lang-javascript\">fullscreenBtn.onclick = function () {\n  if (!editor.is(&#39;loaded&#39;)) { return; }\n  editor.enterFullscreen();\n}\n</code></pre>\n<h3 id=\"open-_filename_-\">open(<em>filename</em>)</h3>\n<p>Opens a client side storage file into the editor.</p>\n<p><strong>Note:</strong> This does <em>not</em> open files on your server or machine (yet). This simply looks in localStorage where EpicEditor stores drafts.</p>\n<pre><code class=\"lang-javascript\">openFileBtn.onclick = function () {\n  editor.open(&#39;some-file&#39;); // Opens a file when the user clicks this button\n}\n</code></pre>\n<h3 id=\"importfile-_filename_-_content_-\">importFile([<em>filename</em>],[<em>content</em>])</h3>\n<p>Imports a string of content into a client side storage file. If the file already exists, it will be overwritten. Useful if you want to inject a bunch of content via AJAX. Will also run <code>.open()</code> after import automatically.</p>\n<p><strong>Note:</strong> This does <em>not</em> import files on your server or machine (yet). This simply looks in localStorage where EpicEditor stores drafts.</p>\n<pre><code class=\"lang-javascript\">importFileBtn.onclick = function () {\n  editor.importFile(&#39;some-file&#39;,&quot;#Imported markdown\\nFancy, huh?&quot;); //Imports a file when the user clicks this button\n}\n</code></pre>\n<h3 id=\"exportfile-_filename_-_type_-\">exportFile([<em>filename</em>],[<em>type</em>])</h3>\n<p>Returns the plain text of the client side storage file, or if given a <code>type</code>, will return the content in the specified type. If you leave both parameters <code>null</code> it will return the current document&#39;s content in plain text. The supported export file types are:</p>\n<p><strong>Note:</strong> This does <em>not</em> export files to your server or machine (yet). This simply looks in localStorage where EpicEditor stores drafts.</p>\n<ul>\n<li>text (default)</li>\n<li>html</li>\n<li>json (includes metadata)</li>\n<li>raw (warning: this is browser specific!)</li>\n</ul>\n<pre><code class=\"lang-javascript\">syncWithServerBtn.onclick = function () {\n  var theContent = editor.exportFile();\n  saveToServerAjaxCall(&#39;/save&#39;, {data:theContent}, function () {\n    console.log(&#39;Data was saved to the database.&#39;);\n  });\n}\n</code></pre>\n<h3 id=\"rename-_oldname_-_newname_-\">rename(<em>oldName</em>, <em>newName</em>)</h3>\n<p>Renames a client side storage file.</p>\n<p><strong>Note:</strong> This does <em>not</em> rename files on your server or machine (yet). This simply looks in localStorage where EpicEditor stores drafts.</p>\n<pre><code class=\"lang-javascript\">renameFileBtn.onclick = function () {\n  var newName = prompt(&#39;What do you want to rename this file to?&#39;);\n  editor.rename(&#39;old-filename.md&#39;, newName); //Prompts a user and renames a file on button click\n}\n</code></pre>\n<h3 id=\"save-\">save()</h3>\n<p>Manually saves a file to client side storage (localStorage by default). EpicEditor will save continuously every 100ms by default, but if you set <code>autoSave</code> in the options to <code>false</code> or to longer intervals it&#39;s useful to manually save.</p>\n<p><strong>Note:</strong> This does <em>not</em> save files to your server or machine (yet). This simply looks in localStorage where EpicEditor stores drafts.</p>\n<pre><code class=\"lang-javascript\">saveFileBtn.onclick = function () {\n  editor.save();\n}\n</code></pre>\n<h3 id=\"remove-_name_-\">remove(<em>name</em>)</h3>\n<p>Deletes a client side storage file.</p>\n<p><strong>Note:</strong> This does <em>not</em> remove files from your server or machine (yet). This simply looks in localStorage where EpicEditor stores drafts.</p>\n<pre><code class=\"lang-javascript\">removeFileBtn.onclick = function () {\n  editor.remove(&#39;example.md&#39;);\n}\n</code></pre>\n<h3 id=\"getfiles-_name_-_excludecontent_-\">getFiles([<em>name</em>], [<em>excludeContent</em>])</h3>\n<p>If no <code>name</code> is given it returns an object containing the names and metadata of all client side storage file objects. If a <code>name</code> is specified it will return just the metadata of that single file object. If <code>excludeContent</code> is true, it will remove the content from the returned object. This is useful when you just want a list of files or get some meta data. If <code>excludeContent</code> is false (default), it&#39;ll return a <code>content</code> property per file in plain text format.</p>\n<p><strong>Note:</strong> This does <em>not</em> get files from your server or machine (yet). This simply looks in localStorage where EpicEditor stores drafts.</p>\n<pre><code class=\"lang-javascript\">var files = editor.getFiles();\nfor (x in files) {\n  console.log(&#39;File: &#39; + x); //Returns the name of each file\n};\n</code></pre>\n<h3 id=\"on-_event_-_handler_-\">on(<em>event</em>, <em>handler</em>)</h3>\n<p>Sets up an event handler (callback) for a specified event. For all event types, see the Events section below.</p>\n<pre><code class=\"lang-javascript\">editor.on(&#39;unload&#39;, function () {\n  console.log(&#39;Editor was removed&#39;);\n});\n</code></pre>\n<h3 id=\"emit-_event_-\">emit(<em>event</em>)</h3>\n<p>Fires an event programatically. Similar to jQuery&#39;s <code>.trigger()</code></p>\n<pre><code class=\"lang-javascript\">editor.emit(&#39;unload&#39;); // Triggers the handler provided in the &quot;on&quot; method above\n</code></pre>\n<h3 id=\"removelistener-_event_-_handler_-\">removeListener(<em>event</em>, [<em>handler</em>])</h3>\n<p>Allows you to remove all listeners for an event, or just the specified one.</p>\n<pre><code class=\"lang-javascript\">editor.removeListener(&#39;unload&#39;); //The handler above would no longer fire\n</code></pre>\n<h3 id=\"preview-\">preview()</h3>\n<p>Puts the editor into preview mode.</p>\n<pre><code class=\"lang-javascript\">previewBtn.onclick = function () {\n  editor.preview();\n}\n</code></pre>\n<h3 id=\"edit-\">edit()</h3>\n<p>Puts the editor into edit mode.</p>\n<pre><code class=\"lang-javascript\">editBtn.onclick = function () {\n  editor.edit();\n}\n</code></pre>\n<h3 id=\"focus-\">focus()</h3>\n<p>Puts focus on the editor or previewer (whichever is visible). Works just like\ndoing plain old JavaScript and input focus like <code>someInput.focus()</code>. The\nbenefit of using this method however, is that it handles cross browser issues\nand also will focus on the visible view (edit or preview).</p>\n<pre><code>showEditorBtn.onclick = function () {\n  editorWrapper.style.display = &#39;block&#39;; // switch from being hidden from the user\n  editor.focus(); // Focus and allow user to start editing right away\n}\n</code></pre><h3 id=\"enterfullscreen-callback-\">enterFullscreen([callback])</h3>\n<p>Puts the editor into fullscreen mode. A callback will be fired after the entering fullscreen animation completes. Some browsers\nwill be nearly instant while others, mainly Chrome, take 750ms before this event is fired. If already in fullscreen, the\ncallback will fire immediately.</p>\n<p><strong>Note:</strong> due to browser security restrictions, calling <code>enterFullscreen</code> programmatically\nlike this will not trigger native fullscreen. Native fullscreen can only be triggered by a user interaction like mousedown or keyup.</p>\n<pre><code class=\"lang-javascript\">enterFullscreenBtn.onclick = function () {\n  editor.enterFullscreen(function () {\n    console.log(&#39;Welcome to fullscreen mode!&#39;);\n  });\n}\n</code></pre>\n<h3 id=\"exitfullscreen-callback-\">exitFullscreen([callback])</h3>\n<p>Closes fullscreen mode. A callback will be fired after the exiting fullscreen animation completes. If already not in fullscreen, the\ncallback will fire immediately.</p>\n<pre><code class=\"lang-javascript\">exitFullscreenBtn.onclick = function () {\n  editor.exitFullscreen(function () {\n    console.log(&#39;Finished closing fullscreen!&#39;);\n  });\n}\n</code></pre>\n<h3 id=\"reflow-type-callback-\">reflow([type], [callback])</h3>\n<p><code>reflow()</code> allows you to &quot;reflow&quot; the editor in it&#39;s container. For example, let&#39;s say you increased\nthe height of your wrapping element and want the editor to resize too. You could call <code>reflow</code>\nand the editor will resize to fit. You can pass it one of two strings as the first parameter to\nconstrain the reflow to either <code>width</code> or <code>height</code>.</p>\n<p>It also provides you with a callback parameter if you&#39;d like to do something after the resize is finished.\nThe callback will return the new width and/or height in an object. Additionally, you can also listen for\nthe <code>reflow</code> event. This will also give you back the new size.</p>\n<p><strong>Note:</strong> If you call <code>reflow()</code> or <code>reflow(&#39;width&#39;)</code> and you have a fluid width container\nEpicEditor will no longer be fluid because doing a reflow on the width sets an inline style on the editor.</p>\n<pre><code class=\"lang-javascript\">// For an editor that takes up the whole browser window:\nwindow.onresize = function () {\n  editor.reflow();\n}\n\n// Constrain the reflow to just height:\nsomeDiv.resizeHeightHandle = function () {\n  editor.reflow(&#39;height&#39;);\n}\n\n// Same as the first example, but this has a callback\nwindow.onresize = function () {\n  editor.reflow(function (data) {\n    console.log(&#39;width: &#39;, data.width, &#39; &#39;, &#39;height: &#39;, data.height);\n  });\n}\n</code></pre>\n<h2 id=\"events\">Events</h2>\n<p>You can hook into specific events in EpicEditor with <a href=\"#onevent-handler\"><code>on()</code></a> such as when a file is\ncreated, removed, or updated. Below is a complete list of currently supported events and their description.</p>\n<table cellspacing=\"0\" class=\"event-table\">\n  <tr>\n    <th>Event Name</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>create</code></td>\n    <td>Fires whenever a new file is created.</td>\n  </tr>\n  <tr>\n    <td><code>read</code></td>\n    <td>Fires whenever a file is read.</td>\n  </tr>\n  <tr>\n    <td><code>update</code></td>\n    <td>Fires whenever a file is updated.</td>\n  </tr>\n  <tr>\n    <td><code>remove</code></td>\n    <td>Fires whenever a file is deleted.</td>\n  </tr>\n  <tr>\n    <td><code>load</code></td>\n    <td>Fires when the editor loads via <code>load()</code>.</td>\n  </tr>\n  <tr>\n    <td><code>unload</code></td>\n    <td>Fires whenever the editor is unloaded via <code>unload()</code></td>\n  </tr>\n  <tr>\n    <td><code>preview</code></td>\n    <td>Fires whenever the previewer is opened (excluding fullscreen) via <code>preview()</code> or the preview button.</td>\n  </tr>\n  <tr>\n    <td><code>edit</code></td>\n    <td>Fires whenever the editor is opened (excluding fullscreen) via <code>edit()</code> or the edit button.</td>\n  </tr>\n  <tr>\n    <td><code>fullscreenenter</code></td>\n    <td>Fires whenever the editor opens in fullscreen via <code>fullscreen()</code> or the fullscreen button.</td>\n  </tr>\n  <tr>\n    <td><code>fullscreenexit</code></td>\n    <td>Fires whenever the editor closes in fullscreen via <code>fullscreen()</code> or the fullscreen button.</td>\n  </tr>\n  <tr>\n    <td><code>save</code></td>\n    <td>Fires whenever <code>save()</code> is called manually, or implicitly by <code>importFile</code> or <code>open</code>.</td>\n  </tr>\n  <tr>\n    <td><code>autosave</code></td>\n    <td>Fires whenever the autoSave interval fires, and the file contents have been updated since the last save.</td>\n  </tr>\n  <tr>\n    <td><code>open</code></td>\n    <td>Fires whenever a file is opened or loads automatically by EpicEditor or when <code>open()</code> is called.</td>\n  </tr>\n  <tr>\n    <td><code>reflow</code></td>\n    <td>Fires whenever <code>reflow()</code> is called. Will return the new dimensions in the callback. Will also fire every time there is a resize from autogrow.</td>\n  </tr>\n</table>\n\n<h2 id=\"themes\">Themes</h2>\n<p>Theming is easy in EpicEditor. There are three different <code>&lt;iframe&gt;</code>s which means styles wont leak between the &quot;chrome&quot; of\nEpicEditor, previewer, or editor. Each one is like it&#39;s own web page. In the <code>themes</code> directory  you&#39;ll see <code>base</code>, <code>preview</code>,  and\n<code>editor</code>. The base styles are for the &quot;chrome&quot; of the editor which contains elements such as the utility bar containing the icons.\nThe editor is the styles for the contents of editor <code>&lt;iframe&gt;</code> and the preview styles are applied to the preview <code>&lt;iframe&gt;</code>.</p>\n<p>The HTML of a generated editor (excluding contents) looks like this:</p>\n<pre><code class=\"lang-html\">&lt;div id=&quot;container&quot;&gt;\n  &lt;iframe id=&quot;epiceditor-instance-id&quot;&gt;\n    &lt;html&gt;\n      &lt;head&gt;\n        &lt;link type=&quot;text/css&quot; id=&quot;&quot; rel=&quot;stylesheet&quot; href=&quot;epiceditor/themes/base/epiceditor.css&quot; media=&quot;screen&quot;&gt;\n      &lt;/head&gt;\n      &lt;body&gt;\n        &lt;div id=&quot;epiceditor-wrapper&quot;&gt;\n          &lt;iframe id=&quot;epiceditor-editor-frame&quot;&gt;\n            &lt;html&gt;\n              &lt;head&gt;\n                &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;epiceditor/themes/editor/epic-dark.css&quot; media=&quot;screen&quot;&gt;\n              &lt;/head&gt;\n              &lt;body contenteditable=&quot;true&quot;&gt;\n                &lt;!-- raw content --&gt;\n              &lt;/body&gt;\n            &lt;/html&gt;\n          &lt;/iframe&gt;\n          &lt;iframe id=&quot;epiceditor-previewer-frame&quot;&gt;\n            &lt;html&gt;\n              &lt;head&gt;\n                &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;epiceditor/themes/preview/github.css&quot; media=&quot;screen&quot;&gt;\n              &lt;/head&gt;\n              &lt;body&gt;\n                &lt;div id=&quot;epiceditor-preview&quot; class=&quot;epiceditor-preview&quot;&gt;\n                  &lt;!-- rendered html --&gt;\n                &lt;/div&gt;\n              &lt;/body&gt;\n            &lt;/html&gt;\n          &lt;/iframe&gt;\n          &lt;div id=&quot;epiceditor-utilbar&quot;&gt;\n            &lt;span title=&quot;Toggle Preview Mode&quot; class=&quot;epiceditor-toggle-btn epiceditor-toggle-preview-btn&quot;&gt;&lt;/span&gt;\n            &lt;span title=&quot;Enter Fullscreen&quot; class=&quot;epiceditor-fullscreen-btn&quot;&gt;&lt;/span&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n  &lt;/iframe&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Unlike the &quot;chrome&quot; of <code>base</code> or <code>editor</code>, the theming of the <code>preview</code> is done by CSS class so that\nyou can reuse EpicEditor&#39;s theme to make your rendered page match your previewed.</p>\n<p>First, include your chosen theme on every page:</p>\n<pre><code class=\"lang-html\">&lt;link rel=&quot;stylesheet&quot; href=&quot;/epiceditor/themes/preview/github.css&quot;&gt;\n</code></pre>\n<p>(you may need to adjust the path)</p>\n<p>Mark your rendered content with <code>.epiceditor-preview</code>:</p>\n<pre><code class=\"lang-html\">&lt;div id=&quot;my-content&quot; class=&quot;epiceditor-preview&quot;&gt; ... &lt;/div&gt;\n</code></pre>\n<h2 id=\"custom-parsers\">Custom Parsers</h2>\n<p>EpicEditor is set up to allow you to use any parser that accepts and returns a string. This means you can use any flavor of Markdown, process Textile, or even create a simple HTML editor/previewer (<code>parser: false</code>). The possibilities are endless. Just make the parser available and pass its parsing function to the EpicEditor setting and you should be all set. You can output plain text or HTML. Here&#39;s an example of a parser that could remove &quot;bad words&quot; from the preview:</p>\n<pre><code class=\"lang-js\">var editor = new EpicEditor({\n  parser: function (str) {\n    var blacklist = [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;];\n    return str.split(&#39; &#39;).map(function (word) {\n      // If the word exists, replace with asterisks\n      if (blacklist.indexOf(word) &gt; -1) {\n        return &#39;****&#39;\n      }\n      return word;\n    }).join(&#39; &#39;);\n  }\n}).load();\n</code></pre>\n<p>Here&#39;s a <a href=\"http://remysharp.com/2008/04/01/wiki-to-html-using-javascript/\">Wiki to HTML</a> parser by Remy Sharp used with EpicEditor:</p>\n<pre><code class=\"lang-js\">var editor = new EpicEditor({\n  parser: function (str) {\n    return str.wiki2html();\n  }\n}).load();\n</code></pre>\n<p>For even more customization and optimization you can replace the default built-in processor on build. Running <code>jake build parser=path/to/parser.js</code> will override the default Marked build and replace it with your custom script.</p>\n<h2 id=\"support\">Support</h2>\n<p>If you&#39;re having any problems with EpicEditor feel free to open a <a href=\"http://github.com/OscarGodson/EpicEditor/issues/new\">new ticket</a>. Go ahead and ask us anything and we&#39;ll try to help however we can. You can also see if there&#39;s someone available at the #epiceditor IRC channel on irc.freenode.net. If you need a little more help with implementing EpicEditor on your site we&#39;ve teamed up with <a href=\"http://codersclan.net\">CodersClan</a> to offer support:</p>\n<p><a href=\"http://codersclan.net/support/step1.php?repo_id=2\"><img src=\"http://www.codersclan.net/graphics/getSupport_blue_big.png\" width=\"160\"></a></p>\n<h2 id=\"contributing\">Contributing</h2>\n<p>Contributions are greatly encouraged and appreciated. For more on ways to contribute please check the wiki: <a href=\"https://github.com/OscarGodson/EpicEditor/wiki/Contributing\">Contributing Guide</a>.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>EpicEditor relies on <a href=\"https://github.com/chjj/marked\">Marked</a> to parse markdown and is brought to you in part by <a href=\"http://twitter.com/oscargodson\">Oscar Godson</a> and <a href=\"http://twitter.com/johnmdonahue\">John Donahue</a>. Special thanks to <a href=\"http://twitter.com/adam_bickford\">Adam Bickford</a> for the bug fixes and being the QA for pull requests. Lastly, huge thanks to <a href=\"http://twitter.com/sebnitu\">Sebastian Nitu</a> for the amazing logo and doc styles.</p>\n\n  <div id=\"avatars\">\n    \n  </div>\n  <a href=\"http://github.com/OscarGodson/EpicEditor\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://camo.githubusercontent.com/7afbc8b248c68eb468279e8c17986ad46549fb71/687474703a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\"></a>\n\n  <script src=\"docs/js/jquery.min.js\"></script>\n  <script src=\"docs/js/prettify.js\"></script>\n  <script src=\"epiceditor/js/epiceditor.js\"></script>\n  <script src=\"docs/js/main.js\"></script>\n\n</body>\n</html>\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.841796875,
          "content": "{\n  \"name\": \"epiceditor\",\n  \"version\": \"0.2.0\",\n  \"author\": \"Oscar Godson <oscargodson@gmail.com> (http://oscargodson.com)\",\n  \"description\": \"An Embeddable Markdown Editor\",\n  \"main\": \"epiceditor/js/epiceditor.js\",\n  \"devDependencies\": {\n    \"uglify-js\": \"1.3.3\",\n    \"jshint\": \"0.7.2\",\n    \"mocha\": \"1.3.2\",\n    \"expect.js\": \"0.1.2\",\n    \"mime\": \"1.2.7\",\n    \"marked\": \"0.3.3\",\n    \"node-watch\": \"0.3.x\"\n  },\n  \"keywords\": [\n    \"embeddable\",\n    \"markdown\",\n    \"editor\"\n  ],\n  \"contributors\": [\n    \"Oscar Godson <oscargodson@gmail.com> (http://oscargodson.com)\",\n    \"John Donahue <johnmdonahue@gmail.com> (http://johnmdonahue.com)\"\n  ],\n  \"license\": {\n    \"type\": \"MIT\",\n    \"url\": \"https://raw.github.com/OscarGodson/EpicEditor/master/LICENSE\"\n  },\n  \"repository\": \"git@github.com:OscarGodson/EpicEditor.git\",\n  \"scripts\": {\n    \"test\": \"jake test\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}