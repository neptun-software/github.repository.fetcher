{
  "metadata": {
    "timestamp": 1736561684148,
    "page": 275,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "amireh/happypack",
      "stars": 4231,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.048828125,
          "content": "node_modules\ntmp\n.happypack\nlib/__tests__/fixtures"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 1.69921875,
          "content": "{\n  \"env\": {\n    \"node\": true,\n    \"mocha\": true\n  },\n\n  \"parserOptions\": {\n    \"ecmaVersion\": 6\n  },\n\n  \"rules\": {\n    \"no-trailing-spaces\": 2,\n    \"indent\": [2, 2, {\n      \"SwitchCase\": 1\n    }],\n    \"eqeqeq\": 2,\n    \"quotes\": 0,\n    \"strict\": 0,\n\n    \"consistent-this\": 0,\n    \"no-undef\": 2,\n    \"dot-notation\": 0,\n    \"space-infix-ops\": 0,\n    \"space-unary-ops\": 0,\n    \"no-underscore-dangle\": 0,\n    \"no-unused-vars\": 2,\n    \"comma-dangle\": 0,\n    \"semi-spacing\": 0,\n    \"consistent-return\": 0,\n    \"camelcase\": 0,\n    \"eol-last\": 0,\n    \"no-multi-spaces\": 0,\n    \"no-extra-boolean-cast\": 0,\n    \"no-eq-null\": 0,\n    \"no-alert\": 0,\n    \"no-unused-expressions\": 2,\n\n    \"no-console\": 0,\n    \"space-return-throw-case\": 0,\n\n    \"one-var\": [2, {\n      \"initialized\": \"never\"\n    }],\n\n    \"no-cond-assign\": [2, \"except-parens\"],\n    \"no-debugger\": 2,\n    \"no-dupe-args\": 2,\n    \"no-dupe-keys\": 2,\n    \"no-duplicate-case\": 2,\n    \"no-empty\": 2,\n    \"no-extra-semi\": 0,\n    \"no-func-assign\": 2,\n    \"no-inner-declarations\": 2,\n    \"no-irregular-whitespace\": 2,\n    \"no-negated-in-lhs\": 2,\n    \"no-sparse-arrays\": 2,\n    \"no-unreachable\": 2,\n    \"use-isnan\": 2,\n    \"no-caller\": 2,\n    \"no-else-return\": 0,\n    \"no-eval\": 2,\n    \"no-implied-eval\": 2,\n    \"no-extend-native\": 2,\n    \"no-fallthrough\": 2,\n    \"no-lone-blocks\": 2,\n    \"no-loop-func\": 2,\n    \"no-new\": 2,\n    \"no-redeclare\": 2,\n    \"no-return-assign\": [2, \"always\"],\n    \"no-sequences\": 2,\n    \"radix\": 2,\n    \"wrap-iife\": [2, \"any\"],\n    \"no-undef-init\": 2,\n    \"no-delete-var\": 2,\n    \"no-use-before-define\": [2, \"nofunc\"],\n    \"dot-location\": [2, \"property\"],\n    \"curly\": [2, \"multi-line\"],\n    \"no-shadow\": 2,\n    \"no-shadow-restricted-names\": 0,\n    \"no-extra-bind\": 2\n  }\n}"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.177734375,
          "content": "*.gnumeric\n.happypack\nnode_modules\npackage-lock.json\n/coverage\n/examples/**/dist\n/examples/**/dist--raw\n/npm-debug.log\n/.nyc_output\n/scripts/**/dist\n/tmp\n!/tmp/.gitkeep\n.cache-loader"
        },
        {
          "name": ".mocha",
          "type": "blob",
          "size": 0.052734375,
          "content": "--reporter dot lib/__tests__/index.js lib/**/*.test.js"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0205078125,
          "content": "package-lock = false\n"
        },
        {
          "name": ".nvmrc",
          "type": "blob",
          "size": 0.0087890625,
          "content": "v10.15.0\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.7724609375,
          "content": "language: node_js\n\nenv:\n  - HAPPY_TEST_TIMEOUT=60000\n\nnode_js:\n  - stable\n  - 6\n\ninstall:\n  - npm install --ignore-scripts\n  - (cd upstream/webpack1; npm install)\n  - (cd upstream/webpack2; npm install)\n  - (cd upstream/webpack3; npm install)\n  - (cd upstream/webpack4; npm install)\n  - (cd packages/@happypack/example-utils; npm install --ignore-scripts)\n  - (cd packages/@happypack/test-utils; npm install --ignore-scripts)\n  - (cd packages/@happypack/webpack-config-composer; npm install --ignore-scripts)\n\nscript:\n  - npm run lint\n  - npm run test:coverage\n\nafter_success:\n  - npm run coverage:ci\n\ncache:\n  directories:\n    - node_modules\n    - upstream/webpack1/node_modules\n    - upstream/webpack2/node_modules\n    - upstream/webpack3/node_modules\n    - upstream/webpack4/node_modules\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 10.140625,
          "content": "# HappyPack Changelog\n\n## 5.0.1\n\n- Fixed an issue causing HappyPack to fail when hard-source-webpack-plugin \n  is enabled on Webpack 3. Refs GH-251, thanks to @FengXianGuo for the fix!\n\n## 5.0.0\n\n### Breaking changes\n\n- Minimum supported version of node is now 6.11.5\n\n### Features\n\n- Added support for webpack 4\n- New option `use`\n- New option `loaders`\n\n## 5.0.0-beta.4\n\n- The `use` option now works FRD. Who thought renaming variables would be so\n  hard? Refs GH-225, thanks to @inoyakaigor\n\n## 5.0.0-beta.3\n\n- The `rules` option that was introduced in 5.0.0-beta.1 was meant to be named\n  `use` and has thus been renamed. Sorry about the confusion!\n\n## 5.0.0-beta.2\n\n- Fixed deprecation notice introduced by webpack 4 re `compiler.plugin`. Thanks\n  to @log2-hwan, refs GH-218.\n\n## 5.0.0-beta.1\n\n- Added support for webpack4 resolving APIs, thanks to @marcokam. Refs GH-215\n- HappyPlugin now accepts `rules` along with `loaders` for the loader list so\n  that it's consistent with webpack notation.\n  \n### Breaking changes\n\n- Minimum supported version of node has been upped to v6.11.5 to match\n  webpack's.\n\n## 4.0.1\n\nMaintenance release for stripping down the built package to include only\nthe source files and to exclude transient/development-specific files. Refs\nGH-205, thanks to @filipesilva.\n\n## 4.0.0\n\nBreaking release with two primary changes:\n\nFirst, this release contains a fix for a long-standing issue on Windows\nsystems where the worker processes would hang indefinitely.\n\nSecond, the caching functionality has been removed[1]. Users relying on the\ncaching functionality may want to consider using the dedicated\n[cache-loader](https://github.com/webpack-contrib/cache-loader) but please\nkeep in mind that this is not officially supported or endorsed by HappyPack\nand is not guaranteed to work (as is the case with other loaders.)\n\n[1] See [this thread](https://github.com/amireh/happypack/issues/154#issuecomment-305627697)\n    for more context about the caching change.\n\n## 4.0.0-beta.5\n\n- Support for webpack{2,3} loader context API `this.getDependencies`\n- Support for webpack{2,3} loader context API `this.getContextDependencies`\n- Now interoperable with `cache-loader`\n\n## 4.0.0-beta.4\n\n- Default to buffered messaging mode when using standalone thread pools on\n  Windows.\n\n## 4.0.0-beta.3\n\nFixed bug around the use of `process.send()` that was causing a hang on\nWindows with sufficiently large number of modules (and message length.)\n\nThe following parse (on Linux) shows the penalty in buffered vs non-buffered\nmodes and implementations:\n\nelapsed (ms) | buffering | mean (ms) | penalty (ms)\n------------ | --------- | --------- | ------------\n22211        | none\n21816\n22572\n21179\n21035        |           | 21762.6   | 0\n21723        | basic\n22585\n23372\n22500\n22693        |           | 22574.6   | 812\n24865        | async.queue\n23010\n22717\n23530\n23732        |           | 23570.8   | 1808\n21363        | basic + process.nextTick\n22220\n21901\n21871\n22306        |           | 21932.2   | 170\n23349        | basic (again)\n22043\n21904\n23435\n23508        |           | 22847.8   | 1085\n22735        | basic + process.nextTick (again)\n21793\n22412\n21900\n22656        |           | 22299.2   | 537\n\n## 4.0.0-beta.2\n\n- Errors are now property serialized in `emitWarning` and `emitError` loader\n  APIs. Refs GH-161\n- Deprecation upgrade: now using `loaderUtils.getOptions` instead of\n  `.parseQuery`, refs GH-140\n\n## 4.0.0-beta.1\n\n- Support for file-system caching has been dropped. Use [cache-\n  loader](https://github.com/webpack-contrib/cache-loader) if you're after this\n  functionality.\n- In the light of the caching change, the following options have lost their\n  meaning and instead wish you a very happy life. Please note that as of this\n  version configuring them will cause a warning to be logged to the console\n  while in the future they will cause an exception to be thrown:\n  - `tempDir`\n  - `cache`\n  - `cachePath`\n  - `cacheContext`\n  - `cacheSignatureGenerator`\n- The `enabled` option has been deprecated and will be removed in a future\n  version. As disabling the plugin already requires the user to modify their\n  config (e.g. to adjust the loader listings) this option had very little\n  value.\n\n## 3.1.0\n\n- Fixed an edge race condition re cache signatures. Thanks to @saifelse, refs GH-159\n- Now propagating loader errors correctly to webpack from background processes. Thanks to @zinserjan, refs GH-14\n- Now exposing \"minimize\" to loader contexts. Thanks to @adventure-yunfei, refs GH-139\n\n## 3.0.3\n\n- Added more webpack2 compatibility fixes\n- Fixed an issue that was causing cached files to be ignored. Thanks to\n  @lijianzhang, refs GH-115\n\n## 3.0.2\n\n- Accept \"this.plugins\" as a function in the loader context since webpack2\n  now allows it to either be an object or a function. Thanks to @grigory51,\n  refs GH-106\n\n## 3.0.1\n\n- The temporary file path used for writing a loader's output is now suffixed\n  with a random identifier to work around an edge case reported in GH-92. \n  Big thanks to @frankLife for the effort.\n\n## 3.0.0\n\nThis release, although it's a major one, was mostly concerned with internal\nchanges and improvements to how the plugin worked. Most side-effects and global\nstate has been eliminated, which should hopefully result in fewer surprises \nwhen attempting to use HappyPack in a multi-build webpack setting.\n\n- HappyPack will no longer output anything to the console if webpack is running\n in profiling mode (`--profile`) in order not to corrupt any JSON output. You \n can restore the previous behavior by setting the new option \n `verboseWhenProfiling` to `true`. Refs GH-76\n- [BREAKING] Inferring loaders for configuration is no longer supported! If you\n  were supplying { happy: { id: 'something' } } to your webpack loader configuration\n  so that HappyPack picks it up, you need to rewrite that part of the config\n  as is shown in the README.\n- [POTENATIALLY BREAKING] HappyPlugin will no longer attempt to generate an \n  incremental ID to use if none is passed. Instead, it will simply default to\n  `'1'` for an id in case it was not overridden by the user. This behavior \n  never actually provided any benefit since if you had multiple plugins \n  referenced by multiple loaders, you still had to provide each loader with a \n  distinct id (the loaders never incremented such a counter or relied on it.) \n  This solves GH-88. \n- Thread pools can now be shared across multiple compilers/builds! The plugin \n  and thread pools will correctly map each compiler to its configuration and \n  instruct the workers to use the correct configuration when they do their \n  work. Refs GH-82 and GH-72.\n \n**Internal refactors**\n\n- `HappyPlugin` and `HappyLoader` no longer deal with the RPCHandler to \nregister active compiler or loader instances. Instead, this book-keeping is done implicitly by the _thread pools_ (which own the RPC handlers) when they are started, requested to compile, or stopped.\n- The internal API `HappyPlugin.resetUID` has been dropped\n- The internal API `HappyPlugin.isVerbose` is now hidden\n- The internal API `HappyPlugin.isDebug` is now hidden\n- The internal API `HappyPlugin.prototype.compileInBackground` is now hidden\n- The internal API `HappyPlugin.prototype.compileInForeground` is now hidden\n- The internal API `HappyPlugin.prototype._performCompilationRequest` is now hidden\n- The internal API `HappyThreadPool.get` has been dropped. Instead, the thread pool exposes a `compile` API similar to the Thread's.\n- The internal API `HappyThreadPool.getRPCHandler` has been dropped\n\n## 2.2.1\n\n- Fixed an edge-case issue that was causing happypack to crash when a shared \n  threadpool is used by a pre-loader and a loader (or post-loader) that are \n  processing the same file. Refs GH-60\n- Made it possible to completely silence happypack's console output by setting\n  verbose to `false` and introduced the `debug` option to control diagnostic\n  message logging. Refs GH-64\n\n## 2.2.0\n\n- Fixed a regression in scanning loader \"string chains\" (multiple loaders \n  specified in the same string separated by `!`), refs GH-68\n- Added support for the loader API `this.loadModule()` which is used by\n  less-loader, refs GH-66\n\n## 2.1.3\n\n- Fixed an issue where certain loader configurations with queries weren't being\n  properly recognized by HappyPack. Now, all known configuration variants \n  should work. (GH-65 and GH-26)\n\n## 2.1.2\n\n- Process argv will no longer be passed to the child processes spawned by \n  HappyPack (refs GH-47)\n- Support for the `target` loader context variable has been added. Thanks to \n  @Akkuma (refs GH-46)\n\n## 2.1.1\n\n- Fixed an issue where happypack would crash when loading invalid/corrupt \n  cache or source-map files. Big thanks to @benhughes for providing the patch in GH-42\n\n## 2.1.0\n\n- Introduced SourceMap support\n\n## 2.0.6\n\n- Introduced a new option `cacheSignatureGenerator` to handle use cases such\n  as [GH-35]\n\n## 2.0.5\n\n- Now using [mkdirp](https://github.com/substack/node-mkdirp) for creating the \n  temp directory to support nested ones\n\n## 2.0.4\n\n- Fixed an issue where the cache was not being utilized on node v0.10 (since \n  `fs.statSync` doesn't exist with that name there) - thanks to [@XVincentX]\n\n## 2.0.2\n\n- Fixed an issue that was causing loaders running in foreground to not receive \n  the compiler options\n\n## 2.0.1\n\n- Package in NPM is now compact\n\n## 2.0.0\n\n- Pitching loader support\n- More complete loader API support\n- More convenient configuration interface\n\n## 1.1.4\n\n- Fixed an issue where the cache was being improperly invalidated due to \n  `cacheContext` not being stored properly (refs GH-17, thanks to @blowery)\n\n## 1.1.3\n\n- Fixed an issue where the initial cache was not being saved properly\n\n## 1.1.2\n\n- Fixed an issue on old node versions (0.10) with the EventEmitter API (GH-10)\n- Fixed an issue that was breaking the compiler if an invalid `threads` option\n  was passed (evaluating to `NaN`)\n\n## 1.1.1\n\n- Unrecognized and invalid config parameters will now cause the process to\n  abort\n- The active version is logged on launch\n\n## 1.1.0\n\n- Now supporting basic webpack loaders\n- Dropped the `transformer` parameter as it's no longer needed\n- `cache` now defaults to `true`\n- Now using a forking model utilizing node.js's `process.fork()` for cleaner\n  threading code\n\n## 1.0.2\n\n- Loader will now accept IDs that aren't just numbers\n"
        },
        {
          "name": "HACKING.md",
          "type": "blob",
          "size": 3.3544921875,
          "content": "## Bootstrapping the development environment\n\nYou will need to npm install in a few places for it to work (look at \n`travis.yml` for an up-to-date source of truth).\n\nA monstrous invocation like this should do it:\n\n```shell\nnpm install &&\nfor dir in {packages/@happypack,upstream}/*\ndo\n  ( cd $dir && npm install ) || exit $?\ndone\n```\n\nWhere:\n\n- `upstream/*` contains different webpack versions (targets) that happypack is \n  tested against\n- `packages/@happypack/example-utils` contains a few helper functions / \n  constants needed to define the examples (again, because they're run against \n  multiple targets)\n- `packages/@happypack/test-utils` contains (unit) testing utilities\n- `packages/@happypack/webpack-config-composer` is used by tests to generate a \n  configuration for the current webpack version being targeted\n\nLook at the `test:webpack*` scripts in `package.json` to learn how the unit \ntests are run.\n\n## Maintaining the integration tests\n\nDirectories under `examples/` contain sample scripts for configuring webpack\nwith happypack against a certain loader or plugin. The purpose is to provide\nworking examples for users and some means of regression testing for a \nmaintainer.\n\nThe [master build script][example-runner] invokes these scripts using different\nversions of webpack (installed in `upstream/`) to ensure the integration does \nnot regress with later Webpack releases. However, the process is somewhat \nconvoluted mainly because it's not straightforward to run Node against \ndifferent package trees.\n\nConventions expected by the runner:\n\n- `build.sh` exists to invoke webpack and run any assertions on the output\n\n  + The script may utilize the helpers defined in `examples/build.sh` like\n    `git-diff`\n\n  + The script has access in PATH to the `webpack` binary of the current target\n  + The script has the following environment variables available for use:\n  \n    * `EXAMPLE: String` name of the example\n    * `EXAMPLE_DIR: Path` base directory of the example\n    * `EXAMPLE_VERSION: Number` the webpack version being targeted\n    * `EXAMPLE_OUT_DIR: Path` where the webpack output will be assuming\n      the scripts use the example helpers to define that path (see \n      `packages/@happypack/example-utils/index.js#.outputDir`)\n    * `EXAMPLE_PKG_DIR: Path` the base directory of the current version\n      configuration scripts (e.g. where `package.json` will be found)\n\n  + See the existing `build.sh` scripts under `examples/` for guidance.\n\n- Configuration scripts for each version are placed in:\n      \n      examples/[name]/versions/[webpack-version]/vanilla/webpack.config.js\n      examples/[name]/versions/[webpack-version]/happy/webpack.config.js\n\n- Build dependencies are tracked in separate `package.json` manifests, one for \n  each version:\n\n      examples/[name]/versions/[webpack-version]/package.json\n\n## Running the integration tests\n\nEither do `npm run test:examples` or use `examples/build.sh` directly. It is\npossible to selectively run examples; see the header comment of that file for\nusage. For example, to run only the `babel-loader` examples:\n\n```shell\n# run the babel-loader example against all supported targets\n./examples/build.sh -o babel-loader\n\n# run babel-loader against webpack 2 only\n./examples/build.sh -o babel-loader:2\n\n# run everything except \"extract-text-webpack-plugin\"\n./examples/build.sh -s extract-text-webpack-plugin \n```\n\n[example-runner]: examples/build-all.sh\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2017 Ahmad Amireh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.28125,
          "content": "# HappyPack [![Build Status](https://travis-ci.org/amireh/happypack.svg?branch=master)](https://travis-ci.org/amireh/happypack) [![codecov.io](https://codecov.io/github/amireh/happypack/coverage.svg?branch=master)](https://codecov.io/github/amireh/happypack?branch=master)\n\nHappyPack makes initial webpack builds faster by transforming files [in\nparallel](#how-it-works).\n\n> **Maintenance mode notice**\n>\n> My interest in the project is fading away mainly because I'm not using\n> JavaScript as much as I was in the past. Additionally, Webpack's native\n> performance is improving and (I hope) it will soon make this plugin\n> unnecessary.\n>\n> See the FAQ entry about Webpack 4 and [thread-loader][thread-loader].\n>\n> Contributions are always welcome. Changes I make from this point will be\n> restricted to bug-fixing. If someone wants to take over, feel free to get\n> in touch.\n>\n> Thanks to everyone who used the library, contributed to it and helped in\n> refining it!!!\n\n## Usage\n\n```shell\nnpm install --save-dev happypack\n```\n\nHappyPack provides both a plugin and a loader in order to do its job so you\nmust use both to enable it.\n\nNormally, you define loader rules to tell webpack how to process certain files.\nWith HappyPack, you switch things around so that you pass the loaders to\nHappyPack's plugin and instead tell webpack to use `happypack/loader`.\n\nBelow is a sample configuration that shows those steps in action.\n\n```javascript\n// @file: webpack.config.js\nconst HappyPack = require('happypack');\n\nexports.module = {\n  rules: [\n    {\n      test: /.js$/,\n      // 1) replace your original list of loaders with \"happypack/loader\":\n      // loaders: [ 'babel-loader?presets[]=es2015' ],\n      use: 'happypack/loader',\n      include: [ /* ... */ ],\n      exclude: [ /* ... */ ]\n    }\n  ]\n};\n\nexports.plugins = [\n  // 2) create the plugin:\n  new HappyPack({\n    // 3) re-add the loaders you replaced above in #1:\n    loaders: [ 'babel-loader?presets[]=es2015' ]\n  })\n];\n```\n\nThat's it. Now sources that match `.js$` will be handed off to HappyPack which\nwill transform them in parallel using the loaders you specified (`babel-loader`\nin this example.)\n\n## Configuration\n\nThese are the parameters you can pass to the plugin when you instantiate it.\n`loaders` is the only required parameter.\n\n### `loaders: Array`\n\nEach entry consists of the name (or absolute path) of the loader that\nwould transform the files and an optional query string to pass to it. This\nlooks similar to what you'd pass to webpack's `loader` config.\n\n> **Heads up!**\n>\n> HappyPack doesn't work with *all* webpack loaders as some loader API are not\n> supported.\n>\n> See [this wiki page](https://github.com/amireh/happypack/wiki/Webpack-Loader-API-Support) for more details on current Loader API support.\n\nThe following notations are officially supported and are all equivalent:\n\n```javascript\n{\n  loaders: [\n    // a string with embedded query for options\n    'babel-loader?presets[]=es2015',\n\n    {\n      loader: 'babel-loader'\n    },\n\n    // \"query\" string\n    {\n      loader: 'babel-loader',\n      query:  '?presets[]=es2015'\n    },\n\n    // \"query\" object\n    {\n      loader: 'babel-loader',\n      query: {\n        presets: [ 'es2015' ]\n      }\n    },\n\n    // Webpack 2+ \"options\" object instead of \"query\"\n    {\n      loader: 'babel-loader',\n      options: {\n        presets: [ 'es2015' ]\n      }\n    }\n  ]\n}\n```\n\n### `id: String`\n\nA unique id for this happy plugin. This is used by the loader to know which\nplugin it's supposed to talk to.\n\nNormally, you would not need to specify this unless you have more than one\nHappyPack plugin defined, in which case you'll need distinct IDs to tell them\napart. See [this section](#using-multiple-instances) for more information.\n\nDefaults to: `\"1\"`\n\n### `threads: Number`\n\nThis number indicates how many Node VMs HappyPack will spawn for compiling\nthe source files. After a lot of tinkering, I found 4 to yield the best\nresults. There's certainly a diminishing return on this value and increasing\nbeyond 8 actually slowed things down for me.\n\nKeep in mind that this is only relevant when performing **the initial build**\nas HappyPack will switch into a synchronous mode afterwards (i.e. in `watch`\nmode.)\n\nDefaults to: `3`\n\n### `threadPool: HappyThreadPool`\n\nA pre-defined thread-pool to use for retrieving worker threads. Normally, this\nis managed internally by each `HappyPlugin` instance, but you may override\nthis behavior for better results.\n\n[The section on thread pools](#shared-thread-pools) explains how and when to\nuse this.\n\nDefaults to: `null`\n\n### `verbose: Boolean`\n\nEnable this to log status messages from HappyPack to STDOUT like start-up\nbanner, etc..\n\nDefaults to: `true`\n\n### `verboseWhenProfiling: Boolean`\n\nEnable this if you want HappyPack to still produce its output even when you're\ndoing a `webpack --profile` run. Since this variable was introduced, HappyPack\nwill be silent when doing a profile build in order not to corrupt any JSON\noutput by webpack (i.e. when using `--json` as well.)\n\nDefaults to: `false`\n\n### `debug: Boolean`\n\nEnable this to log diagnostic messages from HappyPack to STDOUT. Useful for\ntroubleshooting.\n\nDefaults to: `false`\n\n## How it works\n\n![A diagram showing the flow between HappyPack's components](doc/HappyPack_Workflow.png)\n\nHappyPack sits between webpack and your primary source files (like JS sources)\nwhere the bulk of loader transformations happen. Every time webpack resolves a\nmodule, HappyPack will take it and all its dependencies and distributes those\nfiles to multiple worker \"threads\".\n\nThose threads are actually simple node processes that invoke your transformer.\nWhen the compiled version is retrieved, HappyPack serves it to its loader and\neventually your chunk.\n\n## Using multiple instances\n\nIt's possible to define multiple HappyPack plugins for different types of\nsources/transformations. Just pass in a unique id for each plugin and make\nsure you pass it their loaders. For example:\n\n```javascript\n// @file webpack.config.js\nexports.plugins = [\n  new HappyPack({\n    id: 'jsx',\n    threads: 4,\n    loaders: [ 'babel-loader' ]\n  }),\n\n  new HappyPack({\n    id: 'styles',\n    threads: 2,\n    loaders: [ 'style-loader', 'css-loader', 'less-loader' ]\n  })\n];\n\nexports.module.rules = [\n  {\n    test: /\\.js$/,\n    use: 'happypack/loader?id=jsx'\n  },\n\n  {\n    test: /\\.less$/,\n    use: 'happypack/loader?id=styles'\n  },\n]\n```\n\nNow `.js` files will be handled by the first Happy plugin which will use\n`babel-loader` to transform them, while `.less` files will be handled\nby the second one using the style loaders.\n\n## Shared thread pools\n\nNormally, each HappyPack plugin you create internally creates its own threads\nwhich are used to run the loaders. However, if you're using more than one\nHappyPack plugin it can be more optimal to create a thread pool yourself and\nthen configure the plugins to share that pool, minimizing the idle time of\nthreads within it.\n\nHere's an example of using a custom pool of 5 threads that will be shared\nbetween loaders for both JS and SCSS/LESS/whatever sources:\n\n```javascript\n// @file: webpack.config.js\nvar HappyPack = require('happypack');\nvar happyThreadPool = HappyPack.ThreadPool({ size: 5 });\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new HappyPack({\n      id: 'js',\n      threadPool: happyThreadPool,\n      loaders: [ 'babel-loader' ]\n    }),\n\n    new HappyPack({\n      id: 'styles',\n      threadPool: happyThreadPool,\n      loaders: [ 'style-loader', 'css-loader', 'less-loader' ]\n    })\n  ]\n};\n```\n\n## Benchmarks\n\nFor the main repository I tested on, which had around 3067 modules, the build time went down from 39 seconds to a whopping ~10 seconds.\n\nHere's a rundown of the various states the build was performed in:\n\nElapsed (ms) | Happy?  | Using DLLs? |\n------------ | ------- | ----------- |\n39851        | NO      | NO          |\n37393        | NO      | YES         |\n14605        | YES     | NO          |\n13925        | YES     | NO          |\n11877        | YES     | NO          |\n9228         | YES     | YES         |\n\nThe builds above were run under Linux on a machine with 12 cores.\n\n## Changes\n\nSee [./CHANGELOG.md](./CHANGELOG.md).\n\n## FAQ\n\n### Does it work with Webpack 2 & 3?\n\nYes. You should use version >= 4.0.1 (of HappyPack).\n\n### Is it necessary for Webpack 4?\n\nShort answer: _maybe_ not.\n\nLong answer: there's now a competing add-on in the form of a _loader_ for\nprocessing files in multiple threads, exactly what HappyPack does. The fact\nthat it's a loader and not a plugin (or both, in case of H.P.) makes it much\nsimpler to configure. Look at [thread-loader][thread-loader] and if it works\nfor you - that's great, otherwise you can try HappyPack and see which fares\nbetter for you.\n\nYMMV.\n\n### Does it work with TypeScript?\n\nThe short answer is: yes, it finally does! The longer answer is that you need\nto use [ts-loader](https://github.com/TypeStrong/ts-loader) in \n\"transpiling-only\" mode then use the special plugin [fork-ts-checker-notifier-webpack-plugin](https://github.com/johnnyreilly/fork-ts-checker-notifier-webpack-plugin) to perform static type checking.\n\nMore information can be found in the [ts-loader \"happypack mode\" section](https://github.com/TypeStrong/ts-loader#happypackmode-boolean-defaultfalse) and you can refer to the [example](./examples/ts-loader) that shows this in action.\n\nBig thanks to @johnnyreilly, @aindlq, @piotr-oles, @abergs and many others for\nmaking this work.\n\n### Does it work with loader XYZ?\n\nWe're keeping track of loader support in [this wiki page](https://github.com/amireh/happypack/wiki/Loader-Compatibility-List). Some loaders may require \nextra configuration to make them work.\n\nIf the loader you're trying to use isn't listed there, you can refer to [this](https://github.com/amireh/happypack/wiki/Webpack-Loader-API-Support) wiki page\nto see which loader APIs are supported. If your loader uses any API that is NOT\nsupported, chances are that it will not work with HappyPack.\n\nAs a general rule, any loader that accepts \"functions\" in options will not work\nunless it also accepts reading those options from a file, like babel-loader\ndoes with `.babelrc` and postcss-loader too.\n\n### Does it work under Windows?\n\nYes, as of version 4.0.0 it should. If you come across issues using the plugin\non Windows, feel free to open a ticket.\n\n## Development\n\nSee [HACKING.md](./HACKING.md).\n\n## License (MIT)\n\nCopyright (c) <2015-2017> <ahmad@amireh.net>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[thread-loader]: https://github.com/webpack-contrib/thread-loader\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 0.8408203125,
          "content": "- [ ] ~~stop serializing options and instead accept webpack config file path and populate fake loader context with that so that worker loaders get access to external options~~\n- [x] pitching loader applier\n- [ ] pass loader options found on the compiler by the loader name to the loader, like `options.transform` or `options.sassLoader`\n- [ ] accept modified `resourcePath` from pitching phase and re-read the source\n- [ ] delay reading the source file until the very point where we need it; pitch\n- [ ] replay loader RPCs for items cached by loaders like `tslint-loader` where the output is actually RPCs like `this.emitWarning` and `this.emitError`\n- [ ] better coverage for background loader failures\n- [ ] caching test\n- [ ] experiment with not serializing worker output to file and instead shoving things down the process stream (ie `compiledPath` shizzle)"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "loader.js",
          "type": "blob",
          "size": 0.044921875,
          "content": "module.exports = require('./lib/HappyLoader');"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.1796875,
          "content": "{\n  \"name\": \"happypack\",\n  \"main\": \"./lib/HappyPlugin.js\",\n  \"description\": \"webpack speed booster, makes you happy!\",\n  \"version\": \"5.0.1\",\n  \"scripts\": {\n    \"lint\": \"eslint lib\",\n    \"test\": \"npm run test:webpack1\",\n    \"test:webpack1\": \"NODE_PATH='./packages:./upstream/webpack1/node_modules' mocha --opts .mocha\",\n    \"test:webpack2\": \"NODE_PATH='./packages:./upstream/webpack2/node_modules' mocha --opts .mocha\",\n    \"test:webpack3\": \"NODE_PATH='./packages:./upstream/webpack3/node_modules' mocha --opts .mocha\",\n    \"test:webpack4\": \"NODE_PATH='./packages:./upstream/webpack4/node_modules' mocha --opts .mocha\",\n    \"test:coverage\": \"nyc --silent npm run test:webpack1 && nyc --silent --no-clean npm run test:webpack2 && nyc --silent --no-clean npm run test:webpack3 && nyc --no-clean npm run test:webpack4\",\n    \"test:examples\": \"./examples/build-all.sh\",\n    \"coverage\": \"nyc report\",\n    \"coverage:html\": \"nyc report --reporter html\",\n    \"coverage:ci\": \"nyc report --reporter=text-lcov > tmp/coverage.lcov && codecov --disable search -f tmp/coverage.lcov\",\n    \"prepublishOnly\": \"npm run lint && npm run test:webpack1 && npm run test:webpack2 && npm run test:webpack3 && npm run test:webpack4 && npm run test:examples\"\n  },\n  \"engines\": {\n    \"node\": \">=6.11.5\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+ssh://git@github.com/amireh/happypack.git\"\n  },\n  \"keywords\": [\n    \"webpack\",\n    \"plugin\",\n    \"fast\",\n    \"speed\",\n    \"performance\",\n    \"compilation\",\n    \"transformer\",\n    \"loader\",\n    \"happiness\",\n    \"happy\"\n  ],\n  \"author\": \"Ahmad Amireh\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/amireh/happypack/issues\"\n  },\n  \"homepage\": \"https://github.com/amireh/happypack#readme\",\n  \"devDependencies\": {\n    \"codecov\": \"1.0.1\",\n    \"eslint\": \"4.18.2\",\n    \"mocha\": \"3.0.1\",\n    \"multiline-slash\": \"2.0.0\",\n    \"nyc\": \"11.6.0\"\n  },\n  \"dependencies\": {\n    \"async\": \"1.5.0\",\n    \"json-stringify-safe\": \"5.0.1\",\n    \"loader-utils\": \"1.1.0\",\n    \"serialize-error\": \"^2.1.0\"\n  },\n  \"nyc\": {\n    \"include\": [\n      \"lib/*.js\"\n    ],\n    \"exclude\": [\n      \"lib/**/*.test.js\"\n    ]\n  },\n  \"files\": [\n    \"lib\",\n    \"CHANGELOG.md\",\n    \"LICENSE\",\n    \"loader.js\",\n    \"README.md\"\n  ]\n}\n"
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tmp",
          "type": "tree",
          "content": null
        },
        {
          "name": "upstream",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}