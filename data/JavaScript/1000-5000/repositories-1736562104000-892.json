{
  "metadata": {
    "timestamp": 1736562104000,
    "page": 892,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "umijs/babel-plugin-import",
      "stars": 3162,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2392578125,
          "content": "# http://editorconfig.org\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.01953125,
          "content": "**/*/__tests__\ntest\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.173828125,
          "content": "{\n  \"extends\": [\"airbnb/base\", \"plugin:prettier/recommended\"],\n  \"rules\": {\n    \"no-console\": [0],\n    \"prettier/prettier\": 2,\n    \"global-require\": 0,\n    \"func-names\": 0\n  }\n}\n"
        },
        {
          "name": ".fatherrc.ts",
          "type": "blob",
          "size": 0.04296875,
          "content": "export default {\n  cjs: { output: 'lib' }\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0830078125,
          "content": "/.idea\n/tmp\n/node_modules\n/coverage\n/lib\n/*.log\n/*.log.*\n/yarn.lock\n/pnpm-lock.yaml\n\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.041015625,
          "content": ".idea\ntmp\nnode_modules\ncoverage\n__tests__\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.021484375,
          "content": "test/fixtures/**/*.js\n"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.2333984375,
          "content": "{\n  \"singleQuote\": true,\n  \"trailingComma\": \"all\",\n  \"printWidth\": 100,\n  \"proseWrap\": \"never\",\n  \"arrowParens\": \"avoid\",\n  \"overrides\": [\n    {\n      \"files\": \".prettierrc\",\n      \"options\": {\n        \"parser\": \"json\"\n      }\n    }\n  ]\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.537109375,
          "content": "# babel-plugin-import\n\nModular import plugin for babel, compatible with [antd](https://github.com/ant-design/ant-design), [antd-mobile](https://github.com/ant-design/ant-design-mobile), lodash, [material-ui](http://material-ui.com/), and so on.\n\n[![NPM version](https://img.shields.io/npm/v/babel-plugin-import.svg?style=flat)](https://npmjs.org/package/babel-plugin-import)\n[![Build Status](https://img.shields.io/travis/ant-design/babel-plugin-import.svg?style=flat)](https://travis-ci.org/ant-design/babel-plugin-import)\n\n----\n\n## Why babel-plugin-import\n\n- [English Instruction](https://ant.design/docs/react/getting-started#Import-on-Demand)\n- [中文说明](https://ant.design/docs/react/getting-started-cn#%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD)\n\n## Where to add babel-plugin-import\n\n- [babelrc](https://babeljs.io/docs/usage/babelrc/)\n- [babel-loader](https://github.com/babel/babel-loader)\n\n## Example\n\n#### `{ \"libraryName\": \"antd\" }`\n\n```javascript\nimport { Button } from 'antd';\nReactDOM.render(<Button>xxxx</Button>);\n\n      ↓ ↓ ↓ ↓ ↓ ↓\n\nvar _button = require('antd/lib/button');\nReactDOM.render(<_button>xxxx</_button>);\n```\n\n#### `{ \"libraryName\": \"antd\", style: \"css\" }`\n\n```javascript\nimport { Button } from 'antd';\nReactDOM.render(<Button>xxxx</Button>);\n\n      ↓ ↓ ↓ ↓ ↓ ↓\n\nvar _button = require('antd/lib/button');\nrequire('antd/lib/button/style/css');\nReactDOM.render(<_button>xxxx</_button>);\n```\n\n#### `{ \"libraryName\": \"antd\", style: true }`\n\n```javascript\nimport { Button } from 'antd';\nReactDOM.render(<Button>xxxx</Button>);\n\n      ↓ ↓ ↓ ↓ ↓ ↓\n\nvar _button = require('antd/lib/button');\nrequire('antd/lib/button/style');\nReactDOM.render(<_button>xxxx</_button>);\n```\n\nNote : with `style: true` css source files are imported and optimizations can be done during compilation time. With `style: \"css\"`, pre bundled css files are imported as they are.\n\n`style: true` can reduce the bundle size significantly, depending on your usage of the library.\n\n## Usage\n\n```bash\nnpm install babel-plugin-import --save-dev\n```\n\nVia `.babelrc` or babel-loader.\n\n```js\n{\n  \"plugins\": [[\"import\", options]]\n}\n```\n\n### options\n\n`options` can be object.\n\n```javascript\n{\n  \"libraryName\": \"antd\",\n  \"style\": true,   // or 'css'\n}\n```\n\n```javascript\n{\n  \"libraryName\": \"lodash\",\n  \"libraryDirectory\": \"\",\n  \"camel2DashComponentName\": false,  // default: true\n}\n```\n\n```javascript\n{\n  \"libraryName\": \"@material-ui/core\",\n  \"libraryDirectory\": \"components\",  // default: lib\n  \"camel2DashComponentName\": false,  // default: true\n}\n```\n\n~`options` can be an array.~ It's not available in babel@7+\n\nFor Example:\n\n```javascript\n[\n  {\n    \"libraryName\": \"antd\",\n    \"libraryDirectory\": \"lib\",   // default: lib\n    \"style\": true\n  },\n  {\n    \"libraryName\": \"antd-mobile\"\n  },\n]\n```\n`Options` can't be an array in babel@7+, but you can add plugins with name to support multiple dependencies.\n\nFor Example:\n\n```javascrit\n// .babelrc\n\"plugins\": [\n  [\"import\", { \"libraryName\": \"antd\", \"libraryDirectory\": \"lib\"}, \"antd\"],\n  [\"import\", { \"libraryName\": \"antd-mobile\", \"libraryDirectory\": \"lib\"}, \"antd-mobile\"]\n]\n```\n\n#### style\n\n- `[\"import\", { \"libraryName\": \"antd\" }]`: import js modularly\n- `[\"import\", { \"libraryName\": \"antd\", \"style\": true }]`: import js and css modularly (LESS/Sass source files)\n- `[\"import\", { \"libraryName\": \"antd\", \"style\": \"css\" }]`: import js and css modularly (css built files)\n\nIf option style is a `Function`, `babel-plugin-import` will auto import the file which filepath equal to the function return value. This is useful for the components library developers.\n\ne.g.\n- ``[\"import\", { \"libraryName\": \"antd\", \"style\": (name) => `${name}/style/2x` }]``: import js and css modularly & css file path is `ComponentName/style/2x`\n\nIf a component has no style, you can use the `style` function to return a `false` and the style will be ignored.\n\ne.g.\n```js\n[\n  \"import\",\n    {\n      \"libraryName\": \"antd\",\n      \"style\": (name: string, file: Object) => {\n        if(name === 'antd/lib/utils'){\n          return false;\n        }\n        return `${name}/style/2x`;\n      }\n    }\n]\n```\n\n#### styleLibraryDirectory\n\n- `[\"import\", { \"libraryName\": \"element-ui\", \"styleLibraryDirectory\": \"lib/theme-chalk\" }]`: import js and css modularly\n\nIf `styleLibraryDirectory` is provided (default `null`), it will be used to form style file path,\n`style` will be ignored then. e.g.\n\n```javascript\n{\n  \"libraryName\": \"element-ui\",\n  \"styleLibraryDirectory\": \"lib/theme-chalk\",\n}\n\nimport { Button } from 'element-ui';\n\n      ↓ ↓ ↓ ↓ ↓ ↓\n\nvar _button = require('element-ui/lib/button');\nrequire('element-ui/lib/theme-chalk/button');\n```\n\n#### customName\n\nWe can use `customName` to customize import file path.\n\nFor example, the default behavior:\n\n```typescript\nimport { TimePicker } from \"antd\"\n↓ ↓ ↓ ↓ ↓ ↓\nvar _button = require('antd/lib/time-picker');\n```\n\nYou can set `camel2DashComponentName` to `false` to disable transfer from camel to dash:\n\n```typescript\nimport { TimePicker } from \"antd\"\n↓ ↓ ↓ ↓ ↓ ↓\nvar _button = require('antd/lib/TimePicker');\n```\n\nAnd finally, you can use `customName` to customize each name parsing:\n\n```js\n[\n  \"import\",\n    {\n      \"libraryName\": \"antd\",\n      \"customName\": (name: string, file: object) => {\n        const filename = file.opts.filename;\n        if (name === 'TimePicker'){\n          return 'antd/lib/custom-time-picker';\n        }\n        if (filename.indexOf('/path/to/my/different.js') >= 0) {\n          return 'antd/lib/custom-name';\n        }\n        return `antd/lib/${name}`;\n      }\n    }\n]\n```\n\nSo this result is:\n\n```typescript\nimport { TimePicker } from \"antd\"\n↓ ↓ ↓ ↓ ↓ ↓\nvar _button = require('antd/lib/custom-time-picker');\n```\n\nIn some cases, the transformer may serialize the configuration object. If we set the `customName` to a function, it will lost after the serialization.\n\nSo we also support specifying the customName with a JavaScript source file path:\n\n```js\n[\n  \"import\",\n    {\n      \"libraryName\": \"antd\",\n      \"customName\": require('path').resolve(__dirname, './customName.js')\n    }\n]\n```\n\nThe `customName.js` looks like this:\n\n```js\nmodule.exports = function customName(name) {\n  return `antd/lib/${name}`;\n};\n```\n\n#### customStyleName\n\n`customStyleName` works exactly the same as customName, except that it deals with style file path.\n\n#### transformToDefaultImport\n\nSet this option to `false` if your module does not have a `default` export.\n\n### Note\n\nbabel-plugin-import will not work properly if you add the library to the webpack config [vendor](https://webpack.js.org/concepts/entry-points/#separate-app-and-vendor-entries).\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.55859375,
          "content": "{\n  \"name\": \"babel-plugin-import\",\n  \"version\": \"1.13.8\",\n  \"description\": \"Component modular import plugin for babel.\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/ant-design/babel-plugin-import\"\n  },\n  \"main\": \"lib/index.js\",\n  \"scripts\": {\n    \"build\": \"father build\",\n    \"test\": \"umi-test --coverage\",\n    \"debug\": \"umi-test\",\n    \"lint\": \"eslint --ext .js src\",\n    \"coveralls\": \"cat ./coverage/lcov.info | coveralls\",\n    \"prepack\": \"npm run build\",\n    \"prepublishOnly\": \"npm run build && father doctor && np --no-cleanup --yolo --no-publish --any-branch\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"*.js\": [\n      \"eslint\",\n      \"prettier --write\"\n    ]\n  },\n  \"keywords\": [\n    \"babel-plugin\",\n    \"antd\"\n  ],\n  \"author\": \"chencheng <sorrycc@gmail.com>\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.0.0\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"@umijs/test\": \"^3.2.28\",\n    \"babel-core\": \"^7.0.0-0\",\n    \"babel-preset-umi\": \"^1.0.0\",\n    \"coveralls\": \"^3.0.6\",\n    \"eslint\": \"^7.1.0\",\n    \"eslint-config-airbnb\": \"^18.1.0\",\n    \"eslint-config-prettier\": \"^6.11.0\",\n    \"eslint-plugin-import\": \"^2.20.2\",\n    \"eslint-plugin-prettier\": \"^3.1.3\",\n    \"father\": \"^4.0.0\",\n    \"husky\": \"^4.2.5\",\n    \"lint-staged\": \"^10.2.8\",\n    \"material-ui\": \"^0.20.2\",\n    \"np\": \"^6.2.0\",\n    \"prettier\": \"^2.0.5\",\n    \"react-toolbox\": \"^1.2.5\"\n  },\n  \"files\": [\n    \"src\",\n    \"lib\",\n    \"package.json\",\n    \"README.md\"\n  ],\n  \"dependencies\": {\n    \"@babel/helper-module-imports\": \"^7.0.0\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}