{
  "metadata": {
    "timestamp": 1736562146567,
    "page": 955,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gluon-framework/gluon",
      "stars": 3095,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1240234375,
          "content": "# miscellaneous\r\n.DS_Store\r\n\r\n# node\r\nnode_modules\r\npackage-lock.json\r\n\r\n# pnpm\r\npnpm-lock.yaml\r\n\r\n# gluon\r\nbuild\r\ngluon_data\r\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.1689453125,
          "content": "# miscellaneous\n.DS_Store\n\n# node\nnode_modules\npackage-lock.json\n\n# pnpm\npnpm-lock.yaml\n\n# gluon\nbuild\ngluon_data\n\n# docs/utils not helpful for npm\n.github\nassets\nroadmap.md"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0654296875,
          "content": "MIT License\r\n\r\nCopyright (c) 2022 Gluon Framework\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.080078125,
          "content": "<h1 align=\"center\">\r\n<sub><img src=\"assets/logo.png\" height=\"38\" width=\"38\"></sub>\r\nGluon\r\n</h1>\r\n\r\n<span align=\"center\">\r\n\r\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://choosealicense.com/licenses/mit)\r\n[![NPM version](https://img.shields.io/npm/v/@gluon-framework/gluon)](https://www.npmjs.com/package/@gluon-framework/gluon)\r\n[![GitHub Sponsors](https://img.shields.io/github/sponsors/CanadaHonk?label=Sponsors&logo=github)](https://github.com/sponsors/CanadaHonk)\r\n[![Discord](https://img.shields.io/discord/1051940602704564244.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)](https://discord.gg/RFtUCA8fST)\r\n\r\n</span>\r\n\r\n**Gluon is a new framework for creating desktop apps from websites**, using **system installed browsers** *(not webviews)* and NodeJS, differing a lot from other existing active projects - opening up innovation and allowing some major advantages. Instead of other similar frameworks bundling a browser like Chromium or using webviews (like Edge Webview2 on Windows), **Gluon just uses system installed browsers** like Chrome, Edge, Firefox, etc. Gluon supports Chromium ***and Firefox*** based browsers as the frontend, while Gluon's backend uses NodeJS to be versatile and easy to develop (also allowing easy learning from other popular frameworks like Electron by using the same-ish stack).\r\n\r\n## Features\r\n- **Uses normal system installed browsers** - allows user choice by **supporting most Chromium *and Firefox*** based browsers,  no webviews\r\n- **Tiny bundle sizes** - <1MB using system Node, <10MB when bundling it\r\n- **Chromium *and Firefox* supported as browser engine**, unlike any other active framework\r\n- **Minimal and easy to use** - Gluon has a simple yet powerful API to make apps with a Node backend\r\n- **Deno and Bun support** (experimental) - Support for Deno and Bun are being worked on as alternatives to NodeJS for the backend (developer choice), [see the `deno` branch](https://github.com/gluon-framework/gluon/tree/deno) and [the `bun` branch](https://github.com/gluon-framework/gluon/tree/bun)\r\n- **Fast build times** - Gluon has build times under 1 second on most machines for small projects\r\n- **Actively developed** and **listening to feedback** - new updates are coming around weekly, quickly adding unplanned requested features if liked by the community (like Firefox support!)\r\n- **Cross-platform** - Gluon works on Windows, Linux, and macOS (WIP)\r\n<!-- - **No forks needed** - Gluon doesn't need forks of Node or Chromium/etc to use them, it just uses normal versions -->\r\n\r\n![Gluworld Screenshot showing Chrome Canary and Firefox Nightly being used at once.](https://user-images.githubusercontent.com/19228318/210174682-b261dba0-8b3c-4ca0-8093-aeeb9fdbc52d.png)\r\n\r\n<br>\r\n\r\n## Trying Gluon\r\n1. Clone [the Gluon examples repo](https://github.com/gluon-framework/examples)\r\n2. Inside of `gluworld`, run `npm install`\r\n3. Now do `node .` to run it!\r\n\r\n<details>\r\n<summary>Shell example</summary>\r\n\r\n```sh\r\n$ git clone https://github.com/gluon-framework/examples.git\r\n$ cd examples\r\n$ cd gluworld\r\n$ npm install\r\n...\r\n$ node .\r\n```\r\n\r\n</details>\r\n\r\n<br>\r\n\r\n## Status\r\nGluon began in **December 2022** (from scratch), so is still in an **early and experimental state**. But it works and shows (in my opinion) potential! I am open to opinions, suggestions, feedback, ideas, etc. Currently you cannot easily test it yourself. If you're interested and want to talk to me and others about Gluon, you can [join our Discord server](https://discord.gg/RFtUCA8fST).\r\n\r\n### Specific feature statuses\r\n| Feature | Status |\r\n| ------- | :----: |\r\n| Using Chromium based browsers | Stable |\r\n| Using Firefox based browsers | Experimental |\r\n| Web-Node IPC | Stable |\r\n| Idle API | Experimental |\r\n| Using other JS runtimes ([Deno](https://github.com/gluon-framework/gluon/tree/deno)/[Bun](https://github.com/gluon-framework/gluon/tree/bun)) | Experimental |\r\n\r\n<br>\r\n\r\n## Ecosystem\r\n- [Gluon](https://github.com/gluon-framework/gluon): the Gluon framework (NodeJS)\r\n- [Glugun](https://github.com/gluon-framework/glugun): builds Gluon apps into releasable builds with optional bundling (soon)\r\n\r\n### Apps\r\n- [Gluworld](https://github.com/gluon-framework/examples/tree/main/gluworld): Hello World demo app with version info shown\r\n- [Gludoom](https://github.com/gluon-framework/examples/tree/main/gludoom): Doom running as WASM, made into a native looking app with Gluon\r\n- [Glucord](https://github.com/gluon-framework/examples/tree/main/glucord): minimal desktop Discord client loading official webapp (demo/example)\r\n\r\n<br>\r\n\r\n## IPC API\r\nGluon has an easy to use, but powerful asynchronous IPC API. Example:\r\n```js\r\n// In your website's JS\r\nconst reply = await Gluon.ipc.send('my type', { more: 'data' });\r\nconsole.log(reply); // { give: 'back', different: 'stuff' }\r\n```\r\n\r\n```js\r\n// In your Node backend\r\nimport * as Gluon from '@gluon-framework/gluon';\r\nconst Window = await Gluon.open(...);\r\n\r\nWindow.ipc.on('my type', data => { // { more: 'data' }\r\n  return { give: 'back', different: 'stuff' };\r\n});\r\n```\r\n\r\n<br>\r\n\r\n## Comparisons\r\n### Internals\r\n| Part | Gluon | Electron | Tauri | Neutralinojs |\r\n| ---- | ----- | -------- | ------------ | ----- |\r\n| Frontend | System installed Chromium *or Firefox* | Self-contained Chromium | System installed webview | System installed webview |\r\n| Backend | System installed *or bundled* Node.JS | Self-contained Node.JS | Native (Rust) | Native (Any) |\r\n| IPC | Window object | Preload | Window object | Window object |\r\n| Status | Early in development | Production ready | Usable | Usable |\r\n| Ecosystem | Integrated | Distributed | Integrated | Integrated |\r\n\r\n\r\n### Benchmark / Stats\r\nBasic (plain HTML) Hello World demo, measured on up to date Windows 10, on my machine (your experience will probably differ). Used latest stable versions of all frameworks as of 9th Dec 2022. (You shouldn't actually use random stats in benchmarks to compare frameworks, this is more so you know what Gluon is like compared to other similar projects.)\r\n\r\n| Stat | Gluon | Electron | Tauri | Neutralinojs |\r\n| ---- | ----- | -------- | ------------ | ----- |\r\n| Build Size | <1MB[^system][^gluon][^1] | ~220MB | ~1.8MB[^system] | ~2.6MB[^system] |\r\n| Memory Usage | ~80MB[^gluon] | ~100MB | ~90MB | ~90MB |\r\n| Backend[^2] Memory Usage | ~13MB[^gluon] (Node) | ~22MB (Node) | ~3MB (Native) | ~3MB (Native) |\r\n| Build Time | ~0.7s[^3] | ~20s[^4] | ~120s[^5] | ~2s[^3][^6] |\r\n\r\n*Extra info: All HTML/CSS/JS is unminified (including Gluon). Built in release configuration. All binaries were left as compiled with common size optimizations enabled for that language, no stripping/packing done.*\r\n\r\n[^system]: Does not include system installed components.\r\n[^gluon]: Using Chrome as system browser. Early/WIP data, may change in future.\r\n\r\n[^1]: *How is Gluon so small?* Since NodeJS is expected as a system installed component, it is \"just\" bundled and minified Node code.\r\n[^2]: Backend like non-Web (not Chromium/WebView2/etc).\r\n[^3]: Includes Node.JS spinup time.\r\n[^4]: Built for win32 zip (not Squirrel) as a fairer comparison.\r\n[^5]: Cold build (includes deps compiling) in release mode.\r\n[^6]: Using `neu build -r`."
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 1.0322265625,
          "content": "# Gluon Changelog\n\n## [v0.13.0 - 2023-02-08](https://gluonjs.org/blog/gluon-v0.13/)\n\n### v0.13.1\n- Fixed IPC exposing sometimes not working when ran early due to timing issue\n- Fixed IPC expose Proxy setter return values\n\n### v0.13.2\n- Fixed Local not resolving custom indexes\n\n\n## [v0.12.0 - 2023-01-28](https://gluonjs.org/blog/gluon-v0.12/)\n\n## [v0.11.0 - 2023-01-08](https://gluonjs.org/blog/gluon-v0.11/)\n\n## v0.10.1 - 2023-01-07\n- Fixed IPC exposed functions being called with arguments incorrectly\n- Fixed onLoad causing errors in Node\n\n## [v0.10.0 - 2023-01-05](https://gluonjs.org/blog/gluon-v0.10/)\n\n## [v0.9.0 - 2023-01-03](https://gluonjs.org/blog/gluon-v0.9/)\n\n## v0.8.0 [2022-12-30]\n- Rewrote browser detection to support more setups\n- Added `Window.close()` API to close Gluon windows gracefully\n\n## 0.7.0 [2022-12-20]\n- Added typedef\n- Added async IPC listener support\n- Added Idle API (WIP)\n- Changed default IPC replies to `null` instead of `{}`\n- Fixed misnamed IPC binding handler\n- Fixed some IPC parsing\n- Cleaned up some IPC internals"
        },
        {
          "name": "gluon.d.ts",
          "type": "blob",
          "size": 15.2666015625,
          "content": "/// <reference types=\"node\" />\ndeclare module \"@gluon-framework/gluon\";\n\ntype V8CacheBuildOptions = {\n  /**\n   * Path to save the V8 Cache to. Defaults to v8Cache.json in Gluon's browser data.\n   */\n  path?: string,\n\n  /**\n   * Use eager compilation.\n   * @default true\n   */\n  eager?: boolean,\n\n  /**\n   * URLs of scripts to cache. Defaults to automatically detecting currently loaded scripts in the page.\n   */\n  urls?: string[],\n\n  /**\n   * Reload the page to force script compilation.\n   * @default true\n   */\n  reload?: boolean,\n\n  /**\n   * Include preload scripts in automatic detection.\n   * @default true\n   */\n  includePreload?: boolean\n};\n\ntype V8CacheApi = {\n  /** Build a V8 Cache. */\n  build(\n    /** Build options. */\n    options?: V8CacheBuildOptions\n  ): Promise<void>,\n\n  /** Load a V8 Cache. */\n  load(\n    /**\n     * Path to load. Defaults to v8Cache.json in Gluon's browser data.\n     */\n    path?: string\n  ): Promise<boolean>\n\n  /** Check if a V8 Cache exists with a given path. */\n  exists(\n    /** Path to check. */\n    path: string\n  ): Promise<boolean>\n};\n\ntype PrintToPDFOptions = {\n  /**\n   * Paper orientation.\n   * @default false\n   */\n  landscape?: boolean,\n\n  /**\n   * Display header and footer.\n   * @default false\n   */\n  displayHeaderFooter?: boolean,\n\n  /**\n   * Print background graphics.\n   * @default false\n   */\n  printBackground?: boolean,\n\n  /**\n   * Scale of the webpage rendering.\n   * @default 1\n   */\n  scale?: number,\n\n  /**\n   * Paper width in inches.\n   * @default 8.5\n   */\n  paperWidth?: number,\n\n  /**\n   * Paper height in inches.\n   * @default 11\n   */\n  paperHeight?: number,\n\n  /**\n   * Set the margins of the PDF (inches).\n   * @default 0.4 for all\n   */\n  margins?: {\n    /**\n     * Top margin in inches.\n     * @default 0.4 (1cm)\n     */\n    top?: number,\n\n    /**\n     * Bottom margin in inches.\n     * @default 0.4 (1cm)\n     */\n    bottom?: number,\n\n    /**\n     * Left margin in inches.\n     * @default 0.4 (1cm)\n     */\n    left?: number,\n\n    /**\n     * Right margin in inches.\n     * @default 0.4 (1cm)\n     */\n    right?: number\n  },\n\n  /**\n   * Paper ranges to print, one based, (eg '1-5, 8, 11-13').\n   * Pages are printed in the document order, not in the order specified, and no more than once.\n   * Defaults to an empty string, which implies all pages available are printed.\n   * @default ''\n   */\n  pageRanges?: string,\n\n  /**\n   * HTML template for the print header.\n   * You can use the following classes which will have the relevant print data injected into the contents:\n   * - `date` - formatted print date\n   * - `title` - document title\n   * - `url` - document location\n   * - `pageNumber` - current page number\n   * - `totalPages` - total pages in the document\n   * @example `<span class=title></span>` would create a span containing the document title.\n   */\n  headerTemplate?: string,\n\n  /**\n   * HTML template for the print footer.\n   * You can use the following classes which will have the relevant print data injected into the contents:\n   * - `date` - formatted print date\n   * - `title` - document title\n   * - `url` - document location\n   * - `pageNumber` - current page number\n   * - `totalPages` - total pages in the document\n   * @example `<span class=title></span>` would create a span containing the document title.\n   */\n  footerTemplate?: string,\n\n  /**\n   * Prefer the page size defined by the page's CSS.\n   * When set to false, it will scale to fit the paper size.\n   * @default false\n   */\n  preferCSSPageSize?: boolean,\n};\n\ntype PageApi = {\n  /**\n   * Evaluate a string or function in the web context.\n   * @returns Return value of expression given.\n   */\n  eval(\n    /** String or function to evaluate. */\n    expression: string|Function\n  ): Promise<any>,\n\n  /** Promise for waiting until the page has loaded. */\n  loaded: Promise<void>,\n\n  /**\n   * Get or set the title of the page.\n   * Use no arguments to get the title, or provide a string to set it.\n   */\n  title(\n    /** Set the page title to a new title. */\n    newTitle: string\n  ): Promise<string>,\n\n  /**\n   * Reload the page.\n   */\n  reload(\n    /**\n     * Optionally ignore the cache for the reload.\n     * @default false\n    */\n    ignoreCache?: boolean\n  ): Promise<void>,\n\n  /**\n   * Print (export) the page as a PDF.\n   * @returns Buffer of PDF data.\n   */\n  printToPDF(\n    /** Optional print options (based on Chromium's headless standard). */\n    options?: PrintToPDFOptions\n  ): Promise<Buffer>\n};\n\ntype IPCStoreApi = {\n  /** Get a key from the IPC store. */\n  get(\n    /** Key to get. */\n    key: string\n  ): any,\n\n  /** Set a key to the provided value in the IPC store (has to be serializable to JSON). */\n  set<T>(\n    /** Key to set to. */\n    key: string,\n\n    /** Value to set. */\n    value: T\n  ): T,\n\n  /** Get or set a key from the IPC Store (has to be serializable to JSON). */\n  [key: string]: any,\n};\n\ntype IPCApi = {\n  /**\n   * Send an IPC event to the web context.\n   * @returns Replied event data (null by default).\n   */\n  send(\n    /** Type of event to send. */\n    type: string,\n\n    /** Data of event to send. */\n    data: any\n  ): Promise<any>,\n\n  /**\n   * Subscribe to IPC events of a specific type with a callback.\n   */\n  on(\n    /** Type of event to handle. */\n    type: string,\n\n    /**\n     * Ran whenever an IPC event of type specified is received. Should return optionally with what to reply with.\n     * @returns Optionally with what to reply with, otherwise null by default.\n     */\n    callback: (data: any) => any\n  ): void,\n\n  /**\n   * Unsubscribe an IPC event listener callback with a specific type.\n   */\n  removeListener(\n    /** Type of event which was subscribed to. */\n    type: string,\n\n    /** Callback function to unsubscribe. */\n    callback: Function\n  ): void,\n\n  /**\n   * Expose a Node function to the web context, acts as a wrapper around IPC events.\n   * Can be ran in window with Gluon.ipc[key](...args)\n   */\n  expose(\n    /** Key name to expose to. */\n    key: string,\n\n    /** Handler function which is called from the web context. */\n    handler: Function\n  ): void,\n\n  /**\n   * Unexpose (remove) a Node function previously exposed using expose().\n   */\n  unexpose(\n    /** Key name to unexpose (remove). */\n    key: string\n  ): void,\n\n  /** IPC Store API. */\n  store: IPCStoreApi,\n\n  /**\n   * Expose a Node function to the web context, acts as a wrapper around IPC events.\n   * Can be ran in window with Gluon.ipc[key](...args)\n   */\n  [key: string]: any,\n};\n\ntype CDPApi = {\n  /**\n   * Send a CDP command to the browser.\n   * {@link https://chromedevtools.github.io/devtools-protocol/ Chrome DevTools Protocol Documentation}\n   * @returns Result of command from browser.\n   */\n  send(\n    /** Method of CDP command. */\n    method: string,\n\n    /** Parameters of CDP command. */\n    params?: object,\n\n    /**\n     * Send session ID with the command (default true).\n     * @default true\n     */\n    useSessionId?: boolean\n  ): Promise<any>,\n\n  /**\n   * Hook into a specific CDP method being emitted.\n   * @returns Function to unhook/unsubscribe.\n   */\n  on(\n    /** Method of CDP event to hook into. */\n    method: string,\n\n    /** Callback to run when the given method is emitted. */\n    callback: (message: any) => void,\n\n    /**\n     * Unhook once the callback is called the first time.\n     * @default false\n     */\n    once: boolean\n  ): (() => void)\n};\n\ntype IdleAutoOptions = {\n  /**\n   * How long the window should be minimized before hibernating, in seconds.\n   * @default 5\n   */\n  timeMinimizedToHibernate?: number\n};\n\ntype IdleApi = {\n  /**\n   * Put the window into hibernation.\n   * Internally kills the browser to save the most resources possible. Loses page state.\n   */\n  hibernate(): Promise<void>,\n\n  /**\n   * Put the window to sleep.\n   * Uses a screenshot of the page instead of the actual page. Loses page state.\n   */\n  sleep(): Promise<void>,\n\n  /**\n   * Freeze the window.\n   * Keeps the page but halts most execution and background work. Keeps page state.\n   */\n  freeze(): Promise<void>,\n\n  /** Wake up the window from hibernation or sleep. */\n  wake(): Promise<void>,\n\n  /** Enable/disable automatic idle management, and set its options. */\n  auto(\n    /** Whether to use automatic idle management. */\n    enabled: boolean,\n\n    /** Set options for automatic behavior. */\n    options?: IdleAutoOptions\n  ): void\n};\n\ntype VersionInfo = {\n  /** Name of component. */\n  name: string,\n\n  /** Full version of component. */\n  version: string,\n\n  /** Major version of component as a number. */\n  major: number\n};\n\ntype BrowserVersions = {\n  /**\n   * Product (browser) version and name.\n   * @example\n   * Window.versions.product // { name: 'Chrome Canary', version: '111.0.5513.0', major: 111 }\n   */\n  product: VersionInfo,\n\n  /**\n   * Browser engine (Chromium/Firefox) version and name.\n   * @example\n   * Window.versions.engine // { name: 'chromium', version: '111.0.5513.0', major: 111 }\n   */\n  engine: VersionInfo,\n\n  /**\n   * JS engine (V8/SpiderMonkey) version and name.\n   * @example\n   * Window.versions.jsEngine // { name: 'v8', version: '11.1.86', major: 11 }\n   */\n  jsEngine: VersionInfo\n};\n\ntype WindowBounds = {\n  /** The offset from the left edge of the screen to the window in pixels. */\n  left?: number,\n\n  /** The offset from the top edge of the screen to the window in pixels. */\n  top?: number,\n\n  /** The window width in pixels. */\n  width?: number,\n\n  /** The window height in pixels. */\n  height?: number\n};\n\ntype ControlsApi = {\n  /** Minimize the browser window. */\n  minimize(): Promise<void>,\n\n  /**\n   * Maximize the browser window.\n   * Doesn't make the window appear (use show() before as well).\n   */\n  maximize(): Promise<void>,\n\n  /** Show (unminimize) the browser window and optionally set the bounds (position/size). */\n  show(\n    /** Set the bounds (position and/or size) of the browser window optionally as well. */\n    bounds?: WindowBounds\n  ): Promise<void>\n};\n\ntype CSSResource = {\n  /** Remove the CSS previously added from the current page and future page loads. */\n  remove(): Promise<void>,\n\n  /** Update the CSS previously added to new code given in the current page and future page loads. */\n  modify(newCode: string): Promise<void>\n};\n\ntype JSResource = {\n  /** Remove the JS previously added so it no longer executes in new page loads. */\n  remove(): Promise<void>\n};\n\ntype ResourcesApi = {\n  /** Inject CSS to the current page and future page loads (refresh, navigations, etc). */\n  css(code: string): Promise<CSSResource>,\n\n  /** Inject JS to the current page and future page loads (refresh, navigations, etc). */\n  js(code: string): Promise<JSResource>\n};\n\ntype Window = {\n  /** API for the page of the window. */\n  page: PageApi,\n\n  /** API for IPC. */\n  ipc: IPCApi,\n\n  /** API for manually using CDP with the browser. */\n  cdp: CDPApi,\n\n  /** API for injecting resources like CSS and JS. */\n  resources: ResourcesApi,\n\n  /**\n   * API for Gluon idle management (like hibernation). Chromium only.\n   * @experimental\n   */\n  idle: IdleApi,\n\n  /** Browser version info of the window: product (browser), engine (Chromium/Firefox), and JS engine (V8/SpiderMonkey). */\n  versions: BrowserVersions,\n\n  /** Control (minimize, maximize, etc) the browser window. */\n  controls: ControlsApi,\n\n  /**\n   * Interface with V8's Compilation Cache. Chromium only.\n   * @experimental\n   */\n  v8Cache: V8CacheApi,\n\n  /** Close the Gluon window. */\n  close(): void,\n\n  /** If the window has been closed or not. */\n  closed: boolean\n};\n\n\n/** A browser that Gluon supports. */\ntype Browser =\n  'chrome'|'chrome_beta'|'chrome_dev'|'chrome_canary'|\n  'chromium'|'chromium_snapshot'|\n  'edge'|'edge_beta'|'edge_dev'|'edge_canary'|\n  'firefox'|'firefox_nightly'|\n  'thorium'|\n  'librewolf';\n\n/** A browser engine that Gluon supports. */\ntype BrowserEngine = 'chromium'|'firefox';\n\n\n/** Additional options for opening */\ntype OpenOptions = {\n  /** Force Gluon to use a specific browser instead of automatically finding one itself. */\n  forceBrowser?: Browser,\n\n  /** Force Gluon to use a specific browser engine instead of automatically finding a browser itself. */\n  forceEngine?: BrowserEngine,\n\n  /** Size of Gluon window in [width, height]. */\n  windowSize?: [number, number],\n\n  /**\n   * Opt-in to allowing HTTP. Not recommended to use, always keep `false` where possible. Primarily to support custom localhost servers.\n   * Options:\n   * - `false`: HTTP is **completely disabled**. Recommended.\n   * - `mixed`: HTTP is **enabled for mixed content**, but not as window URL. **Not recommended.**\n   * - `true`: HTTP is **completely enabled**. **Not recommended.**\n   * @default false\n   */\n  allowHTTP?: false | 'mixed' | true,\n\n  /**\n   * Set what top-level navigation is allowed in the window.\n   * Options:\n   * - `false`: **No** navigation is allowed.\n   * - `same-origin`: Navigation is allowed **if the redirect URL is the same origin** (as the URL given to `open()`).\n   * - `true`: **All** navigation is allowed. **Not recommended.**\n   * @default 'same-origin'\n   */\n  allowNavigation?: false | 'same-origin' | true,\n\n  /**\n   * Set the Content Security Policy when using Local (giving open() a path).\n   * Defaults to allowing almost everything remote except dangerous parts like JS or frames (see detailed default value).\n   * Set to blank (`''`) to use no CSP, or provide your own to use (as a string).\n   * @default \"upgrade-insecure-requests; default-src 'self' 'unsafe-inline'; connect-src https: data: blob: 'unsafe-inline'; prefetch-src https: data: blob: 'unsafe-inline'; font-src https: data: blob: 'unsafe-inline'; img-src https: data: blob: 'unsafe-inline'; media-src https: data: blob: 'unsafe-inline'; style-src https: data: blob: 'unsafe-inline'; form-action https: data: blob: 'unsafe-inline'\"\n   */\n  localCSP?: string,\n\n  /**\n   * Whether DevTools (Ctrl+Shift+I etc) is enabled/disabled in the Gluon window. Enabled by default.\n   * @default true\n   */\n  devtools?: boolean,\n\n  /** Set a custom user agent for the browser engine to use. */\n  userAgent?: string,\n\n  /**\n   * Do not persist browser data in the regular data directory.\n   * @default false\n   */\n  incognito?: boolean,\n};\n\n/**\n * Open a new Gluon window.\n */\nexport function open(\n  /** URL to load in the window. */\n  url: string,\n\n  /** Additional options for opening. */\n  options: OpenOptions\n): Promise<Window>;\n\ntype Extension = {\n  /** Path to unpacked Chromium extension. */\n  chromium?: string | Promise<string>,\n\n  /** Path to Firefox extension as an XPI file, with the correct filename. */\n  firefox?: string | Promise<string>\n};\n\ntype ExtensionsAPI = {\n  /** Add browser extensions to be used when opening new Gluon windows. */\n  add(...extensions: Extension[]): void,\n\n  /** Remove browser extensions to be used when opening new Gluon windows. */\n  remove(...extensions: Extension[]): void,\n};\n\n/** Manage browser extensions to use. */\nexport const extensions: ExtensionsAPI;\n\ntype Link = {\n  href: string,\n  text: string\n};\n\ntype OpenAboutOptions = {\n  /** Name of the app to display. */\n  name: string,\n\n  /** URL icon of the app to use. */\n  icon: string,\n\n  /** Description of the app to display. Supports HTML. */\n  description?: string,\n\n  /** Version of the app to display. */\n  version?: string,\n\n  /** Links to display in the window. */\n  links?: Link[],\n\n  /** Gluon versions from a Window to display (Gluon, Node, Browser). */\n  gluonVersions?: BrowserVersions\n};\n\n/**\n * Open a new Gluon about window.\n */\nexport function openAbout(\n  /** Options for what to display in the about window. */\n  options: OpenAboutOptions\n): Promise<Window>;"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.59375,
          "content": "{\r\n  \"name\": \"@gluon-framework/gluon\",\r\n  \"version\": \"0.14.0\",\r\n  \"description\": \"Make websites into desktop apps with system installed browsers and NodeJS.\",\r\n  \"main\": \"src/index.js\",\r\n  \"types\": \"gluon.d.ts\",\r\n  \"scripts\": {},\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+https://github.com/gluon-framework/gluon.git\"\r\n  },\r\n  \"author\": \"Gluon Framework\",\r\n  \"license\": \"MIT\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/gluon-framework/gluon/issues\"\r\n  },\r\n  \"homepage\": \"https://github.com/gluon-framework/gluon#readme\",\r\n  \"type\": \"module\",\r\n  \"dependencies\": {\r\n    \"ws\": \"^8.11.0\"\r\n  }\r\n}"
        },
        {
          "name": "roadmap.md",
          "type": "blob",
          "size": 2.2939453125,
          "content": "# Gluon Roadmap\n\n> **Note** |\n> Want more info on some of these? Ask in [our Discord](https://discord.gg/RFtUCA8fST)!\n\n## Backlog\n- Shortcut (creation/deletion) API\n- Clipboard API\n- Custom protocol API\n- System tray API\n- Browser data (delete) API\n- Crash handling API\n- Log file\n- Automatically remember window position/size between starts (disableable)\n- Initial system tray API (Windows only for WIP)\n- Frameless windows (Windows only for WIP)\n- Hide window completely (Windows only for WIP)\n\n## v0.15.0\n- [ ] Revamped window controls API featuring getting info and events\n- [ ] Window position open option\n\n## v0.14.0\n- [X] Rewritten IPC for stability and speedup\n- [X] Resources API\n- [ ] Single instance lock API\n- [X] About window API\n- [X] Incognito open option\n- [X] User agent open option\n- [X] Disable DevTools open option\n- [X] Internal cleanup and rewriting\n\n## v0.13.0\n- [X] Browser extension API\n- [X] Security revamp:\n  - [X] Completely block HTTP (by default)\n  - [X] Add easy CSP options (with default) when using Local\n  - [X] Restrict navigation when using Local to Local only (by default)\n- [X] New small APIs:\n  - [X] `Window.page.printToPDF()`\n  - [X] `Window.closed`\n- [X] Typings improvements\n- [X] Cleaner exiting on browser or node exit\n- [X] More browsers added\n\n## v0.12.0\n- [X] Add new freezing API to Idle API\n- [X] Minor stability/edge-case improvements\n- [X] Local improvements\n- [X] Experimental V8 Cache API\n- [X] Massive startup time speedup (~1s -> ~0.4s)\n- [X] Tweak and add to Page API\n\n## v0.11.0\n- [X] Page title API\n- [X] Force browser open option\n- [X] Fix first run dialogs opening for Chromium\n- [X] Fix some IPC bugs\n- [X] Fix Firefox sometimes erroring out\n- [X] Fix Chromium first run dialog showing\n- [X] Error handling for Page.eval\n- [X] IPC Store API\n- [X] Massive reliability improvements\n- [X] New local file loading/handling API\n\n## v0.10.0\n- [X] Rewrite data path generation\n- [X] Rewrite browser path generation for Windows and add more browsers\n- [X] Clean up logging, minor internal cleanup/simplifying/rewriting\n- [X] IPC v2 (Expose API)\n- [X] Await page load API\n\n## v0.9.0\n- [X] Browser version info API\n- [X] Idle API v2\n- [X] Mac support\n- [X] Window controls API\n\n## v0.8.0\n- [X] Rewrite browser detection to support more setups\n- [X] Close API\n\n## v0.7.0\n- [X] Early Idle Window API"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}