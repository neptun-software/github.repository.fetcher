{
  "metadata": {
    "timestamp": 1736562047928,
    "page": 807,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "davidmarkclements/0x",
      "stars": 3289,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.11328125,
          "content": ".DS_Store\nnode_modules\n*.0x\n.__browserify_string_empty.js\nwin\npackage-lock.json\ntodo\n.vscode.nyc_output\n.nyc_output\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.13671875,
          "content": "node_modules\nprofile-*\n.__browserify_string_empty.js\nflamegraph.html\nexamples\ntest\ntodo\nwin\n0x-logo.png\n*.gif\n*.0x\ntodo\n.vscode\n.nyc_output\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.017578125,
          "content": "package-lock=false"
        },
        {
          "name": ".taprc",
          "type": "blob",
          "size": 0.0234375,
          "content": "coverage: false\njobs: 1\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1171875,
          "content": "language: node_js\nsudo: false\nnode_js:\n  - 8\n  - 10\n  - 11\n  - 12\n  - 14\nos:\n  - linux\n  - osx\nscript:\n  - npm run test\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.064453125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016-2018 David Mark Clements\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 4.0693359375,
          "content": "# v4.0.0\n* internal refactor\n* v8 prof is now the default method of stack collection\n* profile folders renamed to `{outputDir}/{name}.0x`\n* CLI: add `--kernel-tracing` option\n* CLI: removed `--svg` flag\n* CLI: removed `--gen` flag\n* CLI: removed `--timestamp-profiles` flag\n* CLI: removed `--theme` flag\n* CLI: removed `--include` flag\n* CLI: removed `--exclude | -x` flag\n* CLI: removed `--tiers | -t` flag\n* CLI: removed `--langs | -l` flag\n* CLI: renamed `--trace-info` to `--kernel-tracing-debug` flag\n* CLI: removed `--logging-output` flag\n* CLI: removed `--stacks-only` flag\n* CLI: removed `-d | --delay` flag\n* CLI: renamed `--json-stacks` to `--tree-debug` flag\n* UI: removed langs button\n* UI: removed theme button\n* UI: style changes, minor redesign\n* API: altered mapFrames API (frames is now an array of objects, not strings)  \n* UI: rename/reorganize type labels\n* UI: tier coloring improvements\n* UI: search improvements\n* UI: categorization improvements\n* API: removed `log` option\n* API: added `kernelTracing` option\n* API: removed `svg` option\n* API: removed `gen` option \n* API: removed `timestamp-profiles` option\n* API: removed `theme` option\n* API: removed `include` option\n* API: removed `exclude` option\n* API: removed `tiers` option\n* API: removed `langs` option\n* API: renamed `traceInfo` to `kernelTracingDebug` option\n* API: removed `loggingOutput` option \n* API: removed `stacksOnly` option\n* API: removed `delay` option \n* API: renamed `jsonStacks` to `treeDebug` option\n* CLI: enhanced status console output (can be overridden in API)\n* UI: added merging capability (v8 prof only)\n* UI: fully responsive\n* added capturing inline data along side v8 prof (\"inlinable\" functions)\n* profiling REPL no longer supported\n* support for eval'd code - appears under native frames\n* DOCS: readme changes to reflect API changes\n* DOCS: additional /docs folder for in depth topics\n* API: removed `quiet` (still part of CLI)\n* API: removed `silent` (still part of CLI)\n* API: removed `open` (still part of CLI)\n* CLI: add `--on-port` flag\n* API: add `onPort` option\n* CLI: removed `--phase` flag\n* API: removed `phase` option\n\n# v3.4.1\n* break out the ui and stack converter portions into separate modules: d3-fg and stacks-to-json-tree.\n\n# v3.4.0\n* introduce experimental `--prof-only` flag, generates flamegraph based on internal v8 profiling data, without performing kernel tracing at the same time (as `--prof-viz` does)\n\n# v3.3.0\n\n* introduce experimental `--prof-viz` flag, generates additional flamegraph based on internal v8 profiling data\n* linux fixes & tidy up\n\n# v3.2.0\n\n* introduce `--phase` option\n* change `--delay` from `300` to `0` - not a breaking change \nbecause `--phase` provides the same result (stripping module loading stacks) \nfar more reliably.\n\n# v3.1.0\n\n* enhance `--output-dir` option with interpolation feature\n* add `--output-html` option \n\n# v3.0.2\n\n* missing dep\n\n# v3.0.1\n\n* fix auto open functionality for linux (doesn't close browser on process exit)\n\n# v3.0.0\n\n* node 4 support dropped, node 6+ supported\n* changelog.md added\n* refactor\n* profile folder schema change `profile-{pid}` -> `{pid}.flamegraph`\n* `--timestamp-profiles` prefix instead of suffix `profile-{pid}-{timestamp}` -> `{timestamp}-{pid}.flamegraph`\n* programmatic API `require('0x')` and `require('0x/cmd')`\n* removed `--preview` option\n* remove `--command` option and changed `-c gen` to `--gen`\n* added `--json-stacks` option and no longer storing intermediate JSON by default\n* added alias to `-q`: `--quiet`\n* added `--silent` flag\n* added `--name` flag\n* added `--log-output` flag \n* added double dash syntax for nesting flags, e.g.: `0x -- node --zero-fill-buffers script.js`\n* `--node` flag removed â€“ now possible with new CLI syntax (`0x [flags] -- node [nodeFlags] script.js [scriptFlags]`)\n* `--node-options` removed â€“ now possible with new CLI syntax (`0x [flags] -- node [nodeFlags] script.js [scriptFlags]`)\n* CLI argument schema: unrecognized flags are now rejected\n* `0x` === `0x -h` (use `0x -- node` or `0x --` to profile repl)\n* `--stacks-only` removed, (use `--collect-only`)\n* add `--collect-only` and `--visualize-only`\n"
        },
        {
          "name": "cmd.js",
          "type": "blob",
          "size": 3.6064453125,
          "content": "#!/usr/bin/env node\n\nconst fs = require('fs')\nconst { join } = require('path')\nconst minimist = require('minimist')\nconst semver = require('semver')\nconst debug = require('debug')('0x')\nconst sll = require('single-line-log')\nconst launch = require('opn')\nconst hasUnicode = require('has-unicode')()\nconst zeroEks = semver.lt(process.version, '8.5.0') === true ? () => {} : require('./')\nconst { version } = require('./package.json')\n\nconst defaultBanner = `\n  0x ${version}\n\n  0x [flags] -- node [nodeFlags] script.js [scriptFlags]\n\n`\n\nif (module.parent === null) {\n  cmd(process.argv.slice(2)).catch((err) => {\n    err.message = hasUnicode ? `\\nðŸš«  ${err.message}` : `\\n${err.message}`\n    console.error(err)\n    debug(err)\n    process.exit(err.code || 1)\n  })\n} else {\n  module.exports = cmd\n}\n\nasync function cmd (argv, banner = defaultBanner) {\n  if (semver.lt(process.version, '8.5.0') === true) {\n    throw Error(\n      `Node version unsupported. Current Node version is ${process.version}\\n` +\n      'Support extends from Node 8.5.0 and above.\\n\\n' +\n      '  npm i -g 0x@3 for Node 6.x.x â€“ 8.4.0\\n' +\n      '  npm i -g 0x@2 for Node 4\\n'\n    )\n  }\n\n  const args = minimist(argv, {\n    stopEarly: true,\n    '--': true,\n    boolean: [\n      'open', 'version', 'help', 'quiet',\n      'silent', 'treeDebug', 'kernelTracingDebug',\n      'kernelTracing', 'collectOnly', 'writeTicks'\n    ],\n    alias: {\n      silent: 's',\n      quiet: 'q',\n      open: 'o',\n      'output-dir': 'outputDir',\n      D: 'outputDir',\n      'output-html': 'outputHtml',\n      F: 'outputHtml',\n      version: 'v',\n      help: 'h',\n      visualizeOnly: 'visualize-only',\n      visualizeCpuProfile: 'visualize-cpu-profile',\n      collectOnly: 'collect-only',\n      collectDelay: 'collect-delay',\n      kernelTracing: 'kernel-tracing',\n      kernelTracingDebug: 'kernel-tracing-debug',\n      treeDebug: 'tree-debug',\n      writeTicks: 'write-ticks',\n      onPort: 'on-port',\n      P: 'onPort'\n    }\n  })\n\n  if (args.help || argv.length === 0) {\n    process.stdout.write(banner)\n    return fs.createReadStream(join(__dirname, 'usage.txt')).pipe(process.stdout)\n  }\n\n  if (args.version) {\n    return console.log(`0x ${version}`)\n  }\n\n  const status = createStatus(args)\n  const { pathToNodeBinary, subprocessArgv } = parseSubprocessCommand(args)\n\n  args.workingDir = process.cwd()\n  args.status = status\n  args.argv = subprocessArgv\n  args.pathToNodeBinary = pathToNodeBinary\n\n  if (args.visualizeOnly) {\n    status(`Creating flamegraph from ${args.visualizeOnly}`)\n  }\n\n  if (args.visualizeCpuProfile) {\n    status(`Creating flamegraph from v8 profile ${args.visualizeCpuProfile}`)\n  }\n\n  const assetPath = await zeroEks(args)\n\n  if (args.collectOnly) {\n    status(`Stats collected in folder file://${assetPath}\\n`)\n  } else {\n    status(`Flamegraph generated in\\n${assetPath}\\n`)\n    if (args.open) {\n      launch(assetPath, { wait: false })\n    }\n  }\n\n  return assetPath\n}\n\nfunction parseSubprocessCommand (args) {\n  const dashDash = args['--']\n  let pathToNodeBinary = process.argv[0]\n  let subprocessArgv = args._\n\n  if (dashDash.length !== 0) {\n    const dashEntry = dashDash[0][0]\n    if (dashEntry === '-') {\n      throw Error(\n        'The node binary must immediately follow double dash (--)\\n' +\n        '0x [flags] -- node [nodeFlags] script.js [scriptFlags]'\n      )\n    }\n    pathToNodeBinary = dashDash[0]\n    dashDash.shift()\n    subprocessArgv = dashDash\n  }\n  return { pathToNodeBinary, subprocessArgv }\n}\n\nfunction createStatus ({ silent, quiet }) {\n  if (quiet || silent) {\n    return () => {}\n  }\n  const status = sll(process.stderr)\n  return hasUnicode ? (s) => status(`ðŸ”¥  ${s}`) : status\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 5.58984375,
          "content": "'use strict'\n\nconst { linux, v8 } = require('./platform')\nconst debug = require('debug')('0x')\nconst { join, isAbsolute, relative, dirname } = require('path')\nconst fs = require('fs')\nconst validate = require('./lib/validate')(require('./schema.json'))\nconst traceStacksToTicks = require('./lib/trace-stacks-to-ticks')\nconst v8LogToTicks = require('./lib/v8-log-to-ticks')\nconst ticksToTree = require('./lib/ticks-to-tree')\nconst render = require('./lib/render')\nconst { pathTo } = require('./lib/util')\n\nconst platform = process.platform\nconst { tidy, noop, isSudo } = require('./lib/util')\n\nmodule.exports = zeroEks\n\nasync function zeroEks (args) {\n  args.name = args.name || 'flamegraph'\n  args.onProcessExit = args.onProcessExit || noop\n  args.status = args.status || noop\n  args.pathToNodeBinary = args.pathToNodeBinary || process.execPath\n  if (args.pathToNodeBinary === 'node') {\n    args.pathToNodeBinary = pathTo('node')\n  }\n\n  args.collectDelay = args.collectDelay || 0\n\n  validate(args)\n  const { collectOnly, visualizeOnly, writeTicks, treeDebug, mapFrames, visualizeCpuProfile, collectDelay } = args\n\n  let incompatibleOptions = 0\n  if (collectOnly) incompatibleOptions += 1\n  if (visualizeOnly) incompatibleOptions += 1\n  if (visualizeCpuProfile) incompatibleOptions += 1\n\n  if (incompatibleOptions > 1) {\n    throw Error('Only one of \"collect only\", \"visualize only\", \"visualize cpu profile\" can be used')\n  }\n\n  if (visualizeOnly) return visualize(args)\n  if (visualizeCpuProfile) return cpuProfileVisualization(args)\n\n  args.title = args.title || `node ${args.argv.join(' ')}`\n  const { ticks, pid, folder, inlined } = await startProcessAndCollectTraceData(args)\n\n  if (treeDebug === true) {\n    const tree = await ticksToTree(ticks, {\n      mapFrames, inlined, pathToNodeBinary: args.pathToNodeBinary\n    })\n    fs.writeFileSync(`${folder}/stacks.${pid}.json`, JSON.stringify(tree, 0, 2))\n  }\n\n  if (writeTicks) {\n    fs.writeFileSync(`${folder}/ticks.json`, JSON.stringify(ticks))\n  }\n\n  fs.writeFileSync(`${folder}/meta.json`, JSON.stringify({ ...args, inlined }))\n\n  if (collectOnly === true) {\n    debug('collect-only mode bailing on rendering')\n    tidy()\n    debug('done')\n    return folder\n  }\n\n  if (collectDelay) {\n    debug('data collection will be delayed by ' + collectDelay + ' ms')\n  }\n\n  try {\n    const file = generateFlamegraph({ ...args, ticks, inlined, pid, folder })\n    return file\n  } catch (err) {\n    tidy()\n    throw err\n  }\n}\n\nasync function startProcessAndCollectTraceData (args) {\n  if (!Array.isArray(args.argv)) {\n    throw Error('argv option is required')\n  }\n  args.name = args.name || 'flamegraph'\n\n  switch (args.kernelTracing ? platform : 'v8') {\n    case 'v8': return v8(args).catch((err) => {\n      const logFilePath = join(args.workingDir, v8.getIsolateLog(args.workingDir, args.pid))\n      let message = 'Fatal error in process observed by 0x. Incomplete V8 isolate log '\n\n      if (process.env.DEBUG && process.env.DEBUG.includes('0x')) {\n        message += `is readable for debugging at ${logFilePath}`\n      } else {\n        fs.unlinkSync(logFilePath)\n        message += 'deleted. To preserve these logs, enable debugging (e.g. `DEBUG=0x* 0x my-app.js`)'\n      }\n\n      if (!args.quiet && !args.silent) console.warn(message)\n      throw err\n    })\n    case 'linux': return linux(args, await isSudo())\n    default:\n      throw Error(`0x: ${platform} kernel tracing is not currently supported`)\n  }\n}\n\nasync function generateFlamegraph (opts) {\n  const file = await render(opts)\n  tidy()\n  return file\n}\n\nfunction getFolder (file, workingDir) {\n  return isAbsolute(file)\n    ? relative(workingDir, file)\n    : file\n}\n\nasync function cpuProfileVisualization (opts) {\n  const folder = dirname(opts.visualizeCpuProfile)\n  const file = await render({ ...opts, folder })\n  return file\n}\n\nasync function visualize ({ visualizeOnly, treeDebug, workingDir, title, mapFrames, open, name, pathToNodeBinary, collectDelay }) {\n  try {\n    const folder = getFolder(visualizeOnly, workingDir)\n    const ls = fs.readdirSync(folder)\n    const traceFile = /^stacks\\.(.*)\\.out$/\n    const isolateLog = /^isolate-((?:0x)?[0-9A-Fa-f]{2,16})(?:-\\d*)?-(\\d*)-v8\\.(log|json)$/\n    const stacks = ls.find((f) => isolateLog.test(f) || traceFile.test(f))\n    if (!stacks) {\n      throw Error('Invalid data path provided (no stacks or v8 log file found)')\n    }\n\n    let meta\n    try {\n      meta = JSON.parse(fs.readFileSync(join(folder, 'meta.json')))\n    } catch (e) {\n      meta = {}\n      debug(e)\n    }\n\n    const srcType = isolateLog.test(stacks) ? 'v8' : 'kernel-tracing'\n    const rx = (srcType === 'v8') ? isolateLog : traceFile\n    const pid = rx.exec(stacks)[srcType === 'v8' ? 2 : 1]\n    const { inlined } = meta\n    const src = join(folder, stacks)\n    title = title || meta.title\n    name = name || meta.name\n\n    const ticks = (srcType === 'v8')\n      ? await v8LogToTicks(src, { pathToNodeBinary, collectDelay })\n      : traceStacksToTicks(src)\n\n    if (treeDebug === true) {\n      const tree = await ticksToTree(ticks, {\n        mapFrames, inlined, pathToNodeBinary\n      })\n      fs.writeFileSync(`${folder}/stacks.${pid}.json`, JSON.stringify(tree, 0, 2))\n    }\n\n    const file = await generateFlamegraph({\n      visualizeOnly,\n      treeDebug,\n      workingDir,\n      title,\n      name,\n      mapFrames,\n      open,\n      ticks,\n      inlined,\n      pid,\n      folder,\n      pathToNodeBinary\n    })\n\n    return file\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      throw Error('Invalid data path provided (unable to access/does not exist)')\n    }\n    if (e.code === 'ENOTDIR') {\n      throw Error('Invalid data path provided (not a directory)')\n    }\n    throw e\n  }\n}\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.646484375,
          "content": "{\n  \"name\": \"0x\",\n  \"version\": \"5.8.0\",\n  \"description\": \"ðŸ”¥ single-command flamegraph profiling ðŸ”¥\",\n  \"main\": \"index.js\",\n  \"bin\": \"./cmd.js\",\n  \"scripts\": {\n    \"test\": \"npm run lint && tap test/*.test.js\",\n    \"stress-rest-example\": \"cd examples/rest-api && npm test\",\n    \"start\": \"./cmd.js --on-port 'npm run stress-rest-example' -- node examples/rest-api\",\n    \"lint\": \"standard --fix | snazzy\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/davidmarkclements/0x.git\"\n  },\n  \"author\": \"David Mark Clements\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">=8.5.0\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/davidmarkclements/0x/issues\"\n  },\n  \"homepage\": \"https://github.com/davidmarkclements/0x#readme\",\n  \"dependencies\": {\n    \"ajv\": \"^8.8.2\",\n    \"browserify\": \"^17.0.0\",\n    \"concat-stream\": \"^2.0.0\",\n    \"d3-fg\": \"^6.14.0\",\n    \"debounce\": \"^1.2.0\",\n    \"debug\": \"^4.1.1\",\n    \"end-of-stream\": \"^1.1.0\",\n    \"env-string\": \"^1.0.0\",\n    \"escape-string-regexp\": \"^4.0.0\",\n    \"execspawn\": \"^1.0.1\",\n    \"fs-extra\": \"^10.1.0\",\n    \"has-unicode\": \"^2.0.1\",\n    \"hsl-to-rgb-for-reals\": \"^1.1.0\",\n    \"jsonstream2\": \"^3.0.0\",\n    \"make-dir\": \"^3.1.0\",\n    \"minimist\": \"^1.2.0\",\n    \"morphdom\": \"^2.3.3\",\n    \"nanohtml\": \"^1.4.0\",\n    \"on-net-listen\": \"^1.1.0\",\n    \"opn\": \"^5.4.0\",\n    \"pump\": \"^3.0.0\",\n    \"pumpify\": \"^2.0.1\",\n    \"semver\": \"^7.3.5\",\n    \"single-line-log\": \"^1.0.1\",\n    \"split2\": \"^4.0.0\",\n    \"tachyons\": \"^4.9.1\",\n    \"through2\": \"^4.0.0\",\n    \"which\": \"^2.0.2\"\n  },\n  \"devDependencies\": {\n    \"rimraf\": \"^3.0.2\",\n    \"snazzy\": \"^9.0.0\",\n    \"standard\": \"^16.0.0\",\n    \"tap\": \"^15.0.0\"\n  },\n  \"browserify-shim\": {}\n}\n"
        },
        {
          "name": "platform",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 8.1962890625,
          "content": "# 0x\n\n<img alt=0x src=assets/0x-logo.png width=350>\n\nðŸ”¥ single-command flamegraph profiling ðŸ”¥\n\nDiscover the bottlenecks and hot paths in your code, with flamegraphs.\n\n## Visualize Stack Traces\n\n`0x` can profile and generate an interactive flamegraph for a Node process with a single command,\non any platform which Node runs on (macOs, Linux, Windows, Android...).\n\n## Support\n\n* Node v12.x and above\n* Default usage supports any Operating System that Node runs on!\n* Chrome\n  * Other browsers may open flamegraphs in a degraded, but functional form\n\n## Demo\n\nAn example interactive flamegraph can be viewed at <http://davidmarkclements.github.io/0x-demo/>\n\n## Install\n\n```sh\nnpm install -g 0x\n```\n\n## Usage\n\nUse `0x` to run a script:\n\n```sh\n0x my-app.js\n```\n\nImmediately open the flamegraph in the browser:\n\n```sh\n0x -o my-app.js\n```\n\nAutomatically execute profiling command against the first\nport opened by profiled process:\n\n```sh\n0x -P 'autocannon localhost:$PORT' my-app.js\n```\n\nUse a custom node executable:\n\n```sh\n0x -- /path/to/node my-app.js\n```\n\nPass custom arguments to node:\n\n```sh\n0x -- node --zero-fill-buffers my-app.js\n```\n\n> for pwsh users, switch to CMD at first or run with `npx` \n> \n```\nnpx 0x -o my-app.js\n```\n\n## Generating\n\nWhen ready to generate a flamegraph, send a SIGINT or a SIGTERM.\n\nThe simplest way to do this is pressing CTRL+C.\n\nWhen `0x` catches the SIGINT or the SIGTERM, it process the stacks and\ngenerates a profile folder (`<pid>.0x`), containing `flamegraph.html`.\n\n## The UI\n\nThe `flamegraph.html` file contains the 0x UI, which is explained in\n[docs/ui.md](docs/ui.md).\n\n## Production Servers\n\nA lightweight, production server friendly, approach to generating a\nflamegraph is described in [docs/production-servers.md](docs/production-servers.md).\n\n## The Profile Folder\n\nBy default, a Profile Folder will be created and named after the PID, e.g.\n`3866.0x` (we can set this name manually using the `--output-dir` flag).\n\nThe Profile Folder is explained in more detail in [docs/profile-folder.md](docs/profile-folder.md)\n\n## Example\n\nClone this repo, run `npm i -g` and from the repo root run\n\n```sh\n0x examples/rest-api\n```\n\nIn another tab run\n\n```sh\nnpm run stress-rest-example\n```\n\nTo put some load on the rest server, once that's done\nuse ctrl + c to kill the server.\n\n## Command Line API\n\n### --help | -h\n\nPrint usage info.\n\n### --open | -o\n\nOpen the flamegraph in the browser using `open` or `xdg-open` (see\nhttps://www.npmjs.com/package/open for details).\n\n### --on-port | -P\n\nRun a given command and then generate the flamegraph.\nThe command as specified has access to a `$PORT` variable.\nThe `$PORT` variable is set according to the first port that\nprofiled process opens.\n\nFor instance, here's an example of using [autocannon](http://npm.im/autocannon)\nto load-test the process:\n\n```sh\n0x -P 'autocannon localhost:$PORT' app.js\n```\n\nWhen the load-test completes, the profiled processed will be\nsent a SIGINT and the flamegraph will be automatically generated.\n\nRemember to use single quotes to avoid bash interpolation,\nor else escape variable (e.g. `0x -P \"autocannon localhost:$PORT\" app.js`\nwon't work wheras `0x -P \"autocannon localhost:\\$PORT\" app.js` will).\n\nNote: On Windows interpolation usually occurs with `%PORT%`, however\nin this case the dollar-prefix `$PORT` is the correct syntax\n(because the interpolation is not shell based).\n\nDefault: ''\n\n### --name\n\nThe name of the HTML file, without the .html extension\nCan be set to - to write HTML to STDOUT (note\ndue to the nature of CLI argument parsing, this must be set using `=`,\ne.g. `--name=-`).\n\nIf either this flag or `--output-html-file` is set to `-`\nthen the HTML will go to STDOUT.\n\nDefault: flamegraph\n\n### ---title\n\nSet the title to display in the flamegraph UI.\n\nDefault: the command that 0x ran to start the process\n\n### --output-dir | -D\n\nSpecify artifact output directory. This can be specified in template\nform with possible variables being `{pid}`, `{timestamp}`, `{name}`\n(based on the `--name` flag) and `{outputDir}`(variables\nmust be specified without whitespace, e.g. `{ pid }` is not supported).\n\nDefault: `{pid}.0x`\n\n### --output-html | -F\n\nSpecify destination of the generated flamegraph HTML file.\nThis can be specified in template form with possible variables\nbeing `{pid}`, `{timestamp}`, `{name}` (based on the `--name` flag) and\n`{outputDir}` (variables must be specified without whitespace,\ne.g. `{ pid }` is not supported). It can also be set to `-` to\nsend the HTML output to STDOUT (note\ndue to the nature of CLI argument parsing, this must be set using `=`,\ne.g. `--output-html=-`).\n\nIf either this flag or `--name` is set to `-`\nthen the HTML will go to STDOUT.\n\nDefault: `{outputDir}/{name}.html`\n\n### --kernel-tracing\n\nUse an OS kernel tracing tool (perf on Linux). This will capture\nnative stack frames (C++ modules and Libuv I/O),\nbut may result in missing stacks from Node.js due to the optimizing compiler.\n\nSee [docs/kernel-tracing.md](docs/kernel-tracing.md) for more information.\n\nDefault: false\n\n### --quiet | -q\n\nLimit output, the only output will be fatal errors or\nthe path to the `flamegraph.html` upon successful generation.\n\nDefault: false\n\n### --silent | -s\n\nSuppress all output, except fatal errors.\n\nDefault: false\n\n### --collect-only\n\nDon't generate the flamegraph, only create the Profile Folder,\nwith relevant outputs.\n\nDefault: false\n\n### --collect-delay\n\nDelay the collection of stacks by a specified time(ms) relative to the first entry.\n\nDefault: 0\n\n### --visualize-only\n\nSupply a path to a profile folder to build or rebuild visualization\nfrom original stacks.\n\nDefault: undefined\n\n### --visualize-cpu-profile\n\nSupply a path to a CPU profile (`.cpuprofile`). See `examples/cpu-profile` for examples.\n\n[CPU Profile](https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution) output does not have as much information but it can be exported from Chrome Devtools in the browser. There's also an automated headless tool for doing so: [automated-chrome-profiling](https://github.com/paulirish/automated-chrome-profiling). For creating Node.js Cpu Profiles in Node see [v8-profiler](https://github.com/node-inspector/v8-profiler) or [v8-profiler-next](https://github.com/hyj1991/v8-profiler-next). They can also be generated from Node.js 12 and above using the command-line flag [`--cpu-prof`](https://github.com/nodejs/node/commit/e0e308448240260c207958dfc3dd9245d903af85).\n\nDefault: undefined\n\n### --kernel-tracing-debug\n\nShow output from perf(1) tools.\n\nDefault: false\n\n### --tree-debug\n\nSave the intermediate tree representation of captured trace output to a JSON\nfile.\n\nDefault: false\n\n## Programmatic API\n\n0x can also be required as a Node module and scripted:\n\n```js\nconst zeroEks = require('0x')\nconst path = require('path')\n\nasync function capture () {\n  const opts = {\n    argv: [path.join(__dirname, 'my-app.js'), '--my-flag', '\"value for my flag\"'],\n    workingDir: __dirname\n  }\n  try {\n    const file = await zeroEks(opts)\n    console.log(`flamegraph in ${file}`)\n  } catch (e) {\n    console.error(e)\n  }\n}\n\ncapture()\n\n```\n\nThe Programmatic API is detailed in [docs/api.md](docs/api.md).\n\n## Troubleshooting\n\n### Memory Issues\n\nVery complex applications with lots of stacks may hit memory issues.\n\nThe `--stack-size` flag can be used to set the memory to the maximum 8GB\nin order to work around this when profiling:\n\n```\nnode --stack-size=8024 $(which 0x) my-app.js\n```\n\nThere may still be a problem opening the flamegraph in Chrome. The same work\naround can be used by opening Chrome from the command line (platform dependent)\nand nesting the `--stack-size` flag within the `--js-flags` flag:\n`--js-flags=\"--stack-size 8024\"`.\n\n## Debugging\n\n`DEBUG=0x* 0x my-app.js`\n\n## Alternatives\n\n* <https://github.com/brendangregg/FlameGraph> (perl)\n* <https://www.npmjs.com/package/stackvis> (node)\n* <https://www.npmjs.com/package/d3-flame-graph> (node)\n\n## Acknowledgements\n\nSponsored by [nearForm](http://nearform.com)\n\nThis tool is inspired from various info and code sources\nand would have taken much longer without the following people and\ntheir Open Source/Info Sharing efforts:\n\n* Thorsten Lorenz (<http://thlorenz.com/>)\n* Dave Pacheco (<http://dtrace.org/blogs/dap/about/>)\n* Brendan Gregg (<http://www.brendangregg.com/>)\n* Martin Spier (<http://martinspier.io/>)\n\n## License\n\nMIT\n"
        },
        {
          "name": "schema.json",
          "type": "blob",
          "size": 2.158203125,
          "content": "{\n  \"type\": \"object\",\n  \"additionalProperties\": false,\n  \"properties\": {\n    \"_\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"open\": {\n      \"type\": \"boolean\"\n    },\n    \"o\": {\n      \"type\": \"boolean\"\n    },\n    \"version\": {\n      \"type\": \"boolean\"\n    },\n    \"v\": {\n      \"type\": \"boolean\"\n    },\n    \"help\": {\n      \"type\": \"boolean\"\n    },\n    \"h\": {\n      \"type\": \"boolean\"\n    },\n    \"quiet\": {\n      \"type\": \"boolean\"\n    },\n    \"q\": {\n      \"type\": \"boolean\"\n    },\n    \"silent\": {\n      \"type\": \"boolean\"\n    },\n    \"s\": {\n      \"type\": \"boolean\"\n    },\n    \"writeTicks\": {\n      \"type\": \"boolean\"\n    },\n    \"write-ticks\": {\n      \"type\": \"boolean\"\n    },\n    \"treeDebug\": {\n      \"type\": \"boolean\"\n    },\n    \"tree-debug\": {\n      \"type\": \"boolean\"\n    },\n    \"D\": {\n      \"type\": \"string\"\n    },\n    \"output-dir\": {\n      \"type\": \"string\"\n    },\n    \"outputDir\": {\n      \"type\": \"string\"\n    },\n    \"output-html\": {\n      \"type\": \"string\"\n    },\n    \"outputHtml\": {\n      \"type\": \"string\"\n    },\n    \"F\": {\n      \"type\": \"string\"\n    },\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"visualize-only\": {\n      \"type\": \"string\"\n    },\n    \"visualizeOnly\": {\n      \"type\": \"string\"\n    },\n    \"visualize-cpu-profile\": {\n      \"type\": \"string\"\n    },\n    \"visualizeCpuProfile\": {\n      \"type\": \"string\"\n    },\n    \"collect-only\": {\n      \"type\": \"boolean\"\n    },\n    \"collectOnly\": {\n      \"type\": \"boolean\"\n    },\n    \"on-port\": {\n      \"type\": \"string\"\n    },\n    \"onPort\": {\n      \"type\": \"string\"\n    },\n    \"P\": {\n      \"type\": \"string\"\n    },\n    \"collect-delay\": {\n      \"type\": \"number\"\n    },\n    \"collectDelay\": {\n      \"type\": \"number\"\n    },\n     \"kernelTracing\": {\n      \"type\": \"boolean\"\n    },\n    \"kernel-tracing\": {\n      \"type\": \"boolean\"\n    },\n    \"kernelTracingDebug\": {\n      \"type\": \"boolean\"\n    },\n    \"kernel-tracing-debug\": {\n      \"type\": \"boolean\"\n    },\n    \"pathToNodeBinary\": {},\n    \"path-to-node-binary\": {},\n    \"status\": {},\n    \"--\": {\n      \"type\": \"array\",\n      \"items\": {}\n    },\n    \"argv\": {\n      \"type\": \"array\",\n      \"items\": {}\n    },\n    \"onProcessExit\": {}\n  }\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "usage.txt",
          "type": "blob",
          "size": 3.62109375,
          "content": "  --open | -o             Automatically open after finishing\n\n                          Default: false\n\n  --on-port | -P          Run a given command and then generate\n                          the flamegraph. The command as specified\n                          has access to a $PORT variable.\n                          The $PORT variable is set according\n                          to the first port that profiled process\n                          opens.\n\n                          Example:\n                          0x -P 'autocannon localhost:$PORT' app.js\n\n                          Note: Remember to use single quotes or else\n                          escape the $PORT variable.\n\n                          Default: ''\n\n\n  -q | --quiet            Only output flamegraph URI, and fatal errors.\n\n                          Default: false\n\n  -s | --silent           Complete silence, 0x will not output anything,\n                          other than fatal errors.\n\n                          Default: false\n\n  --kernel-tracing        Use an OS kernel tracing tool (perf on Linux or\n                          dtrace on macOs and Solaris). This will capture\n                          native stack frames (C++ modules and Libuv I/O),\n                          but may result in missing stacks on Node 8.\n\n                          Default: false\n\n\n\n  --output-dir | -D       Specify artifact output directory.\n                          Template variables {outputDir}, {pid}, {timestamp}, {cwd}\n                          (current working directory) and {name}\n                          (based on the --name flag) are supported.\n\n                          Default: '{pid}.0x'\n\n  --output-html | -F      Specify destination path for the flamegraph HTML file.\n                          Template variables {outputDir}, {pid}, {timestamp}, {cwd}\n                          (current working directory) and {name}\n                          (based on the --name flag) are supported.\n                          May also be set to - to send HTML file to STDOUT (note\n                          due to the nature of CLI argument parsing, this must be\n                          set using =, e.g. --output-html=-).\n\n                          If either this flag or --name is set to - then the HTML\n                          will go to STDOUT.\n\n   Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Default: '{outputDir}/{name}.html'\n\n  --kernel-tracing-debug  Show output from dtrace or perf tools.\n\n                          Default: false\n\n  --tree-debug            Output a JSON file of stacks as {outputDir}/stacks.{pid}.json\n\n                          Default: false\n\n  --collect-only          Do not process captured stacks into a flamegraph.\n\n  --collect-delay         Specify a delay(ms) before collecting data.\n\n\n  --visualize-only <dir>  Build or rebuild flamegraph using the output dir.\n                          Counterpart to --collect-only.\n\n  --visualize-cpu-profile Visualize a .cpuprofile file. See examples at\n                          `examples/cpu-profile`.\n\n  --name                  The name of the HTML file, without the .html extension\n                          Can be set to - to write HTML to STDOUT (note\n                          due to the nature of CLI argument parsing, this must\n                          be set using =, e.g. --name=-)\n\n                          If either this flag or --output-html is set to -\n                          then the HTML will go to STDOUT.\n\n                          Default: flamegraph\n\n  --title                 Set the title to display in the flamegraph UI\n\n                          Default: node [nodeFlags] script.js\n\n  -v | --version          Output the 0x version\n\n"
        },
        {
          "name": "visualizer",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}