{
  "metadata": {
    "timestamp": 1736561819560,
    "page": 475,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "creationix/js-git",
      "stars": 3835,
      "defaultBranch": "master",
      "files": [
        {
          "name": "BACKERS-2.md",
          "type": "blob",
          "size": 2.2265625,
          "content": "# BountySource Backers\n\nAfter the successful KickStarter, I decided to do a second fundraiser so that I could continue working on js-git.  This was done as a [bountysource fundraiser][].  These are the people that contributed there. (Many were repeat contributers)\n\n## Innovation Enabler\n\n> At this level of support, you are truly enabling open development.  I assume you are backing on behalf of a company who can use js-git.  I'll send you a small pack of stickers and a few t-shirts.\n>\n>Also, for being so awesome, I can fly out to visit your team to discuss how to integrate js-git once it's usable (US only unless you help cover costs).\n\n - Mozilla <https://www.mozilla.org>\n\n## Heavy Backer\n\n> For committing to back a substantial amount of the project, I'll send you stickers, tshirts.\n>\n> Also I'll list you in BACKERS-2.md with your name, url, and short blurb.\n\n - Adobe <http://www.adobe.com/>\n\n## Supporter\n\n> For backing this project we'll send you a js-git laptop sticker so you can show your support to the world.\n>\n>Also you will be listed in BACKERS-2.md for all history to see.\n\n - jden\n - othiym23\n - chrisjpowers\n - JohnSz\n - sindresorhus\n - aeby\n - maks\n - julien51\n - mofoghlu\n - JPBarringer\n - jeffslofish\n\n## Basic Supporter\n\n> Your name will be listed in BACKERS-2.md in the main source tree of js-git.\n\n - servergrove\n - bluntworks\n - pdillon\n - pizzapanther\n - nschneble\n - Ohad Assulin\n - oxy\n - lettertwo\n - tmcw\n - joeandaverde\n - airportyh\n - nathanathan\n - signalwerk\n - ripta\n - vaughan\n - neilk\n - mikehenrty\n - vardump\n - Peter Burns\n - blittle\n - Stefan Stoichev\n - amaxwell01\n - dannyfritz\n - George V. Reilly\n - euforic\n - gflarity\n - generalhenry\n - piredman\n - Rebecca\n - st-luke\n - asafy\n - alessioalex\n - sergi\n - diversario\n - seriema\n - desaintmartin\n - DinisCruz\n - gotcha\n - nikolay\n - saintedlama\n - begebot\n - jbarratt\n - mikaelkaron\n - colinscroggins\n - Eric Elliott\n - owenb\n - balupton\n - fjakobs\n - romainhuet\n - angelyordanov\n - cscott\n - ilsken\n\n## Anonymous Supporters\n\nThere were also 33 other people who didn't claim any level of reward but contributed to the fundraiser.  Some as much as $500 from individuals.  Thank you all for the support.\n\n[bountysource fundraiser]: https://www.bountysource.com/fundraisers/325-js-git\n"
        },
        {
          "name": "BACKERS.md",
          "type": "blob",
          "size": 7.9189453125,
          "content": "# Kickstarter Backers\n\nOriginally JS-Git started at a [kickstarter project][].  This was to enable me to spend the time required to get the project off the ground.  These are the people who contributed to this fund raiser and wanted to be listed at backers.\n\n## Deep Backer\n\n> You really wish this project existed and probably derive some sort of commercial value out of its existence. If you're within the continental United States. I'll come to your company and spend a day helping you integrate the library into your project. Your name, url, and short blurb will be in the BACKERS.md file for all history to see.\n\n - Mozilla <https://www.mozilla.org>\n\n## Open Web Warrior\n\n> You believe in enabling the web platform and put your money where your mouth is. To reward your generosity, I'll give personal assistance to you or your company integrating the library into your project. This can be up to an hour of video chat or several email/chat sessions. You will get a sheet of laptop stickers and your name, and optional url will be in the BACKERS.md file for all history to see.\n\n - Michael Bradley <https://github.com/michaelsbradleyjr>\n - Scott González <http://scottgonzalez.com>\n - Paolo Fragomeni <http://github.com/hij1nx>\n - nearForm <http://www.nearform.com>\n - Dav Glass <http://github.com/davglass>\n - For Journalism\n - Jason Walsh <http://wal.sh/>\n - Meryn Stol <http://stellarpad.com/>\n - P77B Inc. <http://p77b.com/>\n - Boris Bokowski <http://callbyvalue.com/>\n - ProjectLocker <http://www.projectlocker.com>\n - Frank Gerhardt <www.gerhardtinformatics.com>\n - Mathieu Lorber <http://mlorber.net/>\n - Stefan Poggenpohl <http://www.poggie.de>\n - Dj Gilcrease http://www.kanbansolutions.com/\n - John Szwaronek\n - Pace Willisson\n - Oni Labs <http://onilabs.com>\n - O'Reilly Media <http://www.oreilly.com>\n - Peter Harkins\n - http://durandaljs.com/\n - http://www.linkedin.com/pub/iain-cooke/5/226/64a/\n - Reuben Katz\n\n## Code Backer\n\n> Chris decided to back with code and had been immensely helpful in getting this project started.  I sent him a pack of stickers as reward.\n\n - Chris Dickinson <https://github.com/chrisdickinson/>\n\n## Believer\n\n> You believe this project is important and want to enable me to create it. I'll send you a vinyl laptop sticker with the awesome JSGit logo on it so you can show off your support. Your name will be in the BACKERS.md file for all history to see.\n\n - Luke Arduini\n - garza\n - Maciej Małecki\n - LJHarb (Jordan Harband)\n - Joel Hillacre\n - Sean Dunn\n - Anthony Blardo\n - Luke Karrys\n - Jonathan Lonowski\n - Joey Schluchter\n - Henry Allen-Tilford\n - Brett Stimmerman\n - natevw\n - Norman Jaffe\n - Zannalov\n - Brian Ford\n - Tom Wilson\n - Jonas S Almeida\n - Geir Gåsodden\n - Breck Yunits\n - Dmitrii Soltys\n - Greg Price\n - C. Scott Ananian\n - Donovan Sandey\n - John Frizelle\n - Sureshot Saddletrousers\n - Karl Tiedt\n - Matthew Robb\n - Kristofor Carle\n - Stubbornella\n - Dan Herbert\n - Chris Jaure (@chrisjaure)\n - Ben Adida\n - Jon Buckley\n - roxstyle\n - Endre Stølsvik\n - Irakli Gozalishvili\n - Matt Weagle\n - Lon Ingram\n - Mitch Skinner\n - Thomas Holloway\n - Peter Tillemans\n - John Waterson\n - Maksim Lin\n - Tom de Grunt\n - Timon Reinhard\n - Kevin Swiber\n - C J Silverio\n - Ken Heutmaker (bgok)\n - Joe McCann\n - Peter deHaan\n - Alex Lusco\n - Andreas Wenk (@awenkhh)\n - Todd Wolfson\n - Cristián Romo\n - Lyle Garza\n - Eric Laberge\n - David Thomas\n - Paul C. Cook\n - Craig \"The Coder\" Dunn\n - Ray Daly\n - Josh Marinacci\n - fauno\n - Jeff Burtoft\n - Patrick Roberts\n - Matthew Mirande\n - Matt Field\n - Dion Almaer\n - Murvin Lai\n - David E Levin\n - Monsur Hossain\n - Jesse Harlin\n - Mike Cooper - @mythmon\n - heikki\n - Zef Hemel\n - Vince Allen\n - Biko Tushinde\n - Nick Crohn\n - Justin Tucker @certainstrings\n - Kimberly Munoz\n - Nikolaj Ivancic\n - Paul Redman\n - Glenn Block\n - Owen Smith\n - Eugene Lazutkin\n - letterj - Jay Payne\n - Jason Campbell (@jxson)\n - noah peters\n - Pelle Wessman, @VoxPelli\n - Claes Magnusson, Malmö Yrkeshögskola\n - Yuuki Kunitake\n - Ady Ngom\n - Glenn Scott (@glennsc)\n - Corey Innis\n - Dmitry Pashkevich\n - Jay Pozo\n - Brian Gershon\n - Joe Feser\n - Tyler Breisacher\n - Nick Cooley @nickcooley\n - Hugh Kennedy\n - Jakub Korál\n - Manuel Alejandro de Brito Fontes\n\n## Supporter\n\n> You really support this idea and want to do your part to help see it happen. Your name will be in the BACKERS.md file for all history to see.\n\n - Eric Knudtson\n - Damien Klinnert\n - Tom Fairfield\n - Jon Galloway\n - Ryan Joy (@atxryan)\n - Eran Hammer\n - Michael Matuzak\n - Joshua Barratt\n - Mathieu D'Amours\n - Duncan Kolba\n - Josh Roesslein\n - getify\n - Jonathan 'Wolf' Rentzsch\n - Zach Geis\n - Mirco Zeiss\n - Lapo Luchini - lapo@lapo.it\n - Jeremy Morrell\n - Michael Chui\n - Benaiah Mischenko\n - Aki Mimoto\n - rictic\n - Karolina Szczur\n - Sunil kumar Pissaye\n - Ben Vanik\n - Michael Henretty\n - TehShrike\n - Scott Shillcock\n - Doug Orleans\n - Nick Nisi\n - jostylr\n - Lukas Olson\n - Adam Blackburn\n - Michael Canfield\n - Azer Koçulu @4zjs\n - Neil Kandalgaonkar\n - Rob O'Dwyer\n - jamie brim\n - Michael Hausenblas\n - Don McCurdy\n - Scott MacFarlane\n - Alex Cox\n - kastner\n - David Robit Chenosaurus\n - Marko Bregant\n - Mariz Melo\n - Evan Solomon\n - Andrew Petersen\n - Ferdinand Salis-Samaden\n - danielkbx\n - Chris Alfano\n - Jason Demeuse\n - Tom Townsend\n - ShihChi Huang\n - Zellyn Hunter\n - ~\n - Lynn Wallenstein\n - Sindre Sorhus\n - Yuriy Nemtsov\n - Dan Kohn\n - Patrick Mueller\n - David Leston\n - Larry Battle\n - Kevin Barry\n - Tomomi Imura\n - Kevin Vlahos\n - Gokce Mutlu\n - Niclas Hoyer\n - Jamie Oliver\n - Makis Tracend\n - Troy Forster\n - Filip Körling\n - Randy Sargent\n - Dr Mícheál Ó Foghlú, FeedHenry\n - Chris Christensen\n - Mike Preisinger\n - Neutron Drive\n - Kaleb Murphy\n - Kevin O'Hara\n - Ian Kennington Walter\n - John-Philip Johansson\n - Jan-Christoph Borchardt\n - Genshin Souzou K.K. [Phantom Creation Inc.]\n - Michael Dandy\n - Neil de Carteret\n - Dennis Reed\n - Jacob Lowe\n - Rob Tsuk\n - Aaron Hans\n - Dilys Sun\n - JP Sugarbroad\n - Austin Appleby\n - vicapow\n - Scott Elcomb\n - Soldair (Ryan Day)\n - Nick Young\n - Kalvir Sandhu - @kalv\n - Flynn Joffray\n - Stijn van Schooten\n - Jared Barboza (@codeimpossible)\n - Jörn Zaefferer\n - Miroslav Magda\n - Adam Argyle\n - Alexandru Vladutu\n - Dinis Cruz , OWASP O2 Platform\n - Elliott B. Edwards (automatonic)\n - Philippe Lachaise\n - Per Thulin\n - Matt Donnelly\n - kewah\n - Greg McCarvell\n - Pedro Teixeira (@pgte)\n - Marco Rogers (@polotek)\n - Jacques Crocker\n - Matthew Podwysocki\n - Frantz Gauthier\n - Gerry Cardinal III\n - Hansemann\n - Ben \"unwiredben\" Combee\n - Geoff Bentley, NZ\n - David Granado\n - Assaf Arkin\n - Trevor Baker\n - Elliot Glaysher\n - Wil Moore III\n - Jason Persampieri\n - Dennis G Daniels\n - Mike de Boer\n - Jeroen Janssen\n - Daniel Aleksandersen\n - Raphael Schweikert\n - Nikolay Bachiyski\n - Dima Samodurov\n - tmartineau\n - Daniel Flower\n - Kevin Garnett\n - Jae Hess\n - Matt Reynolds\n - LSD25\n - Nima Gardideh (nemo)\n - Patrick Collins (pat@burned.com)\n - Michael J. Ryan ([@tracker1](https://github.com/tracker1))\n - technoweenie\n - David Hayes\n - Meyer SciTech Solutions, LLC\n - Srdjan\n - Joseph Werle\n - Sebastian Mikkel Wilson (@codebudo)\n - Brent Knight\n - Nikolay Kolev\n - Michael Alyn Miller\n - Leon Noel\n - Dave LeCompte\n - Bermi Ferrer\n - Bernard Chen\n - Jyri Tuulos\n - fMads\n - Matt Kowalski\n - Ishan Anand\n - Frederick Ostrander\n - Ryan Riley\n - Dominik Wagenknecht\n - Yves Ineichen\n - Raphael Salomon\n - John Wu\n - Gergő Tisza\n - Chris Bearcroft (@DJCMBear)\n - Eric Allam\n - David Souther\n - Rob van den Bogaard-Braaf\n - Anthony Scotti\n - de.henne (Henning Leutz)\n - Scott Sauyet\n - Trae Robbins\n - Jason Sallis\n - Andrew Maxwell\n - Sembiance\n - Christian Sullivan (@euforic)\n - Alan Effrig\n - Rob Quick\n - Will Blasko\n - ikeyasu@gmail.com\n - Ben Sheldon\n - Federico Weber\n - Ken Chen\n - Maxime Quandalle\n - Darwiin (Christophe R.)\n - Fabrizio Codello\n - John Pywtorak\n - Danny Coates\n - Desmond Morris\n - Will Dent\n - Antoine Brault\n - Bruno Vieira, @bmpvieira\n - Charles Moncrief\n\n[kickstarter project]: http://www.kickstarter.com/projects/creationix/js-git\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013-2014 Tim Caswell <tim@creationix.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.4091796875,
          "content": "# JS-Git\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/creationix/js-git?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nThis project is a collection of modules that helps in implementing git powered\napplications in JavaScript.  The original purpose for this is to enable better\ndeveloper tools for authoring code in restricted environments like ChromeBooks\nand tablets.  It also enables using git as a database to replace SQL and no-SQL\ndata stores in many applications.\n\nThis project was initially funded by two crowd-sourced fundraisers.  See details\nin [BACKERS.md](BACKERS.md) and [BACKERS-2.md](BACKERS-2.md).  Thanks to all of\nyou who made this possible!\n\n## Usage\n\nDetailed API docs are contained in the [doc](doc) subfolder of this repository.\n\nIn general the way you use js-git is you create a JS object and then mixin the\nfunctionality you need.  Here is an example of creating an in-memory database,\ncreating some objects, and then walking that tree using the high-level walker\nAPIs.\n\n## Creating a repo object.\n\n```js\n// This provides symbolic names for the octal modes used by git trees.\nvar modes = require('js-git/lib/modes');\n\n// Create a repo by creating a plain object.\nvar repo = {};\n\n// This provides an in-memory storage backend that provides the following APIs:\n// - saveAs(type, value) => hash\n// - loadAs(type, hash) => hash\n// - saveRaw(hash, binary) =>\n// - loadRaw(hash) => binary\nrequire('js-git/mixins/mem-db')(repo);\n\n// This adds a high-level API for creating multiple git objects by path.\n// - createTree(entries) => hash\nrequire('js-git/mixins/create-tree')(repo);\n\n// This provides extra methods for dealing with packfile streams.\n// It depends on\n// - unpack(packStream, opts) => hashes\n// - pack(hashes, opts) => packStream\nrequire('js-git/mixins/pack-ops')(repo);\n\n// This adds in walker algorithms for quickly walking history or a tree.\n// - logWalk(ref|hash) => stream<commit>\n// - treeWalk(hash) => stream<object>\nrequire('js-git/mixins/walkers')(repo);\n\n// This combines parallel requests for the same resource for efficiency under load.\nrequire('js-git/mixins/read-combiner')(repo);\n\n// This makes the object interface less strict.  See its docs for details\nrequire('js-git/mixins/formats')(repo);\n```\n\n## Generators vs Callbacks\n\nThere are two control-flow styles that you can use to consume js-git APIs.  All\nthe examples here use `yield` style and assume the code is contained within a\ngenerator function that's yielding to a tool like [gen-run](https://github.com/creationix/gen-run).\n\nThis style requires ES6 generators.  This feature is currently in stable Firefox,\nin stable Chrome behind a user-configurable flag, in node.js 0.11.x or greater\nwith a command-line flag.\n\nAlso you can use generators on any ES5 platform if you use a source transform\nlike Facebook's [regenerator](http://facebook.github.io/regenerator/) tool.\n\nYou read more about how generators work at [Generators vs Fibers](http://howtonode.org/generators-vs-fibers).\n\n```js\nvar run = require('gen-run');\n\nrun(function*() {\n // Blocking logic goes here.  You can use yield\n var result = yield someAction(withArgs);\n // The generator pauses at yield and resumes when the data is available.\n // The rest of your process is not blocked, just this generator body.\n // If there was an error, it will throw into this generator.\n});\n```\n\nIf you can't use this new feature or just plain prefer node-style callbacks, all\njs-git APIs also support that.  The way this works is actually quite simple.\nIf you don't pass in the callback, the function will return a partially applied\nversion of your call expecting just the callback.\n\n```js\nsomeAction(withArgs, function (err, value) {\n  if (err) return handleMyError(err);\n  // do something with value\n});\n\n// The function would be implemented to support both style like this.\nfunction someAction(arg, callback) {\n  if (!callback) return someAction.bind(this, arg);\n  // We now have callback and arg\n}\n```\n\n## Basic Object Creation\n\nNow we have an in-memory git repo useful for testing the network operations or\njust getting to know the available APIs.\n\nIn this example, we'll create a blob, create a tree containing that blob, create\na commit containing that tree.  This shows how to create git objects manually.\n\n```js\n  // First we create a blob from a string.  The `formats` mixin allows us to\n  // use a string directly instead of having to pass in a binary buffer.\n  var blobHash = yield repo.saveAs(\"blob\", \"Hello World\\n\");\n\n  // Now we create a tree that is a folder containing the blob as `greeting.txt`\n  var treeHash = yield repo.saveAs(\"tree\", {\n    \"greeting.txt\": { mode: modes.file, hash: blobHash }\n  });\n\n  // With that tree, we can create a commit.\n  // Again the `formats` mixin allows us to omit details like committer, date,\n  // and parents.  It assumes sane defaults for these.\n  var commitHash = yield repo.saveAs(\"commit\", {\n    author: {\n      name: \"Tim Caswell\",\n      email: \"tim@creationix.com\"\n    },\n    tree: treeHash,\n    message: \"Test commit\\n\"\n  });\n\n```\n\n## Basic Object Loading\n\nWe can read objects back one at a time using `loadAs`.\n\n```js\n// Reading the file \"greeting.txt\" from a commit.\n\n// We first read the commit.\nvar commit = yield repo.loadAs(\"commit\", commitHash);\n// We then read the tree using `commit.tree`.\nvar tree = yield repo.loadAs(\"tree\", commit.tree);\n// We then read the file using the entry hash in the tree.\nvar file = yield repo.loadAs(\"blob\", tree[\"greeting.txt\"].hash);\n// file is now a binary buffer.\n```\n\nWhen using the `formats` mixin there are two new types for `loadAs`, they are\n`\"text\"` and `\"array\"`.\n\n```js\n// When you're sure the file contains unicode text, you can load it as text directly.\nvar fileAsText = yield repo.loadAs(\"text\", blobHash);\n\n// Also if you prefer array format, you can load a directory as an array.\nvar entries = yield repo.loadAs(\"array\", treeHash);\nentries.forEach(function (entry) {\n  // entry contains {name, mode, hash}\n});\n```\n\n## Using Walkers\n\nNow that we have a repo with some minimal data in it, we can query it.  Since we\nincluded the `walkers` mixin, we can walk the history as a linear stream or walk\nthe file tree as a depth-first linear stream.\n\n```js\n// Create a log stream starting at the commit we just made.\n// You could also use symbolic refs like `refs/heads/master` for repos that\n// support them.\nvar logStream = yield repo.logWalk(commitHash);\n\n// Looping through the stream is easy by repeatedly calling waiting on `read`.\nvar commit, object;\nwhile (commit = yield logStream.read(), commit !== undefined) {\n\n  console.log(commit);\n\n  // We can also loop through all the files of each commit version.\n  var treeStream = yield repo.treeWalk(commit.tree);\n  while (object = yield treeStream.read(), object !== undefined) {\n    console.log(object);\n  }\n\n}\n```\n\n## Filesystem Style Interface\n\nIf you feel that creating a blob, then creating a tree, then creating the parent\ntree, etc is a lot of work to save just one file, I agree.  While writing the\ntedit app, I discovered a nice high-level abstraction that you can mixin to make\nthis much easier.  This is the `create-tree` mixin referenced in the above\nconfig.\n\n```js\n// We wish to create a tree that contains `www/index.html` and `README.me` files.\n// This will create these two blobs, create a tree for `www` and then create a\n// tree for the root containing `README.md` and the newly created `www` tree.\nvar treeHash = yield repo.createTree({\n  \"www/index.html\": {\n    mode: modes.file,\n    content: \"<h1>Hello</h1>\\n<p>This is an HTML page?</p>\\n\"\n  },\n  \"README.md\": {\n    mode: modes.file,\n    content: \"# Sample repo\\n\\nThis is a sample\\n\"\n  }\n});\n```\n\nThis is great for creating several files at once, but it can also be used to\nedit existing trees by adding new files, changing existing files, or deleting\nexisting entries.\n\n```js\nvar changes = [\n  {\n    path: \"www/index.html\" // Leaving out mode means to delete the entry.\n  },\n  {\n    path: \"www/app.js\", // Create a new file in the existing directory.\n    mode: modes.file,\n    content: \"// this is a js file\\n\"\n  }\n];\n\n// We need to use array form and specify the base tree hash as `base`.\nchanges.base = treeHash;\n\ntreeHash = yield repo.createTree(changes);\n```\n\n## Creating Composite Filesystems\n\nThe real fun begins when you create composite filesystems using git submodules.\n\nThe code that handles this is not packaged as a repo mixin since it spans several\nindependent repos.  Instead look to the [git-tree](https://github.com/creationix/git-tree)\nrepo for the code.  It's interface is still slightly unstable and undocumented\nbut is used in production by tedit and my node hosting service that complements tedit.\n\nBasically this module allows you to perform high-level filesystem style commands\non a virtual filesystem that consists of many js-git repos.  Until there are\nproper docs, you can see how tedit uses it at <https://github.com/creationix/tedit-app/blob/master/src/data/fs.js#L11-L21>.\n\n## Mounting Github Repos\n\nI've been asking Github to enable CORS headers to their HTTPS git servers, but\nthey've refused to do it.  This means that a browser can never clone from github\nbecause the browser will disallow XHR requests to the domain.\n\nThey do, however, offer a REST interface to the raw [git data](https://developer.github.com/v3/git/).\n\nUsing this I wrote a mixin for js-git that uses github *as* the backend store.\n\nCode at <https://github.com/creationix/js-github>. Usage in tedit can be seen at\n<https://github.com/creationix/tedit-app/blob/master/src/data/fs.js#L31>.\n"
        },
        {
          "name": "SPONSORS.md",
          "type": "blob",
          "size": 0.2978515625,
          "content": "# Sponsored Development\n\nAs a company, you can sponsor development of specific features to the js-git ecosystem.\n\n## In Progress Sponsored Features\n\n - JS-Git - Encrypted Filesystem - Anonymous\n - Tedit - Web Runtime - Anonymous\n\n## Completed Sponsored Features\n\n - Tedit - Live Export to VFS - Anonymous\n"
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "mixins",
          "type": "tree",
          "content": null
        },
        {
          "name": "net",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.548828125,
          "content": "{\n  \"name\": \"js-git\",\n  \"version\": \"0.7.8\",\n  \"description\": \"Git Implemented in JavaScript\",\n  \"keywords\": [\n    \"git\",\n    \"js-git\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/creationix/js-git.git\"\n  },\n  \"author\": \"Tim Caswell <tim@creationix.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/creationix/js-git/issues\"\n  },\n  \"scripts\": {\n    \"test\": \"ls test/test-* | xargs -n1 node\"\n  },\n  \"dependencies\": {\n    \"bodec\": \"^0.1.0\",\n    \"culvert\": \"^0.1.2\",\n    \"git-sha1\": \"^0.1.2\",\n    \"pako\": \"^0.2.5\"\n  }\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}