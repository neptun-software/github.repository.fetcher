{
  "metadata": {
    "timestamp": 1736561672376,
    "page": 257,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "automerge/automerge",
      "stars": 4275,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".envrc",
          "type": "blob",
          "size": 0.009765625,
          "content": "use flake\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.05859375,
          "content": "/.direnv\nperf.*\n/Cargo.lock\nbuild/\n.vim/*\n/target\n.DS_Store\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0498046875,
          "content": "Copyright (c) 2019-2021 the Automerge contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.0888671875,
          "content": "# Automerge\n\n<img src='./img/sign.svg' width='500' alt='Automerge logo' />\n\n[![homepage](https://img.shields.io/badge/homepage-published-informational)](https://automerge.org/)\n[![main docs](https://img.shields.io/badge/docs-main-informational)](https://automerge.org/automerge/automerge/)\n[![latest docs](https://img.shields.io/badge/docs-latest-informational)](https://docs.rs/automerge/latest/automerge)\n[![ci](https://github.com/automerge/automerge/actions/workflows/ci.yaml/badge.svg)](https://github.com/automerge/automerge/actions/workflows/ci.yaml)\n[![docs](https://github.com/automerge/automerge/actions/workflows/docs.yaml/badge.svg)](https://github.com/automerge/automerge/actions/workflows/docs.yaml)\n\nAutomerge is a library which provides fast implementations of several different\nCRDTs, a compact compression format for these CRDTs, and a sync protocol for\nefficiently transmitting those changes over the network. The objective of the\nproject is to support [local-first](https://www.inkandswitch.com/local-first/) applications in the same way that relational\ndatabases support server applications - by providing mechanisms for persistence\nwhich allow application developers to avoid thinking about hard distributed\ncomputing problems. Automerge aims to be PostgreSQL for your local-first app.\n\nIf you're looking for documentation on the JavaScript implementation take a look\nat https://automerge.org/docs/hello/. There are other implementations in both\nRust and C, but they are earlier and don't have documentation yet. You can find\nthem in `rust/automerge` and `rust/automerge-c` if you are comfortable\nreading the code and tests to figure out how to use them.\n\nIf you're familiar with CRDTs and interested in the design of Automerge in\nparticular take a look at https://automerge.org/automerge-binary-format-spec.\n\nFinally, if you want to talk to us about this project please [join our Discord server](https://discord.gg/HrpnPAU5zx)!\n\n## Status\n\nThis project is formed of a core Rust implementation which is exposed via FFI in\njavascript+WASM, C, and soon other languages. Alex\n([@alexjg](https://github.com/alexjg/)) is working full time on maintaining\nautomerge, other members of Ink and Switch are also contributing time and there\nare several other maintainers. The focus is currently on shipping the new JS\npackage. We expect to be iterating the API and adding new features over the next\nsix months so there will likely be several major version bumps in all packages\nin that time.\n\nIn general we try and respect semver.\n\n### JavaScript\n\nA stable release of the javascript package is currently available as\n`@automerge/automerge@2.0.0` where. pre-release verisions of the `2.0.1` are\navailable as `2.0.1-alpha.n`. `2.0.1*` packages are also available for Deno at\nhttps://deno.land/x/automerge\n\n### Rust\n\nThe rust codebase is currently oriented around producing a performant backend\nfor the Javascript wrapper and as such the API for Rust code is low level and\nnot well documented. We will be returning to this over the next few months but\nfor now you will need to be comfortable reading the tests and asking questions\nto figure out how to use it. If you are looking to build rust applications which\nuse automerge you may want to look into\n[autosurgeon](https://github.com/automerge/autosurgeon)\n\n## Repository Organisation\n\n- `./rust` - the rust rust implementation and also the Rust components of\n  platform specific wrappers (e.g. `automerge-wasm` for the WASM API or\n  `automerge-c` for the C FFI bindings)\n- `./javascript` - The javascript library which uses `automerge-wasm`\n  internally but presents a more idiomatic javascript interface\n- `./scripts` - scripts which are useful to maintenance of the repository.\n  This includes the scripts which are run in CI.\n- `./img` - static assets for use in `.md` files\n\n## Building\n\nTo build this codebase you will need:\n\n- `rust`\n- `node`\n- `yarn`\n- `cmake`\n- `cmocka`\n\nYou will also need to install the following with `cargo install`\n\n- `wasm-bindgen-cli`\n- `wasm-opt`\n- `cargo-deny`\n\nAnd ensure you have added the `wasm32-unknown-unknown` target for rust cross-compilation.\n\nThe various subprojects (the rust code, the wrapper projects) have their own\nbuild instructions, but to run the tests that will be run in CI you can run\n`./scripts/ci/run`.\n\n### For macOS\n\nThese instructions worked to build locally on macOS 13.1 (arm64) as of\nNov 29th 2022.\n\n```bash\n# clone the repo\ngit clone https://github.com/automerge/automerge\ncd automerge\n\n# install rustup\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# install homebrew\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# install cmake, node, cmocka\nbrew install cmake node cmocka\n\n# install yarn\nnpm install --global yarn\n\n# install javascript dependencies\nyarn --cwd ./javascript\n\n# install rust dependencies\ncargo install wasm-bindgen-cli wasm-opt cargo-deny\n\n# get nightly rust to produce optimized automerge-c builds\nrustup toolchain install nightly\nrustup component add rust-src --toolchain nightly\n\n# add wasm target in addition to current architecture\nrustup target add wasm32-unknown-unknown\n\n# Run ci script\n./scripts/ci/run\n```\n\nIf your build fails to find `cmocka.h` you may need to teach it about homebrew's\ninstallation location:\n\n```\nexport CPATH=/opt/homebrew/include\nexport LIBRARY_PATH=/opt/homebrew/lib\n./scripts/ci/run\n```\n\n## Nix Flake\n\nIf you have [Nix](https://nixos.org/) installed, there is a flake available with all \nof the dependencies configured and some helper scripts.\n\n``` console\n$ nix develop\n\n  ____                                          _\n / ___|___  _ __ ___  _ __ ___   __ _ _ __   __| |___\n| |   / _ \\| '_ ` _ \\| '_ ` _ \\ / _` | '_ \\ / _` / __|\n| |__| (_) | | | | | | | | | | | (_| | | | | (_| \\__ \\\n \\____\\___/|_| |_| |_|_| |_| |_|\\__,_|_| |_|\\__,_|___/\n\n\nbuild:deno          | Build Deno-wrapped Wasm library\nbuild:host          | Build for aarch64-darwin\nbuild:node          | Build JS-wrapped Wasm library\nbuild:wasi          | Build for Wasm32-WASI\nbuild:wasm:nodejs   | Build for wasm32-unknown-unknown with Node.js bindgings\nbuild:wasm:web      | Build for wasm32-unknown-unknown with web bindings\ndocs:build:host     | Refresh the docs\ndocs:build:wasm     | Refresh the docs with the wasm32-unknown-unknown target\ndocs:open:host      | Open refreshed docs\ndocs:open:wasm      | Open refreshed docs\n# ✂️  SNIP ✂️\n\n$ rustc --version\nrustc 1.82.0 (f6e511eec 2024-10-15) # latest at time of writing\n```\n\n## Contributing\n\nPlease try and split your changes up into relatively independent commits which\nchange one subsystem at a time and add good commit messages which describe what\nthe change is and why you're making it (err on the side of longer commit\nmessages). `git blame` should give future maintainers a good idea of why\nsomething is the way it is.\n\n### Releasing\n\nThere are four artefacts in this repository which need releasing:\n\n* The `@automerge/automerge` NPM package\n* The `@automerge/automerge-wasm` NPM package\n* The automerge deno crate\n* The `automerge` rust crate\n\n#### JS Packages\n\nThe NPM and Deno packages are all released automatically by CI tooling whenever\nthe version number in the respective `package.json` changes. This means that\nthe process for releasing a new JS version is:\n\n1. Bump the version in the `rust/automerge-wasm/package.json` (skip this if there\n   are no new changes to the WASM)\n2. Bump the version of `@automerge/automerge-wasm` we depend on in `javascript/package.json`\n3. Bump the version in `@automerge/automerge` also in `javascript/package.json`\n\nPut all of these bumps in a PR and wait for a clean CI run. Then merge the PR.\nThe CI tooling will pick up a push to `main` with a new version and publish it\nto NPM. This does depend on an access token available as `NPM_TOKEN` in the \nactions environment, this token is generated with a 30 day expiry date so needs\n(manually) refreshing every so often.\n\n#### Rust Package\n\nThis is much easier, but less automatic. The steps to release are:\n\n1. Bump the version in `automerge/Cargo.toml`\n2. Push a PR and merge once clean\n3. Tag the release as `rust/automerge@<version>`\n4. Push the tag to the repository\n5. Publish the release with `cargo publish`\n"
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 4.2275390625,
          "content": "{\n  \"nodes\": {\n    \"command-utils\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\"\n      },\n      \"locked\": {\n        \"lastModified\": 1709702368,\n        \"narHash\": \"sha256-1YOPubkJ5M6HigdfN0gn0AZ3kx6MHboG9UbWpYpk3gM=\",\n        \"owner\": \"expede\",\n        \"repo\": \"nix-command-utils\",\n        \"rev\": \"8f7179876383495b1f98311e53ebb41649ca270a\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"expede\",\n        \"repo\": \"nix-command-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1709126324,\n        \"narHash\": \"sha256-q6EQdSeUZOG26WelxqkmR7kArjgWCdw5sfJVHPH/7j8=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"d465f4819400de7c8d874d50b982301f28a84605\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"id\": \"flake-utils\",\n        \"type\": \"indirect\"\n      }\n    },\n    \"flake-utils_2\": {\n      \"inputs\": {\n        \"systems\": \"systems_2\"\n      },\n      \"locked\": {\n        \"lastModified\": 1726560853,\n        \"narHash\": \"sha256-X6rJYSESBVr3hBoH0WbKE5KvhPU5bloyZ2L4K60/fPQ=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"c1dfcf08411b08f6b8615f7d8971a2bfa81d5e8a\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixos-unstable\": {\n      \"locked\": {\n        \"lastModified\": 1730815137,\n        \"narHash\": \"sha256-/SMEl8lpjVJOH5OQ11OLn6O2DeHb0yo3oIz1mi2bvWY=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"78366fc8acbc8092d898f021354ab61ca161c412\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"id\": \"nixpkgs\",\n        \"ref\": \"nixos-unstable-small\",\n        \"type\": \"indirect\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1709569716,\n        \"narHash\": \"sha256-iOR44RU4jQ+YPGrn+uQeYAp7Xo7Z/+gT+wXJoGxxLTY=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"617579a787259b9a6419492eaac670a5f7663917\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"id\": \"nixpkgs\",\n        \"ref\": \"nixos-23.11\",\n        \"type\": \"indirect\"\n      }\n    },\n    \"nixpkgs_2\": {\n      \"locked\": {\n        \"lastModified\": 1730741070,\n        \"narHash\": \"sha256-edm8WG19kWozJ/GqyYx2VjW99EdhjKwbY3ZwdlPAAlo=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"d063c1dd113c91ab27959ba540c0d9753409edf3\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"id\": \"nixpkgs\",\n        \"ref\": \"nixos-24.05\",\n        \"type\": \"indirect\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"command-utils\": \"command-utils\",\n        \"flake-utils\": \"flake-utils_2\",\n        \"nixos-unstable\": \"nixos-unstable\",\n        \"nixpkgs\": \"nixpkgs_2\",\n        \"rust-overlay\": \"rust-overlay\"\n      }\n    },\n    \"rust-overlay\": {\n      \"inputs\": {\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1730773675,\n        \"narHash\": \"sha256-pULo7GryzLkqGveWvnNWVz1Kk6EJqvq+HQeSkwvr7DA=\",\n        \"owner\": \"oxalica\",\n        \"repo\": \"rust-overlay\",\n        \"rev\": \"e19e9d54fac1e53f73411ebe22d19f946b1ba0bd\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"oxalica\",\n        \"repo\": \"rust-overlay\",\n        \"type\": \"github\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    },\n    \"systems_2\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 7.3427734375,
          "content": "{\n  description = \"automerge\";\n\n  inputs = {\n    nixpkgs.url = \"nixpkgs/nixos-24.05\";\n    nixos-unstable.url = \"nixpkgs/nixos-unstable-small\";\n\n    command-utils.url = \"github:expede/nix-command-utils\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n\n    rust-overlay = {\n      url = \"github:oxalica/rust-overlay\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n    };\n  };\n\n  outputs = {\n      self,\n      nixpkgs,\n      nixos-unstable,\n      command-utils,\n      flake-utils,\n      rust-overlay,\n  }: flake-utils.lib.eachDefaultSystem (system:\n    let\n      overlays = [\n        (import rust-overlay)\n      ];\n\n      pkgs = import nixpkgs { inherit system overlays; };\n      unstable = import nixos-unstable { inherit system overlays; };\n\n      rustVersion = \"1.82.0\";\n\n      rust-toolchain = pkgs.rust-bin.stable.${rustVersion}.default.override {\n        extensions = [\n          \"cargo\"\n          \"clippy\"\n          \"llvm-tools-preview\"\n          \"rust-src\"\n          \"rust-std\"\n          \"rustfmt\"\n        ];\n\n        targets = [\n          \"aarch64-apple-darwin\"\n          \"x86_64-apple-darwin\"\n\n          \"x86_64-unknown-linux-musl\"\n          \"aarch64-unknown-linux-musl\"\n\n          \"wasm32-unknown-unknown\"\n          \"wasm32-wasi\"\n        ];\n      };\n\n      format-pkgs = with pkgs; [\n        nixpkgs-fmt\n        alejandra\n        taplo\n      ];\n\n      darwin-installs = with pkgs.darwin.apple_sdk.frameworks; [\n        Security\n        CoreFoundation\n        Foundation\n      ];\n\n      cargo-installs = with pkgs; [\n        cargo-criterion\n        cargo-deny\n        cargo-expand\n        cargo-nextest\n        cargo-outdated\n        cargo-sort\n        cargo-udeps\n        cargo-watch\n        # llvmPackages.bintools\n        twiggy\n        wasm-bindgen-cli\n        wasm-tools\n      ];\n\n      cargo = \"${pkgs.cargo}/bin/cargo\";\n      deno = \"${unstable.deno}/bin/deno\";\n      node = \"${unstable.nodejs_20}/bin/node\";\n      wasm-opt = \"${pkgs.binaryen}/bin/wasm-opt\";\n      wasm-pack = \"${unstable.wasm-pack}/bin/wasm-pack\";\n      yarn = \"${pkgs.yarn}/bin/yarn\";\n\n      cmd = command-utils.cmd.${system};\n\n      js-dir = \"./javascript\";\n      rust-dir = \"--manifest-path ./rust/Cargo.toml\";\n      wasm-dir = \"./rust/automerge-wasm\";\n\n      release = {\n        \"release:host\" = cmd \"Build release for the current host (${system})\"\n          \"${cargo} build ${rust-dir} --release\";\n\n        \"release:wasm:web\" = cmd \"Build release for wasm32-unknown-unknown with web bindings\"\n          \"${wasm-pack} build ${wasm-dir} --release --target=web\";\n\n        \"release:wasm:nodejs\" = cmd \"Build release for wasm32-unknown-unknown with Node.js bindgings\"\n          \"${wasm-pack} build ${wasm-dir} --release --target=nodejs\";\n      };\n\n      build = {\n        \"build:host\" = cmd \"Build for ${system}\"\n          \"${cargo} build ${rust-dir}\";\n\n        \"build:wasm:web\" = cmd \"Build for wasm32-unknown-unknown with web bindings\"\n          \"${wasm-pack} build ${wasm-dir} --dev --target=web\";\n        \n        \"build:wasm:nodejs\" = cmd \"Build for wasm32-unknown-unknown with Node.js bindgings\"\n          \"${wasm-pack} build ${wasm-dir} --dev --target=nodejs\";\n\n        \"build:node\" = cmd \"Build JS-wrapped Wasm library\"\n          \"${yarn} install --cwd ${js-dir} && ${yarn} --cwd ${js-dir} run build\";\n\n        \"build:deno\" = cmd \"Build Deno-wrapped Wasm library\"\n          \"cd ${js-dir} && ${deno} install && ${deno} run build && cd ..\";\n\n        \"build:wasi\" = cmd \"Build for Wasm32-WASI\"\n          \"${cargo} build ${wasm-dir} --target wasm32-wasi\";\n      };\n\n      bench = {\n        \"bench\" = cmd \"Run benchmarks, including test utils\"\n          \"${cargo} bench ${rust-dir}\";\n\n        \"bench:host:open\" = cmd \"Open host Criterion benchmarks in browser\"\n          \"${pkgs.xdg-utils}/bin/xdg-open ./rust/target/criterion/report/index.html\";\n      };\n\n      lint = {\n        \"lint\" = cmd \"Run Clippy\"\n          \"${cargo} clippy ${rust-dir}\";\n\n        \"lint:pedantic\" = cmd \"Run Clippy pedantically\"\n          \"${cargo} clippy ${rust-dir} -- -W clippy::pedantic\";\n\n        \"lint:fix\" = cmd \"Apply non-pendantic Clippy suggestions\"\n          \"${cargo} clippy ${rust-dir} --fix\";\n      };\n\n      watch = {\n        \"watch:build:host\" = cmd \"Rebuild host target on save\"\n          \"${cargo} watch ${rust-dir} --clear\";\n\n        \"watch:build:wasm\" = cmd \"Rebuild Wasm target on save\"\n          \"${cargo} watch ${wasm-dir} --clear -- cargo build --target=wasm32-unknown-unknown\";\n\n        \"watch:lint\" = cmd \"Lint on save\"\n          \"${cargo} watch ${rust-dir} --clear --exec clippy\";\n\n        \"watch:lint:pedantic\" = cmd \"Pedantic lint on save\"\n          \"${cargo} watch ${rust-dir} --clear --exec 'clippy -- -W clippy::pedantic'\";\n\n        \"watch:test:host\" = cmd \"Run all host tests on save\"\n          \"${cargo} watch ${rust-dir} --clear --exec 'test && test --doc'\";\n\n        \"watch:test:wasm\" = cmd \"Run all Wasm tests on save\"\n          \"${cargo} watch ${wasm-dir} --clear --exec 'test --target=wasm32-unknown-unknown && test --doc --target=wasm32-unknown-unknown'\";\n      };\n\n      test = {\n        \"test:all\" = cmd \"Run Cargo tests\"\n          \"test:host && test:docs && test:wasm\";\n\n        \"test:host\" = cmd \"Run Cargo tests for host target\"\n          \"${cargo} test ${rust-dir} && ${cargo} test ${rust-dir} --doc\";\n\n        \"test:wasm\" = cmd \"Run wasm-pack tests on all targets\"\n          \"test:wasm:node && test:wasm:chrome\";\n\n        \"test:wasm:node\" = cmd \"Run wasm-pack tests in Node.js\"\n          \"${wasm-pack} test ${wasm-dir} --node\";\n\n        \"test:wasm:chrome\" = cmd \"Run wasm-pack tests in headless Chrome\"\n          \"${wasm-pack} test ${wasm-dir} --headless --chrome\";\n\n        \"test:docs\" = cmd \"Run Cargo doctests\"\n          \"${cargo} test ${rust-dir} --doc\";\n      };\n\n      docs = {\n        \"docs:build:host\" = cmd \"Refresh the docs\"\n          \"${cargo} doc ${rust-dir}\";\n\n        \"docs:build:wasm\" = cmd \"Refresh the docs with the wasm32-unknown-unknown target\"\n          \"${cargo} doc ${wasm-dir} --target=wasm32-unknown-unknown\";\n\n        \"docs:open:host\" = cmd \"Open refreshed docs\"\n          \"${cargo} doc ${rust-dir} --open\";\n\n        \"docs:open:wasm\" = cmd \"Open refreshed docs\"\n          \"${cargo} doc ${wasm-dir} --open --target=wasm32-unknown-unknown\";\n      };\n\n      command_menu = command-utils.commands.${system}\n        (release // build // bench // lint // watch // test // docs);\n    in rec {\n      devShells.default = pkgs.mkShell {\n        name = \"automerge\";\n\n        nativeBuildInputs = with pkgs;\n          [\n            # Rust\n            (pkgs.hiPrio pkgs.rust-bin.nightly.latest.rustfmt)\n            cargo-criterion\n            cargo-deny\n            cargo-edit\n            cargo-flamegraph\n            cargo-fuzz\n            cargo-watch\n            rust-toolchain\n            unstable.irust\n\n            # Wasm\n            unstable.binaryen\n            unstable.wasm-pack\n\n            # JS\n            chromedriver\n            unstable.deno\n            nodejs_22 # Current LTS\n            pkgs.yarn\n\n            # Clang\n            cmake\n            cmocka\n            doxygen\n\n            # Nix\n            direnv\n            nixpkgs-fmt\n\n            # External Libraries\n            gnuplot\n            openssl\n            \n            # Commands\n            command_menu\n          ]\n          ++ format-pkgs\n          ++ cargo-installs\n          ++ lib.optionals stdenv.isDarwin darwin-installs;\n\n        shellHook = \"menu\";\n      };\n\n      formatter = pkgs.alejandra;\n    }\n  );\n}\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "interop",
          "type": "tree",
          "content": null
        },
        {
          "name": "javascript",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}