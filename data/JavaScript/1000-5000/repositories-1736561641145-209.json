{
  "metadata": {
    "timestamp": 1736561641145,
    "page": 209,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "asyncapi/spec",
      "stars": 4388,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".all-contributorsrc",
          "type": "blob",
          "size": 12.14453125,
          "content": "{\n  \"projectName\": \"spec\",\n  \"projectOwner\": \"asyncapi\",\n  \"repoType\": \"github\",\n  \"repoHost\": \"https://github.com\",\n  \"files\": [\n    \"README.md\"\n  ],\n  \"imageSize\": 100,\n  \"skipCi\": false,\n  \"contributorsPerLine\": 9,\n  \"contributors\": [\n    {\n      \"login\": \"fmvilas\",\n      \"name\": \"Fran Méndez\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/242119?v=4\",\n      \"profile\": \"http://www.fmvilas.com\",\n      \"contributions\": [\n        \"question\",\n        \"bug\",\n        \"blog\",\n        \"doc\",\n        \"ideas\",\n        \"infra\",\n        \"maintenance\",\n        \"review\",\n        \"tutorial\",\n        \"talk\"\n      ]\n    },\n    {\n      \"login\": \"derberg\",\n      \"name\": \"Lukasz Gornicki\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/6995927?v=4\",\n      \"profile\": \"http://resume.github.io/?derberg\",\n      \"contributions\": [\n        \"doc\",\n        \"ideas\",\n        \"review\",\n        \"question\",\n        \"blog\",\n        \"talk\",\n        \"maintenance\",\n        \"infra\"\n      ]\n    },\n    {\n      \"login\": \"MikeRalphson\",\n      \"name\": \"Mike Ralphson\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/21603?v=4\",\n      \"profile\": \"http://mermade.github.io\",\n      \"contributions\": [\n        \"question\",\n        \"doc\",\n        \"ideas\",\n        \"infra\",\n        \"review\",\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"rmelian\",\n      \"name\": \"raisel melian\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/4565267?v=4\",\n      \"profile\": \"https://github.com/rmelian\",\n      \"contributions\": [\n        \"question\",\n        \"bug\",\n        \"doc\",\n        \"ideas\",\n        \"maintenance\",\n        \"review\"\n      ]\n    },\n    {\n      \"login\": \"SensibleWood\",\n      \"name\": \"Chris Wood\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/2420069?v=4\",\n      \"profile\": \"https://github.com/SensibleWood\",\n      \"contributions\": [\n        \"ideas\",\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"jschabowsky\",\n      \"name\": \"Jonathan Schabowsky\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/26606293?v=4\",\n      \"profile\": \"https://github.com/jschabowsky\",\n      \"contributions\": [\n        \"doc\",\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"vromero\",\n      \"name\": \"Victor Romero\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/1119553?v=4\",\n      \"profile\": \"https://github.com/vromero\",\n      \"contributions\": [\n        \"ideas\",\n        \"review\"\n      ]\n    },\n    {\n      \"login\": \"antoniogarrote\",\n      \"name\": \"Antonio Garrote\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/8277?v=4\",\n      \"profile\": \"http://antoniogarrote.wordpress.com\",\n      \"contributions\": [\n        \"ideas\",\n        \"review\",\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"jstoiko\",\n      \"name\": \"Jonathan Stoikovitch\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/9660342?v=4\",\n      \"profile\": \"https://ramses.tech\",\n      \"contributions\": [\n        \"example\",\n        \"ideas\",\n        \"review\"\n      ]\n    },\n    {\n      \"login\": \"jonaslagoni\",\n      \"name\": \"Jonas Lagoni\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/13396189?v=4\",\n      \"profile\": \"https://github.com/jonaslagoni\",\n      \"contributions\": [\n        \"bug\",\n        \"doc\",\n        \"ideas\",\n        \"question\",\n        \"review\",\n        \"example\"\n      ]\n    },\n    {\n      \"login\": \"WaleedAshraf\",\n      \"name\": \"Waleed Ashraf\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/8335457?v=4\",\n      \"profile\": \"https://waleedashraf.me/\",\n      \"contributions\": [\n        \"talk\",\n        \"ideas\",\n        \"doc\",\n        \"example\"\n      ]\n    },\n    {\n      \"login\": \"jerzyn\",\n      \"name\": \"Andrzej Jarzyna\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1447151?v=4\",\n      \"profile\": \"https://github.com/jerzyn\",\n      \"contributions\": [\n        \"talk\"\n      ]\n    },\n    {\n      \"login\": \"lifewingmate\",\n      \"name\": \"Emmelyn Wang\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/4294106?v=4\",\n      \"profile\": \"https://linkedin.com/in/emmelyn\",\n      \"contributions\": [\n        \"blog\",\n        \"ideas\",\n        \"doc\",\n        \"talk\"\n      ]\n    },\n    {\n      \"login\": \"Mrc0113\",\n      \"name\": \"Marc DiPasquale\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1815312?v=4\",\n      \"profile\": \"https://marcd.dev\",\n      \"contributions\": [\n        \"blog\",\n        \"talk\",\n        \"review\",\n        \"bug\",\n        \"ideas\",\n        \"video\"\n      ]\n    },\n    {\n      \"login\": \"GeraldLoeffler\",\n      \"name\": \"Gerald Loeffler\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1985716?v=4\",\n      \"profile\": \"http://www.gerald-loeffler.net/\",\n      \"contributions\": [\n        \"doc\",\n        \"bug\",\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"dalelane\",\n      \"name\": \"Dale Lane\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1444788?v=4\",\n      \"profile\": \"http://dalelane.co.uk/\",\n      \"contributions\": [\n        \"blog\",\n        \"ideas\",\n        \"video\",\n        \"talk\",\n        \"tutorial\",\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"magicmatatjahu\",\n      \"name\": \"Maciej Urbańczyk\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/20404945?v=4\",\n      \"profile\": \"https://github.com/magicmatatjahu\",\n      \"contributions\": [\n        \"review\",\n        \"ideas\",\n        \"question\",\n        \"bug\",\n        \"doc\",\n        \"example\",\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"char0n\",\n      \"name\": \"Vladimir Gorej\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/193286?v=4\",\n      \"profile\": \"https://vladimirgorej.com/\",\n      \"contributions\": [\n        \"doc\",\n        \"bug\",\n        \"example\",\n        \"ideas\",\n        \"review\"\n      ]\n    },\n    {\n      \"login\": \"lornajane\",\n      \"name\": \"Lorna Jane Mitchell\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/172607?v=4\",\n      \"profile\": \"http://www.lornajane.net/\",\n      \"contributions\": [\n        \"talk\",\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"lbroudoux\",\n      \"name\": \"Laurent Broudoux\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1538635?v=4\",\n      \"profile\": \"http://medium.com/@lbroudoux\",\n      \"contributions\": [\n        \"doc\",\n        \"blog\",\n        \"talk\",\n        \"example\",\n        \"ideas\",\n        \"review\"\n      ]\n    },\n    {\n      \"login\": \"jmenning-solace\",\n      \"name\": \"Jesse Menning\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/62108913?v=4\",\n      \"profile\": \"https://github.com/jmenning-solace\",\n      \"contributions\": [\n        \"blog\",\n        \"talk\",\n        \"review\",\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"smoya\",\n      \"name\": \"Sergio Moya\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1083296?v=4\",\n      \"profile\": \"https://github.com/smoya\",\n      \"contributions\": [\n        \"review\",\n        \"ideas\",\n        \"question\",\n        \"blog\",\n        \"bug\",\n        \"doc\",\n        \"example\",\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"balogal\",\n      \"name\": \"Alexander Balogh\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/80794567?v=4\",\n      \"profile\": \"https://github.com/balogal\",\n      \"contributions\": [\n        \"doc\",\n        \"bug\"\n      ]\n    },\n    {\n      \"login\": \"KhudaDad414\",\n      \"name\": \"Khuda Dad Nomani\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/32505158?v=4\",\n      \"profile\": \"https://github.com/KhudaDad414\",\n      \"contributions\": [\n        \"example\",\n        \"bug\"\n      ]\n    },\n    {\n      \"login\": \"aaronkorver\",\n      \"name\": \"Aaron Korver\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/8387325?v=4\",\n      \"profile\": \"https://github.com/aaronkorver\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"xunto\",\n      \"name\": \"Orlov Valentine\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/5288053?v=4\",\n      \"profile\": \"https://github.com/xunto\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"lejenome\",\n      \"name\": \"Moez Bouhlel\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/2295241?v=4\",\n      \"profile\": \"https://lejenome.tik.tn\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"luphieanza\",\n      \"name\": \"Muhammad Rafly Andrianza\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/20577131?v=4\",\n      \"profile\": \"https://github.com/luphieanza\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"danielkocot\",\n      \"name\": \"Daniel Kocot\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/466609?v=4\",\n      \"profile\": \"https://danielkocot.github.io/\",\n      \"contributions\": [\n        \"doc\",\n        \"example\",\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"sekharbans-ebay\",\n      \"name\": \"sekharbans-ebay\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/66145510?v=4\",\n      \"profile\": \"https://github.com/sekharbans-ebay\",\n      \"contributions\": [\n        \"doc\",\n        \"example\",\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"damaru-inc\",\n      \"name\": \"Michael Davis\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/3926925?v=4\",\n      \"profile\": \"http://www.damaru.com/\",\n      \"contributions\": [\n        \"bug\",\n        \"doc\",\n        \"example\",\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"GreenRover\",\n      \"name\": \"Heiko Henning\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/512850?v=4\",\n      \"profile\": \"https://github.com/GreenRover\",\n      \"contributions\": [\n        \"bug\",\n        \"code\",\n        \"content\",\n        \"doc\",\n        \"example\",\n        \"ideas\",\n        \"maintenance\",\n        \"review\"\n      ]\n    },\n    {\n      \"login\": \"alequetzalli\",\n      \"name\": \"Quetzalli \",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/19964402?v=4\",\n      \"profile\": \"http://www.docsasecosystem.com\",\n      \"contributions\": [\n        \"content\",\n        \"doc\",\n        \"example\",\n        \"ideas\",\n        \"review\"\n      ]\n    },\n    {\n      \"login\": \"akkshitgupta\",\n      \"name\": \"Akshit Gupta\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/96991785?v=4\",\n      \"profile\": \"https://github.com/akkshitgupta\",\n      \"contributions\": [\n        \"content\",\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"Amzani\",\n      \"name\": \"samz\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/554438?v=4\",\n      \"profile\": \"https://amzani.com/\",\n      \"contributions\": [\n        \"bug\",\n        \"content\",\n        \"doc\",\n        \"example\",\n        \"projectManagement\"\n      ]\n    },\n    {\n      \"login\": \"kaushik-rishi\",\n      \"name\": \"Rishi\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/52498617?v=4\",\n      \"profile\": \"http://rishikaushik.com\",\n      \"contributions\": [\n        \"maintenance\",\n        \"infra\"\n      ]\n    },\n    {\n      \"login\": \"nickshoe\",\n      \"name\": \"nickshoe\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/32668766?v=4\",\n      \"profile\": \"https://github.com/nickshoe\",\n      \"contributions\": [\n        \"bug\",\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"AceTheCreator\",\n      \"name\": \"Ace \",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/40604284?v=4\",\n      \"profile\": \"https://github.com/AceTheCreator\",\n      \"contributions\": [\n        \"eventOrganizing\",\n        \"ideas\",\n        \"maintenance\",\n        \"talk\"\n      ]\n    },\n    {\n      \"login\": \"AnimeshKumar923\",\n      \"name\": \"Animesh Kumar\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/99868037?v=4\",\n      \"profile\": \"https://github.com/AnimeshKumar923\",\n      \"contributions\": [\n        \"content\",\n        \"doc\",\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"Lazzaretti\",\n      \"name\": \"Fabrizio Lazzaretti\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/7142819?v=4\",\n      \"profile\": \"https://lazzaretti.me/\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"Pakisan\",\n      \"name\": \"Pavel Bodiachevskii\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/3388414?v=4\",\n      \"profile\": \"https://www.linkedin.com/in/pavel-bo/\",\n      \"contributions\": [\n        \"doc\",\n        \"bug\",\n        \"ideas\",\n        \"question\"\n      ]\n    }\n  ],\n  \"commitConvention\": \"none\",\n  \"commitType\": \"docs\"\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0380859375,
          "content": "node_modules\n.vscode\n.github/.DS_Store\n"
        },
        {
          "name": ".markdownlint.yaml",
          "type": "blob",
          "size": 0.54296875,
          "content": "# MD013/line-length - Line length\n# We should keep it disabled as this line length limit do not maeke sense really\nMD013: false\n# MD033/no-inline-html - Inline HTML\n# We use HTML links in deadings all over the place. Probably this is why links in GitHub do not work, but that requires investingation if we can remove them really\nMD033: false\n# MD024/no-duplicate-heading/no-duplicate-header - Multiple headings with the same content\n# For now hard to say how that should be fixed as we have such duplicates like Fixed Fields all over the place\nMD024: false"
        },
        {
          "name": ".releaserc",
          "type": "blob",
          "size": 0.2880859375,
          "content": "---\nbranches:\n- master\n- name: next-spec\n  prerelease: true\n- name: next-major-spec\n  prerelease: true\nplugins:\n- - \"@semantic-release/commit-analyzer\"\n  - preset: conventionalcommits\n- - \"@semantic-release/release-notes-generator\"\n  - preset: conventionalcommits\n- - \"@semantic-release/github\"\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.49609375,
          "content": "# This file provides an overview of code owners in this repository.\n\n# Each line is a file pattern followed by one or more owners.\n# The last matching pattern has the most precedence.\n# For more details, read the following article on GitHub: https://help.github.com/articles/about-codeowners/.\n\n# The default owners are automatically added as reviewers when you open a pull request unless different owners are specified in the file.\n* @fmvilas @derberg @dalelane @smoya @char0n @asyncapi-bot-eve @GreenRover\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.13671875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n- Using welcoming and inclusive language\n- Being respectful of differing viewpoints and experiences\n- Gracefully accepting constructive criticism\n- Focusing on what is best for the community\n- Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n- The use of sexualized language or imagery and unwelcome sexual attention or advances\n- Trolling, insulting/derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or electronic address, without explicit permission\n- Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at fmvilas@gmail.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 12.642578125,
          "content": "# AsyncAPI Specification Contribution Guide\n\nAsyncAPI is an evolving language. This repository contains the\nspecification text as well as Pull Requests with suggested improvements and\ncontributions.\n\nContributions that do not change the interpretation of the spec but instead\nimprove legibility, fix editorial errors, clear up ambiguity and improve\nexamples are encouraged and are often merged by a spec Committer with\nlittle process.\n\nHowever, contributions that _do_ meaningfully change the interpretation of the\nspec must follow an RFC (Request For Comments) process led by a *[champion](#champion-definition)*\nthrough a series of *stages* intended to improve *visibility*, allow for\n*discussion* to reach the best solution, and arrive at *consensus*. This process\nbecomes even more important as AsyncAPI's community broadens.\n\nWhen proposing or weighing-in on any issue or pull request, consider the\n[Code of Conduct](https://github.com/asyncapi/.github/blob/master/CODE_OF_CONDUCT.md)\nto better understand expected and unacceptable behavior.\n\n\n## Contributing to AsyncAPI Libraries\n\nA common point of confusion for those who wish to contribute to AsyncAPI is where\nto start. In fact, you may have found yourself here after attempting to make an\nimprovement to an AsyncAPI library. Should a new addition be made to the AsyncAPI\nspec first or an AsyncAPI library first? Admittedly, this can become a bit of a\n[chicken-or-egg](https://en.wikipedia.org/wiki/Chicken_or_the_egg) dilemma.\n\nAsyncAPI libraries seek to be \"spec compliant\", which means they discourage\nchanges that cause them to behave differently from the spec as written. However,\nthey also encourage pull requests for changes that accompany an RFC *proposal*\nor RFC *draft*. In fact, a spec contribution RFC won't be *accepted* until it\nhas experience being implemented in an AsyncAPI library.\n\nTo allow a library to remain spec compliant while also implementing *proposals*\nand *drafts*, the library's maintainers may request that these new features are\ndisabled by default with opt-in option flags or they may simply wait to merge a\nwell-tested pull request until the spec proposal is *accepted*.\n\n\n## Guiding Principles\n\nAsyncAPI's evolution is guided by a few principles. Suggested contributions\nshould use these principles to guide the details of an RFC and decisions to\nmove forward.\n\n* **Favor no change**\n\n  As AsyncAPI is implemented in many languages under the collaboration\n  of a lot of individuals, incorporating any change has a high cost.\n  Accordingly, proposed changes must meet a very high bar of added value.\n  The burden of proof is on the contributor to illustrate this value.\n\n* **Enable new capabilities motivated by real use cases**\n\n  Every change should intend on unlocking a real and reasonable use case. Real\n  examples are always more compelling than theoretical ones, and common\n  scenarios are more compelling than rare ones. RFCs should do more than offer\n  a different way to reach an already achievable outcome.\n\n* **Simplicity and consistency over expressiveness and terseness**\n\n  \"Possible but awkward\" is often favored over more complex\n  alternatives. Simplicity (e.g. fewer concepts) is more important than\n  expressing more sophisticated ideas or writing less.\n\n* **Preserve option value**\n\n  It's hard to know what the future brings; whenever possible, decisions should\n  be made that allow for more options in the future. Sometimes this is\n  unintuitive: spec rules often begin more strict than necessary with a future\n  option to loosen when motivated by a real use case.\n\n* **Understandability is just as important as correctness**\n\n  The AsyncAPI spec, despite describing technical behavior, is intended to be\n  read by people. Use natural tone and include motivation and examples.\n\n## Breaking Change vs Non Breaking Change\n\nSpecifications are not much different than software. Some changes provided in the spec can cause breaking changes for tools that support it. For example, if one of the properties that was `required` becomes `optional`, it is considered a breaking change because some tools might depend on that property and fail if it is not provided. \n\n_Non-breaking changes:_\n- Adding a new optional property\n\n_Breaking changes:_\n- Adding a new required property\n- Making a property required\n- Making a property optional\n- Removing a property\n- Changing the type of a property in backward incompatible way\n\n## RFC Contribution Champions\n\nContributing to AsyncAPI requires a lot of dedicated work. To set clear\nexpectations and provide accountability, each proposed RFC (request for\ncomments) must have a *champion* who is responsible for addressing feedback and\ncompleting next steps. An RFC may have multiple *champions*. The spec Committers\nare not responsible for completing RFCs which lack a *champion* (though a\nCommitter may be a *champion* for an RFC).\n\nAn RFC which does not have a *champion* may not progress through stages, and can\nbecome stale. Stale proposals may be picked up by a new *champion* or may\nbe *rejected*.\n\n\n## RFC Contribution Stages\n\nRFCs are guided by a *champion* through a series of stages: *strawman*,\n*proposal*, *draft*, and *accepted* (or *rejected*), each of which has suggested\nentrance criteria and next steps detailed below. RFCs typically advance one\nstage at a time, but may advance multiple stages at a time. Stage\nadvancements occur on GitHub.\n\nIn general, it's preferable to start with a pull request so that we can best\nevaluate the RFC in detail. However, starting with an issue is also permitted if\nthe full details are not worked out.\n\nAll RFCs start as either a *strawman* or *proposal*.\n\n## Stage 0: *Strawman*\n\nAn RFC at the *strawman* stage captures a described problem or\npartially-considered solutions. A *strawman* does not need to meet any entrance\ncriteria. A *strawman's* goal is to prove or disprove a problem and guide\ndiscussion towards either rejection or a preferred solution. A *strawman* may\nbe an issue or a pull request (though an illustrative pull request is preferrable).\n\n*There is no entrance criteria for a Strawman*\n\nAs implied by the name [strawman](https://en.wikipedia.org/wiki/Straw_man_proposal),\nthe goal at this stage is to knock it down (*reject*) by considering other\npossible related solutions, showing that the motivating problem can be solved\nwith no change to the specification, or that it is not aligned with the\n*guiding principles*.\n\nOnce determined that the *strawman* is compelling, it should seek the entrance\ncriteria for *proposal*.\n\n\n## Stage 1: *Proposal*\n\nAn RFC at the *proposal* stage is a solution to a problem with enough fidelity\nto be discussed in detail. It must be backed by a willing *champion*. A\n*proposal*'s goal is to make a compelling case for acceptance by describing\nboth the problem and the solution via examples and spec edits. A *proposal*\nshould be a pull request.\n\n*Entrance criteria:*\n\n* Identified *champion*\n* Clear explanation of problem and solution\n* Illustrative examples\n* Incomplete spec edits\n* Identification of potential concerns, challenges, and drawbacks\n\nA *proposal* is subject to the same discussion as a *strawman*: ensuring that it\nis well aligned with the *guiding principles*, is a problem worth solving, and\nis the preferred solution to that problem. A *champion* is not expected to have\nconfidence in every detail at this stage and should instead focus on identifying\nand resolving issues and edge-cases. To better understand the technical\nramifications of the *proposal*, a *champion* is encouraged to implement it in a\nAsyncAPI library.\n\nMost *proposals* are expected to evolve or change and may be rejected. Therefore,\nit is unwise to rely on a *proposal* in a production environment. AsyncAPI\nlibraries *may* implement *proposals*, though are encouraged to not enable the\n*proposed* feature without explicit opt-in.\n\n\n## Stage 2: *Draft*\n\nAn RFC at the *draft* stage is a fully formed solution. There is\nconsensus the problem identified should be solved, and this particular solution\nis preferred. A *draft's* goal is to precisely and completely describe the\nsolution and resolve any concerns through library implementations. A *draft*\nmust be a pull request.\n\n*Entrance criteria:*\n\n* Consensus the solution is preferred\n* Resolution of identified concerns and challenges\n* Precisely described with spec edits\n* Compliant implementation in the [AsyncAPI JS Parser](https://www.github.com/asyncapi/parser-js) and the [AsyncAPI JSON Schema](https://github.com/asyncapi/spec-json-schemas) (might not be merged)\n\nA *proposal* becomes a *draft* when the set of problems or drawbacks have been\nfully considered and accepted or resolved, and the solution is deemed\ndesirable. A *draft*'s goal is to complete final spec edits that are ready to\nbe merged and implement the *draft* in AsyncAPI libraries along with tests to\ngain confidence that the spec text is sufficient.\n\n*Drafts* may continue to evolve and change, occasionally dramatically, and are\nnot guaranteed to be accepted. Therefore, it is unwise to rely on a *draft* in a\nproduction environment. AsyncAPI libraries *should* implement *drafts* to\nprovide valuable feedback, though are encouraged not to enable the *draft*\nfeature without explicit opt-in when possible.\n\n\n## Stage 3: *Accepted*\n\nAn RFC at the *accepted* stage is a completed solution. According to a spec\nCommitter it is ready to be merged as-is into the spec document. The RFC is\nready to be deployed in AsyncAPI libraries. An *accepted* RFC must be\nimplemented in the [AsyncAPI JS Parser](https://www.github.com/asyncapi/parser-js) and the [AsyncAPI JSON Schema](https://github.com/asyncapi/spec-json-schemas).\n\n*Entrance criteria:*\n\n* Consensus the solution is complete\n* Complete spec edits, including examples and prose\n* Compliant implementation in the [AsyncAPI JS Parser](https://www.github.com/asyncapi/parser-js) and the [AsyncAPI JSON Schema](https://github.com/asyncapi/spec-json-schemas) (fully tested and merged or ready to merge)\n\nA *draft* is *accepted* when the Committers have been convinced via\nimplementations and tests that it appropriately handles all edge cases; that the\nspec changes not only precisely describe the new syntax and semantics but\ninclude sufficient motivating prose and examples; and that the RFC includes\nedits to any other affected areas of the spec. Once *accepted*, its *champion*\nshould encourage adoption of the RFC by opening issues or pull requests on other\npopular AsyncAPI libraries.\n\nAn *accepted* RFC is merged into the AsyncAPI spec's master branch by a Committer\nand will be included in the next released revision.\n\n\n## Stage X: *Rejected*\n\nAn RFC may be *rejected* at any point and for any reason. Most rejections occur\nwhen a *strawman* is proven to be unnecessary, is misaligned with the *guiding\nprinciples*, or fails to meet the entrance criteria to become a *proposal*.\nA *proposal* may become *rejected* for similar reasons as well as if it fails to\nreach consensus or loses the confidence of its *champion*. Likewise a *draft*\nmay encounter unforeseen issues during implementations which cause it to lose\nconsensus or the confidence of its *champion*.\n\nRFCs which have lost a *champion* will not be *rejected* immediately, but may\nbecome *rejected* if they fail to attract a new *champion*.\n\nOnce *rejected*, an RFC will typically not be reconsidered. Reconsideration is\npossible if a *champion* believes the original reason for rejection no longer\napplies due to new circumstances or new evidence.\n\n## Champion definition\n\nA champion is anyone who leads the work on an RFC. It doesn't\nmean it has to be the only person working on it though. They\nare a \"person of reference\" for a given RFC implementation and\nmay or may not know about JS, relying on the help of other\ncommunity members to implement the RFC on the\n[AsyncAPI JS Parser](https://www.github.com/asyncapi/parser-js) and the [AsyncAPI JSON Schema](https://github.com/asyncapi/spec-json-schemas).\n\n## Merging pull requests\n\nA pull request can be merged if all the following conditions are met:\n\n* There is, at least, a mininum of 3 approvals from the [repository code owners](./CODEOWNERS).\n* Sufficient time has passed to let all code owners review the pull request. As of now, it should be a minimum of 1 week. If all code owners have already approved a pull request, it's ok not to wait for this period of time.\n\n## Linting specification document\n\nAlways make sure that the specification markdown file has no markdown-related errors.\n\nInstead of waiting for GitHub Actions workflow to check markdown file, you can do it locally by calling the following docker command:\n```bash\ndocker run -v $PWD:/workdir ghcr.io/igorshubovych/markdownlint-cli:v0.35.0 \"spec/asyncapi.md\"\n```\n\n## References\nThis document was adapted from the [GraphQL Specification Contribution Guide](https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.048828125,
          "content": "AsyncAPI Initiative\nCopyright The Linux Foundation"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 26.7529296875,
          "content": "[![AsyncAPI Logo](./assets/logo.png)](https://www.asyncapi.com)\n\n## Read the specification\n\nThe latest draft specification can be found at [spec/asyncapi.md](./spec/asyncapi.md) which tracks the latest commit to the master branch in this repository.\n\n**The human-readable markdown file is the source of truth for the specification.**\n\n- [Version 3.0.0](https://github.com/asyncapi/spec/blob/v3.0.0/spec/asyncapi.md) (latest) ([website](https://www.asyncapi.com/docs/reference/specification/latest))\n<details>\n  <summary>Click to see reference links to older versions of the specification.</summary>\n\n- [Version 2.6.0](https://github.com/asyncapi/spec/blob/v2.6.0/spec/asyncapi.md)\n- [Version 2.5.0](https://github.com/asyncapi/spec/blob/v2.5.0/spec/asyncapi.md)\n- [Version 2.4.0](https://github.com/asyncapi/spec/blob/v2.4.0/spec/asyncapi.md)\n- [Version 2.3.0](https://github.com/asyncapi/spec/blob/v2.3.0/spec/asyncapi.md)\n- [Version 2.2.0](https://github.com/asyncapi/spec/blob/v2.2.0/spec/asyncapi.md)\n- [Version 2.1.0](https://github.com/asyncapi/spec/blob/v2.1.0/spec/asyncapi.md)\n- [Version 2.0.0](https://github.com/asyncapi/spec/blob/2.0.0/versions/2.0.0/asyncapi.md)\n- [Version 1.2.0](https://github.com/asyncapi/spec/blob/1.2.0/README.md) (deprecated)\n- [Version 1.1.0](https://github.com/asyncapi/spec/blob/1.1.0/README.md) (deprecated)\n- [Version 1.0.0](https://github.com/asyncapi/spec/blob/1.0.0/README.md) (deprecated)\n</details>\n\n</br>\n\nLooking for the JSON Schema files? Check out our [spec-json-schemas](https://github.com/asyncapi/spec-json-schemas) repo.\n\nFeel like contributing? Check out our [contributor's guide](./CONTRIBUTING.md).\n\n## Examples\n\nCheck out the [examples](https://github.com/asyncapi/asyncapi/blob/master/examples) directory for examples.\n\n## Case Studies and Adopters\n\nCheck out the [AsyncAPI website](https://www.asyncapi.com/casestudies) to see the list of AsyncAPI adopters and their use cases.\n\n## Our Sponsors\n\nWant to become a sponsor? Learn [what we do with sponsors' money](https://www.asyncapi.com/finance) and [join the club](https://opencollective.com/asyncapi).\n\n### Platinum\n\n<a href=\"https://solace.com\" target=\"_blank\">\n  <img src=\"./assets/solace.png\" alt=\"Solace logo\" height=\"70\">\n</a>\n&nbsp;&nbsp;&nbsp;&nbsp;\n<a href=\"https://www.gravitee.io\" target=\"_blank\">\n  <img src=\"./assets/Gravitee.png\" alt=\"Gravitee\" height=\"70\">\n</a>\n&nbsp;&nbsp;&nbsp;&nbsp;\n<a href=\"https://postman.com\" target=\"_blank\">\n  <img src=\"./assets/postman.png\" alt=\"Postman\" height=\"90\">\n</a>\n\n### Gold\n  \n<a href=\"https://ibm.com\" target=\"_blank\">\n  <img src=\"./assets/ibm.png\" alt=\"IBM\" height=\"70\">\n</a>\n\n### Silver\n\n<a href=\"https://bump.sh/asyncapi?utm_source=asyncapi&utm_medium=github_readme&utm_campaign=sponsor\" target=\"_blank\">\n  <img src=\"./assets/bump-sh-white-bg.png\" alt=\"Bump.sh\" height=\"70\">\n</a>\n&nbsp;&nbsp;&nbsp;&nbsp;\n<a href=\"https://www.svix.com/\" target=\"_blank\">\n  <img src=\"./assets/svix.png\" alt=\"Svix\" height=\"70\">\n</a>\n\n<br/>\n\n<a href=\"https://www.hivemq.com/\" target=\"_blank\">\n  <img src=\"./assets/hivemq-white-bg.png\" alt=\"HiveMQ\" height=\"70\">\n</a>\n&nbsp;&nbsp;&nbsp;&nbsp;\n<a href=\"https://www.aklivity.io/\" target=\"_blank\">\n  <img src=\"./assets/aklivity.png\" alt=\"Aklivity\" height=\"70\">\n</a>\n\n<br/>\n\n<a href=\"https://smartbear.com\" target=\"_blank\">\n  <img src=\"./assets/smartbear.png\" alt=\"SmartBear\" height=\"70\">\n</a>\n&nbsp;&nbsp;&nbsp;&nbsp;\n<a href=\"https://www.hdi.global\" target=\"_blank\">\n  <img src=\"./assets/hdi.png\" alt=\"HDI\" height=\"70\">\n</a>\n\n<br/>\n\n<a href=\"https://route4me.com\" target=\"_blank\">\n  <img src=\"./assets/route4me.png\" alt=\"Best Route Planning and Route Optimization Software\" height=\"70\">\n</a>\n\n### Bronze\n\n<a href=\"https://redhat.com\" target=\"_blank\">\n  <img src=\"./assets/redhat.png\" alt=\"RedHat\" height=\"70\">\n</a>\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"http://www.fmvilas.com\"><img src=\"https://avatars3.githubusercontent.com/u/242119?v=4?s=100\" width=\"100px;\" alt=\"Fran Méndez\"/><br /><sub><b>Fran Méndez</b></sub></a><br /><a href=\"#question-fmvilas\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/asyncapi/spec/issues?q=author%3Afmvilas\" title=\"Bug reports\">🐛</a> <a href=\"#blog-fmvilas\" title=\"Blogposts\">📝</a> <a href=\"https://github.com/asyncapi/spec/commits?author=fmvilas\" title=\"Documentation\">📖</a> <a href=\"#ideas-fmvilas\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#infra-fmvilas\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#maintenance-fmvilas\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3Afmvilas\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#tutorial-fmvilas\" title=\"Tutorials\">✅</a> <a href=\"#talk-fmvilas\" title=\"Talks\">📢</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"http://resume.github.io/?derberg\"><img src=\"https://avatars1.githubusercontent.com/u/6995927?v=4?s=100\" width=\"100px;\" alt=\"Lukasz Gornicki\"/><br /><sub><b>Lukasz Gornicki</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/commits?author=derberg\" title=\"Documentation\">📖</a> <a href=\"#ideas-derberg\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3Aderberg\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#question-derberg\" title=\"Answering Questions\">💬</a> <a href=\"#blog-derberg\" title=\"Blogposts\">📝</a> <a href=\"#talk-derberg\" title=\"Talks\">📢</a> <a href=\"#maintenance-derberg\" title=\"Maintenance\">🚧</a> <a href=\"#infra-derberg\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"http://mermade.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/21603?v=4?s=100\" width=\"100px;\" alt=\"Mike Ralphson\"/><br /><sub><b>Mike Ralphson</b></sub></a><br /><a href=\"#question-MikeRalphson\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/asyncapi/spec/commits?author=MikeRalphson\" title=\"Documentation\">📖</a> <a href=\"#ideas-MikeRalphson\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#infra-MikeRalphson\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3AMikeRalphson\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#maintenance-MikeRalphson\" title=\"Maintenance\">🚧</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/rmelian\"><img src=\"https://avatars3.githubusercontent.com/u/4565267?v=4?s=100\" width=\"100px;\" alt=\"raisel melian\"/><br /><sub><b>raisel melian</b></sub></a><br /><a href=\"#question-rmelian\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/asyncapi/spec/issues?q=author%3Armelian\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/asyncapi/spec/commits?author=rmelian\" title=\"Documentation\">📖</a> <a href=\"#ideas-rmelian\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-rmelian\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3Armelian\" title=\"Reviewed Pull Requests\">👀</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/SensibleWood\"><img src=\"https://avatars2.githubusercontent.com/u/2420069?v=4?s=100\" width=\"100px;\" alt=\"Chris Wood\"/><br /><sub><b>Chris Wood</b></sub></a><br /><a href=\"#ideas-SensibleWood\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/asyncapi/spec/commits?author=SensibleWood\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/jschabowsky\"><img src=\"https://avatars1.githubusercontent.com/u/26606293?v=4?s=100\" width=\"100px;\" alt=\"Jonathan Schabowsky\"/><br /><sub><b>Jonathan Schabowsky</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/commits?author=jschabowsky\" title=\"Documentation\">📖</a> <a href=\"#ideas-jschabowsky\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/vromero\"><img src=\"https://avatars1.githubusercontent.com/u/1119553?v=4?s=100\" width=\"100px;\" alt=\"Victor Romero\"/><br /><sub><b>Victor Romero</b></sub></a><br /><a href=\"#ideas-vromero\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3Avromero\" title=\"Reviewed Pull Requests\">👀</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"http://antoniogarrote.wordpress.com\"><img src=\"https://avatars1.githubusercontent.com/u/8277?v=4?s=100\" width=\"100px;\" alt=\"Antonio Garrote\"/><br /><sub><b>Antonio Garrote</b></sub></a><br /><a href=\"#ideas-antoniogarrote\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3Aantoniogarrote\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"https://github.com/asyncapi/spec/commits?author=antoniogarrote\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://ramses.tech\"><img src=\"https://avatars0.githubusercontent.com/u/9660342?v=4?s=100\" width=\"100px;\" alt=\"Jonathan Stoikovitch\"/><br /><sub><b>Jonathan Stoikovitch</b></sub></a><br /><a href=\"#example-jstoiko\" title=\"Examples\">💡</a> <a href=\"#ideas-jstoiko\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3Ajstoiko\" title=\"Reviewed Pull Requests\">👀</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/jonaslagoni\"><img src=\"https://avatars1.githubusercontent.com/u/13396189?v=4?s=100\" width=\"100px;\" alt=\"Jonas Lagoni\"/><br /><sub><b>Jonas Lagoni</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/issues?q=author%3Ajonaslagoni\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/asyncapi/spec/commits?author=jonaslagoni\" title=\"Documentation\">📖</a> <a href=\"#ideas-jonaslagoni\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#question-jonaslagoni\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3Ajonaslagoni\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#example-jonaslagoni\" title=\"Examples\">💡</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://waleedashraf.me/\"><img src=\"https://avatars0.githubusercontent.com/u/8335457?v=4?s=100\" width=\"100px;\" alt=\"Waleed Ashraf\"/><br /><sub><b>Waleed Ashraf</b></sub></a><br /><a href=\"#talk-WaleedAshraf\" title=\"Talks\">📢</a> <a href=\"#ideas-WaleedAshraf\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/asyncapi/spec/commits?author=WaleedAshraf\" title=\"Documentation\">📖</a> <a href=\"#example-WaleedAshraf\" title=\"Examples\">💡</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/jerzyn\"><img src=\"https://avatars0.githubusercontent.com/u/1447151?v=4?s=100\" width=\"100px;\" alt=\"Andrzej Jarzyna\"/><br /><sub><b>Andrzej Jarzyna</b></sub></a><br /><a href=\"#talk-jerzyn\" title=\"Talks\">📢</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://linkedin.com/in/emmelyn\"><img src=\"https://avatars1.githubusercontent.com/u/4294106?v=4?s=100\" width=\"100px;\" alt=\"Emmelyn Wang\"/><br /><sub><b>Emmelyn Wang</b></sub></a><br /><a href=\"#blog-lifewingmate\" title=\"Blogposts\">📝</a> <a href=\"#ideas-lifewingmate\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/asyncapi/spec/commits?author=lifewingmate\" title=\"Documentation\">📖</a> <a href=\"#talk-lifewingmate\" title=\"Talks\">📢</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://marcd.dev\"><img src=\"https://avatars0.githubusercontent.com/u/1815312?v=4?s=100\" width=\"100px;\" alt=\"Marc DiPasquale\"/><br /><sub><b>Marc DiPasquale</b></sub></a><br /><a href=\"#blog-Mrc0113\" title=\"Blogposts\">📝</a> <a href=\"#talk-Mrc0113\" title=\"Talks\">📢</a> <a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3AMrc0113\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"https://github.com/asyncapi/spec/issues?q=author%3AMrc0113\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-Mrc0113\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#video-Mrc0113\" title=\"Videos\">📹</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"http://www.gerald-loeffler.net/\"><img src=\"https://avatars.githubusercontent.com/u/1985716?v=4?s=100\" width=\"100px;\" alt=\"Gerald Loeffler\"/><br /><sub><b>Gerald Loeffler</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/commits?author=GeraldLoeffler\" title=\"Documentation\">📖</a> <a href=\"https://github.com/asyncapi/spec/issues?q=author%3AGeraldLoeffler\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-GeraldLoeffler\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"http://dalelane.co.uk/\"><img src=\"https://avatars.githubusercontent.com/u/1444788?v=4?s=100\" width=\"100px;\" alt=\"Dale Lane\"/><br /><sub><b>Dale Lane</b></sub></a><br /><a href=\"#blog-dalelane\" title=\"Blogposts\">📝</a> <a href=\"#ideas-dalelane\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#video-dalelane\" title=\"Videos\">📹</a> <a href=\"#talk-dalelane\" title=\"Talks\">📢</a> <a href=\"#tutorial-dalelane\" title=\"Tutorials\">✅</a> <a href=\"https://github.com/asyncapi/spec/commits?author=dalelane\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/magicmatatjahu\"><img src=\"https://avatars.githubusercontent.com/u/20404945?v=4?s=100\" width=\"100px;\" alt=\"Maciej Urbańczyk\"/><br /><sub><b>Maciej Urbańczyk</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3Amagicmatatjahu\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#ideas-magicmatatjahu\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#question-magicmatatjahu\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/asyncapi/spec/issues?q=author%3Amagicmatatjahu\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/asyncapi/spec/commits?author=magicmatatjahu\" title=\"Documentation\">📖</a> <a href=\"#example-magicmatatjahu\" title=\"Examples\">💡</a> <a href=\"#maintenance-magicmatatjahu\" title=\"Maintenance\">🚧</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://vladimirgorej.com/\"><img src=\"https://avatars.githubusercontent.com/u/193286?v=4?s=100\" width=\"100px;\" alt=\"Vladimir Gorej\"/><br /><sub><b>Vladimir Gorej</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/commits?author=char0n\" title=\"Documentation\">📖</a> <a href=\"https://github.com/asyncapi/spec/issues?q=author%3Achar0n\" title=\"Bug reports\">🐛</a> <a href=\"#example-char0n\" title=\"Examples\">💡</a> <a href=\"#ideas-char0n\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3Achar0n\" title=\"Reviewed Pull Requests\">👀</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"http://www.lornajane.net/\"><img src=\"https://avatars.githubusercontent.com/u/172607?v=4?s=100\" width=\"100px;\" alt=\"Lorna Jane Mitchell\"/><br /><sub><b>Lorna Jane Mitchell</b></sub></a><br /><a href=\"#talk-lornajane\" title=\"Talks\">📢</a> <a href=\"#ideas-lornajane\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"http://medium.com/@lbroudoux\"><img src=\"https://avatars.githubusercontent.com/u/1538635?v=4?s=100\" width=\"100px;\" alt=\"Laurent Broudoux\"/><br /><sub><b>Laurent Broudoux</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/commits?author=lbroudoux\" title=\"Documentation\">📖</a> <a href=\"#blog-lbroudoux\" title=\"Blogposts\">📝</a> <a href=\"#talk-lbroudoux\" title=\"Talks\">📢</a> <a href=\"#example-lbroudoux\" title=\"Examples\">💡</a> <a href=\"#ideas-lbroudoux\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3Albroudoux\" title=\"Reviewed Pull Requests\">👀</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/jmenning-solace\"><img src=\"https://avatars.githubusercontent.com/u/62108913?v=4?s=100\" width=\"100px;\" alt=\"Jesse Menning\"/><br /><sub><b>Jesse Menning</b></sub></a><br /><a href=\"#blog-jmenning-solace\" title=\"Blogposts\">📝</a> <a href=\"#talk-jmenning-solace\" title=\"Talks\">📢</a> <a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3Ajmenning-solace\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#ideas-jmenning-solace\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/smoya\"><img src=\"https://avatars.githubusercontent.com/u/1083296?v=4?s=100\" width=\"100px;\" alt=\"Sergio Moya\"/><br /><sub><b>Sergio Moya</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3Asmoya\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#ideas-smoya\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#question-smoya\" title=\"Answering Questions\">💬</a> <a href=\"#blog-smoya\" title=\"Blogposts\">📝</a> <a href=\"https://github.com/asyncapi/spec/issues?q=author%3Asmoya\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/asyncapi/spec/commits?author=smoya\" title=\"Documentation\">📖</a> <a href=\"#example-smoya\" title=\"Examples\">💡</a> <a href=\"#maintenance-smoya\" title=\"Maintenance\">🚧</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/balogal\"><img src=\"https://avatars.githubusercontent.com/u/80794567?v=4?s=100\" width=\"100px;\" alt=\"Alexander Balogh\"/><br /><sub><b>Alexander Balogh</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/commits?author=balogal\" title=\"Documentation\">📖</a> <a href=\"https://github.com/asyncapi/spec/issues?q=author%3Abalogal\" title=\"Bug reports\">🐛</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/KhudaDad414\"><img src=\"https://avatars.githubusercontent.com/u/32505158?v=4?s=100\" width=\"100px;\" alt=\"Khuda Dad Nomani\"/><br /><sub><b>Khuda Dad Nomani</b></sub></a><br /><a href=\"#example-KhudaDad414\" title=\"Examples\">💡</a> <a href=\"https://github.com/asyncapi/spec/issues?q=author%3AKhudaDad414\" title=\"Bug reports\">🐛</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/aaronkorver\"><img src=\"https://avatars.githubusercontent.com/u/8387325?v=4?s=100\" width=\"100px;\" alt=\"Aaron Korver\"/><br /><sub><b>Aaron Korver</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/commits?author=aaronkorver\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/xunto\"><img src=\"https://avatars.githubusercontent.com/u/5288053?v=4?s=100\" width=\"100px;\" alt=\"Orlov Valentine\"/><br /><sub><b>Orlov Valentine</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/commits?author=xunto\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://lejenome.tik.tn\"><img src=\"https://avatars.githubusercontent.com/u/2295241?v=4?s=100\" width=\"100px;\" alt=\"Moez Bouhlel\"/><br /><sub><b>Moez Bouhlel</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/commits?author=lejenome\" title=\"Documentation\">📖</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/luphieanza\"><img src=\"https://avatars.githubusercontent.com/u/20577131?v=4?s=100\" width=\"100px;\" alt=\"Muhammad Rafly Andrianza\"/><br /><sub><b>Muhammad Rafly Andrianza</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/commits?author=luphieanza\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://danielkocot.github.io/\"><img src=\"https://avatars.githubusercontent.com/u/466609?v=4?s=100\" width=\"100px;\" alt=\"Daniel Kocot\"/><br /><sub><b>Daniel Kocot</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/commits?author=danielkocot\" title=\"Documentation\">📖</a> <a href=\"#example-danielkocot\" title=\"Examples\">💡</a> <a href=\"#ideas-danielkocot\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/sekharbans-ebay\"><img src=\"https://avatars.githubusercontent.com/u/66145510?v=4?s=100\" width=\"100px;\" alt=\"sekharbans-ebay\"/><br /><sub><b>sekharbans-ebay</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/commits?author=sekharbans-ebay\" title=\"Documentation\">📖</a> <a href=\"#example-sekharbans-ebay\" title=\"Examples\">💡</a> <a href=\"#ideas-sekharbans-ebay\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"http://www.damaru.com/\"><img src=\"https://avatars.githubusercontent.com/u/3926925?v=4?s=100\" width=\"100px;\" alt=\"Michael Davis\"/><br /><sub><b>Michael Davis</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/issues?q=author%3Adamaru-inc\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/asyncapi/spec/commits?author=damaru-inc\" title=\"Documentation\">📖</a> <a href=\"#example-damaru-inc\" title=\"Examples\">💡</a> <a href=\"#ideas-damaru-inc\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/GreenRover\"><img src=\"https://avatars.githubusercontent.com/u/512850?v=4?s=100\" width=\"100px;\" alt=\"Heiko Henning\"/><br /><sub><b>Heiko Henning</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/issues?q=author%3AGreenRover\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/asyncapi/spec/commits?author=GreenRover\" title=\"Code\">💻</a> <a href=\"#content-GreenRover\" title=\"Content\">🖋</a> <a href=\"https://github.com/asyncapi/spec/commits?author=GreenRover\" title=\"Documentation\">📖</a> <a href=\"#example-GreenRover\" title=\"Examples\">💡</a> <a href=\"#ideas-GreenRover\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-GreenRover\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3AGreenRover\" title=\"Reviewed Pull Requests\">👀</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"http://www.docsasecosystem.com\"><img src=\"https://avatars.githubusercontent.com/u/19964402?v=4?s=100\" width=\"100px;\" alt=\"Quetzalli \"/><br /><sub><b>Quetzalli </b></sub></a><br /><a href=\"#content-alequetzalli\" title=\"Content\">🖋</a> <a href=\"https://github.com/asyncapi/spec/commits?author=alequetzalli\" title=\"Documentation\">📖</a> <a href=\"#example-alequetzalli\" title=\"Examples\">💡</a> <a href=\"#ideas-alequetzalli\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3Aalequetzalli\" title=\"Reviewed Pull Requests\">👀</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/akkshitgupta\"><img src=\"https://avatars.githubusercontent.com/u/96991785?v=4?s=100\" width=\"100px;\" alt=\"Akshit Gupta\"/><br /><sub><b>Akshit Gupta</b></sub></a><br /><a href=\"#content-akkshitgupta\" title=\"Content\">🖋</a> <a href=\"https://github.com/asyncapi/spec/commits?author=akkshitgupta\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://amzani.com/\"><img src=\"https://avatars.githubusercontent.com/u/554438?v=4?s=100\" width=\"100px;\" alt=\"samz\"/><br /><sub><b>samz</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/issues?q=author%3AAmzani\" title=\"Bug reports\">🐛</a> <a href=\"#content-Amzani\" title=\"Content\">🖋</a> <a href=\"https://github.com/asyncapi/spec/commits?author=Amzani\" title=\"Documentation\">📖</a> <a href=\"#example-Amzani\" title=\"Examples\">💡</a> <a href=\"#projectManagement-Amzani\" title=\"Project Management\">📆</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"http://rishikaushik.com\"><img src=\"https://avatars.githubusercontent.com/u/52498617?v=4?s=100\" width=\"100px;\" alt=\"Rishi\"/><br /><sub><b>Rishi</b></sub></a><br /><a href=\"#maintenance-kaushik-rishi\" title=\"Maintenance\">🚧</a> <a href=\"#infra-kaushik-rishi\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/nickshoe\"><img src=\"https://avatars.githubusercontent.com/u/32668766?v=4?s=100\" width=\"100px;\" alt=\"nickshoe\"/><br /><sub><b>nickshoe</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/issues?q=author%3Anickshoe\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/asyncapi/spec/commits?author=nickshoe\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/AceTheCreator\"><img src=\"https://avatars.githubusercontent.com/u/40604284?v=4?s=100\" width=\"100px;\" alt=\"Ace \"/><br /><sub><b>Ace </b></sub></a><br /><a href=\"#eventOrganizing-AceTheCreator\" title=\"Event Organizing\">📋</a> <a href=\"#ideas-AceTheCreator\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-AceTheCreator\" title=\"Maintenance\">🚧</a> <a href=\"#talk-AceTheCreator\" title=\"Talks\">📢</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://github.com/AnimeshKumar923\"><img src=\"https://avatars.githubusercontent.com/u/99868037?v=4?s=100\" width=\"100px;\" alt=\"Animesh Kumar\"/><br /><sub><b>Animesh Kumar</b></sub></a><br /><a href=\"#content-AnimeshKumar923\" title=\"Content\">🖋</a> <a href=\"https://github.com/asyncapi/spec/commits?author=AnimeshKumar923\" title=\"Documentation\">📖</a> <a href=\"#maintenance-AnimeshKumar923\" title=\"Maintenance\">🚧</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://lazzaretti.me/\"><img src=\"https://avatars.githubusercontent.com/u/7142819?v=4?s=100\" width=\"100px;\" alt=\"Fabrizio Lazzaretti\"/><br /><sub><b>Fabrizio Lazzaretti</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/commits?author=Lazzaretti\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"https://www.linkedin.com/in/pavel-bo/\"><img src=\"https://avatars.githubusercontent.com/u/3388414?v=4?s=100\" width=\"100px;\" alt=\"Pavel Bodiachevskii\"/><br /><sub><b>Pavel Bodiachevskii</b></sub></a><br /><a href=\"https://github.com/asyncapi/spec/commits?author=Pakisan\" title=\"Documentation\">📖</a> <a href=\"https://github.com/asyncapi/spec/issues?q=author%3APakisan\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-Pakisan\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#question-Pakisan\" title=\"Answering Questions\">💬</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n"
        },
        {
          "name": "RELEASE_PROCESS.md",
          "type": "blob",
          "size": 21.3193359375,
          "content": "# Release Process of the AsyncAPI Specification\n\nThis document is meant to explain the release process of the AsyncAPI specification. It aims to describe all details of the process so that any member of the community can jump in and help coordinate.\n\nIt covers:\n- **[Who?](#who)** - who is responsible for doing what in a release\n- **[When?](#when)** - when releases happen\n- **[What?](#what)** - what is covered by this document\n- **[How?](#how)** - a description of the steps needed for a release\n\n---\n## Who?\n\n### \"Release coordinator\"\n\nAsyncAPI specification release involves not only spec release but also the release of AsyncAPI-maintained tools. Therefore it requires a single person called `release coordinator` to ensure the release goes well throughout all phases. The release coordinator is responsible for working through the process described below.\n\nThe release coordinator doesn't have to do all the work alone. The release coordinator needs to find the right people to do the work required for a given phase and engage as many people as needed.\n\nEach release can have a different release coordinator. If you are interested and would like to know more, [join our Slack workspace](https://www.asyncapi.com/slack-invite) and visit the `11_how-to-contribute` channel.\n\n### Code owners\n\nMany of the steps needed to release a new version of the AsyncAPI specification (e.g. merging, creating branches, creating releases) need support from administrators for individual github.com/asyncapi repositories.\n\nEach repository contains a `CODEOWNERS` file (e.g. https://github.com/asyncapi/parser-js/blob/master/CODEOWNERS) that identifies the people who can help.\n\n---\n## When?\n\n### Release cadence\n\nAsyncAPI releases happen regularly in the following months:\n- January\n- April\n- June\n- September\n\nRegular releases concern only major and minor releases. We do not decide up front if the next release is major or minor. This decision depends on the proposals for changes in the specification and how much they affect specification and tooling in a given release cycle.\n\nPatch releases are automatically released and published.\n\n### Release date philosophy\n\nThe release is scheduled for a given month, not a specific day. We will release once everything is ready, and won't wait until the last day of the month with the release.\n\nWe release often, so anything that isn't ready can wait until the next release (e.g. it can be released in June if the change will not make it in April). Our priority is the quality, and not quantity, of the features. Quality means that changes for a release is properly delivered in as many tools as possible with very good documentation and examples.\n\n---\n## What?\n\n### Repositories\n\nGithub repositories that need to be updated at the same time to enable a release, in a coordinated way, are:\n- [spec](https://github.com/asyncapi/spec) - the specification file\n- [spec-json-schemas](https://github.com/asyncapi/spec-json-schemas) - the JSON schema\n- [parser-js](https://github.com/asyncapi/parser-js) - the JavaScript parser\n- [website](https://github.com/asyncapi/website) - the website\n\n---\n## How?\n\nThe steps described here are not intended to be strictly chronological. For a single release, it might make sense to start some pieces of work in a slightly different order. The intention of the steps here is meant to give release coordinators a rough idea of the sequence involved.\n\n### Step 1 - kick off call\n\nA nice way to start a new release is to do one or more of the initial steps on an open live call/meeting.\n\nThis isn't a required step, but possible benefits include:\n- raising awareness of the upcoming release\n- giving a new release coordinator support and initial direction to help them get started\n- allowing potential future release coordinators to see what is involved\n\nExamples of arranging a contribution call like this can be found in the [community repository](https://github.com/asyncapi/community/issues?q=is%3Aissue+label%3Ameeting+contributor-first+)\n\n\n### Step 2 - create a release issue\n\nTo allow the community to see what is currently being considered for inclusion in a release, and to give easy, at-a-glance visibility over the progress, create a new Github issue in the [spec](https://github.com/asyncapi/spec) repository.\n\nThis issue should be updated as each of the following steps are completed.\n\nA [template for a new release issue](https://github.com/asyncapi/spec/blob/master/.github/ISSUE_TEMPLATE/release.md) is available.\n\nAn example is the [release issue for the 2.3.0](https://github.com/asyncapi/spec/issues/675) release.\n\n### Step 3 - update release branches\n\nRelease branches should be present in the following repositories:\n\n- [spec](https://github.com/asyncapi/spec) where contributor works with the specification file,\n- [spec-json-schemas](https://github.com/asyncapi/spec-json-schemas) where contributor pushes changes to JSON Schema of the spec,\n- [parser-js](https://github.com/asyncapi/parser-js) where contributor makes necessary changes in the JavaScript Parser.\n \nDepending on the type of release you are working on, you should use one branch or another:\n\n- `next-spec`: for releasing minor versions. For example, `2.3.0` to `2.4.0`.\n- `next-major-spec`: for releasing major versions. For example, `2.4.0` to `3.0.0`.\n\nOnce you know which branch you should use, there are some initial changes that need to be made.\n\nThe process for doing this is the same for each of these:\n- the [release coordinator](#%22release-coordinator%22) should create a fork, if not created yet, of the relevant repository for these changes.\n- the [release coordinator](#%22release-coordinator%22) should ensure the chosen **release branch** is up-to-date with the **default branch** (normally `master`) before adding any changes.\n- the commit message for the change should start with `chore:`\n- the change should be contributed in a pull request targeting the chosen **release branch**. \n- the [release coordinator](#%22release-coordinator%22) will need to ask the [code owners](#code-owners) for the relevant repository to approve and merge this pull request\n\n#### Step 3.1 - Update version numbers in official examples\nRepository: [spec](https://github.com/asyncapi/spec)\n\nExamples are located in the `examples/` folder in the [spec](https://github.com/asyncapi/spec) repository. They should all be updated to the new version number.\n\nAn example of doing this is:\n- this [commit from the 2.3.0 release](https://github.com/dalelane/spec/commit/8c521539cd875470ea8e89cf3ab7ffd81be64788)\n- this [pull request from the 2.3.0 release](https://github.com/asyncapi/spec/pull/676)\n\n#### Step 3.2 - Update version number in the spec\nRepository: [spec](https://github.com/asyncapi/spec)\n\nReferences to the latest version in `spec/asyncapi.md` should be updated to the new version number.\n\nExamples of doing this are:\n- this [commit from the 2.3.0 release](https://github.com/asyncapi/spec/commit/1f29d803ca801756d4ea3f676bcf7e7751478de6)\n- this [commit from the 2.3.0 release](https://github.com/asyncapi/spec/commit/7f827a880fa3ddcbc9a39d50e41502bc450443bc)\n\n#### Step 3.3 - Add new reference to the latest spec version in README\nThe new release should be listed in the [README.md](README.md) file and marked as `(latest)`.\n\nAn example of doing this is:\n- this [commit from the 2.3.0 release](https://github.com/asyncapi/spec/pull/710/commits/22ba6c433ddbeeeda38f5aed55708826da62cf70)\n\n#### Step 3.4 - Create a new JSON schema file for the new version\nRepository: [spec-json-schemas](https://github.com/asyncapi/spec-json-schemas)\n\nTo create a new version, please read [Creating a new version](https://github.com/asyncapi/spec-json-schemas#creating-a-new-version).\n\nIt should be named with the version of the new release, and a link should be added to the `index.js` file (in the same repository).\n\nAn example of doing this is:\n- this [commit from the 3.0.0 release](https://github.com/asyncapi/spec-json-schemas/pull/221/files)\n- this [pull request from the 3.0.0 release](https://github.com/asyncapi/spec-json-schemas/pull/221)\n\n#### Step 3.5 - Update the list of AsyncAPI schema MIME types with the new version\nRepository: [parser-js](https://github.com/asyncapi/parser-js)\n\nThe file to be updated is `lib/asyncapiSchemaFormatParser.js` in the [parser-js](https://github.com/asyncapi/parser-js) repository.\n\nThe new version number should be added to the list in the `getMimeTypes` function.\n\nAn example of doing this is:\n- this [pull request from the 2.3.0 release](https://github.com/asyncapi/parser-js/pull/426)\n\n\n### Step 4 - prepare announcement blog post\n\nEach new release is announced by a blog post. You can see all of these at https://www.asyncapi.com/blog?tags=Release+Notes\n\nThe [release coordinator](#%22release-coordinator%22) should create an empty placeholder blog post that can be added to by different contributors to the release throughout the release process.\n\nThe steps to follow for this are:\n- Create a fork of the [website](https://github.com/asyncapi/website) repository\n- Create a new file at `pages/blog/release-notes-X.X.X.md` (replacing `X.X.X` with the version number for the release)\n- Add a standard header at the top of the file (see the release notes for [2.2.0](https://raw.githubusercontent.com/asyncapi/website/master/pages/blog/release-notes-2.2.0.md) and [2.3.0](https://raw.githubusercontent.com/asyncapi/website/master/pages/blog/release-notes-2.3.0.md) for examples)\n- Add a (webp format) cover image to the `public/img/posts/release-notes-X.X.X/` folder, and update the `cover` attribute of the blog post header with it. (**Make sure to attribute the image correctly** - unsplash.com is a good source of free images for this). See [this commit from the 2.3.0 release](https://github.com/asyncapi/website/pull/512/commits/4050ca0540684f5188300e0c27efc713a6ba1ec2) for an example of doing this.\n- Add a (webp format) profile picture of the release coordinator to the `public/img/avatars` folder, and update the `authors` attribute of the blog post header with it. See [this commit from the 2.3.0 release](https://github.com/asyncapi/website/pull/512/commits/006f7df26b0d0803ed2e1dd6b8004dfdaec15617) for an example of doing this.\n- Open a **draft** pull request against the [website](https://github.com/asyncapi/website/) repository. Make sure the option **Allow edits and access to secrets by maintainers** is selected to enable support from maintainers.\n<img src=\"./assets/release_process/draft_pr.png\" alt=\"This image shows example pull request created in GitHub with release notes for AsyncAPI specification\" height=\"300\">\n\nAn example of doing this is:\n- this [pull request from the 2.3.0 release](https://github.com/asyncapi/website/pull/512)\n\n\n### Step 5 - create pull requests\n\nPull requests should be opened for all [repositories covered by this process](#repositories).\n\nThese should be full, not draft, pull requests to allow automated tests to run.\n\nThey should point from the [release branches](#step-3---create-release-branches) to the default/master branches for each repository.\n\nAdd a **do-not-merge** label to the pull request by making a comment in the PR saying `/dnm`.\nAdd a **autoupdate** label to the pull request by making a comment in the PR saying `/au`.\n\n_Note: The automation bot will keep the release branch up to date with the latest commits from the master branch (so long as there are no conflicts)._\n\n\n### Step 6 - bring updates into release branch\n\nThe [release coordinator](#%22release-coordinator%22) should help to seek out possible updates that are good candidates for including in the release.\n\nThere are lots of ways to do this:\n- ask for contributions in [Slack](https://www.asyncapi.com/slack-invite)\n- ask for suggestions at a [community meeting](https://github.com/asyncapi/community/issues?q=is%3Aissue+is%3Aopen+label%3Ameeting)\n- look for open accepted issues (see the [contribution guide](CONTRIBUTING.md) for a description of the requirements for a proposal to reach `Stage 3: Accepted`)\n- look for open pull requests in the [repositories covered by this process](#repositories)\n\nFor each feature that is being brought into the release, a pull request should be created from the feature branch (the branch with the accepted changes in) to the [release branch](#step-3---create-release-branches).\n\nPull requests must be:\n- labeled as an accepted proposal,\n- created against the feature branch,\n- created in all repositories specified in contribution guide\n\n\n### Step 7 - update announcement blog post\n\nAs features are identified for inclusion in the release, the [draft announcement blog post](#step-6---prepare-announcement-blog-post) should be updated with descriptions of them. The [release cooordinator](#%22release-coordinator%22) should coordinate with the feature contributors to write a description of each change. They should be able to provide input and also be allowed to work as co-authors for the release notes post.\n\nChanges in the specification need to be well described. We need clear information on what has changed, why, and who contributed to the change. The purpose of the announcement blog post is to be a more user-friendly alternative to a regular changelog.\n\nEvery feature added to the [release branch](#step-3---create-release-branches) needs to be properly described in the release notes post.\n\n\n### Step 8 - prepare release notes\n\nIn addition to the [announcement blog post](#step-9---update-announcement-blog-post), the [release coordinator](#%22release-coordinator%22) should prepare release notes for each of the [repositories covered by this process](#repositories).\n\nThese should:\n- be written in markdown\n- include a list of features and significant changes\n- include a link to github issues and pull requests where more background can be found\n- include a link to a github diff with the previous release\n\nExamples of doing this are:\n- the [release notes for version 2.3.0 of spec](https://github.com/asyncapi/spec/releases/tag/v2.3.0)\n\n\n### Step 9 - notify people the release is coming\n\nAs the release gets closer to being ready, it is helpful to remind the community that the release is on the way.\n\nA good way to do this is to mention code owners and community tool maintainers in the [release issue](#step-2---create-a-release-issue) to draw their attention to it.\n\nThis can also be done:\n- in the `#specification` channel in [Slack](https://www.asyncapi.com/slack-invite)\n- at [community meetings](https://github.com/asyncapi/community/issues?q=is%3Aissue+is%3Aopen+label%3Ameeting)\n\nIncluding a link to the [release issue](#step-2---create-a-release-issue) is a good way to let the community see the progress that has been made so far.\n\n\n### Step 10 - reviews\n\nAt least one [code owner](#code-owners) must approve the [release pull requests](#step-7---create-pull-requests) in all related [repositories](#repositories).\n\n\n### Step 11 - release candidates\n\nPre-release release candidates are generated automatically by the automation bot when:\n- a pull request with a **fix** or **feat** prefix in the title is merged into the [release branch](#step-3---create-release-branches)\n\nAn example of a pull request created by the automation bot is: https://github.com/asyncapi/spec-json-schemas/pull/151 \n\nRelease candidates will include:\n- upcoming release number\n- date of the release\n- release candidate number\n\nAn example release candidate is: https://github.com/asyncapi/spec/releases/tag/v2.3.0-2022-01-release.3\n\n**Important:** When release candidates are created for the [spec](https://github.com/asyncapi/spec) repository, the [parser-js](https://github.com/asyncapi/parser-js) repository will need to be updated to use that release candidate. \n\n### Step 12 - Notify code owners of critical repositories about the pre-releases\n\nIn order to let code owners of critical repositories have enough time to work on the changes needed on tooling, the [release coordinator](#%22release-coordinator%22) should notify code owners about the pre-releases.\nAs per today, the following repositories are considered critical:\n\n- [HTML Template](https://github.com/asyncapi/html-template)\n- [JavaScript Converter](https://github.com/asyncapi/converter-js/)\n- [React component](https://github.com/asyncapi/asyncapi-react/)\n- [Studio](https://github.com/asyncapi/studio)\n\n### Step 13 - merge the release branches\n\nOnce everything is ready, it is time to merge the [release branches](#step-3---create-release-branches) using the [draft pull requests prepared earlier](#step-7---create-pull-requests).\n\nMerging can only be done by [code owners](#code-owners).\n\nPull requests must have a `feat: ` prefix that, after the merge, produces a release candidate with a minor version update. The major version must have `feat!: ` prefix.\n\nPull requests in the `parser-js` can be merged only if it uses the release candidate of `@asyncapi/specs` package produced after merge of a pull request in `spec-json-schemas`.\n\nFirst, changes are merged into the `spec` repository, then `spec-json-schemas` and then in `parser-js`.\n\nRelease means merge of pull requests created from a release branch against the master branch. First, changes are merged into the `spec` repository, then `spec-json-schemas` and at the end in `parser-js`. Like in the case of the merge of release candidates, a pull request in `parser-js` can be merged only if it uses the final release of the new `@asyncapi/specs` package.\n\n\n### Step 14 - publish releases\n\nThe [release coordinator](#%22release-coordinator%22) should ask the [code owners](#code-owners) for each repository to update the release in Github created by the automation bot, by adding the [release notes they have prepared](#step-10---prepare-release-notes).\n\n\n### Step 15 - notify tool maintainers\n\nOur current CI/CD automation will fill PR's updating the dependencies **automatically** on all repositories after the release. \nHowever, the [release coordinator](#%22release-coordinator%22) should notify maintainers of the dependant repositories that a new release happened, as those might want to adopt the new features. \n\nSome of the dependant repositories are:\n  - [Avro Schema parser](https://github.com/asyncapi/avro-schema-parser)\n  - [Bundler](https://github.com/asyncapi/bundler)\n  - [CLI](https://github.com/asyncapi/cli)\n  - [Cupid](https://github.com/asyncapi/cupid)\n  - [Dot Net NATS template](https://github.com/asyncapi/dotnet-nats-template)\n  - [Generator](https://github.com/asyncapi/generator)\n  - [Generator React SDK](https://github.com/asyncapi/generator-react-sdk)\n  - [Glee](https://github.com/asyncapi/glee)\n  - [HTML Template](https://github.com/asyncapi/html-template)\n  - [Java Template](https://github.com/asyncapi/java-template)\n  - [JavaScript Converter](https://github.com/asyncapi/converter-js/)\n  - [Markdown template](https://github.com/asyncapi/markdown-template)\n  - [Modelina](https://github.com/asyncapi/modelina)\n  - [NodeJS WS Template](https://github.com/asyncapi/nodejs-ws-template)\n  - [Optimizer](https://github.com/asyncapi/optimizer)\n  - [Parser Go](https://github.com/asyncapi/parser-go)\n  - [React component](https://github.com/asyncapi/asyncapi-react/)\n  - [Server API](https://github.com/asyncapi/server-api/)\n  - [Simulator](https://github.com/asyncapi/simulator)\n  - [Studio](https://github.com/asyncapi/studio)\n  - [TS NATS Template](https://github.com/asyncapi/ts-nats-template)\n\nYou can use Github Code Search to find the [list of repositories depending on parser-js or the specs](https://cs.github.com/?scopeName=All+repos&scope=&q=org%3Aasyncapi+%28path%3Apackage.json+OR+go.mod%29+%22%40asyncapi%2Fparser%22+OR+%22%40asyncapi%2Fspecs%22+OR+%22github.com%2Fasyncapi%2Fspec-json-schemas%22+OR+%22github.com%2Fasyncapi%2Fparser-go%22#). \nAlternatively, you can use the following GH search queries:\n- [NodeJS @asyncapi/specs dependants](https://github.com/search?q=org%3Aasyncapi+in%3Afile+filename%3Apackage.json+%22%40asyncapi%2Fspecs%22)\n- [NodeJS @asyncapi/parser dependants](https://github.com/search?q=org%3Aasyncapi+in%3Afile+filename%3Apackage.json+%22%40asyncapi%2Fparser%22)\n- [Go github.com/asyncapi/spec-json-schemas dependants](https://github.com/search?q=org%3Aasyncapi+in%3Afile+filename%3Ago.mod+%22%40github.com%2Fasyncapi%2Fspec-json-schemas%22)\n- [Go github.com/asyncapi/parser-go dependants](https://github.com/search?q=org%3Aasyncapi+in%3Afile+filename%3Ago.mod+%22%40github.com%2Fasyncapi%2Fparser-go%22)\n\nYou can check the following [example of notification to maintainers](https://github.com/asyncapi/spec/issues/735#issuecomment-1109801674).\n\nThe [release coordinator](#%22release-coordinator%22) should also make sure other maintainers from other projects under the AsyncAPI GitHub organization released their packages.\n\n\n### Step 16 - notify the community\n\nEvery release of the release candidate is automatically published on the AsyncAPI Twitter account and in the releases-dedicated Slack channel.\n\nIf the [release coordinator](#%22release-coordinator%22) uses social networks like Twitter or LinkedIn, it is a great idea for them to promote the work that they've done to prepare the release by announcing it on their own private accounts. These can then be promoted and shared from the official AsyncAPI social accounts, to highlight and demonstrate the community-driven nature of releases. \n\nFeel free to use other communication channels. Make sure that as many people as possible know about the change. Feel free to contact vendors upfront or other people that are interested in changes in the specification.\n\n\n### Step 17 - improve the release process\n\nEvery release identifies new issues and ways that the process can be improved.\n\nOnce the release is complete, the final step is to update this document with anything that could have gone better!\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}