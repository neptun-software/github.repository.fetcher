{
  "metadata": {
    "timestamp": 1736561933058,
    "page": 635,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "franciscop/server",
      "stars": 3558,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".env.demo",
          "type": "blob",
          "size": 0.01171875,
          "content": "TEST44={\"a\"}"
        },
        {
          "name": ".eslintrc.json",
          "type": "blob",
          "size": 0.39453125,
          "content": "{\n  \"parserOptions\": {\n    \"ecmaVersion\": 8\n  },\n  \"plugins\": [\"jasmine\"],\n  \"env\": {\n    \"browser\": true,\n    \"commonjs\": true,\n    \"es6\": true,\n    \"jasmine\": true,\n    \"node\": true\n  },\n  \"extends\": \"eslint:recommended\",\n  \"rules\": {\n    \"indent\": [\"error\",2],\n    \"linebreak-style\": [\"error\", \"unix\"],\n    \"quotes\": [\"error\", \"single\"],\n    \"semi\": [\"error\", \"always\"],\n    \"no-console\": \"off\"\n  }\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.03125,
          "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Temporary folder\n/temp\n\n# Mac temporal file\n.DS_Store\n\n# SASS Cache\n.sass-cache\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# TypeScript v1 declaration files\ntypings/\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n\n# next.js build output\n.next\n\n# This is a library so don't include it\npackage-lock.json\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.0185546875,
          "content": "docs\nexamples\ntest\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.001953125,
          "content": "**"
        },
        {
          "name": "Contributing.md",
          "type": "blob",
          "size": 1.990234375,
          "content": "# Contributing\n\nYou are welcome to contribute to the project. We use Grunt for building the website and jest for testing.\n\n\n## Help wanted\n\nWhile you can open an issue for other reasons, these are the main areas where help is most needed:\n\n- Documentation. Writing new areas ([open an issue first](#pull-requests)), improving the grammar/typos/etc. Also, adding many examples, which should be tested first; a good place would be in `/examples`.\n\n- Testing. In many situations we are testing the *happy path* only, so we'd need more tests for others.\n\n- Errors. This project has an unusual section called errors where all of the errors are logged. Wording/improving these is very welcome.\n\n- Examples. Some simple examples in the folder `/examples` help newcomers and can be included later on in the documentation. The reverse is also true, you can test an example from the documentation in this folder.\n\n\n\n## Pull Requests\n\nBefore opening any PR with new functionality or change a section of the web or documentation please open an issue to discuss it first.\n\n> Tiny PR fixing typos, some wording, a website issue, etc are perfectly okay and promptly accepted.\n\n**Small PR are preferred** than large ones. If in doubt, open an issue, [ask me personally](http://francisco.io/) or make it small. Since this is mostly a 1-person project, large PR will probably sit idle for a while or flatly rejected (related: [you can also donate or sponsor the project](https://serverjs.io/sponsor) so I'll be able to invest more time and resources on it).\n\n\n\n## Security issues\n\nPlease do not open any vulnerability issue on Github's issue tracker. Send me an email (find my personal email in [my website](http://francisco.io/)) if you find a particular issue within server, or contact privately the package author in case it's a sub-package issue.\n\nI do not have a PGP-based email right now, but if requested I'll make sure to find out how to use it and publish it in [github](https://github.com/franciscop) or [twitter](http://twitter.com/fpresencia).\n"
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 3.189453125,
          "content": "const filters = require(\"./docs/filters.js\");\nconst files = require(\"./docs/files.js\");\nconst sass = require(\"sass\");\n\nconst fs = require(\"fs\");\n\nfunction extract(src) {\n  const data = {};\n  const readme = fs.readFileSync(src + \"README.md\", \"utf-8\");\n  data.title = (readme.match(/^\\#\\s(.+)/gm) || []).map(one =>\n    one.replace(/^\\#\\s/, \"\")\n  )[0];\n  if (!data.title)\n    throw new Error(\"Your file \" + file + \"/README.md has no h1 in markdown\");\n  data.sections = (readme.match(/^\\#\\#[\\s](.+)/gm) || []).map(one =>\n    one.replace(/^\\#\\#\\s/, \"\")\n  );\n  return data;\n}\n\nfunction getInfo(src) {\n  delete require.cache[require.resolve(src)];\n  const info = {};\n  if (/documentation/.test(src)) {\n    const base = { title: \"Introduction\", url: \"/documentation/\" };\n    info.introduction = Object.assign({}, extract(src), base);\n  }\n  return require(src).reduce((obj, one) => {\n    return Object.assign({}, obj, { [one]: extract(src + one + \"/\") });\n  }, info);\n}\n\n// Generate the documentation final:origin pairs\nconst transform = dir =>\n  files(__dirname + \"/\" + dir)\n    .filter(str => /\\.html\\.pug$/.test(str))\n    .reduce((docs, one) => {\n      docs[one.replace(/\\.pug$/, \"\")] = one;\n      return docs;\n    }, {});\n\n// This builds the library itself\nmodule.exports = function(grunt) {\n  // Configuration\n  grunt.initConfig({\n    bytesize: {\n      all: {\n        src: [\"docs/assets/style.min.css\", \"docs/assets/javascript.js\"]\n      }\n    },\n\n    jshint: {\n      options: { esversion: 6 },\n      src: [\"Gruntfile.js\", \"server.js\", \"src\"]\n    },\n\n    // Launch a small static server\n    connect: {\n      server: {\n        options: {\n          port: 3000,\n          hostname: \"*\",\n          base: \"docs\",\n          livereload: true,\n          useAvailablePort: false\n        }\n      }\n    },\n\n    sass: {\n      dist: {\n        options: { implementation: sass, outputStyle: \"compressed\" },\n        files: { \"docs/assets/style.min.css\": \"docs/assets/style.scss\" }\n      }\n    },\n\n    pug: {\n      compile: {\n        options: {\n          client: false,\n          data: file => {\n            return {\n              require,\n              file,\n              tutorials: getInfo(\"./docs/tutorials/\"),\n              documentation: getInfo(\"./docs/documentation/\"),\n              slug: str => str.toLowerCase().replace(/[^\\w]+/g, \"-\")\n            };\n          },\n          filters: filters\n        },\n        files: transform(\"docs\")\n      }\n    },\n\n    watch: {\n      scripts: {\n        files: [\n          \"Gruntfile.js\",\n\n          // Docs\n          \"docs/**/*.*\",\n          \"README.md\",\n\n          // For testing:\n          \"server.js\",\n          \"src/**/*.js\",\n\n          // To bump versions\n          \"package.js\"\n        ],\n        tasks: [\"default\"],\n        options: {\n          spawn: false,\n          livereload: true\n        }\n      }\n    }\n  });\n\n  grunt.loadNpmTasks(\"grunt-contrib-connect\");\n  grunt.loadNpmTasks(\"grunt-contrib-jshint\");\n  grunt.loadNpmTasks(\"grunt-contrib-pug\");\n  grunt.loadNpmTasks(\"grunt-contrib-watch\");\n  grunt.loadNpmTasks(\"grunt-bytesize\");\n  grunt.loadNpmTasks(\"grunt-sass\");\n\n  grunt.registerTask(\"build\", [\"sass\", \"pug\"]);\n  grunt.registerTask(\"test\", [\"bytesize\"]);\n  grunt.registerTask(\"default\", [\"build\", \"test\", \"connect\"]);\n};\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2016 serverjs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.2734375,
          "content": "# **server.js** for Node.js\n\n[![Subscribe](https://img.shields.io/badge/%20subscribe%20-%20mailchimp%20-blue.svg )](http://eepurl.com/cGRggH)\n[![Downloads](https://img.shields.io/npm/dm/server.svg)](https://npm-stat.com/charts.html?package=server)\n[![Status](https://github.com/franciscop/server/workflows/tests/badge.svg)](https://github.com/franciscop/server/actions) [![Dependencies status](https://david-dm.org/franciscop/server/status.svg)](https://david-dm.org/franciscop/server)\n\nPowerful server for Node.js that just works so **you can focus on your awesome project**:\n\n```js\n// Include it and extract some methods for convenience\nconst server = require('server');\nconst { get, post } = server.router;\n\n// Launch server with options and a couple of routes\nserver({ port: 8080 }, [\n  get('/', ctx => 'Hello world'),\n  post('/', ctx => {\n    console.log(ctx.data);\n    return 'ok';\n  })\n]);\n```\n\n<blockquote class=\"external\">\n  <p>Simplicity is a great virtue but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better.</p>\n  <cite>― Edsger W. Dijkstra</cite>\n</blockquote>\n\n\n## Getting started\n\nThere's a [whole tutorial on getting started for beginners](https://serverjs.io/tutorials/getting-started/) but the quick version is to first install `server` as a dependency:\n\n```bash\nnpm install server\n```\n\n> Server requires **Node.js 7.6.0** or newer. **Node.js 8.x.y** LTS is recommended.\n\nThen you can create a file called `index.js` with this code:\n\n```js\n// Include the server in your file\nconst server = require('server');\nconst { get, post } = server.router;\n\n// Handle requests to the url \"/\" ( http://localhost:3000/ )\nserver([\n  get('/', ctx => 'Hello world!')\n]);\n```\n\nExecute this in the terminal to get the server started:\n\n```bash\nnode .\n```\n\nAnd finally, open your browser on [localhost:3000](http://localhost:3000/) and you should see 'Hello world!' on your browser.\n\n\n\n## Documentation\n\nThe library is documented here:\n\n<strong><a class=\"button\" href=\"https://serverjs.io/documentation/\">Full Documentation</a></strong>\n\n> [**Subscribe here**](http://eepurl.com/cGRggH) to receive tutorials when released. Tutorials are *good for learning* while the documentation is good for reference/quick use *once you know the basics*.\n\nYou can also download the repository and try the examples by browsing to them and `node .` inside each of them in `/examples`.\n\n\n\n## Use cases\n\nThe package `server` is great for many situations. Let's see some of them:\n\n\n### Small to medium projects\n\nEverything works out of the box, you get great support for most features and you can easily tap into Express' middleware ecosystem. What's not to love?\n\nSome of the included features: body and file parsers, cookies, sessions, websockets, Redis, gzip, favicon, csrf, SSL, etc. They just work so you will save a headache or two and can focus on your actual project. Get a simple form going:\n\n```js\nconst server = require('server');\nconst { get, post } = server.router;\nconst { render, redirect } = server.reply;\n\nserver(\n  get('/', () => render('index.pug')),\n  post('/', ctx => {\n    console.log(ctx.data);\n    return redirect('/');\n  })\n);\n```\n\n\n\n### API design\n\nFrom the flexibility and expressivity of the bundle, designing APIs is a breeze:\n\n```js\n// books/router.js\nconst { get, post, put, del } = require('server/router');\nconst ctrl = require('./controller');\n\nmodule.exports = [\n  get('/book', ctrl.list),\n  get('/book/:id', ctrl.item),\n  post('/book', ctrl.create),\n  put('/book/:id', ctrl.update),\n  del('/book/:id', ctrl.delete)\n];\n```\n\n\n\n### Real time\n\nWebsockets were never this easy to use! With socket.io on the front-end, you can simply do this in the back-end to handle those events:\n\n```js\n// chat/router.js\nconst { socket } = require('server/router');\nconst ctrl = require('./controller');\n\nmodule.exports = [\n  socket('connect', ctrl.join),\n  socket('message', ctrl.message),\n  socket('disconnect', ctrl.leave)\n];\n```\n\n\n\n## Author & support\n\nThis package was created by [Francisco Presencia](http://francisco.io/) but hopefully developed and maintained by many others. See the [the list of contributors here](https://github.com/franciscop/server/graphs/contributors).\n\nYou can also [sponsor the project](https://serverjs.io/sponsor), get your logo in here and some other perks with tons of ♥\n"
        },
        {
          "name": "api.js",
          "type": "blob",
          "size": 2.8310546875,
          "content": "// API Specification\n// This document is to define server's stable API\n// - Main function\n// - options\n// - middleware\n// - context\n// - router\n// - reply\n// - utils\n\n\n\n// Main function\nconst server = require('server');\n\n// Definition: an ASYNC function that accepts options and/or middleware\nserver(opts, mid1, mid2, ...).then(...);\n\n// Properties (defined below)\nserver.router;\nserver.reply;\nserver.utils;\n\n\n\n// Options\nconst ops = {\n\n  // Simple options\n  port,\n  engine,\n  public,\n  secret,\n  log,\n\n  // TODO: MISSING MANY HERE; THIS PART IS NOT YET STABLE\n\n  // Plugins options\n  core,\n  parser,\n};\n\n\n\n// Middleware\n// Definition: (a)sync function, accepts the Context and returns a reply\nconst mid1 = ctx => { ... };\nconst mid2 = async ctx => { ... };\n\n// Return types\n// String => HTML or PLAIN response\nconst mid = ctx => 'Hello world';\n// Array/Object => JSON response\nconst mid = ctx => ['I', 'am', 'json'];\nconst mid = ctx => ({ hello: 'world' });  // To return an object the extra () is needed\n// Reply instance\nconst mid = ctx => server.reply.send('hello world');\n\n\n\n// Context\n// Definition: all of the currently known data. Varies depending on location\n// NOTE: there are more properties, but they are not considered stable\nctx.options,  // the specified or inherited options\nctx.log,      // a method to log things in several levels\nctx.reply,    // same as above\nctx.utils,    // utilities\nctx.server,   // the currently running server instance\n\n// For middleware/routers\nctx.data,     // the parsed body if it's a POST request\nctx.params,   // NOTE: NOT YET, rely on ctx.req.params so far\nctx.query,    // NOTE: NOT YET, rely on ctx.req.query so far\n// ...\n\n// Non-stable (will change at some point in the future)\nctx.req,      // express request; considering removing/changing it in 1.1\nctx.res,      // express response; not useful anymore, use server.reply instead\n\n\n\n// Router\nconst router = server.router;\nconst router = require('server/router');\n\n// Definition: handle the different methods and paths requested\nrouter.get('/', mid1);\nrouter.post('/users', mid2);\nrouter.put('/users/:id', mid3);\n\n// Methods (REST methods not explained):\nrouter.get;\nrouter.post;\nrouter.put;\nrouter.del;\nrouter.socket;  // Handle websocket calls\nrouter.error;   // Handle errors further up in the chain\n\n\n\n// Reply\nconst reply = server.reply;\nconst reply = require('server/reply');\n\n// Definition: handle the response from your code\n// Note: it MUST be returned from the middleware or it won't be executed\nreply.cookie;\nreply.download;\nreply.end;\nreply.file;\nreply.header;\nreply.json;\nreply.jsonp;\nreply.redirect;\nreply.render;\nreply.send;\nreply.status;\nreply.type;\n\n\n\n// Utils\nconst utils = server.utils;\nconst utils = require('server/utils');  // NOT YET AVAILABLE\n\n// Definition: some extra utilities to make development easier\nutils.modern;  // Make express middleware work with server.js\n"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 3.4658203125,
          "content": "# Changelog\n\nThese are the changes for server. Follows semver as long as you use the documented features. If you reach into the internals, make sure to lock the version and follow the changes. Feel free to ask any question in Github :)\n\n\n## 1.0.18 [[reference](https://github.com/franciscop/server/compare/1.0.17...1.0.18)]\n\n- Fixed tag for npm so it doesn't install alphas by default.\n\n\n## 1.0.17 [[reference](https://github.com/franciscop/server/compare/1.0.16...1.0.17)]\n\n- Forgot a couple of debugging console.log(), so had to re-publish without them.\n\n\n\n## 1.0.16 [[reference](https://github.com/franciscop/server/compare/1.0.15...1.0.16)]\n\n- Add [`options` sub-schema definition in the plugin parser](https://github.com/franciscop/server/issues/60).\n\n\n\n## 1.0.15 [[reference](https://github.com/franciscop/server/compare/1.0.14...1.0.15)]\n\n- Added [session to the sockets](https://github.com/franciscop/server/issues/55).\n- Fixed test and docs for jsonp.\n\n\n\n## 1.0.14 [[reference](https://github.com/franciscop/server/compare/1.0.13...1.0.14)]\n\n- Added [express session globally](https://github.com/franciscop/server/issues/30) so stores can be created based on that.\n\n\n\n## 1.0.13 [[reference](https://github.com/franciscop/server/compare/1.0.12...1.0.13)]\n\n- Fixed bug where some error handling might throw an error. From internal testing in one of my projects.\n\n\n\n## 1.0.12 [[reference](https://github.com/franciscop/server/compare/1.0.11...1.0.12)]\n\n- Remove [the unexpected body that was set by express](https://github.com/franciscop/server/issues/46) when only an status code was sent by making it explicit with status(NUMBER).send().\n\n\n\n## 1.0.11 [[reference](https://github.com/franciscop/server/compare/1.0.10...1.0.11)]\n\n- Never published, published on 1.0.12 instead.\n\n\n\n## 1.0.10 [[reference](https://github.com/franciscop/server/compare/1.0.9...1.0.10)]\n\n- Do not show a warning if [only the status was set but no body](https://github.com/franciscop/server/issues/46) was set.\n\n\n\n## 1.0.9 [[reference](https://github.com/franciscop/server/compare/1.0.8...1.0.9)]\n\n- Better error handling and warnings when there is no response from the server. Shows error only when it should.\n\n\n\n## 1.0.8 [[reference](https://github.com/franciscop/server/compare/1.0.7...1.0.8)]\n\n- Never published, published on 1.0.9 instead.\n\n\n\n## 1.0.7 [[reference](https://github.com/franciscop/server/compare/1.0.6...1.0.7)]\n\n- Fix for [Yarn and npm having different path resolution](https://github.com/franciscop/server/issues/43). This was giving inconsistent results when using yarn (vs the expected one with npm):\n\n```js\nserver(\n  get('*', (ctx) => status(200))\n);\n```\n\n\n\n## 1.0.6 [[reference](https://github.com/franciscop/server/compare/1.0.5...1.0.6)]\n\n- Never published, published on 1.0.7 instead.\n\n\n\n## 1.0.5 [[reference](https://github.com/franciscop/server/compare/1.0.4...1.0.5)]\n\n- Fix subdomain order resolution (merged from @nick-woodward).\n- Test subdomain handling.\n- Removed pointless warning.\n\n\n\n## 1.0.4 [[reference](https://github.com/franciscop/server/compare/1.0.3...1.0.4)]\n\n- Specify that the `views` for express should be a folder (that can inherit).\n- Added environment variable name handling.\n\n\n\n## 1.0.3 [[reference](https://github.com/franciscop/server/compare/1.0.2...1.0.3)]\n\n- The log plugin is always on since it's needed internally.\n\n\n\n## 1.0.2\n\n- Better error handling for environment variables.\n\n\n\n## 1.0.1\n\n- Added the option to disable the CSRF and security plugins independently.\n\n\n\n## 1.0.0\n\n**First major release.**\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "error",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.3623046875,
          "content": "{\n  \"name\": \"server\",\n  \"version\": \"1.0.41\",\n  \"description\": \"A modern and powerful server for Node.js\",\n  \"homepage\": \"https://serverjs.io/\",\n  \"repository\": \"https://github.com/franciscop/server.git\",\n  \"bugs\": \"https://github.com/franciscop/server/issues\",\n  \"funding\": \"https://www.paypal.me/franciscopresencia/19\",\n  \"author\": \"Francisco Presencia <public@francisco.io> (https://francisco.io/)\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"start\": \"node .\",\n    \"dev\": \"grunt watch\",\n    \"build\": \"grunt\",\n    \"pretest\": \"cp .env.demo .env\",\n    \"test\": \"jest --coverage --forceExit\",\n    \"kill-comment\": \"Kill a process running in a specific port: PORT=3000 npm run kill\",\n    \"kill\": \"kill $(lsof -t -i:$PORT) && echo '> KILLED!' || echo '> The port was already dead'\"\n  },\n  \"keywords\": [\n    \"server\",\n    \"node.js\",\n    \"http\",\n    \"websocket\",\n    \"socket\",\n    \"async\"\n  ],\n  \"main\": \"server.js\",\n  \"directories\": {\n    \"Documentation\": \"./docs/documentation\",\n    \"Code\": \"./src\",\n    \"Plugins\": \"./plugins\",\n    \"Examples\": \"./examples\"\n  },\n  \"engines\": {\n    \"node\": \">=10.0.0\"\n  },\n  \"engineStrict\": true,\n  \"dependencies\": {\n    \"body-parser\": \"^1.20.2\",\n    \"compression\": \"^1.7.4\",\n    \"connect-redis\": \"^7.1.1\",\n    \"cookie-parser\": \"^1.4.6\",\n    \"csurf\": \"^1.11.0\",\n    \"dotenv\": \"^16.4.5\",\n    \"express\": \"^4.18.3\",\n    \"express-session\": \"^1.18.0\",\n    \"extend\": \"^3.0.2\",\n    \"hbs\": \"^4.2.0\",\n    \"helmet\": \"^7.1.0\",\n    \"ioredis\": \"^5.3.2\",\n    \"loadware\": \"^2.0.0\",\n    \"method-override\": \"^3.0.0\",\n    \"mz\": \"^2.7.0\",\n    \"npmlog\": \"^7.0.1\",\n    \"path-to-regexp\": \"^6.2.1\",\n    \"pug\": \"^3.0.2\",\n    \"response-time\": \"^2.3.2\",\n    \"serve-favicon\": \"^2.5.0\",\n    \"serve-index\": \"^1.9.1\",\n    \"socket.io\": \"^4.7.4\",\n    \"upload-files-express\": \"^0.4.0\"\n  },\n  \"devDependencies\": {\n    \"eslint\": \"^8.57.0\",\n    \"eslint-plugin-jasmine\": \"^4.1.3\",\n    \"grunt\": \"^1.6.1\",\n    \"grunt-bytesize\": \"^0.2.0\",\n    \"grunt-contrib-connect\": \"^4.0.0\",\n    \"grunt-contrib-jshint\": \"^3.2.0\",\n    \"grunt-contrib-pug\": \"^3.0.0\",\n    \"grunt-contrib-watch\": \"^1.1.0\",\n    \"grunt-sass\": \"^3.1.0\",\n    \"jest\": \"^29.7.0\",\n    \"jest-jasmine2\": \"^29.7.0\",\n    \"jstransformer-marked\": \"^1.4.0\",\n    \"picnic\": \"^7.1.0\",\n    \"request-promises\": \"^1.1.0\",\n    \"sass\": \"^1.71.1\",\n    \"supertest\": \"^6.3.4\"\n  },\n  \"jest\": {\n    \"transformIgnorePatterns\": [\n      \"/node_modules/\"\n    ],\n    \"testRunner\": \"jest-jasmine2\"\n  }\n}\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "reply",
          "type": "tree",
          "content": null
        },
        {
          "name": "roadmap.md",
          "type": "blob",
          "size": 1.31640625,
          "content": "# Roadmap\n\nWish list and features. Totally tentative, but nothing set in stone.\n\n\n## Version 1.2\n\nPassport integration. Performance.\n\n\n## Version 1.1\n\nMaking Plugin API. Integrate websockets:\n\n```js\nlet server = require('server');\nlet { socket } = server.router;\n\nserver({}, [\n\n  // These come from user-events\n  socket('join', ctx => ctx.io.emit('join', ctx.data)),\n  socket('message', ctx => ctx.io.emit('message', ctx.data)),\n\n  // These are from the native events\n  socket('connect', ctx => { /* ... */ }),\n  socket('disconnect', ctx => { /* ... */ })\n]);\n```\n\nThis will require some serious handling, but in exchange will make websockets easily accessible to everyone.\n\n\n\n## Version 1.0\n\n> This is being rushed because NPM asked me to publish 1.x as there were already 0.x version from other person, so version 1.0 will be published with few alphas/betas\n\nRetrieve the old functionality of Express to make it easy to launch a server in Node.js\n\nTodo:\n\n- Testing testing and more testing\n- Good documentation and [tutorials in Libre University](https://en.libre.university/subject/4kitSFzUe)\n\nDone:\n\n- Include all of the libraries\n- Created the base\n- Implemented some of the libraries\n- Use it in real-world projects\n- Make sure that the express-session is secure with the secret (session usage depend on whether the token is provided or not)\n"
        },
        {
          "name": "router",
          "type": "tree",
          "content": null
        },
        {
          "name": "server.js",
          "type": "blob",
          "size": 2.287109375,
          "content": "// server for Node.js (https://serverjs.io/)\n// A simple and powerful server for Node.js.\n\n// Internal modules\nconst config = require('./src/config');\nconst router = require('./router');\nconst reply = require('./reply');\nconst join = require('./src/join/index.js');\nconst modern = require('./src/modern');\n\n// Create a context per-request\nconst context = (self, req, res) => Object.assign(req, self, { req, res });\n\n// Get the functions from the plugins for a special point\nconst hook = (ctx, name) => ctx.plugins.map(p => p[name]).filter(p => p);\n\n\n\n// Main function\nconst Server = async (...middle) => {\n\n  // Initialize the global context\n  const ctx = {};\n\n  // First parameter can be:\n  // - options: Number || Object (cannot be ID'd)\n  // - middleware: undefined || null || Boolean || Function || Array\n  const opts = (\n    typeof middle[0] === 'undefined' ||\n    typeof middle[0] === 'boolean' ||\n    typeof middle[0] === 'string' ||\n    middle[0] === null ||\n    middle[0] instanceof Function ||\n    middle[0] instanceof Array\n  ) ? {} : middle.shift();\n\n  // Set the options for the context of Server.js\n  ctx.options = await config(opts, module.exports.plugins);\n\n  // Only enabled plugins through the config\n  ctx.plugins = module.exports.plugins.filter(p => ctx.options[p.name]);\n\n  ctx.utils = { modern: modern };\n  ctx.modern = modern;\n\n  // All the init beforehand\n  for (let init of hook(ctx, 'init')) {\n    await init(ctx);\n  }\n\n\n\n  // PLUGIN middleware\n  ctx.middle = join(hook(ctx, 'before'), middle, hook(ctx, 'after'));\n\n  // Main thing here\n  ctx.app.use((req, res) => ctx.middle(context(ctx, req, res)));\n\n\n\n  // Different listening methods\n  await Promise.all(hook(ctx, 'listen').map(listen => listen(ctx)));\n\n  // After launching it (already proxified)\n  for (let launch of hook(ctx, 'launch')) {\n    await launch(ctx);\n  }\n\n  return ctx;\n};\n\nmodule.exports = Server;\nmodule.exports.router = router;\nmodule.exports.reply = reply;\nmodule.exports.utils = {\n  modern: modern\n};\nmodule.exports.plugins = [\n  require('./plugins/log'),\n  require('./plugins/express'),\n  require('./plugins/parser'),\n  require('./plugins/static'),\n  require('./plugins/socket'),\n  require('./plugins/session'),\n  require('./plugins/security'),\n  require('./plugins/favicon'),\n  require('./plugins/compress'),\n  require('./plugins/final')\n];\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}