{
  "metadata": {
    "timestamp": 1736562098485,
    "page": 884,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SchemaStore/schemastore",
      "stars": 3178,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3974609375,
          "content": "root = true\n\n[*]\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.{js,json,toml}]\nindent_style = space\nindent_size = 2\n\n[*.md]\nindent_style = space\nindent_size = 2\ntrim_trailing_whitespace = false\n\n[*.{yml,yaml}]\nindent_style = space\nindent_size = 2\ntrim_trailing_whitespace = false\n\n[*.cshtml]\nindent_style = space\nindent_size = 4\n\n[*.sh]\nindent_style = tab\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 1.6123046875,
          "content": "# git hyper-blame main ignore list.\n#\n# This file contains a list of git hashes of revisions to be ignored by git\n# hyper-blame (in Git itself and on GitHub). These revisions are considered\n# \"unimportant\" in that they are unlikely to be what you are interested in\n# when blaming.\n#\n# Instructions:\n# - Only large (generally automated) reformatting or renaming PRs should be\n#   added to this list. Do not put things here just because you feel they are\n#   trivial or unimportant. If in doubt, do not put it on this list.\n# - Precede each revision with a comment containing the first line of its log.\n#   For bulk work over many commits, place all commits in a block with a single\n#   comment at the top describing the work done in those commits.\n# - Only put full 40-character hashes on this list (not short hashes or any\n#   other revision reference).\n# - Append to the bottom of the file (revisions should be in chronological order\n#   from oldest to newest).\n# - Because you must use a hash, you need to append to this list in a follow-up\n#   PR to the actual reformatting PR that you are trying to ignore.\n\n# Mass-formatting with prettier via\n# https://github.com/SchemaStore/schemastore/pull/2255\n6049f681741399cf73aea088680f58375c12592a\n\n# Mass-format JavaScript, CSS, and Markdown with Prettier via\n# https://github.com/SchemaStore/schemastore/pull/2670\n0d7a56fb1e64579d766a3b662cd489ec2a22e88f\n\n# style: Format YAML files at project root\nd7eacc4d28028b906e505d21101ec904d8a3ceb8\n\n# Deindent standalone functions (in Gruntfile)\n36a6cccf396db9ac67937b4d0720548aa1868f7f\n\n# Unindent Grunt task functions\nec2eff2d4485dff86239bd32cb5fc7f5acc76a4e\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4716796875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n*.sln    merge=union\n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.806640625,
          "content": "# This ignore file is shared with Prettier. It seems .git/ must be ignored manually now.\n.git/\n\n# Project files\ntemp\ntest.json\n*.webinfo\n.vs/\n.idea\n*.iml\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n*.publishproj\n*.pubxml\nnode_modules/\n.venv/\n\n# Build results\npackages/\n[Oo]bj/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.log\n*.scc\n*.sln.ide\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n*.pubxml\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n.DS_Store\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.041015625,
          "content": "---\nrepos:\n  - repo: 'https://github.com/rbubley/mirrors-prettier'\n    rev: 'v3.4.2'\n    hooks:\n      - id: 'prettier'\n        types_or: ['yaml', 'json', 'javascript', 'css', 'markdown']\n        always_run: true\n        additional_dependencies:\n          - 'prettier@3.4.2'\n          - 'prettier-plugin-sort-json@4.0.0'\n          - 'prettier-plugin-toml@2.0.1'\n        pass_filenames: true\n        args: ['--no-color', '--log-level=warn', '--write']\n  - repo: 'https://github.com/codespell-project/codespell'\n    rev: 'v2.3.0'\n    hooks:\n      - id: 'codespell'\n        exclude: '^(package-lock.json|src/test/openutau-ustx/bulaomeng.ustx.yaml|src/test/kustomization/labels.json|src/bin/.*)$'\n        args:\n          [\n            '--ignore-words-list',\n            'crate,ninjs,ans,specif,seh,specifid,deriver,isnt,tye,forin,dependees,rouge,interm,fo,wast,nome,statics,ue,aack,gost,inout,provId,handels,bu,testng,ags,edn,aks,te,decorder,provid,branche,alse,nd,mape,wil,clude,wit,flate,omlet,THIRDPARTY,NotIn,notIn,CopyIn,Requestor,requestor,re-use,ofo',\n          ]\n"
        },
        {
          "name": ".prettierrc.cjs",
          "type": "blob",
          "size": 2.2099609375,
          "content": "/** @type {import('prettier').Config} */\nmodule.exports = {\n  // pre-commit.ci fails without `require.resolve()`.\n  plugins: [\n    require.resolve('prettier-plugin-sort-json'),\n    require.resolve('prettier-plugin-toml'),\n  ],\n  semi: false,\n  singleQuote: true,\n  trailingComma: 'all',\n  jsonRecursiveSort: true,\n  jsonSortOrder: JSON.stringify({\n    '/^[^\\\\d+]/': 'none',\n    '/^\\\\d+/': 'none',\n  }),\n  overrides: [\n    {\n      files: '*.jsonc',\n      options: {\n        trailingComma: 'none',\n      },\n    },\n    {\n      files: 'src/api/json/catalog.json',\n      options: {\n        jsonRecursiveSort: true,\n        jsonSortOrder: JSON.stringify({\n          $schema: null,\n          version: null,\n          name: null,\n          description: null,\n          fileMatch: null,\n          url: null,\n          versions: null,\n          // Set to \"none\" to prevent lexical sorting of version strings.\n          '/^[^\\\\d+]/': 'none',\n          '/^\\\\d+/': 'none',\n        }),\n      },\n    },\n    {\n      files: 'src/schema-validation.jsonc',\n      options: {\n        jsonRecursiveSort: true,\n        jsonSortOrder: JSON.stringify({\n          $schema: null,\n          $id: null,\n          $comment: null,\n          ajvNotStrictMode: null,\n          fileMatchConflict: null,\n          highSchemaVersion: null,\n          missingCatalogUrl: null,\n          skiptest: null,\n          catalogEntryNoLintNameOrDescription: null,\n          options: null,\n          externalSchema: null,\n          unknownKeywords: null,\n          unknownFormat: null,\n          '/^[^\\\\d+]/': null,\n          '/^\\\\d+/': null,\n        }),\n      },\n    },\n    {\n      files: 'src/{test,negative_test}/**',\n      options: {\n        jsonRecursiveSort: true,\n        jsonSortOrder: JSON.stringify({\n          '/^[^\\\\d+]/': null,\n          '/^\\\\d+/': null,\n        }),\n      },\n    },\n    {\n      files: 'src/schemas/json/**',\n      options: {\n        jsonRecursiveSort: true,\n        jsonSortOrder: JSON.stringify({\n          $schema: null,\n          $id: null,\n          $comment: null,\n          $ref: null,\n          '/^\\\\$.*/': null,\n          '/^[^\\\\d+]/': 'none',\n          '/^\\\\d+/': 'none',\n          if: null,\n          then: null,\n          else: null,\n        }),\n      },\n    },\n  ],\n}\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.3583984375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socioeconomic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n- Demonstrating empathy and kindness toward other people\n- Being respectful of differing opinions, viewpoints, and experiences\n- Giving and gracefully accepting constructive feedback\n- Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n- Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n- The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n- Trolling, insulting or derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n- Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nedwin at kofler dot dev.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 28.185546875,
          "content": "<!-- markdownlint-disable no-inline-html -->\n<!-- markdownlint-disable no-emphasis-as-heading -->\n\n# Contributing <!-- omit from toc -->\n\n- [Introduction](#introduction)\n- [Overview](#overview)\n- [Recommended Extensions](#recommended-extensions)\n- [Schema Authoring](#schema-authoring)\n  - [Best practices](#best-practices)\n    - [Avoiding Overconstraint](#avoiding-overconstraint)\n    - [Undocumented Features](#undocumented-features)\n    - [Deprecated Features](#deprecated-features)\n    - [API Compatibility](#api-compatibility)\n    - [Documenting Enums](#using-enums)\n  - [Language Server Features](#language-server-features)\n    - [Non-standard Properties](#non-standard-properties)\n  - [Using the `CODEOWNERS` file](#using-the-codeowners-file)\n- [Schema Validation](#schema-validation)\n  - [Ajv strict mode](#ajv-strict-mode)\n  - [Ajv non-strict mode](#ajv-non-strict-mode)\n  - [SchemaSafe](#schemasafe)\n- [About `catalog.json`](#about-catalogjson)\n- [Compatible Language Servers and Tools](#compatible-language-servers-and-tools)\n  - [`redhat-developer/yaml-language-server`](#redhat-developeryaml-language-server)\n  - [`tamasfe/taplo`](#tamasfetaplo)\n  - [`Microsoft/vscode-json-languageservice`](#microsoftvscode-json-languageservice)\n  - [Other](#other)\n- [Troubleshooting](#troubleshooting)\n  - [Dependency Errors](#dependency-errors)\n  - [`pre-commit` fails to format files in CI](#pre-commit-fails-to-format-files-in-ci)\n- [How-to](#how-to)\n  - [How to add a JSON Schema that's hosted in this repository](#how-to-add-a-json-schema-thats-hosted-in-this-repository)\n  - [How to add a JSON Schema that's self-hosted/remote/external](#how-to-add-a-json-schema-thats-self-hostedremoteexternal)\n  - [How to edit an existing JSON Schema](#how-to-edit-an-existing-json-schema)\n  - [How to add a JSON Schema with multiple versions](#how-to-add-a-json-schema-with-multiple-versions)\n  - [How to move a JSON Schema from SchemaStore to somewhere that's self-hosted](#how-to-move-a-json-schema-from-schemastore-to-somewhere-thats-self-hosted)\n  - [How to add a `$ref` to a JSON Schema that's hosted in this repository](#how-to-add-a-ref-to-a-json-schema-thats-hosted-in-this-repository)\n  - [How to add a `$ref` to a JSON Schema that's self-hosted](#how-to-add-a-ref-to-a-json-schema-thats-self-hosted)\n  - [How to validate a JSON Schema](#how-to-validate-a-json-schema)\n  - [How to ignore validation errors in a JSON Schema](#how-to-ignore-validation-errors-in-a-json-schema)\n  - [How to name schemas that are subschemas (`partial-`)](#how-to-name-schemas-that-are-subschemas-partial-)\n- [Older Links](#older-links)\n  - [use-of-codeowners-file](#use-of-codeowners-file)\n\n## Introduction\n\nWelcome! Thank you for contributing to SchemaStore!\n\nThere are various ways you can contribute:\n\n- Add a new JSON Schema\n  - Local schema\n  - Remote schema\n- Enhance existing JSON schemas:\n  - Fix typos\n  - Fix bugs\n  - Improve constraints\n  - Add positive/negative tests\n  - Refactor to pass under strict mode\n\nMost people want to add a new schema. For steps on how to do this, read the [How to add a JSON Schema that's hosted in this repository](#how-to-add-a-json-schema-thats-hosted-in-this-repository) section below.\n\nIf you want to contribute, but not sure what needs fixing, see the [help wanted](https://github.com/SchemaStore/schemastore/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22help+wanted%22) and [good first issue](https://github.com/SchemaStore/schemastore/issues?q=is%3Aopen+label%3A%22good+first+issue%22+sort%3Aupdated-desc) labels on GitHub.\n\n## Overview\n\nSchema files are located in `src/schemas/json`. Each schema file has a corresponding entry in the [Schema Catalog](src/api/json/catalog.json). Each catalog entry has a `fileMatch` field. IDEs use this field to know which files the schema should be used for (in autocompletion).\n\nSome schema files have associated positive and negative tests, located at `src/test` and `src/negative_test`, respectively. These tests may be in JSON, YAML, or TOML format.\n\nMultiple libraries are used for validation to increase the compatibility and correctness of schemas. All schemas must correctly validate against their positive and negative tests using [Ajv](https://ajv.js.org). Other JSON Schema libraries can be optionally used. And, the schemas themselves can be linted using \"Ajv strict mode\" and other libraries. More details under [Schema Validation](#schema-validation).\n\n## Recommended Extensions\n\nWe _highly recommend_ installing the following extensions for your IDE:\n\n- [EditorConfig](https://editorconfig.org) to automatically configure editor settings\n- [Prettier](https://prettier.io) to automatically configure file formatting\n\nIf you are modifying [cli.js](./cli.js), we also recommend:\n\n- [ESLint](https://eslint.org) to automatically show JavaScript issues\n- TypeScript language server (Bundled with VSCode)\n\n## Schema Authoring\n\nThe goal of JSON Schemas in this repository is to correctly validate schemas that are used by the actual tools. That means, if a property is undocumented or deprecated, it should still be included in the schema.\n\n### Best practices\n\n✔️ **Use** the most recent JSON Schema version (specified by `$schema`) that's widely supported by editors and IDEs. Currently, the best supported version is `draft-07`. Later versions of JSON Schema are not recommended for use in SchemaStore until editor/IDE support improves for those versions.\n\n✔️ **Use** [`base.json`][base] schema for `draft-07` and [`base-04.json`][base-04] for `draft-04` with some common types for all schemas.\n\nThere is an [unofficial draft-07][draft-07-unofficial-strict] schema that uses JSON Schema to validate your JSON Schema. It checks that:\n\n- `type`, `title`, `description` properties are required\n- There are no empty arrays. For instance, it's impossible to write less than 2 sub-schemas for `allOf`\n- `type` can't be an array, which is intentional, `anyOf`/`oneOf` should be used in this case\n- It links to [understanding-json-schema](https://json-schema.org/understanding-json-schema/index.html) for each hint/check\n\nTo check your schema against that schema, use `node cli.js check-strict --schema-name=<schemaName.json>`.\n\n❌ **Don't forget** add test files.\n\n- Always be consistent across your schema: order properties and describe in the same style.\n- Always use `description`, `type`, `additionalProperties`.\n  - Always set `additionalProperties` to `false` unless documentation permits\n    additional properties explicitly. That tool the JSON schema is created for\n    can be changed in the future to allow wrong extra properties.\n- Don't end `title`/`description` values with colon.\n- Always omit leading articles for `title`-s and trailing punctuation to make\n  expected object values look more like types in programming languages. Also\n  start `title`-s with a lowercase letter and try use nouns for titles instead of sentences.\n- Always add documentation url to descriptions when available in the following\n  format: `<description>\\n<url>` like `\"Whether to ignore a theme configuration for the current site\\nhttps://jekyllrb.com/docs/configuration/options/#global-configuration\"`.\n\n[base]: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/base.json\n[base-04]: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/base-04.json\n[draft-07-unofficial-strict]: https://json.schemastore.org/metaschema-draft-07-unofficial-strict.json\n\n#### Avoiding Overconstraint\n\nSometimes, constraints do more harm than good. For example, [cron strings](http://pubs.opengroup.org/onlinepubs/7908799/xcu/crontab.html) validation regexes. In general, do not add a constraint if:\n\n- false positives are likely (due to their complexity or abundance of implementations)\n- its error message is too confusing or not helpful\n\nSo, do not add regex patterns for any of the following:\n\n- cron regexes\n- string-embedded DSLs\n- SSH URLs, HTTPS URLs, and other complex URIs\n\nIn addition, be wary when adding exhaustive support to enum-type fields. Often, when applications expand support (thus expanding the set of allowable enums), the schema will become invalid.\n\n#### Undocumented Features\n\nThe use of undocumented features in schemas is permitted and encouraged. However they must be labeled as such.\n\nIt is preferred to add `UNDOCUMENTED.` to the beginning of `description`.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"experimental_useBranchPrediction\": {\n      \"type\": \"string\",\n      \"description\": \"UNDOCUMENTED. Enables branch prediction in the build.\"\n    }\n  }\n}\n```\n\nHowever, that is not always possible or correct. Alternatively, use `$comment`:\n\n```json\n{\n  \"type\": \"object\",\n  \"tsBuildInfoFile\": {\n    \"$comment\": \"The value of 'null' is UNDOCUMENTED.\",\n    \"description\": \"Specify the folder for .tsbuildinfo incremental compilation files.\",\n    \"default\": \".tsbuildinfo\",\n    \"type\": [\"string\", \"null\"]\n  }\n}\n```\n\nIn this case, `{ \"tsBuildInfoFile\": null }` is not documented. Using a string value is, however.\n\n#### Deprecated Features\n\nSoftware that reads a schema may deprecate and eventually remove particular properties or features.\n\nFor most schemas, we don't recommend removing properties from schemas, especially immediately after they are no longer supported. They are useful during the migration process or if users are stuck on an older version.\n\nTo note that a property or feature is deprecated, use the same strategy as described in [Undocumented Features](#undocumented-features). For example:\n\n```json\n{\n  \"description\": \"DEPRECATED. Documentation of this property. Migrate to this alternative.\"\n}\n```\n\nNote that JSON Schema draft `2019-09` adds support for a `deprecated` field:\n\n```json\n{\n  \"description\": \"Documentation of this property. Migrate to this alternative.\",\n  \"deprecated\": true\n}\n```\n\nWhile this would be the best option, most schemas in this repository are `draft-07`. As a result, _Editors and IDEs may not use it_.\n\n#### API Compatibility\n\nCare must be taken to reduce breaking changes; some include:\n\n**1. Preserving schema names**\n\nWhen renaming a schema name, the old version must continue to exist. Otherwise, all references to it will break. The content of the old schema must look something like:\n\n```json\n{\n  \"$ref\": \"https://json.schemastore.org/NEWNAME.json\"\n}\n```\n\nThe process of renaming schemas is similar to [this section](#how-to-move-a-json-schema-from-schemastore-to-somewhere-thats-self-hosted).\n\n**2. Preserving schema paths**\n\nMany tools, such as [validate-pyproject](https://github.com/abravalheri/validate-pyproject), accept passing in subpaths for validation like so:\n\n```sh\nvalidate-pyproject --tool cibuildwheel=https://json.schemastore.org/cibuildwheel.toml#/properties/tool/properties\n```\n\nThis means that renames in subschema paths is a potentially a breaking change. However, it needs to be possible to refactor internal schema structures.\n\nIt is okay when refactoring the subschema to a location under `$defs` or `definitions`. Otherwise, use your best judgement. If a rename is necessary, it is recommended to keep the old path and `$ref` to the new location, if possible.\n\n#### Documenting Enums\n\nThere are several ways to document enums. It is recommended to use [this solution](https://github.com/json-schema-org/json-schema-spec/issues/57#issuecomment-247861695):\n\n```json\n{\n  \"oneOf\": [\n    { \"const\": \"foo\", \"description\": \"Description foo\" },\n    { \"const\": \"bar\", \"description\": \"Description bar\" }\n  ]\n}\n```\n\nIt is also possible to use `x-intellij-enum-metadata`:\n\n```json\n{\n  \"enum\": [\"foo\", \"bar\"],\n  \"x-intellij-enum-metadata\": {\n    \"foo\": {\n      \"description\": \"Description foo\"\n    },\n    \"bar\": {\n      \"description\": \"Description bar\"\n    }\n  }\n}\n```\n\nOr, `enumDescriptions`:\n\n```json\n{\n  \"enum\": [\"foo\", \"bar\"]\n  \"enumDescriptions\": [\n    \"Description foo\",\n    \"Description bar\"\n  ]\n}\n```\n\nThe latter two approaches are not recommended because they use editor-specific, non-standard properties. See [Non-standard Properties](#non-standard-properties) for details.\n\n### Language Server Features\n\nThere are several language servers that use SchemaStore:\n\n#### Non-standard Properties\n\nSome language servers support non-standard properties. They include:\n\n**`allowTrailingCommas`**\n\nUsed by: `vscode-json-languageservice`.\n\nWhether trailing commas are allowed in the schema itself. Use the [`allowTrailingCommas`](https://github.com/microsoft/vscode/issues/102061) field. See [this PR](https://github.com/SchemaStore/schemastore/pull/3259/files) if you wish to add this for your schema:\n\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"allowTrailingCommas\": true,\n  ...\n}\n```\n\n**`defaultSnippets`**\n\nUsed by: `vscode-json-languageservice`.\n\n**`markdownDescription`**\n\nUsed by: `vscode-json-languageservice`.\n\n**`enumDescriptions`**\n\nUsed by: `vscode-json-languageservice`. See [Documenting Enums](#documenting-enums) for details.\n\n**`x-taplo`**\n\nUsed by: `tamasfe/taplo`.\n\n**`x-taplo-info`**\n\nUsed by: `tamasfe/taplo`.\n\n**`x-intellij-language-injection`**\n\nUsed by Intellij.\n\n**`x-intellij-html-description`**\n\nUsed by Intellij.\n\n**`x-intellij-enum-metadata`**\n\nUsed by Intellij. See [Documenting Enums](#documenting-enums) for details.\n\n### Using the `CODEOWNERS` file\n\nThis repository uses the [the code-owner-self-merge](https://github.com/OSS-Docs-Tools/code-owner-self-merge) GitHub action to give project maintainers more control over their schema. It allows for:\n\n- Mentioning a user when a schema is modified in a PR\n- Enabling a user to merge a PR, so long it only modifies files that is \"owned\" by that user\n\nSee the [CODEOWNERS](.github/CODEOWNERS) file, the [action configuration](.github/workflows/codeowners-merge.yml), and [action documentation](https://github.com/OSS-Docs-Tools/code-owner-self-merge) for more information.\n\n## Schema Validation\n\nAfter authoring a schema, you'll want to validate so it behaves as intended against popular validators.\n\nThis repository validations JSON Schemas in multiple ways:\n\n### [Ajv](https://ajv.js.org) [strict mode](https://ajv.js.org/strict-mode.html)\n\n- The default validation mode that is most stringent\n- Checks schema to prevent any unexpected behaviors or silently ignored mistakes\n- Fixing strict mode errors does not change validation results, it only serves to improve schema quality\n- More info at [Ajv Strict mode docs](https://ajv.js.org/strict-mode.html#strict-schema)\n\n### [Ajv](https://ajv.js.org) non-strict mode\n\n- Some rules are relaxed for the sake of brevity\n- To validate under non-strict mode, add your schema to the `ajvNotStrictMode` field in [schema-validation.jsonc](src/schema-validation.jsonc)\n\n### [SchemaSafe](https://github.com/ExodusMovement/schemasafe)\n\n- Helps catch errors within schemas that would otherwise be missed. This is a WIP\n\nTo actually run the validation checks, see [How to validate a JSON Schema](#how-to-validate-a-json-schema).\n\n## About `catalog.json`\n\nThe `catalog.json` file is generally used by editors and extensions to determine which schemas apply to what files. Specifically:\n\n- VSCode ignores this file [see issue](https://github.com/microsoft/vscode/issues/26289)\n- [RedHat's YAML language server](#redhat-developeryaml-language-server) uses this file ([see configuration](https://github.com/redhat-developer/vscode-yaml/blob/41e0be736f2d07cdf7489e1c1c591b35b990e096/package.json#L176))\n- [Taplo TOML language server](#tamasfetaplo) uses this file (see [this](https://github.com/tamasfe/taplo/blob/2e01e8cca235aae3d3f6d4415c06fd52e1523934/editors/vscode/package.json#L240) and [this](https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml))\n\nSometimes, `catalog.json` is interpreted differently:\n\n- With [RedHat's YAML language server](#redhat-developeryaml-language-server), the `fileMatch` will not work as expected if no `.ya?ml` extension is supplied with a custom file extension\n  - See [upstream issue](https://github.com/redhat-developer/yaml-language-server/issues/790)\n  - See the [schemastore issue](https://github.com/SchemaStore/schemastore/pull/3982) issue for more info\n\nAnd, generally, if a software supports multiple formats, stick with configuration file formats like JSON and avoid JavaScript. See [this](https://github.com/SchemaStore/schemastore/pull/3989) issue.\n\n## Compatible Language Servers and Tools\n\n### [`redhat-developer/yaml-language-server`](https://github.com/redhat-developer/yaml-language-server)\n\n- Used by VSCode's [Red Hat YAML extension](https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml)\n\n### [`tamasfe/taplo`](https://github.com/tamasfe/taplo)\n\n- Used by VSCode's [Even Better TOML extension](https://marketplace.visualstudio.com/items?itemName=tamasfe.even-better-toml)\n- More information [here](https://taplo.tamasfe.dev/configuration/developing-schemas.html)\n\n### [`Microsoft/vscode-json-languageservice`](https://github.com/Microsoft/vscode-json-languageservice)\n\n- Used by VSCode\n- Used by Zed (see [source](https://github.com/zed-industries/zed/blob/eb9eae09b1186ca54895a80a352da76591625032/crates/languages/src/json.rs#L31))\n- Used by Emacs's LSP Mode (see [docs](https://emacs-lsp.github.io/lsp-mode/page/lsp-json/))\n- More information [here](https://code.visualstudio.com/docs/languages/json)\n\n### Other\n\n- Visual Studio proprietary\n- Intellij proprietary\n- [vscode-langservers-extracted](https://github.com/hrsh7th/vscode-langservers-extracted)\n- [SchemaStore.nvim](https://github.com/b0o/SchemaStore.nvim)\n\n## Troubleshooting\n\nSome common errors include:\n\n### Dependency Errors\n\nWhen updating the working tree, you may suddenly come across issues with dependencies like the following:\n\n```console\n$ node ./cli.js\nnode:internal/modules/esm/resolve:838\n  throw new ERR_MODULE_NOT_FOUND(packageName, fileURLToPath(base), null);\n        ^\n\nError [ERR_MODULE_NOT_FOUND]: Cannot find package 'ajv' imported from .../schemastore/cli.js\n    at packageResolve (node:internal/modules/esm/resolve:838:9)\n    ...\n    at ModuleJob._link (node:internal/modules/esm/module_job:132:49) {\n  code: 'ERR_MODULE_NOT_FOUND'\n}\n\nNode.js v23.0.0\n```\n\nTo fix dependencies it is recommended to run `npm clean-install`. The command `npm install` should work as well.\n\n### `pre-commit` fails to format files in CI\n\nThe `pre-commit.ci` action can \"mysteriously\" fail to automatically commit formatted files. This happens because the repository corresponding to the pull request branch is not owned by a user account. This constraint is detailed in [GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork).\n\nTo fix this, run the formatter manually:\n\n```console\nnpm run prettier:fix\n```\n\nNote this will also format the following files:\n\n```sh\n$ git status --short\nM src/test/prettierrc/.prettierrc.yml\nM src/test/prettierrc/prettierrc.json\n```\n\n_Do not_ add those two files; pre-commit.ci seems to have issue with them. (Undo modifications to those files by running `git restore -- 'src/test/prettierrc/*'`)\n\nTo run Prettier on scpecific files, run:\n\n```console\n# Run on a schema file\n./node_modules/.bin/prettier --config .prettierrc.cjs --ignore-path .gitignore --write src/schemas/json/<schemaName.json>\n# Run on test files\n./node_modules/.bin/prettier --config .prettierrc.cjs --ignore-path .gitignore --write src/test/<schemaName>/\n```\n\n## How-to\n\n### How to add a JSON Schema that's hosted in this repository\n\nFollow these instructions if you want to add the JSON schema file directly to this repository. If you want to keep the JSON schema hosted elsewhere, see [How to add a JSON Schema that's self-hosted/remote/external](#how-to-add-a-json-schema-thats-self-hostedremoteexternal).\n\nWhen uploading a new schema file, make sure it targets a file that is commonly used or has potential for broad uptake.\n\nFirst, clone the repository:\n\n```sh\ngit clone https://github.com/SchemaStore/schemastore\ncd schemastore\n```\n\nBe sure that [NodeJS](https://nodejs.org) is installed. The minimum required NodeJS version is defined by the `engines` key in [package.json](package.json). Now, install dependencies and run the `new-schema` task:\n\n```sh\nnpm clean-install\nnode cli.js new-schema\n```\n\nYou will be prompted for the name of the schema. Once you enter your schema name, the task will:\n\n- Create a new schema file at `src/schemas/json/<schemaName>.json`\n- Create a positive test file at `src/test/<schemaName>/<schemaName>.json`\n- Print a string for you to add to the [Schema Catalog](src/api/json/catalog.json)\n\nIf you do not wish to use the `new-schema` task, the manual steps are listed below 👇\n\n<details>\n\n<summary>Manual Steps</summary>\n\n1. Create a schema file in `src/schemas/json/<name>.json`:\n\n   ```json\n   {\n     \"$id\": \"https://json.schemastore.org/<schemaName>.json\",\n     \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n     \"additionalProperties\": true,\n     \"properties\": {},\n     \"type\": \"object\"\n   }\n   ```\n\n2. Add positive test files at `src/test/<schemaName>/<testFile>`: (optional, but _strongly_ recommended)\n\n   File extensions `.json`, `.toml`, `.yml`, and `.yaml` are supported.\n\n3. Add negative test files at `src/negative_test/<schemaName>/<testFile>` (optional)\n\n4. Register your schema (in alphabetical order) in the [schema catalog](src/api/json/catalog.json):\n\n   ```json\n   {\n     \"description\": \"Schema description\",\n     \"fileMatch\": [\"list of well-known filenames matching schema\"],\n     \"name\": \"Friendly schema name\",\n     \"url\": \"https://json.schemastore.org/<schemaName>.json\"\n   }\n   ```\n\n</details>\n\nFinally, validate your changes. See [How to Validate a JSON Schema](#how-to-validate-a-json-schema) for details.\n\n### How to add a JSON Schema that's self-hosted/remote/external\n\nYou may wish to serve a schema from `https://json.schemastore.org/<schemaName>.json`, but keep the content of the schema file at a place you control (not this repository).\n\nSee [this PR](https://github.com/SchemaStore/schemastore/pull/1211/files) as an example. Simply register your schema in the [schema catalog](src/api/json/catalog.json), with the `url` field pointing to your schema file:\n\n```json\n{\n  \"name\": \"hydra.yml\",\n  \"description\": \"ORY Hydra configuration file\",\n  \"fileMatch\": [\n    \"hydra.json\",\n    \"hydra.yml\",\n    \"hydra.yaml\",\n    \"hydra.toml\"\n  ],\n  \"url\": \"https://raw.githubusercontent.com/ory/hydra/master/.schema/version.schema.json\"\n},\n```\n\n### How to edit an existing JSON Schema\n\nFirst, clone the repository:\n\n```sh\ngit clone https://github.com/SchemaStore/schemastore\ncd schemastore\n```\n\nBe sure that [NodeJS](https://nodejs.org) is installed. The minimum required NodeJS version is defined by the `engines` key in [package.json](package.json).\n\nNow, modify the schema you intend to modify. Schemas are located under `src/schemas/json`.\n\nFinally, validate your changes. See [How to Validate a JSON Schema](#how-to-validate-a-json-schema) for details.\n\n### How to add a JSON Schema with multiple versions\n\nRefer to this [`agripparc` PR](https://github.com/SchemaStore/schemastore/pull/1950/files) as an example. First, your schema names should be suffixed with the version number.\n\n- `src/schemas/json/agripparc-1.2.json`\n- `src/schemas/json/agripparc-1.3.json`\n- `src/schemas/json/agripparc-1.4.json`\n\nThen, use the `versions` field to list each of them. Add the latest version to the `url` field:\n\n```json\n{\n  \"description\": \"JSON schema for the Agrippa config file\",\n  \"fileMatch\": [\".agripparc.json\", \"agripparc.json\"],\n  \"name\": \".agripparc.json\",\n  \"url\": \"https://json.schemastore.org/agripparc-1.4.json\",\n  \"versions\": {\n    \"1.2\": \"https://json.schemastore.org/agripparc-1.2.json\",\n    \"1.3\": \"https://json.schemastore.org/agripparc-1.3.json\",\n    \"1.4\": \"https://json.schemastore.org/agripparc-1.4.json\"\n  }\n}\n```\n\n### How to move a JSON Schema from SchemaStore to somewhere that's self-hosted\n\nSimply changing the `url` field in the schema catalog (as described [here](#how-to-add-a-json-schema-thats-self-hostedremoteexternal)) is not enough. You must also:\n\n- Keep the original schema files in the repository and point to your schema with `$ref`\n- Add an entry under `skiptest` so the remaining schema file isn't tested\n\nSee [this PR](https://github.com/SchemaStore/schemastore/pull/2421/files) for a full example.\n\n### How to add a `$ref` to a JSON Schema that's hosted in this repository\n\n`$ref` from `schema_x.json` to `schema_y.json`\n\n- Both schemas must exist [locally](src/schemas/json) in SchemaStore.\n- Both schemas must have the same draft (ex. `draft-07`)\n- `schema_y.json` must have `id` or `$id` with this value `\"https://json.schemastore.org/schema_y.json\"`\n- In `schema_x.json`, add ref to `schema_y.json`: `\"$ref\": \"https://json.schemastore.org/schema_y.json#...\"`\n- Within [schema-validation.jsonc](./src/schema-validation.jsonc), in `\"options\": []`, add an entry:\n  `{ \"schema_x.json\": {\"externalSchema\": [\"schema_y.json\"] } }`\n\n### How to add a `$ref` to a JSON Schema that's self-hosted\n\nThis currently isn't possible. This is tracked by [issue #2731](https://github.com/SchemaStore/schemastore/issues/2731).\n\n### How to validate a JSON Schema\n\nTo validate all schemas, run:\n\n```console\nnode ./cli.js check\n```\n\nBecause there are hundreds of schemas, you may only want to validate a single one to save time. To do this, run:\n\n```console\nnode ./cli.js check --schema-name=<schemaName.json>\n```\n\nFor example, to validate the [`ava.json`](https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/ava.json) schema, run `node ./cli.js check --schema-name=ava.json`\n\nNote that `<schemaName.json>` refers to the _filename_ that the schema has under `src/schemas/json`.\n\n### How to ignore validation errors in a JSON Schema\n\n> **Note**\n> Please only do this if you _must_. Validating in strict mode catches many common errors by schema authors and improves schema quality.\n\nSometimes, the build fails due to a failed validation check. See a list of validation checks [here](#how-to-validate-a-json-schema). An error may look like:\n\n```txt\n>> compile              | schemas/json/prefect-deploy.json (draft-07)(FullStrictMode)\n>> Error: strict mode: use allowUnionTypes to allow union type keyword at \"#/definitions/prefect_docker.deployments.steps.push_docker_image/properties/credentials\" (strictTypes)\n```\n\nTo ignore most validation errors, you need to modify `./src/schema-validation.jsonc`:\n\n- If a strict error fails, you need to add your JSON Schema to the `ajvNotStrictMode` array\n- If you are getting \"unknown format\" or \"unknown keyword\" errors, you need to add your JSON Schema to the `options` object\n- If you are using a recent version of the JSON Schema specification, you will need to add your JSON Schema to the `highSchemaVersion` array\n\n### How to name schemas that are subschemas (`partial-`)\n\nOften, it is useful to extract a subschema into its own file. This can make it easier to write tests, find schemas pertaining to a particular project, and logically separate extremely large schemas. The `partial-` prefix makes it easier for SchemaStore developers and subschema consumers to identify that the schema is a subschema.\n\nA subschema should be extracted to its own file based on the following rules:\n\n- If a schema represents an existing project that could be its own file, then simply use that file for the \"subschema\". In other places, `$ref` that file where appropriate.\n  - For example, [mypy](https://mypy-lang.org) reads configuration from both `mypy.ini` and `pyproject.toml`'s `tool.mypy` key. Because `mypy.ini` is its own file, then name the schema `mypy.json` like you usually would.\n  - Same with [Prettier](https://prettier.io). It reads from `.prettierrc.json` (among other files) and `package.json`'s `prettier` key.\n- If the schema cannot be its own file, then extracting the subschema may be an improvement\n  - For example, [Poetry](https://python-poetry.org) reads configuration _only_ from `pyproject.toml`'s `tool.poetry` key. Because the Poetry subschema is relatively complex and a large project, it has been extracted to its own file, `partial-poetry.json`.\n- If the schema must exist locally to workaround issue [#2731](https://github.com/SchemaStore/schemastore/issues/2731), then the subschema should be extracted\n  - In a top-level `$comment`, you must add the date at which you copied the original. See [#3526](https://github.com/SchemaStore/schemastore/issues/3526) for an example\n\nUse your best judgement; if the project or schema is small, then the drawbacks of extracting the subschema to its own file likely outweigh the benefits.\n\n## Older Links\n\n### use-of-codeowners-file\n\nSee [Using the `CODEOWNERS` file](#using-the-codeowners-file).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.072265625,
          "content": "JSON Schema Store\nCopyright 2015-Current Mads Kristensen and Contributors\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.423828125,
          "content": "# JSON Schema Store\n\nThe largest collection of independent JSON schemas in the world.\n\n[![Build status](https://github.com/SchemaStore/schemastore/actions/workflows/nodejs.yml/badge.svg)](https://github.com/SchemaStore/schemastore/actions/workflows/nodejs.yml)\n\nThe repository is a universal JSON schema store, where schemas for popular JSON documents can be found.\n\n## Contribute\n\nContributions are more than welcome! Read [CONTRIBUTING.md](./CONTRIBUTING.md) for more information.\n\n## Help us out\n\nKeeping Schemastore.org running smoothly requires time, effort, and resources. While it’s still volunteer-driven, the infrastructure and maintenance costs have grown alongside its popularity.\n\nAnd here’s the thing: for-profit organizations are among the biggest beneficiaries of Schemastore.org. They use the schemas to validate configurations, streamline workflows, and, ultimately, save time and money. If you’re part of such an organization - whether you’re contributing schemas or relying on them - I have a request: consider sponsoring Schemastore.org.\n\nYour support would help cover hosting, maintenance, and development costs, ensuring this resource remains free and open for the entire community. It’s a small way to give back to something that likely saves you (and your team) time and effort every day.\n\nYou can find [sponsorship details on the site](https://github.com/sponsors/madskristensen), or feel free to reach out to me directly.\n"
        },
        {
          "name": "SchemaStore.sln",
          "type": "blob",
          "size": 1.9111328125,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.5.33004.408\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{E24C65DC-7377-472B-9ABA-BC803B73C61A}\") = \"src\", \"http://localhost:20996\", \"{CE5A045B-A3C0-4723-BE8E-5BA90AB01B2E}\"\n\tProjectSection(WebsiteProperties) = preProject\n\t\tUseIISExpress = \"true\"\n\t\tTargetFrameworkMoniker = \".NETFramework,Version%3Dv4.8\"\n\t\tDebug.AspNetCompiler.VirtualPath = \"/localhost_20996\"\n\t\tDebug.AspNetCompiler.PhysicalPath = \"src\\\"\n\t\tDebug.AspNetCompiler.TargetPath = \"PrecompiledWeb\\localhost_20996\\\"\n\t\tDebug.AspNetCompiler.Updateable = \"true\"\n\t\tDebug.AspNetCompiler.ForceOverwrite = \"true\"\n\t\tDebug.AspNetCompiler.FixedNames = \"false\"\n\t\tDebug.AspNetCompiler.Debug = \"True\"\n\t\tRelease.AspNetCompiler.VirtualPath = \"/localhost_20996\"\n\t\tRelease.AspNetCompiler.PhysicalPath = \"src\\\"\n\t\tRelease.AspNetCompiler.TargetPath = \"PrecompiledWeb\\localhost_20996\\\"\n\t\tRelease.AspNetCompiler.Updateable = \"true\"\n\t\tRelease.AspNetCompiler.ForceOverwrite = \"true\"\n\t\tRelease.AspNetCompiler.FixedNames = \"false\"\n\t\tRelease.AspNetCompiler.Debug = \"False\"\n\t\tSlnRelativePath = \"src\\\"\n\tEndProjectSection\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{2894A85F-0FF5-46C7-9073-E4E710A3245C}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.editorconfig = .editorconfig\n\t\t.gitignore = .gitignore\n\t\tLICENSE.md = LICENSE.md\n\t\tREADME.md = README.md\n\tEndProjectSection\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{CE5A045B-A3C0-4723-BE8E-5BA90AB01B2E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{CE5A045B-A3C0-4723-BE8E-5BA90AB01B2E}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "cli.js",
          "type": "blob",
          "size": 51.3291015625,
          "content": "/// <binding AfterBuild='build' />\n// @ts-check\nimport path from 'node:path'\nimport fs from 'node:fs/promises'\nimport fsCb from 'node:fs'\nimport readline from 'node:readline'\nimport util from 'node:util'\n\nimport _AjvDraft04 from 'ajv-draft-04'\nimport { Ajv as AjvDraft06And07 } from 'ajv'\nimport _Ajv2019 from 'ajv/dist/2019.js'\nimport _Ajv2020 from 'ajv/dist/2020.js'\nimport _addFormats from 'ajv-formats'\nimport { ajvFormatsDraft2019 } from '@hyperupcall/ajv-formats-draft2019'\nimport schemasafe from '@exodus/schemasafe'\nimport TOML from 'smol-toml'\nimport YAML from 'yaml'\nimport jsonlint from '@prantlf/jsonlint'\nimport * as jsoncParser from 'jsonc-parser'\nimport ora from 'ora'\nimport chalk from 'chalk'\nimport minimist from 'minimist'\nimport fetch from 'node-fetch'\n\n/**\n * @import { Ora } from 'ora'\n */\n\n/**\n * Ajv defines types, but they don't work when importing the library with\n * ESM syntax. Tweaking `jsconfig.json` with `esModuleInterop` didn't seem\n * to fix things, so manually set the types with a cast. This issue is\n * tracked upstream at https://github.com/ajv-validator/ajv/issues/2132.\n */\n/** @type {typeof _AjvDraft04.default} */\nconst AjvDraft04 = /** @type {any} */ (_AjvDraft04)\n\n/** @type {typeof _Ajv2019.default} */\nconst Ajv2019 = /** @type {any} */ (_Ajv2019)\n\n/** @type {typeof _Ajv2020.default} */\nconst Ajv2020 = /** @type {any} */ (_Ajv2020)\n\n/** @type {typeof _addFormats.default} */\nconst addFormats = /** @type {any} */ (_addFormats)\n\n// Declare constants.\nconst AjvDraft06SchemaJson = await readJsonFile(\n  'node_modules/ajv/dist/refs/json-schema-draft-06.json',\n)\n\nconst CatalogFile = './src/api/json/catalog.json'\nconst Catalog = /** @type {CatalogJson} */ (\n  jsoncParser.parse(await fs.readFile(CatalogFile, 'utf-8'))\n)\n\nconst SchemaValidationFile = './src/schema-validation.jsonc'\nconst SchemaValidation = /** @type {SchemaValidationJson} */ (\n  jsoncParser.parse(await fs.readFile(SchemaValidationFile, 'utf-8'))\n)\n\nconst SchemaDir = './src/schemas/json'\nconst TestPositiveDir = './src/test'\nconst TestNegativeDir = './src/negative_test'\nconst UrlSchemaStore = 'https://json.schemastore.org/'\nconst [SchemasToBeTested, FoldersPositiveTest, FoldersNegativeTest] = (\n  await Promise.all([\n    fs.readdir(SchemaDir),\n    fs.readdir(TestPositiveDir),\n    fs.readdir(TestNegativeDir),\n  ])\n).map((files) => {\n  return files.filter((file) => !isIgnoredFile(file))\n})\n\n// prettier-ignore\nconst SchemaDialects = [\n  { draftVersion: '2020-12', url: 'https://json-schema.org/draft/2020-12/schema', isActive: true, isTooHigh: true },\n  { draftVersion: '2019-09', url: 'https://json-schema.org/draft/2019-09/schema', isActive: true, isTooHigh: true },\n  { draftVersion: 'draft-07', url: 'http://json-schema.org/draft-07/schema#', isActive: true, isTooHigh: false },\n  { draftVersion: 'draft-06', url: 'http://json-schema.org/draft-06/schema#', isActive: false, isTooHigh: false },\n  { draftVersion: 'draft-04', url: 'http://json-schema.org/draft-04/schema#', isActive: false, isTooHigh: false },\n  { draftVersion: 'draft-03', url: 'http://json-schema.org/draft-03/schema#', isActive: false, isTooHigh: false },\n]\n\n/** @type {{ _: string[], fix?: boolean, help?: boolean, SchemaName?: string, 'schema-name'?: string, 'unstable-check-with'?: string }} */\nconst argv = /** @type {any} */ (\n  minimist(process.argv.slice(2), {\n    string: ['SchemaName', 'schema-name', 'unstable-check-with'],\n    boolean: ['help'],\n  })\n)\nif (argv.SchemaName) {\n  process.stderr.write(\n    `WARNING: Please use \"--schema-name\" instead of \"--SchemaName\". The flag \"--SchemaName\" will be removed.\\n`,\n  )\n  argv['schema-name'] = argv.SchemaName\n}\n\n/**\n * @typedef {Object} JsonSchemaAny\n * @property {string} $schema\n * @property {string | undefined} $ref\n *\n * @typedef {Object} JsonSchemaDraft04\n * @property {undefined} $id\n * @property {string} id\n *\n * @typedef {Object} JsonSchemaDraft07\n * @property {string} $id\n * @property {undefined} id\n *\n * @typedef {JsonSchemaAny & (JsonSchemaDraft04 | JsonSchemaDraft07)} JsonSchema\n */\n\n/**\n * @typedef {Object} CatalogJsonEntry\n * @property {string} name\n * @property {string} description\n * @property {string[]} fileMatch\n * @property {string} url\n * @property {Record<string, string>} versions\n *\n * @typedef {Object} CatalogJson\n * @property {number} version\n * @property {CatalogJsonEntry[]} schemas\n */\n\n/**\n * @typedef {Object} SchemaValidationJsonOption\n * @property {string[]} unknownFormat\n * @property {string[]} unknownKeywords\n * @property {string[]} externalSchema\n *\n * @typedef {Object} SchemaValidationJson\n * @property {string[]} ajvNotStrictMode\n * @property {string[]} fileMatchConflict\n * @property {string[]} highSchemaVersion\n * @property {string[]} missingCatalogUrl\n * @property {string[]} skiptest\n * @property {string[]} catalogEntryNoLintNameOrDescription\n * @property {Record<string, SchemaValidationJsonOption>} options\n */\n\n/**\n * @typedef {Object} DataFile\n * @property {Buffer} buffer\n * @property {string} text\n * @property {Record<PropertyKey, unknown>} json\n * @property {string} name\n * @property {string} path\n *\n * @typedef {Object} SchemaFile\n * @property {Buffer} buffer\n * @property {string} text\n * @property {JsonSchema} json\n * @property {string} name\n * @property {string} path\n */\n\nasync function exists(/** @type {string} */ filepath) {\n  return fs\n    .stat(filepath)\n    .then(() => {\n      return true\n    })\n    .catch((/** @type {NodeJS.ErrnoException} */ err) => {\n      if (err instanceof Error && err.code === 'ENOENT') {\n        return false\n      } else {\n        throw err\n      }\n    })\n}\n\nasync function readJsonFile(/** @type {string} */ filename) {\n  return JSON.parse(await fs.readFile(filename, 'utf-8'))\n}\n\nfunction isIgnoredFile(/** @type {string} */ file) {\n  return file === '.DS_Store'\n}\n\nasync function forEachCatalogUrl(\n  /** @type {((arg0: string) => (void | Promise<void>))} */ fn,\n) {\n  for (const catalogEntry of Catalog.schemas) {\n    await fn(catalogEntry.url)\n    for (const url of Object.values(catalogEntry?.versions ?? {})) {\n      await fn(url)\n    }\n  }\n}\n\n/**\n * @typedef {Object} ExtraParams\n   @property {any} spinner\n}\n * @typedef {Object} ForEachTestFile\n * @property {string} [actionName]\n * @property {(arg0: SchemaFile, arg1: ExtraParams) => Promise<any>} [onSchemaFile]\n * @property {(arg0: SchemaFile, arg1: DataFile, data: any, arg2: ExtraParams) => Promise<void>} [onPositiveTestFile]\n * @property {(arg0: SchemaFile, arg1: DataFile, data: any, arg2: ExtraParams) => Promise<void>} [onNegativeTestFile]\n * @property {(arg0: SchemaFile, arg1: ExtraParams) => Promise<void>} [afterSchemaFile]\n */\nasync function forEachFile(/** @type {ForEachTestFile} */ obj) {\n  const spinner = ora()\n  if (obj.actionName) {\n    spinner.start()\n  }\n\n  for (const dirent1 of await fs.readdir(SchemaDir, { withFileTypes: true })) {\n    if (isIgnoredFile(dirent1.name)) continue\n\n    const schemaName = dirent1.name\n    const schemaId = schemaName.replace('.json', '')\n\n    if (argv['schema-name'] && argv['schema-name'] !== schemaName) {\n      continue\n    }\n\n    if (SchemaValidation.skiptest.includes(schemaName)) {\n      continue\n    }\n\n    const schemaPath = path.join(SchemaDir, schemaName)\n    const schemaFile = await toFile(schemaPath)\n    spinner.text = `Running \"${obj.actionName}\" on file \"${schemaFile.path}\"`\n    const data = await obj?.onSchemaFile?.(schemaFile, { spinner })\n\n    if (obj?.onPositiveTestFile) {\n      const positiveTestDir = path.join(TestPositiveDir, schemaId)\n      if (await exists(positiveTestDir)) {\n        for (const testfile of await fs.readdir(positiveTestDir)) {\n          if (isIgnoredFile(testfile)) continue\n\n          const testfilePath = path.join(TestPositiveDir, schemaId, testfile)\n          let file = await toFile(testfilePath)\n          await obj.onPositiveTestFile(schemaFile, file, data, { spinner })\n        }\n      }\n    }\n\n    if (obj?.onNegativeTestFile) {\n      const negativeTestDir = path.join(TestNegativeDir, schemaId)\n      if (await exists(negativeTestDir)) {\n        for (const testfile of await fs.readdir(negativeTestDir)) {\n          if (isIgnoredFile(testfile)) continue\n\n          const testfilePath = path.join(TestNegativeDir, schemaId, testfile)\n          let file = await toFile(testfilePath)\n          await obj.onNegativeTestFile(schemaFile, file, data, { spinner })\n        }\n      }\n    }\n\n    await obj?.afterSchemaFile?.(schemaFile, { spinner })\n  }\n\n  if (obj.actionName) {\n    spinner.stop()\n    console.info(`✔️ Completed \"${obj.actionName}\"`)\n  }\n}\n\nasync function toFile(/** @type {string} */ schemaPath) {\n  const buffer = await fs.readFile(schemaPath)\n  const text = buffer.toString()\n  return {\n    buffer,\n    text,\n    json: await readDataFile({ filepath: schemaPath, text }),\n    name: path.basename(schemaPath),\n    path: schemaPath,\n  }\n}\n\nasync function readDataFile(\n  /** @type {{filepath: string, text: string }} */ obj,\n) {\n  const fileExtension = path.parse(obj.filepath).ext\n  switch (fileExtension) {\n    case '.json':\n      try {\n        return JSON.parse(obj.text)\n      } catch (err) {\n        printErrorAndExit(err, [`Failed to parse JSON file \"${obj.filepath}\"`])\n      }\n      break\n    case '.jsonc':\n      try {\n        return jsoncParser.parse(obj.text)\n      } catch (err) {\n        printErrorAndExit(err, [`Failed to parse JSONC file \"${obj.filepath}\"`])\n      }\n      break\n    case '.yaml':\n    case '.yml':\n      try {\n        return YAML.parse(obj.text)\n      } catch (err) {\n        printErrorAndExit(err, [`Failed to parse YAML file \"${obj.filepath}\"`])\n      }\n      break\n    case '.toml':\n      try {\n        return TOML.parse(obj.text)\n      } catch (err) {\n        printErrorAndExit(err, [`Failed to parse TOML file \"${obj.filepath}\"`])\n      }\n      break\n    default:\n      printErrorAndExit(new Error(), [\n        `Unable to handle file extension \"${fileExtension}\" for file \"${obj.filepath}\"`,\n      ])\n      break\n  }\n}\n\n/**\n * @param {unknown} error\n * @param {string[]} [messages]\n * @param {string} [extraText]\n * @returns {never}\n */\nfunction printErrorAndExit(error, messages, extraText) {\n  if (Array.isArray(messages) && messages.length > 0) {\n    console.warn('---')\n    for (const msg of messages) {\n      console.error(chalk.red('>>') + ' ' + msg)\n    }\n  }\n\n  if (extraText) {\n    process.stderr.write(extraText)\n    process.stderr.write('\\n')\n  }\n\n  console.warn('---')\n  process.stderr.write(error instanceof Error ? (error?.stack ?? '') : '')\n  process.stderr.write('\\n')\n  process.exit(1)\n}\n\nfunction getSchemaDialect(/** @type {string} */ schemaUrl) {\n  const schemaDialect = SchemaDialects.find((obj) => schemaUrl === obj.url)\n  if (!schemaDialect) {\n    throw new Error(`No schema dialect found for url: ${schemaUrl}`)\n  }\n\n  return schemaDialect\n}\n\n/**\n * @typedef {Object} AjvFactoryOptions\n * @property {string} draftVersion\n * @property {boolean} fullStrictMode\n * @property {string[]} [unknownFormats]\n * @property {string[]} [unknownKeywords]\n * @property {string[]} [unknownSchemas]\n * @property {Record<PropertyKey, unknown>} [options]\n */\n\n/**\n * Returns the correct and configured Ajv instance for a particular $schema version\n */\nasync function ajvFactory(\n  /** @type {AjvFactoryOptions} */ {\n    draftVersion,\n    fullStrictMode = true,\n    unknownFormats = [],\n    unknownKeywords = [],\n    unknownSchemas = [],\n    options,\n  },\n) {\n  let ajvOptions = {}\n  Object.assign(\n    ajvOptions,\n    fullStrictMode\n      ? {\n          strict: true,\n        }\n      : {\n          strictTypes: false, // recommended: true\n          strictTuples: false, // recommended: true\n          allowMatchingProperties: true, // recommended: false\n        },\n  )\n  Object.assign(ajvOptions, options)\n\n  let ajv\n  switch (draftVersion) {\n    case 'draft-04':\n      ajv = new AjvDraft04(ajvOptions)\n      addFormats(ajv)\n      break\n    case 'draft-06':\n      ajv = new AjvDraft06And07(ajvOptions)\n      ajv.addMetaSchema(AjvDraft06SchemaJson)\n      addFormats(ajv)\n      break\n    case 'draft-07':\n      /**\n       * Note that draft-07 defines iri{,-reference}, idn-{hostname,email}, which\n       * are not available through `addFormats`. So, use `ajvFormatsDraft2019` to\n       * obtain these. Thus, some draft2019 formats like \"duration\" are applied.\n       * See https://ajv.js.org/packages/ajv-formats.html for details.\n       */\n      ajv = new AjvDraft06And07(ajvOptions)\n      addFormats(ajv)\n      ajvFormatsDraft2019(ajv)\n      break\n    case '2019-09':\n      ajv = new Ajv2019(ajvOptions)\n      addFormats(ajv)\n      ajvFormatsDraft2019(ajv)\n      break\n    case '2020-12':\n      ajv = new Ajv2020(ajvOptions)\n      addFormats(ajv)\n      ajvFormatsDraft2019(ajv)\n      break\n    default:\n      throw new Error('No JSON Schema version specified')\n  }\n\n  /**\n   * In strict mode, Ajv will throw an error if it does not\n   * recognize any non-standard formats. That is, unrecognized\n   * values of the \"format\" field. Supply this information to\n   * Ajv to prevent errors.\n   */\n  for (const format of unknownFormats) {\n    ajv.addFormat(format, true)\n  }\n\n  /**\n   * Ditto, but with keywords (ex. \"x-intellij-html-description\")..\n   */\n  for (const unknownKeyword of unknownKeywords) {\n    ajv.addKeyword(unknownKeyword)\n  }\n\n  /**\n   * Ditto, but with \"$ref\" URIs to external schemas.\n   */\n  for (const schemaPath of unknownSchemas) {\n    ajv.addSchema(await readJsonFile(schemaPath))\n  }\n\n  return ajv\n}\n\nfunction getSchemaOptions(/** @type {string} */ schemaName) {\n  const options = SchemaValidation.options[schemaName] ?? {}\n\n  return {\n    unknownFormats: options.unknownFormat ?? [],\n    unknownKeywords: options.unknownKeywords ?? [],\n    unknownSchemas: (options.externalSchema ?? []).map((schemaName2) => {\n      return path.join(SchemaDir, schemaName2)\n    }),\n  }\n}\n\nasync function taskNewSchema() {\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  })\n\n  console.log('Enter the name of the schema (without .json extension)')\n  await handleInput()\n  async function handleInput(/** @type {string | undefined} */ schemaName) {\n    if (!schemaName || schemaName.endsWith('.json')) {\n      rl.question('input: ', handleInput)\n      return\n    }\n\n    const schemaFile = path.join(SchemaDir, schemaName + '.json')\n    const testDir = path.join(TestPositiveDir, schemaName)\n    const testFile = path.join(testDir, `${schemaName}.json`)\n\n    if (await exists(schemaFile)) {\n      throw new Error(`Schema file already exists: ${schemaFile}`)\n    }\n\n    console.info(`Creating schema file at 'src/${schemaFile}'...`)\n    console.info(`Creating positive test file at 'src/${testFile}'...`)\n\n    await fs.mkdir(path.dirname(schemaFile), { recursive: true })\n    await fs.writeFile(\n      schemaFile,\n      `{\n  \"$id\": \"https://json.schemastore.org/${schemaName}.json\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"additionalProperties\": true,\n  \"properties\": {\n\n  },\n  \"type\": \"object\"\n}\\n`,\n    )\n    await fs.mkdir(testDir, { recursive: true })\n    await fs.writeFile(\n      testFile,\n      `\"Replace this file with an example/test that passes schema validation. Supported formats are JSON, YAML, and TOML. We recommend adding as many files as possible to make your schema most robust.\"\\n`,\n    )\n\n    console.info(`Please add the following to 'src/api/json/catalog.json':\n{\n  \"name\": \"\",\n  \"description\": \"\",\n  \"fileMatch\": [\"${schemaName}.yml\", \"${schemaName}.yaml\"],\n  \"url\": \"https://json.schemastore.org/${schemaName}.json\"\n}`)\n    process.exit(0)\n  }\n}\n\nasync function taskLint() {\n  const /** @type {{count: number, file: string}[]} */ entries = []\n\n  await forEachFile({\n    actionName: 'lint',\n    async onSchemaFile(schema) {\n      // This checks to be sure $id is a schemastore.org URL.\n      // Commenting out because it is overly aggressive for now.\n      // await assertSchemaHasCorrectMetadata(schema)\n      await assertTopLevelRefIsStandalone(schema)\n      // await assertSchemaNoSmartQuotes(schema)\n\n      try {\n        const errors = schemasafe.lint(schema.json, {\n          // mode: 'strong',\n          requireSchema: true,\n          requireValidation: true,\n          requireStringValidation: false,\n          complexityChecks: true,\n          forbidNoopValues: true,\n\n          extraFormats: false,\n          schemas: {},\n        })\n        for (const err of errors) {\n          console.log(`${schema.name}: ${err.message}`)\n        }\n        entries.push({\n          count: errors.length,\n          file: schema.name,\n        })\n      } catch (err) {\n        console.log(err)\n        return\n      }\n    },\n  })\n\n  entries.sort((a, b) => a.count - b.count)\n  for (const entry of entries) {\n    console.info(`${entry.count}: ${entry.file}`)\n  }\n}\n\nasync function taskCheck() {\n  console.info(`===== VALIDATE PRECONDITIONS =====`)\n  await assertFileSystemIsValid()\n\n  // Check catalog.json.\n  await assertFileValidatesAgainstSchema(\n    CatalogFile,\n    path.join(SchemaDir, 'schema-catalog.json'),\n  )\n  await assertFilePassesJsonLint(await toFile(CatalogFile))\n  assertCatalogJsonHasNoDuplicateNames()\n  assertCatalogJsonHasNoBadFields()\n  assertCatalogJsonHasNoFileMatchConflict()\n  await assertCatalogJsonLocalUrlsMustRefFile()\n  await assertCatalogJsonIncludesAllSchemas()\n\n  // Check schema-validation.jsonc.\n  await assertFileValidatesAgainstSchema(\n    SchemaValidationFile,\n    './src/schema-validation.schema.json',\n  )\n  await assertFilePassesJsonLint(await toFile(SchemaValidationFile), {\n    ignoreComments: true,\n  })\n  await assertSchemaValidationJsonReferencesNoNonexistentFiles()\n  assertSchemaValidationJsonHasValidSkipTest()\n\n  // Run pre-checks (checks before JSON Schema validation) on all files\n  console.info(`===== VALIDATE SCHEMAS =====`)\n  await forEachFile({\n    actionName: 'pre-checks',\n    async onSchemaFile(schema) {\n      assertFileHasNoBom(schema)\n      assertFileHasCorrectExtensions(schema.path, ['.json'])\n      await assertFilePassesJsonLint(schema)\n      await assertSchemaHasValidIdField(schema)\n      await assertSchemaHasValidSchemaField(schema)\n    },\n    async onPositiveTestFile(schema, testFile, _data, { spinner }) {\n      assertFileHasNoBom(testFile)\n      assertFileHasCorrectExtensions(testFile.path, [\n        '.json',\n        '.yaml',\n        '.yml',\n        '.toml',\n      ])\n      await assertTestFileHasSchemaPragma(schema, testFile, spinner)\n      if (testFile.path.endsWith('.json')) {\n        await assertFilePassesJsonLint(testFile)\n      }\n    },\n    async onNegativeTestFile(schema, testFile, _data, { spinner }) {\n      assertFileHasNoBom(testFile)\n      assertFileHasCorrectExtensions(testFile.path, [\n        '.json',\n        '.yaml',\n        '.yml',\n        '.toml',\n      ])\n      await assertTestFileHasSchemaPragma(schema, testFile, spinner)\n      if (testFile.path.endsWith('.json')) {\n        await assertFilePassesJsonLint(testFile)\n      }\n    },\n  })\n\n  // Run tests against JSON schemas\n  await forEachFile({\n    actionName: 'Ajv validation',\n    async onSchemaFile(schemaFile, { spinner }) {\n      const isFullStrictMode = !SchemaValidation.ajvNotStrictMode.includes(\n        schemaFile.name,\n      )\n      const schemaDialect = getSchemaDialect(schemaFile.json.$schema)\n      const options = getSchemaOptions(schemaFile.name)\n      let ajv\n      try {\n        ajv = await ajvFactory({\n          draftVersion: schemaDialect.draftVersion,\n          fullStrictMode: isFullStrictMode,\n          unknownFormats: options.unknownFormats,\n          unknownKeywords: options.unknownKeywords,\n          unknownSchemas: options.unknownSchemas,\n        })\n      } catch (err) {\n        spinner.fail()\n        printErrorAndExit(\n          err,\n          [`Failed to create Ajv instance for schema \"${schemaFile.path}\"`],\n          JSON.stringify({ options, schemaDialect, isFullStrictMode }, null, 2),\n        )\n      }\n\n      let validateFn\n      try {\n        validateFn = ajv.compile(schemaFile.json)\n      } catch (err) {\n        spinner.fail()\n        printErrorAndExit(err, [\n          `Failed to compile schema file \"${schemaFile.path}\"`,\n        ])\n      }\n\n      return {\n        validateFn,\n      }\n    },\n    async onPositiveTestFile(schemaFile, testFile, data, { spinner }) {\n      const validate = data.validateFn\n      if (!validate(testFile.json)) {\n        spinner.fail()\n        printErrorAndExit(\n          validate.err,\n          [\n            `Schema validation failed ./${testFile.path}`,\n            `Showing first error out of ${validate.errors?.length ?? '?'} total error(s)`,\n          ],\n          util.formatWithOptions(\n            { colors: true },\n            '%O',\n            validate.errors?.[0] ?? '???',\n          ),\n        )\n      }\n    },\n    async onNegativeTestFile(schemaFile, testFile, data, { spinner }) {\n      const validate = data.validateFn\n      if (validate(testFile.json)) {\n        spinner.fail()\n        printErrorAndExit(new Error(), [\n          `Schema validation succeeded but was supposed to fail ./${testFile.path}`,\n          `For schema ${schemaFile.path}`,\n        ])\n      }\n    },\n  })\n\n  // Print information.\n  console.info(`===== REPORT =====`)\n  await printSimpleStatistics()\n  await printCountSchemaVersions()\n}\n\nasync function taskCheckStrict() {\n  const ajv = await ajvFactory({\n    draftVersion: 'draft-07',\n    fullStrictMode: false,\n  })\n  const metaSchemaFile = await toFile(\n    './src/schemas/json/metaschema-draft-07-unofficial-strict.json',\n  )\n  let validateFn\n  try {\n    validateFn = ajv.compile(metaSchemaFile.json)\n  } catch (err) {\n    printErrorAndExit(err, [\n      `Failed to compile schema file ${metaSchemaFile.path}`,\n    ])\n  }\n\n  await forEachFile({\n    actionName: 'strict metaschema check',\n    async onSchemaFile(schemaFile, { spinner }) {\n      const validate = validateFn\n      if (!validate(schemaFile.json)) {\n        spinner.fail()\n        printErrorAndExit(\n          validate.err,\n          [\n            `Schema validation failed ./${schemaFile.path}`,\n            `Showing first error out of ${validate.errors?.length ?? '?'} total error(s)`,\n          ],\n          util.formatWithOptions(\n            { colors: true },\n            '%O',\n            validate.errors?.[0] ?? '???',\n          ),\n        )\n      }\n    },\n  })\n\n  // Print information.\n  console.info(`===== REPORT =====`)\n  await printSimpleStatistics()\n  await printCountSchemaVersions()\n}\n\nasync function taskCheckRemote() {\n  console.info('TODO')\n}\n\nasync function taskReport() {\n  await printSchemaReport()\n}\n\nasync function taskMaintenance() {\n  {\n    console.info(`===== BROKEN SCHEMAS =====`)\n    forEachCatalogUrl(async (url) => {\n      if (url.startsWith(UrlSchemaStore)) return\n\n      await fetch(url, { method: 'HEAD' })\n        .then((res) => {\n          if (!res.ok) {\n            console.info(`NOT OK (${res.status}/${res.statusText}): ${url}`)\n          }\n\n          return undefined\n        })\n        .catch((err) => {\n          console.info(`NOT OK (${err.code}): ${url}`)\n        })\n    })\n  }\n  // await printDowngradableSchemaVersions()\n}\n\nasync function assertFileSystemIsValid() {\n  /**\n   * Check that files exist only where files belong, and directories exist only\n   * where directories belong.\n   */\n  {\n    for (const dirent of await fs.readdir(SchemaDir, {\n      withFileTypes: true,\n    })) {\n      if (isIgnoredFile(dirent.name)) continue\n\n      const schemaName = dirent.name\n      const schemaPath = path.join(SchemaDir, schemaName)\n\n      if (!dirent.isFile()) {\n        printErrorAndExit(new Error(), [\n          `Expected only files under directory \"${SchemaDir}\"`,\n          `Found non-file at \"./${schemaPath}\"`,\n        ])\n      }\n    }\n\n    await Promise.all([onTestDir(TestPositiveDir), onTestDir(TestNegativeDir)])\n    async function onTestDir(/** @type {string} */ rootTestDir) {\n      for (const dirent of await fs.readdir(rootTestDir, {\n        withFileTypes: true,\n      })) {\n        if (isIgnoredFile(dirent.name)) continue\n\n        const testDir = path.join(rootTestDir, dirent.name)\n        if (!dirent.isDirectory()) {\n          printErrorAndExit(new Error(), [\n            `Expected only directories under directory \"${rootTestDir}\"`,\n            `Found non-directory at \"./${testDir}\"`,\n          ])\n        }\n\n        for (const dirent of await fs.readdir(testDir, {\n          withFileTypes: true,\n        })) {\n          if (isIgnoredFile(dirent.name)) continue\n\n          const schemaName = dirent.name\n          const schemaPath = path.join(testDir, schemaName)\n\n          if (!dirent.isFile()) {\n            printErrorAndExit(new Error(), [\n              `Expected only files under directory \"./${testDir}\"`,\n              `Found non-file at \"./${schemaPath}\"`,\n            ])\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Check that each test file has a corresponding schema. We only need to\n   * check \"one way\". That is, a schema doesn't need to have any corresponding\n   * positive or negative tests.\n   */\n  {\n    await Promise.all([onTestDir(TestPositiveDir), onTestDir(TestNegativeDir)])\n    async function onTestDir(/** @type {string} */ rootTestDir) {\n      for (const testDir of await fs.readdir(rootTestDir)) {\n        if (isIgnoredFile(testDir)) continue\n\n        const schemaPath = path.join(SchemaDir, testDir + '.json')\n        if (!(await exists(schemaPath))) {\n          printErrorAndExit(new Error(), [\n            `Failed to find a schema file at \"${schemaPath}\"`,\n            `Expected schema file computed from directory at \"${path.join(rootTestDir, testDir)}\"`,\n          ])\n        }\n      }\n    }\n  }\n\n  console.info('✔️ Directory structure conforms to expected layout')\n}\n\nfunction assertCatalogJsonHasNoDuplicateNames() {\n  /** @type {string[]} */\n  const schemaNames = Catalog.schemas.map((entry) => entry.name)\n  /** @type {string[]} */\n\n  for (const catalogEntry of Catalog.schemas) {\n    if (\n      schemaNames.indexOf(catalogEntry.name) !==\n      schemaNames.lastIndexOf(catalogEntry.name)\n    ) {\n      printErrorAndExit(new Error(), [\n        `Found two schema entries with duplicate \"name\" of \"${catalogEntry.name}\" in file \"${CatalogFile}\"`,\n        `Expected the \"name\" property of schema entries to be unique`,\n      ])\n    }\n  }\n}\n\nfunction assertCatalogJsonHasNoBadFields() {\n  for (const catalogEntry of Catalog.schemas) {\n    if (\n      SchemaValidation.catalogEntryNoLintNameOrDescription.includes(\n        catalogEntry.url,\n      )\n    ) {\n      continue\n    }\n\n    for (const property of /** @type {const} */ (['name', 'description'])) {\n      if (\n        /$[,. \\t-]/u.test(catalogEntry?.[property]) ||\n        /[,. \\t-]$/u.test(catalogEntry?.[property])\n      ) {\n        printErrorAndExit(new Error(), [\n          `Expected the \"name\" or \"description\" properties of catalog entries to not end with characters \",.<space><tab>-\"`,\n          `The invalid entry has a \"url\" of \"${catalogEntry.url}\" in file \"${CatalogFile}\"`,\n        ])\n      }\n    }\n\n    for (const property of /** @type {const} */ (['name', 'description'])) {\n      if (catalogEntry?.[property]?.toLowerCase()?.includes('schema')) {\n        printErrorAndExit(new Error(), [\n          `Expected the \"name\" or \"description\" properties of catalog entries to not include the word \"schema\"`,\n          `All files are already schemas, so its meaning is implied`,\n          `If the JSON schema is actually a meta-schema (or some other exception applies), ignore this error by appending to the property \"catalogEntryNoLintNameOrDescription\" in file \"${SchemaValidationFile}\"`,\n          `The invalid entry has a \"url\" of \"${catalogEntry.url}\" in file \"${CatalogFile}\"`,\n        ])\n      }\n    }\n\n    for (const property of /** @type {const} */ (['name', 'description'])) {\n      if (catalogEntry?.[property]?.toLowerCase()?.includes('\\n')) {\n        printErrorAndExit(new Error(), [\n          `Expected the \"name\" or \"description\" properties of catalog entries to not include a newline character\"`,\n          `The invalid entry has a \"url\" of \"${catalogEntry.url}\" in file \"${CatalogFile}\"`,\n        ])\n      }\n    }\n\n    for (const fileGlob of catalogEntry.fileMatch ?? []) {\n      if (fileGlob.includes('/')) {\n        // A folder must start with **/\n        if (!fileGlob.startsWith('**/')) {\n          printErrorAndExit(new Error(), [\n            'Expected the \"fileMatch\" values of catalog entries to start with \"**/\" if it matches a directory',\n            `The invalid entry has a \"url\" of \"${catalogEntry.url}\" in file \"${CatalogFile}\"`,\n          ])\n        }\n      }\n    }\n  }\n\n  console.info(`✔️ catalog.json has no fields that break guidelines`)\n}\n\nfunction assertCatalogJsonHasNoFileMatchConflict() {\n  const /** @type {string[]} */ allFileMatches = []\n\n  for (const catalogEntry of Catalog.schemas) {\n    for (const fileGlob of catalogEntry.fileMatch ?? []) {\n      // Ignore globs that are OK to conflict for backwards compatibility.\n      if (SchemaValidation.fileMatchConflict.includes(fileGlob)) {\n        continue\n      }\n\n      if (allFileMatches.includes(fileGlob)) {\n        printErrorAndExit(new Error(), [\n          `Expected \"fileMatch\" value of \"${fileGlob}\" to be unique across all \"fileMatch\" properties in file \"${CatalogFile}\"`,\n        ])\n      }\n\n      allFileMatches.push(fileGlob)\n    }\n  }\n\n  console.info('✔️ catalog.json has no duplicate \"fileMatch\" values')\n}\n\nasync function assertCatalogJsonLocalUrlsMustRefFile() {\n  await forEachCatalogUrl((/** @type {string} */ catalogUrl) => {\n    // Skip external schemas.\n    if (!catalogUrl.startsWith(UrlSchemaStore)) {\n      return\n    }\n\n    const filename = new URL(catalogUrl).pathname.slice(1)\n\n    // Check that local URLs have end in .json\n    if (!filename.endsWith('.json')) {\n      printErrorAndExit(new Error(), [\n        `Expected catalog entries for local files to have a \"url\" that ends in \".json\"`,\n        `The invalid entry has a \"url\" of \"${catalogUrl}\" in file \"${CatalogFile}\"`,\n      ])\n    }\n\n    // Check if schema file exist or not.\n    if (!exists(path.join(SchemaDir, filename))) {\n      printErrorAndExit(new Error(), [\n        `Expected schema file to exist at \"${path.join(SchemaDir, filename)}\", but no file found`,\n        `Schema file path inferred from catalog entry with a \"url\" of \"${catalogUrl}\" in file \"${CatalogFile}\"`,\n      ])\n    }\n  })\n\n  console.info(`✔️ catalog.json has no invalid schema URLs`)\n}\n\nasync function assertCatalogJsonIncludesAllSchemas() {\n  const /** @type {string[]} */ allCatalogLocalJsonFiles = []\n\n  await forEachCatalogUrl((/** @type {string} */ catalogUrl) => {\n    if (catalogUrl.startsWith(UrlSchemaStore)) {\n      const filename = new URL(catalogUrl).pathname.slice(1)\n      allCatalogLocalJsonFiles.push(filename)\n    }\n  })\n\n  for (const schemaName of await fs.readdir(SchemaDir)) {\n    if (isIgnoredFile(schemaName)) continue\n\n    if (SchemaValidation.missingCatalogUrl.includes(schemaName)) {\n      return\n    }\n\n    if (!allCatalogLocalJsonFiles.includes(schemaName)) {\n      printErrorAndExit(new Error(), [\n        `Expected schema file \"${schemaName}\" to have a corresponding entry in the catalog file \"${CatalogFile}\"`,\n        `If this is intentional, ignore this error by appending to the property \"missingCatalogUrl\" in file \"${SchemaValidationFile}\"`,\n      ])\n    }\n  }\n\n  console.info(`✔️ catalog.json has all local entries that exist in file total`)\n}\n\nasync function assertSchemaValidationJsonReferencesNoNonexistentFiles() {\n  const schemaNamesMustExist = (\n    /** @type {string[]} */ schemaNames,\n    /** @type {string} */ propertyName,\n  ) => {\n    for (const schemaName of schemaNames) {\n      if (!SchemasToBeTested.includes(`${schemaName}`)) {\n        printErrorAndExit(new Error(), [\n          `Expected to find file at path \"${SchemaDir}/${schemaName}\"`,\n          `Filename \"${schemaName}\" declared in file \"${SchemaValidationFile}\" under property \"${propertyName}[]\"`,\n        ])\n      }\n    }\n  }\n\n  schemaNamesMustExist(SchemaValidation.ajvNotStrictMode, 'ajvNotStrictMode')\n  schemaNamesMustExist(SchemaValidation.skiptest, 'skiptest')\n  schemaNamesMustExist(SchemaValidation.missingCatalogUrl, 'missingCatalogUrl')\n  schemaNamesMustExist(SchemaValidation.highSchemaVersion, 'highSchemaVersion')\n  for (const schemaName in SchemaValidation.options) {\n    if (!SchemasToBeTested.includes(schemaName)) {\n      printErrorAndExit(new Error(), [\n        `Expected to find file at path \"${SchemaDir}/${schemaName}\"`,\n        `Filename \"${schemaName}\" declared in file \"${SchemaValidationFile}\" under property \"options\"`,\n      ])\n    }\n  }\n  console.info('✔️ schema-validation.jsonc has no invalid schema names')\n\n  const schemaUrlsMustExist = async (\n    /** @type {string[]} */ schemaUrls,\n    /** @type {string} */ propertyName,\n  ) => {\n    const /** @type {string[]} */ catalogUrls = []\n    await forEachCatalogUrl((catalogUrl) => {\n      catalogUrls.push(catalogUrl)\n    })\n    for (const schemaUrl of schemaUrls) {\n      if (!catalogUrls.includes(schemaUrl)) {\n        printErrorAndExit(new Error(), [\n          `Failed to find a \"url\" with value of \"${schemaUrl}\" in file \"${CatalogFile}\" under property \"${propertyName}[]\"`,\n        ])\n      }\n    }\n  }\n\n  await schemaUrlsMustExist(\n    SchemaValidation.catalogEntryNoLintNameOrDescription,\n    'catalogEntryNoLintNameOrDescription',\n  )\n\n  console.info(`✔️ schema-validation.jsonc has no invalid schema URLs`)\n}\n\nasync function assertTestFileHasSchemaPragma(\n  /** @type {SchemaFile} */ schemaFile,\n  /** @type {DataFile} */ testFile,\n  /** @type {Ora} */ spinner,\n) {\n  if (testFile.path.endsWith('yaml')) {\n    const firstLine = await readFirstLine(testFile.path)\n    const expected = `# yaml-language-server: $schema=${path.relative(path.dirname(testFile.path), schemaFile.path)}`\n\n    if (firstLine !== expected) {\n      if (argv.fix) {\n        spinner.info(`Fixing pragma for file \"${testFile.path}\"`)\n        if (firstLine.includes('yaml-language-server')) {\n          const oldContent = await fs.readFile(testFile.path, 'utf-8')\n          const newContent =\n            expected + '\\n' + oldContent.slice(oldContent.indexOf('\\n') + 1)\n          await fs.writeFile(testFile.path, newContent)\n        } else {\n          const newContent =\n            expected + '\\n' + (await fs.readFile(testFile.path, 'utf-8'))\n          await fs.writeFile(testFile.path, newContent)\n        }\n      } else {\n        printErrorAndExit(new Error(), [\n          `Failed to find schema pragma for YAML File \"${testFile.path}\"`,\n          `Expected first line of file to be \"${expected}\"`,\n          `But, found first line of file to be \"${firstLine}\"`,\n          `Append \"--fix\" to the command line to automatically fix all fixable issues`,\n        ])\n      }\n    }\n  } else if (testFile.path.endsWith('.toml')) {\n    const firstLine = await readFirstLine(testFile.path)\n    const expected = `#:schema ${path.relative(path.dirname(testFile.path), schemaFile.path)}`\n\n    if (firstLine !== expected) {\n      if (argv.fix) {\n        spinner.info(`Fixing pragma for file \"${testFile.path}\"`)\n        if (firstLine.includes('#:schema')) {\n          const oldContent = await fs.readFile(testFile.path, 'utf-8')\n          const newContent =\n            expected + '\\n' + oldContent.slice(oldContent.indexOf('\\n') + 1)\n          await fs.writeFile(testFile.path, newContent)\n        } else {\n          const newContent =\n            expected + '\\n' + (await fs.readFile(testFile.path, 'utf-8'))\n          await fs.writeFile(testFile.path, newContent)\n        }\n      } else {\n        printErrorAndExit(new Error(), [\n          `Failed to find schema pragma for TOML File \"${testFile.path}\"`,\n          `Expected first line of file to be \"${expected}\"`,\n          `But, found first line of file to be \"${firstLine}\"`,\n          `Append \"--fix\" to the command line to automatically fix all fixable issues`,\n        ])\n      }\n    }\n  }\n  spinner.start()\n\n  async function readFirstLine(/** @type {string} */ filepath) {\n    const inputStream = fsCb.createReadStream(filepath)\n    try {\n      for await (const line of readline.createInterface(inputStream))\n        return line\n      return '' // If the file is empty.\n    } finally {\n      inputStream.destroy() // Destroy file stream.\n    }\n  }\n}\n\nfunction assertSchemaValidationJsonHasValidSkipTest() {\n  const check = (\n    /** @type {string[]} */ schemaNames,\n    /** @type {string} */ propertyName,\n  ) => {\n    for (const schemaName of schemaNames) {\n      if (SchemaValidation.skiptest.includes(schemaName)) {\n        printErrorAndExit(new Error(), [\n          `Did not expect to find filename \"${schemaName}\" in file \"${SchemaValidationFile}\" under property \"${propertyName}[]\"`,\n          `Because filename \"${schemaName}\" is listed under \"skiptest\", it should not be referenced anywhere else in the file`,\n        ])\n      }\n    }\n  }\n\n  check(SchemaValidation.ajvNotStrictMode, 'ajvNotStrictMode')\n  check(SchemaValidation.missingCatalogUrl, 'missingCatalogUrl')\n  check(SchemaValidation.highSchemaVersion, 'highSchemaVersion')\n\n  for (const schemaName in SchemaValidation.options) {\n    if (SchemaValidation.skiptest.includes(schemaName)) {\n      printErrorAndExit(new Error(), [\n        `Did not expect to find filename \"${schemaName}\" in file \"${SchemaValidationFile}\" under property \"options\"`,\n        `Because filename \"${schemaName}\" is listed under \"skiptest\", it should not be referenced anywhere else in the file`,\n      ])\n    }\n  }\n\n  // Test folder must not exist if defined in skiptest[]\n  for (const schemaName of SchemaValidation.skiptest) {\n    const folderName = schemaName.replace(/\\.json$/, '')\n\n    if (FoldersPositiveTest.includes(folderName)) {\n      printErrorAndExit(new Error(), [\n        `Did not expect to find positive test directory at \"${path.join(TestPositiveDir, folderName)}\"`,\n        `Because filename \"${schemaName}\" is listed under \"skiptest\", it should not have any positive test files`,\n      ])\n    }\n\n    if (FoldersNegativeTest.includes(folderName)) {\n      printErrorAndExit(new Error(), [\n        `Did not expect to find negative test directory at \"${path.join(TestNegativeDir, folderName)}\"`,\n        `Because filename \"${schemaName}\" is listed under \"skiptest\", it should not have any negative test files`,\n      ])\n    }\n  }\n\n  console.info(`✔️ schema-validation.jsonc has no invalid skiptest[] entries`)\n}\n\nfunction assertFileHasCorrectExtensions(\n  /** @type {string} */ pathname,\n  /** @type {string[]} */ allowedExtensions,\n) {\n  if (!allowedExtensions.includes(path.parse(pathname).ext)) {\n    printErrorAndExit(new Error(), [\n      `Expected schema file \"${pathname}\" to have a valid file extension`,\n      `Valid file extensions: ${JSON.stringify(allowedExtensions, null, 2)}`,\n    ])\n  }\n}\n\nfunction assertFileHasNoBom(/** @type {DataFile} */ file) {\n  const bomTypes = [\n    { name: 'UTF-8', signature: [0xef, 0xbb, 0xbf] },\n    { name: 'UTF-16 (BE)', signature: [0xfe, 0xff] },\n    { name: 'UTF-16 (LE)', signature: [0xff, 0xfe] },\n    { name: 'UTF-32 (BE)', signature: [0x00, 0x00, 0xff, 0xfe] },\n    { name: 'UTF-32 (LE)', signature: [0xff, 0xfe, 0x00, 0x00] },\n  ]\n\n  for (const bom of bomTypes) {\n    if (file.buffer.length >= bom.signature.length) {\n      const bomFound = bom.signature.every(\n        (value, index) => file.buffer[index] === value,\n      )\n\n      if (bomFound) {\n        printErrorAndExit(new Error(), [\n          `File must not have ${bom.name} BOM: ${file.path}`,\n        ])\n      }\n    }\n  }\n}\n\nasync function assertFilePassesJsonLint(\n  /** @type {DataFile} */ file,\n  /** @type {Record<string, unknown>} */ options,\n) {\n  try {\n    jsonlint.parse(file.text, {\n      ignoreBOM: false,\n      ignoreComments: false,\n      ignoreTrailingCommas: false,\n      allowSingleQuotedStrings: false,\n      allowDuplicateObjectKeys: false,\n      ...options,\n    })\n  } catch (err) {\n    printErrorAndExit(err, [\n      `Failed strict jsonlint parse of file \"${path.basename(file.path)}\"`,\n    ])\n  }\n}\n\nasync function assertFileValidatesAgainstSchema(\n  /** @type {string} */ filepath,\n  /** @type {string} */ schemaFilepath,\n) {\n  const [data, schemaJson] = await Promise.all([\n    fs.readFile(filepath, 'utf-8').then((data) => jsoncParser.parse(data)),\n    readJsonFile(schemaFilepath),\n  ])\n\n  const ajv = new AjvDraft06And07({\n    strict: true,\n  })\n  addFormats(ajv)\n\n  if (ajv.validate(schemaJson, data)) {\n    console.info(`✔️ ${path.basename(filepath)} validates against its schema`)\n  } else {\n    printErrorAndExit(\n      new Error(),\n      [\n        `Failed to validate file \"${path.basename(filepath)}\" against schema file \"${schemaFilepath}\"`,\n        `Showing first error out of ${ajv.errors?.length ?? '?'} total error(s)`,\n      ],\n      util.formatWithOptions({ colors: true }, '%O', ajv.errors?.[0] ?? '???'),\n    )\n  }\n}\n\nasync function assertSchemaHasValidSchemaField(\n  /** @type {SchemaFile} */ schema,\n) {\n  const schemaDialectUrls = SchemaDialects.map(\n    (schemaDialect) => schemaDialect.url,\n  )\n  if (!schemaDialectUrls.includes(schema.json.$schema)) {\n    printErrorAndExit(new Error(), [\n      `Schema file has invalid or missing '$schema' keyword => ${schema.name}`,\n      `Valid schemas: ${JSON.stringify(schemaDialectUrls)}`,\n    ])\n  }\n\n  if (!SchemaValidation.highSchemaVersion.includes(schema.name)) {\n    const tooHighSchemas = SchemaDialects.filter(\n      (schemaDialect) => schemaDialect.isTooHigh,\n    ).map((schemaDialect) => schemaDialect.url)\n    if (tooHighSchemas.includes(schema.json.$schema)) {\n      printErrorAndExit(new Error(), [\n        `Schema version is too high => in file ${schema.name}`,\n        `Schema version '${schema.json.$schema}' is not supported by many editors and IDEs`,\n        `Schema file \"${schema.path}\" must use a lower schema version.`,\n      ])\n    }\n  }\n}\n\nasync function assertSchemaHasValidIdField(/** @type {SchemaFile} */ schema) {\n  let schemaId = ''\n  /**\n   * Old JSON Schema specification versions use the \"id\" key for unique\n   * identifiers, rather than \"$id\". See for details:\n   * https://json-schema.org/understanding-json-schema/basics.html#declaring-a-unique-identifier\n   */\n  const schemasWithDollarlessId = [\n    'http://json-schema.org/draft-03/schema#',\n    'http://json-schema.org/draft-04/schema#',\n  ]\n  if (schemasWithDollarlessId.includes(schema.json.$schema)) {\n    if (schema.json.id === undefined) {\n      printErrorAndExit(new Error(), [\n        `Missing property 'id' for schema 'src/schemas/json/${schema.name}'`,\n      ])\n    }\n    schemaId = schema.json.id\n  } else {\n    if (schema.json.$id === undefined) {\n      printErrorAndExit(new Error(), [\n        `Missing property '$id' for schema 'src/schemas/json/${schema.name}'`,\n      ])\n    }\n    schemaId = schema.json.$id\n  }\n\n  if (!schemaId.startsWith('https://') && !schemaId.startsWith('http://')) {\n    printErrorAndExit(new Error(), [\n      schemaId,\n      `Schema id/$id must begin with 'https://' or 'http://' for schema 'src/schemas/json/${schema.name}'`,\n    ])\n  }\n}\n\nasync function assertSchemaHasCorrectMetadata(\n  /** @type {SchemaFile} */ schema,\n) {\n  const schemasWithDollarlessId = [\n    'http://json-schema.org/draft-03/schema#',\n    'http://json-schema.org/draft-04/schema#',\n  ]\n\n  if (schemasWithDollarlessId.includes(schema.json.$schema)) {\n    if (schema.json.$id) {\n      printErrorAndExit(new Error(), [\n        `Expected to find correct metadata on schema file \"${schema.path}\"`,\n        `Bad property of '$id'; expected 'id' for this schema version`,\n      ])\n    }\n\n    if (schema.json.id !== `https://json.schemastore.org/${schema.name}`) {\n      printErrorAndExit(new Error(), [\n        `Expected to find correct metadata on schema file \"${schema.path}\"`,\n        `Incorrect property 'id' for schema 'src/schemas/json/${schema.name}'`,\n        `Expected value of \"https://json.schemastore.org/${schema.name}\"`,\n        `Found value of \"${schema.json.id}\"`,\n      ])\n    }\n  } else {\n    if (schema.json.id) {\n      printErrorAndExit(new Error(), [\n        `Expected to find correct metadata on schema file \"${schema.path}\"`,\n        `Bad property of 'id'; expected '$id' for this schema version`,\n      ])\n    }\n\n    if (schema.json.$id !== `https://json.schemastore.org/${schema.name}`) {\n      printErrorAndExit(new Error(), [\n        `Expected to find correct metadata on schema file \"${schema.path}\"`,\n        `Incorrect property '$id' for schema 'src/schemas/json/${schema.name}'`,\n        `Expected value of \"https://json.schemastore.org/${schema.name}\"`,\n        `Found value of \"${schema.json.$id}\"`,\n      ])\n    }\n  }\n}\n\nasync function assertSchemaNoSmartQuotes(/** @type {SchemaFile} */ schema) {\n  const buffer = schema.buffer\n  const bufferArr = buffer.toString().split('\\n')\n\n  for (let i = 0; i < bufferArr.length; ++i) {\n    const line = bufferArr[i]\n\n    const smartQuotes = ['‘', '’', '“', '”']\n    for (const quote of smartQuotes) {\n      if (line.includes(quote)) {\n        printErrorAndExit(new Error(), [\n          `Schema file should not have a smart quote: ${schema.path}:${++i}`,\n        ])\n      }\n    }\n  }\n}\n\nasync function assertTopLevelRefIsStandalone(/** @type {SchemaFile} */ schema) {\n  if (schema.json.$ref?.startsWith('http')) {\n    for (const [member] of Object.entries(schema.json)) {\n      if (member !== '$ref') {\n        printErrorAndExit(new Error(), [\n          `Schemas that reference a remote schema must only have $ref as a property. Found property \"${member}\" for ${schema.name}`,\n        ])\n      }\n    }\n  }\n}\n\nasync function printSchemaReport() {\n  // `bowtie validate --implementation go-gojsonschema ./src/schemas/json/ava.json ./src/test/ava/ava.config.json`\n  console.log('TODO')\n}\n\nasync function printCountSchemaVersions() {\n  let totalSchemas = 0\n  /** @type {Map<string, number>} */\n  const schemaDialectCounts = new Map(\n    SchemaDialects.map((schemaDialect) => [schemaDialect.url, 0]),\n  )\n\n  await forEachFile({\n    async onSchemaFile(/** @type {SchemaFile} */ schema) {\n      totalSchemas += 1\n\n      let schemaDialect = getSchemaDialect(schema.json.$schema)\n      if (schemaDialect) {\n        schemaDialectCounts.set(\n          schemaDialect.url,\n          // @ts-expect-error\n          schemaDialectCounts.get(schemaDialect.url) + 1,\n        )\n      }\n    },\n  })\n\n  console.info(`Out of ${totalSchemas} TESTED schemas:`)\n  for (const schemaDialect of SchemaDialects) {\n    const versionPadded = schemaDialect.draftVersion.startsWith('draft-')\n      ? schemaDialect.draftVersion\n      : ` ${schemaDialect.draftVersion}`\n\n    console.info(\n      `- Total ${versionPadded}: ${schemaDialectCounts.get(schemaDialect.url)}`,\n    )\n  }\n}\n\nasync function printDowngradableSchemaVersions() {\n  console.info('Check if a schema can use a lower \"$schema\" version')\n\n  await forEachFile({ onSchemaFile })\n  console.info(`Done.`)\n\n  /**\n   * There are no positive or negative test processes here. Only the\n   * schema files are\n   */\n  async function onSchemaFile(/** @type {SchemaFile} */ schema) {\n    const schemaDialectVersionIndex = SchemaDialects.findIndex(\n      (schemaDialect) => {\n        return schema.json.$schema === schemaDialect.url\n      },\n    )\n\n    // Test each schema version in a while loop.\n    let validates = false\n    let recommendedIndex = schemaDialectVersionIndex\n    let versionIndexToBeTested = schemaDialectVersionIndex\n    do {\n      // Attempt to use the next lower schema version.\n      versionIndexToBeTested++\n      const schemaDialectToBeTested = SchemaDialects[versionIndexToBeTested]\n      if (!schemaDialectToBeTested.isActive) {\n        break\n      }\n\n      const options = getSchemaOptions(schema.name)\n      const ajv = await ajvFactory({\n        draftVersion: schemaDialectToBeTested.draftVersion,\n        fullStrictMode: false,\n        unknownFormats: options.unknownFormats,\n        unknownKeywords: options.unknownKeywords,\n        unknownSchemas: options.unknownSchemas,\n      })\n\n      schema.json.$schema = schemaDialectToBeTested.url\n      try {\n        ajv.compile(schema.json)\n        validates = true\n      } catch {\n        validates = false\n      }\n\n      // It passes the test. So this is the new recommended index\n      if (validates) {\n        recommendedIndex = versionIndexToBeTested\n      }\n\n      // Continue until the validation process fails.\n    } while (validates)\n\n    // If found a different schema version that also works.\n    if (recommendedIndex !== schemaDialectVersionIndex) {\n      const original = SchemaDialects[schemaDialectVersionIndex].draftVersion\n      const recommended = SchemaDialects[recommendedIndex].draftVersion\n      console.info(\n        `Schema \"${schema.name}\" (${original}) can likely be downgraded to \"${recommended}\"`,\n      )\n    }\n  }\n}\n\nasync function printSimpleStatistics() {\n  {\n    let countScanURLExternal = 0\n    let countScanURLInternal = 0\n\n    await forEachCatalogUrl((catalogUrl) => {\n      catalogUrl.startsWith(UrlSchemaStore)\n        ? countScanURLInternal++\n        : countScanURLExternal++\n    })\n\n    const totalCount = countScanURLExternal + countScanURLInternal\n    const percentExternal = Math.round(\n      (countScanURLExternal / totalCount) * 100,\n    )\n\n    console.info(`Out of ${totalCount} TOTAL schemas:`)\n    console.info(\n      `- ${countScanURLInternal} (${100 - percentExternal}%) are SchemaStore URLs`,\n    )\n    console.info(\n      `- ${countScanURLExternal} (${percentExternal}%) are External URLs`,\n    )\n    console.info()\n  }\n\n  let totalSchemas = 0\n  let validatingInStrictMode = 0\n  let missingPositiveTests = 0\n  let missingNegativeTests = 0\n\n  for (const schemaName of SchemasToBeTested) {\n    if (SchemaValidation.skiptest.includes(schemaName)) {\n      continue\n    }\n\n    totalSchemas += 1\n\n    if (SchemaValidation.ajvNotStrictMode.includes(schemaName)) {\n      validatingInStrictMode += 1\n    }\n\n    if (!FoldersPositiveTest.includes(schemaName.replace('.json', ''))) {\n      missingPositiveTests += 1\n    }\n\n    if (!FoldersNegativeTest.includes(schemaName.replace('.json', ''))) {\n      missingNegativeTests += 1\n    }\n  }\n\n  const strictModePercent = Math.round(\n    (validatingInStrictMode / totalSchemas) * 100,\n  )\n  const positivePercent = Math.round(\n    (missingPositiveTests / totalSchemas) * 100,\n  )\n  const negativePercent = Math.round(\n    (missingNegativeTests / totalSchemas) * 100,\n  )\n\n  console.info(`Out of ${totalSchemas} TESTED schemas:`)\n  console.info(\n    `- ${validatingInStrictMode} (${strictModePercent}%) are validated with Ajv's strict mode`,\n  )\n  console.info(\n    `- ${missingPositiveTests} (${positivePercent}%) do not have tests.`,\n  )\n  console.info(\n    `- ${missingNegativeTests} (${negativePercent}%) do not have negative tests.`,\n  )\n}\n\n{\n  const helpMenu = `USAGE:\n  node ./cli.js [--help] [--schema-name=<schema>] <taskName|functionName>\n\nTASKS:\n  new-schema: Create a new JSON schema\n  lint: Run less-important checks on schemas\n  check: Run all build checks\n  check-strict: Checks all or the given schema against the strict meta schema\n  check-remote: Run all build checks for remote schemas\n  maintenance: Run maintenance checks\n\nEXAMPLES:\n  node ./cli.js check\n  node ./cli.js check --fix\n  node ./cli.js check --schema-name=schema-catalog.json\n  node ./cli.js check-strict --schema-name=schema-catalog.json\n`\n\n  if (!argv._[0]) {\n    process.stderr.write(helpMenu + '\\n')\n    process.stderr.write(`${chalk.red('Error:')} No argument given` + '\\n')\n    process.exit(1)\n  }\n  if (argv._[1]) {\n    process.stderr.write(helpMenu + '\\n')\n    process.stderr.write(\n      `${chalk.red('Error:')} Too many arguments given` + '\\n',\n    )\n    process.exit(1)\n  }\n  if (argv.help) {\n    console.info(helpMenu)\n    process.exit(0)\n  }\n\n  /** @type {Record<string, () => Promise<unknown>>} */\n  const taskMap = {\n    'new-schema': taskNewSchema,\n    lint: taskLint,\n    check: taskCheck,\n    'check-strict': taskCheckStrict,\n    'check-remote': taskCheckRemote,\n    report: taskReport,\n    maintenance: taskMaintenance,\n    build: taskCheck, // Undocumented alias.\n  }\n  const taskOrFn = argv._[0]\n  if (taskOrFn in taskMap) {\n    if (taskOrFn === 'build') {\n      process.stdout.write(\n        `WARNING: Please use the \"check\" task instead of \"build\". The \"build\" task will be removed.\\n`,\n      )\n    }\n\n    await taskMap[taskOrFn]()\n  } else {\n    eval(`${taskOrFn}()`)\n  }\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "eslint.config.js",
          "type": "blob",
          "size": 0.75390625,
          "content": "import js from '@eslint/js'\nimport promise from 'eslint-plugin-promise'\nimport node from 'eslint-plugin-n'\nimport prettier from 'eslint-config-prettier'\nimport globals from 'globals'\n\n/** @type {import('eslint').Linter.FlatConfig} */\nexport default [\n  {\n    ignores: ['**/schema.json.translated.to.js'],\n  },\n  promise.configs['flat/recommended'],\n  node.configs['flat/recommended-script'],\n  prettier,\n  {\n    languageOptions: {\n      globals: {\n        ...globals.es2021,\n        ...globals.node,\n      },\n      ecmaVersion: 2022,\n      sourceType: 'module',\n    },\n    rules: {\n      ...js.configs.recommended.rules,\n      'no-empty': 'off',\n      'no-unused-vars': 'off',\n      'object-shorthand': ['error', 'always'],\n      'n/no-process-exit': 'off',\n    },\n  },\n]\n"
        },
        {
          "name": "jsconfig.json",
          "type": "blob",
          "size": 0.12890625,
          "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2018\",\n    \"module\": \"Node16\",\n    \"moduleResolution\": \"Node16\",\n    \"strict\": true\n  }\n}\n"
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 84.7333984375,
          "content": "{\n  \"name\": \"schemastore.org\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"schemastore.org\",\n      \"version\": \"1.0.0\",\n      \"license\": \"Apache 2.0\",\n      \"devDependencies\": {\n        \"@eslint/js\": \"^9.17.0\",\n        \"@exodus/schemasafe\": \"^1.3.0\",\n        \"@hyperupcall/ajv-formats-draft2019\": \"^1.7.2\",\n        \"@prantlf/jsonlint\": \"^16.0.0\",\n        \"ajv\": \"^8.17.1\",\n        \"ajv-draft-04\": \"^1.0.0\",\n        \"ajv-formats\": \"^2.1.1\",\n        \"chalk\": \"^5.3.0\",\n        \"eslint\": \"^9.17.0\",\n        \"eslint-config-prettier\": \"^9.1.0\",\n        \"eslint-plugin-n\": \"^17.15.0\",\n        \"eslint-plugin-promise\": \"^7.2.1\",\n        \"globals\": \"^15.13.0\",\n        \"jsonc-parser\": \"^3.3.1\",\n        \"minimist\": \"^1.2.8\",\n        \"node-fetch\": \"^3.3.2\",\n        \"ora\": \"^8.1.1\",\n        \"prettier\": \"^3.4.2\",\n        \"prettier-plugin-sort-json\": \"^4.0.0\",\n        \"prettier-plugin-toml\": \"^2.0.1\",\n        \"smol-toml\": \"^1.3.1\",\n        \"yaml\": \"^2.6.1\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/@babel/code-frame\": {\n      \"version\": \"7.24.7\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.24.7.tgz\",\n      \"integrity\": \"sha512-BcYH1CVJBO9tvyIZ2jVeXgSIMvGZ2FDRvDdOIVQyuklNKSsx+eppDEBq/g47Ayw+RqNFE+URvOShmf+f/qwAlA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@babel/highlight\": \"^7.24.7\",\n        \"picocolors\": \"^1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/helper-validator-identifier\": {\n      \"version\": \"7.24.7\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.24.7.tgz\",\n      \"integrity\": \"sha512-rR+PBcQ1SMQDDyF6X0wxtG8QyLCgUB0eRAGguqRLfkCA87l7yAP7ehq8SNj96OOGTO8OBV70KhuFYcIkHXOg0w==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/highlight\": {\n      \"version\": \"7.24.7\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/highlight/-/highlight-7.24.7.tgz\",\n      \"integrity\": \"sha512-EStJpq4OuY8xYfhGVXngigBJRWxftKX9ksiGDnmlY3o7B/V7KIAc9X4oiK87uPJSc/vs5L869bem5fhZa8caZw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@babel/helper-validator-identifier\": \"^7.24.7\",\n        \"chalk\": \"^2.4.2\",\n        \"js-tokens\": \"^4.0.0\",\n        \"picocolors\": \"^1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6.9.0\"\n      }\n    },\n    \"node_modules/@babel/highlight/node_modules/ansi-styles\": {\n      \"version\": \"3.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz\",\n      \"integrity\": \"sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"color-convert\": \"^1.9.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/@babel/highlight/node_modules/chalk\": {\n      \"version\": \"2.4.2\",\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz\",\n      \"integrity\": \"sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ansi-styles\": \"^3.2.1\",\n        \"escape-string-regexp\": \"^1.0.5\",\n        \"supports-color\": \"^5.3.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/@babel/highlight/node_modules/color-convert\": {\n      \"version\": \"1.9.3\",\n      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz\",\n      \"integrity\": \"sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"color-name\": \"1.1.3\"\n      }\n    },\n    \"node_modules/@babel/highlight/node_modules/color-name\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz\",\n      \"integrity\": \"sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/@babel/highlight/node_modules/escape-string-regexp\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\",\n      \"integrity\": \"sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.8.0\"\n      }\n    },\n    \"node_modules/@eslint-community/eslint-utils\": {\n      \"version\": \"4.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.4.1.tgz\",\n      \"integrity\": \"sha512-s3O3waFUrMV8P/XaF/+ZTp1X9XBZW1a4B97ZnjQF2KYWaFD2A8KyFBsrsfSjEmjn3RGWAIuvlneuZm3CUK3jbA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"eslint-visitor-keys\": \"^3.4.3\"\n      },\n      \"engines\": {\n        \"node\": \"^12.22.0 || ^14.17.0 || >=16.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/eslint\"\n      },\n      \"peerDependencies\": {\n        \"eslint\": \"^6.0.0 || ^7.0.0 || >=8.0.0\"\n      }\n    },\n    \"node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys\": {\n      \"version\": \"3.4.3\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz\",\n      \"integrity\": \"sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"engines\": {\n        \"node\": \"^12.22.0 || ^14.17.0 || >=16.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/eslint\"\n      }\n    },\n    \"node_modules/@eslint-community/regexpp\": {\n      \"version\": \"4.12.1\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz\",\n      \"integrity\": \"sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \"^12.0.0 || ^14.0.0 || >=16.0.0\"\n      }\n    },\n    \"node_modules/@eslint/config-array\": {\n      \"version\": \"0.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/config-array/-/config-array-0.19.1.tgz\",\n      \"integrity\": \"sha512-fo6Mtm5mWyKjA/Chy1BYTdn5mGJoDNjC7C64ug20ADsRDGrA85bN3uK3MaKbeRkRuuIEAR5N33Jr1pbm411/PA==\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"dependencies\": {\n        \"@eslint/object-schema\": \"^2.1.5\",\n        \"debug\": \"^4.3.1\",\n        \"minimatch\": \"^3.1.2\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      }\n    },\n    \"node_modules/@eslint/core\": {\n      \"version\": \"0.9.1\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/core/-/core-0.9.1.tgz\",\n      \"integrity\": \"sha512-GuUdqkyyzQI5RMIWkHhvTWLCyLo1jNK3vzkSyaExH5kHPDHcuL2VOpHjmMY+y3+NC69qAKToBqldTBgYeLSr9Q==\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"dependencies\": {\n        \"@types/json-schema\": \"^7.0.15\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      }\n    },\n    \"node_modules/@eslint/eslintrc\": {\n      \"version\": \"3.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.2.0.tgz\",\n      \"integrity\": \"sha512-grOjVNN8P3hjJn/eIETF1wwd12DdnwFDoyceUJLYYdkpbwq3nLi+4fqrTAONx7XDALqlL220wC/RHSC/QTI/0w==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ajv\": \"^6.12.4\",\n        \"debug\": \"^4.3.2\",\n        \"espree\": \"^10.0.1\",\n        \"globals\": \"^14.0.0\",\n        \"ignore\": \"^5.2.0\",\n        \"import-fresh\": \"^3.2.1\",\n        \"js-yaml\": \"^4.1.0\",\n        \"minimatch\": \"^3.1.2\",\n        \"strip-json-comments\": \"^3.1.1\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/eslint\"\n      }\n    },\n    \"node_modules/@eslint/eslintrc/node_modules/ajv\": {\n      \"version\": \"6.12.6\",\n      \"resolved\": \"https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz\",\n      \"integrity\": \"sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"fast-deep-equal\": \"^3.1.1\",\n        \"fast-json-stable-stringify\": \"^2.0.0\",\n        \"json-schema-traverse\": \"^0.4.1\",\n        \"uri-js\": \"^4.2.2\"\n      },\n      \"funding\": {\n        \"type\": \"github\",\n        \"url\": \"https://github.com/sponsors/epoberezkin\"\n      }\n    },\n    \"node_modules/@eslint/eslintrc/node_modules/globals\": {\n      \"version\": \"14.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/globals/-/globals-14.0.0.tgz\",\n      \"integrity\": \"sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/@eslint/eslintrc/node_modules/json-schema-traverse\": {\n      \"version\": \"0.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz\",\n      \"integrity\": \"sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/@eslint/js\": {\n      \"version\": \"9.17.0\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/js/-/js-9.17.0.tgz\",\n      \"integrity\": \"sha512-Sxc4hqcs1kTu0iID3kcZDW3JHq2a77HO9P8CP6YEA/FpH3Ll8UXE2r/86Rz9YJLKme39S9vU5OWNjC6Xl0Cr3w==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      }\n    },\n    \"node_modules/@eslint/object-schema\": {\n      \"version\": \"2.1.5\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.5.tgz\",\n      \"integrity\": \"sha512-o0bhxnL89h5Bae5T318nFoFzGy+YE5i/gGkoPAgkmTVdRKTiv3p8JHevPiPaMwoloKfEiiaHlawCqaZMqRm+XQ==\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      }\n    },\n    \"node_modules/@eslint/plugin-kit\": {\n      \"version\": \"0.2.4\",\n      \"resolved\": \"https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.4.tgz\",\n      \"integrity\": \"sha512-zSkKow6H5Kdm0ZUQUB2kV5JIXqoG0+uH5YADhaEHswm664N9Db8dXSi0nMJpacpMf+MyyglF1vnZohpEg5yUtg==\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"dependencies\": {\n        \"levn\": \"^0.4.1\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      }\n    },\n    \"node_modules/@exodus/schemasafe\": {\n      \"version\": \"1.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/@exodus/schemasafe/-/schemasafe-1.3.0.tgz\",\n      \"integrity\": \"sha512-5Aap/GaRupgNx/feGBwLLTVv8OQFfv3pq2lPRzPg9R+IOBnDgghTGW7l7EuVXOvg5cc/xSAlRW8rBrjIC3Nvqw==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/@humanfs/core\": {\n      \"version\": \"0.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz\",\n      \"integrity\": \"sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"engines\": {\n        \"node\": \">=18.18.0\"\n      }\n    },\n    \"node_modules/@humanfs/node\": {\n      \"version\": \"0.16.6\",\n      \"resolved\": \"https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz\",\n      \"integrity\": \"sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"dependencies\": {\n        \"@humanfs/core\": \"^0.19.1\",\n        \"@humanwhocodes/retry\": \"^0.3.0\"\n      },\n      \"engines\": {\n        \"node\": \">=18.18.0\"\n      }\n    },\n    \"node_modules/@humanfs/node/node_modules/@humanwhocodes/retry\": {\n      \"version\": \"0.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz\",\n      \"integrity\": \"sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"engines\": {\n        \"node\": \">=18.18\"\n      },\n      \"funding\": {\n        \"type\": \"github\",\n        \"url\": \"https://github.com/sponsors/nzakas\"\n      }\n    },\n    \"node_modules/@humanwhocodes/module-importer\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz\",\n      \"integrity\": \"sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"engines\": {\n        \"node\": \">=12.22\"\n      },\n      \"funding\": {\n        \"type\": \"github\",\n        \"url\": \"https://github.com/sponsors/nzakas\"\n      }\n    },\n    \"node_modules/@humanwhocodes/retry\": {\n      \"version\": \"0.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.1.tgz\",\n      \"integrity\": \"sha512-c7hNEllBlenFTHBky65mhq8WD2kbN9Q6gk0bTk8lSBvc554jpXSkST1iePudpt7+A/AQvuHs9EMqjHDXMY1lrA==\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"engines\": {\n        \"node\": \">=18.18\"\n      },\n      \"funding\": {\n        \"type\": \"github\",\n        \"url\": \"https://github.com/sponsors/nzakas\"\n      }\n    },\n    \"node_modules/@hyperupcall/ajv-formats-draft2019\": {\n      \"version\": \"1.7.2\",\n      \"resolved\": \"https://registry.npmjs.org/@hyperupcall/ajv-formats-draft2019/-/ajv-formats-draft2019-1.7.2.tgz\",\n      \"integrity\": \"sha512-Ds0kJafggVzu9wx7cbIU09pnkDGXkm+p+FK9o1k0XEkH3WPve6Z8wbfr5SsUCDvpND3UEbv1VCFTGxH8Mp/6nQ==\",\n      \"dev\": true,\n      \"license\": \"MPL-2.0\",\n      \"dependencies\": {\n        \"punycode\": \"^2.3.1\",\n        \"schemes\": \"^1.4.0\",\n        \"smtp-address-parser\": \"^1.1.0\",\n        \"uri-js\": \"^4.4.1\"\n      },\n      \"peerDependencies\": {\n        \"ajv\": \">=8\"\n      }\n    },\n    \"node_modules/@nodelib/fs.scandir\": {\n      \"version\": \"2.1.5\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz\",\n      \"integrity\": \"sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@nodelib/fs.stat\": \"2.0.5\",\n        \"run-parallel\": \"^1.1.9\"\n      },\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/@nodelib/fs.stat\": {\n      \"version\": \"2.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz\",\n      \"integrity\": \"sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/@nodelib/fs.walk\": {\n      \"version\": \"1.2.8\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz\",\n      \"integrity\": \"sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@nodelib/fs.scandir\": \"2.1.5\",\n        \"fastq\": \"^1.6.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/@prantlf/jsonlint\": {\n      \"version\": \"16.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/@prantlf/jsonlint/-/jsonlint-16.0.0.tgz\",\n      \"integrity\": \"sha512-L0jFtcsBRJZOr4T6sbePb1R6XYF6Nofj6kmEAxqTKCHEr50uvyxBFnB1UKaehWaMhHnvtyqWfTR5Go25RywXIQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ajv\": \"8.17.1\",\n        \"ajv-draft-04\": \"1.0.0\",\n        \"cosmiconfig\": \"9.0.0\",\n        \"diff\": \"5.2.0\",\n        \"fast-glob\": \"3.3.2\"\n      },\n      \"bin\": {\n        \"jsonlint\": \"lib/cli.js\"\n      },\n      \"engines\": {\n        \"node\": \">=16.9\"\n      }\n    },\n    \"node_modules/@taplo/core\": {\n      \"version\": \"0.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/@taplo/core/-/core-0.1.1.tgz\",\n      \"integrity\": \"sha512-BG/zLGf5wiNXGEVPvUAAX/4ilB3PwDUY2o0MV0y47mZbDZ9ad9UK/cIQsILat3bqbPJsALVbU6k3cskNZ3vAQg==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/@taplo/lib\": {\n      \"version\": \"0.4.0-alpha.2\",\n      \"resolved\": \"https://registry.npmjs.org/@taplo/lib/-/lib-0.4.0-alpha.2.tgz\",\n      \"integrity\": \"sha512-DV/Re3DPVY+BhBtLZ3dmP4mP6YMLSsgq9qGLXwOV38lvNF/fBlgvQswzlXmzCEefL/3q2eMoefZpOI/+GLuCNA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@taplo/core\": \"^0.1.0\"\n      }\n    },\n    \"node_modules/@types/estree\": {\n      \"version\": \"1.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/@types/estree/-/estree-1.0.6.tgz\",\n      \"integrity\": \"sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/@types/json-schema\": {\n      \"version\": \"7.0.15\",\n      \"resolved\": \"https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz\",\n      \"integrity\": \"sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/acorn\": {\n      \"version\": \"8.14.0\",\n      \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-8.14.0.tgz\",\n      \"integrity\": \"sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"bin\": {\n        \"acorn\": \"bin/acorn\"\n      },\n      \"engines\": {\n        \"node\": \">=0.4.0\"\n      }\n    },\n    \"node_modules/acorn-jsx\": {\n      \"version\": \"5.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz\",\n      \"integrity\": \"sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"peerDependencies\": {\n        \"acorn\": \"^6.0.0 || ^7.0.0 || ^8.0.0\"\n      }\n    },\n    \"node_modules/ajv\": {\n      \"version\": \"8.17.1\",\n      \"resolved\": \"https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz\",\n      \"integrity\": \"sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"fast-deep-equal\": \"^3.1.3\",\n        \"fast-uri\": \"^3.0.1\",\n        \"json-schema-traverse\": \"^1.0.0\",\n        \"require-from-string\": \"^2.0.2\"\n      },\n      \"funding\": {\n        \"type\": \"github\",\n        \"url\": \"https://github.com/sponsors/epoberezkin\"\n      }\n    },\n    \"node_modules/ajv-draft-04\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/ajv-draft-04/-/ajv-draft-04-1.0.0.tgz\",\n      \"integrity\": \"sha512-mv00Te6nmYbRp5DCwclxtt7yV/joXJPGS7nM+97GdxvuttCOfgI3K4U25zboyeX0O+myI8ERluxQe5wljMmVIw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"peerDependencies\": {\n        \"ajv\": \"^8.5.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"ajv\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/ajv-formats\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.1.1.tgz\",\n      \"integrity\": \"sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ajv\": \"^8.0.0\"\n      },\n      \"peerDependencies\": {\n        \"ajv\": \"^8.0.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"ajv\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/ansi-styles\": {\n      \"version\": \"4.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz\",\n      \"integrity\": \"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"color-convert\": \"^2.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/ansi-styles?sponsor=1\"\n      }\n    },\n    \"node_modules/argparse\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz\",\n      \"integrity\": \"sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==\",\n      \"dev\": true,\n      \"license\": \"Python-2.0\"\n    },\n    \"node_modules/balanced-match\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz\",\n      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/brace-expansion\": {\n      \"version\": \"1.1.11\",\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"balanced-match\": \"^1.0.0\",\n        \"concat-map\": \"0.0.1\"\n      }\n    },\n    \"node_modules/braces\": {\n      \"version\": \"3.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/braces/-/braces-3.0.3.tgz\",\n      \"integrity\": \"sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"fill-range\": \"^7.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/callsites\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz\",\n      \"integrity\": \"sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/chalk\": {\n      \"version\": \"5.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-5.3.0.tgz\",\n      \"integrity\": \"sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \"^12.17.0 || ^14.13 || >=16.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/chalk?sponsor=1\"\n      }\n    },\n    \"node_modules/cli-cursor\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/cli-cursor/-/cli-cursor-5.0.0.tgz\",\n      \"integrity\": \"sha512-aCj4O5wKyszjMmDT4tZj93kxyydN/K5zPWSCe6/0AV/AA1pqe5ZBIw0a2ZfPQV7lL5/yb5HsUreJ6UFAF1tEQw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"restore-cursor\": \"^5.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/cli-spinners\": {\n      \"version\": \"2.9.2\",\n      \"resolved\": \"https://registry.npmjs.org/cli-spinners/-/cli-spinners-2.9.2.tgz\",\n      \"integrity\": \"sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/color-convert\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz\",\n      \"integrity\": \"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"color-name\": \"~1.1.4\"\n      },\n      \"engines\": {\n        \"node\": \">=7.0.0\"\n      }\n    },\n    \"node_modules/color-name\": {\n      \"version\": \"1.1.4\",\n      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz\",\n      \"integrity\": \"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/commander\": {\n      \"version\": \"2.20.3\",\n      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-2.20.3.tgz\",\n      \"integrity\": \"sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/concat-map\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\",\n      \"integrity\": \"sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/cosmiconfig\": {\n      \"version\": \"9.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-9.0.0.tgz\",\n      \"integrity\": \"sha512-itvL5h8RETACmOTFc4UfIyB2RfEHi71Ax6E/PivVxq9NseKbOWpeyHEOIbmAw1rs8Ak0VursQNww7lf7YtUwzg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"env-paths\": \"^2.2.1\",\n        \"import-fresh\": \"^3.3.0\",\n        \"js-yaml\": \"^4.1.0\",\n        \"parse-json\": \"^5.2.0\"\n      },\n      \"engines\": {\n        \"node\": \">=14\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/d-fischer\"\n      },\n      \"peerDependencies\": {\n        \"typescript\": \">=4.9.5\"\n      },\n      \"peerDependenciesMeta\": {\n        \"typescript\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/cross-spawn\": {\n      \"version\": \"7.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz\",\n      \"integrity\": \"sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"path-key\": \"^3.1.0\",\n        \"shebang-command\": \"^2.0.0\",\n        \"which\": \"^2.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/debug\": {\n      \"version\": \"4.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-4.4.0.tgz\",\n      \"integrity\": \"sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ms\": \"^2.1.3\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"supports-color\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/deep-is\": {\n      \"version\": \"0.1.4\",\n      \"resolved\": \"https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz\",\n      \"integrity\": \"sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/diff\": {\n      \"version\": \"5.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/diff/-/diff-5.2.0.tgz\",\n      \"integrity\": \"sha512-uIFDxqpRZGZ6ThOk84hEfqWoHx2devRFvpTZcTHur85vImfaxUbTW9Ryh4CpCuDnToOP1CEtXKIgytHBPVff5A==\",\n      \"dev\": true,\n      \"license\": \"BSD-3-Clause\",\n      \"engines\": {\n        \"node\": \">=0.3.1\"\n      }\n    },\n    \"node_modules/discontinuous-range\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/discontinuous-range/-/discontinuous-range-1.0.0.tgz\",\n      \"integrity\": \"sha512-c68LpLbO+7kP/b1Hr1qs8/BJ09F5khZGTxqxZuhzxpmwJKOgRFHJWIb9/KmqnqHhLdO55aOxFH/EGBvUQbL/RQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/enhanced-resolve\": {\n      \"version\": \"5.17.1\",\n      \"resolved\": \"https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.17.1.tgz\",\n      \"integrity\": \"sha512-LMHl3dXhTcfv8gM4kEzIUeTQ+7fpdA0l2tUf34BddXPkz2A5xJ5L/Pchd5BL6rdccM9QGvu0sWZzK1Z1t4wwyg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"graceful-fs\": \"^4.2.4\",\n        \"tapable\": \"^2.2.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10.13.0\"\n      }\n    },\n    \"node_modules/env-paths\": {\n      \"version\": \"2.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/env-paths/-/env-paths-2.2.1.tgz\",\n      \"integrity\": \"sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/error-ex\": {\n      \"version\": \"1.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz\",\n      \"integrity\": \"sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"is-arrayish\": \"^0.2.1\"\n      }\n    },\n    \"node_modules/escape-string-regexp\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz\",\n      \"integrity\": \"sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/eslint\": {\n      \"version\": \"9.17.0\",\n      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-9.17.0.tgz\",\n      \"integrity\": \"sha512-evtlNcpJg+cZLcnVKwsai8fExnqjGPicK7gnUtlNuzu+Fv9bI0aLpND5T44VLQtoMEnI57LoXO9XAkIXwohKrA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@eslint-community/eslint-utils\": \"^4.2.0\",\n        \"@eslint-community/regexpp\": \"^4.12.1\",\n        \"@eslint/config-array\": \"^0.19.0\",\n        \"@eslint/core\": \"^0.9.0\",\n        \"@eslint/eslintrc\": \"^3.2.0\",\n        \"@eslint/js\": \"9.17.0\",\n        \"@eslint/plugin-kit\": \"^0.2.3\",\n        \"@humanfs/node\": \"^0.16.6\",\n        \"@humanwhocodes/module-importer\": \"^1.0.1\",\n        \"@humanwhocodes/retry\": \"^0.4.1\",\n        \"@types/estree\": \"^1.0.6\",\n        \"@types/json-schema\": \"^7.0.15\",\n        \"ajv\": \"^6.12.4\",\n        \"chalk\": \"^4.0.0\",\n        \"cross-spawn\": \"^7.0.6\",\n        \"debug\": \"^4.3.2\",\n        \"escape-string-regexp\": \"^4.0.0\",\n        \"eslint-scope\": \"^8.2.0\",\n        \"eslint-visitor-keys\": \"^4.2.0\",\n        \"espree\": \"^10.3.0\",\n        \"esquery\": \"^1.5.0\",\n        \"esutils\": \"^2.0.2\",\n        \"fast-deep-equal\": \"^3.1.3\",\n        \"file-entry-cache\": \"^8.0.0\",\n        \"find-up\": \"^5.0.0\",\n        \"glob-parent\": \"^6.0.2\",\n        \"ignore\": \"^5.2.0\",\n        \"imurmurhash\": \"^0.1.4\",\n        \"is-glob\": \"^4.0.0\",\n        \"json-stable-stringify-without-jsonify\": \"^1.0.1\",\n        \"lodash.merge\": \"^4.6.2\",\n        \"minimatch\": \"^3.1.2\",\n        \"natural-compare\": \"^1.4.0\",\n        \"optionator\": \"^0.9.3\"\n      },\n      \"bin\": {\n        \"eslint\": \"bin/eslint.js\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://eslint.org/donate\"\n      },\n      \"peerDependencies\": {\n        \"jiti\": \"*\"\n      },\n      \"peerDependenciesMeta\": {\n        \"jiti\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/eslint-compat-utils\": {\n      \"version\": \"0.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-compat-utils/-/eslint-compat-utils-0.5.1.tgz\",\n      \"integrity\": \"sha512-3z3vFexKIEnjHE3zCMRo6fn/e44U7T1khUjg+Hp0ZQMCigh28rALD0nPFBcGZuiLC5rLZa2ubQHDRln09JfU2Q==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"semver\": \"^7.5.4\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"peerDependencies\": {\n        \"eslint\": \">=6.0.0\"\n      }\n    },\n    \"node_modules/eslint-config-prettier\": {\n      \"version\": \"9.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-9.1.0.tgz\",\n      \"integrity\": \"sha512-NSWl5BFQWEPi1j4TjVNItzYV7dZXZ+wP6I6ZhrBGpChQhZRUaElihE9uRRkcbRnNb76UMKDF3r+WTmNcGPKsqw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"bin\": {\n        \"eslint-config-prettier\": \"bin/cli.js\"\n      },\n      \"peerDependencies\": {\n        \"eslint\": \">=7.0.0\"\n      }\n    },\n    \"node_modules/eslint-plugin-es-x\": {\n      \"version\": \"7.8.0\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-es-x/-/eslint-plugin-es-x-7.8.0.tgz\",\n      \"integrity\": \"sha512-7Ds8+wAAoV3T+LAKeu39Y5BzXCrGKrcISfgKEqTS4BDN8SFEDQd0S43jiQ8vIa3wUKD07qitZdfzlenSi8/0qQ==\",\n      \"dev\": true,\n      \"funding\": [\n        \"https://github.com/sponsors/ota-meshi\",\n        \"https://opencollective.com/eslint\"\n      ],\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@eslint-community/eslint-utils\": \"^4.1.2\",\n        \"@eslint-community/regexpp\": \"^4.11.0\",\n        \"eslint-compat-utils\": \"^0.5.1\"\n      },\n      \"engines\": {\n        \"node\": \"^14.18.0 || >=16.0.0\"\n      },\n      \"peerDependencies\": {\n        \"eslint\": \">=8\"\n      }\n    },\n    \"node_modules/eslint-plugin-n\": {\n      \"version\": \"17.15.0\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-n/-/eslint-plugin-n-17.15.0.tgz\",\n      \"integrity\": \"sha512-xF3zJkOfLlFOm5TvmqmsnA9/fO+/z2pYs0dkuKXKN/ymS6UB1yEcaoIkqxLKQ9Dw/WmLX/Tdh6/5ZS5azVixFQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@eslint-community/eslint-utils\": \"^4.4.1\",\n        \"enhanced-resolve\": \"^5.17.1\",\n        \"eslint-plugin-es-x\": \"^7.8.0\",\n        \"get-tsconfig\": \"^4.8.1\",\n        \"globals\": \"^15.11.0\",\n        \"ignore\": \"^5.3.2\",\n        \"minimatch\": \"^9.0.5\",\n        \"semver\": \"^7.6.3\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/eslint\"\n      },\n      \"peerDependencies\": {\n        \"eslint\": \">=8.23.0\"\n      }\n    },\n    \"node_modules/eslint-plugin-n/node_modules/brace-expansion\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz\",\n      \"integrity\": \"sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"balanced-match\": \"^1.0.0\"\n      }\n    },\n    \"node_modules/eslint-plugin-n/node_modules/minimatch\": {\n      \"version\": \"9.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz\",\n      \"integrity\": \"sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"brace-expansion\": \"^2.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=16 || 14 >=14.17\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/isaacs\"\n      }\n    },\n    \"node_modules/eslint-plugin-promise\": {\n      \"version\": \"7.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-7.2.1.tgz\",\n      \"integrity\": \"sha512-SWKjd+EuvWkYaS+uN2csvj0KoP43YTu7+phKQ5v+xw6+A0gutVX2yqCeCkC3uLCJFiPfR2dD8Es5L7yUsmvEaA==\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"@eslint-community/eslint-utils\": \"^4.4.0\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/eslint\"\n      },\n      \"peerDependencies\": {\n        \"eslint\": \"^7.0.0 || ^8.0.0 || ^9.0.0\"\n      }\n    },\n    \"node_modules/eslint-scope\": {\n      \"version\": \"8.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.2.0.tgz\",\n      \"integrity\": \"sha512-PHlWUfG6lvPc3yvP5A4PNyBL1W8fkDUccmI21JUu/+GKZBoH/W5u6usENXUrWFRsyoW5ACUjFGgAFQp5gUlb/A==\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\",\n      \"dependencies\": {\n        \"esrecurse\": \"^4.3.0\",\n        \"estraverse\": \"^5.2.0\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/eslint\"\n      }\n    },\n    \"node_modules/eslint-visitor-keys\": {\n      \"version\": \"4.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.0.tgz\",\n      \"integrity\": \"sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/eslint\"\n      }\n    },\n    \"node_modules/eslint/node_modules/ajv\": {\n      \"version\": \"6.12.6\",\n      \"resolved\": \"https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz\",\n      \"integrity\": \"sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"fast-deep-equal\": \"^3.1.1\",\n        \"fast-json-stable-stringify\": \"^2.0.0\",\n        \"json-schema-traverse\": \"^0.4.1\",\n        \"uri-js\": \"^4.2.2\"\n      },\n      \"funding\": {\n        \"type\": \"github\",\n        \"url\": \"https://github.com/sponsors/epoberezkin\"\n      }\n    },\n    \"node_modules/eslint/node_modules/chalk\": {\n      \"version\": \"4.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz\",\n      \"integrity\": \"sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ansi-styles\": \"^4.1.0\",\n        \"supports-color\": \"^7.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/chalk?sponsor=1\"\n      }\n    },\n    \"node_modules/eslint/node_modules/has-flag\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz\",\n      \"integrity\": \"sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/eslint/node_modules/json-schema-traverse\": {\n      \"version\": \"0.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz\",\n      \"integrity\": \"sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/eslint/node_modules/supports-color\": {\n      \"version\": \"7.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz\",\n      \"integrity\": \"sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"has-flag\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/espree\": {\n      \"version\": \"10.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/espree/-/espree-10.3.0.tgz\",\n      \"integrity\": \"sha512-0QYC8b24HWY8zjRnDTL6RiHfDbAWn63qb4LMj1Z4b076A4une81+z03Kg7l7mn/48PUTqoLptSXez8oknU8Clg==\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\",\n      \"dependencies\": {\n        \"acorn\": \"^8.14.0\",\n        \"acorn-jsx\": \"^5.3.2\",\n        \"eslint-visitor-keys\": \"^4.2.0\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^20.9.0 || >=21.1.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/eslint\"\n      }\n    },\n    \"node_modules/esquery\": {\n      \"version\": \"1.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz\",\n      \"integrity\": \"sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==\",\n      \"dev\": true,\n      \"license\": \"BSD-3-Clause\",\n      \"dependencies\": {\n        \"estraverse\": \"^5.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10\"\n      }\n    },\n    \"node_modules/esrecurse\": {\n      \"version\": \"4.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz\",\n      \"integrity\": \"sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\",\n      \"dependencies\": {\n        \"estraverse\": \"^5.2.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4.0\"\n      }\n    },\n    \"node_modules/estraverse\": {\n      \"version\": \"5.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz\",\n      \"integrity\": \"sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\",\n      \"engines\": {\n        \"node\": \">=4.0\"\n      }\n    },\n    \"node_modules/esutils\": {\n      \"version\": \"2.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz\",\n      \"integrity\": \"sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/extend\": {\n      \"version\": \"3.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/extend/-/extend-3.0.2.tgz\",\n      \"integrity\": \"sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/fast-deep-equal\": {\n      \"version\": \"3.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz\",\n      \"integrity\": \"sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/fast-glob\": {\n      \"version\": \"3.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.2.tgz\",\n      \"integrity\": \"sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@nodelib/fs.stat\": \"^2.0.2\",\n        \"@nodelib/fs.walk\": \"^1.2.3\",\n        \"glob-parent\": \"^5.1.2\",\n        \"merge2\": \"^1.3.0\",\n        \"micromatch\": \"^4.0.4\"\n      },\n      \"engines\": {\n        \"node\": \">=8.6.0\"\n      }\n    },\n    \"node_modules/fast-glob/node_modules/glob-parent\": {\n      \"version\": \"5.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz\",\n      \"integrity\": \"sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"is-glob\": \"^4.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 6\"\n      }\n    },\n    \"node_modules/fast-json-stable-stringify\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz\",\n      \"integrity\": \"sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/fast-levenshtein\": {\n      \"version\": \"2.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz\",\n      \"integrity\": \"sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/fast-uri\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/fast-uri/-/fast-uri-3.0.1.tgz\",\n      \"integrity\": \"sha512-MWipKbbYiYI0UC7cl8m/i/IWTqfC8YXsqjzybjddLsFjStroQzsHXkc73JutMvBiXmOvapk+axIl79ig5t55Bw==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/fastq\": {\n      \"version\": \"1.17.1\",\n      \"resolved\": \"https://registry.npmjs.org/fastq/-/fastq-1.17.1.tgz\",\n      \"integrity\": \"sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"reusify\": \"^1.0.4\"\n      }\n    },\n    \"node_modules/fetch-blob\": {\n      \"version\": \"3.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/fetch-blob/-/fetch-blob-3.2.0.tgz\",\n      \"integrity\": \"sha512-7yAQpD2UMJzLi1Dqv7qFYnPbaPx7ZfFK6PiIxQ4PfkGPyNyl2Ugx+a/umUonmKqjhM4DnfbMvdX6otXq83soQQ==\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/jimmywarting\"\n        },\n        {\n          \"type\": \"paypal\",\n          \"url\": \"https://paypal.me/jimmywarting\"\n        }\n      ],\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"node-domexception\": \"^1.0.0\",\n        \"web-streams-polyfill\": \"^3.0.3\"\n      },\n      \"engines\": {\n        \"node\": \"^12.20 || >= 14.13\"\n      }\n    },\n    \"node_modules/file-entry-cache\": {\n      \"version\": \"8.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz\",\n      \"integrity\": \"sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"flat-cache\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=16.0.0\"\n      }\n    },\n    \"node_modules/fill-range\": {\n      \"version\": \"7.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz\",\n      \"integrity\": \"sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"to-regex-range\": \"^5.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/find-up\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz\",\n      \"integrity\": \"sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"locate-path\": \"^6.0.0\",\n        \"path-exists\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/flat-cache\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz\",\n      \"integrity\": \"sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"flatted\": \"^3.2.9\",\n        \"keyv\": \"^4.5.4\"\n      },\n      \"engines\": {\n        \"node\": \">=16\"\n      }\n    },\n    \"node_modules/flatted\": {\n      \"version\": \"3.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/flatted/-/flatted-3.3.1.tgz\",\n      \"integrity\": \"sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==\",\n      \"dev\": true,\n      \"license\": \"ISC\"\n    },\n    \"node_modules/formdata-polyfill\": {\n      \"version\": \"4.0.10\",\n      \"resolved\": \"https://registry.npmjs.org/formdata-polyfill/-/formdata-polyfill-4.0.10.tgz\",\n      \"integrity\": \"sha512-buewHzMvYL29jdeQTVILecSaZKnt/RJWjoZCF5OW60Z67/GmSLBkOFM7qh1PI3zFNtJbaZL5eQu1vLfazOwj4g==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"fetch-blob\": \"^3.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=12.20.0\"\n      }\n    },\n    \"node_modules/get-east-asian-width\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/get-east-asian-width/-/get-east-asian-width-1.2.0.tgz\",\n      \"integrity\": \"sha512-2nk+7SIVb14QrgXFHcm84tD4bKQz0RxPuMT8Ag5KPOq7J5fEmAg0UbXdTOSHqNuHSU28k55qnceesxXRZGzKWA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/get-tsconfig\": {\n      \"version\": \"4.8.1\",\n      \"resolved\": \"https://registry.npmjs.org/get-tsconfig/-/get-tsconfig-4.8.1.tgz\",\n      \"integrity\": \"sha512-k9PN+cFBmaLWtVz29SkUoqU5O0slLuHJXt/2P+tMVFT+phsSGXGkp9t3rQIqdz0e+06EHNGs3oM6ZX1s2zHxRg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"resolve-pkg-maps\": \"^1.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/privatenumber/get-tsconfig?sponsor=1\"\n      }\n    },\n    \"node_modules/glob-parent\": {\n      \"version\": \"6.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz\",\n      \"integrity\": \"sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"is-glob\": \"^4.0.3\"\n      },\n      \"engines\": {\n        \"node\": \">=10.13.0\"\n      }\n    },\n    \"node_modules/globals\": {\n      \"version\": \"15.13.0\",\n      \"resolved\": \"https://registry.npmjs.org/globals/-/globals-15.13.0.tgz\",\n      \"integrity\": \"sha512-49TewVEz0UxZjr1WYYsWpPrhyC/B/pA8Bq0fUmet2n+eR7yn0IvNzNaoBwnK6mdkzcN+se7Ez9zUgULTz2QH4g==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/graceful-fs\": {\n      \"version\": \"4.2.11\",\n      \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz\",\n      \"integrity\": \"sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==\",\n      \"dev\": true,\n      \"license\": \"ISC\"\n    },\n    \"node_modules/has-flag\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz\",\n      \"integrity\": \"sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/ignore\": {\n      \"version\": \"5.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz\",\n      \"integrity\": \"sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 4\"\n      }\n    },\n    \"node_modules/import-fresh\": {\n      \"version\": \"3.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz\",\n      \"integrity\": \"sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"parent-module\": \"^1.0.0\",\n        \"resolve-from\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/imurmurhash\": {\n      \"version\": \"0.1.4\",\n      \"resolved\": \"https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz\",\n      \"integrity\": \"sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.8.19\"\n      }\n    },\n    \"node_modules/is-arrayish\": {\n      \"version\": \"0.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz\",\n      \"integrity\": \"sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/is-extglob\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz\",\n      \"integrity\": \"sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/is-glob\": {\n      \"version\": \"4.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz\",\n      \"integrity\": \"sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"is-extglob\": \"^2.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/is-interactive\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-interactive/-/is-interactive-2.0.0.tgz\",\n      \"integrity\": \"sha512-qP1vozQRI+BMOPcjFzrjXuQvdak2pHNUMZoeG2eRbiSqyvbEf/wQtEOTOX1guk6E3t36RkaqiSt8A/6YElNxLQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/is-number\": {\n      \"version\": \"7.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz\",\n      \"integrity\": \"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.12.0\"\n      }\n    },\n    \"node_modules/is-unicode-supported\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-2.0.0.tgz\",\n      \"integrity\": \"sha512-FRdAyx5lusK1iHG0TWpVtk9+1i+GjrzRffhDg4ovQ7mcidMQ6mj+MhKPmvh7Xwyv5gIS06ns49CA7Sqg7lC22Q==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/isexe\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz\",\n      \"integrity\": \"sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==\",\n      \"dev\": true,\n      \"license\": \"ISC\"\n    },\n    \"node_modules/js-tokens\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz\",\n      \"integrity\": \"sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/js-yaml\": {\n      \"version\": \"4.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz\",\n      \"integrity\": \"sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"argparse\": \"^2.0.1\"\n      },\n      \"bin\": {\n        \"js-yaml\": \"bin/js-yaml.js\"\n      }\n    },\n    \"node_modules/json-buffer\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz\",\n      \"integrity\": \"sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/json-parse-even-better-errors\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz\",\n      \"integrity\": \"sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/json-schema-traverse\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz\",\n      \"integrity\": \"sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/json-stable-stringify-without-jsonify\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz\",\n      \"integrity\": \"sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/jsonc-parser\": {\n      \"version\": \"3.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.3.1.tgz\",\n      \"integrity\": \"sha512-HUgH65KyejrUFPvHFPbqOY0rsFip3Bo5wb4ngvdi1EpCYWUQDC5V+Y7mZws+DLkr4M//zQJoanu1SP+87Dv1oQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/keyv\": {\n      \"version\": \"4.5.4\",\n      \"resolved\": \"https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz\",\n      \"integrity\": \"sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"json-buffer\": \"3.0.1\"\n      }\n    },\n    \"node_modules/levn\": {\n      \"version\": \"0.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/levn/-/levn-0.4.1.tgz\",\n      \"integrity\": \"sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"prelude-ls\": \"^1.2.1\",\n        \"type-check\": \"~0.4.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/lines-and-columns\": {\n      \"version\": \"1.2.4\",\n      \"resolved\": \"https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz\",\n      \"integrity\": \"sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/locate-path\": {\n      \"version\": \"6.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz\",\n      \"integrity\": \"sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"p-locate\": \"^5.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/lodash.merge\": {\n      \"version\": \"4.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz\",\n      \"integrity\": \"sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/log-symbols\": {\n      \"version\": \"6.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/log-symbols/-/log-symbols-6.0.0.tgz\",\n      \"integrity\": \"sha512-i24m8rpwhmPIS4zscNzK6MSEhk0DUWa/8iYQWxhffV8jkI4Phvs3F+quL5xvS0gdQR0FyTCMMH33Y78dDTzzIw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"chalk\": \"^5.3.0\",\n        \"is-unicode-supported\": \"^1.3.0\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/log-symbols/node_modules/is-unicode-supported\": {\n      \"version\": \"1.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-1.3.0.tgz\",\n      \"integrity\": \"sha512-43r2mRvz+8JRIKnWJ+3j8JtjRKZ6GmjzfaE/qiBJnikNnYv/6bagRJ1kUhNk8R5EX/GkobD+r+sfxCPJsiKBLQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/merge2\": {\n      \"version\": \"1.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz\",\n      \"integrity\": \"sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/micromatch\": {\n      \"version\": \"4.0.8\",\n      \"resolved\": \"https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz\",\n      \"integrity\": \"sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"braces\": \"^3.0.3\",\n        \"picomatch\": \"^2.3.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8.6\"\n      }\n    },\n    \"node_modules/mimic-function\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/mimic-function/-/mimic-function-5.0.1.tgz\",\n      \"integrity\": \"sha512-VP79XUPxV2CigYP3jWwAUFSku2aKqBH7uTAapFWCBqutsbmDo96KY5o8uh6U+/YSIn5OxJnXp73beVkpqMIGhA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/minimatch\": {\n      \"version\": \"3.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"brace-expansion\": \"^1.1.7\"\n      },\n      \"engines\": {\n        \"node\": \"*\"\n      }\n    },\n    \"node_modules/minimist\": {\n      \"version\": \"1.2.8\",\n      \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz\",\n      \"integrity\": \"sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/moo\": {\n      \"version\": \"0.5.2\",\n      \"resolved\": \"https://registry.npmjs.org/moo/-/moo-0.5.2.tgz\",\n      \"integrity\": \"sha512-iSAJLHYKnX41mKcJKjqvnAN9sf0LMDTXDEvFv+ffuRR9a1MIuXLjMNL6EsnDHSkKLTWNqQQ5uo61P4EbU4NU+Q==\",\n      \"dev\": true,\n      \"license\": \"BSD-3-Clause\"\n    },\n    \"node_modules/ms\": {\n      \"version\": \"2.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\",\n      \"integrity\": \"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/natural-compare\": {\n      \"version\": \"1.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz\",\n      \"integrity\": \"sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/nearley\": {\n      \"version\": \"2.20.1\",\n      \"resolved\": \"https://registry.npmjs.org/nearley/-/nearley-2.20.1.tgz\",\n      \"integrity\": \"sha512-+Mc8UaAebFzgV+KpI5n7DasuuQCHA89dmwm7JXw3TV43ukfNQ9DnBH3Mdb2g/I4Fdxc26pwimBWvjIw0UAILSQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"commander\": \"^2.19.0\",\n        \"moo\": \"^0.5.0\",\n        \"railroad-diagrams\": \"^1.0.0\",\n        \"randexp\": \"0.4.6\"\n      },\n      \"bin\": {\n        \"nearley-railroad\": \"bin/nearley-railroad.js\",\n        \"nearley-test\": \"bin/nearley-test.js\",\n        \"nearley-unparse\": \"bin/nearley-unparse.js\",\n        \"nearleyc\": \"bin/nearleyc.js\"\n      },\n      \"funding\": {\n        \"type\": \"individual\",\n        \"url\": \"https://nearley.js.org/#give-to-nearley\"\n      }\n    },\n    \"node_modules/node-domexception\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz\",\n      \"integrity\": \"sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/jimmywarting\"\n        },\n        {\n          \"type\": \"github\",\n          \"url\": \"https://paypal.me/jimmywarting\"\n        }\n      ],\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=10.5.0\"\n      }\n    },\n    \"node_modules/node-fetch\": {\n      \"version\": \"3.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/node-fetch/-/node-fetch-3.3.2.tgz\",\n      \"integrity\": \"sha512-dRB78srN/l6gqWulah9SrxeYnxeddIG30+GOqK/9OlLVyLg3HPnr6SqOWTWOXKRwC2eGYCkZ59NNuSgvSrpgOA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"data-uri-to-buffer\": \"^4.0.0\",\n        \"fetch-blob\": \"^3.1.4\",\n        \"formdata-polyfill\": \"^4.0.10\"\n      },\n      \"engines\": {\n        \"node\": \"^12.20.0 || ^14.13.1 || >=16.0.0\"\n      },\n      \"funding\": {\n        \"type\": \"opencollective\",\n        \"url\": \"https://opencollective.com/node-fetch\"\n      }\n    },\n    \"node_modules/node-fetch/node_modules/data-uri-to-buffer\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-4.0.1.tgz\",\n      \"integrity\": \"sha512-0R9ikRb668HB7QDxT1vkpuUBtqc53YyAwMwGeUFKRojY/NWKvdZ+9UYtRfGmhqNbRkTSVpMbmyhXipFFv2cb/A==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 12\"\n      }\n    },\n    \"node_modules/onetime\": {\n      \"version\": \"7.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/onetime/-/onetime-7.0.0.tgz\",\n      \"integrity\": \"sha512-VXJjc87FScF88uafS3JllDgvAm+c/Slfz06lorj2uAY34rlUu0Nt+v8wreiImcrgAjjIHp1rXpTDlLOGw29WwQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"mimic-function\": \"^5.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/optionator\": {\n      \"version\": \"0.9.4\",\n      \"resolved\": \"https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz\",\n      \"integrity\": \"sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"deep-is\": \"^0.1.3\",\n        \"fast-levenshtein\": \"^2.0.6\",\n        \"levn\": \"^0.4.1\",\n        \"prelude-ls\": \"^1.2.1\",\n        \"type-check\": \"^0.4.0\",\n        \"word-wrap\": \"^1.2.5\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/ora\": {\n      \"version\": \"8.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/ora/-/ora-8.1.1.tgz\",\n      \"integrity\": \"sha512-YWielGi1XzG1UTvOaCFaNgEnuhZVMSHYkW/FQ7UX8O26PtlpdM84c0f7wLPlkvx2RfiQmnzd61d/MGxmpQeJPw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"chalk\": \"^5.3.0\",\n        \"cli-cursor\": \"^5.0.0\",\n        \"cli-spinners\": \"^2.9.2\",\n        \"is-interactive\": \"^2.0.0\",\n        \"is-unicode-supported\": \"^2.0.0\",\n        \"log-symbols\": \"^6.0.0\",\n        \"stdin-discarder\": \"^0.2.2\",\n        \"string-width\": \"^7.2.0\",\n        \"strip-ansi\": \"^7.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/ora/node_modules/ansi-regex\": {\n      \"version\": \"6.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz\",\n      \"integrity\": \"sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/ansi-regex?sponsor=1\"\n      }\n    },\n    \"node_modules/ora/node_modules/emoji-regex\": {\n      \"version\": \"10.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.3.0.tgz\",\n      \"integrity\": \"sha512-QpLs9D9v9kArv4lfDEgg1X/gN5XLnf/A6l9cs8SPZLRZR3ZkY9+kwIQTxm+fsSej5UMYGE8fdoaZVIBlqG0XTw==\",\n      \"dev\": true,\n      \"license\": \"MIT\"\n    },\n    \"node_modules/ora/node_modules/string-width\": {\n      \"version\": \"7.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz\",\n      \"integrity\": \"sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"emoji-regex\": \"^10.3.0\",\n        \"get-east-asian-width\": \"^1.0.0\",\n        \"strip-ansi\": \"^7.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/ora/node_modules/strip-ansi\": {\n      \"version\": \"7.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz\",\n      \"integrity\": \"sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ansi-regex\": \"^6.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/strip-ansi?sponsor=1\"\n      }\n    },\n    \"node_modules/p-limit\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz\",\n      \"integrity\": \"sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"yocto-queue\": \"^0.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/p-locate\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz\",\n      \"integrity\": \"sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"p-limit\": \"^3.0.2\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/parent-module\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz\",\n      \"integrity\": \"sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"callsites\": \"^3.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/parse-json\": {\n      \"version\": \"5.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz\",\n      \"integrity\": \"sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@babel/code-frame\": \"^7.0.0\",\n        \"error-ex\": \"^1.3.1\",\n        \"json-parse-even-better-errors\": \"^2.3.0\",\n        \"lines-and-columns\": \"^1.1.6\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/path-exists\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz\",\n      \"integrity\": \"sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/path-key\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz\",\n      \"integrity\": \"sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/picocolors\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/picocolors/-/picocolors-1.0.1.tgz\",\n      \"integrity\": \"sha512-anP1Z8qwhkbmu7MFP5iTt+wQKXgwzf7zTyGlcdzabySa9vd0Xt392U0rVmz9poOaBj0uHJKyyo9/upk0HrEQew==\",\n      \"dev\": true,\n      \"license\": \"ISC\"\n    },\n    \"node_modules/picomatch\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz\",\n      \"integrity\": \"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=8.6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/jonschlinkert\"\n      }\n    },\n    \"node_modules/prelude-ls\": {\n      \"version\": \"1.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz\",\n      \"integrity\": \"sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/prettier\": {\n      \"version\": \"3.4.2\",\n      \"resolved\": \"https://registry.npmjs.org/prettier/-/prettier-3.4.2.tgz\",\n      \"integrity\": \"sha512-e9MewbtFo+Fevyuxn/4rrcDAaq0IYxPGLvObpQjiZBMAzB9IGmzlnG9RZy3FFas+eBMu2vA0CszMeduow5dIuQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"bin\": {\n        \"prettier\": \"bin/prettier.cjs\"\n      },\n      \"engines\": {\n        \"node\": \">=14\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/prettier/prettier?sponsor=1\"\n      }\n    },\n    \"node_modules/prettier-plugin-sort-json\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/prettier-plugin-sort-json/-/prettier-plugin-sort-json-4.0.0.tgz\",\n      \"integrity\": \"sha512-zV5g+bWFD2zAqyQ8gCkwUTC49o9FxslaUdirwivt5GZHcf57hCocavykuyYqbExoEsuBOg8IU36OY7zmVEMOWA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=18.0.0\"\n      },\n      \"peerDependencies\": {\n        \"prettier\": \"^3.0.0\"\n      }\n    },\n    \"node_modules/prettier-plugin-toml\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/prettier-plugin-toml/-/prettier-plugin-toml-2.0.1.tgz\",\n      \"integrity\": \"sha512-99z1YOkViECHtXQjGIigd3talI/ybUI1zB3yniAwUrlWBXupNXThB1hM6bwSMUEj2/+tomTlMtT98F5t4s8IWA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@taplo/lib\": \"^0.4.0-alpha.2\"\n      },\n      \"engines\": {\n        \"node\": \">=16.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/unts\"\n      },\n      \"peerDependencies\": {\n        \"prettier\": \"^3.0.3\"\n      }\n    },\n    \"node_modules/punycode\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz\",\n      \"integrity\": \"sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/queue-microtask\": {\n      \"version\": \"1.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz\",\n      \"integrity\": \"sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/feross\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://www.patreon.com/feross\"\n        },\n        {\n          \"type\": \"consulting\",\n          \"url\": \"https://feross.org/support\"\n        }\n      ],\n      \"license\": \"MIT\"\n    },\n    \"node_modules/railroad-diagrams\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/railroad-diagrams/-/railroad-diagrams-1.0.0.tgz\",\n      \"integrity\": \"sha512-cz93DjNeLY0idrCNOH6PviZGRN9GJhsdm9hpn1YCS879fj4W+x5IFJhhkRZcwVgMmFF7R82UA/7Oh+R8lLZg6A==\",\n      \"dev\": true,\n      \"license\": \"CC0-1.0\"\n    },\n    \"node_modules/randexp\": {\n      \"version\": \"0.4.6\",\n      \"resolved\": \"https://registry.npmjs.org/randexp/-/randexp-0.4.6.tgz\",\n      \"integrity\": \"sha512-80WNmd9DA0tmZrw9qQa62GPPWfuXJknrmVmLcxvq4uZBdYqb1wYoKTmnlGUchvVWe0XiLupYkBoXVOxz3C8DYQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"discontinuous-range\": \"1.0.0\",\n        \"ret\": \"~0.1.10\"\n      },\n      \"engines\": {\n        \"node\": \">=0.12\"\n      }\n    },\n    \"node_modules/require-from-string\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz\",\n      \"integrity\": \"sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/resolve-from\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz\",\n      \"integrity\": \"sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/resolve-pkg-maps\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/resolve-pkg-maps/-/resolve-pkg-maps-1.0.0.tgz\",\n      \"integrity\": \"sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"funding\": {\n        \"url\": \"https://github.com/privatenumber/resolve-pkg-maps?sponsor=1\"\n      }\n    },\n    \"node_modules/restore-cursor\": {\n      \"version\": \"5.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/restore-cursor/-/restore-cursor-5.1.0.tgz\",\n      \"integrity\": \"sha512-oMA2dcrw6u0YfxJQXm342bFKX/E4sG9rbTzO9ptUcR/e8A33cHuvStiYOwH7fszkZlZ1z/ta9AAoPk2F4qIOHA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"onetime\": \"^7.0.0\",\n        \"signal-exit\": \"^4.1.0\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/ret\": {\n      \"version\": \"0.1.15\",\n      \"resolved\": \"https://registry.npmjs.org/ret/-/ret-0.1.15.tgz\",\n      \"integrity\": \"sha512-TTlYpa+OL+vMMNG24xSlQGEJ3B/RzEfUlLct7b5G/ytav+wPrplCpVMFuwzXbkecJrb6IYo1iFb0S9v37754mg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.12\"\n      }\n    },\n    \"node_modules/reusify\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz\",\n      \"integrity\": \"sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"iojs\": \">=1.0.0\",\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/run-parallel\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz\",\n      \"integrity\": \"sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/feross\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://www.patreon.com/feross\"\n        },\n        {\n          \"type\": \"consulting\",\n          \"url\": \"https://feross.org/support\"\n        }\n      ],\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"queue-microtask\": \"^1.2.2\"\n      }\n    },\n    \"node_modules/schemes\": {\n      \"version\": \"1.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/schemes/-/schemes-1.4.0.tgz\",\n      \"integrity\": \"sha512-ImFy9FbCsQlVgnE3TCWmLPCFnVzx0lHL/l+umHplDqAKd0dzFpnS6lFZIpagBlYhKwzVmlV36ec0Y1XTu8JBAQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"extend\": \"^3.0.0\"\n      }\n    },\n    \"node_modules/semver\": {\n      \"version\": \"7.6.3\",\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-7.6.3.tgz\",\n      \"integrity\": \"sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"bin\": {\n        \"semver\": \"bin/semver.js\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      }\n    },\n    \"node_modules/shebang-command\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz\",\n      \"integrity\": \"sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"shebang-regex\": \"^3.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/shebang-regex\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz\",\n      \"integrity\": \"sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/signal-exit\": {\n      \"version\": \"4.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz\",\n      \"integrity\": \"sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"engines\": {\n        \"node\": \">=14\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/isaacs\"\n      }\n    },\n    \"node_modules/smol-toml\": {\n      \"version\": \"1.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/smol-toml/-/smol-toml-1.3.1.tgz\",\n      \"integrity\": \"sha512-tEYNll18pPKHroYSmLLrksq233j021G0giwW7P3D24jC54pQ5W5BXMsQ/Mvw1OJCmEYDgY+lrzT+3nNUtoNfXQ==\",\n      \"dev\": true,\n      \"license\": \"BSD-3-Clause\",\n      \"engines\": {\n        \"node\": \">= 18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/cyyynthia\"\n      }\n    },\n    \"node_modules/smtp-address-parser\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/smtp-address-parser/-/smtp-address-parser-1.1.0.tgz\",\n      \"integrity\": \"sha512-Gz11jbNU0plrReU9Sj7fmshSBxxJ9ShdD2q4ktHIHo/rpTH6lFyQoYHYKINPJtPe8aHFnsbtW46Ls0tCCBsIZg==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"nearley\": \"^2.20.1\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10\"\n      }\n    },\n    \"node_modules/stdin-discarder\": {\n      \"version\": \"0.2.2\",\n      \"resolved\": \"https://registry.npmjs.org/stdin-discarder/-/stdin-discarder-0.2.2.tgz\",\n      \"integrity\": \"sha512-UhDfHmA92YAlNnCfhmq0VeNL5bDbiZGg7sZ2IvPsXubGkiNa9EC+tUTsjBRsYUAz87btI6/1wf4XoVvQ3uRnmQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/strip-json-comments\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz\",\n      \"integrity\": \"sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/supports-color\": {\n      \"version\": \"5.5.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz\",\n      \"integrity\": \"sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"has-flag\": \"^3.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/tapable\": {\n      \"version\": \"2.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/tapable/-/tapable-2.2.1.tgz\",\n      \"integrity\": \"sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/to-regex-range\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz\",\n      \"integrity\": \"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"is-number\": \"^7.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8.0\"\n      }\n    },\n    \"node_modules/type-check\": {\n      \"version\": \"0.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz\",\n      \"integrity\": \"sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"prelude-ls\": \"^1.2.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/uri-js\": {\n      \"version\": \"4.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz\",\n      \"integrity\": \"sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==\",\n      \"dev\": true,\n      \"license\": \"BSD-2-Clause\",\n      \"dependencies\": {\n        \"punycode\": \"^2.1.0\"\n      }\n    },\n    \"node_modules/web-streams-polyfill\": {\n      \"version\": \"3.3.3\",\n      \"resolved\": \"https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-3.3.3.tgz\",\n      \"integrity\": \"sha512-d2JWLCivmZYTSIoge9MsgFCZrt571BikcWGYkjC1khllbTeDlGqZ2D8vD8E/lJa8WGWbb7Plm8/XJYV7IJHZZw==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/which\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/which/-/which-2.0.2.tgz\",\n      \"integrity\": \"sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"isexe\": \"^2.0.0\"\n      },\n      \"bin\": {\n        \"node-which\": \"bin/node-which\"\n      },\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/word-wrap\": {\n      \"version\": \"1.2.5\",\n      \"resolved\": \"https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz\",\n      \"integrity\": \"sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/yaml\": {\n      \"version\": \"2.6.1\",\n      \"resolved\": \"https://registry.npmjs.org/yaml/-/yaml-2.6.1.tgz\",\n      \"integrity\": \"sha512-7r0XPzioN/Q9kXBro/XPnA6kznR73DHq+GXh5ON7ZozRO6aMjbmiBuKste2wslTFkC5d1dw0GooOCepZXJ2SAg==\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"bin\": {\n        \"yaml\": \"bin.mjs\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/yocto-queue\": {\n      \"version\": \"0.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz\",\n      \"integrity\": \"sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.6650390625,
          "content": "{\n  \"name\": \"schemastore.org\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A collection of JSON Schemas\",\n  \"private\": true,\n  \"homepage\": \"https://schemastore.org\",\n  \"bugs\": {\n    \"url\": \"https://github.com/schemastore/SchemaStore/issues\"\n  },\n  \"engines\": {\n    \"node\": \">=18\"\n  },\n  \"license\": \"Apache 2.0\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/schemastore/SchemaStore\"\n  },\n  \"type\": \"module\",\n  \"scripts\": {\n    \"prettier\": \"prettier --config .prettierrc.cjs --ignore-path .gitignore --check .\",\n    \"prettier:fix\": \"prettier --config .prettierrc.cjs --ignore-path .gitignore --write .\",\n    \"eslint\": \"eslint ./cli.js\",\n    \"eslint:fix\": \"eslint --fix ./cli.js\",\n    \"new-schema\": \"echo \\\"WARNING: Please use 'node ./cli.js' instead of 'npm run'. This method for execution will be removed.\\\" && node --no-deprecation ./cli.js new-schema\",\n    \"check\": \"echo \\\"WARNING: Please use 'node ./cli.js' instead of 'npm run'. This method for execution will be removed.\\\" && node ./cli.js check\",\n    \"check-strict\": \"echo \\\"WARNING: Please use 'node ./cli.js' instead of 'npm run'. This method for execution will be removed.\\\" && node ./cli.js check-strict\",\n    \"check-remote\": \"echo \\\"WARNING: Please use 'node ./cli.js' instead of 'npm run'. This method for execution will be removed.\\\" && node ./cli.js check-remote\",\n    \"report\": \"echo \\\"WARNING: Please use 'node ./cli.js' instead of 'npm run'. This method for execution will be removed.\\\" && node ./cli.js report\",\n    \"maintenance\": \"echo \\\"WARNING: Please use 'node ./cli.js' instead of 'npm run'. This method for execution will be removed.\\\" && node ./cli.js maintenance\",\n    \"lint\": \"echo \\\"WARNING: Please use 'node ./cli.js' instead of 'npm run'. This method for execution will be removed.\\\" && node ./cli.js lint\",\n    \"build\": \"echo \\\"WARNING: Please use 'node ./cli.js' instead of 'npm run'. This method for execution will be removed.\\\" && npm run eslint && node ./cli.js check && ./scripts/dirty_repository_check.sh\"\n  },\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.17.0\",\n    \"@exodus/schemasafe\": \"^1.3.0\",\n    \"@hyperupcall/ajv-formats-draft2019\": \"^1.7.2\",\n    \"@prantlf/jsonlint\": \"^16.0.0\",\n    \"ajv\": \"^8.17.1\",\n    \"ajv-draft-04\": \"^1.0.0\",\n    \"ajv-formats\": \"^2.1.1\",\n    \"chalk\": \"^5.3.0\",\n    \"eslint\": \"^9.17.0\",\n    \"eslint-config-prettier\": \"^9.1.0\",\n    \"eslint-plugin-n\": \"^17.15.0\",\n    \"eslint-plugin-promise\": \"^7.2.1\",\n    \"globals\": \"^15.13.0\",\n    \"jsonc-parser\": \"^3.3.1\",\n    \"minimist\": \"^1.2.8\",\n    \"node-fetch\": \"^3.3.2\",\n    \"ora\": \"^8.1.1\",\n    \"prettier\": \"^3.4.2\",\n    \"prettier-plugin-sort-json\": \"^4.0.0\",\n    \"prettier-plugin-toml\": \"^2.0.1\",\n    \"smol-toml\": \"^1.3.1\",\n    \"yaml\": \"^2.6.1\"\n  }\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}