{
  "metadata": {
    "timestamp": 1736561643685,
    "page": 213,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ConnorAtherton/walkway",
      "stars": 4367,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01171875,
          "content": "node_modules"
        },
        {
          "name": "Gulpfile.js",
          "type": "blob",
          "size": 0.587890625,
          "content": "var gulp = require(\"gulp\");\nvar plugins = require(\"gulp-load-plugins\")();\nvar stylish = require('jshint-stylish');\nvar fileGlob = 'src/**/*.js';\n\ngulp.task('js:lint', function() {\n  return gulp\n    .src(fileGlob)\n    .pipe(plugins.jshint())\n    .pipe(plugins.jshint.reporter('jshint-stylish'));\n});\n\ngulp.task('js:build', function() {\n  return gulp\n    .src(fileGlob)\n    .pipe(plugins.uglify())\n    .pipe(plugins.rename({suffix: '.min'}))\n    .pipe(gulp.dest('./'));\n});\n\ngulp.task('watch', function() {\n  gulp.watch(fileGlob, ['js:lint']);\n});\n\ngulp.task('default', ['js:lint', 'js:build', 'watch']);"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Connor Atherton\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.9814453125,
          "content": "# Walkway [![devDependency Status](https://david-dm.org/ConnorAtherton/walkway/dev-status.svg)](https://david-dm.org/ConnorAtherton/walkway#info=devDependencies)\n\nI loved the animations [for the polygon ps4 review](http://www.polygon.com/a/ps4-review) a few months back\nand decided to create a small library to re-create them ([simple demo](http://htmlpreview.github.io/?https://github.com/ConnorAtherton/walkway/blob/master/example/index.html)).\n\nIt supports `path`, `line` and `polyline` elements.\n\n## Download\n\n#### yarn\n```\nyarn add walkway.js\n```\n\n#### npm\n```\nnpm install walkway.js\n```\n\n#### CDN\n```\nhttps://cdn.jsdelivr.net/npm/walkway.js/src/walkway.min.js\n```\n\n## How to use\n\nCreate a new ```Walkway``` instance with a supplied options object.\nWhen you want to start animating call ```.draw``` on the returned instance\nproviding an optional callback that will be called when drawing is complete.\n\n``` js\n// Create a new instance\nvar svg = new Walkway(options);\n// Draw when ready, providing an optional callback\nsvg.draw(callback);\n\n// Options passed in as an object, see options below.\nvar svg = new Walkway({ selector: '#test'});\n\n// Overwriting defaults\nvar svg = new Walkway({\n  selector: '#test',\n  duration: '2000',\n  // can pass in a function or a string like 'easeOutQuint'\n  easing: function (t) {\n    return t * t;\n  }\n});\n\nsvg.draw();\n\n// If you don't want to change the default options you can\n// also supply the constructor with a selector string.\nvar svg = new Walkway('#test');\n\nsvg.draw(function() {\n  console.log('Animation finished');\n});\n```\n\nAll animations will automatically complete when the window containing them loses focus, to another\ntab, for example. You can also choose to restart all animations in an event handler. To restart\nevery animation when the window gains focus again, you can do:\n\n```\ndocument.addEventListener('visibilitychange', function() {\n  if (!document.hidden) {\n    svg.redraw();\n  }\n}, false);\n```\n\n### Options\n\n- **selector** (*mandatory*) - The selector of the parent element (usually will be a specific svg element)\n- **duration** - Time the animation should run for, in ms. Default is 400.\n- **easing** - Name of the easing function used for drawing. Default is 'easeInOutCubic'. You can also supply your own function that will be passed the progress and should return a value in the range of [0, 1];\n\n### Easing\n\nAll credit for the built-in easing functions go to [gre](https://github.com/gre) from [this gist](https://gist.github.com/gre/1650294).\n\n### Gotchas\n\nSometimes when exporting from a program like Illustrator elements have no stroke style attached to them. This results in confusion when\nWalkway starts the animation and nothing shows up. Just be sure to add base styles that can be overwritten if required.\n\n```sass\nsvg {\n  path, line, polyline {\n    stroke: #fff\n    stroke-width: 2px\n  }\n\n  path {\n    fill: transparent\n  }\n}\n```\n\n### Demo\nView the example link provided near the top of this README or see it in action on my\n[website](http://www.connoratherton.com/walkway).\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.3349609375,
          "content": "{\n  \"name\": \"walkway\",\n  \"homepage\": \"https://github.com/ConnorAtherton/walkway\",\n  \"authors\": [\n    \"Connor Atherton\"\n  ],\n  \"description\": \"An easy way to animate simple svg elements.\",\n  \"main\": \"src/walkway.js\",\n  \"moduleType\": [\n    \"amd\",\n    \"globals\",\n    \"node\"\n  ],\n  \"keywords\": [\n    \"svg\",\n    \"animate\"\n  ],\n  \"license\": \"MIT\"\n}\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.763671875,
          "content": "{\n  \"name\": \"walkway.js\",\n  \"version\": \"0.0.9\",\n  \"description\": \"An easy way to animate simple svg elements.\",\n  \"main\": \"src/walkway.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/ConnorAtherton/walkway.git\"\n  },\n  \"keywords\": [\n    \"svg\",\n    \"animate\"\n  ],\n  \"author\": \"Connor Atherton\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ConnorAtherton/walkway/issues\"\n  },\n  \"homepage\": \"https://github.com/ConnorAtherton/walkway\",\n  \"devDependencies\": {\n    \"gulp\": \"^3.9.1\",\n    \"gulp-jshint\": \"^2.0.0\",\n    \"gulp-load-plugins\": \"^1.2.2\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-uglify\": \"^1.5.3\",\n    \"jshint\": \"^2.9.1\",\n    \"jshint-stylish\": \"^2.1.0\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "walkway.min.js",
          "type": "blob",
          "size": 4.181640625,
          "content": "!function(t,e){\"function\"==typeof define&&define.amd?define(e):\"object\"==typeof exports?module.exports=e():t.Walkway=e()}(this,function(t){\"use strict\";function e(t){var e=[\"path\",\"line\",\"polyline\"],n=e.reduce(function(e,n){return e+t+\" \"+n+\", \"},\"\");return n.slice(0,-2)}function n(t){return this instanceof n?(\"string\"==typeof t&&(t={selector:t}),t.selector?(this.opts=t,this.selector=t.selector,this.duration=t.duration||500,this.easing=\"function\"==typeof t.easing?t.easing:l[t.easing]||l.easeInOutCubic,this.id=!1,this.elements=this.getElements(),this.callback=t.callback,this.setInitialStyles(),h=h.concat(this.elements),void f.push(this)):this.error(\"A selector needs to be specified\")):new n(t)}function i(t,e,n){this.el=t,this.duration=e,this.easing=n,this.animationStart=null,this.animationStarted=!1}function a(t,e,n){i.call(this,t,e,n),this.length=t.getTotalLength()}function o(t,e,n){i.call(this,t,e,n),this.length=u(t)}function r(t,e,n){i.call(this,t,e,n),this.length=s(t)}function s(t){var e,n,i,a,o,r=0,s=t.points.numberOfItems;for(o=1;o<s;o++)e=t.points.getItem(o-1).x,n=t.points.getItem(o).x,i=t.points.getItem(o-1).y,a=t.points.getItem(o).y,r+=Math.sqrt(Math.pow(e-n,2)+Math.pow(i-a,2));return r}function u(t){var e=t.getAttribute(\"x1\"),n=t.getAttribute(\"x2\"),i=t.getAttribute(\"y1\"),a=t.getAttribute(\"y2\");return Math.sqrt(Math.pow(e-n,2)+Math.pow(i-a,2))}var c=0;window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,window.cancelAnimationFrame=window.cancelAnimationFrame||window.mozCancelAnimationFrame,window.requestAnimationFrame||(window.requestAnimationFrame=function(t){var e=(new Date).getTime(),n=Math.max(0,16-(e-c)),i=window.setTimeout(function(){t(e+n)},n);return c=e+n,i}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(t){clearTimeout(t)});var l={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return t*(2-t)},easeInOutQuad:function(t){return t<.5?2*t*t:-1+(4-2*t)*t},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return--t*t*t+1},easeInOutCubic:function(t){return t<.5?4*t*t*t:(t-1)*(2*t-2)*(2*t-2)+1},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return 1- --t*t*t*t},easeInOutQuart:function(t){return t<.5?8*t*t*t*t:1-8*--t*t*t*t},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return 1+--t*t*t*t*t},easeInOutQuint:function(t){return t<.5?16*t*t*t*t*t:1+16*--t*t*t*t*t}},h=[],f=[];return document.addEventListener(\"visibilitychange\",function(){if(document.hidden){for(var t=0,e=f.length;t<e;t++)f[t].cancel();for(var n=0,i=h.length;n<i;n++)h[n].complete()}},!1),n.prototype={constructor:n,error:function(t){console.error(\"Walkway error: \"+t)},getElements:function(){var t=this,n=e(this.selector),i=document.querySelectorAll(n);return i=Array.prototype.slice.call(i),i.map(function(e){return\"path\"===e.tagName?new a(e,t.duration,t.easing):\"line\"===e.tagName?new o(e,t.duration,t.easing):\"polyline\"===e.tagName?new r(e,t.duration,t.easing):void 0})},setInitialStyles:function(){this.elements.forEach(function(t){t.el.style.strokeDasharray=t.length+\" \"+t.length,t.el.style.strokeDashoffset=t.length})},draw:function(t){var e=this.elements.length,n=this.elements.filter(function(t){return t.done}).length===e,i=null,a=!1;if(this.callback=t||this.callback,n)return this.callback&&\"function\"==typeof this.callback&&this.callback(),void this.cancel();for(;e--;)i=this.elements[e],a=i.update(),a&&(i.done=!0);this.id=window.requestAnimationFrame(this.draw.bind(this,t))},cancel:function(){window.cancelAnimationFrame(this.id)},redraw:function(){this.cancel(),this.elements.forEach(function(t){t.reset()}),this.draw()}},i.prototype={constructor:i,update:function(){this.animationStarted||(this.animationStart=Date.now(),this.animationStarted=!0);var t=this.easing((Date.now()-this.animationStart)/this.duration);return this.fill(t),t>=1},fill:function(t){var e=Math.ceil(this.length*(1-t));this.el.style.strokeDashoffset=e<0?0:Math.abs(e)},complete:function(){this.fill(1)},reset:function(){this.done=!1,this.animationStart=0,this.animationStarted=!1,this.fill(0)}},a.prototype=o.prototype=r.prototype=Object.create(i.prototype),n});"
        }
      ]
    }
  ]
}