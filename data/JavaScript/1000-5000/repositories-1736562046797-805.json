{
  "metadata": {
    "timestamp": 1736562046797,
    "page": 805,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "reactjs/react-tutorial",
      "stars": 3290,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.248046875,
          "content": "# http://editorconfig.org\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.{js,rb,css,html}]\nindent_size = 2\n\n[*.go]\nindent_size = 8\nindent_style = tab\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "*~\nnode_modules\n.DS_Store\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.5712890625,
          "content": "The examples provided by Facebook are for non-commercial testing and evaluation\npurposes only. Facebook reserves all rights not expressly granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nFACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\nACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.9365234375,
          "content": "[![Deploy](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy)\n\n# React Tutorial\n\nThis is the React comment box example from [the React tutorial](http://facebook.github.io/react/docs/tutorial.html).\n\n## To use\n\nThere are several simple server implementations included. They all serve static files from `public/` and handle requests to `/api/comments` to fetch or add data. Start a server with one of the following:\n\n### Node\n\n```sh\nnpm install\nnode server.js\n```\n\n### Python\n\n```sh\npip install -r requirements.txt\npython server.py\n```\n\n### Ruby\n```sh\nruby server.rb\n```\n\n### PHP\n```sh\nphp server.php\n```\n\n### Go\n```sh\ngo run server.go\n```\n\n### Perl\n\n```sh\ncpan Mojolicious\nperl server.pl\n```\n\nAnd visit <http://localhost:3000/>. Try opening multiple tabs!\n\n## Changing the port\n\nYou can change the port number by setting the `$PORT` environment variable before invoking any of the scripts above, e.g.,\n\n```sh\nPORT=3001 node server.js\n```\n"
        },
        {
          "name": "app.json",
          "type": "blob",
          "size": 0.4306640625,
          "content": "{\n  \"name\": \"React Tutorial Server\",\n  \"description\": \"Code from the React tutorial\",\n  \"keywords\": [ \"react\", \"reactjs\", \"tutorial\" ],\n  \"repository\": \"https://github.com/reactjs/react-tutorial\",\n  \"logo\": \"https://facebook.github.io/react/img/logo.svg\",\n  \"website\": \"http://facebook.github.io/react/docs/tutorial.html\",\n  \"success_url\": \"/\",\n  \"env\" : {\n    \"BUILDPACK_URL\": \"https://github.com/heroku/heroku-buildpack-nodejs.git\"\n  }\n}\n\n"
        },
        {
          "name": "comments.json",
          "type": "blob",
          "size": 0.5224609375,
          "content": "[\n    {\n        \"id\": 1388534400000,\n        \"author\": \"Pete Hunt\",\n        \"text\": \"Hey there!\"\n    },\n    {\n        \"id\": 1420070400000,\n        \"author\": \"Paul Oâ€™Shannessy\",\n        \"text\": \"React is *great*!\"\n    },\n    {\n        \"id\": 1464988635157,\n        \"author\": \"ben\",\n        \"text\": \"*abc*\"\n    },\n    {\n        \"id\": 1464988636500,\n        \"author\": \"ben\",\n        \"text\": \"*abc*\"\n    },\n    {\n        \"id\": 1464988717637,\n        \"author\": \"evil\",\n        \"text\": \"<a href=\\\"javascript:alert(1)\\\">alert(1)</a>\"\n    }\n]"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.7568359375,
          "content": "{\n  \"name\": \"react-tutorial\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"license\": \"see LICENSE file\",\n  \"description\": \"Code from the React tutorial.\",\n  \"main\": \"server.js\",\n  \"dependencies\": {\n    \"body-parser\": \"^1.4.3\",\n    \"express\": \"^4.4.5\"\n  },\n  \"devDependencies\": {},\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"node server.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/reactjs/react-tutorial.git\"\n  },\n  \"keywords\": [\n    \"react\",\n    \"tutorial\",\n    \"comment\",\n    \"example\"\n  ],\n  \"author\": \"petehunt\",\n  \"bugs\": {\n    \"url\": \"https://github.com/reactjs/react-tutorial/issues\"\n  },\n  \"homepage\": \"https://github.com/reactjs/react-tutorial\",\n  \"engines\" : {\n    \"node\" : \"0.12.x\"\n  }\n}\n"
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.013671875,
          "content": "Flask==0.10.1\n"
        },
        {
          "name": "server.go",
          "type": "blob",
          "size": 3.455078125,
          "content": "/**\n * This file provided by Facebook is for non-commercial testing and evaluation\n * purposes only. Facebook reserves all rights not expressly granted.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype comment struct {\n\tID     int64  `json:\"id\"`\n\tAuthor string `json:\"author\"`\n\tText   string `json:\"text\"`\n}\n\nconst dataFile = \"./comments.json\"\n\nvar commentMutex = new(sync.Mutex)\n\n// Handle comments\nfunc handleComments(w http.ResponseWriter, r *http.Request) {\n\t// Since multiple requests could come in at once, ensure we have a lock\n\t// around all file operations\n\tcommentMutex.Lock()\n\tdefer commentMutex.Unlock()\n\n\t// Stat the file, so we can find its current permissions\n\tfi, err := os.Stat(dataFile)\n\tif err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"Unable to stat the data file (%s): %s\", dataFile, err), http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\t// Read the comments from the file.\n\tcommentData, err := ioutil.ReadFile(dataFile)\n\tif err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"Unable to read the data file (%s): %s\", dataFile, err), http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tswitch r.Method {\n\tcase \"POST\":\n\t\t// Decode the JSON data\n\t\tvar comments []comment\n\t\tif err := json.Unmarshal(commentData, &comments); err != nil {\n\t\t\thttp.Error(w, fmt.Sprintf(\"Unable to Unmarshal comments from data file (%s): %s\", dataFile, err), http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\t// Add a new comment to the in memory slice of comments\n\t\tcomments = append(comments, comment{ID: time.Now().UnixNano() / 1000000, Author: r.FormValue(\"author\"), Text: r.FormValue(\"text\")})\n\n\t\t// Marshal the comments to indented json.\n\t\tcommentData, err = json.MarshalIndent(comments, \"\", \"    \")\n\t\tif err != nil {\n\t\t\thttp.Error(w, fmt.Sprintf(\"Unable to marshal comments to json: %s\", err), http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\t// Write out the comments to the file, preserving permissions\n\t\terr := ioutil.WriteFile(dataFile, commentData, fi.Mode())\n\t\tif err != nil {\n\t\t\thttp.Error(w, fmt.Sprintf(\"Unable to write comments to data file (%s): %s\", dataFile, err), http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.Header().Set(\"Cache-Control\", \"no-cache\")\n\t\tw.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\t\tio.Copy(w, bytes.NewReader(commentData))\n\n\tcase \"GET\":\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.Header().Set(\"Cache-Control\", \"no-cache\")\n\t\tw.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\t\t// stream the contents of the file to the response\n\t\tio.Copy(w, bytes.NewReader(commentData))\n\n\tdefault:\n\t\t// Don't know the method, so error\n\t\thttp.Error(w, fmt.Sprintf(\"Unsupported method: %s\", r.Method), http.StatusMethodNotAllowed)\n\t}\n}\n\nfunc main() {\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"3000\"\n\t}\n\thttp.HandleFunc(\"/api/comments\", handleComments)\n\thttp.Handle(\"/\", http.FileServer(http.Dir(\"./public\")))\n\tlog.Println(\"Server started: http://localhost:\" + port)\n\tlog.Fatal(http.ListenAndServe(\":\"+port, nil))\n}\n"
        },
        {
          "name": "server.js",
          "type": "blob",
          "size": 2.5029296875,
          "content": "/**\n * This file provided by Facebook is for non-commercial testing and evaluation\n * purposes only. Facebook reserves all rights not expressly granted.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nvar fs = require('fs');\nvar path = require('path');\nvar express = require('express');\nvar bodyParser = require('body-parser');\nvar app = express();\n\nvar COMMENTS_FILE = path.join(__dirname, 'comments.json');\n\napp.set('port', (process.env.PORT || 3000));\n\napp.use('/', express.static(path.join(__dirname, 'public')));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: true}));\n\n// Additional middleware which will set headers that we need on each request.\napp.use(function(req, res, next) {\n    // Set permissive CORS header - this allows this server to be used only as\n    // an API server in conjunction with something like webpack-dev-server.\n    res.setHeader('Access-Control-Allow-Origin', '*');\n\n    // Disable caching so we'll always get the latest comments.\n    res.setHeader('Cache-Control', 'no-cache');\n    next();\n});\n\napp.get('/api/comments', function(req, res) {\n  fs.readFile(COMMENTS_FILE, function(err, data) {\n    if (err) {\n      console.error(err);\n      process.exit(1);\n    }\n    res.json(JSON.parse(data));\n  });\n});\n\napp.post('/api/comments', function(req, res) {\n  fs.readFile(COMMENTS_FILE, function(err, data) {\n    if (err) {\n      console.error(err);\n      process.exit(1);\n    }\n    var comments = JSON.parse(data);\n    // NOTE: In a real implementation, we would likely rely on a database or\n    // some other approach (e.g. UUIDs) to ensure a globally unique id. We'll\n    // treat Date.now() as unique-enough for our purposes.\n    var newComment = {\n      id: Date.now(),\n      author: req.body.author,\n      text: req.body.text,\n    };\n    comments.push(newComment);\n    fs.writeFile(COMMENTS_FILE, JSON.stringify(comments, null, 4), function(err) {\n      if (err) {\n        console.error(err);\n        process.exit(1);\n      }\n      res.json(comments);\n    });\n  });\n});\n\n\napp.listen(app.get('port'), function() {\n  console.log('Server started: http://localhost:' + app.get('port') + '/');\n});\n"
        },
        {
          "name": "server.php",
          "type": "blob",
          "size": 1.8671875,
          "content": "<?php\n/**\n * This file provided by Facebook is for non-commercial testing and evaluation\n * purposes only. Facebook reserves all rights not expressly granted.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n$scriptInvokedFromCli =\n    isset($_SERVER['argv'][0]) && $_SERVER['argv'][0] === 'server.php';\n\nif($scriptInvokedFromCli) {\n    $port = getenv('PORT');\n    if (empty($port)) {\n        $port = \"3000\";\n    }\n\n    echo 'starting server on port '. $port . PHP_EOL;\n    exec('php -S localhost:'. $port . ' -t public server.php');\n} else {\n    return routeRequest();\n}\n\nfunction routeRequest()\n{\n    $uri = $_SERVER['REQUEST_URI'];\n    if ($uri == '/') {\n        echo file_get_contents('./public/index.html');\n    } elseif (preg_match('/\\/api\\/comments(\\?.*)?/', $uri)) {\n        $comments = file_get_contents('comments.json');\n        if($_SERVER['REQUEST_METHOD'] === 'POST') {\n            $commentsDecoded = json_decode($comments, true);\n            $commentsDecoded[] = [\n                'id'      => round(microtime(true) * 1000),\n                'author'  => $_POST['author'],\n                'text'    => $_POST['text']\n            ];\n\n            $comments = json_encode($commentsDecoded, JSON_PRETTY_PRINT);\n            file_put_contents('comments.json', $comments);\n        }\n        header('Content-Type: application/json');\n        header('Cache-Control: no-cache');\n        header('Access-Control-Allow-Origin: *');\n        echo $comments;\n    } else {\n        return false;\n    }\n}\n"
        },
        {
          "name": "server.pl",
          "type": "blob",
          "size": 1.404296875,
          "content": "# This file provided by Facebook is for non-commercial testing and evaluation\n# purposes only. Facebook reserves all rights not expressly granted.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nuse Time::HiRes qw(gettimeofday);\nuse Mojolicious::Lite;\nuse Mojo::JSON qw(encode_json decode_json);\n\napp->static->paths->[0] = './public';\n\nany '/' => sub { $_[0]->reply->static('index.html') };\n\nany [qw(GET POST)] => '/api/comments' => sub {\n  my $self = shift;\n  my $comments = decode_json (do { local(@ARGV,$/) = 'comments.json';<> });\n  $self->res->headers->cache_control('no-cache');\n  $self->res->headers->access_control_allow_origin('*');\n\n  if ($self->req->method eq 'POST')\n  {\n    push @$comments, {\n      id     => int(gettimeofday * 1000),\n      author => $self->param('author'),\n      text   => $self->param('text'),\n    };\n    open my $FILE, '>', 'comments.json';\n    print $FILE encode_json($comments);\n  }\n  $self->render(json => $comments);\n};\nmy $port = $ENV{PORT} || 3000;\napp->start('daemon', '-l', \"http://*:$port\");\n"
        },
        {
          "name": "server.py",
          "type": "blob",
          "size": 1.5361328125,
          "content": "# This file provided by Facebook is for non-commercial testing and evaluation\n# purposes only. Facebook reserves all rights not expressly granted.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport json\nimport os\nimport time\nfrom flask import Flask, Response, request\n\napp = Flask(__name__, static_url_path='', static_folder='public')\napp.add_url_rule('/', 'root', lambda: app.send_static_file('index.html'))\n\n\n@app.route('/api/comments', methods=['GET', 'POST'])\ndef comments_handler():\n    with open('comments.json', 'r') as f:\n        comments = json.loads(f.read())\n\n    if request.method == 'POST':\n        new_comment = request.form.to_dict()\n        new_comment['id'] = int(time.time() * 1000)\n        comments.append(new_comment)\n\n        with open('comments.json', 'w') as f:\n            f.write(json.dumps(comments, indent=4, separators=(',', ': ')))\n\n    return Response(\n        json.dumps(comments),\n        mimetype='application/json',\n        headers={\n            'Cache-Control': 'no-cache',\n            'Access-Control-Allow-Origin': '*'\n        }\n    )\n\n\nif __name__ == '__main__':\n    app.run(port=int(os.environ.get(\"PORT\", 3000)), debug=True)\n"
        },
        {
          "name": "server.rb",
          "type": "blob",
          "size": 1.623046875,
          "content": "# This file provided by Facebook is for non-commercial testing and evaluation\n# purposes only. Facebook reserves all rights not expressly granted.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nrequire 'webrick'\nrequire 'json'\n\n# default port to 3000 or overwrite with PORT variable by running\n# $ PORT=3001 ruby server.rb\nport = ENV['PORT'] ? ENV['PORT'].to_i : 3000\n\nputs \"Server started: http://localhost:#{port}/\"\n\nroot = File.expand_path './public'\nserver = WEBrick::HTTPServer.new Port: port, DocumentRoot: root\n\nserver.mount_proc '/api/comments' do |req, res|\n  comments = JSON.parse(File.read('./comments.json', encoding: 'UTF-8'))\n\n  if req.request_method == 'POST'\n    # Assume it's well formed\n    comment = { id: (Time.now.to_f * 1000).to_i }\n    req.query.each do |key, value|\n      comment[key] = value.force_encoding('UTF-8') unless key == 'id'\n    end\n    comments << comment\n    File.write(\n      './comments.json',\n      JSON.pretty_generate(comments, indent: '    '),\n      encoding: 'UTF-8'\n    )\n  end\n\n  # always return json\n  res['Content-Type'] = 'application/json'\n  res['Cache-Control'] = 'no-cache'\n  res['Access-Control-Allow-Origin'] = '*'\n  res.body = JSON.generate(comments)\nend\n\ntrap('INT') { server.shutdown }\n\nserver.start\n"
        }
      ]
    }
  ]
}