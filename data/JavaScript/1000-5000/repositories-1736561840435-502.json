{
  "metadata": {
    "timestamp": 1736561840435,
    "page": 502,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zeman/perfmap",
      "stars": 3790,
      "defaultBranch": "master",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.984375,
          "content": "# PerfMap: front-end performance heatmap\n\nA bookmarklet and [Chrome extension](https://chrome.google.com/webstore/detail/perfmap/hgpnhiajcdppfbogcpfdgcceepgkhdmk?hl=en&gl=GB) to create a front-end performance heatmap of resources loaded in the browser using the Resource Timing API. A browser with [support for the Resource Timing API](http://caniuse.com/#feat=resource-timing) is required.\n\n#### Bookmarklet\n\nJust add the bookmarklet below to your bookmarks bar.\n\n```javascript\njavascript:(function(){var el=document.createElement('script');el.src='https://zeman.github.io/perfmap/perfmap.js';document.body.appendChild(el);})();\n```\n\n#### Chrome Extension\n\nOr grab the [Chrome extension](https://chrome.google.com/webstore/detail/perfmap/hgpnhiajcdppfbogcpfdgcceepgkhdmk?hl=en&gl=GB) wrapped by [Umar Hansa](https://github.com/umaar)\n\n## Usage\n\nWait for a page to fully load and then click the bookmarklet or extension icon to overlay a performance heatmap.\n\nThe heatmap colours and the first ms value indicate at what point in the page load the image finished loading. It's a good indicator of user experience... \"It took 3450ms before the user saw this image.\" The second value in brackets is the time it took the browser to load that specific image.\n\nThe legend attached to the bottom of the page shows timings for the full page load and hovering over a coloured area on the heatmap will move the timeline indicator to show you when that image was fully loaded.\n\n## Example\n\n![Example Heatmap](http://zeman.github.io/perfmap/example.jpg)\n\n## Background\n\nConceived as part of a set of [data visualization experiments](http://lab.speedcurve.com) which re-imagined the front-end performance waterfall chart by Mark Zeman from [SpeedCurve](http://speedcurve.com) presented at [Velocity New York 2014.](http://speedcurve.com/blog/velocity-a-better-waterfall-chart/)\n\n## Works In\n\n- Chrome\n- Firefox - Can be enabled in Firefox by putting \"about:config\" in as a url and then setting \"dom.enable_resource_timing\" to true.\n\n## To Do\n\n- Deal with fixed position elements (calling all front-end ninjas, send me your thoughts on how best to do this)\n- Crawl iframe images\n- Hover state with more detail on the timings of an individual resource\n- User timing, pull out and highlight any elements with associated user timing events\n- Expand top nav to show full waterfall chart of all resources. Combine with Andy's [waterfall bookmarklet?](https://github.com/andydavies/waterfall)\n\n## Change Log\n\n- 2014-10-06 First push of rough proof of concept\n- 2014-10-07 Added background-image support\n- 2014-10-08 Added interactive legend with page level timing and timeline head on overlay hover\n- 2014-10-12 Ignore elements with visibility:hidden, check for viewport sized images and treat like a body image, design tweaks\n- 2014-10-17 Rolled in Umar's Chrome extension\n\n## Thanks\n\nBig thanks to [Steve Souders](http://www.stevesouders.com/) who was inspired enough to whip up the intial code structure while simultaneously participating at WebPerfDays NY. Clever cookie!\n"
        },
        {
          "name": "background.js",
          "type": "blob",
          "size": 0.275390625,
          "content": "chrome.browserAction.onClicked.addListener(function(activeTab) {\n    chrome.tabs.executeScript(null, {\n        code: \"javascript:(function(){var el=document.createElement('script');el.src='https://zeman.github.io/perfmap/perfmap.js';document.body.appendChild(el);})();\"\n    });\n});\n"
        },
        {
          "name": "example.jpg",
          "type": "blob",
          "size": 147.6318359375,
          "content": null
        },
        {
          "name": "logo-128.png",
          "type": "blob",
          "size": 0.150390625,
          "content": null
        },
        {
          "name": "logo-16.png",
          "type": "blob",
          "size": 0.1328125,
          "content": null
        },
        {
          "name": "logo-32.png",
          "type": "blob",
          "size": 0.2138671875,
          "content": null
        },
        {
          "name": "manifest.json",
          "type": "blob",
          "size": 0.4306640625,
          "content": "{\n  \"name\": \"Perfmap\",\n  \"description\": \"Heatmap of resources loaded in the browser using the Resource Timing API\",\n  \"version\": \"1.1\",\n  \"permissions\": [\n    \"tabs\", \"http://*/*\", \"https://*/*\"\n  ],\n  \"browser_action\": {\n      \"default_icon\": \"logo-16.png\"\n  },\n  \"background\": {\n      \"scripts\": [\"background.js\"]\n  },\n  \"icons\": {\n    \"16\": \"logo-16.png\",\n    \"32\": \"logo-32.png\",\n    \"128\": \"logo-128.png\"\n  },\n  \"manifest_version\": 2\n}\n"
        },
        {
          "name": "perfmap.js",
          "type": "blob",
          "size": 8.734375,
          "content": "var gZeroLeft = 0;\nvar gZeroTop = 0;\nvar gWinWidth = window.innerWidth || document.documentElement.clientWidth;\n\nfunction findImages() {\n    var aElems = document.getElementsByTagName('*');\n    var re = /url\\((\"?http.*\"?)\\)/ig;\n    for ( var i=0, len = aElems.length; i < len; i++ ) {\n        var elem = aElems[i];\n        var style = window.getComputedStyle(elem);\n        var url = elem.src || elem.href;\n        var hasImage = 0;\n        var fixed = 0;\n        var body = 0;\n        re.lastIndex = 0; // reset state of regex so we catch repeating spritesheet elements\n        if(elem.tagName == 'IMG') {\n            hasImage = 1;\n        }\n        if(style['backgroundImage']) {\n            var backgroundImage = style['backgroundImage'];\n            var matches = re.exec(style['backgroundImage']);\n            if (matches && matches.length > 1){\n                url = backgroundImage.substring(4);\n                url = url.substring(0, url.length - 1);\n                url = url.replace(/\"/, \"\");\n                url = url.replace(/\"/, \"\");\n                hasImage = 1;\n                if(elem.tagName == 'BODY'){\n                    body = 1;\n                }\n            }\n        }\n        if(style['visibility'] == \"hidden\") {\n            hasImage = 0;\n        }\n        if(hasImage == 1){\n            if ( url ) {\n                var entry = performance.getEntriesByName(url)[0];\n                if ( entry ) {\n                    var position = getPositionOfMarker(elem);\n                    var xy = getCumulativeOffset(elem, url);\n                    var wh = elem.getBoundingClientRect();\n                    var width = wh.width;\n                    var height = wh.height;\n                    if(width > 10){\n                        if(height > 10){\n                            placeMarker(xy, width, height, position, entry, body, url);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nfunction getPositionOfMarker(element) {\n    var parentElem = element.parentElement;\n    while (parentElem) {\n        var style = window.getComputedStyle(parentElem);\n        if (style[\"position\"] == \"fixed\") {\n            return \"fixed\";\n        }\n        parentElem = parentElem.parentElement;\n    }\n    return \"absolute\";\n}\n\nfunction placeMarker(xy, width, height, position, entry, body, url) {\n    var heat = entry.responseEnd / loaded;\n    // adjust size of fonts/padding based on width of overlay\n    if(width < 170){\n        var padding = 12;\n        var size = 12;\n    }else if(width > 400){\n        var padding = 13;\n        var size = 26;\n    }else{\n        var padding = 9;\n        var size = 18;\n    }\n    // check for overlay that matches viewport and assume it's like a background image on body\n    if(width == document.documentElement.clientWidth){\n        if(height >= document.documentElement.clientHeight){\n            body = 1;\n        }\n    }\n    // adjust opacity if it's the body element and position label top right\n    if(body == 1){\n        var opacity = 0.6;\n        var size = 18;\n        var align = \"right\";\n        var paddingTop = 10;\n        var bodyText = \"BODY \";\n    }else{\n        var opacity = 0.925;\n        var align = \"center\";\n        var paddingTop = (height/2)-padding;\n        var bodyText = \"\";\n    }\n    var marker = document.createElement(\"div\");\n    marker.className = \"perfmap\";\n    marker.setAttribute(\"data-ms\", parseInt(entry.responseEnd));\n    marker.setAttribute(\"data-body\", body);\n    marker.setAttribute(\"dir\", \"ltr\"); // Force LTR display even if injected on an RTL page\n    marker.style.cssText = \"position:\"+ position + \"; transition: 0.5s ease-in-out; box-sizing: border-box; color: #fff; padding-left:10px; padding-right:10px; line-height:14px; font-size: \" + size + \"px; font-weight:800; font-family:\\\"Helvetica Neue\\\",sans-serif; text-align:\" + align + \"; opacity: \" + opacity + \"; \" + heatmap(heat) + \" top: \" + xy.top + \"px; left: \" + xy.left + \"px; width: \" + width + \"px; height:\" + height + \"px; padding-top:\" + paddingTop + \"px; z-index: 4000;\";\n    if(width > 50){\n        if(height > 15 ){\n            marker.innerHTML = bodyText + parseInt(entry.responseEnd) + \"ms (\" + parseInt(entry.duration) + \"ms)\";\n        }\n    }\n    document.body.appendChild(marker);\n}\n\nfunction heatmap(heat) {\n    if ( heat < 0.16 ) {\n        return \"background: #1a9850;\"\n    }\n    else if ( heat < 0.32 ) {\n        return \"background: #66bd63;\"\n    }\n    else if ( heat < 0.48 ) {\n        return \"background: #a6d96a;\"\n    }\n    else if ( heat < 0.64 ) {\n        return \"background: #fdae61;\"\n    }\n    else if ( heat < 0.8 ) {\n        return \"background: #f46d43;\"\n    }else{\n\t    return \"background: #d73027;\"\n    }\n}\n\nfunction getCumulativeOffset(obj, url) {\n    var left, top;\n    left = top = 0;\n    if (obj.offsetParent) {\n        do {\n            left += obj.offsetLeft;\n            top  += obj.offsetTop;\n        } while (obj = obj.offsetParent);\n    }\n    if ( 0 == top ) {\n        left += gZeroLeft;\n        top += gZeroTop;\n    }\n    return {\n        left: left,\n        top: top,\n    };\n}\n\n// give visual feedback asap\nvar loading = document.createElement(\"div\");\nloading.id = \"perfmap-loading\";\nloading.innerHTML = \"Creating PerfMap\";\nloading.style.cssText = \"position:absolute; z-index:6000; left:40%; top:45%; background-color:#000; color:#fff; padding:20px 30px; font-family:\\\"Helvetica Neue\\\",sans-serif; font-size:24px; font-weight:800;border:2px solid white;\";\ndocument.body.appendChild(loading);\n\n// get full page load time to calculate heatmap max\nvar loaded = performance.timing.loadEventEnd - performance.timing.navigationStart;\n\n// backend\nvar backend = performance.timing.responseEnd - performance.timing.navigationStart;\nvar backendLeft = (backend / loaded)*100;\n\n// first paint in chrome from https://github.com/addyosmani/timing.js\nvar hasFirstPaint = 0;\nif (window.chrome && window.chrome.loadTimes) {\n\tvar paint = window.chrome.loadTimes().firstPaintTime * 1000;\n\tvar firstPaint = paint - (window.chrome.loadTimes().startLoadTime*1000);\n\tvar firstPaintLeft = (firstPaint / loaded)*100;\n\thasFirstPaint = 1;\n}\n\n// remove any exisiting \"perfmap\" divs on second click\nvar elements = document.getElementsByClassName(\"perfmap\");\nwhile(elements.length > 0){\n    elements[0].parentNode.removeChild(elements[0]);\n}\n\n// build bottom legend\nvar perfmap = document.createElement(\"div\");\nperfmap.id = \"perfmap\";\nvar legend = \"<div style='width:16.666666667%; height: 50px; float:left; background-color:#1a9850;'></div><div style='width:16.666666667%; height: 50px; float:left; background-color:#66bd63;'></div><div style='width:16.666666667%; height: 50px; float:left; background-color:#a6d96a;'></div><div style='width:16.666666667%; height: 50px; float:left; background-color:#fdae61;'></div><div style='width:16.666666667%; height: 50px; float:left; background-color:#f46d43;'></div><div style='width:16.666666667%; height: 50px; float:left; background-color:#d73027;'></div><div style='position:absolute; z-index:2; right:0px; padding-top:5px; padding-right:10px;height:100%;color:#fff;'>Fully Loaded \" + parseInt(loaded) + \"ms</div><div id='perfmap-timeline' style='position:absolute; z-index:4; left:-100px; border-left:2px solid white;height:100%;'></div>\";\nif(hasFirstPaint == 1){\n\tlegend += \"<div style='position:absolute; z-index:3; left:\" + firstPaintLeft + \"%; padding-top:5px; border-left:2px solid white;padding-left:5px;height:100%;color:#fff;'>First Paint \" + parseInt(firstPaint) + \"ms</div></div>\";\n}\nperfmap.style.cssText = \"position: fixed; width:100%; bottom:0; left:0; z-index:5000; height: 25px; color:#fff; font-family:\\\"Helvetica Neue\\\",sans-serif; font-size:14px; font-weight:800; line-height:14px;\";\nperfmap.innerHTML = legend;\ndocument.body.appendChild(perfmap);\n\n// build heatmap\nfindImages();\n\n// remove loading message\nloading.remove();\n\n// mouse events to move timeline around on hover\nvar elements = document.getElementsByClassName(\"perfmap\");\nvar timeline = document.getElementById('perfmap-timeline');\nfor ( var i=0, len = elements.length; i < len; i++ ) {\n\telements[i].onmouseover = function(){\n    \tvar timelineLeft = document.documentElement.clientWidth * (this.dataset.ms / loaded);\n    \tif(this.dataset.body != \"1\"){\n\t\t\tthis.style.opacity = 1;\n    \t}\n    \ttimeline.style.cssText = \"opacity:1; transition: 0.5s ease-in-out; transform: translate(\"+ parseInt(timelineLeft) + \"px,0); position:absolute; z-index:4; border-left:2px solid white; height:100%;\";\n    }\n    elements[i].onmouseout = function(){\t\t\n    \tvar timelineLeft = document.documentElement.clientWidth * (this.dataset.ms / loaded);\n    \tif(this.dataset.body != \"1\"){\n    \t\tthis.style.opacity = 0.925;\n    \t}\n    \ttimeline.style.cssText = \"opacity:0; transition: 0.5s ease-in-out; transform: translate(\"+ parseInt(timelineLeft) + \"px,0); position:absolute; z-index:4; border-left:2px solid white; height:100%;\";\n    }\n}\n"
        }
      ]
    }
  ]
}