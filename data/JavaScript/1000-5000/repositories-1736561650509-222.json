{
  "metadata": {
    "timestamp": 1736561650509,
    "page": 222,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OpenBMB/AgentVerse",
      "stars": 4357,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0185546875,
          "content": ".github\n.gitignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.16796875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\n**/dist/*\n!**/dist/assets\n!**/dist/index.html\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n.idea/\n.vscode\n.DS_Store\nfigs\nfrontend\n\ng_push.sh\nraw/\n!ui/src/**\nresults\ntmp/\ndata/toolbench\nlogs/\nci_smoke_test_output/\n.env"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.7890625,
          "content": "FROM python:3.10 as Builder\nRUN sed -i 's/deb.debian.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list.d/debian.sources && \\\n    sed -i 's/security.debian.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list.d/debian.sources\nRUN pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple && \\\n    pip3 install --upgrade pip  # enable PEP 660 support\nWORKDIR /app\n# install libGL.so.1\nRUN apt-get update && apt-get install libgl1 -y\n# install BMTools\nRUN git clone https://github.com/OpenBMB/BMTools.git --depth=1\nRUN cd BMTools && \\\n    pip install -r requirements.txt && \\\n    python setup.py develop\n# install AgentVerse\nWORKDIR /app/AgentVerse\nCOPY requirements*.txt ./\nRUN pip install -r requirements.txt\nRUN pip install -r requirements_local.txt\nCOPY . .\nRUN pip install -e .\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0625,
          "content": "include agentverse/tasks/*/*/*\ninclude agentverse/tasks/*/*/*/*\n"
        },
        {
          "name": "PULL_REQUEST_TEMPLATE.md",
          "type": "blob",
          "size": 0.7197265625,
          "content": "\n<!--\nFirst of all, thank you for your contribution! 😄\n-->\n\n\n### 🤔 What is the nature of this change? \n\n- [ ] New feature \n- [ ] Fix bug / bug \n- [ ] Style optimization \n- [ ] Code style optimization \n- [ ] Performance optimization \n- [ ] Build optimization \n- [ ] Website, documentation, demo improvements \n- [ ] Refactor code or style \n- [ ] Test related \n- [ ] Solved proposed issues \n- [ ] Other \n\n### 🔗 Related Issue \n\n(Describe the source of related requirements, such as the related issue discussion link. Example: close #123, close #456.)\n\n### 💡 Background or solution \n\n(The specific problem solved.)\n\n### 📝 Changelog \n\n(Describe changes from the user side, and list all potential break changes or other risks.)\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 32.3349609375,
          "content": "<h1 align=\"center\"> 🤖 AgentVerse 🪐 </h1>\n\n<!--\n<h3 align=\"center\">\n    <p>A Framework for Multi-LLM Environment Simulation</p>\n</h3>\n-->\n\n<p align=\"center\">\n    <a href=\"https://github.com/OpenBMB/AgentVerse/blob/main/LICENSE\">\n        <img alt=\"License: Apache2\" src=\"https://img.shields.io/badge/License-Apache_2.0-green.svg\">\n    </a>\n    <a href=\"https://www.python.org/downloads/release/python-3916/\">\n        <img alt=\"Python Version\" src=\"https://img.shields.io/badge/python-3.9+-blue.svg\">\n    </a>\n    <a href=\"https://github.com/OpenBMB/AgentVerse/actions/\">\n        <img alt=\"Build\" src=\"https://img.shields.io/github/actions/workflow/status/OpenBMB/AgentVerse/test.yml\">\n    </a>\n    <a href=\"https://github.com/psf/black\">\n        <img alt=\"Code Style: Black\" src=\"https://img.shields.io/badge/code%20style-black-black\">\n<!--     </a>\n    <a href=\"https://github.com/OpenBMB/AgentVerse/issues\">\n        <img alt=\"Contributions: Welcome\" src=\"https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat\">\n    </a> -->\n    <a href=\"https://huggingface.co/AgentVerse\">\n        <img alt=\"HuggingFace\" src=\"https://img.shields.io/badge/hugging_face-play-yellow\">\n    </a>\n    <a href=\"https://discord.gg/gDAXfjMw\">\n        <img alt=\"Discord\" src=\"https://img.shields.io/badge/AgentVerse-Discord-purple?style=flat\">\n    </a>\n    \n    \n</p>\n\n<p align=\"center\">\n<img src=\"./imgs/title.png\" width=\"512\">\n</p>\n\n<p align=\"center\">\n    【<a href=\"https://arxiv.org/abs/2308.10848\">Paper</a>】 \n</p>\n\n<p align=\"center\">\n    【English | <a href=\"README_zh.md\">Chinese</a>】 \n</p>\n\n**AgentVerse** is designed to facilitate the deployment of multiple LLM-based agents in various applications. AgentVerse primarily provides two frameworks: **task-solving** and **simulation**. \n\n- Task-solving: This framework assembles multiple agents as an automatic multi-agent system ([AgentVerse-Tasksolving](https://arxiv.org/pdf/2308.10848.pdf), [Multi-agent as system](https://arxiv.org/abs/2309.02427)) to collaboratively accomplish the corresponding tasks. \nApplications: software development system, consulting system, etc. \n\n<p align=\"center\">\n<img width=\"616\" alt=\"Screen Shot 2023-09-01 at 12 08 57 PM\" src=\"https://github.com/OpenBMB/AgentVerse/assets/11704492/6db1c907-b7fc-42f9-946c-89853a28f386\">\n</p>\n\n- Simulation: This framework allows users to set up custom environments to observe behaviors among, or interact with, multiple agents. ⚠️⚠️⚠️ We're refactoring the code. If you require a stable version that exclusively supports simulation framework, you can use [`release-0.1`](https://github.com/OpenBMB/AgentVerse/tree/release-0.1) branch. Applications: game, social behavior research of LLM-based agents, etc.\n\n<p align=\"center\">\n<img width=\"616\" alt=\"Screen Shot 2023-10-16 at 10 53 49 PM\" src=\"https://github.com/OpenBMB/AgentVerse/assets/11704492/4102d1e2-3fe7-4656-aa2c-a218ce1f2c95\">\n</p>\n\n\n---\n\n\n# 📰 What's New\n- [2024/3/17] AgentVerse was introduced in NVIDIA's blog - [Building Your First LLM Agent Application](https://developer.nvidia.com/blog/building-your-first-llm-agent-application/). \n\n- [2024/1/17] We're super excited to announce that our paper got accepted at ICLR 2024. More updates will be coming soon!\n  \n- [2023/10/17] We're super excited to share our open-source AI community hugging face: [`AgentVerse`](https://huggingface.co/spaces/AgentVerse/agentVerse). You are able to try out the two simulation applications, NLP Classroom and Prisoner's Dilemma,with your code of the openai API key and the openai organization. Have fun!\n\n- [2023/10/5] Re-factor our codebase to enable the deployment of both simulation and task-solving framework! We have placed the code for Minecraft example in the paper at the [`minecraft`](https://github.com/OpenBMB/AgentVerse/tree/minecraft) branch. Our tool-using example will soon be updated to the `main` branch. Stay tuned!\n\n- [2023/8/22] We're excited to share our paper [AgentVerse: Facilitating Multi-Agent Collaboration and Exploring Emergent Behaviors in Agents](https://arxiv.org/abs/2308.10848) that  illustrate the task-solving framework \nin detail of AgentVerse.\n\n- [2023/6/5] We are thrilled to present an array of [demos](#-simple-demo-video), including [NLP Classroom](#nlp-classroom), [Prisoner Dilemma](#prisoner-dilemma), [Software Design](#software-design), [Database Administrator](#database-administrator-dba), and a simple [H5 Pokemon Game](#pokemon) that enables the interaction with the characters in Pokemon! Try out these demos and have fun!\n- [2023/5/1] 🚀 [AgentVerse](https://github.com/OpenBMB/AgentVerse) is officially launched!\n\n\n\n\n# 🗓 Coming Soon\n- [x] Code release of our [paper](https://arxiv.org/abs/2308.10848)\n- [x] Add support for local LLM (LLaMA, Vicunna, etc.)\n- [ ] Add documentation\n- [ ] Support more sophisticated memory for conversation history\n\n\n<!--\n\n## 👾 Simple Demo Video\n\nWe demonstrate the following cases that are expertly crafted by AgentVerse.\n\n\n#### NLP Classroom\nIn the NLP class, the professor and students engage in interactive communication. When students have a question, they raise their hands and patiently wait for the professor to call on them. Only after being called on by the professor, can students speak and ask their questions.\n\nUse the following command to launch the NLP Classroom example:\n```bash\npython agentverse_command/main_simulation_gui.py --task simulation/nlp_classroom_9players\n```\n\nhttps://github.com/OpenBMB/AgentVerse/assets/11704492/6ea07850-595e-4a28-a82e-f863011353c2\n\n\n#### Prisoner Dilemma\nA prisoner's Dilemma is a thought experiment that challenges two completely rational agents to a dilemma: they can cooperate with their partner for mutual benefit or betray their partner (\"defect\") for individual reward.\n\nUse the following command to launch the Prisoner Dilemma example:\n```bash\npython agentverse_command/main_simulation_gui.py --task simulation/prisoner_dilemma\n```\n\nhttps://github.com/OpenBMB/AgentVerse/assets/11704492/017c46e5-c738-4fca-9352-b008e2d518bd\n\n\n#### Software Design\nIn the Software Design example, a code writer, a code tester and a code reviewer collaborate on the code generation problem. Given a problem, the code writer first composes the code implementation. The code tester runs the unit tests and provides the feedback. The code viewer then generates a review. After collecting the test feedback and review, the code writer iteratively refines the code.\n\nUse the following command to launch the Software Design example:\n```bash\npython agentverse_command/main_simulation_gui.py --task simulation/sde_team/sde_team_2players\n```\n\nhttps://github.com/OpenBMB/AgentVerse/assets/11704492/5058066a-abee-490d-8659-b4e54661626a\n\n\n#### [Database Administrator (DBA)](https://github.com/TsinghuaDatabaseGroup/DB-GPT)\n\nIn the database diagnosis scenario, the Chief DBA monitors the system anomalies (e.g., slow queries, locks, crash down). If detected, the domain experts are alerted to analyze root causes, share insights, and suggest optimization solutions together. The Chief DBA then provides a summarized report to the user.\n\n```bash\npython agentverse_command/main_simulation_gui.py --task simulation/db_diag\n```\n\nhttps://github.com/OpenBMB/AgentVerse/assets/11704492/c633419d-afbb-47d4-bb12-6bb512e7af3a\n\n#### [Text Evaluation (ChatEval)](https://github.com/chanchimin/ChatEval)\nIn the context of the text evaluation scenario, we recommend users explore the [ChatEval](https://github.com/chanchimin/ChatEval) repo. They've implemented a multi-agent referee team on AgentVerse to assess the quality of text generated by different models. When given two distinct pieces of text, roles within ChatEval can autonomously debate the nuances and disparities, drawing upon their assigned personas, and subsequently provide their judgments. Experiments indicate that their referee team, enriched with diverse roles specified in [config.yaml](#2-configuring-the-agents), aligns more closely with human evaluations. This demo is built upon the [Fastchat](https://github.com/lm-sys/FastChat) repo, and we'd like to express our appreciation for their foundational work.\n\n\nhttps://github.com/OpenBMB/AgentVerse/assets/75533759/58f33468-f15b-4bac-ae01-8d0780019f85\n\n#### Pokemon\n**Currently available only in [`release-0.1`](https://github.com/OpenBMB/AgentVerse/tree/release-0.1)**. In the game, agents can walk around the game world, and interact with one another. As a player, you take on the role of an agent and can engage with others at any time. There are 6 characters in the Pokémon environment who appeared in Pokemon Emerald: [May](https://bulbapedia.bulbagarden.net/wiki/May_(game)), [Professor Birch](https://bulbapedia.bulbagarden.net/wiki/Professor_Birch), [Steven Stone](https://bulbapedia.bulbagarden.net/wiki/Steven_Stone), [Maxie](https://bulbapedia.bulbagarden.net/wiki/Maxie), [Archie](https://bulbapedia.bulbagarden.net/wiki/Archie) and [Joseph](https://bulbapedia.bulbagarden.net/wiki/Mr._Stone). \n\nTo launch the Pokemon game, first launch a local server with the following command:\n```bash\nuvicorn pokemon_server:app --reload --port 10002\n```\nThen open another terminal in the project's root path and run the following command:\n```bash\ncd ui\n# If you do not have npm installed, you need to install it before running the following commands \n# https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\n# We have tested on npm@9.6.4, node@20.0.0\nnpm install\nnpm run watch\n```\nWait for the compilation to complete, and have fun! (WASD for moving around, and SPACE for launching a conversation.)\n\nhttps://github.com/OpenBMB/AgentVerse/assets/11704492/4d07da68-f942-4205-b558-f155e95782e7\n\n-->\n\n<!--\n\n## Contents\n\n- [✨ Features](#-features)\n- [📰 What's New](#-whats-new)\n- [🌟 Join Us!](#-join-us)\n  - [How Can You Contribute?](#how-can-you-contribute)\n- [🗓 Coming Soon](#-coming-soon)\n- [👾 Simple Demo Video](#-simple-demo-video)\n    - [NLP Classroom](#nlp-classroom)\n    - [Prisoner Dilemma](#prisoner-dilemma)\n    - [Software Design](#software-design)\n    - [Database Administrator (DBA)](#database-administrator-dba)\n    - [Text Evaluation (ChatEval)](#text-evaluation-chateval)\n    - [Pokemon](#pokemon)\n- [Contents](#contents)\n- [🚀 Getting Started](#-getting-started)\n  - [Installation](#installation)\n  - [Simulation Example](#simulation)\n  - [Task-Solving Example](#task-solving-cli-example)\n- [💡 Philosophy](#-philosophy)\n  - [Environment](#environment)\n  - [Agent](#agent)\n- [✍️ Customize Your Own Environment](#️-customize-your-own-environment)\n  - [A Simple Example: Building a Classroom Environment](#a-simple-example-building-a-classroom-environment)\n      - [1. Creating a Task Directory and Configuring the Environment](#1-creating-a-task-directory-and-configuring-the-environment)\n      - [2. Configuring the Agents](#2-configuring-the-agents)\n      - [3. Writing an Output Parser](#3-writing-an-output-parser)\n  - [Customization Guide for More Complex Environments](#customization-guide-for-more-complex-environments)\n- [🔎 Examples](#-examples)\n- [Star History](#star-history)\n- [Citation](#citation)\n- [Contact](#contact)\n\n-->\n\n# Contents\n- [📰 What's New](#-whats-new)\n- [🗓 Coming Soon](#-coming-soon)\n- [Contents](#contents)\n- [🚀 Getting Started](#-getting-started)\n  - [Installation](#installation)\n  - [Environment Variables](#environment-variables)\n  - [Simulation](#simulation)\n    - [Framework Required Modules](#framework-required-modules)\n    - [CLI Example](#cli-example)\n    - [GUI Example](#gui-example)\n  - [Task-Solving](#task-solving)\n    - [Framework Required Modules](#framework-required-modules-1)\n    - [CLI Example](#cli-example-1)\n  - [Local Model Support](#local-model-support)\n  - [vLLM Support](#vllm-support)\n  - [FSChat Support](#fschat-support)\n    - [1. Install the Additional Dependencies](#1-install-the-additional-dependencies)\n    - [2. Launch the Local Server](#2-launch-the-local-server)\n    - [3. Modify the Config File](#3-modify-the-config-file)\n- [AgentVerse Showcases](#agentverse-showcases)\n  - [Simulation Showcases](#simulation-showcases)\n  - [Task-Solving Showcases](#task-solving-showcases)\n- [🌟 Join Us!](#-join-us)\n  - [Leaders](#leaders)\n  - [Contributors](#contributors)\n  - [How Can You Contribute?](#how-can-you-contribute)\n  - [Social Media and Community](#social-media-and-community)\n- [Star History](#star-history)\n  - [Citation](#citation)\n- [Contact](#contact)\n\n\n\n\n# 🚀 Getting Started\n\n## Installation\n\n\n**Manually Install (Recommended!)**\n\n**Make sure you have Python >= 3.9**\n```bash\ngit clone https://github.com/OpenBMB/AgentVerse.git --depth 1\ncd AgentVerse\npip install -e .\n```\n\nIf you want to use AgentVerse with local models such as LLaMA, you need to additionally install some other dependencies:\n```bash\npip install -r requirements_local.txt\n```\n\n**Install with pip**\n\nOr you can install through pip\n```bash\npip install -U agentverse\n```\n\n## Environment Variables\nYou need to export your OpenAI API key as follows：\n```bash\n# Export your OpenAI API key\nexport OPENAI_API_KEY=\"your_api_key_here\"\n```\n\nIf you want use Azure OpenAI services, please export your Azure OpenAI key and OpenAI API base as follows：\n```bash\nexport AZURE_OPENAI_API_KEY=\"your_api_key_here\"\nexport AZURE_OPENAI_API_BASE=\"your_api_base_here\"\n```\n\n## Simulation\n\n### Framework Required Modules \n```\n- agentverse \n  - agents\n    - simulation_agent\n  - environments\n    - simulation_env\n```\n\n### CLI Example\n\nYou can create a multi-agent environments provided by us. Using the classroom scenario as an example. In this scenario, there are nine agents, one playing the role of a professor and the other eight as students.\n\n```shell\nagentverse-simulation --task simulation/nlp_classroom_9players\n```\n\n### GUI Example\n\nWe also provide a local website demo for this environment. You can launch it with\n\n```shell\nagentverse-simulation-gui --task simulation/nlp_classroom_9players\n```\nAfter successfully launching the local server, you can visit [http://127.0.0.1:7860/](http://127.0.0.1:7860/) to view the classroom environment.\n\nIf you want to run the simulation cases with tools (e.g., simulation/nlp_classroom_3players_withtool), you need to install BMTools as follows:\n```bash\ngit clone git+https://github.com/OpenBMB/BMTools.git\ncd BMTools\npip install -r requirements.txt\npython setup.py develop\n```\nThis is optional. If you do not install BMTools, the simulation cases without tools can still run normally.\n\n## Task-Solving \n\n\n### Framework Required Modules \n```\n- agentverse \n  - agents\n    - simulation_env\n  - environments\n    - tasksolving_env\n```\n\n### CLI Example\n\nTo run the experiments with the task-solving environment proposed in our [paper](https://arxiv.org/abs/2308.10848), you can use the following command:\n\nTo run AgentVerse on a benchmark dataset, you can try\n```shell\n# Run the Humaneval benchmark using gpt-3.5-turbo (config file `agentverse/tasks/tasksolving/humaneval/gpt-3.5/config.yaml`)\nagentverse-benchmark --task tasksolving/humaneval/gpt-3.5 --dataset_path data/humaneval/test.jsonl --overwrite\n```\n\nTo run AgentVerse on a specific problem, you can try\n```shell\n# Run a single query (config file `agentverse/tasks/tasksolving/brainstorming/gpt-3.5/config.yaml`). The task is specified in the config file.\nagentverse-tasksolving --task tasksolving/brainstorming\n```\n\nTo run the tool using cases presented in our paper, i.e., multi-agent using tools such as web browser, Jupyter notebook, bing search, etc., you can first build ToolsServer provided by [XAgent](https://github.com/OpenBMB/XAgent). You can follow their [instruction](https://github.com/OpenBMB/XAgent#%EF%B8%8F-build-and-setup-toolserver) to build and run the ToolServer.\n\nAfter building and launching the ToolServer, you can use the following command to run the task-solving cases with tools:\n```shell\nagentverse-tasksolving --task tasksolving/tool_using/24point\n```\nWe have provided more tasks in `agentverse/tasks/tasksolving/tool_using/` that show how multi-agent can use tools to solve problems.\n\nAlso, you can take a look at `agentverse/tasks/tasksolving` for more experiments we have done in our paper.\n\n## Local Model Support\n## vLLM Support\nIf you want to use vLLM, follow the guide [here](https://docs.vllm.ai/en/latest/getting_started/quickstart.html) to install and setup the vLLM server which is used to handle larger inference workloads. Create the following environment variables to connect to the vLLM server:\n```bash\nexport VLLM_API_KEY=\"your_api_key_here\"\nexport VLLM_API_BASE=\"http://your_vllm_url_here\"\n```\n\nThen modify the `model` in the task config file so that it matches the model name in the vLLM server. For example:\n```yaml\nmodel_type: vllm\nmodel: llama-2-7b-chat-hf\n```\n\n## FSChat Support\nThis section provides a step-by-step guide to integrate FSChat into AgentVerse. FSChat is a framework that supports local models such as LLaMA, Vicunna, etc. running on your local machine.\n### 1. Install the Additional Dependencies\nIf you want to use local models such as LLaMA, you need to additionally install some other dependencies:\n```bash\npip install -r requirements_local.txt\n```\n\n### 2. Launch the Local Server\nThen modify the `MODEL_PATH` and `MODEL_NAME` according to your need to launch the local server with the following command:\n```bash\nbash scripts/run_local_model_server.sh\n```\nThe script will launch a service for Llama 7B chat model.\nThe `MODEL_NAME` in AgentVerse currently supports several models including `llama-2-7b-chat-hf`, `llama-2-13b-chat-hf`, `llama-2-70b-chat-hf`, `vicuna-7b-v1.5`, and `vicuna-13b-v1.5`. If you wish to integrate additional models that are [compatible with FastChat](https://github.com/lm-sys/FastChat/blob/main/docs/model_support.md), you need to:\n1. Add the new `MODEL_NAME` into the `LOCAL_LLMS` within `agentverse/llms/__init__.py`. Furthermore, establish\n2. Add the mapping from the new `MODEL_NAME` to its corresponding Huggingface identifier in the `LOCAL_LLMS_MAPPING` within the `agentverse/llms/__init__.py` file.\n\n### 3. Modify the Config File\nIn your config file, set the `llm_type` to `local` and `model` to the `MODEL_NAME`. For example\n```yaml\nllm:\n  llm_type: local\n  model: llama-2-7b-chat-hf\n  ...\n```\n\nYou can refer to `agentverse/tasks/tasksolving/commongen/llama-2-7b-chat-hf/config.yaml` for a more detailed example.\n\n# AgentVerse Showcases\n\n## Simulation Showcases\nRefer to [simulation showcases](README_simulation_cases.md)\n\n## Task-Solving Showcases\nRefer to [tasksolving showcases](README_tasksolving_cases.md)\n\n\n\n<!--\n## 💡 Philosophy\n\n### Environment\n\nAt the core of our framework is the environment, which plays a crucial role in enabling researchers to study the behavior of agents under different conditions. We believe that the environment should be flexible and extensible, allowing researchers to easily customize it to fit their needs. To achieve this, we have abstracted the environment into five rule components, and implementing different environments is actually implementing different rules:\n\n- **Describer**: This component provides a description of the environment at each turn for each agent. You can customize the describer to define the specific requirements of their environment, such as the agents with whom an agent can interact.\n- **Order**: This component defines the order in which agents take actions within the environment. You can customize the order to reflect the desired interaction between agents. We provide several basic order options, including `random`, `sequential`, and `concurrent` (in which all agents take an action in each turn).\n- **Selector**: This component selects the valid messages generated by agents. Sometimes agents may generate invalid responses, and the selector is used to filter out unexpected results.\n- **Updater**: This component updates the memory of each agent. In certain cases, the response generated by one agent should not be seen by all agents (e.g., if agents are in different rooms). For each response, the updater updates only the agents who can see it.\n- **Visibility**: This component maintains the list of agents that each agent can see throughout the environment's changes. For example, when an agent moves from one room to another, the list of visible agents of each agent should be updated by `visibility`.\n\nBy abstracting the environment into these five components, we have created a highly flexible and extensible framework that enables researchers to easily build and customize their own multi-agent environments.\n\n### Agent\n\nAnother fundamental component is the agent. Currently we provide two types of agents: **ConversationAgent** and **ToolAgent**. You can also customize your own agent by inheriting BaseAgent class (tutorial coming soon).\n\n-->\n\n\n\n\n\n<!--\n\n## ✍️ Customize Your Own Environment\n\nWe have provided several examples in the `agentverse/tasks` directory. To customize your environment, you should\n\n1. Create a task directory in `agentverse/tasks` \n2. Write the configuration file\n3. Write the output parser that parses the response of your agents.\n4. Add your parser in `agentverse/tasks/__init__.py`\n\nWe will use a simple example in `agentverse/tasks/nlp_classroom_3players` to illustrate the procedure.\n\n### A Simple Example: Building a Classroom Environment\n\nTo illustrate how to customize your environment, we'll use a simple example of building a classroom environment where one agent is the professor, one is the student, and one is the teaching assistant.\n\n##### 1. Creating a Task Directory and Configuring the Environment\n\nFirst, we need to create a task directory and write our configuration file for the environment. In the `agentverse/tasks` directory, create a new directory called `nlp_classroom_3players`. Inside this directory, create a `config.yaml` file and write the following configuration:\n\n```yaml\n# config.yaml\nenvironment:\n  env_type: basic\t\t\t\t# Use the basic environment provided in AgentVerse\n  max_turns: 10\t\t\t\t\t# Specify the maximum number of dialogue turns\n  rule:\n    order:\n      type: sequential\t# Use the sequential order\n    visibility:\n      type: all\t\t\t\t\t# Each message can be seen by all agents\n    selector:\n      type: basic\t\t\t\t# Basic selector (do not select)\n    updater:\n      type: basic\t\t\t\t# Basic updater (update the message to all agents)\n    describer:\n      type: basic\t\t\t\t# Basic describer (no description)\n```\n\nThis configuration specifies that we will use the basic environment provided in AgentVerse, with a maximum of 10 dialogue turns. We'll use the sequential order, with all messages visible to all agents. We won't be using any selectors, our updater will update the messages to all the agents and our describer will provide no description.\n\n##### 2. Configuring the Agents\n\nNext, we'll configure the agents. In the `config.yaml` file, we'll add the configuration for each agent. Here's an example configuration for the professor:\n\n```yaml\n# config.yaml\nagents:\n  -\n    agent_type: conversation\n    name: Professor Micheal\t\t# Name of the agent\n    role_description: You are Prof. Micheal, ...\t# Description of the agent\n    memory: \n      memory_type: chat_history\t\t# Will store all the chat history\n    prompt_template: *professor_prompt\n    llm:\n      llm_type: text-davinci-003    # Will use OpenAICompletion LLM\n      model: text-davinci-003       # The arguments passed to the api call\n      temperature: 0.7\n      max_tokens: 250\n```\n\nIn this example, we'll use the `conversation` agent type. We've given the agent a name and a description, and we'll store the chat history in memory. We've also provided a prompt template with placeholders marked as ${placeholder}. These will be instantiated by the `_fill_prompt_template` method of the agent.\n\n##### 3. Writing an Output Parser\n\nThe next step is to write a simple parser for your agent's response. Because you may have specified the output format in your prompt template, you need to provide a corresponding parser. In this example, we inform the model to output in the following format in our prompt template\n\n```\nAction: Speak\nAction Input: (the content)\n```\n\nWe'll write a parser to extract the content from the agent's response. Refer to the code for more details. We've decorated our parser function with `@output_parser_registry.register('classroom_parser')` to register it with our framework. Finally, we import our parser in `agentverse/tasks/__init__.py`.\n\nWith these steps, we've successfully built a simple classroom environment and customized it for our needs.\n\n### Customization Guide for More Complex Environments\n\nWhile we provide a basic framework for building environments with our five rule components, more complex environments may require further customization. A detailed documentation and tutorial is coming soon. Here we briefly introduce some steps you can take to customize your environment:\n\n1. **Customize the five rule components**. Each rule component has an interface, allowing you to customize its behavior to suit your specific needs. It's important to note that these components are not necessarily independent and can interact through the `rule_params` dictionary in the environment. You can create your own rule components and integrate them with the existing ones to build more complex interactions between agents.\n2. **Customize the environment itself**. Our `basic` environment provides a default execution order for the five rule components that is suitable for most cases, but you can inherit the `BaseEnvironment` class and write your own `run` method to implement a more sophisticated execution order.\n3. **Customize the agent**. Depending on your specific use case, you may also need to inherit the `BaseAgent` class. For example, you may want to use your local LLM as your agents or create agents with specialized knowledge or skills.\n\n-->\n\n\n<!--\n\n## 🔎 Examples\n\nCurrently, we offer some simple examples in the `agentverse/tasks` directory, each demonstrating different possibilities of our framework. While the performance of these examples may not be optimal due to limited prompt engineering, they are intended to showcase the capabilities of our framework, such as allowing the use of tools.\n\nHere's a brief overview of each example:\n\n1. `nlp_classroom_3players`: This example illustrates a simple case in which agents will speak in sequential order. \n2. `nlp_classroom_9players`: This is an NLP class example. Here, students can raise their hand when they have a question, and the professor can call on the students to let them ask. Students are only allowed to speak after they are called on.\n3. `nlp_classroom_9players_group`: This example showcases group discussions. The professor may initiate a group discussion when needed, and students can exclusively interact with fellow students within the same group during the discussion.\n4. `nlp_classroom_3players_withtool`: Students in this classroom can use Bing search API when listening to the class.\n5. `math_problem_2players_tools`: A simple example demonstrating how two agents can use the WolframAlpha API to play an arithmetic game.\n6. `prisoner_dilema`: The Prisoner's Dilemma is a thought experiment involving two rational agents facing a choice between cooperating for mutual benefit or betraying their partner for individual gain.\n7. `db_diag`: The Chief DBA monitors (agents) the database system for anomalies and alerts memory and CPU agents if any are detected. They (agents) analyze root causes and suggest optimization solutions. The Chief DBA (agent) provides a diagnosis summary to the user, who can give instructions or evaluate the proposed solutions' effectiveness.\n8. `sde_team`: In the SDE team, code writer, code tester and code reviewer collaborate on the code generation problem. \n9. `pokemon`:  This example intimates Pokemon game.\n-->\n\n\n# 🌟 Join Us!\nAgentVerse is on a mission to revolutionize the multi-agent environment for large language models, and we're eagerly looking for passionate collaborators to join us on this exciting journey.\n\n## Leaders\n<a href=\"https://github.com/chenweize1998\"><img src=\"https://avatars.githubusercontent.com/u/32613237?v=4\" alt=\"Leader\" style=\"width:5%; border-radius: 50%;\"/></a>\n<a href=\"https://github.com/yushengsu-thu\"><img src=\"https://avatars.githubusercontent.com/u/11704492?v=4\" alt=\"Leader\" style=\"width:5%; border-radius: 50%;\"/></a>\n\n## Contributors\n<a href=\"https://github.com/chanchimin\"><img src=\"https://avatars.githubusercontent.com/u/75533759?v=4\" alt=\"Contributor\" style=\"width:5%; border-radius: 50%;\"/></a>\n<a href=\"https://github.com/libowen2121\"><img src=\"https://avatars.githubusercontent.com/u/19970308?v=4\" alt=\"Contributor\" style=\"width:5%; border-radius: 50%;\"/></a>\n<a href=\"https://github.com/Xial-kotori\"><img src=\"https://avatars.githubusercontent.com/u/53430452?v=4\" alt=\"Contributor\" style=\"width:5%; border-radius: 50%;\"/></a>\n<a href=\"https://github.com/Dr-Left\"><img src=\"https://avatars.githubusercontent.com/u/39025643?v=4\" alt=\"Contributor\" style=\"width:5%; border-radius: 50%;\"/></a>\n<a href=\"https://github.com/minleminzui\"><img src=\"https://avatars.githubusercontent.com/u/54172054?v=4\" alt=\"Contributor\" style=\"width:5%; border-radius: 50%;\"/></a>\n<a href=\"https://github.com/Tsuruko04\"><img src=\"https://avatars.githubusercontent.com/u/129145574?v=4\" alt=\"Contributor\" style=\"width:5%; border-radius: 50%;\"/></a>\n<a href=\"https://github.com/kierangilliam\"><img src=\"https://avatars.githubusercontent.com/u/18583882?v=4\" alt=\"Contributor\" style=\"width:5%; border-radius: 50%;\"/></a>\n<a href=\"https://github.com/zhouxh19\"><img src=\"https://avatars.githubusercontent.com/u/17394639?v=4\" alt=\"Contributor\" style=\"width:5%; border-radius: 50%;\"/></a>\n<a href=\"https://github.com/tzw2698\"><img src=\"https://avatars.githubusercontent.com/u/68865752?v=4\" alt=\"Contributor\" style=\"width:5%; border-radius: 50%;\"/></a>\n<a href=\"https://github.com/JetSquirrel\"><img src=\"https://avatars.githubusercontent.com/u/20291255?v=4\" alt=\"Contributor\" style=\"width:5%; border-radius: 50%;\"/></a>\n<a href=\"https://github.com/Muiruriscode\"><img src=\"https://avatars.githubusercontent.com/u/85177347?v=4\" alt=\"Contributor\" style=\"width:5%; border-radius: 50%;\"/></a>\n<a href=\"https://github.com/eltociear\"><img src=\"https://avatars.githubusercontent.com/u/22633385?v=4\" alt=\"Contributor\" style=\"width:5%; border-radius: 50%;\"/></a>\n\n\n## How Can You Contribute?\n- **Issue and Pull-Request**: If you encounter any problems when use AgentVerse, you can propose the issue in English. Beisdes, you can also autonomously ask us to assign issue to you and send the PR (Please follow the [PULL_REQUEST_TEMPLATE](https://github.com/OpenBMB/AgentVerse/blob/main/PULL_REQUEST_TEMPLATE.md)) after you solve it. \n  \n- **Code Development**: If you're an engineer, help us refine, optimize, and expand the current framework. We're always looking for talented developers to enhance our existing features and develop new modules.\n\n- **Documentation and Tutorials**: If you have a knack for writing, help us improve our documentation, create tutorials, or write blog posts to make AgentVerse more accessible to the broader community.\n\n- **Application Exploration**: If you're intrigued by multi-agent applications and are eager to experiment using AgentVerse, we'd be thrilled to support your journey and see what you create!\n\n- **Feedback and Suggestions**: Use AgentVerse and provide us with feedback. Your insights can lead to potential improvements and ensure that our framework remains top-notch.\n\nAlso, if you're passionate about advancing the frontiers of multi-agent applications, become core AgentVerse team members, or are eager to dive deeper into agent research. Please reach out [AgentVerse Team](mailto:agentverse2@gmail.com?subject=[GitHub]%AgentVerse%20Project), and CC to [Weize Chen](mailto:chenweize1998@gmail.com?subject=[GitHub]%AgentVerse%20Project) and [Yusheng Su](mailto:yushengsu.thu@gmail.com?subject=[GitHub]%AgentVerse%20Project). We're keen to welcome motivated individuals like you to our team!\n\n\n## Social Media and Community\n\n- Twitter: https://twitter.com/Agentverse71134\n\n- Discord: https://discord.gg/gDAXfjMw.\n\n- Hugging Face: https://huggingface.co/spaces/AgentVerse/agentVerse.\n\n# Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=OpenBMB/AgentVerse&type=Date)](https://star-history.com/#OpenBMB/AgentVerse&Date)\n\n\n## Citation\nIf you find this repo helpful, feel free to cite us.\n```\n@article{chen2023agentverse,\n  title={Agentverse: Facilitating multi-agent collaboration and exploring emergent behaviors in agents},\n  author={Chen, Weize and Su, Yusheng and Zuo, Jingwei and Yang, Cheng and Yuan, Chenfei and Qian, Chen and Chan, Chi-Min and Qin, Yujia and Lu, Yaxi and Xie, Ruobing and others},\n  journal={arXiv preprint arXiv:2308.10848},\n  year={2023}\n}\n```\n\n# Contact\n\nAgentVerse Team: agentverse2@gmail.com\n\nProject leaders:\n\n- Weize Chen: chenweize1998@gmail.com\n\n- [Yusheng Su](https://yushengsu-thu.github.io/): yushengsu.thu@gmail.com\n\n"
        },
        {
          "name": "README_simulation_cases.md",
          "type": "blob",
          "size": 4.70703125,
          "content": "\n## 👾 Simple Demo Video\n\nWe demonstrate the following cases that are expertly crafted by AgentVerse.\n\n\n#### NLP Classroom\nIn the NLP class, the professor and students engage in interactive communication. When students have a question, they raise their hands and patiently wait for the professor to call on them. Only after being called on by the professor, can students speak and ask their questions.\n\nUse the following command to launch the NLP Classroom example:\n```bash\npython agentverse_command/main_simulation_gui.py --task simulation/nlp_classroom_9players\n```\n\nhttps://github.com/OpenBMB/AgentVerse/assets/11704492/6ea07850-595e-4a28-a82e-f863011353c2\n\n\n#### Prisoner Dilemma\nA prisoner's Dilemma is a thought experiment that challenges two completely rational agents to a dilemma: they can cooperate with their partner for mutual benefit or betray their partner (\"defect\") for individual reward.\n\nUse the following command to launch the Prisoner Dilemma example:\n```bash\npython agentverse_command/main_simulation_gui.py --task simulation/prisoner_dilemma\n```\n\nhttps://github.com/OpenBMB/AgentVerse/assets/11704492/017c46e5-c738-4fca-9352-b008e2d518bd\n\n\n#### Software Design\nIn the Software Design example, a code writer, a code tester and a code reviewer collaborate on the code generation problem. Given a problem, the code writer first composes the code implementation. The code tester runs the unit tests and provides the feedback. The code viewer then generates a review. After collecting the test feedback and review, the code writer iteratively refines the code.\n\nUse the following command to launch the Software Design example:\n```bash\npython agentverse_command/main_simulation_gui.py --task simulation/sde_team/sde_team_2players\n```\n\nhttps://github.com/OpenBMB/AgentVerse/assets/11704492/5058066a-abee-490d-8659-b4e54661626a\n\n\n#### [Database Administrator (DBA)](https://github.com/TsinghuaDatabaseGroup/DB-GPT)\n\nIn the database diagnosis scenario, the Chief DBA monitors the system anomalies (e.g., slow queries, locks, crash down). If detected, the domain experts are alerted to analyze root causes, share insights, and suggest optimization solutions together. The Chief DBA then provides a summarized report to the user.\n\n```bash\npython agentverse_command/main_simulation_gui.py --task simulation/db_diag\n```\n\nhttps://github.com/OpenBMB/AgentVerse/assets/11704492/c633419d-afbb-47d4-bb12-6bb512e7af3a\n\n#### [Text Evaluation (ChatEval)](https://github.com/chanchimin/ChatEval)\nIn the context of the text evaluation scenario, we recommend users explore the [ChatEval](https://github.com/chanchimin/ChatEval) repo. They've implemented a multi-agent referee team on AgentVerse to assess the quality of text generated by different models. When given two distinct pieces of text, roles within ChatEval can autonomously debate the nuances and disparities, drawing upon their assigned personas, and subsequently provide their judgments. Experiments indicate that their referee team, enriched with diverse roles specified in [config.yaml](#2-configuring-the-agents), aligns more closely with human evaluations. This demo is built upon the [Fastchat](https://github.com/lm-sys/FastChat) repo, and we'd like to express our appreciation for their foundational work.\n\n\nhttps://github.com/OpenBMB/AgentVerse/assets/75533759/58f33468-f15b-4bac-ae01-8d0780019f85\n\n#### Pokemon\n**Currently available only in [`release-0.1`](https://github.com/OpenBMB/AgentVerse/tree/release-0.1)**. In the game, agents can walk around the game world, and interact with one another. As a player, you take on the role of an agent and can engage with others at any time. There are 6 characters in the Pokémon environment who appeared in Pokemon Emerald: [May](https://bulbapedia.bulbagarden.net/wiki/May_(game)), [Professor Birch](https://bulbapedia.bulbagarden.net/wiki/Professor_Birch), [Steven Stone](https://bulbapedia.bulbagarden.net/wiki/Steven_Stone), [Maxie](https://bulbapedia.bulbagarden.net/wiki/Maxie), [Archie](https://bulbapedia.bulbagarden.net/wiki/Archie) and [Joseph](https://bulbapedia.bulbagarden.net/wiki/Mr._Stone). \n\nTo launch the Pokemon game, first launch a local server with the following command:\n```bash\nuvicorn pokemon_server:app --reload --port 10002\n```\nThen open another terminal in the project's root path and run the following command:\n```bash\ncd ui\n# If you do not have npm installed, you need to install it before running the following commands \n# https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\n# We have tested on npm@9.6.4, node@20.0.0\nnpm install\nnpm run watch\n```\nWait for the compilation to complete, and have fun! (WASD for moving around, and SPACE for launching a conversation.)\n\nhttps://github.com/OpenBMB/AgentVerse/assets/11704492/4d07da68-f942-4205-b558-f155e95782e7\n\n"
        },
        {
          "name": "README_tasksolving_cases.md",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "README_zh.md",
          "type": "blob",
          "size": 21.064453125,
          "content": "<h1 align=\"center\"> 🤖 AgentVerse 🪐 </h1>\n\n<h3 align=\"center\">\n    <p>一个用于搭建多智能体交互平台的框架</p>\n</h3>\n<p align=\"center\">\n    <a href=\"https://github.com/OpenBMB/AgentVerse/blob/main/LICENSE\">\n        <img alt=\"License: Apache2\" src=\"https://img.shields.io/badge/License-Apache_2.0-green.svg\">\n    </a>\n    <a href=\"https://www.python.org/downloads/release/python-3916/\">\n        <img alt=\"Documentation\" src=\"https://img.shields.io/badge/python-3.9+-blue.svg\">\n    </a>\n    <a href=\"https://huggingface.co/spaces/AgentVerse/agentVerse\">\n        <img alt=\"Hugging Face\" src=\"https://img.shields.io/badge/hugging_face-play-yellow\">\n    </a>\n</p>\n\n<p align=\"center\">\n<img src=\"./imgs/title.png\" width=\"512\">\n</p>\n\n<p align=\"center\">\n    【<a href=\"README.md\">English </a> | Chinese】\n</p>\n\n**AgentVerse** 提供了一个多功能的框架，简化了为大型语言模型（LLMs）创建自定义多智能体环境的过程。旨在快速、低成本的开发和定制，我们的框架赋能研究人员专注于他们的研究，而不被实现细节所困扰。\n\n---\n\n## ✨ 特点\n\n- 🥳 **高效的环境构建:** 我们的框架提供了一系列基础构建模块，轻松创建多智能体环境。只需在配置文件中写入几行，你就可以轻松建立如LLMs的聊天室这样的基础环境。这个过程包括为LLMs定义环境的设置和提示，使像你这样的研究者能够专注于实验和分析。\n\n- ⚙️ **可定制组件**: AgentVerse通过将多智能体环境分为五个功能模块并定义其各自的接口来简化它。对于不能直接使用AgentVerse提供的基本模块构建的复杂环境，你可以定制这五个功能模块中的一个或多个接口，根据你的要求高效地创建自己的多智能体环境。\n\n- 🛠 **工具(插件)利用**: AgentVerse支持多智能体环境的工具。目前，AgentVerse支持[BMTools](https://github.com/OpenBMB/BMTools)中提供的工具。 \n\n## 📰 最新消息\n- [2023/10/17] 我们很高兴来分享我们AI开源社区 hugging face: [`AgentVerse`](https://huggingface.co/spaces/AgentVerse/agentVerse). 在你提供openai API 密钥 and the openai 组织码之后，你可以体验NLP教室和囚徒困境两个模拟应用程序。祝你玩得开心！\n\n- [2023/8/22] 📝 我们很高兴分享与此仓库相关的正在进行中的论文[AgentVerse: Facilitating Multi-Agent Collaboration and Exploring Emergent Behaviors in Agents](https://arxiv.org/abs/2308.10848).\n<img width=\"616\" alt=\"Screen Shot 2023-09-01 at 12 08 57 PM\" src=\"https://github.com/OpenBMB/AgentVerse/assets/11704492/6db1c907-b7fc-42f9-946c-89853a28f386\">\n\nYou could refer the stay-tuned code in this [branch](https://github.com/OpenBMB/AgentVerse/tree/AgentVerse-TaskSolving).\n\n- [2023/6/5] 🎉 我们很荣幸地展示了一系列 [demos](#-simple-demo-video), 包括 [NLP教室](#nlp教室), [囚徒困境](#囚徒困境), [软件开发](#软件开发), [数据库运维](#数据库运维), 以及一个简单的 [H5宝可梦游戏](#宝可梦游戏) 该游戏允许与宝可梦中的角色互动！你可以试玩这些demo，祝你玩得开心！\n- [2023/5/1] 🚀 [AgentVerse](https://github.com/OpenBMB/AgentVerse) 正式发布！\n\n## 🌟 加入我们!\nAgentVerse致力于为大型语言模型革命化多智能体环境，我们急切地寻找充满激情的合作伙伴与我们一起这一令人兴奋的旅程。\n\n### 您能如何贡献?\n- **代码开发**: 如果您是工程师，我们希望您能够帮助我们细化、优化和扩展当前的框架。我们一直在寻找有才华的开发者来增强我们现有的特性和开发新模块。\n\n- **文档和教程**: 如果您擅长写作，我们希望您能帮助我们改进文档，创建教程或写博客文章，使AgentVerse更容易被广大社区接受。\n\n- **应用探索**: 如果您对多智能体应用感兴趣，并渴望使用AgentVerse进行实验，我们会很高兴支持您的旅程并看到您创造的内容！\n\n- **反馈和建议**: 使用AgentVerse并为我们提供反馈。您的见解可以导致潜在的改进并确保我们的框架保持最佳状态。\n\n此外，如果您热衷于推进多智能体环境的前沿，并渴望更深入地进行研究，我们邀请您加入我们在THUNLP的团队。为了探索这一令人兴奋的机会，并与我们开始合作之旅，请联系[chenweize1998@gmail.com](chenweize1998@gmail.com) 和 [yushengsu.thu@gmail.com](yushengsu.thu@gmail.com) 表达您的兴趣。我们很乐意欢迎像您这样的有动力的个人加入我们的实验室！\n\n## 🗓 即将到来\n- [ ] 我们的[paper](https://arxiv.org/abs/2308.10848)的代码发布\n- [ ] 增加文档\n- [ ] 支持更复杂的对话历史内存\n- [ ] 支持本地LLM\n\n\n## 👾 Demo视频\n\n我们演示了由AgentVerse精心制作的以下案例。\n<!--\n### [![Demo video](https://i.imgur.com/vKb2F1B.png)](https://youtu.be/9JCVfzMFhaM)\n-->\n<!--![image](imgs/multiagent-min.gif)-->\n\n<!-- - **NLP Classroom**: -->\n\n#### NLP教室\n在NLP课堂中，教授和学生进行互动交流。当学生有问题时，他们会举手并耐心等待教授指名。只有在教授点名后，学生才能发言并提问。\n\n使用以下命令启动NLP教室示例：\n```bash\npython main_demo.py --task nlp_classroom_9players\n```\n\nhttps://github.com/OpenBMB/AgentVerse/assets/11704492/6ea07850-595e-4a28-a82e-f863011353c2\n\n\n#### 囚徒困境\n囚徒的困境是一个思考实验，它挑战两个完全理性的智能体面临的困境：他们可以与伙伴合作以获得互利，或背叛伙伴（\"违背\"）以获得个人奖励。\n\n使用以下命令启动NLP教室示例：\n```bash\npython main_demo.py --task prisoner_dilemma\n```\n\nhttps://github.com/OpenBMB/AgentVerse/assets/11704492/017c46e5-c738-4fca-9352-b008e2d518bd\n\n\n#### 软件开发\n在软件设计示例中，代码编写者、代码测试者和代码审查者在代码生成问题上进行合作。给定一个问题，代码编写者首先撰写代码实现。代码测试者运行单元测试并提供反馈。然后，代码审查者生成评审。在收集了测试反馈和审查后，代码编写者迭代地优化代码。\n\n使用以下命令启动软件设计示例：\n```bash\npython main_demo.py --task sde_team/sde_team_2players\n```\n\nhttps://github.com/OpenBMB/AgentVerse/assets/11704492/5058066a-abee-490d-8659-b4e54661626a\n\n\n#### [数据库运维](https://github.com/zhouxh19/AgentVerse_for_Database_Diagnosis)\n在数据库诊断场景中，首席DBA监控数据库系统以查找异常。如果检测到，会提醒内存和CPU智能体进行根源分析并建议优化解决方案。然后，首席DBA向用户提供总结的诊断，用户也可以通过给予指导或评估所提议解决方案的有效性来作出贡献。\n\n首先，您应该在BMTools中配置[数据库工具](https://github.com/OpenBMB/BMTools/blob/main/bmtools/tools/db_diag/readme.md), 并根据[指南](https://github.com/OpenBMB/BMTools/tree/main#211-local-tools)启动BMTools服务器。然后使用以下命令启动数据库管理员示例：\n```bash\npython main_demo.py --task db_diag\n```\n\nhttps://github.com/OpenBMB/AgentVerse/assets/11704492/c633419d-afbb-47d4-bb12-6bb512e7af3a\n\n#### [文本评估 (ChatEval)](https://github.com/chanchimin/ChatEval)\n在文本评估场景的背景下，我们建议用户探索[ChatEval](https://github.com/chanchimin/ChatEval)仓库。他们在AgentVerse上实现了一个多智能体裁判团来评估不同模型生成的文本质量。给定两个不同的文本，ChatEval中的角色可以自主地辩论其细微差别，并根据分配给他们的人物特点提供其判断。实验表明，他们的裁判团，根据[config.yaml](#2-configuring-the-agents)中规定的多样角色，与人类的评估更为接近。这个演示是基于[Fastchat](https://github.com/lm-sys/FastChat)仓库构建的，我们想对他们的基础工作表示感谢。\n\n\nhttps://github.com/OpenBMB/AgentVerse/assets/75533759/58f33468-f15b-4bac-ae01-8d0780019f85\n\n#### 宝可梦游戏\n在这个简易游戏中，NPC之间可以自主互动。作为玩家，你扮演一个角色，可以随时与其他NPC互动。在这一游戏中有6个宝可梦绿宝石版中出现的角色: [May](https://bulbapedia.bulbagarden.net/wiki/May_(game)), [Professor Birch](https://bulbapedia.bulbagarden.net/wiki/Professor_Birch), [Steven Stone](https://bulbapedia.bulbagarden.net/wiki/Steven_Stone), [Maxie](https://bulbapedia.bulbagarden.net/wiki/Maxie), [Archie](https://bulbapedia.bulbagarden.net/wiki/Archie) 和[Joseph](https://bulbapedia.bulbagarden.net/wiki/Mr._Stone). \n\n要启动宝可梦游戏，首先使用以下命令启动本地服务器：\n```bash\nuvicorn pokemon_server:app --reload --port 10002\n```\n然后在项目的根路径中打开另一个终端并运行以下命令：\n```bash\ncd ui\n# If you do not have npm installed, you need to install it before running the following commands \n# https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\n# We have tested on npm@9.6.4, node@20.0.0\nnpm install\nnpm run watch\n```\n等待编译完成。祝你玩得开心！(使用WASD移动，SPACE键启动对话。)\n\nhttps://github.com/OpenBMB/AgentVerse/assets/11704492/4d07da68-f942-4205-b558-f155e95782e7\n\n\n\n## Contents\n\n- [✨ 特点](#-特点)\n- [📰 最新消息](#-最新消息)\n- [🌟 加入我们!](#-加入我们)\n  - [您能如何贡献?](#您能如何贡献)\n- [🗓 即将到来](#-即将到来)\n- [👾 Demo视频](#-demo视频)\n    - [NLP教室](#nlp教室)\n    - [囚徒困境](#囚徒困境)\n    - [软件开发](#软件开发)\n    - [数据库运维](#数据库运维)\n    - [文本评估 (ChatEval)](#文本评估-chateval)\n    - [宝可梦游戏](#宝可梦游戏)\n- [Contents](#contents)\n- [🚀 开始使用](#-开始使用)\n  - [安装](#安装)\n  - [命令行示例](#命令行示例)\n  - [本地网站演示](#本地网站演示)\n- [💡 理念](#-理念)\n  - [Environment](#environment)\n  - [智能体](#智能体)\n- [✍️ 定制您自己的环境](#️-定制您自己的环境)\n  - [一个简单的例子：构建一个教室环境](#一个简单的例子构建一个教室环境)\n      - [1. 创建任务目录并配置环境](#1-创建任务目录并配置环境)\n      - [2. 配置智能体](#2-配置智能体)\n      - [3. 编写一个输出解析器](#3-编写一个输出解析器)\n  - [更复杂环境的定制指南](#更复杂环境的定制指南)\n- [🔎 示例](#-示例)\n- [Star History](#star-history)\n- [Citation](#citation)\n- [Contact](#contact)\n\n\n\n## 🚀 开始使用\n\n### 安装\n\n```bash\npip install -U agentverse\n```\n或者您可以通过手动克隆最新的仓库来安装此包：\n```bash\ngit clone https://github.com/OpenBMB/AgentVerse.git --depth 1\ncd AgentVerse\npip install -r requirements.txt\n```\n一些用户报告在安装`gradio`所需的`orjson`时遇到问题。一个简单的解决方法是使用Anaconda来安装它：`conda install -c conda-forge orjson`。\n\n您还需要按如下方式导出您的OpenAI API密钥：\n```bash\n# 导出你的OpenAI API密钥\nexport OPENAI_API_KEY=\"your_api_key_here\"\n```\n或者您想使用 Azure OpenAI 服务，请按照以下方式配置 OpenAI API 密钥和 API base：\n```bash\nexport AZURE_OPENAI_API_KEY=\"your_api_key_here\"\nexport AZURE_OPENAI_API_BASE=\"your_api_base_here\"\n```\n\n如果您想使用BMTools提供的工具，您需要按如下方式安装BMTools：\n```bash\ngit clone git+https://github.com/OpenBMB/BMTools.git\ncd BMTools\npip install -r requirements.txt\npython setup.py develop\n```\n\n### 命令行示例\n\n您可以创建由我们提供的多智能体环境。以教室场景为例。在这个场景中，有九个智能体，一个扮演教授的角色，其他八个是学生。\n\n```shell\npython3 main.py --task nlp_classroom_9players\n```\n\n### 本地网站演示\n\n我们还为这个环境提供了一个本地网站的演示。您可以用以下命令启动它：\n\n```shell\npython3 main_demo.py --task nlp_classroom_9players\n```\n成功启动本地服务器后，您可以访问[http://127.0.0.1:7860/](http://127.0.0.1:7860/) 查看教室环境。\n\n## 💡 理念\n\n### Environment\n\n我们框架的核心是环境，它在使研究人员能够在不同条件下研究智能体行为方面起着至关重要的作用。我们认为环境应该是灵活的和可扩展的，允许研究人员轻松地定制它以适应他们的需求。为了实现这一点，我们将环境抽象为五个规则组件，实现不同的环境实际上是实现不同的规则：\n\n- **Describer（描述器）**：此组件为每个智能体在每一轮提供环境的描述。您可以自定义描述器来定义他们的环境的具体要求，例如一个智能体可以与哪些智能体互动。\n- **Order（顺序）**：此组件定义智能体在环境中采取行动的顺序。您可以自定义顺序以反映智能体之间所需的交互。我们提供了几个基本的顺序选项，包括`random`（随机），`sequential`（连续）和`concurrent`（所有智能体在每轮都采取行动）。\n- **Selector（选择器）**：此组件选择由智能体生成的有效消息。有时智能体可能生成无效的响应，选择器用于过滤出意外的结果。\n- **Updater（更新器）**：此组件更新每个智能体的记忆。在某些情况下，一个智能体生成的响应不应被所有智能体看到（例如，如果智能体在不同的房间里）。对于每个响应，更新器只更新可以看到它的智能体。\n- **Visibility（可见性）**：此组件维护每个智能体在环境变化中可以看到的智能体列表。例如，当一个智能体从一个房间移动到另一个房间时，每个智能体的可见智能体列表应由`visibility`更新。\n\n通过将环境抽象为这五个组件，我们创建了一个高度灵活且可扩展的框架，使研究人员可以轻松地构建和定制自己的多智能体环境。\n\n### 智能体\n\n另一个基本组件是智能体。目前我们提供了两种类型的智能体：**ConversationAgent（对话智能体）** 和 **ToolAgent（工具智能体）**。您还可以通过继承BaseAgent类来自定义自己的智能体。\n\n## ✍️ 定制您自己的环境\n\n我们在`agentverse/tasks`目录中提供了几个示例。要定制您的环境，您应该\n\n1. 在`agentverse/tasks`中创建一个任务目录\n2. 编写配置文件\n3. 编写解析您智能体响应的输出解析器。\n4. 在`agentverse/tasks/__init__.py`中添加您的解析器\n\n我们将使用`agentverse/tasks/nlp_classroom_3players`中的一个简单示例来说明这个程序。\n\n### 一个简单的例子：构建一个教室环境\n\n为了说明如何定制您的环境，我们将使用一个简单的示例来构建一个教室环境，其中一个智能体是教授，一个是学生，一个是助教。\n\n##### 1. 创建任务目录并配置环境\n\n首先，我们需要创建一个任务目录并为环境编写我们的配置文件。在`agentverse/tasks`目录中，创建一个新目录，名为`nlp_classroom_3players`。在此目录中，创建一个`config.yaml`文件并写入以下配置：\n\n```yaml\n# config.yaml\nenvironment:\n  env_type: basic\t\t\t\t# 使用AgentVerse中提供的基本环境\n  max_turns: 10\t\t\t\t\t# 指定对话的最大轮数\n  rule:\n    order:\n      type: sequential\t# 使用连续的顺序\n    visibility:\n      type: all\t\t\t\t\t# 每条消息都可以被所有智能体看到\n    selector:\n      type: basic\t\t\t\t# 基本选择器（不选择）\n    updater:\n      type: basic\t\t\t\t# 基本更新器（将消息更新给所有智能体）\n    describer:\n      type: basic\t\t\t\t# 基本描述器（无描述）\n```\n\n这个配置指定我们将使用AgentVerse中提供的基本环境，对话的最大轮数为10。我们将使用连续的顺序，所有消息对所有智能体都是可见的。我们不使用任何选择器，我们的更新器会将消息更新给所有的智能体，而我们的描述器不会提供任何描述。\n\n##### 2. 配置智能体\n\n接下来，我们将配置智能体。在`config.yaml`文件中，我们将为每个智能体添加配置。以下是教授的示例配置：\n\n```yaml\n# config.yaml\nagents:\n  -\n    agent_type: conversation\n    name: Professor Micheal\t\t# 智能体的名称\n    role_description: You are Prof. Micheal, ...\t# 智能体的描述\n    memory: \n      memory_type: chat_history\t\t# 将存储所有的聊天记录\n    prompt_template: *professor_prompt\n    llm:\n      llm_type: text-davinci-003    # 将使用OpenAICompletion LLM\n      model: text-davinci-003       # 传递给api调用的参数\n      temperature: 0.7\n      max_tokens: 250\n```\n\n在此示例中，我们将使用`conversation`智能体类型。我们为智能体指定了一个名称和描述，并将聊天记录存储在内存中。我们还提供了一个带有占位符的提示模板，这些占位符标记为${placeholder}。这些将由智能体的`_fill_prompt_template`方法实例化。\n\n##### 3. 编写一个输出解析器\n\n下一步是为您的智能体的响应编写一个简单的解析器。因为您可能已经在您的提示模板中指定了输出格式，所以您需要提供一个相应的解析器。在此示例中，我们在我们的提示模板中通知模型以以下格式输出\n\n```\nAction: Speak\nAction Input: (the content)\n```\n\n我们将编写一个解析器来从智能体的响应中提取内容。有关更多详细信息，请参考代码。我们使用`@output_parser_registry.register('classroom_parser')`修饰我们的解析器函数，以将其注册到我们的框架中。最后，我们在`agentverse/tasks/__init__.py`中导入我们的解析器。\n\n通过这些步骤，我们已经成功地构建了一个简单的教室环境，并根据我们的需求进行了定制。\n\n### 更复杂环境的定制指南\n\n虽然我们提供了一个基本框架来构建环境，使用我们的五个规则组件，但更复杂的环境可能需要进一步的定制。详细的文档和教程即将推出。在此，我们简要介绍如何定制您的环境的一些步骤：\n\n1. **定制五个规则组件**。每个规则组件都有一个接口，允许您根据特定的需求定制其行为。需要注意的是，这些组件并不一定是独立的，可以通过环境中的`rule_params`字典进行交互。您可以创建自己的规则组件，并与现有的组件集成，以构建智能体之间更复杂的交互。\n2. **定制环境本身**。我们的`basic`环境为五个规则组件提供了一个默认的执行顺序，适合大多数情况，但您可以继承`BaseEnvironment`类并编写自己的`run`方法来实现更复杂的执行顺序。\n3. **定制智能体**。根据您的特定用例，您可能还需要继承`BaseAgent`类。例如，您可能希望使用您的本地LLM作为智能体，或创建具有专门知识或技能的智能体。\n\n## 🔎 示例\n\n目前，我们在`agentverse/tasks`目录中提供了一些简单的示例，每个示例都展示了我们框架的不同可能性。尽管这些示例的性能可能由于有限的提示工程而不是最佳的，但它们旨在展示我们框架的能力，例如允许使用工具。\n\n以下是每个示例的简要概述：\n\n1. `nlp_classroom_3players`：此示例说明了智能体将按顺序交谈的简单情况。\n2. `nlp_classroom_9players`：这是一个NLP课堂示例。在这里，学生们可以在有问题时举手，教授可以叫学生让他们提问。只有在被叫到之后，学生才被允许说话。\n3. `nlp_classroom_9players_group`：此示例展示了小组讨论。必要时，教授可以发起小组讨论，学生们可以在讨论期间只与同一小组的同学交互。\n4. `nlp_classroom_3players_withtool`：在这个课堂中，学生们在听课时可以使用Bing搜索API。\n5. `math_problem_2players_tools`：一个简单的示例，展示了如何使用WolframAlpha API的两个智能体来玩算术游戏。\n6. `prisoner_dilema`：囚犯困境是一个涉及两个理性智能体面临的思想实验，他们可以选择为相互利益而合作，或为个人利益而背叛伙伴。\n7. `db_diag`：首席DBA（智能体）监控数据库系统中的异常，并在检测到任何异常时提醒内存和CPU智能体。他们（智能体）分析根本原因并建议优化解决方案。首席DBA（智能体）向用户提供诊断摘要，用户可以给出指示或评估所提议的解决方案的有效性。\n8. `sde_team`：在SDE团队中，代码编写者、代码测试者和代码审查者在代码生成问题上进行合作。\n9. `pokemon`：此示例模仿宝可梦游戏。\n\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=OpenBMB/AgentVerse&type=Date)](https://star-history.com/#OpenBMB/AgentVerse&Date)\n\n\n## Citation\n如果您在您的工作中使用了我们的框架，请使用以下形式进行引用\n```\n@misc{chen2023agentverse,\n      title={AgentVerse: Facilitating Multi-Agent Collaboration and Exploring Emergent Behaviors in Agents}, \n      author={Weize Chen and Yusheng Su and Jingwei Zuo and Cheng Yang and Chenfei Yuan and Chen Qian and Chi-Min Chan and Yujia Qin and Yaxi Lu and Ruobing Xie and Zhiyuan Liu and Maosong Sun and Jie Zhou},\n      year={2023},\n      eprint={2308.10848},\n      archivePrefix={arXiv},\n      primaryClass={cs.CL}\n}\n```\n\n## Contact\n\n陈纬泽: chenwz21@mails.tsinghua.edu.cn\n\n[苏裕胜](https://yushengsu-thu.github.io/): yushengsu.thu@gmail.com\n\n"
        },
        {
          "name": "agentverse",
          "type": "tree",
          "content": null
        },
        {
          "name": "agentverse_command",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "dataloader",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "imgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pokemon_server.py",
          "type": "blob",
          "size": 1.8076171875,
          "content": "from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel, Field\nfrom typing import Set, List, Dict\nfrom agentverse.simulation import Simulation\nfrom agentverse.message import Message\n\n\nclass UserRequest(BaseModel):\n    content: str = Field(default=\"\")\n    sender: str = Field(default=\"Brendan\")\n    receiver: str\n    receiver_id: int\n\n\nclass RoutineRequest(BaseModel):\n    agent_ids: List[int]\n\n\nclass UpdateRequest(BaseModel):\n    agent_locations: Dict[str, str]\n\n\napp = FastAPI()\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\nagent_verse = Simulation.from_task(\"pokemon\")\n\n\n@app.get(\"/\")\ndef health_check():\n    return {\"status\": \"ok\"}\n\n\n@app.post(\"/chat\")\ndef chat(message: UserRequest):\n    content = message.content\n    receiver = message.receiver\n    receiver_id = message.receiver_id\n    response = agent_verse.next(\n        is_player=True,\n        player_content=content,\n        receiver=receiver,\n        receiver_id=receiver_id,\n    )\n    return response[0].dict()\n\n\n@app.post(\"/make_decision\")\ndef update(message: RoutineRequest):\n    response = agent_verse.next(is_player=False, agent_ids=message.agent_ids)\n    return [r.dict() for r in response]\n    # import json\n\n    # return [\n    #     # {\n    #     #     \"content\": json.dumps(\n    #     #         {\n    #     #             \"to\": \"Maxie\",\n    #     #             \"action\": \"Speak\",\n    #     #             \"text\": \"Hello Hello Hello Hello Hello Hello\",\n    #     #         }\n    #     #     )\n    #     # }\n    #     {\"content\": json.dumps({\"to\": \"Pokémon Center\", \"action\": \"MoveTo\"})}\n    # ]\n\n\n@app.post(\"/update_location\")\ndef update_location(message: UpdateRequest):\n    agent_verse.update_state(message.agent_locations)\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.279296875,
          "content": "pyyaml\nfastapi==0.95.1\nuvicorn\npy3langid\nsetuptools-scm\nopenai==1.1.0\nopencv-python==4.8.0.76\ngradio\nhttpx[socks]==0.25.0\nastunparse\nlangchain==0.0.157\nscikit-learn\npydantic==1.10.7\ntyping-extensions==4.5.0\ntyping-inspect==0.8.0\ncolorlog\nrapidfuzz\nspacy\ncolorama==0.4.6\ntiktoken==0.5.1\n"
        },
        {
          "name": "requirements_local.txt",
          "type": "blob",
          "size": 0.0341796875,
          "content": "fschat[model_worker,webui]==0.2.30\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.80078125,
          "content": "import setuptools\nfrom setuptools.command.develop import develop\nimport subprocess\n\nwith open(\"requirements.txt\", \"r\") as f:\n    requirements = f.read().splitlines()\n\nwith open(\"requirements_local.txt\", \"r\") as f:\n    requirements_local = f.read().splitlines()\n\nwith open(\"README.md\", \"r\", encoding='utf8') as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name=\"agentverse\",\n    version=\"0.1.8.1\",\n    author=\"AgentVerse Team\",\n    author_email=\"agentverse2@gmail.com\",\n    description=\"A versatile framework that streamlines the process of creating custom multi-agent environments for large language models (LLMs).\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/OpenBMB/AgentVerse\",\n    packages=setuptools.find_packages(),\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        'License :: OSI Approved :: Apache Software License',\n        \"Operating System :: OS Independent\",\n    ],\n    python_requires=\">=3.9\",\n    # install_requires=[\n    #     \"PyYAML\",\n    #     \"fastapi\",\n    #     \"uvicorn\",\n    #     \"py3langid\",\n    #     \"iso-639\",\n    #     \"openai\",\n    #     \"opencv-python\",\n    #     \"gradio\",\n    #     \"httpx[socks]\",\n    #     \"astunparse\",\n    #     \"langchain\",\n    # ],\n    install_requires=requirements,\n    extras_require={\n        'local': requirements_local\n    },\n    include_package_data = True,\n    entry_points={\n        \"console_scripts\": [\n            \"agentverse-benchmark = agentverse_command.benchmark:cli_main\",\n            \"agentverse-simulation = agentverse_command.main_simulation_cli:cli_main\",\n            \"agentverse-simulation-gui = agentverse_command.main_simulation_gui:cli_main\",\n            \"agentverse-tasksolving = agentverse_command.main_tasksolving_cli:cli_main\",\n        ],\n    },\n)\n"
        },
        {
          "name": "ui",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}