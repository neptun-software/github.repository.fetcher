{
  "metadata": {
    "timestamp": 1736561854132,
    "page": 521,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "flow-typed/flow-typed",
      "stars": 3767,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3662109375,
          "content": "# EditorConfig is awesome: http://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n[*]\n# Unix-style newlines with a newline ending every file\nend_of_line = lf\ninsert_final_newline = true\n\n# Set default charset\ncharset = utf-8\n\n# 2 space indentation\nindent_size = 2\nindent_style = space\n\n[*.{js,json}]\n# trim any trailing whitespace\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0751953125,
          "content": "# So that definition hashes are always consistent across OS\n*.js text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6904296875,
          "content": "# Logs\nlogs\n*.log\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directory\n# https://www.npmjs.org/doc/misc/npm-faq.html#should-i-check-my-node_modules-folder-into-git\nnode_modules\n\n.DS_Store\n*.swp\n\n# CLI dist directory\ncli/dist/*\ncli/.test-dir/*\ncli/.flow-bins-cache/*\ncli/package-lock.json\ncli/README.md\n\n# Test harness\nharness/\n\n# Editors\n.vscode\n.idea\n*.iml\n"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.056640625,
          "content": "---\nsingleQuote: true\ntrailingComma: \"es5\"\nparser: \"flow\"\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 8.5791015625,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n## [3.9.0] 2023-07-28\n\n### Fixed\n- [cli] Bump semver to patch vulnerability (#4479) \n- [cli:test] Fix CI tests for environments (#4463)\n- [cli] Fix a bug from flow that stopped testing for ambiguous obj exacâ€¦ \n- [cli] Fix running definition tests locally on MacOS (#4440) \n- [cli]Fix runTests command for flow@^0.200.0 set exact_by_default option (#4423)\n- Bump http-cache-semantics from 4.0.4 to 4.1.1 in /cli (#4420) \n- Bump json5 from 2.1.1 to 2.2.3 in /cli (#4416) \n- Bump minimatch from 3.0.4 to 3.1.2 in /cli (#4409) \n- Bump word-wrap from 1.2.3 to 1.2.4 in /cli (#4469) \n- Bump tough-cookie from 4.0.0 to 4.1.3 in /cli (#4464) \n\n## [3.8.0] 2022-06-26\n\n### Added\n- **Core definitions (#4255)**\n- Create test harness (#4268)\n- Make use of flow-typed.config.js for ignored (#4288)\n\n### Changed\n- Consistent list logging (#4287)\n- Coerce cli version with semver to allow for prerelease tags (#4291)\n- Fix if dependency is resolved npm package (#4298)\n- Bump minimist from 1.2.0 to 1.2.6 in (#4293)\n- [docs] contract -> contrast (#4281)\n- [docs] update command doesn't take positional arguments (#4328)\n- [docs] document create-stub --typescript flag (#4329)\n\n## [3.7.0] 2022-02-21\n\n### Added\n- New `outdated` command (#4171)\n\n### Changed\n- CLI tool now ships with flowtypes (#4233)\n- Install can match with alpha versions now (#4247)\n\n### Fixed\n- Fix create def with scopes (#4234)\n- Fix buffer deprecation error (#4270)\n- Temporarily turn off validate-def checks against npm (#4249)\n- Bump ajv from 6.11.0 to 6.12.6 in /cli (#4260)\n- Bump node-fetch from 2.6.6 to 2.6.7 in /cli (#4254)\n- Bump shelljs from 0.8.3 to 0.8.5 in /cli (#4237)\n\n## [3.6.1] 2022-01-09\n\n### Changed\n- Provide better logs related to dir structure when running tests (#4213)\n\n### Fixed\n- Pin colors@1.4.0 to fix security vuln (#4229)\n- Fix installing minor libdef version (#4224)\n- Allow .DS_Store files in definitions nested directories (#4217)\n- [docs] Fix some link issues in contributing docs (#4212)\n- [docs] Fix the documented pathing for an ignoring eslint (#4218)\n\n## [3.6.0] 2021-12-25\n\n### Added\n- Add a published readme (#4182)\n\n### Fixed\n- Dramatically improve install time (#4193)\n- Replace unzipper with node-stream-zip (#4180)\n- Install will restart flow bin (#4185)\n- Upgrade octokit/rest version (#4197)\n- [docs] Move wiki to /docs and serve with docsify (#4179)\n\n### Removed\n- Fix definitions not running in ci env (#4187)\n\n## [3.5.0] 2021-11-27\n\n### Added\n- Added support for Yarn monorepos (#4140)\n- New --skipCache option for `install` command (#4170)\n- Add @babel/eslint-parser@7.16.3\n- Add @babel/plugin-syntax-flow@7.16.0\n- Add @babel/plugin-transform-react-jsx@7.16.0\n\n### Changed\n- Update flow-bin version to latest version (#4153)\n- `install` will also install lib defs of dependencies that ship with library (#4143)\n- Only test against changed versions with `only-changed` option (#4168)\n- Bump `table` from 5.4.6 to 6.7.3 (#4175)\n- Bump `ansi-regex` from 5.0.0 to 5.0.1 (#4177)\n- Update multiple devDependencies (#4174)\n  - Bump @babel/cli from 7.8.4 to 7.16.0\n  - Bump @babel/core from 7.8.4 to 7.16.0\n  - Bump @babel/preset-env from 7.8.4 to 7.16.4\n  - Bump @babel/preset-flow from 7.8.3 to 7.16.0\n  - Bump eslint from 6.8.0 to 8.3.0\n  - Bump eslint-config-prettier from 6.10.1 to 8.3.0\n  - Bump eslint-plugin-fb-flow from 0.0.1 to 0.0.4\n  - Bump eslint-plugin-flowtype from 4.6.0 to 8.0.3\n  - Bump eslint-plugin-prettier from 3.1.2 to 4.0.0\n  - Bump flow-bin from 0.164.0 to 0.165.1\n  - Bump jest from 25.1.027.3.1\n\n### Fixed\n- Fix installing lib def package when dependency version uses >= (#4157)\n- Support for slash-style comments in dependencies (#4169)\n- Remove babel-eslint@10.0.3\n- Remove babel-jest@25.1.0\n\n\n## [3.4.0] 2021-10-20\n\n### Added\n- `quick_run_def_tests` now supports arguments (#4064)\n- Add `eslint-plugin-fb-flow` ESLint plugin (#4114)\n- New `create-def` command and script for easier libdef creation (#4125)\n- Add support for .ignore file (#4133)\n\n### Changed\n- Add package health badge to the README (#4049)\n- Update CI node versions in Github Actions to 12 & 14 (#4082)\n\n### Fixed\n- Fix flow-typed sometimes writing an empty file (#4011)\n- Bump y18n from 4.0.0 to 4.0.1 (#4054)\n- Bump lodash from 4.17.19 to 4.17.21 (#4077)\n- Bump hosted-git-info from 2.7.1 to 2.8.9 (#4079)\n- Bump browserslist from 4.8.7 to 4.16.6 (#4081)\n- Bump ws from 7.2.1 to 7.4.6 (#4084)\n- Bump normalize-url from 4.5.0 to 4.5.1 (#4090)\n- Bump glob-parent from 5.0.0 to 5.1.2 (#4091)\n- Bump path-parse from 1.0.6 to 1.0.7 (#4118)\n- Bump tmpl from 1.0.4 to 1.0.5 (#4139)\n\n## [3.3.1] 2021-02-17\n\n### Fixed\n- Fix a regression introduced in 3.3.0 (#4023)\n\n## [3.3.0] 2021-02-17\n\n### Added\n- Locate modules with Yarn PnP in PnP projects (#3963)\n\n### Changed\n- Move from TravisCI to Github Actions\n- Clean up fs.readFile usage (#3966)\n- Update cli flow version to 0.144.0 (#4014)\n- Lock semver to fix install command (#4018)\n- Bump node-fetch from 2.6.0 to 2.6.1 in /cli (#3896)\n- [Docs] Update new libdefs minimum Flow version (#3954)\n\n### Fixed\n- Fix installing patch range lib defs (#4003)\n- Fix broken flow breaking function (#4017)\n- Fix tests not running in CI (#4010)\n- Update git author information for Github Action. (#3952)\n\n## [3.2.1] 2020-07-23\n\n### Changed\n- Better fix for semver throwing errors for versions of `v0.x.x` (#3866)\n\n## [3.2.0] 2020-07-12\n\n### Changed\n- Support flow versions > 0.125.0 (#3855)\n- Improved eslint/prettier integration (#3787)\n\n### Fixed\n- Add workaround for semver throwing errors for versions of `v0.x.x` (#3842)\n- Avoid uncaught error when network fails (#3846)\n- Fix <<STUB>> parsing (#3786)\n\n## [3.1.0] 2020-03-18\n\n### Changed\n- Remove react-dom from built-in flow libdefs (#3748)\n\n### Fixed\n- Fix --overwrite install command option type (#3754)\n\n## [3.0.0] 2020-02-18\n\n### Added\n- Recommend matching commands (#3700)\n\n### Changed\n- **[BREAKING-CHANGE]** Drop support for node < 10 (#3743)\n- Travis specs now run on node 10 & 12, as opposed to 8 & 10 (#3743)\n\n### Fixed\n- Updated octokit/rest to deprecation message (#3602)\n- Fix GH_CLIENT usage in runTests test (#3638)\n\n## [2.6.2] - 2019-10-23\n\n### Added\n- Added `--overwrite` option to the `install` command (#3535)\n\n### Changed\n- Travis specs now run on node 8 & 10, as opposed to 6 & 8 (#3485)\n\n### Fixed\n- Updated octokit/rest to avoid vulnerability (#3602)\n- Fixes git package support (#3537)\n- Explicit inexact object syntax (#3467)\n- Fixes eslint errors in /cli (#3485)\n\n## [2.6.1] - 2019-07-30\n\n### Fixed\n- Fix runTests on Windows (#3446)\n\n## [2.6.0] - 2019-07-15\n\n### Added\n- Generate stub declarations for subdirectory modules such as `core-js/stable` and `core-js/es/symbol` in core-js (#3426)\n- Passing `--typescript` to `create-stub` will use [flowgen](https://github.com/joarwilk/flowgen) to create a stub form an existing, published typescript definition (#3387)\n\n### Removed\n- The `version` command has been dropped in favor of the native `--version` flag\n\n## [2.5.2] - 2019-05-15\n\n### Added\n- Added `useCacheUntil` flag to `install` command (#3305)\n\n## [2.5.1] - 2018-07-06\n\n### Changed\n- Temporarily disable stub guessing (#2485)\n\n## [2.5.0] - 2018-07-06\n\nThe flow-typed project has moved to a new organization, [@flow-typed](http://github.com/flow-typed)!\n\n### Added\n- Added `cacheDir` flag to `install` and `update` commands (#2016)\n\n### Changed\n- Improved stub generation with guessed properties (#2027)\n- Replace deprecated `github@0.2.4` with Octokit (#2107)\n\n### Fixed\n- Correctly handle uninstalling of scoped packages (#2355)\n- Ignore Flow version 0.63.0 when running specs, as it was failing builds (#2423)\n\n## [2.4.0] - 2018-03-16\n\n### IMPORTANT\n\nA week after this release, all previous versions of `flow-typed` on npm will be DEPRECATED, in order to encourage upgrading to version `2.4.0`. After which, we will be introducing files to definition folders under `/definitions/npm`, which will break the `search`, `install` and `validate-defs` commands.\n\n**We strongly recommend upgrading to `2.4.0` within that timeframe.**\n\n### Added\n- Allow any file type (.md, .json) under `/definitions/npm/<library>_vx.x.x/` (#1962)\n- `describe` and `it` can now be importing from `'flow-typed-test'` in `_test` files (#1942)\n  - See [CONTRIBUTING.md](https://github.com/flow-typed/flow-typed/blob/main/CONTRIBUTING.md)\n- Root directory option (-rootDir) to install command (#1835)\n\n### Changed\n- Replace `unzip` with `unzipper` (#1957)\n\n### Fixed\n- Fix jest specs breaking by adding `babel-core` as a dependency (#1864)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.361328125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to [flowtyped@gmail.com](mailto:flowtyped@gmail.com), or to a flow-typed\nteam member on the [Flow Discord](https://discord.gg/e6p4b2q3eD) server. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 20.083984375,
          "content": "# Contributing\n\nContributing library definitions is as easy as sending a pull request!\n\n## ToC\n\n* [Understanding the definitions structure](#understanding-the-definitions-structure)\n* [Making a contribution](#making-a-contribution)\n  * [Create package directory](#1-create-a-new-directory-called-definitionsnpmleft-pad_v4xx)\n  * [Create flow directory](#2-in-this-new-directory-create-another-new-directory-called-flow_v083x-)\n  * [Create definition](#3-place-your-libdef-inside-the-flow-version-directory-and-name-it-left-pad_v4xxjs)\n  * [Create tests](#4-write-a-test-file-whose-name-starts-with-test_-in-the-flow-version-directory)\n  * [Run tests](#5-run-your-tests)\n  * [Raise pull request](#6-send-a-pull-request)\n  * [Environment definitions](environment-definitions)\n* [Libdef best practices](#libdef-best-practices)\n  * [Read flow docs](#read-flow-docs)\n  * [Importing types from other libdefs](#importing-types-from-other-libdefs)\n  * [Avoid `any` when possible](#avoid-any-when-possible)\n  * [Exporting modules](#exporting-modules)\n  * [Declaring types](#declaring-types)\n  * [Avoid global types](#avoid-global-types)\n  * [Prefer immutability](#prefer-immutability)\n  * [Prefer exactness](#prefer-exactness)\n  * [Partial/definitions definitions](#partialdefinitions-definitions)\n  * [A note on flowgen](#a-note-on-flowgen)\n* [Writing tests](#writing-tests)\n  * [Use `describe` and `it` blocks to limit scope](#use-describe-and-it-blocks-to-limit-scope)\n* [Owning definitions](#owning-definitions)\n\n## Understanding the definitions structure\n\nAll definitions sit under the\n[/definitions](https://github.com/flowtype/flow-typed/tree/main/definitions)\ndirectory. They all must follow the following directory structure and naming\nformat:\n\n```\nâ”” definitions/\n  â”œ npm/\n    â”œ yargs_v4.x.x/           # <-- The name of the library, followed by _v<VERSION>\n    | |\n    | â”œ flow_v0.83.x/         # <-- A folder containing libdefs tested against the\n    | | |                     #     specified version(s) of Flow (v0.83.x in this\n    | | |                     #     case).\n    | | |\n    | | â”œ yargs_v4.x.x.js     # <-- The libdef file meant for the Flow version\n    | | |                     #     specified by the containing directory's name.\n    | | |                     #     Must be named `<LIB>_v<VERSION>.js`.\n    | | |\n    | | â”” config.json        # <-- An optional file to hold configurations of the\n    | |                       #     definition such as dependent definitions\n    | |\n    | â”œ flow_v0.85.x-v0.91.x/ # <-- A folder containing libdefs tested against a\n    | | |                     #     different range of Flow versions:\n    | | |                     #     Anything from v0.85.x to v0.91.x (inclusive)\n    | | |\n    | | â”œ yargs_v4.x.x.js     # <-- The libdef file for versions of Flow from\n    | | |                     #     v0.85.x to v0.91.x (inclusive)\n    | | |\n    | | â”” test_yargs.js       # <-- Tests in this directory only apply to the\n    | |                       #     adjacent libdef (and thus, are specific to\n    | |                       #     the libdefs for this specific Flow version)\n    | |\n    | â”” test_yargs.js         # <-- Tests in this directory apply to libdefs for\n    |                         #     all versions of Flow.\n    â”œ color_v0.7.x/\n    â”œ ...\n  |\n  â”œ environments/\n    â”œ jsx/                    # <-- The name of the env environment\n    | |\n    | â”œ flow_v0.83.x-/        # <-- A folder containing definition tested against the\n    | | |                     #     specified version(s) of Flow (v0.83.x and onwards\n    | | |                     #     in this case).\n    | | |\n    | | â”” jsx.js              # <-- The environment definition file meant for the Flow version\n    | â”œ ...\n    â”œ ...\n  â”œ ...\n```\n\nFlow versions are semantically versioned (semver) with some restrictions:\n\n* All of MAJOR, MINOR, and PATCH versions must be specified. It's acceptable to\n  specify `x` in place of a number for MINOR and PATCH, but MAJOR cannot be `x`.\n* Library versions cannot specify a semver range, but Flow versions can of the\n  following forms:\n  * **`flow_v0.83.x-`**: Flow v0.83.x and above\n  * **`flow_v0.85.x-v0.91.x`**: Flow versions v0.85.x up to v0.91.x (inclusive)\n  * **`flow_-v0.106.x`**: Every version under (and including) Flow v0.106.x\n\n**We structure files this way to enable automated testing and tooling.**\nTests ensure that library definitions continue to work as expected and the\n`flow-typed` tooling ensures that it's as easy as possible to find and install\nlibrary definitions.\n\n## Making a contribution\n\nNow that we understand where definitions go, let's say you've created a definition for an npm package in your own project called `left-pad` at\nversion `4.1.0`. **[You've followed all of the\nbest practices for writing high quality definitions,](https://github.com/flow-typed/flow-typed/issues/13#issuecomment-214892914)**\nand now you'd like to contribute it.\n\n> Flow-typed comes with a handy script to simplify the file creation process (`./create_def.sh`) which takes two args, the library name and the version you'd like to type. In the :point_down: example that would be `./create_def.sh left-pad 4.x.x`.\n>\n> This will cover steps 1 - 4, of course without real definitions or tests written for you.\n\n> Before you start, if you think you have a fairly complicated library definition or one that you have not yet written and tested with your personal project you may consider leveraging our **test harness** which allows you to write code immediately in a simplified clean environment. Learn more [here](https://flow-typed.github.io/flow-typed/#/harness) or just create the harness (`./test_harness.sh`) to get started.\n\n#### 1) Create a new directory called `definitions/npm/left-pad_v4.x.x/`.\n\n***We call this the \"package version directory\".***\n\nThe naming scheme of this directory must be formatted as\n`${packageName}_v${packageVersion}`. This convention is enforced by the\nlibrary-definition test runner.\n\nYou'll notice we specified the minor and patch as `x`, this will ensure that this libdef can cater to as many other consumers as possible, though you may opt to refine the version more if the library you're typing changes dramatically on minor/patch updates.\n\n#### 2) In this new directory, create another new directory called `flow_v0.83.x-/`.\n\n***We call this the \"flow version directory\".***\n\nIf you aren't sure which versions of flow your definition is compatible with,\njust start with `flow_v0.83.x-`, and the test runner\n(which we'll run in a later step) will tell us if there are problems in some\nversions of Flow. `flow_v0.83.x-` is the version where the inexact object syntax\nwas added.\n\nYou may create multiple flow version directories to target different versions of\nFlow if necessary.\n\n#### 3) Place your libdef inside the flow version directory and name it `left-pad_v4.x.x.js`.\n\nThe name of the definition file must match the name of the package version\ndirectory two levels up. This, too, will be enforced by the library-definition\ntest runner.\n\n#### 4) Write a test file whose name starts with `test_` in the flow version directory.\n\n> Such as `test_left-pad_v4.x.x.js`\n\nTests are simply `test_*.js` files that sit next to the library definition\nfile. They are normal @flow-ified .js files that import from and use the types\ndeclared in the libdef in a way they are expected to be used.\n\nThe purpose of a test file is to exercise the library definition to some\nreasonable degree. At minimum your tests should:\n\n1. Import at least one thing from each of the modules `declare`'d in the\n   definition.\n1. Use the library definition in a couple of common ways that *should not*\n   produce a type error.\n1. Use the library definition in a couple of ways that are *expected* to produce\n   a type error. Though type errors should fail your tests, you can add [error suppressions](https://flow.org/en/docs/errors/) to the line above just like you would in your own codebase.\n\n[Here](https://github.com/flow-typed/flow-typed/blob/main/definitions/npm/highlight.js_v8.x.x/test_highlight.js-v8.js)\nis an example of a nice and thorough test file. You don't necessarily have to be\nthis thorough, but the more thorough you are the better!\n\nSometimes you may want to break down your test suite instead of having one gigantic file. In that case you can actually write as many test files as you like as long as their names start with `test_`. [Redux](https://github.com/flow-typed/flow-typed/tree/main/definitions/npm/redux_v4.x.x/flow_v0.134.x-) followed this pattern.\n\nAlternatively you can add test files in the **package version directory** which will be run by\nthe test-runner for *all* versions of flow the package version supports. Though general best practice as outlined above is using the **flow version directory**.\n\n#### 5) Run your tests\n\n```sh\n# You only need to run this once which will\n# build your local CLI allowing the test suite to run\n# and run definition validations/tests\n#\n# If you ever make changes to the CLI files,\n# make sure you rerun `./build.sh` to update the\n# local build of the CLI with your changes.\n./build.sh\n\n# Subsequent testing after initial build can just use the following.\n# This will run all changed files based on a git diff\n# note: If you find that your changed files aren't being picked up\n#       you can try `git add -A` then run the following script\n./quick_run_def_tests.sh\n# If you run this command at a high rate you may reach github's\n# unauthenticated rate limit.\n# Try adding a github auth token in those cases\nGITHUB_TOKEN=your_token ./quick_run_def_tests.sh\n\n# If you want to run something very specific,\n# taking the left-pad example you can point to the\n# local cli script and run tests against it\nnode cli/dist/cli.js run-tests left-pad\n\n# Running the local cli without any args will run `all`\n# tests which may take a while\nnode cli/dist/cli.js run-tests\n```\n\n> Windows instructions TBD if someone wants to help :construction_worker:\n\n#### 6) Send a pull request\n\nYou know how to do it.\n\n---\n\n#### Environment definitions\n\nThe above are instructions on how to submit a library definition against npm packages though the process is similar if contributing environment definitions. Except instead of a package directory you just have an environment package that is the name of the environment without the need of versions.\n\n## Libdef best practices\n\n### Read flow docs\n\nThere's a solid writeup in the [Flow docs](https://flow.org/en/docs/libdefs/creation/) about creating new library definitions. Give it a read!\n\n### Importing types from other libdefs\n\nOften times you may find yourself typing a package that relies on the types from another package. You can do this by first finding the definition at the flow version you'd like to import to and add a `config.json` file.\n\nHere you can declare a `deps` property that holds an object of dependent versions and their supported versions\n\n```json\n{\n  \"deps\": {\n    \"redux\": [\"v3.x.x\", \"v4.x.x\"],\n    \"koa\": [\"2.0.x\", \"2.x.x\"]\n  }\n}\n```\n\nThen in your definition module\n\n```js\ndeclare module 'other-module' {\n  import type { Action } from 'redux';\n\n  declare export function takesMyType(val: Action): number;\n}\n```\n\nOne important note here is that all definition flow version ranges **must** be aligned if you want them to depend on each other. This is a limitation of our test suite architecture.\n\nSay you have `react-redux` depending on `redux`; if the flow version with the dependency in `react-redux` is `v0.104.x-0.141.x` then that exact version range must exist in `redux` for testing compatibility. Any other flow version ranges in either definitions can have any range they please if they don't depend on one another.\n\n> Yes, this could lead to overly fragmented flow definition ranges if a definition has many dependencies.\n\n---\n\n**What about `react` types??**\n\nYou can use the raw, private React types (e.g. `React$Node`, `React$ComponentType`) directly without importing them. You can also import the types without declaring it as `\"deps\"` as they're part of the core flow libs like other node internal packages:\n\n```js\ndeclare module 'example' {\n  import type { Node } from 'react';\n}\n```\n\n### Avoid `any` when possible\n\nUsing the `any` type for a variable or interface results in the loss of type information as types pass through it. That means if a type passes through `any` before propagating on to other code, the `any` will potentially cause flow to miss type errors!\n\nIn many places it is better (but also stricter) to use the `mixed` type rather than the `any` type. The `mixed` type is safer in that it allows anything to flow in to it, but can never be used downstream without [dynamic type tests](https://flow.org/en/docs/lang/refinements/#_) that verify the type at runtime.\n\nConsider this code:\n\n```js\nconst cache = new Map();\nfunction setCache(key: string, value: any) {\n  cache.set(key, value);\n}\nfunction getCache(key: string) {\n  return cache.get(key);\n}\n\nsetCache('foo', 42);\nvar someString = getCache('foo'); // oops, 'foo' isn't a string!\nsomeString.length; // but because we used `any`, we don't know toerror here!\n```\n\nBecause we've typed the values of the map as `any`, we open ourselves up to type errors:\n\nIf, however, we had used `mixed` instead of `any`, flow would ask us to verify that the type we got back from `getCache()` is in fact a `string` before using it as one:\n\n```js\nconst cache = new Map();\nfunction setCache(key: string, value: mixed) {\n  cache.set(key, value);\n}\nfunction getCache(key: string) {\n  return cache.get(key);\n}\n\nsetCache('foo', 42);\nvar someString = getCache('foo');\nif (typeof someString === 'string') {\n  someString.length;\n} else {\n  throw new Error('`foo` is unexpectedly something other than a string!');\n}\n```\n\nBecause we used a dynamic type test in the second example, we've proved to flow that the `mixed` result must be a string. If we hadn't done this, flow would have given us an error reminding us that the value could be anything and it isn't safe to assume without checking first.\n\nThere is sometimes a trade-off with using `mixed`, though. Using `mixed` means that if your variable ever does flow downstream, you'll always have to prove what kind of type it is (with a type test) before you can use it. Sometimes this is just too annoying and the risk involved with `any` is just worth the trade-off.\n\nIn the case of library definitions, it is almost always better to use `mixed` for function and method parameters because the trade-off is hidden from users:\n\n```js\ndeclare function setCache(key: string, value: mixed): void;\n\nsetCache('number', 42); // Ok\nsetCache('string', 'asdf'); // Ok\n```\n\nIt is also almost always ok to use `mixed` as the return type of a callback:\n\n```js\ndeclare function getUser(cb: (user: User) => mixed): void;\ngetUser((user) => console.log('Got the user!'));\n```\n\nUsing `mixed` in place of `any` for the return type of a function or the type of a variable is a judgement call, though. Return types and declared variables flow into users' programs, which means that users will have to prove the type of `mixed` before they can use them.\n\n### Exporting modules\n\nWhen you export a module, you have a choice to use CommonJS or ES6 syntax. We generally recommend to use ES6 syntax. As [discussed here](https://github.com/flow-typed/flow-typed/issues/1859#issuecomment-374575368), if you need both named exports and a default export, then you need to use the ES6 syntax.\n\nLearn to export [es6](https://flow.org/en/docs/libdefs/creation/#toc-declaring-an-es-module) or [commonjs](https://flow.org/en/docs/libdefs/creation/#toc-declaring-a-commonjs-module) modules.\n\n### Declaring types\n\nTypes in contrast to variables when declared inside a module do not need to be explicitly exported as they will be exported automatically.\n\nThese two will work the same\n```js\ndeclare type Func = () => void;\ndeclare export type Func = () => void;\n```\n\nIt can then be used like the following, though be aware that even if you're using commonjs in your consuming module your imports will still use es6 import syntax.\n```js\n// In a commonjs module\nimport type { Func } from 'my-module';\n\nconst Foo = require('my-module');\n\n// ---\n// In an es module\nimport Foo, { type Func } from 'my-module';\n```\n\n---\n\nBecause of this feature you may opt to break down types into separate declarations as opposed to inlining them on a variable or property to make it easier for library consumers to cast or annotate a variable.\n\n```js\ndeclare type Options = { ... };\n\nclass Foo {\n  constructor(options?: Options): this;\n}\n\n// or\ntype Bar = { ... };\n\ndeclare module.exports: Bar;\n```\n\n### Avoid global types\n\nSometimes you see global definitions like `$npm$ModuleName$`. This is due to the fact that in the past flow didn't support private types. **Global types should not be used anymore**. Since then Flow has added support for `declare export` which means that every type which doesn't have it are defined as private and can't be imported, see https://flow.org/en/docs/libdefs/creation/#toc-declaring-an-es-module for details.\n\n### Prefer immutability\n\nIf the function does not mutate input values, always prefer immutable types.\nThis is imporant since immutable types accepts mutable types in, but mutable types does not accept immutable types in, see [good example](https://flow.org/try/#0PTAEAEDMBsHsHcBQiAmBTAxtAhgJzaJAK4B2GALgJawmjloDO5AFJSQA5HkBcoAJACU02FAHkS0AJ4BBXLmySAPCSIBbAEZpcAPgCUvAG6xKKANzIMNJoVoBeUMzy5es+UpUate0Le2gA3oigoACQTgB0nAwAFswAjABMAMy6iCH0TI5yuuYAvohAA) and [bad example](https://flow.org/try/#0PTAEAEDMBsHsHcBQiAmBTAxtAhgJzaJAK4B2GALgJawmjloDO5AFJSQA5HkBcoAgrlzYAngB4SRALYAjNLgB8ASl4A3WJRQBuZBhpNCtALyhmeXLwAkAJTTYUAeRLRhAoWIky5S0IfmgA3ogAkPRMpoKK2gC+iEA)\n- Instead of `Array<string>` use `$ReadOnlyArray<string>`\n- Instead of `{ value: string }` prefer `{ +value: string }` [$ReadOnly<{ value: string }>](https://flow.org/en/docs/types/utilities/#toc-readonly)\n\n### Prefer exactness\n\nIf the object has known set of properties, always define them as exact:\n- Instead of `{ +value: string }` prefer `{| +value: string |}`\n\n### Partial/definitions definitions\n\nWe welcome contributions of partial, incomplete or work-in-progress definitions!\nWhen submitting a partial definition, please stub out the missing parts with `any`.\nIf the definition was generated from `create-stub`, those parts should already be stubbed.\n\n### A note on flowgen\n\n[flowgen](https://github.com/joarwilk/flowgen) is a CLI tool that generates flowtype definitions from TypeScript types.\nWhile it supports most of the TypeScript syntax, in some cases manual changes may be needed before use.\nYou can check out supported syntax constructs in thier section on the [state of the converter](https://github.com/joarwilk/flowgen#the-state-of-the-converter).\n\n## Writing tests\n\n### Use `describe` and `it` blocks to limit scope\n\nYou can use `describe` and `it` verbs, much like you do in Mocha/Jest/whatever, to write descriptive tests and limit scope. These are available under 'flow-typed-test'. (Note that they don't actually run tests, they're just sugar to limit scope and emulate the TDD language with which we're all familiar).\n\n```js\nimport { describe, it } from 'flow-typed-test';\n\ndescribe('#someFunction', () => {\n  it('should do something', () => {\n    const a: number = 1;\n  });\n\n  // you can also do type checks outside an it statement\n  //$FlowExpectedError\n  const a: number = 'foo';\n})\n```\n\n`describe` or `it` have the potential of causing collisions. In the event of a name collision, import them under new names.\n\n```js\nimport { describe as foo, it as bar } from 'flow-typed-test';\n\nfoo('#someFunction', () => {\n  bar('should do something', () => {\n    const a: number = 1;\n  });\n\n  // you can also do type checks outside an it statement\n  //$FlowExpectedError\n  const a: number = 'foo';\n});\n```\n\n## Owning definitions\n\nSo you've contributed to a definition and would like to be involved in future maintenance if it gets updated. `flow-typed` allows you to add a `CODEOWNERS` file in either a definition scope (`@scope/`) or definition version (`package_vx.x.x/`) level.\n\nEqually if you want to get notified of updates to `environment` definitions you can add or update the `CODEOWNERS` file in the `environment/env` directory.\n\nJust add your github handle to the file as a newline and you'll be notified next time a pull request is raised if it touched files nested in the `CODEOWNERS` directory.\n\n![bot-pr-comment](docs/_media/bot-pr-comment.png)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Murphy Randle\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "PULL_REQUEST_TEMPLATE.md",
          "type": "blob",
          "size": 0.2802734375,
          "content": "<!--- # Please remember to use `describe` and `it`in the tests! see https://github.com/flow-typed/flow-typed/blob/main/CONTRIBUTING.md for details. --->\n\n- Links to documentation:\n- Link to GitHub or NPM:\n- Type of contribution: new definition | addition | fix | refactor\n\nOther notes:\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.859375,
          "content": "<p align=\"center\">\n  <a href=\"https://flow-typed.github.io/flow-typed\">\n    <img alt=\"flow-typed\" src=\"./docs/_media/flow.svg\">\n  </a>\n</p>\n\n<p align=\"center\">\n  A <a href=\"https://github.com/flow-typed/flow-typed/tree/main/definitions\">repository</a> of\n  high-quality, third-party <a href=\"https://flow.org/en/docs/libdefs\">library type definitions</a>\n  for use with <a href=\"http://flow.org\">Flow</a>.\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/flow-typed/flow-typed/actions/workflows/main.yml\">\n    <img src=\"https://github.com/flow-typed/flow-typed/workflows/CI/badge.svg\" alt=\"ci status\">\n  </a>\n  <a href=\"https://www.npmjs.com/package/flow-typed\"><img src=\"https://img.shields.io/npm/v/flow-typed.svg\" alt=\"npm package\"></a>\n  <a href=\"https://flow-typed.github.io/flow-typed/#/\"><img src=\"https://img.shields.io/badge/docs-latest-blueviolet\" alt=\"docs\"></a>\n  <a href=\"https://discordapp.com/invite/8ezwRUK\">\n    <img src=\"https://img.shields.io/discord/539606376339734558.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=555555&cacheSeconds=60\" alt=\"discord\">\n  </a>\n  <a href=\"https://snyk.io/advisor/npm-package/flow-typed\">\n    <img src=\"https://snyk.io/advisor/npm-package/flow-typed/badge.svg?\" alt=\"package health\">\n  </a>\n</p>\n\n> [!NOTE]  \n> We want to keep the flow-typed community informed about the current state and future direction of the project. As you might have noticed, our activity has slowed down in recent months. However, we are committed to maintaining the functionality of flow-typed and will continue to fix any issues that arise with new releases of Flow.\n>\n> While we're not planning any major new features at the moment, we remain open to feature contributions from the community. Our focus remains on ensuring that the existing features work well and that type definitions are kept up to date. We appreciate the value that these contributions bring and encourage anyone interested in enhancing flow-typed to get involved.\n\nCheck out the [quick start](https://flow-typed.github.io/flow-typed/#/quickstart) page\nin the docs to get started. It will walk you through installing typedefs, using them,\nas well as writing and including your own.\n\n## Huh?\n\nWhen you start a project with Flow, **you likely want to use some third-party\nlibraries that were *not* written with Flow**. By default, Flow will just ignore\nthese libraries **leaving them untyped**. As a result, Flow can't give errors if\nyou accidentally mis-use the library (nor will it be able to auto-complete the\nlibrary).\n\nTo address this, **Flow supports\n[library definitions](https://flow.org/en/docs/libdefs)** which allow\nyou to describe the interface of a module or library separate from the\nimplementation of that module/library.\n\n**The `flow-typed` repo is a collection of high-quality library definitions**,\ntests to ensure that definitions remain high quality, and tooling to make it\nas easy as possible to import them into your project.\n\nAll you have to do when you add one or more new dependencies to your project\nis run `flow-typed install`. This will search the libdef repo and download all\nthe libdefs that are relevant for your project and install them for you. After\nthat, **simply check them in** and be on your way!\n\n## The CLI\n\nThe `flow-typed` npm package provides a CLI that includes several commands for\nworking with this repository. The full list of commands is available\n[in the docs](https://flow-typed.github.io/flow-typed/#/install) .\n\n## FAQs\n\nBefore opening an issue, take a look at the [FAQs](https://flow-typed.github.io/flow-typed/#/faq).\nChances are your question has already been answered! If not, don't hesitate to\n[open an issue](https://github.com/flow-typed/flow-typed/issues/new).\n\n## How Do I Contribute Library Definitions?\n\nJust send a pull request! The documentation highlighted in [CONTRIBUTING.md](https://github.com/flow-typed/flow-typed/blob/main/CONTRIBUTING.md) should give a detailed overview of how to raise a pull request following our best practices.\n\n### Contributing to the CLI\n\nBugfixes and improvements to the core CLI are welcome. If you'd like to contribute\na new feature, consider opening an issue first to discuss it.\n\n## Active Maintenance Team\n\n[![Andrew Smith](https://github.com/andrewsouthpaw.png?size=100)](https://github.com/andrewsouthpaw) | [![Brian Chen](https://github.com/Brianzchen.png?size=100)](https://github.com/Brianzchen)  | [![Georges-Antoine Assi](https://github.com/gantoine.png?size=100)](https://github.com/gantoine) | [![Pascal Duez](https://github.com/pascalduez.png?size=100)](https://github.com/pascalduez) | [![Ville Saukkonen](https://github.com/villesau.png?size=100)](https://github.com/villesau)\n:---:|:---:|:---:|:---:|:---:\n[@AndrewSouthpaw](https://github.com/andrewsouthpaw) | [@Brianzchen](https://github.com/Brianzchen) | [@GAntoine](https://github.com/gantoine) | [@pascalduez](https://github.com/pascalduez) | [@villesau](https://github.com/villesau)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.56640625,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 3.x.x   | :white_check_mark: |\n| < 3.0   | :x:                |\n\n## Reporting a Vulnerability\n\nPlease report (suspected) security vulnerabilities to [security@flowtyped.fastmail.com](mailto:security@flowtyped.fastmail.com).\nIf you do not receive a response within 48 hours, contact a flow-typed team member on the\n[Flow Discord](https://discord.gg/e6p4b2q3eD) server. If the issue is confirmed, we will release a \npatch as soon as possible, depending on its complexity.\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.203125,
          "content": "#!/bin/sh\n#set -e\n\ncd definitions && \\\nyarn install && \\\nyarn test && \\\ncd ../cli && \\\nyarn && \\\nyarn run flow && \\\nnode dist/cli.js validate-defs ../definitions && \\\nnode dist/cli.js run-tests --onlyChanged\n"
        },
        {
          "name": "build_and_test_cli.cmd",
          "type": "blob",
          "size": 0.154296875,
          "content": "cd definitions\ncall yarn install\ncall yarn test\ncd ..\\cli\ncall yarn install\nnode dist\\cli.js validate-defs ..\\definitions\nnode dist\\cli.js run-tests %*\ncd ..\n"
        },
        {
          "name": "build_and_test_cli.sh",
          "type": "blob",
          "size": 0.1142578125,
          "content": "#!/bin/sh\nset -e\n\ncd definitions\nyarn install\nyarn test\ncd ../cli\nyarn\nnode dist/cli.js validate-defs ../definitions\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "create_def.sh",
          "type": "blob",
          "size": 0.0537109375,
          "content": "#!/bin/sh\nset -e\n\nnode cli/dist/cli.js create-def \"$@\"\n"
        },
        {
          "name": "definitions",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "flow-typed-logo.png",
          "type": "blob",
          "size": 57.1494140625,
          "content": null
        },
        {
          "name": "quick_run_def_tests.cmd",
          "type": "blob",
          "size": 0.0439453125,
          "content": "node cli/dist/cli.js run-tests --onlyChanged\n"
        },
        {
          "name": "quick_run_def_tests.sh",
          "type": "blob",
          "size": 0.4697265625,
          "content": "#!/bin/sh\n\n# Run this \"quick test\" script when you want a faster feedback loop on tests for your libdef. This script runs the\n# libdef tests for any *changed* libdefs. (Also, it only runs tests against the most recent flow version libdef.)\n#\n# Prerequisite: you have run `build_and_test_cli.sh` before so you have a valid build of the flow-typed cli (which\n# actually runs the tests).\n#\n# Usage: `$ ./quick_run_def_tests`\n\nset -e\n\nnode cli/dist/cli.js run-tests --onlyChanged \"$@\"\n"
        },
        {
          "name": "test_harness.sh",
          "type": "blob",
          "size": 0.541015625,
          "content": "#!/bin/sh\n\nflowVersion=$1\nif [ -z \"$flowVersion\" ]\nthen\n  lib=\"flow-bin@latest\"\nelse\n  lib=\"flow-bin@$flowVersion\"\nfi\n\nif [ -d \"./harness\" ]\nthen\n  cd harness\n  npm i --save-dev $lib\nelse\n  mkdir harness\n  cd harness\n  npm init -y\n  npm i --save-dev $lib\n  npx flow-setup flow-typed-harness\n  cp ../docs/harness.md README.md\n  cat <<EOF > definition.js\ndeclare module \"\" {\n\n}\nEOF\n  cat <<EOF > test_definition.js\n// @flow\nimport { describe, it } from 'flow-typed-test';\n// import lib from 'test';\n\ndescribe('', () => {\n  it('', () => {\n\n  });\n});\nEOF\nfi\n"
        }
      ]
    }
  ]
}