{
  "metadata": {
    "timestamp": 1736561874169,
    "page": 548,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "airbnb/polyglot.js",
      "stars": 3712,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.267578125,
          "content": "{\n  \"root\": true,\n\n  \"extends\": \"airbnb-base/legacy\",\n\n  \"parserOptions\": {\n    \"sourceType\": \"script\"\n  },\n\n  \"rules\": {\n    \"func-names\": 0,\n    \"one-var\": 0,\n    \"one-var-declaration-per-line\": 0,\n    \"no-use-before-define\": 1,\n    \"vars-on-top\": 0,\n    \"yoda\": 0,\n  }\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.146484375,
          "content": "# gitignore\n\n.DS_Store\nnode_modules\nbuild/*.gz\n*.sw?\n\n# Only apps should have lockfiles\nnpm-shrinkwrap.json\npackage-lock.json\nyarn.lock\n\n.nyc_output/\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.66015625,
          "content": "### v2.5.0: January 23, 2023\n * [New] Add `replace` option for custom replace implementation (#171)\n * [New] Add Romanian and Macedonian (#176)\n * [Deps] update array.prototype.foreach, object.entries, `string.prototype.trim` (#172)\n * [Tests] Migrate tests to GitHub Actions (#169)\n * [Tests] Add passing tests (#168)\n\n### v2.4.2: August 16, 2021\n * [Fix] Handle null and undefined gracefully in extend and unset (#161)\n\n### v2.4.1: August 16, 2021\n * [Fix] French starts plural at 2 (#154)\n * [Refactor] Replace `for-each` with `object.entries` and `array.prototype.foreach` (#127)\n * [Performance] Add plural type name memoization (#158)\n * [Deps] Update `string.prototype.trim` (#127)\n * [Dev Deps] update `chai`, `safe-publish-latest`, `eslint`, `eslint-plugin-import` (#127)\n\n### v2.4.0: September 10, 2019\n * [New] add ability to configure pluralization rules (#138)\n\n### v2.3.1: June 20, 2019\n * [Fix] fix plurals for Russian with n > 100 (#119)\n * [Performance] Remove unnecessary dollar signs replacement (#132)\n * [Docs] fix typo in the Czech example (#123)\n * [Deps] update `warning`\n * [Dev Deps] update `chai`, `eslint`, `eslint-config-airbnb-base`, `eslint-plugin-import`, `safe-publish-latest`, `uglify-js`\n * [Tests] on `node` `v12`, `v11`, `v10`\n\n### v2.3.0: July 2, 2018\n * [New] add ability to change interpolation regex by specifying prefix and suffix (#106, #64)\n * [New] support for Serbian (Latin & Cyrillic), Bosnian (Latin & Cyrillic), Czech (#113)\n * [Fix] Moved lt to it's own group (#101)\n * [Fix] Moved tr from chinese to german group (#100)\n * [Fix] Move persian(fa) language to german group of pluralization (#86)\n * [Fix] Remove long-since-updated build files\n * [Fix] fix russian pluralization; add tests (#115)\n * [Fix] croatian is not russian (#114)\n * [Clarity] add more specific locales, even though language codes will match them (#115)\n * [Docs] document constructor options (#84)\n * [Docs] document all instance and static methods (#83)\n * [Docs] fix spelling of \"delimiter\" (#91)\n * [Docs] `onMissingKey` can (rather, should) return a value (#95)\n * [Docs] fix instructions to only recommend use with npm (#96)\n * [Docs] Added documentation for method has (#104)\n * [Docs] add example for languages with multiple plurals (#108)\n * [Docs] remove outdated sentence (#112, #110)\n * [Deps] update `for-each`, `has`, `warning`\n * [Dev Deps] update `chai`, `eslint`, `eslint-config-airbnb-base`, `eslint-plugin-import`, `mocha`; remove `should`\n * [Tests] up to `node` `v10`; use `nvm install-latest-npm` to ensure new npm doesn’t break old node; improve matrix\n\n### v2.2.2: January 5, 2017\n * [Fix] revert unintentional breaking change of missing substitutions being untouched\n * [Dev Deps] update `eslint`, `eslint-config-airbnb-base`, `mocha`, `should`; add `safe-publish-latest`\n\n### v2.2.1: November 18, 2016\n * [Fix] restore behavior of explicit null/undefined not touching the substitution\n\n### v2.2.0: November 14, 2016\n * [New] add `onMissingKey` constructor option - this can call `.transformPhrase`, or return `false`, or `undefined`, or throw - whatever you like (#34, #77)\n * [Dev Deps] update `eslint`\n\n### v2.1.3: January 5, 2017\n * [Fix] revert unintentional breaking change of missing substitutions being untouched\n\n### v2.1.2: November 18, 2016\n * [Fix] restore behavior of explicit null/undefined not touching the substitution\n\n### v2.1.1: November 13, 2016\n * [Fix] ensure that missing or null substitutions don’t crash (#79)\n\n### v2.1.0: November 11, 2016\n * [New] Merge choosePluralForm & interpolate into one exported function: `transformPhrase` (#75)\n * [New] Allow locales to have regions (#70)\n * [New] Support Arabic pluralization (#71)\n * [New] Added Lithuanian locale to russian group of pluralization (#68)\n * [Deps] update `object.assign`, `warning`\n * [Dev Deps] pin `uglify-js` because it does not follow semver\n * [Dev Deps] update `eslint-config-airbnb-base`, `eslint`, `eslint-plugin-import`, `mocha`, `should`, `uglify-js`\n * [Performance] instead of creating a new regex for each token, use the function form of `replace` (#19)\n * [Refactor] use `warning` package for warnings\n * [Robustness] Use `has` package to properly check “has own property”\n * [Robustness] use `string.prototype.trim` rather than a homegrown trim polyfill\n * [Tests] only test on latest `node` `v7`, `v6`, `v5`, `v4`, and `iojs`; improve test matrix\n * [Tests] add linting\n\n### v2.0.0: April 6, 2016\n * [Breaking] Remove non-node support + use object.assign/for-each.\n * [New] Add Slovak language to the Czech pluralization group\n * [Fix] fix`warn` messages in `node`, where `this` is not the global object\n * [Tests] up to `node` `v5.10`, `v4.4`\n * [Tests] decaffeinate tests\n\n### v1.0.0: November 29, 2015\n * [Tests] up to `node` `v5.1`\n * [Tests] fix npm upgrades on older nodes\n * [Dev Deps] update `uglify-js`, `docco`, `should`, `mocha`, and fix test pollution\n\n### v0.4.5: November 29, 2015\n * [Fix] Ensure that dollar signs are properly escaped in substitutions (#43)\n * [Docs] use SPDX-compliant license string (#44)\n\n### v0.4.4: October 26, 2015\n * [New] Add `unset` method (#43)\n * [Tests] test on travis-ci\n\n### v0.4.3: June 26, 2015\n * Add `.has(key)` method (thanks @scarfacedeb).\n * Add UMD wrapper for AMD support (thanks @TomOne).\n\n### v0.4.2: March 13, 2015\n * Allow blank translations.\n\n### v0.4.1: July 14, 2014\n * Added support for `warn` option for custom error handler (thanks @terinjokes).\n * Added some more plural forms (thanks @jgill333).\n\n### v0.4.0: May 22, 2014\n * Added support for nested phrase objects to `extend()` and in the `phrases` option in the constructor.\n\n### v0.3.0: August 6, 2013\n * _Breaking change_: Removed `pluralize()` method; instead, just use the `t()` method, passing in a `smart_count` option.\n * _Breaking change_: Removed the ability to use `Array`, `Backbone.Collection`, etc. instances for the `smart_count` option; instead, must pass a `Number`.\n * Allow passing `Number` as second argument to `t()`, which gets converted to the options object `{smart_count: <my number>}`.\n\n### v0.2.1: May 2, 2013\n * Added `allowMissing` option to let the phrase key be the default translation (thanks @ziad-saab).\n\n### v0.2.0: Dec 20, 2012\n * _Breaking change_: Moved from Singleton pattern to class-based. Now you create an instance of the `Polyglot` class rather than using class methods directly on it. The reason is to allow maintaining multiple sets of phrases, which is something we ran into at Airbnb with a highly-concurrent Express app.\n * _Breaking change_: Removed the built-in Handlebars helpers, because Handlebars is a singleton, and it's messy to create a single helper function that can be bound to different Polyglot instances.  Instead, it's super easy to create your own, based on your requirements.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.28515625,
          "content": "BSD 2-Clause License\n\nCopyright (c) 2012, Airbnb\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.3232421875,
          "content": "clean:\n\t@rm -rf build\n\nbuild-js:\n\t@mkdir -p build\n\t@cp ./index.js ./build/polyglot.js\n\t@./node_modules/.bin/uglifyjs -o ./build/polyglot.min.js ./index.js\n\t@gzip -c ./build/polyglot.min.js > ./build/polyglot.min.js.gz\n\nannotate:\n\t@./node_modules/.bin/docco ./index.js\n\nbuild: clean build-js\n\n\n.PHONY: clean build build-js annotate\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.1748046875,
          "content": "Polyglot.js\n===========\n\n[![Build Status][travis-image]][travis-url]\n\n[![Join the chat at https://gitter.im/airbnb/polyglot.js](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/airbnb/polyglot.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nPolyglot.js is a tiny I18n helper library written in JavaScript, made to work both in the browser and in CommonJS environments (Node). It provides a simple solution for interpolation and pluralization, based off of Airbnb’s experience adding I18n functionality to its Backbone.js and Node apps. \n\nI18n is incredibly important for us at [Airbnb](https://www.airbnb.com/), as we have listings in 192 countries, and we translate our site into 30-odd different languages.\nWe’re also [hiring talented engineers](https://www.airbnb.com/jobs/departments/engineering) to help us scale up to meet the challenges of building a global marketplace.\n\nView the [documentation on Github](https://github.com/airbnb/polyglot.js).\n\nView the [annotated source](https://airbnb.io/polyglot.js/polyglot.html).\n\nPolyglot is agnostic to your translation backend. It doesn’t perform any translation; it simply gives you a way to manage translated phrases from your client- or server-side JavaScript application.\n\n## Installation\n\ninstall with [npm](https://npmjs.org):\n\n    $ npm install node-polyglot\n\n### Running the tests\n\nClone the repo, run `npm install`, and `npm test`.\n\n## Usage\n\n### Instantiation\n\nFirst, create an instance of the `Polyglot` class, which you will use for translation.\n\n```js\nvar polyglot = new Polyglot();\n```\n\nPolyglot is class-based so you can maintain different sets of phrases at the same time, possibly in different locales. This is very useful for example when serving requests with [Express](http://expressjs.com), because each request may have a different locale, and you don’t want concurrent requests to clobber each other’s phrases.\n\nSee [Options Overview](#options-overview) for information about the options object you can choose to pass to `new Polyglot`.\n\n### Translation\n\nTell Polyglot what to say by simply giving it a phrases object,\nwhere the key is the canonical name of the phrase and the value is\nthe already-translated string.\n\n```js\npolyglot.extend({\n  \"hello\": \"Hello\"\n});\n\npolyglot.t(\"hello\");\n=> \"Hello\"\n```\n\nYou can also pass a mapping at instantiation, using the key `phrases`:\n\n```js\nvar polyglot = new Polyglot({phrases: {\"hello\": \"Hello\"}});\n```\n\nPolyglot doesn’t do the translation for you. It’s up to you to give it\nthe proper phrases for the user’s locale.\n\nA common pattern is to gather a hash of phrases in your backend, and output\nthem in a `<script>` tag at the bottom of the document. For example, in Rails:\n\n`app/controllers/home_controller.rb`\n\n```ruby\ndef index\n  @phrases = {\n    \"home.login\" => I18n.t(\"home.login\"),\n    \"home.signup\" => I18n.t(\"home.signup\"),\n    ...\n  }\nend\n```\n\n`app/views/home/index.html.erb`\n\n```html\n<script>\n  var polyglot = new Polyglot({phrases: <%= raw @phrases.to_json %>});\n</script>\n```\n\nAnd now you can utilize i.e. `polyglot.t(\"home.login\")` in your JavaScript application\nor Handlebars templates.\n\n### Interpolation\n\n`Polyglot.t()` also provides interpolation. Pass an object with key-value pairs of\ninterpolation arguments as the second parameter.\n\n```js\npolyglot.extend({\n  \"hello_name\": \"Hola, %{name}.\"\n});\n\npolyglot.t(\"hello_name\", {name: \"DeNiro\"});\n=> \"Hola, DeNiro.\"\n```\n\nPolyglot also supports nested phrase objects.\n\n```js\npolyglot.extend({\n  \"nav\": {\n    \"hello\": \"Hello\",\n    \"hello_name\": \"Hello, %{name}\",\n    \"sidebar\": {\n      \"welcome\": \"Welcome\"\n    }\n  }\n});\n\npolyglot.t(\"nav.sidebar.welcome\");\n=> \"Welcome\"\n```\n\nThe substitution variable syntax is customizable.\n\n```js\nvar polyglot = new Polyglot({\n  phrases: {\n    \"hello_name\": \"Hola {{name}}\"\n  },\n  interpolation: {prefix: '{{', suffix: '}}'}\n});\n\npolyglot.t(\"hello_name\", {name: \"DeNiro\"});\n=> \"Hola, DeNiro.\"\n```\n\n### Pluralization\n\nFor pluralization to work properly, you need to tell Polyglot what the current locale is. You can use `polyglot.locale(\"fr\")` to set the locale to, for example, French. This method is also a getter:\n\n```js\npolyglot.locale()\n=> \"fr\"\n```\n\nYou can also pass this in during instantiation.\n\n```js\nvar polyglot = new Polyglot({locale: \"fr\"});\n```\n\nCurrently, the _only_ thing that Polyglot uses this locale setting for is pluralization.\n\nPolyglot provides a very basic pattern for providing pluralization based on a single string that contains all plural forms for a given phrase. Because various languages have different nominal forms for zero, one, and multiple, and because the noun can be before or after the count, we have to be overly explicit about the possible phrases.\n\nTo get a pluralized phrase, still use `polyglot.t()` but use a specially-formatted phrase string that separates the plural forms by the delimiter `||||`, or four vertical pipe characters.\n\nFor pluralizing \"car\" in English, Polyglot assumes you have a phrase of the form:\n\n```js\npolyglot.extend({\n  \"num_cars\": \"%{smart_count} car |||| %{smart_count} cars\",\n});\n```\nPlease keep in mind that `smart_count` is required. No other option name is taken into account to transform pluralization strings.\n\nIn English (and German, Spanish, Italian, and a few others) there are only two plural forms: singular and not-singular.\n\nSome languages get a bit more complicated. In Czech, there are three separate forms: 1, 2 through 4, and 5 and up. Russian is even more involved.\n\n```js\nvar polyglot = new Polyglot({locale: \"cs\"}); // Czech\npolyglot.extend({\n  \"num_foxes\": \"Mám %{smart_count} lišku |||| Mám %{smart_count} lišky |||| Mám %{smart_count} lišek\"\n})\n```\n\n`polyglot.t()` will choose the appropriate phrase based on the provided `smart_count` option, whose value is a number.\n\n```js\npolyglot.t(\"num_cars\", {smart_count: 0});\n=> \"0 cars\"\n\npolyglot.t(\"num_cars\", {smart_count: 1});\n=> \"1 car\"\n\npolyglot.t(\"num_cars\", {smart_count: 2});\n=> \"2 cars\"\n```\n\nAs a shortcut, you can also pass a number to the second parameter:\n\n```js\npolyglot.t(\"num_cars\", 2);\n=> \"2 cars\"\n```\n\n#### Custom Pluralization Rules\n\nPolyglot provides some default pluralization rules for some locales. You can specify a different set of rules through the `pluralRules` constructor param.\n\n```js\nvar polyglot = new Polyglot({\n  pluralRules: {\n    pluralTypes: {\n      germanLike: function (n) {\n        // is 1\n        if (n === 1) {\n          return 0;\n        }\n        // everything else\n        return 1;\n      },\n      frenchLike: function (n) {\n        // is 0 or 1\n        if (n <= 1) {\n          return 0;\n        }\n        // everything else\n        return 1;\n      }\n    },\n    pluralTypeToLanguages: {\n      germanLike: ['de', 'en', 'xh', 'zu'],\n      frenchLike: ['fr', 'hy']\n    }\n  }\n});\n```\n\nThis can be useful to support locales that polyglot does not support by default or to change the rule definitions.\n\n## Public Instance Methods\n\n### Polyglot.prototype.t(key, interpolationOptions)\n\nThe most-used method. Provide a key, and `t()` will return the phrase.\n\n```\npolyglot.t(\"hello\");\n=> \"Hello\"\n```\n\nThe phrase value is provided first by a call to `polyglot.extend()` or `polyglot.replace()`.\n\nPass in an object as the second argument to perform interpolation.\n\n```\npolyglot.t(\"hello_name\", {name: \"Spike\"});\n=> \"Hello, Spike\"\n```\n\nPass a number as the second argument as a shortcut to `smart_count`:\n\n```js\n// same as: polyglot.t(\"car\", {smart_count: 2});\npolyglot.t(\"car\", 2);\n=> \"2 cars\"\n```\n\nIf you like, you can provide a default value in case the phrase is missing.\nUse the special option key \"_\" to specify a default.\n\n```js\npolyglot.t(\"i_like_to_write_in_language\", {\n  _: \"I like to write in %{language}.\",\n  language: \"JavaScript\"\n});\n=> \"I like to write in JavaScript.\"\n```\n\n### Polyglot.prototype.extend(phrases)\n\nUse `extend` to tell Polyglot how to translate a given key.\n\n```js\npolyglot.extend({\n  \"hello\": \"Hello\",\n  \"hello_name\": \"Hello, %{name}\"\n});\n```\n\nThe key can be any string. Feel free to call `extend` multiple times; it will override any phrases with the same key, but leave existing phrases untouched.\n\n### Polyglot.prototype.unset(keyOrObject)\nUse `unset` to selectively remove keys from a polyglot instance.\n`unset` accepts one argument: either a single string key, or an object whose keys are string keys, and whose values are ignored unless they are nested objects (in the same format).\n\nExample:\n```js\npolyglot.unset('some_key');\npolyglot.unset({\n  hello: 'Hello',\n  hello_name: 'Hello, %{name}',\n  foo: {\n    bar: 'This phrase’s key is \"foo.bar\"'\n  }\n});\n```\n\n### Polyglot.prototype.locale([localeToSet])\n\nGet or set the locale (also can be set using the [constructor option](#options-overview), which is used only for pluralization.\nIf a truthy value is provided, it will set the locale. Afterwards, it will return it.\n\n### Polyglot.prototype.clear()\n\nClears all phrases. Useful for special cases, such as freeing up memory if you have lots of phrases but no longer need to perform any translation. Also used internally by `replace`.\n\n\n### Polyglot.prototype.replace(phrases)\n\nCompletely replace the existing phrases with a new set of phrases.\nNormally, just use `extend` to add more phrases, but under certain circumstances, you may want to make sure no old phrases are lying around.\n\n### Polyglot.prototype.has(key)\n\nReturns `true` if the key does exist in the provided phrases, otherwise it will return `false`.\n\n## Public Static Methods\n\n### transformPhrase(phrase[, substitutions[, locale]])\n\nTakes a phrase string and transforms it by choosing the correct plural form and interpolating it. This method is used internally by [t](#polyglotprototypetkey-interpolationoptions).\nThe correct plural form is selected if substitutions.smart_count is set.\nYou can pass in a number instead of an Object as `substitutions` as a shortcut for `smart_count`.\nYou should pass in a third argument, the locale, to specify the correct plural type. It defaults to `'en'` which has 2 plural forms.\n\n## Options Overview\n`new Polyglot` accepts a number of options:\n\n - `phrases`: a key/value map of translated phrases. See [Translation](https://github.com/airbnb/polyglot.js#translation).\n - `locale`: a string describing the locale (language and region) of the translation, to apply pluralization rules. see [Pluralization](#pluralization)\n - `allowMissing`: a boolean to control whether missing keys in a `t` call are allowed. If `false`, by default, a missing key is returned and a warning is issued.\n - `onMissingKey`: if `allowMissing` is `true`, and this option is a function, then it will be called instead of the default functionality. Arguments passed to it are `key`, `options`, and `locale`. The return of this function will be used as a translation fallback when `polyglot.t('missing.key')` is called (hint: return the key).\n - `interpolation`: an object to change the substitution syntax for interpolation by setting the `prefix` and `suffix` fields.\n - `pluralRules`: an object of `pluralTypes` and `pluralTypeToLanguages` to control pluralization logic.\n\n\n## [History](CHANGELOG.md)\n\n[travis-image]: https://travis-ci.org/airbnb/polyglot.js.svg\n[travis-url]: https://travis-ci.org/airbnb/polyglot.js\n\n## Related projects\n\n- [i18n-extract](https://github.com/oliviertassinari/i18n-extract): Manage localization with static analysis. (E.g. key usage extraction)\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 13.9658203125,
          "content": "//     (c) 2012-2018 Airbnb, Inc.\n//\n//     polyglot.js may be freely distributed under the terms of the BSD\n//     license. For all licensing information, details, and documentation:\n//     http://airbnb.github.com/polyglot.js\n//\n//\n// Polyglot.js is an I18n helper library written in JavaScript, made to\n// work both in the browser and in Node. It provides a simple solution for\n// interpolation and pluralization, based off of Airbnb's\n// experience adding I18n functionality to its Backbone.js and Node apps.\n//\n// Polylglot is agnostic to your translation backend. It doesn't perform any\n// translation; it simply gives you a way to manage translated phrases from\n// your client- or server-side JavaScript application.\n//\n\n'use strict';\n\nvar entries = require('object.entries');\nvar warning = require('warning');\nvar has = require('hasown');\n\nvar warn = function warn(message) {\n  warning(false, message);\n};\n\nvar defaultReplace = String.prototype.replace;\nvar split = String.prototype.split;\n\n// #### Pluralization methods\n// The string that separates the different phrase possibilities.\nvar delimiter = '||||';\n\nvar russianPluralGroups = function (n) {\n  var lastTwo = n % 100;\n  var end = lastTwo % 10;\n  if (lastTwo !== 11 && end === 1) {\n    return 0;\n  }\n  if (2 <= end && end <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n    return 1;\n  }\n  return 2;\n};\n\nvar defaultPluralRules = {\n  // Mapping from pluralization group plural logic.\n  pluralTypes: {\n    arabic: function (n) {\n      // http://www.arabeyes.org/Plural_Forms\n      if (n < 3) { return n; }\n      var lastTwo = n % 100;\n      if (lastTwo >= 3 && lastTwo <= 10) return 3;\n      return lastTwo >= 11 ? 4 : 5;\n    },\n    bosnian_serbian: russianPluralGroups,\n    chinese: function () { return 0; },\n    croatian: russianPluralGroups,\n    french: function (n) { return n >= 2 ? 1 : 0; },\n    german: function (n) { return n !== 1 ? 1 : 0; },\n    russian: russianPluralGroups,\n    lithuanian: function (n) {\n      if (n % 10 === 1 && n % 100 !== 11) { return 0; }\n      return n % 10 >= 2 && n % 10 <= 9 && (n % 100 < 11 || n % 100 > 19) ? 1 : 2;\n    },\n    czech: function (n) {\n      if (n === 1) { return 0; }\n      return (n >= 2 && n <= 4) ? 1 : 2;\n    },\n    polish: function (n) {\n      if (n === 1) { return 0; }\n      var end = n % 10;\n      return 2 <= end && end <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;\n    },\n    icelandic: function (n) { return (n % 10 !== 1 || n % 100 === 11) ? 1 : 0; },\n    slovenian: function (n) {\n      var lastTwo = n % 100;\n      if (lastTwo === 1) {\n        return 0;\n      }\n      if (lastTwo === 2) {\n        return 1;\n      }\n      if (lastTwo === 3 || lastTwo === 4) {\n        return 2;\n      }\n      return 3;\n    },\n    romanian: function (n) {\n      if (n === 1) { return 0; }\n      var lastTwo = n % 100;\n      if (n === 0 || (lastTwo >= 2 && lastTwo <= 19)) { return 1; }\n      return 2;\n    },\n    ukrainian: russianPluralGroups\n  },\n\n  // Mapping from pluralization group to individual language codes/locales.\n  // Will look up based on exact match, if not found and it's a locale will parse the locale\n  // for language code, and if that does not exist will default to 'en'\n  pluralTypeToLanguages: {\n    arabic: ['ar'],\n    bosnian_serbian: ['bs-Latn-BA', 'bs-Cyrl-BA', 'srl-RS', 'sr-RS'],\n    chinese: ['id', 'id-ID', 'ja', 'ko', 'ko-KR', 'lo', 'ms', 'th', 'th-TH', 'zh'],\n    croatian: ['hr', 'hr-HR'],\n    german: ['fa', 'da', 'de', 'en', 'es', 'fi', 'el', 'he', 'hi-IN', 'hu', 'hu-HU', 'it', 'nl', 'no', 'pt', 'sv', 'tr'],\n    french: ['fr', 'tl', 'pt-br'],\n    russian: ['ru', 'ru-RU'],\n    lithuanian: ['lt'],\n    czech: ['cs', 'cs-CZ', 'sk'],\n    polish: ['pl'],\n    icelandic: ['is', 'mk'],\n    slovenian: ['sl-SL'],\n    romanian: ['ro'],\n    ukrainian: ['uk', 'ua']\n  }\n};\n\nfunction langToTypeMap(mapping) {\n  var ret = {};\n  var mappingEntries = entries(mapping);\n  for (var i = 0; i < mappingEntries.length; i += 1) {\n    var type = mappingEntries[i][0];\n    var langs = mappingEntries[i][1];\n    for (var j = 0; j < langs.length; j += 1) {\n      ret[langs[j]] = type;\n    }\n  }\n  return ret;\n}\n\nfunction pluralTypeName(pluralRules, locale) {\n  var langToPluralType = langToTypeMap(pluralRules.pluralTypeToLanguages);\n  return langToPluralType[locale]\n    || langToPluralType[split.call(locale, /-/, 1)[0]]\n    || langToPluralType.en;\n}\n\nfunction pluralTypeIndex(pluralRules, pluralType, count) {\n  return pluralRules.pluralTypes[pluralType](count);\n}\n\nfunction createMemoizedPluralTypeNameSelector() {\n  var localePluralTypeStorage = {};\n\n  return function (pluralRules, locale) {\n    var pluralType = localePluralTypeStorage[locale];\n\n    if (pluralType && !pluralRules.pluralTypes[pluralType]) {\n      pluralType = null;\n      localePluralTypeStorage[locale] = pluralType;\n    }\n\n    if (!pluralType) {\n      pluralType = pluralTypeName(pluralRules, locale);\n\n      if (pluralType) {\n        localePluralTypeStorage[locale] = pluralType;\n      }\n    }\n\n    return pluralType;\n  };\n}\n\nfunction escape(token) {\n  return token.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction constructTokenRegex(opts) {\n  var prefix = (opts && opts.prefix) || '%{';\n  var suffix = (opts && opts.suffix) || '}';\n\n  if (prefix === delimiter || suffix === delimiter) {\n    throw new RangeError('\"' + delimiter + '\" token is reserved for pluralization');\n  }\n\n  return new RegExp(escape(prefix) + '(.*?)' + escape(suffix), 'g');\n}\n\nvar memoizedPluralTypeName = createMemoizedPluralTypeNameSelector();\n\nvar defaultTokenRegex = /%\\{(.*?)\\}/g;\n\n// ### transformPhrase(phrase, substitutions, locale)\n//\n// Takes a phrase string and transforms it by choosing the correct\n// plural form and interpolating it.\n//\n//     transformPhrase('Hello, %{name}!', {name: 'Spike'});\n//     // \"Hello, Spike!\"\n//\n// The correct plural form is selected if substitutions.smart_count\n// is set. You can pass in a number instead of an Object as `substitutions`\n// as a shortcut for `smart_count`.\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', {smart_count: 1}, 'en');\n//     // \"1 new message\"\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', {smart_count: 2}, 'en');\n//     // \"2 new messages\"\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', 5, 'en');\n//     // \"5 new messages\"\n//\n// You should pass in a third argument, the locale, to specify the correct plural type.\n// It defaults to `'en'` with 2 plural forms.\nfunction transformPhrase(\n  phrase,\n  substitutions,\n  locale,\n  tokenRegex,\n  pluralRules,\n  replaceImplementation\n) {\n  if (typeof phrase !== 'string') {\n    throw new TypeError('Polyglot.transformPhrase expects argument #1 to be string');\n  }\n\n  if (substitutions == null) {\n    return phrase;\n  }\n\n  var result = phrase;\n  var interpolationRegex = tokenRegex || defaultTokenRegex;\n  var replace = replaceImplementation || defaultReplace;\n\n  // allow number as a pluralization shortcut\n  var options = typeof substitutions === 'number' ? { smart_count: substitutions } : substitutions;\n\n  // Select plural form: based on a phrase text that contains `n`\n  // plural forms separated by `delimiter`, a `locale`, and a `substitutions.smart_count`,\n  // choose the correct plural form. This is only done if `count` is set.\n  if (options.smart_count != null && phrase) {\n    var pluralRulesOrDefault = pluralRules || defaultPluralRules;\n    var texts = split.call(phrase, delimiter);\n    var bestLocale = locale || 'en';\n    var pluralType = memoizedPluralTypeName(pluralRulesOrDefault, bestLocale);\n    var pluralTypeWithCount = pluralTypeIndex(\n      pluralRulesOrDefault,\n      pluralType,\n      options.smart_count\n    );\n\n    result = defaultReplace.call(texts[pluralTypeWithCount] || texts[0], /^[^\\S]*|[^\\S]*$/g, '');\n  }\n\n  // Interpolate: Creates a `RegExp` object for each interpolation placeholder.\n  result = replace.call(result, interpolationRegex, function (expression, argument) {\n    if (!has(options, argument) || options[argument] == null) { return expression; }\n    return options[argument];\n  });\n\n  return result;\n}\n\n// ### Polyglot class constructor\nfunction Polyglot(options) {\n  var opts = options || {};\n  this.phrases = {};\n  this.extend(opts.phrases || {});\n  this.currentLocale = opts.locale || 'en';\n  var allowMissing = opts.allowMissing ? transformPhrase : null;\n  this.onMissingKey = typeof opts.onMissingKey === 'function' ? opts.onMissingKey : allowMissing;\n  this.warn = opts.warn || warn;\n  this.replaceImplementation = opts.replace || defaultReplace;\n  this.tokenRegex = constructTokenRegex(opts.interpolation);\n  this.pluralRules = opts.pluralRules || defaultPluralRules;\n}\n\n// ### polyglot.locale([locale])\n//\n// Get or set locale. Internally, Polyglot only uses locale for pluralization.\nPolyglot.prototype.locale = function (newLocale) {\n  if (newLocale) this.currentLocale = newLocale;\n  return this.currentLocale;\n};\n\n// ### polyglot.extend(phrases)\n//\n// Use `extend` to tell Polyglot how to translate a given key.\n//\n//     polyglot.extend({\n//       \"hello\": \"Hello\",\n//       \"hello_name\": \"Hello, %{name}\"\n//     });\n//\n// The key can be any string.  Feel free to call `extend` multiple times;\n// it will override any phrases with the same key, but leave existing phrases\n// untouched.\n//\n// It is also possible to pass nested phrase objects, which get flattened\n// into an object with the nested keys concatenated using dot notation.\n//\n//     polyglot.extend({\n//       \"nav\": {\n//         \"hello\": \"Hello\",\n//         \"hello_name\": \"Hello, %{name}\",\n//         \"sidebar\": {\n//           \"welcome\": \"Welcome\"\n//         }\n//       }\n//     });\n//\n//     console.log(polyglot.phrases);\n//     // {\n//     //   'nav.hello': 'Hello',\n//     //   'nav.hello_name': 'Hello, %{name}',\n//     //   'nav.sidebar.welcome': 'Welcome'\n//     // }\n//\n// `extend` accepts an optional second argument, `prefix`, which can be used\n// to prefix every key in the phrases object with some string, using dot\n// notation.\n//\n//     polyglot.extend({\n//       \"hello\": \"Hello\",\n//       \"hello_name\": \"Hello, %{name}\"\n//     }, \"nav\");\n//\n//     console.log(polyglot.phrases);\n//     // {\n//     //   'nav.hello': 'Hello',\n//     //   'nav.hello_name': 'Hello, %{name}'\n//     // }\n//\n// This feature is used internally to support nested phrase objects.\nPolyglot.prototype.extend = function (morePhrases, prefix) {\n  var phraseEntries = entries(morePhrases || {});\n  for (var i = 0; i < phraseEntries.length; i += 1) {\n    var key = phraseEntries[i][0];\n    var phrase = phraseEntries[i][1];\n    var prefixedKey = prefix ? prefix + '.' + key : key;\n    if (typeof phrase === 'object') {\n      this.extend(phrase, prefixedKey);\n    } else {\n      this.phrases[prefixedKey] = phrase;\n    }\n  }\n};\n\n// ### polyglot.unset(phrases)\n// Use `unset` to selectively remove keys from a polyglot instance.\n//\n//     polyglot.unset(\"some_key\");\n//     polyglot.unset({\n//       \"hello\": \"Hello\",\n//       \"hello_name\": \"Hello, %{name}\"\n//     });\n//\n// The unset method can take either a string (for the key), or an object hash with\n// the keys that you would like to unset.\nPolyglot.prototype.unset = function (morePhrases, prefix) {\n  if (typeof morePhrases === 'string') {\n    delete this.phrases[morePhrases];\n  } else {\n    var phraseEntries = entries(morePhrases || {});\n    for (var i = 0; i < phraseEntries.length; i += 1) {\n      var key = phraseEntries[i][0];\n      var phrase = phraseEntries[i][1];\n      var prefixedKey = prefix ? prefix + '.' + key : key;\n      if (typeof phrase === 'object') {\n        this.unset(phrase, prefixedKey);\n      } else {\n        delete this.phrases[prefixedKey];\n      }\n    }\n  }\n};\n\n// ### polyglot.clear()\n//\n// Clears all phrases. Useful for special cases, such as freeing\n// up memory if you have lots of phrases but no longer need to\n// perform any translation. Also used internally by `replace`.\nPolyglot.prototype.clear = function () {\n  this.phrases = {};\n};\n\n// ### polyglot.replace(phrases)\n//\n// Completely replace the existing phrases with a new set of phrases.\n// Normally, just use `extend` to add more phrases, but under certain\n// circumstances, you may want to make sure no old phrases are lying around.\nPolyglot.prototype.replace = function (newPhrases) {\n  this.clear();\n  this.extend(newPhrases);\n};\n\n// ### polyglot.t(key, options)\n//\n// The most-used method. Provide a key, and `t` will return the\n// phrase.\n//\n//     polyglot.t(\"hello\");\n//     => \"Hello\"\n//\n// The phrase value is provided first by a call to `polyglot.extend()` or\n// `polyglot.replace()`.\n//\n// Pass in an object as the second argument to perform interpolation.\n//\n//     polyglot.t(\"hello_name\", {name: \"Spike\"});\n//     => \"Hello, Spike\"\n//\n// If you like, you can provide a default value in case the phrase is missing.\n// Use the special option key \"_\" to specify a default.\n//\n//     polyglot.t(\"i_like_to_write_in_language\", {\n//       _: \"I like to write in %{language}.\",\n//       language: \"JavaScript\"\n//     });\n//     => \"I like to write in JavaScript.\"\n//\nPolyglot.prototype.t = function (key, options) {\n  var phrase, result;\n  var opts = options == null ? {} : options;\n  if (typeof this.phrases[key] === 'string') {\n    phrase = this.phrases[key];\n  } else if (typeof opts._ === 'string') {\n    phrase = opts._;\n  } else if (this.onMissingKey) {\n    var onMissingKey = this.onMissingKey;\n    result = onMissingKey(\n      key,\n      opts,\n      this.currentLocale,\n      this.tokenRegex,\n      this.pluralRules,\n      this.replaceImplementation\n    );\n  } else {\n    this.warn('Missing translation for key: \"' + key + '\"');\n    result = key;\n  }\n  if (typeof phrase === 'string') {\n    result = transformPhrase(\n      phrase,\n      opts,\n      this.currentLocale,\n      this.tokenRegex,\n      this.pluralRules,\n      this.replaceImplementation\n    );\n  }\n  return result;\n};\n\n// ### polyglot.has(key)\n//\n// Check if polyglot has a translation for given key\nPolyglot.prototype.has = function (key) {\n  return has(this.phrases, key);\n};\n\n// export transformPhrase\nPolyglot.transformPhrase = function transform(phrase, substitutions, locale) {\n  return transformPhrase(phrase, substitutions, locale);\n};\n\nmodule.exports = Polyglot;\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.3994140625,
          "content": "{\n  \"name\": \"node-polyglot\",\n  \"version\": \"2.5.0\",\n  \"description\": \"Give your JavaScript the ability to speak many languages.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"prepublishOnly\": \"safe-publish-latest\",\n    \"prepublish\": \"not-in-publish || npm run prepublishOnly\",\n    \"pretest\": \"npm run lint\",\n    \"test\": \"npm run tests-only\",\n    \"tests-only\": \"nyc mocha test/*.js --reporter spec\",\n    \"posttest\": \"aud --production\",\n    \"lint\": \"eslint .\",\n    \"docs\": \"docco -o docs/ index.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/airbnb/polyglot.js.git\"\n  },\n  \"keywords\": [\n    \"i18n\",\n    \"internationalization\",\n    \"internationalisation\",\n    \"translation\",\n    \"interpolation\",\n    \"translate\",\n    \"polyglot\"\n  ],\n  \"author\": \"Spike Brehm <spike@airbnb.com>\",\n  \"dependencies\": {\n    \"hasown\": \"^2.0.2\",\n    \"object.entries\": \"^1.1.8\",\n    \"warning\": \"^4.0.3\"\n  },\n  \"devDependencies\": {\n    \"array.prototype.foreach\": \"^1.0.7\",\n    \"aud\": \"^2.0.4\",\n    \"chai\": \"^3.5.0\",\n    \"docco\": \"^0.7.0\",\n    \"eslint\": \"^8.18.0\",\n    \"eslint-config-airbnb-base\": \"^15.0.0\",\n    \"eslint-plugin-import\": \"^2.29.1\",\n    \"in-publish\": \"^2.0.1\",\n    \"iterate-iterator\": \"^1.0.2\",\n    \"mocha\": \"^3.5.3\",\n    \"nyc\": \"^10.3.2\",\n    \"safe-publish-latest\": \"^2.0.0\",\n    \"string.prototype.matchall\": \"^4.0.11\",\n    \"uglify-js\": \"^2.7.3\"\n  },\n  \"license\": \"BSD-2-Clause\",\n  \"engines\": {\n    \"node\": \">= 0.4\"\n  }\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}