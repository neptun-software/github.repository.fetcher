{
  "metadata": {
    "timestamp": 1736561903024,
    "page": 591,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "race604/ZhiHuDaily-React-Native",
      "stars": 3634,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".flowconfig",
          "type": "blob",
          "size": 1.8115234375,
          "content": "[ignore]\n\n# We fork some components by platform.\n.*/*.web.js\n.*/*.android.js\n\n# Some modules have their own node_modules with overlap\n.*/node_modules/node-haste/.*\n\n# Ugh\n.*/node_modules/babel.*\n.*/node_modules/babylon.*\n.*/node_modules/invariant.*\n\n# Ignore react and fbjs where there are overlaps, but don't ignore\n# anything that react-native relies on\n.*/node_modules/fbjs-haste/.*/__tests__/.*\n.*/node_modules/fbjs-haste/__forks__/Map.js\n.*/node_modules/fbjs-haste/__forks__/Promise.js\n.*/node_modules/fbjs-haste/__forks__/fetch.js\n.*/node_modules/fbjs-haste/core/ExecutionEnvironment.js\n.*/node_modules/fbjs-haste/core/isEmpty.js\n.*/node_modules/fbjs-haste/crypto/crc32.js\n.*/node_modules/fbjs-haste/stubs/ErrorUtils.js\n.*/node_modules/react-haste/React.js\n.*/node_modules/react-haste/renderers/dom/ReactDOM.js\n.*/node_modules/react-haste/renderers/shared/event/eventPlugins/ResponderEventPlugin.js\n\n# Ignore commoner tests\n.*/node_modules/commoner/test/.*\n\n# See https://github.com/facebook/flow/issues/442\n.*/react-tools/node_modules/commoner/lib/reader.js\n\n# Ignore jest\n.*/node_modules/jest-cli/.*\n\n# Ignore Website\n.*/website/.*\n\n[include]\n\n[libs]\nnode_modules/react-native/Libraries/react-native/react-native-interface.js\n\n[options]\nmodule.system=haste\n\nmunge_underscores=true\n\nmodule.name_mapper='^image![a-zA-Z0-9$_-]+$' -> 'GlobalImageStub'\nmodule.name_mapper='^[./a-zA-Z0-9$_-]+\\.png$' -> 'RelativeImageStub'\n\nsuppress_type=$FlowIssue\nsuppress_type=$FlowFixMe\nsuppress_type=$FixMe\n\nsuppress_comment=\\\\(.\\\\|\\n\\\\)*\\\\$FlowFixMe\\\\($\\\\|[^(]\\\\|(\\\\(>=0\\\\.\\\\(1[0-9]\\\\|[0-9]\\\\).[0-9]\\\\)? *\\\\(site=[a-z,_]*react_native[a-z,_]*\\\\)?)\\\\)\nsuppress_comment=\\\\(.\\\\|\\n\\\\)*\\\\$FlowIssue\\\\((\\\\(>=0\\\\.\\\\(1[0-9]\\\\|[0-9]\\\\).[0-9]\\\\)? *\\\\(site=[a-z,_]*react_native[a-z,_]*\\\\)?)\\\\)? #[0-9]+\nsuppress_comment=\\\\(.\\\\|\\n\\\\)*\\\\$FlowFixedInNextDeploy\n\n[version]\n0.19.0\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3330078125,
          "content": "# OSX\n#\n.DS_Store\n\n# Xcode\n#\nbuild/\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\n*.xccheckout\n*.moved-aside\nDerivedData\n*.hmap\n*.ipa\n*.xcuserstate\nproject.xcworkspace\n\n# Android/IJ\n#\n.idea\n.gradle\nlocal.properties\n\n# node.js\n#\nnode_modules/\nnpm-debug.log\n"
        },
        {
          "name": ".watchmanconfig",
          "type": "blob",
          "size": 0.001953125,
          "content": "{}"
        },
        {
          "name": "DataRepository.js",
          "type": "blob",
          "size": 7.341796875,
          "content": "'use strict';\n\nvar React = require('react-native');\n\nvar {\n  AsyncStorage,\n} = React;\n\nvar API_COVER_URL = \"http://news-at.zhihu.com/api/4/start-image/1080*1776\";\nvar API_LATEST_URL = 'http://news-at.zhihu.com/api/4/news/latest';\nvar API_HOME_URL = 'http://news.at.zhihu.com/api/4/news/before/';\nvar API_THEME_URL = 'http://news-at.zhihu.com/api/4/theme/';\nvar API_THEMES_URL = 'http://news-at.zhihu.com/api/4/themes';\n\nvar KEY_COVER = '@Cover';\nvar KEY_THEMES = '@Themes:';\nvar KEY_HOME_LIST = '@HomeList:';\nvar KEY_THEME_LIST = '@ThemeList:';\nvar KEY_THEME_TOPDATA = '@ThemeTop:';\n\nfunction parseDateFromYYYYMMdd(str) {\n  if (!str) return new Date();\n  return new Date(str.slice(0, 4),str.slice(4, 6) - 1,str.slice(6, 8));\n}\n\nDate.prototype.yyyymmdd = function() {\n  var yyyy = this.getFullYear().toString();\n  var mm = (this.getMonth()+1).toString(); // getMonth() is zero-based\n  var dd  = this.getDate().toString();\n  return yyyy + (mm[1]?mm:\"0\"+mm[0]) + (dd[1]?dd:\"0\"+dd[0]); // padding\n};\n\nfunction DataRepository() { // Singleton pattern\n  if (typeof DataRepository.instance === 'object') {\n    return DataRepository.instance;\n  }\n\n  DataRepository.instance = this;\n}\n\nDataRepository.prototype._safeStorage = function(key: string) {\n  return new Promise((resolve, reject) => {\n    AsyncStorage.getItem(key, (error, result) => {\n      var retData = JSON.parse(result);\n      if (error) {\n        console.error(error);\n        resolve(null);\n      } else {\n        resolve(retData);\n      }\n    });\n  });\n};\n\nDataRepository.prototype._safeFetch = function(reqUrl: string) {\n  console.log('reqUrl', reqUrl);\n  return new Promise((resolve, reject) => {\n    fetch(reqUrl)\n      .then((response) => response.json())\n      .then((responseData) => {\n        //console.log(responseData);\n        resolve(responseData);\n      })\n      .catch((error) => {\n        console.error(error);\n        resolve(null);\n      });\n  });\n};\n\nDataRepository.prototype.getCover = function() {\n  return this._safeStorage(KEY_COVER);\n}\n\nDataRepository.prototype.updateCover = function() {\n  fetch(API_COVER_URL)\n    .then((response) => response.json())\n    .then((responseData) => {\n      AsyncStorage.setItem(KEY_COVER, JSON.stringify(responseData));\n    })\n    .catch((error) => {\n      console.error(error);\n    })\n    .done();\n}\n\nDataRepository.prototype.fetchStories = function(date?: Date,\n  callback?: ?(error: ?Error, result: ?Object) => void\n) {\n  var reqUrl;\n  var topData = null;\n  if (!date) {\n    date = new Date();\n    reqUrl = API_LATEST_URL;\n    topData = this._safeStorage(KEY_THEME_TOPDATA+ '0');\n  } else {\n    var beforeDate = new Date(date);\n    beforeDate.setDate(date.getDate() + 1);\n    reqUrl = API_HOME_URL + beforeDate.yyyymmdd();\n  }\n\n  var localStorage = this._safeStorage(KEY_HOME_LIST + date.yyyymmdd());\n\n  var networking = this._safeFetch(reqUrl);\n\n  var merged = new Promise((resolve, reject) => {\n    Promise.all([localStorage, networking, topData])\n      .then((values) => {\n        var error, result;\n        result = this._mergeReadState(values[0], values[1]);\n        if (!result) {\n          error = new Error('Load story error');\n        }\n        callback && callback(error, result);\n        if (error) {\n          reject(error);\n        } else {\n          if (values[1] && values[1].top_stories) {\n            result.topData = values[1].top_stories;\n          } else {\n            result.topData = values[2];\n          }\n          resolve(result);\n        }\n      });\n  });\n  return merged;\n};\n\nDataRepository.prototype.fetchThemeStories = function(themeId: number, lastID?: string,\n  callback?: ?(error: ?Error, result: ?Object) => void\n) {\n  // Home story list\n  if (themeId === 0) {\n    var date;\n    if (lastID) {\n      date = parseDateFromYYYYMMdd(lastID);\n      date.setDate(date.getDate() - 1);\n    }\n    return this.fetchStories(date, callback);\n  }\n\n  // Stroy list by theme\n  var isRefresh = !lastID;\n  var localStorage = isRefresh ? this._safeStorage(KEY_THEME_LIST + themeId) : null;\n\n  var reqUrl = API_THEME_URL + themeId;\n  var topData = null;\n  if (lastID) {\n    reqUrl += '/before/' + lastID;\n  } else {\n    topData = this._safeStorage(KEY_THEME_TOPDATA + themeId);\n  }\n\n  var networking = this._safeFetch(reqUrl);\n\n  var merged = new Promise((resolve, reject) => {\n    Promise.all([localStorage, networking, topData])\n      .then((values) => {\n        var error, result;\n        result = this._mergeReadState(values[0], values[1]);\n        if (!result) {\n          error = new Error('Load story by theme error');\n        }\n        callback && callback(error, result);\n        if (error) {\n          reject(error);\n        } else {\n          var topDataRet;\n          if (values[1] && values[1].background) {\n            topDataRet = {};\n            topDataRet.description = values[1].description;\n            topDataRet.background = values[1].background;\n            topDataRet.editors = values[1].editors;\n          } else {\n            topDataRet = values[2];\n          }\n          result.topData = topDataRet;\n          resolve(result);\n        }\n      });\n  });\n\n  return merged;\n};\n\nDataRepository.prototype.saveStories = function(themeList: object, topData: object,\n  callback?: ?(error: ?Error, result: ?Object) => void\n) {\n  var homeList = themeList[0];\n  var keyValuePairs = [];\n\n  for (var date in homeList) {\n   if (homeList.hasOwnProperty(date)) {\n     //console.log(date, homeData[date]);\n     keyValuePairs.push([KEY_HOME_LIST + date, JSON.stringify({date: date, stories: homeList[date]})]);\n   }\n  }\n\n  for (var key in themeList) {\n   if (themeList.hasOwnProperty(key)) {\n     //console.log(key, data[key]);\n     if (key !== '0') {\n       keyValuePairs.push([KEY_THEME_LIST + key, JSON.stringify(themeList[key])]);\n     }\n   }\n  }\n\n  for (var theme in topData) {\n    if (topData.hasOwnProperty(theme)) {\n      //console.log(theme, topData[key]);\n      keyValuePairs.push([KEY_THEME_TOPDATA + theme, JSON.stringify(topData[theme])]);\n    }\n  }\n\n  AsyncStorage.multiSet(keyValuePairs, callback);\n};\n\nDataRepository.prototype.getThemes = function(\n  callback?: ?(error: ?Error, result: ?Object) => void\n) {\n  return this._safeStorage(KEY_THEMES)\n    .then((result) => {\n      if (!result) {\n        throw new Error('No themes')\n      } else {\n        return result;\n      }\n    })\n    .catch((error) => {\n      console.error(error);\n      return this._safeFetch(API_THEMES_URL)\n        .then((themes) => {\n          AsyncStorage.setItem(KEY_THEMES, JSON.stringify(themes));\n          return themes;\n        });\n    })\n    .then((responseData) => {\n      var themes = [];\n      if (responseData.subscribed) {\n        var len = responseData.subscribed.length;\n        var theme\n        for (var i = 0; i < len.length; i++) {\n          theme = responseData.subscribed[i];\n          theme.subscribed = true;\n          themes.push(theme);\n        }\n      }\n      if (responseData.others) {\n        themes = themes.concat(responseData.others);\n      }\n      return themes;\n    });\n\n};\n\nDataRepository.prototype._mergeReadState = function(src, dst) {\n\n  if (!src) {\n    return dst;\n  }\n\n  if (!dst) {\n    return src;\n  }\n\n  var reads = {};\n  var story;\n  for (var i = src.stories.length - 1; i >= 0 ; i--) {\n    story = src.stories[i];\n    reads[story.id] = story.read;\n  }\n\n  for (var i = dst.stories.length - 1; i >= 0 ; i--) {\n    story = dst.stories[i];\n    if (reads[story.id]) {\n      story.read = true;\n    }\n  }\n\n  return dst;\n};\n\nmodule.exports = DataRepository;\n"
        },
        {
          "name": "DetailToolbar.js",
          "type": "blob",
          "size": 4.615234375,
          "content": "'use strict';\n\nvar React = require('react-native');\nvar {\n  AppRegistry,\n  Platform,\n  PixelRatio,\n  StyleSheet,\n  Text,\n  View,\n  Image,\n  TouchableNativeFeedback,\n  TouchableHighlight,\n  ToastAndroid,\n} = React;\n\nvar SwitchAndroid = require('SwitchAndroid');\nvar ToolbarAndroid = require('ToolbarAndroid');\nvar statusBarSize = Platform.OS == 'ios' ? 10 : 0;\n\nvar API_STROY_EXTRA = 'http://news-at.zhihu.com/api/4/story-extra/';\n\nvar DetailToolbar = React.createClass({\n  getInitialState: function() {\n    return({\n      isLoading: true,\n      extra: null,\n    });\n  },\n  componentDidMount: function() {\n    this.fetchStroyExtra();\n  },\n  fetchStroyExtra: function() {\n    fetch(API_STROY_EXTRA + this.props.story.id)\n      .then((response) => response.json())\n      .then((responseData) => {\n        this.setState({\n          isLoading: false,\n          extra: responseData,\n        });\n      })\n      .catch((error) => {\n        this.setState({\n          isLoading: false,\n          extra: null,\n        });\n      })\n      .done();\n  },\n  _onPressBackButton: function() {\n    if (this.props.navigator) {\n      this.props.navigator.pop();\n    }\n  },\n  _onPressShareButton: function() {\n    // TODO:\n    ToastAndroid.show('分享', ToastAndroid.SHORT);\n  },\n  _onPressCollectButton: function() {\n    // TODO:\n    ToastAndroid.show('收藏', ToastAndroid.SHORT);\n  },\n  _onPressCommentButton: function() {\n    // TODO:\n    ToastAndroid.show('评论', ToastAndroid.SHORT);\n  },\n  _onPressPriseButton: function() {\n    // TODO:\n    ToastAndroid.show('赞', ToastAndroid.SHORT);\n  },\n  render: function() {\n    var TouchableElement = TouchableHighlight;\n    if (Platform.OS === 'android') {\n      TouchableElement = TouchableNativeFeedback;\n    }\n    return(\n      <View {...this.props}>\n        <View style={styles.actionsContainer}>\n          <TouchableElement onPress={this._onPressBackButton}>\n            <View style={styles.actionItem}>\n              <Image\n                style={styles.backIcon}\n                source={require('image!ic_back_white')}\n                resizeMode='contain' />\n            </View>\n          </TouchableElement>\n          <View style={{flex: 1}} />\n          <TouchableElement onPress={this._onPressShareButton}>\n            <View style={styles.actionItem}>\n              <Image\n                style={styles.actionIcon}\n                source={require('image!ic_share_white')}\n                resizeMode='contain' />\n            </View>\n          </TouchableElement>\n          <TouchableElement onPress={this._onPressCollectButton}>\n            <View style={styles.actionItem}>\n              <Image\n                style={styles.actionIcon}\n                source={require('image!ic_collect_white')}\n                resizeMode='contain' />\n            </View>\n          </TouchableElement>\n          <TouchableElement onPress={this._onPressCommentButton}>\n            <View style={styles.actionItem}>\n              <Image\n                style={styles.actionIconWithCount}\n                source={require('image!ic_comment_white')}\n                resizeMode='contain' />\n              <Text style={styles.count}>\n                {(this.state.isLoading || !this.state.extra) ? '...' : this.state.extra.comments}\n              </Text>\n            </View>\n          </TouchableElement>\n          <TouchableElement onPress={this._onPressPraiseButton}>\n            <View style={styles.actionItem}>\n              <Image\n                style={styles.actionIconWithCount}\n                source={require('image!ic_praise_white')}\n                resizeMode='contain' />\n              <Text style={styles.count}>\n                {(this.state.isLoading || !this.state.extra) ? '...' : this.state.extra.popularity}\n              </Text>\n            </View>\n          </TouchableElement>\n        </View>\n\n      </View>\n      // <ToolbarAndroid\n      //   navIcon={require('image!ic_back_white')}\n      //   onIconClicked={this.props.navigator.pop}\n      //   titleColor=\"white\"\n      //   actions={[]} >\n      // </ToolbarAndroid>\n    );\n  },\n\n});\n\nvar styles = StyleSheet.create({\n  actionsContainer: {\n    height: 56,\n    paddingTop: statusBarSize,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  backIcon: {\n    width: 32,\n    height: 32,\n    marginLeft: 8,\n    marginRight: 8,\n  },\n  actionItem: {\n    height: 56,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingLeft: 8,\n    paddingRight: 8,\n  },\n  actionIcon: {\n    width: 32,\n    height: 32,\n  },\n  actionIconWithCount: {\n    width: 32,\n    height: 32,\n    marginLeft: 5,\n  },\n  count: {\n    fontSize: 16,\n    color: 'white',\n    marginRight: 5,\n  },\n});\n\nmodule.exports = DetailToolbar;\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0498046875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 race604\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "MainScreen.android.js",
          "type": "blob",
          "size": 2.5556640625,
          "content": "'use strict';\n\nvar React = require('react-native');\nvar {\n  AsyncStorage,\n  Image,\n  StyleSheet,\n  Text,\n  View,\n  DrawerLayoutAndroid,\n  ToolbarAndroid,\n  ToastAndroid,\n  BackAndroid,\n  TouchableOpacity,\n  Dimensions,\n} = React;\n\nvar Drawer = require('react-native-drawer');\nvar StoriesList = require('./StoriesList');\nvar ThemesList = require('./ThemesList');\nvar SwipeRefreshLayoutAndroid = require('./SwipeRereshLayout');\n\nvar DRAWER_REF = 'drawer';\nvar DRAWER_WIDTH_LEFT = 56;\nvar toolbarActions = [\n  {title: '提醒', icon: require('image!ic_message_white'), show: 'always'},\n  {title: '夜间模式', show: 'never'},\n  {title: '设置选项', show: 'never'},\n];\n\nvar MainScreen = React.createClass({\n  getInitialState: function() {\n    return ({\n      theme: null,\n    });\n  },\n  onSelectTheme: function(theme) {\n    this.refs[DRAWER_REF].closeDrawer();\n    this.setState({theme: theme});\n  },\n  _renderNavigationView: function() {\n    return (\n      <ThemesList\n        onSelectItem={this.onSelectTheme}\n      />\n    );\n  },\n  onRefresh: function() {\n    this.onSelectTheme(this.state.theme);\n  },\n  onRefreshFinish: function() {\n    this.swipeRefreshLayout && this.swipeRefreshLayout.finishRefresh();\n  },\n  render: function() {\n    var title = this.state.theme ? this.state.theme.name : '首页';\n    return (\n      <DrawerLayoutAndroid\n        ref={DRAWER_REF}\n        drawerWidth={Dimensions.get('window').width - DRAWER_WIDTH_LEFT}\n        keyboardDismissMode=\"on-drag\"\n        drawerPosition={DrawerLayoutAndroid.positions.Left}\n        renderNavigationView={this._renderNavigationView}>\n        <View style={styles.container}>\n          <ToolbarAndroid\n            navIcon={require('image!ic_menu_white')}\n            title={title}\n            titleColor=\"white\"\n            style={styles.toolbar}\n            actions={toolbarActions}\n            onIconClicked={() => this.refs[DRAWER_REF].openDrawer()}\n            onActionSelected={this.onActionSelected} />\n          <SwipeRefreshLayoutAndroid\n            ref={(swipeRefreshLayout) => { this.swipeRefreshLayout = swipeRefreshLayout; }}\n            onSwipeRefresh={this.onRefresh}>\n            <StoriesList theme={this.state.theme} navigator={this.props.navigator}\n              onRefreshFinish={this.onRefreshFinish}/>\n          </SwipeRefreshLayoutAndroid>\n        </View>\n      </DrawerLayoutAndroid>\n\n    );\n  }\n\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    backgroundColor: '#FAFAFA',\n  },\n  toolbar: {\n    backgroundColor: '#00a2ed',\n    height: 56,\n  },\n});\n\nmodule.exports = MainScreen;\n"
        },
        {
          "name": "MainScreen.ios.js",
          "type": "blob",
          "size": 0.9443359375,
          "content": "'use strict';\n\nvar React = require('react-native');\nvar {\n  AsyncStorage,\n  Image,\n  StyleSheet,\n  Text,\n  View,\n} = React;\n\nvar Drawer = require('react-native-drawer');\nvar StoriesList = require('./StoriesList');\nvar ThemesList = require('./ThemesList');\n\nvar DRAWER_REF = 'drawer';\n\nvar MainScreen = React.createClass({\n  getInitialState: function() {\n    return ({\n      theme: null,\n    });\n  },\n  onSelectTheme: function(theme) {\n    this.refs[DRAWER_REF].close();\n    this.setState({theme: theme});\n  },\n  onRefresh: function() {\n    this.onSelectTheme(this.state.theme);\n  },\n  render: function() {\n    var drawer = <ThemesList onSelectItem={this.onSelectTheme} />;\n    return (\n        <Drawer\n          ref={DRAWER_REF}\n          openDrawerOffset={100}\n          panCloseMask={1}\n          content={drawer} >\n          <StoriesList theme={this.state.theme} navigator={this.props.navigator}/>\n        </Drawer>\n      );\n  }\n\n});\n\nmodule.exports = MainScreen;\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.794921875,
          "content": "[![Android Gems](http://www.android-gems.com/badge/race604/ZhiHuDaily-React-Native.svg?branch=master)](http://www.android-gems.com/lib/race604/ZhiHuDaily-React-Native)\r\n\r\n# ZhiHuDaily-React-Native\r\n\r\nThe is a [Zhihu Daily](http://daily.zhihu.com/) App client, implemented using [**React Native**](http://facebook.github.io/react-native/). This project can run on both Android and iOS, with more than 80% of code in common. This is a demo project to show how to develop a complete app with React Native. (The data api is from [ZhihuDailyPurify](https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90))\r\n\r\n## How does it look like?\r\n\r\n* The home page\r\n\r\n![](./art/home1.jpg)\r\n\r\n* The drawer\r\n\r\n![](./art/drawer.jpg)\r\n\r\n* The content page\r\n\r\n![](./art/content.jpg)\r\n\r\n## How to run\r\n\r\n1. Prepare your environment: [Requirements](http://facebook.github.io/react-native/docs/getting-started.html#requirements) and [Android Setup](http://facebook.github.io/react-native/docs/android-setup.html)\r\n2. Clone this repo, and goto the project root directory\r\n3. run `npm install`\r\n4. run `react-native run-android`\r\n5. Enjoy\r\n\r\n## Related content\r\n\r\nIn this project, I used most of technology in React Native:\r\n\r\n* Flex Style\r\n* Direct Manipulation\r\n* Native UI Components\r\n* DrawerLayoutAndroid\r\n* Image/Text/ListView\r\n* TouchableHighlight/TouchableNativeFeedback\r\n* ToolbarAndroid/Navigator\r\n* StyleSheet/ToastAndroid/BackAndroid\r\n* Timers\r\n* AsyncStorage\r\n* Animations\r\n* Customize view\r\n* ...\r\n\r\n## TODO\r\n\r\n1. ~~Add local storage to cache data~~ (done)\r\n2. ~~Add List header banner~~ (done)\r\n3. ~~Add splash animation~~ (done)\r\n4. ~~Add swipe/pull to refresh~~ (done)\r\n5. ~~**iOS compatible**~~(done 80% of code in common)\r\n\r\n## License\r\n\r\nThis project is available under the MIT license.\r\n"
        },
        {
          "name": "SplashScreen.js",
          "type": "blob",
          "size": 2.16796875,
          "content": "'use strict';\n\nvar React = require('react-native');\nvar {\n  AsyncStorage,\n  Image,\n  StyleSheet,\n  Text,\n  View,\n  Dimensions,\n} = React;\n\nvar Animated = require('Animated');\n\nvar WINDOW_WIDTH = Dimensions.get('window').width;\n\nvar DataRepository = require('./DataRepository');\nvar repository = new DataRepository();\n\nvar SplashScreen = React.createClass({\n  fetchData: function() {\n    repository.getCover()\n      .then((result) => {\n        if (result){\n          this.setState({cover: result});\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      })\n      .done();\n    repository.updateCover();\n  },\n  getInitialState: function() {\n    return {\n      cover: null,\n      bounceValue: new Animated.Value(1),\n    };\n  },\n  componentDidMount: function() {\n    this.fetchData();\n    this.state.bounceValue.setValue(1);\n    Animated.timing(\n      this.state.bounceValue,\n      {\n        toValue: 1.2,\n        duration: 5000,\n      }\n    ).start();\n  },\n  render: function() {\n    var img, text;\n    if (this.state.cover) {\n      img = {uri: this.state.cover.img};\n      text = this.state.cover.text;\n    } else {\n      img = require('image!splash');\n      text = '';\n    }\n\n    return(\n      <View style={styles.container}>\n        <Animated.Image\n          source={img}\n          style={{\n            flex: 1,\n            width: WINDOW_WIDTH,\n            height: 1,\n            transform: [\n              {scale: this.state.bounceValue},\n            ]\n          }} />\n        <Text style={styles.text}>\n            {text}\n        </Text>\n        <Image style={styles.logo} source={require('image!splash_logo')} />\n      </View>\n    );\n  }\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n  },\n  cover: {\n    flex: 1,\n    width: 200,\n    height: 1,\n  },\n  logo: {\n    resizeMode: 'contain',\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 30,\n    height: 54,\n    backgroundColor: 'transparent',\n  },\n  text: {\n    flex: 1,\n    fontSize: 16,\n    textAlign: 'center',\n    color: 'white',\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 10,\n    backgroundColor: 'transparent',\n  }\n});\n\nmodule.exports = SplashScreen;\n"
        },
        {
          "name": "StoriesList.js",
          "type": "blob",
          "size": 10.7734375,
          "content": "'use strict';\n\nvar React = require('react-native');\nvar {\n  AsyncStorage,\n  Platform,\n  Dimensions,\n  ListView,\n  Image,\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n} = React\n\nvar StoryItem = require('./StoryItem');\nvar ThemesList = require('./ThemesList');\nvar DataRepository = require('./DataRepository');\nvar ViewPager = require('react-native-viewpager');\nvar StoryScreen = require('./StoryScreen');\n\nvar LOADING = {};\nvar WEEKDAY = ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];\nvar DRAWER_WIDTH_LEFT = 56;\nvar toolbarActions = [\n  {title: '提醒', icon: require('image!ic_message_white'), show: 'always'},\n  {title: '夜间模式', show: 'never'},\n  {title: '设置选项', show: 'never'},\n];\n\nvar repository = new DataRepository();\n\nvar dataCache = {\n  dataForTheme: {},\n  topDataForTheme: {},\n  sectionsForTheme: {},\n  lastID: {},\n};\n\nfunction parseDateFromYYYYMMdd(str) {\n  if (!str) return new Date();\n  return new Date(str.slice(0, 4),str.slice(4, 6) - 1,str.slice(6, 8));\n}\n\nDate.prototype.yyyymmdd = function() {\n  var yyyy = this.getFullYear().toString();\n  var mm = (this.getMonth()+1).toString(); // getMonth() is zero-based\n  var dd  = this.getDate().toString();\n  return yyyy + (mm[1]?mm:\"0\"+mm[0]) + (dd[1]?dd:\"0\"+dd[0]); // padding\n};\n\nvar StoriesList = React.createClass({\n\n  getInitialState: function() {\n    var dataSource = new ListView.DataSource({\n      rowHasChanged: (row1, row2) => row1 !== row2,\n      sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\n    });\n\n    var headerDataSource = new ViewPager.DataSource({\n      pageHasChanged: (p1, p2) => p1 !== p2,\n    });\n\n    return {\n      isLoading: false,\n      isLoadingTail: false,\n      dataSource: dataSource,\n      headerDataSource: headerDataSource,\n    };\n  },\n  componentWillUnmount: function() {\n    repository.saveStories(dataCache.dataForTheme, dataCache.topDataForTheme);\n  },\n  componentDidMount: function() {\n    this.fetchStories(this.props.theme, true);\n  },\n  componentWillReceiveProps(nextProps) {\n    this.fetchStories(nextProps.theme, true);\n  },\n  fetchStories: function(theme, isRefresh) {\n    var themeId = theme ? theme.id : 0;\n    var isInTheme = themeId !== 0\n    var lastID = isRefresh ? null : dataCache.lastID[themeId];\n\n    var dataBlob = dataCache.dataForTheme[themeId];\n    if (!dataBlob) {\n      dataBlob = isInTheme ? [] : {};\n    }\n    var sectionIDs = dataCache.sectionsForTheme[themeId];\n    var topData = dataCache.topDataForTheme[themeId];\n\n    this.setState({\n      isLoading: isRefresh,\n      isLoadingTail: !isRefresh,\n      dataSource: this.state.dataSource,\n    });\n\n    repository.fetchThemeStories(themeId, lastID)\n      .then((responseData) => {\n        var newLastID;\n        var dataSouce;\n        var headerDataSource = this.state.headerDataSource;\n        if (!isInTheme) {\n          newLastID = responseData.date;\n          var newDataBlob = {};\n          var newSectionIDs = sectionIDs ? sectionIDs.slice() : []\n          if (newSectionIDs.indexOf(newLastID) < 0) {\n            newSectionIDs.push(newLastID);\n            newSectionIDs.sort((a, b) => (b - a));\n          }\n\n          for (var i = 0; i < newSectionIDs.length; i++) {\n            newDataBlob[newSectionIDs[i]] = dataBlob[newSectionIDs[i]];\n          }\n          newDataBlob[newLastID] = responseData.stories;\n\n          dataCache.sectionsForTheme[themeId] = newSectionIDs;\n\n          dataBlob = newDataBlob;\n          sectionIDs = newSectionIDs;\n          if (responseData.topData) {\n            topData = responseData.topData;\n            headerDataSource = headerDataSource.cloneWithPages(topData.slice())\n          }\n\n          dataSouce = this.state.dataSource.cloneWithRowsAndSections(newDataBlob, newSectionIDs, null);\n\n        } else {\n          var length = responseData.stories.length;\n          if (length > 0) {\n            newLastID = responseData.stories[length - 1].id;\n          }\n          var newDataBlob;\n\n          if (isRefresh) {\n            newDataBlob = responseData.stories;\n          } else {\n            newDataBlob = dataBlob.concat(responseData.stories);\n          }\n\n          if (responseData.topData) {\n            topData = responseData.topData;\n          }\n\n          dataBlob = newDataBlob;\n          dataSouce = this.state.dataSource.cloneWithRows(newDataBlob);\n        }\n        dataCache.lastID[themeId] = newLastID;\n        dataCache.dataForTheme[themeId] = dataBlob;\n        dataCache.topDataForTheme[themeId] = topData;\n\n        // console.log('lastID: ' + lastID);\n        // console.log('newLastID: ' + newLastID);\n\n        LOADING[themeId] = false;\n        this.setState({\n          isLoading: (isRefresh ? false : this.state.isLoading),\n          isLoadingTail: (isRefresh ? this.state.isLoadingTail : false),\n          dataSource: dataSouce,\n          headerDataSource: headerDataSource,\n        });\n\n        isRefresh && this.props.onRefreshFinish && this.props.onRefreshFinish();\n      })\n      .catch((error) => {\n        console.error(error);\n        this.setState({\n          isLoading: (isRefresh ? false : this.state.isLoading),\n          isLoadingTail: (isRefresh ? this.state.isLoadingTail : false),\n          dataSource: this.state.dataSource.cloneWithRows([]),\n        });\n        isRefresh && this.props.onRefreshFinish && this.props.onRefreshFinish();\n      })\n      .done();\n  },\n  _renderPage: function(\n    story: Object,\n    pageID: number | string,) {\n    return (\n      <TouchableOpacity style={{flex: 1}} onPress={() => {this.selectStory(story)}}>\n        <Image\n          source={{uri: story.image}}\n          style={styles.headerItem} >\n          <View style={styles.headerTitleContainer}>\n            <Text style={styles.headerTitle}\n              numberOfLines={2}>\n              {story.title}\n            </Text>\n          </View>\n        </Image>\n      </TouchableOpacity>\n    )\n  },\n  _renderHeader: function() {\n    if (this.props.theme) {\n      var themeId = this.props.theme ? this.props.theme.id : 0;\n      var topData = dataCache.topDataForTheme[themeId];\n      if (!topData) {\n        return null;\n      }\n\n      var editorsAvator = [];\n      if (topData.editors) {\n        topData.editors.forEach((editor) => {\n          editorsAvator.push(<Image style={styles.editorAvatar} source={{uri: editor.avatar}} />)\n        });\n      }\n\n      return (\n        <View style={{flex: 1}}>\n          {this._renderPage({image: topData.background, title: topData.description}, 0)}\n          <View style={styles.editors}>\n            <Text style={styles.editorsLable}>主编:</Text>\n            {editorsAvator}\n          </View>\n        </View>\n      );\n    } else {\n      return (\n        <View style={{flex: 1, height: 200}}>\n          <ViewPager\n            dataSource={this.state.headerDataSource}\n            style={styles.listHeader}\n            renderPage={this._renderPage}\n            isLoop={true}\n            autoPlay={true} />\n        </View>\n      );\n    }\n  },\n  getSectionTitle: function(str) {\n    var date = parseDateFromYYYYMMdd(str);\n    if (date.toDateString() == new Date().toDateString()) {\n      return '今日热闻';\n    }\n    var title = str.slice(4, 6)  + '月' + str.slice(6, 8) + '日';\n    title += ' ' + WEEKDAY[date.getDay()];\n    return title;\n  },\n  renderSectionHeader: function(sectionData: Object,\n    sectionID: number | string) {\n    if (this.props.theme) {\n      return (\n        <View></View>\n      );\n    } else {\n      return (\n        <Text style={styles.sectionHeader}>\n          {this.getSectionTitle(sectionID)}\n        </Text>\n      );\n    }\n  },\n  selectStory: function(story: Object) {\n    story.read = true;\n    // if (Platform.OS === 'ios') {\n    //   this.props.navigator.push({\n    //     title: story.title,\n    //     component: StoryScreen,\n    //     passProps: {story},\n    //   });\n    // } else {\n      this.props.navigator.push({\n        title: story.title,\n        name: 'story',\n        story: story,\n      });\n    // }\n  },\n  renderRow: function(\n    story: Object,\n    sectionID: number | string,\n    rowID: number | string,\n    highlightRowFunc: (sectionID: ?number | string, rowID: ?number | string) => void,\n  ) {\n    return (\n      <StoryItem\n        key={story.id}\n        onSelect={() => this.selectStory(story)}\n        onHighlight={() => highlightRowFunc(sectionID, rowID)}\n        onUnhighlight={() => highlightRowFunc(null, null)}\n        story={story}\n      />\n    );\n  },\n  onEndReached: function() {\n    console.log('onEndReached() ' + this.state.isLoadingTail);\n    if (this.state.isLoadingTail) {\n      return;\n    }\n    this.fetchStories(this.props.theme, false);\n  },\n  setTheme: function(theme) {\n    // ToastAndroid.show('选择' + theme.name, ToastAndroid.SHORT);\n    this.drawer.closeDrawer();\n    this.setState({\n      isLoading: this.state.isLoading,\n      isLoadingTail: this.state.isLoadingTail,\n      theme: theme,\n      dataSource: this.state.dataSource,\n    });\n    this.fetchStories(theme, true);\n  },\n  onRefresh: function() {\n    this.onSelectTheme(this.props.theme);\n  },\n  render: function() {\n    var content = this.state.dataSource.getRowCount() === 0 ?\n      <View style={styles.centerEmpty}>\n        <Text>{this.state.isLoading ? '正在加载...' : '加载失败'}</Text>\n      </View> :\n      <ListView\n        ref=\"listview\"\n        style={styles.listview}\n        dataSource={this.state.dataSource}\n        renderRow={this.renderRow}\n        onEndReached={this.onEndReached}\n        renderSectionHeader={this.renderSectionHeader}\n        automaticallyAdjustContentInsets={false}\n        keyboardDismissMode=\"on-drag\"\n        keyboardShouldPersistTaps={true}\n        showsVerticalScrollIndicator={false}\n        renderHeader={this._renderHeader}\n      />;\n    return content;\n  }\n});\n\nvar styles = StyleSheet.create({\n  centerEmpty: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    backgroundColor: '#FAFAFA',\n  },\n  listview: {\n    backgroundColor: '#FAFAFA',\n  },\n  toolbar: {\n    backgroundColor: '#00a2ed',\n    height: 56,\n  },\n  rator: {\n    height: 1,\n    backgroundColor: '#eeeeee',\n  },\n  scrollSpinner: {\n    marginVertical: 20,\n  },\n  sectionHeader: {\n    fontSize: 14,\n    color: '#888888',\n    margin: 10,\n    marginLeft: 16,\n  },\n  headerPager: {\n    height: 200,\n  },\n  headerItem: {\n    flex: 1,\n    height: 200,\n    flexDirection: 'row',\n  },\n  headerTitleContainer: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    padding: 10,\n    backgroundColor: 'rgba(0,0,0,0.2)',\n  },\n  headerTitle: {\n    fontSize: 18,\n    fontWeight: '500',\n    color: 'white',\n    marginBottom: 10,\n  },\n  editors: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  editorsLable: {\n    fontSize: 14,\n    color: '#888888',\n  },\n  editorAvatar: {\n    width: 30,\n    height: 30,\n    borderRadius: 15,\n    borderWidth: 1,\n    borderColor: '#AAAAAA',\n    margin: 4,\n  }\n});\n\nmodule.exports = StoriesList;\n"
        },
        {
          "name": "StoryItem.js",
          "type": "blob",
          "size": 2.1279296875,
          "content": "'use strict';\n\nvar React = require('react-native');\n\nvar {\n  Image,\n  PixelRatio,\n  Platform,\n  StyleSheet,\n  Text,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  View,\n} = React;\n\nvar TITLE_REF = 'title';\n\nvar StoryItem = React.createClass({\n  updateReadSate: function() {\n    this.refs[TITLE_REF].setNativeProps({style: {color: '#777777'}});\n    this.props.onSelect();\n  },\n  render: function() {\n    var TouchableElement = TouchableHighlight;\n    if (Platform.OS === 'android') {\n      TouchableElement = TouchableNativeFeedback;\n    }\n    var image = null;\n    if (this.props.story.images && this.props.story.images[0]) {\n      image = <Image\n        source={{uri: this.props.story.images[0]}}\n        style={styles.cellImage} />\n    }\n\n    return (\n      <View {...this.props}>\n        <TouchableElement\n          onPress={this.updateReadSate /*this.props.onSelect*/}\n          onShowUnderlay={this.props.onHighlight}\n          onHideUnderlay={this.props.onUnhighlight}>\n          <View style={styles.row}>\n            {/* $FlowIssue #7363964 - There's a bug in Flow where you cannot\n              * omit a property or set it to undefined if it's inside a shape,\n              * even if it isn't required */}\n            <Text\n              ref={TITLE_REF}\n              style={this.props.story.read ? styles.storyTitleRead : styles.storyTitle}\n              numberOfLines={3}>\n                {this.props.story.title}\n            </Text>\n            {image}\n          </View>\n        </TouchableElement>\n      </View>\n    );\n  }\n});\n\nvar styles = StyleSheet.create({\n  storyTitle: {\n    flex: 1,\n    fontSize: 16,\n    color: '#333333',\n  },\n  storyTitleRead: {\n    flex: 1,\n    fontSize: 16,\n    color: '#777777',\n  },\n  row: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'white',\n    padding: 10,\n    marginLeft: 10,\n    marginRight: 10,\n    marginVertical: 5,\n    borderColor: '#dddddd',\n    borderStyle: null,\n    borderWidth: 0.5,\n    borderRadius: 2,\n  },\n  cellImage: {\n    backgroundColor: '#dddddd',\n    height: 60,\n    marginLeft: 10,\n    width: 80,\n  },\n});\n\nmodule.exports = StoryItem;\n"
        },
        {
          "name": "StoryScreen.js",
          "type": "blob",
          "size": 3.9716796875,
          "content": "'use strict';\n\nvar React = require('react-native');\nvar {\n  AppRegistry,\n  PixelRatio,\n  StyleSheet,\n  Text,\n  View,\n  Image,\n  ToolbarAndroid,\n  TouchableHighlight,\n  Animated,\n  Platform,\n  WebView,\n} = React;\n\nvar DetailToolbar = require('./DetailToolbar');\nvar MyWebView = (Platform.OS === 'ios') ? WebView : require('./WebView');\n\nvar BASE_URL = 'http://news.at.zhihu.com/api/4/news/';\nvar REF_HEADER = 'header';\nvar PIXELRATIO = PixelRatio.get();\nvar HEADER_SIZE = 200;\n\nvar StoryScreen = React.createClass({\n  getInitialState: function() {\n    return({\n      isLoading: false,\n      detail: null,\n      scrollY: 0,\n      scrollValue: new Animated.Value(0)\n    });\n  },\n  componentDidMount: function() {\n    this.fetchStroyDetail();\n  },\n  fetchStroyDetail: function() {\n    var reqUrl = BASE_URL + this.props.story.id;\n    this.setState({\n      isLoading: true,\n      detail: null,\n    });\n    fetch(reqUrl)\n      .then((response) => response.json())\n      .catch((error) => {\n        this.setState({\n          isLoading: false,\n          detail: null,\n        });\n      })\n      .then((responseData) => {\n        this.setState({\n          isLoading: false,\n          detail: responseData,\n        });\n      })\n      .done();\n  },\n  onWebViewScroll: function(event) {\n    //console.log('ScrollY: ' + event);\n    var scrollY = -event / PIXELRATIO;\n    this.state.scrollValue.setValue(scrollY);\n  },\n  render: function() {\n\n    var toolbar = <DetailToolbar navigator={this.props.navigator} style={styles.toolbar}\n      story={this.props.story}/>;\n    if (this.state.isLoading) {\n      return (\n        <View style={[styles.container, styles.center]}>\n          <Text>\n            正在加载...\n          </Text>\n          {toolbar}\n        </View>\n      );\n    } else {\n      if (this.state.detail) {\n        var translateY = this.state.scrollValue.interpolate({\n          inputRange: [0, HEADER_SIZE, HEADER_SIZE + 1], outputRange: [0, HEADER_SIZE, HEADER_SIZE]\n        });\n        var html = '<!DOCTYPE html><html><head><link rel=\"stylesheet\" type=\"text/css\" href=\"'\n          + this.state.detail.css[0]\n          + '\" /></head><body>' + this.state.detail.body\n          + '</body></html>';\n        return (\n          <View style={styles.container}>\n            <MyWebView\n              style={styles.content}\n              html={html}\n              onScrollChange={this.onWebViewScroll}/>\n            <Animated.View style={[styles.header, {transform: [{translateY}]}]}>\n              <Image\n                ref={REF_HEADER}\n                source={{uri: this.state.detail.image}}\n                style={styles.headerImage} >\n                <View style={styles.titleContainer}>\n                  <Text style={styles.title}>\n                    {this.props.story.title}\n                  </Text>\n                </View>\n              </Image>\n            </Animated.View>\n            {toolbar}\n          </View>\n        );\n      } else {\n        return (\n          <View style={[styles.container, styles.center]}>\n            <Text>\n              加载失败\n            </Text>\n            {toolbar}\n          </View>\n        );\n      }\n    }\n\n  }\n});\n\nvar styles = StyleSheet.create({\n  toolbar: {\n    backgroundColor: '#00a2ed',\n    height: 56,\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    top: 0,\n  },\n  header: {\n    height: HEADER_SIZE,\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    top: 56,\n  },\n  headerImage: {\n    height: HEADER_SIZE,\n    flexDirection: 'row',\n    backgroundColor: '#DDDDDD',\n  },\n  titleContainer: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    padding: 10,\n    backgroundColor: 'rgba(0,0,0,0.3)',\n  },\n  title: {\n    flex: 1,\n    fontSize: 18,\n    fontWeight: '500',\n    color: 'white',\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#F5FCFF',\n  },\n  center: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  content: {\n    flex: 1,\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    top:56,\n  },\n});\n\nmodule.exports = StoryScreen;\n"
        },
        {
          "name": "SwipeRereshLayout.js",
          "type": "blob",
          "size": 2.0810546875,
          "content": "'use strict';\n\nvar React = require('react-native');\nvar {\n  requireNativeComponent,\n  PropTypes,\n  StyleSheet,\n  View,\n} = React;\n\nvar createReactNativeComponentClass = require('createReactNativeComponentClass');\nvar ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nvar RCTUIManager = require('NativeModules').UIManager;\n\nvar NativeMethodsMixin = require('NativeMethodsMixin');\n\nvar RK_SWIPE_REF = 'swiperefreshlayout';\nvar INNERVIEW_REF = 'innerView';\n\nvar SwipeRefreshLayoutAndroid = React.createClass({\n  propTypes: {\n    onRefresh: PropTypes.func,\n  },\n\n  mixins: [NativeMethodsMixin],\n\n  getInnerViewNode: function() {\n    return this.refs[INNERVIEW_REF].getInnerViewNode();\n  },\n\n  render: function() {\n    var childrenWrapper =\n      <View ref={INNERVIEW_REF} style={styles.mainSubview} collapsable={false}>\n        {this.props.children}\n      </View>;\n    return (\n      <AndroidSwipeRefreshLayout\n        {...this.props}\n        ref={RK_SWIPE_REF}\n        style={styles.base}\n        onRefresh={this._onRefresh}>\n        {childrenWrapper}\n      </AndroidSwipeRefreshLayout>\n    );\n  },\n\n  _onRefresh: function() {\n    if (this.props.onRefresh) {\n      this.props.onRefresh();\n    }\n  },\n\n  startRefresh: function() {\n    RCTUIManager.dispatchViewManagerCommand(\n      this._getSwipeRefreshLayoutHandle(),\n      RCTUIManager.AndroidSwipeRefreshLayout.Commands.startRefresh,\n      null\n    );\n  },\n\n  finishRefresh: function() {\n    RCTUIManager.dispatchViewManagerCommand(\n      this._getSwipeRefreshLayoutHandle(),\n      RCTUIManager.AndroidSwipeRefreshLayout.Commands.finishRefresh,\n      null\n    );\n  },\n\n  _getSwipeRefreshLayoutHandle: function() {\n    return React.findNodeHandle(this.refs[RK_SWIPE_REF]);\n  },\n});\n\nvar styles = StyleSheet.create({\n  base: {\n    flex: 1,\n  },\n  mainSubview: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\nvar AndroidSwipeRefreshLayout = createReactNativeComponentClass({\n  validAttributes: ReactNativeViewAttributes.UIView,\n  uiViewClassName: 'AndroidSwipeRefreshLayout',\n});\n\nmodule.exports = SwipeRefreshLayoutAndroid;\n"
        },
        {
          "name": "ThemesList.js",
          "type": "blob",
          "size": 5.2646484375,
          "content": "'use strict';\n\nvar React = require('react-native');\nvar {\n  AsyncStorage,\n  Platform,\n  ListView,\n  Image,\n  StyleSheet,\n  Text,\n  View,\n  TouchableNativeFeedback,\n  TouchableHighlight,\n} = React\n\nvar DataRepository = require('./DataRepository');\n\nvar repository = new DataRepository();\n\nvar ThemesList = React.createClass({\n  getInitialState: function() {\n    var dataSource = new ListView.DataSource({\n      rowHasChanged: (row1, row2) => row1 !== row2,\n    });\n\n    return {\n      isLoading: false,\n      dataSource: dataSource,\n    };\n  },\n  componentDidMount: function() {\n    this.fetchThemes();\n  },\n  fetchThemes: function() {\n    repository.getThemes()\n      .then((themes) => {\n        this.setState({\n          isLoading: false,\n          dataSource: this.state.dataSource.cloneWithRows(themes),\n        });\n      })\n      .catch((error) => {\n        this.setState({\n          isLoading: false,\n          dataSource: this.state.dataSource,\n        });\n      })\n      .done();\n  },\n  renderHeader: function() {\n    var TouchableElement = TouchableHighlight;\n    if (Platform.OS === 'android') {\n      TouchableElement = TouchableNativeFeedback;\n    }\n    return(\n      <View style={styles.header}>\n        <View style={styles.userInfo}>\n          <TouchableElement>\n            <View style={{flexDirection: 'row', alignItems: 'center', padding: 16}}>\n              <Image\n                source={require('image!comment_avatar')}\n                style={{width: 40, height: 40, marginLeft: 8, marginRight: 8}} />\n              <Text style={styles.menuText}>\n                请登录\n              </Text>\n            </View>\n          </TouchableElement>\n          <View style={styles.row}>\n            <TouchableElement>\n              <View style={styles.menuContainer}>\n                <Image\n                  source={require('image!ic_favorites_white')}\n                  style={{width: 30, height: 30}} />\n                <Text style={styles.menuText}>\n                  我的收藏\n                </Text>\n              </View>\n            </TouchableElement>\n            <TouchableElement>\n              <View style={styles.menuContainer}>\n              <Image\n                source={require('image!ic_download_white')}\n                style={{width: 30, height: 30}} />\n                <Text style={styles.menuText}>\n                  离线下载\n                </Text>\n              </View>\n            </TouchableElement>\n          </View>\n        </View>\n        <TouchableElement onPress={() => this.props.onSelectItem(null)}>\n          <View style={styles.themeItem}>\n            <Image\n              source={require('image!home')}\n              style={{width: 30, height: 30, marginLeft: 10}} />\n            <Text style={styles.homeTheme}>\n              首页\n            </Text>\n          </View>\n        </TouchableElement>\n      </View>\n    );\n  },\n  renderRow: function(\n    theme: Object,\n    sectionID: number | string,\n    rowID: number | string,\n    highlightRowFunc: (sectionID: ?number | string, rowID: ?number | string) => void,\n  ) {\n    var TouchableElement = TouchableHighlight;\n    if (Platform.OS === 'android') {\n      TouchableElement = TouchableNativeFeedback;\n    }\n    var icon = theme.subscribed ? require('image!ic_menu_arrow') : require('image!ic_menu_follow');\n    return (\n      <View>\n        <TouchableElement\n          onPress={() => this.props.onSelectItem(theme)}\n          onShowUnderlay={highlightRowFunc}\n          onHideUnderlay={highlightRowFunc}>\n          <View style={styles.themeItem}>\n            <Text style={styles.themeName}>\n              {theme.name}\n            </Text>\n            <Image source={icon} style={styles.themeIndicate}/>\n          </View>\n        </TouchableElement>\n      </View>\n    );\n  },\n  render: function() {\n    return (\n      <View style={styles.container} {...this.props}>\n        <ListView\n          ref=\"themeslistview\"\n          dataSource={this.state.dataSource}\n          renderRow={this.renderRow}\n          automaticallyAdjustContentInsets={false}\n          keyboardDismissMode=\"on-drag\"\n          keyboardShouldPersistTaps={true}\n          showsVerticalScrollIndicator={false}\n          renderHeader={this.renderHeader}\n          style={{flex:1, backgroundColor: 'white'}}\n        />\n      </View>\n    );\n  },\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#FAFAFA',\n  },\n  header: {\n    flex: 1,\n    flexDirection: 'column',\n  },\n  userInfo: {\n    flex: 1,\n    backgroundColor: '#00a2ed',\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  menuContainer: {\n    flex:1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  menuText: {\n    fontSize: 14,\n    color: 'white',\n  },\n  homeTheme: {\n    fontSize: 16,\n    marginLeft: 16,\n    color: '#00a2ed'\n  },\n  themeItem: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 10,\n  },\n  themeName: {\n    flex: 1,\n    fontSize: 16,\n    marginLeft: 16,\n  },\n  themeIndicate: {\n    marginRight: 16,\n    width: 16,\n    height: 16,\n  },\n  separator: {\n    height: 1,\n    backgroundColor: '#eeeeee',\n  },\n  scrollSpinner: {\n    marginVertical: 20,\n  },\n  rowSeparator: {\n    backgroundColor: 'rgba(0, 0, 0, 0.1)',\n    height: 1,\n    marginLeft: 4,\n  },\n  rowSeparatorHide: {\n    opacity: 0.0,\n  },\n});\n\nmodule.exports = ThemesList;\n"
        },
        {
          "name": "WebView.js",
          "type": "blob",
          "size": 0.9853515625,
          "content": "'use strict';\n\nvar React = require('react-native');\nvar {\n  View,\n  requireNativeComponent,\n  PropTypes\n} = React;\n\nvar ReactNativeViewAttributes = require('ReactNativeViewAttributes');\n\nclass ObservableWebView extends React.Component {\n  constructor() {\n    super();\n    this._onChange = this._onChange.bind(this);\n  }\n\n  _onChange(event: Event) {\n    if (!this.props.onScrollChange) {\n      return;\n    }\n    this.props.onScrollChange(event.nativeEvent.ScrollY);\n  }\n\n  render() {\n    return <RCTWebView {...this.props} onChange={this._onChange} />;\n  }\n}\n\nObservableWebView.propTypes = {\n  ...View.propTypes,\n  url: PropTypes.string,\n  html: PropTypes.string,\n  css: PropTypes.string,\n  onScrollChange: PropTypes.func,\n};\n//\n// ObservableWebView.viewConfig = {\n//   uiViewClassName: 'RCTWebView',\n//   validAttributes: ReactNativeViewAttributes.RKView\n// };\n\nvar RCTWebView = requireNativeComponent('RCTWebView', ObservableWebView, {\n  nativeOnly: {onChange: true}\n});\n\nmodule.exports = ObservableWebView;\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.android.js",
          "type": "blob",
          "size": 2.1875,
          "content": "/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n */\n'use strict';\n\nvar React = require('react-native');\n\nvar {\n  AppRegistry,\n  BackAndroid,\n  Text,\n  View,\n  Navigator,\n  StyleSheet,\n  ToolbarAndroid,\n  ToastAndroid,\n} = React;\n\nvar ToolbarAndroid = require('ToolbarAndroid');\n\nvar TimerMixin = require('react-timer-mixin');\n\nvar SplashScreen = require('./SplashScreen');\nvar MainScreen = require('./MainScreen');\nvar StoryScreen = require('./StoryScreen');\n\nvar _navigator;\nBackAndroid.addEventListener('hardwareBackPress', function() {\n  if (_navigator && _navigator.getCurrentRoutes().length > 1) {\n    _navigator.pop();\n    return true;\n  }\n  return false;\n});\n\nvar RCTZhiHuDaily = React.createClass({\n  mixins: [TimerMixin],\n  componentDidMount: function() {\n    this.setTimeout(\n      () => {\n        this.setState({splashed: true});\n      },\n      2000,\n    );\n  },\n  RouteMapper: function(route, navigationOperations, onComponentRef) {\n    _navigator = navigationOperations;\n    if (route.name === 'home') {\n      return (\n        <View style={styles.container}>\n          <MainScreen navigator={navigationOperations}/>\n        </View>\n      );\n    } else if (route.name === 'story') {\n      return (\n        <View style={styles.container}>\n          <StoryScreen\n            style={{flex: 1}}\n            navigator={navigationOperations}\n            story={route.story} />\n        </View>\n      );\n    }\n  },\n  getInitialState: function() {\n    return {\n      splashed: false,\n    };\n  },\n  onActionSelected: function(position) {\n  },\n  render: function() {\n    if (this.state.splashed) {\n      var initialRoute = {name: 'home'};\n      return (\n        <Navigator\n          style={styles.container}\n          initialRoute={initialRoute}\n          configureScene={() => Navigator.SceneConfigs.FadeAndroid}\n          renderScene={this.RouteMapper}\n        />\n      );\n    } else {\n      return (\n        <SplashScreen />\n      );\n    }\n  }\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n\nAppRegistry.registerComponent('RCTZhiHuDaily', () => RCTZhiHuDaily);\n"
        },
        {
          "name": "index.ios.js",
          "type": "blob",
          "size": 2.2060546875,
          "content": "/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n */\n'use strict';\n\nvar React = require('react-native');\nvar {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View,\n  Navigator,\n  NavigatorIOS,\n} = React;\n\nvar TimerMixin = require('react-timer-mixin');\n\nvar SplashScreen = require('./SplashScreen');\nvar MainScreen = require('./MainScreen');\nvar StoryScreen = require('./StoryScreen');\n\nvar _navigator;\n\nvar RCTZhiHuDaily = React.createClass({\n  mixins: [TimerMixin],\n\n  getInitialState: function() {\n    return {\n      splashed: false,\n    };\n  },\n\n  componentDidMount: function() {\n    this.setTimeout(\n      () => {\n        this.setState({splashed: true});\n      },\n      2000,\n    );\n  },\n\n  RouteMapper: function(route, navigationOperations, onComponentRef) {\n    _navigator = navigationOperations;\n    // return (\n    //   <View style={styles.container}>\n    //     <MainScreen navigator={navigationOperations}/>\n    //   </View>\n    // );\n    if (route.name === 'home') {\n      return (\n        <View style={styles.container}>\n          <MainScreen navigator={navigationOperations}/>\n        </View>\n      );\n    } else if (route.name === 'story') {\n      return (\n        <View style={styles.container}>\n          <StoryScreen\n            style={{flex: 1}}\n            navigator={navigationOperations}\n            story={route.story} />\n        </View>\n      );\n    }\n  },\n\n  render: function() {\n    if (this.state.splashed) {\n      var initialRoute = {name: 'home'};\n      return (\n        // <NavigatorIOS\n        //   style={styles.container}\n        //   initialRoute={{\n        //     title: '首页',\n        //     component: MainScreen,\n        //   }}\n        // />\n        <Navigator\n          style={styles.container}\n          initialRoute={initialRoute}\n          configureScene={() => Navigator.SceneConfigs.FadeAndroid}\n          renderScene={this.RouteMapper}\n        />\n      );\n      // return (\n      //   <View style={styles.container}>\n      //     <MainScreen />\n      //   </View>\n      // );\n    } else {\n      return (\n        <SplashScreen />\n      );\n    }\n  }\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n\nAppRegistry.registerComponent('RCTZhiHuDaily', () => RCTZhiHuDaily);\n"
        },
        {
          "name": "ios",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.3134765625,
          "content": "{\n  \"name\": \"RCTZhiHuDaily\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node_modules/react-native/packager/packager.sh\"\n  },\n  \"dependencies\": {\n    \"react-native\": \"^0.17.0\",\n    \"react-native-drawer\": \"^1.4.2\",\n    \"react-native-viewpager\": \"^0.1.0\",\n    \"react-timer-mixin\": \"^0.13.3\"\n  }\n}\n"
        }
      ]
    }
  ]
}