{
  "metadata": {
    "timestamp": 1736561932272,
    "page": 634,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sindresorhus/meow",
      "stars": 3560,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1708984375,
          "content": "root = true\n\n[*]\nindent_style = tab\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0439453125,
          "content": "node_modules\nbuild\nyarn.lock\ntest-d/build.ts\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.0908203125,
          "content": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "meow.gif",
          "type": "blob",
          "size": 594.5166015625,
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.005859375,
          "content": "{\n\t\"name\": \"meow\",\n\t\"version\": \"13.2.0\",\n\t\"description\": \"CLI app helper\",\n\t\"license\": \"MIT\",\n\t\"repository\": \"sindresorhus/meow\",\n\t\"funding\": \"https://github.com/sponsors/sindresorhus\",\n\t\"author\": {\n\t\t\"name\": \"Sindre Sorhus\",\n\t\t\"email\": \"sindresorhus@gmail.com\",\n\t\t\"url\": \"https://sindresorhus.com\"\n\t},\n\t\"type\": \"module\",\n\t\"exports\": {\n\t\t\"types\": \"./build/index.d.ts\",\n\t\t\"default\": \"./build/index.js\"\n\t},\n\t\"sideEffects\": false,\n\t\"engines\": {\n\t\t\"node\": \">=18\"\n\t},\n\t\"scripts\": {\n\t\t\"prepare\": \"npm run build\",\n\t\t\"build\": \"rollup --config\",\n\t\t\"test\": \"xo && npm run build && ava && tsd --typings build/index.d.ts\"\n\t},\n\t\"files\": [\n\t\t\"build\"\n\t],\n\t\"keywords\": [\n\t\t\"cli\",\n\t\t\"bin\",\n\t\t\"util\",\n\t\t\"utility\",\n\t\t\"helper\",\n\t\t\"argv\",\n\t\t\"command\",\n\t\t\"line\",\n\t\t\"meow\",\n\t\t\"cat\",\n\t\t\"kitten\",\n\t\t\"parser\",\n\t\t\"option\",\n\t\t\"flags\",\n\t\t\"input\",\n\t\t\"cmd\",\n\t\t\"console\"\n\t],\n\t\"_actualDependencies\": [\n\t\t\"@types/minimist\",\n\t\t\"camelcase-keys\",\n\t\t\"decamelize\",\n\t\t\"decamelize-keys\",\n\t\t\"minimist-options\",\n\t\t\"normalize-package-data\",\n\t\t\"read-package-up\",\n\t\t\"redent\",\n\t\t\"trim-newlines\",\n\t\t\"type-fest\",\n\t\t\"yargs-parser\"\n\t],\n\t\"devDependencies\": {\n\t\t\"@rollup/plugin-commonjs\": \"^25.0.7\",\n\t\t\"@rollup/plugin-json\": \"^6.1.0\",\n\t\t\"@rollup/plugin-node-resolve\": \"^15.2.3\",\n\t\t\"@types/minimist\": \"^1.2.5\",\n\t\t\"ava\": \"^6.1.1\",\n\t\t\"camelcase-keys\": \"^9.1.3\",\n\t\t\"common-tags\": \"^2.0.0-alpha.1\",\n\t\t\"decamelize\": \"^6.0.0\",\n\t\t\"decamelize-keys\": \"^2.0.1\",\n\t\t\"delete_comments\": \"^0.0.2\",\n\t\t\"execa\": \"^8.0.1\",\n\t\t\"globby\": \"^14.0.1\",\n\t\t\"indent-string\": \"^5.0.0\",\n\t\t\"minimist-options\": \"4.1.0\",\n\t\t\"normalize-package-data\": \"^6.0.0\",\n\t\t\"read-package-up\": \"^11.0.0\",\n\t\t\"read-pkg\": \"^9.0.1\",\n\t\t\"redent\": \"^4.0.0\",\n\t\t\"rollup\": \"^4.12.0\",\n\t\t\"rollup-plugin-dts\": \"^6.1.0\",\n\t\t\"rollup-plugin-license\": \"^3.2.0\",\n\t\t\"stack-utils\": \"^2.0.6\",\n\t\t\"trim-newlines\": \"^5.0.0\",\n\t\t\"tsd\": \"^0.30.7\",\n\t\t\"type-fest\": \"^4.10.3\",\n\t\t\"typescript\": \"~5.3.3\",\n\t\t\"xo\": \"^0.57.0\",\n\t\t\"yargs-parser\": \"^21.1.1\"\n\t},\n\t\"xo\": {\n\t\t\"rules\": {\n\t\t\t\"unicorn/no-process-exit\": \"off\",\n\t\t\t\"unicorn/error-message\": \"off\"\n\t\t},\n\t\t\"ignores\": [\n\t\t\t\"build\"\n\t\t]\n\t}\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 7.1240234375,
          "content": "# meow\n\n> CLI app helper\n\n![](meow.gif)\n\n*I would recommend reading this [guide](https://clig.dev) on how to make user-friendly command-line tools.*\n\n## Features\n\n- Parses arguments\n- Converts flags to [camelCase](https://github.com/sindresorhus/camelcase)\n- Negates flags when using the `--no-` prefix\n- Outputs version when `--version`\n- Outputs description and supplied help text when `--help`\n- Sets the process title to the binary name defined in package.json\n- No dependencies!\n\n## Install\n\n```sh\nnpm install meow\n```\n\n## Usage\n\n```sh\n./foo-app.js unicorns --rainbow\n```\n\n```js\n#!/usr/bin/env node\nimport meow from 'meow';\nimport foo from './lib/index.js';\n\nconst cli = meow(`\n\tUsage\n\t  $ foo <input>\n\n\tOptions\n\t  --rainbow, -r  Include a rainbow\n\n\tExamples\n\t  $ foo unicorns --rainbow\n\t  ðŸŒˆ unicorns ðŸŒˆ\n`, {\n\timportMeta: import.meta, // This is required\n\tflags: {\n\t\trainbow: {\n\t\t\ttype: 'boolean',\n\t\t\tshortFlag: 'r'\n\t\t}\n\t}\n});\n/*\n{\n\tinput: ['unicorns'],\n\tflags: {rainbow: true},\n\t...\n}\n*/\n\nfoo(cli.input.at(0), cli.flags);\n```\n\n## API\n\n### meow(helpText, options)\n### meow(options)\n\nReturns an `object` with:\n\n- `input` *(Array)* - Non-flag arguments\n- `flags` *(Object)* - Flags converted to camelCase excluding aliases\n- `unnormalizedFlags` *(Object)* - Flags converted to camelCase including aliases\n- `pkg` *(Object)* - The `package.json` object\n- `help` *(string)* - The help text used with `--help`\n- `showHelp([exitCode=2])` *(Function)* - Show the help text and exit with `exitCode`\n- `showVersion()` *(Function)* - Show the version text and exit\n\n#### helpText\n\nType: `string`\n\nShortcut for the `help` option.\n\n#### options\n\nType: `object`\n\n##### importMeta\n\n**Required**\\\nType: `object`\n\nPass in [`import.meta`](https://nodejs.org/dist/latest/docs/api/esm.html#esm_import_meta). This is used to find the correct package.json file.\n\n##### flags\n\nType: `object`\n\nDefine argument flags.\n\nThe key is the flag name in camel-case and the value is an object with any of:\n\n- `type`: Type of value. (Possible values: `string` `boolean` `number`)\n- `choices`: Limit valid values to a predefined set of choices.\n- `default`: Default value when the flag is not specified.\n- `shortFlag`: A short flag alias.\n- `aliases`: Other names for the flag.\n- `isMultiple`: Indicates a flag can be set multiple times. Values are turned into an array. (Default: false)\n\t- Multiple values are provided by specifying the flag multiple times, for example, `$ foo -u rainbow -u cat`. Space- or comma-separated values are [currently *not* supported](https://github.com/sindresorhus/meow/issues/164).\n- `isRequired`: Determine if the flag is required. (Default: false)\n\t- If it's only known at runtime whether the flag is required or not, you can pass a `Function` instead of a `boolean`, which based on the given flags and other non-flag arguments, should decide if the flag is required. Two arguments are passed to the function:\n\t- The first argument is the **flags** object, which contains the flags converted to camel-case excluding aliases.\n\t- The second argument is the **input** string array, which contains the non-flag arguments.\n\t- The function should return a `boolean`, true if the flag is required, otherwise false.\n\nNote that flags are always defined using a camel-case key (`myKey`), but will match arguments in kebab-case (`--my-key`).\n\nExample:\n\n```js\nflags: {\n\tunicorn: {\n\t\ttype: 'string',\n\t\tchoices: ['rainbow', 'cat', 'unicorn'],\n\t\tdefault: ['rainbow', 'cat'],\n\t\tshortFlag: 'u',\n\t\taliases: ['unicorns'],\n\t\tisMultiple: true,\n\t\tisRequired: (flags, input) => {\n\t\t\tif (flags.otherFlag) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t}\n}\n```\n\n##### description\n\nType: `string | false`\\\nDefault: The package.json `\"description\"` property\n\nDescription to show above the help text.\n\nSet it to `false` to disable it altogether.\n\n##### help\n\nType: `string | false`\n\nThe help text you want shown.\n\nThe input is reindented and starting/ending newlines are trimmed which means you can use a [template literal](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/template_strings) without having to care about using the correct amount of indent.\n\nThe description will be shown above your help text automatically.\n\nSet it to `false` to disable it altogether.\n\n##### version\n\nType: `string`\\\nDefault: The package.json `\"version\"` property\n\nSet a custom version output.\n\n##### autoHelp\n\nType: `boolean`\\\nDefault: `true`\n\nAutomatically show the help text when the `--help` flag is present. Useful to set this value to `false` when a CLI manages child CLIs with their own help text.\n\nThis option is only considered when there is only one argument in `process.argv`.\n\n##### autoVersion\n\nType: `boolean`\\\nDefault: `true`\n\nAutomatically show the version text when the `--version` flag is present. Useful to set this value to `false` when a CLI manages child CLIs with their own version text.\n\nThis option is only considered when there is only one argument in `process.argv`.\n\n##### pkg\n\nType: `object`\\\nDefault: Closest package.json upwards\n\npackage.json as an `object`.\n\nNote: Setting this stops `meow` from finding a package.json.\n\n*You most likely don't need this option.*\n\n##### argv\n\nType: `string[]`\\\nDefault: `process.argv.slice(2)`\n\nCustom arguments object.\n\n##### inferType\n\nType: `boolean`\\\nDefault: `false`\n\nInfer the argument type.\n\nBy default, the argument `5` in `$ foo 5` becomes a string. Enabling this would infer it as a number.\n\n##### booleanDefault\n\nType: `boolean | undefined`\\\nDefault: `false`\n\nValue of `boolean` flags not defined in `argv`.\n\nIf set to `undefined`, the flags not defined in `argv` will be excluded from the result.\nThe `default` value set in `boolean` flags take precedence over `booleanDefault`.\n\n_Note: If used in conjunction with `isMultiple`, the default flag value is set to `[]`._\n\n__Caution: Explicitly specifying `undefined` for `booleanDefault` has different meaning from omitting key itself.__\n\nExample:\n\n```js\nimport meow from 'meow';\n\nconst cli = meow(`\n\tUsage\n\t  $ foo\n\n\tOptions\n\t  --rainbow, -r  Include a rainbow\n\t  --unicorn, -u  Include a unicorn\n\t  --no-sparkles  Exclude sparkles\n\n\tExamples\n\t  $ foo\n\t  ðŸŒˆ unicornsâœ¨ðŸŒˆ\n`, {\n\timportMeta: import.meta,\n\tbooleanDefault: undefined,\n\tflags: {\n\t\trainbow: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t\tshortFlag: 'r'\n\t\t},\n\t\tunicorn: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tshortFlag: 'u'\n\t\t},\n\t\tcake: {\n\t\t\ttype: 'boolean',\n\t\t\tshortFlag: 'c'\n\t\t},\n\t\tsparkles: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true\n\t\t}\n\t}\n});\n/*\n{\n\tflags: {\n\t\trainbow: true,\n\t\tunicorn: false,\n\t\tsparkles: true\n\t},\n\tunnormalizedFlags: {\n\t\trainbow: true,\n\t\tr: true,\n\t\tunicorn: false,\n\t\tu: false,\n\t\tsparkles: true\n\t},\n\tâ€¦\n}\n*/\n```\n\n##### allowUnknownFlags\n\nType `boolean`\\\nDefault: `true`\n\nWhether to allow unknown flags or not.\n\n##### helpIndent\n\nType `number`\\\nDefault: `2`\n\nThe number of spaces to use for indenting the help text.\n\n## Tips\n\nSee [`chalk`](https://github.com/chalk/chalk) if you want to colorize the terminal output.\n\nSee [`get-stdin`](https://github.com/sindresorhus/get-stdin) if you want to accept input from stdin.\n\nSee [`conf`](https://github.com/sindresorhus/conf) if you need to persist some data.\n\n[More useful CLI utilitiesâ€¦](https://github.com/sindresorhus/awesome-nodejs#command-line-utilities)\n"
        },
        {
          "name": "rollup.config.js",
          "type": "blob",
          "size": 2.154296875,
          "content": "import fs from 'node:fs/promises';\nimport {nodeResolve} from '@rollup/plugin-node-resolve';\nimport commonjs from '@rollup/plugin-commonjs';\nimport json from '@rollup/plugin-json';\nimport license from 'rollup-plugin-license';\nimport {dts} from 'rollup-plugin-dts';\nimport {globby} from 'globby';\nimport {createTag, replaceResultTransformer} from 'common-tags';\nimport {delete_comments as deleteComments} from 'delete_comments';\nimport {defineConfig} from 'rollup';\n\n/** Matches empty lines: https://stackoverflow.com/q/16369642/10292952 */\nconst emptyLineRegex = /^\\s*[\\r\\n]/gm;\n\nconst stripComments = createTag(\n\t{onEndResult: deleteComments},\n\treplaceResultTransformer(emptyLineRegex, ''),\n);\n\nconst sourceDirectory = 'source';\nconst outputDirectory = 'build';\n\nconst config = defineConfig({\n\tinput: await globby(`${sourceDirectory}/**/*.js`),\n\toutput: {\n\t\tdir: outputDirectory,\n\t\tinterop: 'esModule',\n\t\tgeneratedCode: {\n\t\t\tpreset: 'es2015',\n\t\t},\n\t\tchunkFileNames: '[name].js',\n\t\tmanualChunks(id) {\n\t\t\tif (id.includes('node_modules')) {\n\t\t\t\treturn 'dependencies';\n\t\t\t}\n\t\t},\n\t\thoistTransitiveImports: false,\n\t\tplugins: [{\n\t\t\tname: 'strip-dependency-comments',\n\t\t\trenderChunk(code, chunk) {\n\t\t\t\treturn chunk.name === 'dependencies' ? stripComments(code) : null;\n\t\t\t},\n\t\t}],\n\t},\n\ttreeshake: {\n\t\tmoduleSideEffects: 'no-external',\n\t},\n\tplugins: [\n\t\tnodeResolve({exportConditions: ['node']}),\n\t\tcommonjs({\n\t\t\tinclude: 'node_modules/**',\n\t\t}),\n\t\tjson(),\n\t\tlicense({\n\t\t\tthirdParty: {\n\t\t\t\toutput: `${outputDirectory}/licenses.md`,\n\t\t\t},\n\t\t}),\n\t],\n});\n\nconst dtsConfig = defineConfig({\n\tinput: `./${sourceDirectory}/index.d.ts`,\n\toutput: {\n\t\tfile: `./${outputDirectory}/index.d.ts`,\n\t\tformat: 'es',\n\t},\n\tplugins: [\n\t\tdts({\n\t\t\trespectExternal: true,\n\t\t}),\n\t\t{\n\t\t\tname: 'copy-tsd',\n\t\t\tasync generateBundle() {\n\t\t\t\tlet tsdFile = await fs.readFile('./test-d/index.ts', 'utf8');\n\t\t\t\ttsdFile = tsdFile.replace(\n\t\t\t\t\t`import meow from '../${sourceDirectory}/index.js'`,\n\t\t\t\t\t`import meow from '../${outputDirectory}/index.js'`,\n\t\t\t\t);\n\n\t\t\t\tawait fs.writeFile(`./test-d/${outputDirectory}.ts`, tsdFile);\n\t\t\t},\n\t\t},\n\t],\n});\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default [config, dtsConfig];\n"
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-d",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.3046875,
          "content": "{\n\t\"include\": [\n\t\t\"source/index.d.ts\",\n\t\t\"test-d\",\n\t],\n\t\"compilerOptions\": {\n\t\t\"strict\": true,\n\t\t\"jsx\": \"react\",\n\t\t\"target\": \"ES2021\", // Node.js 16\n\t\t\"lib\": [\n\t\t\t\"ES2021\"\n\t\t],\n\t\t\"module\": \"ES2020\",\n\t\t\"moduleResolution\": \"node\",\n\t\t\"noImplicitAny\": true,\n\t\t\"strictNullChecks\": true,\n\t\t\"noUnusedLocals\": true\n\t}\n}\n"
        }
      ]
    }
  ]
}