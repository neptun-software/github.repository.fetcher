{
  "metadata": {
    "timestamp": 1736562123041,
    "page": 923,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "szwacz/electron-boilerplate",
      "stars": 3132,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".babelrc",
          "type": "blob",
          "size": 0.173828125,
          "content": "{\n  \"presets\": [\n    [\n      \"@babel/env\",\n      {\n        \"targets\": {\n          \"browsers\": \"last 2 Chrome versions\",\n          \"node\": \"current\"\n        }\n      }\n    ]\n  ]\n}\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.166015625,
          "content": "node_modules\n.DS_Store\nThumbs.db\n*.log\n\n/dist\n/temp\n\n# ignore everything in 'app' folder what had been generated from 'src' folder\n/app/app.js\n/app/main.js\n/app/**/*.map\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-2021 Jakub Szwacz\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.1162109375,
          "content": "# electron-boilerplate\n\n**This repository is no longer in active maintenance.**\n\n---\n\nMinimalistic, very easy to understand boilerplate for [Electron runtime](https://www.electronjs.org/). Tested on Windows, macOS and Linux.  \n\nThis project contains only bare minimum of tooling and dependencies to provide you with simple to understand and extensible base (but still, this is fully functional Electron environment). The boilerplate doesn't impose on you any frontend technologies, so feel free to pick your favourite.\n\n# Quick start\n\nMake sure you have [Node.js](https://nodejs.org) installed, then type...\n```\ngit clone https://github.com/szwacz/electron-boilerplate.git\ncd electron-boilerplate\nnpm install\nnpm start\n```\n...and you have a running desktop application on your screen.\n\n# Structure of the project\n\nThe application consists of two main folders...\n\n`src` - files within this folder get transpiled or compiled (because Electron can't use them directly).\n\n`app` - contains all static assets which don't need any pre-processing and can be used directly.\n\nThe build process compiles the content of the `src` folder and puts it into the `app` folder, so after the build has finished, your `app` folder contains the full, runnable application. Treat `src` and `app` folders like two halves of one bigger thing.\n\nThe drawback of this design is that `app` folder contains some files which should be git-ignored and some which shouldn't (see `.gitignore` file). But this two-folders split makes development builds much faster.\n\n# Development\n\n## Starting the app\n\n```\nnpm start\n```\n\n## The build pipeline\n\nBuild process uses [Webpack](https://webpack.js.org/). The entry-points are `src/main.js` and `src/app.js`. Webpack will follow all `import` statements starting from those files and compile code of the whole dependency tree into one `.js` file for each entry point.\n\n[Babel](http://babeljs.io/) is also utilised, but mainly for its great error messages. Electron under the hood runs latest Chromium, hence most of the new JavaScript features are already natively supported.\n\n## Environments\n\nEnvironmental variables are done in a bit different way (not via `process.env`). Env files are plain JSONs in `config` directory, and build process dynamically links one of them as an `env` module. You can import it wherever in code you need access to the environment.\n```js\nimport env from \"env\";\nconsole.log(env.name);\n```\n\n## Adding npm modules to your app\n\nRemember to respect the split between `dependencies` and `devDependencies` in `package.json` file. Your distributable app will contain only modules listed in `dependencies` after running the release script.\n\n*Side note:* If the module you want to use in your app is a native one (not pure JavaScript but compiled binary) you should first  run `npm install name_of_npm_module` and then `npm run postinstall` to rebuild the module for Electron. You need to do this once after you're first time installing the module. Later on, the postinstall script will fire automatically with every `npm install`.\n\n# Testing\n\nRun all tests:\n```\nnpm test\n```\n\n## Unit\n\n```\nnpm run unit\n```\nUsing [electron-mocha](https://github.com/jprichardson/electron-mocha) test runner with the [Chai](http://chaijs.com/api/assert/) assertion library. You can put your spec files wherever you want within the `src` directory, just name them with the `.spec.js` extension.\n\n## End to end\n\n```\nnpm run e2e\n```\nUsing [Mocha](https://mochajs.org/) and [Spectron](http://electron.atom.io/spectron/). This task will run all files in `e2e` directory with `.e2e.js` extension.\n\n# Making a release\n\nTo package your app into an installer use command:\n```\nnpm run release\n```\n\nOnce the packaging process finished, the `dist` directory will contain your distributable file.\n\n[Electron-builder](https://github.com/electron-userland/electron-builder) is handling the packaging process. Follow docs over there to customise your build.\n\nYou can package your app cross-platform from a single operating system, [electron-builder kind of supports this](https://www.electron.build/multi-platform-build), but there are limitations and asterisks. That's why this boilerplate doesn't do that by default.\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "e2e",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.7255859375,
          "content": "{\n  \"name\": \"electron-boilerplate\",\n  \"productName\": \"Electron Boilerplate\",\n  \"description\": \"Starter for your Electron application\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"author\": \"Mr. Gumby <mr.gumby@example.com>\",\n  \"copyright\": \"Â© 2017, Gumby inc.\",\n  \"homepage\": \"http://example.com\",\n  \"main\": \"app/main.js\",\n  \"build\": {\n    \"appId\": \"com.example.electron-boilerplate\",\n    \"files\": [\n      \"app/**/*\",\n      \"node_modules/**/*\",\n      \"package.json\"\n    ],\n    \"directories\": {\n      \"buildResources\": \"resources\"\n    },\n    \"publish\": null\n  },\n  \"scripts\": {\n    \"postinstall\": \"electron-builder install-app-deps\",\n    \"preunit\": \"webpack --config=build/webpack.unit.config.js --env=test\",\n    \"unit\": \"electron-mocha temp/specs.js --renderer --color --require source-map-support/register\",\n    \"pree2e\": \"webpack --config=build/webpack.app.config.js --env=test && webpack --config=build/webpack.e2e.config.js --env=test\",\n    \"e2e\": \"mocha temp/e2e.js --require source-map-support/register\",\n    \"test\": \"npm run unit && npm run e2e\",\n    \"start\": \"node build/start.js\",\n    \"release\": \"npm test && webpack --config=build/webpack.app.config.js --env=production && electron-builder\"\n  },\n  \"dependencies\": {\n    \"fs-jetpack\": \"^4.1.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.5.5\",\n    \"@babel/preset-env\": \"^7.5.5\",\n    \"babel-loader\": \"^8.2.2\",\n    \"chai\": \"^4.1.0\",\n    \"css-loader\": \"^5.2.0\",\n    \"electron\": \"^13.0.1\",\n    \"electron-builder\": \"^22.5.1\",\n    \"electron-mocha\": \"^10.0.0\",\n    \"mocha\": \"^8.3.2\",\n    \"source-map-support\": \"^0.5.6\",\n    \"spectron\": \"^15.0.0\",\n    \"style-loader\": \"^2.0.0\",\n    \"webpack\": \"^5.30.0\",\n    \"webpack-cli\": \"^4.6.0\",\n    \"webpack-merge\": \"^5.7.3\",\n    \"webpack-node-externals\": \"^3.0.0\"\n  }\n}\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}