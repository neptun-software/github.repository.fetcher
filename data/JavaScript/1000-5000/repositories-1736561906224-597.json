{
  "metadata": {
    "timestamp": 1736561906224,
    "page": 597,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wellcaffeinated/PhysicsJS",
      "stars": 3624,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0732421875,
          "content": "node_modules\n.grunt\n.DS_Store\n_SpecRunner.html\n_working\n.sass-cache\n_site/\n"
        },
        {
          "name": "MIT-LICENSE.txt",
          "type": "blob",
          "size": 1.0693359375,
          "content": "Copyright (c) 2012 Jasper Palfree http://wellcaffeinated.net/PhysicsJS/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.904296875,
          "content": "# This project is no longer maintained\n\nIt's been many years since writing this library. And I don't have time to dedicate to maintain it. On the up side, [Matter.js](http://brm.io/matter-js) has really stepped up and taken the spotlight of javascript physics. It has everything PhysicsJS has and more. :)\n\n# PhysicsJS\n\nA modular, extendable, and easy-to-use physics engine for javascript.\n\nLatest version: 0.7.0 (beta)\n\n## Usage\n\n**Please [visit the website](http://wellcaffeinated.net/PhysicsJS/) for\ndetails about installation and usage**.\n\nDistribution files are in the `dist/` directory.\n\n## Contributing\n\nSource code is kept in the `src/` directory. After any source code\nmodifications it will be necessary to run the grunt build task to\nrebuild the source and run unit tests.\n\nFirst install [grunt](http://gruntjs.com/).\n\nNext install dev dependencies:\n\n    $ npm install\n\nthen run grunt\n\n    $ grunt\n\nThe default grunt task will create a `_working/` directory with the\nPhysicsJS development build. You can play around with that.\n**NOTE**: the `_working/` directory won't be committed\n(it is in .gitignore).\n\nAfter you run this you can use (Mr.doob's) htmleditor in `editor/` to play around.\n\nIf you want grunt to automatically create the development build\nwhen you modify the source in `src/` then run:\n\n    $ grunt watch\n\n**Note** grunt watch won't run unit tests.\n\n### Pull Requests\n\nIf you are contributing a bug-fix or a very minor addition, feel free to\ndo a pull request on the master branch.\n\nIf it is something else create a new (or existing) feature branch (eg: `feature/MY_FEAT`)\nand issue a pull request on that.\n\nIf unsure, create an issue to discuss.\n\nPlease ensure that:\n\n* the files in `dist/` are _unmodified_.\n* the features you add are well documented with jsdoc comments if applicable.\n* the code is indented with 4 space characters.\n\n## License MIT\n\nCopyright (c) 2013 Jasper Palfree http://wellcaffeinated.net/PhysicsJS/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.6240234375,
          "content": "{\n  \"name\": \"PhysicsJS\",\n  \"version\": \"0.7.0\",\n  \"homepage\": \"http://wellcaffeinated.net/PhysicsJS\",\n  \"authors\": [\n    \"Jasper Palfree <well.caffeinated@gmail.com>\"\n  ],\n  \"description\": \"A modular, extendable, and easy-to-use physics engine for javascript\",\n  \"main\": \"dist/physicsjs-full.js\",\n  \"moduleType\": [\n    \"amd\",\n    \"globals\",\n    \"node\"\n  ],\n  \"keywords\": [\n    \"physics\",\n    \"engine\",\n    \"simulation\"\n  ],\n  \"license\": \"MIT\",\n  \"ignore\": [\n    \"**/.*\",\n    \"node_modules\",\n    \"bower_components\",\n    \"test\",\n    \"tests\",\n    \"editor\",\n    \"lib\",\n    \"src\",\n    \"jshint.json\",\n    \"gruntfile.js\",\n    \"package.json\"\n  ]\n}\n"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "editor",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gruntfile.js",
          "type": "blob",
          "size": 12.7958984375,
          "content": "/*global module:false*/\n\nmodule.exports = function(grunt) {\n    \"use strict\";\n    var pkg, config;\n\n    pkg = grunt.file.readJSON('package.json');\n\n    config = {\n        banner : [\n            '/**',\n            ' * <%= pkg.name %> v<%= pkg.version %> - <%= grunt.template.today(\"yyyy-mm-dd\") %>',\n            ' * <%= pkg.description %>',\n            ' * http://wellcaffeinated.net/PhysicsJS',\n            ' *',\n            ' * Copyright (c) <%= grunt.template.today(\"yyyy\") %> <%= pkg.author %>',\n            ' * Licensed <%= pkg.license %>',\n            ' */\\n'\n        ].join('\\n'),\n\n        extensionWrapper: [\n            \"(function (root, factory) {\",\n            \"    if (typeof define === 'function' && define.amd) {\",\n            \"        define(['<%= deps.join(\\\"','\\\")%>'], factory);\",\n            \"    } else if (typeof exports === 'object') {\",\n            \"        module.exports = factory.apply(root, ['<%= deps.join(\\\"','\\\")%>'].map(require));\",\n            \"    } else {\",\n            \"        factory.call(root, root.Physics);\",\n            \"    }\",\n            \"}(this, function (Physics) {\",\n            \"    'use strict';\",\n            \"    <%= src %>\",\n            \"    // end module: <%= path %>\",\n            \"    return Physics;\",\n            \"}));// UMD\",\n        ].join('\\n'),\n\n        sources : [\n            'src/intro.js',\n            'src/math/*.js',\n\n            'src/util/noconflict.js',\n            'src/util/decorator.js',\n            'src/util/helpers.js',\n            'src/util/scratchpad.js',\n            'src/util/pubsub.js',\n            'src/util/ticker.js',\n\n            'src/core/query.js',\n            'src/core/behavior.js',\n            'src/core/body.js',\n            'src/core/geometry.js',\n            'src/core/geometry-helpers.js',\n            'src/core/integrator.js',\n            'src/core/renderer.js',\n            'src/core/world.js',\n\n            // default integrator\n            'src/integrators/verlet.js',\n\n            // default geometry\n            'src/geometries/point.js',\n            'src/bodies/point.js',\n\n            'src/outro.js'\n        ],\n\n        moduleSources : [\n            'src/geometries/*.js',\n            '!src/geometries/point.js',\n            'src/bodies/*.js',\n            '!src/bodies/point.js',\n            'src/behaviors/*.js',\n            'src/integrators/*.js',\n            '!src/integrators/verlet.js',\n            'src/renderers/*.js'\n        ],\n\n        sourcesIgnore: [\n            '!src/renderers/debug.js'\n        ],\n\n        rjsHelper: 'test/r.js.spec.helper.js',\n\n        pkg : pkg,\n        uglifyFiles : {}\n    };\n\n    config.distRequireJS = {\n        baseUrl: 'dist/',\n        packages: [\n            {\n                name: 'physicsjs',\n                location: '.',\n                main: 'physicsjs'\n            }\n        ],\n        paths: {\n            'pixi': '../lib/pixi'\n        },\n        optimize: 'none',\n        name: '../' + config.rjsHelper.replace(/\\.js$/, ''),\n        out: 'test/physicsjs-built.js'\n    };\n\n    // setup dynamic filenames\n    config.name = config.pkg.name.toLowerCase();\n    config.nameFull = config.name + '-full';\n    config.versioned = [config.name, config.pkg.version].join('-');\n    config.versionedFull = [config.name, 'full', config.pkg.version].join('-');\n    config.dev = '_working/physicsjs/'+ config.name + '.js';\n    config.devFull = '_working/physicsjs/'+ config.nameFull + '.js';\n    config.dist = 'dist/' + config.name + '.js';\n    config.distFull = 'dist/' + config.nameFull + '.js';\n    config.uglifyFiles['dist/' + config.name + '.min.js'] = config.dist;\n    config.uglifyFiles['dist/' + config.nameFull + '.min.js'] = config.distFull;\n\n    // build source globs for full package\n    config.sourcesFull = [].concat(config.sources);\n    Array.prototype.splice.apply(config.sourcesFull, [-1, 0].concat(config.moduleSources));\n\n    // remove the exclusions. we want it to match all files.\n    for ( var i = 0, l = config.sourcesFull.length; i < l; ++i ){\n\n        if (config.sourcesFull[ i ].charAt(0) === '!'){\n            config.sourcesFull.splice( i, 1 );\n            i--;\n            l--;\n        }\n    }\n\n    // search for pragmas to figure out dependencies and add a umd declaration\n    function wrapDefine( src, path ){\n\n        path = path.replace('src/', '');\n\n        var deps = ['physicsjs'];\n        var l = path.split('/').length;\n        var pfx = l > 0 ? (new Array( l )).join('../') : './';\n        src.replace(/@requires\\s([\\w-_\\/]+(\\.js)?)/g, function( match, dep ){\n\n            var i = dep.indexOf('.js');\n\n            if ( i > -1 ){\n                // must be a 3rd party dep\n                dep = dep.substr( 0, i );\n                deps.push( dep );\n            } else {\n                // just get the dependency\n                deps.push( pfx + dep );\n            }\n            // no effect\n            return match;\n        });\n\n        var data = {\n            src: src.replace(/\\n/g, '\\n    '),\n            path: path,\n            deps: deps\n        };\n\n        return grunt.template.process(config.banner, config) +\n            grunt.template.process(config.extensionWrapper, {data: data});\n    }\n\n    // write out the source file identifier as a comment\n    function fileIdentifier(src, path){\n\n        return '\\n// ---\\n// inside: ' + path + '\\n\\n' + src;\n    }\n\n    // Project configuration.\n    grunt.initConfig({\n        pkg : config.pkg,\n        clean : {\n            dist : ['dist/'],\n            dev : ['_working/physicsjs/'],\n            test: [config.distRequireJS.out]\n        },\n        concat : {\n            options : {\n                stripBanners : true,\n                banner : config.banner\n            },\n            dev : {\n                options: {\n                    process: fileIdentifier\n                },\n                src : config.sources,\n                dest : config.dev\n            },\n            devFull : {\n                options: {\n                    process: fileIdentifier\n                },\n                src : config.sourcesFull,\n                dest : config.devFull\n            },\n            dist : {\n                options: {\n                    process: fileIdentifier\n                },\n                src : config.sources,\n                dest : config.dist\n            },\n            distFull : {\n                options: {\n                    process: fileIdentifier\n                },\n                src : [].concat(config.sourcesFull).concat(config.sourcesIgnore),\n                dest : config.distFull\n            }\n        },\n        copy: {\n            modules: {\n                options: {\n                    processContent: wrapDefine\n                },\n                expand: true,\n                cwd: 'src/',\n                src: config.moduleSources.join(' ').replace(/src\\//g, '').split(' '),\n                dest: 'dist/'\n            },\n            modulesDev: {\n                options: {\n                    processContent: wrapDefine\n                },\n                expand: true,\n                cwd: 'src/',\n                src: config.moduleSources.join(' ').replace(/src\\//g, '').split(' '),\n                dest: '_working/physicsjs/'\n            },\n            examples: {\n                src: config.distFull,\n                dest: 'examples/' + config.pkg.name.toLowerCase() + '-full.js'\n            }\n        },\n        watch: {\n          files: 'src/**/*.js',\n          tasks: [ 'watchdev' ]\n        },\n        uglify : {\n            options : { mangle : true, banner: config.banner },\n            dist : {\n                files : config.uglifyFiles\n            }\n        },\n        // for testing builds\n        requirejs: {\n            compile: {\n                options: config.distRequireJS\n            }\n        },\n        jasmine : {\n            dev : {\n                src : config.devFull,\n                options : {\n                    helpers: 'lib/raf.js',\n                    specs : 'test/spec/*.spec.js',\n                    template : 'test/grunt.tmpl'\n                }\n            },\n            devRequireJS : {\n                options : {\n                    helpers: ['lib/raf.js', 'test/requirejs.spec.helper.js'],\n                    specs : 'test/requirejs.spec.js',\n                    template : require('grunt-template-jasmine-requirejs'),\n                    templateOptions: {\n                        requireConfig: {\n                            baseUrl: '_working/',\n                            packages: [\n                                {\n                                    name: 'physicsjs',\n                                    location: 'physicsjs',\n                                    main: 'physicsjs'\n                                }\n                            ],\n                            paths: {\n                                'pixi': '../lib/pixi'\n                            }\n                        }\n                    }\n                }\n            },\n            dist : {\n                src : config.distFull,\n                options : {\n                    helpers: 'lib/raf.js',\n                    specs : 'test/spec/*.spec.js',\n                    template : 'test/grunt.tmpl'\n                }\n            },\n            distRequireJS : {\n                options : {\n                    helpers: ['lib/raf.js', 'test/requirejs.spec.helper.js'],\n                    specs : 'test/requirejs.spec.js',\n                    template : require('grunt-template-jasmine-requirejs'),\n                    templateOptions: {\n                        requireConfig: config.distRequireJS\n                    }\n                }\n            },\n            distRequireJSBuild : {\n                options : {\n                    helpers: 'lib/raf.js',\n                    specs : 'test/requirejs.build.spec.js',\n                    template : require('grunt-template-jasmine-requirejs'),\n                    templateOptions: {\n                        requireConfig: {\n                            baseUrl: './',\n                            paths: {\n                                'bundle': config.distRequireJS.out.replace(/\\.js$/, ''),\n                                'pixi': 'lib/pixi'\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        jasmine_node: {\n            specNameMatcher: \"spec\", // load only specs containing specNameMatcher\n            projectRoot: \"test/node\",\n            requirejs: false,\n            forceExit: true,\n            jUnit: {\n                report: false,\n                savePath : false,\n                useDotNotation: true,\n                consolidate: true\n            }\n        },\n        jshint : {\n            options : {\n                jshintrc : 'jshint.json'\n            },\n            source : 'src/*/*.js'\n        },\n        docs: {\n            api: {\n                dest: 'docs/',\n                src: ['src/**/*.js'],\n                options: {\n                    template: 'docs/layout.jade',\n                    debugFile: 'docs/debug.json',\n                    fileRoot: 'https://github.com/wellcaffeinated/PhysicsJS/tree/master/'\n                }\n            }\n        }\n    });\n\n    grunt.loadNpmTasks('grunt-contrib-concat');\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n    grunt.loadNpmTasks('grunt-contrib-watch');\n    grunt.loadNpmTasks('grunt-contrib-jasmine');\n    grunt.loadNpmTasks('grunt-jasmine-node');\n    grunt.loadNpmTasks('grunt-contrib-clean');\n    grunt.loadNpmTasks('grunt-contrib-copy');\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n    grunt.loadNpmTasks('grunt-contrib-requirejs');\n\n    require('./lib/gendoc.js')(grunt);\n\n    // build a js file with an array containing the modules path name\n    grunt.registerTask('jasmine-module-list', function(){\n\n        var cfg = {\n            modules: grunt.file.expand({ cwd: './' }, config.moduleSources ).join(' ').replace(/src\\//g, 'physicsjs/').replace(/\\.js/g, '').split(' ')\n        };\n\n        grunt.file.write('test/requirejs.spec.helper.js', 'var cfg = ' + JSON.stringify( cfg ) + ';' );\n        grunt.file.write(config.rjsHelper, 'require(' + JSON.stringify( cfg.modules ) + ');' );\n\n    });\n\n\n    // Run `grunt watch` to create a dev build whenever a file is changed\n\n    // create a build for development\n    grunt.registerTask('dev', ['clean:dev', 'concat:dev', 'concat:devFull', 'copy:modulesDev']);\n    grunt.registerTask('watchdev', ['clean:dev', 'concat:dev', 'concat:devFull', 'copy:modulesDev']);\n    grunt.registerTask('testDev', ['jshint', 'jasmine-module-list', 'jasmine:dev', 'jasmine:devRequireJS']);\n\n    // tests on dist code\n    grunt.registerTask('testDist', ['jasmine-module-list', 'jasmine:dist', 'jasmine:distRequireJS', 'requirejs', 'jasmine:distRequireJSBuild', 'clean:test', 'jasmine_node']);\n\n    // create a distribution build\n    grunt.registerTask('dist', ['clean:dist', 'concat:dist', 'concat:distFull', 'copy:modules', 'copy:examples', 'jshint', 'uglify', 'testDist']);\n\n    // Default task.\n    grunt.registerTask('default', ['dev', 'testDev']);\n\n};\n"
        },
        {
          "name": "jshint.json",
          "type": "blob",
          "size": 0.369140625,
          "content": "{\n    \"curly\" : true,\n    \"laxcomma\" : true,\n    \"eqeqeq\" : true,\n    \"immed\" : true,\n    \"latedef\" : true,\n    \"newcap\" : false,\n    \"noarg\" : true,\n    \"sub\" : true,\n    \"undef\" : true,\n    \"boss\" : true,\n    \"eqnull\" : true,\n    \"browser\" : true,\n    \"globals\" : {\n        \"Decorator\": true,\n        \"module\" : true,\n        \"exports\" : true,\n        \"Physics\" : true\n    }\n}"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.283203125,
          "content": "{\n  \"name\": \"PhysicsJS\",\n  \"version\": \"0.7.0\",\n  \"author\": \"Jasper Palfree <jasper@wellcaffeinated.net>\",\n  \"description\": \"A modular, extendable, and easy-to-use physics engine for javascript\",\n  \"contributors\": [\n    {\n      \"name\": \"Jasper Palfree\",\n      \"email\": \"jasper@wellcaffeinated.net\"\n    },\n    {\n      \"name\": \"Tom W Hall\",\n      \"url\": \"http://booleanoperations.co.nz\"\n    },\n    {\n      \"name\": \"Nathan Gallagher\",\n      \"url\": \"http://twitter.com/bluerex_ca\"\n    }\n  ],\n  \"main\": \"./dist/physicsjs-full.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:wellcaffeinated/PhysicsJS.git\"\n  },\n  \"keywords\": [\n    \"physics\",\n    \"engine\"\n  ],\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"grunt\": \"0.4.x\",\n    \"grunt-contrib-concat\": \"0.x.x\",\n    \"grunt-contrib-uglify\": \"0.x.x\",\n    \"grunt-contrib-jasmine\": \"0.5.x\",\n    \"grunt-jasmine-node\": \"~0.1.0\",\n    \"grunt-contrib-clean\": \"0.x.x\",\n    \"grunt-contrib-copy\": \"0.x.x\",\n    \"grunt-contrib-jshint\": \"0.x.x\",\n    \"grunt-contrib-watch\": \"~0.3.1\",\n    \"grunt-template-jasmine-requirejs\": \"~0.1.1\",\n    \"grunt-contrib-requirejs\": \"~0.4.1\",\n    \"panino\": \"~2.2.6\",\n    \"jade\": \"~1.3.0\",\n    \"marked\": \"~0.3.2\",\n    \"synchronize\": \"~0.7.0\",\n    \"pygmentize-bundled\": \"~2.1.0\"\n  },\n  \"bundledDependencies\": [],\n  \"license\": \"MIT\"\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}