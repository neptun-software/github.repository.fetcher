{
  "metadata": {
    "timestamp": 1736562057771,
    "page": 821,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cyu/rack-cors",
      "stars": 3266,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1640625,
          "content": "*.gem\n*.rbc\n.bundle\n.config\n.idea\n.yardoc\n/Gemfile.lock\nInstalledFiles\n_yardoc\ncoverage\ndoc/\nlib/bundler/man\npkg\nrdoc\nspec/reports\ntest/tmp\ntest/version_tmp\ntmp\n\n*.swp\n"
        },
        {
          "name": ".rubocop.yml",
          "type": "blob",
          "size": 0.5458984375,
          "content": "---\nAllCops:\n  Exclude:\n    - \"examples/**/*\"\n    - \"vendor/**/*\"\n\n# Disables\nLayout/LineLength:\n  Enabled: false\nStyle/Documentation:\n  Enabled: false\nMetrics/ClassLength:\n  Enabled: false\nMetrics/MethodLength:\n  Enabled: false\nMetrics/BlockLength:\n  Enabled: false\nStyle/HashEachMethods:\n  Enabled: false\nStyle/HashTransformKeys:\n  Enabled: false\nStyle/HashTransformValues:\n  Enabled: false\nStyle/DoubleNegation:\n  Enabled: false\nMetrics/CyclomaticComplexity:\n  Enabled: false\nMetrics/PerceivedComplexity:\n  Enabled: false\nMetrics/AbcSize:\n  Enabled: false\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.0576171875,
          "content": "# Change Log\nAll notable changes to this project will be documented in this file.\n\n## 2.0.2 - 2024-03-04\n### Changed\n- Fix file permission issues with 2.0.1 release\n  - Security: Fixes CVE-2024-27456, GHSA-785g-282q-pwvx\n\n## 2.0.1 - 2023-02-17\n### Changed\n- Use Rack::Utils::HeaderHash when Rack 2.x is detected\n\n## 2.0.0 - 2023-02-14\n### Changed\n- Refactored codebase\n- Support declaring custom protocols in origin\n- Lowercased header names as defined by Rack spec\n- Fix issue with duplicate headers because of header name case\n\n## 1.1.1 - 2019-12-29\n### Changed\n- Allow /<resource>/* to match /<resource>/ and /<resource> paths\n\n## 1.1.0 - 2019-11-19\n### Changed\n- Use Rack::Utils.escape_path instead of Rack::Utils.escape\n- Require Rack 2.0 for escape_path method\n- Don't try to clean path if invalid.\n- Return 400 (Bad Request) on preflights with invalid path\n\n## 1.0.6 - 2019-11-14\n### Changed\n- Use Rack::Utils.escape to make compat with Rack 1.6.0\n\n## 1.0.5 - 2019-11-14\n### Changed\n- Update Gem spec to require rack >= 1.6.0\n\n## 1.0.4 - 2019-11-13\n### Security\n- Escape and resolve path before evaluating resource rules (thanks to Colby Morgan)\n\n## 1.0.3 - 2019-03-24\n### Changed\n- Don't send 'Content-Type' header with pre-flight requests\n- Allow ruby array for  vary header config\n\n## 1.0.2 - 2017-10-22\n### Fixed\n- Automatically allow simple headers when headers are set\n\n## 1.0.1 - 2017-07-18\n### Fixed\n- Allow lambda origin configuration\n\n## 1.0.0 - 2017-07-15\n### Security\n- Don't implicitly accept 'null' origins when 'file://' is specified\n(https://github.com/cyu/rack-cors/pull/134)\n- Ignore '' origins (https://github.com/cyu/rack-cors/issues/139)\n- Default credentials option on resources to false\n(https://github.com/cyu/rack-cors/issues/95)\n- Don't allow credentials option to be true if '*' is specified is origin\n(https://github.com/cyu/rack-cors/pull/142)\n- Don't reflect Origin header when '*' is specified as origin\n(https://github.com/cyu/rack-cors/pull/142)\n\n### Fixed\n- Don't respond immediately on non-matching preflight requests instead of\nsending them through the app (https://github.com/cyu/rack-cors/pull/106)\n\n## 0.4.1 - 2017-02-01\n### Fixed\n- Return miss result in X-Rack-CORS instead of incorrectly returning\npreflight-hit\n\n## 0.4.0 - 2015-04-15\n### Changed\n- Don't set HTTP_ORIGIN with HTTP_X_ORIGIN if nil\n\n### Added\n- Calculate vary headers for non-CORS resources\n- Support custom vary headers for resource\n- Support :if option for resource\n- Support :any as a possible value for :methods option\n\n### Fixed\n- Don't symbolize incoming HTTP request methods\n\n## 0.3.1 - 2014-12-27\n### Changed\n- Changed the env key to rack.cors to avoid Rack::Lint warnings\n\n## 0.3.0 - 2014-10-19\n### Added\n- Added support for defining a logger with a Proc\n- Return a X-Rack-CORS header when in debug mode detailing how Rack::Cors\nprocessed a request\n- Added support for non HTTP/HTTPS origins when just a domain is specified\n\n### Changed\n- Changed the log level of the fallback logger to DEBUG\n- Print warning when attempting to use :any as an allowed method\n- Treat incoming `Origin: null` headers as file://\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.1513671875,
          "content": "# frozen_string_literal: true\n\nsource 'https://rubygems.org'\n\n# Specify your gem's dependencies in rack-cors.gemspec\ngemspec\n\ngem 'pry-byebug', '~> 3.6.0'\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.041015625,
          "content": "Copyright (c) 2013 Calvin Yu\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.3369140625,
          "content": "# Rack CORS Middleware [![Build Status](https://github.com/cyu/rack-cors/actions/workflows/ci.yaml/badge.svg)](https://github.com/cyu/rack-cors/actions)\n\n`Rack::Cors` provides support for Cross-Origin Resource Sharing (CORS) for Rack compatible web applications.\n\nThe [CORS spec](http://www.w3.org/TR/cors/) allows web applications to make cross domain AJAX calls without using workarounds such as JSONP. See [further explanations on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)\n\n## Installation\n\nInstall the gem:\n\n`gem install rack-cors`\n\nOr in your Gemfile:\n\n```ruby\ngem 'rack-cors'\n```\n\n\n## Configuration\n\n### Rails Configuration\nFor Rails, you'll need to add this middleware on application startup. A practical way to do this is with an initializer file. For example, the following will allow GET, POST, PATCH, or PUT requests from any origin on any resource:\n\n```ruby\n# config/initializers/cors.rb\n\nRails.application.config.middleware.insert_before 0, Rack::Cors do\n  allow do\n    origins '*'\n    resource '*', headers: :any, methods: [:get, :post, :patch, :put]\n  end\nend\n```\n\nNOTE: If you create application with `--api` option, configuration is automatically generated in `config/initializers/cors.rb`.\n\nWe use `insert_before` to make sure `Rack::Cors` runs at the beginning of the stack to make sure it isn't interfered with by other middleware (see `Rack::Cache` note in **Common Gotchas** section). Basic setup examples for Rails 5 & Rails 6 can be found in the examples/ directory.\n\nSee The [Rails Guide to Rack](http://guides.rubyonrails.org/rails_on_rack.html) for more details on rack middlewares or watch the [railscast](http://railscasts.com/episodes/151-rack-middleware).\n\nRead more about it here in the [Rails Guides](https://guides.rubyonrails.org/configuring.html#configuring-middleware)\n\n### Rack Configuration\n\nNOTE: If you're running Rails, adding `config/initializers/cors.rb` should be enough.  There is no need to update `config.ru` as well.\n\nIn `config.ru`, configure `Rack::Cors` by passing a block to the `use` command:\n\n```ruby\nuse Rack::Cors do\n  allow do\n    origins 'localhost:3000', '127.0.0.1:3000',\n            /\\Ahttp:\\/\\/192\\.168\\.0\\.\\d{1,3}(:\\d+)?\\z/\n            # regular expressions can be used here\n\n    resource '/file/list_all/', :headers => 'x-domain-token'\n    resource '/file/at/*',\n        methods: [:get, :post, :delete, :put, :patch, :options, :head],\n        headers: 'x-domain-token',\n        expose: ['Some-Custom-Response-Header'],\n        max_age: 600\n        # headers to expose\n  end\n\n  allow do\n    origins '*'\n    resource '/public/*', headers: :any, methods: :get\n\n    # Only allow a request for a specific host\n    resource '/api/v1/*',\n        headers: :any,\n        methods: :get,\n        if: proc { |env| env['HTTP_HOST'] == 'api.example.com' }\n  end\nend\n```\n\n### Configuration Reference\n\n#### Middleware Options\n* **debug** (boolean):  Enables debug logging and `X-Rack-CORS` HTTP headers for debugging.\n* **logger** (Object or Proc): Specify the logger to log to.  If a proc is provided, it will be called when a logger is needed.  This is helpful in cases where the logger is initialized after `Rack::Cors` is initially configured, like `Rails.logger`.\n\n#### Origin\nOrigins can be specified as a string, a regular expression, or as '\\*' to allow all origins.\n\n**\\*SECURITY NOTE:** Be careful when using regular expressions to not accidentally be too inclusive.  For example, the expression `/https:\\/\\/example\\.com/` will match the domain *example.com.randomdomainname.co.uk*.  It is recommended that any regular expression be enclosed with start & end string anchors, like `\\Ahttps:\\/\\/example\\.com\\z`.\n\nAdditionally, origins can be specified dynamically via a block of the following form:\n```ruby\n  origins { |source, env| true || false }\n```\n\nA Resource path can be specified as exact string match (`/path/to/file.txt`) or with a '\\*' wildcard (`/all/files/in/*`).  A resource can take the following options:\n\n* **methods** (string or array or `:any`): The HTTP methods allowed for the resource.\n* **headers** (string or array or `:any`): The HTTP headers that will be allowed in the CORS resource request.  Use `:any` to allow for any headers in the actual request.\n* **expose** (string or array): The HTTP headers in the resource response can be exposed to the client.\n* **credentials** (boolean, default: `false`): Sets the `Access-Control-Allow-Credentials` response header. **Note:** If a wildcard (`*`) origin is specified, this option cannot be set to `true`.  Read this [security article](http://web-in-security.blogspot.de/2017/07/cors-misconfigurations-on-large-scale.html) for more information.\n* **max_age** (number): Sets the `Access-Control-Max-Age` response header.\n* **if** (Proc): If the result of the proc is true, will process the request as a valid CORS request.\n* **vary** (string or array): A list of HTTP headers to add to the 'Vary' header.\n\n\n## Common Gotchas\n\n### Origin Matching\n\n* When specifying an origin, make sure that it does not have a trailing slash.\n\n* When specifying an HTTP origin that uses the scheme's default port (e.g. `http://example.test:80`), some clients may not strip the port which could result in unexpected blocked requests (additional context [here](https://github.com/request/request/pull/2904)).\n\n### Testing Postman and/or cURL\n\n* Make sure you're passing in an `Origin:` header.  That header is required to trigger a CORS response.  Here's [a good SO post](https://stackoverflow.com/questions/12173990/how-can-you-debug-a-cors-request-with-curl) about using cURL for testing CORS.\n* Make sure your origin does not have a trailing slash.\n\n### Positioning in the Middleware Stack\n\nPositioning of `Rack::Cors` in the middleware stack is very important. In the Rails example above we put it above all other middleware which, in our experience, provides the most consistent results.\n\nHere are some scenarios where incorrect positioning have created issues:\n\n* **Serving static files.**  Insert before `ActionDispatch::Static` so that static files are served with the proper CORS headers.  **NOTE:** this might not work in production as static files are usually served from the web server (Nginx, Apache) and not the Rails container.\n\n* **Caching in the middleware.**  Insert before `Rack::Cache` so that the proper CORS headers are written and not cached ones.\n\n* **Authentication via Warden**  Warden will return immediately if a resource that requires authentication is accessed without authentication.  If `Warden::Manager`is in the stack before `Rack::Cors`, it will return without the correct CORS headers being applied, resulting in a failed CORS request.\n\nYou can run the following command to see what the middleware stack looks like:\n\n```bash\nbundle exec rails middleware\n```\n\nNote that the middleware stack is different in production.  For example, the `ActionDispatch::Static` middleware will not be part of the stack if `config.serve_static_assets = false`.  You can run this to see what your middleware stack looks like in production:\n\n```bash\nRAILS_ENV=production bundle exec rails middleware\n```\n\n### Serving static files\n\nIf you trying to serve CORS headers on static assets (like CSS, JS, Font files), keep in mind that static files are usually served directly from web servers and never runs through the Rails container (including the middleware stack where `Rack::Cors` resides).\n\nIn Heroku, you can serve static assets through the Rails container by setting `config.serve_static_assets = true` in `production.rb`.\n\n### Custom Protocols (chrome-extension://, ionic://, etc.)\n\nPrior to 2.0.0, `http://`, `https://`, and `file://` are the only protocols supported in the `origins` list. If you wish to specify an origin that\nhas a custom protocol (`chrome-extension://`, `ionic://`, etc.) simply exclude the protocol. [See issue.](https://github.com/cyu/rack-cors/issues/100)\n\nFor example, instead of specifying `chrome-extension://aomjjhallfgjeglblehebfpbcfeobpga` specify `aomjjhallfgjeglblehebfpbcfeobpga` in `origins`.\n\nAs of 2.0.0 (currently in RC1), you can specify origins with a custom protocol.\n\n### Rails 6 Host Matching\n\nRails 6 will block requests from unauthorized hosts, and this issue can be confused as a CORS related error. So in development, if you're making requests using something other than localhost or 127.0.0.1, make sure the server host has been authorized. [More info here](https://guides.rubyonrails.org/configuring.html#actiondispatch-hostauthorization)\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 0.482421875,
          "content": "# frozen_string_literal: true\n\nrequire 'bundler/gem_tasks'\n\nrequire 'rake/testtask'\nRake::TestTask.new(:test) do |test|\n  test.libs << 'lib' << 'test'\n  test.pattern = 'test/**/*_test.rb'\n  test.verbose = true\nend\n\ntask default: :test\n\nrequire 'rdoc/task'\nRake::RDocTask.new do |rdoc|\n  version = File.exist?('VERSION') ? File.read('VERSION') : ''\n\n  rdoc.rdoc_dir = 'rdoc'\n  rdoc.title = \"rack-cors #{version}\"\n  rdoc.rdoc_files.include('README*')\n  rdoc.rdoc_files.include('lib/**/*.rb')\nend\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "rack-cors.gemspec",
          "type": "blob",
          "size": 1.44140625,
          "content": "# frozen_string_literal: true\n\nlib = File.expand_path('lib', __dir__)\n$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)\nrequire 'rack/cors/version'\n\nGem::Specification.new do |spec|\n  spec.name          = 'rack-cors'\n  spec.version       = Rack::Cors::VERSION\n  spec.authors       = ['Calvin Yu']\n  spec.email         = ['me@sourcebender.com']\n  spec.description   = 'Middleware that will make Rack-based apps CORS compatible. Fork the project here: https://github.com/cyu/rack-cors'\n  spec.summary       = 'Middleware for enabling Cross-Origin Resource Sharing in Rack apps'\n  spec.homepage      = 'https://github.com/cyu/rack-cors'\n  spec.license       = 'MIT'\n\n  spec.files         = Dir['CHANGELOG.md', 'README.md', 'LICENSE.txt', 'lib/**/*']\n  spec.executables   = spec.files.grep(%r{^bin/}) { |f| File.basename(f) }\n  spec.test_files    = spec.files.grep(%r{^(test|spec|features)/})\n  spec.require_paths = ['lib']\n\n  spec.metadata = {\n    'changelog_uri' => 'https://github.com/cyu/rack-cors/blob/master/CHANGELOG.md'\n  }\n\n  spec.add_dependency 'rack', '>= 2.0.0'\n  spec.add_development_dependency 'bundler', '>= 1.16.0', '< 3'\n  spec.add_development_dependency 'minitest', '~> 5.11.0'\n  spec.add_development_dependency 'mocha', '~> 1.6.0'\n  spec.add_development_dependency 'pry', '~> 0.12'\n  spec.add_development_dependency 'rack-test', '>= 1.1.0'\n  spec.add_development_dependency 'rake', '~> 12.3.0'\n  spec.add_development_dependency 'rubocop', '~> 0.80.1'\nend\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}