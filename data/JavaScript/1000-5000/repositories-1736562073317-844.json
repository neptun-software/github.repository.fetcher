{
  "metadata": {
    "timestamp": 1736562073317,
    "page": 844,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kenkeiter/skeuocard",
      "stars": 3233,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03515625,
          "content": ".DS_Store\n.sass-cache\nnode_modules/*"
        },
        {
          "name": ".semver",
          "type": "blob",
          "size": 0.0458984375,
          "content": "---\n:major: 1\n:minor: 0\n:patch: 3\n:special: ''\n"
        },
        {
          "name": "Gruntfile.coffee",
          "type": "blob",
          "size": 1.900390625,
          "content": "# Thanks to Jackson Gariety (https://github.com/jacksongariety/) for\n# contributing the initial version of this Gruntfile.\n\nmodule.exports = (grunt) ->\n  path = require('path')\n  # Configure plugins\n  grunt.initConfig\n\n    express:\n      all:\n        options:\n          port: 8000\n          hostname: \"0.0.0.0\"\n          bases: [path.resolve(__dirname, '.')]\n\n    open:\n      all:\n        path: 'http://localhost:<%= express.all.options.port%>'\n\n    coffee:\n      all:\n        options:\n          join: true\n        files:\n          \"./javascripts/skeuocard.js\": [\n            \"./javascripts/src/Skeuocard.coffee\",\n            \"./javascripts/src/FlipTabView.coffee\",\n            \"./javascripts/src/SegmentedCardNumberInputView.coffee\",\n            \"./javascripts/src/ExpirationInputView.coffee\",\n            \"./javascripts/src/TextInputView.coffee\",\n            \"./javascripts/src/CardProduct.coffee\"\n          ]\n\n    sass:\n      all:\n        options:\n          style: 'compressed'\n        files:\n          \"./styles/skeuocard.reset.css\": \"./styles/src/skeuocard.reset.scss\"\n          \"./styles/skeuocard.css\": \"./styles/src/skeuocard.scss\"\n          \"./styles/demo.css\": \"./styles/src/demo.scss\"\n\n    uglify:\n      all:\n        options:\n          mangle: false # don't change function names\n        files:\n          \"./javascripts/skeuocard.min.js\": \"./javascripts/skeuocard.js\"\n\n    watch:\n      all:\n        files: [\n          \"./javascripts/src/*.coffee\"\n          \"./styles/src/*.scss\"\n        ]\n        tasks: [\"coffee\", \"sass\", \"uglify\"]\n        options:\n          livereload: true\n\n\n  # Load plugins\n  grunt.loadNpmTasks \"grunt-contrib-watch\"\n  grunt.loadNpmTasks \"grunt-contrib-coffee\"\n  grunt.loadNpmTasks \"grunt-contrib-sass\"\n  grunt.loadNpmTasks \"grunt-contrib-uglify\"\n  grunt.loadNpmTasks \"grunt-open\"\n  grunt.loadNpmTasks \"grunt-express\"\n\n  # Default task\n  grunt.registerTask \"default\", [\n    \"express\",\n    \"open\",\n    \"watch\"\n  ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0703125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Ken Keiter <ken@kenkeiter.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.255859375,
          "content": "# Looking for a new maintainer!\n\nUnfortunately, I haven't been able to find the time that I would like to dedicate to this project. Although it is still widely stable on most browsers, the internet is an inherently unstable place, and the usability of Skeuocard will deteriorate over time if not maintained and improved. To further the use of Skeuocard, **I'm looking for a new maintainer for the Skeuocard project.**\n\nTo those of you that have submitted issues and pull requests: thank you so much for your time, attention to detail, and effort. I'm sorry that I haven't been able to return that. This was always meant to be at worst an experiment, and at best, a gift. I hope you enjoy Skeuocard, and I hope that we find a maintainer who can give this the attention your interest has demonstrated that it deserves.\n\nIf you believe yourself or someone you know to be qualified, please reach out to me via email: [ken+skeuocard@kenkeiter.com](mailto:ken+skeuocard@kenkeiter.com).\n\n# Skeuocard (v1.0.3)\n\n_Skeuocard_ is a re-think of the way we handle credit card input on the web. It progressively enhances credit card input forms so that the card inputs become skeuomorphic, facilitating accurate and fast card entry, and removing barriers to purchase.\n\nYou can try it out at [http://kenkeiter.com/skeuocard](http://kenkeiter.com/skeuocard).\n\nFor more on the theory behind Skeuocard, check out the blog post that started it all: [_\"Redesigning Credit Card Inputs\"_](http://kenkeiter.com/2013/07/21/redesigning-credit-card-inputs/) by [me (Ken Keiter)](http://kenkeiter.com/).\n\n![Skeuocard at its finest.](https://raw.github.com/kenkeiter/skeuocard/master/screenshot.png)\n\n## Usage\n\nSkeuocard takes a standard credit card input form and partially transforms its DOM, removing non-essential elements, while leaving the underlying inputs alone. In order to use Skeuocard in your checkout page, you'll need to do one of two things.\n\n### Bower\n\nIf you have [Bower](http://bower.io) then you can simply:\n\n```bash\n$ bower install skeuocard\n```\n\n### Manually\n\nOr you can link the necessary style sheets and scripts, and make sure any asset dependencies are at the right paths.\n\n```html\n<head>\n  <!-- ... your CSS includes ... -->\n  <link rel=\"stylesheet\" href=\"styles/skeuocard.reset.css\" />\n  <link rel=\"stylesheet\" href=\"styles/skeuocard.css\" />\n  <link rel=\"stylesheet\" href=\"styles/demo.css\">\n  <script src=\"javascripts/vendor/cssua.min.js\"></script>\n  <!-- ... -->\n</head>\n```\n\nMake sure your credit card inputs are within their own containing element (most likely a `<div>`). In the example below, the `name` attribute of the inputs is significant because Skeuocard needs to determine which inputs should remain intact and be used to store the underlying card values.\n\nSide note: If you'd like to use different input `name`s or selectors, you can specify those at instantiation. See the \"Changing Underlying Value Selectors\" section, below.\n\n```html\n<div class=\"credit-card-input no-js\" id=\"skeuocard\">\n  <p class=\"no-support-warning\">\n    Either you have Javascript disabled, or you're using an unsupported browser, amigo! That's why you're seeing this old-school credit card input form instead of a fancy new Skeuocard. On the other hand, at least you know it gracefully degrades...\n  </p>\n  <label for=\"cc_type\">Card Type</label>\n  <select name=\"cc_type\">\n    <option value=\"\">...</option>\n    <option value=\"visa\">Visa</option>\n    <option value=\"discover\">Discover</option>\n    <option value=\"mastercard\">MasterCard</option>\n    <option value=\"maestro\">Maestro</option>\n    <option value=\"jcb\">JCB</option>\n    <option value=\"unionpay\">China UnionPay</option>\n    <option value=\"amex\">American Express</option>\n    <option value=\"dinersclubintl\">Diners Club</option>\n  </select>\n  <label for=\"cc_number\">Card Number</label>\n  <input type=\"text\" name=\"cc_number\" id=\"cc_number\" placeholder=\"XXXX XXXX XXXX XXXX\" maxlength=\"19\" size=\"19\">\n  <label for=\"cc_exp_month\">Expiration Month</label>\n  <input type=\"text\" name=\"cc_exp_month\" id=\"cc_exp_month\" placeholder=\"00\">\n  <label for=\"cc_exp_year\">Expiration Year</label>\n  <input type=\"text\" name=\"cc_exp_year\" id=\"cc_exp_year\" placeholder=\"00\">\n  <label for=\"cc_name\">Cardholder's Name</label>\n  <input type=\"text\" name=\"cc_name\" id=\"cc_name\" placeholder=\"John Doe\">\n  <label for=\"cc_cvc\">Card Validation Code</label>\n  <input type=\"text\" name=\"cc_cvc\" id=\"cc_cvc\" placeholder=\"123\" maxlength=\"3\" size=\"3\">\n</div>\n```\n\nWhen the Skeuocard is instantiated for the containing element above, all children of the containing element will be removed except for the underlying form fields.\n\nCausing a Skeuocard to appear instead is as simple as:\n\n```javascript\n$(document).ready(function(){\n  card = new Skeuocard($(\"#skeuocard\"));\n});\n```\n\nThat's it! You've got a skeuomorphic credit card input, instead of your normal, confusing form.\n\n### Beyond the Basics\n\n#### Enabling Debugging Output\n\nSkeuocard occasionally provides useful debugging output. By instantiating Skeuocard with the `debug` option set to true, those messages will be sent to `console.log` and prefixed with `[skeuocard]`.\n\n```javascript\nnew Skeuocard($(\"#skeuocard\"), {\n  debug: true\n});\n```\n\n#### Turn off Focusing the Input by Default\n\nBy default, when Skeuocard is initialized, the input field will be focused.  If you don't want this to happen (for example, if the skeuocard element is positioned below the fold and you want to prevent the browser from scrolling there), then pass `dontFocus: true` as an initialization option.\n\n```javascript\nnew Skeuocard($(\"#skeuocard\"), {\n  dontFocus: true\n});\n\n```\n\n#### Providing Initial Values\n\nSometimes you'll need to pre-fill credit card information when you load the page. To do so, you can simply provide a `value` attribute for your form fields (or `<option selected ...>`, in the case of a `<select>`), and Skeuocard will pick up your initial values when instantiated.\n\nAlternately, you can instantiate your Skeuocard instance with an `initialValues` object, which will override any existing values provided in the form, like so:\n\n```javascript\nnew Skeuocard($(\"#skeuocard\"), {\n  initialValues: {\n    number: \"4111111111111111\",\n    expMonth: \"1\",\n    expYear: \"2016\",\n    name: \"James Doe\",\n    cvc: \"123\"\n  }\n});\n```\n\n#### Changing Values on the Fly\n\nYou can also change Skeuocard values manually by changing the underlying form element's value, and triggering a `change` event.\n\n```javascript\n$('[name=\"cc_number\"]').val('4111111111111111').trigger('change')\n```\n\n#### Changing Placeholder Strings\n\nYou can change the character which Skeuocard uses as a placeholder for segmented card inputs, as well as the placeholder on the generic card view (visible when a card type has not been determined) by providing either of the following options at instantiation: `cardNumberPlaceholderChar` and `genericPlaceholder`.\n\n`cardNumberPlaceholderChar` is used for filling only segmented inputs (i.e. \"[XXXX] [XXXX] [XXXX] [XXXX]\") and is by default set to `X`. The `genericPlaceholder` value is used when the card type has not yet been determined, and is by default set to `XXXX XXXX XXXX XXXX`.\n\n```javascript\nnew Skeuocard($(\"#skeuocard\"), {\n  cardNumberPlaceholderChar: '*',\n  genericPlaceholder: '**** **** **** ****'\n});\n```\n\n#### Changing Underlying Value Selectors\n\nWhen a Skeuocard is instantiated, it attaches itself to a container element and removes any unneeded children, before adding its own; *however,* Skeuocard stores its values in pre-existing input fields, which aren't selected for removal.\n\nBy default, Skeuocard sets the following default selectors to match the  underlying form fields within the container element, and use them to store values:\n\n* `typeInputSelector: [name=\"cc_type\"]`\n* `numberInputSelector: [name=\"cc_number\"]`\n* `expMonthInputSelector: [name=\"cc_exp_month\"]`\n* `expYearInputSelector: [name=\"cc_exp_year\"]`\n* `nameInputSelector: [name=\"cc_name\"]`\n* `cvcInputSelector: [name=\"cc_cvc\"]`\n\nProviding any of those options with different values at instantiation will cause Skeuocard to use your supplied selector, instead! For example, if our credit card number field had a `name` of `credit_card_number` (instead of the default `cc_number`), we could change it at instantiation like so:\n\n```javascript\nnew Skeuocard($(\"#skeuocard\"), {\n  numberInputSelector: '[name=\"credit_card_number\"]'\n});\n```\n\n#### Using the Server's Current Date\n\nIf you're smart, you probably won't want to use the client's local `Date` to validate against when checking expiration. You can specify a `Date` to check against at instantiation by setting `currentDate` on the Skeuocard class like so:\n\n```javascript\nSkeuocard.currentDate = new Date(year, month, day);\n```\n\nNote that month is an integer from 0 - 11.\n\nBy default, Skeuocard will automatically use the client's local Date.\n\n#### Specifying Accepted Card Products\n\nOnly accept Visa and AmEx? No worries. Skeuocard has you covered. You can specify accepted card types with an options argument, or in the underlying form itself.\n\nTo limit your accepted card products, simply add or remove `<option>`s from your type `<select>` where either the `value` attribute matches the shortname of the product (see the example below), or the `data-sc-type` attribute is set to the shortname of the product (if your `value` needs to be different for legacy purposes).\n\n```html\n<select name=\"cc_type\">\n  <option value=\"\">...</option>\n  <option value=\"visa\">Visa</option>\n  <option value=\"mastercard\">MasterCard</option>\n  <option value=\"maestro\">Maestro</option>\n  <option value=\"amex\">American Express</option>\n  <option value=\"diners\" data-sc-type=\"dinersclubintl\">Diners Club</option>\n</select>\n```\n\nYou can also optionally override this list by providing an array of accepted card product shortnames at instantiation, like so:\n\n```javascript\nnew Skeuocard($(\"#skeuocard\"), {\n  acceptedCardProducts: ['visa', 'amex']\n});\n```\n\n#### jQuery's noConflict Mode\n\nIf you are using jQuery's `noConflict` mode, you'll need to instantiate your Skeuocard instance slightly differently than above:\n\n```javascript\njQuery(document).ready(function(){\n  card = new Skeuocard(jQuery(\"#skeuocard\"));\n});\n```\n\n#### Progressive Enhancement\n\nProgressive enhancement was really important to me when creating this plugin. I wanted to make sure that a potential purchase opportunity would never be denied by a failure in Skeuocard, so I chose to take an approach which would leave the users with a functional, styled form in the event that Skeuocard fails.\n\nYou can style your un-enhanced form elements in whichever way you wish. When Skeuocard is instantiated, it will automatically add both the `skeuocard` and `js` classes to the container, which will match the selectors necessary to style the card input properly.\n\n#### Checking Validity\n\nAt some point or another, you're going to want your user to submit your purchase form -- so how do you determine if the credit card input they provided is valid? While there are several ways of doing this, there's one recommended way:\n\n```javascript\ncard.isValid() // => Boolean\n```\n\n#### Showing Errors at Instantiation\n\nSometimes you'll want to indicate a problem with the card to the user at instantiation -- for example, if the card number (after having been submitted to your payment processor) is determined to be incorrect. You can do this one of two ways: by adding the `invalid` class to your underlying `number` form field at instantiation, or by passing an initial `validationState` argument with your options.\n\nApplying the `invalid` class to the invalid field:\n\n```html\n...\n<input type=\"text\" name=\"cc_number\" id=\"cc_number\" placeholder=\"XXXX XXXX XXXX XXXX\" maxlength=\"19\" size=\"19\" class=\"invalid\">\n...\n```\n\nProviding a list of invalid fields at instantiation:\n\n```javascript\nnew Skeuocard($(\"#skeuocard\"), {\n  validationState: {\n    number: false,\n    exp: true,\n    name: true,\n    cvc: true\n  }\n});\n```\n\nNote that, if the CVC is on the back of the card for the matching card product, the card will automatically flip to show the invalid field.\n\n#### Registering Custom Card Layouts\n\nYou may wish to add a custom layout to support a card (BIN) specific to your locale, or for promotional reasons. You can do so easily.\n\nYou'll need to create a set of transparent PNG file containing any elements you wish to appear on the card faces. For an example, see any of the images in the `images/products/` folder. If you have Adobe Fireworks installed, the editable images are also included in `images/src/`.\n\nFor an example of how to style a card, see `styles/_cards.scss`.\n\nOnce you have created your images and the appropriate CSS styling, you will need to create a new CardProduct or variation of an existing card product. Lets say that we're matching a new type of gift card with a BIN (9123) that doesn't match any of the pre-defined credit card providers:\n\n```javascript\n// Create a new CardProduct instance, and register it with Skeuocard.\nSkeuocard.CardProduct.create({\n  pattern: /^9123/,                     // match all cards starting with 9123\n  companyName: \"Fancy Gift Card Inc.\",\n  companyShortname: \"fancycard\",        // this will be the card type\n  cardNumberGrouping: [4,4,4,4],        // how the number input should group\n  cardNumberLength: [14],               // array of valid card number lengths\n  expirationFormat: \"MM/YY\",            // format of the date field\n  cvcLength: 3,                         // the length of the CVC\n  validateLuhn: true,                   // validate using the Luhn algorithm?\n  layout: {\n    number: 'front',\n    exp: 'front',\n    name: 'front',\n    cvc: 'back'\n  }\n});\n```\n\nNow, lets say that we'd like to recognize and apply a layout for a Visa card with a specific BIN. First, we'd select the matching card product, and then add a variant, which will extend it:\n\n```javascript\n// find the existing Visa product\nvar visaProduct = Skeuocard.CardProduct.firstMatchingShortname('visa');\n// register a new variation of the Visa product\nvisaProduct.createVariation({\n  pattern: /^414720/,\n  issuingAuthority: \"Chase\",\n  issuerName: \"Chase Sapphire Card\",\n  issuerShortname: \"chase-sapphire\",\n  layout:\n    number: 'front',\n    exp: 'front',\n    name: 'front',\n    cvc: 'front'\n});\n```\n\n#### Design Customization\n\nYou might not like the way Skeuocard looks. That's easy to fix; CSS is used to style and position most elements in Skeuocard, with the exception of the card faces.\n\n## Browser Compatibility\n\nSkeuocard aims to gain better compatibility with older browsers, but for the time being, it looks good and works well in the following browsers:\n\n* Chrome (Mac, Win)\n* Safari (Mac)\n* Firefox > 18 (Mac, Win)\n* Mobile Safari (iOS)\n* Mobile Chrome (iOS/Android)\n* IE 10+ (Win)\n\nIt's recommended that you selectively disable Skeuocard based upon browser version, to retain maximum compatibility. If you have an odd or obscure browser, and wish to submit a patch, that's always appreciated!\n\n## Integration\n\n* The [skeuocard-rails](https://github.com/rougecardinal/skeuocard-rails) gem provides integration with the Rails asset pipeline.\n\n## Development\n\nContributing to Skeuocard is pretty simple. Simply fork the project, make your changes in a branch, and submit a pull request.\n\nI'll do my best to keep an eye out for pull requests and triage any submitted issues. Please note that you MUST make changes on the src (.coffee, .scss) files, compile the changes with Grunt, and include any compiled changes in any pull requests you submit.\n\n#### Getting Up and Running\n\nEnsure that you have the following tools installed before continuing:\n  \n  * [NodeJS/NPM](http://nodejs.org/download/)\n  * [SASS](http://sass-lang.com/)\n  * [CoffeeScript](http://coffeescript.org/)\n\nTo begin working on Skeuocard, fork the repository to your Github account, and clone it to your machine. \n\nOnce you have `cd`ed to your cloned `skeuocard` repository, you'll need to install the required Node packages:\n\n    $ npm install\n\nOnce that's completed, simply run:\n\n    $ grunt\n\nUpon starting `grunt`, the following things will happen:\n\n* a development server will be started on `0.0.0.0:8000`;\n* `index.html` will be opened automatically in your browser;\n* grunt will begin watching for changes to source files, and setup live-reload\n* source files will be recompiled automatically when changes are made.\n\nSimply make your changes to the necessary source files (typically under the `src` directory of each directory in the project), commit the changes (including the compiled changes), and submit a pull request! \n\n#### New Card Layouts & Graphics\n\nI've done my best to include layouts for all major card products (Visa, MasterCard, Amex, etc.) in the project. It is entirely possible that I've missed some products, and that the addition of a product is justified; however, I'm not accepting issuer-specific layouts (for things like Visa-branded products) at this time. There are literally thousands of them, and doing so could be seen as discriminatory. \n\nFor the time being, the only reason I'll make an exception is for cards like the Chase Sapphire, which is a Visa product, but has been granted an allowance by Visa to drastically alter the appearance and field layout of the card.\n\nAll of that said, I'm working on a standardized method of distributing issuer-specific layouts for users who wish to cater to popular cards in their locale, etc.\n\n## Licensing\n\nSkeuocard is licensed under the [MIT license](http://opensource.org/licenses/MIT). Share and enjoy :)\n\n* The [*OCR-A font*](http://ansuz.sooke.bc.ca/page/fonts#ocra) included with this project was converted and released for free commercial and non-commercial use by [Matthew Skala](http://ansuz.sooke.bc.ca/page/about).\n* [*CSS User Agent*](http://cssuseragent.org/) by [Stephen M. McKamey](http://stephen.mckamey.com/) is included under its [MIT license](https://bitbucket.org/mckamey/cssuseragent/raw/tip/LICENSE.txt).\n* [*jQuery*](http://jquery.com/) 2.0.3 is included under its [MIT license](https://github.com/jquery/jquery/blob/master/MIT-LICENSE.txt).\n\nThe trademarks and branding assets of the credit card products used in this project have not been used with express consent of their owners; this project is intended for use only by those whom have the proper authorization to do so. The trademarks and branding included in this project are property of their respective owners.\n\nAny complaints should be sent to me at: ken+skeuocard-complaints@kenkeiter.com and I will address them promptly.\n\n### Special Thanks\n\nI owe a special thanks to my guinea-pig users, and to the designers I met in coffee shops who took the time to critique this work.\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.9384765625,
          "content": "{\n  \"name\": \"skeuocard\",\n  \"keywords\": [\n    \"credit\",\n    \"card\",\n    \"skeuomorphism\"\n  ],\n  \"description\": \"Skeuocard progressively enhances credit card inputs to provide a skeuomorphic interface.\",\n  \"version\": \"1.1.0\",\n  \"license\": \"The MIT License (MIT)\",\n  \"readmeFilename\": \"README.md\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com:kenkeiter/skeuocard.git\"\n  },\n  \"main\": [\n    \"styles/skeuocard.reset.css\",\n    \"styles/skeuocard.css\",\n    \"javascripts/vendor/cssua.min.js\",\n    \"javascripts/vendor/demo.fix.js\",\n    \"javascripts/vendor/jquery-2.0.3.min.js\",\n    \"javascripts/skeuocard.js\",\n    \"javascripts/skeuocard.min.js\"\n  ],\n  \"ignore\": [\n    \"Gruntfile.coffee\",\n    \"package.json\",\n    \"index.html\",\n    \"screenshot.png\",\n    \"**/.*\",\n    \"node_modules\",\n    \"bower_components\",\n    \"test\",\n    \"tests\"\n  ],\n  \"homepage\": \"https://github.com/kenkeiter/skeuocard\",\n  \"authors\": [\n    \"Kenneth Keiter <ken@kenkeiter.com>\"\n  ]\n}\n"
        },
        {
          "name": "fonts",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 6.064453125,
          "content": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\n    <title>Skeuocard by kenkeiter</title>\n    <link rel=\"stylesheet\" href=\"styles/skeuocard.reset.css\" />\n    <link rel=\"stylesheet\" href=\"styles/skeuocard.css\" />\n    <link rel=\"stylesheet\" href=\"styles/demo.css\">\n    <script src=\"javascripts/vendor/cssua.min.js\"></script>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\">\n    <!--[if lt IE 9]>\n    <script src=\"//html5shiv.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n  </head>\n  <body>\n    <div class=\"wrapper\">\n      <header>\n        <h1>Skeuocard</h1>\n        <p>Skeuocard progressively enhances credit card inputs to provide a skeuomorphic interface.</p>\n        <p>Learn more about the concepts behind the design: \"<a href=\"http://kenkeiter.com/2013/07/21/redesigning-credit-card-inputs/\" target=\"_blank\">Redesigning The Credit Card Input</a>\" by <a href=\"http://kenkeiter.com/\">Ken Keiter</a>.</p>\n        <p class=\"view\">\n          <a href=\"https://github.com/kenkeiter/skeuocard\">View the Project on GitHub <small>kenkeiter/skeuocard</small></a>\n        </p>\n        <ul>\n          <li><a href=\"https://github.com/kenkeiter/skeuocard/zipball/master\">Download <strong>ZIP File</strong></a></li>\n          <li><a href=\"https://github.com/kenkeiter/skeuocard/tarball/master\">Download <strong>TAR Ball</strong></a></li>\n          <li><a href=\"https://github.com/kenkeiter/skeuocard\">View On <strong>GitHub</strong></a></li>\n        </ul>\n      </header>\n      <section>\n        <!-- START FORM -->\n        \n          <div class=\"credit-card-input no-js\" id=\"skeuocard\">\n            <p class=\"no-support-warning\">\n              Either you have Javascript disabled, or you're using an unsupported browser, amigo! That's why you're seeing this old-school credit card input form instead of a fancy new Skeuocard. On the other hand, at least you know it gracefully degrades...\n            </p>\n            <label for=\"cc_type\">Card Type</label>\n            <select name=\"cc_type\">\n              <option value=\"\">...</option>\n              <option value=\"visa\">Visa</option>\n              <option value=\"discover\">Discover</option>\n              <option value=\"mastercard\">MasterCard</option>\n              <option value=\"maestro\">Maestro</option>\n              <option value=\"jcb\">JCB</option>\n              <option value=\"unionpay\">China UnionPay</option>\n              <option value=\"amex\">American Express</option>\n              <option value=\"dinersclubintl\">Diners Club</option>\n            </select>\n            <label for=\"cc_number\">Card Number</label>\n            <input type=\"text\" name=\"cc_number\" id=\"cc_number\" placeholder=\"XXXX XXXX XXXX XXXX\" maxlength=\"19\" size=\"19\">\n            <label for=\"cc_exp_month\">Expiration Month</label>\n            <input type=\"text\" name=\"cc_exp_month\" id=\"cc_exp_month\" placeholder=\"00\">\n            <label for=\"cc_exp_year\">Expiration Year</label>\n            <input type=\"text\" name=\"cc_exp_year\" id=\"cc_exp_year\" placeholder=\"00\">\n            <label for=\"cc_name\">Cardholder's Name</label>\n            <input type=\"text\" name=\"cc_name\" id=\"cc_name\" placeholder=\"John Doe\">\n            <label for=\"cc_cvc\">Card Validation Code</label>\n            <input type=\"text\" name=\"cc_cvc\" id=\"cc_cvc\" placeholder=\"123\" maxlength=\"3\" size=\"3\">\n          </div>\n\n        <!-- END FORM -->\n      </section>\n      <section>\n<h3>Give it a try.</h3>\n\n<p>If you have a recent browser, the credit card input above will be progressively enhanced by Skeuocard. To begin, simply enter your card number (don't worry, it's not sent outside your browser). If that's too fishy for you (and I don't blame you), you can also try these valid credit card numbers to get the feel of it:</p>\n\n<pre>\nVisa: 4111111111111111\nDiscover: 6011111111111117\nMasterCard: 5111111111111118\nMaestro: 5018111111111112\nJCB: 3511111111111119\nUnion Pay: 6211111111111111\nAmerican Express: 371111111111114\nDiners Club: 38111111111119\n</pre>\n\n<p>The numbers above will work with any expiration date (as long as it's in the future), any name, and any CVC code (the three or four digit verification code), since those are all validated on the server side upon authorization.</p>\n\n<h3>How It Works</h3>\n\n<p>When you begin entering your card number, Skeuocard attempts to match it to an accepted card type. Once it is able to do so, it modifies the layout of the card to match the card product (Visa, MasterCard, etc) and makes any tweaks specific to the issuer -- for example, the special layout of the Chase Sapphire card.</p>\n\n<p>As you enter your information, Skeuocard modifies the underlying form values from your original, non-enhanced form. It also validates each field to find simple user mistakes and missing fields.</p>\n\n<p>If the card product has fields on both sides of the card (for example, placing the CVC code on the back) the user will be prompted to flip the card to fill in the remaining fields.</p>\n\n<h3>Get It!</h3>\n\n<p>Check out <a href=\"http://github.com/kenkeiter/skeuocard/\">Skeuocard's GitHub repository</a> for documentation and source. Skeuocard is a work in progress, and I'll be doing my best to add new credit card layouts as quickly as people contribute them.</p>\n\n<p>Skeuocard is provided under the flexible MIT license.</p>\n\n      </section>\n      <footer>\n        <p>This project is maintained by <a href=\"https://github.com/kenkeiter\">kenkeiter</a></p>\n      </footer>\n    </div>\n\n    <script src=\"javascripts/vendor/demo.fix.js\"></script>\n    <script src=\"javascripts/vendor/jquery-2.0.3.min.js\"></script>\n    <script src=\"javascripts/skeuocard.js\"></script>\n    <script>\n\n      $(document).ready(function(){\n        var isBrowserCompatible = \n          $('html').hasClass('ua-ie-10') ||\n          $('html').hasClass('ua-webkit') ||\n          $('html').hasClass('ua-firefox') ||\n          $('html').hasClass('ua-opera') ||\n          $('html').hasClass('ua-chrome');\n\n        if(isBrowserCompatible){\n          window.card = new Skeuocard($(\"#skeuocard\"), {\n            debug: false\n          });\n        }\n      });\n\n    </script>\n  </body>\n</html>\n"
        },
        {
          "name": "javascripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.48828125,
          "content": "{\n  \"name\": \"Skeuocard\",\n  \"description\": \"A skeuomorphic credit-card input.\",\n  \"homepage\": \"http://github.com/kenkeiter/skeuocard\",\n  \"version\": \"1.1.0\",\n  \"author\": {\n    \"name\": \"Ken Keiter\",\n    \"url\": \"http://kenkeiter.com/\"\n  },\n  \"devDependencies\": {\n    \"grunt\": \"~0.4.1\",\n    \"grunt-contrib-watch\": \"~0.4.4\",\n    \"grunt-contrib-coffee\": \"~0.7.0\",\n    \"grunt-contrib-sass\": \"~0.5.0\",\n    \"grunt-contrib-uglify\": \"~0.2.4\",\n    \"grunt-open\": \"~0.2.1\",\n    \"grunt-express\": \"~1.0.0-beta2\"\n  }\n}"
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 30.7138671875,
          "content": null
        },
        {
          "name": "styles",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}