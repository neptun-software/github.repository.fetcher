{
  "metadata": {
    "timestamp": 1736562009387,
    "page": 745,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Rezmason/matrix",
      "stars": 3397,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0791015625,
          "content": "[submodule \"msdfgen\"]\n\tpath = msdfgen\n\turl = https://github.com/Chlumsky/msdfgen\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2018 Rezmason\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.4697265625,
          "content": "[![Matrix screenshot](/screenshot.png?raw=true \"Matrix's default appearance.\")](https://rezmason.github.io/matrix)\n\n# [matrix](https://rezmason.github.io/matrix) (web-based green code rain, made with love)\n\n**_News Update September 2022:_** this project was [featured in Vice Motherboard](https://www.vice.com/en/article/88qvn3/coder-makes-matrix-green-rain-simulator-that-lilly-wachowski-says-is-better-than-the-original), along with insight into the effect from Lilly Wachowski.\n\n## Quick Links\n\n- [Classic Matrix code](https://rezmason.github.io/matrix)\n- [Starting from a blank screen (`skipIntro=false`)](https://rezmason.github.io/matrix/?skipIntro=false) (which some people really like, but isn't the default mode)\n- [3D mode](https://rezmason.github.io/matrix?version=3d)\n- Mirror mode, [with camera](https://rezmason.github.io/matrix/?version=updated&effect=mirror&camera=true) and [without](https://rezmason.github.io/matrix/?version=updated&effect=mirror). (Click to make ripples.)\n- [Matrix Resurrections updated code](https://rezmason.github.io/matrix?version=resurrections)\n- [Trinity mode](https://rezmason.github.io/matrix?version=trinity)\n- [Operator Matrix code (with ripple effects)](https://rezmason.github.io/matrix?version=operator)\n- [Megacity Mode, as seen in Revolutions](https://rezmason.github.io/matrix?version=megacity)\n\n*Variants*\n\n- [Code of the \"Nightmare Matrix\"](https://rezmason.github.io/matrix?version=nightmare)\n  - [(you know, this stuff).](http://matrix.wikia.com/wiki/Nightmare_Matrix)\n- [Code of the \"Paradise Matrix\"](https://rezmason.github.io/matrix?version=paradise)\n  - [(AKA this stuff).](http://matrix.wikia.com/wiki/Paradise_Matrix)\n- [A custom variant I call \"Palimpsest\"](https://rezmason.github.io/matrix?version=palimpsest)\n- [A custom variant I call \"Twilight\"](https://rezmason.github.io/matrix?version=twilight)\n- [Morpheus mode](https://rezmason.github.io/matrix?version=morpheus)\n- [Bugs mode](https://rezmason.github.io/matrix?version=bugs)\n- [Pride flag colors](https://rezmason.github.io/matrix/?effect=pride)\n- [Trans flag colors](https://rezmason.github.io/matrix/?effect=trans)\n- [Custom stripes (`effect=stripes&stripeColors=R,G,B,R,G,B,R,G,B, etc`)](https://rezmason.github.io/matrix/?effect=stripes&stripeColors=1,0,0,1,1,0,0,1,0)\n- [Custom palette (`palette=R,G,B,%,R,G,B,%,R,G,B,%, etc`)](https://rezmason.github.io/matrix/?palette=0.1,0,0.2,0,0.2,0.5,0,0.5,1,0.7,0,1)\n- [Custom image (`url=www.website.com/picture.jpg`)](https://rezmason.github.io/matrix/?effect=image&url=https://upload.wikimedia.org/wikipedia/commons/f/f5/EagleRock.jpg)\n- [Debug view (`effect=none`)](https://rezmason.github.io/matrix/?effect=none) (*epilepsy warning*: this once had lots of flickering)\n- [Holographic version](https://rezmason.github.io/matrix?version=holoplay) (requires a Looking Glass display; see it in action [here](https://www.youtube.com/watch?v=gwA9hfq1Ing))\n\n*Typography*\n\n- [The free classic font (TrueType).](https://github.com/Rezmason/matrix/raw/master/assets/Matrix-Code.ttf)\n- [The free *Resurrections* font (TrueType).](https://github.com/Rezmason/matrix/raw/master/assets/Matrix-Resurrected.ttf)\n- [The unofficial glyph database.](https://docs.google.com/spreadsheets/d/1NRJP88EzQlj_ghBbtjkGi-NbluZzlWpAqVIAq1MDGJc)\n\n*Concept*\n- [(t,i,x,y) => (1-(sin(x*7)-(y/15)+(t+2))%1)/3)](https://tixy.land/?code=(1-(sin(x*7)-(y%2F15)%2B(t%2B2))%251)%2F3)\n- [Educational version in Scratch](https://scratch.mit.edu/projects/575890996/editor)\n\n## Contents\n- [About](#about)\n- [Goals](#goals)\n- [Sidenote: other people's Matrix effects](#sidenote-other-peoples-matrix-effects)\n- [Customization](#customization)\n- [Troubleshooting](#troubleshooting)\n- [Future directions](#future-directions)\n- [Friends of the project](#friends-of-the-project)\n- [Colophon](#colophon)\n- [Other details](#other-details)\n\n\n## About\n\nThis project is a web implementation of the raining green code seen in the *Matrix* franchise. It's built right on top of the functional WebGL wrapper, [REGL](https://regl.party), with beta support for the upcoming graphics API [WebGPU](https://github.com/gpuweb/gpuweb); its previous Three.js version is maintained in a separate branch.\n\nThis project runs right in the web browser; you can serve it with any HTTP/HTTPS server, with no additional setup. For example, on a Mac you can point a Terminal shell at a local copy of the project and run a simple HTTP server with Python: `cd /path/to/the/project ; python3 -m http.server`\n\n\n## Goals\n\nThere are four kinds of Matrix effects people call [\"digital rain\"](http://matrix.wikia.com/wiki/Matrix_code):\n1. The green symbols that \"rain down\" operators' screens endlessly\n2. Scenes from within the simulation that depict green symbols streaking across everything\n3. The films' opening title graphics, which dazzle viewers and then draw them into the world of the franchise\n4. The \"dialing\" visualization at the opening of *The Matrix* and *Resurrections*\n\nA motivated fan can attempt to portray any of these. However, this project focuses specifically on #1 and #3— an endless effect, visually stunning and mystifying, that feels right at home on any screen.\n\nThe following criteria guided the development process:\n\n- **Get the right glyphs**. Like the actual ones. By now everyone's heard how the Matrix glyphs are some treatment of [katakana](https://en.wikipedia.org/wiki/Katakana), but they also include a few characters from [Susan Kare's Chicago typeface](https://en.wikipedia.org/wiki/Chicago_(typeface)). The Matrix glyphs in *this* project come from the source: cleaned up vectors [from an old SWF](https://web.archive.org/web/20070914173039/http://www.atari.com:80/thematrixpathofneo/) from the promotional site for an official Matrix product, archived back in 2007. That's how deep this rabbit hole goes, friends.\n(Please support the [Internet Archive!](https://archive.org/about/))\n- **Get the new glyphs**. When *Resurrections* hit theaters in December 2021, it debuted an expanded glyph set with a daunting *135 symbols*. Virtually all of them were recovered from the movie trailers for this project and uploaded before the film's release! ...But they were of relatively poor quality. Fortunately, in this age of 720p reference material and tie-in marketing, a decent sized sample of new glyphs were eventually reverse-engineered from [a sparkly watch ad](https://www.hamiltonwatch.com/en-int/thematrixresurrections), and the rest were lovingly synthesized from frames of a [behind-the-scenes VFX video](https://buf.com/films/the-matrix-resurrections).\n- **Make it look sweet in 2D.** The most versatile, recognizable and mesmerizing manifestation of the code rain is when it seems to pour right down your screen like rain on a windowpane. While depth effects are cool, they can obscure the details that make the difference between a goodtrix and a *greatrix*.\n- **Make it look sweet in 3D, too.** To facilitate future support of stereoscopic and holographic displays, it made sense to nail down a 3D variation, but it looks pretty on any kind of display.\n- **The 2D glyphs are in a *fixed grid* and *don't move*.** The \"raindrops\" we see in the effect are simply waves of illumination of stationary symbols that occupy a column. To get a better look at this, try setting the `fallSpeed` to a number close to 0.\n- **Get the glow and color right.** Matrix symbols aren't just some shade of phosphorous green; they're first given a bloom effect, and then get tone-mapped to the green color palette.\n- **Capture the proper rhythm of raindrops falling.** Multiple raindrops often occupy a column at the same time, and they may have different speeds, but they can never collide. This project achieves this with a [sawtooth wave](http://mathworld.wolfram.com/SawtoothWave.html), modulating the width of the teeth to keep things interesting. The tips of those teeth— the cells in the grid where the sawtooth dips— are where we put the \"cursors\" (or \"tracers\") at the bottom of each raindrop.\n- **Capture the glyph cycling sequence.** The symbols in *Reloaded* and *Revolutions*' opening titles, which were at one point the highest fidelity versions of the 2D effect, change according to a repeating sequence (see the [unofficial glyph database](https://docs.google.com/spreadsheets/d/1NRJP88EzQlj_ghBbtjkGi-NbluZzlWpAqVIAq1MDGJc)). This is only a technical detail, and no longer drives the glyph cycle in this project, but it can be used to analyze [promotional material](https://wwws.warnerbros.co.jp/matrix-movie/news/?id=5).\n- **Whip up some artistic license and imagine the \"previous\" Matrix versions.** The sequels describe [a paradisiacal predecessor](https://rezmason.github.io/matrix?version=paradise) to the Matrix that was too idyllic, [and another earlier, nightmarish Hobbesian version](https://rezmason.github.io/matrix?version=nightmare) that proved too campy. They depict some programs running older, differently colored code. So, this project dares to speculate how these old Matrix versions looked and acted.\n- **Support a broad range of customization options, and use them to produce other noncanonical variants.** See the list of links above for the full set of available versions, and see the list below to see all the ways you can personalize the effect for yourself.\n- **Make it free, open source and web based.** The [MIT License](https://github.com/Rezmason/matrix/blob/master/LICENSE) permits distribution and modification of this project. Both are highly encouraged!\n- **Support as many browsers and devices as possible.** For all the flack it receives, the web is the most ubiquitous and accessible platform for sharing graphics, or anything really. This project is built on the web stack so it can reach wherever the web goes.\n- **Promote a progressive interpretation of the film franchise.** *The Matrix* is an action film you can enjoy without critical analysis, but if you do read into it, you'll be rewarded. And let's be clear: **The Matrix is a story about transitioning, directed by two siblings who transitioned**. This is undeniable. Its franchise has plenty more themes, and plenty of room for interpretation, but the communities of misogynists and bigots who claim this imagery for their movements cannot be tolerated in any form. This is a chance to open minds, not shut them.\n\n\n## Sidenote: other people's Matrix effects\n\nThe number of implementations out there of this effect is a testament to the size of the film's impact on popular culture. For decades, I've enjoyed searching for and comparing them from time to time. That's probably how you arrived here— it's *fun* to see what kinds of solutions different people come up with to a problem, when the process is purely recreational and its success is subjective. I myself tried and failed to make the effect many times over.\n\nSome of the [earliest](https://github.com/ppetr/xlockmore/blob/master/modes/matrix.c), [roughest](https://github.com/Zygo/xscreensaver/blob/d1f484cfa47f4a0862140421480bb536ad66ede9/hacks/xmatrix.c) versions were made after the film hit theaters in March, but before it was released on home media in October— people were recreating the effect purely from memory. Others probably used the official screensaver as a reference, which was made by the time-strappped developers of [the (excellent, defunct) official site](https://web.archive.org/web/*/http://whatisthematrix.com) from the images and multimedia tools they had available.\n\n\n## Customization\n\nYou can customize the digital rain quite a bit by stapling \"URL variables\" to its URL— by putting a '?' at the end of the link above, and then chaining together words, like this:\n\n[https://rezmason.github.io/matrix/?numColumns=100&fallSpeed=-0.1&slant=200&glyphRotation=180](https://rezmason.github.io/matrix/?numColumns=100&fallSpeed=-0.1&slant=200&glyphRotation=180)\n\nNow you know link fu. Here's a list of customization options:\n\n- `version` - the version of the Matrix to simulate. Default is \"classic\".\n  - \"classic\" is the Matrix code everyone knows and loves, mostly based on the sequels' opening title graphics.\n  - \"3d\" is the classic code in 3D mode.\n  - \"megacity\" is a variation of the classic code that includes the Megacity as a glyph, as is seen in the opening titles of *Revolutions*.\n  - \"operator\" is more reminiscent of the matrix code as it appears in the first movie's opening titles, and on operators' screens: flatter, crowded, without a gradient, and with occasional effects (such as a square ripple).\n  - \"nightmare\" is how the Matrix may have appeared in the Merovingian's heyday: flashy, foreboding, relentless.\n  - \"paradise\" is how the Matrix's idyllic predecessor may have appeared: warm, simplistic, encompassing.\n  - \"resurrections\" is the updated Matrix code\n  - \"palimpsest\" is a custom version inspired by the art and sound of [Rob Dougan](https://en.wikipedia.org/wiki/Rob_Dougan)'s [Furious Angels](https://en.wikipedia.org/wiki/Furious_Angels).\n- `skipIntro` - whether or not to start from a blank screen. Can be \"true\" or \"false\", default is *true*.\n- `font` - the set of glyphs to draw. Current options are \"matrixcode\", \"resurrections\", \"gothic\", \"coptic\", \"huberfishA\", and \"huberfishD\".\n- `numColumns` - the number of columns (and rows) to draw. Default is 80.\n- `glyphFlip` - when set to \"true\", this flips the glyphs. Default is \"false\".\n- `glyphRotation` - the angle to rotate the glyphs in-place, in degrees. Default is 0. I suggest angles that are multiples of 90°.\n- `volumetric` - when set to \"true\", this renders the glyphs with depth, slowly approaching the eye. Default is \"false\".\n- `density` - the number of 3D raindrops to draw, proportional to the default. Default is 1.0.\n- `forwardSpeed` - the rate that the 3D raindrops approach. Default is 1.0.\n- `slant` - the angle that the 2D raindrops fall, in degrees. Default is 0.\n- `bloomSize` - the glow quality, from 0 to 1. Default is 0.4. Lowering this value may help the digital rain run smoother on your device.\n- `bloomStrength` - the glow intensity, from 0 to 1. Default is 0.7.\n- `ditherMagnitude` - the amount to randomly darken pixels, to conceal [banding](https://en.wikipedia.org/wiki/Colour_banding). Default is 0.05.\n- `resolution` - the image size, relative to the window size. Default is 1. Lowering this value may improve your performance, especially on high pixel density displays.\n- `raindropLength` - the vertical scale of \"raindrops\" in the columns. Can be any number.\n- `animationSpeed` - the overall speed of the animation. Can be any number.\n- `fallSpeed` - the speed of the rain's descent. Can be any number.\n- `cycleSpeed` - the speed that the glyphs change their symbol. Can be any number.\n- `effect` - alternatives to the default post-processing effect. Can be \"plain\", \"pride\", \"stripes\", \"none\", \"image\" or \"mirror\".\n  - (\"none\" displays the 'debug view', a behind-the-scenes look at the anatomy of the effect.)\n- `camera` - some effects, ie. the mirror effect, optionally support webcam input. Can be \"true\" or \"false\". Default is false.\n- `stripeColors` - if you set the effect to \"stripes\", you can specify the colors of vertical stripes as alternating *R,G,B* numeric values, like so: [https://rezmason.github.io/matrix/?effect=stripes&stripeColors=1,0,0,1,1,0,0,1,0](https://rezmason.github.io/matrix/?effect=stripes&stripeColors=1,0,0,1,1,0,0,1,0)\n- `palette` — with the normal \"palette\" effect, you can specify the colors and placement of the colors along the color grade as alternating *R,G,B,%* numeric values, like so: [https://rezmason.github.io/matrix/?palette=0.1,0,0.2,0,0.2,0.5,0,0.5,1,0.7,0,1](https://rezmason.github.io/matrix/?palette=0.1,0,0.2,0,0.2,0.5,0,0.5,1,0.7,0,1)\n- `backgroundColor`, `cursorColor`, `glintColor` — other *R,G,B* values that apply to the corresponding parts of the effect.\n- `paletteHSL`, `stripeHSL`, `backgroundHSL`, `cursorHSL`, and `glintHSL` — the same as the above, except they use *H,S,L* (hue, saturation, lightness) instead of *R,G,B*.\n- `cursorIntensity`, — the brightness of cursors' glow. Can be any number greater than zero. Default is 2.0.\n- `glintIntensity` — the brightness of glint glow, if there is any glint. Can be any number greater than zero. Default is 1.0.\n- `url` - if you set the effect to \"image\", this is how you specify which image to load. It doesn't work with any URL; I suggest grabbing them from Wikipedia: [https://rezmason.github.io/matrix/?effect=image&url=https://upload.wikimedia.org/wikipedia/commons/f/f5/EagleRock.jpg](https://rezmason.github.io/matrix/?effect=image&url=https://upload.wikimedia.org/wikipedia/commons/f/f5/EagleRock.jpg)\n- `loops` - (WIP) if set to \"true\", this causes the effect to loop, so that it can be converted into a looping video.\n- `fps` — the framerate of the effect. Can be any number between 0 and 60. Default is 60.\n- `suppressWarnings` - if set to \"true\", this suppresses any warnings that would otherwise appear— when viewing the project on a device with no GPU, for example.\n\n## Troubleshooting\n\nThere haven't been many reported issues yet that weren't quick fixes, but one has stood out: many visitors have previously *disabled hardware acceleration* in their Chrome browsers, at the advice of well-meaning Internet websites.\n\nWhat this does is cause Chrome to fall back to **SwiftShader**, a software renderer that runs projects like this one at a much slower rate. Because of this, if you are seeing serious performance issues on Chrome, it's recommended that you ensure hardware acceleration is enabled in your browser settings.\n\n## Future directions\n\nThis project is still in active development, but some upcoming features are worth mentioning.\n\n- **An audio element.** Things make sounds, don't they? Yes, they do, especially in movies. And while silence is precious, there are plans to provide a setting that introduces some kind of pleasant audio treatment to the effect.\n- **A user interface that isn't a URL.** This project supports a lot of configurable options under the hood, and it would be wise to add a fun looking UI that exposes them all to visitors in an intuitive way.\n\n\n## Friends of the project\n\n- Vesuveus was gracious to [spend time discussing this project](https://anchor.fm/vesuveusmxo/episodes/Podcast-Episode-5---Rezmason--Matrix-Code-e1i3iia) and the effect that inspires it on his long-running podcast, [The Matrix Online Revisited with Vesuveus](https://anchor.fm/vesuveusmxo). Fandom is the interwoven story of people interacting with a piece of media, and Vesuveus keeps ours alive and gives them perspective.\n- Alexi García's [stunning in-depth comparison](https://bit.ly/MatrixVersions) of the many home video releases of *The Matrix* is a must-see for any fan of the franchise, and those curious about how a movie can subtly change over time. Alexi's diligence and familiarity with the material are to thank for the high-fidelity references and high-fidelity feedback that have helped shape this project. Visit [his main site](https://alxcia.wordpress.com/) for more information.\n- GitHub user 57r31 produced a proof of concept that led to the [interactive mirror effect](https://rezmason.github.io/matrix/?version=updated&effect=mirror).\n\n\n## Colophon\n\nThe Coptic glyphs in the \"Paradise Matrix\" version are derived from [George Douros's font \"Symbola\"](http://users.teilar.gr/~g1951d), due to their similarity to the script in [CG II of Nag Hammadi](https://en.wikipedia.org/wiki/Nag_Hammadi_Codex_II). If a 4th century Gnostic scribe trolled Athanasius over IRC, it might look like this.\n\nThe Gothic glyphs in the \"Nightmare Matrix\" version are derived from [Dr. jur. Robert Pfeffer's font \"Silubur\"](http://www.robert-pfeffer.net/gotica/englisch/index.html), which are inspired by the uncial script found in the [Codex Argenteus](https://en.wikipedia.org/wiki/Codex_Argenteus). If a werewolf emailed a vampire in the 6th century, it might look like this.\n\nThe glyphs used in the \"Palimpsest\" and \"Twilight\" versions are derived from [Teague Chrystie's font \"Huberfish\"](http://robotsoup.com/huberfish.html), a fictitious alphabet that comes in several styles. If a spacedock technician bought a soda from a vending machine in an cool utopian future that will never happen, it might look like this.\n\n\n## Other details\n\nThe glyphs are formatted as a multi-channel distance field (or MSDF) via Victor Chlumsky's [msdfgen](https://github.com/Chlumsky/msdfgen). This format preserves the crisp edges and corners of vector graphics when rendered as textures. Chlumsky's thesis paper, which is in English and is also easy to read, is [available to download here](https://dspace.cvut.cz/handle/10467/62770).\n\nThe raindrops themselves are particles [computed on the GPU and stored in textures](https://threejs.org/examples/webgl_gpgpu_water.html), much smaller than the final render. The data sent from the CPU to the GPU every frame is negligible.\n"
        },
        {
          "name": "TODO.txt",
          "type": "blob",
          "size": 2.302734375,
          "content": "TODO:\n\nLive config update roadmap\n  Modify regl pass\n    async build(config, inputs)\n      loads all required stuff\n    async resize - adjusts the sizes\n    run — performs the GPU operation\n  Rewrite main code to accept changes to config\n  Build a Tweakpane for config\n    https://cocopon.github.io/tweakpane\n    Show a gear emoji in the top right on mouse move\n      Hide after three seconds\n      If tapped, show the tweakpane\n\nSeems like bloom size and resolution impact the REGL and WebGPU bloom implementations differently\n  Move high pass into WebGPU bloom\n\nDithering bug on mobile?\n  Looks like a subtle fade occurring at a per-second interval\n\nWrite an explanation of the rain pass (and include images)\n  Compute\n  Volumetric quads\n  Fullscreen quad and spacial mapping\n  MSDFs\n\nAudio system\n  Toggle (or number representing frequency)\n  Load the sound effect\n  Play it multiple times with delay\n    Random pan\n    Random volume?\n    Randomize pitch a little?\n\nPlaydate version\n  Audio system\n    Falling sound\n    Launch sound\n    Undocking sound\n    Docking sound\n    Maybe crank sounds? Not sure yet\n\nSupport Resurrections SDF bevel and \"lights\"\n  https://shaderfun.com/2018/07/23/signed-distance-fields-part-8-gradients-bevels-and-noise/\n  Get the \"normals\" and color right\n    Note: even completely dark glyphs can have glint on their edges\n    \"Golden hour\"\n  Stuff MSDF-derived normal vectors from rain pass frag into two of its output channels\n  Anomaly mode toggles between this and anomaly streaks\n\nWebGPU\n  Try https://github.com/brendan-duncan/wgsl_reflect\n  Get rid of end pass once it's possible to copy a bgra8unorm to a canvas texture\n  Switch to rgba32float somehow?\n    Why isn't this straightforward?\n  Try shorthand\n  Share a bind group and layout just for time?\n  Try using a buffer for the stripe pass 1D texture\n\nImprove loop support\n\nIdea: Build a UI\n  Replace versions with presets\n  Simple changes update the values\n  Complex changes replace the pipeline\n  Make it a form, so it's accessible\n  Then, make it look cool like the UI from the old site\n\nMaybe pay someone to make Mac/Windows screensavers\n\nZion Control's matrix variant\n  From Reloaded\n\ngpu-buffer, working title\n  Support type aliasing (type Q = array<i32, 5>)\n  Support shorthand (vec4f)\n  Build mocha tests, example project\n  Give it its own repo, microsite\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "glyph order.txt",
          "type": "blob",
          "size": 0.296875,
          "content": "Reloaded/Revolutions:\nモエヤキオカ7ケサスz152ヨタワ4ネヌナ98ヒ0ホア3ウ セ¦:\"꞊ミラリ╌ツテニハソ▪—<>0|+*コシマムメ\n\nResurrections:\nモエヤキオカ7ケサスz152ヨタワ4ネヌナ98ヒ0ホア3ウ セ¦:\"꞊ミラリ╌ツテニハソコ—<ム0|*▪メシマ>+\n"
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 2.5380859375,
          "content": "<!doctype html>\n<html>\n\t<head>\n\t\t<title>Matrix digital rain</title>\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n\t\t<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0, viewport-fit=cover\" />\n\t\t<style>\n\t\t\t@supports (padding-top: env(safe-area-inset-top)) {\n\t\t\t\tbody {\n\t\t\t\t\tpadding: 0;\n\t\t\t\t\theight: calc(100% + env(safe-area-inset-top));\n\t\t\t\t}\n\t\t\t}\n\t\t\tbody {\n\t\t\t\tbackground: black;\n\t\t\t\toverflow: hidden;\n\t\t\t\tmargin: 0;\n\n\t\t\t\tfont-family: monospace;\n\t\t\t\tfont-size: 2em;\n\t\t\t\ttext-align: center;\n\t\t\t}\n\n\t\t\tcanvas {\n\t\t\t\twidth: 100vw;\n\t\t\t\theight: 100vh;\n\t\t\t}\n\n\t\t\tp {\n\t\t\t\tcolor: hsl(108, 90%, 70%);\n\t\t\t\ttext-shadow: hsl(108, 90%, 40%) 1px 0 10px;\n\t\t\t}\n\n\t\t\t.notice {\n\t\t\t\tmargin-top: 10em;\n\t\t\t\tanimation: fadeInAnimation ease 3s;\n\t\t\t\tanimation-iteration-count: 1;\n\t\t\t\tanimation-fill-mode: forwards;\n\t\t\t}\n\n\t\t\t@keyframes fadeInAnimation {\n\t\t\t\t0% {\n\t\t\t\t\topacity: 0;\n\t\t\t\t}\n\t\t\t\t100% {\n\t\t\t\t\topacity: 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t.pill {\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tbackground: gray;\n\t\t\t\tborder: 0.3em solid lightgray;\n\t\t\t\tfont-size: 1rem;\n\t\t\t\tfont-family: monospace;\n\t\t\t\tcolor: white;\n\t\t\t\tpadding: 0.5em 1em;\n\t\t\t\tborder-radius: 2em;\n\t\t\t\tmin-width: 6rem;\n\t\t\t\tmargin: 3em;\n\t\t\t\ttext-decoration: none;\n\t\t\t\tcursor: pointer;\n\t\t\t\ttext-transform: uppercase;\n\t\t\t\tfont-weight: bold;\n\t\t\t}\n\n\t\t\t.blue {\n\t\t\t\tbackground: linear-gradient(skyblue, blue, black, black, darkblue);\n\t\t\t\tborder-color: darkblue;\n\t\t\t\tcolor: lightblue;\n\t\t\t}\n\n\t\t\t.blue:hover {\n\t\t\t\tborder-color: blue;\n\t\t\t\tcolor: white;\n\t\t\t}\n\n\t\t\t.red {\n\t\t\t\tbackground: linear-gradient(lightpink, crimson, black, black, darkred);\n\t\t\t\tborder-color: darkred;\n\t\t\t\tcolor: lightpink;\n\t\t\t}\n\n\t\t\t.red:hover {\n\t\t\t\tborder-color: crimson;\n\t\t\t\tcolor: white;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<!--\n\t\t\tThis is an implementation of the green code seen in The Matrix film and video game franchise.\n\t\t\tThis project demonstrates five concepts:\n\t\t\t\t\t1. Drawing to floating point frame buffer objects, or 'FBO's,\n\t\t\t\t\t\t for performing computation and post-processing\n\t\t\t\t\t2. GPU-side computation, with fragment shaders\n\t\t\t\t\t\t updating two alternating FBOs\n\t\t\t\t\t3. Rendering crisp \"vector\" graphics, with a multiple-channel\n\t\t\t\t\t\t signed distance field (or 'MSDF')\n\t\t\t\t\t4. Creating a blur/bloom effect from a texture pyramid\n\t\t\t\t\t5. Color mapping with noise, to hide banding\n\n\t\t\tFor more information, please visit: https://github.com/Rezmason/matrix\n\t\t -->\n\t\t<script type=\"module\" src=\"js/main.js\"></script>\n\t</body>\n</html>\n"
        },
        {
          "name": "js",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "msdfgen",
          "type": "commit",
          "content": null
        },
        {
          "name": "playdate",
          "type": "tree",
          "content": null
        },
        {
          "name": "prettier_command.txt",
          "type": "blob",
          "size": 0.0947265625,
          "content": "prettier --write --use-tabs --print-width 160 \"index.html\" \"./js/**/**.js\" \"./lib/gpu-buffer.js\"\n"
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 3480.650390625,
          "content": null
        },
        {
          "name": "shaders",
          "type": "tree",
          "content": null
        },
        {
          "name": "svg sources",
          "type": "tree",
          "content": null
        },
        {
          "name": "webgpu_notes.txt",
          "type": "blob",
          "size": 1.9873046875,
          "content": "Learning WebGPU\n\tRequest an adaptor from navigator.gpu\n\tRequest a device from the adapter\n\t\tDevices have features and (numeric) limits\n\t\t\tSo do adapters, but the device ones are the important ones\n\t\tDevices have a destroy method\n\tCreate objects from the device\n\t\tPipelines (optionally with async) and pipeline layouts\n\t\tShader modules (programs)\n\t\tTextures and samplers\n\t\t\tYou need a sampler to sample a texture in a shader\n\t\t\tTexture has a createView() method, these views get bound to bind groups and passes\n\t\t\tHas destroy() method\n\t\tBuffers\n\t\t\tHas destroy() method\n\t\tBind groups and bind group layouts\n\t\t\tBind groups are the interfaces defined between the CPU and a pipeline\n\t\tCommand encoders\n\t\t\tUsed to create passes, like a render pass\n\t\t\t\tbegin, set, set, set, end, finish, submit to device queue\n\t\t\t\t\tIt should be possible to reuse command buffers\n\t\tRender bundle encoders [What are these?]\n\t\tQuery sets\n\t\t\tUseful for measuring stats that come from the GPU\n\t\t\t[Is this needed to detect errors?]\n\n\nYou do not need a canvas to webgpu.\nYou DO need a canvas to display what you're rendering\n\tGet canvas's \"webgpu\" context\n\tConfigure context to point at the device\n\tAdjust it when you resize\n\t\tdetect in the RAF when the presentation size isn't the canvas size\n\tCreate a view of the context's current texture, and reference it in the render pass's color attachments\n\t\t[When does that currentTexture change?]\n\nTextures were never resizable, you simply forgot\n\tScreen-size textures have to be destroyed and recreated\n\tTransfer the data over if you need to\n\nBind groups let you bind a bunch of resources at once\nRender bundles let you reissue commands\n\nYou can only use up to FOUR bind groups on your laptop's device!\nHere's an annoying gotcha: uniform buffers have layout requirements listed in the WGSL spec\n\thttps://gpuweb.github.io/gpuweb/wgsl/#structure-layout-rules\n\nTexture lookup in vertex shader\n\tYou can only sample textures in fragment stages\n\tBut you can use textureLoad anywhere to get a specific texel, no sampler needed\n"
        }
      ]
    }
  ]
}