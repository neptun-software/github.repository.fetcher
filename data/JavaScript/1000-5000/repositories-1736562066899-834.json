{
  "metadata": {
    "timestamp": 1736562066899,
    "page": 834,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FuYaoDe/react-native-app-intro",
      "stars": 3251,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5166015625,
          "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directory\nnode_modules\n\n# Optional npm cache directory\n.npm\n\n# Optional REPL history\n.node_repl_history\n"
        },
        {
          "name": "AppIntro.js",
          "type": "blob",
          "size": 11.0146484375,
          "content": "import assign from 'assign-deep';\nimport React, { Component, PropTypes } from 'react';\nimport {\n  StatusBar,\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  Animated,\n  Dimensions,\n  Image,\n  Platform,\n} from 'react-native';\nimport Swiper from 'react-native-swiper';\nimport DoneButton from './components/DoneButton';\nimport SkipButton from './components/SkipButton';\nimport RenderDots from './components/Dots';\n\nconst windowsWidth = Dimensions.get('window').width;\nconst windowsHeight = Dimensions.get('window').height;\n\nconst defaulStyles = {\n  header: {\n    flex: 0.5,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  pic: {\n    width: 150,\n    height: 150,\n  },\n  info: {\n    flex: 0.5,\n    alignItems: 'center',\n    padding: 30,\n  },\n  slide: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#9DD6EB',\n    padding: 15,\n  },\n  title: {\n    color: '#fff',\n    fontSize: 30,\n    paddingBottom: 20,\n  },\n  description: {\n    color: '#fff',\n    fontSize: 20,\n  },\n  controllText: {\n    color: '#fff',\n    fontSize: 22,\n    fontWeight: 'bold',\n  },\n  dotStyle: {\n    backgroundColor: 'rgba(255,255,255,.3)',\n    width: 13,\n    height: 13,\n    borderRadius: 7,\n    marginLeft: 7,\n    marginRight: 7,\n    marginTop: 7,\n    marginBottom: 7,\n  },\n  activeDotStyle: {\n    backgroundColor: '#fff',\n  },\n  paginationContainer: {\n    position: 'absolute',\n    bottom: 25,\n    left: 0,\n    right: 0,\n    flexDirection: 'row',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'transparent',\n  },\n  dotContainer: {\n    flex: 0.6,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  btnContainer: {\n    flex: 0.2,\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 50,\n  },\n  nextButtonText: {\n    fontSize: 25,\n    fontWeight: 'bold',\n    fontFamily: 'Arial',\n  },\n  full: {\n    height: 80,\n    width: 100,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}\n\nexport default class AppIntro extends Component {\n  constructor(props) {\n    super(props);\n\n    this.styles = StyleSheet.create(assign({}, defaulStyles, props.customStyles));\n\n    this.state = {\n      skipFadeOpacity: new Animated.Value(1),\n      doneFadeOpacity: new Animated.Value(0),\n      nextOpacity: new Animated.Value(1),\n      parallax: new Animated.Value(0),\n    };\n  }\n\n  onNextBtnClick = (context) => {\n    if (context.state.isScrolling || context.state.total < 2) return;\n    const state = context.state;\n    const diff = (context.props.loop ? 1 : 0) + 1 + context.state.index;\n    let x = 0;\n    if (state.dir === 'x') x = diff * state.width;\n    if (Platform.OS === 'ios') {\n      context.refs.scrollView.scrollTo({ y: 0, x });\n    } else {\n      context.refs.scrollView.setPage(diff);\n      context.onScrollEnd({\n        nativeEvent: {\n          position: diff,\n        },\n      });\n    }\n    this.props.onNextBtnClick(context.state.index);\n  }\n\n  setDoneBtnOpacity = (value) => {\n    Animated.timing(\n      this.state.doneFadeOpacity,\n      { toValue: value },\n    ).start();\n  }\n\n  setSkipBtnOpacity = (value) => {\n    Animated.timing(\n      this.state.skipFadeOpacity,\n      { toValue: value },\n    ).start();\n  }\n\n  setNextOpacity = (value) => {\n    Animated.timing(\n      this.state.nextOpacity,\n      { toValue: value },\n    ).start();\n  }\n  getTransform = (index, offset, level) => {\n    const isFirstPage = index === 0;\n    const statRange = isFirstPage ? 0 : windowsWidth * (index - 1);\n    const endRange = isFirstPage ? windowsWidth : windowsWidth * index;\n    const startOpacity = isFirstPage ? 1 : 0;\n    const endOpacity = isFirstPage ? 1 : 1;\n    const leftPosition = isFirstPage ? 0 : windowsWidth / 3;\n    const rightPosition = isFirstPage ? -windowsWidth / 3 : 0;\n    const transform = [{\n      transform: [\n        {\n          translateX: this.state.parallax.interpolate({\n            inputRange: [statRange, endRange],\n            outputRange: [\n              isFirstPage ? leftPosition : leftPosition - (offset * level),\n              isFirstPage ? rightPosition + (offset * level) : rightPosition,\n            ],\n          }),\n        }],\n    }, {\n      opacity: this.state.parallax.interpolate({\n        inputRange: [statRange, endRange], outputRange: [startOpacity, endOpacity],\n      }),\n    }];\n    return {\n      transform,\n    };\n  }\n\n  renderPagination = (index, total, context) => {\n    let isDoneBtnShow;\n    let isSkipBtnShow;\n    if (index === total - 1) {\n      this.setDoneBtnOpacity(1);\n      this.setSkipBtnOpacity(0);\n      this.setNextOpacity(0);\n      isDoneBtnShow = true;\n      isSkipBtnShow = false;\n    } else {\n      this.setDoneBtnOpacity(0);\n      this.setSkipBtnOpacity(1);\n      this.setNextOpacity(1);\n      isDoneBtnShow = false;\n      isSkipBtnShow = true;\n    }\n    return (\n      <View style={[this.styles.paginationContainer]}>\n        {this.props.showSkipButton ? <SkipButton\n          {...this.props}\n          {...this.state}\n          isSkipBtnShow={isSkipBtnShow}\n          styles={this.styles}\n          onSkipBtnClick={() => this.props.onSkipBtnClick(index)} /> :\n          <View style={this.styles.btnContainer} />\n        }\n        {this.props.showDots && RenderDots(index, total, {\n          ...this.props,\n          styles: this.styles\n        })}\n        {this.props.showDoneButton ? <DoneButton\n            {...this.props}\n            {...this.state}\n            isDoneBtnShow={isDoneBtnShow}\n            styles={this.styles}\n            onNextBtnClick={this.onNextBtnClick.bind(this, context)}\n            onDoneBtnClick={this.props.onDoneBtnClick} /> :\n            <View style={this.styles.btnContainer} />\n          }\n      </View>\n    );\n  }\n\n  renderBasicSlidePage = (index, {\n    title,\n    description,\n    img,\n    imgStyle,\n    backgroundColor,\n    fontColor,\n    level,\n  }) => {\n    const AnimatedStyle1 = this.getTransform(index, 10, level);\n    const AnimatedStyle2 = this.getTransform(index, 0, level);\n    const AnimatedStyle3 = this.getTransform(index, 15, level);\n    const imgSource = (typeof img === 'string') ? {uri: img} : img;\n    const pageView = (\n      <View style={[this.styles.slide, { backgroundColor }]} showsPagination={false} key={index}>\n        <Animated.View style={[this.styles.header, ...AnimatedStyle1.transform]}>\n          <Image style={imgStyle} source={imgSource} />\n        </Animated.View>\n        <View style={this.styles.info}>\n          <Animated.View style={AnimatedStyle2.transform}>\n            <Text style={[this.styles.title, { color: fontColor }]}>{title}</Text>\n          </Animated.View>\n          <Animated.View style={AnimatedStyle3.transform}>\n            <Text style={[this.styles.description, { color: fontColor }]}>{description}</Text>\n          </Animated.View>\n        </View>\n      </View>\n    );\n    return pageView;\n  }\n\n  renderChild = (children, pageIndex, index) => {\n    const level = children.props.level || 0;\n    const { transform } = this.getTransform(pageIndex, 10, level);\n    const root = children.props.children;\n    let nodes = children;\n    if (Array.isArray(root)) {\n      nodes = root.map((node, i) => this.renderChild(node, pageIndex, `${index}_${i}`));\n    }\n    let animatedChild = children;\n    if (level !== 0) {\n      animatedChild = (\n        <Animated.View key={index} style={[children.props.style, transform]}>\n          {nodes}\n        </Animated.View>\n      );\n    } else {\n      animatedChild = (\n        <View key={index} style={children.props.style}>\n          {nodes}\n        </View>\n      );\n    }\n    return animatedChild;\n  }\n\n  shadeStatusBarColor(color, percent) {\n    const first = parseInt(color.slice(1), 16);\n    const black = first & 0x0000FF;\n    const green = first >> 8 & 0x00FF;\n    const percentage = percent < 0 ? percent * -1 : percent;\n    const red = first >> 16;\n    const theme = percent < 0 ? 0 : 255;\n    const finalColor = (0x1000000 + (Math.round((theme - red) * percentage) + red) * 0x10000 + (Math.round((theme - green) * percentage) + green) * 0x100 + (Math.round((theme - black) * percentage) + black)).toString(16).slice(1);\n\n    return `#${finalColor}`;\n  }\n\n  isToTintStatusBar() {\n    return this.props.pageArray && this.props.pageArray.length > 0 && Platform.OS === 'android'\n  }\n\n  render() {\n    const childrens = this.props.children;\n    const { pageArray } = this.props;\n    let pages = [];\n    let androidPages = null;\n    if (pageArray.length > 0) {\n      pages = pageArray.map((page, i) => this.renderBasicSlidePage(i, page));\n    } else {\n      if (Platform.OS === 'ios') {\n        pages = childrens.map((children, i) => this.renderChild(children, i, i));\n      } else {\n        androidPages = childrens.map((children, i) => {\n          const { transform } = this.getTransform(i, -windowsWidth / 3 * 2, 1);\n          pages.push(<View key={i} />);\n          return (\n            <Animated.View key={i} style={[{\n              position: 'absolute',\n              height: windowsHeight,\n              width: windowsWidth,\n              top: 0,\n            }, {\n              ...transform[0],\n            }]}\n            >\n              {this.renderChild(children, i, i)}\n            </Animated.View>\n          );\n        });\n      }\n    }\n\n    if (this.isToTintStatusBar()) {\n      StatusBar.setBackgroundColor(this.shadeStatusBarColor(this.props.pageArray[0].backgroundColor, -0.3), false);\n    }\n\n    return (\n      <View>\n        {androidPages}\n        <Swiper\n          loop={false}\n          index={this.props.defaultIndex}\n          renderPagination={this.renderPagination}\n          onMomentumScrollEnd={(e, state) => {\n            if (this.isToTintStatusBar()) {\n              StatusBar.setBackgroundColor(this.shadeStatusBarColor(this.props.pageArray[state.index].backgroundColor, -0.3), false);\n            }\n\n            this.props.onSlideChange(state.index, state.total);\n          }}\n          onScroll={Animated.event(\n            [{ x: this.state.parallax }]\n          )}\n        >\n          {pages}\n        </Swiper>\n      </View>\n    );\n  }\n}\n\nAppIntro.propTypes = {\n  dotColor: PropTypes.string,\n  activeDotColor: PropTypes.string,\n  rightTextColor: PropTypes.string,\n  leftTextColor: PropTypes.string,\n  onSlideChange: PropTypes.func,\n  onSkipBtnClick: PropTypes.func,\n  onDoneBtnClick: PropTypes.func,\n  onNextBtnClick: PropTypes.func,\n  pageArray: PropTypes.array,\n  doneBtnLabel: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n  ]),\n  skipBtnLabel: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n  ]),\n  nextBtnLabel: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n  ]),\n  customStyles: PropTypes.object,\n  defaultIndex: PropTypes.number,\n  showSkipButton: PropTypes.bool,\n  showDoneButton: PropTypes.bool,\n  showDots: PropTypes.bool,\n};\n\nAppIntro.defaultProps = {\n  dotColor: 'rgba(255,255,255,.3)',\n  activeDotColor: '#fff',\n  rightTextColor: '#fff',\n  leftTextColor: '#fff',\n  pageArray: [],\n  onSlideChange: () => {},\n  onSkipBtnClick: () => {},\n  onDoneBtnClick: () => {},\n  onNextBtnClick: () => {},\n  doneBtnLabel: 'Done',\n  skipBtnLabel: 'Skip',\n  nextBtnLabel: '›',\n  defaultIndex: 0,\n  showSkipButton: true,\n  showDoneButton: true,\n  showDots: true\n};\n"
        },
        {
          "name": "Example",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 FuYaoDe\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.89453125,
          "content": "# react-native-app-intro\nreact-native-app-intro is a react native component implementing a parallax effect welcome page using base on [react-native-swiper](https://github.com/leecade/react-native-swiper) , similar to the one found in Google's app like Sheet, Drive, Docs...\n\n# react-native-app-intro Screen Capture\n\n[Example code](https://github.com/FuYaoDe/react-native-app-intro/tree/master/Example)\n\n### Support ios、android\n<img src=\"http://i.giphy.com/3o6ozjLoOnYTXfzJgQ.gif\">\n<img src=\"http://gifyu.com/images/android.gif\" width=\"345\">\n\n<a href=\"http://www.freepik.com\">Designed by Freepik</a>\n\n### Installation\n\n```bash\n$ npm i react-native-app-intro --save\n```\n\n### Basic Usage\n\nYou can use pageArray quick generation your app intro with parallax effect. With the basic usage, the Android status bar will be updated to match your slide background color.\n\n<img src=\"http://i.giphy.com/l3V0khy22aUviTTaM.gif\">\n<img src=\"./assets/sample-android.gif\" width=\"280\">\n\n```javascript\nimport React, { Component } from 'react';\nimport { AppRegistry, Alert } from 'react-native';\nimport AppIntro from 'react-native-app-intro';\n\nclass Example extends Component {\n  onSkipBtnHandle = (index) => {\n    Alert.alert('Skip');\n    console.log(index);\n  }\n  doneBtnHandle = () => {\n    Alert.alert('Done');\n  }\n  nextBtnHandle = (index) => {\n    Alert.alert('Next');\n    console.log(index);\n  }\n  onSlideChangeHandle = (index, total) => {\n    console.log(index, total);\n  }\n  render() {\n    const pageArray = [{\n      title: 'Page 1',\n      description: 'Description 1',\n      img: 'https://goo.gl/Bnc3XP',\n      imgStyle: {\n        height: 80 * 2.5,\n        width: 109 * 2.5,\n      },\n      backgroundColor: '#fa931d',\n      fontColor: '#fff',\n      level: 10,\n    }, {\n      title: 'Page 2',\n      description: 'Description 2',\n      img: require('../assets/some_image.png'),\n      imgStyle: {\n        height: 93 * 2.5,\n        width: 103 * 2.5,\n      },\n      backgroundColor: '#a4b602',\n      fontColor: '#fff',\n      level: 10,\n    }];\n    return (\n      <AppIntro\n        onNextBtnClick={this.nextBtnHandle}\n        onDoneBtnClick={this.doneBtnHandle}\n        onSkipBtnClick={this.onSkipBtnHandle}\n        onSlideChange={this.onSlideChangeHandle}\n        pageArray={pageArray}\n      />\n    );\n  }\n}\n\nAppRegistry.registerComponent('Example', () => Example);\n```\n\n### Advanced Usage\n\nIf you need customized page like my Example, you can  pass in `View` component into AppIntro component and set level. Remember any need use parallax effect component, Need to be `<View level={10}></View>` inside.\n\n<img src=\"http://i.giphy.com/26AHwds1g5HjXrd4s.gif\">\n\n```javascript\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View,\n} from 'react-native';\nimport AppIntro from 'react-native-app-intro';\n\nconst styles = StyleSheet.create({\n  slide: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#9DD6EB',\n    padding: 15,\n  },\n  text: {\n    color: '#fff',\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n});\n\nclass Example extends Component {\n\n  render() {\n    return (\n      <AppIntro>\n        <View style={[styles.slide,{ backgroundColor: '#fa931d' }]}>\n          <View level={10}><Text style={styles.text}>Page 1</Text></View>\n          <View level={15}><Text style={styles.text}>Page 1</Text></View>\n          <View level={8}><Text style={styles.text}>Page 1</Text></View>\n        </View>\n        <View style={[styles.slide, { backgroundColor: '#a4b602' }]}>\n          <View level={-10}><Text style={styles.text}>Page 2</Text></View>\n          <View level={5}><Text style={styles.text}>Page 2</Text></View>\n          <View level={20}><Text style={styles.text}>Page 2</Text></View>\n        </View>\n        <View style={[styles.slide,{ backgroundColor: '#fa931d' }]}>\n          <View level={8}><Text style={styles.text}>Page 3</Text></View>\n          <View level={0}><Text style={styles.text}>Page 3</Text></View>\n          <View level={-10}><Text style={styles.text}>Page 3</Text></View>\n        </View>\n        <View style={[styles.slide, { backgroundColor: '#a4b602' }]}>\n          <View level={5}><Text style={styles.text}>Page 4</Text></View>\n          <View level={10}><Text style={styles.text}>Page 4</Text></View>\n          <View level={15}><Text style={styles.text}>Page 4</Text></View>\n        </View>\n      </AppIntro>\n    );\n  }\n}\nAppRegistry.registerComponent('Example', () => Example);\n```\n\nAnd in Android, image inside view component, view need width、height.\n```javascript\n<View style={{\n  position: 'absolute',\n  top: 80,\n  left: 30,\n  width: windows.width,\n  height: windows.height,\n}} level={20}\n>\n  <Image style={{ width: 115, height: 70 }} source={require('./img/1/c2.png')} />\n</View>\n```\n\n## **Properties**\n| Prop           | PropType | Default Value           | Description                                                                                                                                                                                                                                                                                                                                                      |\n|----------------|----------|-------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| dotColor       | string   | 'rgba(255,255,255,0.3)' | Bottom of the page dot color                                                                                                                                                                                                                                                                                                                                     |\n| activeDotColor | string   | '#fff'                  | Active page index dot color                                                                                                                                                                                                                                                                                                                                      |\n| rightTextColor | string   | '#fff'                  | The bottom right Text `Done、>` color                                                                                                                                                                                                                                                                                                                            |\n| leftTextColor  | string   | '#fff'                  | The bottom left Text `Skip` color                                                                                                                                                                                                                                                                                                                                |\n| onSlideChange  | (index, total) => {} |                         | function to call when the pages change                                                                                                                                                                                                                                                                                                                           |\n| onSkipBtnClick | (index) => {}     |                         | function to call when the Skip button click                                                                                                                                                                                                                                                                                                                      |\n| onDoneBtnClick | func     |                         | function to call when the Done button click                                                                                                                                                                                                                                                                                                                      |\n| onNextBtnClick | (index) => {}     |                         | function to call when the Next '>' button click                                                                                                                                                                                                                                                                                                                  |\n| doneBtnLabel   | string、Text element  |  Done                   | The bottom right custom Text label                                                                                                                                                                                                                                                                                                                   |\n| skipBtnLabel   | string、Text element  |  Skip                   | The bottom left custom Text label                                                                                                                                                                                                                                                                                                                  |\n| nextBtnLabel   | string、Text element   |  ›                      | The bottom left custom Text label                                                                                                                                                                                                                                                                                                                  |\n| pageArray      | array    |                         | In the basic usage, you can input object array to render basic view example: ```[[{title: 'Page 1', description: 'Description 1', img: 'https://goo.gl/uwzs0C', imgStyle: {height: 80 * 2.5, width: 109 * 2.5 }, backgroundColor: '#fa931d', fontColor: '#fff', level: 10 }]``` , level is parallax effect level ,if you use pageArray you can't use custom view |\n| defaultIndex | number   | 0 | number of the index of the initial index |\n| showSkipButton | bool | true | a boolean defining if we should render the skip button |\n| showDoneButton | bool | true | a boolean that defines if we should render the done button |\n| showDots | bool | true | a boolean that defines if we should render the bottom dots |\n\n##### **Children View Properties**\n| Prop  | PropType | Default Value | Description           |\n|-------|----------|---------------|-----------------------|\n| level | number   |               | parallax effect level |\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "components",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.951171875,
          "content": "{\n  \"name\": \"react-native-app-intro\",\n  \"version\": \"1.1.5\",\n  \"description\": \"react-native-app-intro is a react native plugin implementing a parallax effect welcome page using base on react-native-swiper , similar to the one found in Google's app like Sheet, Drive, Docs...\",\n  \"main\": \"AppIntro.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/fuyaode/react-native-app-intro.git\"\n  },\n  \"keywords\": [\n    \"swiper\",\n    \"ProductTour\",\n    \"App\",\n    \"Intro\",\n    \"ios\",\n    \"android\",\n    \"react-component\",\n    \"react-native\"\n  ],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/fuyaode/react-native-app-intro/issues\"\n  },\n  \"homepage\": \"https://github.com/fuyaode/react-native-app-intro#readme\",\n  \"dependencies\": {\n    \"assign-deep\": \"^0.4.5\",\n    \"react-native-swiper\": \"git+https://github.com/FuYaoDe/react-native-swiper.git\"\n  }\n}\n"
        }
      ]
    }
  ]
}