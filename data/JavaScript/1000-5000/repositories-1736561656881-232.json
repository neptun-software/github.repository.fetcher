{
  "metadata": {
    "timestamp": 1736561656881,
    "page": 232,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "stackgl/shader-school",
      "stars": 4329,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0498046875,
          "content": "node_modules\nanswers\nnpm-debug.log\nworkshop.tar.gz\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2958984375,
          "content": "\nThe MIT License (MIT)\n\nCopyright (c) 2013 Mikola Lysenko, Hugh Kennedy and Chris Dickinson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\nThe following icons included directly within the project are kindly licensed\nunder Creative Commons Attribution:\n\n* Home by Edward Boatman from The Noun Project\n* Folder by Sergio Calcara from The Noun Project\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.810546875,
          "content": "# Shader School\n\n[![NPM](https://nodei.co/npm/shader-school.png?downloads=true&stars=true)](https://nodei.co/npm/shader-school/)\n[![NPM](https://nodei.co/npm-dl/shader-school.png)](https://nodei.co/npm/shader-school/)\n\n**An introduction to GLSL shaders and graphics programming that runs in your web browser.**\n\n![shader-school](http://imgur.com/Wc74MPW.png)\n\n## Running this thing\n\nFirst, you need to [get a browser with WebGL](http://get.webgl.org/), as well\nas a copy of [node.js](http://nodejs.org/) and [git](http://git-scm.com/). Once you have\nall of that set up, you can install the workshop using [npm](http://npmjs.org/), which\nis included with node:\n\n```\nnpm install -g shader-school\n```\n\nAfter that completes, you should be able to run the workshopper with the command:\n\n```\nshader-school\n```\n\nThe script will ask you if you want to create an answer directory, press `y` to\naccept. This will populate your current directory with shader files for you to\nedit for each lesson – hopefully, it should also automatically open your web\nbrowser but if it doesn't you can find the workshop menu on\n[http://localhost:12492/](http://localhost:12492/).\n\n## Stuck?\n\nFeedback and criticism is welcome, please log your troubles in\n[issues](https://github.com/gl-modules/shader-school/issues). The workshop is\nstill being worked on but is very close to being complete!\n\nFull curriculum reviews\n[like this one](https://github.com/timoxley/functional-javascript-workshop/issues/7)\nare very helpful. More feedback like this please!\n\n## Contributors\n\n<table><tbody>\n<tr><th align=\"left\">Mikola Lysenko</th><td><a href=\"https://github.com/mikolalysenko\">GitHub/mikolalysenko</a></td><td><a href=\"http://twitter.com/mikolalysenko\">Twitter/@mikolalysenko</a></td></tr>\n<tr><th align=\"left\">Hugh Kennedy</th><td><a href=\"https://github.com/hughsk\">GitHub/hughsk</a></td><td><a href=\"http://twitter.com/hughskennedy\">Twitter/@hughskennedy</a></td></tr>\n<tr><th align=\"left\">Chris Dickinson</th><td><a href=\"https://github.com/chrisdickinson\">GitHub/chrisdickinson</a></td><td><a href=\"http://twitter.com/isntitvacant\">Twitter/@isntitvacant</a></td></tr>\n</tbody></table>\n\n## Color Scheme\n\n![color scheme](http://imgur.com/mcbbaNt.png)\n\nFrom left to right:\n\n* `#34363B` `vec3(0.2039, 0.2117, 0.2313)` (black)\n* `#A9B0C3` `vec3(0.5372, 0.6901, 0.7647)` (dark grey)\n* `#DEE7FF` `vec3(0.8705, 0.9058, 1.0)` (light grey)\n* `#FFFFFF` `vec3(1.0, 1.0, 1.0)` (white)\n* `#58FF8B` `vec3(0.3451, 1.0, 0.5450)` (green)\n* `#FF6E57` `vec3(1.0, 0.4313, 0.3411)` (red)\n* `#FFE25F` `vec3(1.0, 0.8862, 0.3725)` (yellow)\n* `#61C3FF` `vec3(0.3804, 0.7647, 1.0)` (blue)\n\n## Screenshots\n\n![screenshot](http://imgur.com/snv1Axn.png)\n\n![screenshot](http://imgur.com/GJtvajl.png)\n\n![screenshot](http://imgur.com/hegi9dZ.png)\n\n![screenshot](http://imgur.com/QYyBoea.png)\n\n![screenshot](http://imgur.com/MZyhKjs.png)\n"
        },
        {
          "name": "exercises.json",
          "type": "blob",
          "size": 1.388671875,
          "content": "{\n  \"» GETTING STARTED: HELLO, GLSL\": \"intro-0\",\n  \"» GETTING STARTED: GLSL SYNTAX\": \"intro-1\",\n  \"» GETTING STARTED: QUALIFIERS AND BUILTINS\": \"intro-2\",\n  \"» GETTING STARTED: VECTORS\": \"intro-3\",\n  \"» GETTING STARTED: BRANCHING\": \"intro-4\",\n  \"» GETTING STARTED: LOOPS\": \"intro-5\",\n  \"» GETTING STARTED: MATRICES\": \"intro-6\",\n  \"» FRAGMENT SHADERS: THE BASICS\": \"frag-1\",\n  \"» FRAGMENT SHADERS: DISCARD\": \"frag-2\",\n  \"» FRAGMENT SHADERS: UNIFORMS AND TEXTURES\": \"frag-3\",\n  \"» VERTEX SHADERS: THE BASICS\": \"vert-1\",\n  \"» VERTEX SHADERS: VARYING VARIABLES\": \"vert-2\",\n  \"» GEOMETRY: CLIP COORDINATES\": \"geom-1\",\n  \"» GEOMETRY: TRANSLATIONS\": \"geom-2\",\n  \"» GEOMETRY: SCALING\": \"geom-3\",\n  \"» GEOMETRY: REFLECTIONS\": \"geom-4\",\n  \"» GEOMETRY: ROTATIONS\": \"geom-5\",\n  \"» LIGHTING: FLAT SHADING\": \"light-1\",\n  \"» LIGHTING: DIFFUSE SHADING\": \"light-2\",\n  \"» LIGHTING: PHONG SHADING\": \"light-3\",\n  \"» LIGHTING: POINT LIGHTS\": \"light-4\",\n  \"» LIGHTING: MULTIPLE LIGHTS\": \"light-5\",\n  \"» NON-PHOTOREALISTIC RENDERING: CEL SHADING\": \"npr-1\",\n  \"» NON-PHOTOREALISTIC RENDERING: GOOCH SHADING\": \"npr-2\",\n  \"» GPGPU: GAME OF LIFE\": \"gpgpu-1\",\n  \"» GPGPU: HEAT EQUATION\": \"gpgpu-2\",\n  \"» GPGPU: WAVE EQUATION\": \"gpgpu-3\",\n  \"» PRIMITIVES: POINT SPRITES\": \"prims-1\",\n  \"» PRIMITIVES: TRIANGLES\": \"prims-2\",\n  \"» PLAYGROUND: FLOCKING\": \"playground-flocking\",\n  \"» PLAYGROUND: GPGPU\": \"playground-gpgpu\"\n}\n"
        },
        {
          "name": "exercises",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 2.986328125,
          "content": "#!/usr/bin/env node\n\nvar livePort  = Number(process.env.GLSLIFY_LIVE_PORT = 12491)\nvar answers   = require('./lib/create-answers')\nvar exmap     = require('./lib/exercise-map')\nvar live      = require('glslify-live/server')\nvar exercises = require('./exercises')\nvar styles    = require('./style')\nvar opener    = require('opener')\nvar beefy     = require('beefy')\nvar chalk     = require('chalk')\nvar http      = require('http')\nvar path      = require('path')\nvar url       = require('url')\nvar fs        = require('fs')\n\nvar mainPort = 12492\nvar closeWindow = fs.readFileSync(\n  path.join(__dirname, 'lib/close-window.html')\n)\n\nmodule.exports = createServer\n\ncreateServer(process.cwd())\n\nfunction createServer(root) {\n  console.error(fs.readFileSync(\n    __dirname + '/intro.txt', 'utf8'\n  ))\n\n  live().listen(livePort, function(err) {\n    if (err) throw err\n\n    answers(root, function(err) {\n      if (err) throw err\n      console.error('Done!')\n      console.error('Booting up the workshop in your browser in just a second...')\n      console.error('')\n      setTimeout(loadedAnswers, 1000)\n    })\n  })\n\n  function loadedAnswers(err) {\n    if (err) throw err\n    var exNames  = Object.keys(exercises)\n    var exLinks  = exNames.map(function(k) { return exercises[k] })\n    var exSlugs  = exLinks.map(function(k) { return exmap[k] })\n    var exFiles  = exSlugs.map(function(link, i) {\n      var dir = path.resolve(root, link)\n\n      return fs.readdirSync(dir).map(function(name) {\n        return path.resolve(dir, name)\n      })\n    })\n\n    var exRoutes = exLinks.map(function(link, i) {\n      return require('./exercises/' + link + '/server.js')(exFiles[i])\n    })\n\n    var menu = beefy({\n        cwd: path.join(__dirname, 'menu')\n      , entries: ['index.js']\n      , quiet: false\n      , watchify: false\n    })\n\n    http.createServer(function(req, res) {\n      // Force the addition of a query string. This\n      // works around an issue in beefy until it gets fixed:\n      // https://github.com/stackgl/shader-school/issues/107\n      req.url = req.url.indexOf('?') === -1\n        ? req.url + '?'\n        : req.url\n\n      var uri = url.parse(req.url).pathname\n      var paths = uri.split('/').filter(Boolean)\n\n      if (uri === '/style.css') {\n        res.setHeader('content-type', 'text/css')\n        res.end(styles())\n        return\n      }\n\n      if (paths[0] === 'open') {\n        var exPath = exmap[paths[1]]\n        if (exPath) {\n          opener(path.join(root, exPath))\n        }\n        return res.end(closeWindow)\n      }\n\n      for (var i = 0; i < exLinks.length; i++) {\n        if (uri.indexOf(exLinks[i]) === 1) {\n          req.url = req.url\n            .replace(exLinks[i], '')\n            .replace(/\\/+/g, '/')\n\n          return exRoutes[i](req, res)\n        }\n      }\n\n      return menu(req, res)\n    }).listen(mainPort, function(err) {\n      if (err) throw err\n\n      var url = 'http://localhost:'+mainPort\n      opener(url)\n      console.log(chalk.yellow('WORKSHOP URL:'), chalk.underline.blue(url))\n      console.log()\n    })\n  }\n}\n"
        },
        {
          "name": "intro.txt",
          "type": "blob",
          "size": 0.0947265625,
          "content": "\n ==============================\n = ~~~~~ shader-school ~~~~~~ =\n ==============================\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "menu",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.3369140625,
          "content": "{\n  \"name\": \"shader-school\",\n  \"version\": \"1.1.0\",\n  \"description\": \"Self directed GLSL lessons\",\n  \"main\": \"index.js\",\n  \"bin\": \"index.js\",\n  \"scripts\": {\n    \"pack\": \"rm -rf answers; rm -rf node_modules && npm install && npm dedupe && node prepack && find . -type file | grep -v workshop.tar.gz | grep -v .git | tar -cvzf ./workshop.tar.gz -T - && node postpack\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"node start.js\"\n  },\n  \"authors\": [\n    \"Hugh Kennedy <hughskennedy@gmail.com> (http://hughsk.io/)\",\n    \"Mikola Lysenko <mikolalysenko@gmail.com> (http://0fps.net)\",\n    \"Chris Dickinson <chris@neversaw.us> (http://neversaw.us)\"\n  ],\n  \"homepage\": \"http://nodeschool.io/#shader-school\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/stackgl/shader-school.git\"\n  },\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"a-big-triangle\": \"0.0.0\",\n    \"apprise\": \"^1.0.0\",\n    \"autoprefixer\": \"^1.2.0\",\n    \"baboon-image\": \"^1.0.0\",\n    \"beefy\": \"^2.0.2\",\n    \"brfs\": \"^1.1.1\",\n    \"browser-menu\": \"^0.1.0\",\n    \"browserify\": \"^6.3.2\",\n    \"canvas-fit\": \"0.0.0\",\n    \"chalk\": \"^0.4.0\",\n    \"clamp\": \"^1.0.0\",\n    \"conway-hart\": \"^0.1.0\",\n    \"domify\": \"^1.2.2\",\n    \"ecstatic\": \"^1.0.1\",\n    \"envify\": \"^1.2.1\",\n    \"findup-element\": \"0.0.0\",\n    \"frame-debounce\": \"0.0.0\",\n    \"gl-axes\": \"^2.2.3\",\n    \"gl-buffer\": \"^2.0.8\",\n    \"gl-compare\": \"^1.0.0\",\n    \"gl-compare-sidebar\": \"^1.1.1\",\n    \"gl-context\": \"^0.1.0\",\n    \"gl-fbo\": \"^1.1.2\",\n    \"gl-fbo-matching\": \"^1.0.0\",\n    \"gl-matrix\": \"^2.1.0\",\n    \"gl-texture2d\": \"^1.2.0\",\n    \"gl-vao\": \"^1.1.3\",\n    \"glsldoc\": \"0.0.4\",\n    \"glslify\": \"^1.5.0\",\n    \"glslify-live\": \"^2.0.3\",\n    \"google-fonts\": \"0.0.0\",\n    \"highlight.js\": \"^8.0.0\",\n    \"inquirer\": \"^0.5.1\",\n    \"insert-css\": \"^0.1.1\",\n    \"marked\": \"^0.3.2\",\n    \"memoize-sync\": \"0.0.2\",\n    \"mesh-normals\": \"^1.0.0\",\n    \"mkdirp\": \"^0.5.0\",\n    \"mouse-position\": \"^1.0.0\",\n    \"mouse-pressed\": \"0.0.1\",\n    \"ndarray\": \"^1.0.15\",\n    \"ndarray-distance\": \"0.0.0\",\n    \"opener\": \"^1.3.0\",\n    \"quotemeta\": \"0.0.0\",\n    \"raf\": \"^2.0.1\",\n    \"remove-element\": \"0.0.0\",\n    \"rework\": \"^0.20.3\",\n    \"rework-inline\": \"^0.2.0\",\n    \"rework-npm\": \"^0.6.1\",\n    \"right-now\": \"^1.0.0\",\n    \"sidenote\": \"^1.0.0\",\n    \"sliced\": \"0.0.5\",\n    \"stanford-dragon\": \"^1.0.0\",\n    \"wordwrap\": \"0.0.2\",\n    \"xhr\": \"^1.9.0\",\n    \"zfill\": \"0.0.2\"\n  }\n}\n"
        },
        {
          "name": "postpack.js",
          "type": "blob",
          "size": 0.20703125,
          "content": "var fs = require('fs')\n\nvar pkg = JSON.parse(fs.readFileSync(\n  __dirname + '/package.json'\n, 'utf8'))\n\ndelete pkg.scripts.postinstall\n\nfs.writeFileSync(__dirname + '/package.json', JSON.stringify(pkg, null, 2))\n"
        },
        {
          "name": "prepack.js",
          "type": "blob",
          "size": 0.2275390625,
          "content": "var fs = require('fs')\n\nvar pkg = JSON.parse(fs.readFileSync(\n  __dirname + '/package.json'\n, 'utf8'))\n\npkg.scripts.postinstall = 'npm rebuild --prefix ./'\n\nfs.writeFileSync(__dirname + '/package.json', JSON.stringify(pkg, null, 2))\n"
        },
        {
          "name": "start.js",
          "type": "blob",
          "size": 0.2626953125,
          "content": "process.env.NODE_ENV = 'development'\n\nvar mkdirp  = require('mkdirp')\nvar path    = require('path')\nvar answers = path.resolve(__dirname, 'answers')\n\n// mkdir answers; cd answers && NODE_ENV=development node ..\nmkdirp.sync(answers)\nprocess.chdir(answers)\nrequire('./')\n"
        },
        {
          "name": "style",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}