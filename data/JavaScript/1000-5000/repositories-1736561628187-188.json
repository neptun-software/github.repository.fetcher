{
  "metadata": {
    "timestamp": 1736561628187,
    "page": 188,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tapio/live-server",
      "stars": 4446,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2412109375,
          "content": "root = true\n\n[*]\nindent_style = tab\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[{package,bower}.json]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0126953125,
          "content": "node_modules\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.060546875,
          "content": "sudo: false\nlanguage: node_js\nnode_js:\n  - \"node\"\n  - \"lts/*\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.669921875,
          "content": "[![view on npm](http://img.shields.io/npm/v/live-server.svg)](https://www.npmjs.org/package/live-server)\n[![npm module downloads per month](http://img.shields.io/npm/dm/live-server.svg)](https://www.npmjs.org/package/live-server)\n[![build status](https://travis-ci.org/tapio/live-server.svg)](https://travis-ci.org/tapio/live-server)\n\nLive Server\n===========\n\nThis is a little development server with live reload capability. Use it for hacking your HTML/JavaScript/CSS files, but not for deploying the final site.\n\nThere are two reasons for using this:\n\n1. AJAX requests don't work with the `file://` protocol due to security restrictions, i.e. you need a server if your site fetches content through JavaScript.\n2. Having the page reload automatically after changes to files can accelerate development.\n\nYou don't need to install any browser plugins or manually add code snippets to your pages for the reload functionality to work, see \"How it works\" section below for more information. If you don't want/need the live reload, you should probably use something even simpler, like the following Python-based one-liner:\n\n\tpython -m SimpleHTTPServer\n\n\nInstallation\n------------\n\nYou need node.js and npm. You should probably install this globally.\n\n**Npm way**\n\n\tnpm install -g live-server\n\n**Manual way**\n\n\tgit clone https://github.com/tapio/live-server\n\tcd live-server\n\tnpm install # Local dependencies if you want to hack\n\tnpm install -g # Install globally\n\n\nUsage from command line\n-----------------------\n\nIssue the command `live-server` in your project's directory. Alternatively you can add the path to serve as a command line parameter.\n\nThis will automatically launch the default browser. When you make a change to any file, the browser will reload the page - unless it was a CSS file in which case the changes are applied without a reload.\n\nCommand line parameters:\n\n* `--port=NUMBER` - select port to use, default: PORT env var or 8080\n* `--host=ADDRESS` - select host address to bind to, default: IP env var or 0.0.0.0 (\"any address\")\n* `--no-browser` - suppress automatic web browser launching\n* `--browser=BROWSER` - specify browser to use instead of system default\n* `--quiet | -q` - suppress logging\n* `--verbose | -V` - more logging (logs all requests, shows all listening IPv4 interfaces, etc.)\n* `--open=PATH` - launch browser to PATH instead of server root\n* `--watch=PATH` - comma-separated string of paths to exclusively watch for changes (default: watch everything)\n* `--ignore=PATH` - comma-separated string of paths to ignore ([anymatch](https://github.com/es128/anymatch)-compatible definition)\n* `--ignorePattern=RGXP` - Regular expression of files to ignore (ie `.*\\.jade`) (**DEPRECATED** in favor of `--ignore`)\n* `--no-css-inject` - reload page on CSS change, rather than injecting changed CSS\n* `--middleware=PATH` - path to .js file exporting a middleware function to add; can be a name without path nor extension to reference bundled middlewares in `middleware` folder\n* `--entry-file=PATH` - serve this file (server root relative) in place of missing files (useful for single page apps)\n* `--mount=ROUTE:PATH` - serve the paths contents under the defined route (multiple definitions possible)\n* `--spa` - translate requests from /abc to /#/abc (handy for Single Page Apps)\n* `--wait=MILLISECONDS` - (default 100ms) wait for all changes, before reloading\n* `--htpasswd=PATH` - Enables http-auth expecting htpasswd file located at PATH\n* `--cors` - Enables CORS for any origin (reflects request origin, requests with credentials are supported)\n* `--https=PATH` - PATH to a HTTPS configuration module\n* `--https-module=MODULE_NAME` - Custom HTTPS module (e.g. `spdy`)\n* `--proxy=ROUTE:URL` - proxy all requests for ROUTE to URL\n* `--help | -h` - display terse usage hint and exit\n* `--version | -v` - display version and exit\n\nDefault options:\n\nIf a file `~/.live-server.json` exists it will be loaded and used as default options for live-server on the command line. See \"Usage from node\" for option names.\n\n\nUsage from node\n---------------\n\n```javascript\nvar liveServer = require(\"live-server\");\n\nvar params = {\n\tport: 8181, // Set the server port. Defaults to 8080.\n\thost: \"0.0.0.0\", // Set the address to bind to. Defaults to 0.0.0.0 or process.env.IP.\n\troot: \"/public\", // Set root directory that's being served. Defaults to cwd.\n\topen: false, // When false, it won't load your browser by default.\n\tignore: 'scss,my/templates', // comma-separated string for paths to ignore\n\tfile: \"index.html\", // When set, serve this file (server root relative) for every 404 (useful for single-page applications)\n\twait: 1000, // Waits for all changes, before reloading. Defaults to 0 sec.\n\tmount: [['/components', './node_modules']], // Mount a directory to a route.\n\tlogLevel: 2, // 0 = errors only, 1 = some, 2 = lots\n\tmiddleware: [function(req, res, next) { next(); }] // Takes an array of Connect-compatible middleware that are injected into the server middleware stack\n};\nliveServer.start(params);\n```\n\nHTTPS\n---------------\n\nIn order to enable HTTPS support, you'll need to create a configuration module.\nThe module must export an object that will be used to configure a HTTPS server.\nThe keys are the same as the keys in `options` for [tls.createServer](https://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener).\n\nFor example:\n```javascript\nvar fs = require(\"fs\");\n\nmodule.exports = {\n\tcert: fs.readFileSync(__dirname + \"/server.cert\"),\n\tkey: fs.readFileSync(__dirname + \"/server.key\"),\n\tpassphrase: \"12345\"\n};\n```\n\nIf using the node API, you can also directly pass a configuration object instead of a path to the module.\n\nHTTP/2\n---------------\n\nTo get HTTP/2 support one can provide a custom HTTPS module via `--https-module` CLI parameter (`httpsModule` option for Node.js script). **Be sure to install the module first.**\nHTTP/2 unencrypted mode is not supported by browsers, thus not supported by `live-server`. See [this question](https://http2.github.io/faq/#does-http2-require-encryption) and [can I use page on HTTP/2](http://caniuse.com/#search=http2) for more details.\n\nFor example from CLI(bash):\n\n\tlive-server \\\n\t\t--https=path/to/https.conf.js \\\n\t\t--https-module=spdy \\\n\t\tmy-app-folder/\n\nTroubleshooting\n---------------\n\n* No reload on changes\n\t* Open your browser's console: there should be a message at the top stating that live reload is enabled. Note that you will need a browser that supports WebSockets. If there are errors, deal with them. If it's still not working, [file an issue](https://github.com/tapio/live-server/issues).\n* Error: watch <PATH> ENOSPC\n\t* See [this suggested solution](http://stackoverflow.com/questions/22475849/node-js-error-enospc/32600959#32600959).\n* Reload works but changes are missing or outdated\n\t* Try using `--wait=MS` option. Where `MS` is time in milliseconds to wait before issuing a reload.\n\nHow it works\n------------\n\nThe server is a simple node app that serves the working directory and its subdirectories. It also watches the files for changes and when that happens, it sends a message through a web socket connection to the browser instructing it to reload. In order for the client side to support this, the server injects a small piece of JavaScript code to each requested html file. This script establishes the web socket connection and listens to the reload requests. CSS files can be refreshed without a full page reload by finding the referenced stylesheets from the DOM and tricking the browser to fetch and parse them again.\n\n\nContributing\n------------\n\nWe welcome contributions! See [CONTRIBUTING.md](.github/CONTRIBUTING.md) for details.\n\n\nVersion history\n---------------\n\n* v1.2.2\n\t- Fix dependency problem\n* v1.2.1\n\t- `--https-module=MODULE_NAME` to specify custom HTTPS module (e.g. `spdy`) (@pavel)\n\t- `--no-css-inject` to reload page on css change instead of injecting the changes (@kylecordes)\n\t- Dependencies updated to get rid of vulnerabilities in deps\n* v1.2.0\n\t- Add `--middleware` parameter to use external middlewares\n\t- `middleware` API parameter now also accepts strings similar to `--middleware`\n\t- Changed file watcher to improve speed (@pavel)\n\t- `--ignore` now accepts regexps and globs, `--ignorePattern` deprecated (@pavel)\n\t- Added `--verbose` cli option (logLevel 3) (@pavel)\n\t\t- Logs all requests, displays warning when can't inject html file, displays all listening IPv4 interfaces...\n\t- HTTPS configuration now also accepts a plain object (@pavel)\n\t- Move `--spa` to a bundled middleware file\n\t- New bundled `spa-no-assets` middleware that works like `spa` but ignores requests with extension\n\t- Allow multiple `--open` arguments (@PirtleShell)\n\t- Inject to `head` if `body` not found (@pmd1991)\n\t- Update dependencies\n* v1.1.0\n\t- Proxy support (@pavel)\n\t- Middleware support (@achandrasekar)\n\t- Dependency updates (@tapio, @rahatarmanahmed)\n\t- Using Travis CI\n* v1.0.0\n\t- HTTPS support (@pavel)\n\t- HTTP Basic authentication support (@hey-johnnypark)\n\t- CORS support (@pavel)\n\t- Support mounting single files (@pavel)\n\t- `--spa` cli option for single page apps, translates requests from /abc to /#/abc (@evanplaice)\n\t- Check `IP` env var for default host (@dotnetCarpenter)\n\t- Fix `ignorePattern` from config file (@cyfersystems)\n\t- Fix test running for Windows (@peterhull90)\n* v0.9.2\n\t- Updated most dependencies to latest versions\n\t- `--quiet` now silences warning about injection failure\n\t- Giving explicit `--watch` paths now disables adding mounted paths to watching\n* v0.9.1\n\t- `--ignorePattern=RGXP` exclude files from watching by regexp (@psi-4ward)\n\t- `--watch=PATH` cli option to only watch given paths\n* v0.9.0\n\t- `--mount=ROUTE:PATH` cli option to specify alternative routes to paths (@pmentz)\n\t- `--browser=BROWSER` cli option to specify browser to use (@sakiv)\n\t- Improved error reporting\n\t- Basic support for injecting the reload code to SVG files (@dotnetCarpenter, @tapio)\n\t- LiveServer.shutdown() function to close down the server and file watchers\n\t- If host parameter is given, use it for browser URL instead of resolved IP\n\t- Initial testing framework (@harrytruong, @evanplaice, @tapio)\n* v0.8.2\n\t- Load initial settings from `~/.live-server.json` if exists (@mikker)\n\t- Allow `--port=0` to select random port (@viqueen)\n\t- Fix injecting when file extension is not lower case (@gusgard)\n\t- Fail gracefully if browser does not support WebSockets (@mattymaloney)\n\t- Switched to a more maintained browser opening library\n* v0.8.1\n\t- Add `--version / -v` command line flags to display version\n\t- Add `--host` cli option to mirror the API parameter\n\t- Once again use 127.0.0.1 instead of 0.0.0.0 as the browser URL\n* v0.8.0\n\t- Support multiple clients simultaneously (@dvv)\n\t- Pick a random available port if the default is in use (@oliverzy, @harrytruong)\n\t- Fix Chrome sometimes not applying CSS changes (@harrytruong)\n\t- `--ignore=PATH` cli option to not watch given server root relative paths (@richardgoater)\n\t- `--entry-file=PATH` cli option to specify file to use when request is not found (@izeau)\n\t- `--wait=MSECS` cli option to wait specified time before reloading (@leolower, @harrytruong)\n* v0.7.1\n\t- Fix hang caused by trying to inject into fragment html files without `</body>`\n\t- `logLevel` parameter in library to control amount of console spam\n\t- `--quiet` cli option to suppress console spam\n\t- `--open=PATH` cli option to launch browser in specified path instead of root (@richardgoater)\n\t- Library's `noBrowser: true` option is deprecated in favor of `open: false`\n* v0.7.0\n\t- API BREAKAGE: LiveServer library now takes parameters in an object\n\t- Add possibility to specify host to the lib\n\t- Only inject to host page when working with web components (e.g. Polymer) (@davej)\n\t- Open browser to 127.0.0.1, as 0.0.0.0 has issues\n\t- `--no-browser` command line flag to suppress browser launch\n\t- `--help` command line flag to display usage\n* v0.6.4\n\t- Allow specifying port from the command line: `live-server --port=3000` (@Pomax)\n\t- Don't inject script as the first thing so that DOCTYPE remains valid (@wmira)\n\t- Be more explicit with listening to all interfaces (@inadarei)\n* v0.6.3\n\t- Fix multiple _cacheOverride parameters polluting css requests\n\t- Don't create global variables in the injected script\n* v0.6.2\n\t- Fix a deprecation warning from `send`\n* v0.6.1\n\t- Republish to fix npm troubles\n* v0.6.0\n\t- Support for using as node library (@dpgraham)\n* v0.5.0\n\t- Watching was broken with new versions of `watchr` > 2.3.3\n\t- Added some logging to console\n* v0.4.0\n\t- Allow specifying directory to serve from command line\n* v0.3.0\n\t- Directory listings\n* v0.2.0\n\t- On-the-fly CSS refresh (no page reload)\n\t- Refactoring\n* v0.1.1\n\t- Documentation and meta tweaks\n* v0.1.0\n\t- Initial release\n\n\nLicense\n-------\n\nUses MIT licensed code from [Connect](https://github.com/senchalabs/connect/) and  [Roots](https://github.com/jenius/roots).\n\n(MIT License)\n\nCopyright (c) 2012 Tapio Vierros\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 11.88671875,
          "content": "#!/usr/bin/env node\nvar fs = require('fs'),\n\tconnect = require('connect'),\n\tserveIndex = require('serve-index'),\n\tlogger = require('morgan'),\n\tWebSocket = require('faye-websocket'),\n\tpath = require('path'),\n\turl = require('url'),\n\thttp = require('http'),\n\tsend = require('send'),\n\topen = require('opn'),\n\tes = require(\"event-stream\"),\n\tos = require('os'),\n\tchokidar = require('chokidar');\nrequire('colors');\n\nvar INJECTED_CODE = fs.readFileSync(path.join(__dirname, \"injected.html\"), \"utf8\");\n\nvar LiveServer = {\n\tserver: null,\n\twatcher: null,\n\tlogLevel: 2\n};\n\nfunction escape(html){\n\treturn String(html)\n\t\t.replace(/&(?!\\w+;)/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;');\n}\n\n// Based on connect.static(), but streamlined and with added code injecter\nfunction staticServer(root) {\n\tvar isFile = false;\n\ttry { // For supporting mounting files instead of just directories\n\t\tisFile = fs.statSync(root).isFile();\n\t} catch (e) {\n\t\tif (e.code !== \"ENOENT\") throw e;\n\t}\n\treturn function(req, res, next) {\n\t\tif (req.method !== \"GET\" && req.method !== \"HEAD\") return next();\n\t\tvar reqpath = isFile ? \"\" : url.parse(req.url).pathname;\n\t\tvar hasNoOrigin = !req.headers.origin;\n\t\tvar injectCandidates = [ new RegExp(\"</body>\", \"i\"), new RegExp(\"</svg>\"), new RegExp(\"</head>\", \"i\")];\n\t\tvar injectTag = null;\n\n\t\tfunction directory() {\n\t\t\tvar pathname = url.parse(req.originalUrl).pathname;\n\t\t\tres.statusCode = 301;\n\t\t\tres.setHeader('Location', pathname + '/');\n\t\t\tres.end('Redirecting to ' + escape(pathname) + '/');\n\t\t}\n\n\t\tfunction file(filepath /*, stat*/) {\n\t\t\tvar x = path.extname(filepath).toLocaleLowerCase(), match,\n\t\t\t\t\tpossibleExtensions = [ \"\", \".html\", \".htm\", \".xhtml\", \".php\", \".svg\" ];\n\t\t\tif (hasNoOrigin && (possibleExtensions.indexOf(x) > -1)) {\n\t\t\t\t// TODO: Sync file read here is not nice, but we need to determine if the html should be injected or not\n\t\t\t\tvar contents = fs.readFileSync(filepath, \"utf8\");\n\t\t\t\tfor (var i = 0; i < injectCandidates.length; ++i) {\n\t\t\t\t\tmatch = injectCandidates[i].exec(contents);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\tinjectTag = match[0];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (injectTag === null && LiveServer.logLevel >= 3) {\n\t\t\t\t\tconsole.warn(\"Failed to inject refresh script!\".yellow,\n\t\t\t\t\t\t\"Couldn't find any of the tags \", injectCandidates, \"from\", filepath);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction error(err) {\n\t\t\tif (err.status === 404) return next();\n\t\t\tnext(err);\n\t\t}\n\n\t\tfunction inject(stream) {\n\t\t\tif (injectTag) {\n\t\t\t\t// We need to modify the length given to browser\n\t\t\t\tvar len = INJECTED_CODE.length + res.getHeader('Content-Length');\n\t\t\t\tres.setHeader('Content-Length', len);\n\t\t\t\tvar originalPipe = stream.pipe;\n\t\t\t\tstream.pipe = function(resp) {\n\t\t\t\t\toriginalPipe.call(stream, es.replace(new RegExp(injectTag, \"i\"), INJECTED_CODE + injectTag)).pipe(resp);\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tsend(req, reqpath, { root: root })\n\t\t\t.on('error', error)\n\t\t\t.on('directory', directory)\n\t\t\t.on('file', file)\n\t\t\t.on('stream', inject)\n\t\t\t.pipe(res);\n\t};\n}\n\n/**\n * Rewrite request URL and pass it back to the static handler.\n * @param staticHandler {function} Next handler\n * @param file {string} Path to the entry point file\n */\nfunction entryPoint(staticHandler, file) {\n\tif (!file) return function(req, res, next) { next(); };\n\n\treturn function(req, res, next) {\n\t\treq.url = \"/\" + file;\n\t\tstaticHandler(req, res, next);\n\t};\n}\n\n/**\n * Start a live server with parameters given as an object\n * @param host {string} Address to bind to (default: 0.0.0.0)\n * @param port {number} Port number (default: 8080)\n * @param root {string} Path to root directory (default: cwd)\n * @param watch {array} Paths to exclusively watch for changes\n * @param ignore {array} Paths to ignore when watching files for changes\n * @param ignorePattern {regexp} Ignore files by RegExp\n * @param noCssInject Don't inject CSS changes, just reload as with any other file change\n * @param open {(string|string[])} Subpath(s) to open in browser, use false to suppress launch (default: server root)\n * @param mount {array} Mount directories onto a route, e.g. [['/components', './node_modules']].\n * @param logLevel {number} 0 = errors only, 1 = some, 2 = lots\n * @param file {string} Path to the entry point file\n * @param wait {number} Server will wait for all changes, before reloading\n * @param htpasswd {string} Path to htpasswd file to enable HTTP Basic authentication\n * @param middleware {array} Append middleware to stack, e.g. [function(req, res, next) { next(); }].\n */\nLiveServer.start = function(options) {\n\toptions = options || {};\n\tvar host = options.host || '0.0.0.0';\n\tvar port = options.port !== undefined ? options.port : 8080; // 0 means random\n\tvar root = options.root || process.cwd();\n\tvar mount = options.mount || [];\n\tvar watchPaths = options.watch || [root];\n\tLiveServer.logLevel = options.logLevel === undefined ? 2 : options.logLevel;\n\tvar openPath = (options.open === undefined || options.open === true) ?\n\t\t\"\" : ((options.open === null || options.open === false) ? null : options.open);\n\tif (options.noBrowser) openPath = null; // Backwards compatibility with 0.7.0\n\tvar file = options.file;\n\tvar staticServerHandler = staticServer(root);\n\tvar wait = options.wait === undefined ? 100 : options.wait;\n\tvar browser = options.browser || null;\n\tvar htpasswd = options.htpasswd || null;\n\tvar cors = options.cors || false;\n\tvar https = options.https || null;\n\tvar proxy = options.proxy || [];\n\tvar middleware = options.middleware || [];\n\tvar noCssInject = options.noCssInject;\n\tvar httpsModule = options.httpsModule;\n\n\tif (httpsModule) {\n\t\ttry {\n\t\t\trequire.resolve(httpsModule);\n\t\t} catch (e) {\n\t\t\tconsole.error((\"HTTPS module \\\"\" + httpsModule + \"\\\" you've provided was not found.\").red);\n\t\t\tconsole.error(\"Did you do\", \"\\\"npm install \" + httpsModule + \"\\\"?\");\n\t\t\treturn;\n\t\t}\n\t} else {\n\t\thttpsModule = \"https\";\n\t}\n\n\t// Setup a web server\n\tvar app = connect();\n\n\t// Add logger. Level 2 logs only errors\n\tif (LiveServer.logLevel === 2) {\n\t\tapp.use(logger('dev', {\n\t\t\tskip: function (req, res) { return res.statusCode < 400; }\n\t\t}));\n\t// Level 2 or above logs all requests\n\t} else if (LiveServer.logLevel > 2) {\n\t\tapp.use(logger('dev'));\n\t}\n\tif (options.spa) {\n\t\tmiddleware.push(\"spa\");\n\t}\n\t// Add middleware\n\tmiddleware.map(function(mw) {\n\t\tif (typeof mw === \"string\") {\n\t\t\tvar ext = path.extname(mw).toLocaleLowerCase();\n\t\t\tif (ext !== \".js\") {\n\t\t\t\tmw = require(path.join(__dirname, \"middleware\", mw + \".js\"));\n\t\t\t} else {\n\t\t\t\tmw = require(mw);\n\t\t\t}\n\t\t}\n\t\tapp.use(mw);\n\t});\n\n\t// Use http-auth if configured\n\tif (htpasswd !== null) {\n\t\tvar auth = require('http-auth');\n\t\tvar basic = auth.basic({\n\t\t\trealm: \"Please authorize\",\n\t\t\tfile: htpasswd\n\t\t});\n\t\tapp.use(auth.connect(basic));\n\t}\n\tif (cors) {\n\t\tapp.use(require(\"cors\")({\n\t\t\torigin: true, // reflecting request origin\n\t\t\tcredentials: true // allowing requests with credentials\n\t\t}));\n\t}\n\tmount.forEach(function(mountRule) {\n\t\tvar mountPath = path.resolve(process.cwd(), mountRule[1]);\n\t\tif (!options.watch) // Auto add mount paths to wathing but only if exclusive path option is not given\n\t\t\twatchPaths.push(mountPath);\n\t\tapp.use(mountRule[0], staticServer(mountPath));\n\t\tif (LiveServer.logLevel >= 1)\n\t\t\tconsole.log('Mapping %s to \"%s\"', mountRule[0], mountPath);\n\t});\n\tproxy.forEach(function(proxyRule) {\n\t\tvar proxyOpts = url.parse(proxyRule[1]);\n\t\tproxyOpts.via = true;\n\t\tproxyOpts.preserveHost = true;\n\t\tapp.use(proxyRule[0], require('proxy-middleware')(proxyOpts));\n\t\tif (LiveServer.logLevel >= 1)\n\t\t\tconsole.log('Mapping %s to \"%s\"', proxyRule[0], proxyRule[1]);\n\t});\n\tapp.use(staticServerHandler) // Custom static server\n\t\t.use(entryPoint(staticServerHandler, file))\n\t\t.use(serveIndex(root, { icons: true }));\n\n\tvar server, protocol;\n\tif (https !== null) {\n\t\tvar httpsConfig = https;\n\t\tif (typeof https === \"string\") {\n\t\t\thttpsConfig = require(path.resolve(process.cwd(), https));\n\t\t}\n\t\tserver = require(httpsModule).createServer(httpsConfig, app);\n\t\tprotocol = \"https\";\n\t} else {\n\t\tserver = http.createServer(app);\n\t\tprotocol = \"http\";\n\t}\n\n\t// Handle server startup errors\n\tserver.addListener('error', function(e) {\n\t\tif (e.code === 'EADDRINUSE') {\n\t\t\tvar serveURL = protocol + '://' + host + ':' + port;\n\t\t\tconsole.log('%s is already in use. Trying another port.'.yellow, serveURL);\n\t\t\tsetTimeout(function() {\n\t\t\t\tserver.listen(0, host);\n\t\t\t}, 1000);\n\t\t} else {\n\t\t\tconsole.error(e.toString().red);\n\t\t\tLiveServer.shutdown();\n\t\t}\n\t});\n\n\t// Handle successful server\n\tserver.addListener('listening', function(/*e*/) {\n\t\tLiveServer.server = server;\n\n\t\tvar address = server.address();\n\t\tvar serveHost = address.address === \"0.0.0.0\" ? \"127.0.0.1\" : address.address;\n\t\tvar openHost = host === \"0.0.0.0\" ? \"127.0.0.1\" : host;\n\n\t\tvar serveURL = protocol + '://' + serveHost + ':' + address.port;\n\t\tvar openURL = protocol + '://' + openHost + ':' + address.port;\n\n\t\tvar serveURLs = [ serveURL ];\n\t\tif (LiveServer.logLevel > 2 && address.address === \"0.0.0.0\") {\n\t\t\tvar ifaces = os.networkInterfaces();\n\t\t\tserveURLs = Object.keys(ifaces)\n\t\t\t\t.map(function(iface) {\n\t\t\t\t\treturn ifaces[iface];\n\t\t\t\t})\n\t\t\t\t// flatten address data, use only IPv4\n\t\t\t\t.reduce(function(data, addresses) {\n\t\t\t\t\taddresses.filter(function(addr) {\n\t\t\t\t\t\treturn addr.family === \"IPv4\";\n\t\t\t\t\t}).forEach(function(addr) {\n\t\t\t\t\t\tdata.push(addr);\n\t\t\t\t\t});\n\t\t\t\t\treturn data;\n\t\t\t\t}, [])\n\t\t\t\t.map(function(addr) {\n\t\t\t\t\treturn protocol + \"://\" + addr.address + \":\" + address.port;\n\t\t\t\t});\n\t\t}\n\n\t\t// Output\n\t\tif (LiveServer.logLevel >= 1) {\n\t\t\tif (serveURL === openURL)\n\t\t\t\tif (serveURLs.length === 1) {\n\t\t\t\t\tconsole.log((\"Serving \\\"%s\\\" at %s\").green, root, serveURLs[0]);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log((\"Serving \\\"%s\\\" at\\n\\t%s\").green, root, serveURLs.join(\"\\n\\t\"));\n\t\t\t\t}\n\t\t\telse\n\t\t\t\tconsole.log((\"Serving \\\"%s\\\" at %s (%s)\").green, root, openURL, serveURL);\n\t\t}\n\n\t\t// Launch browser\n\t\tif (openPath !== null)\n\t\t\tif (typeof openPath === \"object\") {\n\t\t\t\topenPath.forEach(function(p) {\n\t\t\t\t\topen(openURL + p, {app: browser});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\topen(openURL + openPath, {app: browser});\n\t\t\t}\n\t});\n\n\t// Setup server to listen at port\n\tserver.listen(port, host);\n\n\t// WebSocket\n\tvar clients = [];\n\tserver.addListener('upgrade', function(request, socket, head) {\n\t\tvar ws = new WebSocket(request, socket, head);\n\t\tws.onopen = function() { ws.send('connected'); };\n\n\t\tif (wait > 0) {\n\t\t\t(function() {\n\t\t\t\tvar wssend = ws.send;\n\t\t\t\tvar waitTimeout;\n\t\t\t\tws.send = function() {\n\t\t\t\t\tvar args = arguments;\n\t\t\t\t\tif (waitTimeout) clearTimeout(waitTimeout);\n\t\t\t\t\twaitTimeout = setTimeout(function(){\n\t\t\t\t\t\twssend.apply(ws, args);\n\t\t\t\t\t}, wait);\n\t\t\t\t};\n\t\t\t})();\n\t\t}\n\n\t\tws.onclose = function() {\n\t\t\tclients = clients.filter(function (x) {\n\t\t\t\treturn x !== ws;\n\t\t\t});\n\t\t};\n\n\t\tclients.push(ws);\n\t});\n\n\tvar ignored = [\n\t\tfunction(testPath) { // Always ignore dotfiles (important e.g. because editor hidden temp files)\n\t\t\treturn testPath !== \".\" && /(^[.#]|(?:__|~)$)/.test(path.basename(testPath));\n\t\t}\n\t];\n\tif (options.ignore) {\n\t\tignored = ignored.concat(options.ignore);\n\t}\n\tif (options.ignorePattern) {\n\t\tignored.push(options.ignorePattern);\n\t}\n\t// Setup file watcher\n\tLiveServer.watcher = chokidar.watch(watchPaths, {\n\t\tignored: ignored,\n\t\tignoreInitial: true\n\t});\n\tfunction handleChange(changePath) {\n\t\tvar cssChange = path.extname(changePath) === \".css\" && !noCssInject;\n\t\tif (LiveServer.logLevel >= 1) {\n\t\t\tif (cssChange)\n\t\t\t\tconsole.log(\"CSS change detected\".magenta, changePath);\n\t\t\telse console.log(\"Change detected\".cyan, changePath);\n\t\t}\n\t\tclients.forEach(function(ws) {\n\t\t\tif (ws)\n\t\t\t\tws.send(cssChange ? 'refreshcss' : 'reload');\n\t\t});\n\t}\n\tLiveServer.watcher\n\t\t.on(\"change\", handleChange)\n\t\t.on(\"add\", handleChange)\n\t\t.on(\"unlink\", handleChange)\n\t\t.on(\"addDir\", handleChange)\n\t\t.on(\"unlinkDir\", handleChange)\n\t\t.on(\"ready\", function () {\n\t\t\tif (LiveServer.logLevel >= 1)\n\t\t\t\tconsole.log(\"Ready for changes\".cyan);\n\t\t})\n\t\t.on(\"error\", function (err) {\n\t\t\tconsole.log(\"ERROR:\".red, err);\n\t\t});\n\n\treturn server;\n};\n\nLiveServer.shutdown = function() {\n\tvar watcher = LiveServer.watcher;\n\tif (watcher) {\n\t\twatcher.close();\n\t}\n\tvar server = LiveServer.server;\n\tif (server)\n\t\tserver.close();\n};\n\nmodule.exports = LiveServer;\n"
        },
        {
          "name": "injected.html",
          "type": "blob",
          "size": 1.1533203125,
          "content": "<!-- Code injected by live-server -->\n<script type=\"text/javascript\">\n\t// <![CDATA[  <-- For SVG support\n\tif ('WebSocket' in window) {\n\t\t(function() {\n\t\t\tfunction refreshCSS() {\n\t\t\t\tvar sheets = [].slice.call(document.getElementsByTagName(\"link\"));\n\t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n\t\t\t\tfor (var i = 0; i < sheets.length; ++i) {\n\t\t\t\t\tvar elem = sheets[i];\n\t\t\t\t\thead.removeChild(elem);\n\t\t\t\t\tvar rel = elem.rel;\n\t\t\t\t\tif (elem.href && typeof rel != \"string\" || rel.length == 0 || rel.toLowerCase() == \"stylesheet\") {\n\t\t\t\t\t\tvar url = elem.href.replace(/(&|\\?)_cacheOverride=\\d+/, '');\n\t\t\t\t\t\telem.href = url + (url.indexOf('?') >= 0 ? '&' : '?') + '_cacheOverride=' + (new Date().valueOf());\n\t\t\t\t\t}\n\t\t\t\t\thead.appendChild(elem);\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';\n\t\t\tvar address = protocol + window.location.host + window.location.pathname + '/ws';\n\t\t\tvar socket = new WebSocket(address);\n\t\t\tsocket.onmessage = function(msg) {\n\t\t\t\tif (msg.data == 'reload') window.location.reload();\n\t\t\t\telse if (msg.data == 'refreshcss') refreshCSS();\n\t\t\t};\n\t\t\tconsole.log('Live reload enabled.');\n\t\t})();\n\t}\n\t// ]]>\n</script>\n"
        },
        {
          "name": "live-server.js",
          "type": "blob",
          "size": 5.03125,
          "content": "#!/usr/bin/env node\nvar path = require('path');\nvar fs = require('fs');\nvar assign = require('object-assign');\nvar liveServer = require(\"./index\");\n\nvar opts = {\n\thost: process.env.IP,\n\tport: process.env.PORT,\n\topen: true,\n\tmount: [],\n\tproxy: [],\n\tmiddleware: [],\n\tlogLevel: 2,\n};\n\nvar homeDir = process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME'];\nvar configPath = path.join(homeDir, '.live-server.json');\nif (fs.existsSync(configPath)) {\n\tvar userConfig = fs.readFileSync(configPath, 'utf8');\n\tassign(opts, JSON.parse(userConfig));\n\tif (opts.ignorePattern) opts.ignorePattern = new RegExp(opts.ignorePattern);\n}\n\nfor (var i = process.argv.length - 1; i >= 2; --i) {\n\tvar arg = process.argv[i];\n\tif (arg.indexOf(\"--port=\") > -1) {\n\t\tvar portString = arg.substring(7);\n\t\tvar portNumber = parseInt(portString, 10);\n\t\tif (portNumber === +portString) {\n\t\t\topts.port = portNumber;\n\t\t\tprocess.argv.splice(i, 1);\n\t\t}\n\t}\n\telse if (arg.indexOf(\"--host=\") > -1) {\n\t\topts.host = arg.substring(7);\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg.indexOf(\"--open=\") > -1) {\n\t\tvar open = arg.substring(7);\n\t\tif (open.indexOf('/') !== 0) {\n\t\t\topen = '/' + open;\n\t\t}\n\t\tswitch (typeof opts.open) {\n\t\t\tcase \"boolean\":\n\t\t\t\topts.open = open;\n\t\t\t\tbreak;\n\t\t\tcase \"string\":\n\t\t\t\topts.open = [opts.open, open];\n\t\t\t\tbreak;\n\t\t\tcase \"object\":\n\t\t\t\topts.open.push(open);\n\t\t\t\tbreak;\n\t\t}\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg.indexOf(\"--watch=\") > -1) {\n\t\t// Will be modified later when cwd is known\n\t\topts.watch = arg.substring(8).split(\",\");\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg.indexOf(\"--ignore=\") > -1) {\n\t\t// Will be modified later when cwd is known\n\t\topts.ignore = arg.substring(9).split(\",\");\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg.indexOf(\"--ignorePattern=\") > -1) {\n\t\topts.ignorePattern = new RegExp(arg.substring(16));\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg === \"--no-css-inject\") {\n\t\topts.noCssInject = true;\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg === \"--no-browser\") {\n\t\topts.open = false;\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg.indexOf(\"--browser=\") > -1) {\n\t\topts.browser = arg.substring(10).split(\",\");\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg.indexOf(\"--entry-file=\") > -1) {\n\t\tvar file = arg.substring(13);\n\t\tif (file.length) {\n\t\t\topts.file = file;\n\t\t\tprocess.argv.splice(i, 1);\n\t\t}\n\t}\n\telse if (arg === \"--spa\") {\n\t\topts.middleware.push(\"spa\");\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg === \"--quiet\" || arg === \"-q\") {\n\t\topts.logLevel = 0;\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg === \"--verbose\" || arg === \"-V\") {\n\t\topts.logLevel = 3;\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg.indexOf(\"--mount=\") > -1) {\n\t\t// e.g. \"--mount=/components:./node_modules\" will be ['/components', '<process.cwd()>/node_modules']\n\t\t// split only on the first \":\", as the path may contain \":\" as well (e.g. C:\\file.txt)\n\t\tvar match = arg.substring(8).match(/([^:]+):(.+)$/);\n\t\tmatch[2] = path.resolve(process.cwd(), match[2]);\n\t\topts.mount.push([ match[1], match[2] ]);\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg.indexOf(\"--wait=\") > -1) {\n\t\tvar waitString = arg.substring(7);\n\t\tvar waitNumber = parseInt(waitString, 10);\n\t\tif (waitNumber === +waitString) {\n\t\t\topts.wait = waitNumber;\n\t\t\tprocess.argv.splice(i, 1);\n\t\t}\n\t}\n\telse if (arg === \"--version\" || arg === \"-v\") {\n\t\tvar packageJson = require('./package.json');\n\t\tconsole.log(packageJson.name, packageJson.version);\n\t\tprocess.exit();\n\t}\n\telse if (arg.indexOf(\"--htpasswd=\") > -1) {\n\t\topts.htpasswd = arg.substring(11);\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg === \"--cors\") {\n\t\topts.cors = true;\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg.indexOf(\"--https=\") > -1) {\n\t\topts.https = arg.substring(8);\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg.indexOf(\"--https-module=\") > -1) {\n\t\topts.httpsModule = arg.substring(15);\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg.indexOf(\"--proxy=\") > -1) {\n\t\t// split only on the first \":\", as the URL will contain \":\" as well\n\t\tvar match = arg.substring(8).match(/([^:]+):(.+)$/);\n\t\topts.proxy.push([ match[1], match[2] ]);\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg.indexOf(\"--middleware=\") > -1) {\n\t\topts.middleware.push(arg.substring(13));\n\t\tprocess.argv.splice(i, 1);\n\t}\n\telse if (arg === \"--help\" || arg === \"-h\") {\n\t\tconsole.log('Usage: live-server [-v|--version] [-h|--help] [-q|--quiet] [--port=PORT] [--host=HOST] [--open=PATH] [--no-browser] [--browser=BROWSER] [--ignore=PATH] [--ignorePattern=RGXP] [--no-css-inject] [--entry-file=PATH] [--spa] [--mount=ROUTE:PATH] [--wait=MILLISECONDS] [--htpasswd=PATH] [--cors] [--https=PATH] [--https-module=MODULE_NAME] [--proxy=PATH] [PATH]');\n\t\tprocess.exit();\n\t}\n\telse if (arg === \"--test\") {\n\t\t// Hidden param for tests to exit automatically\n\t\tsetTimeout(liveServer.shutdown, 500);\n\t\tprocess.argv.splice(i, 1);\n\t}\n}\n\n// Patch paths\nvar dir = opts.root = process.argv[2] || \"\";\n\nif (opts.watch) {\n\topts.watch = opts.watch.map(function(relativePath) {\n\t\treturn path.join(dir, relativePath);\n\t});\n}\nif (opts.ignore) {\n\topts.ignore = opts.ignore.map(function(relativePath) {\n\t\treturn path.join(dir, relativePath);\n\t});\n}\n\nliveServer.start(opts);\n"
        },
        {
          "name": "middleware",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.3564453125,
          "content": "{\n  \"name\": \"live-server\",\n  \"version\": \"1.2.2\",\n  \"description\": \"simple development http server with live reload capability\",\n  \"keywords\": [\n    \"front-end\",\n    \"development\",\n    \"tool\",\n    \"server\",\n    \"http\",\n    \"cli\"\n  ],\n  \"author\": \"Tapio Vierros\",\n  \"dependencies\": {\n    \"chokidar\": \"^2.0.4\",\n    \"colors\": \"1.4.0\",\n    \"connect\": \"^3.6.6\",\n    \"cors\": \"latest\",\n    \"event-stream\": \"3.3.4\",\n    \"faye-websocket\": \"0.11.x\",\n    \"http-auth\": \"3.1.x\",\n    \"morgan\": \"^1.9.1\",\n    \"object-assign\": \"latest\",\n    \"opn\": \"latest\",\n    \"proxy-middleware\": \"latest\",\n    \"send\": \"latest\",\n    \"serve-index\": \"^1.9.1\"\n  },\n  \"devDependencies\": {\n    \"eslint\": \"^5.9.0\",\n    \"jshint\": \"^2.9.6\",\n    \"mocha\": \"^5.2.0\",\n    \"supertest\": \"^3.3.0\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint live-server.js index.js\",\n    \"hint\": \"jshint live-server.js index.js\",\n    \"test\": \"mocha test --exit && npm run lint\"\n  },\n  \"bin\": {\n    \"live-server\": \"./live-server.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/tapio/live-server.git\"\n  },\n  \"engines\": {\n    \"node\": \">=0.10.0\"\n  },\n  \"preferGlobal\": true,\n  \"license\": \"MIT\",\n  \"eslintConfig\": {\n    \"env\": {\n      \"node\": true\n    },\n    \"rules\": {\n      \"quotes\": 0,\n      \"curly\": 0,\n      \"strict\": 0,\n      \"no-process-exit\": 0,\n      \"eqeqeq\": 1,\n      \"no-unused-vars\": 1,\n      \"no-shadow\": 1\n    }\n  }\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}