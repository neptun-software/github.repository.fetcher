{
  "metadata": {
    "timestamp": 1736561630165,
    "page": 191,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "samyk/evercookie",
      "stars": 4438,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0478515625,
          "content": "evercookie.min.js\n.settings\n.project\n.idea\n*.iml\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 1.2421875,
          "content": "gabrielbauman/evercookie master :: as of now\n\t- updated README.md (gabrielbauman)\n\t- added .gitignore (gabrielbauman)\n\t- fixed cookie domain on non-standard ports (gabrielbauman)\n\t- removed evercookie.min.js to simplify merges (gabrielbauman)\n\t- added domains to standard http cookies (Justin)\n\t- added Java servlet port of PHP components (gabrielbauman)\n\t- added Java applet persistence method, see http://github.com/gabrielbauman/evercookie-applet (gabrielbauman)\n\t- disabled Silverlight auto-upgrade interruption (gabrielbauman)\n\t- fixed Silverlight object appearing on screen (gabrielbauman) \n\t- disabled Install Silverlight link (gabrielbauman)\n\t- removed duplicate/unused evercookie.php (gabrielbauman)\n\t- removed last remaining dependency on jQuery (gabrielbauman)\n\t- added README.md (gabrielbauman)\n\nevercookie 0.4 :: 10/13/2010\n\t- added Silverlight Isolated Storage support\n\t- added window.name storage support\n\t- added standard cache support\n\t- fixed some IE bugs \n\t- fixed LSO bug so data is retrieved on first request\n\t- fixed bug with PNG support\n\t- fixed bug where null/empty values would reset others\n\nevercookie 0.3 :: 09/23/2010\n\t- added ETag storage support\n\t- added IE userData storage support\n\t- added jquery\n\t- various bug fixes\n\t- speed enhancements\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.51953125,
          "content": "Evercookie\n==========\n\nEvercookie is a Javascript API that produces extremely persistent cookies in a\nbrowser. Its goal is to identify a client even after they've removed standard\ncookies, Flash cookies (Local Shared Objects or LSOs), and others.\n\nThis is accomplished by storing the cookie data on as many browser storage\nmechanisms as possible. If cookie data is removed from any of the storage\nmechanisms, evercookie aggressively re-creates it in each mechanism as long as\none is still intact.\n\nIf the Flash LSO, Silverlight or Java mechanism is available, Evercookie can even propagate cookies\nbetween different browsers on the same client machine!\n\nBy [Samy Kamkar](https://samy.pl), with awesome [contributions from others](https://github.com/samyk/evercookie/graphs/contributors)\n\nBrowser Storage Mechanisms\n--------------------------\n\nClient browsers must support as many of the following storage mechanisms as\npossible in order for Evercookie to be effective.\n\n- Standard [HTTP Cookies](https://en.wikipedia.org/wiki/HTTP_cookie)\n- Flash [Local Shared Objects](https://en.wikipedia.org/wiki/Local_Shared_Object)\n- Silverlight [Isolated Storage](http://www.silverlight.net/learn/quickstarts/isolatedstorage/)\n- CSS [History Knocking](https://samy.pl/csshack/)\n- Storing cookies in [HTTP ETags](https://en.wikipedia.org/wiki/HTTP_ETag) ([Backend server](#backend-server) required)\n- Storing cookies in [Web cache](https://en.wikipedia.org/wiki/Web_cache) ([Backend server](#backend-server) required)\n- [HTTP Strict Transport Security (HSTS)](https://sites.google.com/a/chromium.org/dev/Home/chromium-security/client-identification-mechanisms#TOC-Lower-level-protocol-identifiers) Pinning (works in Incognito mode)\n- [window.name caching](https://en.wikipedia.org/wiki/HTTP_cookie#window.name)\n- Internet Explorer [userData storage](http://msdn.microsoft.com/en-us/library/ms531424.aspx)\n- HTML5 [Session Storage](http://dev.w3.org/html5/webstorage/#the-sessionstorage-attribute)\n- HTML5 [Local Storage](http://dev.w3.org/html5/webstorage/#dom-localstorage)\n- HTML5 [Global Storage](https://developer.mozilla.org/en/dom/storage#globalStorage)\n- HTML5 [Database Storage via SQLite](http://dev.w3.org/html5/webdatabase/)\n- HTML5 Canvas - Cookie values stored in RGB data of auto-generated, force-cached PNG images ([Backend server](#backend-server) required)\n- HTML5 [IndexedDB](http://www.w3.org/TR/IndexedDB/)\n- Java [JNLP PersistenceService](http://docs.oracle.com/javase/1.5.0/docs/guide/javaws/jnlp/index.html)\n- Java exploit [CVE-2013-0422](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-0422) - Attempts to escape the applet sandbox and write cookie data directly to the user's hard drive.\n\nTo be implemented someday (perhaps by you?):\n\n- [TLS Session Resumption](https://www.ietf.org/rfc/rfc5077.txt) Identifiers/Tickets (works in Incognito mode)\n- Generating [HTTP Public Key Pinning (HPKP)](https://www.wikiwand.com/en/HTTP_Public_Key_Pinning) certificates per user\n- Caching in [HTTP Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication)\n- Google Gears\n- Using Java to produce a unique key based off of NIC info\n- Other methods? Please comment!\n\nThe Java persistence mechanisms are developed and maintained by [Gabriel Bauman](http://gabrielbauman.com)\n[over here](https://github.com/gabrielbauman/evercookie-applet).\n\nBackend Server\n--------------\nSome of the storage mechanisms require a backend server. This package comes with PHP implementation of the etag, cache and png backend servers.\n- For Node.js version, please visit [node-evercookie](https://github.com/truongsinh/node-evercookie).\n- For Django version, please visit [Django Evercookie](https://github.com/gdmka/django_evercookie)\n\nCaveats\n-------\n\nBe warned! Evercookie can potentially cause problems for you or your users.\n\n- Some storage mechanisms involve loading Silverlight or Flash in the client\n  browser. On some machines this can be a very slow process with lots of disk\n  thrashing. On older mobile devices this can render your site unusable.\n\n- CSS History Knocking can cause a large number of HTTP requests when a cookie\n  is first being set.\n\n- In some circles, it is considered rude to use Evercookie. Consider your\n  reputation and your audience when using Evercookie in production.\n\n- Browser vendors are doing their best to plug many of the holes exploited by\n  Evercookie. This is a good thing for the Internet, but it means what works\n  today may not work so well tomorrow.\n\nYou are responsible for your own decision to use Evercookie. Choose wisely.\n\nGot an idea?\n------------\n\nOpen a pull request!\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "css",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 12.634765625,
          "content": "<html>\n<head>\n<link rel=\"stylesheet\" href=\"css/master.css\" type=\"text/css\">\n<script type=\"text/javascript\" src=\"js/swfobject-2.2.min.js\"></script>\n<script type=\"text/javascript\" src=\"http://www.java.com/js/dtjava.js\"></script>\n<script type=\"text/javascript\" src=\"js/evercookie.js\"></script>\n<title>evercookie - virtually irrevocable persistent cookies</title>\n</head>\n<body>\n\n<div id=\"pagebox1\" align=\"center\">\n<div id=\"pagebox2\">\n<table width=\"728\" border=\"0\" align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"topnavtable\"><tr><td></td></tr></table>\n\n<div id=\"pagecontent\" align=\"left\" style=\"margin-top:5px\">\n<a href=\"http://samy.pl\">samy's home page</a> || <a href=\"http://twitter.com/samykamkar\">follow my twitter</a> || <a href=\"http://namb.la\">blog</a> || <a href=\"mailto:code@samy.pl\">email me</a> || samy kamkar<hr>\n\n<h1>evercookie <small>-- never forget.</small></h1>\n10/10/2010: Reported on by the <a target=_new href=\"http://www.nytimes.com/2010/10/11/business/media/11privacy.html?hp\">New York Times</a>\n\n<PRE>\n\n</PRE>\n<H2>DESCRIPTION</H2><PRE>\n    <i>evercookie</i> is a javascript API available that produces\n    extremely persistent cookies in a browser. Its goal\n    is to identify a client even after they've removed standard\n    cookies, Flash cookies (Local Shared Objects or LSOs), and\n    others.\n\n    evercookie accomplishes this by storing the cookie data in\n    several types of storage mechanisms that are available on\n    the local browser. Additionally, if evercookie has found the\n    user has removed any of the types of cookies in question, it\n    recreates them using each mechanism available.\n\n    Specifically, when creating a new cookie, it uses the\n    following storage mechanisms when available:<b>\n     - Standard <A href=\"http://en.wikipedia.org/wiki/HTTP_cookie\">HTTP Cookies</a>\n     - <a href=\"http://en.wikipedia.org/wiki/Local_Shared_Object\">Local Shared Objects</a> (Flash Cookies)\n     - Silverlight <a href=\"http://www.silverlight.net/learn/quickstarts/isolatedstorage/\">Isolated Storage</a>\n     - Storing cookies in RGB values of auto-generated, force-cached \n        PNGs using HTML5 Canvas tag to read pixels (cookies) back out\n     - Storing cookies in and reading out <a href=\"http://samy.pl/csshack/\">Web History</a>\n     - Storing cookies in HTTP <a href=\"http://en.wikipedia.org/wiki/HTTP_ETag\">ETags</a>\n     - Storing cookies in <a href=\"http://en.wikipedia.org/wiki/Web_cache\">Web cache</a>\n     - <a href=\"http://en.wikipedia.org/wiki/HTTP_cookie#window.name\">window.name</a> caching\n     - Internet Explorer <a href=\"http://msdn.microsoft.com/en-us/library/ms531424(VS.85).aspx\">userData</a> storage\n     - HTML5 <a href=\"http://dev.w3.org/html5/webstorage/#the-sessionstorage-attribute\">Session Storage</a>\n     - HTML5 <a href=\"http://dev.w3.org/html5/webstorage/#dom-localstorage\">Local Storage</a>\n     - HTML5 <a href=\"https://developer.mozilla.org/en/dom/storage#globalStorage\">Global Storage</a>\n     - HTML5 <a href=\"http://dev.w3.org/html5/webdatabase/\">Database Storage</a> via SQLite\n\n    TODO:</b> adding support for:\n     - Caching in <a href=\"http://en.wikipedia.org/wiki/Basic_access_authentication\">HTTP Authentication</a>\n     - Using Java to produce a unique key based off of NIC info\n\n    Got a crazy idea to improve this? <a href=\"mailto:code@samy.pl\">Email me!</a>\n\n</PRE>\n<H2>EXAMPLE</H2><PRE>\n<script>\nvar val = '' + Math.floor(Math.random()*1000);\nvar ec = new evercookie({\n\t/* Options */\n});\n\ngetC(0);\n//setTimeout(getC, 500, 1);\n\nfunction getC(dont)\n{\n\tec.get(\"uid\", function(best, all) {\n\t\tdocument.getElementById('idtag').innerHTML = best;\n\t\tvar txt = document.getElementById('cookies');\n\t\ttxt.innerHTML = '';\n\t\tfor (var item in all)\n\t\t\ttxt.innerHTML += item + ' mechanism: ' + (val == all[item] ? '<b>' + all[item] + '</b>' : all[item]) + '<br>';\n\t\tif (!dont)\n\t\t\tgetC(1);\n\t}, dont);\n}\n</script>\n    <b>Cookie found:</b> <i>uid</i> = <span id='idtag'>currently not set</span>\n\n    Click to create an evercookie. Don't worry, the cookie is a\n    random number between 1 and 1000, not enough for me to track\n    you, just enough to test evercookies.\n    <input type=button value=\"Click to create an evercookie\" onClick=\"document.getElementById('idtag').innerHTML = '*creating*'; document.getElementById('cookies').innerHTML = ''; ec.set('uid', val); setTimeout(getC, 1000, 1); \">\n\n    <div id='cookies'></div>\n    Now, try deleting this \"uid\" cookie anywhere possible, then\n    <input type=button value=\"Click to rediscover cookies\" onClick=\"document.getElementById('idtag').innerHTML = '*checking*'; document.getElementById('cookies').innerHTML = ''; setTimeout(getC, 300);\">\n      or \n    <input type=button value=\"Click to rediscover cookies WITHOUT reactivating deleted cookies\" onClick=\"document.getElementById('idtag').innerHTML = '*checking*'; document.getElementById('cookies').innerHTML = ''; setTimeout(getC, 300, 1);\">\n\n</PRE>\n<H2><a href=\"evercookie-0.4.tgz\">DOWNLOAD</a></H2><PRE>\n    <I>evercookie</I> is written in JavaScript and additionally\n    uses a SWF (Flash) object for the Local Shared Objects and\n    PHPs for the server-side generation of cached PNGs and ETags.\n\n    <B>v0.4 BETA</B>, released 10/13/2010\n            download source <a href=\"evercookie-0.4.tgz\">here</a>\n\n    Or get it from github: <a href=\"http://github.com/samyk/evercookie\">http://github.com/samyk/evercookie</a>\n\n</PRE>\n<H2>FAQ</H2><PRE>\n\t<b>What is the point of evercookie?</b>\n\tEvercookie is designed to make persistent data just that, persistent. By\n\tstoring the same data in several locations that a client can access, if\n\tany of the data is ever lost (for example, by clearing cookies), the data\n\tcan be recovered and then reset and reused.\n\n\tSimply think of it as cookies that just won't go away.\n\n\t<b>PRIVACY CONCERN! How do I stop websites from doing this?</b>\n\tGreat question. So far, I've found that using <a href=\"http://www.apple.com/pro/tips/privacy_safari.html\">Private Browsing</a>\n\tin <a href=\"http://www.apple.com/safari/\">Safari</a> will stop ALL evercookie methods after a browser restart.\n\n\t<b>What if the user deletes their cookies?</b>\n\tThat's the great thing about evercookie. With all the methods available,\n\tcurrently thirteen, it only takes one cookie to remain for most, if not all,\n\tof them to be reset again.\n\n\tFor example, if the user deletes their standard HTTP cookies, LSO data,\n\tand all HTML5 storage, the PNG cookie and history cookies will still\n\texist. Once either of those are discovered, all of the others will\n\tcome back (assuming the browser supports them).\n\n\t<b>Why not use EFF's <a href=\"https://panopticlick.eff.org/\">Panopticlick</a>?</b>\n\tPanopticlick is an awesome idea, however the uniqueness really only\n\thelps in consumer machines and typically not systems running in a\n\tbusiness or corporation. Typically those systems are virtually\n\tidentical and provide no difference in information where a home\n\tuser's laptop would. Evercookie is meant to be able to store the\n\tsame unique data a normal cookie would.\n\n\t<b>Does this work cross-browser?</b>\n\tIf a user gets cookied on one browser and switches to another browser,\n\tas long as they still have the Local Shared Object cookie, the cookie\n\twill reproduce in both browsers.\n\n\t<b>Does the client have to install anything?</b>\n\tNo, the client simply uses the website without even knowing about the\n\tpersistent data being set, just as they would use a website with standard\n\tHTTP cookies.\n\n\t<b>Does the server have to install anything?</b>\n\tThe server must at least have access to the JavaScript evercookie file.\n\tAdditionally, to use Local Shared Object (Flash Cookies) storage, the\n\tevercookie.swf file must be present, and to use the auto-generated PNG\n\tcaching, standard caching and ETag storage mechanisms, PHP must be\n\tinstalled and evercookie_(png|etag|cache).php must be on the server.\n\n\tAll of these are available in the download.\n\n\t<b>Is evercookie open source?</b>\n\tYes, evercookie is open source. The code is in readable format without\n\tany obfuscation. Additionally, the PHP files are open source as is the\n\tFLA (Flash) code used to generate the SWF Flash object. You can compile\n\tthe Flash object yourself or use the pre-compiled version (evercookie.swf).\n\n\t<b>How does the PNG caching work?</b>\n\tWhen evercookie sets a cookie, it accesses evercookie_png.php with a special\n\tHTTP cookie, different than the one used for standard session data. This\n\tspecial cookie is read by the PHP file, and if found, generates a PNG file\n\twhere all the RGB values are set to the equivalent of the session data to\n\tbe stored. Additionally, the PNG is sent back to the client browser with\n\tthe request to cache the file for 20 years.\n\n\tWhen evercookie retrieves this data, it deletes the special HTTP cookie,\n\tthen makes the same request to the same file without any user information.\n\tWhen the PHP script sees it has no information to generate a PNG with, it\n\treturns a forged HTTP response of \"304 Not Modified\" which forces the web\n\tbrowser to access its local cache. The browser then produces the cached\n\timage and then applies it to an HTML5 Canvas tag. Once applied, evercookie\n\treads each pixel of the Canvas tag, extracting the RGB values, and thus\n\tproducing the initial cookie data that was stored.\n\n\t<b>How does the Web History storage work?</b>\n\tWhen evercookie sets a cookie, assuming the Web History caching is enabled,\n\tit Base64 encodes the data to be stored. Let's assume this data is \"bcde\"\n\tin Base64. Evercookie then accesses the following URLs in the background:\n\t\tgoogle.com/evercookie/cache/b\n\t\tgoogle.com/evercookie/cache/bc\n\t\tgoogle.com/evercookie/cache/bcd\n\t\tgoogle.com/evercookie/cache/bcde\n\t\tgoogle.com/evercookie/cache/bcde-\n\tThese URLs are now stored in history.\n\n\tWhen checking for a cookie, evercookie loops through all the possible Base64\n\tcharacters on google.com/evercookie/cache/, starting with \"a\" and moving up,\n\tbut only for a single character. Once it sees a URL that was accessed, it\n\tattempts to brute force the next letter. This is actually extremely fast\n\tbecause <b>no requests</b> are made to theserver. The history lookups are simply\n\tlocally in JavaScript using the <a href=\"http://samy.pl/csshack/\">CSS History Knocker</a>. Evercookie knows it has\n\treached the end of the string as soon as it finds a URL that ends in \"-\".\n</PRE>\n<H2>USAGE</H2><PRE>\n    <b>&lt;script type=\"text/javascript\" src=\"jquery-1.4.2.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"swfobject-2.2.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"evercookie.js\"&gt;&lt;/script&gt;\n\n    &lt;script&gt;\n    var ec = new evercookie({\n    \tbaseurl: '/test', </b><i>http://localhost/test</i><b>\n    \tasseturi: '/assets', </b><i>http://localhost/test/assets</i><b>\n    \tphpuri: '/php' </b><i>http://localhost/test/php</i><b>\n    });</b>\n    \n    // set a cookie \"id\" to \"12345\"\n    // usage: ec.set(key, value)\n    <b>ec.set(\"id\", \"12345\");</b>\n    \n    // retrieve a cookie called \"id\" (simply)\n    <b>ec.get(\"id\", function(value) { alert(\"Cookie value is \" + value) });</b>\n\n    // or use a more advanced callback function for getting our cookie\n    // the cookie value is the first param\n    // an object containing the different storage methods\n    // and returned cookie values is the second parameter\n    <b>function getCookie(best_candidate, all_candidates)\n    {\n        alert(\"The retrieved cookie is: \" + best_candidate + \"\\n\" +\n        \t\"You can see what each storage mechanism returned \" +\n    \t\t\"by looping through the all_candidates object.\");\n\n    \tfor (var item in all_candidates)\n    \t\tdocument.write(\"Storage mechanism \" + item +\n    \t\t\t\" returned: \" + all_candidates[item] + \"&lt;br&gt;\");\n    }\n    ec.get(\"id\", getCookie);</b>\n    \n    // we look for \"candidates\" based off the number of \"cookies\" that\n    // come back matching since it's possible for mismatching cookies.\n    // the best candidate is most likely the correct one\n    <b>&lt;/script&gt;</b>\n\n</PRE>\n<H2>SEE ALSO</H2><PRE>\n    <B><a href=\"http://samy.pl/csshack/\">csshack</a>, <a href=\"http://samy.pl\">best website ever</a></B>\n\n</PRE>\n<H2>BUGS</H2><PRE>\n    See <b>CONTACT</b>.\n\n</PRE>\n<H2>CONTACT</H2><PRE>\n    Questions or comments, email me: <B><a href=\"mailto:code@samy.pl\">code@samy.pl</a></B>.\n\n    Visit <a href=\"http://samy.pl\">http://samy.pl</a> for more awesome stuff.\n\n</PRE>\n<H2>evercookie, by <a href=\"mailto:code@samy.pl\">Samy Kamkar</a>, 09/20/2010</h2>\n</div>\n</div></div>\n<script type=\"text/javascript\">\nvar gaJsHost = ((\"https:\" == document.location.protocol) ? \"https://ssl.\" : \"http://www.\");\ndocument.write(unescape(\"%3Cscript src='\" + gaJsHost + \"google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E\"));\n</script>\n<script type=\"text/javascript\">\ntry {\nvar pageTracker = _gat._getTracker(\"UA-6127617-2\");\npageTracker._trackPageview();\n} catch(err) {}</script>\n</body>\n</html>\n"
        },
        {
          "name": "js",
          "type": "tree",
          "content": null
        },
        {
          "name": "php",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}