{
  "metadata": {
    "timestamp": 1736562101189,
    "page": 888,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "CanadaHonk/porffor",
      "stars": 3171,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2236328125,
          "content": "# EditorConfig is awesome: https://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = false"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1083984375,
          "content": "*.wasm\n*.csv\n*.txt\n*.exe\n\nnode_modules\npackage-lock.json\n\n.repl_history\n\n/test262/test262\n/test262/results.json"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.1083984375,
          "content": "/.github\n/bench\n/demos\n/test262\n\nlogo.png\nindex.html\nCNAME\npublish.js\n\n/.repl_history\n*.wasm\n*.csv\n*.txt\n*.exe\n"
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.0107421875,
          "content": "porffor.dev"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 14.3447265625,
          "content": "# Contributing to Porffor\n\nHello! Thanks for your potential interest in contributing to Porffor :)\n\nThis document hopes to help you understand Porffor-specific TS, specifically for writing built-ins (inside `compiler/builtins/*.ts` eg `btoa`, `String.prototype.trim`, ...). This guide isn't really meant for modifying the compiler itself yet (eg `compiler/codegen.js`), as built-ins are ~easier to implement and more useful at the moment.\n\nI mostly presume decent JS knowledge, with some basic TS too but nothing complicated. Knowing low-level stuff generally (pointers, etc) and/or Wasm (bytecode) is also a plus but hopefully not required.\n\nIf you have any questions you can ask in [the Porffor Discord](https://discord.gg/6crs9Znx9R), please feel free to ask anything if you get stuck :)\n\nPlease read this entire document before beginning as there are important things throughout.\n\n<br>\n\n## Setup\n\n1. Clone the repo and enter the repo (`git clone https://github.com/CanadaHonk/porffor.git`)\n2. `npm install`\n\nThe repo comes with easy alias scripts for Unix and Windows, which you can use like so:\n- Unix: `./porf path/to/script.js`\n- Windows: `.\\porf path/to/script.js`\n\nYou can also swap out `node` in the alias to use another runtime like Deno (`deno run -A ...`) or Bun (`bun ...`), or just use it yourself (eg `node runner/index.js ...`, `bun runner/index.js ...`). Node, Deno, Bun should work.\n\n### Precompile\n\n**If you update any file inside `compiler/builtins` you will need to do this for it to update inside Porffor otherwise your changes will have no effect.** Run `./porf precompile` to precompile. It may error during this, if so, you might have an error in your code or there could be a compiler error with Porffor (feel free to ask for help as soon as you encounter any errors with it).\n\n<br>\n\n## Types\n\nPorffor has usual JS types (or at least the ones it supports), but also internal types for various reasons.\n\n### ByteString\n\nThe most important and widely used internal type is ByteString. Regular strings in Porffor are UTF-16 encoded, so each character uses 2 bytes. ByteStrings are special strings which are used when the characters in a string only use ASCII/LATIN-1 characters, so the lower byte of the UTF-16 characters are unused. Instead of wasting memory with all the unused memory, ByteStrings instead use 1 byte per character. This halves memory usage of such strings and also makes operating on them faster. The downside is that many Porffor built-ins have to be written twice, slightly different, for both `String` and `ByteString` types.\n\n### i32\n\nThis is complicated internally but essentially, only use it for pointers. (This is not signed or unsigned, instead it is the Wasm valtype `i32` so the signage is ~instruction dependant).\n\n<br>\n\n## Pointers\n\nPointers are the main (and most difficult) unique feature you ~need to understand when dealing with objects (arrays, strings, ...).\n\nWe'll explain things per common usage you will likely need to know:\n\n## Commonly used Wasm code\n\n### Get a pointer\n\n```js\nPorffor.wasm`local.get ${foobar}`\n```\n\nGets the pointer to the variable `foobar`. You don't really need to worry about how it works in detail, but essentially it gets the pointer as a number (type) instead of as the object it is.\n\n### Store a character in a ByteString\n\n```js\nPorffor.wasm.i32.store8(pointer, characterCode, 0, 4)\n```\n\nStores the character code `characterCode` at the pointer `pointer` **for a ByteString**.[^1]\n\n### Store a character in a String\n\n```js\nPorffor.wasm.i32.store16(pointer, characterCode, 0, 4)\n```\n\nStores the character code `characterCode` at the pointer `pointer` **for a String**.[^1]\n\n### Load a character from a ByteString\n\n```js\nPorffor.wasm.i32.load8_u(pointer, 0, 4)\n```\n\nLoads the character code at the pointer `pointer` **for a ByteString**.[^1]\n\n### Load a character from a String\n\n```js\nPorffor.wasm.i32.load16_u(pointer, 0, 4)\n```\n\nLoads the character code at the pointer `pointer` **for a String**.[^1]\n\n### Manually store the length of an object\n\n```js\nPorffor.wasm.i32.store(pointer, length, 0, 0)\n```\n\nStores the length `length` at pointer `pointer`, setting the length of an object. This is mostly unneeded today as you can just do `obj.length = length`. [^1]\n\n<br>\n\n## Example\n\nHere is the code for `ByteString.prototype.toUpperCase()`:\n\n```ts\nexport const __ByteString_prototype_toUpperCase = (_this: bytestring) => {\n  const len: i32 = _this.length;\n\n  let out: bytestring = '';\n  Porffor.wasm.i32.store(out, len, 0, 0);\n\n  let i: i32 = Porffor.wasm`local.get ${_this}`,\n      j: i32 = Porffor.wasm`local.get ${out}`;\n\n  const endPtr: i32 = i + len;\n  while (i < endPtr) {\n    let chr: i32 = Porffor.wasm.i32.load8_u(i++, 0, 4);\n\n    if (chr >= 97) if (chr <= 122) chr -= 32;\n\n    Porffor.wasm.i32.store8(j++, chr, 0, 4);\n  }\n\n  return out;\n};\n```\n\nNow let's go through it section by section:\n\n```ts\nexport const __ByteString_prototype_toUpperCase = (_this: bytestring) => {\n```\n\nHere we define a built-in for Porffor. Notably:\n- We do not use `a.b.c`, instead we use `__a_b_c`\n- We use a `_this` argument, as `this` does not exist in Porffor yet\n- We use an arrow function\n- We do not set a return type as prototype methods cannot use them currently or errors can happen.\n\n---\n\n```ts\n  const len: i32 = _this.length;\n\n  let out: bytestring = '';\n  Porffor.wasm.i32.store(out, len, 0, 0);\n```\n\nThis sets up the `out` variable we are going to write to for the output of this function. We set the length in advance to be the same as `_this`, as `foo.length == foo.toLowerCase().length`, because we will later be manually writing to it using Wasm intrinsics, which will not update the length themselves.\n\n---\n\n```ts\n  let i: i32 = Porffor.wasm`local.get ${_this}`,\n      j: i32 = Porffor.wasm`local.get ${out}`;\n```\n\nGet the pointers for `_this` and `out` as `i32`s (~`number`s).\n\n---\n\n```ts\n  const endPtr: i32 = i + len;\n  while (i < endPtr) {\n```\n\nSet up an end target pointer as the pointer variable for `_this` plus the length of it. Loop below until that pointer reaches the end target, so we iterate through the entire string.\n\n---\n\n```ts\n    let chr: i32 = Porffor.wasm.i32.load8_u(i++, 0, 4);\n```\n\nRead the character (code) from the current `_this` pointer variable, and increment it so next iteration it reads the next character, etc.\n\n---\n\n```ts\n    if (chr >= 97) if (chr <= 122) chr -= 32;\n```\n\nIf the character code is >= 97 (`a`) and <= 122 (`z`), decrease it by 32, making it an upper case character. eg: 97 (`a`) - 32 = 65 (`A`).\n\n---\n\n```ts\n    Porffor.wasm.i32.store8(j++, chr, 0, 4);\n```\n\nStore the character code into the `out` pointer variable, and increment it.\n\n<br>\n\n## Porffor-specific TS notes\n\n- For declaring variables, you must use explicit type annotations currently (eg `let a: number = 1`, not `let a = 1`).\n- You might spot `Porffor.fastOr`/`Porffor.fastAnd`, these are non-short circuiting versions of `||`/`&&`, taking any number of conditions as arguments. You shouldn't don't need to use or worry about these.\n- Attempt to avoid object/string/array-heavy code and use more variables instead if possible, easier on memory and CPU/perf.\n- Do not set a return type for prototype methods, it can cause errors/unexpected results.\n- You cannot use other functions in the file not exported, or variables not inside the current function.\n- `if (...)` uses a fast truthy implementation which is not spec-compliant as most conditions should be strictly checked. To use spec-compliant behavior, use `if (!!...)`.\n- For object (string/array/etc) literals, you must use a variable eg `const out: bytestring = 'foobar'; console.log(out);` instead of `console.log('foobar')` due to precompile's allocator constraints.\n- You should generally use non-strict equality ops (`==`/`!=`).\n\n<br>\n\n### Porffor.wasm\nThis is a macro that is essentially equivalent to C's `asm` macro. It allows you to write inline Wasm bytecode in a similar format to [WAT](https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format).\n\nLet's look at an example to better illustrate how the format works.\n\n```ts\nexport const add_i32 = (a: any, b: any) => {\n  Porffor.wasm`\n  local aCasted i32\n  local bCasted i32\n  returns i32 i32\n\n  ;; if both types are number\n  local.get ${a+1}\n  i32.const 1\n  i32.eq\n  local.get ${b+1}\n  i32.const 1\n  i32.eq\n  i32.and\n  if\n    local.get ${a}\n    i32.from\n    local.set aCasted\n\n    local.get ${b}\n    i32.from\n    local.set bCasted\n\n    local.get aCasted\n    local.get bCasted\n    i32.add\n    i32.const 1\n    return\n  end\n\n  ;; return (0, 0) otherwise\n  i32.const 0\n  i32.const 0\n  return`;\n}\n```\n\n---\n\n```\nlocal aCasted i32\nlocal bCasted i32\n```\n\nHere we define two locals, which you can think of as typed variables. Here both of them have the type of `i32`, which was explained above. This type can also be `f64` or `i64`, which are doubles and 64-bit integers respectively.\n\n---\n\n```\nreturns i32 i32\n```\n\nThis sets the return type of the function, what the stack must look like before a `return` instruction. Normally Porffor functions have the return type `(f64, i32)`, which represents the valtype (usually f64) and an i32 type.\n\n> [!WARNING]\n> This is something you have to be incredibly careful with, as Porffor expects most functions to return `(valtype, i32)`. Be incredibly careful when using this.\n\n---\n\n```\n;; if both types are number\n```\n\nThis is a comment. `;;` is Wasm's `//`.\n\n---\n\n```\nlocal.get ${a+1}\ni32.const 1\ni32.eq\nlocal.get ${b+1}\ni32.const 1\ni32.eq\ni32.and\n```\n\nThis part is a little more complicated, first you have to understand how Wasm represents function parameters and local variables in general. When looking at the disassembled output of something like `let a = 1;`, you'll likely see something like this:\n```\nf64.const 1\ni32.const 1\nlocal.set 1 ;; a#type (i32)\nlocal.set 0 ;; a\n```\nHere the `i32.const 1` is equivalent to `TYPES.number`, which aligns with what we told Porffor to do, but what's up with the `local.set`s to a number? Well, internally locals are represented with indexes, and in this example `a` was assigned 0, and `a#type` was assigned 1.\n\nThat's where `local.get ${a+1}` comes from, it's Porffor's way of saying \"get the local variable at index of `a` plus one\". In most cases, this is the variable's type. The rest of the snippet is just checking if both of the parameters' types are equal to `TYPES.number`.\n\n---\n\n```\nif\n  local.get ${a}\n  i32.from\n  local.set aCasted\n\n  local.get ${b}\n  i32.from\n  local.set bCasted\n```\n\nHere we start an if block, equivalent to JS's `if (...) {}`, and as the locals' names imply, cast them to `i32`s. There is one strange thing about this section though, if you look at Wasm's list of instructions you won't find a `i32.from`. This is because Porffor has custom instructions for converting to and from the valtype. In this case, converting the valtype into an `i32`. There are a few more of these instructions, but in general these instructions come in the format of `type.from` (create `type` from valtype) and `type.to` (create valtype from `type`). You can find a full list at the bottom of `codegen.js`.\n\n---\n\n```\n  local.get aCasted\n  local.get bCasted\n  i32.add\n  i32.const 1\n  return\nend\n```\n\nHere, we get our two casted locals and add them together, returning the result and a `i32` with the value of 1. We then end the if block with the `end` instruction.\n\n---\n\n```\n;; return (0, 0) otherwise\ni32.const 0\ni32.const 0\nreturn\n```\n\nFinally, we return `(0, 0)` if either type is not a number. This example was very contrived, but should give you a good sense of how to use `Porffor.wasm`.\n\n<br>\n\n## Formatting/linting\n\nThere is 0 setup for this (right now). You can try looking through the other built-ins files but do not worry about it a lot, I honestly do not mind going through and cleaning up after a PR as long as the code itself is good :^)\n\n<br>\n\n## Commit (message) style\n\nYou should ideally have one commit per notable change (using amend/force push). Commit messages should be like `${file}: ${description}`. Don't be afraid to use long titles if needed, but try and be short if possible. Bonus points for detail in commit description. ~~Gold star for jokes in description too.~~\n\nExamples:\n```\nbuiltins/date: impl toJSON\nbuiltins/date: fix ToIntegerOrInfinity returning -0\ncodegen: fix inline wasm for unreachable\nbuiltins/array: wip toReversed\nbuiltins/tostring_number: impl radix\n```\n\n<br>\n\n## Test262\n\nFor the first time, ensure you run `./test262/setup.sh` (Unix) or `.\\test262\\setup.cmd` (Windows).\n\nRun `node test262` to run all the tests and get an output of total overall test results.\n\nWarning: this will consume 1-6GB of memory and ~90% of all CPU cores while running (depending on thread count), it should take 10-30 minutes depending on machine. You can specify how many threads with `--threads=N`, it will use the number of CPU threads by default.\n\nThe main thing you want to pay attention to is the emoji summary (lol):\n```\n🧪 50005 | 🤠 7007 (-89) | ❌ 1914 (-32) | 💀 13904 (-61) | 📝 23477 (-120) | ⏰ 2 | 🏗 2073 (+302) | 💥 1628\n```\n\nTo break this down:\n🧪 total 🤠 pass ❌ fail 💀 runtime error 📝 todo (error) ⏰ timeout 🏗️ wasm compile error 💥 compile error\n\nThe diff compared to the last commit (with test262 data) is shown in brackets. Basically, you want passes 🤠 up, and errors 💀📝🏗💥 down. It is fine if some errors change balance/etc, as long as they are not new failures.\n\nIt will also log new passes/fails. Be careful as sometimes the overall passes can increase, but other files have also regressed into failures which you might miss. Also keep in mind some tests may have been false positives before, but we can investigate the diff together :)\n\n### Debugging tips\n\n- Use `node test262 path/to/tests` to run specific test262 dirs/files (eg `node test262 built-ins/Date`).\n- Use `--log-errors` to log the errors of individual tests.\n- Use `--debug-asserts` to log expected/actual of assertion failures (experimental).\n\n<br>\n\n### Resources\n\n- [MDN](https://developer.mozilla.org/en-US/), not only a great resource for learning JS, but also for implementing it, as it has high level descriptions of functionality, as well as links to the relevant portions of the spec that govern the feature.\n- [WebAssembly Opcodes](https://pengowray.github.io/wasm-ops/), this website not only describes what each wasm instruction does but the necessary stack needed, and contains some other useful resources as well.\n\n[^1]: The last two args are necessary for the Wasm instruction, but you don't need to worry about them (the first is alignment, the second is byte offset)."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2023 CanadaHonk\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.255859375,
          "content": "# Porffor &nbsp;<sup><sub>/ˈpɔrfɔr/ &nbsp;*(poor-for)*</sup></sub>\nA from-scratch experimental **AOT** optimizing JS/TS -> Wasm/C engine/compiler/runtime in JS. Research project, not yet intended for serious use.<br>\n\n<img src=\"https://github.com/CanadaHonk/porffor/assets/19228318/de8ad753-8ce3-4dcd-838e-f4d49452f8f8\" alt=\"Screenshot of terminal showing Porffor running and compiling a hello world\" width=\"60%\">\n\n## Design\nPorffor is a very unique JS engine, due many wildly different approaches. It is seriously limited, but what it can do, it does pretty well. Key differences:\n- 100% AOT compiled (no JIT)\n- No constant runtime/preluded code\n- Least Wasm imports possible (only I/O)\n\nPorffor is primarily built from scratch, the only thing that is not is the parser (using [Acorn](https://github.com/acornjs/acorn)). Binaryen/etc is not used, we make final wasm binaries ourself. You could imagine it as compiling a language which is a sub (some things unsupported) and super (new/custom apis) set of javascript. Not based on any particular spec version.\n\n## Usage\nExpect nothing to work! Only very limited JS is currently supported. See files in `bench` for examples.\n\n### Install\n**`npm install -g porffor@latest`**. It's that easy (hopefully) :)\n\n### Trying a REPL\n**`porf`**. Just run it with no script file argument.\n\n### Running a JS file\n**`porf path/to/script.js`**\n\n### Compiling to Wasm\n**`porf wasm path/to/script.js out.wasm`**. Currently it does not use an import standard like WASI, so it is mostly unusable on its own.\n\n### Compiling to native binaries\n> [!WARNING]\n> Compiling to native binaries uses [2c](#2c), Porffor's own Wasm -> C compiler, which is experimental.\n\n**`porf native path/to/script.js out(.exe)`**. You can specify the compiler with `--compiler=clang|gcc|zig` (`clang` by default), and which optimization level to use with `--cO=Ofast|O3|O2|O1|O0` (`Ofast` by default). Output binaries are also stripped by default.\n\n### Compiling to C\n> [!WARNING]\n> Compiling to C uses [2c](#2c), Porffor's own Wasm -> C compiler, which is experimental.\n\n**`porf c path/to/script.js (out.c)`**. When not including an output file, it will be printed to stdout instead.\n\n### Profiling a JS file\n> [!WARNING]\n> Very experimental WIP feature!\n\n**`porf hotlines path/to/script.js`**\n\n### Debugging a JS file\n> [!WARNING]\n> Very experimental WIP feature!\n\n**`porf debug path/to/script.js`**\n\n### Debugging the compiled Wasm of a JS file\n> [!WARNING]\n> Very experimental WIP feature!\n\n**`porf dissect path/to/script.js`**\n\n\n### Options\n- `--parser=acorn|@babel/parser|meriyah|hermes-parser` (default: `acorn`) to set which parser to use\n- `--parse-types` to enable parsing type annotations/typescript. if `-parser` is unset, changes default to `@babel/parser`. does not type check\n- `--opt-types` to perform optimizations using type annotations as compiler hints. does not type check\n- `--valtype=i32|i64|f64` (default: `f64`) to set valtype\n- `-O0` to disable opt\n- `-O1` (default) to enable basic opt (simplify insts, treeshake wasm imports)\n- `-O2` to enable advanced opt (partial evaluation). unstable!\n\n## Current limitations\n- Limited async support (`Promise` and `await` have known bugs)\n- No variables between scopes (except args and globals)\n- No `eval()`/`Function()` etc (since it is AOT)\n\n## Sub-engines\n\n### Asur\nAsur is Porffor's own Wasm engine; it is an intentionally simple interpreter written in JS. It is very WIP. See [its readme](asur/README.md) for more details.\n\n### Rhemyn\nRhemyn is Porffor's own regex engine; it compiles literal regex to Wasm bytecode AOT (remind you of anything?). It is quite basic and WIP. See [its readme](rhemyn/README.md) for more details.\n\n### 2c\n2c is Porffor's own Wasm -> C compiler, using generated Wasm bytecode and internal info to generate specific and efficient C code. Little boilerplate/preluded code or required external files, just for CLI binaries (not like wasm2c very much).\n\n## Versioning\nPorffor uses a unique versioning system, here's an example: `0.48.7`. Let's break it down:\n1. `0` - major, always `0` as Porffor is not ready yet\n2. `48` - minor, total Test262 pass percentage (rounded half down, eg `49.4%` -> `48`, `49.5%` -> `49`)\n3. `7` - micro, build number for that minor (incremented each git push)\n\n## Performance\n*For the features it supports most of the time*, Porffor is *blazingly fast* compared to most interpreters and common engines running without JIT. For those with JIT, it is usually slower by default, but can catch up with compiler arguments and typed input, even more so when compiling to native binaries.\n\n## Test262\nPorffor can run Test262 via some hacks/transforms which remove unsupported features whilst still doing the same asserts (eg simpler error messages using literals only). It currently passes >14% (see latest commit desc for latest and details). Use `node test262` to test, it will also show a difference of overall results between the last commit and current results.\n\n![image](https://github.com/CanadaHonk/porffor/assets/19228318/5320da7d-e945-4d16-857b-499f3a6c1180)\n\n## Codebase\n- `compiler`: contains the compiler itself\n  - `builtins`: built-in apis written in typescript\n  - `2c.js`: custom wasm-to-c engine\n  - `allocator.js`: static/compile-time allocator\n  - `assemble.js`: assembles wasm ops and metadata into a spec-compliant wasm module/file\n  - `builtins.js`: all manually written built-ins of the engine (spec, custom. vars, funcs)\n  - `builtins_object.js`: all the various built-in objects (think `String`, `globalThis`, etc.)\n  - `builtins_precompiled.js`: dynamically generated builtins from the `builtins/` folder\n  - `codegen.js`: code (wasm) generation, ast -> wasm. The bulk of the effort\n  - `cyclone.js`: wasm partial constant evaluator (it is fast and dangerous hence \"cyclone\")\n  - `disassemble.js`: wasm disassembler using internal debug info\n  - `encoding.js`: utils for encoding things as bytes as wasm expects\n  - `expression.js`: mapping most operators to an opcode (advanced are as built-ins eg `f64_%`)\n  - `havoc.js`: wasm rewrite library (it wreaks havoc upon wasm bytecode hence \"havoc\")\n  - `index.js`: doing all the compiler steps, takes code in, wasm out\n  - `opt.js`: self-made wasm bytecode optimizer\n  - `parse.js`: parser simply wrapping acorn (or other acorn-like parsers)\n  - `pgo.js`: a profile guided optimizer\n  - `precompile.js`: the tool to generate `builtins_precompied.js`\n  - `prefs.js`: a utility to read command line arguments\n  - `prototype.js`: some builtin prototype functions (~legacy)\n  - `types.js`: definitions for each of the builtin types\n  - `wasmSpec.js`: \"enums\"/info from wasm spec\n  - `wrap.js`: wrapper for compiler which instantiates and produces nice exports\n\n- `runner`: contains utils for running JS with the compiler\n  - `index.js`: the main file, you probably want to use this\n  - `repl.js`: basic repl (uses `node:repl`)\n\n- `rhemyn`: contains [Rhemyn](#rhemyn) - our regex engine (used by Porffor)\n  - `compile.js`: compiles regex ast into wasm bytecode aot\n  - `parse.js`: own regex parser\n\n- `test262`: test262 runner and utils\n\n## Usecases\nCurrently, Porffor is seriously limited in features and functionality, however it has some key benefits:\n- Safety. As Porffor is written in JS, a memory-safe language\\*, and compiles JS to Wasm, a fully sandboxed environment\\*, it is quite safe. (\\* These rely on the underlying implementations being secure. You could also run Wasm, or even Porffor itself, with an interpreter instead of a JIT for bonus security points too.)\n- Compiling JS to native binaries. This is still very early!\n- Inline Wasm for when you want to beat the compiler in performance, or just want fine grained functionality.\n- Potential for SIMD operations and other lower level concepts.\n- More in future probably?\n\n## Wasm proposals used\nPorffor intentionally does not use Wasm proposals which are not commonly implemented yet (eg GC) so it can be used in as many places as possible.\n\n- Multi-value **(required)**\n- Non-trapping float-to-int conversions **(required)**\n- Bulk memory operations (optional, can get away without sometimes)\n- Exception handling (optional, only for errors)\n- Tail calls (opt-in, off by default)\n\n## The name\n`purple` in Welsh is `porffor`. Why purple?\n- No other JS engine is purple colored\n- Purple is pretty cool\n- Purple apparently represents \"ambition\", which is one word to describe this project\n"
        },
        {
          "name": "asur",
          "type": "tree",
          "content": null
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "byg",
          "type": "tree",
          "content": null
        },
        {
          "name": "compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "demos",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 34.44921875,
          "content": "<!DOCTYPE html>\n<head>\n  <title>Porffor</title>\n\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n\n  <meta itemprop=\"name\" content=\"Porffor\">\n  <meta property=\"og:title\" content=\"Porffor\">\n  <meta itemprop=\"description\" content=\"Porffor compiles JavaScript ahead-of-time to WebAssembly and native binaries.\">\n  <meta property=\"og:description\" content=\"Porffor compiles JavaScript ahead-of-time to WebAssembly and native binaries.\">\n  <meta property=\"og:type\" content=\"website\">\n\n  <link rel=\"icon\" type=\"image/png\" href=\"logo.png\">\n\n  <style>\n    @import url(https://fonts.bunny.net/css?family=jetbrains-mono:400,600,800);\n\n    :root {\n      font-family: \"JetBrains Mono\", ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\n\n      --header-primary: #ffffff;\n      --header-secondary: #b9bbbe;\n\n      --text-normal: #ffffff;\n      --text-muted: #d0d4d8;\n      color: var(--text-muted);\n\n      --accent-dark: #3e2066;\n      --accent: #8545cf;\n      --accent-light: #9c60e0;\n\n      --background-primary: #100420;\n      --background-secondary: #200840;\n    }\n\n    html, body {\n      margin: 0;\n      padding: 0;\n    }\n\n    body {\n      background: var(--background-primary);\n    }\n\n    * {\n      box-sizing: border-box;\n    }\n\n    h1 {\n      font-weight: 800;\n      font-size: 32px;\n\n      color: var(--header-primary);\n\n      margin: 0;\n    }\n\n    h2, details > summary {\n      font-weight: 600;\n      font-size: 20px;\n\n      color: var(--header-primary);\n\n      margin-top: 60px;\n      margin-bottom: 8px;\n    }\n\n    h2 {\n      font-weight: 800;\n      font-size: 28px;\n      color: var(--header-primary);\n      margin: 0;\n      margin-top: 100px;\n      margin-bottom: 40px;\n    }\n\n    details > summary {\n      margin-top: 20px;\n      margin-bottom: 0;\n      cursor: pointer;\n    }\n\n    .gui-header > :first-child {\n      font-size: 90%;\n      display: inline;\n      color: #57f287;\n      margin-left: 0.2rem;\n      font-weight: 600;\n    }\n\n    .gui-header {\n      margin-bottom: 12px;\n      margin-top: 0;\n    }\n\n    .gui-header + p {\n      margin: 0;\n      margin-bottom: 24px;\n    }\n\n    header {\n      width: 100%;\n      height: fit-content;\n      padding: 8px 24px;\n\n      background: rgba(10, 2, 10, 0.6);\n      backdrop-filter: blur(4px) saturate(0.6);\n      border-bottom: 2px solid var(--accent);\n\n      position: sticky;\n      top: 0;\n      z-index: 10;\n    }\n\n    header > div {\n      margin: 0 auto;\n      width: 1600px;\n      max-width: 100%;\n\n      display: flex;\n      align-items: center;\n    }\n\n    header h1 {\n      color: var(--accent);\n      font-size: 38px;\n    }\n\n    header > div > div {\n      flex-grow: 1;\n      margin-left: 80px;\n\n      display: flex;\n      /* gap: 60px; */\n\n      color: #505458;\n      font-size: 26px;\n    }\n\n    header .shown-600 {\n      filter: grayscale(1);\n    }\n\n    header .shown-600:hover {\n      filter: brightness(2);\n    }\n\n    header a {\n      color: #e0e4e8;\n      text-decoration: none !important;\n      font-weight: 600;\n    }\n\n    header a:hover {\n      color: var(--header-primary);\n      font-weight: 800;\n    }\n\n    a:not([href]) {\n      cursor: pointer;\n      color: var(--accent);\n    }\n\n    a:not([href]):hover {\n      color: var(--accent-light);\n    }\n\n    a[href]:hover {\n      text-decoration: underline var(--accent);\n    }\n\n    article {\n      padding: 12px 24px;\n      width: 100%;\n      max-width: 1648px;\n      margin: auto;\n      padding-bottom: 80px;\n    }\n\n    p {\n      font-size: 20px;\n      font-weight: 400;\n      color: var(--text-muted);\n\n      margin-bottom: 20px;\n      margin-top: 20px;\n    }\n\n    hr {\n      margin-top: 50px;\n      margin-bottom: 50px;\n      border: 1px solid var(--accent);\n    }\n\n    hr.invis {\n      border: 0;\n    }\n\n    .dual {\n      width: 100%;\n      margin-bottom: 40px;\n\n      display: flex;\n    }\n\n    .cards {\n      display: grid;\n      grid-template-columns: repeat(2, 1fr);\n      /* gap: 60px; */\n    }\n\n    .cards.three {\n      grid-template-columns: repeat(3, 1fr);\n      margin-bottom: 60px;\n    }\n\n    .cards.four {\n      grid-template-columns: repeat(4, 1fr);\n    }\n\n    .cards.three > div,\n    .cards.four > div {\n      border-top: none;\n    }\n\n    .columns {\n      grid-template-columns: repeat(2, 1fr);\n    }\n\n    .cards > div {\n      display: flex;\n      flex-direction: column;\n\n      padding: 24px;\n\n      border: 2px solid var(--accent);\n      /* border: 2px solid #505458; */\n    }\n\n    .cards > :not(:last-child) {\n      border-right: none;\n    }\n\n    .cards > div > h1 {\n      font-weight: 800;\n      color: var(--header-primary);\n      margin-top: 0;\n    }\n\n    .cards > div > h1 + p {\n      margin-top: 18px;\n    }\n\n    .cards > div > p {\n      color: var(--text-muted);\n      font-weight: 400;\n\n      margin-top: 28px;\n      margin-bottom: 0;\n    }\n\n    .cards > div > p:first-child {\n      margin-top: 0;\n    }\n\n    .cards > div > ul {\n      color: var(--text-muted);\n      font-weight: 400;\n      font-size: 20px;\n\n      margin-top: 10px;\n      margin-bottom: 0px;\n    }\n\n    .cards li {\n      margin-bottom: 16px;\n    }\n\n    .cards > span {\n      color: var(--text-muted);\n      font-weight: 600;\n      font-size: 28px;\n\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .bars {\n      margin-top: 60px;\n      margin-bottom: 100px;\n\n      display: flex;\n      flex-direction: column;\n      gap: 12px;\n\n      width: 100%;\n      align-items: center;\n    }\n\n    .bars > p {\n      font-size: 0.9em;\n    }\n\n    .bars > div {\n      display: flex;\n      align-items: center;\n      width: 80%;\n    }\n\n    .bars > div > :first-child {\n      color: var(--header-primary);\n      font-weight: 400;\n      font-size: 18px;\n      text-align: right;\n\n      width: 6ch;\n      margin-right: 20px;\n    }\n\n    .bars > div > div {\n      background: var(--background-secondary);\n      width: calc((var(--time) / 75) * 100%);\n      height: 1.2rem;\n    }\n\n    @keyframes fill {\n      0% {\n        width: 0%;\n      }\n      100% {\n        width: 100%;\n      }\n    }\n\n    .bars > div > div > div {\n      background: var(--color);\n      height: 100%;\n      animation: calc(var(--time) * 0.1s) linear fill;\n    }\n\n    .bars > div > :last-child {\n      color: var(--text-muted);\n      font-weight: 400;\n      margin-left: 8px;\n    }\n\n    a {\n      color: var(--accent-light);\n      text-decoration: none;\n      font-weight: 600;\n\n      display: inline-block;\n    }\n\n    ::-webkit-scrollbar {\n      width: 12px;\n    }\n\n    ::-webkit-scrollbar-corner {\n      background-color: transparent;\n    }\n\n    ::-webkit-scrollbar-thumb {\n      background-color: #303438;\n    }\n\n    ::-webkit-scrollbar-track {\n      background-color: #000408;\n    }\n\n    ::-webkit-scrollbar-thumb,\n    ::-webkit-scrollbar-track {\n      border: 4px solid transparent;\n      background-clip: padding-box;\n      border-radius: 12px;\n    }\n\n    ul,\n    ol {\n      margin-top: 0px;\n      margin-bottom: 0px;\n    }\n\n    code {\n      color: #a0a4a8;\n    }\n\n    .tagline {\n      font-size: 48px;\n      margin-top: 16px;\n    }\n\n    .tagline + p {\n      font-size: 24px;\n      margin-top: 12px;\n      margin-bottom: 60px;\n    }\n\n    #split {\n      border-top: 2px solid var(--accent);\n      display: grid;\n      grid-template-columns: 60% 1fr;\n\n      width: 100%;\n      height: 60vh;\n    }\n\n    #split > :last-child {\n      background: #0c0c0c;\n      color: #d0d0d0;\n\n      padding: 6px;\n\n      font-size: 14px;\n      border-left: 2px solid var(--accent);\n\n      white-space: pre;\n\n      height: 100%;\n      overflow-x: hidden;\n      overflow-y: auto;\n    }\n\n    #output,\n    #status {\n      border-top: 2px solid var(--accent);\n      color: var(--text-muted);\n      background: var(--background-secondary);\n\n      width: 100%;\n      height: 8vh;\n      font-size: 14px;\n      padding: 6px;\n\n      white-space: pre;\n\n      overflow-x: hidden;\n      overflow-y: auto;\n    }\n\n    #status {\n      padding: 4px;\n      font-size: 14px;\n      height: 26px;\n    }\n\n    .ansi-31 {\n      color: rgb(197, 15, 31);\n    }\n    .ansi-34 {\n      color: rgb(0, 55, 218);\n    }\n    .ansi-36 {\n      color: rgb(58, 150, 221);\n    }\n    .ansi-35 {\n      color: rgb(136, 23, 152);\n    }\n    .ansi-95 {\n      color: rgb(180, 0, 158);\n    }\n    .ansi-33 {\n      color: rgb(193, 156, 0);\n    }\n    .ansi-90 {\n      color: rgb(118, 118, 118);\n    }\n\n    #wasm-size {\n      position: absolute;\n      right: 6px;\n      top: 6px;\n      pointer-events: none;\n    }\n\n    #split > * {\n      position: relative;\n    }\n\n    #js-size {\n      position: absolute;\n      right: 24px;\n      top: 6px;\n      pointer-events: none;\n\n      z-index: 9;\n\n      font-size: 14px;\n      color: #d0d0d0;\n\n      display: none;\n    }\n\n    #args {\n      background: var(--background-secondary);\n\n      width: calc(100% - 800px);\n      margin: 0;\n\n      color: var(--text-normal);\n      border: 0;\n      padding: 6px;\n      float: right;\n      font-size: 14px;\n    }\n\n    #examples_dropdown {\n      width: 180px;\n      padding: 4px;\n      height: 29px;\n      display: inline-block;\n\n      color: var(--text-normal);\n      font-size: 16px;\n      background: var(--background-secondary);\n      border: none;\n\n      margin-right: 20px;\n    }\n\n    #valtype_dropdown,\n    #opt_dropdown,\n    #parser_dropdown,\n    #target_dropdown {\n      width: fit-content;\n      padding: 4px;\n      height: 29px;\n      display: inline-block;\n\n      color: var(--text-normal);\n      font-size: 14px;\n      background: var(--background-secondary);\n      border: none;\n\n      margin-left: 4px;\n      margin-right: 12px;\n    }\n\n    #graph {\n      width: 100%;\n      height: 800px;\n      position: relative;\n    }\n\n    #graph span {\n      position: absolute;\n      right: 12px;\n      top: 50px;\n      font-size: 12px;\n      color: var(--text-muted);\n      font-weight: 400;\n      cursor: default;\n    }\n\n    #graph_legend {\n      position: absolute;\n      right: 28px;\n      top: 34px;\n\n      display: flex;\n\n      width: 700px;\n      justify-content: space-between;\n\n      color: var(--text-muted);\n      font-size: 20px;\n    }\n\n    #graph_legend div::before {\n      content: \"■\";\n      font-size: 200%;\n      vertical-align: top;\n      line-height: 0.5;\n      display: inline-block;\n      color: var(--color);\n      margin-right: 12px;\n    }\n\n    a.simple {\n      color: inherit;\n      font-weight: inherit;\n    }\n\n    a.simple:hover {\n      text-decoration: underline;\n    }\n\n    a.simple::after {\n      display: none;\n    }\n\n    #graph svg {\n      width: 100%;\n      height: 100%;\n    }\n\n    #graph text {\n      cursor: default;\n      fill: #505458;\n      font-size: 22px;\n      text-rendering: optimizeLegibility;\n    }\n\n    span[title] {\n      text-decoration: underline 1px dotted var(--text-muted);\n    }\n\n    pre {\n      color: var(--text-muted);\n      line-height: 1;\n      font-size: max(12px, min(18px, 1.2vw));\n      margin: 0;\n      position: relative;\n    }\n\n    .browser-js-marker::before {\n      content: \"Fast startup ▲\\A              ┆\\A              ┆\\A              ┆\\A              ┆\\A              ┆\\A              ┆\\A              ┆\\A              ┆\\A              ┆\\A              ┆\\A              ┆\\A              ┆\\A              ┆\\A              ┆\\A      Fast JS ▼\";\n      color: var(--text-muted);\n      position: absolute;\n      left: -180px;\n      font-weight: 400;\n      margin-top: 24px;\n    }\n\n    pre h2 {\n      font-weight: 800;\n      font-size: 100%;\n      margin: 0;\n      display: inline;\n    }\n\n    b {\n      color: var(--text-normal);\n      font-weight: 600;\n    }\n\n    .accent {\n      color: var(--accent-light);\n    }\n\n    @media (max-width: 1000px) {\n      .cards {\n        grid-template-columns: 1fr !important;\n      }\n\n      .cards > :not(:last-child) {\n        border-right: 2px solid var(--accent);\n      }\n\n      .hidden-1000 {\n        display: none;\n      }\n\n      #graph ~ * {\n        display: none !important;\n      }\n\n      #graph_legend {\n        width: calc(100% - 12px * 2);\n        right: 12px;\n        flex-wrap: wrap;\n      }\n\n      h2 span {\n        font-size: min(3.5vw, 80%);\n      }\n\n      header h1 {\n        font-size: 32px;\n      }\n\n      header > div > div {\n        font-size: 22px;\n      }\n    }\n\n    @media (max-width: 800px) {\n      .cards > div {\n        border: none !important;\n        border-bottom: 2px solid var(--accent) !important;\n        padding: 0;\n        padding-bottom: 40px;\n        margin-bottom: 40px;\n      }\n\n      pre, #graph {\n        display: none;\n      }\n\n      .dual {\n        margin: 0;\n      }\n\n      .dual + p {\n        margin-top: 0;\n      }\n\n      .cards.three {\n        margin-bottom: 0;\n      }\n    }\n\n    .shown-600 {\n      display: none;\n    }\n\n    @media (max-width: 600px) {\n      .tagline {\n        font-size: max(24px, 7vw);\n      }\n\n      .tagline + p {\n        font-size: max(18px, 3.6vw);\n      }\n\n      p {\n        font-size: 18px;\n      }\n\n      header h1 {\n        font-size: 24px;\n      }\n\n      header > div > div {\n        font-size: 20px;\n        flex-wrap: wrap;\n        align-content: center;\n        justify-content: space-around;\n        margin-left: 20px;\n      }\n\n      header > div > div > div {\n        display: none;\n      }\n\n      .hidden-600 {\n        display: none;\n      }\n\n      .shown-600 {\n        display: inline;\n      }\n    }\n  </style>\n</head>\n\n<body>\n  <header>\n    <div>\n      <h1>Porffor</h1>\n\n      <div>\n        <a href=\"https://github.com/CanadaHonk/porffor\">Code</a><span class=\"hidden-600\">&nbsp;|&nbsp;</span>\n        <a href=\"https://discord.gg/wPV3WgDGwg\">Chat</a><div style=\"flex-grow: 1\"></div>\n        <a href=\"https://x.com/CanadaHonk\"><span class=\"hidden-600\">Twitter</span><span class=\"shown-600\">🐦</span></a><span class=\"hidden-600\">&nbsp;|&nbsp;</span>\n        <a href=\"https://bsky.app/profile/goose.icu\"><span class=\"hidden-600\">Bluesky</span><span class=\"shown-600\">🦋</span></a>\n      </div>\n    </div>\n  </header>\n\n  <article>\n    <h1 class=\"tagline\">An ahead-of-time JavaScript compiler</h1>\n    <p>\n      Porffor compiles JavaScript ahead-of-time to WebAssembly and native binaries.<br>\n      It is currently in <b>pre-alpha</b> with usability beginning in 2025.\n    </p>\n\n    <section class=\"cards\">\n      <div>\n        <h1>JS -> Wasm</h1>\n        <p>\n          Porffor's WebAssembly output is\n          <b>10-30x smaller and faster</b> compared to existing JS -> Wasm\n          projects as Porffor compiles JS instead of bundling an interpreter in\n          the Wasm output.\n        </p>\n        <p>\n          JS as Wasm allows for sandboxed execution but suffers drastic\n          performance losses: <b>Porffor solves this</b>, allowing for:\n        </p>\n\n        <details>\n          <summary>Efficient, secure server-side JS hosting</summary>\n          <p>\n            For edge runtimes, Wasm sandboxing allows secure execution without\n            needing excessive isolation; combined with AOTs low overhead\n            compared to JITs, Porffor could allow for running many more\n            customers on the same hardware with minimal performance loss.\n          </p>\n        </details>\n\n        <details>\n          <summary>Reverse-engineer resistance</summary>\n          <p>\n            If you have especially sensitive JS, compilation can be much harder\n            to reverse than code obfuscation.\n          </p>\n        </details>\n      </div>\n\n      <div>\n        <h1>JS -> Native</h1>\n        <p>\n          As Porffor truly compiles JS without packaging a runtime like existing\n          solutions, binary sizes are <b>1000x smaller</b> (~90MB -> &lt;100KB)\n          with potential other performance benefits too.\n        </p>\n        <p>\n          JS as native allows for simple one-click execution but has substandard\n          sizes: <b>Porffor solves this</b>, allowing for:\n        </p>\n\n        <details>\n          <summary>Fast JS for embedded, game consoles, and more</summary>\n          <p>\n            Under the hood, Porffor compiles JS -> C -> native; anywhere you can\n            use C, you can now use JS!\n          </p>\n        </details>\n\n        <details>\n          <summary>Tiny CLI apps written in JS</summary>\n          <p>\n            Imagine writing a CLI app in JS and compiling it to a one-click\n            executable under 1MB!\n          </p>\n        </details>\n      </div>\n    </section>\n\n    <section class=\"cards three\">\n      <div>\n        <p>\n          <b>Porffor has safe compilation</b> as it is written in JS (preventing memory safety vulnerabilities) with 0 eval.\n        </p>\n      </div>\n      <div>\n        <p>\n          <b>Porffor is written from scratch</b> with ahead-of-time in mind allowing for previously impossible optimizations.\n        </p>\n      </div>\n      <div>\n        <p>\n          <b>Porffor natively supports TypeScript</b>, no transpilation step (even internally): just give it a TS file.\n        </p>\n      </div>\n    </section>\n\n    <section class=\"dual\">\n      <pre>\n<h2>Compile-time (developer's machine)</h2>\n\n\n<br>\n<br>\n<br>\n\n\n<br>\n<br>\n<br>\n\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<b>Traditional embedded compiler</b>\n┌──────────────┐      ┌────────────┐\n│              │      │            │\n│  JavaScript  ├─────►│  Bytecode  ├<span class=\"hidden-1000\">─────────────────────</span>────────────►\n│              │      │            │\n└──────────────┘      └────────────┘\n\n\n<b class=\"accent\">Porffor (AOT compiler)</b>\n┌──────────────┐      ┌──────────────────────┐\n│              │      │                      │\n│  JavaScript  ├─────►│ Binary (Wasm/native) ├<span class=\"hidden-1000\">─────────────────────</span>──►\n│              │      │                      │\n└──────────────┘      └──────────────────────┘\n</pre><pre>\n<h2>Runtime (user's machine)</h2>\n\n<b>Interpreter</b>\n┌──────────────┐      ┌────────────┐      ┌─────────────┐\n│              │      │            │      │             │\n│  JavaScript  ├─────►│  Bytecode  ├─────►│  Evaluated  │\n│              │      │            │      │             │\n└──────────────┘      └────────────┘      └─────────────┘\n\n\n<b>Just-in-time compiler (JIT)</b>\n┌──────────────┐      ┌──────────────┐      ┌────────────┐\n│              │      │              │      │            │\n│  JavaScript  ├─────►│ Machine code ├─────►│  Executed  │\n│              │      │              │      │            │\n└──────────────┘      └──────────────┘      └────────────┘\n\n\n<b class=\"browser-js-marker\">Browser JS engine</b>\n┌──────────────┐               ┌─────────────┐\n│              │  Interpreter  │             │\n│  JavaScript  ├───────┬──────►│  Evaluated  │\n│              │       │       │             │\n└──────────────┘       |       └─────────────┘\n                       │\n                       │              ┌─────────────┐\n                       │  JIT Tier 1  │             │\n                       └───────┬─────►│  Evaluated  │\n                               │      │             │\n                               |      └─────────────┘\n                               │\n                               │              ┌─────────────┐\n                               │  JIT Tier 2  │             │\n                               └───────┬─────►│  Evaluated  │\n                                       │      │             │\n                                      ...     └─────────────┘\n\n\n<b>Traditional embedded interpreter</b>\n┌─────────────┐\n│             │\n│  Evaluated  │\n│             │\n└─────────────┘\n\n\n<b>Wasm runtime or native machine</b>\n┌────────────┐\n│            │\n│  Executed  │\n│            │\n└────────────┘\n</pre>\n    </section>\n\n    <p>Instead of a slow interpreter or multiple JIT tiers carefully balancing compilation speed (startup/loading time) and JS performance, compiling AOT allows you to compile first and run later. While compile speed for AOT remains important for DX, it no longer effects UX; allowing Porffor to perform static analysis for optimizations like C++ or Rust do today.</p>\n\n    <p>The main drawback of AOT is that runtime JS execution (eval, new Function, etc) is infeasible. Also as Porffor is early, it is unstable and not all JS works yet.</p>\n\n    <!-- <section class=\"bars\">\n      <div>\n        <span>Porffor</span>\n        <div style=\"--time: 19; --color: var(--accent)\"><div></div></div>\n        <span>19s</span>\n      </div>\n\n      <div>\n        <span>Bun</span>\n        <div style=\"--time: 43; --color: #fbf0df\"><div></div></div>\n        <span>43s</span>\n      </div>\n\n      <div>\n        <span>Node</span>\n        <div style=\"--time: 67; --color: #68bc4a\"><div></div></div>\n        <span>67s</span>\n      </div>\n\n      <p>\n        Execution time for a benchmark (running a BF interpreter running <code>mandelbrot.bf</code>). Porffor ran using native compilation.\n      </p>\n    </section> -->\n\n    <hr>\n    <h2 class=\"gui-header\">Test262 <pre id=\"test262_percent\"></pre></h2>\n    <p>\n      Porffor is ran against <a class=\"simple\" href=\"https://github.com/tc39/test262\">Test262</a>, the official ECMAScript conformance test suite, every commit to track conformance progress.\n    </p>\n    <div id=\"graph\">\n      <div id=\"graph_legend\"></div>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\" id=\"svg\"></svg>\n    </div>\n\n    <hr>\n    <h2 class=\"gui-header\">Playground</h2>\n    <p>You can try Porffor here online or locally with <code>npm i -g porffor@latest && porf</code></p>\n    <select id=\"examples_dropdown\"></select>\n    <!-- Valtype <select id=\"valtype_dropdown\"></select> -->\n    <!-- <span title=\"Optimization level\">-O</span> <select id=\"opt_dropdown\"></select> -->\n    <span title=\"JS parser to use\">Parser</span>\n    <select id=\"parser_dropdown\"></select>\n    <span title=\"Experimental!\">Target</span>\n    <select id=\"target_dropdown\"></select>\n    <input type=\"text\" placeholder=\"Extra arguments\" id=\"args\" />\n    <div id=\"split\"></div>\n    <div id=\"output\"></div>\n    <div id=\"status\"></div>\n  </article>\n\n  <script>\n    (async () => {\n      const loadScript = async (x) => {\n        const el = document.createElement('script');\n        el.src = x;\n        document.head.append(el);\n\n        await new Promise((res) => (el.onload = res));\n      };\n\n      if (!window.monaco) {\n        await loadScript('https://cdn.openasar.dev/monaco-editor/min/vs/loader.js');\n\n        require.config({\n          paths: { vs: 'https://cdn.openasar.dev/monaco-editor/min/vs' }\n        });\n        await new Promise((res) => require(['vs/editor/editor.main'], res));\n      }\n\n      const monacoContainer = document.createElement('div');\n      split.appendChild(monacoContainer);\n\n      const jsSize = document.createElement('div');\n      jsSize.id = 'js-size';\n      monacoContainer.append(jsSize);\n\n      const wasmView = document.createElement('div');\n      split.appendChild(wasmView);\n\n      const status = document.getElementById('status');\n\n      const examples = {\n        'Prime Numbers': `const isPrime = number => {\n  if (number < 2) return false;\n\n  for (let i = 2; i < number; i++) {\n    if (number % i == 0) return false;\n  }\n\n  return true;\n}\n\nlet counter = 0;\nwhile (counter <= 10000) {\n  if (isPrime(counter)) Porffor.numberLog(counter);\n  counter++;\n}`,\n        Fibonacci: `let a = 0, b = 1;\nPorffor.numberLog(a); Porffor.numberLog(b);\n\nfor (let i = 2; i <= 45; i++) {\n  let t = b + a;\n  a = b;\n  b = t;\n\n  Porffor.numberLog(t);\n}`,\n        Factorial: `const factorial = n => n === 0 ? 1 : (n * factorial(n - 1));\nPorffor.numberLog(factorial(10));`,\n        'Sum of Digits': `let n = 654, sum = 0;\nwhile (n > 0) {\n  sum += n % 10;\n  n /= 10;\n}\n\nPorffor.numberLog(sum);`,\n        Exception: `throw new Error('Hello, world!')`,\n        'Array Reading': `let arr = [ 2, 4, 8, 16 ];\nfor (let i = 0; i < arr.length; i++) Porffor.numberLog(arr[i]);`,\n        'Array Prototype': `let arr = [ 1, 2, 3 ];\narr.push(4); // 4\narr.shift(); // 1\narr.pop(); // 4\n\narr.at(0); // 2\narr.at(-1); // 3`,\n        'Math Proposals': `Porffor.numberLog(Math.signbit(1)) // false\nPorffor.numberLog(Math.signbit(-1)) // true\nPorffor.numberLog(Math.radians(180)) // 3.141592...\nPorffor.numberLog(Math.RAD_PER_DEG) // 0.017453...\nPorffor.numberLog(Math.clamp(12, 0, 10)) // 10\nPorffor.numberLog(Math.scale(4, 0, 10, 0, 1)) // 0.4`,\n      };\n      const defaultExample = 'Prime Numbers';\n      let code = examples[defaultExample];\n\n      const addOptions = (container, options, def) => {\n        for (const x of options) {\n          const el = document.createElement('option');\n          el.textContent = x;\n          el.selected = x === def;\n\n          container.appendChild(el);\n        }\n      };\n\n      addOptions(examples_dropdown, Object.keys(examples), defaultExample);\n\n      if (location.hash) {\n        code = atob(location.hash.slice(1));\n        examples_dropdown.selectedIndex = -1;\n      }\n\n      // addOptions(valtype_dropdown, [ 'i32', 'i64', 'f64' ], 'f64');\n      // addOptions(opt_dropdown, [ 0, 1, 2, 3 ], 1);\n      addOptions(\n        parser_dropdown,\n        ['acorn', 'meriyah', 'hermes-parser', '@babel/parser'],\n        'acorn',\n      );\n      addOptions(target_dropdown, ['wasm', 'c'], 'wasm');\n\n      examples_dropdown.oninput = () => {\n        code = examples[examples_dropdown.value];\n        editor.setValue(code);\n        comp();\n      };\n\n      parser_dropdown.oninput = async () => {\n        setProcess();\n        await globalThis._porf_loadParser();\n        comp();\n      };\n\n      target_dropdown.oninput = () => comp();\n\n      window.editor = monaco.editor.create(monacoContainer, {\n        value: code,\n        codeLens: false,\n        language: 'javascript',\n        theme: 'vs-dark',\n        minimap: {\n          enabled: false,\n        },\n      });\n\n      const debounce = (handler, timeout) => {\n        let timer;\n        return (...args) => {\n          clearTimeout(timer);\n          timer = setTimeout(() => handler(...args), timeout);\n        };\n      };\n\n      const setProcess = () => {\n        globalThis.process = {\n          // argv: ['', '', ...args.value.split(' '), `-O${opt_dropdown.value}`, `--parser=${parser_dropdown.value}`, `--target=${target_dropdown.value}`]\n          argv: [\n            '',\n            '',\n            ...args.value.split(' '),\n            `--parser=${parser_dropdown.value}`,\n            `--target=${target_dropdown.value}`,\n            '--disassemble',\n          ],\n        };\n      };\n\n      setProcess();\n      const compile = (await import('../compiler/wrap.js')).default;\n\n      const comp = async () => {\n        setProcess();\n        globalThis.argvChanged?.();\n\n        if (code !== examples[examples_dropdown.value])\n          location.hash = '#' + btoa(code);\n\n        jsSize.textContent = `${new Blob([code]).size} bytes`;\n\n        const ansi = x => x.replaceAll('\\x1B[0m', '</span>').replace(/\\x1B\\[([0-9]{2})m/g, (_, esc) => `<span class='ansi-${esc}'>`);\n\n        let cache = '';\n        const print = (str) => {\n          cache += str;\n        };\n\n        output.textContent = '';\n        wasmView.innerHTML = '';\n        status.textContent = 'Compiling...';\n\n        let wasm, exports, times, disasms, c;\n        try {\n          0,\n            ({ wasm, exports, times, disasms, c } = compile(\n              code,\n              true,\n              {},\n              print,\n            ));\n        } catch (e) {\n          console.error(e);\n          status.textContent = `${e.constructor.name}: ${e.message}`;\n          return;\n        }\n\n        if (target_dropdown.value === 'c') {\n          wasmView.textContent = c.trim();\n        } else {\n          wasmView.innerHTML =\n            `<div id='wasm-size'>${wasm.byteLength} bytes</div>` +\n            ansi(disasms.join('\\n'));\n        }\n\n        status.textContent = `Compiled in ${times[0].toFixed(0)}ms`;\n\n        await new Promise((res) => setTimeout(res, 10));\n\n        const t2 = performance.now();\n        try {\n          exports.main();\n        } catch (e) {\n          console.error(e);\n          status.textContent = `${e.constructor.name}: ${e.message}`;\n          return;\n        }\n\n        print('\\n');\n\n        const execTime = performance.now() - t2;\n        status.textContent += `. Executed in ${execTime.toFixed(0)}ms`;\n\n        output.innerHTML = ansi(cache);\n      };\n\n      const compDebounce = debounce(comp, 500);\n\n      editor.getModel().onDidChangeContent((e) => {\n        code = editor.getValue();\n        compDebounce();\n      });\n\n      args.oninput = () => compDebounce();\n\n      comp();\n\n      const niceDate = (x) => {\n        return x.toLocaleString('default', {\n          month: 'long',\n          day: 'numeric'\n        });\n      };\n\n      const history = await (await fetch('/test262/history.json')).json();\n      const percent = history[0].results[0];\n      test262_percent.innerHTML = `${percent.toFixed(2)}% <span style=\"color: var(--text-muted); font-size: 80%\">${'█'.repeat(Math.floor(percent / 4))}${'░'.repeat(Math.ceil((100 - percent) / 4))}</span>`;\n\n      const colors = {\n        pass: '#57f287',\n        fail: '#fee75c',\n        runtimeError: '#ed4245',\n        compileError: '#6f0b0c',\n      };\n\n      for (const x in colors) {\n        const name = x.replace(\n          /[a-z][A-Z]/,\n          (_) => `${_[0]} ${_[1].toLowerCase()}`,\n        );\n        const el = document.createElement('div');\n        el.textContent = name[0].toUpperCase() + name.slice(1);\n        el.style = `--color: ${colors[x]}`;\n\n        graph_legend.appendChild(el);\n      }\n\n      const makeGraph = () => {\n        const oldest = new Date(history.at(-1).time);\n        const now = new Date();\n        // const months =\n        //   now.getMonth() -\n        //   oldest.getMonth() +\n        //   12 * (now.getFullYear() - oldest.getFullYear());\n        // graph_time.textContent = `All-time (${months} months)`;\n\n        const newest = history[0].time;\n        const dateRange = newest - oldest;\n\n        const availableWidth = Math.min(window.innerWidth, 2000) - 400 - 24;\n        const availableHeight = 800;\n        const aspectRatio = availableWidth / availableHeight;\n\n        const width = 1000 * aspectRatio;\n        const height = 1000;\n\n        const leftAxisWidth = 70;\n        const paddingX = 0;\n        const paddingY = 10;\n\n        svg.setAttribute(\n          'viewBox',\n          `0 0 ${width + leftAxisWidth + paddingX * 2} ${height + paddingY * 2}`,\n        );\n        svg.innerHTML = '';\n\n        // left axis line\n        // const leftAxisLine = document.createElementNS(\n        //   'http://www.w3.org/2000/svg',\n        //   'line',\n        // );\n        // leftAxisLine.setAttribute('x1', padding + leftAxisWidth);\n        // leftAxisLine.setAttribute('x2', padding + leftAxisWidth);\n        // leftAxisLine.setAttribute('y1', padding);\n        // leftAxisLine.setAttribute('y2', height + padding);\n        // leftAxisLine.setAttribute('stroke', '#909498');\n        // svg.appendChild(leftAxisLine);\n\n        const gridlinesEvery = 10;\n        // for (let i = lowerBound; i <= upperBound; i += gridlinesEvery) {\n        for (let i = 0; i <= 100; i += gridlinesEvery) {\n          const line = document.createElementNS(\n            'http://www.w3.org/2000/svg',\n            'line',\n          );\n          line.setAttribute('x1', (leftAxisWidth + paddingX).toFixed());\n          line.setAttribute('x2', (width + leftAxisWidth + paddingX).toFixed());\n\n          // const y = (padding + (1 - ((i - lowerBound) / (upperBound - lowerBound))) * height).toFixed();\n          const y = (paddingY + (1 - i / 100) * height).toFixed();\n          line.setAttribute('y1', y);\n          line.setAttribute('y2', y);\n          line.setAttribute('stroke', '#505458');\n          svg.appendChild(line);\n\n          const text = document.createElementNS(\n            'http://www.w3.org/2000/svg',\n            'text',\n          );\n          text.setAttribute('x', paddingX + leftAxisWidth - 12);\n          // text.setAttribute('y', +y + ((i - lowerBound) / (upperBound - lowerBound)) * 10);\n          text.setAttribute('y', +y + 7);\n          text.setAttribute('text-anchor', 'end');\n\n          text.textContent = `${i}%`;\n          svg.appendChild(text);\n        }\n\n        const points = {\n          pass: [],\n          fail: [],\n          runtimeError: [],\n          compileError: [],\n        };\n\n        for (let i = 0; i < history.length; i++) {\n          const [\n            percent,\n            total,\n            pass,\n            fail,\n            runtimeError,\n            wasmError,\n            compileError,\n            timeout,\n            todo,\n          ] = history[i].results;\n\n          const when = (history[i].time - oldest) / dateRange;\n          const x = (paddingX + leftAxisWidth + when * width).toFixed();\n\n          const run = (n, type) => {\n            const y = (paddingY + (1 - n / total) * height).toFixed();\n            points[type].push(`${x},${y}`);\n          };\n\n          run(pass, 'pass');\n          run(fail, 'fail');\n          run(runtimeError + todo + timeout, 'runtimeError');\n          run(compileError + wasmError, 'compileError');\n        }\n\n        const addLine = (points, color) => {\n          const polyline = document.createElementNS(\n            'http://www.w3.org/2000/svg',\n            'polyline',\n          );\n          polyline.setAttribute('fill', 'none');\n          polyline.setAttribute('stroke', color);\n          polyline.setAttribute('stroke-width', 3);\n          polyline.setAttribute('points', points.join(' '));\n          svg.appendChild(polyline);\n        };\n\n        for (const x in points) {\n          addLine(points[x], colors[x]);\n        }\n      };\n      makeGraph();\n      window.addEventListener('resize', makeGraph);\n    })();\n  </script>\n</body>"
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 5.091796875,
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.80859375,
          "content": "{\n  \"name\": \"porffor\",\n  \"description\": \"a basic experimental wip aot optimizing js -> wasm engine/compiler/runtime in js\",\n  \"version\": \"0.55.15\",\n  \"author\": \"CanadaHonk\",\n  \"license\": \"MIT\",\n  \"scripts\": {},\n  \"dependencies\": {\n    \"acorn\": \"^8.14.0\",\n    \"node-repl-polyfill\": \"^0.1.1\"\n  },\n  \"optionalDependencies\": {\n    \"@babel/parser\": \"^7.24.4\",\n    \"hermes-parser\": \"^0.18.2\",\n    \"meriyah\": \"^4.3.9\"\n  },\n  \"bin\": {\n    \"porf\": \"./runner/index.js\"\n  },\n  \"main\": \"./compiler/wrap.js\",\n  \"type\": \"module\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/CanadaHonk/porffor.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/CanadaHonk/porffor/issues\"\n  },\n  \"homepage\": \"https://porffor.dev\",\n  \"devDependencies\": {\n    \"@codspeed/tinybench-plugin\": \"^3.1.1\",\n    \"tinybench\": \"^2.9.0\"\n  }\n}\n"
        },
        {
          "name": "porf",
          "type": "blob",
          "size": 0.11328125,
          "content": "#!/bin/sh\nnode \"$(dirname \"$0\")/runner/index.js\" \"$@\"\n# deno run -A runner/index.js \"$@\"\n# bun runner/index.js \"$@\"\n"
        },
        {
          "name": "porf.cmd",
          "type": "blob",
          "size": 0.0234375,
          "content": "@echo off\nnode runner %*"
        },
        {
          "name": "publish.js",
          "type": "blob",
          "size": 1.01953125,
          "content": "import { execSync } from 'node:child_process';\nimport fs from 'node:fs';\n\nconst packageJson = fs.readFileSync('package.json', 'utf8');\nconst packageVersion = JSON.parse(packageJson).version;\n\nconst majorminor = packageVersion.split('.').slice(0, 2).join('.');\nconst patch = parseInt(packageVersion.split('.')[2].split(/[^0-9\\-]/)[0]) + 1;\n\n// const rev = fs.readFileSync('.git/refs/heads/main', 'utf8').trim().slice(0, 9);\n// const version = `${majorminor}.${patch}+${rev}`;\nconst version = `${majorminor}.${patch}`;\n\nfs.writeFileSync('package.json', packageJson.replace(`\"${packageVersion}\"`, `\"${version}\"`));\n\nfs.writeFileSync('runner/index.js', fs.readFileSync('runner/index.js', 'utf8')\n  .replace(/globalThis\\.version = '.*?';/, `globalThis.version = '${version}';`));\n\nexecSync(`git add package.json runner/index.js`, { stdio: 'inherit' });\n\n// execSync(`git commit -m \"version: ${version}\"`, { stdio: 'inherit' });\nexecSync(`git commit --amend -C HEAD --no-verify`, { stdio: 'inherit' });\n\nexecSync(`npm publish`, { stdio: 'inherit' });"
        },
        {
          "name": "rhemyn",
          "type": "tree",
          "content": null
        },
        {
          "name": "runner",
          "type": "tree",
          "content": null
        },
        {
          "name": "test262",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}