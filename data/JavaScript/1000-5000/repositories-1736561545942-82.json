{
  "metadata": {
    "timestamp": 1736561545942,
    "page": 82,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sindresorhus/create-dmg",
      "stars": 4743,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1708984375,
          "content": "root = true\n\n[*]\nindent_style = tab\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0224609375,
          "content": "node_modules\nyarn.lock\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "base.r",
          "type": "blob",
          "size": 1.6455078125,
          "content": "data 'TMPL' (128, \"LPic\") {\n\t$\"1344 6566 6175 6C74 204C 616E 6775 6167\"            /* .Default Languag */\n\t$\"6520 4944 4457 5244 0543 6F75 6E74 4F43\"            /* e IDDWRD.CountOC */\n\t$\"4E54 042A 2A2A 2A4C 5354 430B 7379 7320\"            /* NT.****LSTC.sys  */\n\t$\"6C61 6E67 2049 4444 5752 441E 6C6F 6361\"            /* lang IDDWRD.loca */\n\t$\"6C20 7265 7320 4944 2028 6F66 6673 6574\"            /* l res ID (offset */\n\t$\"2066 726F 6D20 3530 3030 4457 5244 1032\"            /*  from 5000DWRD.2 */\n\t$\"2D62 7974 6520 6C61 6E67 7561 6765 3F44\"            /* -byte language?D */\n\t$\"5752 4404 2A2A 2A2A 4C53 5445\"                      /* WRD.****LSTE */\n};\n\ndata 'LPic' (5000) {\n\t$\"0000 0001 0000 0000 0000\"\n};\n\ndata 'STR#' (5000, \"English\") {\n\t$\"0006 0745 6E67 6C69 7368 0541 6772 6565\"            /* ...English.Agree */\n\t$\"0844 6973 6167 7265 6505 5072 696E 7407\"            /* .Disagree.Print. */\n\t$\"5361 7665 2E2E 2E7B 4966 2079 6F75 2061\"            /* Save...{If you a */\n\t$\"6772 6565 2077 6974 6820 7468 6520 7465\"            /* gree with the te */\n\t$\"726D 7320 6F66 2074 6869 7320 6C69 6365\"            /* rms of this lice */\n\t$\"6E73 652C 2070 7265 7373 2022 4167 7265\"            /* nse, press \"Agre */\n\t$\"6522 2074 6F20 696E 7374 616C 6C20 7468\"            /* e\" to install th */\n\t$\"6520 736F 6674 7761 7265 2E20 2049 6620\"            /* e software.  If  */\n\t$\"796F 7520 646F 206E 6F74 2061 6772 6565\"            /* you do not agree */\n\t$\"2C20 7072 6573 7320 2244 6973 6167 7265\"            /* , press \"Disagre */\n\t$\"6522 2E\"                                            /* e\". */\n};\n\ndata 'styl' (5000, \"English\") {\n\t$\"0001 0000 0000 000E 0011 0015 0000 000C\"\n\t$\"0000 0000 0000\"\n};\n"
        },
        {
          "name": "cli.js",
          "type": "blob",
          "size": 5.4169921875,
          "content": "#!/usr/bin/env node\nimport process from 'node:process';\nimport path from 'node:path';\nimport fs from 'node:fs';\nimport {fileURLToPath} from 'node:url';\nimport meow from 'meow';\nimport appdmg from 'appdmg';\nimport plist from 'plist';\nimport Ora from 'ora';\nimport {execa} from 'execa';\nimport addLicenseAgreementIfNeeded from './sla.js';\nimport composeIcon from './compose-icon.js';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nif (process.platform !== 'darwin') {\n\tconsole.error('macOS only');\n\tprocess.exit(1);\n}\n\nconst cli = meow(`\n\tUsage\n\t  $ create-dmg <app> [destination]\n\n\tOptions\n\t  --overwrite          Overwrite existing DMG with the same name\n\t  --identity=<value>   Manually set code signing identity (automatic by default)\n\t  --dmg-title=<value>  Manually set DMG title (must be <=27 characters) [default: App name]\n\n\tExamples\n\t  $ create-dmg 'Lungo.app'\n\t  $ create-dmg 'Lungo.app' Build/Releases\n`, {\n\timportMeta: import.meta,\n\tflags: {\n\t\toverwrite: {\n\t\t\ttype: 'boolean',\n\t\t},\n\t\tidentity: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tdmgTitle: {\n\t\t\ttype: 'string',\n\t\t},\n\t},\n});\n\nlet [appPath, destinationPath] = cli.input;\n\nif (!appPath) {\n\tconsole.error('Specify an app');\n\tprocess.exit(1);\n}\n\nif (!destinationPath) {\n\tdestinationPath = process.cwd();\n}\n\nconst infoPlistPath = path.join(appPath, 'Contents/Info.plist');\n\nlet infoPlist;\ntry {\n\tinfoPlist = fs.readFileSync(infoPlistPath, 'utf8');\n} catch (error) {\n\tif (error.code === 'ENOENT') {\n\t\tconsole.error(`Could not find \\`${path.relative(process.cwd(), appPath)}\\``);\n\t\tprocess.exit(1);\n\t}\n\n\tthrow error;\n}\n\nconst ora = new Ora('Creating DMG');\nora.start();\n\nasync function init() {\n\tlet appInfo;\n\ttry {\n\t\tappInfo = plist.parse(infoPlist);\n\t} catch {\n\t\tconst {stdout} = await execa('/usr/bin/plutil', ['-convert', 'xml1', '-o', '-', infoPlistPath]);\n\t\tappInfo = plist.parse(stdout);\n\t}\n\n\tconst appName = appInfo.CFBundleDisplayName ?? appInfo.CFBundleName;\n\tif (!appName) {\n\t\tthrow new Error('The app must have `CFBundleDisplayName` or `CFBundleName` defined in its `Info.plist`.');\n\t}\n\n\tconst dmgTitle = cli.flags.dmgTitle ?? appName;\n\tconst dmgFilename = `${appName} ${appInfo.CFBundleShortVersionString}.dmg`;\n\tconst dmgPath = path.join(destinationPath, dmgFilename);\n\n\tif (dmgTitle.length > 27) {\n\t\tora.fail('The disk image title cannot exceed 27 characters. This is a limitation in a dependency: https://github.com/LinusU/node-alias/issues/7');\n\t\tprocess.exit(1);\n\t}\n\n\tif (cli.flags.overwrite) {\n\t\ttry {\n\t\t\tfs.unlinkSync(dmgPath);\n\t\t} catch {}\n\t}\n\n\tconst hasAppIcon = appInfo.CFBundleIconFile;\n\tlet composedIconPath;\n\tif (hasAppIcon) {\n\t\tora.text = 'Creating icon';\n\t\tconst appIconName = appInfo.CFBundleIconFile.replace(/\\.icns/, '');\n\t\tcomposedIconPath = await composeIcon(path.join(appPath, 'Contents/Resources', `${appIconName}.icns`));\n\t}\n\n\tconst dmgFormat = 'ULFO'; // ULFO requires macOS 10.11+\n\tconst dmgFilesystem = 'APFS'; // APFS requires macOS 10.13+\n\n\tconst ee = appdmg({\n\t\ttarget: dmgPath,\n\t\tbasepath: process.cwd(),\n\t\tspecification: {\n\t\t\ttitle: dmgTitle,\n\t\t\ticon: composedIconPath,\n\t\t\t//\n\t\t\t// Use transparent background and `background-color` option when this is fixed:\n\t\t\t// https://github.com/LinusU/node-appdmg/issues/135\n\t\t\tbackground: path.join(__dirname, 'assets/dmg-background.png'),\n\t\t\t'icon-size': 160,\n\t\t\tformat: dmgFormat,\n\t\t\tfilesystem: dmgFilesystem,\n\t\t\twindow: {\n\t\t\t\tsize: {\n\t\t\t\t\twidth: 660,\n\t\t\t\t\theight: 400,\n\t\t\t\t},\n\t\t\t},\n\t\t\tcontents: [\n\t\t\t\t{\n\t\t\t\t\tx: 180,\n\t\t\t\t\ty: 170,\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tpath: appPath,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tx: 480,\n\t\t\t\t\ty: 170,\n\t\t\t\t\ttype: 'link',\n\t\t\t\t\tpath: '/Applications',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t});\n\n\tee.on('progress', info => {\n\t\tif (info.type === 'step-begin') {\n\t\t\tora.text = info.title;\n\t\t}\n\t});\n\n\tee.on('finish', async () => {\n\t\ttry {\n\t\t\tora.text = 'Adding Software License Agreement if needed';\n\t\t\tawait addLicenseAgreementIfNeeded(dmgPath, dmgFormat);\n\n\t\t\tora.text = 'Code signing DMG';\n\t\t\tlet identity;\n\t\t\tconst {stdout} = await execa('/usr/bin/security', ['find-identity', '-v', '-p', 'codesigning']);\n\t\t\tif (cli.flags.identity && stdout.includes(`\"${cli.flags.identity}\"`)) {\n\t\t\t\tidentity = cli.flags.identity;\n\t\t\t} else if (!cli.flags.identity && stdout.includes('Developer ID Application:')) {\n\t\t\t\tidentity = 'Developer ID Application';\n\t\t\t} else if (!cli.flags.identity && stdout.includes('Mac Developer:')) {\n\t\t\t\tidentity = 'Mac Developer';\n\t\t\t} else if (!cli.flags.identity && stdout.includes('Apple Development:')) {\n\t\t\t\tidentity = 'Apple Development';\n\t\t\t}\n\n\t\t\tif (!identity) {\n\t\t\t\tconst error = new Error(); // eslint-disable-line unicorn/error-message\n\t\t\t\terror.stderr = 'No suitable code signing identity found';\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait execa('/usr/bin/codesign', ['--sign', identity, dmgPath]);\n\t\t\t} catch (error) {\n\t\t\t\tora.fail(`Code signing failed. The DMG is fine, just not code signed.\\n${error.stderr?.trim() ?? error}`);\n\t\t\t\tprocess.exit(2);\n\t\t\t}\n\n\t\t\tconst {stderr} = await execa('/usr/bin/codesign', [dmgPath, '--display', '--verbose=2']);\n\n\t\t\tconst match = /^Authority=(.*)$/m.exec(stderr);\n\t\t\tif (!match) {\n\t\t\t\tora.fail('Not code signed');\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\n\t\t\tora.info(`Code signing identity: ${match[1]}`).start();\n\t\t\tora.succeed(`Created “${dmgFilename}”`);\n\t\t} catch (error) {\n\t\t\tora.fail(`${error.stderr?.trim() ?? error}`);\n\t\t\tprocess.exit(2);\n\t\t}\n\t});\n\n\tee.on('error', error => {\n\t\tora.fail(`Building the DMG failed. ${error}`);\n\t\tprocess.exit(1);\n\t});\n}\n\ntry {\n\tawait init();\n} catch (error) {\n\tora.fail(error?.stack || error);\n\tprocess.exit(1);\n}\n"
        },
        {
          "name": "compose-icon.js",
          "type": "blob",
          "size": 3.3876953125,
          "content": "import {Buffer} from 'node:buffer';\nimport fs from 'node:fs';\nimport {promisify} from 'node:util';\nimport path from 'node:path';\nimport {fileURLToPath} from 'node:url';\nimport {execa} from 'execa';\nimport {temporaryFile} from 'tempy';\nimport baseGm from 'gm';\nimport icns from 'icns-lib';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nconst gm = baseGm.subClass({imageMagick: true});\nconst readFile = promisify(fs.readFile);\nconst writeFile = promisify(fs.writeFile);\n\nconst filterMap = (map, filterFunction) => Object.fromEntries(Object.entries(map).filter(element => filterFunction(element)).map(([key, item]) => [key, item]));\n\n// Drive icon from `/System/Library/Extensions/IOStorageFamily.kext/Contents/Resources/Removable.icns``\nconst baseDiskIconPath = `${__dirname}/disk-icon.icns`;\n\nconst biggestPossibleIconType = 'ic10';\n\nasync function baseComposeIcon(type, appIcon, mountIcon, composedIcon) {\n\tmountIcon = gm(mountIcon);\n\tappIcon = gm(appIcon);\n\n\tconst [appIconSize, mountIconSize] = await Promise.all([\n\t\tpromisify(appIcon.size.bind(appIcon))(),\n\t\tpromisify(appIcon.size.bind(mountIcon))(),\n\t]);\n\n\t// Change the perspective of the app icon to match the mount drive icon\n\tappIcon = appIcon.out('-matte').out('-virtual-pixel', 'transparent').out('-distort', 'Perspective', `1,1  ${appIconSize.width * 0.08},1     ${appIconSize.width},1  ${appIconSize.width * 0.92},1     1,${appIconSize.height}  1,${appIconSize.height}     ${appIconSize.width},${appIconSize.height}  ${appIconSize.width},${appIconSize.height}`);\n\n\t// Resize the app icon to fit it inside the mount icon, aspect ration should not be kept to create the perspective illution\n\tappIcon = appIcon.resize(mountIconSize.width / 1.58, mountIconSize.height / 1.82, '!');\n\n\tconst temporaryAppIconPath = temporaryFile({extension: 'png'});\n\tawait promisify(appIcon.write.bind(appIcon))(temporaryAppIconPath);\n\n\t// Compose the two icons\n\tconst iconGravityFactor = mountIconSize.height * 0.063;\n\tmountIcon = mountIcon.composite(temporaryAppIconPath).gravity('Center').geometry(`+0-${iconGravityFactor}`);\n\n\tcomposedIcon[type] = await promisify(mountIcon.toBuffer.bind(mountIcon))();\n}\n\nconst hasGm = async () => {\n\ttry {\n\t\tawait execa('gm', ['-version']);\n\t\treturn true;\n\t} catch (error) {\n\t\tif (error.code === 'ENOENT') {\n\t\t\treturn false;\n\t\t}\n\n\t\tthrow error;\n\t}\n};\n\nexport default async function composeIcon(appIconPath) {\n\tif (!await hasGm()) {\n\t\treturn baseDiskIconPath;\n\t}\n\n\tconst baseDiskIcons = filterMap(icns.parse(await readFile(baseDiskIconPath)), ([key]) => icns.isImageType(key));\n\tconst appIcon = filterMap(icns.parse(await readFile(appIconPath)), ([key]) => icns.isImageType(key));\n\n\tconst composedIcon = {};\n\tawait Promise.all(Object.entries(appIcon).map(async ([type, icon]) => {\n\t\tif (baseDiskIcons[type]) {\n\t\t\treturn baseComposeIcon(type, icon, baseDiskIcons[type], composedIcon);\n\t\t}\n\n\t\tconsole.warn('There is no base image for this type', type);\n\t}));\n\n\tif (!composedIcon[biggestPossibleIconType]) {\n\t\t// Make sure the highest-resolution variant is generated\n\t\tconst largestAppIcon = Object.values(appIcon).sort((a, b) => Buffer.byteLength(b) - Buffer.byteLength(a))[0];\n\t\tawait baseComposeIcon(biggestPossibleIconType, largestAppIcon, baseDiskIcons[biggestPossibleIconType], composedIcon);\n\t}\n\n\tconst temporaryComposedIcon = temporaryFile({extension: 'icns'});\n\n\tawait writeFile(temporaryComposedIcon, icns.format(composedIcon));\n\n\treturn temporaryComposedIcon;\n}\n"
        },
        {
          "name": "disk-icon.icns",
          "type": "blob",
          "size": 1932.0478515625,
          "content": null
        },
        {
          "name": "fixtures",
          "type": "tree",
          "content": null
        },
        {
          "name": "icon-example-app.png",
          "type": "blob",
          "size": 61.8447265625,
          "content": null
        },
        {
          "name": "icon-example.png",
          "type": "blob",
          "size": 714.3662109375,
          "content": null
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.0908203125,
          "content": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.9580078125,
          "content": "{\n\t\"name\": \"create-dmg\",\n\t\"version\": \"7.0.0\",\n\t\"description\": \"Create a good-looking DMG for your macOS app in seconds\",\n\t\"license\": \"MIT\",\n\t\"repository\": \"sindresorhus/create-dmg\",\n\t\"funding\": \"https://github.com/sponsors/sindresorhus\",\n\t\"author\": {\n\t\t\"name\": \"Sindre Sorhus\",\n\t\t\"email\": \"sindresorhus@gmail.com\",\n\t\t\"url\": \"https://sindresorhus.com\"\n\t},\n\t\"type\": \"module\",\n\t\"bin\": {\n\t\t\"create-dmg\": \"./cli.js\"\n\t},\n\t\"engines\": {\n\t\t\"node\": \">=18\"\n\t},\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"files\": [\n\t\t\"cli.js\",\n\t\t\"compose-icon.js\",\n\t\t\"assets\",\n\t\t\"disk-icon.icns\",\n\t\t\"sla.js\",\n\t\t\"base.r\"\n\t],\n\t\"keywords\": [\n\t\t\"cli-app\",\n\t\t\"cli\",\n\t\t\"create\",\n\t\t\"dmg\",\n\t\t\"disk\",\n\t\t\"image\",\n\t\t\"macos\",\n\t\t\"mac\",\n\t\t\"app\",\n\t\t\"application\",\n\t\t\"apple\"\n\t],\n\t\"dependencies\": {\n\t\t\"appdmg\": \"^0.6.6\",\n\t\t\"execa\": \"^8.0.1\",\n\t\t\"gm\": \"^1.25.0\",\n\t\t\"icns-lib\": \"^1.0.1\",\n\t\t\"meow\": \"^13.1.0\",\n\t\t\"ora\": \"^8.0.1\",\n\t\t\"plist\": \"^3.1.0\",\n\t\t\"tempy\": \"^3.1.0\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^6.1.1\",\n\t\t\"xo\": \"^0.56.0\"\n\t}\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 2.978515625,
          "content": "# create-dmg\n\n> Create a good-looking [DMG](https://en.wikipedia.org/wiki/Apple_Disk_Image) for your macOS app in seconds\n\nImagine you have finished a macOS app, exported it from Xcode, and now want to distribute it to users. The most common way of distributing an app outside the Mac App Store is by putting it in a `.dmg` file. These are hard to create, especially good-looking ones. You can either pay for a GUI app where you have to customize an existing design or you can run some homebrewed Bash script and you still have to design it. This tool does everything for you, so you can play with your 🐈 instead.\n\n<img src=\"screenshot-cli.gif\">\n\n*This tool is intentionally opinionated and simple. I'm not interested in adding lots of options.*\n\n## Install\n\nEnsure you have [Node.js](https://nodejs.org) 18 or later installed. Then run the following:\n\n```sh\nnpm install --global create-dmg\n```\n\n## Usage\n\n```\n$ create-dmg --help\n\n  Usage\n    $ create-dmg <app> [destination]\n\n  Options\n    --overwrite          Overwrite existing DMG with the same name\n    --identity=<value>   Manually set code signing identity (automatic by default)\n    --dmg-title=<value>  Manually set DMG title (must be <=27 characters) [default: App name]\n\n  Examples\n    $ create-dmg 'Lungo.app'\n    $ create-dmg 'Lungo.app' Build/Releases\n```\n\n## DMG\n\nThe DMG requires macOS 10.13 or later and has the filename `App Name 0.0.0.dmg`. For example, `Lungo 1.0.0.dmg`.\n\nIt will try to code sign the DMG, but the DMG is still created and fine even if the code signing fails, for example if you don't have a developer certificate.\n\n**Important:** Don't forget to [notarize your DMG](https://stackoverflow.com/a/60800864/64949).\n\n<img src=\"screenshot-dmg.png\" width=\"772\">\n\n### Software license agreement\n\nIf either `license.txt`, `license.rtf`, or `sla.r` ([raw SLAResources file](https://download.developer.apple.com/Developer_Tools/software_licensing_for_udif/slas_for_udifs_1.0.dmg)) are present in the same directory as the app, it will be added as a software agreement when opening the image. The image will not be mounted unless the user indicates agreement with the license.\n\n`/usr/bin/rez` (from [Command Line Tools for Xcode](https://developer.apple.com/download/more/)) must be installed.\n\n### DMG icon\n\n[GraphicsMagick](http://www.graphicsmagick.org) is required to create the custom DMG icon that's based on the app icon and the macOS mounted device icon.\n\n#### Steps using [Homebrew](https://brew.sh)\n\n```sh\nbrew install graphicsmagick imagemagick\n```\n\n#### Icon example\n\nOriginal icon → DMG icon\n\n<img src=\"icon-example-app.png\" width=\"300\"><img src=\"icon-example.png\" width=\"300\">\n\n## Related\n\n- [Defaults](https://github.com/sindresorhus/Defaults) - Swifty and modern UserDefaults\n- [LaunchAtLogin](https://github.com/sindresorhus/LaunchAtLogin) - Add “Launch at Login” functionality to your macOS\n- [My apps](https://sindresorhus.com/apps)\n- [More…](https://github.com/search?q=user%3Asindresorhus+language%3Aswift+archived%3Afalse&type=repositories)\n"
        },
        {
          "name": "screenshot-cli.gif",
          "type": "blob",
          "size": 641.7958984375,
          "content": null
        },
        {
          "name": "screenshot-dmg.png",
          "type": "blob",
          "size": 175.7939453125,
          "content": null
        },
        {
          "name": "sla.js",
          "type": "blob",
          "size": 4.1708984375,
          "content": "import {Buffer} from 'node:buffer';\nimport process from 'node:process';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport {fileURLToPath} from 'node:url';\nimport {execa} from 'execa';\nimport {temporaryFile} from 'tempy';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nfunction getRtfUnicodeEscapedString(text) {\n\tlet result = '';\n\tfor (let index = 0; index < text.length; index++) {\n\t\tif (text[index] === '\\\\' || text[index] === '{' || text[index] === '}' || text[index] === '\\n') {\n\t\t\tresult += `\\\\${text[index]}`;\n\t\t} else if (text[index] === '\\r') {\n\t\t\t// ignore\n\t\t} else if (text.codePointAt(index) <= 0x7F) {\n\t\t\tresult += text[index];\n\t\t} else {\n\t\t\tresult += `\\\\u${text.codePointAt(index)}?`;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction wrapInRtf(text) {\n\treturn '\\t$\"7B5C 7274 6631 5C61 6E73 695C 616E 7369\"\\n'\n\t\t+ '\\t$\"6370 6731 3235 325C 636F 636F 6172 7466\"\\n'\n\t\t+ '\\t$\"3135 3034 5C63 6F63 6F61 7375 6272 7466\"\\n'\n\t\t+ '\\t$\"3833 300A 7B5C 666F 6E74 7462 6C5C 6630\"\\n'\n\t\t+ '\\t$\"5C66 7377 6973 735C 6663 6861 7273 6574\"\\n'\n\t\t+ '\\t$\"3020 4865 6C76 6574 6963 613B 7D0A 7B5C\"\\n'\n\t\t+ '\\t$\"636F 6C6F 7274 626C 3B5C 7265 6432 3535\"\\n'\n\t\t+ '\\t$\"5C67 7265 656E 3235 355C 626C 7565 3235\"\\n'\n\t\t+ '\\t$\"353B 7D0A 7B5C 2A5C 6578 7061 6E64 6564\"\\n'\n\t\t+ '\\t$\"636F 6C6F 7274 626C 3B3B 7D0A 5C70 6172\"\\n'\n\t\t+ '\\t$\"645C 7478 3536 305C 7478 3131 3230 5C74\"\\n'\n\t\t+ '\\t$\"7831 3638 305C 7478 3232 3430 5C74 7832\"\\n'\n\t\t+ '\\t$\"3830 305C 7478 3333 3630 5C74 7833 3932\"\\n'\n\t\t+ '\\t$\"305C 7478 3434 3830 5C74 7835 3034 305C\"\\n'\n\t\t+ '\\t$\"7478 3536 3030 5C74 7836 3136 305C 7478\"\\n'\n\t\t+ '\\t$\"616C 5C70 6172 7469 6768 7465 6E66 6163\"\\n'\n\t\t+ '\\t$\"746F 7230 0A0A 5C66 305C 6673 3234 205C\"\\n'\n\t\t+ `${serializeString('63663020' + Buffer.from(getRtfUnicodeEscapedString(text)).toString('hex').toUpperCase() + '7D')}`;\n}\n\nfunction serializeString(text) {\n\treturn '\\t$\"' + text.match(/.{1,32}/g).map(x => x.match(/.{1,4}/g).join(' ')).join('\"\\n\\t$\"') + '\"';\n}\n\nexport default async function sla(dmgPath, dmgFormat) {\n\t// Valid SLA filenames\n\tconst rawSlaFile = path.join(process.cwd(), 'sla.r');\n\tconst rtfSlaFile = path.join(process.cwd(), 'license.rtf');\n\tconst txtSlaFile = path.join(process.cwd(), 'license.txt');\n\n\tconst hasRaw = fs.existsSync(rawSlaFile);\n\tconst hasRtf = fs.existsSync(rtfSlaFile);\n\tconst hasTxt = fs.existsSync(txtSlaFile);\n\n\tif (!hasRaw && !hasRtf && !hasTxt) {\n\t\treturn;\n\t}\n\n\tconst temporaryDmgPath = temporaryFile({extension: 'dmg'});\n\n\t// UDCO or UDRO format is required to be able to unflatten\n\t// Convert and unflatten DMG (original format will be restored at the end)\n\tawait execa('/usr/bin/hdiutil', ['convert', '-format', 'UDCO', dmgPath, '-o', temporaryDmgPath]);\n\tawait execa('/usr/bin/hdiutil', ['unflatten', temporaryDmgPath]);\n\n\tif (hasRaw) {\n\t\t// If user-defined sla.r file exists, add it to dmg with 'rez' utility\n\t\tawait execa('/usr/bin/rez', ['-a', rawSlaFile, '-o', temporaryDmgPath]);\n\t} else {\n\t\t// Generate sla.r file from text/rtf file\n\t\t// Use base.r file as a starting point\n\t\tlet data = fs.readFileSync(path.join(__dirname, 'base.r'), 'utf8');\n\t\tlet plainText = '';\n\n\t\t// Generate RTF version and preserve plain text\n\t\tdata += '\\ndata \\'RTF \\' (5000, \"English\") {\\n';\n\n\t\tif (hasRtf) {\n\t\t\tdata += serializeString((fs.readFileSync(rtfSlaFile).toString('hex').toUpperCase()));\n\t\t\t({stdout: plainText} = await execa('/usr/bin/textutil', ['-convert', 'txt', '-stdout', rtfSlaFile]));\n\t\t} else {\n\t\t\tplainText = fs.readFileSync(txtSlaFile, 'utf8');\n\t\t\tdata += wrapInRtf(plainText);\n\t\t}\n\n\t\tdata += '\\n};\\n';\n\n\t\t// Generate plain text version\n\t\t// Used as an alternate for command-line deployments\n\t\tdata += '\\ndata \\'TEXT\\' (5000, \"English\") {\\n';\n\t\tdata += serializeString(Buffer.from(plainText, 'utf8').toString('hex').toUpperCase());\n\t\tdata += '\\n};\\n';\n\n\t\t// Save sla.r file, add it to DMG with `rez` utility\n\t\tconst temporarySlaFile = temporaryFile({extension: 'r'});\n\t\tfs.writeFileSync(temporarySlaFile, data, 'utf8');\n\t\tawait execa('/usr/bin/rez', ['-a', temporarySlaFile, '-o', temporaryDmgPath]);\n\t}\n\n\t// Flatten and convert back to original dmgFormat\n\tawait execa('/usr/bin/hdiutil', ['flatten', temporaryDmgPath]);\n\tawait execa('/usr/bin/hdiutil', ['convert', '-format', dmgFormat, temporaryDmgPath, '-o', dmgPath, '-ov']);\n}\n"
        },
        {
          "name": "stuff",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.js",
          "type": "blob",
          "size": 1.4404296875,
          "content": "import path from 'node:path';\nimport fs from 'node:fs';\nimport {fileURLToPath} from 'node:url';\nimport test from 'ava';\nimport {execa} from 'execa';\nimport {temporaryDirectory} from 'tempy';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\ntest('main', async t => {\n\tconst cwd = temporaryDirectory();\n\n\ttry {\n\t\tawait execa(path.join(__dirname, 'cli.js'), ['--identity=0', path.join(__dirname, 'fixtures/Fixture.app')], {cwd});\n\t} catch (error) {\n\t\t// Silence code signing failure\n\t\tif (!error.message.includes('No suitable code signing')) {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tt.true(fs.existsSync(path.join(cwd, 'Fixture 0.0.1.dmg')));\n});\n\ntest('binary plist', async t => {\n\tconst cwd = temporaryDirectory();\n\n\ttry {\n\t\tawait execa(path.join(__dirname, 'cli.js'), ['--identity=0', path.join(__dirname, 'fixtures/Fixture-with-binary-plist.app')], {cwd});\n\t} catch (error) {\n\t\t// Silence code signing failure\n\t\tif (!error.message.includes('No suitable code signing')) {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tt.true(fs.existsSync(path.join(cwd, 'Fixture 0.0.1.dmg')));\n});\n\ntest('app without icon', async t => {\n\tconst cwd = temporaryDirectory();\n\n\ttry {\n\t\tawait execa(path.join(__dirname, 'cli.js'), ['--identity=0', path.join(__dirname, 'fixtures/Fixture-no-icon.app')], {cwd});\n\t} catch (error) {\n\t\t// Silence code signing failure\n\t\tif (!error.message.includes('No suitable code signing')) {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tt.true(fs.existsSync(path.join(cwd, 'Fixture 0.0.1.dmg')));\n});\n"
        }
      ]
    }
  ]
}