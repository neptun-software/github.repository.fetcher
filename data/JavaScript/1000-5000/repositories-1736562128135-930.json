{
  "metadata": {
    "timestamp": 1736562128135,
    "page": 930,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jipegit/OSXAuditor",
      "stars": 3127,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4462890625,
          "content": "*.py[cod]\n\n# C extensions\n*.so\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\nlib\nlib64\n__pycache__\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\nnosetests.xml\n*.txt\n*.html\n*.pptx\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n\n# folders\nenv-*\nlibs\nsrc\n\n# MAC OS X stuff\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nIcon?\nehthumbs.db\nThumbs.db\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.052734375,
          "content": "# Contribution Guide\n\nThis page describes how to contribute changes to OSXAuditor.\n\nPlease do **not** create a pull request without reading this guide first. Failure to do so may result in the **rejection** of the pull request.\n\n## Philosophy\nHere are some core ideas to keep in mind for contributing to OSXAuditor\n\n* At it's core OSXAuditor must be as handy as possible for the Responder.\n* OSXAuditor is most effective and helpful if it can run on a stock system without installing any additional tools.\n* Must work properly on either live or dead os x system (ie. hard drive copy).\n* All output must go through the printandlog() function so that people can add new output format easily.\n* All the hashes go into the global hash db.\n\n## Submitting to OSXAuditor\n\n### Submitting Issues\n[Issues](https://github.com/jipegit/OSXAuditor/issues) are helpful if you're experiencing issues or want to suggest a feature (code is even better though). Please make sure you provide as much detail as possible including stack traces, screenshots, and code samples.\n\n### Submitting Code\nIf your changes need to be modified due to some reviews, it is less clutter to tweak an isolated feature branch and push it again.\n\nWe welcome pull requests. Here's a quick guide:\n\n1. Fork the repo.\n\n2. Create a feature branch.\n\n3. Build.\n\n4. Push to your fork and submit a pull request.\n\nAt this point you're waiting on us. We like to at least comment on, if not accept, pull requests within three business days (and, typically, one business day). We may suggest some changes or improvements or alternatives.\n\nSome things that will increase the chance that your pull request is accepted,:\n\n* Use Python idioms and helpers\n* Update the documentation, the surrounding one, examples elsewhere, guides, whatever is affected by your contribution\n\n### Syntax\n\n* Four spaces, no tabs.\n* No trailing whitespace.\n* Prefer &&/|| over and/or.\n* a = b and not a=b.\n* Follow the conventions you see used in the source already.\n* When in doubt default to [PEP 8 -- Style Guide for Python Code](http://legacy.python.org/dev/peps/pep-0008/).\n"
        },
        {
          "name": "DesignAndCapabilities_v0.4.png",
          "type": "blob",
          "size": 91.5244140625,
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.65234375,
          "content": "OS X Auditor \nCopyright (C) 2013 Jean-Philippe Teissier\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.3876953125,
          "content": "# OS X Auditor\n\n![Maintenance](https://img.shields.io/badge/Maintained%3F-no-red.svg)\n![No Maintenance Intended](http://unmaintained.tech/badge.svg)\n\nOS X Auditor is a free Mac OS X computer forensics tool.\n\nOS X Auditor parses and hashes the following artifacts on the running system or a copy of a system you want to analyze:\n * the kernel extensions\n * the system agents and daemons\n * the third party's agents and daemons\n * the old and deprecated system and third party's startup items\n * the users' agents\n * the users' downloaded files\n * the installed applications\n\nIt extracts:\n * the users' quarantined files\n * the users' Safari history, downloads, topsites, LastSession, HTML5 databases and localstore\n * the users' Firefox cookies, downloads, formhistory, permissions, places and signons\n * the users' Chrome history and archives history, cookies, login data, top sites, web data, HTML5 databases and local storage\n * the users' social and email accounts\n * the WiFi access points the audited system has been connected to (and tries to geolocate them)\n\nIt also looks for suspicious keywords in the .plist themselves.\n\nIt can verify the reputation of each file on:\n * Team Cymru's MHR\n * VirusTotal\n * your own local database\n\nIt can aggregate all logs from the following directories into a zipball:\n * /var/log (-> /private/var/log)\n * /Library/logs\n * the user's ~/Library/logs\n\nFinally, the results can be:\n * rendered as a simple txt log file (so you can cat-pipe-grep in them… or just grep)\n * rendered as a HTML log file\n * sent to a Syslog server\n\n## Author\n\nJean-Philippe Teissier - @Jipe_ & al.\n\n## Development status\n\n**OS X Auditor IS NO LONGER MAINTAINED - YOU SHOULD NOT USE IT** \n\n## Support\n\nOS X Auditor started as a week-end project and is no longer maintained. It has been forked by the great guys @ Yelp who created osxcollector.\n\nI do recommend you to use to osxcollector (https://github.com/Yelp/osxcollector)\n\n## How to install\n\nJust copy all files from GitHub.\n\n## Dependencies\n\nIf you plan to run OS X Auditor on a Mac, you will get a full plist parsing support with the OS X Foundation through pyobjc:\n * `pip install pyobjc`\n\nIf you can't install pyobjc or if you plan to run OS X Auditor on another OS than Mac OS X, you may experience some troubles with the plist parsing:\n * `pip install biplist`\n * `pip install plist`\n\nThese dependencies will be removed when a working native plist module will be available in python\n\n## How to run\n\n * OS X Auditor runs well with python >= 2.7.2 (2.7.9 is OK). It does not run with a different version of python yet (due to the plist nightmare)\n * OS X Auditor is maintained to work on the lastest OS X version. It will do its best on older OS X versions.\n * You must run it as root (or via sudo) if you want to use is on a running system, otherwise it won't be able to access some system and other users' files\n * If you're using API keys from environment variables (see below), you need to use the ```sudo -E``` to use the users environment variables\n\nType `osxauditor.py -h` to get all the available options, then run it with the selected options\n\neg. `[sudo -E] python osxauditor.py -a -m -l localhashes.db -H log.html`\n\n### Setting Environment Variables\n\n[VirusTotal API](https://www.virustotal.com/en/documentation/public-api/):\n> export VT_API_KEY=aaaabbbbccccddddeeee\n\n## Changelog\n\n### 0.4.3\n* FIX: (lots of) Bug fixes  - See https://github.com/jipegit/OSXAuditor/issues\n* CHANGE: Malware.lu hash check removed - service not available anymore\n\n### 0.4.2\n * CHANGE: Moved API keys from in the code to environment variables\n\n### 0.4.1\n * CHANGE: Search for generic backdoors in LaunchAgentPlist\n\n### 0.4\n * NEW: extracts events (boot/shutdown, hibernation in/out, sudo commands, usb devices, ttys opened/closed, from the system logs and create a (not readable yet) timeline (-e/eventlogs)\n * NEW: extracts users' LoginItems\n * NEW: extracts users' RecentItems\n * NEW: extracts the LastSession from Safari artifacts\n * NEW: extract system groups and users details\n * FIX: wrong os.path.join() calls\n * FIX: bug in the recursive ParsePackagesDir()\n\n### 0.3.1\n * NEW: provides with the system name, version and build of the audited system\n * NEW: ability to analyze installed Applications (-i/--installedapps)\n * NEW: extracts the Archived History from Google Chrome artifacts\n * NEW: a human readable HTML log report :)\n * FIX: HTMLLog() and SYSLOGLog() now handle exceptions\n * FIX: ParsePackagesDir() is now recursive and only tries to parse apps or kernel extensions. Some DEBUG output added as well\n * FIX: HUGE UTF-8/UNICODE improvement\n * FIX: .DS_Store and .localized files are ignored in ParsePackagesDir()\n\n### 0.3\n * NEW: ability to parse Google Chrome artifacts (History and archives history, Cookies, Login Data, Top Sites, Web Data, HTML5 databases and local storage) with -b/--browsers\n * NEW: ability to extract the Wi-Fi APs the audited system has been connected to from the Airport Preferences and tries to geolocate them using Geomena (-A/--airportprefs). You must use -g/--wifiapgeolocate to enable the geolocation (or set GEOLOCATE_WIFI_AP to True in the code).\n * NEW: ability to extract users' social and email accounts (-U/--usersaccounts)\n * FIX: ability to handle the locked sqlite databases especially while auditing a live system\n * FIX: hashes duplicates removed\n * FIX: better identify md5 in the HTML output\n * CHANGE: indicates if a section (Startup items, Packages directory, Db tables, etc…) is empty to clarify the output\n * CHANGE: the downloads artifacts (-d/--downloads) include the old and new Mail.app default download directories\n\n### 0.2.1\n * CHANGE/FIX: implement a BigFileMd5() function to hash very big files, avoid MemoryError execptions and reduce the memory footprint\n * FIX: UTF-8 entries from LSQuarantineEvent in ParseQuarantines()\n\n### 0.2\n * NEW: ability to send the results to a remote syslogd server (-S)\n * NEW: ability to create a zipball of all the log files found on the audited system (-z)\n * CHANGE: the analysis of startup artifacts includes the old and deprecated StartupItems\n * CHANGE: the analysis of startup artifacts includes the ScriptingAdditions\n * CHANGE: the analysis of quarantined artifact includes the old QuarantineEvents for Mac OS X systems <= 10.6\n * CHANGE: great improvement of plist hangling using the Python ⟷ Objective-C bridge (PyObjC) and OS X Foundation\n * CHANGE: some changes in the options parameters (-t, -l)\n * CHANGE: license changed from CC to GPL\n * CHANGE: debug levels are now more consitent in the output logs\n * CHANGE: a small change with the Bootstrap CSS\n * CHANGE: the VirusTotal lookup is now done in a bulk mode\n * FIX: a bug in ParseLaunchAgents() on plist files containing both Program and ProgramArguments keys\n\n### 0.1\n * Initial Release\n\n## Design & Capabilities\n\n![Design & Capabilities](/DesignAndCapabilities_v0.4.png \"Design & Capabilities\")\n\n\n## Artifacts\n\n### Users\n * Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2\n * Library/Preferences/com.apple.LaunchServices.QuarantineEvents\n * Library/Preferences/com.apple.loginitems.plist\n * Library/Mail Downloads/\n * Library/Containers/com.apple.mail/Data/Library/Mail Downloads\n * Library/Accounts/Accounts3.sqlite\n * Library/Containers/com.apple.mail/Data/Library/Mail/V2/MailData/Accounts.plist\n * Library/Preferences/com.apple.recentitems.plist\n\n * Firefox\n  + Library/Application Support/Firefox/Profiles/\n  + cookies.sqlite\n  + downloads.sqlite\n  + formhistory.sqlite\n  + places.sqlite\n  + signons.sqlite\n  + permissions.sqlite\n  + addons.sqlite\n  + extensions.sqlite\n  + content-prefs.sqlite\n  + healthreport.sqlite\n  + webappsstore.sqlite\n\n * Safari\n  + Library/Safari/\n  + Downloads.plist\n  + History.plist\n  + TopSites.plist\n  + LastSession.plist\n  + Databases\n  + LocalStorage\n\n * Chrome\n  + Library/Application Support/Google/Chrome/Default/\n  + History\n  + Archived History\n  + Cookies\n  + Login Data\n  + Top Sites\n  + Web Data\n  + databases\n  + Local Storage\n\n### System\n * /System/Library/LaunchAgents/\n * /System/Library/LaunchDaemons/\n * /System/Library/ScriptingAdditions/\n * /System/Library/StartupItems/Library/ScriptingAdditions/\n * /System/Library/Extensions/\n * /System/Library/CoreServices/SystemVersion.plist\n * /Library/LaunchAgents/\n * /Library/LaunchDaemons/\n * /Library/StartupItems/\n * /Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist\n * /Library/logs\n * /var/log\n * /etc/localtime\n * StartupParameters.plist\n * /private/var/db/dslocal/nodes/Default/groups/admin.plist\n * /private/var/db/dslocal/nodes/Default/users\n  \n## TODO\n * extract user info from /private/var/db/dslocal/nodes/Default/users\n\n## Related work\n\n### Disk Arbitrator\n\nDisk Arbitrator is Mac OS X forensic utility designed to help the user ensure correct forensic procedures are followed during imaging of a disk device. Disk Arbitrator is essentially a user interface to the Disk Arbitration framework, which enables a program to participate in the management of block storage devices, including the automatic mounting of file systems. When enabled, Disk Arbitrator will block the mounting of file systems to avoid mounting as read-write and violating the integrity of the evidence.\n\nhttps://github.com/aburgh/Disk-Arbitrator\n\n### Volafox\n\nvolafox a.k.a 'Mac OS X Memory Analysis Toolkit' is developed on python 2.x\n\nhttps://code.google.com/p/volafox/\n\n### Mandiant Memoryze(tm) for the Mac\n\nMemoryze for the Mac is free memory forensic software that helps incident responders find evil in memory… on Macs.\nMemoryze for the Mac can acquire and/or analyze memory images.  Analysis can be performed on offline memory images or on live systems.\n\nhttp://www.mandiant.com/resources/download/mac-memoryze\n\n### Volatility MacMemoryForensics\n\nhttps://code.google.com/p/volatility/wiki/MacMemoryForensics\n\n## License\n\nOS X Auditor\nCopyright (C) 2013-2015 Jean-Philippe Teissier\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nBootstrap and JQuery have their own GPL compatible licences.\n"
        },
        {
          "name": "bootstrap",
          "type": "tree",
          "content": null
        },
        {
          "name": "d3-3.2.8",
          "type": "tree",
          "content": null
        },
        {
          "name": "jquery",
          "type": "tree",
          "content": null
        },
        {
          "name": "localhashes.db",
          "type": "blob",
          "size": 22.40234375,
          "content": "# \n#  Local malicious hashes database from OS X Auditor \n# \ne2b81bed4472087dca00bee18acbce04 OSX/Crisis_Morccut_DaVinci\n7364058a360ca4365862568607a68fde OSX/TrojanBitcoinMiner\n193113f99f447c9451ff573ccb5d508a OSX/SMSSend_VKMusic\n5d46cdbfd3b193dbd0e5e41e746d54f1 OSX/SMSSend_VKMusic\n59085a026f138b8658c96e0dfd4d96f5 OSX/SMSSend_VKMusic\n0ec55685affc322a5d7be2e9ca1f9cbf OSX/PintSized\n19fe17ea596b57e5523be9da3a7475c8 OSX/PintSized\n24a9cc8107457b355c1d632da2d36b8e OSX/PintSized\n27f241c64303e4e2d1d94d3143a48eb9 OSX/PintSized\n2b9b84f0612d6f9d7efb705dd7522f83 OSX/PintSized\n34cee92669e0c60a9dbafae7319f49db OSX/PintSized\n3a861b8526e397b3684a99f363ec145b OSX/PintSized\n59424d4a567ae809f96afc56d22892b2 OSX/PintSized\nd3f151b246deb74890c612606c6ad044 OSX/PintSized\nf419dfb35a0d220c4c53c4a087c91d5e OSX/PintSized\ne88027e4bfc69b9d29caef6bae0238e8 OSX/Macontrol\nb56ad86a4bacef92ef46d36eabef6467 OSX/wirenet_NetWeirdRC\nd048f7ae2d244a264e58af67b1a20db0 OSX/wirenet_NetWeirdRC\nc3b48db40cf810cb63bf36262b7c5b19 OSX/wirenet_NetWeirdRC\n6f055150861d8d6e145e9aca65f92822 OSX/Crisis_Morccut_DaVinci\n42c112036e319ed8df0f55c7f4c0da85 OSX/Crisis_Morccut_DaVinci\nfaab883598c8c379acfd0b9dccc93d0c OSX/Crisis_Morccut_DaVinci\n9d02cef9115b6427c7133078686a38be OSX/Crisis_Morccut_DaVinci\n89fa92a0b50bae35f5b5ed28e120f1b2 OSX/Crisis_Morccut_DaVinci\nee84c5d626bf8450782f24fd7d2f3ae6 OSX/CallMe\nf9fabd1637d190e0e0a5c117c71921fc OSX/KitM\nd43dec59fa8e6629ff46ae9e56f698d8 OSX/KitM\n2e5345da904bba1c116b818fc9d5ab8f OSX/KitM\n39faa22eb9d6b750ec345efcb38189f5 OSX/KitM\n3aa9c558d4d5f1b2a6d3ce47aa26315f OSX/HackBack\nad6bab99111365fa7b2014f59fc9d454 OSX/Imuler.D\n39d5df0e5bea2f82a310b9aad535354c OSX/Imuler.D\nc88be8b6318b961cb7403d3e5a4ee18f OSX/Imuler.D\n2d84bfbae1f1b7ab0fc1ca9dd372d35e OSX/Revir.C\n893173d0b12a6c6912fb6134dfecaa5b OSX/Flashback.A\nc898cde665db8d62fea634c28e284139 OSX/Flashback\n8ACFEBD614C5A9D4FBC65EDDB1444C58 OSX/Flashback\n434C675B67AB088C87C27C7B0BC8ECC2 OSX/Flashback\n908116a30f53edf9d1749e3f0f267680 OSX/SabPubDoc\nc024e159a96f3292915b257070fc3325 OSX/SabPubDoc\n38958d10d41920eccdd9217d2574613c OSX/SabPab\n3aacd24db6804515b992147924ed3811 OSX/SabPab\n1bd634f12247711f50034458f98747bf OSX/SabPab\n97e3bd86f1eaded410810dccd0cbf050 OSX/Trojan.Maljava\n46c8ca78af43012388936345336d203b OSX/Lamadi.A \n553eceb153fa5729cd9e436899f668c8 Malware\n7808fff60c4a3b4ba25137af10c15a55 Malware\nb760f9652ee4069e69f8f67597f8b91b Malware\nfcb6605d97fa6d200a9dfb238f9a6fce Malware\ncff9093a58ac950fc7bfe5f9a3069288 Malware\n5c42f17be091413d092e7d0b3ecec50e Malware\n5156121e53d43372fd24e7239c6cccbb Malware\na24f232a8a0f92cf6adee1ed1883cf81 Malware\nfeff77d65c55c89faebc617068c1b443 Malware\n5a0f51e226531cefa9fb06432faf552d Malware\nab9faf1a370c30bd80eaa62c69588675 Malware\nb5c4644b397242c699eed404522188a7 Malware\n9d02cef9115b6427c7133078686a38be Malware\n1536dc31e4a81a729ad469fb63a9e1fc Malware\n1232852f7eac8957ae216d4a7c94ee46 Malware\n2336b78d9627e1e82e7a3d84a05cba31 Malware\n9d1a7090e1f4b158feb251bf276163e0 Malware\n2b992010503bb08c6ccc696ab917f884 Malware\n1caa62aef2b89bae3ada89594d5316d8 Malware\n4eccdf25beb6887a73e220e4c05615df Malware\n7979f43c18ba0d33ddb54613a1395d3f Malware\n3bb477dd5f402efee31855cbde05beb1 Malware\n60be0eeea4220bd55fd202ef556a7b05 Malware\n0b79e54e0a6efac2bf32062683b5b6f5 Malware\n8267339d36e1d168ee48137fc5a3ad60 Malware\n0e4cfa58fe57deb39b525e3b1738c0ab Malware\nc35250d4c287fbdba88b21d87c753f45 Malware\nd165bf8dfd43d6211259fd5a7b7b7586 Malware\n59a94a588a321e0f749a9b1c9669d69a Malware\n492c57e8e0e5d4ee249752417b007d42 Malware\n334cc2113aabc9a0f29d3f7870e1a967 Malware\n38ae37bedd14867351c70d7d5bfdd689 Malware\nc6d323c3e180ed39133f5f741d92a27a Malware\nc1e798d353de0e13d6b4e9cd34cbd9dd Malware\nee91cd33cf624fb7cd044de008195ac9 Malware\na7e980ed319219fc8e33b1169517af5c Malware\n547e107e7cb0bc7739f4997b560b37a6 Malware\n9473a1501981acbadebb571fe4b07996 Malware\n3b3bd7f9afdd684bfed260fab874a54c Malware\naa0274b4d13dc0bc46995f9f7c4b7437 Malware\n3f5dc431e05c9e4bfacb48da64861054 Malware\n4834c1bfc434c607bff8d05e138393bd Malware\n25729b9ef6a74b0b36461e35fcaaa64a Malware\n0992559277832c5beb5ead147be60613 Malware\nf6ea4404e82cb4b903344ddb8e53631b Malware\n96f6cced72f0633c9a157260018f8d9f Malware\n7a449e683784bb2df45a597ae6569010 Malware\n0a0eec8e8000986a2ac6441f4d0a326e Malware\nc4a8c484e3ac6fc428b9e2dcaa7bc9d2 Malware\na35a53e54789678820dd57e780c62a82 Malware\n1b28c179ee547f189c079ee3dd5cc4c3 Malware\n8e93947dfd1b11a77a04429bd8b32ced Malware\nf5754e584edb474439316116e4687949 Malware\nc9ffcc5bd398bc24f3072c879c976f94 Malware\n40c32ff61d92a46d6c8b343269ed78db Malware\n34cb5ee97083a00005faa92bc368358a Malware\n8a96052288369f8c36496fafe9b371b7 Malware\n82d63fb17eb0c0f978843cd0a0ab4811 Malware\n0d0a846da38878c3955a712c66272f35 Malware\n11f87249a89fb1928deceee048d8f193 Malware\n108df45159cf4a4006c1232e50964c86 Malware\naa314c82ffc7332acd5d195cd61dcacd Malware\n10be8d1b61273e99e0b967cf7bf2d8d0 Malware\neb80972280171eecf9d1d593c8824679 Malware\n610fd1bad75a7e69b0b5065918446262 Malware\nc66acf607e9c1dbd0e8694253028afc1 Malware\n58967da943fe8608796fd618f5cec939 Malware\nafe0967ee94c23b566d9866d1fbbc064 Malware\n96a652e473f4ffdac6cbbc57cbba2617 Malware\n17c2bcad1da186b8e742dcdfe513ee5f Malware\n181ec64a4230ec0c612ce3adf832c01b Malware\ne6e5cb1d05419d49f463557a9e18038f Malware\n42fa413e01f97be40add403d72b97542 Malware\n9c24c1770fa7bc67a11f37271c6eef2c Malware\nede75b5eb0801edd27d23a60bbc2cae0 Malware\n3424e5cf2f4d3ffeecfd843e2f853558 Malware\neae482ece750ca6e581f68c448052b41 Malware\n6be554dbbd70725590018f3a27e6e765 Malware\n68640486cf99d93791c95ead4dbf46ab Malware\n6506ee2dafd1c64fc98f182afc2ab4c0 Malware\n3a41bb59e2946a66bbd03a8b4d51510b Malware\n1b36471090a6121cf0bdf9b658526cb8 Malware\n29d644874546346a0d1e33bd991bbf7a Malware\n3b33d5a97a7384801307bb868802b6fa Malware\n0e8b1e6cc22f9db7244baa2c7c78176e Malware\nb3a9f21dfa95ee0093b30bdf181f62e4 Malware\n0b051a2163bee9873430423a4f71b115 Malware\n781309d5783b10454d000a1e211096ba Malware\n5a823723ffcc4d704bd02ef076a57c8e Malware\n649bb9915e2efe06a59684cbc513f146 Malware\nfdaa88d880e0f83377ca9a9bb88a20a4 Malware\n397b125b284a028bdc79fdee014c0af4 Malware\n5075d93874c7624ba2750c0a8f441e42 Malware\n121ae5e9b956b1963cbb64cd6151cf26 Malware\n2057ed4b8ecd9fd02647ea160d359dcc Malware\nd914bb80b726bb63e038f1e4f445aefe Malware\nfe617cfb47f042524509cccfdd0e71c0 Malware\nb595c0728a39906e82eaa3aae50fbe39 Malware\nc85a25e7587e7faf53a5a4708a17ff05 Malware\n02a025f6db8937e45843246c133a6137 Malware\naaae90c7128ea200cdf768c243d06c46 Malware\n8cfa05d16c5aeb401d52d775ab9e1a2a Malware\n5ce2c14bf58e6dae91bfb7e3c58d5f27 Malware\n7a79dedf3cc672e917747ebd5865f3c7 Malware\n4729edd937d6758dcd7f8a253478f53f Malware\nab8928eb72940b9ba7258049803ed358 Malware\ne74d5915d039b6641ae50d65b147ddf4 Malware\n2fd887b9e07573e8dedfe8bb39db11e8 Malware\nc877931b0503d2f544676951257b9954 Malware\naa713e62eeba6ec23e7ed7c0304bae2d Malware\ne649692ef7b61878f94c05ce684e353a Malware\nc74fa901a170cc6ad98353d5beebdfed Malware\ndd4c782ed178ebb922bc85015e449148 Malware\nc0d5e3f0b414ae95144460b29c27ff24 Malware\na91436ed141f7270ee4d4cc118ff695c Malware\n4460f3d29a4bce8aa8e8ffde4a467b70 Malware\ne6b45faf823387bca7524c4d0329543f Malware\n304a10d364454ee8f2e26979927c0334 Malware\n35ee9556457d6170ea83c800887c1cbe Malware\n8c5447754b75be5add9f686b603441ef Malware\nc16d8fd20f50a5a023fe55ac02cf9e9d Malware\n36a01ef4555311e29fa5530a9a5c63d9 Malware\n0e3c31a45befe6c8acd2cb675f119ce9 Malware\n2b66e9118eec2325f5bdfa176dfedcbb Malware\n20a0c324015f48bcaa0048189e23e4e4 Malware\na73a6648ca6751db0135061a0a4da56c Malware\n53baa2e76f40427a7a1f5e9739d2d5f4 Malware\n88073a7baa594487ef2869648bb2cbe5 Malware\n44d9c0e427d7d76b70fe91700e302734 Malware\nf319adfa32c9ba4d4204a7f4e7340950 Malware\nce409081f34b14da3763a80edcfa33e1 Malware\nc0b048958f01f2942a1bb0a987720518 Malware\n6fc02f9f1b05ee38be51601f3c1842a9 Malware\n8e6e8b93a4aa6d818f196061fe9ac811 Malware\n52aa68554dd7ad6b7818b5b7ac9f4cde Malware\n8c42fc3d0aefa3991fd48cd2f0cb122e Malware\n50d05b1a794eb72b5e7568db25c2b6c2 Malware\n391193c63c0aa14d926eda086b01d10e Malware\naa2bf74314e56373b890f1cf4e353bc3 Malware\nf2d5bc7822c9ea4dacc4050acc66a391 Malware\nbc8cbfdb615db6a928a6506861c71abc Malware\n6e68b1136b28fe7229240ad2a81108e6 Malware\ndf539514bc626ead78699b2c825e746b Malware\n11c7a092cf3df597302e56cef41743c6 Malware\n4b6c61af679a5aa9a0646d043082b3a6 Malware\n245727ad94d2de6cf6a66b0234da663d Malware\n6dc1012eb648fc6bd12780f33106dd65 Malware\ndadeba4e932412abe012e55a9abd4c1c Malware\ndc9470a43d376b841d1a2bd6d3fa4e03 Malware\n834a85e7b4cf333bb80fba8fb2a35498 Malware\n47586a0384984c53c0e5ff66f9618c2e Malware\n16579e6dfb1b4f663278b86715e815ac Malware\n77ffc7786ade06be7a9ed1fd5a05f5b1 Malware\n195481963ef6b159a956c87a8dbdf073 Malware\n725deeac35700a3279a07d5ec4fdee42 Malware\n8a4be8036fa874a664d9299cf2b3ea74 Malware\n93d953aa2f6256192a5f0e296bb16f9f Malware\n5f08355a1355c58664ae895849570457 Malware\n3adf841dd3b3af93ee191de15258d61a Malware\n01a6bb9129e5b88ae79ed0c92de62996 Malware\n9f019b6a13305e4a88317d17bd9340b2 Malware\n64d51930ddd849fc6797d800b5fdfb82 Malware\n5c1df9038bf8706a8afcc052b7bb088d Malware\nc08ff1e28d40f13dd384c1779063dd05 Malware\n9c964de42960d4176b8de03248722129 Malware\n305d2638ea4665718c1ae0e29952558a Malware\na20bcfc81735a16d24f1909e556a8e3b Malware\n8fd7097cdef9b491433f1c231747f312 Malware\nc4f118a7fd77e058f45776a375f4dce9 Malware\ne5d922a086ecee565eac49a15aa0914d Malware\neeafbbeedbfe525f403272a0871f288d Malware\nb2c9cd50587652c8fc292b893e578e2e Malware\n697eacb481c24513121cbddb11d117e7 Malware\n405e6310a49d67024f4b6395f64c3bf0 Malware\nf44ee659261e8bb7b47cbac6bd274ed1 Malware\n98861061dc01184c19ef91bb197a740e Malware\n667347dfbc67b456429f8a8eb6f61f5e Malware\nc0c94f4779dea9434a85d0e1706724d2 Malware\n727d77f0ae7b95ede2cd318012e2ac10 Malware\n67cd4a93d6d09616f3ff897fa357ab92 Malware\n68841cc76f533890334a09e98d8463cf Malware\n7c3a2225792be3087d6e8c073cb8a58d Malware\n66a88a9d897399860ab09e85312fc86c Malware\n4fa1b08fd7331cd36a8fc3302e85e2bc Malware\n5e5425b47df510b0cacb9665db8aeed5 Malware\na019e5f7807c4777b3728c59ae15240e Malware\n041a169c44c58793b65ed93da60e2b59 Malware\n5ef190c002dcf24a52de0c6ffa91cb08 Malware\n1d184746529a068581d6f25c6d8882f0 Malware\nd7c4cdc19623b7a32b6776144aa94723 Malware\n54bc3edff22c6d8c98066ad01e595804 Malware\n8972bcfa5e8ec6740189c20afa891eb0 Malware\nc251124e734f90fda56785b27dd0e2bc Malware\n0f0eac20067888a5312187ada8aa4ec3 Malware\n7d0fa9e25858b4b441758a5e6873644b Malware\n21335ea2e71c06b45be0398c388deebf Malware\n47fd39a97786d497259df9b9d4b40d97 Malware\n1f58cdc87731ed5a633518beffa72021 Malware\nd0268ebc820011f9473db334490557f9 Malware\ncb6768da9ecf8c8400dcaa6c0ee05c24 Malware\n0bec70ee90e89ab9982cef70d738d4ce Malware\naeaa19c3e846b600b583a610ff4ba8c0 Malware\ne71e49a6562762c46f3ca52029a6c4ec Malware\n9d6804a9b01413bbb3ad144fcbf5bdd7 Malware\n228de32e3d50656a99402a79213a6f0b Malware\n6997ba066b2fc0b9a1963edcabb29d0e Malware\n1391407e4f9ddc456e9b01d2404e34b8 Malware\na6fb277476866ca574464704703e2b9a Malware\nfd9924b40cdb9102fe58a3e6cc45e505 Malware\ncbe086df8558c0c41aeeb40faf5ff9f7 Malware\nb3d490529be38d4c64f8544383ee355b Malware\n6f23a7c7542f8204f2214f43504dc2b4 Malware\n0a3436e69fcb8acdc325e73f886bc989 Malware\n96b90a82c594eaa4e571f8382edf10f5 Malware\n4de96bdbb8952bec5f8eaca5630e8633 Malware\ne5ec872b965f71745d7fab35c4b4f936 Malware\n14846c7bb899f5853ce55fa77d09a90b Malware\n8f65d769526c932d121e859134de07e8 Malware\n9304d7f600d471af82d971327f6d123b Malware\nb0a8acef02319462710e7de532111803 Malware\n4e3a0773dfeed5a76617a1d5c0a943c7 Malware\nd983fc5a43c3a3bc6947c022611aae45 Malware\n49ef20e3b73acc336c569c96f0ada799 Malware\na096e391b7bedd88b243f992e4fead89 Malware\n43ba82335fc707c6f950f3510f61dd25 Malware\nfaf392c23ddc8fe7374c4a5e6f72d6a7 Malware\n7db241addf3024f152b96f730114e19b Malware\n9ab827c066d5be71b1e9a002f80112a1 Malware\n131af433f6a266cbdfeb5e42aa484462 Malware\n94eea261d13ff7bfdd5a2caec7aacb8f Malware\n31ca1dc663ca1446decb6b31bb5502b6 Malware\nc232735b88adaf013174c16149c53a10 Malware\nbc8f991ea7051adba44799a7e1a44e74 Malware\ndc3339bab18e3bd21ff402a8e4836eea Malware\nfb52006f04936b8d6109869abdb8a869 Malware\n14aa4750e77c6d20b9d845d2914e6f63 Malware\n178b7686ba891da18d2dc64ee0fa0ff4 Malware\nf9588dd6e8acaaf053e90900591654ed Malware\n013d98b6e65ac77756d6f08756bd886f Malware\n0c31847a1e7243e73df1dcc81b93105e Malware\n8823f23312dbfec469b0d72bffc6fb3d Malware\n41e660414c521c620fad7565f50f75f1 Malware\n6df1eb810ba69373a3c64159972e73ed Malware\nacdadfc81883905275e8ddaecc9134b2 Malware\nba25ab840c01de8675b2db74214de898 Malware\nfac8ef9dabdb92806ea9b1fde43ad746 Malware\naacc4fc6434b0c8ffe71ca86bb6792f5 Malware\nc9a80ae2c9ac0c55149e21185f7599d9 Malware\ncca2e541b29576d51b3ec9f43c36b18e Malware\n0bde5199e08bae71af72a39b835782fe Malware\n9d054dc1fea9de72a66a78f68491c2a1 Malware\nf6ddc6143c0084150ae888149c565d1a Malware\n4ed7ee73b36aa1512814bb0d0889652d Malware\n66e11c22d254caca6c58885f942c8501 Malware\nc89bf6c6f8a4676d13e91a1d57f25691 Malware\n1eee5b3f704c7b97f9daa788f8854303 Malware\n18c20ad68df5d3eeb80d7a9251503ee8 Malware\n5fae120dfbc49b5cde7deb04f982056c Malware\nbc6d6c7c76d044c0c0ba800332235910 Malware\n0ede863c24e1fde7e846659773439f2f Malware\nce3324d2b77c6d7cd3dd7349f7ded719 Malware\n7eb3103d1ca014185f8e28ba04f546d8 Malware\ne992c4103352bec18041f390af507754 Malware\nb0a0cfd0b81f5438902d5338b7b14ac0 Malware\n3b7bb80d492f2c283ca923a2867d2b89 Malware\n931b6f5410399691d063b0bb831c245b Malware\n674df6169e86906ba77e09d34b38b69f Malware\n5061c3c886d5ae9af09410e659d87653 Malware\n6f235605bab011fb6c80fd02d3f743af Malware\n368becf58bf3edd0d2cdbd048dc4959b Malware\n8099c75f8f3a7be16a8246fd5b90185a Malware\n5ce91465278593954f6ac3e5ee00ac50 Malware\n69147a1ad05d64202b2d7bb0ea1bab46 Malware\n282f0e1a1aca296abef478d6b221d760 Malware\n49b937c9ff30a68a0f663828be7ea704 Malware\n1c32f9f05234cac7dd7a83e3925a3105 Malware\n2a42736c8eae3a4915bced2c6df50397 Malware\ndca13b4ff64bcd6876c13bbb4a22f450 Malware\naa6fe189baa355a65e6aafac1e765f41 Malware\n28ef588ba7919f751ae40719cf5cffc6 Malware\n5f4741ebaffd9c53473d79a1252f82cb Malware\n68424ff30f6fd1debd3cff1997fab17e Malware\nbc3aa0142fb15ea65de7833d65a70e36 Malware\nc596adb32c143430240abbf5aff02bc0 Malware\nb88451e74c1091b9022f7199704959b0 Malware\n903cbde833c91b197283698b2400fc9b Malware\n3b533eeb80ee14191893e9a73c017445 Malware\n005ae4b2b07452c72744bdb079a70692 Malware\n2da63882bb0f97216a03d9631a16b67b Malware\n2506ce193ab45d4a14412af0fa54747c Malware\n899c31e534759096658ab0f064590871 Malware\n8b0c442e7be576c31ad6273ef5fd5bea Malware\n27a0f581fa259c4cd3772b23b8daff04 Malware\nf199ea006108e71397cffc7b1d02e4a8 Malware\n2e308d8091e81117ae248fdc3d59de2b Malware\neb407deffac6259b26976c9cf83a0da8 Malware\n5b43df4fac4cac52412126a6c604853c Malware\n8509b02ba5608218459b5e80f3b69ee6 Malware\n05ddf1568dd1f60f51511bb21ea7bc72 Malware\nee3a9eda6330e73073a95537eec9085a Malware\n3d16688fe4f226935b4cd9df4cc62334 Malware\nf233f2120085a064d7e669fb379d2a18 Malware\n81df25047f18e86e6d37628659ec257d Malware\n2ec11140ef8104c447482a89301efbec Malware\n6dca3c3c503183612388e23906180141 Malware\n5ad944d14a9737db622e7a751cfff71d Malware\n32adfdd061c7fc4950401cac4890fe05 Malware\n87acbeb75de776c3dfa6e1c7c9e2baa6 Malware\ne67ff0286a4534aa5d5574dc5cf74827 Malware\ncbc8a71d1d0db87ded0eb9280f208c28 Malware\n289d15b891c19cd7b8f75c9a24cc3827 Malware\n263d38333edd239bc97f5a1a4edbb69c Malware\nc96e7e57730275ae622d2fce8146246c Malware\n994814676d0a551789de38196c5e788f Malware\n714c45bd8ee75251c9abe52febe31774 Malware\n66f45a5734619b37887dfcf25d471648 Malware\n0a38bc45b0de27d3f65dfcf5e239ccad Malware\n2c088e60b5923582860eed4c5d585d4c Malware\n448f7c5256255993c809918e30118b05 Malware\nac7cd2cf13e57bd8a5f6140ea725528d Malware\n447f6b33b7aad1c445ac45b68ce87fe7 Malware\n9c2daf17932b329185fbbdd2270c1265 Malware\n990dd254f189aa90bab4d37785a32fa0 Malware\nd98816967cb0cc01bf2fe53e0604798e Malware\ncd6919b4d9135f437db2db388382271e Malware\na9d0ac6490d146552f269ec6a45cac5c Malware\nfeb0388d5b0fa19b6634db5878ad1f8f Malware\n8042afb99c878971db596cc8e4cb26e3 Malware\ne63a09a7079b5099a552956355c28c5d Malware\ne70ad0f171a1409096ba7d91b2b5ee52 Malware\n8157577529fc90cac498496c91d3ea7a Malware\n0e06bbd8a1278a0207a1ec5b9f97d1de Malware\n73faca50d6b13c48cadb1db1032f7ec4 Malware\n6fdc28a788afb89bf66d7fca7228812d Malware\n67c81769fc31be8d40277ab0ad35d666 Malware\n76f5a8c72235c17591b7103c52fc9208 Malware\n19f5aaa458f6486e0283a2347ad0317c Malware\n436cbb6472fda5003c1eabeec55e7acf Malware\ne6df969fc0424c198f1e72dce2f6aed6 Malware\n13cb462b7d317a761a85a0d8040807c5 Malware\n74aa0ac1311db2f5b1dced38aececa2c Malware\ne858ba2ab810252bcc728c9124143823 Malware\n318987dfdc3a98317c93b16b957b6b44 Malware\n796984b46829ec1985aee322f81f2187 Malware\n0bdc3ac422d65273fb5c55d220ef2e8b Malware\nb0d99aa5c687e1b901e4f00949975c78 Malware\n5f4f14a8597074fd7fdb2fadfdd365ba Malware\n4a811397c619d711a8f1434ac10fe814 Malware\na2911108444186e37d1d97db389689cc Malware\ne49466e247c530564b33996cbb2dc6a6 Malware\ne90d64a5479a36a9aa9a90015e9622dc Malware\n8e736cd82160868dfb8a2fc2c4988e61 Malware\ncc838a772d40b11251526e29d56e940f Malware\n2cbe06c89dc5a43ea0e0600ed496803e Malware\n995232c5f1e560ca4e87466e636bf576 Malware\ne075abd2e5b1dc59283a112ce05680a9 Malware\n720a89c72b14c05ea15e79d93612afc4 Malware\na8dfbd54da805d3c52afc521ab7b354b Malware\n6065c9b7deca9a7d07431c9ce7c52f3d Malware\ne46fd5d70a84ba74a8f92356abd02476 Malware\n05f3071e5168d70015d119dc5bdb914a Malware\ne8aeef83ddb8bb4d0e53851fcc29ae3f Malware\n6f43544132fa9a8526e9c8dcaec7bb08 Malware\n2d74bef33ace820bcf509381fd48d933 Malware\n8456e520cd4307708f81474e403f0611 Malware\n4501d0ac025473c91ddc7ec4f1a7da19 Malware\na203cf014e460486d65986a5bdd70398 Malware\n4b59dee20177e673500b28085aef809a Malware\n213a0438a2dd0c7ac122596d507a49cd Malware\nb40c1e24195e3756402444d6e5f31fd2 Malware\nde2a94d8f5e5eda67f53dbc5e94551cc Malware\n211bbfc1d32b068fd6419f284e6e3927 Malware\n48ca5689634cfc5f451c4aa07da45b99 Malware\nf0a37ccb8d64a4ae0945c5850d5176cf Malware\n78cc30f1a3e4ecad6d161ac8d456d293 Malware\n38e003792c6b8e359ad503fb6d1b747b Malware\nd813b7dabecc4c8553556f5172299e03 Malware\n8f8705fb2779ea4b93fed567f5859487 Malware\n2b509272331e225d5446cb8a4cbf4952 Malware\n8b9f0f8b9ef52e78dca1d013e4e42f18 Malware\n73c4513fb05d7b8e8f7f48b7763ee8d0 Malware\n97511d4e4c036dd5f3b98e2b0891adf6 Malware\n9a9a2dc5176c9990cf5eb1e44867ea0b Malware\n8945d4afb5a804ebee5663dab3385b0c Malware\n67340181e2f421fc421fc38e148f9370 Malware\n8964c56b6e733bc805485ab6b7f0d7dd Malware\ndf78aab8018e08dc07719f90b92ee008 Malware\n0824ed358b2dc4faa28748fda07adb1b Malware\n7f2daf039382ac3ff88d69008920a9f4 Malware\nd634ed3264c00894d9b39186f9913eb1 Malware\nccd055c25e259b7ab523d55f305b156a Malware\n4f86afa4f112e9488873632fc47eb67a Malware\n8d60784b6a9513afb45e5e8d81c71533 Malware\nea119ddb9141f53cabde17e758d0c409 Malware\n959169da082eb6006c7832e0502cd3bb Malware\n15f0a103ce9182399cfda08074ef2028 Malware\n8c1dacda7fe400be9f892c83a65ffb53 Malware\n78b664433b23cd7d215cffa2307841cd Malware\n37510c8057db86ef23a902308c48ba71 Malware\nd1df395525b0d18a4898c8afae8985ed Malware\n7a39d6ee9b8ab493a2bf9e4f1d7ede62 Malware\naaea000b2aff73fe3c64c8d13a7fb274 Malware\na9d0a4cf02efd67bf7df94c66d5b5682 Malware\n0dd9b1295231d3c432fcbeb8bcac5a01 Malware\ne59956a32816ee0c450056230d14b95d Malware\nc9ac50de44420b90c931816bef778631 Malware\n4b79cce83fd1a488261da5dace91de79 Malware\ncb33f853c1e856691e63b21f0a496c3d Malware\ndecba5037a37527eb4b86a3f3fe2a391 Malware\ndeb4fc6d32df44e18056897a2a629178 Malware\n0373ec3c0bc1806e0c89f7718fba11a7 Malware\nca8933d5f4e751989946d7e5e93364e0 Malware\ne84866df83f7d15ddd45e2ff9cd64be2 Malware\n7bf15784ecb3a4b8f03e67f4d73f4ba1 Malware\n4f02afb32b4253e3c2cf59298ce67be3 Malware\n2c87d0ead4128c41cb10bc031885cabf Malware\ne2a3cbd03aba32000e53898fe5903657 Malware\n7c2271144243a9f7d769eb96dad5003c Malware\nd77f7ba012d1b3c9c1eb6ec8a9ac5541 Malware\n60043352293facc94efd0130af24c692 Malware\n28fe042b774229010e51b239789cbdcc Malware\nd8cfd2c08599b1f7eb498dbec9e9f9f7 Malware\n2e65ecb42471ef048687a80f601ef9d0 Malware\n6e2b1e5036c4e0d5dc9dc7f684904af3 Malware\n0f0c4cd44bb86bc87f86f8fbe8f66b11 Malware\n41371b673f624e488f33c95a762d4651 Malware\n4cd1023f7f0c68fe29917b08c58f0b65 Malware\n7c0761dfc4413189312e91a3af657426 Malware\nb99b4ea3e88d8d91936f1019a98e14ed Malware\ne1bd4e063fb5c701a24b7841d2c57915 Malware\n342be82cb1119078f6fe5d5a25c3a344 Malware\nb71001baabcc80299ebb98445cbf8a85 Malware\n55510482cab7a14f07234e508085f570 Malware\n0166c54b111c4c0bf7dbdeedaea80cd4 Malware\nef89266b5b3b581ae4f74b17a0040c6d Malware\nbd2e01e0dbe9ea58d6fbdf329088d477 Malware\n55e090a8ce7eddcb1b5402be75eb1241 Malware\nd7bacbcdbc25c29791c94e2dea87f51f Malware\ne8a41e20ed16da51b34acad20852278d Malware\ndaf4ae47ff3a81c3efc36b2b6e79b63d Malware\na15ef9feb6ecae39fe70f274d3273e53 Malware\n803dc9b6fbc4dec0491b6dff7b3c84cb Malware\n97084347ac0137be7bfd2e7d0fc731d2 Malware\n22eb5bc8d60eb888ab725a4974253bf7 Malware\n3c89b295ac35b520a00f3ead21edbb30 Malware\nd54723956214648a424ff74a99fef009 Malware\n11aa8eb4b41a0a1852239c8ca8569e6e Malware\na48e0685b81985b4eb8506ea4ad5f2a8 Malware\n5925c4bf95dfe8b6d52fc834e0d0eb89 Malware\n9e4da90fefd7b25954c6b5903cdea50a Malware\ne87ea871e94ee05817b37d8f778b393f Malware\n1d71d864fabecb4eb41a02436fb99738 Malware\n77298d924e3d248401546edbb282efcc Malware\n2468ca51ccb8f97b7fbc5527bffa4423 Malware\n4c4cc343fbb88e5aef93f83418a2d33e Malware\n824290804041c2d3f996da8a73d840c8 Malware\n080c5d17eb50eed8821b95a36887d246 Malware\n2e68f644fc6ea3374d616a3c0c437d1d Malware\ndb6e173ae38f5e0c42811e638aa2a42f Malware\n8faa2c3a426ef6887f33bd789716639c Malware\nd2bb3e64541084d4cbaf958b4b5947fa Malware\n90c6752f16dd4b13bd87b12a482c2f1b Malware\n2a4d8ee8dab459095fc8a092fd7fe37d Malware\n56224350d3890ec2aa53b708a7b9bead Malware\nd0d2dde436dec934bc71ff3ddadbb72e Malware\n2ef56aff1737c622fc6541e4b60af5bf Malware\nb7763406a1ea003a9ce9ee13a0e5b77c Malware\nf5c724497ee0bf9ae0bda10bc5665fdf Malware\n078d39fe742d0f20a317f3176e1d3970 Malware\n520ba89e45d7d8cc7930178e431b6b9f Malware\ne48499c6bc89c701004f332800f87b3f Malware\n2494ed6cc5842ae5653d7686d20772ea Malware\n809d167385bc4775af9b1d8ccea32b9e Malware\n305d534444bb50da75bcecbce41ff5e5 Malware\nf3f0243cd878c3d2b004d5ba25fac87a Malware\n66ef36617749d0ca24df08c00f48a2fb Malware\nfffbf26a22f3234d7a693a2c6f28abfd Malware\n83cfee1ad674d8a10536311fea59b6d0 Malware\na15e008de1952d13aa8a2eb89a8a7b2c Malware\n8625acde8e5427a980e34ef12633d747 Malware\n9ffb981e3f89649e4c4137b41fed8192 Malware\n7059e600ce509ca021d070435059af4e Malware\n5ebcb22df24357c5147083d20d0dc0c7 Malware\n87983ca4424894565216b0eadf7e2598 Malware\n3395f857439632e41f7cab3ab7c25ef0 Malware\n137fdaa6f32658e1a7315f74957e22a0 Malware\n9d1467c36778ba4468c8a5ce63f79698 Malware\n905a2de95212178e7204727b05ac711e Malware\n14f483d7ab68e47c2612bdc76a78816b Malware\n35a2db699567719f4881d090ee21f211 Malware\n31aa755884753e957ee76387c081713a Malware\n0fd76e42ca11daa8b345907070abb059 Malware\n772f4c61c8e8b38855df27b4d271fdb0 Malware\n60f6e6f9cd21643e5ea8f37927118f4b Malware\n4a370b9c78ed55846a3badc68689de68 Malware\ne957dd83d683f91fe02861fba6748acd Malware\naff021791181a8976b85d65b42deb22f Malware\nb06c156a09376c64aa179c3e13da40b1 Malware\n5f3e105f0e7953c3a4b522c53c576c54 Malware\na150af3dab82c9ef7aa12c9b5245d146 Malware\nc3aad4d6a4606ed05a939c4a3d4571ce Malware\nf5cb507eb600ce0f5586ffa0ad67a237 Malware\n3fc3b33f89ddec227b58b298545d4dd0 Malware\n5c611ef9738cc22b347ea24cb9ecf361 Malware\n"
        },
        {
          "name": "osxauditor.py",
          "type": "blob",
          "size": 74.2841796875,
          "content": "#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n#\n#  OS X Auditor\n#\n#  Author: Jean-Philippe Teissier ( @Jipe_ ) & al.\n#\n#  This work is licensed under the GNU General Public License\n#\n\n__description__ = 'OS X Auditor'\n__author__ = '@Jipe_ & al.'\n__version__ = '0.4.4'\n\nROOT_PATH = '/'\nHOSTNAME = ''\n\nHASHES = []\nLOCAL_HASHES_DB = {}\n\nHTML_LOG_FILE = False\nHTML_LOG_CONTENT = u''\nHTML_LOG_MENU = u''\n\nHTML_EVENTS_TL = u''\nHTML_EVENTS_LANES = []\nHTML_EVENTS_ITEMS = u''\n\nFOUNDATION_IS_IMPORTED = False\nBIPLIST_IS_IMPORTED  = False\nPLISTLIB_IS_IMPORTED = False\n\nSYSLOG_SERVER = False\nSYSLOG_PORT = 514                                               #You can change your SYSLOG port here\n\nMRH_HOST = u'hash.cymru.com'\nMRH_PORT = 43\n\nGEOLOCATE_WIFI_AP = False\nGEOMENA_API_HOST = u'http://geomena.org/ap/'\n\nVT_HOST = u'https://www.virustotal.com/vtapi/v2/file/report'\n\nADMINS = []\n\nOSX_VERSION = []\n\nimport sys\nreload(sys)\nsys.setdefaultencoding('UTF8')\n\nimport optparse\nimport os\nimport hashlib\nimport logging\nfrom logging.handlers import SysLogHandler\nimport sqlite3\nimport socket\nimport time\nimport json\nimport zipfile\nimport codecs                                                   #binary plist parsing does not work well in python3.3 so we are stuck in 2.7 for now\nfrom functools import partial\nimport re\nimport bz2\nimport binascii\nimport platform\nimport gzip\n\nVT_API_KEY  = os.getenv('VT_API_KEY', False)\n\ntry:\n    from urllib.request import urlopen                          #python3\nexcept ImportError:\n    import urllib, urllib2                                      #python2\n\ntry:\n    import Foundation                                           #It only works on OS X\n    FOUNDATION_IS_IMPORTED = True\n    print(u'DEBUG: Mac OS X Obj-C Foundation successfully imported')\nexcept ImportError:\n    print(u'DEBUG: Cannot import Mac OS X Obj-C Foundation. Installing PyObjC on OS X is highly recommended')\n    try:\n        import biplist\n        BIPLIST_IS_IMPORTED = True\n    except ImportError:\n        print(u'DEBUG: Cannot import the biplist lib. I may not be able to properly parse a binary pblist')\n    try:\n        import plistlib\n        PLISTLIB_IS_IMPORTED = True\n    except ImportError:\n        print(u'DEBUG: Cannot import the plistlib lib. I may not be able to properly parse a binary pblist')\n\ndef HTMLLogFlush():\n    ''' Flush the HTML report '''\n\n    global HTML_LOG_CONTENT\n    global HTML_LOG_MENU\n\n    if HTML_LOG_FILE:\n        HTML_LOG_HEADER = u\"\"\"<!DOCTYPE html>\n                            <html lang=\\\"en\\\">\n                            <head>\n                            <meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=utf-8\\\" />\n                            <title>OS X Auditor Report</title>\n                            <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"bootstrap/css/bootstrap.min.css\\\">\n                            <script type=\\\"text/javascript\\\" src=\\\"jquery/jquery-1.10.2.min.js\\\"></script>\n                            <script type=\\\"text/javascript\\\" src=\\\"bootstrap/js/bootstrap.min.js\\\"></script>\n                            <script type=\\\"text/javascript\\\" src=\\\"d3-3.2.8/d3.min.js\\\"></script>\n                            <style type=\"text/css\">\n                            .chart {\n                                shape-rendering: crispEdges;\n                            }\n\n                            .mini text {\n                                font: 9px sans-serif;\n                            }\n\n                            .main text {\n                                font: 12px sans-serif;\n                            }\n\n                            .miniItem0 {\n                                fill: darksalmon;\n                                stroke-width: 6;\n                            }\n\n                            .miniItem1 {\n                                fill: darkolivegreen;\n                                fill-opacity: .7;\n                                stroke-width: 6;\n                            }\n\n                            .miniItem2 {\n                                fill: slategray;\n                                fill-opacity: .7;\n                                stroke-width: 6;\n                            }\n\n                            .brush .extent {\n                                stroke: gray;\n                                fill: dodgerblue;\n                                fill-opacity: .365;\n                            }\n                            </style>\n                            </head>\n                            <body data-spy=\\\"scroll\\\" data-target=\\\".navbar\\\" style=\\\"margin:0 20px 0 20px; padding-top:110px;\\\">\n                            <div class=\\\"container\\\">\n                                <div class=\\\"navbar navbar-inverse navbar-fixed-top\\\">\n                                  <div class=\\\"navbar-inner\\\">\n                                    <a class=\\\"brand\\\" href=\"#\">OS X Auditor</a>\n                                    <ul class=\\\"nav\\\">\"\"\"\n\n        HTML_LOG_FOOTER = u'</body></html>'\n\n        HTML_LOG_MENU = HTML_LOG_MENU[10:]\n        HTML_LOG_MENU += '''</ul>\n                            </div>\n                            </div>\n                            </div>'''\n\n        HTML_LOG_FILE.write(HTML_LOG_HEADER)\n        HTML_LOG_FILE.write(HTML_LOG_MENU)\n        HTML_LOG_FILE.write(HTML_LOG_CONTENT)\n        HTML_LOG_FILE.write(HTML_LOG_FOOTER)\n\n        HTML_LOG_FILE.close()\n\ndef HTMLLog(LogStr, TYPE):\n    ''' Write a string of HTML log depending of its type '''\n\n    global HTML_LOG_CONTENT\n    global HTML_LOG_MENU\n\n    if TYPE == 'INFO':\n        Splitted = LogStr.split(' ')\n        if re.match('[A-Fa-f\\d]{32}', Splitted[0]):                 #Should be a md5\n            Link = u'<a href=\\'https://www.virustotal.com/fr/file/' + Splitted[0] + u'/analysis/\\'>' + Splitted[0] + u'</a> '\n            HTML_LOG_CONTENT += u\"<i class='icon-file'></i> \" + Link + u\" \".join(Splitted[1:]) + u\"<br>\"\n        else:\n            HTML_LOG_CONTENT += u\"<i class='icon-file'></i> \" + LogStr + u\"<br>\"\n\n    elif TYPE == \"INFO_RAW\":\n            HTML_LOG_CONTENT += u\"<pre>\" + LogStr + u\"</pre><br>\"\n\n    elif TYPE == \"WARNING\":\n        HTML_LOG_CONTENT += u\"<div class=\\\"alert alert-error\\\"><i class='icon-fire'></i> \"+ LogStr + u\"</div>\"\n\n    elif TYPE == \"ERROR\":\n        HTML_LOG_CONTENT += u\"<div class=\\\"alert\\\"><i class='icon-warning-sign'></i> \"+ LogStr + u\"</div>\"\n\n    elif TYPE == \"SECTION\":\n        HTML_LOG_CONTENT += u\"<h2 id=\\\"\" + LogStr + u\"\\\">\" + LogStr + u\"</h2>\"\n        HTML_LOG_MENU += u\"</ul></li><li class=\\\"dropdown\\\"><a href=\\\"#\\\" role=\\\"button\\\" class=\\\"dropdown-toggle\\\" data-toggle=\\\"dropdown\\\">\" + LogStr + u\"<b class=\\\"caret\\\"></b></a><ul class=\\\"dropdown-menu\\\">\"\n        HTML_LOG_MENU += u\"<li role=\\\"presentation\\\"><a role=\\\"menuitem\\\" tabindex=\\\"-1\\\" href=\\\"#\" + LogStr + u\"\\\">\" + LogStr + u\"</a></li><li class=\\\"divider\\\"></li>\"\n\n    elif TYPE == \"SUBSECTION\":\n        HTML_LOG_CONTENT += u\"<h3 id=\\\"\" + LogStr + u\"\\\">\" + LogStr + u\"</h3>\"\n        HTML_LOG_MENU += u\"<li role=\\\"presentation\\\"><a role=\\\"menuitem\\\" tabindex=\\\"-1\\\" href=\\\"#\" + LogStr + u\"\\\">\" + LogStr + u\"</a></li>\"\n\n    elif TYPE == \"DEBUG\":\n        HTML_LOG_CONTENT += u\"<i class='icon-wrench'></i> \" + LogStr + u\"<br>\"\n\ndef SyslogSetup(SyslogServer):\n    ''' Set the Syslog handler up'''\n\n    global SYSLOG_SERVER\n\n    try:\n        Logger = logging.getLogger()\n        Syslog = logging.handlers.SysLogHandler(address=(SyslogServer, SYSLOG_PORT))\n        Formatter = logging.Formatter('OS X Auditor: ' + HOSTNAME + ' %(levelname)s: %(message)s')\n        Syslog.setFormatter(Formatter)\n        Logger.addHandler(Syslog)\n        SYSLOG_SERVER = True\n    except:\n        PrintAndLog(u'Syslog setup failed, Syslog is disabled', 'ERROR')\n        SYSLOG_SERVER = False\n\ndef PrintAndLog(LogStr, TYPE):\n    ''' Write a string of log depending of its type and call the function to generate the HTML log or the Syslog if needed '''\n\n    global HTML_LOG_FILE\n    global SYSLOG_SERVER\n\n    if TYPE == 'INFO' or 'INFO_RAW':\n        print(u'[INFO] ' + LogStr)\n        logging.info(LogStr)\n\n    elif TYPE == 'ERROR':\n        print(u'[ERROR] ' + LogStr)\n        logging.error(LogStr)\n\n    elif TYPE == 'WARNING':\n        print(u'[WARNING] ' + LogStr)\n        logging.warning(LogStr)\n\n    elif TYPE == 'DEBUG':\n        print(u'[DEBUG] ' + LogStr)\n        logging.debug(LogStr)\n\n    elif TYPE == 'SECTION' or TYPE == 'SUBSECTION':\n        SectionTitle = u'\\n#########################################################################################################\\n'\n        SectionTitle += '#                                                                                                       #\\n'\n        SectionTitle += '#         ' +LogStr+ ' '*(94-len(LogStr)) + '#\\n'\n        SectionTitle += '#                                                                                                       #\\n'\n        SectionTitle += '#########################################################################################################\\n'\n        print(SectionTitle)\n        logging.info(u'\\n' + SectionTitle)\n\n    if HTML_LOG_FILE:\n        HTMLLog(LogStr, TYPE)\n\ndef MHRLookup():\n    ''' Perform of lookup in Team Cymru\\'s MHR '''\n\n    PrintAndLog(u'Team Cymru MHR lookup', 'SECTION')\n    PrintAndLog(u'Got %s hashes to verify' % len(HASHES), 'DEBUG')\n\n    Query = 'begin\\r\\n'\n    for Hash in HASHES:\n        Query += Hash + '\\r\\n'\n    Query += 'end\\r\\n'\n\n    S = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    S.connect((MRH_HOST, MRH_PORT))\n    S.sendall(Query)\n\n    Response = u''\n    while True:\n        Data = S.recv(4096)\n        Response += Data\n        if not Data: break\n    S.close()\n\n    Lines = Response.split('\\n')\n    Lines = Lines[2:-1]\n\n    for line in Lines:\n        Status = line.split(' ')\n        if Status[2] == 'NO_DATA':\n            PrintAndLog(line.decode('utf-8'), 'INFO')\n        else:\n            PrintAndLog(line.decode('utf-8'), 'WARNING')\n\ndef VTLookup():\n    ''' Perform of lookup in VirusTotal database '''\n\n    PrintAndLog(u'Virustotal lookup', 'SECTION')\n    PrintAndLog(u'Got %s hashes to verify' % len(HASHES), 'DEBUG')\n\n    try:\n        param = { 'resource': ','.join(HASHES), 'apikey': VT_API_KEY }\n        data = urllib.urlencode(param)\n        f = urllib2.urlopen(VT_HOST, data)\n        data = f.read()\n\n    except (urllib2.HTTPError, e):\n        if e.code == 401:\n            PrintAndLog(u'Wrong VirusTotal key', 'ERROR')\n        else:\n            PrintAndLog(u'VirusTotal error '+str(e.code)+' '+str(e.reason).decode('utf-8'), 'ERROR')\n\n    Ret = json.loads(data)\n\n    Results = []\n    if type(Ret) is dict:\n        Results.append(Ret)\n    elif type(Ret) is list:\n        Results = Ret\n\n    for Entry in Results:\n        if Entry['response_code'] == 1:\n            if Entry['positives'] > 0:\n                PrintAndLog(Entry['md5'] + u' ' + Entry['scan_date'] + u' ' + str(Entry['positives']) + u'/' + str(Entry['total']), 'WARNING')\n            else:\n                PrintAndLog(Entry['md5'] + u' '+ Entry['scan_date'] +' '+ str(Entry['positives']) + u'/' + str(Entry['total']), 'INFO')\n        elif Entry['response_code'] == 0:\n            PrintAndLog(Entry['resource'] + u' Never seen 0/0', 'INFO')\n        else:\n            PrintAndLog(u'Got a weird answer from Virustotal\\n', 'ERROR')\n\ndef LocalLookup(HashDBPath):\n    ''' Perform of lookup in a local database '''\n\n    global LOCAL_HASHES_DB\n\n    PrintAndLog(u'Local hashes DB lookup', 'SECTION')\n    PrintAndLog(u'Got %s hashes to verify' % len(HASHES), 'DEBUG')\n\n    with open(HashDBPath, 'r') as f:\n        Data = f.readlines()\n        for Line in Data:\n            if Line[0] != '#':\n                Line = Line.split(' ')\n                LOCAL_HASHES_DB[Line[0]] = Line[1]\n\n    PrintAndLog(str(len(LOCAL_HASHES_DB)) + u' hashes loaded from the local hashes database', 'DEBUG')\n\n    for Hash in HASHES:\n        if Hash in LOCAL_HASHES_DB:\n            PrintAndLog(Hash + u' '+ LOCAL_HASHES_DB[Hash], 'WARNING')\n\ndef BigFileMd5(FilePath):\n    ''' Return the md5 hash of a big file '''\n\n    Md5 = hashlib.md5()\n    try:\n        with open(FilePath, 'rb') as f:\n            for Chunk in iter(partial(f.read, 1048576), ''):\n                Md5.update(Chunk)\n            return Md5.hexdigest()\n    except:\n        PrintAndLog(u'Cannot hash ' + FilePath.decode('utf-8'), 'ERROR')\n        return False\n\ndef UniversalReadPlist(PlistPath):\n    ''' Try to read a plist depending of the plateform and the available libs. Good luck Jim... '''\n\n    plistDictionary = False\n\n    if FOUNDATION_IS_IMPORTED:\n        plistNSData, errorMessage = Foundation.NSData.dataWithContentsOfFile_options_error_(PlistPath, Foundation.NSUncachedRead, None)\n        if errorMessage is not None or plistNSData is None:\n            PrintAndLog(u'Unable to read in the data from the plist file: ' + PlistPath.decode('utf-8'), 'ERROR')\n        plistDictionary, plistFormat, errorMessage = Foundation.NSPropertyListSerialization.propertyListFromData_mutabilityOption_format_errorDescription_(plistNSData, Foundation.NSPropertyListMutableContainers, None, None)\n        if errorMessage is not None or plistDictionary is None:\n            PrintAndLog(u'Unable to read in the data from the plist file: ' + PlistPath.decode('utf-8'), 'ERROR')\n        if not hasattr(plistDictionary, 'has_key'):\n            PrintAndLog(u'The plist does not have a dictionary as its root as expected: ' + PlistPath.decode('utf-8'), 'ERROR')\n        return plistDictionary\n    else:\n        if BIPLIST_IS_IMPORTED:\n            try:\n                plistDictionary = biplist.readPlist(PlistPath)\n            except (IOError):\n                PrintAndLog (u'Cannot open ' + PlistPath.decode('utf-8') , 'ERROR')\n            except:\n                PrintAndLog(u'Cannot parse ' + PlistPath.decode('utf-8') + u' (Binary or JSON plist may FAIL) \\n', 'ERROR')\n            return plistDictionary\n\n        elif PLISTLIB_IS_IMPORTED:\n            try:\n                plistDictionary = plistlib.readPlist(PlistPath)\n            except (IOError):\n                PrintAndLog (u'Cannot open ' + PlistPath.decode('utf-8') , 'ERROR')\n            except:\n                PrintAndLog(u'Cannot parse ' + PlistPath.decode('utf-8') + u' (Binary or JSON plist may FAIL) \\n', 'ERROR')\n            return plistDictionary\n        else:\n            PrintAndLog(u'Cannot parse ' + PlistPath.decode('utf-8') + u'. No plist lib available.\\n', 'ERROR')\n            return None\n\ndef ParseQuarantines():\n    ''' Parse users\\' quarantines '''\n\n    PrintAndLog(u'Quarantines', 'SECTION')\n\n    for User in os.listdir(os.path.join(ROOT_PATH, 'Users/')):\n        if User[0] != '.':\n            PrintAndLog(User.decode('utf-8') +'\\'s quarantine', 'SUBSECTION')\n            DbPathV2 = os.path.join(ROOT_PATH, 'Users', User, 'Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2')        # OS X >= 10.7\n            DbPathV1 = os.path.join(ROOT_PATH, 'Users', User, 'Library/Preferences/com.apple.LaunchServices.QuarantineEvents')          # OS X <= 10.6\n            if os.path.isfile(DbPathV2):\n                DbPath = DbPathV2\n            elif os.path.isfile(DbPathV1):\n                DbPath = DbPathV1\n            else:\n                PrintAndLog(u'No quarantined files for user ' + User.decode('utf-8') + u'\\n', 'INFO')\n                continue\n            DbConnection = sqlite3.connect(DbPath)\n            DbCursor = DbConnection.cursor()\n            LSQuarantineEvents = DbCursor.execute('SELECT * from LSQuarantineEvent')\n            for LSQuarantineEvent in LSQuarantineEvents:\n                JointLSQuarantineEvent = u''\n                for Q in LSQuarantineEvent:\n                    decoded = str(Q).decode('UTF-8', 'ignore')\n                    JointLSQuarantineEvent += u';' + decoded\n                PrintAndLog(JointLSQuarantineEvent[1:] + u'\\n'.decode('utf-8'), 'INFO')\n            DbConnection.close()\n\ndef ParseStartupItems(StartupItemsPath):\n    ''' Parse the StartupItems plist and hash its program argument '''\n\n    StartupItemsPlist = False\n    NbStartupItems = 0\n\n    for StartupItems in os.listdir(StartupItemsPath):\n        StartupItemsPlistPath = os.path.join(StartupItemsPath, StartupItems, 'StartupParameters.plist')\n\n        PrintAndLog(StartupItemsPlistPath, 'DEBUG')\n        StartupItemsPlist = UniversalReadPlist(StartupItemsPlistPath)\n\n        if StartupItemsPlist:\n            if 'Provides' in StartupItemsPlist:\n                FilePath = os.path.join(StartupItemsPath, StartupItems, StartupItemsPlist['Provides'][0])\n                Md5 = BigFileMd5(FilePath)\n                if Md5:\n                    if Md5 not in HASHES:\n                        HASHES.append(Md5)\n                    PrintAndLog(Md5 + u' '+ FilePath.decode('utf-8') + u' - ' + time.ctime(os.path.getmtime(FilePath)) + u' - ' + time.ctime(os.path.getctime(FilePath))+ u'\\n', 'INFO')\n        NbStartupItems += 1\n    if NbStartupItems == 0:\n        PrintAndLog(StartupItemsPath.decode('utf-8') + u' is empty', 'INFO')\n\ndef ParseLaunchAgents(AgentsPath):\n    ''' Parse a LanchAgent plist and hash its program argument. Also look for suspicious keywords in the plist itself '''\n\n    SuspiciousPlist = ['exec', 'socket' ,'open', 'connect', '/dev/tcp/', '/bin/sh']\n    LaunchAgentPlist = False\n\n    NbLaunchAgents = 0\n    for LaunchAgent in os.listdir(AgentsPath):\n        LaunchAgentPlistpath = os.path.join(AgentsPath, LaunchAgent)\n\n        PrintAndLog(LaunchAgentPlistpath, 'DEBUG')\n        LaunchAgentPlist = UniversalReadPlist(LaunchAgentPlistpath)\n\n        if LaunchAgentPlist:\n            if 'Program' in LaunchAgentPlist and 'Label' in LaunchAgentPlist:\n                FilePath = LaunchAgentPlist['Program']\n                Md5 = BigFileMd5(FilePath)\n                if Md5:\n                    if Md5 not in HASHES:\n                        HASHES.append(Md5)\n                    PrintAndLog(Md5 + u' '+ FilePath.decode('utf-8') + u' - ' + time.ctime(os.path.getmtime(FilePath)) + u' - ' + time.ctime(os.path.getctime(FilePath)) + u'\\n', 'INFO')\n                continue\n            if 'ProgramArguments' in LaunchAgentPlist and 'Label' in LaunchAgentPlist:\n                FilePath = LaunchAgentPlist['ProgramArguments'][0]\n                Md5 = BigFileMd5(FilePath)\n                if Md5:\n                    if Md5 not in HASHES:\n                        HASHES.append(Md5)\n                    PrintAndLog(Md5 + u' '+ FilePath.decode('utf-8') + u' - ' + time.ctime(os.path.getctime(FilePath)) + u' - ' + time.ctime(os.path.getmtime(FilePath)) + u'\\n', 'INFO')\n                if len(LaunchAgentPlist['ProgramArguments']) >= 3:\n                    if any(x in LaunchAgentPlist['ProgramArguments'][2] for x in SuspiciousPlist):\n                        PrintAndLog(LaunchAgentPlist['ProgramArguments'][2].decode('utf-8')+ u' in ' + LaunchAgentPlistpath.decode('utf-8') + u' looks suspicious', 'WARNING')\n        NbLaunchAgents += 1\n\n    if NbLaunchAgents == 0:\n        PrintAndLog(AgentsPath.decode('utf-8') + u' is empty', 'INFO')\n\ndef ParseStartup():\n    ''' Parse the different LauchAgents and LaunchDaemons  '''\n\n    PrintAndLog(u'Startup', 'SECTION')\n\n    PrintAndLog(u'System agents', 'SUBSECTION')\n    ParseLaunchAgents(os.path.join(ROOT_PATH, 'System/Library/LaunchAgents/'))\n\n    PrintAndLog(u'System daemons', 'SUBSECTION')\n    ParseLaunchAgents(os.path.join(ROOT_PATH, 'System/Library/LaunchDaemons/'))\n\n    PrintAndLog(u'Third party agents', 'SUBSECTION')\n    ParseLaunchAgents(os.path.join(ROOT_PATH, 'Library/LaunchAgents/'))\n\n    PrintAndLog(u'Third party daemons', 'SUBSECTION')\n    ParseLaunchAgents(os.path.join(ROOT_PATH, 'Library/LaunchDaemons/'))\n\n    PrintAndLog(u'System ScriptingAdditions', 'SUBSECTION')\n    ParsePackagesDir(os.path.join(ROOT_PATH, 'System/Library/ScriptingAdditions/'))\n\n    PrintAndLog(u'Third party ScriptingAdditions', 'SUBSECTION')\n    ParsePackagesDir(os.path.join(ROOT_PATH, 'Library/ScriptingAdditions/'))\n\n    # Parse the old and deprecated Startup Items\n    PrintAndLog(u'Deprecated system StartupItems', 'SUBSECTION')\n    ParseStartupItems(os.path.join(ROOT_PATH, 'System/Library/StartupItems/'))\n\n    PrintAndLog(u'Deprecated third party StartupItems', 'SUBSECTION')\n    ParseStartupItems(os.path.join(ROOT_PATH, 'Library/StartupItems/'))\n\n    PrintAndLog(u'Users\\' agents', 'SUBSECTION')\n    for User in os.listdir(os.path.join(ROOT_PATH, 'Users')):\n        UserLAPath = os.path.join(ROOT_PATH, 'Users', User, 'Library/LaunchAgents/')\n        if User[0] != '.' and os.path.isdir(UserLAPath):\n            PrintAndLog(User.decode('utf-8') + u'\\'s agents', 'SUBSECTION')\n            ParseLaunchAgents(UserLAPath)\n\n    PrintAndLog(u'Users\\' LoginItems', 'SUBSECTION')\n    for User in os.listdir(os.path.join(ROOT_PATH, 'Users')):\n        LoginItemsPlistPath = os.path.join(ROOT_PATH, 'Users', User, 'Library/Preferences/com.apple.loginitems.plist')\n        if User[0] != '.' and os.path.isfile(LoginItemsPlistPath):\n            PrintAndLog(User + u'\\'s LoginItems', 'SUBSECTION')\n            PrintAndLog(LoginItemsPlistPath, 'DEBUG')\n            LoginItemsPlist = UniversalReadPlist(LoginItemsPlistPath)\n\n            if LoginItemsPlist and 'SessionItems' in LoginItemsPlist:\n                CustomListItems = LoginItemsPlist['SessionItems']['CustomListItems']\n                for CustomListItem in CustomListItems:\n                    PrintAndLog(CustomListItem['Name'].decode('utf-8') + u' - ' + binascii.hexlify(CustomListItem['Alias']).decode('hex').decode('utf-8', 'ignore'), 'INFO')\n\ndef HashDir(Title, Path):\n    ''' Hash a direrctory and add the hashes'''\n    PrintAndLog(Title.decode('utf-8'), 'SUBSECTION')\n\n    NbFiles = 0\n    for Root, Dirs, Files in os.walk(Path):\n        for File in Files:\n            FilePath = os.path.join(Root, File)\n            Md5 = BigFileMd5(FilePath)\n            if Md5:\n                if Md5 not in HASHES:\n                    HASHES.append(Md5)\n                PrintAndLog(Md5 +' '+ FilePath.decode('utf-8') + u' - ' + time.ctime(os.path.getmtime(FilePath)) + u' - ' + time.ctime(os.path.getctime(FilePath)) + u'\\n', 'INFO')\n            NbFiles += 1\n\n    if NbFiles == 0:\n        PrintAndLog(Path.decode('utf-8') + u' is empty', 'INFO')\n\ndef ParseDownloads():\n    ''' Hash all users\\' downloaded files '''\n\n    PrintAndLog(u'Users\\' downloads', 'SECTION')\n    for User in os.listdir(os.path.join(ROOT_PATH, 'Users')):\n        if User[0] != '.':\n            DlUserPath = os.path.join(ROOT_PATH, 'Users', User, 'Downloads')\n            if os.path.isdir(DlUserPath):\n                HashDir(User + u'\\'s downloads', DlUserPath)\n            else:\n                PrintAndLog(DlUserPath + u' does not exist', 'DEBUG')\n            OldEmailUserPath = os.path.join(ROOT_PATH, 'Users', User, 'Library/Mail Downloads/')\n            if os.path.isdir(OldEmailUserPath):\n                HashDir(User + u'\\'s old email downloads', OldEmailUserPath)\n            else:\n                PrintAndLog(OldEmailUserPath + u' does not exist', 'DEBUG')\n            EmailUserPath = os.path.join(ROOT_PATH, 'Users', User, 'Library/Containers/com.apple.mail/Data/Library/Mail Downloads')\n            if os.path.isdir(EmailUserPath):\n                HashDir(User + u'\\'s email downloads', EmailUserPath)\n            else:\n                PrintAndLog(EmailUserPath + u' does not exist', 'DEBUG')\n\ndef DumpSQLiteDb(SQLiteDbPath):\n    ''' Dump a SQLite database file '''\n\n    PrintAndLog(SQLiteDbPath, 'DEBUG')\n    if os.path.isfile(SQLiteDbPath):\n        try:\n            DbConnection = sqlite3.connect(SQLiteDbPath)\n            DbCursor = DbConnection.cursor()\n            DbCursor.execute(\"SELECT * from sqlite_master WHERE type = 'table'\")\n            Tables =  DbCursor.fetchall()\n            for Table in Tables:\n                PrintAndLog(u'Table ' + Table[2].decode('utf-8'), 'DEBUG')\n                DbCursor.execute(\"SELECT * from \" + Table[2])\n                Rows = DbCursor.fetchall()\n                if len(Rows) == 0:\n                    PrintAndLog(u'Table ' + Table[2].decode('utf-8') + u' is empty', 'INFO')\n                else:\n                    for Row in Rows:\n                        PrintAndLog(str(Row).decode('utf-8') + u'\\n', 'INFO_RAW')\n            DbConnection.close()\n        except Exception as e:\n            PrintAndLog(u'Error with ' + SQLiteDbPath.decode('utf-8') + u': ' + str(e.args).decode('utf-8'), 'ERROR')\n    else:\n        PrintAndLog(SQLiteDbPath.decode('utf-8') + u' not found\\n', 'ERROR')\n\ndef ParseFirefoxProfile(User, Profile):\n    ''' Parse the different SQLite databases in a Firefox profile '''\n\n    PrintAndLog(User + u'\\'s Firefox profile (' + Profile.decode('utf-8') + u')', 'SUBSECTION')\n\n    #Most useful See http://kb.mozillazine.org/Profile_folder_-_Firefox\n    DumpSQLiteDb(os.path.join(ROOT_PATH, 'Users', User, 'Library/Application Support/Firefox/Profiles/', Profile, 'cookies.sqlite'))\n    DumpSQLiteDb(os.path.join(ROOT_PATH, 'Users', User, 'Library/Application Support/Firefox/Profiles/', Profile, 'downloads.sqlite'))\n    DumpSQLiteDb(os.path.join(ROOT_PATH, 'Users', User, 'Library/Application Support/Firefox/Profiles/', Profile, 'formhistory.sqlite'))\n    DumpSQLiteDb(os.path.join(ROOT_PATH, 'Users', User, 'Library/Application Support/Firefox/Profiles/', Profile, 'places.sqlite'))\n    DumpSQLiteDb(os.path.join(ROOT_PATH, 'Users', User, 'Library/Application Support/Firefox/Profiles/', Profile, 'signons.sqlite'))\n\n    #Secondary\n    DumpSQLiteDb(os.path.join(ROOT_PATH, 'Users', User, 'Library/Application Support/Firefox/Profiles/', Profile, 'permissions.sqlite'))\n    DumpSQLiteDb(os.path.join(ROOT_PATH, 'Users', User, 'Library/Application Support/Firefox/Profiles/', Profile, 'addons.sqlite'))\n    DumpSQLiteDb(os.path.join(ROOT_PATH, 'Users', User, 'Library/Application Support/Firefox/Profiles/', Profile, 'extensions.sqlite'))\n    DumpSQLiteDb(os.path.join(ROOT_PATH, 'Users', User, 'Library/Application Support/Firefox/Profiles/', Profile, 'content-prefs.sqlite'))\n    DumpSQLiteDb(os.path.join(ROOT_PATH, 'Users', User, 'Library/Application Support/Firefox/Profiles/', Profile, 'healthreport.sqlite'))\n    DumpSQLiteDb(os.path.join(ROOT_PATH, 'Users', User, 'Library/Application Support/Firefox/Profiles/', Profile, 'webappsstore.sqlite'))\n\ndef ParseFirefox():\n    ''' Walk in all users' FireFox profiles and call ParseFirefoxProfile() '''\n\n    PrintAndLog(u'Users\\' Firefox profiles', 'SUBSECTION')\n    for User in os.listdir(os.path.join(ROOT_PATH, 'Users')):\n        UserFFProfilePath = os.path.join(ROOT_PATH, 'Users', User, 'Library/Application Support/Firefox/Profiles')\n        if User[0] != '.' and os.path.isdir(UserFFProfilePath):\n            PrintAndLog(User + u'\\'s Firefox', 'SUBSECTION')\n            for Profile in os.listdir(UserFFProfilePath):\n                if Profile[0] != '.' and os.path.isdir(os.path.join(UserFFProfilePath,  Profile)):\n                    ParseFirefoxProfile(User, Profile)\n\ndef ParseSafariProfile(User, Path):\n    ''' Parse the different plist and SQLite databases in a Safari profile '''\n\n    HistoryPlist = False\n    DownloadsPlist = False\n    NbFiles = 0\n\n    PrintAndLog(User + u'\\'s Safari profile', 'SUBSECTION')\n\n    PrintAndLog(User + u'\\'s Safari downloads', 'SUBSECTION')\n    DownloadsPlistPath = os.path.join(Path, 'Downloads.plist')\n    PrintAndLog(DownloadsPlistPath.decode('utf-8'), 'DEBUG')\n\n    DownloadsPlist = UniversalReadPlist(DownloadsPlistPath)\n\n    if DownloadsPlist:\n        if 'DownloadHistory' in DownloadsPlist:\n            Downloads = DownloadsPlist['DownloadHistory']\n            for DL in Downloads:\n                DlStr = u''\n                DlStr += DL['DownloadEntryURL'].decode('utf-8') + u' -> ' + DL['DownloadEntryPath'].decode('utf-8') + u' (' + DL['DownloadEntryIdentifier'].decode('utf-8') + u')\\n'\n                PrintAndLog(DlStr, 'INFO')\n\n    PrintAndLog(User + u'\\'s Safari history', 'SUBSECTION')\n    HistoryPlistPath = os.path.join(Path, 'History.plist')\n    PrintAndLog(HistoryPlistPath.decode('utf-8'), 'DEBUG')\n\n    HistoryPlist = UniversalReadPlist(HistoryPlistPath)\n\n    if HistoryPlist:\n        if 'WebHistoryDates' in HistoryPlist:\n            History =  HistoryPlist['WebHistoryDates']\n            for H in History:\n                HStr = u''\n                if 'title' in H:\n                    HStr += unicode(H['title']) + u' - '\n                if 'diplayTitle' in H:\n                    HStr += unicode(H['diplayTitle']) + u' - '\n                HStr += unicode(H['']) + u'\\n'\n                PrintAndLog(HStr, 'INFO')\n\n    PrintAndLog(User + u'\\'s Safari TopSites', 'SUBSECTION')\n    TopSitesPlistPath = os.path.join(Path, 'TopSites.plist')\n\n    PrintAndLog(TopSitesPlistPath.decode('utf-8'), 'DEBUG')\n    TopSitesPlist = UniversalReadPlist(TopSitesPlistPath)\n\n    if TopSitesPlist:\n        if 'TopSites' in TopSitesPlist:\n            TopSites =  TopSitesPlist['TopSites']\n            for T in TopSites:\n                TStr = u''\n                if 'TopSiteTitle' in T:\n                    TStr += unicode(T['TopSiteTitle']) + u' - '\n                TStr += unicode(T['TopSiteURLString']) + u'\\n'\n                PrintAndLog(TStr , 'INFO')\n\n\n    PrintAndLog(User + u'\\'s Safari LastSession', 'SUBSECTION')\n    LastSessionPlistPath = os.path.join(Path, 'LastSession.plist')\n\n    PrintAndLog(LastSessionPlistPath.decode('utf-8'), 'DEBUG')\n    LastSessionPlist = UniversalReadPlist(LastSessionPlistPath)\n\n    if LastSessionPlist and 'SessionWindows' in LastSessionPlist:\n        try:\n            SessionWindows = LastSessionPlist['SessionWindows']\n            if len(SessionWindows) > 0:\n                TabStates = SessionWindows[0].get('TabStates', [])\n                if len(TabStates) > 0:\n                    LastSession = TabStates[0]\n                    PrintAndLog(LastSession.get('TabURL', '').decode('utf-8') + u' - ' + binascii.hexlify(LastSession['SessionState']).decode('hex').decode('utf-8', 'ignore'), 'INFO')\n        except:\n            PrintAndLog('EXCEPTION on LastSession for Safari !!! ', 'INFO')\n\n\n\n    PrintAndLog(User + u'\\'s Safari databases', 'SUBSECTION')\n    NbFile = 0\n    if os.path.isfile(os.path.join(Path, 'Databases')):\n        for Db in os.listdir(os.path.join(Path, 'Databases')):\n            DumpSQLiteDb(os.path.join(Path, 'Databases', Db))\n            NbFiles += 1\n\n    if  NbFiles == 0:\n        PrintAndLog(User + u'\\'s Safari databases is empty', 'INFO')\n\n    NbFile = 0\n\n    PrintAndLog(User + u'\\'s Safari LocalStorage', 'SUBSECTION')\n    if os.path.isfile(os.path.join(Path, 'LocalStorage')):\n        for Db in os.listdir(os.path.join(Path, 'LocalStorage')):\n\t     if os.path.isfile(os.path.join(Path, 'LocalStorage', Db)):\n                 DumpSQLiteDb(os.path.join(Path, 'LocalStorage', Db))\n                 NbFiles += 1\n\n    if  NbFiles == 0:\n        PrintAndLog(User + u'\\'s Safari LocalStorage is empty', 'INFO')\n\ndef ParseSafari():\n    PrintAndLog(u'Users\\' Safari profiles', 'SUBSECTION')\n    for User in os.listdir(os.path.join(ROOT_PATH, 'Users')):\n        UserSafariProfilePath = os.path.join(ROOT_PATH, 'Users', User, 'Library/Safari')\n        if User[0] != '.' and os.path.isdir(UserSafariProfilePath):\n            ParseSafariProfile(User, UserSafariProfilePath)\n\ndef ParseChromeProfile(User, Path):\n    ''' Parse the different SQLite databases in a Chrome profile '''\n\n    NbFiles = 0\n\n    PrintAndLog(User + u'\\'s Chrome profile', 'SUBSECTION')\n\n    PrintAndLog(User + u'\\'s Chrome history', 'SUBSECTION')\n    DumpSQLiteDb(os.path.join(Path, 'History'))\n\n    PrintAndLog(User + u'\\'s Chrome archived history', 'SUBSECTION')\n    DumpSQLiteDb(os.path.join(Path, 'Archived History'))\n\n    PrintAndLog(User + u'\\'s Chrome cookies', 'SUBSECTION')\n    DumpSQLiteDb(os.path.join(Path, 'Cookies'))\n\n    PrintAndLog(User + u'\\'s Chrome login data', 'SUBSECTION')\n    DumpSQLiteDb(os.path.join(Path, 'Login Data'))\n\n    PrintAndLog(User + u'\\'s Chrome Top Sites', 'SUBSECTION')\n    DumpSQLiteDb(os.path.join(Path, 'Top Sites'))\n\n    PrintAndLog(User + u'\\'s Chrome web data', 'SUBSECTION')\n    DumpSQLiteDb(os.path.join(Path, 'Web Data'))\n\n    PrintAndLog(User + u'\\'s Chrome databases', 'SUBSECTION')\n    for Db in os.listdir(os.path.join(Path, 'databases')):\n        CurrentDbPath = os.path.join(Path, 'databases', Db)\n        if CurrentDbPath[-8:] != '-journal' and not os.path.isdir(CurrentDbPath):\n            DumpSQLiteDb(CurrentDbPath)\n        NbFiles += 1\n\n    if  NbFiles == 0:\n        PrintAndLog(User + u'\\'s Chrome databases is empty', 'INFO')\n\n    NbFiles = 0\n\n    PrintAndLog(User + u'\\'s Chrome LocalStorage', 'SUBSECTION')\n    for Db in os.listdir(os.path.join(Path, 'Local Storage')):\n        CurrentDbPath = os.path.join(Path, 'Local Storage', Db)\n        if CurrentDbPath[-8:] != '-journal' and not os.path.isdir(CurrentDbPath):\n            DumpSQLiteDb(CurrentDbPath)\n        NbFiles += 1\n\n    if  NbFiles == 0:\n        PrintAndLog(User + u'\\'s Chrome LocalStorage is empty', 'INFO')\n\ndef ParseChrome():\n    ''' Parse the different files in a Chrome profile '''\n\n    PrintAndLog(u'Users\\' Chrome profiles', 'SUBSECTION')\n    for User in os.listdir(os.path.join(ROOT_PATH, 'Users')):\n        UsersChromePath = os.path.join(ROOT_PATH, 'Users', User, 'Library/Application Support/Google/Chrome/Default')\n        if User[0] != '.' and os.path.isdir(UsersChromePath):\n            ParseChromeProfile(User, UsersChromePath)\n\ndef ParseBrowsers():\n    ''' Call the different functions to parse the browsers   '''\n\n    PrintAndLog(u'Browsers', 'SECTION')\n\n    ParseSafari()\n    ParseFirefox()\n    ParseChrome()\n\ndef ParsePackagesDir(PackagesDirPath):\n    ''' Parse the packages in a directory '''\n\n    plistfile = 'Info.plist'\n    IgnoredFiles = ['.DS_Store', '.localized']\n\n    PackagePlistPath = ''\n    CFBundleExecutablepath = ''\n    NbPackages = 0\n\n    for PackagePath in os.listdir(PackagesDirPath):\n        if PackagePath not in IgnoredFiles:\n            if PackagePath[-4:] == '.app' or PackagePath[-5:] == '.kext':\n                if os.path.isfile(os.path.join(PackagesDirPath, PackagePath, plistfile)):\n                    PackagePlistPath = os.path.join(PackagesDirPath, PackagePath, plistfile)\n                    CFBundleExecutablepath = ''\n                elif os.path.isfile(os.path.join(PackagesDirPath, PackagePath, 'Contents', plistfile)):\n                    PackagePlistPath = os.path.join(PackagesDirPath, PackagePath, 'Contents', plistfile)\n                    CFBundleExecutablepath = 'Contents/MacOS/'\n                else:\n                    PrintAndLog(os.path.join(PackagesDirPath, PackagePath).decode('utf-8'), 'DEBUG')\n                    PrintAndLog(u'Cannot find any Info.plist in ' + PackagePath.decode('utf-8'), 'ERROR')\n                    continue\n\n                PrintAndLog(os.path.join(PackagesDirPath, PackagePath).decode('utf-8'), 'DEBUG')\n                PackagePlist = UniversalReadPlist(PackagePlistPath)\n\n                if PackagePlist:\n                    if 'CFBundleExecutable' in PackagePlist:\n                        if PackagePlist['CFBundleExecutable'] != '':\n                            FilePath = os.path.join(PackagesDirPath, PackagePath, CFBundleExecutablepath, PackagePlist['CFBundleExecutable'])\n                            Md5 = BigFileMd5(FilePath)\n                            if Md5:\n                                if Md5 not in HASHES:\n                                    HASHES.append(Md5)\n                                PrintAndLog(Md5 + u' '+ FilePath.decode('utf-8') + u' - ' + time.ctime(os.path.getmtime(FilePath)) + u' - ' + time.ctime(os.path.getctime(FilePath)) + u'\\n', 'INFO')\n                        else:\n                            PrintAndLog(u'The CFBundleExecutable key in ' + PackagePlistPath.decode('utf-8') + u' is empty\\n', 'ERROR')\n                    else:\n                        PrintAndLog(u'Cannot find the CFBundleExecutable key in ' + PackagePlistPath.decode('utf-8') + u'\\n', 'ERROR')\n            NbPackages += 1\n\n            if os.path.isdir(os.path.join(PackagesDirPath, PackagePath)) and not os.path.islink(os.path.join(PackagesDirPath, PackagePath)):\n                ParsePackagesDir(os.path.join(PackagesDirPath, PackagePath))\n\n        else: continue\n\n    if NbPackages == 0:\n        PrintAndLog(PackagesDirPath.decode('utf-8') + u' is empty (no package found)', 'INFO')\n\ndef ParseKext():\n    ''' Parse the Kernel extensions '''\n\n    PrintAndLog(u'Kernel extensions', 'SECTION')\n    ParsePackagesDir(os.path.join(ROOT_PATH, 'System/Library/Extensions/'))\n\ndef AggregateLogsDir(ZipHandle, LogDirPath):\n    ''' Aggregate all logs found in a directory to a zipball '''\n\n    NbLogFiles = 0\n\n    for Root, Dirs, Files in os.walk(LogDirPath):\n        for File in Files:\n            FilePath = os.path.join(Root, File)\n            try:\n                ZipHandle.write(FilePath)\n                PrintAndLog(u'Log file ' + FilePath.decode('utf-8') + u' added to the logs zipball', 'INFO')\n            except:\n                PrintAndLog(FilePath.decode('utf-8') + u' aggregation FAILED', 'ERROR')\n            NbLogFiles += 1\n\n    if NbLogFiles == 0:\n            PrintAndLog(LogDirPath.decode('utf-8') + u' is empty', 'INFO')\n\ndef AggregateLogs(ZipLogsFile):\n    ''' Walk in the different log directories to add all logs to a zipball '''\n\n    PrintAndLog(u'Log files aggregation', 'SECTION')\n    \n    if not os.path.isdir(ZipLogsFile):\n        os.makedirs(ZipLogsFile)\n\n    ZipLogsFilePath = os.path.join(ZipLogsFile, 'OSXAuditor_report_' + HOSTNAME + '_' + time.strftime('%Y%m%d-%H%M%S', time.gmtime()) + '.zip')\n    PrintAndLog(u'All log files are aggregated in ' + ZipLogsFilePath.decode('utf-8'), 'DEBUG')\n\n    try:\n        with zipfile.ZipFile(ZipLogsFilePath, 'w') as ZipLogsFile:\n            PrintAndLog(os.path.join(ROOT_PATH, 'var/log').decode('utf-8') + u' files aggregation', 'SUBSECTION')\n            AggregateLogsDir(ZipLogsFile, os.path.join(ROOT_PATH, 'var/log'))\n            PrintAndLog(os.path.join(ROOT_PATH, 'Library/logs').decode('utf-8') + u' files aggregation', 'SUBSECTION')\n            AggregateLogsDir(ZipLogsFile, os.path.join(ROOT_PATH, 'Library/logs'))\n            for User in os.listdir(os.path.join(ROOT_PATH, 'Users')):\n                if User[0] != '.':\n                    PrintAndLog(os.path.join(ROOT_PATH, 'Users', User, 'Library/logs').decode('utf-8') + u' files aggregation', 'SUBSECTION')\n                    AggregateLogsDir(ZipLogsFile, os.path.join(ROOT_PATH, 'Users', User, 'Library/logs'))\n    except Exception as e:\n        PrintAndLog(u'Log files aggregation FAILED ' + str(e.args).decode('utf-8'), 'ERROR')\n\ndef GeomenaApiLocation(Ssid):\n    ''' Perform a geolocation query on Geomena'''\n\n    NormalizedSsid = ''\n    Latitude = 'Not found'\n    Longitude = 'Not found'\n\n    Ssid = Ssid.split(':')\n\n    for i in Ssid:\n        if len(i) == 1:\n            i = '0'+i\n        NormalizedSsid += i\n\n    PrintAndLog(u'Geomena query for ' + ''.join(NormalizedSsid), 'DEBUG')\n\n    try:\n        F = urllib2.urlopen(GEOMENA_API_HOST + NormalizedSsid)\n        Data = F.read()\n    except urllib2.HTTPError as e:\n        PrintAndLog(u'Geomena API error ' + str(e.code) + ' ' + str(e.reason).decode('utf-8'), 'ERROR')\n\n    M = re.match('.+\\sLatitude:\\s([-\\d\\.]{1,19})\\s.+\\sLongitude:\\s([-\\d\\.]{1,19})\\s.+', Data, re.DOTALL)\n    if M:\n        Latitude = M.group(1)\n        Longitude = M.group(2)\n\n    return u'Latitude: ' + Latitude + u' Longitude: ' + Longitude\n\ndef ParseAirportPrefs():\n    ''' Parse Airport preferences and try to extract geolocation information '''\n\n    global HTML_LOG_FILE\n    AirportPrefPlist = False\n    NbAirportPrefs = 0\n\n    PrintAndLog(u'Airport preferences', 'SECTION')\n\n    AirportPrefPlistPath = os.path.join(ROOT_PATH, 'Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist')\n\n    PrintAndLog(AirportPrefPlistPath, 'DEBUG')\n    AirportPrefPlist = UniversalReadPlist(AirportPrefPlistPath)\n\n    if AirportPrefPlist:\n        if 'KnownNetworks' in AirportPrefPlist:\n            KnownNetworks = AirportPrefPlist['KnownNetworks']\n            for KnownNetwork in KnownNetworks:              #TODO: Add ChannelHistory\n                if GEOLOCATE_WIFI_AP:\n                    Geolocation = GeomenaApiLocation(KnownNetworks[KnownNetwork]['SSIDString'])\n                else:\n                    Geolocation = 'N/A (Geolocation disabled)'\n                \n                print sys.getsizeof(KnownNetworks[KnownNetwork]['SSID'])\n                AirportPref = u'SSID: ' + KnownNetworks[KnownNetwork]['SSIDString'].decode('utf-8') + u' - SSID: ' + str(KnownNetworks[KnownNetwork]['SSID'])\n                \n                if KnownNetworks[KnownNetwork]['LastConnected']:\n                    AirportPref = AirportPref + u' - Last connected: '+ str(KnownNetworks[KnownNetwork]['LastConnected'])\n                \n                AirportPref = AirportPref + u' - Security type: ' + KnownNetworks[KnownNetwork]['SecurityType'] + u' - Geolocation: ' + Geolocation\n                \n                PrintAndLog(AirportPref, 'INFO')\n                NbAirportPrefs += 1\n\n    if NbAirportPrefs == 0:\n        PrintAndLog(AirportPrefPlistPath + u' is empty (no WiFi AP saved)', 'INFO')\n\ndef ParseMailAppAccount(MailAccountPlistPath):\n    ''' Parse a Mail Account plist '''\n\n    MailAccountPlist = False\n    NbMailAccounts = 0\n    NbSmtpAccounts = 0\n\n    PrintAndLog(MailAccountPlistPath, 'DEBUG')\n\n    MailAccountPlist = UniversalReadPlist(MailAccountPlistPath)\n\n    if MailAccountPlist:\n        PrintAndLog(u'Email accounts', 'SUBSECTION')\n        if 'MailAccounts' in MailAccountPlist:\n            MailAccounts = MailAccountPlist['MailAccounts']\n            for MailAccount in MailAccounts:\n                MAccountPref = ''\n                if 'AccountName' in MailAccount:\n                    MAccountPref = 'AccountName: ' + MailAccount['AccountName'] + ' - '\n                    if 'AccountType' in MailAccount: MAccountPref += 'AccountType: ' + MailAccount['AccountType'] + ' - '\n                    if 'SSLEnabled' in MailAccount: MAccountPref += 'SSLEnabled: ' + MailAccount['SSLEnabled'] + ' - '\n                    if 'Username' in MailAccount: MAccountPref += 'Username: ' + MailAccount['Username']  + ' - '\n                    if 'Hostname' in MailAccount: MAccountPref += 'Hostname: ' + MailAccount['Hostname']  + ' - '\n                    if 'PortNumber' in MailAccount: MAccountPref += '(' + str(MailAccount['PortNumber'])  + ') - '\n                    if 'SMTPIdentifier' in MailAccount: MAccountPref += 'SMTPIdentifier: ' + MailAccount['SMTPIdentifier']  + ' - '\n                    if 'EmailAddresses' in MailAccount:\n                        for EmailAddresse in MailAccount['EmailAddresses']:\n                            MAccountPref += 'EmailAddresse: ' + EmailAddresse + ' - '\n                    PrintAndLog(MAccountPref.decode('utf-8'), 'INFO')\n                NbMailAccounts += 1\n            if NbMailAccounts == 0:\n                PrintAndLog(u'No email account)','INFO')\n\n        PrintAndLog(u'SMTP accounts', 'SUBSECTION')\n        if 'DeliveryAccounts' in MailAccountPlist:\n            DeliveryAccounts = MailAccountPlist['DeliveryAccounts']\n            for DeliveryAccount in DeliveryAccounts:\n                DAccountPref = ''\n                if 'AccountName' in DeliveryAccount:\n                    DAccountPref = 'AccountName: ' + DeliveryAccount['AccountName'] + ' - '\n                    if 'AccountType' in DeliveryAccount: DAccountPref += 'AccountType: ' + DeliveryAccount['AccountType'] + ' - '\n                    if 'SSLEnabled' in DeliveryAccount: DAccountPref += 'SSLEnabled: ' + DeliveryAccount['SSLEnabled'] + ' - '\n                    if 'Username' in DeliveryAccount: DAccountPref += 'Username: ' + DeliveryAccount['Username']  + ' - '\n                    if 'Hostname' in DeliveryAccount: DAccountPref += 'Hostname: ' + DeliveryAccount['Hostname']  + ' - '\n                    if 'PortNumber' in DeliveryAccount: DAccountPref += '(' + str(DeliveryAccount['PortNumber'])  + ') - '\n                    PrintAndLog(DAccountPref.decode('utf-8'), 'INFO')\n                NbSmtpAccounts += 1\n            if NbSmtpAccounts == 0:\n                PrintAndLog(u'No SMTP account)','INFO')\n\ndef ParseUsersRecentItems(RecentItemsAccountPlistPath):\n    ''' Parse users' recents items'''\n\n    PrintAndLog(RecentItemsAccountPlistPath, 'DEBUG')\n\n    RecentItemsAccountPlist = UniversalReadPlist(RecentItemsAccountPlistPath)\n\n    if RecentItemsAccountPlist:\n        if 'RecentServers' in RecentItemsAccountPlist:\n            RecentServersList = ''\n            RecentServers = RecentItemsAccountPlist['RecentServers']['CustomListItems']\n            if len(RecentServers) != 0:\n                for RecentServer in RecentServers:\n                    RecentServersList += RecentServer['Name'] + ' -> ' #+ RecentServer['URL']\n                PrintAndLog('Recent servers : ' + RecentServersList, 'INFO')\n            else:\n                PrintAndLog('No recent servers', 'INFO')\n\n        if 'RecentDocuments' in RecentItemsAccountPlist:\n            RecentDocumentsList = ''\n            RecentDocuments = RecentItemsAccountPlist['RecentDocuments']['CustomListItems']\n            if len(RecentDocuments) != 0:\n                for RecentDocument in RecentDocuments:\n                    RecentDocumentsList += RecentDocument['Name']\n                PrintAndLog('Recent documents : ' + RecentDocumentsList, 'INFO')\n            else:\n                PrintAndLog('No recent documents', 'INFO')\n\n        if 'RecentApplications' in RecentItemsAccountPlist:\n            RecentApplicationsList = ''\n            RecentApplications = RecentItemsAccountPlist['RecentApplications']['CustomListItems']\n            if len(RecentApplications) != 0:\n                for RecentApplication in RecentApplications:\n                    RecentApplicationsList += RecentApplication['Name']\n                PrintAndLog('Recent Applications : ' + RecentApplicationsList, 'INFO')\n            else:\n                PrintAndLog('No recent applications', 'INFO')\n\n        if 'Hosts' in RecentItemsAccountPlist:\n            RecentHostsList = ''\n            RecentHosts = RecentItemsAccountPlist['Hosts']['CustomListItems']\n            if len(RecentHosts) != 0:\n                for RecentHost in RecentHosts:\n                    RecentHostsList += RecentHost['Name'] + ' -> ' + RecentHost['URL'] + ' | '\n                PrintAndLog('Recent hosts : ' + RecentHostsList, 'INFO')\n            else:\n                PrintAndLog('No recent hosts', 'INFO')\n\ndef StringFromDic(dic):\n    ''' Return the content of a dictionary '''\n\n    Content = u''\n    for stuff in dic:\n        Content += stuff + u'\\n'\n    return Content\n\n\ndef ParseSysUsers():\n    ''' Parse the system users db '''\n\n    global ADMINS\n\n    PrintAndLog(u'System\\'s users', 'SUBSECTION')\n    for User in os.listdir(os.path.join(ROOT_PATH, 'private/var/db/dslocal/nodes/Default/users')):\n        if User[0] != '.':\n            SysUserPlistPath = os.path.join(ROOT_PATH, 'private/var/db/dslocal/nodes/Default/users', User)\n            PrintAndLog(User[:-6] + u'\\'s system account details', 'SUBSECTION')\n\n            SysUserPlist = UniversalReadPlist(SysUserPlistPath)\n\n            UserDetails =''\n            if SysUserPlist:\n                if 'name' in SysUserPlist:\n                    Names = u''\n                    for Name in SysUserPlist['name']:\n                        Names += Name\n                        if Name in ADMINS:\n                            Names += u' (is Admin)'\n                        Names += u'\\n'\n                    UserDetails += u'Name(s): ' + Names\n\n                if 'realname' in SysUserPlist:\n                    UserDetails += u'Real Name(s): ' + StringFromDic(SysUserPlist['realname'])\n\n                if 'shell' in SysUserPlist:\n                    UserDetails += u'Shell(s): ' + StringFromDic(SysUserPlist['shell'])\n\n                if 'home' in SysUserPlist:\n                    UserDetails += u'Home(s): ' + StringFromDic(SysUserPlist['home'])\n\n                if 'uid' in SysUserPlist:\n                    UserDetails += u'UID(s): ' + StringFromDic(SysUserPlist['uid'])\n\n                if 'gid' in SysUserPlist:\n                    UserDetails += u'GID(s): ' + StringFromDic(SysUserPlist['gid'])\n\n                if 'generateduid' in SysUserPlist:\n                    Generateduids = u''\n                    for Generateduid in SysUserPlist['generateduid']:\n                        Generateduids += Generateduid\n                        if Generateduid in ADMINS:\n                            Generateduids += u' (is Admin)'\n                        Generateduids += u'\\n'\n                    UserDetails += u'generated UID(s): ' + Generateduids\n\n                if 'LinkedIdentity' in SysUserPlist:\n                    UserDetails += u'LinkedIdentities have been found. Extraction of LinkedIdentities is not implemented yet.'\n\n                PrintAndLog(UserDetails, 'INFO_RAW')\n\ndef ParseSysAdminsGroup():\n    ''' Parse the system admins group db '''\n\n    global ADMINS\n\n    PrintAndLog(u'System\\'s admins', 'SUBSECTION')\n\n    SysAdminsPlistPath = os.path.join(ROOT_PATH, 'private/var/db/dslocal/nodes/Default/groups/admin.plist')\n    SysAdminsPlist = UniversalReadPlist(SysAdminsPlistPath)\n\n    if SysAdminsPlist:\n        if 'groupmembers' in SysAdminsPlist:\n            for Admin in SysAdminsPlist['groupmembers']:\n                ADMINS.append(Admin)\n\n        if 'users' in SysAdminsPlist:\n            for Admin in SysAdminsPlist['users']:\n                ADMINS.append(Admin)\n\n        Admins = u''\n        for Admin in ADMINS:\n            Admins += Admin + u'\\n'\n        PrintAndLog(Admins, 'INFO_RAW')\n\ndef ParseUsersAccounts():\n    ''' Parse users' accounts '''\n\n    PrintAndLog(u'Users\\' accounts', 'SECTION')\n\n    PrintAndLog(u'Users\\' social accounts', 'SUBSECTION')\n    for User in os.listdir(os.path.join(ROOT_PATH, 'Users')):\n        UsersAccountPath = os.path.join(ROOT_PATH, 'Users', User, 'Library/Accounts/Accounts3.sqlite')\n        if User[0] != '.':\n            PrintAndLog(User + u'\\'s social account', 'SUBSECTION')\n            if os.path.isfile(UsersAccountPath):\n                DumpSQLiteDb(UsersAccountPath)\n            else:\n                PrintAndLog(User + u' has no social account', 'INFO')\n\n    PrintAndLog(u'Users\\' Mail.app accounts', 'SUBSECTION')\n    for User in os.listdir(os.path.join(ROOT_PATH, 'Users')):\n        MailAccountPlistPath = os.path.join(ROOT_PATH, 'Users', User, 'Library/Containers/com.apple.mail/Data/Library/Mail/V2/MailData/Accounts.plist')\n        if User[0] != '.':\n            PrintAndLog(User + u'\\'s Mail.app accounts', 'SUBSECTION')\n            if os.path.isfile(MailAccountPlistPath):\n                ParseMailAppAccount(MailAccountPlistPath)\n            else:\n                PrintAndLog(User + u' has no Mail.app account', 'INFO')\n\n    PrintAndLog(u'Users\\' recent items', 'SUBSECTION')\n    for User in os.listdir(os.path.join(ROOT_PATH, 'Users')):\n        RecentItemsAccountPlistPath = os.path.join(ROOT_PATH, 'Users', User, 'Library/Preferences/com.apple.recentitems.plist')\n        if User[0] != '.':\n            PrintAndLog(User + u'\\'s recent items', 'SUBSECTION')\n            if os.path.isfile(RecentItemsAccountPlistPath):\n                ParseUsersRecentItems(RecentItemsAccountPlistPath)\n            else:\n                PrintAndLog(User + u' has no recent items', 'INFO')\n\n    ParseSysAdminsGroup()\n    ParseSysUsers()\n\ndef ParseInstalledApps():\n    ''' Parses and hashes installed apps in /Applications '''\n\n    PrintAndLog(u'Installed applications', 'SECTION')\n    ParsePackagesDir(os.path.join(ROOT_PATH, 'Applications'))\n\ndef GetAuditedSystemVersion():\n    ''' Simply return the system version '''\n\n    global OSX_VERSION\n\n    SysVersion = 'Unknown system version'\n    SystemVersionPlist = False\n\n    SystemVersionPlist = UniversalReadPlist('/System/Library/CoreServices/SystemVersion.plist')\n\n    if SystemVersionPlist:\n        if 'ProductName' in SystemVersionPlist: SysVersion = SystemVersionPlist['ProductName']\n        if 'ProductVersion' in SystemVersionPlist: SysVersion += ' ' + SystemVersionPlist['ProductVersion']\n        if 'ProductBuildVersion' in SystemVersionPlist: SysVersion += ' build ' + SystemVersionPlist['ProductBuildVersion']\n\n        ProductVersion = SystemVersionPlist['ProductVersion'].split('.')\n\n        OSX_VERSION = {\n\t\t\t'ProductBuildVersion': SystemVersionPlist['ProductBuildVersion'],\n\t\t\t'ProductVersion': SystemVersionPlist['ProductVersion'],\n\t\t\t'MajorVersion': int(ProductVersion[0]),\n\t\t\t'MinorVersion': int(ProductVersion[1]),\n\t\t\t'PatchVersion': int(ProductVersion[2] if len(ProductVersion) > 2 else 0)\n\t\t}\n\n    else:\n        PrintAndLog(u'Cannot determine the system version', 'ERROR')\n\n    return SysVersion\n\n\ndef GetAuditedSystemTimezone():\n    ''' Return the current system timezone '''\n\n    Timezone = False\n    try:\n        Timezone = os.path.realpath(os.path.join(ROOT_PATH, 'etc/localtime'))\n        Timezone = Timezone.split('/')\n    except Exception as e:\n        PrintAndLog(u'Cannot read the timezone' + str(e.args).decode('utf-8'), 'ERROR')\n\n    return Timezone[-2] + '/' + Timezone[-1]\n\n\ndef ParseSystemlogFile(SystemLogPath, Year, Bzip2ed=False, Gziped=False):\n    ''' Extract events from a System.log file '''\n\n    global HTML_EVENTS_LANES\n    global HTML_EVENTS_ITEMS\n    global HTML_EVENTS_LANES_CPT\n    AllEvents = []\n    SystemLogData = ''\n\n    PrintAndLog(SystemLogPath, 'DEBUG')\n\n    if Gziped:\n        try:\n            with gzip.open(SystemLogPath, 'rb') as SystemLogFile:\n                SystemLogData = SystemLogFile.read()\n        except:\n            PrintAndLog('Failed to open ' + SystemLogPath.decode('utf-8'), 'ERROR')\n    else:\n        try:\n            with open(SystemLogPath, 'r') as SystemLogFile:\n                SystemLogData = SystemLogFile.read()\n                if Bzip2ed: SystemLogData = bz2.decompress(SystemLogData)\n        except:\n            PrintAndLog('Failed to open ' + SystemLogPath.decode('utf-8'), 'ERROR')\n\n    DateRegex = '^(?P<date>\\w{3}\\s{1,2}\\d{1,2}\\s[\\d:]{8})'\n\n    BootTimesRegExp = re.compile(DateRegex + '.+BOOT_TIME', re.MULTILINE)\n    ShutDownTimesRegExp = re.compile(DateRegex + '.+\\sSHUTDOWN_TIME', re.MULTILINE)\n\n    HibernationInTimesLRegExp = re.compile(DateRegex + '.+\\sPMScheduleWakeEventChooseBest', re.MULTILINE)       #Lion\n    HibernationInTimesMLRegExp = re.compile(DateRegex + '.+\\shibernate_setup\\(0\\)\\stook', re.MULTILINE)     #Mountain Lion\n    HibernationOutTimesLRegExp = re.compile(DateRegex + '.+\\sMessage\\sWake', re.MULTILINE)                      #Lion TOFIX (in SYSLOG)\n    HibernationOutTimesMLRegExp = re.compile(DateRegex + '.+\\sWake\\sreason', re.MULTILINE)                      #Mountain Lion\n\n    LockedSessionsLRegExp = re.compile(DateRegex + '.+\\sloginwindow', re.MULTILINE)                         #Lion\n    LockedSessionsMLRegExp = re.compile(DateRegex + '.+\\sApplication\\sApp:\\'loginwindow\\'', re.MULTILINE)       #Mountain Lion\n\n    SessionsUnlockFailRegExp = re.compile(DateRegex + '.+\\sThe\\sauthtok\\sis\\sincorrect', re.MULTILINE)          #Lion and Mountain Lion\n    SessionsUnlockOkRegExp = re.compile(DateRegex + '.+\\Establishing\\scredentials', re.MULTILINE)               #Lion and Mountain Lion\n\n    SudosOkRegExp = re.compile(DateRegex + '.+\\ssudo\\[\\d+\\]:\\s+(?P<sudo>.+)$', re.MULTILINE)            #Lion and Mountain Lion\n    SudosFailRegExp = re.compile(DateRegex + '.+\\sincorrect\\spassword\\sattempts', re.MULTILINE)             #Lion and Mountain Lion\n\n    USBKernelRegExp = re.compile(DateRegex + '.+\\sUSBMSC\\sIdentifier.+:\\s(?P<serial>[a-zA-Z0-9]+)\\s', re.MULTILINE)                                         #Lion and Mountain Lion\n    FsEventRegExp = re.compile(DateRegex + '.+\\sfseventsd.+log\\sdir:\\s(?P<volume>/Volumes/.+)\\.fseventsd getting\\snew\\suuid:\\s(?P<uuid>.+)$', re.MULTILINE) #Lion and Mountain Lion\n\n    HFSMountRegExp = re.compile(DateRegex + '.+\\shfs:\\smounted\\s(?P<mountpoint>.+)$', re.MULTILINE)                                         #Lion and Mountain Lion\n\n    TTYOpenedRegExp = re.compile(DateRegex + '.+\\sUSER_PROCESS:\\s\\d+\\sttys', re.MULTILINE)                      #Lion and Mountain Lion\n    TTYClosedRegExp = re.compile(DateRegex + '.+\\sDEAD_PROCESS:\\s\\d+\\sttys', re.MULTILINE)                      #Lion and Mountain Lion\n\n    NetUPKernelRegExp = re.compile(DateRegex + '.+\\skernel\\[\\d\\+]:\\sEthernet.+Link\\up', re.MULTILINE)           #Lion and Mountain Lion\n    NetChangeLRegExp = re.compile(DateRegex + '.+\\sconfigd\\[\\d+]:\\snetwork\\sconfiguration\\schanged', re.MULTILINE)          #Lion\n    NetChangeMLRegExp = re.compile(DateRegex + '.+\\sconfigd\\[\\d+]:\\snetwork\\schanged:', re.MULTILINE)           #Mountain Lion\n\n    BootTimes = BootTimesRegExp.findall(SystemLogData)\n    for Item in BootTimes: AllEvents.append([Item, 'Boot', 1])\n\n    ShutDownTimes = ShutDownTimesRegExp.findall(SystemLogData)\n    for Item in ShutDownTimes: AllEvents.append([Item, 'Shutdown', 2])\n\n    HibernationInTimesL = HibernationInTimesLRegExp.findall(SystemLogData)\n    for Item in HibernationInTimesL: AllEvents.append([Item, 'Hibernation in', 3])\n\n    HibernationInTimesML = HibernationInTimesMLRegExp.findall(SystemLogData)\n    for Item in HibernationInTimesML: AllEvents.append([Item, 'Hibernation in', 3])\n\n    HibernationOutTimesL = HibernationOutTimesLRegExp.findall(SystemLogData)\n    for Item in HibernationOutTimesL: AllEvents.append([Item, 'Hibernation out', 4])\n\n    HibernationOutTimesML = HibernationOutTimesMLRegExp.findall(SystemLogData)\n    for Item in HibernationOutTimesML: AllEvents.append([Item, 'Hibernation out', 4])\n\n    # LockedSessionsL = LockedSessionsLRegExp.findall(SystemLogData)\n    # AllEvents.append([LockedSessionsL, 'Locked sessions', 5])\n\n    # LockedSessionsML = LockedSessionsMLRegExp.findall(SystemLogData)\n    # AllEvents.append([LockedSessionsML, 'Locked sessions', 5])\n\n    SessionsUnlockFail = SessionsUnlockFailRegExp.findall(SystemLogData)\n    for Item in SessionsUnlockFail: AllEvents.append([Item, 'Sessions unlock FAIL', 6])\n    \n    SessionsUnlockOk = SessionsUnlockOkRegExp.findall(SystemLogData)\n    for Item in SessionsUnlockOk: AllEvents.append([Item, 'Sessions unlock OK', 7])\n\n    SudosOk = SudosOkRegExp.findall(SystemLogData)\n    for Item in SudosOk: AllEvents.append([Item[0], 'Sudo OK: ' + Item[1], 8])\n\n    SudosFail = SudosFailRegExp.findall(SystemLogData)\n    for Item in SudosFail: AllEvents.append([Item, 'Sudo FAIL', 9])\n\n    USBsKernel = USBKernelRegExp.findall(SystemLogData)\n    for Item in USBsKernel: AllEvents.append([Item[0], 'USB device (kernel) - serial: ' + Item[1], 10])\n    \n    FsEvents = FsEventRegExp.findall(SystemLogData)\n    for Item in FsEvents: AllEvents.append([Item[0], 'Filesystem (fseventsd) - volume: ' + Item[1] + ' UUID: ' + Item[2], 11])\n\n    TTYsOpened = TTYOpenedRegExp.findall(SystemLogData)\n    for Item in TTYsOpened: AllEvents.append([Item, 'TTY opened', 12])\n\n    TTYsClosed = TTYClosedRegExp.findall(SystemLogData)\n    for Item in TTYsClosed: AllEvents.append([Item, 'TTY closed', 13])\n\n    HFSMountEvents = HFSMountRegExp.findall(SystemLogData)\n    for Item in HFSMountEvents: AllEvents.append([Item[0], 'HFS mount (kernel): volume ' + Item[1], 14])\n\n    # NetsUPKernel = NetUPKernelRegExp.findall(SystemLogData)\n    # AllEvents.append([NetsUPKernel, 'Network iface UP (kernel)', 14])\n\n    # NetsChangeL = NetChangeLRegExp.findall(SystemLogData)\n    # AllEvents.append([NetsChangeL, 'Network change', 15])\n\n    # NetsChangeML = NetChangeMLRegExp.findall(SystemLogData)\n    # AllEvents.append([NetsChangeML, 'Network change', 15])\n\n    AllEvents.sort(key=lambda a:a[0])\n\n    for Events in AllEvents:\n        if Events[1] not in HTML_EVENTS_LANES:\n            HTML_EVENTS_LANES.append(Events[1])\n        SplittedTime = Events[0].split(' ')\n        if len(SplittedTime) == 3:\n            EventTimeWithYear = ' '.join(SplittedTime[0:2]) + ', ' + Year + ' ' + SplittedTime[2]\n        elif len(SplittedTime) == 4:\n            EventTimeWithYear = ' '.join(SplittedTime[0:3]) + ', ' + Year + ' ' + SplittedTime[3]\n        else:\n            PrintAndLog(u'Cannot parse a syslog date', 'ERROR')\n            EventTimeWithYear = 'DateError'\n        PrintAndLog(EventTimeWithYear + ' UTC: ' + Events[1] + '\\n', 'INFO')\n    #HTML_EVENTS_ITEMS += '{\\'lane\\': ' + str(Events[2]) + ', \\'id\\': \\'' + EventTimeWithYear + '\\', \\'start\\': \\'' + EventTimeWithYear + '\\', \\'end\\': \\'' + EventTimeWithYear + '\\'},\\n'\n    HTML_EVENTS_ITEMS += 'N/A yet'\n\ndef ParseEventLogs():\n    ''' Extract events from the event logs '''\n\n    global HTML_EVENTS_TL\n    global HTML_LOG_CONTENT\n    global HTML_EVENTS_LANES\n\n    PrintAndLog('Event logs', 'SECTION')\n\n    SystemLogsPath = os.path.join(ROOT_PATH, 'var/log/')\n\n    PrintAndLog('System logs', 'SUBSECTION')\n\n    for LogFile in os.listdir(SystemLogsPath):\n        LogFilePath = os.path.join(SystemLogsPath, LogFile)\n        Year = time.strftime('%Y', time.localtime(os.path.getctime(LogFilePath)))                                   #nasty hack because the syslog format sucks\n\n        if re.match('^system\\.log$', LogFile):\n            ParseSystemlogFile(LogFilePath, Year)\n        if re.match('^system\\.log\\.\\d\\.bz2$', LogFile):\n            ParseSystemlogFile(LogFilePath, Year, Bzip2ed=True)\n        if re.match('^system\\.log\\.\\d\\.gz$', LogFile):\n            ParseSystemlogFile(LogFilePath, Year, Gziped=True)\n\n    Lanes = '\\', \\''.join(HTML_EVENTS_LANES)\n\n    HTML_EVENTS_TL += \"<script type=\\\"text/javascript\\\">var lanes = [\\\"\" + Lanes + \"\\\"], laneLength = lanes.length, items = [\" + HTML_EVENTS_ITEMS + \"]\"\n    HTML_EVENTS_TL += \"\"\"\n                timeBegin = \\\"Jan 1, 2013 00:00:00\\\",\n                timeEnd = \\\"Dec 31, 2013 23:59:59\\\";\n\n                </script>\n                <script type=\\\"text/javascript\\\">\n                    var m = [20, 15, 15, 120], //top right bottom left\n                        w = 4000 - m[1] - m[3],\n                        h = 500 - m[0] - m[2],\n                        miniHeight = laneLength * 12 + 50,\n                        mainHeight = h - miniHeight - 50;\n\n                    //var parseDate = d3.time.format(\\\"%Y-%m-%d %H:%M:%S\\\").parse; //2013-05-22 15:00:00\n                    var parseDate = d3.time.format(\\\"%b %d, %Y %H:%M:%S\\\").parse; //Jun 13, 2013 20:07:09\n\n                    //scales\n                    var x = d3.scale.linear()\n                            //.domain([timeBegin, timeEnd])\n                            .domain([parseDate(timeBegin), parseDate(timeEnd)])\n                            .range([0, w]);\n                    var x1 = d3.scale.linear()\n                            .range([0, w]);\n                    var y1 = d3.scale.linear()\n                            .domain([0, laneLength])\n                            .range([0, mainHeight]);\n                    var y2 = d3.scale.linear()\n                            .domain([0, laneLength])\n                            .range([0, miniHeight]);\n\n                    var chart = d3.select(\\\"body\\\")\n                                .append(\\\"svg\\\")\n                                .attr(\\\"width\\\", w + m[1] + m[3])\n                                .attr(\\\"height\\\", h + m[0] + m[2])\n                                .attr(\\\"class\\\", \\\"chart\\\");\n\n                    chart.append(\\\"defs\\\").append(\\\"clipPath\\\")\n                        .attr(\\\"id\\\", \\\"clip\\\")\n                        .append(\\\"rect\\\")\n                        .attr(\\\"width\\\", w)\n                        .attr(\\\"height\\\", mainHeight);\n\n                    var main = chart.append(\\\"g\\\")\n                                .attr(\\\"transform\\\", \\\"translate(\\\" + m[3] + \\\",\\\" + m[0] + \\\")\\\")\n                                .attr(\\\"width\\\", w)\n                                .attr(\\\"height\\\", mainHeight)\n                                .attr(\\\"class\\\", \\\"main\\\");\n\n                    var mini = chart.append(\\\"g\\\")\n                                .attr(\\\"transform\\\", \\\"translate(\\\" + m[3] + \\\",\\\" + (mainHeight + m[0]) + \\\")\\\")\n                                .attr(\\\"width\\\", w)\n                                .attr(\\\"height\\\", miniHeight)\n                                .attr(\\\"class\\\", \\\"mini\\\");\n\n                    //main lanes and texts\n                    main.append(\\\"g\\\").selectAll(\\\".laneLines\\\")\n                        .data(items)\n                        .enter().append(\\\"line\\\")\n                        .attr(\\\"x1\\\", m[1])\n                        .attr(\\\"y1\\\", function(d) {return y1(d.lane);})\n                        .attr(\\\"x2\\\", w)\n                        .attr(\\\"y2\\\", function(d) {return y1(d.lane);})\n                        .attr(\\\"stroke\\\", \\\"lightgray\\\")\n\n                    main.append(\\\"g\\\").selectAll(\\\".laneText\\\")\n                        .data(lanes)\n                        .enter().append(\\\"text\\\")\n                        .text(function(d) {return d;})\n                        .attr(\\\"x\\\", -m[1])\n                        .attr(\\\"y\\\", function(d, i) {return y1(i + .5);})\n                        .attr(\\\"dy\\\", \\\".5ex\\\")\n                        .attr(\\\"text-anchor\\\", \\\"end\\\")\n                        .attr(\\\"class\\\", \\\"laneText\\\");\n\n                    //mini lanes and texts\n                    mini.append(\\\"g\\\").selectAll(\\\".laneLines\\\")\n                        .data(items)\n                        .enter().append(\\\"line\\\")\n                        .attr(\\\"x1\\\", m[1])\n                        .attr(\\\"y1\\\", function(d) {return y2(d.lane);})\n                        .attr(\\\"x2\\\", w)\n                        .attr(\\\"y2\\\", function(d) {return y2(d.lane);})\n                        .attr(\\\"stroke\\\", \\\"lightgray\\\");\n\n                    mini.append(\\\"g\\\").selectAll(\\\".laneText\\\")\n                        .data(lanes)\n                        .enter().append(\\\"text\\\")\n                        .text(function(d) {return d;})\n                        .attr(\\\"x\\\", -m[1])\n                        .attr(\\\"y\\\", function(d, i) {return y2(i + .5);})\n                        .attr(\\\"dy\\\", \\\".5ex\\\")\n                        .attr(\\\"text-anchor\\\", \\\"end\\\")\n                        .attr(\\\"class\\\", \\\"laneText\\\");\n\n                    var itemRects = main.append(\\\"g\\\")\n                                        .attr(\\\"clip-path\\\", \\\"url(#clip)\\\");\n\n                    //mini item rects\n                    mini.append(\\\"g\\\").selectAll(\\\"miniItems\\\")\n                        .data(items)\n                        .enter().append(\\\"rect\\\")\n                        .attr(\\\"class\\\", function(d) {return \\\"miniItem\\\" + d.lane;})\n                        .attr(\\\"x\\\", function(d) {return x(parseDate(d.start));})\n                        .attr(\\\"y\\\", function(d) {return y2(d.lane + .5) - 5;})\n                        .attr(\\\"width\\\", function(d) {\n                            return x(parseDate(d.end)) - x(parseDate(d.start));\n                            })\n                        .attr(\\\"height\\\", 10);\n\n                    //mini labels\n                    mini.append(\\\"g\\\").selectAll(\\\".miniLabels\\\")\n                        .data(items)\n                        .enter().append(\\\"text\\\")\n                        .text(function(d) {return d.id;})\n                        .attr(\\\"x\\\", function(d) {return x(parseDate(d.start));})\n                        .attr(\\\"y\\\", function(d) {return y2(d.lane + .5);})\n                        .attr(\\\"dy\\\", \\\".5ex\\\");\n\n                    //brush\n                    var brush = d3.svg.brush()\n                                        .x(x)\n                                        .on(\\\"brush\\\", display);\n\n                    mini.append(\\\"g\\\")\n                        .attr(\\\"class\\\", \\\"x brush\\\")\n                        .call(brush)\n                        .selectAll(\\\"rect\\\")\n                        .attr(\\\"y\\\", 1)\n                        .attr(\\\"height\\\", miniHeight - 1);\n\n                    display();\n\n                    function display() {\n                        var rects, labels,\n                            minExtent = brush.extent()[0],\n                            maxExtent = brush.extent()[1],\n                            visItems = items.filter(function(d) {\n                                return parseDate(d.start) < maxExtent && parseDate(d.end) > minExtent;\n                                });\n\n                        mini.select(\\\".brush\\\")\n                            .call(brush.extent([minExtent, maxExtent]));\n\n                        x1.domain([minExtent, maxExtent]);\n\n                        //update main item rects\n                        rects = itemRects.selectAll(\\\"rect\\\")\n                                .data(visItems, function(d) { return d.id; })\n                            .attr(\\\"x\\\", function(d) {return x1(parseDate(d.start));})\n                            .attr(\\\"width\\\", function(d) {return x1(parseDate(d.end)) - x1(parseDate(d.start));});\n\n                        rects.enter().append(\\\"rect\\\")\n                            .attr(\\\"class\\\", function(d) {return \\\"miniItem\\\" + d.lane;})\n                            .attr(\\\"x\\\", function(d) {return x1(parseDate(d.start));})\n                            .attr(\\\"y\\\", function(d) {return y1(d.lane) + 10;})\n                            .attr(\\\"width\\\", function(d) {return x1(parseDate(d.end)) - x1(parseDate(d.start));})\n                            .attr(\\\"height\\\", function(d) {return .8 * y1(1);});\n\n                        rects.exit().remove();\n\n                        //update the item labels\n                        labels = itemRects.selectAll(\\\"text\\\")\n                            .data(visItems, function (d) { return d.id; })\n                            .attr(\\\"x\\\", function(d) {return x1(Math.max(parseDate(d.start), minExtent) + 2);});\n\n                        labels.enter().append(\\\"text\\\")\n                            .text(function(d) {return d.id;})\n                            .attr(\\\"x\\\", function(d) {return x1(Math.max(parseDate(d.start), minExtent));})\n                            .attr(\\\"y\\\", function(d) {return y1(d.lane + .5);})\n                            .attr(\\\"text-anchor\\\", \\\"start\\\");\n\n                        labels.exit().remove();\n                    }\n                    </script>\n                    \"\"\"\n\n    if HTML_LOG_FILE:\n        PrintAndLog('System logs timeline', 'SUBSECTION')\n        HTML_LOG_CONTENT += HTML_EVENTS_TL\n\ndef Main():\n    ''' Here we go '''\n\n    global ROOT_PATH\n    global HTML_LOG_FILE\n    global HOSTNAME\n    global GEOLOCATE_WIFI_AP\n    global OSX_VERSION\n\n    HOSTNAME = socket.gethostname()\n    Euid = str(os.geteuid())\n    Egid = str(os.getegid())\n\n    Parser = optparse.OptionParser(usage='usage: %prog [options]\\n' + __description__ + ' v' + __version__, version='%prog ' + __version__)\n    Parser.add_option('-p', '--path', dest='RootPath', help='Path to the OS X system to audit (e.g. /mnt/xxx). The running system will be audited if not specified')\n    Parser.add_option('-t', '--txtoutput', dest='TxtLogFile', help='Path to the txt output log file')\n    Parser.add_option('-H', '--htmloutput', dest='HTMLLogFile', help='Path to the HTML output log file')\n    Parser.add_option('-z', '--ziplogs', dest='ZipLogsFile', help='Create a zip file containing all system and users\\' logs. Path to directory to put the zip file in')\n    Parser.add_option('-S', '--syslog', dest='SyslogServer', default=False, help='Syslog server to send the report to')\n    Parser.add_option('-a', '--all', action='store_true', default=False, help='Analyze all (it is equal to -qsidbAkUe)')\n    Parser.add_option('-q', '--quarantines', action='store_true', default=False, help='Analyze quarantined files')\n    Parser.add_option('-s', '--startup', action='store_true', default=False, help='Analyze startup agents and daemons ')\n    Parser.add_option('-i', '--installedapps', action='store_true', default=False, help='Analyze installed applications')\n    Parser.add_option('-d', '--downloads', action='store_true', default=False, help='Analyze downloaded files ')\n    Parser.add_option('-b', '--browsers', action='store_true', default=False, help='Analyze browsers (Safari, FF & Chrome) ')\n    Parser.add_option('-A', '--airportprefs', action='store_true', default=False, help='Analyze Airport preferences ')\n    Parser.add_option('-g', '--wifiapgeolocate', action='store_true', default=False, help='Tries to geolocate WiFi AP found in AirportPrefs using Geomena.org')\n    Parser.add_option('-k', '--kext', action='store_true', default=False, help='Analyze kernel extensions (kext) ')\n    Parser.add_option('-U', '--usersaccounts', action='store_true', default=False, help='Analyze users\\' accounts ')\n    Parser.add_option('-e', '--eventlogs', action='store_true', default=False, help='Analyze system event logs')\n    Parser.add_option('-m', '--mrh', action='store_true', default=False, help='Perform a reputation lookup in Team Cymru\\'s MRH')\n    Parser.add_option('-v', '--virustotal', action='store_true', default=False, help='Perform a lookup in VirusTotal database.')\n    Parser.add_option('-l', '--localhashesdb', dest='LocalDatabase', default=False, help='Path to a local database of suspicious hashes to perform a lookup in')\n\n    (options, args) = Parser.parse_args()\n\n    if sys.version_info < (2, 7) or sys.version_info > (3, 0):\n        PrintAndLog(u'You must use python 2.7 or greater but not python 3', 'ERROR')                        # This error won't be logged\n        exit(1)\n\n    if options.RootPath:\n        ROOT_PATH = options.RootPath\n\n    if options.TxtLogFile:\n        logging.basicConfig(filename=options.TxtLogFile, filemode='w', level=logging.DEBUG)\n\n    if options.SyslogServer:\n        SyslogSetup(options.SyslogServer)\n\n    if options.HTMLLogFile:\n        try:\n            HTML_LOG_FILE = codecs.open(options.HTMLLogFile, 'w', 'utf-8')\n        except (IOError):\n            PrintAndLog(u'Cannot open ' + options.HTMLLogFile.decode('utf-8') + u'\\n', 'ERROR')\n        except:\n            PrintAndLog(u'HTML Log setup failed, HTML Log is disabled ', 'ERROR')\n            HTML_LOG_FILE = False\n\n    PrintAndLog('Header', 'SECTION')\n\n    AuditedSystemVersion = GetAuditedSystemVersion()\n    Timezone = GetAuditedSystemTimezone()\n\n    PrintAndLog(u'Report generated by ' + __description__ + ' v' + __version__ + ' on ' + time.strftime('%x %X %Z') +' running as '+Euid +'/'+ Egid, 'DEBUG')\n    PrintAndLog(u'Audited system path: ' + ROOT_PATH.decode('utf-8'), 'DEBUG')\n    PrintAndLog(u'Version of the audited system: ' + AuditedSystemVersion, 'DEBUG')\n    PrintAndLog(u'Current timezone of the audited system: ' + Timezone + '\\n', 'DEBUG')\n\n\n    if ROOT_PATH == '/' and (Euid != '0' and Egid != '0'):\n        PrintAndLog(u'Hey! You asked me to audit the system I am running on, but I am neither euid 0 nor egid 0. I may not be able to open some files.', 'WARNING')\n\n    if options.kext or options.all:\n        ParseKext()\n\n    if options.startup or options.all:\n        ParseStartup()\n\n    if options.installedapps or options.all:\n        ParseInstalledApps()\n\n    if options.quarantines or options.all:\n        ParseQuarantines()\n\n    if options.downloads or options.all:\n        ParseDownloads()\n\n    if options.browsers or options.all:\n        ParseBrowsers()\n\n    if options.wifiapgeolocate:\n        GEOLOCATE_WIFI_AP = True\n\n    if options.airportprefs or options.all:\n        ParseAirportPrefs()\n\n    if options.usersaccounts or options.all:\n        ParseUsersAccounts()\n\n    if options.eventlogs or options.all:\n        ParseEventLogs()\n\n    if options.ZipLogsFile:\n        AggregateLogs(options.ZipLogsFile)\n\n    if options.mrh:\n        MHRLookup()\n\n    if options.virustotal:\n        if VT_API_KEY:\n            VTLookup()\n        else:\n            PrintAndLog(u'VT_API_KEY is not set. Skipping VirusTotal lookup.', 'ERROR')\n\n    if options.LocalDatabase:\n        LocalLookup(options.LocalDatabase)\n\n    if options.HTMLLogFile:\n        HTMLLogFlush()\n\nif __name__ == '__main__':\n    Main()\n"
        }
      ]
    }
  ]
}