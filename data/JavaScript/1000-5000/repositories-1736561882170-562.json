{
  "metadata": {
    "timestamp": 1736561882170,
    "page": 562,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "forwardemail/email-templates",
      "stars": 3681,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".commitlintrc.js",
          "type": "blob",
          "size": 0.0673828125,
          "content": "module.exports = {\n  extends: ['@commitlint/config-conventional']\n};\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1435546875,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n"
        },
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.0068359375,
          "content": "!.*.js\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.017578125,
          "content": "* text=auto eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.123046875,
          "content": ".DS_Store\n*.log\n.idea\nnode_modules\ncoverage\n.nyc_output\nlocales/\npackage-lock.json\nyarn.lock\n\nThumbs.db\ntmp/\ntemp/\n*.lcov\n.env"
        },
        {
          "name": ".husky",
          "type": "tree",
          "content": null
        },
        {
          "name": ".lintstagedrc.js",
          "type": "blob",
          "size": 0.1494140625,
          "content": "module.exports = {\n  '*.md': (filenames) => filenames.map((filename) => `remark ${filename} -qfo`),\n  'package.json': 'fixpack',\n  '*.js': 'xo --fix'\n};\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": ".prettierrc.js",
          "type": "blob",
          "size": 0.0888671875,
          "content": "module.exports = {\n  singleQuote: true,\n  bracketSpacing: true,\n  trailingComma: 'none'\n};\n"
        },
        {
          "name": ".remarkignore",
          "type": "blob",
          "size": 0.0224609375,
          "content": "test/snapshots/**/*.md\n"
        },
        {
          "name": ".remarkrc.js",
          "type": "blob",
          "size": 0.0498046875,
          "content": "module.exports = {\n  plugins: ['preset-github']\n};\n"
        },
        {
          "name": ".xo-config.js",
          "type": "blob",
          "size": 0.2021484375,
          "content": "module.exports = {\n  prettier: true,\n  space: true,\n  extends: ['xo-lass'],\n  ignore: ['config.js'],\n  rules: {\n    'unicorn/prefer-top-level-await': 'warn',\n    'unicorn/prefer-node-protocol': 'off'\n  }\n};\n"
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.0224609375,
          "content": "email-templates.js.org\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.091796875,
          "content": "MIT License\n\nCopyright (c) 2017 Nick Baugh <niftylettuce@gmail.com> (http://niftylettuce.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 32.6337890625,
          "content": "# [**Email Templates**](https://github.com/forwardemail/email-templates)\n\n[![build status](https://github.com/forwardemail/email-templates/actions/workflows/ci.yml/badge.svg)](https://github.com/forwardemail/email-templates/actions/workflows/ci.yml)\n[![code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo)\n[![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n[![made with lass](https://img.shields.io/badge/made_with-lass-95CC28.svg)](https://lass.js.org)\n[![license](https://img.shields.io/github/license/forwardemail/email-templates.svg)](LICENSE)\n\nCreate, [preview][preview-email] (browser/iOS Simulator), and send custom email templates for [Node.js][node].  Made for [Forward Email][forward-email] and [Lad][].\n\n> **Need to send emails that land in the inbox instead of spam folder? [Click here to learn how to send JavaScript contact forms and more with Node.js](https://forwardemail.net/docs/how-to-javascript-contact-forms-node-js)**\n\n\n## Table of Contents\n\n* [Install](#install)\n* [Preview](#preview)\n* [Usage](#usage)\n  * [Debugging](#debugging)\n  * [Basic](#basic)\n  * [Attachments](#attachments)\n  * [Automatic Inline CSS via Stylesheets](#automatic-inline-css-via-stylesheets)\n  * [Render HTML and/or Text](#render-html-andor-text)\n  * [Localization](#localization)\n  * [Text-Only Email (no HTML)](#text-only-email-no-html)\n  * [Prefix Subject Lines](#prefix-subject-lines)\n  * [Custom Text Template](#custom-text-template)\n  * [Custom Template Engine (e.g. EJS)](#custom-template-engine-eg-ejs)\n  * [Custom Default Message Options](#custom-default-message-options)\n  * [Custom Rendering (e.g. from a MongoDB database)](#custom-rendering-eg-from-a-mongodb-database)\n  * [Absolute Path to Templates](#absolute-path-to-templates)\n  * [Open Email Previews in Firefox](#open-email-previews-in-firefox)\n* [Options](#options)\n* [Tips](#tips)\n  * [Purge unused CSS](#purge-unused-css)\n  * [Optimized Pug Stylesheet Loading](#optimized-pug-stylesheet-loading)\n* [Plugins](#plugins)\n* [Breaking Changes](#breaking-changes)\n  * [v12.0.0](#v1200)\n  * [v11.0.0](#v1100)\n  * [v10.0.0](#v1000)\n  * [v9.0.0](#v900)\n  * [v8.0.0](#v800)\n  * [v7.0.0](#v700)\n  * [v6.0.0](#v600)\n  * [v5.0.0](#v500)\n  * [v4.0.0](#v400)\n  * [v3.0.0](#v300)\n* [Related](#related)\n* [Contributors](#contributors)\n* [License](#license)\n\n\n## Install\n\n> By default we recommend [pug][] for your template engine, but you can use [any template engine][supported-engines].  Note that [preview-email][] is an optional dependency and is extremely helpful for rendering development previews of your emails automatically in your browser.\n\n[npm][]:\n\n```sh\nnpm install email-templates preview-email pug\n```\n\n\n## Preview\n\nWe've added [preview-email][] by default to this package.  This package allows you to preview emails in the browser and in the iOS Simulator.\n\nThis means that (by default) in the development environment (e.g. `NODE_ENV=development`) your emails will be rendered to the tmp directory for you and automatically opened in the browser.\n\nIf you have trouble previewing emails in your browser, you can configure a `preview` option which gets passed along to [open's options][open-options] (e.g. `preview: { open: { app: 'firefox' } }`).\n\nSee the example below for [Open Email Previews in Firefox](#open-email-previews-in-firefox).\n\n\n## Usage\n\n### Debugging\n\n#### Environment Flag\n\nIf you run into any issues with configuration, files, templates, locals, etc, then you can use the `NODE_DEBUG` environment flag:\n\n```sh\nNODE_DEBUG=email-templates node app.js\n```\n\nThis will output to the console all debug statements in our codebase for this package.\n\n#### Inspect Message\n\nAs of v3.6.1 you can now inspect the message passed to `nodemailer.sendMail` internally.\n\nIn the response object from `email.send`, you have access to `res.originalMessage`:\n\n```js\nemail\n  .send({\n    template: 'mars',\n    message: {\n      to: 'elon@spacex.com'\n    },\n    locals: {\n      name: 'Elon'\n    }\n  })\n  .then(res => {\n    console.log('res.originalMessage', res.originalMessage)\n  })\n  .catch(console.error);\n```\n\n### Basic\n\n> You can swap the `transport` option with a [Nodemailer transport][nodemailer-transport] configuration object or transport instance. We highly recommend using [Forward Email][forward-email] for your transport (it's the default in [Lad][]).\n>\n> If you want to send emails in `development` or `test` environments, set `options.send` to `true`.\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email({\n  message: {\n    from: 'test@example.com'\n  },\n  // uncomment below to send emails in development/test env:\n  // send: true\n  transport: {\n    jsonTransport: true\n  }\n});\n\nemail\n  .send({\n    template: 'mars',\n    message: {\n      to: 'elon@spacex.com'\n    },\n    locals: {\n      name: 'Elon'\n    }\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\nThe example above assumes you have the following directory structure:\n\n```sh\n.\n├── app.js\n└── emails\n    └── mars\n        ├── html.pug\n        └── subject.pug\n```\n\nAnd the contents of the `pug` files are:\n\n> `html.pug`:\n\n```pug\np Hi #{name},\np Welcome to Mars, the red planet.\n```\n\n> `subject.pug`:\n\n```pug\n= `Hi ${name}, welcome to Mars`\n```\n\n### Attachments\n\nPlease reference [Nodemailer's attachment documentation][attachments] for further reference.\n\n> If you want to set default attachments sent with every email:\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email({\n  message: {\n    from: 'test@example.com',\n    attachments: [\n      {\n        filename: 'text1.txt',\n        content: 'hello world!'\n      }\n    ]\n  }\n});\n\nemail\n  .send({\n    template: 'mars',\n    message: {\n      to: 'elon@spacex.com'\n    },\n    locals: {\n      name: 'Elon'\n    }\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\n> If you want to set attachments sent individually:\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email({\n  message: {\n    from: 'test@example.com'\n  },\n  transport: {\n    jsonTransport: true\n  }\n});\n\nemail\n  .send({\n    template: 'mars',\n    message: {\n      to: 'elon@spacex.com',\n      attachments: [\n        {\n          filename: 'text1.txt',\n          content: 'hello world!'\n        }\n      ]\n    },\n    locals: {\n      name: 'Elon'\n    }\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\n### Automatic Inline CSS via Stylesheets\n\nSimply include the path or URL to the stylesheet in your template's `<head>`:\n\n```pug\nlink(rel=\"stylesheet\", href=\"/css/app.css\", data-inline)\n```\n\nThis will look for the file `/css/app.css` in the `build/` folder.  Also see [Optimized Pug Stylesheet Loading](#optimized-pug-stylesheet-loading) below.\n\nIf this asset is in another folder, then you will need to modify the default options when creating an `Email` instance:\n\n```js\nconst email = new Email({\n  // <https://github.com/Automattic/juice>\n  juice: true,\n  // Override juice global settings <https://github.com/Automattic/juice#juicecodeblocks>\n  juiceSettings: {\n    tableElements: ['TABLE']\n  },\n  juiceResources: {\n    // set this to `true` (since as of v11 it is `false` by default)\n    applyStyleTags: true, // <------------ you need to set this to `true`\n    webResources: {\n      //\n      // this is the relative directory to your CSS/image assets\n      // and its default path is `build/`:\n      //\n      // e.g. if you have the following in the `<head`> of your template:\n      // `<link rel=\"stylesheet\" href=\"style.css\" data-inline=\"data-inline\">`\n      // then this assumes that the file `build/style.css` exists\n      //\n      relativeTo: path.resolve('build')\n      //\n      // but you might want to change it to something like:\n      // relativeTo: path.join(__dirname, '..', 'assets')\n      // (so that you can re-use CSS/images that are used in your web-app)\n      //\n    }\n  }\n});\n```\n\n### Render HTML and/or Text\n\nIf you don't need this module to send your email, you can still use it to render HTML and/or text templates.\n\nSimply use the `email.render(view, locals)` method we expose (it's the same method that `email.send` uses internally).\n\n> If you need to render a specific email template file (e.g. the HTML version):\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email();\n\nemail\n  .render('mars/html', {\n    name: 'Elon'\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\nThe example above assumes you have the following directory structure (note that this example would only render the `html.pug` file):\n\n```sh\n.\n├── app.js\n└── emails\n    └── mars\n        ├── html.pug\n        ├── text.pug\n        └── subject.pug\n```\n\nThe Promise for `email.render` resolves with a String (the HTML or text rendered).\n\n> If you need pass juiceResources in render function, with this option you don't need create Email instance every time\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email();\n\nemail\n  .render({\n    path: 'mars/html',\n    juiceResources: {\n      webResources: {\n        // view folder path, it will get css from `mars/style.css`\n        relativeTo: path.resolve('mars')\n      }\n    }\n  }, {\n    name: 'Elon'\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\nThe example above will be useful when you have a structure like this, this will be useful when you have a separate CSS file for every template\n\n```sh\n.\n├── app.js\n└── emails\n    └── mars\n        ├── html.pug\n        ├── text.pug\n        ├── subject.pug\n        └── style.css\n```\n\nThe Promise for `email.render` resolves with a String (the HTML or text rendered).\n\n> If you need to render all available template files for a given email template (e.g. `html.pug`, `text.pug`, and `subject.pug` – you can use `email.renderAll` (this is the method that `email.send` uses).\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email();\n\nemail\n  .renderAll('mars', {\n    name: 'Elon'\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\n> If you need to render multiple, specific templates at once (but not all email templates available), then you can use `Promise.all` in combination with `email.render`:\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email();\nconst locals = { name: 'Elon' };\n\nPromise\n  .all([\n    email.render('mars/html', locals),\n    email.render('mars/text', locals)\n  ])\n  .then(([ html, text ]) => {\n    console.log('html', html);\n    console.log('text', text);\n  })\n  .catch(console.error);\n```\n\n### Localization\n\nAll you need to do is simply pass an [i18n][] configuration object as `config.i18n` (or an empty one as this example shows to use defaults).\n\n> Don't want to handle localization and translation yourself?  Just use [Lad][lad] – it's built in and uses [mandarin][] (with automatic Google Translate support) under the hood.\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email({\n  message: {\n    from: 'test@example.com'\n  },\n  transport: {\n    jsonTransport: true\n  },\n  i18n: {} // <------ HERE\n});\n\nemail\n  .send({\n    template: 'mars',\n    message: {\n      to: 'elon@spacex.com'\n    },\n    locals: {\n      locale: 'en', // <------ CUSTOMIZE LOCALE HERE (defaults to `i18n.defaultLocale` - `en`)\n      // is your user french?\n      // locale: 'fr',\n      name: 'Elon'\n    }\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\nThen slightly modify your templates to use localization functions.\n\n> `html.pug`:\n\n```pug\np= `${t('Hi')} ${name},`\np= t('Welcome to Mars, the red planet.')\n```\n\n> `subject.pug`:\n\n```pug\np= `${t('Hi')} ${name}, ${t('welcome to Mars')}`\n```\n\nNote that if you use [Lad][], you have a built-in filter called `translate`:\n\n```pug\np: :translate(locale) Welcome to Mars, the red planet.\n```\n\n#### Localization using Handlebars template engine\n\nIf you are using handlebars and you are using localization files with named values, you will quickly see that\nthere is no way to properly call the `t` function in your template and specify named values.\n\nIf, for example you have this in your translation file:\n\n```json\n{\n  \"greetings\": \"Hi {{ firstname }}\",\n  \"welcome_message\": \"Welcome to Mars, the red planet.\"\n}\n```\n\nAnd you would like to use it in your template like this:\n\n> `html.hbs`:\n\n```handlebars\n<p>{{ t \"greetings\" firstname=\"Marcus\" }}</p>\n<p>{{ t \"welcome_message\" }}</p>\n```\n\nThis would not work because the second argument sent by handlebars to the function would be a handlebar helper\noptions object instead of just the named values.\n\nA possible workaround you can use is to introduce your own translation helper in your template locals:\n\n```js\nemail\n  .send({\n    template: 'mars',\n    message: {\n      to: 'elon@spacex.com'\n    },\n    locals: {\n      locale: 'en', // <------ CUSTOMIZE LOCALE HERE (defaults to `i18n.defaultLocale` - `en`)\n      // is your user french?\n      // locale: 'fr',\n      name: 'Elon',\n      $t(key, options) {\n        // <------ THIS IS OUR OWN TRANSLATION HELPER\n        return options.data.root.t(\n          { phrase: key, locale: options.data.root.locale },\n          options.hash\n        );\n      }\n    }\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\nThen slightly modify your templates to use your own translation helper functions.\n\n> `html.hbs`:\n\n```handlebars\n<p>{{ $t \"greetings\" firstname=\"Marcus\" }}</p>\n<p>{{ $t \"welcome_message\" }}</p>\n```\n\n### Text-Only Email (no HTML)\n\nIf you wish to have only a text-based version of your email you can simply pass the option `textOnly: true`.\n\nRegardless if you use the `htmlToText` option or not (see next example), it will still render only a text-based version.\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email({\n  message: {\n    from: 'test@example.com'\n  },\n  transport: {\n    jsonTransport: true\n  },\n  textOnly: true // <----- HERE\n});\n\nemail\n  .send({\n    template: 'mars',\n    message: {\n      to: 'elon@spacex.com'\n    },\n    locals: {\n      name: 'Elon'\n    }\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\n### Prefix Subject Lines\n\nYou can pass an option to prefix subject lines with a string, which is super useful for deciphering development / staging / production environment emails.\n\nFor example, you could make it so on non-production environments the email is prefixed with a `[DEVELOPMENT] Some Subject Line Here`.\n\nYou could do this manually by passing a `message.subject` property, however if you are storing your subject lines in templates (e.g. `subject.ejs` or `subject.pug`) then it's not as easy.\n\nSimply use the `subjectPrefix` option and set it to whatever you wish (**note you will need to append a trailing space if you wish to have a space after the prefix; see example below**):\n\n```js\nconst Email = require('email-templates');\n\nconst env = process.env.NODE_ENV || 'development';\n\nconst email = new Email({\n  message: {\n    from: 'test@example.com'\n  },\n  transport: {\n    jsonTransport: true\n  },\n  subjectPrefix: env === 'production' ? false : `[${env.toUpperCase()}] `; // <--- HERE\n});\n```\n\n### Custom Text Template\n\n> By default we use `html-to-text` to generate a plaintext version and attach it as `message.text`.\n\nIf you'd like to customize the text body, you can pass `message.text` or create a `text` template file just like you normally would for `html` and `subject`.\n\nYou may also set `config.htmlToText: false` to force the usage of the `text` template file.\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email({\n  message: {\n    from: 'test@example.com'\n  },\n  transport: {\n    jsonTransport: true\n  },\n  htmlToText: false // <----- HERE\n});\n\nemail\n  .send({\n    template: 'mars',\n    message: {\n      to: 'elon@spacex.com'\n    },\n    locals: {\n      name: 'Elon'\n    }\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\n> `text.pug`:\n\n```pug\n| Hi #{name},\n| Welcome to Mars, the red planet.\n```\n\n### Custom Template Engine (e.g. EJS)\n\n1. Install your desired template engine (e.g. [EJS][])\n\n   [npm][]:\n\n   ```sh\n   npm install ejs\n   ```\n\n2. Set the extension in options and send an email\n\n   ```js\n   const Email = require('email-templates');\n\n   const email = new Email({\n     message: {\n       from: 'test@example.com'\n     },\n     transport: {\n       jsonTransport: true\n     },\n     views: {\n       options: {\n         extension: 'ejs' // <---- HERE\n       }\n     }\n   });\n   ```\n\n### Custom Default Message Options\n\nYou can configure your Email instance to have default message options, such as a default \"From\", an unsubscribe header, etc.\n\nFor a list of all available message options and fields see [the Nodemailer message reference](https://nodemailer.com/message/).\n\n> Here's an example showing how to set a default custom header and a list unsubscribe header:\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email({\n  message: {\n    from: 'test@example.com',\n    headers: {\n      'X-Some-Custom-Thing': 'Some-Value'\n    },\n    list: {\n      unsubscribe: 'https://example.com/unsubscribe'\n    }\n  },\n  transport: {\n    jsonTransport: true\n  }\n});\n```\n\n### Custom Rendering (e.g. from a MongoDB database)\n\nYou can pass a custom `config.render` function which accepts two arguments `view` and `locals` and must return a `Promise`.\n\nNote that if you specify a custom `config.render`, you should have it use `email.juiceResources` before returning the final HTML.  The example below shows how to do this.\n\nIf you wanted to read a stored EJS template from MongoDB, you could do something like:\n\n```js\nconst ejs = require('ejs');\n\nconst email = new Email({\n  // ...\n  render: (view, locals) => {\n    return new Promise((resolve, reject) => {\n      // this example assumes that `template` returned\n      // is an ejs-based template string\n      // view = `${template}/html` or `${template}/subject` or `${template}/text`\n      db.templates.findOne({ name: view }, (err, template) => {\n        if (err) return reject(err);\n        if (!template) return reject(new Error('Template not found'));\n        let html = ejs.render(template, locals);\n        html = await email.juiceResources(html);\n        resolve(html);\n      });\n    });\n  }\n});\n```\n\n### Absolute Path to Templates\n\nAs of v5.0.1+ we now support passing absolute paths to templates for rendering (per discussion in [#320](https://github.com/forwardemail/email-templates/issues/320).\n\nFor both `email.send` and `email.render`, the `template` option passed can be a relative path or absolute:\n\n> Relative example:\n\n```js\nemail\n  .send({\n    template: 'mars',\n    message: {\n      to: 'elon@spacex.com'\n    },\n    locals: {\n      name: 'Elon'\n    }\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\n> Absolute example:\n\n```js\nconst path = require('path');\n\n// ...\n\nemail\n  .send({\n    template: path.join(__dirname, 'some', 'folder', 'mars')\n    message: {\n      to: 'elon@spacex.com'\n    },\n    locals: {\n      name: 'Elon'\n    }\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\n### Open Email Previews in Firefox\n\nThe `preview` option can be a custom Object of options to pass along to [open's options][open-options].\n\n> Firefox example:\n\n```js\nconst email = new Email({\n  // ...\n  preview: {\n    open: {\n      app: 'firefox',\n      wait: false\n    }\n  }\n});\n```\n\n\n## Options\n\nFor a list of all available options and defaults [view the configuration object](src/index.js), or reference the list below:\n\n* `views` (Object)\n  * `root` (String) - defaults to the current working directory's \"emails\" folder via `path.resolve('emails')`\n  * `options` (Object)\n    * `extension` (String) - defaults to `'pug'`, and is the default file extension for templates\n    * `map` (Object) - a template file extension mapping, defaults to `{ hbs: 'handlebars', njk: 'nunjucks' }` (this is useful if you use different file extension naming conventions)\n    * `engineSource` (Object) - the default template engine source, defaults to [@ladjs/consolidate][consolidate]\n  * `locals` (Object) - locals to pass to templates for rendering\n    * `cache` (Boolean) - defaults to `false` for `development` and `test` environments, and `true` for all others (via `process.env.NODE_ENV`), whether or not to cache templates\n    * `pretty` (Boolean) - defaults to `true`, but is automatically set to `false` for subject templates and text-based emails\n* `message` (Object) - default [Nodemailer message object][nodemailer-message-object] for messages to inherit (defaults to an empty object `{}`)\n* `send` (Boolean) - whether or not to send emails, defaults to `false` for `development` and `test` environments, and `true` for all others (via `process.env.NODE_ENV`) (**NOTE: IF YOU ARE NOT USING `NODE_ENV` YOU WILL NEED TO MANUALLY SET THIS TO `true`**)\n* `preview` (Boolean or Object) - whether or not to preview emails using [preview-email][], defaults to `false` unless the environment is `development` (via `process.env.NODE_ENV`) – if you wish to disable the iOS Simulator then pass `{ openSimulator: false }`\n* `i18n` (Boolean or Object) - translation support for email templates, this accepts an I18N configuration object (defaults to `false`, which means it is disabled) which is passed along to [@ladjs/i18n][i18n] – see [Localization](#localization) example for more insight\n* `render` (Function) - defaults to a stable function that accepts two argument, `view` (String) and `locals` (Object) - you should not need to set this unless you have a need for custom rendering (see [Custom Rendering (e.g. from a MongoDB database)](#custom-rendering-eg-from-a-mongodb-database))\n* `customRender` (Boolean) - defaults to `false`, unless you pass your own `render` function, and in that case it will be automatically set to `true`\n* `textOnly` (Boolean) - whether or not to force text-only rendering of a template and disregard the template folder (defaults to `false`)\n* `htmlToText` (Object) - configuration object for [html-to-text][]\n  * `ignoreImage` (Boolean) - defaults to `true`\n* `subjectPrefix` (Boolean or String) - defaults to `false`, but if set to a string it will use that string as a prefix for your emails' subjects\n* `juice` (Boolean) - whether or not to use [juice][] when rendering templates (defaults to `true`) (note that if you have a custom rendering function you will need to implement [juice][] in it yourself)\n* `juiceResources` (Object) - options to pass to `juice.juiceResources` method (only used if `juice` option is set to `true`, see [juice's][juice] API for more information\n  * `applyStyleTags` (Boolean) - defaults to `false` (as of v11, since modern browsers now support `<style>` tag in `<head>` section)\n  * `removeStyleTags` (Boolean) - defaults to `false` (as of v11, since modern browsers now support `<style>` tag in `<head>` section)\n  * `webResources` (Object) - an options object that will be passed to [web-resource-inliner][]\n    * `relativeTo` (String) - defaults to the current working directory's \"build\" folder via `path.resolve('build')` (**NOTE: YOU SHOULD MODIFY THIS PATH TO WHERE YOUR BUILD/ASSETS FOLDER IS**)\n    * `images` (Boolean or Number) - defaults to `false`, and is  whether or not to inline images unless they have an exclusion attribute (see [web-resource-inliner][] for more insight), if it is set to a Number then that is used as the KB threshold\n* `transport` (Object) - a transport configuration object or a Nodemailer transport instance created via `nodemailer.createTransport`, defaults to an empty object `{}`, see [Nodemailer transports][nodemailer-transports] documentation for more insight\n* `getPath` (Function) - a function that returns the path to a template file, defaults to `function (type, template) { return path.join(template, type); }`, and accepts three arguments `type`, `template`, and `locals`\n\n\n## Tips\n\n### Purge unused CSS\n\nSee the `gulpfile.js` file and `email` directory in the [Forward Email][forward-email-code] codebase for insight as to how to use `purge-css` across your email templates.\n\n### Optimized Pug Stylesheet Loading\n\nNote that if you're using [pug][], you can use the following pattern to optimize compile time for rendering in your email layout.\n\n```diff\ndoctype html\nhtml\n  head\n-    link(rel='stylesheet', href='style.css', data-inline)\n+    style\n+      include style.css\n  body\n    p Hello\n```\n\nThis makes use of pug [includes](https://pugjs.org/language/includes.html) – which saves compilation time for rendering (since [web-resource-inliner][] will not have to fetch the external stylesheet).\n\n\n## Plugins\n\nYou can use any [nodemailer][] plugin. Simply pass an existing transport instance as `config.transport`.\n\nYou should add the [nodemailer-base64-to-s3][] plugin to convert base64 inline images to actual images stored on Amazon S3 and Cloudfront.\n\nWhen doing so (as of v4.0.2+), you will need to adjust your `email-templates` configuration to pass `images: true` as such:\n\n```js\nconst email = new Email({\n  // ...\n  juiceResources: {\n    webResources: {\n      relativeTo: path.resolve('build'),\n      images: true // <--- set this as `true`\n    }\n  }\n});\n```\n\n\n## Breaking Changes\n\nSee the [Releases](https://github.com/forwardemail/email-templates/releases) page for an up to date changelog.\n\n### v12.0.0\n\nThe `preview-email` dependency is now an optional dependency.  You will need to `npm install preview-email` or set `preview: false`, otherwise an error will be thrown in non-production environments and `console.error` in production environments if `preview` option is a truthy value.  The default value for `preview` is `preview: process.NODE_ENV === 'development'`.\n\n### v11.0.0\n\nThis package no longer inlines stylesheets by default and preserves `<style>` tags in the `<head>` (see [Options](#options)).\n\nA majority of email clients support `<style>` tags in the `<head>` section – and inlining CSS is no longer necessary.\n\nSee [1](https://www.caniemail.com/features/html-style/), [2](https://www.campaignmonitor.com/css/style-element/style-in-head/), and [3](https://caniuse.email/) as references.\n\n### v10.0.0\n\nThis package now requires Node v14+.\n\n### v9.0.0\n\nThis package now requires Node v10.x+ due to [web-resource-inliner](https://github.com/jrit/web-resource-inliner/blob/master/HISTORY.md#2020-07-09-v500) dependency.\n\n### v8.0.0\n\nWe upgraded [html-to-text](https://github.com/html-to-text/node-html-to-text) to v6. As a result, automatically generated text versions of your emails will look slightly different, as per the example below:\n\n```diff\n+Hi,\n+\n+email-templates rocks!\n+\n+Cheers,\n+The team\n-Hi,email-templates rocks!\n-Cheers,The team\n```\n\n### v7.0.0\n\nWe upgraded `preview-email` to `v2.0.0`, which supports stream attachments, and additionally the view rendering is slightly different (we simply iterate over header lines and format them in a `<pre><code>` block).  A major version bump was done due to the significant visual change in the preview rendering of emails.\n\n### v6.0.0\n\n* Performance should be significantly improved as the rendering of subject, html, and text parts now occurs asynchronously in parallel (previously it was in series and had blocking lookup calls).\n* We removed [bluebird][] and replaced it with a lightweight alternative [pify][] (since all we were using was the `Promise.promisify` method from `bluebird` as well).\n* This package now only supports Node v8.x+ (due to [preview-email][]'s [open][] dependency requiring it).\n* Configuration for the `preview` option has slightly changed, which now allows you to [specify a custom template and stylesheets](https://github.com/forwardemail/preview-email#custom-preview-template-and-stylesheets) for preview rendering.\n\n  > If you were using a custom `preview` option before, you will need to change it slightly:\n\n  ```diff\n  const email = new Email({\n    // ...\n    preview: {\n  +    open: {\n  +      app: 'firefox',\n  +      wait: false\n  +    }\n  -    app: 'firefox',\n  -    wait: false\n    }\n  });\n  ```\n\n### v5.0.0\n\nIn version 4.x+, we changed the order of defaults being set.  See [#313](https://github.com/forwardemail/email-templates/issues/313) for more information.  This allows you to override message options such as `from` (even if you have a global default `from` set).\n\n### v4.0.0\n\nSee v5.0.0 above\n\n### v3.0.0\n\n> If you are upgrading from v2 or prior to v3, please note that the following breaking API changes occurred:\n\n1. You need to have Node v6.4.0+, we recommend using [nvm](https://github.com/creationix/nvm) to manage your Node versions.\n\n2. Instead of calling `const newsletter = new EmailTemplate(...args)`, you now call `const email = new Email(options)`.\n\n   * The arguments you pass to the constructor have changed as well.\n   * Previously you'd pass `new EmailTemplate(templateDir, options)`.  Now you will need to pass simply one object with a configuration as an argument to the constructor.\n   * If your `templateDir` path is the \"emails\" folder in the root of your project (basically `./emails` folder) then you do not need to pass it at all since it is the default per the [configuration object](src/index.js).\n   * The previous value for `templateDir` can be used as such:\n\n   ```diff\n   -const newsletter = new EmailTemplate(templateDir);\n   +const email = new Email({\n   +  views: { root: templateDir }\n   +});\n   ```\n\n   * Note that if you are inlining CSS, you should also make sure that the option for `juiceResources.webResources.relativeTo` is accurate.\n\n3. Instead of calling `newsletter.render(locals, callback)` you now call `email.render(template, locals)`.  The return value of `email.render` when invoked is a `Promise` and does not accept a callback function.\n\n   > **NOTE**: `email-templates` v3 now has an `email.send` method ([see basic usage example](#basic)) which uses `nodemailer`; you should now use `email.send` instead of `email.render`!\n\n   ```diff\n   -newsletter.render({}, (err, result) => {\n   -  if (err) return console.error(err);\n   -  console.log(result);\n   -});\n   +email.render(template, {}).then(console.log).catch(console.error);\n   ```\n\n4. Localized template directories are no longer supported.  We now support i18n translations out of the box.  See [Localization](#localization) for more info.\n\n5. A new method `email.send` has been added.  This allows you to create a Nodemailer transport and send an email template all at once (it calls `email.render` internally).  See the [Basic](#basic) usage documentation above for an example.\n\n6. There are new options `options.send` and `options.preview`.  Both are Boolean values and configured automatically based off the environment.  Take a look at the [configuration object](src/index.js).  Note that you can optionally pass an Object to `preview` option, which gets passed along to [open's options][open-options].\n\n7. If you wish to send emails in development or test environment (disabled by default), set `options.send` to `true`.\n\n\n## Related\n\n* [forward-email][] - Free, encrypted, and open-source email forwarding service for custom domains\n* [custom-fonts-in-emails][] - render any font in emails as an image w/retina support (no more Photoshop or Sketch exports)\n* [font-awesome-assets][] - render any [Font Awesome][fa] icon as an image in an email w/retina support (no more Photoshop or Sketch exports!)\n* [lad][] - Scaffold a [Koa][] webapp and API framework for [Node.js][node]\n* [lass][] - Scaffold a modern boilerplate for [Node.js][node]\n* [cabin][] - Logging and analytics solution for [Node.js][node], [Lad][], [Koa][], and [Express][]\n\n\n## Contributors\n\n| Name           | Website                   |\n| -------------- | ------------------------- |\n| **Nick Baugh** | <http://niftylettuce.com> |\n\n\n## License\n\n[MIT](LICENSE) © [Nick Baugh](http://niftylettuce.com)\n\n\n##\n\n[node]: https://nodejs.org\n\n[npm]: https://www.npmjs.com/\n\n[pug]: https://pugjs.org\n\n[supported-engines]: https://github.com/ladjs/consolidate/#engines\n\n[nodemailer]: https://nodemailer.com/plugins/\n\n[font-awesome-assets]: https://github.com/ladjs/font-awesome-assets\n\n[custom-fonts-in-emails]: https://github.com/ladjs/custom-fonts-in-emails\n\n[nodemailer-base64-to-s3]: https://github.com/ladjs/nodemailer-base64-to-s3\n\n[lad]: https://lad.js.org\n\n[i18n]: https://github.com/ladjs/i18n#options\n\n[fa]: http://fontawesome.io/\n\n[nodemailer-transport]: https://nodemailer.com/transports/\n\n[ejs]: http://ejs.co/\n\n[preview-email]: https://github.com/forwardemail/preview-email\n\n[attachments]: https://nodemailer.com/message/attachments/\n\n[lass]: https://lass.js.org\n\n[cabin]: https://cabinjs.com\n\n[forward-email]: https://forwardemail.net\n\n[koa]: https://koajs.com/\n\n[express]: https://expressjs.com\n\n[open-options]: https://github.com/sindresorhus/open#options\n\n[mandarin]: https://github.com/ladjs/mandarin\n\n[consolidate]: https://github.com/ladjs/consolidate\n\n[nodemailer-message-object]: https://nodemailer.com/message/\n\n[html-to-text]: https://github.com/werk85/node-html-to-text\n\n[web-resource-inliner]: https://github.com/jrit/web-resource-inliner\n\n[nodemailer-transports]: https://nodemailer.com/transports/\n\n[juice]: https://github.com/Automattic/juice\n\n[bluebird]: https://github.com/petkaantonov/bluebird\n\n[pify]: https://github.com/sindresorhus/pify\n\n[open]: https://github.com/sindresorhus/open\n\n[forward-email-code]: https://github.com/forwardemail/forwardemail.net\n"
        },
        {
          "name": "config.js",
          "type": "blob",
          "size": 0.3486328125,
          "content": "docute.init({\n  debug: true,\n  title: 'Email Templates',\n  repo: 'forwardemail/email-templates',\n  'edit-link': 'https://github.com/forwardemail/email-templates/tree/master/',\n  nav: {\n    default: [\n      {\n        title: 'Create, preview, and send custom email templates for Node.js',\n        path: '/'\n      }\n    ]\n  },\n  plugins: [docuteEmojify()]\n});\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "favicon.ico",
          "type": "blob",
          "size": 5.427734375,
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 1.234375,
          "content": "<!DOCTYPE html>\n\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\">\n  <link rel=\"shortcut icon\" href=\"/favicon.ico\" type=\"image/x-icon\">\n  <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">\n  <title>Create, preview, and send custom email templates for Node.js - Email Templates</title>\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/docute@3/dist/docute.css\" type=\"text/css\">\n</head>\n\n<body>\n  <div id=\"app\">\n  </div>\n  <script src=\"https://unpkg.com/docute-emojify@0.1\" type=\"text/javascript\"></script>\n  <script src=\"https://unpkg.com/docute@3/dist/docute.js\" type=\"text/javascript\">\n</script><script src=\"./config.js\" type=\"text/javascript\">\n</script><script type=\"text/javascript\">\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-40007865-8', 'auto');\n  ga('send', 'pageview');\n  </script>\n</body>\n</html>\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 12.283203125,
          "content": "const process = require('process');\nconst fs = require('fs');\nconst path = require('path');\nconst util = require('util');\nconst I18N = require('@ladjs/i18n');\nconst _ = require('lodash');\nconst consolidate = require('@ladjs/consolidate');\nconst getPaths = require('get-paths');\nconst { convert } = require('html-to-text');\nconst juice = require('juice');\nconst nodemailer = require('nodemailer');\n\nlet previewEmail;\n\ntry {\n  previewEmail = require('preview-email');\n} catch {}\n\nconst debug = util.debuglog('email-templates');\n\n// promise version of `juice.juiceResources`\nconst juiceResources = (html, options) => {\n  return new Promise((resolve, reject) => {\n    juice.juiceResources(html, options, (err, html) => {\n      if (err) return reject(err);\n      resolve(html);\n    });\n  });\n};\n\nconst env = (process.env.NODE_ENV || 'development').toLowerCase();\nconst stat = util.promisify(fs.stat);\nconst readFile = util.promisify(fs.readFile);\n\nclass Email {\n  constructor(config = {}) {\n    debug('config passed %O', config);\n\n    // 2.x backwards compatible support\n    if (config.juiceOptions) {\n      config.juiceResources = config.juiceOptions;\n      delete config.juiceOptions;\n    }\n\n    if (config.disableJuice) {\n      config.juice = false;\n      delete config.disableJuice;\n    }\n\n    if (config.render) {\n      config.customRender = true;\n    }\n\n    this.config = _.merge(\n      {\n        views: {\n          // directory where email templates reside\n          root: path.resolve('emails'),\n          options: {\n            // default file extension for template\n            extension: 'pug',\n            map: {\n              hbs: 'handlebars',\n              njk: 'nunjucks'\n            },\n            engineSource: consolidate\n          },\n          // locals to pass to templates for rendering\n          locals: {\n            // turn on caching for non-development environments\n            cache: !['development', 'test'].includes(env),\n            // pretty is automatically set to `false` for subject/text\n            pretty: true\n          }\n        },\n        // <https://nodemailer.com/message/>\n        message: {},\n        send: !['development', 'test'].includes(env),\n        preview: env === 'development',\n        // <https://github.com/ladjs/i18n>\n        // set to an object to configure and enable it\n        i18n: false,\n        // pass a custom render function if necessary\n        render: this.render.bind(this),\n        customRender: false,\n        // force text-only rendering of template (disregards template folder)\n        textOnly: false,\n        // <https://github.com/html-to-text/node-html-to-text>\n        htmlToText: {\n          selectors: [{ selector: 'img', format: 'skip' }]\n        },\n        subjectPrefix: false,\n        // <https://github.com/Automattic/juice>\n        juice: true,\n        // Override juice global settings <https://github.com/Automattic/juice#juicecodeblockss>\n        juiceSettings: {\n          tableElements: ['TABLE']\n        },\n        juiceResources: {\n          applyStyleTags: false,\n          removeStyleTags: false,\n          webResources: {\n            relativeTo: path.resolve('build'),\n            images: false\n          }\n        },\n        // pass a transport configuration object or a transport instance\n        // (e.g. an instance is created via `nodemailer.createTransport`)\n        // <https://nodemailer.com/transports/>\n        transport: {},\n        // last locale field name (also used by @ladjs/i18n)\n        lastLocaleField: 'last_locale',\n        getPath(type, template) {\n          return path.join(template, type);\n        }\n      },\n      config\n    );\n\n    // override existing method\n    this.render = this.config.render;\n\n    if (!_.isFunction(this.config.transport.sendMail))\n      this.config.transport = nodemailer.createTransport(this.config.transport);\n\n    // Override juice global settings https://github.com/Automattic/juice#juicecodeblocks\n    if (_.isObject(this.config.juiceSettings)) {\n      for (const [key, value] of Object.entries(this.config.juiceSettings)) {\n        juice[key] = value;\n      }\n    }\n\n    debug('transformed config %O', this.config);\n\n    this.juiceResources = this.juiceResources.bind(this);\n    this.getTemplatePath = this.getTemplatePath.bind(this);\n    this.templateExists = this.templateExists.bind(this);\n    this.checkAndRender = this.checkAndRender.bind(this);\n    this.render = this.render.bind(this);\n    this.renderAll = this.renderAll.bind(this);\n    this.send = this.send.bind(this);\n  }\n\n  // shorthand use of `juiceResources` with the config\n  // (mainly for custom renders like from a database)\n  juiceResources(html, juiceRenderResources = {}) {\n    const juiceR = _.merge(this.config.juiceResources, juiceRenderResources);\n    return juiceResources(html, juiceR);\n  }\n\n  // a simple helper function that gets the actual file path for the template\n  async getTemplatePath(template) {\n    let juiceRenderResources = {};\n\n    if (_.isObject(template)) {\n      juiceRenderResources = template.juiceResources;\n      template = template.path;\n    }\n\n    const [root, view] = path.isAbsolute(template)\n      ? [path.dirname(template), path.basename(template)]\n      : [this.config.views.root, template];\n    const paths = await getPaths(\n      root,\n      view,\n      this.config.views.options.extension\n    );\n    const filePath = path.resolve(root, paths.rel);\n    return { filePath, paths, juiceRenderResources };\n  }\n\n  // returns true or false if a template exists\n  // (uses same look-up approach as `render` function)\n  async templateExists(view) {\n    try {\n      const { filePath } = await this.getTemplatePath(view);\n      const stats = await stat(filePath);\n      if (!stats.isFile()) throw new Error(`${filePath} was not a file`);\n      return true;\n    } catch (err) {\n      debug('templateExists', err);\n      return false;\n    }\n  }\n\n  async checkAndRender(type, template, locals) {\n    let juiceRenderResources = {};\n\n    if (_.isObject(template)) {\n      juiceRenderResources = template.juiceResources;\n      template = template.path;\n    }\n\n    const string = this.config.getPath(type, template, locals);\n    if (!this.config.customRender) {\n      const exists = await this.templateExists(string);\n      if (!exists) return;\n    }\n\n    return this.render(\n      string,\n      {\n        ...locals,\n        ...(type === 'html' ? {} : { pretty: false })\n      },\n      juiceRenderResources\n    );\n  }\n\n  // promise version of consolidate's render\n  // inspired by koa-views and re-uses the same config\n  // <https://github.com/queckezz/koa-views>\n  async render(view, locals = {}) {\n    const { map, engineSource } = this.config.views.options;\n    const { filePath, paths, juiceRenderResources } =\n      await this.getTemplatePath(view);\n    if (paths.ext === 'html' && !map) {\n      const res = await readFile(filePath, 'utf8');\n      return res;\n    }\n\n    const engineName = map && map[paths.ext] ? map[paths.ext] : paths.ext;\n    const renderFn = engineSource[engineName];\n    if (!engineName || !renderFn)\n      throw new Error(\n        `Engine not found for the \".${paths.ext}\" file extension`\n      );\n\n    if (_.isObject(this.config.i18n)) {\n      if (\n        this.config.i18n.lastLocaleField &&\n        this.config.lastLocaleField &&\n        this.config.i18n.lastLocaleField !== this.config.lastLocaleField\n      )\n        throw new Error(\n          `The 'lastLocaleField' (String) option for @ladjs/i18n and email-templates do not match, i18n value was ${this.config.i18n.lastLocaleField} and email-templates value was ${this.config.lastLocaleField}`\n        );\n\n      const i18n = new I18N({ ...this.config.i18n, register: locals });\n\n      // support `locals.user.last_locale` (variable based name lastLocaleField)\n      // (e.g. for <https://lad.js.org>)\n      const locale = i18n.getLocale();\n      if (\n        _.isObject(locals.user) &&\n        _.isString(locals.user[this.config.lastLocaleField])\n      )\n        locals.locale = locals.user[this.config.lastLocaleField];\n      else if (!_.isString(locals.locale)) locals.locale = locale;\n\n      if (locale !== locals.locale) i18n.setLocale(locals.locale);\n    }\n\n    const res = await util.promisify(renderFn)(filePath, locals);\n    // transform the html with juice using remote paths\n    // google now supports media queries\n    // https://developers.google.com/gmail/design/reference/supported_css\n    if (!this.config.juice) return res;\n    const html = await this.juiceResources(res, juiceRenderResources);\n    return html;\n  }\n\n  // eslint-disable-next-line complexity\n  async renderAll(template, locals = {}, nodemailerMessage = {}) {\n    const message = { ...nodemailerMessage };\n\n    if (template && (!message.subject || !message.html || !message.text)) {\n      const [subject, html, text] = await Promise.all(\n        ['subject', 'html', 'text'].map((type) =>\n          this.checkAndRender(type, template, locals)\n        )\n      );\n\n      if (subject && !message.subject) message.subject = subject;\n      if (html && !message.html) message.html = html;\n      if (text && !message.text) message.text = text;\n    }\n\n    if (message.subject && this.config.subjectPrefix)\n      message.subject = this.config.subjectPrefix + message.subject;\n\n    // trim subject\n    if (message.subject) message.subject = message.subject.trim();\n\n    if (this.config.htmlToText && message.html && !message.text)\n      // we'd use nodemailer-html-to-text plugin\n      // but we really don't need to support cid\n      // <https://github.com/andris9/nodemailer-html-to-text>\n      // (and it is also not updated with latest html-to-text)\n      message.text = convert(message.html, this.config.htmlToText);\n\n    // if we only want a text-based version of the email\n    if (this.config.textOnly) delete message.html;\n\n    // if no subject, html, or text content exists then we should\n    // throw an error that says at least one must be found\n    // otherwise the email would be blank (defeats purpose of email-templates)\n    if (\n      (!_.isString(message.subject) || _.isEmpty(_.trim(message.subject))) &&\n      (!_.isString(message.text) || _.isEmpty(_.trim(message.text))) &&\n      (!_.isString(message.html) || _.isEmpty(_.trim(message.html))) &&\n      _.isEmpty(message.attachments)\n    )\n      throw new Error(\n        `No content was passed for subject, html, text, nor attachments message props. Check that the files for the template \"${template}\" exist.`\n      );\n\n    return message;\n  }\n\n  async send(options = {}) {\n    options = {\n      template: '',\n      message: {},\n      locals: {},\n      ...options\n    };\n\n    let { template, message, locals } = options;\n\n    const attachments =\n      message.attachments || this.config.message.attachments || [];\n\n    message = _.defaultsDeep(\n      {},\n      _.omit(message, 'attachments'),\n      _.omit(this.config.message, 'attachments')\n    );\n    locals = _.defaultsDeep({}, this.config.views.locals, locals);\n\n    if (attachments) message.attachments = attachments;\n\n    debug('template %s', template);\n    debug('message %O', message);\n    debug('locals (keys only): %O', Object.keys(locals));\n\n    // get all available templates\n    const object = await this.renderAll(template, locals, message);\n\n    // assign the object variables over to the message\n    Object.assign(message, object);\n\n    if (this.config.preview) {\n      debug('using `preview-email` to preview email');\n      if (typeof previewEmail !== 'function') {\n        // don't break production apps\n        // (in case someone upgrades major without reading changelog on GH releases)\n        const err = new TypeError(\n          'Optional dependency \"preview-email\" not installed, but required for \"preview\" option in \"email-templates\" usage (e.g. set \"preview: false\" or \"npm install preview-email\" to resolve)'\n        );\n        if (env === 'production') console.error(err);\n        else throw err;\n      }\n\n      await (_.isObject(this.config.preview)\n        ? previewEmail(message, this.config.preview)\n        : previewEmail(message));\n    }\n\n    if (!this.config.send) {\n      debug('send disabled so we are ensuring JSONTransport');\n      // <https://github.com/nodemailer/nodemailer/issues/798>\n      // if (this.config.transport.name !== 'JSONTransport')\n      this.config.transport = nodemailer.createTransport({\n        jsonTransport: true\n      });\n    }\n\n    const res = await this.config.transport.sendMail(message);\n    debug('message sent');\n    res.originalMessage = message;\n    return res;\n  }\n}\n\nmodule.exports = Email;\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.0126953125,
          "content": "{\n  \"name\": \"email-templates\",\n  \"description\": \"Create, preview (browser/iOS Simulator), and send custom email templates for Node.js. Made for Forward Email and Lad.\",\n  \"version\": \"12.0.1\",\n  \"author\": \"Nick Baugh <niftylettuce@gmail.com> (http://niftylettuce.com)\",\n  \"bugs\": {\n    \"url\": \"https://github.com/forwardemail/email-templates/issues\",\n    \"email\": \"niftylettuce@gmail.com\"\n  },\n  \"contributors\": [\n    \"Nick Baugh <niftylettuce@gmail.com> (http://niftylettuce.com)\"\n  ],\n  \"dependencies\": {\n    \"@ladjs/consolidate\": \"^1.0.4\",\n    \"@ladjs/i18n\": \"^8.0.3\",\n    \"get-paths\": \"^0.0.7\",\n    \"html-to-text\": \"^9.0.5\",\n    \"juice\": \"^10.0.0\",\n    \"lodash\": \"^4.17.21\",\n    \"nodemailer\": \"^6.9.14\"\n  },\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"^19.3.0\",\n    \"@commitlint/config-conventional\": \"^19.2.2\",\n    \"ava\": \"^5.3.0\",\n    \"cheerio\": \"^1.0.0-rc.12\",\n    \"cross-env\": \"^7.0.3\",\n    \"ejs\": \"^3.1.10\",\n    \"eslint\": \"^8.42.0\",\n    \"eslint-config-xo-lass\": \"^2.0.1\",\n    \"fixpack\": \"^4.0.0\",\n    \"husky\": \"^8.0.3\",\n    \"lint-staged\": \"^13.2.2\",\n    \"nodemailer-sendgrid\": \"^1.0.3\",\n    \"nyc\": \"^15.1.0\",\n    \"preview-email\": \"^3.0.17\",\n    \"pug\": \"^3.0.3\",\n    \"remark-cli\": \"11.0.0\",\n    \"remark-preset-github\": \"^4.0.4\",\n    \"xo\": \"^0.54.2\"\n  },\n  \"engines\": {\n    \"node\": \">=14\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"homepage\": \"https://github.com/forwardemail/email-templates\",\n  \"keywords\": [\n    \"consolidate\",\n    \"email\",\n    \"engine\",\n    \"koa\",\n    \"lad\",\n    \"lass\",\n    \"mailchimp\",\n    \"mailgun\",\n    \"mandrill\",\n    \"moonmail\",\n    \"nodemailer\",\n    \"postmark\",\n    \"pug\",\n    \"sendgrid\",\n    \"template\",\n    \"templates\",\n    \"transport\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"index.js\",\n  \"optionalDependencies\": {\n    \"preview-email\": \"*\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/forwardemail/email-templates\"\n  },\n  \"scripts\": {\n    \"lint\": \"xo --fix && remark . -qfo && fixpack\",\n    \"prepare\": \"husky install\",\n    \"pretest\": \"npm run lint\",\n    \"test\": \"cross-env NODE_ENV=test nyc ava\"\n  }\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}