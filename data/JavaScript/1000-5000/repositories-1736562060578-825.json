{
  "metadata": {
    "timestamp": 1736562060578,
    "page": 825,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "GSConnect/gnome-shell-extension-gsconnect",
      "stars": 3259,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.7666015625,
          "content": "# SPDX-FileCopyrightText: GSConnect Developers https://github.com/GSConnect\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# Topmost editorconfig for project, don't ascend\n# to parent directories when scanning configs\nroot = true\n\n# All files: UTF-8 with Unix-style newlines,\n# and a newline at the end of the file\n[*]\ncharset = utf-8\nend_of_line = lf\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n# JavaScript, Python, CSS: 4-space indents\n[*.{js,py,css}]\nindent_style = space\nindent_size = 4\n\n# XML, Meson, Glade: 2-space indents\n[*.{xml,build,ui}]\nindent_style = space\nindent_size = 2\n\n# Most JSON: 2-space indents\n[*.json]\nindent_style = space\nindent_size = 2\n\n# WebExtension templates: 4-space indents\n[data/webextension/*.in]\nindent_style = space\nindent_size = 4\n\n"
        },
        {
          "name": ".eslintrc.json",
          "type": "blob",
          "size": 8.00390625,
          "content": "{\n    \"env\": {\n        \"es2021\": true,\n        \"shared-node-browser\": true\n    },\n    \"extends\": \"eslint:recommended\",\n    \"rules\": {\n        \"array-bracket-newline\": [\n            \"error\",\n            \"consistent\"\n        ],\n        \"array-bracket-spacing\": [\n            \"error\",\n            \"never\"\n        ],\n        \"array-callback-return\": \"error\",\n        \"arrow-spacing\": \"error\",\n        \"block-scoped-var\": \"error\",\n        \"block-spacing\": \"error\",\n        \"brace-style\": \"error\",\n        \"comma-dangle\": [\n            \"error\",\n            {\n                \"arrays\": \"always-multiline\",\n                \"objects\": \"always-multiline\",\n                \"functions\": \"never\"\n            }\n        ],\n        \"comma-spacing\": [\n            \"error\",\n            {\n                \"before\": false,\n                \"after\": true\n            }\n        ],\n        \"comma-style\": [\n            \"error\",\n            \"last\"\n        ],\n        \"computed-property-spacing\": \"error\",\n        \"curly\": [\n            \"error\",\n            \"multi-or-nest\",\n            \"consistent\"\n        ],\n        \"dot-location\": [\n            \"error\",\n            \"property\"\n        ],\n        \"eol-last\": \"error\",\n        \"eqeqeq\": \"error\",\n        \"func-call-spacing\": \"error\",\n        \"func-name-matching\": \"error\",\n        \"func-style\": [\n            \"error\",\n            \"declaration\",\n            {\n                \"allowArrowFunctions\": true\n            }\n        ],\n        \"grouped-accessor-pairs\": [\n            \"error\",\n            \"getBeforeSet\"\n        ],\n        \"indent\": [\n            \"error\",\n            4,\n            {\n                \"ignoredNodes\": [\n                    \"CallExpression[callee.object.name=GObject][callee.property.name=registerClass] > ClassExpression:first-child\"\n                ],\n                \"MemberExpression\": \"off\",\n                \"SwitchCase\": 1\n            }\n        ],\n        \"key-spacing\": [\n            \"error\",\n            {\n                \"beforeColon\": false,\n                \"afterColon\": true\n            }\n        ],\n        \"keyword-spacing\": [\n            \"error\",\n            {\n                \"before\": true,\n                \"after\": true\n            }\n        ],\n        \"linebreak-style\": [\n            \"error\",\n            \"unix\"\n        ],\n        \"lines-between-class-members\": \"error\",\n        \"max-nested-callbacks\": [\n            \"error\",\n            {\n                \"max\": 5\n            }\n        ],\n        \"max-statements-per-line\": \"error\",\n        \"new-parens\": \"error\",\n        \"no-array-constructor\": \"error\",\n        \"no-caller\": \"error\",\n        \"no-constant-condition\": [\n            \"error\",\n            {\n                \"checkLoops\": false\n            }\n        ],\n        \"no-empty\": [\n            \"error\",\n            {\n                \"allowEmptyCatch\": true\n            }\n        ],\n        \"no-extra-bind\": \"error\",\n        \"no-implicit-coercion\": [\n            \"error\",\n            {\n                \"allow\": [\n                    \"!!\"\n                ]\n            }\n        ],\n        \"no-iterator\": \"error\",\n        \"no-label-var\": \"error\",\n        \"no-lonely-if\": \"error\",\n        \"no-loop-func\": \"error\",\n        \"no-nested-ternary\": \"error\",\n        \"no-new-object\": \"error\",\n        \"no-new-wrappers\": \"error\",\n        \"no-octal-escape\": \"error\",\n        \"no-proto\": \"error\",\n        \"no-prototype-builtins\": \"off\",\n        \"no-restricted-properties\": [\n            \"error\",\n            {\n                \"object\": \"Lang\",\n                \"property\": \"bind\",\n                \"message\": \"Use arrow notation or Function.prototype.bind()\"\n            },\n            {\n                \"object\": \"Lang\",\n                \"property\": \"Class\",\n                \"message\": \"Use ES6 classes\"\n            },\n            {\n                \"object\": \"imports\",\n                \"property\": \"mainloop\",\n                \"message\": \"Use GLib main loops and timeouts\"\n            }\n        ],\n        \"no-restricted-syntax\": [\n            \"error\",\n            {\n                \"selector\": \"MethodDefinition[key.name=\\\"_init\\\"] > FunctionExpression[params.length=1] > BlockStatement[body.length=1] CallExpression[arguments.length=1][callee.object.type=\\\"Super\\\"][callee.property.name=\\\"_init\\\"] > Identifier:first-child\",\n                \"message\": \"_init() that only calls super._init() is unnecessary\"\n            },\n            {\n                \"selector\": \"MethodDefinition[key.name=\\\"_init\\\"] > FunctionExpression[params.length=0] > BlockStatement[body.length=1] CallExpression[arguments.length=0][callee.object.type=\\\"Super\\\"][callee.property.name=\\\"_init\\\"]\",\n                \"message\": \"_init() that only calls super._init() is unnecessary\"\n            }\n        ],\n        \"no-return-assign\": \"error\",\n        \"no-return-await\": \"error\",\n        \"no-self-compare\": \"error\",\n        \"no-shadow-restricted-names\": \"error\",\n        \"no-spaced-func\": \"error\",\n        \"no-tabs\": \"error\",\n        \"no-template-curly-in-string\": \"error\",\n        \"no-throw-literal\": \"error\",\n        \"no-trailing-spaces\": \"error\",\n        \"no-undef-init\": \"error\",\n        \"no-unneeded-ternary\": \"error\",\n        \"no-unused-expressions\": \"error\",\n        \"no-unused-vars\": [\n            \"error\",\n            {\n                \"args\": \"none\",\n                \"vars\": \"local\"\n            }\n        ],\n        \"no-useless-call\": \"error\",\n        \"no-useless-computed-key\": \"error\",\n        \"no-useless-concat\": \"error\",\n        \"no-useless-constructor\": \"error\",\n        \"no-useless-rename\": \"error\",\n        \"no-useless-return\": \"error\",\n        \"no-whitespace-before-property\": \"error\",\n        \"no-with\": \"error\",\n        \"nonblock-statement-body-position\": [\n            \"error\",\n            \"below\"\n        ],\n        \"object-curly-newline\": [\n            \"error\",\n            {\n                \"consistent\": true\n            }\n        ],\n        \"object-curly-spacing\": \"error\",\n        \"operator-assignment\": \"error\",\n        \"operator-linebreak\": \"error\",\n        \"prefer-const\": \"error\",\n        \"prefer-numeric-literals\": \"error\",\n        \"prefer-promise-reject-errors\": \"error\",\n        \"prefer-rest-params\": \"error\",\n        \"prefer-spread\": \"error\",\n        \"quotes\": [\n            \"error\",\n            \"single\",\n            {\n                \"avoidEscape\": true\n            }\n        ],\n        \"require-await\": \"error\",\n        \"rest-spread-spacing\": \"error\",\n        \"semi\": [\n            \"error\",\n            \"always\"\n        ],\n        \"semi-spacing\": [\n            \"error\",\n            {\n                \"before\": false,\n                \"after\": true\n            }\n        ],\n        \"semi-style\": \"error\",\n        \"space-before-blocks\": \"error\",\n        \"space-before-function-paren\": [\n            \"error\",\n            {\n                \"named\": \"never\",\n                \"anonymous\": \"always\",\n                \"asyncArrow\": \"always\"\n            }\n        ],\n        \"space-in-parens\": \"error\",\n        \"space-infix-ops\": [\n            \"error\",\n            {\n                \"int32Hint\": false\n            }\n        ],\n        \"space-unary-ops\": \"error\",\n        \"spaced-comment\": \"error\",\n        \"switch-colon-spacing\": \"error\",\n        \"symbol-description\": \"error\",\n        \"template-curly-spacing\": \"error\",\n        \"template-tag-spacing\": \"error\",\n        \"unicode-bom\": \"error\",\n        \"valid-jsdoc\": [\n            \"error\",\n            {\n                \"requireReturn\": false\n            }\n        ],\n        \"wrap-iife\": [\n            \"error\",\n            \"inside\"\n        ],\n        \"yield-star-spacing\": \"error\",\n        \"yoda\": \"error\"\n    },\n    \"globals\": {\n        \"ARGV\": \"readonly\",\n        \"Debugger\": \"readonly\",\n        \"GIRepositoryGType\": \"readonly\",\n        \"globalThis\": \"readonly\",\n        \"imports\": \"readonly\",\n        \"Intl\": \"readonly\",\n        \"log\": \"readonly\",\n        \"logError\": \"readonly\",\n        \"print\": \"readonly\",\n        \"printerr\": \"readonly\",\n\n        \"global\": false,\n        \"debug\": false,\n        \"_\": false,\n        \"_C\": false,\n        \"_N\": false,\n        \"ngettext\": false\n    },\n    \"parserOptions\": {\n        \"ecmaVersion\": \"latest\",\n        \"sourceType\": \"module\"\n    }\n}\n"
        },
        {
          "name": ".eslintrc.json.license",
          "type": "blob",
          "size": 0.1142578125,
          "content": "SPDX-FileCopyrightText: GSConnect Developers https://github.com/GSConnect\n\nSPDX-License-Identifier: GPL-2.0-or-later\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.1708984375,
          "content": "# SPDX-FileCopyrightText: GSConnect Developers https://github.com/GSConnect\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n[flake8]\nextend-ignore = E402\nmax-line-length = 80\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1494140625,
          "content": "# SPDX-FileCopyrightText: GSConnect Developers https://github.com/GSConnect\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n_build\n*~\nwebextension/*.zip\n\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.3349609375,
          "content": "<!--\nSPDX-FileCopyrightText: GSConnect Developers https://github.com/GSConnect\n\nSPDX-License-Identifier: GPL-2.0-or-later\n-->\n\n# Code of Conduct\n\nWhile taking part in this project, all that is required is to stay on topic.\n\nNote that you are still bound by the Code of Conduct for whichever platform you\nuse to access the project repository.\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.1357421875,
          "content": "<!--\nSPDX-FileCopyrightText: GSConnect Developers https://github.com/GSConnect\n\nSPDX-License-Identifier: GPL-2.0-or-later\n-->\n\n# Contributing\n\nThank you for considering contributing to this project. It means that you not\nonly find it useful, but that you think there's something that could be done to\nmake it more useful, or useful to more people.\n\nThe goal is to create an implementation of KDE Connect that integrates with the\nGNOME desktop more than is appropriate for the original implementation.\n\n## Code of Conduct\n\nWhile taking part in this project, all that is required is to stay on topic.\n\nNote that you are still bound by the Code of Conduct for whichever platform you\nuse to access the project repository.\n\n## Overview\n\nThis document is mostly about code contributions. There are pages in the Wiki\nfor [Translating][translating], [Theming][theming] and [Packaging][packaging].\nYou can open a [New Issue][issue] or [Pull Request][pr] for anything you like\nand it will be reviewed.\n\n### Code Guidelines\n\n* Code MUST be written in [GJS][gjs] if at all possible\n\n  Obvious exceptions are code that help integrate with other programs, like the\n  Nautilus extension.\n\n* Code MUST run anywhere GNOME Shell runs\n\n  It is acceptable and sometimes necessary to use resources that may be specific\n  to Linux, but fallbacks must be available for other systems like BSD. Virtual\n  machines may be supported, but not at any expense to real systems.\n\n* Code MUST NOT break compatibility with the KDE Connect project\n\n  Under no circumstances may code break protocol compatibility or introduce new\n  protocol features. Any protocol related discussion must happen directly with\n  the KDE Connect team and changes or additions are subject to their approval.\n\n### Code Style\n\nGSConnect ships with an ESLint file, which is run on all code by the CI and can\nbe run on code simply with `eslint src/`. When in doubt, copy the existing code\nstyle.\n\n## Developing\n\n### Architecture\n\nGSConnect is composed of three relatively distinct components:\n\n* Service (`/service`)\n\n  The service runs as a separate process in the background and does all the\n  heavy lifting, including connecting and communicating with remote devices. It\n  also exposes several DBus interfaces.\n  \n* Shell Extension (`extension.js`, `/shell`)\n\n  The GNOME Shell extension controls starting and stopping the service, and\n  consumes the DBus interfaces exposed by the service. It also helps GSConnect\n  to integrate into GNOME Shell.\n  \n* Preferences (`gsconnect-preferences`, `/preferences`)\n\n  Unlike most extensions, GSConnect has it's own process for configuring the\n  service and devices, which also communicates with the service over DBus.\n  \n### Building and Installing\n\nGSConnect uses a [`meson`][meson] build system which can accomodate system or\nuser installs. Typically, GSConnect should be developed and installed as a user\nextension, while support for system installs exists primarily for distributions\nthat want to package GSConnect.\n\n#### User Install\n\nWhen installing as a user extension, GSConnect will try its best to detect\nnecessary paths and automatically install required files required for the\nservice to run. The example below will build a user extension ZIP, then install\nit:\n\n```sh\n$ meson _build\n$ ninja -C _build install-zip\n```\n\nUse the `make-zip` target instead to simple build a distributable ZIP, which\nwill be output as `_build/gsconnect@andyholmes.github.io.zip`:\n\n```sh\n$ meson _build\n$ ninja -C _build make-zip\n```\n\n#### System Install\n\nWhen installing as a system extension, the build must be configured to ensure\nGSConnect can function properly when run (details in `meson_options.txt`). Below\nis a typical example for Fedora:\n\n```sh\n$ meson --prefix=/usr \\\n        --libdir=lib/ \\\n        -Dgnome_shell_libdir=/usr/lib64/ \\\n        -Dfirewalld=true \\\n        _build\n$ ninja -C _build install\n```\n\n### Typical Workflow\n\nThe typical workflow for developing GSConnect will mainly involve working on the\nservice. First build and install the extension:\n\n```sh\n$ meson _build\n$ ninja -C _build install-zip\n```\n    \nNext restart GNOME Shell and enable the extension. While developing you should\nenable debugging output and watch the output with `journalctl`:\n\n```sh\n$ dconf write /org/gnome/shell/extensions/gsconnect/debug true\n$ journalctl -f -o cat /usr/bin/gjs\n```\n\nAfter making changes to the service, you should run the `install-zip` target\nagain. The service will automatically restart and there is no need to restart\nGNOME Shell unless you have made changes to the shell extension:\n\n```sh\n$ ninja -C _build install-zip\n```\n\n#### Preferences\n\nWhen working on the Preferences application, you must close and reopen the\nwindow after running the `install-zip` target. You can use `journalctl` to watch\nthe output or if it's more convenient simply run the application from the shell:\n\n```sh\n$ cd ~/.local/share/gnome-shell/extensions/gsconnect@andyholmes.github.io\n$ ./gsconnect-preferences\n```\n\n#### Shell Extension\n\nWhen developing the Shell extension, you must restart GNOME Shell after making\nany changes. Note that the `debug()` function is not available in the Shell\nextension and you should watch `gnome-shell` with `journalctl` instead of GJS:\n\n```sh\n$ journalctl -f -o cat /usr/bin/gnome-shell\n```\n\n## Questions\n\nFor general discussion, there is an IRC/Matrix channel for GSConnect:\n\n* Matrix: https://matrix.to/#/#_gimpnet_#gsconnect:matrix.org\n* IRC: irc://irc.gimp.org/#gsconnect\n\nIf that's not convenient, discussion can happen in the comments to your\n[Pull Request][pr] or you can open a [New Issue][issue] for more public\ndiscussion and mark the Pull Request as a fix for it.\n\n[design]: https://wiki.gnome.org/Projects/GnomeShell/Design/Principles\n[hig]: https://developer.gnome.org/hig/stable/\n[translating]: https://github.com/GSConnect/gnome-shell-extension-gsconnect/wiki/Translating\n[packaging]: https://github.com/GSConnect/gnome-shell-extension-gsconnect/wiki/Packaging\n[theming]: https://github.com/GSConnect/gnome-shell-extension-gsconnect/wiki/Theming\n[issue]: https://github.com/GSConnect/gnome-shell-extension-gsconnect/issues\n[pr]: https://github.com/GNOME/gnome-shell/pulls\n[gjs]: https://gitlab.gnome.org/GNOME/gjs/wikis/home\n\n[meson]: https://mesonbuild.com/\n\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.509765625,
          "content": "<!--\nSPDX-FileCopyrightText: GSConnect Developers https://github.com/GSConnect\n\nSPDX-License-Identifier: GPL-2.0-or-later\n-->\n\n# GSConnect\n\n[<img src=\"https://raw.githubusercontent.com/andyholmes/gnome-shell-extensions-badge/master/get-it-on-ego.svg?sanitize=true\" alt=\"Get it on GNOME Extensions\" height=\"100\" align=\"middle\">][ego] [<img alt=\"Available in the Chrome Web Store\" src=\"https://raw.githubusercontent.com/GSConnect/gnome-shell-extension-gsconnect/main/data/images/chrome-badge.png\" align=\"middle\" hspace=\"12\"/>][chrome] [<img src=\"https://raw.githubusercontent.com/GSConnect/gnome-shell-extension-gsconnect/main/data/images/firefox-badge.png\" alt=\"Get the Add-On\" align=\"middle\">][firefox]\n\n## Overview\n\n[GSConnect][ego] is a complete implementation of [KDE Connect][kdeconnect]\nespecially for GNOME Shell with Nautilus, [Chrome][chrome] and\n[Firefox][firefox] integration. The KDE Connect team has applications for Linux,\nBSD, Android, Sailfish, iOS, macOS and Windows.\n\nWith GSConnect you can securely connect to mobile devices and other desktops to:\n\n* Share files, links and text\n* Send and receive messages\n* Sync clipboard content\n* Sync contacts\n* Sync notifications\n* Control media players\n* Control system volume\n* Execute predefined commands\n* And more…\n\nPlease see the **[Wiki][wiki]** for more information about\n**[Features][features]** and **[Help][help]**.\n\n## Project Status\n\nGSConnect is now under the GitHub organisation [GSConnect][gsconnect-org].\n\nPlease note, this project has migrated from a developer-driven model to a\ncommunity-driven model. This means that GSConnect does not have dedicated\ndevelopers working on new features or bug fixes. Instead, the project relies on\ncontributions from its users and distributions that choose to package it.\n\nIf you would like to take a more active role in the development and maintenance\nof GSConnect, you can start by [triaging new issues][issues],\n[fixing confirmed issues][help-wanted] and [reviewing contributions][needs-review].\nIf you need additional permissions, you may request them from one of the\n[current maintainers][people].\n\n## Nightly Builds\n\nFor early updaters of GNOME Shell and those that wish to test the upcoming version\nof GSConnect, there are automated builds available for [download][nightly-build].\nSee [Installing from Nightly Build][nightly-install] for installation instructions.\n\n[ego]: https://extensions.gnome.org/extension/1319/gsconnect/\n[chrome]: https://chrome.google.com/webstore/detail/gsconnect/jfnifeihccihocjbfcfhicmmgpjicaec\n[firefox]: https://addons.mozilla.org/firefox/addon/gsconnect/\n[kdeconnect]: https://userbase.kde.org/KDEConnect\n[wiki]: https://github.com/GSConnect/gnome-shell-extension-gsconnect/wiki/\n[features]: https://github.com/GSConnect/gnome-shell-extension-gsconnect/wiki/Features\n[help]: https://github.com/GSConnect/gnome-shell-extension-gsconnect/wiki/Help\n\n[gsconnect-org]: https://github.com/GSConnect\n[issues]: https://github.com/GSConnect/gnome-shell-extension-gsconnect/issues\n[help-wanted]: https://github.com/GSConnect/gnome-shell-extension-gsconnect/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22\n[needs-review]: https://github.com/GSConnect/gnome-shell-extension-gsconnect/pulls?q=is%3Apr+is%3Aopen+label%3A%22needs+review%22\n[people]: https://github.com/orgs/GSConnect/people\n[nightly-build]: https://nightly.link/GSConnect/gnome-shell-extension-gsconnect/workflows/main/main/gsconnect@andyholmes.github.io.zip\n[nightly-install]: https://github.com/GSConnect/gnome-shell-extension-gsconnect/wiki/Installation#install-from-nightly-build\n"
        },
        {
          "name": "RELEASE_CHECKLIST.md",
          "type": "blob",
          "size": 1.962890625,
          "content": "<!--\nSPDX-FileCopyrightText: GSConnect Developers https://github.com/GSConnect\n\nSPDX-License-Identifier: GPL-2.0-or-later\n-->\n\n# Release Checklist\n\nSteps to prepare a new release.\n\n## Submit a PR to update the version metadata\n\n- [ ] Bump the `project(version)` value in `meson.build`\n- [ ] Add a corresponding `<release>...</release>` block\n      to the top of the `<releases>` section in\n      `data/metainfo/org.gnome.Shell.Extensions.GSConnect.metainfo.xml.in`\n- [ ] Merge the PR to create a release commit\n\n> [!CAUTION]\n> The AppStream metadata will contain a release date for the new version.\n> If the PR isn't merged immediately,\n> double-check that it matches the current date before merging.\n\n## Package the new release\n\n- [ ] Run `git pull` on the `main` branch\n- [ ] Run `meson setup _build .`\n- [ ] Run `meson compile -C _build make-zip`\n\n## Publish to GitHub Releases\n\n- [ ] Open the [New Release template] (or click \"Draft a new release\" from the Releases page)\n- [ ] Create a new `v##` tag matching the new version number\n- [ ] Click \"Generate release notes\" to populate the textarea\n      with an autogenerated list of PRs, as a starting point\n- [ ] Clean up & compose the final notes, which may mean...\n\n    - [ ] Remove automated PRs (dependabot, Crowdin)\n    - [ ] Remove purely-internal PRs,\n          like CI, build, or repo-maintenance changes.\n          Anything that affects the _repo_, but not the _package_,\n          is probably not relevant to endusers and can be left out.\n    - [ ] (Optional) Write an introductory \"What's New\" section,\n          highlighting any notable changes or new features.\n\n- [ ] Attach the `_build/gsconnect@andyholmes.github.io.zip` file\n- [ ] Publish the release\n\n## Submit to EGO\n\nOnce the release is published to GitHub,\nthe attached zip file can also be submitted to extensions.gnome.org\nby the designated extension author (currently @daniellandau).\n\n[New Release template]: https://github.com/GSConnect/gnome-shell-extensions-gsconnect/releases/new\n"
        },
        {
          "name": "REUSE.toml",
          "type": "blob",
          "size": 1.4228515625,
          "content": "# SPDX-FileCopyrightText: GSConnect Developers https://github.com/GSConnect\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\nversion = 1\nSPDX-PackageName = \"gnome-shell-extension-gsconnect\"\nSPDX-PackageSupplier = \"GSConnect Developers <>\"\nSPDX-PackageDownloadLocation = \"https://github.com/GSConnect/gnome-shell-extension-gsconnect\"\n\n[[annotations]]\npath = [\"data/icons/**\", \"data/images/enter-keyboard-shortcut.svg\", \"data/metainfo/**.png\"]\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"GSConnect Developers <>\"\nSPDX-License-Identifier = \"GPL-2.0-or-later\"\n\n[[annotations]]\npath = \"data/images/chrome-badge.png\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Google <https://developers.google.com/>\"\nSPDX-License-Identifier = \"CC-BY-4.0\"\n\n[[annotations]]\npath = \"data/images/firefox-badge.png\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"1998–2024 by individual mozilla.org contributors <>\"\nSPDX-License-Identifier = \"CC-BY-SA-3.0\"\n\n[[annotations]]\npath = [\"po/**.po\", \"po/**.pot\"]\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"GSConnect Community\"\nSPDX-License-Identifier = \"GPL-2.0-or-later\"\n\n[[annotations]]\npath = \"installed-tests/data/**\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"GSConnect Developers <>\"\nSPDX-License-Identifier = \"GPL-2.0-or-later\"\n\n[[annotations]]\npath = \"webextension/images/**\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"GSConnect Developers <>\"\nSPDX-License-Identifier = \"GPL-2.0-or-later\"\n"
        },
        {
          "name": "build-aux",
          "type": "tree",
          "content": null
        },
        {
          "name": "crowdin.yml",
          "type": "blob",
          "size": 0.484375,
          "content": "# SPDX-FileCopyrightText: GSConnect Developers https://github.com/GSConnect\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\nproject_identifier: org.gnome.Shell.Extensions.GSConnect\nfiles:\n  - source: /po/org.gnome.Shell.Extensions.GSConnect.pot\n    translation: /po/%two_letters_code%.po\n    languages_mapping:\n      two_letters_code:\n        nl-BE: nl_BE\n        nl-NL: nl\n        pt-BR: pt_BR\n        pt-PT: pt\n        sr-CS: sr@latin\n        sr-SP: sr\n        zh-CN: zh_CN\n        zh-TW: zh_TW\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "installed-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 3.86328125,
          "content": "# SPDX-FileCopyrightText: GSConnect Developers https://github.com/GSConnect\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\nproject('gsconnect',\n  'c',\n  version: '58',\n  meson_version: '>= 0.59.0',\n)\n\ngnome = import('gnome')\ni18n = import('i18n')\n\napp_id = 'org.gnome.Shell.Extensions.GSConnect'\napp_path = '/org/gnome/Shell/Extensions/GSConnect'\nextuuid = 'gsconnect@andyholmes.github.io'\n\nprefix = get_option('prefix')\ndatadir = join_paths(prefix, get_option('datadir'))\nextdatadir = join_paths(datadir, 'gnome-shell', 'extensions', extuuid)\nlibdir = join_paths(prefix, get_option('libdir'))\nlibexecdir = join_paths(prefix, get_option('libexecdir'))\nlocaledir = join_paths(prefix, get_option('localedir'))\nsysconfdir = get_option('sysconfdir')\n\ngschemadir = join_paths(datadir, 'glib-2.0', 'schemas')\n\n\n# GNOME Shell LIBDIR\nif get_option('gnome_shell_libdir') != ''\n  gnome_shell_libdir = get_option('gnome_shell_libdir')\nelse\n  gnome_shell_libdir = libdir\nendif\n\n\n# Configuration\nextconfig = configuration_data()\nextconfig.set('PACKAGE_VERSION', meson.project_version())\nextconfig.set('PACKAGE_URL', 'https://github.com/GSConnect/gnome-shell-extension-gsconnect')\nextconfig.set('PACKAGE_BUGREPORT', 'https://github.com/GSConnect/gnome-shell-extension-gsconnect/issues/new')\nextconfig.set('PACKAGE_DATADIR', extdatadir)\nextconfig.set('PACKAGE_LOCALEDIR', localedir)\nextconfig.set('GSETTINGS_SCHEMA_DIR', gschemadir)\n\nextconfig.set('APPLICATION_ID', app_id)\nextconfig.set('APPLICATION_PATH', app_path)\n\nextconfig.set('GNOME_SHELL_LIBDIR', gnome_shell_libdir)\nextconfig.set('FFMPEG_PATH', get_option('ffmpeg_path'))\nextconfig.set('OPENSSL_PATH', get_option('openssl_path'))\nextconfig.set('SSHADD_PATH', get_option('sshadd_path'))\nextconfig.set('SSHKEYGEN_PATH', get_option('sshkeygen_path'))\n\n\n# ZIP targets for user extension builds\nenv_util = find_program('env')\n\nrun_target(\n  'make-pkgdir',\n  command: [\n    env_util,\n    'UUID=' + extuuid,\n    'DATADIR=' + datadir,\n    'LOCALEDIR=' + localedir,\n    'GSCHEMADIR=' + gschemadir,\n    'NOZIP=true',\n    join_paths(meson.project_source_root(), 'build-aux', 'ego', 'mkzip.sh')\n  ]\n)\n\n\nrun_target(\n  'make-zip',\n  command: [\n    env_util,\n    'UUID=' + extuuid,\n    'DATADIR=' + datadir,\n    'LOCALEDIR=' + localedir,\n    'GSCHEMADIR=' + gschemadir,\n    join_paths(meson.project_source_root(), 'build-aux', 'ego', 'mkzip.sh')\n  ]\n)\n\nrun_target(\n  'install-zip',\n  command: [\n    env_util,\n    'UUID=' + extuuid,\n    'DATADIR=' + datadir,\n    'LOCALEDIR=' + localedir,\n    'GSCHEMADIR=' + gschemadir,\n    'INSTALL=true',\n    join_paths(meson.project_source_root(), 'build-aux', 'ego', 'mkzip.sh')\n  ]\n)\n\n\n# Post-Install script for distributions without the hooks\ngnome.post_install(\n  glib_compile_schemas: true,\n  gtk_update_icon_cache: true,\n  update_desktop_database: true,\n)\n\n\n# Extension Source\ninstall_subdir(\n  'src',\n  install_dir: extdatadir,\n  strip_directory: true\n)\n\neslint = find_program('eslint', required: false)\n\nif eslint.found()\n  test('ESLint (Source)', eslint,\n    args: join_paths(meson.project_source_root(), 'src'),\n    suite: 'lint',\n  )\n  test('ESLint (Installed Tests)', eslint,\n    args: join_paths(meson.project_source_root(), 'installed-tests'),\n    suite: 'lint',\n  )\n  test('ESLint (WebExtension)', eslint,\n    args: join_paths(meson.project_source_root(), 'webextension'),\n    suite: 'lint',\n  )\nendif\n\nblack = find_program('black', required: false)\nif black.found()\n  test('Python Black (Nautilus Extension)', black,\n    args: [\n      '--check',\n      '--diff',\n      join_paths(meson.project_source_root(), 'nautilus-extension')\n    ],\n    suite: 'lint',\n  )\nendif\n\nflake8 = find_program('flake8', required: false)\nif flake8.found()\n  test('Python Flake8 (Nautilus Extension)', flake8,\n    args: join_paths(meson.project_source_root(), 'nautilus-extension'),\n    suite: 'lint',\n  )\nendif\n\n\nsubdir('data')\nsubdir('installed-tests')\nsubdir('nautilus-extension')\nsubdir('po')\n\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 2.2294921875,
          "content": "# SPDX-FileCopyrightText: GSConnect Developers https://github.com/GSConnect\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# See https://github.com/GSConnect/gnome-shell-extension-gsconnect/wiki/Packaging\n\n# GNOME Shell LIBDIR\noption(\n  'gnome_shell_libdir',\n  type: 'string',\n  value: '',\n  description: 'LIBDIR for GNOME Shell (eg. $LIBDIR/gnome-shell/Gvc-1.0.typelib)'\n)\n\n# DBus service file\noption(\n  'session_bus_services_dir',\n  type: 'string',\n  value: '',\n  description: 'DBus session services directory'\n)\n\n# firewalld service file\noption(\n  'firewalld',\n  type: 'boolean',\n  value: false,\n  description: 'Install firewalld service file'\n)\n\n# External program paths\n# NOTE: these are only useful for distributions like NixOS that don't use PATH\noption(\n  'ffmpeg_path',\n  type: 'string',\n  value: 'ffmpeg',\n  description: 'Absolute path to ffmpeg binary'\n)\n\noption(\n  'openssl_path',\n  type: 'string',\n  value: 'openssl',\n  description: 'Absolute path to openssl binary'\n)\n\noption(\n  'sshadd_path',\n  type: 'string',\n  value: 'ssh-add',\n  description: 'Absolute path to ssh-add binary'\n)\n\noption(\n  'sshkeygen_path',\n  type: 'string',\n  value: 'ssh-keygen',\n  description: 'Absolute path to ssh-keygen binary'\n)\n\n# Nautilus/Nemo Python extension installation\noption(\n  'nautilus',\n  type: 'boolean',\n  value: true,\n  description: 'Install file browser extension for Nautilus (Files)'\n)\n\noption(\n  'nemo',\n  type: 'boolean',\n  value: false,\n  description: 'Install file browser extension for Nemo'\n)\n\n# WebExtension manifest installation\n# NOTE: this is NOT the WebExtension, but is REQUIRED for it to work.\noption(\n  'webextension',\n  type: 'boolean',\n  value: true,\n  description: 'Install WebExtension manifest for Chrome, Chromium & Firefox'\n)\n\n# Override manifest install so that BROWSER_NMHDIR/foo.json\noption(\n  'chrome_nmhdir',\n  type: 'string',\n  value: '',\n  description: 'Native Messaging Host directory for Chrome'\n)\n\noption(\n  'chromium_nmhdir',\n  type: 'string',\n  value: '',\n  description: 'Native Messaging Host directory for Chromium'\n)\n\noption(\n  'mozilla_nmhdir',\n  type: 'string',\n  value: '',\n  description: 'Native Messaging Host directory for Mozilla'\n)\n\noption(\n  'installed_tests',\n  type: 'boolean',\n  value: true,\n  description: 'Install tests'\n)\n\n"
        },
        {
          "name": "nautilus-extension",
          "type": "tree",
          "content": null
        },
        {
          "name": "po",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.2470703125,
          "content": "# SPDX-FileCopyrightText: GSConnect Developers https://github.com/GSConnect\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n[tool.black]\nline-length = 80\ntarget-version = ['py38', 'py39', 'py310', 'py311', 'py312']\ninclude = 'nautilus-extension/.*\\.py$'\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "webextension",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}