{
  "metadata": {
    "timestamp": 1736561942695,
    "page": 649,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "huangwei9527/quark-h5",
      "stars": 3536,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".browserslistrc",
          "type": "blob",
          "size": 0.03515625,
          "content": "> 1%\nlast 2 versions\nandroid >= 4.4\n"
        },
        {
          "name": ".eslintrc.js",
          "type": "blob",
          "size": 0.3447265625,
          "content": "module.exports = {\n  root: true,\n  env: {\n    node: true\n  },\n  'extends': [\n    'plugin:vue/essential',\n    'eslint:recommended'\n  ],\n  rules: {\n    'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off'\n  },\n  parserOptions: {\n    parser: 'babel-eslint'\n  }\n}\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.234375,
          "content": ".DS_Store\nnode_modules\n/dist\n\n# local env files\n.env.local\n.env.*.local\n\n# Log files\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Editor directories and files\n.idea\n.vscode\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\n/server/public/psd_static\n"
        },
        {
          "name": ".tgitconfig",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2022 huangwei9527\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.3662109375,
          "content": "## 前言\n想必你一定使用过易企秀或百度H5等微场景生成工具制作过炫酷的h5页面，除了感叹其神奇之处有没有想过其实现方式呢？本文从零开始实现一个H5编辑器项目完整设计思路和主要实现步骤，并开源前后端代码。有需要的小伙伴可以按照该教程从零实现自己的H5编辑器。（实现起来并不复杂，该教程只是提供思路，并非最佳实践）\n\n演示地址：[传送门](http://139.199.172.193:4000/)\n\n掘金文章：[Vue + Koa从零打造一个H5页面可视化编辑器——Quark-h5](https://juejin.im/post/6844903992426758152)\n\n&&\n\n[基于Koa2打造属于自己的MVC框架](https://juejin.cn/post/6895715094257205261)\n\n**编辑器预览：**\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14bbfe2bc077432090fa9eff2596ca94~tplv-k3u1fbpfcp-watermark.awebp)\n\n## 技术栈\n**前端：**<br/>\n`vue`: 模块化开发少不了angular，react，vue三选一，这里选择了vue。<br/>\n`vuex`: 状态管理<br/>\n`sass`: css预编译器。<br/>\n`element-ui`：不造轮子，有现成的优秀的vue组件库当然要用起来。没有的自己再封装一些就可以了。<br/>\n`loadsh`：工具类<br/>\n\n**服务端：**<br/>\n`koa`：后端语言采用nodejs，koa文档和学习资料也比较多，express原班人马打造，这个正合适。<br/>\n`mongodb`：一个基于分布式文件存储的数据库，比较灵活。<br/>\n\n## 部署环境准备\nnode 14\npython 2.X\n\n## 阅读前准备\n1、了解vue技术栈开发<br/>\n2、了解koa<br/>\n3、了解mongodb<br/>\n\n\n## 工程目录结构\n\n```\n|-- client\t\t\t\t\t--------前端项目界面代码\n    |--common\t\t\t\t\t--------前端界面对应静态资源\n    |--components\t\t\t\t--------组件\n    |--config\t\t\t\t\t--------配置文件\n    |--eventBus\t\t\t\t\t--------eventBus\n    |--filter\t\t\t\t\t--------过滤器\n    |--mixins\t\t\t\t\t--------混入\n    |--pages\t\t\t\t\t--------页面\n    |--router\t\t\t\t\t--------路由配置\n    |--store\t\t\t\t\t--------vuex状态管理\n    |--service\t\t\t\t\t--------axios封装\n    |--App.vue\t\t\t\t\t--------App\n    |--main.js\t\t\t\t\t--------入口文件\n    |--permission.js\t\t\t--------权限控制\n|-- server\t\t\t\t\t--------服务器端项目代码\n    |--confog\t\t\t\t\t--------配置文件\n    |--controller\t\t\t\t--------数据库链接相关\n    |--extend\t\t\t\t\t--------框架扩展\n    |--model\t\t\t\t\t-------Schema和Model\n    |--middleware\t\t\t\t--------中间件\n    |--core\t\t\t\t\t\t--------Koa MVC实现自动加载核心文件\n    |--views\t\t\t\t\t--------ejs页面模板\n    |--public\t\t\t\t\t--------静态资源\n    |--router.js\t\t\t\t--------路由\n    |--app.js\t\t\t\t\t--------服务端入口\n|-- common\t\t\t\t\t--------前后端公用代码模块（如加解密）\n|-- engine-template\t\t\t--------页面模板引擎，使用webpack打包成js提供页面引用\n|-- docs\t\t\t\t\t--------预留编写项目文档目录\n|-- config.json\t\t\t\t--------配置文件\n```\n## 前端编辑器实现\n编辑器的实现思路是：编辑器生成页面JSON数据，服务端负责存取JSON数据，渲染时从服务端取数据JSON交给前端模板处理。\n\n![](https://user-gold-cdn.xitu.io/2019/11/11/16e582f5b9c69601?w=747&h=435&f=jpeg&s=31027)\n\n## 数据结构\n确认了实现逻辑，数据结构也是非常重要的，把一个页面定义成一个JSON数据，数据结构大致是这样的：\n\n**页面工程数据接口**\n```\n{\n\ttitle: '', // 标题\n\tdescription: '', //描述\n\tcoverImage: '', // 封面\n\tauther: '', // 作者\n\tscript: '', // 页面插入脚本\n\twidth: 375, // 高\n\theight: 644, // 宽\n\tpages: [], // 多页页面\n\tshareConfig: {}, // 微信分享配置\n\tpageMode: 0, // 渲染模式，用于扩展多种模式渲染，翻页h5/长页/PC页面等等\n}\n```\n**多页页面pages其中一页数据结构：**\n```\n{\n\tname: '',\n\telements: [], // 页面元素\n\tcommonStyle: {\n\t\tbackgroundColor: '',\n\t\tbackgroundImage: '',\n\t\tbackgroundSize: 'cover'\n\t},\n\tconfig: {}\n}\n```\n**元素数据结构：**\n```\n{\n\telName: '', // 组件名\n\tanimations: [], // 图层的动画,可以支持多个动画\n\tcommonStyle: {}, // 公共样式，默认样式\n\tevents: [], // 事件配置数据，每个图层可以添加多个事件\n\tpropsValue: {}, // 属性参数\n\tvalue: '', // 绑定值\n\tvalueType: 'String', // 值类型\n\tisForm: false // 是否是表单控件，用于表单提交时获取表单数据\n}\n```\n### 编辑器整体设计\n- 一个组件选择区，提供使用者选择需要的组件\n- 一个编辑预览画板，提供使用者拖拽排序页面预览的功能\n- 一个组件属性编辑，提供给使用者编辑组件内部props、公共样式和动画的功能\n**如图：**\n\n![](https://user-gold-cdn.xitu.io/2019/11/11/16e58647221d6942?w=1920&h=903&f=png&s=204235)\n用户在左侧组件区域选择组件添加到页面上，编辑区域通过动态组件特性渲染出每个元素组件。\n\n`最后，点击保存将页面数据提交到数据库。至于数据怎么转成静态 HTML方法有很多。还有页面数据我们全部都有，我们可以做页面的预渲染，骨架屏，ssr，编译时优化等等。而且我们也可以对产出的活动页做数据分析~有很多想象的空间。`\n\n### 核心代码\n编辑器核心代码，基于 Vue 动态组件特性实现：\n\n![](https://user-gold-cdn.xitu.io/2019/11/11/16e586d0f77fe59a?w=1120&h=340&f=png&s=49296)\n\n为大家附上 Vue 官方文档：[cn.vuejs.org/v2/api/#is](https://cn.vuejs.org/v2/api/#is \"cn.vuejs.org/v2/api/#is\")\n### 画板元素渲染\n编辑画板只需要循环遍历pages[i].elements数组，将里面的元素组件JSON数据取出，通过动态组件渲染出各个组件，支持拖拽改变位置尺寸.\n\n### 元素组件管理\n在client目录新建plugins来管理组件库。也可以将该组件库发到npm上工程中通过npm管理\n\n#### 组件库\n编写组件，考虑的是组件库，所以我们竟可能让我们的组件支持全局引入和按需引入，如果全局引入，那么所有的组件需要要注册到Vue component 上，并导出：\n\n**client/plugins下新建index.js入口文件**\n\n    ```\n\t/**\n     * 组件库入口\n     * */\n    import Text from './text'\n    // 所有组件列表\n    const components = [\n    \tText\n    ]\n    // 定义 install 方法，接收 Vue 作为参数\n    const install = function (Vue) {\n    \t// 判断是否安装，安装过就不继续往下执行\n    \tif (install.installed) return\n    \tinstall.installed = true\n    \t// 遍历注册所有组件\n    \tcomponents.map(component => Vue.component(component.name, component))\n    }\n    \n    // 检测到 Vue 才执行，毕竟我们是基于 Vue 的\n    if (typeof window !== 'undefined' && window.Vue) {\n    \tinstall(window.Vue)\n    }\n\n    export default {\n    \tinstall,\n    \t// 所有组件，必须具有 install，才能使用 Vue.use()\n    \tText\n    }\n\t```\n\t\n#### 组件开发\n示例： text文本组件\n\n**client/plugins下新建text组件目录**\n```\n|-- text                --------text组件\n    |--src              --------资源\n    \t|--index.vue    --------组件\n    |--index.js         --------入口\n```\ntext/index.js\n```\n// 为组件提供 install 方法，供组件对外按需引入\nimport Component from './src/index'\nComponent.install = Vue => {\n\tVue.component(Component.name, Component)\n}\nexport default Component\n```\ntext/src/index.vue\n```\n<!--text.vue-->\n<template>\n  <div class=\"qk-text\">\n    {{text}}\n  </div>\n</template>\n\n<script>\n\texport default {\n\t\tname: 'QkText', // 这个名字很重要，它就是未来的标签名<qk-text></qk-text>\n\t\tprops: {\n\t\t\ttext: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: '这是一段文字'\n      \t\t}\n\t\t}\n\t}\n</script>\n\n<style lang=\"scss\" scoped>\n</style>\n```\n\n**编辑器里使用组件库：**\n```\n// 引入组件库\nimport QKUI from 'client/plugins/index'\n// 注册组件库\nVue.use(QKUI)\n\n// 使用：\n<qk-text text=\"这是一段文字\"></qk-text>\n```\n按照这个组件开发方式我们可以扩展任意多的组件，来丰富组件库\n\n`需要注意的是这里的组件最外层宽高都要求是100%`\n\n#### 配置文件\nQuark-h5编辑器左侧选择组件区域可以通过一个配置文件定义可选组件\n新建一个ele-config.js配置文件：\n```\nexport default [\n\t{\n\t\ttitle: '基础组件',\n\t\tcomponents: [\n\t\t\t{\n\t\t\t\telName: 'qk-text', // 组件名，与组件库名称一致\n\t\t\t\ttitle: '文字',\n\t\t\t\ticon: 'iconfont iconwenben',\n\t\t\t\t// 给每个组件配置默认显示样式\n\t\t\t\tdefaultStyle: {\n\t\t\t\t\theight: 40\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\ttitle: '表单组件',\n\t\tcomponents: []\n\t},\n\t{\n\t\ttitle: '功能组件',\n\t\tcomponents: []\n\t},\n\t{\n\t\ttitle: '业务组件',\n\t\tcomponents: []\n\t}\n]\n```\n\n公共方法中提供一个function 通过组件名和默认样式获取元素组件JSON，getElementConfigJson(elName, defaultStyle)方法\n\n\n\n**服务端具体接口实现就不详细介绍了，就是对页面的增删改查，和用户的登录注册难度不大**\n\n## 本地开发\n环境准备：mongodb （配置文件在/server/config/index.js） ⭐⭐⭐⭐⭐(重要)\n\n### 启动前端\n```\nnpm run dev-client\n```\n### 启动服务端\n```\nnpm run dev-server\n```\n\n注意：\n如果没有生成过引擎模板js文件的，需要先编辑引擎模板，否则预览页面加载页面引擎.js 404报错\n##### 编译engine.js模板引擎\n```\nnpm run lib:h5-swiper\n```\n\n## 本地部署\n环境准备：mongodb （配置文件在/server/config/index.js） ⭐⭐⭐⭐⭐(重要)\n\n需要全局安装pm2 \n```\nnpm install pm2 -g\n```\n#### 启动命令\n```\nnpm run start\n```\n启动完访问http://localhost:4000 就可以看到工程页面了\n\n\n\n\n## 交流群(948547409)\n\n### License\nMIT\n\n\n"
        },
        {
          "name": "babel.config.js",
          "type": "blob",
          "size": 0.048828125,
          "content": "module.exports = {\n\tpresets: [\n\t\t'@vue/app'\n\t],\n}\n"
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.json",
          "type": "blob",
          "size": 0.2060546875,
          "content": "{\n  \"port\": \"4000\",\n  \"adminAccount\": \"admin\",\n  \"db\": {\n    \"servername\": \"172.16.14.38\",\n    \"DATABASE\": \"admin\",\n    \"port\": 27017,\n    \"user\": \"\",\n    \"pass\": \"\",\n    \"authSource\": \"\"\n  },\n  \"baseURL\": \"\"\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine-template",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.1416015625,
          "content": "{\n  \"name\": \"quail-h5\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev-client\": \"vue-cli-service serve\",\n    \"dev-server\": \"nodemon server/app.js dev -L\",\n    \"dev\": \"npm run dev-client\",\n    \"build-client\": \"vue-cli-service build\",\n    \"start\": \"pm2 start server/app.js\",\n    \"lib:h5-swiper\": \"vue-cli-service build --target lib --name page-engine --dest server/public/engine_libs/h5-swiper engine-template/engine-h5-swiper/index.js\"\n  },\n  \"dependencies\": {\n    \"ali-oss\": \"^6.1.1\",\n    \"animate.css\": \"^3.7.2\",\n    \"axios\": \"^0.19.0\",\n    \"babel-polyfill\": \"^6.26.0\",\n    \"core-js\": \"^2.6.5\",\n    \"crypto-js\": \"^3.1.9-1\",\n    \"dom-to-image\": \"^2.6.0\",\n    \"element-ui\": \"^2.12.0\",\n    \"html2canvas\": \"^1.0.0-rc.5\",\n    \"koa-body\": \"^4.1.1\",\n    \"koa-ejs\": \"^4.2.0\",\n    \"lodash\": \"^4.17.15\",\n    \"node-schedule\": \"^1.3.2\",\n    \"nprogress\": \"^0.2.0\",\n    \"qrcode.vue\": \"^1.6.3\",\n    \"redis\": \"^3.0.2\",\n    \"swiper\": \"^6.3.5\",\n    \"vue\": \"^2.6.10\",\n    \"vue-awesome-swiper\": \"^4.1.1\",\n    \"vue-clipboard2\": \"^0.3.1\",\n    \"vue-cropper\": \"^0.4.9\",\n    \"vue-router\": \"^3.0.3\",\n    \"vue-swiper-component\": \"^2.1.3\",\n    \"vuex\": \"^3.0.1\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"^3.11.0\",\n    \"@vue/cli-plugin-eslint\": \"^3.11.0\",\n    \"@vue/cli-service\": \"^3.11.0\",\n    \"art-template\": \"^4.13.2\",\n    \"babel-eslint\": \"^10.0.1\",\n    \"babel-plugin-component\": \"^1.1.1\",\n    \"babel-plugin-import\": \"^1.12.2\",\n    \"babel-preset-env\": \"^1.7.0\",\n    \"co\": \"^4.6.0\",\n    \"debug\": \"^4.1.1\",\n    \"eslint\": \"^5.16.0\",\n    \"eslint-plugin-vue\": \"^5.0.0\",\n    \"html2canvas-proxy\": \"^1.0.1\",\n    \"jsonwebtoken\": \"^8.5.1\",\n    \"koa\": \"^2.10.0\",\n    \"koa-art-template\": \"^1.1.1\",\n    \"koa-bodyparser\": \"^4.2.1\",\n    \"koa-convert\": \"^1.2.0\",\n    \"koa-json\": \"^2.0.2\",\n    \"koa-jwt\": \"^3.6.0\",\n    \"koa-logger\": \"^3.2.1\",\n    \"koa-onerror\": \"^4.1.0\",\n    \"koa-router\": \"^7.4.0\",\n    \"koa-static\": \"^5.0.0\",\n    \"koa-views\": \"^6.2.1\",\n    \"koa2-cors\": \"^2.0.6\",\n    \"mongodb\": \"^3.3.3\",\n    \"mongoose\": \"^5.7.5\",\n    \"node-sass\": \"^4.9.0\",\n    \"nodemon\": \"^1.19.4\",\n    \"psd\": \"^3.2.0\",\n    \"pug\": \"^2.0.3\",\n    \"sass-loader\": \"^7.1.0\",\n    \"vue-template-compiler\": \"^2.6.10\"\n  }\n}\n"
        },
        {
          "name": "postcss.config.js",
          "type": "blob",
          "size": 0.0576171875,
          "content": "module.exports = {\n  plugins: {\n    autoprefixer: {}\n  }\n}\n"
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "vue.config.js",
          "type": "blob",
          "size": 1.3779296875,
          "content": "const path = require('path')\nconst fs = require('fs')\n\n\nlet devServer = {\n\tproxy: { // 代理\n\t\t'/': {\n\t\t\ttarget: 'http://localhost:4000',//设置你调用的接口域名和端口号 别忘了加http\n\t\t\tws: false,\n\t\t\tchangeOrigin: true,               // needed for virtual hosted sites\n\t\t\tpathRewrite: {},\n\t\t}\n\t}\n}\n\nmodule.exports = {\n\tdevServer: devServer,\n\t// 输出文件目录\n\tassetsDir: \"static\",\n\t// 修改 pages 入口\n\tpages: {\n\t\tindex: {\n\t\t\tentry: 'client/main.js', // 入口\n\t\t\ttemplate: 'public/engine-h5-long.html', // 模板\n\t\t\tfilename: 'index.html' // 输出文件\n\t\t}\n\t},\n\tcss: {\n\t\tloaderOptions: {\n\t\t\tsass: {\n\t\t\t\t// @/ 是 src/ 的别名\n\t\t\t\tdata: fs.readFileSync(path.resolve(__dirname, `./client/common/styles/variables.scss`), 'utf-8') // 公共变量文件注入\n\t\t\t}\n\t\t}\n\t},\n\t// 扩展 webpack 配置\n\tchainWebpack: config => {\n\t\t// @ 默认指向 src 目录，这里要改成 examples\n\t\t// 另外也可以新增一个 ~ 指向 packages\n\t\tconfig.resolve.alias\n\t\t\t.set('@', path.resolve('client'))\n\t\t\t.set('@client', path.resolve('client'))\n\t\t\t.set('@plugins', path.resolve('plugins'))\n\t\t\t.set('@server', path.resolve('server'))\n\t\tconfig.module\n\t\t\t.rule('js')\n\t\t\t.include.add(/engine-template/).end()\n\t\t\t.include.add(/client/).end()\n\t\t\t.include.add(/common/).end()\n\t\t\t.use('babel')\n\t\t\t.loader('babel-loader')\n\t\t\t.tap(options => {\n\t\t\t\t// 修改它的选项...\n\t\t\t\treturn options\n\t\t\t})\n\t}\n}\n"
        }
      ]
    }
  ]
}