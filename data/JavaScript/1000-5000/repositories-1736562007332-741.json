{
  "metadata": {
    "timestamp": 1736562007332,
    "page": 741,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "reapp/reapp",
      "stars": 3403,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0263671875,
          "content": "node_modules/\nnpm-debug.log"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Nate Wienert\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.6630859375,
          "content": "### What is it?\n\nReapp is everything you need to build amazing apps with React: a collection of\npackages that work together, our UI kit, and a CLI that scaffolds your app and includes\na server and build system.\n\n[![Join the chat at https://gitter.im/reapp/reapp](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/reapp/reapp?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n### Installation\n\nInstallation is done through npm:\n\n```\nnpm install -g reapp\n```\n\nGenerate a new base reapp stack with:\n\n```\nreapp new [name]\n```\n\nAnd finally in your app directory, run it on [localhost:3010](http://localhost:3010):\n\n```\nreapp run\n```\n\n### CLI\n\nThe CLI has three main functions: creating new apps, running them, and building them for release.\n\nNote that when you run your app, it will run in development mode by default which is much slower\nbut easier to debug. Run it in production mode to get a feel for real-world performance.\n\nCLI Usage:\n```\nUsage: reapp [command]\n\n  new [name]  creates a directory with a new reapp-starter scaffold\n  run         runs a reapp application with express/webpack-dev-server\n  build       builds a reapp application to a bundle in ./build\n  debug       use this for opening issues!\n```\n\nThe build and run commands take a variety of options to help ease your development, such as:\n\n```\nUsage: reapp-run [options]\n\n  -d, --debug          output extra information for debugging\n  -p, --port [number]  specify a port [number]\n  -h, --host [host]    specify hostname\n  -b, --bind [address] specify bind address if different from host\n  -e, --env [env]      specify an environment\n  -t, --tool [tool]    specify a webpack devtool\n```\n\n```\nUsage: reapp-build [options]\n\n  -d, --debug  output extra information for debugging\n  --no-assets  only build the js\n  --no-js      only build the assets\n```\n\n### Running & Building\n\nUse `reapp run` to serve your app locally, by default at [localhost:3010](http://localhost:3010).\nThe `run` command has a few options to help you out:\n\n- `reapp run -d` (debug) to output information on how it's running your app\n- `reapp run -e production` (env=production) to run your app in production mode, which is much faster\n- `reapp run -t source-map` (tool=source-map) to have full sourcemaps rather than the \"eval\" style sourcemaps we default to\n\nIf you run into a blank page after `reapp run`, try these commands.\n```\nnpm install --save react@0.13.2\nnpm install --save reapp-ui@0.12.54\nnpm install --save reapp-kit@1.2.15\n```\n\nYou also have the same flags available to build commands.\n\nThe `build` command is used once you're ready to deploy your app (to either the web or to cordova). For now,\nwe provide two types of builds:\n\n- `reapp build` by default sets the platform to **web**, for mobile sites.\n- `reapp build ios` targets Cordova ios devices.\n\nWhen you run `reapp build` you'll notice a new `./build` folder where your assets have been copied to.\nFor example, a `reapp build ios` will build to `./build/ios`. `reapp build` goes to `./build/web`.\n\nIt will also copy your assets for you. Here's an example of running `reapp build ios`:\n\n```\n./assets/shared/* => ./build/ios\n./assets/ios/* => ./build/ios\n./assets/ios/index.html => (Webpack inserts CSS/JS references) => ./build/ios/index.html\n```\n\nThis allows a lot of flexibility. You can share assets between builds, or have\nexclusive ones for a platform. Leave an asset in the base `./assets` folder\nand it won't be copied at all, but you can still `require()` it within your app.\n\nA good case for shared assets is your Cordova config.xml. Leave it in `./assets/shared`\nand it'll output for all your builds.\n\n[See more on custom builds](#custom-builds).\n\n### Structure of your applications\n\nYou can see the exact app that's generated through the [reapp-starter repo](https://github.com/reapp/reapp-starter).\n\n```\n/app\n  /components\n  /theme\n  app.js\n/assets\n  /web\n    index.html\n  /ios\n    index.html\n  /shared\n/config (optional)\n```\n\nBy default `/app/app.js` is your entry point. Everything in the app folder should be pretty\nself-explanatory. `/assets` contains static assets as explained in the [Running & Building](#running-and-building)\nsection. In general, you'll place your assets into `shared` or the specific platform\nsubdirectory.\n\nThe `/theme` folder is [reapp-ui](https://github.com/reapp/reapp-ui) specific. You can\nfind docs for it in the repo, but it also should be pretty easy to understand.\n\nIf you place a `build.webpack.js` or `run.webpack.js` in your `/config` dir, the reapp CLI\nwill use these configs when you run `reapp build` or `reapp run`.\nTo see some example configs, check out the files in the `./config` folder of the\n[reapp-pack repo](https://github.com/reapp/reapp-pack).\n\n### Your First App\n\nThere are a number of pieces we've included in a reapp. Let's explore a few\nof them in order of when you'll encounter them in your codebase. Think of this\nas a tour of a reapp app, giving an introduction to packages as we encounter them.\n\nYou can check out the [reapp project on Github](https://github.com/reapp) for more info.\n\nYou also have an entry point defined as `app/app.js`. This starts your app.\nThe most important part here is the routing. Lets start there.\n\n#### ./app/app.js\n\nLoad all your stuff. From theme to store to actions. Then, you run your routes,\nwhich are done using reapp-routes. This simplifies routing down to the bare minimum.\nNote that your routes will automatically look into `./components` to find files,\nbased on the name you give them.\n\nAn example:\n```js\nroutes(require,\n  route('home', '/', route('sub')))\n\n  // ./components/Home.jsx\n  // ./components/home/Sub.jsx\n```\n\nThis is the reapp-routes syntax. The key to note here is the `require` that\nis passed to the routes function at the top level, which is how it dynamically\nrequires your components based on the route tree.\n\n#### ./app/theme ([reapp-ui](https://github.com/reapp/reapp-ui) UI Kit)\n\nThe next theme we require is the `./app/theme/index.js`. Themes are loaded by calling\n`Reapp.theme()` and passing in an object with styles, constants and animations.\nYou can just use the included iOS theme, but we've included the `./app/theme` folder\nas an example of how you can easily customize themes.\n\nFor more documentation on themes, [read here](http://reapp.io/docs-themes.html).\n\n#### ./app/components/Home.jsx\n\nThis is the first React component in your structure, as defined in your routes.\nNotice when we export it, we wrap it with `Reapp`. This helper function will provide\nthe `this.context` variables that you've set up when you loaded your theme, actions,\nand store (if you decide to use all of those). It will also pass props to your Home route,\n`this.props.child` and `this.props.viewListProps`. You can see that they correspond\nto any children routes, and to properties needed to be on a `<ViewList>` that will handle\nthose routes.\n\n#### More reading\n\n- [reapp-ui](https://github.com/reapp/reapp-ui)\n- [reapp-platform](https://github.com/reapp/reapp-platform)\n- [reapp-component](https://github.com/reapp/reapp-component)\n\n### Custom builds\n\nReapp-pack takes in an object that lets you configure your builds. It provides you with\n[default config files](https://github.com/reapp/reapp-pack/tree/master/config), but you\ncan override them if you need custom Webpack loaders.\n\nThe build system generates your Webpack config using [reapp-pack](https://github.com/reapp/reapp-pack).\n\n- `reapp run` looks for: `./config/run.config.js`\n- `reapp build` looks for: `./config/build.config.js`\n- `reapp build [platform]` looks for: `./config/build.[platform].config.js`\n\nPlace a config in your `./config/[run/build].[platform].config.js` to override the default.\n\nHere's an example config:\n\n```js\nmodule.exports = {\n  entry: './app/app.js',\n  devtool: 'none',\n  target: 'web',\n  env: 'production',\n  linkModules: true,\n  debug: true,\n  separateStylesheet: true,\n  minify: true\n};\n```\n\nYou can also provide the following options that are passed to Webpack:\n\n```\n  loaders: array\n  modulesDirectories: array\n  prefetch: array\n```\n\n### Why Reapp?\n\nReapp wasn't built purposefully to be a framework. Instead, it started\nas a UI kit. From that kit, two apps were built. While this isn't a lot,\nit was enough to see repetition between the two that could be extracted.\n\nFrom those two apps, over a period of months, we extracted a set of\npackages, ensuring to keep each of them completely independent. It was\nan experiment in seeing if a framework was necessary.\n\nWhat we found was this: if you can subscribe to a certain file structure,\nyou can avoid the framework. With that file structure, we can provide\nhelpers via a CLI. Bootstrap your app in one command and you have a mature\nbuild system built in, without having to do anything.\n\nReally, Reapp is simple. You could even just use the UI kit and roll your own\napp. We just went through that headache, and decided to make it easier to\navoid it if you like how we make apps.\n\n### Example Apps\n\nWe have two example apps you can check the source to:\n\n - [Kitchen Sink](https://github.com/reapp/kitchen-sink) ([demo](http://kitchen.reapp.io))\n - [Hacker News Reader](https://github.com/reapp/hacker-news-app) ([demo](http://hn.reapp.io))\n\n### Development Environment\n\nSublime users, [here's a guide](https://medium.com/@dan_abramov/lint-like-it-s-2015-6987d44c5b48)\nfor getting syntax highlighting, snippets and linting that works with babel.\n\n### Other reapp packages\n- [reapp-kit](https://github.com/reapp/reapp-kit) (Combines Reapp packages together)\n- [reapp-routes](https://github.com/reapp/reapp-routes) (Routes generator)\n- [reapp-ui](https://github.com/reapp/reapp-ui) (UI Kit)\n- [reapp](https://github.com/reapp/reapp-ui) (CLI)\n- [reapp-platform](https://github.com/reapp/reapp-platform) (Base utils)\n- [reapp-component](https://github.com/reapp/reapp-component) (DI and Factories)\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 2.1015625,
          "content": "## 0.8\n\nReapp 0.8 doesn't require any change in your app structure. It does change how builds\nwork though. First, asset copying order is different.\n\nNow, when you run `reapp build ios`:\n\n```\n./assets/shared/* => ./build/ios\n./assets/ios/* => ./build/ios\n./assets/ios/index.html => (Webpack inserts CSS/JS references) => ./build/ios/index.html\n```\n\nThis lets you keep, for example, a cordova config.xml inside your `./assets/shared` and\nhave it copied to your build dir automatically.\n\nThe second change is where it build to. Before, no matter the platform `reapp build` or\n`reapp build [platform]` all build to the same directory `./assets/public`. This was\npoor design. Now, we build to the subdirectory of your app, so:\n\n```\nreapp build => ./build/web\nreapp build ios => ./build/ios\n```\n\nThis enables parallel builds! So if you want to build your ios and web apps at the same\ntime you can. We need to test it but the change in structure enables this, in practice.\n\n## 0.7\n\n#### In general, if you haven't customized your app much, it may be better to create a new reapp folder and copy in your changes\n\nFor CLI 0.7 we've added iOS builds and layouts. If you want to read on multiple builds,check out  [multiple build files](https://github.com/reapp/reapp#custom-builds).\n\n#### new assets folder\nYour assets folder structure has changed for the better. The new structure:\n\n```\n/assets\n  /ios\n  /web\n  /shared\n  ...\n```\n\n`reapp build` now can take a platform, like so: `reapp build [platform]`.\n\nWhen your run `reapp build` it defaults the platform to `web`. Running a build will\ncopy your assets to `./build/public` in a specific order. By example:\n\n`reapp build`\n  - Copies index.html from assets/**web**\n  - Copies assets/shared to build/public\n  - Copies assets/**web** to build/public\n\n`reapp build ios`\n  - Copies index.html from assets/**ios**\n  - Copies assets/shared to build/public\n  - Copies assets/**ios** to build/public\n\n**The only big change you need is to move your layout.html to assets/web/index.html. But we've\nmade some improvements to the layouts, so we recommend creating a new reapp project and\ncopying over the /assets folder.**"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.005859375,
          "content": "{\n  \"name\": \"reapp\",\n  \"version\": \"0.8.28\",\n  \"description\": \"a server, build system, and helpers for react apps\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"node server.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/reapp/reapp.git\"\n  },\n  \"author\": \"Nate Wienert\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/reapp/reapp/issues\"\n  },\n  \"homepage\": \"https://github.com/reapp/reapp\",\n  \"dependencies\": {\n    \"colors\": \"~1.0.3\",\n    \"commander\": \"^2.6.0\",\n    \"es6-promise\": \"^2.0.1\",\n    \"mkdirp\": \"^0.5.0\",\n    \"ncp\": \"~1.0.1\",\n    \"reapp-object-assign\": \"^1.0.0\",\n    \"reapp-pack\": \"^1.3.19\",\n    \"reapp-server\": \"^1.0.1\",\n    \"replace\": \"~0.3.0\",\n    \"rimraf\": \"~2.2.8\"\n  },\n  \"bin\": {\n    \"reapp\": \"./bin/reapp\",\n    \"reapp-new\": \"./bin/reapp-new\",\n    \"reapp-build\": \"./bin/reapp-build\",\n    \"reapp-run\": \"./bin/reapp-run\",\n    \"reapp-debug\": \"./bin/reapp-debug\",\n    \"reapp-config\": \"./bin/reapp-config\"\n  }\n}\n"
        }
      ]
    }
  ]
}