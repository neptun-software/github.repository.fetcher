{
  "metadata": {
    "timestamp": 1736561505026,
    "page": 22,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "krakenjs/kraken-js",
      "stars": 4939,
      "defaultBranch": "v2.x",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.322265625,
          "content": "*.seed\n*.log\n*.csv\n*.dat\n*.out\n*.pid\n*.gz\n*.orig\n\nwork\nbuild\npids\nlogs\nresults\ncoverage\nlib-cov\nhtml-report\nxunit.xml\nnode_modules\nnpm-debug.log\npackage-lock.json\n\n.project\n.vscode\n.idea\n.settings\n.iml\n*.sublime-workspace\n*.sublime-project\n\n.DS_Store*\nehthumbs.db\nIcon?\nThumbs.db\n.AppleDouble\n.LSOverride\n.Spotlight-V100\n.Trashes\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 1.2744140625,
          "content": "{\n    \"passfail\": false,\n    \"maxerr\": 100,\n\n    \"browser\": false,\n    \"node\": true,\n    \"rhino\": false,\n    \"couch\": false,\n    \"wsh\": false,\n\n    \"esversion\": 6,\n\n    \"jquery\": false,\n    \"prototypejs\": false,\n    \"mootools\": false,\n    \"dojo\": false,\n\n    \"debug\": false,\n    \"devel\": false,\n\n    \"strict\": true,\n    \"globalstrict\": true,\n\n    \"asi\": false,\n    \"laxbreak\": false,\n    \"bitwise\": false,\n    \"boss\": true,\n    \"curly\": true,\n    \"eqeqeq\": true,\n    \"eqnull\": false,\n    \"evil\": false,\n    \"expr\": true,\n    \"forin\": false,\n    \"immed\": true,\n    \"latedef\": false,\n    \"loopfunc\": false,\n    \"noarg\": false,\n    \"regexp\": false,\n    \"regexdash\": false,\n    \"scripturl\": false,\n    \"shadow\": false,\n    \"supernew\": false,\n    \"undef\": true,\n    \"validthis\": false,\n    \"smarttabs\": true,\n    \"proto\": false,\n    \"onecase\": false,\n    \"nonstandard\": false,\n    \"multistr\": false,\n    \"laxcomma\": false,\n    \"lastsemic\": false,\n    \"iterator\": false,\n    \"funcscope\": false,\n    \"esnext\": false,\n\n    \"newcap\": false,\n    \"noempty\": false,\n    \"nonew\": false,\n    \"nomen\": false,\n    \"onevar\": false,\n    \"plusplus\": false,\n    \"sub\": false,\n    \"trailing\": false,\n    \"indent\": 4,\n    \"white\": true,\n\n    \"maxparams\": 5,\n    \"maxdepth\": 3,\n    \"maxstatements\": 20,\n    \"maxcomplexity\": 8\n}\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.4833984375,
          "content": "# Automatically ignored per:\n# https://www.npmjs.org/doc/developers.html#Keeping-files-out-of-your-package\n#\n# .*.swp\n# ._*\n# .DS_Store\n# .git\n# .hg\n# .lock-wscript\n# .svn\n# .wafpickle-*\n# CVS\n# npm-debug.log\n# node_modules\n\n*.seed\n*.log\n*.csv\n*.dat\n*.out\n*.pid\n*.gz\n*.orig\n\nwork\nbuild\ntest\npids\nlogs\nresults\ncoverage\nlib-cov\nhtml-report\nxunit.xml\n\n.project\n.idea\n.settings\n.iml\n*.sublime-workspace\n*.sublime-project\n\nehthumbs.db\nIcon?\nThumbs.db\n.AppleDouble\n.LSOverride\n.Spotlight-V100\n.Trashes"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2998046875,
          "content": "language: node_js\nnode_js:\n  - \"12\"\n  - \"14\"\n  - \"16\"\nscript:\n  - \"npm run lint\"\n  - \"npm run cover\"\nsudo: false\nnotifications:\n  webhooks:\n      urls:\n        - https://www.travisbuddy.com/\n      on_success: never\n      on_failure: always\n      on_start: never\n      on_cancel: never\n      on_error: never\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.3232421875,
          "content": "# unreleased\n\nkraken-js v2.5.0\nReleased 2023-08-16\n\n## Changes\n\n- Options can now be passed directly to confit via `{ confit: {} }`. This can be used to mitigate issue #470. [Pull Request](https://github.com/krakenjs/kraken-js/pull/528)\n\n# Release Notes\n\nkraken-js v2.4.0\nReleased: 2021-11-23\n\n## Changes\n\n- Include process.cwd while resolving module for view engine. It is possible that kraken-js module is deployed outside application root. [Pull Request](https://github.com/krakenjs/kraken-js/pull/526)\n- Use confit@3x [Pull Request](https://github.com/krakenjs/kraken-js/pull/527)\n\nkraken-js v2.3.0\nReleased: 2020-02-04\n\n## Changes\n\n- deprecate domains\n- add onKrakenMount property; removed node v4, v6 and added node 10 in travis CI config (#514)\n\n---\n\nkraken-js v2.2.0\nReleased: 2017-23-10\n\n## Changes\n\n  * **Core:**\n\n    1. Allow config path to be configurable\n\n      [Implementation](https://github.com/krakenjs/kraken-js/commit/6a643e5c740a21740a2adfd81a12ea0518755db7), [Pull Request](https://github.com/krakenjs/kraken-js/pull/473)\n\n    2. Updates dependencies\n\n      [Pull Request](https://github.com/krakenjs/kraken-js/pull/481)\n\n    3. Updates `lusca` dependency to 1.5.1\n\n      [Pull Request](https://github.com/krakenjs/kraken-js/pull/493)\n\n    4. Enables Lusca XSS protection by default\n\n      [Pull Request](https://github.com/krakenjs/kraken-js/pull/477)\n\n---\n\nkraken-js v2.1.0\nReleased: 2016-01-04\n\n## Changes\n\n  * **Core:**\n\n    1. Add more robust error handler for both inside and outside of the middleware continuation\n\n      [Implementation](https://github.com/krakenjs/kraken-js/compare/v2.0.1...v2.1.0), [Pull Request](https://github.com/krakenjs/kraken-js/pull/435)\n\n---\n\nkraken-js v2.0.1\nReleased: 2015-12-04\n\n## Changes\n\n  * **Core:**\n\n    1. Set morgan option to log request even if server crashes\n\n      [Implementation](https://github.com/krakenjs/kraken-js/commit/8febdea2423ce76608cc5167575f69a68eb97787), [Pull Request](https://github.com/krakenjs/kraken-js/pull/430)\n\n---\n\nkraken-js v2.0.0\nReleased: 2015-10-07\n\n## Bug Fixes\n\n  * **Core:**\n\n    1. Fix occasional double close error on shutdown\n\n      [Issue](https://github.com/krakenjs/kraken-js/issues/402), [Pull Request](https://github.com/krakenjs/kraken-js/pull/419)\n\n## Changes\n\n  * **Core:**\n\n    1. Add `shutdownHeaders` option to shutdown middleware\n\n      [Pull Request](https://github.com/krakenjs/kraken-js/pull/373)\n\n    2. Print deprecation warnings for the included 404 and 500 handlers.\n\n      [Implementation](https://github.com/krakenjs/kraken-js/commit/a6b3fae2ba25703573c317143ad4d2a1a9c3a937), [Issue](https://github.com/krakenjs/kraken-js/issues/359), [Pull Request](https://github.com/krakenjs/kraken-js/pull/361)\n\n## Breaking Changes\n\n  * **Dependency:** meddleware (v1 -> v3)\n\n    1. Call registered middleware factories with a context set to the method owner. This helps in specific cases (e.g., Passport).  \n    **Previously:** The factory was called with a context of `null`.\n\n      [Implementation](https://github.com/krakenjs/meddleware/blob/ffb855528d1ceafed12b9c185d093561fd6bb7e1/index.js#L97), [Issue](https://github.com/krakenjs/meddleware/issues/26), [Pull Request](https://github.com/krakenjs/meddleware/pull/29)\n\n    1. Default middleware `enabled` to `true`. I.e., omitting the [`enabled` option](https://github.com/krakenjs/meddleware/blob/01c2c8fbeade81eac8ea295ae30c5bcc1ed2d446/README.md#options) will still enable the middleware.  \n      **Previously:** middleware was defaulted `enabled` to `false`.\n\n      [Implementation](https://github.com/krakenjs/meddleware/blob/01c2c8fbeade81eac8ea295ae30c5bcc1ed2d446/index.js#L171-L173), [Issue](https://github.com/krakenjs/meddleware/issues/13), [Pull Request](https://github.com/krakenjs/meddleware/pull/17)\n\n    2. Remove the ability to toggle the `enabled` state of a middleware at arbitrary points during runtime. Now, a middleware that is not `enabled`—by explicitly setting `enabled` to `false`, given breaking change No.1—will not be `require`d (i.e., not parsed), and cannot be enabled at a later time.  \n      **Previously:** middleware could be toggled. Was by design, but largely unused and caused unanticipated behavior.\n\n      [Issue](https://github.com/krakenjs/meddleware/issues/20), [Pull Request](https://github.com/krakenjs/meddleware/pull/25)\n\n  * **Dependency:** confit (v1 -> v2)\n\n    1. Resolve the `import` shortstop handler after merging `config.json`, `[env].json`, and before the other shortstop handlers are resolved.  \n    **Previously:** `import` handler resolved only once, before the rest of the shortstop handlers.\n\n      [implementation 1](https://github.com/krakenjs/confit/blob/59feac850a6dfb86ac524f4e14736f167ab215c1/lib/factory.js#L35-L44), [implementation 2](https://github.com/krakenjs/confit/blob/59feac850a6dfb86ac524f4e14736f167ab215c1/lib/factory.js#L61), [Issue](https://github.com/krakenjs/confit/issues/26), [Pull Request](https://github.com/krakenjs/confit/pull/35)\n\n      ###### New Behavior:\n\n      >``` js\n      >{ \"main\": \"import:main.json\" }                              // config/config.json\n      >{ \"key\": \"value\", \"otherKey\": \"otherValue\" }                // config/main.json\n      >{ \"main\": { \"key\": \"devValue\" } }                           // config/dev.json\n      >{ \"main\": { \"key\": \"devValue\", \"otherKey\": \"otherValue\" } } // result\n      >```\n\n    2. Change source priority—from highest to lowest (higher overrides lower)— to: command line arguments, environment variables, `[env].json`, `config.json`, [convenience](https://github.com/krakenjs/confit/blob/59feac850a6dfb86ac524f4e14736f167ab215c1/lib/provider.js#L57-L80) (environment normalization and `env:*` keys).  \n    **Previously:** source priority order, from highest to lowest, was `[env].json`, `config.json`, convenience, environment variables, command line arguments.\n\n      [Implementation](https://github.com/krakenjs/confit/blob/59feac850a6dfb86ac524f4e14736f167ab215c1/lib/factory.js#L33-L46), [Pull Request](https://github.com/krakenjs/confit/pull/34)\n\n      ###### New Behavior\n\n      >``` js\n      >// config/config.json\n      >{ \"KEY\": \"fromConfig\", \"OTHER_KEY\": \"fromConfig\", \"THIRD_KEY\": \"fromConfig\" }\n      >```\n      >\n      >``` sh\n      >OTHER_KEY=fromEnv THIRD_KEY=fromEnv node myApp.js --THIRD_KEY=fromArgv\n      >```\n      >\n      >``` js\n      >// result\n      >{ \"KEY\": \"fromConfig\", \"OTHER_KEY\": \"fromEnv\", \"THIRD_KEY\": \"fromArgv\" }\n      >```\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.9404296875,
          "content": "# Contributing To kraken-js\n\nWe are always looking for ways to make our modules better. Adding features and fixing bugs allows everyone who depends\non this code to create better, more stable applications.\nFeel free to raise a pull request to us. Our team would review your proposed modifications and, if appropriate, merge\nyour changes into our code. Ideas and other comments are also welcome.\n\n## Getting Started\n1. Create your own [fork](https://help.github.com/articles/fork-a-repo) of this [repository](../../fork).\n```bash\n# Clone it\n$ git clone git@github.com:me/kraken-js.git\n\n# Change directory\n$ cd kraken-js\n\n# Add the upstream repo\n$ git remote add upstream git://github.com/paypal/kraken-js.git\n\n# Get the latest upstream changes\n$ git pull upstream\n\n# Install dependencies\n$ npm install\n\n# Run scripts to verify installation\n$ npm test\n$ npm run-script lint\n$ npm run-script cover\n```\n\n## Making Changes\n1. Make sure that your changes adhere to the current coding conventions used throughout the project, indentation, accurate comments, etc.\n2. Lint your code regularly and ensure it passes prior to submitting a PR:\n`$ npm run lint`.\n3. Ensure existing tests pass (`$ npm test`) and include test cases which fail without your change and succeed with it.\n\n## Submitting Changes\n1. Ensure that no errors are generated by JSLint, CSSLint or any other tools that you use for debugging your code.\n2. Commit your changes in logical chunks, i.e. keep your changes small per single commit.\n3. Locally merge (or rebase) the upstream branch into your topic branch: `$ git pull upstream && git merge`.\n4. Push your topic branch up to your fork: `$ git push origin <topic-branch-name>`.\n5. Open a [Pull Request](https://help.github.com/articles/using-pull-requests) with a clear title and description.\n\nIf you have any questions about contributing, please feel free to contact us by posting your questions on GitHub.\n\nCopyright 2017 PayPal under [the Apache 2.0 license](LICENSE.txt).\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.6796875,
          "content": "/*───────────────────────────────────────────────────────────────────────────*\\\n│  Copyright 2017 PayPal                                                      │\n│                                                                             │\n│hh ,'\"\"`.                                                                    │\n│  / _  _ \\  Licensed under the Apache License, Version 2.0 (the \"License\");  │\n│  |(@)(@)|  you may not use this file except in compliance with the License. │\n│  )  __  (  You may obtain a copy of the License at                          │\n│ /,'))((`.\\                                                                  │\n│(( ((  )) ))    http://www.apache.org/licenses/LICENSE-2.0                   │\n│ `\\ `)(' /'                                                                  │\n│                                                                             │\n│   Unless required by applicable law or agreed to in writing, software       │\n│   distributed under the License is distributed on an \"AS IS\" BASIS,         │\n│   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  │\n│   See the License for the specific language governing permissions and       │\n│   limitations under the License.                                            │\n\\*───────────────────────────────────────────────────────────────────────────*/\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.8662109375,
          "content": "![kraken-js](public/krakenLogo.png)\n\n# kraken.js\n\n[![Build Status](https://travis-ci.org/krakenjs/kraken-js.svg?branch=v1.0.x)](https://travis-ci.org/krakenjs/kraken-js) [![Greenkeeper badge](https://badges.greenkeeper.io/krakenjs/kraken-js.svg)](https://greenkeeper.io/)  \n\nKraken builds upon [express](http://expressjs.com/) and enables environment-aware, dynamic configuration, advanced middleware capabilities, security, and app lifecycle events.\nFor more information and examples check out [krakenjs.com](http://krakenjs.com)\n\nTable of Contents\n=================\n\n* [Basic Usage](#basic-usage)\n* [API](#api)\n  * [Options](#options)\n* [Config Protocols](#config-protocols)\n* [Features](#features)\n  * [Configuration](#configuration)\n    * [Environment-aware](#environment-aware)\n  * [Middleware](#middleware)\n    * [Included Middleware](#included-middleware)\n    * [Extending Default Middleware](#extending-default-middleware)\n  * [Application Security](#application-security)\n  * [Lifecycle Events](#lifecycle-events)\n  * [Configuration-based express Settings](#configuration-based-express-settings)\n  * [View Engine Configuration](#view-engine-configuration)\n* [Tests](#tests)\n* [Coverage](#coverage)\n* [Reading app configs from within the kraken app](#reading-app-configs-from-within-the-kraken-app)\n\n## Basic Usage\n\n```javascript\n'use strict';\n\nvar express = require('express'),\n    kraken = require('kraken-js');\n\nvar app = express();\napp.use(kraken());\napp.listen(8000);\n```\n\n\n## API\n\n`kraken([options])`\n\nkraken-js is used just like any normal middleware, however it does more than just return a function; it configures a\ncomplete express 4 application. See below for a list of features, but to get started just use it like middleware.\n\n```javascript\napp.use(kraken());\n// or to specify a mountpath for your application:\n// app.use('/mypath', kraken());\n\n// Note: mountpaths can also be configured using the\n// `express:mountpath` config setting, but that setting\n// will be overridden if specified in code.\n```\n\n### Options\nPass the following options to kraken via a config object such as this:\n\n```javascript\nvar options = {\n    onconfig: function (config, callback) {\n        // do stuff\n        callback(null, config);\n    }\n};\n\n// ...\n\napp.use(kraken(options));\n```\nNote: All kraken-js configuration settings are optional.\n\n#### `basedir` (*String*, optional)\nThe working directory for kraken to use. kraken loads configuration files,\nroutes, and registers middleware so this directory is the path against all relative paths are resolved. The default value\nis the directory of the file that uses kraken, which is generally `index.js` (or `server.js`).\n\n#### `onconfig` (*Function*, optional)\nProvides an asynchronous hook for loading additional configuration. When invoked, a\n[confit](https://github.com/krakenjs/confit) configuration object containing all loaded configuration value passed\nas the first argument, and a callback as the second. The signature of this handler is `function (config, callback)`\nand the callback is a standard error-back which accepts an error as the first argument and the config object as the\nsecond, e.g. `callback(null, config)`.\n\n#### `protocols` (*Object*, optional)\nProtocol handler implementations for use when processing configuration. For more information on protocols\nsee [shortstop](https://github.com/krakenjs/shortstop) and [shortstop-handlers](https://github.com/krakenjs/shortstop-handlers).\nBy default, kraken comes with a set of shortstop protocols which are described in the \"Config Protocols\" section below,\nbut you can add your own by providing an object with the protocol names as the keys and their implementations as\nproperties, for example:\n```javascript\nvar options = {\n    protocols: {\n        file: function file(value, callback) {\n            fs.readFile(value, 'utf8', callback);\n        }\n    }\n};\n```\n\n#### `onKrakenMount` (*Function*, optional)\nProvides a synchronous hook which executes once kraken mounts. It takes an express `app` instance as the first argument, and `options` as the second. The signature of this handler is `function (app, options)`.\n\n#### `uncaughtException` (*Function*, optional)\nHandler for `uncaughtException` errors outside of the middleware chain. See the [endgame](https://github.com/krakenjs/endgame) module for defaults.\n\nFor uncaught errors in the middleware chain, see `shutdown` middleware instead.\n\n#### `confit` (*Object*, optional)\nIn rare cases, it may be useful to pass options directly to the confit module used within [lib/config.js](lib/config.js#71).\nFor example, if [confit/shortstop is conflicting with environment variables](https://github.com/krakenjs/kraken-js/issues/470), you can explicitly ignore those environment variables:\n```javascript\nvar options = {\n    confit: {\n        envignore: ['troublesome_environment_variable']\n    }\n};\n```\n\n## Config Protocols\nkraken comes with the following shortstop protocol handlers by default:\n#### `import:`\nMerge the contents of the specified file into configuration under a given key.\n```json\n{\n    \"foo\": \"import:./myjsonfile\"\n}\n```\n\n#### `config:`\nReplace with the value at a given key. Note that the keys in this case are dot (.) delimited.\n```json\n{\n    \"foo\": {\n        \"bar\": true\n    },\n    \"foobar\": \"config:foo.bar\"\n}\n```\n\n#### `path:`\nThe path handler is documented in the [shortstop-handlers](https://github.com/krakenjs/shortstop-handlers#handlerspathbasedir) repo.\n\n#### `file:`\nThe file handler is documented in the [shortstop-handlers](https://github.com/krakenjs/shortstop-handlers#handlersfilebasedir-options) repo.\n\n#### `base64:`\nThe base64 handler is documented in the [shortstop-handlers](https://github.com/krakenjs/shortstop-handlers#handlersbase64) repo.\n\n#### `env:`\nThe env handler is documented in the [shortstop-handlers](https://github.com/krakenjs/shortstop-handlers#handlersenv) repo.\n\n#### `require:`\nThe require handler is documented in the [shortstop-handlers](https://github.com/krakenjs/shortstop-handlers#handlersrequirebasedir) repo.\n\n#### `exec:`\nThe exec handler is documented in the [shortstop-handlers](https://github.com/krakenjs/shortstop-handlers#handlersexecbasedir) repo.\n\n#### `glob:`\nThe glob handler is documented in the [shortstop-handlers](https://github.com/krakenjs/shortstop-handlers#handlersglobbasediroptions) repo.\n\n#### `resolve:`\nThe resolve handler is documented in the [shortstop-resolve](https://github.com/jasisk/shortstop-resolve) repo.\n\n\n\n\n## Features\n\n\n### Configuration\n\n\n#### Environment-aware\n\nUsing environment suffixes, configuration files are applied and overridden according to the current environment as set\nby `NODE_ENV`. The application looks for a `./config` directory relative to the basedir and looks for `config.json` as the baseline config specification. JSON files matching the current env are processed and loaded. Additionally, JSON configuration files may contain comments.\n\nValid `NODE_ENV` values are `undefined` or `dev[elopment]` (uses `development.json`), `test[ing]` (uses `test.json`), `stag[e|ing]` (uses `staging.json`), `prod[uction]` (uses `config.json`). Simply add a config file with the name, to have it read only in that environment, e.g. `config/development.json`.\n\n\n### Middleware\n\nMuch like configuration, you shouldn't need to write a lot of code to determine what's in your middleware chain. [meddleware](https://github.com/paypal/meddleware) is used internally to read,\nresolve, and register middleware with your express application. You can either specify the middleware in your `config.json` or `{environment}.json`, (or) import it from a separate json file using the import protocol mentioned above.\n\n#### Included Middleware\nKraken comes with common middleware already included in its `config.json` file. The following is a list of the included middleware and their default configurations which can be overridden in your app's configuration:\n* `\"shutdown\"` - internal middleware which handles graceful shutdowns in production environments\n  - Priority - 0\n  - Enabled - `true` if *not* in a development environment\n  - Module - `\"kraken-js/middleware/shutdown\"`\n    - Arguments (*Array*)\n      - *Object*\n        - `\"timeout\"` - milliseconds (default: `30000`)\n        - `\"template\"` - template to render (default: `null`)\n        - `\"shutdownHeaders\"` - custom headers to write while still disconnecting.\n        - `\"uncaughtException\"` - custom handler - `function (error, req, res, next)` - for uncaught errors. Default behavior is to log the error and then trigger shutdown.\n* `\"compress\"` - adds compression to server responses\n  - Priority - 10\n  - Enabled - `false` (disabled in all environments by default)\n  - Module - `\"compression\"` ([npm](https://www.npmjs.org/package/compression))\n* `\"favicon\"` - serves the site's favicon\n  - Priority - 30\n  - Module - `\"serve-favicon\"` ([npm](https://www.npmjs.org/package/serve-favicon))\n    - Arguments (*Array*)\n      - *String* - local path to the favicon file (default: `\"path:./public/favicon.ico\"`)\n* `\"static\"` - serves static files from a specific folder\n  - Priority - 40\n  - Module - `\"serve-static\"` ([npm](https://www.npmjs.org/package/serve-static))\n    - Arguments (*Array*)\n      - *String* - local path to serve static files from (default: `\"path:./public\"`)\n* `\"logger\"` - logs requests and responses\n  - Priority - 50\n  - Module - `\"morgan\"` ([npm](https://www.npmjs.org/package/morgan))\n    - Arguments (*Array*)\n      - *String* - log format type (default: `\"combined\"`)\n* `\"json\"` - parses JSON request bodies\n  - Priority - 60\n  - Module - `\"body-parser\"` ([npm](https://www.npmjs.org/package/body-parser))\n    - Method - `\"json\"`\n* `\"urlencoded\"` - parses URL Encoded request bodies\n  - Priority - 70\n  - Module - `\"body-parser\"` ([npm](https://www.npmjs.org/package/body-parser))\n    - Method - `\"urlencoded\"`\n    - Arguments (*Array*)\n      - *Object*\n        - `\"extended\"` (*Boolean*) - parse extended syntax with the [qs](https://www.npmjs.org/package/qs) module (default: `true`)\n* `\"multipart\"` - parses multipart FORM bodies\n  - Priority - 80\n  - Module - `\"kraken-js/middleware/multipart\"` (delegates to [formidable](https://www.npmjs.org/package/formidable))\n* `\"cookieParser\"` - parses cookies in request headers\n  - Priority - 90\n  - Module - `\"cookie-parser\"` ([npm](https://www.npmjs.org/package/cookie-parser))\n    - Arguments (*Array*)\n      - *String* - secret used to sign cookies (default: `\"keyboard cat\"`)\n* `\"session\"` - maintains session state\n  - Priority - 100\n  - Module - `\"express-session\"` ([npm](https://www.npmjs.org/package/express-session))\n    - Arguments (*Array*)\n      - *Object*\n        - `\"key\"` (*String*) - cookie name (default: `\"connect.sid\"`)\n        - `\"secret\"` (*String*) - secret used to sign session cookie (default: `\"keyboard cat\"`)\n        - `\"cookie\"` (*Object*) - describing options for the session cookie\n          - `\"path\"` (*String*) - base path to verify cookie (default: `\"/\"`)\n          - `\"httpOnly\"` (*Boolean*) - value indicating inaccessibility of cookie in the browser (default: `true`)\n          - `\"maxAge\"` (*Number*) - expiration of the session cookie (default: `null`)\n        - `\"resave\"` (*Boolean*) - value indicating whether sessions should be saved even if unmodified (default: `true`)\n        - `\"saveUninitialized\"` (*Boolean*) - value indicating whether to save uninitialized sessions (default: `true`)\n        - `\"proxy\"` (*Boolean*) - value indicating whether to trust the reverse proxy (default: `null`, inherit from `express`)\n* `\"appsec\"` - secures the application against common vulnerabilities (see Application Security below)\n  - Priority - 110\n  - Module - `\"lusca\"` ([github](https://github.com/paypal/lusca))\n    - Arguments (*Array*)\n      - *Object*\n        - `\"csrf\"` (*Boolean*|*Object*) - value indicating whether to require CSRF tokens for non GET, HEAD, or OPTIONS requests, or an options object to configure CSRF protection (default: `true`)\n        - `\"xframe\"` (*String*) - value for the `X-Frame-Options` header (default: `\"SAMEORIGIN\"`)\n        - `\"p3p\"` (*String*|*Boolean*) - the Compact Privacy Policy value or `false` if not used (default: `false`)\n        - `\"csp\"` (*Object*|*Boolean*) - options configuring Content Security Policy headers or `false` if not used (default: `false`)\n* `\"router\"` - routes traffic to the applicable controller\n  - Priority - 120\n  - Module - `\"express-enrouten\"` ([npm](https://www.npmjs.org/package/express-enrouten))\n    - Arguments (*Array*)\n      - *Object*\n        - `\"index\"` (*String*) - path to the single file to load (default: `\"path:./routes\"`)\n\nAdditional notes:\n- The session middleware defaults to using the in-memory store. This is **not** recommended for production applications and the configuration should be updated to use a shared resource (such as Redis or Memcached) for session storage.\n- You can change the routes which are affected by the middleware by providing a top-level option of `route`. In express deployments, it is common to re-route where static files are served which can be accomplished like so:\n\n```json\n// include this in your own config.json and this will merge with the Kraken defaults\n// NB: if you use kraken-devtools you must re-route that as well in development.json!\n{\n    \"static\": {\n        \"route\": \"/static\"\n    }\n}\n```\n\n#### Extending Default Middleware\nIn any non-trivial Kraken deployment you will likely need to extend the included middleware. Common middleware which need extension include cookie parsing and session handling. In those particular cases, the secrets used should be updated:\n\n```js\n{\n    // include this in your own config.json and this will merge with the Kraken defaults\n    \"middleware\": {\n\n        \"cookieParser\": {\n            \"module\": {\n                \"arguments\": [ \"your better secret value\" ]\n            }\n        },\n\n        \"session\": {\n            \"module\": {\n                // NB: arrays like 'arguments' are not merged but rather replaced, so you must\n                //     include all required configuration options here.\n                \"arguments\": [\n                    {\n                        \"secret\": \"a much better secret\",\n                        \"cookie\": {\n                            \"path\": \"/\",\n                            \"httpOnly\": true,\n                            \"maxAge\": null\n                        },\n                        \"resave\": true,\n                        \"saveUninitialized\": true,\n                        \"proxy\": null\n                    }\n                ]\n            }\n        }\n\n    }\n}\n```\n\nAnother common update is to pass options to middleware which is configured only with the defaults, such as the compression middleware:\n\n```js\n{\n    \"middleware\": {\n        \"compress\": {\n            \"enabled\": true,    // response compression is disabled by default\n            \"module\": {\n                \"arguments\": [\n                    {\n                        // 512 byte minimum before compressing output\n                        \"threshold\": 512\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\nMore complicated examples include configuring the session middleware to use a shared resource, such as [connect-redis](https://www.npmjs.org/package/connect-redis). This requires a few extra steps, most notably creating your own middleware to handle the registration (see [totherik/redis-example](https://github.com/totherik/redis-example) for a complete example):\n\n  1. Overlay the existing session middleware in your configuration:\n\n  ```js\n  {\n      // in your config.json\n      \"middleware\": {\n          \"session\": {\n              \"module\": {\n                  // use your own module instead\n                  \"name\": \"path:./lib/middleware/redis-session\",\n                  \"arguments\": [\n                      // express-session configuration\n                      {\n                          \"secret\": \"a much better secret\",\n                          \"cookie\": {\n                              \"path\": \"/\",\n                              \"httpOnly\": true,\n                              \"maxAge\": null\n                          },\n                          \"resave\": true,\n                          \"saveUninitialized\": true,\n                          \"store\": null    // NB: this will be overlaid in our module\n                      },\n                      // connect-redis configuration\n                      {\n                          \"host\": \"localhost\",\n                          \"port\": 6379,\n                          \"prefix\": \"session:\"\n                      }\n                  ]\n              }\n          }\n      }\n  }\n  ```\n\n  2. Add your custom middleware for Kraken to configure:\n\n  ```javascript\n  // ./lib/middleware/redis-session.js\n  'use strict';\n\n  var session = require('express-session'),\n      RedisStore = require('connect-redis')(session);\n\n  /** Creates a REDIS-backed session store.\n   *\n   * @param {Object} [sessionConfig] Configuration options for express-session\n   * @param {Object} [redisConfig] Configuration options for connect-redis\n   * @returns {Object} Returns a session middleware which is backed by REDIS\n   */\n  module.exports = function (sessionConfig, redisConfig) {\n\n      // add the 'store' property to our session configuration\n      sessionConfig.store = new RedisStore(redisConfig);\n\n      // create the actual middleware\n      return session(sessionConfig);\n  };\n  ```\n\n\n### Application Security\n\nKraken uses [lusca](https://github.com/paypal/lusca) to secure your applications, so that you don't need to think about it. Techniques like CSRF, XFRAMES, and CSP are enabled automatically while others can be opted into. All are customizable through configuration.\n\n\n### Lifecycle Events\n\nKraken adds support for additional events to your express app instance:\n\n* `start` - the application has safely started and is ready to accept requests\n* `shutdown` - the application is shutting down, no longer accepting requests\n* `stop` - the http server is no longer connected or the shutdown timeout has expired\n\n\n\n### Configuration-based `express` Settings\nSince express instances are themselves config objects, the convention is to set values on the app instance for use by\nexpress internally as well as other code across the application. kraken-js allows you to configure express via JSON.\nAny properties are supported, but kraken-js defaults include:\n```js\n{\n    \"express\": {\n        \"env\": \"\", // NOTE: `env` is managed by the framework. This value will be overwritten.\n        \"x-powered-by\": false,\n        \"trust proxy\": false,\n        \"jsonp callback name\": null,\n        \"json replacer\": null,\n        \"json spaces\": 0,\n        \"case sensitive routing\": false,\n        \"strict routing\": false,\n        \"view cache\": true,\n        \"view engine\": null,\n        \"views\": \"path:./views\",\n        \"route\": \"/\"\n    }\n}\n```\n\nAdditional notes:\n- The `env` setting will be set to the environment value as derived by kraken-js, so what is put here will be overwritten\nat runtime.\n- Set the `view engine` property to the one of the `view engines` property names (see the section `View Engine Configuration`)\nto enable it for template rendering.\n- The optional `view` property is a special case in which you can set a path to a module which exports a constructor implementing\nthe view API as defined by the module `express/lib/view`. If set, kraken-js will attempt to load the specified module and\nconfigure express to use it for resolving views.\n\nFor example:\n\n```js\n{\n    \"express\": {\n        \"view\": \"path:./lib/MyCustomViewResolver\"\n    }\n}\n```\n\n\n### View Engine Configuration\nkraken-js looks to the `view engines` config property to understand how to load and initialize renderers. The value of the\n`view engines` property is an object mapping the desired file extension to engine config settings. For example:\n```js\n{\n    \"view engines\": {\n        \"jade\": {\n            \"module\": \"consolidate\"\n        },\n        \"html\": {\n            \"name\": \"ejs\",\n            \"module\": \"ejs\",\n            \"renderer\": \"renderFile\"\n        },\n        \"dust\": {\n            \"module\": \"adaro\",\n            \"renderer\": {\n                \"method\": \"dust\",\n                \"arguments\": [{\n                    \"cache\": false,\n                    \"helpers\": [\"dust-helpers-whatevermodule\"]\n                }]\n            }\n        },\n        \"js\": {\n            \"module\": \"adaro\",\n            \"renderer\": {\n                \"method\": \"js\",\n                \"arguments\": [{ \"cache\": false }]\n            }\n        }\n    }\n}\n```\n\nThe available engine configuration options are:\n\n- `module` (*String*) - This is the node module that provides the renderer implementation. The value can be the name of a\nmodule installed via npm, or it can be a module in your project referred to via file path, for example `\"module\": \"path:./lib/renderer\"`.\n- `name` (*String*, optional) - Set this if the name of the rendering engine is different from the desired file extension.\nFor example, you chose to use ejs, but want to use the \"html\" file extension for your templates. Additionally, if the\nrenderer function exported by the module is not the file extension and a \"renderer\" property is not defined, this value will be used.\n- `renderer` (*String|Object*, optional) - The renderer property allows you to explicitly identify the property or the\nfactory method exported by the module that should be used when settings the renderer. Set the value to a String to identify\nthat the renderer is exported by that name, or an object with the properties \"method\" and \"arguments\" to identify a factory method.\nFor example, using ejs you could set this property to \"renderFile\" or \"__express\" as the ejs module exports a renderer directly.\n\n## Tests\n```bash\n$ npm test\n```\n\n## Coverage\n```bash\n$ npm run-script cover && open coverage/lcov-report/index.html\n```\n\n## Reading app configs from within the kraken app\n\nThere are two different ways. You can\n\n* Read it in your `onconfig` handler as mentioned above.\n```\nfunction (config, callback) {\n    var value = config.get('<key>');\n    ...\n    ...\n    callback(null, config);\n}\n```\n* Read it off the `req` object by doing `req.app.kraken.get('<config-key>')`. So it would look like:\n```\nrouter.get('/', function (req, res) {\n    var value = req.app.kraken.get('<key>');\n    ...\n    ...\n});\n\n```\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.5869140625,
          "content": "# Security Policy\n\nWe take security very seriously and ask that you follow the following process.\n\n\n## Contact us\nIf you think you may have found a security bug we ask that you privately send the details to DL-PP-Kraken-Js@paypal.com. Please make sure to use a descriptive title in the email.\n\n\n## Expectations\nWe will generally get back to you within **24 hours**, but a more detailed response may take up to **48 hours**. If you feel we're not responding back in time, please send us a message *without detail* on Twitter [@kraken_js](https://twitter.com/kraken_js).\n\n\n## History\nNo reported issues\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 3.8564453125,
          "content": "/*───────────────────────────────────────────────────────────────────────────*\\\n │  Copyright 2016 PayPal                                                      │\n │                                                                             │\n │hh ,'\"\"`.                                                                    │\n │  / _  _ \\  Licensed under the Apache License, Version 2.0 (the \"License\");  │\n │  |(@)(@)|  you may not use this file except in compliance with the License. │\n │  )  __  (  You may obtain a copy of the License at                          │\n │ /,'))((`.\\                                                                  │\n │(( ((  )) ))    http://www.apache.org/licenses/LICENSE-2.0                   │\n │ `\\ `)(' /'                                                                  │\n │                                                                             │\n │   Unless required by applicable law or agreed to in writing, software       │\n │   distributed under the License is distributed on an \"AS IS\" BASIS,         │\n │   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  │\n │   See the License for the specific language governing permissions and       │\n │   limitations under the License.                                            │\n \\*───────────────────────────────────────────────────────────────────────────*/\n'use strict';\n\nvar path = require('path');\nvar caller = require('caller');\nvar express = require('express');\nvar bootstrap = require('./lib/bootstrap');\nvar debug = require('debuglog')('kraken');\n\n\nfunction noop(obj, cb) {\n    cb(null, obj);\n}\n\n\nmodule.exports = function (options) {\n    var app;\n\n    if (typeof options === 'string') {\n        options = { basedir: options };\n    }\n\n    options = options || {};\n    options.protocols = options.protocols || {};\n    options.onconfig = options.onconfig || noop;\n    options.basedir = options.basedir || path.dirname(caller());\n    options.mountpath = null;\n    options.inheritViews = !!options.inheritViews;\n\n    debug('kraken options\\n', options);\n\n    app = express();\n    app.once('mount', function onmount(parent) {\n        var start, error, promise;\n\n        // Remove sacrificial express app\n        (parent._router || parent.router).stack.pop();\n\n        // Since this particular `app` instance is\n        // subsequently deleted, the `mountpath` is\n        // moved to `options` for use later.\n        options.mountpath = app.mountpath;\n\n        // on krakenmount\n        const onKrakenMount = options.onKrakenMount;\n        onKrakenMount && onKrakenMount(parent, options);\n\n        start = parent.emit.bind(parent, 'start');\n        error = parent.emit.bind(parent, 'error');\n\n        // Kick off server and add middleware which will block until\n        // server is ready. This way we don't have to block standard\n        // `listen` behavior, but failures will occur immediately.\n        promise = bootstrap(parent, options);\n        promise.then(start, error);\n\n\n        parent.use(function startup(req, res, next) {\n            var headers = options.startupHeaders;\n\n            if (promise.isPending()) {\n                res.status(503);\n                if (headers) {\n                    res.header(headers);\n                }\n                res.send('Server is starting.');\n                return;\n            }\n\n            if (promise.isRejected()) {\n                res.status(503);\n                res.send('The application failed to start.');\n                return;\n            }\n\n            next();\n        });\n    });\n\n    return app;\n};\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "middleware",
          "type": "tree",
          "content": null
        },
        {
          "name": "migrating-to-2.0.md",
          "type": "blob",
          "size": 4.0029296875,
          "content": "# Migrating to kraken-js 2.0\n\nThe kraken 2.0 migration is extremely straight forward.\n\nPlease be aware that in the next major release, the included 404 and 500 error handling middleware (opt-in) will be removed. In 2.0, if you use these middlewares, you will begin to see deprecation warnings.\n\nPlease review the following breaking changes introduced by dependencies:\n\n  * **Dependency:** meddleware (v1 -> v3)\n\n    1. Call registered middleware factories with a context set to the method owner. This helps in specific cases (e.g., Passport).  \n    **Previously:** The factory was called with a context of `null`.\n\n      [Implementation](https://github.com/krakenjs/meddleware/blob/ffb855528d1ceafed12b9c185d093561fd6bb7e1/index.js#L97), [Issue](https://github.com/krakenjs/meddleware/issues/26), [Pull Request](https://github.com/krakenjs/meddleware/pull/29)\n\n    1. Default middleware `enabled` to `true`. I.e., omitting the [`enabled` option](https://github.com/krakenjs/meddleware/blob/01c2c8fbeade81eac8ea295ae30c5bcc1ed2d446/README.md#options) will still enable the middleware.  \n      **Previously:** middleware was defaulted `enabled` to `false`.\n\n      [Implementation](https://github.com/krakenjs/meddleware/blob/01c2c8fbeade81eac8ea295ae30c5bcc1ed2d446/index.js#L171-L173), [Issue](https://github.com/krakenjs/meddleware/issues/13), [Pull Request](https://github.com/krakenjs/meddleware/pull/17)\n\n    2. Remove the ability to toggle the `enabled` state of a middleware at arbitrary points during runtime. Now, a middleware that is not `enabled`—by explicitly setting `enabled` to `false`, given breaking change No.1—will not be `require`d (i.e., not parsed), and cannot be enabled at a later time.  \n      **Previously:** middleware could be toggled. Was by design, but largely unused and caused unanticipated behavior.\n\n      [Issue](https://github.com/krakenjs/meddleware/issues/20), [Pull Request](https://github.com/krakenjs/meddleware/pull/25)\n\n  * **Dependency:** confit (v1 -> v2)\n\n    1. Resolve the `import` shortstop handler after merging `config.json`, `[env].json`, and before the other shortstop handlers are resolved.  \n    **Previously:** `import` handler resolved only once, before the rest of the shortstop handlers.\n\n      [implementation 1](https://github.com/krakenjs/confit/blob/59feac850a6dfb86ac524f4e14736f167ab215c1/lib/factory.js#L35-L44), [implementation 2](https://github.com/krakenjs/confit/blob/59feac850a6dfb86ac524f4e14736f167ab215c1/lib/factory.js#L61), [Issue](https://github.com/krakenjs/confit/issues/26), [Pull Request](https://github.com/krakenjs/confit/pull/35)\n\n      ###### New Behavior:\n\n      >``` js\n      >{ \"main\": \"import:main.json\" }                              // config/config.json\n      >{ \"key\": \"value\", \"otherKey\": \"otherValue\" }                // config/main.json\n      >{ \"main\": { \"key\": \"devValue\" } }                           // config/dev.json\n      >{ \"main\": { \"key\": \"devValue\", \"otherKey\": \"otherValue\" } } // result\n      >```\n\n    2. Change source priority—from highest to lowest (higher overrides lower)— to: command line arguments, environment variables, `[env].json`, `config.json`, [convenience](https://github.com/krakenjs/confit/blob/59feac850a6dfb86ac524f4e14736f167ab215c1/lib/provider.js#L57-L80) (environment normalization and `env:*` keys).  \n    **Previously:** source priority order, from highest to lowest, was `[env].json`, `config.json`, convenience, environment variables, command line arguments.\n\n      [Implementation](https://github.com/krakenjs/confit/blob/59feac850a6dfb86ac524f4e14736f167ab215c1/lib/factory.js#L33-L46), [Pull Request](https://github.com/krakenjs/confit/pull/34)\n\n      ###### New Behavior\n\n      >``` js\n      >// config/config.json\n      >{ \"KEY\": \"fromConfig\", \"OTHER_KEY\": \"fromConfig\", \"THIRD_KEY\": \"fromConfig\" }\n      >```\n      >\n      >``` sh\n      >OTHER_KEY=fromEnv THIRD_KEY=fromEnv node myApp.js --THIRD_KEY=fromArgv\n      >```\n      >\n      >``` js\n      >// result\n      >{ \"KEY\": \"fromConfig\", \"OTHER_KEY\": \"fromEnv\", \"THIRD_KEY\": \"fromArgv\" }\n      >```\n\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.1669921875,
          "content": "{\n  \"name\": \"kraken-js\",\n  \"version\": \"2.5.0\",\n  \"description\": \"An express-based Node.js web application bootstrapping module.\",\n  \"keywords\": [\n    \"node.js\",\n    \"node\",\n    \"javascript\",\n    \"js\",\n    \"web\",\n    \"express\",\n    \"connect\"\n  ],\n  \"main\": \"index.js\",\n  \"directories\": {\n    \"example\": \"./example\",\n    \"lib\": \"./lib\",\n    \"test\": \"./test\"\n  },\n  \"scripts\": {\n    \"test\": \"tape test/*.js\",\n    \"cover\": \"istanbul cover tape -- test/*.js\",\n    \"lint\": \"jshint -c .jshintrc index.js lib/ middleware/\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/krakenjs/kraken-js.git\"\n  },\n  \"author\": \"Erik Toth <ertoth@paypal.com>\",\n  \"contributors\": [\n    {\n      \"name\": \"Jeff Harrell\",\n      \"email\": \"jeharrell@paypal.com\"\n    },\n    {\n      \"name\": \"Trevor Livingston\",\n      \"email\": \"trlivingston@paypal.com\"\n    },\n    {\n      \"name\": \"Lenny Markus\",\n      \"email\": \"lmarkus@paypal.com\"\n    },\n    {\n      \"name\": \"Jean-Charles Sisk\",\n      \"email\": \"jsisk@paypal.com\"\n    },\n    {\n      \"name\": \"Gabriel J. Csapo\",\n      \"email\": \"gacsapo@paypal.com\"\n    }\n  ],\n  \"licenses\": [\n    {\n      \"type\": \"Apache 2.0\",\n      \"url\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n    }\n  ],\n  \"engines\": {\n    \"node\": \">= 4\"\n  },\n  \"devDependencies\": {\n    \"consolidate\": \"^0.15.1\",\n    \"dustjs-linkedin\": \"^2.6.2\",\n    \"ejs\": \"^2.3.1\",\n    \"express\": \"^4.8.4\",\n    \"istanbul\": \"^0.4.5\",\n    \"jade\": \"^1.9.2\",\n    \"jshint\": \"^2.6.3\",\n    \"supertest\": \"^4.0.2\",\n    \"tape\": \"^4.0.0\"\n  },\n  \"peerDependencies\": {\n    \"express\": \"^4.8.4\"\n  },\n  \"dependencies\": {\n    \"bluebird\": \"^3.4.7\",\n    \"body-parser\": \"^1.12.2\",\n    \"caller\": \"^1.0.0\",\n    \"compression\": \"^1.4.3\",\n    \"confit\": \"^3.0.0\",\n    \"cookie-parser\": \"^1.3.4\",\n    \"core-util-is\": \"^1.0.1\",\n    \"debuglog\": \"^1.0.1\",\n    \"depd\": \"^2.0.0\",\n    \"endgame\": \"^1.0.0\",\n    \"express-enrouten\": \"^1.2.0\",\n    \"express-session\": \"^1.10.4\",\n    \"formidable\": \"^1.0.17\",\n    \"lusca\": \"^1.5.1\",\n    \"meddleware\": \"^3.0.2\",\n    \"morgan\": \"^1.5.2\",\n    \"serve-favicon\": \"^2.2.0\",\n    \"serve-static\": \"^1.9.2\",\n    \"shortstop\": \"^1.0.1\",\n    \"shortstop-handlers\": \"^1.0.0\",\n    \"shortstop-resolve\": \"^1.0.1\",\n    \"shush\": \"^1.0.0\"\n  }\n}\n"
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}