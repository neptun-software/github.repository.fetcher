{
  "metadata": {
    "timestamp": 1736561560896,
    "page": 103,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "23/resumable.js",
      "stars": 4667,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3486328125,
          "content": "# EditorConfig helps developers define and maintain consistent\n# coding styles between different editors and IDEs\n# editorconfig.org\n\nroot = true\n\n\n[*]\n\n# Change these settings to your own preference\nindent_style = space\nindent_size = 2\n\n# We recommend you to keep these unchanged\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.158203125,
          "content": "*~\nsamples/Node.js/node_modules/\n\n# Eclipse\n.classpath\n.project\n.settings/\n\n# Intellij\n.idea/\n*.iml\n*.iws\n\n# Mac\n.DS_Store\n\n# Maven\nlog/\ntarget/\n\n# Gradle\n.gradle"
        },
        {
          "name": "MIT-LICENSE",
          "type": "blob",
          "size": 1.0498046875,
          "content": "Copyright (c) 2011, 23, https://www.twentythree.com\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.5703125,
          "content": "## What is Resumable.js\n\nResumable.js is a JavaScript library providing multiple simultaneous, stable and resumable uploads via the [`HTML5 File API`](http://www.w3.org/TR/FileAPI/).\n\nThe library is designed to introduce fault-tolerance into the upload of large files through HTTP. This is done by splitting each file into small chunks. Then, whenever the upload of a chunk fails, uploading is retried until the procedure completes. This allows uploads to automatically resume uploading after a network connection is lost either locally or to the server. Additionally, it allows for users to pause, resume and even recover uploads without losing state because only the currently uploading chunks will be aborted, not the entire upload.\n\nResumable.js does not have any external dependencies other than the `HTML5 File API`. This is relied on for the ability to chunk files into smaller pieces. Currently, this means that support is widely available in to Firefox 4+, Chrome 11+, Safari 6+ and Internet Explorer 10+.\n\nSamples and examples are available in the `samples/` folder. Please push your own as Markdown to help document the project.\n\n\n## How can I use it?\n\nA new `Resumable` object is created with information of what and where to post:\n\n```js\nvar r = new Resumable({\n  target:'/api/photo/redeem-upload-token',\n  query:{upload_token:'my_token'}\n});\n// Resumable.js isn't supported, fall back on a different method\nif(!r.support) location.href = '/some-old-crappy-uploader';\n```\n\nTo allow files to be selected and drag-dropped, you need to assign a drop target and a DOM item to be clicked for browsing:\n\n```js\nr.assignBrowse(document.getElementById('browseButton'));\nr.assignDrop(document.getElementById('dropTarget'));\n```\n\nIt is recommended to use an HTML span for the browse button.  Using an actual button does not work reliably across all browsers, because Resumable.js creates the file input as a child of this control, and this may be invalid in the case of an HTML button.\n\nAfter this, interaction with Resumable.js is done by listening to events:\n\n```js\nr.on('fileAdded', function(file, event){\n    ...\n  });\nr.on('fileSuccess', function(file, message){\n    ...\n  });\nr.on('fileError', function(file, message){\n    ...\n  });\n```\n\n## How do I set it up with my server?\n\nMost of the magic for Resumable.js happens in the user's browser, but files still need to be reassembled from chunks on the server side. This should be a fairly simple task, which and can be achieved using any web framework or language that is capable of handling file uploads.\n\nTo handle the state of upload chunks, a number of extra parameters are sent along with all requests:\n\n* `resumableChunkNumber`: The index of the chunk in the current upload. First chunk is `1` (no base-0 counting here).\n* `resumableTotalChunks`: The total number of chunks.\n* `resumableChunkSize`: The general chunk size. Using this value and `resumableTotalSize` you can calculate the total number of chunks. Please note that the size of the data received in the HTTP might be higher than `resumableChunkSize` for the last chunk for a file.\n* `resumableTotalSize`: The total file size.\n* `resumableIdentifier`: A unique identifier for the file contained in the request.\n* `resumableFilename`: The original file name (since a bug in Firefox results in the file name not being transmitted in chunk multipart posts).\n* `resumableRelativePath`: The file's relative path when selecting a directory (defaults to file name in all browsers except Chrome).\n\nYou should allow for the same chunk to be uploaded more than once; this isn't standard behaviour, but on an unstable network environment it could happen, and this case is exactly what Resumable.js is designed for.\n\nFor every request, you can confirm reception in HTTP status codes (can be changed through the `permanentErrors` option):\n\n* `200`, `201`: The chunk was accepted and correct. No need to re-upload.\n* `400`, `404`, `409`, `415`, `500`, `501`: The file for which the chunk was uploaded is not supported, cancel the entire upload.\n* _Anything else_: Something went wrong, but try reuploading the file.\n\n## Handling GET (or `test()` requests)\n\nEnabling the `testChunks` option will allow uploads to be resumed after browser restarts and even across browsers (in theory you could even run the same file upload across multiple tabs or different browsers).  The `POST` data requests listed are required to use Resumable.js to receive data, but you can extend support by implementing a corresponding `GET` request with the same parameters:\n\n* If this request returns a `200` HTTP code, the chunks is assumed to have been completed.\n* If the request returns anything else, the chunk will be uploaded in the standard fashion. (It is recommended to return *204 No Content* in these cases if possible to [avoid unwarranted notices in browser consoles](https://github.com/23/resumable.js/issues/160).)\n\nAfter this is done and `testChunks` enabled, an upload can quickly catch up even after a browser restart by simply verifying already uploaded chunks that do not need to be uploaded again.\n\n## Full documentation\n\n### Resumable\n#### Configuration\n\nThe object is loaded with a configuration hash:\n\n```js\nvar r = new Resumable({opt1:'val', ...});\n```\n\nAll POST parameters can be omitted by setting them to a falsy value\n(e.g. `null`, `false` or empty string).\nAvailable configuration options are:\n\n* `target` The target URL for the multipart POST request. This can be a `string` or a `function` that allows you you to construct and return a value, based on supplied `params`. (Default: `/`)\n* `testTarget` The target URL for the GET request to the server for each chunk to see if it already exists. This can be a `string` or a `function` that allows you you to construct and return a value, based on supplied `params`. (Default: `null`)\n* `chunkSize` The size in bytes of each uploaded chunk of data. The last uploaded chunk will be at least this size and up to two the size, see [Issue #51](https://github.com/23/resumable.js/issues/51) for details and reasons. (Default: `1*1024*1024`)\n* `forceChunkSize` Force all chunks to be less or equal than chunkSize. Otherwise, the last chunk will be greater than or equal to `chunkSize`. (Default: `false`)\n* `simultaneousUploads` Number of simultaneous uploads (Default: `3`)\n* `fileParameterName` The name of the multipart request parameter to use for the file chunk  (Default: `file`)\n* `chunkNumberParameterName` The name of the chunk index (base-1) in the current upload POST parameter to use for the file chunk (Default: `resumableChunkNumber`)\n* `totalChunksParameterName` The name of the total number of chunks POST parameter to use for the file chunk (Default: `resumableTotalChunks`)\n* `chunkSizeParameterName` The name of the general chunk size POST parameter to use for the file chunk (Default: `resumableChunkSize`)\n* `totalSizeParameterName` The name of the total file size number POST parameter to use for the file chunk (Default: `resumableTotalSize`)\n* `identifierParameterName` The name of the unique identifier POST parameter to use for the file chunk (Default: `resumableIdentifier`)\n* `fileNameParameterName` The name of the original file name POST parameter to use for the file chunk (Default: `resumableFilename`)\n* `relativePathParameterName` The name of the file's relative path POST parameter to use for the file chunk (Default: `resumableRelativePath`)\n* `currentChunkSizeParameterName` The name of the current chunk size POST parameter to use for the file chunk (Default: `resumableCurrentChunkSize`)\n* `typeParameterName` The name of the file type POST parameter to use for the file chunk (Default: `resumableType`)\n* `query` Extra parameters to include in the multipart request with data. This can be an object or a function. If a function, it will be passed a ResumableFile and a ResumableChunk object (Default: `{}`)\n* `testMethod` Method for chunk test request. (Default: `'GET'`)\n* `uploadMethod` HTTP method to use when sending chunks to the server (`POST`, `PUT`, `PATCH`) (Default: `POST`)\n* `parameterNamespace` Extra prefix added before the name of each parameter included in the multipart POST or in the test GET. (Default: `''`)\n* `headers` Extra headers to include in the multipart POST with data. This can be an `object` or a `function` that allows you to construct and return a value, based on supplied `file` (Default: `{}`)\n* `method` Method to use when sending chunks to the server (`multipart` or `octet`) (Default: `multipart`)\n* `prioritizeFirstAndLastChunk` Prioritize first and last chunks of all files. This can be handy if you can determine if a file is valid for your service from only the first or last chunk. For example, photo or video meta data is usually located in the first part of a file, making it easy to test support from only the first chunk. (Default: `false`)\n* `testChunks` Make a GET request to the server for each chunks to see if it already exists. If implemented on the server-side, this will allow for upload resumes even after a browser crash or even a computer restart. (Default: `true`)\n* `preprocess` Optional function to process each chunk before testing & sending. Function is passed the chunk as parameter, and should call the `preprocessFinished` method on the chunk when finished. (Default: `null`)\n* `preprocessFile` Optional function to process each file before testing & sending the corresponding chunks. Function is passed the file as parameter, and should call the `preprocessFinished` method on the file when finished. (Default: `null`)\n* `generateUniqueIdentifier(file, event)` Override the function that generates unique identifiers for each file. May return [Promise](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise)-like object with `then()` method for asynchronous id generation. Parameters are the ES `File` object and the event that led to\nadding the file. (Default: `null`)\n* `maxFiles` Indicates how many files can be uploaded in a single session. Valid values are any positive integer and `undefined` for no limit. (Default: `undefined`)\n* `maxFilesErrorCallback(files, errorCount)` A function which displays the *please upload n file(s) at a time* message. (Default: displays an alert box with the message *Please n one file(s) at a time.*)\n* `minFileSize` The minimum allowed file size.  (Default: `undefined`)\n* `minFileSizeErrorCallback(file, errorCount)` A function which displays an error a selected file is smaller than allowed. (Default: displays an alert for every bad file.)\n* `maxFileSize` The maximum allowed file size.  (Default: `undefined`)\n* `maxFileSizeErrorCallback(file, errorCount)` A function which displays an error a selected file is larger than allowed. (Default: displays an alert for every bad file.)\n* `fileType` The file types allowed to upload. An empty array allow any file type. (Default: `[]`)\n* `fileTypeErrorCallback(file, errorCount)` A function which displays an error a selected file has type not allowed. (Default: displays an alert for every bad file.)\n* `maxChunkRetries` The maximum number of retries for a chunk before the upload is failed. Valid values are any positive integer and `undefined` for no limit. (Default: `undefined`)\n* `permanentErrors` List of HTTP status codes that define if the chunk upload was a permanent error and should not retry the upload. (Default: `[400, 404, 409, 415, 500, 501]`)\n* `chunkRetryInterval` The number of milliseconds to wait before retrying a chunk on a non-permanent error.  Valid values are any positive integer and `undefined` for immediate retry.  (Default: `undefined`)\n* `withCredentials` Standard CORS requests do not send or set any cookies by default. In order to include cookies as part of the request, you need to set the `withCredentials` property to true. (Default: `false`)\n* `xhrTimeout` The timeout in milliseconds for each request (Default: `0`)\n* `setChunkTypeFromFile` Set chunk content-type from original file.type. (Default: `false`, if `false` default Content-Type: `application/octet-stream`)\n* `dragOverClass` The class name to add on drag over an assigned drop zone. (Default: `dragover`)\n\n#### Properties\n\n* `.support` A boolean value indicator whether or not Resumable.js is supported by the current browser.\n* `.opts` A hash object of the configuration of the Resumable.js instance.\n* `.files` An array of `ResumableFile` file objects added by the user (see full docs for this object type below).\n\n#### Methods\n\n* `.assignBrowse(domNodes, isDirectory)` Assign a browse action to one or more DOM nodes.  Pass in `true` to allow directories to be selected (Chrome only).  See the note above about using an HTML span instead of an actual button.\n* `.assignDrop(domNodes)` Assign one or more DOM nodes as a drop target.\n* `.on(event, callback)` Listen for event from Resumable.js (see below)\n* `.upload()` Start or resume uploading.\n* `.pause()` Pause uploading.\n* `.cancel()` Cancel upload of all `ResumableFile` objects and remove them from the list.\n* `.progress()` Returns a float between 0 and 1 indicating the current upload progress of all files.\n* `.isUploading()` Returns a boolean indicating whether or not the instance is currently uploading anything.\n* `.addFile(file)` Add a HTML5 File object to the list of files.\n* `.addFiles(files)` Add an Array of HTML5 File objects to the list of files.\n* `.removeFile(file)` Cancel upload of a specific `ResumableFile` object on the list from the list.\n* `.getFromUniqueIdentifier(uniqueIdentifier)` Look up a `ResumableFile` object by its unique identifier.\n* `.getSize()` Returns the total size of the upload in bytes.\n\n#### Events\n\n* `.fileSuccess(file, message)` A specific file was completed. `message` is the response body from the server.\n* `.fileProgress(file, message)` Uploading progressed for a specific file.\n* `.fileAdded(file, event)` A new file was added. Optionally, you can use the browser `event` object from when the file was added.\n* `.filesAdded(arrayAdded, arraySkipped)` New files were added (and maybe some have been skipped).\n* `.fileRetry(file)` Something went wrong during upload of a specific file, uploading is being retried.\n* `.fileError(file, message)` An error occurred during upload of a specific file.\n* `.uploadStart()` Upload has been started on the Resumable object.\n* `.complete()` Uploading completed.\n* `.progress()` Uploading progress.\n* `.error(message, file)` An error, including fileError, occurred.\n* `.pause()` Uploading was paused.\n* `.beforeCancel()` Triggers before the items are cancelled allowing to do any processing on uploading files.\n* `.cancel()` Uploading was canceled.\n* `.chunkingStart(file)` Started preparing file for upload\n* `.chunkingProgress(file,ratio)` Show progress in file preparation\n* `.chunkingComplete(file)` File is ready for upload\n* `.catchAll(event, ...)` Listen to all the events listed above with the same callback function.\n\n### ResumableFile\n#### Properties\n\n* `.resumableObj` A back-reference to the parent `Resumable` object.\n* `.file` The correlating HTML5 `File` object.\n* `.fileName` The name of the file.\n* `.relativePath` The relative path to the file (defaults to file name if relative path doesn't exist)\n* `.size` Size in bytes of the file.\n* `.uniqueIdentifier` A unique identifier assigned to this file object. This value is included in uploads to the server for reference, but can also be used in CSS classes etc when building your upload UI.\n* `.chunks` An array of `ResumableChunk` items. You shouldn't need to dig into these.\n\n#### Methods\n\n* `.progress(relative)` Returns a float between 0 and 1 indicating the current upload progress of the file. If `relative` is `true`, the value is returned relative to all files in the Resumable.js instance.\n* `.abort()` Abort uploading the file.\n* `.cancel()` Abort uploading the file and delete it from the list of files to upload.\n* `.retry()` Retry uploading the file.\n* `.bootstrap()` Rebuild the state of a `ResumableFile` object, including reassigning chunks and XMLHttpRequest instances.\n* `.isUploading()` Returns a boolean indicating whether file chunks is uploading.\n* `.isComplete()` Returns a boolean indicating whether the file has completed uploading and received a server response.\n* `.markChunksCompleted()` starts upload from the next chunk number while marking all previous chunks complete. Must be called before upload() method.\n\n## Alternatives\n\nThis library is explicitly designed for modern browsers supporting advanced HTML5 file features, and the motivation has been to provide stable and resumable support for large files (allowing uploads of several GB files through HTTP in a predictable fashion).\n\nIf your aim is just to support progress indications during upload/uploading multiple files at once, Resumable.js isn't for you. In those cases, something like [Plupload](http://plupload.com/) provides the same features with wider browser support.\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.21484375,
          "content": "{\n\t\"name\": \"resumable.js\",\n\t\"main\": \"resumable.js\",\n\t\"ignore\": [\n\t\t\".gitignore\",\n                \"*.md\"\n\t],\n        \"keywords\": [\n            \"HTML5 File API\",\n            \"Upload\",\n            \"Large files\"\n        ]\n}\n"
        },
        {
          "name": "component.json",
          "type": "blob",
          "size": 0.1435546875,
          "content": "{\n    \"name\": \"resumable.js\",\n    \"repo\": \"23/resumable.js\",\n    \"version\": \"1.1.2\",\n    \"main\": \"resumable.js\",\n    \"scripts\": [\"resumable.js\"]\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.705078125,
          "content": "{\n  \"name\": \"resumablejs\",\n  \"version\": \"1.1.2\",\n  \"description\": \"A JavaScript library for providing multiple simultaneous, stable, fault-tolerant and resumable/restartable uploads via the HTML5 File API.\",\n  \"main\": \"resumable.js\",\n  \"types\": \"./resumable.d.ts\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/23/resumable.js.git\"\n  },\n  \"keywords\": [\n    \"html5\",\n    \"file\",\n    \"upload\"\n  ],\n  \"author\": \"https://github.com/23/resumable.js/graphs/contributors\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/23/resumable.js/issues\"\n  },\n  \"homepage\": \"https://github.com/23/resumable.js#readme\"\n}\n"
        },
        {
          "name": "resumable-tests.ts",
          "type": "blob",
          "size": 1.09375,
          "content": "import Resumable = require('./index');\n\nlet resumable: Resumable = new Resumable({chunkSize: 123});\nlet resumableNoOpts: Resumable = new Resumable();\n\nresumable.addFile(new File([], 'test.tmp'), {});\nresumable.addFiles([new File([], 'test.tmp')], {});\nresumable.assignBrowse(document, true);\nresumable.assignBrowse([document], true);\nresumable.assignDrop(document);\nresumable.assignDrop([document]);\nresumable.cancel();\nlet defaults: Object = resumable.defaults;\nlet events: any[] = resumable.events;\nlet files: any[] = resumable.files;\nresumable.fire();\nlet {} = resumable.getFromUniqueIdentifier('test');\nlet {} = resumable.getOpt('test');\nlet size:number = resumable.getSize();\nresumable.handleChangeEvent({});\nresumable.handleDropEvent({});\nlet isUploading: boolean = resumable.isUploading();\nresumable.on('test', function() {});\nlet opts: Object = resumable.opts;\nresumable.pause();\nlet progress:number = resumable.progress();\nresumable.removeFile('TODO');\nlet support: boolean = resumable.support;\nresumable.unAssignDrop({});\nresumable.upload();\nresumable.uploadNextChunk();\nlet version:number = resumable.version;"
        },
        {
          "name": "resumable.d.ts",
          "type": "blob",
          "size": 13.4208984375,
          "content": "// Type definitions for Resumable.js v1.0.2\n// Project: https://github.com/23/resumable.js\n// Definitions by: Daniel McAssey <https://github.com/DanielMcAssey>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\ndeclare namespace Resumable {\n  interface ConfigurationHash {\n    /**\n     * The target URL for the multipart POST request. This can be a string or a function that allows you you to construct and return a value, based on supplied params. (Default: /)\n     **/\n    target?: string;\n    /**\n     * The size in bytes of each uploaded chunk of data. The last uploaded chunk will be at least this size and up to two the size, see Issue #51 for details and reasons. (Default: 1*1024*1024)\n     **/\n    chunkSize?: number;\n    /**\n     * Force all chunks to be less or equal than chunkSize. Otherwise, the last chunk will be greater than or equal to chunkSize. (Default: false)\n     **/\n    forceChunkSize?: boolean;\n    /**\n     * Number of simultaneous uploads (Default: 3)\n     **/\n    simultaneousUploads?: number;\n    /**\n     * The name of the multipart POST parameter to use for the file chunk (Default: file)\n     **/\n    fileParameterName?: string;\n    /**\n     * The name of the chunk index (base-1) in the current upload POST parameter to use for the file chunk (Default: resumableChunkNumber)\n     */\n    chunkNumberParameterName?: string;\n    /**\n     * The name of the total number of chunks POST parameter to use for the file chunk (Default: resumableTotalChunks)\n     */\n    totalChunksParameterName?: string;\n    /**\n     * The name of the general chunk size POST parameter to use for the file chunk (Default: resumableChunkSize)\n     */\n    chunkSizeParameterName?: string;\n    /**\n     * The name of the total file size number POST parameter to use for the file chunk (Default: resumableTotalSize)\n     */\n    totalSizeParameterName?: string;\n    /**\n     * The name of the unique identifier POST parameter to use for the file chunk (Default: resumableIdentifier)\n     */\n    identifierParameterName?: string;\n    /**\n     * The name of the original file name POST parameter to use for the file chunk (Default: resumableFilename)\n     */\n    fileNameParameterName?: string;\n    /**\n     * The name of the file's relative path POST parameter to use for the file chunk (Default: resumableRelativePath)\n     */\n    relativePathParameterName?: string;\n    /**\n     * The name of the current chunk size POST parameter to use for the file chunk (Default: resumableCurrentChunkSize)\n     */\n    currentChunkSizeParameterName?: string;\n    /**\n     * The name of the file type POST parameter to use for the file chunk (Default: resumableType)\n     */\n    typeParameterName?: string;\n    /**\n     * Extra parameters to include in the multipart POST with data. This can be an object or a function. If a function, it will be passed a ResumableFile and a ResumableChunk object (Default: {})\n     **/\n    query?: Object;\n    /**\n     * Method for chunk test request. (Default: 'GET')\n     **/\n    testMethod?: string;\n    /**\n     * Method for chunk upload request. (Default: 'POST')\n     **/\n    uploadMethod?: string;\n    /**\n     * Extra prefix added before the name of each parameter included in the multipart POST or in the test GET. (Default: '')\n     **/\n    parameterNamespace?: string;\n    /**\n     * Extra headers to include in the multipart POST with data. This can be an object or a function that allows you to construct and return a value, based on supplied file (Default: {})\n     **/\n    headers?: Object | ((file: ResumableFile) => Object);\n    /**\n     * Method to use when POSTing chunks to the server (multipart or octet) (Default: multipart)\n     **/\n    method?: string;\n    /**\n     * Prioritize first and last chunks of all files. This can be handy if you can determine if a file is valid for your service from only the first or last chunk. For example, photo or video meta data is usually located in the first part of a file, making it easy to test support from only the first chunk. (Default: false)\n     **/\n    prioritizeFirstAndLastChunk?: boolean;\n    /**\n     * Make a GET request to the server for each chunks to see if it already exists. If implemented on the server-side, this will allow for upload resumes even after a browser crash or even a computer restart. (Default: true)\n     **/\n    testChunks?: boolean;\n    /**\n     * Optional function to process each chunk before testing & sending. Function is passed the chunk as parameter, and should call the preprocessFinished method on the chunk when finished. (Default: null)\n     **/\n    preprocess?: (chunk: ResumableChunk) => ResumableChunk;\n    /**\n     * Override the function that generates unique identifiers for each file. (Default: null)\n     **/\n    generateUniqueIdentifier?: () => string;\n    /**\n     * Indicates how many files can be uploaded in a single session. Valid values are any positive integer and undefined for no limit. (Default: undefined)\n     **/\n    maxFiles?: number;\n    /**\n     * A function which displays the please upload n file(s) at a time message. (Default: displays an alert box with the message Please n one file(s) at a time.)\n     **/\n    maxFilesErrorCallback?: (files: ResumableFile, errorCount: number) => void;\n    /**\n     * The minimum allowed file size. (Default: undefined)\n     **/\n    minFileSize?: boolean;\n    /**\n     * A function which displays an error a selected file is smaller than allowed. (Default: displays an alert for every bad file.)\n     **/\n    minFileSizeErrorCallback?: (file: ResumableFile, errorCount: number) => void;\n    /**\n     * The maximum allowed file size. (Default: undefined)\n     **/\n    maxFileSize?: boolean;\n    /**\n     * A function which displays an error a selected file is larger than allowed. (Default: displays an alert for every bad file.)\n     **/\n    maxFileSizeErrorCallback?: (file: ResumableFile, errorCount: number) => void;\n    /**\n     * The file types allowed to upload. An empty array allow any file type. (Default: [])\n     **/\n    fileType?: string[];\n    /**\n     * A function which displays an error a selected file has type not allowed. (Default: displays an alert for every bad file.)\n     **/\n    fileTypeErrorCallback?: (file: ResumableFile, errorCount: number) => void;\n    /**\n     * The maximum number of retries for a chunk before the upload is failed. Valid values are any positive integer and undefined for no limit. (Default: undefined)\n     **/\n    maxChunkRetries?: number;\n    /**\n     * The number of milliseconds to wait before retrying a chunk on a non-permanent error. Valid values are any positive integer and undefined for immediate retry. (Default: undefined)\n     **/\n    chunkRetryInterval?: number;\n    /**\n     * Standard CORS requests do not send or set any cookies by default. In order to include cookies as part of the request, you need to set the withCredentials property to true. (Default: false)\n     **/\n    withCredentials?: boolean;\n  }\n\n  class Resumable {\n    constructor(options: ConfigurationHash);\n\n    /**\n     * A boolean value indicator whether or not Resumable.js is supported by the current browser.\n     **/\n    support: boolean;\n    /**\n     * A hash object of the configuration of the Resumable.js instance.\n     **/\n    opts: ConfigurationHash;\n    /**\n     * An array of ResumableFile file objects added by the user (see full docs for this object type below).\n     **/\n    files: ResumableFile[];\n\n    defaults: ConfigurationHash;\n\n    events: Event[];\n    version: number;\n\n    /**\n     * Assign a browse action to one or more DOM nodes. Pass in true to allow directories to be selected (Chrome only).\n     **/\n    assignBrowse(domNode: Element, isDirectory: boolean): void;\n    assignBrowse(domNodes: Element[], isDirectory: boolean): void;\n    /**\n     * Assign one or more DOM nodes as a drop target.\n     **/\n    assignDrop(domNode: Element): void;\n    assignDrop(domNodes: Element[]): void;\n    unAssignDrop(domNode: Element): void;\n    unAssignDrop(domNodes: Element[]): void;\n    /**\n     * Start or resume uploading.\n     **/\n    upload(): void;\n    uploadNextChunk(): void;\n    /**\n     * Pause uploading.\n     **/\n    pause(): void;\n    /**\n     * Cancel upload of all ResumableFile objects and remove them from the list.\n     **/\n    cancel(): void;\n    fire(): void;\n    /**\n     * Returns a float between 0 and 1 indicating the current upload progress of all files.\n     **/\n    progress(): number;\n    /**\n     * Returns a boolean indicating whether or not the instance is currently uploading anything.\n     **/\n    isUploading(): boolean;\n    /**\n     * Add a HTML5 File object to the list of files.\n     **/\n    addFile(file: File, event: Event): void;\n    /**\n     * Cancel upload of a specific ResumableFile object on the list from the list.\n     **/\n    removeFile(file: ResumableFile): void;\n    /**\n     * Look up a ResumableFile object by its unique identifier.\n     **/\n    getFromUniqueIdentifier(uniqueIdentifier: string): ResumableFile;\n    /**\n     * Returns the total size of the upload in bytes.\n     **/\n    getSize(): number;\n    getOpt(o: string): any;\n\n    // Events\n  /**\n   * Change event handler\n   **/\n    handleChangeEvent(e: Event): void;\n\n    /**\n    * Drop event handler\n    **/\n    handleDropEvent(e: Event): void;\n\n    /**\n     *  A specific file was completed.\n     **/\n    on(event: 'fileSuccess', callback: (file: ResumableFile) => void): void;\n    /**\n     *  Uploading progressed for a specific file.\n     **/\n    on(event: 'fileProgress', callback: (file: ResumableFile) => void): void;\n    /**\n     *  A new file was added. Optionally, you can use the browser event object from when the file was added.\n     **/\n    on(event: 'fileAdded', callback: (file: ResumableFile, event: DragEvent) => void): void;\n    /**\n     *  New files were added.\n     **/\n    on(event: 'filesAdded', callback: (files: ResumableFile[]) => void): void;\n    /**\n     *  Something went wrong during upload of a specific file, uploading is being retried.\n     **/\n    on(event: 'fileRetry', callback: (file: ResumableFile) => void): void;\n    /**\n     *  An error occurred during upload of a specific file.\n     **/\n    on(event: 'fileError', callback: (file: ResumableFile, message: string) => void): void;\n    /**\n     *  Upload has been started on the Resumable object.\n     **/\n    on(event: 'uploadStart', callback: () => void): void;\n    /**\n     *  Uploading completed.\n     **/\n    on(event: 'complete', callback: () => void): void;\n    /**\n     *  Uploading progress.\n     **/\n    on(event: 'progress', callback: () => void): void;\n    /**\n     *  An error, including fileError, occurred.\n     **/\n    on(event: 'error', callback: (message: string, file: ResumableFile) => void): void;\n    /**\n     *  Uploading was paused.\n     **/\n    on(event: 'pause', callback: () => void): void;\n    /**\n     *  Triggers before the items are cancelled allowing to do any processing on uploading files.\n     **/\n    on(event: 'beforeCancel', callback: () => void): void;\n    /**\n     *  Uploading was canceled.\n     **/\n    on(event: 'cancel', callback: () => void): void;\n    /**\n     *  Started preparing file for upload\n     **/\n    on(event: 'chunkingStart', callback: (file: ResumableFile) => void): void;\n    /**\n     *  Show progress in file preparation\n     **/\n    on(event: 'chunkingProgress', callback: (file: ResumableFile, ratio: number) => void): void;\n    /**\n     *  File is ready for upload\n     **/\n    on(event: 'chunkingComplete', callback: (file: ResumableFile) => void): void;\n    /**\n     * Listen to all the events listed above with the same callback function.\n     **/\n    on(event: 'catchAll', callback: () => void): void;\n  /**\n     * Listen for event from Resumable.js (see below)\n     **/\n    on(event: string, callback: Function): void;\n  }\n\n  interface ResumableFile {\n    /**\n     * A back-reference to the parent Resumable object.\n     **/\n    resumableObj: Resumable;\n    /**\n     * The correlating HTML5 File object.\n     **/\n    file: File;\n    /**\n     * The name of the file.\n     **/\n    fileName: string;\n    /**\n     * The relative path to the file (defaults to file name if relative path doesn't exist)\n     **/\n    relativePath: string;\n    /**\n     * Size in bytes of the file.\n     **/\n    size: number;\n    /**\n     * A unique identifier assigned to this file object. This value is included in uploads to the server for reference, but can also be used in CSS classes etc when building your upload UI.\n     **/\n    uniqueIdentifier: string;\n    /**\n     * An array of ResumableChunk items. You shouldn't need to dig into these.\n     **/\n    chunks: ResumableChunk[];\n\n\n    /**\n     * Returns a float between 0 and 1 indicating the current upload progress of the file. If relative is true, the value is returned relative to all files in the Resumable.js instance.\n     **/\n    progress: (relative: boolean) => number;\n    /**\n     * Abort uploading the file.\n     **/\n    abort: () => void;\n    /**\n     * Abort uploading the file and delete it from the list of files to upload.\n     **/\n    cancel: () => void;\n    /**\n     * Retry uploading the file.\n     **/\n    retry: () => void;\n    /**\n     * Rebuild the state of a ResumableFile object, including reassigning chunks and XMLHttpRequest instances.\n     **/\n    bootstrap: () => void;\n    /**\n     * Returns a boolean indicating whether file chunks is uploading.\n     **/\n    isUploading: () => boolean;\n    /**\n     * Returns a boolean indicating whether the file has completed uploading and received a server response.\n     **/\n    isComplete: () => boolean;\n  }\n\n  interface ResumableChunk { }\n}\n\ndeclare module 'resumablejs' {\n  export = Resumable;\n}\n"
        },
        {
          "name": "resumable.js",
          "type": "blob",
          "size": 40.314453125,
          "content": "/*\n* MIT Licensed\n* https://www.twentythree.com\n* https://github.com/23/resumable.js\n* Steffen Fagerström Christensen, steffen@twentythree.com\n*/\n\n(function(){\n\"use strict\";\n\n  var Resumable = function(opts){\n    if ( !(this instanceof Resumable) ) {\n      return new Resumable(opts);\n    }\n    this.version = 1.0;\n    // SUPPORTED BY BROWSER?\n    // Check if these features are support by the browser:\n    // - File object type\n    // - Blob object type\n    // - FileList object type\n    // - slicing files\n    this.support = (\n                   (typeof(File)!=='undefined')\n                   &&\n                   (typeof(Blob)!=='undefined')\n                   &&\n                   (typeof(FileList)!=='undefined')\n                   &&\n                   (!!Blob.prototype.webkitSlice||!!Blob.prototype.mozSlice||!!Blob.prototype.slice||false)\n                   );\n    if(!this.support) return(false);\n\n\n    // PROPERTIES\n    var $ = this;\n    $.files = [];\n    $.defaults = {\n      chunkSize:1*1024*1024,\n      forceChunkSize:false,\n      simultaneousUploads:3,\n      fileParameterName:'file',\n      chunkNumberParameterName: 'resumableChunkNumber',\n      chunkSizeParameterName: 'resumableChunkSize',\n      currentChunkSizeParameterName: 'resumableCurrentChunkSize',\n      totalSizeParameterName: 'resumableTotalSize',\n      typeParameterName: 'resumableType',\n      identifierParameterName: 'resumableIdentifier',\n      fileNameParameterName: 'resumableFilename',\n      relativePathParameterName: 'resumableRelativePath',\n      totalChunksParameterName: 'resumableTotalChunks',\n      dragOverClass: 'dragover',\n      throttleProgressCallbacks: 0.5,\n      query:{},\n      headers:{},\n      preprocess:null,\n      preprocessFile:null,\n      method:'multipart',\n      uploadMethod: 'POST',\n      testMethod: 'GET',\n      prioritizeFirstAndLastChunk:false,\n      target:'/',\n      testTarget: null,\n      parameterNamespace:'',\n      testChunks:true,\n      generateUniqueIdentifier:null,\n      getTarget:null,\n      maxChunkRetries:100,\n      chunkRetryInterval:undefined,\n      permanentErrors:[400, 401, 403, 404, 409, 415, 500, 501],\n      maxFiles:undefined,\n      withCredentials:false,\n      xhrTimeout:0,\n      clearInput:true,\n      chunkFormat:'blob',\n      setChunkTypeFromFile:false,\n      maxFilesErrorCallback:function (files, errorCount) {\n        var maxFiles = $.getOpt('maxFiles');\n        alert('Please upload no more than ' + maxFiles + ' file' + (maxFiles === 1 ? '' : 's') + ' at a time.');\n      },\n      minFileSize:1,\n      minFileSizeErrorCallback:function(file, errorCount) {\n        alert(file.fileName||file.name +' is too small, please upload files larger than ' + $h.formatSize($.getOpt('minFileSize')) + '.');\n      },\n      maxFileSize:undefined,\n      maxFileSizeErrorCallback:function(file, errorCount) {\n        alert(file.fileName||file.name +' is too large, please upload files less than ' + $h.formatSize($.getOpt('maxFileSize')) + '.');\n      },\n      fileType: [],\n      fileTypeErrorCallback: function(file, errorCount) {\n        alert(file.fileName||file.name +' has type not allowed, please upload files of type ' + $.getOpt('fileType') + '.');\n      }\n    };\n    $.opts = opts||{};\n    $.getOpt = function(o) {\n      var $opt = this;\n      // Get multiple option if passed an array\n      if(o instanceof Array) {\n        var options = {};\n        $h.each(o, function(option){\n          options[option] = $opt.getOpt(option);\n        });\n        return options;\n      }\n      // Otherwise, just return a simple option\n      if ($opt instanceof ResumableChunk) {\n        if (typeof $opt.opts[o] !== 'undefined') { return $opt.opts[o]; }\n        else { $opt = $opt.fileObj; }\n      }\n      if ($opt instanceof ResumableFile) {\n        if (typeof $opt.opts[o] !== 'undefined') { return $opt.opts[o]; }\n        else { $opt = $opt.resumableObj; }\n      }\n      if ($opt instanceof Resumable) {\n        if (typeof $opt.opts[o] !== 'undefined') { return $opt.opts[o]; }\n        else { return $opt.defaults[o]; }\n      }\n    };\n    $.indexOf = function(array, obj) {\n    \tif (array.indexOf) { return array.indexOf(obj); }     \n    \tfor (var i = 0; i < array.length; i++) {\n            if (array[i] === obj) { return i; }\n        }\n        return -1;\n    }\n\n    // EVENTS\n    // catchAll(event, ...)\n    // fileSuccess(file), fileProgress(file), fileAdded(file, event), filesAdded(files, filesSkipped), fileRetry(file),\n    // fileError(file, message), complete(), progress(), error(message, file), pause()\n    $.events = [];\n    $.on = function(event,callback){\n      $.events.push(event.toLowerCase(), callback);\n    };\n    $.fire = function(){\n      // `arguments` is an object, not array, in FF, so:\n      var args = [];\n      for (var i=0; i<arguments.length; i++) args.push(arguments[i]);\n      // Find event listeners, and support pseudo-event `catchAll`\n      var event = args[0].toLowerCase();\n      for (var i=0; i<=$.events.length; i+=2) {\n        if($.events[i]==event) $.events[i+1].apply($,args.slice(1));\n        if($.events[i]=='catchall') $.events[i+1].apply(null,args);\n      }\n      if(event=='fileerror') $.fire('error', args[2], args[1]);\n      if(event=='fileprogress') $.fire('progress');\n    };\n\n\n    // INTERNAL HELPER METHODS (handy, but ultimately not part of uploading)\n    var $h = {\n      stopEvent: function(e){\n        e.stopPropagation();\n        e.preventDefault();\n      },\n      each: function(o,callback){\n        if(typeof(o.length)!=='undefined') {\n          for (var i=0; i<o.length; i++) {\n            // Array or FileList\n            if(callback(o[i])===false) return;\n          }\n        } else {\n          for (i in o) {\n            // Object\n            if(callback(i,o[i])===false) return;\n          }\n        }\n      },\n      generateUniqueIdentifier:function(file, event){\n        var custom = $.getOpt('generateUniqueIdentifier');\n        if(typeof custom === 'function') {\n          return custom(file, event);\n        }\n        var relativePath = file.webkitRelativePath||file.relativePath||file.fileName||file.name; // Some confusion in different versions of Firefox\n        var size = file.size;\n        return(size + '-' + relativePath.replace(/[^0-9a-zA-Z_-]/img, ''));\n      },\n      contains:function(array,test) {\n        var result = false;\n\n        $h.each(array, function(value) {\n          if (value == test) {\n            result = true;\n            return false;\n          }\n          return true;\n        });\n\n        return result;\n      },\n      formatSize:function(size){\n        if(size<1024) {\n          return size + ' bytes';\n        } else if(size<1024*1024) {\n          return (size/1024.0).toFixed(0) + ' KB';\n        } else if(size<1024*1024*1024) {\n          return (size/1024.0/1024.0).toFixed(1) + ' MB';\n        } else {\n          return (size/1024.0/1024.0/1024.0).toFixed(1) + ' GB';\n        }\n      },\n      getTarget:function(request, params){\n        var target = $.getOpt('target');\n\n        if (request === 'test' && $.getOpt('testTarget')) {\n          target = $.getOpt('testTarget') === '/' ? $.getOpt('target') : $.getOpt('testTarget');\n        }\n\n        if (typeof target === 'function') {\n          return target(params);\n        }\n\n        var separator = target.indexOf('?') < 0 ? '?' : '&';\n        var joinedParams = params.join('&');\n\n        if (joinedParams) target = target + separator + joinedParams;\n\n        return target;\n      }\n    };\n\n    var onDrop = function(e){\n      e.currentTarget.classList.remove($.getOpt('dragOverClass'));\n      $h.stopEvent(e);\n\n      //handle dropped things as items if we can (this lets us deal with folders nicer in some cases)\n      if (e.dataTransfer && e.dataTransfer.items) {\n        loadFiles(e.dataTransfer.items, e);\n      }\n      //else handle them as files\n      else if (e.dataTransfer && e.dataTransfer.files) {\n        loadFiles(e.dataTransfer.files, e);\n      }\n    };\n    var onDragLeave = function(e){\n      e.currentTarget.classList.remove($.getOpt('dragOverClass'));\n    };\n    var onDragOverEnter = function(e) {\n      e.preventDefault();\n      var dt = e.dataTransfer;\n      if ($.indexOf(dt.types, \"Files\") >= 0) { // only for file drop\n        e.stopPropagation();\n        dt.dropEffect = \"copy\";\n        dt.effectAllowed = \"copy\";\n        e.currentTarget.classList.add($.getOpt('dragOverClass'));\n      } else { // not work on IE/Edge....\n        dt.dropEffect = \"none\";\n        dt.effectAllowed = \"none\";\n      }\n    };\n\n    /**\n     * processes a single upload item (file or directory)\n     * @param {Object} item item to upload, may be file or directory entry\n     * @param {string} path current file path\n     * @param {File[]} items list of files to append new items to\n     * @param {Function} cb callback invoked when item is processed\n     */\n    function processItem(item, path, items, cb) {\n      var entry;\n      if(item.isFile){\n        // file provided\n        return item.file(function(file){\n          file.relativePath = path + file.name;\n          items.push(file);\n          cb();\n        });\n      }else if(item.isDirectory){\n        // item is already a directory entry, just assign\n        entry = item;\n      }else if(item instanceof File) {\n        items.push(item);\n      }\n      if('function' === typeof item.webkitGetAsEntry){\n        // get entry from file object\n        entry = item.webkitGetAsEntry();\n      }\n      if(entry && entry.isDirectory){\n        // directory provided, process it\n        return processDirectory(entry, path + entry.name + '/', items, cb);\n      }\n      if('function' === typeof item.getAsFile){\n        // item represents a File object, convert it\n        item = item.getAsFile();\n        if(item instanceof File) {\n          item.relativePath = path + item.name;\n          items.push(item);\n        }\n      }\n      cb(); // indicate processing is done\n    }\n\n\n    /**\n     * cps-style list iteration.\n     * invokes all functions in list and waits for their callback to be\n     * triggered.\n     * @param  {Function[]}   items list of functions expecting callback parameter\n     * @param  {Function} cb    callback to trigger after the last callback has been invoked\n     */\n    function processCallbacks(items, cb){\n      if(!items || items.length === 0){\n        // empty or no list, invoke callback\n        return cb();\n      }\n      // invoke current function, pass the next part as continuation\n      items[0](function(){\n        processCallbacks(items.slice(1), cb);\n      });\n    }\n\n    /**\n     * recursively traverse directory and collect files to upload\n     * @param  {Object}   directory directory to process\n     * @param  {string}   path      current path\n     * @param  {File[]}   items     target list of items\n     * @param  {Function} cb        callback invoked after traversing directory\n     */\n    function processDirectory (directory, path, items, cb) {\n      var dirReader = directory.createReader();\n      var allEntries = [];\n\n      function readEntries () {\n        dirReader.readEntries(function(entries){\n          if (entries.length) {\n            allEntries = allEntries.concat(entries);\n            return readEntries();\n          }\n\n          // process all conversion callbacks, finally invoke own one\n          processCallbacks(\n            allEntries.map(function(entry){\n              // bind all properties except for callback\n              return processItem.bind(null, entry, path, items);\n            }),\n            cb\n          );\n        });\n      }\n\n      readEntries();\n    }\n\n    /**\n     * process items to extract files to be uploaded\n     * @param  {File[]} items items to process\n     * @param  {Event} event event that led to upload\n     */\n    function loadFiles(items, event) {\n      if(!items.length){\n        return; // nothing to do\n      }\n      $.fire('beforeAdd');\n      var files = [];\n      processCallbacks(\n          Array.prototype.map.call(items, function(item){\n            // bind all properties except for callback\n            var entry = item;\n            if('function' === typeof item.webkitGetAsEntry){\n              entry = item.webkitGetAsEntry();\n            }\n            return processItem.bind(null, entry, \"\", files);\n          }),\n          function(){\n            if(files.length){\n              // at least one file found\n              appendFilesFromFileList(files, event);\n            }\n          }\n      );\n    };\n\n    var appendFilesFromFileList = function(fileList, event){\n      // check for uploading too many files\n      var errorCount = 0;\n      var o = $.getOpt(['maxFiles', 'minFileSize', 'maxFileSize', 'maxFilesErrorCallback', 'minFileSizeErrorCallback', 'maxFileSizeErrorCallback', 'fileType', 'fileTypeErrorCallback']);\n      if (typeof(o.maxFiles)!=='undefined' && o.maxFiles<(fileList.length+$.files.length)) {\n        // if single-file upload, file is already added, and trying to add 1 new file, simply replace the already-added file\n        if (o.maxFiles===1 && $.files.length===1 && fileList.length===1) {\n          $.removeFile($.files[0]);\n        } else {\n          o.maxFilesErrorCallback(fileList, errorCount++);\n          return false;\n        }\n      }\n      var files = [], filesSkipped = [], remaining = fileList.length;\n      var decreaseReamining = function(){\n        if(!--remaining){\n          // all files processed, trigger event\n          if(!files.length && !filesSkipped.length){\n            // no succeeded files, just skip\n            return;\n          }\n          window.setTimeout(function(){\n            $.fire('filesAdded', files, filesSkipped);\n          },0);\n        }\n      };\n      $h.each(fileList, function(file){\n        var fileName = file.name;\n        var fileType = file.type; // e.g video/mp4\n        if(o.fileType.length > 0){\n          var fileTypeFound = false;\n          for(var index in o.fileType){\n            // For good behaviour we do some inital sanitizing. Remove spaces and lowercase all\n            o.fileType[index] = o.fileType[index].replace(/\\s/g, '').toLowerCase();\n\n            // Allowing for both [extension, .extension, mime/type, mime/*]\n            var extension = ((o.fileType[index].match(/^[^.][^/]+$/)) ? '.' : '') + o.fileType[index];\n\n            if ((fileName.substr(-1 * extension.length).toLowerCase() === extension) ||\n              //If MIME type, check for wildcard or if extension matches the files tiletype\n              (extension.indexOf('/') !== -1 && (\n                (extension.indexOf('*') !== -1 && fileType.substr(0, extension.indexOf('*')) === extension.substr(0, extension.indexOf('*'))) ||\n                fileType === extension\n              ))\n            ){\n              fileTypeFound = true;\n              break;\n            }\n          }\n          if (!fileTypeFound) {\n            o.fileTypeErrorCallback(file, errorCount++);\n            return true;\n          }\n        }\n\n        if (typeof(o.minFileSize)!=='undefined' && file.size<o.minFileSize) {\n          o.minFileSizeErrorCallback(file, errorCount++);\n          return true;\n        }\n        if (typeof(o.maxFileSize)!=='undefined' && file.size>o.maxFileSize) {\n          o.maxFileSizeErrorCallback(file, errorCount++);\n          return true;\n        }\n\n        function addFile(uniqueIdentifier){\n          if (!$.getFromUniqueIdentifier(uniqueIdentifier)) {(function(){\n            file.uniqueIdentifier = uniqueIdentifier;\n            var f = new ResumableFile($, file, uniqueIdentifier);\n            $.files.push(f);\n            files.push(f);\n            f.container = (typeof event != 'undefined' ? event.srcElement : null);\n            window.setTimeout(function(){\n              $.fire('fileAdded', f, event)\n            },0);\n          })()} else {\n            filesSkipped.push(file);\n          };\n          decreaseReamining();\n        }\n        // directories have size == 0\n        var uniqueIdentifier = $h.generateUniqueIdentifier(file, event);\n        if(uniqueIdentifier && typeof uniqueIdentifier.then === 'function'){\n          // Promise or Promise-like object provided as unique identifier\n          uniqueIdentifier\n          .then(\n            function(uniqueIdentifier){\n              // unique identifier generation succeeded\n              addFile(uniqueIdentifier);\n            },\n           function(){\n              // unique identifier generation failed\n              // skip further processing, only decrease file count\n              decreaseReamining();\n            }\n          );\n        }else{\n          // non-Promise provided as unique identifier, process synchronously\n          addFile(uniqueIdentifier);\n        }\n      });\n    };\n\n    // INTERNAL OBJECT TYPES\n    function ResumableFile(resumableObj, file, uniqueIdentifier){\n      var $ = this;\n      $.opts = {};\n      $.getOpt = resumableObj.getOpt;\n      $._prevProgress = 0;\n      $.resumableObj = resumableObj;\n      $.file = file;\n      $.fileName = file.fileName||file.name; // Some confusion in different versions of Firefox\n      $.size = file.size;\n      $.relativePath = file.relativePath || file.webkitRelativePath || $.fileName;\n      $.uniqueIdentifier = uniqueIdentifier;\n      $._pause = false;\n      $.container = '';\n      $.preprocessState = 0; // 0 = unprocessed, 1 = processing, 2 = finished\n      var _error = uniqueIdentifier !== undefined;\n\n      // Callback when something happens within the chunk\n      var chunkEvent = function(event, message){\n        // event can be 'progress', 'success', 'error' or 'retry'\n        switch(event){\n        case 'progress':\n          $.resumableObj.fire('fileProgress', $, message);\n          break;\n        case 'error':\n          $.abort();\n          _error = true;\n          $.chunks = [];\n          $.resumableObj.fire('fileError', $, message);\n          break;\n        case 'success':\n          if(_error) return;\n          $.resumableObj.fire('fileProgress', $, message); // it's at least progress\n          if($.isComplete()) {\n            $.resumableObj.fire('fileSuccess', $, message);\n          }\n          break;\n        case 'retry':\n          $.resumableObj.fire('fileRetry', $);\n          break;\n        }\n      };\n\n      // Main code to set up a file object with chunks,\n      // packaged to be able to handle retries if needed.\n      $.chunks = [];\n      $.abort = function(){\n        // Stop current uploads\n        var abortCount = 0;\n        $h.each($.chunks, function(c){\n          if(c.status()=='uploading') {\n            c.abort();\n            abortCount++;\n          }\n        });\n        if(abortCount>0) $.resumableObj.fire('fileProgress', $);\n      };\n      $.cancel = function(){\n        // Reset this file to be void\n        var _chunks = $.chunks;\n        $.chunks = [];\n        // Stop current uploads\n        $h.each(_chunks, function(c){\n          if(c.status()=='uploading')  {\n            c.abort();\n            $.resumableObj.uploadNextChunk();\n          }\n        });\n        $.resumableObj.removeFile($);\n        $.resumableObj.fire('fileProgress', $);\n      };\n      $.retry = function(){\n        $.bootstrap();\n        var firedRetry = false;\n        $.resumableObj.on('chunkingComplete', function(){\n          if(!firedRetry) $.resumableObj.upload();\n          firedRetry = true;\n        });\n      };\n      $.bootstrap = function(){\n        $.abort();\n        _error = false;\n        // Rebuild stack of chunks from file\n        $.chunks = [];\n        $._prevProgress = 0;\n        var round = $.getOpt('forceChunkSize') ? Math.ceil : Math.floor;\n        var maxOffset = Math.max(round($.file.size/$.getOpt('chunkSize')),1);\n        for (var offset=0; offset<maxOffset; offset++) {(function(offset){\n            $.chunks.push(new ResumableChunk($.resumableObj, $, offset, chunkEvent));\n            $.resumableObj.fire('chunkingProgress',$,offset/maxOffset);\n        })(offset)}\n        window.setTimeout(function(){\n            $.resumableObj.fire('chunkingComplete',$);\n        },0);\n      };\n      $.progress = function(){\n        if(_error) return(1);\n        // Sum up progress across everything\n        var ret = 0;\n        var error = false;\n        $h.each($.chunks, function(c){\n          if(c.status()=='error') error = true;\n          ret += c.progress(true); // get chunk progress relative to entire file\n        });\n        ret = (error ? 1 : (ret>0.99999 ? 1 : ret));\n        ret = Math.max($._prevProgress, ret); // We don't want to lose percentages when an upload is paused\n        $._prevProgress = ret;\n        return(ret);\n      };\n      $.isUploading = function(){\n        var uploading = false;\n        $h.each($.chunks, function(chunk){\n          if(chunk.status()=='uploading') {\n            uploading = true;\n            return(false);\n          }\n        });\n        return(uploading);\n      };\n      $.isComplete = function(){\n        var outstanding = false;\n        if ($.preprocessState === 1) {\n          return(false);\n        }\n        $h.each($.chunks, function(chunk){\n          var status = chunk.status();\n          if(status=='pending' || status=='uploading' || chunk.preprocessState === 1) {\n            outstanding = true;\n            return(false);\n          }\n        });\n        return(!outstanding);\n      };\n      $.pause = function(pause){\n          if(typeof(pause)==='undefined'){\n              $._pause = ($._pause ? false : true);\n          }else{\n              $._pause = pause;\n          }\n      };\n      $.isPaused = function() {\n        return $._pause;\n      };\n      $.preprocessFinished = function(){\n        $.preprocessState = 2;\n        $.upload();\n      };\n      $.upload = function () {\n        var found = false;\n        if ($.isPaused() === false) {\n          var preprocess = $.getOpt('preprocessFile');\n          if(typeof preprocess === 'function') {\n            switch($.preprocessState) {\n            case 0: $.preprocessState = 1; preprocess($); return(true);\n            case 1: return(true);\n            case 2: break;\n            }\n          }\n          $h.each($.chunks, function (chunk) {\n            if (chunk.status() == 'pending' && chunk.preprocessState !== 1) {\n              chunk.send();\n              found = true;\n              return(false);\n            }\n          });\n        }\n        return(found);\n      }\n      $.markChunksCompleted = function (chunkNumber) {\n        if (!$.chunks || $.chunks.length <= chunkNumber) {\n            return;\n        }\n        for (var num = 0; num < chunkNumber; num++) {\n            $.chunks[num].markComplete = true;\n        }\n      };\n\n      // Bootstrap and return\n      $.resumableObj.fire('chunkingStart', $);\n      $.bootstrap();\n      return(this);\n    }\n\n\n    function ResumableChunk(resumableObj, fileObj, offset, callback){\n      var $ = this;\n      $.opts = {};\n      $.getOpt = resumableObj.getOpt;\n      $.resumableObj = resumableObj;\n      $.fileObj = fileObj;\n      $.fileObjSize = fileObj.size;\n      $.fileObjType = fileObj.file.type;\n      $.offset = offset;\n      $.callback = callback;\n      $.lastProgressCallback = (new Date);\n      $.tested = false;\n      $.retries = 0;\n      $.pendingRetry = false;\n      $.preprocessState = 0; // 0 = unprocessed, 1 = processing, 2 = finished\n      $.markComplete = false;\n\n      // Computed properties\n      var chunkSize = $.getOpt('chunkSize');\n      $.loaded = 0;\n      $.startByte = $.offset*chunkSize;\n      $.endByte = Math.min($.fileObjSize, ($.offset+1)*chunkSize);\n      if ($.fileObjSize-$.endByte < chunkSize && !$.getOpt('forceChunkSize')) {\n        // The last chunk will be bigger than the chunk size, but less than 2*chunkSize\n        $.endByte = $.fileObjSize;\n      }\n      $.xhr = null;\n\n      // test() makes a GET request without any data to see if the chunk has already been uploaded in a previous session\n      $.test = function(){\n        // Set up request and listen for event\n        $.xhr = new XMLHttpRequest();\n\n        var testHandler = function(e){\n          $.tested = true;\n          var status = $.status();\n          if(status=='success') {\n            $.callback(status, $.message());\n            $.resumableObj.uploadNextChunk();\n          } else {\n            $.send();\n          }\n        };\n        $.xhr.addEventListener('load', testHandler, false);\n        $.xhr.addEventListener('error', testHandler, false);\n        $.xhr.addEventListener('timeout', testHandler, false);\n\n        // Add data from the query options\n        var params = [];\n        var parameterNamespace = $.getOpt('parameterNamespace');\n        var customQuery = $.getOpt('query');\n        if(typeof customQuery == 'function') customQuery = customQuery($.fileObj, $);\n        $h.each(customQuery, function(k,v){\n          params.push([encodeURIComponent(parameterNamespace+k), encodeURIComponent(v)].join('='));\n        });\n        // Add extra data to identify chunk\n        params = params.concat(\n          [\n            // define key/value pairs for additional parameters\n            ['chunkNumberParameterName', $.offset + 1],\n            ['chunkSizeParameterName', $.getOpt('chunkSize')],\n            ['currentChunkSizeParameterName', $.endByte - $.startByte],\n            ['totalSizeParameterName', $.fileObjSize],\n            ['typeParameterName', $.fileObjType],\n            ['identifierParameterName', $.fileObj.uniqueIdentifier],\n            ['fileNameParameterName', $.fileObj.fileName],\n            ['relativePathParameterName', $.fileObj.relativePath],\n            ['totalChunksParameterName', $.fileObj.chunks.length]\n          ].filter(function(pair){\n            // include items that resolve to truthy values\n            // i.e. exclude false, null, undefined and empty strings\n            return $.getOpt(pair[0]);\n          })\n          .map(function(pair){\n            // map each key/value pair to its final form\n            return [\n              parameterNamespace + $.getOpt(pair[0]),\n              encodeURIComponent(pair[1])\n            ].join('=');\n          })\n        );\n        // Append the relevant chunk and send it\n        $.xhr.open($.getOpt('testMethod'), $h.getTarget('test', params));\n        $.xhr.timeout = $.getOpt('xhrTimeout');\n        $.xhr.withCredentials = $.getOpt('withCredentials');\n        // Add data from header options\n        var customHeaders = $.getOpt('headers');\n        if(typeof customHeaders === 'function') {\n          customHeaders = customHeaders($.fileObj, $);\n        }\n        $h.each(customHeaders, function(k,v) {\n          $.xhr.setRequestHeader(k, v);\n        });\n        $.xhr.send(null);\n      };\n\n      $.preprocessFinished = function(){\n        $.preprocessState = 2;\n        $.send();\n      };\n\n      // send() uploads the actual data in a POST call\n      $.send = function(){\n        var preprocess = $.getOpt('preprocess');\n        if(typeof preprocess === 'function') {\n          switch($.preprocessState) {\n          case 0: $.preprocessState = 1; preprocess($); return;\n          case 1: return;\n          case 2: break;\n          }\n        }\n        if($.getOpt('testChunks') && !$.tested) {\n          $.test();\n          return;\n        }\n\n        // Set up request and listen for event\n        $.xhr = new XMLHttpRequest();\n\n        // Progress\n        $.xhr.upload.addEventListener('progress', function(e){\n          if( (new Date) - $.lastProgressCallback > $.getOpt('throttleProgressCallbacks') * 1000 ) {\n            $.callback('progress');\n            $.lastProgressCallback = (new Date);\n          }\n          $.loaded=e.loaded||0;\n        }, false);\n        $.loaded = 0;\n        $.pendingRetry = false;\n        $.callback('progress');\n\n        // Done (either done, failed or retry)\n        var doneHandler = function(e){\n          var status = $.status();\n          if(status=='success'||status=='error') {\n            $.callback(status, $.message());\n            $.resumableObj.uploadNextChunk();\n          } else {\n            $.callback('retry', $.message());\n            $.abort();\n            $.retries++;\n            var retryInterval = $.getOpt('chunkRetryInterval');\n            if(retryInterval !== undefined) {\n              $.pendingRetry = true;\n              setTimeout($.send, retryInterval);\n            } else {\n              $.send();\n            }\n          }\n        };\n        $.xhr.addEventListener('load', doneHandler, false);\n        $.xhr.addEventListener('error', doneHandler, false);\n        $.xhr.addEventListener('timeout', doneHandler, false);\n\n        // Set up the basic query data from Resumable\n        var query = [\n          ['chunkNumberParameterName', $.offset + 1],\n          ['chunkSizeParameterName', $.getOpt('chunkSize')],\n          ['currentChunkSizeParameterName', $.endByte - $.startByte],\n          ['totalSizeParameterName', $.fileObjSize],\n          ['typeParameterName', $.fileObjType],\n          ['identifierParameterName', $.fileObj.uniqueIdentifier],\n          ['fileNameParameterName', $.fileObj.fileName],\n          ['relativePathParameterName', $.fileObj.relativePath],\n          ['totalChunksParameterName', $.fileObj.chunks.length],\n        ].filter(function(pair){\n          // include items that resolve to truthy values\n          // i.e. exclude false, null, undefined and empty strings\n          return $.getOpt(pair[0]);\n        })\n        .reduce(function(query, pair){\n          // assign query key/value\n          query[$.getOpt(pair[0])] = pair[1];\n          return query;\n        }, {});\n        // Mix in custom data\n        var customQuery = $.getOpt('query');\n        if(typeof customQuery == 'function') customQuery = customQuery($.fileObj, $);\n        $h.each(customQuery, function(k,v){\n          query[k] = v;\n        });\n\n        var func = ($.fileObj.file.slice ? 'slice' : ($.fileObj.file.mozSlice ? 'mozSlice' : ($.fileObj.file.webkitSlice ? 'webkitSlice' : 'slice')));\n        var bytes = $.fileObj.file[func]($.startByte, $.endByte, $.getOpt('setChunkTypeFromFile') ? $.fileObj.file.type : \"\");\n        var data = null;\n        var params = [];\n\n        var parameterNamespace = $.getOpt('parameterNamespace');\n                if ($.getOpt('method') === 'octet') {\n                    // Add data from the query options\n                    data = bytes;\n                    $h.each(query, function (k, v) {\n                        params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n                    });\n                } else {\n                    // Add data from the query options\n                    data = new FormData();\n                    $h.each(query, function (k, v) {\n                        data.append(parameterNamespace + k, v);\n                        params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n                    });\n                    if ($.getOpt('chunkFormat') == 'blob') {\n                        data.append(parameterNamespace + $.getOpt('fileParameterName'), bytes, $.fileObj.fileName);\n                    }\n                    else if ($.getOpt('chunkFormat') == 'base64') {\n                        var fr = new FileReader();\n                        fr.onload = function (e) {\n                            data.append(parameterNamespace + $.getOpt('fileParameterName'), fr.result);\n                            $.xhr.send(data);\n                        }\n                        fr.readAsDataURL(bytes);\n                    }\n                }\n\n        var target = $h.getTarget('upload', params);\n        var method = $.getOpt('uploadMethod');\n\n        $.xhr.open(method, target);\n        if ($.getOpt('method') === 'octet') {\n          $.xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n        }\n        $.xhr.timeout = $.getOpt('xhrTimeout');\n        $.xhr.withCredentials = $.getOpt('withCredentials');\n        // Add data from header options\n        var customHeaders = $.getOpt('headers');\n        if(typeof customHeaders === 'function') {\n          customHeaders = customHeaders($.fileObj, $);\n        }\n\n        $h.each(customHeaders, function(k,v) {\n          $.xhr.setRequestHeader(k, v);\n        });\n\n        if ($.getOpt('chunkFormat') == 'blob') {\n            $.xhr.send(data);\n        }\n      };\n      $.abort = function(){\n        // Abort and reset\n        if($.xhr) $.xhr.abort();\n        $.xhr = null;\n      };\n      $.status = function(){\n        // Returns: 'pending', 'uploading', 'success', 'error'\n        if($.pendingRetry) {\n          // if pending retry then that's effectively the same as actively uploading,\n          // there might just be a slight delay before the retry starts\n          return('uploading');\n        } else if($.markComplete) {\n          return 'success';\n        } else if(!$.xhr) {\n          return('pending');\n        } else if($.xhr.readyState<4) {\n          // Status is really 'OPENED', 'HEADERS_RECEIVED' or 'LOADING' - meaning that stuff is happening\n          return('uploading');\n        } else {\n          if($.xhr.status == 200 || $.xhr.status == 201) {\n            // HTTP 200, 201 (created)\n            return('success');\n          } else if($h.contains($.getOpt('permanentErrors'), $.xhr.status) || $.retries >= $.getOpt('maxChunkRetries')) {\n            // HTTP 400, 404, 409, 415, 500, 501 (permanent error)\n            return('error');\n          } else {\n            // this should never happen, but we'll reset and queue a retry\n            // a likely case for this would be 503 service unavailable\n            $.abort();\n            return('pending');\n          }\n        }\n      };\n      $.message = function(){\n        return($.xhr ? $.xhr.responseText : '');\n      };\n      $.progress = function(relative){\n        if(typeof(relative)==='undefined') relative = false;\n        var factor = (relative ? ($.endByte-$.startByte)/$.fileObjSize : 1);\n        if($.pendingRetry) return(0);\n        if((!$.xhr || !$.xhr.status) && !$.markComplete) factor*=.95;\n        var s = $.status();\n        switch(s){\n        case 'success':\n        case 'error':\n          return(1*factor);\n        case 'pending':\n          return(0*factor);\n        default:\n          return($.loaded/($.endByte-$.startByte)*factor);\n        }\n      };\n      return(this);\n    }\n\n    // QUEUE\n    $.uploadNextChunk = function(){\n      var found = false;\n\n      // In some cases (such as videos) it's really handy to upload the first\n      // and last chunk of a file quickly; this let's the server check the file's\n      // metadata and determine if there's even a point in continuing.\n      if ($.getOpt('prioritizeFirstAndLastChunk')) {\n        $h.each($.files, function(file){\n          if(file.chunks.length && file.chunks[0].status()=='pending' && file.chunks[0].preprocessState === 0) {\n            file.chunks[0].send();\n            found = true;\n            return(false);\n          }\n          if(file.chunks.length>1 && file.chunks[file.chunks.length-1].status()=='pending' && file.chunks[file.chunks.length-1].preprocessState === 0) {\n            file.chunks[file.chunks.length-1].send();\n            found = true;\n            return(false);\n          }\n        });\n        if(found) return(true);\n      }\n\n      // Now, simply look for the next, best thing to upload\n      $h.each($.files, function(file){\n        found = file.upload();\n        if(found) return(false);\n      });\n      if(found) return(true);\n\n      // The are no more outstanding chunks to upload, check is everything is done\n      var outstanding = false;\n      $h.each($.files, function(file){\n        if(!file.isComplete()) {\n          outstanding = true;\n          return(false);\n        }\n      });\n      if(!outstanding) {\n        // All chunks have been uploaded, complete\n        $.fire('complete');\n      }\n      return(false);\n    };\n\n\n    // PUBLIC METHODS FOR RESUMABLE.JS\n    $.assignBrowse = function(domNodes, isDirectory){\n      if(typeof(domNodes.length)=='undefined') domNodes = [domNodes];\n      $h.each(domNodes, function(domNode) {\n        var input;\n        if(domNode.tagName==='INPUT' && domNode.type==='file'){\n          input = domNode;\n        } else {\n          input = document.createElement('input');\n          input.setAttribute('type', 'file');\n          input.style.display = 'none';\n          domNode.addEventListener('click', function(){\n            input.style.opacity = 0;\n            input.style.display='block';\n            input.focus();\n            input.click();\n            input.style.display='none';\n          }, false);\n          domNode.appendChild(input);\n        }\n        var maxFiles = $.getOpt('maxFiles');\n        if (typeof(maxFiles)==='undefined'||maxFiles!=1){\n          input.setAttribute('multiple', 'multiple');\n        } else {\n          input.removeAttribute('multiple');\n        }\n        if(isDirectory){\n          input.setAttribute('webkitdirectory', 'webkitdirectory');\n        } else {\n          input.removeAttribute('webkitdirectory');\n        }\n        var fileTypes = $.getOpt('fileType');\n        if (typeof (fileTypes) !== 'undefined' && fileTypes.length >= 1) {\n          input.setAttribute('accept', fileTypes.map(function (e) {\n            e = e.replace(/\\s/g, '').toLowerCase();\n            if(e.match(/^[^.][^/]+$/)){\n              e = '.' + e;\n            }\n            return e;\n          }).join(','));\n        }\n        else {\n          input.removeAttribute('accept');\n        }\n        // When new files are added, simply append them to the overall list\n        input.addEventListener('change', function(e){\n          appendFilesFromFileList(e.target.files,e);\n          var clearInput = $.getOpt('clearInput');\n          if (clearInput) {\n            e.target.value = '';\n          }\n        }, false);\n      });\n    };\n    $.assignDrop = function(domNodes){\n      if(typeof(domNodes.length)=='undefined') domNodes = [domNodes];\n\n      $h.each(domNodes, function(domNode) {\n        domNode.addEventListener('dragover', onDragOverEnter, false);\n        domNode.addEventListener('dragenter', onDragOverEnter, false);\n        domNode.addEventListener('dragleave', onDragLeave, false);\n        domNode.addEventListener('drop', onDrop, false);\n      });\n    };\n    $.unAssignDrop = function(domNodes) {\n      if (typeof(domNodes.length) == 'undefined') domNodes = [domNodes];\n\n      $h.each(domNodes, function(domNode) {\n        domNode.removeEventListener('dragover', onDragOverEnter);\n        domNode.removeEventListener('dragenter', onDragOverEnter);\n        domNode.removeEventListener('dragleave', onDragLeave);\n        domNode.removeEventListener('drop', onDrop);\n      });\n    };\n    $.isUploading = function(){\n      var uploading = false;\n      $h.each($.files, function(file){\n        if (file.isUploading()) {\n          uploading = true;\n          return(false);\n        }\n      });\n      return(uploading);\n    };\n    $.upload = function(){\n      // Make sure we don't start too many uploads at once\n      if($.isUploading()) return;\n      // Kick off the queue\n      $.fire('uploadStart');\n      for (var num=1; num<=$.getOpt('simultaneousUploads'); num++) {\n        $.uploadNextChunk();\n      }\n    };\n    $.pause = function(){\n      // Resume all chunks currently being uploaded\n      $h.each($.files, function(file){\n        file.abort();\n      });\n      $.fire('pause');\n    };\n    $.cancel = function(){\n      $.fire('beforeCancel');\n      for(var i = $.files.length - 1; i >= 0; i--) {\n        $.files[i].cancel();\n      }\n      $.fire('cancel');\n    };\n    $.progress = function(){\n      var totalDone = 0;\n      var totalSize = 0;\n      // Resume all chunks currently being uploaded\n      $h.each($.files, function(file){\n        totalDone += file.progress()*file.size;\n        totalSize += file.size;\n      });\n      return(totalSize>0 ? totalDone/totalSize : 0);\n    };\n    $.addFile = function(file, event){\n      appendFilesFromFileList([file], event);\n    };\n    $.addFiles = function(files, event){\n      appendFilesFromFileList(files, event);\n    };\n    $.removeFile = function(file){\n      for(var i = $.files.length - 1; i >= 0; i--) {\n        if($.files[i] === file) {\n          $.files.splice(i, 1);\n        }\n      }\n    };\n    $.getFromUniqueIdentifier = function(uniqueIdentifier){\n      var ret = false;\n      $h.each($.files, function(f){\n        if(f.uniqueIdentifier==uniqueIdentifier) ret = f;\n      });\n      return(ret);\n    };\n    $.getSize = function(){\n      var totalSize = 0;\n      $h.each($.files, function(file){\n        totalSize += file.size;\n      });\n      return(totalSize);\n    };\n    $.handleDropEvent = function (e) {\n      onDrop(e);\n    };\n    $.handleChangeEvent = function (e) {\n      appendFilesFromFileList(e.target.files, e);\n      e.target.value = '';\n    };\n    $.updateQuery = function(query){\n        $.opts.query = query;\n    };\n\n    return(this);\n  };\n\n\n  // Node.js-style export for Node and Component\n  if (typeof module != 'undefined') {\n    // left here for backwards compatibility\n    module.exports = Resumable;\n    module.exports.Resumable = Resumable;\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD/requirejs: Define the module\n    define(function(){\n      return Resumable;\n    });\n  } else {\n    // Browser: Expose to window\n    window.Resumable = Resumable;\n  }\n\n})();\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.html",
          "type": "blob",
          "size": 1.142578125,
          "content": "<a href=\"#\" id=\"browseButton\">Select files</a>\n\n<script src=\"resumable.js\"></script>\n<script>\nvar r = new Resumable({\n  target: 'test.html'\n});\n\n\nr.assignBrowse(document.getElementById('browseButton'));\n\nr.on('fileSuccess', function(file){\n    console.debug('fileSuccess',file);\n  });\nr.on('fileProgress', function(file){\n    console.debug('fileProgress', file);\n  });\nr.on('fileAdded', function(file, event){\n    r.upload();\n    console.debug('fileAdded', event);\n  });\nr.on('filesAdded', function(array){\n    r.upload();\n    console.debug('filesAdded', array);\n  });\nr.on('fileRetry', function(file){\n    console.debug('fileRetry', file);\n  });\nr.on('fileError', function(file, message){\n    console.debug('fileError', file, message);\n  });\nr.on('uploadStart', function(){\n    console.debug('uploadStart');\n  });\nr.on('complete', function(){\n    console.debug('complete');\n  });\nr.on('progress', function(){\n    console.debug('progress');\n  });\nr.on('error', function(message, file){\n    console.debug('error', message, file);\n  });\nr.on('pause', function(){\n    console.debug('pause');\n  });\nr.on('cancel', function(){\n    console.debug('cancel');\n  });\n</script>\n\n\n\n"
        }
      ]
    }
  ]
}