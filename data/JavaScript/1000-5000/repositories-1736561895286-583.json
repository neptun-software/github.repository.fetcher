{
  "metadata": {
    "timestamp": 1736561895286,
    "page": 583,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dataarts/webgl-globe",
      "stars": 3650,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.015625,
          "content": ".idea\n.DS_Store\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.548828125,
          "content": "Copyright 2015 Google Data Arts Team\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.09765625,
          "content": "The **WebGL Globe** is an open platform for geographic data visualization created by the Google Data Arts Team. We encourage you to copy the code, add your own data, and create your own globes.\n\nCheck out the examples at https://experiments.withgoogle.com/chrome/globe, and if you create a globe, please [share it with us](http://www.chromeexperiments.com/submit). We post our favorite globes publicly.\n\n![](http://4.bp.blogspot.com/-nB6XnTgb4AA/TcLQ4gRBtfI/AAAAAAAAH-U/vb2GuhPN6aM/globe.png)\n\n----\n\n**The WebGL Globe** supports data in `JSON` format, a sample of which you can find [here](https://github.com/dataarts/webgl-globe/blob/master/globe/population909500.json). `webgl-globe` makes heavy use of the [Three.js library](https://github.com/mrdoob/three.js/).\n\n# Data Format\n\nThe following illustrates the `JSON` data format that the globe expects:\n\n```javascript\nvar data = [\n    [\n    'seriesA', [ latitude, longitude, magnitude, latitude, longitude, magnitude, ... ]\n    ],\n    [\n    'seriesB', [ latitude, longitude, magnitude, latitude, longitude, magnitude, ... ]\n    ]\n];\n```\n\n# Basic Usage\n\nThe following code polls a `JSON` file (formatted like the one above) for geo-data and adds it to an animated, interactive WebGL globe.\n\n```javascript\n// Where to put the globe?\nvar container = document.getElementById( 'container' );\n\n// Make the globe\nvar globe = new DAT.Globe( container );\n\n// We're going to ask a file for the JSON data.\nvar xhr = new XMLHttpRequest();\n\n// Where do we get the data?\nxhr.open( 'GET', 'myjson.json', true );\n\n// What do we do when we have it?\nxhr.onreadystatechange = function() {\n\n    // If we've received the data\n    if ( xhr.readyState === 4 && xhr.status === 200 ) {\n\n        // Parse the JSON\n        var data = JSON.parse( xhr.responseText );\n\n        // Tell the globe about your JSON data\n        for ( var i = 0; i < data.length; i ++ ) {\n            globe.addData( data[i][1], {format: 'magnitude', name: data[i][0]} );\n        }\n\n        // Create the geometry\n        globe.createPoints();\n\n        // Begin animation\n        globe.animate();\n\n    }\n\n};\n\n// Begin request\nxhr.send( null );\n```\n"
        },
        {
          "name": "globe-search",
          "type": "tree",
          "content": null
        },
        {
          "name": "globe-vertex-texture",
          "type": "tree",
          "content": null
        },
        {
          "name": "globe",
          "type": "tree",
          "content": null
        },
        {
          "name": "polymer-globe",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}