{
  "metadata": {
    "timestamp": 1736561953694,
    "page": 663,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "noflo/noflo",
      "stars": 3505,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ecrc",
          "type": "blob",
          "size": 0.02734375,
          "content": "{\n  \"exclude\": [\"\\\\.drw\"]\n}\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1435546875,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\nindent_style = space\nindent_size = 2\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.04296875,
          "content": "/node_modules/\n/lib/\n/components/\n/browser/\n"
        },
        {
          "name": ".eslintrc.json",
          "type": "blob",
          "size": 0.0302734375,
          "content": "{\n  \"extends\": \"airbnb-base\"\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2177734375,
          "content": ".node_shell\n/node_modules/\n/components/\n/coverage/\n/.nyc_output/\n/browser/\nbin/*.js\n/lib/\n/_site/\nspec/result.xml\nspec/runner.html\nserver/static/js/*.js\ndocs_tmp/\ndocs/\nnpm-debug.log\npackage-lock.json\n.DS_Store\n.noflo.json\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.0908203125,
          "content": ".git*\n/components/*/\n/browser/\n/spec/*.xml\n/coverage/\n/.nyc_output/\n.travis.yml\nappveyor.yml\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 41.8095703125,
          "content": "NoFlo ChangeLog\n===============\n\n## 1.4.3 (December 10th 2020)\n\n* Improved inport and outport options TypeScript definitions\n\n## 1.4.2 (December 10th 2020)\n\n* Made Component and Network option TypeScript definitions easier to extend when subclassing\n\n## 1.4.1 (December 10th 2020)\n\n* The `asPromise` function (promisified version of `noflo.asCallback`) now ships with the correct type definition\n\n## 1.4.0 (December 10th 2020)\n\n* Asynchronous NoFlo methods (like `createNetwork` and `network.start`) now return Promises. Callbacks are still supported as a compatibility layer.\n* Component `setUp` and `tearDown` can now return a Promise instead of calling the supplied callback\n* Component processing function can now return a Promise instead of calling `sendDone` or `done` (if the Promise resolves to a value, it will be sent out)\n* NoFlo now ships with TypeScript type definitions\n* The `src/lib` folder contains NoFlo as JavaScript Modules. `lib` is the CommonJS version\n* The CommonJS version of NoFlo is now shipped as modern ES2020 instead of babelized ES5. Use Babel in your project if you need compatibility with old JS runtimes\n\n## 1.3.0 (November 23rd 2020)\n\n* NoFlo `createNetwork` and `asCallback` now accept a `flowtrace` option to pass a [Flowtrace instance](https://github.com/flowbased/flowtrace) for retroactive debugging. Example:\n\n```javascript\nconst { Flowtrace } = require('flowtrace');\nconst tracer = new Flowtrace();\nnoflo.createNetwork(myGraph, {\n  flowtrace: tracer,\n}, (err, network) => {\n  // ...\n  console.log(tracer.toJSON());\n});\n```\n\n* NoFlo `createNetwork` now accepts `componentLoader` and `baseDir` via options. Passing them via Graph properties is deprecated\n* NoFlo `createNetwork` now defaults to the non-legacy \"network drives graph\" mode\n* NoFlo `createNetwork` now only supports the `graph, options, callback` signature, no options given in some other order\n* `noflo.Network` interface has been removed. Use `createNetwork` to instantiate networks\n* CoffeeScript is no longer bundled with NoFlo. Install the CoffeeScript compiler in your project if you need to be able to load CoffeeScript components\n\n## 1.2.7 (November 13th 2020)\n\n* Added safeties against trying to load a falsy graph in `asCallback`\n* Added safeties against trying to load unnamed components\n\n## 1.2.6 (September 24th 2020)\n\n* Fixed an issue with `getSource` on Node.js\n\n## 1.2.5 (September 24th 2020)\n\n* Fixed an issue with deployment automation\n\n## 1.2.4 (September 24th 2020)\n\n* ComponentLoader `getSource` now returns also component specs when available\n\n## 1.2.3 (September 17th 2020)\n\n* TypeScript components loaded on Node.js now target modern ES6\n\n## 1.2.2 (September 17th 2020)\n\n* Added initial support for components written in TypeScript. Requires the `typescript` module to be installed\n* NoFlo ComponentLoader can now tell the supported programming languages with the `getLanguages` method\n* Components written with `setSource` now return the original untranspiled source code with `getSource` also on Node.js\n\n## 1.2.1 (September 16th 2020)\n\n* Added better error messages when trying to write to a non-existing outport in a component\n* Added support for loading subgraph components even if they come from a different version of fbp-graph\n\n## 1.2.0 (August 28th 2020)\n\n* Ported NoFlo from CoffeeScript to ES6\n* Deprecated constructing networks with `new noflo.Network`. Use `noflo.createNetwork` instead, with the following options available:\n  - `subscribeGraph: true`: Uses `LegacyNetwork` which modifies network topology based on changes in graph. This can cause some types of errors to be silent.\n  - `subscribeGraph: false`: Uses `Network`: network topology can be changed with network's methods (`addNode`, `removeEdge`, etc) and will be also written to the graph.\n  For backwards compatibility reasons, `subscribeGraph` defaults to `true`. Adapt your applications to use `false` instead and start utilizing Network methods for any changes to a running graph.\n* Added support for a more standard `noflo.createNetwork(graph, options, callback)` signature, with backwards compatibility for the legacy `noflo.createNetwork(graph, callback, options)` signature\n* Removed support for `noflo.WirePattern`. WirePattern has been deprecated since 1.0, and all code using it should be migrated to the latest Process API\n* Removed support for changing component icon and description statically (on class level) at run-time (i.e. `ComponentName::icon = 'new-icon'`). Component icon and description should be set in class constructor or in `getComponent` instead. Changing icon and description for a specific instance (process) is not affected and is fully supported\n* Added optional `networkCallback` option for `noflo.asCallback` to provide access to the network instance for debugging purposes\n\n## 1.1.3 (April 12th 2018)\n\n* Fixed issue with custom component loaders on Node.js\n\n## 1.1.2 (March 24th 2018)\n\n* Improved detection of when network finishes to not stop synchronous networks too early\n\n## 1.1.1 (February 19th 2018)\n\n* Fixed `noflo.asComponent` handling of functions that return a `NULL`\n\n## 1.1.0 (February 19th 2018)\n\n* Added [noflo.asComponent](https://github.com/noflo/noflo/pull/591) for easy mapping of JavaScript functions into NoFlo components. Each argument will get its own inport with the name of the argument, and output is handled based on the type of function being wrapped:\n  - Regular synchronous functions: return value gets sent to `out`. Thrown errors get sent to `error`\n  - Functions returning a Promise: resolved promises get sent to `out`, rejected promises to `error`\n  - Functions taking a Node.js style asynchronous callback: `err` argument to callback gets sent to `error`, result gets sent to `out`\n\n## 1.0.3 (November 24th 2017)\n\n* Added support for running arbitrary NoFlo graphs via `noflo.asCallback`. You can call this function now with either a component name, or a `noflo.Graph` instance\n\n## 1.0.2 (November 17th 2017)\n\n* Fix sub-subgraph identification in network events\n\n## 1.0.1 (November 13th 2017)\n\n* Subgraphs re-activate themselves when receiving new packets after they've completed running\n* Subgraphs now use the JavaScript implementation of Graph component also on Node.js\n* NoFlo `setSource` on Node.js no longer transpiles ES6 sources using Babel. All supported Node.js versions should run ES6 without issues\n\n## 1.0.0 (November 3rd 2017)\n\n* The shipping NoFlo build is now using ES6 syntax, as provided by the [CoffeeScript 2.x compiler](http://coffeescript.org/). If you need to support older browsers or Node.js versions, you can transpile the code to ES5 using [Babel](https://babeljs.io/)\n* The APIs deprecated in NoFlo 0.8 were removed:\n  - `noflo.AsyncComponent` class -- use WirePattern or Process API instead\n  - `noflo.ArrayPort` class -- use InPort/OutPort with `addressable: true` instead\n  - `noflo.Port` class -- use InPort/OutPort instead\n  - `noflo.helpers.MapComponent` function -- use WirePattern or Process API instead\n  - `noflo.helpers.WirePattern` legacy mode -- now WirePattern always uses Process API internally\n  - `noflo.helpers.WirePattern` synchronous mode -- use `async: true` and callback\n  - `noflo.helpers.MultiError` function -- send errors via callback or error port\n  - `noflo.InPort` process callback -- use Process API\n  - `noflo.InPort` handle callback -- use Process API\n  - `noflo.InPort` receive method -- use Process API getX methods\n  - `noflo.InPort` contains method -- use Process API hasX methods\n  - Subgraph `EXPORTS` mechanism -- disambiguate with INPORT/OUTPORT\n* Improved errors thrown when trying to read from non-existing ports\n* Added _unscoped_ support for outports. Setting `scoped: false` on an outport will force all packets sent to that port to be unscoped\n* Added a deprecation warning when loading legacy API components\n* More information on preparing for NoFlo 1.0 can be found from [this blog post](http://bergie.iki.fi/blog/noflo-10-prep/)\n\n## 0.8.6 (October 21st 2017)\n\n* Fixed an issue with synchronous components causing Process API output streams to be replayed in some situations\n* Improved error handling when trying to load a graph with misconfigured edges\n\n## 0.8.5 (September 17th 2017)\n\n* It is now possible to set individual ports to _unscoped_ mode by setting the `scoped: false` parameter. This is useful for components that mix unscoped and scoped inputs\n* Ports and IP objects can now be annotated with a JSON schema for their payloads using the `schema` key. Ports with a schema annotate their IP objects automatically with the schema unless the IP object already has a specific schema\n* The previous `type` key of ports is now converted to the `schema` key. The schema of a port is available via the `getSchema()` method\n\n## 0.8.4 (July 21st 2017)\n\n* Send newly-added IIPs even if network has finished, but not after stopping the network\n\n## 0.8.3 (March 8th 2017)\n\n* Don't mark the network as finished if we still have running components\n\n## 0.8.2 (March 5th 2017)\n\n* Improved subgraph instantiation error handling\n* Fixed a problem of IIPs not visible to processes when inside an IP scope\n* Added [asCallback()](https://github.com/noflo/noflo/pull/538) function to embed NoFlo graphs and components into non-NoFlo applications and tests\n\n## 0.8.1 (March 2nd 2017)\n\n* Fixed issue with Process API WirePattern emulation on deeper bracket hierarchies\n* Fixed inport buffer clearing on component shutdown\n\n## 0.8.0 (March 1st 2017)\n\n* General availability of [Process API for NoFlo components](http://bergie.iki.fi/blog/noflo-process-api/)\n* Updated headers to reflect the copyright assignment from [The Grid](https://thegrid.io) to [Flowhub UG](https://flowhub.io)\n\n## 0.8.0-beta3 (February 21st 2017)\n\n* Reimplemented `noflo.helpers.MapComponent` to use Process API internally. This helper is deprecated and components using it should be ported to Process API\n* Reimplemented `noflo.helpers.WirePattern` to use Process API internally. To use the original WirePattern implementation, either pass a `legacy: true` to WirePattern function or set `NOFLO_WIREPATTERN_LEGACY` environment variable\n* Removed WirePattern `receiveStreams` and `sendStream` options\n* Added deprecation warnings to several WirePattern options:\n  * `postpone` and `resume`. These are still available in legacy mode but will be removed soon\n  * `group` collation\n  * `field` collation\n  * `async: false` option\n  * `component.error` method with WirePattern. Use async and error callback instead\n  * `component.fail` method with WirePattern. Use async and error callback instead\n  * `component.sendDefaults` method with WirePattern. Start your components with a NoFlo network to get defaults sent\n  * `noflo.helpers.MultiError`. Use error callback instead\n\n## 0.8.0-beta2 (February 8th 2017)\n\n* Added `setUp` and `tearDown` methods for easier handling of custom states in components. These methods take an asynchronous callback and are recommended to be used instead of `start` and `shutdown`\n* Added callbacks for component `start` and `shutdown` methods\n* Added a `clear` method for inports to clear their packet buffer. Used by component `shutdown` method\n* Added addressable port support to Process API\n  - When sending packets to an addressable outport, the connection to send to will be selected based on the `index` attribute of the IP object\n  - When reading from addressable ports, provide port name with index in format `[portname, index]`. For example: `input.getData ['in', 2]`\n\n## 0.8.0-beta1 (January 18th 2017)\n\n* Added callback for `Network.stop`\n* Outmost brackets are no longer automatically converted to `connect` and `disconnect` events. Instead, `connect` and `disconnect` are injected as needed, but only for subscribers of the legacy events\n* Added deprecation warnings for APIs that will be removed by NoFlo 1.0. These can be made fatal by setting the `NOFLO_FATAL_DEPRECATED` environment variable. These include:\n  - `noflo.AsyncComponent`: should be ported to Process API\n  - `noflo.helpers.MapComponent`: should be ported to Process API\n  - `noflo.ArrayPort`: should be ported to noflo.In/OutPort with `addressable: true`\n  - `noflo.Port`: should be ported to noflo.In/OutPort\n  - Calling `Network.start` or `Network.stop` without a callback\n  - `noflo.InPort` `process` option: should be ported to Process API or use the `handle` option\n  - `noflo.InPort` `receive` method: replaced by the `get` method\n  - `noflo.InPort` `contains` method: replaced by the `has` method\n  - `noflo.Graph` exports: use specific inport or outport instead\n  - Additionally [component.io](https://github.com/componentjs/component) builds warn about deprecation in favor of [webpack](http://webpack.github.io/) with helpful automation available in [grunt-noflo-browser](https://www.npmjs.com/package/grunt-noflo-browser)\n* Added IP object `scope` support to `WirePattern` to make `WirePattern` components more concurrency-friendly\n* Removed `receiveStreams` option from `WirePattern`\n* Graph JSON schema has been moved to https://github.com/flowbased/fbp, and updated with tests.\n* Added stream helpers for Process API input. `hasStream` checks if an input buffer contains a complete stream (matching brackets and data, or only data), `getStream` returns a complete stream of packets. These require `forwardBrackets` to be disabled for the port.\n* [babel-core](https://www.npmjs.com/package/babel-core) was removed as a dependency. Install separately for projects needing ES6 component support\n* underscore.js was removed as a dependency\n* `input.getData()` in Process API has been changed to fetch only packets of `data` type skipping and dropping brackets inbetween\n* IP objects are strictly required to be of `noflo.IP` type\n* Removed support for deprecated Node.js 0.x versions\n* NoFlo Graph and Journal were moved to a dedicated [fbp-graph](https://github.com/flowbased/fbp-graph) library for easier usage in other FBP projects. No changes to NoFlo interface\n* NoFlo networks now emit packet events only while the network is running\n* NoFlo networks can show their currently active processes with the `getActiveProcesses()` method\n\n## 0.7.8 (June 10th 2016)\n\n* Added input buffer manipulation methods\n* Added support for falsy IP object scopes\n* Added support for sending values out directly with `output.send` if there is only one non-error outport\n* InternalSocket no longer re-wraps already-wrapped errors coming from downstream\n* Switched NoFlo's default browser builder to webpack\n\n## 0.7.7 (June 8th 2016)\n\n* `input.has` now accepts a validation callback function as the last argument. All packets in buffer will be passed to this function, and `has` will return false only if something returns true for each port specified\n* Removed `dropEmptyBrackets` option which was conflicting with asynchronous components. This results into empty brackets being forwarded to `error` outport, so make sure error handling components don't make false alerts on those.\n* ComponentLoader was refactored to allow easier injection of custom loaders when dealing with bundling tools like Browserify and Webpack\n\n## 0.7.6 (June 2nd 2016)\n\n* Fixed ComponentLoader caching on Node.js\n* Added support for `stream` datatype in ports, allowing streams to be passed as data packets\n* NoFlo Graphs now support case sensitive mode, which is possible to trigger via options\n\n## 0.7.5 (May 2nd 2016)\n\n* Added automatic bracket forwarding via `forwardBrackets` option. Enabled from `in` port to `out` and `error` ports by default.\n* Empty brackets are not forwarded to ports in `dropEmptyBrackets` list (defaults to `['error']`).\n* IP metadata can easily be forwarded in simple components by using `output.pass()` instead of `output.sendDone()`.\n\n## 0.7.4 (April 7th 2016)\n\n* Minor network starting improvement\n\n## 0.7.3 (April 7th 2016)\n\n* Fixed error handling on broken FBP manifest data\n* Fixed network start callback when there are no defaults in a graph\n* Network uptime is now calculated from the first `start` event, not from initialization\n\n## 0.7.2 (April 1st 2016)\n\n* Fixed FBP manifest caching\n* Fixed non-triggering property being applied on triggering ports\n* Fixed `input.getData()` crash on ports which have no packets yet\n\n## 0.7.1 (March 31st 2016)\n\n* Fixed NoFlo subgraph component in build\n\n## 0.7.0 (March 31st 2016)\n\n* Switched component discovery and caching from `read-installed` to [FBP manifest](https://github.com/flowbased/fbp-manifest). `fbp.json` files can be generated using `noflo-cache-preheat`.\n  This also changes behavior related to components or graphs in custom locations. The fbp-manifest tool only finds them from the default `components/` and `graphs/` subdirectories of the project\n  base directory.\n* Component Loader `listComponents` can now return errors as first callback argument\n* Control ports don't receive bracket IPs, only data\n* NoFlo's InternalSocket now always handles information packets as IP Objects, with conversion to/from legacy packet events done automatically. Use `socket.on('ip', function (ip) {})` to receive IP object\n\n## 0.6.1 (March 30th 2016)\n\n* NoFlo's IP Objects are now available via `noflo.IP`\n\n## 0.6.0 (March 29th 2016)\n\n* Removed the `noflo` executable in favor of [noflo-nodejs](https://www.npmjs.com/package/noflo-nodejs)\n* NoFlo `createNetwork` and `loadFile` methods can return errors as the first callback argument\n* New [IP Objects](https://github.com/noflo/noflo/issues/290) feature allowing bundling and handling of groups and packet data together\n* New option to enable [cloning of packets](https://github.com/noflo/noflo/pull/375) when sending to multiple outbound connections\n* New [Process API](https://github.com/noflo/noflo/pull/392) which replaces `WirePattern` and makes NoFlo component programming closer to Classical FBP\n* Graph-level [request isolation](https://github.com/noflo/noflo/issues/373) via `IP.scope` property\n* Removed the deprecated `LoggingComponent` baseclass\n\n## 0.5.21 (December 3rd 2015)\n\n* Made NoFlo component cache keep Component Loader paths also relative\n\n## 0.5.20 (December 2nd 2015)\n\n* NoFlo network instances now default to `debug` mode, meaning that errors thrown by components are available via the `process-error` event\n* If there are no listeners for the network `process-error` events or socket `error` event, then they are thrown\n* This change of behavior fixes issues with stale state in WirePattern networks caused by downstream exceptions\n* Debug mode can be disabled with `network.setDebug(false)`\n\n## 0.5.18 (November 30th 2015)\n\n* Make NoFlo component cache paths relative to project root\n\n## 0.5.17 (November 27th 2015)\n\n* Added a new `noflo-cache-preheat` tool that can be used for improving start-up times in Node.js projects with large lists of dependencies. Can be used as a `postinstall` script\n\n## 0.5.16 (November 27th 2015)\n\n* Update the `read-installed` package to support scoped dependencies\n\n## 0.5.15 (November 26th 2015)\n\n* Support for [scoped NPM packages](https://docs.npmjs.com/getting-started/scoped-packages)\n\n## 0.5.14 (September 25th 2015)\n\n* EcmaScript 6 support in Component Loader\n* Node.js 4.x compatibility (`setSource` requires `components/` directory to exist in base directory to work)\n\n## 0.5.13 (April 22nd 2015)\n\n* Custom componentloader support when cache mode is enabled\n* Optional support for [coffee-cache](https://www.npmjs.com/package/coffee-cache) when using `--cache`\n\n## 0.5.12 (April 19th 2015)\n\n* Add support for [io.js](https://iojs.org/)\n* Add `componentName` property for components telling the component name\n* Socket events now include edge metadata\n* Node.js: component list can be cached for faster start-up time. Cache file is stored in `$BASEDIR/.noflo.json`\n\n## 0.5.11 (October 23rd 2014)\n\n* On Node.js ComponentLoader `setSource` now loads components virtually from `<baseDir>/components` to support relative module loading\n* Subgraphs don't get unattached ports implicitly exported any longer. Register in/outports in the graph to make them available from the outside\n* Added safeties for restarted networks to WirePattern\n\n## 0.5.10 (October 23rd 2014)\n\n* Port names are now validated to only contain lowercase alphanumeric characters or underscores\n* `ComponentLoader.load` method now calls its callback with the Node.js style `error, instance` signature to allow catching component loading issues\n* Graph merging support via the graph journal\n* `getSource` now returns correct type for graphs\n* Subgraph networks are started when the main network starts, instead of automatically on their own timing. As a fallback they will also start when any of their ports receives a `connect`\n* Networks can now be stopped and restarted at will using the `stop` and `start` methods\n* The running state of a NoFlo network can be now queried with the `isRunning` method\n* NoFlo networks support FBP protocol debugging via the `setDebug` and `getDebug` methods\n* `Ports.add` is now chainable\n* The `start` port was removed from subgraphs\n\nThese changes mean that in situations where a subgraph is used standalone without a network around it, you need to call `component.start()` manually. This is typical especially in unit tests.\n\n## 0.5.9 (August 5th 2014)\n\n* Hotfix reverting backwards-incompatible changes in subgraph loading, see [#229](https://github.com/noflo/noflo/issues/229).\n\n## 0.5.8 (August 4th 2014)\n\n* Fixed several issues in connections and data synchronization\n* Updated `read-installed` to the latest version\n* Updated JSON Schema for NoFlo graph definition format\n* Low-level functions to add and remove graph inports at run-time, see [#242](https://github.com/noflo/noflo/pull/242)\n* Fixes for default port values and IIPs in subgraphs.\n* Added `dropInput` option for WirePattern to drop premature data while parameters not yet received. See [#239](https://github.com/noflo/noflo/issues/239)\n* Addressable ports support in WirePattern. See [details](https://github.com/noflo/noflo/issues/240#issuecomment-51094257).\n\n## 0.5.7 (July 23rd 2014)\n\n* Ports now default to *not required*. Set the port option `required: true` the port needs to be connected in order for the component to work\n* `MultiError` pattern is enabled by default when using `WirePattern` and supports `forwardGroups` option for error packets.\n* `WirePattern` components now deal more consistently with groups and disconnect events\n\n## 0.5.6 (June 23rd 2014)\n\n* Custom icon support for subgraphs via the `icon` key in graph properties\n* Parameter support for `WirePattern` components, allowing them to have configuration parameters that need to be set only once. Example:\n\n```coffeescript\ncomponent = new noflo.Component\ncomponent.inPorts.add 'path',\n  datatype: 'string'\n  required: true\ncomponent.inPorts.add 'delay',\n  datatype: 'int'\n  required: false\ncomponent.inPorts.add 'line',\n  datatype: 'string'\ncomponent.inPorts.add 'repeat',\n  datatype: 'int'\ncomponent.outPorts.add 'out',\n  datatype: 'object'\ncomponent.outPorts.add 'error',\n  datatype: 'object'\n\nnoflo.helpers.WirePattern component,\n  in: ['line', 'repeat']\n  out: 'out'\n  params: ['path', 'delay']\n  async: true\n, (data, groups, out, callback) ->\n  path = component.params.path\n  delay = if component.params.delay then component.params.delay else 0\n  doSomeThing path, delay, data.line, data.repeat, (err, res) ->\n    return callback err if err\n    out.send res\n    callback()\n```\n\n## 0.5.5 (June 20th 2014)\n\n* Fixed an issue with `StreamSender` affecting WirePattern components dealing with multiple levels of grouping\n* New `CustomizeError` helper for passing information with Error objects in NoFlo. For example:\n\n```coffeescript\n# Instantiate an error object\nerr = new Error 'Something went wrong'\n\n# Add metadata to it. Usually this should include groups and other machine-readable information\nnoflo.helpers.CustomizeError err,\n  groups: groups\n  foo: 'bar'\n\n# Send it to error port\nc.error err\n```\n\n## 0.5.4 (June 11th 2014)\n\n* The new [noflo-api-updater](https://www.npmjs.org/package/noflo-api-updater) tool assists in updating components to the latest NoFlo API\n* `GroupedInput` helper has been renamed to `WirePattern` due to a bigger collection of synchronization options.\n* The `WirePattern` helper has a new `ordered` option for choosing whether the output should be in same order as the incoming packets\n* Options `group` and `forwardGroups` of `WirePattern` are made independent, so make sure to use `forwardGroups: true` if you need this feature together with `group: true`.\n* Added support for multiple outputs and reading/writing substreams as solid objects in `WirePattern`.\n* Added `load` outport handing in `WirePattern` to make it a complete replacement for `AsyncComponent`.\n* Added helpers for advanced error handling, see [#185](https://github.com/noflo/noflo/issues/185).\n* Added `caching` option for OutPorts that makes them re-send their latest value to any newly-added connections, see [#151](https://github.com/noflo/noflo/issues/151) for example use cases.\n\n## 0.5.3 (May 31st 2014)\n\n* `integer` is accepted as an alias for the `int` datatype for ports\n* `buffer` is now an accepted port datatype\n* The Continuous Integration setup for NoFlo now runs on both [Linux](https://travis-ci.org/noflo/noflo) and [Windows](https://ci.appveyor.com/project/bergie/noflo)\n* Fixed a bug with ComponentLoader `getSource` method when invoked early on in execution\n* New component helpers for easier authoring\n\nThe `MapComponent` helper is usable for synchronous components that operate on a single inport-outport combination:\n\n```coffeescript\nc = new noflo.Component\n  inPorts:\n    in:\n      datatype: 'number'\n  outPorts:\n    out:\n      datatype: 'number'\nnoflo.helpers.MapComponent c, (data, groups, out) ->\n  out.send data * 2\n```\n\nThe `GroupedInput` helper assists in building components that need to synchronize multiple inputs by groups:\n\n```coffeescript\nc = new noflo.Component\n  inPorts:\n    x:\n      datatype: 'number'\n    y:\n      datatype: 'number'\n  outPorts:\n    radius:\n      datatype: 'number'\n\nnoflo.helpers.GroupedInput c,\n  in: ['x', 'y']\n  out: 'radius'\n, (data, groups, out) ->\n  out.send Math.sqrt(data.x**2 + data.y**2)\n```\n\n`GroupedInput` can also synchronize via specific fields of object-type packets:\n\n```coffeescript\nhelpers.GroupedInput c,\n  in: ['user', 'message']\n  out: 'signedMessage'\n  field: 'request'\n, (data, groups, out) ->\n  out.send\n    request: data.request\n    user: data.user.name\n    text: data.message.text\n\nuser.send {request: 123, id: 42, name: 'John'}\nmessage.send {request: 123, id: 17, text: 'Hello world'}\n\n# Result:\n{ request: 123, user: 'John', text: 'Hello world'}\n```\n\n## 0.5.2 (May 8th 2014)\n\n* Fixed a minor packaging issue\n\n## 0.5.1 (May 8th 2014)\n\n* Custom component loaders can be registered programmatically using the `registerLoader` method of NoFlo's ComponentLoader\n* `contains` method for buffered inports returns the number of data packets the buffer has\n* [Call stack exhaustion](https://github.com/noflo/noflo/issues/156) on very large graphs has been fixed\n* The `error` outport of AsyncComponents now sends the group information of the original input together with the error\n* The `error` method of regular ports can now also handle groups as a second parameter\n* Ports can now list their attached sockets (by array index) via the `listAttached` method\n* `function` is now an accepted datatype for ports\n* There is now initial support for making connections to and from *addressable* ports with a specified index\n\nIn the FBP format, these can be specified with the bracket syntax:\n\n```fbp\nSomeNode OUT[2] -> IN OtherNode\n'foo' -> OPTS[1] OtherNode\n```\n\nIn the JSON file these are defined in connections by adding a integer to the `index` key of the `src` or `tgt` definition.\n\nThe NoFlo Graph class provides these with the following methods:\n\n```\naddEdgeIndex(str outNode, str outPort, int outIndex, str inNode, str inPort, int inIndex, obj metadata)\naddInitiaIndex(mixed data, str inNode, str inPort, int inIndex, obj metadata)\n```\n\nIf indexes are not specified, the fall-back behavior is to automatically index the connections based on next available slot in the port.\n\n## 0.5.0 (March 28th 2014)\n\n* Support for setting the default `baseDir` of Node.js NoFlo environment with `NOFLO_PROJECT_ROOT` env var (defaults to current working directory)\n* Support for loading graph definitions via AJAX on browser-based NoFlo\n* Support for delayed initialization of Subgraph components via ComponentLoader\n* Component instances now get the node's metadata passed to the `getComponent` function\n* New methods for manipulating Graph metadata:\n  - `setProperties`\n  - `setInportMetadata`\n  - `setOutportMetadata`\n  - `setGroupMetadata`\n  - `setNodeMetadata`\n  - `setEdgeMetadata`\n* Graph exports can now be renamed, and emit `addExport`, `removeExport`, and `renameExport` events\n* New Graph transaction API for grouping graph changes. Transactions can be observed\n  - `startTransaction`\n  - `endTransaction`\n* New Journal class, for following Graph changes and restoring earlier revisions. Currently supports `undo` and `redo`\n* [New port API](https://github.com/noflo/noflo/issues/136) allowing better addressability and metadata\n* Graph's published ports are now declared in two separate `inports` and `outports` arrays to [reduce ambiguity](https://github.com/noflo/noflo/issues/118)\n\nWith the new API component ports can be declared with:\n\n```coffeescript\n@inPorts = new noflo.InPorts\n@inPorts.add 'in', new noflo.InPort\n  datatype: 'object'\n  type: 'http://schema.org/Person'\n  description: 'Persons to be processed'\n  required: true\n  buffered: true\n```\n\nThe `noflo.Ports` objects emit `add` and `remove` events when ports change. They also support passing port information as options:\n\n```coffeescript\n@outPorts = new noflo.OutPorts\n  out: new noflo.OutPort\n    datatype: 'object'\n    type: 'http://schema.org/Person'\n    description: 'Processed person objects'\n    required: true\n    addressable: true\n```\n\nThe input ports also allow passing in an optional *processing function* that gets called on information packets events.\n\n* [New component API](https://github.com/noflo/noflo/issues/97) allowing simpler component definition in both CoffeeScript and JavaScript:\n\n```js\nvar noflo = require('noflo');\n\nexports.getComponent = function() {\n  var c = new noflo.Component();\n\n  c.inPorts.add('in', function(event, payload) {\n    if (packet.event !== 'data')\n      return;\n    // Do something with the packet, then\n    c.outPorts.out.send(packet.data);\n  });\n\n  c.outPorts.add('out');\n\n  return c;\n};\n```\n\n* Support for dealing with component source code via ComponentLoader `setSource` and `getSource` methods\n\n## 0.4.4 (February 4th 2014)\n\n* Support for CoffeeScript 1.7.x on Node.js\n\n## 0.4.3 (December 6th 2013)\n\n* ArrayPorts with attached sockets now return `true` for `isAttached` checks. There is a separate `canAttach` method for checking whether more can be added\n* Icon support was added for both libraries and components using the set from [Font Awesome](http://fortawesome.github.io/Font-Awesome/icons/)\n  - For libraries, register via the `noflo.icon` key in your `package.json` (Node.js libraries) or `component.json` (browser libraries)\n  - For components, provide via the `icon` attribute\n* Subgraphs now support closing their internal NoFlo network via the `shutdown` method\n* Component Loader is able to load arbitrary graphs outside of the normal package manifest registration via the `loadGraph` method\n* Component Loader of the main NoFlo network is now carried across subgraphs instead of instantiating locally\n* Libraries can provide a custom loader for their components by registering a `noflo.loader` key in the manifest pointing to a CommonJS module\n* Exported ports can now contain metadata\n* It is possible to create named groups of nodes in a NoFlo graph, which can be useful for visual editors\n* Components have an `error` helper method for sending errors to the `error` outport, or throwing them if that isn't attached\n\n## 0.4.2 (September 28th 2013)\n\n* Easier debugging: port errors now contain the name of the NoFlo graph node and the port\n\n## 0.4.1 (September 25th 2013)\n\n* NoFlo components can now implement a `shutdown` method which is called when they're removed from a network\n* Graphs can contain additional metadata in the `properties` key\n* NoFlo networks have now a `start` and a `stop` method for starting and stopping execution\n\n## 0.4.0 (July 31st 2013)\n\nBrowser support:\n\n* The NoFlo engine has been made available client-side via the [Component](https://github.com/component/component) system\n* New BDD tests written with [Mocha](http://visionmedia.github.io/mocha/) that can be run on both browser and server\n\nChanges to components:\n\n* All components have been moved to [various component libraries](http://noflojs.org/library/)\n\nDevelopment tools:\n\n* [Grunt scaffold](https://github.com/bergie/grunt-init-noflo) for easily creating NoFlo component packages including cross-platform test automation\n\nFile format support:\n\n* NoFlo's internal FBP parser was removed in favor of the [fbp](https://github.com/noflo/fbp) package\n* The `display` property of nodes in the [JSON format](https://github.com/bergie/noflo#noflo-graph-file-format) was removed in favor of the more flexible `metadata` object\n\nInternals:\n\n* Support for renaming nodes in a NoFlo graph via the `renameNode` method\n* Adding IIPs to a graph will now emit a `addInitial` event instead of an `addEdge` event\n* Graph's `removeEdge` method allows specifying both ends of the connection to prevent ambiguity\n* IIPs can now be removed using the `removeInitial` method, which fires a `removeInitial` event instead of `removeEdge`\n* NoFlo Networks now support delayed starting\n* The `isBrowser` method on the main NoFlo interface tells whether NoFlo is running under browser or Node.js\n* Support for running under Node.js on Windows\n\n## 0.3.4 (July 5th 2013)\n\nInternals:\n\n* New `LoggingComponent` base class for component libraries\n\n## 0.3.3 (April 9th 2013)\n\nDevelopment:\n\n* Build process was switched from Cake to [Grunt](http://gruntjs.com/)\n* NoFlo is no longer tested against Node.js 0.6\n\n## 0.3.2 (April 9th 2013)\n\nNoFlo internals:\n\n* Ports now support optional type information, allowing editors to visualize compatible port types\n\n  ``` coffeescript\n  @inPorts =\n    in: new noflo.ArrayPort 'object'\n    times: new noflo.Port 'int'\n  @outPorts =\n    out: new noflo.Port 'string'\n  ```\n\n* NoFlo ComponentLoader is now able to register new components and graphs and update package.json files accordingly\n\n  ``` coffeescript\n  loader = new noflo.ComponentLoader __dirname\n  loader.registerComponent 'myproject', 'SayHello', './components/SayHello.json', (err) ->\n    console.error err if err\n  ```\n\nNew libraries:\n\n* [noflo-test](https://npmjs.org/package/noflo-test) provides a framework for testing NoFlo components\n\n## 0.3.1 (February 13th 2013)\n\nNoFlo internals:\n\n* The NoFlo `.fbp` parser now [guards against recursion](https://github.com/bergie/noflo/pull/57) on inline subgraphs\n* NoFlo subgraphs now inherit the directory context for component loading from the NoFlo process that loaded them\n* Exported ports in NoFlo graphs are now supported also in NoFlo-generated JSON files\n* Nodes in NoFlo graphs can now contain additional metadata to be used for visualization purposes. For example, in FBP format graphs:\n\n  ``` fbp\n  Read(ReadFile:foo) OUT -> IN Display(Output:foo)\n  ```\n\n  will cause both the _Read_ and the _Display_ node to contain a `metadata.routes` field with an array containing `foo`. Multiple routes can be specified by separating them with commas\n\nNew component libraries:\n\n* [noflo-filesystem](https://npmjs.org/package/noflo-filesystem) provides advanced file system components\n* [noflo-github](https://npmjs.org/package/noflo-github) provides components for interacting with the GitHub service\n* [noflo-git](https://npmjs.org/package/noflo-git) provides components for Git revision control system\n* [noflo-oembed](https://npmjs.org/package/noflo-oembed) provides oEmbed protocol support\n* [noflo-redis](https://npmjs.org/package/noflo-redis) provides Redis database components\n\n## 0.3.0 (December 19th 2012)\n\nUser interface:\n\n* NoFlo's web-based user interface has been moved to a separate [noflo-ui](https://github.com/bergie/noflo-ui) repository\n* The `noflo` shell command now uses `STDOUT` for debug output (when invoked with `--debug`) instead of `STDERR`\n  - Events from subgraphs are also visible when the `noflo` command is used with the additional `-s` switch\n  - Contents of packets are shown when the `noflo` command is used with the additional `-v` switch\n  - Shell debug output is no colorized for easier reading\n* [DOT language](http://en.wikipedia.org/wiki/DOT_language) output from NoFlo was made more comprehensive\n* NoFlo graphs can now alias their internal ports to more user-friendly names when used as subgraphs. When aliases are used, the other free ports are not exposed via the _Graph_ component. This works in both FBP and JSON formats:\n\n  For FBP format graphs:\n\n  ``` fbp\n  EXPORT=INTERNALPROCESS.PORT:EXTERNALPORT\n  ```\n\n  For JSON format graphs:\n\n  ``` json\n  {\n    \"exports\": [\n      {\n        \"private\": \"INTERNALPROCESS.PORT\",\n        \"public\": \"EXTERNALPORT\"\n      }\n    ]\n  }\n  ```\n\nNoFlo internals:\n\n* All code was migrated from 4 spaces to 2 space indentation as recommended by [CoffeeScript style guide](https://github.com/polarmobile/coffeescript-style-guide). Our CI environment safeguards this via [CoffeeLint](http://www.coffeelint.org/)\n* Events emitted by ArrayPorts now contain the socket number as a second parameter\n* Initial Information Packet sending was delayed by `process.nextTick` to ensure possible subgraphs are ready\n* The `debug` flag was removed from NoFlo _Network_ class, and the networks were made EventEmitters for more flexible monitoring\n* The `isSubgraph` method tells whether a _Component_ is a subgraph or a regular code component\n* Subgraphs loaded directly by _ComponentLoader_ no longer expose their `graph` port\n* The `addX` methods of _Graph_ now return the object that was added to the graph\n* NoFlo networks now emit `start` and `end` events\n* Component instances have the ID of the node available at the `nodeId` property\n* Empty strings and other falsy values are now allowed as contents of Initial Information Packets\n\nChanges to core components:\n\n* _ReadGroup_ now sends the group to a `group` outport, and original packet to `out` port\n* _GetObjectKey_ can now send packets that don't contain the specified key to a `missed` port instead of dropping them\n* _SetPropertyValue_ provides the group hierarchy received via its `in` port when sending packets out\n* _Kick_ can now optionally send out the packet it received via its `data` port when receiving a disconnect on the `in` port. Its `out` port is now an ArrayPort\n* _Concat_ only clears its buffers on disconnect when all inports have connected at least once\n* _SplitStr_ accepts both regular expressions (starting and ending with a `/`) and strings for splitting\n* _ReadDir_ and _Stat_ are now AsyncComponents that can be throttled\n\nNew core components:\n\n* _MakeDir_ creates a directory at a given path\n* _DirName_ sends the directory name for a given file path\n* _CopyFile_ copies the file behind the path received via the `source` port to the path received via the `destination` port\n* _FilterPacket_ allows filtering packets by regular expressions sent to the `regexp` port. Non-matching packets are sent to the `missed` port\n* _FirstGroup_ allows you to limit group hierarchies of packets to a single level\n* _LastPacket_ sends the last packet it received when getting a disconnect to the inport\n* _MergeGroups_ collects grouped packets from its inports, and sends them out together once each inport has sent data with the same grouping\n* _SimplifyObject_ simplifies the object structures outputted by the _CollectGroups_ component\n* _CountSum_ sums together numbers received from different inports and sends the total out\n* _SplitInSequence_ sends each packet to only one of its outports, going through them in sequence\n* _CollectUntilIdle_ collects packets it receives, waits a given time if there are new packets, and if not, sends them out\n\nNew component libraries:\n\n* [noflo-liquid](https://npmjs.org/package/noflo-liquid) provides Liquid Templating functionality\n* [noflo-markdown](https://npmjs.org/package/noflo-markdown) provides Markdown conversion\n* [noflo-diffbot](https://npmjs.org/package/noflo-diffbot) provides access to the Diffbot screen-scraping service\n\n## 0.2.0 (November 13th 2012)\n\nThe main change in 0.2 series was component packaging support and the fact that most component with external dependencies were moved to their own NPM packages:\n\n* Message Queue components were moved to [noflo-mq](https://npmjs.org/package/noflo-mq)\n* HTML parsing components were moved to [noflo-html](https://npmjs.org/package/noflo-html)\n* XML parsing components were moved to [noflo-html](https://npmjs.org/package/noflo-xml)\n* YAML parsing components were moved to [noflo-html](https://npmjs.org/package/noflo-yaml)\n* Web Server components were moved to [noflo-webserver](https://npmjs.org/package/noflo-webserver)\n* CouchDB components were moved to [noflo-couchdb](https://npmjs.org/package/noflo-couchdb)\n* BaseCamp API components were moved to [noflo-basecamp](https://npmjs.org/package/noflo-basecamp)\n* Restful Metrics components were moved to [noflo-restfulmetrics](https://npmjs.org/package/noflo-restfulmetrics)\n\nTo use the components, install the corresponding NPM package and change the component's name in your graph to include the package namespace. For example, `yaml/ParseYaml` for the _ParseYaml_ component in the _noflo-yaml_ package\n\nUser interface:\n\n* The `noflo` command-line tool now has a new `list` command for listing components available for a given directory, for example: `$ noflo list .`\n\nNoFlo internals:\n\n* New _ComponentLoader_ to support loading components and subgraphs to installed NPM modules\n* NoFlo's own codebase was moved to direct requires making the NPM installation simpler\n* [daemon](https://npmjs.org/package/daemon) dependency was removed from NoFlo's command-line tools\n\nChanges to core components:\n\n* _Merge_ only disconnects once all of its inports have disconnected\n* _Concat_ only disconnects once all of its inports have disconnected\n* _CompileString_'s `in` port is now an ArrayPort\n* _GroupByObjectKey_ also supports boolean values for the matched keys\n* _ReadDir_ disconnects after reading a directory\n\nNew core components:\n\n* _Drop_ allows explicitly dropping packets in a graph. The component performs no operations on the data it receives\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0791015625,
          "content": "Copyright (c) 2013-2018 Flowhub UG\nCopyright (c) 2011-2012 Henri Bergius, Nemein\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.537109375,
          "content": "NoFlo: Flow-based programming for JavaScript\n============================================\n\nNoFlo is an implementation of [flow-based programming](http://en.wikipedia.org/wiki/Flow-based_programming) for JavaScript running on both Node.js and the browser. From WikiPedia:\n\n> In computer science, flow-based programming (FBP) is a programming paradigm that defines applications as networks of \"black box\" processes, which exchange data across predefined connections by message passing, where the connections are specified externally to the processes. These black box processes can be reconnected endlessly to form different applications without having to be changed internally. FBP is thus naturally component-oriented.\n\nDevelopers used to the [Unix philosophy](http://en.wikipedia.org/wiki/Unix_philosophy) should be immediately familiar with FBP:\n\n> This is the Unix philosophy: Write programs that do one thing and do it well. Write programs to work together. Write programs to handle text streams, because that is a universal interface.\n\nIt also fits well in Alan Kay's [original idea of object-oriented programming](http://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en):\n\n> I thought of objects being like biological cells and/or individual computers on a network, only able to communicate with messages (so messaging came at the very beginning -- it took a while to see how to do messaging in a programming language efficiently enough to be useful).\n\nNoFlo components can be written in any language that transpiles down to JavaScript, including ES6. The system is heavily inspired by [J. Paul Morrison's](http://www.jpaulmorrison.com/) book [Flow-Based Programming](http://www.jpaulmorrison.com/fbp/#More).\n\nRead more at <https://noflojs.org/>.\n\n## Suitability\n\nNoFlo is not a web framework or a UI toolkit. It is a way to coordinate and reorganize data flow in any JavaScript application. As such, it can be used for whatever purpose JavaScript can be used for. We know of NoFlo being used for anything from building [web servers](https://thegrid.io) and build tools, to coordinating events inside [GUI applications](https://flowhub.io), [driving](http://meemoo.org/blog/2015-01-14-turtle-power-to-the-people) [robots](http://bergie.iki.fi/blog/noflo-ardrone/), or building Internet-connected [art installations](http://bergie.iki.fi/blog/ingress-table/).\n\n## Tools and ecosystem\n\nNoFlo itself is just a library for implementing flow-based programs in JavaScript. There is an ecosystem of tools around NoFlo and the [fbp protocol](https://flowbased.github.io/fbp-protocol/) that make it more powerful. Here are some of them:\n\n* [Flowhub](https://app.flowhub.io) -- browser-based visual programming **IDE** for NoFlo and other flow-based systems\n* [noflo-nodejs](https://github.com/noflo/noflo-nodejs) -- command-line interface for running NoFlo programs on **Node.js**\n* [noflo-browser-app](https://github.com/noflo/noflo-browser-app) -- template for building NoFlo programs for **the web**\n* [noflo-assembly](https://github.com/noflo/noflo-assembly) -- **industrial approach** for designing NoFlo programs\n* [fbp-spec](https://github.com/flowbased/fbp-spec) -- **data-driven tests** for NoFlo and other FBP environments\n* [flowtrace](https://github.com/flowbased/flowtrace) -- tool for **retroactive debugging** of NoFlo programs. Supports visual replay with Flowhub\n\nSee also the [list of reusable NoFlo modules on NPM](https://www.npmjs.com/browse/keyword/noflo).\n\n## Requirements and installing\n\nNoFlo is available for Node.js [via NPM](https://npmjs.org/package/noflo), so you can install it with:\n\n```bash\n$ npm install noflo --save\n```\n\nYou can make a browser build of NoFlo using webpack. For webpack builds, you need configure the component loader statically with [noflo-component-loader](https://github.com/noflo/noflo-component-loader). For projects using Grunt, [grunt-noflo-browser](https://github.com/noflo/grunt-noflo-browser) plugin makes this easy.\n\n### Installing from Git\n\nNoFlo requires a reasonably recent version of [Node.js](http://nodejs.org/), and some [npm](http://npmjs.org/) packages. Ensure that you have NoFlo checked out from Git, and all NPM dependencies installed. Build NoFlo with:\n\n```bash\n$ npm run build\n```\n\nThen you can install everything needed by a simple:\n\n```bash\n$ npm link\n```\n\nNoFlo is available from [GitHub](https://github.com/noflo/noflo) under the MIT license.\n\n## Changes\n\nPlease refer to the [Release Notes](https://github.com/noflo/noflo/releases) and the [CHANGES.md document](https://github.com/noflo/noflo/blob/master/CHANGES.md).\n\n## Usage\n\nPlease refer to <http://noflojs.org/documentation/>. For visual programming with NoFlo, see <https://docs.flowhub.io/>.\n\n## Development\n\nNoFlo development happens on GitHub. Just fork the [main repository](https://github.com/noflo/noflo), make modifications and send a pull request.\n\nWe have an extensive suite of tests available for NoFlo. Run them with:\n\n```bash\n$ npm run build\n$ npm test\n```\n\n### Platform-specific tests\n\nBy default, the tests are run for both Node.js and the browser. You can also run only the tests for a particular target platform:\n\n```bash\n$ npm run test:node\n```\n\nor:\n\n```bash\n$ npm run test:browser\n```\n\n## Discussion\n\nThere is a `#noflo` channel on the [Flow-Based Programming Slack](https://join.slack.com/t/fbphq/shared_invite/enQtOTM4ODkzMTYyODE3LTJiMmNlZjhiMWY1MDY1ODA4Y2YzNDBlNDZlMTBkMDNlMjcwNzg2MGZhZjA2NjJjYTliYTM0OTIyYmM0Yzk0MDQ), and questions can be posted with the [`noflo` tag on Stack Overflow](http://stackoverflow.com/questions/tagged/noflo). See <http://noflojs.org/support/> for other ways to get in touch.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.326171875,
          "content": "# appveyor file\n# http://www.appveyor.com/docs/appveyor-yml\n\ninit:\n  - git config --global core.autocrlf input\n\nenvironment:\n  matrix:\n    - nodejs_version: 12\n\ninstall:\n  - ps: Install-Product node $env:nodejs_version\n  - npm install\n  - npm run build\n\nbuild: off\n\ntest_script:\n  - node --version\n  - npm --version\n  - cmd: npm test\n"
        },
        {
          "name": "babel.config.json",
          "type": "blob",
          "size": 0.03125,
          "content": "{\n  \"presets\": [\"@babel/env\"]\n}\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "karma.config.js",
          "type": "blob",
          "size": 0.7275390625,
          "content": "module.exports = (config) => {\n  const configuration = {\n    basePath: process.cwd(),\n    frameworks: [\n      'mocha',\n      'chai',\n    ],\n    reporters: [\n      'mocha',\n    ],\n    files: [\n      'browser/*.js',\n      'spec/utils/inject.js',\n      'spec/*.js',\n      {\n        pattern: 'spec/fixtures/*',\n        included: false,\n        served: true,\n        watched: true,\n      },\n    ],\n    browsers: ['ChromeHeadless'],\n    customLaunchers: {\n      ChromeHeadlessNoSandbox: {\n        base: 'ChromeHeadless',\n        flags: ['--no-sandbox'],\n      },\n    },\n    logLevel: config.LOG_WARN,\n    singleRun: true,\n  };\n\n  if (process.env.TRAVIS) {\n    configuration.browsers = ['ChromeHeadlessNoSandbox'];\n  }\n\n  config.set(configuration);\n};\n"
        },
        {
          "name": "noflo.svg",
          "type": "blob",
          "size": 3.29296875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\" width=\"500\" height=\"500\" id=\"svg2\" version=\"1.1\" inkscape:version=\"0.48.1 r9760\" sodipodi:docname=\"New document 1\">\n  <defs id=\"defs4\"/>\n  <sodipodi:namedview id=\"base\" pagecolor=\"#ffffff\" bordercolor=\"#666666\" borderopacity=\"1.0\" inkscape:pageopacity=\"0.0\" inkscape:pageshadow=\"2\" inkscape:zoom=\"0.5\" inkscape:cx=\"715.29456\" inkscape:cy=\"-8.4339601\" inkscape:document-units=\"px\" inkscape:current-layer=\"layer1\" showgrid=\"false\" showguides=\"true\" inkscape:guide-bbox=\"true\" inkscape:window-width=\"1366\" inkscape:window-height=\"711\" inkscape:window-x=\"0\" inkscape:window-y=\"26\" inkscape:window-maximized=\"1\"/>\n  <metadata id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n        <dc:title/>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g inkscape:label=\"Layer 1\" inkscape:groupmode=\"layer\" id=\"layer1\" transform=\"translate(0, -552.362)\">\n    <path style=\"font-size:medium;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-indent:0;text-align:start;text-decoration:none;line-height:normal;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;text-anchor:start;baseline-shift:baseline;color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-width:24.15630341;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate;font-family:Sans;-inkscape-font-specification:Sans\" d=\"m 66.554026,728.81005 a 10.964143,10.964143 0 0 0 -10.977231,10.94882 l 0,117.91275 a 10.964143,10.964143 0 1 0 21.926043,0 l 0,-106.93553 53.467782,0 0,107.07737 a 10.964143,10.964143 0 0 0 10.94885,10.94886 l 111.78598,0.14201 a 10.964143,10.964143 0 0 0 10.26804,-6.72246 10.964143,10.964143 0 0 0 0.0567,-0.11338 10.964143,10.964143 0 0 0 0.0299,-0.0849 10.964143,10.964143 0 0 0 0.99271,-4.73694 l -0.28359,-37.01616 24.59237,0 a 10.964143,10.964143 0 1 0 0,-21.92604 l -24.76256,0 -0.36887,-47.56788 50.63131,0 0,106.96388 a 10.964143,10.964143 0 0 0 10.94881,10.97723 l 110.42447,0 a 10.964143,10.964143 0 1 0 0,-21.92604 l -15.79925,0 0,-39.00172 a 10.964143,10.964143 0 0 0 -10.94881,-10.94881 l -49.15634,0 a 10.964143,10.964143 0 0 0 -10.94887,10.94881 l 0,39.00172 -12.59397,0 0,-106.9923 a 10.964143,10.964143 0 0 0 -10.97721,-10.94881 l -72.64243,0 a 10.964143,10.964143 0 0 0 -10.94882,11.03388 l 0.82256,107.10578 -8.96331,0 0,-38.63296 A 10.964143,10.964143 0 0 0 223.10112,797.3684 l -49.12798,0 a 10.964143,10.964143 0 0 0 -10.97719,10.94883 l 0,38.51949 -10.09789,0 0,-107.07738 a 10.964143,10.964143 0 0 0 -10.97723,-10.94881 l -75.365458,0 z m 304.752154,89.91662 27.20193,0 0,27.20194 -27.20193,0 0,-27.20194 z m -186.38556,0.56731 27.23027,0 0,27.20191 -27.23027,0 0,-27.20191 z\" id=\"path3781-0-0-3-0\" inkscape:connector-curvature=\"0\"/>\n  </g>\n</svg>"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.06640625,
          "content": "{\n  \"name\": \"noflo\",\n  \"description\": \"Flow-Based Programming environment for JavaScript\",\n  \"keywords\": [\n    \"fbp\",\n    \"workflow\",\n    \"flow\",\n    \"noflo\"\n  ],\n  \"author\": \"Henri Bergius <henri.bergius@iki.fi>\",\n  \"version\": \"1.4.3\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">= 6\"\n  },\n  \"dependencies\": {\n    \"debug\": \"^4.0.1\",\n    \"fbp\": \"^1.5.0\",\n    \"fbp-graph\": \"^0.7.0\",\n    \"fbp-manifest\": \"^0.3.1\",\n    \"get-function-params\": \"^2.0.6\"\n  },\n  \"devDependencies\": {\n    \"@types/debug\": \"^4.1.5\",\n    \"@types/node\": \"^14.14.2\",\n    \"chai\": \"^4.0.0\",\n    \"coffeescript\": \"^2.2.1\",\n    \"coveralls\": \"^3.0.0\",\n    \"eslint\": \"^7.7.0\",\n    \"eslint-config-airbnb-base\": \"^14.2.0\",\n    \"eslint-plugin-import\": \"^2.22.0\",\n    \"events\": \"^3.2.0\",\n    \"flowtrace\": \"^0.1.8\",\n    \"karma\": \"^6.0.0\",\n    \"karma-chai\": \"^0.1.0\",\n    \"karma-chrome-launcher\": \"^3.1.0\",\n    \"karma-mocha\": \"^2.0.1\",\n    \"karma-mocha-reporter\": \"^2.2.5\",\n    \"mocha\": \"^8.1.3\",\n    \"noflo-component-loader\": \"^0.4.0\",\n    \"nyc\": \"^15.1.0\",\n    \"path-browserify\": \"^1.0.1\",\n    \"process\": \"^0.11.10\",\n    \"replace\": \"^1.2.0\",\n    \"typescript\": \"^4.0.2\",\n    \"util\": \"^0.12.3\",\n    \"webpack\": \"^5.0.0\",\n    \"webpack-cli\": \"^4.0.0\"\n  },\n  \"main\": \"./lib/NoFlo\",\n  \"types\": \"./lib/NoFlo.d.ts\",\n  \"bin\": {\n    \"noflo\": \"./bin/noflo\",\n    \"noflo-cache-preheat\": \"./bin/noflo-cache-preheat\"\n  },\n  \"homepage\": \"http://noflojs.org/\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/noflo/noflo.git\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint .\",\n    \"build:node\": \"tsc\",\n    \"build:browser\": \"webpack\",\n    \"build\": \"npm run build:node && npm run build:browser\",\n    \"postbuild\": \"replace 'node/events' 'events' lib -r\",\n    \"pretest\": \"npm run lint && npm run build\",\n    \"test:node\": \"nyc mocha --require spec/utils/inject.js spec\",\n    \"test:browser\": \"karma start karma.config.js\",\n    \"test\": \"npm run test:node && npm run test:browser\"\n  },\n  \"docco_husky\": {\n    \"output_dir\": \"docs\",\n    \"project_name\": \"NoFlo\"\n  },\n  \"nyc\": {\n    \"include\": [\n      \"components/*.js\",\n      \"lib/*.js\",\n      \"lib/**/*.js\"\n    ]\n  }\n}\n"
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.3359375,
          "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"commonjs\",\n    \"allowJs\": true,\n    \"checkJs\": true,\n    \"outDir\": \".\",\n    \"declaration\": true,\n    \"strict\": false,\n    \"rootDir\": \"src\"\n  },\n  \"include\": [\n    \"src/*.ts\",\n    \"src/**/*.js\",\n    \"src/lib/**/*.js\"\n  ],\n  \"exclude\": [\n    \"lib/*.js\",\n    \"components/*.js\"\n  ]\n}\n"
        },
        {
          "name": "webpack.config.js",
          "type": "blob",
          "size": 1.185546875,
          "content": "const path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n  entry: {\n    noflo: './spec/fixtures/entry.js',\n  },\n  output: {\n    path: path.resolve(process.cwd(), 'browser'),\n    filename: '[name].js',\n  },\n  mode: 'production',\n  devtool: 'source-map',\n  module: {\n    rules: [\n      {\n        test: /noflo([\\\\]+|\\/)lib([\\\\]+|\\/)loader([\\\\]+|\\/)register.js$/,\n        use: [\n          {\n            loader: 'noflo-component-loader',\n            options: {\n              graph: null,\n              debug: true,\n              baseDir: process.cwd(),\n              manifest: {\n                runtimes: ['noflo'],\n                discover: true,\n              },\n              runtimes: [\n                'noflo',\n                'noflo-browser',\n              ],\n            },\n          },\n        ],\n      },\n    ],\n  },\n  resolve: {\n    fallback: {\n      child_process: false,\n      events: require.resolve('events/'),\n      fs: false,\n      os: false,\n      constants: false,\n      assert: false,\n      path: require.resolve('path-browserify'),\n      util: require.resolve('util'),\n    },\n  },\n  plugins: [\n    new webpack.ProvidePlugin({\n      process: ['process'],\n    }),\n  ],\n};\n"
        }
      ]
    }
  ]
}