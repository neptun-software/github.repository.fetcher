{
  "metadata": {
    "timestamp": 1736562040775,
    "page": 794,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "garand/sticky",
      "stars": 3302,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0361328125,
          "content": "*.psd\n*~\nnode_modules/\nnpm-debug.log\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.05078125,
          "content": "Copyright 2014-2016 Anthony Garand\nhttp://garand.me\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.1708984375,
          "content": "# Sticky\n\nSticky is a jQuery plugin that gives you the ability to make any element on your page always stay visible.\n\n## Sticky in brief\n\nThis is how it works:\n\n- When the target element is about to be hidden, the plugin will add the class `className` to it (and to a wrapper added as its parent), set it to `position: fixed` and calculate its new `top`, based on the element's height, the page height and the `topSpacing` and `bottomSpacing` options.\n- That's it. \nIn some cases you might need to set a fixed width to your element when it is \"sticked\".\nBut by default (`widthFromWrapper == true`) sticky updates elements's width to the wrapper's width.\nCheck the `example-*.html` files for some examples.\n\n## Usage\n\n- Include jQuery & Sticky.\n- Call Sticky.\n\n```html\n<script src=\"jquery.js\"></script>\n<script src=\"jquery.sticky.js\"></script>\n<script>\n  $(document).ready(function(){\n    $(\"#sticker\").sticky({topSpacing:0});\n  });\n</script>\n```\n\n- Edit your css to position the elements (check the examples in `example-*.html`).\n\n- To unstick an object\n\n```html\n<script>\n  $(\"#sticker\").unstick();\n</script>\n```\n\n## Options\n\n- `topSpacing`: (default: `0`) Pixels between the page top and the element's top.\n- `bottomSpacing`: (default: `0`) Pixels between the page bottom and the element's bottom.\n- `className`: (default: `'is-sticky'`) CSS class added to the element's wrapper when \"sticked\".\n- `wrapperClassName`: (default: `'sticky-wrapper'`) CSS class added to the wrapper.\n- `center`: (default: `false`) Boolean determining whether the sticky element should be horizontally centered in the page.\n- `getWidthFrom`: (default: `''`) Selector of element referenced to set fixed width of \"sticky\" element.\n- `widthFromWrapper`: (default: `true`) Boolean determining whether width of the \"sticky\" element should be updated to match the wrapper's width. Wrapper is a placeholder for \"sticky\" element while it is fixed (out of static elements flow), and its width depends on the context and CSS rules. Works only as long `getWidthForm` isn't set.\n- `responsiveWidth`: (default: `false`) Boolean determining whether widths will be recalculated on window resize (using getWidthfrom).\n- `zIndex`: (default: `inherit`) controls z-index of the sticked element.\n\n## Methods\n\n- `sticky(options)`: Initializer. `options` is optional.\n- `sticky('update')`: Recalculates the element's position.\n\n## Events\n\n- `sticky-start`: When the element becomes sticky.\n- `sticky-end`: When the element returns to its original location\n- `sticky-update`: When the element is sticked but position must be updated for constraints reasons\n- `sticky-bottom-reached`: When the element reached the bottom space limit\n- `sticky-bottom-unreached`: When the element unreached the bottom space limit\n\nTo subscribe to events use jquery:\n\n```html\n<script>\n  $('#sticker').on('sticky-start', function() { console.log(\"Started\"); });\n  $('#sticker').on('sticky-end', function() { console.log(\"Ended\"); });\n  $('#sticker').on('sticky-update', function() { console.log(\"Update\"); });\n  $('#sticker').on('sticky-bottom-reached', function() { console.log(\"Bottom reached\"); });\n  $('#sticker').on('sticky-bottom-unreached', function() { console.log(\"Bottom unreached\"); });\n</script>\n```\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 1.0234375,
          "content": "{\n    \"name\": \"jquery-sticky\",\n    \"description\": \"Sticky is a jQuery plugin that gives you the ability to make any element on your page always stay visible.\",\n    \"categories\": [ \"UI\", \"DOM\" ],\n    \"author\": {\n        \"name\": \"Anthony Garand\"\n    },\n    \"contributors\": [\n        {\n            \"name\": \"German M. Bravo\"\n        },\n        {\n            \"name\": \"Ruud Kamphuis\"\n        },\n        {\n            \"name\": \"Leonardo C. Daronco\"\n        }\n    ],\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/garand/sticky.git\"\n    },\n    \"bugs\": {\n        \"web\": \"https://github.com/garand/sticky/issues\"\n    },\n    \"licenses\": [\n        {\n            \"type\": \"MIT\",\n            \"url\": \"http://jquery.com/blob/master/MIT-LICENSE.txt\"\n        },\n        {\n            \"type\": \"GPL\",\n            \"url\": \"http://jquery.com/blob/master/GPL-LICENSE.txt\"\n        }\n    ],\n    \"github\": \"https://github.com/garand/sticky\",\n\n    \"main\": \"jquery.sticky.js\",\n    \"dependencies\": {\n        \"jquery\": null\n    },\n    \"ignore\": []\n}\n"
        },
        {
          "name": "example-center.html",
          "type": "blob",
          "size": 1.02734375,
          "content": "<!doctype html>\n<html>\n<head>\n  <title>Sticky Plugin</title>\n  <script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\"></script>\n  <script type=\"text/javascript\" src=\"jquery.sticky.js\"></script>\n  <script>\n    $(window).load(function(){\n      $(\"#sticker\").sticky({ topSpacing: 0, center:true, className:\"hey\" });\n    });\n  </script>\n  <style>\n    body {\n      height: 10000px;\n      padding: 0;\n      margin: 0;\n    }\n\n    #sticker {\n      background: #bada55;\n      color: white;\n      width: 300px;\n      font-family: Droid Sans;\n      font-size: 40px;\n      line-height: 1.6em;\n      font-weight: bold;\n      text-align: center;\n      padding: 20px;\n      margin: 0 auto;\n      text-shadow: 0 1px 1px rgba(0,0,0,.2);\n      border-radius: 50px;\n    }\n  </style>\n</head>\n<body>\n  <p>This is test this is text this is text at the top.</p>\n  <div id=\"sticker\">\n    <p>This is the sticky thingy that is really cool.</p>\n  </div>\n  <p>This is test this is text this is text at the bottom.</p>\n</body>\n</html>\n"
        },
        {
          "name": "example-header.html",
          "type": "blob",
          "size": 0.9736328125,
          "content": "<!doctype html>\n<html>\n<head>\n  <title>Sticky Plugin</title>\n  <script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\"></script>\n  <script type=\"text/javascript\" src=\"jquery.sticky.js\"></script>\n  <script>\n    $(window).load(function(){\n      $(\"#header\").sticky({ topSpacing: 0 });\n    });\n  </script>\n  <style>\n    body {\n      height: 10000px;\n      padding: 0;\n      margin: 0;\n    }\n\n    #header {\n      background: #bada55;\n      color: white;\n      font-family: Droid Sans;\n      font-size: 18px;\n      line-height: 1.6em;\n      font-weight: bold;\n      text-align: center;\n      padding: 10px;\n      text-shadow: 0 1px 1px rgba(0,0,0,.2);\n      width:100%;\n      box-sizing:border-box;\n    }\n  </style>\n</head>\n<body>\n  <p>This is test this is text this is text at the top.</p>\n  <div id=\"header\">\n    <p>This is the sticky thingy that is really cool.</p>\n  </div>\n  <p>This is test this is text this is text at the bottom.</p>\n</body>\n</html>\n"
        },
        {
          "name": "example-right.html",
          "type": "blob",
          "size": 1.095703125,
          "content": "<!doctype html>\n<html>\n<head>\n  <title>Sticky Plugin</title>\n  <script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\"></script>\n  <script type=\"text/javascript\" src=\"jquery.sticky.js\"></script>\n  <script>\n    $(window).load(function(){\n      $(\"#sticker\").sticky({ topSpacing: 50 });\n    });\n  </script>\n  <style>\n    body {\n      height: 10000px;\n      padding: 0;\n      margin: 0;\n    }\n\n    #sticker {\n      background: #bada55;\n      color: white;\n      width: 300px;\n      font-family: Droid Sans;\n      font-size: 40px;\n      line-height: 1.6em;\n      font-weight: bold;\n      text-align: center;\n      padding: 20px;\n      text-shadow: 0 1px 1px rgba(0,0,0,.2);\n      border-radius: 50px;\n      float:right;\n    }\n\n    #wrapper {\n      width:700px;\n      margin:0 auto;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"wrapper\">\n    <p>This is test this is text this is text at the top.</p>\n    <div id=\"sticker\">\n      <p>This is the sticky thingy that is really cool.</p>\n    </div>\n    <p>This is test this is text this is text at the bottom.</p>\n  </div>\n</body>\n</html>\n"
        },
        {
          "name": "jquery.sticky.js",
          "type": "blob",
          "size": 9.8486328125,
          "content": "// Sticky Plugin v1.0.4 for jQuery\n// =============\n// Author: Anthony Garand\n// Improvements by German M. Bravo (Kronuz) and Ruud Kamphuis (ruudk)\n// Improvements by Leonardo C. Daronco (daronco)\n// Created: 02/14/2011\n// Date: 07/20/2015\n// Website: http://stickyjs.com/\n// Description: Makes an element on the page stick on the screen as you scroll\n//              It will only set the 'top' and 'position' of your element, you\n//              might need to adjust the width in some cases.\n\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node/CommonJS\n        module.exports = factory(require('jquery'));\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n}(function ($) {\n    var slice = Array.prototype.slice; // save ref to original slice()\n    var splice = Array.prototype.splice; // save ref to original slice()\n\n  var defaults = {\n      topSpacing: 0,\n      bottomSpacing: 0,\n      className: 'is-sticky',\n      wrapperClassName: 'sticky-wrapper',\n      center: false,\n      getWidthFrom: '',\n      widthFromWrapper: true, // works only when .getWidthFrom is empty\n      responsiveWidth: false,\n      zIndex: 'inherit'\n    },\n    $window = $(window),\n    $document = $(document),\n    sticked = [],\n    windowHeight = $window.height(),\n    scroller = function() {\n      var scrollTop = $window.scrollTop(),\n        documentHeight = $document.height(),\n        dwh = documentHeight - windowHeight,\n        extra = (scrollTop > dwh) ? dwh - scrollTop : 0;\n\n      for (var i = 0, l = sticked.length; i < l; i++) {\n        var s = sticked[i],\n          elementTop = s.stickyWrapper.offset().top,\n          etse = elementTop - s.topSpacing - extra;\n\n        //update height in case of dynamic content\n        s.stickyWrapper.css('height', s.stickyElement.outerHeight());\n\n        if (scrollTop <= etse) {\n          if (s.currentTop !== null) {\n            s.stickyElement\n              .css({\n                'width': '',\n                'position': '',\n                'top': '',\n                'z-index': ''\n              });\n            s.stickyElement.parent().removeClass(s.className);\n            s.stickyElement.trigger('sticky-end', [s]);\n            s.currentTop = null;\n          }\n        }\n        else {\n          var newTop = documentHeight - s.stickyElement.outerHeight()\n            - s.topSpacing - s.bottomSpacing - scrollTop - extra;\n          if (newTop < 0) {\n            newTop = newTop + s.topSpacing;\n          } else {\n            newTop = s.topSpacing;\n          }\n          if (s.currentTop !== newTop) {\n            var newWidth;\n            if (s.getWidthFrom) {\n                padding =  s.stickyElement.innerWidth() - s.stickyElement.width();\n                newWidth = $(s.getWidthFrom).width() - padding || null;\n            } else if (s.widthFromWrapper) {\n                newWidth = s.stickyWrapper.width();\n            }\n            if (newWidth == null) {\n                newWidth = s.stickyElement.width();\n            }\n            s.stickyElement\n              .css('width', newWidth)\n              .css('position', 'fixed')\n              .css('top', newTop)\n              .css('z-index', s.zIndex);\n\n            s.stickyElement.parent().addClass(s.className);\n\n            if (s.currentTop === null) {\n              s.stickyElement.trigger('sticky-start', [s]);\n            } else {\n              // sticky is started but it have to be repositioned\n              s.stickyElement.trigger('sticky-update', [s]);\n            }\n\n            if (s.currentTop === s.topSpacing && s.currentTop > newTop || s.currentTop === null && newTop < s.topSpacing) {\n              // just reached bottom || just started to stick but bottom is already reached\n              s.stickyElement.trigger('sticky-bottom-reached', [s]);\n            } else if(s.currentTop !== null && newTop === s.topSpacing && s.currentTop < newTop) {\n              // sticky is started && sticked at topSpacing && overflowing from top just finished\n              s.stickyElement.trigger('sticky-bottom-unreached', [s]);\n            }\n\n            s.currentTop = newTop;\n          }\n\n          // Check if sticky has reached end of container and stop sticking\n          var stickyWrapperContainer = s.stickyWrapper.parent();\n          var unstick = (s.stickyElement.offset().top + s.stickyElement.outerHeight() >= stickyWrapperContainer.offset().top + stickyWrapperContainer.outerHeight()) && (s.stickyElement.offset().top <= s.topSpacing);\n\n          if( unstick ) {\n            s.stickyElement\n              .css('position', 'absolute')\n              .css('top', '')\n              .css('bottom', 0)\n              .css('z-index', '');\n          } else {\n            s.stickyElement\n              .css('position', 'fixed')\n              .css('top', newTop)\n              .css('bottom', '')\n              .css('z-index', s.zIndex);\n          }\n        }\n      }\n    },\n    resizer = function() {\n      windowHeight = $window.height();\n\n      for (var i = 0, l = sticked.length; i < l; i++) {\n        var s = sticked[i];\n        var newWidth = null;\n        if (s.getWidthFrom) {\n            if (s.responsiveWidth) {\n                newWidth = $(s.getWidthFrom).width();\n            }\n        } else if(s.widthFromWrapper) {\n            newWidth = s.stickyWrapper.width();\n        }\n        if (newWidth != null) {\n            s.stickyElement.css('width', newWidth);\n        }\n      }\n    },\n    methods = {\n      init: function(options) {\n        return this.each(function() {\n          var o = $.extend({}, defaults, options);\n          var stickyElement = $(this);\n\n          var stickyId = stickyElement.attr('id');\n          var wrapperId = stickyId ? stickyId + '-' + defaults.wrapperClassName : defaults.wrapperClassName;\n          var wrapper = $('<div></div>')\n            .attr('id', wrapperId)\n            .addClass(o.wrapperClassName);\n\n          stickyElement.wrapAll(function() {\n            if ($(this).parent(\"#\" + wrapperId).length == 0) {\n                    return wrapper;\n            }\n});\n\n          var stickyWrapper = stickyElement.parent();\n\n          if (o.center) {\n            stickyWrapper.css({width:stickyElement.outerWidth(),marginLeft:\"auto\",marginRight:\"auto\"});\n          }\n\n          if (stickyElement.css(\"float\") === \"right\") {\n            stickyElement.css({\"float\":\"none\"}).parent().css({\"float\":\"right\"});\n          }\n\n          o.stickyElement = stickyElement;\n          o.stickyWrapper = stickyWrapper;\n          o.currentTop    = null;\n\n          sticked.push(o);\n\n          methods.setWrapperHeight(this);\n          methods.setupChangeListeners(this);\n        });\n      },\n\n      setWrapperHeight: function(stickyElement) {\n        var element = $(stickyElement);\n        var stickyWrapper = element.parent();\n        if (stickyWrapper) {\n          stickyWrapper.css('height', element.outerHeight());\n        }\n      },\n\n      setupChangeListeners: function(stickyElement) {\n        if (window.MutationObserver) {\n          var mutationObserver = new window.MutationObserver(function(mutations) {\n            if (mutations[0].addedNodes.length || mutations[0].removedNodes.length) {\n              methods.setWrapperHeight(stickyElement);\n            }\n          });\n          mutationObserver.observe(stickyElement, {subtree: true, childList: true});\n        } else {\n          if (window.addEventListener) {\n            stickyElement.addEventListener('DOMNodeInserted', function() {\n              methods.setWrapperHeight(stickyElement);\n            }, false);\n            stickyElement.addEventListener('DOMNodeRemoved', function() {\n              methods.setWrapperHeight(stickyElement);\n            }, false);\n          } else if (window.attachEvent) {\n            stickyElement.attachEvent('onDOMNodeInserted', function() {\n              methods.setWrapperHeight(stickyElement);\n            });\n            stickyElement.attachEvent('onDOMNodeRemoved', function() {\n              methods.setWrapperHeight(stickyElement);\n            });\n          }\n        }\n      },\n      update: scroller,\n      unstick: function(options) {\n        return this.each(function() {\n          var that = this;\n          var unstickyElement = $(that);\n\n          var removeIdx = -1;\n          var i = sticked.length;\n          while (i-- > 0) {\n            if (sticked[i].stickyElement.get(0) === that) {\n                splice.call(sticked,i,1);\n                removeIdx = i;\n            }\n          }\n          if(removeIdx !== -1) {\n            unstickyElement.unwrap();\n            unstickyElement\n              .css({\n                'width': '',\n                'position': '',\n                'top': '',\n                'float': '',\n                'z-index': ''\n              })\n            ;\n          }\n        });\n      }\n    };\n\n  // should be more efficient than using $window.scroll(scroller) and $window.resize(resizer):\n  if (window.addEventListener) {\n    window.addEventListener('scroll', scroller, false);\n    window.addEventListener('resize', resizer, false);\n  } else if (window.attachEvent) {\n    window.attachEvent('onscroll', scroller);\n    window.attachEvent('onresize', resizer);\n  }\n\n  $.fn.sticky = function(method) {\n    if (methods[method]) {\n      return methods[method].apply(this, slice.call(arguments, 1));\n    } else if (typeof method === 'object' || !method ) {\n      return methods.init.apply( this, arguments );\n    } else {\n      $.error('Method ' + method + ' does not exist on jQuery.sticky');\n    }\n  };\n\n  $.fn.unstick = function(method) {\n    if (methods[method]) {\n      return methods[method].apply(this, slice.call(arguments, 1));\n    } else if (typeof method === 'object' || !method ) {\n      return methods.unstick.apply( this, arguments );\n    } else {\n      $.error('Method ' + method + ' does not exist on jQuery.sticky');\n    }\n  };\n  $(function() {\n    setTimeout(scroller, 0);\n  });\n}));\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.64453125,
          "content": "{\n  \"name\": \"jquery-sticky\",\n  \"version\": \"1.0.4\",\n  \"description\": \"Sticky is a jQuery plugin that gives you the ability to make any element on your page always stay visible.\",\n  \"main\": \"jquery.sticky.js\",\n  \"files\": [\n    \"jquery.sticky.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": \"garand/sticky\",\n  \"keywords\": [\n    \"dom\",\n    \"jquery-plugin\",\n    \"ui\"\n  ],\n  \"author\": \"Anthony Garand\",\n  \"license\": \"(MIT OR GPL-3.0)\",\n  \"bugs\": {\n    \"url\": \"https://github.com/garand/sticky/issues\"\n  },\n  \"homepage\": \"https://github.com/garand/sticky#readme\",\n  \"peerDependencies\": {\n    \"jquery\": \"*\"\n  }\n}\n"
        }
      ]
    }
  ]
}