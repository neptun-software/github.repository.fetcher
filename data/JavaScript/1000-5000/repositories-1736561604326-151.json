{
  "metadata": {
    "timestamp": 1736561604326,
    "page": 151,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "unifiedjs/unified",
      "stars": 4546,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1435546875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.10546875,
          "content": "coverage/\nnode_modules/\n.DS_Store\n*.d.ts\n*.log\n*.map\n*.tsbuildinfo\nyarn.lock\n!/index.d.ts\n!/test/types.d.ts\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0380859375,
          "content": "ignore-scripts=true\npackage-lock=false\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.0146484375,
          "content": "coverage/\n*.md\n"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 0.1201171875,
          "content": "# Changelog\n\nSee [GitHub Releases][releases] for the changelog.\n\n[releases]: https://github.com/unifiedjs/unified/releases\n"
        },
        {
          "name": "index.d.ts",
          "type": "blob",
          "size": 2.818359375,
          "content": "import type {Value} from 'vfile'\nimport type {CompileResults} from './lib/index.js'\n\nexport type {\n  // `CompileResultMap` is typed and exposed below.\n  CompileResults,\n  Compiler,\n  // `Data` is typed and exposed below.\n  Parser,\n  Pluggable,\n  PluggableList,\n  Plugin,\n  PluginTuple,\n  Preset,\n  ProcessCallback,\n  Processor,\n  RunCallback,\n  // `Settings` is typed and exposed below.\n  TransformCallback,\n  Transformer\n} from './lib/index.js'\n\nexport {unified} from './lib/index.js'\n\n// See: <https://github.com/sindresorhus/type-fest/blob/main/source/empty-object.d.ts>\ndeclare const emptyObjectSymbol: unique symbol\n\n/**\n * Interface of known results from compilers.\n *\n * Normally, compilers result in text ({@linkcode Value} of `vfile`).\n * When you compile to something else, such as a React node (as in,\n * `rehype-react`), you can augment this interface to include that type.\n *\n * ```ts\n * import type {ReactNode} from 'somewhere'\n *\n * declare module 'unified' {\n *   interface CompileResultMap {\n *     // Register a new result (value is used, key should match it).\n *     ReactNode: ReactNode\n *   }\n * }\n *\n * export {} // You may not need this, but it makes sure the file is a module.\n * ```\n *\n * Use {@linkcode CompileResults} to access the values.\n */\nexport interface CompileResultMap {\n  // Note: if `Value` from `VFile` is changed, this should too.\n  Uint8Array: Uint8Array\n  string: string\n}\n\n/**\n * Interface of known data that can be supported by all plugins.\n *\n * Typically, options can be given to a specific plugin, but sometimes it makes\n * sense to have information shared with several plugins.\n * For example, a list of HTML elements that are self-closing, which is needed\n * during all phases.\n *\n * To type this, do something like:\n *\n * ```ts\n * declare module 'unified' {\n *   interface Data {\n *     htmlVoidElements?: Array<string> | undefined\n *   }\n * }\n *\n * export {} // You may not need this, but it makes sure the file is a module.\n * ```\n */\nexport interface Data {\n  settings?: Settings | undefined\n}\n\n/**\n * Interface of known extra options, that can be supported by parser and\n * compilers.\n *\n * This exists so that users can use packages such as `remark`, which configure\n * both parsers and compilers (in this case `remark-parse` and\n * `remark-stringify`), and still provide options for them.\n *\n * When you make parsers or compilers, that could be packaged up together,\n * you should support `this.data('settings')` as input and merge it with\n * explicitly passed `options`.\n * Then, to type it, using `remark-stringify` as an example, do something like:\n *\n * ```ts\n * declare module 'unified' {\n *   interface Settings {\n *     bullet: '*' | '+' | '-'\n *     // …\n *   }\n * }\n *\n * export {} // You may not need this, but it makes sure the file is a module.\n * ```\n */\nexport interface Settings {\n  [emptyObjectSymbol]?: never\n}\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.0791015625,
          "content": "// Note: types exposed from `index.d.ts`.\nexport {unified} from './lib/index.js'\n"
        },
        {
          "name": "index.test-d.ts",
          "type": "blob",
          "size": 16.109375,
          "content": "import type {Root as HastRoot} from 'hast'\nimport type {Root as MdastRoot} from 'mdast'\nimport {expectType} from 'tsd'\nimport type {Node as UnistNode} from 'unist'\nimport type {VFile} from 'vfile'\nimport type {Plugin, Processor, TransformCallback} from './index.js'\nimport {unified} from './index.js'\n\nexpectType<Processor>(unified())\nexpectType<Processor>(unified().freeze())\n\ntype ReactNode = {\n  kind: string\n}\n\ntype ExampleOptionalOptions = {\n  example?: string | null | undefined\n}\n\ntype ExampleRequiredOptions = {\n  example: string\n}\n\nconst hastRoot: HastRoot = {\n  type: 'root',\n  children: [{type: 'element', tagName: 'p', properties: {}, children: []}]\n}\n\nconst mdastRoot: MdastRoot = {\n  type: 'root',\n  children: [{type: 'paragraph', children: []}]\n}\n\n// # Explicitly typed plugins\n\n// ## Plugin w/o options\nconst pluginWithoutOptions: Plugin = function () {\n  // Empty.\n}\n\nunified().use(pluginWithoutOptions)\n// @ts-expect-error: plugin does not expect options.\nunified().use(pluginWithoutOptions, {})\n// @ts-expect-error: plugin does not expect `string` as options.\nunified().use(pluginWithoutOptions, '')\n// @ts-expect-error: plugin does not expect anything.\nunified().use(pluginWithoutOptions, undefined)\n\n// ## Plugin w/ optional options\nconst pluginWithOptionalOptions: Plugin<\n  [(ExampleOptionalOptions | null | undefined)?]\n> = function (options) {\n  expectType<ExampleOptionalOptions | null | undefined>(options)\n}\n\nunified().use(pluginWithOptionalOptions)\nunified().use(pluginWithOptionalOptions, {})\nunified().use(pluginWithOptionalOptions, {example: null})\nunified().use(pluginWithOptionalOptions, {example: undefined})\nunified().use(pluginWithOptionalOptions, {example: 'asd'})\n// @ts-expect-error: plugin does not accept `whatever`.\nunified().use(pluginWithOptionalOptions, {whatever: 1})\n\n// ## Plugin w/ required options\nconst pluginWithOptions: Plugin<[ExampleRequiredOptions]> = function (options) {\n  expectType<ExampleRequiredOptions>(options)\n}\n\n// @ts-expect-error: plugin requires options.\nunified().use(pluginWithOptions)\n// @ts-expect-error: plugin requires particular option.\nunified().use(pluginWithOptions, {})\nunified().use(pluginWithOptions, {example: ''})\n\n// ## Plugin w/ several arguments\nconst pluginWithSeveralArguments: Plugin<[ExampleRequiredOptions, number]> =\n  function (options, value) {\n    expectType<ExampleRequiredOptions>(options)\n    expectType<number>(value)\n  }\n\n// @ts-expect-error: plugin requires options.\nunified().use(pluginWithSeveralArguments)\n// @ts-expect-error: plugin requires particular option.\nunified().use(pluginWithSeveralArguments, {})\n// @ts-expect-error: plugin requires more arguments.\nunified().use(pluginWithSeveralArguments, {example: ''})\nunified().use(pluginWithSeveralArguments, {example: ''}, 1)\n\n// # Implicitly typed plugins.\n\n// ## Plugin without options.\n\nfunction pluginWithoutOptionsImplicit() {\n  // Empty.\n}\n\nunified().use(pluginWithoutOptionsImplicit)\nunified().use(\n  pluginWithoutOptionsImplicit,\n  // @ts-expect-error: plugin does not accept options.\n  {}\n)\n\n// ## Plugin w/ optional options\n\nfunction pluginWithOptionalOptionsImplicit(\n  options?: ExampleOptionalOptions | null | undefined\n) {\n  expectType<ExampleOptionalOptions | null | undefined>(options)\n}\n\nunified().use(pluginWithOptionalOptionsImplicit)\nunified().use(pluginWithOptionalOptionsImplicit, {})\nunified().use(pluginWithOptionalOptionsImplicit, {example: null})\nunified().use(pluginWithOptionalOptionsImplicit, {example: undefined})\nunified().use(pluginWithOptionalOptionsImplicit, {example: 'asd'})\nunified().use(\n  pluginWithOptionalOptionsImplicit,\n  // @ts-expect-error: plugin does not accept `whatever`.\n  {whatever: 1}\n)\n\n// ## Plugin w/ required options\nfunction pluginWithOptionsImplicit(options: ExampleRequiredOptions) {\n  expectType<ExampleRequiredOptions>(options)\n}\n\n// @ts-expect-error: plugin requires options.\nunified().use(pluginWithOptionsImplicit)\nunified().use(\n  pluginWithOptionsImplicit,\n  // @ts-expect-error: plugin requires particular option.\n  {}\n)\nunified().use(pluginWithOptionsImplicit, {example: ''})\n\n// ## Plugin w/ several arguments\nfunction pluginWithSeveralArgumentsImplicit(\n  options: ExampleRequiredOptions,\n  value: number\n) {\n  expectType<ExampleRequiredOptions>(options)\n  expectType<number>(value)\n}\n\n// @ts-expect-error: plugin requires options.\nunified().use(pluginWithSeveralArgumentsImplicit)\nunified().use(\n  pluginWithSeveralArgumentsImplicit,\n  // @ts-expect-error: plugin requires particular option.\n  {}\n)\nunified().use(\n  pluginWithSeveralArgumentsImplicit,\n  // @ts-expect-error: plugin requires more arguments.\n  {example: ''}\n)\nunified().use(pluginWithSeveralArgumentsImplicit, {example: ''}, 1)\n\n// # Different ways of passing options\n\nunified()\n  .use(pluginWithOptions, {example: ''})\n  .use([[pluginWithOptions, {example: ''}]])\n  .use({\n    plugins: [[pluginWithOptions, {example: ''}]]\n  })\n\n// # Turning plugins on/off w/ booleans\n\nunified()\n  .use(pluginWithoutOptions, true)\n  .use(pluginWithoutOptions, false)\n  .use([\n    [pluginWithoutOptions, true],\n    [pluginWithoutOptions, false]\n  ])\n  .use({\n    plugins: [\n      [pluginWithoutOptions, true],\n      [pluginWithoutOptions, false]\n    ]\n  })\n\n// # Plugin defining parser/compiler\n\nunified().use(function () {\n  // Function.\n  this.parser = function (document, file) {\n    expectType<string>(document)\n    expectType<VFile>(file)\n    return {type: ''}\n  }\n\n  // Function.\n  this.compiler = function (tree, file) {\n    expectType<UnistNode>(tree)\n    expectType<VFile>(file)\n    return ''\n  }\n})\n\n// # Plugins w/ transformer\n\nunified()\n  // Sync w/ nothing (baseline).\n  .use(function () {\n    return function (tree, file) {\n      expectType<UnistNode>(tree)\n      expectType<VFile>(file)\n    }\n  })\n  // Sync yielding tree.\n  .use(function () {\n    return function () {\n      return {type: 'x'}\n    }\n  })\n  // Sync yielding explicit `undefined`.\n  .use(function () {\n    return function () {\n      return undefined\n    }\n  })\n  // Sync yielding implicit `void` (because TS).\n  .use(function () {\n    return function () {\n      // Empty.\n    }\n  })\n  // Sync yielding error.\n  .use(function () {\n    return function (x) {\n      return new Error('x')\n    }\n  })\n  // Sync throwing error.\n  .use(function () {\n    return function (x) {\n      // Note: TS doesn’t like the `never` if we remove this useless condition.\n      if (x) {\n        throw new Error('x')\n      }\n    }\n  })\n\n  // Sync calling `next` w/ tree.\n  .use(function () {\n    return function (_1, _2, next) {\n      expectType<TransformCallback>(next)\n      next(undefined, {type: 'x'})\n    }\n  })\n  // Sync calling `next` w/ error.\n  .use(function () {\n    return function (_1, _2, next) {\n      next(new Error('x'))\n    }\n  })\n  // Async calling `next`.\n  .use(function () {\n    return function (_1, _2, next) {\n      setImmediate(function () {\n        next()\n      })\n    }\n  })\n  // Async calling `next` w/ tree.\n  .use(function () {\n    return function (_1, _2, next) {\n      setImmediate(function () {\n        next(undefined, {type: 'x'})\n      })\n    }\n  })\n  // Async calling `next` w/ error.\n  .use(function () {\n    return function (_1, _2, next) {\n      setImmediate(function () {\n        next(new Error('x'))\n      })\n    }\n  })\n\n  // Resolving nothing (baseline).\n  .use(function () {\n    return async function (tree, file) {\n      expectType<UnistNode>(tree)\n      expectType<VFile>(file)\n    }\n  })\n  // Resolving tree.\n  .use(function () {\n    return async function () {\n      return {type: 'x'}\n    }\n  })\n  // Resolving explicit `undefined`.\n  .use(function () {\n    return async function () {\n      return undefined\n    }\n  })\n  // Resolving implicit `void` (because TS).\n  .use(function () {\n    return async function () {\n      // Empty.\n    }\n  })\n  // Rejecting error.\n  .use(function () {\n    return async function (x) {\n      if (x) {\n        throw new Error('x')\n      }\n    }\n  })\n\n// # Plugins bound to a certain node\n\n// Parse plugins.\nconst remarkParse: Plugin<[], string, MdastRoot> = function () {\n  // Empty.\n}\n\nconst processorWithRemarkParse = unified().use(remarkParse)\n\nexpectType<Processor<MdastRoot>>(processorWithRemarkParse)\nexpectType<MdastRoot>(processorWithRemarkParse.parse(''))\nexpectType<UnistNode>(processorWithRemarkParse.runSync(mdastRoot))\nexpectType<UnistNode>(processorWithRemarkParse.runSync(hastRoot))\nexpectType<Uint8Array | string>(processorWithRemarkParse.stringify(mdastRoot))\nprocessorWithRemarkParse.stringify(hastRoot)\nexpectType<VFile>(processorWithRemarkParse.processSync(''))\n\n// Inspect/transform plugin (explicit).\nconst remarkLint: Plugin<[], MdastRoot> = function () {\n  // Empty.\n}\n\nconst processorWithRemarkLint = unified().use(remarkLint)\n\nexpectType<Processor<undefined, MdastRoot, MdastRoot>>(processorWithRemarkLint)\nexpectType<UnistNode>(processorWithRemarkLint.parse(''))\nexpectType<MdastRoot>(processorWithRemarkLint.runSync(mdastRoot))\n// @ts-expect-error: not the correct node type.\nprocessorWithRemarkLint.runSync(hastRoot)\nexpectType<Uint8Array | string>(processorWithRemarkLint.stringify(mdastRoot))\nexpectType<Uint8Array | string>(processorWithRemarkLint.stringify(hastRoot))\nexpectType<VFile>(processorWithRemarkLint.processSync(''))\n\n// Inspect/transform plugin (implicit).\nfunction remarkLintImplicit() {\n  return function (tree: MdastRoot) {\n    expectType<MdastRoot>(tree)\n    return mdastRoot\n  }\n}\n\nconst processorWithRemarkLintImplicit = unified().use(remarkLintImplicit)\n\nexpectType<Processor<undefined, MdastRoot, MdastRoot>>(\n  processorWithRemarkLintImplicit\n)\nexpectType<UnistNode>(processorWithRemarkLintImplicit.parse(''))\nexpectType<MdastRoot>(processorWithRemarkLintImplicit.runSync(mdastRoot))\n// @ts-expect-error: not the correct node type.\nprocessorWithRemarkLintImplicit.runSync(hastRoot)\nexpectType<Uint8Array | string>(\n  processorWithRemarkLintImplicit.stringify(mdastRoot)\n)\nexpectType<Uint8Array | string>(\n  processorWithRemarkLintImplicit.stringify(hastRoot)\n)\nexpectType<VFile>(processorWithRemarkLintImplicit.processSync(''))\n\n// Mutate  plugin (explicit).\nconst remarkRehype: Plugin<[], MdastRoot, HastRoot> = function () {\n  // Empty.\n}\n\nconst processorWithRemarkRehype = unified().use(remarkRehype)\n\nexpectType<Processor<undefined, MdastRoot, HastRoot>>(processorWithRemarkRehype)\nexpectType<UnistNode>(processorWithRemarkRehype.parse(''))\nexpectType<HastRoot>(processorWithRemarkRehype.runSync(mdastRoot))\n// @ts-expect-error: not the correct node type.\nprocessorWithRemarkRehype.runSync(hastRoot)\nexpectType<Uint8Array | string>(processorWithRemarkRehype.stringify(hastRoot))\nexpectType<Uint8Array | string>(processorWithRemarkRehype.stringify(mdastRoot))\nexpectType<VFile>(processorWithRemarkRehype.processSync(''))\n\n// Mutate  plugin (implicit).\nfunction remarkRehypeImplicit() {\n  return function (tree: MdastRoot) {\n    expectType<MdastRoot>(tree)\n    return hastRoot\n  }\n}\n\nconst processorWithRemarkRehypeImplicit = unified().use(remarkRehypeImplicit)\n\nexpectType<Processor<undefined, MdastRoot, HastRoot>>(\n  processorWithRemarkRehypeImplicit\n)\nexpectType<UnistNode>(processorWithRemarkRehypeImplicit.parse(''))\nexpectType<HastRoot>(processorWithRemarkRehypeImplicit.runSync(mdastRoot))\n// @ts-expect-error: not the correct node type.\nprocessorWithRemarkRehypeImplicit.runSync(hastRoot)\nexpectType<Uint8Array | string>(\n  processorWithRemarkRehypeImplicit.stringify(hastRoot)\n)\nexpectType<Uint8Array | string>(\n  processorWithRemarkRehypeImplicit.stringify(mdastRoot)\n)\nexpectType<VFile>(processorWithRemarkRehypeImplicit.processSync(''))\n\n// Compile plugin.\nconst rehypeStringify: Plugin<[], HastRoot, string> = function () {\n  // Empty.\n}\n\nconst processorWithRehypeStringify = unified().use(rehypeStringify)\n\nexpectType<Processor<undefined, undefined, undefined, HastRoot, string>>(\n  processorWithRehypeStringify\n)\nexpectType<UnistNode>(processorWithRehypeStringify.parse(''))\nexpectType<UnistNode>(processorWithRehypeStringify.runSync(mdastRoot))\nexpectType<UnistNode>(processorWithRehypeStringify.runSync(hastRoot))\nexpectType<string>(processorWithRehypeStringify.stringify(hastRoot))\n// @ts-expect-error: not the correct node type.\nprocessorWithRehypeStringify.stringify(mdastRoot)\nexpectType<VFile>(processorWithRehypeStringify.processSync(''))\n\n// Compile plugin (to an `Uint8Array`).\nconst rehypeStringifyUint8Array: Plugin<[], HastRoot, Uint8Array> =\n  function () {\n    // Empty.\n  }\n\nconst processorWithRehypeStringifyUint8Array = unified().use(\n  rehypeStringifyUint8Array\n)\n\nexpectType<Processor<undefined, undefined, undefined, HastRoot, Uint8Array>>(\n  processorWithRehypeStringifyUint8Array\n)\nexpectType<UnistNode>(processorWithRehypeStringifyUint8Array.parse(''))\nexpectType<UnistNode>(processorWithRehypeStringifyUint8Array.runSync(mdastRoot))\nexpectType<UnistNode>(processorWithRehypeStringifyUint8Array.runSync(hastRoot))\nexpectType<Uint8Array>(\n  processorWithRehypeStringifyUint8Array.stringify(hastRoot)\n)\n// @ts-expect-error: not the correct node type.\nprocessorWithRehypeStringifyUint8Array.stringify(mdastRoot)\nexpectType<VFile>(processorWithRehypeStringifyUint8Array.processSync(''))\n\n/**\n * Register our custom compile result.\n */\ndeclare module './index.js' {\n  interface CompileResultMap {\n    ReactNode: ReactNode\n  }\n}\n\n// Compile plugin (to a non-node).\nconst rehypeReact: Plugin<[], HastRoot, ReactNode> = function () {\n  // Empty.\n}\n\nconst processorWithRehypeReact = unified().use(rehypeReact)\n\nexpectType<Processor<undefined, undefined, undefined, HastRoot, ReactNode>>(\n  processorWithRehypeReact\n)\nexpectType<UnistNode>(processorWithRehypeReact.parse(''))\nexpectType<UnistNode>(processorWithRehypeReact.runSync(mdastRoot))\nexpectType<UnistNode>(processorWithRehypeReact.runSync(hastRoot))\nexpectType<ReactNode>(processorWithRehypeReact.stringify(hastRoot))\n// @ts-expect-error: not the correct node type.\nprocessorWithRehypeReact.stringify(mdastRoot)\nexpectType<VFile & {result: ReactNode}>(\n  processorWithRehypeReact.processSync('')\n)\n\n// All together.\nconst processorWithAll = unified()\n  .use(remarkParse)\n  .use(remarkLint)\n  .use(remarkLintImplicit)\n  .use(remarkRehype)\n  .use(rehypeStringify)\n\nexpectType<Processor<MdastRoot, MdastRoot, HastRoot, HastRoot, string>>(\n  processorWithAll\n)\nexpectType<MdastRoot>(processorWithAll.parse(''))\nexpectType<HastRoot>(processorWithAll.runSync(mdastRoot))\n// @ts-expect-error: not the correct node type.\nprocessorWithAll.runSync(hastRoot)\nexpectType<string>(processorWithAll.stringify(hastRoot))\n// @ts-expect-error: not the correct node type.\nprocessorWithAll.stringify(mdastRoot)\nexpectType<VFile>(processorWithAll.processSync(''))\n\n// Doesn’t matter how you apply, compiler, transformers, parser is also fine.\nexpectType<Processor<MdastRoot, MdastRoot, HastRoot, HastRoot, string>>(\n  unified()\n    .use(rehypeStringify)\n    .use(remarkLint)\n    .use(remarkLintImplicit)\n    .use(remarkRehype)\n    .use(remarkParse)\n)\n\n// # Different ways to use plugins\n\nexpectType<Processor>(unified().use([remarkParse]))\n\nexpectType<Processor>(\n  unified().use([\n    remarkParse,\n    remarkLint,\n    remarkLintImplicit,\n    remarkRehype,\n    rehypeStringify\n  ])\n)\n\nexpectType<Processor>(\n  unified().use({\n    plugins: [remarkParse]\n  })\n)\n\nexpectType<Processor>(\n  unified().use({\n    plugins: [\n      remarkParse,\n      remarkLint,\n      remarkLintImplicit,\n      remarkRehype,\n      rehypeStringify\n    ]\n  })\n)\n\n/**\n * Register our setting.\n */\ndeclare module './index.js' {\n  interface Settings {\n    something?: string | undefined\n  }\n}\n\nexpectType<Processor>(\n  unified().use({\n    plugins: [\n      remarkParse,\n      remarkLint,\n      remarkLintImplicit,\n      remarkRehype,\n      rehypeStringify\n    ],\n    settings: {something: 'stuff'}\n  })\n)\n\n// # Using multiple parsers/compilers\n\nconst rehypeParse: Plugin<[], string, HastRoot> = function () {\n  // Empty.\n}\n\nconst remarkStringify: Plugin<[], MdastRoot, string> = function () {\n  // Empty.\n}\n\nexpectType<HastRoot>(unified().use(remarkParse).use(rehypeParse).parse(''))\n\nexpectType<string>(\n  unified().use(remarkStringify).use(rehypeStringify).stringify(hastRoot)\n)\n\n// # Using mismatched inspect/transform plugins\n\nconst rehypeClassNames: Plugin<[], HastRoot> = function () {\n  // Empty.\n}\n\n// We currently only *use* types, we don’t crash if they are nonsensical.\nexpectType<Processor<undefined, MdastRoot, HastRoot>>(\n  unified().use(remarkLint).use(rehypeClassNames)\n)\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.068359375,
          "content": "(The MIT License)\n\nCopyright (c) Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "logo-square.svg",
          "type": "blob",
          "size": 4.068359375,
          "content": "<svg height=\"320\" viewBox=\"0 0 320 320\" width=\"320\" xmlns=\"http://www.w3.org/2000/svg\">\n  <style>\n    .b {fill: #0d1117}\n    .l {fill: #fff}\n    @media (prefers-color-scheme: light) {\n      .b {fill: #fff}\n      .l {fill: #0d1117}\n    }\n  </style>\n  <rect class=\"b\" height=\"320\" width=\"320\" x=\"0\" y=\"0\" />\n  <path d=\"M407.21 173.32L407.21 141.77L403.37 141.77L403.37 160.52Q403.37 164.91 400.75 167.65Q398.13 170.39 393.88 170.39L393.88 170.39Q389.90 170.39 387.99 168.16Q386.09 165.94 386.09 161.31L386.09 161.31L386.09 141.77L382.25 141.77L382.25 162.28Q382.25 167.90 384.97 170.87Q387.70 173.85 392.86 173.85L392.86 173.85Q396.52 173.85 399.20 172.24Q401.88 170.63 403.17 167.64L403.17 167.64L403.55 167.64L403.55 173.32L407.21 173.32ZM419.34 141.77L419.34 173.32L423.18 173.32L423.18 154.57Q423.18 150.18 425.80 147.44Q428.42 144.70 432.67 144.70L432.67 144.70Q436.65 144.70 438.56 146.92Q440.46 149.15 440.46 153.78L440.46 153.78L440.46 173.32L444.30 173.32L444.30 152.81Q444.30 147.19 441.58 144.21Q438.85 141.24 433.70 141.24L433.70 141.24Q430.03 141.24 427.35 142.85Q424.67 144.46 423.38 147.45L423.38 147.45L423.00 147.45L423.00 141.77L419.34 141.77ZM469.50 133.42L469.50 133.42Q470.99 133.42 472.06 132.35Q473.13 131.28 473.13 129.79L473.13 129.79Q473.13 128.29 472.06 127.22Q470.99 126.15 469.50 126.15L469.50 126.15Q468.00 126.15 466.93 127.22Q465.86 128.29 465.86 129.79L465.86 129.79Q465.86 131.28 466.93 132.35Q468.00 133.42 469.50 133.42ZM456.90 173.32L482.65 173.32L482.65 170.21L471.84 170.21L471.84 141.77L456.84 141.77L456.84 144.87L468.00 144.87L468.00 170.21L456.90 170.21L456.90 173.32Z\" fill=\"#0366d6\" transform=\"translate(-348, 0)\" />\n  <path class=\"l\" d=\"M501.63 145.02L501.63 173.32L505.47 173.32L505.47 145.02L519.86 145.02L519.86 141.77L505.47 141.77L505.47 138.25Q505.47 132.86 513.06 132.86L513.06 132.86Q514.67 132.86 516.63 132.96Q518.60 133.07 519.86 133.21L519.86 133.21L519.86 129.99Q518.92 129.84 516.83 129.71Q514.73 129.58 513.06 129.58L513.06 129.58Q509.31 129.58 506.76 130.55Q504.21 131.51 502.92 133.42Q501.63 135.32 501.63 138.13L501.63 138.13L501.63 141.77L493.14 141.77L493.14 145.02L501.63 145.02ZM543.68 133.42L543.68 133.42Q545.17 133.42 546.24 132.35Q547.31 131.28 547.31 129.79L547.31 129.79Q547.31 128.29 546.24 127.22Q545.17 126.15 543.68 126.15L543.68 126.15Q542.18 126.15 541.11 127.22Q540.04 128.29 540.04 129.79L540.04 129.79Q540.04 131.28 541.11 132.35Q542.18 133.42 543.68 133.42ZM531.08 173.32L556.83 173.32L556.83 170.21L546.02 170.21L546.02 141.77L531.02 141.77L531.02 144.87L542.18 144.87L542.18 170.21L531.08 170.21L531.08 173.32ZM580.50 144.64L580.50 144.64Q584.69 144.64 587.05 147.50Q589.41 150.35 589.41 155.39L589.41 155.39L571.36 155.39Q571.36 150.32 573.79 147.48Q576.22 144.64 580.50 144.64ZM593.16 165.53L589.35 165.53Q588.62 167.84 586.39 169.13Q584.16 170.42 580.94 170.42L580.94 170.42Q576.55 170.42 573.95 167.50Q571.36 164.59 571.36 159.64L571.36 159.64L571.36 158.55L593.30 158.55L593.30 156.06Q593.30 151.35 591.80 148.04Q590.29 144.73 587.43 142.98Q584.57 141.24 580.50 141.24L580.50 141.24Q576.61 141.24 573.68 142.95Q570.75 144.67 569.13 147.76Q567.52 150.85 567.52 155.01L567.52 155.01L567.52 159.61Q567.52 166.35 571.05 170.10Q574.58 173.85 580.94 173.85L580.94 173.85Q584.13 173.85 586.70 172.82Q589.26 171.80 590.95 169.92Q592.63 168.05 593.16 165.53L593.16 165.53ZM615.86 173.85L615.86 173.85Q612.20 173.85 609.43 172.18Q606.66 170.51 605.11 167.50Q603.56 164.50 603.56 160.58L603.56 160.58L603.56 154.51Q603.56 150.56 605.11 147.57Q606.66 144.58 609.43 142.91Q612.20 141.24 615.86 141.24L615.86 141.24Q619.29 141.24 621.78 142.59Q624.27 143.94 625.38 146.43L625.38 146.43L625.91 146.43L625.91 129.20L629.75 129.20L629.75 173.32L626.09 173.32L626.09 168.78L625.56 168.78Q624.18 171.27 621.71 172.56Q619.23 173.85 615.86 173.85ZM616.71 170.42L616.71 170.42Q620.93 170.42 623.47 167.49Q626 164.56 626 159.67L626 159.67L626 155.45Q626 150.56 623.47 147.63Q620.93 144.70 616.71 144.70L616.71 144.70Q612.46 144.70 609.93 147.63Q607.40 150.56 607.40 155.45L607.40 155.45L607.40 159.67Q607.40 164.53 609.93 167.48Q612.46 170.42 616.71 170.42Z\" transform=\"translate(-348, 0)\" />\n</svg>\n"
        },
        {
          "name": "logo.svg",
          "type": "blob",
          "size": 4.0107421875,
          "content": "<svg height=\"300\" viewBox=\"0 0 1012 300\" width=\"1012\" xmlns=\"http://www.w3.org/2000/svg\">\n  <style>\n    .b {fill: #0d1117}\n    .l {fill: #fff}\n    @media (prefers-color-scheme: light) {\n      .b {fill: #fff}\n      .l {fill: #0d1117}\n    }\n  </style>\n  <rect class=\"b\" height=\"300\" width=\"1012\" x=\"0\" y=\"0\" />\n  <path d=\"M407.21 173.32L407.21 141.77L403.37 141.77L403.37 160.52Q403.37 164.91 400.75 167.65Q398.13 170.39 393.88 170.39L393.88 170.39Q389.90 170.39 387.99 168.16Q386.09 165.94 386.09 161.31L386.09 161.31L386.09 141.77L382.25 141.77L382.25 162.28Q382.25 167.90 384.97 170.87Q387.70 173.85 392.86 173.85L392.86 173.85Q396.52 173.85 399.20 172.24Q401.88 170.63 403.17 167.64L403.17 167.64L403.55 167.64L403.55 173.32L407.21 173.32ZM419.34 141.77L419.34 173.32L423.18 173.32L423.18 154.57Q423.18 150.18 425.80 147.44Q428.42 144.70 432.67 144.70L432.67 144.70Q436.65 144.70 438.56 146.92Q440.46 149.15 440.46 153.78L440.46 153.78L440.46 173.32L444.30 173.32L444.30 152.81Q444.30 147.19 441.58 144.21Q438.85 141.24 433.70 141.24L433.70 141.24Q430.03 141.24 427.35 142.85Q424.67 144.46 423.38 147.45L423.38 147.45L423.00 147.45L423.00 141.77L419.34 141.77ZM469.50 133.42L469.50 133.42Q470.99 133.42 472.06 132.35Q473.13 131.28 473.13 129.79L473.13 129.79Q473.13 128.29 472.06 127.22Q470.99 126.15 469.50 126.15L469.50 126.15Q468.00 126.15 466.93 127.22Q465.86 128.29 465.86 129.79L465.86 129.79Q465.86 131.28 466.93 132.35Q468.00 133.42 469.50 133.42ZM456.90 173.32L482.65 173.32L482.65 170.21L471.84 170.21L471.84 141.77L456.84 141.77L456.84 144.87L468.00 144.87L468.00 170.21L456.90 170.21L456.90 173.32Z\" fill=\"#0366d6\" />\n  <path class=\"l\" d=\"M501.63 145.02L501.63 173.32L505.47 173.32L505.47 145.02L519.86 145.02L519.86 141.77L505.47 141.77L505.47 138.25Q505.47 132.86 513.06 132.86L513.06 132.86Q514.67 132.86 516.63 132.96Q518.60 133.07 519.86 133.21L519.86 133.21L519.86 129.99Q518.92 129.84 516.83 129.71Q514.73 129.58 513.06 129.58L513.06 129.58Q509.31 129.58 506.76 130.55Q504.21 131.51 502.92 133.42Q501.63 135.32 501.63 138.13L501.63 138.13L501.63 141.77L493.14 141.77L493.14 145.02L501.63 145.02ZM543.68 133.42L543.68 133.42Q545.17 133.42 546.24 132.35Q547.31 131.28 547.31 129.79L547.31 129.79Q547.31 128.29 546.24 127.22Q545.17 126.15 543.68 126.15L543.68 126.15Q542.18 126.15 541.11 127.22Q540.04 128.29 540.04 129.79L540.04 129.79Q540.04 131.28 541.11 132.35Q542.18 133.42 543.68 133.42ZM531.08 173.32L556.83 173.32L556.83 170.21L546.02 170.21L546.02 141.77L531.02 141.77L531.02 144.87L542.18 144.87L542.18 170.21L531.08 170.21L531.08 173.32ZM580.50 144.64L580.50 144.64Q584.69 144.64 587.05 147.50Q589.41 150.35 589.41 155.39L589.41 155.39L571.36 155.39Q571.36 150.32 573.79 147.48Q576.22 144.64 580.50 144.64ZM593.16 165.53L589.35 165.53Q588.62 167.84 586.39 169.13Q584.16 170.42 580.94 170.42L580.94 170.42Q576.55 170.42 573.95 167.50Q571.36 164.59 571.36 159.64L571.36 159.64L571.36 158.55L593.30 158.55L593.30 156.06Q593.30 151.35 591.80 148.04Q590.29 144.73 587.43 142.98Q584.57 141.24 580.50 141.24L580.50 141.24Q576.61 141.24 573.68 142.95Q570.75 144.67 569.13 147.76Q567.52 150.85 567.52 155.01L567.52 155.01L567.52 159.61Q567.52 166.35 571.05 170.10Q574.58 173.85 580.94 173.85L580.94 173.85Q584.13 173.85 586.70 172.82Q589.26 171.80 590.95 169.92Q592.63 168.05 593.16 165.53L593.16 165.53ZM615.86 173.85L615.86 173.85Q612.20 173.85 609.43 172.18Q606.66 170.51 605.11 167.50Q603.56 164.50 603.56 160.58L603.56 160.58L603.56 154.51Q603.56 150.56 605.11 147.57Q606.66 144.58 609.43 142.91Q612.20 141.24 615.86 141.24L615.86 141.24Q619.29 141.24 621.78 142.59Q624.27 143.94 625.38 146.43L625.38 146.43L625.91 146.43L625.91 129.20L629.75 129.20L629.75 173.32L626.09 173.32L626.09 168.78L625.56 168.78Q624.18 171.27 621.71 172.56Q619.23 173.85 615.86 173.85ZM616.71 170.42L616.71 170.42Q620.93 170.42 623.47 167.49Q626 164.56 626 159.67L626 159.67L626 155.45Q626 150.56 623.47 147.63Q620.93 144.70 616.71 144.70L616.71 144.70Q612.46 144.70 609.93 147.63Q607.40 150.56 607.40 155.45L607.40 155.45L607.40 159.67Q607.40 164.53 609.93 167.48Q612.46 170.42 616.71 170.42Z\" />\n</svg>\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.9921875,
          "content": "{\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"bugs\": \"https://github.com/unifiedjs/unified/issues\",\n  \"contributors\": [\n    \"Christian Murphy <christian.murphy.42@gmail.com>\",\n    \"Hernan Rajchert <hrajchert@gmail.com>\",\n    \"Junyoung Choi <fluke8259@gmail.com>\",\n    \"Richard Littauer <richard.littauer@gmail.com>\",\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n    \"Vse Mozhet Byt <vsemozhetbyt@gmail.com>\"\n  ],\n  \"dependencies\": {\n    \"@types/unist\": \"^3.0.0\",\n    \"bail\": \"^2.0.0\",\n    \"devlop\": \"^1.0.0\",\n    \"extend\": \"^3.0.0\",\n    \"is-plain-obj\": \"^4.0.0\",\n    \"trough\": \"^2.0.0\",\n    \"vfile\": \"^6.0.0\"\n  },\n  \"description\": \"parse, inspect, transform, and serialize content through syntax trees\",\n  \"devDependencies\": {\n    \"@types/extend\": \"^3.0.0\",\n    \"@types/hast\": \"^3.0.0\",\n    \"@types/mdast\": \"^4.0.0\",\n    \"@types/node\": \"^22.0.0\",\n    \"c8\": \"^10.0.0\",\n    \"prettier\": \"^3.0.0\",\n    \"remark-cli\": \"^12.0.0\",\n    \"remark-preset-wooorm\": \"^10.0.0\",\n    \"tsd\": \"^0.31.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^5.0.0\",\n    \"xo\": \"^0.59.0\"\n  },\n  \"exports\": \"./index.js\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://unifiedjs.com\",\n  \"keywords\": [\n    \"ast\",\n    \"compile\",\n    \"content\",\n    \"cst\",\n    \"parse\",\n    \"process\",\n    \"rehype\",\n    \"remark\",\n    \"retext\",\n    \"serialize\",\n    \"stringify\",\n    \"syntax\",\n    \"transform\",\n    \"tree\",\n    \"unified\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"unified\",\n  \"prettier\": {\n    \"bracketSpacing\": false,\n    \"singleQuote\": true,\n    \"semi\": false,\n    \"tabWidth\": 2,\n    \"trailingComma\": \"none\",\n    \"useTabs\": false\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"remark-preset-wooorm\",\n      [\n        \"remark-lint-no-html\",\n        false\n      ]\n    ]\n  },\n  \"repository\": \"unifiedjs/unified\",\n  \"scripts\": {\n    \"build\": \"tsc --build --clean && tsc --build && node script/fix-types.js && type-coverage && tsd\",\n    \"format\": \"remark . --frail --output --quiet && prettier . --log-level warn --write && xo --fix\",\n    \"prepack\": \"npm run build && npm run format\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\",\n    \"test-api\": \"node --conditions development test/index.js\",\n    \"test-coverage\": \"c8 --100 --check-coverage --reporter lcov npm run test-api\"\n  },\n  \"sideEffects\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"ignoreCatch\": true,\n    \"strict\": true\n  },\n  \"type\": \"module\",\n  \"version\": \"11.0.5\",\n  \"xo\": {\n    \"overrides\": [\n      {\n        \"files\": [\n          \"**/*.ts\"\n        ],\n        \"rules\": {\n          \"@typescript-eslint/ban-types\": \"off\",\n          \"@typescript-eslint/consistent-type-definitions\": \"off\",\n          \"@typescript-eslint/naming-convention\": \"off\",\n          \"import/no-duplicates\": \"off\"\n        }\n      }\n    ],\n    \"prettier\": true,\n    \"rules\": {\n      \"unicorn/no-this-assignment\": \"off\"\n    }\n  }\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 48.2783203125,
          "content": "# [![unified][logo]][site]\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n**unified** lets you inspect and transform content with plugins.\n\n## Contents\n\n* [What is this?](#what-is-this)\n* [When should I use this?](#when-should-i-use-this)\n* [Install](#install)\n* [Use](#use)\n* [Overview](#overview)\n* [API](#api)\n  * [`processor()`](#processor)\n  * [`processor.compiler`](#processorcompiler)\n  * [`processor.data([key[, value]])`](#processordatakey-value)\n  * [`processor.freeze()`](#processorfreeze)\n  * [`processor.parse(file)`](#processorparsefile)\n  * [`processor.parser`](#processorparser)\n  * [`processor.process(file[, done])`](#processorprocessfile-done)\n  * [`processor.processSync(file)`](#processorprocesssyncfile)\n  * [`processor.run(tree[, file][, done])`](#processorruntree-file-done)\n  * [`processor.runSync(tree[, file])`](#processorrunsynctree-file)\n  * [`processor.stringify(tree[, file])`](#processorstringifytree-file)\n  * [`processor.use(plugin[, options])`](#processoruseplugin-options)\n  * [`CompileResultMap`](#compileresultmap)\n  * [`CompileResults`](#compileresults)\n  * [`Compiler`](#compiler)\n  * [`Data`](#data)\n  * [`Parser`](#parser)\n  * [`Pluggable`](#pluggable)\n  * [`PluggableList`](#pluggablelist)\n  * [`Plugin`](#plugin)\n  * [`PluginTuple`](#plugintuple)\n  * [`Preset`](#preset)\n  * [`ProcessCallback`](#processcallback)\n  * [`Processor`](#processor-1)\n  * [`RunCallback`](#runcallback)\n  * [`Settings`](#settings)\n  * [`TransformCallback`](#transformcallback)\n  * [`Transformer`](#transformer)\n* [Types](#types)\n* [Compatibility](#compatibility)\n* [Contribute](#contribute)\n* [Sponsor](#sponsor)\n* [Acknowledgments](#acknowledgments)\n* [License](#license)\n\n## What is this?\n\nunified is two things:\n\n* **unified** is a collective of 500+ free and open source packages that work\n  with content as structured data (ASTs)\n* `unified` (this project) is the core package, used in 1.3m+ projects on GH,\n  to process content with plugins\n\nSeveral ecosystems are built on unified around different kinds of content.\nNotably, [remark][] (markdown), [rehype][] (HTML), and [retext][] (natural\nlanguage).\nThese ecosystems can be connected together.\n\n* for more about us, see [`unifiedjs.com`][site]\n* for updates, see [@unifiedjs][twitter] on Twitter\n* for questions, see [support][]\n* to help, see [contribute][] and [sponsor][] below\n\n## When should I use this?\n\nIn some cases, you are already using unified.\nFor example, it’s used in MDX, Gatsby, Docusaurus, etc.\nIn those cases, you don’t need to add `unified` yourself but you can include\nplugins into those projects.\n\nBut the real fun (for some) is to get your hands dirty and work with syntax\ntrees and build with it yourself.\nYou can create those projects, or things like Prettier, or your own site\ngenerator.\nYou can connect utilities together and make your own plugins that check for\nproblems and transform from one thing to another.\n\nWhen you are dealing with one type of content (such as markdown), you can use\nthe main package of that ecosystem instead (so `remark`).\nWhen you are dealing with different kinds of content (such as markdown and\nHTML), it’s recommended to use `unified` itself, and pick and choose the plugins\nyou need.\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 16+), install with [npm][]:\n\n```sh\nnpm install unified\n```\n\nIn Deno with [`esm.sh`][esmsh]:\n\n```js\nimport {unified} from 'https://esm.sh/unified@11'\n```\n\nIn browsers with [`esm.sh`][esmsh]:\n\n```html\n<script type=\"module\">\n  import {unified} from 'https://esm.sh/unified@11?bundle'\n</script>\n```\n\n## Use\n\n```js\nimport rehypeDocument from 'rehype-document'\nimport rehypeFormat from 'rehype-format'\nimport rehypeStringify from 'rehype-stringify'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {reporter} from 'vfile-reporter'\n\nconst file = await unified()\n  .use(remarkParse)\n  .use(remarkRehype)\n  .use(rehypeDocument, {title: '👋🌍'})\n  .use(rehypeFormat)\n  .use(rehypeStringify)\n  .process('# Hello world!')\n\nconsole.error(reporter(file))\nconsole.log(String(file))\n```\n\nYields:\n\n```txt\nno issues found\n```\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>👋🌍</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Hello world!</h1>\n  </body>\n</html>\n```\n\n<!-- Old name: -->\n\n<a name=\"description\"></a>\n\n## Overview\n\n`unified` is an interface for processing content with syntax trees.\nSyntax trees are a representation of content understandable to programs.\nThose programs, called *[plugins][api-plugin]*, take these trees and inspect and\nmodify them.\nTo get to the syntax tree from text, there is a *[parser][api-parser]*.\nTo get from that back to text, there is a *[compiler][api-compiler]*.\nThis is the *[process][api-process]* of a *processor*.\n\n```ascii\n| ........................ process ........................... |\n| .......... parse ... | ... run ... | ... stringify ..........|\n\n          +--------+                     +----------+\nInput ->- | Parser | ->- Syntax Tree ->- | Compiler | ->- Output\n          +--------+          |          +----------+\n                              X\n                              |\n                       +--------------+\n                       | Transformers |\n                       +--------------+\n```\n\n###### Processors\n\nProcessors process content.\nOn its own, `unified` (the root processor) doesn’t work.\nIt needs to be configured with plugins to work.\nFor example:\n\n```js\nconst processor = unified()\n  .use(remarkParse)\n  .use(remarkRehype)\n  .use(rehypeDocument, {title: '👋🌍'})\n  .use(rehypeFormat)\n  .use(rehypeStringify)\n```\n\nThat processor can do different things.\nIt can:\n\n* …parse markdown (`parse`)\n* …turn parsed markdown into HTML and format the HTML (`run`)\n* …compile HTML (`stringify`)\n* …do all of the above (`process`)\n\nEvery processor implements another processor.\nTo create a processor, call another processor.\nThe new processor is configured to work the same as its ancestor.\nBut when the descendant processor is configured in the future it does not affect\nthe ancestral processor.\n\nWhen processors are exposed from a module (for example, `unified` itself) they\nshould not be configured directly, as that would change their behavior for all\nmodule users.\nThose processors are *[frozen][api-freeze]* and they should be called to create\na new processor before they are used.\n\n###### File\n\nWhen processing a document, metadata is gathered about that document.\n[`vfile`][vfile] is the file format that stores data, metadata, and messages\nabout files for unified and plugins.\n\nThere are several [utilities][vfile-utilities] for working with these files.\n\n###### Syntax tree\n\nThe syntax trees used in unified are [unist][] nodes.\nA tree represents a whole document and each [node][] is a plain JavaScript\nobject with a `type` field.\nThe semantics of nodes and the format of syntax trees is defined by other\nprojects:\n\n* [esast][] — JavaScript\n* [hast][] — HTML\n* [mdast][] — markdown\n* [nlcst][] — natural language\n* [xast][] — XML\n\nThere are many utilities for working with trees listed in each aforementioned\nproject and maintained in the [`syntax-tree`][syntax-tree] organization.\nThese utilities are a level lower than unified itself and are building blocks\nthat can be used to make plugins.\n\n<!-- Old name: -->\n\n<a name=\"list-of-processors\"></a>\n\n###### Ecosystems\n\nAround each syntax tree is an ecosystem that focusses on that particular kind\nof content.\nAt their core, they parse text to a tree and compile that tree back to text.\nThey also provide plugins that work with the syntax tree, without requiring\nthat the end user has knowledge about that tree.\n\n* [rehype][] (hast) — HTML\n* [remark][] (mdast) — markdown\n* [retext][] (nlcst) — natural language\n\n<a name=\"list-of-plugins\"></a>\n\n###### Plugins\n\nEach aforementioned ecosystem comes with a large set of plugins that you can\npick and choose from to do all kinds of things.\n\n* [List of remark plugins][remark-plugins] ·\n  [`remarkjs/awesome-remark`][awesome-remark] ·\n  [`remark-plugin` topic][topic-remark-plugin]\n* [List of rehype plugins][rehype-plugins] ·\n  [`rehypejs/awesome-rehype`][awesome-rehype] ·\n  [`rehype-plugin` topic][topic-rehype-plugin]\n* [List of retext plugins][retext-plugins] ·\n  [`retextjs/awesome-retext`][awesome-retext] ·\n  [`retext-plugin` topic][topic-retext-plugin]\n\nThere are also a few plugins that work in any ecosystem:\n\n* [`unified-diff`](https://github.com/unifiedjs/unified-diff)\n  — ignore unrelated messages in GitHub Actions and Travis\n* [`unified-infer-git-meta`](https://github.com/unifiedjs/unified-infer-git-meta)\n  — infer metadata of a document from Git\n* [`unified-message-control`](https://github.com/unifiedjs/unified-message-control)\n  — enable, disable, and ignore messages from content\n\n###### Configuration\n\nProcessors are configured with [plugins][api-plugin] or with the\n[`data`][api-data] method.\nMost plugins also accept configuration through options.\nSee each plugin’s readme for more info.\n\n###### Integrations\n\nunified can integrate with the file system through\n[`unified-engine`][unified-engine].\nCLI apps can be created with [`unified-args`][unified-args], Gulp plugins with\n[`unified-engine-gulp`][unified-engine-gulp], and language servers with\n[`unified-language-server`][unified-language-server].\nA streaming interface can be created with [`unified-stream`][unified-stream].\n\n###### Programming interface\n\nThe [API][] provided by `unified` allows multiple files to be processed and\ngives access to metadata (such as lint messages):\n\n```js\nimport rehypeStringify from 'rehype-stringify'\nimport remarkParse from 'remark-parse'\nimport remarkPresetLintMarkdownStyleGuide from 'remark-preset-lint-markdown-style-guide'\nimport remarkRehype from 'remark-rehype'\nimport remarkRetext from 'remark-retext'\nimport retextEnglish from 'retext-english'\nimport retextEquality from 'retext-equality'\nimport {unified} from 'unified'\nimport {reporter} from 'vfile-reporter'\n\nconst file = await unified()\n  .use(remarkParse)\n  .use(remarkPresetLintMarkdownStyleGuide)\n  .use(remarkRetext, unified().use(retextEnglish).use(retextEquality))\n  .use(remarkRehype)\n  .use(rehypeStringify)\n  .process('*Emphasis* and _stress_, you guys!')\n\nconsole.error(reporter(file))\nconsole.log(String(file))\n```\n\nYields:\n\n```txt\n1:16-1:24 warning Emphasis should use `*` as a marker                                 emphasis-marker remark-lint\n1:30-1:34 warning `guys` may be insensitive, use `people`, `persons`, `folks` instead gals-man        retext-equality\n\n⚠ 2 warnings\n```\n\n```html\n<p><em>Emphasis</em> and <em>stress</em>, you guys!</p>\n```\n\n<!-- Old name: -->\n\n<a name=\"processing-between-syntaxes\"></a>\n\n###### Transforming between ecosystems\n\nEcosystems can be combined in two modes.\n\n**Bridge** mode transforms the tree from one format (*origin*) to another\n(*destination*).\nA different processor runs on the destination tree.\nAfterwards, the original processor continues with the origin tree.\n\n**Mutate** mode also transforms the syntax tree from one format to another.\nBut the original processor continues transforming the destination tree.\n\nIn the previous example (“Programming interface”), `remark-retext` is used in\nbridge mode: the origin syntax tree is kept after retext is done; whereas\n`remark-rehype` is used in mutate mode: it sets a new syntax tree and discards\nthe origin tree.\n\nThe following plugins lets you combine ecosystems:\n\n* [`remark-retext`][remark-retext] — turn markdown into natural language\n* [`remark-rehype`][remark-rehype] — turn markdown into HTML\n* [`rehype-retext`][rehype-retext] — turn HTML into natural language\n* [`rehype-remark`][rehype-remark] — turn HTML into markdown\n\n## API\n\nThis package exports the identifier `unified` (the root `processor`).\nThere is no default export.\n\n### `processor()`\n\nCreate a new processor.\n\n###### Returns\n\nNew *[unfrozen][api-freeze]* processor ([`processor`][api-processor]).\n\nThis processor is configured to work the same as its ancestor.\nWhen the descendant processor is configured in the future it does not affect\nthe ancestral processor.\n\n###### Example\n\nThis example shows how a new processor can be created (from `remark`) and linked\nto **stdin**(4) and **stdout**(4).\n\n```js\nimport process from 'node:process'\nimport concatStream from 'concat-stream'\nimport {remark} from 'remark'\n\nprocess.stdin.pipe(\n  concatStream(function (buf) {\n    process.stdout.write(String(remark().processSync(buf)))\n  })\n)\n```\n\n### `processor.compiler`\n\nCompiler to use ([`Compiler`][api-compiler], optional).\n\n### `processor.data([key[, value]])`\n\nConfigure the processor with info available to all plugins.\nInformation is stored in an object.\n\nTypically, options can be given to a specific plugin, but sometimes it makes\nsense to have information shared with several plugins.\nFor example, a list of HTML elements that are self-closing, which is needed\nduring all [phases][overview].\n\n> 👉 **Note**: setting information cannot occur on *[frozen][api-freeze]*\n> processors.\n> Call the processor first to create a new unfrozen processor.\n\n> 👉 **Note**: to register custom data in TypeScript, augment the\n> [`Data`][api-data] interface.\n\n###### Signatures\n\n* `processor = processor.data(key, value)`\n* `processor = processor.data(dataset)`\n* `value = processor.data(key)`\n* `dataset = processor.data()`\n\n###### Parameters\n\n* `key` ([`keyof Data`][api-data], optional) — field to get\n* `value` ([`Data[key]`][api-data]) — value to set\n* `values` ([`Data`][api-data]) — values to set\n\n###### Returns\n\nThe current processor when setting ([`processor`][api-processor]), the value at\n`key` when getting ([`Data[key]`][api-data]), or the entire dataset when\ngetting without key ([`Data`][api-data]).\n\n###### Example\n\nThis example show how to get and set info:\n\n```js\nimport {unified} from 'unified'\n\nconst processor = unified().data('alpha', 'bravo')\n\nprocessor.data('alpha') // => 'bravo'\n\nprocessor.data() // => {alpha: 'bravo'}\n\nprocessor.data({charlie: 'delta'})\n\nprocessor.data() // => {charlie: 'delta'}\n```\n\n### `processor.freeze()`\n\nFreeze a processor.\n\nFrozen processors are meant to be extended and not to be configured directly.\n\nWhen a processor is frozen it cannot be unfrozen.\nNew processors working the same way can be created by calling the processor.\n\nIt’s possible to freeze processors explicitly by calling `.freeze()`.\nProcessors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n`.stringify()`, `.process()`, or `.processSync()` are called.\n\n###### Returns\n\nThe current processor ([`processor`][api-processor]).\n\n###### Example\n\nThis example, `index.js`, shows how `rehype` prevents extensions to itself:\n\n```js\nimport rehypeParse from 'rehype-parse'\nimport rehypeStringify from 'rehype-stringify'\nimport {unified} from 'unified'\n\nexport const rehype = unified().use(rehypeParse).use(rehypeStringify).freeze()\n```\n\nThat processor can be used and configured like so:\n\n```js\nimport {rehype} from 'rehype'\nimport rehypeFormat from 'rehype-format'\n// …\n\nrehype()\n  .use(rehypeFormat)\n  // …\n```\n\nA similar looking example is broken as operates on the frozen interface.\nIf this behavior was allowed it would result in unexpected behavior so an error\nis thrown.\n**This is not valid**:\n\n```js\nimport {rehype} from 'rehype'\nimport rehypeFormat from 'rehype-format'\n// …\n\nrehype\n  .use(rehypeFormat)\n  // …\n```\n\nYields:\n\n```txt\n~/node_modules/unified/index.js:426\n    throw new Error(\n    ^\n\nError: Cannot call `use` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.\n    at assertUnfrozen (~/node_modules/unified/index.js:426:11)\n    at Function.use (~/node_modules/unified/index.js:165:5)\n    …\n```\n\n### `processor.parse(file)`\n\nParse text to a syntax tree.\n\n> 👉 **Note**: `parse` freezes the processor if not already\n> *[frozen][api-freeze]*.\n\n> 👉 **Note**: `parse` performs the [parse phase][overview], not the run phase\n> or other phases.\n\n###### Parameters\n\n* `file` ([`Compatible`][vfile-compatible]) — file to parse; typically\n  `string` or [`VFile`][vfile]; any value accepted as `x` in `new VFile(x)`\n\n###### Returns\n\nSyntax tree representing `file` ([`Node`][node]).\n\n###### Example\n\nThis example shows how `parse` can be used to create a tree from a file.\n\n```js\nimport remarkParse from 'remark-parse'\nimport {unified} from 'unified'\n\nconst tree = unified().use(remarkParse).parse('# Hello world!')\n\nconsole.log(tree)\n```\n\nYields:\n\n```js\n{\n  type: 'root',\n  children: [\n    {type: 'heading', depth: 1, children: [Array], position: [Object]}\n  ],\n  position: {\n    start: {line: 1, column: 1, offset: 0},\n    end: {line: 1, column: 15, offset: 14}\n  }\n}\n```\n\n### `processor.parser`\n\nParser to use ([`Parser`][api-parser], optional).\n\n### `processor.process(file[, done])`\n\nProcess the given file as configured on the processor.\n\n> 👉 **Note**: `process` freezes the processor if not already\n> *[frozen][api-freeze]*.\n\n> 👉 **Note**: `process` performs the [parse, run, and stringify\n> phases][overview].\n\n###### Signatures\n\n* `processor.process(file, done)`\n* `Promise<VFile> = processor.process(file?)`\n\n###### Parameters\n\n* `file` ([`Compatible`][vfile-compatible], optional) — file; typically\n  `string` or [`VFile`][vfile]; any value accepted as `x` in `new VFile(x)`\n* `done` ([`ProcessCallback`][api-process-callback], optional) — callback\n\n###### Returns\n\nNothing if `done` is given (`undefined`).\nOtherwise a promise, rejected with a fatal error or resolved with the\nprocessed file ([`Promise<VFile>`][vfile]).\n\nThe parsed, transformed, and compiled value is available at `file.value` (see\nnote).\n\n> 👉 **Note**: unified typically compiles by serializing: most\n> compilers return `string` (or `Uint8Array`).\n> Some compilers, such as the one configured with\n> [`rehype-react`][rehype-react], return other values (in this case, a React\n> tree).\n> If you’re using a compiler that doesn’t serialize, expect different result\n> values.\n>\n> To register custom results in TypeScript, add them to\n> [`CompileResultMap`][api-compile-result-map].\n\n###### Example\n\nThis example shows how `process` can be used to process a file:\n\n```js\nimport rehypeDocument from 'rehype-document'\nimport rehypeFormat from 'rehype-format'\nimport rehypeStringify from 'rehype-stringify'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\n\nconst file = await unified()\n  .use(remarkParse)\n  .use(remarkRehype)\n  .use(rehypeDocument, {title: '👋🌍'})\n  .use(rehypeFormat)\n  .use(rehypeStringify)\n  .process('# Hello world!')\n\nconsole.log(String(file))\n```\n\nYields:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>👋🌍</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Hello world!</h1>\n  </body>\n</html>\n```\n\n### `processor.processSync(file)`\n\nProcess the given file as configured on the processor.\n\nAn error is thrown if asynchronous transforms are configured.\n\n> 👉 **Note**: `processSync` freezes the processor if not already\n> *[frozen][api-freeze]*.\n\n> 👉 **Note**: `processSync` performs the [parse, run, and stringify\n> phases][overview].\n\n###### Parameters\n\n* `file` ([`Compatible`][vfile-compatible], optional) — file; typically\n  `string` or [`VFile`][vfile]; any value accepted as `x` in `new VFile(x)`\n\n###### Returns\n\nThe processed file ([`VFile`][vfile]).\n\nThe parsed, transformed, and compiled value is available at `file.value` (see\nnote).\n\n> 👉 **Note**: unified typically compiles by serializing: most\n> compilers return `string` (or `Uint8Array`).\n> Some compilers, such as the one configured with\n> [`rehype-react`][rehype-react], return other values (in this case, a React\n> tree).\n> If you’re using a compiler that doesn’t serialize, expect different result\n> values.\n>\n> To register custom results in TypeScript, add them to\n> [`CompileResultMap`][api-compile-result-map].\n\n###### Example\n\nThis example shows how `processSync` can be used to process a file, if all\ntransformers are synchronous.\n\n```js\nimport rehypeDocument from 'rehype-document'\nimport rehypeFormat from 'rehype-format'\nimport rehypeStringify from 'rehype-stringify'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\n\nconst processor = unified()\n  .use(remarkParse)\n  .use(remarkRehype)\n  .use(rehypeDocument, {title: '👋🌍'})\n  .use(rehypeFormat)\n  .use(rehypeStringify)\n\nconsole.log(String(processor.processSync('# Hello world!')))\n```\n\nYields:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>👋🌍</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Hello world!</h1>\n  </body>\n</html>\n```\n\n### `processor.run(tree[, file][, done])`\n\nRun *[transformers][api-transformer]* on a syntax tree.\n\n> 👉 **Note**: `run` freezes the processor if not already\n> *[frozen][api-freeze]*.\n\n> 👉 **Note**: `run` performs the [run phase][overview], not other phases.\n\n###### Signatures\n\n* `processor.run(tree, done)`\n* `processor.run(tree, file, done)`\n* `Promise<Node> = processor.run(tree, file?)`\n\n###### Parameters\n\n* `tree` ([`Node`][node]) — tree to transform and inspect\n* `file` ([`Compatible`][vfile-compatible], optional) — file associated\n  with `node`; any value accepted as `x` in `new VFile(x)`\n* `done` ([`RunCallback`][api-run-callback], optional) — callback\n\n###### Returns\n\nNothing if `done` is given (`undefined`).\nOtherwise, a promise rejected with a fatal error or resolved with the\ntransformed tree ([`Promise<Node>`][node]).\n\n###### Example\n\nThis example shows how `run` can be used to transform a tree:\n\n```js\nimport remarkReferenceLinks from 'remark-reference-links'\nimport {unified} from 'unified'\nimport {u} from 'unist-builder'\n\nconst tree = u('root', [\n  u('paragraph', [\n    u('link', {href: 'https://example.com'}, [u('text', 'Example Domain')])\n  ])\n])\n\nconst changedTree = await unified().use(remarkReferenceLinks).run(tree)\n\nconsole.log(changedTree)\n```\n\nYields:\n\n```js\n{\n  type: 'root',\n  children: [\n    {type: 'paragraph', children: [Array]},\n    {type: 'definition', identifier: '1', title: '', url: undefined}\n  ]\n}\n```\n\n### `processor.runSync(tree[, file])`\n\nRun *[transformers][api-transformer]* on a syntax tree.\n\nAn error is thrown if asynchronous transforms are configured.\n\n> 👉 **Note**: `runSync` freezes the processor if not already\n> *[frozen][api-freeze]*.\n\n> 👉 **Note**: `runSync` performs the [run phase][overview], not other phases.\n\n###### Parameters\n\n* `tree` ([`Node`][node]) — tree to transform and inspect\n* `file` ([`Compatible`][vfile-compatible], optional) — file associated\n  with `node`; any value accepted as `x` in `new VFile(x)`\n\n###### Returns\n\nTransformed tree ([`Node`][node]).\n\n### `processor.stringify(tree[, file])`\n\nCompile a syntax tree.\n\n> 👉 **Note**: `stringify` freezes the processor if not already\n> *[frozen][api-freeze]*.\n\n> 👉 **Note**: `stringify` performs the [stringify phase][overview], not the run\n> phase or other phases.\n\n###### Parameters\n\n* `tree` ([`Node`][node]) — tree to compile\n* `file` ([`Compatible`][vfile-compatible], optional) — file associated\n  with `node`; any value accepted as `x` in `new VFile(x)`\n\n###### Returns\n\nTextual representation of the tree (`Uint8Array` or `string`, see note).\n\n> 👉 **Note**: unified typically compiles by serializing: most compilers\n> return `string` (or `Uint8Array`).\n> Some compilers, such as the one configured with\n> [`rehype-react`][rehype-react], return other values (in this case, a\n> React tree).\n> If you’re using a compiler that doesn’t serialize, expect different\n> result values.\n>\n> To register custom results in TypeScript, add them to\n> [`CompileResultMap`][api-compile-result-map].\n\n###### Example\n\nThis example shows how `stringify` can be used to serialize a syntax tree:\n\n```js\nimport {h} from 'hastscript'\nimport rehypeStringify from 'rehype-stringify'\nimport {unified} from 'unified'\n\nconst tree = h('h1', 'Hello world!')\n\nconst document = unified().use(rehypeStringify).stringify(tree)\n\nconsole.log(document)\n```\n\nYields:\n\n```html\n<h1>Hello world!</h1>\n```\n\n### `processor.use(plugin[, options])`\n\nConfigure the processor to use a plugin, a list of usable values, or a preset.\n\nIf the processor is already using a plugin, the previous plugin configuration\nis changed based on the options that are passed in.\nIn other words, the plugin is not added a second time.\n\n> 👉 **Note**: `use` cannot be called on [*frozen*][api-freeze] processors.\n> Call the processor first to create a new unfrozen processor.\n\n###### Signatures\n\n* `processor.use(preset?)`\n* `processor.use(list)`\n* `processor.use(plugin[, ...parameters])`\n\n###### Parameters\n\n* `preset` ([`Preset`][api-preset]) — plugins and settings\n* `list` ([`PluggableList`][api-pluggable-list]) — list of usable things\n* `plugin` ([`Plugin`][api-plugin]) — plugin\n* `parameters` (`Array<unknown>`) — configuration for `plugin`, typically a\n  single options object\n\n###### Returns\n\nCurrent processor ([`processor`][api-processor]).\n\n###### Example\n\nThere are many ways to pass plugins to `.use()`.\nThis example gives an overview:\n\n```js\nimport {unified} from 'unified'\n\nunified()\n  // Plugin with options:\n  .use(pluginA, {x: true, y: true})\n  // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n  .use(pluginA, {y: false, z: true})\n  // Plugins:\n  .use([pluginB, pluginC])\n  // Two plugins, the second with options:\n  .use([pluginD, [pluginE, {}]])\n  // Preset with plugins and settings:\n  .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n  // Settings only:\n  .use({settings: {position: false}})\n```\n\n### `CompileResultMap`\n\nInterface of known results from compilers (TypeScript type).\n\nNormally, compilers result in text ([`Value`][vfile-value] of `vfile`).\nWhen you compile to something else, such as a React node (as in,\n`rehype-react`), you can augment this interface to include that type.\n\n```ts\nimport type {ReactNode} from 'somewhere'\n\ndeclare module 'unified' {\n  interface CompileResultMap {\n    // Register a new result (value is used, key should match it).\n    ReactNode: ReactNode\n  }\n}\n\nexport {} // You may not need this, but it makes sure the file is a module.\n```\n\nUse [`CompileResults`][api-compile-results] to access the values.\n\n###### Type\n\n```ts\ninterface CompileResultMap {\n  // Note: if `Value` from `VFile` is changed, this should too.\n  Uint8Array: Uint8Array\n  string: string\n}\n```\n\n### `CompileResults`\n\nAcceptable results from compilers (TypeScript type).\n\nTo register custom results, add them to\n[`CompileResultMap`][api-compile-result-map].\n\n###### Type\n\n```ts\ntype CompileResults = CompileResultMap[keyof CompileResultMap]\n```\n\n### `Compiler`\n\nA **compiler** handles the compiling of a syntax tree to something else\n(in most cases, text) (TypeScript type).\n\nIt is used in the stringify phase and called with a [`Node`][node]\nand [`VFile`][vfile] representation of the document to compile.\nIt should return the textual representation of the given tree (typically\n`string`).\n\n> 👉 **Note**: unified typically compiles by serializing: most compilers\n> return `string` (or `Uint8Array`).\n> Some compilers, such as the one configured with\n> [`rehype-react`][rehype-react], return other values (in this case, a\n> React tree).\n> If you’re using a compiler that doesn’t serialize, expect different\n> result values.\n>\n> To register custom results in TypeScript, add them to\n> [`CompileResultMap`][api-compile-result-map].\n\n###### Type\n\n```ts\ntype Compiler<\n  Tree extends Node = Node,\n  Result extends CompileResults = CompileResults\n> = (tree: Tree, file: VFile) => Result\n```\n\n### `Data`\n\nInterface of known data that can be supported by all plugins (TypeScript type).\n\nTypically, options can be given to a specific plugin, but sometimes it makes\nsense to have information shared with several plugins.\nFor example, a list of HTML elements that are self-closing, which is needed\nduring all phases.\n\nTo type this, do something like:\n\n```ts\ndeclare module 'unified' {\n  interface Data {\n    htmlVoidElements?: Array<string> | undefined\n  }\n}\n\nexport {} // You may not need this, but it makes sure the file is a module.\n```\n\n###### Type\n\n```ts\ninterface Data {\n  settings?: Settings | undefined\n}\n```\n\nSee [`Settings`][api-settings] for more info.\n\n### `Parser`\n\nA **parser** handles the parsing of text to a syntax tree (TypeScript type).\n\nIt is used in the parse phase and is called with a `string` and\n[`VFile`][vfile] of the document to parse.\nIt must return the syntax tree representation of the given file\n([`Node`][node]).\n\n###### Type\n\n```ts\ntype Parser<Tree extends Node = Node> = (document: string, file: VFile) => Tree\n```\n\n### `Pluggable`\n\nUnion of the different ways to add plugins and settings (TypeScript type).\n\n###### Type\n\n```ts\ntype Pluggable =\n  | Plugin<Array<any>, any, any>\n  | PluginTuple<Array<any>, any, any>\n  | Preset\n```\n\nSee [`Plugin`][api-plugin], [`PluginTuple`][api-plugin-tuple],\nand [`Preset`][api-preset] for more info.\n\n### `PluggableList`\n\nList of plugins and presets (TypeScript type).\n\n###### Type\n\n```ts\ntype PluggableList = Array<Pluggable>\n```\n\nSee [`Pluggable`][api-pluggable] for more info.\n\n### `Plugin`\n\nSingle plugin (TypeScript type).\n\nPlugins configure the processors they are applied on in the following ways:\n\n* they change the processor, such as the parser, the compiler, or by\n  configuring data\n* they specify how to handle trees and files\n\nIn practice, they are functions that can receive options and configure the\nprocessor (`this`).\n\n> 👉 **Note**: plugins are called when the processor is *frozen*, not when they\n> are applied.\n\n###### Type\n\n```ts\ntype Plugin<\n  PluginParameters extends unknown[] = [],\n  Input extends Node | string | undefined = Node,\n  Output = Input\n> = (\n  this: Processor,\n  ...parameters: PluginParameters\n) => Input extends string // Parser.\n  ? Output extends Node | undefined\n    ? undefined | void\n    : never\n  : Output extends CompileResults // Compiler.\n  ? Input extends Node | undefined\n    ? undefined | void\n    : never\n  : // Inspect/transform.\n      | Transformer<\n          Input extends Node ? Input : Node,\n          Output extends Node ? Output : Node\n        >\n      | undefined\n      | void\n```\n\nSee [`Transformer`][api-transformer] for more info.\n\n###### Example\n\n`move.js`:\n\n```js\n/**\n * @import {Plugin} from 'unified'\n */\n\n/**\n * @typedef Options\n *   Configuration (required).\n * @property {string} extname\n *   File extension to use (must start with `.`).\n */\n\n/** @type {Plugin<[Options]>} */\nexport function move(options) {\n  if (!options || !options.extname) {\n    throw new Error('Missing `options.extname`')\n  }\n\n  return function (_, file) {\n    if (file.extname && file.extname !== options.extname) {\n      file.extname = options.extname\n    }\n  }\n}\n```\n\n`example.md`:\n\n```markdown\n# Hello, world!\n```\n\n`example.js`:\n\n```js\nimport rehypeStringify from 'rehype-stringify'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {read, write} from 'to-vfile'\nimport {unified} from 'unified'\nimport {reporter} from 'vfile-reporter'\nimport {move} from './move.js'\n\nconst file = await unified()\n  .use(remarkParse)\n  .use(remarkRehype)\n  .use(move, {extname: '.html'})\n  .use(rehypeStringify)\n  .process(await read('example.md'))\n\nconsole.error(reporter(file))\nawait write(file) // Written to `example.html`.\n```\n\nYields:\n\n```txt\nexample.md: no issues found\n```\n\n…and in `example.html`:\n\n```html\n<h1>Hello, world!</h1>\n```\n\n### `PluginTuple`\n\nTuple of a plugin and its configuration (TypeScript type).\n\nThe first item is a plugin, the rest are its parameters.\n\n###### Type\n\n```ts\ntype PluginTuple<\n  TupleParameters extends unknown[] = [],\n  Input extends Node | string | undefined = undefined,\n  Output = undefined\n> = [\n  plugin: Plugin<TupleParameters, Input, Output>,\n  ...parameters: TupleParameters\n]\n```\n\nSee [`Plugin`][api-plugin] for more info.\n\n### `Preset`\n\nSharable configuration (TypeScript type).\n\nThey can contain plugins and settings.\n\n###### Fields\n\n* `plugins` ([`PluggableList`][api-pluggable-list], optional)\n  — list of plugins and presets\n* `settings` ([`Data`][api-data], optional)\n  — shared settings for parsers and compilers\n\n###### Example\n\n`preset.js`:\n\n```js\n/**\n * @import {Preset} from 'unified'\n */\n\nimport remarkCommentConfig from 'remark-comment-config'\nimport remarkLicense from 'remark-license'\nimport remarkPresetLintConsistent from 'remark-preset-lint-consistent'\nimport remarkPresetLintRecommended from 'remark-preset-lint-recommended'\nimport remarkToc from 'remark-toc'\n\n/** @type {Preset} */\nconst preset = {\n  plugins: [\n    remarkPresetLintRecommended,\n    remarkPresetLintConsistent,\n    remarkCommentConfig,\n    [remarkToc, {maxDepth: 3, tight: true}],\n    remarkLicense\n  ],\n  settings: {bullet: '*', emphasis: '*', fences: true},\n}\n\nexport default preset\n```\n\n`example.md`:\n\n```markdown\n# Hello, world!\n\n_Emphasis_ and **importance**.\n\n## Table of contents\n\n## API\n\n## License\n```\n\n`example.js`:\n\n```js\nimport {remark} from 'remark'\nimport {read, write} from 'to-vfile'\nimport {reporter} from 'vfile-reporter'\nimport preset from './preset.js'\n\nconst file = await remark()\n  .use(preset)\n  .process(await read('example.md'))\n\nconsole.error(reporter(file))\nawait write(file)\n```\n\nYields:\n\n```txt\nexample.md: no issues found\n```\n\n`example.md` now contains:\n\n```markdown\n# Hello, world!\n\n*Emphasis* and **importance**.\n\n## Table of contents\n\n*   [API](#api)\n*   [License](#license)\n\n## API\n\n## License\n\n[MIT](license) © [Titus Wormer](https://wooorm.com)\n```\n\n### `ProcessCallback`\n\nCallback called when the process is done (TypeScript type).\n\nCalled with either an error or a result.\n\n###### Parameters\n\n* `error` (`Error`, optional)\n  — fatal error\n* `file` ([`VFile`][vfile], optional)\n  — processed file\n\n###### Returns\n\nNothing (`undefined`).\n\n###### Example\n\nThis example shows how `process` can be used to process a file with a callback.\n\n```js\nimport remarkGithub from 'remark-github'\nimport remarkParse from 'remark-parse'\nimport remarkStringify from 'remark-stringify'\nimport {unified} from 'unified'\nimport {reporter} from 'vfile-reporter'\n\nunified()\n  .use(remarkParse)\n  .use(remarkGithub)\n  .use(remarkStringify)\n  .process('@unifiedjs', function (error, file) {\n    if (error) throw error\n    if (file) {\n      console.error(reporter(file))\n      console.log(String(file))\n    }\n  })\n```\n\nYields:\n\n```txt\nno issues found\n```\n\n```markdown\n[**@unifiedjs**](https://github.com/unifiedjs)\n```\n\n### `Processor`\n\nType of a [`processor`][api-processor] (TypeScript type).\n\n### `RunCallback`\n\nCallback called when transformers are done (TypeScript type).\n\nCalled with either an error or results.\n\n###### Parameters\n\n* `error` (`Error`, optional)\n  — fatal error\n* `tree` ([`Node`][node], optional)\n  — transformed tree\n* `file` ([`VFile`][vfile], optional)\n  — file\n\n###### Returns\n\nNothing (`undefined`).\n\n### `Settings`\n\nInterface of known extra options, that can be supported by parser and\ncompilers.\n\nThis exists so that users can use packages such as `remark`, which configure\nboth parsers and compilers (in this case `remark-parse` and\n`remark-stringify`), and still provide options for them.\n\nWhen you make parsers or compilers, that could be packaged up together, you\nshould support `this.data('settings')` as input and merge it with explicitly\npassed `options`.\nThen, to type it, using `remark-stringify` as an example, do something like:\n\n```ts\ndeclare module 'unified' {\n  interface Settings {\n    bullet: '*' | '+' | '-'\n    // …\n  }\n}\n\nexport {} // You may not need this, but it makes sure the file is a module.\n```\n\n###### Type\n\n```ts\ninterface Settings {}\n```\n\n### `TransformCallback`\n\nCallback passed to transforms (TypeScript type).\n\nIf the signature of a `transformer` accepts a third argument, the transformer\nmay perform asynchronous operations, and must call it.\n\n###### Parameters\n\n* `error` (`Error`, optional)\n  — fatal error to stop the process\n* `tree` ([`Node`][node], optional)\n  — new, changed, tree\n* `file` ([`VFile`][vfile], optional)\n  — new, changed, file\n\n###### Returns\n\nNothing (`undefined`).\n\n### `Transformer`\n\nTransformers handle syntax trees and files (TypeScript type).\n\nThey are functions that are called each time a syntax tree and file are\npassed through the run phase.\nWhen an error occurs in them (either because it’s thrown, returned,\nrejected, or passed to `next`), the process stops.\n\nThe run phase is handled by [`trough`][trough], see its documentation for\nthe exact semantics of these functions.\n\n> 👉 **Note**: you should likely ignore `next`: don’t accept it.\n> it supports callback-style async work.\n> But promises are likely easier to reason about.\n\n###### Type\n\n```ts\ntype Transformer<\n  Input extends Node = Node,\n  Output extends Node = Input\n> = (\n  tree: Input,\n  file: VFile,\n  next: TransformCallback<Output>\n) =>\n  | Promise<Output | undefined>\n  | Output\n  | Error\n  | undefined\n```\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nIt exports the additional types\n[`CompileResultMap`][api-compile-result-map],\n[`CompileResults`][api-compile-results],\n[`Compiler`][api-compiler],\n[`Data`][api-data],\n[`Parser`][api-parser],\n[`Pluggable`][api-pluggable],\n[`PluggableList`][api-pluggable-list],\n[`Plugin`][api-plugin],\n[`PluginTuple`][api-plugin-tuple],\n[`Preset`][api-preset],\n[`ProcessCallback`][api-process-callback],\n[`Processor`][api-processor],\n[`RunCallback`][api-run-callback],\n[`Settings`][api-settings],\n[`TransformCallback`][api-transform-callback],\nand [`Transformer`][api-transformer]\n\nFor TypeScript to work, it is particularly important to type your plugins\ncorrectly.\nWe strongly recommend using the `Plugin` type with its generics and to use the\nnode types for the syntax trees provided by our packages (as in,\n[`@types/hast`][types-hast], [`@types/mdast`][types-mdast],\n[`@types/nlcst`][types-nlcst]).\n\n```js\n/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Plugin} from 'unified'\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [someField]\n *   Some option (optional).\n */\n\n// To type options:\n/** @type {Plugin<[(Options | null | undefined)?]>} */\nexport function myPluginAcceptingOptions(options) {\n  const settings = options || {}\n  // `settings` is now `Options`.\n}\n\n// To type a plugin that works on a certain tree, without options:\n/** @type {Plugin<[], MdastRoot>} */\nexport function myRemarkPlugin() {\n  return function (tree, file) {\n    // `tree` is `MdastRoot`.\n  }\n}\n\n// To type a plugin that transforms one tree into another:\n/** @type {Plugin<[], MdastRoot, HastRoot>} */\nexport function remarkRehype() {\n  return function (tree) {\n    // `tree` is `MdastRoot`.\n    // Result must be `HastRoot`.\n  }\n}\n\n// To type a plugin that defines a parser:\n/** @type {Plugin<[], string, MdastRoot>} */\nexport function remarkParse(options) {}\n\n// To type a plugin that defines a compiler:\n/** @type {Plugin<[], HastRoot, string>} */\nexport function rehypeStringify(options) {}\n```\n\n## Compatibility\n\nProjects maintained by the unified collective are compatible with maintained\nversions of Node.js.\n\nWhen we cut a new major release, we drop support for unmaintained versions of\nNode.\nThis means we try to keep the current release line, `unified@^11`, compatible\nwith Node.js 16.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`unifiedjs/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\nFor info on how to submit a security report, see our\n[security policy][security].\n\n## Sponsor\n\nSupport this effort and give back by sponsoring on [OpenCollective][collective]!\n\n<table>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://vercel.com\">Vercel</a><br><br>\n  <a href=\"https://vercel.com\"><img src=\"https://avatars1.githubusercontent.com/u/14985020?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://motif.land\">Motif</a><br><br>\n  <a href=\"https://motif.land\"><img src=\"https://avatars1.githubusercontent.com/u/74457950?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.hashicorp.com\">HashiCorp</a><br><br>\n  <a href=\"https://www.hashicorp.com\"><img src=\"https://avatars1.githubusercontent.com/u/761456?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://americanexpress.io\">American Express</a><br><br>\n  <a href=\"https://americanexpress.io\"><img src=\"https://avatars1.githubusercontent.com/u/3853301?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.gitbook.com\">GitBook</a><br><br>\n  <a href=\"https://www.gitbook.com\"><img src=\"https://avatars1.githubusercontent.com/u/7111340?s=256&v=4\" width=\"128\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n</tr>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.gatsbyjs.org\">Gatsby</a><br><br>\n  <a href=\"https://www.gatsbyjs.org\"><img src=\"https://avatars1.githubusercontent.com/u/12551863?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.netlify.com\">Netlify</a><br><br>\n  <!--OC has a sharper image-->\n  <a href=\"https://www.netlify.com\"><img src=\"https://images.opencollective.com/netlify/4087de2/logo/256.png\" width=\"128\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.coinbase.com\">Coinbase</a><br><br>\n  <a href=\"https://www.coinbase.com\"><img src=\"https://avatars1.githubusercontent.com/u/1885080?s=256&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://themeisle.com\">ThemeIsle</a><br><br>\n  <a href=\"https://themeisle.com\"><img src=\"https://avatars1.githubusercontent.com/u/58979018?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://expo.io\">Expo</a><br><br>\n  <a href=\"https://expo.io\"><img src=\"https://avatars1.githubusercontent.com/u/12504344?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://boostnote.io\">Boost Note</a><br><br>\n  <a href=\"https://boostnote.io\"><img src=\"https://images.opencollective.com/boosthub/6318083/logo/128.png\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://markdown.space\">Markdown Space</a><br><br>\n  <a href=\"https://markdown.space\"><img src=\"https://images.opencollective.com/markdown-space/e1038ed/logo/128.png\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.holloway.com\">Holloway</a><br><br>\n  <a href=\"https://www.holloway.com\"><img src=\"https://avatars1.githubusercontent.com/u/35904294?s=128&v=4\" width=\"64\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"6\">\n  <br>\n  <a href=\"https://opencollective.com/unified\"><strong>You?</strong></a>\n  <br><br>\n</td>\n</tr>\n</table>\n\n## Acknowledgments\n\nPreliminary work for unified was done [in 2014][preliminary] for\n**[retext][]** and inspired by [`ware`][ware].\nFurther incubation happened in **[remark][]**.\nThe project was finally [externalised][] in 2015 and [published][] as `unified`.\nThe project was authored by **[@wooorm](https://github.com/wooorm)**.\n\nAlthough `unified` since moved its plugin architecture to [`trough`][trough],\nthanks to **[@calvinfo](https://github.com/calvinfo)**,\n**[@ianstormtaylor](https://github.com/ianstormtaylor)**, and others for their\nwork on [`ware`][ware], as it was a huge initial inspiration.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[logo]: https://raw.githubusercontent.com/unifiedjs/unified/93862e5/logo.svg?sanitize=true\n\n[build-badge]: https://github.com/unifiedjs/unified/workflows/main/badge.svg\n\n[build]: https://github.com/unifiedjs/unified/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/unifiedjs/unified.svg\n\n[coverage]: https://codecov.io/github/unifiedjs/unified\n\n[downloads-badge]: https://img.shields.io/npm/dm/unified.svg\n\n[downloads]: https://www.npmjs.com/package/unified\n\n[size-badge]: https://img.shields.io/bundlejs/size/unified\n\n[size]: https://bundlejs.com/?q=unified\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/unifiedjs/unified/discussions\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[esmsh]: https://esm.sh\n\n[typescript]: https://www.typescriptlang.org\n\n[health]: https://github.com/unifiedjs/.github\n\n[contributing]: https://github.com/unifiedjs/.github/blob/main/contributing.md\n\n[support]: https://github.com/unifiedjs/.github/blob/main/support.md\n\n[coc]: https://github.com/unifiedjs/.github/blob/main/code-of-conduct.md\n\n[security]: https://github.com/unifiedjs/.github/blob/main/security.md\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[site]: https://unifiedjs.com\n\n[twitter]: https://twitter.com/unifiedjs\n\n[rehype]: https://github.com/rehypejs/rehype\n\n[remark]: https://github.com/remarkjs/remark\n\n[retext]: https://github.com/retextjs/retext\n\n[syntax-tree]: https://github.com/syntax-tree\n\n[esast]: https://github.com/syntax-tree/esast\n\n[hast]: https://github.com/syntax-tree/hast\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[nlcst]: https://github.com/syntax-tree/nlcst\n\n[unist]: https://github.com/syntax-tree/unist\n\n[xast]: https://github.com/syntax-tree/xast\n\n[unified-engine]: https://github.com/unifiedjs/unified-engine\n\n[unified-args]: https://github.com/unifiedjs/unified-args\n\n[unified-engine-gulp]: https://github.com/unifiedjs/unified-engine-gulp\n\n[unified-language-server]: https://github.com/unifiedjs/unified-language-server\n\n[unified-stream]: https://github.com/unifiedjs/unified-stream\n\n[rehype-remark]: https://github.com/rehypejs/rehype-remark\n\n[rehype-retext]: https://github.com/rehypejs/rehype-retext\n\n[remark-rehype]: https://github.com/remarkjs/remark-rehype\n\n[remark-retext]: https://github.com/remarkjs/remark-retext\n\n[node]: https://github.com/syntax-tree/unist#node\n\n[vfile]: https://github.com/vfile/vfile\n\n[vfile-compatible]: https://github.com/vfile/vfile#compatible\n\n[vfile-value]: https://github.com/vfile/vfile#value\n\n[vfile-utilities]: https://github.com/vfile/vfile#list-of-utilities\n\n[rehype-react]: https://github.com/rehypejs/rehype-react\n\n[trough]: https://github.com/wooorm/trough#function-fninput-next\n\n[rehype-plugins]: https://github.com/rehypejs/rehype/blob/main/doc/plugins.md#list-of-plugins\n\n[remark-plugins]: https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins\n\n[retext-plugins]: https://github.com/retextjs/retext/blob/main/doc/plugins.md#list-of-plugins\n\n[awesome-rehype]: https://github.com/rehypejs/awesome-rehype\n\n[awesome-remark]: https://github.com/remarkjs/awesome-remark\n\n[awesome-retext]: https://github.com/retextjs/awesome-retext\n\n[topic-rehype-plugin]: https://github.com/topics/rehype-plugin\n\n[topic-remark-plugin]: https://github.com/topics/remark-plugin\n\n[topic-retext-plugin]: https://github.com/topics/retext-plugin\n\n[types-hast]: https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/hast\n\n[types-mdast]: https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/mdast\n\n[types-nlcst]: https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/nlcst\n\n[preliminary]: https://github.com/retextjs/retext/commit/8fcb1f\n\n[externalised]: https://github.com/remarkjs/remark/commit/9892ec\n\n[published]: https://github.com/unifiedjs/unified/commit/2ba1cf\n\n[ware]: https://github.com/segmentio/ware\n\n[api]: #api\n\n[contribute]: #contribute\n\n[overview]: #overview\n\n[sponsor]: #sponsor\n\n[api-compile-result-map]: #compileresultmap\n\n[api-compile-results]: #compileresults\n\n[api-compiler]: #compiler\n\n[api-data]: #data\n\n[api-freeze]: #processorfreeze\n\n[api-parser]: #parser\n\n[api-pluggable]: #pluggable\n\n[api-pluggable-list]: #pluggablelist\n\n[api-plugin]: #plugin\n\n[api-plugin-tuple]: #plugintuple\n\n[api-preset]: #preset\n\n[api-process]: #processorprocessfile-done\n\n[api-process-callback]: #processcallback\n\n[api-processor]: #processor\n\n[api-run-callback]: #runcallback\n\n[api-settings]: #settings\n\n[api-transform-callback]: #transformcallback\n\n[api-transformer]: #transformer\n"
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.4033203125,
          "content": "{\n  \"compilerOptions\": {\n    \"checkJs\": true,\n    \"customConditions\": [\"development\"],\n    \"declaration\": true,\n    \"declarationMap\": true,\n    \"emitDeclarationOnly\": true,\n    \"exactOptionalPropertyTypes\": true,\n    \"lib\": [\"es2022\"],\n    \"module\": \"node16\",\n    \"strict\": true,\n    \"target\": \"es2022\"\n  },\n  \"exclude\": [\"coverage/\", \"node_modules/\"],\n  \"include\": [\"**/*.js\", \"test/types.d.ts\", \"index.d.ts\"]\n}\n"
        }
      ]
    }
  ]
}