{
  "metadata": {
    "timestamp": 1736561973894,
    "page": 692,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "henryboldi/felony",
      "stars": 3474,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".babelrc",
          "type": "blob",
          "size": 0.048828125,
          "content": "{\n  \"presets\": [ \"es2015\", \"stage-0\", \"react\" ]\n}\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2783203125,
          "content": "root = true\n\n[*]\nindent_style = tab\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.{json,js,jsx,html,css}]\nindent_style = space\nindent_size = 2\n\n[.eslintrc]\nindent_style = space\nindent_size = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.0732421875,
          "content": "main.js\nbuild/**\ndocs/build/**\nlib/**\nnode_modules/**\nmodules/**\nconfig.js\n"
        },
        {
          "name": ".eslintrc.js",
          "type": "blob",
          "size": 0.9794921875,
          "content": "var IGNORE = 0\nvar WARN = 1\nvar ERROR = 2\n\nvar ALWAYS = 'always'\nvar NEVER = 'never'\nvar OFF = 'off'\n\nmodule.exports = {\n  extends: 'airbnb',\n  parser: 'babel-eslint',\n  env: {\n    browser: true,\n    node: true\n  },\n  rules: {\n    'react/jsx-curly-spacing': [ERROR, ALWAYS, { spacing: { objectLiterals: NEVER }}],\n    'react/jsx-filename-extension': [IGNORE],\n    'react/prop-types': [IGNORE],\n    'template-curly-spacing': [ERROR, ALWAYS],\n    'strict': [IGNORE],\n    'no-unused-expressions': IGNORE,\n    'no-unused-vars': [ERROR, { 'vars': 'local' }],\n    'arrow-body-style': [IGNORE, ALWAYS],\n    'camelcase': [ERROR],\n    'constructor-super': ERROR,\n    'quote-props': [ERROR, 'consistent'],\n    'no-underscore-dangle': [WARN],\n    'semi': [ERROR, NEVER],\n    'import/no-unresolved': [ERROR, { ignore: ['electron'] }],\n    'new-cap': [IGNORE],\n    'import/no-named-as-default': [IGNORE],\n    'import/no-extraneous-dependencies': [IGNORE],\n    'jsx-a11y/no-static-element-interactions': IGNORE\n  }\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01171875,
          "content": "* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.578125,
          "content": "# Logs\nlogs\n*.log\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directory\n# https://www.npmjs.org/doc/misc/npm-faq.html#should-i-check-my-node_modules-folder-into-git\nnode_modules\n\n# OSX\n.DS_Store\n\n# App packaged\ndist\nrelease\nmain.js\nmain.js.map\n"
        },
        {
          "name": ".jscsrc",
          "type": "blob",
          "size": 0.2138671875,
          "content": "{\n  \"preset\": \"airbnb\",\n  \"excludeFiles\": [\"build/**\", \"node_modules/**\", \"config.js\"],\n  \"disallowQuotedKeysInObjects\": null,\n  \"validateQuoteMarks\": null,\n  \"requireSemicolons\": false,\n  \"disallowSemicolons\": true,\n}\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.474609375,
          "content": "sudo: required\nlanguage: node_js\nnotifications:\n  email: false\nnode_js:\n  - \"6.3.1\"\n\naddons:\n  apt:\n    packages:\n      - xvfb\n      - g++-4.8\n      - libgnome-keyring-dev\n    sources:\n      - ubuntu-toolchain-r-test\n\n\nenv:\n  - CXX=g++-4.8\n\ncache:\n  directories:\n    - node_modules\n\nbefore_install:\n  - npm install -g npm@latest\n\ninstall:\n  - export CXX=\"g++-4.8\"\n  - export DISPLAY=':99.0'\n  - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\n  - npm install\n\nscript:\n  - npm run dev\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.87890625,
          "content": "# Opening an Issue\n\nPlease feel free to open an issue for any reason, including but not limited to bugs, feature requests, and help.  \nIf the issue is a duplicate, it will be flagged as such and subsequently closed by the Felony team.  \nIf not, expect some serious discussion!\nIf you're reporting a bug, please include as much information as possible about your environment and the steps leading up to it.  A good bug report is usually one that has enough information for the developers to replicate the bug.\n\n# Submitting a Pull Request\n\nInternally, we try to minimize the use of our core branch.\nIf you're contributing and fixing an issue, please be sure that your push references the associated issue number.\n\n# Check Log File\n\nIf your log file contains any information please attach it.\n\n- Linux: ~/.config/Felony/log.log\n- OS X: ~/Library/Logs/Felony/log.log\n- Windows: %AppData%/Felony/log.log\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0712890625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Henry Boldizsar, Case Sandberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.3896484375,
          "content": "![Felony Logo](https://i.imgur.com/gqG7XoQ.png)\n![Felony Screenshot](https://i.imgur.com/0e1ZOLp.png)\n\n**Felony is an open-source pgp keychain built on the modern web with Electron, React, and Redux.** Felony is the first PGP app that's easy for anyone to use, without a tutorial.\n\n[![Github All Releases](https://img.shields.io/github/downloads/henryboldi/felony/total.svg?maxAge=2592000)]()\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fhenryboldi%2Ffelony.svg?size=large)](https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fhenryboldi%2Ffelony?ref=badge_large)\n\n## Download Felony\nYou can download compiled versions of Felony for Windows, macOS, and Linux from https://github.com/henryboldi/felony/releases. The app is currently in its pre-release stage, so it hasn't been fully tested on all platforms. Confirmed to be working on Mac, as that's what the developers own.\n\n## How it works\n### 1. Add public keys to your buddies list\nA public key is like a username - Adding someone’s public key to your buddies list lets you send them messages. You can find other public keys on markets like Keybase.io and Darknet.\n### 2. Encrypt a message\nSelect a recipient from your buddies list and compose a message. Only your chosen recipient(s) can read the message. Encrypted messages can be used to send sensitive information, such as an address, document, or anything intended to be read only by intended recipients.\n### 3. Send the encrypted message anywhere\nYou can send the encrypted message on any website! Send encrypted messages over Facebook Messenger, Twitter DMs, YouTube, Instagram, or anywhere else. **Felony is security when and where you want it.**\n\n## Running Locally\nTo run the development environment run\n```\nnpm run dev\n```\nTo package felony run\n```\nnpm run package\n```\nTo build for all platforms\n```\nnpm run package-all\n```\nFor more information check out [electron-react-boilerplate](https://github.com/chentsulin/electron-react-boilerplate), which we used as a starting point.\n\n## Feature Requests\nHave an idea for a feature you'd love to see in Felony? Create an issue and tag it as a feature request.\n\n## Maintainers\n\nMaintained with ❤️ by [Sanil](https://github.com/TechyPeople), [Frank](https://github.com/frankcash).\n\nCreated by [Henry](https://github.com/henryboldi) & [Case](https://github.com/casesandberg).\n\n> 100% inline styles via [ReactCSS](http://reactcss.com/)\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.development.js",
          "type": "blob",
          "size": 6.927734375,
          "content": "import { app, BrowserWindow, Menu, shell, autoUpdater } from 'electron' // eslint-disable-line\nimport open from 'open'\n\nconst { version } = require('./package.json')\n\nlet menu\nlet template\nlet mainWindow = null\n\nconst feedUrl = `https://felony-app-update.herokuapp.com/update/${ process.platform }_${ process.arch }/${ version }`\n\nif (process.env.NODE_ENV !== 'development') {\n  autoUpdater.setFeedURL(feedUrl)\n\n  try {\n    let check = true\n\n    autoUpdater.checkForUpdates()\n    setInterval(() => {\n      if (check) {\n        autoUpdater.checkForUpdates()\n      }\n    }, 120000)\n\n    autoUpdater.on('checking-for-update', () => {\n      check = false\n    })\n\n    autoUpdater.on('update-available', () => {\n      // Update\n    })\n\n    autoUpdater.on('update-not-available', () => {\n      // No update\n    })\n\n    autoUpdater.on('update-downloaded', () => {\n      // TODO: ask before installing\n      autoUpdater.quitAndInstall()\n    })\n  } catch (err) {\n    console.log('error', err) // eslint-disable-line no-console\n  }\n}\n\n\nconst createWindow = () => {\n  mainWindow = new BrowserWindow({\n    'show': false,\n    'resizable': false,\n    'width': 295,\n    'height': 435,\n    'titleBarStyle': 'hidden',\n  })\n\n  mainWindow.loadURL(`file://${ __dirname }/app/app.html`)\n\n  mainWindow.webContents.on('did-finish-load', () => {\n    mainWindow.show()\n    mainWindow.focus()\n  })\n\n  mainWindow.webContents.on('new-window', (event, url) => {\n    event.preventDefault()\n    open(url)\n  })\n  mainWindow.on('closed', () => {\n    mainWindow = null\n  })\n\n  if (process.env.NODE_ENV === 'development') {\n    mainWindow.openDevTools()\n  }\n\n  if (process.platform === 'darwin') {\n    template = [{\n      label: 'Electron',\n      submenu: [{\n        label: 'About Felony',\n        selector: 'orderFrontStandardAboutPanel:',\n      }, {\n        type: 'separator',\n      }, {\n        label: 'Services',\n        submenu: [],\n      }, {\n        type: 'separator',\n      }, {\n        label: 'Hide Felony',\n        accelerator: 'Command+H',\n        selector: 'hide:',\n      }, {\n        label: 'Hide Others',\n        accelerator: 'Command+Shift+H',\n        selector: 'hideOtherApplications:',\n      }, {\n        label: 'Show All',\n        selector: 'unhideAllApplications:',\n      }, {\n        type: 'separator',\n      }, {\n        label: 'Quit',\n        accelerator: 'Command+Q',\n        click() {\n          app.quit()\n        },\n      }],\n    }, {\n      label: 'Edit',\n      submenu: [{\n        label: 'Undo',\n        accelerator: 'Command+Z',\n        selector: 'undo:',\n      }, {\n        label: 'Redo',\n        accelerator: 'Shift+Command+Z',\n        selector: 'redo:',\n      }, {\n        type: 'separator',\n      }, {\n        label: 'Cut',\n        accelerator: 'Command+X',\n        selector: 'cut:',\n      }, {\n        label: 'Copy',\n        accelerator: 'Command+C',\n        selector: 'copy:',\n      }, {\n        label: 'Paste',\n        accelerator: 'Command+V',\n        selector: 'paste:',\n      }, {\n        label: 'Select All',\n        accelerator: 'Command+A',\n        selector: 'selectAll:',\n      }],\n    }, {\n      label: 'View',\n      submenu: (process.env.NODE_ENV === 'development') ? [{\n        label: 'Reload',\n        accelerator: 'Command+R',\n        click() {\n          mainWindow.restart()\n        },\n      }, {\n        label: 'Toggle Full Screen',\n        accelerator: 'Ctrl+Command+F',\n        click() {\n          if (mainWindow) {\n            mainWindow.setFullScreen(!mainWindow.isFullScreen())\n          }\n        },\n      }, {\n        label: 'Toggle Developer Tools',\n        accelerator: 'Alt+Command+I',\n        click() {\n          mainWindow.toggleDevTools()\n        },\n      }] : [{\n        label: 'Toggle Full Screen',\n        accelerator: 'Ctrl+Command+F',\n        click() {\n          if (mainWindow) {\n            mainWindow.setFullScreen(!mainWindow.isFullScreen())\n          }\n        },\n      }],\n    }, {\n      label: 'Window',\n      submenu: [{\n        label: 'Minimize',\n        accelerator: 'Command+M',\n        selector: 'performMiniaturize:',\n      }, {\n        label: 'Close',\n        accelerator: 'Command+W',\n        selector: 'performClose:',\n      }, {\n        type: 'separator',\n      }, {\n        label: 'Bring All to Front',\n        selector: 'arrangeInFront:',\n      }],\n    }, {\n      label: 'Help',\n      submenu: [{\n        label: 'Learn More',\n        click() {\n          shell.openExternal('http://electron.atom.io')\n        },\n      }, {\n        label: 'Documentation',\n        click() {\n          shell.openExternal('https://github.com/atom/electron/tree/master/docs#readme')\n        },\n      }, {\n        label: 'Community Discussions',\n        click() {\n          shell.openExternal('https://discuss.atom.io/c/electron')\n        },\n      }, {\n        label: 'Search Issues',\n        click() {\n          shell.openExternal('https://github.com/atom/electron/issues')\n        },\n      }],\n    }]\n\n    menu = Menu.buildFromTemplate(template)\n    Menu.setApplicationMenu(menu)\n  } else {\n    template = [{\n      label: '&File',\n      submenu: [{\n        label: '&Open',\n        accelerator: 'Ctrl+O',\n      }, {\n        label: '&Close',\n        accelerator: 'Ctrl+W',\n        click() {\n          mainWindow.close()\n        },\n      }],\n    }, {\n      label: '&View',\n      submenu: (process.env.NODE_ENV === 'development') ? [{\n        label: '&Reload',\n        accelerator: 'Ctrl+R',\n        click() {\n          mainWindow.restart()\n        },\n      }, {\n        label: 'Toggle &Full Screen',\n        accelerator: 'F11',\n        click() {\n          if (mainWindow) {\n            mainWindow.setFullScreen(!mainWindow.isFullScreen())\n          }\n        },\n      }, {\n        label: 'Toggle &Developer Tools',\n        accelerator: 'Alt+Ctrl+I',\n        click() {\n          mainWindow.toggleDevTools()\n        },\n      }] : [{\n        label: 'Toggle &Full Screen',\n        accelerator: 'F11',\n        click() {\n          if (mainWindow) {\n            mainWindow.setFullScreen(!mainWindow.isFullScreen())\n          }\n        },\n      }],\n    }, {\n      label: 'Help',\n      submenu: [{\n        label: 'Learn More',\n        click() {\n          shell.openExternal('http://electron.atom.io')\n        },\n      }, {\n        label: 'Documentation',\n        click() {\n          shell.openExternal('https://github.com/atom/electron/tree/master/docs#readme')\n        },\n      }, {\n        label: 'Community Discussions',\n        click() {\n          shell.openExternal('https://discuss.atom.io/c/electron')\n        },\n      }, {\n        label: 'Search Issues',\n        click() {\n          shell.openExternal('https://github.com/atom/electron/issues')\n        },\n      }],\n    }]\n    menu = Menu.buildFromTemplate(template)\n    mainWindow.setMenu(menu)\n  }\n}\n\nif (process.env.NODE_ENV === 'development') {\n  require('electron-debug')() // eslint-disable-line global-require\n}\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit()\n})\n\napp.on('ready', createWindow)\napp.on('activate', () => {\n  if (mainWindow === null) {\n    createWindow()\n  }\n})\n"
        },
        {
          "name": "package.js",
          "type": "blob",
          "size": 3.7470703125,
          "content": "/* eslint-disable no-console */\nimport 'babel-polyfill'\nimport os from 'os'\nimport webpack from 'webpack'\nimport packager from 'electron-packager'\nimport electronInstaller from 'electron-winstaller'\nimport del from 'del'\nimport { exec } from 'child_process'\nimport electronCfg from './webpack.config.electron'\nimport cfg from './webpack.config.production'\nimport pkg from './package.json'\n\nconst argv = require('minimist')(process.argv.slice(2))\n\nconst deps = Object.keys(pkg.dependencies)\nconst devDeps = Object.keys(pkg.devDependencies)\nconst appName = argv.name || argv.n || pkg.productName\nconst shouldUseAsar = argv.asar || argv.a || false\nconst shouldBuildAll = argv.all || false\n\nconst DEFAULT_OPTS = {\n  dir: './',\n  name: appName,\n  asar: shouldUseAsar,\n  ignore: [\n    '/test($|/)',\n    '/tools($|/)',\n    '/release($|/)',\n    '/main.development.js',\n  ].concat(devDeps.map(name => `/node_modules/${ name }($|/)`))\n  .concat(\n    deps.filter(name => !electronCfg.default.externals.includes(name))\n      .map(name => `/node_modules/${ name }($|/)`),\n  ),\n}\n\nconst icon = argv.icon || argv.i || 'app/app'\n\nif (icon) {\n  DEFAULT_OPTS.icon = icon\n}\n\nconst version = argv.version || argv.v\n\nif (version) {\n  DEFAULT_OPTS.version = version\n  startPack()\n} else {\n  // use the same version as the currently-installed electron-prebuilt\n  exec('npm list electron-prebuilt --dev', (err, stdout) => {\n    if (err) {\n      DEFAULT_OPTS.version = '1.2.6'\n    } else {\n      DEFAULT_OPTS.version = stdout.split('electron-prebuilt@')[1].replace(/\\s/g, '')\n    }\n\n    startPack()\n  })\n}\n\n\nfunction build(cfg) {\n  return new Promise((resolve, reject) => {\n    webpack(cfg, (err, stats) => {\n      if (err) return reject(err)\n      resolve(stats)\n    })\n  })\n}\n\nfunction startPack() {\n  console.log('start pack...')\n  build(electronCfg.default)\n    .then(() => build(cfg.default))\n    .then(() => del('release'))\n    .then(() => {\n      if (shouldBuildAll) {\n        // build for all platforms\n        const archs = ['ia32', 'x64']\n        const platforms = ['linux', 'win32', 'darwin']\n\n        platforms.forEach((plat) => {\n          archs.forEach((arch) => {\n            pack(plat, arch, log(plat, arch))\n          })\n        })\n      } else {\n        // build for current platform only\n        pack(os.platform(), os.arch(), log(os.platform(), os.arch()))\n      }\n    })\n    .catch((err) => {\n      console.error(err)\n    })\n}\n\nfunction pack(plat, arch, cb) {\n  // there is no darwin ia32 electron\n  if (plat === 'darwin' && arch === 'ia32') return\n\n  const iconObj = {\n    icon: DEFAULT_OPTS.icon + (() => {\n      let extension = '.png'\n      if (plat === 'darwin') {\n        extension = '.icns'\n      } else if (plat === 'win32') {\n        extension = '.ico'\n      }\n      return extension\n    })(),\n  }\n\n  const opts = Object.assign({}, DEFAULT_OPTS, iconObj, {\n    'platform': plat,\n    arch,\n    'prune': true,\n    'app-version': pkg.version || DEFAULT_OPTS.version,\n    'out': `release/${ plat }-${ arch }`,\n  })\n\n  if (`${ plat }-${ arch }` === 'darwin-x64') {\n    opts['osx-sign'] = {\n      app: '/release/darwin-x64/Felony-darwin-x64/Felony.app',\n      identity: 'xxxxxxxxx', // Developer ID Application: * (*)\n    }\n  }\n\n  console.log('opts', opts)\n\n  packager(opts, cb)\n}\n\nfunction log(plat, arch) {\n  return (err) => {\n    if (err) return console.error(err)\n    console.log(`${ plat }-${ arch } finished`)\n    if (`${ plat }-${ arch }` === 'win32-x64') {\n      const resultPromise = electronInstaller.createWindowsInstaller({\n        appDirectory: 'release/win32-x64/Felony-win32-x64',\n        outputDirectory: 'release/win32-x64-installer',\n        authors: 'Henry Boldizsar',\n        exe: 'Felony.exe',\n      })\n      resultPromise.then(() => console.log('It worked!'), e => console.log(`No dice: ${ e.message }`))\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 4.7646484375,
          "content": "{\n  \"name\": \"felony\",\n  \"productName\": \"Felony\",\n  \"version\": \"0.10.3\",\n  \"author\": {\n    \"name\": \"Henry Boldizsar\",\n    \"email\": \"henrymb67@gmail.com\",\n    \"url\": \"https://github.com/henryboldi\"\n  },\n  \"description\": \"Felony makes sending encrypted messages anywhere easy.\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"test\": \"cross-env NODE_ENV=test mocha --compilers js:babel-register --recursive --require ./test/setup.js test/**/*.spec.js\",\n    \"test-watch\": \"npm test -- --watch\",\n    \"test-e2e\": \"cross-env NODE_ENV=test mocha --compilers js:babel-register --require ./test/setup.js --require co-mocha ./test/e2e.js\",\n    \"lint\": \"eslint app test *.js\",\n    \"hot-server\": \"node -r babel-register server.js\",\n    \"build-main\": \"cross-env NODE_ENV=production node -r babel-register ./node_modules/.bin/webpack --config webpack.config.electron.js --progress --profile --colors\",\n    \"build-renderer\": \"cross-env NODE_ENV=production node -r babel-register ./node_modules/.bin/webpack --config webpack.config.production.js --progress --profile --colors\",\n    \"build\": \"npm run build-main && npm run build-renderer\",\n    \"start\": \"cross-env NODE_ENV=production electron ./\",\n    \"start-hot\": \"cross-env HOT=1 NODE_ENV=development electron -r babel-register ./main.development\",\n    \"package\": \"cross-env NODE_ENV=production node -r babel-register package.js\",\n    \"package-all\": \"npm run package -- --all\",\n    \"postinstall\": \"node node_modules/fbjs-scripts/node/check-dev-engines.js package.json\",\n    \"dev\": \"concurrently --kill-others \\\"npm run hot-server\\\" \\\"npm run start-hot\\\"\"\n  },\n  \"bin\": {\n    \"electron\": \"./node_modules/.bin/electron\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/henryboldi/felony.git\"\n  },\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/henryboldi/felony/issues\"\n  },\n  \"keywords\": [\n    \"electron\",\n    \"boilerplate\",\n    \"react\",\n    \"react-router\",\n    \"flux\",\n    \"webpack\",\n    \"react-hot\"\n  ],\n  \"homepage\": \"https://github.com/henryboldi/felony#readme\",\n  \"devDependencies\": {\n    \"asar\": \"^0.11.0\",\n    \"babel-core\": \"^6.7.6\",\n    \"babel-eslint\": \"^6.1.2\",\n    \"babel-loader\": \"^6.2.4\",\n    \"babel-plugin-add-module-exports\": \"^0.1.2\",\n    \"babel-plugin-webpack-loaders\": \"^0.4.0\",\n    \"babel-polyfill\": \"^6.7.4\",\n    \"babel-preset-es2015\": \"^6.6.0\",\n    \"babel-preset-es2015-rollup\": \"^1.1.1\",\n    \"babel-preset-react\": \"^6.5.0\",\n    \"babel-preset-react-hmre\": \"^1.1.1\",\n    \"babel-preset-stage-0\": \"^6.5.0\",\n    \"babel-register\": \"^6.7.2\",\n    \"chai\": \"^3.5.0\",\n    \"chromedriver\": \"2.21.2\",\n    \"co-mocha\": \"^1.1.2\",\n    \"concurrently\": \"^2.0.0\",\n    \"cross-env\": \"^1.0.7\",\n    \"css-loader\": \"^0.23.1\",\n    \"del\": \"^2.2.0\",\n    \"electron-packager\": \"^7.0.3\",\n    \"electron-prebuilt\": \"^1.2.6\",\n    \"electron-rebuild\": \"^1.1.3\",\n    \"electron-winstaller\": \"^2.3.1\",\n    \"eslint\": \"^3.10.0\",\n    \"eslint-config-airbnb\": \"^13.0.0\",\n    \"eslint-plugin-import\": \"^2.2.0\",\n    \"eslint-plugin-jsx-a11y\": \"^2.2.3\",\n    \"eslint-plugin-react\": \"^6.6.0\",\n    \"express\": \"^4.13.4\",\n    \"extract-text-webpack-plugin\": \"^1.0.1\",\n    \"fbjs-scripts\": \"^0.6.0\",\n    \"file-loader\": \"^0.8.5\",\n    \"jsdom\": \"^8.4.0\",\n    \"json-loader\": \"^0.5.4\",\n    \"minimist\": \"^1.2.0\",\n    \"mocha\": \"^2.4.5\",\n    \"node-libs-browser\": \"^1.0.0\",\n    \"react-addons-test-utils\": \"^15.0.1\",\n    \"redux-devtools\": \"^3.2.0\",\n    \"redux-devtools-dock-monitor\": \"^1.1.1\",\n    \"redux-devtools-log-monitor\": \"^1.0.11\",\n    \"redux-logger\": \"^2.6.1\",\n    \"rollup-plugin-babel\": \"^2.5.1\",\n    \"selenium-webdriver\": \"^2.53.1\",\n    \"sinon\": \"^1.17.3\",\n    \"style-loader\": \"^0.13.1\",\n    \"webpack\": \"^1.13.0\",\n    \"webpack-dev-middleware\": \"^1.6.1\",\n    \"webpack-hot-middleware\": \"^2.10.0\",\n    \"webpack-node-externals\": \"^1.2.0\"\n  },\n  \"dependencies\": {\n    \"babel-plugin-transform-runtime\": \"^6.9.0\",\n    \"body-parser\": \"^1.15.0\",\n    \"classnames\": \"^2.2.3\",\n    \"css-modules-require-hook\": \"^4.0.0\",\n    \"dynamics.js\": \"^0.0.9\",\n    \"electron-debug\": \"^0.6.0\",\n    \"electron-log\": \"^1.0.17\",\n    \"font-awesome\": \"^4.6.1\",\n    \"immutable\": \"^3.7.6\",\n    \"isomorphic-fetch\": \"^2.2.1\",\n    \"keytar\": \"^3.0.2\",\n    \"lodash\": \"^3.10.1\",\n    \"lowdb\": \"^0.12.4\",\n    \"merge\": \"^1.2.0\",\n    \"node-notifier\": \"^4.6.0\",\n    \"normalize.css\": \"^3.0.3\",\n    \"open\": \"0.0.5\",\n    \"openpgp\": \"^2.2.1\",\n    \"os\": \"^0.1.0\",\n    \"react\": \"^15.0.2\",\n    \"react-copy-to-clipboard\": \"^4.1.0\",\n    \"react-dom\": \"^15.0.1\",\n    \"react-ladda\": \"^4.0.3\",\n    \"react-redux\": \"^4.4.5\",\n    \"react-router\": \"^2.2.4\",\n    \"react-router-redux\": \"^4.0.2\",\n    \"reactcss\": \"https://github.com/casesandberg/reactcss/tarball/1.0.0-perf\",\n    \"redux\": \"^3.4.0\",\n    \"redux-thunk\": \"^2.0.1\",\n    \"source-map-support\": \"^0.4.0\",\n    \"underscore-db\": \"^0.9.1\",\n    \"url-loader\": \"^0.5.7\",\n    \"uuid\": \"^2.0.1\"\n  },\n  \"devEngines\": {\n    \"node\": \">=4.x\",\n    \"npm\": \">=2.x\"\n  }\n}\n"
        },
        {
          "name": "server.js",
          "type": "blob",
          "size": 0.6328125,
          "content": "/* eslint-disable no-console */\nimport express from 'express'\nimport webpack from 'webpack'\nimport webpackDevMiddleware from 'webpack-dev-middleware'\nimport webpackHotMiddleware from 'webpack-hot-middleware'\n\nimport config from './webpack.config.development'\n\nconst app = express()\nconst compiler = webpack(config)\nconst PORT = 3000\n\napp.use(webpackDevMiddleware(compiler, {\n  publicPath: config.output.publicPath,\n  stats: {\n    colors: true,\n  },\n}))\n\napp.use(webpackHotMiddleware(compiler))\n\napp.listen(PORT, 'localhost', (err) => {\n  if (err) {\n    console.error(err)\n    return\n  }\n\n  console.log(`Listening at http://localhost:${ PORT }`)\n})\n"
        },
        {
          "name": "webpack.config.base.js",
          "type": "blob",
          "size": 0.73828125,
          "content": "import path from 'path'\n\nexport default {\n  module: {\n    loaders: [{\n      test: /\\.jsx?$/,\n      loaders: ['babel-loader'],\n      exclude: /node_modules/,\n    }, {\n      test: /\\.json$/,\n      loader: 'json-loader',\n    },\n    {\n      test: /\\.(png|woff|woff2|eot|ttf|svg)$/,\n      loader: 'url-loader?limit=100000',\n    },\n    ],\n  },\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js',\n    libraryTarget: 'commonjs2',\n  },\n  resolve: {\n    extensions: ['', '.js', '.jsx'],\n    packageMains: ['webpack', 'browser', 'web', 'browserify', ['jam', 'main'], 'main'],\n  },\n  plugins: [\n\n  ],\n  externals: [\n\n    // put your node 3rd party libraries which can't be built with webpack here\n    // (mysql, mongodb, and so on..)\n  ],\n}\n"
        },
        {
          "name": "webpack.config.development.js",
          "type": "blob",
          "size": 1.4140625,
          "content": "/* eslint max-len: 0 */\nimport webpack from 'webpack'\nimport baseConfig from './webpack.config.base'\nimport nodeExternals from 'webpack-node-externals'\n\nconst config = {\n  ...baseConfig,\n\n  debug: true,\n\n  devtool: 'cheap-module-eval-source-map',\n\n  entry: [\n    'babel-polyfill',\n    'webpack-hot-middleware/client?path=http://localhost:3000/__webpack_hmr',\n    './app/index',\n  ],\n\n  output: {\n    ...baseConfig.output,\n    publicPath: 'http://localhost:3000/dist/',\n  },\n\n  module: {\n    ...baseConfig.module,\n    loaders: [\n      ...baseConfig.module.loaders,\n\n      {\n        test: /\\.global\\.css$/,\n        loaders: [\n          'style-loader',\n          'css-loader',\n        ],\n      },\n\n      {\n        test: /^((?!\\.global).)*\\.css$/,\n        loaders: [\n          'style-loader',\n          'css-loader',\n        ],\n      },\n    ],\n  },\n\n  plugins: [\n    ...baseConfig.plugins,\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\n    new webpack.DefinePlugin({\n      '__DEV__': true,\n      'process.env': {\n        NODE_ENV: JSON.stringify('development'),\n      },\n    }),\n  ],\n\n  target: 'electron-renderer',\n\n  externals: [\n    nodeExternals({\n      whitelist: ['webpack-hot-middleware/client?path=http://localhost:3000/__webpack_hmr', 'normalize.css'],\n    }),\n\n    // put your node 3rd party libraries which can't be built with webpack here\n    // (mysql, mongodb, and so on..)\n  ],\n}\n\nexport default config\n"
        },
        {
          "name": "webpack.config.electron.js",
          "type": "blob",
          "size": 0.7861328125,
          "content": "import webpack from 'webpack'\nimport baseConfig from './webpack.config.base'\n\nexport default {\n  ...baseConfig,\n\n  devtool: 'source-map',\n\n  entry: [\n    './main.development',\n  ],\n\n  output: {\n    path: __dirname,\n    filename: './main.js',\n  },\n\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin({\n      compressor: {\n        warnings: false,\n      },\n    }),\n    new webpack.BannerPlugin(\n      'require(\"source-map-support\").install();',\n      { raw: true, entryOnly: false }\n    ),\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: JSON.stringify('production'),\n      },\n    }),\n  ],\n\n  target: 'electron-renderer',\n\n  node: {\n    __dirname: false,\n    __filename: false,\n  },\n\n  externals: [\n    'keytar',\n    'openpgp',\n    'font-awesome',\n    'source-map-support',\n  ],\n}\n"
        },
        {
          "name": "webpack.config.node.js",
          "type": "blob",
          "size": 0.2431640625,
          "content": "// for babel-plugin-webpack-loaders\nrequire('babel-register')\nconst devConfigs = require('./webpack.config.development')\n\nmodule.exports = {\n  output: {\n    libraryTarget: 'commonjs2',\n  },\n  module: {\n    loaders: devConfigs.module.loaders,\n  },\n}\n"
        },
        {
          "name": "webpack.config.production.js",
          "type": "blob",
          "size": 1.3212890625,
          "content": "import webpack from 'webpack'\nimport ExtractTextPlugin from 'extract-text-webpack-plugin'\nimport baseConfig from './webpack.config.base'\n\nconst config = {\n  ...baseConfig,\n\n  devtool: 'source-map',\n\n  entry: [\n    'babel-polyfill',\n    './app/index',\n  ],\n\n  output: {\n    ...baseConfig.output,\n\n    publicPath: '../dist/',\n  },\n\n  module: {\n    ...baseConfig.module,\n\n    loaders: [\n      ...baseConfig.module.loaders,\n\n      {\n        test: /\\.global\\.css$/,\n        loader: ExtractTextPlugin.extract(\n          'style-loader',\n          'css-loader'\n        ),\n      },\n\n      {\n        test: /^((?!\\.global).)*\\.css$/,\n        loader: ExtractTextPlugin.extract(\n          'style-loader',\n          'css-loader?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]'\n        ),\n      },\n    ],\n  },\n\n  plugins: [\n    ...baseConfig.plugins,\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.DefinePlugin({\n      __DEV__: false,\n      'process.env': {\n        NODE_ENV: JSON.stringify('production'),\n      },\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      compressor: {\n        screw_ie8: true,\n        warnings: false,\n      },\n    }),\n    new ExtractTextPlugin('style.css', { allChunks: true }),\n  ],\n\n  externals: [\n    'keytar',\n    'openpgp',\n  ],\n\n  target: 'electron-renderer',\n}\n\nexport default config\n"
        }
      ]
    }
  ]
}