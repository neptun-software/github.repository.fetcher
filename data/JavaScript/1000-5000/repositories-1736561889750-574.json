{
  "metadata": {
    "timestamp": 1736561889750,
    "page": 574,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jschr/textillate",
      "stars": 3663,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0546875,
          "content": "index.html linguist-vendored\nassets/* linguist-vendored\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0185546875,
          "content": ".idea\nnode_modules\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0341796875,
          "content": "Copyright (C) 2014 Jordan Schroter\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.0068359375,
          "content": "# Textillate.js v0.4.1  [![JS.ORG](https://img.shields.io/badge/js.org-textillate-ffb400.svg?style=flat-square)](http://js.org)\n\nSee a live demo [here](http://textillate.js.org/).\n\nTextillate.js combines some awesome libraries to provide an easy-to-use plugin for applying CSS3 animations to any text.\n\n## Usage\n\nLet's start with the basic markup:\n\n```html\n<h1 class=\"tlt\">My Title</h1>\n```\n\nAnd your JavaScript should look like this:\n\n```js\n$(function () {\n\t$('.tlt').textillate();\n})\n```\n\nThis will animate using the default options. To change the defaults, you can either use the html data api:\n\n```html\n<h1 class=\"tlt\" data-in-effect=\"rollIn\">Title</h1>\n```\n\nor pass in options on initialization (see full list of options below):\n\n```js\n$('.tlt').textillate({ in: { effect: 'rollIn' } });\n```\n\nYou can also tell textillate.js to animate a list with the following markup:\n\n```html\n<h1 class=\"tlt\">\n\t<ul class=\"texts\">\n\t\t<li data-out-effect=\"fadeOut\" data-out-shuffle=\"true\">Some Title</li>\n\t\t<li data-in-effect=\"fadeIn\">Another Title</li>\n\t</ul>\n</h1>\n```\n\n```js\n$('.tlt').textillate();\n```\n\nNotice that you can control the animation parameters on each text (`<li>`) using the data api.\n\n## Dependencies\nTo start using textillate.js, you will need the following:\n\n* [jQuery](http://jquery.com/download/)\n* [lettering.js](https://github.com/davatron5000/Lettering.js)\n* [animate.css](https://github.com/daneden/animate.css)\n\n\n## Options\n\n```js\n$('.tlt').textillate({\n  // the default selector to use when detecting multiple texts to animate\n  selector: '.texts',\n\n  // enable looping\n  loop: false,\n\n  // sets the minimum display time for each text before it is replaced\n  minDisplayTime: 2000,\n\n  // sets the initial delay before starting the animation\n  // (note that depending on the in effect you may need to manually apply\n  // visibility: hidden to the element before running this plugin)\n  initialDelay: 0,\n\n  // set whether or not to automatically start animating\n  autoStart: true,\n\n  // custom set of 'in' effects. This effects whether or not the\n  // character is shown/hidden before or after an animation\n  inEffects: [],\n\n  // custom set of 'out' effects\n  outEffects: [ 'hinge' ],\n\n  // in animation settings\n  in: {\n  \t// set the effect name\n    effect: 'fadeInLeftBig',\n\n    // set the delay factor applied to each consecutive character\n    delayScale: 1.5,\n\n    // set the delay between each character\n    delay: 50,\n\n    // set to true to animate all the characters at the same time\n    sync: false,\n\n    // randomize the character sequence\n    // (note that shuffle doesn't make sense with sync = true)\n    shuffle: false,\n\n    // reverse the character sequence\n    // (note that reverse doesn't make sense with sync = true)\n    reverse: false,\n\n    // callback that executes once the animation has finished\n    callback: function () {}\n  },\n\n  // out animation settings.\n  out: {\n    effect: 'hinge',\n    delayScale: 1.5,\n    delay: 50,\n    sync: false,\n    shuffle: false,\n    reverse: false,\n    callback: function () {}\n  },\n\n  // callback that executes once textillate has finished\n  callback: function () {},\n\n  // set the type of token to animate (available types: 'char' and 'word')\n  type: 'char'\n});\n```\n\n## Events\n\nTextillate triggers the following events:\n\n* `start.tlt` - triggered when textillate starts\n* `inAnimationBegin.tlt` - triggered when the in animation begins\n* `inAnimationEnd.tlt` - triggered when the in animation ends\n* `outAnimationBegin.tlt` - triggered when the out animation begins\n* `outAnimationEnd.tlt` - triggered when the out animation ends\n* `end.tlt` - triggered when textillate ends\n\n```js\n$('.tlt').on('inAnimationBegin.tlt', function () {\n  // do something\n});\n```\n\n## Methods\n\n* `$element.textillate('start')` - Manually start/restart textillate\n* `$element.textillate('stop')` - Manually pause/stop textillate\n* `$element.textillate('in')` - Trigger the current text's in animation\n* `$element.textillate('out')` - Trigger the current text's out animation\n\n## Code Samples\n* [textillate.js + bounce.js](http://codepen.io/jschr/pen/GaJCi)\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.5810546875,
          "content": "{\n  \"name\": \"textillate\",\n  \"version\": \"0.4.1\",\n  \"homepage\": \"https://github.com/jschr/textillate\",\n  \"authors\": [\n    \"Jordan Schroter <jordan.schroter@gmail.com>\"\n  ],\n  \"description\": \"A simple plugin for CSS3 text animations\",\n  \"main\": \"jquery.textillate.js\",\n  \"keywords\": [\n    \"textillate\",\n    \"css3\",\n    \"animation\",\n    \"text\",\n    \"lettering\"\n  ],\n  \"license\": \"MIT\",\n  \"ignore\": [\n    \"**/.*\",\n    \"node_modules\",\n    \"bower_components\",\n    \"test\",\n    \"tests\"\n  ],\n  \"dependencies\": {\n    \"jquery\": \">= 1.6.2\",\n    \"letteringjs\": \">= 0.6.1\",\n    \"animate.css\": \">= 3.0.0\"\n  }\n}\n"
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 8.9775390625,
          "content": "<!DOCTYPE HTML>\n<html>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Textillate.js</title>\n  <link href=\"assets/animate.css\" rel=\"stylesheet\">\n  <link href=\"assets/style.css\" rel=\"stylesheet\">\n  <link href='http://fonts.googleapis.com/css?family=Rokkitt' rel='stylesheet' type='text/css'>\n  <body>\n    <div class=\"decal\"></div>\n\t\t<div class=\"jumbotron\">\n\t\t\t<div class=\"container\">\n  \t\t  <h1 class=\"glow in tlt\">textillate.js</h1>\n  \t\t  <p class=\"tlt\" data-in-effect=\"bounceInDown\">\n  \t\t  \tA simple plugin for CSS3 text animations.\n  \t\t  </p>\n        <div>\n          <a href=\"https://github.com/jschr/textillate\" class=\"btn fade in\">Download on Github</a>\n        </div>\n        <div>\n          <a\n            class=\"twitter-share-button\"\n            href=\"https://twitter.com/share\"\n            data-text=\"Textillate.js - A simple plugin for CSS3 text animations\"\n            data-url=\"http://textillate.js.org\"\n            data-via=\"_jschr\">\n            Tweet\n          </a>&nbsp;&nbsp;\n          <iframe\n            src=\"https://ghbtns.com/github-btn.html?user=jschr&repo=textillate&type=star&count=true&v=2\"\n            frameborder=\"0\"\n            scrolling=\"0\"\n            width=\"100px\"\n            height=\"20px\">\n          </iframe>\n          <iframe\n            src=\"https://ghbtns.com/github-btn.html?user=jschr&repo=textillate&type=fork&count=true\"\n            frameborder=\"0\"\n            scrolling=\"0\"\n            width=\"90px\"\n            height=\"20px\">\n          </iframe>\n        </div>\n  \t\t</div>\n  \t</div>\n    <div class=\"decal\"></div>\n  \t<div class=\"container fade in\">\n      <div class=\"about\">\n        <div class=\"grid grid-pad\">\n          <section class=\"col-1-3\">\n            <h2>About</h2>\n            <p>Textillate.js combines some awesome libraries to provide a ease-to-use plugin for applying CSS3 animations to any text.</p>\n          </section>\n          <section class=\"col-1-3\">\n            <h2>Usage</h2>\n            <p>Simply include textillate.js and it's dependencies in your project to start creating unqiue effects.</p>\n          </section>\n          <section class=\"col-1-3\">\n            <h2>Credits</h2>\n            <p>Textillate.js is built on top of the simple, yet amazingly powerful <a href=\"http://daneden.me/animate\">animate.css</a> and <a href=\"http://letteringjs.com\">lettering.js</a> libraries.</p>\n          </section>\n        </div>\n      </div>\n      <!--<div class=\"grid grid-pad\">\n        <section class=\"col-1-1\">\n          <h2>Examples</h2>\n          <pre><code class=\"xml\"><span id=\"example\">Some Text</span></code></pre>\n          <pre><code class=\"javascript\">$('#example').textillate()</code></pre>\n        </section>\n      </div>-->\n      <div class=\"grid grid-pad\">\n        <section class=\"col-1-1\">\n            <h2>Playground</h2>\n            <div class=\"playground grid\">\n              <div class=\"col-1-1 viewport\">\n                  <div class=\"tlt\">\n                    <ul class=\"texts\" style=\"display: none\">\n                      <li data-id=\"wizard\">Grumpy wizards make toxic brew for the evil Queen and Jack.</li>\n                      <li data-id=\"fox\">The quick brown fox jumps over the lazy dog.</li>\n                    </ul>\n                  </div>\n              </div>\n              <div class=\"col-1-1 controls\" style=\"padding-right: 0\">\n                <form class=\"grid grid-pad\">\n                  <div class=\"control col-1-2\">\n                    <label>In Animation</label>\n                    <select data-key=\"effect\" data-type=\"in\"></select>\n                    <select data-key=\"type\" data-type=\"in\">\n                      <option value=\"\">sequence</option>\n                      <option value=\"reverse\">reverse</option>\n                      <option value=\"sync\">sync</option>\n                      <option value=\"shuffle\">shuffle</option>\n                    </select>\n                  </div>\n                  <div class=\"control col-1-2\">\n                    <label>Out Animation</label>\n                    <select data-key=\"effect\" data-type=\"out\"></select>\n                    <select data-key=\"type\" data-type=\"out\">\n                      <option value=\"\">sequence</option>\n                      <option value=\"reverse\">reverse</option>\n                      <option value=\"sync\">sync</option>\n                      <option selected=\"selected\" value=\"shuffle\">shuffle</option>\n                    </select>\n                  </div>\n                </form>\n              </div>\n            </div>\n        </section>\n      </div>\n      <div class=\"grid grid-pad\">\n        <section class=\"col-1-1 deps\">\n            <h2>Dependencies</h2>\n            <p>Textillate.js depends on the following libraries: </p>\n            <div>\n              <ul>\n                <li><a href=\"http://jquery.com/\">jQuery</a></li>\n                <li><a href=\"http://daneden.me/animate/\">animate.css</a>, by Daniel Eden</li>\n                <li><a href=\"http://letteringjs.com/\">lettering.js</a>, by Dave Rupert</li>\n              </ul>\n            </div>\n        </section>\n      </div>\n  \t</div>\n\n<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js\"></script>\n<script src=\"assets/jquery.fittext.js\"></script>\n<script src=\"assets/jquery.lettering.js\"></script>\n<script src=\"http://yandex.st/highlightjs/7.3/highlight.min.js\"></script>\n<script src=\"jquery.textillate.js\"></script>\n<script>hljs.initHighlightingOnLoad();</script>\n<script>\n  $(function (){\n    var log = function (msg) {\n      return function () {\n        if (console) console.log(msg);\n      }\n    }\n    $('code').each(function () {\n      var $this = $(this);\n      $this.text($this.html());\n    })\n\n    var animateClasses = 'flash bounce shake tada swing wobble pulse flip flipInX flipOutX flipInY flipOutY fadeIn fadeInUp fadeInDown fadeInLeft fadeInRight fadeInUpBig fadeInDownBig fadeInLeftBig fadeInRightBig fadeOut fadeOutUp fadeOutDown fadeOutLeft fadeOutRight fadeOutUpBig fadeOutDownBig fadeOutLeftBig fadeOutRightBig bounceIn bounceInDown bounceInUp bounceInLeft bounceInRight bounceOut bounceOutDown bounceOutUp bounceOutLeft bounceOutRight rotateIn rotateInDownLeft rotateInDownRight rotateInUpLeft rotateInUpRight rotateOut rotateOutDownLeft rotateOutDownRight rotateOutUpLeft rotateOutUpRight hinge rollIn rollOut';\n\n    var $form = $('.playground form')\n      , $viewport = $('.playground .viewport');\n\n    var getFormData = function () {\n      var data = {\n        loop: true,\n        in: { callback: log('in callback called.') },\n        out: { callback: log('out callback called.') }\n      };\n\n      $form.find('[data-key=\"effect\"]').each(function () {\n        var $this = $(this)\n          , key = $this.data('key')\n          , type = $this.data('type');\n\n          data[type][key] = $this.val();\n      });\n\n      $form.find('[data-key=\"type\"]').each(function () {\n        var $this = $(this)\n          , key = $this.data('key')\n          , type = $this.data('type')\n          , val = $this.val();\n\n          data[type].shuffle = (val === 'shuffle');\n          data[type].reverse = (val === 'reverse');\n          data[type].sync = (val === 'sync');\n      });\n\n      return data;\n    };\n\n    $.each(animateClasses.split(' '), function (i, value) {\n      var type = '[data-type]'\n        , option = '<option value=\"' + value + '\">' + value + '</option>';\n\n      if (/Out/.test(value) || value === 'hinge') {\n        type = '[data-type=\"out\"]';\n      } else if (/In/.test(value)) {\n        type = '[data-type=\"in\"]';\n      }\n\n      if (type) {\n        $form.find('[data-key=\"effect\"]' + type).append(option);\n      }\n    });\n\n    $form.find('[data-key=\"effect\"][data-type=\"in\"]').val('fadeInLeftBig');\n    $form.find('[data-key=\"effect\"][data-type=\"out\"]').val('hinge');\n\n    $('.jumbotron h1')\n      .fitText(0.5)\n      .textillate({ in: { effect: 'flipInY' }});\n\n    $('.jumbotron p')\n      .fitText(3.2, { maxFontSize: 18 })\n      .textillate({ initialDelay: 1000, in: { delay: 3, shuffle: true } });\n\n    setTimeout(function () {\n        $('.fade').addClass('in');\n    }, 250);\n\n    setTimeout(function () {\n      $('h1.glow').removeClass('in');\n    }, 2000);\n\n    var $tlt = $viewport.find('.tlt')\n      .on('start.tlt', log('start.tlt triggered.'))\n      .on('inAnimationBegin.tlt', log('inAnimationBegin.tlt triggered.'))\n      .on('inAnimationEnd.tlt', log('inAnimationEnd.tlt triggered.'))\n      .on('outAnimationBegin.tlt', log('outAnimationBegin.tlt triggered.'))\n      .on('outAnimationEnd.tlt', log('outAnimationEnd.tlt triggered.'))\n      .on('end.tlt', log('end.tlt'));\n\n    $form.on('change', function () {\n      var obj = getFormData();\n      $tlt.textillate(obj);\n    }).trigger('change');\n\n  });\n\n\t</script>\n  <script>\n    window.twttr=(function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],t=window.twttr||{};if(d.getElementById(id))return t;js=d.createElement(s);js.id=id;js.src=\"https://platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);t._e=[];t.ready=function(f){t._e.push(f);};return t;}(document,\"script\",\"twitter-wjs\"));\n  </script>\n  </body>\n</html>\n"
        },
        {
          "name": "jquery.textillate.js",
          "type": "blob",
          "size": 7.845703125,
          "content": "/*\n * textillate.js\n * http://jschr.github.com/textillate\n * MIT licensed\n *\n * Copyright (C) 2012-2013 Jordan Schroter\n */\n\n(function ($) {\n  \"use strict\";\n\n  function isInEffect (effect) {\n    return /In/.test(effect) || $.inArray(effect, $.fn.textillate.defaults.inEffects) >= 0;\n  };\n\n  function isOutEffect (effect) {\n    return /Out/.test(effect) || $.inArray(effect, $.fn.textillate.defaults.outEffects) >= 0;\n  };\n\n\n  function stringToBoolean(str) {\n    if (str !== \"true\" && str !== \"false\") return str;\n    return (str === \"true\");\n  };\n\n  // custom get data api method\n  function getData (node) {\n    var attrs = node.attributes || []\n      , data = {};\n\n    if (!attrs.length) return data;\n\n    $.each(attrs, function (i, attr) {\n      var nodeName = attr.nodeName.replace(/delayscale/, 'delayScale');\n      if (/^data-in-*/.test(nodeName)) {\n        data.in = data.in || {};\n        data.in[nodeName.replace(/data-in-/, '')] = stringToBoolean(attr.nodeValue);\n      } else if (/^data-out-*/.test(nodeName)) {\n        data.out = data.out || {};\n        data.out[nodeName.replace(/data-out-/, '')] =stringToBoolean(attr.nodeValue);\n      } else if (/^data-*/.test(nodeName)) {\n        data[nodeName.replace(/data-/, '')] = stringToBoolean(attr.nodeValue);\n      }\n    })\n\n    return data;\n  }\n\n  function shuffle (o) {\n      for (var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);\n      return o;\n  }\n\n  function animate ($t, effect, cb) {\n    $t.addClass('animated ' + effect)\n      .css('visibility', 'visible')\n      .show();\n\n    $t.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {\n        $t.removeClass('animated ' + effect);\n        cb && cb();\n    });\n  }\n\n  function animateTokens ($tokens, options, cb) {\n    var that = this\n      , count = $tokens.length;\n\n    if (!count) {\n      cb && cb();\n      return;\n    }\n\n    if (options.shuffle) $tokens = shuffle($tokens);\n    if (options.reverse) $tokens = $tokens.toArray().reverse();\n\n    $.each($tokens, function (i, t) {\n      var $token = $(t);\n\n      function complete () {\n        if (isInEffect(options.effect)) {\n          $token.css('visibility', 'visible');\n        } else if (isOutEffect(options.effect)) {\n          $token.css('visibility', 'hidden');\n        }\n        count -= 1;\n        if (!count && cb) cb();\n      }\n\n      var delay = options.sync ? options.delay : options.delay * i * options.delayScale;\n\n      $token.text() ?\n        setTimeout(function () { animate($token, options.effect, complete) }, delay) :\n        complete();\n    });\n  };\n\n  var Textillate = function (element, options) {\n    var base = this\n      , $element = $(element);\n\n    base.init = function () {\n      base.$texts = $element.find(options.selector);\n\n      if (!base.$texts.length) {\n        base.$texts = $('<ul class=\"texts\"><li>' + $element.html() + '</li></ul>');\n        $element.html(base.$texts);\n      }\n\n      base.$texts.hide();\n\n      base.$current = $('<span>')\n        .html(base.$texts.find(':first-child').html())\n        .prependTo($element);\n\n      if (isInEffect(options.in.effect)) {\n        base.$current.css('visibility', 'hidden');\n      } else if (isOutEffect(options.out.effect)) {\n        base.$current.css('visibility', 'visible');\n      }\n\n      base.setOptions(options);\n\n      base.timeoutRun = null;\n\n      setTimeout(function () {\n        base.options.autoStart && base.start();\n      }, base.options.initialDelay)\n    };\n\n    base.setOptions = function (options) {\n      base.options = options;\n    };\n\n    base.triggerEvent = function (name) {\n      var e = $.Event(name + '.tlt');\n      $element.trigger(e, base);\n      return e;\n    };\n\n    base.in = function (index, cb) {\n      index = index || 0;\n\n      var $elem = base.$texts.find(':nth-child(' + ((index||0) + 1) + ')')\n        , options = $.extend(true, {}, base.options, $elem.length ? getData($elem[0]) : {})\n        , $tokens;\n\n      $elem.addClass('current');\n\n      base.triggerEvent('inAnimationBegin');\n      $element.attr('data-active', $elem.data('id'));\n\n      base.$current\n        .html($elem.html())\n        .lettering('words');\n\n      // split words to individual characters if token type is set to 'char'\n      if (base.options.type == \"char\") {\n        base.$current.find('[class^=\"word\"]')\n            .css({\n              'display': 'inline-block',\n              // fix for poor ios performance\n              '-webkit-transform': 'translate3d(0,0,0)',\n              '-moz-transform': 'translate3d(0,0,0)',\n              '-o-transform': 'translate3d(0,0,0)',\n              'transform': 'translate3d(0,0,0)'\n            })\n            .each(function () { $(this).lettering() });\n      }\n\n      $tokens = base.$current\n        .find('[class^=\"' + base.options.type + '\"]')\n        .css('display', 'inline-block');\n\n      if (isInEffect(options.in.effect)) {\n        $tokens.css('visibility', 'hidden');\n      } else if (isOutEffect(options.in.effect)) {\n        $tokens.css('visibility', 'visible');\n      }\n\n      base.currentIndex = index;\n\n      animateTokens($tokens, options.in, function () {\n        base.triggerEvent('inAnimationEnd');\n        if (options.in.callback) options.in.callback();\n        if (cb) cb(base);\n      });\n    };\n\n    base.out = function (cb) {\n      var $elem = base.$texts.find(':nth-child(' + ((base.currentIndex||0) + 1) + ')')\n        , $tokens = base.$current.find('[class^=\"' + base.options.type + '\"]')\n        , options = $.extend(true, {}, base.options, $elem.length ? getData($elem[0]) : {})\n\n      base.triggerEvent('outAnimationBegin');\n\n      animateTokens($tokens, options.out, function () {\n        $elem.removeClass('current');\n        base.triggerEvent('outAnimationEnd');\n        $element.removeAttr('data-active');\n        if (options.out.callback) options.out.callback();\n        if (cb) cb(base);\n      });\n    };\n\n    base.start = function (index) {\n      setTimeout(function () {\n        base.triggerEvent('start');\n\n        (function run (index) {\n          base.in(index, function () {\n            var length = base.$texts.children().length;\n\n            index += 1;\n\n            if (!base.options.loop && index >= length) {\n              if (base.options.callback) base.options.callback();\n              base.triggerEvent('end');\n            } else {\n              index = index % length;\n\n              base.timeoutRun = setTimeout(function () {\n                base.out(function () {\n                  run(index)\n                });\n              }, base.options.minDisplayTime);\n            }\n          });\n        }(index || 0));\n      }, base.options.initialDelay);\n    };\n\n    base.stop = function () {\n      if (base.timeoutRun) {\n        clearInterval(base.timeoutRun);\n        base.timeoutRun = null;\n      }\n    };\n\n    base.init();\n  }\n\n  $.fn.textillate = function (settings, args) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('textillate')\n        , options = $.extend(true, {}, $.fn.textillate.defaults, getData(this), typeof settings == 'object' && settings);\n\n      if (!data) {\n        $this.data('textillate', (data = new Textillate(this, options)));\n      } else if (typeof settings == 'string') {\n        data[settings].apply(data, [].concat(args));\n      } else {\n        data.setOptions.call(data, options);\n      }\n    })\n  };\n\n  $.fn.textillate.defaults = {\n    selector: '.texts',\n    loop: false,\n    minDisplayTime: 2000,\n    initialDelay: 0,\n    in: {\n      effect: 'fadeInLeftBig',\n      delayScale: 1.5,\n      delay: 50,\n      sync: false,\n      reverse: false,\n      shuffle: false,\n      callback: function () {}\n    },\n    out: {\n      effect: 'hinge',\n      delayScale: 1.5,\n      delay: 50,\n      sync: false,\n      reverse: false,\n      shuffle: false,\n      callback: function () {}\n    },\n    autoStart: true,\n    inEffects: [],\n    outEffects: [ 'hinge' ],\n    callback: function () {},\n    type: 'char'\n  };\n\n}(jQuery));\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.5810546875,
          "content": "{\n  \"name\": \"textillate\",\n  \"version\": \"0.4.1\",\n  \"homepage\": \"https://github.com/jschr/textillate\",\n  \"authors\": [\n    \"Jordan Schroter <jordan.schroter@gmail.com>\"\n  ],\n  \"description\": \"A simple plugin for CSS3 text animations\",\n  \"main\": \"jquery.textillate.js\",\n  \"keywords\": [\n    \"textillate\",\n    \"css3\",\n    \"animation\",\n    \"text\",\n    \"lettering\"\n  ],\n  \"license\": \"MIT\",\n  \"ignore\": [\n    \"**/.*\",\n    \"node_modules\",\n    \"bower_components\",\n    \"test\",\n    \"tests\"\n  ],\n  \"dependencies\": {\n    \"jquery\": \">= 1.6.2\",\n    \"letteringjs\": \">= 0.6.1\",\n    \"animate.css\": \">= 3.0.0\"\n  }\n}\n"
        }
      ]
    }
  ]
}