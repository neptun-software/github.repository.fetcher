{
  "metadata": {
    "timestamp": 1736562082310,
    "page": 859,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sindresorhus/open",
      "stars": 3218,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1708984375,
          "content": "root = true\n\n[*]\nindent_style = tab\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.044921875,
          "content": "* text=auto eol=lf\nxdg-open linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0224609375,
          "content": "node_modules\nyarn.lock\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": "index.d.ts",
          "type": "blob",
          "size": 4.9228515625,
          "content": "import {type ChildProcess} from 'node:child_process';\n\nexport type Options = {\n\t/**\n\tWait for the opened app to exit before fulfilling the promise. If `false` it's fulfilled immediately when opening the app.\n\n\tNote that it waits for the app to exit, not just for the window to close.\n\n\tOn Windows, you have to explicitly specify an app for it to be able to wait.\n\n\t@default false\n\t*/\n\treadonly wait?: boolean;\n\n\t/**\n\t__macOS only__\n\n\tDo not bring the app to the foreground.\n\n\t@default false\n\t*/\n\treadonly background?: boolean;\n\n\t/**\n\t__macOS only__\n\n\tOpen a new instance of the app even it's already running.\n\n\tA new instance is always opened on other platforms.\n\n\t@default false\n\t*/\n\treadonly newInstance?: boolean;\n\n\t/**\n\tSpecify the `name` of the app to open the `target` with, and optionally, app `arguments`. `app` can be an array of apps to try to open and `name` can be an array of app names to try. If each app fails, the last error will be thrown.\n\n\tThe app name is platform dependent. Don't hard code it in reusable modules. For example, Chrome is `google chrome` on macOS, `google-chrome` on Linux and `chrome` on Windows. If possible, use `apps` which auto-detects the correct binary to use.\n\n\tYou may also pass in the app's full path. For example on WSL, this can be `/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe` for the Windows installation of Chrome.\n\n\tThe app `arguments` are app dependent. Check the app's documentation for what arguments it accepts.\n\t*/\n\treadonly app?: App | readonly App[];\n\n\t/**\n\tAllow the opened app to exit with nonzero exit code when the `wait` option is `true`.\n\n\tWe do not recommend setting this option. The convention for success is exit code zero.\n\n\t@default false\n\t*/\n\treadonly allowNonzeroExitCode?: boolean;\n};\n\nexport type OpenAppOptions = {\n\t/**\n\tArguments passed to the app.\n\n\tThese arguments are app dependent. Check the app's documentation for what arguments it accepts.\n\t*/\n\treadonly arguments?: readonly string[];\n} & Omit<Options, 'app'>;\n\nexport type AppName =\n\t| 'chrome'\n\t| 'firefox'\n\t| 'edge'\n\t| 'browser'\n\t| 'browserPrivate';\n\nexport type App = {\n\tname: string | readonly string[];\n\targuments?: readonly string[];\n};\n\n/**\nAn object containing auto-detected binary names for common apps. Useful to work around cross-platform differences.\n\n@example\n```\nimport open, {apps} from 'open';\n\nawait open('https://google.com', {\n\tapp: {\n\t\tname: apps.chrome\n\t}\n});\n```\n*/\nexport const apps: Record<AppName, string | readonly string[]>;\n\n/**\nOpen stuff like URLs, files, executables. Cross-platform.\n\nUses the command `open` on macOS, `start` on Windows and `xdg-open` on other platforms.\n\nThere is a caveat for [double-quotes on Windows](https://github.com/sindresorhus/open#double-quotes-on-windows) where all double-quotes are stripped from the `target`.\n\n@param target - The thing you want to open. Can be a URL, file, or executable. Opens in the default app for the file type. For example, URLs open in your default browser.\n@returns The [spawned child process](https://nodejs.org/api/child_process.html#child_process_class_childprocess). You would normally not need to use this for anything, but it can be useful if you'd like to attach custom event listeners or perform other operations directly on the spawned process.\n\n@example\n```\nimport open, {apps} from 'open';\n\n// Opens the image in the default image viewer.\nawait open('unicorn.png', {wait: true});\nconsole.log('The image viewer app quit');\n\n// Opens the URL in the default browser.\nawait open('https://sindresorhus.com');\n\n// Opens the URL in a specified browser.\nawait open('https://sindresorhus.com', {app: {name: 'firefox'}});\n\n// Specify app arguments.\nawait open('https://sindresorhus.com', {app: {name: 'google chrome', arguments: ['--incognito']}});\n\n// Opens the URL in the default browser in incognito mode.\nawait open('https://sindresorhus.com', {app: {name: apps.browserPrivate}});\n```\n*/\nexport default function open(\n\ttarget: string,\n\toptions?: Options\n): Promise<ChildProcess>;\n\n/**\nOpen an app. Cross-platform.\n\nUses the command `open` on macOS, `start` on Windows and `xdg-open` on other platforms.\n\n@param name - The app you want to open. Can be either builtin supported `apps` names or other name supported in platform.\n@returns The [spawned child process](https://nodejs.org/api/child_process.html#child_process_class_childprocess). You would normally not need to use this for anything, but it can be useful if you'd like to attach custom event listeners or perform other operations directly on the spawned process.\n\n@example\n```\nimport open, {openApp, apps} from 'open';\n\n// Open Firefox.\nawait openApp(apps.firefox);\n\n// Open Chrome in incognito mode.\nawait openApp(apps.chrome, {arguments: ['--incognito']});\n\n// Open default browser.\nawait openApp(apps.browser);\n\n// Open default browser in incognito mode.\nawait openApp(apps.browserPrivate);\n\n// Open Xcode.\nawait openApp('xcode');\n```\n*/\nexport function openApp(name: App['name'], options?: OpenAppOptions): Promise<ChildProcess>;\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 8.7158203125,
          "content": "import process from 'node:process';\nimport {Buffer} from 'node:buffer';\nimport path from 'node:path';\nimport {fileURLToPath} from 'node:url';\nimport childProcess from 'node:child_process';\nimport fs, {constants as fsConstants} from 'node:fs/promises';\nimport isWsl from 'is-wsl';\nimport defineLazyProperty from 'define-lazy-prop';\nimport defaultBrowser from 'default-browser';\nimport isInsideContainer from 'is-inside-container';\n\n// Path to included `xdg-open`.\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\nconst {platform, arch} = process;\n\n/**\nGet the mount point for fixed drives in WSL.\n\n@inner\n@returns {string} The mount point.\n*/\nconst getWslDrivesMountPoint = (() => {\n\t// Default value for \"root\" param\n\t// according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\n\tconst defaultMountPoint = '/mnt/';\n\n\tlet mountPoint;\n\n\treturn async function () {\n\t\tif (mountPoint) {\n\t\t\t// Return memoized mount point value\n\t\t\treturn mountPoint;\n\t\t}\n\n\t\tconst configFilePath = '/etc/wsl.conf';\n\n\t\tlet isConfigFileExists = false;\n\t\ttry {\n\t\t\tawait fs.access(configFilePath, fsConstants.F_OK);\n\t\t\tisConfigFileExists = true;\n\t\t} catch {}\n\n\t\tif (!isConfigFileExists) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tconst configContent = await fs.readFile(configFilePath, {encoding: 'utf8'});\n\t\tconst configMountPoint = /(?<!#.*)root\\s*=\\s*(?<mountPoint>.*)/g.exec(configContent);\n\n\t\tif (!configMountPoint) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tmountPoint = configMountPoint.groups.mountPoint.trim();\n\t\tmountPoint = mountPoint.endsWith('/') ? mountPoint : `${mountPoint}/`;\n\n\t\treturn mountPoint;\n\t};\n})();\n\nconst pTryEach = async (array, mapper) => {\n\tlet latestError;\n\n\tfor (const item of array) {\n\t\ttry {\n\t\t\treturn await mapper(item); // eslint-disable-line no-await-in-loop\n\t\t} catch (error) {\n\t\t\tlatestError = error;\n\t\t}\n\t}\n\n\tthrow latestError;\n};\n\nconst baseOpen = async options => {\n\toptions = {\n\t\twait: false,\n\t\tbackground: false,\n\t\tnewInstance: false,\n\t\tallowNonzeroExitCode: false,\n\t\t...options,\n\t};\n\n\tif (Array.isArray(options.app)) {\n\t\treturn pTryEach(options.app, singleApp => baseOpen({\n\t\t\t...options,\n\t\t\tapp: singleApp,\n\t\t}));\n\t}\n\n\tlet {name: app, arguments: appArguments = []} = options.app ?? {};\n\tappArguments = [...appArguments];\n\n\tif (Array.isArray(app)) {\n\t\treturn pTryEach(app, appName => baseOpen({\n\t\t\t...options,\n\t\t\tapp: {\n\t\t\t\tname: appName,\n\t\t\t\targuments: appArguments,\n\t\t\t},\n\t\t}));\n\t}\n\n\tif (app === 'browser' || app === 'browserPrivate') {\n\t\t// IDs from default-browser for macOS and windows are the same\n\t\tconst ids = {\n\t\t\t'com.google.chrome': 'chrome',\n\t\t\t'google-chrome.desktop': 'chrome',\n\t\t\t'org.mozilla.firefox': 'firefox',\n\t\t\t'firefox.desktop': 'firefox',\n\t\t\t'com.microsoft.msedge': 'edge',\n\t\t\t'com.microsoft.edge': 'edge',\n\t\t\t'microsoft-edge.desktop': 'edge',\n\t\t};\n\n\t\t// Incognito flags for each browser in `apps`.\n\t\tconst flags = {\n\t\t\tchrome: '--incognito',\n\t\t\tfirefox: '--private-window',\n\t\t\tedge: '--inPrivate',\n\t\t};\n\n\t\tconst browser = await defaultBrowser();\n\t\tif (browser.id in ids) {\n\t\t\tconst browserName = ids[browser.id];\n\n\t\t\tif (app === 'browserPrivate') {\n\t\t\t\tappArguments.push(flags[browserName]);\n\t\t\t}\n\n\t\t\treturn baseOpen({\n\t\t\t\t...options,\n\t\t\t\tapp: {\n\t\t\t\t\tname: apps[browserName],\n\t\t\t\t\targuments: appArguments,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tthrow new Error(`${browser.name} is not supported as a default browser`);\n\t}\n\n\tlet command;\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('--wait-apps');\n\t\t}\n\n\t\tif (options.background) {\n\t\t\tcliArguments.push('--background');\n\t\t}\n\n\t\tif (options.newInstance) {\n\t\t\tcliArguments.push('--new');\n\t\t}\n\n\t\tif (app) {\n\t\t\tcliArguments.push('-a', app);\n\t\t}\n\t} else if (platform === 'win32' || (isWsl && !isInsideContainer() && !app)) {\n\t\tconst mountPoint = await getWslDrivesMountPoint();\n\n\t\tcommand = isWsl\n\t\t\t? `${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe`\n\t\t\t: `${process.env.SYSTEMROOT || process.env.windir || 'C:\\\\Windows'}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n\n\t\tcliArguments.push(\n\t\t\t'-NoProfile',\n\t\t\t'-NonInteractive',\n\t\t\t'-ExecutionPolicy',\n\t\t\t'Bypass',\n\t\t\t'-EncodedCommand',\n\t\t);\n\n\t\tif (!isWsl) {\n\t\t\tchildProcessOptions.windowsVerbatimArguments = true;\n\t\t}\n\n\t\tconst encodedArguments = ['Start'];\n\n\t\tif (options.wait) {\n\t\t\tencodedArguments.push('-Wait');\n\t\t}\n\n\t\tif (app) {\n\t\t\t// Double quote with double quotes to ensure the inner quotes are passed through.\n\t\t\t// Inner quotes are delimited for PowerShell interpretation with backticks.\n\t\t\tencodedArguments.push(`\"\\`\"${app}\\`\"\"`);\n\t\t\tif (options.target) {\n\t\t\t\tappArguments.push(options.target);\n\t\t\t}\n\t\t} else if (options.target) {\n\t\t\tencodedArguments.push(`\"${options.target}\"`);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tappArguments = appArguments.map(argument => `\"\\`\"${argument}\\`\"\"`);\n\t\t\tencodedArguments.push('-ArgumentList', appArguments.join(','));\n\t\t}\n\n\t\t// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\t\toptions.target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n\t} else {\n\t\tif (app) {\n\t\t\tcommand = app;\n\t\t} else {\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n\t\t\tconst isBundled = !__dirname || __dirname === '/';\n\n\t\t\t// Check if local `xdg-open` exists and is executable.\n\t\t\tlet exeLocalXdgOpen = false;\n\t\t\ttry {\n\t\t\t\tawait fs.access(localXdgOpenPath, fsConstants.X_OK);\n\t\t\t\texeLocalXdgOpen = true;\n\t\t\t} catch {}\n\n\t\t\tconst useSystemXdgOpen = process.versions.electron\n\t\t\t\t?? (platform === 'android' || isBundled || !exeLocalXdgOpen);\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tif (platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\t// This has to come after `--args`.\n\tif (options.target) {\n\t\tcliArguments.push(options.target);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (!options.allowNonzeroExitCode && exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n\nconst open = (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\treturn baseOpen({\n\t\t...options,\n\t\ttarget,\n\t});\n};\n\nexport const openApp = (name, options) => {\n\tif (typeof name !== 'string' && !Array.isArray(name)) {\n\t\tthrow new TypeError('Expected a valid `name`');\n\t}\n\n\tconst {arguments: appArguments = []} = options ?? {};\n\tif (appArguments !== undefined && appArguments !== null && !Array.isArray(appArguments)) {\n\t\tthrow new TypeError('Expected `appArguments` as Array type');\n\t}\n\n\treturn baseOpen({\n\t\t...options,\n\t\tapp: {\n\t\t\tname,\n\t\t\targuments: appArguments,\n\t\t},\n\t});\n};\n\nfunction detectArchBinary(binary) {\n\tif (typeof binary === 'string' || Array.isArray(binary)) {\n\t\treturn binary;\n\t}\n\n\tconst {[arch]: archBinary} = binary;\n\n\tif (!archBinary) {\n\t\tthrow new Error(`${arch} is not supported`);\n\t}\n\n\treturn archBinary;\n}\n\nfunction detectPlatformBinary({[platform]: platformBinary}, {wsl}) {\n\tif (wsl && isWsl) {\n\t\treturn detectArchBinary(wsl);\n\t}\n\n\tif (!platformBinary) {\n\t\tthrow new Error(`${platform} is not supported`);\n\t}\n\n\treturn detectArchBinary(platformBinary);\n}\n\nexport const apps = {};\n\ndefineLazyProperty(apps, 'chrome', () => detectPlatformBinary({\n\tdarwin: 'google chrome',\n\twin32: 'chrome',\n\tlinux: ['google-chrome', 'google-chrome-stable', 'chromium'],\n}, {\n\twsl: {\n\t\tia32: '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe',\n\t\tx64: ['/mnt/c/Program Files/Google/Chrome/Application/chrome.exe', '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe'],\n\t},\n}));\n\ndefineLazyProperty(apps, 'firefox', () => detectPlatformBinary({\n\tdarwin: 'firefox',\n\twin32: 'C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe',\n\tlinux: 'firefox',\n}, {\n\twsl: '/mnt/c/Program Files/Mozilla Firefox/firefox.exe',\n}));\n\ndefineLazyProperty(apps, 'edge', () => detectPlatformBinary({\n\tdarwin: 'microsoft edge',\n\twin32: 'msedge',\n\tlinux: ['microsoft-edge', 'microsoft-edge-dev'],\n}, {\n\twsl: '/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe',\n}));\n\ndefineLazyProperty(apps, 'browser', () => 'browser');\n\ndefineLazyProperty(apps, 'browserPrivate', () => 'browserPrivate');\n\nexport default open;\n"
        },
        {
          "name": "index.test-d.ts",
          "type": "blob",
          "size": 0.4560546875,
          "content": "import {type ChildProcess} from 'node:child_process';\nimport {expectType} from 'tsd';\nimport open from './index.js';\n\nexpectType<Promise<ChildProcess>>(open('foo'));\nexpectType<Promise<ChildProcess>>(open('foo', {app: {\n\tname: 'bar',\n}}));\nexpectType<Promise<ChildProcess>>(open('foo', {app: {\n\tname: 'bar',\n\targuments: ['--arg'],\n}}));\nexpectType<Promise<ChildProcess>>(open('foo', {wait: true}));\nexpectType<Promise<ChildProcess>>(open('foo', {background: true}));\n"
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.0908203125,
          "content": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.111328125,
          "content": "{\n\t\"name\": \"open\",\n\t\"version\": \"10.1.0\",\n\t\"description\": \"Open stuff like URLs, files, executables. Cross-platform.\",\n\t\"license\": \"MIT\",\n\t\"repository\": \"sindresorhus/open\",\n\t\"funding\": \"https://github.com/sponsors/sindresorhus\",\n\t\"author\": {\n\t\t\"name\": \"Sindre Sorhus\",\n\t\t\"email\": \"sindresorhus@gmail.com\",\n\t\t\"url\": \"https://sindresorhus.com\"\n\t},\n\t\"type\": \"module\",\n\t\"exports\": {\n\t\t\"types\": \"./index.d.ts\",\n\t\t\"default\": \"./index.js\"\n\t},\n\t\"sideEffects\": false,\n\t\"engines\": {\n\t\t\"node\": \">=18\"\n\t},\n\t\"scripts\": {\n\t\t\"test\": \"xo && tsd\"\n\t},\n\t\"files\": [\n\t\t\"index.js\",\n\t\t\"index.d.ts\",\n\t\t\"xdg-open\"\n\t],\n\t\"keywords\": [\n\t\t\"app\",\n\t\t\"open\",\n\t\t\"opener\",\n\t\t\"opens\",\n\t\t\"launch\",\n\t\t\"start\",\n\t\t\"xdg-open\",\n\t\t\"xdg\",\n\t\t\"default\",\n\t\t\"cmd\",\n\t\t\"browser\",\n\t\t\"editor\",\n\t\t\"executable\",\n\t\t\"exe\",\n\t\t\"url\",\n\t\t\"urls\",\n\t\t\"arguments\",\n\t\t\"args\",\n\t\t\"spawn\",\n\t\t\"exec\",\n\t\t\"child\",\n\t\t\"process\",\n\t\t\"website\",\n\t\t\"file\"\n\t],\n\t\"dependencies\": {\n\t\t\"default-browser\": \"^5.2.1\",\n\t\t\"define-lazy-prop\": \"^3.0.0\",\n\t\t\"is-inside-container\": \"^1.0.0\",\n\t\t\"is-wsl\": \"^3.1.0\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@types/node\": \"^20.10.5\",\n\t\t\"ava\": \"^6.0.1\",\n\t\t\"tsd\": \"^0.30.1\",\n\t\t\"xo\": \"^0.56.0\"\n\t}\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 6.3896484375,
          "content": "# open\n\n> Open stuff like URLs, files, executables. Cross-platform.\n\nThis is meant to be used in command-line tools and scripts, not in the browser.\n\nIf you need this for Electron, use [`shell.openPath()`](https://www.electronjs.org/docs/api/shell#shellopenpathpath) instead.\n\nThis package does not make any security guarantees. If you pass in untrusted input, it's up to you to properly sanitize it.\n\n#### Why?\n\n- Actively maintained.\n- Supports app arguments.\n- Safer as it uses `spawn` instead of `exec`.\n- Fixes most of the original `node-open` issues.\n- Includes the latest [`xdg-open` script](https://gitlab.freedesktop.org/xdg/xdg-utils/-/blob/master/scripts/xdg-open.in) for Linux.\n- Supports WSL paths to Windows apps.\n\n## Install\n\n```sh\nnpm install open\n```\n\n**Warning:** This package is native [ESM](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) and no longer provides a CommonJS export. If your project uses CommonJS, you will have to [convert to ESM](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c) or use the [dynamic `import()`](https://v8.dev/features/dynamic-import) function. Please don't open issues for questions regarding CommonJS / ESM.\n\n## Usage\n\n```js\nimport open, {openApp, apps} from 'open';\n\n// Opens the image in the default image viewer and waits for the opened app to quit.\nawait open('unicorn.png', {wait: true});\nconsole.log('The image viewer app quit');\n\n// Opens the URL in the default browser.\nawait open('https://sindresorhus.com');\n\n// Opens the URL in a specified browser.\nawait open('https://sindresorhus.com', {app: {name: 'firefox'}});\n\n// Specify app arguments.\nawait open('https://sindresorhus.com', {app: {name: 'google chrome', arguments: ['--incognito']}});\n\n// Opens the URL in the default browser in incognito mode.\nawait open('https://sindresorhus.com', {app: {name: apps.browserPrivate}});\n\n// Open an app.\nawait openApp('xcode');\n\n// Open an app with arguments.\nawait openApp(apps.chrome, {arguments: ['--incognito']});\n```\n\n## API\n\nIt uses the command `open` on macOS, `start` on Windows and `xdg-open` on other platforms.\n\n### open(target, options?)\n\nReturns a promise for the [spawned child process](https://nodejs.org/api/child_process.html#child_process_class_childprocess). You would normally not need to use this for anything, but it can be useful if you'd like to attach custom event listeners or perform other operations directly on the spawned process.\n\n#### target\n\nType: `string`\n\nThe thing you want to open. Can be a URL, file, or executable.\n\nOpens in the default app for the file type. For example, URLs opens in your default browser.\n\n#### options\n\nType: `object`\n\n##### wait\n\nType: `boolean`\\\nDefault: `false`\n\nWait for the opened app to exit before fulfilling the promise. If `false` it's fulfilled immediately when opening the app.\n\nNote that it waits for the app to exit, not just for the window to close.\n\nOn Windows, you have to explicitly specify an app for it to be able to wait.\n\n##### background <sup>(macOS only)</sup>\n\nType: `boolean`\\\nDefault: `false`\n\nDo not bring the app to the foreground.\n\n##### newInstance <sup>(macOS only)</sup>\n\nType: `boolean`\\\nDefault: `false`\n\nOpen a new instance of the app even it's already running.\n\nA new instance is always opened on other platforms.\n\n##### app\n\nType: `{name: string | string[], arguments?: string[]} | Array<{name: string | string[], arguments: string[]}>`\n\nSpecify the `name` of the app to open the `target` with, and optionally, app `arguments`. `app` can be an array of apps to try to open and `name` can be an array of app names to try. If each app fails, the last error will be thrown.\n\nThe app name is platform dependent. Don't hard code it in reusable modules. For example, Chrome is `google chrome` on macOS, `google-chrome` on Linux and `chrome` on Windows. If possible, use [`apps`](#apps) which auto-detects the correct binary to use.\n\nYou may also pass in the app's full path. For example on WSL, this can be `/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe` for the Windows installation of Chrome.\n\nThe app `arguments` are app dependent. Check the app's documentation for what arguments it accepts.\n\n##### allowNonzeroExitCode\n\nType: `boolean`\\\nDefault: `false`\n\nAllow the opened app to exit with nonzero exit code when the `wait` option is `true`.\n\nWe do not recommend setting this option. The convention for success is exit code zero.\n\n### openApp(name, options?)\n\nOpen an app.\n\nReturns a promise for the [spawned child process](https://nodejs.org/api/child_process.html#child_process_class_childprocess). You would normally not need to use this for anything, but it can be useful if you'd like to attach custom event listeners or perform other operations directly on the spawned process.\n\n#### name\n\nType: `string`\n\nThe app name is platform dependent. Don't hard code it in reusable modules. For example, Chrome is `google chrome` on macOS, `google-chrome` on Linux and `chrome` on Windows. If possible, use [`apps`](#apps) which auto-detects the correct binary to use.\n\nYou may also pass in the app's full path. For example on WSL, this can be `/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe` for the Windows installation of Chrome.\n\n#### options\n\nType: `object`\n\nSame options as [`open`](#options) except `app` and with the following additions:\n\n##### arguments\n\nType: `string[]`\\\nDefault: `[]`\n\nArguments passed to the app.\n\nThese arguments are app dependent. Check the app's documentation for what arguments it accepts.\n\n### apps\n\nAn object containing auto-detected binary names for common apps. Useful to work around [cross-platform differences](#app).\n\n```js\nimport open, {apps} from 'open';\n\nawait open('https://google.com', {\n\tapp: {\n\t\tname: apps.chrome\n\t}\n});\n```\n\n`browser` and `browserPrivate` can also be used to access the user's default browser through [`default-browser`](https://github.com/sindresorhus/default-browser).\n\n#### Supported apps\n\n- [`chrome`](https://www.google.com/chrome) - Web browser\n- [`firefox`](https://www.mozilla.org/firefox) - Web browser\n- [`edge`](https://www.microsoft.com/edge) - Web browser\n- `browser` - Default web browser\n- `browserPrivate` - Default web browser in incognito mode\n\n`browser` and `browserPrivate` only supports `chrome`, `firefox`, and `edge`.\n\n## Related\n\n- [open-cli](https://github.com/sindresorhus/open-cli) - CLI for this module\n- [open-editor](https://github.com/sindresorhus/open-editor) - Open files in your editor at a specific line and column\n"
        },
        {
          "name": "test.js",
          "type": "blob",
          "size": 3.478515625,
          "content": "import test from 'ava';\nimport open, {openApp, apps} from './index.js';\n\n// Tests only checks that opening doesn't return an error\n// it has no way make sure that it actually opened anything.\n\n// These have to be manually verified.\n\ntest('open file in default app', async t => {\n\tawait t.notThrowsAsync(open('index.js'));\n});\n\ntest('wait for the app to close if wait: true', async t => {\n\tawait t.notThrowsAsync(open('https://sindresorhus.com', {wait: true}));\n});\n\ntest('encode URL if url: true', async t => {\n\tawait t.notThrowsAsync(open('https://sindresorhus.com', {url: true}));\n});\n\ntest('open URL in default app', async t => {\n\tawait t.notThrowsAsync(open('https://sindresorhus.com'));\n});\n\ntest('open URL in specified app', async t => {\n\tawait t.notThrowsAsync(open('https://sindresorhus.com', {app: {name: apps.chrome}}));\n});\n\ntest('open URL in specified app with arguments', async t => {\n\tawait t.notThrowsAsync(async () => {\n\t\tconst process_ = await open('https://sindresorhus.com', {app: {name: apps.chrome, arguments: ['--incognito']}});\n\t\tt.deepEqual(process_.spawnargs, ['open', '-a', apps.chrome, 'https://sindresorhus.com', '--args', '--incognito']);\n\t});\n});\n\ntest('return the child process when called', async t => {\n\tconst childProcess = await open('index.js');\n\tt.true('stdout' in childProcess);\n});\n\ntest('open URL with query strings', async t => {\n\tawait t.notThrowsAsync(open('https://sindresorhus.com/?abc=123&def=456'));\n});\n\ntest('open URL with a fragment', async t => {\n\tawait t.notThrowsAsync(open('https://sindresorhus.com#projects'));\n});\n\ntest('open URL with query strings and spaces', async t => {\n\tawait t.notThrowsAsync(open('https://sindresorhus.com/?abc=123&def=456&ghi=with spaces'));\n});\n\ntest('open URL with query strings and a fragment', async t => {\n\tawait t.notThrowsAsync(open('https://sindresorhus.com/?abc=123&def=456#projects'));\n});\n\ntest('open URL with query strings and pipes', async t => {\n\tawait t.notThrowsAsync(open('https://sindresorhus.com/?abc=123&def=456&ghi=w|i|t|h'));\n});\n\ntest('open URL with query strings, spaces, pipes and a fragment', async t => {\n\tawait t.notThrowsAsync(open('https://sindresorhus.com/?abc=123&def=456&ghi=w|i|t|h spaces#projects'));\n});\n\ntest('open URL with query strings and URL reserved characters', async t => {\n\tawait t.notThrowsAsync(open('https://httpbin.org/get?amp=%26&colon=%3A&comma=%2C&commat=%40&dollar=%24&equals=%3D&plus=%2B&quest=%3F&semi=%3B&sol=%2F'));\n});\n\ntest('open URL with query strings and URL reserved characters with `url` option', async t => {\n\tawait t.notThrowsAsync(open('https://httpbin.org/get?amp=%26&colon=%3A&comma=%2C&commat=%40&dollar=%24&equals=%3D&plus=%2B&quest=%3F&semi=%3B&sol=%2F', {url: true}));\n});\n\ntest('open Firefox without arguments', async t => {\n\tawait t.notThrowsAsync(openApp(apps.firefox));\n});\n\ntest('open Chrome in incognito mode', async t => {\n\tawait t.notThrowsAsync(openApp(apps.chrome, {arguments: ['--incognito'], newInstance: true}));\n});\n\ntest('open URL with default browser argument', async t => {\n\tawait t.notThrowsAsync(open('https://sindresorhus.com', {app: {name: apps.browser}}));\n});\n\ntest('open URL with default browser in incognito mode', async t => {\n\tawait t.notThrowsAsync(open('https://sindresorhus.com', {app: {name: apps.browserPrivate}}));\n});\n\ntest('open default browser', async t => {\n\tawait t.notThrowsAsync(openApp(apps.browser, {newInstance: true}));\n});\n\ntest('open default browser in incognito mode', async t => {\n\tawait t.notThrowsAsync(openApp(apps.browserPrivate, {newInstance: true}));\n});\n"
        },
        {
          "name": "xdg-open",
          "type": "blob",
          "size": 31.65625,
          "content": "#!/bin/sh\n#---------------------------------------------\n#   xdg-open\n#\n#   Utility script to open a URL in the registered default application.\n#\n#   Refer to the usage() function below for usage.\n#\n#   Copyright 2009-2010, Fathi Boudra <fabo@freedesktop.org>\n#   Copyright 2009-2016, Rex Dieter <rdieter@fedoraproject.org>\n#   Copyright 2006, Kevin Krammer <kevin.krammer@gmx.at>\n#   Copyright 2006, Jeremy White <jwhite@codeweavers.com>\n#\n#   LICENSE:\n#\n#   Permission is hereby granted, free of charge, to any person obtaining a\n#   copy of this software and associated documentation files (the \"Software\"),\n#   to deal in the Software without restriction, including without limitation\n#   the rights to use, copy, modify, merge, publish, distribute, sublicense,\n#   and/or sell copies of the Software, and to permit persons to whom the\n#   Software is furnished to do so, subject to the following conditions:\n#\n#   The above copyright notice and this permission notice shall be included\n#   in all copies or substantial portions of the Software.\n#\n#   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n#   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n#   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n#   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n#   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n#   OTHER DEALINGS IN THE SOFTWARE.\n#\n#---------------------------------------------\n\nmanualpage()\n{\ncat << '_MANUALPAGE'\nName\n\n   xdg-open -- opens a file or URL in the user's preferred\n   application\n\nSynopsis\n\n   xdg-open { file | URL }\n\n   xdg-open { --help | --manual | --version }\n\nDescription\n\n   xdg-open opens a file or URL in the user's preferred\n   application. If a URL is provided the URL will be opened in the\n   user's preferred web browser. If a file is provided the file\n   will be opened in the preferred application for files of that\n   type. xdg-open supports file, ftp, http and https URLs.\n\n   xdg-open is for use inside a desktop session only. It is not\n   recommended to use xdg-open as root.\n\n   As xdg-open can not handle arguments that begin with a \"-\" it\n   is recommended to pass filepaths in one of the following ways:\n     * Pass absolute paths, i.e. by using realpath as a\n       preprocessor.\n     * Prefix known relative filepaths with a \"./\". For example\n       using sed -E 's|^[^/]|./\\0|'.\n     * Pass a file URL.\n\nOptions\n\n   --help\n          Show command synopsis.\n\n   --manual\n          Show this manual page.\n\n   --version\n          Show the xdg-utils version information.\n\nExit Codes\n\n   An exit code of 0 indicates success while a non-zero exit code\n   indicates failure. The following failure codes can be returned:\n\n   1\n          Error in command line syntax.\n\n   2\n          One of the files passed on the command line did not\n          exist.\n\n   3\n          A required tool could not be found.\n\n   4\n          The action failed.\n\n   In case of success the process launched from the .desktop file\n   will not be forked off and therefore may result in xdg-open\n   running for a very long time. This behaviour intentionally\n   differs from most desktop specific openers to allow terminal\n   based applications to run using the same terminal xdg-open was\n   called from.\n\nReporting Issues\n\n   Please keep in mind xdg-open inherits most of the flaws of its\n   configuration and the underlying opener.\n\n   In case the command xdg-mime query default \"$(xdg-mime query\n   filetype path/to/troublesome_file)\" names the program\n   responsible for any unexpected behaviour you can fix that by\n   setting a different handler. (If the program is broken let the\n   developers know)\n\n   Also see the security note on xdg-mime(1) for the default\n   subcommand.\n\n   If a flaw is reproducible using the desktop specific opener\n   (and isn't a configuration issue): Please report to whoever is\n   responsible for that first (reporting to xdg-utils is better\n   than not reporting at all, but since the xdg-utils are\n   maintained in very little spare time a fix will take much\n   longer)\n\n   In case an issue specific to xdg-open please report it to\n   https://gitlab.freedesktop.org/xdg/xdg-utils/-/issues .\n\nSee Also\n\n   xdg-mime(1), xdg-settings(1), MIME applications associations\n   specification\n\nExamples\n\nxdg-open 'http://www.freedesktop.org/'\n\n   Opens the freedesktop.org website in the user's default\n   browser.\n\nxdg-open /tmp/foobar.png\n\n   Opens the PNG image file /tmp/foobar.png in the user's default\n   image viewing application.\n_MANUALPAGE\n}\n\nusage()\n{\ncat << '_USAGE'\n   xdg-open -- opens a file or URL in the user's preferred\n   application\n\nSynopsis\n\n   xdg-open { file | URL }\n\n   xdg-open { --help | --manual | --version }\n\n_USAGE\n}\n\n#@xdg-utils-common@\n#----------------------------------------------------------------------------\n#   Common utility functions included in all XDG wrapper scripts\n#----------------------------------------------------------------------------\n\n#shellcheck shell=sh\n\nDEBUG()\n{\n  [ -z \"${XDG_UTILS_DEBUG_LEVEL}\" ] && return 0;\n  [ \"${XDG_UTILS_DEBUG_LEVEL}\" -lt \"$1\" ] && return 0;\n  shift\n  echo \"$@\" >&2\n}\n\n# This handles backslashes but not quote marks.\nfirst_word()\n{\n    # shellcheck disable=SC2162 # No -r is intended here\n    read first rest\n    echo \"$first\"\n}\n\n#-------------------------------------------------------------\n# map a binary to a .desktop file\nbinary_to_desktop_file()\n{\n    search=\"${XDG_DATA_HOME:-$HOME/.local/share}:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}\"\n    binary=\"$(command -v \"$1\")\"\n    binary=\"$(xdg_realpath \"$binary\")\"\n    base=\"$(basename \"$binary\")\"\n    IFS=:\n    for dir in $search; do\n        unset IFS\n        [ \"$dir\" ] || continue\n        [ -d \"$dir/applications\" ] || [ -d \"$dir/applnk\" ] || continue\n        for file in \"$dir\"/applications/*.desktop \"$dir\"/applications/*/*.desktop \"$dir\"/applnk/*.desktop \"$dir\"/applnk/*/*.desktop; do\n            [ -r \"$file\" ] || continue\n            # Check to make sure it's worth the processing.\n            grep -q \"^Exec.*$base\" \"$file\" || continue\n            # Make sure it's a visible desktop file (e.g. not \"preferred-web-browser.desktop\").\n            grep -Eq \"^(NoDisplay|Hidden)=true\" \"$file\" && continue\n            command=\"$(grep -E \"^Exec(\\[[^]=]*])?=\" \"$file\" | cut -d= -f 2- | first_word)\"\n            command=\"$(command -v \"$command\")\"\n            if [ x\"$(xdg_realpath \"$command\")\" = x\"$binary\" ]; then\n                # Fix any double slashes that got added path composition\n                echo \"$file\" | tr -s /\n                return\n            fi\n        done\n    done\n}\n\n#-------------------------------------------------------------\n# map a .desktop file to a binary\ndesktop_file_to_binary()\n{\n    search=\"${XDG_DATA_HOME:-$HOME/.local/share}:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}\"\n    desktop=\"$(basename \"$1\")\"\n    IFS=:\n    for dir in $search; do\n        unset IFS\n        [ \"$dir\" ] && [ -d \"$dir/applications\" ] || [ -d \"$dir/applnk\" ] || continue\n        # Check if desktop file contains -\n        if [ \"${desktop#*-}\" != \"$desktop\" ]; then\n            vendor=${desktop%-*}\n            app=${desktop#*-}\n            if [ -r \"$dir/applications/$vendor/$app\" ]; then\n                file_path=\"$dir/applications/$vendor/$app\"\n            elif [ -r \"$dir/applnk/$vendor/$app\" ]; then\n                file_path=\"$dir/applnk/$vendor/$app\"\n            fi\n        fi\n        if test -z \"$file_path\" ; then\n            for indir in \"$dir\"/applications/ \"$dir\"/applications/*/ \"$dir\"/applnk/ \"$dir\"/applnk/*/; do\n                file=\"$indir/$desktop\"\n                if [ -r \"$file\" ]; then\n                    file_path=$file\n                    break\n                fi\n            done\n        fi\n        if [ -r \"$file_path\" ]; then\n            # Remove any arguments (%F, %f, %U, %u, etc.).\n            command=\"$(grep -E \"^Exec(\\[[^]=]*])?=\" \"$file_path\" | cut -d= -f 2- | first_word)\"\n            command=\"$(command -v \"$command\")\"\n            xdg_realpath \"$command\"\n            return\n        fi\n    done\n}\n\n#-------------------------------------------------------------\n# Exit script on successfully completing the desired operation\n\n# shellcheck disable=SC2120 # It is okay to call this without arguments\nexit_success()\n{\n    if [ $# -gt 0 ]; then\n        echo \"$*\"\n        echo\n    fi\n\n    exit 0\n}\n\n\n#-----------------------------------------\n# Exit script on malformed arguments, not enough arguments\n# or missing required option.\n# prints usage information\n\nexit_failure_syntax()\n{\n    if [ $# -gt 0 ]; then\n        echo \"xdg-open: $*\" >&2\n        echo \"Try 'xdg-open --help' for more information.\" >&2\n    else\n        usage\n        echo \"Use 'man xdg-open' or 'xdg-open --manual' for additional info.\"\n    fi\n\n    exit 1\n}\n\n#-------------------------------------------------------------\n# Exit script on missing file specified on command line\n\nexit_failure_file_missing()\n{\n    if [ $# -gt 0 ]; then\n        echo \"xdg-open: $*\" >&2\n    fi\n\n    exit 2\n}\n\n#-------------------------------------------------------------\n# Exit script on failure to locate necessary tool applications\n\nexit_failure_operation_impossible()\n{\n    if [ $# -gt 0 ]; then\n        echo \"xdg-open: $*\" >&2\n    fi\n\n    exit 3\n}\n\n#-------------------------------------------------------------\n# Exit script on failure returned by a tool application\n\nexit_failure_operation_failed()\n{\n    if [ $# -gt 0 ]; then\n        echo \"xdg-open: $*\" >&2\n    fi\n\n    exit 4\n}\n\n#------------------------------------------------------------\n# Exit script on insufficient permission to read a specified file\n\nexit_failure_file_permission_read()\n{\n    if [ $# -gt 0 ]; then\n        echo \"xdg-open: $*\" >&2\n    fi\n\n    exit 5\n}\n\n#------------------------------------------------------------\n# Exit script on insufficient permission to write a specified file\n\nexit_failure_file_permission_write()\n{\n    if [ $# -gt 0 ]; then\n        echo \"xdg-open: $*\" >&2\n    fi\n\n    exit 6\n}\n\ncheck_input_file()\n{\n    if [ ! -e \"$1\" ]; then\n        exit_failure_file_missing \"file '$1' does not exist\"\n    fi\n    if [ ! -r \"$1\" ]; then\n        exit_failure_file_permission_read \"no permission to read file '$1'\"\n    fi\n}\n\ncheck_vendor_prefix()\n{\n    file_label=\"$2\"\n    [ -n \"$file_label\" ] || file_label=\"filename\"\n    file=\"$(basename \"$1\")\"\n    case \"$file\" in\n       [[:alpha:]]*-*)\n         return\n         ;;\n    esac\n\n    echo \"xdg-open: $file_label '$file' does not have a proper vendor prefix\" >&2\n    echo 'A vendor prefix consists of alpha characters ([a-zA-Z]) and is terminated' >&2\n    echo 'with a dash (\"-\"). An example '\"$file_label\"' is '\"'example-$file'\" >&2\n    echo \"Use --novendor to override or 'xdg-open --manual' for additional info.\" >&2\n    exit 1\n}\n\ncheck_output_file()\n{\n    # if the file exists, check if it is writeable\n    # if it does not exists, check if we are allowed to write on the directory\n    if [ -e \"$1\" ]; then\n        if [ ! -w \"$1\" ]; then\n            exit_failure_file_permission_write \"no permission to write to file '$1'\"\n        fi\n    else\n        DIR=\"$(dirname \"$1\")\"\n        if [ ! -w \"$DIR\" ] || [ ! -x \"$DIR\" ]; then\n            exit_failure_file_permission_write \"no permission to create file '$1'\"\n        fi\n    fi\n}\n\n#----------------------------------------\n# Checks for shared commands, e.g. --help\n\ncheck_common_commands()\n{\n    while [ $# -gt 0 ] ; do\n        parm=\"$1\"\n        shift\n\n        case \"$parm\" in\n            --help)\n            usage\n            echo \"Use 'man xdg-open' or 'xdg-open --manual' for additional info.\"\n            exit_success\n            ;;\n\n            --manual)\n            manualpage\n            exit_success\n            ;;\n\n            --version)\n            echo \"xdg-open 1.2.1\"\n            exit_success\n            ;;\n\n            --)\n\t        [ -z \"$XDG_UTILS_ENABLE_DOUBLE_HYPEN\" ] || break\n\t        ;;\n        esac\n    done\n}\n\ncheck_common_commands \"$@\"\n\n[ -z \"${XDG_UTILS_DEBUG_LEVEL}\" ] && unset XDG_UTILS_DEBUG_LEVEL;\n# shellcheck disable=SC2034\nif [ \"${XDG_UTILS_DEBUG_LEVEL-0}\" -lt 1 ]; then\n    # Be silent\n    xdg_redirect_output=\" > /dev/null 2> /dev/null\"\nelse\n    # All output to stderr\n    xdg_redirect_output=\" >&2\"\nfi\n\n#--------------------------------------\n# Checks for known desktop environments\n# set variable DE to the desktop environments name, lowercase\n\ndetectDE()\n{\n    # see https://bugs.freedesktop.org/show_bug.cgi?id=34164\n    unset GREP_OPTIONS\n\n    if [ -n \"${XDG_CURRENT_DESKTOP}\" ]; then\n      case \"${XDG_CURRENT_DESKTOP}\" in\n         # only recently added to menu-spec, pre-spec X- still in use\n         Cinnamon|X-Cinnamon)\n           DE=cinnamon;\n           ;;\n         ENLIGHTENMENT)\n           DE=enlightenment;\n           ;;\n         # GNOME, GNOME-Classic:GNOME, or GNOME-Flashback:GNOME\n         GNOME*)\n           DE=gnome;\n           ;;\n         KDE)\n           DE=kde;\n           ;;\n         DEEPIN|Deepin|deepin)\n           DE=deepin;\n           ;;\n         LXDE)\n           DE=lxde;\n           ;;\n         LXQt)\n           DE=lxqt;\n           ;;\n         MATE)\n           DE=mate;\n           ;;\n         XFCE)\n           DE=xfce\n           ;;\n         X-Generic)\n           DE=generic\n           ;;\n      esac\n    fi\n\n    # shellcheck disable=SC2153\n    if [ -z \"$DE\" ]; then\n      # classic fallbacks\n      if [ -n \"$KDE_FULL_SESSION\" ]; then DE=kde;\n      elif [ -n \"$GNOME_DESKTOP_SESSION_ID\" ]; then DE=gnome;\n      elif [ -n \"$MATE_DESKTOP_SESSION_ID\" ]; then DE=mate;\n      elif dbus-send --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.GetNameOwner string:org.gnome.SessionManager > /dev/null 2>&1 ; then DE=gnome;\n      elif xprop -root _DT_SAVE_MODE 2> /dev/null | grep ' = \\\"xfce4\\\"$' >/dev/null 2>&1; then DE=xfce;\n      elif xprop -root 2> /dev/null | grep -i '^xfce_desktop_window' >/dev/null 2>&1; then DE=xfce\n      elif echo \"$DESKTOP\" | grep -q '^Enlightenment'; then DE=enlightenment;\n      elif [ -n \"$LXQT_SESSION_CONFIG\" ]; then DE=lxqt;\n      fi\n    fi\n\n    if [ -z \"$DE\" ]; then\n      # fallback to checking $DESKTOP_SESSION\n      case \"$DESKTOP_SESSION\" in\n         gnome)\n           DE=gnome;\n           ;;\n         LXDE|Lubuntu)\n           DE=lxde;\n           ;;\n         MATE)\n           DE=mate;\n           ;;\n         xfce|xfce4|'Xfce Session')\n           DE=xfce;\n           ;;\n      esac\n    fi\n\n    if [ -z \"$DE\" ]; then\n      # fallback to uname output for other platforms\n      case \"$(uname 2>/dev/null)\" in\n        CYGWIN*)\n          DE=cygwin;\n          ;;\n        Darwin)\n          DE=darwin;\n          ;;\n        Linux)\n          grep -q microsoft /proc/version > /dev/null 2>&1 && \\\n          command -v explorer.exe > /dev/null 2>&1 && \\\n          DE=wsl;\n          ;;\n      esac\n    fi\n\n    if [ x\"$DE\" = x\"gnome\" ]; then\n      # gnome-default-applications-properties is only available in GNOME 2.x\n      # but not in GNOME 3.x\n      command -v gnome-default-applications-properties > /dev/null || DE=\"gnome3\"\n    fi\n\n    if [ -f \"$XDG_RUNTIME_DIR/flatpak-info\" ]; then\n      DE=\"flatpak\"\n    fi\n}\n\n#----------------------------------------------------------------------------\n# kfmclient exec/openURL can give bogus exit value in KDE <= 3.5.4\n# It also always returns 1 in KDE 3.4 and earlier\n# Simply return 0 in such case\n\nkfmclient_fix_exit_code()\n{\n    version=\"$(LC_ALL=C.UTF-8 kde-config --version 2>/dev/null | grep '^KDE')\"\n    major=\"$(echo \"$version\" | sed 's/KDE.*: \\([0-9]\\).*/\\1/')\"\n    minor=\"$(echo \"$version\" | sed 's/KDE.*: [0-9]*\\.\\([0-9]\\).*/\\1/')\"\n    release=\"$(echo \"$version\" | sed 's/KDE.*: [0-9]*\\.[0-9]*\\.\\([0-9]\\).*/\\1/')\"\n    test \"$major\" -gt 3 && return \"$1\"\n    test \"$minor\" -gt 5 && return \"$1\"\n    test \"$release\" -gt 4 && return \"$1\"\n    return 0\n}\n\n#----------------------------------------------------------------------------\n# Returns true if there is a graphical display attached.\n\nhas_display()\n{\n    if [ -n \"$DISPLAY\" ] || [ -n \"$WAYLAND_DISPLAY\" ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n#----------------------------------------------------------------------------\n# Prefixes a path with a \"./\" if it starts with a \"-\".\n# This is useful for programs to not confuse paths with options.\n\nunoption_path()\n{\n\tcase \"$1\" in\n\t\t-*)\n\t\t\tprintf \"./%s\" \"$1\" ;;\n\t\t*)\n\t\t\tprintf \"%s\" \"$1\" ;;\n\tesac\n}\n\n#----------------------------------------------------------------------------\n# Performs a symlink and relative path resolving for a single argument.\n# This will always fail if the given file does not exist!\n\nxdg_realpath()\n{\n\t# allow caching and external configuration\n\tif [ -z \"$XDG_UTILS_REALPATH_BACKEND\" ] ; then\n\t\tif command -v realpath >/dev/null 2>/dev/null ; then\n\t\t\tlines=\"$(realpath -- / 2>&1)\"\n\t\t\tif [ $? = 0 ] && [ \"$lines\" = \"/\" ] ; then\n\t\t\t\tXDG_UTILS_REALPATH_BACKEND=\"realpath\"\n\t\t\telse\n\t\t\t\t# The realpath took the -- literally, probably the busybox implementation\n\t\t\t\tXDG_UTILS_REALPATH_BACKEND=\"busybox-realpath\"\n\t\t\tfi\n\t\t\tunset lines\n\t\telif command -v readlink >/dev/null 2>/dev/null ; then\n\t\t\tXDG_UTILS_REALPATH_BACKEND=\"readlink\"\n\t\telse\n\t\t\texit_failure_operation_failed \"No usable realpath backend found. Have a realpath binary or a readlink -f that canonicalizes paths.\"\n\t\tfi\n\tfi\n\t# Always fail if the file doesn't exist (busybox realpath does that for example)\n\t[ -e \"$1\" ] || return 1\n\tcase \"$XDG_UTILS_REALPATH_BACKEND\" in\n\t\trealpath)\n\t\t\trealpath -- \"$1\"\n\t\t\t;;\n\t\tbusybox-realpath)\n\t\t\t# busybox style realpath implementations have options too\n\t\t\trealpath \"$(unoption_path \"$1\")\"\n\t\t\t;;\n\t\treadlink)\n\t\t\treadlink -f \"$(unoption_path \"$1\")\"\n\t\t\t;;\n\t\t*)\n\t\t\texit_failure_operation_impossible \"Realpath backend '$XDG_UTILS_REALPATH_BACKEND' not recognized.\"\n\t\t\t;;\n\tesac\n}\n\n# This handles backslashes but not quote marks.\nlast_word()\n{\n    # Backslash handling is intended, not using `first` too\n    # shellcheck disable=SC2162,SC2034\n    read first rest\n    echo \"$rest\"\n}\n\n# Get the value of a key in a desktop file's Desktop Entry group.\n# Example: Use get_key foo.desktop Exec\n# to get the values of the Exec= key for the Desktop Entry group.\nget_key()\n{\n    local file=\"${1}\"\n    local key=\"${2}\"\n    local desktop_entry=\"\"\n\n    IFS_=\"${IFS}\"\n    IFS=\"\"\n    # No backslash handling here, first_word and last_word do that\n    while read -r line\n    do\n        case \"$line\" in\n            \"[Desktop Entry]\")\n                desktop_entry=\"y\"\n            ;;\n            # Reset match flag for other groups\n            \"[\"*)\n                desktop_entry=\"\"\n            ;;\n            \"${key}=\"*)\n                # Only match Desktop Entry group\n                if [ -n \"${desktop_entry}\" ]\n                then\n                    echo \"${line}\" | cut -d= -f 2-\n                fi\n        esac\n    done < \"${file}\"\n    IFS=\"${IFS_}\"\n}\n\nhas_url_scheme()\n{\n\techo \"$1\" | LC_ALL=C grep -Eq '^[[:alpha:]][[:alpha:][:digit:]+\\.\\-]*:'\n}\n\n# Returns true if argument is a file:// URL or path\nis_file_url_or_path()\n{\n    if echo \"$1\" | grep -q '^file://' || ! has_url_scheme \"$1\" ; then\n        return 0\n    else\n        return 1\n    fi\n}\n\nget_hostname() {\n    if [ -z \"$HOSTNAME\" ]; then\n        if command -v hostname > /dev/null; then\n            HOSTNAME=$(hostname)\n        else\n            HOSTNAME=$(uname -n)\n        fi\n    fi\n}\n\n# If argument is a file URL, convert it to a (percent-decoded) path.\n# If not, leave it as it is.\nfile_url_to_path()\n{\n    local file=\"$1\"\n    get_hostname\n    if echo \"$file\" | grep -q '^file://'; then\n        file=${file#file://localhost}\n        file=${file#file://\"$HOSTNAME\"}\n        file=${file#file://}\n        if ! echo \"$file\" | grep -q '^/'; then\n            echo \"$file\"\n            return\n        fi\n        file=${file%%#*}\n        file=${file%%\\?*}\n        local printf=printf\n        if [ -x /usr/bin/printf ]; then\n            printf=/usr/bin/printf\n        fi\n        file=$($printf \"$(echo \"$file\" | sed -e 's@%\\([a-f0-9A-F]\\{2\\}\\)@\\\\x\\1@g')\")\n    fi\n    echo \"$file\"\n}\n\nopen_cygwin()\n{\n    cygstart \"$1\"\n\n    if [ $? -eq 0 ]; then\n        exit_success\n    else\n        exit_failure_operation_failed\n    fi\n}\n\nopen_darwin()\n{\n    open \"$1\"\n\n    if [ $? -eq 0 ]; then\n        exit_success\n    else\n        exit_failure_operation_failed\n    fi\n}\n\nopen_kde()\n{\n    if [ -n \"${KDE_SESSION_VERSION}\" ]; then\n      case \"${KDE_SESSION_VERSION}\" in\n        4)\n          kde-open \"$1\"\n        ;;\n        5)\n          \"kde-open${KDE_SESSION_VERSION}\" \"$1\"\n        ;;\n        6)\n          kde-open \"$1\"\n        ;;\n      esac\n    else\n        kfmclient exec \"$1\"\n        kfmclient_fix_exit_code $?\n    fi\n\n    if [ $? -eq 0 ]; then\n        exit_success\n    else\n        exit_failure_operation_failed\n    fi\n}\n\nopen_deepin()\n{\n    if dde-open -version >/dev/null 2>&1; then\n        dde-open \"$1\"\n    else\n        open_generic \"$1\"\n    fi\n\n    if [ $? -eq 0 ]; then\n        exit_success\n    else\n        exit_failure_operation_failed\n    fi\n}\n\nopen_gnome3()\n{\n    if gio help open 2>/dev/null 1>&2; then\n        gio open \"$1\"\n    elif gvfs-open --help 2>/dev/null 1>&2; then\n        gvfs-open \"$1\"\n    else\n        open_generic \"$1\"\n    fi\n\n    if [ $? -eq 0 ]; then\n        exit_success\n    else\n        exit_failure_operation_failed\n    fi\n}\n\nopen_gnome()\n{\n    if gio help open 2>/dev/null 1>&2; then\n        gio open \"$1\"\n    elif gvfs-open --help 2>/dev/null 1>&2; then\n        gvfs-open \"$1\"\n    elif gnome-open --help 2>/dev/null 1>&2; then\n        gnome-open \"$1\"\n    else\n        open_generic \"$1\"\n    fi\n\n    if [ $? -eq 0 ]; then\n        exit_success\n    else\n        exit_failure_operation_failed\n    fi\n}\n\nopen_mate()\n{\n    if gio help open 2>/dev/null 1>&2; then\n        gio open \"$1\"\n    elif gvfs-open --help 2>/dev/null 1>&2; then\n        gvfs-open \"$1\"\n    elif mate-open --help 2>/dev/null 1>&2; then\n        mate-open \"$1\"\n    else\n        open_generic \"$1\"\n    fi\n\n    if [ $? -eq 0 ]; then\n        exit_success\n    else\n        exit_failure_operation_failed\n    fi\n}\n\nopen_xfce()\n{\n    if exo-open --help 2>/dev/null 1>&2; then\n        exo-open \"$1\"\n    elif gio help open 2>/dev/null 1>&2; then\n        gio open \"$1\"\n    elif gvfs-open --help 2>/dev/null 1>&2; then\n        gvfs-open \"$1\"\n    else\n        open_generic \"$1\"\n    fi\n\n    if [ $? -eq 0 ]; then\n        exit_success\n    else\n        exit_failure_operation_failed\n    fi\n}\n\nopen_enlightenment()\n{\n    if enlightenment_open --help 2>/dev/null 1>&2; then\n        enlightenment_open \"$1\"\n    else\n        open_generic \"$1\"\n    fi\n\n    if [ $? -eq 0 ]; then\n        exit_success\n    else\n        exit_failure_operation_failed\n    fi\n}\n\nopen_flatpak()\n{\n    if is_file_url_or_path \"$1\"; then\n        local file\n        file=\"$(file_url_to_path \"$1\")\"\n\n        check_input_file \"$file\"\n\n        gdbus call --session \\\n            --dest org.freedesktop.portal.Desktop \\\n            --object-path /org/freedesktop/portal/desktop \\\n            --method org.freedesktop.portal.OpenURI.OpenFile \\\n            --timeout 5 \\\n            \"\" \"3\" {} 3< \"$file\"\n    else\n        # $1 contains an URI\n\n        gdbus call --session \\\n            --dest org.freedesktop.portal.Desktop \\\n            --object-path /org/freedesktop/portal/desktop \\\n            --method org.freedesktop.portal.OpenURI.OpenURI \\\n            --timeout 5 \\\n            \"\" \"$1\" {}\n    fi\n\n    if [ $? -eq 0 ]; then\n        exit_success\n    else\n        exit_failure_operation_failed\n    fi\n}\n\n#-----------------------------------------\n# Recursively search .desktop file\n\n#(application, directory, target file, target_url)\nsearch_desktop_file()\n{\n    local default=\"$1\"\n    local dir=\"$2\"\n    local target=\"$3\"\n    local target_uri=\"$4\"\n\n    local file=\"\"\n    # look for both vendor-app.desktop, vendor/app.desktop\n    if [ -r \"$dir/$default\" ]; then\n      file=\"$dir/$default\"\n    elif [ -r \"$dir/$(echo \"$default\" | sed -e 's|-|/|')\" ]; then\n      file=\"$dir/$(echo \"$default\" | sed -e 's|-|/|')\"\n    fi\n\n    if [ -r \"$file\" ] ; then\n        command=\"$(get_key \"${file}\" \"Exec\" | first_word)\"\n        if command -v \"$command\" >/dev/null; then\n            icon=\"$(get_key \"${file}\" \"Icon\")\"\n            # FIXME: Actually LC_MESSAGES should be used as described in\n            # http://standards.freedesktop.org/desktop-entry-spec/latest/ar01s04.html\n            localised_name=\"$(get_key \"${file}\" \"Name\")\"\n            #shellcheck disable=SC2046 # Splitting is intentional here\n            set -- $(get_key \"${file}\" \"Exec\" | last_word)\n            # We need to replace any occurrence of \"%f\", \"%F\" and\n            # the like by the target file. We examine each\n            # argument and append the modified argument to the\n            # end then shift.\n            local args=$#\n            local replaced=0\n            while [ $args -gt 0 ]; do\n                case $1 in\n                    %[c])\n                        replaced=1\n                        arg=\"${localised_name}\"\n                        shift\n                        set -- \"$@\" \"$arg\"\n                        ;;\n                    %[fF])\n\t                    # if there is only a target_url return,\n\t                    # this application can't handle it.\n\t                    [ -n \"$target\" ] || return\n                        replaced=1\n                        arg=\"$target\"\n                        shift\n                        set -- \"$@\" \"$arg\"\n                        ;;\n                    %[uU])\n                        replaced=1\n                        # When an URI is requested use it,\n                        # otherwise fall back to the filepath.\n                        arg=\"${target_uri:-$target}\"\n                        shift\n                        set -- \"$@\" \"$arg\"\n                        ;;\n                    %[i])\n                        replaced=1\n                        shift\n                        set -- \"$@\" \"--icon\" \"$icon\"\n                        ;;\n                    *)\n                        arg=\"$1\"\n                        shift\n                        set -- \"$@\" \"$arg\"\n                        ;;\n                esac\n                args=$(( args - 1 ))\n            done\n            [ $replaced -eq 1 ] || set -- \"$@\" \"${target:-$target_uri}\"\n            env \"$command\" \"$@\"\n            exit_success\n        fi\n    fi\n\n    for d in \"$dir/\"*/; do\n        [ -d \"$d\" ] && search_desktop_file \"$default\" \"$d\" \"$target\" \"$target_uri\"\n    done\n}\n\n# (file (or empty), mimetype, optional url)\nopen_generic_xdg_mime()\n{\n    filetype=\"$2\"\n    default=\"$(xdg-mime query default \"$filetype\")\"\n    if [ -n \"$default\" ] ; then\n        xdg_user_dir=\"$XDG_DATA_HOME\"\n        [ -n \"$xdg_user_dir\" ] || xdg_user_dir=\"$HOME/.local/share\"\n\n        xdg_system_dirs=\"$XDG_DATA_DIRS\"\n        [ -n \"$xdg_system_dirs\" ] || xdg_system_dirs=/usr/local/share/:/usr/share/\n\n        search_dirs=\"$xdg_user_dir:$xdg_system_dirs\"\n        DEBUG 3 \"$search_dirs\"\n        old_ifs=\"$IFS\"\n        IFS=:\n        for x in $search_dirs ; do\n            IFS=\"$old_ifs\"\n            search_desktop_file \"$default\" \"$x/applications/\" \"$1\" \"$3\"\n        done\n    fi\n}\n\nopen_generic_xdg_x_scheme_handler()\n{\n    scheme=\"$(echo \"$1\" | LC_ALL=C sed -n 's/\\(^[[:alpha:]][[:alnum:]+\\.-]*\\):.*$/\\1/p')\"\n    if [ -n \"$scheme\" ]; then\n        filetype=\"x-scheme-handler/$scheme\"\n        open_generic_xdg_mime \"\" \"$filetype\" \"$1\"\n    fi\n}\n\nhas_single_argument()\n{\n  test $# = 1\n}\n\nopen_envvar()\n{\n    local oldifs=\"$IFS\"\n    local browser\n\n    IFS=\":\"\n    for browser in $BROWSER; do\n        IFS=\"$oldifs\"\n\n        if [ -z \"$browser\" ]; then\n            continue\n        fi\n\n        if echo \"$browser\" | grep -q %s; then\n            # Avoid argument injection.\n            # See https://bugs.freedesktop.org/show_bug.cgi?id=103807\n            # URIs don't have IFS characters spaces anyway.\n            # shellcheck disable=SC2086,SC2091,SC2059\n            # All the scary things here are intentional\n            has_single_argument $1 && $(printf \"$browser\" \"$1\")\n        else\n            $browser \"$1\"\n        fi\n\n        if [ $? -eq 0 ]; then\n            exit_success\n        fi\n    done\n}\n\nopen_wsl()\n{\n    local win_path\n    if is_file_url_or_path \"$1\" ; then\n        win_path=\"$(file_url_to_path \"$1\")\"\n        win_path=\"$(wslpath -aw \"$win_path\")\"\n        [ $? -eq 0 ] || exit_failure_operation_failed\n        explorer.exe \"${win_path}\"\n    else\n        rundll32.exe url.dll,FileProtocolHandler \"$1\" \n    fi\n\n    if [ $? -eq 0 ]; then\n        exit_success\n    else\n        exit_failure_operation_failed\n    fi\n}\n\nopen_generic()\n{\n    if is_file_url_or_path \"$1\"; then\n        local file\n        file=\"$(file_url_to_path \"$1\")\"\n\n        check_input_file \"$file\"\n\n        if has_display; then\n            filetype=\"$(xdg-mime query filetype \"$file\" | sed \"s/;.*//\")\"\n            # passing a path a url is okay too,\n            # see desktop file specification for '%u'\n            open_generic_xdg_mime \"$file\" \"$filetype\" \"$1\"\n        fi\n\n        if command -v run-mailcap >/dev/null; then\n            run-mailcap --action=view \"$file\"\n            if [ $? -eq 0 ]; then\n                exit_success\n            fi\n        fi\n\n        if has_display && mimeopen -v 2>/dev/null 1>&2; then\n            mimeopen -L -n \"$file\"\n            if [ $? -eq 0 ]; then\n                exit_success\n            fi\n        fi\n    fi\n\n    if has_display; then\n        open_generic_xdg_x_scheme_handler \"$1\"\n    fi\n\n    if [ -n \"$BROWSER\" ]; then\n        open_envvar \"$1\"\n    fi\n\n    # if BROWSER variable is not set, check some well known browsers instead\n    if [ x\"$BROWSER\" = x\"\" ]; then\n        BROWSER=www-browser:links2:elinks:links:lynx:w3m\n        if has_display; then\n            BROWSER=x-www-browser:firefox:iceweasel:seamonkey:mozilla:epiphany:konqueror:chromium:chromium-browser:google-chrome:$BROWSER\n        fi\n    fi\n\n    open_envvar \"$1\"\n\n    exit_failure_operation_impossible \"no method available for opening '$1'\"\n}\n\nopen_lxde()\n{\n\n    # pcmanfm only knows how to handle file:// urls and filepaths, it seems.\n    if pcmanfm --help >/dev/null 2>&1 && is_file_url_or_path \"$1\"; then\n        local file\n        file=\"$(file_url_to_path \"$1\")\"\n\n        # handle relative paths\n        if ! echo \"$file\" | grep -q ^/; then\n            file=\"$(pwd)/$file\"\n        fi\n\n        pcmanfm \"$file\"\n    else\n        open_generic \"$1\"\n    fi\n\n    if [ $? -eq 0 ]; then\n        exit_success\n    else\n        exit_failure_operation_failed\n    fi\n}\n\nopen_lxqt()\n{\n    if qtxdg-mat open --help 2>/dev/null 1>&2; then\n        qtxdg-mat open \"$1\"\n    else\n        exit_failure_operation_impossible \"no method available for opening '$1'\"\n    fi\n\n    if [ $? -eq 0 ]; then\n        exit_success\n    else\n        exit_failure_operation_failed\n    fi\n}\n\n[ x\"$1\" != x\"\" ] || exit_failure_syntax\n\nurl=\nwhile [ $# -gt 0 ] ; do\n    parm=\"$1\"\n    shift\n\n    case \"$parm\" in\n      -*)\n        exit_failure_syntax \"unexpected option '$parm'\"\n        ;;\n\n      *)\n        if [ -n \"$url\" ] ; then\n            exit_failure_syntax \"unexpected argument '$parm'\"\n        fi\n        url=\"$parm\"\n        ;;\n    esac\ndone\n\nif [ -z \"${url}\" ] ; then\n    exit_failure_syntax \"file or URL argument missing\"\nfi\n\ndetectDE\n\nif [ x\"$DE\" = x\"\" ]; then\n    DE=generic\nfi\n\nDEBUG 2 \"Selected DE $DE\"\n\n# sanitize BROWSER (avoid calling ourselves in particular)\ncase \"${BROWSER}\" in\n    *:\"xdg-open\"|\"xdg-open\":*)\n        BROWSER=\"$(echo \"$BROWSER\" | sed -e 's|:xdg-open||g' -e 's|xdg-open:||g')\"\n        ;;\n    \"xdg-open\")\n        BROWSER=\n        ;;\nesac\n\ncase \"$DE\" in\n    kde)\n    open_kde \"$url\"\n    ;;\n\n    deepin)\n    open_deepin \"$url\"\n    ;;\n\n    gnome3|cinnamon)\n    open_gnome3 \"$url\"\n    ;;\n\n    gnome)\n    open_gnome \"$url\"\n    ;;\n\n    mate)\n    open_mate \"$url\"\n    ;;\n\n    xfce)\n    open_xfce \"$url\"\n    ;;\n\n    lxde)\n    open_lxde \"$url\"\n    ;;\n\n    lxqt)\n    open_lxqt \"$url\"\n    ;;\n\n    enlightenment)\n    open_enlightenment \"$url\"\n    ;;\n\n    cygwin)\n    open_cygwin \"$url\"\n    ;;\n\n    darwin)\n    open_darwin \"$url\"\n    ;;\n\n    flatpak)\n    open_flatpak \"$url\"\n    ;;\n\n    wsl)\n    open_wsl \"$url\"\n    ;;\n\n    generic)\n    open_generic \"$url\"\n    ;;\n\n    *)\n    exit_failure_operation_impossible \"no method available for opening '$url'\"\n    ;;\nesac\n"
        }
      ]
    }
  ]
}