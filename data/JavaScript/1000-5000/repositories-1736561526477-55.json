{
  "metadata": {
    "timestamp": 1736561526477,
    "page": 55,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "get-alex/alex",
      "stars": 4829,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".alexignore",
          "type": "blob",
          "size": 0.0498046875,
          "content": "# `node_modules` is ignored by default.\nexample.md\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1435546875,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0234375,
          "content": "* text=auto\n*.ai binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0556640625,
          "content": "coverage/\nnode_modules/\n.DS_Store\n*.d.ts\n*.log\nyarn.lock\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.041015625,
          "content": "node_modules/\ncoverage/\n*.html\n*.md\n*.mdx\n"
        },
        {
          "name": "cli.js",
          "type": "blob",
          "size": 4.6708984375,
          "content": "#!/usr/bin/env node\nimport fs from 'node:fs'\nimport process from 'node:process'\nimport {URL} from 'node:url'\nimport notifier from 'update-notifier'\nimport supportsColor from 'supports-color'\nimport meow from 'meow'\nimport {engine} from 'unified-engine'\nimport {unified} from 'unified'\nimport rehypeParse from 'rehype-parse'\nimport remarkParse from 'remark-parse'\nimport remarkFrontmatter from 'remark-frontmatter'\nimport remarkGfm from 'remark-gfm'\nimport remarkMdx from 'remark-mdx'\nimport retextEnglish from 'retext-english'\nimport remarkRetext from 'remark-retext'\nimport rehypeRetext from 'rehype-retext'\nimport vfileReporter from 'vfile-reporter'\nimport retextEquality from 'retext-equality'\nimport retextProfanities from 'retext-profanities'\nimport unifiedDiff from 'unified-diff'\nimport {filter} from './filter.js'\n\n/** @type {import('type-fest').PackageJson} */\nconst pack = JSON.parse(\n  String(fs.readFileSync(new URL('package.json', import.meta.url)))\n)\n\nconst textExtensions = [\n  'txt',\n  'text',\n  'md',\n  'markdown',\n  'mkd',\n  'mkdn',\n  'mkdown',\n  'ron'\n]\nconst htmlExtensions = ['htm', 'html']\nconst mdxExtensions = ['mdx']\n\n// Update messages.\n/** @ts-expect-error: `package.json` is fine. */\nnotifier({pkg: pack}).notify()\n\n// Set-up meow.\nconst cli = meow(\n  [\n    'Usage: alex [<glob> ...] [options ...]',\n    '',\n    'Options:',\n    '',\n    '  -w, --why               output sources (when available)',\n    '  -q, --quiet             output only warnings and errors',\n    '  -t, --text              treat input as plain-text (not markdown)',\n    '  -l, --html              treat input as html (not markdown)',\n    '      --mdx               treat input as mdx (not markdown)',\n    '  -d, --diff              ignore unchanged lines (affects Travis only)',\n    '      --reporter=REPORTER use a custom vfile-reporter',\n    '  --stdin                 read from stdin',\n    '',\n    'When no input files are given, searches for markdown and text',\n    'files in the current directory, `doc`, and `docs`.',\n    '',\n    'Examples',\n    '  $ echo \"His network looks good\" | alex --stdin',\n    '  $ alex *.md !example.md',\n    '  $ alex'\n  ].join('\\n'),\n  {\n    importMeta: import.meta,\n    flags: {\n      version: {type: 'boolean', alias: 'v'},\n      help: {type: 'boolean', alias: 'h'},\n      stdin: {type: 'boolean'},\n      text: {type: 'boolean', alias: 't'},\n      mdx: {type: 'boolean'},\n      html: {type: 'boolean', alias: 'l'},\n      diff: {type: 'boolean', alias: 'd'},\n      reporter: {type: 'string'},\n      quiet: {type: 'boolean', alias: 'q'},\n      why: {type: 'boolean', alias: 'w'}\n    }\n  }\n)\n\n// Set-up.\nconst extensions = cli.flags.html\n  ? htmlExtensions\n  : cli.flags.mdx\n  ? mdxExtensions\n  : textExtensions\nconst defaultGlobs = ['{docs/**/,doc/**/,}*.{' + extensions.join(',') + '}']\n/** @type {boolean|undefined} */\nlet silentlyIgnore\n/** @type {string[]|undefined} */\nlet globs\n\nif (cli.flags.stdin) {\n  if (cli.input.length > 0) {\n    throw new Error('Do not pass globs with `--stdin`')\n  }\n} else if (cli.input.length === 0) {\n  globs = defaultGlobs\n  silentlyIgnore = true\n} else {\n  globs = cli.input\n}\n\nengine(\n  {\n    processor: unified(),\n    files: globs,\n    extensions,\n    configTransform: transform,\n    out: false,\n    output: false,\n    rcName: '.alexrc',\n    packageField: 'alex',\n    color: Boolean(supportsColor.stderr),\n    reporter: cli.flags.reporter || vfileReporter,\n    reporterOptions: {\n      verbose: cli.flags.why\n    },\n    quiet: cli.flags.quiet,\n    ignoreName: '.alexignore',\n    silentlyIgnore,\n    frail: true,\n    defaultConfig: transform({})\n  },\n  function (error, code) {\n    if (error) console.error(error.message)\n    process.exit(code)\n  }\n)\n\n/**\n * @param {import('./index.js').OptionsObject} [options]\n */\nfunction transform(options = {}) {\n  /** @type {import('unified').PluggableList} */\n  let plugins = [\n    retextEnglish,\n    [retextProfanities, {sureness: options.profanitySureness}],\n    [retextEquality, {noBinary: options.noBinary}]\n  ]\n\n  if (cli.flags.html) {\n    plugins = [rehypeParse, [rehypeRetext, unified().use({plugins})]]\n  } else if (cli.flags.mdx) {\n    // @ts-expect-error: types are having a hard time for bridges.\n    plugins = [remarkParse, remarkMdx, [remarkRetext, unified().use({plugins})]]\n  } else if (!cli.flags.text) {\n    plugins = [\n      // @ts-expect-error: hush.\n      remarkParse,\n      remarkGfm,\n      [remarkFrontmatter, ['yaml', 'toml']],\n      // @ts-expect-error: types are having a hard time for bridges.\n      [remarkRetext, unified().use({plugins})]\n    ]\n  }\n\n  plugins.push([filter, {allow: options.allow, deny: options.deny}])\n\n  // Hard to check.\n  /* c8 ignore next 3 */\n  if (cli.flags.diff) {\n    plugins.push(unifiedDiff)\n  }\n\n  return {plugins}\n}\n"
        },
        {
          "name": "example.md",
          "type": "blob",
          "size": 0.373046875,
          "content": "The boogeyman wrote all changes to the **master server**.  Thus, the slaves\nwere read-only copies of master.  But not to worry, he was a cripple.\n\nEric is pretty set on beating your butt for sheriff.\n\nCheck this file by running `./cli.js example.md`.  It should not warn\nfor `boogeyman` above as it’s in `.alexrc`.  Neither should it warn\nfor `butt`, as it’s in `package.json`.\n"
        },
        {
          "name": "filter.js",
          "type": "blob",
          "size": 1.0791015625,
          "content": "/**\n * @typedef {import('mdast').Root} Root\n *\n * @typedef Options\n *   Configuration.\n * @property {string[]} [deny]\n *   The `deny` field should be an array of rules or `undefined` (the default is\n *   `undefined`).\n *   When provided, *only* the rules specified are reported.\n *   You cannot use both `allow` and `deny` at the same time.\n * @property {string[]} [allow]\n *   The `allow` field should be an array of rules or `undefined` (the default\n *   is `undefined`).\n *   When provided, the rules specified are skipped and not reported.\n *   You cannot use both `allow` and `deny` at the same time.\n */\n\nimport remarkMessageControl from 'remark-message-control'\n\n/** @type {import('unified').Plugin<[Options?], Root>} */\nexport function filter(options = {}) {\n  if (options.allow && options.deny) {\n    throw new Error(\n      'Do not provide both allow and deny configuration parameters'\n    )\n  }\n\n  return remarkMessageControl({\n    name: 'alex',\n    reset: Boolean(options.deny),\n    enable: options.deny,\n    disable: options.allow,\n    source: ['retext-equality', 'retext-profanities']\n  })\n}\n"
        },
        {
          "name": "funding.yml",
          "type": "blob",
          "size": 0.0146484375,
          "content": "github: wooorm\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 3.2568359375,
          "content": "/**\n * @typedef {import('nlcst').Root} Root\n * @typedef {import('./filter.js').Options} FilterOptions\n *\n * @typedef {boolean|undefined} NoBinaryOption\n * @typedef {0|1|2|undefined} SurenessOption\n *\n * @typedef {{noBinary: NoBinaryOption, sureness: SurenessOption}} TextOptions\n *\n * @typedef {{noBinary?: NoBinaryOption, profanitySureness?: SurenessOption} & FilterOptions} OptionsObject\n * @typedef {import('vfile').VFileCompatible} Input\n * @typedef {OptionsObject|string[]|undefined} Options\n */\n\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkGfm from 'remark-gfm'\nimport remarkFrontmatter from 'remark-frontmatter'\nimport remarkMdx from 'remark-mdx'\nimport rehypeParse from 'rehype-parse'\nimport retextEnglish from 'retext-english'\nimport retextEquality from 'retext-equality'\nimport retextProfanities from 'retext-profanities'\nimport remarkRetext from 'remark-retext'\nimport rehypeRetext from 'rehype-retext'\nimport {sort} from 'vfile-sort'\nimport {filter} from './filter.js'\n\n/** @param {TextOptions} options */\nfunction makeText(options) {\n  return unified()\n    .use(retextEnglish)\n    .use(retextEquality, options)\n    .use(retextProfanities, options)\n}\n\n/**\n * Alex’s core.\n *\n * @param {Input} value\n * @param {FilterOptions} options\n * @param {import('unified').Processor<void, Root>} processor\n */\nfunction core(value, options, processor) {\n  const file = new VFile(value)\n  const tree = processor.use(filter, options).parse(file)\n\n  processor.runSync(tree, file)\n\n  sort(file)\n\n  return file\n}\n\nexport default markdown\n\n/**\n * Alex (markdown).\n *\n * @param {Input} value\n * @param {Options} [config]\n */\nexport function markdown(value, config) {\n  const options = splitOptions(config)\n  return core(\n    value,\n    options.filter,\n    unified()\n      .use(remarkParse)\n      .use(remarkGfm)\n      .use(remarkFrontmatter, ['yaml', 'toml'])\n      .use(remarkRetext, makeText(options.text))\n  )\n}\n\n/**\n * Alex (MDX).\n *\n * @param {Input} value\n * @param {Options} [config]\n */\nexport function mdx(value, config) {\n  const options = splitOptions(config)\n  return core(\n    value,\n    options.filter,\n    unified()\n      .use(remarkParse)\n      .use(remarkMdx)\n      .use(remarkRetext, makeText(options.text))\n  )\n}\n\n/**\n * Alex (HTML).\n *\n * @param {Input} value\n * @param {Options} [config]\n */\nexport function html(value, config) {\n  const options = splitOptions(config)\n  return core(\n    value,\n    options.filter,\n    unified().use(rehypeParse).use(rehypeRetext, makeText(options.text))\n  )\n}\n\n/**\n * Alex (plain text).\n *\n * @param {Input} value\n * @param {Options} [config]\n */\nexport function text(value, config) {\n  const options = splitOptions(config)\n  return core(value, options.filter, makeText(options.text))\n}\n\n/**\n * @param {Options} options\n */\nfunction splitOptions(options) {\n  /** @type {string[]|undefined} */\n  let allow\n  /** @type {string[]|undefined} */\n  let deny\n  /** @type {boolean|undefined} */\n  let noBinary\n  /** @type {SurenessOption} */\n  let sureness\n\n  if (Array.isArray(options)) {\n    allow = options\n  } else if (options) {\n    allow = options.allow\n    deny = options.deny\n    noBinary = options.noBinary\n    sureness = options.profanitySureness\n  }\n\n  return {filter: {allow, deny}, text: {noBinary, sureness}}\n}\n"
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.0732421875,
          "content": "(The MIT License)\n\nCopyright (c) 2015 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 4.025390625,
          "content": "{\n  \"name\": \"alex\",\n  \"version\": \"11.0.1\",\n  \"description\": \"Catch insensitive, inconsiderate writing\",\n  \"license\": \"MIT\",\n  \"repository\": \"https://github.com/get-alex/alex\",\n  \"bugs\": \"https://github.com/get-alex/alex/issues\",\n  \"funding\": {\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"homepage\": \"https://alexjs.com\",\n  \"keywords\": [\n    \"cli-app\",\n    \"cli\",\n    \"bin\",\n    \"alex\",\n    \"equal\",\n    \"race\",\n    \"religion\",\n    \"sex\",\n    \"orientation\",\n    \"identity\",\n    \"gender\",\n    \"sensitive\",\n    \"insensitive\",\n    \"neutral\",\n    \"writing\",\n    \"language\",\n    \"english\"\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (http://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (http://wooorm.com)\",\n    \"Sindre Sorhus <sindresorhus@gmail.com>\",\n    \"Shinnosuke Watanabe <snnskwtnb@gmail.com>\",\n    \"Carolyn Stransky <carolynstransky@gmail.com>\",\n    \"Riley Martine <riley.martine@protonmail.com>\",\n    \"F <f@erbridge.co.uk>\",\n    \"Jen Weber <j@jenweber.me>\",\n    \"John-David Dalton <john.david.dalton@gmail.com>\",\n    \"Lee Mulvey <lmulvey@me.com>\",\n    \"Mary McGrath <m.c.mcgrath13@gmail.com>\",\n    \"Nick Radford <nick@nicholasradford.com>\",\n    \"Ricky <rickhanlonii@gmail.com>\",\n    \"Sachin Malhotra <sachinmalhotra1993@gmail.com>\",\n    \"Simon Knott <simoknott@gmail.com>\",\n    \"Taylor Reece <taylor.reece@gmail.com>\",\n    \"Tim <tim@itspugle.com>\",\n    \"Vaishnavi Janardhan <vaish.janardhan@gmail.com>\",\n    \"Conor Hastings <conor@socialtables.com>\",\n    \"Abhinav Gautam <abhinav.nanhey@gmail.com>\",\n    \"Alex Gleason <alex@alexgleason.me>\",\n    \"Ansel Halliburton <github@anseljh.com>\",\n    \"Ben Junya <bjunya@gmail.com>\",\n    \"Christian Oliff <christianoliff@yahoo.com>\",\n    \"Daan <daan@devign.it>\"\n  ],\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"sideEffects\": false,\n  \"bin\": \"cli.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\",\n    \"filter.d.ts\",\n    \"filter.js\",\n    \"cli.js\"\n  ],\n  \"dependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"@types/nlcst\": \"^1.0.0\",\n    \"meow\": \"^11.0.0\",\n    \"rehype-parse\": \"^8.0.0\",\n    \"rehype-retext\": \"^3.0.0\",\n    \"remark-frontmatter\": \"^4.0.0\",\n    \"remark-gfm\": \"^3.0.0\",\n    \"remark-mdx\": \"2.0.0\",\n    \"remark-message-control\": \"^7.0.0\",\n    \"remark-parse\": \"^10.0.0\",\n    \"remark-retext\": \"^5.0.0\",\n    \"retext-english\": \"^4.0.0\",\n    \"retext-equality\": \"~6.6.0\",\n    \"retext-profanities\": \"~7.2.0\",\n    \"supports-color\": \"^9.4.0\",\n    \"unified\": \"^10.0.0\",\n    \"unified-diff\": \"^4.0.0\",\n    \"unified-engine\": \"^10.0.0\",\n    \"update-notifier\": \"^6.0.0\",\n    \"vfile\": \"^5.0.0\",\n    \"vfile-reporter\": \"^7.0.0\",\n    \"vfile-sort\": \"^3.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/tape\": \"^4.0.0\",\n    \"@types/update-notifier\": \"^6.0.0\",\n    \"c8\": \"^7.10.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"rimraf\": \"^3.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"type-fest\": \"^3.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"vfile-reporter-json\": \"^3.0.0\",\n    \"xo\": \"^0.54.0\"\n  },\n  \"scripts\": {\n    \"build\": \"rimraf \\\"test/**/*.d.ts\\\" \\\"*.d.ts\\\" && tsc && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node test/index.js\",\n    \"test-coverage\": \"c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"alex\": {\n    \"allow\": [\n      \"butt\"\n    ]\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"ava/no-import-test-files\": \"off\",\n      \"unicorn/no-array-callback-reference\": \"off\"\n    }\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\",\n      [\n        \"toc\",\n        {\n          \"heading\": \"contents\"\n        }\n      ]\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 20.8076171875,
          "content": "<!--lint disable no-html first-heading-level no-shell-dollars-->\n\n<h1 align=\"center\">\n  <img width=\"300\" src=\"https://raw.githubusercontent.com/get-alex/alex/a192b46/media/logo-alex-purple.svg?sanitize=true\" alt=\"alex\">\n  <br>\n  <br>\n</h1>\n\n> 📝 **alex** — Catch insensitive, inconsiderate writing.\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![First timers friendly][first-timers-badge]][first-timers]\n\nWhether your own or someone else’s writing, **alex** helps you find gender\nfavoring, polarizing, race related, or other **unequal** phrasing in text.\n\nFor example, when `We’ve confirmed his identity` is given, **alex** will warn\nyou and suggest using `their` instead of `his`.\n\nGive **alex** a spin on the [Online demo »][demo].\n\n## Why\n\n*   [x] Helps to get better at considerate writing\n*   [x] Catches many possible offences\n*   [x] Suggests helpful alternatives\n*   [x] Reads plain text, HTML, MDX, or markdown as input\n*   [x] Stylish\n\n## Install\n\nUsing [npm][] (with [Node.js][node]):\n\n```sh\n$ npm install alex --global\n```\n\nUsing [yarn][]:\n\n```sh\n$ yarn global add alex\n```\n\nOr you can follow this step-by-step tutorial:\n[Setting up alex in your project][setup-tutorial]\n\n<!--alex disable wacko stupid-->\n\n## Contents\n\n*   [Checks](#checks)\n*   [Integrations](#integrations)\n*   [Ignoring files](#ignoring-files)\n    *   [`.alexignore`](#alexignore)\n*   [Control](#control)\n*   [Configuration](#configuration)\n*   [CLI](#cli)\n*   [API](#api)\n    *   [`markdown(value, config)`](#markdownvalue-config)\n    *   [`mdx(value, config)`](#mdxvalue-config)\n    *   [`html(value, config)`](#htmlvalue-config)\n    *   [`text(value, config)`](#textvalue-config)\n*   [Workflow](#workflow)\n*   [FAQ](#faq)\n    *   [This is stupid!](#this-is-stupid)\n    *   [alex didn’t check “X”!](#alex-didnt-check-x)\n    *   [Why is this named alex?](#why-is-this-named-alex)\n*   [Further reading](#further-reading)\n*   [Contribute](#contribute)\n*   [Origin story](#origin-story)\n*   [Acknowledgments](#acknowledgments)\n*   [License](#license)\n\n## Checks\n\n**alex** checks things such as:\n\n*   Gendered work-titles (if you write `garbageman` alex suggests `garbage\n    collector`; if you write `landlord` alex suggests `proprietor`)\n*   Gendered proverbs (if you write `like a man` alex suggests `bravely`; if you\n    write `ladylike` alex suggests `courteous`)\n*   Ableist language (if you write `learning disabled` alex suggests `person\n    with learning disabilities`)\n*   Condescending language (if you write `obviously` or `everyone knows` alex\n    warns about it)\n*   Intolerant phrasing (if you write `master` and `slave` alex suggests\n    `primary` and `replica`)\n*   Profanities (if you write `butt` 🍑 alex warns about it)\n\n…and much more!\n\nNote: alex assumes good intent: that you don’t mean to offend!\n\nSee [`retext-equality`][equality] and [`retext-profanities`][profanities] for\nall rules.\n\n**alex** ignores words meant literally, so `“he”`, `He — ...`, and [the\nlike][literals] are not warned about.\n\n## Integrations\n\n*   Sublime — [`sindresorhus/SublimeLinter-contrib-alex`](https://github.com/sindresorhus/SublimeLinter-contrib-alex)\n*   Gulp — [`dustinspecker/gulp-alex`](https://github.com/dustinspecker/gulp-alex)\n*   Slack — [`keoghpe/alex-slack`](https://github.com/keoghpe/alex-slack)\n*   Ember — [`yohanmishkin/ember-cli-alex`](https://github.com/yohanmishkin/ember-cli-alex)\n*   Probot — [`swinton/linter-alex`](https://github.com/swinton/linter-alex)\n*   GitHub Actions — [`brown-ccv/alex-recommends`](https://github.com/marketplace/actions/alex-recommends)\n*   GitHub Actions (reviewdog) — [`reviewdog/action-alex`](https://github.com/marketplace/actions/run-alex-with-reviewdog)\n*   Vim — [`w0rp/ale`](https://github.com/w0rp/ale),\n    [`Freed-Wu/coc-alex`](https://github.com/Freed-Wu/coc-alex)\n*   Browser extension — [`skn0tt/alex-browser-extension`](https://github.com/skn0tt/alex-browser-extension)\n*   Contentful - [`stefanjudis/alex-js-contentful-ui-extension`](https://github.com/stefanjudis/alex-js-contentful-ui-extension)\n*   Figma - [`nickradford/figma-plugin-alex`](https://github.com/nickradford/figma-plugin-alex)\n*   VSCode - [`tlahmann/vscode-alex`](https://github.com/tlahmann/vscode-alex)\n\n## Ignoring files\n\nThe CLI searches for files with a markdown or text extension when given\ndirectories (so `$ alex .` will find `readme.md` and `path/to/file.txt`).\nTo prevent files from being found, create an [`.alexignore`][alexignore] file.\n\n### `.alexignore`\n\nThe CLI will sometimes [search for files][ignoring-files].\nTo prevent files from being found, add a file named `.alexignore` in one of the\ndirectories above the current working directory (the place you run `alex` from).\nThe format of these files is similar to [`.eslintignore`][eslintignore] (which\nin turn is similar to `.gitignore` files).\n\nFor example, when working in `~/path/to/place`, the ignore file can be in\n`to`, `place`, or `~`.\n\nThe ignore file for [this project itself][.alexignore] looks like this:\n\n```txt\n# `node_modules` is ignored by default.\nexample.md\n```\n\n## Control\n\nSometimes **alex** makes mistakes:\n\n```markdown\nA message for this sentence will pop up.\n```\n\nYields:\n\n```txt\nreadme.md\n  1:15-1:18  warning  `pop` may be insensitive, use `parent` instead  dad-mom  retext-equality\n\n⚠ 1 warning\n```\n\nHTML comments in Markdown can be used to ignore them:\n\n```markdown\n<!--alex ignore dad-mom-->\n\nA message for this sentence will **not** pop up.\n```\n\nYields:\n\n```txt\nreadme.md: no issues found\n```\n\n`ignore` turns off messages for the thing after the comment (in this case, the\nparagraph).\nIt’s also possible to turn off messages after a comment by using `disable`, and,\nturn those messages back on using `enable`:\n\n```markdown\n<!--alex disable dad-mom-->\n\nA message for this sentence will **not** pop up.\n\nA message for this sentence will also **not** pop up.\n\nYet another sentence where a message will **not** pop up.\n\n<!--alex enable dad-mom-->\n\nA message for this sentence will pop up.\n```\n\nYields:\n\n```txt\nreadme.md\n  9:15-9:18  warning  `pop` may be insensitive, use `parent` instead  dad-mom  retext-equality\n\n⚠ 1 warning\n```\n\nMultiple messages can be controlled in one go:\n\n```md\n<!--alex disable he-her his-hers dad-mom-->\n```\n\n…and all messages can be controlled by omitting all rule identifiers:\n\n```md\n<!--alex ignore-->\n```\n\n## Configuration\n\nYou can control **alex** through `.alexrc` configuration files:\n\n```json\n{\n  \"allow\": [\"boogeyman-boogeywoman\"]\n}\n```\n\n…you can use YAML if the file is named `.alexrc.yml` or `.alexrc.yaml`:\n\n```yml\nallow:\n  - dad-mom\n```\n\n…you can also use JavaScript if the file is named `.alexrc.js`:\n\n```js\n// But making it random like this is a bad idea!\nexports.profanitySureness = Math.floor(Math.random() * 3)\n```\n\n…and finally it is possible to use an `alex` field in `package.json`:\n\n```txt\n{\n  …\n  \"alex\": {\n    \"noBinary\": true\n  },\n  …\n}\n```\n\nThe `allow` field should be an array of rules or `undefined` (the default is\n`undefined`).  When provided, the rules specified are skipped and not reported.\n\nThe `deny` field should be an array of rules or `undefined` (the default is\n`undefined`).  When provided, *only* the rules specified are reported.\n\nYou cannot use both `allow` and `deny` at the same time.\n\nThe `noBinary` field should be a boolean (the default is `false`).\nWhen turned on (`true`), pairs such as `he and she` and `garbageman or\ngarbagewoman` are seen as errors.\nWhen turned off (`false`, the default), such pairs are okay.\n\nThe `profanitySureness` field is a number (the default is `0`).\nWe use [`cuss`][cuss], which has a dictionary of words that have a rating\nbetween 0 and 2 of how likely it is that a word or phrase is a profanity (not\nhow “bad” it is):\n\n| Rating | Use as a profanity | Use in clean text | Example  |\n| ------ | ------------------ | ----------------- | -------- |\n| 2      | likely             | unlikely          | `asshat` |\n| 1      | maybe              | maybe             | `addict` |\n| 0      | unlikely           | likely            | `beaver` |\n\nThe `profanitySureness` field is the minimum rating (including) that you want to\ncheck for.\nIf you set it to `1` (maybe) then it will warn for level `1` *and* `2` (likely)\nprofanities, but not for level `0` (unlikely).\n\n## CLI\n\n<!--alex enable wacko stupid-->\n\n![][screenshot]\n\nLet’s say `example.md` looks as follows:\n\n```markdown\nThe boogeyman wrote all changes to the **master server**. Thus, the slaves\nwere read-only copies of master. But not to worry, he was a cripple.\n```\n\nNow, run **alex** on `example.md`:\n\n```sh\n$ alex example.md\n```\n\nYields:\n\n```txt\nexample.md\n   1:5-1:14  warning  `boogeyman` may be insensitive, use `boogeymonster` instead                boogeyman-boogeywoman  retext-equality\n  1:42-1:48  warning  `master` / `slaves` may be insensitive, use `primary` / `replica` instead  master-slave           retext-equality\n  1:69-1:75  warning  Don’t use `slaves`, it’s profane                                           slaves                 retext-profanities\n  2:52-2:54  warning  `he` may be insensitive, use `they`, `it` instead                          he-she                 retext-equality\n  2:61-2:68  warning  `cripple` may be insensitive, use `person with a limp` instead             gimp                   retext-equality\n\n⚠ 5 warnings\n```\n\nSee `$ alex --help` for more information.\n\n> When no input files are given to **alex**, it searches for files in the\n> current directory, `doc`, and `docs`.\n> If `--mdx` is given, it searches for `mdx` extensions.\n> If `--html` is given, it searches for `htm` and `html` extensions.\n> Otherwise, it searches for `txt`, `text`, `md`, `mkd`, `mkdn`, `mkdown`,\n> `ron`, and `markdown` extensions.\n\n## API\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c):\nNode 14+ is needed to use it and it must be `import`ed instead of `require`d.\n\n[npm][]:\n\n```sh\n$ npm install alex --save\n```\n\nThis package exports the identifiers `markdown`, `mdx`, `html`, and `text`.\nThe default export is `markdown`.\n\n### `markdown(value, config)`\n\nCheck Markdown (ignoring syntax).\n\n###### Parameters\n\n*   `value` ([`VFile`][vfile] or `string`) — Markdown document\n*   `config` (`Object`, optional) — See the [Configuration][] section\n\n###### Returns\n\n[`VFile`][vfile].\nYou are probably interested in its [`messages`][vfile-message] property, as\nshown in the example below, because it holds the possible violations.\n\n###### Example\n\n```js\nimport alex from 'alex'\n\nalex('We’ve confirmed his identity.').messages\n```\n\nYields:\n\n```js\n[\n  [1:17-1:20: `his` may be insensitive, when referring to a person, use `their`, `theirs`, `them` instead] {\n    message: '`his` may be insensitive, when referring to a ' +\n      'person, use `their`, `theirs`, `them` instead',\n    name: '1:17-1:20',\n    reason: '`his` may be insensitive, when referring to a ' +\n      'person, use `their`, `theirs`, `them` instead',\n    line: 1,\n    column: 17,\n    location: { start: [Object], end: [Object] },\n    source: 'retext-equality',\n    ruleId: 'her-him',\n    fatal: false,\n    actual: 'his',\n    expected: [ 'their', 'theirs', 'them' ]\n  }\n]\n```\n\n### `mdx(value, config)`\n\nCheck [MDX][] (ignoring syntax).\n\n> Note: the syntax for [MDX@2][mdx-next], while currently in beta, is used in\n> alex.\n\n###### Parameters\n\n*   `value` ([`VFile`][vfile] or `string`) — MDX document\n*   `config` (`Object`, optional) — See the [Configuration][] section\n\n###### Returns\n\n[`VFile`][vfile].\n\n###### Example\n\n```js\nimport {mdx} from 'alex'\n\nmdx('<Component>He walked to class.</Component>').messages\n```\n\nYields:\n\n```js\n[\n  [1:12-1:14: `He` may be insensitive, use `They`, `It` instead] {\n    reason: '`He` may be insensitive, use `They`, `It` instead',\n    line: 1,\n    column: 12,\n    location: { start: [Object], end: [Object] },\n    source: 'retext-equality',\n    ruleId: 'he-she',\n    fatal: false,\n    actual: 'He',\n    expected: [ 'They', 'It' ]\n  }\n]\n```\n\n### `html(value, config)`\n\nCheck HTML (ignoring syntax).\n\n###### Parameters\n\n*   `value` ([`VFile`][vfile] or `string`) — HTML document\n*   `config` (`Object`, optional) — See the [Configuration][] section\n\n###### Returns\n\n[`VFile`][vfile].\n\n###### Example\n\n```js\nimport {html} from 'alex'\n\nhtml('<p class=\"black\">He walked to class.</p>').messages\n```\n\nYields:\n\n```js\n[\n  [1:18-1:20: `He` may be insensitive, use `They`, `It` instead] {\n    message: '`He` may be insensitive, use `They`, `It` instead',\n    name: '1:18-1:20',\n    reason: '`He` may be insensitive, use `They`, `It` instead',\n    line: 1,\n    column: 18,\n    location: { start: [Object], end: [Object] },\n    source: 'retext-equality',\n    ruleId: 'he-she',\n    fatal: false,\n    actual: 'He',\n    expected: [ 'They', 'It' ]\n  }\n]\n```\n\n### `text(value, config)`\n\nCheck plain text (as in, syntax is checked).\n\n###### Parameters\n\n*   `value` ([`VFile`][vfile] or `string`) — Text document\n*   `config` (`Object`, optional) — See the [Configuration][] section\n\n###### Returns\n\n[`VFile`][vfile].\n\n###### Example\n\n```js\nimport {markdown, text} from 'alex'\n\nmarkdown('The `boogeyman`.').messages // => []\n\ntext('The `boogeyman`.').messages\n```\n\nYields:\n\n```js\n[\n  [1:6-1:15: `boogeyman` may be insensitive, use `boogeymonster` instead] {\n    message: '`boogeyman` may be insensitive, use `boogeymonster` instead',\n    name: '1:6-1:15',\n    reason: '`boogeyman` may be insensitive, use `boogeymonster` instead',\n    line: 1,\n    column: 6,\n    location: Position { start: [Object], end: [Object] },\n    source: 'retext-equality',\n    ruleId: 'boogeyman-boogeywoman',\n    fatal: false,\n    actual: 'boogeyman',\n    expected: [ 'boogeymonster' ]\n  }\n]\n```\n\n## Workflow\n\nThe recommended workflow is to add **alex** to `package.json` and to run it with\nyour tests in Travis.\n\nYou can opt to ignore warnings through [alexrc][configuration] files and\n[control comments][control].\n\nA `package.json` file with [npm scripts][npm-scripts], and additionally using\n[AVA][] for unit tests, could look like so:\n\n```json\n{\n  \"scripts\": {\n    \"test-api\": \"ava\",\n    \"test-doc\": \"alex\",\n    \"test\": \"npm run test-api && npm run test-doc\"\n  },\n  \"devDependencies\": {\n    \"alex\": \"^1.0.0\",\n    \"ava\": \"^0.1.0\"\n  }\n}\n```\n\nIf you’re using Travis for continuous integration, set up something like the\nfollowing in your `.travis.yml`:\n\n```diff\n script:\n - npm test\n+- alex --diff\n```\n\nMake sure to still install alex though!\n\nIf the `--diff` flag is used, and Travis is detected, lines that are not changes\nin this push are ignored.\nUsing this workflow, you can merge PRs if it has warnings, and then if someone\nedits an entirely different file, they won’t be bothered about existing\nwarnings, only about the things they added!\n\n## FAQ\n\n<!--lint disable no-heading-punctuation-->\n\n<!--alex ignore wacko stupid-->\n\n### This is stupid!\n\nNot a question.\nAnd yeah, alex isn’t very smart.\nPeople are much better at this.\nBut people make mistakes, and alex is there to help.\n\n### alex didn’t check “X”!\n\nSee [`contributing.md`][contributing] on how to get “X” checked by alex.\n\n### Why is this named alex?\n\nIt’s a nice unisex name, it was free on npm, I like it!  :smile:\n\n<!--lint enable no-heading-punctuation-->\n\n## Further reading\n\nNo automated tool can replace studying inclusive communication and listening to\nthe lived experiences of others.\nAn error from `alex` can be an invitation to learn more.\nThese resources are a launch point for deepening your own understanding and\neditorial skills beyond what `alex` can offer:\n\n*   The [18F Content Guide](https://content-guide.18f.gov/our-style/inclusive-language/)\n    has a helpful list of links to other inclusive language guides used in\n    journalism and academic writing.\n*   The [Conscious Style Guide](https://consciousstyleguide.com/articles/) has\n    articles on many nuanced topics of language.  For example, the terms race\n    and ethnicity mean different things, and choosing the right word is up to\n    you.\n    Likewise, a sentence that overgeneralizes about a group of people\n    (e.g. “Developers love to code all day”) may not be noticed by `alex`, but\n    it is not inclusive.  A good human editor can step up to the challenge and\n    find a better way to phrase things.\n*   Sometimes, the only way to know what is inclusive is to ask.\n    In [Disability is a nuanced thing](https://incl.ca/disability-language-is-a-nuanced-thing/),\n    Nicolas Steenhout writes about how person-first language, such as\n    “a person with a disability,” is not always the right choice.\n*   Language is always evolving.  A term that is neutral one year ago can be\n    problematic today.  Projects like the\n    [Self-Defined Dictionary](https://github.com/selfdefined/web-app) aim to\n    collect the words that we use to define ourselves and others, and connect\n    them with the history and some helpful advice.\n*   Unconscious bias is present in daily decisions and conversations and can\n    show up in writing.\n    [Textio](https://textio.com/blog/4-overlooked-types-of-bias-in-business-writing/27521593662)\n\n    offers some examples of how descriptive adjective choice and tone can push\n    some people away, and how regional language differences can cause confusion.\n*   Using complex sentences and uncommon vocabulary can lead to less inclusive\n    content.  This is described as literacy exclusion in\n    [this article by Harver](https://harver.com/blog/inclusive-job-descriptions/).\n    This is critical to be aware of if your content has a global audience,\n    where a reader’s strongest language may not be the language you are writing\n    in.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`get-alex/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [Code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## Origin story\n\nThanks to [**@iheanyi**][iheany] for [raising the problem][tweet] and\n[**@sindresorhus**][sindre] for inspiring me ([**@wooorm**][wooorm]) to do\nsomething about it.\n\nWhen alex launched, it got some traction on [twitter][] and [producthunt][].\nThen there was a [lot][tnw] [of][dailydot] [press][vice] [coverage][bustle].\n\n## Acknowledgments\n\nPreliminary work for alex was done [in 2015][preliminary].\nThe project was authored by [**@wooorm**][wooorm].\n\nLots of [people helped since][contributors]!\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions. -->\n\n[build]: https://github.com/get-alex/alex/actions\n\n[build-badge]: https://github.com/get-alex/alex/workflows/main/badge.svg\n\n[coverage]: https://codecov.io/github/get-alex/alex\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/get-alex/alex.svg\n\n[first-timers]: https://www.firsttimersonly.com/\n\n[first-timers-badge]: https://img.shields.io/badge/first--timers--only-friendly-blue.svg\n\n[node]: https://nodejs.org/en/download/\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[yarn]: https://yarnpkg.com/\n\n[setup-tutorial]: https://dev.to/meeshkan/setting-up-the-alex-js-language-linter-in-your-project-3bpl\n\n[demo]: http://alexjs.com/#demo\n\n[screenshot]: screenshot.png\n\n[vfile]: https://github.com/vfile/vfile\n\n[profanities]: https://github.com/retextjs/retext-profanities/blob/main/rules.md\n\n[equality]: https://github.com/retextjs/retext-equality/blob/main/rules.md\n\n[vfile-message]: https://github.com/vfile/vfile#vfilemessages\n\n[literals]: https://github.com/syntax-tree/nlcst-is-literal#isliteralparent-index\n\n[eslintignore]: http://eslint.org/docs/user-guide/configuring.html#ignoring-files-and-directories\n\n[cuss]: https://github.com/words/cuss\n\n[npm-scripts]: https://docs.npmjs.com/misc/scripts\n\n[ava]: http://ava.li\n\n[author]: http://wooorm.com\n\n[health]: https://github.com/get-alex/.github\n\n[contributing]: https://github.com/get-alex/.github/blob/main/contributing.md\n\n[support]: https://github.com/get-alex/.github/blob/main/support.md\n\n[coc]: https://github.com/get-alex/.github/blob/main/code-of-conduct.md\n\n[tweet]: https://twitter.com/kwuchu/status/618799087006130176\n\n[twitter]: https://twitter.com/wooorm/status/639123753490907136\n\n[producthunt]: https://www.producthunt.com/posts/alex\n\n[tnw]: http://thenextweb.com/apps/2015/09/11/alex-stops-you-from-publishing-inconsiderate-content/\n\n[vice]: https://www.vice.com/en_us/article/nzeawx/meet-alex-the-javascript-tool-to-make-your-code-less-offensive\n\n[bustle]: https://www.bustle.com/articles/108684-alex-javascript-tool-corrects-harmful-language-in-your-writing-because-there-are-some-mistakes-spell-check\n\n[dailydot]: https://www.dailydot.com/debug/alex-coding-tool-offensive/\n\n[iheany]: https://github.com/iheanyi\n\n[sindre]: https://github.com/sindresorhus\n\n[wooorm]: https://github.com/wooorm\n\n[preliminary]: https://github.com/get-alex/alex/commit/3621b0a\n\n[contributors]: https://github.com/get-alex/alex/graphs/contributors\n\n[.alexignore]: .alexignore\n\n[license]: license\n\n[control]: #control\n\n[configuration]: #configuration\n\n[ignoring-files]: #ignoring-files\n\n[alexignore]: #alexignore\n\n[mdx]: https://mdxjs.com\n\n[mdx-next]: https://github.com/mdx-js/mdx/issues/1041\n"
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 180.2978515625,
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.3515625,
          "content": "{\n  \"include\": [\"test/**/*.js\", \"*.js\"],\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"lib\": [\"ES2020\"],\n    \"module\": \"ES2020\",\n    \"moduleResolution\": \"node\",\n    \"allowJs\": true,\n    \"checkJs\": true,\n    \"declaration\": true,\n    \"emitDeclarationOnly\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true\n  }\n}\n"
        }
      ]
    }
  ]
}