{
  "metadata": {
    "timestamp": 1736562177211,
    "page": 1000,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEwMDA=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "marijnh/Eloquent-JavaScript",
      "stars": 3042,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5166015625,
          "content": "/nostarch/[012]*.tex\n/nostarch/hints.tex\n/nostarch/book.*\n/nostarch.pdf\n/pdf/[012]*.tex\n/pdf/hints.tex\n/pdf/book.*\n/pdf/book_mobile.*\n/pdf/*.log\n/book.pdf\n/book_mobile.pdf\n/html/[012]*.html\n/html/ejs.js\n/code/chapter/*\n/code/chapter_info.js\n/code/file_server.mjs\n/code/skillsharing.zip\n/code/solutions/20_3_a_public_space_on_the_web.zip\n/code/skillsharing/*\n/node_modules\n.tern-port\n/toc.txt\n/img/cover.xcf\n/img/generated/*\n/epub/[012]*.xhtml\n/epub/hints.xhtml\n/epub/img/*\n/epub/content.opf\n/epub/toc.xhtml\n/book.epub\n/book.mobi\n"
        },
        {
          "name": "00_intro.md",
          "type": "blob",
          "size": 20.6923828125,
          "content": "{{meta {load_files: [\"code/intro.js\"]}}}\n\n# Introduction\n\n{{quote {author: \"Ellen Ullman\", title: \"Close to the Machine: Technophilia and Its Discontents\", chapter: true}\n\nWe think we are creating the system for our own purposes. We believe we are making it in our own image... But the computer is not really like us. It is a projection of a very slim part of ourselves: that portion devoted to logic, order, rule, and clarity.\n\nquote}}\n\n{{figure {url: \"img/chapter_picture_00.jpg\", alt: \"Illustration of a screwdriver next to a circuit board of about the same size\", chapter: \"framed\"}}}\n\nThis is a book about instructing ((computer))s. Computers are about as common as screwdrivers today, but they are quite a bit more complex, and making them do what you want them to do isn't always easy.\n\nIf the task you have for your computer is a common, well-understood one, such as showing you your email or acting like a calculator, you can open the appropriate ((application)) and get to work. But for unique or open-ended tasks, there often is no appropriate application.\n\nThat is where ((programming)) may come in. _Programming_ is the act of constructing a _program_—a set of precise instructions telling a computer what to do. Because computers are dumb, pedantic beasts, programming is fundamentally tedious and frustrating.\n\n{{index [programming, \"joy of\"], speed}}\n\nFortunately, if you can get over that fact—and maybe even enjoy the rigor of thinking in terms that dumb machines can deal with—programming can be rewarding. It allows you to do things in seconds that would take _forever_ by hand. It is a way to make your computer tool do things that it couldn't do before. On top of that, it makes for a wonderful game of puzzle solving and abstract thinking.\n\nMost programming is done with ((programming language))s. A _programming language_ is an artificially constructed language used to instruct computers. It is interesting that the most effective way we've found to communicate with a computer borrows so heavily from the way we communicate with each other. Like human languages, computer languages allow words and phrases to be combined in new ways, making it possible to express ever new concepts.\n\n{{index [JavaScript, \"availability of\"], \"casual computing\"}}\n\nAt one point, language-based interfaces, such as the BASIC and DOS prompts of the 1980s and 1990s, were the main method of interacting with computers. For routine computer use, these have largely been replaced with visual interfaces, which are easier to learn but offer less freedom. But if you know where to look, the languages are still there. One of them, _JavaScript_, is built into every modern web ((browser))—and is thus available on almost every device.\n\n{{indexsee \"web browser\", browser}}\n\nThis book will try to make you familiar enough with this language to do useful and amusing things with it.\n\n## On programming\n\n{{index [programming, \"difficulty of\"]}}\n\nBesides explaining JavaScript, I will introduce the basic principles of programming. Programming, it turns out, is hard. The fundamental rules are simple and clear, but programs built on top of these rules tend to become complex enough to introduce their own rules and complexity. You're building your own maze, in a way, and you can easily get lost in it.\n\n{{index learning}}\n\nThere will be times when reading this book feels terribly frustrating. If you are new to programming, there will be a lot of new material to digest. Much of this material will then be _combined_ in ways that require you to make additional connections.\n\nIt is up to you to make the necessary effort. When you are struggling to follow the book, do not jump to any conclusions about your own capabilities. You are fine—you just need to keep at it. Take a break, reread some material, and make sure you read and understand the example programs and ((exercises)). Learning is hard work, but everything you learn is yours and will make further learning easier.\n\n{{quote {author: \"Ursula K. Le Guin\", title: \"The Left Hand of Darkness\"}\n\n{{index \"Le Guin, Ursula K.\"}}\n\nWhen action grows unprofitable, gather information; when information grows unprofitable, sleep.\n\nquote}}\n\n{{index [program, \"nature of\"], data}}\n\nA program is many things. It is a piece of text typed by a programmer, it is the directing force that makes the computer do what it does, it is data in the computer's memory, and, at the same time, it controls the actions performed on this memory. Analogies that try to compare programs to familiar objects tend to fall short. A superficially fitting one is to compare a program to a machine—lots of separate parts tend to be involved, and to make the whole thing tick, we have to consider the ways in which these parts interconnect and contribute to the operation of the whole.\n\nA ((computer)) is a physical machine that acts as a host for these immaterial machines. Computers themselves can do only stupidly straightforward things. The reason they are so useful is that they do these things at an incredibly high ((speed)). A program can ingeniously combine an enormous number of these simple actions to do very complicated things.\n\n{{index [programming, \"joy of\"]}}\n\nA program is a building of thought. It is costless to build, it is weightless, and it grows easily under our typing hands. But as a program grows, so does its ((complexity)). The skill of programming is the skill of building programs that don't confuse the programmer. The best programs are those that manage to do something interesting while still being easy to understand.\n\n{{index \"programming style\", \"best practices\"}}\n\nSome programmers believe that this complexity is best managed by using only a small set of well-understood techniques in their programs. They have composed strict rules (\"best practices\") prescribing the form programs should have and carefully stay within their safe little zone.\n\n{{index experiment}}\n\nThis is not only boring—it is ineffective. New problems often require new solutions. The field of programming is young and still developing rapidly, and it is varied enough to have room for wildly different approaches. There are many terrible mistakes to make in program design, and you should go ahead and make them at least once so that you understand them. A sense of what a good program looks like is developed with practice, not learned from a list of rules.\n\n## Why language matters\n\n{{index \"programming language\", \"machine code\", \"binary data\"}}\n\nIn the beginning, at the birth of computing, there were no programming languages. Programs looked something like this:\n\n```{lang: null}\n00110001 00000000 00000000\n00110001 00000001 00000001\n00110011 00000001 00000010\n01010001 00001011 00000010\n00100010 00000010 00001000\n01000011 00000001 00000000\n01000001 00000001 00000001\n00010000 00000010 00000000\n01100010 00000000 00000000\n```\n\n{{index [programming, \"history of\"], \"punch card\", complexity}}\n\nThis is a program to add the numbers from 1 to 10 together and print the result: `1 + 2 + ... + 10 = 55`. It could run on a simple hypothetical machine. To program early computers, it was necessary to set large arrays of switches in the right position or punch holes in strips of cardboard and feed them to the computer. You can imagine how tedious and error prone this procedure was. Even writing simple programs required much cleverness and discipline. Complex ones were nearly inconceivable.\n\n{{index bit, \"wizard (mighty)\"}}\n\nOf course, manually entering these arcane patterns of bits (the ones and zeros) did give the programmer a profound sense of being a mighty wizard. And that has to be worth something in terms of job satisfaction.\n\n{{index memory, instruction}}\n\nEach line of the previous program contains a single instruction. It could be written in English like this:\n\n 1. Store the number 0 in memory location 0.\n 2. Store the number 1 in memory location 1.\n 3. Store the value of memory location 1 in memory location 2.\n 4. Subtract the number 11 from the value in memory location 2.\n 5. If the value in memory location 2 is the number 0, continue with instruction 9.\n 6. Add the value of memory location 1 to memory location 0.\n 7. Add the number 1 to the value of memory location 1.\n 8. Continue with instruction 3.\n 9. Output the value of memory location 0.\n\n{{index readability, naming, binding}}\n\nAlthough that is already more readable than the soup of bits, it is still rather obscure. Using names instead of numbers for the instructions and memory locations helps.\n\n```{lang: \"null\"}\n  Set “total” to 0.\n  Set “count” to 1.\n[loop]\n  Set “compare” to “count”.\n  Subtract 11 from “compare”.\n  If “compare” is 0, continue at [end].\n  Add “count” to “total”.\n  Add 1 to “count”.\n  Continue at [loop].\n[end]\n  Output “total”.\n```\n\n{{index loop, jump, \"summing example\"}}\n\nCan you see how the program works at this point? The first two lines give two memory locations their starting values: `total` will be used to build up the result of the computation, and `count` will keep track of the number that we are currently looking at. The lines using `compare` are probably the most confusing ones. The program wants to see whether `count` is equal to 11 to decide whether it can stop running. Because our hypothetical machine is rather primitive, it can test only whether a number is zero and make a decision based on that. It therefore uses the memory location labeled `compare` to compute the value of `count - 11` and makes a decision based on that value. The next two lines add the value of `count` to the result and increment `count` by 1 every time the program decides that `count` is not 11 yet.\n\nHere is the same program in JavaScript:\n\n```\nlet total = 0, count = 1;\nwhile (count <= 10) {\n  total += count;\n  count += 1;\n}\nconsole.log(total);\n// → 55\n```\n\n{{index \"while loop\", loop, [braces, block]}}\n\nThis version gives us a few more improvements. Most importantly, there is no need to specify the way we want the program to jump back and forth anymore—the `while` construct takes care of that. It continues executing the block (wrapped in braces) below it as long as the condition it was given holds. That condition is `count <= 10`, which means “the count is less than or equal to 10”. We no longer have to create a temporary value and compare that to zero, which was just an uninteresting detail. Part of the power of programming languages is that they can take care of uninteresting details for us.\n\n{{index \"console.log\"}}\n\nAt the end of the program, after the `while` construct has finished, the `console.log` operation is used to write out the result.\n\n{{index \"sum function\", \"range function\", abstraction, function}}\n\nFinally, here is what the program could look like if we happened to have the convenient operations `range` and `sum` available, which respectively create a ((collection)) of numbers within a range and compute the sum of a collection of numbers:\n\n```{startCode: true}\nconsole.log(sum(range(1, 10)));\n// → 55\n```\n\n{{index readability}}\n\nThe moral of this story is that the same program can be expressed in both long and short, unreadable and readable ways. The first version of the program was extremely obscure, whereas this last one is almost English: `log` the `sum` of the `range` of numbers from 1 to 10. (We will see in [later chapters](data) how to define operations like `sum` and `range`.)\n\n{{index [\"programming language\", \"power of\"], composability}}\n\nA good programming language helps the programmer by allowing them to talk about the actions that the computer has to perform on a higher level. It helps omit details, provides convenient building blocks (such as `while` and `console.log`), allows you to define your own building blocks (such as `sum` and `range`), and makes those blocks easy to compose.\n\n## What is JavaScript?\n\n{{index history, Netscape, browser, \"web application\", JavaScript, [JavaScript, \"history of\"], \"World Wide Web\"}}\n\n{{indexsee WWW, \"World Wide Web\"}}\n\n{{indexsee Web, \"World Wide Web\"}}\n\nJavaScript was introduced in 1995 as a way to add programs to web pages in the Netscape Navigator browser. The language has since been adopted by all other major graphical web browsers. It has made modern web applications possible—that is, applications with which you can interact directly without doing a page reload for every action. JavaScript is also used in more traditional websites to provide various forms of interactivity and cleverness.\n\n{{index Java, naming}}\n\nIt is important to note that JavaScript has almost nothing to do with the programming language named Java. The similar name was inspired by marketing considerations rather than good judgment. When JavaScript was being introduced, the Java language was being heavily marketed and was gaining popularity. Someone thought it was a good idea to try to ride along on this success. Now we are stuck with the name.\n\n{{index ECMAScript, compatibility}}\n\nAfter its adoption outside of Netscape, a ((standard)) document was written to describe the way the JavaScript language should work so that the various pieces of software that claimed to support JavaScript could make sure they actually provided the same language. This is called the ECMAScript standard, after the Ecma International organization that conducted the standardization. In practice, the terms ECMAScript and JavaScript can be used interchangeably—they are two names for the same language.\n\n{{index [JavaScript, \"weaknesses of\"], debugging}}\n\nThere are those who will say _terrible_ things about JavaScript. Many of these things are true. When I was required to write something in JavaScript for the first time, I quickly came to despise it. It would accept almost anything I typed but interpret it in a way that was completely different from what I meant. This had a lot to do with the fact that I did not have a clue what I was doing, of course, but there is a real issue here: JavaScript is ridiculously liberal in what it allows. The idea behind this design was that it would make programming in JavaScript easier for beginners. In actuality, it mostly makes finding problems in your programs harder because the system will not point them out to you.\n\n{{index [JavaScript, \"flexibility of\"], flexibility}}\n\nThis flexibility also has its advantages, though. It leaves room for techniques that are impossible in more rigid languages and makes for a pleasant, informal style of programming. After ((learning)) the language properly and working with it for a while, I have come to actually _like_ JavaScript.\n\n{{index future, [JavaScript, \"versions of\"], ECMAScript, \"ECMAScript 6\"}}\n\nThere have been several versions of JavaScript. ECMAScript version 3 was the widely supported version during JavaScript's ascent to dominance, roughly between 2000 and 2010. During this time, work was underway on an ambitious version 4, which planned a number of radical improvements and extensions to the language. Changing a living, widely used language in such a radical way turned out to be politically difficult, and work on version 4 was abandoned in 2008. A much less ambitious version 5, which made only some uncontroversial improvements, came out in 2009. In 2015, version 6 came out, a major update that included some of the ideas planned for version 4. Since then we've had new, small updates every year.\n\nThe fact that JavaScript is evolving means that browsers have to constantly keep up. If you're using an older browser, it may not support every feature. The language designers are careful to not make any changes that could break existing programs, so new browsers can still run old programs. In this book, I'm using the 2024 version of JavaScript.\n\n{{index [JavaScript, \"uses of\"]}}\n\nWeb browsers are not the only platforms on which JavaScript is used. Some databases, such as MongoDB and CouchDB, use JavaScript as their scripting and query language. Several platforms for desktop and server programming, most notably the ((Node.js)) project (the subject of [Chapter ?](node)), provide an environment for programming JavaScript outside of the browser.\n\n## Code, and what to do with it\n\n{{index \"reading code\", \"writing code\"}}\n\n_Code_ is the text that makes up programs. Most chapters in this book contain quite a lot of code. I believe reading code and writing ((code)) are indispensable parts of ((learning)) to program. Try to not just glance over the examples—read them attentively and understand them. This may be slow and confusing at first, but I promise that you'll quickly get the hang of it. The same goes for the ((exercises)). Don't assume you understand them until you've actually written a working solution.\n\n{{index interpretation}}\n\nI recommend you try your solutions to exercises in an actual JavaScript interpreter. That way, you'll get immediate feedback on whether what you are doing is working, and, I hope, you'll be tempted to ((experiment)) and go beyond the exercises.\n\n{{if interactive\n\nWhen reading this book in your browser, you can edit (and run) all example programs by clicking them.\n\nif}}\n\n{{if book\n\n{{index download, sandbox, \"running code\"}}\n\nThe easiest way to run the example code in the book—and to experiment with it—is to look it up in the online version of the book at [_https://eloquentjavascript.net_](https://eloquentjavascript.net/). There, you can click any code example to edit and run it and to see the output it produces. To work on the exercises, go to [_https://eloquentjavascript.net/code_](https://eloquentjavascript.net/code), which provides starting code for each coding exercise and allows you to look at the solutions.\n\nif}}\n\n{{index \"developer tools\", \"JavaScript console\"}}\n\nRunning the programs defined in this book outside of the book's website requires some care. Many examples stand on their own and should work in any JavaScript environment. But code in later chapters is often written for a specific environment (the browser or Node.js) and can run only there. In addition, many chapters define bigger programs, and the pieces of code that appear in them depend on each other or on external files. The [sandbox](https://eloquentjavascript.net/code) on the website provides links to ZIP files containing all the scripts and data files necessary to run the code for a given chapter.\n\n## Overview of this book\n\nThis book contains roughly three parts. The first 12 chapters discuss the JavaScript language. The next seven chapters are about web ((browsers)) and the way JavaScript is used to program them. Finally, two chapters are devoted to ((Node.js)), another environment to program JavaScript in. There are five _project chapters_ in the book that describe larger example programs to give you a taste of actual programming.\n\nThe language part of the book starts with four chapters that introduce the basic structure of the JavaScript language. They discuss [control structures](program_structure) (such as the `while` word you saw in this introduction), [functions](functions) (writing your own building blocks), and [data structures](data). After these, you will be able to write basic programs. Next, Chapters [?](higher_order) and [?](object) introduce techniques to use functions and objects to write more _abstract_ code and keep complexity under control.\n\nAfter a [first project chapter](robot) that builds a crude delivery robot, the language part of the book continues with chapters on [error handling and bug fixing](error), [regular expressions](regexp) (an important tool for working with text), [modularity](modules) (another defense against complexity), and [asynchronous programming](async) (dealing with events that take time). The [second project chapter](language), where we implement a programming language, concludes the first part of the book.\n\nThe second part of the book, Chapters [?](browser) to [?](paint), describes the tools that browser JavaScript has access to. You'll learn to display things on the screen (Chapters [?](dom) and [?](canvas)), respond to user input ([Chapter ?](event)), and communicate over the network ([Chapter ?](http)). There are again two project chapters in this part: building a [platform game](game) and a [pixel paint program](paint).\n\n[Chapter ?](node) describes Node.js, and [Chapter ?](skillsharing) builds a small website using that tool.\n\n{{if commercial\n\nFinally, [Chapter ?](fast) describes some of the considerations that come up when optimizing JavaScript programs for speed.\n\nif}}\n\n## Typographic conventions\n\n{{index \"factorial function\"}}\n\nIn this book, text written in a `monospaced` font will represent elements of programs. Sometimes these are self-sufficient fragments, and sometimes they just refer to part of a nearby program. Programs (of which you have already seen a few) are written as follows:\n\n```\nfunction factorial(n) {\n  if (n == 0) {\n    return 1;\n  } else {\n    return factorial(n - 1) * n;\n  }\n}\n```\n\n{{index \"console.log\"}}\n\nSometimes, to show the output that a program produces, the expected output is written after it, with two slashes and an arrow in front.\n\n```\nconsole.log(factorial(8));\n// → 40320\n```\n\nGood luck!\n"
        },
        {
          "name": "01_values.md",
          "type": "blob",
          "size": 24.9296875,
          "content": "{{meta {docid: values}}}\n\n# Values, Types, and Operators\n\n{{quote {author: \"Master Yuan-Ma\", title: \"The Book of Programming\", chapter: true}\n\nBelow the surface of the machine, the program moves. Without effort, it expands and contracts. In great harmony, electrons scatter and regroup. The forms on the monitor are but ripples on the water. The essence stays invisibly below.\n\nquote}}\n\n{{index \"Yuan-Ma\", \"Book of Programming\"}}\n\n{{figure {url: \"img/chapter_picture_1.jpg\", alt: \"Illustration of a sea of dark and bright dots (bits) with islands in it\", chapter: framed}}}\n\n{{index \"binary data\", data, bit, memory}}\n\nIn the computer's world, there is only data. You can read data, modify data, create new data—but that which isn't data cannot be mentioned. All this data is stored as long sequences of bits and is thus fundamentally alike.\n\n{{index CD, signal}}\n\n_Bits_ are any kind of two-valued things, usually described as zeros and ones. Inside the computer, they take forms such as a high or low electrical charge, a strong or weak signal, or a shiny or dull spot on the surface of a CD. Any piece of discrete information can be reduced to a sequence of zeros and ones and thus represented in bits.\n\n{{index \"binary number\", \"decimal number\"}}\n\nFor example, we can express the number 13 in bits. This works the same way as a decimal number, but instead of 10 different ((digit))s, we have only 2, and the weight of each increases by a factor of 2 from right to left. Here are the bits that make up the number 13, with the weights of the digits shown below them:\n\n```{lang: null}\n   0   0   0   0   1   1   0   1\n 128  64  32  16   8   4   2   1\n```\n\nThat's the binary number 00001101. Its nonzero digits stand for 8, 4, and 1, and add up to 13.\n\n## Values\n\n{{index [memory, organization], \"volatile data storage\", \"hard drive\"}}\n\nImagine a sea of bits—an ocean of them. A typical modern computer has more than 100 billion bits in its volatile data storage (working memory). Nonvolatile storage (the hard disk or equivalent) tends to have yet a few orders of magnitude more.\n\nTo be able to work with such quantities of bits without getting lost, we separate them into chunks that represent pieces of information. In a JavaScript environment, those chunks are called _((value))s_. Though all values are made of bits, they play different roles. Every value has a ((type)) that determines its role. Some values are numbers, some values are pieces of text, some values are functions, and so on.\n\n{{index \"garbage collection\"}}\n\nTo create a value, you must merely invoke its name. This is convenient. You don't have to gather building material for your values or pay for them. You just call for one, and _whoosh_, you have it. Of course, values are not really created from thin air. Each one has to be stored somewhere, and if you want to use a gigantic number of them at the same time, you might run out of computer memory. Fortunately, this is a problem only if you need them all simultaneously. As soon as you no longer use a value, it will dissipate, leaving behind its bits to be recycled as building material for the next generation of values.\n\nThe remainder of this chapter introduces the atomic elements of JavaScript programs, that is, the simple value types and the operators that can act on such values.\n\n## Numbers\n\n{{index [syntax, number], number, [number, notation]}}\n\nValues of the _number_ type are, unsurprisingly, numeric values. In a JavaScript program, they are written as follows:\n\n```\n13\n```\n\n{{index \"binary number\"}}\n\nUsing that in a program will cause the bit pattern for the number 13 to come into existence inside the computer's memory.\n\n{{index [number, representation], bit}}\n\nJavaScript uses a fixed number of bits, 64 of them, to store a single number value. There are only so many patterns you can make with 64 bits, which limits the number of different numbers that can be represented. With _N_ decimal ((digit))s, you can represent 10^N^ numbers. Similarly, given 64 binary digits, you can represent 2^64^ different numbers, which is about 18 quintillion (an 18 with 18 zeros after it). That's a lot.\n\nComputer memory used to be much smaller, and people tended to use groups of 8 or 16 bits to represent their numbers. It was easy to accidentally _((overflow))_ such small numbers—to end up with a number that did not fit into the given number of bits. Today, even computers that fit in your pocket have plenty of memory, so you are free to use 64-bit chunks, and you need to worry about overflow only when dealing with truly astronomical numbers.\n\n{{index sign, \"floating-point number\", \"sign bit\"}}\n\nNot all whole numbers less than 18 quintillion fit in a JavaScript number, though. Those bits also store negative numbers, so one bit indicates the sign of the number. A bigger issue is representing nonwhole numbers. To do this, some of the bits are used to store the position of the decimal point. The actual maximum whole number that can be stored is more in the range of 9 quadrillion (15 zeros)—which is still pleasantly huge.\n\n{{index [number, notation], \"fractional number\"}}\n\nFractional numbers are written using a dot:\n\n```\n9.81\n```\n\n{{index exponent, \"scientific notation\", [number, notation]}}\n\nFor very big or very small numbers, you may also use scientific notation by adding an _e_ (for _exponent_), followed by the exponent of the number.\n\n```\n2.998e8\n```\n\nThat's 2.998 × 10^8^ = 299,800,000.\n\n{{index pi, [number, \"precision of\"], \"floating-point number\"}}\n\nCalculations with whole numbers (also called _((integer))s_) that are smaller than the aforementioned 9 quadrillion are guaranteed to always be precise. Unfortunately, calculations with fractional numbers are generally not. Just as π (pi) cannot be precisely expressed by a finite number of decimal digits, many numbers lose some precision when only 64 bits are available to store them. This is a shame, but it causes practical problems only in specific situations. The important thing is to be aware of it and treat fractional digital numbers as approximations, not as precise values.\n\n### Arithmetic\n\n{{index [syntax, operator], operator, \"binary operator\", arithmetic, addition, multiplication}}\n\nThe main thing to do with numbers is arithmetic. Arithmetic operations such as addition or multiplication take two number values and produce a new number from them. Here is what they look like in JavaScript:\n\n```{meta: \"expr\"}\n100 + 4 * 11\n```\n\n{{index [operator, application], asterisk, \"plus character\", \"* operator\", \"+ operator\"}}\n\nThe `+` and `*` symbols are called _operators_. The first stands for addition and the second stands for multiplication. Putting an operator between two values will apply it to those values and produce a new value.\n\n{{index grouping, parentheses, precedence}}\n\nDoes this example mean \"Add 4 and 100, and multiply the result by 11\", or is the multiplication done before the adding? As you might have guessed, the multiplication happens first. As in mathematics, you can change this by wrapping the addition in parentheses.\n\n```{meta: \"expr\"}\n(100 + 4) * 11\n```\n\n{{index \"hyphen character\", \"slash character\", division, subtraction, minus, \"- operator\", \"/ operator\"}}\n\nFor subtraction, there is the `-` operator. Division can be done with the `/` operator.\n\nWhen operators appear together without parentheses, the order in which they are applied is determined by the _((precedence))_ of the operators. The example shows that multiplication comes before addition. The `/` operator has the same precedence as `*`. Likewise, `+` and `-` have the same precedence. When multiple operators with the same precedence appear next to each other, as in `1 - 2 + 1`, they are applied left to right: `(1 - 2) + 1`.\n\nDon't worry too much about these precedence rules. When in doubt, just add parentheses.\n\n{{index \"modulo operator\", division, \"remainder operator\", \"% operator\"}}\n\nThere is one more arithmetic operator, which you might not immediately recognize. The `%` symbol is used to represent the _remainder_ operation. `X % Y` is the remainder of dividing `X` by `Y`. For example, `314 % 100` produces `14`, and `144 % 12` gives `0`. The remainder operator's precedence is the same as that of multiplication and division. You'll also often see this operator referred to as _modulo_.\n\n### Special numbers\n\n{{index [number, \"special values\"], infinity}}\n\nThere are three special values in JavaScript that are considered numbers but don't behave like normal numbers. The first two are `Infinity` and `-Infinity`, which represent the positive and negative infinities. `Infinity - 1` is still `Infinity`, and so on. Don't put too much trust in infinity-based computation, though. It isn't mathematically sound, and it will quickly lead to the next special number: `NaN`.\n\n{{index NaN, \"not a number\", \"division by zero\"}}\n\n`NaN` stands for \"not a number\", even though it _is_ a value of the number type. You'll get this result when you, for example, try to calculate `0 / 0` (zero divided by zero), `Infinity - Infinity`, or any number of other numeric operations that don't yield a meaningful result.\n\n## Strings\n\n{{indexsee \"grave accent\", backtick}}\n\n{{index [syntax, string], text, character, [string, notation], \"single-quote character\", \"double-quote character\", \"quotation mark\", backtick}}\n\nThe next basic data type is the _((string))_. Strings are used to represent text. They are written by enclosing their content in quotes.\n\n```\n`Down on the sea`\n\"Lie on the ocean\"\n'Float on the ocean'\n```\n\nYou can use single quotes, double quotes, or backticks to mark strings, as long as the quotes at the start and the end of the string match.\n\n{{index \"line break\", \"newline character\"}}\n\nYou can put almost anything between quotes to have JavaScript make a string value out of it. But a few characters are more difficult. You can imagine how putting quotes between quotes might be hard, since they will look like the end of the string. _Newlines_ (the characters you get when you press [enter]{keyname}) can be included only when the string is quoted with backticks (`` ` ``).\n\n{{index [escaping, \"in strings\"], [\"backslash character\", \"in strings\"]}}\n\nTo make it possible to include such characters in a string, the following notation is used: a backslash (`\\`) inside quoted text indicates that the character after it has a special meaning. This is called _escaping_ the character. A quote that is preceded by a backslash will not end the string but be part of it. When an `n` character occurs after a backslash, it is interpreted as a newline. Similarly, a `t` after a backslash means a ((tab character)). Take the following string:\n\n```\n\"This is the first line\\nAnd this is the second\"\n```\n\nThis is the actual text in that string:\n\n```{lang: null}\nThis is the first line\nAnd this is the second\n```\n\nThere are, of course, situations where you want a backslash in a string to be just a backslash, not a special code. If two backslashes follow each other, they will collapse together, and only one will be left in the resulting string value. This is how the string \"_A newline character is written like `\"`\\n`\"`._\" can be expressed:\n\n```\n\"A newline character is written like \\\"\\\\n\\\".\"\n```\n\n{{id unicode}}\n\n{{index [string, representation], Unicode, character}}\n\nStrings, too, have to be modeled as a series of bits to be able to exist inside the computer. The way JavaScript does this is based on the _((Unicode))_ standard. This standard assigns a number to virtually every character you would ever need, including characters from Greek, Arabic, Japanese, Armenian, and so on. If we have a number for every character, a string can be described by a sequence of numbers. And that's what JavaScript does.\n\n{{index \"UTF-16\", emoji}}\n\nThere's a complication though: JavaScript's representation uses 16 bits per string element, which can describe up to 2^16^ different characters. However, Unicode defines more characters than that—about twice as many, at this point. So some characters, such as many emoji, take up two \"character positions\" in JavaScript strings. We'll come back to this in [Chapter ?](higher_order#code_units).\n\n{{index \"+ operator\", concatenation}}\n\nStrings cannot be divided, multiplied, or subtracted. The `+` operator _can_ be used on them, not to add, but to _concatenate_—to glue two strings together. The following line will produce the string `\"concatenate\"`:\n\n```{meta: \"expr\"}\n\"con\" + \"cat\" + \"e\" + \"nate\"\n```\n\nString values have a number of associated functions (_methods_) that can be used to perform other operations on them. I'll say more about these in [Chapter ?](data#methods).\n\n{{index interpolation, backtick}}\n\nStrings written with single or double quotes behave very much the same—the only difference lies in which type of quote you need to escape inside of them. Backtick-quoted strings, usually called _((template literals))_, can do a few more tricks. Apart from being able to span lines, they can also embed other values.\n\n```{meta: \"expr\"}\n`half of 100 is ${100 / 2}`\n```\n\nWhen you write something inside `${}` in a template literal, its result will be computed, converted to a string, and included at that position. This example produces the string `\"half of 100 is 50\"`.\n\n## Unary operators\n\n{{index operator, \"typeof operator\", type}}\n\nNot all operators are symbols. Some are written as words. One example is the `typeof` operator, which produces a string value naming the type of the value you give it.\n\n```\nconsole.log(typeof 4.5)\n// → number\nconsole.log(typeof \"x\")\n// → string\n```\n\n{{index \"console.log\", output, \"JavaScript console\"}}\n\n{{id \"console.log\"}}\n\nWe will use `console.log` in example code to indicate that we want to see the result of evaluating something. (More about that in the [next chapter](program_structure).)\n\n{{index negation, \"- operator\", \"binary operator\", \"unary operator\"}}\n\nThe other operators shown so far in this chapter all operated on two values, but `typeof` takes only one. Operators that use two values are called _binary_ operators, while those that take one are called _unary_ operators. The minus operator (`-`) can be used both as a binary operator and as a unary operator.\n\n```\nconsole.log(- (10 - 2))\n// → -8\n```\n\n## Boolean values\n\n{{index Boolean, operator, true, false, bit}}\n\nIt is often useful to have a value that distinguishes between only two possibilities, like \"yes\" and \"no\" or \"on\" and \"off\". For this purpose, JavaScript has a _Boolean_ type, which has just two values, true and false, written as those words.\n\n### Comparison\n\n{{index comparison}}\n\nHere is one way to produce Boolean values:\n\n```\nconsole.log(3 > 2)\n// → true\nconsole.log(3 < 2)\n// → false\n```\n\n{{index [comparison, \"of numbers\"], \"> operator\", \"< operator\", \"greater than\", \"less than\"}}\n\nThe `>` and `<` signs are the traditional symbols for \"is greater than\" and \"is less than\", respectively. They are binary operators. Applying them results in a Boolean value that indicates whether they hold true in this case.\n\nStrings can be compared in the same way.\n\n```\nconsole.log(\"Aardvark\" < \"Zoroaster\")\n// → true\n```\n\n{{index [comparison, \"of strings\"]}}\n\nThe way strings are ordered is roughly alphabetic but not really what you'd expect to see in a dictionary: uppercase letters are always \"less\" than lowercase ones, so `\"Z\" < \"a\"`, and nonalphabetic characters (!, -, and so on) are also included in the ordering. When comparing strings, JavaScript goes over the characters from left to right, comparing the ((Unicode)) codes one by one.\n\n{{index equality, \">= operator\", \"<= operator\", \"== operator\", \"!= operator\"}}\n\nOther similar operators are `>=` (greater than or equal to), `<=` (less than or equal to), `==` (equal to), and `!=` (not equal to).\n\n```\nconsole.log(\"Garnet\" != \"Ruby\")\n// → true\nconsole.log(\"Pearl\" == \"Amethyst\")\n// → false\n```\n\n{{index [comparison, \"of NaN\"], NaN}}\n\nThere is only one value in JavaScript that is not equal to itself, and that is `NaN` (\"not a number\").\n\n```\nconsole.log(NaN == NaN)\n// → false\n```\n\n`NaN` is supposed to denote the result of a nonsensical computation, and as such, it isn't equal to the result of any _other_ nonsensical computations.\n\n### Logical operators\n\n{{index reasoning, \"logical operators\"}}\n\nThere are also some operations that can be applied to Boolean values themselves. JavaScript supports three logical operators: _and_, _or_, and _not_. These can be used to \"reason\" about Booleans.\n\n{{index \"&& operator\", \"logical and\"}}\n\nThe `&&` operator represents logical _and_. It is a binary operator, and its result is true only if both the values given to it are true.\n\n```\nconsole.log(true && false)\n// → false\nconsole.log(true && true)\n// → true\n```\n\n{{index \"|| operator\", \"logical or\"}}\n\nThe `||` operator denotes logical _or_. It produces true if either of the values given to it is true.\n\n```\nconsole.log(false || true)\n// → true\nconsole.log(false || false)\n// → false\n```\n\n{{index negation, \"! operator\"}}\n\n_Not_ is written as an exclamation mark (`!`). It is a unary operator that flips the value given to it—`!true` produces `false` and `!false` gives `true`.\n\n{{index precedence}}\n\nWhen mixing these Boolean operators with arithmetic and other operators, it is not always obvious when parentheses are needed. In practice, you can usually get by with knowing that of the operators we have seen so far, `||` has the lowest precedence, then comes `&&`, then the comparison operators (`>`, `==`, and so on), and then the rest. This order has been chosen such that, in typical expressions like the following one, as few parentheses as possible are necessary:\n\n```{meta: \"expr\"}\n1 + 1 == 2 && 10 * 10 > 50\n```\n\n{{index \"conditional execution\", \"ternary operator\", \"?: operator\", \"conditional operator\", \"colon character\", \"question mark\"}}\n\nThe last logical operator we will look at is not unary, not binary, but _ternary_, operating on three values. It is written with a question mark and a colon, like this:\n\n```\nconsole.log(true ? 1 : 2);\n// → 1\nconsole.log(false ? 1 : 2);\n// → 2\n```\n\nThis one is called the _conditional_ operator (or sometimes just _the ternary operator_ since it is the only such operator in the language). The operator uses the value to the left of the question mark to decide which of the two other values to \"pick\". If you write `a ? b : c`, the result will be `b` when `a` is true and `c` otherwise.\n\n## Empty values\n\n{{index undefined, null}}\n\nThere are two special values, written `null` and `undefined`, that are used to denote the absence of a _meaningful_ value. They are themselves values, but they carry no information.\n\nMany operations in the language that don't produce a meaningful value yield `undefined` simply because they have to yield _some_ value.\n\nThe difference in meaning between `undefined` and `null` is an accident of JavaScript's design, and it doesn't matter most of the time. In cases where you actually have to concern yourself with these values, I recommend treating them as mostly interchangeable.\n\n## Automatic type conversion\n\n{{index NaN, \"type coercion\"}}\n\nIn the [introduction](intro), I mentioned that JavaScript goes out of its way to accept almost any program you give it, even programs that do odd things. This is nicely demonstrated by the following expressions:\n\n```\nconsole.log(8 * null)\n// → 0\nconsole.log(\"5\" - 1)\n// → 4\nconsole.log(\"5\" + 1)\n// → 51\nconsole.log(\"five\" * 2)\n// → NaN\nconsole.log(false == 0)\n// → true\n```\n\n{{index \"+ operator\", arithmetic, \"* operator\", \"- operator\"}}\n\nWhen an operator is applied to the \"wrong\" type of value, JavaScript will quietly convert that value to the type it needs, using a set of rules that often aren't what you want or expect. This is called _((type coercion))_. The `null` in the first expression becomes `0` and the `\"5\"` in the second expression becomes `5` (from string to number). Yet in the third expression, `+` tries string concatenation before numeric addition, so the `1` is converted to `\"1\"` (from number to string).\n\n{{index \"type coercion\", [number, \"conversion to\"]}}\n\nWhen something that doesn't map to a number in an obvious way (such as `\"five\"` or `undefined`) is converted to a number, you get the value `NaN`. Further arithmetic operations on `NaN` keep producing `NaN`, so if you find yourself getting one of those in an unexpected place, look for accidental type conversions.\n\n{{index null, undefined, [comparison, \"of undefined values\"], \"== operator\"}}\n\nWhen comparing values of the same type using the `==` operator, the outcome is easy to predict: you should get true when both values are the same, except in the case of `NaN`. But when the types differ, JavaScript uses a complicated and confusing set of rules to determine what to do. In most cases, it just tries to convert one of the values to the other value's type. However, when `null` or `undefined` occurs on either side of the operator, it produces true only if both sides are one of `null` or `undefined`.\n\n```\nconsole.log(null == undefined);\n// → true\nconsole.log(null == 0);\n// → false\n```\n\nThat behavior is often useful. When you want to test whether a value has a real value instead of `null` or `undefined`, you can compare it to `null` with the `==` or `!=` operator.\n\n{{index \"type coercion\", [Boolean, \"conversion to\"], \"=== operator\", \"!== operator\", comparison}}\n\nWhat if you want to test whether something refers to the precise value `false`? Expressions like `0 == false` and `\"\" == false` are also true because of automatic type conversion. When you do _not_ want any type conversions to happen, there are two additional operators: `===` and `!==`. The first tests whether a value is _precisely_ equal to the other, and the second tests whether it is not precisely equal. Thus `\"\" === false` is false, as expected.\n\nI recommend using the three-character comparison operators defensively to prevent unexpected type conversions from tripping you up. But when you're certain the types on both sides will be the same, there is no problem with using the shorter operators.\n\n### Short-circuiting of logical operators\n\n{{index \"type coercion\", [Boolean, \"conversion to\"], operator}}\n\nThe logical operators `&&` and `||` handle values of different types in a peculiar way. They will convert the value on their left side to Boolean type in order to decide what to do, but depending on the operator and the result of that conversion, they will return either the _original_ left-hand value or the right-hand value.\n\n{{index \"|| operator\"}}\n\nThe `||` operator, for example, will return the value to its left when that value can be converted to true and will return the value on its right otherwise. This has the expected effect when the values are Boolean and does something analogous for values of other types.\n\n```\nconsole.log(null || \"user\")\n// → user\nconsole.log(\"Agnes\" || \"user\")\n// → Agnes\n```\n\n{{index \"default value\"}}\n\nWe can use this functionality as a way to fall back on a default value. If you have a value that might be empty, you can put `||` after it with a replacement value. If the initial value can be converted to false, you'll get the replacement instead. The rules for converting strings and numbers to Boolean values state that `0`, `NaN`, and the empty string (`\"\"`) count as false, while all the other values count as true. That means `0 || -1` produces `-1`, and `\"\" || \"!?\"` yields `\"!?\"`.\n\n{{index \"?? operator\", null, undefined}}\n\nThe `??` operator resembles `||` but returns the value on the right only if the one on the left is `null` or `undefined`, not if it is some other value that can be converted to `false`. Often, this is preferable to the behavior of `||`.\n\n```\nconsole.log(0 || 100);\n// → 100\nconsole.log(0 ?? 100);\n// → 0\nconsole.log(null ?? 100);\n// → 100\n```\n\n{{index \"&& operator\"}}\n\nThe `&&` operator works similarly but the other way around. When the value to its left is something that converts to false, it returns that value, and otherwise it returns the value on its right.\n\nAnother important property of these two operators is that the part to their right is evaluated only when necessary. In the case of `true || X`, no matter what `X` is—even if it's a piece of program that does something _terrible_—the result will be true, and `X` is never evaluated. The same goes for `false && X`, which is false and will ignore `X`. This is called _((short-circuit evaluation))_.\n\n{{index \"ternary operator\", \"?: operator\", \"conditional operator\"}}\n\nThe conditional operator works in a similar way. Of the second and third values, only the one that is selected is evaluated.\n\n## Summary\n\nWe looked at four types of JavaScript values in this chapter: numbers, strings, Booleans, and undefined values. Such values are created by typing in their name (`true`, `null`) or value (`13`, `\"abc\"`).\n\nYou can combine and transform values with operators. We saw binary operators for arithmetic (`+`, `-`, `*`, `/`, and `%`), string concatenation (`+`), comparison (`==`, `!=`, `===`, `!==`, `<`, `>`, `<=`, `>=`), and logic (`&&`, `||`, `??`), as well as several unary operators (`-` to negate a number, `!` to negate logically, and `typeof` to find a value's type) and a ternary operator (`?:`) to pick one of two values based on a third value.\n\nThis gives you enough information to use JavaScript as a pocket calculator but not much more. The [next chapter](program_structure) will start tying these expressions together into basic programs.\n"
        },
        {
          "name": "02_program_structure.md",
          "type": "blob",
          "size": 36.791015625,
          "content": "# Program Structure\n\n{{quote {author: \"_why\", title: \"Why's (Poignant) Guide to Ruby\", chapter: true}\n\nAnd my heart glows bright red under my filmy, translucent skin and they have to administer 10cc of JavaScript to get me to come back. (I respond well to toxins in the blood.) Man, that stuff will kick the peaches right out your gills!\n\nquote}}\n\n{{index why, \"Poignant Guide\"}}\n\n{{figure {url: \"img/chapter_picture_2.jpg\", alt: \"Illustration showing a number of tentacles holding chess pieces\", chapter: framed}}}\n\nIn this chapter, we will start to do things that can actually be called _programming_. We will expand our command of the JavaScript language beyond the nouns and sentence fragments we've seen so far to the point where we can express meaningful prose.\n\n## Expressions and statements\n\n{{index grammar, [syntax, expression], [code, \"structure of\"], grammar, [JavaScript, syntax]}}\n\nIn [Chapter ?](values), we made values and applied operators to them to get new values. Creating values like this is the main substance of any JavaScript program. But that substance has to be framed in a larger structure to be useful. That's what we'll cover in this chapter.\n\n{{index \"literal expression\", [parentheses, expression]}}\n\nA fragment of code that produces a value is called an _((expression))_. Every value that is written literally (such as `22` or `\"psychoanalysis\"`) is an expression. An expression between parentheses is also an expression, as is a ((binary operator)) applied to two expressions or a ((unary operator)) applied to one.\n\n{{index [nesting, \"of expressions\"], \"human language\"}}\n\nThis shows part of the beauty of a language-based interface. Expressions can contain other expressions in a way similar to how subsentences in human languages are nested—a subsentence can contain its own subsentences, and so on. This allows us to build expressions that describe arbitrarily complex computations.\n\n{{index statement, semicolon, program}}\n\nIf an expression corresponds to a sentence fragment, a JavaScript _statement_ corresponds to a full sentence. A program is a list of statements.\n\n{{index [syntax, statement]}}\n\nThe simplest kind of statement is an expression with a semicolon after it. This is a program:\n\n```\n1;\n!false;\n```\n\nIt is a useless program, though. An ((expression)) can be content to just produce a value, which can then be used by the enclosing code. However, a ((statement)) stands on its own, so if it doesn't affect the world, it's useless. It may display something on the screen, as with `console.log`, or change the state of the machine in a way that will affect the statements that come after it. These changes are called _((side effect))s_. The statements in the previous example just produce the values `1` and `true` and then immediately throw them away. This leaves no impression on the world at all. When you run this program, nothing observable happens.\n\n{{index \"programming style\", \"automatic semicolon insertion\", semicolon}}\n\nIn some cases, JavaScript allows you to omit the semicolon at the end of a statement. In other cases, it has to be there, or the next ((line)) will be treated as part of the same statement. The rules for when it can be safely omitted are somewhat complex and error prone. So in this book, every statement that needs a semicolon will always get one. I recommend you do the same, at least until you've learned more about the subtleties of missing semicolons.\n\n## Bindings\n\n{{indexsee variable, binding}}\n{{index [syntax, statement], [binding, definition], \"side effect\", [memory, organization], [state, in binding]}}\n\nHow does a program keep an internal state? How does it remember things? We have seen how to produce new values from old values, but this does not change the old values, and the new value must be used immediately or it will dissipate again. To catch and hold values, JavaScript provides a thing called a _binding_, or _variable_.\n\n```\nlet caught = 5 * 5;\n```\n\n{{index \"let keyword\"}}\n\nThat gives us a second kind of ((statement)). The special word (_((keyword))_) `let` indicates that this sentence is going to define a binding. It is followed by the name of the binding and, if we want to immediately give it a value, by an `=` operator and an expression.\n\nThe example creates a binding called `caught` and uses it to grab hold of the number that is produced by multiplying 5 by 5.\n\nAfter a binding has been defined, its name can be used as an ((expression)). The value of such an expression is the value the binding currently holds. Here's an example:\n\n```\nlet ten = 10;\nconsole.log(ten * ten);\n// → 100\n```\n\n{{index \"= operator\", assignment, [binding, assignment]}}\n\nWhen a binding points at a value, that does not mean it is tied to that value forever. The `=` operator can be used at any time on existing bindings to disconnect them from their current value and have them point to a new one:\n\n```\nlet mood = \"light\";\nconsole.log(mood);\n// → light\nmood = \"dark\";\nconsole.log(mood);\n// → dark\n```\n\n{{index [binding, \"model of\"], \"tentacle (analogy)\"}}\n\nYou should imagine bindings as tentacles rather than boxes. They do not _contain_ values; they _grasp_ them—two bindings can refer to the same value. A program can access only the values to which it still has a reference. When you need to remember something, you either grow a tentacle to hold on to it or reattach one of your existing tentacles to it.\n\nLet's look at another example. To remember the number of dollars that Luigi still owes you, you create a binding. When he pays back $35, you give this binding a new value.\n\n```\nlet luigisDebt = 140;\nluigisDebt = luigisDebt - 35;\nconsole.log(luigisDebt);\n// → 105\n```\n\n{{index undefined}}\n\nWhen you define a binding without giving it a value, the tentacle has nothing to grasp, so it ends in thin air. If you ask for the value of an empty binding, you'll get the value `undefined`.\n\n{{index \"let keyword\"}}\n\nA single `let` statement may define multiple bindings. The definitions must be separated by commas:\n\n```\nlet one = 1, two = 2;\nconsole.log(one + two);\n// → 3\n```\n\nThe words `var` and `const` can also be used to create bindings, in a similar fashion to `let`.\n\n```\nvar name = \"Ayda\";\nconst greeting = \"Hello \";\nconsole.log(greeting + name);\n// → Hello Ayda\n```\n\n{{index \"var keyword\"}}\n\nThe first of these, `var` (short for \"variable\"), is the way bindings were declared in pre-2015 JavaScript, when `let` didn't exist yet. I'll get back to the precise way it differs from `let` in the [next chapter](functions). For now, remember that it mostly does the same thing, but we'll rarely use it in this book because it behaves oddly in some situations.\n\n{{index \"const keyword\", naming}}\n\nThe word `const` stands for _((constant))_. It defines a constant binding, which points at the same value for as long as it lives. This is useful for bindings that just give a name to a value so that you can easily refer to it later.\n\n## Binding names\n\n{{index \"underscore character\", \"dollar sign\", [binding, naming]}}\n\nBinding names can be any sequence of one or more letters. Digits can be part of binding names—`catch22` is a valid name, for example—but the name must not start with a digit. A binding name may include dollar signs (`$`) or underscores (`_`) but no other punctuation or special characters.\n\n{{index [syntax, identifier], \"implements (reserved word)\", \"interface (reserved word)\", \"package (reserved word)\", \"private (reserved word)\", \"protected (reserved word)\", \"public (reserved word)\", \"static (reserved word)\", \"void operator\", \"yield (reserved word)\", \"enum (reserved word)\", \"reserved word\", [binding, naming]}}\n\nWords with a special meaning, such as `let`, are _((keyword))s_, and may not be used as binding names. There are also a number of words that are \"reserved for use\" in ((future)) versions of JavaScript, which also can't be used as binding names. The full list of keywords and reserved words is rather long:\n\n```{lang: \"null\"}\nbreak case catch class const continue debugger default\ndelete do else enum export extends false finally for\nfunction if implements import interface in instanceof let\nnew package private protected public return static super\nswitch this throw true try typeof var void while with yield\n```\n\n{{index [syntax, error]}}\n\nDon't worry about memorizing this list. When creating a binding produces an unexpected syntax error, check whether you're trying to define a reserved word.\n\n## The environment\n\n{{index \"standard environment\", [browser, environment]}}\n\nThe collection of bindings and their values that exist at a given time is called the _((environment))_. When a program starts up, this environment is not empty. It always contains bindings that are part of the language ((standard)), and most of the time, it also has bindings that provide ways to interact with the surrounding system. For example, in a browser, there are functions to interact with the currently loaded website and to read ((mouse)) and ((keyboard)) input.\n\n## Functions\n\n{{indexsee \"application (of functions)\", [function, application]}}\n{{indexsee \"invoking (of functions)\", [function, application]}}\n{{indexsee \"calling (of functions)\", [function, application]}}\n{{index output, function, [function, application], [browser, environment]}}\n\nA lot of the values provided in the default environment have the type _((function))_. A function is a piece of program wrapped in a value. Such values can be _applied_ in order to run the wrapped program. For example, in a browser environment, the binding `prompt` holds a function that shows a little ((dialog)) asking for user input. It is used like this:\n\n```\nprompt(\"Enter passcode\");\n```\n\n{{figure {url: \"img/prompt.png\", alt: \"A prompt dialog that says 'enter passcode'\", width: \"8cm\"}}}\n\n{{index parameter, [function, application], [parentheses, arguments]}}\n\nExecuting a function is called _invoking_, _calling_, or _applying_ it. You can call a function by putting parentheses after an expression that produces a function value. Usually you'll directly use the name of the binding that holds the function. The values between the parentheses are given to the program inside the function. In the example, the `prompt` function uses the string that we give it as the text to show in the dialog box. Values given to functions are called _((argument))s_. Different functions might need a different number or different types of arguments.\n\nThe `prompt` function isn't used much in modern web programming, mostly because you have no control over the way the resulting dialog looks, but it can be helpful in toy programs and experiments.\n\n## The console.log function\n\n{{index \"JavaScript console\", \"developer tools\", \"Node.js\", \"console.log\", output, [browser, environment]}}\n\nIn the examples, I used `console.log` to output values. Most JavaScript systems (including all modern web browsers and Node.js) provide a `console.log` function that writes out its arguments to _some_ text output device. In browsers, the output lands in the ((JavaScript console)). This part of the browser interface is hidden by default, but most browsers open it when you press F12 or, on a Mac, [command]{keyname}-[option]{keyname}-I. If that does not work, search through the menus for an item named Developer Tools or similar.\n\n{{if interactive\n\nWhen running the examples (or your own code) on the pages of this book, `console.log` output will be shown after the example, instead of in the browser's JavaScript console.\n\n```\nlet x = 30;\nconsole.log(\"the value of x is\", x);\n// → the value of x is 30\n```\n\nif}}\n\n{{index [object, property], [property, access]}}\n\nThough binding names cannot contain ((period character))s, `console.log` does have one. This is because `console.log` isn't a simple binding, but an expression that retrieves the `log` property from the value held by the `console` binding. We'll find out exactly what this means in [Chapter ?](data#properties).\n\n{{id return_values}}\n## Return values\n\n{{index [comparison, \"of numbers\"], \"return value\", \"Math.max function\", maximum}}\n\nShowing a dialog box or writing text to the screen is a _((side effect))_. Many functions are useful because of the side effects they produce. Functions may also produce values, in which case they don't need to have a side effect to be useful. For example, the function `Math.max` takes any amount of number arguments and gives back the greatest.\n\n```\nconsole.log(Math.max(2, 4));\n// → 4\n```\n\n{{index [function, application], minimum, \"Math.min function\"}}\n\nWhen a function produces a value, it is said to _return_ that value. Anything that produces a value is an ((expression)) in JavaScript, which means that function calls can be used within larger expressions. In the following code, a call to `Math.min`, which is the opposite of `Math.max`, is used as part of a plus expression:\n\n```\nconsole.log(Math.min(2, 4) + 100);\n// → 102\n```\n\n[Chapter ?](functions) will explain how to write your own functions.\n\n## Control flow\n\n{{index \"execution order\", program, \"control flow\"}}\n\nWhen your program contains more than one ((statement)), the statements are executed as though they were a story, from top to bottom. For example, the following program has two statements. The first asks the user for a number, and the second, which is executed after the first, shows the ((square)) of that number:\n\n```\nlet theNumber = Number(prompt(\"Pick a number\"));\nconsole.log(\"Your number is the square root of \" +\n            theNumber * theNumber);\n```\n\n{{index [number, \"conversion to\"], \"type coercion\", \"Number function\", \"String function\", \"Boolean function\", [Boolean, \"conversion to\"]}}\n\nThe function `Number` converts a value to a number. We need that conversion because the result of `prompt` is a string value, and we want a number. There are similar functions called `String` and `Boolean` that convert values to those types.\n\nHere is the rather trivial schematic representation of straight-line control flow:\n\n{{figure {url: \"img/controlflow-straight.svg\", alt: \"Diagram showing a straight arrow\", width: \"4cm\"}}}\n\n## Conditional execution\n\n{{index Boolean, [\"control flow\", conditional]}}\n\nNot all programs are straight roads. We may, for example, want to create a branching road where the program takes the proper branch based on the situation at hand. This is called _((conditional execution))_.\n\n{{figure {url: \"img/controlflow-if.svg\", alt: \"Diagram of an arrow that splits in two, and then rejoins again\",width: \"4cm\"}}}\n\n{{index [syntax, statement], \"Number function\", \"if keyword\"}}\n\nConditional execution is created with the `if` keyword in JavaScript. In the simple case, we want some code to be executed if, and only if, a certain condition holds. We might, for example, want to show the square of the input only if the input is actually a number:\n\n```{test: wrap}\nlet theNumber = Number(prompt(\"Pick a number\"));\nif (!Number.isNaN(theNumber)) {\n  console.log(\"Your number is the square root of \" +\n              theNumber * theNumber);\n}\n```\n\nWith this modification, if you enter \"parrot\", no output is shown.\n\n{{index [parentheses, statement]}}\n\nThe `if` keyword executes or skips a statement depending on the value of a Boolean expression. The deciding expression is written after the keyword, between parentheses, followed by the statement to execute.\n\n{{index \"Number.isNaN function\"}}\n\nThe `Number.isNaN` function is a standard JavaScript function that returns `true` only if the argument it is given is `NaN`. The `Number` function happens to return `NaN` when you give it a string that doesn't represent a valid number. Thus, the condition translates to \"unless `theNumber` is not-a-number, do this\".\n\n{{index grouping, \"{} (block)\", [braces, \"block\"]}}\n\nThe statement after the `if` is wrapped in braces (`{` and `}`) in this example. The braces can be used to group any number of statements into a single statement, called a _((block))_. You could also have omitted them in this case, since they hold only a single statement, but to avoid having to think about whether they are needed, most JavaScript programmers use them in every wrapped statement like this. We'll mostly follow that convention in this book, except for the occasional one-liner.\n\n```\nif (1 + 1 == 2) console.log(\"It's true\");\n// → It's true\n```\n\n{{index \"else keyword\"}}\n\nYou often won't just have code that executes when a condition holds true, but also code that handles the other case. This alternate path is represented by the second arrow in the diagram. You can use the `else` keyword, together with `if`, to create two separate, alternative execution paths:\n\n```{test: wrap}\nlet theNumber = Number(prompt(\"Pick a number\"));\nif (!Number.isNaN(theNumber)) {\n  console.log(\"Your number is the square root of \" +\n              theNumber * theNumber);\n} else {\n  console.log(\"Hey. Why didn't you give me a number?\");\n}\n```\n\n{{index [\"if keyword\", chaining]}}\n\nIf you have more than two paths to choose from, you can \"chain\" multiple `if`/`else` pairs together. Here's an example:\n\n```\nlet num = Number(prompt(\"Pick a number\"));\n\nif (num < 10) {\n  console.log(\"Small\");\n} else if (num < 100) {\n  console.log(\"Medium\");\n} else {\n  console.log(\"Large\");\n}\n```\n\nThe program will first check whether `num` is less than 10. If it is, it chooses that branch, shows `\"Small\"`, and is done. If it isn't, it takes the `else` branch, which itself contains a second `if`. If the second condition (`< 100`) holds, that means the number is at least 10 but below 100, and `\"Medium\"` is shown. If it doesn't, the second and last `else` branch is chosen.\n\nThe schema for this program looks something like this:\n\n{{figure {url: \"img/controlflow-nested-if.svg\", alt: \"Diagram showing arrow that splits in two, with on the branches splitting again, before all branches rejoin again\", width: \"4cm\"}}}\n\n{{id loops}}\n## while and do loops\n\nConsider a program that outputs all ((even number))s from 0 to 12. One way to write this is as follows:\n\n```\nconsole.log(0);\nconsole.log(2);\nconsole.log(4);\nconsole.log(6);\nconsole.log(8);\nconsole.log(10);\nconsole.log(12);\n```\n\n{{index [\"control flow\", loop]}}\n\nThat works, but the idea of writing a program is to make something _less_ work, not more. If we needed all even numbers less than 1,000, this approach would be unworkable. What we need is a way to run a piece of code multiple times. This form of control flow is called a _((loop))_.\n\n{{figure {url: \"img/controlflow-loop.svg\", alt: \"Diagram showing an arrow to a point which has a cyclic arrow going back to itself and another arrow going further\", width: \"4cm\"}}}\n\n{{index [syntax, statement], \"counter variable\"}}\n\nLooping control flow allows us to go back to some point in the program where we were before and repeat it with our current program state. If we combine this with a binding that counts, we can do something like this:\n\n```\nlet number = 0;\nwhile (number <= 12) {\n  console.log(number);\n  number = number + 2;\n}\n// → 0\n// → 2\n//   … etcetera\n```\n\n{{index \"while loop\", Boolean, [parentheses, statement]}}\n\nA ((statement)) starting with the keyword `while` creates a loop. The word `while` is followed by an ((expression)) in parentheses and then a statement, much like `if`. The loop keeps entering that statement as long as the expression produces a value that gives `true` when converted to Boolean.\n\n{{index [state, in binding], [binding, as state]}}\n\nThe `number` binding demonstrates the way a ((binding)) can track the progress of a program. Every time the loop repeats, `number` gets a value that is 2 more than its previous value. At the beginning of every repetition, it is compared with the number 12 to decide whether the program's work is finished.\n\n{{index exponentiation}}\n\nAs an example that actually does something useful, we can now write a program that calculates and shows the value of 2^10^ (2 to the 10th power). We use two bindings: one to keep track of our result and one to count how often we have multiplied this result by 2. The loop tests whether the second binding has reached 10 yet and, if not, updates both bindings.\n\n```\nlet result = 1;\nlet counter = 0;\nwhile (counter < 10) {\n  result = result * 2;\n  counter = counter + 1;\n}\nconsole.log(result);\n// → 1024\n```\n\nThe counter could also have started at `1` and checked for `<= 10`, but for reasons that will become apparent in [Chapter ?](data#array_indexing), it is a good idea to get used to counting from 0.\n\n{{index \"** operator\"}}\n\nNote that JavaScript also has an operator for exponentiation (`2 ** 10`), which you would use to compute this in real code—but that would have ruined the example.\n\n{{index \"loop body\", \"do loop\", [\"control flow\", loop]}}\n\nA `do` loop is a control structure similar to a `while` loop. It differs only on one point: a `do` loop always executes its body at least once, and it starts testing whether it should stop only after that first execution. To reflect this, the test appears after the body of the loop:\n\n```\nlet yourName;\ndo {\n  yourName = prompt(\"Who are you?\");\n} while (!yourName);\nconsole.log(\"Hello \" + yourName);\n```\n\n{{index [Boolean, \"conversion to\"], \"! operator\"}}\n\nThis program will force you to enter a name. It will ask again and again until it gets something that is not an empty string. Applying the `!` operator will convert a value to Boolean type before negating it, and all strings except `\"\"` convert to `true`. This means the loop continues going round until you provide a non-empty name.\n\n## Indenting Code\n\n{{index [code, \"structure of\"], [whitespace, indentation], \"programming style\"}}\n\nIn the examples, I've been adding spaces in front of statements that are part of some larger statement. These spaces are not required—the computer will accept the program just fine without them. In fact, even the ((line)) breaks in programs are optional. You could write a program as a single long line if you felt like it.\n\nThe role of this ((indentation)) inside ((block))s is to make the structure of the code stand out to human readers. In code where new blocks are opened inside other blocks, it can become hard to see where one block ends and another begins. With proper indentation, the visual shape of a program corresponds to the shape of the blocks inside it. I like to use two spaces for every open block, but tastes differ—some people use four spaces, and some people use ((tab character))s. The important thing is that each new block adds the same amount of space.\n\n```\nif (false != true) {\n  console.log(\"That makes sense.\");\n  if (1 < 2) {\n    console.log(\"No surprise there.\");\n  }\n}\n```\n\nMost code ((editor)) programs[ (including the one in this book)]{if interactive} will help by automatically indenting new lines the proper amount.\n\n## for loops\n\n{{index [syntax, statement], \"while loop\", \"counter variable\"}}\n\nMany loops follow the pattern shown in the `while` examples. First a \"counter\" binding is created to track the progress of the loop. Then comes a `while` loop, usually with a test expression that checks whether the counter has reached its end value. At the end of the loop body, the counter is updated to track progress.\n\n{{index \"for loop\", loop}}\n\nBecause this pattern is so common, JavaScript and similar languages provide a slightly shorter and more comprehensive form, the `for` loop:\n\n```\nfor (let number = 0; number <= 12; number = number + 2) {\n  console.log(number);\n}\n// → 0\n// → 2\n//   … etcetera\n```\n\n{{index [\"control flow\", loop], state}}\n\nThis program is exactly equivalent to the [earlier](program_structure#loops) even-number-printing example. The only change is that all the ((statement))s that are related to the \"state\" of the loop are grouped together after `for`.\n\n{{index [binding, as state], [parentheses, statement]}}\n\nThe parentheses after a `for` keyword must contain two ((semicolon))s. The part before the first semicolon _initializes_ the loop, usually by defining a binding. The second part is the ((expression)) that _checks_ whether the loop must continue. The final part _updates_ the state of the loop after every iteration. In most cases, this is shorter and clearer than a `while` construct.\n\n{{index exponentiation}}\n\nThis is the code that computes 2^10^ using `for` instead of `while`:\n\n```{test: wrap}\nlet result = 1;\nfor (let counter = 0; counter < 10; counter = counter + 1) {\n  result = result * 2;\n}\nconsole.log(result);\n// → 1024\n```\n\n## Breaking Out of a Loop\n\n{{index [loop, \"termination of\"], \"break keyword\"}}\n\nHaving the looping condition produce `false` is not the only way a loop can finish. The `break` statement has the effect of immediately jumping out of the enclosing loop. Its use is demonstrated in the following program, which finds the first number that is both greater than or equal to 20 and divisible by 7:\n\n```\nfor (let current = 20; ; current = current + 1) {\n  if (current % 7 == 0) {\n    console.log(current);\n    break;\n  }\n}\n// → 21\n```\n\n{{index \"remainder operator\", \"% operator\"}}\n\nUsing the remainder (`%`) operator is an easy way to test whether a number is divisible by another number. If it is, the remainder of their division is zero.\n\n{{index \"for loop\"}}\n\nThe `for` construct in the example does not have a part that checks for the end of the loop. This means that the loop will never stop unless the `break` statement inside is executed.\n\nIf you were to remove that `break` statement or you accidentally write an end condition that always produces `true`, your program would get stuck in an _((infinite loop))_. A program stuck in an infinite loop will never finish running, which is usually a bad thing.\n\n{{if interactive\n\nIf you create an infinite loop in one of the examples on these pages, you'll usually be asked whether you want to stop the script after a few seconds. If that fails, you will have to close the tab that you're working in to recover.\n\nif}}\n\n{{index \"continue keyword\"}}\n\nThe `continue` keyword is similar to `break` in that it influences the progress of a loop. When `continue` is encountered in a loop body, control jumps out of the body and continues with the loop's next iteration.\n\n## Updating bindings succinctly\n\n{{index assignment, \"+= operator\", \"-= operator\", \"/= operator\", \"*= operator\", [state, in binding], \"side effect\"}}\n\nEspecially when looping, a program often needs to \"update\" a binding to hold a value based on that binding's previous value.\n\n```{test: no}\ncounter = counter + 1;\n```\n\nJavaScript provides a shortcut for this:\n\n```{test: no}\ncounter += 1;\n```\n\nSimilar shortcuts work for many other operators, such as `result *= 2` to double `result` or `counter -= 1` to count downward.\n\nThis allows us to further shorten our counting example:\n\n```\nfor (let number = 0; number <= 12; number += 2) {\n  console.log(number);\n}\n```\n\n{{index \"++ operator\", \"-- operator\"}}\n\nFor `counter += 1` and `counter -= 1`, there are even shorter equivalents: `counter++` and `counter--`.\n\n## Dispatching on a value with switch\n\n{{index [syntax, statement], \"conditional execution\", dispatch, [\"if keyword\", chaining]}}\n\nIt is not uncommon for code to look like this:\n\n```{test: no}\nif (x == \"value1\") action1();\nelse if (x == \"value2\") action2();\nelse if (x == \"value3\") action3();\nelse defaultAction();\n```\n\n{{index \"colon character\", \"switch keyword\"}}\n\nThere is a construct called `switch` that is intended to express such a \"dispatch\" in a more direct way. Unfortunately, the syntax JavaScript uses for this (which it inherited from the C/Java line of programming languages) is somewhat awkward—a chain of `if` statements may look better. Here is an example:\n\n```\nswitch (prompt(\"What is the weather like?\")) {\n  case \"rainy\":\n    console.log(\"Remember to bring an umbrella.\");\n    break;\n  case \"sunny\":\n    console.log(\"Dress lightly.\");\n  case \"cloudy\":\n    console.log(\"Go outside.\");\n    break;\n  default:\n    console.log(\"Unknown weather type!\");\n    break;\n}\n```\n\n{{index fallthrough, \"break keyword\", \"case keyword\", \"default keyword\"}}\n\nYou may put any number of `case` labels inside the block opened by `switch`. The program will start executing at the label that corresponds to the value that `switch` was given, or at `default` if no matching value is found. It will continue executing, even across other labels, until it reaches a `break` statement. In some cases, such as the `\"sunny\"` case in the example, this can be used to share some code between cases (it recommends going outside for both sunny and cloudy weather). Be careful, though—it is easy to forget such a `break`, which will cause the program to execute code you do not want executed.\n\n## Capitalization\n\n{{index capitalization, [binding, naming], [whitespace, syntax]}}\n\nBinding names may not contain spaces, yet it is often helpful to use multiple words to clearly describe what the binding represents. These are pretty much your choices for writing a binding name with several words in it:\n\n```{lang: null}\nfuzzylittleturtle\nfuzzy_little_turtle\nFuzzyLittleTurtle\nfuzzyLittleTurtle\n```\n\n{{index \"camel case\", \"programming style\", \"underscore character\"}}\n\nThe first style can be hard to read. I rather like the look of the underscores, though that style is a little painful to type. The ((standard)) JavaScript functions, and most JavaScript programmers, follow the final style—they capitalize every word except the first. It is not hard to get used to little things like that, and code with mixed naming styles can be jarring to read, so we follow this ((convention)).\n\n{{index \"Number function\", constructor}}\n\nIn a few cases, such as the `Number` function, the first letter of a binding is also capitalized. This was done to mark this function as a constructor. It will become clear what a constructor is in [Chapter ?](object#constructors). For now, the important thing is to not be bothered by this apparent lack of ((consistency)).\n\n## Comments\n\n{{index readability}}\n\nOften, raw code does not convey all the information you want a program to convey to human readers, or it conveys it in such a cryptic way that people might not understand it. At other times, you might just want to include some related thoughts as part of your program. This is what _((comment))s_ are for.\n\n{{index \"slash character\", \"line comment\"}}\n\nA comment is a piece of text that is part of a program but is completely ignored by the computer. JavaScript has two ways of writing comments. To write a single-line comment, you can use two slash characters (`//`) and then the comment text after it:\n\n```{test: no}\nlet accountBalance = calculateBalance(account);\n// It's a green hollow where a river sings\naccountBalance.adjust();\n// Madly catching white tatters in the grass.\nlet report = new Report();\n// Where the sun on the proud mountain rings:\naddToReport(accountBalance, report);\n// It's a little valley, foaming like light in a glass.\n```\n\n{{index \"block comment\"}}\n\nA `//` comment goes only to the end of the line. A section of text between `/*` and `*/` will be ignored in its entirety, regardless of whether it contains line breaks. This is useful for adding blocks of information about a file or a chunk of program:\n\n```\n/*\n  I first found this number scrawled on the back of an old\n  notebook. Since then, it has often dropped by, showing up in\n  phone numbers and the serial numbers of products that I've\n  bought. It obviously likes me, so I've decided to keep it.\n*/\nconst myNumber = 11213;\n```\n\n## Summary\n\nYou now know that a program is built out of statements, which themselves sometimes contain more statements. Statements tend to contain expressions, which themselves can be built out of smaller expressions.\n\nPutting statements after one another gives you a program that is executed from top to bottom. You can introduce disturbances in the flow of control by using conditional (`if`, `else`, and `switch`) and looping (`while`, `do`, and `for`) statements.\n\nBindings can be used to file pieces of data under a name, and they are useful for tracking state in your program. The environment is the set of bindings that are defined. JavaScript systems always put a number of useful standard bindings into your environment.\n\nFunctions are special values that encapsulate a piece of program. You can invoke them by writing `functionName(argument1, argument2)`. Such a function call is an expression and may produce a value.\n\n## Exercises\n\n{{index exercises}}\n\nIf you are unsure how to test your solutions to the exercises, refer to the [introduction](intro).\n\nEach exercise starts with a problem description. Read this description and try to solve the exercise. If you run into problems, consider reading the hints [after the exercise]{if interactive}[at the [end of the book](hints)]{if book}. You can find full solutions to the exercises online at [_https://eloquentjavascript.net/code_](https://eloquentjavascript.net/code#2). If you want to learn something from the exercises, I recommend looking at the solutions only after you've solved the exercise, or at least after you've attacked it long and hard enough to have a slight headache.\n\n### Looping a triangle\n\n{{index \"triangle (exercise)\"}}\n\nWrite a ((loop)) that makes seven calls to `console.log` to output the following triangle:\n\n```{lang: null}\n#\n##\n###\n####\n#####\n######\n#######\n```\n\n{{index [string, length]}}\n\nIt may be useful to know that you can find the length of a string by writing `.length` after it.\n\n```\nlet abc = \"abc\";\nconsole.log(abc.length);\n// → 3\n```\n\n{{if interactive\n\nMost exercises contain a piece of code that you can modify to solve the exercise. Remember that you can click code blocks to edit them.\n\n```\n// Your code here.\n```\nif}}\n\n{{hint\n\n{{index \"triangle (exercise)\"}}\n\nYou can start with a program that prints out the numbers 1 to 7, which you can derive by making a few modifications to the [even number printing example](program_structure#loops) given earlier in the chapter, where the `for` loop was introduced.\n\nNow consider the equivalence between numbers and strings of hash characters. You can go from 1 to 2 by adding 1 (`+= 1`). You can go from `\"#\"` to `\"##\"` by adding a character (`+= \"#\"`). Thus, your solution can closely follow the number-printing program.\n\nhint}}\n\n### FizzBuzz\n\n{{index \"FizzBuzz (exercise)\", loop, \"conditional execution\"}}\n\nWrite a program that uses `console.log` to print all the numbers from 1 to 100, with two exceptions. For numbers divisible by 3, print `\"Fizz\"` instead of the number, and for numbers divisible by 5 (and not 3), print `\"Buzz\"` instead.\n\nWhen you have that working, modify your program to print `\"FizzBuzz\"` for numbers that are divisible by both 3 and 5 (and still print `\"Fizz\"` or `\"Buzz\"` for numbers divisible by only one of those).\n\n(This is actually an ((interview question)) that has been claimed to weed out a significant percentage of programmer candidates. So if you solved it, your labor market value just went up.)\n\n{{if interactive\n```\n// Your code here.\n```\nif}}\n\n{{hint\n\n{{index \"FizzBuzz (exercise)\", \"remainder operator\", \"% operator\"}}\n\nGoing over the numbers is clearly a looping job, and selecting what to print is a matter of conditional execution. Remember the trick of using the remainder (`%`) operator for checking whether a number is divisible by another number (has a remainder of zero).\n\nIn the first version, there are three possible outcomes for every number, so you'll have to create an `if`/`else if`/`else` chain.\n\n{{index \"|| operator\", [\"if keyword\", chaining]}}\n\nThe second version of the program has a straightforward solution and a clever one. The simple solution is to add another conditional \"branch\" to precisely test the given condition. For the clever solution, build up a string containing the word or words to output and print either this word or the number if there is no word, potentially by making good use of the `||` operator.\n\nhint}}\n\n### Chessboard\n\n{{index \"chessboard (exercise)\", loop, [nesting, \"of loops\"], \"newline character\"}}\n\nWrite a program that creates a string that represents an 8×8 grid, using newline characters to separate lines. At each position of the grid there is either a space or a \"#\" character. The characters should form a chessboard.\n\nPassing this string to `console.log` should show something like this:\n\n```{lang: null}\n # # # #\n# # # # \n # # # #\n# # # # \n # # # #\n# # # # \n # # # #\n# # # # \n```\n\nWhen you have a program that generates this pattern, define a binding `size = 8` and change the program so that it works for any `size`, outputting a grid of the given width and height.\n\n{{if interactive\n```\n// Your code here.\n```\nif}}\n\n{{hint\n\n{{index \"chess board (exercise)\"}}\n\nYou can build the string by starting with an empty one (`\"\"`) and repeatedly adding characters. A newline character is written `\"\\n\"`.\n\n{{index [nesting, \"of loops\"], [braces, \"block\"]}}\n\nTo work with two ((dimensions)), you will need a ((loop)) inside of a loop. Put braces around the bodies of both loops to make it easy to see where they start and end. Try to properly indent these bodies. The order of the loops must follow the order in which we build up the string (line by line, left to right, top to bottom). So the outer loop handles the lines, and the inner loop handles the characters on a line.\n\n{{index \"counter variable\", \"remainder operator\", \"% operator\"}}\n\nYou'll need two bindings to track your progress. To know whether to put a space or a hash sign at a given position, you could test whether the sum of the two counters is even (`% 2`).\n\nTerminating a line by adding a newline character must happen after the line has been built up, so do this after the inner loop but inside the outer loop.\n\nhint}}\n"
        },
        {
          "name": "03_functions.md",
          "type": "blob",
          "size": 35.455078125,
          "content": "# Functions\n\n{{quote {author: \"Donald Knuth\", chapter: true}\n\nPeople think that computer science is the art of geniuses but the actual reality is the opposite, just many people doing things that build on each other, like a wall of mini stones.\n\nquote}}\n\n{{index \"Knuth, Donald\"}}\n\n{{figure {url: \"img/chapter_picture_3.jpg\", alt: \"Illustration of fern leaves with a fractal shape, bees in the background\", chapter: framed}}}\n\n{{index function, [code, \"structure of\"]}}\n\nFunctions are one of the most central tools in JavaScript programming. The concept of wrapping a piece of program in a value has many uses. It gives us a way to structure larger programs, to reduce repetition, to associate names with subprograms, and to isolate these subprograms from each other.\n\nThe most obvious application of functions is defining new ((vocabulary)). Creating new words in prose is usually bad style, but in programming, it is indispensable.\n\n{{index abstraction, vocabulary}}\n\nTypical adult English speakers have some 20,000 words in their vocabulary. Few programming languages come with 20,000 commands built in. And the vocabulary that _is_ available tends to be more precisely defined, and thus less flexible, than in human language. Therefore, we _have_ to introduce new words to avoid excessive verbosity.\n\n## Defining a function\n\n{{index \"square example\", [function, definition], [binding, definition]}}\n\nA function definition is a regular binding where the value of the binding is a function. For example, this code defines `square` to refer to a function that produces the square of a given number:\n\n```\nconst square = function(x) {\n  return x * x;\n};\n\nconsole.log(square(12));\n// → 144\n```\n\n{{indexsee \"curly braces\", braces}}\n{{index [braces, \"function body\"], block, [syntax, function], \"function keyword\", [function, body], [function, \"as value\"], [parentheses, arguments]}}\n\nA function is created with an expression that starts with the keyword `function`. Functions have a set of _((parameter))s_ (in this case, only `x`) and a _body_, which contains the statements that are to be executed when the function is called. The body of a function created this way must always be wrapped in braces, even when it consists of only a single ((statement)).\n\n{{index \"roundTo example\"}}\n\nA function can have multiple parameters or no parameters at all. In the following example, `makeNoise` does not list any parameter names, whereas `roundTo` (which rounds `n` to the nearest multiple of `step`) lists two:\n\n```\nconst makeNoise = function() {\n  console.log(\"Pling!\");\n};\n\nmakeNoise();\n// → Pling!\n\nconst roundTo = function(n, step) {\n  let remainder = n % step;\n  return n - remainder + (remainder < step / 2 ? 0 : step);\n};\n\nconsole.log(roundTo(23, 10));\n// → 20\n```\n\n{{index \"return value\", \"return keyword\", undefined}}\n\nSome functions, such as `roundTo` and `square`, produce a value, and some don't, such as `makeNoise`, whose only result is a ((side effect)). A `return` statement determines the value the function returns. When control comes across such a statement, it immediately jumps out of the current function and gives the returned value to the code that called the function. A `return` keyword without an expression after it will cause the function to return `undefined`. Functions that don't have a `return` statement at all, such as `makeNoise`, similarly return `undefined`.\n\n{{index parameter, [function, application], [binding, \"from parameter\"]}}\n\nParameters to a function behave like regular bindings, but their initial values are given by the _caller_ of the function, not the code in the function itself.\n\n## Bindings and scopes\n\n{{indexsee \"top-level scope\", \"global scope\"}}\n{{index \"var keyword\", \"global scope\", [binding, global], [binding, \"scope of\"]}}\n\nEach binding has a _((scope))_, which is the part of the program in which the binding is visible. For bindings defined outside of any function, block, or module (see [Chapter ?](modules)), the scope is the whole program—you can refer to such bindings wherever you want. These are called _global_.\n\n{{index \"local scope\", [binding, local]}}\n\nBindings created for function ((parameter))s or declared inside a function can be referenced only in that function, so they are known as _local_ bindings. Every time the function is called, new instances of these bindings are created. This provides some isolation between functions—each function call acts in its own little world (its local environment) and can often be understood without knowing a lot about what's going on in the global environment.\n\n{{index \"let keyword\", \"const keyword\", \"var keyword\"}}\n\nBindings declared with `let` and `const` are in fact local to the _((block))_ in which they are declared, so if you create one of those inside of a loop, the code before and after the loop cannot \"see\" it. In pre-2015 JavaScript, only functions created new scopes, so old-style bindings, created with the `var` keyword, are visible throughout the whole function in which they appear—or throughout the global scope, if they are not in a function.\n\n```\nlet x = 10;   // global\nif (true) {\n  let y = 20; // local to block\n  var z = 30; // also global\n}\n```\n\n{{index [binding, visibility]}}\n\nEach ((scope)) can \"look out\" into the scope around it, so `x` is visible inside the block in the example. The exception is when multiple bindings have the same name—in that case, code can see only the innermost one. For example, when the code inside the `halve` function refers to `n`, it is seeing its _own_ `n`, not the global `n`.\n\n```\nconst halve = function(n) {\n  return n / 2;\n};\n\nlet n = 10;\nconsole.log(halve(100));\n// → 50\nconsole.log(n);\n// → 10\n```\n\n{{id scoping}}\n\n## Nested scope\n\n{{index [nesting, \"of functions\"], [nesting, \"of scope\"], scope, \"inner function\", \"lexical scoping\"}}\n\nJavaScript distinguishes not just global and local bindings. Blocks and functions can be created inside other blocks and functions, producing multiple degrees of locality.\n\n{{index \"landscape example\"}}\n\nFor example, this function—which outputs the ingredients needed to make a batch of hummus—has another function inside it:\n\n```\nconst hummus = function(factor) {\n  const ingredient = function(amount, unit, name) {\n    let ingredientAmount = amount * factor;\n    if (ingredientAmount > 1) {\n      unit += \"s\";\n    }\n    console.log(`${ingredientAmount} ${unit} ${name}`);\n  };\n  ingredient(1, \"can\", \"chickpeas\");\n  ingredient(0.25, \"cup\", \"tahini\");\n  ingredient(0.25, \"cup\", \"lemon juice\");\n  ingredient(1, \"clove\", \"garlic\");\n  ingredient(2, \"tablespoon\", \"olive oil\");\n  ingredient(0.5, \"teaspoon\", \"cumin\");\n};\n```\n\n{{index [function, scope], scope}}\n\nThe code inside the `ingredient` function can see the `factor` binding from the outer function, but its local bindings, such as `unit` or `ingredientAmount`, are not visible in the outer function.\n\nThe set of bindings visible inside a block is determined by the place of that block in the program text. Each local scope can also see all the local scopes that contain it, and all scopes can see the global scope. This approach to binding visibility is called _((lexical scoping))_.\n\n## Functions as values\n\n{{index [function, \"as value\"], [binding, definition]}}\n\nA function binding usually simply acts as a name for a specific piece of the program. Such a binding is defined once and never changed. This makes it easy to confuse the function and its name.\n\n{{index [binding, assignment]}}\n\nBut the two are different. A function value can do all the things that other values can do—you can use it in arbitrary ((expression))s, not just call it. It is possible to store a function value in a new binding, pass it as an argument to a function, and so on. Similarly, a binding that holds a function is still just a regular binding and can, if not constant, be assigned a new value, like so:\n\n```{test: no}\nlet launchMissiles = function() {\n  missileSystem.launch(\"now\");\n};\nif (safeMode) {\n  launchMissiles = function() {/* do nothing */};\n}\n```\n\n{{index [function, \"higher-order\"]}}\n\nIn [Chapter ?](higher_order), we'll discuss the interesting things that we can do by passing function values to other functions.\n\n## Declaration notation\n\n{{index [syntax, function], \"function keyword\", \"square example\", [function, definition], [function, declaration]}}\n\nThere is a slightly shorter way to create a function binding. When the `function` keyword is used at the start of a statement, it works differently:\n\n```{test: wrap}\nfunction square(x) {\n  return x * x;\n}\n```\n\n{{index future, \"execution order\"}}\n\nThis is a function _declaration_. The statement defines the binding `square` and points it at the given function. It is slightly easier to write and doesn't require a semicolon after the function.\n\nThere is one subtlety with this form of function definition.\n\n```\nconsole.log(\"The future says:\", future());\n\nfunction future() {\n  return \"You'll never have flying cars\";\n}\n```\n\nThe preceding code works, even though the function is defined _below_ the code that uses it. Function declarations are not part of the regular top-to-bottom flow of control. They are conceptually moved to the top of their scope and can be used by all the code in that scope. This is sometimes useful because it offers the freedom to order code in a way that seems the clearest, without worrying about having to define all functions before they are used.\n\n## Arrow functions\n\n{{index function, \"arrow function\"}}\n\nThere's a third notation for functions, which looks very different from the others. Instead of the `function` keyword, it uses an arrow (`=>`) made up of an equal sign and a greater-than character (not to be confused with the greater-than-or-equal operator, which is written `>=`):\n\n```{test: wrap}\nconst roundTo = (n, step) => {\n  let remainder = n % step;\n  return n - remainder + (remainder < step / 2 ? 0 : step);\n};\n```\n\n{{index [function, body]}}\n\nThe arrow comes _after_ the list of parameters and is followed by the function's body. It expresses something like \"this input (the ((parameter))s) produces this result (the body)\".\n\n{{index [braces, \"function body\"], \"square example\", [parentheses, arguments]}}\n\nWhen there is only one parameter name, you can omit the parentheses around the parameter list. If the body is a single expression rather than a ((block)) in braces, that expression will be returned from the function. So, these two definitions of `square` do the same thing:\n\n```\nconst square1 = (x) => { return x * x; };\nconst square2 = x => x * x;\n```\n\n{{index [parentheses, arguments]}}\n\nWhen an arrow function has no parameters at all, its parameter list is just an empty set of parentheses.\n\n```\nconst horn = () => {\n  console.log(\"Toot\");\n};\n```\n\n{{index verbosity}}\n\nThere's no deep reason to have both arrow functions and `function` expressions in the language. Apart from a minor detail, which we'll discuss in [Chapter ?](object), they do the same thing. Arrow functions were added in 2015, mostly to make it possible to write small function expressions in a less verbose way. We'll use them often in [Chapter ?](higher_order).\n\n{{id stack}}\n\n## The call stack\n\n{{indexsee stack, \"call stack\"}}\n{{index \"call stack\", [function, application]}}\n\nThe way control flows through functions is somewhat involved. Let's take a closer look at it. Here is a simple program that makes a few function calls:\n\n```\nfunction greet(who) {\n  console.log(\"Hello \" + who);\n}\ngreet(\"Harry\");\nconsole.log(\"Bye\");\n```\n\n{{index [\"control flow\", functions], \"execution order\", \"console.log\"}}\n\nA run through this program goes roughly like this: the call to `greet` causes control to jump to the start of that function (line 2). The function calls `console.log`, which takes control, does its job, and then returns control to line 2. There, it reaches the end of the `greet` function, so it returns to the place that called it—line 4. The line after that calls `console.log` again. After that returns, the program reaches its end.\n\nWe could show the flow of control schematically like this:\n\n```{lang: null}\nnot in function\n  in greet\n    in console.log\n  in greet\nnot in function\n  in console.log\nnot in function\n```\n\n{{index \"return keyword\", [memory, call stack]}}\n\nBecause a function has to jump back to the place that called it when it returns, the computer must remember the context from which the call happened. In one case, `console.log` has to return to the `greet` function when it is done. In the other case, it returns to the end of the program.\n\nThe place where the computer stores this context is the _((call stack))_. Every time a function is called, the current context is stored on top of this stack. When a function returns, it removes the top context from the stack and uses that context to continue execution.\n\n{{index \"infinite loop\", \"stack overflow\", recursion}}\n\nStoring this stack requires space in the computer's memory. When the stack grows too big, the computer will fail with a message like \"out of stack space\" or \"too much recursion\". The following code illustrates this by asking the computer a really hard question that causes an infinite back-and-forth between two functions. Or rather, it _would_ be infinite, if the computer had an infinite stack. As it is, we will run out of space, or \"blow the stack\".\n\n```{test: no}\nfunction chicken() {\n  return egg();\n}\nfunction egg() {\n  return chicken();\n}\nconsole.log(chicken() + \" came first.\");\n// → ??\n```\n\n## Optional Arguments\n\n{{index argument, [function, application]}}\n\nThe following code is allowed and executes without any problem:\n\n```\nfunction square(x) { return x * x; }\nconsole.log(square(4, true, \"hedgehog\"));\n// → 16\n```\n\nWe defined `square` with only one ((parameter)). Yet when we call it with three, the language doesn't complain. It ignores the extra arguments and computes the square of the first one.\n\n{{index undefined}}\n\nJavaScript is extremely broad-minded about the number of arguments you can pass to a function. If you pass too many, the extra ones are ignored. If you pass too few, the missing parameters are assigned the value `undefined`.\n\nThe downside of this is that it is possible—likely, even—that you'll accidentally pass the wrong number of arguments to functions. And no one will tell you about it. The upside is that you can use this behavior to allow a function to be called with different numbers of arguments. For example, this `minus` function tries to imitate the `-` operator by acting on either one or two arguments:\n\n```\nfunction minus(a, b) {\n  if (b === undefined) return -a;\n  else return a - b;\n}\n\nconsole.log(minus(10));\n// → -10\nconsole.log(minus(10, 5));\n// → 5\n```\n\n{{id roundTo}}\n{{index \"optional argument\", \"default value\", parameter, [\"= operator\", \"for default value\"] \"roundTo example\"}}\n\nIf you write an `=` operator after a parameter, followed by an expression, the value of that expression will replace the argument when it is not given. For example, this version of `roundTo` makes its second argument optional. If you don't provide it or pass the value `undefined`, it will default to one:\n\n```{test: wrap}\nfunction roundTo(n, step = 1) {\n  let remainder = n % step;\n  return n - remainder + (remainder < step / 2 ? 0 : step);\n};\n\nconsole.log(roundTo(4.5));\n// → 5\nconsole.log(roundTo(4.5, 2));\n// → 4\n```\n\n{{index \"console.log\"}}\n\nThe [next chapter](data#rest_parameters) will introduce a way in which a function body can get at the whole list of arguments it was passed. This is helpful because it allows a function to accept any number of arguments. For example, `console.log` does this, outputting all the values it is given:\n\n```\nconsole.log(\"C\", \"O\", 2);\n// → C O 2\n```\n\n## Closure\n\n{{index \"call stack\", \"local binding\", [function, \"as value\"], scope}}\n\nThe ability to treat functions as values, combined with the fact that local bindings are re-created every time a function is called, brings up an interesting question: What happens to local bindings when the function call that created them is no longer active?\n\nThe following code shows an example of this. It defines a function, `wrapValue`, that creates a local binding. It then returns a function that accesses and returns this local binding.\n\n```\nfunction wrapValue(n) {\n  let local = n;\n  return () => local;\n}\n\nlet wrap1 = wrapValue(1);\nlet wrap2 = wrapValue(2);\nconsole.log(wrap1());\n// → 1\nconsole.log(wrap2());\n// → 2\n```\n\nThis is allowed and works as you'd hope—both instances of the binding can still be accessed. This situation is a good demonstration of the fact that local bindings are created anew for every call, and different calls don't affect each other's local bindings.\n\nThis feature—being able to reference a specific instance of a local binding in an enclosing scope—is called _((closure))_. A function that references bindings from local scopes around it is called _a_ closure. This behavior not only frees you from having to worry about the lifetimes of bindings but also makes it possible to use function values in some creative ways.\n\n{{index \"multiplier function\"}}\n\nWith a slight change, we can turn the previous example into a way to create functions that multiply by an arbitrary amount.\n\n```\nfunction multiplier(factor) {\n  return number => number * factor;\n}\n\nlet twice = multiplier(2);\nconsole.log(twice(5));\n// → 10\n```\n\n{{index [binding, \"from parameter\"]}}\n\nThe explicit `local` binding from the `wrapValue` example isn't really needed since a parameter is itself a local binding.\n\n{{index [function, \"model of\"]}}\n\nThinking about programs like this takes some practice. A good mental model is to think of function values as containing both the code in their body and the environment in which they are created. When called, the function body sees the environment in which it was created, not the environment in which it is called.\n\nIn the previous example, `multiplier` is called and creates an environment in which its `factor` parameter is bound to 2. The function value it returns, which is stored in `twice`, remembers this environment so that when that is called, it multiplies its argument by 2.\n\n## Recursion\n\n{{index \"power example\", \"stack overflow\", recursion, [function, application]}}\n\nIt is perfectly okay for a function to call itself, as long as it doesn't do it so often that it overflows the stack. A function that calls itself is called _recursive_. Recursion allows some functions to be written in a different style. Take, for example, this `power` function, which does the same as the `**` (exponentiation) operator:\n\n```{test: wrap}\nfunction power(base, exponent) {\n  if (exponent == 0) {\n    return 1;\n  } else {\n    return base * power(base, exponent - 1);\n  }\n}\n\nconsole.log(power(2, 3));\n// → 8\n```\n\n{{index loop, readability, mathematics}}\n\nThis is rather close to the way mathematicians define exponentiation and arguably describes the concept more clearly than the loop we used in [Chapter ?](program_structure). The function calls itself multiple times with ever smaller exponents to achieve the repeated multiplication.\n\n{{index [function, application], efficiency}}\n\nHowever, this implementation has one problem: in typical JavaScript implementations, it's about three times slower than a version using a `for` loop. Running through a simple loop is generally cheaper than calling a function multiple times.\n\n{{index optimization}}\n\nThe dilemma of speed versus ((elegance)) is an interesting one. You can see it as a kind of continuum between human-friendliness and machine-friendliness. Almost any program can be made faster by making it bigger and more convoluted. The programmer has to find an appropriate balance.\n\nIn the case of the `power` function, an inelegant (looping) version is still fairly simple and easy to read. It doesn't make much sense to replace it with a recursive function. Often, though, a program deals with such complex concepts that giving up some efficiency in order to make the program more straightforward is helpful.\n\n{{index profiling}}\n\nWorrying about efficiency can be a distraction. It's yet another factor that complicates program design, and when you're doing something that's already difficult, that extra thing to worry about can be paralyzing.\n\n{{index \"premature optimization\"}}\n\nTherefore, you should generally start by writing something that's correct and easy to understand. If you're worried that it's too slow—which it usually isn't since most code simply isn't executed often enough to take any significant amount of time—you can measure afterward and improve it if necessary.\n\n{{index \"branching recursion\"}}\n\nRecursion is not always just an inefficient alternative to looping. Some problems really are easier to solve with recursion than with loops. Most often these are problems that require exploring or processing several \"branches\", each of which might branch out again into even more branches.\n\n{{id recursive_puzzle}}\n{{index recursion, \"number puzzle example\"}}\n\nConsider this puzzle: by starting from the number 1 and repeatedly either adding 5 or multiplying by 3, an infinite set of numbers can be produced. How would you write a function that, given a number, tries to find a sequence of such additions and multiplications that produces that number? For example, the number 13 could be reached by first multiplying by 3 and then adding 5 twice, whereas the number 15 cannot be reached at all.\n\nHere is a recursive solution:\n\n```\nfunction findSolution(target) {\n  function find(current, history) {\n    if (current == target) {\n      return history;\n    } else if (current > target) {\n      return null;\n    } else {\n      return find(current + 5, `(${history} + 5)`) ??\n             find(current * 3, `(${history} * 3)`);\n    }\n  }\n  return find(1, \"1\");\n}\n\nconsole.log(findSolution(24));\n// → (((1 * 3) + 5) * 3)\n```\n\nNote that this program doesn't necessarily find the _shortest_ sequence of operations. It is satisfied when it finds any sequence at all.\n\nIt's okay if you don't see how this code works right away. Let's work through it since it makes for a great exercise in recursive thinking.\n\nThe inner function `find` does the actual recursing. It takes two ((argument))s: the current number and a string that records how we reached this number. If it finds a solution, it returns a string that shows how to get to the target. If it can find no solution starting from this number, it returns `null`.\n\n{{index null, \"?? operator\", \"short-circuit evaluation\"}}\n\nTo do this, the function performs one of three actions. If the current number is the target number, the current history is a way to reach that target, so it is returned. If the current number is greater than the target, there's no sense in further exploring this branch because both adding and multiplying will only make the number bigger, so it returns `null`. Finally, if we're still below the target number, the function tries both possible paths that start from the current number by calling itself twice, once for addition and once for multiplication. If the first call returns something that is not `null`, it is returned. Otherwise, the second call is returned, regardless of whether it produces a string or `null`.\n\n{{index \"call stack\"}}\n\nTo better understand how this function produces the effect we're looking for, let's look at all the calls to `find` that are made when searching for a solution for the number 13:\n\n```{lang: null}\nfind(1, \"1\")\n  find(6, \"(1 + 5)\")\n    find(11, \"((1 + 5) + 5)\")\n      find(16, \"(((1 + 5) + 5) + 5)\")\n        too big\n      find(33, \"(((1 + 5) + 5) * 3)\")\n        too big\n    find(18, \"((1 + 5) * 3)\")\n      too big\n  find(3, \"(1 * 3)\")\n    find(8, \"((1 * 3) + 5)\")\n      find(13, \"(((1 * 3) + 5) + 5)\")\n        found!\n```\n\nThe indentation indicates the depth of the call stack. The first time `find` is called, the function starts by calling itself to explore the solution that starts with `(1 + 5)`. That call will further recurse to explore _every_ continued solution that yields a number less than or equal to the target number. Since it doesn't find one that hits the target, it returns `null` back to the first call. There the `??` operator causes the call that explores `(1 * 3)` to happen. This search has more luck—its first recursive call, through yet _another_ recursive call, hits upon the target number. That innermost call returns a string, and each of the `??` operators in the intermediate calls passes that string along, ultimately returning the solution.\n\n## Growing functions\n\n{{index [function, definition]}}\n\nThere are two more or less natural ways for functions to be introduced into programs.\n\n{{index repetition}}\n\nThe first occurs when you find yourself writing similar code multiple times. You'd prefer not to do that, as having more code means more space for mistakes to hide and more material to read for people trying to understand the program. So you take the repeated functionality, find a good name for it, and put it into a function.\n\nThe second way is that you find you need some functionality that you haven't written yet and that sounds like it deserves its own function. You start by naming the function, and then write its body. You might even start writing code that uses the function before you actually define the function itself.\n\n{{index [function, naming], [binding, naming]}}\n\nHow difficult it is to find a good name for a function is a good indication of how clear a concept it is that you're trying to wrap. Let's go through an example.\n\n{{index \"farm example\"}}\n\nWe want to write a program that prints two numbers: the numbers of cows and chickens on a farm, with the words `Cows` and `Chickens` after them and zeros padded before both numbers so that they are always three digits long:\n\n```{lang: null}\n007 Cows\n011 Chickens\n```\n\nThis asks for a function of two arguments—the number of cows and the number of chickens. Let's get coding.\n\n```\nfunction printFarmInventory(cows, chickens) {\n  let cowString = String(cows);\n  while (cowString.length < 3) {\n    cowString = \"0\" + cowString;\n  }\n  console.log(`${cowString} Cows`);\n  let chickenString = String(chickens);\n  while (chickenString.length < 3) {\n    chickenString = \"0\" + chickenString;\n  }\n  console.log(`${chickenString} Chickens`);\n}\nprintFarmInventory(7, 11);\n```\n\n{{index [\"length property\", \"for string\"], \"while loop\"}}\n\nWriting `.length` after a string expression will give us the length of that string. Thus, the `while` loops keep adding zeros in front of the number strings until they are at least three characters long.\n\nMission accomplished! But just as we are about to send the farmer the code (along with a hefty invoice), she calls and tells us she's also started keeping pigs, and couldn't we please extend the software to also print pigs?\n\n{{index \"copy-paste programming\"}}\n\nWe sure can. But just as we're in the process of copying and pasting those four lines one more time, we stop and reconsider. There has to be a better way. Here's a first attempt:\n\n```\nfunction printZeroPaddedWithLabel(number, label) {\n  let numberString = String(number);\n  while (numberString.length < 3) {\n    numberString = \"0\" + numberString;\n  }\n  console.log(`${numberString} ${label}`);\n}\n\nfunction printFarmInventory(cows, chickens, pigs) {\n  printZeroPaddedWithLabel(cows, \"Cows\");\n  printZeroPaddedWithLabel(chickens, \"Chickens\");\n  printZeroPaddedWithLabel(pigs, \"Pigs\");\n}\n\nprintFarmInventory(7, 11, 3);\n```\n\n{{index [function, naming]}}\n\nIt works! But that name, `printZeroPaddedWithLabel`, is a little awkward. It conflates three things—printing, zero-padding, and adding a label—into a single function.\n\n{{index \"zeroPad function\"}}\n\nInstead of lifting out the repeated part of our program wholesale, let's try to pick out a single _concept_:\n\n```\nfunction zeroPad(number, width) {\n  let string = String(number);\n  while (string.length < width) {\n    string = \"0\" + string;\n  }\n  return string;\n}\n\nfunction printFarmInventory(cows, chickens, pigs) {\n  console.log(`${zeroPad(cows, 3)} Cows`);\n  console.log(`${zeroPad(chickens, 3)} Chickens`);\n  console.log(`${zeroPad(pigs, 3)} Pigs`);\n}\n\nprintFarmInventory(7, 16, 3);\n```\n\n{{index readability, \"pure function\"}}\n\nA function with a nice, obvious name like `zeroPad` makes it easier for someone who reads the code to figure out what it does. Such a function is also useful in more situations than just this specific program. For example, you could use it to help print nicely aligned tables of numbers.\n\n{{index [interface, design]}}\n\nHow smart and versatile _should_ our function be? We could write anything, from a terribly simple function that can only pad a number to be three characters wide to a complicated generalized number-formatting system that handles fractional numbers, negative numbers, alignment of decimal dots, padding with different characters, and so on.\n\nA useful principle is to refrain from adding cleverness unless you are absolutely sure you're going to need it. It can be tempting to write general \"((framework))s\" for every bit of functionality you come across. Resist that urge. You won't get any real work done—you'll be too busy writing code that you never use.\n\n{{id pure}}\n## Functions and side effects\n\n{{index \"side effect\", \"pure function\", [function, purity]}}\n\nFunctions can be roughly divided into those that are called for their side effects and those that are called for their return value (though it is also possible to both have side effects and return a value).\n\n{{index reuse}}\n\nThe first helper function in the ((farm example)), `printZeroPaddedWithLabel`, is called for its side effect: it prints a line. The second version, `zeroPad`, is called for its return value. It is no coincidence that the second is useful in more situations than the first. Functions that create values are easier to combine in new ways than functions that directly perform side effects.\n\n{{index substitution}}\n\nA _pure_ function is a specific kind of value-producing function that not only has no side effects but also doesn't rely on side effects from other code—for example, it doesn't read global bindings whose value might change. A pure function has the pleasant property that, when called with the same arguments, it always produces the same value (and doesn't do anything else). A call to such a function can be substituted by its return value without changing the meaning of the code. When you are not sure that a pure function is working correctly, you can test it by simply calling it and know that if it works in that context, it will work in any context. Nonpure functions tend to require more scaffolding to test.\n\n{{index optimization, \"console.log\"}}\n\nStill, there's no need to feel bad when writing functions that are not pure. Side effects are often useful. There's no way to write a pure version of `console.log`, for example, and `console.log` is good to have. Some operations are also easier to express in an efficient way when we use side effects.\n\n## Summary\n\nThis chapter taught you how to write your own functions. The `function` keyword, when used as an expression, can create a function value. When used as a statement, it can be used to declare a binding and give it a function as its value. Arrow functions are yet another way to create functions.\n\n```\n// Define f to hold a function value\nconst f = function(a) {\n  console.log(a + 2);\n};\n\n// Declare g to be a function\nfunction g(a, b) {\n  return a * b * 3.5;\n}\n\n// A less verbose function value\nlet h = a => a % 3;\n```\n\nA key part of understanding functions is understanding scopes. Each block creates a new scope. Parameters and bindings declared in a given scope are local and not visible from the outside. Bindings declared with `var` behave differently—they end up in the nearest function scope or the global scope.\n\nSeparating the tasks your program performs into different functions is helpful. You won't have to repeat yourself as much, and functions can help organize a program by grouping code into pieces that do specific things.\n\n## Exercises\n\n### Minimum\n\n{{index \"Math object\", \"minimum (exercise)\", \"Math.min function\", minimum}}\n\nThe [previous chapter](program_structure#return_values) introduced the standard function `Math.min` that returns its smallest argument. We can write a function like that ourselves now. Define the function `min` that takes two arguments and returns their minimum.\n\n{{if interactive\n\n```{test: no}\n// Your code here.\n\nconsole.log(min(0, 10));\n// → 0\nconsole.log(min(0, -10));\n// → -10\n```\nif}}\n\n{{hint\n\n{{index \"minimum (exercise)\"}}\n\nIf you have trouble putting braces and parentheses in the right place to get a valid function definition, start by copying one of the examples in this chapter and modifying it.\n\n{{index \"return keyword\"}}\n\nA function may contain multiple `return` statements.\n\nhint}}\n\n### Recursion\n\n{{index recursion, \"isEven (exercise)\", \"even number\"}}\n\nWe've seen that we can use `%` (the remainder operator) to test whether a number is even or odd by using `% 2` to see whether it's divisible by two. Here's another way to define whether a positive whole number is even or odd:\n\n- Zero is even.\n\n- One is odd.\n\n- For any other number _N_, its evenness is the same as _N_ - 2.\n\nDefine a recursive function `isEven` corresponding to this description. The function should accept a single parameter (a positive, whole number) and return a Boolean.\n\n{{index \"stack overflow\"}}\n\nTest it on 50 and 75. See how it behaves on -1. Why? Can you think of a way to fix this?\n\n{{if interactive\n\n```{test: no}\n// Your code here.\n\nconsole.log(isEven(50));\n// → true\nconsole.log(isEven(75));\n// → false\nconsole.log(isEven(-1));\n// → ??\n```\n\nif}}\n\n{{hint\n\n{{index \"isEven (exercise)\", [\"if keyword\", chaining], recursion}}\n\nYour function will likely look somewhat similar to the inner `find` function in the recursive `findSolution` [example](functions#recursive_puzzle) in this chapter, with an `if`/`else if`/`else` chain that tests which of the three cases applies. The final `else`, corresponding to the third case, makes the recursive call. Each of the branches should contain a `return` statement or in some other way arrange for a specific value to be returned.\n\n{{index \"stack overflow\"}}\n\nWhen given a negative number, the function will recurse again and again, passing itself an ever more negative number, thus getting further and further away from returning a result. It will eventually run out of stack space and abort.\n\nhint}}\n\n### Bean counting\n\n{{index \"bean counting (exercise)\", [string, indexing], \"zero-based counting\", [\"length property\", \"for string\"]}}\n\nYou can get the *N*th character, or letter, from a string by writing `[N]` after the string (for example, `string[2]`). The resulting value will be a string containing only one character (for example, `\"b\"`). The first character has position 0, which causes the last one to be found at position `string.length - 1`. In other words, a two-character string has length 2, and its characters have positions 0 and 1.\n\nWrite a function called `countBs` that takes a string as its only argument and returns a number that indicates how many uppercase B characters there are in the string.\n\nNext, write a function called `countChar` that behaves like `countBs`, except it takes a second argument that indicates the character that is to be counted (rather than counting only uppercase B characters). Rewrite `countBs` to make use of this new function.\n\n{{if interactive\n\n```{test: no}\n// Your code here.\n\nconsole.log(countBs(\"BOB\"));\n// → 2\nconsole.log(countChar(\"kakkerlak\", \"k\"));\n// → 4\n```\n\nif}}\n\n{{hint\n\n{{index \"bean counting (exercise)\", [\"length property\", \"for string\"], \"counter variable\"}}\n\nYour function will need a ((loop)) that looks at every character in the string. It can run an index from zero to one below its length (`< string.length`). If the character at the current position is the same as the one the function is looking for, it adds 1 to a counter variable. Once the loop has finished, the counter can be returned.\n\n{{index \"local binding\"}}\n\nTake care to make all the bindings used in the function _local_ to the function by properly declaring them with the `let` or `const` keyword.\n\nhint}}\n"
        },
        {
          "name": "04_data.md",
          "type": "blob",
          "size": 58.0244140625,
          "content": "{{meta {load_files: [\"code/journal.js\", \"code/chapter/04_data.js\"], zip: \"node/html\"}}}\n\n# Data Structures: Objects and Arrays\n\n{{quote {author: \"Charles Babbage\", title: \"Passages from the Life of a Philosopher (1864)\", chapter: true}\n\nOn two occasions I have been asked, 'Pray, Mr. Babbage, if you put into the machine wrong figures, will the right answers come out?' [...] I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a question.\n\nquote}}\n\n{{index \"Babbage, Charles\"}}\n\n{{figure {url: \"img/chapter_picture_4.jpg\", alt: \"Illustration of a squirrel next to a pile of books and a pair of glasses. A moon and stars are visible in the background.\", chapter: framed}}}\n\n{{index object, \"data structure\"}}\n\nNumbers, Booleans, and strings are the atoms from which ((data)) structures are built. Many types of information require more than one atom, though. _Objects_ allow us to group values—including other objects—to build more complex structures.\n\nThe programs we have built so far have been limited by the fact that they were operating only on simple data types. After learning the basics of data structures in this chapter, you'll know enough to start writing useful programs.\n\nThe chapter will work through a more or less realistic programming example, introducing concepts as they apply to the problem at hand. The example code will often build on functions and bindings introduced earlier in the book.\n\n{{if book\n\nThe online coding ((sandbox)) for the book ([_https://eloquentjavascript.net/code_](https://eloquentjavascript.net/code)) provides a way to run code in the context of a particular chapter. If you decide to work through the examples in another environment, be sure to first download the full code for this chapter from the sandbox page.\n\nif}}\n\n## The weresquirrel\n\n{{index \"weresquirrel example\", lycanthropy}}\n\nEvery now and then, usually between 8 p.m. and 10 p.m., ((Jacques)) finds himself transforming into a small furry rodent with a bushy tail.\n\nOn one hand, Jacques is quite glad that he doesn't have classic lycanthropy. Turning into a squirrel does cause fewer problems than turning into a wolf. Instead of having to worry about accidentally eating the neighbor (_that_ would be awkward), he worries about being eaten by the neighbor's cat. After two occasions of waking up on a precariously thin branch in the crown of an oak, naked and disoriented, he has taken to locking the doors and windows of his room at night and putting a few walnuts on the floor to keep himself busy.\n\nBut Jacques would prefer to get rid of his condition entirely. The irregular occurrences of the transformation make him suspect that they might be triggered by something. For a while, he believed that it happened only on days when he had been near oak trees. However, avoiding oak trees did not solve the problem.\n\n{{index journal}}\n\nSwitching to a more scientific approach, Jacques has started keeping a daily log of everything he does on a given day and whether he changed form. With this data he hopes to narrow down the conditions that trigger the transformations.\n\nThe first thing he needs is a data structure to store this information.\n\n## Datasets\n\n{{index [\"data structure\", collection], [memory, organization]}}\n\nTo work with a chunk of digital data, we first have to find a way to represent it in our machine's memory. Say, for example, that we want to represent a ((collection)) of the numbers 2, 3, 5, 7, and 11.\n\n{{index string}}\n\nWe could get creative with strings—after all, strings can have any length, so we can put a lot of data into them—and use `\"2 3 5 7 11\"` as our representation. But this is awkward. We'd have to somehow extract the digits and convert them back to numbers to access them.\n\n{{index [array, creation], \"[] (array)\"}}\n\nFortunately, JavaScript provides a data type specifically for storing sequences of values. It is called an _array_ and is written as a list of values between ((square brackets)), separated by commas.\n\n```\nlet listOfNumbers = [2, 3, 5, 7, 11];\nconsole.log(listOfNumbers[2]);\n// → 5\nconsole.log(listOfNumbers[0]);\n// → 2\nconsole.log(listOfNumbers[2 - 1]);\n// → 3\n```\n\n{{index \"[] (subscript)\", [array, indexing]}}\n\nThe notation for getting at the elements inside an array also uses ((square brackets)). A pair of square brackets immediately after an expression, with another expression inside of them, will look up the element in the left-hand expression that corresponds to the _((index))_ given by the expression in the brackets.\n\n{{id array_indexing}}\n{{index \"zero-based counting\"}}\n\nThe first index of an array is zero, not one, so the first element is retrieved with `listOfNumbers[0]`. Zero-based counting has a long tradition in technology and in certain ways makes a lot of sense, but it takes some getting used to. Think of the index as the number of items to skip, counting from the start of the array.\n\n{{id properties}}\n\n## Properties\n\n{{index \"Math object\", \"Math.max function\", [\"length property\", \"for string\"], [object, property], \"period character\", [property, access]}}\n\nWe've seen a few expressions like `myString.length` (to get the length of a string) and `Math.max` (the maximum function) in past chapters. These expressions access a _property_ of some value. In the first case, we access the `length` property of the value in `myString`. In the second, we access the property named `max` in the `Math` object (which is a collection of mathematics-related constants and functions).\n\n{{index [property, access], null, undefined}}\n\nAlmost all JavaScript values have properties. The exceptions are `null` and `undefined`. If you try to access a property on one of these nonvalues, you get an error:\n\n```{test: no}\nnull.length;\n// → TypeError: null has no properties\n```\n\n{{indexsee \"dot character\", \"period character\"}}\n{{index \"[] (subscript)\", \"period character\", \"square brackets\", \"computed property\", [property, access]}}\n\nThe two main ways to access properties in JavaScript are with a dot and with square brackets. Both `value.x` and `value[x]` access a property on `value`—but not necessarily the same property. The difference is in how `x` is interpreted. When using a dot, the word after the dot is the literal name of the property. When using square brackets, the expression between the brackets is _evaluated_ to get the property name. Whereas `value.x` fetches the property of `value` named \"x\", `value[x]` takes the value of the variable named `x` and uses that, converted to a string, as the property name.\n\nIf you know that the property in which you are interested is called _color_, you say `value.color`. If you want to extract the property named by the value held in the binding `i`, you say `value[i]`. Property names are strings. They can be any string, but the dot notation works only with names that look like valid binding names—starting with a letter or underscore, and containing only letters, numbers, and underscores. If you want to access a property named _2_ or _John Doe_, you must use square brackets: `value[2]` or `value[\"John Doe\"]`.\n\nThe elements in an ((array)) are stored as the array's properties, using numbers as property names. Because you can't use the dot notation with numbers and usually want to use a binding that holds the index anyway, you have to use the bracket notation to get at them.\n\n{{index [\"length property\", \"for array\"], [array, \"length of\"]}}\n\nJust like strings, arrays have a `length` property that tells us how many elements the array has.\n\n{{id methods}}\n\n## Methods\n\n{{index [function, \"as property\"], method, string}}\n\nBoth string and array values contain, in addition to the `length` property, a number of properties that hold function values.\n\n```\nlet doh = \"Doh\";\nconsole.log(typeof doh.toUpperCase);\n// → function\nconsole.log(doh.toUpperCase());\n// → DOH\n```\n\n{{index \"case conversion\", \"toUpperCase method\", \"toLowerCase method\"}}\n\nEvery string has a `toUpperCase` property. When called, it will return a copy of the string in which all letters have been converted to uppercase. There is also `toLowerCase`, going the other way.\n\n{{index \"this binding\"}}\n\nInterestingly, even though the call to `toUpperCase` does not pass any arguments, the function somehow has access to the string `\"Doh\"`, the value whose property we called. You'll find out how this works in [Chapter ?](object#obj_methods).\n\nProperties that contain functions are generally called _methods_ of the value they belong to, as in \"`toUpperCase` is a method of a string\".\n\n{{id array_methods}}\n\nThis example demonstrates two methods you can use to manipulate arrays.\n\n```\nlet sequence = [1, 2, 3];\nsequence.push(4);\nsequence.push(5);\nconsole.log(sequence);\n// → [1, 2, 3, 4, 5]\nconsole.log(sequence.pop());\n// → 5\nconsole.log(sequence);\n// → [1, 2, 3, 4]\n```\n\n{{index collection, array, \"push method\", \"pop method\"}}\n\nThe `push` method adds values to the end of an array. The `pop` method does the opposite, removing the last value in the array and returning it.\n\n{{index [\"data structure\", stack]}}\n\nThese somewhat silly names are the traditional terms for operations on a _((stack))_. A stack, in programming, is a data structure that allows you to push values into it and pop them out again in the opposite order so that the thing that was added last is removed first. Stacks are common in programming—you might remember the function ((call stack)) from [the previous chapter](functions#stack), which is an instance of the same idea.\n\n## Objects\n\n{{index journal, \"weresquirrel example\", array, record}}\n\nBack to the weresquirrel. A set of daily log entries can be represented as an array, but the entries do not consist of just a number or a string—each entry needs to store a list of activities and a Boolean value that indicates whether Jacques turned into a squirrel or not. Ideally, we would like to group these together into a single value and then put those grouped values into an array of log entries.\n\n{{index [syntax, object], [property, definition], [braces, object], \"{} (object)\"}}\n\nValues of the type _((object))_ are arbitrary collections of properties. One way to create an object is by using braces as an expression.\n\n```\nlet day1 = {\n  squirrel: false,\n  events: [\"work\", \"touched tree\", \"pizza\", \"running\"]\n};\nconsole.log(day1.squirrel);\n// → false\nconsole.log(day1.wolf);\n// → undefined\nday1.wolf = false;\nconsole.log(day1.wolf);\n// → false\n```\n\n{{index [quoting, \"of object properties\"], \"colon character\"}}\n\nInside the braces, you write a list of properties separated by commas. Each property has a name followed by a colon and a value. When an object is written over multiple lines, indenting it as shown in this example helps with readability. Properties whose names aren't valid binding names or valid numbers must be quoted:\n\n```\nlet descriptions = {\n  work: \"Went to work\",\n  \"touched tree\": \"Touched a tree\"\n};\n```\n\n{{index [braces, object]}}\n\nThis means that braces have _two_ meanings in JavaScript. At the start of a ((statement)), they begin a ((block)) of statements. In any other position, they describe an object. Fortunately, it is rarely useful to start a statement with an object in braces, so the ambiguity between these two is not much of a problem. The one case where this does come up is when you want to return an object from a shorthand arrow function—you can't write `n => {prop: n}` since the braces will be interpreted as a function body. Instead, you have to put a set of parentheses around the object to make it clear that it is an expression.\n\n{{index undefined}}\n\nReading a property that doesn't exist will give you the value `undefined`.\n\n{{index [property, assignment], mutability, \"= operator\"}}\n\nIt is possible to assign a value to a property expression with the `=` operator. This will replace the property's value if it already existed or create a new property on the object if it didn't.\n\n{{index \"tentacle (analogy)\", [property, \"model of\"], [binding, \"model of\"]}}\n\nTo briefly return to our tentacle model of ((binding))s—property bindings are similar. They _grasp_ values, but other bindings and properties might be holding onto those same values. You can think of objects as octopuses with any number of tentacles, each of which has a name written on it.\n\n{{index \"delete operator\", [property, deletion]}}\n\nThe `delete` operator cuts off a tentacle from such an octopus. It is a unary operator that, when applied to an object property, will remove the named property from the object. This is not a common thing to do, but it is possible.\n\n```\nlet anObject = {left: 1, right: 2};\nconsole.log(anObject.left);\n// → 1\ndelete anObject.left;\nconsole.log(anObject.left);\n// → undefined\nconsole.log(\"left\" in anObject);\n// → false\nconsole.log(\"right\" in anObject);\n// → true\n```\n\n{{index \"in operator\", [property, \"testing for\"], object}}\n\nThe binary `in` operator, when applied to a string and an object, tells you whether that object has a property with that name. The difference between setting a property to `undefined` and actually deleting it is that in the first case, the object still _has_ the property (it just doesn't have a very interesting value), whereas in the second case, the property is no longer present and `in` will return `false`.\n\n{{index \"Object.keys function\"}}\n\nTo find out what properties an object has, you can use the `Object.keys` function. Give the function an object and it will return an array of strings—the object's property names:\n\n```\nconsole.log(Object.keys({x: 0, y: 0, z: 2}));\n// → [\"x\", \"y\", \"z\"]\n```\n\nThere's an `Object.assign` function that copies all properties from one object into another:\n\n```\nlet objectA = {a: 1, b: 2};\nObject.assign(objectA, {b: 3, c: 4});\nconsole.log(objectA);\n// → {a: 1, b: 3, c: 4}\n```\n\n{{index array, collection}}\n\nArrays, then, are just a kind of object specialized for storing sequences of things. If you evaluate `typeof []`, it produces `\"object\"`. You can visualize arrays as long, flat octopuses with all their tentacles in a neat row, labeled with numbers.\n\n{{index journal, \"weresquirrel example\"}}\n\nJacques will represent the journal that Jacques keeps as an array of objects:\n\n```{test: wrap}\nlet journal = [\n  {events: [\"work\", \"touched tree\", \"pizza\",\n            \"running\", \"television\"],\n   squirrel: false},\n  {events: [\"work\", \"ice cream\", \"cauliflower\",\n            \"lasagna\", \"touched tree\", \"brushed teeth\"],\n   squirrel: false},\n  {events: [\"weekend\", \"cycling\", \"break\", \"peanuts\",\n            \"beer\"],\n   squirrel: true},\n  /* And so on... */\n];\n```\n\n## Mutability\n\nWe will get to actual programming soon, but first, there's one more piece of theory to understand.\n\n{{index mutability, \"side effect\", number, string, Boolean, [object, mutability]}}\n\nWe saw that object values can be modified. The types of values discussed in earlier chapters, such as numbers, strings, and Booleans, are all _((immutable))_—it is impossible to change values of those types. You can combine them and derive new values from them, but when you take a specific string value, that value will always remain the same. The text inside it cannot be changed. If you have a string that contains `\"cat\"`, it is not possible for other code to change a character in your string to make it spell `\"rat\"`.\n\nObjects work differently. You _can_ change their properties, causing a single object value to have different content at different times.\n\n{{index [object, identity], identity, [memory, organization], mutability}}\n\nWhen we have two numbers, 120 and 120, we can consider them precisely the same number, whether or not they refer to the same physical bits. With objects, there is a difference between having two references to the same object and having two different objects that contain the same properties. Consider the following code:\n\n```\nlet object1 = {value: 10};\nlet object2 = object1;\nlet object3 = {value: 10};\n\nconsole.log(object1 == object2);\n// → true\nconsole.log(object1 == object3);\n// → false\n\nobject1.value = 15;\nconsole.log(object2.value);\n// → 15\nconsole.log(object3.value);\n// → 10\n```\n\n{{index \"tentacle (analogy)\", [binding, \"model of\"]}}\n\nThe `object1` and `object2` bindings grasp the _same_ object, which is why changing `object1` also changes the value of `object2`. They are said to have the same _identity_. The binding `object3` points to a different object, which initially contains the same properties as `object1` but lives a separate life.\n\n{{index \"const keyword\", \"let keyword\", [binding, \"as state\"]}}\n\nBindings can also be changeable or constant, but this is separate from the way their values behave. Even though number values don't change, you can use a `let` binding to keep track of a changing number by changing the value at which the binding points. Similarly, though a `const` binding to an object can itself not be changed and will continue to point at the same object, the _contents_ of that object might change.\n\n```{test: no}\nconst score = {visitors: 0, home: 0};\n// This is okay\nscore.visitors = 1;\n// This isn't allowed\nscore = {visitors: 1, home: 1};\n```\n\n{{index \"== operator\", [comparison, \"of objects\"], \"deep comparison\"}}\n\nWhen you compare objects with JavaScript's `==` operator, it compares by identity: it will produce `true` only if both objects are precisely the same value. Comparing different objects will return `false`, even if they have identical properties. There is no \"deep\" comparison operation built into JavaScript that compares objects by contents, but it is possible to write it yourself (which is one of the [exercises](data#exercise_deep_compare) at the end of this chapter).\n\n## The lycanthrope's log\n\n{{index \"weresquirrel example\", lycanthropy, \"addEntry function\"}}\n\nJacques starts up his JavaScript interpreter and sets up the environment he needs to keep his ((journal)):\n\n```{includeCode: true}\nlet journal = [];\n\nfunction addEntry(events, squirrel) {\n  journal.push({events, squirrel});\n}\n```\n\n{{index [braces, object], \"{} (object)\", [property, definition]}}\n\nNote that the object added to the journal looks a little odd. Instead of declaring properties like `events: events`, it just gives a property name: `events`. This is shorthand that means the same thing—if a property name in brace notation isn't followed by a value, its value is taken from the binding with the same name.\n\nEvery evening at 10 p.m.—or sometimes the next morning, after climbing down from the top shelf of his bookcase—Jacques records the day:\n\n```\naddEntry([\"work\", \"touched tree\", \"pizza\", \"running\",\n          \"television\"], false);\naddEntry([\"work\", \"ice cream\", \"cauliflower\", \"lasagna\",\n          \"touched tree\", \"brushed teeth\"], false);\naddEntry([\"weekend\", \"cycling\", \"break\", \"peanuts\",\n          \"beer\"], true);\n```\n\nOnce he has enough data points, he intends to use statistics to find out which of these events may be related to the squirrelifications.\n\n{{index correlation}}\n\n_Correlation_ is a measure of ((dependence)) between statistical variables. A statistical variable is not quite the same as a programming variable. In statistics you typically have a set of _measurements_, and each variable is measured for every measurement. Correlation between variables is usually expressed as a value that ranges from -1 to 1. Zero correlation means the variables are not related. A correlation of 1 indicates that the two are perfectly related—if you know one, you also know the other. Negative 1 also means that the variables are perfectly related but are opposites—when one is true, the other is false.\n\n{{index \"phi coefficient\"}}\n\nTo compute the measure of correlation between two Boolean variables, we can use the _phi coefficient_ (_ϕ_). This is a formula whose input is a ((frequency table)) containing the number of times the different combinations of the variables were observed. The output of the formula is a number between -1 and 1 that describes the correlation.\n\nWe could take the event of eating ((pizza)) and put that in a frequency table like this, where each number indicates the number of times that combination occurred in our measurements.\n\n{{figure {url: \"img/pizza-squirrel.svg\", alt: \"A two-by-two table showing the pizza variable on the horizontal, and the squirrel variable on the vertical axis. Each cell show how many time that combination occurred. In 76 cases, neither happened. In 9 cases, only pizza was true. In 4 cases only squirrel was true. And in one case both occurred.\", width: \"7cm\"}}}\n\nIf we call that table _n_, we can compute _ϕ_ using the following formula:\n\n{{if html\n\n<div> <table style=\"border-collapse: collapse; margin-left: 1em;\"><tr>   <td style=\"vertical-align: middle\"><em>ϕ</em> =</td>   <td style=\"padding-left: .5em\">     <div style=\"border-bottom: 1px solid black; padding: 0 7px;\"><em>n</em><sub>11</sub><em>n</em><sub>00</sub> −       <em>n</em><sub>10</sub><em>n</em><sub>01</sub></div>     <div style=\"padding: 0 7px;\">√<span style=\"border-top: 1px solid black; position: relative; top: 2px;\">       <span style=\"position: relative; top: -4px\"><em>n</em><sub>1•</sub><em>n</em><sub>0•</sub><em>n</em><sub>•1</sub><em>n</em><sub>•0</sub></span>     </span></div>   </td> </tr></table> </div>\n\nif}}\n\n{{if tex\n\n[\\begin{equation}\\varphi = \\frac{n_{11}n_{00}-n_{10}n_{01}}{\\sqrt{n_{1\\bullet}n_{0\\bullet}n_{\\bullet1}n_{\\bullet0}}}\\end{equation}]{latex}\n\nif}}\n\n(If at this point you're putting the book down to focus on a terrible flashback to 10th grade math class—hold on! I do not intend to torture you with endless pages of cryptic notation—it's just this one formula for now. And even with this one, all we do is turn it into JavaScript.)\n\nThe notation [_n_~01~]{if html}[[$n_{01}$]{latex}]{if tex} indicates the number of measurements where the first variable (squirrelness) is false (0) and the second variable (pizza) is true (1). In the pizza table, [_n_~01~]{if html}[[$n_{01}$]{latex}]{if tex} is 9.\n\nThe value [_n_~1•~]{if html}[[$n_{1\\bullet}$]{latex}]{if tex} refers to the sum of all measurements where the first variable is true, which is 5 in the example table. Likewise, [_n_~•0~]{if html}[[$n_{\\bullet0}$]{latex}]{if tex} refers to the sum of the measurements where the second variable is false.\n\n{{index correlation, \"phi coefficient\"}}\n\nSo for the pizza table, the part above the division line (the dividend) would be 1×76−4×9 = 40, and the part below it (the divisor) would be the square root of 5×85×10×80, or [√340,000]{if html}[[$\\sqrt{340,000}$]{latex}]{if tex}. This comes out to _ϕ_ ≈ 0.069, which is tiny. Eating ((pizza)) does not appear to have influence on the transformations.\n\n## Computing correlation\n\n{{index [array, \"as table\"], [nesting, \"of arrays\"]}}\n\nWe can represent a two-by-two ((table)) in JavaScript with a four-element array (`[76, 9, 4, 1]`). We could also use other representations, such as an array containing two two-element arrays (`[[76, 9], [4, 1]]`) or an object with property names like `\"11\"` and `\"01\"`, but the flat array is simple and makes the expressions that access the table pleasantly short. We'll interpret the indices to the array as two-((bit)) ((binary number))s, where the leftmost (most significant) digit refers to the squirrel variable and the rightmost (least significant) digit refers to the event variable. For example, the binary number `10` refers to the case where Jacques did turn into a squirrel, but the event (say, \"pizza\") didn't occur. This happened four times. And since binary `10` is 2 in decimal notation, we will store this number at index 2 of the array.\n\n{{index \"phi coefficient\", \"phi function\"}}\n\n{{id phi_function}}\n\nThis is the function that computes the _ϕ_ coefficient from such an array:\n\n```{includeCode: strip_log, test: clip}\nfunction phi(table) {\n  return (table[3] * table[0] - table[2] * table[1]) /\n    Math.sqrt((table[2] + table[3]) *\n              (table[0] + table[1]) *\n              (table[1] + table[3]) *\n              (table[0] + table[2]));\n}\n\nconsole.log(phi([76, 9, 4, 1]));\n// → 0.068599434\n```\n\n{{index \"square root\", \"Math.sqrt function\"}}\n\nThis is a direct translation of the _ϕ_ formula into JavaScript. `Math.sqrt` is the square root function, as provided by the `Math` object in a standard JavaScript environment. We have to add two fields from the table to get fields like [n~1•~]{if html}[[$n_{1\\bullet}$]{latex}]{if tex} because the sums of rows or columns are not stored directly in our data structure.\n\n{{index \"JOURNAL dataset\"}}\n\nJacques keeps his journal for three months. The resulting ((dataset)) is available in the [coding sandbox](https://eloquentjavascript.net/code#4) for this chapter[ ([_https://eloquentjavascript.net/code#4_](https://eloquentjavascript.net/code#4))]{if book}, where it is stored in the `JOURNAL` binding, and in a downloadable [file](https://eloquentjavascript.net/code/journal.js).\n\n{{index \"tableFor function\"}}\n\nTo extract a two-by-two ((table)) for a specific event from the journal, we must loop over all the entries and tally how many times the event occurs in relation to squirrel transformations:\n\n```{includeCode: strip_log}\nfunction tableFor(event, journal) {\n  let table = [0, 0, 0, 0];\n  for (let i = 0; i < journal.length; i++) {\n    let entry = journal[i], index = 0;\n    if (entry.events.includes(event)) index += 1;\n    if (entry.squirrel) index += 2;\n    table[index] += 1;\n  }\n  return table;\n}\n\nconsole.log(tableFor(\"pizza\", JOURNAL));\n// → [76, 9, 4, 1]\n```\n\n{{index [array, searching], \"includes method\"}}\n\nArrays have an `includes` method that checks whether a given value exists in the array. The function uses that to determine whether the event name it is interested in is part of the event list for a given day.\n\n{{index [array, indexing]}}\n\nThe body of the loop in `tableFor` figures out which box in the table each journal entry falls into by checking whether the entry contains the specific event it's interested in and whether the event happens alongside a squirrel incident. The loop then adds one to the correct box in the table.\n\nWe now have the tools we need to compute individual ((correlation))s. The only step remaining is to find a correlation for every type of event that was recorded and see whether anything stands out.\n\n{{id for_of_loop}}\n\n## Array loops\n\n{{index \"for loop\", loop, [array, iteration]}}\n\nIn the `tableFor` function, there's a loop like this:\n\n```\nfor (let i = 0; i < JOURNAL.length; i++) {\n  let entry = JOURNAL[i];\n  // Do something with entry\n}\n```\n\nThis kind of loop is common in classical JavaScript—going over arrays one element at a time is something that comes up a lot, and to do that you'd run a counter over the length of the array and pick out each element in turn.\n\nThere is a simpler way to write such loops in modern JavaScript:\n\n```\nfor (let entry of JOURNAL) {\n  console.log(`${entry.events.length} events.`);\n}\n```\n\n{{index \"for/of loop\"}}\n\nWhen a `for` loop uses the word `of` after its variable definition, it will loop over the elements of the value given after `of`. This works not only for arrays but also for strings and some other data structures. We'll discuss _how_ it works in [Chapter ?](object).\n\n{{id analysis}}\n\n## The final analysis\n\n{{index journal, \"weresquirrel example\", \"journalEvents function\"}}\n\nWe need to compute a correlation for every type of event that occurs in the dataset. To do that, we first need to _find_ every type of event.\n\n{{index \"includes method\", \"push method\"}}\n\n```{includeCode: \"strip_log\"}\nfunction journalEvents(journal) {\n  let events = [];\n  for (let entry of journal) {\n    for (let event of entry.events) {\n      if (!events.includes(event)) {\n        events.push(event);\n      }\n    }\n  }\n  return events;\n}\n\nconsole.log(journalEvents(JOURNAL));\n// → [\"carrot\", \"exercise\", \"weekend\", \"bread\", …]\n```\n\nBy adding any event names that aren't already in it to the `events` array, the function collects every type of event.\n\nUsing that function, we can see all the ((correlation))s:\n\n```{test: no}\nfor (let event of journalEvents(JOURNAL)) {\n  console.log(event + \":\", phi(tableFor(event, JOURNAL)));\n}\n// → carrot:   0.0140970969\n// → exercise: 0.0685994341\n// → weekend:  0.1371988681\n// → bread:   -0.0757554019\n// → pudding: -0.0648203724\n// And so on...\n```\n\nMost correlations seem to lie close to zero. Eating carrots, bread, or pudding apparently does not trigger squirrel-lycanthropy. The transformations _do_ seem to occur somewhat more often on weekends. Let's filter the results to show only correlations greater than 0.1 or less than -0.1:\n\n```{test: no, startCode: true}\nfor (let event of journalEvents(JOURNAL)) {\n  let correlation = phi(tableFor(event, JOURNAL));\n  if (correlation > 0.1 || correlation < -0.1) {\n    console.log(event + \":\", correlation);\n  }\n}\n// → weekend:        0.1371988681\n// → brushed teeth: -0.3805211953\n// → candy:          0.1296407447\n// → work:          -0.1371988681\n// → spaghetti:      0.2425356250\n// → reading:        0.1106828054\n// → peanuts:        0.5902679812\n```\n\nAha! There are two factors with a ((correlation)) clearly stronger than the others. Eating ((peanuts)) has a strong positive effect on the chance of turning into a squirrel, whereas brushing teeth has a significant negative effect.\n\nInteresting. Let's try something.\n\n```\nfor (let entry of JOURNAL) {\n  if (entry.events.includes(\"peanuts\") &&\n     !entry.events.includes(\"brushed teeth\")) {\n    entry.events.push(\"peanut teeth\");\n  }\n}\nconsole.log(phi(tableFor(\"peanut teeth\", JOURNAL)));\n// → 1\n```\n\nThat's a strong result. The phenomenon occurs precisely when Jacques eats ((peanuts)) and fails to brush his teeth. If only he weren't such a slob about dental hygiene, he'd never even have noticed his affliction.\n\nKnowing this, Jacques stops eating peanuts altogether and finds that his transformations stop.\n\n{{index \"weresquirrel example\"}}\n\nBut it takes only a few months for him to notice that something is missing from this entirely human way of living. Without his feral adventures, Jacques hardly feels alive at all. He decides he'd rather be a full-time wild animal. After building a beautiful little tree house in the forest and equipping it with a peanut butter dispenser and a ten-year supply of peanut butter, he changes form one last time, and lives the short and energetic life of a squirrel.\n\n## Further arrayology\n\n{{index [array, methods], [method, array]}}\n\nBefore finishing the chapter, I want to introduce you to a few more object-related concepts. I'll start with some generally useful array methods.\n\n{{index \"push method\", \"pop method\", \"shift method\", \"unshift method\"}}\n\nWe saw `push` and `pop`, which add and remove elements at the end of an array, [earlier](data#array_methods) in this chapter. The corresponding methods for adding and removing things at the start of an array are called `unshift` and `shift`.\n\n```\nlet todoList = [];\nfunction remember(task) {\n  todoList.push(task);\n}\nfunction getTask() {\n  return todoList.shift();\n}\nfunction rememberUrgently(task) {\n  todoList.unshift(task);\n}\n```\n\n{{index \"task management example\"}}\n\nThis program manages a queue of tasks. You add tasks to the end of the queue by calling `remember(\"groceries\")`, and when you're ready to do something, you call `getTask()` to get (and remove) the front item from the queue. The `rememberUrgently` function also adds a task but adds it to the front instead of the back of the queue.\n\n{{index [array, searching], \"indexOf method\", \"lastIndexOf method\"}}\n\nTo search for a specific value, arrays provide an `indexOf` method. The method searches through the array from the start to the end and returns the index at which the requested value was found—or -1 if it wasn't found. To search from the end instead of the start, there's a similar method called `lastIndexOf`:\n\n```\nconsole.log([1, 2, 3, 2, 1].indexOf(2));\n// → 1\nconsole.log([1, 2, 3, 2, 1].lastIndexOf(2));\n// → 3\n```\n\nBoth `indexOf` and `lastIndexOf` take an optional second argument that indicates where to start searching.\n\n{{index \"slice method\", [array, indexing]}}\n\nAnother fundamental array method is `slice`, which takes start and end indices and returns an array that has only the elements between them. The start index is inclusive and the end index is exclusive.\n\n```\nconsole.log([0, 1, 2, 3, 4].slice(2, 4));\n// → [2, 3]\nconsole.log([0, 1, 2, 3, 4].slice(2));\n// → [2, 3, 4]\n```\n\n{{index [string, indexing]}}\n\nWhen the end index is not given, `slice` will take all of the elements after the start index. You can also omit the start index to copy the entire array.\n\n{{index concatenation, \"concat method\"}}\n\nThe `concat` method can be used to append arrays together to create a new array, similar to what the `+` operator does for strings.\n\nThe following example shows both `concat` and `slice` in action. It takes an array and an index and returns a new array that is a copy of the original array with the element at the given index removed:\n\n```\nfunction remove(array, index) {\n  return array.slice(0, index)\n    .concat(array.slice(index + 1));\n}\nconsole.log(remove([\"a\", \"b\", \"c\", \"d\", \"e\"], 2));\n// → [\"a\", \"b\", \"d\", \"e\"]\n```\n\nIf you pass `concat` an argument that is not an array, that value will be added to the new array as if it were a one-element array.\n\n## Strings and their properties\n\n{{index [string, properties]}}\n\nWe can read properties like `length` and `toUpperCase` from string values. But if we try to add a new property, it doesn't stick.\n\n```\nlet kim = \"Kim\";\nkim.age = 88;\nconsole.log(kim.age);\n// → undefined\n```\n\nValues of type string, number, and Boolean are not objects, and though the language doesn't complain if you try to set new properties on them, it doesn't actually store those properties. As mentioned earlier, such values are immutable and cannot be changed.\n\n{{index [string, methods], \"slice method\", \"indexOf method\", [string, searching]}}\n\nBut these types do have built-in properties. Every string value has a number of methods. Some very useful ones are `slice` and `indexOf`, which resemble the array methods of the same name:\n\n```\nconsole.log(\"coconuts\".slice(4, 7));\n// → nut\nconsole.log(\"coconut\".indexOf(\"u\"));\n// → 5\n```\n\nOne difference is that a string's `indexOf` can search for a string containing more than one character, whereas the corresponding array method looks only for a single element:\n\n```\nconsole.log(\"one two three\".indexOf(\"ee\"));\n// → 11\n```\n\n{{index [whitespace, trimming], \"trim method\"}}\n\nThe `trim` method removes whitespace (spaces, newlines, tabs, and similar characters) from the start and end of a string:\n\n```\nconsole.log(\"  okay \\n \".trim());\n// → okay\n```\n\n{{id padStart}}\n\nThe `zeroPad` function from the [previous chapter](functions) also exists as a method. It is called `padStart` and takes the desired length and padding character as arguments:\n\n```\nconsole.log(String(6).padStart(3, \"0\"));\n// → 006\n```\n\n{{id split}}\n\n{{index \"split method\"}}\n\nYou can split a string on every occurrence of another string with `split` and join it again with `join`:\n\n```\nlet sentence = \"Secretarybirds specialize in stomping\";\nlet words = sentence.split(\" \");\nconsole.log(words);\n// → [\"Secretarybirds\", \"specialize\", \"in\", \"stomping\"]\nconsole.log(words.join(\". \"));\n// → Secretarybirds. specialize. in. stomping\n```\n\n{{index \"repeat method\"}}\n\nA string can be repeated with the `repeat` method, which creates a new string containing multiple copies of the original string, glued together:\n\n```\nconsole.log(\"LA\".repeat(3));\n// → LALALA\n```\n\n{{index [\"length property\", \"for string\"], [string, indexing]}}\n\nWe have already seen the string type's `length` property. Accessing the individual characters in a string looks like accessing array elements (with a complication that we'll discuss in [Chapter ?](higher_order#code_units)).\n\n```\nlet string = \"abc\";\nconsole.log(string.length);\n// → 3\nconsole.log(string[1]);\n// → b\n```\n\n{{id rest_parameters}}\n\n## Rest parameters\n\n{{index \"Math.max function\", \"period character\", \"max example\", spread, [array, \"of rest arguments\"]}}\n\nIt can be useful for a function to accept any number of ((argument))s. For example, `Math.max` computes the maximum of _all_ the arguments it is given. To write such a function, you put three dots before the function's last ((parameter)), like this:\n\n```{includeCode: strip_log}\nfunction max(...numbers) {\n  let result = -Infinity;\n  for (let number of numbers) {\n    if (number > result) result = number;\n  }\n  return result;\n}\nconsole.log(max(4, 1, 9, -2));\n// → 9\n```\n\nWhen such a function is called, the _((rest parameter))_ is bound to an array containing all further arguments. If there are other parameters before it, their values aren't part of that array. When, as in `max`, it is the only parameter, it will hold all arguments.\n\n{{index [function, application]}}\n\nYou can use a similar three-dot notation to _call_ a function with an array of arguments.\n\n```\nlet numbers = [5, 1, 7];\nconsole.log(max(...numbers));\n// → 7\n```\n\nThis \"((spread))s\" out the array into the function call, passing its elements as separate arguments. It is possible to include an array like that along with other arguments, as in `max(9, ...numbers, 2)`.\n\n{{index \"[] (array)\"}}\n\nSquare bracket array notation similarly allows the triple-dot operator to spread another array into the new array:\n\n```\nlet words = [\"never\", \"fully\"];\nconsole.log([\"will\", ...words, \"understand\"]);\n// → [\"will\", \"never\", \"fully\", \"understand\"]\n```\n\n{{index \"{} (object)\"}}\n\nThis works even in curly brace objects, where it adds all properties from another object. If a property is added multiple times, the last value to be added wins:\n\n```\nlet coordinates = {x: 10, y: 0};\nconsole.log({...coordinates, y: 5, z: 1});\n// → {x: 10, y: 5, z: 1}\n```\n\n## The Math object\n\n{{index \"Math object\", \"Math.min function\", \"Math.max function\", \"Math.sqrt function\", minimum, maximum, \"square root\"}}\n\nAs we've seen, `Math` is a grab bag of number-related utility functions such as `Math.max` (maximum), `Math.min` (minimum), and `Math.sqrt` (square root).\n\n{{index namespace, [object, property]}}\n\n{{id namespace_pollution}}\n\nThe `Math` object is used as a container to group a bunch of related functionality. There is only one `Math` object, and it is almost never useful as a value. Rather, it provides a _namespace_ so that all these functions and values do not have to be global bindings.\n\n{{index [binding, naming]}}\n\nHaving too many global bindings \"pollutes\" the namespace. The more names have been taken, the more likely you are to accidentally overwrite the value of some existing binding. For example, it's not unlikely you'll want to name something `max` in one of your programs. Since JavaScript's built-in `max` function is tucked safely inside the `Math` object, you don't have to worry about overwriting it.\n\n{{index \"let keyword\", \"const keyword\"}}\n\nMany languages will stop you, or at least warn you, when you are defining a binding with a name that is already taken. JavaScript does this for bindings you declared with `let` or `const` but—perversely—not for standard bindings nor for bindings declared with `var` or `function`.\n\n{{index \"Math.cos function\", \"Math.sin function\", \"Math.tan function\", \"Math.acos function\", \"Math.asin function\", \"Math.atan function\", \"Math.PI constant\", cosine, sine, tangent, \"PI constant\", pi}}\n\nBack to the `Math` object. If you need to do ((trigonometry)), `Math` can help. It contains `cos` (cosine), `sin` (sine), and `tan` (tangent), as well as their inverse functions, `acos`, `asin`, and `atan`, respectively. The number π (pi)—or at least the closest approximation that fits in a JavaScript number—is available as `Math.PI`. There is an old programming tradition of writing the names of ((constant)) values in all caps.\n\n```{test: no}\nfunction randomPointOnCircle(radius) {\n  let angle = Math.random() * 2 * Math.PI;\n  return {x: radius * Math.cos(angle),\n          y: radius * Math.sin(angle)};\n}\nconsole.log(randomPointOnCircle(2));\n// → {x: 0.3667, y: 1.966}\n```\n\nIf you're not familiar with sines and cosines, don't worry. I'll explain them when they are used in [Chapter ?](dom#sin_cos).\n\n{{index \"Math.random function\", \"random number\"}}\n\nThe previous example used `Math.random`. This is a function that returns a new pseudorandom number between 0 (inclusive) and 1 (exclusive) every time you call it:\n\n```{test: no}\nconsole.log(Math.random());\n// → 0.36993729369714856\nconsole.log(Math.random());\n// → 0.727367032552138\nconsole.log(Math.random());\n// → 0.40180766698904335\n```\n\n{{index \"pseudorandom number\", \"random number\"}}\n\nThough computers are deterministic machines—they always react the same way if given the same input—it is possible to have them produce numbers that appear random. To do that, the machine keeps some hidden value, and whenever you ask for a new random number, it performs complicated computations on this hidden value to create a new value. It stores a new value and returns some number derived from it. That way, it can produce ever new, hard-to-predict numbers in a way that _seems_ random.\n\n{{index rounding, \"Math.floor function\"}}\n\nIf we want a whole random number instead of a fractional one, we can use `Math.floor` (which rounds down to the nearest whole number) on the result of `Math.random`:\n\n```{test: no}\nconsole.log(Math.floor(Math.random() * 10));\n// → 2\n```\n\nMultiplying the random number by 10 gives us a number greater than or equal to 0 and below 10. Since `Math.floor` rounds down, this expression will produce, with equal chance, any number from 0 through 9.\n\n{{index \"Math.ceil function\", \"Math.round function\", \"Math.abs function\", \"absolute value\"}}\n\nThere are also the functions `Math.ceil` (for \"ceiling\", which rounds up to a whole number), `Math.round` (to the nearest whole number), and `Math.abs`, which takes the absolute value of a number, meaning it negates negative values but leaves positive ones as they are.\n\n## Destructuring\n\n{{index \"phi function\"}}\n\nLet's return to the `phi` function for a moment.\n\n```{test: wrap}\nfunction phi(table) {\n  return (table[3] * table[0] - table[2] * table[1]) /\n    Math.sqrt((table[2] + table[3]) *\n              (table[0] + table[1]) *\n              (table[1] + table[3]) *\n              (table[0] + table[2]));\n}\n```\n\n{{index \"destructuring binding\", parameter}}\n\nOne reason this function is awkward to read is that we have a binding pointing at our array, but we'd much prefer to have bindings for the _elements_ of the array—that is, `let n00 = table[0]` and so on. Fortunately, there is a succinct way to do this in JavaScript:\n\n```\nfunction phi([n00, n01, n10, n11]) {\n  return (n11 * n00 - n10 * n01) /\n    Math.sqrt((n10 + n11) * (n00 + n01) *\n              (n01 + n11) * (n00 + n10));\n}\n```\n\n{{index \"let keyword\", \"var keyword\", \"const keyword\", [binding, destructuring]}}\n\nThis also works for bindings created with `let`, `var`, or `const`. If you know that the value you are binding is an array, you can use ((square brackets)) to \"look inside\" of the value, binding its contents.\n\n{{index [object, property], [braces, object]}}\n\nA similar trick works for objects, using braces instead of square brackets.\n\n```\nlet {name} = {name: \"Faraji\", age: 23};\nconsole.log(name);\n// → Faraji\n```\n\n{{index null, undefined}}\n\nNote that if you try to destructure `null` or `undefined`, you get an error, much as you would if you directly try to access a property of those values.\n\n## Optional property access\n\n{{index \"optional chaining\", \"period character\"}}\n\nWhen you aren't sure whether a given value produces an object, but still want to read a property from it when it does, you can use a variant of the dot notation: `object?.property`.\n\n```\nfunction city(object) {\n  return object.address?.city;\n}\nconsole.log(city({address: {city: \"Toronto\"}}));\n// → Toronto\nconsole.log(city({name: \"Vera\"}));\n// → undefined\n```\n\nThe expression `a?.b` means the same as `a.b` when `a` isn't null or undefined. When it is, it evaluates to `undefined`. This can be convenient when, as in the example, you aren't sure that a given property exists or when a variable might hold an undefined value.\n\nA similar notation can be used with square bracket access, and even with function calls, by putting `?.` in front of the parentheses or brackets:\n\n```\nconsole.log(\"string\".notAMethod?.());\n// → undefined\nconsole.log({}.arrayProp?.[0]);\n// → undefined\n```\n\n## JSON\n\n{{index [array, representation], [object, representation], \"data format\", [memory, organization]}}\n\nBecause properties grasp their value rather than contain it, objects and arrays are stored in the computer's memory as sequences of bits holding the _((address))es_—the place in memory—of their contents. An array with another array inside of it consists of (at least) one memory region for the inner array and another for the outer array, containing (among other things) a number that represents the address of the inner array.\n\nIf you want to save data in a file for later or send it to another computer over the network, you have to somehow convert these tangles of memory addresses to a description that can be stored or sent. You _could_ send over your entire computer memory along with the address of the value you're interested in, I suppose, but that doesn't seem like the best approach.\n\n{{indexsee \"JavaScript Object Notation\", JSON}}\n\n{{index serialization, \"World Wide Web\"}}\n\nWhat we can do is _serialize_ the data. That means it is converted into a flat description. A popular serialization format is called _((JSON))_ (pronounced \"Jason\"), which stands for JavaScript Object Notation. It is widely used as a data storage and communication format on the web, even with languages other than JavaScript.\n\n{{index [array, notation], [object, creation], [quoting, \"in JSON\"], comment}}\n\nJSON looks similar to JavaScript's way of writing arrays and objects, with a few restrictions. All property names have to be surrounded by double quotes, and only simple data expressions are allowed—no function calls, bindings, or anything that involves actual computation. Comments are not allowed in JSON.\n\nA journal entry might look like this when represented as JSON data:\n\n```{lang: \"json\"}\n{\n  \"squirrel\": false,\n  \"events\": [\"work\", \"touched tree\", \"pizza\", \"running\"]\n}\n```\n\n{{index \"JSON.stringify function\", \"JSON.parse function\", serialization, deserialization, parsing}}\n\nJavaScript gives us the functions `JSON.stringify` and `JSON.parse` to convert data to and from this format. The first takes a JavaScript value and returns a JSON-encoded string. The second takes such a string and converts it to the value it encodes:\n\n```\nlet string = JSON.stringify({squirrel: false,\n                             events: [\"weekend\"]});\nconsole.log(string);\n// → {\"squirrel\":false,\"events\":[\"weekend\"]}\nconsole.log(JSON.parse(string).events);\n// → [\"weekend\"]\n```\n\n## Summary\n\nObjects and arrays provide ways to group several values into a single value. This allows us to put a bunch of related things in a bag and run around with the bag instead of wrapping our arms around all of the individual things and trying to hold on to them separately.\n\nMost values in JavaScript have properties, with the exceptions being `null` and `undefined`. Properties are accessed using `value.prop` or `value[\"prop\"]`. Objects tend to use names for their properties and store more or less a fixed set of them. Arrays, on the other hand, usually contain varying amounts of conceptually identical values and use numbers (starting from 0) as the names of their properties.\n\nThere _are_ some named properties in arrays, such as `length` and a number of methods. Methods are functions that live in properties and (usually) act on the value of which they are a property.\n\nYou can iterate over arrays using a special kind of `for` loop: `for (let element of array)`.\n\n## Exercises\n\n### The sum of a range\n\n{{index \"summing (exercise)\"}}\n\nThe [introduction](intro) of this book alluded to the following as a nice way to compute the sum of a range of numbers:\n\n```{test: no}\nconsole.log(sum(range(1, 10)));\n```\n\n{{index \"range function\", \"sum function\"}}\n\nWrite a `range` function that takes two arguments, `start` and `end`, and returns an array containing all the numbers from `start` up to and including `end`.\n\nNext, write a `sum` function that takes an array of numbers and returns the sum of these numbers. Run the example program and see whether it does indeed return 55.\n\n{{index \"optional argument\"}}\n\nAs a bonus assignment, modify your `range` function to take an optional third argument that indicates the \"step\" value used when building the array. If no step is given, the elements should go up by increments of one, corresponding to the old behavior. The function call `range(1, 10, 2)` should return `[1, 3, 5, 7, 9]`. Make sure this also works with negative step values so that `range(5, 2, -1)` produces `[5, 4, 3, 2]`.\n\n{{if interactive\n\n```{test: no}\n// Your code here.\n\nconsole.log(range(1, 10));\n// → [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nconsole.log(range(5, 2, -1));\n// → [5, 4, 3, 2]\nconsole.log(sum(range(1, 10)));\n// → 55\n```\n\nif}}\n\n{{hint\n\n{{index \"summing (exercise)\", [array, creation], \"square brackets\"}}\n\nBuilding up an array is most easily done by first initializing a binding to `[]` (a fresh, empty array) and repeatedly calling its `push` method to add a value. Don't forget to return the array at the end of the function.\n\n{{index [array, indexing], comparison}}\n\nSince the end boundary is inclusive, you'll need to use the `<=` operator rather than `<` to check for the end of your loop.\n\nThe step parameter can be an optional parameter that defaults (using the `=` operator) to 1.\n\n{{index \"range function\", \"for loop\"}}\n\nHaving `range` understand negative step values is probably best done by writing two separate loops—one for counting up and one for counting down—because the comparison that checks whether the loop is finished needs to be `>=` rather than `<=` when counting downward.\n\nIt might also be worthwhile to use a different default step, namely, -1, when the end of the range is smaller than the start. That way, `range(5, 2)` returns something meaningful rather than getting stuck in an ((infinite loop)). It is possible to refer to previous parameters in the default value of a parameter.\n\nhint}}\n\n### Reversing an array\n\n{{index \"reversing (exercise)\", \"reverse method\", [array, methods]}}\n\nArrays have a `reverse` method that changes the array by inverting the order in which its elements appear. For this exercise, write two functions, `reverseArray` and `reverseArrayInPlace`. The first, `reverseArray`, should take an array as its argument and produce a _new_ array that has the same elements in the inverse order. The second, `reverseArrayInPlace`, should do what the `reverse` method does: _modify_ the array given as its argument by reversing its elements. Neither may use the standard `reverse` method.\n\n{{index efficiency, \"pure function\", \"side effect\"}}\n\nThinking back to the notes about side effects and pure functions in the [previous chapter](functions#pure), which variant do you expect to be useful in more situations? Which one runs faster?\n\n{{if interactive\n\n```{test: no}\n// Your code here.\n\nlet myArray = [\"A\", \"B\", \"C\"];\nconsole.log(reverseArray(myArray));\n// → [\"C\", \"B\", \"A\"];\nconsole.log(myArray);\n// → [\"A\", \"B\", \"C\"];\nlet arrayValue = [1, 2, 3, 4, 5];\nreverseArrayInPlace(arrayValue);\nconsole.log(arrayValue);\n// → [5, 4, 3, 2, 1]\n```\n\nif}}\n\n{{hint\n\n{{index \"reversing (exercise)\"}}\n\nThere are two obvious ways to implement `reverseArray`. The first is to simply go over the input array from front to back and use the `unshift` method on the new array to insert each element at its start. The second is to loop over the input array backward and use the `push` method. Iterating over an array backward requires a (somewhat awkward) `for` specification, like `(let i = array.length - 1; i >= 0; i--)`.\n\n{{index \"slice method\"}}\n\nReversing the array in place is harder. You have to be careful not to overwrite elements that you will later need. Using `reverseArray` or otherwise copying the whole array (`array.slice()` is a good way to copy an array) works but is cheating.\n\nThe trick is to _swap_ the first and last elements, then the second and second-to-last, and so on. You can do this by looping over half the length of the array (use `Math.floor` to round down—you don't need to touch the middle element in an array with an odd number of elements) and swapping the element at position `i` with the one at position `array.length - 1 - i`. You can use a local binding to briefly hold onto one of the elements, overwrite that one with its mirror image, and then put the value from the local binding in the place where the mirror image used to be.\n\nhint}}\n\n{{id list}}\n\n### A list\n\n{{index [\"data structure\", list], \"list (exercise)\", \"linked list\", array, collection}}\n\nAs generic blobs of values, objects can be used to build all sorts of data structures. A common data structure is the _list_ (not to be confused with arrays). A list is a nested set of objects, with the first object holding a reference to the second, the second to the third, and so on:\n\n```{includeCode: true}\nlet list = {\n  value: 1,\n  rest: {\n    value: 2,\n    rest: {\n      value: 3,\n      rest: null\n    }\n  }\n};\n```\n\nThe resulting objects form a chain, as shown in the following diagram:\n\n{{figure {url: \"img/linked-list.svg\", alt: \"A diagram showing the memory structure of a linked list. There are 3 cells, each with a value field holding a number, and a 'rest' field with an arrow to the rest of the list. The first cell's arrow points at the second cell, the second cell's arrow at the last cell, and the last cell's 'rest' field holds null.\",width: \"8cm\"}}}\n\n{{index \"structure sharing\", [memory, structure sharing]}}\n\nA nice thing about lists is that they can share parts of their structure. For example, if I create two new values `{value: 0, rest: list}` and `{value: -1, rest: list}` (with `list` referring to the binding defined earlier), they are both independent lists, but they share the structure that makes up their last three elements. The original list is also still a valid three-element list.\n\nWrite a function `arrayToList` that builds up a list structure like the one shown when given `[1, 2, 3]` as argument. Also write a `listToArray` function that produces an array from a list. Add the helper functions `prepend`, which takes an element and a list and creates a new list that adds the element to the front of the input list, and `nth`, which takes a list and a number and returns the element at the given position in the list (with zero referring to the first element) or `undefined` when there is no such element.\n\n{{index recursion}}\n\nIf you haven't already, also write a recursive version of `nth`.\n\n{{if interactive\n\n```{test: no}\n// Your code here.\n\nconsole.log(arrayToList([10, 20]));\n// → {value: 10, rest: {value: 20, rest: null}}\nconsole.log(listToArray(arrayToList([10, 20, 30])));\n// → [10, 20, 30]\nconsole.log(prepend(10, prepend(20, null)));\n// → {value: 10, rest: {value: 20, rest: null}}\nconsole.log(nth(arrayToList([10, 20, 30]), 1));\n// → 20\n```\n\nif}}\n\n{{hint\n\n{{index \"list (exercise)\", \"linked list\"}}\n\nBuilding up a list is easier when done back to front. So `arrayToList` could iterate over the array backward (see the previous exercise) and, for each element, add an object to the list. You can use a local binding to hold the part of the list that was built so far and use an assignment like `list = {value: X, rest: list}` to add an element.\n\n{{index \"for loop\"}}\n\nTo run over a list (in `listToArray` and `nth`), a `for` loop specification like this can be used:\n\n```\nfor (let node = list; node; node = node.rest) {}\n```\n\nCan you see how that works? Every iteration of the loop, `node` points to the current sublist, and the body can read its `value` property to get the current element. At the end of an iteration, `node` moves to the next sublist. When that is `null`, we have reached the end of the list, and the loop is finished.\n\n{{index recursion}}\n\nThe recursive version of `nth` will, similarly, look at an ever smaller part of the \"tail\" of the list and at the same time count down the index until it reaches zero, at which point it can return the `value` property of the node it is looking at. To get the zeroth element of a list, you simply take the `value` property of its head node. To get element _N_ + 1, you take the *N*th element of the list that's in this list's `rest` property.\n\nhint}}\n\n{{id exercise_deep_compare}}\n\n### Deep comparison\n\n{{index \"deep comparison (exercise)\", [comparison, deep], \"deep comparison\", \"== operator\"}}\n\nThe `==` operator compares objects by identity, but sometimes you'd prefer to compare the values of their actual properties.\n\nWrite a function `deepEqual` that takes two values and returns `true` only if they are the same value or are objects with the same properties, where the values of the properties are equal when compared with a recursive call to `deepEqual`.\n\n{{index null, \"=== operator\", \"typeof operator\"}}\n\nTo find out whether values should be compared directly (using the `===` operator for that) or have their properties compared, you can use the `typeof` operator. If it produces `\"object\"` for both values, you should do a deep comparison. But you have to take one silly exception into account: because of a historical accident, `typeof null` also produces `\"object\"`.\n\n{{index \"Object.keys function\"}}\n\nThe `Object.keys` function will be useful when you need to go over the properties of objects to compare them.\n\n{{if interactive\n\n```{test: no}\n// Your code here.\n\nlet obj = {here: {is: \"an\"}, object: 2};\nconsole.log(deepEqual(obj, obj));\n// → true\nconsole.log(deepEqual(obj, {here: 1, object: 2}));\n// → false\nconsole.log(deepEqual(obj, {here: {is: \"an\"}, object: 2}));\n// → true\n```\n\nif}}\n\n{{hint\n\n{{index \"deep comparison (exercise)\", [comparison, deep], \"typeof operator\", \"=== operator\"}}\n\nYour test for whether you are dealing with a real object will look something like `typeof x == \"object\" && x != null`. Be careful to compare properties only when _both_ arguments are objects. In all other cases you can just immediately return the result of applying `===`.\n\n{{index \"Object.keys function\"}}\n\nUse `Object.keys` to go over the properties. You need to test whether both objects have the same set of property names and whether those properties have identical values. One way to do that is to ensure that both objects have the same number of properties (the lengths of the property lists are the same). And then, when looping over one of the object's properties to compare them, always first make sure the other actually has a property by that name. If they have the same number of properties and all properties in one also exist in the other, they have the same set of property names.\n\n{{index \"return value\"}}\n\nReturning the correct value from the function is best done by immediately returning `false` when a mismatch is found and returning `true` at the end of the function.\n\nhint}}\n"
        },
        {
          "name": "05_higher_order.md",
          "type": "blob",
          "size": 28.513671875,
          "content": "{{meta {load_files: [\"code/scripts.js\", \"code/chapter/05_higher_order.js\", \"code/intro.js\"], zip: \"node/html\"}}}\n\n# Higher-Order Functions\n\n{{quote {author: \"C.A.R. Hoare\", title: \"1980 ACM Turing Award Lecture\", chapter: true}\n\n{{index \"Hoare, C.A.R.\"}}\n\nThere are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies.\n\nquote}}\n\n{{figure {url: \"img/chapter_picture_5.jpg\", alt: \"Illustration showing letters and hieroglyphs from different scripts—Latin, Greek, Arabic, ancient Egyptian, and others\", chapter: true}}}\n\n{{index \"program size\"}}\n\nA large program is a costly program, and not just because of the time it takes to build. Size almost always involves ((complexity)), and complexity confuses programmers. Confused programmers, in turn, introduce mistakes (_((bug))s_) into programs. A large program then provides a lot of space for these bugs to hide, making them hard to find.\n\n{{index \"summing example\"}}\n\nLet's briefly go back to the final two example programs in the introduction. The first is self contained and six lines long.\n\n```\nlet total = 0, count = 1;\nwhile (count <= 10) {\n  total += count;\n  count += 1;\n}\nconsole.log(total);\n```\n\nThe second relies on two external functions and is one line long.\n\n```\nconsole.log(sum(range(1, 10)));\n```\n\nWhich one is more likely to contain a bug?\n\n{{index \"program size\"}}\n\nIf we count the size of the definitions of `sum` and `range`, the second program is also big—even bigger than the first. But still, I'd argue that it is more likely to be correct.\n\n{{index [abstraction, \"with higher-order functions\"], \"domain-specific language\"}}\n\nThis is because the solution is expressed in a ((vocabulary)) that corresponds to the problem being solved. Summing a range of numbers isn't about loops and counters. It is about ranges and sums.\n\nThe definitions of this vocabulary (the functions `sum` and `range`) will still involve loops, counters, and other incidental details. But because they are expressing simpler concepts than the program as a whole, they are easier to get right.\n\n## Abstraction\n\nIn the context of programming, these kinds of vocabularies are usually called _((abstraction))s_. Abstractions give us the ability to talk about problems at a higher (or more abstract) level, without getting sidetracked by uninteresting details.\n\n{{index \"recipe analogy\", \"pea soup\"}}\n\nAs an analogy, compare these two recipes for pea soup. The first goes like this:\n\n{{quote\n\nPut 1 cup of dried peas per person into a container. Add water until the peas are well covered. Leave the peas in water for at least 12 hours. Take the peas out of the water and put them in a cooking pan. Add 4 cups of water per person. Cover the pan and keep the peas simmering for two hours. Take half an onion per person. Cut it into pieces with a knife. Add it to the peas. Take a stalk of celery per person. Cut it into pieces with a knife. Add it to the peas. Take a carrot per person. Cut it into pieces. With a knife! Add it to the peas. Cook for 10 more minutes.\n\nquote}}\n\nAnd this is the second recipe:\n\n{{quote\n\nPer person: 1 cup dried split peas, 4 cups of water, half a chopped onion, a stalk of celery, and a carrot.\n\nSoak peas for 12 hours. Simmer for 2 hours. Chop and add vegetables. Cook for 10 more minutes.\n\nquote}}\n\n{{index vocabulary}}\n\nThe second is shorter and easier to interpret. But you do need to understand a few more cooking-related words such as _soak_, _simmer_, _chop_, and, I guess, _vegetable_.\n\nWhen programming, we can't rely on all the words we need to be waiting for us in the dictionary. Thus, we might fall into the pattern of the first recipe—work out the precise steps the computer has to perform, one by one, blind to the higher-level concepts they express.\n\n{{index abstraction}}\n\nIt is a useful skill, in programming, to notice when you are working at too low a level of abstraction.\n\n## Abstracting repetition\n\n{{index [array, iteration]}}\n\nPlain functions, as we've seen them so far, are a good way to build abstractions. But sometimes they fall short.\n\n{{index \"for loop\"}}\n\nIt is common for a program to do something a given number of times. You can write a `for` ((loop)) for that, like this:\n\n```\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n}\n```\n\nCan we abstract \"doing something _N_ times\" as a function? Well, it's easy to write a function that calls `console.log` _N_ times.\n\n```\nfunction repeatLog(n) {\n  for (let i = 0; i < n; i++) {\n    console.log(i);\n  }\n}\n```\n\n{{index [function, \"higher-order\"], loop, [function, \"as value\"]}}\n\n{{indexsee \"higher-order function\", \"function, higher-order\"}}\n\nBut what if we want to do something other than logging the numbers? Since \"doing something\" can be represented as a function and functions are just values, we can pass our action as a function value.\n\n```{includeCode: \"top_lines: 5\"}\nfunction repeat(n, action) {\n  for (let i = 0; i < n; i++) {\n    action(i);\n  }\n}\n\nrepeat(3, console.log);\n// → 0\n// → 1\n// → 2\n```\n\nWe don't have to pass a predefined function to `repeat`. Often, it is easier to create a function value on the spot instead.\n\n```\nlet labels = [];\nrepeat(5, i => {\n  labels.push(`Unit ${i + 1}`);\n});\nconsole.log(labels);\n// → [\"Unit 1\", \"Unit 2\", \"Unit 3\", \"Unit 4\", \"Unit 5\"]\n```\n\n{{index \"loop body\", [braces, body], [parentheses, arguments]}}\n\nThis is structured a little like a `for` loop—it first describes the kind of loop and then provides a body. However, the body is now written as a function value, which is wrapped in the parentheses of the call to `repeat`. This is why it has to be closed with the closing brace _and_ closing parenthesis. In cases like this example, where the body is a single small expression, you could also omit the braces and write the loop on a single line.\n\n## Higher-order functions\n\n{{index [function, \"higher-order\"], [function, \"as value\"]}}\n\nFunctions that operate on other functions, either by taking them as arguments or by returning them, are called _higher-order functions_. Since we have already seen that functions are regular values, there is nothing particularly remarkable about the fact that such functions exist. The term comes from ((mathematics)), where the distinction between functions and other values is taken more seriously.\n\n{{index abstraction}}\n\nHigher-order functions allow us to abstract over _actions_, not just values. They come in several forms. For example, we can have functions that create new functions.\n\n```\nfunction greaterThan(n) {\n  return m => m > n;\n}\nlet greaterThan10 = greaterThan(10);\nconsole.log(greaterThan10(11));\n// → true\n```\n\nWe can also have functions that change other functions.\n\n```\nfunction noisy(f) {\n  return (...args) => {\n    console.log(\"calling with\", args);\n    let result = f(...args);\n    console.log(\"called with\", args, \", returned\", result);\n    return result;\n  };\n}\nnoisy(Math.min)(3, 2, 1);\n// → calling with [3, 2, 1]\n// → called with [3, 2, 1] , returned 1\n```\n\nWe can even write functions that provide new types of ((control flow)).\n\n```\nfunction unless(test, then) {\n  if (!test) then();\n}\n\nrepeat(3, n => {\n  unless(n % 2 == 1, () => {\n    console.log(n, \"is even\");\n  });\n});\n// → 0 is even\n// → 2 is even\n```\n\n{{index [array, methods], [array, iteration], \"forEach method\"}}\n\nThere is a built-in array method, `forEach`, that provides something like a `for`/`of` loop as a higher-order function.\n\n```\n[\"A\", \"B\"].forEach(l => console.log(l));\n// → A\n// → B\n```\n\n{{id scripts}}\n\n## Script dataset\n\nOne area where higher-order functions shine is data processing. To process data, we'll need some actual example data. This chapter will use a ((dataset)) about scripts—((writing system))s such as Latin, Cyrillic, or Arabic.\n\nRemember ((Unicode)), the system that assigns a number to each character in written language, from [Chapter ?](values#unicode)? Most of these characters are associated with a specific script. The standard contains 140 different scripts, of which 81 are still in use today and 59 are historic.\n\nThough I can fluently read only Latin characters, I appreciate the fact that people are writing texts in at least 80 other writing systems, many of which I wouldn't even recognize. For example, here's a sample of ((Tamil)) handwriting:\n\n{{figure {url: \"img/tamil.png\", alt: \"A line of verse in Tamil handwriting. The characters are relatively simple, and neatly separated, yet completely different from Latin.\"}}}\n\n{{index \"SCRIPTS dataset\"}}\n\nThe example ((dataset)) contains some pieces of information about the 140 scripts defined in Unicode. It is available in the [coding sandbox](https://eloquentjavascript.net/code#5) for this chapter[ ([_https://eloquentjavascript.net/code#5_](https://eloquentjavascript.net/code#5))]{if book} as the `SCRIPTS` binding. The binding contains an array of objects, each of which describes a script.\n\n\n```{lang: \"json\"}\n{\n  name: \"Coptic\",\n  ranges: [[994, 1008], [11392, 11508], [11513, 11520]],\n  direction: \"ltr\",\n  year: -200,\n  living: false,\n  link: \"https://en.wikipedia.org/wiki/Coptic_alphabet\"\n}\n```\n\nSuch an object tells us the name of the script, the Unicode ranges assigned to it, the direction in which it is written, the (approximate) origin time, whether it is still in use, and a link to more information. The direction may be `\"ltr\"` for left to right, `\"rtl\"` for right to left (the way Arabic and Hebrew text are written), or `\"ttb\"` for top to bottom (as with Mongolian writing).\n\n{{index \"slice method\"}}\n\nThe `ranges` property contains an array of Unicode character ((range))s, each of which is a two-element array containing a lower bound and an upper bound. Any character codes within these ranges are assigned to the script. The lower ((bound)) is inclusive (code 994 is a Coptic character) and the upper bound is noninclusive (code 1008 isn't).\n\n## Filtering arrays\n\n{{index [array, methods], [array, filtering], \"filter method\", [function, \"higher-order\"], \"predicate function\"}}\n\nIf we want to find the scripts in the dataset that are still in use, the following function might be helpful. It filters out elements in an array that don't pass a test.\n\n```\nfunction filter(array, test) {\n  let passed = [];\n  for (let element of array) {\n    if (test(element)) {\n      passed.push(element);\n    }\n  }\n  return passed;\n}\n\nconsole.log(filter(SCRIPTS, script => script.living));\n// → [{name: \"Adlam\", …}, …]\n```\n\n{{index [function, \"as value\"], [function, application]}}\n\nThe function uses the argument named `test`, a function value, to fill a \"gap\" in the computation—the process of deciding which elements to collect.\n\n{{index \"filter method\", \"pure function\", \"side effect\"}}\n\nNote how the `filter` function, rather than deleting elements from the existing array, builds up a new array with only the elements that pass the test. This function is _pure_. It does not modify the array it is given.\n\nLike `forEach`, `filter` is a ((standard)) array method. The example defined the function only to show what it does internally. From now on, we'll use it like this instead:\n\n```\nconsole.log(SCRIPTS.filter(s => s.direction == \"ttb\"));\n// → [{name: \"Mongolian\", …}, …]\n```\n\n{{id map}}\n\n## Transforming with map\n\n{{index [array, methods], \"map method\"}}\n\nSay we have an array of objects representing scripts, produced by filtering the `SCRIPTS` array somehow. We want an array of names instead, which is easier to inspect.\n\n{{index [function, \"higher-order\"]}}\n\nThe `map` method transforms an array by applying a function to all of its elements and building a new array from the returned values. The new array will have the same length as the input array, but its content will have been _mapped_ to a new form by the function.\n\n```\nfunction map(array, transform) {\n  let mapped = [];\n  for (let element of array) {\n    mapped.push(transform(element));\n  }\n  return mapped;\n}\n\nlet rtlScripts = SCRIPTS.filter(s => s.direction == \"rtl\");\nconsole.log(map(rtlScripts, s => s.name));\n// → [\"Adlam\", \"Arabic\", \"Imperial Aramaic\", …]\n```\n\nLike `forEach` and `filter`, `map` is a standard array method.\n\n## Summarizing with reduce\n\n{{index [array, methods], \"summing example\", \"reduce method\"}}\n\nAnother common thing to do with arrays is to compute a single value from them. Our recurring example, summing a collection of numbers, is an instance of this. Another example is finding the script with the most characters.\n\n{{indexsee \"fold\", \"reduce method\"}}\n\n{{index [function, \"higher-order\"], \"reduce method\"}}\n\nThe higher-order operation that represents this pattern is called _reduce_ (sometimes also called _fold_). It builds a value by repeatedly taking a single element from the array and combining it with the current value. When summing numbers, you'd start with the number zero and, for each element, add that to the sum.\n\nThe parameters to `reduce` are, apart from the array, a combining function and a start value. This function is a little less straightforward than `filter` and `map`, so take a close look at it:\n\n```\nfunction reduce(array, combine, start) {\n  let current = start;\n  for (let element of array) {\n    current = combine(current, element);\n  }\n  return current;\n}\n\nconsole.log(reduce([1, 2, 3, 4], (a, b) => a + b, 0));\n// → 10\n```\n\n{{index \"reduce method\", \"SCRIPTS dataset\"}}\n\nThe standard array method `reduce`, which of course corresponds to this function, has an added convenience. If your array contains at least one element, you are allowed to leave off the `start` argument. The method will take the first element of the array as its start value and start reducing at the second element.\n\n```\nconsole.log([1, 2, 3, 4].reduce((a, b) => a + b));\n// → 10\n```\n\n{{index maximum, \"characterCount function\"}}\n\nTo use `reduce` (twice) to find the script with the most characters, we can write something like this:\n\n```\nfunction characterCount(script) {\n  return script.ranges.reduce((count, [from, to]) => {\n    return count + (to - from);\n  }, 0);\n}\n\nconsole.log(SCRIPTS.reduce((a, b) => {\n  return characterCount(a) < characterCount(b) ? b : a;\n}));\n// → {name: \"Han\", …}\n```\n\nThe `characterCount` function reduces the ranges assigned to a script by summing their sizes. Note the use of destructuring in the parameter list of the reducer function. The second call to `reduce` then uses this to find the largest script by repeatedly comparing two scripts and returning the larger one.\n\nThe Han script has more than 89,000 characters assigned to it in the Unicode standard, making it by far the biggest writing system in the dataset. Han is a script sometimes used for Chinese, Japanese, and Korean text. Those languages share a lot of characters, though they tend to write them differently. The (US-based) Unicode Consortium decided to treat them as a single writing system to save character codes. This is called _Han unification_ and still makes some people very angry.\n\n## Composability\n\n{{index loop, maximum}}\n\nConsider how we would have written the previous example (finding the biggest script) without higher-order functions. The code is not that much worse.\n\n```{test: no}\nlet biggest = null;\nfor (let script of SCRIPTS) {\n  if (biggest == null ||\n      characterCount(biggest) < characterCount(script)) {\n    biggest = script;\n  }\n}\nconsole.log(biggest);\n// → {name: \"Han\", …}\n```\n\nThere are a few more bindings, and the program is four lines longer, but it is still very readable.\n\n{{index \"average function\", composability, [function, \"higher-order\"], \"filter method\", \"map method\", \"reduce method\"}}\n\n{{id average_function}}\n\nThe abstractions these functions provide really shine when you need to _compose_ operations. As an example, let's write code that finds the average year of origin for living and dead scripts in the dataset.\n\n```\nfunction average(array) {\n  return array.reduce((a, b) => a + b) / array.length;\n}\n\nconsole.log(Math.round(average(\n  SCRIPTS.filter(s => s.living).map(s => s.year))));\n// → 1165\nconsole.log(Math.round(average(\n  SCRIPTS.filter(s => !s.living).map(s => s.year))));\n// → 204\n```\n\nAs you can see, the dead scripts in Unicode are, on average, older than the living ones. This is not a terribly meaningful or surprising statistic. But I hope you'll agree that the code used to compute it isn't hard to read. You can see it as a pipeline: we start with all scripts, filter out the living (or dead) ones, take the years from those, average them, and round the result.\n\nYou could definitely also write this computation as one big ((loop)).\n\n```\nlet total = 0, count = 0;\nfor (let script of SCRIPTS) {\n  if (script.living) {\n    total += script.year;\n    count += 1;\n  }\n}\nconsole.log(Math.round(total / count));\n// → 1165\n```\n\nHowever, it is harder to see what was being computed and how. And because intermediate results aren't represented as coherent values, it'd be a lot more work to extract something like `average` into a separate function.\n\n{{index efficiency, [array, creation]}}\n\nIn terms of what the computer is actually doing, these two approaches are also quite different. The first will build up new arrays when running `filter` and `map`, whereas the second computes only some numbers, doing less work. You can usually afford the readable approach, but if you're processing huge arrays and doing so many times, the less abstract style might be worth the extra speed.\n\n## Strings and character codes\n\n{{index \"SCRIPTS dataset\"}}\n\nOne interesting use of this dataset would be figuring out what script a piece of text is using. Let's go through a program that does this.\n\nRemember that each script has an array of character code ranges associated with it. Given a character code, we could use a function like this to find the corresponding script (if any):\n\n{{index \"some method\", \"predicate function\", [array, methods]}}\n\n```{includeCode: strip_log}\nfunction characterScript(code) {\n  for (let script of SCRIPTS) {\n    if (script.ranges.some(([from, to]) => {\n      return code >= from && code < to;\n    })) {\n      return script;\n    }\n  }\n  return null;\n}\n\nconsole.log(characterScript(121));\n// → {name: \"Latin\", …}\n```\n\nThe `some` method is another higher-order function. It takes a test function and tells you whether that function returns true for any of the elements in the array.\n\n{{id code_units}}\n\nBut how do we get the character codes in a string?\n\nIn [Chapter ?](values) I mentioned that JavaScript ((string))s are encoded as a sequence of 16-bit numbers. These are called _((code unit))s_. A ((Unicode)) ((character)) code was initially supposed to fit within such a unit (which gives you a little over 65,000 characters). When it became clear that wasn't going to be enough, many people balked at the need to use more memory per character. To address these concerns, ((UTF-16)), the format also used by JavaScript strings, was invented. It describes most common characters using a single 16-bit code unit but uses a pair of two such units for others.\n\n{{index error}}\n\nUTF-16 is generally considered a bad idea today. It seems almost intentionally designed to invite mistakes. It's easy to write programs that pretend code units and characters are the same thing. And if your language doesn't use two-unit characters, that will appear to work just fine. But as soon as someone tries to use such a program with some less common ((Chinese characters)), it breaks. Fortunately, with the advent of ((emoji)), everybody has started using two-unit characters, and the burden of dealing with such problems is more fairly distributed.\n\n{{index [string, length], [string, indexing], \"charCodeAt method\"}}\n\nUnfortunately, obvious operations on JavaScript strings, such as getting their length through the `length` property and accessing their content using square brackets, deal only with code units.\n\n```{test: no}\n// Two emoji characters, horse and shoe\nlet horseShoe = \"🐴👟\";\nconsole.log(horseShoe.length);\n// → 4\nconsole.log(horseShoe[0]);\n// → (Invalid half-character)\nconsole.log(horseShoe.charCodeAt(0));\n// → 55357 (Code of the half-character)\nconsole.log(horseShoe.codePointAt(0));\n// → 128052 (Actual code for horse emoji)\n```\n\n{{index \"codePointAt method\"}}\n\nJavaScript's `charCodeAt` method gives you a code unit, not a full character code. The `codePointAt` method, added later, does give a full Unicode character, so we could use that to get characters from a string. But the argument passed to `codePointAt` is still an index into the sequence of code units. To run over all characters in a string, we'd still need to deal with the question of whether a character takes up one or two code units.\n\n{{index \"for/of loop\", character}}\n\nIn the [previous chapter](data#for_of_loop), I mentioned that a `for`/`of` loop can also be used on strings. Like `codePointAt`, this type of loop was introduced at a time when people were acutely aware of the problems with UTF-16. When you use it to loop over a string, it gives you real characters, not code units.\n\n```\nlet roseDragon = \"🌹🐉\";\nfor (let char of roseDragon) {\n  console.log(char);\n}\n// → 🌹\n// → 🐉\n```\n\nIf you have a character (which will be a string of one or two code units), you can use `codePointAt(0)` to get its code.\n\n## Recognizing text\n\n{{index \"SCRIPTS dataset\", \"countBy function\", [array, counting]}}\n\nWe have a `characterScript` function and a way to correctly loop over characters. The next step is to count the characters that belong to each script. The following counting abstraction will be useful there:\n\n```{includeCode: strip_log}\nfunction countBy(items, groupName) {\n  let counts = [];\n  for (let item of items) {\n    let name = groupName(item);\n    let known = counts.find(c => c.name == name);\n    if (!known) {\n      counts.push({name, count: 1});\n    } else {\n      known.count++;\n    }\n  }\n  return counts;\n}\n\nconsole.log(countBy([1, 2, 3, 4, 5], n => n > 2));\n// → [{name: false, count: 2}, {name: true, count: 3}]\n```\n\nThe `countBy` function expects a collection (anything that we can loop over with `for`/`of`) and a function that computes a group name for a given element. It returns an array of objects, each of which names a group and tells you the number of elements that were found in that group.\n\n{{index \"find method\"}}\n\nIt uses another array method, `find`, which goes over the elements in the array and returns the first one for which a function returns true. It returns `undefined` when it finds no such element.\n\n{{index \"textScripts function\", \"Chinese characters\"}}\n\nUsing `countBy`, we can write the function that tells us which scripts are used in a piece of text.\n\n```{includeCode: strip_log, startCode: true}\nfunction textScripts(text) {\n  let scripts = countBy(text, char => {\n    let script = characterScript(char.codePointAt(0));\n    return script ? script.name : \"none\";\n  }).filter(({name}) => name != \"none\");\n\n  let total = scripts.reduce((n, {count}) => n + count, 0);\n  if (total == 0) return \"No scripts found\";\n\n  return scripts.map(({name, count}) => {\n    return `${Math.round(count * 100 / total)}% ${name}`;\n  }).join(\", \");\n}\n\nconsole.log(textScripts('英国的狗说\"woof\", 俄罗斯的狗说\"тяв\"'));\n// → 61% Han, 22% Latin, 17% Cyrillic\n```\n\n{{index \"characterScript function\", \"filter method\"}}\n\nThe function first counts the characters by name, using `characterScript` to assign them a name and falling back to the string `\"none\"` for characters that aren't part of any script. The `filter` call drops the entry for `\"none\"` from the resulting array, since we aren't interested in those characters.\n\n{{index \"reduce method\", \"map method\", \"join method\", [array, methods]}}\n\nTo be able to compute ((percentage))s, we first need the total number of characters that belong to a script, which we can compute with `reduce`. If we find no such characters, the function returns a specific string. Otherwise, it transforms the counting entries into readable strings with `map` and then combines them with `join`.\n\n## Summary\n\nBeing able to pass function values to other functions is a deeply useful aspect of JavaScript. It allows us to write functions that model computations with \"gaps\" in them. The code that calls these functions can fill in the gaps by providing function values.\n\nArrays provide a number of useful higher-order methods. You can use `forEach` to loop over the elements in an array. The `filter` method returns a new array containing only the elements that pass the ((predicate function)). You can transform an array by putting each element through a function using `map`. You can use `reduce` to combine all the elements in an array into a single value. The `some` method tests whether any element matches a given predicate function, while `find` finds the first element that matches a predicate.\n\n## Exercises\n\n### Flattening\n\n{{index \"flattening (exercise)\", \"reduce method\", \"concat method\", [array, flattening]}}\n\nUse the `reduce` method in combination with the `concat` method to \"flatten\" an array of arrays into a single array that has all the elements of the original arrays.\n\n{{if interactive\n\n```{test: no}\nlet arrays = [[1, 2, 3], [4, 5], [6]];\n// Your code here.\n// → [1, 2, 3, 4, 5, 6]\n```\nif}}\n\n### Your own loop\n\n{{index \"your own loop (example)\", \"for loop\"}}\n\nWrite a higher-order function `loop` that provides something like a `for` loop statement. It should take a value, a test function, an update function, and a body function. Each iteration, it should first run the test function on the current loop value and stop if that returns `false`. It should then call the body function, giving it the current value, and finally call the update function to create a new value and start over from the beginning.\n\nWhen defining the function, you can use a regular loop to do the actual looping.\n\n{{if interactive\n\n```{test: no}\n// Your code here.\n\nloop(3, n => n > 0, n => n - 1, console.log);\n// → 3\n// → 2\n// → 1\n```\n\nif}}\n\n### Everything\n\n{{index \"predicate function\", \"everything (exercise)\", \"every method\", \"some method\", [array, methods], \"&& operator\", \"|| operator\"}}\n\nArrays also have an `every` method analogous to the `some` method. This method returns `true` when the given function returns `true` for _every_ element in the array. In a way, `some` is a version of the `||` operator that acts on arrays, and `every` is like the `&&` operator.\n\nImplement `every` as a function that takes an array and a predicate function as parameters. Write two versions, one using a loop and one using the `some` method.\n\n{{if interactive\n\n```{test: no}\nfunction every(array, test) {\n  // Your code here.\n}\n\nconsole.log(every([1, 3, 5], n => n < 10));\n// → true\nconsole.log(every([2, 4, 16], n => n < 10));\n// → false\nconsole.log(every([], n => n < 10));\n// → true\n```\n\nif}}\n\n{{hint\n\n{{index \"everything (exercise)\", \"short-circuit evaluation\", \"return keyword\"}}\n\nLike the `&&` operator, the `every` method can stop evaluating further elements as soon as it has found one that doesn't match. So the loop-based version can jump out of the loop—with `break` or `return`—as soon as it runs into an element for which the predicate function returns `false`. If the loop runs to its end without finding such an element, we know that all elements matched and we should return `true`.\n\nTo build `every` on top of `some`, we can apply _((De Morgan's laws))_, which state that `a && b` equals `!(!a || !b)`. This can be generalized to arrays, where all elements in the array match if there is no element in the array that does not match.\n\nhint}}\n\n### Dominant writing direction\n\n{{index \"SCRIPTS dataset\", \"direction (writing)\", \"groupBy function\", \"dominant direction (exercise)\"}}\n\nWrite a function that computes the dominant writing direction in a string of text. Remember that each script object has a `direction` property that can be `\"ltr\"` (left to right), `\"rtl\"` (right to left), or `\"ttb\"` (top to bottom).\n\n{{index \"characterScript function\", \"countBy function\"}}\n\nThe dominant direction is the direction of a majority of the characters that have a script associated with them. The `characterScript` and `countBy` functions defined earlier in the chapter are probably useful here.\n\n{{if interactive\n\n```{test: no}\nfunction dominantDirection(text) {\n  // Your code here.\n}\n\nconsole.log(dominantDirection(\"Hello!\"));\n// → ltr\nconsole.log(dominantDirection(\"Hey, مساء الخير\"));\n// → rtl\n```\nif}}\n\n{{hint\n\n{{index \"dominant direction (exercise)\", \"textScripts function\", \"filter method\", \"characterScript function\"}}\n\nYour solution might look a lot like the first half of the `textScripts` example. You again have to count characters by a criterion based on `characterScript` and then filter out the part of the result that refers to uninteresting (script-less) characters.\n\n{{index \"reduce method\"}}\n\nFinding the direction with the highest character count can be done with `reduce`. If it's not clear how, refer to the example earlier in the chapter, where `reduce` was used to find the script with the most characters.\n\nhint}}\n"
        },
        {
          "name": "06_object.md",
          "type": "blob",
          "size": 40.90234375,
          "content": "{{meta {load_files: [\"code/chapter/06_object.js\"], zip: \"node/html\"}}}\n\n# The Secret Life of Objects\n\n{{quote {author: \"Barbara Liskov\", title: \"Programming with Abstract Data Types\", chapter: true}\n\nAn abstract data type is realized by writing a special kind of program […] which defines the type in terms of the operations which can be performed on it.\n\nquote}}\n\n{{index \"Liskov, Barbara\", \"abstract data type\"}}\n\n{{figure {url: \"img/chapter_picture_6.jpg\", alt: \"Illustration of a rabbit next to its prototype, a schematic representation of a rabbit\", chapter: framed}}}\n\n[Chapter ?](data) introduced JavaScript's objects as containers that hold other data. In programming culture, _((object-oriented programming))_ is a set of techniques that use objects as the central principle of program organization. Though no one really agrees on its precise definition, object-oriented programming has shaped the design of many programming languages, including JavaScript. This chapter describes the way these ideas can be applied in JavaScript.\n\n## Abstract Data Types\n\n{{index \"abstract data type\", type, \"mixer example\"}}\n\nThe main idea in object-oriented programming is to use objects, or rather _types_ of objects, as the unit of program organization. Setting up a program as a number of strictly separated object types provides a way to think about its structure and thus to enforce some kind of discipline, preventing everything from becoming entangled.\n\nThe way to do this is to think of objects somewhat like you'd think of an electric mixer or other consumer ((appliance)). The people who design and assemble a mixer have to do specialized work requiring material science and understanding of electricity. They cover all that up in a smooth plastic shell so that the people who only want to mix pancake batter don't have to worry about all that—they have to understand only the few knobs that the mixer can be operated with.\n\n{{index \"class\"}}\n\nSimilarly, an _abstract data type_, or _object class_, is a subprogram that may contain arbitrarily complicated code but exposes a limited set of methods and properties that people working with it are supposed to use. This allows large programs to be built up out of a number of appliance types, limiting the degree to which these different parts are entangled by requiring them to only interact with each other in specific ways.\n\n{{index encapsulation, isolation, modularity}}\n\nIf a problem is found in one such object class, it can often be repaired or even completely rewritten without impacting the rest of the program. Even better, it may be possible to use object classes in multiple different programs, avoiding the need to recreate their functionality from scratch. You can think of JavaScript's built-in data structures, such as arrays and strings, as such reusable abstract data types.\n\n{{id interface}}\n{{index [interface, object]}}\n\nEach abstract data type has an _interface_, the collection of operations that external code can perform on it. Any details beyond that interface are _encapsulated_, treated as internal to the type and of no concern to the rest of the program.\n\nEven basic things like numbers can be thought of as an abstract data type whose interface allows us to add them, multiply them, compare them, and so on. In fact, the fixation on single _objects_ as the main unit of organization in classical object-oriented programming is somewhat unfortunate since useful pieces of functionality often involve a group of different object classes working closely together.\n\n{{id obj_methods}}\n\n## Methods\n\n{{index \"rabbit example\", method, [property, access]}}\n\nIn JavaScript, methods are nothing more than properties that hold function values. This is a simple method:\n\n```{includeCode: \"top_lines:6\"}\nfunction speak(line) {\n  console.log(`The ${this.type} rabbit says '${line}'`);\n}\nlet whiteRabbit = {type: \"white\", speak};\nlet hungryRabbit = {type: \"hungry\", speak};\n\nwhiteRabbit.speak(\"Oh my fur and whiskers\");\n// → The white rabbit says 'Oh my fur and whiskers'\nhungryRabbit.speak(\"Got any carrots?\");\n// → The hungry rabbit says 'Got any carrots?'\n```\n\n{{index \"this binding\", \"method call\"}}\n\nTypically a method needs to do something with the object on which it was called. When a function is called as a method—looked up as a property and immediately called, as in `object.method()`—the binding called `this` in its body automatically points at the object on which it was called.\n\n{{id call_method}}\n\n{{index \"call method\"}}\n\nYou can think of `this` as an extra ((parameter)) that is passed to the function in a different way than regular parameters. If you want to provide it explicitly, you can use a function's `call` method, which takes the `this` value as its first argument and treats further arguments as normal parameters.\n\n```\nspeak.call(whiteRabbit, \"Hurry\");\n// → The white rabbit says 'Hurry'\n```\n\nSince each function has its own `this` binding whose value depends on the way it is called, you cannot refer to the `this` of the wrapping scope in a regular function defined with the `function` keyword.\n\n{{index \"this binding\", \"arrow function\"}}\n\nArrow functions are different—they do not bind their own `this` but can see the `this` binding of the scope around them. Thus, you can do something like the following code, which references `this` from inside a local function:\n\n```\nlet finder = {\n  find(array) {\n    return array.some(v => v == this.value);\n  },\n  value: 5\n};\nconsole.log(finder.find([4, 5]));\n// → true\n```\n\nA property like `find(array)` in an object expression is a shorthand way of defining a method. It creates a property called `find` and gives it a function as its value.\n\nIf I had written the argument to `some` using the `function` keyword, this code wouldn't work.\n\n{{id prototypes}}\n\n## Prototypes\n\nOne way to create a rabbit object type with a `speak` method would be to create a helper function that has a rabbit type as its parameter and returns an object holding that as its `type` property and our speak function in its `speak` property.\n\nAll rabbits share that same method. Especially for types with many methods, it would be nice if there were a way to keep a type's methods in a single place, rather than adding them to each object individually.\n\n{{index [property, inheritance], [object, property], \"Object prototype\"}}\n\nIn JavaScript, _((prototype))s_ are the way to do that. Objects can be linked to other objects, to magically get all the properties that other object has. Plain old objects created with `{}` notation are linked to an object called `Object.prototype`.\n\n{{index \"toString method\"}}\n\n```\nlet empty = {};\nconsole.log(empty.toString);\n// → function toString(){…}\nconsole.log(empty.toString());\n// → [object Object]\n```\n\nIt looks like we just pulled a property out of an empty object. But in fact, `toString` is a method stored in `Object.prototype`, meaning it is available in most objects.\n\nWhen an object gets a request for a property that it doesn't have, its prototype will be searched for the property. If that doesn't have it, the _prototype's_ prototype is searched, and so on until an object without prototype is reached (`Object.prototype` is such an object).\n\n```\nconsole.log(Object.getPrototypeOf({}) == Object.prototype);\n// → true\nconsole.log(Object.getPrototypeOf(Object.prototype));\n// → null\n```\n\n{{index \"getPrototypeOf function\"}}\n\nAs you'd guess, `Object.getPrototypeOf` returns the prototype of an object.\n\n{{index inheritance, \"Function prototype\", \"Array prototype\", \"Object prototype\"}}\n\nMany objects don't directly have `Object.prototype` as their ((prototype)) but instead have another object that provides a different set of default properties. Functions derive from `Function.prototype` and arrays derive from `Array.prototype`.\n\n```\nconsole.log(Object.getPrototypeOf(Math.max) ==\n            Function.prototype);\n// → true\nconsole.log(Object.getPrototypeOf([]) == Array.prototype);\n// → true\n```\n\n{{index \"Object prototype\"}}\n\nSuch a prototype object will itself have a prototype, often `Object.prototype`, so that it still indirectly provides methods like `toString`.\n\n{{index \"rabbit example\", \"Object.create function\"}}\n\nYou can use `Object.create` to create an object with a specific ((prototype)).\n\n```{includeCode: \"top_lines: 7\"}\nlet protoRabbit = {\n  speak(line) {\n    console.log(`The ${this.type} rabbit says '${line}'`);\n  }\n};\nlet blackRabbit = Object.create(protoRabbit);\nblackRabbit.type = \"black\";\nblackRabbit.speak(\"I am fear and darkness\");\n// → The black rabbit says 'I am fear and darkness'\n```\n\n{{index \"shared property\"}}\n\nThe \"proto\" rabbit acts as a container for the properties shared by all rabbits. An individual rabbit object, like the black rabbit, contains properties that apply only to itself—in this case its type—and derives shared properties from its prototype.\n\n{{id classes}}\n\n## Classes\n\n{{index \"object-oriented programming\", \"abstract data type\"}}\n\nJavaScript's ((prototype)) system can be interpreted as a somewhat free-form take on abstract data types or ((class))es. A _class_ defines the shape of a type of object—what methods and properties it has. Such an object is called an _((instance))_ of the class.\n\n{{index [property, inheritance]}}\n\nPrototypes are useful for defining properties for which all instances of a class share the same value. Properties that differ per instance, such as our rabbits' `type` property, need to be stored directly in the objects themselves.\n\n{{id constructors}}\n\nTo create an instance of a given class, you have to make an object that derives from the proper prototype, but you _also_ have to make sure it itself has the properties that instances of this class are supposed to have. This is what a _((constructor))_ function does.\n\n```\nfunction makeRabbit(type) {\n  let rabbit = Object.create(protoRabbit);\n  rabbit.type = type;\n  return rabbit;\n}\n```\n\nJavaScript's ((class)) notation makes it easier to define this type of function, along with a ((prototype)) object.\n\n{{index \"rabbit example\", constructor}}\n\n```{includeCode: true}\nclass Rabbit {\n  constructor(type) {\n    this.type = type;\n  }\n  speak(line) {\n    console.log(`The ${this.type} rabbit says '${line}'`);\n  }\n}\n```\n\n{{index \"prototype property\", [braces, class]}}\n\nThe `class` keyword starts a ((class declaration)), which allows us to define a constructor and a set of methods together. Any number of methods may be written inside the declaration's braces. This code has the effect of defining a binding called `Rabbit`, which holds a function that runs the code in `constructor` and has a `prototype` property that holds the `speak` method.\n\n{{index \"new operator\", \"this binding\", [object, creation]}}\n\nThis function cannot be called like a normal function. Constructors, in JavaScript, are called by putting the keyword `new` in front of them. Doing so creates a fresh instance object whose prototype is the object from the function's `prototype` property, then runs the function with `this` bound to the new object, and finally returns the object.\n\n```{includeCode: true}\nlet killerRabbit = new Rabbit(\"killer\");\n```\n\nIn fact, `class` was only introduced in the 2015 edition of JavaScript. Any function can be used as a constructor, and before 2015, the way to define a class was to write a regular function and then manipulate its `prototype` property.\n\n```\nfunction ArchaicRabbit(type) {\n  this.type = type;\n}\nArchaicRabbit.prototype.speak = function(line) {\n  console.log(`The ${this.type} rabbit says '${line}'`);\n};\nlet oldSchoolRabbit = new ArchaicRabbit(\"old school\");\n```\n\nFor this reason, all non-arrow functions start with a `prototype` property holding an empty object.\n\n{{index capitalization}}\n\nBy convention, the names of constructors are capitalized so that they can easily be distinguished from other functions.\n\n{{index \"prototype property\", \"getPrototypeOf function\"}}\n\nIt is important to understand the distinction between the way a prototype is associated with a constructor (through its `prototype` property) and the way objects _have_ a prototype (which can be found with `Object.getPrototypeOf`). The actual prototype of a constructor is `Function.prototype` since constructors are functions. The constructor function's `prototype` _property_ holds the prototype used for instances created through it.\n\n```\nconsole.log(Object.getPrototypeOf(Rabbit) ==\n            Function.prototype);\n// → true\nconsole.log(Object.getPrototypeOf(killerRabbit) ==\n            Rabbit.prototype);\n// → true\n```\n\n{{index constructor}}\n\nConstructors will typically add some per-instance properties to `this`. It is also possible to declare properties directly in the ((class declaration)). Unlike methods, such properties are added to ((instance)) objects and not the prototype.\n\n```\nclass Particle {\n  speed = 0;\n  constructor(position) {\n    this.position = position;\n  }\n}\n```\n\nLike `function`, `class` can be used both in statements and in expressions. When used as an expression, it doesn't define a binding but just produces the constructor as a value. You are allowed to omit the class name in a class expression.\n\n```\nlet object = new class { getWord() { return \"hello\"; } };\nconsole.log(object.getWord());\n// → hello\n```\n\n\n## Private Properties\n\n{{index [property, private], [property, public], \"class declaration\"}}\n\nIt is common for classes to define some properties and ((method))s for internal use that are not part of their ((interface)). These are called _private_ properties, as opposed to _public_ ones, which are part of the object's external interface.\n\n{{index [method, private]}}\n\nTo declare a private method, put a `#` sign in front of its name. Such methods can be called only from inside the `class` declaration that defines them.\n\n```\nclass SecretiveObject {\n  #getSecret() {\n    return \"I ate all the plums\";\n  }\n  interrogate() {\n    let shallISayIt = this.#getSecret();\n    return \"never\";\n  }\n}\n```\n\nWhen a class does not declare a constructor, it will automatically get an empty one.\n\nIf you try to call `#getSecret` from outside the class, you get an error. Its existence is entirely hidden inside the class declaration.\n\nTo use private instance properties, you must declare them. Regular properties can be created by just assigning to them, but private properties _must_ be declared in the class declaration to be available at all.\n\nThis class implements an appliance for getting a random whole number below a given maximum number. It has only one ((public)) property: `getNumber`.\n\n```\nclass RandomSource {\n  #max;\n  constructor(max) {\n    this.#max = max;\n  }\n  getNumber() {\n    return Math.floor(Math.random() * this.#max);\n  }\n}\n```\n\n## Overriding derived properties\n\n{{index \"shared property\", overriding, [property, inheritance]}}\n\nWhen you add a property to an object, whether it is present in the prototype or not, the property is added to the object _itself_. If there was already a property with the same name in the prototype, this property will no longer affect the object, as it is now hidden behind the object's own property.\n\n```\nRabbit.prototype.teeth = \"small\";\nconsole.log(killerRabbit.teeth);\n// → small\nkillerRabbit.teeth = \"long, sharp, and bloody\";\nconsole.log(killerRabbit.teeth);\n// → long, sharp, and bloody\nconsole.log((new Rabbit(\"basic\")).teeth);\n// → small\nconsole.log(Rabbit.prototype.teeth);\n// → small\n```\n\n{{index [prototype, diagram]}}\n\nThe following diagram sketches the situation after this code has run. The `Rabbit` and `Object` ((prototype))s lie behind `killerRabbit` as a kind of backdrop, where properties that are not found in the object itself can be looked up.\n\n{{figure {url: \"img/rabbits.svg\", alt: \"A diagram showing the object structure of rabbits and their prototypes. There is a box for the 'killerRabbit' instance (holding instance properties like 'type'), with its two prototypes, 'Rabbit.prototype' (holding the 'speak' method) and 'Object.prototype' (holding methods like 'toString') stacked behind it.\",width: \"8cm\"}}}\n\n{{index \"shared property\"}}\n\nOverriding properties that exist in a prototype can be a useful thing to do. As the rabbit teeth example shows, overriding can be used to express exceptional properties in instances of a more generic class of objects while letting the nonexceptional objects take a standard value from their prototype.\n\n{{index \"toString method\", \"Array prototype\", \"Function prototype\"}}\n\nOverriding is also used to give the standard function and array prototypes a different `toString` method than the basic object prototype.\n\n```\nconsole.log(Array.prototype.toString ==\n            Object.prototype.toString);\n// → false\nconsole.log([1, 2].toString());\n// → 1,2\n```\n\n{{index \"toString method\", \"join method\", \"call method\"}}\n\nCalling `toString` on an array gives a result similar to calling `.join(\",\")` on it—it puts commas between the values in the array. Directly calling `Object.prototype.toString` with an array produces a different string. That function doesn't know about arrays, so it simply puts the word _object_ and the name of the type between square brackets.\n\n```\nconsole.log(Object.prototype.toString.call([1, 2]));\n// → [object Array]\n```\n\n## Maps\n\n{{index \"map method\"}}\n\nWe saw the word _map_ used in the [previous chapter](higher_order#map) for an operation that transforms a data structure by applying a function to its elements. Confusing as it is, in programming the same word is used for a related but rather different thing.\n\n{{index \"map (data structure)\", \"ages example\", [\"data structure\", map]}}\n\nA _map_ (noun) is a data structure that associates values (the keys) with other values. For example, you might want to map names to ages. It is possible to use objects for this.\n\n```\nlet ages = {\n  Boris: 39,\n  Liang: 22,\n  Júlia: 62\n};\n\nconsole.log(`Júlia is ${ages[\"Júlia\"]}`);\n// → Júlia is 62\nconsole.log(\"Is Jack's age known?\", \"Jack\" in ages);\n// → Is Jack's age known? false\nconsole.log(\"Is toString's age known?\", \"toString\" in ages);\n// → Is toString's age known? true\n```\n\n{{index \"Object.prototype\", \"toString method\"}}\n\nHere, the object's property names are the people's names and the property values are their ages. But we certainly didn't list anybody named toString in our map. Yet because plain objects derive from `Object.prototype`, it looks like the property is there.\n\n{{index \"Object.create function\", prototype}}\n\nFor this reason, using plain objects as maps is dangerous. There are several possible ways to avoid this problem. First, you can create objects with _no_ prototype. If you pass `null` to `Object.create`, the resulting object will not derive from `Object.prototype` and can be safely used as a map.\n\n```\nconsole.log(\"toString\" in Object.create(null));\n// → false\n```\n\n{{index [property, naming]}}\n\nObject property names must be strings. If you need a map whose keys can't easily be converted to strings—such as objects—you cannot use an object as your map.\n\n{{index \"Map class\"}}\n\nFortunately, JavaScript comes with a class called `Map` that is written for this exact purpose. It stores a mapping and allows any type of keys.\n\n```\nlet ages = new Map();\nages.set(\"Boris\", 39);\nages.set(\"Liang\", 22);\nages.set(\"Júlia\", 62);\n\nconsole.log(`Júlia is ${ages.get(\"Júlia\")}`);\n// → Júlia is 62\nconsole.log(\"Is Jack's age known?\", ages.has(\"Jack\"));\n// → Is Jack's age known? false\nconsole.log(ages.has(\"toString\"));\n// → false\n```\n\n{{index [interface, object], \"set method\", \"get method\", \"has method\", encapsulation}}\n\nThe methods `set`, `get`, and `has` are part of the interface of the `Map` object. Writing a data structure that can quickly update and search a large set of values isn't easy, but we don't have to worry about that. Someone else did it for us, and we can go through this simple interface to use their work.\n\n{{index \"hasOwn function\", \"in operator\"}}\n\nIf you do have a plain object that you need to treat as a map for some reason, it is useful to know that `Object.keys` returns only an object's _own_ keys, not those in the prototype. As an alternative to the `in` operator, you can use the `Object.hasOwn` function, which ignores the object's prototype.\n\n```\nconsole.log(Object.hasOwn({x: 1}, \"x\"));\n// → true\nconsole.log(Object.hasOwn({x: 1}, \"toString\"));\n// → false\n```\n\n## Polymorphism\n\n{{index \"toString method\", \"String function\", polymorphism, overriding, \"object-oriented programming\"}}\n\nWhen you call the `String` function (which converts a value to a string) on an object, it will call the `toString` method on that object to try to create a meaningful string from it. I mentioned that some of the standard prototypes define their own version of `toString` so they can create a string that contains more useful information than `\"[object Object]\"`. You can also do that yourself.\n\n```{includeCode: \"top_lines: 3\"}\nRabbit.prototype.toString = function() {\n  return `a ${this.type} rabbit`;\n};\n\nconsole.log(String(killerRabbit));\n// → a killer rabbit\n```\n\n{{index \"object-oriented programming\", [interface, object]}}\n\nThis is a simple instance of a powerful idea. When a piece of code is written to work with objects that have a certain interface—in this case, a `toString` method—any kind of object that happens to support this interface can be plugged into the code and will be able to work with it.\n\nThis technique is called _polymorphism_. Polymorphic code can work with values of different shapes, as long as they support the interface it expects.\n\n{{index \"forEach method\"}}\n\nAn example of a widely used interface is that of ((array-like object))s that have a `length` property holding a number and numbered properties for each of their elements. Both arrays and strings support this interface, as do various other objects, some of which we'll see later in the chapters about the browser. Our implementation of `forEach` from [Chapter ?](higher_order) works on anything that provides this interface. In fact, so does `Array.prototype.forEach`.\n\n```\nArray.prototype.forEach.call({\n  length: 2,\n  0: \"A\",\n  1: \"B\"\n}, elt => console.log(elt));\n// → A\n// → B\n```\n\n## Getters, setters, and statics\n\n{{index [interface, object], [property, definition], \"Map class\"}}\n\nInterfaces often contain plain properties, not just methods. For example, `Map` objects have a `size` property that tells you how many keys are stored in them.\n\nIt is not necessary for such an object to compute and store such a property directly in the instance. Even properties that are accessed directly may hide a method call. Such methods are called _((getter))s_ and are defined by writing `get` in front of the method name in an object expression or class declaration.\n\n```{test: no}\nlet varyingSize = {\n  get size() {\n    return Math.floor(Math.random() * 100);\n  }\n};\n\nconsole.log(varyingSize.size);\n// → 73\nconsole.log(varyingSize.size);\n// → 49\n```\n\n{{index \"temperature example\"}}\n\nWhenever someone reads from this object's `size` property, the associated method is called. You can do a similar thing when a property is written to, using a _((setter))_.\n\n```{startCode: true, includeCode: \"top_lines: 16\"}\nclass Temperature {\n  constructor(celsius) {\n    this.celsius = celsius;\n  }\n  get fahrenheit() {\n    return this.celsius * 1.8 + 32;\n  }\n  set fahrenheit(value) {\n    this.celsius = (value - 32) / 1.8;\n  }\n\n  static fromFahrenheit(value) {\n    return new Temperature((value - 32) / 1.8);\n  }\n}\n\nlet temp = new Temperature(22);\nconsole.log(temp.fahrenheit);\n// → 71.6\ntemp.fahrenheit = 86;\nconsole.log(temp.celsius);\n// → 30\n```\n\nThe `Temperature` class allows you to read and write the temperature in either degrees ((Celsius)) or degrees ((Fahrenheit)), but internally it stores only Celsius and automatically converts to and from Celsius in the `fahrenheit` getter and setter.\n\n{{index \"static method\", \"static property\"}}\n\nSometimes you want to attach some properties directly to your constructor function rather than to the prototype. Such methods won't have access to a class instance but can, for example, be used to provide additional ways to create instances.\n\nInside a class declaration, methods or properties that have `static` written before their name are stored on the constructor. For example, the `Temperature` class allows you to write `Temperature.fromFahrenheit(100)` to create a temperature using degrees Fahrenheit.\n\n```\nlet boil = Temperature.fromFahrenheit(212);\nconsole.log(boil.celsius);\n// → 100\n```\n\n## Symbols\n\n{{index \"for/of loop\", \"iterator interface\"}}\n\nI mentioned in [Chapter ?](data#for_of_loop) that a `for`/`of` loop can loop over several kinds of data structures. This is another case of polymorphism—such loops expect the data structure to expose a specific interface, which arrays and strings do. And we can also add this interface to our own objects! But before we can do that, we need to briefly take a look at the symbol type.\n\nIt is possible for multiple interfaces to use the same property name for different things. For example, on array-like objects, `length` refers to the number of elements in the collection. But an object interface describing a hiking route could use `length` to provide the length of the route in meters. It would not be possible for an object to conform to both these interfaces.\n\nAn object trying to be a route and array-like (maybe to enumerate its waypoints) is somewhat far-fetched, and this kind of problem isn't that common in practice. For things like the iteration protocol, though, the language designers needed a type of property that _really_ doesn't conflict with any others. So in 2015, _((symbol))s_ were added to the language.\n\n{{index \"Symbol function\", [property, naming]}}\n\nMost properties, including all those we have seen so far, are named with strings. But it is also possible to use symbols as property names. Symbols are values created with the `Symbol` function. Unlike strings, newly created symbols are unique—you cannot create the same symbol twice.\n\n```\nlet sym = Symbol(\"name\");\nconsole.log(sym == Symbol(\"name\"));\n// → false\nRabbit.prototype[sym] = 55;\nconsole.log(killerRabbit[sym]);\n// → 55\n```\n\nThe string you pass to `Symbol` is included when you convert it to a string and can make it easier to recognize a symbol when, for example, showing it in the console. But it has no meaning beyond that—multiple symbols may have the same name.\n\nBeing both unique and usable as property names makes symbols suitable for defining interfaces that can peacefully live alongside other properties, no matter what their names are.\n\n```{includeCode: \"top_lines: 1\"}\nconst length = Symbol(\"length\");\nArray.prototype[length] = 0;\n\nconsole.log([1, 2].length);\n// → 2\nconsole.log([1, 2][length]);\n// → 0\n```\n\n{{index [property, naming]}}\n\nIt is possible to include symbol properties in object expressions and classes by using ((square bracket))s around the property name. That causes the expression between the brackets to be evaluated to produce the property name, analogous to the square bracket property access notation.\n\n```\nlet myTrip = {\n  length: 2,\n  0: \"Lankwitz\",\n  1: \"Babelsberg\",\n  [length]: 21500\n};\nconsole.log(myTrip[length], myTrip.length);\n// → 21500 2\n```\n\n## The iterator interface\n\n{{index \"iterable interface\", \"Symbol.iterator symbol\", \"for/of loop\"}}\n\nThe object given to a `for`/`of` loop is expected to be _iterable_. This means it has a method named with the `Symbol.iterator` symbol (a symbol value defined by the language, stored as a property of the `Symbol` function).\n\n{{index \"iterator interface\", \"next method\"}}\n\nWhen called, that method should return an object that provides a second interface, _iterator_. This is the actual thing that iterates. It has a `next` method that returns the next result. That result should be an object with a `value` property that provides the next value, if there is one, and a `done` property, which should be true when there are no more results and false otherwise.\n\nNote that the `next`, `value`, and `done` property names are plain strings, not symbols. Only `Symbol.iterator`, which is likely to be added to a _lot_ of different objects, is an actual symbol.\n\nWe can directly use this interface ourselves.\n\n```\nlet okIterator = \"OK\"[Symbol.iterator]();\nconsole.log(okIterator.next());\n// → {value: \"O\", done: false}\nconsole.log(okIterator.next());\n// → {value: \"K\", done: false}\nconsole.log(okIterator.next());\n// → {value: undefined, done: true}\n```\n\n{{index [\"data structure\", list], \"linked list\", collection}}\n\nLet's implement an iterable data structure similar to the linked list from the exercise in [Chapter ?](data). We'll write the list as a class this time.\n\n```{includeCode: true}\nclass List {\n  constructor(value, rest) {\n    this.value = value;\n    this.rest = rest;\n  }\n\n  get length() {\n    return 1 + (this.rest ? this.rest.length : 0);\n  }\n\n  static fromArray(array) {\n    let result = null;\n    for (let i = array.length - 1; i >= 0; i--) {\n      result = new this(array[i], result);\n    }\n    return result;\n  }\n}\n```\n\nNote that `this`, in a static method, points at the constructor of the class, not an instance—there is no instance around when a static method is called.\n\nIterating over a list should return all the list's elements from start to end. We'll write a separate class for the iterator.\n\n{{index \"ListIterator class\"}}\n\n```{includeCode: true}\nclass ListIterator {\n  constructor(list) {\n    this.list = list;\n  }\n\n  next() {\n    if (this.list == null) {\n      return {done: true};\n    }\n    let value = this.list.value;\n    this.list = this.list.rest;\n    return {value, done: false};\n  }\n}\n```\n\nThe class tracks the progress of iterating through the list by updating its `list` property to move to the next list object whenever a value is returned and reports that it is done when that list is empty (null).\n\nLet's set up the `List` class to be iterable. Throughout this book, I'll occasionally use after-the-fact prototype manipulation to add methods to classes so that the individual pieces of code remain small and self contained. In a regular program, where there is no need to split the code into small pieces, you'd declare these methods directly in the class instead.\n\n```{includeCode: true}\nList.prototype[Symbol.iterator] = function() {\n  return new ListIterator(this);\n};\n```\n\n{{index \"for/of loop\"}}\n\nWe can now loop over a list with `for`/`of`.\n\n```\nlet list = List.fromArray([1, 2, 3]);\nfor (let element of list) {\n  console.log(element);\n}\n// → 1\n// → 2\n// → 3\n```\n\n{{index spread}}\n\nThe `...` syntax in array notation and function calls similarly works with any iterable object. For example, you can use `[...value]` to create an array containing the elements in an arbitrary iterable object.\n\n```\nconsole.log([...\"PCI\"]);\n// → [\"P\", \"C\", \"I\"]\n```\n\n## Inheritance\n\n{{index inheritance, \"linked list\", \"object-oriented programming\", \"LengthList class\"}}\n\nImagine we need a list type much like the `List` class we saw before, but because we will be asking for its length all the time, we don't want it to have to scan through its `rest` every time. Instead, we want to store the length in every instance for efficient access.\n\n{{index overriding, prototype}}\n\nJavaScript's prototype system makes it possible to create a _new_ class, much like the old class, but with new definitions for some of its properties. The prototype for the new class derives from the old prototype but adds a new definition for, say, the `length` getter.\n\nIn object-oriented programming terms, this is called _((inheritance))_. The new class inherits properties and behavior from the old class.\n\n```{includeCode: \"top_lines: 12\"}\nclass LengthList extends List {\n  #length;\n\n  constructor(value, rest) {\n    super(value, rest);\n    this.#length = super.length;\n  }\n\n  get length() {\n    return this.#length;\n  }\n}\n\nconsole.log(LengthList.fromArray([1, 2, 3]).length);\n// → 3\n```\n\nThe use of the word `extends` indicates that this class shouldn't be directly based on the default `Object` prototype but on some other class. This is called the _((superclass))_. The derived class is the _((subclass))_.\n\nTo initialize a `LengthList` instance, the constructor calls the constructor of its superclass through the `super` keyword. This is necessary because if this new object is to behave (roughly) like a `List`, it is going to need the instance properties that lists have.\n\nThe constructor then stores the list's length in a private property. If we had written `this.length` there, the class's own getter would have been called, which doesn't work yet since `#length` hasn't been filled in yet. We can use `super.something` to call methods and getters on the superclass's prototype, which is often useful.\n\nInheritance allows us to build slightly different data types from existing data types with relatively little work. It is a fundamental part of the object-oriented tradition, alongside encapsulation and polymorphism. But while the latter two are now generally regarded as wonderful ideas, inheritance is more controversial.\n\n{{index complexity, reuse, \"class hierarchy\"}}\n\nWhereas ((encapsulation)) and polymorphism can be used to _separate_ pieces of code from one another, reducing the tangledness of the overall program, ((inheritance)) fundamentally ties classes together, creating _more_ tangle. When inheriting from a class, you usually have to know more about how it works than when simply using it. Inheritance can be a useful tool to make some types of programs more succinct, but it shouldn't be the first tool you reach for, and you probably shouldn't actively go looking for opportunities to construct class hierarchies (family trees of classes).\n\n## The instanceof operator\n\n{{index type, \"instanceof operator\", constructor, object}}\n\nIt is occasionally useful to know whether an object was derived from a specific class. For this, JavaScript provides a binary operator called `instanceof`.\n\n```\nconsole.log(\n  new LengthList(1, null) instanceof LengthList);\n// → true\nconsole.log(new LengthList(2, null) instanceof List);\n// → true\nconsole.log(new List(3, null) instanceof LengthList);\n// → false\nconsole.log([1] instanceof Array);\n// → true\n```\n\n{{index inheritance}}\n\nThe operator will see through inherited types, so a `LengthList` is an instance of `List`. The operator can also be applied to standard constructors like `Array`. Almost every object is an instance of `Object`.\n\n## Summary\n\nObjects do more than just hold their own properties. They have prototypes, which are other objects. They'll act as if they have properties they don't have as long as their prototype has that property. Simple objects have `Object.prototype` as their prototype.\n\nConstructors, which are functions whose names usually start with a capital letter, can be used with the `new` operator to create new objects. The new object's prototype will be the object found in the `prototype` property of the constructor. You can make good use of this by putting the properties that all values of a given type share into their prototype. There's a `class` notation that provides a clear way to define a constructor and its prototype.\n\nYou can define getters and setters to secretly call methods every time an object's property is accessed. Static methods are methods stored in a class's constructor rather than its prototype.\n\nThe `instanceof` operator can, given an object and a constructor, tell you whether that object is an instance of that constructor.\n\nOne useful thing to do with objects is to specify an interface for them and tell everybody that they are supposed to talk to your object only through that interface. The rest of the details that make up your object are now _encapsulated_, hidden behind the interface. You can use private properties to hide a part of your object from the outside world.\n\nMore than one type may implement the same interface. Code written to use an interface automatically knows how to work with any number of different objects that provide the interface. This is called _polymorphism_.\n\nWhen implementing multiple classes that differ in only some details, it can be helpful to write the new classes as _subclasses_ of an existing class, _inheriting_ part of its behavior.\n\n## Exercises\n\n{{id exercise_vector}}\n\n### A vector type\n\n{{index dimensions, \"Vec class\", coordinates, \"vector (exercise)\"}}\n\nWrite a ((class)) `Vec` that represents a vector in two-dimensional space. It takes `x` and `y` parameters (numbers), that it saves to properties of the same name.\n\n{{index addition, subtraction}}\n\nGive the `Vec` prototype two methods, `plus` and `minus`, that take another vector as a parameter and return a new vector that has the sum or difference of the two vectors' (`this` and the parameter) _x_ and _y_ values.\n\nAdd a ((getter)) property `length` to the prototype that computes the length of the vector—that is, the distance of the point (_x_, _y_) from the origin (0, 0).\n\n{{if interactive\n\n```{test: no}\n// Your code here.\n\nconsole.log(new Vec(1, 2).plus(new Vec(2, 3)));\n// → Vec{x: 3, y: 5}\nconsole.log(new Vec(1, 2).minus(new Vec(2, 3)));\n// → Vec{x: -1, y: -1}\nconsole.log(new Vec(3, 4).length);\n// → 5\n```\nif}}\n\n{{hint\n\n{{index \"vector (exercise)\"}}\n\nLook back to the `Rabbit` class example if you're unsure how `class` declarations look.\n\n{{index Pythagoras, \"defineProperty function\", \"square root\", \"Math.sqrt function\"}}\n\nAdding a getter property to the constructor can be done by putting the word `get` before the method name. To compute the distance from (0, 0) to (x, y), you can use the Pythagorean theorem, which says that the square of the distance we are looking for is equal to the square of the x-coordinate plus the square of the y-coordinate. Thus, [√(x^2^ + y^2^)]{if html}[[$\\sqrt{x^2 + y^2}$]{latex}]{if tex} is the number you want. `Math.sqrt` is the way you compute a square root in JavaScript and `x ** 2` can be used to square a number.\n\nhint}}\n\n### Groups\n\n{{index \"groups (exercise)\", \"Set class\", \"Group class\", \"set (data structure)\"}}\n\n{{id groups}}\n\nThe standard JavaScript environment provides another data structure called `Set`. Like an instance of `Map`, a set holds a collection of values. Unlike `Map`, it does not associate other values with those—it just tracks which values are part of the set. A value can be part of a set only once—adding it again doesn't have any effect.\n\n{{index \"add method\", \"delete method\", \"has method\"}}\n\nWrite a class called `Group` (since `Set` is already taken). Like `Set`, it has `add`, `delete`, and `has` methods. Its constructor creates an empty group, `add` adds a value to the group (but only if it isn't already a member), `delete` removes its argument from the group (if it was a member), and `has` returns a Boolean value indicating whether its argument is a member of the group.\n\n{{index \"=== operator\", \"indexOf method\"}}\n\nUse the `===` operator, or something equivalent such as `indexOf`, to determine whether two values are the same.\n\n{{index \"static method\"}}\n\nGive the class a static `from` method that takes an iterable object as its argument and creates a group that contains all the values produced by iterating over it.\n\n{{if interactive\n\n```{test: no}\nclass Group {\n  // Your code here.\n}\n\nlet group = Group.from([10, 20]);\nconsole.log(group.has(10));\n// → true\nconsole.log(group.has(30));\n// → false\ngroup.add(10);\ngroup.delete(10);\nconsole.log(group.has(10));\n// → false\n```\n\nif}}\n\n{{hint\n\n{{index \"groups (exercise)\", \"Group class\", \"indexOf method\", \"includes method\"}}\n\nThe easiest way to do this is to store an array of group members in an instance property. The `includes` or `indexOf` methods can be used to check whether a given value is in the array.\n\n{{index \"push method\"}}\n\nYour class's ((constructor)) can set the member collection to an empty array. When `add` is called, it must check whether the given value is in the array or add it otherwise, possibly using `push`.\n\n{{index \"filter method\"}}\n\nDeleting an element from an array, in `delete`, is less straightforward, but you can use `filter` to create a new array without the value. Don't forget to overwrite the property holding the members with the newly filtered version of the array.\n\n{{index \"for/of loop\", \"iterable interface\"}}\n\nThe `from` method can use a `for`/`of` loop to get the values out of the iterable object and call `add` to put them into a newly created group.\n\nhint}}\n\n### Iterable groups\n\n{{index \"groups (exercise)\", [interface, object], \"iterator interface\", \"Group class\"}}\n\n{{id group_iterator}}\n\nMake the `Group` class from the previous exercise iterable. Refer  to the section about the iterator interface earlier in the chapter if you aren't clear on the exact form of the interface anymore.\n\nIf you used an array to represent the group's members, don't just return the iterator created by calling the `Symbol.iterator` method on the array. That would work, but it defeats the purpose of this exercise.\n\nIt is okay if your iterator behaves strangely when the group is modified during iteration.\n\n{{if interactive\n\n```{test: no}\n// Your code here (and the code from the previous exercise)\n\nfor (let value of Group.from([\"a\", \"b\", \"c\"])) {\n  console.log(value);\n}\n// → a\n// → b\n// → c\n```\n\nif}}\n\n{{hint\n\n{{index \"groups (exercise)\", \"Group class\", \"next method\"}}\n\nIt is probably worthwhile to define a new class `GroupIterator`. Iterator instances should have a property that tracks the current position in the group. Every time `next` is called, it checks whether it is done and, if not, moves past the current value and returns it.\n\nThe `Group` class itself gets a method named by `Symbol.iterator` that, when called, returns a new instance of the iterator class for that group.\n\nhint}}\n"
        },
        {
          "name": "07_robot.md",
          "type": "blob",
          "size": 23.9111328125,
          "content": "{{meta {load_files: [\"code/chapter/07_robot.js\", \"code/animatevillage.js\"], zip: html}}}\n\n# Project: A Robot\n\n{{quote {author: \"Edsger Dijkstra\", title: \"The Threats to Computing Science\", chapter: true}\n\nThe question of whether Machines Can Think [...] is about as relevant as the question of whether Submarines Can Swim.\n\nquote}}\n\n{{index \"artificial intelligence\", \"Dijkstra, Edsger\"}}\n\n{{figure {url: \"img/chapter_picture_7.jpg\", alt: \"Illustration of a robot holding a stack of packages\", chapter: framed}}}\n\n{{index \"project chapter\", \"reading code\", \"writing code\"}}\n\nIn \"project\" chapters, I'll stop pummeling you with new theory for a brief moment, and instead we'll work through a program together. Theory is necessary to learn to program, but reading and understanding actual programs is just as important.\n\nOur project in this chapter is to build an ((automaton)), a little program that performs a task in a ((virtual world)). Our automaton will be a mail-delivery ((robot)) picking up and dropping off parcels.\n\n## Meadowfield\n\n{{index \"roads array\"}}\n\nThe village of ((Meadowfield)) isn't very big. It consists of 11 places with 14 roads between them. It can be described with this array of roads:\n\n```{includeCode: true}\nconst roads = [\n  \"Alice's House-Bob's House\",   \"Alice's House-Cabin\",\n  \"Alice's House-Post Office\",   \"Bob's House-Town Hall\",\n  \"Daria's House-Ernie's House\", \"Daria's House-Town Hall\",\n  \"Ernie's House-Grete's House\", \"Grete's House-Farm\",\n  \"Grete's House-Shop\",          \"Marketplace-Farm\",\n  \"Marketplace-Post Office\",     \"Marketplace-Shop\",\n  \"Marketplace-Town Hall\",       \"Shop-Town Hall\"\n];\n```\n\n{{figure {url: \"img/village2x.png\", alt: \"Pixel art illustration of a small village with 11 locations, labeled with letters, and roads going being them\"}}}\n\nThe network of roads in the village forms a _((graph))_. A graph is a collection of points (places in the village) with lines between them (roads). This graph will be the world that our robot moves through.\n\n{{index \"roadGraph object\"}}\n\nThe array of strings isn't very easy to work with. What we're interested in is the destinations that we can reach from a given place. Let's convert the list of roads to a data structure that, for each place, tells us what can be reached from there.\n\n```{includeCode: true}\nfunction buildGraph(edges) {\n  let graph = Object.create(null);\n  function addEdge(from, to) {\n    if (from in graph) {\n      graph[from].push(to);\n    } else {\n      graph[from] = [to];\n    }\n  }\n  for (let [from, to] of edges.map(r => r.split(\"-\"))) {\n    addEdge(from, to);\n    addEdge(to, from);\n  }\n  return graph;\n}\n\nconst roadGraph = buildGraph(roads);\n```\n\n{{index \"split method\"}}\n\nGiven an array of edges, `buildGraph` creates a map object that, for each node, stores an array of connected nodes. It uses the `split` method to go from the road strings—which have the form `\"Start-End\"`)—to two-element arrays containing the start and end as separate strings.\n\n## The task\n\nOur ((robot)) will be moving around the village. There are parcels in various places, each addressed to some other place. The robot picks up parcels when it comes across them and delivers them when it arrives at their destinations.\n\nThe automaton must decide, at each point, where to go next. It has finished its task when all parcels have been delivered.\n\n{{index simulation, \"virtual world\"}}\n\nTo be able to simulate this process, we must define a virtual world that can describe it. This model tells us where the robot is and where the parcels are. When the robot has decided to move somewhere, we need to update the model to reflect the new situation.\n\n{{index [state, in objects]}}\n\nIf you're thinking in terms of ((object-oriented programming)), your first impulse might be to start defining objects for the various elements in the world: a ((class)) for the robot, one for a parcel, maybe one for places. These could then hold properties that describe their current ((state)), such as the pile of parcels at a location, which we could change when updating the world.\n\nThis is wrong. At least, it usually is. The fact that something sounds like an object does not automatically mean that it should be an object in your program. Reflexively writing classes for every concept in your application tends to leave you with a collection of interconnected objects that each have their own internal, changing state. Such programs are often hard to understand and thus easy to break.\n\n{{index [state, in objects]}}\n\nInstead, let's condense the village's state down to the minimal set of values that define it. There's the robot's current location and the collection of undelivered parcels, each of which has a current location and a destination address. That's it.\n\n{{index \"VillageState class\", \"persistent data structure\"}}\n\nWhile we're at it, let's make it so that we don't _change_ this state when the robot moves but rather compute a _new_ state for the situation after the move.\n\n```{includeCode: true}\nclass VillageState {\n  constructor(place, parcels) {\n    this.place = place;\n    this.parcels = parcels;\n  }\n\n  move(destination) {\n    if (!roadGraph[this.place].includes(destination)) {\n      return this;\n    } else {\n      let parcels = this.parcels.map(p => {\n        if (p.place != this.place) return p;\n        return {place: destination, address: p.address};\n      }).filter(p => p.place != p.address);\n      return new VillageState(destination, parcels);\n    }\n  }\n}\n```\n\nThe `move` method is where the action happens. It first checks whether there is a road going from the current place to the destination, and if not, it returns the old state, since this is not a valid move.\n\n{{index \"map method\", \"filter method\"}}\n\nNext, the method creates a new state with the destination as the robot's new place. It also needs to create a new set of parcels—parcels that the robot is carrying (that are at the robot's current place) need to be moved along to the new place. And parcels that are addressed to the new place need to be delivered—that is, they need to be removed from the set of undelivered parcels. The call to `map` takes care of the moving, and the call to `filter` does the delivering.\n\nParcel objects aren't changed when they are moved but re-created. The `move` method gives us a new village state but leaves the old one entirely intact.\n\n```\nlet first = new VillageState(\n  \"Post Office\",\n  [{place: \"Post Office\", address: \"Alice's House\"}]\n);\nlet next = first.move(\"Alice's House\");\n\nconsole.log(next.place);\n// → Alice's House\nconsole.log(next.parcels);\n// → []\nconsole.log(first.place);\n// → Post Office\n```\n\nThe move causes the parcel to be delivered, which is reflected in the next state. But the initial state still describes the situation where the robot is at the post office and the parcel is undelivered.\n\n## Persistent data\n\n{{index \"persistent data structure\", mutability, [\"data structure\", immutable]}}\n\nData structures that don't change are called _((immutable))_ or _persistent_. They behave a lot like strings and numbers in that they are who they are and stay that way, rather than containing different things at different times.\n\nIn JavaScript, just about everything _can_ be changed, so working with values that are supposed to be persistent requires some restraint. There is a function called `Object.freeze` that changes an object so that writing to its properties is ignored. You could use that to make sure your objects aren't changed, if you want to be careful. Freezing does require the computer to do some extra work, and having updates ignored is just about as likely to confuse someone as having them do the wrong thing. I usually prefer to just tell people that a given object shouldn't be messed with and hope they remember it.\n\n```\nlet object = Object.freeze({value: 5});\nobject.value = 10;\nconsole.log(object.value);\n// → 5\n```\n\nWhy am I going out of my way to not change objects when the language is obviously expecting me to? Because it helps me understand my programs. This is about complexity management again. When the objects in my system are fixed, stable things, I can consider operations on them in isolation—moving to Alice's house from a given start state always produces the same new state. When objects change over time, that adds a whole new dimension of complexity to this kind of reasoning.\n\nFor a small system like the one we are building in this chapter, we could handle that bit of extra complexity. But the most important limit on what kind of systems we can build is how much we can understand. Anything that makes your code easier to understand makes it possible to build a more ambitious system.\n\nUnfortunately, although understanding a system built on persistent data structures is easier, _designing_ one, especially when your programming language isn't helping, can be a little harder. We'll look for opportunities to use persistent data structures in this book, but we'll also be using changeable ones.\n\n## Simulation\n\n{{index simulation, \"virtual world\"}}\n\nA delivery ((robot)) looks at the world and decides in which direction it wants to move. So we could say that a robot is a function that takes a `VillageState` object and returns the name of a nearby place.\n\n{{index \"runRobot function\"}}\n\nBecause we want robots to be able to remember things so they can make and execute plans, we also pass them their memory and allow them to return a new memory. Thus, the thing a robot returns is an object containing both the direction it wants to move in and a memory value that will be given back to it the next time it is called.\n\n```{includeCode: true}\nfunction runRobot(state, robot, memory) {\n  for (let turn = 0;; turn++) {\n    if (state.parcels.length == 0) {\n      console.log(`Done in ${turn} turns`);\n      break;\n    }\n    let action = robot(state, memory);\n    state = state.move(action.direction);\n    memory = action.memory;\n    console.log(`Moved to ${action.direction}`);\n  }\n}\n```\n\nConsider what a robot has to do to \"solve\" a given state. It must pick up all parcels by visiting every location that has a parcel and deliver them by visiting every location to which a parcel is addressed, but only after picking up the parcel.\n\nWhat is the dumbest strategy that could possibly work? The robot could just walk in a random direction every turn. That means, with great likelihood, it will eventually run into all parcels and then also at some point reach the place where they should be delivered.\n\n{{index \"randomPick function\", \"randomRobot function\"}}\n\nHere's what that could look like:\n\n```{includeCode: true}\nfunction randomPick(array) {\n  let choice = Math.floor(Math.random() * array.length);\n  return array[choice];\n}\n\nfunction randomRobot(state) {\n  return {direction: randomPick(roadGraph[state.place])};\n}\n```\n\n{{index \"Math.random function\", \"Math.floor function\", [array, \"random element\"]}}\n\nRemember that `Math.random()` returns a number between 0 and 1—but always below 1. Multiplying such a number by the length of an array and then applying `Math.floor` to it gives us a random index for the array.\n\nSince this robot does not need to remember anything, it ignores its second argument (remember that JavaScript functions can be called with extra arguments without ill effects) and omits the `memory` property in its returned object.\n\nTo put this sophisticated robot to work, we'll first need a way to create a new state with some parcels. A static method (written here by directly adding a property to the constructor) is a good place to put that functionality.\n\n```{includeCode: true}\nVillageState.random = function(parcelCount = 5) {\n  let parcels = [];\n  for (let i = 0; i < parcelCount; i++) {\n    let address = randomPick(Object.keys(roadGraph));\n    let place;\n    do {\n      place = randomPick(Object.keys(roadGraph));\n    } while (place == address);\n    parcels.push({place, address});\n  }\n  return new VillageState(\"Post Office\", parcels);\n};\n```\n\n{{index \"do loop\"}}\n\nWe don't want any parcels to be sent from the same place that they are addressed to. For this reason, the `do` loop keeps picking new places when it gets one that's equal to the address.\n\nLet's start up a virtual world.\n\n```{test: no}\nrunRobot(VillageState.random(), randomRobot);\n// → Moved to Marketplace\n// → Moved to Town Hall\n// → …\n// → Done in 63 turns\n```\n\nIt takes the robot a lot of turns to deliver the parcels because it isn't planning ahead very well. We'll address that soon.\n\n{{if interactive\n\nFor a more pleasant perspective on the simulation, you can use the `runRobotAnimation` function that's available in [this chapter's programming environment](https://eloquentjavascript.net/code/#7). This runs the simulation, but instead of outputting text, it shows you the robot moving around the village map.\n\n```{test: no}\nrunRobotAnimation(VillageState.random(), randomRobot);\n```\n\nThe way `runRobotAnimation` is implemented will remain a mystery for now, but after you've read the [later chapters](dom) of this book, which discuss JavaScript integration in web browsers, you'll be able to guess how it works.\n\nif}}\n\n## The mail truck's route\n\n{{index \"mailRoute array\"}}\n\nWe should be able to do a lot better than the random ((robot)). An easy improvement would be to take a hint from the way real-world mail delivery works. If we find a route that passes all places in the village, the robot could run that route twice, at which point it is guaranteed to be done. Here is one such route (starting from the post office):\n\n```{includeCode: true}\nconst mailRoute = [\n  \"Alice's House\", \"Cabin\", \"Alice's House\", \"Bob's House\",\n  \"Town Hall\", \"Daria's House\", \"Ernie's House\",\n  \"Grete's House\", \"Shop\", \"Grete's House\", \"Farm\",\n  \"Marketplace\", \"Post Office\"\n];\n```\n\n{{index \"routeRobot function\"}}\n\nTo implement the route-following robot, we'll need to make use of robot memory. The robot keeps the rest of its route in its memory and drops the first element every turn.\n\n```{includeCode: true}\nfunction routeRobot(state, memory) {\n  if (memory.length == 0) {\n    memory = mailRoute;\n  }\n  return {direction: memory[0], memory: memory.slice(1)};\n}\n```\n\nThis robot is a lot faster already. It'll take a maximum of 26 turns (twice the 13-step route) but usually less.\n\n{{if interactive\n\n```{test: no}\nrunRobotAnimation(VillageState.random(), routeRobot, []);\n```\n\nif}}\n\n## Pathfinding\n\nStill, I wouldn't really call blindly following a fixed route intelligent behavior. The ((robot)) could work more efficiently if it adjusted its behavior to the actual work that needs to be done.\n\n{{index pathfinding}}\n\nTo do that, it has to be able to deliberately move toward a given parcel or toward the location where a parcel has to be delivered. Doing that, even when the goal is more than one move away, will require some kind of route-finding function.\n\nThe problem of finding a route through a ((graph)) is a typical _((search problem))_. We can tell whether a given solution (a route) is valid, but we can't directly compute the solution the way we could for 2 + 2. Instead, we have to keep creating potential solutions until we find one that works.\n\nThe  number of possible routes through a graph is infinite. But when searching for a route from _A_ to _B_, we are interested only in the ones that start at _A_. We also don't care about routes that visit the same place twice—those are definitely not the most efficient route anywhere. So that cuts down on the number of routes that the route finder has to consider.\n\nIn fact, since we are mostly interested in the _shortest_ route, we want to make sure we look at short routes before we look at longer ones. A good approach would be to \"grow\" routes from the starting point, exploring every reachable place that hasn't been visited yet until a route reaches the goal. That way, we'll explore only routes that are potentially interesting, and we know that the first route we find is the shortest route (or one of the shortest routes, if there are more than one).\n\n{{index \"findRoute function\"}}\n\n{{id findRoute}}\n\nHere is a function that does this:\n\n```{includeCode: true}\nfunction findRoute(graph, from, to) {\n  let work = [{at: from, route: []}];\n  for (let i = 0; i < work.length; i++) {\n    let {at, route} = work[i];\n    for (let place of graph[at]) {\n      if (place == to) return route.concat(place);\n      if (!work.some(w => w.at == place)) {\n        work.push({at: place, route: route.concat(place)});\n      }\n    }\n  }\n}\n```\n\nThe exploring has to be done in the right order—the places that were reached first have to be explored first. We can't immediately explore a place as soon as we reach it because that would mean places reached _from there_ would also be explored immediately, and so on, even though there may be other, shorter paths that haven't yet been explored.\n\nTherefore, the function keeps a _((work list))_. This is an array of places that should be explored next, along with the route that got us there. It starts with just the start position and an empty route.\n\nThe search then operates by taking the next item in the list and exploring that, which means it looks at all roads going from that place. If one of them is the goal, a finished route can be returned. Otherwise, if we haven't looked at this place before, a new item is added to the list. If we have looked at it before, since we are looking at short routes first, we've found either a longer route to that place or one precisely as long as the existing one, and we don't need to explore it.\n\nYou can visualize this as a web of known routes crawling out from the start location, growing evenly on all sides (but never tangling back into itself). As soon as the first thread reaches the goal location, that thread is traced back to the start, giving us our route.\n\n{{index \"connected graph\"}}\n\nOur code doesn't handle the situation where there are no more work items on the work list because we know that our graph is _connected_, meaning that every location can be reached from all other locations. We'll always be able to find a route between two points, and the search can't fail.\n\n```{includeCode: true}\nfunction goalOrientedRobot({place, parcels}, route) {\n  if (route.length == 0) {\n    let parcel = parcels[0];\n    if (parcel.place != place) {\n      route = findRoute(roadGraph, place, parcel.place);\n    } else {\n      route = findRoute(roadGraph, place, parcel.address);\n    }\n  }\n  return {direction: route[0], memory: route.slice(1)};\n}\n```\n\n{{index \"goalOrientedRobot function\"}}\n\nThis robot uses its memory value as a list of directions to move in, just like the route-following robot. Whenever that list is empty, it has to figure out what to do next. It takes the first undelivered parcel in the set and, if that parcel hasn't been picked up yet, plots a route toward it. If the parcel _has_ been picked up, it still needs to be delivered, so the robot creates a route toward the delivery address instead.\n\n{{if interactive\n\nLet's see how it does.\n\n```{test: no, startCode: true}\nrunRobotAnimation(VillageState.random(),\n                  goalOrientedRobot, []);\n```\n\nif}}\n\nThis robot usually finishes the task of delivering 5 parcels in about 16 turns. That's slightly better than `routeRobot` but still definitely not optimal. We'll continue refining it in the exercises.\n\n## Exercises\n\n### Measuring a robot\n\n{{index \"measuring a robot (exercise)\", testing, automation, \"compareRobots function\"}}\n\nIt's hard to objectively compare ((robot))s by just letting them solve a few scenarios. Maybe one robot just happened to get easier tasks or the kind of tasks that it is good at, whereas the other didn't.\n\nWrite a function `compareRobots` that takes two robots (and their starting memory). It should generate 100 tasks and let both of the robots solve each of these tasks. When done, it should output the average number of steps each robot took per task.\n\nFor the sake of fairness, make sure you give each task to both robots, rather than generating different tasks per robot.\n\n{{if interactive\n\n```{test: no}\nfunction compareRobots(robot1, memory1, robot2, memory2) {\n  // Your code here\n}\n\ncompareRobots(routeRobot, [], goalOrientedRobot, []);\n```\nif}}\n\n{{hint\n\n{{index \"measuring a robot (exercise)\", \"runRobot function\"}}\n\nYou'll have to write a variant of the `runRobot` function that, instead of logging the events to the console, returns the number of steps the robot took to complete the task.\n\nYour measurement function can then, in a loop, generate new states and count the steps each of the robots takes. When it has generated enough measurements, it can use `console.log` to output the average for each robot, which is the total number of steps taken divided by the number of measurements.\n\nhint}}\n\n### Robot efficiency\n\n{{index \"robot efficiency (exercise)\"}}\n\nCan you write a robot that finishes the delivery task faster than `goalOrientedRobot`? If you observe that robot's behavior, what obviously stupid things does it do? How could those be improved?\n\nIf you solved the previous exercise, you might want to use your `compareRobots` function to verify whether you improved the robot.\n\n{{if interactive\n\n```{test: no}\n// Your code here\n\nrunRobotAnimation(VillageState.random(), yourRobot, memory);\n```\n\nif}}\n\n{{hint\n\n{{index \"robot efficiency (exercise)\"}}\n\nThe main limitation of `goalOrientedRobot` is that it considers only one parcel at a time. It will often walk back and forth across the village because the parcel it happens to be looking at happens to be at the other side of the map, even if there are others much closer.\n\nOne possible solution would be to compute routes for all packages and then take the shortest one. Even better results can be obtained, if there are multiple shortest routes, by preferring the ones that go to pick up a package instead of delivering a package.\n\nhint}}\n\n### Persistent group\n\n{{index \"persistent group (exercise)\", \"persistent data structure\", \"Set class\", \"set (data structure)\", \"Group class\", \"PGroup class\"}}\n\nMost data structures provided in a standard JavaScript environment aren't very well suited for persistent use. Arrays have `slice` and `concat` methods, which allow us to easily create new arrays without damaging the old one. But `Set`, for example, has no methods for creating a new set with an item added or removed.\n\nWrite a new class `PGroup`, similar to the `Group` class from [Chapter ?](object#groups), which stores a set of values. Like `Group`, it has `add`, `delete`, and `has` methods. Its `add` method, however, should return a _new_ `PGroup` instance with the given member added and leave the old one unchanged. Similarly, `delete` should create a new instance without a given member.\n\nThe class should work for values of any type, not just strings. It does _not_ have to be efficient when used with large numbers of values.\n\n{{index [interface, object]}}\n\nThe ((constructor)) shouldn't be part of the class's interface (though you'll definitely want to use it internally). Instead, there is an empty instance, `PGroup.empty`, that can be used as a starting value.\n\n{{index singleton}}\n\nWhy do you need only one `PGroup.empty` value rather than having a function that creates a new, empty map every time?\n\n{{if interactive\n\n```{test: no}\nclass PGroup {\n  // Your code here\n}\n\nlet a = PGroup.empty.add(\"a\");\nlet ab = a.add(\"b\");\nlet b = ab.delete(\"a\");\n\nconsole.log(b.has(\"b\"));\n// → true\nconsole.log(a.has(\"b\"));\n// → false\nconsole.log(b.has(\"a\"));\n// → false\n```\n\nif}}\n\n{{hint\n\n{{index \"persistent map (exercise)\", \"Set class\", [array, creation], \"PGroup class\"}}\n\nThe most convenient way to represent the set of member values is still as an array, since arrays are easy to copy.\n\n{{index \"concat method\", \"filter method\"}}\n\nWhen a value is added to the group, you can create a new group with a copy of the original array that has the value added (for example, using `concat`). When a value is deleted, you filter it from the array.\n\nThe class's ((constructor)) can take such an array as its argument and store it as the instance's (only) property. This array is never updated.\n\n{{index \"static property\"}}\n\nTo add the `empty` property to the constructor, you can declare it as a static property.\n\nYou need only one `empty` instance because all empty groups are the same and instances of the class don't change. You can create many different groups from that single empty group without affecting it.\n\nhint}}\n"
        },
        {
          "name": "08_error.md",
          "type": "blob",
          "size": 33.181640625,
          "content": "{{meta {load_files: [\"code/chapter/08_error.js\"]}}}\n\n# Bugs and Errors\n\n{{quote {author: \"Brian Kernighan and P.J. Plauger\", title: \"The Elements of Programming Style\", chapter: true}\n\nDebugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.\n\nquote}}\n\n{{figure {url: \"img/chapter_picture_8.jpg\", alt: \"Illustration showing various insects and a centipede\", chapter: framed}}}\n\n{{index \"Kernighan, Brian\", \"Plauger, P.J.\", debugging, \"error handling\"}}\n\nFlaws in computer programs are usually called _((bug))s_. It makes programmers feel good to imagine them as little things that just happen to crawl into our work. In reality, of course, we put them there ourselves.\n\nIf a program is crystallized thought, we can roughly categorize bugs into those caused by the thoughts being confused and those caused by mistakes introduced while converting a thought to code. The former type is generally harder to diagnose and fix than the latter.\n\n## Language\n\n{{index parsing, analysis}}\n\nMany mistakes could be pointed out to us automatically by the computer if it knew enough about what we're trying to do. But here, JavaScript's looseness is a hindrance. Its concept of bindings and properties is vague enough that it will rarely catch ((typo))s before actually running the program. Even then, it allows you to do some clearly nonsensical things without complaint, such as computing `true * \"monkey\"`.\n\n{{index [syntax, error], [property, access]}}\n\nThere are some things that JavaScript does complain about. Writing a program that does not follow the language's ((grammar)) will immediately make the computer complain. Other things, such as calling something that's not a function or looking up a property on an ((undefined)) value, will cause an error to be reported when the program tries to perform the action.\n\n{{index NaN, error}}\n\nOften, however, your nonsense computation will merely produce `NaN` (not a number) or an undefined value, while the program happily continues, convinced that it's doing something meaningful. The mistake will manifest itself only later, after the bogus value has traveled through several functions. It might not trigger an error at all, but silently cause the program's output to be wrong. Finding the source of such problems can be difficult.\n\nThe process of finding mistakes—bugs—in programs is called _((debugging))_.\n\n## Strict mode\n\n{{index \"strict mode\", [syntax, error], function}}\n\n{{indexsee \"use strict\", \"strict mode\"}}\n\nJavaScript can be made a _little_ stricter by enabling _strict mode_. This can done by putting the string `\"use strict\"` at the top of a file or a function body. Here's an example:\n\n```{test: \"error \\\"ReferenceError: counter is not defined\\\"\"}\nfunction canYouSpotTheProblem() {\n  \"use strict\";\n  for (counter = 0; counter < 10; counter++) {\n    console.log(\"Happy happy\");\n  }\n}\n\ncanYouSpotTheProblem();\n// → ReferenceError: counter is not defined\n```\n\n{{index ECMAScript, compatibility}}\n\nCode inside classes and modules (which we will discuss in [Chapter ?](modules)) is automatically strict. The old nonstrict behavior still exists only because some old code might depend on it, and the language designers work hard to avoid breaking any existing programs.\n\n{{index \"let keyword\", [binding, global]}}\n\nNormally, when you forget to put `let` in front of your binding, as with `counter` in the example, JavaScript quietly creates a global binding and uses that. In strict mode, an ((error)) is reported instead. This is very helpful. It should be noted, though, that this doesn't work when the binding in question already exists somewhere in scope. In that case, the loop will still quietly overwrite the value of the binding.\n\n{{index \"this binding\", \"global object\", undefined, \"strict mode\"}}\n\nAnother change in strict mode is that the `this` binding holds the value `undefined` in functions that are not called as ((method))s. When making such a call outside of strict mode, `this` refers to the global scope object, which is an object whose properties are the global bindings. So if you accidentally call a method or constructor incorrectly in strict mode, JavaScript will produce an error as soon as it tries to read something from `this`, rather than happily writing to the global scope.\n\nFor example, consider the following code, which calls a ((constructor)) function without the `new` keyword so that its `this` will _not_ refer to a newly constructed object:\n\n```\nfunction Person(name) { this.name = name; }\nlet ferdinand = Person(\"Ferdinand\"); // oops\nconsole.log(name);\n// → Ferdinand\n```\n\n{{index error}}\n\nThe bogus call to `Person` succeeded, but returned an undefined value and created the global binding `name`. In strict mode, the result is different.\n\n```{test: \"error \\\"TypeError: Cannot set properties of undefined (setting 'name')\\\"\"}\n\"use strict\";\nfunction Person(name) { this.name = name; }\nlet ferdinand = Person(\"Ferdinand\"); // forgot new\n// → TypeError: Cannot set property 'name' of undefined\n```\n\nWe are immediately told that something is wrong. This is helpful.\n\nFortunately, constructors created with the `class` notation will always complain if they are called without `new`, making this less of a problem even in nonstrict mode.\n\n{{index parameter, [binding, naming], \"with statement\"}}\n\nStrict mode does a few more things. It disallows giving a function multiple parameters with the same name and removes certain problematic language features entirely (such as the `with` statement, which is so wrong it is not further discussed in this book).\n\n{{index debugging}}\n\nIn short, putting `\"use strict\"` at the top of your program rarely hurts and might help you spot a problem.\n\n## Types\n\nSome languages want to know the types of all your bindings and expressions before even running a program. They will tell you right away when a type is used in an inconsistent way. JavaScript considers types only when actually running the program, and even there often tries to implicitly convert values to the type it expects, so it's not much help.\n\nStill, types provide a useful framework for talking about programs. A lot of mistakes come from being confused about the kind of value that goes into or comes out of a function. If you have that information written down, you're less likely to get confused.\n\nYou could add a comment like the following before the `findRoute` function from the previous chapter to describe its type:\n\n```\n// (graph: Object, from: string, to: string) => string[]\nfunction findRoute(graph, from, to) {\n  // ...\n}\n```\n\nThere are a number of different conventions for annotating JavaScript programs with types.\n\nOne thing about types is that they need to introduce their own complexity to be able to describe enough code to be useful. What do you think would be the type of the `randomPick` function that returns a random element from an array? You'd need to introduce a _((type variable))_, _T_, which can stand in for any type, so that you can give `randomPick` a type like `(T[]) → T` (function from an array of *T*s to a *T*).\n\n{{index \"type checking\", TypeScript}}\n\n{{id typing}}\n\nWhen the types of a program are known, it is possible for the computer to _check_ them for you, pointing out mistakes before the program is run. There are several JavaScript dialects that add types to the language and check them. The most popular one is called [TypeScript](https://www.typescriptlang.org/). If you are interested in adding more rigor to your programs, I recommend you give it a try.\n\nIn this book, we will continue using raw, dangerous, untyped JavaScript code.\n\n## Testing\n\n{{index \"test suite\", \"run-time error\", automation, testing}}\n\nIf the language is not going to do much to help us find mistakes, we'll have to find them the hard way: by running the program and seeing whether it does the right thing.\n\nDoing this by hand, again and again, is a really bad idea. Not only is it annoying but it also tends to be ineffective, since it takes too much time to exhaustively test everything every time you make a change.\n\nComputers are good at repetitive tasks, and testing is the ideal repetitive task. Automated testing is the process of writing a program that tests another program. Writing tests is a bit more work than testing manually, but once you've done it, you gain a kind of superpower: it takes you only a few seconds to verify that your program still behaves properly in all the situations you wrote tests for. When you break something, you'll immediately notice rather than randomly running into it at some later time.\n\n{{index \"toUpperCase method\"}}\n\nTests usually take the form of little labeled programs that verify some aspect of your code. For example, a set of tests for the (standard, probably already tested by someone else) `toUpperCase` method might look like this:\n\n```\nfunction test(label, body) {\n  if (!body()) console.log(`Failed: ${label}`);\n}\n\ntest(\"convert Latin text to uppercase\", () => {\n  return \"hello\".toUpperCase() == \"HELLO\";\n});\ntest(\"convert Greek text to uppercase\", () => {\n  return \"Χαίρετε\".toUpperCase() == \"ΧΑΊΡΕΤΕ\";\n});\ntest(\"don't convert case-less characters\", () => {\n  return \"مرحبا\".toUpperCase() == \"مرحبا\";\n});\n```\n\n{{index \"domain-specific language\"}}\n\nWriting tests like this tends to produce rather repetitive, awkward code. Fortunately, there exist pieces of software that help you build and run collections of tests (_((test suites))_) by providing a language (in the form of functions and methods) suited to expressing tests and by outputting informative information when a test fails. These are usually called _((test runners))_.\n\n{{index \"persistent data structure\"}}\n\nSome code is easier to test than other code. Generally, the more external objects that the code interacts with, the harder it is to set up the context in which to test it. The style of programming shown in the [previous chapter](robot), which uses self-contained persistent values rather than changing objects, tends to be easy to test.\n\n## Debugging\n\n{{index debugging}}\n\nOnce you notice there is something wrong with your program because it misbehaves or produces errors, the next step is to figure out _what_ the problem is.\n\nSometimes it is obvious. The ((error)) message will point at a specific line of your program, and if you look at the error description and that line of code, you can often see the problem.\n\n{{index \"run-time error\"}}\n\nBut not always. Sometimes the line that triggered the problem is simply the first place where a flaky value produced elsewhere gets used in an invalid way. If you have been solving the ((exercises)) in earlier chapters, you will probably have already experienced such situations.\n\n{{index \"decimal number\", \"binary number\"}}\n\nThe following example program tries to convert a whole number to a string in a given base (decimal, binary, and so on) by repeatedly picking out the last ((digit)) and then dividing the number to get rid of this digit. But the strange output that it currently produces suggests that it has a ((bug)).\n\n```\nfunction numberToString(n, base = 10) {\n  let result = \"\", sign = \"\";\n  if (n < 0) {\n    sign = \"-\";\n    n = -n;\n  }\n  do {\n    result = String(n % base) + result;\n    n /= base;\n  } while (n > 0);\n  return sign + result;\n}\nconsole.log(numberToString(13, 10));\n// → 1.5e-3231.3e-3221.3e-3211.3e-3201.3e-3191.3e-3181.3…\n```\n\n{{index analysis}}\n\nEven if you see the problem already, pretend for a moment that you don't. We know that our program is malfunctioning, and we want to find out why.\n\n{{index \"trial and error\"}}\n\nThis is where you must resist the urge to start making random changes to the code to see whether that makes it better. Instead, _think_. Analyze what is happening and come up with a ((theory)) of why it might be happening. Then make additional observations to test this theory—or, if you don't yet have a theory, make additional observations to help you come up with one.\n\n{{index \"console.log\", output, debugging, logging}}\n\nPutting a few strategic `console.log` calls into the program is a good way to get additional information about what the program is doing. In this case, we want `n` to take the values `13`, `1`, and then `0`. Let's write out its value at the start of the loop.\n\n```{lang: null}\n13\n1.3\n0.13\n0.013\n…\n1.5e-323\n```\n\n{{index rounding}}\n\n_Right_. Dividing 13 by 10 does not produce a whole number. Instead of `n /= base`, what we actually want is `n = Math.floor(n / base)` so that the number is properly \"shifted\" to the right.\n\n{{index \"JavaScript console\", \"debugger statement\"}}\n\nAn alternative to using `console.log` to peek into the program's behavior is to use the _debugger_ capabilities of your browser. Browsers come with the ability to set a _((breakpoint))_ on a specific line of your code. When the execution of the program reaches a line with a breakpoint, it is paused, and you can inspect the values of bindings at that point. I won't go into details, as debuggers differ from browser to browser, but look in your browser's ((developer tools)) or search the web for instructions.\n\nAnother way to set a breakpoint is to include a `debugger` statement (consisting simply of that keyword) in your program. If the ((developer tools)) of your browser are active, the program will pause whenever it reaches such a statement.\n\n## Error propagation\n\n{{index input, output, \"run-time error\", error, validation}}\n\nNot all problems can be prevented by the programmer, unfortunately. If your program communicates with the outside world in any way, it is possible to get malformed input, to become overloaded with work, or to have the network fail.\n\n{{index \"error recovery\"}}\n\nIf you're programming only for yourself, you can afford to just ignore such problems until they occur. But if you build something that is going to be used by anybody else, you usually want the program to do better than just crash. Sometimes the right thing to do is take the bad input in stride and continue running. In other cases, it is better to report to the user what went wrong and then give up. In either situation the program has to actively do something in response to the problem.\n\n{{index \"promptNumber function\", validation}}\n\nSay you have a function `promptNumber` that asks the user for a number and returns it. What should it return if the user inputs \"orange\"?\n\n{{index null, undefined, \"return value\", \"special return value\"}}\n\nOne option is to make it return a special value. Common choices for such values are `null`, `undefined`, or `-1`.\n\n```{test: no}\nfunction promptNumber(question) {\n  let result = Number(prompt(question));\n  if (Number.isNaN(result)) return null;\n  else return result;\n}\n\nconsole.log(promptNumber(\"How many trees do you see?\"));\n```\n\nNow any code that calls `promptNumber` must check whether an actual number was read and, failing that, must somehow recover—maybe by asking again or by filling in a default value. Or it could again return a special value to _its_ caller to indicate that it failed to do what it was asked.\n\n{{index \"error handling\"}}\n\nIn many situations, mostly when ((error))s are common and the caller should be explicitly taking them into account, returning a special value is a good way to indicate an error. It does, however, have its downsides. First, what if the function can already return every possible kind of value? In such a function, you'll have to do something like wrap the result in an object to be able to distinguish success from failure, the way the `next` method on the iterator interface does.\n\n```\nfunction lastElement(array) {\n  if (array.length == 0) {\n    return {failed: true};\n  } else {\n    return {value: array[array.length - 1]};\n  }\n}\n```\n\n{{index \"special return value\", readability}}\n\nThe second issue with returning special values is that it can lead to awkward code. If a piece of code calls `promptNumber` 10 times, it has to check 10 times whether `null` was returned. If its response to finding `null` is to simply return `null` itself, callers of the function will in turn have to check for it, and so on.\n\n## Exceptions\n\n{{index \"error handling\"}}\n\nWhen a function cannot proceed normally, what we would often _like_ to do is just stop what we are doing and immediately jump to a place that knows how to handle the problem. This is what _((exception handling))_ does.\n\n{{index [\"control flow\", exceptions], \"raising (exception)\", \"throw keyword\", \"call stack\"}}\n\nExceptions are a mechanism that makes it possible for code that runs into a problem to _raise_ (or _throw_) an exception. An exception can be any value. Raising one somewhat resembles a super-charged return from a function: it jumps out of not just the current function but also its callers, all the way down to the first call that started the current execution. This is called _((unwinding the stack))_. You may remember the stack of function calls mentioned in [Chapter ?](functions#stack). An exception zooms down this stack, throwing away all the call contexts it encounters.\n\n{{index \"error handling\", [syntax, statement], \"catch keyword\"}}\n\nIf exceptions always zoomed right down to the bottom of the stack, they would not be of much use. They'd just provide a novel way to blow up your program. Their power lies in the fact that you can set \"obstacles\" along the stack to _catch_ the exception as it is zooming down. Once you've caught an exception, you can do something with it to address the problem and then continue to run the program.\n\nHere's an example:\n\n{{id look}}\n```\nfunction promptDirection(question) {\n  let result = prompt(question);\n  if (result.toLowerCase() == \"left\") return \"L\";\n  if (result.toLowerCase() == \"right\") return \"R\";\n  throw new Error(\"Invalid direction: \" + result);\n}\n\nfunction look() {\n  if (promptDirection(\"Which way?\") == \"L\") {\n    return \"a house\";\n  } else {\n    return \"two angry bears\";\n  }\n}\n\ntry {\n  console.log(\"You see\", look());\n} catch (error) {\n  console.log(\"Something went wrong: \" + error);\n}\n```\n\n{{index \"exception handling\", block, \"throw keyword\", \"try keyword\", \"catch keyword\"}}\n\nThe `throw` keyword is used to raise an exception. Catching one is done by wrapping a piece of code in a `try` block, followed by the keyword `catch`. When the code in the `try` block causes an exception to be raised, the `catch` block is evaluated, with the name in parentheses bound to the exception value. After the `catch` block finishes—or if the `try` block finishes without problems—the program proceeds beneath the entire `try/catch` statement.\n\n{{index debugging, \"call stack\", \"Error type\"}}\n\nIn this case, we used the `Error` ((constructor)) to create our exception value. This is a ((standard)) JavaScript constructor that creates an object with a `message` property. Instances of `Error` also gather information about the call stack that existed when the exception was created, a so-called _((stack trace))_. This information is stored in the `stack` property and can be helpful when trying to debug a problem: it tells us the function where the problem occurred and which functions made the failing call.\n\n{{index \"exception handling\"}}\n\nNote that the `look` function completely ignores the possibility that `promptDirection` might go wrong. This is the big advantage of exceptions: error-handling code is necessary only at the point where the error occurs and at the point where it is handled. The functions in between can forget all about it.\n\nWell, almost...\n\n## Cleaning up after exceptions\n\n{{index \"exception handling\", \"cleaning up\", [\"control flow\", exceptions]}}\n\nThe effect of an exception is another kind of control flow. Every action that might cause an exception, which is pretty much every function call and property access, might cause control to suddenly leave your code.\n\nThis means when code has several side effects, even if its \"regular\" control flow looks like they'll always all happen, an exception might prevent some of them from taking place.\n\n{{index \"banking example\"}}\n\nHere is some really bad banking code:\n\n```{includeCode: true}\nconst accounts = {\n  a: 100,\n  b: 0,\n  c: 20\n};\n\nfunction getAccount() {\n  let accountName = prompt(\"Enter an account name\");\n  if (!Object.hasOwn(accounts, accountName)) {\n    throw new Error(`No such account: ${accountName}`);\n  }\n  return accountName;\n}\n\nfunction transfer(from, amount) {\n  if (accounts[from] < amount) return;\n  accounts[from] -= amount;\n  accounts[getAccount()] += amount;\n}\n```\n\nThe `transfer` function transfers a sum of money from a given account to another, asking for the name of the other account in the process. If given an invalid account name, `getAccount` throws an exception.\n\nBut `transfer` _first_ removes the money from the account and _then_ calls `getAccount` before it adds it to another account. If it is broken off by an exception at that point, it'll just make the money disappear.\n\nThat code could have been written a little more intelligently, for example by calling `getAccount` before it starts moving money around. But often problems like this occur in more subtle ways. Even functions that don't look like they will throw an exception might do so in exceptional circumstances or when they contain a programmer mistake.\n\nOne way to address this is to use fewer side effects. Again, a programming style that computes new values instead of changing existing data helps. If a piece of code stops running in the middle of creating a new value, no existing data structures were damaged, making it easier to recover.\n\n{{index block, \"try keyword\", \"finally keyword\"}}\n\nSince that isn't always practical, `try` statements have another feature: they may be followed by a `finally` block either instead of or in addition to a `catch` block. A `finally` block says \"no matter _what_ happens, run this code after trying to run the code in the `try` block.\"\n\n```{includeCode: true}\nfunction transfer(from, amount) {\n  if (accounts[from] < amount) return;\n  let progress = 0;\n  try {\n    accounts[from] -= amount;\n    progress = 1;\n    accounts[getAccount()] += amount;\n    progress = 2;\n  } finally {\n    if (progress == 1) {\n      accounts[from] += amount;\n    }\n  }\n}\n```\n\nThis version of the function tracks its progress, and if, when leaving, it notices that it was aborted at a point where it had created an inconsistent program state, it repairs the damage it did.\n\nNote that even though the `finally` code is run when an exception is thrown in the `try` block, it does not interfere with the exception. After the `finally` block runs, the stack continues unwinding.\n\n{{index \"exception safety\"}}\n\nWriting programs that operate reliably even when exceptions pop up in unexpected places is hard. Many people simply don't bother, and because exceptions are typically reserved for exceptional circumstances, the problem may occur so rarely that it is never even noticed. Whether that is a good thing or a really bad thing depends on how much damage the software will do when it fails.\n\n## Selective catching\n\n{{index \"uncaught exception\", \"exception handling\", \"JavaScript console\", \"developer tools\", \"call stack\", error}}\n\nWhen an exception makes it all the way to the bottom of the stack without being caught, it gets handled by the environment. What this means differs between environments. In browsers, a description of the error typically gets written to the JavaScript console (reachable through the browser's Tools or Developer menu). Node.js, the browserless JavaScript environment we will discuss in [Chapter ?](node), is more careful about data corruption. It aborts the whole process when an unhandled exception occurs.\n\n{{index crash, \"error handling\"}}\n\nFor programmer mistakes, just letting the error go through is often the best you can do. An unhandled exception is a reasonable way to signal a broken program, and the JavaScript console will, on modern browsers, provide you with some information about which function calls were on the stack when the problem occurred.\n\n{{index \"user interface\"}}\n\nFor problems that are _expected_ to happen during routine use, crashing with an unhandled exception is a terrible strategy.\n\n{{index [function, application], \"exception handling\", \"Error type\", [binding, undefined]}}\n\nInvalid uses of the language, such as referencing a nonexistent binding, looking up a property on `null`, or calling something that's not a function, will also result in exceptions being raised. Such exceptions can also be caught.\n\n{{index \"catch keyword\"}}\n\nWhen a `catch` body is entered, all we know is that _something_ in our `try` body caused an exception. But we don't know _what_ did or _which_ exception it caused.\n\n{{index \"exception handling\"}}\n\nJavaScript (in a rather glaring omission) doesn't provide direct support for selectively catching exceptions: either you catch them all or you don't catch any. This makes it tempting to _assume_ that the exception you get is the one you were thinking about when you wrote the `catch` block.\n\n{{index \"promptDirection function\"}}\n\nBut it might not be. Some other ((assumption)) might be violated, or you might have introduced a bug that is causing an exception. Here is an example that _attempts_ to keep on calling `promptDirection` until it gets a valid answer:\n\n```{test: no}\nfor (;;) {\n  try {\n    let dir = promtDirection(\"Where?\"); // ← typo!\n    console.log(\"You chose \", dir);\n    break;\n  } catch (e) {\n    console.log(\"Not a valid direction. Try again.\");\n  }\n}\n```\n\n{{index \"infinite loop\", \"for loop\", \"catch keyword\", debugging}}\n\nThe `for (;;)` construct is a way to intentionally create a loop that doesn't terminate on its own. We break out of the loop only when a valid direction is given. Unfortunately, we misspelled `promptDirection`, which will result in an \"undefined variable\" error. Because the `catch` block completely ignores its exception value (`e`), assuming it knows what the problem is, it wrongly treats the binding error as indicating bad input. Not only does this cause an infinite loop but it also \"buries\" the useful error message about the misspelled binding.\n\nAs a general rule, don't blanket-catch exceptions unless it is for the purpose of \"routing\" them somewhere—for example, over the network to tell another system that our program crashed. And even then, think carefully about how you might be hiding information.\n\n{{index \"exception handling\"}}\n\nWe want to catch a _specific_ kind of exception. We can do this by checking in the `catch` block whether the exception we got is the one we are interested in, and if not, rethrow it. But how do we recognize an exception?\n\nWe could compare its `message` property against the ((error)) message we happen to expect. But that's a shaky way to write code—we'd be using information that's intended for human consumption (the message) to make a programmatic decision. As soon as someone changes (or translates) the message, the code will stop working.\n\n{{index \"Error type\", \"instanceof operator\", \"promptDirection function\"}}\n\nRather, let's define a new type of error and use `instanceof` to identify it.\n\n```{includeCode: true}\nclass InputError extends Error {}\n\nfunction promptDirection(question) {\n  let result = prompt(question);\n  if (result.toLowerCase() == \"left\") return \"L\";\n  if (result.toLowerCase() == \"right\") return \"R\";\n  throw new InputError(\"Invalid direction: \" + result);\n}\n```\n\n{{index \"throw keyword\", inheritance}}\n\nThe new error class extends `Error`. It doesn't define its own constructor, which means that it inherits the `Error` constructor, which expects a string message as argument. In fact, it doesn't define anything at all—the class is empty. `InputError` objects behave like `Error` objects, except that they have a different class by which we can recognize them.\n\n{{index \"exception handling\"}}\n\nNow the loop can catch these more carefully.\n\n```{test: no}\nfor (;;) {\n  try {\n    let dir = promptDirection(\"Where?\");\n    console.log(\"You chose \", dir);\n    break;\n  } catch (e) {\n    if (e instanceof InputError) {\n      console.log(\"Not a valid direction. Try again.\");\n    } else {\n      throw e;\n    }\n  }\n}\n```\n\n{{index debugging}}\n\nThis will catch only instances of `InputError` and let unrelated exceptions through. If you reintroduce the typo, the undefined binding error will be properly reported.\n\n## Assertions\n\n{{index \"assert function\", assertion, debugging}}\n\n_Assertions_ are checks inside a program that verify that something is the way it is supposed to be. They are used not to handle situations that can come up in normal operation but to find programmer mistakes.\n\nIf, for example, `firstElement` is described as a function that should never be called on empty arrays, we might write it like this:\n\n```\nfunction firstElement(array) {\n  if (array.length == 0) {\n    throw new Error(\"firstElement called with []\");\n  }\n  return array[0];\n}\n```\n\n{{index validation, \"run-time error\", crash, assumption}}\n\nNow, instead of silently returning undefined (which you get when reading an array property that does not exist), this will loudly blow up your program as soon as you misuse it. This makes it less likely for such mistakes to go unnoticed and easier to find their cause when they occur.\n\nI do not recommend trying to write assertions for every possible kind of bad input. That'd be a lot of work and would lead to very noisy code. You'll want to reserve them for mistakes that are easy to make (or that you find yourself making).\n\n## Summary\n\nAn important part of programming is finding, diagnosing, and fixing bugs. Problems can become easier to notice if you have an automated test suite or add assertions to your programs.\n\nProblems caused by factors outside the program's control should usually be actively planned for. Sometimes, when the problem can be handled locally, special return values are a good way to track them. Otherwise, exceptions may be preferable.\n\nThrowing an exception causes the call stack to be unwound until the next enclosing `try/catch` block or until the bottom of the stack. The exception value will be given to the `catch` block that catches it, which should verify that it is actually the expected kind of exception and then do something with it. To help address the unpredictable control flow caused by exceptions, `finally` blocks can be used to ensure that a piece of code _always_ runs when a block finishes.\n\n## Exercises\n\n### Retry\n\n{{index \"primitiveMultiply (exercise)\", \"exception handling\", \"throw keyword\"}}\n\nSay you have a function `primitiveMultiply` that in 20 percent of cases multiplies two numbers and in the other 80 percent of cases raises an exception of type `MultiplicatorUnitFailure`. Write a function that wraps this clunky function and just keeps trying until a call succeeds, after which it returns the result.\n\n{{index \"catch keyword\"}}\n\nMake sure you handle only the exceptions you are trying to handle.\n\n{{if interactive\n\n```{test: no}\nclass MultiplicatorUnitFailure extends Error {}\n\nfunction primitiveMultiply(a, b) {\n  if (Math.random() < 0.2) {\n    return a * b;\n  } else {\n    throw new MultiplicatorUnitFailure(\"Klunk\");\n  }\n}\n\nfunction reliableMultiply(a, b) {\n  // Your code here.\n}\n\nconsole.log(reliableMultiply(8, 8));\n// → 64\n```\nif}}\n\n{{hint\n\n{{index \"primitiveMultiply (exercise)\", \"try keyword\", \"catch keyword\", \"throw keyword\"}}\n\nThe call to `primitiveMultiply` should definitely happen in a `try` block. The corresponding `catch` block should rethrow the exception when it is not an instance of `MultiplicatorUnitFailure` and ensure the call is retried when it is.\n\nTo do the retrying, you can either use a loop that stops only when a call succeeds—as in the [`look` example](error#look) earlier in this chapter—or use ((recursion)) and hope you don't get a string of failures so long that it overflows the stack (which is a pretty safe bet).\n\nhint}}\n\n### The locked box\n\n{{index \"locked box (exercise)\"}}\n\nConsider the following (rather contrived) object:\n\n```\nconst box = new class {\n  locked = true;\n  #content = [];\n\n  unlock() { this.locked = false; }\n  lock() { this.locked = true;  }\n  get content() {\n    if (this.locked) throw new Error(\"Locked!\");\n    return this.#content;\n  }\n};\n```\n\n{{index \"private property\", \"access control\"}}\n\nIt is a ((box)) with a lock. There is an array in the box, but you can get at it only when the box is unlocked.\n\n{{index \"finally keyword\", \"exception handling\"}}\n\nWrite a function called `withBoxUnlocked` that takes a function value as argument, unlocks the box, runs the function, and then ensures that the box is locked again before returning, regardless of whether the argument function returned normally or threw an exception.\n\n{{if interactive\n\n```\nconst box = new class {\n  locked = true;\n  #content = [];\n\n  unlock() { this.locked = false; }\n  lock() { this.locked = true;  }\n  get content() {\n    if (this.locked) throw new Error(\"Locked!\");\n    return this.#content;\n  }\n};\n\nfunction withBoxUnlocked(body) {\n  // Your code here.\n}\n\nwithBoxUnlocked(() => {\n  box.content.push(\"gold piece\");\n});\n\ntry {\n  withBoxUnlocked(() => {\n    throw new Error(\"Pirates on the horizon! Abort!\");\n  });\n} catch (e) {\n  console.log(\"Error raised: \" + e);\n}\nconsole.log(box.locked);\n// → true\n```\n\nif}}\n\nFor extra points, make sure that if you call `withBoxUnlocked` when the box is already unlocked, the box stays unlocked.\n\n{{hint\n\n{{index \"locked box (exercise)\", \"finally keyword\", \"try keyword\"}}\n\nThis exercise calls for a `finally` block. Your function should first unlock the box and then call the argument function from inside a `try` body. The `finally` block after it should lock the box again.\n\nTo make sure we don't lock the box when it wasn't already locked, check its lock at the start of the function and unlock and lock it only when it started out locked.\n\nhint}}\n"
        },
        {
          "name": "09_regexp.md",
          "type": "blob",
          "size": 49.5205078125,
          "content": "# Regular Expressions\n\n{{quote {author: \"Jamie Zawinski\", chapter: true}\n\nSome people, when confronted with a problem, think 'I know, I'll use regular expressions.' Now they have two problems.\n\nquote}}\n\n{{index \"Zawinski, Jamie\"}}\n\n{{if interactive\n\n{{quote {author: \"Master Yuan-Ma\", title: \"The Book of Programming\", chapter: true}\n\nWhen you cut against the grain of the wood, much strength is needed. When you program against the grain of the problem, much code is needed.\n\nquote}}\n\nif}}\n\n{{figure {url: \"img/chapter_picture_9.jpg\", alt: \"Illustration of a railroad system representing the syntactic structure of regular expressions\", chapter: \"square-framed\"}}}\n\n{{index evolution, adoption, integration}}\n\nProgramming ((tool))s and techniques survive and spread in a chaotic, evolutionary way. It's not always the best or most brilliant ones that win, but rather the ones that function well enough within the right niche or that happen to be integrated with another successful piece of technology.\n\n{{index \"domain-specific language\"}}\n\nIn this chapter, I will discuss one such tool, _((regular expression))s_. Regular expressions are a way to describe ((pattern))s in string data. They form a small, separate language that is part of JavaScript and many other languages and systems.\n\n{{index [interface, design]}}\n\nRegular expressions are both terribly awkward and extremely useful. Their syntax is cryptic and the programming interface JavaScript provides for them is clumsy. But they are a powerful ((tool)) for inspecting and processing strings. Properly understanding regular expressions will make you a more effective programmer.\n\n## Creating a regular expression\n\n{{index [\"regular expression\", creation], \"RegExp class\", \"literal expression\", \"slash character\"}}\n\nA regular expression is a type of object. It can be either constructed with the `RegExp` constructor or written as a literal value by enclosing a pattern in forward slash (`/`) characters.\n\n```\nlet re1 = new RegExp(\"abc\");\nlet re2 = /abc/;\n```\n\nBoth of those regular expression objects represent the same ((pattern)): an _a_ character followed by a _b_ followed by a _c_.\n\n{{index [\"backslash character\", \"in regular expressions\"], \"RegExp class\"}}\n\nWhen using the `RegExp` constructor, the pattern is written as a normal string, so the usual rules apply for backslashes.\n\n{{index [\"regular expression\", escaping], [escaping, \"in regexps\"], \"slash character\"}}\n\nThe second notation, where the pattern appears between slash characters, treats backslashes somewhat differently. First, since a forward slash ends the pattern, we need to put a backslash before any forward slash that we want to be _part_ of the pattern. In addition, backslashes that aren't part of special character codes (like `\\n`) will be _preserved_, rather than ignored as they are in strings, and change the meaning of the pattern. Some characters, such as question marks and plus signs, have special meanings in regular expressions and must be preceded by a backslash if they are meant to represent the character itself.\n\n```\nlet aPlus = /A\\+/;\n```\n\n## Testing for matches\n\n{{index matching, \"test method\", [\"regular expression\", methods]}}\n\nRegular expression objects have a number of methods. The simplest one is `test`. If you pass it a string, it will return a ((Boolean)) telling you whether the string contains a match of the pattern in the expression.\n\n```\nconsole.log(/abc/.test(\"abcde\"));\n// → true\nconsole.log(/abc/.test(\"abxde\"));\n// → false\n```\n\n{{index pattern}}\n\nA ((regular expression)) consisting of only nonspecial characters simply represents that sequence of characters. If _abc_ occurs anywhere in the string we are testing against (not just at the start), `test` will return `true`.\n\n## Sets of characters\n\n{{index \"regular expression\", \"indexOf method\"}}\n\nFinding out whether a string contains _abc_ could just as well be done with a call to `indexOf`. Regular expressions are useful because they allow us to describe more complicated ((pattern))s.\n\nSay we want to match any ((number)). In a regular expression, putting a ((set)) of characters between square brackets makes that part of the expression match any of the characters between the brackets.\n\nBoth of the following expressions match all strings that contain a ((digit)):\n\n```\nconsole.log(/[0123456789]/.test(\"in 1992\"));\n// → true\nconsole.log(/[0-9]/.test(\"in 1992\"));\n// → true\n```\n\n{{index \"hyphen character\"}}\n\nWithin square brackets, a hyphen (`-`) between two characters can be used to indicate a ((range)) of characters, where the ordering is determined by the character's ((Unicode)) number. Characters 0 to 9 sit right next to each other in this ordering (codes 48 to 57), so `[0-9]` covers all of them and matches any ((digit)).\n\n{{index [whitespace, matching], \"alphanumeric character\", \"period character\"}}\n\nA number of common character groups have their own built-in shortcuts. Digits are one of them: `\\d` means the same thing as `[0-9]`.\n\n{{index \"newline character\", [whitespace, matching]}}\n\n{{table {cols: [1, 5]}}}\n\n| `\\d`    | Any ((digit)) character\n| `\\w`    | An alphanumeric character (\"((word character))\")\n| `\\s`    | Any whitespace character (space, tab, newline, and similar)\n| `\\D`    | A character that is _not_ a digit\n| `\\W`    | A nonalphanumeric character\n| `\\S`    | A nonwhitespace character\n| `.`     | Any character except for newline\n\nYou could match a ((date)) and ((time)) format like 01-30-2003 15:20 with the following expression:\n\n```\nlet dateTime = /\\d\\d-\\d\\d-\\d\\d\\d\\d \\d\\d:\\d\\d/;\nconsole.log(dateTime.test(\"01-30-2003 15:20\"));\n// → true\nconsole.log(dateTime.test(\"30-jan-2003 15:20\"));\n// → false\n```\n\n{{index [\"backslash character\", \"in regular expressions\"]}}\n\nThat regular expression looks completely awful, doesn't it? Half of it is backslashes, producing a background noise that makes it hard to spot the actual ((pattern)) expressed. We'll see a slightly improved version of this expression [later](regexp#date_regexp_counted).\n\n{{index [escaping, \"in regexps\"], \"regular expression\", set}}\n\nThese backslash codes can also be used inside ((square brackets)). For example, `[\\d.]` means any digit or a period character. The period itself, between square brackets, loses its special meaning. The same goes for other special characters, such as the plus sign (`+`).\n\n{{index \"square brackets\", inversion, \"caret character\"}}\n\nTo _invert_ a set of characters—that is, to express that you want to match any character _except_ the ones in the set—you can write a caret (`^`) character after the opening bracket.\n\n```\nlet nonBinary = /[^01]/;\nconsole.log(nonBinary.test(\"1100100010100110\"));\n// → false\nconsole.log(nonBinary.test(\"0111010112101001\"));\n// → true\n```\n\n## International characters\n\n{{index internationalization, Unicode, [\"regular expression\", internationalization]}}\n\nBecause of JavaScript's initial simplistic implementation and the fact that this simplistic approach was later set in stone as ((standard)) behavior, JavaScript's regular expressions are rather dumb about characters that do not appear in the English language. For example, as far as JavaScript's regular expressions are concerned, a \"((word character))\" is only one of the 26 characters in the Latin alphabet (uppercase or lowercase), decimal digits, and, for some reason, the underscore character. Things like _é_ or _β_, which most definitely are word characters, will not match `\\w` (and _will_ match uppercase `\\W`, the nonword category).\n\n{{index [whitespace, matching]}}\n\nBy a strange historical accident, `\\s` (whitespace) does not have this problem and matches all characters that the Unicode standard considers whitespace, including things like the ((nonbreaking space)) and the ((Mongolian vowel separator)).\n\n{{index \"character category\", [Unicode, property]}}\n\nIt is possible to use `\\p` in a regular expression to match all characters to which the Unicode standard assigns a given property. This allows us to match things like letters in a more cosmopolitan way. However, again due to compatibility with the original language standards, those are recognized only when you put a `u` character (for ((Unicode))) after the regular expression.\n\n{{table {cols: [1, 5]}}}\n\n| `\\p{L}`             | Any letter\n| `\\p{N}`             | Any numeric character\n| `\\p{P}`             | Any punctuation character\n| `\\P{L}`             | Any nonletter (uppercase P inverts)\n| `\\p{Script=Hangul}` | Any character from the given script (see [Chapter ?](higher_order#scripts))\n\nUsing `\\w` for text processing that may need to handle non-English text (or even English text with borrowed words like “cliché”) is a liability, since it won't treat characters like “é” as letters. Though they tend to be a bit more verbose, `\\p` property groups are more robust.\n\n```{test: never}\nconsole.log(/\\p{L}/u.test(\"α\"));\n// → true\nconsole.log(/\\p{L}/u.test(\"!\"));\n// → false\nconsole.log(/\\p{Script=Greek}/u.test(\"α\"));\n// → true\nconsole.log(/\\p{Script=Arabic}/u.test(\"α\"));\n// → false\n```\n\n{{index \"Number function\"}}\n\nOn the other hand, if you are matching numbers in order to do something with them, you often do want `\\d` for digits, since converting arbitrary numeric characters into a JavaScript number is not something that a function like `Number` can do for you.\n\n## Repeating parts of a pattern\n\n{{index [\"regular expression\", repetition]}}\n\nWe now know how to match a single digit. What if we want to match a whole number—a ((sequence)) of one or more ((digit))s?\n\n{{index \"plus character\", repetition, \"+ operator\"}}\n\nWhen you put a plus sign (`+`) after something in a regular expression, it indicates that the element may be repeated more than once. Thus, `/\\d+/` matches one or more digit characters.\n\n```\nconsole.log(/'\\d+'/.test(\"'123'\"));\n// → true\nconsole.log(/'\\d+'/.test(\"''\"));\n// → false\nconsole.log(/'\\d*'/.test(\"'123'\"));\n// → true\nconsole.log(/'\\d*'/.test(\"''\"));\n// → true\n```\n\n{{index \"* operator\", asterisk}}\n\nThe star (`*`) has a similar meaning but also allows the pattern to match zero times. Something with a star after it never prevents a pattern from matching—it'll just match zero instances if it can't find any suitable text to match.\n\n{{index \"British English\", \"American English\", \"question mark\"}}\n\nA question mark (`?`) makes a part of a pattern _((optional))_, meaning it may occur zero times or one time. In the following example, the _u_ character is allowed to occur, but the pattern also matches when it is missing:\n\n```\nlet neighbor = /neighbou?r/;\nconsole.log(neighbor.test(\"neighbour\"));\n// → true\nconsole.log(neighbor.test(\"neighbor\"));\n// → true\n```\n\n{{index repetition, [braces, \"in regular expression\"]}}\n\nTo indicate that a pattern should occur a precise number of times, use braces. Putting `{4}` after an element, for example, requires it to occur exactly four times. It is also possible to specify a ((range)) this way: `{2,4}` means the element must occur at least twice and at most four times.\n\n{{id date_regexp_counted}}\n\nHere is another version of the ((date)) and ((time)) pattern that allows both single- and double-((digit)) days, months, and hours. It is also slightly easier to decipher.\n\n```\nlet dateTime = /\\d{1,2}-\\d{1,2}-\\d{4} \\d{1,2}:\\d{2}/;\nconsole.log(dateTime.test(\"1-30-2003 8:45\"));\n// → true\n```\n\nYou can also specify open-ended ((range))s when using braces by omitting the number after the comma. For example, `{5,}` means five or more times.\n\n## Grouping subexpressions\n\n{{index [\"regular expression\", grouping], grouping, [parentheses, \"in regular expressions\"]}}\n\nTo use an operator like `*` or `+` on more than one element at a time, you must use parentheses. A part of a regular expression that is enclosed in parentheses counts as a single element as far as the operators following it are concerned.\n\n```\nlet cartoonCrying = /boo+(hoo+)+/i;\nconsole.log(cartoonCrying.test(\"Boohoooohoohooo\"));\n// → true\n```\n\n{{index crying}}\n\nThe first and second `+` characters apply only to the second `o` in `boo` and `hoo`, respectively. The third `+` applies to the whole group `(hoo+)`, matching one or more sequences like that.\n\n{{index \"case sensitivity\", capitalization, [\"regular expression\", flags]}}\n\nThe `i` at the end of the expression in the example makes this regular expression case insensitive, allowing it to match the uppercase _B_ in the input string, even though the pattern is itself all lowercase.\n\n## Matches and groups\n\n{{index [\"regular expression\", grouping], \"exec method\", [array, \"RegExp match\"]}}\n\nThe `test` method is the absolute simplest way to match a regular expression. It tells you only whether it matched and nothing else. Regular expressions also have an `exec` (execute) method that will return `null` if no match was found and return an object with information about the match otherwise.\n\n```\nlet match = /\\d+/.exec(\"one two 100\");\nconsole.log(match);\n// → [\"100\"]\nconsole.log(match.index);\n// → 8\n```\n\n{{index \"index property\", [string, indexing]}}\n\nAn object returned from `exec` has an `index` property that tells us _where_ in the string the successful match begins. Other than that, the object looks like (and in fact is) an array of strings, whose first element is the string that was matched. In the previous example, this is the sequence of ((digit))s that we were looking for.\n\n{{index [string, methods], \"match method\"}}\n\nString values have a `match` method that behaves similarly.\n\n```\nconsole.log(\"one two 100\".match(/\\d+/));\n// → [\"100\"]\n```\n\n{{index grouping, \"capture group\", \"exec method\"}}\n\nWhen the regular expression contains subexpressions grouped with parentheses, the text that matched those groups will also show up in the array. The whole match is always the first element. The next element is the part matched by the first group (the one whose opening parenthesis comes first in the expression), then the second group, and so on.\n\n```\nlet quotedText = /'([^']*)'/;\nconsole.log(quotedText.exec(\"she said 'hello'\"));\n// → [\"'hello'\", \"hello\"]\n```\n\n{{index \"capture group\"}}\n\nWhen a group does not end up being matched at all (for example, when followed by a question mark), its position in the output array will hold `undefined`. When a group is matched multiple times (for example, when followed by a `+`), only the last match ends up in the array.\n\n```\nconsole.log(/bad(ly)?/.exec(\"bad\"));\n// → [\"bad\", undefined]\nconsole.log(/(\\d)+/.exec(\"123\"));\n// → [\"123\", \"3\"]\n```\n\nIf you want to use parentheses purely for grouping, without having them show up in the array of matches, you can put `?:` after the opening parenthesis.\n\n```\nconsole.log(/(?:na)+/.exec(\"banana\"));\n// → [\"nana\"]\n```\n\n{{index \"exec method\", [\"regular expression\", methods], extraction}}\n\nGroups can be useful for extracting parts of a string. If we don't just want to verify whether a string contains a ((date)) but also extract it and construct an object that represents it, we can wrap parentheses around the digit patterns and directly pick the date out of the result of `exec`.\n\nBut first we'll take a brief detour to discuss the built-in way to represent date and ((time)) values in JavaScript.\n\n## The Date class\n\n{{index constructor, \"Date class\"}}\n\nJavaScript has a standard `Date` class for representing ((date))s, or rather, points in ((time)). If you simply create a date object using `new`, you get the current date and time.\n\n```{test: no}\nconsole.log(new Date());\n// → Fri Feb 02 2024 18:03:06 GMT+0100 (CET)\n```\n\n{{index \"Date class\"}}\n\nYou can also create an object for a specific time.\n\n```\nconsole.log(new Date(2009, 11, 9));\n// → Wed Dec 09 2009 00:00:00 GMT+0100 (CET)\nconsole.log(new Date(2009, 11, 9, 12, 59, 59, 999));\n// → Wed Dec 09 2009 12:59:59 GMT+0100 (CET)\n```\n\n{{index \"zero-based counting\", [interface, design]}}\n\nJavaScript uses a convention where month numbers start at zero (so December is 11), yet day numbers start at one. This is confusing and silly. Be careful.\n\nThe last four arguments (hours, minutes, seconds, and milliseconds) are optional and taken to be zero when not given.\n\n{{index \"getTime method\", timestamp}}\n\nTimestamps are stored as the number of milliseconds since the start of 1970, in the UTC ((time zone)). This follows a convention set by \"((Unix time))\", which was invented around that time. You can use negative numbers for times before 1970. The `getTime` method on a date object returns this number. It is big, as you can imagine.\n\n```\nconsole.log(new Date(2013, 11, 19).getTime());\n// → 1387407600000\nconsole.log(new Date(1387407600000));\n// → Thu Dec 19 2013 00:00:00 GMT+0100 (CET)\n```\n\n{{index \"Date.now function\", \"Date class\"}}\n\nIf you give the `Date` constructor a single argument, that argument is treated as such a millisecond count. You can get the current millisecond count by creating a new `Date` object and calling `getTime` on it or by calling the `Date.now` function.\n\n{{index \"getFullYear method\", \"getMonth method\", \"getDate method\", \"getHours method\", \"getMinutes method\", \"getSeconds method\", \"getYear method\"}}\n\nDate objects provide methods such as `getFullYear`, `getMonth`, `getDate`, `getHours`, `getMinutes`, and `getSeconds` to extract their components. Besides `getFullYear` there's also `getYear`, which gives you the year minus 1900 (such as `98` or `125`) and is mostly useless.\n\n{{index \"capture group\", \"getDate method\", [parentheses, \"in regular expressions\"]}}\n\nPutting parentheses around the parts of the expression that we are interested in, we can now create a date object from a string.\n\n```\nfunction getDate(string) {\n  let [_, month, day, year] =\n    /(\\d{1,2})-(\\d{1,2})-(\\d{4})/.exec(string);\n  return new Date(year, month - 1, day);\n}\nconsole.log(getDate(\"1-30-2003\"));\n// → Thu Jan 30 2003 00:00:00 GMT+0100 (CET)\n```\n\n{{index destructuring, \"underscore character\"}}\n\nThe underscore (`_`) binding is ignored and used only to skip the full match element in the array returned by `exec`.\n\n## Boundaries and look-ahead\n\n{{index matching, [\"regular expression\", boundary]}}\n\nUnfortunately, `getDate` will also happily extract a date from the string `\"100-1-30000\"`. A match may happen anywhere in the string, so in this case, it'll just start at the second character and end at the second-to-last character.\n\n{{index boundary, \"caret character\", \"dollar sign\"}}\n\nIf we want to enforce that the match must span the whole string, we can add the markers `^` and `$`. The caret matches the start of the input string, whereas the dollar sign matches the end. Thus `/^\\d+$/` matches a string consisting entirely of one or more digits, `/^!/` matches any string that starts with an exclamation mark, and `/x^/` does not match any string (there cannot be an `x` before the start of the string).\n\n{{index \"word boundary\", \"word character\"}}\n\nThere is also a `\\b` marker that matches _word boundaries_, positions that have a word character on one side, and a nonword character on the other. Unfortunately, these use the same simplistic concept of word characters as `\\w` and are therefore not very reliable.\n\nNote that these boundary markers don't match any actual characters. They just enforce that a given condition holds at the place where it appears in the pattern.\n\n{{index \"look-ahead\"}}\n\n_Look-ahead_ tests do something similar. They provide a pattern and will make the match fail if the input doesn't match that pattern, but don't actually move the match position forward. They are written between `(?=` and `)`.\n\n```\nconsole.log(/a(?=e)/.exec(\"braeburn\"));\n// → [\"a\"]\nconsole.log(/a(?! )/.exec(\"a b\"));\n// → null\n```\n\nThe `e` in the first example is necessary to match, but is not part of the matched string. The `(?! )` notation expresses a _negative_ look-ahead. This matches only if the pattern in the parentheses _doesn't_ match, causing the second example to match only `a` characters that don't have a space after them.\n\n## Choice patterns\n\n{{index branching, [\"regular expression\", alternatives], \"farm example\"}}\n\nSay we want to know whether a piece of text contains not only a number but a number followed by one of the words _pig_, _cow_, or _chicken_, or any of their plural forms.\n\nWe could write three regular expressions and test them in turn, but there is a nicer way. The ((pipe character)) (`|`) denotes a ((choice)) between the pattern to its left and the pattern to its right. We can use it in expressions like this:\n\n```\nlet animalCount = /\\d+ (pig|cow|chicken)s?/;\nconsole.log(animalCount.test(\"15 pigs\"));\n// → true\nconsole.log(animalCount.test(\"15 pugs\"));\n// → false\n```\n\n{{index [parentheses, \"in regular expressions\"]}}\n\nParentheses can be used to limit the part of the pattern to which the pipe operator applies, and you can put multiple such operators next to each other to express a choice between more than two alternatives.\n\n## The mechanics of matching\n\n{{index [\"regular expression\", matching], [matching, algorithm], \"search problem\"}}\n\nConceptually, when you use `exec` or `test`, the regular expression engine looks for a match in your string by trying to match the expression first from the start of the string, then from the second character, and so on until it finds a match or reaches the end of the string. It'll either return the first match that can be found or fail to find any match at all.\n\n{{index [\"regular expression\", matching], [matching, algorithm]}}\n\nTo do the actual matching, the engine treats a regular expression something like a ((flow diagram)). This is the diagram for the livestock expression in the previous example:\n\n{{figure {url: \"img/re_pigchickens.svg\", alt: \"Railroad diagram that first passes through a box labeled 'digit', which has a loop going back from after it to before it, and then a box for a space character. After that, the railroad splits in three, going through boxes for 'pig', 'cow', and 'chicken'. After those it rejoins, and goes through a box labeled 's', which, being optional, also has a railroad that passes it by. Finally, the line reaches the accepting state.\"}}}\n\n{{index traversal}}\n\nIf we can find a path from the left side of the diagram to the right side, our expression matches. We keep a current position in the string, and every time we move through a box, we verify that the part of the string after our current position matches that box.\n\n{{id backtracking}}\n\n## Backtracking\n\n{{index [\"regular expression\", backtracking], \"binary number\", \"decimal number\", \"hexadecimal number\", \"flow diagram\", [matching, algorithm], backtracking}}\n\nThe regular expression `/^([01]+b|[\\da-f]+h|\\d+)$/` matches either a binary number followed by a `b`, a hexadecimal number (that is, base 16, with the letters `a` to `f` standing for the digits 10 to 15) followed by an `h`, or a regular decimal number with no suffix character. This is the corresponding diagram:\n\n{{figure {url: \"img/re_number.svg\", alt: \"Railroad diagram for the regular expression '^([01]+b|\\\\d+|[\\\\da-f]+h)$'\"}}}\n\n{{index branching}}\n\nWhen matching this expression, the top (binary) branch will often be entered even though the input does not actually contain a binary number. When matching the string `\"103\"`, for example, it becomes clear only at the `3` that we are in the wrong branch. The string _does_ match the expression, just not the branch we are currently in.\n\n{{index backtracking, \"search problem\"}}\n\nSo the matcher _backtracks_. When entering a branch, it remembers its current position (in this case, at the start of the string, just past the first boundary box in the diagram) so that it can go back and try another branch if the current one does not work out. For the string `\"103\"`, after encountering the `3` character, the matcher starts trying the branch for hexadecimal numbers, which fails again because there is no `h` after the number. It then tries the decimal number branch. This one fits, and a match is reported after all.\n\n{{index [matching, algorithm]}}\n\nThe matcher stops as soon as it finds a full match. This means that if multiple branches could potentially match a string, only the first one (ordered by where the branches appear in the regular expression) is used.\n\nBacktracking also happens for ((repetition)) operators like + and `*`. If you match `/^.*x/` against `\"abcxe\"`, the `.*` part will first try to consume the whole string. The engine will then realize that it needs an `x` to match the pattern. Since there is no `x` past the end of the string, the star operator tries to match one character less. But the matcher doesn't find an `x` after `abcx` either, so it backtracks again, matching the star operator to just `abc`. _Now_ it finds an `x` where it needs it and reports a successful match from positions 0 to 4.\n\n{{index performance, complexity}}\n\nIt is possible to write regular expressions that will do a _lot_ of backtracking. This problem occurs when a pattern can match a piece of input in many different ways. For example, if we get confused while writing a binary-number regular expression, we might accidentally write something like `/([01]+)+b/`.\n\n{{figure {url: \"img/re_slow.svg\", alt: \"Railroad diagram for the regular expression '([01]+)+b'\",width: \"6cm\"}}}\n\n{{index \"inner loop\", [nesting, \"in regexps\"]}}\n\nIf that tries to match some long series of zeros and ones with no trailing _b_ character, the matcher first goes through the inner loop until it runs out of digits. Then it notices there is no _b_, so it backtracks one position, goes through the outer loop once, and gives up again, trying to backtrack out of the inner loop once more. It will continue to try every possible route through these two loops. This means the amount of work _doubles_ with each additional character. For even just a few dozen characters, the resulting match will take practically forever.\n\n## The replace method\n\n{{index \"replace method\", \"regular expression\"}}\n\nString values have a `replace` method that can be used to replace part of the string with another string.\n\n```\nconsole.log(\"papa\".replace(\"p\", \"m\"));\n// → mapa\n```\n\n{{index [\"regular expression\", flags], [\"regular expression\", global]}}\n\nThe first argument can also be a regular expression, in which case the first match of the regular expression is replaced. When a `g` option (for _global_) is added after the regular expression, _all_ matches in the string will be replaced, not just the first.\n\n```\nconsole.log(\"Borobudur\".replace(/[ou]/, \"a\"));\n// → Barobudur\nconsole.log(\"Borobudur\".replace(/[ou]/g, \"a\"));\n// → Barabadar\n```\n\n{{index grouping, \"capture group\", \"dollar sign\", \"replace method\", [\"regular expression\", grouping]}}\n\nThe real power of using regular expressions with `replace` comes from the fact that we can refer to matched groups in the replacement string. For example, say we have a big string containing the names of people, one name per line, in the format `Lastname, Firstname`. If we want to swap these names and remove the comma to get a `Firstname Lastname` format, we can use the following code:\n\n```\nconsole.log(\n  \"Liskov, Barbara\\nMcCarthy, John\\nMilner, Robin\"\n    .replace(/(\\p{L}+), (\\p{L}+)/gu, \"$2 $1\"));\n// → Barbara Liskov\n//   John McCarthy\n//   Robin Milner\n```\n\nThe `$1` and `$2` in the replacement string refer to the parenthesized groups in the pattern. `$1` is replaced by the text that matched against the first group, `$2` by the second, and so on, up to `$9`. The whole match can be referred to with `$&`.\n\n{{index [function, \"higher-order\"], grouping, \"capture group\"}}\n\nIt is possible to pass a function—rather than a string—as the second argument to `replace`. For each replacement, the function will be called with the matched groups (as well as the whole match) as arguments, and its return value will be inserted into the new string.\n\nHere's an example:\n\n```\nlet stock = \"1 lemon, 2 cabbages, and 101 eggs\";\nfunction minusOne(match, amount, unit) {\n  amount = Number(amount) - 1;\n  if (amount == 1) { // only one left, remove the 's'\n    unit = unit.slice(0, unit.length - 1);\n  } else if (amount == 0) {\n    amount = \"no\";\n  }\n  return amount + \" \" + unit;\n}\nconsole.log(stock.replace(/(\\d+) (\\p{L}+)/gu, minusOne));\n// → no lemon, 1 cabbage, and 100 eggs\n```\n\nThis code takes a string, finds all occurrences of a number followed by an alphanumeric word, and returns a string that has one less of every such quantity.\n\nThe `(\\d+)` group ends up as the `amount` argument to the function, and the `(\\p{L}+)` group gets bound to `unit`. The function converts `amount` to a number—which always works, since it matched `\\d+` earlier—and makes some adjustments in case there is only one or zero left.\n\n## Greed\n\n{{index greed, \"regular expression\"}}\n\nWe can use `replace` to write a function that removes all ((comment))s from a piece of JavaScript ((code)). Here is a first attempt:\n\n```{test: wrap}\nfunction stripComments(code) {\n  return code.replace(/\\/\\/.*|\\/\\*[^]*\\*\\//g, \"\");\n}\nconsole.log(stripComments(\"1 + /* 2 */3\"));\n// → 1 + 3\nconsole.log(stripComments(\"x = 10;// ten!\"));\n// → x = 10;\nconsole.log(stripComments(\"1 /* a */+/* b */ 1\"));\n// → 1  1\n```\n\n{{index \"period character\", \"slash character\", \"newline character\", \"empty set\", \"block comment\", \"line comment\"}}\n\nThe part before the `|` operator matches two slash characters followed by any number of non-newline characters. The part for multiline comments is more involved. We use `[^]` (any character that is not in the empty set of characters) as a way to match any character. We cannot just use a period here because block comments can continue on a new line, and the period character does not match newline characters.\n\nBut the output for the last line appears to have gone wrong. Why?\n\n{{index backtracking, greed, \"regular expression\"}}\n\nThe `[^]*` part of the expression, as I described in the section on backtracking, will first match as much as it can. If that causes the next part of the pattern to fail, the matcher moves back one character and tries again from there. In the example, the matcher first tries to match the whole rest of the string and then moves back from there. It will find an occurrence of `*/` after going back four characters and match that. This is not what we wanted—the intention was to match a single comment, not to go all the way to the end of the code and find the end of the last block comment.\n\nBecause of this behavior, we say the repetition operators (`+`, `*`, `?`, and `{}`) are _((greed))y_, meaning they match as much as they can and backtrack from there. If you put a ((question mark)) after them (`+?`, `*?`, `??`, `{}?`), they become nongreedy and start by matching as little as possible, matching more only when the remaining pattern does not fit the smaller match.\n\nAnd that is exactly what we want in this case. By having the star match the smallest stretch of characters that brings us to a `*/`, we consume one block comment and nothing more.\n\n```{test: wrap}\nfunction stripComments(code) {\n  return code.replace(/\\/\\/.*|\\/\\*[^]*?\\*\\//g, \"\");\n}\nconsole.log(stripComments(\"1 /* a */+/* b */ 1\"));\n// → 1 + 1\n```\n\nA lot of ((bug))s in ((regular expression)) programs can be traced to unintentionally using a greedy operator where a nongreedy one would work better. When using a ((repetition)) operator, prefer the nongreedy variant.\n\n## Dynamically creating RegExp objects\n\n{{index [\"regular expression\", creation], \"underscore character\", \"RegExp class\"}}\n\nIn some cases you may not know the exact ((pattern)) you need to match against when you are writing your code. Say you want to test for the user's name in a piece of text. You can build up a string and use the `RegExp` ((constructor)) on that.\n\n```\nlet name = \"harry\";\nlet regexp = new RegExp(\"(^|\\\\s)\" + name + \"($|\\\\s)\", \"gi\");\nconsole.log(regexp.test(\"Harry is a dodgy character.\"));\n// → true\n```\n\n{{index [\"regular expression\", flags], [\"backslash character\", \"in regular expressions\"]}}\n\nWhen creating the `\\s` part of the string, we have to use two backslashes because we are writing them in a normal string, not a slash-enclosed regular expression. The second argument to the `RegExp` constructor contains the options for the regular expression—in this case, `\"gi\"` for global and case insensitive.\n\nBut what if the name is `\"dea+hl[]rd\"` because our user is a ((nerd))y teenager? That would result in a nonsensical regular expression that won't actually match the user's name.\n\n{{index [\"backslash character\", \"in regular expressions\"], [escaping, \"in regexps\"], [\"regular expression\", escaping]}}\n\nTo work around this, we can add backslashes before any character that has a special meaning.\n\n```\nlet name = \"dea+hl[]rd\";\nlet escaped = name.replace(/[\\\\[.+*?(){|^$]/g, \"\\\\$&\");\nlet regexp = new RegExp(\"(^|\\\\s)\" + escaped + \"($|\\\\s)\",\n                        \"gi\");\nlet text = \"This dea+hl[]rd guy is super annoying.\";\nconsole.log(regexp.test(text));\n// → true\n```\n\n## The search method\n\n{{index [\"regular expression\", methods], \"indexOf method\", \"search method\"}}\n\nWhile the `indexOf` method on strings cannot be called with a regular expression, there is another method, `search`, that does expect a regular expression. Like `indexOf`, it returns the first index on which the expression was found, or -1 when it wasn't found.\n\n```\nconsole.log(\"  word\".search(/\\S/));\n// → 2\nconsole.log(\"    \".search(/\\S/));\n// → -1\n```\n\nUnfortunately, there is no way to indicate that the match should start at a given offset (like we can with the second argument to `indexOf`), which would often be useful.\n\n## The lastIndex property\n\n{{index \"exec method\", \"regular expression\"}}\n\nThe `exec` method similarly does not provide a convenient way to start searching from a given position in the string. But it does provide an *in*convenient way.\n\n{{index [\"regular expression\", matching], matching, \"source property\", \"lastIndex property\"}}\n\nRegular expression objects have properties. One such property is `source`, which contains the string that expression was created from. Another property is `lastIndex`, which controls, in some limited circumstances, where the next match will start.\n\n{{index [interface, design], \"exec method\", [\"regular expression\", global]}}\n\nThose circumstances are that the regular expression must have the global (`g`) or sticky (`y`) option enabled, and the match must happen through the `exec` method. Again, a less confusing solution would have been to just allow an extra argument to be passed to `exec`, but confusion is an essential feature of JavaScript's regular expression interface.\n\n```\nlet pattern = /y/g;\npattern.lastIndex = 3;\nlet match = pattern.exec(\"xyzzy\");\nconsole.log(match.index);\n// → 4\nconsole.log(pattern.lastIndex);\n// → 5\n```\n\n{{index \"side effect\", \"lastIndex property\"}}\n\nIf the match was successful, the call to `exec` automatically updates the `lastIndex` property to point after the match. If no match was found, `lastIndex` is set back to 0, which is also the value it has in a newly constructed regular expression object.\n\nThe difference between the global and the sticky options is that when sticky is enabled, the match will succeed only if it starts directly at `lastIndex`, whereas with global, it will search ahead for a position where a match can start.\n\n```\nlet global = /abc/g;\nconsole.log(global.exec(\"xyz abc\"));\n// → [\"abc\"]\nlet sticky = /abc/y;\nconsole.log(sticky.exec(\"xyz abc\"));\n// → null\n```\n\n{{index bug}}\n\nWhen using a shared regular expression value for multiple `exec` calls, these automatic updates to the `lastIndex` property can cause problems. Your regular expression might be accidentally starting at an index left over from a previous call.\n\n```\nlet digit = /\\d/g;\nconsole.log(digit.exec(\"here it is: 1\"));\n// → [\"1\"]\nconsole.log(digit.exec(\"and now: 1\"));\n// → null\n```\n\n{{index [\"regular expression\", global], \"match method\"}}\n\nAnother interesting effect of the global option is that it changes the way the `match` method on strings works. When called with a global expression, instead of returning an array similar to that returned by `exec`, `match` will find _all_ matches of the pattern in the string and return an array containing the matched strings.\n\n```\nconsole.log(\"Banana\".match(/an/g));\n// → [\"an\", \"an\"]\n```\n\nSo be cautious with global regular expressions. The cases where they are necessary—calls to `replace` and places where you want to explicitly use `lastIndex`—are typically the situations where you want to use them.\n\n{{index \"lastIndex property\", \"exec method\", loop}}\n\nA common thing to do is to find all the matches of a regular expression in a string. We can do this by using the `matchAll` method.\n\n```\nlet input = \"A string with 3 numbers in it... 42 and 88.\";\nlet matches = input.matchAll(/\\d+/g);\nfor (let match of matches) {\n  console.log(\"Found\", match[0], \"at\", match.index);\n}\n// → Found 3 at 14\n//   Found 42 at 33\n//   Found 88 at 40\n```\n\n{{index [\"regular expression\", global]}}\n\nThis method returns an array of match arrays. The regular expression given to `matchAll` _must_ have `g` enabled.\n\n{{id ini}}\n## Parsing an INI file\n\n{{index comment, \"file format\", \"enemies example\", \"INI file\"}}\n\nTo conclude the chapter, we'll look at a problem that calls for ((regular expression))s. Imagine we are writing a program to automatically collect information about our enemies from the ((internet)). (We will not actually write that program here, just the part that reads the ((configuration)) file. Sorry.) The configuration file looks like this:\n\n```{lang: \"null\"}\nsearchengine=https://duckduckgo.com/?q=$1\nspitefulness=9.7\n\n; comments are preceded by a semicolon...\n; each section concerns an individual enemy\n[larry]\nfullname=Larry Doe\ntype=kindergarten bully\nwebsite=http://www.geocities.com/CapeCanaveral/11451\n\n[davaeorn]\nfullname=Davaeorn\ntype=evil wizard\noutputdir=/home/marijn/enemies/davaeorn\n```\n\n{{index grammar}}\n\nThe exact rules for this format—which is a widely used file format, usually called an _INI_ file—are as follows:\n\n- Blank lines and lines starting with semicolons are ignored.\n\n- Lines wrapped in `[` and `]` start a new ((section)).\n\n- Lines containing an alphanumeric identifier followed by an `=`   character add a setting to the current section.\n\n- Anything else is invalid.\n\nOur task is to convert a string like this into an object whose properties hold strings for settings written before the first section header and subobjects for sections, with those subobjects holding the section's settings.\n\n{{index \"carriage return\", \"line break\", \"newline character\"}}\n\nSince the format has to be processed ((line)) by line, splitting up the file into separate lines is a good start. We saw the `split` method in [Chapter ?](data#split). Some operating systems, however, use not just a newline character to separate lines but a carriage return character followed by a newline (`\"\\r\\n\"`). Given that the `split` method also allows a regular expression as its argument, we can use a regular expression like `/\\r?\\n/` to split in a way that allows both `\"\\n\"` and `\"\\r\\n\"` between lines.\n\n```{startCode: true}\nfunction parseINI(string) {\n  // Start with an object to hold the top-level fields\n  let result = {};\n  let section = result;\n  for (let line of string.split(/\\r?\\n/)) {\n    let match;\n    if (match = line.match(/^(\\w+)=(.*)$/)) {\n      section[match[1]] = match[2];\n    } else if (match = line.match(/^\\[(.*)\\]$/)) {\n      section = result[match[1]] = {};\n    } else if (!/^\\s*(;|$)/.test(line)) {\n      throw new Error(\"Line '\" + line + \"' is not valid.\");\n    }\n  };\n  return result;\n}\n\nconsole.log(parseINI(`\nname=Vasilis\n[address]\ncity=Tessaloniki`));\n// → {name: \"Vasilis\", address: {city: \"Tessaloniki\"}}\n```\n\n{{index \"parseINI function\", parsing}}\n\nThe code goes over the file's lines and builds up an object. Properties at the top are stored directly into that object, whereas properties found in sections are stored in a separate section object. The `section` binding points at the object for the current section.\n\nThere are two kinds of significant lines—section headers or property lines. When a line is a regular property, it is stored in the current section. When it is a section header, a new section object is created, and `section` is set to point at it.\n\n{{index \"caret character\", \"dollar sign\", boundary}}\n\nNote the recurring use of `^` and `$` to make sure the expression matches the whole line, not just part of it. Leaving these out results in code that mostly works but behaves strangely for some input, which can be a difficult bug to track down.\n\n{{index \"if keyword\", assignment, [\"= operator\", \"as expression\"]}}\n\nThe pattern `if (match = string.match(...))` makes use of the fact that the value of an ((assignment)) expression (`=`) is the assigned value. You often aren't sure that your call to `match` will succeed, so you can access the resulting object only inside an `if` statement that tests for this. To not break the pleasant chain of `else if` forms, we assign the result of the match to a binding and immediately use that assignment as the test for the `if` statement.\n\n{{index [parentheses, \"in regular expressions\"]}}\n\nIf a line is not a section header or a property, the function checks whether it is a comment or an empty line using the expression `/^\\s*(;|$)/` to match lines that either contain only whitespace, or whitespace followed by a semicolon (making the rest of the line a comment). When a line doesn't match any of the expected forms, the function throws an exception.\n\n## Code units and characters\n\nAnother design mistake that's been standardized in JavaScript regular expressions is that by default, operators like `.` or `?` work on code units (as discussed in [Chapter ?](higher_order#code_units)), not actual characters. This means characters that are composed of two code units behave strangely.\n\n```\nconsole.log(/🍎{3}/.test(\"🍎🍎🍎\"));\n// → false\nconsole.log(/<.>/.test(\"<🌹>\"));\n// → false\nconsole.log(/<.>/u.test(\"<🌹>\"));\n// → true\n```\n\nThe problem is that the 🍎 in the first line is treated as two code units, and `{3}` is applied only to the second unit. Similarly, the dot matches a single code unit, not the two that make up the rose ((emoji)).\n\nYou must add the `u` (Unicode) option to your regular expression to make it treat such characters properly.\n\n```\nconsole.log(/🍎{3}/u.test(\"🍎🍎🍎\"));\n// → true\n```\n\n{{id summary_regexp}}\n\n## Summary\n\nRegular expressions are objects that represent patterns in strings. They use their own language to express these patterns.\n\n{{table {cols: [1, 5]}}}\n\n| `/abc/`     | A sequence of characters\n| `/[abc]/`   | Any character from a set of characters\n| `/[^abc]/`  | Any character _not_ in a set of characters\n| `/[0-9]/`   | Any character in a range of characters\n| `/x+/`      | One or more occurrences of the pattern `x`\n| `/x+?/`     | One or more occurrences, nongreedy\n| `/x*/`      | Zero or more occurrences\n| `/x?/`      | Zero or one occurrence\n| `/x{2,4}/`  | Two to four occurrences\n| `/(abc)/`   | A group\n| `/a|b|c/`   | Any one of several patterns\n| `/\\d/`      | Any digit character\n| `/\\w/`      | An alphanumeric character (\"word character\")\n| `/\\s/`      | Any whitespace character\n| `/./`       | Any character except newlines\n| `/\\p{L}/u`  | Any letter character\n| `/^/`       | Start of input\n| `/$/`       | End of input\n| `/(?=a)/`   | A look-ahead test\n\nA regular expression has a method `test` to test whether a given string matches it. It also has a method `exec` that, when a match is found, returns an array containing all matched groups. Such an array has an `index` property that indicates where the match started.\n\nStrings have a `match` method to match them against a regular expression and a `search` method to search for one, returning only the starting position of the match. Their `replace` method can replace matches of a pattern with a replacement string or function.\n\nRegular expressions can have options, which are written after the closing slash. The `i` option makes the match case insensitive. The `g` option makes the expression _global_, which, among other things, causes the `replace` method to replace all instances instead of just the first. The `y` option makes and expression sticky, which means that it will not search ahead and skip part of the string when looking for a match. The `u` option turns on Unicode mode, which enables `\\p` syntax and fixes a number of problems around the handling of characters that take up two code units.\n\nRegular expressions are a sharp ((tool)) with an awkward handle. They simplify some tasks tremendously but can quickly become unmanageable when applied to complex problems. Part of knowing how to use them is resisting the urge to try to shoehorn things into them that they cannot cleanly express.\n\n## Exercises\n\n{{index debugging, bug}}\n\nIt is almost unavoidable that, in the course of working on these exercises, you will get confused and frustrated by some regular expression's inexplicable ((behavior)). Sometimes it helps to enter your expression into an online tool like [_debuggex.com_](https://www.debuggex.com) to see whether its visualization corresponds to what you intended and to ((experiment)) with the way it responds to various input strings.\n\n### Regexp golf\n\n{{index \"program size\", \"code golf\", \"regexp golf (exercise)\"}}\n\n_Code golf_ is a term used for the game of trying to express a particular program in as few characters as possible. Similarly, _regexp golf_ is the practice of writing as tiny a regular expression as possible to match a given pattern and _only_ that pattern.\n\n{{index boundary, matching}}\n\nFor each of the following items, write a ((regular expression)) to test whether the given pattern occurs in a string. The regular expression should match only strings containing the pattern. When your expression works, see whether you can make it any smaller.\n\n 1. _car_ and _cat_\n 2. _pop_ and _prop_\n 3. _ferret_, _ferry_, and _ferrari_\n 4. Any word ending in _ious_\n 5. A whitespace character followed by a period, comma, colon, or semicolon\n 6. A word longer than six letters\n 7. A word without the letter _e_ (or _E_)\n\nRefer to the table in the [chapter summary](regexp#summary_regexp) for help. Test each solution with a few test strings.\n\n{{if interactive\n```\n// Fill in the regular expressions\n\nverify(/.../,\n       [\"my car\", \"bad cats\"],\n       [\"camper\", \"high art\"]);\n\nverify(/.../,\n       [\"pop culture\", \"mad props\"],\n       [\"plop\", \"prrrop\"]);\n\nverify(/.../,\n       [\"ferret\", \"ferry\", \"ferrari\"],\n       [\"ferrum\", \"transfer A\"]);\n\nverify(/.../,\n       [\"how delicious\", \"spacious room\"],\n       [\"ruinous\", \"consciousness\"]);\n\nverify(/.../,\n       [\"bad punctuation .\"],\n       [\"escape the period\"]);\n\nverify(/.../,\n       [\"Siebentausenddreihundertzweiundzwanzig\"],\n       [\"no\", \"three small words\"]);\n\nverify(/.../,\n       [\"red platypus\", \"wobbling nest\"],\n       [\"earth bed\", \"bedrøvet abe\", \"BEET\"]);\n\n\nfunction verify(regexp, yes, no) {\n  // Ignore unfinished exercises\n  if (regexp.source == \"...\") return;\n  for (let str of yes) if (!regexp.test(str)) {\n    console.log(`Failure to match '${str}'`);\n  }\n  for (let str of no) if (regexp.test(str)) {\n    console.log(`Unexpected match for '${str}'`);\n  }\n}\n```\n\nif}}\n\n### Quoting style\n\n{{index \"quoting style (exercise)\", \"single-quote character\", \"double-quote character\"}}\n\nImagine you have written a story and used single ((quotation mark))s throughout to mark pieces of dialogue. Now you want to replace all the dialogue quotes with double quotes, while keeping the single quotes used in contractions like _aren't_.\n\n{{index \"replace method\"}}\n\nThink of a pattern that distinguishes these two kinds of quote usage and craft a call to the `replace` method that does the proper replacement.\n\n{{if interactive\n```{test: no}\nlet text = \"'I'm the cook,' he said, 'it's my job.'\";\n// Change this call.\nconsole.log(text.replace(/A/g, \"B\"));\n// → \"I'm the cook,\" he said, \"it's my job.\"\n```\nif}}\n\n{{hint\n\n{{index \"quoting style (exercise)\", boundary}}\n\nThe most obvious solution is to replace only quotes with a nonletter character on at least one side—something like `/\\P{L}'|'\\P{L}/u`. But you also have to take the start and end of the line into account.\n\n{{index grouping, \"replace method\", [parentheses, \"in regular expressions\"]}}\n\nIn addition, you must ensure that the replacement also includes the characters that were matched by the `\\P{L}` pattern so that those are not dropped. This can be done by wrapping them in parentheses and including their groups in the replacement string (`$1`, `$2`). Groups that are not matched will be replaced by nothing.\n\nhint}}\n\n### Numbers again\n\n{{index sign, \"fractional number\", [syntax, number], minus, \"plus character\", exponent, \"scientific notation\", \"period character\"}}\n\nWrite an expression that matches only JavaScript-style ((number))s. It must support an optional minus _or_ plus sign in front of the number, the decimal dot, and exponent notation—`5e-3` or `1E10`—again with an optional sign in front of the exponent. Also note that it is not necessary for there to be digits in front of or after the dot, but the number cannot be a dot alone. That is, `.5` and `5.` are valid JavaScript numbers, but a lone dot isn't.\n\n{{if interactive\n```{test: no}\n// Fill in this regular expression.\nlet number = /^...$/;\n\n// Tests:\nfor (let str of [\"1\", \"-1\", \"+15\", \"1.55\", \".5\", \"5.\",\n                 \"1.3e2\", \"1E-4\", \"1e+12\"]) {\n  if (!number.test(str)) {\n    console.log(`Failed to match '${str}'`);\n  }\n}\nfor (let str of [\"1a\", \"+-1\", \"1.2.3\", \"1+1\", \"1e4.5\",\n                 \".5.\", \"1f5\", \".\"]) {\n  if (number.test(str)) {\n    console.log(`Incorrectly accepted '${str}'`);\n  }\n}\n```\n\nif}}\n\n{{hint\n\n{{index [\"regular expression\", escaping], [\"backslash character\", \"in regular expressions\"]}}\n\nFirst, do not forget the backslash in front of the period.\n\nMatching the optional ((sign)) in front of the ((number)), as well as in front of the ((exponent)), can be done with `[+\\-]?` or `(\\+|-|)` (plus, minus, or nothing).\n\n{{index \"pipe character\"}}\n\nThe more complicated part of the exercise is the problem of matching both `\"5.\"` and `\".5\"` without also matching `\".\"`. For this, a good solution is to use the `|` operator to separate the two cases—either one or more digits optionally followed by a dot and zero or more digits _or_ a dot followed by one or more digits.\n\n{{index exponent, \"case sensitivity\", [\"regular expression\", flags]}}\n\nFinally, to make the _e_ case insensitive, either add an `i` option to the regular expression or use `[eE]`.\n\nhint}}\n"
        },
        {
          "name": "10_modules.md",
          "type": "blob",
          "size": 32.291015625,
          "content": "{{meta {load_files: [\"code/packages_chapter_10.js\", \"code/chapter/07_robot.js\"]}}}\n\n# Modules\n\n{{quote {author: \"Tef\", title: \"programming is terrible\", chapter: true}\n\nWrite code that is easy to delete, not easy to extend.\n\nquote}}\n\n{{index \"Yuan-Ma\", \"Book of Programming\"}}\n\n{{figure {url: \"img/chapter_picture_10.jpg\", alt: \"Illustration of a complicated building built from modular pieces\", chapter: framed}}}\n\n{{index organization, [code, \"structure of\"]}}\n\nIdeally, a program has a clear, straightforward structure. The way it works is easy to explain, and each part plays a well-defined role.\n\n{{index \"organic growth\"}}\n\nIn practice, programs grow organically. Pieces of functionality are added as the programmer identifies new needs. Keeping such a program well structured requires constant attention and work. This is work that will pay off only in the future, the _next_ time someone works on the program, so it's tempting to neglect it and allow the various parts of the program to become deeply entangled.\n\n{{index readability, reuse, isolation}}\n\nThis causes two practical issues. First, understanding an entangled system is hard. If everything can touch everything else, it is difficult to look at any given piece in isolation. You are forced to build up a holistic understanding of the entire thing. Second, if you want to use any of the functionality from such a program in another situation, rewriting it may be easier than trying to disentangle it from its context.\n\nThe phrase \"((big ball of mud))\" is often used for such large, structureless programs. Everything sticks together, and when you try to pick out a piece, the whole thing comes apart, and you succeed only in making a mess.\n\n## Modular programs\n\n{{index dependency, [interface, module]}}\n\n_Modules_ are an attempt to avoid these problems. A ((module)) is a piece of program that specifies which other pieces it relies on and which functionality it provides for other modules to use (its _interface_).\n\n{{index \"big ball of mud\"}}\n\nModule interfaces have a lot in common with object interfaces, as we saw them in [Chapter ?](object#interface). They make part of the module available to the outside world and keep the rest private.\n\n{{index dependency}}\n\nBut the interface that a module provides for others to use is only half the story. A good module system also requires modules to specify which code _they_ use from other modules. These relations are called _dependencies_. If module A uses functionality from module B, it is said to _depend_ on that module. When these are clearly specified in the module itself, they can be used to figure out which other modules need to be present to be able to use a given module and to automatically load dependencies.\n\nWhen the ways in which modules interact with each other are explicit, a system becomes more like ((LEGO)), where pieces interact through well-defined connectors, and less like mud, where everything mixes with everything else.\n\n{{id es}}\n\n## ES modules\n\n{{index \"global scope\", [binding, global]}}\n\nThe original JavaScript language did not have any concept of a module. All scripts ran in the same scope, and accessing a function defined in another script was done by referencing the global bindings created by that script. This actively encouraged accidental, hard-to-see entanglement of code and invited problems like unrelated scripts trying to use the same binding name.\n\n{{index \"ES modules\"}}\n\nSince ECMAScript 2015, JavaScript supports two different types of programs. _Scripts_ behave in the old way: their bindings are defined in the global scope, and they have no way to directly reference other scripts. _Modules_ get their own separate scope and support the `import` and `export` keywords, which aren't available in scripts, to declare their dependencies and interface. This module system is usually called _ES modules_ (where _ES_ stands for ECMAScript).\n\nA modular program is composed of a number of such modules, wired together via their imports and exports.\n\n{{index \"Date class\", \"weekDay module\"}}\n\nThe following example module converts between day names and numbers (as returned by `Date`'s `getDay` method). It defines a constant that is not part of its interface, and two functions that are. It has no dependencies.\n\n```\nconst names = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n               \"Thursday\", \"Friday\", \"Saturday\"];\n\nexport function dayName(number) {\n  return names[number];\n}\nexport function dayNumber(name) {\n  return names.indexOf(name);\n}\n```\n\nThe `export` keyword can be put in front of a function, class, or binding definition to indicate that that binding is part of the module's interface. This makes it possible for other modules to use that binding by importing it.\n\n```{test: no}\nimport {dayName} from \"./dayname.js\";\nlet now = new Date();\nconsole.log(`Today is ${dayName(now.getDay())}`);\n// → Today is Monday\n```\n\n{{index \"import keyword\", dependency, \"ES modules\"}}\n\nThe `import` keyword, followed by a list of binding names in braces, makes bindings from another module available in the current module. Modules are identified by quoted strings.\n\n{{index [module, resolution], resolution}}\n\nHow such a module name is resolved to an actual program differs by platform. The browser treats them as web addresses, whereas Node.js resolves them to files. When you run a module, all the other modules it depends on—and the modules _those_ depend on—are loaded, and the exported bindings are made available to the modules that import them.\n\nImport and export declarations cannot appear inside of functions, loops, or other blocks. They are immediately resolved when the module is loaded, regardless of how the code in the module executes. To reflect this, they must appear only in the outer module body.\n\nA module's interface thus consists of a collection of named bindings, which other modules that depend on the module can access. Imported bindings can be renamed to give them a new local name using `as` after their name.\n\n```\nimport {dayName as nomDeJour} from \"./dayname.js\";\nconsole.log(nomDeJour(3));\n// → Wednesday\n```\n\nA module may also have a special export named `default`, which is often used for modules that only export a single binding. To define a default export, you write `export default` before an expression, a function declaration, or a class declaration.\n\n```\nexport default [\"Winter\", \"Spring\", \"Summer\", \"Autumn\"];\n```\n\nSuch a binding is imported by omitting the braces around the name of the import.\n\n```\nimport seasonNames from \"./seasonname.js\";\n```\n\nTo import all bindings from a module at the same time, you can use `import *`. You provide a name, and that name will be bound to an object holding all the module's exports. This can be useful when you are using a lot of different exports.\n\n```\nimport * as dayName from \"./dayname.js\";\nconsole.log(dayName.dayName(3));\n// → Wednesday\n```\n\n## Packages\n\n{{index bug, dependency, structure, reuse}}\n\nOne of the advantages of building a program out of separate pieces and being able to run some of those pieces on their own is that you might be able to use the same piece in different programs.\n\n{{index \"parseINI function\"}}\n\nBut how do you set this up? Say I want to use the `parseINI` function from [Chapter ?](regexp#ini) in another program. If it is clear what the function depends on (in this case, nothing), I can just copy that module into my new project and use it. But then, if I find a mistake in the code, I'll probably fix it in whichever program  I'm working with at the time and forget to also fix it in the other program.\n\n{{index duplication, \"copy-paste programming\"}}\n\nOnce you start duplicating code, you'll quickly find yourself wasting time and energy moving copies around and keeping them up to date. That's where _((package))s_ come in. A package is a chunk of code that can be distributed (copied and installed). It may contain one or more modules and has information about which other packages it depends on. A package also usually comes with documentation explaining what it does so that people who didn't write it might still be able to use it.\n\nWhen a problem is found in a package or a new feature is added, the package is updated. Now the programs that depend on it (which may also be packages) can copy the new ((version)) to get the improvements that were made to the code.\n\n{{id modules_npm}}\n\n{{index installation, upgrading, \"package manager\", download, reuse}}\n\nWorking in this way requires ((infrastructure)). We need a place to store and find packages and a convenient way to install and upgrade them. In the JavaScript world, this infrastructure is provided by ((NPM)) ([_https://npmjs.com_](https://npmjs.com)).\n\nNPM is two things: an online service where you can download (and upload) packages, and a program (bundled with Node.js) that helps you install and manage them.\n\n{{index \"ini package\"}}\n\nAt the time of writing, there are more than three million different packages available on NPM. A large portion of those are rubbish, to be fair. But almost every useful, publicly available JavaScript package can be found on NPM. For example, an INI file parser, similar to the one we built in [Chapter ?](regexp), is available under the package name `ini`.\n\n{{index \"command line\"}}\n\n[Chapter ?](node) will show how to install such packages locally using the `npm` command line program.\n\nHaving quality packages available for download is extremely valuable. It means that we can often avoid reinventing a program that 100 people have written before and get a solid, well-tested implementation at the press of a few keys.\n\n{{index maintenance}}\n\nSoftware is cheap to copy, so once someone has written it, distributing it to other people is an efficient process. Writing it in the first place _is_ work, though, and responding to people who have found problems in the code or who want to propose new features is even more work.\n\nBy default, you own the ((copyright)) to the code you write, and other people may use it only with your permission. But because some people are just nice and because publishing good software can help make you a little bit famous among programmers, many packages are published under a ((license)) that explicitly allows other people to use it.\n\nMost code on ((NPM)) is licensed this way. Some licenses require you to also publish code that you build on top of the package under the same license. Others are less demanding, requiring only that you keep the license with the code as you distribute it. The JavaScript community mostly uses the latter type of license. When using other people's packages, make sure you are aware of their licenses.\n\n{{id modules_ini}}\n\n{{index \"ini package\"}}\n\nNow, instead of writing our own INI file parser, we can use one from ((NPM)).\n\n```\nimport {parse} from \"ini\";\n\nconsole.log(parse(\"x = 10\\ny = 20\"));\n// → {x: \"10\", y: \"20\"}\n```\n\n{{id commonjs}}\n\n## CommonJS modules\n\nBefore 2015, when the JavaScript language had no built-in module system, people were already building large systems in JavaScript. To make that workable, they _needed_ ((module))s.\n\n{{index [function, scope], [interface, module], [object, as module]}}\n\nThe community designed its own improvised ((module system))s on top of the language. These use functions to create a local scope for the modules and regular objects to represent module interfaces.\n\nInitially, people just manually wrapped their entire module in an “((immediately invoked function\nexpression))” to create the module's scope and assigned their interface objects to a single global\nvariable.\n\n```\nconst weekDay = function() {\n  const names = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n                 \"Thursday\", \"Friday\", \"Saturday\"];\n  return {\n    name(number) { return names[number]; },\n    number(name) { return names.indexOf(name); }\n  };\n}();\n\nconsole.log(weekDay.name(weekDay.number(\"Sunday\")));\n// → Sunday\n```\n\n{{index dependency, [interface, module]}}\n\nThis style of modules provides ((isolation)), to a certain degree, but it does not declare dependencies. Instead, it just puts its interface into the ((global scope)) and expects its dependencies, if any, to do the same. This is not ideal.\n\n{{index \"CommonJS modules\"}}\n\nIf we implement our own module loader, we can do better. The most widely used approach to bolted-on JavaScript modules is called _CommonJS modules_. ((Node.js)) used this module system from the start (though it now also knows how to load ES modules), and it is the module system used by many packages on ((NPM)).\n\n{{index \"require function\", [interface, module], \"exports object\"}}\n\nA CommonJS module looks like a regular script, but it has access to two bindings that it uses to interact with other modules. The first is a function called `require`. When you call this with the module name of your dependency, it makes sure the module is loaded and returns its interface. The second is an object named `exports`, which is the interface object for the module. It starts out empty and you add properties to it to define exported values.\n\n{{index \"formatDate module\", \"Date class\", \"ordinal package\", \"date-names package\"}}\n\nThis CommonJS example module provides a date-formatting function. It uses two ((package))s from NPM—`ordinal` to convert numbers to strings like `\"1st\"` and `\"2nd\"`, and `date-names` to get the English names for weekdays and months. It exports a single function, `formatDate`, which takes a `Date` object and a ((template)) string.\n\nThe template string may contain codes that direct the format, such as `YYYY` for the full year and `Do` for the ordinal day of the month. You could give it a string like `\"MMMM Do YYYY\"` to get output like `November 22nd 2017`.\n\n```\nconst ordinal = require(\"ordinal\");\nconst {days, months} = require(\"date-names\");\n\nexports.formatDate = function(date, format) {\n  return format.replace(/YYYY|M(MMM)?|Do?|dddd/g, tag => {\n    if (tag == \"YYYY\") return date.getFullYear();\n    if (tag == \"M\") return date.getMonth();\n    if (tag == \"MMMM\") return months[date.getMonth()];\n    if (tag == \"D\") return date.getDate();\n    if (tag == \"Do\") return ordinal(date.getDate());\n    if (tag == \"dddd\") return days[date.getDay()];\n  });\n};\n```\n\n{{index \"destructuring binding\"}}\n\nThe interface of `ordinal` is a single function, whereas `date-names` exports an object containing multiple things—`days` and `months` are arrays of names. Destructuring is very convenient when creating bindings for imported interfaces.\n\nThe module adds its interface function to `exports` so that modules that depend on it get access to it. We could use the module like this:\n\n```\nconst {formatDate} = require(\"./format-date.js\");\n\nconsole.log(formatDate(new Date(2017, 9, 13),\n                       \"dddd the Do\"));\n// → Friday the 13th\n```\n\nCommonJS is implemented with a module loader that, when loading a module, wraps its code in a function (giving it its own local scope) and passes the `require` and `exports` bindings to that function as arguments.\n\n{{id require}}\n\n{{index \"require function\", \"CommonJS modules\", \"readFile function\"}}\n\nIf we assume we have access to a `readFile` function that reads a file by name and gives us its content, we can define a simplified form of `require` like this:\n\n```{test: wrap, sandbox: require}\nfunction require(name) {\n  if (!(name in require.cache)) {\n    let code = readFile(name);\n    let exports = require.cache[name] = {};\n    let wrapper = Function(\"require, exports\", code);\n    wrapper(require, exports);\n  }\n  return require.cache[name];\n}\nrequire.cache = Object.create(null);\n```\n\n{{id eval}}\n\n{{index \"Function constructor\", eval, security}}\n\n`Function` is a built-in JavaScript function that takes a list of arguments (as a comma-separated string) and a string containing the function body and returns a function value with those arguments and that body. This is an interesting concept—it allows a program to create new pieces of program from string data—but also a dangerous one, since if someone can trick your program into putting a string they provide into `Function`, they can make the program do anything they want.\n\n{{index [file, access]}}\n\nStandard JavaScript provides no such function as `readFile`, but different JavaScript environments, such as the browser and Node.js, provide their own ways of accessing files. The example just pretends that `readFile` exists.\n\nTo avoid loading the same module multiple times, `require` keeps a store (cache) of already loaded modules. When called, it first checks whether the requested module has been loaded and, if not, loads it. This involves reading the module's code, wrapping it in a function, and calling it.\n\n{{index \"ordinal package\", \"exports object\", \"module object\", [interface, module]}}\n\nBy defining `require` and `exports` as ((parameter))s for the generated wrapper function (and passing the appropriate values when calling it), the loader makes sure that these bindings are available in the module's ((scope)).\n\nAn important difference between this system and ES modules is that ES module imports happen before a module's script starts running, whereas `require` is a normal function, invoked when the module is already running. Unlike `import` declarations, `require` calls _can_ appear inside functions, and the name of the dependency can be any expression that evaluates to a string, whereas `import` allows only plain quoted strings.\n\nThe transition of the JavaScript community from CommonJS style to ES modules has been a slow and somewhat rough one. Fortunately we are now at a point where most of the popular packages on NPM provide their code as ES modules, and Node.js allows ES modules to import from CommonJS modules. While CommonJS code is still something you will run across, there is no real reason to write new programs in this style anymore.\n\n## Building and bundling\n\n{{index compilation, \"type checking\"}}\n\nMany JavaScript packages aren't technically written in JavaScript. Language extensions such as TypeScript, the type checking ((dialect)) mentioned in [Chapter ?](error#typing), are widely used. People also often start using planned new language features long before they have been added to the platforms that actually run JavaScript. To make this possible, they _compile_ their code, translating it from their chosen JavaScript dialect to plain old JavaScript—or even to a past version of JavaScript—so that ((browsers)) can run it.\n\n{{index latency, performance, [file, access], [network, speed]}}\n\nIncluding a modular program that consists of 200 different files in a ((web page)) produces its own problems. If fetching a single file over the network takes 50 milliseconds, loading the whole program takes 10 seconds, or maybe half that if you can load several files simultaneously. That's a lot of wasted time. Because fetching a single big file tends to be faster than fetching a lot of tiny ones, web programmers have started using tools that combine their programs (which they painstakingly split into modules) into a single big file before they publish it to the web. Such tools are called _((bundler))s_.\n\n{{index \"file size\"}}\n\nAnd we can go further. Apart from the number of files, the _size_ of the files also determines how fast they can be transferred over the network. Thus, the JavaScript community has invented _((minifier))s_. These are tools that take a JavaScript program and make it smaller by automatically removing comments and whitespace, renaming bindings, and replacing pieces of code with equivalent code that take up less space.\n\n{{index pipeline, tool}}\n\nIt is not uncommon for the code that you find in an NPM package or that runs on a web page to have gone through _multiple_ stages of transformation—converting from modern JavaScript to historic JavaScript, combining the modules into a single file, and minifying the code. We won't go into the details of these tools in this book, since there are many of them, and which one is popular changes regularly. Just be aware that such things exist, and look them up when you need them.\n\n## Module design\n\n{{index [module, design], [interface, module], [code, \"structure of\"]}}\n\nStructuring programs is one of the subtler aspects of programming. Any nontrivial piece of functionality can be organized in various ways.\n\nGood program design is subjective—there are trade-offs involved, and matters of taste. The best way to learn the value of well-structured design is to read or work on a lot of programs and notice what works and what doesn't. Don't assume that a painful mess is “just the way it is”. You can improve the structure of almost everything by putting more thought into it.\n\n{{index [interface, module]}}\n\nOne aspect of module design is ease of use. If you are designing something that is intended to be used by multiple people—or even by yourself, in three months when you no longer remember the specifics of what you did—it is helpful if your interface is simple and predictable.\n\n{{index \"ini package\", JSON}}\n\nThat may mean following existing conventions. A good example is the `ini` package. This module imitates the standard `JSON` object by providing `parse` and `stringify` (to write an INI file) functions, and, like `JSON`, converts between strings and plain objects. The interface is small and familiar, and after you've worked with it once, you're likely to remember how to use it.\n\n{{index \"side effect\", \"hard disk\", composability}}\n\nEven if there's no standard function or widely used package to imitate, you can keep your modules predictable by using simple ((data structure))s and doing a single, focused thing. Many of the INI-file parsing modules on NPM provide a function that directly reads such a file from the hard disk and parses it, for example. This makes it impossible to use such modules in the browser, where we don't have direct filesystem access, and adds complexity that would have been better addressed by _composing_ the module with some file-reading function.\n\n{{index \"pure function\"}}\n\nThis points to another helpful aspect of module design—the ease with which something can be composed with other code. Focused modules that compute values are applicable in a wider range of programs than bigger modules that perform complicated actions with side effects. An INI file reader that insists on reading the file from disk is useless in a scenario where the file's content comes from some other source.\n\n{{index \"object-oriented programming\"}}\n\nRelatedly, stateful objects are sometimes useful or even necessary, but if something can be done with a function, use a function. Several of the INI file readers on NPM provide an interface style that requires you to first create an object, then load the file into your object, and finally use specialized methods to get at the results. This type of thing is common in the object-oriented tradition, and it's terrible. Instead of making a single function call and moving on, you have to perform the ritual of moving your object through its various states. And because the data is now wrapped in a specialized object type, all code that interacts with it has to know about that type, creating unnecessary interdependencies.\n\nOften, defining new data structures can't be avoided—only a few  basic ones are provided by the language standard, and many types of data have to be more complex than an array or a map. But when an array suffices, use an array.\n\nAn example of a slightly more complex data structure is the graph from [Chapter ?](robot). There is no single obvious way to represent a ((graph)) in JavaScript. In that chapter, we used an object whose properties hold arrays of strings—the other nodes reachable from that node.\n\nThere are several different pathfinding packages on ((NPM)), but none of them uses this graph format. They usually allow the graph's edges to have a weight, which is the cost or distance associated with it. That isn't possible in our representation.\n\n{{index \"Dijkstra, Edsger\", pathfinding, \"Dijkstra's algorithm\", \"dijkstrajs package\"}}\n\nFor example, there's the `dijkstrajs` package. A well-known approach to pathfinding, quite similar to our `findRoute` function, is called _Dijkstra's algorithm_, after Edsger Dijkstra, who first wrote it down. The `js` suffix is often added to package names to indicate the fact that they are written in JavaScript. This `dijkstrajs` package uses a graph format similar to ours, but instead of arrays, it uses objects whose property values are numbers—the weights of the edges.\n\nIf we wanted to use that package, we'd have to make sure that our graph was stored in the format it expects. All edges get the same weight, since our simplified model treats each road as having the same cost (one turn).\n\n```\nconst {find_path} = require(\"dijkstrajs\");\n\nlet graph = {};\nfor (let node of Object.keys(roadGraph)) {\n  let edges = graph[node] = {};\n  for (let dest of roadGraph[node]) {\n    edges[dest] = 1;\n  }\n}\n\nconsole.log(find_path(graph, \"Post Office\", \"Cabin\"));\n// → [\"Post Office\", \"Alice's House\", \"Cabin\"]\n```\n\nThis can be a barrier to composition—when various packages are using different data structures to describe similar things, combining them is difficult. Therefore, if you want to design for composability, find out what ((data structure))s other people are using and, when possible, follow their example.\n\n{{index design}}\n\nDesigning a fitting module structure for a program can be difficult. In the phase where you are still exploring the problem, trying  different things to see what works, you might want to not worry about it too much, since keeping everything organized can be a big distraction. Once you have something that feels solid, that's a good time to take a step back and organize it.\n\n## Summary\n\nModules provide structure to bigger programs by separating the code into pieces with clear interfaces and dependencies. The interface is the part of the module that's visible to other modules, and the dependencies are the other modules it makes use of.\n\nBecause JavaScript historically did not provide a module system, the CommonJS system was built on top of it. Then at some point it _did_ get a built-in system, which now coexists uneasily with the CommonJS system.\n\nA package is a chunk of code that can be distributed on its own. NPM is a repository of JavaScript packages. You can download all kinds of useful (and useless) packages from it.\n\n## Exercises\n\n### A modular robot\n\n{{index \"modular robot (exercise)\", module, robot, NPM}}\n\n{{id modular_robot}}\n\nThese are the bindings that the project from [Chapter ?](robot) creates:\n\n```{lang: \"null\"}\nroads\nbuildGraph\nroadGraph\nVillageState\nrunRobot\nrandomPick\nrandomRobot\nmailRoute\nrouteRobot\nfindRoute\ngoalOrientedRobot\n```\n\nIf you were to write that project as a modular program, what modules would you create? Which module would depend on which other module, and what would their interfaces look like?\n\nWhich pieces are likely to be available prewritten on NPM? Would you prefer to use an NPM package or write them yourself?\n\n{{hint\n\n{{index \"modular robot (exercise)\"}}\n\nHere's what I would have done (but again, there is no single _right_ way to design a given module):\n\n{{index \"dijkstrajs package\"}}\n\nThe code used to build the road graph lives in the `graph.js` module. Because I'd rather use `dijkstrajs` from NPM than our own pathfinding code, we'll make this build the kind of graph data that `dijkstrajs` expects. This module exports a single function, `buildGraph`. I'd have `buildGraph` accept an array of two-element arrays, rather than strings containing hyphens, to make the module less dependent on the input format.\n\nThe `roads.js` module contains the raw road data (the `roads` array) and the `roadGraph` binding. This module depends on `./graph.js` and exports the road graph.\n\n{{index \"random-item package\"}}\n\nThe `VillageState` class lives in the `state.js` module. It depends on the `./roads.js` module because it needs to be able to verify that a given road exists. It also needs `randomPick`. Since that is a three-line function, we could just put it into the `state.js` module as an internal helper function. But `randomRobot` needs it too. So we'd have to either duplicate it or put it into its own module. Since this function happens to exist on NPM in the `random-item` package, a reasonable solution is to just make both modules depend on that. We can add the `runRobot` function to this module as well, since it's small and closely related to state management. The module exports both the `VillageState` class and the `runRobot` function.\n\nFinally, the robots, along with the values they depend on, such as `mailRoute`, could go into an `example-robots.js` module, which depends on `./roads.js` and exports the robot functions. To make it possible for `goalOrientedRobot` to do route-finding, this module also depends on `dijkstrajs`.\n\nBy offloading some work to ((NPM)) modules, the code became a little smaller. Each individual module does something rather simple and can be read on its own. Dividing code into modules also often suggests further improvements to the program's design. In this case, it seems a little odd that the `VillageState` and the robots depend on a specific road graph. It might be a better idea to make the graph an argument to the state's constructor and make the robots read it from the state object—this reduces dependencies (which is always good) and makes it possible to run simulations on different maps (which is even better).\n\nIs it a good idea to use NPM modules for things that we could have written ourselves? In principle, yes—for nontrivial things like the pathfinding function you are likely to make mistakes and waste time writing them yourself. For tiny functions like `random-item`, writing them yourself is easy enough. But adding them wherever you need them does tend to clutter your modules.\n\nHowever, you should also not underestimate the work involved in _finding_ an appropriate NPM package. And even if you find one, it might not work well or may be missing some feature you need. On top of that, depending on NPM packages means you have to make sure they are installed, you have to distribute them with your program, and you might have to periodically upgrade them.\n\nSo again, this is a trade-off, and you can decide either way depending on how much a given package actually helps you.\n\nhint}}\n\n### Roads module\n\n{{index \"roads module (exercise)\"}}\n\nWrite an ES module based on the example from [Chapter ?](robot) that contains the array of roads and exports the graph data structure representing them as `roadGraph`. It depends on a module `./graph.js` that exports a function `buildGraph`, used to build the graph. This function expects an array of two-element arrays (the start and end points of the roads).\n\n{{if interactive\n\n```{test: no}\n// Add dependencies and exports\n\nconst roads = [\n  \"Alice's House-Bob's House\",   \"Alice's House-Cabin\",\n  \"Alice's House-Post Office\",   \"Bob's House-Town Hall\",\n  \"Daria's House-Ernie's House\", \"Daria's House-Town Hall\",\n  \"Ernie's House-Grete's House\", \"Grete's House-Farm\",\n  \"Grete's House-Shop\",          \"Marketplace-Farm\",\n  \"Marketplace-Post Office\",     \"Marketplace-Shop\",\n  \"Marketplace-Town Hall\",       \"Shop-Town Hall\"\n];\n```\n\nif}}\n\n{{hint\n\n{{index \"roads module (exercise)\", \"destructuring binding\", \"exports object\"}}\n\nSince this is an ES module, you have to use `import` to access the graph module. That was described as exporting a `buildGraph` function, which you can pick out of its interface object with a destructuring `const` declaration.\n\nTo export `roadGraph`, you put the keyword `export` before its definition. Because `buildGraph` takes a data structure that doesn't precisely match `roads`, the splitting of the road strings must happen in your module.\n\nhint}}\n\n### Circular dependencies\n\n{{index dependency, \"circular dependency\", \"require function\"}}\n\nA circular dependency is a situation where module A depends on B, and B also, directly or indirectly, depends on A. Many module systems simply forbid this because whichever order you choose for loading such modules, you cannot make sure that each module's dependencies have been loaded before it runs.\n\n((CommonJS modules)) allow a limited form of cyclic dependencies. As long as the modules don't access each other's interface until after they finish loading, cyclic dependencies are okay.\n\nThe `require` function given [earlier in this chapter](modules#require) supports this type of dependency cycle. Can you see how it handles cycles?\n\n{{hint\n\n{{index overriding, \"circular dependency\", \"exports object\"}}\n\nThe trick is that `require` adds the interface object for a module to its cache _before_ it starts loading the module. That way, if any `require` call made while it is running tries to load it, it is already known, and the current interface will be returned, rather than starting to load the module once more (which would eventually overflow the stack).\n\nhint}}\n"
        },
        {
          "name": "11_async.md",
          "type": "blob",
          "size": 49.1611328125,
          "content": "{{meta {load_files: [\"code/hangar2.js\", \"code/chapter/11_async.js\"], zip: \"node/html\"}}}\n\n# Asynchronous Programming\n\n{{quote {author: \"Laozi\", title: \"Tao Te Ching\", chapter: true}\n\nWho can wait quietly while the mud settles?\\\nWho can remain still until the moment of action?\n\nquote}}\n\n{{index \"Laozi\"}}\n\n{{figure {url: \"img/chapter_picture_11.jpg\", alt: \"Illustration showing two crows on a tree branch\", chapter: framed}}}\n\nThe central part of a computer, the part that carries out the individual steps that make up our programs, is called the _((processor))_. The programs we have seen so far will keep the processor busy until they have finished their work. The speed at which something like a loop that manipulates numbers can be executed depends pretty much entirely on the speed of the computer's processor and memory.\n\n{{index [memory, speed], [network, speed]}}\n\nBut many programs interact with things outside of the processor. For example, they may communicate over a computer network or request data from the ((hard disk))—which is a lot slower than getting it from memory.\n\nWhen such a thing is happening, it would be a shame to let the processor sit idle—there might be some other work it could do in the meantime. In part, this is handled by your operating system, which will switch the processor between multiple running programs. But that doesn't help when we want a _single_ program to be able to make progress while it is waiting for a network request.\n\n## Asynchronicity\n\n{{index \"synchronous programming\"}}\n\nIn a _synchronous_ programming model, things happen one at a time. When you call a function that performs a long-running action, it returns only when the action has finished and it can return the result. This stops your program for the time the action takes.\n\n{{index \"asynchronous programming\"}}\n\nAn _asynchronous_ model allows multiple things to happen at the same time. When you start an action, your program continues to run. When the action finishes, the program is informed and gets access to the result (for example, the data read from disk).\n\nWe can compare synchronous and asynchronous programming using a small example: a program that makes two requests over the ((network)) and then combines the results.\n\n{{index \"synchronous programming\"}}\n\nIn a synchronous environment, where the request function returns only after it has done its work, the easiest way to perform this task is to make the requests one after the other. This has the drawback that the second request will be started only when the first has finished. The total time taken will be at least the sum of the two response times.\n\n{{index parallelism}}\n\nThe solution to this problem, in a synchronous system, is to start additional ((thread))s of control. A _thread_ is another running program whose execution may be interleaved with other programs by the operating system—since most modern computers contain multiple processors, multiple threads may even run at the same time, on different processors. A second thread could start the second request, and then both threads wait for their results to come back, after which they resynchronize to combine their results.\n\n{{index CPU, blocking, \"asynchronous programming\", timeline, \"callback function\"}}\n\nIn the following diagram, the thick lines represent time the program spends running normally, and the thin lines represent time spent waiting for the network. In the synchronous model, the time taken by the network is _part_ of the timeline for a given thread of control. In the asynchronous model, starting a network action allows the program to continue running while the network communication happens alongside it, notifying the program when it is finished.\n\n{{figure {url: \"img/control-io.svg\", alt: \"Diagram of showing control flow in synchronous and asynchronous programs. The first part shows a synchronous program, where the program's active and waiting phases all happen on a single, sequential line. The second part shows a multi-threaded synchronous program, with two parallel lines, on which the waiting parts happen alongside each other, causing the program to finish faster. The last part shows an asynchronous program, where the multiple asynchronous actions branch off from the main program, which at some point stops, and then resumes whenever the first thing it was waiting for finishes.\",width: \"8cm\"}}}\n\n{{index [\"control flow\", asynchronous], \"asynchronous programming\", verbosity, performance}}\n\nAnother way to describe the difference is that waiting for actions to finish is _implicit_ in the synchronous model, while it is _explicit_—under our control—in the asynchronous one.\n\nAsynchronicity cuts both ways. It makes expressing programs that do not fit the straight-line model of control easier, but it can also make expressing programs that do follow a straight line more awkward. We'll see some ways to reduce this awkwardness later in the chapter.\n\nBoth prominent JavaScript programming platforms—((browser))s and ((Node.js))—make operations that might take a while asynchronous, rather than relying on ((thread))s. Since programming with threads is notoriously hard (understanding what a program does is much more difficult when it's doing multiple things at once), this is generally considered a good thing.\n\n## Callbacks\n\n{{indexsee [function, callback], \"callback function\"}}\n\nOne approach to ((asynchronous programming)) is to make functions that need to wait for something take an extra argument, a _((callback function))_. The asynchronous function starts a process, sets things up so that the callback function is called when the process finishes, and then returns.\n\n{{index \"setTimeout function\", waiting}}\n\nAs an example, the `setTimeout` function, available both in Node.js and in browsers, waits a given number of milliseconds and then calls a function.\n\n```{test: no}\nsetTimeout(() => console.log(\"Tick\"), 500);\n```\n\nWaiting is not generally important work, but it can be very useful when you need to arrange for something to happen at a certain time or check whether some action is taking longer than expected.\n\n{{index \"readTextFile function\"}}\n\nAnother example of a common asynchronous operation is reading a file from a device's storage. Imagine you have a function `readTextFile` that reads a file's content as a string and passes it to a callback function.\n\n```\nreadTextFile(\"shopping_list.txt\", content => {\n  console.log(`Shopping List:\\n${content}`);\n});\n// → Shopping List:\n// → Peanut butter\n// → Bananas\n```\n\nThe `readTextFile` function is not part of standard JavaScript. We will see how to read files in the browser and in Node.js in later chapters.\n\nPerforming multiple asynchronous actions in a row using callbacks means that you have to keep passing new functions to handle the ((continuation)) of the computation after the actions. An asynchronous function that compares two files and produces a boolean indicating whether their content is the same might look like this:\n\n```\nfunction compareFiles(fileA, fileB, callback) {\n  readTextFile(fileA, contentA => {\n    readTextFile(fileB, contentB => {\n      callback(contentA == contentB);\n    });\n  });\n}\n```\n\nThis style of programming is workable, but the indentation level increases with each asynchronous action because you end up in another function. Doing more complicated things, such as wrapping asynchronous actions in a loop, can get awkward.\n\nIn a way, asynchronicity is _contagious_. Any function that calls a function that works asynchronously must itself be asynchronous, using a callback or similar mechanism to deliver its result. Calling a callback is somewhat more involved and error prone than simply returning a value, so needing to structure large parts of your program that way is not great.\n\n## Promises\n\nA slightly different way to build an asynchronous program is to have asynchronous functions return an object that represents its (future) result instead of passing around callback functions. This way, such functions actually return something meaningful, and the shape of the program more closely resembles that of synchronous programs.\n\n{{index \"Promise class\", \"asynchronous programming\", \"resolving (a promise)\", \"then method\", \"callback function\"}}\n\nThis is what the standard class `Promise` is for. A _promise_ is a receipt representing a value that may not be available yet. It provides a `then` method that allows you to register a function that should be called when the action for which it is waiting finishes. When the promise is _resolved_, meaning its value becomes available, such functions (there can be multiple) are called with the result value. It is possible to call `then` on a promise that has already resolved—your function will still be called.\n\n{{index \"Promise.resolve function\"}}\n\nThe easiest way to create a promise is by calling `Promise.resolve`. This function ensures that the value you give it is wrapped in a promise. If it's already a promise, it is simply returned. Otherwise, you get a new promise that immediately resolves with your value as its result.\n\n```\nlet fifteen = Promise.resolve(15);\nfifteen.then(value => console.log(`Got ${value}`));\n// → Got 15\n```\n\n{{index \"Promise class\"}}\n\nTo create a promise that does not immediately resolve, you can use `Promise` as a constructor. It has a somewhat odd interface: the constructor expects a function as its argument, which it immediately calls, passing it a function that it can use to resolve the promise.\n\nFor example, this is how you could create a promise-based interface for the `readTextFile` function:\n\n{{index \"textFile function\"}}\n\n```\nfunction textFile(filename) {\n  return new Promise(resolve => {\n    readTextFile(filename, text => resolve(text));\n  });\n}\n\ntextFile(\"plans.txt\").then(console.log);\n```\n\nNote how, in contrast to callback-style functions, this asynchronous function returns a meaningful value—a promise to give you the contents of the file at some point in the future.\n\n{{index \"then method\"}}\n\nA useful thing about the `then` method is that it itself returns another promise. This one resolves to the value returned by the callback function or, if that returned value is a promise, to the value that promise resolves to. Thus, you can “chain” multiple calls to `then` together to set up a sequence of asynchronous actions.\n\nThis function, which reads a file full of filenames and returns the content of a random file in that list, shows this kind of asynchronous promise pipeline:\n\n```\nfunction randomFile(listFile) {\n  return textFile(listFile)\n    .then(content => content.trim().split(\"\\n\"))\n    .then(ls => ls[Math.floor(Math.random() * ls.length)])\n    .then(filename => textFile(filename));\n}\n```\n\nThe function returns the result of this chain of `then` calls. The initial promise fetches the list of files as a string. The first `then` call transforms that string into an array of lines, producing a new promise. The second `then` call picks a random line from that, producing a third promise that yields a single filename. The final `then` call reads this file, so the result of the function as a whole is a promise that returns the content of a random file.\n\nIn this code, the functions used in the first two `then` calls return a regular value that will immediately be passed into the promise returned by `then` when the function returns. The last `then` call returns a promise (`textFile(filename)`), making it an actual asynchronous step.\n\nIt would also have been possible to perform all these steps inside a single `then` callback, since only the last step is actually asynchronous. But the kind of `then` wrappers that only do some synchronous data transformation are often useful, such as when you want to return a promise that produces a processed version of some asynchronous result.\n\n```\nfunction jsonFile(filename) {\n  return textFile(filename).then(JSON.parse);\n}\n\njsonFile(\"package.json\").then(console.log);\n```\n\nGenerally, it is useful to think of a promise as a device that lets code ignore the question of when a value is going to arrive. A normal value has to actually exist before we can reference it. A promised value is a value that _might_ already be there or might appear at some point in the future. Computations defined in terms of promises, by wiring them together with `then` calls, are executed asynchronously as their inputs become available.\n\n## Failure\n\n{{index \"exception handling\"}}\n\nRegular JavaScript computations can fail by throwing an exception. Asynchronous computations often need something like that. A network request may fail, a file may not exist, or some code that is part of the asynchronous computation may throw an exception.\n\n{{index \"callback function\", error}}\n\nOne of the most pressing problems with the callback style of asynchronous programming is that it makes it extremely difficult to ensure failures are properly reported to the callbacks.\n\nA common convention is to use the first argument to the callback to indicate that the action failed, and the second to pass the value produced by the action when it was successful.\n\n```\nsomeAsyncFunction((error, value) => {\n  if (error) handleError(error);\n  else processValue(value);\n});\n```\n\nSuch callback functions must always check whether they received an exception and make sure that any problems they cause, including exceptions thrown by functions they call, are caught and given to the right function.\n\n{{index \"rejecting (a promise)\", \"resolving (a promise)\", \"then method\"}}\n\nPromises make this easier. They can be either resolved (the action finished successfully) or rejected (it failed). Resolve handlers (as registered with `then`) are called only when the action is successful, and rejections are propagated to the new promise returned by `then`. When a handler throws an exception, this automatically causes the promise produced by its `then` call to be rejected. If any element in a chain of asynchronous actions fails, the outcome of the whole chain is marked as rejected, and no success handlers are called beyond the point where it failed.\n\n{{index \"Promise.reject function\", \"Promise class\"}}\n\nMuch like resolving a promise provides a value, rejecting one also provides a value, usually called the _reason_ of the rejection. When an exception in a handler function causes the rejection, the exception value is used as the reason. Similarly, when a handler returns a promise that is rejected, that rejection flows into the next promise. There's a `Promise.reject` function that creates a new, immediately rejected promise.\n\n{{index \"catch method\"}}\n\nTo explicitly handle such rejections, promises have a `catch` method that registers a handler to be called when the promise is rejected, similar to how `then` handlers handle normal resolution. It's also very much like `then` in that it returns a new promise, which resolves to the original promise's value when that resolves normally and to the result of the `catch` handler otherwise. If a `catch` handler throws an error, the new promise is also rejected.\n\n{{index \"then method\"}}\n\nAs a shorthand, `then` also accepts a rejection handler as a second argument, so you can install both types of handlers in a single method call: `.then(acceptHandler, rejectHandler)`.\n\nA function passed to the `Promise` constructor receives a second argument, alongside the resolve function, which it can use to reject the new promise.\n\n{{index \"textFile function\"}}\n\nWhen our `readTextFile` function encounters a problem, it passes the error to its callback function as a second argument. Our `textFile` wrapper should actually check that argument so that a failure causes the promise it returns to be rejected.\n\n```{includeCode: true}\nfunction textFile(filename) {\n  return new Promise((resolve, reject) => {\n    readTextFile(filename, (text, error) => {\n      if (error) reject(error);\n      else resolve(text);\n    });\n  });\n}\n```\n\nThe chains of promise values created by calls to `then` and `catch` thus form a pipeline through which asynchronous values or failures move. Since such chains are created by registering handlers, each link has a success handler or a rejection handler (or both) associated with it. Handlers that don't match the type of outcome (success or failure) are ignored. Handlers that do match are called, and their outcome determines what kind of value comes next—success when they return a non-promise value, rejection when they throw an exception, and the outcome of the promise when they return a promise.\n\n```{test: no}\nnew Promise((_, reject) => reject(new Error(\"Fail\")))\n  .then(value => console.log(\"Handler 1:\", value))\n  .catch(reason => {\n    console.log(\"Caught failure \" + reason);\n    return \"nothing\";\n  })\n  .then(value => console.log(\"Handler 2:\", value));\n// → Caught failure Error: Fail\n// → Handler 2: nothing\n```\n\nThe first `then` handler function isn't called because at that point of the pipeline the promise holds a rejection. The `catch` handler handles that rejection and returns a value, which is given to the second `then` handler function.\n\n{{index \"uncaught exception\", \"exception handling\"}}\n\nMuch like an uncaught exception is handled by the environment, JavaScript environments can detect when a promise rejection isn't handled and will report this as an error.\n\n## Carla\n\n{{index \"Carla the crow\"}}\n\nIt's a sunny day in Berlin. The runway of the old, decommissioned airport is teeming with cyclists and inline skaters. In the grass near a garbage container, a flock of crows noisily mills about, trying to convince a group of tourists to part with their sandwiches.\n\nOne of the crows stands out—a large scruffy female with a few white feathers in her right wing. She is baiting people with a skill and confidence that suggest she's been doing this for a long time. When an elderly man is distracted by the antics of another crow, she casually swoops in, snatches his half-eaten bun from his hand, and sails away.\n\nContrary to the rest of the group, who look like they are happy to spend the day goofing around here, the large crow looks purposeful. Carrying her loot, she flies straight toward the roof of the hangar building, disappearing into an air vent.\n\nInside the building, you can hear an odd tapping sound—soft, but persistent. It comes from a narrow space under the roof of an unfinished stairwell. The crow is sitting there, surrounded by her stolen snacks, half a dozen smartphones (several of which are turned on), and a mess of cables. She rapidly taps the screen of one of the phones with her beak. Words are appearing on it. If you didn't know better, you'd think she was typing.\n\nThis crow is known to her peers as “cāāw-krö”. But since those sounds are poorly suited for human vocal chords, we'll refer to her as Carla.\n\nCarla is a somewhat peculiar crow. In her youth, she was fascinated by human language, eavesdropping on people until she had a good grasp of what they were saying. Later in life, her interest shifted to human technology, and she started stealing phones to study them. Her current project is learning to program. The text she is typing in her hidden lab is, in fact, a piece of asynchronous JavaScript code.\n\n## Breaking In\n\n{{index \"Carla the crow\"}}\n\nCarla loves the internet. Annoyingly, the phone she is working on is about to run out of prepaid data. The building has a wireless network, but it requires a code to access.\n\nFortunately, the wireless routers in the building are 20 years old and poorly secured. Doing some research, Carla finds out that the network authentication mechanism has a flaw she can use. When joining the network, a device must send along the correct six-digit passcode. The access point will reply with a success or failure message depending on whether the right code is provided. However, when sending a partial code (say, only three digits), the response is different based on whether those digits are the correct start of the code or not. Sending incorrect numbers immediately returns a failure message. When sending the correct ones, the access point waits for more digits.\n\nThis makes it possible to greatly speed up the guessing of the number. Carla can find the first digit by trying each number in turn, until she finds one that doesn't immediately return failure. Having one digit, she can find the second digit in the same way, and so on, until she knows the entire passcode.\n\nAssume Carla has a `joinWifi` function. Given the network name and the passcode (as a string), the function tries to join the network, returning a promise that resolves if successful and rejects if the authentication failed. The first thing she needs is a way to wrap a promise so that it automatically rejects after it takes too much time, to allow the program to quickly move on if the access point doesn't respond.\n\n```{includeCode: true}\nfunction withTimeout(promise, time) {\n  return new Promise((resolve, reject) => {\n    promise.then(resolve, reject);\n    setTimeout(() => reject(\"Timed out\"), time);\n  });\n}\n```\n\nThis makes use of the fact that a promise can be resolved or rejected only once. If the promise given as its argument resolves or rejects first, that result will be the result of the promise returned by `withTimeout`. If, on the other hand, the `setTimeout` fires first, rejecting the promise, any further resolve or reject calls are ignored.\n\nTo find the whole passcode, the program needs to repeatedly look for the next digit by trying each digit. If authentication succeeds, we know we have found what we are looking for. If it immediately fails, we know that digit was wrong and must try the next digit. If the request times out, we have found another correct digit and must continue by adding another digit.\n\nBecause you cannot wait for a promise inside a `for` loop, Carla uses a recursive function to drive this process. On each call, this function gets the code as we know it so far, as well as the next digit to try. Depending on what happens, it may return a finished code or call through to itself, to either start cracking the next position in the code or to try again with another digit.\n\n```{includeCode: true}\nfunction crackPasscode(networkID) {\n  function nextDigit(code, digit) {\n    let newCode = code + digit;\n    return withTimeout(joinWifi(networkID, newCode), 50)\n      .then(() => newCode)\n      .catch(failure => {\n        if (failure == \"Timed out\") {\n          return nextDigit(newCode, 0);\n        } else if (digit < 9) {\n          return nextDigit(code, digit + 1);\n        } else {\n          throw failure;\n        }\n      });\n  }\n  return nextDigit(\"\", 0);\n}\n```\n\nThe access point tends to respond to bad authentication requests in about 20 milliseconds, so to be safe, this function waits for 50 milliseconds before timing out a request.\n\n```\ncrackPasscode(\"HANGAR 2\").then(console.log);\n// → 555555\n```\n\nCarla tilts her head and sighs. This would have been more satisfying if the code had been a bit harder to guess.\n\n## Async functions\n\n{{index \"Promise class\", recursion}}\n\nEven with promises, this kind of asynchronous code is annoying to write. Promises often need to be tied together in verbose, arbitrary-looking ways. To create an asynchronous loop, Carla was forced to introduce a recursive function.\n\n{{index \"synchronous programming\", \"asynchronous programming\"}}\n\nThe thing the cracking function actually does is completely linear—it always waits for the previous action to complete before starting the next one. In a synchronous programming model, it'd be more straightforward to express.\n\n{{index \"async function\", \"await keyword\"}}\n\nThe good news is that JavaScript allows you to write pseudosynchronous code to describe asynchronous computation. An `async` function implicitly returns a promise and can, in its body, `await` other promises in a way that _looks_ synchronous.\n\n{{index \"findInStorage function\"}}\n\nWe can rewrite `crackPasscode` like this:\n\n```\nasync function crackPasscode(networkID) {\n  for (let code = \"\";;) {\n    for (let digit = 0;; digit++) {\n      let newCode = code + digit;\n      try {\n        await withTimeout(joinWifi(networkID, newCode), 50);\n        return newCode;\n      } catch (failure) {\n        if (failure == \"Timed out\") {\n          code = newCode;\n          break;\n        } else if (digit == 9) {\n          throw failure;\n        }\n      }\n    }\n  }\n}\n```\n\nThis version more clearly shows the double loop structure of the function (the inner loop tries digit 0 to 9 and the outer loop adds digits to the passcode).\n\n{{index \"async function\", \"return keyword\", \"exception handling\"}}\n\nAn `async` function is marked by the word `async` before the `function` keyword. Methods can also be made `async` by writing `async` before their name. When such a function or method is called, it returns a promise. As soon as the function returns something, that promise is resolved. If the body throws an exception, the promise is rejected.\n\n{{index \"await keyword\", [\"control flow\", asynchronous]}}\n\nInside an `async` function, the word `await` can be put in front of an expression to wait for a promise to resolve and only then continue the execution of the function. If the promise rejects, an exception is raised at the point of the `await`.\n\nSuch a function no longer runs from start to completion in one go like a regular JavaScript function. Instead, it can be _frozen_ at any point that has an `await` and can be resumed at a later time.\n\nFor most asynchronous code, this notation is more convenient than directly using promises. You do still need an understanding of promises, since in many cases you'll still interact with them directly. But when wiring them together, `async` functions are generally more pleasant to write than chains of `then` calls.\n\n{{id generator}}\n\n## Generators\n\n{{index \"async function\"}}\n\nThis ability of functions to be paused and then resumed again is not exclusive to `async` functions. JavaScript also has a feature called _((generator))_ functions. These are similar, but without the promises.\n\nWhen you define a function with `function*` (placing an asterisk after the word `function`), it becomes a generator. When you call a generator, it returns an ((iterator)), which we already saw in [Chapter ?](object).\n\n```\nfunction* powers(n) {\n  for (let current = n;; current *= n) {\n    yield current;\n  }\n}\n\nfor (let power of powers(3)) {\n  if (power > 50) break;\n  console.log(power);\n}\n// → 3\n// → 9\n// → 27\n```\n\n{{index \"next method\", \"yield keyword\"}}\n\nInitially, when you call `powers`, the function is frozen at its start. Every time you call `next` on the iterator, the function runs until it hits a `yield` expression, which pauses it and causes the yielded value to become the next value produced by the iterator. When the function returns (the one in the example never does), the iterator is done.\n\nWriting iterators is often much easier when you use generator functions. The iterator for the `Group` class (from the exercise in [Chapter ?](object#group_iterator)) can be written with this generator:\n\n{{index \"Group class\"}}\n\n```\nGroup.prototype[Symbol.iterator] = function*() {\n  for (let i = 0; i < this.members.length; i++) {\n    yield this.members[i];\n  }\n};\n```\n\n```{hidden: true, includeCode: true}\nclass Group {\n  constructor() { this.members = []; }\n  add(m) { this.members.add(m); }\n}\n```\n\n{{index [state, in iterator]}}\n\nThere's no longer a need to create an object to hold the iteration state—generators automatically save their local state every time they yield.\n\nSuch `yield` expressions may occur only directly in the generator function itself and not in an inner function you define inside of it. The state a generator saves, when yielding, is only its _local_ environment and the position where it yielded.\n\n{{index \"await keyword\"}}\n\nAn `async` function is a special type of generator. It produces a promise when called, which is resolved when it returns (finishes) and rejected when it throws an exception. Whenever it yields (awaits) a promise, the result of that promise (value or thrown exception) is the result of the `await` expression.\n\n## A Corvid Art Project\n\n{{index \"Carla the crow\"}}\n\nOne morning, Carla wakes up to unfamiliar noise from the tarmac outside of her hangar. Hopping onto the edge of the roof, she sees the humans are setting up for something. There's a lot of electric cabling, a stage, and some kind of big black wall being built up.\n\nBeing a curious crow, Carla takes a closer look at the wall. It appears to consist of a number of large glass-fronted devices wired up to cables. On the back, the devices say “LedTec SIG-5030”.\n\nA quick internet search turns up a user manual for these devices. They appear to be traffic signs, with a programmable matrix of amber LED lights. The intent of the humans is probably to display some kind of information on them during their event. Interestingly, the screens can be programmed over a wireless network. Could it be they are connected to the building's local network?\n\nEach device on a network gets an _IP address_, which other devices can use to send it messages. We talk more about that in [Chapter ?](browser). Carla notices that her own phones all get addresses like `10.0.0.20` or `10.0.0.33`. It might be worth trying to send messages to all such addresses and see if any one of them responds to the interface described in the manual for the signs.\n\n[Chapter ?](http) shows how to make real requests on real networks. In this chapter, we'll use a simplified dummy function called `request` for network communication. This function takes two arguments—a network address and a message, which may be anything that can be sent as JSON—and returns a promise that either resolves to a response from the machine at the given address, or rejects if there was a problem.\n\nAccording to the manual, you can change what is displayed on a SIG-5030 sign by sending it a message with content like `{\"command\": \"display\", \"data\": [0, 0, 3, …]}`, where `data` holds one number per LED dot, providing its brightness—0 means off, 3 means maximum brightness. Each sign is 50 lights wide and 30 lights high, so an update command should send 1,500 numbers.\n\nThis code sends a display update message to all addresses on the local network, to see what sticks.  Each of the numbers in an IP address can go from 0 to 255. In the data it sends, it activates a number of lights corresponding to the network address's last number.\n\n```\nfor (let addr = 1; addr < 256; addr++) {\n  let data = [];\n  for (let n = 0; n < 1500; n++) {\n    data.push(n < addr ? 3 : 0);\n  }\n  let ip = `10.0.0.${addr}`;\n  request(ip, {command: \"display\", data})\n    .then(() => console.log(`Request to ${ip} accepted`))\n    .catch(() => {});\n}\n```\n\nSince most of these addresses won't exist or will not accept such messages, the `catch` call makes sure network errors don't crash the program. The requests are all sent out immediately, without waiting for other requests to finish, in order to not waste time when some of the machines don't answer.\n\nHaving fired off her network scan, Carla heads back outside to see the result. To her delight, all of the screens are now showing a stripe of light in their upper-left corners. They _are_ on the local network, and they _do_ accept commands. She quickly notes the numbers shown on each screen. There are nine screens, arranged three high and three wide. They have the following network addresses:\n\n```{includeCode: true}\nconst screenAddresses = [\n  \"10.0.0.44\", \"10.0.0.45\", \"10.0.0.41\",\n  \"10.0.0.31\", \"10.0.0.40\", \"10.0.0.42\",\n  \"10.0.0.48\", \"10.0.0.47\", \"10.0.0.46\"\n];\n```\n\nNow this opens up possibilities for all kinds of shenanigans. She could show “crows rule, humans drool” on the wall in giant letters. But that feels a bit crude. Instead, she plans to show a video of a flying crow covering all of the screens at night.\n\nCarla finds a fitting video clip, in which a second and a half of footage can be repeated to create a looping video showing a crow's wingbeat. To fit the nine screens (each of which can show 50×30 pixels), Carla cuts and resizes the videos to get a series of 150×90 images, 10 per second. Those are then each cut into nine rectangles, and processed so that the dark spots on the video (where the crow is) show a bright light, and the light spots (no crow) are left dark, which should create the effect of an amber crow flying against a black background.\n\nShe has set up the `clipImages` variable to hold an array of frames, where each frame is represented with an array of nine sets of pixels—one for each screen—in the format that the signs expect.\n\nTo display a single frame of the video, Carla needs to send a request to all the screens at once. But she also needs to wait for the result of these requests, both in order to not start sending the next frame before the current one has been properly sent and in order to notice when requests are failing.\n\n{{index \"Promise.all function\"}}\n\n`Promise` has a static method `all` that can be used to convert an array of promises into a single promise that resolves to an array of results. This provides a convenient way to have some asynchronous actions happen alongside each other, wait for them all to finish, and then do something with their results (or at least wait for them to make sure they don't fail).\n\n```{includeCode: true}\nfunction displayFrame(frame) {\n  return Promise.all(frame.map((data, i) => {\n    return request(screenAddresses[i], {\n      command: \"display\",\n      data\n    });\n  }));\n}\n```\n\nThis maps over the images in `frame` (which is an array of display data arrays) to create an array\nof request promises. It then returns a promise that combines all of those.\n\nIn order to be able to stop a playing video, the process is wrapped in a class. This class has an asynchronous `play` method that returns a promise that resolves only when the playback is stopped again via the `stop` method.\n\n```{includeCode: true}\nfunction wait(time) {\n  return new Promise(accept => setTimeout(accept, time));\n}\n\nclass VideoPlayer {\n  constructor(frames, frameTime) {\n    this.frames = frames;\n    this.frameTime = frameTime;\n    this.stopped = true;\n  }\n\n  async play() {\n    this.stopped = false;\n    for (let i = 0; !this.stopped; i++) {\n      let nextFrame = wait(this.frameTime);\n      await displayFrame(this.frames[i % this.frames.length]);\n      await nextFrame;\n    }\n  }\n\n  stop() {\n    this.stopped = true;\n  }\n}\n```\n\nThe `wait` function wraps `setTimeout` in a promise that resolves after the given number of milliseconds. This is useful for controlling the speed of the playback.\n\n```{startCode: true}\nlet video = new VideoPlayer(clipImages, 100);\nvideo.play().catch(e => {\n  console.log(\"Playback failed: \" + e);\n});\nsetTimeout(() => video.stop(), 15000);\n```\n\nFor the entire week that the screen wall stands, every evening, when it is dark, a huge glowing orange bird mysteriously appears on it.\n\n## The event loop\n\n{{index \"asynchronous programming\", scheduling, \"event loop\", timeline}}\n\nAn asynchronous program starts by running its main script, which will often set up callbacks to be called later. That main script, as well as the callbacks, run to completion in one piece, uninterrupted. But between them, the program may sit idle, waiting for something to happen.\n\n{{index \"setTimeout function\"}}\n\nSo callbacks are not directly called by the code that scheduled them. If I call `setTimeout` from within a function, that function will have returned by the time the callback function is called. And when the callback returns, control does not go back to the function that scheduled it.\n\n{{index \"Promise class\", \"catch keyword\", \"exception handling\"}}\n\nAsynchronous behavior happens on its own empty function ((call stack)). This is one of the reasons that, without promises, managing exceptions across asynchronous code is so hard. Since each callback starts with a mostly empty stack, your `catch` handlers won't be on the stack when they throw an exception.\n\n```\ntry {\n  setTimeout(() => {\n    throw new Error(\"Woosh\");\n  }, 20);\n} catch (e) {\n  // This will not run\n  console.log(\"Caught\", e);\n}\n```\n\n{{index thread, queue}}\n\nNo matter how closely together events—such as timeouts or incoming requests—happen, a JavaScript environment will run only one program at a time. You can think of this as it running a big loop _around_ your program, called the _event loop_. When there's nothing to be done, that loop is paused. But as events come in, they are added to a queue, and their code is executed one after the other. Because no two things run at the same time, slow-running code can delay the handling of other events.\n\nThis example sets a timeout but then dallies until after the timeout's intended point of time, causing the timeout to be late.\n\n```\nlet start = Date.now();\nsetTimeout(() => {\n  console.log(\"Timeout ran at\", Date.now() - start);\n}, 20);\nwhile (Date.now() < start + 50) {}\nconsole.log(\"Wasted time until\", Date.now() - start);\n// → Wasted time until 50\n// → Timeout ran at 55\n```\n\n{{index \"resolving (a promise)\", \"rejecting (a promise)\", \"Promise class\"}}\n\nPromises always resolve or reject as a new event. Even if a promise is already resolved, waiting for it will cause your callback to run after the current script finishes, rather than right away.\n\n```\nPromise.resolve(\"Done\").then(console.log);\nconsole.log(\"Me first!\");\n// → Me first!\n// → Done\n```\n\nIn later chapters we'll see various other types of events that run on the event loop.\n\n## Asynchronous bugs\n\n{{index \"asynchronous programming\", [state, transitions]}}\n\nWhen your program runs synchronously, in a single go, there are no state changes happening except those that the program itself makes. For asynchronous programs this is different—they may have _gaps_ in their execution during which other code can run.\n\nLet's look at an example. This is a function that tries to report the size of each file in an array of files, making sure to read them all at the same time rather than in sequence.\n\n{{index \"fileSizes function\"}}\n\n```{includeCode: true}\nasync function fileSizes(files) {\n  let list = \"\";\n  await Promise.all(files.map(async fileName => {\n    list += fileName + \": \" +\n      (await textFile(fileName)).length + \"\\n\";\n  }));\n  return list;\n}\n```\n\n{{index \"async function\"}}\n\nThe `async fileName =>` part shows how ((arrow function))s can also be made `async` by putting the word `async` in front of them.\n\n{{index \"Promise.all function\"}}\n\nThe code doesn't immediately look suspicious... it maps the `async` arrow function over the array of names, creating an array of promises, and then uses `Promise.all` to wait for all of these before returning the list they build up.\n\nBut this program is entirely broken. It'll always return only a single line of output, listing the file that took the longest to read.\n\n{{if interactive\n\n```\nfileSizes([\"plans.txt\", \"shopping_list.txt\"])\n  .then(console.log);\n```\n\nif}}\n\nCan you work out why?\n\n{{index \"+= operator\"}}\n\nThe problem lies in the `+=` operator, which takes the _current_ value of `list` at the time the statement starts executing and then, when the `await` finishes, sets the `list` binding to be that value plus the added string.\n\n{{index \"await keyword\"}}\n\nBut between the time the statement starts executing and the time it finishes, there's an asynchronous gap. The `map` expression runs before anything has been added to the list, so each of the `+=` operators starts from an empty string and ends up, when its storage retrieval finishes, setting `list` to the result of adding its line to the empty string.\n\n{{index \"side effect\"}}\n\nThis could have easily been avoided by returning the lines from the mapped promises and calling `join` on the result of `Promise.all`, instead of building up the list by changing a binding. As usual, computing new values is less error prone than changing existing values.\n\n{{index \"fileSizes function\"}}\n\n```\nasync function fileSizes(files) {\n  let lines = files.map(async fileName => {\n    return fileName + \": \" +\n      (await textFile(fileName)).length;\n  });\n  return (await Promise.all(lines)).join(\"\\n\");\n}\n```\n\nMistakes like this are easy to make, especially when using `await`, and you should be aware of where the gaps in your code occur. An advantage of JavaScript's _explicit_ asynchronicity (whether through callbacks, promises, or `await`) is that spotting these gaps is relatively easy.\n\n## Summary\n\nAsynchronous programming makes it possible to express waiting for long-running actions without freezing the whole program. JavaScript environments typically implement this style of programming using callbacks, functions that are called when the actions complete. An event loop schedules such callbacks to be called when appropriate, one after the other, so that their execution does not overlap.\n\nProgramming asynchronously is made easier by promises, objects that represent actions that might complete in the future, and `async` functions, which allow you to write an asynchronous program as if it were synchronous.\n\n## Exercises\n\n### Quiet Times\n\n{{index \"quiet times (exercise)\", \"security camera\", \"Carla the crow\", \"async function\"}}\n\nThere's a security camera near Carla's lab that's activated by a motion sensor. It is connected to the network and starts sending out a video stream when it is active. Because she'd rather not be discovered, Carla has set up a system that notices this kind of wireless network traffic and turns on a light in her lair whenever there is activity outside, so she knows when to keep quiet.\n\n{{index \"Date class\", \"Date.now function\", timestamp}}\n\nShe's also been logging the times at which the camera is tripped for a while and wants to use this information to visualize which times, in an average week, tend to be quiet and which tend to be busy. The log is stored in files holding one time stamp number (as returned by `Date.now()`) per line.\n\n```{lang: null}\n1695709940692\n1695701068331\n1695701189163\n```\n\nThe `\"camera_logs.txt\"` file holds a list of logfiles. Write an asynchronous function `activityTable(day)` that for a given day of the week returns an array of 24 numbers, one for each hour of the day, that hold the number of camera network traffic observations seen in that hour of the day. Days are identified by number using the system used by `Date.getDay`, where Sunday is 0 and Saturday is 6.\n\nThe `activityGraph` function, provided by the sandbox, summarizes such a table into a string.\n\n{{index \"textFile function\"}}\n\nTo read the files, use the `textFile` function defined earlier—given a filename, it returns a promise that resolves to the file's content. Remember that `new Date(timestamp)` creates a `Date` object for that time, which has `getDay` and `getHours` methods returning the day of the week and the hour of the day.\n\nBoth types of files—the list of logfiles and the logfiles themselves—have each piece of data on its own line, separated by newline (`\"\\n\"`) characters.\n\n{{if interactive\n\n```{test: no}\nasync function activityTable(day) {\n  let logFileList = await textFile(\"camera_logs.txt\");\n  // Your code here\n}\n\nactivityTable(1)\n  .then(table => console.log(activityGraph(table)));\n```\n\nif}}\n\n{{hint\n\n{{index \"quiet times (exercise)\", \"split method\", \"textFile function\", \"Date class\"}}\n\nYou will need to convert the content of these files to an array. The easiest way to do that is to use the `split` method on the string produced by `textFile`. Note that for the logfiles, that will still give you an array of strings, which you have to convert to numbers before passing them to `new Date`.\n\nSummarizing all the time points into a table of hours can be done by creating a table (array) that holds a number for each hour in the day. You can then loop over all the timestamps (over the logfiles and the numbers in every logfile) and for each one, if it happened on the correct day, take the hour it occurred in, and add one to the corresponding number in the table.\n\n{{index \"async function\", \"await keyword\", \"Promise class\"}}\n\nMake sure you use `await` on the result of asynchronous functions before doing anything with it, or you'll end up with a `Promise` where you expected a string.\n\nhint}}\n\n\n### Real Promises\n\n{{index \"real promises (exercise)\", \"Promise class\"}}\n\nRewrite the function from the previous exercise without `async`/`await`, using plain `Promise` methods.\n\n{{if interactive\n\n```{test: no}\nfunction activityTable(day) {\n  // Your code here\n}\n\nactivityTable(6)\n  .then(table => console.log(activityGraph(table)));\n```\n\nif}}\n\n{{index \"async function\", \"await keyword\", performance}}\n\nIn this style, using `Promise.all` will be more convenient than trying to model a loop over the logfiles. In the `async` function, just using `await` in a loop is simpler. If reading a file takes some time, which of these two approaches will take the least time to run?\n\n{{index \"rejecting (a promise)\"}}\n\nIf one of the files listed in the file list has a typo, and reading it fails, how does that failure end up in the `Promise` object that your function returns?\n\n{{hint\n\n{{index \"real promises (exercise)\", \"then method\", \"textFile function\", \"Promise.all function\"}}\n\nThe most straightforward approach to writing this function is to use a chain of `then` calls. The first promise is produced by reading the list of logfiles. The first callback can split this list and map `textFile` over it to get an array of promises to pass to `Promise.all`. It can return the object returned by `Promise.all`, so that whatever that returns becomes the result of the return value of this first `then`.\n\n{{index \"asynchronous programming\"}}\n\nWe now have a promise that returns an array of logfiles. We can call `then` again on that, and put the timestamp-counting logic in there. Something like this:\n\n```{test: no}\nfunction activityTable(day) {\n  return textFile(\"camera_logs.txt\").then(files => {\n    return Promise.all(files.split(\"\\n\").map(textFile));\n  }).then(logs => {\n    // analyze...\n  });\n}\n```\n\nOr you could, for even better work scheduling, put the analysis of each file inside of the `Promise.all`, so that that work can be started for the first file that comes back from disk, even before the other files come back.\n\n```{test: no}\nfunction activityTable(day) {\n  let table = []; // init...\n  return textFile(\"camera_logs.txt\").then(files => {\n    return Promise.all(files.split(\"\\n\").map(name => {\n      return textFile(name).then(log => {\n        // analyze...\n      });\n    }));\n  }).then(() => table);\n}\n```\n\n{{index \"await keyword\", scheduling}}\n\nThis shows that the way you structure your promises can have a real effect on the way the work is scheduled. A simple loop with `await` in it will make the process completely linear—it waits for each file to load before proceeding. `Promise.all` makes it possible for multiple tasks to conceptually be worked on at the same time, allowing them to make progress while files are still being loaded. This can be faster, but it also makes the order in which things will happen less predictable. In this case, we're only going to be incrementing numbers in a table, which isn't hard to do in a safe way. For other kinds of problems, it may be a lot more difficult.\n\n{{index \"rejecting (a promise)\", \"then method\"}}\n\nWhen a file in the list doesn't exist, the promise returned by `textFile` will be rejected. Because `Promise.all` rejects if any of the promises given to it fail, the return value of the callback given to the first `then` will also be a rejected promise. That makes the promise returned by `then` fail, so the callback given to the second `then` isn't even called, and a rejected promise is returned from the function.\n\nhint}}\n\n### Building Promise.all\n\n{{index \"Promise class\", \"Promise.all function\", \"building Promise.all (exercise)\"}}\n\nAs we saw, given an array of ((promise))s, `Promise.all` returns a promise that waits for all of the promises in the array to finish. It then succeeds, yielding an array of result values. If a promise in the array fails, the promise returned by `all` fails too, passing on the failure reason from the failing promise.\n\nImplement something like this yourself as a regular function called `Promise_all`.\n\nRemember that after a promise has succeeded or failed, it can't succeed or fail again, and further calls to the functions that resolve it are ignored. This can simplify the way you handle a failure of your promise.\n\n{{if interactive\n\n```{test: no}\nfunction Promise_all(promises) {\n  return new Promise((resolve, reject) => {\n    // Your code here.\n  });\n}\n\n// Test code.\nPromise_all([]).then(array => {\n  console.log(\"This should be []:\", array);\n});\nfunction soon(val) {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(val), Math.random() * 500);\n  });\n}\nPromise_all([soon(1), soon(2), soon(3)]).then(array => {\n  console.log(\"This should be [1, 2, 3]:\", array);\n});\nPromise_all([soon(1), Promise.reject(\"X\"), soon(3)])\n  .then(array => {\n    console.log(\"We should not get here\");\n  })\n  .catch(error => {\n    if (error != \"X\") {\n      console.log(\"Unexpected failure:\", error);\n    }\n  });\n```\n\nif}}\n\n{{hint\n\n{{index \"Promise.all function\", \"Promise class\", \"then method\", \"building Promise.all (exercise)\"}}\n\nThe function passed to the `Promise` constructor will have to call `then` on each of the promises in the given array. When one of them succeeds, two things need to happen. The resulting value needs to be stored in the correct position of a result array, and we must check whether this was the last pending ((promise)) and finish our own promise if it was.\n\n{{index \"counter variable\"}}\n\nThe latter can be done with a counter that is initialized to the length of the input array and from which we subtract 1 every time a promise succeeds. When it reaches 0, we are done. Make sure you take into account the situation where the input array is empty (and thus no promise will ever resolve).\n\nHandling failure requires some thought but turns out to be extremely simple. Just pass the `reject` function of the wrapping promise to each of the promises in the array as a `catch` handler or as a second argument to `then` so that a failure in one of them triggers the rejection of the whole wrapper promise.\n\nhint}}\n"
        },
        {
          "name": "12_language.md",
          "type": "blob",
          "size": 28.9052734375,
          "content": "{{meta {load_files: [\"code/chapter/12_language.js\"], zip: \"node/html\"}}}\n\n# Project: A Programming Language\n\n{{quote {author: \"Hal Abelson and Gerald Sussman\", title: \"Structure and Interpretation of Computer Programs\", chapter: true}\n\nThe evaluator, which determines the meaning of expressions in a programming language, is just another program.\n\nquote}}\n\n{{index \"Abelson, Hal\", \"Sussman, Gerald\", SICP, \"project chapter\"}}\n\n{{figure {url: \"img/chapter_picture_12.jpg\", alt: \"Illustration showing an egg with holes in it, showing smaller eggs inside, which in turn have even smaller eggs in them, and so on\", chapter: \"framed\"}}}\n\nBuilding your own ((programming language)) is surprisingly easy (as long as you do not aim too high) and very enlightening.\n\nThe main thing I want to show in this chapter is that there's no ((magic)) involved in building a programming language. I've often felt that some human inventions were so immensely clever and complicated that I'd never be able to understand them. But with a little reading and experimenting, they often turn out to be quite mundane.\n\n{{index \"Egg language\", [abstraction, \"in Egg\"]}}\n\nWe will build a programming language called Egg. It will be a tiny, simple language—but one that is powerful enough to express any computation you can think of. It will allow simple ((abstraction)) based on ((function))s.\n\n{{id parsing}}\n\n## Parsing\n\n{{index parsing, validation, [syntax, \"of Egg\"]}}\n\nThe most immediately visible part of a programming language is its _syntax_, or notation. A _parser_ is a program that reads a piece of text and produces a data structure that reflects the structure of the program contained in that text. If the text does not form a valid program, the parser should point out the error.\n\n{{index \"special form\", [function, application]}}\n\nOur language will have a simple and uniform syntax. Everything in Egg is an ((expression)). An expression can be the name of a binding, a number, a string, or an _application_. Applications are used for function calls but also for constructs such as `if` or `while`.\n\n{{index \"double-quote character\", parsing, [escaping, \"in strings\"], [whitespace, syntax]}}\n\nTo keep the parser simple, strings in Egg do not support anything like backslash escapes. A string is simply a sequence of characters that are not double quotes, wrapped in double quotes. A number is a sequence of digits. Binding names can consist of any character that is not whitespace and that does not have a special meaning in the syntax.\n\n{{index \"comma character\", [parentheses, arguments]}}\n\nApplications are written the way they are in JavaScript, by putting parentheses after an expression and having any number of ((argument))s between those parentheses, separated by commas.\n\n```{lang: null}\ndo(define(x, 10),\n   if(>(x, 5),\n      print(\"large\"),\n      print(\"small\")))\n```\n\n{{index block, [syntax, \"of Egg\"]}}\n\nThe ((uniformity)) of the ((Egg language)) means that things that are ((operator))s in JavaScript (such as `>`) are normal bindings in this language, applied just like other ((function))s. Since the syntax has no concept of a block, we need a `do` construct to represent doing multiple things in sequence.\n\n{{index \"type property\", parsing, [\"data structure\", tree]}}\n\nThe data structure that the parser will use to describe a program consists of ((expression)) objects, each of which has a `type` property indicating the kind of expression it is and other properties to describe its content.\n\n{{index identifier}}\n\nExpressions of type `\"value\"` represent literal strings or numbers. Their `value` property contains the string or number value that they represent. Expressions of type `\"word\"` are used for identifiers (names). Such objects have a `name` property that holds the identifier's name as a string. Finally, `\"apply\"` expressions represent applications. They have an `operator` property that refers to the expression that is being applied, as well as an `args` property that holds an array of argument expressions.\n\nThe `>(x, 5)` part of the previous program would be represented like this:\n\n```{lang: \"json\"}\n{\n  type: \"apply\",\n  operator: {type: \"word\", name: \">\"},\n  args: [\n    {type: \"word\", name: \"x\"},\n    {type: \"value\", value: 5}\n  ]\n}\n```\n\n{{indexsee \"abstract syntax tree\", \"syntax tree\", [\"data structure\", tree]}}\n\nSuch a data structure is called a _((syntax tree))_. If you imagine the objects as dots and the links between them as lines between those dots, as shown in the following diagram, the structure has a ((tree))like shape. The fact that expressions contain other expressions, which in turn might contain more expressions, is similar to the way tree branches split and split again.\n\n{{figure {url: \"img/syntax_tree.svg\", alt: \"A diagram showing the structure of the syntax tree for the example program. The root is labeled 'do' and has two children, one labeled 'define' and one labeled 'if'. Those in turn have more children, describing their content.\", width: \"5cm\"}}}\n\n{{index parsing}}\n\nContrast this to the parser we wrote for the configuration file format in [Chapter ?](regexp#ini), which had a simple structure: it split the input into lines and handled those lines one at a time. There were only a few simple forms that a line was allowed to have.\n\n{{index recursion, [nesting, \"of expressions\"]}}\n\nHere we must find a different approach. Expressions are not separated into lines, and they have a recursive structure. Application expressions _contain_ other expressions.\n\n{{index elegance}}\n\nFortunately, this problem can be solved very well by writing a parser function that is recursive in a way that reflects the recursive nature of the language.\n\n{{index \"parseExpression function\", \"syntax tree\"}}\n\nWe define a function `parseExpression` that takes a string as input. It returns an object containing the data structure for the expression at the start of the string, along with the part of the string left after parsing this expression. When parsing subexpressions (the argument to an application, for example), this function can be called again, yielding the argument expression as well as the text that remains. This text may in turn contain more arguments or may be the closing parenthesis that ends the list of arguments.\n\nThis is the first part of the parser:\n\n```{includeCode: true}\nfunction parseExpression(program) {\n  program = skipSpace(program);\n  let match, expr;\n  if (match = /^\"([^\"]*)\"/.exec(program)) {\n    expr = {type: \"value\", value: match[1]};\n  } else if (match = /^\\d+\\b/.exec(program)) {\n    expr = {type: \"value\", value: Number(match[0])};\n  } else if (match = /^[^\\s(),#\"]+/.exec(program)) {\n    expr = {type: \"word\", name: match[0]};\n  } else {\n    throw new SyntaxError(\"Unexpected syntax: \" + program);\n  }\n\n  return parseApply(expr, program.slice(match[0].length));\n}\n\nfunction skipSpace(string) {\n  let first = string.search(/\\S/);\n  if (first == -1) return \"\";\n  return string.slice(first);\n}\n```\n\n{{index \"skipSpace function\", [whitespace, syntax]}}\n\nBecause Egg, like JavaScript, allows any amount of whitespace between its elements, we have to repeatedly cut the whitespace off the start of the program string. The `skipSpace` function helps with this.\n\n{{index \"literal expression\", \"SyntaxError type\"}}\n\nAfter skipping any leading space, `parseExpression` uses three ((regular expression))s to spot the three atomic elements that Egg supports: strings, numbers, and words. The parser constructs a different kind of data structure depending on which expression matches. If the input does not match one of these three forms, it is not a valid expression, and the parser throws an error. We use the `SyntaxError` constructor here. This is an exception class defined by the standard, like `Error`, but more specific.\n\n{{index \"parseApply function\"}}\n\nWe then cut off the part that was matched from the program string and pass that, along with the object for the expression, to `parseApply`, which checks whether the expression is an application. If so, it parses a parenthesized list of arguments.\n\n```{includeCode: true}\nfunction parseApply(expr, program) {\n  program = skipSpace(program);\n  if (program[0] != \"(\") {\n    return {expr: expr, rest: program};\n  }\n\n  program = skipSpace(program.slice(1));\n  expr = {type: \"apply\", operator: expr, args: []};\n  while (program[0] != \")\") {\n    let arg = parseExpression(program);\n    expr.args.push(arg.expr);\n    program = skipSpace(arg.rest);\n    if (program[0] == \",\") {\n      program = skipSpace(program.slice(1));\n    } else if (program[0] != \")\") {\n      throw new SyntaxError(\"Expected ',' or ')'\");\n    }\n  }\n  return parseApply(expr, program.slice(1));\n}\n```\n\n{{index parsing, recursion}}\n\nIf the next character in the program is not an opening parenthesis, this is not an application, and `parseApply` returns the expression it was given. Otherwise, it skips the opening parenthesis and creates the ((syntax tree)) object for this application expression. It then recursively calls `parseExpression` to parse each argument until a closing parenthesis is found. The recursion is indirect, through `parseApply` and `parseExpression` calling each other.\n\nBecause an application expression can itself be applied (such as in `multiplier(2)(1)`), `parseApply` must, after it has parsed an application, call itself again to check whether another pair of parentheses follows.\n\n{{index \"syntax tree\", \"Egg language\", \"parse function\"}}\n\nThis is all we need to parse Egg. We wrap it in a convenient `parse` function that verifies that it has reached the end of the input string after parsing the expression (an Egg program is a single expression), and that gives us the program's data structure.\n\n```{includeCode: strip_log, test: join}\nfunction parse(program) {\n  let {expr, rest} = parseExpression(program);\n  if (skipSpace(rest).length > 0) {\n    throw new SyntaxError(\"Unexpected text after program\");\n  }\n  return expr;\n}\n\nconsole.log(parse(\"+(a, 10)\"));\n// → {type: \"apply\",\n//    operator: {type: \"word\", name: \"+\"},\n//    args: [{type: \"word\", name: \"a\"},\n//           {type: \"value\", value: 10}]}\n```\n\n{{index \"error message\"}}\n\nIt works! It doesn't give us very helpful information when it fails and doesn't store the line and column on which each expression starts, which might be helpful when reporting errors later, but it's good enough for our purposes.\n\n## The evaluator\n\n{{index \"evaluate function\", evaluation, interpretation, \"syntax tree\", \"Egg language\"}}\n\nWhat can we do with the syntax tree for a program? Run it, of course! And that is what the evaluator does. You give it a syntax tree and a scope object that associates names with values, and it will evaluate the expression that the tree represents and return the value that this produces.\n\n```{includeCode: true}\nconst specialForms = Object.create(null);\n\nfunction evaluate(expr, scope) {\n  if (expr.type == \"value\") {\n    return expr.value;\n  } else if (expr.type == \"word\") {\n    if (expr.name in scope) {\n      return scope[expr.name];\n    } else {\n      throw new ReferenceError(\n        `Undefined binding: ${expr.name}`);\n    }\n  } else if (expr.type == \"apply\") {\n    let {operator, args} = expr;\n    if (operator.type == \"word\" &&\n        operator.name in specialForms) {\n      return specialForms[operator.name](expr.args, scope);\n    } else {\n      let op = evaluate(operator, scope);\n      if (typeof op == \"function\") {\n        return op(...args.map(arg => evaluate(arg, scope)));\n      } else {\n        throw new TypeError(\"Applying a non-function.\");\n      }\n    }\n  }\n}\n```\n\n{{index \"literal expression\", scope}}\n\nThe evaluator has code for each of the ((expression)) types. A literal value expression produces its value. (For example, the expression `100` evaluates to the number 100.) For a binding, we must check whether it is actually defined in the scope and, if it is, fetch the binding's value.\n\n{{index [function, application]}}\n\nApplications are more involved. If they are a ((special form)), like `if`, we do not evaluate anything—we just and pass the argument expressions, along with the scope, to the function that handles this form. If it is a normal call, we evaluate the operator, verify that it is a function, and call it with the evaluated arguments.\n\nWe use plain JavaScript function values to represent Egg's function values. We will come back to this [later](language#egg_fun), when the special form `fun` is defined.\n\n{{index readability, \"evaluate function\", recursion, parsing}}\n\nThe recursive structure of `evaluate` resembles the structure of the parser, and both mirror the structure of the language itself. It would also be possible to combine the parser and the evaluator into one function and evaluate during parsing, but splitting them up this way makes the program clearer and more flexible.\n\n{{index \"Egg language\", interpretation}}\n\nThis is really all that's needed to interpret Egg. It's that simple. But without defining a few special forms and adding some useful values to the ((environment)), you can't do much with this language yet.\n\n## Special forms\n\n{{index \"special form\", \"specialForms object\"}}\n\nThe `specialForms` object is used to define special syntax in Egg. It associates words with functions that evaluate such forms. It is currently empty. Let's add `if`.\n\n```{includeCode: true}\nspecialForms.if = (args, scope) => {\n  if (args.length != 3) {\n    throw new SyntaxError(\"Wrong number of args to if\");\n  } else if (evaluate(args[0], scope) !== false) {\n    return evaluate(args[1], scope);\n  } else {\n    return evaluate(args[2], scope);\n  }\n};\n```\n\n{{index \"conditional execution\", \"ternary operator\", \"?: operator\", \"conditional operator\"}}\n\nEgg's `if` construct expects exactly three arguments. It will evaluate the first, and if the result isn't the value `false`, it will evaluate the second. Otherwise, the third gets evaluated. This `if` form is more similar to JavaScript's ternary `?:` operator than to JavaScript's `if`. It is an expression, not a statement, and it produces a value—namely, the result of the second or third argument.\n\n{{index Boolean}}\n\nEgg also differs from JavaScript in how it handles the condition value to `if`. It will treat only the value `false` as false, not things like zero or the empty string.\n\n{{index \"short-circuit evaluation\"}}\n\nThe reason we need to represent `if` as a special form rather than a regular function is that all arguments to functions are evaluated before the function is called, whereas `if` should evaluate only _either_ its second or its third argument, depending on the value of the first.\n\nThe `while` form is similar.\n\n```{includeCode: true}\nspecialForms.while = (args, scope) => {\n  if (args.length != 2) {\n    throw new SyntaxError(\"Wrong number of args to while\");\n  }\n  while (evaluate(args[0], scope) !== false) {\n    evaluate(args[1], scope);\n  }\n\n  // Since undefined does not exist in Egg, we return false,\n  // for lack of a meaningful result\n  return false;\n};\n```\n\nAnother basic building block is `do`, which executes all its arguments from top to bottom. Its value is the value produced by the last argument.\n\n```{includeCode: true}\nspecialForms.do = (args, scope) => {\n  let value = false;\n  for (let arg of args) {\n    value = evaluate(arg, scope);\n  }\n  return value;\n};\n```\n\n{{index [\"= operator\", \"in Egg\"], [binding, \"in Egg\"]}}\n\nTo be able to create bindings and give them new values, we also create a form called `define`. It expects a word as its first argument and an expression producing the value to assign to that word as its second argument. Since `define`, like everything, is an expression, it must return a value. We'll make it return the value that was assigned (just like JavaScript's `=` operator).\n\n```{includeCode: true}\nspecialForms.define = (args, scope) => {\n  if (args.length != 2 || args[0].type != \"word\") {\n    throw new SyntaxError(\"Incorrect use of define\");\n  }\n  let value = evaluate(args[1], scope);\n  scope[args[0].name] = value;\n  return value;\n};\n```\n\n## The environment\n\n{{index \"Egg language\", \"evaluate function\", [binding, \"in Egg\"]}}\n\nThe ((scope)) accepted by `evaluate` is an object with properties whose names correspond to binding names and whose values correspond to the values those bindings are bound to. Let's define an object to represent the ((global scope)).\n\nTo be able to use the `if` construct we just defined, we must have access to ((Boolean)) values. Since there are only two Boolean values, we do not need special syntax for them. We simply bind two names to the values `true` and `false` and use them.\n\n```{includeCode: true}\nconst topScope = Object.create(null);\n\ntopScope.true = true;\ntopScope.false = false;\n```\n\nWe can now evaluate a simple expression that negates a Boolean value.\n\n```\nlet prog = parse(`if(true, false, true)`);\nconsole.log(evaluate(prog, topScope));\n// → false\n```\n\n{{index arithmetic, \"Function constructor\"}}\n\nTo supply basic ((arithmetic)) and ((comparison)) ((operator))s, we will also add some function values to the ((scope)). In the interest of keeping the code short, we'll use `Function` to synthesize a bunch of operator functions in a loop instead of defining them individually.\n\n```{includeCode: true}\nfor (let op of [\"+\", \"-\", \"*\", \"/\", \"==\", \"<\", \">\"]) {\n  topScope[op] = Function(\"a, b\", `return a ${op} b;`);\n}\n```\n\nIt is also useful to have a way to ((output)) values, so we'll wrap `console.log` in a function and call it `print`.\n\n```{includeCode: true}\ntopScope.print = value => {\n  console.log(value);\n  return value;\n};\n```\n\n{{index parsing, \"run function\"}}\n\nThat gives us enough elementary tools to write simple programs. The following function provides a convenient way to parse a program and run it in a fresh scope:\n\n```{includeCode: true}\nfunction run(program) {\n  return evaluate(parse(program), Object.create(topScope));\n}\n```\n\n{{index \"Object.create function\", prototype}}\n\nWe'll use object prototype chains to represent nested scopes so that the program can add bindings to its local scope without changing the top-level scope.\n\n```\nrun(`\ndo(define(total, 0),\n   define(count, 1),\n   while(<(count, 11),\n         do(define(total, +(total, count)),\n            define(count, +(count, 1)))),\n   print(total))\n`);\n// → 55\n```\n\n{{index \"summing example\", \"Egg language\"}}\n\nThis is the program we've seen several times before that computes the sum of the numbers 1 to 10, expressed in Egg. It is clearly uglier than the equivalent JavaScript program—but not bad for a language implemented in fewer than 150 ((lines of code)).\n\n{{id egg_fun}}\n\n## Functions\n\n{{index function, \"Egg language\"}}\n\nA programming language without functions is a poor programming language indeed. Fortunately, it isn't hard to add a `fun` construct, which treats its last argument as the function's body and uses all arguments before that as the names of the function's parameters.\n\n```{includeCode: true}\nspecialForms.fun = (args, scope) => {\n  if (!args.length) {\n    throw new SyntaxError(\"Functions need a body\");\n  }\n  let body = args[args.length - 1];\n  let params = args.slice(0, args.length - 1).map(expr => {\n    if (expr.type != \"word\") {\n      throw new SyntaxError(\"Parameter names must be words\");\n    }\n    return expr.name;\n  });\n\n  return function(...args) {\n    if (args.length != params.length) {\n      throw new TypeError(\"Wrong number of arguments\");\n    }\n    let localScope = Object.create(scope);\n    for (let i = 0; i < args.length; i++) {\n      localScope[params[i]] = args[i];\n    }\n    return evaluate(body, localScope);\n  };\n};\n```\n\n{{index \"local scope\"}}\n\nFunctions in Egg get their own local scope. The function produced by the `fun` form creates this local scope and adds the argument bindings to it. It then evaluates the function body in this scope and returns the result.\n\n```{startCode: true}\nrun(`\ndo(define(plusOne, fun(a, +(a, 1))),\n   print(plusOne(10)))\n`);\n// → 11\n\nrun(`\ndo(define(pow, fun(base, exp,\n     if(==(exp, 0),\n        1,\n        *(base, pow(base, -(exp, 1)))))),\n   print(pow(2, 10)))\n`);\n// → 1024\n```\n\n## Compilation\n\n{{index interpretation, compilation}}\n\nWhat we have built is an interpreter. During evaluation, it acts directly on the representation of the program produced by the parser.\n\n{{index efficiency, performance, [binding, definition], [memory, speed]}}\n\n_Compilation_ is the process of adding another step between the parsing and the running of a program, which transforms the program into something that can be evaluated more efficiently by doing as much work as possible in advance. For example, in well-designed languages it is obvious, for each use of a binding, which binding is being referred to, without actually running the program. This can be used to avoid looking up the binding by name every time it is accessed, instead directly fetching it from some predetermined memory location.\n\nTraditionally, ((compilation)) involves converting the program to ((machine code)), the raw format that a computer's processor can execute. But any process that converts a program to a different representation can be thought of as compilation.\n\n{{index simplicity, \"Function constructor\", transpilation}}\n\nIt would be possible to write an alternative ((evaluation)) strategy for Egg, one that first converts the program to a JavaScript program, uses `Function` to invoke the JavaScript compiler on it, and runs the result. When done right, this would make Egg run very fast while still being quite simple to implement.\n\nIf you are interested in this topic and willing to spend some time on it, I encourage you to try to implement such a compiler as an exercise.\n\n## Cheating\n\n{{index \"Egg language\"}}\n\nWhen we defined `if` and `while`, you probably noticed that they were more or less trivial wrappers around JavaScript's own `if` and `while`. Similarly, the values in Egg are just regular old JavaScript values. Bridging the gap to a more primitive system, such as the machine code the processor understands, takes more effort—but the way it works resembles what we are doing here.\n\nThough the toy language in this chapter doesn't do anything that couldn't be done better in JavaScript, there _are_ situations where writing small languages helps get real work done.\n\nSuch a language does not have to resemble a typical programming language. If JavaScript didn't come equipped with regular expressions, for example, you could write your own parser and evaluator for regular expressions.\n\n{{index \"parser generator\"}}\n\nOr imagine you are building a program that makes it possible to quickly create parsers by providing a logical description of the language they need to parse. You could define a specific notation for that, and a compiler that compiles it to a parser program.\n\n```{lang: null}\nexpr = number | string | name | application\n\nnumber = digit+\n\nname = letter+\n\nstring = '\"' (! '\"')* '\"'\n\napplication = expr '(' (expr (',' expr)*)? ')'\n```\n\n{{index expressivity}}\n\nThis is what is usually called a _((domain-specific language))_, a language tailored to express a narrow domain of knowledge. Such a language can be more expressive than a general-purpose language because it is designed to describe exactly the things that need to be described in its domain and nothing else.\n\n## Exercises\n\n### Arrays\n\n{{index \"Egg language\", \"arrays in egg (exercise)\", [array, \"in Egg\"]}}\n\nAdd support for arrays to Egg by adding the following three functions to the top scope: `array(...values)` to construct an array containing the argument values, `length(array)` to get an array's length, and `element(array, n)` to fetch the *n*th element from an array.\n\n{{if interactive\n\n```{test: no}\n// Modify these definitions...\n\ntopScope.array = \"...\";\n\ntopScope.length = \"...\";\n\ntopScope.element = \"...\";\n\nrun(`\ndo(define(sum, fun(array,\n     do(define(i, 0),\n        define(sum, 0),\n        while(<(i, length(array)),\n          do(define(sum, +(sum, element(array, i))),\n             define(i, +(i, 1)))),\n        sum))),\n   print(sum(array(1, 2, 3))))\n`);\n// → 6\n```\n\nif}}\n\n{{hint\n\n{{index \"arrays in egg (exercise)\"}}\n\nThe easiest way to do this is to represent Egg arrays with JavaScript arrays.\n\n{{index \"slice method\"}}\n\nThe values added to the top scope must be functions. By using a rest argument (with triple-dot notation), the definition of `array` can be _very_ simple.\n\nhint}}\n\n### Closure\n\n{{index closure, [function, scope], \"closure in egg (exercise)\"}}\n\nThe way we have defined `fun` allows functions in Egg to reference the surrounding scope, allowing the function's body to use local values that were visible at the time the function was defined, just like JavaScript functions do.\n\nThe following program illustrates this: function `f` returns a function that adds its argument to `f`'s argument, meaning that it needs access to the local ((scope)) inside `f` to be able to use binding `a`.\n\n```\nrun(`\ndo(define(f, fun(a, fun(b, +(a, b)))),\n   print(f(4)(5)))\n`);\n// → 9\n```\n\nGo back to the definition of the `fun` form and explain which mechanism causes this to work.\n\n{{hint\n\n{{index closure, \"closure in egg (exercise)\"}}\n\nAgain, we are riding along on a JavaScript mechanism to get the equivalent feature in Egg. Special forms are passed the local scope in which they are evaluated so that they can evaluate their subforms in that scope. The function returned by `fun` has access to the `scope` argument given to its enclosing function and uses that to create the function's local ((scope)) when it is called.\n\n{{index compilation}}\n\nThis means that the ((prototype)) of the local scope will be the scope in which the function was created, which makes it possible to access bindings in that scope from the function. This is all there is to implementing closure (though to compile it in a way that is actually efficient, you'd need to do some more work).\n\nhint}}\n\n### Comments\n\n{{index \"hash character\", \"Egg language\", \"comments in egg (exercise)\"}}\n\nIt would be nice if we could write ((comment))s in Egg. For example, whenever we find a hash sign (`#`), we could treat the rest of the line as a comment and ignore it, similar to `//` in JavaScript.\n\n{{index \"skipSpace function\"}}\n\nWe do not have to make any big changes to the parser to support this. We can simply change `skipSpace` to skip comments as if they are ((whitespace)) so that all the points where `skipSpace` is called will now also skip comments. Make this change.\n\n{{if interactive\n\n```{test: no}\n// This is the old skipSpace. Modify it...\nfunction skipSpace(string) {\n  let first = string.search(/\\S/);\n  if (first == -1) return \"\";\n  return string.slice(first);\n}\n\nconsole.log(parse(\"# hello\\nx\"));\n// → {type: \"word\", name: \"x\"}\n\nconsole.log(parse(\"a # one\\n   # two\\n()\"));\n// → {type: \"apply\",\n//    operator: {type: \"word\", name: \"a\"},\n//    args: []}\n```\nif}}\n\n{{hint\n\n{{index \"comments in egg (exercise)\", [whitespace, syntax]}}\n\nMake sure your solution handles multiple comments in a row, with whitespace potentially between or after them.\n\nA ((regular expression)) is probably the easiest way to solve this. Write something that matches \"whitespace or a comment, zero or more times\". Use the `exec` or `match` method and look at the length of the first element in the returned array (the whole match) to find out how many characters to slice off.\n\nhint}}\n\n### Fixing scope\n\n{{index [binding, definition], assignment, \"fixing scope (exercise)\"}}\n\nCurrently, the only way to assign a binding a value is `define`. This construct acts as a way both to define new bindings and to give existing ones a new value.\n\n{{index \"local binding\"}}\n\nThis ((ambiguity)) causes a problem. When you try to give a nonlocal binding a new value, you will end up defining a local one with the same name instead. Some languages work like this by design, but I've always found it an awkward way to handle ((scope)).\n\n{{index \"ReferenceError type\"}}\n\nAdd a special form `set`, similar to `define`, which gives a binding a new value, updating the binding in an outer scope if it doesn't already exist in the inner scope. If the binding is not defined at all, throw a `ReferenceError` (another standard error type).\n\n{{index \"hasOwn function\", prototype, \"getPrototypeOf function\"}}\n\nThe technique of representing scopes as simple objects, which has made things convenient so far, will get in your way a little at this point. You might want to use the `Object.getPrototypeOf` function, which returns the prototype of an object. Also remember that you can use `Object.hasOwn` to find out if a given object has a property.\n\n{{if interactive\n\n```{test: no}\nspecialForms.set = (args, scope) => {\n  // Your code here.\n};\n\nrun(`\ndo(define(x, 4),\n   define(setx, fun(val, set(x, val))),\n   setx(50),\n   print(x))\n`);\n// → 50\nrun(`set(quux, true)`);\n// → Some kind of ReferenceError\n```\nif}}\n\n{{hint\n\n{{index [binding, \"compilation of\"], assignment, \"getPrototypeOf function\", \"hasOwn function\", \"fixing scope (exercise)\"}}\n\nYou will have to loop through one ((scope)) at a time, using `Object.getPrototypeOf` to go to the next outer scope. For each scope, use `Object.hasOwn` to find out whether the binding, indicated by the `name` property of the first argument to `set`, exists in that scope. If it does, set it to the result of evaluating the second argument to `set` and then return that value.\n\n{{index \"global scope\", \"run-time error\"}}\n\nIf the outermost scope is reached (`Object.getPrototypeOf` returns `null`) and we haven't found the binding yet, it doesn't exist, and an error should be thrown.\n\nhint}}\n"
        },
        {
          "name": "13_browser.md",
          "type": "blob",
          "size": 18.8076171875,
          "content": "# JavaScript and the Browser\n\n{{quote {author: \"Tim Berners-Lee\", title: \"The World Wide Web: A Very Short Personal Pistory\", chapter: true}\n\nThe dream behind the web is of a common information space in which we communicate by sharing information. Its universality is essential: the fact that a hypertext link can point to anything, be it personal, local or global, be it draft or highly polished.\n\nquote}}\n\n{{index \"Berners-Lee, Tim\", \"World Wide Web\", HTTP, [JavaScript, \"history of\"], \"World Wide Web\"}}\n\n{{figure {url: \"img/chapter_picture_13.jpg\", alt: \"Illustration showing a telephone switchboard\", chapter: \"framed\"}}}\n\nThe next chapters of this book will discuss web browsers. Without ((browser))s, there would be no JavaScript—or if there were, no one would ever have paid any attention to it.\n\n{{index decentralization, compatibility}}\n\nWeb technology has been decentralized from the start, not just technically but also in terms of the way it evolved. Various browser vendors have added new functionality in ad hoc and sometimes poorly thought-out ways, which were then—sometimes—adopted by others, and finally set down in ((standards)).\n\nThis is both a blessing and a curse. On the one hand, it is empowering to not have a central party control a system but have it be improved by various parties working in loose ((collaboration)) (or occasionally, open hostility). On the other hand, the haphazard way in which the web was developed means that the resulting system is not exactly a shining example of internal ((consistency)). Some parts of it are downright confusing and badly designed.\n\n## Networks and the Internet\n\nComputer ((network))s have been around since the 1950s. If you put cables between two or more computers and allow them to send data back and forth through these cables, you can do all kinds of wonderful things.\n\nIf connecting two machines in the same building allows us to do wonderful things, connecting machines all over the planet should be even better. The technology to start implementing this vision was developed in the 1980s, and the resulting network is called the _((internet))_. It has lived up to its promise.\n\nA computer can use this network to shoot bits at another computer. For any effective ((communication)) to arise out of this bit-shooting, the computers on both ends must know what the bits are supposed to represent. The meaning of any given sequence of bits depends entirely on the kind of thing that it is trying to express and on the ((encoding)) mechanism used.\n\n{{index [network, protocol]}}\n\nA _network ((protocol))_ describes a style of communication over a ((network)). There are protocols for sending email, for fetching email, for sharing files, and even for controlling computers that happen to be infected by malicious software.\n\n{{indexsee \"HyperText Transfer Protocol\", HTTP}}\n\nThe _HyperText Transfer Protocol_ (((HTTP))) is a protocol for retrieving named ((resource))s (chunks of information, such as web pages or pictures). It specifies that the side making the request should start with a line like this, naming the resource and the version of the protocol that it is trying to use:\n\n```{lang: http}\nGET /index.html HTTP/1.1\n```\n\nThere are many more rules about the way the requester can include more information in the ((request)) and the way the other side, which returns the resource, packages up its content. We'll look at HTTP in a little more detail in [Chapter ?](http).\n\n{{index layering, stream, ordering}}\n\nMost protocols are built on top of other protocols. HTTP treats the network as a streamlike device into which you can put bits and have them arrive at the correct destination in the correct order. Providing those guarantees on top of the primitive data-sending that the network gives you is already a rather tricky problem.\n\n{{index TCP}}\n\n{{indexsee \"Transmission Control Protocol\", TCP}}\n\nThe _Transmission Control Protocol_ (TCP) is a ((protocol)) that addresses this problem. All internet-connected devices \"speak\" it, and most communication on the ((internet)) is built on top of it.\n\n{{index \"listening (TCP)\"}}\n\nA TCP ((connection)) works as follows: one computer must be waiting, or _listening_, for other computers to start talking to it. To be able to listen for different kinds of communication at the same time on a single machine, each listener has a number (called a _((port))_) associated with it. Most ((protocol))s specify which port should be used by default. For example, when we want to send an email using the ((SMTP)) protocol, the machine through which we send it is expected to be listening on port 25.\n\nAnother computer can then establish a ((connection)) by connecting to the target machine using the correct port number. If the target machine can be reached and is listening on that port, the connection is successfully created. The listening computer is called the _((server))_, and the connecting computer is called the _((client))_.\n\n{{index [abstraction, \"of the network\"]}}\n\nSuch a connection acts as a two-way ((pipe)) through which bits can flow—the machines on both ends can put data into it. Once the bits are successfully transmitted, they can be read out again by the machine on the other side. This is a convenient model. You could say that ((TCP)) provides an abstraction of the network.\n\n{{id web}}\n\n## The Web\n\nThe _((World Wide Web))_ (not to be confused with the ((internet)) as a whole) is a set of ((protocol))s and formats that allow us to visit web pages in a browser. The word _Web_ refers to the fact that such pages can easily link to each other, thus connecting into a huge ((mesh)) that users can move through.\n\nTo become part of the web, all you need to do is connect a machine to the ((internet)) and have it listen on port 80 with the ((HTTP)) protocol so that other computers can ask it for documents.\n\n{{index URL}}\n\n{{indexsee \"uniform resource locator\", URL}}\n\nEach ((document)) on the web is named by a _uniform resource locator_ (URL), which looks something like this:\n\n```{lang: null}\n  http://eloquentjavascript.net/13_browser.html\n |      |                      |               |\n protocol       server               path\n```\n\n{{index HTTPS}}\n\nThe first part tells us that this URL uses the HTTP ((protocol)) (as opposed to, for example, encrypted HTTP, which would be _https://_). Then comes the part that identifies which ((server)) we are requesting the document from. Last is a path string that identifies the document (or _((resource))_) we are interested in.\n\nMachines connected to the internet get an _((IP address))_, a number that can be used to send messages to that machine, and looks something like `149.210.142.219` or `2001:4860:4860::8888`. Since lists of more or less random numbers are hard to remember and awkward to type, you can instead register a _((domain)) name_ for an address or set of addresses. I registered _eloquentjavascript.net_ to point at the IP address of a machine I control and can thus use that domain name to serve web pages.\n\n{{index browser}}\n\nIf you type this URL into your browser's ((address bar)), the browser will try to retrieve and display the ((document)) at that URL. First, your browser has to find out what address _eloquentjavascript.net_ refers to. Then, using the ((HTTP)) protocol, it will make a connection to the server at that address and ask for the resource _/13_browser.html_. If all goes well, the server sends back a document, which your browser then displays on your screen.\n\n## HTML\n\n{{index HTML}}\n\n{{indexsee \"HyperText Markup Language\", HTML}}\n\n_HTML_, which stands for HyperText Markup Language, is the document format used for web pages. An HTML document contains ((text)), as well as _((tag))s_ that give structure to the text, describing things such as links, paragraphs, and headings.\n\nA short HTML document might look like this:\n\n```{lang: \"html\"}\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>My home page</title>\n  </head>\n  <body>\n    <h1>My home page</h1>\n    <p>Hello, I am Marijn and this is my home page.</p>\n    <p>I also wrote a book! Read it\n      <a href=\"http://eloquentjavascript.net\">here</a>.</p>\n  </body>\n</html>\n```\n\n{{if book\n\nThis is what such a document would look like in the browser:\n\n{{figure {url: \"img/home-page.png\", alt: \"A rendered version of the home page example HTML\",width: \"6.3cm\"}}}\n\nif}}\n\n{{index [HTML, notation]}}\n\nThe tags, wrapped in ((angle brackets)) (`<` and `>`, the symbols for _less than_ and _greater than_), provide information about the ((structure)) of the document. The other ((text)) is just plain text.\n\n{{index doctype, version}}\n\nThe document starts with `<!doctype html>`, which tells the browser to interpret the page as _modern_ HTML, as opposed to obsolete styles used in the past.\n\n{{index \"head (HTML tag)\", \"body (HTML tag)\", \"title (HTML tag)\", \"h1 (HTML tag)\", \"p (HTML tag)\"}}\n\nHTML documents have a head and a body. The head contains information _about_ the document, and the body contains the document itself. In this case, the head declares that the title of this document is \"My home page\" and that it uses the UTF-8 encoding, which is a way to encode Unicode text as binary data. The document's body contains a heading (`<h1>`, meaning \"heading 1\"—`<h2>` to `<h6>` produce subheadings) and two ((paragraph))s (`<p>`).\n\n{{index \"href attribute\", \"a (HTML tag)\"}}\n\nTags come in several forms. An ((element)), such as the body, a paragraph, or a link, is started by an _((opening tag))_ like `<p>` and ended by a _((closing tag))_ like `</p>`. Some opening tags, such as the one for the ((link)) (`<a>`), contain extra information in the form of `name=\"value\"` pairs. These are called _((attribute))s_. In this case, the destination of the link is indicated with `href=\"http://eloquentjavascript.net\"`, where `href` stands for \"hypertext reference\".\n\n{{index \"src attribute\", \"self-closing tag\", \"img (HTML tag)\"}}\n\nSome kinds of ((tag))s do not enclose anything and thus do not need to be closed. The metadata tag `<meta charset=\"utf-8\">` is an example of this.\n\n{{index [escaping, \"in HTML\"]}}\n\nTo be able to include ((angle brackets)) in the text of a document even though they have a special meaning in HTML, yet another form of special notation has to be introduced. A plain opening angle bracket is written as `&lt;` (\"less than\"), and a closing bracket is written as `&gt;` (\"greater than\"). In HTML, an ampersand (`&`) character followed by a name or character code and a semicolon (`;`) is called an _((entity))_ and will be replaced by the character it encodes.\n\n{{index [\"backslash character\", \"in strings\"], \"ampersand character\", \"double-quote character\"}}\n\nThis is analogous to the way backslashes are used in JavaScript strings. Since this mechanism gives ampersand characters a special meaning too, they need to be escaped as `&amp;`. Inside attribute values, which are wrapped in double quotes, `&quot;` can be used to insert a literal quote character.\n\n{{index \"error tolerance\", parsing}}\n\nHTML is parsed in a remarkably error-tolerant way. When tags that should be there are missing, the browser automatically adds them. The way this is done has been standardized, and you can rely on all modern browsers to do it in the same way.\n\nThe following document will be treated just like the one shown previously:\n\n```{lang: \"html\"}\n<!doctype html>\n\n<meta charset=utf-8>\n<title>My home page</title>\n\n<h1>My home page</h1>\n<p>Hello, I am Marijn and this is my home page.\n<p>I also wrote a book! Read it\n  <a href=http://eloquentjavascript.net>here</a>.\n```\n\n{{index \"title (HTML tag)\", \"head (HTML tag)\", \"body (HTML tag)\", \"html (HTML tag)\"}}\n\nThe `<html>`, `<head>`, and `<body>` tags are completely gone. The browser knows that `<meta>` and `<title>` belong in the head and that `<h1>` means the body has started. Furthermore, I am no longer explicitly closing the paragraphs, since opening a new paragraph or ending the document will close them implicitly. The quotes around the attribute values are also gone.\n\nThis book will usually omit the `<html>`, `<head>`, and `<body>` tags from examples to keep them short and free of clutter. I _will_ close tags and include quotes around attributes, though.\n\n{{index browser}}\n\nI will also usually omit the ((doctype)) and `charset` declaration. Don't take this as encouragement to drop these from HTML documents. Browsers will often do ridiculous things when you forget them. Consider the doctype and the `charset` metadata to be implicitly present in examples, even when they are not actually shown in the text.\n\n{{id script_tag}}\n\n## HTML and JavaScript\n\n{{index [JavaScript, \"in HTML\"], \"script (HTML tag)\"}}\n\nIn the context of this book, the most important HTML tag is `<script>`, which allows us to include a piece of JavaScript in a document.\n\n```{lang: \"html\"}\n<h1>Testing alert</h1>\n<script>alert(\"hello!\");</script>\n```\n\n{{index \"alert function\", timeline}}\n\nSuch a script will run as soon as its `<script>` tag is encountered while the browser reads the HTML. This page will pop up a dialog when opened—the `alert` function resembles `prompt`, in that it pops up a little window, but only shows a message without asking for input.\n\n{{index \"src attribute\"}}\n\nIncluding large programs directly in HTML documents is often impractical. The `<script>` tag can be given an `src` attribute  to fetch a script file (a text file containing a JavaScript program) from a URL.\n\n```{lang: \"html\"}\n<h1>Testing alert</h1>\n<script src=\"code/hello.js\"></script>\n```\n\nThe _code/hello.js_ file included here contains the same program—`alert(\"hello!\")`. When an HTML page references other URLs as part of itself, such as an image file or a script, web browsers will retrieve them immediately and include them in the page.\n\n{{index \"script (HTML tag)\", \"closing tag\"}}\n\nA script tag must always be closed with `</script>`, even if it refers to a script file and doesn't contain any code. If you forget this, the rest of the page will be interpreted as part of the script.\n\n{{index \"relative path\", dependency}}\n\nYou can load ((ES modules)) (see [Chapter ?](modules#es)) in the browser by giving your script tag a `type=\"module\"` attribute. Such modules can depend on other modules by using ((URL))s relative to themselves as module names in `import` declarations.\n\n{{index \"button (HTML tag)\", \"onclick attribute\"}}\n\nSome attributes can also contain a JavaScript program. The `<button>` tag (which shows up as a button) supports an `onclick` attribute. The attribute's value will be run whenever the button is clicked.\n\n```{lang: \"html\"}\n<button onclick=\"alert('Boom!');\">DO NOT PRESS</button>\n```\n\n{{index \"single-quote character\", [escaping, \"in HTML\"]}}\n\nNote that I had to use single quotes for the string in the `onclick` attribute because double quotes are already used to quote the whole attribute. I could also have used `&quot;` to escape the inner quotes.\n\n## In the sandbox\n\n{{index \"malicious script\", \"World Wide Web\", browser, website, security}}\n\nRunning programs downloaded from the ((internet)) is potentially dangerous. You don't know much about the people behind most sites you visit, and they do not necessarily mean well. Running programs by malicious actors is how you get your computer infected by ((virus))es, your data stolen, and your accounts hacked.\n\nYet the attraction of the web is that you can browse it without necessarily ((trust))ing all the pages you visit. This is why browsers severely limit the things a JavaScript program may do: it can't look at the files on your computer or modify anything not related to the web page it was embedded in.\n\n{{index isolation}}\n\nIsolating a programming environment in this way is called _((sandbox))ing_, the idea being that the program is harmlessly playing in a sandbox. But you should imagine this particular kind of sandbox as having a cage of thick steel bars over it so that the programs playing in it can't actually get out.\n\nThe hard part of sandboxing is allowing programs enough room to be useful while restricting them from doing anything dangerous. Lots of useful functionality, such as communicating with other servers or reading the content of the copy-paste ((clipboard)), can also be used for problematic, ((privacy))-invading purposes.\n\n{{index leak, exploit, security}}\n\nEvery now and then, someone comes up with a new way to circumvent the limitations of a ((browser)) and do something harmful, ranging from leaking minor private information to taking over the whole machine on which the browser is running. The browser developers respond by fixing the hole, and all is well again—until the next problem is discovered, and hopefully publicized rather than secretly exploited by some government agency or criminal organization.\n\n## Compatibility and the browser wars\n\n{{index Microsoft, \"World Wide Web\"}}\n\nIn the early stages of the web, a browser called ((Mosaic)) dominated the market. After a few years, the balance shifted to ((Netscape)), which was, in turn, largely supplanted by Microsoft's ((Internet Explorer)). At any point where a single ((browser)) was dominant, that browser's vendor would feel entitled to unilaterally invent new features for the web. Since most users used the most popular browser, ((website))s would simply start using those features—never mind the other browsers.\n\nThis was the dark age of ((compatibility)), often called the _((browser wars))_. Web developers were left with not one unified web but two or three incompatible platforms. To make things worse, the browsers in use around 2003 were all full of ((bug))s, and of course the bugs were different for each ((browser)). Life was hard for people writing web pages.\n\n{{index Apple, \"Internet Explorer\", Mozilla}}\n\nMozilla ((Firefox)), a not-for-profit offshoot of ((Netscape)), challenged Internet Explorer's position in the late 2000s. Because ((Microsoft)) was not particularly interested in staying competitive at the time, Firefox took a lot of market share away from it. Around the same time, ((Google)) introduced its ((Chrome)) browser and Apple's ((Safari)) browser gained popularity, leading to a situation where there were four major players, rather than one.\n\n{{index compatibility}}\n\nThe new players had a more serious attitude toward ((standards)) and better ((engineering)) practices, giving us less incompatibility and fewer ((bug))s. Microsoft, seeing its market share crumble, came around and adopted these attitudes in its Edge browser, which replaced Internet Explorer. If you are starting to learn web development today, consider yourself lucky. The latest versions of the major browsers behave quite uniformly and have relatively few bugs.\n\nUnfortunately, with Firefox's market share getting ever smaller, and Edge becoming just a wrapper around Chrome's core in 2018, this uniformity might once again take the form of a single vendor—Google, this time—having enough control over the browser market to push its idea of what the web should look like onto the rest of the world.\n\nFor what it is worth, this long chain of historical events and accidents has produced the web platform that we have today. In the next chapters, we are going to write programs for it."
        },
        {
          "name": "14_dom.md",
          "type": "blob",
          "size": 43.1611328125,
          "content": "# The Document Object Model\n\n{{quote {author: \"Friedrich Nietzsche\", title: \"Beyond Good and Evil\", chapter: true}\n\nToo bad! Same old story! Once you've finished building your house you notice you've accidentally learned something that you really should have known—before you started.\n\nquote}}\n\n{{figure {url: \"img/chapter_picture_14.jpg\", alt: \"Illustration showing a tree with letters, pictures, and gears hanging on its branches\", chapter: \"framed\"}}}\n\n{{index drawing, parsing}}\n\nWhen you open a web page, your browser retrieves the page's ((HTML)) text and parses it, much like our parser from [Chapter ?](language#parsing) parsed programs. The browser builds up a model of the document's ((structure)) and uses this model to draw the page on the screen.\n\n{{index \"live data structure\"}}\n\nThis representation of the ((document)) is one of the toys that a JavaScript program has available in its ((sandbox)). It is a ((data structure)) that you can read or modify. It acts as a _live_ data structure: when it's modified, the page on the screen is updated to reflect the changes.\n\n## Document structure\n\n{{index [HTML, structure]}}\n\nYou can imagine an HTML document as a nested set of ((box))es. Tags such as `<body>` and `</body>` enclose other ((tag))s, which in turn contain other tags or ((text)). Here's the example document from the [previous chapter](browser):\n\n```{lang: html, sandbox: \"homepage\"}\n<!doctype html>\n<html>\n  <head>\n    <title>My home page</title>\n  </head>\n  <body>\n    <h1>My home page</h1>\n    <p>Hello, I am Marijn and this is my home page.</p>\n    <p>I also wrote a book! Read it\n      <a href=\"http://eloquentjavascript.net\">here</a>.</p>\n  </body>\n</html>\n```\n\nThis page has the following structure:\n\n{{figure {url: \"img/html-boxes.svg\", alt: \"Diagram showing an HTML document as a set of nested boxes. The outer box is labeled 'html' and contains two boxes labeled 'head' and 'body'. Inside those are further boxes, with some of the innermost boxes containing the document's text.\", width: \"7cm\"}}}\n\n{{indexsee \"Document Object Model\", DOM}}\n\nThe data structure the browser uses to represent the document follows this shape. For each box, there is an object, which we can interact with to find out things such as what HTML tag it represents and which boxes and text it contains. This representation is called the _Document Object Model_, or _((DOM))_ for short.\n\n{{index \"documentElement property\", \"head property\", \"body property\", \"html (HTML tag)\", \"body (HTML tag)\", \"head (HTML tag)\"}}\n\nThe global binding `document` gives us access to these objects. Its `documentElement` property refers to the object representing the `<html>` tag. Since every HTML document has a head and a body, it also has `head` and `body` properties pointing at those elements.\n\n## Trees\n\n{{index [nesting, \"of objects\"]}}\n\nThink back to the ((syntax tree))s from [Chapter ?](language#parsing) for a moment. Their structures are strikingly similar to the structure of a browser's document. Each _((node))_ may refer to other nodes, _children_, which in turn may have their own children. This shape is typical of nested structures, where elements can contain subelements that are similar to themselves.\n\n{{index \"documentElement property\", [DOM, tree]}}\n\nWe call a data structure a _((tree))_ when it has a branching structure, no ((cycle))s (a node may not contain itself, directly or indirectly), and a single, well-defined _((root))_. In the case of the DOM, `document.documentElement` serves as the root.\n\n{{index sorting, [\"data structure\", \"tree\"], \"syntax tree\"}}\n\nTrees come up a lot in computer science. In addition to representing recursive structures such as HTML documents or programs, they are often used to maintain sorted ((set))s of data because elements can usually be found or inserted more efficiently in a tree than in a flat array.\n\n{{index \"leaf node\", \"Egg language\"}}\n\nA typical tree has different kinds of ((node))s. The syntax tree for [the Egg language](language) had identifiers, values, and application nodes. Application nodes may have children, whereas identifiers and values are _leaves_, or nodes without children.\n\n{{index \"body property\", [HTML, structure]}}\n\nThe same goes for the DOM. Nodes for _((element))s_, which represent HTML tags, determine the structure of the document. These can have ((child node))s. An example of such a node is `document.body`. Some of these children can be ((leaf node))s, such as pieces of ((text)) or ((comment)) nodes.\n\n{{index \"text node\", element, \"ELEMENT_NODE code\", \"COMMENT_NODE code\", \"TEXT_NODE code\", \"nodeType property\"}}\n\nEach DOM node object has a `nodeType` property, which contains a code (number) that identifies the type of node. Elements have code 1, which is also defined as the constant property `Node.ELEMENT_NODE`. Text nodes, representing a section of text in the document, get code 3 (`Node.TEXT_NODE`). Comments have code 8 (`Node.COMMENT_NODE`).\n\nAnother way to visualize our document ((tree)) is as follows:\n\n{{figure {url: \"img/html-tree.svg\", alt: \"Diagram showing the HTML document as a tree, with arrows from parent nodes to child nodes\", width: \"8cm\"}}}\n\nThe leaves are text nodes, and the arrows indicate parent-child relationships between nodes.\n\n{{id standard}}\n\n## The standard\n\n{{index \"programming language\", [interface, design], [DOM, interface]}}\n\nUsing cryptic numeric codes to represent node types is not a very JavaScript-like thing to do. Later in this chapter, we'll see that other parts of the DOM interface also feel cumbersome and alien. This is because the DOM interface wasn't designed for JavaScript alone. Rather, it tries to be a language-neutral interface that can be used in other systems as well—not just for HTML but also for ((XML)), which is a generic ((data format)) with an HTML-like syntax.\n\n{{index consistency, integration}}\n\nThis is unfortunate. Standards are often useful. But in this case, the advantage (cross-language consistency) isn't all that compelling. Having an interface that is properly integrated with the language you're using will save you more time than having a familiar interface across languages.\n\n{{index \"array-like object\", \"NodeList type\"}}\n\nAs an example of this poor integration, consider the `childNodes` property that element nodes in the DOM have. This property holds an array-like object with a `length` property and properties labeled by numbers to access the child nodes. But it is an instance of the `NodeList` type, not a real array, so it does not have methods such as `slice` and `map`.\n\n{{index [interface, design], [DOM, construction], \"side effect\"}}\n\nThen there are issues that are simply caused by poor design. For example, there is no way to create a new node and immediately add children or ((attribute))s to it. Instead, you have to first create it and then add the children and attributes one by one, using side effects. Code that interacts heavily with the DOM tends to get long, repetitive, and ugly.\n\n{{index library}}\n\nBut these flaws aren't fatal. Since JavaScript allows us to create our own ((abstraction))s, it is possible to design improved ways to express the operations we are performing. Many libraries intended for browser programming come with such tools.\n\n## Moving through the tree\n\n{{index pointer}}\n\nDOM nodes contain a wealth of ((link))s to other nearby nodes. The following diagram illustrates these:\n\n{{figure {url: \"img/html-links.svg\", alt: \"Diagram that shows the links between DOM nodes. The 'body' node is shown as a box, with a 'firstChild' arrow pointing at the 'h1' node at its start, a 'lastChild' arrow pointing at the last paragraph node, and 'childNodes' arrow pointing at an array of links to all its children. The middle paragraph has a 'previousSibling' arrow pointing at the node before it, a 'nextSibling' arrow to the node after it, and a 'parentNode' arrow pointing at the 'body' node.\", width: \"6cm\"}}}\n\n{{index \"child node\", \"parentNode property\", \"childNodes property\"}}\n\nAlthough the diagram shows only one link of each type, every node has a `parentNode` property that points to the node it is part of, if any. Likewise, every element node (node type 1) has a `childNodes` property that points to an ((array-like object)) holding its children.\n\n{{index \"firstChild property\", \"lastChild property\", \"previousSibling property\", \"nextSibling property\"}}\n\nIn theory, you could move anywhere in the tree using just these parent and child links. But JavaScript also gives you access to a number of additional convenience links. The `firstChild` and `lastChild` properties point to the first and last child elements or have the value `null` for nodes without children. Similarly, `previousSibling` and `nextSibling` point to adjacent nodes, which are nodes with the same parent that appear immediately before or after the node itself. For a first child, `previousSibling` will be null, and for a last child, `nextSibling` will be null.\n\n{{index \"children property\", \"text node\", element}}\n\nThere's also the `children` property, which is like `childNodes` but contains only element (type 1) children, not other types of child nodes. This can be useful when you aren't interested in text nodes.\n\n{{index \"talksAbout function\", recursion, [nesting, \"of objects\"]}}\n\nWhen dealing with a nested data structure like this one, recursive functions are often useful. The following function scans a document for ((text node))s containing a given string and returns `true` when it has found one:\n\n{{id talksAbout}}\n\n```{sandbox: \"homepage\"}\nfunction talksAbout(node, string) {\n  if (node.nodeType == Node.ELEMENT_NODE) {\n    for (let child of node.childNodes) {\n      if (talksAbout(child, string)) {\n        return true;\n      }\n    }\n    return false;\n  } else if (node.nodeType == Node.TEXT_NODE) {\n    return node.nodeValue.indexOf(string) > -1;\n  }\n}\n\nconsole.log(talksAbout(document.body, \"book\"));\n// → true\n```\n\n{{index \"nodeValue property\"}}\n\nThe `nodeValue` property of a text node holds the string of text that it represents.\n\n## Finding elements\n\n{{index [DOM, querying], \"body property\", \"hard-coding\", [whitespace, \"in HTML\"]}}\n\nNavigating these ((link))s among parents, children, and siblings is often useful. But if we want to find a specific node in the document, reaching it by starting at `document.body` and following a fixed path of properties is a bad idea. Doing so bakes assumptions into our program about the precise structure of the document—a structure you might want to change later. Another complicating factor is that text nodes are created even for the whitespace between nodes. The example document's `<body>` tag has not just three children (`<h1>` and two `<p>` elements), but seven: those three, plus the spaces before, after, and between them.\n\n{{index \"search problem\", \"href attribute\", \"getElementsByTagName method\"}}\n\nIf we want to get the `href` attribute of the link in that document, we don't want to say something like \"Get the second child of the sixth child of the document body\". It'd be better if we could say \"Get the first link in the document\". And we can.\n\n```{sandbox: \"homepage\"}\nlet link = document.body.getElementsByTagName(\"a\")[0];\nconsole.log(link.href);\n```\n\n{{index \"child node\"}}\n\nAll element nodes have a `getElementsByTagName` method, which collects all elements with the given tag name that are descendants (direct or indirect children) of that node and returns them as an ((array-like object)).\n\n{{index \"id attribute\", \"getElementById method\"}}\n\nTo find a specific _single_ node, you can give it an `id` attribute and use `document.getElementById` instead.\n\n```{lang: html}\n<p>My ostrich Gertrude:</p>\n<p><img id=\"gertrude\" src=\"img/ostrich.png\"></p>\n\n<script>\n  let ostrich = document.getElementById(\"gertrude\");\n  console.log(ostrich.src);\n</script>\n```\n\n{{index \"getElementsByClassName method\", \"class attribute\"}}\n\nA third, similar method is `getElementsByClassName`, which, like `getElementsByTagName`, searches through the contents of an element node and retrieves all elements that have the given string in their `class` attribute.\n\n## Changing the document\n\n{{index \"side effect\", \"removeChild method\", \"appendChild method\", \"insertBefore method\", [DOM, construction], [DOM, modification]}}\n\nAlmost everything about the DOM data structure can be changed. The shape of the document tree can be modified by changing parent-child relationships. Nodes have a `remove` method to remove them from their current parent node. To add a child node to an element node, we can use `appendChild`, which puts it at the end of the list of children, or `insertBefore`, which inserts the node given as the first argument before the node given as the second argument.\n\n```{lang: html}\n<p>One</p>\n<p>Two</p>\n<p>Three</p>\n\n<script>\n  let paragraphs = document.body.getElementsByTagName(\"p\");\n  document.body.insertBefore(paragraphs[2], paragraphs[0]);\n</script>\n```\n\nA node can exist in the document in only one place. Thus, inserting paragraph _Three_ in front of paragraph _One_ will first remove it from the end of the document and then insert it at the front, resulting in _Three_/_One_/_Two_. All operations that insert a node somewhere will, as a ((side effect)), cause it to be removed from its current position (if it has one).\n\n{{index \"insertBefore method\", \"replaceChild method\"}}\n\nThe `replaceChild` method is used to replace a child node with another one. It takes as arguments two nodes: a new node and the node to be replaced. The replaced node must be a child of the element the method is called on. Note that both `replaceChild` and `insertBefore` expect the _new_ node as their first argument.\n\n## Creating nodes\n\n{{index \"alt attribute\", \"img (HTML tag)\", \"createTextNode method\"}}\n\nSay we want to write a script that replaces all ((image))s (`<img>` tags) in the document with the text held in their `alt` attributes, which specifies an alternative textual representation of the image. This involves not only removing the images but also adding a new text node to replace them.\n\n```{lang: html}\n<p>The <img src=\"img/cat.png\" alt=\"Cat\"> in the\n  <img src=\"img/hat.png\" alt=\"Hat\">.</p>\n\n<p><button onclick=\"replaceImages()\">Replace</button></p>\n\n<script>\n  function replaceImages() {\n    let images = document.body.getElementsByTagName(\"img\");\n    for (let i = images.length - 1; i >= 0; i--) {\n      let image = images[i];\n      if (image.alt) {\n        let text = document.createTextNode(image.alt);\n        image.parentNode.replaceChild(text, image);\n      }\n    }\n  }\n</script>\n```\n\n{{index \"text node\"}}\n\nGiven a string, `createTextNode` gives us a text node that we can insert into the document to make it show up on the screen.\n\n{{index \"live data structure\", \"getElementsByTagName method\", \"childNodes property\"}}\n\nThe loop that goes over the images starts at the end of the list. This is necessary because the node list returned by a method like `getElementsByTagName` (or a property like `childNodes`) is _live_. That is, it is updated as the document changes. If we started from the front, removing the first image would cause the list to lose its first element so that the second time the loop repeats, where `i` is 1, it would stop because the length of the collection is now also 1.\n\n{{index \"slice method\"}}\n\nIf you want a _solid_ collection of nodes, as opposed to a live one, you can convert the collection to a real array by calling `Array.from`.\n\n```\nlet arrayish = {0: \"one\", 1: \"two\", length: 2};\nlet array = Array.from(arrayish);\nconsole.log(array.map(s => s.toUpperCase()));\n// → [\"ONE\", \"TWO\"]\n```\n\n{{index \"createElement method\"}}\n\nTo create ((element)) nodes, you can use the `document.createElement` method. This method takes a tag name and returns a new empty node of the given type.\n\n{{index \"Popper, Karl\", [DOM, construction], \"elt function\"}}\n\n{{id elt}}\n\nThe following example defines a utility `elt`, which creates an element node and treats the rest of its arguments as children to that node. This function is then used to add an attribution to a quote.\n\n```{lang: html}\n<blockquote id=\"quote\">\n  No book can ever be finished. While working on it we learn\n  just enough to find it immature the moment we turn away\n  from it.\n</blockquote>\n\n<script>\n  function elt(type, ...children) {\n    let node = document.createElement(type);\n    for (let child of children) {\n      if (typeof child != \"string\") node.appendChild(child);\n      else node.appendChild(document.createTextNode(child));\n    }\n    return node;\n  }\n\n  document.getElementById(\"quote\").appendChild(\n    elt(\"footer\", \"—\",\n        elt(\"strong\", \"Karl Popper\"),\n        \", preface to the second edition of \",\n        elt(\"em\", \"The Open Society and Its Enemies\"),\n        \", 1950\"));\n</script>\n```\n\n{{if book\n\nThis is what the resulting document looks like:\n\n{{figure {url: \"img/blockquote.png\", alt: \"Rendered picture of the blockquote with attribution\", width: \"8cm\"}}}\n\nif}}\n\n## Attributes\n\n{{index \"href attribute\", [DOM, attributes]}}\n\nSome element ((attribute))s, such as `href` for links, can be accessed through a property of the same name on the element's ((DOM)) object. This is the case for most commonly used standard attributes.\n\n{{index \"data attribute\", \"getAttribute method\", \"setAttribute method\", attribute}}\n\nHTML allows you to set any attribute you want on nodes. This can be useful because it allows you to store extra information in a document. To read or change custom attributes, which aren't available as regular object properties, you have to use the `getAttribute` and `setAttribute` methods.\n\n```{lang: html}\n<p data-classified=\"secret\">The launch code is 00000000.</p>\n<p data-classified=\"unclassified\">I have two feet.</p>\n\n<script>\n  let paras = document.body.getElementsByTagName(\"p\");\n  for (let para of Array.from(paras)) {\n    if (para.getAttribute(\"data-classified\") == \"secret\") {\n      para.remove();\n    }\n  }\n</script>\n```\n\nIt is recommended to prefix the names of such made-up attributes with `data-` to ensure they do not conflict with any other attributes.\n\n{{index \"getAttribute method\", \"setAttribute method\", \"className property\", \"class attribute\"}}\n\nThere is a commonly used attribute, `class`, which is a ((keyword)) in the JavaScript language. For historical reasons—some old JavaScript implementations could not handle property names that matched keywords—the property used to access this attribute is called `className`. You can also access it under its real name, `\"class\"`, with the `getAttribute` and `setAttribute` methods.\n\n## Layout\n\n{{index layout, \"block element\", \"inline element\", \"p (HTML tag)\", \"h1 (HTML tag)\", \"a (HTML tag)\", \"strong (HTML tag)\"}}\n\nYou may have noticed that different types of elements are laid out differently. Some, such as paragraphs (`<p>`) or headings (`<h1>`), take up the whole width of the document and are rendered on separate lines. These are called _block_ elements. Others, such as links (`<a>`) or the `<strong>` element, are rendered on the same line with their surrounding text. Such elements are called _inline_ elements.\n\n{{index drawing}}\n\nFor any given document, browsers are able to compute a layout, which gives each element a size and position based on its type and content. This layout is then used to actually draw the document.\n\n{{index \"border (CSS)\", \"offsetWidth property\", \"offsetHeight property\", \"clientWidth property\", \"clientHeight property\", dimensions}}\n\nThe size and position of an element can be accessed from JavaScript. The `offsetWidth` and `offsetHeight` properties give you the space the element takes up in _((pixel))s_. A pixel is the basic unit of measurement in the browser. It traditionally corresponds to the smallest dot that the screen can draw, but on modern displays, which can draw _very_ small dots, that may no longer be the case, and a browser pixel may span multiple display dots.\n\nSimilarly, `clientWidth` and `clientHeight` give you the size of the space _inside_ the element, ignoring border width.\n\n```{lang: html}\n<p style=\"border: 3px solid red\">\n  I'm boxed in\n</p>\n\n<script>\n  let para = document.body.getElementsByTagName(\"p\")[0];\n  console.log(\"clientHeight:\", para.clientHeight);\n  // → 19\n  console.log(\"offsetHeight:\", para.offsetHeight);\n  // → 25\n</script>\n```\n\n{{if book\n\nGiving a paragraph a border causes a rectangle to be drawn around it.\n\n{{figure {url: \"img/boxed-in.png\", alt: \"Rendered picture of a paragraph with a border\", width: \"8cm\"}}}\n\nif}}\n\n{{index \"getBoundingClientRect method\", position, \"pageXOffset property\", \"pageYOffset property\"}}\n\n{{id boundingRect}}\n\nThe most effective way to find the precise position of an element on the screen is the `getBoundingClientRect` method. It returns an object with `top`, `bottom`, `left`, and `right` properties, indicating the pixel positions of the sides of the element relative to the upper left of the screen. If you want pixel positions relative to the whole document, you must add the current scroll position, which you can find in the `pageXOffset` and `pageYOffset` bindings.\n\n{{index \"offsetHeight property\", \"getBoundingClientRect method\", drawing, laziness, performance, efficiency}}\n\nLaying out a document can be quite a lot of work. In the interest of speed, browser engines do not immediately re-layout a document every time you change it but wait as long as they can before doing so. When a JavaScript program that changed the document finishes running, the browser will have to compute a new layout to draw the changed document to the screen. When a program _asks_ for the position or size of something by reading properties such as `offsetHeight` or calling `getBoundingClientRect`, providing that information also requires computing a ((layout)).\n\n{{index \"side effect\", optimization, benchmark}}\n\nA program that repeatedly alternates between reading DOM layout information and changing the DOM forces a lot of layout computations to happen and will consequently run very slowly. The following code is an example of this. It contains two different programs that build up a line of _X_ characters 2,000 pixels wide and measures the time each one takes.\n\n```{lang: html, test: nonumbers}\n<p><span id=\"one\"></span></p>\n<p><span id=\"two\"></span></p>\n\n<script>\n  function time(name, action) {\n    let start = Date.now(); // Current time in milliseconds\n    action();\n    console.log(name, \"took\", Date.now() - start, \"ms\");\n  }\n\n  time(\"naive\", () => {\n    let target = document.getElementById(\"one\");\n    while (target.offsetWidth < 2000) {\n      target.appendChild(document.createTextNode(\"X\"));\n    }\n  });\n  // → naive took 32 ms\n\n  time(\"clever\", function() {\n    let target = document.getElementById(\"two\");\n    target.appendChild(document.createTextNode(\"XXXXX\"));\n    let total = Math.ceil(2000 / (target.offsetWidth / 5));\n    target.firstChild.nodeValue = \"X\".repeat(total);\n  });\n  // → clever took 1 ms\n</script>\n```\n\n## Styling\n\n{{index \"block element\", \"inline element\", style, \"strong (HTML tag)\", \"a (HTML tag)\", underline}}\n\nWe have seen that different HTML elements are drawn differently. Some are displayed as blocks, others inline. Some add styling—`<strong>` makes its content ((bold)), and `<a>` makes it blue and underlines it.\n\n{{index \"img (HTML tag)\", \"default behavior\", \"style attribute\"}}\n\nThe way an `<img>` tag shows an image or an `<a>` tag causes a link to be followed when it is clicked is strongly tied to the element type. But we can change the styling associated with an element, such as the text color or underline. Here is an example that uses the `style` property:\n\n```{lang: html}\n<p><a href=\".\">Normal link</a></p>\n<p><a href=\".\" style=\"color: green\">Green link</a></p>\n```\n\n{{if book\n\nThe second link will be green instead of the default link color:\n\n{{figure {url: \"img/colored-links.png\", alt: \"Rendered picture of a normal blue link and a styled green link\", width: \"2.2cm\"}}}\n\nif}}\n\n{{index \"border (CSS)\", \"color (CSS)\", CSS, \"colon character\"}}\n\nA style attribute may contain one or more _((declaration))s_, which are a property (such as `color`) followed by a colon and a value (such as `green`). When there is more than one declaration, they must be separated by ((semicolon))s, as in `\"color: red; border: none\"`.\n\n{{index \"display (CSS)\", layout}}\n\nA lot of aspects of the document can be influenced by styling. For example, the `display` property controls whether an element is displayed as a block or an inline element.\n\n```{lang: html}\nThis text is displayed <strong>inline</strong>,\n<strong style=\"display: block\">as a block</strong>, and\n<strong style=\"display: none\">not at all</strong>.\n```\n\n{{index \"hidden element\"}}\n\nThe `block` tag will end up on its own line, since ((block element))s are not displayed inline with the text around them. The last tag is not displayed at all—`display: none` prevents an element from showing up on the screen. This is a way to hide elements. It is often preferable to removing them from the document entirely because it makes it easy to reveal them again later.\n\n{{if book\n\n{{figure {url: \"img/display.png\", alt: \"Different display styles\", width: \"4cm\"}}}\n\nif}}\n\n{{index \"color (CSS)\", \"style attribute\"}}\n\nJavaScript code can directly manipulate the style of an element through the element's `style` property. This property holds an object that has properties for all possible style properties. The values of these properties are strings, which we can write to in order to change a particular aspect of the element's style.\n\n```{lang: html}\n<p id=\"para\" style=\"color: purple\">\n  Nice text\n</p>\n\n<script>\n  let para = document.getElementById(\"para\");\n  console.log(para.style.color);\n  para.style.color = \"magenta\";\n</script>\n```\n\n{{index \"camel case\", capitalization, \"hyphen character\", \"font-family (CSS)\"}}\n\nSome style property names contain hyphens, such as `font-family`. Because such property names are awkward to work with in JavaScript (you'd have to say `style[\"font-family\"]`), the property names in the `style` object for such properties have their hyphens removed and the letters after them capitalized (`style.fontFamily`).\n\n## Cascading styles\n\n{{index \"rule (CSS)\", \"style (HTML tag)\"}}\n\n{{indexsee \"Cascading Style Sheets\", CSS}}\n{{indexsee \"style sheet\", CSS}}\n\nThe styling system for HTML is called _((CSS))_, for _Cascading Style Sheets_. A _style sheet_ is a set of rules for how to style elements in a document. It can be given inside a `<style>` tag.\n\n```{lang: html}\n<style>\n  strong {\n    font-style: italic;\n    color: gray;\n  }\n</style>\n<p>Now <strong>strong text</strong> is italic and gray.</p>\n```\n\n{{index \"rule (CSS)\", \"font-weight (CSS)\", overlay}}\n\nThe _((cascading))_ in the name refers to the fact that multiple such rules are combined to produce the final style for an element. In the example, the default styling for `<strong>` tags, which gives them `font-weight: bold`, is overlaid by the rule in the `<style>` tag, which adds `font-style` and `color`.\n\n{{index \"style (HTML tag)\", \"style attribute\"}}\n\nWhen multiple rules define a value for the same property, the most recently read rule gets a higher ((precedence)) and wins. For example, if the rule in the `<style>` tag included `font-weight: normal`, contradicting the default `font-weight` rule, the text would be normal, _not_ bold. Styles in a `style` attribute applied directly to the node have the highest precedence and always win.\n\n{{index uniqueness, \"class attribute\", \"id attribute\"}}\n\nIt is possible to target things other than ((tag)) names in CSS rules. A rule for `.abc` applies to all elements with `\"abc\"` in their `class` attribute. A rule for `#xyz` applies to the element with an `id` attribute of `\"xyz\"` (which should be unique within the document).\n\n```{lang: \"css\"}\n.subtle {\n  color: gray;\n  font-size: 80%;\n}\n#header {\n  background: blue;\n  color: white;\n}\n/* p elements with id main and with classes a and b */\np#main.a.b {\n  margin-bottom: 20px;\n}\n```\n\n{{index \"rule (CSS)\"}}\n\nThe ((precedence)) rule favoring the most recently defined rule applies only when the rules have the same _((specificity))_. A rule's specificity is a measure of how precisely it describes matching elements, determined by the number and kind (tag, class, or ID) of element aspects it requires. For example, a rule that targets `p.a` is more specific than rules that target `p` or just `.a` and would thus take precedence over them.\n\n{{index \"direct child node\"}}\n\nThe notation `p > a {…}` applies the given styles to all `<a>` tags that are direct children of `<p>` tags. Similarly, `p a {…}` applies to all `<a>` tags inside `<p>` tags, whether they are direct or indirect children.\n\n## Query selectors\n\n{{index complexity, CSS, \"domain-specific language\", [DOM, querying]}}\n\nWe won't be using style sheets very much in this book. Understanding them is helpful when programming in the browser, but they are complicated enough to warrant a separate book. The main reason I introduced _((selector))_ syntax—the notation used in style sheets to determine which elements a set of styles apply to—is that we can use this same mini-language as an effective way to find DOM elements.\n\n{{index \"querySelectorAll method\", \"NodeList type\"}}\n\nThe `querySelectorAll` method, which is defined both on the `document` object and on element nodes, takes a selector string and returns a `NodeList` containing all the elements that it matches.\n\n```{lang: html}\n<p>And if you go chasing\n  <span class=\"animal\">rabbits</span></p>\n<p>And you know you're going to fall</p>\n<p>Tell 'em a <span class=\"character\">hookah smoking\n  <span class=\"animal\">caterpillar</span></span></p>\n<p>Has given you the call</p>\n\n<script>\n  function count(selector) {\n    return document.querySelectorAll(selector).length;\n  }\n  console.log(count(\"p\"));           // All <p> elements\n  // → 4\n  console.log(count(\".animal\"));     // Class animal\n  // → 2\n  console.log(count(\"p .animal\"));   // Animal inside of <p>\n  // → 2\n  console.log(count(\"p > .animal\")); // Direct child of <p>\n  // → 1\n</script>\n```\n\n{{index \"live data structure\"}}\n\nUnlike methods such as `getElementsByTagName`, the object returned by `querySelectorAll` is _not_ live. It won't change when you change the document. It is still not a real array, though, so you need to call `Array.from` if you want to treat it like one.\n\n{{index \"querySelector method\"}}\n\nThe `querySelector` method (without the `All` part) works in a similar way. This one is useful if you want a specific single element. It will return only the first matching element, or `null` when no element matches.\n\n{{id animation}}\n\n## Positioning and animating\n\n{{index \"position (CSS)\", \"relative positioning\", \"top (CSS)\", \"left (CSS)\", \"absolute positioning\"}}\n\nThe `position` style property influences layout in a powerful way. It has a default value of `static`, meaning the element sits in its normal place in the document. When it is set to `relative`, the element still takes up space in the document, but now the `top` and `left` style properties can be used to move it relative to that normal place. When `position` is set to `absolute`, the element is removed from the normal document flow—that is, it no longer takes up space and may overlap with other elements. Its `top` and `left` properties can be used to absolutely position it relative to the upper-left corner of the nearest enclosing element whose `position` property isn't `static`, or relative to the document if no such enclosing element exists.\n\n{{index [animation, \"spinning cat\"]}}\n\nWe can use this to create an animation. The following document displays a picture of a cat that moves around in an ((ellipse)):\n\n```{lang: html, startCode: true}\n<p style=\"text-align: center\">\n  <img src=\"img/cat.png\" style=\"position: relative\">\n</p>\n<script>\n  let cat = document.querySelector(\"img\");\n  let angle = Math.PI / 2;\n  function animate(time, lastTime) {\n    if (lastTime != null) {\n      angle += (time - lastTime) * 0.001;\n    }\n    cat.style.top = (Math.sin(angle) * 20) + \"px\";\n    cat.style.left = (Math.cos(angle) * 200) + \"px\";\n    requestAnimationFrame(newTime => animate(newTime, time));\n  }\n  requestAnimationFrame(animate);\n</script>\n```\n\n{{if book\n\nThe gray arrow shows the path along which the image moves.\n\n{{figure {url: \"img/cat-animation.png\", alt: \"A diagram showing a picture of a cat with a circular arrow indicating its motion\", width: \"8cm\"}}}\n\nif}}\n\n{{index \"top (CSS)\", \"left (CSS)\", centering, \"relative positioning\"}}\n\nOur picture is centered on the page and given a `position` of `relative`. We'll repeatedly update that picture's `top` and `left` styles to move it.\n\n{{index \"requestAnimationFrame function\", drawing, animation}}\n\n{{id animationFrame}}\n\nThe script uses `requestAnimationFrame` to schedule the `animate` function to run whenever the browser is ready to repaint the screen. The `animate` function itself again calls `requestAnimationFrame` to schedule the next update. When the browser window (or tab) is active, this will cause updates to happen at a rate of about 60 per second, which tends to produce a good-looking animation.\n\n{{index timeline, blocking}}\n\nIf we just updated the DOM in a loop, the page would freeze, and nothing would show up on the screen. Browsers do not update their display while a JavaScript program is running, nor do they allow any interaction with the page. This is why we need `requestAnimationFrame`—it lets the browser know that we are done for now, and it can go ahead and do the things that browsers do, such as updating the screen and responding to user actions.\n\n{{index \"smooth animation\"}}\n\nThe animation function is passed the current ((time)) as an argument. To ensure that the motion of the cat per millisecond is stable, it bases the speed at which the angle changes on the difference between the current time and the last time the function ran. If it just moved the angle by a fixed amount per step, the motion would stutter when, for example, another heavy task running on the same computer prevented the function from running for a fraction of a second.\n\n{{index \"Math.cos function\", \"Math.sin function\", cosine, sine, trigonometry}}\n\n{{id sin_cos}}\n\nMoving in ((circle))s is done using the trigonometry functions `Math.cos` and `Math.sin`. For those who aren't familiar with these, I'll briefly introduce them, since we will occasionally use them in this book.\n\n{{index coordinates, pi}}\n\n`Math.cos` and `Math.sin` are useful for finding points that lie on a circle around point (0, 0) with a radius of 1. Both functions interpret their argument as the position on this circle, with 0 denoting the point on the far right of the circle, going clockwise until 2π (about 6.28) has taken us around the whole circle. `Math.cos` tells you the x-coordinate of the point that corresponds to the given position, and `Math.sin` yields the y-coordinate. Positions (or angles) greater than 2π or less than 0 are valid—the rotation repeats so that _a_+2π refers to the same ((angle)) as _a_.\n\n{{index \"PI constant\"}}\n\nThis unit for measuring angles is called ((radian))s—a full circle is 2π radians, similar to how it is 360 degrees when measuring in degrees. The constant π is available as `Math.PI` in JavaScript.\n\n{{figure {url: \"img/cos_sin.svg\", alt: \"Diagram showing the use of cosine and sine to compute coordinates. A circle with radius 1 is shown with two points on it. The angle from the right side of the circle to the point, in radians, is used to compute the position of each point by using 'cos(angle)' for the horizontal distance from the center of the circle and sin(angle) for the vertical distance.\", width: \"6cm\"}}}\n\n{{index \"counter variable\", \"Math.sin function\", \"top (CSS)\", \"Math.cos function\", \"left (CSS)\", ellipse}}\n\nThe cat animation code keeps a counter, `angle`, for the current angle of the animation and increments it every time the `animate` function is called. It can then use this angle to compute the current position of the image element. The `top` style is computed with `Math.sin` and multiplied by 20, which is the vertical radius of our ellipse. The `left` style is based on `Math.cos` and multiplied by 200 so that the ellipse is much wider than it is high.\n\n{{index \"unit (CSS)\"}}\n\nNote that styles usually need _units_. In this case, we have to append `\"px\"` to the number to tell the browser that we are counting in ((pixel))s (as opposed to centimeters, \"ems\", or other units). This is easy to forget. Using numbers without units will result in your style being ignored—unless the number is 0, which always means the same thing, regardless of its unit.\n\n## Summary\n\nJavaScript programs may inspect and interfere with the document that the browser is displaying through a data structure called the DOM. This data structure represents the browser's model of the document, and a JavaScript program can modify it to change the visible document.\n\nThe DOM is organized like a tree, where elements are arranged hierarchically according to the structure of the document. The objects representing elements have properties such as `parentNode` and `childNodes`, which can be used to navigate through this tree.\n\nThe way a document is displayed can be influenced by _styling_, both by attaching styles to nodes directly and by defining rules that match certain nodes. There are many different style properties, such as `color` or `display`. JavaScript code can manipulate an element's style directly through its `style` property.\n\n## Exercises\n\n{{id exercise_table}}\n\n### Build a table\n\n{{index \"table (HTML tag)\"}}\n\nAn HTML table is built with the following tag structure:\n\n```{lang: html}\n<table>\n  <tr>\n    <th>name</th>\n    <th>height</th>\n    <th>place</th>\n  </tr>\n  <tr>\n    <td>Kilimanjaro</td>\n    <td>5895</td>\n    <td>Tanzania</td>\n  </tr>\n</table>\n```\n\n{{index \"tr (HTML tag)\", \"th (HTML tag)\", \"td (HTML tag)\"}}\n\nFor each _((row))_, the `<table>` tag contains a `<tr>` tag. Inside of these `<tr>` tags, we can put cell elements: either heading cells (`<th>`) or regular cells (`<td>`).\n\nGiven a dataset of mountains, an array of objects with `name`, `height`, and `place` properties, generate the DOM structure for a table that enumerates the objects. It has one column per key and one row per object, plus a header row with `<th>` elements at the top, listing the column names.\n\nWrite this so that the columns are automatically derived from the objects, by taking the property names of the first object in the data.\n\nShow the resulting table in the document by appending it to the element that has an `id` attribute of `\"mountains\"`.\n\n{{index \"right-aligning\", \"text-align (CSS)\"}}\n\nOnce you have this working, right-align cells that contain number values by setting their `style.textAlign` property to `\"right\"`.\n\n{{if interactive\n\n```{test: no, lang: html}\n<h1>Mountains</h1>\n\n<div id=\"mountains\"></div>\n\n<script>\n  const MOUNTAINS = [\n    {name: \"Kilimanjaro\", height: 5895, place: \"Tanzania\"},\n    {name: \"Everest\", height: 8848, place: \"Nepal\"},\n    {name: \"Mount Fuji\", height: 3776, place: \"Japan\"},\n    {name: \"Vaalserberg\", height: 323, place: \"Netherlands\"},\n    {name: \"Denali\", height: 6168, place: \"United States\"},\n    {name: \"Popocatepetl\", height: 5465, place: \"Mexico\"},\n    {name: \"Mont Blanc\", height: 4808, place: \"Italy/France\"}\n  ];\n\n  // Your code here\n</script>\n```\n\nif}}\n\n{{hint\n\n{{index \"createElement method\", \"table example\", \"appendChild method\"}}\n\nYou can use `document.createElement` to create new element nodes, `document.createTextNode` to create text nodes, and the `appendChild` method to put nodes into other nodes.\n\n{{index \"Object.keys function\"}}\n\nYou'll want to loop over the key names once to fill in the top row and then again for each object in the array to construct the data rows. To get an array of key names from the first object, `Object.keys` will be useful.\n\n{{index \"getElementById method\", \"querySelector method\"}}\n\nTo add the table to the correct parent node, you can use `document.getElementById` or `document.querySelector` with `\"#mountains\"` to find the node.\n\nhint}}\n\n### Elements by tag name\n\n{{index \"getElementsByTagName method\", recursion}}\n\nThe `document.getElementsByTagName` method returns all child elements with a given tag name. Implement your own version of this as a function that takes a node and a string (the tag name) as arguments and returns an array containing all descendant element nodes with the given tag name. Your function should go through the document itself. It may not use a method like `querySelectorAll` to do the work.\n\n{{index \"nodeName property\", capitalization, \"toLowerCase method\", \"toUpperCase method\"}}\n\nTo find the tag name of an element, use its `nodeName` property. But note that this will return the tag name in all uppercase. Use the `toLowerCase` or `toUpperCase` string methods to compensate for this.\n\n{{if interactive\n\n```{lang: html, test: no}\n<h1>Heading with a <span>span</span> element.</h1>\n<p>A paragraph with <span>one</span>, <span>two</span>\n  spans.</p>\n\n<script>\n  function byTagName(node, tagName) {\n    // Your code here.\n  }\n\n  console.log(byTagName(document.body, \"h1\").length);\n  // → 1\n  console.log(byTagName(document.body, \"span\").length);\n  // → 3\n  let para = document.querySelector(\"p\");\n  console.log(byTagName(para, \"span\").length);\n  // → 2\n</script>\n```\nif}}\n\n{{hint\n\n{{index \"getElementsByTagName method\", recursion}}\n\nThe solution is most easily expressed with a recursive function, similar to the [`talksAbout` function](dom#talksAbout) defined earlier in this chapter.\n\n{{index concatenation, \"concat method\", closure}}\n\nYou could call `byTagname` itself recursively, concatenating the resulting arrays to produce the output. Or you could create an inner function that calls itself recursively and that has access to an array binding defined in the outer function, to which it can add the matching elements it finds. Don't forget to call the ((inner function)) once from the outer function to start the process.\n\n{{index \"nodeType property\", \"ELEMENT_NODE code\"}}\n\nThe recursive function must check the node type. Here we are interested only in node type 1 (`Node.ELEMENT_NODE`). For such nodes, we must loop over their children and, for each child, see whether the child matches the query while also doing a recursive call on it to inspect its own children.\n\nhint}}\n\n### The cat's hat\n\n{{index \"cat's hat (exercise)\", [animation, \"spinning cat\"]}}\n\nExtend the cat animation defined [earlier](dom#animation) so that both the cat and his hat (`<img src=\"img/hat.png\">`) orbit at opposite sides of the ellipse.\n\nOr make the hat circle around the cat. Or alter the animation in some other interesting way.\n\n{{index \"absolute positioning\", \"top (CSS)\", \"left (CSS)\", \"position (CSS)\"}}\n\nTo make positioning multiple objects easier, you'll probably want to switch to absolute positioning. This means that `top` and `left` are counted relative to the upper left of the document. To avoid using negative coordinates, which would cause the image to move outside of the visible page, you can add a fixed number of pixels to the position values.\n\n{{if interactive\n\n```{lang: html, test: no}\n<style>body { min-height: 200px }</style>\n<img src=\"img/cat.png\" id=\"cat\" style=\"position: absolute\">\n<img src=\"img/hat.png\" id=\"hat\" style=\"position: absolute\">\n\n<script>\n  let cat = document.querySelector(\"#cat\");\n  let hat = document.querySelector(\"#hat\");\n\n  let angle = 0;\n  let lastTime = null;\n  function animate(time) {\n    if (lastTime != null) angle += (time - lastTime) * 0.001;\n    lastTime = time;\n    cat.style.top = (Math.sin(angle) * 40 + 40) + \"px\";\n    cat.style.left = (Math.cos(angle) * 200 + 230) + \"px\";\n\n    // Your extensions here.\n\n    requestAnimationFrame(animate);\n  }\n  requestAnimationFrame(animate);\n</script>\n```\n\nif}}\n\n{{hint\n\n`Math.cos` and `Math.sin` measure angles in radians, where a full circle is 2π. For a given angle, you can get the opposite angle by adding half of this, which is `Math.PI`. This can be useful for putting the hat on the opposite side of the orbit.\n\nhint}}\n"
        },
        {
          "name": "15_event.md",
          "type": "blob",
          "size": 40.0078125,
          "content": "# Handling Events\n\n{{quote {author: \"Marcus Aurelius\", title: Meditations, chapter: true}\n\nYou have power over your mind—not outside events. Realize this, and you will find strength.\n\nquote}}\n\n{{index stoicism, \"Marcus Aurelius\", input, timeline}}\n\n{{figure {url: \"img/chapter_picture_15.jpg\", alt: \"Illustration showing a Rube Goldberg machine involving a ball, a see-saw, a pair of scissors, and a hammer, which affect each other in a chain reaction that turns on a lightbulb.\", chapter: \"framed\"}}}\n\nSome programs work with direct user input, such as mouse and keyboard actions. That kind of input isn't available ahead of time, as a well-organized data structure—it comes in piece by piece, in real time, and the program must respond to it as it happens.\n\n## Event handlers\n\n{{index polling, button, \"real-time\"}}\n\nImagine an interface where the only way to find out whether a key on the ((keyboard)) is being pressed is to read the current state of that key. To be able to react to keypresses, you would have to constantly read the key's state to catch it before it is released again. It would be dangerous to perform other time-intensive computations, since you might miss a keypress.\n\nSome primitive machines handle input like this. A step up from this is for the hardware or operating system to notice the keypress and put it in a queue. A program can then periodically check the queue for new events and react to what it finds there.\n\n{{index responsiveness, \"user experience\"}}\n\nOf course, the program has to remember to look at the queue, and to do it often because any time between the key being pressed and the program noticing the event will cause the software to feel unresponsive. This approach is called _((polling))_. Most programmers prefer to avoid it.\n\n{{index \"callback function\", \"event handling\"}}\n\nA better mechanism is for the system to actively notify the code when an event occurs. Browsers do this by allowing us to register functions as _handlers_ for specific events.\n\n```{lang: html}\n<p>Click this document to activate the handler.</p>\n<script>\n  window.addEventListener(\"click\", () => {\n    console.log(\"You knocked?\");\n  });\n</script>\n```\n\n{{index \"click event\", \"addEventListener method\", \"window object\", [browser, window]}}\n\nThe `window` binding refers to a built-in object provided by the browser. It represents the browser window that contains the document. Calling its `addEventListener` method registers the second argument to be called whenever the event described by its first argument occurs.\n\n## Events and DOM nodes\n\n{{index \"addEventListener method\", \"event handling\", \"window object\", browser, [DOM, events]}}\n\nEach browser event handler is registered in a context. In the previous example, we called `addEventListener` on the `window` object to register a handler for the whole window. Such a method can also be found on DOM elements and some other types of objects. Event listeners are called only when the event happens in the context of the object on which they are registered.\n\n```{lang: html}\n<button>Click me</button>\n<p>No handler here.</p>\n<script>\n  let button = document.querySelector(\"button\");\n  button.addEventListener(\"click\", () => {\n    console.log(\"Button clicked.\");\n  });\n</script>\n```\n\n{{index \"click event\", \"button (HTML tag)\"}}\n\nThat example attaches a handler to the button node. Clicks on the button cause that handler to run, but clicks on the rest of the document do not.\n\n{{index \"onclick attribute\", encapsulation}}\n\nGiving a node an `onclick` attribute has a similar effect. This works for most types of events—you can attach a handler through the attribute whose name is the event name with `on` in front of it.\n\nBut a node can have only one `onclick` attribute, so you can register only one handler per node that way. The `addEventListener` method allows you to add any number of handlers meaning it's safe to add handlers even if there is already another handler on the element.\n\n{{index \"removeEventListener method\"}}\n\nThe `removeEventListener` method, called with arguments similar to `addEventListener`, removes a handler.\n\n```{lang: html}\n<button>Act-once button</button>\n<script>\n  let button = document.querySelector(\"button\");\n  function once() {\n    console.log(\"Done.\");\n    button.removeEventListener(\"click\", once);\n  }\n  button.addEventListener(\"click\", once);\n</script>\n```\n\n{{index [function, \"as value\"]}}\n\nThe function given to `removeEventListener` has to be the same function value given to `addEventListener`. When you need to unregister a handler, you'll want to give the handler function a name (`once`, in the example) to be able to pass the same function value to both methods.\n\n## Event objects\n\n{{index \"button property\", \"event handling\"}}\n\nThough we have ignored it so far, event handler functions are passed an argument: the _((event object))_. This object holds additional information about the event. For example, if we want to know _which_ ((mouse button)) was pressed, we can look at the event object's `button` property.\n\n```{lang: html}\n<button>Click me any way you want</button>\n<script>\n  let button = document.querySelector(\"button\");\n  button.addEventListener(\"mousedown\", event => {\n    if (event.button == 0) {\n      console.log(\"Left button\");\n    } else if (event.button == 1) {\n      console.log(\"Middle button\");\n    } else if (event.button == 2) {\n      console.log(\"Right button\");\n    }\n  });\n</script>\n```\n\n{{index \"event type\", \"type property\"}}\n\nThe information stored in an event object differs per type of event. (We'll discuss different types later in the chapter.) The object's `type` property always holds a string identifying the event (such as `\"click\"` or `\"mousedown\"`).\n\n## Propagation\n\n{{index \"event propagation\", \"parent node\"}}\n\n{{indexsee bubbling, \"event propagation\"}}\n\n{{indexsee propagation, \"event propagation\"}}\n\nFor most event types, handlers registered on nodes with children will also receive events that happen in the children. If a button inside a paragraph is clicked, event handlers on the paragraph will also see the click event.\n\n{{index \"event handling\"}}\n\nBut if both the paragraph and the button have a handler, the more specific handler—the one on the button—gets to go first. The event is said to _propagate_ outward from the node where it happened to that node's parent node and on to the root of the document. Finally, after all handlers registered on a specific node have had their turn, handlers registered on the whole ((window)) get a chance to respond to the event.\n\n{{index \"stopPropagation method\", \"click event\"}}\n\nAt any point, an event handler can call the `stopPropagation` method on the event object to prevent handlers further up from receiving the event. This can be useful when, for example, you have a button inside another clickable element and you don't want clicks on the button to activate the outer element's click behavior.\n\n{{index \"mousedown event\", \"pointer event\"}}\n\nThe following example registers `\"mousedown\"` handlers on both a button and the paragraph around it. When clicked with the right mouse button, the handler for the button calls `stopPropagation`, which will prevent the handler on the paragraph from running. When the button is clicked with another ((mouse button)), both handlers will run.\n\n```{lang: html}\n<p>A paragraph with a <button>button</button>.</p>\n<script>\n  let para = document.querySelector(\"p\");\n  let button = document.querySelector(\"button\");\n  para.addEventListener(\"mousedown\", () => {\n    console.log(\"Handler for paragraph.\");\n  });\n  button.addEventListener(\"mousedown\", event => {\n    console.log(\"Handler for button.\");\n    if (event.button == 2) event.stopPropagation();\n  });\n</script>\n```\n\n{{index \"event propagation\", \"target property\"}}\n\nMost event objects have a `target` property that refers to the node where they originated. You can use this property to ensure that you're not accidentally handling something that propagated up from a node you do not want to handle.\n\nIt is also possible to use the `target` property to cast a wide net for a specific type of event. For example, if you have a node containing a long list of buttons, it may be more convenient to register a single click handler on the outer node and have it use the `target` property to figure out whether a button was clicked, rather than registering individual handlers on all of the buttons.\n\n```{lang: html}\n<button>A</button>\n<button>B</button>\n<button>C</button>\n<script>\n  document.body.addEventListener(\"click\", event => {\n    if (event.target.nodeName == \"BUTTON\") {\n      console.log(\"Clicked\", event.target.textContent);\n    }\n  });\n</script>\n```\n\n## Default actions\n\n{{index scrolling, \"default behavior\", \"event handling\"}}\n\nMany events have a default action. If you click a ((link)), you will be taken to the link's target. If you press the down arrow, the browser will scroll the page down. If you right-click, you'll get a context menu. And so on.\n\n{{index \"preventDefault method\"}}\n\nFor most types of events, the JavaScript event handlers are called _before_ the default behavior takes place. If the handler doesn't want this normal behavior to happen, typically because it has already taken care of handling the event, it can call the `preventDefault` method on the event object.\n\n{{index expectation}}\n\nThis can be used to implement your own ((keyboard)) shortcuts or ((context menu)). It can also be used to obnoxiously interfere with the behavior that users expect. For example, here is a link that cannot be followed:\n\n```{lang: html}\n<a href=\"https://developer.mozilla.org/\">MDN</a>\n<script>\n  let link = document.querySelector(\"a\");\n  link.addEventListener(\"click\", event => {\n    console.log(\"Nope.\");\n    event.preventDefault();\n  });\n</script>\n```\n\n{{index usability}}\n\nTry not to do such things without a really good reason. It'll be unpleasant for people who use your page when expected behavior is broken.\n\nDepending on the browser, some events can't be intercepted at all. On Chrome, for example, the ((keyboard)) shortcut to close the current tab ([ctrl]{keyname}-W or [command]{keyname}-W) cannot be handled by JavaScript.\n\n## Key events\n\n{{index keyboard, \"keydown event\", \"keyup event\", \"event handling\"}}\n\nWhen a key on the keyboard is pressed, your browser fires a `\"keydown\"` event. When it is released, you get a `\"keyup\"` event.\n\n```{lang: html, focus: true}\n<p>This page turns violet when you hold the V key.</p>\n<script>\n  window.addEventListener(\"keydown\", event => {\n    if (event.key == \"v\") {\n      document.body.style.background = \"violet\";\n    }\n  });\n  window.addEventListener(\"keyup\", event => {\n    if (event.key == \"v\") {\n      document.body.style.background = \"\";\n    }\n  });\n</script>\n```\n\n{{index \"repeating key\"}}\n\nDespite its name, `\"keydown\"` fires not only when the key is physically pushed down. When a key is pressed and held, the event fires again every time the key _repeats_. Sometimes you have to be careful about this. For example, if you add a button to the DOM when a key is pressed and remove it again when the key is released, you might accidentally add hundreds of buttons when the key is held down longer.\n\n{{index \"key property\"}}\n\nThe previous example looks at the `key` property of the event object to see which key the event is about. This property holds a string that, for most keys, corresponds to the thing that pressing that key would type. For special keys such as [enter]{keyname}, it holds a string that names the key (`\"Enter\"`, in this case). If you hold [shift]{keyname} while pressing a key, that might also influence the name of the key—`\"v\"` becomes `\"V\"`, and `\"1\"` may become `\"!\"`, if that is what pressing [shift]{keyname}-1 produces on your keyboard.\n\n{{index \"modifier key\", \"shift key\", \"control key\", \"alt key\", \"meta key\", \"command key\", \"ctrlKey property\", \"shiftKey property\", \"altKey property\", \"metaKey property\"}}\n\nModifier keys such as [shift]{keyname}, [ctrl]{keyname}, [alt]{keyname}, and [meta]{keyname} ([command]{keyname} on Mac) generate key events just like normal keys. When looking for key combinations, you can also find out whether these keys are held down by looking at the `shiftKey`, `ctrlKey`, `altKey`, and `metaKey` properties of keyboard and mouse events.\n\n```{lang: html, focus: true}\n<p>Press Control-Space to continue.</p>\n<script>\n  window.addEventListener(\"keydown\", event => {\n    if (event.key == \" \" && event.ctrlKey) {\n      console.log(\"Continuing!\");\n    }\n  });\n</script>\n```\n\n{{index \"button (HTML tag)\", \"tabindex attribute\", [DOM, events]}}\n\nThe DOM node where a key event originates depends on the element that has ((focus)) when the key is pressed. Most nodes cannot have focus unless you give them a `tabindex` attribute, but things like ((link))s, buttons, and form fields can. We'll come back to form ((field))s in [Chapter ?](http#forms). When nothing in particular has focus, `document.body` acts as the target node of key events.\n\nWhen the user is typing text, using key events to figure out what is being typed is problematic. Some platforms, most notably the ((virtual keyboard)) on ((Android)) ((phone))s, don't fire key events. But even when you have an old-fashioned keyboard, some types of text input don't match keypresses in a straightforward way, such as _input method editor_ (_((IME))_) software used by people whose scripts don't fit on a keyboard, where multiple keystrokes are combined to create characters.\n\nTo notice when something was typed, elements that you can type into, such as the `<input>` and `<textarea>` tags, fire `\"input\"` events whenever the user changes their content. To get the actual content that was typed, it is best to directly read it from the focused field, which we discuss in [Chapter ?](http#forms).\n\n## Pointer events\n\nThere are currently two widely used ways to point at things on a screen: mice (including devices that act like mice, such as touchpads and trackballs) and touchscreens. These produce different kinds of events.\n\n### Mouse clicks\n\n{{index \"mousedown event\", \"mouseup event\", \"mouse cursor\"}}\n\nPressing a ((mouse button)) causes a number of events to fire. The `\"mousedown\"` and `\"mouseup\"` events are similar to `\"keydown\"` and `\"keyup\"` and fire when the button is pressed and released. These happen on the DOM nodes that are immediately below the mouse pointer when the event occurs.\n\n{{index \"click event\"}}\n\nAfter the `\"mouseup\"` event, a `\"click\"` event fires on the most specific node that contained both the press and the release of the button. For example, if I press down the mouse button on one paragraph and then move the pointer to another paragraph and release the button, the `\"click\"` event will happen on the element that contains both those paragraphs.\n\n{{index \"dblclick event\", \"double click\"}}\n\nIf two clicks happen close together, a `\"dblclick\"` (double-click) event also fires, after the second click event.\n\n{{index pixel, \"clientX property\", \"clientY property\", \"pageX property\", \"pageY property\", \"event object\"}}\n\nTo get precise information about the place where a mouse event happened, you can look at its `clientX` and `clientY` properties, which contain the event's ((coordinates)) (in pixels) relative to the upper-left corner of the window, or `pageX` and `pageY`, which are relative to the upper-left corner of the whole document (which may be different when the window has been scrolled).\n\n{{index \"border-radius (CSS)\", \"absolute positioning\", \"drawing program example\"}}\n\n{{id mouse_drawing}}\n\nThe following program implements a primitive drawing application. Every time you click the document, it adds a dot under your mouse pointer.\n\n```{lang: html}\n<style>\n  body {\n    height: 200px;\n    background: beige;\n  }\n  .dot {\n    height: 8px; width: 8px;\n    border-radius: 4px; /* rounds corners */\n    background: teal;\n    position: absolute;\n  }\n</style>\n<script>\n  window.addEventListener(\"click\", event => {\n    let dot = document.createElement(\"div\");\n    dot.className = \"dot\";\n    dot.style.left = (event.pageX - 4) + \"px\";\n    dot.style.top = (event.pageY - 4) + \"px\";\n    document.body.appendChild(dot);\n  });\n</script>\n```\n\nWe'll create a less primitive drawing application in [Chapter ?](paint).\n\n### Mouse motion\n\n{{index \"mousemove event\"}}\n\nEvery time the mouse pointer moves, a `\"mousemove\"` event fires. This event can be used to track the position of the mouse. A common situation in which this is useful is when implementing some form of mouse-((dragging)) functionality.\n\n{{index \"draggable bar example\"}}\n\nAs an example, the following program displays a bar and sets up event handlers so that dragging to the left or right on this bar makes it narrower or wider:\n\n```{lang: html, startCode: true}\n<p>Drag the bar to change its width:</p>\n<div style=\"background: orange; width: 60px; height: 20px\">\n</div>\n<script>\n  let lastX; // Tracks the last observed mouse X position\n  let bar = document.querySelector(\"div\");\n  bar.addEventListener(\"mousedown\", event => {\n    if (event.button == 0) {\n      lastX = event.clientX;\n      window.addEventListener(\"mousemove\", moved);\n      event.preventDefault(); // Prevent selection\n    }\n  });\n\n  function moved(event) {\n    if (event.buttons == 0) {\n      window.removeEventListener(\"mousemove\", moved);\n    } else {\n      let dist = event.clientX - lastX;\n      let newWidth = Math.max(10, bar.offsetWidth + dist);\n      bar.style.width = newWidth + \"px\";\n      lastX = event.clientX;\n    }\n  }\n</script>\n```\n\n{{if book\n\nThe resulting page looks like this:\n\n{{figure {url: \"img/drag-bar.png\", alt: \"Picture of a draggable bar\", width: \"5.3cm\"}}}\n\nif}}\n\n{{index \"mouseup event\", \"mousemove event\"}}\n\nNote that the `\"mousemove\"` handler is registered on the whole ((window)). Even if the mouse goes outside of the bar during resizing, as long as the button is held, we still want to update its size.\n\n{{index \"buttons property\", \"button property\", \"bitfield\"}}\n\nWe must stop resizing the bar when the mouse button is released. For that, we can use the `buttons` property (note the plural), which tells us about the buttons that are currently held down. When it is 0, no buttons are down. When buttons are held, the value of the `buttons` property is the sum of the codes for those buttons—the left button has code 1, the right button 2, and the middle one 4. With the left and right buttons held, for example, the value of `buttons` will be 3.\n\nNote that the order of these codes is different from the one used by `button`, where the middle button came before the right one. As mentioned, consistency isn't a strong point of the browser's programming interface.\n\n### Touch events\n\n{{index touch, \"mousedown event\", \"mouseup event\", \"click event\"}}\n\nThe style of graphical browser that we use was designed with mouse interfaces in mind, at a time where touchscreens were rare. To make the web \"work\" on early touchscreen phones, browsers for those devices pretended, to a certain extent, that touch events were mouse events. If you tap your screen, you'll get `\"mousedown\"`, `\"mouseup\"`, and `\"click\"` events.\n\nBut this illusion isn't very robust. A touchscreen doesn't work like a mouse: it doesn't have multiple buttons, you can't track the finger when it isn't on the screen (to simulate `\"mousemove\"`), and it allows multiple fingers to be on the screen at the same time.\n\nMouse events cover touch interaction only in straightforward cases—if you add a `\"click\"` handler to a button, touch users will still be able to use it. But something like the resizeable bar in the previous example does not work on a touchscreen.\n\n{{index \"touchstart event\", \"touchmove event\", \"touchend event\"}}\n\nThere are specific event types fired by touch interaction. When a finger starts touching the screen, you get a `\"touchstart\"` event. When it is moved while touching, `\"touchmove\"` events fire.  Finally, when it stops touching the screen, you'll see a `\"touchend\"` event.\n\n{{index \"touches property\", \"clientX property\", \"clientY property\", \"pageX property\", \"pageY property\"}}\n\nBecause many touchscreens can detect multiple fingers at the same time, these events don't have a single set of coordinates associated with them. Rather, their ((event object))s have a `touches` property, which holds an ((array-like object)) of points, each of which has its own `clientX`, `clientY`, `pageX`, and `pageY` properties.\n\nYou could do something like this to show red circles around every touching finger:\n\n```{lang: html}\n<style>\n  dot { position: absolute; display: block;\n        border: 2px solid red; border-radius: 50px;\n        height: 100px; width: 100px; }\n</style>\n<p>Touch this page</p>\n<script>\n  function update(event) {\n    for (let dot; dot = document.querySelector(\"dot\");) {\n      dot.remove();\n    }\n    for (let i = 0; i < event.touches.length; i++) {\n      let {pageX, pageY} = event.touches[i];\n      let dot = document.createElement(\"dot\");\n      dot.style.left = (pageX - 50) + \"px\";\n      dot.style.top = (pageY - 50) + \"px\";\n      document.body.appendChild(dot);\n    }\n  }\n  window.addEventListener(\"touchstart\", update);\n  window.addEventListener(\"touchmove\", update);\n  window.addEventListener(\"touchend\", update);\n</script>\n```\n\n{{index \"preventDefault method\"}}\n\nYou'll often want to call `preventDefault` in touch event handlers to override the browser's default behavior (which may include scrolling the page on swiping) and to prevent the mouse events from being fired, for which you may _also_ have a handler.\n\n## Scroll events\n\n{{index scrolling, \"scroll event\", \"event handling\"}}\n\nWhenever an element is scrolled, a `\"scroll\"` event is fired on it. This has various uses, such as knowing what the user is currently looking at (for disabling off-screen ((animation))s or sending ((spy)) reports to your evil headquarters) or showing some indication of progress (by highlighting part of a table of contents or showing a page number).\n\nThe following example draws a ((progress bar)) above the document and updates it to fill up as you scroll down:\n\n```{lang: html}\n<style>\n  #progress {\n    border-bottom: 2px solid blue;\n    width: 0;\n    position: fixed;\n    top: 0; left: 0;\n  }\n</style>\n<div id=\"progress\"></div>\n<script>\n  // Create some content\n  document.body.appendChild(document.createTextNode(\n    \"supercalifragilisticexpialidocious \".repeat(1000)));\n\n  let bar = document.querySelector(\"#progress\");\n  window.addEventListener(\"scroll\", () => {\n    let max = document.body.scrollHeight - innerHeight;\n    bar.style.width = `${(pageYOffset / max) * 100}%`;\n  });\n</script>\n```\n\n{{index \"unit (CSS)\", scrolling, \"position (CSS)\", \"fixed positioning\", \"absolute positioning\", percentage, \"repeat method\"}}\n\nGiving an element a `position` of `fixed` acts much like an `absolute` position but also prevents it from scrolling along with the rest of the document. The effect is to make our progress bar stay at the top. Its width is changed to indicate the current progress. We use `%`, rather than `px`, as a unit when setting the width so that the element is sized relative to the page width.\n\n{{index \"innerHeight property\", \"innerWidth property\", \"pageYOffset property\"}}\n\nThe global `innerHeight` binding gives us the height of the window, which we must subtract from the total scrollable height—you can't keep scrolling when you hit the bottom of the document. There's also an `innerWidth` for the window width. By dividing `pageYOffset`, the current scroll position, by the maximum scroll position and multiplying by 100, we get the percentage for the progress bar.\n\n{{index \"preventDefault method\"}}\n\nCalling `preventDefault` on a scroll event does not prevent the scrolling from happening. In fact, the event handler is called only _after_ the scrolling takes place.\n\n## Focus events\n\n{{index \"event handling\", \"focus event\", \"blur event\"}}\n\nWhen an element gains ((focus)), the browser fires a `\"focus\"` event on it. When it loses focus, the element gets a `\"blur\"` event.\n\n{{index \"event propagation\"}}\n\nUnlike the events discussed earlier, these two events do not propagate. A handler on a parent element is not notified when a child element gains or loses focus.\n\n{{index \"input (HTML tag)\", \"help text example\"}}\n\nThe following example displays help text for the ((text field)) that currently has focus:\n\n```{lang: html}\n<p>Name: <input type=\"text\" data-help=\"Your full name\"></p>\n<p>Age: <input type=\"text\" data-help=\"Your age in years\"></p>\n<p id=\"help\"></p>\n\n<script>\n  let help = document.querySelector(\"#help\");\n  let fields = document.querySelectorAll(\"input\");\n  for (let field of Array.from(fields)) {\n    field.addEventListener(\"focus\", event => {\n      let text = event.target.getAttribute(\"data-help\");\n      help.textContent = text;\n    });\n    field.addEventListener(\"blur\", event => {\n      help.textContent = \"\";\n    });\n  }\n</script>\n```\n\n{{if book\n\nThis screenshot shows the help text for the age field:\n\n{{figure {url: \"img/help-field.png\", alt: \"Screenshot of the help text below the age field\", width: \"4.4cm\"}}}\n\nif}}\n\n{{index \"focus event\", \"blur event\"}}\n\nThe ((window)) object will receive `\"focus\"` and `\"blur\"` events when the user moves from or to the browser tab or window in which the document is shown.\n\n## Load event\n\n{{index \"script (HTML tag)\", \"load event\"}}\n\nWhen a page finishes loading, the `\"load\"` event fires on the window and the document body objects. This is often used to schedule ((initialization)) actions that require the whole ((document)) to have been built. Remember that the content of `<script>` tags is run immediately when the tag is encountered. This may be too soon, for example when the script needs to do something with parts of the document that appear after the `<script>` tag.\n\n{{index \"event propagation\", \"img (HTML tag)\"}}\n\nElements such as ((image))s and script tags that load an external file also have a `\"load\"` event that indicates the files they reference were loaded. Like the focus-related events, loading events do not propagate.\n\n{{index \"beforeunload event\", \"page reload\", \"preventDefault method\"}}\n\nWhen you close page or navigate away from it (for example, by following a link), a `\"beforeunload\"` event fires. The main use of this event is to prevent the user from accidentally losing work by closing a document. If you prevent the default behavior on this event _and_ set the `returnValue` property on the event object to a string, the browser will show the user a dialog asking if they really want to leave the page. That dialog might include your string, but because some malicious sites try to use these dialogs to confuse people into staying on their page to look at dodgy weight-loss ads, most browsers no longer display them.\n\n{{id timeline}}\n\n## Events and the event loop\n\n{{index \"requestAnimationFrame function\", \"event handling\", timeline, \"script (HTML tag)\"}}\n\nIn the context of the event loop, as discussed in [Chapter ?](async), browser event handlers behave like other asynchronous notifications. They are scheduled when the event occurs but must wait for other scripts that are running to finish before they get a chance to run.\n\nThe fact that events can be processed only when nothing else is running means that if the event loop is tied up with other work, any interaction with the page (which happens through events) will be delayed until there's time to process it. So if you schedule too much work, either with long-running event handlers or with lots of short-running ones, the page will become slow and cumbersome to use.\n\nFor cases where you _really_ do want to do some time-consuming thing in the background without freezing the page, browsers provide something called _((web worker))s_. A worker is a JavaScript process that runs alongside the main script, on its own timeline.\n\nImagine that squaring a number is a heavy, long-running computation that we want to perform in a separate ((thread)). We could write a file called `code/squareworker.js` that responds to messages by computing a square and sending a message back.\n\n```\naddEventListener(\"message\", event => {\n  postMessage(event.data * event.data);\n});\n```\n\nTo avoid the problems of having multiple ((thread))s touching the same data, workers do not share their ((global scope)) or any other data with the main script's environment. Instead, you have to communicate with them by sending messages back and forth.\n\nThis code spawns a worker running that script, sends it a few messages, and outputs the responses.\n\n```{test: no}\nlet squareWorker = new Worker(\"code/squareworker.js\");\nsquareWorker.addEventListener(\"message\", event => {\n  console.log(\"The worker responded:\", event.data);\n});\nsquareWorker.postMessage(10);\nsquareWorker.postMessage(24);\n```\n\n{{index \"postMessage method\", \"message event\"}}\n\nThe `postMessage` function sends a message, which will cause a `\"message\"` event to fire in the receiver. The script that created the worker sends and receives messages through the `Worker` object, whereas the worker talks to the script that created it by sending and listening directly on its ((global scope)). Only values that can be represented as JSON can be sent as messages—the other side will receive a _copy_ of them, rather than the value itself.\n\n## Timers\n\n{{index timeout, \"setTimeout function\", \"clearTimeout function\"}}\n\nThe `setTimeout` function we saw in [Chapter ?](async) schedules another function to be called later, after a given number of milliseconds. Sometimes you need to cancel a function you have scheduled. You can do this by storing the value returned by `setTimeout` and calling `clearTimeout` on it.\n\n```\nlet bombTimer = setTimeout(() => {\n  console.log(\"BOOM!\");\n}, 500);\n\nif (Math.random() < 0.5) { // 50% chance\n  console.log(\"Defused.\");\n  clearTimeout(bombTimer);\n}\n```\n\n{{index \"cancelAnimationFrame function\", \"requestAnimationFrame function\"}}\n\nThe `cancelAnimationFrame` function works in the same way as `clearTimeout`. Calling it on a value returned by `requestAnimationFrame` will cancel that frame (assuming it hasn't already been called).\n\n{{index \"setInterval function\", \"clearInterval function\", repetition}}\n\nA similar set of functions, `setInterval` and `clearInterval`, are used to set timers that should repeat every _X_ milliseconds.\n\n```\nlet ticks = 0;\nlet clock = setInterval(() => {\n  console.log(\"tick\", ticks++);\n  if (ticks == 10) {\n    clearInterval(clock);\n    console.log(\"stop.\");\n  }\n}, 200);\n```\n\n## Debouncing\n\n{{index optimization, \"mousemove event\", \"scroll event\", blocking}}\n\nSome types of events have the potential to fire rapidly many times in a row, such as the `\"mousemove\"` and `\"scroll\"` events. When handling such events, you must be careful not to do anything too time-consuming or your handler will take up so much time that interaction with the document starts to feel slow.\n\n{{index \"setTimeout function\"}}\n\nIf you do need to do something nontrivial in such a handler, you can use `setTimeout` to make sure you are not doing it too often. This is usually called _((debouncing))_ the event. There are several slightly different approaches to this.\n\n{{index \"textarea (HTML tag)\", \"clearTimeout function\", \"keydown event\"}}\n\nFor example, suppose we want to react when the user has typed something, but we don't want to do it immediately for every input event. When they are ((typing)) quickly, we just want to wait until a pause occurs. Instead of immediately performing an action in the event handler, we set a timeout. We also clear the previous timeout (if any) so that when events occur close together (closer than our timeout delay), the timeout from the previous event will be canceled.\n\n```{lang: html}\n<textarea>Type something here...</textarea>\n<script>\n  let textarea = document.querySelector(\"textarea\");\n  let timeout;\n  textarea.addEventListener(\"input\", () => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => console.log(\"Typed!\"), 500);\n  });\n</script>\n```\n\n{{index \"sloppy programming\"}}\n\nGiving an undefined value to `clearTimeout` or calling it on a timeout that has already fired has no effect. Thus, we don't have to be careful about when to call it, and we simply do so for every event.\n\n{{index \"mousemove event\"}}\n\nWe can use a slightly different pattern if we want to space responses so that they're separated by at least a certain length of ((time)) but want to fire them _during_ a series of events, not just afterward. For example, we might want to respond to `\"mousemove\"` events by showing the current coordinates of the mouse, but only every 250 milliseconds.\n\n```{lang: html}\n<script>\n  let scheduled = null;\n  window.addEventListener(\"mousemove\", event => {\n    if (!scheduled) {\n      setTimeout(() => {\n        document.body.textContent =\n          `Mouse at ${scheduled.pageX}, ${scheduled.pageY}`;\n        scheduled = null;\n      }, 250);\n    }\n    scheduled = event;\n  });\n</script>\n```\n\n## Summary\n\nEvent handlers make it possible to detect and react to events happening in our web page. The `addEventListener` method is used to register such a handler.\n\nEach event has a type (`\"keydown\"`, `\"focus\"`, and so on) that identifies it. Most events are called on a specific DOM element and then propagate to that element's ancestors, allowing handlers associated with those elements to handle them.\n\nWhen an event handler is called, it's passed an event object with additional information about the event. This object also has methods that allow us to stop further propagation (`stopPropagation`) and prevent the browser's default handling of the event (`preventDefault`).\n\nPressing a key fires `\"keydown\"` and `\"keyup\"` events. Pressing a mouse button fires `\"mousedown\"`, `\"mouseup\"`, and `\"click\"` events. Moving the mouse fires `\"mousemove\"` events. Touchscreen interaction will result in `\"touchstart\"`, `\"touchmove\"`, and `\"touchend\"` events.\n\nScrolling can be detected with the `\"scroll\"` event, and focus changes can be detected with the `\"focus\"` and `\"blur\"` events. When the document finishes loading, a `\"load\"` event fires on the window.\n\n## Exercises\n\n### Balloon\n\n{{index \"balloon (exercise)\", \"arrow key\"}}\n\nWrite a page that displays a ((balloon)) (using the balloon ((emoji)), 🎈). When you press the up arrow, it should inflate (grow) 10 percent. When you press the down arrow, it should deflate (shrink) 10 percent.\n\n{{index \"font-size (CSS)\"}}\n\nYou can control the size of text (emoji are text) by setting the `font-size` CSS property (`style.fontSize`) on its parent element. Remember to include a unit in the value—for example, pixels (`10px`).\n\nThe key names of the arrow keys are `\"ArrowUp\"` and `\"ArrowDown\"`. Make sure the keys change only the balloon, without scrolling the page.\n\nOnce you have that working, add a feature where if you blow up the balloon past a certain size, it “explodes”. In this case, exploding means that it is replaced with an 💥 emoji, and the event handler is removed (so that you can't inflate or deflate the explosion).\n\n{{if interactive\n\n```{test: no, lang: html, focus: yes}\n<p>🎈</p>\n\n<script>\n  // Your code here\n</script>\n```\n\nif}}\n\n{{hint\n\n{{index \"keydown event\", \"key property\", \"balloon (exercise)\"}}\n\nYou'll want to register a handler for the `\"keydown\"` event and look at `event.key` to figure out whether the up or down arrow key was pressed.\n\nThe current size can be kept in a binding so that you can base the new size on it. It'll be helpful to define a function that updates the size—both the binding and the style of the balloon in the DOM—so that you can call it from your event handler, and possibly also once when starting, to set the initial size.\n\n{{index \"replaceChild method\", \"textContent property\"}}\n\nYou can change the balloon to an explosion by replacing the text node with another one (using `replaceChild`) or by setting the `textContent` property of its parent node to a new string.\n\nhint}}\n\n### Mouse trail\n\n{{index animation, \"mouse trail (exercise)\"}}\n\nIn JavaScript's early days, which was the high time of ((gaudy home pages)) with lots of animated images, people came up with some truly inspiring ways to use the language. One of these was the _mouse trail_—a series of elements that would follow the mouse pointer as you moved it across the page.\n\n{{index \"absolute positioning\", \"background (CSS)\"}}\n\nIn this exercise, I want you to implement a mouse trail. Use absolutely positioned `<div>` elements with a fixed size and background color (refer to the [code](event#mouse_drawing) in the \"Mouse Clicks\" section for an example). Create a bunch of these elements and, when the mouse moves, display them in the wake of the mouse pointer.\n\n{{index \"mousemove event\"}}\n\nThere are various possible approaches here. You can make your trail as simple or as complex as you want. A simple solution to start with is to keep a fixed number of trail elements and cycle through them, moving the next one to the mouse's current position every time a `\"mousemove\"` event occurs.\n\n{{if interactive\n\n```{lang: html, test: no}\n<style>\n  .trail { /* className for the trail elements */\n    position: absolute;\n    height: 6px; width: 6px;\n    border-radius: 3px;\n    background: teal;\n  }\n  body {\n    height: 300px;\n  }\n</style>\n\n<script>\n  // Your code here.\n</script>\n```\n\nif}}\n\n{{hint\n\n{{index \"mouse trail (exercise)\"}}\n\nCreating the elements is best done with a loop. Append them to the document to make them show up. To be able to access them later to change their position, you'll want to store the elements in an array.\n\n{{index \"mousemove event\", [array, indexing], \"remainder operator\", \"% operator\"}}\n\nCycling through them can be done by keeping a ((counter variable)) and adding 1 to it every time the `\"mousemove\"` event fires. The remainder operator (`% elements.length`) can then be used to get a valid array index to pick the element you want to position during a given event.\n\n{{index simulation, \"requestAnimationFrame function\"}}\n\nAnother interesting effect can be achieved by modeling a simple ((physics)) system. Use the `\"mousemove\"` event only to update a pair of bindings that track the mouse position. Then use `requestAnimationFrame` to simulate the trailing elements being attracted to the position of the mouse pointer. At every animation step, update their position based on their position relative to the pointer (and, optionally, a speed that is stored for each element). Figuring out a good way to do this is up to you.\n\nhint}}\n\n### Tabs\n\n{{index \"tabbed interface (exercise)\"}}\n\nTabbed panels are common in user interfaces. They allow you to select an interface panel by choosing from a number of tabs \"sticking out\" above an element.\n\n{{index \"button (HTML tag)\", \"display (CSS)\", \"hidden element\", \"data attribute\"}}\n\nImplement a simple tabbed interface. Write a function, `asTabs`, that takes a DOM node and creates a tabbed interface showing the child elements of that node. It should insert a list of `<button>` elements at the top of the node, one for each child element, containing text retrieved from the `data-tabname` attribute of the child. All but one of the original children should be hidden (given a `display` style of `none`). The currently visible node can be selected by clicking the buttons.\n\nWhen that works, extend it to style the button for the currently selected tab differently so that it is obvious which tab is selected.\n\n{{if interactive\n\n```{lang: html, test: no}\n<tab-panel>\n  <div data-tabname=\"one\">Tab one</div>\n  <div data-tabname=\"two\">Tab two</div>\n  <div data-tabname=\"three\">Tab three</div>\n</tab-panel>\n<script>\n  function asTabs(node) {\n    // Your code here.\n  }\n  asTabs(document.querySelector(\"tab-panel\"));\n</script>\n```\n\nif}}\n\n{{hint\n\n{{index \"text node\", \"childNodes property\", \"live data structure\", \"tabbed interface (exercise)\", [whitespace, \"in HTML\"]}}\n\nOne pitfall you might run into is that you can't directly use the node's `childNodes` property as a collection of tab nodes. For one thing, when you add the buttons, they will also become child nodes and end up in this object because it is a live data structure. For another, the text nodes created for the whitespace between the nodes are also in `childNodes` but should not get their own tabs. You can use `children` instead of `childNodes` to ignore text nodes.\n\n{{index \"TEXT_NODE code\", \"nodeType property\"}}\n\nYou could start by building up an array of tabs so that you have easy access to them. To implement the styling of the buttons, you could store objects that contain both the tab panel and its button.\n\nI recommend writing a separate function for changing tabs. You can either store the previously selected tab and change only the styles needed to hide that and show the new one, or you can just update the style of all tabs every time a new tab is selected.\n\nYou might want to call this function immediately to make the interface start with the first tab visible.\n\nhint}}\n"
        },
        {
          "name": "16_game.md",
          "type": "blob",
          "size": 47.9951171875,
          "content": "{{meta {load_files: [\"code/chapter/16_game.js\", \"code/levels.js\", \"code/_stop_keys.js\"], zip: \"html include=[\\\"css/game.css\\\"]\"}}}\n\n# Project: A Platform Game\n\n{{quote {author: \"Iain Banks\", title: \"The Player of Games\", chapter: true}\n\nAll reality is a game.\n\nquote}}\n\n{{index \"Banks, Iain\", \"project chapter\", simulation}}\n\n{{figure {url: \"img/chapter_picture_16.jpg\", alt: \"Illustration showing a computer game character jumping over lava in a two dimensional world\", chapter: \"framed\"}}}\n\nMuch of my initial fascination with computers, like that of many nerdy kids, had to do with computer ((game))s. I was drawn into the tiny simulated ((world))s that I could manipulate and in which stories (sort of) unfolded—more, I suppose, because of the way I projected my ((imagination)) into them than because of the possibilities they actually offered.\n\nI don't wish a ((career)) in game programming on anyone. As with the ((music)) industry, the discrepancy between the number of eager young people wanting to work in it and the actual demand for such people creates a rather unhealthy environment. But writing games for fun is amusing.\n\n{{index \"jump-and-run game\", dimensions}}\n\nThis chapter will walk through the implementation of a small ((platform game)). Platform games (or \"jump and run\" games) are games that expect the ((player)) to move a figure through a ((world)), which is usually two-dimensional and viewed from the side, while jumping over and onto things.\n\n## The game\n\n{{index minimalism, \"Palef, Thomas\", \"Dark Blue (game)\"}}\n\nOur ((game)) will be roughly based on [Dark Blue](http://www.lessmilk.com/games/10)[ (_www.lessmilk.com/games/10_)]{if book} by Thomas Palef. I chose that game because it is both entertaining and minimalist and because it can be built without too much ((code)). It looks like this:\n\n{{figure {url: \"img/darkblue.png\", alt: \"Screenshot of the 'Dark Blue' game, showing a world made out of colored boxes. There's a black box representing the player, standing on lines of white against a blue background. Small yellow coins float in the air, and some parts of the background are red, representing lava.\"}}}\n\n{{index coin, lava}}\n\nThe dark ((box)) represents the ((player)), whose task is to collect the yellow boxes (coins) while avoiding the red stuff (lava). A ((level)) is completed when all coins have been collected.\n\n{{index keyboard, jumping}}\n\nThe player can walk around with the left and right arrow keys and can jump with the up arrow. Jumping is this game character's specialty. It can reach several times its own height and can change direction in midair. This may not be entirely realistic, but it helps give the player the feeling of being in direct control of the on-screen ((avatar)).\n\n{{index \"fractional number\", discretization, \"artificial life\", \"electronic life\"}}\n\nThe ((game)) consists of a static ((background)), laid out like a ((grid)), with the moving elements overlaid on that background. Each field on the grid is either empty, solid, or ((lava)). The moving elements are the player, coins, and certain pieces of lava. The positions of these elements are not constrained to the grid—their coordinates may be fractional, allowing smooth ((motion)).\n\n## The technology\n\n{{index \"event handling\", keyboard, [DOM, graphics]}}\n\nWe will use the ((browser)) DOM to display the game, and we'll read user input by handling key events.\n\n{{index rectangle, \"background (CSS)\", \"position (CSS)\", graphics}}\n\nThe screen- and keyboard-related code is only a small part of the work we need to do to build this ((game)). Since everything looks like colored ((box))es, drawing is uncomplicated: we create DOM elements and use styling to give them a background color, size, and position.\n\n{{index \"table (HTML tag)\"}}\n\nWe can represent the background as a table, since it is an unchanging ((grid)) of squares. The free-moving elements can be overlaid using absolutely positioned elements.\n\n{{index performance, [DOM, graphics]}}\n\nIn games and other programs that should animate ((graphics)) and respond to user ((input)) without noticeable delay, ((efficiency)) is important. Although the DOM was not originally designed for high-performance graphics, it is actually better at this than you would expect. You saw some ((animation))s in [Chapter ?](dom#animation). On a modern machine, a simple game like this performs well, even if we don't worry about ((optimization)) very much.\n\n{{index canvas, [DOM, graphics]}}\n\nIn the [next chapter](canvas), we will explore another ((browser)) technology, the `<canvas>` tag, which provides a more traditional way to draw graphics, working in terms of shapes and ((pixel))s rather than DOM elements.\n\n## Levels\n\n{{index dimensions}}\n\nWe'll want a human-readable, human-editable way to specify levels. Since it is okay for everything to start out on a grid, we could use big strings in which each character represents an element—either a part of the background grid or a moving element.\n\nThe plan for a small level might look like this:\n\n```{includeCode: true}\nlet simpleLevelPlan = `\n......................\n..#................#..\n..#..............=.#..\n..#.........o.o....#..\n..#.@......#####...#..\n..#####............#..\n......#++++++++++++#..\n......##############..\n......................`;\n```\n\n{{index level}}\n\nPeriods are empty space, hash (`#`) characters are walls, and plus signs are lava. The ((player))'s starting position is the ((at sign)) (`@`). Every O character is a coin, and the equal sign (`=`) at the top is a block of lava that moves back and forth horizontally.\n\n{{index bouncing}}\n\nWe'll support two additional kinds of moving ((lava)): the pipe character (`|`) creates vertically moving blobs, and `v` indicates _dripping_ lava—vertically moving lava that doesn't bounce back and forth but only moves down, jumping back to its start position when it hits the floor.\n\nA whole ((game)) consists of multiple ((level))s that the ((player)) must complete. A level is completed when all ((coin))s have been collected. If the player touches ((lava)), the current level is restored to its starting position, and the player may try again.\n\n{{id level}}\n\n## Reading a level\n\n{{index \"Level class\"}}\n\nThe following ((class)) stores a ((level)) object. Its argument should be the string that defines the level.\n\n```{includeCode: true}\nclass Level {\n  constructor(plan) {\n    let rows = plan.trim().split(\"\\n\").map(l => [...l]);\n    this.height = rows.length;\n    this.width = rows[0].length;\n    this.startActors = [];\n\n    this.rows = rows.map((row, y) => {\n      return row.map((ch, x) => {\n        let type = levelChars[ch];\n        if (typeof type != \"string\") {\n          let pos = new Vec(x, y);\n          this.startActors.push(type.create(pos, ch));\n          type = \"empty\";\n        }\n        return type;\n      });\n    });\n  }\n}\n```\n\n{{index \"trim method\", \"split method\", [whitespace, trimming]}}\n\nThe `trim` method is used to remove whitespace at the start and end of the plan string. This allows our example plan to start with a newline so that all lines are directly below each other. The remaining string is split on ((newline character))s, and each line is spread into an array, producing arrays of characters.\n\n{{index [array, \"as matrix\"]}}\n\nSo `rows` holds an array of arrays of characters, the rows of the plan. We can derive the level's width and height from these. But we must still separate the moving elements from the background grid. We'll call moving elements _actors_. They'll be stored in an array of objects. The background will be an array of arrays of strings, holding field types such as `\"empty\"`, `\"wall\"`, or `\"lava\"`.\n\n{{index \"map method\"}}\n\nTo create these arrays, we map over the rows and then over their content. Remember that `map` passes the array index as a second argument to the mapping function, which tells us the x- and y-coordinates of a given character. Positions in the game will be stored as pairs of coordinates, with the upper left being 0,0 and each background square being 1 unit high and wide.\n\n{{index \"static method\"}}\n\nTo interpret the characters in the plan, the `Level` constructor uses the `levelChars` object, which, for each character used in the level descriptions, holds a string if it is a background type, and a class if it produces an actor. When `type` is an actor class, its static `create` method is used to create an object, which is added to `startActors`, and the mapping function returns `\"empty\"` for this background square.\n\n{{index \"Vec class\"}}\n\nThe position of the actor is stored as a `Vec` object. This is a two-dimensional vector, an object with `x` and `y` properties, as seen in the exercises of [Chapter ?](object#exercise_vector).\n\n{{index [state, in objects]}}\n\nAs the game runs, actors will end up in different places or even disappear entirely (as coins do when collected). We'll use a `State` class to track the state of a running game.\n\n```{includeCode: true}\nclass State {\n  constructor(level, actors, status) {\n    this.level = level;\n    this.actors = actors;\n    this.status = status;\n  }\n\n  static start(level) {\n    return new State(level, level.startActors, \"playing\");\n  }\n\n  get player() {\n    return this.actors.find(a => a.type == \"player\");\n  }\n}\n```\n\nThe `status` property will switch to `\"lost\"` or `\"won\"` when the game has ended.\n\nThis is again a persistent data structure—updating the game state creates a new state and leaves the old one intact.\n\n## Actors\n\n{{index actor, \"Vec class\", [interface, object]}}\n\nActor objects represent the current position and state of a given moving element (player, coin, or mobile lava) in our game. All actor objects conform to the same interface. They have `size` and `pos` properties holding the size and the coordinates of the upper-left corner of the rectangle representing this actor, and an `update` method.\n\nThis `update` method is used to compute their new state and position after a given time step. It simulates the thing the actor does—moving in response to the arrow keys for the player and bouncing back and forth for the lava—and returns a new, updated actor object.\n\nA `type` property contains a string that identifies the type of the actor—`\"player\"`, `\"coin\"`, or `\"lava\"`. This is useful when drawing the game—the look of the rectangle drawn for an actor is based on its type.\n\nActor classes have a static `create` method that is used by the `Level` constructor to create an actor from a character in the level plan. It is given the coordinates of the character and the character itself, which is necessary because the `Lava` class handles several different characters.\n\n{{id vector}}\n\nThis is the `Vec` class that we'll use for our two-dimensional values, such as the position and size of actors.\n\n```{includeCode: true}\nclass Vec {\n  constructor(x, y) {\n    this.x = x; this.y = y;\n  }\n  plus(other) {\n    return new Vec(this.x + other.x, this.y + other.y);\n  }\n  times(factor) {\n    return new Vec(this.x * factor, this.y * factor);\n  }\n}\n```\n\n{{index \"times method\", multiplication}}\n\nThe `times` method scales a vector by a given number. It will be useful when we need to multiply a speed vector by a time interval to get the distance traveled during that time.\n\nThe different types of actors get their own classes, since their behavior is very different. Let's define these classes. We'll get to their `update` methods later.\n\n{{index simulation, \"Player class\"}}\n\nThe player class has a `speed` property that stores its current speed to simulate momentum and gravity.\n\n```{includeCode: true}\nclass Player {\n  constructor(pos, speed) {\n    this.pos = pos;\n    this.speed = speed;\n  }\n\n  get type() { return \"player\"; }\n\n  static create(pos) {\n    return new Player(pos.plus(new Vec(0, -0.5)),\n                      new Vec(0, 0));\n  }\n}\n\nPlayer.prototype.size = new Vec(0.8, 1.5);\n```\n\nBecause a player is one-and-a-half squares high, its initial position is set to be half a square above the position where the `@` character appeared. This way, its bottom aligns with the bottom of the square where it appeared.\n\nThe `size` property is the same for all instances of `Player`, so we store it on the prototype rather than on the instances themselves. We could have used a ((getter)) like `type`, but that would create and return a new `Vec` object every time the property is read, which would be wasteful. (Strings, being ((immutable)), don't have to be re-created every time they are evaluated.)\n\n{{index \"Lava class\", bouncing}}\n\nWhen constructing a `Lava` actor, we need to initialize the object differently depending on the character it is based on. Dynamic lava moves along at its current speed until it hits an obstacle. At that point, if it has a `reset` property, it will jump back to its start position (dripping). If it does not, it will invert its speed and continue in the other direction (bouncing).\n\nThe `create` method looks at the character that the `Level` constructor passes and creates the appropriate lava actor.\n\n```{includeCode: true}\nclass Lava {\n  constructor(pos, speed, reset) {\n    this.pos = pos;\n    this.speed = speed;\n    this.reset = reset;\n  }\n\n  get type() { return \"lava\"; }\n\n  static create(pos, ch) {\n    if (ch == \"=\") {\n      return new Lava(pos, new Vec(2, 0));\n    } else if (ch == \"|\") {\n      return new Lava(pos, new Vec(0, 2));\n    } else if (ch == \"v\") {\n      return new Lava(pos, new Vec(0, 3), pos);\n    }\n  }\n}\n\nLava.prototype.size = new Vec(1, 1);\n```\n\n{{index \"Coin class\", animation}}\n\n`Coin` actors are relatively simple. They mostly just sit in their place. But to liven up the game a little, they are given a \"wobble\", a slight vertical back-and-forth motion. To track this, a coin object stores a base position as well as a `wobble` property that tracks the ((phase)) of the bouncing motion. Together, these determine the coin's actual position (stored in the `pos` property).\n\n```{includeCode: true}\nclass Coin {\n  constructor(pos, basePos, wobble) {\n    this.pos = pos;\n    this.basePos = basePos;\n    this.wobble = wobble;\n  }\n\n  get type() { return \"coin\"; }\n\n  static create(pos) {\n    let basePos = pos.plus(new Vec(0.2, 0.1));\n    return new Coin(basePos, basePos,\n                    Math.random() * Math.PI * 2);\n  }\n}\n\nCoin.prototype.size = new Vec(0.6, 0.6);\n```\n\n{{index \"Math.random function\", \"random number\", \"Math.sin function\", sine, wave}}\n\nIn [Chapter ?](dom#sin_cos), we saw that `Math.sin` gives us the y-coordinate of a point on a circle. That coordinate goes back and forth in a smooth waveform as we move along the circle, which makes the sine function useful for modeling a wavy motion.\n\n{{index pi}}\n\nTo avoid a situation where all coins move up and down synchronously, the starting phase of each coin is randomized. The period of `Math.sin`'s wave, the width of a wave it produces, is 2π. We multiply the value returned by `Math.random` by that number to give the coin a random starting position on the wave.\n\n{{index map, [object, \"as map\"]}}\n\nWe can now define the `levelChars` object that maps plan characters to either background grid types or actor classes.\n\n```{includeCode: true}\nconst levelChars = {\n  \".\": \"empty\", \"#\": \"wall\", \"+\": \"lava\",\n  \"@\": Player, \"o\": Coin,\n  \"=\": Lava, \"|\": Lava, \"v\": Lava\n};\n```\n\nThat gives us all the parts needed to create a `Level` instance.\n\n```{includeCode: strip_log}\nlet simpleLevel = new Level(simpleLevelPlan);\nconsole.log(`${simpleLevel.width} by ${simpleLevel.height}`);\n// → 22 by 9\n```\n\nThe task ahead is to display such levels on the screen and to model time and motion inside them.\n\n{{id domdisplay}}\n\n## Drawing\n\n{{index graphics, encapsulation, \"DOMDisplay class\", [DOM, graphics]}}\n\nIn the [next chapter](canvas#canvasdisplay), we'll ((display)) the same game in a different way. To make that possible, we put the drawing logic behind an interface and pass it to the game as an argument. That way, we can use the same game program with different new display ((module))s.\n\nA game display object draws a given ((level)) and state. We pass its constructor to the game to allow it to be replaced. The display class we define in this chapter is called `DOMDisplay` because it uses DOM elements to show the level.\n\n{{index \"style attribute\", CSS}}\n\nWe'll be using a style sheet to set the actual colors and other fixed properties of the elements that make up the game. It would also be possible to directly assign to the elements' `style` property when we create them, but that would produce more verbose programs.\n\n{{index \"class attribute\"}}\n\nThe following helper function provides a succinct way to create an element and give it some attributes and child nodes:\n\n```{includeCode: true}\nfunction elt(name, attrs, ...children) {\n  let dom = document.createElement(name);\n  for (let attr of Object.keys(attrs)) {\n    dom.setAttribute(attr, attrs[attr]);\n  }\n  for (let child of children) {\n    dom.appendChild(child);\n  }\n  return dom;\n}\n```\n\nA display is created by giving it a parent element to which it should append itself and a ((level)) object.\n\n```{includeCode: true}\nclass DOMDisplay {\n  constructor(parent, level) {\n    this.dom = elt(\"div\", {class: \"game\"}, drawGrid(level));\n    this.actorLayer = null;\n    parent.appendChild(this.dom);\n  }\n\n  clear() { this.dom.remove(); }\n}\n```\n\n{{index level}}\n\nThe level's ((background)) grid, which never changes, is drawn once. Actors are redrawn every time the display is updated with a given state. The `actorLayer` property will be used to track the element that holds the actors so that they can be easily removed and replaced.\n\n{{index scaling, \"DOMDisplay class\"}}\n\nOur ((coordinates)) and sizes are tracked in ((grid)) units, where a size or distance of 1 means one grid block. When setting ((pixel)) sizes, we will have to scale these coordinates up—everything in the game would be ridiculously small at a single pixel per square. The `scale` constant gives the number of pixels that a single unit takes up on the screen.\n\n```{includeCode: true}\nconst scale = 20;\n\nfunction drawGrid(level) {\n  return elt(\"table\", {\n    class: \"background\",\n    style: `width: ${level.width * scale}px`\n  }, ...level.rows.map(row =>\n    elt(\"tr\", {style: `height: ${scale}px`},\n        ...row.map(type => elt(\"td\", {class: type})))\n  ));\n}\n```\n\n{{index \"table (HTML tag)\", \"tr (HTML tag)\", \"td (HTML tag)\", \"spread operator\"}}\n\nThe `<table>` element's form nicely corresponds to the structure of the `rows` property of the level—each row of the grid is turned into a table row (`<tr>` element). The strings in the grid are used as class names for the table cell (`<td>`) elements. The code uses the spread (triple dot) operator to pass arrays of child nodes to `elt` as separate arguments.\n\n{{id game_css}}\n\nThe following ((CSS)) makes the table look like the background we want:\n\n```{lang: \"css\"}\n.background    { background: rgb(52, 166, 251);\n                 table-layout: fixed;\n                 border-spacing: 0;              }\n.background td { padding: 0;                     }\n.lava          { background: rgb(255, 100, 100); }\n.wall          { background: white;              }\n```\n\n{{index \"padding (CSS)\"}}\n\nSome of these (`table-layout`, `border-spacing`, and `padding`) are used to suppress unwanted default behavior. We don't want the layout of the ((table)) to depend upon the contents of its cells, and we don't want space between the ((table)) cells or padding inside them.\n\n{{index \"background (CSS)\", \"rgb (CSS)\", CSS}}\n\nThe `background` rule sets the background color. CSS allows colors to be specified both as words (`white`) or with a format such as `rgb(R, G, B)`, where the red, green, and blue components of the color are separated into three numbers from 0 to 255. In `rgb(52, 166, 251)`, the red component is 52, green is 166, and blue is 251. Since the blue component is the largest, the resulting color will be bluish. In the `.lava` rule, the first number (red) is the largest.\n\n{{index [DOM, graphics]}}\n\nWe draw each ((actor)) by creating a DOM element for it and setting that element's position and size based on the actor's properties. The values must be multiplied by `scale` to go from game units to pixels.\n\n```{includeCode: true}\nfunction drawActors(actors) {\n  return elt(\"div\", {}, ...actors.map(actor => {\n    let rect = elt(\"div\", {class: `actor ${actor.type}`});\n    rect.style.width = `${actor.size.x * scale}px`;\n    rect.style.height = `${actor.size.y * scale}px`;\n    rect.style.left = `${actor.pos.x * scale}px`;\n    rect.style.top = `${actor.pos.y * scale}px`;\n    return rect;\n  }));\n}\n```\n\n{{index \"position (CSS)\", \"class attribute\"}}\n\nTo give an element more than one class, we separate the class names by spaces. In the following ((CSS)) code, the `actor` class gives the actors their absolute position. Their type name is used as an extra class to give them a color. We don't have to define the `lava` class again because we're reusing the class for the lava grid squares we defined earlier.\n\n```{lang: \"css\"}\n.actor  { position: absolute;            }\n.coin   { background: rgb(241, 229, 89); }\n.player { background: rgb(64, 64, 64);   }\n```\n\n{{index graphics, optimization, efficiency, [state, \"of application\"], [DOM, graphics]}}\n\nThe `syncState` method is used to make the display show a given state. It first removes the old actor graphics, if any, and then redraws the actors in their new positions. It may be tempting to try to reuse the DOM elements for actors, but to make that work, we would need a lot of additional bookkeeping to associate actors with DOM elements and to make sure we remove elements when their actors vanish. Since there will typically be only a handful of actors in the game, redrawing all of them is not expensive.\n\n```{includeCode: true}\nDOMDisplay.prototype.syncState = function(state) {\n  if (this.actorLayer) this.actorLayer.remove();\n  this.actorLayer = drawActors(state.actors);\n  this.dom.appendChild(this.actorLayer);\n  this.dom.className = `game ${state.status}`;\n  this.scrollPlayerIntoView(state);\n};\n```\n\n{{index level, \"class attribute\"}}\n\nBy adding the level's current status as a class name to the wrapper, we can style the player actor slightly differently when the game is won or lost by adding a ((CSS)) rule that takes effect only when the player has an ((ancestor element)) with a given class.\n\n```{lang: \"css\"}\n.lost .player {\n  background: rgb(160, 64, 64);\n}\n.won .player {\n  box-shadow: -4px -7px 8px white, 4px -7px 8px white;\n}\n```\n\n{{index player, \"box shadow (CSS)\"}}\n\nAfter touching ((lava)), the player turns dark red, suggesting scorching. When the last coin has been collected, we add two blurred white shadows—one to the upper left and one to the upper right—to create a white halo effect.\n\n{{id viewport}}\n\n{{index \"position (CSS)\", \"max-width (CSS)\", \"overflow (CSS)\", \"max-height (CSS)\", viewport, scrolling, [DOM, graphics]}}\n\nWe can't assume that the level always fits in the _viewport_, the element into which we draw the game. That is why we need the `scrollPlayerIntoView` call: it ensures that if the level is protruding outside the viewport, we scroll that viewport to make sure the player is near its center. The following ((CSS)) gives the game's wrapping DOM element a maximum size and ensures that anything that sticks out of the element's box is not visible. We also give it a relative position so that the actors inside it are positioned relative to the level's upper-left corner.\n\n```{lang: css}\n.game {\n  overflow: hidden;\n  max-width: 600px;\n  max-height: 450px;\n  position: relative;\n}\n```\n\n{{index scrolling}}\n\nIn the `scrollPlayerIntoView` method, we find the player's position and update the wrapping element's scroll position. We change the scroll position by manipulating that element's `scrollLeft` and `scrollTop` properties when the player is too close to the edge.\n\n```{includeCode: true}\nDOMDisplay.prototype.scrollPlayerIntoView = function(state) {\n  let width = this.dom.clientWidth;\n  let height = this.dom.clientHeight;\n  let margin = width / 3;\n\n  // The viewport\n  let left = this.dom.scrollLeft, right = left + width;\n  let top = this.dom.scrollTop, bottom = top + height;\n\n  let player = state.player;\n  let center = player.pos.plus(player.size.times(0.5))\n                         .times(scale);\n\n  if (center.x < left + margin) {\n    this.dom.scrollLeft = center.x - margin;\n  } else if (center.x > right - margin) {\n    this.dom.scrollLeft = center.x + margin - width;\n  }\n  if (center.y < top + margin) {\n    this.dom.scrollTop = center.y - margin;\n  } else if (center.y > bottom - margin) {\n    this.dom.scrollTop = center.y + margin - height;\n  }\n};\n```\n\n{{index center, coordinates, readability}}\n\nThe way the player's center is found shows how the methods on our `Vec` type allow computations with objects to be written in a relatively readable way. To find the actor's center, we add its position (its upper-left corner) and half its size. That is the center in level coordinates, but we need it in pixel coordinates, so we then multiply the resulting vector by our display scale.\n\n{{index validation}}\n\nNext, a series of checks verifies that the player position isn't outside of the allowed range. Note that sometimes this will set nonsense scroll coordinates that are below zero or beyond the element's scrollable area. This is okay—the DOM will constrain them to acceptable values. Setting `scrollLeft` to `-10` will cause it to become `0`.\n\nWhile it would have been slightly simpler to always try to scroll the player to the center of the ((viewport)), this creates a rather jarring effect. As you are jumping, the view will constantly shift up and down. It's more pleasant to have a \"neutral\" area in the middle of the screen where you can move around without causing any scrolling.\n\n{{index [game, screenshot]}}\n\nWe are now able to display our tiny level.\n\n```{lang: html}\n<link rel=\"stylesheet\" href=\"css/game.css\">\n\n<script>\n  let simpleLevel = new Level(simpleLevelPlan);\n  let display = new DOMDisplay(document.body, simpleLevel);\n  display.syncState(State.start(simpleLevel));\n</script>\n```\n\n{{if book\n\n{{figure {url: \"img/game_simpleLevel.png\", alt: \"Screenshot of the rendered level\", width: \"7cm\"}}}\n\nif}}\n\n{{index \"link (HTML tag)\", CSS}}\n\nThe `<link>` tag, when used with `rel=\"stylesheet\"`, is a way to load a CSS file into a page. The file `game.css` contains the styles necessary for our game.\n\n## Motion and collision\n\n{{index physics, [animation, \"platform game\"]}}\n\nNow we're at the point where we can start adding motion. The basic approach taken by most games like this is to split ((time)) into small steps and, for each step, move the actors by a distance corresponding to their speed multiplied by the size of the time step. We'll measure time in seconds, so speeds are expressed in units per second.\n\n{{index obstacle, \"collision detection\"}}\n\nMoving things is easy. The difficult part is dealing with the interactions between the elements. When the player hits a wall or floor, they should not simply move through it. The game must notice when a given motion causes an object to hit another object and respond accordingly. For walls, the motion must be stopped. When hitting a coin, that coin must be collected. When touching lava, the game should be lost.\n\nSolving this for the general case is a major task. You can find libraries, usually called _((physics engine))s_, that simulate interaction between physical objects in two or three ((dimensions)). We'll take a more modest approach in this chapter, handling only collisions between rectangular objects and handling them in a rather simplistic way.\n\n{{index bouncing, \"collision detection\", [animation, \"platform game\"]}}\n\nBefore moving the ((player)) or a block of ((lava)), we test whether the motion would take it inside of a wall. If it does, we simply cancel the motion altogether. The response to such a collision depends on the type of actor—the player will stop, whereas a lava block will bounce back.\n\n{{index discretization}}\n\nThis approach requires our ((time)) steps to be rather small, since it will cause motion to stop before the objects actually touch. If the time steps (and thus the motion steps) are too big, the player would end up hovering a noticeable distance above the ground. Another approach, arguably better but more complicated, would be to find the exact collision spot and move there. We will take the simple approach and hide its problems by ensuring the animation proceeds in small steps.\n\n{{index obstacle, \"touches method\", \"collision detection\"}}\n\n{{id touches}}\n\nThis method tells us whether a ((rectangle)) (specified by a position and a size) touches a grid element of the given type.\n\n```{includeCode: true}\nLevel.prototype.touches = function(pos, size, type) {\n  let xStart = Math.floor(pos.x);\n  let xEnd = Math.ceil(pos.x + size.x);\n  let yStart = Math.floor(pos.y);\n  let yEnd = Math.ceil(pos.y + size.y);\n\n  for (let y = yStart; y < yEnd; y++) {\n    for (let x = xStart; x < xEnd; x++) {\n      let isOutside = x < 0 || x >= this.width ||\n                      y < 0 || y >= this.height;\n      let here = isOutside ? \"wall\" : this.rows[y][x];\n      if (here == type) return true;\n    }\n  }\n  return false;\n};\n```\n\n{{index \"Math.floor function\", \"Math.ceil function\"}}\n\nThe method computes the set of grid squares that the body ((overlap))s with by using `Math.floor` and `Math.ceil` on its ((coordinates)). Remember that ((grid)) squares are 1 by 1 units in size. By ((rounding)) the sides of a box up and down, we get the range of ((background)) squares that the box touches.\n\n{{figure {url: \"img/game-grid.svg\", alt: \"Diagram showing a grid with a black box overlaid on it. All of the grid squares that are partially covered by the block are marked.\", width: \"3cm\"}}}\n\nWe loop over the block of ((grid)) squares found by ((rounding)) the ((coordinates)) and return `true` when a matching square is found. Squares outside of the level are always treated as `\"wall\"` to ensure that the player can't leave the world and that we won't accidentally try to read outside of the bounds of our `rows` array.\n\nThe state `update` method uses `touches` to figure out whether the player is touching lava.\n\n```{includeCode: true}\nState.prototype.update = function(time, keys) {\n  let actors = this.actors\n    .map(actor => actor.update(time, this, keys));\n  let newState = new State(this.level, actors, this.status);\n\n  if (newState.status != \"playing\") return newState;\n\n  let player = newState.player;\n  if (this.level.touches(player.pos, player.size, \"lava\")) {\n    return new State(this.level, actors, \"lost\");\n  }\n\n  for (let actor of actors) {\n    if (actor != player && overlap(actor, player)) {\n      newState = actor.collide(newState);\n    }\n  }\n  return newState;\n};\n```\n\nThe method is passed a time step and a data structure that tells it which keys are being held down. The first thing it does is call the `update` method on all actors, producing an array of updated actors. The actors also get the time step, the keys, and the state so that they can base their update on those. Only the player will actually read keys, since that's the only actor that's controlled by the keyboard.\n\nIf the game is already over, no further processing has to be done (the game can't be won after being lost, or vice versa). Otherwise, the method tests whether the player is touching background lava. If so, the game is lost and we're done. Finally, if the game really is still going on, it sees whether any other actors overlap the player.\n\nOverlap between actors is detected with the `overlap` function. It takes two actor objects and returns `true` when they touch—which is the case when they overlap both along the x-axis and along the y-axis.\n\n```{includeCode: true}\nfunction overlap(actor1, actor2) {\n  return actor1.pos.x + actor1.size.x > actor2.pos.x &&\n         actor1.pos.x < actor2.pos.x + actor2.size.x &&\n         actor1.pos.y + actor1.size.y > actor2.pos.y &&\n         actor1.pos.y < actor2.pos.y + actor2.size.y;\n}\n```\n\nIf any actor does overlap, its `collide` method gets a chance to update the state. Touching a lava actor sets the game status to `\"lost\"`. Coins vanish when you touch them and set the status to `\"won\"` when they are the last coin of the level.\n\n```{includeCode: true}\nLava.prototype.collide = function(state) {\n  return new State(state.level, state.actors, \"lost\");\n};\n\nCoin.prototype.collide = function(state) {\n  let filtered = state.actors.filter(a => a != this);\n  let status = state.status;\n  if (!filtered.some(a => a.type == \"coin\")) status = \"won\";\n  return new State(state.level, filtered, status);\n};\n```\n\n{{id actors}}\n\n## Actor updates\n\n{{index actor, \"Lava class\", lava}}\n\nActor objects' `update` methods take as arguments the time step, the state object, and a `keys` object. The one for the `Lava` actor type ignores the `keys` object.\n\n```{includeCode: true}\nLava.prototype.update = function(time, state) {\n  let newPos = this.pos.plus(this.speed.times(time));\n  if (!state.level.touches(newPos, this.size, \"wall\")) {\n    return new Lava(newPos, this.speed, this.reset);\n  } else if (this.reset) {\n    return new Lava(this.reset, this.speed, this.reset);\n  } else {\n    return new Lava(this.pos, this.speed.times(-1));\n  }\n};\n```\n\n{{index bouncing, multiplication, \"Vec class\", \"collision detection\"}}\n\nThis `update` method computes a new position by adding the product of the ((time)) step and the current speed to its old position. If no obstacle blocks that new position, it moves there. If there is an obstacle, the behavior depends on the type of the ((lava)) block—dripping lava has a `reset` position, to which it jumps back when it hits something. Bouncing lava inverts its speed by multiplying it by `-1` so that it starts moving in the opposite direction.\n\n{{index \"Coin class\", coin, wave}}\n\nCoins use their `update` method to wobble. They ignore collisions with the grid, since they are simply wobbling around inside of their own square.\n\n```{includeCode: true}\nconst wobbleSpeed = 8, wobbleDist = 0.07;\n\nCoin.prototype.update = function(time) {\n  let wobble = this.wobble + time * wobbleSpeed;\n  let wobblePos = Math.sin(wobble) * wobbleDist;\n  return new Coin(this.basePos.plus(new Vec(0, wobblePos)),\n                  this.basePos, wobble);\n};\n```\n\n{{index \"Math.sin function\", sine, phase}}\n\nThe `wobble` property is incremented to track time and then used as an argument to `Math.sin` to find the new position on the ((wave)). The coin's current position is then computed from its base position and an offset based on this wave.\n\n{{index \"collision detection\", \"Player class\"}}\n\nThat leaves the ((player)) itself. Player motion is handled separately per ((axis)) because hitting the floor should not prevent horizontal motion, and hitting a wall should not stop falling or jumping motion.\n\n```{includeCode: true}\nconst playerXSpeed = 7;\nconst gravity = 30;\nconst jumpSpeed = 17;\n\nPlayer.prototype.update = function(time, state, keys) {\n  let xSpeed = 0;\n  if (keys.ArrowLeft) xSpeed -= playerXSpeed;\n  if (keys.ArrowRight) xSpeed += playerXSpeed;\n  let pos = this.pos;\n  let movedX = pos.plus(new Vec(xSpeed * time, 0));\n  if (!state.level.touches(movedX, this.size, \"wall\")) {\n    pos = movedX;\n  }\n\n  let ySpeed = this.speed.y + time * gravity;\n  let movedY = pos.plus(new Vec(0, ySpeed * time));\n  if (!state.level.touches(movedY, this.size, \"wall\")) {\n    pos = movedY;\n  } else if (keys.ArrowUp && ySpeed > 0) {\n    ySpeed = -jumpSpeed;\n  } else {\n    ySpeed = 0;\n  }\n  return new Player(pos, new Vec(xSpeed, ySpeed));\n};\n```\n\n{{index [animation, \"platform game\"], keyboard}}\n\nThe horizontal motion is computed based on the state of the left and right arrow keys. When there's no wall blocking the new position created by this motion, it is used. Otherwise, the old position is kept.\n\n{{index acceleration, physics}}\n\nVertical motion works in a similar way but has to simulate ((jumping)) and ((gravity)). The player's vertical speed (`ySpeed`) is first accelerated to account for ((gravity)).\n\n{{index \"collision detection\", keyboard, jumping}}\n\nWe check for walls again. If we don't hit any, the new position is used. If there _is_ a wall, there are two possible outcomes. When the up arrow is pressed _and_ we are moving down (meaning the thing we hit is below us), the speed is set to a relatively large, negative value. This causes the player to jump. If that is not the case, the player simply bumped into something, and the speed is set to zero.\n\nThe gravity strength, ((jumping)) speed, and other ((constant))s in the game were determined by simply trying out some numbers and seeing which ones felt right. You can try experimenting with them.\n\n## Tracking keys\n\n{{index keyboard}}\n\nFor a ((game)) like this, we do not want keys to take effect once per keypress. Rather, we want their effect (moving the player figure) to stay active as long as they are held.\n\n{{index \"preventDefault method\"}}\n\nWe need to set up a key handler that stores the current state of the left, right, and up arrow keys. We will also want to call `preventDefault` for those keys so that they don't end up ((scrolling)) the page.\n\n{{index \"trackKeys function\", \"key code\", \"event handling\", \"addEventListener method\"}}\n\nThe following function, when given an array of key names, will return an object that tracks the current position of those keys. It registers event handlers for `\"keydown\"` and `\"keyup\"` events and, when the key code in the event is present in the set of codes that it is tracking, updates the object.\n\n```{includeCode: true}\nfunction trackKeys(keys) {\n  let down = Object.create(null);\n  function track(event) {\n    if (keys.includes(event.key)) {\n      down[event.key] = event.type == \"keydown\";\n      event.preventDefault();\n    }\n  }\n  window.addEventListener(\"keydown\", track);\n  window.addEventListener(\"keyup\", track);\n  return down;\n}\n\nconst arrowKeys =\n  trackKeys([\"ArrowLeft\", \"ArrowRight\", \"ArrowUp\"]);\n```\n\n{{index \"keydown event\", \"keyup event\"}}\n\nThe same handler function is used for both event types. It looks at the event object's `type` property to determine whether the key state should be updated to true (`\"keydown\"`) or false (`\"keyup\"`).\n\n{{id runAnimation}}\n\n## Running the game\n\n{{index \"requestAnimationFrame function\", [animation, \"platform game\"]}}\n\nThe `requestAnimationFrame` function, which we saw in [Chapter ?](dom#animationFrame), provides a good way to animate a game. But its interface is quite primitive—using it requires us to track the time at which our function was called the last time around and call `requestAnimationFrame` again after every frame.\n\n{{index \"runAnimation function\", \"callback function\", [function, \"as value\"], [function, \"higher-order\"], [animation, \"platform game\"]}}\n\nLet's define a helper function that wraps all that in a convenient interface and allows us to simply call `runAnimation`, giving it a function that expects a time difference as an argument and draws a single frame. When the frame function returns the value `false`, the animation stops.\n\n```{includeCode: true}\nfunction runAnimation(frameFunc) {\n  let lastTime = null;\n  function frame(time) {\n    if (lastTime != null) {\n      let timeStep = Math.min(time - lastTime, 100) / 1000;\n      if (frameFunc(timeStep) === false) return;\n    }\n    lastTime = time;\n    requestAnimationFrame(frame);\n  }\n  requestAnimationFrame(frame);\n}\n```\n\n{{index time, discretization}}\n\nI have set a maximum frame step of 100 milliseconds (one-tenth of a second). When the browser tab or window with our page is hidden, `requestAnimationFrame` calls will be suspended until the tab or window is shown again. In this case, the difference between `lastTime` and `time` will be the entire time in which the page was hidden. Advancing the game by that much in a single step would look silly and might cause weird side effects, such as the player falling through the floor.\n\nThe function also converts the time steps to seconds, which are an easier quantity to think about than milliseconds.\n\n{{index \"callback function\", \"runLevel function\", [animation, \"platform game\"]}}\n\nThe `runLevel` function takes a `Level` object and a ((display)) constructor and returns a promise. It displays the level (in `document.body`) and lets the user play through it. When the level is finished (lost or won), `runLevel` waits one more second (to let the user see what happens) and then clears the display, stops the animation, and resolves the promise to the game's end status.\n\n```{includeCode: true}\nfunction runLevel(level, Display) {\n  let display = new Display(document.body, level);\n  let state = State.start(level);\n  let ending = 1;\n  return new Promise(resolve => {\n    runAnimation(time => {\n      state = state.update(time, arrowKeys);\n      display.syncState(state);\n      if (state.status == \"playing\") {\n        return true;\n      } else if (ending > 0) {\n        ending -= time;\n        return true;\n      } else {\n        display.clear();\n        resolve(state.status);\n        return false;\n      }\n    });\n  });\n}\n```\n\n{{index \"runGame function\"}}\n\nA game is a sequence of ((level))s. Whenever the ((player)) dies, the current level is restarted. When a level is completed, we move on to the next level. This can be expressed by the following function, which takes an array of level plans (strings) and a ((display)) constructor:\n\n```{includeCode: true}\nasync function runGame(plans, Display) {\n  for (let level = 0; level < plans.length;) {\n    let status = await runLevel(new Level(plans[level]),\n                                Display);\n    if (status == \"won\") level++;\n  }\n  console.log(\"You've won!\");\n}\n```\n\n{{index \"asynchronous programming\", \"event handling\"}}\n\nBecause we made `runLevel` return a promise, `runGame` can be written using an `async` function, as shown in [Chapter ?](async). It returns another promise, which resolves when the player finishes the game.\n\n{{index game, \"GAME_LEVELS dataset\"}}\n\nThere is a set of ((level)) plans available in the `GAME_LEVELS` binding in [this chapter's sandbox](https://eloquentjavascript.net/code#16)[ ([_https://eloquentjavascript.net/code#16_](https://eloquentjavascript.net/code#16))]{if book}. This page feeds them to `runGame`, starting an actual game.\n\n```{sandbox: null, focus: yes, lang: html, startCode: true}\n<link rel=\"stylesheet\" href=\"css/game.css\">\n\n<body>\n  <script>\n    runGame(GAME_LEVELS, DOMDisplay);\n  </script>\n</body>\n```\n\n{{if interactive\n\nSee if you can beat those. I had fun building them.\n\nif}}\n\n## Exercises\n\n### Game over\n\n{{index \"lives (exercise)\", game}}\n\nIt's traditional for ((platform game))s to have the player start with a limited number of _lives_ and subtract one life each time they die. When the player is out of lives, the game restarts from the beginning.\n\n{{index \"runGame function\"}}\n\nAdjust `runGame` to implement lives. Have the player start with three. Output the current number of lives (using `console.log`) every time a level starts.\n\n{{if interactive\n\n```{lang: html, test: no, focus: yes}\n<link rel=\"stylesheet\" href=\"css/game.css\">\n\n<body>\n<script>\n  // The old runGame function. Modify it...\n  async function runGame(plans, Display) {\n    for (let level = 0; level < plans.length;) {\n      let status = await runLevel(new Level(plans[level]),\n                                  Display);\n      if (status == \"won\") level++;\n    }\n    console.log(\"You've won!\");\n  }\n  runGame(GAME_LEVELS, DOMDisplay);\n</script>\n</body>\n```\n\nif}}\n\n### Pausing the game\n\n{{index \"pausing (exercise)\", \"escape key\", keyboard, \"runLevel function\", \"event handling\"}}\n\nMake it possible to pause (suspend) and unpause the game by pressing [esc]{keyname}. You can do this by changing the `runLevel` function to set up a keyboard event handler that interrupts or resumes the animation whenever [esc]{keyname} is hit.\n\n{{index \"runAnimation function\"}}\n\nThe `runAnimation` interface may not look like it is suitable for this at first glance, but it is if you rearrange the way `runLevel` calls it.\n\n{{index [binding, global], \"trackKeys function\"}}\n\nWhen you have that working, there's something else you can try. The way we've been registering keyboard event handlers is somewhat problematic. The `arrowKeys` object is currently a global binding, and its event handlers are kept around even when no game is running. You could say they _((leak))_ out of our system. Extend `trackKeys` to provide a way to unregister its handlers, then change `runLevel` to register its handlers when it starts and unregister them again when it is finished.\n\n{{if interactive\n\n```{lang: html, focus: yes, test: no}\n<link rel=\"stylesheet\" href=\"css/game.css\">\n\n<body>\n<script>\n  // The old runLevel function. Modify this...\n  function runLevel(level, Display) {\n    let display = new Display(document.body, level);\n    let state = State.start(level);\n    let ending = 1;\n    return new Promise(resolve => {\n      runAnimation(time => {\n        state = state.update(time, arrowKeys);\n        display.syncState(state);\n        if (state.status == \"playing\") {\n          return true;\n        } else if (ending > 0) {\n          ending -= time;\n          return true;\n        } else {\n          display.clear();\n          resolve(state.status);\n          return false;\n        }\n      });\n    });\n  }\n  runGame(GAME_LEVELS, DOMDisplay);\n</script>\n</body>\n```\n\nif}}\n\n{{hint\n\n{{index \"pausing (exercise)\", [animation, \"platform game\"]}}\n\nAn animation can be interrupted by returning `false` from the function given to `runAnimation`. It can be continued by calling `runAnimation` again.\n\n{{index closure}}\n\nSo we need to communicate the fact that we are pausing the game to the function given to `runAnimation`. For that, you can use a binding that both the event handler and that function have access to.\n\n{{index \"event handling\", \"removeEventListener method\", [function, \"as value\"]}}\n\nWhen finding a way to unregister the handlers registered by `trackKeys`, remember that the _exact_ same function value that was passed to `addEventListener` must be passed to `removeEventListener` to successfully remove a handler. Thus, the `handler` function value created in `trackKeys` must be available to the code that unregisters the handlers.\n\nYou can add a property to the object returned by `trackKeys`, containing either that function value or a method that handles the unregistering directly.\n\nhint}}\n\n### A monster\n\n{{index \"monster (exercise)\"}}\n\nIt is traditional for platform games to have enemies that you can defeat by jumping on top of them. This exercise asks you to add such an actor type to the game.\n\nWe'll call this actor a monster. Monsters move only horizontally. You can make them move in the direction of the player, bounce back and forth like horizontal lava, or have any other movement pattern you want. The class doesn't have to handle falling, but it should make sure the monster doesn't walk through walls.\n\nWhen a monster touches the player, the effect depends on whether the player is jumping on top of them or not. You can approximate this by checking whether the player's bottom is near the monster's top. If this is the case, the monster disappears. If not, the game is lost.\n\n{{if interactive\n\n```{test: no, lang: html, focus: yes}\n<link rel=\"stylesheet\" href=\"css/game.css\">\n<style>.monster { background: purple }</style>\n\n<body>\n  <script>\n    // Complete the constructor, update, and collide methods\n    class Monster {\n      constructor(pos, /* ... */) {}\n\n      get type() { return \"monster\"; }\n\n      static create(pos) {\n        return new Monster(pos.plus(new Vec(0, -1)));\n      }\n\n      update(time, state) {}\n\n      collide(state) {}\n    }\n\n    Monster.prototype.size = new Vec(1.2, 2);\n\n    levelChars[\"M\"] = Monster;\n\n    runLevel(new Level(`\n..................................\n.################################.\n.#..............................#.\n.#..............................#.\n.#..............................#.\n.#...........................o..#.\n.#..@...........................#.\n.##########..............########.\n..........#..o..o..o..o..#........\n..........#...........M..#........\n..........################........\n..................................\n`), DOMDisplay);\n  </script>\n</body>\n```\n\nif}}\n\n{{hint\n\n{{index \"monster (exercise)\", \"persistent data structure\"}}\n\nIf you want to implement a type of motion that is stateful, such as bouncing, make sure you store the necessary state in the actor object—include it as a constructor argument and add it as a property.\n\nRemember that `update` returns a _new_ object rather than changing the old one.\n\n{{index \"collision detection\"}}\n\nWhen handling collision, find the player in `state.actors` and compare its position to the monster's position. To get the _bottom_ of the player, you have to add its vertical size to its vertical position. The creation of an updated state will resemble either `Coin`'s `collide` method (removing the actor) or `Lava`'s (changing the status to `\"lost\"`), depending on the player position.\n\nhint}}\n"
        },
        {
          "name": "17_canvas.md",
          "type": "blob",
          "size": 52.6513671875,
          "content": "{{meta {load_files: [\"code/chapter/16_game.js\", \"code/levels.js\", \"code/_stop_keys.js\", \"code/chapter/17_canvas.js\"], zip: \"html include=[\\\"img/player.png\\\", \\\"img/sprites.png\\\"]\"}}}\n\n# Drawing on Canvas\n\n{{quote {author: \"M.C. Escher\", title: \"cited by Bruno Ernst in The Magic Mirror of M.C. Escher\", chapter: true}\n\nDrawing is deception.\n\nquote}}\n\n{{index \"Escher, M.C.\"}}\n\n{{figure {url: \"img/chapter_picture_17.jpg\", alt: \"Illustration showing an industrial-looking robot arm drawing a city on a piece of paper\", chapter: \"framed\"}}}\n\n{{index CSS, \"transform (CSS)\", [DOM, graphics]}}\n\nBrowsers give us several ways to display ((graphics)). The simplest way is to use styles to position and color regular DOM elements. This can get us quite far, as the game in the [previous chapter](game) showed. By adding partially transparent background ((image))s to the nodes, we can make them look exactly the way we want. It is even possible to rotate or skew nodes with the `transform` style.\n\nBut we'd be using the DOM for something that it wasn't originally designed for. Some tasks, such as drawing a ((line)) between arbitrary points, are extremely awkward to do with regular HTML elements.\n\n{{index SVG, \"img (HTML tag)\"}}\n\nThere are two alternatives. The first is DOM based but utilizes _Scalable Vector Graphics_ (SVG) rather than HTML. Think of SVG as a ((document))-markup dialect that focuses on ((shape))s rather than text. You can embed an SVG document directly in an HTML document or include it with an `<img>` tag.\n\n{{index clearing, [DOM graphics], [interface, canvas]}}\n\nThe second alternative is called a _((canvas))_. A canvas is a single DOM element that encapsulates a ((picture)). It provides a programming interface for drawing ((shape))s onto the space taken up by the node. The main difference between a canvas and an SVG picture is that in SVG the original description of the shapes is preserved so that they can be moved or resized at any time. A canvas, on the other hand, converts the shapes to ((pixel))s (colored dots on a raster) as soon as they are drawn and does not remember what these pixels represent. The only way to move a shape on a canvas is to clear the canvas (or the part of the canvas around the shape) and redraw it with the shape in a new position.\n\n## SVG\n\nThis book won't go into ((SVG)) in detail, but I'll briefly explain how it works. At the [end of the chapter](canvas#graphics_tradeoffs), I'll come back to the trade-offs that you must consider when deciding which ((drawing)) mechanism is appropriate for a given application.\n\nThis is an HTML document with a simple SVG ((picture)) in it:\n\n```{lang: html, sandbox: \"svg\"}\n<p>Normal HTML here.</p>\n<svg xmlns=\"http://www.w3.org/2000/svg\">\n  <circle r=\"50\" cx=\"50\" cy=\"50\" fill=\"red\"/>\n  <rect x=\"120\" y=\"5\" width=\"90\" height=\"90\"\n        stroke=\"blue\" fill=\"none\"/>\n</svg>\n```\n\n{{index \"circle (SVG tag)\", \"rect (SVG tag)\", \"XML namespace\", XML, \"xmlns attribute\"}}\n\nThe `xmlns` attribute changes an element (and its children) to a different _XML namespace_. This namespace, identified by a ((URL)), specifies the dialect that we are currently speaking. The `<circle>` and `<rect>` tags, which do not exist in HTML, do have a meaning in SVG—they draw shapes using the style and position specified by their attributes.\n\n{{if book\n\nThe document is displayed like this:\n\n{{figure {url: \"img/svg-demo.png\", alt: \"Screenshot showing an SVG image embedded in an HTML document\", width: \"4.5cm\"}}}\n\nif}}\n\n{{index [DOM, graphics]}}\n\nThese tags create DOM elements, just like HTML tags, that scripts can interact with. For example, this changes the `<circle>` element to be ((color))ed cyan instead:\n\n```{sandbox: \"svg\"}\nlet circle = document.querySelector(\"circle\");\ncircle.setAttribute(\"fill\", \"cyan\");\n```\n\n## The canvas element\n\n{{index [canvas, size], \"canvas (HTML tag)\"}}\n\nCanvas ((graphics)) can be drawn onto a `<canvas>` element. You can give such an element `width` and `height` attributes to determine its size in ((pixel))s.\n\nA new canvas is empty, meaning it is entirely ((transparent)) and thus shows up as empty space in the document.\n\n{{index \"2d (canvas context)\", \"webgl (canvas context)\", OpenGL, [canvas, context], dimensions, [interface, canvas]}}\n\nThe `<canvas>` tag is intended to allow different styles of ((drawing)). To get access to an actual drawing interface, we first need to create a _((context))_, an object whose methods provide the drawing interface. There are currently three widely supported drawing styles: `\"2d\"` for two-dimensional graphics, `\"webgl\"` for three-dimensional graphics through the OpenGL interface, and `\"webgpu\"`, a more modern and flexible alternative to WebGL.\n\n{{index rendering, graphics, efficiency}}\n\nThis book won't discuss WebGL or WebGPU—we'll stick to two dimensions. But if you are interested in three-dimensional graphics, I do encourage you to look into WebGPU. It provides a direct interface to graphics hardware and allows you to render even complicated scenes efficiently, using JavaScript.\n\n{{index \"getContext method\", [canvas, context]}}\n\nYou create a ((context)) with the `getContext` method on the `<canvas>` DOM element.\n\n```{lang: html}\n<p>Before canvas.</p>\n<canvas width=\"120\" height=\"60\"></canvas>\n<p>After canvas.</p>\n<script>\n  let canvas = document.querySelector(\"canvas\");\n  let context = canvas.getContext(\"2d\");\n  context.fillStyle = \"red\";\n  context.fillRect(10, 10, 100, 50);\n</script>\n```\n\nAfter creating the context object, the example draws a red ((rectangle)) that is 100 ((pixel))s wide and 50 pixels high, with its upper-left corner at coordinates (10, 10).\n\n{{if book\n\n{{figure {url: \"img/canvas_fill.png\", alt: \"Screenshot of a canvas with a rectangle on it\", width: \"2.5cm\"}}}\n\nif}}\n\n{{index SVG, coordinates}}\n\nJust like in HTML (and SVG), the coordinate system that the canvas uses puts (0, 0) at the upper-left corner, and the positive y-((axis)) goes down from there. This means (10, 10) is 10 pixels below and to the right of the upper-left corner.\n\n{{id fill_stroke}}\n\n## Lines and surfaces\n\n{{index filling, stroking, drawing, SVG}}\n\nIn the ((canvas)) interface, a shape can be _filled_, meaning its area is given a certain color or pattern, or it can be _stroked_, which means a ((line)) is drawn along its edge. SVG uses the same terminology.\n\n{{index \"fillRect method\", \"strokeRect method\"}}\n\nThe `fillRect` method fills a ((rectangle)). It takes first the x- and y-((coordinates)) of the rectangle's upper-left corner, then its width, and then its height. A similar method called `strokeRect` draws the ((outline)) of a rectangle.\n\n{{index [state, \"of canvas\"]}}\n\nNeither method takes any further parameters. The color of the fill, thickness of the stroke, and so on, are not determined by an argument to the method, as you might reasonably expect, but rather by properties of the context object.\n\n{{index filling, \"fillStyle property\"}}\n\nThe `fillStyle` property controls the way shapes are filled. It can be set to a string that specifies a ((color)), using the color notation used by ((CSS)).\n\n{{index stroking, \"line width\", \"strokeStyle property\", \"lineWidth property\", canvas}}\n\nThe `strokeStyle` property works similarly but determines the color used for a stroked line. The width of that line is determined by the `lineWidth` property, which may contain any positive number.\n\n```{lang: html}\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  cx.strokeStyle = \"blue\";\n  cx.strokeRect(5, 5, 50, 50);\n  cx.lineWidth = 5;\n  cx.strokeRect(135, 5, 50, 50);\n</script>\n```\n\n{{if book\n\nThis code draws two blue squares, using a thicker line for the second one.\n\n{{figure {url: \"img/canvas_stroke.png\", alt: \"Screenshot showing two outlined squares\", width: \"5cm\"}}}\n\nif}}\n\n{{index \"default value\", [canvas, size]}}\n\nWhen no `width` or `height` attribute is specified, as in the example, a canvas element gets a default width of 300 pixels and height of 150 pixels.\n\n## Paths\n\n{{index [path, canvas], [interface, design], [canvas, path]}}\n\nA path is a sequence of ((line))s. The 2D canvas interface takes a peculiar approach to describing such a path. It is done entirely through ((side effect))s. Paths are not values that can be stored and passed around. Instead, if you want to do something with a path, you make a sequence of method calls to describe its shape.\n\n```{lang: html}\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  cx.beginPath();\n  for (let y = 10; y < 100; y += 10) {\n    cx.moveTo(10, y);\n    cx.lineTo(90, y);\n  }\n  cx.stroke();\n</script>\n```\n\n{{index canvas, \"stroke method\", \"lineTo method\", \"moveTo method\", shape}}\n\nThis example creates a path with a number of horizontal ((line)) segments and then strokes it using the `stroke` method. Each segment created with `lineTo` starts at the path's _current_ position. That position is usually the end of the last segment, unless `moveTo` was called. In that case, the next segment would start at the position passed to `moveTo`.\n\n{{if book\n\nThe path described by the previous program looks like this:\n\n{{figure {url: \"img/canvas_path.png\", alt: \"Screenshot showing a number of vertical lines\", width: \"2.1cm\"}}}\n\nif}}\n\n{{index [path, canvas], filling, [path, closing], \"fill method\"}}\n\nWhen filling a path (using the `fill` method), each ((shape)) is filled separately. A path can contain multiple shapes—each `moveTo` motion starts a new one. But the path needs to be _closed_ (meaning its start and end are in the same position) before it can be filled. If the path is not already closed, a line is added from its end to its start, and the shape enclosed by the completed path is filled.\n\n```{lang: html}\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  cx.beginPath();\n  cx.moveTo(50, 10);\n  cx.lineTo(10, 70);\n  cx.lineTo(90, 70);\n  cx.fill();\n</script>\n```\n\nThis example draws a filled triangle. Note that only two of the triangle's sides are explicitly drawn. The third, from the lower-right corner back to the top, is implied and wouldn't be there if you stroked the path.\n\n{{if book\n\n{{figure {url: \"img/canvas_triangle.png\", alt: \"Screenshot showing a filled path\", width: \"2.2cm\"}}}\n\nif}}\n\n{{index \"stroke method\", \"closePath method\", [path, closing], canvas}}\n\nYou could also use the `closePath` method to explicitly close a path by adding an actual ((line)) segment back to the path's start. This segment _is_ drawn when stroking the path.\n\n## Curves\n\n{{index [path, canvas], canvas, drawing}}\n\nA path may also contain ((curve))d ((line))s. These are unfortunately a bit more involved to draw.\n\n{{index \"quadraticCurveTo method\"}}\n\nThe `quadraticCurveTo` method draws a curve to a given point. To determine the curvature of the line, the method is given a ((control point)) as well as a destination point. Imagine this control point as _attracting_ the line, giving it its curve. The line won't go through the control point, but its direction at the start and end points will be such that a straight line in that direction would point toward the control point. The following example illustrates this:\n\n```{lang: html}\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  cx.beginPath();\n  cx.moveTo(10, 90);\n  // control=(60, 10) goal=(90, 90)\n  cx.quadraticCurveTo(60, 10, 90, 90);\n  cx.lineTo(60, 10);\n  cx.closePath();\n  cx.stroke();\n</script>\n```\n\n{{if book\n\nIt produces a path that looks like this:\n\n{{figure {url: \"img/canvas_quadraticcurve.png\", alt: \"Screenshot of a quadratic curve\", width: \"2.3cm\"}}}\n\nif}}\n\n{{index \"stroke method\"}}\n\nWe draw a ((quadratic curve)) from the left to the right, with (60, 10) as the control point, and then draw two ((line)) segments going through that control point and back to the start of the line. The result somewhat resembles a _((Star Trek))_ insignia. You can see the effect of the control point: the lines leaving the lower corners start off in the direction of the control point and then ((curve)) toward their target.\n\n{{index canvas, \"bezierCurveTo method\"}}\n\nThe `bezierCurveTo` method draws a similar kind of curve. Instead of a single ((control point)), this method has two—one for each of the ((line))'s end points. Here is a similar sketch to illustrate the behavior of such a curve:\n\n```{lang: html}\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  cx.beginPath();\n  cx.moveTo(10, 90);\n  // control1=(10, 10) control2=(90, 10) goal=(50, 90)\n  cx.bezierCurveTo(10, 10, 90, 10, 50, 90);\n  cx.lineTo(90, 10);\n  cx.lineTo(10, 10);\n  cx.closePath();\n  cx.stroke();\n</script>\n```\n\nThe two control points specify the direction at both ends of the curve. The farther they are away from their corresponding point, the more the curve will \"bulge\" in that direction.\n\n{{if book\n\n{{figure {url: \"img/canvas_beziercurve.png\", alt: \"Screenshot of a bezier curve\", width: \"2.2cm\"}}}\n\nif}}\n\n{{index \"trial and error\"}}\n\nSuch ((curve))s can be hard to work with—it's not always clear how to find the ((control point))s that provide the ((shape)) you are looking for. Sometimes you can compute them, and sometimes you'll just have to find a suitable value by trial and error.\n\n{{index \"arc method\", arc}}\n\nThe `arc` method is a way to draw a line that curves along the edge of a circle. It takes a pair of ((coordinates)) for the arc's center, a radius, and then a start angle and end angle.\n\n{{index pi, \"Math.PI constant\"}}\n\nThose last two parameters make it possible to draw only part of the circle. The ((angle))s are measured in ((radian))s, not ((degree))s. This means a full ((circle)) has an angle of 2π, or `2 * Math.PI`, which is about 6.28. The angle starts counting at the point to the right of the circle's center and goes clockwise from there. You can use a start of 0 and an end bigger than 2π (say, 7) to draw a full circle.\n\n```{lang: html}\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  cx.beginPath();\n  // center=(50, 50) radius=40 angle=0 to 7\n  cx.arc(50, 50, 40, 0, 7);\n  // center=(150, 50) radius=40 angle=0 to ½π\n  cx.arc(150, 50, 40, 0, 0.5 * Math.PI);\n  cx.stroke();\n</script>\n```\n\n{{index \"moveTo method\", \"arc method\", [path, \" canvas\"]}}\n\nThe resulting picture contains a ((line)) from the right of the full circle (first call to `arc`) to the right of the quarter-((circle)) (second call).\n\n{{if book\n\n{{figure {url: \"img/canvas_circle.png\", alt: \"Screenshot of a circle\", width: \"4.9cm\"}}}\n\nif}}\n\nLike other path-drawing methods, a line drawn with `arc` is connected to the previous path segment.You can call `moveTo` or start a new path to avoid this.\n\n{{id pie_chart}}\n\n## Drawing a pie chart\n\n{{index \"pie chart example\"}}\n\nImagine you've just taken a ((job)) at EconomiCorp, Inc. Your first assignment is to draw a pie chart of its customer satisfaction ((survey)) results.\n\nThe `results` binding contains an array of objects that represent the survey responses.\n\n```{sandbox: \"pie\", includeCode: true}\nconst results = [\n  {name: \"Satisfied\", count: 1043, color: \"lightblue\"},\n  {name: \"Neutral\", count: 563, color: \"lightgreen\"},\n  {name: \"Unsatisfied\", count: 510, color: \"pink\"},\n  {name: \"No comment\", count: 175, color: \"silver\"}\n];\n```\n\n{{index \"pie chart example\"}}\n\nTo draw a pie chart, we draw a number of pie slices, each made up of an ((arc)) and a pair of ((line))s to the center of that arc. We can compute the ((angle)) taken up by each arc by dividing a full circle (2π) by the total number of responses and then multiplying that number (the angle per response) by the number of people who picked a given choice.\n\n```{lang: html, sandbox: \"pie\"}\n<canvas width=\"200\" height=\"200\"></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  let total = results\n    .reduce((sum, {count}) => sum + count, 0);\n  // Start at the top\n  let currentAngle = -0.5 * Math.PI;\n  for (let result of results) {\n    let sliceAngle = (result.count / total) * 2 * Math.PI;\n    cx.beginPath();\n    // center=100,100, radius=100\n    // from current angle, clockwise by slice's angle\n    cx.arc(100, 100, 100,\n           currentAngle, currentAngle + sliceAngle);\n    currentAngle += sliceAngle;\n    cx.lineTo(100, 100);\n    cx.fillStyle = result.color;\n    cx.fill();\n  }\n</script>\n```\n\n{{if book\n\nThis draws the following chart:\n\n{{figure {url: \"img/canvas_pie_chart.png\", alt: \"Screenshot showing a pie chart\", width: \"5cm\"}}}\n\nif}}\n\nBut a chart that doesn't tell us what the slices mean isn't very helpful. We need a way to draw text to the ((canvas)).\n\n## Text\n\n{{index stroking, filling, \"fillStyle property\", \"fillText method\", \"strokeText method\"}}\n\nA 2D canvas drawing context provides the methods `fillText` and `strokeText`. The latter can be useful for outlining letters, but usually `fillText` is what you need. It will fill the outline of the given ((text)) with the current `fillStyle`.\n\n```{lang: html}\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  cx.font = \"28px Georgia\";\n  cx.fillStyle = \"fuchsia\";\n  cx.fillText(\"I can draw text, too!\", 10, 50);\n</script>\n```\n\nYou can specify the size, style, and ((font)) of the text with the `font` property. This example just gives a font size and family name. It is also possible to add `italic` or `bold` to the start of the string to select a style.\n\n{{index \"fillText method\", \"strokeText method\", \"textAlign property\", \"textBaseline property\"}}\n\nThe last two arguments to `fillText` and `strokeText` provide the position at which the font is drawn. By default, they indicate the position of the start of the text's alphabetic baseline, which is the line that letters \"stand\" on, not counting hanging parts in letters such as _j_ or _p_. You can change the horizontal position by setting the `textAlign` property to `\"end\"` or `\"center\"` and the vertical position by setting `textBaseline` to `\"top\"`, `\"middle\"`, or `\"bottom\"`.\n\n{{index \"pie chart example\"}}\n\nWe'll come back to our pie chart, and the problem of ((label))ing the slices, in the [exercises](canvas#exercise_pie_chart) at the end of the chapter.\n\n## Images\n\n{{index \"vector graphics\", \"bitmap graphics\"}}\n\nIn computer ((graphics)), a distinction is often made between _vector_ graphics and _bitmap_ graphics. The first is what we have been doing so far in this chapter—specifying a picture by giving a logical description of ((shape))s. Bitmap graphics, on the other hand, don't specify actual shapes but rather work with ((pixel)) data (rasters of colored dots).\n\n{{index \"load event\", \"event handling\", \"img (HTML tag)\", \"drawImage method\"}}\n\nThe `drawImage` method allows us to draw ((pixel)) data onto a ((canvas)). This pixel data can originate from an `<img>` element or from another canvas. The following example creates a detached `<img>` element and loads an image file into it. But the method cannot immediately start drawing from this picture because the browser may not have loaded it yet. To deal with this, we register a `\"load\"` event handler and do the drawing after the image has loaded.\n\n```{lang: html}\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  let img = document.createElement(\"img\");\n  img.src = \"img/hat.png\";\n  img.addEventListener(\"load\", () => {\n    for (let x = 10; x < 200; x += 30) {\n      cx.drawImage(img, x, 10);\n    }\n  });\n</script>\n```\n\n{{index \"drawImage method\", scaling}}\n\nBy default, `drawImage` will draw the image at its original size. You can also give it two additional arguments to specify the width and height of the drawn image, when those aren't the same as the origin image.\n\nWhen `drawImage` is given _nine_ arguments, it can be used to draw only a fragment of an image. The second through fifth arguments indicate the rectangle (x, y, width, and height) in the source image that should be copied, and the sixth to ninth arguments give the rectangle (on the canvas) into which it should be copied.\n\n{{index \"player\", \"pixel art\"}}\n\nThis can be used to pack multiple _((sprite))s_ (image elements) into a single image file and then draw only the part you need. For example, this picture contains a game character in multiple ((pose))s:\n\n{{figure {url: \"img/player_big.png\", alt: \"Pixel art showing a computer game character in 10 different poses. The first 8 form its running animation cycle, the 9th has the character standing still, and the 10th shows him jumping.\", width: \"6cm\"}}}\n\n{{index [animation, \"platform game\"]}}\n\nBy alternating which pose we draw, we can show an animation that looks like a walking character.\n\n{{index \"fillRect method\", \"clearRect method\", clearing}}\n\nTo animate a ((picture)) on a ((canvas)), the `clearRect` method is useful. It resembles `fillRect`, but instead of coloring the rectangle, it makes it ((transparent)), removing the previously drawn pixels.\n\n{{index \"setInterval function\", \"img (HTML tag)\"}}\n\nWe know that each _((sprite))_, each subpicture, is 24 ((pixel))s wide and 30 pixels high. The following code loads the image and then sets up an interval (repeated timer) to draw the next ((frame)):\n\n```{lang: html}\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  let img = document.createElement(\"img\");\n  img.src = \"img/player.png\";\n  let spriteW = 24, spriteH = 30;\n  img.addEventListener(\"load\", () => {\n    let cycle = 0;\n    setInterval(() => {\n      cx.clearRect(0, 0, spriteW, spriteH);\n      cx.drawImage(img,\n                   // source rectangle\n                   cycle * spriteW, 0, spriteW, spriteH,\n                   // destination rectangle\n                   0,               0, spriteW, spriteH);\n      cycle = (cycle + 1) % 8;\n    }, 120);\n  });\n</script>\n```\n\n{{index \"remainder operator\", \"% operator\", [animation, \"platform game\"]}}\n\nThe `cycle` binding tracks our position in the animation. For each ((frame)), it is incremented and then clipped back to the 0 to 7 range by using the remainder operator. This binding is then used to compute the x-coordinate that the sprite for the current pose has in the picture.\n\n## Transformation\n\n{{index transformation, mirroring}}\n\n{{indexsee flipping, mirroring}}\n\nWhat if we want our character to walk to the left instead of to the right? We could draw another set of sprites, of course. But we could also instruct the ((canvas)) to draw the picture the other way round.\n\n{{index \"scale method\", scaling}}\n\nCalling the `scale` method will cause anything drawn after it to be scaled. This method takes two parameters, one to set a horizontal scale and one to set a vertical scale.\n\n```{lang: html}\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  cx.scale(3, .5);\n  cx.beginPath();\n  cx.arc(50, 50, 40, 0, 7);\n  cx.lineWidth = 3;\n  cx.stroke();\n</script>\n```\n\n{{if book\n\nBecause of the call to `scale`, the circle is drawn three times as wide and half as high.\n\n{{figure {url: \"img/canvas_scale.png\", alt: \"Screenshot of a scaled circle\", width: \"6.6cm\"}}}\n\nif}}\n\n{{index mirroring}}\n\nScaling will cause everything about the drawn image, including the ((line width)), to be stretched out or squeezed together as specified. Scaling by a negative amount will flip the picture around. The flipping happens around point (0, 0), which means it will also flip the direction of the coordinate system. When a horizontal scaling of -1 is applied, a shape drawn at _x_ position 100 will end up at what used to be position -100.\n\n{{index \"drawImage method\"}}\n\nTo turn a picture around, we can't simply add `cx.scale(-1, 1)` before the call to `drawImage`. That would move our picture outside of the ((canvas)), where it won't be visible. We could adjust the ((coordinates)) given to `drawImage` to compensate for this by drawing the image at _x_ position -50 instead of 0. Another solution, which doesn't require the code doing the drawing to know about the scale change, is to adjust the ((axis)) around which the scaling happens.\n\n{{index \"rotate method\", \"translate method\", transformation}}\n\nThere are several other methods besides `scale` that influence the coordinate system for a ((canvas)). You can rotate subsequently drawn shapes with the `rotate` method and move them with the `translate` method. The interesting—and confusing—thing is that these transformations _stack_, meaning that each one happens relative to the previous transformations.\n\n{{index \"rotate method\", \"translate method\"}}\n\nIf we translate by 10 horizontal pixels twice, everything will be drawn 20 pixels to the right. If we first move the center of the coordinate system to (50, 50) and then rotate by 20 ((degree))s (about 0.1π ((radian))s), that rotation will happen _around_ point (50, 50).\n\n{{figure {url: \"img/transform.svg\", alt: \"Diagram showing the result of stacking transformations. The first diagram translates and then rotates, causing the translation to happen normally and rotation to happen around the target of the translation. The second diagram first rotates, and then translates, causing the rotation to happen around the origin and the translation direction to be tilted by that rotation.\", width: \"9cm\"}}}\n\n{{index coordinates}}\n\nBut if we _first_ rotate by 20 degrees and _then_ translate by (50, 50), the translation will happen in the rotated coordinate system and thus produce a different orientation. The order in which transformations are applied matters.\n\n{{index axis, mirroring}}\n\nTo flip a picture around the vertical line at a given _x_ position, we can do the following:\n\n```{includeCode: true}\nfunction flipHorizontally(context, around) {\n  context.translate(around, 0);\n  context.scale(-1, 1);\n  context.translate(-around, 0);\n}\n```\n\n{{index \"flipHorizontally method\"}}\n\nWe move the y-((axis)) to where we want our ((mirror)) to be, apply the mirroring, and finally move the y-axis back to its proper place in the mirrored universe. The following picture explains why this works:\n\n{{figure {url: \"img/mirror.svg\", alt: \"Diagram showing the effect of translating and mirroring a triangle\", width: \"8cm\"}}}\n\n{{index \"translate method\", \"scale method\", transformation, canvas}}\n\nThis shows the coordinate systems before and after mirroring across the central line. The triangles are numbered to illustrate each step. If we draw a triangle at a positive _x_ position, it would, by default, be in the place where triangle 1 is. A call to `flipHorizontally` first does a translation to the right, which gets us to triangle 2. It then scales, flipping the triangle over to position 3. This is not where it should be, if it were mirrored in the given line. The second `translate` call fixes this—it \"cancels\" the initial translation and makes triangle 4 appear exactly where it should.\n\nWe can now draw a mirrored character at position (100, 0) by flipping the world around the character's vertical center.\n\n```{lang: html}\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  let img = document.createElement(\"img\");\n  img.src = \"img/player.png\";\n  let spriteW = 24, spriteH = 30;\n  img.addEventListener(\"load\", () => {\n    flipHorizontally(cx, 100 + spriteW / 2);\n    cx.drawImage(img, 0, 0, spriteW, spriteH,\n                 100, 0, spriteW, spriteH);\n  });\n</script>\n```\n\n## Storing and clearing transformations\n\n{{index \"side effect\", canvas, transformation}}\n\nTransformations stick around. Everything else we draw after ((drawing)) that mirrored character would also be mirrored. That might be inconvenient.\n\nIt is possible to save the current transformation, do some drawing and transforming, and then restore the old transformation. This is usually the proper thing to do for a function that needs to temporarily transform the coordinate system. First, we save whatever transformation the code that called the function was using. Then the function does its thing, adding more transformations on top of the current transformation. Finally, we revert to the transformation we started with.\n\n{{index \"save method\", \"restore method\", [state, \"of canvas\"]}}\n\nThe `save` and `restore` methods on the 2D ((canvas)) context do this ((transformation)) management. They conceptually keep a stack of transformation states. When you call `save`, the current state is pushed onto the stack, and when you call `restore`, the state on top of the stack is taken off and used as the context's current transformation. You can also call `resetTransform` to fully reset the transformation.\n\n{{index \"branching recursion\", \"fractal example\", recursion}}\n\nThe `branch` function in the following example illustrates what you can do with a function that changes the transformation and then calls a function (in this case itself), which continues drawing with the given transformation.\n\nThis function draws a treelike shape by drawing a line, moving the center of the coordinate system to the end of the line, and calling itself twice—first rotated to the left and then rotated to the right. Every call reduces the length of the branch drawn, and the recursion stops when the length drops below 8.\n\n```{lang: html}\n<canvas width=\"600\" height=\"300\"></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  function branch(length, angle, scale) {\n    cx.fillRect(0, 0, 1, length);\n    if (length < 8) return;\n    cx.save();\n    cx.translate(0, length);\n    cx.rotate(-angle);\n    branch(length * scale, angle, scale);\n    cx.rotate(2 * angle);\n    branch(length * scale, angle, scale);\n    cx.restore();\n  }\n  cx.translate(300, 0);\n  branch(60, 0.5, 0.8);\n</script>\n```\n\n{{if book\n\nThe result is a simple fractal.\n\n{{figure {url: \"img/canvas_tree.png\", alt: \"Screenshot of a fractal\", width: \"5cm\"}}}\n\nif}}\n\n{{index \"save method\", \"restore method\", canvas, \"rotate method\"}}\n\nIf the calls to `save` and `restore` were not there, the second recursive call to `branch` would end up with the position and rotation created by the first call. It would be connected not to the current branch but rather to the innermost, rightmost branch drawn by the first call. The resulting shape might also be interesting, but it is definitely not a tree.\n\n{{id canvasdisplay}}\n\n## Back to the game\n\n{{index \"drawImage method\"}}\n\nWe now know enough about ((canvas)) drawing to start working on a ((canvas))-based ((display)) system for the ((game)) from the [previous chapter](game). The new display will no longer be showing just colored boxes. Instead, we'll use `drawImage` to draw pictures that represent the game's elements.\n\n{{index \"CanvasDisplay class\", \"DOMDisplay class\", [interface, object]}}\n\nWe define another display object type called `CanvasDisplay`, supporting the same interface as `DOMDisplay` from [Chapter ?](game#domdisplay)—namely, the methods `syncState` and `clear`.\n\n{{index [state, \"in objects\"]}}\n\nThis object keeps a little more information than `DOMDisplay`. Rather than using the scroll position of its DOM element, it tracks its own ((viewport)), which tells us which part of the level we are currently looking at. Finally, it keeps a `flipPlayer` property so that even when the player is standing still, it keeps facing the direction in which it last moved.\n\n```{sandbox: \"game\", includeCode: true}\nclass CanvasDisplay {\n  constructor(parent, level) {\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.width = Math.min(600, level.width * scale);\n    this.canvas.height = Math.min(450, level.height * scale);\n    parent.appendChild(this.canvas);\n    this.cx = this.canvas.getContext(\"2d\");\n\n    this.flipPlayer = false;\n\n    this.viewport = {\n      left: 0,\n      top: 0,\n      width: this.canvas.width / scale,\n      height: this.canvas.height / scale\n    };\n  }\n\n  clear() {\n    this.canvas.remove();\n  }\n}\n```\n\nThe `syncState` method first computes a new viewport and then draws the game scene at the appropriate position.\n\n```{sandbox: \"game\", includeCode: true}\nCanvasDisplay.prototype.syncState = function(state) {\n  this.updateViewport(state);\n  this.clearDisplay(state.status);\n  this.drawBackground(state.level);\n  this.drawActors(state.actors);\n};\n```\n\n{{index scrolling, clearing}}\n\nContrary to `DOMDisplay`, this display style _does_ have to redraw the background on every update. Because shapes on a canvas are just ((pixel))s, after we draw them there is no good way to move them (or remove them). The only way to update the canvas display is to clear it and redraw the scene. We may also have scrolled, which requires the background to be in a different position.\n\n{{index \"CanvasDisplay class\"}}\n\nThe `updateViewport` method is similar to `DOMDisplay`'s `scrollPlayerIntoView` method. It checks whether the player is too close to the edge of the screen and moves the ((viewport)) when this is the case.\n\n```{sandbox: \"game\", includeCode: true}\nCanvasDisplay.prototype.updateViewport = function(state) {\n  let view = this.viewport, margin = view.width / 3;\n  let player = state.player;\n  let center = player.pos.plus(player.size.times(0.5));\n\n  if (center.x < view.left + margin) {\n    view.left = Math.max(center.x - margin, 0);\n  } else if (center.x > view.left + view.width - margin) {\n    view.left = Math.min(center.x + margin - view.width,\n                         state.level.width - view.width);\n  }\n  if (center.y < view.top + margin) {\n    view.top = Math.max(center.y - margin, 0);\n  } else if (center.y > view.top + view.height - margin) {\n    view.top = Math.min(center.y + margin - view.height,\n                        state.level.height - view.height);\n  }\n};\n```\n\n{{index boundary, \"Math.max function\", \"Math.min function\", clipping}}\n\nThe calls to `Math.max` and `Math.min` ensure that the viewport does not end up showing space outside of the level. `Math.max(x, 0)` makes sure the resulting number is not less than zero. `Math.min` similarly guarantees that a value stays below a given bound.\n\nWhen ((clearing)) the display, we'll use a slightly different ((color)) depending on whether the game is won (brighter) or lost (darker).\n\n```{sandbox: \"game\", includeCode: true}\nCanvasDisplay.prototype.clearDisplay = function(status) {\n  if (status == \"won\") {\n    this.cx.fillStyle = \"rgb(68, 191, 255)\";\n  } else if (status == \"lost\") {\n    this.cx.fillStyle = \"rgb(44, 136, 214)\";\n  } else {\n    this.cx.fillStyle = \"rgb(52, 166, 251)\";\n  }\n  this.cx.fillRect(0, 0,\n                   this.canvas.width, this.canvas.height);\n};\n```\n\n{{index \"Math.floor function\", \"Math.ceil function\", rounding}}\n\nTo draw the background, we run through the tiles that are visible in the current viewport, using the same trick used in the `touches` method from the [previous chapter](game#touches).\n\n```{sandbox: \"game\", includeCode: true}\nlet otherSprites = document.createElement(\"img\");\notherSprites.src = \"img/sprites.png\";\n\nCanvasDisplay.prototype.drawBackground = function(level) {\n  let {left, top, width, height} = this.viewport;\n  let xStart = Math.floor(left);\n  let xEnd = Math.ceil(left + width);\n  let yStart = Math.floor(top);\n  let yEnd = Math.ceil(top + height);\n\n  for (let y = yStart; y < yEnd; y++) {\n    for (let x = xStart; x < xEnd; x++) {\n      let tile = level.rows[y][x];\n      if (tile == \"empty\") continue;\n      let screenX = (x - left) * scale;\n      let screenY = (y - top) * scale;\n      let tileX = tile == \"lava\" ? scale : 0;\n      this.cx.drawImage(otherSprites,\n                        tileX,         0, scale, scale,\n                        screenX, screenY, scale, scale);\n    }\n  }\n};\n```\n\n{{index \"drawImage method\", sprite, tile}}\n\nTiles that are not empty are drawn with `drawImage`. The `otherSprites` image contains the pictures used for elements other than the player. It contains, from left to right, the wall tile, the lava tile, and the sprite for a coin.\n\n{{figure {url: \"img/sprites_big.png\", alt: \"Pixel art showing three sprites: a piece of wall, made out of small white stones, a square of orange lava, and a round coin.\", width: \"1.4cm\"}}}\n\n{{index scaling}}\n\nBackground tiles are 20 by 20 pixels, since we'll use the same scale as in `DOMDisplay`. Thus, the offset for lava tiles is 20 (the value of the `scale` binding), and the offset for walls is 0.\n\n{{index drawing, \"load event\", \"drawImage method\"}}\n\nWe don't bother waiting for the sprite image to load. Calling `drawImage` with an image that hasn't been loaded yet will simply do nothing. Thus, we might fail to draw the game properly for the first few ((frame))s while the image is still loading, but that isn't a serious problem. Since we keep updating the screen, the correct scene will appear as soon as the loading finishes.\n\n{{index \"player\", [animation, \"platform game\"], drawing}}\n\nThe ((walking)) character shown earlier will be used to represent the player. The code that draws it needs to pick the right ((sprite)) and direction based on the player's current motion. The first eight sprites contain a walking animation. When the player is moving along a floor, we cycle through them based on the current time. We want to switch frames every 60 milliseconds, so the ((time)) is divided by 60 first. When the player is standing still, we draw the ninth sprite. During jumps, which are recognized by the fact that the vertical speed is not zero, we use the tenth, rightmost sprite.\n\n{{index \"flipHorizontally function\", \"CanvasDisplay class\"}}\n\nBecause the ((sprite))s are slightly wider than the player object—24 instead of 16 pixels to allow some space for feet and arms—the method has to adjust the x-coordinate and width by a given amount (`playerXOverlap`).\n\n```{sandbox: \"game\", includeCode: true}\nlet playerSprites = document.createElement(\"img\");\nplayerSprites.src = \"img/player.png\";\nconst playerXOverlap = 4;\n\nCanvasDisplay.prototype.drawPlayer = function(player, x, y,\n                                              width, height){\n  width += playerXOverlap * 2;\n  x -= playerXOverlap;\n  if (player.speed.x != 0) {\n    this.flipPlayer = player.speed.x < 0;\n  }\n\n  let tile = 8;\n  if (player.speed.y != 0) {\n    tile = 9;\n  } else if (player.speed.x != 0) {\n    tile = Math.floor(Date.now() / 60) % 8;\n  }\n\n  this.cx.save();\n  if (this.flipPlayer) {\n    flipHorizontally(this.cx, x + width / 2);\n  }\n  let tileX = tile * width;\n  this.cx.drawImage(playerSprites, tileX, 0, width, height,\n                                   x,     y, width, height);\n  this.cx.restore();\n};\n```\n\nThe `drawPlayer` method is called by `drawActors`, which is responsible for drawing all the actors in the game.\n\n```{sandbox: \"game\", includeCode: true}\nCanvasDisplay.prototype.drawActors = function(actors) {\n  for (let actor of actors) {\n    let width = actor.size.x * scale;\n    let height = actor.size.y * scale;\n    let x = (actor.pos.x - this.viewport.left) * scale;\n    let y = (actor.pos.y - this.viewport.top) * scale;\n    if (actor.type == \"player\") {\n      this.drawPlayer(actor, x, y, width, height);\n    } else {\n      let tileX = (actor.type == \"coin\" ? 2 : 1) * scale;\n      this.cx.drawImage(otherSprites,\n                        tileX, 0, width, height,\n                        x,     y, width, height);\n    }\n  }\n};\n```\n\nWhen ((drawing)) something that is not the ((player)), we look at its type to find the offset of the correct sprite. The ((lava)) tile is found at offset 20, and the ((coin)) sprite is found at 40 (two times `scale`).\n\n{{index viewport}}\n\nWe have to subtract the viewport's position when computing the actor's position, since (0, 0) on our ((canvas)) corresponds to the top left of the viewport, not the top left of the level. We could also have used `translate` for this. Either way works.\n\n{{if interactive\n\nThis document plugs the new display into `runGame`:\n\n```{lang: html, sandbox: game, focus: yes, startCode: true}\n<body>\n  <script>\n    runGame(GAME_LEVELS, CanvasDisplay);\n  </script>\n</body>\n```\n\nif}}\n\n{{if book\n\n{{index [game, screenshot], [game, \"with canvas\"]}}\n\nThat concludes the new ((display)) system. The resulting game looks something like this:\n\n{{figure {url: \"img/canvas_game.png\", alt: \"Screenshot of the game as shown on canvas\", width: \"8cm\"}}}\n\nif}}\n\n{{id graphics_tradeoffs}}\n\n## Choosing a graphics interface\n\nWhen you need to generate graphics in the browser, you can choose between plain HTML, ((SVG)), and ((canvas)). There is no single _best_ approach that works in all situations. Each option has strengths and weaknesses.\n\n{{index \"text wrapping\"}}\n\nPlain HTML has the advantage of being simple. It also integrates well with ((text)). Both SVG and canvas allow you to draw text, but they won't help you position that text or wrap it when it takes up more than one line. In an HTML-based picture, it is much easier to include blocks of text.\n\n{{index zooming, SVG}}\n\nSVG can be used to produce ((crisp)) ((graphics)) that look good at any zoom level. Unlike HTML, it is designed for drawing and is thus more suitable for that purpose.\n\n{{index [DOM, graphics], SVG, \"event handling\", [\"data structure\", tree]}}\n\nBoth SVG and HTML build up a data structure (the DOM) that represents your picture. This makes it possible to modify elements after they are drawn. If you need to repeatedly change a small part of a big ((picture)) in response to what the user is doing or as part of an ((animation)), doing it in a canvas can be needlessly expensive. The DOM also allows us to register mouse event handlers on every element in the picture (even on shapes drawn with SVG). You can't do that with canvas.\n\n{{index performance, optimization, \"ray tracer\"}}\n\nBut ((canvas))'s ((pixel))-oriented approach can be an advantage when drawing a huge number of tiny elements. The fact that it does not build up a data structure but only repeatedly draws onto the same pixel surface gives canvas a lower cost per shape. There are also effects that are only practical with a canvas element, such as rendering a scene one ((pixel)) at a time (for example, using a ray tracer) or postprocessing an image with JavaScript (blurring or distorting it).\n\nIn some cases, you may want to combine several of these techniques. For example, you might draw a ((graph)) with ((SVG)) or ((canvas)) but show ((text))ual information by positioning an HTML element on top of the picture.\n\n{{index display}}\n\nFor nondemanding applications, it really doesn't matter much which interface you choose. The display we built for our game in this chapter could have been implemented using any of these three ((graphics)) technologies, since it does not need to draw text, handle mouse interaction, or work with an extraordinarily large number of elements.\n\n## Summary\n\nIn this chapter we discussed techniques for drawing graphics in the browser, focusing on the `<canvas>` element.\n\nA canvas node represents an area in a document that our program may draw on. This drawing is done through a drawing context object, created with the `getContext` method.\n\nThe 2D drawing interface allows us to fill and stroke various shapes. The context's `fillStyle` property determines how shapes are filled. The `strokeStyle` and `lineWidth` properties control the way lines are drawn.\n\nRectangles and pieces of text can be drawn with a single method call. The `fillRect` and `strokeRect` methods draw rectangles, and the `fillText` and `strokeText` methods draw text. To create custom shapes, we must first build up a path.\n\n{{index stroking, filling}}\n\nCalling `beginPath` starts a new path. A number of other methods add lines and curves to the current path. For example, `lineTo` can add a straight line. When a path is finished, it can be filled with the `fill` method or stroked with the `stroke` method.\n\nMoving pixels from an image or another canvas onto our canvas is done with the `drawImage` method. By default, this method draws the whole source image, but by giving it more parameters, you can copy a specific area of the image. We used this for our game by copying individual poses of the game character out of an image that contained many such poses.\n\nTransformations allow you to draw a shape in multiple orientations. A 2D drawing context has a current transformation that can be changed with the `translate`, `scale`, and `rotate` methods. These will affect all subsequent drawing operations. A transformation state can be saved with the `save` method and restored with the `restore` method.\n\nWhen showing an animation on a canvas, the `clearRect` method can be used to clear part of the canvas before redrawing it.\n\n## Exercises\n\n### Shapes\n\n{{index \"shapes (exercise)\"}}\n\nWrite a program that draws the following ((shape))s on a ((canvas)):\n\n{{index rotation}}\n\n1. A ((trapezoid)) (a ((rectangle)) that is wider on one side)\n\n2. A red ((diamond)) (a rectangle rotated 45 degrees or ¼π radians)\n\n3. A zigzagging ((line))\n\n4. A ((spiral)) made up of 100 straight line segments\n\n5. A yellow ((star))\n\n{{figure {url: \"img/exercise_shapes.png\", alt: \"Picture showing the shapes you are asked to draw\", width: \"8cm\"}}}\n\nWhen drawing the last two shapes, you may want to refer to the explanation of `Math.cos` and `Math.sin` in [Chapter ?](dom#sin_cos), which describes how to get coordinates on a circle using these functions.\n\n{{index readability, \"hardcoding\"}}\n\nI recommend creating a function for each shape. Pass the position, and optionally other properties such as the size or the number of points, as parameters. The alternative, which is to hardcode numbers all over your code, tends to make the code needlessly hard to read and modify.\n\n{{if interactive\n\n```{lang: html, test: no}\n<canvas width=\"600\" height=\"200\"></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n\n  // Your code here.\n</script>\n```\n\nif}}\n\n{{hint\n\n{{index [path, canvas], \"shapes (exercise)\"}}\n\nThe ((trapezoid)) (1) is easiest to draw using a path. Pick suitable center coordinates and add each of the four corners around the center.\n\n{{index \"flipHorizontally function\", rotation}}\n\nThe ((diamond)) (2) can be drawn the straightforward way, with a path, or the interesting way, with a `rotate` ((transformation)). To use rotation, you will have to apply a trick similar to what we did in the `flipHorizontally` function. Because you want to rotate around the center of your rectangle and not around the point (0, 0), you must first `translate` to there, then rotate, and then translate back.\n\nMake sure you reset the transformation after drawing any shape that creates one.\n\n{{index \"remainder operator\", \"% operator\"}}\n\nFor the ((zigzag)) (3) it becomes impractical to write a new call to `lineTo` for each line segment. Instead, you should use a ((loop)). You can have each iteration draw either two ((line)) segments (right and then left again) or one, in which case you must use the evenness (`% 2`) of the loop index to determine whether to go left or right.\n\nYou'll also need a loop for the ((spiral)) (4). If you draw a series of points, with each point moving farther along a circle around the spiral's center, you get a circle. If, during the loop, you vary the radius of the circle on which you are putting the current point and go around more than once, the result is a spiral.\n\n{{index \"quadraticCurveTo method\"}}\n\nThe ((star)) (5) depicted is built out of `quadraticCurveTo` lines. You could also draw one with straight lines. Divide a circle into eight pieces for a star with eight points, or however many pieces you want. Draw lines between these points, making them curve toward the center of the star. With `quadraticCurveTo`, you can use the center as the control point.\n\nhint}}\n\n{{id exercise_pie_chart}}\n\n### The pie chart\n\n{{index label, text, \"pie chart example\"}}\n\n[Earlier](canvas#pie_chart) in the chapter, we saw an example program that drew a pie chart. Modify this program so that the name of each category is shown next to the slice that represents it. Try to find a pleasing-looking way to automatically position this text that would work for other datasets as well. You may assume that categories are big enough to leave enough room for their labels.\n\nYou might need `Math.sin` and `Math.cos` again, which are described in [Chapter ?](dom#sin_cos).\n\n{{if interactive\n\n```{lang: html, test: no}\n<canvas width=\"600\" height=\"300\"></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  let total = results\n    .reduce((sum, {count}) => sum + count, 0);\n  let currentAngle = -0.5 * Math.PI;\n  let centerX = 300, centerY = 150;\n\n  // Add code to draw the slice labels in this loop.\n  for (let result of results) {\n    let sliceAngle = (result.count / total) * 2 * Math.PI;\n    cx.beginPath();\n    cx.arc(centerX, centerY, 100,\n           currentAngle, currentAngle + sliceAngle);\n    currentAngle += sliceAngle;\n    cx.lineTo(centerX, centerY);\n    cx.fillStyle = result.color;\n    cx.fill();\n  }\n</script>\n```\n\nif}}\n\n{{hint\n\n{{index \"fillText method\", \"textAlign property\", \"textBaseline property\", \"pie chart example\"}}\n\nYou will need to call `fillText` and set the context's `textAlign` and `textBaseline` properties in such a way that the text ends up where you want it.\n\nA sensible way to position the labels would be to put the text on the line going from the center of the pie through the middle of the slice. You don't want to put the text directly against the side of the pie but rather move the text out to the side of the pie by a given number of pixels.\n\nThe ((angle)) of this line is `currentAngle + 0.5 * sliceAngle`. The following code finds a position on this line 120 pixels from the center:\n\n```{test: no}\nlet middleAngle = currentAngle + 0.5 * sliceAngle;\nlet textX = Math.cos(middleAngle) * 120 + centerX;\nlet textY = Math.sin(middleAngle) * 120 + centerY;\n```\n\nFor `textBaseline`, the value `\"middle\"` is probably appropriate when using this approach. What to use for `textAlign` depends on which side of the circle we are on. On the left, it should be `\"right\"`, and on the right, it should be `\"left\"`, so that the text is positioned away from the pie.\n\n{{index \"Math.cos function\"}}\n\nIf you are not sure how to find out which side of the circle a given angle is on, look to the explanation of `Math.cos` in [Chapter ?](dom#sin_cos). The cosine of an angle tells us which x-coordinate it corresponds to, which in turn tells us exactly which side of the circle we are on.\n\nhint}}\n\n### A bouncing ball\n\n{{index [animation, \"bouncing ball\"], \"requestAnimationFrame function\", bouncing}}\n\nUse the `requestAnimationFrame` technique that we saw in [Chapter ?](dom#animationFrame) and [Chapter ?](game#runAnimation) to draw a ((box)) with a bouncing ((ball)) in it. The ball moves at a constant ((speed)) and bounces off the box's sides when it hits them.\n\n{{if interactive\n\n```{lang: html, test: no}\n<canvas width=\"400\" height=\"400\"></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n\n  let lastTime = null;\n  function frame(time) {\n    if (lastTime != null) {\n      updateAnimation(Math.min(100, time - lastTime) / 1000);\n    }\n    lastTime = time;\n    requestAnimationFrame(frame);\n  }\n  requestAnimationFrame(frame);\n\n  function updateAnimation(step) {\n    // Your code here.\n  }\n</script>\n```\n\nif}}\n\n{{hint\n\n{{index \"strokeRect method\", animation, \"arc method\"}}\n\nA ((box)) is easy to draw with `strokeRect`. Define a binding that holds its size, or define two bindings if your box's width and height differ. To create a round ((ball)), start a path and call `arc(x, y, radius, 0, 7)`, which creates an arc going from zero to more than a whole circle. Then fill the path.\n\n{{index \"collision detection\", \"Vec class\"}}\n\nTo model the ball's position and ((speed)), you can use the `Vec` class from [Chapter ?](game#vector)[ (which is available on this page)]{if interactive}. Give it a starting speed, preferably one that is not purely vertical or horizontal, and for every ((frame)) multiply that speed by the amount of time that elapsed. When the ball gets too close to a vertical wall, invert the _x_ component in its speed. Likewise, invert the _y_ component when it hits a horizontal wall.\n\n{{index \"clearRect method\", clearing}}\n\nAfter finding the ball's new position and speed, use `clearRect` to delete the scene and redraw it using the new position.\n\nhint}}\n\n### Precomputed mirroring\n\n{{index optimization, \"bitmap graphics\", mirror}}\n\nOne unfortunate thing about ((transformation))s is that they slow down the drawing of bitmaps. The position and size of each ((pixel)) have to be transformed, and though it is possible that ((browser))s will get cleverer about transformation in the ((future)), they currently cause a measurable increase in the time it takes to draw a bitmap.\n\nIn a game like ours, where we are drawing only a single transformed sprite, this is a nonissue. But imagine that we need to draw hundreds of characters or thousands of rotating particles from an explosion.\n\nThink of a way to draw an inverted character without loading additional image files and without having to make transformed `drawImage` calls every frame.\n\n{{hint\n\n{{index mirror, scaling, \"drawImage method\"}}\n\nThe key to the solution is the fact that we can use a ((canvas)) element as a source image when using `drawImage`. It is possible to create an extra `<canvas>` element, without adding it to the document, and draw our inverted sprites to it, once. When drawing an actual frame, we just copy the already inverted sprites to the main canvas.\n\n{{index \"load event\"}}\n\nSome care would be required because images do not load instantly. We do the inverted drawing only once, and if we do it before the image loads, it won't draw anything. A `\"load\"` handler on the image can be used to draw the inverted images to the extra canvas. This canvas can be used as a drawing source immediately (it'll simply be blank until we draw the character onto it).\n\nhint}}\n\n"
        },
        {
          "name": "18_http.md",
          "type": "blob",
          "size": 50.6787109375,
          "content": "{{meta {}}}\n\n# HTTP and Forms\n\n{{quote {author: \"Tim Berners-Lee\", chapter: true}\n\nWhat was often difficult for people to understand about the design was that there was nothing else beyond URLs, HTTP and HTML. There was no central computer 'controlling' the web, no single network on which these protocols worked, not even an organisation anywhere that 'ran' the Web. The Web was not a physical 'thing' that existed in a certain 'place'. It was a 'space' in which information could exist.\n\nquote}}\n\n{{index \"Fielding, Roy\"}}\n\n{{figure {url: \"img/chapter_picture_18.jpg\", alt: \"Illustration showing a web sign-up form on a parchment scroll\", chapter: \"framed\"}}}\n\n{{index [browser, environment]}}\n\nThe Hypertext Transfer Protocol, introduced in [Chapter ?](browser#web), is the mechanism through which data is requested and provided on the ((World Wide Web)). This chapter describes the ((protocol)) in more detail and explains the way browser JavaScript has access to it.\n\n## The protocol\n\n{{index \"IP address\"}}\n\nIf you type _eloquentjavascript.net/18_http.html_ in your browser's ((address bar)), the ((browser)) first looks up the ((address)) of the server associated with _eloquentjavascript.net_ and tries to open a ((TCP)) ((connection)) to it on ((port)) 80, the default port for ((HTTP)) traffic. If the ((server)) exists and accepts the connection, the browser might send something like this:\n\n```{lang: http}\nGET /18_http.html HTTP/1.1\nHost: eloquentjavascript.net\nUser-Agent: Your browser's name\n```\n\nThen the server responds, through that same connection.\n\n```{lang: http}\nHTTP/1.1 200 OK\nContent-Length: 87320\nContent-Type: text/html\nLast-Modified: Fri, 13 Oct 2023 10:05:41 GMT\n\n<!doctype html>\n... the rest of the document\n```\n\nThe browser takes the part of the ((response)) after the blank line, its _body_ (not to be confused with the HTML `<body>` tag), and displays it as an ((HTML)) document.\n\n{{index HTTP}}\n\nThe information sent by the client is called the _((request))_. It starts with this line:\n\n```{lang: http}\nGET /18_http.html HTTP/1.1\n```\n\n{{index \"DELETE method\", \"PUT method\", \"GET method\", [method, HTTP]}}\n\nThe first word is the _method_ of the ((request)). `GET` means that we want to _get_ the specified resource. Other common methods are `DELETE` to delete a resource, `PUT` to create or replace it, and `POST` to send information to it. Note that the ((server)) is not obliged to carry out every request it gets. If you walk up to a random website and tell it to `DELETE` its main page, it'll probably refuse.\n\n{{index [path, URL], GitHub, [file, resource]}}\n\nThe part after the method name is the path of the _((resource))_ the request applies to. In the simplest case, a resource is simply a file on the ((server)), but the protocol doesn't require it to be. A resource may be anything that can be transferred _as if_ it is a file. Many servers generate the responses they produce on the fly. For example, if you open [_https://github.com/marijnh_](https://github.com/marijnh), the server looks in its database for a user named \"marijnh\", and if it finds one, it will generate a profile page for that user.\n\nAfter the resource path, the first line of the request mentions `HTTP/1.1` to indicate the ((version)) of the ((HTTP)) ((protocol)) it is using.\n\nIn practice, many sites use HTTP version 2, which supports the same concepts as version 1.1 but is a lot more complicated so that it can be faster. Browsers will automatically switch to the appropriate protocol version when talking to a given server, and the outcome of a request is the same regardless of which version is used. Because version 1.1 is more straightforward and easier to play around with, we'll use that to illustrate the protocol.\n\n{{index \"status code\"}}\n\nThe server's ((response)) will start with a version as well, followed by the status of the response, first as a three-digit status code and then as a human-readable string.\n\n```{lang: http}\nHTTP/1.1 200 OK\n```\n\n{{index \"200 (HTTP status code)\", \"error response\", \"404 (HTTP status code)\"}}\n\nStatus codes starting with a 2 indicate that the request succeeded. Codes starting with 4 mean there was something wrong with the ((request)). The most famous HTTP status code is probably 404, which means that the resource could not be found. Codes that start with 5 mean an error happened on the ((server)) and the request is not to blame.\n\n{{index HTTP}}\n\n{{id headers}}\n\nThe first line of a request or response may be followed by any number of _((header))s_. These are lines in the form `name: value` that specify extra information about the request or response. These headers were part of the example ((response)):\n\n```{lang: null}\nContent-Length: 87320\nContent-Type: text/html\nLast-Modified: Fri, 13 Oct 2023 10:05:41 GMT\n```\n\n{{index \"Content-Length header\", \"Content-Type header\", \"Last-Modified header\"}}\n\nThis tells us the size and type of the response document. In this case, it is an HTML document of 87,320 bytes. It also tells us when that document was last modified.\n\nThe client and server are free to decide what ((header))s to include in their ((request))s or ((response))s. But some of them are necessary for things to work. For example, without a `Content-Type` header in the response, the browser won't know how to display the document.\n\n{{index \"GET method\", \"DELETE method\", \"PUT method\", \"POST method\", \"body (HTTP)\"}}\n\nAfter the headers, both requests and responses may include a blank line followed by a body, which contains the actual document being sent. `GET` and `DELETE` requests don't send along any data, but `PUT` and `POST` requests do. Some response types, such as error responses, also don't require a body.\n\n## Browsers and HTTP\n\n{{index HTTP, [file, resource]}}\n\nAs we saw, a ((browser)) will make a request when we enter a ((URL)) in its ((address bar)). When the resulting HTML page references other files, such as ((image))s and JavaScript files, it will retrieve those as well.\n\n{{index parallelism, \"GET method\"}}\n\nA moderately complicated ((website)) can easily include anywhere from 10 to 200 ((resource))s. To be able to fetch those quickly, browsers will make several `GET` requests simultaneously, rather than waiting for the responses one at a time.\n\nHTML pages may include _((form))s_, which allow the user to fill out information and send it to the server. This is an example of a form:\n\n```{lang: html}\n<form method=\"GET\" action=\"example/message.html\">\n  <p>Name: <input type=\"text\" name=\"name\"></p>\n  <p>Message:<br><textarea name=\"message\"></textarea></p>\n  <p><button type=\"submit\">Send</button></p>\n</form>\n```\n\n{{index form, \"method attribute\", \"GET method\"}}\n\nThis code describes a form with two ((field))s: a small one asking for a name and a larger one to write a message in. When you click the Send ((button)), the form is _submitted_, meaning that the content of its field is packed into an HTTP request and the browser navigates to the result of that request.\n\nWhen the `<form>` element's `method` attribute is `GET` (or is omitted), the information in the form is added to the end of the `action` URL as a _((query string))_. The browser might make a request to this URL:\n\n```{lang: null}\nGET /example/message.html?name=Jean&message=Yes%3F HTTP/1.1\n```\n\n{{index \"ampersand character\"}}\n\nThe ((question mark)) indicates the end of the path part of the URL and the start of the query. It is followed by pairs of names and values, corresponding to the `name` attribute on the form field elements and the content of those elements, respectively. An ampersand character (`&`) is used to separate the pairs.\n\n{{index [escaping, \"in URLs\"], \"hexadecimal number\", \"encodeURIComponent function\", \"decodeURIComponent function\"}}\n\nThe actual message encoded in the URL is \"Yes?\" but the question mark is replaced by a strange code. Some characters in query strings must be escaped. The question mark, represented as `%3F`, is one of those. There seems to be an unwritten rule that every format needs its own way of escaping characters. This one, called _((URL encoding))_, uses a ((percent sign)) followed by two hexadecimal (base 16) digits that encode the character code. In this case, 3F, which is 63 in decimal notation, is the code of a question mark character. JavaScript provides the `encodeURIComponent` and `decodeURIComponent` functions to encode and decode this format.\n\n```\nconsole.log(encodeURIComponent(\"Yes?\"));\n// → Yes%3F\nconsole.log(decodeURIComponent(\"Yes%3F\"));\n// → Yes?\n```\n\n{{index \"body (HTTP)\", \"POST method\"}}\n\nIf we change the `method` attribute of the HTML form in the example we saw earlier to `POST`, the ((HTTP)) request made to submit the ((form)) will use the `POST` method and put the ((query string)) in the body of the request rather than adding it to the URL.\n\n```{lang: http}\nPOST /example/message.html HTTP/1.1\nContent-length: 24\nContent-type: application/x-www-form-urlencoded\n\nname=Jean&message=Yes%3F\n```\n\n`GET` requests should be used for requests that do not have ((side effect))s but simply ask for information. Requests that change something on the server, for example creating a new account or posting a message, should be expressed with other methods, such as `POST`. Client-side software such as a browser knows that it shouldn't blindly make `POST` requests but will often implicitly make `GET` requests—to prefetch a resource it believes the user will soon need, for example.\n\nWe'll come back to forms and how to interact with them from JavaScript [later in the chapter](http#forms).\n\n{{id fetch}}\n\n## Fetch\n\n{{index \"fetch function\", \"Promise class\", [interface, module]}}\n\nThe interface through which browser JavaScript can make HTTP requests is called `fetch`.\n\n```{test: no}\nfetch(\"example/data.txt\").then(response => {\n  console.log(response.status);\n  // → 200\n  console.log(response.headers.get(\"Content-Type\"));\n  // → text/plain\n});\n```\n\n{{index \"Response class\", \"status property\", \"headers property\"}}\n\nCalling `fetch` returns a promise that resolves to a `Response` object holding information about the server's response, such as its status code and its headers. The headers are wrapped in a `Map`-like object that treats its keys (the header names) as case insensitive because header names are not supposed to be case sensitive. This means  `headers.get(\"Content-Type\")` and `headers.get(\"content-TYPE\")` will return the same value.\n\nNote that the promise returned by `fetch` resolves successfully even if the server responded with an error code. It can also be rejected if there is a network error or if the ((server)) to which that the request is addressed can't be found.\n\n{{index [path, URL], \"relative URL\"}}\n\nThe first argument to `fetch` is the URL that should be requested. When that ((URL)) doesn't start with a protocol name (such as _http:_), it is treated as _relative_, which means it is interpreted relative to the current document. When it starts with a slash (/), it replaces the current path, which is the part after the server name. When it does not, the part of the current path up to and including its last ((slash character)) is put in front of the relative URL.\n\n{{index \"text method\", \"body (HTTP)\", \"Promise class\"}}\n\nTo get at the actual content of a response, you can use its `text` method. Because the initial promise is resolved as soon as the response's headers have been received and because reading the response body might take a while longer, this again returns a promise.\n\n```{test: no}\nfetch(\"example/data.txt\")\n  .then(resp => resp.text())\n  .then(text => console.log(text));\n// → This is the content of data.txt\n```\n\n{{index \"json method\"}}\n\nA similar method, called `json`, returns a promise that resolves to the value you get when parsing the body as ((JSON)) or rejects if it's not valid JSON.\n\n{{index \"GET method\", \"body (HTTP)\", \"DELETE method\", \"method property\"}}\n\nBy default, `fetch` uses the `GET` method to make its request and does not include a request body. You can configure it differently by passing an object with extra options as a second argument. For example, this request tries to delete `example/data.txt`:\n\n```{test: no}\nfetch(\"example/data.txt\", {method: \"DELETE\"}).then(resp => {\n  console.log(resp.status);\n  // → 405\n});\n```\n\n{{index \"405 (HTTP status code)\"}}\n\nThe 405 status code means \"method not allowed\", an HTTP server's way of saying \"I'm afraid I can't do that\".\n\n{{index \"Range header\", \"body property\", \"headers property\"}}\n\nTo add a request body for a `PUT` or `POST` request, you can include a `body` option. To set headers, there's the `headers` option. For example, this request includes a `Range` header, which instructs the server to return only part of a document.\n\n```{test: no}\nfetch(\"example/data.txt\", {headers: {Range: \"bytes=8-19\"}})\n  .then(resp => resp.text())\n  .then(console.log);\n// → the content\n```\n\nThe browser will automatically add some request ((header))s, such as \"Host\" and those needed for the server to figure out the size of the body. But adding your own headers is often useful to include things such as authentication information or to tell the server which file format you'd like to receive.\n\n{{id http_sandbox}}\n\n## HTTP sandboxing\n\n{{index sandbox, [browser, security]}}\n\nMaking ((HTTP)) requests in web page scripts once again raises concerns about ((security)). The person who controls the script might not have the same interests as the person on whose computer it is running. More specifically, if I visit _themafia.org_, I do not want its scripts to be able to make a request to _mybank.com_, using identifying information from my browser, with instructions to transfer away all my money.\n\nFor this reason, browsers protect us by disallowing scripts to make HTTP requests to other ((domain))s (names such as _themafia.org_ and _mybank.com_).\n\n{{index \"Access-Control-Allow-Origin header\", \"cross-domain request\"}}\n\nThis can be an annoying problem when building systems that want to access several domains for legitimate reasons. Fortunately, ((server))s can include a ((header)) like this in their ((response)) to explicitly indicate to the browser that it is okay for the request to come from another domain:\n\n```{lang: null}\nAccess-Control-Allow-Origin: *\n```\n\n## Appreciating HTTP\n\n{{index client, HTTP, [interface, HTTP]}}\n\nWhen building a system that requires ((communication)) between a JavaScript program running in the ((browser)) (client-side) and a program on a ((server)) (server-side), there are several different ways to model this communication.\n\n{{index [network, abstraction], abstraction}}\n\nA commonly used model is that of _((remote procedure call))s_. In this model, communication follows the patterns of normal function calls, except that the function is actually running on another machine. Calling it involves making a request to the server that includes the function's name and arguments. The response to that request contains the returned value.\n\nWhen thinking in terms of remote procedure calls, HTTP is just a vehicle for communication, and you will most likely write an abstraction layer that hides it entirely.\n\n{{index \"media type\", \"document format\", [method, HTTP]}}\n\nAnother approach is to build your communication around the concept of ((resource))s and ((HTTP)) methods. Instead of a remote procedure called `addUser`, you use a `PUT` request to `/users/larry`. Instead of encoding that user's properties in function arguments, you define a JSON document format (or use an existing format) that represents a user. The body of the `PUT` request to create a new resource is then such a document. A resource is fetched by making a `GET` request to the resource's URL (for example, `/users/larry`), which again returns the document representing the resource.\n\nThis second approach makes it easier to use some of the features that HTTP provides, such as support for caching resources (keeping a copy of a resource on the client for fast access). The concepts used in HTTP, which are well designed, can provide a helpful set of principles to design your server interface around.\n\n## Security and HTTPS\n\n{{index \"man-in-the-middle\", security, HTTPS, [network, security]}}\n\nData traveling over the internet tends to follow a long, dangerous road. To get to its destination, it must hop through anything from coffee shop Wi-Fi hotspots to networks controlled by various companies and states. At any point along its route, it may be inspected or even modified.\n\n{{index tampering}}\n\nIf it is important that something remain secret, such as the ((password)) to your ((email)) account, or that it arrive at its destination unmodified, such as the account number you transfer money to via your bank's website, plain HTTP is not good enough.\n\n{{index cryptography, encryption}}\n\n{{indexsee \"Secure HTTP\", HTTPS, [browser, security]}}\n\nThe secure ((HTTP)) protocol, used for ((URL))s starting with _https://_, wraps HTTP traffic in a way that makes it harder to read and tamper with. Before exchanging data, the client verifies that the server is who it claims to be by asking it to prove that it has a cryptographic ((certificate)) issued by a certificate authority that the browser recognizes. Next, all data going over the ((connection)) is encrypted in a way that should prevent eavesdropping and tampering.\n\nThus, when it works right, ((HTTPS)) prevents other people from impersonating the website you are trying to talk to _and_ from snooping on your communication. It's not perfect, and there have been various incidents where HTTPS failed because of forged or stolen certificates and broken software, but it is a _lot_ safer than plain HTTP.\n\n{{id forms}}\n\n## Form fields\n\nForms were originally designed for the pre-JavaScript web to allow websites to send user-submitted information in an HTTP request. This design assumes that interaction with the server always happens by navigating to a new page.\n\n{{index [DOM, fields]}}\n\nHowever, the form elements are part of the DOM, like the rest of the page, and the DOM elements that represent form ((field))s support a number of properties and events that are not present on other elements. These make it possible to inspect and control such input fields with JavaScript programs and do things such as adding new functionality to a form or using forms and fields as building blocks in a JavaScript application.\n\n{{index \"form (HTML tag)\"}}\n\nA web form consists of any number of input ((field))s grouped in a `<form>` tag. HTML allows several different styles of fields, ranging from simple on/off checkboxes to drop-down menus and fields for text input. This book won't try to comprehensively discuss all field types, but we'll start with a rough overview.\n\n{{index \"input (HTML tag)\", \"type attribute\"}}\n\nA lot of field types use the `<input>` tag. This tag's `type` attribute is used to select the field's style. These are some commonly used `<input>` types:\n\n{{index \"password field\", checkbox, \"radio button\", \"file field\"}}\n\n{{table {cols: [1,5]}}}\n\n| `text`     | A single-line ((text field))\n| `password` | Same as `text` but hides the text that is typed\n| `checkbox` | An on/off switch\n| `color`    | A color\n| `date`     | A calendar date\n| `radio`    | (Part of) a ((multiple-choice)) field\n| `file`     | Allows the user to choose a file from their computer\n\n{{index \"value attribute\", \"checked attribute\", \"form (HTML tag)\"}}\n\nForm fields do not necessarily have to appear in a `<form>` tag. You can put them anywhere in a page. Such form-less fields cannot be ((submit))ted (only a form as a whole can), but when responding to input with JavaScript, we often don't want to submit our fields normally anyway.\n\n```{lang: html}\n<p><input type=\"text\" value=\"abc\"> (text)</p>\n<p><input type=\"password\" value=\"abc\"> (password)</p>\n<p><input type=\"checkbox\" checked> (checkbox)</p>\n<p><input type=\"color\" value=\"orange\"> (color)</p>\n<p><input type=\"date\" value=\"2023-10-13\"> (date)</p>\n<p><input type=\"radio\" value=\"A\" name=\"choice\">\n   <input type=\"radio\" value=\"B\" name=\"choice\" checked>\n   <input type=\"radio\" value=\"C\" name=\"choice\"> (radio)</p>\n<p><input type=\"file\"> (file)</p>\n```\n\n{{if book\n\nThe fields created with this HTML code look like this:\n\n{{figure {url: \"img/form_fields.png\", alt: \"Screenshot showing various types of input tags\", width: \"4cm\"}}}\n\nif}}\n\nThe JavaScript interface for such elements differs with the type of the element.\n\n{{index \"textarea (HTML tag)\", \"text field\"}}\n\nMultiline text fields have their own tag, `<textarea>`, mostly because using an attribute to specify a multiline starting value would be awkward. The `<textarea>` tag requires a matching `</textarea>` closing tag and uses the text between those two, instead of the `value` attribute, as starting text.\n\n```{lang: html}\n<textarea>\none\ntwo\nthree\n</textarea>\n```\n\n{{index \"select (HTML tag)\", \"option (HTML tag)\", \"multiple choice\", \"drop-down menu\"}}\n\nFinally, the `<select>` tag is used to create a field that allows the user to select from a number of predefined options.\n\n```{lang: html}\n<select>\n  <option>Pancakes</option>\n  <option>Pudding</option>\n  <option>Ice cream</option>\n</select>\n```\n\n{{if book\n\nSuch a field looks like this:\n\n{{figure {url: \"img/form_select.png\", alt: \"Screenshot showing a select field\", width: \"4cm\"}}}\n\nif}}\n\n{{index \"change event\"}}\n\nWhenever the value of a form field changes, it will fire a `\"change\"` event.\n\n## Focus\n\n{{index keyboard, focus}}\n\n{{indexsee \"keyboard focus\", focus}}\n\nUnlike most elements in HTML documents, form fields can get _keyboard ((focus))_. When clicked, moved to with [tab]{keyname}, or activated in some other way, they become the currently active element and the recipient of keyboard ((input)).\n\n{{index \"option (HTML tag)\", \"select (HTML tag)\"}}\n\nThus, you can type into a ((text field)) only when it is focused. Other fields respond differently to keyboard events. For example, a `<select>` menu tries to move to the option that contains the text the user typed and responds to the arrow keys by moving its selection up and down.\n\n{{index \"focus method\", \"blur method\", \"activeElement property\"}}\n\nWe can control ((focus)) from JavaScript with the `focus` and `blur` methods. The first moves focus to the DOM element it is called on, and the second removes focus. The value in `document.activeElement` corresponds to the currently focused element.\n\n```{lang: html}\n<input type=\"text\">\n<script>\n  document.querySelector(\"input\").focus();\n  console.log(document.activeElement.tagName);\n  // → INPUT\n  document.querySelector(\"input\").blur();\n  console.log(document.activeElement.tagName);\n  // → BODY\n</script>\n```\n\n{{index \"autofocus attribute\"}}\n\nFor some pages, the user is expected to want to interact with a form field immediately. JavaScript can be used to ((focus)) this field when the document is loaded, but HTML also provides the `autofocus` attribute, which produces the same effect while letting the browser know what we are trying to achieve. This gives the browser the option to disable the behavior when it is not appropriate, such as when the user has put the focus on something else.\n\n{{index \"tab key\", keyboard, \"tabindex attribute\", \"a (HTML tag)\"}}\n\nBrowsers allow the user to move the focus through the document by pressing [tab]{keyname} to move to the next focusable element, and [shift-tab]{keyname} to move back to the previous element. By default, elements are visited in the order in which they appear in the document. It is possible to use the `tabindex` attribute to change this order. The following example document will let the focus jump from the text input to the OK button, rather than going through the help link first:\n\n```{lang: html, focus: true}\n<input type=\"text\" tabindex=1> <a href=\".\">(help)</a>\n<button onclick=\"console.log('ok')\" tabindex=2>OK</button>\n```\n\n{{index \"tabindex attribute\"}}\n\nBy default, most types of HTML elements cannot be focused. You can add a `tabindex` attribute to any element to make it focusable. A `tabindex` of 0 makes an element focusable without affecting the focus order.\n\n## Disabled fields\n\n{{index \"disabled attribute\"}}\n\nAll ((form)) ((field))s can be _disabled_ through their `disabled` attribute. It is an ((attribute)) that can be specified without value—the fact that it is present at all disables the element.\n\n```{lang: html}\n<button>I'm all right</button>\n<button disabled>I'm out</button>\n```\n\nDisabled fields cannot be ((focus))ed or changed, and browsers make them look gray and faded.\n\n{{if book\n\n{{figure {url: \"img/button_disabled.png\", alt: \"Screenshot of a disabled button\", width: \"3cm\"}}}\n\nif}}\n\n{{index \"user experience\"}}\n\nWhen a program is in the process of handling an action caused by some ((button)) or other control that might require communication with the server and thus take a while, it can be a good idea to disable the control until the action finishes. That way, when the user gets impatient and clicks it again, they don't accidentally repeat their action.\n\n## The form as a whole\n\n{{index \"array-like object\", \"form (HTML tag)\", \"form property\", \"elements property\"}}\n\nWhen a ((field)) is contained in a `<form>` element, its DOM element will have a `form` property linking back to the form's DOM element. The `<form>` element, in turn, has a property called `elements` that contains an array-like collection of the fields inside it.\n\n{{index \"elements property\", \"name attribute\"}}\n\nThe `name` attribute of a form field determines the way its value will be identified when the form is ((submit))ted. It can also be used as a property name when accessing the form's `elements` property, which acts both as an array-like object (accessible by number) and a ((map)) (accessible by name).\n\n```{lang: html}\n<form action=\"example/submit.html\">\n  Name: <input type=\"text\" name=\"name\"><br>\n  Password: <input type=\"password\" name=\"password\"><br>\n  <button type=\"submit\">Log in</button>\n</form>\n<script>\n  let form = document.querySelector(\"form\");\n  console.log(form.elements[1].type);\n  // → password\n  console.log(form.elements.password.type);\n  // → password\n  console.log(form.elements.name.form == form);\n  // → true\n</script>\n```\n\n{{index \"button (HTML tag)\", \"type attribute\", submit, \"enter key\"}}\n\nA button with a `type` attribute of `submit` will, when pressed, cause the form to be submitted. Pressing [enter]{keyname} when a form field is focused has the same effect.\n\n{{index \"submit event\", \"event handling\", \"preventDefault method\", \"page reload\", \"GET method\", \"POST method\"}}\n\nSubmitting a ((form)) normally means that the ((browser)) navigates to the page indicated by the form's `action` attribute, using either a `GET` or a `POST` ((request)). But before that happens, a `\"submit\"` event is fired. You can handle this event with JavaScript and prevent this default behavior by calling `preventDefault` on the event object.\n\n```{lang: html}\n<form>\n  Value: <input type=\"text\" name=\"value\">\n  <button type=\"submit\">Save</button>\n</form>\n<script>\n  let form = document.querySelector(\"form\");\n  form.addEventListener(\"submit\", event => {\n    console.log(\"Saving value\", form.elements.value.value);\n    event.preventDefault();\n  });\n</script>\n```\n\n{{index \"submit event\", validation}}\n\nIntercepting `\"submit\"` events in JavaScript has various uses. We can write code to verify that the values the user entered make sense and immediately show an error message instead of submitting the form. Or we can disable the regular way of submitting the form entirely, as in the example, and have our program handle the input, possibly using `fetch` to send it to a server without reloading the page.\n\n## Text fields\n\n{{index \"value attribute\", \"input (HTML tag)\", \"text field\", \"textarea (HTML tag)\", [DOM, fields], [interface, object]}}\n\nFields created by `<textarea>` tags, or `<input>` tags with a type of `text` or `password`, share a common interface. Their DOM elements have a `value` property that holds their current content as a string value. Setting this property to another string changes the field's content.\n\n{{index \"selectionStart property\", \"selectionEnd property\"}}\n\nThe `selectionStart` and `selectionEnd` properties of ((text field))s give us information about the ((cursor)) and ((selection)) in the ((text)). When nothing is selected, these two properties hold the same number, indicating the position of the cursor. For example, 0 indicates the start of the text, and 10 indicates the cursor is after the 10^th^ ((character)). When part of the field is selected, the two properties will differ, giving us the start and end of the selected text. Like `value`, these properties may also be written to.\n\n{{index Khasekhemwy, \"textarea (HTML tag)\", keyboard, \"event handling\"}}\n\nImagine you are writing an article about Khasekhemwy, last pharaoh of the Second Dynasty, but have some trouble spelling his name. The following code wires up a `<textarea>` tag with an event handler that, when you press F2, inserts the string \"Khasekhemwy\" for you.\n\n```{lang: html}\n<textarea></textarea>\n<script>\n  let textarea = document.querySelector(\"textarea\");\n  textarea.addEventListener(\"keydown\", event => {\n    if (event.key == \"F2\") {\n      replaceSelection(textarea, \"Khasekhemwy\");\n      event.preventDefault();\n    }\n  });\n  function replaceSelection(field, word) {\n    let from = field.selectionStart, to = field.selectionEnd;\n    field.value = field.value.slice(0, from) + word +\n                  field.value.slice(to);\n    // Put the cursor after the word\n    field.selectionStart = from + word.length;\n    field.selectionEnd = from + word.length;\n  }\n</script>\n```\n\n{{index \"replaceSelection function\", \"text field\"}}\n\nThe `replaceSelection` function replaces the currently selected part of a text field's content with the given word and then moves the ((cursor)) after that word so that the user can continue typing.\n\n{{index \"change event\", \"input event\"}}\n\nThe `\"change\"` event for a ((text field)) does not fire every time something is typed. Rather, it fires when the field loses ((focus)) after its content was changed. To respond immediately to changes in a text field, you should register a handler for the `\"input\"` event instead, which fires every time the user types a character, deletes text, or otherwise manipulates the field's content.\n\nThe following example shows a text field and a counter displaying the current length of the text in the field:\n\n```{lang: html}\n<input type=\"text\"> length: <span id=\"length\">0</span>\n<script>\n  let text = document.querySelector(\"input\");\n  let output = document.querySelector(\"#length\");\n  text.addEventListener(\"input\", () => {\n    output.textContent = text.value.length;\n  });\n</script>\n```\n\n## Checkboxes and radio buttons\n\n{{index \"input (HTML tag)\", \"checked attribute\"}}\n\nA ((checkbox)) field is a binary toggle. Its value can be extracted or changed through its `checked` property, which holds a Boolean value.\n\n```{lang: html}\n<label>\n  <input type=\"checkbox\" id=\"purple\"> Make this page purple\n</label>\n<script>\n  let checkbox = document.querySelector(\"#purple\");\n  checkbox.addEventListener(\"change\", () => {\n    document.body.style.background =\n      checkbox.checked ? \"mediumpurple\" : \"\";\n  });\n</script>\n```\n\n{{index \"for attribute\", \"id attribute\", focus, \"label (HTML tag)\", labeling}}\n\nThe `<label>` tag associates a piece of document with an input ((field)). Clicking anywhere on the label will activate the field, which focuses it and toggles its value when it is a checkbox or radio button.\n\n{{index \"input (HTML tag)\", \"multiple-choice\"}}\n\nA ((radio button)) is similar to a checkbox, but it's implicitly linked to other radio buttons with the same `name` attribute so that only one of them can be active at any time.\n\n```{lang: html}\nColor:\n<label>\n  <input type=\"radio\" name=\"color\" value=\"orange\"> Orange\n</label>\n<label>\n  <input type=\"radio\" name=\"color\" value=\"lightgreen\"> Green\n</label>\n<label>\n  <input type=\"radio\" name=\"color\" value=\"lightblue\"> Blue\n</label>\n<script>\n  let buttons = document.querySelectorAll(\"[name=color]\");\n  for (let button of Array.from(buttons)) {\n    button.addEventListener(\"change\", () => {\n      document.body.style.background = button.value;\n    });\n  }\n</script>\n```\n\n{{index \"name attribute\", \"querySelectorAll method\"}}\n\nThe ((square brackets)) in the CSS query given to `querySelectorAll` are used to match attributes. It selects elements whose `name` attribute is `\"color\"`.\n\n## Select fields\n\n{{index \"select (HTML tag)\", \"multiple-choice\", \"option (HTML tag)\"}}\n\nSelect fields are conceptually similar to radio buttons—they also allow the user to choose from a set of options. But where a radio button puts the layout of the options under our control, the appearance of a `<select>` tag is determined by the browser.\n\n{{index \"multiple attribute\", \"drop-down menu\"}}\n\nSelect fields also have a variant more akin to a list of checkboxes rather than radio boxes. When given the `multiple` attribute, a `<select>` tag will allow the user to select any number of options, rather than just a single option. Whereas a regular select field is drawn as a _drop-down_ control, which shows the inactive options only when you open it, a field with `multiple` enabled shows multiple options at the same time, allowing the user to enable or disable them individually.\n\n{{index \"option (HTML tag)\", \"value attribute\"}}\n\nEach `<option>` tag has a value. This value can be defined with a `value` attribute. When that is not given, the ((text)) inside the option will count as its value. The `value` property of a `<select>` element reflects the currently selected option. For a `multiple` field, though, this property doesn't mean much, since it will give the value of only _one_ of the currently selected options.\n\n{{index \"select (HTML tag)\", \"options property\", \"selected attribute\"}}\n\nThe `<option>` tags for a `<select>` field can be accessed as an array-like object through the field's `options` property. Each option has a property called `selected`, which indicates whether that option is currently selected. The property can also be written to select or deselect an option.\n\n{{index \"multiple attribute\", \"binary number\"}}\n\nThis example extracts the selected values from a `multiple` select field and uses them to compose a binary number from individual bits. Hold [ctrl]{keyname} (or [command]{keyname} on a Mac) to select multiple options.\n\n```{lang: html}\n<select multiple>\n  <option value=\"1\">0001</option>\n  <option value=\"2\">0010</option>\n  <option value=\"4\">0100</option>\n  <option value=\"8\">1000</option>\n</select> = <span id=\"output\">0</span>\n<script>\n  let select = document.querySelector(\"select\");\n  let output = document.querySelector(\"#output\");\n  select.addEventListener(\"change\", () => {\n    let number = 0;\n    for (let option of Array.from(select.options)) {\n      if (option.selected) {\n        number += Number(option.value);\n      }\n    }\n    output.textContent = number;\n  });\n</script>\n```\n\n## File fields\n\n{{index file, \"hard drive\", \"filesystem\", security, \"file field\", \"input (HTML tag)\"}}\n\nFile fields were originally designed as a way to ((upload)) files from the user's machine through a form. In modern browsers, they also provide a way to read such files from JavaScript programs. The field acts as a kind of gatekeeper. The script cannot simply start reading private files from the user's computer, but if the user selects a file in such a field, the browser interprets that action to mean that the script may read the file.\n\nA file field usually looks like a button labeled with something like \"choose file\" or \"browse\", with information about the chosen file next to it.\n\n```{lang: html}\n<input type=\"file\">\n<script>\n  let input = document.querySelector(\"input\");\n  input.addEventListener(\"change\", () => {\n    if (input.files.length > 0) {\n      let file = input.files[0];\n      console.log(\"You chose\", file.name);\n      if (file.type) console.log(\"It has type\", file.type);\n    }\n  });\n</script>\n```\n\n{{index \"multiple attribute\", \"files property\"}}\n\nThe `files` property of a ((file field)) element is an ((array-like object)) (once again, not a real array) containing the files chosen in the field. It is initially empty. The reason there isn't simply a `file` property is that file fields also support a `multiple` attribute, which makes it possible to select multiple files at the same time.\n\n{{index \"File type\"}}\n\nThe objects in `files` have properties such as `name` (the filename), `size` (the file's size in bytes, which are chunks of 8 bits), and `type` (the media type of the file, such as `text/plain` or `image/jpeg`).\n\n{{index [\"asynchronous programming\", \"reading files\"], \"file reading\", \"FileReader class\"}}\n\n{{id filereader}}\n\nWhat it does not have is a property that contains the content of the file. Getting at that is a little more involved. Since reading a file from disk can take time, the interface is asynchronous to avoid freezing the window.\n\n```{lang: html}\n<input type=\"file\" multiple>\n<script>\n  let input = document.querySelector(\"input\");\n  input.addEventListener(\"change\", () => {\n    for (let file of Array.from(input.files)) {\n      let reader = new FileReader();\n      reader.addEventListener(\"load\", () => {\n        console.log(\"File\", file.name, \"starts with\",\n                    reader.result.slice(0, 20));\n      });\n      reader.readAsText(file);\n    }\n  });\n</script>\n```\n\n{{index \"FileReader class\", \"load event\", \"readAsText method\", \"result property\"}}\n\nReading a file is done by creating a `FileReader` object, registering a `\"load\"` event handler for it, and calling its `readAsText` method, giving it the file we want to read. Once loading finishes, the reader's `result` property contains the file's content.\n\n{{index \"error event\", \"FileReader class\", \"Promise class\"}}\n\n`FileReader`s also fire an `\"error\"` event when reading the file fails for any reason. The error object itself will end up in the reader's `error` property. This interface was designed before promises became part of the language. You could wrap it in a promise like this:\n\n```\nfunction readFileText(file) {\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader();\n    reader.addEventListener(\n      \"load\", () => resolve(reader.result));\n    reader.addEventListener(\n      \"error\", () => reject(reader.error));\n    reader.readAsText(file);\n  });\n}\n```\n\n## Storing data client-side\n\n{{index \"web application\"}}\n\nSimple ((HTML)) pages with a bit of JavaScript can be a great format for \"((mini application))s\"—small helper programs that automate basic tasks. By connecting a few form ((field))s with event handlers, you can do anything from converting between centimeters and inches to computing passwords from a master password and a website name.\n\n{{index persistence, [binding, \"as state\"], [browser, storage]}}\n\nWhen such an application needs to remember something between sessions, you cannot use JavaScript bindings—those are thrown away every time the page is closed. You could set up a server, connect it to the internet, and have your application store something there (we'll see how to do that in [Chapter ?](node)). But that's a lot of extra work and complexity. Sometimes it's enough to just keep the data in the ((browser)).\n\n{{index \"localStorage object\", \"setItem method\", \"getItem method\", \"removeItem method\"}}\n\nThe `localStorage` object can be used to store data in a way that survives ((page reload))s. This object allows you to file string values under names.\n\n```\nlocalStorage.setItem(\"username\", \"marijn\");\nconsole.log(localStorage.getItem(\"username\"));\n// → marijn\nlocalStorage.removeItem(\"username\");\n```\n\n{{index \"localStorage object\"}}\n\nA value in `localStorage` sticks around until it is overwritten or is removed with `removeItem`, or the user clears their local data.\n\n{{index security}}\n\nSites from different ((domain))s get different storage compartments. That means data stored in `localStorage` by a given website can, in principle, be read (and overwritten) only by scripts on that same site.\n\n{{index \"localStorage object\"}}\n\nBrowsers do enforce a limit on the size of the data a site can store in `localStorage`. That restriction, along with the fact that filling up people's ((hard drive))s with junk is not really profitable, prevents the feature from eating up too much space.\n\n{{index \"localStorage object\", \"note-taking example\", \"select (HTML tag)\", \"button (HTML tag)\", \"textarea (HTML tag)\"}}\n\nThe following code implements a crude note-taking application. It keeps a set of named notes and allows the user to edit notes and create new ones.\n\n```{lang: html, startCode: true}\nNotes: <select></select> <button>Add</button><br>\n<textarea style=\"width: 100%\"></textarea>\n\n<script>\n  let list = document.querySelector(\"select\");\n  let note = document.querySelector(\"textarea\");\n\n  let state;\n  function setState(newState) {\n    list.textContent = \"\";\n    for (let name of Object.keys(newState.notes)) {\n      let option = document.createElement(\"option\");\n      option.textContent = name;\n      if (newState.selected == name) option.selected = true;\n      list.appendChild(option);\n    }\n    note.value = newState.notes[newState.selected];\n\n    localStorage.setItem(\"Notes\", JSON.stringify(newState));\n    state = newState;\n  }\n  setState(JSON.parse(localStorage.getItem(\"Notes\")) ?? {\n    notes: {\"shopping list\": \"Carrots\\nRaisins\"},\n    selected: \"shopping list\"\n  });\n\n  list.addEventListener(\"change\", () => {\n    setState({notes: state.notes, selected: list.value});\n  });\n  note.addEventListener(\"change\", () => {\n    let {selected} = state;\n    setState({\n      notes: {...state.notes, [selected]: note.value},\n      selected\n    });\n  });\n  document.querySelector(\"button\")\n    .addEventListener(\"click\", () => {\n      let name = prompt(\"Note name\");\n      if (name) setState({\n        notes: {...state.notes, [name]: \"\"},\n        selected: name\n      });\n    });\n</script>\n```\n\n{{index \"getItem method\", JSON, \"?? operator\", \"default value\"}}\n\nThe script gets its starting state from the `\"Notes\"` value stored in `localStorage` or, if that's missing, creates an example state that has only a shopping list in it. Reading a field that does not exist from `localStorage` will yield `null`. Passing `null` to `JSON.parse` will make it parse the string `\"null\"` and return `null`. Thus, the `??` operator can be used to provide a default value in a situation like this.\n\nThe `setState` method makes sure the DOM is showing a given state and stores the new state to `localStorage`. Event handlers call this function to move to a new state.\n\n{{index [object, creation], property, \"computed property\"}}\n\nThe `...` syntax in the example is used to create a new object that is a clone of the old `state.notes`, but with one property added or overwritten. It uses ((spread)) syntax to first add the properties from the old object and then set a new property. The ((square brackets)) notation in the object literal is used to create a property whose name is based on some dynamic value.\n\n{{index \"sessionStorage object\", [browser, storage]}}\n\nThere is another object, similar to `localStorage`, called `sessionStorage`. The difference between the two is that the content of `sessionStorage` is forgotten at the end of each _((session))_, which for most browsers means whenever the browser is closed.\n\n## Summary\n\nIn this chapter, we discussed how the HTTP protocol works. A _client_ sends a request, which contains a method (usually `GET`) and a path that identifies a resource. The _server_ then decides what to do with the request and responds with a status code and a response body. Both requests and responses may contain headers that provide additional information.\n\nThe interface through which browser JavaScript can make HTTP requests is called `fetch`. Making a request looks like this:\n\n```\nfetch(\"/18_http.html\").then(r => r.text()).then(text => {\n  console.log(`The page starts with ${text.slice(0, 15)}`);\n});\n```\n\nBrowsers make `GET` requests to fetch the resources needed to display a web page. A page may also contain forms, which allow information entered by the user to be sent as a request for a new page when the form is submitted.\n\nHTML can represent various types of form fields, such as text fields, checkboxes, multiple-choice fields, and file pickers. Such fields can be inspected and manipulated with JavaScript. They fire the `\"change\"` event when changed, fire the `\"input\"` event when text is typed, and receive keyboard events when they have keyboard focus. Properties like `value` (for text and select fields) or `checked` (for checkboxes and radio buttons) are used to read or set the field's content.\n\nWhen a form is submitted, a `\"submit\"` event is fired on it. A JavaScript handler can call `preventDefault` on that event to disable the browser's default behavior. Form field elements may also occur outside of a form tag.\n\nWhen the user has selected a file from their local filesystem in a file picker field, the `FileReader` interface can be used to access the content of this file from a JavaScript program.\n\nThe `localStorage` and `sessionStorage` objects can be used to save information in a way that survives page reloads. The first object saves the data forever (or until the user decides to clear it), and the second saves it until the browser is closed.\n\n## Exercises\n\n### Content negotiation\n\n{{index \"Accept header\", \"media type\", \"document format\", \"content negotiation (exercise)\"}}\n\nOne of the things HTTP can do is called _content negotiation_. The `Accept` request header is used to tell the server what type of document the client would like to get. Many servers ignore this header, but when a server knows of various ways to encode a resource, it can look at this header and send the one that the client prefers.\n\n{{index \"MIME type\"}}\n\nThe URL [_https://eloquentjavascript.net/author_](https://eloquentjavascript.net/author) is configured to respond with either plaintext, HTML, or JSON, depending on what the client asks for. These formats are identified by the standardized _((media type))s_ `text/plain`, `text/html`, and `application/json`.\n\n{{index \"headers property\", \"fetch function\"}}\n\nSend requests to fetch all three formats of this resource. Use the `headers` property in the options object passed to `fetch` to set the header named `Accept` to the desired media type.\n\nFinally, try asking for the media type `application/rainbows+unicorns` and see which status code that produces.\n\n{{if interactive\n\n```{test: no}\n// Your code here.\n```\n\nif}}\n\n{{hint\n\n{{index \"content negotiation (exercise)\"}}\n\nBase your code on the `fetch` examples [earlier in the chapter](http#fetch).\n\n{{index \"406 (HTTP status code)\", \"Accept header\"}}\n\nAsking for a bogus media type will return a response with code 406, \"Not acceptable\", which is the code a server should return when it can't fulfill the `Accept` header.\n\nhint}}\n\n### A JavaScript workbench\n\n{{index \"JavaScript console\", \"workbench (exercise)\"}}\n\nBuild an interface that allows users to type and run pieces of JavaScript code.\n\n{{index \"textarea (HTML tag)\", \"button (HTML tag)\", \"Function constructor\", \"error message\"}}\n\nPut a button next to a `<textarea>` field that, when pressed, uses the `Function` constructor we saw in [Chapter ?](modules#eval) to wrap the text in a function and call it. Convert the return value of the function, or any error it raises, to a string and display it below the text field.\n\n{{if interactive\n\n```{lang: html, test: no}\n<textarea id=\"code\">return \"hi\";</textarea>\n<button id=\"button\">Run</button>\n<pre id=\"output\"></pre>\n\n<script>\n  // Your code here.\n</script>\n```\n\nif}}\n\n{{hint\n\n{{index \"click event\", \"mousedown event\", \"Function constructor\", \"workbench (exercise)\"}}\n\nUse `document.querySelector` or `document.getElementById` to get access to the elements defined in your HTML. An event handler for `\"click\"` or `\"mousedown\"` events on the button can get the `value` property of the text field and call `Function` on it.\n\n{{index \"try keyword\", \"exception handling\"}}\n\nMake sure you wrap both the call to `Function` and the call to its result in a `try` block so you can catch the exceptions it produces. In this case, we really don't know what type of exception we are looking for, so catch everything.\n\n{{index \"textContent property\", output, text, \"createTextNode method\", \"newline character\"}}\n\nThe `textContent` property of the output element can be used to fill it with a string message. Or, if you want to keep the old content around, create a new text node using `document.createTextNode` and append it to the element. Remember to add a newline character to the end so that not all output appears on a single line.\n\nhint}}\n\n### Conway's Game of Life\n\n{{index \"game of life (exercise)\", \"artificial life\", \"Conway's Game of Life\"}}\n\nConway's Game of Life is a simple ((simulation)) that creates artificial \"life\" on a ((grid)), each cell of which is either alive or not. In each ((generation)) (turn), the following rules are applied:\n\n* Any live ((cell)) with fewer than two or more than three live   ((neighbor))s dies.\n\n* Any live cell with two or three live neighbors lives on to the next   generation.\n\n* Any dead cell with exactly three live neighbors becomes a live cell.\n\nA _neighbor_ is defined as any adjacent cell, including diagonally adjacent ones.\n\n{{index \"pure function\"}}\n\nNote that these rules are applied to the whole grid at once, not one square at a time. That means the counting of neighbors is based on the situation at the start of the generation, and changes happening to neighbor cells during this generation should not influence the new state of a given cell.\n\n{{index \"Math.random function\"}}\n\nImplement this game using whichever ((data structure)) you find appropriate. Use `Math.random` to populate the grid with a random pattern initially. Display it as a grid of ((checkbox)) ((field))s, with a ((button)) next to it to advance to the next ((generation)). When the user checks or unchecks the checkboxes, their changes should be included when computing the next generation.\n\n{{if interactive\n\n```{lang: html, test: no}\n<div id=\"grid\"></div>\n<button id=\"next\">Next generation</button>\n\n<script>\n  // Your code here.\n</script>\n```\n\nif}}\n\n{{hint\n\n{{index \"game of life (exercise)\"}}\n\nTo solve the problem of having the changes conceptually happen at the same time, try to see the computation of a ((generation)) as a ((pure function)), which takes one ((grid)) and produces a new grid that represents the next turn.\n\nRepresenting the matrix can be done with a single array of width × height elements, storing values row by row, so, for example, the third element in the fifth row is (using zero-based indexing) stored at position 4 × _width_ + 2. You can count live ((neighbor))s with two nested loops, looping over adjacent coordinates in both dimensions. Take care not to count cells outside of the field and to ignore the cell in the center, whose neighbors we are counting.\n\n{{index \"event handling\", \"change event\"}}\n\nEnsuring that changes to ((checkbox))es take effect on the next generation can be done in two ways. An event handler could notice these changes and update the current grid to reflect them, or you could generate a fresh grid from the values in the checkboxes before computing the next turn.\n\nIf you choose to go with event handlers, you might want to attach ((attribute))s that identify the position that each checkbox corresponds to so that it is easy to find out which cell to change.\n\n{{index drawing, \"table (HTML tag)\", \"br (HTML tag)\"}}\n\nTo draw the grid of checkboxes, you can either use a `<table>` element (see [Chapter ?](dom#exercise_table)) or simply put them all in the same element and put `<br>` (line break) elements between the rows.\n\nhint}}\n"
        },
        {
          "name": "19_paint.md",
          "type": "blob",
          "size": 47.69140625,
          "content": "{{meta {load_files: [\"code/chapter/19_paint.js\"], zip: \"html include=[\\\"css/paint.css\\\"]\"}}}\n\n# Project: A Pixel Art Editor\n\n{{quote {author: \"Joan Miró\", chapter: true}\n\nI look at the many colors before me. I look at my blank canvas. Then, I try to apply colors like words that shape poems, like notes that shape music.\n\nquote}}\n\n{{index \"Miró, Joan\", \"drawing program example\", \"project chapter\"}}\n\n{{figure {url: \"img/chapter_picture_19.jpg\", alt: \"Illustration showing a mosaic of black tiles, with jars of other tiles next to it\", chapter: \"framed\"}}}\n\nThe material from the previous chapters gives you all the elements you need to build a basic ((web application)). In this chapter, we will do just that.\n\n{{index [file, image]}}\n\nOur ((application)) will be a ((pixel))-((drawing)) program that allows you to modify a picture pixel by pixel by manipulating a zoomed-in view of it, shown as a grid of colored squares. You can use the program to open image files, scribble on them with your mouse or other pointer device, and save them. This is what it will look like:\n\n{{figure {url: \"img/pixel_editor.png\", alt: \"Screenshot of the pixel editor interface, with a grid of colored pixels at the top and a number of controls, in the form of HTML fields and buttons, below that\", width: \"8cm\"}}}\n\nPainting on a computer is great. You don't need to worry about materials, ((skill)), or talent. You just start smearing and see where you end up.\n\n## Components\n\n{{index drawing, \"select (HTML tag)\", \"canvas (HTML tag)\", component}}\n\nThe interface for the application shows a big `<canvas>` element on top, with a number of form ((field))s below it. The user draws on the ((picture)) by selecting a tool from a `<select>` field and then clicking, ((touch))ing, or ((dragging)) across the canvas. There are ((tool))s for drawing single pixels or rectangles, for filling an area, and for picking a ((color)) from the picture.\n\n{{index [DOM, components]}}\n\nWe will structure the editor interface as a number of _((component))s_, objects that are responsible for a piece of the DOM and that may contain other components inside them.\n\n{{index [state, \"of application\"]}}\n\nThe state of the application consists of the current picture, the selected tool, and the selected color. We'll set things up so that the state lives in a single value and the interface components always base the way they look on the current state.\n\nTo see why this is important, let's consider the alternative—distributing pieces of state throughout the interface. Up to a certain point, this is easier to program. We can just put in a ((color field)) and read its value when we need to know the current color.\n\nBut then we add the ((color picker))—a tool that lets you click the picture to select the color of a given pixel. To keep the color field showing the correct color, that tool would have to know that the color field exists and update it whenever it picks a new color. If you ever add another place that makes the color visible (maybe the mouse cursor could show it), you have to update your color-changing code to keep that synchronized as well.\n\n{{index modularity}}\n\nIn effect, this creates a problem where each part of the interface needs to know about all other parts, which is not very modular. For small applications like the one in this chapter, that may not be a problem. For bigger projects, it can turn into a real nightmare.\n\nTo avoid this nightmare on principle, we're going to be strict about _((data flow))_. There is a state, and the interface is drawn based on that state. An interface component may respond to user actions by updating the state, at which point the components get a chance to synchronize themselves with this new state.\n\n{{index library, framework}}\n\nIn practice, each ((component)) is set up so that when it is given a new state, it also notifies its child components, insofar as those need to be updated. Setting this up is a bit of a hassle. Making this more convenient is the main selling point of many browser programming libraries. But for a small application like this, we can do it without such infrastructure.\n\n{{index [state, transitions]}}\n\nUpdates to the state are represented as objects, which we'll call _((action))s_. Components may create such actions and _((dispatch))_ them—give them to a central state management function. That function computes the next state, after which the interface components update themselves to this new state.\n\n{{index [DOM, components]}}\n\nWe're taking the messy task of running a ((user interface)) and applying ((structure)) to it. Though the DOM-related pieces are still full of ((side effect))s, they are held up by a conceptually simple backbone: the state update cycle. The state determines what the DOM looks like, and the only way DOM events can change the state is by dispatching actions to the state.\n\n{{index \"data flow\"}}\n\nThere are _many_ variants of this approach, each with its own benefits and problems, but their central idea is the same: state changes should go through a single well-defined channel, not happen all over the place.\n\n{{index \"dom property\", [interface, object]}}\n\nOur ((component))s will be ((class))es conforming to an interface. Their constructor is given a state—which may be the whole application state or some smaller value if it doesn't need access to everything—and uses that to build up a `dom` property. This is the DOM element that represents the component. Most constructors will also take some other values that won't change over time, such as the function they can use to ((dispatch)) an action.\n\n{{index \"syncState method\"}}\n\nEach component has a `syncState` method that is used to synchronize it to a new state value. The method takes one argument, the state, which is of the same type as the first argument to its constructor.\n\n## The state\n\n{{index \"Picture class\", \"picture property\", \"tool property\", \"color property\"}}\n\nThe application state will be an object with `picture`, `tool`, and `color` properties. The picture is itself an object that stores the width, height, and pixel content of the picture. The ((pixel))s are stored in a single array, row by row, from top to bottom.\n\n```{includeCode: true}\nclass Picture {\n  constructor(width, height, pixels) {\n    this.width = width;\n    this.height = height;\n    this.pixels = pixels;\n  }\n  static empty(width, height, color) {\n    let pixels = new Array(width * height).fill(color);\n    return new Picture(width, height, pixels);\n  }\n  pixel(x, y) {\n    return this.pixels[x + y * this.width];\n  }\n  draw(pixels) {\n    let copy = this.pixels.slice();\n    for (let {x, y, color} of pixels) {\n      copy[x + y * this.width] = color;\n    }\n    return new Picture(this.width, this.height, copy);\n  }\n}\n```\n\n{{index \"side effect\", \"persistent data structure\"}}\n\nWe want to be able to treat a picture as an ((immutable)) value, for reasons we'll get back to later in the chapter. But we also sometimes need to update a whole bunch of pixels at a time. To be able to do that, the class has a `draw` method that expects an array of updated pixels—objects with `x`, `y`, and `color` properties—and creates a new picture with those pixels overwritten. This method uses `slice` without arguments to copy the entire pixel array—the start of the slice defaults to 0, and the end defaults to the array's length.\n\n{{index \"Array constructor\", \"fill method\", [\"length property\", \"for array\"], [array, creation]}}\n\nThe `empty` method uses two pieces of array functionality that we haven't seen before. The `Array` constructor can be called with a number to create an empty array of the given length. The `fill` method can then be used to fill this array with a given value. These are used to create an array in which all pixels have the same color.\n\n{{index \"hexadecimal number\", \"color component\", \"color field\", \"fillStyle property\"}}\n\nColors are stored as strings containing traditional ((CSS)) ((color code))s made up of a ((hash sign)) (`#`) followed by six hexadecimal (base-16) digits—two for the ((red)) component, two for the ((green)) component, and two for the ((blue)) component. This is a somewhat cryptic and inconvenient way to write colors, but it is the format the HTML color input field uses, and it can be used in the `fillStyle` property of a canvas drawing context, so for the ways we'll use colors in this program, it is practical enough.\n\n{{index black}}\n\nBlack, where all components are zero, is written `\"#000000\"`, and bright ((pink)) looks like `\"#ff00ff\"`, where the red and blue components have the maximum value of 255, written `ff` in hexadecimal ((digit))s (which use _a_ to _f_ to represent digits 10 to 15).\n\n{{index [state, transitions]}}\n\nWe'll allow the interface to ((dispatch)) ((action))s as objects whose properties overwrite the properties of the previous state. The color field, when the user changes it, could dispatch an object like `{color: field.value}`, from which this update function can compute a new state.\n\n{{index \"updateState function\"}}\n\n```{includeCode: true}\nfunction updateState(state, action) {\n  return {...state, ...action};\n}\n```\n\n{{index \"period character\"}}\n\nThis pattern, in which object ((spread)) is used to first add the properties an existing object and then override some of those, is common in JavaScript code that uses ((immutable)) objects.\n\n## DOM building\n\n{{index \"createElement method\", \"elt function\", [DOM, construction]}}\n\nOne of the main things that interface components do is create DOM structure. We again don't want to directly use the verbose DOM methods for that, so here's a slightly expanded version of the `elt` function:\n\n```{includeCode: true}\nfunction elt(type, props, ...children) {\n  let dom = document.createElement(type);\n  if (props) Object.assign(dom, props);\n  for (let child of children) {\n    if (typeof child != \"string\") dom.appendChild(child);\n    else dom.appendChild(document.createTextNode(child));\n  }\n  return dom;\n}\n```\n\n{{index \"setAttribute method\", \"attribute\", \"onclick property\", \"click event\", \"event handling\"}}\n\nThe main difference between this version and the one we used in [Chapter ?](game#domdisplay) is that it assigns _properties_ to DOM nodes, not _attributes_. This means we can't use it to set arbitrary attributes, but we _can_ use it to set properties whose value isn't a string, such as `onclick`, which can be set to a function to register a click event handler.\n\n{{index \"button (HTML tag)\"}}\n\nThis allows this convenient style for registering event handlers:\n\n```{lang: html}\n<body>\n  <script>\n    document.body.appendChild(elt(\"button\", {\n      onclick: () => console.log(\"click\")\n    }, \"The button\"));\n  </script>\n</body>\n```\n\n## The canvas\n\nThe first component we'll define is the part of the interface that displays the picture as a grid of colored boxes. This component is responsible for two things: showing a picture and communicating ((pointer event))s on that picture to the rest of the application.\n\n{{index \"PictureCanvas class\", \"callback function\", \"scale constant\", \"canvas (HTML tag)\", \"mousedown event\", \"touchstart event\", [state, \"of application\"]}}\n\nTherefore, we can define it as a component that only knows about the current picture, not the whole application state. Because it doesn't know how the application as a whole works, it cannot directly dispatch ((action))s. Rather, when responding to pointer events, it calls a callback function provided by the code that created it, which will handle the application-specific parts.\n\n```{includeCode: true}\nconst scale = 10;\n\nclass PictureCanvas {\n  constructor(picture, pointerDown) {\n    this.dom = elt(\"canvas\", {\n      onmousedown: event => this.mouse(event, pointerDown),\n      ontouchstart: event => this.touch(event, pointerDown)\n    });\n    this.syncState(picture);\n  }\n  syncState(picture) {\n    if (this.picture == picture) return;\n    this.picture = picture;\n    drawPicture(this.picture, this.dom, scale);\n  }\n}\n```\n\n{{index \"syncState method\", efficiency}}\n\nWe draw each pixel as a 10-by-10 square, as determined by the `scale` constant. To avoid unnecessary work, the component keeps track of its current picture and does a redraw only when `syncState` is given a new picture.\n\n{{index \"drawPicture function\"}}\n\nThe actual drawing function sets the size of the canvas based on the scale and picture size and fills it with a series of squares, one for each pixel.\n\n```{includeCode: true}\nfunction drawPicture(picture, canvas, scale) {\n  canvas.width = picture.width * scale;\n  canvas.height = picture.height * scale;\n  let cx = canvas.getContext(\"2d\");\n\n  for (let y = 0; y < picture.height; y++) {\n    for (let x = 0; x < picture.width; x++) {\n      cx.fillStyle = picture.pixel(x, y);\n      cx.fillRect(x * scale, y * scale, scale, scale);\n    }\n  }\n}\n```\n\n{{index \"mousedown event\", \"mousemove event\", \"button property\", \"buttons property\", \"pointerPosition function\"}}\n\nWhen the left mouse button is pressed while the mouse is over the picture canvas, the component calls the `pointerDown` callback, giving it the position of the pixel that was clicked—in picture coordinates. This will be used to implement mouse interaction with the picture. The callback may return another callback function to be notified when the pointer is moved to a different pixel while the button is held down.\n\n```{includeCode: true}\nPictureCanvas.prototype.mouse = function(downEvent, onDown) {\n  if (downEvent.button != 0) return;\n  let pos = pointerPosition(downEvent, this.dom);\n  let onMove = onDown(pos);\n  if (!onMove) return;\n  let move = moveEvent => {\n    if (moveEvent.buttons == 0) {\n      this.dom.removeEventListener(\"mousemove\", move);\n    } else {\n      let newPos = pointerPosition(moveEvent, this.dom);\n      if (newPos.x == pos.x && newPos.y == pos.y) return;\n      pos = newPos;\n      onMove(newPos);\n    }\n  };\n  this.dom.addEventListener(\"mousemove\", move);\n};\n\nfunction pointerPosition(pos, domNode) {\n  let rect = domNode.getBoundingClientRect();\n  return {x: Math.floor((pos.clientX - rect.left) / scale),\n          y: Math.floor((pos.clientY - rect.top) / scale)};\n}\n```\n\n{{index \"getBoundingClientRect method\", \"clientX property\", \"clientY property\"}}\n\nSince we know the size of the ((pixel))s and we can use `getBoundingClientRect` to find the position of the canvas on the screen, it is possible to go from mouse event coordinates (`clientX` and `clientY`) to picture coordinates. These are always rounded down so that they refer to a specific pixel.\n\n{{index \"touchstart event\", \"touchmove event\", \"preventDefault method\"}}\n\nWith touch events, we have to do something similar, but using different events and making sure we call `preventDefault` on the `\"touchstart\"` event to prevent ((panning)).\n\n```{includeCode: true}\nPictureCanvas.prototype.touch = function(startEvent,\n                                         onDown) {\n  let pos = pointerPosition(startEvent.touches[0], this.dom);\n  let onMove = onDown(pos);\n  startEvent.preventDefault();\n  if (!onMove) return;\n  let move = moveEvent => {\n    let newPos = pointerPosition(moveEvent.touches[0],\n                                 this.dom);\n    if (newPos.x == pos.x && newPos.y == pos.y) return;\n    pos = newPos;\n    onMove(newPos);\n  };\n  let end = () => {\n    this.dom.removeEventListener(\"touchmove\", move);\n    this.dom.removeEventListener(\"touchend\", end);\n  };\n  this.dom.addEventListener(\"touchmove\", move);\n  this.dom.addEventListener(\"touchend\", end);\n};\n```\n\n{{index \"touches property\", \"clientX property\", \"clientY property\"}}\n\nFor touch events, `clientX` and `clientY` aren't available directly on the event object, but we can use the coordinates of the first touch object in the `touches` property.\n\n## The application\n\nTo make it possible to build the application piece by piece, we'll implement the main component as a shell around a picture canvas and a dynamic set of ((tool))s and ((control))s that we pass to its constructor.\n\nThe _controls_ are the interface elements that appear below the picture. They'll be provided as an array of ((component)) constructors.\n\n{{index \"br (HTML tag)\", \"flood fill\", \"select (HTML tag)\", \"PixelEditor class\", dispatch}}\n\nThe _tools_ do things like drawing pixels or filling in an area. The application shows the set of available tools as a `<select>` field. The currently selected tool determines what happens when the user interacts with the picture with a pointer device. The set of available tools is provided as an object that maps the names that appear in the drop-down field to functions that implement the tools. Such functions get a picture position, a current application state, and a `dispatch` function as arguments. They may return a move handler function that gets called with a new position and a current state when the pointer moves to a different pixel.\n\n```{includeCode: true}\nclass PixelEditor {\n  constructor(state, config) {\n    let {tools, controls, dispatch} = config;\n    this.state = state;\n\n    this.canvas = new PictureCanvas(state.picture, pos => {\n      let tool = tools[this.state.tool];\n      let onMove = tool(pos, this.state, dispatch);\n      if (onMove) return pos => onMove(pos, this.state);\n    });\n    this.controls = controls.map(\n      Control => new Control(state, config));\n    this.dom = elt(\"div\", {}, this.canvas.dom, elt(\"br\"),\n                   ...this.controls.reduce(\n                     (a, c) => a.concat(\" \", c.dom), []));\n  }\n  syncState(state) {\n    this.state = state;\n    this.canvas.syncState(state.picture);\n    for (let ctrl of this.controls) ctrl.syncState(state);\n  }\n}\n```\n\nThe pointer handler given to `PictureCanvas` calls the currently selected tool with the appropriate arguments and, if that returns a move handler, adapts it to also receive the state.\n\n{{index \"reduce method\", \"map method\", [whitespace, \"in HTML\"], \"syncState method\"}}\n\nAll controls are constructed and stored in `this.controls` so that they can be updated when the application state changes. The call to `reduce` introduces spaces between the controls' DOM elements. That way, they don't look so pressed together.\n\n{{index \"select (HTML tag)\", \"change event\", \"ToolSelect class\", \"syncState method\"}}\n\nThe first control is the ((tool)) selection menu. It creates a `<select>` element with an option for each tool and sets up a `\"change\"` event handler that updates the application state when the user selects a different tool.\n\n```{includeCode: true}\nclass ToolSelect {\n  constructor(state, {tools, dispatch}) {\n    this.select = elt(\"select\", {\n      onchange: () => dispatch({tool: this.select.value})\n    }, ...Object.keys(tools).map(name => elt(\"option\", {\n      selected: name == state.tool\n    }, name)));\n    this.dom = elt(\"label\", null, \"🖌 Tool: \", this.select);\n  }\n  syncState(state) { this.select.value = state.tool; }\n}\n```\n\n{{index \"label (HTML tag)\"}}\n\nBy wrapping the label text and the field in a `<label>` element, we tell the browser that the label belongs to that field so that you can, for example, click the label to focus the field.\n\n{{index \"color field\", \"input (HTML tag)\"}}\n\nWe also need to be able to change the color, so let's add a control for that. An HTML `<input>` element with a `type` attribute of `color` gives us a form field that is specialized for selecting colors. Such a field's value is always a CSS color code in `\"#RRGGBB\"` format (red, green, and blue components, two digits per color). The browser will show a ((color picker)) interface when the user interacts with it.\n\n{{if book\n\nDepending on the browser, the color picker might look like this:\n\n{{figure {url: \"img/color-field.png\", alt: \"Screenshot of color field\", width: \"6cm\"}}}\n\nif}}\n\n{{index \"ColorSelect class\", \"syncState method\"}}\n\nThis ((control)) creates such a field and wires it up to stay synchronized with the application state's `color` property.\n\n```{includeCode: true}\nclass ColorSelect {\n  constructor(state, {dispatch}) {\n    this.input = elt(\"input\", {\n      type: \"color\",\n      value: state.color,\n      onchange: () => dispatch({color: this.input.value})\n    });\n    this.dom = elt(\"label\", null, \"🎨 Color: \", this.input);\n  }\n  syncState(state) { this.input.value = state.color; }\n}\n```\n\n## Drawing tools\n\nBefore we can draw anything, we need to implement the ((tool))s that will control the functionality of mouse or touch events on the canvas.\n\n{{index \"draw function\"}}\n\nThe most basic tool is the draw tool, which changes any ((pixel)) you click or tap to the currently selected color. It dispatches an action that updates the picture to a version in which the pointed-at pixel is given the currently selected color.\n\n```{includeCode: true}\nfunction draw(pos, state, dispatch) {\n  function drawPixel({x, y}, state) {\n    let drawn = {x, y, color: state.color};\n    dispatch({picture: state.picture.draw([drawn])});\n  }\n  drawPixel(pos, state);\n  return drawPixel;\n}\n```\n\nThe function immediately calls the `drawPixel` function but then also returns it so that it's called again for newly touched pixels when the user drags or ((swipe))s over the picture.\n\n{{index \"rectangle function\"}}\n\nTo draw larger shapes, it can be useful to quickly create ((rectangle))s. The `rectangle` ((tool)) draws a rectangle between the point where you start ((dragging)) and the point that you drag to.\n\n```{includeCode: true}\nfunction rectangle(start, state, dispatch) {\n  function drawRectangle(pos) {\n    let xStart = Math.min(start.x, pos.x);\n    let yStart = Math.min(start.y, pos.y);\n    let xEnd = Math.max(start.x, pos.x);\n    let yEnd = Math.max(start.y, pos.y);\n    let drawn = [];\n    for (let y = yStart; y <= yEnd; y++) {\n      for (let x = xStart; x <= xEnd; x++) {\n        drawn.push({x, y, color: state.color});\n      }\n    }\n    dispatch({picture: state.picture.draw(drawn)});\n  }\n  drawRectangle(start);\n  return drawRectangle;\n}\n```\n\n{{index \"persistent data structure\", [state, persistence]}}\n\nAn important detail in this implementation is that when dragging, the rectangle is redrawn on the picture from the _original_ state. That way, you can make the rectangle larger and smaller again while creating it, without the intermediate rectangles sticking around in the final picture. This is one of the reasons why ((immutable)) picture objects are useful—we'll see another reason later.\n\nImplementing ((flood fill)) is somewhat more involved. This is a ((tool)) that fills the pixel under the pointer and all adjacent pixels that have the same color. \"Adjacent\" means directly horizontally or vertically adjacent, not diagonally. This picture illustrates the set of ((pixel))s colored when the flood fill tool is used at the marked pixel:\n\n{{figure {url: \"img/flood-grid.svg\", alt: \"Diagram of a pixel grid showing the area filled by a flood fill operation\", width: \"6cm\"}}}\n\n{{index \"fill function\"}}\n\nInterestingly, the way we'll do this looks a bit like the ((pathfinding)) code from [Chapter ?](robot). Whereas that code searched through a graph to find a route, this code searches through a grid to find all \"connected\" pixels. The problem of keeping track of a branching set of possible routes is similar.\n\n```{includeCode: true}\nconst around = [{dx: -1, dy: 0}, {dx: 1, dy: 0},\n                {dx: 0, dy: -1}, {dx: 0, dy: 1}];\n\nfunction fill({x, y}, state, dispatch) {\n  let targetColor = state.picture.pixel(x, y);\n  let drawn = [{x, y, color: state.color}];\n  let visited = new Set();\n  for (let done = 0; done < drawn.length; done++) {\n    for (let {dx, dy} of around) {\n      let x = drawn[done].x + dx, y = drawn[done].y + dy;\n      if (x >= 0 && x < state.picture.width &&\n          y >= 0 && y < state.picture.height &&\n          !visited.has(x + \",\" + y) &&\n          state.picture.pixel(x, y) == targetColor) {\n        drawn.push({x, y, color: state.color});\n        visited.add(x + \",\" + y);\n      }\n    }\n  }\n  dispatch({picture: state.picture.draw(drawn)});\n}\n```\n\nThe array of drawn pixels doubles as the function's ((work list)). For each pixel reached, we have to see whether any adjacent pixels have the same color and haven't already been painted over. The loop counter lags behind the length of the `drawn` array as new pixels are added. Any pixels ahead of it still need to be explored. When it catches up with the length, no unexplored pixels remain, and the function is done.\n\n{{index \"pick function\"}}\n\nThe final ((tool)) is a ((color picker)), which allows you to point at a color in the picture to use it as the current drawing color.\n\n```{includeCode: true}\nfunction pick(pos, state, dispatch) {\n  dispatch({color: state.picture.pixel(pos.x, pos.y)});\n}\n```\n\n{{if interactive\n\nWe can now test our application!\n\n```{lang: html}\n<div></div>\n<script>\n  let state = {\n    tool: \"draw\",\n    color: \"#000000\",\n    picture: Picture.empty(60, 30, \"#f0f0f0\")\n  };\n  let app = new PixelEditor(state, {\n    tools: {draw, fill, rectangle, pick},\n    controls: [ToolSelect, ColorSelect],\n    dispatch(action) {\n      state = updateState(state, action);\n      app.syncState(state);\n    }\n  });\n  document.querySelector(\"div\").appendChild(app.dom);\n</script>\n```\n\nif}}\n\n## Saving and loading\n\n{{index \"SaveButton class\", \"drawPicture function\", [file, image]}}\n\nWhen we've drawn our masterpiece, we'll want to save it for later. We should add a button for ((download))ing the current picture as an image file. This ((control)) provides that button:\n\n```{includeCode: true}\nclass SaveButton {\n  constructor(state) {\n    this.picture = state.picture;\n    this.dom = elt(\"button\", {\n      onclick: () => this.save()\n    }, \"💾 Save\");\n  }\n  save() {\n    let canvas = elt(\"canvas\");\n    drawPicture(this.picture, canvas, 1);\n    let link = elt(\"a\", {\n      href: canvas.toDataURL(),\n      download: \"pixelart.png\"\n    });\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n  }\n  syncState(state) { this.picture = state.picture; }\n}\n```\n\n{{index \"canvas (HTML tag)\"}}\n\nThe component keeps track of the current picture so that it can access it when saving. To create the image file, it uses a `<canvas>` element on which it draws the picture (at a scale of one pixel per pixel).\n\n{{index \"toDataURL method\", \"data URL\"}}\n\nThe `toDataURL` method on a canvas element creates a URL that uses the `data:` scheme. Unlike `http:` and `https:` URLs, data URLs contain the whole resource in the URL. They are usually very long, but they allow us to create working links to arbitrary pictures, right here in the browser.\n\n{{index \"a (HTML tag)\", \"download attribute\"}}\n\nTo actually get the browser to download the picture, we then create a ((link)) element that points at this URL and has a `download` attribute. Such links, when clicked, make the browser show a file save dialog. We add that link to the document, simulate a click on it, and remove it again. You can do a lot with ((browser)) technology, but sometimes the way to do it is rather odd.\n\n{{index \"LoadButton class\", control, [file, image]}}\n\nAnd it gets worse. We'll also want to be able to load existing image files into our application. To do that, we again define a button component.\n\n```{includeCode: true}\nclass LoadButton {\n  constructor(_, {dispatch}) {\n    this.dom = elt(\"button\", {\n      onclick: () => startLoad(dispatch)\n    }, \"📁 Load\");\n  }\n  syncState() {}\n}\n\nfunction startLoad(dispatch) {\n  let input = elt(\"input\", {\n    type: \"file\",\n    onchange: () => finishLoad(input.files[0], dispatch)\n  });\n  document.body.appendChild(input);\n  input.click();\n  input.remove();\n}\n```\n\n{{index [file, access], \"input (HTML tag)\"}}\n\nTo get access to a file on the user's computer, we need the user to select the file through a file input field. But we don't want the load button to look like a file input field, so we create the file input when the button is clicked and then pretend that this file input itself was clicked.\n\n{{index \"FileReader class\", \"img (HTML tag)\", \"readAsDataURL method\", \"Picture class\"}}\n\nWhen the user has selected a file, we can use `FileReader` to get access to its contents, again as a ((data URL)). That URL can be used to create an `<img>` element, but because we can't get direct access to the pixels in such an image, we can't create a `Picture` object from that.\n\n```{includeCode: true}\nfunction finishLoad(file, dispatch) {\n  if (file == null) return;\n  let reader = new FileReader();\n  reader.addEventListener(\"load\", () => {\n    let image = elt(\"img\", {\n      onload: () => dispatch({\n        picture: pictureFromImage(image)\n      }),\n      src: reader.result\n    });\n  });\n  reader.readAsDataURL(file);\n}\n```\n\n{{index \"canvas (HTML tag)\", \"getImageData method\", \"pictureFromImage function\"}}\n\nTo get access to the pixels, we must first draw the picture to a `<canvas>` element. The canvas context has a `getImageData` method that allows a script to read its ((pixel))s. So once the picture is on the canvas, we can access it and construct a `Picture` object.\n\n```{includeCode: true}\nfunction pictureFromImage(image) {\n  let width = Math.min(100, image.width);\n  let height = Math.min(100, image.height);\n  let canvas = elt(\"canvas\", {width, height});\n  let cx = canvas.getContext(\"2d\");\n  cx.drawImage(image, 0, 0);\n  let pixels = [];\n  let {data} = cx.getImageData(0, 0, width, height);\n\n  function hex(n) {\n    return n.toString(16).padStart(2, \"0\");\n  }\n  for (let i = 0; i < data.length; i += 4) {\n    let [r, g, b] = data.slice(i, i + 3);\n    pixels.push(\"#\" + hex(r) + hex(g) + hex(b));\n  }\n  return new Picture(width, height, pixels);\n}\n```\n\nWe'll limit the size of images to 100 by 100 pixels, since anything bigger will look _huge_ on our display and might slow down the interface.\n\n{{index \"getImageData method\", color, transparency}}\n\nThe `data` property of the object returned by `getImageData` is an array of color components. For each pixel in the rectangle specified by the arguments, it contains four values that represent the red, green, blue, and _((alpha))_ components of the pixel's color, as numbers between 0 and 255. The alpha part represents opacity—when it is 0, the pixel is fully transparent, and when it is 255, it is fully opaque. For our purpose, we can ignore it.\n\n{{index \"hexadecimal number\", \"toString method\"}}\n\nThe two hexadecimal digits per component, as used in our color notation, correspond precisely to the 0 to 255 range—two base-16 digits can express 16^2^ = 256 different numbers. The `toString` method of numbers can be given a base as an argument, so `n.toString(16)` will produce a string representation in base 16. We have to make sure that each number takes up two digits, so the `hex` helper function calls `padStart` to add a leading 0 when necessary.\n\nWe can load and save now! That leaves just one more feature before we're done.\n\n## Undo history\n\nBecause half the process of editing is making little mistakes and correcting them, an important feature in a drawing program is an ((undo history)).\n\n{{index \"persistent data structure\", [state, \"of application\"]}}\n\nTo be able to undo changes, we need to store previous versions of the picture. Since pictures are ((immutable)) values, that's easy. But it does require an additional field in the application state.\n\n{{index \"done property\"}}\n\nWe'll add a `done` array to keep previous versions of the ((picture)). Maintaining this property requires a more complicated state update function that adds pictures to the array.\n\n{{index \"doneAt property\", \"historyUpdateState function\", \"Date.now function\"}}\n\nWe don't want to store _every_ change, though—just changes that are a certain amount of ((time)) apart. To be able to do that, we'll need a second property, `doneAt`, to track the time at which we last stored a picture in the history.\n\n```{includeCode: true}\nfunction historyUpdateState(state, action) {\n  if (action.undo == true) {\n    if (state.done.length == 0) return state;\n    return {\n      ...state,\n      picture: state.done[0],\n      done: state.done.slice(1),\n      doneAt: 0\n    };\n  } else if (action.picture &&\n             state.doneAt < Date.now() - 1000) {\n    return {\n      ...state,\n      ...action,\n      done: [state.picture, ...state.done],\n      doneAt: Date.now()\n    };\n  } else {\n    return {...state, ...action};\n  }\n}\n```\n\n{{index \"undo history\"}}\n\nWhen the action is an undo action, the function takes the most recent picture from the history and makes that the current picture. It sets `doneAt` to zero so that the next change is guaranteed to store the picture back in the history, allowing you to revert to it another time if you want.\n\nOtherwise, if the action contains a new picture and the last time we stored something is more than a second (1000 milliseconds) ago, the `done` and `doneAt` properties are updated to store the previous picture.\n\n{{index \"UndoButton class\", control}}\n\nThe undo button ((component)) doesn't do much. It dispatches undo actions when clicked and disables itself when there is nothing to undo.\n\n```{includeCode: true}\nclass UndoButton {\n  constructor(state, {dispatch}) {\n    this.dom = elt(\"button\", {\n      onclick: () => dispatch({undo: true}),\n      disabled: state.done.length == 0\n    }, \"⮪ Undo\");\n  }\n  syncState(state) {\n    this.dom.disabled = state.done.length == 0;\n  }\n}\n```\n\n## Let's draw\n\n{{index \"PixelEditor class\", \"startState constant\", \"baseTools constant\", \"baseControls constant\", \"startPixelEditor function\"}}\n\nTo set up the application, we need to create a state, a set of ((tool))s, a set of ((control))s, and a ((dispatch)) function. We can pass them to the `PixelEditor` constructor to create the main component. Since we'll need to create several editors in the exercises, we first define some bindings.\n\n```{includeCode: true}\nconst startState = {\n  tool: \"draw\",\n  color: \"#000000\",\n  picture: Picture.empty(60, 30, \"#f0f0f0\"),\n  done: [],\n  doneAt: 0\n};\n\nconst baseTools = {draw, fill, rectangle, pick};\n\nconst baseControls = [\n  ToolSelect, ColorSelect, SaveButton, LoadButton, UndoButton\n];\n\nfunction startPixelEditor({state = startState,\n                           tools = baseTools,\n                           controls = baseControls}) {\n  let app = new PixelEditor(state, {\n    tools,\n    controls,\n    dispatch(action) {\n      state = historyUpdateState(state, action);\n      app.syncState(state);\n    }\n  });\n  return app.dom;\n}\n```\n\n{{index \"destructuring binding\", \"= operator\", [property, access]}}\n\nWhen destructuring an object or array, you can use `=` after a binding name to give the binding a ((default value)), which is used when the property is missing or holds `undefined`. The `startPixelEditor` function makes use of this to accept an object with a number of optional properties as an argument. If you don't provide a `tools` property, for example, `tools` will be bound to `baseTools`.\n\nThis is how we get an actual editor on the screen:\n\n```{lang: html, startCode: true}\n<div></div>\n<script>\n  document.querySelector(\"div\")\n    .appendChild(startPixelEditor({}));\n</script>\n```\n\n{{if interactive\n\nGo ahead and draw something.\n\nif}}\n\n## Why is this so hard?\n\nBrowser technology is amazing. It provides a powerful set of interface building blocks, ways to style and manipulate them, and tools to inspect and debug your applications. The software you write for the ((browser)) can be run on almost every computer and phone on the planet.\n\nAt the same time, browser technology is ridiculous. You have to learn a large number of silly tricks and obscure facts to master it, and the default programming model it provides is so problematic that most programmers prefer to cover it in several layers of ((abstraction)) rather than deal with it directly.\n\n{{index standard, evolution}}\n\nWhile the situation is definitely improving, it mostly does so in the form of more elements being added to address shortcomings—creating even more ((complexity)). A feature used by a million websites can't really be replaced. Even if it could, it would be hard to decide what it should be replaced with.\n\n{{index \"social factors\", \"economic factors\", history}}\n\nTechnology never exists in a vacuum—we're constrained by our tools and the social, economic, and historical factors that produced them. This can be annoying, but it is generally more productive to try to build a good understanding of how the _existing_ technical reality works—and why it is the way it is—than to rage against it or hold out for another reality.\n\nNew ((abstraction))s _can_ be helpful. The component model and ((data flow)) convention I used in this chapter is a crude form of that. As mentioned, there are libraries that try to make user interface programming more pleasant. At the time of writing, [React](https://reactjs.org/) and [Svelte](https://svelte.dev/) are popular choices, but there's a whole cottage industry of such frameworks. If you're interested in programming web applications, I recommend investigating a few of them to understand how they work and what benefits they provide.\n\n## Exercises\n\nThere is still room for improvement in our program. Let's add a few more features as exercises.\n\n### Keyboard bindings\n\n{{index \"keyboard bindings (exercise)\"}}\n\nAdd ((keyboard)) shortcuts to the application. The first letter of a tool's name selects the tool, and [ctrl]{keyname}-Z or [command]{keyname}-Z activates undo.\n\n{{index \"PixelEditor class\", \"tabindex attribute\", \"elt function\", \"keydown event\"}}\n\nDo this by modifying the `PixelEditor` component. Add a `tabIndex` property of 0 to the wrapping `<div>` element so that it can receive keyboard ((focus)). Note that the _property_ corresponding to the `tabindex` _attribute_ is called `tabIndex`, with a capital I, and our `elt` function expects property names. Register the key event handlers directly on that element. This means you have to click, touch, or tab to the application before you can interact with it with the keyboard.\n\n{{index \"ctrlKey property\", \"metaKey property\", \"control key\", \"command key\"}}\n\nRemember that keyboard events have `ctrlKey` and `metaKey` (for [command]{keyname} on Mac) properties that you can use to see whether those keys are held down.\n\n{{if interactive\n\n```{test: no, lang: html}\n<div></div>\n<script>\n  // The original PixelEditor class. Extend the constructor.\n  class PixelEditor {\n    constructor(state, config) {\n      let {tools, controls, dispatch} = config;\n      this.state = state;\n\n      this.canvas = new PictureCanvas(state.picture, pos => {\n        let tool = tools[this.state.tool];\n        let onMove = tool(pos, this.state, dispatch);\n        if (onMove) {\n          return pos => onMove(pos, this.state, dispatch);\n        }\n      });\n      this.controls = controls.map(\n        Control => new Control(state, config));\n      this.dom = elt(\"div\", {}, this.canvas.dom, elt(\"br\"),\n                     ...this.controls.reduce(\n                       (a, c) => a.concat(\" \", c.dom), []));\n    }\n    syncState(state) {\n      this.state = state;\n      this.canvas.syncState(state.picture);\n      for (let ctrl of this.controls) ctrl.syncState(state);\n    }\n  }\n\n  document.querySelector(\"div\")\n    .appendChild(startPixelEditor({}));\n</script>\n```\n\nif}}\n\n{{hint\n\n{{index \"keyboard bindings (exercise)\", \"key property\", \"shift key\"}}\n\nThe `key` property of events for letter keys will be the lowercase letter itself, if [shift]{keyname} isn't being held. We're not interested in key events with [shift]{keyname} here.\n\n{{index \"keydown event\"}}\n\nA `\"keydown\"` handler can inspect its event object to see whether it matches any of the shortcuts. You can automatically get the list of first letters from the `tools` object so that you don't have to write them out.\n\n{{index \"preventDefault method\"}}\n\nWhen the key event matches a shortcut, call `preventDefault` on it and ((dispatch)) the appropriate action.\n\nhint}}\n\n### Efficient drawing\n\n{{index \"efficient drawing (exercise)\", \"canvas (HTML tag)\", efficiency}}\n\nDuring drawing, the majority of work that our application does happens in `drawPicture`. Creating a new state and updating the rest of the DOM isn't very expensive, but repainting all the pixels on the canvas is quite a bit of work.\n\n{{index \"syncState method\", \"PictureCanvas class\"}}\n\nFind a way to make the `syncState` method of `PictureCanvas` faster by redrawing only the pixels that actually changed.\n\n{{index \"drawPicture function\", compatibility}}\n\nRemember that `drawPicture` is also used by the save button, so if you change it, either make sure the changes don't break the old use or create a new version with a different name.\n\n{{index \"width property\", \"height property\"}}\n\nAlso note that changing the size of a `<canvas>` element, by setting its `width` or `height` properties, clears it, making it entirely transparent again.\n\n{{if interactive\n\n```{test: no, lang: html}\n<div></div>\n<script>\n  // Change this method\n  PictureCanvas.prototype.syncState = function(picture) {\n    if (this.picture == picture) return;\n    this.picture = picture;\n    drawPicture(this.picture, this.dom, scale);\n  };\n\n  // You may want to use or change this as well\n  function drawPicture(picture, canvas, scale) {\n    canvas.width = picture.width * scale;\n    canvas.height = picture.height * scale;\n    let cx = canvas.getContext(\"2d\");\n\n    for (let y = 0; y < picture.height; y++) {\n      for (let x = 0; x < picture.width; x++) {\n        cx.fillStyle = picture.pixel(x, y);\n        cx.fillRect(x * scale, y * scale, scale, scale);\n      }\n    }\n  }\n\n  document.querySelector(\"div\")\n    .appendChild(startPixelEditor({}));\n</script>\n```\n\nif}}\n\n{{hint\n\n{{index \"efficient drawing (exercise)\"}}\n\nThis exercise is a good example of how ((immutable)) data structures can make code _faster_. Because we have both the old and the new picture, we can compare them and redraw only the pixels that changed color, saving more than 99 percent of the drawing work in most cases.\n\n{{index \"drawPicture function\"}}\n\nYou can either write a new function `updatePicture` or have `drawPicture` take an extra argument, which may be undefined or the previous picture. For each ((pixel)), the function checks whether a previous picture was passed with the same color at this position and skips the pixel when that is the case.\n\n{{index \"width property\", \"height property\", \"canvas (HTML tag)\"}}\n\nBecause the canvas gets cleared when we change its size, you should also avoid touching its `width` and `height` properties when the old picture and the new picture have the same size. If they are different, which will happen when a new picture has been loaded, you can set the binding holding the old picture to `null` after changing the canvas size because you shouldn't skip any pixels after you've changed the canvas size.\n\nhint}}\n\n### Circles\n\n{{index \"circles (exercise)\", dragging}}\n\nDefine a ((tool)) called `circle` that draws a filled circle when you drag. The center of the circle lies at the point where the drag or touch gesture starts, and its ((radius)) is determined by the distance dragged.\n\n{{if interactive\n\n```{test: no, lang: html}\n<div></div>\n<script>\n  function circle(pos, state, dispatch) {\n    // Your code here\n  }\n\n  let dom = startPixelEditor({\n    tools: {...baseTools, circle}\n  });\n  document.querySelector(\"div\").appendChild(dom);\n</script>\n```\n\nif}}\n\n{{hint\n\n{{index \"circles (exercise)\", \"rectangle function\"}}\n\nYou can take some inspiration from the `rectangle` tool. As with that tool, you'll want to keep drawing on the _starting_ picture, rather than the current picture, when the pointer moves.\n\nTo figure out which pixels to color, you can use the ((Pythagorean theorem)). First figure out the distance between the current pointer position and the start position by taking the square root (`Math.sqrt`) of the sum of the square (`x ** 2`) of the difference in x-coordinates and the square of the difference in y-coordinates. Then loop over a square of pixels around the start position, whose sides are at least twice the ((radius)), and color those that are within the circle's radius, again using the Pythagorean formula to figure out their ((distance)) from the center.\n\nMake sure you don't try to color pixels that are outside of the picture's boundaries.\n\nhint}}\n\n### Proper lines\n\n{{index \"proper lines (exercise)\", \"line drawing\"}}\n\nThis is a more advanced exercise than the preceding three, and it will require you to design a solution to a nontrivial problem. Make sure you have plenty of time and ((patience)) before starting to work on this exercise, and don't get discouraged by initial failures.\n\n{{index \"draw function\", \"mousemove event\", \"touchmove event\"}}\n\nOn most browsers, when you select the `draw` ((tool)) and quickly drag across the picture, you don't get a closed line. Rather, you get dots with gaps between them because the `\"mousemove\"` or `\"touchmove\"` events did not fire quickly enough to hit every ((pixel)).\n\nImprove the `draw` tool to make it draw a full line. This means you have to make the motion handler function remember the previous position and connect that to the current one.\n\nTo do this, since the pixels can be an arbitrary distance apart, you'll have to write a general line drawing function.\n\nA line between two pixels is a connected chain of pixels, as straight as possible, going from the start to the end. Diagonally adjacent pixels count as connected. A slanted line should look like the picture on the left, not the picture on the right.\n\n{{figure {url: \"img/line-grid.svg\", alt: \"Diagram of two pixelated lines, one light, skipping across pixels diagonally, and one heavy, with all pixels connected horizontally or vertically\", width: \"6cm\"}}}\n\nFinally, if we have code that draws a line between two arbitrary points, we might as well use it to also define a `line` tool, which draws a straight line between the start and end of a drag.\n\n{{if interactive\n\n```{test: no, lang: html}\n<div></div>\n<script>\n  // The old draw tool. Rewrite this.\n  function draw(pos, state, dispatch) {\n    function drawPixel({x, y}, state) {\n      let drawn = {x, y, color: state.color};\n      dispatch({picture: state.picture.draw([drawn])});\n    }\n    drawPixel(pos, state);\n    return drawPixel;\n  }\n\n  function line(pos, state, dispatch) {\n    // Your code here\n  }\n\n  let dom = startPixelEditor({\n    tools: {draw, line, fill, rectangle, pick}\n  });\n  document.querySelector(\"div\").appendChild(dom);\n</script>\n```\n\nif}}\n\n{{hint\n\n{{index \"proper lines (exercise)\", \"line drawing\"}}\n\nThe thing about the problem of drawing a pixelated line is that it is really four similar but slightly different problems. Drawing a horizontal line from the left to the right is easy—you loop over the x-coordinates and color a pixel at every step. If the line has a slight slope (less than 45 degrees or ¼π radians), you can interpolate the y-coordinate along the slope. You still need one pixel per _x_ position, with the _y_ position of those pixels determined by the slope.\n\nBut as soon as your slope goes across 45 degrees, you need to switch the way you treat the coordinates. You now need one pixel per _y_ position, since the line goes up more than it goes left. And then, when you cross 135 degrees, you have to go back to looping over the x-coordinates, but from right to left.\n\nYou don't actually have to write four loops. Since drawing a line from _A_ to _B_ is the same as drawing a line from _B_ to _A_, you can swap the start and end positions for lines going from right to left and treat them as going left to right.\n\nSo you need two different loops. The first thing your line drawing function should do is check whether the difference between the x-coordinates is larger than the difference between the y-coordinates. If it is, this is a horizontalish line, and if not, a verticalish one.\n\n{{index \"Math.abs function\", \"absolute value\"}}\n\nMake sure you compare the _absolute_ values of the _x_ and _y_ difference, which you can get with `Math.abs`.\n\n{{index \"swapping bindings\"}}\n\nOnce you know along which ((axis)) you will be looping, you can check whether the start point has a higher coordinate along that axis than the endpoint and swap them if necessary. A succinct way to swap the values of two bindings in JavaScript uses ((destructuring assignment)) like this:\n\n```{test: no}\n[start, end] = [end, start];\n```\n\n{{index rounding}}\n\nThen you can compute the ((slope)) of the line, which determines the amount the coordinate on the other axis changes for each step you take along your main axis. With that, you can run a loop along the main axis while also tracking the corresponding position on the other axis, and you can draw pixels on every iteration. Make sure you round the nonmain axis coordinates, since they are likely to be fractional and the `draw` method doesn't respond well to fractional coordinates.\n\nhint}}\n"
        },
        {
          "name": "20_node.md",
          "type": "blob",
          "size": 43.529296875,
          "content": "{{meta {code_links: [\"code/file_server.mjs\"]}}}\n\n# Node.js\n\n{{quote {author: \"Master Yuan-Ma\", title: \"The Book of Programming\", chapter: true}\n\nA student asked, 'The programmers of old used only simple machines and no programming languages, yet they made beautiful programs. Why do we use complicated machines and programming languages?' Fu-Tzu replied, 'The builders of old used only sticks and clay, yet they made beautiful huts.'\n\nquote}}\n\n{{index \"Yuan-Ma\", \"Book of Programming\"}}\n\n{{figure {url: \"img/chapter_picture_20.jpg\", alt: \"Illustration showing a telephone pole with a tangle of wires going in all directions\", chapter: \"framed\"}}}\n\n{{index \"command line\"}}\n\nSo far, we've used the JavaScript language in a single environment: the browser. This chapter and the [next one](skillsharing) will briefly introduce ((Node.js)), a program that allows you to apply your JavaScript skills outside of the browser. With it, you can build anything from small command line tools to HTTP ((server))s that power dynamic ((website))s.\n\nThese chapters aim to teach you the main concepts that Node.js uses and to give you enough information to write useful programs for it. They do not try to be a complete, or even a thorough, treatment of the platform.\n\n{{if interactive\n\nWhereas you could run the code in previous chapters directly on these pages, because it was either raw JavaScript or written for the browser, the code samples in this chapter are written for Node and often won't run in the browser.\n\nif}}\n\nIf you want to follow along and run the code in this chapter, you'll need to install Node.js version 18 or higher. To do so, go to [_https://nodejs.org_](https://nodejs.org) and follow the installation instructions for your operating system. You can also find further ((documentation)) for Node.js there.\n\n## Background\n\n{{index responsiveness, input, [network, speed]}}\n\nWhen building systems that communicate over the network, the way you manage input and ((output))—that is, the reading and writing of data to and from the network and ((hard drive))—can make a big difference in how quickly a system responds to the user or to network requests.\n\n{{index [\"asynchronous programming\", \"in Node.js\"]}}\n\nIn such programs, asynchronous programming is often helpful. It allows the program to send and receive data from and to multiple devices at the same time without complicated thread management and synchronization.\n\n{{index \"programming language\", \"Node.js\", standard}}\n\nNode was initially conceived for the purpose of making asynchronous programming easy and convenient. JavaScript lends itself well to a system like Node. It is one of the few programming languages that does not have a built-in way to do input and output. Thus, JavaScript could be fit onto Node's rather eccentric approach to network and filesystem programming without ending up with two inconsistent interfaces. In 2009, when Node was being designed, people were already doing callback-based programming in the browser, so the ((community)) around the language was used to an asynchronous programming style.\n\n## The node command\n\n{{index \"node program\"}}\n\nWhen ((Node.js)) is installed on a system, it provides a program called `node`, which is used to run JavaScript files. Say you have a file `hello.js`, containing this code:\n\n```\nlet message = \"Hello world\";\nconsole.log(message);\n```\n\nYou can then run `node` from the ((command line)) like this to execute the program:\n\n```{lang: null}\n$ node hello.js\nHello world\n```\n\n{{index \"console.log\"}}\n\nThe `console.log` method in Node does something similar to what it does in the browser. It prints out a piece of text. But in Node, the text will go to the process's ((standard output)) stream rather than to a browser's ((JavaScript console)). When running `node` from the command line, that means you see the logged values in your ((terminal)).\n\n{{index \"node program\", \"read-eval-print loop\"}}\n\nIf you run `node` without giving it a file, it provides you with a prompt at which you can type JavaScript code and immediately see the result.\n\n```{lang: null}\n$ node\n> 1 + 1\n2\n> [-1, -2, -3].map(Math.abs)\n[1, 2, 3]\n> process.exit(0)\n$\n```\n\n{{index \"process object\", \"global scope\", [binding, global], \"exit method\", \"status code\"}}\n\nThe `process` binding, just like the `console` binding, is available globally in Node. It provides various ways to inspect and manipulate the current program. The `exit` method ends the process and can be given an exit status code, which tells the program that started `node` (in this case, the command line shell) whether the program completed successfully (code zero) or encountered an error (any other code).\n\n{{index \"command line\", \"argv property\"}}\n\nTo find the command line arguments given to your script, you can read `process.argv`, which is an array of strings. Note that it also includes the name of the `node` command and your script name, so the actual arguments start at index 2. If `showargv.js` contains the statement `console.log(process.argv)`, you could run it like this:\n\n```{lang: null}\n$ node showargv.js one --and two\n[\"node\", \"/tmp/showargv.js\", \"one\", \"--and\", \"two\"]\n```\n\n{{index [binding, global]}}\n\nAll the ((standard)) JavaScript global bindings, such as `Array`, `Math`, and `JSON`, are also present in Node's environment. Browser-related functionality, such as `document` or `prompt`, is not.\n\n## Modules\n\n{{index \"Node.js\", \"global scope\", \"module loader\"}}\n\nBeyond the bindings I mentioned, such as `console` and `process`, Node puts few additional bindings in the global scope. If you want to access built-in functionality, you have to ask the module system for it.\n\n{{index \"require function\"}}\n\nNode started out using the ((CommonJS)) module system, based on the `require` function, which we saw in [Chapter ?](modules#commonjs). It will still use this system by default when you load a `.js` file.\n\n{{index \"import keyword\", \"ES modules\"}}\n\nBut today, Node also supports the more modern ES module system. When a script's filename ends in `.mjs`, it is considered to be such a module, and you can use `import` and `export` in it (but not `require`). We will use ES modules in this chapter.\n\n{{index [path, \"filesystem\"], \"relative path\", resolution}}\n\nWhen importing a module—whether with `require` or `import`—Node has to resolve the given string to an actual ((file)) that it can load. Names that start with `/`, `./`, or `../` are resolved as files, relative to the current module's path. Here, `.` stands for the current directory, `../` for one directory up, and `/` for the root of the filesystem. If you ask for `\"./graph.mjs\"` from the file `/tmp/robot/robot.mjs`, Node will try to load the file `/tmp/robot/graph.mjs`.\n\n{{index \"node_modules directory\", directory}}\n\nWhen a string that does not look like a relative or absolute path is imported, it is assumed to refer to either a built-in ((module)) or a module installed in a `node_modules` directory. For example, importing from `\"node:fs\"` will give you Node's built-in filesystem module. Importing `\"robot\"` might try to load the library found in `node_modules/robot/`. It's common to install such libraries using ((NPM)), which we'll return to in a moment.\n\n{{index \"import keyword\", \"Node.js\", \"garble example\"}}\n\nLet's set up a small project consisting of two files. The first one, called `main.mjs`, defines a script that can be called from the ((command line)) to reverse a string.\n\n```\nimport {reverse} from \"./reverse.mjs\";\n\n// Index 2 holds the first actual command line argument\nlet argument = process.argv[2];\n\nconsole.log(reverse(argument));\n```\n\n{{index reuse, \"Array.from function\", \"join method\"}}\n\nThe file `reverse.mjs` defines a library for reversing strings, which can be used both by this command line tool and by other scripts that need direct access to a string-reversing function.\n\n```\nexport function reverse(string) {\n  return Array.from(string).reverse().join(\"\");\n}\n```\n\n{{index \"export keyword\", \"ES modules\", [interface, module]}}\n\nRemember that `export` is used to declare that a binding is part of the module's interface. That allows `main.mjs` to import and use the function.\n\nWe can now call our tool like this:\n\n```{lang: null}\n$ node main.mjs JavaScript\ntpircSavaJ\n```\n\n## Installing with NPM\n\n{{index NPM, \"Node.js\", \"npm program\", library}}\n\nNPM, introduced in [Chapter ?](modules#modules_npm), is an online repository of JavaScript ((module))s, many of which are specifically written for Node. When you install Node on your computer, you also get the `npm` command, which you can use to interact with this repository.\n\n{{index \"ini package\"}}\n\nNPM's main use is ((download))ing packages. We saw the `ini` package in [Chapter ?](modules#modules_ini). We can use NPM to fetch and install that package on our computer.\n\n```{lang: null}\n$ npm install ini\nadded 1 package in 723ms\n\n$ node\n> const {parse} = require(\"ini\");\n> parse(\"x = 1\\ny = 2\");\n{ x: '1', y: '2' }\n```\n\n{{index \"require function\", \"node_modules directory\", \"npm program\"}}\n\nAfter running `npm install`, ((NPM)) will have created a directory called `node_modules`. Inside that directory will be an `ini` directory that contains the ((library)). You can open it and look at the code. When we import `\"ini\"`, this library is loaded, and we can call its `parse` property to parse a configuration file.\n\nBy default, NPM installs packages under the current directory rather than in a central place. If you are used to other package managers, this may seem unusual, but it has advantages—it puts each application in full control of the packages it installs and makes it easier to manage versions and clean up when removing an application.\n\n### Package files\n\n{{index \"package.json\", dependency}}\n\nAfter running `npm install` to install some package, you will find not only a `node_modules` directory but also a file called `package.json` in your current directory. It is recommended to have such a file for each project. You can create it manually or run `npm init`. This file contains information about the project, such as its name and ((version)), and lists its dependencies.\n\nThe robot simulation from [Chapter ?](robot), as modularized in the exercise in [Chapter ?](modules#modular_robot), might have a `package.json` file like this:\n\n```{lang: \"json\"}\n{\n  \"author\": \"Marijn Haverbeke\",\n  \"name\": \"eloquent-javascript-robot\",\n  \"description\": \"Simulation of a package-delivery robot\",\n  \"version\": \"1.0.0\",\n  \"main\": \"run.mjs\",\n  \"dependencies\": {\n    \"dijkstrajs\": \"^1.0.1\",\n    \"random-item\": \"^1.0.0\"\n  },\n  \"license\": \"ISC\"\n}\n```\n\n{{index \"npm program\", tool}}\n\nWhen you run `npm install` without naming a package to install, NPM will install the dependencies listed in `package.json`. When you install a specific package that is not already listed as a dependency, NPM will add it to `package.json`.\n\n### Versions\n\n{{index \"package.json\", dependency, evolution}}\n\nA `package.json` file lists both the program's own ((version)) and versions for its dependencies. Versions are a way to deal with the fact that ((package))s evolve separately, and code written to work with a package as it existed at one point may not work with a later, modified version of the package.\n\n{{index compatibility}}\n\nNPM demands that its packages follow a schema called _((semantic versioning))_, which encodes some information about which versions are _compatible_ (don't break the old interface) in the version number. A semantic version consists of three numbers separated by periods, such as `2.3.0`. Every time new functionality is added, the middle number has to be incremented. Every time compatibility is broken, so that existing code that uses the package might not work with the new version, the first number has to be incremented.\n\n{{index \"caret character\"}}\n\nA caret character (`^`) in front of the version number for a dependency in `package.json` indicates that any version compatible with the given number may be installed. For example, `\"^2.3.0\"` would mean that any version greater than or equal to 2.3.0 and less than 3.0.0 is allowed.\n\n{{index publishing}}\n\nThe `npm` command is also used to publish new packages or new versions of packages. If you run `npm publish` in a ((directory)) that has a `package.json` file, it will publish a package with the name and version listed in the JSON file to the registry. Anyone can publish packages to NPM—though only under a package name that isn't in use yet, since it wouldn't be good if random people could update existing packages.\n\nThis book won't delve further into the details of ((NPM)) usage. Refer to [_https://npmjs.com_](https://npmjs.com) for further documentation and a way to search for packages.\n\n## The filesystem module\n\n{{index directory, \"node:fs package\", \"Node.js\", [file, access]}}\n\nOne of the most commonly used built-in modules in Node is the `node:fs` module, which stands for _((filesystem))_. It exports functions for working with files and directories.\n\n{{index \"readFile function\", \"callback function\"}}\n\nFor example, the function called `readFile` reads a file and then calls a callback with the file's contents.\n\n```\nimport {readFile} from \"node:fs\";\nreadFile(\"file.txt\", \"utf8\", (error, text) => {\n  if (error) throw error;\n  console.log(\"The file contains:\", text);\n});\n```\n\n{{index \"Buffer class\"}}\n\nThe second argument to `readFile` indicates the _((character encoding))_ used to decode the file into a string. There are several ways in which ((text)) can be encoded to ((binary data)), but most modern systems use ((UTF-8)). Unless you have reasons to believe another encoding is used, pass `\"utf8\"` when reading a text file. If you do not pass an encoding, Node will assume you are interested in the binary data and will give you a `Buffer` object instead of a string. This is an ((array-like object)) that contains numbers representing the bytes (8-bit chunks of data) in the files.\n\n```\nimport {readFile} from \"node:fs\";\nreadFile(\"file.txt\", (error, buffer) => {\n  if (error) throw error;\n  console.log(\"The file contained\", buffer.length, \"bytes.\",\n              \"The first byte is:\", buffer[0]);\n});\n```\n\n{{index \"writeFile function\", \"filesystem\", [file, access]}}\n\nA similar function, `writeFile`, is used to write a file to disk.\n\n```\nimport {writeFile} from \"node:fs\";\nwriteFile(\"graffiti.txt\", \"Node was here\", err => {\n  if (err) console.log(`Failed to write file: ${err}`);\n  else console.log(\"File written.\");\n});\n```\n\n{{index \"Buffer class\", \"character encoding\"}}\n\nHere it was not necessary to specify the encoding—`writeFile` will assume that when it is given a string to write, rather than a `Buffer` object, it should write it out as text using its default character encoding, which is ((UTF-8)).\n\n{{index \"node:fs package\", \"readdir function\", \"stat function\", \"rename function\", \"unlink function\"}}\n\nThe `node:fs` module contains many other useful functions: `readdir` will give you the files in a ((directory)) as an array of strings, `stat` will retrieve information about a file, `rename` will rename a file, `unlink` will remove one, and so on. See the documentation at [_https://nodejs.org_](https://nodejs.org) for specifics.\n\n{{index [\"asynchronous programming\", \"in Node.js\"], \"Node.js\", \"error handling\", \"callback function\"}}\n\nMost of these take a callback function as the last parameter, which they call either with an error (the first argument) or with a successful result (the second). As we saw in [Chapter ?](async), there are downsides to this style of programming—the biggest one being that error handling becomes verbose and error prone.\n\n{{index \"Promise class\", \"node:fs/promises package\"}}\n\nThe `node:fs/promises` module exports most of the same functions as the old `node:fs` module but uses promises rather than callback functions.\n\n```\nimport {readFile} from \"node:fs/promises\";\nreadFile(\"file.txt\", \"utf8\")\n  .then(text => console.log(\"The file contains:\", text));\n```\n\n{{index \"synchronous programming\", \"node:fs package\", \"readFileSync function\"}}\n\nSometimes you don't need asynchronicity and it just gets in the way. Many of the functions in `node:fs` also have a synchronous variant, which has the same name with `Sync` added to the end. For example, the synchronous version of `readFile` is called `readFileSync`.\n\n```\nimport {readFileSync} from \"node:fs\";\nconsole.log(\"The file contains:\",\n            readFileSync(\"file.txt\", \"utf8\"));\n```\n\n{{index optimization, performance, blocking}}\n\nNote that while such a synchronous operation is being performed, your program is stopped entirely. If it should be responding to the user or to other machines on the network, being stuck on a synchronous action might produce annoying delays.\n\n## The HTTP module\n\n{{index \"Node.js\", \"node:http package\", [HTTP, server]}}\n\nAnother central module is called `node:http`. It provides functionality for running an HTTP ((server)).\n\n{{index \"listening (TCP)\", \"listen method\", \"createServer function\"}}\n\nThis is all it takes to start an HTTP server:\n\n```\nimport {createServer} from \"node:http\";\nlet server = createServer((request, response) => {\n  response.writeHead(200, {\"Content-Type\": \"text/html\"});\n  response.write(`\n    <h1>Hello!</h1>\n    <p>You asked for <code>${request.url}</code></p>`);\n  response.end();\n});\nserver.listen(8000);\nconsole.log(\"Listening! (port 8000)\");\n```\n\n{{index port, localhost}}\n\nIf you run this script on your own machine, you can point your web browser at [_http://localhost:8000/hello_](http://localhost:8000/hello) to make a request to your server. It will respond with a small HTML page.\n\n{{index \"createServer function\", HTTP}}\n\nThe function passed as the argument to `createServer` is called every time a client connects to the server. The `request` and `response` bindings are objects representing the incoming and outgoing data. The first contains information about the ((request)), such as its `url` property, which tells us to what URL the request was made.\n\nWhen you open that page in your browser, it sends a request to your own computer. This causes the server function to run and send back a response, which you can then see in the browser.\n\n{{index \"200 (HTTP status code)\", \"Content-Type header\", \"writeHead method\"}}\n\nTo send something to the client, you call methods on the `response` object. The first, `writeHead`, will write out the ((response)) ((header))s (see [Chapter ?](http#headers)). You give it the status code (200 for \"OK\" in this case) and an object that contains header values. The example sets the `Content-Type` header to inform the client that we'll be sending back an HTML document.\n\n{{index \"writable stream\", \"body (HTTP)\", stream, \"write method\", \"end method\"}}\n\nNext, the actual response body (the document itself) is sent with `response.write`. You're allowed to call this method multiple times if you want to send the response piece by piece—for example, to stream data to the client as it becomes available. Finally, `response.end` signals the end of the response.\n\n{{index \"listen method\"}}\n\nThe call to `server.listen` causes the ((server)) to start waiting for connections on ((port)) 8000. This is why you have to connect to _localhost:8000_ to speak to this server, rather than just _localhost_, which would use the default port 80.\n\n{{index \"Node.js\", \"kill process\"}}\n\nWhen you run this script, the process just sits there and waits. When a script is listening for events—in this case, network connections—`node` will not automatically exit when it reaches the end of the script. To close it, press [ctrl]{keyname}-C.\n\n{{index [method, HTTP]}}\n\nA real web ((server)) usually does more than the one in the example—it looks at the request's ((method)) (the `method` property) to see what action the client is trying to perform and looks at the request's ((URL)) to find out on which resource this action is being performed. We'll see a more advanced server [later in this chapter](node#file_server).\n\n{{index \"node:http package\", \"request function\", \"fetch function\", [HTTP, client]}}\n\nThe `node:http` module also provides a `request` function that can be used to make HTTP requests. However, it is a lot more cumbersome to use than `fetch`, which we saw in [Chapter ?](http). Fortunately, `fetch` is also available in Node as a global binding. Unless you want to do something very specific, such as processing the response document piece by piece as the data comes in over the network, I recommend sticking to `fetch`.\n\n## Streams\n\n{{index \"Node.js\", stream, \"writable stream\", \"callback function\", [\"asynchronous programming\", \"in Node.js\"], \"write method\", \"end method\", \"Buffer class\"}}\n\nThe response object that the HTTP server could write to is an example of a _writable stream_ object, which is a widely used concept in Node. Such objects have a `write` method that can be passed a string or a `Buffer` object to write something to the stream. Their `end` method closes the stream and optionally takes a value to write to the stream before closing. Both of these methods can also be given a callback as an additional argument, which they will call when the writing or closing has finished.\n\n{{index \"createWriteStream function\", \"writeFile function\", [file, stream]}}\n\nIt is possible to create a writable stream that points at a file with the `createWriteStream` function from the `node:fs` module. You can then use the `write` method on the resulting object to write the file one piece at a time rather than in one shot, as with `writeFile`.\n\n{{index \"createServer function\", \"request function\", \"event handling\", \"readable stream\"}}\n\n_Readable ((stream))s_ are a little more involved. The `request` argument to the HTTP server's callback is a readable stream. Reading from a stream is done using event handlers rather than methods.\n\n{{index \"on method\", \"addEventListener method\"}}\n\nObjects that emit events in Node have a method called `on` that is similar to the `addEventListener` method in the browser. You give it an event name and then a function, and it will register that function to be called whenever the given event occurs.\n\n{{index \"createReadStream function\", \"data event\", \"end event\", \"readable stream\"}}\n\nReadable ((stream))s have `\"data\"` and `\"end\"` events. The first is fired every time data comes in, and the second is called whenever the stream is at its end. This model is most suited for _streaming_ data that can be immediately processed, even when the whole document isn't available yet. A file can be read as a readable stream by using the `createReadStream` function from `node:fs`.\n\n{{index \"upcasing server example\", capitalization, \"toUpperCase method\"}}\n\nThis code creates a ((server)) that reads request bodies and streams them back to the client as all-uppercase text:\n\n```\nimport {createServer} from \"node:http\";\ncreateServer((request, response) => {\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  request.on(\"data\", chunk =>\n    response.write(chunk.toString().toUpperCase()));\n  request.on(\"end\", () => response.end());\n}).listen(8000);\n```\n\n{{index \"Buffer class\", \"toString method\"}}\n\nThe `chunk` value passed to the data handler will be a binary `Buffer`. We can convert this to a string by decoding it as UTF-8 encoded characters with its `toString` method.\n\nThe following piece of code, when run with the uppercasing server active, will send a request to that server and write out the response it gets:\n\n```\nfetch(\"http://localhost:8000/\", {\n  method: \"POST\",\n  body: \"Hello server\"\n}).then(resp => resp.text()).then(console.log);\n// → HELLO SERVER\n```\n\n{{id file_server}}\n\n## A file server\n\n{{index \"file server example\", \"Node.js\", [HTTP, server]}}\n\nLet's combine our newfound knowledge about HTTP ((server))s and working with the ((filesystem)) to create a bridge between the two: an HTTP server that allows ((remote access)) to a filesystem. Such a server has all kinds of uses—it allows web applications to store and share data, or it can give a group of people shared access to a bunch of files.\n\n{{index [path, URL], \"GET method\", \"PUT method\", \"DELETE method\", [file, resource]}}\n\nWhen we treat files as HTTP ((resource))s, the HTTP methods `GET`, `PUT`, and `DELETE` can be used to read, write, and delete the files, respectively. We will interpret the path in the request as the path of the file that the request refers to.\n\n{{index [path, \"filesystem\"], \"relative path\"}}\n\nWe probably don't want to share our whole filesystem, so we'll interpret these paths as starting in the server's working ((directory)), which is the directory in which it was started. If I ran the server from `/tmp/public/` (or `C:\\tmp\\public\\` on Windows), then a request for `/file.txt` should refer to `/tmp/public/file.txt` (or `C:\\tmp\\public\\file.txt`).\n\n{{index \"file server example\", \"Node.js\", \"methods object\", \"Promise class\"}}\n\nWe'll build the program piece by piece, using an object called `methods` to store the functions that handle the various HTTP methods. Method handlers are `async` functions that get the request object as their argument and return a promise that resolves to an object that describes the response.\n\n```{includeCode: \">code/file_server.mjs\"}\nimport {createServer} from \"node:http\";\n\nconst methods = Object.create(null);\n\ncreateServer((request, response) => {\n  let handler = methods[request.method] || notAllowed;\n  handler(request).catch(error => {\n    if (error.status != null) return error;\n    return {body: String(error), status: 500};\n  }).then(({body, status = 200, type = \"text/plain\"}) => {\n    response.writeHead(status, {\"Content-Type\": type});\n    if (body?.pipe) body.pipe(response);\n    else response.end(body);\n  });\n}).listen(8000);\n\nasync function notAllowed(request) {\n  return {\n    status: 405,\n    body: `Method ${request.method} not allowed.`\n  };\n}\n```\n\n{{index \"405 (HTTP status code)\"}}\n\nThis starts a server that just returns 405 error responses, which is the code used to indicate that the server refuses to handle a given method.\n\n{{index \"500 (HTTP status code)\", \"error handling\", \"error response\"}}\n\nWhen a request handler's promise is rejected, the `catch` call translates the error into a response object, if it isn't one already, so that the server can send back an error response to inform the client that it failed to handle the request.\n\n{{index \"200 (HTTP status code)\", \"Content-Type header\"}}\n\nThe `status` field of the response description may be omitted, in which case it defaults to 200 (OK). The content type, in the `type` property, can also be left off, in which case the response is assumed to be plain text.\n\n{{index \"end method\", \"pipe method\", stream}}\n\nWhen the value of `body` is a ((readable stream)), it will have a `pipe` method that we can use to forward all content from a readable stream to a ((writable stream)). If not, it is assumed to be either `null` (no body), a string, or a buffer, and it is passed directly to the ((response))'s `end` method.\n\n{{index [path, URL], \"urlPath function\", \"URL class\", parsing, [escaping, \"in URLs\"], \"decodeURIComponent function\", \"startsWith method\"}}\n\nTo figure out which file path corresponds to a request URL, the `urlPath` function uses the built-in `URL` class (which also exists in the browser) to parse the URL. This constructor expects a full URL, not just the part starting with the slash that we get from `request.url`, so we give it a dummy domain name to fill in. It extracts its pathname, which will be something like `\"/file.txt\"`, decodes that to get rid of the `%20`-style escape codes, and resolves it relative to the program's working directory.\n\n```{includeCode: \">code/file_server.mjs\"}\nimport {resolve, sep} from \"node:path\";\n\nconst baseDirectory = process.cwd();\n\nfunction urlPath(url) {\n  let {pathname} = new URL(url, \"http://d\");\n  let path = resolve(decodeURIComponent(pathname).slice(1));\n  if (path != baseDirectory &&\n      !path.startsWith(baseDirectory + sep)) {\n    throw {status: 403, body: \"Forbidden\"};\n  }\n  return path;\n}\n```\n\nAs soon as you set up a program to accept network requests, you have to start worrying about ((security)). In this case, if we aren't careful, it is likely that we'll accidentally expose our whole ((filesystem)) to the network.\n\nFile paths are strings in Node. To map such a string to an actual file, there's a nontrivial amount of interpretation going on. Paths may, for example, include `../` to refer to a parent directory. One obvious source of problems would be requests for paths like `/../secret_file`.\n\n{{index \"node:path package\", \"resolve function\", \"cwd function\", \"process object\", \"403 (HTTP status code)\", \"sep binding\", [\"backslash character\", \"as path separator\"], \"slash character\"}}\n\nTo avoid such problems, `urlPath` uses the `resolve` function from the `node:path` module, which resolves relative paths. It then verifies that the result is _below_ the working directory. The `process.cwd` function (where `cwd` stands for _current working directory_) can be used to find this working directory. The `sep` binding from the `node:path` package is the system's path separator—a backslash on Windows and a forward slash on most other systems. When the path doesn't start with the base directory, the function throws an error response object, using the HTTP status code indicating that access to the resource is forbidden.\n\n{{index \"file server example\", \"Node.js\", \"GET method\", [file, resource]}}\n\nWe'll set up the `GET` method to return a list of files when reading a ((directory)) and to return the file's content when reading a regular file.\n\n{{index \"media type\", \"Content-Type header\", \"mime-types package\"}}\n\nOne tricky question is what kind of `Content-Type` header we should set when returning a file's content. Since these files could be anything, our server can't simply return the same content type for all of them. ((NPM)) can help us again here. The `mime-types` package (content type indicators like `text/plain` are also called _((MIME type))s_) knows the correct type for a large number of ((file extension))s.\n\n{{index \"npm program\"}}\n\nThe following `npm` command, in the directory where the server script lives, installs a specific version of `mime`:\n\n```{lang: null}\n$ npm install mime-types@2.1.0\n```\n\n{{index \"404 (HTTP status code)\", \"stat function\", [file, resource]}}\n\nWhen a requested file does not exist, the correct HTTP status code to return is 404. We'll use the `stat` function, which looks up information about a file, to find out both whether the file exists and whether it is a ((directory)).\n\n```{includeCode: \">code/file_server.mjs\"}\nimport {createReadStream} from \"node:fs\";\nimport {stat, readdir} from \"node:fs/promises\";\nimport {lookup} from \"mime-types\";\n\nmethods.GET = async function(request) {\n  let path = urlPath(request.url);\n  let stats;\n  try {\n    stats = await stat(path);\n  } catch (error) {\n    if (error.code != \"ENOENT\") throw error;\n    else return {status: 404, body: \"File not found\"};\n  }\n  if (stats.isDirectory()) {\n    return {body: (await readdir(path)).join(\"\\n\")};\n  } else {\n    return {body: createReadStream(path),\n            type: lookup(path)};\n  }\n};\n```\n\n{{index \"createReadStream function\", [\"asynchronous programming\", \"in Node.js\"], \"error handling\", \"ENOENT (status code)\", \"Error type\", inheritance}}\n\nBecause it has to touch the disk and thus might take a while, `stat` is asynchronous. Since we're using promises rather than callback style, it has to be imported from `node:fs/promises` instead of directly from `node:fs`.\n\nWhen the file does not exist, `stat` will throw an error object with a `code` property of `\"ENOENT\"`. These somewhat obscure, ((Unix))-inspired codes are how you recognize error types in Node.\n\n{{index \"Stats type\", \"stat function\", \"isDirectory method\"}}\n\nThe `stats` object returned by `stat` tells us a number of things about a ((file)), such as its size (`size` property) and its ((modification date)) (`mtime` property). Here we are interested in the question of whether it is a ((directory)) or a regular file, which the `isDirectory` method tells us.\n\n{{index \"readdir function\"}}\n\nWe use `readdir` to read the array of files in a ((directory)) and return it to the client. For normal files, we create a readable stream with `createReadStream` and return that as the body, along with the content type that the `mime` package gives us for the file's name.\n\n{{index \"Node.js\", \"file server example\", \"DELETE method\", \"rmdir function\", \"unlink function\"}}\n\nThe code to handle `DELETE` requests is slightly simpler.\n\n```{includeCode: \">code/file_server.mjs\"}\nimport {rmdir, unlink} from \"node:fs/promises\";\n\nmethods.DELETE = async function(request) {\n  let path = urlPath(request.url);\n  let stats;\n  try {\n    stats = await stat(path);\n  } catch (error) {\n    if (error.code != \"ENOENT\") throw error;\n    else return {status: 204};\n  }\n  if (stats.isDirectory()) await rmdir(path);\n  else await unlink(path);\n  return {status: 204};\n};\n```\n\n{{index \"204 (HTTP status code)\", \"body (HTTP)\"}}\n\nWhen an ((HTTP)) ((response)) does not contain any data, the status code 204 (\"no content\") can be used to indicate this. Since the response to deletion doesn't need to transmit any information beyond whether the operation succeeded, that is a sensible thing to return here.\n\n{{index idempotence, \"error response\"}}\n\nYou may be wondering why trying to delete a nonexistent file returns a success status code rather than an error. When the file being deleted is not there, you could say that the request's objective is already fulfilled. The ((HTTP)) standard encourages us to make requests _idempotent_, which means that making the same request multiple times produces the same result as making it once. In a way, if you try to delete something that's already gone, the effect you were trying to create has been achieved—the thing is no longer there.\n\n{{index \"file server example\", \"Node.js\", \"PUT method\"}}\n\nThis is the handler for `PUT` requests:\n\n```{includeCode: \">code/file_server.mjs\"}\nimport {createWriteStream} from \"node:fs\";\n\nfunction pipeStream(from, to) {\n  return new Promise((resolve, reject) => {\n    from.on(\"error\", reject);\n    to.on(\"error\", reject);\n    to.on(\"finish\", resolve);\n    from.pipe(to);\n  });\n}\n\nmethods.PUT = async function(request) {\n  let path = urlPath(request.url);\n  await pipeStream(request, createWriteStream(path));\n  return {status: 204};\n};\n```\n\n{{index overwriting, \"204 (HTTP status code)\", \"error event\", \"finish event\", \"createWriteStream function\", \"pipe method\", stream}}\n\nWe don't need to check whether the file exists this time—if it does, we'll just overwrite it. We again use `pipe` to move data from a readable stream to a writable one, in this case from the request to the file. But since `pipe` isn't written to return a promise, we have to write a wrapper, `pipeStream`, that creates a promise around the outcome of calling `pipe`.\n\n{{index \"error event\", \"finish event\"}}\n\nWhen something goes wrong when opening the file, `createWriteStream` will still return a stream, but that stream will fire an `\"error\"` event. The stream from the request may also fail—for example, if the network goes down. So we wire up both streams' `\"error\"` events to reject the promise. When `pipe` is done, it will close the output stream, which causes it to fire a `\"finish\"` event. That's the point at which we can successfully resolve the promise (returning nothing).\n\n{{index download, \"file server example\", \"Node.js\"}}\n\nThe full script for the server is available at [_https://eloquentjavascript.net/code/file_server.mjs_](https://eloquentjavascript.net/code/file_server.mjs). You can download that and, after installing its dependencies, run it with Node to start your own file server. And, of course, you can modify and extend it to solve this chapter's exercises or to experiment.\n\n{{index \"body (HTTP)\", \"curl program\", [HTTP, client], [method, HTTP]}}\n\nThe command line tool `curl`, widely available on ((Unix))-like systems (such as macOS and Linux), can be used to make HTTP ((request))s. The following session briefly tests our server. The `-X` option is used to set the request's method, and `-d` is used to include a request body.\n\n```{lang: null}\n$ curl http://localhost:8000/file.txt\nFile not found\n$ curl -X PUT -d CONTENT http://localhost:8000/file.txt\n$ curl http://localhost:8000/file.txt\nCONTENT\n$ curl -X DELETE http://localhost:8000/file.txt\n$ curl http://localhost:8000/file.txt\nFile not found\n```\n\nThe first request for `file.txt` fails since the file does not exist yet. The `PUT` request creates the file, and behold, the next request successfully retrieves it. After deleting it with a `DELETE` request, the file is again missing.\n\n## Summary\n\n{{index \"Node.js\"}}\n\nNode is a nice, small system that lets us run JavaScript in a nonbrowser context. It was originally designed for network tasks to play the role of a node in a network, but it lends itself to all kinds of scripting tasks. If writing JavaScript is something you enjoy, automating tasks with Node may work well for you.\n\nNPM provides packages for everything you can think of (and quite a few things you'd probably never think of), and it allows you to fetch and install those packages with the `npm` program. Node comes with a number of built-in modules, including the `node:fs` module for working with the filesystem and the `node:http` module for running HTTP servers.\n\nAll input and output in Node is done asynchronously, unless you explicitly use a synchronous variant of a function, such as `readFileSync`. Node originally used callbacks for asynchronous functionality, but the `node:fs/promises` package provides a promise-based interface to the filesystem.\n\n## Exercises\n\n### Search tool\n\n{{index grep, \"search problem\", \"search tool (exercise)\"}}\n\nOn ((Unix)) systems, there is a command line tool called `grep` that can be used to quickly search files for a ((regular expression)).\n\nWrite a Node script that can be run from the ((command line)) and acts somewhat like `grep`. It treats its first command line argument as a regular expression and treats any further arguments as files to search. It outputs the names of any file whose content matches the regular expression.\n\nWhen that works, extend it so that when one of the arguments is a ((directory)), it searches through all files in that directory and its subdirectories.\n\n{{index [\"asynchronous programming\", \"in Node.js\"], \"synchronous programming\"}}\n\nUse asynchronous or synchronous filesystem functions as you see fit. Setting things up so that multiple asynchronous actions are requested at the same time might speed things up a little, but not a huge amount, since most filesystems can read only one thing at a time.\n\n{{hint\n\n{{index \"RegExp class\", \"search tool (exercise)\"}}\n\nYour first command line argument, the ((regular expression)), can be found in `process.argv[2]`. The input files come after that. You can use the `RegExp` constructor to go from a string to a regular expression object.\n\n{{index \"readFileSync function\"}}\n\nDoing this synchronously, with `readFileSync`, is more straightforward, but if you use `node:fs/promises` to get promise-returning functions and write an `async` function, the code looks similar.\n\n{{index \"stat function\", \"statSync function\", \"isDirectory method\"}}\n\nTo figure out whether something is a directory, you can again use `stat` (or `statSync`) and the stats object's `isDirectory` method.\n\n{{index \"readdir function\", \"readdirSync function\"}}\n\nExploring a directory is a branching process. You can do it either by using a recursive function or by keeping an array of work (files that still need to be explored). To find the files in a directory, you can call `readdir` or `readdirSync`. Note the strange capitalization—Node's filesystem function naming is loosely based on standard Unix functions, such as `readdir`, that are all lowercase, but then it adds `Sync` with a capital letter.\n\nTo go from a filename read with `readdir` to a full path name, you have to combine it with the name of the directory, either putting `sep` from `node:path` between them or using the `join` function from that same package.\n\nhint}}\n\n### Directory creation\n\n{{index \"file server example\", \"directory creation (exercise)\", \"rmdir function\"}}\n\nThough the `DELETE` method in our file server is able to delete directories (using `rmdir`), the server currently does not provide any way to _create_ a ((directory)).\n\n{{index \"MKCOL method\", \"mkdir function\"}}\n\nAdd support for the `MKCOL` method (\"make collection\"), which should create a directory by calling `mkdir` from the `node:fs` module. `MKCOL` is not a widely used HTTP method, but it does exist for this same purpose in the _((WebDAV))_ standard, which specifies a set of conventions on top of ((HTTP)) that make it suitable for creating documents.\n\n```{hidden: true, includeCode: \">code/file_server.mjs\"}\nimport {mkdir} from \"node:fs/promises\";\n\nmethods.MKCOL = async function(request) {\n  let path = urlPath(request.url);\n  let stats;\n  try {\n    stats = await stat(path);\n  } catch (error) {\n    if (error.code != \"ENOENT\") throw error;\n    await mkdir(path);\n    return {status: 204};\n  }\n  if (stats.isDirectory()) return {status: 204};\n  else return {status: 400, body: \"Not a directory\"};\n};\n```\n\n{{hint\n\n{{index \"directory creation (exercise)\", \"file server example\", \"MKCOL method\", \"mkdir function\", idempotency, \"400 (HTTP status code)\"}}\n\nYou can use the function that implements the `DELETE` method as a blueprint for the `MKCOL` method. When no file is found, try to create a directory with `mkdir`. When a directory exists at that path, you can return a 204 response so that directory creation requests are idempotent. If a nondirectory file exists here, return an error code. Code 400 (\"bad request\") would be appropriate.\n\nhint}}\n\n### A public space on the web\n\n{{index \"public space (exercise)\", \"file server example\", \"Content-Type header\", website}}\n\nSince the file server serves up any kind of file and even includes the right `Content-Type` header, you can use it to serve a website. Given that this server allows everybody to delete and replace files, this would make for an interesting kind of website: one that can be modified, improved, and vandalized by everybody who takes the time to make the right HTTP request.\n\nWrite a basic ((HTML)) page that includes a simple JavaScript file. Put the files in a directory served by the file server and open them in your browser.\n\nNext, as an advanced exercise or even a ((weekend project)), combine all the knowledge you gained from this book to build a more user-friendly interface for modifying the website—from _inside_ the website.\n\nUse an HTML ((form)) to edit the content of the files that make up the website, allowing the user to update them on the server by using HTTP requests, as described in [Chapter ?](http).\n\nStart by making only a single file editable. Then make it so that the user can select which file to edit. Use the fact that our file server returns lists of files when reading a directory.\n\n{{index overwriting}}\n\nDon't work directly in the code exposed by the file server, since if you make a mistake, you are likely to damage the files there. Instead, keep your work outside of the publicly accessible directory and copy it there when testing.\n\n{{hint\n\n{{index \"file server example\", \"textarea (HTML tag)\", \"fetch function\", \"relative path\", \"public space (exercise)\"}}\n\nYou can create a `<textarea>` element to hold the content of the file that is being edited. A `GET` request, using `fetch`, can retrieve the current content of the file. You can use relative URLs like _index.html_, instead of [_http://localhost:8000/index.html_](http://localhost:8000/index.html), to refer to files on the same server as the running script.\n\n{{index \"form (HTML tag)\", \"submit event\", \"PUT method\"}}\n\nThen, when the user clicks a button (you can use a `<form>` element and `\"submit\"` event), make a `PUT` request to the same URL, with the content of the `<textarea>` as the request body, to save the file.\n\n{{index \"select (HTML tag)\", \"option (HTML tag)\", \"change event\"}}\n\nYou can then add a `<select>` element that contains all the files in the server's top ((directory)) by adding `<option>` elements containing the lines returned by a `GET` request to the URL `/`. When the user selects another file (a `\"change\"` event on the field), the script must fetch and display that file. When saving a file, use the currently selected filename.\n\nhint}}\n"
        },
        {
          "name": "21_skillsharing.md",
          "type": "blob",
          "size": 37.7705078125,
          "content": "{{meta {code_links: [\"code/skillsharing.zip\"]}}}\n\n# Project: Skill-Sharing Website\n\n{{quote {author: \"Margaret Fuller\", chapter: true}\n\nIf you have knowledge, let others light their candles at it.\n\nquote}}\n\n{{index \"skill-sharing project\", meetup, \"project chapter\"}}\n\n{{figure {url: \"img/chapter_picture_21.jpg\", alt: \"Illustration showing two unicycles leaned against a mailbox\", chapter: \"framed\"}}}\n\nA _((skill-sharing))_ meeting is an event where people with a shared interest come together and give small, informal presentations about things they know. At a ((gardening)) skill-sharing meeting, someone might explain how to cultivate ((celery)). Or in a programming skill-sharing group, you could drop by and tell people about Node.js.\n\nIn this final project chapter, our goal is to set up a ((website)) for managing ((talk))s given at a skill-sharing meeting. Imagine a small group of people meeting up regularly in the office of one of the members to talk about ((unicycling)). The previous organizer of the meetings moved to another town, and nobody stepped forward to take over this task. We want a system that will let the participants propose and discuss talks among themselves without an active organizer.\n\n[Just like in the [previous chapter](node), some of the code in this chapter is written for Node.js, and running it directly in the HTML page that you are looking at is unlikely to work.]{if interactive} The full code for the project can be ((download))ed from [_https://eloquentjavascript.net/code/skillsharing.zip_](https://eloquentjavascript.net/code/skillsharing.zip).\n\n## Design\n\n{{index \"skill-sharing project\", persistence}}\n\nThere is a _((server))_ part to this project, written for ((Node.js)), and a _((client))_ part, written for the ((browser)). The server stores the system's data and provides it to the client. It also serves the files that implement the client-side system.\n\n{{index [HTTP, client]}}\n\nThe server keeps the list of ((talk))s proposed for the next meeting, and the client shows this list. Each talk has a presenter name, a title, a summary, and an array of ((comment))s associated with it. The client allows users to propose new talks (adding them to the list), delete talks, and comment on existing talks. Whenever the user makes such a change, the client makes an HTTP ((request)) to tell the server about it.\n\n{{figure {url: \"img/skillsharing.png\", alt: \"Screenshot of the skill-sharing website\", width: \"10cm\"}}}\n\n{{index \"live view\", \"user experience\", \"pushing data\", connection}}\n\nThe ((application)) will be set up to show a _live_ view of the current proposed talks and their comments. Whenever someone, somewhere, submits a new talk or adds a comment, all people who have the page open in their browsers should immediately see the change. This poses a bit of a challenge—there is no way for a web server to open a connection to a client, nor is there a good way to know which clients are currently looking at a given website.\n\n{{index \"Node.js\"}}\n\nA common solution to this problem is called _((long polling))_, which happens to be one of the motivations for Node's design.\n\n## Long polling\n\n{{index notification, \"long polling\", network, [browser, security]}}\n\nTo be able to immediately notify a client that something changed, we need a ((connection)) to that client. Since web browsers do not traditionally accept connections and clients are often behind ((router))s that would block such connections anyway, having the server initiate this connection is not practical.\n\n{{index socket}}\n\nWe can arrange for the client to open the connection and keep it around so that the server can use it to send information when it needs to do so. But an ((HTTP)) request allows only a simple flow of information: the client sends a request, the server comes back with a single response, and that's it. A technology called _((WebSockets))_ makes it possible to open ((connection))s for arbitrary data exchange, but using such sockets properly is somewhat tricky.\n\nIn this chapter, we use a simpler technique, ((long polling)), where clients continuously ask the server for new information using regular HTTP requests, and the server stalls its answer when it has nothing new to report.\n\n{{index \"live view\"}}\n\nAs long as the client makes sure it constantly has a polling request open, it will receive information from the server quickly after it becomes available. For example, if Fatma has our skill-sharing application open in her browser, that browser will have made a request for updates and will be waiting for a response to that request. When Iman submits a talk on Extreme Downhill Unicycling, the server will notice that Fatma is waiting for updates and send a response containing the new talk to her pending request. Fatma's browser will receive the data and update the screen to show the talk.\n\n{{index robustness, timeout}}\n\nTo prevent connections from timing out (being aborted because of a lack of activity), ((long polling)) techniques usually set a maximum time for each request, after which the server will respond anyway, even though it has nothing to report. The client can then start a new request. Periodically restarting the request also makes the technique more robust, allowing clients to recover from temporary ((connection)) failures or server problems.\n\n{{index \"Node.js\"}}\n\nA busy server that is using long polling may have thousands of waiting requests, and thus ((TCP)) connections, open. Node, which makes it easy to manage many connections without creating a separate thread of control for each one, is a good fit for such a system.\n\n## HTTP interface\n\n{{index \"skill-sharing project\", [interface, HTTP]}}\n\nBefore we start designing either the server or the client, let's think about the point where they touch: the ((HTTP)) interface over which they communicate.\n\n{{index [path, URL], [method, HTTP]}}\n\nWe will use ((JSON)) as the format of our request and response body. Like in the file server from [Chapter ?](node#file_server), we'll try to make good use of HTTP methods and ((header))s. The interface is centered around the `/talks` path. Paths that do not start with `/talks` will be used for serving ((static file))s—the HTML and JavaScript code for the client-side system.\n\n{{index \"GET method\"}}\n\nA `GET` request to `/talks` returns a JSON document like this:\n\n```{lang: \"json\"}\n[{\"title\": \"Unituning\",\n  \"presenter\": \"Jamal\",\n  \"summary\": \"Modifying your cycle for extra style\",\n  \"comments\": []}]\n```\n\n{{index \"PUT method\", URL}}\n\nCreating a new talk is done by making a `PUT` request to a URL like `/talks/Unituning`, where the part after the second slash is the title of the talk. The `PUT` request's body should contain a ((JSON)) object that has `presenter` and `summary` properties.\n\n{{index \"encodeURIComponent function\", [escaping, \"in URLs\"], [whitespace, \"in URLs\"]}}\n\nSince talk titles may contain spaces and other characters that may not appear normally in a URL, title strings must be encoded with the `encodeURIComponent` function when building up such a URL.\n\n```\nconsole.log(\"/talks/\" + encodeURIComponent(\"How to Idle\"));\n// → /talks/How%20to%20Idle\n```\n\nA request to create a talk about idling might look something like this:\n\n```{lang: http}\nPUT /talks/How%20to%20Idle HTTP/1.1\nContent-Type: application/json\nContent-Length: 92\n\n{\"presenter\": \"Maureen\",\n \"summary\": \"Standing still on a unicycle\"}\n```\n\nSuch URLs also support `GET` requests to retrieve the JSON representation of a talk and `DELETE` requests to delete a talk.\n\n{{index \"POST method\"}}\n\nAdding a ((comment)) to a talk is done with a `POST` request to a URL like `/talks/Unituning/comments`, with a JSON body that has `author` and `message` properties.\n\n```{lang: http}\nPOST /talks/Unituning/comments HTTP/1.1\nContent-Type: application/json\nContent-Length: 72\n\n{\"author\": \"Iman\",\n \"message\": \"Will you talk about raising a cycle?\"}\n```\n\n{{index \"query string\", timeout, \"ETag header\", \"If-None-Match header\"}}\n\nTo support ((long polling)), `GET` requests to `/talks` may include extra headers that inform the server to delay the response if no new information is available. We'll use a pair of headers normally intended to manage caching: `ETag` and `If-None-Match`.\n\n{{index \"304 (HTTP status code)\"}}\n\nServers may include an `ETag` (\"entity tag\") header in a response. Its value is a string that identifies the current version of the resource. Clients, when they later request that resource again, may make a _((conditional request))_ by including an `If-None-Match` header whose value holds that same string. If the resource hasn't changed, the server will respond with status code 304, which means \"not modified\", telling the client that its cached version is still current. When the tag does not match, the server responds as normal.\n\n{{index \"Prefer header\"}}\n\nWe need something like this, where the client can tell the server which version of the list of talks it has, and the server responds only when that list has changed. But instead of immediately returning a 304 response, the server should stall the response and return only when something new is available or a given amount of time has elapsed. To distinguish long polling requests from normal conditional requests, we give them another header, `Prefer: wait=90`, which tells the server that the client is willing to wait up to 90 seconds for the response.\n\nThe server will keep a version number that it updates every time the talks change and will use that as the `ETag` value. Clients can make requests like this to be notified when the talks change:\n\n```{lang: null}\nGET /talks HTTP/1.1\nIf-None-Match: \"4\"\nPrefer: wait=90\n\n(time passes)\n\nHTTP/1.1 200 OK\nContent-Type: application/json\nETag: \"5\"\nContent-Length: 295\n\n[...]\n```\n\n{{index security}}\n\nThe protocol described here doesn't do any ((access control)). Everybody can comment, modify talks, and even delete them. (Since the internet is full of ((hooligan))s, putting such a system online without further protection probably wouldn't end well.)\n\n## The server\n\n{{index \"skill-sharing project\"}}\n\nLet's start by building the ((server))-side part of the program. The code in this section runs on ((Node.js)).\n\n### Routing\n\n{{index \"createServer function\", [path, URL], [method, HTTP]}}\n\nOur server will use Node's `createServer` to start an HTTP server. In the function that handles a new request, we must distinguish between the various kinds of requests (as determined by the method and the path) that we support. This can be done with a long chain of `if` statements, but there's a nicer way.\n\n{{index dispatch}}\n\nA _((router))_ is a component that helps dispatch a request to the function that can handle it. You can tell the router, for example, that `PUT` requests with a path that matches the regular expression `/^\\/talks\\/([^\\/]+)$/` (`/talks/` followed by a talk title) can be handled by a given function. In addition, it can help extract the meaningful parts of the path (in this case the talk title), wrapped in parentheses in the ((regular expression)), and pass them to the handler function.\n\nThere are a number of good router packages on ((NPM)), but here we'll write one ourselves to illustrate the principle.\n\n{{index \"import keyword\", \"Router class\", module}}\n\nThis is `router.mjs`, which we will later `import` from our server module:\n\n```{includeCode: \">code/skillsharing/router.mjs\"}\nexport class Router {\n  constructor() {\n    this.routes = [];\n  }\n  add(method, url, handler) {\n    this.routes.push({method, url, handler});\n  }\n  async resolve(request, context) {\n    let {pathname} = new URL(request.url, \"http://d\");\n    for (let {method, url, handler} of this.routes) {\n      let match = url.exec(pathname);\n      if (!match || request.method != method) continue;\n      let parts = match.slice(1).map(decodeURIComponent);\n      return handler(context, ...parts, request);\n    }\n  }\n}\n```\n\n{{index \"Router class\"}}\n\nThe module exports the `Router` class. A router object allows you to register handlers for specific methods and URL patterns with its `add` method. When a request is resolved with the `resolve` method, the router calls the handler whose method and URL match the request and return its result.\n\n{{index \"capture group\", \"decodeURIComponent function\", [escaping, \"in URLs\"]}}\n\nHandler functions are called with the `context` value given to `resolve`. We will use this to give them access to our server state. Additionally, they receive the match strings for any groups they defined in their ((regular expression)), and the request object. The strings have to be URL-decoded, since the raw URL may contain `%20`-style codes.\n\n### Serving files\n\nWhen a request matches none of the request types defined in our router, the server must interpret it as a request for a file in the `public` directory. It would be possible to use the file server defined in [Chapter ?](node#file_server) to serve such files, but we neither need nor want to support `PUT` and `DELETE` requests on files, and we would like to have advanced features such as support for caching. Let's use a solid, well-tested ((static file)) server from ((NPM)) instead.\n\n{{index \"createServer function\", \"serve-static package\"}}\n\nI opted for `serve-static`. This isn't the only such server on NPM, but it works well and fits our purposes. The `serve-static` package exports a function that can be called with a root directory to produce a request handler function. The handler function accepts the `request` and `response` arguments provided by the server from `\"node:http\"`, and a third argument, a function that it will call if no file matches the request. We want our server to first check for requests we should handle specially, as defined in the router, so we wrap it in another function.\n\n```{includeCode: \">code/skillsharing/skillsharing_server.mjs\"}\nimport {createServer} from \"node:http\";\nimport serveStatic from \"serve-static\";\n\nfunction notFound(request, response) {\n  response.writeHead(404, \"Not found\");\n  response.end(\"<h1>Not found</h1>\");\n}\n\nclass SkillShareServer {\n  constructor(talks) {\n    this.talks = talks;\n    this.version = 0;\n    this.waiting = [];\n\n    let fileServer = serveStatic(\"./public\");\n    this.server = createServer((request, response) => {\n      serveFromRouter(this, request, response, () => {\n        fileServer(request, response,\n                   () => notFound(request, response));\n      });\n    });\n  }\n  start(port) {\n    this.server.listen(port);\n  }\n  stop() {\n    this.server.close();\n  }\n}\n```\n\nThe `serveFromRouter` function has the same interface as `fileServer`, taking `(request, response, next)` arguments. We can use this to “chain” several request handlers, allowing each to either handle the request or pass responsibility for that on to the next handler. The final handler, `notFound`, simply responds with a “not found” error.\n\nOur `serveFromRouter` function uses a similar convention to the file server from the [previous chapter](node) for responses—handlers in the router return promises that resolve to objects describing the response.\n\n```{includeCode: \">code/skillsharing/skillsharing_server.mjs\"}\nimport {Router} from \"./router.mjs\";\n\nconst router = new Router();\nconst defaultHeaders = {\"Content-Type\": \"text/plain\"};\n\nasync function serveFromRouter(server, request,\n                               response, next) {\n  let resolved = await router.resolve(request, server)\n    .catch(error => {\n      if (error.status != null) return error;\n      return {body: String(err), status: 500};\n    });\n  if (!resolved) return next();\n  let {body, status = 200, headers = defaultHeaders} =\n    await resolved;\n  response.writeHead(status, headers);\n  response.end(body);\n}\n```\n\n### Talks as resources\n\nThe ((talk))s that have been proposed are stored in the `talks` property of the server, an object whose property names are the talk titles. We'll add some handlers to our router that expose these as HTTP ((resource))s under `/talks/<title>`.\n\n{{index \"GET method\", \"404 (HTTP status code)\" \"hasOwn function\"}}\n\nThe handler for requests that `GET` a single talk must look up the talk and respond either with the talk's JSON data or with a 404 error response.\n\n```{includeCode: \">code/skillsharing/skillsharing_server.mjs\"}\nconst talkPath = /^\\/talks\\/([^\\/]+)$/;\n\nrouter.add(\"GET\", talkPath, async (server, title) => {\n  if (Object.hasOwn(server.talks, title)) {\n    return {body: JSON.stringify(server.talks[title]),\n            headers: {\"Content-Type\": \"application/json\"}};\n  } else {\n    return {status: 404, body: `No talk '${title}' found`};\n  }\n});\n```\n\n{{index \"DELETE method\"}}\n\nDeleting a talk is done by removing it from the `talks` object.\n\n```{includeCode: \">code/skillsharing/skillsharing_server.mjs\"}\nrouter.add(\"DELETE\", talkPath, async (server, title) => {\n  if (Object.hasOwn(server.talks, title)) {\n    delete server.talks[title];\n    server.updated();\n  }\n  return {status: 204};\n});\n```\n\n{{index \"long polling\", \"updated method\"}}\n\nThe `updated` method, which we will define [later](skillsharing#updated), notifies waiting long polling requests about the change.\n\n{{index validation, input, \"PUT method\"}}\n\nOne handler that needs to read request bodies is the `PUT` handler, which is used to create new ((talk))s. It has to check whether the data it was given has `presenter` and `summary` properties, which are strings. Any data coming from outside the system might be nonsense, and we don't want to corrupt our internal data model or ((crash)) when bad requests come in.\n\n{{index \"updated method\"}}\n\nIf the data looks valid, the handler stores an object that represents the new talk in the `talks` object, possibly ((overwriting)) an existing talk with this title, and again calls `updated`.\n\n{{index \"node:stream/consumers package\", JSON, \"readable stream\"}}\n\nTo read the body from the request stream, we will use the `json` function from `\"node:stream/consumers\"`, which collects the data in the stream and then parses it as JSON. There are similar exports called `text` (to read the content as a string) and `buffer` (to read it as binary data) in this package. Since `json` is a very generic name, the import renames it to `readJSON` to avoid confusion.\n\n```{includeCode: \">code/skillsharing/skillsharing_server.mjs\"}\nimport {json as readJSON} from \"node:stream/consumers\";\n\nrouter.add(\"PUT\", talkPath,\n           async (server, title, request) => {\n  let talk = await readJSON(request);\n  if (!talk ||\n      typeof talk.presenter != \"string\" ||\n      typeof talk.summary != \"string\") {\n    return {status: 400, body: \"Bad talk data\"};\n  }\n  server.talks[title] = {\n    title,\n    presenter: talk.presenter,\n    summary: talk.summary,\n    comments: []\n  };\n  server.updated();\n  return {status: 204};\n});\n```\n\nAdding a ((comment)) to a ((talk)) works similarly. We use `readJSON` to get the content of the request, validate the resulting data, and store it as a comment when it looks valid.\n\n```{includeCode: \">code/skillsharing/skillsharing_server.mjs\"}\nrouter.add(\"POST\", /^\\/talks\\/([^\\/]+)\\/comments$/,\n           async (server, title, request) => {\n  let comment = await readJSON(request);\n  if (!comment ||\n      typeof comment.author != \"string\" ||\n      typeof comment.message != \"string\") {\n    return {status: 400, body: \"Bad comment data\"};\n  } else if (Object.hasOwn(server.talks, title)) {\n    server.talks[title].comments.push(comment);\n    server.updated();\n    return {status: 204};\n  } else {\n    return {status: 404, body: `No talk '${title}' found`};\n  }\n});\n```\n\n{{index \"404 (HTTP status code)\"}}\n\nTrying to add a comment to a nonexistent talk returns a 404 error.\n\n### Long polling support\n\nThe most interesting aspect of the server is the part that handles ((long polling)). When a `GET` request comes in for `/talks`, it may be either a regular request or a long polling request.\n\n{{index \"talkResponse method\", \"ETag header\"}}\n\nThere will be multiple places in which we have to send an array of talks to the client, so we first define a helper method that builds up such an array and includes an `ETag` header in the response.\n\n```{includeCode: \">code/skillsharing/skillsharing_server.mjs\"}\nSkillShareServer.prototype.talkResponse = function() {\n  let talks = Object.keys(this.talks)\n    .map(title => this.talks[title]);\n  return {\n    body: JSON.stringify(talks),\n    headers: {\"Content-Type\": \"application/json\",\n              \"ETag\": `\"${this.version}\"`,\n              \"Cache-Control\": \"no-store\"}\n  };\n};\n```\n\n{{index \"query string\", \"url package\", parsing}}\n\nThe handler itself needs to look at the request headers to see whether `If-None-Match` and `Prefer` headers are present. Node stores headers, whose names are specified to be case insensitive, under their lowercase names.\n\n```{includeCode: \">code/skillsharing/skillsharing_server.mjs\"}\nrouter.add(\"GET\", /^\\/talks$/, async (server, request) => {\n  let tag = /\"(.*)\"/.exec(request.headers[\"if-none-match\"]);\n  let wait = /\\bwait=(\\d+)/.exec(request.headers[\"prefer\"]);\n  if (!tag || tag[1] != server.version) {\n    return server.talkResponse();\n  } else if (!wait) {\n    return {status: 304};\n  } else {\n    return server.waitForChanges(Number(wait[1]));\n  }\n});\n```\n\n{{index \"long polling\", \"waitForChanges method\", \"If-None-Match header\", \"Prefer header\"}}\n\nIf no tag was given or a tag was given that doesn't match the server's current version, the handler responds with the list of talks. If the request is conditional and the talks did not change, we consult the `Prefer` header to see whether we should delay the response or respond right away.\n\n{{index \"304 (HTTP status code)\", \"setTimeout function\", timeout, \"callback function\"}}\n\nCallback functions for delayed requests are stored in the server's `waiting` array so that they can be notified when something happens. The `waitForChanges` method also immediately sets a timer to respond with a 304 status when the request has waited long enough.\n\n```{includeCode: \">code/skillsharing/skillsharing_server.mjs\"}\nSkillShareServer.prototype.waitForChanges = function(time) {\n  return new Promise(resolve => {\n    this.waiting.push(resolve);\n    setTimeout(() => {\n      if (!this.waiting.includes(resolve)) return;\n      this.waiting = this.waiting.filter(r => r != resolve);\n      resolve({status: 304});\n    }, time * 1000);\n  });\n};\n```\n\n{{index \"updated method\"}}\n\n{{id updated}}\n\nRegistering a change with `updated` increases the `version` property and wakes up all waiting requests.\n\n```{includeCode: \">code/skillsharing/skillsharing_server.mjs\"}\nSkillShareServer.prototype.updated = function() {\n  this.version++;\n  let response = this.talkResponse();\n  this.waiting.forEach(resolve => resolve(response));\n  this.waiting = [];\n};\n```\n\n{{index [HTTP, server]}}\n\nThat concludes the server code. If we create an instance of `SkillShareServer` and start it on port 8000, the resulting HTTP server serves files from the `public` subdirectory alongside a talk-managing interface under the `/talks` URL.\n\n```{includeCode: \">code/skillsharing/skillsharing_server.mjs\"}\nnew SkillShareServer({}).start(8000);\n```\n\n## The client\n\n{{index \"skill-sharing project\"}}\n\nThe ((client))-side part of the skill-sharing website consists of three files: a tiny HTML page, a style sheet, and a JavaScript file.\n\n### HTML\n\n{{index \"index.html\"}}\n\nIt is a widely used convention for web servers to try to serve a file named `index.html` when a request is made directly to a path that corresponds to a directory. The ((file server)) module we use, `serve-static`, supports this convention. When a request is made to the path `/`, the server looks for the file `./public/index.html` (`./public` being the root we gave it) and returns that file if found.\n\nThus, if we want a page to show up when a browser is pointed at our server, we should put it in `public/index.html`. This is our index file:\n\n```{lang: \"html\", includeCode: \">code/skillsharing/public/index.html\"}\n<!doctype html>\n<meta charset=\"utf-8\">\n<title>Skill Sharing</title>\n<link rel=\"stylesheet\" href=\"skillsharing.css\">\n\n<h1>Skill Sharing</h1>\n\n<script src=\"skillsharing_client.js\"></script>\n```\n\n{{index CSS}}\n\nIt defines the document ((title)) and includes a style sheet, which defines a few styles to, among other things, make sure there is some space between talks. It then adds a heading at the top of the page and loads the script that contains the ((client))-side application.\n\n### Actions\n\nThe application state consists of the list of talks and the name of the user, and we'll store it in a `{talks, user}` object. We don't allow the user interface to directly manipulate the state or send off HTTP requests. Rather, it may emit _actions_ that describe what the user is trying to do.\n\n{{index \"handleAction function\"}}\n\nThe `handleAction` function takes such an action and makes it happen. Because our state updates are so simple, state changes are handled in the same function.\n\n```{includeCode: \">code/skillsharing/public/skillsharing_client.js\", test: no}\nfunction handleAction(state, action) {\n  if (action.type == \"setUser\") {\n    localStorage.setItem(\"userName\", action.user);\n    return {...state, user: action.user};\n  } else if (action.type == \"setTalks\") {\n    return {...state, talks: action.talks};\n  } else if (action.type == \"newTalk\") {\n    fetchOK(talkURL(action.title), {\n      method: \"PUT\",\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify({\n        presenter: state.user,\n        summary: action.summary\n      })\n    }).catch(reportError);\n  } else if (action.type == \"deleteTalk\") {\n    fetchOK(talkURL(action.talk), {method: \"DELETE\"})\n      .catch(reportError);\n  } else if (action.type == \"newComment\") {\n    fetchOK(talkURL(action.talk) + \"/comments\", {\n      method: \"POST\",\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify({\n        author: state.user,\n        message: action.message\n      })\n    }).catch(reportError);\n  }\n  return state;\n}\n```\n\n{{index \"localStorage object\"}}\n\nWe'll store the user's name in `localStorage` so that it can be restored when the page is loaded.\n\n{{index \"fetch function\", \"status property\"}}\n\nThe actions that need to involve the server make network requests, using `fetch`, to the HTTP interface described earlier. We use a wrapper function, `fetchOK`, which makes sure the returned promise is rejected when the server returns an error code.\n\n```{includeCode: \">code/skillsharing/public/skillsharing_client.js\", test: no}\nfunction fetchOK(url, options) {\n  return fetch(url, options).then(response => {\n    if (response.status < 400) return response;\n    else throw new Error(response.statusText);\n  });\n}\n```\n\n{{index \"talkURL function\", \"encodeURIComponent function\"}}\n\nThis helper function is used to build up a ((URL)) for a talk with a given title.\n\n```{includeCode: \">code/skillsharing/public/skillsharing_client.js\", test: no}\nfunction talkURL(title) {\n  return \"talks/\" + encodeURIComponent(title);\n}\n```\n\n{{index \"error handling\", \"user experience\", \"reportError function\"}}\n\nWhen the request fails, we don't want our page to just sit there doing nothing without explanation. The function called `reportError`, which we used as the `catch` handler, shows the user a crude dialog to tell them something went wrong.\n\n```{includeCode: \">code/skillsharing/public/skillsharing_client.js\", test: no}\nfunction reportError(error) {\n  alert(String(error));\n}\n```\n\n### Rendering components\n\n{{index \"renderUserField function\"}}\n\nWe'll use an approach similar to the one we saw in [Chapter ?](paint), splitting the application into components. However, since some of the components either never need to update or are always fully redrawn when updated, we'll define those not as classes but as functions that directly return a DOM node. For example, here is a component that shows the field where the user can enter their name:\n\n```{includeCode: \">code/skillsharing/public/skillsharing_client.js\", test: no}\nfunction renderUserField(name, dispatch) {\n  return elt(\"label\", {}, \"Your name: \", elt(\"input\", {\n    type: \"text\",\n    value: name,\n    onchange(event) {\n      dispatch({type: \"setUser\", user: event.target.value});\n    }\n  }));\n}\n```\n\n{{index \"elt function\"}}\n\nThe `elt` function used to construct DOM elements is the one we used in [Chapter ?](paint).\n\n```{includeCode: \">code/skillsharing/public/skillsharing_client.js\", test: no, hidden: true}\nfunction elt(type, props, ...children) {\n  let dom = document.createElement(type);\n  if (props) Object.assign(dom, props);\n  for (let child of children) {\n    if (typeof child != \"string\") dom.appendChild(child);\n    else dom.appendChild(document.createTextNode(child));\n  }\n  return dom;\n}\n```\n\n{{index \"renderTalk function\"}}\n\nA similar function is used to render talks, which include a list of comments and a form for adding a new ((comment)).\n\n```{includeCode: \">code/skillsharing/public/skillsharing_client.js\", test: no}\nfunction renderTalk(talk, dispatch) {\n  return elt(\n    \"section\", {className: \"talk\"},\n    elt(\"h2\", null, talk.title, \" \", elt(\"button\", {\n      type: \"button\",\n      onclick() {\n        dispatch({type: \"deleteTalk\", talk: talk.title});\n      }\n    }, \"Delete\")),\n    elt(\"div\", null, \"by \",\n        elt(\"strong\", null, talk.presenter)),\n    elt(\"p\", null, talk.summary),\n    ...talk.comments.map(renderComment),\n    elt(\"form\", {\n      onsubmit(event) {\n        event.preventDefault();\n        let form = event.target;\n        dispatch({type: \"newComment\",\n                  talk: talk.title,\n                  message: form.elements.comment.value});\n        form.reset();\n      }\n    }, elt(\"input\", {type: \"text\", name: \"comment\"}), \" \",\n       elt(\"button\", {type: \"submit\"}, \"Add comment\")));\n}\n```\n\n{{index \"submit event\"}}\n\nThe `\"submit\"` event handler calls `form.reset` to clear the form's content after creating a `\"newComment\"` action.\n\nWhen creating moderately complex pieces of DOM, this style of programming starts to look rather messy. To avoid this, people often use a _((templating language))_, which allows you to write your interface as an HTML file with some special markers to indicate where dynamic elements go. Or they use _((JSX))_, a nonstandard JavaScript dialect that allows you to write something very close to HTML tags in your program as if they are JavaScript expressions. Both of these approaches use additional tools to preprocess the code before it can be run, which we will avoid in this chapter.\n\nComments are simple to render.\n\n```{includeCode: \">code/skillsharing/public/skillsharing_client.js\", test: no}\nfunction renderComment(comment) {\n  return elt(\"p\", {className: \"comment\"},\n             elt(\"strong\", null, comment.author),\n             \": \", comment.message);\n}\n```\n\n{{index \"form (HTML tag)\", \"renderTalkForm function\"}}\n\nFinally, the form that the user can use to create a new talk is rendered like this:\n\n```{includeCode: \">code/skillsharing/public/skillsharing_client.js\", test: no}\nfunction renderTalkForm(dispatch) {\n  let title = elt(\"input\", {type: \"text\"});\n  let summary = elt(\"input\", {type: \"text\"});\n  return elt(\"form\", {\n    onsubmit(event) {\n      event.preventDefault();\n      dispatch({type: \"newTalk\",\n                title: title.value,\n                summary: summary.value});\n      event.target.reset();\n    }\n  }, elt(\"h3\", null, \"Submit a Talk\"),\n     elt(\"label\", null, \"Title: \", title),\n     elt(\"label\", null, \"Summary: \", summary),\n     elt(\"button\", {type: \"submit\"}, \"Submit\"));\n}\n```\n\n### Polling\n\n{{index \"pollTalks function\", \"long polling\", \"If-None-Match header\", \"Prefer header\", \"fetch function\"}}\n\nTo start the app, we need the current list of talks. Since the initial load is closely related to the long polling process—the `ETag` from the load must be used when polling—we'll write a function that keeps polling the server for `/talks` and calls a ((callback function)) when a new set of talks is available.\n\n```{includeCode: \">code/skillsharing/public/skillsharing_client.js\", test: no}\nasync function pollTalks(update) {\n  let tag = undefined;\n  for (;;) {\n    let response;\n    try {\n      response = await fetchOK(\"/talks\", {\n        headers: tag && {\"If-None-Match\": tag,\n                         \"Prefer\": \"wait=90\"}\n      });\n    } catch (e) {\n      console.log(\"Request failed: \" + e);\n      await new Promise(resolve => setTimeout(resolve, 500));\n      continue;\n    }\n    if (response.status == 304) continue;\n    tag = response.headers.get(\"ETag\");\n    update(await response.json());\n  }\n}\n```\n\n{{index \"async function\"}}\n\nThis is an `async` function so that looping and waiting for the request is easier. It runs an infinite loop that, on each iteration, retrieves the list of talks—either normally or, if this isn't the first request, with the headers included that make it a long polling request.\n\n{{index \"error handling\", \"Promise class\", \"setTimeout function\"}}\n\nWhen a request fails, the function waits a moment and then tries again. This way, if your network connection goes away for a while and then comes back, the application can recover and continue updating. The promise resolved via `setTimeout` is a way to force the `async` function to wait.\n\n{{index \"304 (HTTP status code)\", \"ETag header\"}}\n\nWhen the server gives back a 304 response, that means a long polling request timed out, so the function should just immediately start the next request. If the response is a normal 200 response, its body is read as ((JSON)) and passed to the callback, and its `ETag` header value is stored for the next iteration.\n\n### The application\n\n{{index \"SkillShareApp class\"}}\n\nThe following component ties the whole user interface together:\n\n```{includeCode: \">code/skillsharing/public/skillsharing_client.js\", test: no}\nclass SkillShareApp {\n  constructor(state, dispatch) {\n    this.dispatch = dispatch;\n    this.talkDOM = elt(\"div\", {className: \"talks\"});\n    this.dom = elt(\"div\", null,\n                   renderUserField(state.user, dispatch),\n                   this.talkDOM,\n                   renderTalkForm(dispatch));\n    this.syncState(state);\n  }\n\n  syncState(state) {\n    if (state.talks != this.talks) {\n      this.talkDOM.textContent = \"\";\n      for (let talk of state.talks) {\n        this.talkDOM.appendChild(\n          renderTalk(talk, this.dispatch));\n      }\n      this.talks = state.talks;\n    }\n  }\n}\n```\n\n{{index synchronization, \"live view\"}}\n\nWhen the talks change, this component redraws all of them. This is simple but also wasteful. We'll get back to that in the exercises.\n\nWe can start the application like this:\n\n```{includeCode: \">code/skillsharing/public/skillsharing_client.js\", test: no}\nfunction runApp() {\n  let user = localStorage.getItem(\"userName\") || \"Anon\";\n  let state, app;\n  function dispatch(action) {\n    state = handleAction(state, action);\n    app.syncState(state);\n  }\n\n  pollTalks(talks => {\n    if (!app) {\n      state = {user, talks};\n      app = new SkillShareApp(state, dispatch);\n      document.body.appendChild(app.dom);\n    } else {\n      dispatch({type: \"setTalks\", talks});\n    }\n  }).catch(reportError);\n}\n\nrunApp();\n```\n\nIf you run the server and open two browser windows for [_http://localhost:8000_](http://localhost:8000/) next to each other, you can see that the actions you perform in one window are immediately visible in the other.\n\n## Exercises\n\n{{index \"Node.js\", NPM}}\n\nThe following exercises will involve modifying the system defined in this chapter. To work on them, make sure you've ((download))ed the code ([_https://eloquentjavascript.net/code/skillsharing.zip_](https://eloquentjavascript.net/code/skillsharing.zip)), installed Node ([_https://nodejs.org_](https://nodejs.org)), and installed the project's dependency with `npm install`.\n\n### Disk persistence\n\n{{index \"data loss\", persistence, [memory, persistence]}}\n\nThe skill-sharing server keeps its data purely in memory. This means that when it ((crash))es or is restarted for any reason, all talks and comments are lost.\n\n{{index \"hard drive\"}}\n\nExtend the server so that it stores the talk data to disk and automatically reloads the data when it is restarted. Don't worry about efficiency—do the simplest thing that works.\n\n{{hint\n\n{{index \"filesystem\", \"writeFile function\", \"updated method\", persistence}}\n\nThe simplest solution I can come up with is to encode the whole `talks` object as ((JSON)) and dump it to a file with `writeFile`. There is already a method (`updated`) that is called every time the server's data changes. It can be extended to write the new data to disk.\n\n{{index \"readFile function\", \"JSON.parse function\"}}\n\nPick a ((file))name, for example `./talks.json`. When the server starts, it can try to read that file with `readFile`, and if that succeeds, the server can use the file's contents as its starting data.\n\nhint}}\n\n### Comment field resets\n\n{{index \"comment field reset (exercise)\", template, [state, \"of application\"]}}\n\nThe wholesale redrawing of talks works pretty well because you usually can't tell the difference between a DOM node and its identical replacement. But there are exceptions. If you start typing something in the comment ((field)) for a talk in one browser window and then, in another, add a comment to that talk, the field in the first window will be redrawn, removing both its content and its ((focus)).\n\nWhen multiple people are adding comments at the same time, this would be annoying. Can you come up with a way to solve it?\n\n{{hint\n\n{{index \"comment field reset (exercise)\", template, \"syncState method\"}}\n\nThe best way to do this is probably to make the talk component an object, with a `syncState` method, so that they can be updated to show a modified version of the talk. During normal operation, the only way a talk can be changed is by adding more comments, so the `syncState` method can be relatively simple.\n\nThe difficult part is that when a changed list of talks comes in, we have to reconcile the existing list of DOM components with the talks on the new list—deleting components whose talk was deleted and updating components whose talk changed.\n\n{{index synchronization, \"live view\"}}\n\nTo do this, it might be helpful to keep a data structure that stores the talk components under the talk titles so that you can easily figure out whether a component exists for a given talk. You can then loop over the new array of talks, and for each of them, either synchronize an existing component or create a new one. To delete components for deleted talks, you'll have to also loop over the components and check whether the corresponding talks still exist.\n\nhint}}\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.3505859375,
          "content": "CHAPTERS := $(basename $(shell ls [0-9][0-9]_*.md) .md)\n\nSVGS := $(wildcard img/*.svg)\n\nall: html book.pdf book_mobile.pdf book.epub book.mobi\n\nhtml: $(foreach CHAP,$(CHAPTERS),html/$(CHAP).html) html/ejs.js \\\n      code/skillsharing.zip code/solutions/20_3_a_public_space_on_the_web.zip html/code/chapter_info.js\n\nhtml/%.html: %.md src/render_html.mjs src/chapter.html\n\tnode src/render_html.mjs $< > $@\n\tnode src/build_code.mjs $<\n\nhtml/code/chapter_info.js: $(foreach CHAP,$(CHAPTERS),$(CHAP).md) code/solutions/* src/chapter_info.mjs\n\tnode src/chapter_info.mjs > html/code/chapter_info.js\n\nhtml/ejs.js: node_modules/codemirror/dist/index.js \\\n\t     node_modules/@codemirror/view/dist/index.js \\\n\t     node_modules/@codemirror/state/dist/index.js \\\n\t     node_modules/@codemirror/language/dist/index.js \\\n\t     node_modules/@codemirror/lang-html/dist/index.js \\\n\t     node_modules/@codemirror/lang-javascript/dist/index.js \\\n\t     node_modules/acorn/dist/acorn.js \\\n\t     node_modules/acorn-walk/dist/walk.js \\\n\t     src/client/*.mjs\n\tnode_modules/.bin/rollup -c src/client/rollup.config.mjs\n\ncode/skillsharing.zip: html/21_skillsharing.html code/skillsharing/package.json\n\trm -f $@\n\tcd code; zip skillsharing.zip skillsharing/*.mjs skillsharing/package.json skillsharing/public/*.*\n\ncode/solutions/20_3_a_public_space_on_the_web.zip: $(wildcard code/solutions/20_3_a_public_space_on_the_web/*)\n\trm -f $@\n\tcd code/solutions; zip 20_3_a_public_space_on_the_web.zip 20_3_a_public_space_on_the_web/*\n\ntest: html\n\t@for F in $(CHAPTERS); do echo Testing $$F:; node src/run_tests.mjs $$F.md; done\n\t@node src/check_links.mjs\n\t@echo Done.\n\ntex: $(foreach CHAP,$(CHAPTERS),pdf/$(CHAP).tex) pdf/hints.tex $(patsubst img/%.svg,img/generated/%.pdf,$(SVGS))\n\nbook.pdf: tex pdf/book.tex\n\tcd pdf && sh build.sh book > /dev/null\n\tmv pdf/book.pdf .\t\n\npdf/book_mobile.tex: pdf/book.tex\n\tcat pdf/book.tex | sed -e 's/natbib}/natbib}\\n\\\\usepackage[a5paper, left=5mm, right=5mm]{geometry}/' | sed -e 's/setmonofont.Scale=0.8./setmonofont[Scale=0.75]/' > pdf/book_mobile.tex\n\nbook_mobile.pdf: pdf/book_mobile.tex tex\n\tcd pdf && sh build.sh book_mobile > /dev/null\n\tmv pdf/book_mobile.pdf .\t\n\npdf/hints.tex: $(foreach CHAP,$(CHAPTERS),$(CHAP).md) src/extract_hints.mjs\n\tnode src/extract_hints.mjs | node src/render_latex.mjs - > $@\n\nimg/generated/%.pdf: img/%.svg\n\tinkscape --export-pdf=$@ $<\n\npdf/%.tex: %.md\n\tnode src/render_latex.mjs $< > $@\n\nbook.epub: epub/titlepage.xhtml epub/toc.xhtml epub/hints.xhtml $(foreach CHAP,$(CHAPTERS),epub/$(CHAP).xhtml) \\\n           epub/content.opf.src epub/style.css src/add_images_to_epub.mjs\n\trm -f $@\n\tgrep '<img' epub/*.xhtml | sed -e 's/.*src=\"\\([^\"]*\\)\".*/\\1/' | xargs -I{} rsync -R \"{}\" epub\n\tnode src/add_images_to_epub.mjs\n\tcd epub; zip -X ../$@ mimetype\n\tcd epub; zip -X ../$@ -r * -x mimetype -x *.src\n\nepub/toc.xhtml: epub/toc.xhtml.src $(foreach CHAP,$(CHAPTERS),epub/$(CHAP).xhtml) epub/hints.xhtml\n\tnode src/generate_epub_toc.mjs $^ > $@\n\nepub/%.xhtml: %.md src/render_html.mjs\n\tnode src/render_html.mjs --epub $< > $@\n\nepub/hints.xhtml: $(foreach CHAP,$(CHAPTERS),$(CHAP).md) src/extract_hints.mjs src/render_html.mjs\n\tnode src/extract_hints.mjs | node src/render_html.mjs --epub - > $@\n\nepubcheck: book.epub\n\tepubcheck book.epub 2>&1 | grep -v 'img/.*\\.svg'\n\nbook.mobi: book.epub img/cover.jpg\n\tebook-convert book.epub book.mobi --output-profile=kindle --cover=img/cover.jpg --remove-first-image\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.9765625,
          "content": "# Eloquent JavaScript\n\nThese are the sources used to build the third edition of Eloquent\nJavaScript (https://eloquentjavascript.net).\n\nFeedback welcome, in the form of issues and pull requests.\n\n## Building\n\nThis builds the HTML output in `html/`, where `make` is GNU make:\n\n    npm install\n    make html\n\nTo build the PDF file (don't bother trying this unless you really need\nit, since this list has probably bitrotted again and getting all this\nset up is a pain):\n\n    apt-get install texlive texlive-xetex fonts-inconsolata fonts-symbola texlive-lang-chinese inkscape\n    make book.pdf\n\n## Translating\n\nTranslations are very much welcome. The license this book is published\nunder allows non-commercial derivations, which includes open\ntranslations. If you do one, let me know, and I'll add a link to the\nwebsite.\n\nA note of caution though: This text consists of about 130 000 words,\nthe paper book is 400 pages. That's a lot of text, which will take a\nlot of time to translate.\n\nIf that doesn't scare you off, the recommended way to go about a\ntranslation is:\n\n - Fork this repository on GitHub.\n\n - Create an issue on the repository describing your plan to translate.\n\n - Translate the `.md` files in your fork. These are\n   [CommonMark](https://commonmark.org/) formatted, with a few\n   extensions. You may consider omitting the index terms (indicated\n   with double parentheses and `{{index ...}}` syntax) from your\n   translation, since that's mostly relevant for print output.\n\n - Publish somewhere online or ask me to host the result.\n\nDoing this in public, and creating an issue that links to your work,\nhelps avoid wasted effort, where multiple people start a translation\nto the same language (and possibly never finish it). (Since\ntranslations have to retain the license, it is okay to pick up someone\nelse's translation and continue it, even when they have vanished from\nthe internet.)\n\nI am not interested in machine translations. Please only ask me to\nlink your translation when it was done by actual people.\n"
        },
        {
          "name": "code",
          "type": "tree",
          "content": null
        },
        {
          "name": "epub",
          "type": "tree",
          "content": null
        },
        {
          "name": "html",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.1259765625,
          "content": "{\n  \"name\": \"Eloquent-JavaScript\",\n  \"license\": \"CC BY-NC 3.0\",\n  \"version\": \"0.1.0\",\n  \"author\": \"Marijn Haverbeke <marijn@haverbeke.berlin>\",\n  \"description\": \"Sources for the book Eloquent JavaScript\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/marijnh/Eloquent-JavaScript.git\"\n  },\n  \"dependencies\": {\n    \"rollup\": \"^3.28.0\",\n    \"@rollup/plugin-node-resolve\": \"^15.0.0\",\n    \"@rollup/plugin-terser\": \"^0.4.4\",\n    \"acorn\": \"^8.0.0\",\n    \"acorn-walk\": \"^8.0.0\",\n    \"@codemirror/view\": \"^6.20.0\",\n    \"@codemirror/state\": \"^6.2.0\",\n    \"@codemirror/language\": \"^6.9.0\",\n    \"@codemirror/lang-css\": \"^6.2.0\",\n    \"@codemirror/lang-html\": \"^6.4.0\",\n    \"@codemirror/lang-javascript\": \"^6.2.0\",\n    \"@codemirror/legacy-modes\": \"^6.3.0\",\n    \"codemirror\": \"^6.0.0\",\n    \"@lezer/common\": \"^1.1.0\",\n    \"@lezer/highlight\": \"^1.1.0\",\n    \"jszip\": \"^3.10.0\",\n    \"markdown-it\": \"^14.0.0\",\n    \"markdown-it-sub\": \"^2.0.0\",\n    \"markdown-it-sup\": \"^2.0.0\",\n    \"mime\": \"^2.3.1\",\n    \"mold-template\": \"^2.0.1\"\n  },\n  \"devDependencies\": {\n    \"jsdom\": \"^20.0.0\",\n    \"promise\": \"^8.0.1\"\n  },\n  \"scripts\": {\n    \"test\": \"make test\"\n  }\n}\n"
        },
        {
          "name": "pdf",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}