{
  "metadata": {
    "timestamp": 1736563446684,
    "page": 15,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "typescript-cheatsheets/react",
      "stars": 45726,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".all-contributorsrc",
          "type": "blob",
          "size": 6.4873046875,
          "content": "{\n  \"files\": [\n    \"CONTRIBUTORS.md\",\n    \"README.md\"\n  ],\n  \"imageSize\": 100,\n  \"commit\": true,\n  \"commitConvention\": \"angular\",\n  \"contributors\": [\n    {\n      \"login\": \"ferdaber\",\n      \"name\": \"Ferdy Budhidharma\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/12239873?v=4\",\n      \"profile\": \"https://github.com/ferdaber\",\n      \"contributions\": [\n        \"review\",\n        \"maintenance\",\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"sw-yx\",\n      \"name\": \"swyx\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/6764957?v=4\",\n      \"profile\": \"https://twitter.com/swyx\",\n      \"contributions\": [\n        \"ideas\",\n        \"review\",\n        \"maintenance\",\n        \"content\",\n        \"question\"\n      ]\n    },\n    {\n      \"login\": \"eps1lon\",\n      \"name\": \"Sebastian Silbermann\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/12292047?v=4\",\n      \"profile\": \"https://github.com/eps1lon\",\n      \"contributions\": [\n        \"review\",\n        \"maintenance\",\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"Attrash-Islam\",\n      \"name\": \"Islam Attrash\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/7091543?v=4\",\n      \"profile\": \"https://www.linkedin.com/in/islam-attrash-46703a94/\",\n      \"contributions\": [\n        \"maintenance\",\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"stephenkoo\",\n      \"name\": \"Stephen Koo\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/18624246?v=4\",\n      \"profile\": \"https://stephenkoo.github.io/\",\n      \"contributions\": [\n        \"question\",\n        \"example\"\n      ]\n    },\n    {\n      \"login\": \"andreasgruenh\",\n      \"name\": \"Andreas\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/12122390?v=4\",\n      \"profile\": \"https://github.com/andreasgruenh\",\n      \"contributions\": [\n        \"code\",\n        \"doc\",\n        \"infra\"\n      ]\n    },\n    {\n      \"login\": \"arvindcheenu\",\n      \"name\": \"Arvind Srinivasan\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/13925213?v=4\",\n      \"profile\": \"https://github.com/arvindcheenu\",\n      \"contributions\": [\n        \"code\",\n        \"content\",\n        \"doc\",\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"williamrjribeiro\",\n      \"name\": \"William R. J. Ribeiro\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/1503499?v=4\",\n      \"profile\": \"http://www.williamrjribeiro.com\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"alexandrudanpop\",\n      \"name\": \"Alexandru-Dan Pop\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/15979292?v=4\",\n      \"profile\": \"https://alexandrudanpop.dev/\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"mastorm\",\n      \"name\": \"Mathias Storm\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/10759336?v=4\",\n      \"profile\": \"https://github.com/mastorm\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"dance2die\",\n      \"name\": \"Sung M. Kim\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/8465237?v=4\",\n      \"profile\": \"https://twitter.com/dance2die\",\n      \"contributions\": [\n        \"doc\",\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"ryota-murakami\",\n      \"name\": \"Ryota Murakami\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/5501268?v=4\",\n      \"profile\": \"https://ryota-murakami.github.io/\",\n      \"contributions\": [\n        \"example\",\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"arpi17\",\n      \"name\": \"Árpád Illyés\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/13800404?v=4\",\n      \"profile\": \"https://github.com/arpi17\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"xamgore\",\n      \"name\": \"Igor Strebezhev\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/4586392?v=4\",\n      \"profile\": \"https://twitter.com/xamgore\",\n      \"contributions\": [\n        \"ideas\",\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"dwjohnston\",\n      \"name\": \"David Johnston\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/2467377?v=4\",\n      \"profile\": \"https://geoplanets.io\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"kripod\",\n      \"name\": \"Kristóf Poduszló\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/14854048?v=4\",\n      \"profile\": \"https://github.com/kripod\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"glaschu1\",\n      \"name\": \"james glasgow\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/10838852?v=4\",\n      \"profile\": \"http://www.novusstudio.com/\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"Winner95\",\n      \"name\": \"Ivan\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/13730032?v=4\",\n      \"profile\": \"https://www.linkedin.com/in/iigrekov/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"selrond\",\n      \"name\": \"Sebastian Andil\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/6603389?v=4\",\n      \"profile\": \"http://sebastianandil.com\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"adnanhusain15\",\n      \"name\": \"Adnan Husain\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/36721076?v=4\",\n      \"profile\": \"https://github.com/adnanhusain15\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"artola\",\n      \"name\": \"martin\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/11500763?v=4\",\n      \"profile\": \"https://github.com/artola\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"filiptammergard\",\n      \"name\": \"Filip Tammergård\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/44197016?v=4\",\n      \"profile\": \"https://tammergard.se\",\n      \"contributions\": [\n        \"doc\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"jsjoeio\",\n      \"name\": \"Joe Previte\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/3806031?v=4\",\n      \"profile\": \"https://englishbyte.com\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"sasirura\",\n      \"name\": \"Sasiru Ravihansa\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/42542164?v=4\",\n      \"profile\": \"https://github.com/sasirura\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    }\n  ],\n  \"contributorsPerLine\": 7,\n  \"projectName\": \"react\",\n  \"projectOwner\": \"typescript-cheatsheets\",\n  \"repoType\": \"github\",\n  \"repoHost\": \"https://github.com\",\n  \"skipCi\": true,\n  \"commitType\": \"docs\"\n}\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0205078125,
          "content": "*/node_modules\n*.log\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.0654296875,
          "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.test\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# Idea / Jetbrains IDE\n.idea\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.pnp.*\n\n# Miscellaneous\n.history\n.DS_Store\n\n# Docusaurus files\nwebsite/build\nwebsite/.docusaurus\nwebsite/.cache-loader\n\n# copy of contributors for the website\nwebsite/src/pages/contributing.md\nwebsite/src/pages/contributors.md\n\n# Local Netlify folder\n.netlify\n\n# Lock-files\npackage-lock.json\nyarn.lock\n"
        },
        {
          "name": ".husky",
          "type": "tree",
          "content": null
        },
        {
          "name": ".nvmrc",
          "type": "blob",
          "size": 0.0048828125,
          "content": "20.x\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.5234375,
          "content": "# Let's Contribute Together! 🚀\n\nWe appreciate your interest in contributing to this project. Here are some core principles and a simplified project structure to make your contribution process more efficient and effective:\n\n## 📋 Core Principles\n\n1. **We're All About Cheatsheets**: Our main goal is to provide concise and easy-to-use cheatsheets. All code examples should be simple, easily searchable, and ready for copy-and-paste.\n\n2. **Collapsible Explanations**: Keep explanations short and sweet, limited to 1-2 sentences. For more in-depth explanations, use `details` tags to provide additional context.\n\n3. **React + TypeScript Only**: We focus on React and TypeScript. React's ecosystem is vast, so we won't cover everything. If you think there's a need, consider maintaining separate lists for specialized topics, like React + Apollo GraphQL. We also don't aim to convince people to use TypeScript; we're here to assist those who have already chosen to use it.\n\n4. **Add TypeScript Playground Links**: For code examples longer than four lines, include a link to the TypeScript Playground. Use the default TypeScript Playground options for the best experience.\n\nYour contributions will help countless developers, including your future self! 🙌\n\n## 📁 Project Structure\n\n- **Content in `/docs`**: All the content resides here.\n  - The content in `/docs/basic` is compiled into `README.md` to ensure that it's easy to read on GitHub.\n- **`/website` Folder**: This part consumes the content in `/docs`. It's a Docusaurus 2 site and includes Algolia search. A big thanks to both the Docusaurus and Algolia teams for their support!\n\nThe website is deployed on Netlify, under swyx's personal account.\n\nTo run the docsite locally, follow these steps:\n\n```bash\nyarn # Install dependencies\n## Ensure dependencies are also installed in /website\ncd website && yarn start\n```\n\nHere's an example of the expected output when the development server starts successfully:\n\n```\nyarn run v1.22.4\nwarning package.json: No license field\n$ docusaurus start\nStarting the development server...\n\n✔ Client\n  Compiled successfully in 9.61s\n\nℹ ｢wds｣: Project is running at http://localhost:3000/\nℹ ｢wds｣: webpack output is served from /\nℹ ｢wds｣: Content not from webpack is served from /Users/wanshawn/Work/react-typescript-cheatsheet/website\nℹ ｢wds｣: 404s will fallback to /index.html\n\n✔ Client\n  Compiled successfully in 116.41ms\n```\n\nLet's work together to enhance this resource and make it even more valuable to the developer community! 🌟👩‍💻👨‍💻\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 10.5234375,
          "content": "## Contributors\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ferdaber\"><img src=\"https://avatars2.githubusercontent.com/u/12239873?v=4?s=100\" width=\"100px;\" alt=\"Ferdy Budhidharma\"/><br /><sub><b>Ferdy Budhidharma</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/pulls?q=is%3Apr+reviewed-by%3Aferdaber\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#maintenance-ferdaber\" title=\"Maintenance\">🚧</a> <a href=\"#content-ferdaber\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/swyx\"><img src=\"https://avatars1.githubusercontent.com/u/6764957?v=4?s=100\" width=\"100px;\" alt=\"swyx\"/><br /><sub><b>swyx</b></sub></a><br /><a href=\"#ideas-sw-yx\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/typescript-cheatsheets/react/pulls?q=is%3Apr+reviewed-by%3Asw-yx\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#maintenance-sw-yx\" title=\"Maintenance\">🚧</a> <a href=\"#content-sw-yx\" title=\"Content\">🖋</a> <a href=\"#question-sw-yx\" title=\"Answering Questions\">💬</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/eps1lon\"><img src=\"https://avatars3.githubusercontent.com/u/12292047?v=4?s=100\" width=\"100px;\" alt=\"Sebastian Silbermann\"/><br /><sub><b>Sebastian Silbermann</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/pulls?q=is%3Apr+reviewed-by%3Aeps1lon\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#maintenance-eps1lon\" title=\"Maintenance\">🚧</a> <a href=\"#content-eps1lon\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/islam-attrash-46703a94/\"><img src=\"https://avatars0.githubusercontent.com/u/7091543?v=4?s=100\" width=\"100px;\" alt=\"Islam Attrash\"/><br /><sub><b>Islam Attrash</b></sub></a><br /><a href=\"#maintenance-Attrash-Islam\" title=\"Maintenance\">🚧</a> <a href=\"#content-Attrash-Islam\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stephenkoo.github.io/\"><img src=\"https://avatars2.githubusercontent.com/u/18624246?v=4?s=100\" width=\"100px;\" alt=\"Stephen Koo\"/><br /><sub><b>Stephen Koo</b></sub></a><br /><a href=\"#question-stephenkoo\" title=\"Answering Questions\">💬</a> <a href=\"#example-stephenkoo\" title=\"Examples\">💡</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/andreasgruenh\"><img src=\"https://avatars2.githubusercontent.com/u/12122390?v=4?s=100\" width=\"100px;\" alt=\"Andreas\"/><br /><sub><b>Andreas</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/commits?author=andreasgruenh\" title=\"Code\">💻</a> <a href=\"https://github.com/typescript-cheatsheets/react/commits?author=andreasgruenh\" title=\"Documentation\">📖</a> <a href=\"#infra-andreasgruenh\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/arvindcheenu\"><img src=\"https://avatars2.githubusercontent.com/u/13925213?v=4?s=100\" width=\"100px;\" alt=\"Arvind Srinivasan\"/><br /><sub><b>Arvind Srinivasan</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/commits?author=arvindcheenu\" title=\"Code\">💻</a> <a href=\"#content-arvindcheenu\" title=\"Content\">🖋</a> <a href=\"https://github.com/typescript-cheatsheets/react/commits?author=arvindcheenu\" title=\"Documentation\">📖</a> <a href=\"#maintenance-arvindcheenu\" title=\"Maintenance\">🚧</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.williamrjribeiro.com\"><img src=\"https://avatars2.githubusercontent.com/u/1503499?v=4?s=100\" width=\"100px;\" alt=\"William R. J. Ribeiro\"/><br /><sub><b>William R. J. Ribeiro</b></sub></a><br /><a href=\"#ideas-williamrjribeiro\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://alexandrudanpop.dev/\"><img src=\"https://avatars0.githubusercontent.com/u/15979292?v=4?s=100\" width=\"100px;\" alt=\"Alexandru-Dan Pop\"/><br /><sub><b>Alexandru-Dan Pop</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/commits?author=alexandrudanpop\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mastorm\"><img src=\"https://avatars1.githubusercontent.com/u/10759336?v=4?s=100\" width=\"100px;\" alt=\"Mathias Storm\"/><br /><sub><b>Mathias Storm</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/commits?author=mastorm\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/dance2die\"><img src=\"https://avatars1.githubusercontent.com/u/8465237?v=4?s=100\" width=\"100px;\" alt=\"Sung M. Kim\"/><br /><sub><b>Sung M. Kim</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/commits?author=dance2die\" title=\"Documentation\">📖</a> <a href=\"#ideas-dance2die\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ryota-murakami.github.io/\"><img src=\"https://avatars2.githubusercontent.com/u/5501268?v=4?s=100\" width=\"100px;\" alt=\"Ryota Murakami\"/><br /><sub><b>Ryota Murakami</b></sub></a><br /><a href=\"#example-ryota-murakami\" title=\"Examples\">💡</a> <a href=\"https://github.com/typescript-cheatsheets/react/commits?author=ryota-murakami\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/arpi17\"><img src=\"https://avatars1.githubusercontent.com/u/13800404?v=4?s=100\" width=\"100px;\" alt=\"Árpád Illyés\"/><br /><sub><b>Árpád Illyés</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/commits?author=arpi17\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/xamgore\"><img src=\"https://avatars3.githubusercontent.com/u/4586392?v=4?s=100\" width=\"100px;\" alt=\"Igor Strebezhev\"/><br /><sub><b>Igor Strebezhev</b></sub></a><br /><a href=\"#ideas-xamgore\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/typescript-cheatsheets/react/commits?author=xamgore\" title=\"Documentation\">📖</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://geoplanets.io\"><img src=\"https://avatars2.githubusercontent.com/u/2467377?v=4?s=100\" width=\"100px;\" alt=\"David Johnston\"/><br /><sub><b>David Johnston</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/commits?author=dwjohnston\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kripod\"><img src=\"https://avatars3.githubusercontent.com/u/14854048?v=4?s=100\" width=\"100px;\" alt=\"Kristóf Poduszló\"/><br /><sub><b>Kristóf Poduszló</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/commits?author=kripod\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.novusstudio.com/\"><img src=\"https://avatars3.githubusercontent.com/u/10838852?v=4?s=100\" width=\"100px;\" alt=\"james glasgow\"/><br /><sub><b>james glasgow</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/commits?author=glaschu1\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/iigrekov/\"><img src=\"https://avatars0.githubusercontent.com/u/13730032?v=4?s=100\" width=\"100px;\" alt=\"Ivan\"/><br /><sub><b>Ivan</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/commits?author=Winner95\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://sebastianandil.com\"><img src=\"https://avatars1.githubusercontent.com/u/6603389?v=4?s=100\" width=\"100px;\" alt=\"Sebastian Andil\"/><br /><sub><b>Sebastian Andil</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/commits?author=selrond\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/adnanhusain15\"><img src=\"https://avatars2.githubusercontent.com/u/36721076?v=4?s=100\" width=\"100px;\" alt=\"Adnan Husain\"/><br /><sub><b>Adnan Husain</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/commits?author=adnanhusain15\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/artola\"><img src=\"https://avatars0.githubusercontent.com/u/11500763?v=4?s=100\" width=\"100px;\" alt=\"martin\"/><br /><sub><b>martin</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/commits?author=artola\" title=\"Documentation\">📖</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://tammergard.se\"><img src=\"https://avatars.githubusercontent.com/u/44197016?v=4?s=100\" width=\"100px;\" alt=\"Filip Tammergård\"/><br /><sub><b>Filip Tammergård</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/commits?author=filiptammergard\" title=\"Documentation\">📖</a> <a href=\"https://github.com/typescript-cheatsheets/react/commits?author=filiptammergard\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://englishbyte.com\"><img src=\"https://avatars.githubusercontent.com/u/3806031?v=4?s=100\" width=\"100px;\" alt=\"Joe Previte\"/><br /><sub><b>Joe Previte</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/commits?author=jsjoeio\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/sasirura\"><img src=\"https://avatars.githubusercontent.com/u/42542164?v=4?s=100\" width=\"100px;\" alt=\"Sasiru Ravihansa\"/><br /><sub><b>Sasiru Ravihansa</b></sub></a><br /><a href=\"https://github.com/typescript-cheatsheets/react/commits?author=sasirura\" title=\"Documentation\">📖</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2018 shawn wang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 120.73046875,
          "content": "# React TypeScript Cheatsheet\n\nCheatsheet for using React with TypeScript.\n\n---\n\n<a href=\"https://github.com/typescript-cheatsheets/react/issues/81\">\n  <img\n    height=\"90\"\n    width=\"90\"\n    alt=\"react + ts logo\"\n    src=\"https://user-images.githubusercontent.com/84442212/194379444-02e5ec69-5e6c-4100-bd7a-c31d628af29c.png\"\n    align=\"left\"\n  />\n</a>\n\n[**Web docs**](https://react-typescript-cheatsheet.netlify.app/docs/basic/setup) |\n[Contribute!](https://github.com/typescript-cheatsheets/react/blob/main/CONTRIBUTING.md) |\n[Ask!](https://github.com/typescript-cheatsheets/react/issues/new/choose)\n\n:wave: This repo is maintained by [@eps1lon](https://twitter.com/sebsilbermann) and [@filiptammergard](https://twitter.com/tammergard). We're so happy you want to try out React with TypeScript! If you see anything wrong or missing, please [file an issue](https://github.com/typescript-cheatsheets/react/issues/new/choose)! :+1:\n\n---\n\n[![All Contributors](https://img.shields.io/github/contributors/typescript-cheatsheets/react-typescript-cheatsheet?color=orange&style=flat-square)](/CONTRIBUTORS.md) | [![Discord](https://img.shields.io/discord/508357248330760243.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)](https://discord.gg/wTGS5z9)\n\n- [The Basic Cheatsheet](https://react-typescript-cheatsheet.netlify.app/docs/basic/setup) is focused on helping React devs just start using TS in React **apps**\n  - Focus on opinionated best practices, copy+pastable examples.\n  - Explains some basic TS types usage and setup along the way.\n  - Answers the most Frequently Asked Questions.\n  - Does not cover generic type logic in detail. Instead we prefer to teach simple troubleshooting techniques for newbies.\n  - The goal is to get effective with TS without learning _too much_ TS.\n- [The Advanced Cheatsheet](https://react-typescript-cheatsheet.netlify.app/docs/advanced) helps show and explain advanced usage of generic types for people writing reusable type utilities/functions/render prop/higher order components and TS+React **libraries**.\n  - It also has miscellaneous tips and tricks for pro users.\n  - Advice for contributing to DefinitelyTyped.\n  - The goal is to take _full advantage_ of TypeScript.\n- [The Migrating Cheatsheet](https://react-typescript-cheatsheet.netlify.app/docs/migration) helps collate advice for incrementally migrating large codebases from JS or Flow, **from people who have done it**.\n  - We do not try to convince people to switch, only to help people who have already decided.\n  - ⚠️This is a new cheatsheet, all assistance is welcome.\n- [The HOC Cheatsheet](https://react-typescript-cheatsheet.netlify.app/docs/hoc) specifically teaches people to write HOCs with examples.\n  - Familiarity with [Generics](https://www.typescriptlang.org/docs/handbook/2/generics.html) is necessary.\n  - ⚠️This is the newest cheatsheet, all assistance is welcome.\n\n---\n\n## Basic Cheatsheet\n\n### Basic Cheatsheet Table of Contents\n\n<details>\n\n<summary><b>Expand Table of Contents</b></summary>\n\n- [React TypeScript Cheatsheet](#react-typescript-cheatsheet)\n  - [Basic Cheatsheet](#basic-cheatsheet)\n    - [Basic Cheatsheet Table of Contents](#basic-cheatsheet-table-of-contents)\n    - [Section 1: Setup](#section-1-setup)\n      - [Prerequisites](#prerequisites)\n      - [React and TypeScript starter kits](#react-and-typescript-starter-kits)\n      - [Try React and TypeScript online](#try-react-and-typescript-online)\n    - [Section 2: Getting Started](#section-2-getting-started)\n      - [Function Components](#function-components)\n      - [Hooks](#hooks)\n      - [useState](#usestate)\n      - [useCallback](#usecallback)\n      - [useReducer](#usereducer)\n      - [useEffect / useLayoutEffect](#useeffect--uselayouteffect)\n      - [useRef](#useref)\n        - [Option 1: DOM element ref](#option-1-dom-element-ref)\n        - [Option 2: Mutable value ref](#option-2-mutable-value-ref)\n        - [See also](#see-also)\n      - [useImperativeHandle](#useimperativehandle)\n        - [See also:](#see-also-1)\n      - [Custom Hooks](#custom-hooks)\n      - [More Hooks + TypeScript reading:](#more-hooks--typescript-reading)\n      - [Example React Hooks + TypeScript Libraries:](#example-react-hooks--typescript-libraries)\n      - [Class Components](#class-components)\n      - [Typing getDerivedStateFromProps](#typing-getderivedstatefromprops)\n      - [You May Not Need `defaultProps`](#you-may-not-need-defaultprops)\n      - [Typing `defaultProps`](#typing-defaultprops)\n      - [Consuming Props of a Component with defaultProps](#consuming-props-of-a-component-with-defaultprops)\n        - [Problem Statement](#problem-statement)\n        - [Solution](#solution)\n      - [Misc Discussions and Knowledge](#misc-discussions-and-knowledge)\n      - [Typing Component Props](#typing-component-props)\n      - [Basic Prop Types Examples](#basic-prop-types-examples)\n        - [`object` as the non-primitive type](#object-as-the-non-primitive-type)\n        - [Empty interface, `{}` and `Object`](#empty-interface--and-object)\n      - [Useful React Prop Type Examples](#useful-react-prop-type-examples)\n      - [Types or Interfaces?](#types-or-interfaces)\n        - [TL;DR](#tldr)\n        - [More Advice](#more-advice)\n        - [Useful table for Types vs Interfaces](#useful-table-for-types-vs-interfaces)\n  - [getDerivedStateFromProps](#getderivedstatefromprops)\n    - [Forms and Events](#forms-and-events)\n      - [List of event types](#list-of-event-types)\n    - [Context](#context)\n    - [Basic example](#basic-example)\n    - [Without default context value](#without-default-context-value)\n      - [Type assertion as an alternative](#type-assertion-as-an-alternative)\n    - [forwardRef/createRef](#forwardrefcreateref)\n    - [Generic forwardRefs](#generic-forwardrefs)\n      - [Option 1 - Wrapper component](#option-1---wrapper-component)\n      - [Option 2 - Redeclare forwardRef](#option-2---redeclare-forwardref)\n      - [Option 3 - Call signature](#option-3---call-signature)\n    - [More Info](#more-info)\n    - [Portals](#portals)\n    - [Error Boundaries](#error-boundaries)\n      - [Option 1: Using react-error-boundary](#option-1-using-react-error-boundary)\n      - [Option 2: Writing your custom error boundary component](#option-2-writing-your-custom-error-boundary-component)\n    - [Concurrent React/React Suspense](#concurrent-reactreact-suspense)\n    - [Troubleshooting Handbook: Types](#troubleshooting-handbook-types)\n      - [Union Types and Type Guarding](#union-types-and-type-guarding)\n      - [Optional Types](#optional-types)\n      - [Enum Types](#enum-types)\n      - [Type Assertion](#type-assertion)\n      - [Simulating Nominal Types](#simulating-nominal-types)\n      - [Intersection Types](#intersection-types)\n      - [Union Types](#union-types)\n      - [Overloading Function Types](#overloading-function-types)\n      - [Using Inferred Types](#using-inferred-types)\n      - [Using Partial Types](#using-partial-types)\n      - [The Types I need weren't exported!](#the-types-i-need-werent-exported)\n      - [The Types I need don't exist!](#the-types-i-need-dont-exist)\n        - [Slapping `any` on everything](#slapping-any-on-everything)\n        - [Autogenerate types](#autogenerate-types)\n        - [Typing Exported Hooks](#typing-exported-hooks)\n        - [Typing Exported Components](#typing-exported-components)\n      - [Frequent Known Problems with TypeScript](#frequent-known-problems-with-typescript)\n        - [TypeScript doesn't narrow after an object element null check](#typescript-doesnt-narrow-after-an-object-element-null-check)\n        - [TypeScript doesn't let you restrict the type of children](#typescript-doesnt-let-you-restrict-the-type-of-children)\n    - [Troubleshooting Handbook: Operators](#troubleshooting-handbook-operators)\n    - [Troubleshooting Handbook: Utilities](#troubleshooting-handbook-utilities)\n    - [Troubleshooting Handbook: tsconfig.json](#troubleshooting-handbook-tsconfigjson)\n    - [Troubleshooting Handbook: Fixing bugs in official typings](#troubleshooting-handbook-fixing-bugs-in-official-typings)\n    - [Troubleshooting Handbook: Globals, Images and other non-TS files](#troubleshooting-handbook-globals-images-and-other-non-ts-files)\n    - [Editor Tooling and Integration](#editor-tooling-and-integration)\n    - [Linting](#linting)\n    - [Other React + TypeScript resources](#other-react--typescript-resources)\n    - [Recommended React + TypeScript talks](#recommended-react--typescript-talks)\n    - [Time to Really Learn TypeScript](#time-to-really-learn-typescript)\n    - [Example App](#example-app)\n  - [My question isn't answered here!](#my-question-isnt-answered-here)\n  - [Contributors](#contributors)\n\n</details>\n\n<!--START-SECTION:setup-->\n\n### Section 1: Setup\n\n#### Prerequisites\n\nYou can use this cheatsheet for reference at any skill level, but basic understanding of React and TypeScript is assumed. Here is a list of prerequisites:\n\n- Basic understanding of [React](https://react.dev/).\n- Familiarity with [TypeScript Basics](https://www.typescriptlang.org/docs/handbook/2/basic-types.html) and [Everyday Types](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html).\n\nIn the cheatsheet we assume you are using the latest versions of React and TypeScript.\n\n#### React and TypeScript starter kits\n\nReact has documentation for [how to start a new React project](https://react.dev/learn/start-a-new-react-project) with some of the most popular frameworks. Here's how to start them with TypeScript:\n\n- [Next.js](https://nextjs.org/docs/basic-features/typescript): `npx create-next-app@latest --ts`\n- [Remix](https://remix.run/docs/tutorials/blog): `npx create-remix@latest`\n- [Gatsby](https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/): `npm init gatsby --ts`\n- [Expo](https://docs.expo.dev/guides/typescript/): `npx create-expo-app -t with-typescript`\n\n#### Try React and TypeScript online\n\nThere are some tools that let you run React and TypeScript online, which can be helpful for debugging or making sharable reproductions.\n\n- [TypeScript playground](https://www.typescriptlang.org/play?target=8&jsx=4#code/JYWwDg9gTgLgBAbzgVwM4FMDKMCGN0A0KGAogGZnoDG8AvnGVBCHAORTo42sDcAsAChB6AB6RYcKhAB2qeAGEIyafihwAvHAAUASg0A+RILiSZcuAG0pymEQwxFNgLobiWXPi0AGHfyECTNHRyShotXQMjAJM4ABMIKmQQdBUAOhhgGAAbdFcAAwBNJUks4CoAa3RYuAASBGsVegzk1Dy-E1pfQWM4DhhkKGltHpMAHn0RmNGwfSLkErLK6vqlRrhm9FRRgHoZybGAI2QYGBk4GXlSivUECPVDe0cVLQb4AGo4AEYdWgnomJil0WcGS+zgOyOJxkfwBOxhcC6AlogiAA)\n- [StackBlitz](https://stackblitz.com/fork/react-ts)\n- [CodeSandbox](https://ts.react.new/)\n\n<!--END-SECTION:setup-->\n\n### Section 2: Getting Started\n\n<!--START-SECTION:function-components-->\n\n#### Function Components\n\nThese can be written as normal functions that take a `props` argument and return a JSX element.\n\n```tsx\n// Declaring type of props - see \"Typing Component Props\" for more examples\ntype AppProps = {\n  message: string;\n}; /* use `interface` if exporting so that consumers can extend */\n\n// Easiest way to declare a Function Component; return type is inferred.\nconst App = ({ message }: AppProps) => <div>{message}</div>;\n\n// You can choose to annotate the return type so an error is raised if you accidentally return some other type\nconst App = ({ message }: AppProps): React.JSX.Element => <div>{message}</div>;\n\n// You can also inline the type declaration; eliminates naming the prop types, but looks repetitive\nconst App = ({ message }: { message: string }) => <div>{message}</div>;\n\n// Alternatively, you can use `React.FunctionComponent` (or `React.FC`), if you prefer.\n// With latest React types and TypeScript 5.1. it's mostly a stylistic choice, otherwise discouraged.\nconst App: React.FunctionComponent<{ message: string }> = ({ message }) => (\n  <div>{message}</div>\n);\n// or\nconst App: React.FC<AppProps> = ({ message }) => <div>{message}</div>;\n```\n\n> Tip: You might use [Paul Shen's VS Code Extension](https://marketplace.visualstudio.com/items?itemName=paulshen.paul-typescript-toolkit) to automate the type destructure declaration (incl a [keyboard shortcut](https://twitter.com/_paulshen/status/1392915279466745857?s=20)).\n\n<details>\n\n<summary><b>Why is <code>React.FC</code> not needed? What about <code>React.FunctionComponent</code>/<code>React.VoidFunctionComponent</code>?</b></summary>\n\nYou may see this in many React+TypeScript codebases:\n\n```tsx\nconst App: React.FunctionComponent<{ message: string }> = ({ message }) => (\n  <div>{message}</div>\n);\n```\n\nHowever, the general consensus today is that `React.FunctionComponent` (or the shorthand `React.FC`) is not needed. If you're still using React 17 or TypeScript lower than 5.1, it is even [discouraged](https://github.com/facebook/create-react-app/pull/8177). This is a nuanced opinion of course, but if you agree and want to remove `React.FC` from your codebase, you can use [this jscodeshift codemod](https://github.com/gndelia/codemod-replace-react-fc-typescript).\n\nSome differences from the \"normal function\" version:\n\n- `React.FunctionComponent` is explicit about the return type, while the normal function version is implicit (or else needs additional annotation).\n\n- It provides typechecking and autocomplete for static properties like `displayName`, `propTypes`, and `defaultProps`.\n\n  - Note that there are some known issues using `defaultProps` with `React.FunctionComponent`. See [this issue for details](https://github.com/typescript-cheatsheets/react/issues/87). We maintain a separate `defaultProps` section you can also look up.\n\n- Before the [React 18 type updates](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/56210), `React.FunctionComponent` provided an implicit definition of `children` (see below), which was heavily debated and is one of the reasons [`React.FC` was removed from the Create React App TypeScript template](https://github.com/facebook/create-react-app/pull/8177).\n\n```tsx\n// before React 18 types\nconst Title: React.FunctionComponent<{ title: string }> = ({\n  children,\n  title,\n}) => <div title={title}>{children}</div>;\n```\n\n<details>\n<summary>(Deprecated)<b>Using <code>React.VoidFunctionComponent</code> or <code>React.VFC</code> instead</b></summary>\n\nIn [@types/react 16.9.48](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46643), the `React.VoidFunctionComponent` or `React.VFC` type was added for typing `children` explicitly.\nHowever, please be aware that `React.VFC` and `React.VoidFunctionComponent` were deprecated in React 18 (https://github.com/DefinitelyTyped/DefinitelyTyped/pull/59882), so this interim solution is no longer necessary or recommended in React 18+.\n\nPlease use regular function components or `React.FC` instead.\n\n```ts\ntype Props = { foo: string };\n\n// OK now, in future, error\nconst FunctionComponent: React.FunctionComponent<Props> = ({\n  foo,\n  children,\n}: Props) => {\n  return (\n    <div>\n      {foo} {children}\n    </div>\n  ); // OK\n};\n\n// Error now, in future, deprecated\nconst VoidFunctionComponent: React.VoidFunctionComponent<Props> = ({\n  foo,\n  children,\n}) => {\n  return (\n    <div>\n      {foo}\n      {children}\n    </div>\n  );\n};\n```\n\n</details>\n\n- _In the future_, it may automatically mark props as `readonly`, though that's a moot point if the props object is destructured in the parameter list.\n\nIn most cases it makes very little difference which syntax is used, but you may prefer the more explicit nature of `React.FunctionComponent`.\n\n</details>\n\n<!--END-SECTION:function-components-->\n\n<!--START-SECTION:hooks-->\n\n#### Hooks\n\nHooks are [supported in `@types/react` from v16.8 up](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a05cc538a42243c632f054e42eab483ebf1560ab/types/react/index.d.ts#L800-L1031).\n\n#### useState\n\nType inference works very well for simple values:\n\n```tsx\nconst [state, setState] = useState(false);\n// `state` is inferred to be a boolean\n// `setState` only takes booleans\n```\n\nSee also the [Using Inferred Types](https://react-typescript-cheatsheet.netlify.app/docs/basic/troubleshooting/types/#using-inferred-types) section if you need to use a complex type that you've relied on inference for.\n\nHowever, many hooks are initialized with null-ish default values, and you may wonder how to provide types. Explicitly declare the type, and use a union type:\n\n```tsx\nconst [user, setUser] = useState<User | null>(null);\n\n// later...\nsetUser(newUser);\n```\n\nYou can also use type assertions if a state is initialized soon after setup and always has a value after:\n\n```tsx\nconst [user, setUser] = useState<User>({} as User);\n\n// later...\nsetUser(newUser);\n```\n\nThis temporarily \"lies\" to the TypeScript compiler that `{}` is of type `User`. You should follow up by setting the `user` state — if you don't, the rest of your code may rely on the fact that `user` is of type `User` and that may lead to runtime errors.\n\n#### useCallback\n\nYou can type the `useCallback` just like any other function.\n\n```ts\nconst memoizedCallback = useCallback(\n  (param1: string, param2: number) => {\n    console.log(param1, param2)\n    return { ok: true }\n  },\n  [...],\n);\n/**\n * VSCode will show the following type:\n * const memoizedCallback:\n *  (param1: string, param2: number) => { ok: boolean }\n */\n```\n\nNote that for React < 18, the function signature of `useCallback` typed arguments as `any[]` by default:\n\n```ts\nfunction useCallback<T extends (...args: any[]) => any>(\n  callback: T,\n  deps: DependencyList\n): T;\n```\n\nIn React >= 18, the function signature of `useCallback` changed to the following:\n\n```ts\nfunction useCallback<T extends Function>(callback: T, deps: DependencyList): T;\n```\n\nTherefore, the following code will yield \"`Parameter 'e' implicitly has an 'any' type.`\" error in React >= 18, but not <17.\n\n```ts\n// @ts-expect-error Parameter 'e' implicitly has 'any' type.\nuseCallback((e) => {}, []);\n// Explicit 'any' type.\nuseCallback((e: any) => {}, []);\n```\n\n#### useReducer\n\nYou can use [Discriminated Unions](https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-func.html#discriminated-unions) for reducer actions. Don't forget to define the return type of reducer, otherwise TypeScript will infer it.\n\n```tsx\nimport { useReducer } from \"react\";\n\nconst initialState = { count: 0 };\n\ntype ACTIONTYPE =\n  | { type: \"increment\"; payload: number }\n  | { type: \"decrement\"; payload: string };\n\nfunction reducer(state: typeof initialState, action: ACTIONTYPE) {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + action.payload };\n    case \"decrement\":\n      return { count: state.count - Number(action.payload) };\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: \"decrement\", payload: \"5\" })}>\n        -\n      </button>\n      <button onClick={() => dispatch({ type: \"increment\", payload: 5 })}>\n        +\n      </button>\n    </>\n  );\n}\n```\n\n[View in the TypeScript Playground](https://www.typescriptlang.org/play?#code/LAKFEsFsAcHsCcAuACAVMghgZ2QJQKYYDGKAZvLJMgOTyEnUDcooRsAdliuO+IuBgA2AZUQZE+ZAF5kAbzYBXdogBcyAAwBfZmBCIAntEkBBAMIAVAJIB5AHLmAmgAUAotOShkyAD5zkBozVqHiI6SHxlagAaZGgMfUFYDAATNXYFSAAjfHhNDxAvX1l-Q3wg5PxQ-HDImLiEpNTkLngeAHM8ll1SJRJwDmQ6ZIUiHIAKLnEykqNYUmQePgERMQkY4n4ONTMrO0dXAEo5T2aAdz4iAAtkMY3+9gA6APwj2ROvImxJYPYqmsRqCp3l5BvhEAp4Ow5IplGpJhIHjCUABqTB9DgPeqJFLaYGfLDfCp-CIAoEFEFeOjgyHQ2BKVTNVb4RF05TIAC0yFsGWy8Fu6MeWMaB1x5K8FVIGAUglUwK8iEuFFOyHY+GVLngFD5Bx0Xk0oH13V6myhplZEm1x3JbE4KAA2vD8DFkuAsHFEFcALruAgbB4KAkEYajPlDEY5GKLfhCURTHUnKkQqFjYEAHgAfHLkGb6WpZI6WfTDRSvKnMgpEIgBhxTIJwEQANZSWRjI5SdPIF1u8RXMayZ7lSphEnRWLxbFNagAVmomhF6fZqYA9OXKxxM2KQWWK1WoTW643m63pB2u+7e-3SkEQsPamOGik1FO55p08jl6vdxuKcvv8h4yAmhAA)\n\n<details>\n\n<summary><b>Usage with <code>Reducer</code> from <code>redux</code></b></summary>\n\nIn case you use the [redux](https://github.com/reduxjs/redux) library to write reducer function, It provides a convenient helper of the format `Reducer<State, Action>` which takes care of the return type for you.\n\nSo the above reducer example becomes:\n\n```tsx\nimport { Reducer } from 'redux';\n\nexport function reducer: Reducer<AppState, Action>() {}\n```\n\n</details>\n\n#### useEffect / useLayoutEffect\n\nBoth of `useEffect` and `useLayoutEffect` are used for performing <b>side effects</b> and return an optional cleanup function which means if they don't deal with returning values, no types are necessary. When using `useEffect`, take care not to return anything other than a function or `undefined`, otherwise both TypeScript and React will yell at you. This can be subtle when using arrow functions:\n\n```ts\nfunction DelayedEffect(props: { timerMs: number }) {\n  const { timerMs } = props;\n\n  useEffect(\n    () =>\n      setTimeout(() => {\n        /* do stuff */\n      }, timerMs),\n    [timerMs]\n  );\n  // bad example! setTimeout implicitly returns a number\n  // because the arrow function body isn't wrapped in curly braces\n  return null;\n}\n```\n\n<details>\n<summary><b>Solution to the above example</b></summary>\n\n```tsx\nfunction DelayedEffect(props: { timerMs: number }) {\n  const { timerMs } = props;\n\n  useEffect(() => {\n    setTimeout(() => {\n      /* do stuff */\n    }, timerMs);\n  }, [timerMs]);\n  // better; use the void keyword to make sure you return undefined\n  return null;\n}\n```\n\n</details>\n\n#### useRef\n\nIn TypeScript, `useRef` returns a reference that is either [read-only](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/abd69803c1b710db58d511f4544ec1b70bc9077c/types/react/v16/index.d.ts#L1025-L1039) or [mutable](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/abd69803c1b710db58d511f4544ec1b70bc9077c/types/react/v16/index.d.ts#L1012-L1023), depends on whether your type argument fully covers the initial value or not. Choose one that suits your use case.\n\n##### Option 1: DOM element ref\n\n**[To access a DOM element](https://reactjs.org/docs/refs-and-the-dom.html):** provide only the element type as argument, and use `null` as initial value. In this case, the returned reference will have a read-only `.current` that is managed by React. TypeScript expects you to give this ref to an element's `ref` prop:\n\n```tsx\nfunction Foo() {\n  // - If possible, prefer as specific as possible. For example, HTMLDivElement\n  //   is better than HTMLElement and way better than Element.\n  // - Technical-wise, this returns RefObject<HTMLDivElement>\n  const divRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Note that ref.current may be null. This is expected, because you may\n    // conditionally render the ref-ed element, or you may forget to assign it\n    if (!divRef.current) throw Error(\"divRef is not assigned\");\n\n    // Now divRef.current is sure to be HTMLDivElement\n    doSomethingWith(divRef.current);\n  });\n\n  // Give the ref to an element so React can manage it for you\n  return <div ref={divRef}>etc</div>;\n}\n```\n\nIf you are sure that `divRef.current` will never be null, it is also possible to use the non-null assertion operator `!`:\n\n```tsx\nconst divRef = useRef<HTMLDivElement>(null!);\n// Later... No need to check if it is null\ndoSomethingWith(divRef.current);\n```\n\nNote that you are opting out of type safety here - you will have a runtime error if you forget to assign the ref to an element in the render, or if the ref-ed element is conditionally rendered.\n\n<details>\n<summary><b>Tip: Choosing which <code>HTMLElement</code> to use</b></summary>\n  \nRefs demand specificity - it is not enough to just specify any old `HTMLElement`. If you don't know the name of the element type you need, you can check [lib.dom.ts](https://github.com/microsoft/TypeScript/blob/v3.9.5/lib/lib.dom.d.ts#L19224-L19343) or make an intentional type error and let the language service tell you:\n\n![image](https://user-images.githubusercontent.com/6764957/116914284-1c436380-ac7d-11eb-9150-f52c571c5f07.png)\n\n</details>\n\n##### Option 2: Mutable value ref\n\n**[To have a mutable value](https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables):** provide the type you want, and make sure the initial value fully belongs to that type:\n\n```tsx\nfunction Foo() {\n  // Technical-wise, this returns MutableRefObject<number | null>\n  const intervalRef = useRef<number | null>(null);\n\n  // You manage the ref yourself (that's why it's called MutableRefObject!)\n  useEffect(() => {\n    intervalRef.current = setInterval(...);\n    return () => clearInterval(intervalRef.current);\n  }, []);\n\n  // The ref is not passed to any element's \"ref\" prop\n  return <button onClick={/* clearInterval the ref */}>Cancel timer</button>;\n}\n```\n\n##### See also\n\n- [Related issue by @rajivpunjabi](https://github.com/typescript-cheatsheets/react/issues/388) - [Playground](https://www.typescriptlang.org/play#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcARFDvmQNwCwAUI7hAHarwCCYYcAvHAAUASn4A+OAG9GjOHAD0CBLLnKGcxHABiwKBzgQwMYGxS4WUACbBWAczgwIcSxFwBXEFlYxkxtgDoVTQBJVmBjZAAbOAA3KLcsOAB3YEjogCNE1jc0-zgAGQBPG3tHOAAVQrAsAGVcKGAjOHTCuDdUErhWNgBabLSUVFQsWBNWA2qoX2hA9VU4AGFKXyx0AFk3H3TIxOwCOAB5dIArLHwgpHcoSm84MGJJmFbgdG74ZcsDVkjC2Y01f7yFQsdjvLAEACM-EwVBg-naWD2AB4ABLlNb5GpgZCsACiO083jEgn6kQAhMJ6HMQfpKJCFpE2IkBNg8HCEci0RisTj8VhCTBiaSKVSVIoAaoLnBQuFgFFYvFEikBpkujkMps4FgAB7VfCdLmY7F4gleOFwAByEHg7U63VYfXVg2Go1MhhG0ygf3mAHVUtF6jgYLtwUdTvguta4Bstjs9mGznCpVcbvB7u7YM90B8vj9vYgLkDqWxaeCAEzQ1n4eHDTnoo2801EknqykyObii5SmpnNifA5GMZmCzWOwOJwudwC3xjKUyiLROKRBLJf3NLJO9KanV64xj0koVifQ08k38s1Sv0DJZBxIx5DbRGhk6J5Nua5mu4PEZPOAvSNgsgnxsHmXZzIgRZyDSYIEAAzJWsI1k+BCovWp58gKcAAD5qmkQqtqKHbyCexoYRecw7IQugcAs76ptCdIQv4KZmoRcjyMRaGkU28A4aSKiUXAwwgpYtEfrcAh0mWzF0ax7bsZx3Lceetx8eqAlYPAMAABa6KJskSXAdKwTJ4kwGxCjyKy-bfK05SrDA8mWVagHAbZeScOY0CjqUE6uOgqDaRAOSfKqOYgb8KiMaZ9GSeCEIMkyMVyUwRHWYc7nSvAgUQEk6AjMQXpReWyWGdFLHeBZHEuTCQEZT8xVwaV8BxZCzUWZQMDvuMghBHASJVnCWhTLYApiH1chIqgxpGeCfCSIxAC+Yj3o+8YvvgSLyNNOLjeBGhTTNdLzVJy3reGMBbTtrB7RoB3XbNBAneCsHLatcbPhdV3GrdB1WYhw3IKNZq-W2DCLYRO7QPAljgsgORcDwVJAA)\n- [Example from Stefan Baumgartner](https://fettblog.eu/typescript-react/hooks/#useref) - [Playground](https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgIilQ3wFgAoCzAVwDsNgJa4AVJADxgElaxqYA6sBgALAGIQ01AM4AhfjCYAKAJRwA3hThwA9DrjBaw4CgA2waUjgB3YSLi1qp0wBo4AI35wYSZ6wCeYEgAymhQwGDw1lYoRHCmEBAA1oYA5nCY0HAozAASLACyADI8fDAAoqZIIEi0MFpwaEzS8IZllXAAvIjEMAB0MkjImAA8+cWl-JXVtTAAfEqOzioA3A1NtC1wTPIwirQAwuZoSV1wql1zGg3aenAt4RgOTqaNIkgn0g5ISAAmcDJvBA3h9TsBMAZeFNXjl-lIoEQ6nAOBZ+jddPpPPAmGgrPDEfAUS1pG5hAYvhAITBAlZxiUoRUqjU6m5RIDhOi7iIUF9RFYaqIIP9MlJpABCOCAUHJ0eDzm1oXAAGSKyHtUx9fGzNSacjaPWq6Ea6gI2Z9EUyVRrXV6gC+DRtVu0RBgxuYSnRIzm6O06h0ACpIdlfr9jExSQyOkxTP5GjkPFZBv9bKIDYSmbNpH04ABNFD+CV+nR2636kby+BETCddTlyo27w0zr4HycfC6L0lvUjLH7baHY5Jas7BRMI7AE42uYSUXed6pkY6HtMDulnQruCrCg2oA)\n\n#### useImperativeHandle\n\nBased on this [Stackoverflow answer](https://stackoverflow.com/a/69292925/5415299):\n\n```tsx\n// Countdown.tsx\n\n// Define the handle types which will be passed to the forwardRef\nexport type CountdownHandle = {\n  start: () => void;\n};\n\ntype CountdownProps = {};\n\nconst Countdown = forwardRef<CountdownHandle, CountdownProps>((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    // start() has type inference here\n    start() {\n      alert(\"Start\");\n    },\n  }));\n\n  return <div>Countdown</div>;\n});\n```\n\n```tsx\n// The component uses the Countdown component\n\nimport Countdown, { CountdownHandle } from \"./Countdown.tsx\";\n\nfunction App() {\n  const countdownEl = useRef<CountdownHandle>(null);\n\n  useEffect(() => {\n    if (countdownEl.current) {\n      // start() has type inference here as well\n      countdownEl.current.start();\n    }\n  }, []);\n\n  return <Countdown ref={countdownEl} />;\n}\n```\n\n##### See also:\n\n- [Using ForwardRefRenderFunction](https://stackoverflow.com/a/62258685/5415299)\n\n#### Custom Hooks\n\nIf you are returning an array in your Custom Hook, you will want to avoid type inference as TypeScript will infer a union type (when you actually want different types in each position of the array). Instead, use [TS 3.4 const assertions](https://devblogs.microsoft.com/typescript/announcing-typescript-3-4/#const-assertions):\n\n```tsx\nimport { useState } from \"react\";\n\nexport function useLoading() {\n  const [isLoading, setState] = useState(false);\n  const load = (aPromise: Promise<any>) => {\n    setState(true);\n    return aPromise.finally(() => setState(false));\n  };\n  return [isLoading, load] as const; // infers [boolean, typeof load] instead of (boolean | typeof load)[]\n}\n```\n\n[View in the TypeScript Playground](https://www.typescriptlang.org/play/?target=5&jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCpAD0ljkwFcA7DYCZuRgZyQBkIKACbBmAcwAUASjgBvCnDhoO3eAG1g3AcNFiANHF4wAyjBQwkAXTgBeRMRgA6HklPmkEzCgA2vKQG4FJRV4b0EhWzgJFAAFHBBNJAAuODjcRIAeFGYATwA+GRs8uSDFIzcLCRgoRiQA0rgiGEYoTlj4xMdMUR9vHIlpW2Lys0qvXzr68kUAX0DpxqRm1rgNLXDdAzDhaxRuYOZVfzgAehO4UUwkKH21ACMICG9UZgMYHLAkCEw4baFrUSqVARb5RB5PF5wAA+cHen1BfykaksFBmQA)\n\nThis way, when you destructure you actually get the right types based on destructure position.\n\n<details>\n<summary><b>Alternative: Asserting a tuple return type</b></summary>\n\nIf you are [having trouble with const assertions](https://github.com/babel/babel/issues/9800), you can also assert or define the function return types:\n\n```tsx\nimport { useState } from \"react\";\n\nexport function useLoading() {\n  const [isLoading, setState] = useState(false);\n  const load = (aPromise: Promise<any>) => {\n    setState(true);\n    return aPromise.finally(() => setState(false));\n  };\n  return [isLoading, load] as [\n    boolean,\n    (aPromise: Promise<any>) => Promise<any>\n  ];\n}\n```\n\nA helper function that automatically types tuples can also be helpful if you write a lot of custom hooks:\n\n```tsx\nfunction tuplify<T extends any[]>(...elements: T) {\n  return elements;\n}\n\nfunction useArray() {\n  const numberValue = useRef(3).current;\n  const functionValue = useRef(() => {}).current;\n  return [numberValue, functionValue]; // type is (number | (() => void))[]\n}\n\nfunction useTuple() {\n  const numberValue = useRef(3).current;\n  const functionValue = useRef(() => {}).current;\n  return tuplify(numberValue, functionValue); // type is [number, () => void]\n}\n```\n\n</details>\n\nNote that the React team recommends that custom hooks that return more than two values should use proper objects instead of tuples, however.\n\n#### More Hooks + TypeScript reading:\n\n- https://medium.com/@jrwebdev/react-hooks-in-typescript-88fce7001d0d\n- https://fettblog.eu/typescript-react/hooks/#useref\n\nIf you are writing a React Hooks library, don't forget that you should also expose your types for users to use.\n\n#### Example React Hooks + TypeScript Libraries:\n\n- https://github.com/mweststrate/use-st8\n- https://github.com/palmerhq/the-platform\n- https://github.com/sw-yx/hooks\n\n[Something to add? File an issue](https://github.com/typescript-cheatsheets/react/issues/new).\n\n<!--END-SECTION:hooks-->\n\n<!--START-SECTION:class-components-->\n\n#### Class Components\n\nWithin TypeScript, `React.Component` is a generic type (aka `React.Component<PropType, StateType>`), so you want to provide it with (optional) prop and state type parameters:\n\n```tsx\ntype MyProps = {\n  // using `interface` is also ok\n  message: string;\n};\ntype MyState = {\n  count: number; // like this\n};\nclass App extends React.Component<MyProps, MyState> {\n  state: MyState = {\n    // optional second annotation for better type inference\n    count: 0,\n  };\n  render() {\n    return (\n      <div>\n        {this.props.message} {this.state.count}\n      </div>\n    );\n  }\n}\n```\n\n[View in the TypeScript Playground](https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCmATzCTgFlqAFHMAZzgF44BvCuHAD0QuAFd2wAHYBzOAANpMJFEzok8uME4oANuwhwIAawFwQSduxQykALjjsYUaTIDcFAL4fyNOo2oAZRgUZW4+MzQIMSkYBykxEAAjFTdhUV1gY3oYAAttLx80XRQrOABBMDA4JAAPZSkAE05kdBgAOgBhXEgpJFiAHiZWCA4AGgDg0KQAPgjyQSdphyYpsJ5+BcF0ozAYYAgpPUckKKa4FCkpCBD9w7hMaDgUmGUoOD96aUwVfrQkMyCKIxOJwAAMZm8ZiITRUAAoAJTzbZwIgwMRQKRwOGA7YDRrAABuM1xKN4eW07TAbHY7QsVhsSE8fAptKWynawNinlJcAGQgJxNxCJ8gh55E8QA)\n\nDon't forget that you can export/import/extend these types/interfaces for reuse.\n\n<details>\n<summary><b>Why annotate <code>state</code> twice?</b></summary>\n\nIt isn't strictly necessary to annotate the `state` class property, but it allows better type inference when accessing `this.state` and also initializing the state.\n\nThis is because they work in two different ways, the 2nd generic type parameter will allow `this.setState()` to work correctly, because that method comes from the base class, but initializing `state` inside the component overrides the base implementation so you have to make sure that you tell the compiler that you're not actually doing anything different.\n\n[See commentary by @ferdaber here](https://github.com/typescript-cheatsheets/react/issues/57).\n\n</details>\n\n<details>\n  <summary><b>No need for <code>readonly</code></b></summary>\n\nYou often see sample code include `readonly` to mark props and state immutable:\n\n```tsx\ntype MyProps = {\n  readonly message: string;\n};\ntype MyState = {\n  readonly count: number;\n};\n```\n\nThis is not necessary as `React.Component<P,S>` already marks them as immutable. ([See PR and discussion!](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26813))\n\n</details>\n\n**Class Methods**: Do it like normal, but just remember any arguments for your functions also need to be typed:\n\n```tsx\nclass App extends React.Component<{ message: string }, { count: number }> {\n  state = { count: 0 };\n  render() {\n    return (\n      <div onClick={() => this.increment(1)}>\n        {this.props.message} {this.state.count}\n      </div>\n    );\n  }\n  increment = (amt: number) => {\n    // like this\n    this.setState((state) => ({\n      count: state.count + amt,\n    }));\n  };\n}\n```\n\n[View in the TypeScript Playground](https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCtAGxQGc64BBMMOJADxiQDsATRsnQwAdAGFckHrxgAeAN5wQSBigDmSAFxw6MKMB5q4AXwA0cRWggBXHjG09rIAEZIoJgHwWKcHTBTccAC8FnBWtvZwAAwmANw+cET8bgAUAJTe5L6+RDDWUDxwKQnZcLJ8wABucBA8YtTAaADWQfLpwV4wABbAdCIGaETKdikAjGnGHiWlFt29ImA4YH3KqhrGsz19ugFIIuF2xtO+sgD0FZVTWdlp8ddH1wNDMsFFKCCRji5uGUFe8tNTqc4A0mkg4HM6NNISI6EgYABlfzcFI7QJ-IoA66lA6RNF7XFwADUcHeMGmxjStwSxjuxiAA)\n\n**Class Properties**: If you need to declare class properties for later use, just declare it like `state`, but without assignment:\n\n```tsx\nclass App extends React.Component<{\n  message: string;\n}> {\n  pointer: number; // like this\n  componentDidMount() {\n    this.pointer = 3;\n  }\n  render() {\n    return (\n      <div>\n        {this.props.message} and {this.pointer}\n      </div>\n    );\n  }\n}\n```\n\n[View in the TypeScript Playground](https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCtAGxQGc64BBMMOJADxiQDsATRsnQwAdAGFckHrxgAeAN4U4cEEgYoA5kgBccOjCjAeGgNwUAvgD44i8sshHuUXTwCuIAEZIoJuAHo-OGpgAGskOBgAC2A6JTg0SQhpHhgAEWA+AFkIVxSACgBKGzjlKJiRBxTvOABeOABmMzs4cziifm9C4ublIhhXKB44PJLlOFk+YAA3S1GxmzK6CpwwJdV1LXM4FH4F6KXKp1aesdk-SZnRgqblY-MgA)\n\n[Something to add? File an issue](https://github.com/typescript-cheatsheets/react/issues/new).\n\n#### Typing getDerivedStateFromProps\n\nBefore you start using `getDerivedStateFromProps`, please go through the [documentation](https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops) and [You Probably Don't Need Derived State](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html). Derived State can be implemented using hooks which can also help set up memoization.\n\nHere are a few ways in which you can annotate `getDerivedStateFromProps`\n\n1. If you have explicitly typed your derived state and want to make sure that the return value from `getDerivedStateFromProps` conforms to it.\n\n```tsx\nclass Comp extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    //\n  }\n}\n```\n\n2. When you want the function's return value to determine your state.\n\n```tsx\nclass Comp extends React.Component<\n  Props,\n  ReturnType<typeof Comp[\"getDerivedStateFromProps\"]>\n> {\n  static getDerivedStateFromProps(props: Props) {}\n}\n```\n\n3. When you want derived state with other state fields and memoization\n\n```tsx\ntype CustomValue = any;\ninterface Props {\n  propA: CustomValue;\n}\ninterface DefinedState {\n  otherStateField: string;\n}\ntype State = DefinedState & ReturnType<typeof transformPropsToState>;\nfunction transformPropsToState(props: Props) {\n  return {\n    savedPropA: props.propA, // save for memoization\n    derivedState: props.propA,\n  };\n}\nclass Comp extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      otherStateField: \"123\",\n      ...transformPropsToState(props),\n    };\n  }\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (isEqual(props.propA, state.savedPropA)) return null;\n    return transformPropsToState(props);\n  }\n}\n```\n\n[View in the TypeScript Playground](https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoUSWOYAZwFEBHAVxQBs5tcD2IATFHQAWAOnpJWHMuQowAnmCRwAwizoxcANQ4tlAXjgoAdvIDcFYMZhIomdMoAKOMHTgBvCnDhgXAQQAuVXVNEB12PQtyAF9La1t7NGUAESRMKyR+AGUYFBsPLzgIGGFbHLykADFgJHZ+II0oKwBzKNjyBSU4cvzDVPTjTJ7lADJEJBgWKGMAFUUkAB5OpAhMOBgoEzpMaBBnCFcZiGGAPijMFmMMYAhjdc3jbd39w+PcmwAKXwO6IJe6ACUBXI3iIk2mwO83joKAAbpkXoEfC46KJvmA-AAaOAAehxcBh8K40DgICQIAgwAAXnkbsZCt5+LZgPDsu8kEF0aj0X5CtE2hQ0OwhG4VLgwHAkAAPGzGfhuZDoGCiRxTJBi8C3JDWBb-bGnSFwNC3RosDDQL4ov4ooGeEFQugsJRQS0-AFRKHrYT0UQaCpwQx2z3eYqlKDDaq1epwABEAEYAEwAZhjmIZUNEmY2Wx2UD2KKOw1drgB6f5fMKfpgwDQcGaE1STVZEZw+Z+xd+cD1BPZQWGtvTwDWH3ozDY7A7aP82KrSF9cIR-gBQLBUzuxhY7HYHqhq4h2ceubbryLXPdFZiQA)\n\n<!--END-SECTION:class-components-->\n\n<!--START-SECTION:default-props-->\n\n#### You May Not Need `defaultProps`\n\nAs per [this tweet](https://twitter.com/dan_abramov/status/1133878326358171650), defaultProps will eventually be deprecated. You can check the discussions here:\n\n- [Original tweet](https://twitter.com/hswolff/status/1133759319571345408)\n- More info can also be found in [this article](https://medium.com/@matanbobi/react-defaultprops-is-dying-whos-the-contender-443c19d9e7f1)\n\nThe consensus is to use object default values.\n\nFunction Components:\n\n```tsx\ntype GreetProps = { age?: number };\n\nconst Greet = ({ age = 21 }: GreetProps) => // etc\n```\n\nClass Components:\n\n```tsx\ntype GreetProps = {\n  age?: number;\n};\n\nclass Greet extends React.Component<GreetProps> {\n  render() {\n    const { age = 21 } = this.props;\n    /*...*/\n  }\n}\n\nlet el = <Greet age={3} />;\n```\n\n#### Typing `defaultProps`\n\nType inference improved greatly for `defaultProps` in [TypeScript 3.0+](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html), although [some edge cases are still problematic](https://github.com/typescript-cheatsheets/react/issues/61).\n\n**Function Components**\n\n```tsx\n// using typeof as a shortcut; note that it hoists!\n// you can also declare the type of DefaultProps if you choose\n// e.g. https://github.com/typescript-cheatsheets/react/issues/415#issuecomment-841223219\ntype GreetProps = { age: number } & typeof defaultProps;\n\nconst defaultProps = {\n  age: 21,\n};\n\nconst Greet = (props: GreetProps) => {\n  // etc\n};\nGreet.defaultProps = defaultProps;\n```\n\n_[See this in TS Playground](https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcARFDvmQNwBQdMAnmFnAOKVYwAKxY6ALxwA3igDmWAFxwAdgFcQAIyxQ4AXzgAyOM1YQCcACZYCyeQBte-VPVwRZqeCbOXrEAXGEi6cCdLgAJgBGABo6dXo6e0d4TixuLzgACjAbGXjuPg9UAEovAD5RXzhKGHkoWTgAHiNgADcCkTScgDpkSTgAeiQFZVVELvVqrrrGiPpMmFaXcytsz2FZtwXbOiA)_\n\nFor **Class components**, there are [a couple ways to do it](https://github.com/typescript-cheatsheets/react/pull/103#issuecomment-481061483) (including using the `Pick` utility type) but the recommendation is to \"reverse\" the props definition:\n\n```tsx\ntype GreetProps = typeof Greet.defaultProps & {\n  age: number;\n};\n\nclass Greet extends React.Component<GreetProps> {\n  static defaultProps = {\n    age: 21,\n  };\n  /*...*/\n}\n\n// Type-checks! No type assertions needed!\nlet el = <Greet age={3} />;\n```\n\n<details>\n<summary><b><code>React.JSX.LibraryManagedAttributes</code> nuance for library authors</b></summary>\n\nThe above implementations work fine for App creators, but sometimes you want to be able to export `GreetProps` so that others can consume it. The problem here is that the way `GreetProps` is defined, `age` is a required prop when it isn't because of `defaultProps`.\n\nThe insight to have here is that [`GreetProps` is the _internal_ contract for your component, not the _external_, consumer facing contract](https://github.com/typescript-cheatsheets/react/issues/66#issuecomment-453878710). You could create a separate type specifically for export, or you could make use of the `React.JSX.LibraryManagedAttributes` utility:\n\n```tsx\n// internal contract, should not be exported out\ntype GreetProps = {\n  age: number;\n};\n\nclass Greet extends Component<GreetProps> {\n  static defaultProps = { age: 21 };\n}\n\n// external contract\nexport type ApparentGreetProps = React.JSX.LibraryManagedAttributes<\n  typeof Greet,\n  GreetProps\n>;\n```\n\nThis will work properly, although hovering over`ApparentGreetProps`may be a little intimidating. You can reduce this boilerplate with the`ComponentProps` utility detailed below.\n\n</details>\n\n#### Consuming Props of a Component with defaultProps\n\nA component with `defaultProps` may seem to have some required props that actually aren't.\n\n##### Problem Statement\n\nHere's what you want to do:\n\n```tsx\ninterface IProps {\n  name: string;\n}\nconst defaultProps = {\n  age: 25,\n};\nconst GreetComponent = ({ name, age }: IProps & typeof defaultProps) => (\n  <div>{`Hello, my name is ${name}, ${age}`}</div>\n);\nGreetComponent.defaultProps = defaultProps;\n\nconst TestComponent = (props: React.ComponentProps<typeof GreetComponent>) => {\n  return <h1 />;\n};\n\n// Property 'age' is missing in type '{ name: string; }' but required in type '{ age: number; }'\nconst el = <TestComponent name=\"foo\" />;\n```\n\n##### Solution\n\nDefine a utility that applies `React.JSX.LibraryManagedAttributes`:\n\n```tsx\ntype ComponentProps<T> = T extends\n  | React.ComponentType<infer P>\n  | React.Component<infer P>\n  ? React.JSX.LibraryManagedAttributes<T, P>\n  : never;\n\nconst TestComponent = (props: ComponentProps<typeof GreetComponent>) => {\n  return <h1 />;\n};\n\n// No error\nconst el = <TestComponent name=\"foo\" />;\n```\n\n[_See this in TS Playground_](https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcARFDvmQNwBQdMAnmFnAMImQB2W3MABWJhUAHgAqAPjgBeOOLhYAHjD4ATdNjwwAdJ3ARe-cSyyjg3AlihwB0gD6Yqu-Tz4xzl67cl04cAH44ACkAZQANHQAZYAAjKGQoJgBZZG5kAHMsNQBBGBgoOIBXVTFxABofPzgALjheADdrejoLVSgCPDYASSEIETgAb2r0kCw61AKLDPoAXzpcQ0m4NSxOooAbQWF0OWH-TPG4ACYAVnK6WfpF7mWAcUosGFdDd1k4AApB+uQxysO4LM6r0dnAAGRwZisCAEFZrZCbbb9VAASlk0g+1VEamADUkgwABgAJLAbDYQSogJg-MZwYDoAAkg1GWFmlSZh1mBNmogA9Di8XQUfQHlgni8jLpVustn0BnJpQjZTsWrzeXANsh2gwbstxFhJhK3nIPmAdnUjfw5WIoVgYXBReKuK9+JI0TJpPs4JQYEUoNw4KIABYARjgvN8VwYargADkIIooMQoAslvBSe8JAbns7JTSsDIyAQIBAyOHJDQgA)\n\n#### Misc Discussions and Knowledge\n\n<details>\n<summary><b>Why does <code>React.FC</code> break <code>defaultProps</code>?</b></summary>\n\nYou can check the discussions here:\n\n- https://medium.com/@martin_hotell/10-typescript-pro-tips-patterns-with-or-without-react-5799488d6680\n- https://github.com/DefinitelyTyped/DefinitelyTyped/issues/30695\n- https://github.com/typescript-cheatsheets/react/issues/87\n\nThis is just the current state and may be fixed in future.\n\n</details>\n\n<details>\n<summary><b>TypeScript 2.9 and earlier</b></summary>\n\nFor TypeScript 2.9 and earlier, there's more than one way to do it, but this is the best advice we've yet seen:\n\n```ts\ntype Props = Required<typeof MyComponent.defaultProps> & {\n  /* additional props here */\n};\n\nexport class MyComponent extends React.Component<Props> {\n  static defaultProps = {\n    foo: \"foo\",\n  };\n}\n```\n\nOur former recommendation used the `Partial type` feature in TypeScript, which means that the current interface will fulfill a partial version on the wrapped interface. In that way we can extend defaultProps without any changes in the types!\n\n```ts\ninterface IMyComponentProps {\n  firstProp?: string;\n  secondProp: IPerson[];\n}\n\nexport class MyComponent extends React.Component<IMyComponentProps> {\n  public static defaultProps: Partial<IMyComponentProps> = {\n    firstProp: \"default\",\n  };\n}\n```\n\nThe problem with this approach is it causes complex issues with the type inference working with `React.JSX.LibraryManagedAttributes`. Basically it causes the compiler to think that when creating a JSX expression with that component, that all of its props are optional.\n\n[See commentary by @ferdaber here](https://github.com/typescript-cheatsheets/react/issues/57) and [here](https://github.com/typescript-cheatsheets/react/issues/61).\n\n</details>\n\n[Something to add? File an issue](https://github.com/typescript-cheatsheets/react/issues/new).\n\n<!--END-SECTION:default-props-->\n\n<!--START-SECTION:basic-type-examples-->\n\n#### Typing Component Props\n\nThis is intended as a basic orientation and reference for React developers familiarizing with TypeScript.\n\n#### Basic Prop Types Examples\n\nA list of TypeScript types you will likely use in a React+TypeScript app:\n\n```tsx\ntype AppProps = {\n  message: string;\n  count: number;\n  disabled: boolean;\n  /** array of a type! */\n  names: string[];\n  /** string literals to specify exact string values, with a union type to join them together */\n  status: \"waiting\" | \"success\";\n  /** an object with known properties (but could have more at runtime) */\n  obj: {\n    id: string;\n    title: string;\n  };\n  /** array of objects! (common) */\n  objArr: {\n    id: string;\n    title: string;\n  }[];\n  /** any non-primitive value - can't access any properties (NOT COMMON but useful as placeholder) */\n  obj2: object;\n  /** an interface with no required properties - (NOT COMMON, except for things like `React.Component<{}, State>`) */\n  obj3: {};\n  /** a dict object with any number of properties of the same type */\n  dict1: {\n    [key: string]: MyTypeHere;\n  };\n  dict2: Record<string, MyTypeHere>; // equivalent to dict1\n  /** function that doesn't take or return anything (VERY COMMON) */\n  onClick: () => void;\n  /** function with named prop (VERY COMMON) */\n  onChange: (id: number) => void;\n  /** function type syntax that takes an event (VERY COMMON) */\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  /** alternative function type syntax that takes an event (VERY COMMON) */\n  onClick(event: React.MouseEvent<HTMLButtonElement>): void;\n  /** any function as long as you don't invoke it (not recommended) */\n  onSomething: Function;\n  /** an optional prop (VERY COMMON!) */\n  optional?: OptionalType;\n  /** when passing down the state setter function returned by `useState` to a child component. `number` is an example, swap out with whatever the type of your state */\n  setState: React.Dispatch<React.SetStateAction<number>>;\n};\n```\n\n##### `object` as the non-primitive type\n\n`object` is a common source of misunderstanding in TypeScript. It does not mean \"any object\" but rather \"any non-primitive type\", which means it represents anything that is not `number`, `bigint`, `string`, `boolean`, `symbol`, `null` or `undefined`.\n\nTyping \"any non-primitive value\" is most likely not something that you should do much in React, which means you will probably not use `object` much.\n\n##### Empty interface, `{}` and `Object`\n\nAn empty interface, `{}` and `Object` all represent \"any non-nullish value\"—not \"an empty object\" as you might think. [Using these types is a common source of misunderstanding and is not recommended](https://typescript-eslint.io/rules/no-empty-interface/).\n\n```ts\ninterface AnyNonNullishValue {} // equivalent to `type AnyNonNullishValue = {}` or `type AnyNonNullishValue = Object`\n\nlet value: AnyNonNullishValue;\n\n// these are all fine, but might not be expected\nvalue = 1;\nvalue = \"foo\";\nvalue = () => alert(\"foo\");\nvalue = {};\nvalue = { foo: \"bar\" };\n\n// these are errors\nvalue = undefined;\nvalue = null;\n```\n\n#### Useful React Prop Type Examples\n\nRelevant for components that accept other React components as props.\n\n```tsx\nexport declare interface AppProps {\n  children?: React.ReactNode; // best, accepts everything React can render\n  childrenElement: React.JSX.Element; // A single React element\n  style?: React.CSSProperties; // to pass through style props\n  onChange?: React.FormEventHandler<HTMLInputElement>; // form events! the generic parameter is the type of event.target\n  //  more info: https://react-typescript-cheatsheet.netlify.app/docs/advanced/patterns_by_usecase/#wrappingmirroring\n  props: Props & React.ComponentPropsWithoutRef<\"button\">; // to impersonate all the props of a button element and explicitly not forwarding its ref\n  props2: Props & React.ComponentPropsWithRef<MyButtonWithForwardRef>; // to impersonate all the props of MyButtonForwardedRef and explicitly forwarding its ref\n}\n```\n\n<details>\n<summary><b>Small <code>React.ReactNode</code> edge case before React 18</b></summary>\n\nBefore the [React 18 type updates](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/56210), this code typechecked but had a runtime error:\n\n```tsx\ntype Props = {\n  children?: React.ReactNode;\n};\n\nfunction Comp({ children }: Props) {\n  return <div>{children}</div>;\n}\nfunction App() {\n  // Before React 18: Runtime error \"Objects are not valid as a React child\"\n  // After React 18: Typecheck error \"Type '{}' is not assignable to type 'ReactNode'\"\n  return <Comp>{{}}</Comp>;\n}\n```\n\nThis is because `ReactNode` includes `ReactFragment` which allowed type `{}` before React 18.\n\n[Thanks @pomle for raising this.](https://github.com/typescript-cheatsheets/react/issues/357)\n\n</details>\n\n<details>\n <summary><b>React.JSX.Element vs React.ReactNode?</b></summary>\n\nQuote [@ferdaber](https://github.com/typescript-cheatsheets/react/issues/57): A more technical explanation is that a valid React node is not the same thing as what is returned by `React.createElement`. Regardless of what a component ends up rendering, `React.createElement` always returns an object, which is the `React.JSX.Element` interface, but `React.ReactNode` is the set of all possible return values of a component.\n\n- `React.JSX.Element` -> Return value of `React.createElement`\n- `React.ReactNode` -> Return value of a component\n\n</details>\n\n[More discussion: Where ReactNode does not overlap with React.JSX.Element](https://github.com/typescript-cheatsheets/react/issues/129)\n\n[Something to add? File an issue](https://github.com/typescript-cheatsheets/react/issues/new).\n\n#### Types or Interfaces?\n\nYou can use either Types or Interfaces to type Props and State, so naturally the question arises - which do you use?\n\n##### TL;DR\n\nUse Interface until You Need Type - [orta](https://twitter.com/orta/status/1356129195835973632?s=20).\n\n##### More Advice\n\nHere's a helpful rule of thumb:\n\n- always use `interface` for public API's definition when authoring a library or 3rd party ambient type definitions, as this allows a consumer to extend them via _declaration merging_ if some definitions are missing.\n\n- consider using `type` for your React Component Props and State, for consistency and because it is more constrained.\n\nYou can read more about the reasoning behind this rule of thumb in [Interface vs Type alias in TypeScript 2.7](https://medium.com/@martin_hotell/interface-vs-type-alias-in-typescript-2-7-2a8f1777af4c).\n\nThe TypeScript Handbook now also includes guidance on [Differences Between Type Aliases and Interfaces](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces).\n\n> Note: At scale, there are performance reasons to prefer interfaces ([see official Microsoft notes on this](https://github.com/microsoft/TypeScript/wiki/Performance#preferring-interfaces-over-intersections)) but [take this with a grain of salt](https://news.ycombinator.com/item?id=25201887)\n\nTypes are useful for union types (e.g. `type MyType = TypeA | TypeB`) whereas Interfaces are better for declaring dictionary shapes and then `implementing` or `extending` them.\n\n##### Useful table for Types vs Interfaces\n\nIt's a nuanced topic, don't get too hung up on it. Here's a handy table:\n\n| Aspect                                          | Type | Interface |\n| ----------------------------------------------- | :--: | :-------: |\n| Can describe functions                          |  ✅  |    ✅     |\n| Can describe constructors                       |  ✅  |    ✅     |\n| Can describe tuples                             |  ✅  |    ✅     |\n| Interfaces can extend it                        |  ⚠️  |    ✅     |\n| Classes can extend it                           |  🚫  |    ✅     |\n| Classes can implement it (`implements`)         |  ⚠️  |    ✅     |\n| Can intersect another one of its kind           |  ✅  |    ⚠️     |\n| Can create a union with another one of its kind |  ✅  |    🚫     |\n| Can be used to create mapped types              |  ✅  |    🚫     |\n| Can be mapped over with mapped types            |  ✅  |    ✅     |\n| Expands in error messages and logs              |  ✅  |    🚫     |\n| Can be augmented                                |  🚫  |    ✅     |\n| Can be recursive                                |  ⚠️  |    ✅     |\n\n⚠️ In some cases\n\n(source: [Karol Majewski](https://twitter.com/karoljmajewski/status/1082413696075382785))\n\n[Something to add? File an issue](https://github.com/typescript-cheatsheets/react/issues/new).\n\n<!--END-SECTION:basic-type-examples-->\n\n<!--START-SECTION:get-derived-state-from-props-->\n\n## getDerivedStateFromProps\n\nBefore you start using `getDerivedStateFromProps`, please go through the [documentation](https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops) and [You Probably Don't Need Derived State](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html). Derived State can be easily achieved using hooks which can also help set up memoization easily.\n\nHere are a few ways in which you can annotate `getDerivedStateFromProps`\n\n1. If you have explicitly typed your derived state and want to make sure that the return value from `getDerivedStateFromProps` conforms to it.\n\n```tsx\nclass Comp extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    //\n  }\n}\n```\n\n2. When you want the function's return value to determine your state.\n\n```tsx\nclass Comp extends React.Component<\n  Props,\n  ReturnType<typeof Comp[\"getDerivedStateFromProps\"]>\n> {\n  static getDerivedStateFromProps(props: Props) {}\n}\n```\n\n3. When you want derived state with other state fields and memoization\n\n```tsx\ntype CustomValue = any;\ninterface Props {\n  propA: CustomValue;\n}\ninterface DefinedState {\n  otherStateField: string;\n}\ntype State = DefinedState & ReturnType<typeof transformPropsToState>;\nfunction transformPropsToState(props: Props) {\n  return {\n    savedPropA: props.propA, // save for memoization\n    derivedState: props.propA,\n  };\n}\nclass Comp extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      otherStateField: \"123\",\n      ...transformPropsToState(props),\n    };\n  }\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (isEqual(props.propA, state.savedPropA)) return null;\n    return transformPropsToState(props);\n  }\n}\n```\n\n[View in the TypeScript Playground](https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoUSWOYAZwFEBHAVxQBs5tcD2IATFHQAWAOnpJWHMuQowAnmCRwAwizoxcANQ4tlAXjgoAdvIDcFYMZhIomdMoAKOMHTgBvCnDhgXAQQAuVXVNEB12PQtyAF9La1t7NGUAESRMKyR+AGUYFBsPLzgIGGFbHLykADFgJHZ+II0oKwBzKNjyBSU4cvzDVPTjTJ7lADJEJBgWKGMAFUUkAB5OpAhMOBgoEzpMaBBnCFcZiGGAPijMFmMMYAhjdc3jbd39w+PcmwAKXwO6IJe6ACUBXI3iIk2mwO83joKAAbpkXoEfC46KJvmA-AAaOAAehxcBh8K40DgICQIAgwAAXnkbsZCt5+LZgPDsu8kEF0aj0X5CtE2hQ0OwhG4VLgwHAkAAPGzGfhuZDoGCiRxTJBi8C3JDWBb-bGnSFwNC3RosDDQL4ov4ooGeEFQugsJRQS0-AFRKHrYT0UQaCpwQx2z3eYqlKDDaq1epwABEAEYAEwAZhjmIZUNEmY2Wx2UD2KKOw1drgB6f5fMKfpgwDQcGaE1STVZEZw+Z+xd+cD1BPZQWGtvTwDWH3ozDY7A7aP82KrSF9cIR-gBQLBUzuxhY7HYHqhq4h2ceubbryLXPdFZiQA)\n\n<!--END-SECTION:get-derived-state-from-props-->\n\n<!--START-SECTION:forms-and-events-->\n\n#### Forms and Events\n\nIf performance is not an issue (and it usually isn't!), inlining handlers is easiest as you can just use [type inference and contextual typing](https://www.typescriptlang.org/docs/handbook/type-inference.html#contextual-typing):\n\n```tsx\nconst el = (\n  <button\n    onClick={(event) => {\n      /* event will be correctly typed automatically! */\n    }}\n  />\n);\n```\n\nBut if you need to define your event handler separately, IDE tooling really comes in handy here, as the @type definitions come with a wealth of typing. Type what you are looking for and usually the autocomplete will help you out. Here is what it looks like for an `onChange` for a form event:\n\n```tsx\ntype State = {\n  text: string;\n};\nclass App extends React.Component<Props, State> {\n  state = {\n    text: \"\",\n  };\n\n  // typing on RIGHT hand side of =\n  onChange = (e: React.FormEvent<HTMLInputElement>): void => {\n    this.setState({ text: e.currentTarget.value });\n  };\n  render() {\n    return (\n      <div>\n        <input type=\"text\" value={this.state.text} onChange={this.onChange} />\n      </div>\n    );\n  }\n}\n```\n\n[View in the TypeScript Playground](https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCtAGxQGc64BBMMOJADxiQDsATRsnQwAdAGFckHrxgAeCnDgBvAL4AaBcs2KA9Drg8IcMDjB1tcblwBccOjCjAeAcwDcmlRQB8W8ovso3HAAvL6KilYwtgBE0R7ulH5wepYAnmBOznAQPIgAkgDiABIAKnAAFij8dsB8SNmYIZo5YpUu9aEAFEi2QhgiAGLQIACiAG4ysqUAsgAyeTxgAK4wI9RIIDJeAJS2YxC1IT5KFjDlwHQidEgwAMowgUidSpacUewiaEtQRDwwJSgoM4biIxihqEt6iptglFCpYXBfnUoJ1tmFwkQYN9cp0LIpZHxgGMvHjwrInMt4DB0khgtFItE4GCIbSlGcLlcHtwRJEVNkeK0qsDgmzzpcWm1gXydCSkuE4LIdITiRYYR4KCogA)\n\nInstead of typing the arguments and return values with `React.FormEvent<>` and `void`, you may alternatively apply types to the event handler itself (_contributed by @TomasHubelbauer_):\n\n```tsx\n  // typing on LEFT hand side of =\n  onChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n    this.setState({text: e.currentTarget.value})\n  }\n```\n\n<details>\n\n<summary><b>Why two ways to do the same thing?</b></summary>\n\nThe first method uses an inferred method signature `(e: React.FormEvent<HTMLInputElement>): void` and the second method enforces a type of the delegate provided by `@types/react`. So `React.ChangeEventHandler<>` is simply a \"blessed\" typing by `@types/react`, whereas you can think of the inferred method as more... _artisanally hand-rolled_. Either way it's a good pattern to know. [See our Github PR for more](https://github.com/typescript-cheatsheets/react/pull/24).\n\n</details>\n\n**Typing onSubmit, with Uncontrolled components in a Form**\n\nIf you don't quite care about the type of the event, you can just use `React.SyntheticEvent`. If your target form has custom named inputs that you'd like to access, you can use a type assertion:\n\n```tsx\n<form\n  ref={formRef}\n  onSubmit={(e: React.SyntheticEvent) => {\n    e.preventDefault();\n    const target = e.target as typeof e.target & {\n      email: { value: string };\n      password: { value: string };\n    };\n    const email = target.email.value; // typechecks!\n    const password = target.password.value; // typechecks!\n    // etc...\n  }}\n>\n  <div>\n    <label>\n      Email:\n      <input type=\"email\" name=\"email\" />\n    </label>\n  </div>\n  <div>\n    <label>\n      Password:\n      <input type=\"password\" name=\"password\" />\n    </label>\n  </div>\n  <div>\n    <input type=\"submit\" value=\"Log in\" />\n  </div>\n</form>\n```\n\n[View in the TypeScript Playground](https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCtCAOwGctoRlM4BeRYmAOgFc6kLABQBKClVoM4AMSbs4o9gD4FFOHAA8mJmrhFMbAN7aozJJgC+u2gGVeAIxDAYRoUgBcndDxsBPGjAAFkgwwGgAogBuSAEiynCGuupI3GBE0QEAIuYovAA2MKIA3Elw1PTwMChQAOYh8ilVtfUodHAwvmBIEKyN1XXwAGQJpckgKMB5noZwkSh5vB5wDFDANDVwFiXk6rtwYK10AO7QACbTs-OLnitrG1ulDzu75VJI45PyTQPc7xN53DmCyQRTgAHowe1Okg0ME0ABrOgAQlKr3gBzoxzOX36IVShxOUFOgKuIPBkI6XVhMMRKOe6ghcBCaG4rN0Fis5CUug0p2AkW59M0eRQ9iQeUFe3U4Q+U1GmjWYF4lWhbAARH9Jmq4DQUCAkOrNXltWDJbsNGCRWKJTywXyBTz7Wb1BoreLnbsAAoEs7ueUaRXKqFddUYrFE7W6-Whn0R8Eei1um3PC1Ox38hOBlUhtV0BxOGDaoGLdUAGQgGzWJrNqYzFAtJhAgpEQA)\n\nOf course, if you're making any sort of significant form, [you should use Formik](https://jaredpalmer.com/formik) or [React Hook Form](https://react-hook-form.com/), which are written in TypeScript.\n\n##### List of event types\n\n| Event Type       | Description                                                                                                                                                                                                                                                            |\n| ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| AnimationEvent   | CSS Animations.                                                                                                                                                                                                                                                        |\n| ChangeEvent      | Changing the value of `<input>`, `<select>` and `<textarea>` element.                                                                                                                                                                                                  |\n| ClipboardEvent   | Using copy, paste and cut events.                                                                                                                                                                                                                                      |\n| CompositionEvent | Events that occur due to the user indirectly entering text (e.g. depending on Browser and PC setup, a popup window may appear with additional characters if you e.g. want to type Japanese on a US Keyboard)                                                           |\n| DragEvent        | Drag and drop interaction with a pointer device (e.g. mouse).                                                                                                                                                                                                          |\n| FocusEvent       | Event that occurs when elements gets or loses focus.                                                                                                                                                                                                                   |\n| FormEvent        | Event that occurs whenever a form or form element gets/loses focus, a form element value is changed or the form is submitted.                                                                                                                                          |\n| InvalidEvent     | Fired when validity restrictions of an input fails (e.g `<input type=\"number\" max=\"10\">` and someone would insert number 20).                                                                                                                                          |\n| KeyboardEvent    | User interaction with the keyboard. Each event describes a single key interaction.                                                                                                                                                                                     |\n| MouseEvent       | Events that occur due to the user interacting with a pointing device (e.g. mouse)                                                                                                                                                                                      |\n| PointerEvent     | Events that occur due to user interaction with a variety pointing of devices such as mouse, pen/stylus, a touchscreen and which also supports multi-touch. Unless you develop for older browsers (IE10 or Safari 12), pointer events are recommended. Extends UIEvent. |\n| TouchEvent       | Events that occur due to the user interacting with a touch device. Extends UIEvent.                                                                                                                                                                                    |\n| TransitionEvent  | CSS Transition. Not fully browser supported. Extends UIEvent                                                                                                                                                                                                           |\n| UIEvent          | Base Event for Mouse, Touch and Pointer events.                                                                                                                                                                                                                        |\n| WheelEvent       | Scrolling on a mouse wheel or similar input device. (Note: `wheel` event should not be confused with the `scroll` event)                                                                                                                                               |\n| SyntheticEvent   | The base event for all above events. Should be used when unsure about event type                                                                                                                                                                                       |\n\n<details>\n<summary><b>What about <code>InputEvent</code>?</b></summary>\n\nYou've probably noticed that there is no `InputEvent`. This is because it is not supported by Typescript as the event itself has no fully browser support and may behave differently in different browsers. You can use `KeyboardEvent` instead.\n\nSources:\n\n- https://github.com/microsoft/TypeScript/issues/29441\n- https://developer.mozilla.org/en-US/docs/Web/API/InputEvent\n- https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event\n\n</details>\n\n<!--END-SECTION:forms-and-events-->\n\n<!--START-SECTION:context-->\n\n#### Context\n\n#### Basic example\n\nHere's a basic example of creating a context containing the active theme.\n\n```tsx\nimport { createContext } from \"react\";\n\ntype ThemeContextType = \"light\" | \"dark\";\n\nconst ThemeContext = createContext<ThemeContextType>(\"light\");\n```\n\nWrap the components that need the context with a context provider:\n\n```tsx\nimport { useState } from \"react\";\n\nconst App = () => {\n  const [theme, setTheme] = useState<ThemeContextType>(\"light\");\n\n  return (\n    <ThemeContext.Provider value={theme}>\n      <MyComponent />\n    </ThemeContext.Provider>\n  );\n};\n```\n\nCall `useContext` to read and subscribe to the context.\n\n```tsx\nimport { useContext } from \"react\";\n\nconst MyComponent = () => {\n  const theme = useContext(ThemeContext);\n\n  return <p>The current theme is {theme}.</p>;\n};\n```\n\n#### Without default context value\n\nIf you don't have any meaningful default value, specify `null`:\n\n```tsx\nimport { createContext } from \"react\";\n\ninterface CurrentUserContextType {\n  username: string;\n}\n\nconst CurrentUserContext = createContext<CurrentUserContextType | null>(null);\n```\n\n```tsx\nconst App = () => {\n  const [currentUser, setCurrentUser] = useState<CurrentUserContextType>({\n    username: \"filiptammergard\",\n  });\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <MyComponent />\n    </CurrentUserContext.Provider>\n  );\n};\n```\n\nNow that the type of the context can be `null`, you'll notice that you'll get a `'currentUser' is possibly 'null'` TypeScript error if you try to access the `username` property. You can use optional chaining to access `username`:\n\n```tsx\nimport { useContext } from \"react\";\n\nconst MyComponent = () => {\n  const currentUser = useContext(CurrentUserContext);\n\n  return <p>Name: {currentUser?.username}.</p>;\n};\n```\n\nHowever, it would be preferable to not have to check for `null`, since we know that the context won't be `null`. One way to do that is to provide a custom hook to use the context, where an error is thrown if the context is not provided:\n\n```tsx\nimport { createContext } from \"react\";\n\ninterface CurrentUserContextType {\n  username: string;\n}\n\nconst CurrentUserContext = createContext<CurrentUserContextType | null>(null);\n\nconst useCurrentUser = () => {\n  const currentUserContext = useContext(CurrentUserContext);\n\n  if (!currentUserContext) {\n    throw new Error(\n      \"useCurrentUser has to be used within <CurrentUserContext.Provider>\"\n    );\n  }\n\n  return currentUserContext;\n};\n```\n\nUsing a runtime type check in this will has the benefit of printing a clear error message in the console when a provider is not wrapping the components properly. Now it's possible to access `currentUser.username` without checking for `null`:\n\n```tsx\nimport { useContext } from \"react\";\n\nconst MyComponent = () => {\n  const currentUser = useCurrentUser();\n\n  return <p>Username: {currentUser.username}.</p>;\n};\n```\n\n##### Type assertion as an alternative\n\nAnother way to avoid having to check for `null` is to use type assertion to tell TypeScript you know the context is not `null`:\n\n```tsx\nimport { useContext } from \"react\";\n\nconst MyComponent = () => {\n  const currentUser = useContext(CurrentUserContext);\n\n  return <p>Name: {currentUser!.username}.</p>;\n};\n```\n\nAnother option is to use an empty object as default value and cast it to the expected context type:\n\n```tsx\nconst CurrentUserContext = createContext<CurrentUserContextType>(\n  {} as CurrentUserContextType\n);\n```\n\nYou can also use non-null assertion to get the same result:\n\n```tsx\nconst CurrentUserContext = createContext<CurrentUserContextType>(null!);\n```\n\nWhen you don't know what to choose, prefer runtime checking and throwing over type asserting.\n\n<!--END-SECTION:context-->\n\n<!--START-SECTION:forward-create-ref-->\n\n#### forwardRef/createRef\n\nCheck the [Hooks section](https://github.com/typescript-cheatsheets/react/blob/main/README.md#hooks) for `useRef`.\n\n`createRef`:\n\n```tsx\nimport { createRef, PureComponent } from \"react\";\n\nclass CssThemeProvider extends PureComponent<Props> {\n  private rootRef = createRef<HTMLDivElement>(); // like this\n  render() {\n    return <div ref={this.rootRef}>{this.props.children}</div>;\n  }\n}\n```\n\n`forwardRef`:\n\n```tsx\nimport { forwardRef, ReactNode } from \"react\";\n\ninterface Props {\n  children?: ReactNode;\n  type: \"submit\" | \"button\";\n}\nexport type Ref = HTMLButtonElement;\n\nexport const FancyButton = forwardRef<Ref, Props>((props, ref) => (\n  <button ref={ref} className=\"MyClassName\" type={props.type}>\n    {props.children}\n  </button>\n));\n```\n\n<details>\n<summary><b>Side note: the <code>ref</code> you get from <code>forwardRef</code> is mutable so you can assign to it if needed.</b></summary>\n\nThis was done [on purpose](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43265/). You can make it immutable if you have to - assign `React.Ref` if you want to ensure nobody reassigns it:\n\n```tsx\nimport { forwardRef, ReactNode, Ref } from \"react\";\n\ninterface Props {\n  children?: ReactNode;\n  type: \"submit\" | \"button\";\n}\n\nexport const FancyButton = forwardRef(\n  (\n    props: Props,\n    ref: Ref<HTMLButtonElement> // <-- here!\n  ) => (\n    <button ref={ref} className=\"MyClassName\" type={props.type}>\n      {props.children}\n    </button>\n  )\n);\n```\n\n</details>\n\nIf you are grabbing the props of a component that forwards refs, use [`ComponentPropsWithRef`](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a05cc538a42243c632f054e42eab483ebf1560ab/types/react/index.d.ts#L770).\n\n#### Generic forwardRefs\n\nRead more context in https://fettblog.eu/typescript-react-generic-forward-refs/:\n\n##### Option 1 - Wrapper component\n\n```ts\ntype ClickableListProps<T> = {\n  items: T[];\n  onSelect: (item: T) => void;\n  mRef?: React.Ref<HTMLUListElement> | null;\n};\n\nexport function ClickableList<T>(props: ClickableListProps<T>) {\n  return (\n    <ul ref={props.mRef}>\n      {props.items.map((item, i) => (\n        <li key={i}>\n          <button onClick={(el) => props.onSelect(item)}>Select</button>\n          {item}\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n##### Option 2 - Redeclare forwardRef\n\n```ts\n// Redeclare forwardRef\ndeclare module \"react\" {\n  function forwardRef<T, P = {}>(\n    render: (props: P, ref: React.Ref<T>) => React.ReactElement | null\n  ): (props: P & React.RefAttributes<T>) => React.ReactElement | null;\n}\n\n// Just write your components like you're used to!\nimport { forwardRef, ForwardedRef } from \"react\";\n\ninterface ClickableListProps<T> {\n  items: T[];\n  onSelect: (item: T) => void;\n}\n\nfunction ClickableListInner<T>(\n  props: ClickableListProps<T>,\n  ref: ForwardedRef<HTMLUListElement>\n) {\n  return (\n    <ul ref={ref}>\n      {props.items.map((item, i) => (\n        <li key={i}>\n          <button onClick={(el) => props.onSelect(item)}>Select</button>\n          {item}\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport const ClickableList = forwardRef(ClickableListInner);\n```\n\n##### Option 3 - Call signature\n\n```ts\n// Add to `index.d.ts`\ninterface ForwardRefWithGenerics extends React.FC<WithForwardRefProps<Option>> {\n  <T extends Option>(props: WithForwardRefProps<T>): ReturnType<\n    React.FC<WithForwardRefProps<T>>\n  >;\n}\n\nexport const ClickableListWithForwardRef: ForwardRefWithGenerics =\n  forwardRef(ClickableList);\n```\n\nCredits: https://stackoverflow.com/a/73795494\n\n#### More Info\n\n- https://medium.com/@martin_hotell/react-refs-with-typescript-a32d56c4d315\n\nYou may also wish to do [Conditional Rendering with `forwardRef`](https://github.com/typescript-cheatsheets/react/issues/167).\n\n[Something to add? File an issue](https://github.com/typescript-cheatsheets/react/issues/new).\n\n<!--END-SECTION:forward-create-ref-->\n\n<!--START-SECTION:portals-->\n\n#### Portals\n\nUsing `ReactDOM.createPortal`:\n\n```tsx\nconst modalRoot = document.getElementById(\"modal-root\") as HTMLElement;\n// assuming in your html file has a div with id 'modal-root';\n\nexport class Modal extends React.Component<{ children?: React.ReactNode }> {\n  el: HTMLElement = document.createElement(\"div\");\n\n  componentDidMount() {\n    modalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    modalRoot.removeChild(this.el);\n  }\n\n  render() {\n    return ReactDOM.createPortal(this.props.children, this.el);\n  }\n}\n```\n\n[View in the TypeScript Playground](https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoUSWRYmAEQHkBZObXAo9GAWgBNcZchTQQAdgGd4ICHxQAbBBAjwAvHAFoAriCRiYAOgDmSGAFF5SXfoBCATwCSfABQAiGXPk8cK1wEo4FAk4AAkAFWYAGQsrPRgAbgoAeiTAiQkdYDEjOCy4OwgtKDgACxgQeTZgS1KgwI1gADc4AHdgGBLcvgIPBW9lGHxE4XIkAA9qeDR5IODmWQU4cZg9PmDkbgMAYVxIMTi4AG8KOCX5AC5QiOjLazUNCG07gzQuFZi7tz4m-2GTuFE4HEcXowD48y0+mcAWO5FOp16igGBhQYDAqy2JWqLg6wAkBiQ8j8w1OAF8KP9AXs4gB1aryACqYhkkJg0KO-wRCyRKgMRBkjSQmOxzlx+MJxP+5JGpyIYj4SCg7Nh8LgRBgRTEtG4TGYLzeSAACtAYApRVj8WAcGB8WgsfI+HKADRwMUEokkuDS0lAA)\n\n<details>\n  <summary><b>Using hooks</b></summary>\n\nSame as above but using hooks\n\n```tsx\nimport { useEffect, useRef, ReactNode } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nconst modalRoot = document.querySelector(\"#modal-root\") as HTMLElement;\n\ntype ModalProps = {\n  children: ReactNode;\n};\n\nfunction Modal({ children }: ModalProps) {\n  // create div element only once using ref\n  const elRef = useRef<HTMLDivElement | null>(null);\n  if (!elRef.current) elRef.current = document.createElement(\"div\");\n\n  useEffect(() => {\n    const el = elRef.current!; // non-null assertion because it will never be null\n    modalRoot.appendChild(el);\n    return () => {\n      modalRoot.removeChild(el);\n    };\n  }, []);\n\n  return createPortal(children, elRef.current);\n}\n```\n\n[View in the TypeScript Playground](https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAJQKYEMDGMA0cDecCuAzkgKIBmZSG2RSyZ2y6MAchACZJwC+cZUEEHADkUVBmEBYAFChIsXHDRiUMJAAVoMFABsefAUNHiYAWnaCp0mQHobcFIUL4QwAHYBzOO7gBPCPhQcAAWMCB6ZMA6XMGODnDswABucADuwDDB3uwiIBy6pgIQMMIA3DJoEG6E8HnsuggQxXAAvAkQaC5IbjAAdACO+EhQvgDKSNEY0AAUAEQAxHUFRTCzAJQOhHAAEgAqALIAMiTRIN0w5dbSML5gXPv5OuoCYFttODJwSsFR7GJuAC5ECY2JxLtxLjIyPg3BhgFU4A96jppng0D8dH9ujwgUjdM8IK8Nh9pF87EoVGoEsk4BMkGcenAqjpfEzYVwiO4vGIyJ8lFUarSdPRWgRiPQADx7I4AEWSJ3p5zgAB84G58DodAA+abqzVrS5fYBkODTACEE3ovU6UH+MA2lqQZGtgTtoosnQZfWUqDUCq9c0SSXWkNJYtIFCoMGm0w2LS1uD5X0q1XgE1FjudNrtZtKcHJbiqpj1ekcxFg8LccAARlQULRvPB0pq1UgksMa1wS0m4EthU0+igwHc3OwAMIY9jTCYGntiGCBKux1oJklfde9x6NYq9MR5dsT37TnSzsNfCF87jYADaAF1T3z54uKb6NFpdNN0b9-thMy7becp7cDIIHSOSRAoB4SCgdCsIwJWcAAILDsua78qmcDXoQwQQKkeI6NgxAwKMOF4Y8t6ikwGC9LQozaGo0xkLoxCnl8T5QEuPYSkGWo9mS9j+PgSgoFWzEQHAYD4PAmTAFsPiCUENSqMAaAhGEERRNBZ7rtxNLAOwLSzH2hQDrMWoSjYPF8bg2G4fhcAAGQOaa1lfBK+G8dpG5uUGrneTUvjRC0OBod5YXUoQYA6CgvhArMHhQPpsyYH5YVRegSAAJJqCAhBxWg5zDMlqXecESDAB4oRxQAjAADLVSTBMVXnhV86TsJkQLCHVDXBMIKUta11boAA1glASjnFUAeMN0y1Zg82Lb01VrM1rVhQAXplo5IAAHkCACcB0Det67cMBg3rp5p1fJlwhCCgm7ImaOCzHAswXTdcAStWUkwAiAVBSFw1oGNAgwuwcVgEOvgoKkPxgB9vBVGOOgqSNwXLvGcBESRdmPIxzFIGs3BamgOgQMQFm-TA-1uNd60WVZl0WR51kk9ZP1-QiKNo6DmNxgmuOkfh0wwFAQwk1qtmpIijzU9z9PWeSYiChAJoKQ4w5cZZyQM2sMjcEAA)\n\n</details>\n\nModal Component Usage Example:\n\n```tsx\nimport { useState } from \"react\";\n\nfunction App() {\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <div>\n      // you can also put this in your static html file\n      <div id=\"modal-root\"></div>\n      {showModal && (\n        <Modal>\n          <div\n            style={{\n              display: \"grid\",\n              placeItems: \"center\",\n              height: \"100vh\",\n              width: \"100vh\",\n              background: \"rgba(0,0,0,0.1)\",\n              zIndex: 99,\n            }}\n          >\n            I'm a modal!{\" \"}\n            <button\n              style={{ background: \"papyawhip\" }}\n              onClick={() => setShowModal(false)}\n            >\n              close\n            </button>\n          </div>\n        </Modal>\n      )}\n      <button onClick={() => setShowModal(true)}>show Modal</button>\n      // rest of your app\n    </div>\n  );\n}\n```\n\n<details>\n\n<summary><b>Context of Example</b></summary>\n\nThis example is based on the [Event Bubbling Through Portal](https://reactjs.org/docs/portals.html#event-bubbling-through-portals) example of React docs.\n\n</details>\n\n<!--END-SECTION:portals-->\n\n<!--START-SECTION:error-boundaries-->\n\n#### Error Boundaries\n\n##### Option 1: Using react-error-boundary\n\n[React-error-boundary](https://github.com/bvaughn/react-error-boundary) - is a lightweight package ready to use for this scenario with TS support built-in.\nThis approach also lets you avoid class components that are not that popular anymore.\n\n##### Option 2: Writing your custom error boundary component\n\nIf you don't want to add a new npm package for this, you can also write your own `ErrorBoundary` component.\n\n```jsx\nimport React, { Component, ErrorInfo, ReactNode } from \"react\";\n\ninterface Props {\n  children?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false\n  };\n\n  public static getDerivedStateFromError(_: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"Uncaught error:\", error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return <h1>Sorry.. there was an error</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n\n```\n\n[Something to add? File an issue](https://github.com/typescript-cheatsheets/react/issues/new).\n\n<!--END-SECTION:error-boundaries-->\n\n<!--START-SECTION:concurrent-->\n\n#### Concurrent React/React Suspense\n\n_Not written yet._ watch <https://github.com/sw-yx/fresh-async-react> for more on React Suspense and Time Slicing.\n\n[Something to add? File an issue](https://github.com/typescript-cheatsheets/react/issues/new).\n\n<!--END-SECTION:concurrent-->\n\n<!--START-SECTION:types-->\n\n### Troubleshooting Handbook: Types\n\n> ⚠️ Have you read [the TypeScript FAQ](https://github.com/microsoft/TypeScript/wiki/FAQ?) Your answer might be there!\n\nFacing weird type errors? You aren't alone. This is the hardest part of using TypeScript with React. Be patient - you are learning a new language after all. However, the more you get good at this, the less time you'll be working _against_ the compiler and the more the compiler will be working _for_ you!\n\nTry to avoid typing with `any` as much as possible to experience the full benefits of TypeScript. Instead, let's try to be familiar with some of the common strategies to solve these issues.\n\n#### Union Types and Type Guarding\n\nUnion types are handy for solving some of these typing problems:\n\n```tsx\nclass App extends React.Component<\n  {},\n  {\n    count: number | null; // like this\n  }\n> {\n  state = {\n    count: null,\n  };\n  render() {\n    return <div onClick={() => this.increment(1)}>{this.state.count}</div>;\n  }\n  increment = (amt: number) => {\n    this.setState((state) => ({\n      count: (state.count || 0) + amt,\n    }));\n  };\n}\n```\n\n[View in the TypeScript Playground](https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCtAGxQGc64BBMMOJADxiQDsATRsnQwAdAGFckHrxgAeCnDgBvAL4AaBcs2K0EAK48YALjg89IAEZIocAD6m91agG44AejdxqwANZI4MAAWwHSaKhQAfFrkinQwKNxwALzRijr6hiZmTmHOmkT81gAUAJSpaUQwelA8cLJ8wABucBA8Yt5oPklKpclRQSEiwDxoRCAyRQCMJSoRSgN0InEJSCK6BjAqsm4NjRF5MXDhh8OjSOOGyXBFKCDGDpbWZUlRStoBwYt0SDAAyvHcIrLRIva5vQ5pODrTLXYGraHwWz2AAMZQA1HBbjB3ioSiUDooVAcVEA)\n\n**Type Guarding**: Sometimes Union Types solve a problem in one area but create another downstream. If `A` and `B` are both object types, `A | B` isn't \"either A or B\", it is \"A or B or both at once\", which causes some confusion if you expected it to be the former. Learn how to write checks, guards, and assertions (also see the Conditional Rendering section below). For example:\n\n```ts\ninterface Admin {\n  role: string;\n}\ninterface User {\n  email: string;\n}\n\n// Method 1: use `in` keyword\nfunction redirect(user: Admin | User) {\n  if (\"role\" in user) {\n    // use the `in` operator for typeguards since TS 2.7+\n    routeToAdminPage(user.role);\n  } else {\n    routeToHomePage(user.email);\n  }\n}\n\n// Method 2: custom type guard, does the same thing in older TS versions or where `in` isnt enough\nfunction isAdmin(user: Admin | User): user is Admin {\n  return (user as any).role !== undefined;\n}\n```\n\n[View in the TypeScript Playground](https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoC4AOxiSk3STgEEATEGuAbwrjhwAbJAC44AZxhQaAcwDcFAL5Va9RmmYBVcfR584SECmCCxk6dXlKKFTAFdqGYBGoCIdugBUI7TtQAKKDJIABTiwDLUwJjA9ACUeuT80XBhEVExugC8OQR2OlAIEML4CbxJ-AJIMHZQrvi+NGQVinDWlOT2jjDOrjgeSN4AErhIgcFpkdGxUGX6KZMZM3A5WQSGxoKliZVVNXUEIyBIYEFIzfzK5FcUAPS3cACy1QAWEGxwAIxi+cwABjQ-nAANZIACeAHdoGxbA4nC4qmxgEQMCFflAxI1XAAfODaeI7ODREIAIiESBJRNc6LKcHucF+cBgL3+gLgEDA9BQMGgcEwvJgYM5MjsKCgbHEEhoGjgngAynAAEwAOgA7ABqfT8fpeHwcGjjULo5XkuIKFoGQQ6Qna9y6o5jM5ogrKjYmM36K43cj057M95KsRofI8vCCzlwEVitgAGjgbAgSElzOY4hQxyZL1kVPZgjYunlcAAbvRwi5JbyISyiHAAdQgcBxLQDNR3DIXrDur0ieIsc76Jj9Ti8QU4j8Cj3WEPCUR9q5+1A4ChJShqGC4ibiswAIS5Bz5mLUJAw65AA)\n\nMethod 2 is also known as [User-Defined Type Guards](https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards) and can be really handy for readable code. This is how TS itself refines types with `typeof` and `instanceof`.\n\nIf you need `if...else` chains or the `switch` statement instead, it should \"just work\", but look up [Discriminated Unions](https://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions) if you need help. (See also: [Basarat's writeup](https://basarat.gitbook.io/typescript/type-system/discriminated-unions)). This is handy in typing reducers for `useReducer` or Redux.\n\n#### Optional Types\n\nIf a component has an optional prop, add a question mark and assign during destructure (or use defaultProps).\n\n```tsx\nclass MyComponent extends React.Component<{\n  message?: string; // like this\n}> {\n  render() {\n    const { message = \"default\" } = this.props;\n    return <div>{message}</div>;\n  }\n}\n```\n\nYou can also use a `!` character to assert that something is not undefined, but this is not encouraged.\n\n_Something to add? [File an issue](https://github.com/typescript-cheatsheets/react/issues/new) with your suggestions!_\n\n#### Enum Types\n\n**We recommend avoiding using enums as far as possible**.\n\nEnums have a few [documented issues](https://fettblog.eu/tidy-typescript-avoid-enums/) (the TS team [agrees](https://twitter.com/orta/status/1348966323271987201?s=20)). A simpler alternative to enums is just declaring a union type of string literals:\n\n```tsx\nexport declare type Position = \"left\" | \"right\" | \"top\" | \"bottom\";\n```\n\nIf you must use enums, remember that enums in TypeScript default to numbers. You will usually want to use them as strings instead:\n\n```tsx\nexport enum ButtonSizes {\n  default = \"default\",\n  small = \"small\",\n  large = \"large\",\n}\n\n// usage\nexport const PrimaryButton = (\n  props: Props & React.HTMLProps<HTMLButtonElement>\n) => <Button size={ButtonSizes.default} {...props} />;\n```\n\n#### Type Assertion\n\nSometimes you know better than TypeScript that the type you're using is narrower than it thinks, or union types need to be asserted to a more specific type to work with other APIs, so assert with the `as` keyword. This tells the compiler you know better than it does.\n\n```tsx\nclass MyComponent extends React.Component<{\n  message: string;\n}> {\n  render() {\n    const { message } = this.props;\n    return (\n      <Component2 message={message as SpecialMessageType}>{message}</Component2>\n    );\n  }\n}\n```\n\n[View in the TypeScript Playground](https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCmATzCTgGU61gUAbAWSQGduUBzJABVa9ALwFuMKMAB2-fAG4KFOTCRRM6egAUcYbnADeFOHBA8+ggFxwpM+XAA+cAK6yAJkkxykH5eQAvirkaBCyUnAAwriQskiyMABMtsjoMAB0AGJRADx6EAYAfHASABRG5pYCSIEAlKUlZaZwuR7AAG5FLWa5ABYAjEVGFrw1gbkA9IPd5L2T7V0UdSFobCi8cBzUMeDhCfBIAB7qnoZpGBm7cQe5JnNVYzZ20nL8AYEl92ZEnhplDW+ZjgYQi8Eqoys9ECpTgMD6wG4GTA+m4AWBcCIMFcUFkcGaDwxuWu+0SSUeULEI2qgjgG0YzFYnBpwlEn2pT1qUxJ8TJswxdXRcGCQSAA)\n\nNote that you cannot assert your way to anything - basically it is only for refining types. Therefore it is not the same as \"casting\" a type.\n\nYou can also assert a property is non-null, when accessing it:\n\n```ts\nelement.parentNode!.removeChild(element); // ! before the period\nmyFunction(document.getElementById(dialog.id!)!); // ! after the property accessing\nlet userID!: string; // definite assignment assertion... be careful!\n```\n\nOf course, try to actually handle the null case instead of asserting :)\n\n#### Simulating Nominal Types\n\nTS' structural typing is handy, until it is inconvenient. However you can simulate nominal typing with [`type branding`](https://basarat.gitbook.io/typescript/main-1/nominaltyping):\n\n```ts\ntype OrderID = string & { readonly brand: unique symbol };\ntype UserID = string & { readonly brand: unique symbol };\ntype ID = OrderID | UserID;\n```\n\nWe can create these values with the Companion Object Pattern:\n\n```ts\nfunction OrderID(id: string) {\n  return id as OrderID;\n}\nfunction UserID(id: string) {\n  return id as UserID;\n}\n```\n\nNow TypeScript will disallow you from using the wrong ID in the wrong place:\n\n```ts\nfunction queryForUser(id: UserID) {\n  // ...\n}\nqueryForUser(OrderID(\"foobar\")); // Error, Argument of type 'OrderID' is not assignable to parameter of type 'UserID'\n```\n\nIn future you can use the `unique` keyword to brand. [See this PR](https://github.com/microsoft/TypeScript/pull/33038).\n\n#### Intersection Types\n\nAdding two types together can be handy, for example when your component is supposed to mirror the props of a native component like a `button`:\n\n```tsx\nexport interface PrimaryButtonProps {\n  label: string;\n}\nexport const PrimaryButton = (\n  props: PrimaryButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>\n) => {\n  // do custom buttony stuff\n  return <button {...props}> {props.label} </button>;\n};\n```\n\n_Playground [here](https://www.typescriptlang.org/play?ssl=4&ssc=1&pln=12&pc=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCipAD0ljmADsYkpN0k4AFKUFKAE8AQgFcYMCE14QwAZzgBvCnDgAbFACMkagFxw5MPkwDmAbgoBfanWjw0Uwzz4gBI8ZKZwAvHAAUKnBgOPL6vPxCYhJSMvJwAGSIxDAAdFGeABIAKgCyADIAghJ8muJIcgA82fnpUgCiakggSCwAfBQAlD6tSoEA9H1wACYQcGiihrhwpdFMggYwopiYgUSLUF4VM55KKXvBsnKWPYoH8ika2mqWcBV921KtFuSWQA)_\n\nYou can also use Intersection Types to make reusable subsets of props for similar components:\n\n```tsx\ntype BaseProps = {\n   className?: string,\n   style?: React.CSSProperties\n   name: string // used in both\n}\ntype DogProps = {\n  tailsCount: number\n}\ntype HumanProps = {\n  handsCount: number\n}\nexport const Human = (props: BaseProps & HumanProps) => // ...\nexport const Dog = (props: BaseProps & DogProps) => // ...\n```\n\n[View in the TypeScript Playground](https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCmATzCTgCEUBnJABRzGbgF44BvCnGFoANi2YA5FCCQB+AFxxmMKMAB2AcwA0Q4Suqj5S5OhgA6AMIBlaxwh1YwJMz1x1MpEpVqtcAPT+cACurAAmcBpwAEYQMAAWFAC+VLT0ACIQmvZcvAJ6MCjAosyWEMHqMErqwSDRSFDJqXRwABK1KOo53HyC5MLxnWGl5ZXVtfWN5CnkSAAekLBwaBDqKm0d6ibEFgBilgA8TKzdcABkGyCd3QB8eQAUAJS8d-d6B2HAAG4BNxSPFAo80W8BWa3gmU02zM5n2RxY7E43AukNuD2ePFe70+P38f3IjyAA)\n\nMake sure not to confuse Intersection Types (which are **and** operations) with Union Types (which are **or** operations).\n\n#### Union Types\n\nThis section is yet to be written (please contribute!). Meanwhile, see our [commentary on Union Types usecases](https://github.com/typescript-cheatsheets/react/blob/main/README.md#union-types-and-type-guarding).\n\nThe ADVANCED cheatsheet also has information on Discriminated Union Types, which are helpful when TypeScript doesn't seem to be narrowing your union type as you expect.\n\n#### Overloading Function Types\n\nSpecifically when it comes to functions, you may need to overload instead of union type. The most common way function types are written uses the shorthand:\n\n```ts\ntype FunctionType1 = (x: string, y: number) => number;\n```\n\nBut this doesn't let you do any overloading. If you have the implementation, you can put them after each other with the function keyword:\n\n```ts\nfunction pickCard(x: { suit: string; card: number }[]): number;\nfunction pickCard(x: number): { suit: string; card: number };\nfunction pickCard(x): any {\n  // implementation with combined signature\n  // ...\n}\n```\n\nHowever, if you don't have an implementation and are just writing a `.d.ts` definition file, this won't help you either. In this case you can forego any shorthand and write them the old-school way. The key thing to remember here is as far as TypeScript is concerned, `functions are just callable objects with no key`:\n\n```ts\ntype pickCard = {\n  (x: { suit: string; card: number }[]): number;\n  (x: number): { suit: string; card: number };\n  // no need for combined signature in this form\n  // you can also type static properties of functions here eg `pickCard.wasCalled`\n};\n```\n\nNote that when you implement the actual overloaded function, the implementation will need to declare the combined call signature that you'll be handling, it won't be inferred for you. You can readily see examples of overloads in DOM APIs, e.g. `createElement`.\n\n[Read more about Overloading in the Handbook.](https://www.typescriptlang.org/docs/handbook/functions.html#overloads)\n\n#### Using Inferred Types\n\nLeaning on TypeScript's Type Inference is great... until you realize you need a type that was inferred, and have to go back and explicitly declare types/interfaces so you can export them for reuse.\n\nFortunately, with `typeof`, you won't have to do that. Just use it on any value:\n\n```tsx\nconst [state, setState] = useState({\n  foo: 1,\n  bar: 2,\n}); // state's type inferred to be {foo: number, bar: number}\n\nconst someMethod = (obj: typeof state) => {\n  // grabbing the type of state even though it was inferred\n  // some code using obj\n  setState(obj); // this works\n};\n```\n\n#### Using Partial Types\n\nWorking with slicing state and props is common in React. Again, you don't really have to go and explicitly redefine your types if you use the `Partial` generic type:\n\n```tsx\nconst [state, setState] = useState({\n  foo: 1,\n  bar: 2,\n}); // state's type inferred to be {foo: number, bar: number}\n\n// NOTE: stale state merging is not actually encouraged in useState\n// we are just demonstrating how to use Partial here\nconst partialStateUpdate = (obj: Partial<typeof state>) =>\n  setState({ ...state, ...obj });\n\n// later on...\npartialStateUpdate({ foo: 2 }); // this works\n```\n\n<details>\n<summary><b>Minor caveats on using <code>Partial</code></b></summary>\n\nNote that there are some TS users who don't agree with using `Partial` as it behaves today. See [subtle pitfalls of the above example here](https://twitter.com/ferdaber/status/1084798596027957248), and check out this long discussion on [why @types/react uses Pick instead of Partial](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365).\n\n</details>\n\n#### The Types I need weren't exported!\n\nThis can be annoying but here are ways to grab the types!\n\n- Grabbing the Prop types of a component: Use `React.ComponentProps` and `typeof`, and optionally `Omit` any overlapping types\n\n```tsx\nimport { Button } from \"library\"; // but doesn't export ButtonProps! oh no!\ntype ButtonProps = React.ComponentProps<typeof Button>; // no problem! grab your own!\ntype AlertButtonProps = Omit<ButtonProps, \"onClick\">; // modify\nconst AlertButton = (props: AlertButtonProps) => (\n  <Button onClick={() => alert(\"hello\")} {...props} />\n);\n```\n\nYou may also use [`ComponentPropsWithoutRef`](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a05cc538a42243c632f054e42eab483ebf1560ab/types/react/index.d.ts#L774) (instead of ComponentProps) and [`ComponentPropsWithRef`](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a05cc538a42243c632f054e42eab483ebf1560ab/types/react/index.d.ts#L770) (if your component specifically forwards refs)\n\n- Grabbing the return type of a function: use `ReturnType`:\n\n```tsx\n// inside some library - return type { baz: number } is inferred but not exported\nfunction foo(bar: string) {\n  return { baz: 1 };\n}\n\n//  inside your app, if you need { baz: number }\ntype FooReturn = ReturnType<typeof foo>; // { baz: number }\n```\n\nIn fact you can grab virtually anything public: [see this blogpost from Ivan Koshelev](http://ikoshelev.azurewebsites.net/search/id/11/Pragmatic-uses-of-TypeScript-type-system-My-type-of-type)\n\n```ts\nfunction foo() {\n  return {\n    a: 1,\n    b: 2,\n    subInstArr: [\n      {\n        c: 3,\n        d: 4,\n      },\n    ],\n  };\n}\n\ntype InstType = ReturnType<typeof foo>;\ntype SubInstArr = InstType[\"subInstArr\"];\ntype SubInstType = SubInstArr[0];\n\nlet baz: SubInstType = {\n  c: 5,\n  d: 6, // type checks ok!\n};\n\n//You could just write a one-liner,\n//But please make sure it is forward-readable\n//(you can understand it from reading once left-to-right with no jumps)\ntype SubInstType2 = ReturnType<typeof foo>[\"subInstArr\"][0];\nlet baz2: SubInstType2 = {\n  c: 5,\n  d: 6, // type checks ok!\n};\n```\n\n- TS also ships with a `Parameters` utility type for extracting the parameters of a function\n- for anything more \"custom\", the `infer` keyword is the basic building block for this, but takes a bit of getting used to. Look at the source code for the above utility types, and [this example](https://twitter.com/mgechev/status/1211030455224422401?s=20) to get the idea. Basarat [also has a good video on `infer`](https://www.youtube.com/watch?v=ijK-1R-LFII&list=PLYvdvJlnTOjF6aJsWWAt7kZRJvzw-en8B&index=3&t=0s).\n\n#### The Types I need don't exist!\n\nWhat's more annoying than modules with unexported types? Modules that are **untyped**!\n\n> Before you proceed - make sure you have checked that types don't exist in [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped) or [TypeSearch](https://microsoft.github.io/TypeSearch/)\n\nFret not! There are more than a couple of ways in which you can solve this problem.\n\n##### Slapping `any` on everything\n\nA **lazier** way would be to create a new type declaration file, say `typedec.d.ts`– if you don't already have one. Ensure that the path to file is resolvable by TypeScript by checking the `include` array in the `tsconfig.json` file at the root of your directory.\n\n```json\n// inside tsconfig.json\n{\n  // ...\n  \"include\": [\n    \"src\" // automatically resolves if the path to declaration is src/typedec.d.ts\n  ]\n  // ...\n}\n```\n\nWithin this file, add the `declare` syntax for your desired module, say `my-untyped-module`– to the declaration file:\n\n```ts\n// inside typedec.d.ts\ndeclare module \"my-untyped-module\";\n```\n\nThis one-liner alone is enough if you just need it to work without errors. A even hackier, write-once-and-forget way would be to use `\"*\"` instead which would then apply the `Any` type for all existing and future untyped modules.\n\nThis solution works well as a workaround if you have less than a couple untyped modules. Anything more, you now have a ticking type-bomb in your hands. The only way of circumventing this problem would be to define the missing types for those untyped modules as explained in the following sections.\n\n##### Autogenerate types\n\nYou can use TypeScript with `--allowJs` and `--declaration` to see TypeScript's \"best guess\" at the types of the library.\n\nIf this doesn't work well enough, use [`dts-gen`](https://github.com/Microsoft/dts-gen) to use the runtime shape of the object to accurately enumerate all available properties. This tends to be very accurate, BUT the tool does not yet support scraping JSDoc comments to populate additional types.\n\n```bash\nnpm install -g dts-gen\ndts-gen -m <your-module>\n```\n\nThere are other automated JS to TS conversion tools and migration strategies - see [our MIGRATION cheatsheet](https://react-typescript-cheatsheet.netlify.app/docs/migration/from_js).\n\n##### Typing Exported Hooks\n\nTyping Hooks is just like typing pure functions.\n\nThe following steps work under two assumptions:\n\n- You have already created a type declaration file as stated earlier in the section.\n- You have access to the source code - specifically the code that directly exports the functions you will be using. In most cases, it would be housed in an `index.js` file.\n  Typically you need a minimum of **two** type declarations (one for **Input Prop** and the other for **Return Prop**) to define a hook completely. Suppose the hook you wish to type follows the following structure,\n\n```js\n// ...\nconst useUntypedHook = (prop) => {\n  // some processing happens here\n  return {\n    /* ReturnProps */\n  };\n};\nexport default useUntypedHook;\n```\n\nthen, your type declaration should most likely follow the following syntax.\n\n```ts\ndeclare module 'use-untyped-hook' {\n  export interface InputProps { ... }   // type declaration for prop\n  export interface ReturnProps { ... } // type declaration for return props\n  export default function useUntypedHook(\n    prop: InputProps\n    // ...\n  ): ReturnProps;\n}\n```\n\n<details>\n<summary><b>For instance, the <a href=\"https://github.com/donavon/use-dark-mode\">useDarkMode hook</a> exports the functions that follows a similar structure.</b></summary>\n\n```js\n// inside src/index.js\nconst useDarkMode = (\n  initialValue = false, // -> input props / config props to be exported\n  {\n    // -> input props / config props to be exported\n    element,\n    classNameDark,\n    classNameLight,\n    onChange,\n    storageKey = \"darkMode\",\n    storageProvider,\n    global,\n  } = {}\n) => {\n  // ...\n  return {\n    // -> return props to be exported\n    value: state,\n    enable: useCallback(() => setState(true), [setState]),\n    disable: useCallback(() => setState(false), [setState]),\n    toggle: useCallback(() => setState((current) => !current), [setState]),\n  };\n};\nexport default useDarkMode;\n```\n\nAs the comments suggest, exporting these config props and return props following the aforementioned structure will result in the following type export.\n\n```ts\ndeclare module \"use-dark-mode\" {\n  /**\n   * A config object allowing you to specify certain aspects of `useDarkMode`\n   */\n  export interface DarkModeConfig {\n    classNameDark?: string; // A className to set \"dark mode\". Default = \"dark-mode\".\n    classNameLight?: string; // A className to set \"light mode\". Default = \"light-mode\".\n    element?: HTMLElement; // The element to apply the className. Default = `document.body`\n    onChange?: (val?: boolean) => void; // Override the default className handler with a custom callback.\n    storageKey?: string; // Specify the `localStorage` key. Default = \"darkMode\". Set to `null` to disable persistent storage.\n    storageProvider?: WindowLocalStorage; // A storage provider. Default = `localStorage`.\n    global?: Window; // The global object. Default = `window`.\n  }\n  /**\n   * An object returned from a call to `useDarkMode`.\n   */\n  export interface DarkMode {\n    readonly value: boolean;\n    enable: () => void;\n    disable: () => void;\n    toggle: () => void;\n  }\n  /**\n   * A custom React Hook to help you implement a \"dark mode\" component for your application.\n   */\n  export default function useDarkMode(\n    initialState?: boolean,\n    config?: DarkModeConfig\n  ): DarkMode;\n}\n```\n\n</details>\n\n##### Typing Exported Components\n\nIn case of typing untyped class components, there's almost no difference in approach except for the fact that after declaring the types, you export the extend the type using `class UntypedClassComponent extends React.Component<UntypedClassComponentProps, any> {}` where `UntypedClassComponentProps` holds the type declaration.\n\nFor instance, [sw-yx's Gist on React Router 6 types](https://gist.github.com/sw-yx/37a6a3d248c2d4031801f0d568904df8) implemented a similar method for typing the then untyped RR6.\n\n```ts\ndeclare module \"react-router-dom\" {\n  import * as React from 'react';\n  // ...\n  type NavigateProps<T> = {\n    to: string | number,\n    replace?: boolean,\n    state?: T\n  }\n  //...\n  export class Navigate<T = any> extends React.Component<NavigateProps<T>>{}\n  // ...\n```\n\nFor more information on creating type definitions for class components, you can refer to this [post](https://templecoding.com/blog/2016/03/31/creating-typescript-typings-for-existing-react-components) for reference.\n\n#### Frequent Known Problems with TypeScript\n\nJust a list of stuff that React developers frequently run into, that TS has no solution for. Not necessarily TSX only.\n\n##### TypeScript doesn't narrow after an object element null check\n\n[![https://pbs.twimg.com/media/E0u6b9uUUAAgwAk?format=jpg&name=medium](https://pbs.twimg.com/media/E0u6b9uUUAAgwAk?format=jpg&name=medium)](https://mobile.twitter.com/tannerlinsley/status/1390409931627499523)\n\nRef: https://mobile.twitter.com/tannerlinsley/status/1390409931627499523. see also https://github.com/microsoft/TypeScript/issues/9998\n\n##### TypeScript doesn't let you restrict the type of children\n\nGuaranteeing typesafety for this kind of API isn't possible:\n\n```tsx\n<Menu>\n  <MenuItem/> {/* ok */}\n  <MenuLink/> {/* ok */}\n  <div> {/* error */}\n</Menu>\n```\n\nSource: https://twitter.com/ryanflorence/status/1085745787982700544?s=20\n\n<!--END-SECTION:types-->\n\n<!--START-SECTION:operators-->\n\n### Troubleshooting Handbook: Operators\n\n- `typeof` and `instanceof`: type query used for refinement\n- `keyof`: get keys of an object. `keyof T` is an operator to tell you what values of `k` can be used for `obj[k]`.\n  - [Some misconceptions here](https://twitter.com/SeaRyanC/status/1418678670739218438?s=20).\n- `O[K]`: property lookup\n- `[K in O]`: mapped types\n- `+` or `-` or `readonly` or `?`: addition and subtraction and readonly and optional modifiers\n- `x ? Y : Z`: Conditional types for generic types, type aliases, function parameter types\n- `!`: Nonnull assertion for nullable types\n- `=`: Generic type parameter default for generic types\n- `as`: type assertion\n- `is`: type guard for function return types\n\nConditional Types are a difficult topic to get around so here are some extra resources:\n\n- fully walked through explanation https://artsy.github.io/blog/2018/11/21/conditional-types-in-typescript/\n- Bailing out and other advanced topics https://github.com/sw-yx/ts-spec/blob/master/conditional-types.md\n- Basarat's video https://www.youtube.com/watch?v=SbVgPQDealg&list=PLYvdvJlnTOjF6aJsWWAt7kZRJvzw-en8B&index=2&t=0s\n- [Generics, Conditional types and Mapped types](https://www.youtube.com/watch?v=PJjeHzvi_VQ&feature=youtu.be)\n\n<!--END-SECTION:operators-->\n\n<!--START-SECTION:utilities-->\n\n### Troubleshooting Handbook: Utilities\n\nThese are all built in, [see source in es5.d.ts](https://github.com/microsoft/TypeScript/blob/33a34e5b96bfe086266f4765ab9789a2a02507f9/src/lib/es5.d.ts#L1523-L1637):\n\n- `Awaited`: emulate the behavior of `await`\n- `Capitalize`: convert first character of string literal type to uppercase\n- `ConstructorParameters`: a tuple of class constructor's parameter types\n- `Exclude`: exclude a type from another type\n- `Extract`: select a subtype that is assignable to another type\n- `InstanceType`: the instance type you get from a `new`ing a class constructor\n- `Lowercase`: convert string literal type to lowercase\n- `NonNullable`: exclude `null` and `undefined` from a type\n- `Omit`: construct a type with the properties of another type.\n- `OmitThisParameter`: remove the 'this' parameter from a function type.\n- `Parameters`: a tuple of a function's parameter types\n- `Partial`: Make all properties in an object optional\n- `Readonly`: Make all properties in an object readonly\n- `ReadonlyArray`: Make an immutable array of the given type\n- `Pick`: A subtype of an object type with a subset of its keys\n- `Record`: A map from a key type to a value type\n- `Required`: Make all properties in an object required\n- `ReturnType`: A function's return type\n- `ThisParameterType`: extract the type of the 'this' parameter of a function type\n- `ThisType`: marker for contextual 'this' type\n- `Uncapitalize`: convert first character of string literal type to lowercase\n- `Uppercase`: convert string literal type to uppercase\n\n<!--END-SECTION:utilities-->\n\n<!--START-SECTION:ts-config-->\n\n### Troubleshooting Handbook: tsconfig.json\n\nYou can find [all the Compiler options in the TypeScript docs](https://www.typescriptlang.org/docs/handbook/compiler-options.html). [The new TS docs also has per-flag annotations of what each does](https://www.typescriptlang.org/tsconfig#allowSyntheticDefaultImports). This is the setup I roll with for APPS (not libraries - for libraries you may wish to see the settings we use in `tsdx`):\n\n```json\n{\n  \"compilerOptions\": {\n    \"incremental\": true,\n    \"outDir\": \"build/lib\",\n    \"target\": \"es5\",\n    \"module\": \"esnext\",\n    \"lib\": [\"DOM\", \"ESNext\"],\n    \"sourceMap\": true,\n    \"importHelpers\": true,\n    \"declaration\": true,\n    \"rootDir\": \"src\",\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"allowJs\": false,\n    \"jsx\": \"react\",\n    \"moduleResolution\": \"node\",\n    \"baseUrl\": \"src\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"esModuleInterop\": true,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"experimentalDecorators\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"build\", \"scripts\"]\n}\n```\n\nYou can find more [recommended TS config here](https://github.com/tsconfig/bases).\n\nPlease open an issue and discuss if there are better recommended choices for React.\n\nSelected flags and why we like them:\n\n- `esModuleInterop`: disables namespace imports (`import * as foo from \"foo\"`) and enables CJS/AMD/UMD style imports (`import fs from \"fs\"`)\n- `strict`: `strictPropertyInitialization` forces you to initialize class properties or explicitly declare that they can be undefined. You can opt out of this with a definite assignment assertion.\n- `\"typeRoots\": [\"./typings\", \"./node_modules/@types\"]`: By default, TypeScript looks in `node_modules/@types` and parent folders for third party type declarations. You may wish to override this default resolution so you can put all your global type declarations in a special `typings` folder.\n\nCompilation time grows linearly with size of codebase. For large projects, you will want to use [Project References](https://www.typescriptlang.org/docs/handbook/project-references.html). See our [ADVANCED](https://react-typescript-cheatsheet.netlify.app/docs/advanced) cheatsheet for commentary.\n\n<!--END-SECTION:ts-config-->\n\n<!--START-SECTION:official-typings-bugs-->\n\n### Troubleshooting Handbook: Fixing bugs in official typings\n\nIf you run into bugs with your library's official typings, you can copy them locally and tell TypeScript to use your local version using the \"paths\" field. In your `tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"mobx-react\": [\"../typings/modules/mobx-react\"]\n    }\n  }\n}\n```\n\n[Thanks to @adamrackis for the tip.](https://twitter.com/AdamRackis/status/1024827730452520963)\n\nIf you just need to add an interface, or add missing members to an existing interface, you don't need to copy the whole typing package. Instead, you can use [declaration merging](https://www.typescriptlang.org/docs/handbook/declaration-merging.html):\n\n```tsx\n// my-typings.ts\ndeclare module \"plotly.js\" {\n  interface PlotlyHTMLElement {\n    removeAllListeners(): void;\n  }\n}\n\n// MyComponent.tsx\nimport { PlotlyHTMLElement } from \"plotly.js\";\n\nconst f = (e: PlotlyHTMLElement) => {\n  e.removeAllListeners();\n};\n```\n\nYou don't always have to implement the module, you can simply import the module as `any` for a quick start:\n\n```tsx\n// my-typings.ts\ndeclare module \"plotly.js\"; // each of its imports are `any`\n```\n\nBecause you don't have to explicitly import this, this is known as an [ambient module declaration](https://www.typescriptlang.org/docs/handbook/namespaces-and-modules.html#pitfalls-of-namespaces-and-modules). You can do AMD's in a script-mode `.ts` file (no imports or exports), or a `.d.ts` file anywhere in your project.\n\nYou can also do ambient variable and ambient type declarations:\n\n```ts\n// ambient utility type\ntype ToArray<T> = T extends unknown[] ? T : T[];\n// ambient variable\ndeclare let process: {\n  env: {\n    NODE_ENV: \"development\" | \"production\";\n  };\n};\nprocess = {\n  env: {\n    NODE_ENV: \"production\",\n  },\n};\n```\n\nYou can see examples of these included in the built in type declarations in the `lib` field of `tsconfig.json`\n\n<!--END-SECTION:official-typings-bugs-->\n\n<!--START-SECTION:non-ts-files-->\n\n### Troubleshooting Handbook: Globals, Images and other non-TS files\n\nUse [declaration merging](https://www.typescriptlang.org/docs/handbook/declaration-merging.html).\n\nIf, say, you are using a third party JS script that attaches on to the `window` global, you can extend `Window`:\n\n```ts\ndeclare global {\n  interface Window {\n    MyVendorThing: MyVendorType;\n  }\n}\n```\n\nLikewise if you wish to \"import\" an image or other non TS/TSX file:\n\n```ts\n// declaration.d.ts\n// anywhere in your project, NOT the same name as any of your .ts/tsx files\ndeclare module \"*.png\";\n\n// importing in a tsx file\nimport * as logo from \"./logo.png\";\n```\n\nNote that `tsc` cannot bundle these files for you, you will have to use Webpack or Parcel.\n\nRelated issue: https://github.com/Microsoft/TypeScript-React-Starter/issues/12 and [StackOverflow](https://stackoverflow.com/a/49715468/4216035)\n\n<!--END-SECTION:non-ts-files-->\n\n<!--START-SECTION:editor-integration-->\n\n### Editor Tooling and Integration\n\n- VSCode\n  - swyx's VSCode Extension: https://github.com/sw-yx/swyx-react-typescript-snippets\n  - amVim: https://marketplace.visualstudio.com/items?itemName=auiworks.amvim\n- VIM\n  - https://github.com/Quramy/tsuquyomi\n  - nvim-typescript?\n  - https://github.com/leafgarland/typescript-vim\n  - peitalin/vim-jsx-typescript\n  - NeoVim: https://github.com/neoclide/coc.nvim\n  - other discussion: https://mobile.twitter.com/ryanflorence/status/1085715595994095620\n\nYou are free to use this repo's TSX logo if you wish:\n\n[![https://user-images.githubusercontent.com/6764957/53868378-2b51fc80-3fb3-11e9-9cee-0277efe8a927.png](https://user-images.githubusercontent.com/6764957/53868378-2b51fc80-3fb3-11e9-9cee-0277efe8a927.png)](https://user-images.githubusercontent.com/6764957/53868378-2b51fc80-3fb3-11e9-9cee-0277efe8a927.png)\n\nYou may also wish to use alternative logos - [jsx-tsx-logos](https://github.com/Protectator/jsx-tsx-logos)\n\n![https://github.com/Protectator/jsx-tsx-logos/raw/master/example.png](https://github.com/Protectator/jsx-tsx-logos/raw/master/example.png)\n\n<!--END-SECTION:editor-integration-->\n\n<!--START-SECTION:linting-->\n\n### Linting\n\n> ⚠️Note that [TSLint is now in maintenance and you should try to use ESLint instead](https://medium.com/palantir/tslint-in-2019-1a144c2317a9). If you are interested in TSLint tips, please check this PR from [@azdanov](https://github.com/typescript-cheatsheets/react/pull/14). The rest of this section just focuses on ESLint. [You can convert TSlint to ESlint with this tool](https://github.com/typescript-eslint/tslint-to-eslint-config).\n\n> ⚠️This is an evolving topic. `typescript-eslint-parser` is no longer maintained and [work has recently begun on `typescript-eslint` in the ESLint community](https://eslint.org/blog/2019/01/future-typescript-eslint) to bring ESLint up to full parity and interop with TSLint.\n\nFollow the TypeScript + ESLint docs at https://github.com/typescript-eslint/typescript-eslint:\n\n```\nyarn add -D @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint\n```\n\nadd a `lint` script to your `package.json`:\n\n```json\n  \"scripts\": {\n    \"lint\": \"eslint 'src/**/*.ts'\"\n  },\n```\n\nand a suitable `.eslintrc.js` (using `.js` over `.json` here so we can add comments):\n\n```js\nmodule.exports = {\n  env: {\n    es6: true,\n    node: true,\n    jest: true,\n  },\n  extends: \"eslint:recommended\",\n  parser: \"@typescript-eslint/parser\",\n  plugins: [\"@typescript-eslint\"],\n  parserOptions: {\n    ecmaVersion: 2017,\n    sourceType: \"module\",\n  },\n  rules: {\n    indent: [\"error\", 2],\n    \"linebreak-style\": [\"error\", \"unix\"],\n    quotes: [\"error\", \"single\"],\n    \"no-console\": \"warn\",\n    \"no-unused-vars\": \"off\",\n    \"@typescript-eslint/no-unused-vars\": [\n      \"error\",\n      { vars: \"all\", args: \"after-used\", ignoreRestSiblings: false },\n    ],\n    \"@typescript-eslint/explicit-function-return-type\": \"warn\", // Consider using explicit annotations for object literals and function return types even when they can be inferred.\n    \"no-empty\": \"warn\",\n  },\n};\n```\n\nMost of this is taken from [the `tsdx` PR](https://github.com/palmerhq/tsdx/pull/70/files) which is for **libraries**.\n\nMore `.eslintrc.json` options to consider with more options you may want for **apps**:\n\n```json\n{\n  \"extends\": [\n    \"airbnb\",\n    \"prettier\",\n    \"prettier/react\",\n    \"plugin:prettier/recommended\",\n    \"plugin:jest/recommended\",\n    \"plugin:unicorn/recommended\"\n  ],\n  \"plugins\": [\"prettier\", \"jest\", \"unicorn\"],\n  \"parserOptions\": {\n    \"sourceType\": \"module\",\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    }\n  },\n  \"env\": {\n    \"es6\": true,\n    \"browser\": true,\n    \"jest\": true\n  },\n  \"settings\": {\n    \"import/resolver\": {\n      \"node\": {\n        \"extensions\": [\".js\", \".jsx\", \".ts\", \".tsx\"]\n      }\n    }\n  },\n  \"overrides\": [\n    {\n      \"files\": [\"**/*.ts\", \"**/*.tsx\"],\n      \"parser\": \"typescript-eslint-parser\",\n      \"rules\": {\n        \"no-undef\": \"off\"\n      }\n    }\n  ]\n}\n```\n\nAnother great resource is [\"Using ESLint and Prettier in a TypeScript Project\"](https://dev.to/robertcoopercode/using-eslint-and-prettier-in-a-typescript-project-53jb) by @robertcoopercode.\n\nWes Bos is also working on [TypeScript support for his eslint+prettier config.](https://github.com/wesbos/eslint-config-wesbos/issues/68)\n\nIf you're looking for information on Prettier, check out the [Prettier](https://github.com/typescript-cheatsheets/react/blob/main/docs/advanced/misc-concerns.md#prettier) guide.\n\n<!--END-SECTION:linting-->\n\n<!--START-SECTION:resources-->\n\n### Other React + TypeScript resources\n\n- me! <https://twitter.com/swyx>\n- https://www.freecodecamp.org/news/how-to-build-a-todo-app-with-react-typescript-nodejs-and-mongodb/\n- <https://github.com/piotrwitek/react-redux-typescript-guide> - **HIGHLY HIGHLY RECOMMENDED**, i wrote this repo before knowing about this one, this has a lot of stuff I don't cover, including **REDUX** and **JEST**.\n- [10 Bad TypeScript Habits](https://startup-cto.net/10-bad-typescript-habits-to-break-this-year/):\n  1. not using `\"strict\": true`\n  2. using `||` for default values when we have `??`\n  3. Using `any` instead of `unknown` for API responses\n  4. using `as` assertion instead of Type Guards (`function isFoo(obj: unknown): obj is Foo {}`)\n  5. `as any` in tests\n  6. Marking optional properties instead of modeling which combinations exist by extending interfaces\n  7. One letter generics\n  8. Non-boolean `if (nonboolean)` checks\n  9. bangbang checks `if (!!nonboolean)`\n  10. `!= null` to check for `null` and `undefined`\n- [Ultimate React Component Patterns with TypeScript 2.8](https://levelup.gitconnected.com/ultimate-react-component-patterns-with-typescript-2-8-82990c516935)\n- [Basarat's TypeScript gitbook has a React section](https://basarat.gitbook.io/typescript/tsx/react) with an [Egghead.io course](https://egghead.io/courses/use-typescript-to-develop-react-applications) as well.\n- [Palmer Group's TypeScript + React Guidelines](https://github.com/palmerhq/typescript) as well as Jared's other work like [disco.chat](https://github.com/jaredpalmer/disco.chat)\n- [Sindre Sorhus' TypeScript Style Guide](https://github.com/sindresorhus/typescript-definition-style-guide)\n- [TypeScript React Starter Template by Microsoft](https://github.com/Microsoft/TypeScript-React-Starter) A starter template for TypeScript and React with a detailed README describing how to use the two together. Note: this doesn't seem to be frequently updated anymore.\n- [Steve Kinney's React and TypeScript course on Frontend Masters (paid)](https://frontendmasters.com/courses/react-typescript/)\n- [Brian Holt's Intermediate React course on Frontend Masters (paid)](https://frontendmasters.com/courses/intermediate-react/converting-the-app-to-typescript/) - Converting App To TypeScript Section\n- [Mike North's Production TypeScript course on Frontend Masters (paid)](https://frontendmasters.com/courses/production-typescript/)\n- [TSX Guide](https://jenil.github.io/chota/) by [gojutin](https://github.com/gojutin/www.tsx.guide)\n- TypeScript conversion:\n  - [Lyft's React-To-TypeScript conversion CLI](https://github.com/lyft/react-javascript-to-typescript-transform)\n  - [Gustav Wengel's blogpost - converting a React codebase to TypeScript](http://www.gustavwengel.dk/converting-typescript-to-javascript-part-1)\n  - [Microsoft React TypeScript conversion guide](https://github.com/Microsoft/TypeScript-React-Conversion-Guide#typescript-react-conversion-guide)\n- [Matt Pocock's Beginner's Typescript Tutorial](https://github.com/total-typescript/beginners-typescript-tutorial)\n- [Matt Pocock's React with TypeScript Tutorial](https://www.totaltypescript.com/tutorials/react-with-typescript)\n- [You?](https://github.com/typescript-cheatsheets/react/issues/new).\n\n<!--END-SECTION:resources-->\n\n<!--START-SECTION:talks-->\n\n### Recommended React + TypeScript talks\n\n- [Ultimate React Component Patterns with TypeScript](https://www.youtube.com/watch?v=_PBQ3if6Fmg), by Martin Hochel, GeeCon Prague 2018\n- [How to Build React Apps with TypeScript](https://youtu.be/LJzGGmu5APA?si=YNzy7T_8yj7TuXxS), by ClearEdge Tech Talk 2022\n- [Create a More Readable React Codebase Using TypeScript](https://youtu.be/nkJbGgieALI?si=IFZZIMEiXz7AsiBv), by Emma Brillhart 2019\n- [Advanced TypeScript with React](https://youtu.be/zQfD4ZxxyKA?si=FmrgOq667svX6C9O), by Nikhil Verma 2019\n- [Senior Typescript Features You don't Know About - clean-code](https://www.youtube.com/watch?v=Y4u97vJqmhM), by CoderOne 2023\n- [React & TypeScript - Course for Beginners](https://www.youtube.com/watch?v=FJDVKeh7RJI), by FreeCodeCamp 2022\n- [TypeScript + React](https://www.youtube.com/watch?v=1ZnrX3wiNTU), by Chris Toomey 2019\n- [Mastering React Hooks](https://www.youtube.com/watch?v=zM_ZiSl2n2E), by Jack Herrington 2021\n- [Using Hooks and codegen](https://www.youtube.com/watch?v=cdsnzfJUqm0) by Tejas Kumar 2019\n\n- Please help contribute to this new section!\n\n<!--END-SECTION:talks-->\n\n<!--START-SECTION:learn-ts-->\n\n### Time to Really Learn TypeScript\n\nBelieve it or not, we have only barely introduced TypeScript here in this cheatsheet. If you are still facing TypeScript troubleshooting issues, it is likely that your understanding of TS is still too superficial.\n\nThere is a whole world of generic type logic that you will eventually get into, however it becomes far less dealing with React than just getting good at TypeScript so it is out of scope here. But at least you can get productive in React now :)\n\nIt is worth mentioning some resources to help you get started:\n\n- Step through the 40+ examples under [the playground's](http://www.typescriptlang.org/play/index.html) Examples section, written by @Orta\n- Anders Hejlsberg's overview of TS: https://www.youtube.com/watch?v=ET4kT88JRXs\n- Marius Schultz: https://blog.mariusschulz.com/series/typescript-evolution with an [Egghead.io course](https://egghead.io/courses/advanced-static-types-in-typescript)\n- Basarat's Deep Dive: https://basarat.gitbook.io/typescript/\n- Axel Rauschmeyer's [Tackling TypeScript](https://exploringjs.com/tackling-ts/)\n- Rares Matei: [Egghead.io course](https://egghead.io/courses/practical-advanced-typescript)'s advanced TypeScript course on Egghead.io is great for newer typescript features and practical type logic applications (e.g. recursively making all properties of a type `readonly`)\n- Learn about [Generics, Conditional types and Mapped types](https://www.youtube.com/watch?v=PJjeHzvi_VQ&feature=youtu.be)\n- Shu Uesugi: [TypeScript for Beginner Programmers](https://ts.chibicode.com/)\n- Here is another [TypeScript Error Guide](https://github.com/threehams/typescript-error-guide/) that you can check for your errors.\n\n<!--END-SECTION:learn-ts-->\n\n<!--START-SECTION:examples-->\n\n### Example App\n\n- [Create React App TypeScript Todo Example 2021](https://github.com/laststance/create-react-app-typescript-todo-example-2021)\n- [Ben Awad's 14 hour Fullstack React/GraphQL/TypeScript Tutorial](https://www.youtube.com/watch?v=I6ypD7qv3Z8)\n- [Cypress Realworld App](https://github.com/cypress-io/cypress-realworld-app)\n\n<!--END-SECTION:examples-->\n\n## My question isn't answered here!\n\n- [File an issue](https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new).\n\n## Contributors\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. See [CONTRIBUTORS.md](/CONTRIBUTORS.md) for the full list. Contributions of any kind welcome!\n"
        },
        {
          "name": "code-of-conduct.md",
          "type": "blob",
          "size": 5.794921875,
          "content": "# Our Code of Conduct\n\nThis code of conduct outlines our expectations for participants within\nthe [typescript-cheatsheets/react](https://github.com/typescript-cheatsheets/react) repository, as well as steps to\nreporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect\nour code of conduct to be honored. Anyone who violates this code of conduct may be banned from the community.\n\nOur open source repository strives to:\n\n- **Be friendly and patient.**\n- **Be welcoming**: We strive to be a community that welcomes and supports people of all backgrounds and identities.\n  This includes, but is not limited to members of any race, ethnicity, culture, national origin, colour, immigration\n  status, social and economic class, educational level, sex, sexual orientation, gender identity and expression, age,\n  size, family status, political belief, religion, and mental and physical ability.\n- **Be considerate**: Your work will be used by other people, and you in turn will depend on the work of others. Any\n  decision you take will affect users and colleagues, and you should take those consequences into account when making\n  decisions. Remember that we're a world-wide community, so you might not be communicating in someone else's primary\n  language.\n- **Be respectful**: Not all of us will agree all the time, but disagreement is no excuse for poor behavior and poor\n  manners. We might all experience some frustration now and then, but we cannot allow that frustration to turn into a\n  personal attack. It’s important to remember that a community where people feel uncomfortable or threatened is not a\n  productive one.\n- **Be careful in the words that you choose**: we are a community of professionals, and we conduct ourselves\n  professionally. Be kind to others. Do not insult or put down other participants. Harassment and other exclusionary\n  behavior aren't acceptable. This includes, but is not limited to:\n  - Violent threats or language directed against another person.\n  - Discriminatory jokes and language.\n  - Posting sexually explicit or violent material.\n  - Posting (or threatening to post) other people's personally identifying information (\"doxing\").\n  - Personal insults, especially those using racist or sexist terms.\n  - Unwelcome sexual attention.\n  - Advocating for, or encouraging, any of the above behavior.\n  - Repeated harassment of others. In general, if someone asks you to stop, then stop.\n- **When we disagree, try to understand why**: Disagreements, both social and technical, happen all the time. It is\n  important that we resolve disagreements and differing views constructively. Remember that we’re different. The\n  strength of our community comes from its diversity, people from a wide range of backgrounds. Different people have\n  different perspectives on issues. Being unable to understand why someone holds a viewpoint doesn’t mean that they’re\n  wrong. Don’t forget that it is human to err and blaming each other doesn’t get us anywhere. Instead, focus on helping\n  to resolve issues and learning from mistakes.\n\nThis code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared\nenvironment, and goals. We expect it to be followed in spirit as much as in the letter.\n\n### Diversity Statement\n\nWe encourage everyone to participate and are committed to building a repository for all. Although we may not be able to\nsatisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take\nresponsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and\nrespectfully, and do our best to right the wrong.\n\nAlthough this list cannot be exhaustive, we explicitly honor diversity in age, gender, gender identity or expression,\nculture, ethnicity, language, national origin, political beliefs, profession, race, religion, sexual orientation,\nsocioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected\ncharacteristics above, including participants with disabilities.\n\n### Reporting Issues\n\nIf you experience or witness unacceptable behavior—or have any other concerns—please report it by contacting us (This\nrepo is maintained by [@swyx](https://twitter.com/swyx), [@eps1lon](https://twitter.com/sebsilbermann)\nand [@filiptammergard](https://twitter.com/tammergard).). All reports will be handled with discretion. In your report\nplease include:\n\n- Your contact information.\n- Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include\n  them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly\n  available record (e.g. a mailing list archive or a public IRC logger), please include a link.\n- Any additional information that may be helpful.\n\nAfter filing a report, a representative will contact you personally. If the person who is harassing you is part of the\nresponse team, they will recuse themselves from handling your incident. A representative will then review the incident,\nfollow up with any additional questions, and make a decision as to how to respond. We will respect confidentiality\nrequests for the purpose of protecting victims of abuse.\n\nAnyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable\nbehavior, the representative may take any action they deem appropriate, up to and including a permanent ban from our\ncommunity without warning.\n\n## Version\n\nThis is version 1.0.0\n\n## Thanks\n\nThis code of conduct is based on the [Open Code of Conduct](https://github.com/todogroup/opencodeofconduct) from\nthe [TODOGroup](http://todogroup.org).\n\nWe are thankful for their work and all the communities who have paved the way with code of conducts.\n"
        },
        {
          "name": "copyFile.js",
          "type": "blob",
          "size": 0.4541015625,
          "content": "const fs = require(\"fs\");\nconst filesTopCopy = [\n  {\n    src: \"../CONTRIBUTORS.md\",\n    dest: \"src/pages/contributors.md\",\n  },\n  {\n    src: \"../CONTRIBUTING.md\",\n    dest: \"src/pages/contributing.md\",\n  },\n];\n\nfunction copyFile(src, dest) {\n  fs.copyFile(src, dest, (err) => {\n    if (err) {\n      console.log(\"Error Found:\", err);\n    } else {\n      console.log(\"Files copied\");\n    }\n  });\n}\n\nfilesTopCopy.forEach(({ src, dest }) => {\n  copyFile(src, dest);\n});\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "genReadme.js",
          "type": "blob",
          "size": 9.8955078125,
          "content": "const fs = require(\"fs/promises\");\nconst path = require(\"path\");\nconst Fm = require(\"front-matter\");\nconst Toc = require(\"markdown-toc\");\nconst prettier = require(\"prettier\");\nconst yargs = require(\"yargs/yargs\");\nconst { hideBin } = require(\"yargs/helpers\");\n\nconst repositoryRootPath = __dirname;\nconst readmePath = path.resolve(repositoryRootPath, \"./README.md\");\n/**\n * level of the heading under which the generated content is displayed\n */\nconst baseHeadingLevel = 2;\nconst defaultOptions = {\n  withKey: \"title\",\n  withToc: false,\n  showHeading: true,\n  relativeHeadingLevel: 2,\n  tabLevel: 1,\n  prefix: \"\",\n  suffix: \"\",\n};\n\nasync function readContentFromPath(relativePath) {\n  let MdDoc = await fs.readFile(path.join(repositoryRootPath, relativePath), {\n    encoding: \"utf8\",\n  });\n  let MdContent = Fm(MdDoc.toString());\n  let TableOfContents = Toc(MdContent.body).content;\n  return {\n    frontmatter: MdContent.attributes,\n    body: MdContent.body,\n    toc: TableOfContents,\n  };\n}\n\nasync function updateSectionWith(options) {\n  const {\n    from,\n    relativeHeadingLevel,\n    name,\n    path,\n    prefix,\n    showHeading,\n    suffix,\n    tabLevel,\n    to,\n    withKey,\n    withToc,\n  } = { ...defaultOptions, ...options };\n  let md = await readContentFromPath(path);\n  let oldFences = getFenceForSection(from, name);\n  let fenceOptions = {\n    name,\n    content: md,\n    tabLevel,\n    relativeHeadingLevel,\n    showHeading,\n    withKey,\n    prefix,\n    suffix,\n  };\n  let newFences = generateContentForSection({\n    ...fenceOptions,\n    withToc: false,\n  });\n  let oldTocFences = getFenceForSection(from, name, true);\n  let newTocFences = generateContentForSection({\n    ...fenceOptions,\n    withToc: true,\n  });\n  let updatedContents = to.replace(oldFences.regex, newFences);\n  updatedContents = updatedContents.replace(oldTocFences.regex, newTocFences);\n  if (withToc)\n    console.log(\n      `✅ 🗜️ Rewrote Table of Contents for '${md.frontmatter.title}'`\n    );\n  console.log(`✅ 📝 Rewrote Section for '${md.frontmatter.title}'`);\n  return updatedContents;\n}\n\n/**\n * Adjusts the headings in the given `markdown` to be in a given heading context.\n * Headings must start in a line.\n * Preceding whitespace or any other character will result in the heading not being recognized.\n *\n * @example `withHeadingContext(2, '# Heading') === '### Heading'`\n * @param {number} relativeHeadingLevel\n * @param {string} markdown\n */\nfunction withHeadingContext(relativeHeadingLevel, markdown) {\n  return markdown.replaceAll(/^(#+)/gm, (match, markdownHeadingTokens) => {\n    return \"#\".repeat(markdownHeadingTokens.length + relativeHeadingLevel);\n  });\n}\n\nfunction generateContentForSection(options) {\n  const {\n    content,\n    relativeHeadingLevel,\n    name,\n    prefix,\n    showHeading,\n    suffix,\n    tabLevel,\n    withKey,\n    withToc,\n  } = {\n    ...defaultOptions,\n    ...options,\n  };\n  let fence = getFence(name, withToc);\n  let fenceContent = fence.start + \"\\n\";\n  if (withToc) {\n    let lines = content.toc.split(\"\\n\");\n    for (let i = 0, len = lines.length; i < len; i += 1)\n      fenceContent +=\n        \"  \".repeat(tabLevel) + lines[i] + (i !== len - 1 ? \"\\n\" : \"\");\n  } else {\n    fenceContent += showHeading\n      ? `${\"#\".repeat(baseHeadingLevel + relativeHeadingLevel)} ` +\n        prefix +\n        content.frontmatter[withKey] +\n        suffix +\n        \"\\n\\n\"\n      : \"\";\n    fenceContent += withHeadingContext(baseHeadingLevel, content.body) + \"\\n\";\n  }\n  fenceContent += fence.end;\n  return fenceContent;\n}\nfunction getFenceForSection(readme, sectionName, isToc = false) {\n  try {\n    let fence = getFence(sectionName, isToc);\n    let regex = new RegExp(`(${fence.start}[\\\\s\\\\S]+${fence.end})`, \"gm\");\n    return { regex: regex, content: regex.exec(readme.content) };\n  } catch (err) {\n    console.error(\n      `🚨 You've encountered a ${err.name} ➜ ${err.message} \\n` +\n        `💡 ProTip ➜ Please ensure the comments exist and are separated by a newline.`\n    );\n\n    console.error({ readme, sectionName });\n    console.error(err);\n  }\n}\nfunction getFence(sectionName, isToc = false) {\n  let name = isToc ? sectionName + \"-toc\" : sectionName;\n  let START_COMMENT = \"<!--START-SECTION:\" + name + \"-->\";\n  let END_COMMENT = \"<!--END-SECTION:\" + name + \"-->\";\n  return { start: START_COMMENT, end: END_COMMENT };\n}\n\nasync function main(argv) {\n  let currentReadme = await fs.readFile(readmePath, { encoding: \"utf-8\" });\n\n  let pendingReadme = currentReadme;\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"setup\",\n    path: \"docs/basic/setup.md\",\n    withToc: true,\n    relativeHeadingLevel: 1,\n    prefix: \"Section 1: \",\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"basic-type-examples\",\n    path: \"docs/basic/getting-started/basic-type-examples.md\",\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"function-components\",\n    path: \"docs/basic/getting-started/function-components.md\",\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"hooks\",\n    path: \"docs/basic/getting-started/hooks.md\",\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"class-components\",\n    path: \"docs/basic/getting-started/class-components.md\",\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"default-props\",\n    path: \"docs/basic/getting-started/default-props.md\",\n    showHeading: false,\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"forms-and-events\",\n    path: \"docs/basic/getting-started/forms-and-events.md\",\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"context\",\n    path: \"docs/basic/getting-started/context.md\",\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"forward-create-ref\",\n    path: \"docs/basic/getting-started/forward-create-ref.md\",\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"portals\",\n    path: \"docs/basic/getting-started/portals.md\",\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"error-boundaries\",\n    path: \"docs/basic/getting-started/error-boundaries.md\",\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"concurrent\",\n    path: \"docs/basic/getting-started/concurrent.md\",\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"types\",\n    path: \"docs/basic/troubleshooting/types.md\",\n    withToc: true,\n    relativeHeadingLevel: 1,\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"operators\",\n    path: \"docs/basic/troubleshooting/operators.md\",\n    relativeHeadingLevel: 1,\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"utilities\",\n    path: \"docs/basic/troubleshooting/utilities.md\",\n    relativeHeadingLevel: 1,\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"ts-config\",\n    path: \"docs/basic/troubleshooting/ts-config.md\",\n    relativeHeadingLevel: 1,\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"official-typings-bugs\",\n    path: \"docs/basic/troubleshooting/official-typings-bugs.md\",\n    relativeHeadingLevel: 1,\n    withKey: \"sidebar_label\",\n    prefix: \"Troubleshooting Handbook: \",\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"non-ts-files\",\n    path: \"docs/basic/troubleshooting/non-ts-files.md\",\n    relativeHeadingLevel: 1,\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"non-ts-files\",\n    path: \"docs/basic/troubleshooting/non-ts-files.md\",\n    relativeHeadingLevel: 1,\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"editor-integration\",\n    path: \"docs/basic/editor-integration.md\",\n    relativeHeadingLevel: 1,\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"linting\",\n    path: \"docs/basic/linting.md\",\n    relativeHeadingLevel: 1,\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"resources\",\n    path: \"docs/basic/recommended/resources.md\",\n    relativeHeadingLevel: 1,\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"talks\",\n    path: \"docs/basic/recommended/talks.md\",\n    relativeHeadingLevel: 1,\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"codebases\",\n    path: \"docs/basic/recommended/codebases.md\",\n    relativeHeadingLevel: 1,\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"learn-ts\",\n    path: \"docs/basic/troubleshooting/learn-ts.md\",\n    relativeHeadingLevel: 1,\n    withKey: \"sidebar_label\",\n  });\n  pendingReadme = await updateSectionWith({\n    from: currentReadme,\n    to: pendingReadme,\n    name: \"examples\",\n    path: \"docs/basic/examples.md\",\n    relativeHeadingLevel: 1,\n  });\n\n  const prettierConfig = await prettier.resolveConfig(readmePath);\n  pendingReadme = prettier.format(pendingReadme, {\n    ...prettierConfig,\n    filepath: path.basename(readmePath),\n  });\n\n  await fs.writeFile(readmePath, pendingReadme);\n}\n\nyargs(hideBin(process.argv))\n  .command({\n    command: \"$0\",\n    describe: \"Generate the README.md from docs/ folder\",\n    handler: main,\n  })\n  .usage(\"node $0 [args]\")\n  .help()\n  .strict()\n  .parse();\n"
        },
        {
          "name": "netlify.toml",
          "type": "blob",
          "size": 0.59765625,
          "content": "[build]\n  # Directory to change to before starting a build.\n  # This is where we will look for package.json/.nvmrc/etc.\n  base = \"website\"\n\n  # otherwise netlify keeps ignoring changes in /docs\n  ignore = \"/bin/false\"\n\n  # Directory (relative to root of your repo) that contains the deploy-ready\n  # HTML files and assets generated by the build. If a base directory has\n  # been specified, include it in the publish directory path.\n  publish = \"build\"\n\n  # Default build command.\n  command = \"yarn build\"\n\n  # Directory with the serverless Lambda functions to deploy to AWS.\n  # functions = \"project/functions/\"\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.056640625,
          "content": "{\n  \"name\": \"react-typescript-cheatsheet\",\n  \"version\": \"1.0.0\",\n  \"description\": \"this package.json is just for maintenance work\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/typescript-cheatsheets/react.git\"\n  },\n  \"keywords\": [\n    \"react\",\n    \"typescript\",\n    \"guides\"\n  ],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/typescript-cheatsheets/react/issues\"\n  },\n  \"homepage\": \"https://github.com/typescript-cheatsheets/react#readme\",\n  \"scripts\": {\n    \"format-readme\": \"prettier --write \\\"README.md\\\"\",\n    \"gen-readme\": \"node genReadme.js\",\n    \"format\": \"prettier --write \\\"**/*.md\\\"\",\n    \"format:check\": \"prettier --check \\\"**/*.md\\\"\",\n    \"postinstall\": \"cd website && yarn\",\n    \"prepare\": \"husky install\",\n    \"start\": \"yarn --cwd website start\",\n    \"build\": \"yarn --cwd website build\"\n  },\n  \"dependencies\": {\n    \"front-matter\": \"^4.0.2\",\n    \"markdown-toc\": \"^1.2.0\",\n    \"yargs\": \"^17.5.1\"\n  },\n  \"devDependencies\": {\n    \"husky\": \"^7.0.0\",\n    \"prettier\": \"^2.6.2\",\n    \"pretty-quick\": \"^3.1.3\"\n  }\n}\n"
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        },
        {
          "name": "yarn.lock",
          "type": "blob",
          "size": 33.73046875,
          "content": "# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# yarn lockfile v1\n\n\n\"@types/color-name@^1.1.1\":\n  version \"1.1.1\"\n  resolved \"https://registry.yarnpkg.com/@types/color-name/-/color-name-1.1.1.tgz#1c1261bbeaa10a8055bbc5d8ab84b7b2afc846a0\"\n  integrity sha512-rr+OQyAjxze7GgWrSaJwydHStIhHq2lvY3BOC2Mj7KnzI7XK0Uw1TOOdI9lDoajEbSWLiYgoo4f1R51erQfhPQ==\n\n\"@types/minimatch@^3.0.3\":\n  version \"3.0.3\"\n  resolved \"https://registry.yarnpkg.com/@types/minimatch/-/minimatch-3.0.3.tgz#3dca0e3f33b200fc7d1139c0cd96c1268cadfd9d\"\n  integrity sha512-tHq6qdbT9U1IRSGf14CL0pUlULksvY9OZ+5eEgl1N7t+OA3tGvNpxJCzuKQlsNgCVwbAs670L1vcVQi8j9HjnA==\n\nansi-red@^0.1.1:\n  version \"0.1.1\"\n  resolved \"https://registry.yarnpkg.com/ansi-red/-/ansi-red-0.1.1.tgz#8c638f9d1080800a353c9c28c8a81ca4705d946c\"\n  integrity sha1-jGOPnRCAgAo1PJwoyKgcpHBdlGw=\n  dependencies:\n    ansi-wrap \"0.1.0\"\n\nansi-regex@^5.0.1:\n  version \"5.0.1\"\n  resolved \"https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-5.0.1.tgz#082cb2c89c9fe8659a311a53bd6a4dc5301db304\"\n  integrity sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==\n\nansi-styles@^4.0.0:\n  version \"4.3.0\"\n  resolved \"https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-4.3.0.tgz#edd803628ae71c04c85ae7a0906edad34b648937\"\n  integrity sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\n  dependencies:\n    color-convert \"^2.0.1\"\n\nansi-styles@^4.1.0:\n  version \"4.2.1\"\n  resolved \"https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-4.2.1.tgz#90ae75c424d008d2624c5bf29ead3177ebfcf359\"\n  integrity sha512-9VGjrMsG1vePxcSweQsN20KY/c4zN0h9fLjqAbwbPfahM3t+NL+M9HC8xeXG2I8pX5NoamTGNuomEUFI7fcUjA==\n  dependencies:\n    \"@types/color-name\" \"^1.1.1\"\n    color-convert \"^2.0.1\"\n\nansi-wrap@0.1.0:\n  version \"0.1.0\"\n  resolved \"https://registry.yarnpkg.com/ansi-wrap/-/ansi-wrap-0.1.0.tgz#a82250ddb0015e9a27ca82e82ea603bbfa45efaf\"\n  integrity sha1-qCJQ3bABXponyoLoLqYDu/pF768=\n\nargparse@^1.0.10, argparse@^1.0.7:\n  version \"1.0.10\"\n  resolved \"https://registry.yarnpkg.com/argparse/-/argparse-1.0.10.tgz#bcd6791ea5ae09725e17e5ad988134cd40b3d911\"\n  integrity sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==\n  dependencies:\n    sprintf-js \"~1.0.2\"\n\narray-differ@^3.0.0:\n  version \"3.0.0\"\n  resolved \"https://registry.yarnpkg.com/array-differ/-/array-differ-3.0.0.tgz#3cbb3d0f316810eafcc47624734237d6aee4ae6b\"\n  integrity sha512-THtfYS6KtME/yIAhKjZ2ul7XI96lQGHRputJQHO80LAWQnuGP4iCIN8vdMRboGbIEYBwU33q8Tch1os2+X0kMg==\n\narray-union@^2.1.0:\n  version \"2.1.0\"\n  resolved \"https://registry.yarnpkg.com/array-union/-/array-union-2.1.0.tgz#b798420adbeb1de828d84acd8a2e23d3efe85e8d\"\n  integrity sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==\n\narrify@^2.0.1:\n  version \"2.0.1\"\n  resolved \"https://registry.yarnpkg.com/arrify/-/arrify-2.0.1.tgz#c9655e9331e0abcd588d2a7cad7e9956f66701fa\"\n  integrity sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==\n\nautolinker@~0.28.0:\n  version \"0.28.1\"\n  resolved \"https://registry.yarnpkg.com/autolinker/-/autolinker-0.28.1.tgz#0652b491881879f0775dace0cdca3233942a4e47\"\n  integrity sha1-BlK0kYgYefB3XazgzcoyM5QqTkc=\n  dependencies:\n    gulp-header \"^1.7.1\"\n\nbalanced-match@^1.0.0:\n  version \"1.0.0\"\n  resolved \"https://registry.yarnpkg.com/balanced-match/-/balanced-match-1.0.0.tgz#89b4d199ab2bee49de164ea02b89ce462d71b767\"\n  integrity sha1-ibTRmasr7kneFk6gK4nORi1xt2c=\n\nbrace-expansion@^1.1.7:\n  version \"1.1.11\"\n  resolved \"https://registry.yarnpkg.com/brace-expansion/-/brace-expansion-1.1.11.tgz#3c7fcbf529d87226f3d2f52b966ff5271eb441dd\"\n  integrity sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\n  dependencies:\n    balanced-match \"^1.0.0\"\n    concat-map \"0.0.1\"\n\nbuffer-from@^1.0.0:\n  version \"1.1.1\"\n  resolved \"https://registry.yarnpkg.com/buffer-from/-/buffer-from-1.1.1.tgz#32713bc028f75c02fdb710d7c7bcec1f2c6070ef\"\n  integrity sha512-MQcXEUbCKtEo7bhqEs6560Hyd4XaovZlO/k9V3hjVUF/zwW7KBVdSK4gIt/bzwS9MbR5qob+F5jusZsb0YQK2A==\n\nchalk@^3.0.0:\n  version \"3.0.0\"\n  resolved \"https://registry.yarnpkg.com/chalk/-/chalk-3.0.0.tgz#3f73c2bf526591f574cc492c51e2456349f844e4\"\n  integrity sha512-4D3B6Wf41KOYRFdszmDqMCGq5VV/uMAB273JILmO+3jAlh8X4qDtdtgCR3fxtbLEMzSx22QdhnDcJvu2u1fVwg==\n  dependencies:\n    ansi-styles \"^4.1.0\"\n    supports-color \"^7.1.0\"\n\ncliui@^7.0.2:\n  version \"7.0.4\"\n  resolved \"https://registry.yarnpkg.com/cliui/-/cliui-7.0.4.tgz#a0265ee655476fc807aea9df3df8df7783808b4f\"\n  integrity sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==\n  dependencies:\n    string-width \"^4.2.0\"\n    strip-ansi \"^6.0.0\"\n    wrap-ansi \"^7.0.0\"\n\ncoffee-script@^1.12.4:\n  version \"1.12.7\"\n  resolved \"https://registry.yarnpkg.com/coffee-script/-/coffee-script-1.12.7.tgz#c05dae0cb79591d05b3070a8433a98c9a89ccc53\"\n  integrity sha512-fLeEhqwymYat/MpTPUjSKHVYYl0ec2mOyALEMLmzr5i1isuG+6jfI2j2d5oBO3VIzgUXgBVIcOT9uH1TFxBckw==\n\ncolor-convert@^2.0.1:\n  version \"2.0.1\"\n  resolved \"https://registry.yarnpkg.com/color-convert/-/color-convert-2.0.1.tgz#72d3a68d598c9bdb3af2ad1e84f21d896abd4de3\"\n  integrity sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\n  dependencies:\n    color-name \"~1.1.4\"\n\ncolor-name@~1.1.4:\n  version \"1.1.4\"\n  resolved \"https://registry.yarnpkg.com/color-name/-/color-name-1.1.4.tgz#c2a09a87acbde69543de6f63fa3995c826c536a2\"\n  integrity sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\n\nconcat-map@0.0.1:\n  version \"0.0.1\"\n  resolved \"https://registry.yarnpkg.com/concat-map/-/concat-map-0.0.1.tgz#d8a96bd77fd68df7793a73036a3ba0d5405d477b\"\n  integrity sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=\n\nconcat-stream@^1.5.2:\n  version \"1.6.2\"\n  resolved \"https://registry.yarnpkg.com/concat-stream/-/concat-stream-1.6.2.tgz#904bdf194cd3122fc675c77fc4ac3d4ff0fd1a34\"\n  integrity sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==\n  dependencies:\n    buffer-from \"^1.0.0\"\n    inherits \"^2.0.3\"\n    readable-stream \"^2.2.2\"\n    typedarray \"^0.0.6\"\n\nconcat-with-sourcemaps@*:\n  version \"1.1.0\"\n  resolved \"https://registry.yarnpkg.com/concat-with-sourcemaps/-/concat-with-sourcemaps-1.1.0.tgz#d4ea93f05ae25790951b99e7b3b09e3908a4082e\"\n  integrity sha512-4gEjHJFT9e+2W/77h/DS5SGUgwDaOwprX8L/gl5+3ixnzkVJJsZWDSelmN3Oilw3LNDZjZV0yqH1hLG3k6nghg==\n  dependencies:\n    source-map \"^0.6.1\"\n\ncore-util-is@~1.0.0:\n  version \"1.0.2\"\n  resolved \"https://registry.yarnpkg.com/core-util-is/-/core-util-is-1.0.2.tgz#b5fd54220aa2bc5ab57aab7140c940754503c1a7\"\n  integrity sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=\n\ncross-spawn@^7.0.0:\n  version \"7.0.2\"\n  resolved \"https://registry.yarnpkg.com/cross-spawn/-/cross-spawn-7.0.2.tgz#d0d7dcfa74e89115c7619f4f721a94e1fdb716d6\"\n  integrity sha512-PD6G8QG3S4FK/XCGFbEQrDqO2AnMMsy0meR7lerlIOHAAbkuavGU/pOqprrlvfTNjvowivTeBsjebAL0NSoMxw==\n  dependencies:\n    path-key \"^3.1.0\"\n    shebang-command \"^2.0.0\"\n    which \"^2.0.1\"\n\ndiacritics-map@^0.1.0:\n  version \"0.1.0\"\n  resolved \"https://registry.yarnpkg.com/diacritics-map/-/diacritics-map-0.1.0.tgz#6dfc0ff9d01000a2edf2865371cac316e94977af\"\n  integrity sha1-bfwP+dAQAKLt8oZTccrDFulJd68=\n\nemoji-regex@^8.0.0:\n  version \"8.0.0\"\n  resolved \"https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-8.0.0.tgz#e818fd69ce5ccfcb404594f842963bf53164cc37\"\n  integrity sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==\n\nend-of-stream@^1.1.0:\n  version \"1.4.4\"\n  resolved \"https://registry.yarnpkg.com/end-of-stream/-/end-of-stream-1.4.4.tgz#5ae64a5f45057baf3626ec14da0ca5e4b2431eb0\"\n  integrity sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==\n  dependencies:\n    once \"^1.4.0\"\n\nescalade@^3.1.1:\n  version \"3.1.1\"\n  resolved \"https://registry.yarnpkg.com/escalade/-/escalade-3.1.1.tgz#d8cfdc7000965c5a0174b4a82eaa5c0552742e40\"\n  integrity sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==\n\nesprima@^4.0.0:\n  version \"4.0.1\"\n  resolved \"https://registry.yarnpkg.com/esprima/-/esprima-4.0.1.tgz#13b04cdb3e6c5d19df91ab6987a8695619b0aa71\"\n  integrity sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==\n\nexeca@^4.0.0:\n  version \"4.1.0\"\n  resolved \"https://registry.yarnpkg.com/execa/-/execa-4.1.0.tgz#4e5491ad1572f2f17a77d388c6c857135b22847a\"\n  integrity sha512-j5W0//W7f8UxAn8hXVnwG8tLwdiUy4FJLcSupCg6maBYZDpyBvTApK7KyuI4bKj8KOh1r2YH+6ucuYtJv1bTZA==\n  dependencies:\n    cross-spawn \"^7.0.0\"\n    get-stream \"^5.0.0\"\n    human-signals \"^1.1.1\"\n    is-stream \"^2.0.0\"\n    merge-stream \"^2.0.0\"\n    npm-run-path \"^4.0.0\"\n    onetime \"^5.1.0\"\n    signal-exit \"^3.0.2\"\n    strip-final-newline \"^2.0.0\"\n\nexpand-range@^1.8.1:\n  version \"1.8.2\"\n  resolved \"https://registry.yarnpkg.com/expand-range/-/expand-range-1.8.2.tgz#a299effd335fe2721ebae8e257ec79644fc85337\"\n  integrity sha1-opnv/TNf4nIeuujiV+x5ZE/IUzc=\n  dependencies:\n    fill-range \"^2.1.0\"\n\nextend-shallow@^2.0.1:\n  version \"2.0.1\"\n  resolved \"https://registry.yarnpkg.com/extend-shallow/-/extend-shallow-2.0.1.tgz#51af7d614ad9a9f610ea1bafbb989d6b1c56890f\"\n  integrity sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=\n  dependencies:\n    is-extendable \"^0.1.0\"\n\nfill-range@^2.1.0:\n  version \"2.2.4\"\n  resolved \"https://registry.yarnpkg.com/fill-range/-/fill-range-2.2.4.tgz#eb1e773abb056dcd8df2bfdf6af59b8b3a936565\"\n  integrity sha512-cnrcCbj01+j2gTG921VZPnHbjmdAf8oQV/iGeV2kZxGSyfYjjTyY79ErsK1WJWMpw6DaApEX72binqJE+/d+5Q==\n  dependencies:\n    is-number \"^2.1.0\"\n    isobject \"^2.0.0\"\n    randomatic \"^3.0.0\"\n    repeat-element \"^1.1.2\"\n    repeat-string \"^1.5.2\"\n\nfind-up@^4.1.0:\n  version \"4.1.0\"\n  resolved \"https://registry.yarnpkg.com/find-up/-/find-up-4.1.0.tgz#97afe7d6cdc0bc5928584b7c8d7b16e8a9aa5d19\"\n  integrity sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==\n  dependencies:\n    locate-path \"^5.0.0\"\n    path-exists \"^4.0.0\"\n\nfor-in@^1.0.2:\n  version \"1.0.2\"\n  resolved \"https://registry.yarnpkg.com/for-in/-/for-in-1.0.2.tgz#81068d295a8142ec0ac726c6e2200c30fb6d5e80\"\n  integrity sha1-gQaNKVqBQuwKxybG4iAMMPttXoA=\n\nfront-matter@^4.0.2:\n  version \"4.0.2\"\n  resolved \"https://registry.yarnpkg.com/front-matter/-/front-matter-4.0.2.tgz#b14e54dc745cfd7293484f3210d15ea4edd7f4d5\"\n  integrity sha512-I8ZuJ/qG92NWX8i5x1Y8qyj3vizhXS31OxjKDu3LKP+7/qBgfIKValiZIEwoVoJKUHlhWtYrktkxV1XsX+pPlg==\n  dependencies:\n    js-yaml \"^3.13.1\"\n\nget-caller-file@^2.0.5:\n  version \"2.0.5\"\n  resolved \"https://registry.yarnpkg.com/get-caller-file/-/get-caller-file-2.0.5.tgz#4f94412a82db32f36e3b0b9741f8a97feb031f7e\"\n  integrity sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==\n\nget-stream@^5.0.0:\n  version \"5.1.0\"\n  resolved \"https://registry.yarnpkg.com/get-stream/-/get-stream-5.1.0.tgz#01203cdc92597f9b909067c3e656cc1f4d3c4dc9\"\n  integrity sha512-EXr1FOzrzTfGeL0gQdeFEvOMm2mzMOglyiOXSTpPC+iAjAKftbr3jpCMWynogwYnM+eSj9sHGc6wjIcDvYiygw==\n  dependencies:\n    pump \"^3.0.0\"\n\ngray-matter@^2.1.0:\n  version \"2.1.1\"\n  resolved \"https://registry.yarnpkg.com/gray-matter/-/gray-matter-2.1.1.tgz#3042d9adec2a1ded6a7707a9ed2380f8a17a430e\"\n  integrity sha1-MELZrewqHe1qdwep7SOA+KF6Qw4=\n  dependencies:\n    ansi-red \"^0.1.1\"\n    coffee-script \"^1.12.4\"\n    extend-shallow \"^2.0.1\"\n    js-yaml \"^3.8.1\"\n    toml \"^2.3.2\"\n\ngulp-header@^1.7.1:\n  version \"1.8.12\"\n  resolved \"https://registry.yarnpkg.com/gulp-header/-/gulp-header-1.8.12.tgz#ad306be0066599127281c4f8786660e705080a84\"\n  integrity sha512-lh9HLdb53sC7XIZOYzTXM4lFuXElv3EVkSDhsd7DoJBj7hm+Ni7D3qYbb+Rr8DuM8nRanBvkVO9d7askreXGnQ==\n  dependencies:\n    concat-with-sourcemaps \"*\"\n    lodash.template \"^4.4.0\"\n    through2 \"^2.0.0\"\n\nhas-flag@^4.0.0:\n  version \"4.0.0\"\n  resolved \"https://registry.yarnpkg.com/has-flag/-/has-flag-4.0.0.tgz#944771fd9c81c81265c4d6941860da06bb59479b\"\n  integrity sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==\n\nhuman-signals@^1.1.1:\n  version \"1.1.1\"\n  resolved \"https://registry.yarnpkg.com/human-signals/-/human-signals-1.1.1.tgz#c5b1cd14f50aeae09ab6c59fe63ba3395fe4dfa3\"\n  integrity sha512-SEQu7vl8KjNL2eoGBLF3+wAjpsNfA9XMlXAYj/3EdaNfAlxKthD1xjEQfGOUhllCGGJVNY34bRr6lPINhNjyZw==\n\nhusky@^7.0.0:\n  version \"7.0.4\"\n  resolved \"https://registry.yarnpkg.com/husky/-/husky-7.0.4.tgz#242048245dc49c8fb1bf0cc7cfb98dd722531535\"\n  integrity sha512-vbaCKN2QLtP/vD4yvs6iz6hBEo6wkSzs8HpRah1Z6aGmF2KW5PdYuAd7uX5a+OyBZHBhd+TFLqgjUgytQr4RvQ==\n\nignore@^5.1.4:\n  version \"5.1.4\"\n  resolved \"https://registry.yarnpkg.com/ignore/-/ignore-5.1.4.tgz#84b7b3dbe64552b6ef0eca99f6743dbec6d97adf\"\n  integrity sha512-MzbUSahkTW1u7JpKKjY7LCARd1fU5W2rLdxlM4kdkayuCwZImjkpluF9CM1aLewYJguPDqewLam18Y6AU69A8A==\n\ninherits@^2.0.3, inherits@~2.0.3:\n  version \"2.0.4\"\n  resolved \"https://registry.yarnpkg.com/inherits/-/inherits-2.0.4.tgz#0fa2c64f932917c3433a0ded55363aae37416b7c\"\n  integrity sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\n\nis-buffer@^1.1.5:\n  version \"1.1.6\"\n  resolved \"https://registry.yarnpkg.com/is-buffer/-/is-buffer-1.1.6.tgz#efaa2ea9daa0d7ab2ea13a97b2b8ad51fefbe8be\"\n  integrity sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w==\n\nis-extendable@^0.1.0:\n  version \"0.1.1\"\n  resolved \"https://registry.yarnpkg.com/is-extendable/-/is-extendable-0.1.1.tgz#62b110e289a471418e3ec36a617d472e301dfc89\"\n  integrity sha1-YrEQ4omkcUGOPsNqYX1HLjAd/Ik=\n\nis-extendable@^1.0.1:\n  version \"1.0.1\"\n  resolved \"https://registry.yarnpkg.com/is-extendable/-/is-extendable-1.0.1.tgz#a7470f9e426733d81bd81e1155264e3a3507cab4\"\n  integrity sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==\n  dependencies:\n    is-plain-object \"^2.0.4\"\n\nis-fullwidth-code-point@^3.0.0:\n  version \"3.0.0\"\n  resolved \"https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz#f116f8064fe90b3f7844a38997c0b75051269f1d\"\n  integrity sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==\n\nis-number@^2.1.0:\n  version \"2.1.0\"\n  resolved \"https://registry.yarnpkg.com/is-number/-/is-number-2.1.0.tgz#01fcbbb393463a548f2f466cce16dece49db908f\"\n  integrity sha1-Afy7s5NGOlSPL0ZszhbezknbkI8=\n  dependencies:\n    kind-of \"^3.0.2\"\n\nis-number@^4.0.0:\n  version \"4.0.0\"\n  resolved \"https://registry.yarnpkg.com/is-number/-/is-number-4.0.0.tgz#0026e37f5454d73e356dfe6564699867c6a7f0ff\"\n  integrity sha512-rSklcAIlf1OmFdyAqbnWTLVelsQ58uvZ66S/ZyawjWqIviTWCjg2PzVGw8WUA+nNuPTqb4wgA+NszrJ+08LlgQ==\n\nis-plain-object@^2.0.4:\n  version \"2.0.4\"\n  resolved \"https://registry.yarnpkg.com/is-plain-object/-/is-plain-object-2.0.4.tgz#2c163b3fafb1b606d9d17928f05c2a1c38e07677\"\n  integrity sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==\n  dependencies:\n    isobject \"^3.0.1\"\n\nis-stream@^2.0.0:\n  version \"2.0.0\"\n  resolved \"https://registry.yarnpkg.com/is-stream/-/is-stream-2.0.0.tgz#bde9c32680d6fae04129d6ac9d921ce7815f78e3\"\n  integrity sha512-XCoy+WlUr7d1+Z8GgSuXmpuUFC9fOhRXglJMx+dwLKTkL44Cjd4W1Z5P+BQZpr+cR93aGP4S/s7Ftw6Nd/kiEw==\n\nisarray@1.0.0, isarray@~1.0.0:\n  version \"1.0.0\"\n  resolved \"https://registry.yarnpkg.com/isarray/-/isarray-1.0.0.tgz#bb935d48582cba168c06834957a54a3e07124f11\"\n  integrity sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\n\nisexe@^2.0.0:\n  version \"2.0.0\"\n  resolved \"https://registry.yarnpkg.com/isexe/-/isexe-2.0.0.tgz#e8fbf374dc556ff8947a10dcb0572d633f2cfa10\"\n  integrity sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=\n\nisobject@^2.0.0:\n  version \"2.1.0\"\n  resolved \"https://registry.yarnpkg.com/isobject/-/isobject-2.1.0.tgz#f065561096a3f1da2ef46272f815c840d87e0c89\"\n  integrity sha1-8GVWEJaj8dou9GJy+BXIQNh+DIk=\n  dependencies:\n    isarray \"1.0.0\"\n\nisobject@^3.0.1:\n  version \"3.0.1\"\n  resolved \"https://registry.yarnpkg.com/isobject/-/isobject-3.0.1.tgz#4e431e92b11a9731636aa1f9c8d1ccbcfdab78df\"\n  integrity sha1-TkMekrEalzFjaqH5yNHMvP2reN8=\n\njs-yaml@^3.13.1, js-yaml@^3.8.1:\n  version \"3.14.0\"\n  resolved \"https://registry.yarnpkg.com/js-yaml/-/js-yaml-3.14.0.tgz#a7a34170f26a21bb162424d8adacb4113a69e482\"\n  integrity sha512-/4IbIeHcD9VMHFqDR/gQ7EdZdLimOvW2DdcxFjdyyZ9NsbS+ccrXqVWDtab/lRl5AlUqmpBx8EhPaWR+OtY17A==\n  dependencies:\n    argparse \"^1.0.7\"\n    esprima \"^4.0.0\"\n\nkind-of@^3.0.2:\n  version \"3.2.2\"\n  resolved \"https://registry.yarnpkg.com/kind-of/-/kind-of-3.2.2.tgz#31ea21a734bab9bbb0f32466d893aea51e4a3c64\"\n  integrity sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=\n  dependencies:\n    is-buffer \"^1.1.5\"\n\nkind-of@^6.0.0:\n  version \"6.0.3\"\n  resolved \"https://registry.yarnpkg.com/kind-of/-/kind-of-6.0.3.tgz#07c05034a6c349fa06e24fa35aa76db4580ce4dd\"\n  integrity sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\n\nlazy-cache@^2.0.2:\n  version \"2.0.2\"\n  resolved \"https://registry.yarnpkg.com/lazy-cache/-/lazy-cache-2.0.2.tgz#b9190a4f913354694840859f8a8f7084d8822264\"\n  integrity sha1-uRkKT5EzVGlIQIWfio9whNiCImQ=\n  dependencies:\n    set-getter \"^0.1.0\"\n\nlist-item@^1.1.1:\n  version \"1.1.1\"\n  resolved \"https://registry.yarnpkg.com/list-item/-/list-item-1.1.1.tgz#0c65d00e287cb663ccb3cb3849a77e89ec268a56\"\n  integrity sha1-DGXQDih8tmPMs8s4Sad+iewmilY=\n  dependencies:\n    expand-range \"^1.8.1\"\n    extend-shallow \"^2.0.1\"\n    is-number \"^2.1.0\"\n    repeat-string \"^1.5.2\"\n\nlocate-path@^5.0.0:\n  version \"5.0.0\"\n  resolved \"https://registry.yarnpkg.com/locate-path/-/locate-path-5.0.0.tgz#1afba396afd676a6d42504d0a67a3a7eb9f62aa0\"\n  integrity sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==\n  dependencies:\n    p-locate \"^4.1.0\"\n\nlodash._reinterpolate@^3.0.0:\n  version \"3.0.0\"\n  resolved \"https://registry.yarnpkg.com/lodash._reinterpolate/-/lodash._reinterpolate-3.0.0.tgz#0ccf2d89166af03b3663c796538b75ac6e114d9d\"\n  integrity sha1-DM8tiRZq8Ds2Y8eWU4t1rG4RTZ0=\n\nlodash.template@^4.4.0:\n  version \"4.5.0\"\n  resolved \"https://registry.yarnpkg.com/lodash.template/-/lodash.template-4.5.0.tgz#f976195cf3f347d0d5f52483569fe8031ccce8ab\"\n  integrity sha512-84vYFxIkmidUiFxidA/KjjH9pAycqW+h980j7Fuz5qxRtO9pgB7MDFTdys1N7A5mcucRiDyEq4fusljItR1T/A==\n  dependencies:\n    lodash._reinterpolate \"^3.0.0\"\n    lodash.templatesettings \"^4.0.0\"\n\nlodash.templatesettings@^4.0.0:\n  version \"4.2.0\"\n  resolved \"https://registry.yarnpkg.com/lodash.templatesettings/-/lodash.templatesettings-4.2.0.tgz#e481310f049d3cf6d47e912ad09313b154f0fb33\"\n  integrity sha512-stgLz+i3Aa9mZgnjr/O+v9ruKZsPsndy7qPZOchbqk2cnTU1ZaldKK+v7m54WoKIyxiuMZTKT2H81F8BeAc3ZQ==\n  dependencies:\n    lodash._reinterpolate \"^3.0.0\"\n\nmarkdown-link@^0.1.1:\n  version \"0.1.1\"\n  resolved \"https://registry.yarnpkg.com/markdown-link/-/markdown-link-0.1.1.tgz#32c5c65199a6457316322d1e4229d13407c8c7cf\"\n  integrity sha1-MsXGUZmmRXMWMi0eQinRNAfIx88=\n\nmarkdown-toc@^1.2.0:\n  version \"1.2.0\"\n  resolved \"https://registry.yarnpkg.com/markdown-toc/-/markdown-toc-1.2.0.tgz#44a15606844490314afc0444483f9e7b1122c339\"\n  integrity sha512-eOsq7EGd3asV0oBfmyqngeEIhrbkc7XVP63OwcJBIhH2EpG2PzFcbZdhy1jutXSlRBBVMNXHvMtSr5LAxSUvUg==\n  dependencies:\n    concat-stream \"^1.5.2\"\n    diacritics-map \"^0.1.0\"\n    gray-matter \"^2.1.0\"\n    lazy-cache \"^2.0.2\"\n    list-item \"^1.1.1\"\n    markdown-link \"^0.1.1\"\n    minimist \"^1.2.0\"\n    mixin-deep \"^1.1.3\"\n    object.pick \"^1.2.0\"\n    remarkable \"^1.7.1\"\n    repeat-string \"^1.6.1\"\n    strip-color \"^0.1.0\"\n\nmath-random@^1.0.1:\n  version \"1.0.4\"\n  resolved \"https://registry.yarnpkg.com/math-random/-/math-random-1.0.4.tgz#5dd6943c938548267016d4e34f057583080c514c\"\n  integrity sha512-rUxjysqif/BZQH2yhd5Aaq7vXMSx9NdEsQcyA07uEzIvxgI7zIr33gGsh+RU0/XjmQpCW7RsVof1vlkvQVCK5A==\n\nmerge-stream@^2.0.0:\n  version \"2.0.0\"\n  resolved \"https://registry.yarnpkg.com/merge-stream/-/merge-stream-2.0.0.tgz#52823629a14dd00c9770fb6ad47dc6310f2c1f60\"\n  integrity sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==\n\nmimic-fn@^2.1.0:\n  version \"2.1.0\"\n  resolved \"https://registry.yarnpkg.com/mimic-fn/-/mimic-fn-2.1.0.tgz#7ed2c2ccccaf84d3ffcb7a69b57711fc2083401b\"\n  integrity sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==\n\nminimatch@^3.0.4:\n  version \"3.0.4\"\n  resolved \"https://registry.yarnpkg.com/minimatch/-/minimatch-3.0.4.tgz#5166e286457f03306064be5497e8dbb0c3d32083\"\n  integrity sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\n  dependencies:\n    brace-expansion \"^1.1.7\"\n\nminimist@^1.2.0:\n  version \"1.2.5\"\n  resolved \"https://registry.yarnpkg.com/minimist/-/minimist-1.2.5.tgz#67d66014b66a6a8aaa0c083c5fd58df4e4e97602\"\n  integrity sha512-FM9nNUYrRBAELZQT3xeZQ7fmMOBg6nWNmJKTcgsJeaLstP/UODVpGsr5OhXhhXg6f+qtJ8uiZ+PUxkDWcgIXLw==\n\nmixin-deep@^1.1.3:\n  version \"1.3.2\"\n  resolved \"https://registry.yarnpkg.com/mixin-deep/-/mixin-deep-1.3.2.tgz#1120b43dc359a785dce65b55b82e257ccf479566\"\n  integrity sha512-WRoDn//mXBiJ1H40rqa3vH0toePwSsGb45iInWlTySa+Uu4k3tYUSxa2v1KqAiLtvlrSzaExqS1gtk96A9zvEA==\n  dependencies:\n    for-in \"^1.0.2\"\n    is-extendable \"^1.0.1\"\n\nmri@^1.1.5:\n  version \"1.2.0\"\n  resolved \"https://registry.yarnpkg.com/mri/-/mri-1.2.0.tgz#6721480fec2a11a4889861115a48b6cbe7cc8f0b\"\n  integrity sha512-tzzskb3bG8LvYGFF/mDTpq3jpI6Q9wc3LEmBaghu+DdCssd1FakN7Bc0hVNmEyGq1bq3RgfkCb3cmQLpNPOroA==\n\nmultimatch@^4.0.0:\n  version \"4.0.0\"\n  resolved \"https://registry.yarnpkg.com/multimatch/-/multimatch-4.0.0.tgz#8c3c0f6e3e8449ada0af3dd29efb491a375191b3\"\n  integrity sha512-lDmx79y1z6i7RNx0ZGCPq1bzJ6ZoDDKbvh7jxr9SJcWLkShMzXrHbYVpTdnhNM5MXpDUxCQ4DgqVttVXlBgiBQ==\n  dependencies:\n    \"@types/minimatch\" \"^3.0.3\"\n    array-differ \"^3.0.0\"\n    array-union \"^2.1.0\"\n    arrify \"^2.0.1\"\n    minimatch \"^3.0.4\"\n\nnpm-run-path@^4.0.0:\n  version \"4.0.1\"\n  resolved \"https://registry.yarnpkg.com/npm-run-path/-/npm-run-path-4.0.1.tgz#b7ecd1e5ed53da8e37a55e1c2269e0b97ed748ea\"\n  integrity sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==\n  dependencies:\n    path-key \"^3.0.0\"\n\nobject.pick@^1.2.0:\n  version \"1.3.0\"\n  resolved \"https://registry.yarnpkg.com/object.pick/-/object.pick-1.3.0.tgz#87a10ac4c1694bd2e1cbf53591a66141fb5dd747\"\n  integrity sha1-h6EKxMFpS9Lhy/U1kaZhQftd10c=\n  dependencies:\n    isobject \"^3.0.1\"\n\nonce@^1.3.1, once@^1.4.0:\n  version \"1.4.0\"\n  resolved \"https://registry.yarnpkg.com/once/-/once-1.4.0.tgz#583b1aa775961d4b113ac17d9c50baef9dd76bd1\"\n  integrity sha1-WDsap3WWHUsROsF9nFC6753Xa9E=\n  dependencies:\n    wrappy \"1\"\n\nonetime@^5.1.0:\n  version \"5.1.0\"\n  resolved \"https://registry.yarnpkg.com/onetime/-/onetime-5.1.0.tgz#fff0f3c91617fe62bb50189636e99ac8a6df7be5\"\n  integrity sha512-5NcSkPHhwTVFIQN+TUqXoS5+dlElHXdpAWu9I0HP20YOtIi+aZ0Ct82jdlILDxjLEAWwvm+qj1m6aEtsDVmm6Q==\n  dependencies:\n    mimic-fn \"^2.1.0\"\n\np-limit@^2.2.0:\n  version \"2.3.0\"\n  resolved \"https://registry.yarnpkg.com/p-limit/-/p-limit-2.3.0.tgz#3dd33c647a214fdfffd835933eb086da0dc21db1\"\n  integrity sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==\n  dependencies:\n    p-try \"^2.0.0\"\n\np-locate@^4.1.0:\n  version \"4.1.0\"\n  resolved \"https://registry.yarnpkg.com/p-locate/-/p-locate-4.1.0.tgz#a3428bb7088b3a60292f66919278b7c297ad4f07\"\n  integrity sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==\n  dependencies:\n    p-limit \"^2.2.0\"\n\np-try@^2.0.0:\n  version \"2.2.0\"\n  resolved \"https://registry.yarnpkg.com/p-try/-/p-try-2.2.0.tgz#cb2868540e313d61de58fafbe35ce9004d5540e6\"\n  integrity sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==\n\npath-exists@^4.0.0:\n  version \"4.0.0\"\n  resolved \"https://registry.yarnpkg.com/path-exists/-/path-exists-4.0.0.tgz#513bdbe2d3b95d7762e8c1137efa195c6c61b5b3\"\n  integrity sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==\n\npath-key@^3.0.0, path-key@^3.1.0:\n  version \"3.1.1\"\n  resolved \"https://registry.yarnpkg.com/path-key/-/path-key-3.1.1.tgz#581f6ade658cbba65a0d3380de7753295054f375\"\n  integrity sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==\n\nprettier@^2.6.2:\n  version \"2.6.2\"\n  resolved \"https://registry.yarnpkg.com/prettier/-/prettier-2.6.2.tgz#e26d71a18a74c3d0f0597f55f01fb6c06c206032\"\n  integrity sha512-PkUpF+qoXTqhOeWL9fu7As8LXsIUZ1WYaJiY/a7McAQzxjk82OF0tibkFXVCDImZtWxbvojFjerkiLb0/q8mew==\n\npretty-quick@^3.1.3:\n  version \"3.1.3\"\n  resolved \"https://registry.yarnpkg.com/pretty-quick/-/pretty-quick-3.1.3.tgz#15281108c0ddf446675157ca40240099157b638e\"\n  integrity sha512-kOCi2FJabvuh1as9enxYmrnBC6tVMoVOenMaBqRfsvBHB0cbpYHjdQEpSglpASDFEXVwplpcGR4CLEaisYAFcA==\n  dependencies:\n    chalk \"^3.0.0\"\n    execa \"^4.0.0\"\n    find-up \"^4.1.0\"\n    ignore \"^5.1.4\"\n    mri \"^1.1.5\"\n    multimatch \"^4.0.0\"\n\nprocess-nextick-args@~2.0.0:\n  version \"2.0.1\"\n  resolved \"https://registry.yarnpkg.com/process-nextick-args/-/process-nextick-args-2.0.1.tgz#7820d9b16120cc55ca9ae7792680ae7dba6d7fe2\"\n  integrity sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==\n\npump@^3.0.0:\n  version \"3.0.0\"\n  resolved \"https://registry.yarnpkg.com/pump/-/pump-3.0.0.tgz#b4a2116815bde2f4e1ea602354e8c75565107a64\"\n  integrity sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==\n  dependencies:\n    end-of-stream \"^1.1.0\"\n    once \"^1.3.1\"\n\nrandomatic@^3.0.0:\n  version \"3.1.1\"\n  resolved \"https://registry.yarnpkg.com/randomatic/-/randomatic-3.1.1.tgz#b776efc59375984e36c537b2f51a1f0aff0da1ed\"\n  integrity sha512-TuDE5KxZ0J461RVjrJZCJc+J+zCkTb1MbH9AQUq68sMhOMcy9jLcb3BrZKgp9q9Ncltdg4QVqWrH02W2EFFVYw==\n  dependencies:\n    is-number \"^4.0.0\"\n    kind-of \"^6.0.0\"\n    math-random \"^1.0.1\"\n\nreadable-stream@^2.2.2, readable-stream@~2.3.6:\n  version \"2.3.7\"\n  resolved \"https://registry.yarnpkg.com/readable-stream/-/readable-stream-2.3.7.tgz#1eca1cf711aef814c04f62252a36a62f6cb23b57\"\n  integrity sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==\n  dependencies:\n    core-util-is \"~1.0.0\"\n    inherits \"~2.0.3\"\n    isarray \"~1.0.0\"\n    process-nextick-args \"~2.0.0\"\n    safe-buffer \"~5.1.1\"\n    string_decoder \"~1.1.1\"\n    util-deprecate \"~1.0.1\"\n\nremarkable@^1.7.1:\n  version \"1.7.4\"\n  resolved \"https://registry.yarnpkg.com/remarkable/-/remarkable-1.7.4.tgz#19073cb960398c87a7d6546eaa5e50d2022fcd00\"\n  integrity sha512-e6NKUXgX95whv7IgddywbeN/ItCkWbISmc2DiqHJb0wTrqZIexqdco5b8Z3XZoo/48IdNVKM9ZCvTPJ4F5uvhg==\n  dependencies:\n    argparse \"^1.0.10\"\n    autolinker \"~0.28.0\"\n\nrepeat-element@^1.1.2:\n  version \"1.1.3\"\n  resolved \"https://registry.yarnpkg.com/repeat-element/-/repeat-element-1.1.3.tgz#782e0d825c0c5a3bb39731f84efee6b742e6b1ce\"\n  integrity sha512-ahGq0ZnV5m5XtZLMb+vP76kcAM5nkLqk0lpqAuojSKGgQtn4eRi4ZZGm2olo2zKFH+sMsWaqOCW1dqAnOru72g==\n\nrepeat-string@^1.5.2, repeat-string@^1.6.1:\n  version \"1.6.1\"\n  resolved \"https://registry.yarnpkg.com/repeat-string/-/repeat-string-1.6.1.tgz#8dcae470e1c88abc2d600fff4a776286da75e637\"\n  integrity sha1-jcrkcOHIirwtYA//Sndihtp15jc=\n\nrequire-directory@^2.1.1:\n  version \"2.1.1\"\n  resolved \"https://registry.yarnpkg.com/require-directory/-/require-directory-2.1.1.tgz#8c64ad5fd30dab1c976e2344ffe7f792a6a6df42\"\n  integrity sha1-jGStX9MNqxyXbiNE/+f3kqam30I=\n\nsafe-buffer@~5.1.0, safe-buffer@~5.1.1:\n  version \"5.1.2\"\n  resolved \"https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.1.2.tgz#991ec69d296e0313747d59bdfd2b745c35f8828d\"\n  integrity sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\n\nset-getter@^0.1.0:\n  version \"0.1.0\"\n  resolved \"https://registry.yarnpkg.com/set-getter/-/set-getter-0.1.0.tgz#d769c182c9d5a51f409145f2fba82e5e86e80376\"\n  integrity sha1-12nBgsnVpR9AkUXy+6guXoboA3Y=\n  dependencies:\n    to-object-path \"^0.3.0\"\n\nshebang-command@^2.0.0:\n  version \"2.0.0\"\n  resolved \"https://registry.yarnpkg.com/shebang-command/-/shebang-command-2.0.0.tgz#ccd0af4f8835fbdc265b82461aaf0c36663f34ea\"\n  integrity sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==\n  dependencies:\n    shebang-regex \"^3.0.0\"\n\nshebang-regex@^3.0.0:\n  version \"3.0.0\"\n  resolved \"https://registry.yarnpkg.com/shebang-regex/-/shebang-regex-3.0.0.tgz#ae16f1644d873ecad843b0307b143362d4c42172\"\n  integrity sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==\n\nsignal-exit@^3.0.2:\n  version \"3.0.3\"\n  resolved \"https://registry.yarnpkg.com/signal-exit/-/signal-exit-3.0.3.tgz#a1410c2edd8f077b08b4e253c8eacfcaf057461c\"\n  integrity sha512-VUJ49FC8U1OxwZLxIbTTrDvLnf/6TDgxZcK8wxR8zs13xpx7xbG60ndBlhNrFi2EMuFRoeDoJO7wthSLq42EjA==\n\nsource-map@^0.6.1:\n  version \"0.6.1\"\n  resolved \"https://registry.yarnpkg.com/source-map/-/source-map-0.6.1.tgz#74722af32e9614e9c287a8d0bbde48b5e2f1a263\"\n  integrity sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\n\nsprintf-js@~1.0.2:\n  version \"1.0.3\"\n  resolved \"https://registry.yarnpkg.com/sprintf-js/-/sprintf-js-1.0.3.tgz#04e6926f662895354f3dd015203633b857297e2c\"\n  integrity sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw=\n\nstring-width@^4.1.0, string-width@^4.2.0, string-width@^4.2.3:\n  version \"4.2.3\"\n  resolved \"https://registry.yarnpkg.com/string-width/-/string-width-4.2.3.tgz#269c7117d27b05ad2e536830a8ec895ef9c6d010\"\n  integrity sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==\n  dependencies:\n    emoji-regex \"^8.0.0\"\n    is-fullwidth-code-point \"^3.0.0\"\n    strip-ansi \"^6.0.1\"\n\nstring_decoder@~1.1.1:\n  version \"1.1.1\"\n  resolved \"https://registry.yarnpkg.com/string_decoder/-/string_decoder-1.1.1.tgz#9cf1611ba62685d7030ae9e4ba34149c3af03fc8\"\n  integrity sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\n  dependencies:\n    safe-buffer \"~5.1.0\"\n\nstrip-ansi@^6.0.0, strip-ansi@^6.0.1:\n  version \"6.0.1\"\n  resolved \"https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-6.0.1.tgz#9e26c63d30f53443e9489495b2105d37b67a85d9\"\n  integrity sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==\n  dependencies:\n    ansi-regex \"^5.0.1\"\n\nstrip-color@^0.1.0:\n  version \"0.1.0\"\n  resolved \"https://registry.yarnpkg.com/strip-color/-/strip-color-0.1.0.tgz#106f65d3d3e6a2d9401cac0eb0ce8b8a702b4f7b\"\n  integrity sha1-EG9l09PmotlAHKwOsM6LinArT3s=\n\nstrip-final-newline@^2.0.0:\n  version \"2.0.0\"\n  resolved \"https://registry.yarnpkg.com/strip-final-newline/-/strip-final-newline-2.0.0.tgz#89b852fb2fcbe936f6f4b3187afb0a12c1ab58ad\"\n  integrity sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==\n\nsupports-color@^7.1.0:\n  version \"7.1.0\"\n  resolved \"https://registry.yarnpkg.com/supports-color/-/supports-color-7.1.0.tgz#68e32591df73e25ad1c4b49108a2ec507962bfd1\"\n  integrity sha512-oRSIpR8pxT1Wr2FquTNnGet79b3BWljqOuoW/h4oBhxJ/HUbX5nX6JSruTkvXDCFMwDPvsaTTbvMLKZWSy0R5g==\n  dependencies:\n    has-flag \"^4.0.0\"\n\nthrough2@^2.0.0:\n  version \"2.0.5\"\n  resolved \"https://registry.yarnpkg.com/through2/-/through2-2.0.5.tgz#01c1e39eb31d07cb7d03a96a70823260b23132cd\"\n  integrity sha512-/mrRod8xqpA+IHSLyGCQ2s8SPHiCDEeQJSep1jqLYeEUClOFG2Qsh+4FU6G9VeqpZnGW/Su8LQGc4YKni5rYSQ==\n  dependencies:\n    readable-stream \"~2.3.6\"\n    xtend \"~4.0.1\"\n\nto-object-path@^0.3.0:\n  version \"0.3.0\"\n  resolved \"https://registry.yarnpkg.com/to-object-path/-/to-object-path-0.3.0.tgz#297588b7b0e7e0ac08e04e672f85c1f4999e17af\"\n  integrity sha1-KXWIt7Dn4KwI4E5nL4XB9JmeF68=\n  dependencies:\n    kind-of \"^3.0.2\"\n\ntoml@^2.3.2:\n  version \"2.3.6\"\n  resolved \"https://registry.yarnpkg.com/toml/-/toml-2.3.6.tgz#25b0866483a9722474895559088b436fd11f861b\"\n  integrity sha512-gVweAectJU3ebq//Ferr2JUY4WKSDe5N+z0FvjDncLGyHmIDoxgY/2Ie4qfEIDm4IS7OA6Rmdm7pdEEdMcV/xQ==\n\ntypedarray@^0.0.6:\n  version \"0.0.6\"\n  resolved \"https://registry.yarnpkg.com/typedarray/-/typedarray-0.0.6.tgz#867ac74e3864187b1d3d47d996a78ec5c8830777\"\n  integrity sha1-hnrHTjhkGHsdPUfZlqeOxciDB3c=\n\nutil-deprecate@~1.0.1:\n  version \"1.0.2\"\n  resolved \"https://registry.yarnpkg.com/util-deprecate/-/util-deprecate-1.0.2.tgz#450d4dc9fa70de732762fbd2d4a28981419a0ccf\"\n  integrity sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=\n\nwhich@^2.0.1:\n  version \"2.0.2\"\n  resolved \"https://registry.yarnpkg.com/which/-/which-2.0.2.tgz#7c6a8dd0a636a0327e10b59c9286eee93f3f51b1\"\n  integrity sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==\n  dependencies:\n    isexe \"^2.0.0\"\n\nwrap-ansi@^7.0.0:\n  version \"7.0.0\"\n  resolved \"https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-7.0.0.tgz#67e145cff510a6a6984bdf1152911d69d2eb9e43\"\n  integrity sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==\n  dependencies:\n    ansi-styles \"^4.0.0\"\n    string-width \"^4.1.0\"\n    strip-ansi \"^6.0.0\"\n\nwrappy@1:\n  version \"1.0.2\"\n  resolved \"https://registry.yarnpkg.com/wrappy/-/wrappy-1.0.2.tgz#b5243d8f3ec1aa35f1364605bc0d1036e30ab69f\"\n  integrity sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=\n\nxtend@~4.0.1:\n  version \"4.0.2\"\n  resolved \"https://registry.yarnpkg.com/xtend/-/xtend-4.0.2.tgz#bb72779f5fa465186b1f438f674fa347fdb5db54\"\n  integrity sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==\n\ny18n@^5.0.5:\n  version \"5.0.8\"\n  resolved \"https://registry.yarnpkg.com/y18n/-/y18n-5.0.8.tgz#7f4934d0f7ca8c56f95314939ddcd2dd91ce1d55\"\n  integrity sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==\n\nyargs-parser@^21.0.0:\n  version \"21.0.1\"\n  resolved \"https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-21.0.1.tgz#0267f286c877a4f0f728fceb6f8a3e4cb95c6e35\"\n  integrity sha512-9BK1jFpLzJROCI5TzwZL/TU4gqjK5xiHV/RfWLOahrjAko/e4DJkRDZQXfvqAsiZzzYhgAzbgz6lg48jcm4GLg==\n\nyargs@^17.5.1:\n  version \"17.5.1\"\n  resolved \"https://registry.yarnpkg.com/yargs/-/yargs-17.5.1.tgz#e109900cab6fcb7fd44b1d8249166feb0b36e58e\"\n  integrity sha512-t6YAJcxDkNX7NFYiVtKvWUz8l+PaKTLiL63mJYWR2GnHq2gjEWISzsLp9wg3aY36dY1j+gfIEL3pIF+XlJJfbA==\n  dependencies:\n    cliui \"^7.0.2\"\n    escalade \"^3.1.1\"\n    get-caller-file \"^2.0.5\"\n    require-directory \"^2.1.1\"\n    string-width \"^4.2.3\"\n    y18n \"^5.0.5\"\n    yargs-parser \"^21.0.0\"\n"
        }
      ]
    }
  ]
}