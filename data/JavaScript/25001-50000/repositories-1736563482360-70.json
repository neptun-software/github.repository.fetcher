{
  "metadata": {
    "timestamp": 1736563482360,
    "page": 70,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "elsewhencode/project-guidelines",
      "stars": 29464,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.28125,
          "content": "### Node ###\n\n# Logs\nlogs\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Optional npm cache directory\n.npm\n\n# Dependency directories\n/node_modules\n/jspm_packages\n/bower_components\n\n# Yarn Integrity file\n.yarn-integrity\n\n# Optional eslint cache\n.eslintcache\n\n# dotenv environment variables file(s)\n.env\n.env.*\n\n#Build generated\ndist/\nbuild/\n\n# Serverless generated files\n.serverless/\n\n### SublimeText ###\n# cache files for sublime text\n*.tmlanguage.cache\n*.tmPreferences.cache\n*.stTheme.cache\n\n# workspace files are user-specific\n*.sublime-workspace\n\n# project files should be checked into the repository, unless a significant\n# proportion of contributors will probably not be using SublimeText\n# *.sublime-project\n\n\n### VisualStudioCode ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n\n### Vim ###\n*.sw[a-p]\n\n### WebStorm/IntelliJ ###\n/.idea\nmodules.xml\n*.ipr\n*.iml\n\n\n### System Files ###\n*.DS_Store\n\n# Windows thumbnail cache files\nThumbs.db\nehthumbs.db\nehthumbs_vista.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.138671875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at vahid@elsewhen.co. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.296875,
          "content": "# Contributing to Project Guidelines\n\n### No guidelines here :D, hit us with your PR.\n**Working on your first Pull Request?** You can learn how from this *free* series [How to Contribute to an Open Source Project on GitHub](https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github)"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0703125,
          "content": "The MIT License (MIT)\nCopyright (c) 2018 Elsewhen https://www.elsewhen.com\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README-ir.md",
          "type": "blob",
          "size": 76.0087890625,
          "content": "[中文版](./README-zh.md)\n| [日本語版](./README-ja.md)\n| [한국어](./README-ko.md)\n| [Русский](./README-ru.md)\n| [Português](./README-pt-BR.md)\n| [Italiana](./README-it.md)\n| [English](./README.md)\n| [Persian/فارسی](./README-ir.md)\n\n<p align=\"right\">\n  <a href=\"https://www.elsewhen.com/\">\n    <img src=\"./images/elsewhen-logo.png\" width=\"180\" height=\"180\">\n  </a>\n</p>\n\n# دستورالعمل‌های پروژه &middot; [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n\n> وقتی که شروع و توسعه یک پروژه جدید برای شما شبیه به حرکت در یک میدان سبز و خالی (که هیچ ساختاری ندارد) است (استعاره از شروع کردن یک پروژه یا کار جدید از ابتدا و بدون هیچ محدودیت و ساختاری است)، نگهداری از آن می‌تواند کابوسی پیچیده و تاریک برای شخص دیگری باشد.\n> در اینجا لیستی از دستورالعمل‌ها آمده است که ما آن‌ها را پیدا کرده‌ایم، نوشته‌ایم و گردآوری کرده‌ایم و فکر می‌کنیم که برای اکثر پروژه‌های جاوااسکریپت در [elsewhen](https://www.elsewhen.com) به خوبی عمل می‌کند.\n> اگر می‌خواهید یک روش بهینه را به اشتراک بگذارید، یا فکر می‌کنید یکی از این دستورالعمل‌ها باید حذف شود، [با خیال راحت آن را با ما به اشتراک بگذارید](http://makeapullrequest.com).\n\n<hr>\n\n- [گیت/Git](#git)\n  - [برخی از قوانین Git](#some-git-rules)\n  - [گردش‌کار گیت/Git workflow](#git-workflow)\n  - [نگارش بهتر متن کامیت‌ها](#writing-good-commit-messages)\n- [مستندات](#documentation)\n- [متغیرهای محیطی/Environments](#environments)\n  - [ایجاد محیط‌های توسعه‌ی یکپارچه/Consistent dev environments](#consistent-dev-environments)\n  - [وابستگی‌های یکسان و هماهنگ/Consistent dependencies](#consistent-dependencies)\n- [وابستگی‌ها/Dependencies](#dependencies)\n- [تست کردن/Testing](#testing)\n- [ساختار و نام‌گذاری/Structure and Naming](#structure-and-naming)\n- [سبک کدنویسی/Code style](#code-style)\n  - [برخی از دستورالعمل‌های code style](#code-style-check)\n  - [اعمال استانداردهای سبک کدنویسی](#enforcing-code-style-standards)\n- [ثبت وقایع/Logging](#logging)\n- [ای‌پی‌آی/API](#api)\n  - [طراحی API](#api-design)\n  - [امنیت ای‌پی‌آی/API security](#api-security)\n  - [مستندسازی ای‌پی‌آی/API documentation](#api-documentation)\n- [دسترس‌پذیری/Accessibility](#a11y)\n- [مجوزدهی/Licensing](#licensing)\n\n<a name=\"git\"></a>\n\n## 1. گیت/Git\n\n<p align=\"right\">\n  <img src=\"/images/branching.png\" width=\"135\" height=\"135\">\n</p>\n\n<a name=\"some-git-rules\"></a>\n\n### 1.1 برخی از قوانین Git\n\nمجموعه‌ای از قوانین وجود دارد که باید آن‌ها را به خاطر داشته باشید:\n\n- کار را در برنچ feature انجام دهید\n\n_چرا:_\n\n> این روش باعث می‌شود که تمام کارها به صورت مجزا در یک برنچ اختصاصی انجام شوند، نه در برنچ اصلی. این کار به شما امکان را می‌دهد تا چندین درخواست Pull Request بدون سردرگمی ارسال کنید. همچنین می‌توانید به طور مکرر کد را به‌روزرسانی کنید، بدون اینکه برنچ اصلی را با کد ناپایدار و ناتمام آلوده کنید. [توضیحات بیشتر ...](https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow)\n\n- از برنچ `develop` انشعاب بگیرید\n\n_چرا:_\n\n> به این ترتیب، می‌توانید مطمئن شوید که کد برنچ master تقریباً همیشه بدون مشکل build می‌شود و معمولاً می‌توان آن را مستقیماً برای releases استفاده کرد (این کار ممکن است برای برخی پروژه‌ها بیش از حد لازم باشد).\n\n- هرگز مستقیماً به برنچ `develop` یا `master` پوش نکنید. بلکه یک درخواست Pull Request ایجاد کنید.\n\n_چرا:_\n\n> این کار به اعضای تیم اطلاع می‌دهد که یک feature تکمیل شده است. همچنین امکان بررسی آسان کد توسط سایرین را فراهم می‌کند و فضایی برای بحث درباره feature پیشنهادی ایجاد می‌کند.\n\n- برنچ `develop` محلی/local خود را قبل از پوش کردن یک feature، ابتدا بروزرسانی و مورد بازبینی تعاملی (interactive rebase) قرار دهید، سپس درخواست Pull Request ایجاد کنید.\n\n_چرا:_\n\n> ری‌بیس (Rebase) برنچ درخواست‌شده (`master` یا `develop`) را merge می‌کند و کامیت‌هایی که به‌صورت locally انجام داده‌اید را به بالای تاریخچه اعمال می‌کند، بدون اینکه کامیت merge ایجاد کند (در صورتی که تعارضی وجود نداشته باشد). نتیجه آن یک تاریخچه تمیز و مرتب خواهد بود. [توضیحات بیشتر ...](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)\n\n- تعارضات احتمالی را در حین rebase و قبل از ایجاد درخواست Pull Request برطرف کنید.\n- برنچ‌های feature ایجاد شده در local و remote را پس از ادغام حذف کنید.\n\n_چرا:_\n\n> لیست برنچ‌های شما را با برنچ‌های بی‌استفاده درهم می‌آمیزد (شلوغ می‌کند). حذف برنچ‌های feature باعث می‌شود که هر برنچ تنها یک‌بار به برنچ اصلی (`master` یا `develop`) ادغام شود. برنچ‌های feature باید فقط تا زمانی که کار هنوز در حال انجام است وجود داشته باشند.\n\n- قبل از ایجاد درخواست Pull Request، مطمئن شوید که برنچ feature شما با موفقیت build می‌شود و همه testها (شامل بررسی‌های سبک/استایل کد) با موفقیت انجام می‌شود.\n\n_چرا:_\n\n> شما قصد دارید که کد خود را به یک برنچ stable اضافه کنید. اگر testهای برنچ feature شما ناموفق باشند، احتمال زیادی وجود دارد که build برنچ مقصد نیز شکست بخورد. علاوه بر این، قبل از ایجاد درخواست Pull Request، نیاز است که بررسی سبک و استایل کد را انجام شود. این کار باعث بهبود خوانایی کد می‌شود و احتمال ترکیب شدن تغییرات قالب‌بندی با تغییرات واقعی را کاهش می‌دهد.\n\n- [از فایل](./.gitignore) `.gitignore` استفاده کنید.\n\n_چرا:_\n\n> این فایل از قبل دارای لیستی از فایل‌های سیستمی است که نباید همراه با کد شما به مخزن remote ارسال شوند. علاوه بر این، پوشه‌ها و فایل‌های تنظیمات برای بیشتر ویرایشگرهای مورد استفاده و همچنین پوشه‌های dependency رایج را نیز مستثنی می‌کند.\n\n- از برنچ‌های `develop` و `master` محافظت کنید.\n\n_چرا:_\n\n> این کار از برنچ‌های آماده برای production در برابر دریافت تغییرات غیرمنتظره و غیرقابل بازگشت محافظت می‌کند. توضیحات بیشتر ... [GitHub](https://help.github.com/articles/about-protected-branches/), [Bitbucket](https://confluence.atlassian.com/bitbucketserver/using-branch-permissions-776639807.html) and [GitLab](https://docs.gitlab.com/ee/user/project/protected_branches.html)\n\n<a name=\"git-workflow\"></a>\n\n### 1.2 گردش‌کار گیت/Git workflow\n\nبه خاطر دلایل ذکرشده در بالا، ما از [Feature-branch-workflow](https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow) همراه با [Interactive Rebasing](https://www.atlassian.com/git/tutorials/merging-vs-rebasing#the-golden-rule-of-rebasing) و برخی عناصر [Gitflow](https://www.atlassian.com/git/tutorials/comparing-workflows#gitflow-workflow) (نام‌گذاری و داشتن یک develop branch). استفاده می‌کنیم. مراحل اصلی به شرح زیر هستند:\n\n- برای یک پروژه جدید، یک مخزن گیت (Git repository) را در پوشه پروژه مقداردهی اولیه کنید. **برای ویژگی‌ها/تغییرات بعدی، این مرحله باید نادیده گرفته شود.**\n\n```sh\ncd <project directory>\ngit init\n```\n\n- یک شاخه جدید برای توسعه یک feature یا رفع یک bug ایجاد کنید و به آن منتقل شوید.\n\n```sh\ngit checkout -b <branchname>\n```\n\n- تغییری در آن ایجاد کنید.\n\n```sh\ngit add <file1> <file2> ...\ngit commit\n```\n\n_چرا:_\n\n> کامند `git add <file1> <file2> ... ` - شما باید فقط فایل‌هایی را اضافه کنید که یک تغییر کوچک و منسجم را تشکیل می‌دهند.\n\n> کامند `git commit` یک ویرایشگر باز می‌کند که به شما اجازه می‌دهد مقادیر subject را از body در کامیت خود از هم جدا کنید.\n\n> در _بخش 1.3_ بیشتر درباره آن بخوانید.\n\n_نکته:_\n\n> می‌توانید به جای آن از دستور `git add -p` استفاده کنید که به شما این امکان را می‌دهد تمام تغییرات اعمال‌شده را یک به یک بررسی کنید و تصمیم بگیرید که آیا آنها را در کامیت وارد کنید یا نه.\n\n- با مخزن remote همگام‌سازی کنید تا تغییراتی که از دست داده‌اید را دریافت کنید.\n\n```sh\ngit checkout develop\ngit pull\n```\n\n_چرا:_\n\n> این کار به شما فرصت می‌دهد که با conflictها در سیستم خود در حین rebasing برخورد کنید، به جای اینکه یک درخواست Pull Request ایجاد کنید که حاوی conflictها باشد.\n\n- برنچ feature خود را با استفاده از interactive rebase با آخرین تغییرات از برنچ develop به‌روزرسانی کنید.\n\n```sh\ngit checkout <branchname>\ngit rebase -i --autosquash develop\n```\n\n_چرا:_\n\n> می‌توانید از `--autosquash` استفاده کنید تا تمام کامیت‌های خود را به یک کامیت ترکیب کنید. هیچ‌کس نمی‌خواهد برای یک ویژگی در شاخه develop چندین کامیت داشته باشد. [توضیحات بیشتر ...](https://robots.thoughtbot.com/autosquashing-git-commits)\n\n- اگر conflicts ندارید، این مرحله را رد کنید. در غیراینصورت، [آنها را حل کنید](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/) و rebase را ادامه دهید.\n\n```sh\ngit add <file1> <file2> ...\ngit rebase --continue\n```\n\n- برنچ خود را push کنید. rebase تاریخچه را تغییر می‌دهد، بنابراین باید از `-f` برای اجبار تغییرات به برنچ remote استفاده کنید. اگر شخص دیگری روی برنچ شما کار می‌کند، از گزینه کمتر مخرب `--force-with-lease` استفاده کنید.\n\n```sh\ngit push -f\n```\n\n_چرا:_\n\n> وقتی که rebase انجام می‌دهید، تاریخچه برنچ feature خود را تغییر می‌دهید. در نتیجه، گیت `git push` معمولی را رد می‌کند. به جای آن باید از فلگ `-f` یا `--force` استفاده کنید. [توضیحات بیشتر ...](https://developer.atlassian.com/blog/2015/04/force-with-lease/)\n\n- یک درخواست Pull Request ایجاد کنید.\n- درخواست Pull Request توسط یک بررسی کننده پذیرفته، ادغام و بسته خواهد شد.\n- در صورت اتمام کار، برنچ feature محلی/local خود را حذف کنید.\n\n```sh\ngit branch -d <branchname>\n```\n\nتمام برنچ‌های local را که در مخزن remote وجود ندارند را حذف کنید. (این کار باعث می‌شود که برنچ‌های که دیگر وجود ندارند، از مخزن local حذف شوند، در نتیجه محیط توسعه شما تمیز و مرتب‌ باقی می‌ماند.)\n\n```sh\ngit fetch -p && for branch in `git branch -vv --no-color | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done\n```\n\n<a name=\"writing-good-commit-messages\"></a>\n\n### 1.3 نگارش بهتر متن کامیت‌ها\n\nداشتن یک راهنمای مناسب برای ایجاد کامیت‌ها و پایبندی به آن، کار با گیت و همکاری با دیگران را بسیار آسان‌تر می‌کند. در اینجا چند قانون کلی وجود دارد:([منبع](https://chris.beams.io/posts/git-commit/#seven-rules)):\n\n- موضوع (subject) را از بدنه (body) جدا کنید و بین این دو یک خط خالی قرار دهید.\n\n_چرا:_\n\n> گیت به اندازه کافی هوشمند است که خط اول پیام کامیت شما را به‌عنوان خلاصه تشخیص دهد. در واقع، اگر به‌جای استفاده از git log از git shortlog استفاده کنید، یک لیست طولانی از پیام‌های کامیت خواهید دید که شامل شناسه کامیت و تنها خلاصه پیام است.\n\n- طول خط موضوع (subject) را به ۵۰ کاراکتر محدود کنید و بدنه پیام را در ۷۲ کاراکتر بشکنید.\n\n_چرا:_\n\n> کامیت‌ها تا حد ممکن باید جزئی و متمرکز باشند؛ نیازی به طولانی‌نویسی در آن‌ها نیست. [توضیحات بیشتر ...](https://medium.com/@preslavrachev/what-s-with-the-50-72-rule-8a906f61f09c)\n\n- حرف اول موضوع (subject) را با عبارت بزرگ (Capitalize) شروع کنید.\n- موضوع (subject) را با نقطه تمام نکنید.\n- از [وجه امری](https://en.wikipedia.org/wiki/Imperative_mood) در موضوع (subject) استفاده کنید.\n\n_چرا:_\n\n> به جای نوشتن پیام‌هایی که فقط بیانگر/توصیف‌کننده کاری است که کامیت‌کننده انجام داده، بهتر است این پیام‌ها را به عنوان دستورالعمل‌هایی در نظر بگیرید که بیان می‌کنند پس از اعمال کامیت در مخزن، چه چیزی قرار است انجام شود. (توضیح مترجم: پیام‌های کامیت باید بر نتیجه و هدف تمرکز کنند، نه صرفاً بر عملیات انجام‌شده.) [توضیحات بیشتر ...](https://news.ycombinator.com/item?id=2079612)\n\n- از قسمت بدنه (body) برای توضیح **چه کاری** و **چرا** انجام شده، استفاده کنید، نه **چگونگی** انجام آن.\n\n<a name=\"documentation\"></a>\n\n## 2. مستندات\n\n<p align=\"right\">\n  <img src=\"/images/documentation.png\" alt=\"Documentation\" width=\"128\" height=\"128\">\n</p>\n\n- از این [قالب](./README.sample.md) برای فایل `README.md` استفاده کنید؛ اگر بخش‌هایی وجود دارد که پوشش داده نشده‌اند، با خیال راحت آن‌ها را اضافه کنید.\n- برای پروژه‌هایی که بیش از یک مخزن (repository) دارند، لینک به مخازن دیگر را در فایل‌های `README.md` مربوطه قرار دهید..\n- با پیشرفت پروژه، فایل `README.md` را به‌روز نگه دارید.\n- کد خود را کامنت‌گذاری کنید. سعی کنید با هر بخش اصلی کد، به‌وضوح توضیح دهید که قصد دارید چه کاری انجام دهید.\n- اگر درباره کد یا روش مورد استفاده شما در گیت‌هاب یا استک‌اورفلو بحثی باز وجود دارد، لینک آن را در کامنت خود بگنجانید.\n- از کامنت‌ها به‌عنوان توجیهی برای کد ضعیف استفاده نکنید. کد خود را تمیز نگه دارید.\n- از کد تمیز به‌عنوان بهانه‌ای برای عدم کامنت‌گذاری استفاده نکنید.\n- با پیشرفت کد، کامنت‌ها را نیز متناسب به‌روز نگه دارید.\n\n<a name=\"environments\"></a>\n\n## 3. متغیرهای محیطی/Environments\n\n<p align=\"right\">\n  <img src=\"/images/laptop.png\" alt=\"Environments\" width=\"128\" height=\"128\">\n</p>\n\n- در صورت نیاز، environmentهای جداگانه‌ای برای `development`، `test` و `production` تعریف کنید.\n\n_چرا:_\n\n> در محیط‌ها (environments) مختلف ممکن است data، tokens، APIs، ports و... متفاوتی نیاز باشند. ممکن است بخواهید یک حالت `development` ایزوله داشته باشید که به APIهای جعلی متصل می‌شود و داده‌های قابل پیش‌بینی برمی‌گرداند، که این کار هم تست‌های خودکار و هم تست‌های دستی را بسیار ساده‌تر می‌کند. یا شاید بخواهید Google Analytics را فقط در محیط `production` فعال کنید و به همین ترتیب.\n> [توضیحات بیشتر ...](https://stackoverflow.com/questions/8332333/node-js-setting-up-environment-specific-configs-to-be-used-with-everyauth)\n\n- پیکربندی‌های مختص هر محیط اجرایی را از متغیرهای محیطی (environment variables) بارگذاری کنید و هرگز آن‌ها را به‌عنوان مقادیر ثابت در کد قرار ندهید. [به این نمونه نگاه کنید](./config.sample.js).\n\n_چرا:_\n\n> در این فایل‌ها ممکن است tokens، passwords و دیگر اطلاعات ارزشمند وجود داشته باشند. پیکربندی/کانفیگ شما باید به‌درستی از بخش‌های داخلی برنامه جدا باشد، به گونه‌ای که کد در هر لحظه ممکن است عمومی شود.\n\n_چگونه:_\n\n> فایل‌های `.env` را برای ذخیره متغیرهای خود استفاده کنید و آن‌ها را به `.gitignore` اضافه کنید تا از مخزن مستثنی شوند. در عوض، یک فایل `.env.example` کامیت کنید که به‌عنوان راهنما برای توسعه‌دهندگان عمل کند. برای محیط production، باید همچنان متغیرهای محیطی را به روش استاندارد تنظیم کنید. [بیشتر بخوانید](https://medium.com/@rafaelvidaurre/managing-environment-variables-in-node-js-2cb45a55195f)\n\n- توصیه می‌شود قبل از شروع برنامه، متغیرهای محیطی را اعتبارسنجی کنید. [این نمونه را مشاهده کنید](./configWithTest.sample.js) که از `joi` برای اعتبارسنجی مقادیر ارائه‌شده استفاده می‌کند.\n\n_چرا:_\n\n> این کار می‌تواند دیگران را از ساعت‌ها مشکل‌یابی/troubleshooting نجات دهد.\n\n> <a name=\"consistent-dev-environments\"></a>\n\n### 3.1 ایجاد محیط‌های توسعه‌ی یکپارچه/Consistent dev environments:\n\n- نسخه‌ی Node خود را در بخش `engines` در فایل `package.json` تنظیم کنید..\n\n_چرا:_\n\n> این کار به دیگران اطلاع می‌دهد که پروژه با کدام نسخه‌ی Node کار می‌کند. [توضیحات بیشتر ...](https://docs.npmjs.com/files/package.json#engines)\n\n- همچنین از `nvm` استفاده کنید و یک فایل `.nvmrc` در ریشه‌ی پروژه‌ی خود ایجاد کنید. فراموش نکنید که به آن در مستندات اشاره کنید.\n\n_چرا:_\n\n> هر کسی که از `nvm` استفاده می‌کند، می‌تواند به سادگی با اجرای کامند `nvm use` به نسخه‌ی مناسب Node سوئیچ کند. [توضیحات بیشتر ...](https://github.com/creationix/nvm)\n\n- تنظیم یک اسکریپت `preinstall` که نسخه‌های Node و npm را بررسی کند، ایده‌ی خوبی است.\n\n_چرا:_\n\n> برخی وابستگی‌ها/dependencies ممکن است در صورت نصب توسط نسخه‌های جدیدتر npm با خطا مواجه شوند.\n\n- در صورت امکان از Docker استفاده کنید.\n\n_چرا:_\n\n> این کار می‌تواند یک محیط سازگار در کل فرآیند کاری شما فراهم کند، بدون نیاز به تنظیمات یا وابستگی‌های پیچیده. [توضیحات بیشتر ...](https://hackernoon.com/how-to-dockerize-a-node-js-application-4fbab45a0c19)\n\n- از پکیج‌های محلی/local به‌جای پکیج‌های نصب‌شده به‌صورت گلوبالی/globally استفاده کنید.\n\n_چرا:_\n\n> این کار به شما اجازه می‌دهد پکیج‌های خود را با همکارانتان به اشتراک بگذارید، به جای اینکه انتظار داشته باشید آن‌ها را به‌صورت گلوبالی روی سیستم خود نصب کرده باشند.\n\n<a name=\"consistent-dependencies\"></a>\n\n### 3.2 وابستگی‌های یکسان و هماهنگ/Consistent dependencies:\n\n- اطمینان حاصل کنید که اعضای تیم دقیقاً همان وابستگی‌ها (dependencies) را مانند شما دریافت کنند.\n\n_چرا:_\n\n> زیرا می‌خواهید که کد، در هر محیط توسعه‌ای به همان شکل مورد انتظار عمل کند و یکسان باشد. [توضیحات بیشتر ...](https://kostasbariotis.com/consistent-dependencies-across-teams/)\n\n_چگونه:_\n\n> از `package-lock.json` در نسخه 5 از `npm` یا بالاتر، استفاده کنید.\n\n_من npm@5 ندارم:_\n\n> در این صورت می‌توانید از `Yarn` استفاده کنید و اطمینان حاصل کنید که این موضوع را در فایل `README.md`. پس از هر به‌روزرسانی وابستگی‌ها، lock file و `package.json` باید نسخه‌های یکسانی داشته باشند. [توضیحات بیشتر ...](https://yarnpkg.com/en/)\n\n_من اسم `Yarn` را دوست ندارم:_\n\n> متأسفانه انتخاب دیگری ندارید. برای نسخه‌های قدیمی‌تر `npm`, هنگام نصب وابستگی جدید از `—save --save-exact` استفاده کنید و قبل از انتشار پروژه، فایل `npm-shrinkwrap.json` ایجاد کنید. [توضیحات بیشتر ...](https://docs.npmjs.com/files/package-locks)\n\n<a name=\"dependencies\"></a>\n\n## 4. وابستگی‌ها/Dependencies\n\n<p align=\"right\">\n  <img src=\"/images/modules.png\" alt=\"modules\" width=\"128\" height=\"128\">\n</p>\n\n- بر روی پکیج‌های فعلی خود را که در حال حاضر در دسترس هستند، پیگیری و نظارت کنید: به عنوان مثال، از دستور `npm ls --depth=0` استفاده کنید. (توضیحات مترجم: با استفاده از دستور `npm ls --depth=0` در محیط خط فرمان، می‌توانید فهرستی از پکیج‌های سطح اول (بدون نمایش وابستگی‌های زیرمجموعه‌ای) را مشاهده کنید. این کار به شما کمک می‌کند تا بدانید چه بسته‌هایی در حال حاضر در پروژه‌تان نصب هستند و از وضعیت آن‌ها مطلع باشید.) [توضیحات بیشتر ...](https://docs.npmjs.com/cli/ls)\n- بررسی کنید آیا هیچ‌یک از پکیج‌های شما بی‌استفاده یا نامربوط (غیرضروری یا غیرکاربردی) شده‌اند: با استفاده از ابزار `depcheck` [توضیحات بیشتر ...](https://www.npmjs.com/package/depcheck)\n\n_چرا:_\n\n> ممکن است یک کتابخانه بی‌استفاده را در کد خود داشته باشید که باعث افزایش حجم نهایی برنامه شود. وابستگی‌های بی‌استفاده را پیدا کرده و حذف کنید.\n\n- قبل از استفاده از یک وابستگی، آمار دانلود آن را بررسی کنید تا ببینید آیا توسط جامعه به‌طور گسترده‌ای استفاده می‌شود یا خیر: با استفاده از ابزار `npm-stat`. [توضیحات بیشتر ...](https://npm-stat.com/)\n\n_چرا:_\n\n> استفاده بیشتر (از پکیج‌ها) معمولاً به معنای داشتن تعداد بیشتری از مشارکت‌کنندگان است که اغلب منجر به نگهداری بهتر می‌شود و همه این‌ها باعث می‌شود که باگ‌ها سریع‌تر کشف و اصلاحات سریع‌تر توسعه داده شوند.\n\n- پیش از استفاده از یک وابستگی، بررسی کنید که آیا آن وابستگی نسخه‌های منظم و پایداری ارائه می‌دهد و تعداد زیادی نگهدارندگان (maintainers) دارد یا نه. به عنوان مثال، می‌توانید از دستور `npm view async` استفاده کنید. [توضیحات بیشتر ...](https://docs.npmjs.com/cli/view)\n\n_چرا:_\n\n> داشتن تعداد زیادی از مشارکت‌کنندگان زمانی مؤثر است که نگهدارندگان بتوانند اصلاحات و تغییرات را به سرعت merge کنند.\n\n- اگر به وابستگی کمتر شناخته شده‌ای (غیرمشهور) نیاز دارید، قبل از استفاده از آن، با تیم خود مشورت کنید.\n- همیشه مطمئن شوید که برنامه شما با آخرین نسخه از وابستگی‌هایش بدون هیچگونه مشکلی/خرابی کار می‌کند: از دستور `npm outdated` استفاده کنید. [توضیحات بیشتر ...](https://docs.npmjs.com/cli/outdated)\n\n_چرا:_\n\n> بروزرسانی‌ وابستگی‌ها (dependencies) گاهی شامل تغییرات مخرب می‌شوند. هر زمان که بروزرسانی‌ها نمایش داده می‌شوند، حتماً release note ها را بررسی کنید. وابستگی‌های (dependencies) خود را یکی‌یکی بروزرسانی کنید، زیرا اگر مشکلی پیش بیاید، عیب‌یابی آن آسان‌تر خواهد بود. از ابزارهای کاربردی مانند موارد زیر استفاده کنید: [npm-check-updates](https://github.com/tjunnone/npm-check-updates).\n\n- بررسی کنید که آیا بسته موردنظر مشکلات امنیتی شناخته‌شده‌ای دارد یا خیر؛ به عنوان مثال، با استفاده از [Snyk](https://snyk.io/test?utm_source=risingstack_blog).\n\n<a name=\"testing\"></a>\n\n## 5. تست کردن/Testing\n\n<p align=\"right\">\n  <img src=\"/images/testing.png\" alt=\"testing\" width=\"128\" height=\"128\">\n</p>\n\n- در صورت نیاز، یک environment به نام `test` (برای حالت تست) ایجاد کنید.\n\n_چرا:_\n\n> گاهی تست end to end در حالت `production` ممکن است کافی به نظر برسد، اما در موارد خاص نیاز به محیط تست جداگانه‌ای وجود دارد. مثلاً ممکن است نخواهید اطلاعات تحلیلی در حالت `production` فعال شود و داشبورد افراد را با داده‌های تست آلوده کنید. (توضیحات مترجم: چون داده‌های تستی ممکن است اطلاعات واقعی را تحت تأثیر قرار دهد، مثلا باعث شلوغی و ایجاد داده‌های غیرضروری شوند و یا مانع از درک دقیق اطلاعات واقعی توسط کاربران یا تیم تحلیل شوند.) مثال دیگر این است که ممکن است API شما در حالت تولید محدودیت‌ تعداد درخواست (rate limit) داشته باشد و پس از تعداد مشخصی درخواست، فراخوانی APIها توسط تست را مسدود کند.\n\n- فایل‌های تست خود را در کنار ماژول‌های مورد آزمایش با استفاده از الگوی نام‌گذاری خاصی `*.test.js` یا `*.spec.js` قرار دهید، مانند `moduleName.spec.js`.\n\n_چرا:_\n\n> برای پیدا کردن یک تست واحد، در ساختار پوشه‌ها جستجو و پیمایش نکنید. [توضیحات بیشتر ...](https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc)\n\n- برای جلوگیری از سردرگمی، فایل‌های تست اضافی خود را پر یک پوشه جداگانه قرار دهید.\n\n_چرا:_\n\n> برخی از فایل‌های تست مستقیماً به فایل پیاده‌سازی خاصی مرتبط نیستند. باید این فایل‌ها را در پوشه‌ای قرار دهید که احتمالاً توسط سایر توسعه‌دهندگان به راحتی یافت شود: پوشه `__test__`. این نام `__test__` هم اکنون یک استاندارد است و توسط اکثر فریم‌ورک‌های تست جاوااسکریپت تشخیص داده می‌شود.\n\n- کد قابل تست بنویسید، از اثرات جانبی (side effect) خودداری کنید، اثرات جانبی را جدا کنید، و توابع خالص (pure functions) بنویسید.\n\n_چرا:_\n\n> هر بخش از منطق کسب‌وکار (business logic) باید به صورت مستقل و جداگانه مورد آزمایش و تست قرار گیرد تا مطمئن شوید که هر قسمت به درستی کار می‌کند. باید \"تأثیر عوامل تصادفی یا فرآیندهای غیرقابل‌پیش‌بینی را در کد به حداقل برسانید\" [توضیحات بیشتر ...](https://medium.com/javascript-scene/tdd-the-rite-way-53c9b46f45e3)\n\n> یک تابع خالص (pure function) تابعی است که همیشه برای ورودی یکسان، خروجی یکسانی را باز می‌گرداند. برعکس، یک تابع ناخالص (impure function) تابعی است که ممکن است اثرات جانبی داشته باشد یا برای تولید یک مقدار به شرایط خارجی وابسته باشد، که این امر باعث می‌شود کمتر قابل پیش‌بینی باشد. [توضیحات بیشتر ...](https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc)\n\n- از یک static type checker استفاده کنید\n\n_چرا:_\n\n> گاهی ممکن است به یک Static type checker نیاز داشته باشید. این ابزارها، سطحی از قابلیت اطمینان را برای کد شما به ارمغان می‌آورند. [توضیحات بیشتر ...](https://medium.freecodecamp.org/why-use-static-types-in-javascript-part-1-8382da1e0adb)\n\n- قبل از آنکه درخواست pull request به برنچ `develop` را ارسال کنید، تست‌ها را به‌صورت locally اجرا کنید.\n\n_چرا:_\n\n> قطعاً نمی‌خواهید کسی باشید که باعث شکست فرایند بیلد برنچ آماده‌ی production شده است. تست‌های خود را پس از `rebase` و پیش از ارسال به شاخه feature-branch به مخزن ریموت اجرا کنید.\n\n- تست‌های خود را از جمله دستورالعمل‌های مربوطه در بخش مناسب فایل `README.md` پروژه را مستندسازی کنید.\n\n_چرا:_\n\n> این مستندات مانند یک یادداشت راهنما است که برای توسعه‌دهندگان دیگر، کارشناسان DevOps، یا تیم تضمین کیفیت (QA) و هر کسی که با کد شما کار می‌کند، مفید خواهد بود.\n\n<a name=\"structure-and-naming\"></a>\n\n## 6. ساختار و نام‌گذاری/Structure and Naming\n\n<p align=\"right\">\n  <img src=\"/images/folder-tree.png\" alt=\"Structure and Naming\" width=\"128\" height=\"128\">\n</p>\n\n- فایل‌های خود را بر اساس ویژگی‌های محصول / صفحات / کامپوننت‌ها سازمان‌دهی کنید، نه بر اساس نقش‌ها. همچنین فایل‌های تست را در کنار آن‌ها قرار دهید.\n\n**بد**\n\n```\n.\n├── controllers\n|   ├── product.js\n|   └── user.js\n├── models\n|   ├── product.js\n|   └── user.js\n```\n\n**خوب**\n\n```\n.\n├── product\n|   ├── index.js\n|   ├── product.js\n|   └── product.test.js\n├── user\n|   ├── index.js\n|   ├── user.js\n|   └── user.test.js\n```\n\n_چرا:_\n\n> به جای داشتن لیست طولانی از فایل‌ها، ماژول‌های کوچک ایجاد کنید که هر کدام یک مسئولیت خاص را دربرمی‌گیرند، از جمله تست آن‌ها و موارد دیگر. این کار باعث می‌شود دسترسی به فایل‌ها ساده‌تر شده و بتوانید به سرعت و با یک نگاه فایل‌های مورد نظر را پیدا کنید.\n\n- فایل‌های تست اضافی خود را در یک پوشه‌ی جداگانه به نام test قرار دهید تا از سردرگمی جلوگیری شود.\n\n_چرا:_\n\n> این کار برای سایر توسعه‌دهندگان یا کارشناسان DevOps تیم شما موجب صرفه‌جویی در زمان می‌شود.\n\n- از یک پوشه به نام `./config` برای تنظیمات استفاده کنید و فایل‌های پیکربندی جداگانه برای محیط‌ها (environments) مختلف ایجاد نکنید.\n\n_چرا:_\n\n> زمانی که یک فایل کانفیگ را برای اهداف مختلف (مانند پایگاه داده، API و غیره) تجزیه می‌کنید، قرار دادن آن‌ها در پوشه‌ای با نام مشخص مانند `config` منطقی است. فقط به خاطر داشته باشید که برای محیط‌های مختلف فایل‌های جداگانه نسازید، زیرا با افزایش استقرارهای برنامه، نام‌های محیط جدیدی مورد نیاز می‌شود و مدیریت آن پیچیده خواهد شد.\n\n> مقادیر مورد استفاده در فایل‌های کانفیگ باید از طریق متغیرهای محیطی (environment variables) فراهم شوند. [توضیحات بیشتر ...](https://medium.com/@fedorHK/no-config-b3f1171eecd5)\n\n- اسکریپت‌های خود را در یک پوشه به نام `./scripts` قرار دهید. این شامل اسکریپت‌های `bash` و `node` است.\n\n_چرا:_\n\n> احتمالاً به بیش از یک اسکریپت نیاز خواهید داشت، مانند production build, development build, database feeders, database synchronization و غیره.\n\n- خروجی بیلد خود را در یک پوشه به نام `./build` قرار دهید. `build/` را به `.gitignore` اضافه کنید.\n\n_چرا:_\n\n> نام‌گذاری آن به سلیقه شما بستگی دارد، `dist` نیز گزینه خوبی است. اما با تیم خود این نام‌گذاری را هماهنگ کنید. فایل‌هایی که در این پوشه قرار می‌گیرند معمولاً تولید شده‌اند (bundled, compiled, transpiled) یا به این پوشه منتقل شده‌اند. چیزی که می‌توانید تولید کنید، هم‌تیمی‌های شما نیز باید قادر به تولید آن باشند؛ بنابراین نیازی به ارسال آن‌ها به مخزن ریموت نیست، مگر اینکه هدف خاصی داشته باشید.\n\n<a name=\"code-style\"></a>\n\n## 7. سبک کدنویسی/Code style\n\n<p align=\"right\">\n  <img src=\"/images/code-style.png\" alt=\"Code style\" width=\"128\" height=\"128\">\n</p>\n\n<a name=\"code-style-check\"></a>\n\n### 7.1 برخی از اصول code style\n\n- برای پروژه‌های جدید از سینتکس جاوااسکریپت مدرن (استیج ۲ و بالاتر) استفاده کنید. برای پروژه‌های قدیمی، با سینتکس موجود سازگار بمانید مگر اینکه قصد به‌روزرسانی آن را داشته باشید.\n\n_چرا:_\n\n> این موضوع به تصمیم شما بستگی دارد. ما از مبدل‌ها (ترنسپایلرها) برای بهره‌گیری از مزایای سینتکس جدید استفاده می‌کنیم. استیج ۲ با تغییرات جزئی احتمالا بخشی از استاندارد خواهد شد.\n\n- اطمینان حاصل کنید که بررسی سبک کدنویسی (code style) به عنوان بخشی از فرآیند build پروژه انجام شود. (تا هماهنگی و استاندارد بودن کدها در تمام مراحل توسعه حفظ شود.)\n\n_چرا:_\n\n> متوقف کردن build برنامه یکی از روش‌های اعمال سبک کدنویسی در کد است. این کار از بی‌توجهی به سبک کدنویسی جلوگیری می‌کند. این روش را برای کد سمت client و server اجرا کنید. [توضیحات بیشتر ...](https://www.robinwieruch.de/react-eslint-webpack-babel/)\n\n- برای اعمال سبک کدنویسی از [ESLint - ابزار بررسی سبک کدنویسی جاوااسکریپت](http://eslint.org/) استفاده کنید.\n\n_چرا:_\n\n> ما `eslint` را ترجیح می‌دهیم، اما شما می‌توانید انتخاب دیگری داشته باشید. این ابزار قوانین بیشتری را پشتیبانی می‌کند، همچنین قابلیت تنظیم و افزودن قوانین سفارشی را دارد.\n\n- ما از کد استایل [Airbnb](https://github.com/airbnb/javascript) برای جاوااسکریپت استفاده می‌کنیم، [بیشتر بخوانید](https://www.gitbook.com/book/duk/airbnb-javascript-guidelines/details). از کد استایلی که پروژه یا تیم شما نیاز دارد استفاده کنید (تا کدهایتان با استانداردهای تعیین‌شده هماهنگ باشند).\n- ما هنگام استفاده از [FlowType](https://flow.org/) از [قوانین بررسی سبک تایپ Flow برای ESLint](https://github.com/gajus/eslint-plugin-flowtype) استفاده می‌کنیم.\n\n_چرا:_\n\n> ابزار Flow سینتکس‌های جدیدی را معرفی می‌کند که نیاز به رعایت سبک کدنویسی خاصی دارند و باید بررسی شوند.\n\n- از فایل `.eslintignore` برای مستثنی کردن فایل‌ها یا پوشه‌ها از بررسی کد استایل استفاده کنید.\n\n_چرا:_\n\n> برای مستثنی کردن چند فایل از بررسی سبک کدنویسی، لازم نیست کدتان را با کامنت‌های `eslint-disable` شلوغ کنید.\n\n- قبل از ارسال یک Pull Request، تمام کامنت‌های `eslint-disable` خود را حذف کنید.\n\n_چرا:_\n\n> طبیعی است که هنگام کار بر روی یک بخش از کد، برای تمرکز بیشتر روی منطق، بررسی سبک را غیرفعال کنید. فقط به خاطر داشته باشید که کامنت‌های `eslint-disable` را حذف کرده و قوانین را رعایت کنید.\n\n- بسته به حجم و اندازه کار، از کامنت‌های `//TODO:` استفاده کنید یا یک تیکت باز کنید.\n\n_چرا:_\n\n> استفاده از کامنت‌های `//TODO:` به شما و همکارانتان کمک می‌کند تا وظایف کوچک مانند بازنویسی یک تابع یا به‌روزرسانی یک توضیح را به خاطر بسپارید. برای وظایف بزرگ‌تر، از فرمت `//TODO(#3456)` استفاده کنید که توسط قوانین lint اعمال می‌شود، که شماره‌ی داخل پرانتز به یک تیکت باز اشاره دارد.\n\n- همیشه کامنت‌ها را به‌روز و مرتبط با تغییرات کد نگه دارید. بخش‌های کامنت‌شده کد را حذف کنید.\n\n_چرا:_\n\n> کد شما باید تا حد ممکن خوانا باشد؛ هر چیزی که حواس را پرت می‌کند، حذف کنید. اگر یک تابع را بازنویسی کردید، تابع قدیمی را فقط کامنت نکنید، بلکه آن را حذف کنید.\n\n- از کامنت‌ها، لاگ‌ها یا نام‌های نامرتبط یا طنزآمیز پرهیز کنید.\n\n_چرا:_\n\n> اگرچه در فرآیند build برنامه آن‌ شوخی‌ها ممکن است (و بهتر است بگویم باید) حذف شود، اما گاهی source code شما به شرکت یا مشتری دیگری منتقل می‌شود که ممکن است آن‌ها چنین شوخی‌هایی را نپسندند.\n\n- نام‌ها را به گونه‌ای انتخاب کنید که قابل جست‌وجو و دارای تفاوت‌های معنادار باشند و از نام‌های کوتاه‌شده و مخفف بپرهیزید. برای توابع، از نام‌های طولانی و توصیفی استفاده کنید. نام تابع باید یک فعل یا عبارت فعلی باشد و هدف آن را به وضوح بیان کند.\n\n_چرا:_\n\n> این کار (استفاده از نام‌های کامل و توصیفی) باعث می‌شود کد خواناتر و درک آن راحت‌تر و ساده‌تر شود.\n\n- توابع خود را در فایل بر اساس «قانون نزولی» (Step-down Rule) سازمان‌دهی کنید؛ به این صورت که توابع سطح بالاتر در بالای فایل و توابع سطح پایین‌تر در زیر آن‌ها قرار گیرند.\n\n_چرا:_\n\n> این کار کد را خواناتر و درک آن بهتر می‌کند\n\n<a name=\"enforcing-code-style-standards\"></a>\n\n### 7.2 اعمال استانداردهای سبک کدنویسی\n\n- از فایل [.editorconfig](http://editorconfig.org/) استفاده کنید که به توسعه‌دهندگان کمک می‌کند تا سبک‌های کدنویسی یکسانی را بین ویرایشگرها و IDEهای مختلف پروژه تعریف و حفظ کنند.\n\n_چرا:_\n\n> پروژه EditorConfig شامل یک فرمت فایل برای تعریف سبک‌ و استال‌های کدنویسی است که شامل مجموعه‌ای از افزونه‌ها برای ویرایشگرهای متنی است، که به ویرایشگرها این امکان را می‌دهد تا فرمت فایل را بخوانند و از استایل‌های تعریف‌شده پیروی کنند. فایل‌های EditorConfig خوانا هستند و به‌خوبی با سیستم‌های کنترل نسخه کار می‌کنند.\n\n- ویرایشگر خود را طوری تنظیم کنید که به شما در مورد خطاهای سبک کدنویسی اطلاع دهد. از [eslint-plugin-prettier](https://github.com/prettier/eslint-plugin-prettier) و [eslint-config-prettier](https://github.com/prettier/eslint-config-prettier) همراه با پیکربندی ESLint خود استفاده کنید. [توضیحات بیشتر ...](https://github.com/prettier/eslint-config-prettier#installation)\n- استفاده از Git hooks را مدنظر قرار دهید.\n\n_چرا:_\n\n> استفاده از Git hooks به‌طور قابل‌توجهی بهره‌وری توسعه‌دهندگان را افزایش می‌دهد. با اعمال تغییرات، انجام commit و ارسال (push) به محیط‌های staging یا production، بدون نگرانی از خراب شدن build برنامه، می‌توانید با اطمینان بیشتری کار کنید. [توضیحات بیشتر ...](http://githooks.com/)\n\n- از Prettier همراه با یک precommit hook استفاده کنید.\n\n_چرا:_\n\n> اگرچه `prettier` به‌خودی‌خود قدرتمند است، اجرای دستی آن به‌عنوان یک تسک npm برای قالب‌بندی کد چندان کارآمد نیست. در اینجا `lint-staged` (و `husky`) وارد عمل می‌شوند. درباره پیکربندی `lint-staged` [اینجا](https://github.com/okonet/lint-staged#configuration) و پیکربندی `husky` [اینجا](https://github.com/typicode/husky) بیشتر بخوانید..\n\n<a name=\"logging\"></a>\n\n## 8. ثبت وقایع/Logging\n\n<p align=\"right\">\n  <img src=\"/images/logging.png\" alt=\"Logging\" width=\"128\" height=\"128\">\n</p>\n\n- از استفاده از console.log در سمت کلاینت در محیط production خودداری کنید.\n\n_چرا:_\n\n> حتی اگر فرآیند build برنامه شما می‌تواند (و باید) آن‌ لاگ‌ها را حذف کند، اطمینان حاصل کنید که ابزار بررسی استایل کدنویسی شما درباره‌ی باقی‌مانده‌های console.log هشدار می‌دهد.\n\n- برای تولید لاگ‌های خوانا در محیط production، بهتر است از کتابخانه‌های logging مناسب (مانند [winston](https://github.com/winstonjs/winston) یا [node-bunyan](https://github.com/trentm/node-bunyan)) استفاده کنید.\n\n_چرا:_\n\n> این کار عیب‌یابی را آسان‌تر و دلپذیرتر می‌کند، چون می‌توانید از قابلیت‌هایی مانند رنگ‌بندی، افزودن زمان به لاگ‌ها، ثبت لاگ‌ها در فایل علاوه بر کنسول و حتی ثبت لاگ‌ها در فایل‌هایی که به‌صورت روزانه ایجاد و بایگانی می‌شوند، استفاده کنید. [توضیحات بیشتر ...](https://blog.risingstack.com/node-js-logging-tutorial/)\n\n<a name=\"api\"></a>\n\n## 9. ای‌پی‌آی/API\n\n<a name=\"api-design\"></a>\n\n<p align=\"right\">\n  <img src=\"/images/api.png\" alt=\"API\" width=\"128\" height=\"128\">\n</p>\n\n### 9.1 طراحی API\n\n_چرا:_\n\n> هدف این است که رابط‌های RESTfulی طراحی کنیم که منطقی و ساده باشند تا اعضای تیم و مشتریان بتوانند به‌سادگی و به‌صورت یکنواخت از آن‌ها استفاده کنند.\n\n_چرا:_\n\n> نبود هماهنگی و سادگی می‌تواند هزینه‌های یکپارچه‌سازی و نگهداری را به طور چشمگیری افزایش دهد؛ به همین دلیل طراحی `API` در این داکیومنت گنجانده شده است.\n\n- ما عمدتاً از طراحی مبتنی بر منابع (Resource-Oriented Design) پیروی می‌کنیم که سه عنصر اصلی دارد: منابع (Resource)، مجموعه‌ها (Collection) و URLها.\n  - یک منبع شامل داده‌هایی است که می‌تواند به صورت تو در تو (nested) سازمان‌دهی شود و متدهایی برای عملیات روی آن وجود دارد.\n  - گروهی از منابع، یک مجموعه نامیده می‌شود.\n  - آدرس اینترنتی (URL) که مکان آنلاین یک منبع یا مجموعه را مشخص می‌کند.\n\n_چرا:_\n\n> این یک طراحی بسیار شناخته‌شده برای توسعه‌دهندگان است (که اصلی‌ترین مصرف‌کنندگان API هستند). علاوه بر خوانایی و سهولت استفاده، این روش به ما اجازه می‌دهد کتابخانه‌ها و connectorهای عمومی بنویسیم بدون این‌که نیاز به شناخت جزئیات خاص هر API داشته باشیم.\n\n- برای URL‌ها از kebab-case استفاده کنید.\n- برای پارامترهای query string یا فیلدهای منابع از camelCase استفاده کنید.\n- از اسامی جمع به صورت kebab-case برای نام منابع در URLها استفاده کنید.\n- همیشه از اسامی جمع برای نامگذاری URLهایی که به یک مجموعه اشاره دارند استفاده کنید: `/users`.\n\n_چرا:_\n\n> اساساً، این کار خوانایی را بهتر کرده و URLها را هماهنگ نگه می‌دارد. [توضیحات بیشتر ...](https://apigee.com/about/blog/technology/restful-api-design-plural-nouns-and-concrete-names)\n\n- در سورس کد، اسامی جمع را به متغیرها و پراپرتی‌ها با پسوند «List» تبدیل کنید.\n\n_چرا:_:\n\n> استفاده از اسامی جمع در URL مناسب است، اما در سورس کد ممکن است نامحسوس و مستعد خطا باشد.\n\n- همیشه از مفاهیم مفرد استفاده کنید که با یک مجموعه شروع شده و به یک شناسه ختم می‌شوند:\n\n```\n/students/245743\n/airports/kjfk\n```\n\n- از تولید URLهایی مانند زیر اجتناب کنید:\n\n```\nGET /blogs/:blogId/posts/:postId/summary\n```\n\n_چرا:_\n\n> این URL به جای ارجاع به یک منبع (resource)، به یک ویژگی (property) اشاره می‌کند. شما می‌توانید ویژگی مورد نظر را به‌عنوان یک پارامتر در درخواست ارسال کنید تا پاسخ دریافتی مختصرتر و بهینه‌تر باشد.\n\n- افعال را از URLهای منابع خود حذف کنید.\n\n_چرا:_\n\n> زیرا اگر برای هر عملیات resource از یک فعل استفاده کنید، به زودی با لیستی بزرگ از URLها مواجه خواهید شد که الگوی ثابتی ندارند و یادگیری را برای توسعه‌دهندگان دشوار می‌کنند. علاوه بر این، ما از افعال برای چیز دیگری استفاده می‌کنیم.\n\n- از افعال برای موارد غیر منبع (non-resources) استفاده کنید. در این حالت، API شما هیچ منبعی برنمی‌گرداند. در عوض، یک عملیات را اجرا کرده و نتیجه را برمی‌گرداند. این‌ها عملیات CRUD (ایجاد، بازیابی، به‌روزرسانی و حذف) **نیستند**:\n\n```\n/translate?text=Hallo\n```\n\n_چرا:_\n\n> زیرا برای CRUD ما از متدهای HTTP بر روی URLهای `resource` یا `collection` استفاده می‌کنیم. افعالی که درباره آن‌ها صحبت می‌کنیم در واقع کنترلرها `Controllers` هستند. شما معمولاً تعداد زیادی از این‌ها را توسعه نمی‌دهید. [توضیحات بیشتر ...](https://github.com/byrondover/api-guidelines/blob/master/Guidelines.md#controller)\n\n- اگر بدنه درخواست (request body) یا پاسخ (response) از نوع `JSON` است، لطفاً برای نام‌گذاری پراپرتی‌های JSON از `camelCase` پیروی کنید تا یکپارچگی و سازگاری حفظ شود.\n\n_چرا:_\n\n> این یک راهنما و دستورالعمل برای پروژه JavaScript است، که فرض بر این است که زبان برنامه‌نویسی مورد استفاده برای تولید و تجزیه JSON، جاوااسکریپت می‌باشد.\n\n- با وجود اینکه یک منبع (resource) مفهومی یکتا و مفرد است که مشابه با یک نمونه شیء یا رکورد پایگاه داده است، شما نباید از نام جدول (`table_name`) برای نام‌گذاری منبع و از نام ستون (`column_name`) برای پراپرتی‌های منبع استفاده کنید. به عبارت دیگر، نام‌گذاری منابع و پراپرتی‌های آن‌ها نباید مستقیماً از ساختار پایگاه داده مشتق شود؛ بلکه باید بر اساس مفاهیم و نیازهای دامنه‌ی کاربرد طراحی شود تا از وابستگی به جزئیات پیاده‌سازی جلوگیری شود.\n\n_چرا:_\n\n> زیرا هدف شما نمایش منابع است، نه جزئیات ساختار پایگاه داده.\n\n- دوباره تکرار می‌کنم، فقط از اسم‌ها در URL خود هنگام نام‌گذاری منابع استفاده کنید و سعی نکنید عملکرد آن‌ها را توضیح دهید.\n\n_چرا:_\n\n> فقط از اسامی در URLهای منبع استفاده کنید و از نوشتن مواردی مانند `/addNewUser` یا `/updateUser` خودداری کنید. همچنین از ارسال عملیات منابع به‌عنوان پارامتر اجتناب کنید.\n\n- عملکردهای CRUD را با استفاده از متدهای HTTP توضیح دهید:\n\n_چگونه:_\n\n> متد `GET`: برای دریافت از یک resource استفاده می‌شود.\n\n> متد `POST`: برای ایجاد منابع (resources) جدید و زیرمنابع (sub-resources) به کار می‌رود.\n\n> متد `PUT`: برای به‌روزرسانی منابع موجود استفاده می‌شود.\n\n> متد `PATCH`: برای به‌روزرسانی جزئی منابع موجود به کار می‌رود؛ به‌طوری‌که فقط فیلدهای ارائه‌شده را به‌روزرسانی کرده و سایر فیلدها را بدون تغییر باقی می‌گذارد.\n\n> متد `DELETE`: برای حذف منابع موجود استفاده می‌شود.\n\n- برای منابع تو در تو (Nested Resources)، توصیه می‌شود رابطه بین آن‌ها را در ساختار URL منعکس کنید. به‌عنوان مثال، برای نمایش ارتباط بین یک کارمند و شرکت مربوطه، می‌توانید از شناسه‌ها (`id`) در URL استفاده کنید.\n\n_چرا:_\n\n> این روش دسترسی به منابع مرتبط را آسان‌تر می‌کند.\n\n_چگونه:_\n\n> درخواست `GET /schools/2/students` , باید لیست تمام دانش‌آموزان مدرسه با شناسه ۲ را برگرداند.\n\n> درخواست `GET /schools/2/students/31` , باید جزئیات دانش‌آموز با شناسه ۳۱ را که متعلق به مدرسه ۲ است، برگرداند.\n\n> درخواست `DELETE /schools/2/students/31` , باید دانش‌آموز با شناسه ۳۱ را که متعلق به مدرسه ۲ است، حذف کند.\n\n> درخواست `PUT /schools/2/students/31` , باید اطلاعات دانش‌آموز با شناسه ۳۱ را که متعلق به مدرسه ۲ است، به‌روزرسانی کند.\n\n> درخواست `POST /schools` , باید یک مدرسه جدید ایجاد کرده و جزئیات مدرسه تازه ایجاد شده را برگرداند. از POST بر روی URLهای مجموعه‌ای (Collection) استفاده کنید.\n\n- برای نسخه‌دهی، از یک شماره ترتیبی ساده با پیشوند `v` استفاده کنید (مانند v1، v2) و آن را تا حد امکان در ابتدای URL قرار دهید تا دامنه بالاتری را (برای تاثیرگذاری) داشته باشد:\n\n```\nhttp://api.domain.com/v1/schools/3/students\n```\n\n_چرا:_\n\n> وقتی APIهای شما به‌طور عمومی برای سایر اشخاص ثالث در دسترس هستند، اعمال تغییرات ناسازگار (breaking changes)، می‌تواند باعث اختلال در عملکرد محصولات یا خدماتی شود که از APIهای شما استفاده می‌کنند. استفاده از نسخه‌بندی در URL می‌تواند از بروز چنین مشکلاتی جلوگیری کند. [توضیحات بیشتر ...](https://apigee.com/about/blog/technology/restful-api-design-tips-versioning)\n\n- پیام‌های پاسخ (Response) باید خودتوضیح‌دهنده باشند، به‌طوری‌که گیرنده بتواند به‌راحتی مفهوم آن‌ها را درک کند. یک پیام خطای مناسب ممکن است شبیه به این باشد:\n\n```json\n{\n\t\"code\": 1234,\n\t\"message\": \"Something bad happened\",\n\t\"description\": \"More details\"\n}\n```\n\nیا برای خطاهای اعتبارسنجی:\n\n```json\n{\n\t\"code\": 2314,\n\t\"message\": \"Validation Failed\",\n\t\"errors\": [\n\t\t{\n\t\t\t\"code\": 1233,\n\t\t\t\"field\": \"email\",\n\t\t\t\"message\": \"Invalid email\"\n\t\t},\n\t\t{\n\t\t\t\"code\": 1234,\n\t\t\t\"field\": \"password\",\n\t\t\t\"message\": \"No password provided\"\n\t\t}\n\t]\n}\n```\n\n_چرا:_\n\n> توسعه‌دهندگان در زمان‌های بحرانی که در حال عیب‌یابی و حل مشکلات پس از انتشار برنامه‌هایی که با استفاده از APIهای شما ساخته‌اند و در دست کاربران قرار گرفته‌اند، به خطاهای خوب و خوش‌طراحی‌شده وابسته هستند.\n\n_توجه: پیام‌های استثنا مربوط به امنیت را تا حد ممکن عمومی و ساده نگه دارید. به عنوان مثال، به جای اینکه بنویسید «رمز عبور اشتباه است»، می‌توانید پیام «نام کاربری یا رمز عبور نامعتبر است» را بازگردانید. این کار باعث می‌شود که به‌طور ناخودآگاه به کاربر اطلاع ندهید که نام کاربری درست است و تنها رمز عبور اشتباه است._\n\n- از این کدهای وضعیت (status codes) برای ارسال همراه با پاسخ‌های خود استفاده کنید تا مشخص کنید آیا **همه چیز درست انجام شده است یا خیر**، آیا **کلاینت اشتباهی انجام داده** یا **مشکل از API بوده است**.\n\n      _کدام یک:_\n      > پاسخ `200 OK` نشان‌دهنده موفقیت برای درخواست‌های `GET`, `PUT` یا `POST` است.\n\n      > کد `201 Created` برای زمانی است که یک نمونه جدید ایجاد می‌شود. ایجاد یک نمونه جدید با استفاده از متد `POST` کد وضعیت `201` را برمی‌گرداند.\n\n      > پاسخ `204 No Content` نشان‌دهنده موفقیت است، اما محتوایی برای ارسال در پاسخ وجود ندارد. از آن در زمانی استفاده کنید که عملیات `DELETE` با موفقیت انجام شده است.\n\n      > پاسخ `304 Not Modified` برای به حداقل رساندن انتقال اطلاعات زمانی که گیرنده قبلاً نسخه‌های کش‌شده را دارد، استفاده می‌شود.\n\n      > کد `400 Bad Request` برای زمانی است که درخواست پردازش نشده است، زیرا سرور نمی‌تواند بفهمد که مشتری چه چیزی درخواست کرده است.\n\n      > کد `401 Unauthorized` برای زمانی است که درخواست فاقد اعتبارنامه‌های معتبر است و باید با اعتبارنامه‌های مورد نیاز دوباره ارسال شود.\n\n      > کد `403 Forbidden` به این معنی است که سرور درخواست را فهمیده است، اما از اعطای مجوز خودداری می‌کند.\n\n      > کد `404 Not Found` نشان می‌دهد که منبع درخواستی پیدا نشده است.\n\n      > کد `500 Internal Server Error` نشان می‌دهد که درخواست معتبر است، اما سرور به دلیل برخی شرایط غیرمنتظره نمی‌تواند آن را انجام دهد.\n\n      _چرا:_\n      > بیشتر ارائه‌دهندگان API از تعداد کمی از کدهای وضعیت HTTP استفاده می‌کنند. برای مثال، API سرویس Google GData تنها از ۱۰ کد وضعیت، Netflix از ۹ کد، و Digg تنها از ۸ کد وضعیت استفاده می‌کنند. البته، این پاسخ‌ها معمولاً شامل بدنه‌ای هستند که اطلاعات بیشتری را ارائه می‌دهد. در کل، بیش از ۷۰ کد وضعیت HTTP وجود دارد. اما اکثر توسعه‌دهندگان همه این ۷۰ کد را به خاطر ندارند.بنابراین، اگر شما کدهای وضعیتی را انتخاب کنید که خیلی رایج نیستند، توسعه‌دهندگان مجبور می‌شوند به جای ادامه کار روی برنامه خود، وقتشان را صرف جستجو در ویکی‌پدیا کنند تا متوجه شوند شما چه چیزی را سعی دارید به آن‌ها بگویید. [توضیحات بیشتر ...](https://apigee.com/about/blog/technology/restful-api-design-what-about-errors)\n\n- تعداد کل منابع/دیتا را در پاسخ (response) خود اعلام کنید.\n- پارامترهای `limit` و `offset` را بپذیرید.\n\n- مقدار داده‌ای که یک منبع در پاسخ ارائه می‌دهد نیز باید مورد توجه قرار گیرد. مصرف‌کننده API همیشه به تمام اطلاعات مربوط به یک منبع نیاز ندارد. از پارامتر fields استفاده کنید که لیستی از فیلدها را به صورت جدا شده با کاما دریافت می‌کند تا مشخص کند کدام فیلدها در پاسخ گنجانده شوند:\n\n```\nGET /students?fields=id,name,age,class\n```\n\n- پشتیبانی از صفحه‌بندی (pagination)، فیلتر کردن (filtering) و مرتب‌سازی (sorting) نیازی نیست از ابتدا برای همه منابع (resourceها) فعال باشد. منابعی که این قابلیت را دارند، باید به طور مستند (از طریق Document) مشخص شوند.\n\n<a name=\"api-security\"></a>\n\n### 9.2 امنیت ای‌پی‌آی/API security\n\nاین موارد برخی از بهترین روش‌های امنیتی پایه هستند:\n\n- از احراز هویت پایه (Basic Authentication) استفاده نکنید، مگر اینکه از یک اتصال امن (HTTPS) استفاده کنید. توکن‌های احراز هویت نباید در URL منتقل شوند: `GET /users/123?token=asdf....`\n\n_چرا:_\n\n> زیرا توکن یا شناسه کاربری و رمز عبور به صورت متن ساده (clear text) در شبکه ارسال می‌شوند (اگرچه به صورت Base64 کدگذاری شده است، اما Base64 یک کدگذاری برگشت‌پذیر است). بنابراین، روش احراز هویت پایه ایمن نیست. [توضیحات بیشتر ...](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication)\n\n- توکن‌ها باید با استفاده از هدر Authorization در هر درخواست منتقل شوند: `Authorization: Bearer xxxxxx, Extra yyyyy`.\n- کدهای Authorization باید مدت‌زمان کوتاهی معتبر باشند.\n- هرگونه درخواست بدون TLS را رد کنید. به درخواست‌های HTTP (بدون TSL) پاسخ ندهید تا از تبادل داده‌های ناامن جلوگیری شود. اگر پاسخ می‌دهید، از کد وضعیت `403 Forbidden` استفاده کنید.\n- استفاده از نرخ محدودیت (Rate Limiting) را در نظر بگیرید.\n\n_چرا:_\n\n> برای حفاظت از API در برابر تهدیدات بات‌هایی که ممکن است هزاران بار در ساعت API شما را فراخوانی می‌کنند. باید محدودیت نرخ (rate limit) را از همان مراحل اولیه پیاده‌سازی مد نظر قرار دهید.\n\n- تنظیم مناسب هدرهای HTTP می‌تواند به ایمن‌سازی برنامه وب شما کمک کند. [توضیحات بیشتر ...](https://github.com/helmetjs/helmet)\n- API شما باید داده‌های دریافت‌شده را به فرم استانداردشان تبدیل کند یا آن‌ها را رد کند. در صورت وجود داده‌های نادرست یا ناقص، کد وضعیت 400 Bad Request را همراه با جزئیات خطا در پاسخ بازگردانید.\n- تمام داده‌های مبادله‌شده با REST API باید توسط خود API اعتبارسنجی شوند.\n- JSON خود را سریالایز (Serialize) کنید.\n\n_چرا:_\n\n> یکی از نگرانی‌های اصلی کار با JSON، جلوگیری از اجرای کدهای جاوااسکریپت دلخواه از remote در مرورگر است... یا اگر از node.js در سمت سرور استفاده می‌کنید. بسیار مهم و حیاتی است که از یک سریالایزر JSON مناسب استفاده کنید تا داده‌های ورودی کاربر به درستی کدگذاری شوند و از اجرای داده‌های ورودی کاربر در مرورگر جلوگیری شود.\n\n- نوع محتوا (Content-Type) را اعتبارسنجی کنید و بیشتر از `application/*json` (هدر Content-Type) استفاده کنید.\n\n_چرا:_\n\n> به عنوان مثال، پذیرش نوع `application/x-www-form-urlencoded` به مهاجم اجازه می‌دهد یک فرم ایجاد کند و یک درخواست POST ساده ارسال کند. سرور هرگز نباید نوع محتوا (Content-Type) را فرض کند. عدم وجود هدر Content-Type یا وجود یک Content-Type غیرمنتظره باید منجر به رد محتوا توسط سرور با یک پاسخ `4XX` شود.\n\n- پروژه API Security Checklist را بررسی کنید. [توضیحات بیشتر ...](https://github.com/shieldfy/API-Security-Checklist)\n\n<a name=\"api-documentation\"></a>\n\n### 9.3 مستندسازی ای‌پی‌آی/API documentation\n\n- بخش `API Reference` را در [README.md template](./README.sample.md) برای API پر کنید.\n- روش‌های احراز هویت API را با یک نمونه کد توضیح دهید.\n- ساختار URL (فقط path بدون root URL) را به همراه نوع درخواست (Method) شرح دهید.\n\nبرای هر Endpoint، موارد زیر را توضیح دهید:\n\n- اگر پارامترهای URL وجود دارند، آن‌ها را مطابق با نام ذکر شده در بخش URL مشخص کنید:\n\n```\nRequired: id=[integer]\nOptional: photo_id=[alphanumeric]\n```\n\n- اگر نوع درخواست POST است، نمونه‌های کاربردی ارائه دهید. قوانین پارامترهای URL در اینجا نیز اعمال می‌شوند. این بخش را به دو دسته اختیاری و الزامی تقسیم کنید.\n- پاسخ موفقیت‌آمیز (Success Response)، کد وضعیت (Status Code) چه باید باشد و آیا داده‌ای در پاسخ بازگردانده می‌شود یا خیر؟ این اطلاعات زمانی مفید است که کاربران نیاز دارند بدانند چه چیزی از پاسخ دریافت خواهند کرد:\n\n```\nCode: 200\nContent: { id : 12 }\n```\n\n- پاسخ خطا (Error Response)، بیشتر endpointها ممکن است به روش‌های مختلفی شکست بخورند. از دسترسی غیرمجاز گرفته تا پارامترهای اشتباه و غیره. تمامی این موارد باید در این بخش لیست شوند. ممکن است تکراری به نظر برسد، اما از ایجاد فرضیات جلوگیری می‌کند. به عنوان مثال:\n\n```json\n{\n\t\"code\": 401,\n\t\"message\": \"Authentication failed\",\n\t\"description\": \"Invalid username or password\"\n}\n```\n\n- از ابزارهای طراحی API استفاده کنید؛ ابزارهای متن‌باز زیادی برای مستندسازی خوب وجود دارند، مانند [API Blueprint](https://apiblueprint.org/) و [Swagger](https://swagger.io/).\n\n<a name=\"a11y\"></a>\n\n## 10. دسترس‌پذیری/Accessibility ([a11y](https://www.a11yproject.com/))\n\n<p align=\"right\">\n  <img src=\"/images/accessibility.png\" alt=\"Accessibility\" width=\"128\" height=\"128\">\n</p>\n\n### 10.1 پیاده‌سازی روش‌های دسترسی‌پذیری\n\nبرای اطمینان از حفظ سطح مشخصی از دسترسی‌پذیری، **از ابتدای پروژه خود** مراحل زیر را انجام دهید:\n\n_چرا:_\n\n> محتوای وب [به‌طور پیش‌فرض دسترسی‌پذیر](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML)است. ما این ویژگی را زمانی به خطر می‌اندازیم که امکانات پیچیده ایجاد می‌کنیم. در نظر گرفتن دسترسی‌پذیری از ابتدا بسیار آسان‌تر از بازپیاده‌سازی این ویژگی‌ها در آینده است تا تأثیر آن را کاهش دهیم.\n\n- با استفاده از ابزارهایی مانند [lighthouse](https://developers.google.com/web/tools/lighthouse#devtools) برای [دسترسی‌پذیری](https://web.dev/lighthouse-accessibility/) یا افزونه [axe DevTools](https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd?hl=en-US)برنامه‌ریزی‌هایی را جهت انجام ممیزی‌های منظم انجام دهید. بر اساس نیازهای پروژه خود، بر روی یک امتیاز حداقلی توافق کنید. امتیازدهی در این ابزارها بر اساس [ارزیابی تأثیر کاربر در axe](https://github.com/dequelabs/axe-core/blob/develop/doc/rule-descriptions.md#wcag-21-level-a--aa-rules) می‌باشد.\n\n> **نکته:** [برخی بررسی‌های مهم](https://web.dev/lighthouse-accessibility/#additional-items-to-manually-check) باید به‌صورت دستی انجام شوند، مانند ترتیب منطقی تب‌ها. ابزارهای فوق این موارد را به عنوان تست‌های دستی یا راهنمایی‌شده در کنار نتایج خودکار فهرست می‌کنند. در axe باید نتایج خودکار خود را ذخیره کنید تا این موارد را مشاهده کنید.\n\n- یک Linter مرتبط با دسترس‌پذیری نصب کنید:\n  - در ری‌اکت: [eslint-plugin-jsx-a11y](https://www.npmjs.com/package/eslint-plugin-jsx-a11y)\n  - در انگولار: [Angular Codelyzer](https://github.com/mgechev/codelyzer)\n  - در ویو: [eslint-plugin-vuejs-accessibility](https://github.com/vue-a11y/eslint-plugin-vuejs-accessibility)\n\n_چرا:_\n\n> یک لینتر به‌طور خودکار بررسی می‌کند که سطح پایه‌ای از دسترسی‌پذیری در پروژه شما رعایت شده است و راه‌اندازی آن نسبتاً آسان است.\n\n- با استفاده از [axe-core](https://www.youtube.com/watch?v=-n5Ul7WPc3Y&list=PLMlWGnpsViOMt24a-Y_dybv68H-kj6Un6&t=1649s) یا ابزارهای مشابه، تست‌های دسترسی‌پذیری را راه‌اندازی و اجرا کنید.\n- اگر از Storybook استفاده می‌کنید، این [راهنما](https://storybook.js.org/blog/accessibility-testing-with-storybook/) را دنبال کنید.\n\n_چرا:_\n\n> گنجاندن بررسی‌های دسترس‌پذیری در تست‌ها به شما کمک می‌کند تا هر تغییری که بر دسترس‌پذیری پروژه و امتیاز ممیزی تأثیر می‌گذارد، شناسایی کنید.\n\n- از یک دیزان سیستم دسترسی‌پذیر مانند [React Spectrum](https://react-spectrum.adobe.com/react-spectrum/) یا [Material Design](https://material.io/design) استفاده کنید.\n\n_چرا:_\n\n> این کامپوننت‌ها به صورت پیش‌فرض از سطح بالایی از دسترس‌پذیری برخوردار هستند.\n\n### 10.2 برخی از قوانین پایه دسترس‌پذیری که باید به پروژه خود اضافه کنید:\n\n- اطمینان حاصل کنید که نام لینک‌ها دسترس‌پذیر هستند. از aria-label برای توصیف لینک‌ها استفاده کنید.\n\n_چرا:_\n\n> لینک‌هایی که غیرقابل دسترس می‌باشند، برای دسترس‌پذیری موانعی ایجاد می‌کنند.\n\n- اطمینان حاصل کنید که لیست‌ها به‌درستی ساختاربندی شده باشند و عناصر لیست به صورت معنایی استفاده شده‌اند.\n\n_چرا:_\n\n> لیست‌ها باید دارای عناصر والد و عناصر فرزند باشند تا معتبر باشند. صفحه‌خوان‌ها (Screen Readers) به کاربران اطلاع می‌دهند که وقتی به یک لیست می‌رسند، لیست شامل چند آیتم است.\n\n- اطمینان حاصل کنید که ترتیب سرفصل‌ها (Heading Order) از نظر معنایی صحیح است.\n\n_چرا:_\n\n> سرفصل‌ها ساختار صفحه را منتقل می‌کنند. هنگامی که به درستی اعمال شوند، پیمایش صفحه آسان‌تر می‌شود.\n\n- اطمینان حاصل کنید که عناصر متنی دارای کنتراست کافی با پس‌زمینه‌ی صفحه هستند.\n\n_چرا:_\n\n> برخی افراد با بینایی کم، کنتراست پایین را تجربه می‌کنند؛ به این معنی که تفاوت زیادی بین مناطق روشن و تاریک وجود ندارد. همه چیز تقریباً با همان میزان روشنایی ظاهر می‌شود، که تشخیص خطوط، حاشیه‌ها، لبه‌ها و جزئیات را دشوار می‌کند. متنی که از نظر روشنایی بسیار نزدیک به پس‌زمینه باشد، ممکن است سخت خوانده شود.\n\n- برای تصاویر، متن جایگزین (Alt Text) ارائه دهید.\n\n_چرا:_\n\n> صفحه‌خوان‌ها نمی‌توانند تصاویر را به کلماتی تبدیل کنند که برای کاربر خوانده شود، حتی اگر تصویر فقط شامل متن باشد. در نتیجه، ضروری است که تصاویر دارای متن جایگزین کوتاه و توصیفی باشند تا کاربران صفحه‌خوان به‌وضوح محتوای تصویر و هدف آن را درک کنند.\n\nقوانین بیشتری درباره دسترس‌پذیری را می‌توانید [اینجا](https://dequeuniversity.com/rules/axe) پیدا کنید.\n\n<a name=\"licensing\"></a>\n\n## 11. مجوزدهی/Licensing\n\n<p align=\"right\">\n  <img src=\"/images/licensing.png\" alt=\"Licensing\" width=\"135\" height=\"135\">\n</p>\n\nاطمینان حاصل کنید که از منابعی استفاده می‌کنید که حق استفاده از آن‌ها را دارید. اگر از کتابخانه‌ها استفاده می‌کنید، به مجوزهای MIT، Apache یا BSD توجه کنید، اما اگر این کتابخانه‌ها را تغییر می‌دهید، حتماً جزئیات مجوز را بررسی کنید. استفاده از تصاویر و ویدئوهای دارای حق کپی‌رایت (Copyrighted) ممکن است مشکلات قانونی ایجاد کند.\n\n---\n\nمنابع:\n[RisingStack Engineering](https://blog.risingstack.com/),\n[Mozilla Developer Network](https://developer.mozilla.org/),\n[Heroku Dev Center](https://devcenter.heroku.com),\n[Airbnb/javascript](https://github.com/airbnb/javascript),\n[Atlassian Git tutorials](https://www.atlassian.com/git/tutorials),\n[Apigee](https://apigee.com/about/blog),\n[Wishtack](https://blog.wishtack.com)\n\nIcons by [icons8](https://icons8.com/)\n"
        },
        {
          "name": "README-it.md",
          "type": "blob",
          "size": 49.2138671875,
          "content": "[中文版](./README-zh.md)\n| [日本語版](./README-ja.md)\n| [한국어](./README-ko.md)\n| [English](./README.md)\n| [Русский](./README-ru.md)\n| [Português](./README-pt-BR.md)\n| [Persian/فارسی](./README-ir.md)\n\n[<img src=\"./images/elsewhen-logo.png\" width=\"180\" height=\"180\">](https://www.elsewhen.com/)\n\n# Linee guida di un progetto &middot; [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n\n> Se sviluppare un nuovo progetto è per voi come rotolarsi in un campo erboso, il mantenimento\n> è un potenziale oscuro incubo per qualcun altro.\n> Ecco un elenco delle linee guida che abbiamo trovato, scritto e raccolto che (pensiamo), possano\n> realmente ben funzionare con la maggior parte dei progetti qui a [elsewhen](https://www.elsewhen.com).\n> Se volete condividere una pratica ottimale, o pensate che qualcuna di queste linee guida debba essere rimossa, [fatecelo sapere](http://makeapullrequest.com).\n\n<hr>\n\n- [Git](#git)\n  - [Alcune regole di Git](#some-git-rules)\n  - [Flusso di lavoro di Git](#git-workflow)\n  - [Scrivere efficaci messaggi di commit](#writing-good-commit-messages)\n- [Documentazione](#documentation)\n- [Ambienti](#environments)\n  - [Ambienti di sviluppo consistenti:](#consistent-dev-environments)\n  - [Dipendenze consistenti](#consistent-dependencies)\n- [Dipendenze](#dependencies)\n- [Eseguire test](#testing)\n- [Denominazioni e strutture](#structure-and-naming)\n- [Stile di codice](#code-style)\n  - [Alcune linee guida di stile di codice](#some-code-style-guidelines)\n  - [Applicare uno standard nello stile di codice](#enforcing-code-style-standards)\n- [Logging](#logging)\n- [API](#api)\n  - [Progettazione API](#api-design)\n  - [Sicurezza API](#api-security)\n  - [Documentazione API](#api-documentation)\n- [Accessibilità](#a11y)\n- [Gestione Licenze](#licensing)\n\n<a name=\"git\"></a>\n\n## 1. Git\n\n![Git](/images/branching.png)\n<a name=\"some-git-rules\"></a>\n\n### Alcune regole di Git\n\nEcco un insieme di regole da tenere a mente:\n\n- Eseguire il lavoro in un _branch_ di funzionalità.\n\n  _Perchè:_\n\n  > In questo modo tutto il lavoro viene fatto in isolamento su _branch_ dedicato piuttosto che nel principale. Questo consente di sottomettere delle richieste _pull_ multiple senza creare confusione. E' possibile iterare senza inquinare il _branch master_ con codice potenzialmente instabile e/o non completato. [maggiori informazioni...](https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow)\n\n- Creare _branch_ da `develop`\n\n  _Perchè:_\n\n  > In questo modo ci si può assicurare che il codice in _master_ possa essere quasi sempre compilato senza problemi, e che possa essere principalmente usato direttamente per i rilasci (potrebbe essere una esagerazione per alcuni progetti).\n\n- Mai eseguire _push_ nei _branch_ `develop` o `master`. Eseguire una richiesta _pull_\n\n  _Perchè:_\n\n  > Notifica i membri della squadra che una funzionalità è stata completata. Consente anche una facile revisione tra i propri pari del codice e una discussione della funzionalità proposta sui _forum_ dedicati.\n\n- Aggiornare il _branch_ `develop` locale ed eseguire un _rebase_ interattivo prima di proporre la propria funzionalità ed eseguire una richiesta _pull_.\n\n  _Perchè:_\n\n  > L'azione di _rebase_ integrerà nei _branch_ richiesti (`master` o `develop`) i commit fatti localmente all'inizio della storicizzazione senza creare un _merge commit_ (assumendo che non ci siano conflitti). Il risultato è una buona e pulita storicizzazione. [maggiori informazioni ...](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)\n\n- Risolvere conflitti potenziali durante l'azione di _rebase_ e prima di eseguire una richiesta _pull_.\n\n- Eliminare i _branch_ di funzionalità locali e remoti dopo l'integrazione.\n\n  _Perchè:_\n\n  > Il non farlo sporcherà il proprio elenco di _branch_ con _branch_ morti. Assicura che si possa integrare il _branch_ in (`master` o `develop`) una volta sola. I _branch_ di funzionalità dovrebbero esistere solo se il lavoro è ancora in corso.\n\n- Prima di eseguire una richiesta _pull_, assicurarsi che il proprio _branch_ di funzionalità venga compilato con successo e superi tutti i test (compresi quelli di stile di codice).\n\n  _Perchè:_\n\n  > Si sta per aggiungere il proprio codice a un _branch_ stabile. Se i test nel proprio _branch_ di funzionalità falliscono, ci sarà un alta probabilità che la compilazione nel _branch_ di destinazione fallirà anch'essa. Inoltre, occorre applicare un controllo di stile di codice prima di eseguire una richiesta _pull_. Aggiunge leggibilità e riduce le possibilità che correzioni di formattazione vengano mescolate con le vere modifiche.\n\n- Usare [questo file `.gitignore`](./.gitignore).\n\n  _Perchè:_\n\n  > Ha già un elenco di file di sistema che non dovrebbero essere inviati assieme al proprio codice in un _repository_ remoto. Inoltre esclude cartelle e file di impostazione per la maggior parte degli editor utilizzati, così come molte delle più comuni cartelle di dipendenze.\n\n- Proteggere i propri _branch_ di `develop` e `master`.\n\n  _Perchè:_\n\n  > Protegge i propri _branch_ pronti per la produzione dal ricevere modifiche inattese e irreversibili, maggiori informazioni... [Github](https://help.github.com/articles/about-protected-branches/), [Bitbucket](https://confluence.atlassian.com/bitbucketserver/using-branch-permissions-776639807.html) e [GitLab](https://docs.gitlab.com/ee/user/project/protected_branches.html)\n\n<a name=\"git-workflow\"></a>\n\n### 1.2 Flusso di lavoro di Git\n\nPer la maggior parte delle ragioni sopra esposte usiamo il flusso di lavoro [Feature-branch-workflow](https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow) con [Rebase Interattivo](https://www.atlassian.com/git/tutorials/merging-vs-rebasing#the-golden-rule-of-rebasing) e alcuni elementi di [Gitflow](https://www.atlassian.com/git/tutorials/comparing-workflows#gitflow-workflow) (denominazioni e avere un _branch_ di sviluppo). I passi principali sono i seguenti:\n\n- Per un nuovo progetto, inizializzare un _repository_ git nella directory di progetto. **Per le funzionalità/modifiche successive questo passo dovrebbe essere ignorato**.\n\n  ```sh\n  cd <directory di progetto>\n  git init\n  ```\n\n- Eseguire il _checkout_ di un nuovo _branch_ di funzionalità/risoluzione _bug_.\n\n  ```sh\n  git checkout -b <nome branch>\n  ```\n\n- Eseguire le modifiche.\n\n  ```sh\n  git add <file1> <file2> ...\n  git commit\n  ```\n\n  _Perchè:_\n\n  > `git add <file1> <file2> ... ` - si dovrebbero aggiungere solo file che costituiscono una piccola e coerente modifica.\n\n  > `git commit` lancerà un editor che consente di separare il soggetto dal corpo.\n\n  > Si legga di più in merito nella _sezione 1.3_.\n\n  _Suggerimento:_\n\n  > Si può invece usare `git add -p`, che potrebbe dare la possibilità di rivedere tutte le modifiche introdotte una ad una e decidere se includerle nel _commit_ oppure no.\n\n- Sincronizzare con il _repository_ remoto per ottenere modifiche che altrimenti si sarebbero perso.\n\n  ```sh\n  git checkout develop\n  git pull\n  ```\n\n  _Perchè:_\n\n  > Fornisce la possibilità di gestire i conflitti sulla propria macchina mentre si esegue la successiva azione di _rebase_ invece che creare una richiesta _pull_ che contiene conflitti.\n\n- Aggiornare il proprio _branch_ di funzionalità con le ultime modifiche da `develop` tramite _rebase_ interattivo.\n\n  ```sh\n  git checkout <nome branch>\n  git rebase -i --autosquash develop\n  ```\n\n  _Perchè:_\n\n  > Si può usare `--autosquash` per comprimere tutti i propri _commit_ in un _commit_ singolo. Nessuno vuole molti _commit_ per una singola funzionalità nel _branch_ di sviluppo. [maggiori informazioni...](https://robots.thoughtbot.com/autosquashing-git-commits)\n\n- Se non si hanno conflitti saltare questo passo. Se si hanno conflitti, [risolverli](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/) e continuate l'azione di _rebase._\n\n  ```sh\n  git add <file1> <file2> ...\n  git rebase --continue\n  ```\n\n- Eseguire l'azione di _push_ del proprio _branch_. L'azione di _rebase_ modificherà la storicizzazione, quindi si dovrà usare `-f` per forzare le modifiche nel _branch_ remoto. Se qualcun altro sta lavorando sul proprio _branch_, usare l'opzione meno distruttiva `--force-with-lease`.\n\n  ```sh\n  git push -f\n  ```\n\n  _Perchè:_\n\n  > Quando si esegue una azione di _rebase_, si sta modificando la storicizzazione del proprio _branch_ di funzionalità. Come risultato, Git respingerà i normali `git push`. Dovrà invece essere usata l'opzione `-f` o `--force flag`. [maggiori informazioni...](https://developer.atlassian.com/blog/2015/04/force-with-lease/)\n\n- Eseguire una richiesta _pull_.\n- La richiesta _pull_ verrà accettata, incorporata e chiusa da un revisore.\n- Rimuovere il proprio _branch_ locale di funzionalità se completato.\n\n  ```sh\n  git branch -d <branchname>\n  ```\n\n  rimuovere tutti i rami che non sono più nel _repository_ remoto\n\n  ```sh\n  git fetch -p && for branch in `git branch -vv --no-color | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done\n  ```\n\n<a name=\"writing-good-commit-messages\"></a>\n\n### 1.3 Scrivere messaggi di _commit_ efficaci\n\nAvere buone linee guida per la creazione di _commit_ e osservarle rende molto più facile lavorare con Git e collaborare con altri. Ecco alcune regole di massima ([sorgente](https://chris.beams.io/posts/git-commit/#seven-rules)):\n\n- Separare l'oggetto dal corpo con una riga vuota tra i due.\n\n  _Perchè:_\n\n  > Git è in grado di considerare la prima riga del proprio messaggio di _commit_ come sommario. In effetti se si esegue `git shortlog` invece che `git log`, si vedrà un lungo elenco di messaggi di _commit_, che contengono l'identificativo del _commit_ e il solo sommario.\n\n- Limitare la riga dell'oggetto a 50 caratteri e la lunghezza della riga nel corpo a massimo 72 caratteri.\n\n  _Perchè:_\n\n  > I _commit_ dovrebbero essere più dettagliati e specifici possibile, non è il posto per essere prolissi. [maggiori informazioni...](https://medium.com/@preslavrachev/what-s-with-the-50-72-rule-8a906f61f09c)\n\n- Maiuscole nella riga di oggetto.\n- Non terminare la riga dell'oggetto con un punto.\n- Usare [il modo imperativo](https://it.wikipedia.org/wiki/Imperativo) nella riga dell'oggetto.\n\n  _Perchè:_\n\n  > Invece che scrivere messaggi che dicono cosa ha fatto chi ha eseguito il _commit_, è meglio considerare questi messaggi come istruzioni per quello che si andrà a fare dopo che il _commit_ è stato applicato nel _repository_. [maggiori informazioni...](https://news.ycombinator.com/item?id=2079612)\n\n- Usare il corpo per spiegare **cosa** e **perchè** invece di **come**.\n\n<a name=\"documentation\"></a>\n\n## 2. Documentazione\n\n![Documentazione](/images/documentation.png)\n\n- Usare questo [modello](./README.sample.md) per `README.md`. Si è liberi di aggiungere sezioni non trattate.\n- Per progetti con più di un _repository_, fornire collegamenti agli stessi nei rispettivi file `README.md`.\n- Mantenere aggiornato `README.md` mano a mano che il progetto evolve.\n- Commentare il proprio codice. Cercate di rendere il più chiaro possibile il proprio intendimento con ogni sezione principale.\n- Se esiste una discussione aperta su github o stackoverflow riguardo al codice o all'approccio che si sta usando, includere il collegamento nel proprio commento.\n- Non usare commenti come scusa per cattivo codice, mantenere il proprio codice pulito.\n- Non usare codice pulito come scusa per non commentarlo del tutto.\n- Mantenere i commenti rilevanti mano a mano che il proprio codice evolve.\n\n<a name=\"environments\"></a>\n\n## 3. Ambienti\n\n![Environments](/images/laptop.png)\n\n- Definire ambienti `development` (sviluppo), `test` (collaudo) e `production` (produzione) separati se serve.\n\n  _Perchè:_\n\n  > Dati diversi, _token_, API, porte ecc... potrebbero essere necessari in ambienti diversi. Si potrebbe volere un ambiente di sviluppo (`development`) isolato che chiami delle \"false\" API che forniscono dati predeterminati, rendendo i test sia manuali che automatici molto più facili. Oppure si portrebbe voler abilitare Google Analytics solo in ambiente di produzione (`production`) e così via. [maggiori informazioni...](https://stackoverflow.com/questions/8332333/node-js-setting-up-environment-specific-configs-to-be-used-with-everyauth)\n\n- Caricare le proprie configurazioni di sviluppo specifiche da variabili di ambiente e non aggiungerle mai alla base di codice come costanti, [guardare questo esempio](./config.sample.js).\n\n  _Perchè:_\n\n  > Si hanno _token_, password e altre preziose informazioni lì dentro. La propria configurazione dovrebbe essere correttamente separata dalle logiche interne dell'app come se la base di codice potesse essere resa pubblica in qualsiasi momento.\n\n  _Come:_\n\n  > Usare file `.env` per conservare le proprie variabili e aggiungerli a `.gitignore` per escluderli. Eseguire un _commit_ di un `.env.esempio` che serva come guida per gli sviluppatori. Per la produzione, si dovrebbero comunque impostare le proprie variabili nel modo standard. [maggiori informazioni](https://medium.com/@rafaelvidaurre/managing-environment-variables-in-node-js-2cb45a55195f)\n\n- E' raccomandato che si validino le variabili di ambiente prima che la propria app venga lanciata. [Guardare questo esempio](./configWithTest.sample.js) che usa `joi` per validare i valori passati.\n\n  _Perchè:_\n\n  > Potrebbe risparmiare ad altri ore passate a risolvere problemi.\n\n<a name=\"consistent-dev-environments\"></a>\n\n### 3.1 Ambienti di sviluppo consistenti:\n\n- Impostare la propria versione di node in `engines` in `package.json`.\n\n  _Perchè:_\n\n  > Consente agli altri di sapere su quale versione di node il progetto lavora. [maggiori informazioni...](https://docs.npmjs.com/files/package.json#engines)\n\n- Inoltre usare `nvm` e creare un file `.nvmrc` in radice del proprio progetto. Non dimenticare di citarlo nella documentazione.\n\n  _Perchè:_\n\n  > Chiunque usi `nvm` può semplicemente usare `nvm use` per passare alla versione di node adatta. [maggiori informazioni...](https://github.com/creationix/nvm)\n\n- E' una buona idea impostare uno script di preinstallazione che verifichi le versioni di node e npm.\n\n  _Perchè:_\n\n  > Alcune dipendenze potrebbero fallire quando installate da versioni più nuove di npm.\n\n- Usare immagini Docker se possibile.\n\n  _Perchè:_\n\n  > Può fornire un ambiente consistente lungo tutto il flusso di lavoro. Senza tanto bisogno di armeggiare con dipendenze o configurazioni. [maggiori informazioni...](https://hackernoon.com/how-to-dockerize-a-node-js-application-4fbab45a0c19)\n\n- Usare moduli locali invece di quelli installati globalmente.\n\n  _Perchè:_\n\n  > Consente di condividere il proprio equipaggiamento con il collega invece di aspettarsi che li abbia installati globalmente sul proprio sistema.\n\n<a name=\"consistent-dependencies\"></a>\n\n### 3.2 Consistenza nella dipendenze:\\*\\*\\*\\*\n\n- Assicurarsi che i membri della propria squadra abbiano le stesse esatte dipendenze.\n\n  _Perchè:_\n\n  > Perchè si vuole che il codice si comporti come atteso e in modo identico in qualsiasi macchina di sviluppo [maggiori informazioni...](https://kostasbariotis.com/consistent-dependencies-across-teams/)\n\n  _Come:_\n\n  > Usare `package-lock.json` su `npm@5` o superiori\n\n  _Non ho npm@5:_\n\n  > Come alternativa si potrebbe usare `Yarn` e assicurarsi di citarlo nel `README.md`. I propri file di lock e `package.json` dovrebbero avere le stesse versioni dopo ogni aggiornamento di dipendenze. [maggiori informazioni...](https://yarnpkg.com/en/)\n\n  _Non mi piace il nome `Yarn`:_\n\n  > Peccato. Per versioni più vecchie di `npm`, usare `—save --save-exact` quando si installa una nuova dipendenza e creare `npm-shrinkwrap.json` prima della pubblicazione. [maggiori informazioni...](https://docs.npmjs.com/files/package-locks)\n\n<a name=\"dependencies\"></a>\n\n## 4. Dipendenze\n\n![Github](/images/modules.png)\n\n- Tenere traccia dei propri pacchetti attualmente disponibili: es. `npm ls --depth=0`. [maggiori informazioni...](https://docs.npmjs.com/cli/ls)\n- Verificare se qualcuno dei propri pacchetti è diventato irrilevante o inutilizzato: `depcheck`. [maggiori informazioni...](https://www.npmjs.com/package/depcheck)\n\n  _Perchè:_\n\n  > Si potrebbe includere una libreria inutilizzata nel proprio codice aumentando la dimensione del pacchetto di produzione. Cercare le dipendenze inutilizzate e sbarazzarsene.\n\n- Prima di usare una dipendenza, verificare le statistiche degli scaricamenti per verificare se sia ampiamente utilizzata dalla comunità: `npm-stat`. [maggiori informazioni...](https://npm-stat.com/)\n\n  _Perchè:_\n\n  > Più utilizzi in genere significa più collaboratori, il che in genere significa migliore manutenzione, e la conseguenza è che i _bug_ vengono scoperti e corretti più velocemente.\n\n- Prima di usare una dipendenza, verificare se ha una frequenza di rilascio di versione buona, matura e con un ampio numero di manutentori: `npm view async`. [maggiori informazioni...](https://docs.npmjs.com/cli/view)\n\n  _Perchè:_\n\n  > Avere un gran numero di sottomissioni di codice da parte dei collaboratori non è così efficace se non ci sono manutentori che incorporano le correzioni e _patch_ con sufficiente velocità.\n\n- Se è necessaria una dipendenza poco conosciuta, discuterne con la squadra prima di usarla.\n\n- Assicurarsi sempre che la propria app funzioni con le ultime versioni delle proprie dipendenze senza errori: `npm outdated`. [maggiori informazioni...](https://docs.npmjs.com/cli/outdated)\n\n  _Perchè:_\n\n  > Gli aggiornamenti delle dipendenze talvolta contengono modifiche che rompono l'app. Verificate sempre le loro note di rilascio quando vengono messi a disposizione gli aggiornamenti. Aggiornare le proprie dipendenze una ad una, il che facilita la risoluzione dei problemi se qualcosa dovesse andare storto. Usare uno strumento tipo [npm-check-updates](https://github.com/tjunnone/npm-check-updates).\n\n- Verificare se il pacchetto abbia delle vulnerabilità di sicurezza note con [Snyk](https://snyk.io/test?utm_source=risingstack_blog) as esempio.\n\n<a name=\"testing\"></a>\n\n## 5. Eseguire Test\n\n![Testing](/images/testing.png)\n\n- Se necessario dotarsi di un ambiente in modalità `test`.\n\n  _Perchè:_\n\n  > Sebbene qualche volta il test _end-to-end_ in ambiente di produzione possa sembrare sufficiente, ci sono alcune eccezioni: un esempio è che si potrebbe non voler abilitare informazioni analitiche (in modalità produzione) e inquinare il cruscotto di qualcuno con dati di test. Un altro esempio è che la propria API potrebbero avere dei parametri di limite in produzione e bloccare le chiamate di test dopo un certo numero di richieste.\n\n- Posizionare i propri file di test vicino ai moduli testati usando la convenzione nominale `*.test.js` o `*.spec.js`, tipo `nomeModulo.spec.js`.\n\n  _Perchè:_\n\n  > Non si vorrà rovistare all'interno di una struttura di directory per trovare una unità di test. [maggiori informazioni...](https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc)\n\n- Inserire i propri file di test addizionali in una cartella di test separata per evitare confusione.\n\n  _Perchè:_\n\n  > Alcuni file di test non sono particolarmente legati a specifici file di implementazione. Si dovranno inserire in una cartella che sia facile da trovare per gli altri sviluppatori: `__test__`. Questo nome: `__test__` è anche uno standard ora e viene scelto dalla maggior parte delle infrastrutture di test di Javascript.\n\n- Scrivere codice che si possa testare, evitare effetti collaterali, eliminare effetti collaterali, scrivere funzioni pure\n\n  _Perchè:_\n\n  > Si vuole testare una logica di _business_ come unità separate. Si deve \"minimizzare l'impatto della casualità e dei processi non deterministici sulla affidabilità del proprio codice\". [maggiori informazioni...](https://medium.com/javascript-scene/tdd-the-rite-way-53c9b46f45e3)\n\n  > Una funzione pura è una funzione che ritorna sempre lo stesso risultato dato lo stesso input. Al contrario una funzione impura è quella che potrebbe avere effetti collaterali o dipende da condizioni esterne per produrre un valore. Il che la rende meno prevedibile. [maggiori informazioni...](https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc)\n\n- Usare un verificatore di tipo statico\n\n  _Perchè:_\n\n  > Talvolta si potrebbe aver bisogno di un verificatore di tipo statico. Porta un certo grado di affidabilità al proprio codice. [maggiori informazioni...](https://medium.freecodecamp.org/why-use-static-types-in-javascript-part-1-8382da1e0adb)\n\n- Eseguire i test localmente prima di eseguire una richiesta _pull_ nel _branch_ di sviluppo (`develop`).\n\n  _Perchè:_\n\n  > Non si vuole essere quello che ha causato una fallita compilazione in un _branch_ pronto per la produzione. Eseguire i propri test prima della propria azione di _rebase_ e prima di inviare il proprio _branch_ di funzionalità in un _repository_ remoto.\n\n- Documentare i propri test includendo istruzioni nelle sezioni rilevanti del proprio file `README.md`.\n\n  _Perchè:_\n\n  > E' una nota utile che si lascia a disposizione degli altri sviluppatori o esperti DevOps o chiunque sia abbastanza fortunato da lavorare al codice.\n\n<a name=\"structure-and-naming\"></a>\n\n## 6. Struttura e Assegnazione dei Nomi\n\n![Structure and Naming](/images/folder-tree.png)\n\n- Organizzare i propri file attorno a funzionalità / pagine / componenti, non ruoli. Inoltre inserire i propri file di test vicino alla loro implementazione.\n\n  **Cattivo**\n\n  ```\n  .\n  ├── controllers\n  |   ├── product.js\n  |   └── user.js\n  ├── models\n  |   ├── product.js\n  |   └── user.js\n  ```\n\n  **Buono**\n\n  ```\n  .****\n  ├── product\n  |   ├── index.js\n  |   ├── product.js\n  |   └── product.test.js\n  ├── user\n  |   ├── index.js\n  |   ├── user.js\n  |   └── user.test.js\n  ```\n\n  _Perchè:_\n\n  > Invece di un lungo elenco di file, si creeranno piccoli moduli che incapsulano una responsabilità compresi i test relativi e così via. E' molto più facile scorrerli e le cose si possono trovare a colpo d'occhio.\n\n- Inserire i propri file di test aggiuntivi in cartelle di test separate per evitare confusione.\n\n  _Perchè:_\n\n  > Costituisce un risparmio di tempo per gli altri sviluppatori o esperti DevOps nella propria squadra.\n\n- Usare una cartella `./config` e non creare file di configurazione diversi per i diversi ambienti.\n\n  _Perchè:_\n\n  > Quando si divide un file di configurazione per diversi scopi (database, API eccetera) metterli in una cartella con un nome molto riconoscibile tipo `config`. Ricordarsi di non generare diversi file di configurazione per diversi ambienti.\n  > Non sarebbe possibile scalarli in modo pulito, mano a mano che sono creati più sviluppi per l'app e saranno necessari nuovi nomi di ambiente per ogni distribuzione.\n  > I valori da usare nei file di configurazione dovrebbero essere forniti da variabili di ambiente. [maggiori informazioni...](https://medium.com/@fedorHK/no-config-b3f1171eecd5)\n\n- Inserire i propri script in una cartella `./scripts` . Compresi gli script `bash` e `node`.\n\n  _Perchè:_\n\n  > E' molto probabile che si finisca per avere più di uno script, per la produzione, lo sviluppo, alimentazione di database, sincronizzazione di database eccetera.\n\n- Piazzare il risultato delle compilazioni in una cartella `./build`. Aggiungere `build/` a `.gitignore`.\n\n  _Perchè:_\n\n  > Denominarla a piacimento, anche `dist` va bene, ma assicurarsi di mantenere consistenza con la propria squadra. Quello che finisce lì per la maggior parte è generato (assemblato, compilato, soggetto a _transpiling_), o ivi spostato. Anche i componenti della propria squadra dovrebbero essere in grado di generarlo, quindi non ha senso portare questi dati nel _repository_ remoto. A meno che non lo si voglia specificatamente.\n\n<a name=\"code-style\"></a>\n\n## 7. Stile di codice\n\n![Code style](/images/code-style.png)\n\n<a name=\"code-style-check\"></a>\n\n### 7.1 Alcune linee guida sullo stile di codice\n\n- Usare una sintassi di secondo stadio (_stage-2_) o superiore (_modern_) di Javascript per i propri nuovi progetti. Per quelli vecchi restare consistenti con la sintassi esistente a meno che si intenda modernizzare il progetto.\n\n  _Perchè:_\n\n  > E' una scelta personale. Qui usiamo programmi per il _transpiling_ per trarre vantaggio dalla nuova sintassi, è probabile che _stage-2_ diventi alla fine parte delle specifiche con poche minori revisioni.\n\n- Includere verifiche di stile di codice nel proprio processo di compilazione.\n\n  _Perchè:_\n\n  > Rompere la compilazione è un modo per imporre uno stile di codice. Evita di prenderlo sotto gamba. Farlo sia per il codice della parte _client_ che per quella _server_. [maggiori informazioni...](https://www.robinwieruch.de/react-eslint-webpack-babel/)\n\n- Usare [ESLint - Pluggable JavaScript linter](http://eslint.org/) per imporre lo stile di codice.\n\n  _Perchè:_\n\n  > Semplicemente noi preferiamo `eslint`, ma gli altri non sono obbligati. Supporta più regole e la possibilità di configurarle nonchè di aggiungerne di personalizzate.\n\n- Usiamo [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript) per JavaScript, [maggiori informazioni](https://www.gitbook.com/book/duk/airbnb-javascript-guidelines/details). Usare lo stile di codice javascript richiesto dal proprio progetto o dalla propria squadra.\n\n- Usiamo [Flow type style check rules for ESLint](https://github.com/gajus/eslint-plugin-flowtype) quando usiamo [FlowType](https://flow.org/).\n\n  _Perchè:_\n\n  > _Flow_ introduce poca sintassi, la quale deve seguire certe regole di stile di codice e possono essere verificate.\n\n- Usare `.eslintignore` per escludere file o cartelle dalle verifiche di stile di codice.\n\n  _Perchè:_\n\n  > Non si deve inquinare il proprio codice con commenti `eslint-disable` ogni volta che si deve escludere un paio di file dalla verifica di stile.\n\n- Rimuovere tutti i propri commenti di disabilitazione di `eslint` prima di eseguire una richiesta _pull_.\n\n  _Perchè:_\n\n  > E' normale disabilitare verifiche di stile mentre si lavora a un blocco di codice per focalizzarsi più sulla logica. Ricordarsi solo di rimuovere quei commenti `eslint-disable` e seguire le regole.\n\n- A seconda della dimensione dell'attività usare commenti `//TODO:` oppure aprire un ticket.\n\n  _Perchè:_\n\n  > In questo modo si può ricordare agli altri e a se stessi di una piccola attività (tipo rifattorizzare una funzione o aggiornare un commento). Per attività più complesse usare `//TODO(#3456)` che viene imposto da una regola di _lint_ e il numero è quello di un ticket aperto.\n\n- Commentare sempre il codice e mantenere i commenti in linea con le modifiche fino ad ora apportate. Eliminare i blocchi di codice commentati.\n\n  _Perchè:_\n\n  > Il proprio codice dovrebbe essere il più leggibile possibile, ci si dovrebbe sbarazzare di ogni distrazione. Se si rifattorizza una funzione non commentare la vecchia ma eliminarla.\n\n- Evitare commenti, log e attribuzione di nominativi irrilevanti o divertenti.\n\n  _Perchè:_\n\n  > Anche se il proprio processo di compilazione potrebbe (dovrebbe) sbarazzarsi di questi, talvolta il proprio codice sorgente potrebbe essere affidato ad altra ditta/cliente e potrebbero non trovarli così divertenti.\n\n- Rendere i propri nomi ricercabili con distinzioni significative ed evitare abbreviazioni di nomi. Per le funzioni usare nomi lunghi e descrittivi. Un nome di funzione dovrebbe essere un verbo o una frase verbale, e deve comunicare le proprie intenzioni.\n\n  _Perchè:_\n\n  > Rende la lettura del codice sorgente più naturale.\n\n- Organizzare le proprie funzioni in un file a seconda della regole di discesa. Funzioni di alto livello dovrebbero essere in testa e quelle di basso livello più in basso.\n\n  _Perchè:_\n\n  > Rende la lettura del codice sorgente più naturale.\n\n<a name=\"enforcing-code-style-standards\"></a>\n\n### 7.2 Imporre standard di stile di codice\n\n- Usare un file [.editorconfig](http://editorconfig.org/) che aiuta gli sviluppatori a definire e mantenere stili di codice consistente tra i diversi editor e IDE usati nel progetto.\n\n  _Perchè:_\n\n  > Il progetto EditorConfig consiste in un file che descrive un formato per definire stili di codice e una collezione di plugin che consentono agli editor di leggere il file di formato e di aderire agli stili definiti. I file EditorConfig sono facilmente leggibili e funzionano bene con sistemi di controllo di versione.\n\n- Fare in modo di essere notificati dal proprio editor circa gli errori di stile di codice. Usare [eslint-plugin-prettier](https://github.com/prettier/eslint-plugin-prettier) e [eslint-config-prettier](https://github.com/prettier/eslint-config-prettier) con la propria configurazione esistente di ESLint. [maggiori informazioni...](https://github.com/prettier/eslint-config-prettier#installation)\n\n- Considerare l'uso di _Git hooks_.\n\n  _Perchè:_\n\n  > Accrescono notevolmente la produttività di uno sviluppatore. Fare modifiche, eseguire _commit_ e portarle sugli ambienti di _staging_ o produzione senza paura di rompere la compilazione. [maggiori informazioni...](http://githooks.com/)\n\n- Usare _Prettier_ con un _hook_ prima del _commit_.\n\n  _Perchè:_\n\n  > Sebbene `prettier` per se stesso possa essere molto potente, non è molto produttivo se eseguito semplicemente come una attività npm a se stante ogni volta per formattare il codice. Ecco dove `lint-staged` (e `husky`) entrano in gioco. Maggiori informazioni su come configurare `lint-staged` [qui](https://github.com/okonet/lint-staged#configuration) e `husky` [qui](https://github.com/typicode/husky).\n\n<a name=\"logging\"></a>\n\n## 8. Logging\n\n![Logging](/images/logging.png)\n\n- Evitare log su console lato client in produzione.\n\n  _Perchè:_\n\n  > Anche se il processo di compilazione possa (dovrebbe) sbarazzarsene, assicurarsi che il proprio verificatore di stile di codice avvisi rispetto a log su console lasciati nel codice.\n\n- Produrre dei log di produzione leggibili. Idealmente utilizzare librerie di _logging_ in produzione (tipo [winston](https://github.com/winstonjs/winston) o [node-bunyan](https://github.com/trentm/node-bunyan)).\n\n  _Perchè:_\n\n  > Rende l'identificazione dei problemi molto meno sgradevole con colorazioni, marcature temporali, registrazioni a un file oltre a quelle su console, anche la registrazione su file che ruota giornalmente. [maggiori informazioni...](https://blog.risingstack.com/node-js-logging-tutorial/)\n\n<a name=\"api\"></a>\n\n## 9. API\n\n<a name=\"api-design\"></a>\n\n![API](/images/api.png)\n\n### 9.1 Progettazione API\n\n_Perchè:_\n\n> Si cerca di imporre lo sviluppo di interfacce _RESTful_ ben costruite, che possono essere consumate dai membri della squadra e i _client_ in modo semplice e consistente.\n\n_Perchè:_\n\n> La mancanza di consistenza e semplicità può accrescere enormemente i costi di integrazione e mantenimento. Ecco perchè la progettazione API è inclusa in questo documento.\n\n- Noi seguiamo per la maggior parte una progettazione orientata alle risorse. Ci sono tre fattori principali: risorse, collezioni e URL.\n\n  - Una risorsa ha dati, viene annidata e ci sono metodi che operano su di essa.\n  - Un gruppo di risorse è chiamata collezione.\n  - Un URL identifica la posizione _online_ di risorse o collezioni.\n\n  _Perchè:_\n\n  > Questa è una progettazione ben nota agli sviluppatori (i principali consumatori della propria API). A parte la leggibilità e la facilità d'uso, consente di scrivere librerie generiche e connettori senza neppure sapere come sia fatta l'API stessa.\n\n- Usare il _kebab-case_ per gli URL.\n\n- Usare il _camelCase_ per parametri in _query string_ o campi che rappresentano una risorsa.\n\n- Usare il _kebab-case_ al plurale per nomi di risorse negli URL.\n\n- Usare sempre la forma plurale dei nomi per denominare un url che punta a una collezione: `/utenti`.\n\n  _Perchè:_\n\n  > Fondamentalmente risulta meglio leggibile e rende gli URL consistenti. [maggiori informazioni...](https://apigee.com/about/blog/technology/restful-api-design-plural-nouns-and-concrete-names)\n\n- Nel codice sorgente convertire le forme plurali in variabili e le proprietà con un suffisso `List`.\n\n  _Perchè_:\n\n  > La forma plurale va bene negli URL ma nel codice sorgente è troppo debole e incline a errori.\n\n- Usare sempre un concetto al singolare che parte da una collezione e finisce con un identificatore:\n\n  ```\n  /studenti/245743\n  /aeroporti/kjfk\n  ```\n\n- Evitare URL tipo questo:\n\n  ```\n  GET /blogs/:blogId/posts/:postId/sommario\n  ```\n\n  _Perchè:_\n\n  > Non punta a una risorsa ma a una proprietà. Si possono passare le proprietà come parametro per ridurre la propria risposta.\n\n- Escludere i verbi dai propri URL di risorse.\n\n  _Perchè:_\n\n  > Se si usa un verbo per ogni operazione su una risorsa presto si avrà una enorme lista di URL e un modello non consistente che lo rende difficile da imparare per gli sviluppatori. Inoltre usiamo i verbi per altri scopi.\n\n- Usare verbi per non-risorse. In questo caso, la propria API non ritorna alcuna risorsa; viceversa si esegue una operazione e si ritorna il risultato. Queste **non sono** operazioni CRUD (creazione, lettura, aggiornamento e cancellazione):\n\n  ```\n  /traduci?testo=Ciao\n  ```\n\n  _Perchè:_\n\n  > Per le operazioni CRUD usiamo i metodi HTTP su URL su risorse o collezioni. I verbi di cui si sta parlando sono in realtà `Controllers`. In genere non ne sviluppano molti di questi. [maggiori informazioni...](https://byrondover.github.io/post/restful-api-guidelines/#controller)\n\n- Il corpo della richiesta o il tipo di risposta è JSON pertanto seguire la forma `camelCase` per i nomi di proprietà per mantenere una consistenza.\n\n  _Perchè:_\n\n  > Queste sono linee guida per un progetto Javascript, dove il linguaggio di programmazione per generare ed elaborare JSON si assume sia JavaScript.\n\n- Anche se una risorsa rappresenta un concetto al singolare, simile a una istanza di un oggetto o un record di database, non si dovrebbe usare il `nome_tabella` per un nome di risorsa e il `nome_colonna` per una proprietà.\n\n  _Perchè:_\n\n  > L'intendimento è di esporre risorse, non i dettagli dello schema del proprio database.\n\n- Ancora una volta, usare solo nomi nei propri URL quando si denominano le proprie risorse non si cerchi di spiegarne la loro funzionalità.\n\n  _Perchè:_\n\n  > Usare nomi solamente nei propri URL di risorsa, evitare URL che finiscono con `/aggiungiNuovoUtente` o `/aggiornaUtente`. Evitare inoltre di inviare operazioni su risorse come parametro.\n\n- Esprimere le funzionalità CRUD usando i metodi HTTP:\n\n  _Come:_\n\n  > `GET`: Per ottenere la rappresentazione di una risorsa.\n\n  > `POST`: Per creare nuove risorse e sotto risorse.\n\n  > `PUT`: Per aggiornare risorse esistenti.\n\n  > `PATCH`: Per aggiornare risorse esistenti. Aggiorna solo i campi che sono stati forniti lasciando gli altri invariati.\n\n  > `DELETE`: Per eliminare risorse esistenti.\n\n- Per risorse annidate, usare la relazione tra loro nell'URL. Ad esempio usare `id` per collegare un dipendente a una ditta.\n\n  _Perchè:_\n\n  > Questo è il modo naturale per rendere le risorse esplorabili.\n\n  _Come:_\n\n  > `GET /scuole/2/studenti `, dovrebbe ottenere la lista di tutti gli studenti dalla scuola 2.\n\n  > `GET /scuole/2/studenti/31`, dovrebbe ottenere i dettagli dello studente 31, che appartiene alla scuola 2.\n\n  > `DELETE /scuole/2/studenti/31` , dovrebbe eliminare lo studente 31, che appartiene alla scuola 2.\n\n  > `PUT /scuole/2/studenti/31` , dovrebbe aggiornare le info sullo studente 31, usare PUT solo su URL che rappresentano risorse, non collezioni.\n\n  > `POST /scuole` , dovrebbe creare una nuova scuola e ritornare i dettagli della nuova scuola creata. Usare POST su URL che rappresentano una collezione.\n\n- Usare un semplice numero ordinale per una versione con un prefisso `v` (v1, v2). Spostare tutto alla sinistra nell'URL in modo che abbia l'ordine di identificazione maggiore:\n\n  ```\n  http://api.domain.com/v1/scuole/3/studenti\n  ```\n\n  _Perchè:_\n\n  > Quando le proprie API sono disponibili per terze parti, l'aggiornamento di API con alcune modifiche incompatibili con le versioni precedenti faranno sì che i prodotti o servizi che si basano su di esse non funzioneranno più. L'utilizzo di un controllo di versione nel proprio URL previene questa eventualità. [maggiori informazioni...](https://apigee.com/about/blog/technology/restful-api-design-tips-versioning)\n\n- I messaggi di risposta devono essere auto descrittivi. Un buon messaggio di errore in risposta potrebbe essere tipo questo:\n\n  ```json\n  {\n  \t\"code\": 1234,\n  \t\"message\": \"E' successo qualcosa di brutto\",\n  \t\"description\": \"Maggiori dettagli\"\n  }\n  ```\n\n  oppure per errori di validazione:\n\n  ```json\n  {\n  \t\"code\": 2314,\n  \t\"message\": \"Validazione fallita\",\n  \t\"errors\": [\n  \t\t{\n  \t\t\t\"code\": 1233,\n  \t\t\t\"field\": \"email\",\n  \t\t\t\"message\": \"Email non valida\"\n  \t\t},\n  \t\t{\n  \t\t\t\"code\": 1234,\n  \t\t\t\"field\": \"password\",\n  \t\t\t\"message\": \"Nessuna password fornita\"\n  \t\t}\n  \t]\n  }\n  ```\n\n  _Perchè:_\n\n  > Gli sviluppatori fanno affidamento su messaggi di errore ben concepiti quando stanno cercando di risolvere il problema dopo che l'applicazione che hanno costruito usando la vostra API viene utilizzata dai loro utenti.\n\n- \\_Nota: Mantenere i messaggi di eccezione di sicurezza più generici possibile. Ad esempio invece di 'password errata' utilizzare 'utente o password errati' in modo che l'utente non possa dedurre che il nome utente sia corretto e la sola password sia sbagliata.\n\n- Usare questi codici di stato per inviare i propri codici di risposta per descrivere che **tutto ha funzionato**,\n  che l'**app _client_ ha fatto qualcosa di errato** oppure l'**API ha fatto qualcosa di errato**.\n\n  _Quali sono:_\n\n  > `200 OK` la risposta rappresenta un successo per le richieste `GET`, `PUT` o `POST`.\n\n  > `201 Created` quando viene creata una nuova istanza. Quando si crea una nuova istanza usando un metodo `POST` ritornare il codice di stato `201`.\n\n  > `204 No Content` la risposta rappresenta un successo ma non c'è contenuto da inviare con la risposta. Usarlo quando una operazione di `DELETE` ha successo.\n\n  > `304 Not Modified` la risposta è per minimizzare la info da trasferire quando il ricevente ne ha già una rappresentazione in cache.\n\n  > `400 Bad Request` quando la richiesta non viene elaborata, come se il _server_ non potesse capire cosa gli è stato chiesto.\n\n  > `401 Unauthorized` quando la richiesta è priva di credenziali valide e dovrebbe essere riproposta con le credenziali richieste.\n\n  > `403 Forbidden` il _server_ ha compreso la richiesta ma si rifiuta di autorizzarla.\n\n  > `404 Not Found` la risorsa richiesta non esiste.\n\n  > `500 Internal *Server* Error` la richiesta è valida, ma il _server_ non può esaudirla a causa di condizioni inaspettate.\n\n  _Perchè:_\n\n  > La maggior parte dei fornitori di API usa un piccolo sottoinsieme di codici di stato HTTP. Ad esempio l'api di Google GData usa solo 10 codici di stato, Netflix ne usa 9 e Digg solo 8. Naturalmente queste risposte contengono un corpo con info aggiuntive. Ci sono oltre 70 codici di stato HTTP. In ogni caso la maggior parte degli sviluppatori non li ha tutti memorizzati. Quindi quando si scelgono codici di stato che non sono molto comuni si obbligheranno gli sviluppatori ad abbandonare lo sviluppo della propria applicazione per consultare wikipedia per scoprire cosa gli si sta cercando di dire. [maggiori informazioni...](https://apigee.com/about/blog/technology/restful-api-design-what-about-errors)\n\n- Fornire il numero totale di risorse nella risposta.\n- Accettare parametri di `limit` (limite) e `offset` (scostamento).\n\n- Il volume di dati che la risorsa espone dovrebbe essere tenuto in considerazione. Il consumatore dell'API non sempre necessita della piena rappresentazione di una risorsa. Usare un parametro di specifica di campi che riceve un elenco separato da virgola di campi che devono essere inclusi nella risposta:\n\n```\nGET /studente?campi=id,nome,eta,classe\n```\n\n- Paginazioni, filtri, e ordinamento non devono essere supportati dall'inizio per tutte le risorse. Documentare quali risorse offrono filtro e ordinamento.\n\n<a name=\"api-security\"></a>\n\n### 9.2 Sicurezza delle API\n\nCi sono alcune migliori pratiche consigliate\n\n- Non usare l'autenticazione basica a meno di avere una connessione sicura (HTTPS). I _token_ di autenticazione non devono essere trasmessi nell'URL: `GET /users/123?*token*=asdf....`\n\n  _Perchè:_\n\n  > I _token_ o identificativo utente e password sono passati attraverso la rete in chiaro (codificato in base64, che è una codifica reversibile), lo schema di autenticazione basica non è sicuro. [maggiori informazioni...](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication)\n\n- I _token_ devono essere trasmessi usando l'intestazione di autorizzazione per ogni richiesta: `Authorization: Bearer xxxxxx, Extra yyyyy`.\n\n- I codici di autorizzazione dovrebbero avere vita breve.\n\n- Rifiutare qualsiasi richiesta non-TLS non rispondendo a qualunque richiesta HTTP per evitare scambio di dati non sicuro. Rispondere a queste richieste HTTP con `403 Forbidden`.\n\n- Considerare l'adozione di limiti di utilizzo\n\n  _Perchè:_\n\n  > Per proteggere le proprie API da minacce di bot che chiamano l'API migliaia di volte all'ora. Si consideri l'implementazione di limiti di utilizzo ai primi stadi dello sviluppo.\n\n- L'appropriata impostazione delle intestazioni HTTP può aiutare a isolare e mettere in sicurezza la propria applicazione web. [maggiori informazioni...](https://github.com/helmetjs/helmet)\n\n- La propria API dovrebbe convertire i dati ricevuti nella loro forma canonica o rifiutarli. Ritornare un `400 Bad Request` con dettagli circa gli errori per dati non corretti o mancanti.\n\n- Tutti i dati scambiati con API REST devono essere validati dall'API.\n\n- Serializzare il proprio JSON.\n\n  _Perchè:_\n\n  > Una preoccupazione chiave con i codificatori JSON è la prevenzione dell'esecuzione di codice Javascript arbitrario all'interno del browser oppure, se si sta usando node.js, sul _server_. E' vitale utilizzare un appropriato serializzatore JSON per codificare correttamente i dati forniti dall'utente per prevenire l'esecuzione di input fornito dall'utente nel browser.\n\n- Validare il Content-type e per lo più utilizzare l'intestazione Content-Type `application/*json`.\n\n  _Perchè:_\n\n  > Ad esempio accettando il tipo mime `application/x-www-form-urlencoded` si consente a un attaccante di creare un form e scatenare una semplice richiesta POST. Il _server_ non dovrebbe mai dare per scontato il Content-Type. La mancanza di una intestazione Content-Type oppure una non attesa dovrebbe risultare in un rifiuto del contenuto da parte del _server_ con una risposta `4XX`.\n\n- Verificare il \"Progetto per la Lista delle Verifiche per la Sicurezza delle API\". [maggiori informazioni...](https://github.com/shieldfy/API-Security-Checklist)\n\n<a name=\"api-documentation\"></a>\n\n### 9.3 Documentazione delle API\n\n- Riempire la sezione `API Reference` in [README.md template](./README.sample.md) per l'API.\n- Descrivere i metodi di autenticazione dell'API con un esempio di codice.\n- Spiegare la struttura dell'URL (solo il percorso, non la radice dell'URL) includendo il tipo di richiesta (metodo).\n\nPer ogni _endpoint_ spiegare:\n\n- I parametri per l'URL, se esistono, specificarli in base al nome citato nella sezione URL:\n\n  ```\n  Richiesto: id=[intero]\n  Opzionale: photo_id=[alfanumerico]\n  ```\n\n- Se il tipo di richiesta è POST, fornire esempi funzionanti. Le regole per i parametri di URL si applicano anche qui. Separare le sezioni tra Richiesto e Opzionale.\n\n- Risposte di successo. Quale dovrebbe essere il codice di stato e ci sono anche dei dati da ritornare? Questo è utile quando a qualcuno occorre sapere cosa dovrebbero aspettarsi i propri callback:\n\n  ```\n  Code: 200\n  Content: { id : 12 }\n  ```\n\n- Risposte di errore, la maggior parte degli _endpoint_ hanno molti modi per fallire. Da accesso non autorizzato a parametri errati ecc. Tutto ciò dovrebbe essere documentato qui. Può sembrare ripetitivo, ma aiuta ad evitare che vengano fatte delle assunzioni. Ad esempio\n\n  ```json\n  {\n  \t\"code\": 401,\n  \t\"message\": \"Autenticazione fallita\",\n  \t\"description\": \"Nome utente o password errati\"\n  }\n  ```\n\n- Usare strumenti di progettazione di API. Ce ne sono molti _open source_ con buona documentazione tipo [API Blueprint](https://apiblueprint.org/) e [Swagger](https://swagger.io/).\n\n<a name=\"a11y\"></a>\n\n## [Accessibiltà](https://www.a11yproject.com/)\n\n![Accessibilità](/images/accessibility.png)\n\n### 10.1 Mettere a punto metodi di accessibilità\n\nPrendere le seguenti misure **all'inizio del proprio progetto** per assicurare che un livello di accessibilità sia intenzionalmente sostenuto:\n\n_Perchè:_\n\n> Il contenuto Web è [accessibile in modalità predefinita](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML).Questo concetto viene compromesso quando si costruiscono funzionalità complesse. E' molto più facile ridurre questo impatto tenendo in considerazione l'accessibilità dall'inizio invece che reimplementare queste funzionalità successivamente.\n\n- Disporsi per eseguire revisioni regolari usando [lighthouse](https://developers.google.com/web/tools/lighthouse#devtools) [accessibility](https://web.dev/lighthouse-accessibility/) o l'[estensione di DevTools axe](https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd?hl=en-US). Condividere un punteggio minimo in base alle proprie specifiche di progetto. Il punteggio per entrambi gli strumenti è basato su [usare l'impatto di valutazione utente di axe](https://github.com/dequelabs/axe-core/blob/develop/doc/rule-descriptions.md#wcag-21-level-a--aa-rules).\n\n  > **Nota:** [alcune importanti verifiche](https://web.dev/lighthouse-accessibility/#additional-items-to-manually-check) devono essere fatte manualmente, es. ordine logico delle tabulazioni. Gli strumenti qui sopra elencano questi test manuali/guidati assieme ai risultati automatizzati. Con axe si devono salvare i propri risultati automatizzati per vedere questi.\n\n- Installare un _linter a11y_:\n\n  - React: [eslint-plugin-jsx-a11y](https://www.npmjs.com/package/eslint-plugin-jsx-a11y)\n  - Angular: [Angular Codelyzer](https://github.com/mgechev/codelyzer)\n  - Vue: [eslint-plugin-vuejs-accessibility](https://github.com/vue-a11y/eslint-plugin-vuejs-accessibility)\n\n  _Perchè:_\n\n  > Un linter verificherà automaticamente che un livello base di accessibilità sia raggiunto dal proprio progetto ed è relativamente facile da impostare.\n\n- Impostare e usare test a11y usando [axe-core](https://www.youtube.com/watch?v=-n5Ul7WPc3Y&list=PLMlWGnpsViOMt24a-Y_dybv68H-kj6Un6&t=1649s) o simili.\n\n- Se si sta usando storybook, fare [questo](https://storybook.js.org/blog/accessibility-testing-with-storybook/).\n\n  _Perchè:_\n\n  > Includere verifiche a11y nei propri test aiuterà a catturare qualsiasi modifica che abbia impatto sull'accessibilità del propri progetti e il proprio punteggio di revisione.\n\n- Considerare l'uso di un sistema di progettazione accessibile tipo [React Spectrum](https://react-spectrum.adobe.com/react-spectrum/) o [Material Design](https://material.io/design).\n\n  _Perchè:_\n\n  > Questi componenti sono altamente accessibili fuori dalla scatola.\n\n### 10.2 Alcune regole di accessibilità di base da aggiungere al proprio progetto:\n\n- Assicurarsi che i nomi dei link siano accessibili. Usare aria-label per descrivere i collegamenti.\n\n  _Perchè:_\n\n  > Elementi di collegamento inaccessibili pongono barriere all'accessibilità.\n\n- Assicurarsi che le liste siano strutturate correttamente e gli elementi della lista siano usati in modo semantico.\n\n  _Perchè:_\n\n  > Le liste devono avere elementi sia genitori che figli affinchè siano valide. I lettori di schermo informano gli utenti quando trovano una lista e quanti elementi ci sono in una lista.\n\n- Assicurarsi che l'ordine delle intestazioni sia semanticamente corretto.\n\n  _Perchè:_\n\n  > Le intestazioni veicolano la struttura della pagina. Quando applicate correttamente rendono la pagina più facile da navigare.\n\n- Assicurarsi che gli elementi di testo abbiano contrasto sufficiente rispetto allo sfondo della pagina.\n\n  _Perchè:_\n\n  > Alcune persone con impedimenti alla vista soffrono di un basso contrasto, il che vuol dire che non riescono a distinguere aree molto chiare o molto scure. Tutto tende ad apparire quasi della stessa luninosità, il che rende difficile distinguere strutture, cornici, margini e dettagli. Un testo troppo vicino in luminosità allo sfondo può essere difficile da leggere.\n\n- Fornire testo alternativo per le immagini.\n\n  _Perchè:_\n\n  > I lettori di schermo non hanno modo di tradurre un'immagine in parole che vengono lette all'utente, anche se l'immagine è composta solo da testo. Di conseguenza, è necessario che le immagini abbiano un testo alternativo (l'attributo `alt`) descrittivo in modo che gli utenti del lettore di schermo comprendano chiaramente i contenuti e lo scopo dell'immagine.\n\nAltre regole di accessibilità possono essere trovate [qui](https://dequeuniversity.com/rules/axe).\n\n## 11. Gestione Licenza\n\n![Licensing](/images/licensing.png)\n\nAssicurarsi di usare risorse per la quali si possiede il diritto di utilizzo. Se si utilizzano librerie, ricordarsi di cercare se licenza MIT, Apache o BSD ma se vengono modificate, verificare anche i dettagli della licenza. Le immagini o i video sottoposti a copyright potrebbero causare problemi legali.\n\n---\n\nSorgenti:\n[RisingStack Engineering](https://blog.risingstack.com/),\n[Mozilla Developer Network](https://developer.mozilla.org/),\n[Heroku Dev Center](https://devcenter.heroku.com),\n[Airbnb/javascript](https://github.com/airbnb/javascript),\n[Atlassian Git tutorials](https://www.atlassian.com/git/tutorials),\n[Apigee](https://apigee.com/about/blog),\n[Wishtack](https://blog.wishtack.com)\n\nIcone di [icons8](https://icons8.com/)\n"
        },
        {
          "name": "README-ja.md",
          "type": "blob",
          "size": 51.908203125,
          "content": "[中文版](./README-zh.md)\n| [ENGLISH](./README.md)\n| [한국어](./README-ko.md)\n| [РУССКИЙ](./README-ru.md)\n| [Português](./README-pt-BR.md)\n| [Persian/فارسی](./README-ir.md)\n\n[<img src=\"./images/elsewhen-logo.png\" width=\"180\" height=\"180\">](https://www.elsewhen.com/)\n\n# プロジェクトガイドライン[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n\n> 開発中の新たなプロジェクトは草原のようですが、メンテナンスは誰にとっても悪夢になります。\n> ここには私たちが見つけ記載し、集め考えたガイドラインがあります。 このガイドラインはほとんどの[elsewhen](https://www.elsewhen.com)の JavaScript のプロジェクトで機能しています。\n> もしもベストプラクティスを我々と共有したかったり、このガイドラインの項目は削除した方が良いと思ったら[気軽に私たちに報告してください](http://makeapullrequest.com)。\n\n- [Git](#git)\n  - [Git のルール](#some-git-rules)\n  - [Git workflow](#git-workflow)\n  - [良いコミットメッセージの書き方](#writing-good-commit-messages)\n- [ドキュメント](#documentation)\n- [開発環境](#environments)\n  - [統一された開発環境](#consistent-dev-environments)\n  - [一貫した依存性](#consistent-dependencies)\n- [依存関係](#dependencies)\n- [テスト](#testing)\n- [プロジェクトの構造と名前付け](#structure-and-naming)\n- [コードスタイル](#code-style)\n  - [コードスタイルガイドライン](#code-style-check)\n  - [標準的なコードスタイルの強制](#enforcing-code-style-standards)\n- [ログ](#logging)\n- [API](#api)\n  - [API デザイン](#api-design)\n  - [API セキュリティ](#api-security)\n  - [API ドキュメント](#api-documentation)\n- [ライセンス](#licensing)\n\n<a name=\"git\"></a>\n\n## 1. Git\n\n![Git](/images/branching.png)\n<a name=\"some-git-rules\"></a>\n\n### 1.1 Git のルール\n\nいくつかの Git のルールを覚えておきましょう。\n\n- feature ブランチで作業しましょう。\n\n  _Why:_\n\n  > 全作業がメインブランチではなくて独立した作業専用のブランチで完結するからです。そうすることによって混乱をきたすことなく複数のプルリクエストを作成することができます。作業途中のコードや不安定なコードを master ブランチを気にすることなく繰り返し作れます。[もっと読む...](https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow)\n\n- `develop`ブランチからブランチを切りましょう\n\n  _Why:_\n\n  > こうすることで master のコードを問題なくビルドできることができ、master はリリース用にほとんどそのまま利用できます。(プロジェクトによってはやりすぎかもしれません。)\n\n- `develop`と`master`ブランチに直接 Push するのはやめましょう。プルリクエストを作成しましょう。\n\n  _Why:_\n\n  > `develop`と`master`ブランチが更新されるということはチームメンバーにその機能を実装し終わったと伝えることと同義です。直接 Push さえしなければ、コードレビューや新たな機能の議論がしやすくなります。\n\n- feature ブランチを Push してプルリクエストを作成する前にローカルの`develop` ブランチを最新にして、feature ブランチをインタラクティブリベースしましょう。\n\n  _Why:_\n\n  > リベースはブランチ（`master`か`develop`か）をマージします。また local に作ったコミットをマージコミットを作成せずに Git のヒストリーのトップに並べ替えます。コンフリクトがなければ。そうすることで綺麗で素晴らしいヒストリーが残ります。[もっと読む...](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)\n\n- リベースする間やプルリクエストを作る前にコンフリクトを解消しましょう。\n- マージした後のブランチは local、remote 共に削除しましょう。\n\n  _Why:_\n\n  > 不要になったブランチをが含まれることで自身 local のブランチのリストが乱雑になるでしょう。またマージする時にのみ一回だけブランチ（`master`か`develop`）に戻ることを保証します。feature ブランチは作業中だけ存在すべきです。\n\n- プルリクエストを前に、feature ブランチのビルドの成功を確認して全てのテストを通しましょう。(コードのスタイルも含めて確認しましょう。)\n\n  _Why:_\n\n  > 安定的なコードを追加しようとする時、もし feature ブランチのテストが失敗したとすると、最終的なマージ後のテストも失敗する可能性が高いです。加えてプルリクエストを作成する前に、スタイルチェックを行う必要があります。スタイルチェックを行うことで可読性が上がり、実際のコードと一緒にフォーマットによる修正を減らすことに繋がります。\n\n- [こちらの](./.gitignore)`.gitignore`ファイルを使いましょう。\n\n  _Why:_\n\n  > この.gitignore ファイルには remote のリポジトリに含めたくないシステムファイルのリストを列挙しています。またユーザーが多くの人が使うエディタ用のフォルダやファイル(依存フォルダも同じように)も含めてます。\n\n- `develop`と`master`ブランチを保護しましょう。\n\n  _Why:_\n\n  > プロダクションに備えているブランチに予期しない破壊的なコミットが Push されることを防ぎます。\n\n<a name=\"git-workflow\"></a>\n\n### 1.2 Git workflow\n\n上記の理由のために、私達は[Feature-branch-workflow](https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow)と[Interactive Rebasing](https://www.atlassian.com/git/tutorials/merging-vs-rebasing#the-golden-rule-of-rebasing)、[Gitflow](https://www.atlassian.com/git/tutorials/comparing-workflows#gitflow-workflow) の要素のいくつか(名前付と develop ブランチを持つこと)を使います。主なステップは以下の通りです。\n\n- 新しいプロジェクトにとっては初期の git の設定。**features/changes ブランチの作成は の次のステップなので無視しましょう。**\n\n  ```sh\n  cd <project directory>\n  git init\n  ```\n\n- feature/bug-fix ブランチを作成する。\n  ```sh\n  git checkout -b <branchname>\n  ```\n- コードを変更する。\n\n  ```sh\n  git add\n  git commit -a\n  ```\n\n  _Why:_\n\n  > `git commit -a`を使うと本文から主題を切り離して始めることができます。詳しくは*section 1.3*を読みましょう。\n\n- 取り込まれていない変更を取得する為にリモートのリボジトリと同期しましょう。\n\n  ```sh\n  git checkout develop\n  git pull\n  ```\n\n  _Why:_\n\n  > こうすることでコンフリクトを含めながらプルリクエストを作成するのではなくてリベース(のちに)しつつ、コンフリクトに対処できる可能性が高まります。\n\n- feature ブランチにインタラクティブリベースをすることで常に develop の変更を取り込みましょう。\n\n  ```sh\n  git checkout <branchname>\n  git rebase -i --autosquash develop\n  ```\n\n  _Why:_\n\n  > --autosquash は全てのコミットを一つにまとめることができます。一つの feature に対して複数のコミットがある状態は望ましくありません。[もっと読む...](https://robots.thoughtbot.com/autosquashing-git-commits)\n\n- もしコンフリクトしてなかったらこの章は飛ばして大丈夫です。ただしもしコンフリクトが起きてたら[解決しましょう](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/)。そしてリベースを続けましょう。\n  ```sh\n  git add <file1> <file2> ...\n  git rebase --continue\n  ```\n- 自分のブランチを Push しましょう。リベースはヒストリーを改変しますので、リモートに Push する際は`-f` のオプションをつけて Push する必要があります。もし他の人が同じブランチで作業をしていたらより破壊的でない`--force-with-lease`を使いましょう。\n\n  ```sh\n  git push -f\n  ```\n\n  _Why:_\n\n  > リベースをすると、作業ブランチのコミットヒストリーを変えることになります。結果として Git に普通の`git push`は拒否されるので代わりに -f や--force フラグを使えば大丈夫です。[もっと読む...](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/)\n\n- プルリクエストを作りましょう。\n- プルリクエストが受け入れられたら、レビュワーによってマージされて課題が閉じられます。\n- マージが完了したらローカルのブランチを消しましょう。\n\n  ```sh\n  git branch -d <branchname>\n  ```\n\n  必要のないリモートブランチを全て削除するコマンド。\n\n  ```sh\n  git fetch -p && for branch in `git branch -vv | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done\n  ```\n\n<a name=\"writing-good-commit-messages\"></a>\n\n### 1.3 良いコミットメッセージの書き方\n\nコミットを作成して維持するための良い指針を持つと、Git をうまく使うことができ他の開発者との共同作業をとても簡単にします。ここにいくつかの経験則があります。([ソース](https://chris.beams.io/posts/git-commit/#seven-rules))\n\n- 本文を改行することで主題と切り離しましょう。\n\n  _Why:_\n\n  > Git は最初の行をそのコミットのサマリとして区別します。実際`git log`の代わりに`git shortlog`を使うと、コミット ID とサマリーのみで構成される長いコミットメッセージのリストを見ることができます。\n\n- 主題は 50 文字以内、本文を含めても 72 文字以内に制限しましょう。\n\n  _why_\n\n  > コミットはできる限りきめ細やかで完結あるべきで、コミットメッセージを冗長にすることは避けましょう。[詳しく読む](https://medium.com/@preslavrachev/what-s-with-the-50-72-rule-8a906f61f09c)\n\n- 主題の先頭は大文字にしましょう。\n- ピリオドで終わるのをやめましょう。\n- 主題部分では[命令法](https://en.wikipedia.org/wiki/Imperative_mood) を使いましょう。\n\n  _Why:_\n\n  > コミッタが何を行ったかわかりやすいメッセージを書きましょう。コミットがマージされた後にそのコミットが何をしたのかをうまく説明できるように考えるといいでしょう。[もっと読む...](https://news.ycombinator.com/item?id=2079612)\n\n- 本文は **How** ではなくて **What** と **Why**を説明しましょう。\n\n<a name=\"documentation\"></a>\n\n## 2. ドキュメント\n\n![ドキュメント](/images/documentation.png)\n\n- こちらの[テンプレート](./README.sample.md)を使って`README.md`を作成しましょう。空白のセクションがあっても気にしなくても大丈夫です。\n- 一つ以上の Git リポジトリがあるようなプロジェクトでは、各々の`README.md`ファイルをリンクさせてあげましょう。\n- プロジェクトの成長に合わせて`README.md`の情報を最新に保ちましょう。\n- コードにはコメントを書きましょう。その際には自分の意図をできる限り簡潔に書くように心がけましょう。\n- もしコードや試みているアプローチについて github や stackoverllow でオープンな議論があれば、そのリンクもコメントに含めましょう。\n- ダメなコードに対する言い訳を書くのはやめましょう。コードを綺麗に保ちましょう。\n- 綺麗なコードを全くコメントがないことに対する言い訳にするのはやめましょう。\n- コードの成長に合わせてコメントを最新に保ちましょう。\n\n<a name=\"environments\"></a>\n\n## 3. 開発環境\n\n![開発環境](/images/laptop.png)\n\n- 必要なら`development`, `test` と`production`の環境を分けて定義しましょう。\n\n  _Why:_\n\n  > データやトークンや API、ポートなど環境によって必要とされるものは様々です。。。テストの自動化と手動のテストを簡単にさせるために、`development`モードは予測可能なデータを返すフェイクの API が欲しいかもしれません。もしくは Google Analytics は`production`でだけ有効にしたかったり様々でしょう。[もっと読む...](https://stackoverflow.com/questions/8332333/node-js-setting-up-environment-specific-configs-to-be-used-with-everyauth)\n\n- 環境別の Config ファイルを環境毎に適用するようにして、コードベースに定数として決して書き込まないでください。[サンプル](./config.sample.js)\n\n  _Why:_\n\n  > トークン、パスワードなど様々な重要な個人情報を持っています。 その情報はコードベースがいつ公開されてもいいように、コードベースとは切り離さないといけません。\n\n  _How:_\n\n  > `.env`ファイルを情報を保持するために使いましょう。そのファイルは`.gitignore`に加えて、Git リポジトリからは除外されるようにします。その代わりに`.env.example`のようなサンプルを他の開発者向けのガイドとしてコミットしておきましょう。production 環境用に、環境設定は標準的なやり方で設定するようにしましょう。\n  > [もっと読む...](https://medium.com/@rafaelvidaurre/managing-environment-variables-in-node-js-2cb45a55195f)\n\n- アプリケーションを開始する前に環境変数を validate することをオススメします。[サンプルを参照](./configWithTest.sample.js) 変数を Validate するために`joi`を使っています。\n\n  _Why:_\n\n  > トラブルシューティングに費やす時間を節約することに繋がります。\n\n<a name=\"consistent-dev-environments\"></a>\n\n### 3.1 統一された開発環境\n\n- node のバージョンを`package.json`の中の`engines`に設定しましょう。\n\n  _Why:_\n\n  > どのバージョンの node をそのプロジェクトで使うべきかを示すことができます。[もっと読む...](https://docs.npmjs.com/files/package.json#engines)\n\n- さらに`nvm` を使って`.nvmrc`をプロジェクトルートに作成しましょう。ドキュメント内に記述を残すことを忘れないようにしましょう。\n\n  _Why:_\n\n  > `nvm`を使う人は誰でも誰でも`nvm use`を使うことで node のバージョンを切り替えることができます。[もっと読む...](https://github.com/creationix/nvm)\n\n- `preinstall`スクリプトを使って node と npm のバージョンを確かめるのがいいでしょう。\n\n  _Why:_\n\n  > npm の新たなバージョンでインストールすると依存関係のライブラリが失敗することがあります。\n\n- できるならば Docker イメージを使いましょう。\n\n  _Why:_\n\n  > Docker イメージは全てのワークフローを跨いで同じ環境を提供してくれます。依存関係やコンフィグファイルに悩む必要があまりないようになります。[もっと読む...](https://hackernoon.com/how-to-dockerize-a-node-js-application-4fbab45a0c19)\n\n- グローバルのモジュールを使うのではなくローカルのモジュールを使いましょう。\n\n  _Why:_\n\n  > 同僚が特定のモジュールを彼らのマシンにすでにインストールしていることを期待するのではなく、使うライブラリは共有できるようにしておきましょう。\n\n<a name=\"consistent-dependencies\"></a>\n\n### 3.2 一貫した依存関係\n\n- チームメンバーが同じ依存関係を取得できることを確認しましょう。\n\n  _Why:_\n     > コードにはどんな開発マシンでも同じ挙動をしてほしいからです。[もっと読む...](https://medium.com/@kentcdodds/why-semver-ranges-are-literally-the-worst-817cdcb09277)\n\n  _how:_\n\n  > `npm@5`以上で`package-lock.json`を使いましょう。\n\n  _npm@5 は使ってない:_\n\n  > `Yarn`を使い`README.md`を確かめることで代替手段とすることができます。各ライブラリをアップデートした後にロックファイルと`package.json` は同じバージョンを保持しているでしょう。\n\n  _`Yarn`という名前が気にくわない:_\n\n  > それは残念です。 古いバージョンの`npm`用に、パブリッシュする前に新しいライブラリをインストールしたり`npm-shrinkwrap.json`を作るときには、`—save --save-exact`を使いましょう。[もっと読む...](https://docs.npmjs.com/files/package-locks)\n\n<a name=\"dependencies\"></a>\n\n## 4. 依存関係\n\n![Github](/images/modules.png)\n\n- 使用可能な最新のパッケージを保ちましょう。 e.g.,`npm ls --depth=0`. [もっと読む...](https://docs.npmjs.com/cli/ls)\n- 無関係であったり使っていないパッケージを確認しましょう: `depcheck`. [もっと読む...](https://www.npmjs.com/package/depcheck)\n\n  _Why:_\n\n  > もしかしたら使っていないライブラリが production のサイズを増加させているかもしれません。使っていない依存関係を見つけてそれを消すようにしましょう。\n\n- ライブラリをインストールする前に、そのライブラリがコミュニティでよく使われているかどうかを確認しましょう。`npm-stat`。[もっと読む...](https://npm-stat.com/)\n\n  _Why:_\n\n  > 多く使われているということは多くのコントリビューターがいるということで、それは良いメンテナンスが行われているということになります。そのことはバグが開発者によっていち早く発見され、修正されることに繋がります\n\n- ライブラリをインストールする前に、それがいい機能を持っているか、多くのメンテナーがいて成熟したバージョンを頻繁にリリースしているライブラリかを確認しましょう。: e.g., `npm view async`. [もっと読む...](https://docs.npmjs.com/cli/view)\n\n  _Why:_\n\n  > もしメンテナーが修正をマージしなかったりパッチを素早く当てないと、コントリビュータが効率的な開発を行えなくなるでしょう。\n\n- それほど知られてないライブラリが必要な場合には、使用する前にチームメンバーと議論しましょう。\n- ライブラリはビルドを破壊しない限りは常に最新で動くかを確かめましょう: `npm outdated` [もっと読む...](https://docs.npmjs.com/cli/outdated)\n\n  _Why:_\n\n  > 依存パッケージの更新はたまに破壊的変更が含まれていることがあります。アップデートが出たときには常にリリースノートを確認しましょう。何かあったときにトラブルシューティングを簡単にするために、依存ライブラリを一つ一つ更新しましょう。[npm-check-updates](https://github.com/tjunnone/npm-check-updates)のように素晴らしいツールを使いましょう。\n\n- 依存パッケージに公開されている脆弱性が含まれている場合があるのでチェックしましょう。 e.g.,[Snyk](https://snyk.io/test?utm_source=risingstack_blog)\n\n<a name=\"testing\"></a>\n\n## 5. テスト\n\n![テスト](/images/testing.png)\n\n- 必要であれば`test`の環境を用意しましょう。\n\n  _Why:_\n\n  > 通常は end to end のテストを`production`に行うだけで十分なですが、例外がいくつかあります。統計データを`production`環境で有効にしたくなく、テストデータでダッシュボードを汚したくない場合です。あとは`production`の API に制限があって、テストをする際のリクエスト数が制限に達してブロックされてしまう場合です。\n\n- 単体テストコードはテストされるファイルの隣におきましょう。 `moduleName.spec.js`のように`*.test.js` や `*.spec.js` のようなファイル名が慣例となっています。\n\n  _Why:_\n\n  > ユニットテストを探すためにフォルダ構造を掘り進めたくないでしょう。[もっと読む...](https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc)\n\n- 追加のテストファイルがどこにあるか混乱を避けるために隔離されたフォルダに入れましょう\n\n  _Why:_\n\n  > いくつかのテストコードは実装コードと関連してないことがあります。他の開発者が見つけやすいフォルダ(`__test__`フォルダのような)にテストコードをおきましょう。`__test__`フォルダはスタンダートであり、様々な JavaScript フレームワークのテストで使用されています。\n\n- テストの書きやすいコードを書きましょう。副作用を避けましょう。副作用を抽出しましょう。純粋な関数を書きましょう。\n\n  _Why:_\n\n  > 結合を分けてロジックのテストをしたい場合。ランダムで非決定性のプロセスがコードの信頼性に与える影響を最小にする必要があります。[もっと読む...](https://medium.com/javascript-scene/tdd-the-rite-way-53c9b46f45e3)\n\n  > 純粋関数は同じ入力に対して常に同じ結果を出力します。逆に言えば純粋でない関数は副作用をもっているか結果を出力する際に外部の状況に左右されます。そのような関数は予想通りの結果が返ってきにくくなります。[もっと読む...](https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc)\n\n- 静的解析ツールを使いましょう。\n\n  _Why:_\n\n  > 静的解析ツールが必要な場面があるかもしれません。コードが信頼できる基準をもたらしてくれます。\n\n- `develop`ブランチにするリクエストを投げる前にローカルでテストを実行しましょう。\n\n  _Why:_\n\n  > 誰しもプロダクション準備中のビルドを失敗される犯人になりたくたいでしょう。`rebase`した後、リモートの feature ブランチにリポジトリに Push する前にテストを実行するようにしましょう。\n\n- テストの実行方法などの情報を含めて、ドキュメントとして`README.md`ファイルに記述しましょう。\n\n  _Why:_\n\n  > ドキュメントを残すことで他の開発者、DevOps の担当者もしくは QA にプロジェクトを引き継いだ時に、彼らがあなたのコードで仕事をしやすくなります。\n\n<a name=\"structure-and-naming\"></a>\n\n## 6. プロジェクトの構造と名前付け\n\n![Structure and Naming](/images/folder-tree.png)\n\n- ファイルを役割ではなく商品、ページ、コンポーネントのように集約しましょう。テストファイルも実装の隣に配置しましょう。\n\n  **Bad**\n\n  ```\n  .\n  ├── controllers\n  |   ├── product.js\n  |   └── user.js\n  ├── models\n  |   ├── product.js\n  |   └── user.js\n  ```\n\n  **Good**\n\n  ```\n  .\n  ├── product\n  |   ├── index.js\n  |   ├── product.js\n  |   └── product.test.js\n  ├── user\n  |   ├── index.js\n  |   ├── user.js\n  |   └── user.test.js\n  ```\n\n  _Why:_\n\n  > 長いファイルのリストの代わりに、テストコードを含めたカプセル化された単一責任の小さいモジュールが出来上がります。そうすることでコードのガイドがしやすくなり、一目で見つけることができるようになります。\n\n- 追加のテストファイルは混乱を避けるために test フォルダに置きましょう。\n\n  _Why:_\n\n  > 他の開発者やチームの DevOps の担当者の時間を節約することにつながります。\n\n- `./config`フォルダを作成しましょう。違う環境のための違う config ファイルを作らないようにしましょう。\n\n  _Why:_\n\n  > 異なる目的(例えばデータベースや API 等々)のために複数の config ファイルに分割する時は、同じフォルダに`config`のようなわかりやすい名前でまとめておきましょう。ただし、異なる環境ごとに異なる config ファイルを作成しないように気をつけてください。新たなデプロイ先が増えた時に新たな環境の名前が必要となり、綺麗にスケールすることができないからです。\n  > config ファイル内の変数は環境変数から与えるのが良い方法です。[もっと読む...](https://medium.com/@fedorHK/no-config-b3f1171eecd5)\n\n- スクリプトは`./scripts`フォルダに置きましょう。ここには node や bash のスクリプトが含まれます。\n\n  _Why:_\n\n  > プロダクション、デベロップのビルド、データベースの構築と同期等々を行う際に少なくとも一つ以上のスクリプトがプロジェクトで必要とされる可能性が高いでしょう。\n\n- ビルドの成果物は`./build`に出力するようにしましょう。`build/`を`.gitignore`に加えましょう。\n\n  _Why:_\n     > 名前はなんでもよくて、dist という名前でもかっこいいです。なんでもいいとはいえ、チームのメンバーが矛盾なく理解できる名前でなければなりません。例えば何がそのフォルダで取得できるのか、作成されたものなのかバンドルされたものなのか、コンパイルされたものなのか、もしくはただ移動されてきたものなのか。なにを出力するのか、チームメートがそこになにを出力できるのかもそうです。だからそのフォルダは特殊な事情がない限りですがリモートリポジトリにコミットする必要がありません。\n\n- `PascalCase`と`camelCase`をファイルとディレクトリの名前に使用しましょう。`PascalCase`はコンポーネントのみに使用しましょう。\n\n- `CheckBox/index.js`は`CheckBox`のコンポーネントを持っているべきです。`CheckBox.js`もそうでしょう。しかし`CheckBox/CheckBox.js`や`checkbox/CheckBox.js`のような名前は冗長なので避けるべきです。\n\n- 理想的にはフォルダの名前は`index.js`のデフォルト export の名前と一致させるべきです。\n\n  _Why:_\n\n  > そうすることで親フォルダをシンプルに import するだけでモジュールやコンポーネントを想像できます。\n\n<a name=\"code-style\"></a>\n\n## 7. コードスタイル\n\n![Code style](/images/code-style.png)\n\n<a name=\"code-style-check\"></a>\n\n### 7.1 コードスタイルガイドライン\n\n- 新しいプロジェクトでは stage-2 かそれよりバージョンの新しいモダンな JavaScript を使用するようにしましょう。古いプロジェクトについては、モダンな JavaScript が動くプロジェクトにさせたい場合は別として既存のバージョンと互換性のあるバージョンにとどめておきましょう。\n\n  _Why:_\n\n  > チーム次第ではありますが、私たちはトランスパイラを使用することで、新しいシンタックスの利点を活用しています。stage-2 は残りわずかな改訂で仕様の一部になる可能性が徐々に高くなっています。\n\n- コードスタイルチェックをビルドプロセスに含めましょう。\n\n  _Why:_\n\n  > ビルドを壊すことはコードスタイルを矯正する一つの方法になります。あなたがだんだんコードスタイルを真剣に捉えなくなるということを防いでくれます。クライアントとサーバーサイドのコード両方に導入しましょう。[もっと読む...](https://www.robinwieruch.de/react-eslint-webpack-babel/)\n\n- コードスタイルを強制するために[ESLint - Pluggable JavaScript linter](http://eslint.org/)を使いましょう。\n\n  _Why:_\n\n  > 私たちはシンプルな `eslint` が好きなだけなので、あなたがそうである必要はないです。`eslint` 自体たくさんのルールをサポートしています。ルールを設定でき、カスタムルールを追加することができます。\n\n- 私たちは[Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript)を JavaScript に使っています。[もっと読む...](https://www.gitbook.com/book/duk/airbnb-javascript-guidelines/details)。あなたのチームに求められた JavaScript のスタイルガイドを使用しましょう。\n\n- 私たちは[FlowType](https://flow.org/)を使用する時には[Flow type style check rules for ESLint](https://github.com/gajus/eslint-plugin-flowtype)を使っています。\n\n  _Why:_\n\n  > Flow には、特定のコードスタイルに従ってチェックする必要がある構文がほとんどありません\n\n- 特定のフォルダやファイルをコードスタイルチェックから除外するために`.eslintignore`を使いましょう。\n\n  _Why:_\n\n  > 複数のファイルをスタイルチェックから除外する時に、`eslint-disable`のコメントでコードを汚す必要がありません。\n\n- プルリクエストを作成する前には`eslint`のコメントアウトを削除しましょう。\n\n  _Why:_\n\n  > ロジックの実装に注力している時はスタイルチェックを無効にするのは一般的ですが、`eslint-disable` のコメントを削除してルールに従うことを忘れないようにしましょう。\n\n- タスクのサイズによって、`//TODO:` コメント使うか、チケットを起票するかを選択しましょう。\n\n  _Why:_\n\n  > チームメートには小さなタスクの事(関数のリファクタリング、コメントのアップデートなど)を定義しておきましょう。大きめのタスクにはリントルール通りに`//TODO(#3456)`と書き、チケットの番号を記載しましょう。\n\n- コメントは常にコードの変更に関連させるようにしましょう。コメントアウトされたコードは取り除きましょう。\n\n  _Why:_\n\n  > コードは可能な限り読みやすくする必要があると同時に、余分な部分は除去しておくべきです。リファクタリングする時は既存コードをコメントアウトするのではなく、削除しましょう。\n\n- 無関係であったりおかしなコードやログや名前付けは避けましょう。\n\n  _Why:_\n\n  > ビルドプロセスでそれらを除去できるかも(すべき)です。あなたのコードは別会社や別クライアントの渡される可能性がありますし、あなたのコードがどこかの誰かに見られて笑われないようにしましょう。\n\n- 短い名前を避けて、意味として区別しやすい検索しやすい名前をつけましょう。関数には長くて記述的な名前を使いましょう。関数の名前は動詞もしくは動詞のフレーズにしましょう。その関数の意図を伝える必要があります。\n\n  _Why:_\n\n  > ソースコードをより自然により読みやすくさせるためです。\n\n- ファイル内の関数を降順によってまとめておきましょう。高いレベルの関数は上部へ、低いレベルの関数は下部へ位置させましょう。\n\n  _Why:_\n\n  > 読むのに適したソースコードになるようにするためです。\n\n<a name=\"enforcing-code-style-standards\"></a>\n\n### 7.2 標準的なコードスタイルの強制\n\n- .editorconfig ファイルを使って開発者が異なるエディタや IDE のプロジェクト間で一貫したコーディングスタイルを定義し維持することができるようにしましょう。\n\n  _Why:_\n\n  > EditorConfig プロジェクトはコーディングスタイル定義とエディタがファイルフォーマット読み込んでスタイル定義を有効にするエディタプラグインからなります。EditorConfig ファイルは可読性が高くバージョンコントロールシステムともうまく機能します。\n\n- コードスタイルのエラーを伝えてくれるエディタを使いましょう。既存の ESLint の設定と一緒に[eslint-plugin-prettier](https://github.com/prettier/eslint-plugin-prettier)と[eslint-config-prettier](https://github.com/prettier/eslint-config-prettier)を使いましょう。[もっと読む...](https://github.com/prettier/eslint-config-prettier#installation)\n\n- Git hook の使用を考えましょう。\n\n  _Why:_\n\n  > Git hook は開発者の生産性を大きく高めてくれます。ビルドの破壊を怖がることなく、ステージングやプロダクション環境に変更を作成、コミット、Push できます。[もっと読む...](http://githooks.com/)\n\n- Prettier を`precommit hook`とともに使いましょう。\n\n  _Why:_\n\n  > `prettier`自体はとても力強いものではありますが、毎回のコードフォーマットに対して個別の npm task としてシンプルに実行することはあまり生産的ではありません。ここでは`lint-staged`(と`husky`)が活躍します。`lint-staged` [here](https://github.com/okonet/lint-staged#configuration)の`husky` [here](https://github.com/typicode/husky)の設定をよく読みましょう。\n\n<a name=\"logging\"></a>\n\n## 8. ログ\n\n![Logging](/images/logging.png)\n\n- クライアントサイドの console ログをプロダクション環境で出力するのは避けましょう。\n\n  _Why:_\n\n  > ビルドプロセスを通して Console ログを取り除くことができます(すべきです)が、コードスタイルチェックが吐き出す console log についての warning の情報を確認しましょう。\n\n- プロダクションのログは読みやすいように出力しましょう。理想的にはプロダクションモードで使われているロギングライブラリを使いましょう([winston](https://github.com/winstonjs/winston) もしくは\n  [node-bunyan](https://github.com/trentm/node-bunyan)のようなものがあります。)\n\n      _Why:_\n      > ログのカラー化やタイムスタンプ、ログファイルの出力や日々のログファイルのローテートが、トラブルシューティングの不快感を少なくしてくれます。\n\n<a name=\"api\"></a>\n\n## 9. API\n\n<a name=\"api-design\"></a>\n\n![API](/images/api.png)\n\n### 9.1 API デザイン\n\n_Why:_\n\n> 私たちは明快に構築された RESTful のインターフェースでの開発を強制することで、チームメンバーやクライアントがシンプルに矛盾なくそれを使えることができます。\n\n_Why:_\n\n> 一貫性やシンプルさがない API はシステムの結合やメンテナンスのコストを増加させます。だから`API design`をこのドキュメントに含めて説明しています。\n\n- 私たちは多くの場面でリソース志向アーキテクチャに従っています。リソース志向アーキテクチャとは主にリソース、集合、URL の要素で構成されます。\n\n  - リソースはデータを持っていて、ネストを取得でき、それらのリソースを操作できるメソッドがあります。\n  - リソースの集合はコレクションと呼ばれます。\n  - URL はオンラインのリソースの場所はリソースかコレクションで表します。\n\n  _Why:_\n\n  > 上記のことは開発者(あなたの API を使う人たち)に周知されていることです。可読性や使いやすさを別としても、REST API ではその API の詳細を知らずとも汎用なライブラリやコネクタを書くができます。\n\n- URL には kebab-case を使いましょう。\n- リクエスト内のパラメータやリソース内のパラメータには camelCase を使いましょう。\n- URL 内のリソース名は複数形の kebab-case にしましょう\n\n- コレクションを表す url には常に複数形の名詞を使いましょう。`/users`\n\n  _Why:_\n\n  > 基本的にはそうすることで読みやすさの向上 URL の一貫性を維持することになるでしょう。[もっと読む...](https://apigee.com/about/blog/technology/restful-api-design-plural-nouns-and-concrete-names)\n\n- ソースコード内での変数やプロパティ名の複数形はリストのサフィックスにしましょう。\n\n  _Why:_\n\n  > 複数形は URL においては良いものですが、ソースコード内では分かりにくくエラーの原因になり得ます。\n\n- コレクションで始まり識別子に終わる単一のパスを常に使用しましょう。\n\n  ```\n  /students/245743\n  /airports/kjfk\n  ```\n\n- 以下のような URL は避けましょう。\n\n  ```\n  GET /blogs/:blogId/posts/:postId/summary\n  ```\n\n  _Why:_\n\n  > この URL はリソースではなく、プロパティをさしています。プロパティはレスポンスを整えるようにパラメータに渡しましょう。\n\n- リソースを示す URL からは動詞を含めないようにしましょう。\n\n  _Why:_\n\n  > 各リソースの操作に動詞を含めると、各々のリソースの操作について大量の URL が出来てしまい、開発者にとって理解するのが難しい一貫性のないパターンになってしまうからです。私たちは他の箇所に動詞を使っています。\n\n- リソースではない部分に動詞を使用しましょう。このケースではこの API はリソースを返さずに、操作を実行して結果を受け取るのみです。CRUD(Create Retrieve Update Delete)の操作ではないことに注意しましょう。\n\n  ```\n  /translate?text=Hallo\n  ```\n\n  _Why:_\n\n  > CRUD についてはリソースやコレクションの URL に対して HTTP メソッドを使用するからです。説明している動詞はおおよそ`Controller`となります。通常これらの URL をたくさん作成することはないでしょう。[もっと読む...](https://byrondover.github.io/post/restful-api-guidelines/#controller)\n\n- リクエストボディやレスポンスタイプは`JSON`にしましょう。そして一貫性あるメンテナンスをしやすくするために、プロパティ名は`camelCase`を使用するようにしましょう。\n\n  _Why:_\n\n  > このドキュメントは JavaScript プロジェクトのガイドラインであるため、JSON の読み書きには JavaScript が使用されてることを想定しています。\n\n- リソースオブジェクトインスタンスや DB のレコードと同じような単一なものであったとしても、`table_name`や`column_name`はリソース名やプロパティ名にしないようにしましょう。\n\n  _Why:_\n\n  > あくまでリソースを公開するのであって DB のスキーマの詳細を公開するためのものではないからです。\n\n- 念のためにもう一度、URL には名詞のみを使い、機能を説明するような名前付けは避けましょう。\n\n  _Why:_\n\n  > 名詞のみをリソースの URL には使用しましょう。`/addNewUser`や`/updateUse`のようなエンドポイントを用意するのはやめましょう。同様にリソース操作をパラメータを送るのも避けましょう。\n\n- CRUD の機能的説明には HTTP のメソッドを使いましょう。\n\n  _How:_\n\n  > `GET`: 存在するリソースの取得。\n\n  > `POST`: 新しいリソースとサブリソースの作成。\n\n  > `PUT`: 既存のリソースの更新。\n\n  > `PATCH`: 既存のリソースの更新。提供されたフィールドのみを更新し、他のフィールドはそのままにしておきます。\n\n  > `DELETE`: 存在するリソースの削除。\n\n- ネストしているリソースのために関連する URL 間にリレーションを使用しましょう。例えば会社の従業員を関連されるために、id を使用します。\n\n  _Why:_\n\n  > 各リソースを探索しやすくするための自然なやり方です。\n\n  _How:_\n\n  > `GET      /schools/2/students    `。2 の学校のすべての生徒を取得できるはずです。\n\n  > `GET      /schools/2/students/31` 。2 の学校に所属する、31 の生徒の詳細を取得できるはずです。\n\n  > `DELETE   /schools/2/students/31` 。2 の学校に所属する 31 の生徒を削除できるはずです。\n\n  > `PUT      /schools/2/students/31` 。31 の生徒の情報を更新するはずです。また PUT はコレクションには使用せずにリソース URL のみに使用するようにしましょう。\n\n  > `POST     /schools`。新たな学校を作成して、その作成された学校の情報を返却するはずです。POST はコレクションの URL に使用しましょう。\n\n- バージョンには`v`をプレフィックスとした単純な整数を使用しましょう(v1,v2)。全ての URL を残したまま移動するために、バージョンは一番上のスコープに使用しましょう。\n\n  ```\n  http://api.domain.com/v1/schools/3/students\n  ```\n\n  _Why:_\n\n  > API がサードパーティのために公開される時には、API の破壊的変更を伴うバージョンアップは既存のプロダクトや API を使うサービスに多大な影響を与えます。バージョンを URL に含めることで、これらの問題が起きることを防いでくれます。[もっと読む...](https://apigee.com/about/blog/technology/restful-api-design-tips-versioning)\n\n- レスポンスメッセージは自己記述的でなければなりません。良いエラーレスポンスは以下のようなものになります。\n\n  ```json\n  {\n  \t\"code\": 1234,\n  \t\"message\": \"Something bad happened\",\n  \t\"description\": \"More details\"\n  }\n  ```\n\n  またバリデーションエラーならこうです。\n\n  ```json\n  {\n  \t\"code\": 2314,\n  \t\"message\": \"Validation Failed\",\n  \t\"errors\": [\n  \t\t{\n  \t\t\t\"code\": 1233,\n  \t\t\t\"field\": \"email\",\n  \t\t\t\"message\": \"Invalid email\"\n  \t\t},\n  \t\t{\n  \t\t\t\"code\": 1234,\n  \t\t\t\"field\": \"password\",\n  \t\t\t\"message\": \"No password provided\"\n  \t\t}\n  \t]\n  }\n  ```\n\n  _Why:_\n\n  > API を使用したアプリケーションがそのユーザーの手元に届けられたあと、問題解決やトラブルシューティングをする重要な時に、開発者は良いデザインのエラーメッセージに頼ることになります。\n\n  _Note: セキュリティの例外のメッセージは極力一般化しましょう。例えば\"パスワードが間違っています\"と言う代わりに、\"ユーザー名もしくはパスワードが間違っています\"と言いましょう。私たちの場合はユーザー名が正しくて、パスワードだけ間違っていると伝えることはしないようにしています。_\n\n- **全てがうまく動いていた**、**クライアントアプリがうまく動いてなかった** 、**API がうまく動いてなかった** 等\n  レスポンスの説明には 8 個のステータスのみを送るようにしましょう。\n\n      _一覧:_\n      > `200 OK` `GET`、`PUT` 、`POST`リクエストが成功したことを表します。\n\n      > `201 Created` 新しいインスタンスが作成された時に返却されます。新しいインスタンスの作成、`POST`メソッドの使用は`201`のステータスコードを返します。\n\n      > `304 Not Modified` ユーザーがすでにレスポンスのキャッシュを持っている場合に返却されます、最小の転送に抑えることになります。\n\n      > `400 Bad Request` リクエストが処理されなかった場合に返却されます。サーバーがクライアントの要求するリクエストを理解できなかったような時です。\n\n      > `401 Unauthorized` リクエストの認証情報が不足している時に返却されます。要求された認証情報で再リクエストを行うことになるでしょう。\n\n      > `403 Forbidden` サーバーはリクエストを解釈できていますが、認証を拒否したという意味です。\n\n      > `404 Not Found` リクエストしたリソースが見つからなかったことを示します。\n\n      > `500 Internal Server Error` リクエストは正しいが、サーバーが予期せぬ事態により動作しなかったことを示します。\n\n      _Why:_\n      > 多くのAPIの提供者は少数のHTTPのステータスコードを使用します。例えばGoogleのGdata APIは10個のステータスコードしか使っていません。Netflixは9つです。Diggは8つだけです。もちろんながらこれらのレスポンスは追加の情報をbodyに含めています。70を超えるHTTPのステータスが存在しますが。あまり一般的でないステータスコードを選択すると、アプリケーションの開発者は開発を離れて、ステータスコードが何を示しているのかを理解しようとwikipedia等で調べざるを得なくなります。[もっと読む...](https://apigee.com/about/blog/technology/restful-api-design-what-about-errors)\n\n- レスポンスにはリソースの数の合計を提供しましょう。\n- `limit`と`offset`のパラメータを受けつけましょう。\n\n- リソースの公開するデータ量はよく考える必要があります。API の利用者は常にリソースの全ての表現が必要というわけではありません。フィールドのカンマ区切りリストを含むフィールドクエリパラメータを使用します。\n  ```\n  GET /student?fields=id,name,age,class\n  ```\n- ページネーション、フィルタリング、ソートは初めから全てのリソースをサポートする必要はありません。フィルタリングやソートのあとにこれらのリソースを記述しましょう。\n\n<a name=\"api-security\"></a>\n\n### 9.2 API セキュリティ\n\nいくつかのセキュリティのベストプラクティスをご紹介します。\n\n- セキュアな通信(HTTPS)以外ではベーシック認証を使わないようにしましょう。認証トークンを URL に含めてはいけません。`GET /users/123?token=asdf....`\n\n  _Why:_\n\n  > トークンやユーザー ID やパスワードが平文としてネットワークを超えてくるので（base64 にエンコードされているでしょうが、base64 は可逆なエンコード方法です。）、ベーシック認証機構はセキュアではないです。[もっと読む...](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication)\n\n- トークンは毎回のリクエストの認証ヘッダーに乗せて送信されなければなりません。`Authorization: Bearer xxxxxx, Extra yyyyy`\n\n- 認証コードの生存期間は短く設定されるべきです。\n\n- 安全ではないデータの受け渡しを避けるために HTTP リクエストに応答しないことで TLS ではないリクエストを拒否するようにしましょう。その際には`403 Forbidden`で応答しましょう。\n\n- リクエスト制限を使うことを考えましょう。\n\n  _Why:_\n\n  > 一時間あたり何千ものリクエストを送りつけてくるボットから身を守るために、リクエスト制限を早いうちから考えておくべきでしょう。\n\n- HTTP ヘッダを適切に設定することは Web アプリケーションをより強固に、より安全にするのに役立ちます。[もっと読む...](https://github.com/helmetjs/helmet)\n\n- API は標準的なフォームのデータを受け取ってデータを加工しましょう。できなければリクエストを拒否するようにしましょう。400 Bad Request とともにデータの不足やエラーについての詳細を返却しましょう。\n\n- REST な API で交換される全てのデータは API 上で Validate するようにしましょう。\n\n- JSON をシリアライズしましょう。\n\n  _Why:_\n\n  > JSON エンコーダの悩みの種は、ブラウザ内でリモートからの任意の JavaScript の実行を防ぐことです。もしくは node.js を使用しているのであれば、サーバーサイドも同様です。ユーザーから与えられた入力がブラウザ内で実行されないように、ユーザーからの情報をエンコードできる適切な JSON シリアライザーを使用することが重要です。\n\n- Content-Type を Validate するようにしましょう。多くの場合で `application/*json` (Content-Type ヘッダ)を使いましょう。\n\n  _Why:_\n\n  > 例えば、`application/x-www-form-urlencoded`の mime-type を受け入れることは、攻撃者にフォームを作成させ、シンプルな POST リクエストを誘引させることを許すことになります。サーバは受け入れる Content-Type を決して推定させないべきです。Content-Type ヘッダもしくは予期しない Content-Type ヘッダに対しては`4XX`のレスポンスでリクエストを拒否する結果を返却しましょう。\n\n- API のセキュリティをチェックリストを見て確認しましょう。[もっと読む...](https://github.com/shieldfy/API-Security-Checklist)\n\n<a name=\"api-documentation\"></a>\n\n### 9.3 API ドキュメント\n\n- [README.md template](./README.sample.md)の`API Reference`のセクションを埋めましょう。\n- コードのサンプルとともに API の認証方法について記述しましょう。\n- URL の構造(path についてのみでいいです。root の URL については必要ありません。)をリクエストのメソッドとともに説明しましょう。\n\n各エンドポイントについて\n\n- URL パラメータはもし存在する場合は、URL セクションに記載されている名前に従って指定しましょう。\n\n  ```\n  Required: id=[integer]\n  Optional: photo_id=[alphanumeric]\n  ```\n\n- リクエストタイプが POST なら、ちゃんと動く例も用意しましょう。URL パラメータのルールはここにも適用します。Optional と Required に分けましょう。\n\n- レスポンスの成功の場合ステータスコードは何でしょうか？どんなデータを返されるでしょうか？ドキュメントは API の返答を開発者が知りたいときに役立ちます。\n\n  ```\n  Code: 200\n  Content: { id : 12 }\n  ```\n\n- レスポンスの失敗の時は、ほとんどのエンドポイントの失敗は複数通りあります。認証されていないアクセスからの不正な値等。それら全てをここでは列挙しましょう。繰り返しになりますが、こうすることで憶測のみで開発せざるを得ない状況を防ぎます。例\n\n  ```json\n  {\n  \t\"code\": 403,\n  \t\"message\": \"Authentication failed\",\n  \t\"description\": \"Invalid username or password\"\n  }\n  ```\n\n- API デザインツールを使用しましょう。[API Blueprint](https://apiblueprint.org/)、[Swagger](https://swagger.io/)のようなオープンソースの良いドキュメンテーションツールがたくさんあります。\n\n<a name=\"licensing\"></a>\n\n## 10. ライセンス\n\n![Licensing](/images/licensing.png)\n\n使用できる権利のあるリソースを使用していることを確認してください。ライブラリを使っているのであれば、MIT、Apache、BSD のライセンスを見つけることを心がけましょう。ライブラリを修正したいのであれば、ライセンスの詳細を少し見て見ましょう。著作権で保護されている画像や動画が法的問題を引き起こすかもしれません。\n\n---\n\nSources:\n[RisingStack Engineering](https://blog.risingstack.com/),\n[Mozilla Developer Network](https://developer.mozilla.org/),\n[Heroku Dev Center](https://devcenter.heroku.com),\n[Airbnb/javascript](https://github.com/airbnb/javascript),\n[Atlassian Git tutorials](https://www.atlassian.com/git/tutorials),\n[Apigee](https://apigee.com/about/blog),\n[Wishtack](https://blog.wishtack.com)\n\nIcons by [icons8](https://icons8.com/)\n"
        },
        {
          "name": "README-ko.md",
          "type": "blob",
          "size": 47.4638671875,
          "content": "[ENGLISH](./README.md)\n| [中文版](./README-zh.md)\n| [日本語版](./README-ja.md)\n| [РУССКИЙ](./README-ru.md)\n| [Português](./README-pt-BR.md)\n| [Persian/فارسی](./README-ir.md)\n\n[<img src=\"./images/elsewhen-logo.png\" width=\"180\" height=\"180\">](https://www.elsewhen.com/)\n\n# Project Guidelines &middot; [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n\n> 새로운 프로젝트를 개발하는 할 때는 초원에서 뛰어노는 것 같지만, 유지보수는 모두에게 잠재적인 악몽입니다.\n> 이것은 우리가 발견하고, 작성하고 수집한 가이드라인의 목록입니다. 이 가이드라인은 대부분의 [elsewhen](https://www.elsewhen.com)에서의 JavaScript 프로젝트에 잘 맞습니다.\n> 만약 모범 사례를 공유하고 싶으시거나 여기에 있는 가이드라인 중 어떤 것이 지워져야 한다고 생각하신다면, [부담없이 우리에게 공유해주세요](http://makeapullrequest.com).\n\n- [Git](#git)\n  - [Git 규칙](#some-git-rules)\n  - [Git 워크플로우](#git-workflow)\n  - [좋은 커밋 메시지 작성하기](#writing-good-commit-messages)\n- [문서화](#documentation)\n- [환경](#environments)\n  - [일관적인 개발환경](#consistent-dev-environments)\n  - [일관적인 의존성](#consistent-dependencies)\n- [의존성](#dependencies)\n- [테스트](#testing)\n- [구조 및 네이밍](#structure-and-naming)\n- [코드 스타일](#code-style)\n  - [코드 스타일 가이드라인](#code-style-check)\n  - [표준 코드 스타일 강제하기](#enforcing-code-style-standards)\n- [로깅](#logging)\n- [API](#api)\n  - [API 설계](#api-design)\n  - [API 보안](#api-security)\n  - [API 문서화](#api-documentation)\n- [라이센스](#licensing)\n\n<a name=\"git\"></a>\n\n## 1. Git\n\n![Git](/images/branching.png)\n<a name=\"some-git-rules\"></a>\n\n### 1.1 Git 규칙\n\nGit에는 명심해야할 규칙들이 있습니다.\n\n- feature 브랜치(branch)에서 작업하세요.\n\n  _이유:_\n\n  > 이 방법을 사용하면 모든 작업은 메인 브랜치 대신에 격리된 별도의 브랜치에서 하게 됩니다. 이렇게 하면 혼란 없이 여러개의 풀 리퀘스트(Pull Request)를 제출할 수 있습니다. 또한 잠재적으로 불안정한, 완료되지 않은 코드로 마스터 브랜치를 오염시키지 않고, 작업을 반복할 수 있습니다. [더 알아보기](https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow)\n\n- `develop`에서 브랜치를 만드세요.\n\n  _이유:_\n\n  > 이 방법을 사용하면, 마스터 브랜치의 코드를 항상 거의 문제없이 빌드할 수 있고, 릴리즈를 위해서 직접 사용할 수도 있습니다 (일부 프로젝트의 경우 과할 수도 있음).\n\n- `develop`과 `master`에 직접 푸시하지 않고, 풀 리퀘스트를 만드세요.\n\n  _이유:_\n\n  > 풀 리퀘스트는 기능 구현을 완료한 것을 다른 팀 멤버들에게 알립니다. 또한 쉬운 코드 리뷰를 가능케 하며, 제안된 기능에 대해 토론할 수 있는 포럼을 제공합니다.\n\n- 개발한 기능을 푸시하고 풀 리퀘스트를 만들기 전에, 로컬 `develop` 브랜치를 업데이트하고 인터랙티브한 리베이스(rebase)를 진행하세요.\n\n  _이유:_\n\n  > 리베이스는 요청한 브랜치(`master` 혹은 `develop`)을 병합(merge)합니다. 또한 병합 커밋을 만들지 않으면서 로컬에서 만든 커밋들을 적용합니다 (충돌이 없다고 가정한다면). 결국 깨끗한 히스토리를 남기게 됩니다. [더 알아보기](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)\n\n- 풀 리퀘스트를 만들기 전에 리베이스하는 동안 잠재적인 충돌을 제거하세요.\n- 병합 후, 로컬과 원격에 있는 feature 브랜치를 삭제하세요.\n\n  _이유:_\n\n  > 이 방법은 더 이상 사용하지 않는 브랜치들로부터 브랜치 리스트를 정리할 것입니다. 또한, 브랜치가 `master` 또는 `develop`으로 병합되는 것을 단 한 번으로 보장합니다. feature 브랜치는 작업이 진행되고 있는 도중에만 존재해야 합니다.\n\n- 풀 리퀘스트를 생성하기 전에, feature 브랜치는 잘 빌드되는지, 코드 스타일 체크를 포함한 모든 테스트를 통과하는 지 검증하세요.\n\n  _이유:_\n\n  > 안정적인 브랜치에 코드를 새로 푸시하려 할 때, 만약 feature 브랜치의 테스트가 실패한다면, 목표한 브랜치의 빌드도 실패할 가능성이 높습니다. 또한 풀 리퀘스트를 만들기 전에 코드 스타일 검사를 적용해야합니다. 이렇게 하면 가독성을 높이고, 코드에 실제 변경사항을 작성할 때 포맷을 수정하는 변경사항이 섞일 가능성을 낮춥니다.\n\n- 이 [.gitignore file](./.gitignore)을 사용하세요.\n\n  _이유:_\n\n  > 이 파일에는 이미 원격 저장소에 코드와 함께 보내면 안되는 시스템 파일 목록이 있습니다. 또한 이 파일은 가장 많이 사용되는 에디터와 대부분의 공통 의존성 폴더에 대한 폴더 및 파일 설정을 포함하고 있습니다.\n\n- `develop`과 `master` 브랜치를 보호하세요.\n\n  _이유:_\n\n  > 이 방법은 예측하지 못한, 돌이킬 수 없는 변경으로부터 production-ready 브랜치들을 보호합니다. 더 알아보기: [Github](https://help.github.com/articles/about-protected-branches/), [Bitbucket](https://confluence.atlassian.com/bitbucketserver/using-branch-permissions-776639807.html)\n\n<a name=\"git-workflow\"></a>\n\n### 1.2 Git 워크플로우\n\n상기한 이유들 때문에, 우리는 [인터랙티브 리베이스](https://www.atlassian.com/git/tutorials/merging-vs-rebasing#the-golden-rule-of-rebasing), 그리고 [Gitflow](https://www.atlassian.com/git/tutorials/comparing-workflows#gitflow-workflow)의 몇가지 요소(브랜치 네이밍과 develop 브랜치의 보유)와 함께 [Feature 브랜치 워크플로우](https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow)를 사용해야 합니다. 주요 단계는 다음과 같습니다.\n\n- 새로운 프로젝트의 경우, 프로젝트 디렉토리에 Git 레포지토리를 초기화하세요. **유지보수 작업의 경우 이 단계는 무시하세요**.\n\n  ```sh\n  cd <project directory>\n  git init\n  ```\n\n- 새로운 feature/bug-fix 브랜치를 체크아웃하세요.\n  ```sh\n  git checkout -b <branchname>\n  ```\n- 변경사항을 작성하세요.\n\n  ```sh\n  git add\n  git commit -a\n  ```\n\n  _이유:_\n\n  > `git commit -a`는 제목과 본문을 분리시킨 상태로 에디터를 엽니다. *섹션 1.3*에서 자세히 알아보세요.\n\n- 놓친 변경사항을 받기 위해 원격 저장소와 동기화하세요.\n\n  ```sh\n  git checkout develop\n  git pull\n  ```\n\n  _이유:_\n\n  > 이렇게 하면 충돌(conflict)을 포함하는 풀 리퀘스트를 만드는 대신에, 당신의 컴퓨터에서 리베이스함으로써 충돌을 처리할 수 있습니다.\n\n- 인터랙티브한 리베이스를 통해 develop 브랜치의 마지막 변경사항을 feature 브랜치로 업데이트 하세요.\n\n  ```sh\n  git checkout <branchname>\n  git rebase -i --autosquash develop\n  ```\n\n  _이유:_\n\n  > --autosquash를 사용해서 모든 커밋을 하나의 커밋으로 밀어 넣을 수도 있습니다. develop 브랜치에서 하나의 기능을 위한 많은 커밋들은 아무도 원하지 않기 때문이죠. [더 알아보기](https://robots.thoughtbot.com/autosquashing-git-commits)\n\n- 만약 충돌이 발생하지 않았다면 이 단계를 건너뛰어도 좋습니다. 충돌이 발생했다면, [그것을 해결(resolve)하고](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/) 리베이스를 계속하세요.\n  ```sh\n  git add <file1> <file2> ...\n  git rebase --continue\n  ```\n- 브랜치를 푸시하세요. 리베이스는 이력을 변경시킵니다. 따라서 당신은 `-f`를 사용해서 원격 브랜치로 강제 변경해야합니다. 만약 다른 누군가가 당신의 브랜치에서 작업하고 있다면, 조금 덜 파괴적인 `--force-with-lease`를 사용하세요.\n\n  ```sh\n  git push -f\n  ```\n\n  _이유:_\n\n  > 리베이스 할 때, 당신은 feature 브랜치의 이력을 변경하고 있는 겁니다. 그 결과, Git은 일반적인 `git push`를 거부합니다. 대신, 당신은 -f 혹은 --force 플래그를 사용할 필요가 있습니다. [더 알아보기](https://developer.atlassian.com/blog/2015/04/force-with-lease/)\n\n- 풀 리퀘스트를 만드세요.\n- 풀 리퀘스트는 리뷰어에 의해 수용되고, 병합되고 종료될 것 입니다.\n- 모든 작업이 끝났다면 당신의 로컬 feature 브랜치는 지우세요.\n\n  ```sh\n  git branch -d <branchname>\n  ```\n\n  원격 저장소에 존재하지 않는 모든 브랜치를 제거하기 위해서는 다음과 같이 하면 됩니다.\n\n  ```sh\n  git fetch -p && for branch in `git branch -vv | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done\n  ```\n\n<a name=\"writing-good-commit-messages\"></a>\n\n### 1.3 좋은 커밋 메시지 작성하기\n\n커밋을 작성하는 좋은 가이드라인을 가지고 있으면 Git으로 작업하거나 다른 사람들과 협업하는 것이 상당히 쉬워집니다. 다음은 그 규칙들입니다. ([출처](https://chris.beams.io/posts/git-commit/#seven-rules))\n\n- 줄 바꿈을 통해서 제목과 본문을 구분하세요.\n\n  _이유:_\n\n  > Git은 당신의 커밋 메시지의 첫번째 줄을 요약으로 분간할만큼 똑똑합니다. 사실, git log 대신에 git shortlog를 사용하면 커밋 ID와 요약정보만이 표시된 커밋 메시지의 긴 리스트를 볼 수 있습니다.\n\n- 제목을 50자로, 본문은 72자로 제한하세요.\n\n  _이유:_\n\n  > 커밋은 가능한 보기 좋고 집중되어야하며, 장황하게 설명해서는 안됩니다. [더 알아보기](https://medium.com/@preslavrachev/what-s-with-the-50-72-rule-8a906f61f09c)\n\n- 제목에 대문자를 사용하세요.\n- 제목을 마침표로 끝내지마세요.\n- 제목에 [명령법(imperative mood)](https://en.wikipedia.org/wiki/Imperative_mood)을 사용하세요.\n\n  _이유:_\n\n  > 커미터가 완료한 일을 표현하는 메시지를 작성하는 것이 아닙니다. 이런 메시지들은 커밋이 레포지토리에 적용된 뒤에 어떻게 되는지를 설명하는 것으로 간주하는 것이 낫습니다. [더 읽기](https://news.ycombinator.com/item?id=2079612)\n\n- 본문은 **어떻게** 대신 **무엇을**과 **왜**를 설명하는데 사용하세요.\n\n<a name=\"documentation\"></a>\n\n## 2. 문서화\n\n![문서화](/images/documentation.png)\n\n- `README.md`를 위해서 이 [템플릿](./README.sample.md)을 사용하세요. 필요한 섹션은 자유롭게 추가하세요.\n- 한 개 이상의 레포지토리가 있는 프로젝트는 각각의 `README.md` 파일에 링크를 추가해주세요.\n- 프로젝트가 발전함에 따라 `README.md`를 최신으로 유지하세요.\n- 코드에 주석을 달아주세요. 가능하다면, 각 섹션에서 무엇을 표현하려고 하는지 명확하게 만드세요.\n- GitHub 혹은 StackOverflow에 당신이 사용한 접근법이나 코드에 대한 토론이 있다면, 주석에 그 링크를 첨부하세요.\n- 주석을 나쁜 코드에 대한 변명으로 사용하지 마세요. 코드를 깔끔하게 유지하세요.\n- 클린 코드는 주석을 전혀 달지 않는 것에 대한 변명이 아닙니다.\n- 코드가 발전함에 따라 주석도 적절하게 바꿔주세요.\n\n<a name=\"environments\"></a>\n\n## 3. 환경\n\n![환경](/images/laptop.png)\n\n- 필요하다면 `development`, `test`와 `production` 환경을 분리하세요.\n\n  _이유:_\n\n  > 다른 데이터, 토큰, API, 포트 등... 아마도 별도의 환경을 필요로 할 것입니다. 아마도 당신은 격리된 `development` 모드에서는 가짜 API를 호출하고 예상가능한 데이터를 리턴해서 수동/자동 테스트를 보다 쉽게 할 수 있게 하는 것을 원할 겁니다. 혹은 Google Analytics를 `production` 모드에서만 사용하고 싶을 수도 있습니다. [더 읽기](https://stackoverflow.com/questions/8332333/node-js-setting-up-environment-specific-configs-to-be-used-with-everyauth)\n\n- 배포에 관련된 설정 변수들은 환경 변수에서 불러오도록 하고 그 변수들을 코드 베이스에 상수로 포함하지 마세요. [이 샘플을 참고하세요](./config.sample.js).\n\n  _이유:_\n\n  > 당신은 토큰이나 비밀번호 혹은 그 외에 중요한 정보를 가지고 있을 겁니다. 언제든지 코드베이스를 공개할 수 있을 것처럼 설정 변수는 어플리케이션의 내부와 제대로 구분되어야 합니다.\n\n  _방법:_\n\n  > `.env` 파일을 당신의 변수들을 저장하는 용도로 사용하고, 그 파일을 `.gitignore`에 넣어 제외하세요. 대신에, 다른 개발자들에게 가이드를 제공하는 `.env.example` 이라는 파일을 커밋하세요. 프로덕션 환경에서는 표준적인 방법으로 환경 변수를 설정헤야 합니다. [더 읽기](https://medium.com/@rafaelvidaurre/managing-environment-variables-in-node-js-2cb45a55195f)\n\n- 어플리케이션이 실행되기 전에 환경 변수를 검증(validate)하는 것을 추천합니다. 값들을 검증하기 위해 `joi`를 사용하고 있는 [이 샘플을 참고하세요](./configWithTest.sample.js).\n\n  _이유:_\n\n  > 다른 이들을 트러블슈팅에서 구해낼 수 있습니다.\n\n<a name=\"consistent-dev-environments\"></a>\n\n### 3.1 일관적인 개발 환경\n\n- `package.json`의 `engines`에 Node.js 버전을 설정하세요.\n\n  _이유:_\n\n  > 다른 이들에게 프로젝트가 동작하는 Node.js 버전에 대해 알려줄 수 있습니다. [더 읽기](https://docs.npmjs.com/files/package.json#engines)\n\n- 추가로, `nvm`을 사용하고 `.nvmrc` 파일을 프로젝트의 루트 경로에 만드세요. 문서에 그것을 명시하는 것도 잊지마세요.\n\n  _이유:_\n\n  > `nvm`을 사용하는 사람이라면 `nvm use` 명령어를 사용해서 간단하게 적절한 Node.js 버전으로 전환할 수 있습니다. [더 읽기](https://github.com/creationix/nvm)\n\n- `preinstall`을 사용해서 Node.js와 npm 버전을 체크하는 것도 좋은 방법입니다.\n\n  _이유:_\n\n  > 어떤 의존(dependency)은 새로운 npm 버전으로 설치할 때 실패할 수도 있습니다.\n\n- 가능하다면 도커 이미지를 사용하세요.\n\n  _이유:_\n\n  > 도커는 전체적인 워크플로우에 걸쳐 일관적인 환경을 제공합니다. 사용하지 않으면 의존성 혹은 설정에 많은 작업이 필요할 수도 있습니다. [더 읽기](https://hackernoon.com/how-to-dockerize-a-node-js-application-4fbab45a0c19)\n\n- 글로벌로 모듈을 설치하지 말고 로컬 모듈을 사용하세요.\n\n  _이유:_\n\n  > 당신의 툴을 동료들이 글로벌로 설치하지 않고 당신이 사용하는 툴을 공유하도록 해줍니다.\n\n<a name=\"consistent-dependencies\"></a>\n\n### 3.2 일관적인 의존성\n\n- 다른 팀 멤버들이 당신과 정확히 같은 의존성을 갖도록 하세요.\n\n  _이유:_\n\n  > 왜냐면 당신은 어떤 개발 기기에서도 코드가 예상한대로 동일하게 동작하는 것을 원하니까요. [더 읽기](https://medium.com/@kentcdodds/why-semver-ranges-are-literally-the-worst-817cdcb09277)\n\n  _방법:_\n\n  > `npm@5` 이상의 버전에서 `package-lock.json`을 사용하세요.\n\n  _저는 npm@5 버전 미만이에요:_\n\n  > 대안으로 `Yarn`을 사용할 수 있습니다. `README.md`에 Yarn에 대해 확실히 명시하세요. 당신의 락(lock) 파일과 `package.json` 파일은 각 의존성 업데이트 후 동일한 버전을 가져야 합니다. [더 읽기](https://yarnpkg.com/en/)\n\n  _저는 `Yarn`이라는 이름이 싫은데요:_\n\n  > 유감입니다. 구 버전의 `npm`에서는 새로운 의존을 설치할 때 `-—save --save-exact`를 사용해서 올리기 전에 `npm-shrinkwrap.json`을 생성하세요. [더 읽기](https://docs.npmjs.com/files/package-locks)\n\n<a name=\"dependencies\"></a>\n\n## 4. 의존성\n\n![Github](/images/modules.png)\n\n- `npm ls --depth=0`를 사용해서 현재 사용 가능한 패키지를 추척하세요. [더 읽기](https://docs.npmjs.com/cli/ls)\n- `depcheck`를 사용해서 패키지 중에 사용되지 않거나 관련이 없는 패키지가 있는지 확인하세요. [더 읽기](https://www.npmjs.com/package/depcheck)\n\n  _이유:_\n\n  > 당신은 쓰이지 않고 있는 라이브러리를 당신의 코드에 포함할 수도 있고 그로인해 프로덕션의 번들 사이즈가 커집니다. 쓰이지 않는 의존성을 찾아 제거하세요.\n\n- 의존을 사용하기 전에, `npm-stat`을 사용해 커뮤니티에서 잘 사용되는 패키지인지 확인하기 위해서 다운로드 통계를 확인하세요. [더 읽기](https://npm-stat.com/)\n\n  _이유:_\n\n  > 대개, 사용량이 많을 수록 기여자(contributor)가 더 많아지므로, 유지 보수가 잘 됩니다. 또한, 이로 인해 버그가 빠르게 발견되고 고쳐집니다.\n\n- 의존을 사용하기 전에, 많은 메인테이너와 함께, 성숙한 버전 릴리즈 주기가 있는지 확인하세요. 예: `npm view async` [더 읽기](https://docs.npmjs.com/cli/view)\n\n  _이유:_\n\n  > 아무리 많은 컨트리뷰터가 있어도 메인테이너들이 패치를 충분히 빠르게 머지(merge)하지 않으면 소용이 없습니다.\n\n- 덜 알려진 의존성이 필요한 경우, 그걸 사용하기 전에 팀 내에서 의논하세요.\n- `npm outdated`를 사용해서 당신의 어플리케이션이 깨지지 않고 의존 패키지의 최신 버전으로 동작하도록 만드세요. [더 읽기](https://docs.npmjs.com/cli/outdated)\n\n  _이유:_\n\n  > 의존은 때때로 깨트리는 변화(breaking change)를 담은 채로 업데이트 됩니다. 항상 업데이트가 있을 때마다 릴리즈 노트를 확인하세요. 당신의 의존성을 한 번에 하나씩 업데이트하면, 뭔가 잘못되었을 때 트러블슈팅이 쉬워집니다. [npm-check-updates](https://github.com/tjunnone/npm-check-updates) 같이 좋은 툴을 활용하세요.\n\n- [Snyk](https://snyk.io/test?utm_source=risingstack_blog) 같은 것을 사용해서 패키지에 알려진 보안 취약점이 있는지 확인하세요.\n\n<a name=\"testing\"></a>\n\n## 5. 테스트\n\n![Testing](/images/testing.png)\n\n- 필요하다면 `test` 모드를 만드세요.\n\n  _이유:_\n\n  > 때때로 프로덕션 모드로도 End-to-End 테스트에 충분할 수도 있지만, 예외는 항상 있습니다. 예를 들어, 당신은 프로덕션 모드를 사용해서 다른 사람의 대시보드를 테스트 데이터로 오염시키는 것을 원하지 않을 수도 있습니다. 다른 예로, 프로덕션 모드에서 당신이 사용하는 API는 호출 수 제한을 가져서, 일정량의 요청 후에는 테스트 호출을 차단할 수 있습니다.\n\n- 테스트 파일을 테스트 되는 모듈과 같은 경로에 위치시키고 `moduleName.spec.js` 처럼 `*.test.js`나 `*.spec.js` 같은 네이밍 컨벤션으로 이름을 지어주세요.\n\n  _이유:_\n\n  > 유닛 테스트를 찾기 위해서 폴더 구조를 다 뒤지길 원하는 사람은 없을 겁니다. [더 읽기](https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc)\n\n- 혼란을 방지하기 위해 추가적인 테스트 파일들은 별도의 테스트 폴더에 넣으세요.\n\n  _이유:_\n\n  > 몇몇 테스트 파일들은 여러 개의 구현 파일과 관련이 있습니다. 당신은 그 파일들을 다른 개발자들이 찾을 가능성이 큰 `__test__` 폴더에 집어 넣어야 합니다. 또한, 이제 이 `__test__`라는 이름은 표준이며, 대부분의 JavaScript 테스트 프레임워크에 의해 사용되고 있습니다.\n\n- 테스트 가능한 코드를 작성하세요. 사이드 이펙트를 피하세요. 사이드 이펙트를 분리하세요. 순수 함수를 작성하세요.\n\n  _이유:_\n\n  > 당신은 비즈니스 로직을 별개의 유닛으로 분리해 테스트 하기를 원할 겁니다. 그렇다면 당신은 \"무작위의 영향과 코드 안정성에 대한 비결정적(nondeterministic) 프로세스를 최소화\" 해야 합니다. [더 읽기](https://medium.com/javascript-scene/tdd-the-rite-way-53c9b46f45e3)\n\n  > 순수 함수는 같은 입력에 대해 항상 같은 출력을 돌려주는 함수를 말합니다. 반대로, 불순(impure) 함수는 사이드 이펙트를 포함하고 있거나 값을 얻기 위해 바깥의 상태에 의존하는 함수를 말합니다. 이러한 특징은 함수를 예측하기 어렵게 만듭니다. [더 읽기](https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc)\n\n- 정적 타입 분석기를 활용하세요.\n\n  _이유:_\n\n  > 이따금 당신은 정적 타입 분석기가 필요할 수도 있습니다. 정적 타입 분석기는 코드에 일정 수준의 신뢰도를 제공합니다. [더 읽기](https://medium.freecodecamp.org/why-use-static-types-in-javascript-part-1-8382da1e0adb)\n\n- `develop`에 풀 리퀘스트를 만들기 전에 테스트를 로컬로 돌리세요.\n\n  _이유:_\n\n  > 프로덕션 준비된 브랜치의 빌드를 실패한 사람이 되고 싶진 않을 겁니다. 당신의 기능 브랜치를 원격 저장소에 푸시하기 전에 먼저 `rebase` 한 뒤 테스트를 돌리세요.\n\n- `README.md` 파일의 적절한 섹션에 설명을 포함해서 테스트에 대해 문서화하세요.\n\n  _이유:_\n\n  > 다른 개발자 혹은 DevOps 전문가나 QA, 아니면 당신의 코드를 가지고 일하는 운 좋은 누군가에게 남겨두는 편리한 메모입니다.\n\n<a name=\"structure-and-naming\"></a>\n\n## 6. 구조 및 네이밍\n\n![Structure and Naming](/images/folder-tree.png)\n\n- 프로덕트를 구성하는 파일을 역할이 아닌 기능, 페이지, 컴포넌트 단위로 구성하세요. 또한, 테스트 파일은 구현 파일과 같은 경로에 두세요.\n\n  **Bad**\n\n  ```\n  .\n  ├── controllers\n  |   ├── product.js\n  |   └── user.js\n  ├── models\n  |   ├── product.js\n  |   └── user.js\n  ```\n\n  **Good**\n\n  ```\n  .\n  ├── product\n  |   ├── index.js\n  |   ├── product.js\n  |   └── product.test.js\n  ├── user\n  |   ├── index.js\n  |   ├── user.js\n  |   └── user.test.js\n  ```\n\n  _이유:_\n\n  > 긴 파일 리스트 대신에, 테스트를 포함해서 하나의 책임을 캡슐화한 작은 모듈을 만들게 될 겁니다. 그렇게 하면 파일 탐색이 훨씬 쉬워지고, 훑어봐도 파일을 찾을 수 있습니다.\n\n- 혼란을 방지하기 위해 추가적인 테스트 파일들은 별도의 테스트 폴더에 넣으세요.\n\n  _이유:_\n\n  > 다른 개발자 혹은 DevOps 전문가 들의 시간을 아껴줄 수 있습니다.\n\n- `./config` 폴더를 사용하고 다른 환경을 위해 다른 설정 파일을 만들지 마세요.\n\n  _이유:_\n\n  > 서로 다른 목적(데이터베이스, API 등)을 위해 설정 파일을 분리할 때, 그 파일들을 한 폴더에 넣고 `config` 처럼 잘 알려진 이름을 가진 폴더에 넣으면 됩니다. 그냥 다른 환경을 위해 다른 설정 파일을 만들지 말라는 것만 기억하세요. 그렇게 하면 깔끔하게 확장할 수 없습니다. 앱의 더 많은 배포판이 만들어지면 새로운 환경의 이름이 필요합니다. 설정 파일에서 사용되는 값들은 환경 변수에 의해 제공되어야 합니다. [더 읽기](https://medium.com/@fedorHK/no-config-b3f1171eecd5)\n\n- 스크립트 파일들은 `./scripts` 폴더에 넣으세요. `bash`와 `node` 스크립트를 포함해서요.\n\n  _이유:_\n\n  > 당신은 프로덕션 빌드, 개발용 빌드, 데이터베이스 공급, 데이터베이스 동기화 등, 최소 1개 이상의 스크립트를 필요로 할 가능성이 높습니다.\n\n- `./build` 폴더에 빌드 결과물을 위치시키도록 하세요. 그리고 `.gitignore`에 `build/`를 추가하세요.\n\n  _이유:_\n\n  > 취향대로 이름을 지으세요. `dist`도 괜찮습니다. 하지만 팀 내에서 일관성을 지키도록 하세요. 그 안에 들어가는 것은 대부분 생성되거나(번들되거나, 컴파일되거나, 트랜스파일되거나) 옮겨진 파일일 가능성이 높습니다. 당신이 생성할 수 있다면, 당신의 팀원도 생성할 수 있을 것이므로 그 파일들을 원격 저장소에 올릴 필요는 없습니다. 특별히 필요한 경우가 아니라면요.\n\n- 파일명과 디렉토리명을 위해 `PascalCase`나 `camelCase`를 사용하세요. `PascalCase`는 컴포넌트용으로만 사용하세요.\n\n- `CheckBox` 컴포넌트를 위해서 `CheckBox/index.js`나 `CheckBox.js`를 사용하세요. 하지만 장황한 `CheckBox/Checkbox.js` 혹은 `checkbox/CheckBox.js`는 사용하지 **마세요**.\n\n- 이상적으로는, `index.js`에서 디폴트로 내보내는 모듈의 이름이 디렉토리의 이름과 일치해야 합니다.\n\n  _이유:_\n\n  > 그러면 부모 폴더만 그냥 간단히 불러와도 당신이 받게 될 컴포넌트나 모듈이 뭔지 예상할 수 있게 됩니다.\n\n<a name=\"code-style\"></a>\n\n## 7. 코드 스타일\n\n![Code style](/images/code-style.png)\n\n<a name=\"code-style-check\"></a>\n\n### 7.1 코드 스타일 가이드라인\n\n- 새로운 프로젝트에는 stage-2 이상의 현대적인 JavaScript 문법을 사용하세요. 오래된 프로젝트에서는 프로젝트를 현대화(modernize)할 계획이 없다면 일관성을 위해 기존 문법을 유지하세요.\n\n  _이유:_\n\n  > 이것은 모두 당신에게 달렸습니다. 우리는 새로운 문법의 장점을 사용하기 위해 트랜스파일러를 사용합니다. stage-2는 약간의 사소한 수정이 있을 수는 있지만, 결국 스펙의 일부가 될 겁니다.\n\n- 빌드 프로세스에 코드 스타일 체크를 포함하세요.\n\n  _이유:_\n\n  > 빌드를 깨트리는 건 당신의 코드에 스타일을 강제하는 방법 중 하나입니다. 그렇게 하면 당신이 코드 스타일을 유지하는 데에 더 진지해질 겁니다. 클라이언트, 서버 양 쪽 모두에 하세요. [더 읽기](https://www.robinwieruch.de/react-eslint-webpack-babel/)\n\n- 코드 스타일을 강제하기 위해 [ESLint](http://eslint.org/)를 사용하세요.\n\n  _이유:_\n\n  > 꼭 `eslint`를 선택할 필요는 없지만 우리는 `eslint`를 선호합니다. `eslint`는 더 많은 룰을 지원하고, 규칙을 설정하거나 추가할 수도 있습니다.\n\n- 우리는 JavaScript에 [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript)를 사용합니다. ([더 읽기](https://www.gitbook.com/book/duk/airbnb-javascript-guidelines/details)) 프로젝트나 팀이 요구하는 JavaScript 스타일 가이드를 사용하세요.\n\n- [FlowType](https://flow.org/)을 사용할 때, 우리는 [ESLint용 Flow type 스타일 체크 룰](https://github.com/gajus/eslint-plugin-flowtype)을 사용합니다.\n\n  _이유:_\n\n  > Flow는 약간의 문법을 제공합니다. 그 문법 역시 특정한 코드 스타일을 따르고 체크되어야할 필요가 있습니다.\n\n- 코드 스타일 체크로부터 파일이나 폴더를 제외하기 위해 `.eslintignore`를 사용하세요.\n\n  _이유:_\n\n  > 스타일 체크로부터 몇 몇 파일을 제외할 때마다 `eslint-disable` 주석으로 코드를 더럽게 만들 필요가 없습니다.\n\n- 풀 리퀘스트를 만들기 전에 `eslint` 비활성화 주석을 제거하세요.\n\n  _이유:_\n\n  > 코드를 짜는 동안 로직에 집중하기 위해서 스타일 체크를 비활성화 하는 건 일상적인 일입니다. 그냥 `eslint-disable` 주석을 비활성화하는 걸 잊지말고 규칙을 따르세요.\n\n- 작업의 크기에 따라서 `//TODO` 주석을 사용하거나 이슈를 새로 만드세요.\n\n  _이유:_\n\n  > 그렇게 하면 당신 스스로나 다른 사람들에게 작은 작업(함수 리팩토링 혹은 주석 업데이트)을 상기시킬 수 있습니다. 조금 더 큰 작업에 대해서는 린트 규칙에 의해 강제되는 `//TODO(#3456)` 같은 주석을 사용하세요. 번호는 이슈 번호를 뜻합니다.\n\n- 항상 주석이 코드 변경점과 관련이 있도록 유지하세요. 주석처리된 코드 블록은 제거하세요.\n\n  _이유:_\n\n  > 당신의 코드는 최대한 읽기 좋게 만드세요. 집중을 할 수 없게 만드는 것은 무엇이든 지워야합니다. 만약 함수를 리팩토링한다면, 예전 코드를 주석처리하지 말고 제거하세요.\n\n- 부적절하거나 웃기는 주석, 로그, 네이밍을 피하세요.\n\n  _이유:_\n\n  > 빌드 프로세스에서 그것들을 제거할 수도 있지만, 때때로 당신의 소스 코드가 다른 회사/클라이언트에게 넘어가서 곤란한 상황이 될 수도 있습니다.\n\n- 의미있게 구별이 되도록 검색이 잘되는 이름을 짓고 줄임말을 피하세요. 함수의 경우, 길고 설명적인 이름으로 지으세요. 함수의 이름은 동사이거나 동사구여야 하며, 의도를 전달해야합니다.\n\n  _이유:_\n\n  > 소스코드를 더 자연스럽고 가독성 좋게 만듭니다.\n\n- 함수를 내림차 순으로 정렬해두세요. 고레벨의 함수는 최상단에 위치해야 하며 저레벨의 함수는 아래에 위치해야 합니다.\n\n  _이유:_\n\n  > 소스코드를 더 자연스럽고 가독성 좋게 만듭니다.\n\n<a name=\"enforcing-code-style-standards\"></a>\n\n### 7.2 표준 코드 스타일 강제하기\n\n- 서로 다른 에디터들 사이에서도 일관적인 코딩 스타일을 정의하고 유지하도록 돕는 [.editorconfig](http://editorconfig.org/) 파일을 사용하세요.\n\n  _이유:_\n\n  > EditorConfig 프로젝트는 코딩 스타일을 정의하는 파일 포맷과, 에디터가 파일 포맷을 읽을 수 있도록 도와주고 정의한 스타일을 고수하는 텍스트 에디터 플러그인들의 모음으로 정의됩니다. EditorConfig 파일은 가독성이 좋고 버전 컨트롤 시스템과도 잘 동작합니다.\n\n- 코드 스타일 에러를 표시해주는 에디터를 사용하세요. 이미 사용하고 있는 ESLint 설정과 함께 [eslint-plugin-prettier](https://github.com/prettier/eslint-plugin-prettier)와[eslint-config-prettier](https://github.com/prettier/eslint-config-prettier)를 사용하세요. [더 읽기](https://github.com/prettier/eslint-config-prettier#installation)\n\n- Git hook을 고려해보세요.\n\n  _이유:_\n\n  > Git hook은 개발자의 생산성을 크게 끌어올립니다. 빌드를 깨트릴 걱정 없이 스테이징이나 프로덕션에 변경 사항을 만들고 커밋, 푸시를 할 수 있습니다. [더 읽기](http://githooks.com/)\n\n- precommit hook과 함께 Prettier를 사용하세요.\n\n  _이유:_\n\n  > `prettier` 자체는 매우 강력하지만, 매번 코드를 포맷팅 할 때마다 npm 태스크로 실행하는 건 별로 생산적이지 않습니다. 이 부분에서는 `lint-staged`나 `husky`가 편리합니다. 설정하는 방법은 `lint-staged`([여기](https://github.com/okonet/lint-staged#configuration))나 `husky`([여기](https://github.com/typicode/husky))에서 더 알아보세요.\n\n<a name=\"logging\"></a>\n\n## 8. 로깅\n\n![Logging](/images/logging.png)\n\n- 프로덕션에서 클라이언트 사이드의 로깅은 피하세요.\n\n  _이유:_\n\n  > 아마 빌드 프로세스가 로깅 함수를 지워버리겠지만, 그럼에도 불구하고 코드 스타일 체크를 통해 `console.log`가 있으면 경고하도록 만드세요.\n\n- 프로덕션에서 가독성 좋은 로그를 남기세요. 프로덕션 모드에서 [winston](https://github.com/winstonjs/winston) 이나 [node-bunyan](https://github.com/trentm/node-bunyan) 같은 로깅 라이브러리를 사용하는 것이 이상적입니다.\n\n  _이유:_\n\n  > 이렇게하면 로그 색상, 타임스탬프, 매일 반복되는 로그 파일 출력 등의 요소 덕분에 트러블 슈팅이 덜 고통스럽습니다. [더 읽기](https://blog.risingstack.com/node-js-logging-tutorial/)\n\n<a name=\"api\"></a>\n\n## 9. API\n\n<a name=\"api-design\"></a>\n\n![API](/images/api.png)\n\n### 9.1 API 설계\n\n_이유:_\n\n> 우리가 RESTful 인터페이스를 명확하게 구성해서 개발하도록 강제하기 때문에 팀 멤버나 고객들이 간편하고 일관적으로 사용할 수 있습니다.\n\n_이유:_\n\n> 일관성과 단순함의 부족은 통합 및 유지보수 비용을 크게 상승시킬 수도 있습니다. 이것이 `API 설계`가 이 문서에 포함되어있는 이유입니다.\n\n- 우리는 대부분 리소스 지향(resource-oriented) 설계를 따릅니다. 리소스 지향 설계는 세 개의 큰 요소(리소스, 콜렉션, URL)를 가집니다.\n\n  - 리소스는 데이터를 가지고, 중첩되며, 리소스를 조작할 수 있는 메소드가 존재합니다.\n  - 리소스의 그룹은 콜렉션이라고 부릅니다.\n  - URL은 리소스 혹은 콜렉션의 온라인 위치를 식별합니다.\n\n  _이유:_\n\n  > 이것은 개발자들(당신의 주 API 사용자들을 포함)에게 매우 잘 알려져있는 설계입니다. 가독성과 사용 편의성을 제외하더라도, 범용적인 라이브러리와 커넥터를 작성할 수 있습니다. 심지어 API가 뭔지 모르더라도 말이죠.\n\n- URL에는 케밥 케이스(kebab-case)를 사용하세요.\n- 쿼리 스트링이나 리소스 필드의 파라미터로는 카멜 케이스(camelCase)를 사용하세요.\n- URL 내부 리소스의 이름은 복수의 케밥 케이스를 사용하세요.\n\n- 콜렉션을 가리키는 URL의 네이밍에는 항상 복수 명사를 사용하세요. 예: `/users`\n\n  _이유:_\n\n  > 기본적으로, 더 읽기 쉽고 URL을 일관성있게 유지시킬 수 있습니다. [더 읽기](https://apigee.com/about/blog/technology/restful-api-design-plural-nouns-and-concrete-names)\n\n- 소스 코드에서는 복수형을 변수나 프로퍼티로 변환할 때 `List` 접미사를 사용하세요.\n\n  _이유_:\n\n  > 복수형은 URL에는 좋지만 소스 코드에서는 식별하기가 어려워 에러의 원인이 될 수 있습니다.\n\n- 항상 콜렉션에서 시작해 식별자에서 끝나는 단일 컨셉을 사용하세요.\n\n  ```\n  /students/245743\n  /airports/kjfk\n  ```\n\n- 이런 URL은 피하세요.\n\n  ```\n  GET /blogs/:blogId/posts/:postId/summary\n  ```\n\n  _이유:_\n\n  > 이건 리소스가 아니라 프로퍼티를 가리키는 겁니다. 프로퍼티는 파라미터로 넘겨 응답(Response)을 정리할 수 있습니다.\n\n- 리소스 URL에서 동사는 제거하세요.\n\n  _이유:_\n\n  > 각각의 리소스 작업에 동사를 사용하면 엄청난 양의 URL 리스트가 생기는 건 금방입니다. 또한 패턴에 일관성이 없어 개발자들이 배우기 어렵게 만듭니다. 게다가 우리는 동사를 좀 다른 용도로 사용할 겁니다.\n\n- 리소스가 아닌 것들을 위해 동사를 사용하세요. 이 경우, API는 어떠한 리소스도 돌려주지 않습니다. 대신, 특정 동작(Operation)을 수행하고 그 결과를 반환합니다. **이것은 CRUD(create, retrieve, update and delete)가 아닙니다!**\n\n  ```\n  /translate?text=Hallo\n  ```\n\n  _이유:_\n\n  > CRUD 용도로 우리는 `리소스` 혹은 `콜렉션` URL에 HTTP 메소드를 사용하기 때문입니다. 우리가 말하고 있는 동사는 실제로는 `컨트롤러` 입니다. 보통은 이런 걸 개발할 일이 별로 없습니다. [더 읽기](https://byrondover.github.io/post/restful-api-guidelines/#controller)\n\n- 요청 본문(Request body)과 응답 타입은 JSON이며, 일관성을 유지하기 위해서 `JSON` 프로퍼티 이름으로 `camelCase`를 사용하세요.\n\n  _이유:_\n\n  > 이건 JavaScript 프로젝트 가이드라인입니다. 때문에, JSON을 생성하는 프로그래밍 언어 뿐만 아니라 JSON을 파싱하는 프로그래밍 언어도 JavaScript일거라 가정합니다.\n\n- 리소스는 객체 인스턴스 혹은 데이터베이스 레코드와 비슷한 단일 개념이지만, 리소스 이름에 테이블 명을 사용하거나 프로퍼티 이름으로 컬럼 명을 사용하지 마세요.\n\n  _이유:_\n\n  > API의 용도는 데이터베이스 스키마를 공개하는 것이 아니라 리소스를 노출하는 것입니다.\n\n- 재강조합니다. 리소스를 네이밍할 때 URL에는 명사만 사용하고 기능적인 측면을 설명하려고 하지마세요.\n\n  _이유:_\n\n  > 리소스 URL에는 오직 명사만 사용하고, `/addNewUser`나 `/updateUser` 같은 끝점은 피하세요. 또한 리소스 동작을 파라미터로 보내지마세요.\n\n- HTTP 메소드를 사용해 CRUD의 기능적 측면을 나타내세요.\n\n  _방법:_\n\n  > `GET`: 리소스의 표현을 가져오기 위해 사용합니다.\n\n  > `POST`: 새로운 리소스나 서브 리소스를 만들기 위해 사용합니다.\n\n  > `PUT`: 존재하는 리소스를 업데이트하기 위해서 사용합니다.\n\n  > `PATCH`: 존재하는 리소스를 업데이트하기 위해 사용합니다. 오직 제공된 필드만 업데이트하고 다른 것들은 그대로 놔둡니다.\n\n  > `DELETE`: 존재하는 리소스를 삭제하기 위해서 사용합니다.\n\n- 중첩된 리소스는 URL에서의 관계를 이용하세요, 예를 들어, 직원과 회사를 연결하기 위해 `id`를 사용하세요.\n\n  _이유:_\n\n  > 이것은 리소스를 탐색 가능하도록 만드는 자연스러운 방법입니다.\n\n  _방법:_\n\n  > `GET      /schools/2/students\t` , 2번 학교의 모든 학생들의 리스트를 가져옵니다.\n\n  > `GET      /schools/2/students/31` , 2번 학교에 속한 31번 학생의 구체적인 정보를 가져옵니다.\n\n  > `DELETE   /schools/2/students/31` , 2번 학교에 속한 31번 학생을 삭제합니다.\n\n  > `PUT      /schools/2/students/31` , 31번 학생의 정보를 업데이트 합니다. PUT은 콜렉션 말고 리소스 URL에만 사용하세요.\n\n  > `POST     /schools` , 새로운 학교를 만들고 만들어진 학교의 구체적인 정보를 반환합니다. 콜렉션 URL에 POST 메소드를 사용하세요.\n\n- 버전을 위해서 `v` 접두어와 함께 간단한 서수(ordinal number)를 사용하세요(v1, v2). 가장 높은 스코프를 가지도록 URL의 가장 왼쪽에 위치시키세요.\n\n  ```\n  http://api.domain.com/v1/schools/3/students\n  ```\n\n  _이유:_\n\n  > 다른 서드 파티를 위해 API를 공개한 경우, Breaking change를 포함하는 API 업그레이드는 그 API를 사용하는 프로덕트나 서비스 또한 깨트릴 수 있습니다. URL에 버전을 사용해서 그런 사건을 예방하세요. [더 읽기](https://apigee.com/about/blog/technology/restful-api-design-tips-versioning)\n\n- 응답 메시지는 스스로 설명할 수 있어야 합니다. 좋은 에러 메시지 응답은 다음과 같이 생겼습니다.\n\n  ```json\n  {\n  \t\"code\": 1234,\n  \t\"message\": \"뭔가 안 좋은 일 발생\",\n  \t\"description\": \"세부 정보\"\n  }\n  ```\n\n  혹은 Validation 에러의 경우,\n\n  ```json\n  {\n  \t\"code\": 2314,\n  \t\"message\": \"Validation 실패\",\n  \t\"errors\": [\n  \t\t{\n  \t\t\t\"code\": 1233,\n  \t\t\t\"field\": \"email\",\n  \t\t\t\"message\": \"유효하지 않은 이메일\"\n  \t\t},\n  \t\t{\n  \t\t\t\"code\": 1234,\n  \t\t\t\"field\": \"password\",\n  \t\t\t\"message\": \"비밀번호가 제공되지 않음\"\n  \t\t}\n  \t]\n  }\n  ```\n\n  _이유:_\n\n  > 개발자들이 당신의 API를 사용해 어플리케이션을 개발한 뒤에, 트러블 슈팅을 할 때나, 이슈를 해결하는 중요한 상황에서 그들은 잘 설계된 에러에 의존합니다.\n\n  _주의: 보안상의 예외 메시지는 가능한 일반적으로 만드세요. 예를 들어, '틀린 비밀번호' 대신에 '틀린 유저명 혹은 비밀번호'라는 답변으로 대신하여 유저명은 실제로 맞고 비밀번호만 잘못되었다는 사실을 유저에게 무의식적으로 알리지 않을 수 있습니다._\n\n- **모든 것이 잘 동작한다**, **클라이언트 앱이 뭔가 잘못했다**, 혹은 **API가 뭔가 잘못했다** 여부를 표현하기 위해, 응답으로 아래의 8가지 상태 코드만 사용하세요.\n\n  _목록:_\n\n  > `200 OK`는 `GET`, `PUT` 혹은 `POST` 요청이 성공했음을 표현합니다.\n\n  > `201 Created`는 새로운 인스턴스가 생성되었을 때 보냅니다. `POST` 메소드를 이용해 새로운 인스턴스를 생성하면 `201` 상태 코드를 반환합니다.\n\n  > `304 Not Modified` 응답은 수신자가 캐시 데이터를 가지고 있을 때 정보 교환을 최소화하기 위해서 사용됩니다.\n\n  > `400 Bad Request` 응답은 요청이 처리되지 않았을 때, 서버가 클라이언트가 요청하는 게 무엇인지 알 수 없을 때 사용합니다.\n\n  > `401 Unauthorized`는 요청에 유효한 자격증명이 없을 때, 필요한 자격증명으로 다시 요청해야하는 경우 사용합니다.\n\n  > `403 Forbidden`는 서버가 요청을 이해했으나, 승인은 거절한다는 의미입니다.\n\n  > `404 Not Found`는 요청한 리소스를 찾을 수 없음을 나타냅니다.\n\n  > `500 Internal Server Error`는 요청이 유효하나, 서버가 예상치 못한 상황으로 인해 요청을 실행하지 못했음을 나타냅니다.\n\n  _이유:_\n\n  > 대부분의 API 공급자들은 HTTP 상태 코드의 작은 부분집합만 사용합니다. 예를 들어 구글의 GData API는 단 10개의 상태 코드를 사용하고, 넷플릭스는 9개, Digg는 겨우 8개를 사용합니다. 물론, 이러한 응답들은 추가적인 정보를 담고있는 본문을 포함합니다. HTTP 상태 코드는 70개 이상 존재합니다. 그러나, 대부분의 개발자는 70개 모두를 기억하지는 못합니다. 그러므로 만약 당신이 일반적으로 쓰이지 않는 상태 코드를 사용한다면, 어플리케이션 개발자들은 개발을 하다말고 위키피디아로 가서 당신이 뭘 말하려고 했는지 알아볼 것입니다. [더 읽기](https://apigee.com/about/blog/technology/restful-api-design-what-about-errors)\n\n- 응답에 리소스의 숫자를 제공하세요.\n- `limit`과 `offset` 파라미터를 허용하세요.\n\n- 노출되는 리소스 데이터의 양도 고려해야 합니다. API 사용자는 항상 리소스의 모든 필드를 필요로 하지 않습니다. 쉼표로 구분된 필드 목록을 포함하는 필드 쿼리 파라미터를 사용하세요.\n  ```\n  GET /student?fields=id,name,age,class\n  ```\n- 페이지네이션, 필터링 및 정렬은 처음부터 모든 리소스에 대해 지원될 필요는 없습니다. 필터링과 정렬을 지원하는 리소스에 대해 문서를 작성하세요.\n\n<a name=\"api-security\"></a>\n\n### 9.2 API 보안\n\n다음과 같이, 몇 가지 기본적인 보안 모범사례가 존재합니다.\n\n- 보안 연결(HTTPS) 없이 \"Basic\" 인증은 사용하지 마세요. 인증 토큰은 URL로 전달(`GET /users/123?token=asdf....`)되어서는 안됩니다.\n\n  _이유:_\n\n  > 토큰 혹은 유저 ID 및 비밀번호는 네트워크를 통해 명확한 텍스트로 전달됩니다. (Base64 인코딩을 사용하지만, Base64는 디코딩이 가능하죠.) Basic 인증 방식은 안전하지 않습니다. [더 읽기](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication)\n\n- 토큰은 다음처럼 모든 요청에 대해 Authorization 헤더를 사용해서 전달되어야 합니다. `Authorization: Bearer xxxxxx, Extra yyyyy`\n\n- 인증 코드(Authorization Code)는 유효기간이 짧아야 합니다.\n\n- 안전하지 않은 데이터 교환을 피하기 위해 HTTP 요청에 응답하지 않음으로써 TLS 요청이 아닌 요청을 거부하세요. HTTP 요청에 `403 Forbidden`으로 응답하세요.\n\n- 요청 제한을 고려해보세요.\n\n  _이유:_\n\n  > API를 봇이 시간 당 몇 천 건의 요청을 보내는 위협에서 보호하세요. 빠른 속도로 요청 제한을 구현하는 걸 고려해야합니다.\n\n- HTTP 헤더를 적절하게 설정하면, 웹 어플리케이션의 보안을 유지하는데 도움이 됩니다. [더 읽기](https://github.com/helmetjs/helmet)\n\n- API는 받은 데이터를 표준 형식으로 변환하거나 거부해야 합니다. 잘못되거나 빠진 데이터에 대한 세부 정보와 함께 400 Bad Request를 돌려주세요.\n\n- REST API로 교환된 모든 데이터는 API에 의해 유효한지 검사되어야 합니다.\n\n- JSON을 직렬화(Serailize)하세요.\n\n  _이유:_\n\n  > JSON 인코더의 중요한 관심사는 브라우저 혹은 Node.js 서버에서 임의의 JavaScript 원격 코드의 실행을 막는 것입니다. 브라우저에서 사용자가 제공한 데이터를 실행할 수 없도록 적절한 JSON 인코더를 사용해서 사용자가 제공한 데이터를 적절하게 인코딩하는 것은 중요합니다.\n\n- Content-Type을 검증하고, Content-Type 헤더로 거의 `application/*.json`을 사용하세요.\n\n  _이유:_\n\n  > 예를 들머, `application/x-www-form-urlencoded` MIME 타입을 받아들이게 되면 공격자들이 폼을 만들고 간단한 POST 요청을 일으키는 것을 허용하게 됩니다. 서버는 절대 Content-Type을 가정해서는 안됩니다. Content-Type 헤더의 부재 혹은, 예상치 못한 Content-Type 헤더는 서버에서 `4XX` 응답으로 거부해야 합니다.\n\n- API 보안 체크리스트 프로젝트를 살펴보세요. [더 읽기](https://github.com/shieldfy/API-Security-Checklist)\n\n<a name=\"api-documentation\"></a>\n\n### 9.3 API 문서화\n\n- [README.md 템플릿](./README.sample.md)의 `API 참조` 섹션을 채우세요.\n- 샘플 코드를 첨부해서 API 인증 방법을 기술하세요.\n- 요청 타입(HTTP METHOD)을 포함해 URL(경로만 포함, 루트 URL 제외) 구조를 설명하세요.\n\n각각의 끝점(Endpoint)에 대해서 다음과 같은 사항이 포함되어야 합니다.\n\n- URL 파라미터가 존재한다면 다음과 같이 URL 섹션에 언급된 이름에 따라 URL 파라미터를 명시합니다.\n\n  ```\n  Required: id=[integer]\n  Optional: photo_id=[alphanumeric]\n  ```\n\n- 요청 타입이 POST인 경우 동작하는 예제를 제공하세요. URL 파라미터 규칙도 여기에 적용됩니다. 필수와 옵션 섹션을 구분하세요.\n\n- 응답 성공: 상태 코드는 어떻게 되어야 하며, 돌려주는 데이터는 어떤 건가요? 아래처럼 하면 요청의 결과를 알아야할 필요가 있을 때 유용합니다.\n\n  ```\n  Code: 200\n  Content: { id : 12 }\n  ```\n\n- 응답 에러: 대부분의 끝점에 대한 요청은 비인증 접근부터 잘못된 파라미터까지, 다양한 방법으로 실패할 수 있습니다. 이런 에러들은 명시되어야 합니다. 너무 반복적일 수도 있지만, 가정을 하지 않게 하는데 도움이 됩니다. 예를 들어,\n\n  ```json\n  {\n  \t\"code\": 403,\n  \t\"message\": \"인증 실패\",\n  \t\"description\": \"유효하지 않은 유저명 혹은 비밀번호\"\n  }\n  ```\n\n- API 설계 도구를 사용하세요. 좋은 문서화에 도움을 주는 다양한 오픈소스가 있습니다. [API Blueprint](https://apiblueprint.org/)나 [Swagger](https://swagger.io/) 같은 것들 말이죠.\n\n<a name=\"licensing\"></a>\n\n## 10. 라이센스\n\n![Licensing](/images/licensing.png)\n\n사용 권한이 있는 리소스만 사용해야 합니다. 라이브러리를 사용할 때는 MIT, Apache 혹은 BSD 라이센스를 찾아야한다는 걸 기억하세요. 또한 당신이 라이브러리를 수정해야 한다면, 라이센스 세부정보를 잘 살펴보세요. 저작권이 있는 이미지나 비디오는 법적 문제를 야기할 수 있습니다.\n\n---\n\nSources:\n[RisingStack Engineering](https://blog.risingstack.com/),\n[Mozilla Developer Network](https://developer.mozilla.org/),\n[Heroku Dev Center](https://devcenter.heroku.com),\n[Airbnb/javascript](https://github.com/airbnb/javascript),\n[Atlassian Git tutorials](https://www.atlassian.com/git/tutorials),\n[Apigee](https://apigee.com/about/blog),\n[Wishtack](https://blog.wishtack.com)\n\nIcons by [icons8](https://icons8.com/)\n"
        },
        {
          "name": "README-pt-BR.md",
          "type": "blob",
          "size": 41.4599609375,
          "content": "[中文版](./README-zh.md)\n| [日本語版](./README-ja.md)\n| [한국어](./README-ko.md)\n| [РУССКИЙ](./README-ru.md)\n| [ENGLISH](./README.md)\n| [Persian/فارسی](./README-ir.md)\n\n[<img src=\"./images/elsewhen-logo.png\" width=\"180\" height=\"180\">](https://www.elsewhen.com/)\n\n# Padrões de Projeto &middot; [![PRs são bem vindos](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n\n> Enquanto desenvolver um novo projeto é apenas diversão para você, manter esse projeto pode ser um dos piores pesadelos para outra pessoa.\n> Isso aqui é uma lista dos padrões que encontramos, coletamos e escrevemos que (para nós) funcionam realmente bem com a maioria dos projetos JavaScript aqui na [elsewhen](https://www.elsewhen.com).\n> Se você quer compartilhar alguma prática que considera importante ou acha que alguma das coisas descritas aqui deve ser removida, [Sinta se a vontade para nos dizer](http://makeapullrequest.com).\n\n🔥 [Confira](https://github.com/elsewhencode/react-redux-saucepan) nosso [react redux projeto base](https://github.com/elsewhencode/react-redux-saucepan) em Flow com hot reloading e server-side rendering.\n\n<hr>\n\n- [Padrões de Projeto &middot; ![PRs são bem vindos](http://makeapullrequest.com)](#padr%C3%B5es-de-projeto-middot-prs-s%C3%A3o-bem-vindoshttpmakeapullrequestcom)\n  - [1. Git](#1-git)\n    - [1.1 Algumas regras do Git](#11-algumas-regras-do-git)\n    - [1.2 Git workflow](#12-git-workflow)\n    - [1.3 Escrevendo boas mensagens de commit](#13-escrevendo-boas-mensagens-de-commit)\n  - [2. Documentação](#2-documenta%C3%A7%C3%A3o)\n  - [3. Ambientes](#3-ambientes)\n    - [3.1 Ambientes de dev consistentes:](#31-ambientes-de-dev-consistentes)\n    - [3.2 Dependências consistentes:](#32-depend%C3%AAncias-consistentes)\n  - [4. Dependências](#4-depend%C3%AAncias)\n  - [5. Testes](#5-testes)\n  - [6. Nomes e estrutura](#6-nomes-e-estrutura)\n  - [7. Estilo de código](#7-estilo-de-c%C3%B3digo)\n    - [7.1 Alguns padrões de estilo de código](#71-alguns-padr%C3%B5es-de-estilo-de-c%C3%B3digo)\n    - [7.2 Force o code style](#72-force-o-code-style)\n  - [8. Logging](#8-logging)\n  - [9. API](#9-api)\n    - [9.1 API design](#91-api-design)\n    - [9.2 API security](#92-api-security)\n    - [9.3 API documentation](#93-api-documentation)\n  - [10. Licença](#10-licen%C3%A7a)\n\n<a name=\"git\"></a>\n\n## 1. Git\n\n![Git](/images/branching.png)\n<a name=\"some-git-rules\"></a>\n\n### 1.1 Algumas regras do Git\n\nEssas são algumas regras do Git para manter em mente:\n\n- Trabalhe em uma feature branch.\n\n  _Por que?:_\n\n  > Porque desse jeito todo o código é criado isolado em uma branch específica ao invés de poluir a branch principal com trabalho em progresso. Isso vai permitir você abrir vários pull requets sem confusão. Você pode continuar com uma branch em progresso sem correr o risco de quebrar a branch principal com código instável. [Leia mais sobre...](https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow)\n\n- Sempre comece uma nova branch a partir da `develop`\n\n  _Por que?_\n\n  > Desse jeito você pode garantir que o código na master vai estar sempre pronto para fazer build sem problemas e poderá ser usado a qualquer momento para fazer releases (isso pode ser exagero para alguns projetos).\n\n- Nunca dê push direto na `develop` ou `master`. Sempre faça Pull Requests.\n\n  _Por que?_\n\n  > Isso permite outros membros do time saberem que você terminou uma feature. Também possibilita code review e dicussões sobre o código que está prestes a ser introduzido no code base.\n\n- Atualize sua `develop` local e faça rebase interativo antes de subir sua feature e abrir um Pull Request.\n\n  _Por que?_\n\n  > Rebase vai fazer um merge do branch destino do pull request e aplicar os commits que você tem localmente no topo da história sem criar um commit de merge (assumindo que não tem conflitos). Como resultado você tem uma história limpa no seu repositório. [Leia mais sobre ...](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)\n\n- Resolva os conflitos enquanto faz o rebase e antes de abrir o Pull Request.\n- Delete feature branches, local e remoto, depois de realizar o merge.\n\n  _Por que?_\n\n  > Vai reduzir sua lista de branches removendo branches mortas. Vai garantir que você apenas faça o merge de uma branch uma única vez. Feature branches só devem existir enquanto o código ainda está em progresso.\n\n- Antes de fazer um Pull Request, tenha certeza que sua feature branch está fazendo build corretamente e passando em todos os testes (incluindo os padrões de estilo de código).\n\n  _Por que?_\n\n  > Você está prestes a colocar seu código em uma branch estável. Se sua feature branch faz algum teste falhar, a chance é alta de que você vai quebrar o build na branch destino. Você também precisa conferir o code style antes de fazer um Pull Request. Isso contribui para legibilidade e reduz a chance de algum problema de formatação is para o code base com as outras alterações.\n\n- Faça uso desse [`.gitignore`](./.gitignore).\n\n  _Por que:_\n\n  > É uma lista que já contém arquivos de sistemas que não devem ser enviados para o seu repositório remoto. E também exclui pastas de configuração e os arquivos comumente usado por editores e obviamente, também, pastas de dependência.\n\n- Proteja (Bloqueie) a `develop` e `master`.\n\n  _Por que?_\n\n  > Protege suas branchs que devem, em teoria, estarem prontas para irem para produção de receberem códigos e mudanças irreversíveis. Leia mais sobre... [Github](https://help.github.com/articles/about-protected-branches/), [Bitbucket](https://confluence.atlassian.com/bitbucketserver/using-branch-permissions-776639807.html) e [GitLab](https://docs.gitlab.com/ee/user/project/protected_branches.html)\n\n<a name=\"git-workflow\"></a>\n\n### 1.2 Git workflow\n\nDevido a maioria dos motivos listados acima, nos usamos [Feature-branch-workflow](https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow) com [Interactive Rebasing](https://www.atlassian.com/git/tutorials/merging-vs-rebasing#the-golden-rule-of-rebasing) e alguns pontos do [Gitflow](https://www.atlassian.com/git/tutorials/comparing-workflows#gitflow-workflow) (nomeação e ter uma develop branch). Os principais passos são:\n\n- Em um projeto novo, inicialize o git na pasta do projeto. **Para qualquer features/changes ignore esse passo**.\n\n  ```sh\n  cd <pasta do projeto>\n  git init\n  ```\n\n- Checkout para uma nova branch feature/bug-fix.\n  ```sh\n  git checkout -b <branchname>\n  ```\n- Faça as alterações.\n\n  ```sh\n  git add <arquivo1> <arquivo2> ...\n  git commit\n  ```\n\n  _Por que?_\n\n  > `git add <arquivo1> <arquivo2> ...` - Você deve add apenas arquivos com mudanças pequenas e concisas.\n\n  > `git commit` Abrirá o editor, o que permite você separar o titulo da mensagem.\n\n  > Leia mais sobre na _seção 1.3_.\n\n  _Dica:_\n\n  > Você poderia usar `git add -p`, o que te daria a chance de revisar todas as mudanças introduzidas, uma a uma, e decidir se inclui ou não naquele commit.\n\n- Sincronize com as ultimas alterações no repositório remoto.\n\n  ```sh\n  git checkout develop\n  git pull\n  ```\n\n  _Por que?_\n\n  > Isso vai permitir que você lide com os conflitos na sua máquina local enquanto você faz o rebase (posteriormente) ao invés de criar um pull request com conflitos.\n\n- Atualize sua feature branch com as ultimas alterações da develop usando rebase iterativo.\n\n  ```sh\n  git checkout <branchname>\n  git rebase -i --autosquash develop\n  ```\n\n  _Por que?_\n\n  > Você pode usar --autosquash para comprimir todos os seus commits em um único commit. Ninguém quer commits de desenvolvimento de uma feature na develop. [Leia mais sobre...](https://robots.thoughtbot.com/autosquashing-git-commits)\n\n- Se você não tem conflitos, pule esse passo. Se você tem conflitos, [resolva-os](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/) e continue onrebase.\n\n  ```sh\n  git add <file1> <file2> ...\n  git rebase --continue\n  ```\n\n- Push sua branch. Rebase vai alterar a história, então você precisa usar `-f` para forçar a mudança no branch remoto. Se tem mais alguém trabalhando na mesma branch, use o comando `--force-with-lease`.\n\n  ```sh\n  git push -f\n  ```\n\n  _Por que?_\n\n  > Quando você faz rebase, você está mudando a história na sua feature branch. Então o git ira rejeitar seu `git push`. Para passar por isso você precisa usar -f ou --force flag. [Leia mais sobre...](https://developer.atlassian.com/blog/2015/04/force-with-lease/)\n\n- Abra um Pull Request.\n- Pull request deve ser aceito, mergiado e fechado por quem estiver revisando.\n- Delete seu branch local se tiver terminado.\n\n  ```sh\n  git branch -d <nome do branch>\n  ```\n\n  Para remover todos os branchs que não existem no repositório remoto:\n\n  ```sh\n  git fetch -p && for branch in `git branch -vv --no-color | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done\n  ```\n\n<a name=\"writing-good-commit-messages\"></a>\n\n### 1.3 Escrevendo boas mensagens de commit\n\nTer um bom padrão para criar commits e se atentar a ele faz com que trabalhar com Git e colaborar com outros seja muito mais fácil. Aqui estão algumas boas práticas ([fonte](https://chris.beams.io/posts/git-commit/#seven-rules)):\n\n- Separe o assunto e a mensagem com uma nova linha entre eles.\n\n  _Por que?_\n\n  > Git é inteligente o suficiente para identificar a primeira linha do seu commit como um resumo. Na verdade, se você tentar shortlog, ao invés de git log, você vai ver uma longa lista de mensagens de commits, com apenas o id e o resumo do commit.\n\n- Máximo de 50 caracteres para o assunto e 72 para a mensagem.\n\n  _Por que?_\n\n  > Commits devem ser objetivos e claros, não é o momento para ser verboso. [Leia mais sobre...](https://medium.com/@preslavrachev/what-s-with-the-50-72-rule-8a906f61f09c)\n\n- Capitalize a linha do assunto.\n- Não use um ponto para finalizar a linha do assunto.\n- Use [imperative mood](https://en.wikipedia.org/wiki/Imperative_mood) na linha do assunto.\n\n  _Por que?_\n\n  > É melhor que o commit diga o que vai acontecer no projeto depois daquele commit do que o que o que aconteceu dentro do commit em si. [Lei mais sobre...](https://news.ycombinator.com/item?id=2079612)\n\n* Use a mensagem para explicar **o que** e **porque** ao invés de **como**.\n\n<a name=\"documentation\"></a>\n\n## 2. Documentação\n\n![Documentation](/images/documentation.png)\n\n- Use esse [template](./README.sample.md) para `README.md`, sinta-se a vontade para adicionar seções que achar necessárias.\n- Para projetos com mais de um repositório adicione todos os respctivos links nos `README.md` de todos os projetos.\n- Mantenha o `README.md` enquanto o projeto evolui.\n- Comente seu código. Tente sempre deixar claro o que uma grande parte do código tem a intenção de fazer.\n- Se existe alguma referência em relação a forma como você resolveu o problema ou uma discussão em aberto, adicione os links.\n- Não use comentários como desculpa para fazer um código ruim. Mantenha seu código limpo.\n- Não use código limpo como uma desculpa para não fazer nenhum comentário.\n- Mantenha apenas os comentários relevantes enquanto o código evolui.\n\n<a name=\"environments\"></a>\n\n## 3. Ambientes\n\n![Environments](/images/laptop.png)\n\n- Defina ambientes de `desenvolvimento`, `testes` e `produção` separados.\n\n  _Por que?_\n\n  > Diferentes informações, dados, tokens, APIs, portas etc... podem ter que ser diferentes em cada ambiente. Você provavelmente vai querer isolar seu ambiente de `desenvolvimento` para fazer chamadas fake para a API que retornará dados previsíveis, tornando tanto os testes automatizados quanto os manuais muito mais facéis. Ou você pode querer ativar o Google Analytics apenas em `produção` e etc... [Leia mais sobre...](https://stackoverflow.com/questions/8332333/node-js-setting-up-environment-specific-configs-to-be-used-with-everyauth)\n\n* Carregue suas configurações específicas de deploy de variáveis de ambiente e nunca as adicione no seu codebase como constantes, [veja aqui um exemplo](./config.sample.js).\n\n  _Por que?_\n\n  > Você terá tokens, senhas e outras informações sigilosas nessa configuração. Sua configuração deve ser corretamente separada da sua aplicação como se seu codebase pudesse se tornar público a qualquer momento.\n\n  _Como?_\n\n  > Arquivos `.env` para manter suas variáveis e então adicione-o ao `.gitignore` para ser excluído. Ao invés, commit um `.env.example` que servirá de modelo para outros desenvolvedores. Para produção, você deve setar suas variáveis no jeito padrão. [Leia mais sobre...](https://medium.com/@rafaelvidaurre/managing-environment-variables-in-node-js-2cb45a55195f)\n\n* É recomendável validar suas variáveis de ambiente antes de inicializar sua aplicação. [De uma olhada nesse exemplo](./configWithTest.sample.js) usando `joi` para validar os valores.\n\n  _Por que?_\n\n  > Pode salvar todos de horas de \"dor de cabeça\".\n\n<a name=\"consistent-dev-environments\"></a>\n\n### 3.1 Ambientes de dev consistentes:\n\n- Defina sua versão do node em `engines` no `package.json`.\n\n  _Por que?_\n\n  > Permite que todos saibem em qual versão o projeto funciona. [Leia mais sobre...](https://docs.npmjs.com/files/package.json#engines)\n\n- Adicionalmente, use `nvm` e crie um arquivo `.nvmrc` na raíz do seu projeto. Não se esqueça de menciona-lo na sua documentação.\n\n  _Por que?_\n\n  > Qualque pessoa que usar `nvm` pode apenas rodar `nvm use` para trocar para a versão correta. [leia mais sobre...](https://github.com/creationix/nvm)\n\n- É uma boa ideia criar um script `preinstall` para conferir as versões do node e do npm.\n\n  _Por que?_\n\n  > Algumas dependências podem falhar quando instaladas por versões mais recentes do NPM.\n\n- Use Docker se puder.\n\n  _Por que?_\n\n  > Te dará um ambiente estável durante todo o workflow. Sem muita necessidade de lidar com dependências e configurações. [leia mais sobre...](https://hackernoon.com/how-to-dockerize-a-node-js-application-4fbab45a0c19)\n\n- Use local modules ao invés de modules instalados globalmente.\n\n  _Por que?_\n\n  > Você estará compartilhando suas dependências com os outros ao invés de esperar que eles a tenham instalado globalmente.\n\n<a name=\"consistent-dependencies\"></a>\n\n### 3.2 Dependências consistentes:\n\n- Garanta que seus colegas de equipe obtenham exatamente a mesma versão de dependências que você.\n\n  _Por que?_\n\n  > Porque você quer que se código tenha o mesmo comportamento em qualquer máquina de desenvolvimento [leia mais sobre...](https://medium.com/@kentcdodds/why-semver-ranges-are-literally-the-worst-817cdcb09277)\n\n  _Como?_\n\n  > Use `package-lock.json` a partir do `npm@5`\n\n  _E se eu não tenho npm@5?_\n\n  > Uma alternativa pode ser o `Yarn` e não se esqueça de mencionar o seu uso no `README.md`. Seu lock file e o `package.json` devem manter as mesmas versões após cada atualização. [leia mais sobre...](https://yarnpkg.com/en/)\n\n  _E se eu não gosto do nome `Yarn`?_\n\n  > Que pena. Para versões antigas do `npm`, use `—save --save-exact` quando instalando novas dependências e criando um `npm-shrinkwrap.json` antes de publicar. [Leia mais sobre...](https://docs.npmjs.com/files/package-locks)\n\n<a name=\"dependencies\"></a>\n\n## 4. Dependências\n\n![Github](/images/modules.png)\n\n- Acompanhe seus pacotes disponíveis atualmente: e.g., `npm ls --depth=0`. [Leia mais sobre...](https://docs.npmjs.com/cli/ls)\n- Confira se algum dos seus pacotes não está em uso ou se tornou irrelevante: `depcheck`. [Leia mais sobre...](https://www.npmjs.com/package/depcheck)\n\n  _Por que?_\n\n  > Você pode estar fazendo o bundle final ficar maior com bibliotecas não usadas. Identifique essas bibliotecas não usadas e se livre delas.\n\n- Antes de começar a usar uma dependência, confira o quanto ela é usada pela comunidade: `npm-stat`. [Leia mais sobre...](https://npm-stat.com/)\n\n  _Por que?_\n\n  > Maior uso geralmente significa mais contribuidores, o que leva a deduzir que possui melhor manutenção, o que tudo isso junto leva a concluir que bugs serão encontrados mais facilmente e resolvidos rapidamente.\n\n- Antes de usar uma dependência, confira se possui uma versão madura o suficiente com um grande número de pessoas mantendo: e.g., `npm view async`. [Leia mais sobre...](https://docs.npmjs.com/cli/view)\n\n  _Por que?_\n\n  > Ter muitos contribuidores não var ser tão efetivo se os mantenedores não fizerem os merge fixes e patches rápido.\n\n- Se você precisa de uma dependência menos conhecida, discuta com o time antes de usa-la.\n- Sempre tenha certeza que sua aplicação funciona com a ultima versão das dependências: `npm outdated`. [Leia mais sobre...](https://docs.npmjs.com/cli/outdated)\n\n  _Por que?_\n\n  > Atualização de dependência as vezes possuem 'breaking changes'. Sempre confira a descrição da nova versão sempre que sair, isso faz com que lidar com os possíveis problemas seja mais fácil. Use uma dessas ferramentas maneiras, como: [npm-check-updates](https://github.com/tjunnone/npm-check-updates).\n\n- Confira problemas de segurança com a dependência que você quer adicionar, e.g., [Snyk](https://snyk.io/test?utm_source=risingstack_blog).\n\n<a name=\"testing\"></a>\n\n## 5. Testes\n\n![Testes](/images/testing.png)\n\n- Tenha um ambiente the `test` se necessário\n\n  _Por que?_\n\n  > Embora algumas vezes testes end to end em `produção` possam parecer suficientes, existem algumas exceções: Um exemplo é que você não vai querer colocar dados analíticos em `produção` e assim poluir o dashboard de alguém com dados de teste. Outro exemplo é que sua API pode ter algumas limitações enquanto em `produção` e chamadas de teste depois de uma certa quantidade.\n\n- Coloque os arquivos de teste junto com os arquivos a serem testados usando a convenção `*.test.js` ou `*.spec.js` para nomear os arquivos, como `moduleName.spec.js`.\n\n  _Por que?_\n\n  > Você não quer ter que navegar em várias pastas para achar um teste unitário. [Leia mais sobre...](https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc)\n\n* Coloque seus arquivos de testes adicionais em uma pasta separada para evitar confusão.\n\n  _Por que?_\n\n  > Alguns arquivos de testes não tem nenhuma relação com qualquer outro arquivo. Você deve coloca-los em uma pasta fácil de ser encontrada pelos outros desenvolvedores do time, como por exemplo: Uma pasta `__test__`. Essa nomeação é padrão e reconhecida pela maioria de frameworks de teste de JavaScript.\n\n* Escreva código testável, evite efeitos colaterais (side effects), escreva funções puras\n\n  _Por que?_\n\n  > Você vai querer testar uma regra de negócio como uma unidade separada. Voce tem que \"minimizar o impacto de aleatoriedade e processos não determinísticos no seu código\". [Leia mais sobre...](https://medium.com/javascript-scene/tdd-the-rite-way-53c9b46f45e3)\n\n  > Uma função pura é uma função que sempre retorna o mesmo valor para uma entrada específica. Por outro lado, uma função impura é uma função que pode ter efeitos colaterais e depender de condições externas para retornar algum valor. Isso reduz a capacidade de prever o que o código vai realizar. [Leia mais sobre...](https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc)\n\n* Use uma checagem de tipo estática\n\n  _Por que?_\n\n  > As vezes você vai precisar de checagem de tipo estática. O que também aumenta a regidibilidade e legibilidade do seu código. [Leia mais sobre...](https://medium.freecodecamp.org/why-use-static-types-in-javascript-part-1-8382da1e0adb)\n\n- Rode os testes localmente antes de abrir um pull request para `develop`.\n\n  _Por que?_\n\n  > Você não quer ser a pessoa a fazer com que a branch com código pronto para produção pare de funcionar. Rode seus teste depois que fizer `rebase` e antes de fazer push para sua feature branch.\n\n- Documente seus testes incluindo instruções importantes em uma seção no arquivo `README.md`.\n\n  _Por que?_\n\n  > Vai ser de muita ajuda para outros desenvolvedores, DevOps, QA ou qualquer um que tiver a sorte de trabalhar com seu código.\n\n<a name=\"structure-and-naming\"></a>\n\n## 6. Nomes e estrutura\n\n![Structure and Naming](/images/folder-tree.png)\n\n- Organize seus arquivos considerando feature / páginas / componentes. E também, coloque os arquivos de teste próximos à implementação..\n\n  **Ruim**\n\n  ```\n  .\n  ├── controllers\n  |   ├── product.js\n  |   └── user.js\n  ├── models\n  |   ├── product.js\n  |   └── user.js\n  ```\n\n  **Bom**\n\n  ```\n  .\n  ├── product\n  |   ├── index.js\n  |   ├── product.js\n  |   └── product.test.js\n  ├── user\n  |   ├── index.js\n  |   ├── user.js\n  |   └── user.test.js\n  ```\n\n  _Por que?_\n\n  > Ao invés de uma longa lista de arquivos você estará criando pequenos modulos encapsulando responsabilidades e seus respectivos testes. Fica muito mais fácil de se navegar e as coisas podem ser facilmente encontradas.\n\n- Use uma pasta com o nome `./config` e **não** crie arquivos de configuração diferente para cada ambiente.\n\n  _Por que?_\n\n  > Quando você distribuí as configurações em arquivos com propósitos diferentes (database, API e etc); Coloca-los em uma pasta com o nome fácil de reconhecer como `config` faz sentido. Apenas se lembre de não criar arquivos de configuração diferentes para cada ambiente. Isso não escala, cada novo deploy diferente que se faz necessário, novos nomes de ambientes são criados.\n  > Valores para serem usados por arquivos de configuração devem ser providos através de variáveis de ambiente. [Leia mais sobre...](https://medium.com/@fedorHK/no-config-b3f1171eecd5)\n\n* Coloque seus scripts em uma pasta nomeada `./scripts`. Isso vale para `bash` e `node`.\n\n  _Por que?_\n\n  > É bem provável que você vai acabar com mais de um script, build de produção, build de dev, database feeders, database sync e etc...\n\n- Direcione os arquivos de output do build em uma pasta nomeada `./build`. Adicione `build/` no `.gitignore`.\n\n  _Por que?_\n\n  > Dê o nome que você achar conveniente, `dist` também é uma boa opção. Mas tenha a certeza de manter isso consistente com os projetos do time. Os arquivos que vão para essa pasta são gerados automaticamente (bundled, compiled, transpiled) ou movidos automaticamente para lá. O que você pode gerar, qualquer um no time deve ser capaz de gerar também, então não faz nenhum sentido comitar isso para o repositório. A não ser que você realmente queira muito fazer isso.\n\n<a name=\"code-style\"></a>\n\n## 7. Estilo de código\n\n![Code style](/images/code-style.png)\n\n<a name=\"code-style-check\"></a>\n\n### 7.1 Alguns padrões de estilo de código\n\n- Use stage-2 e sintaxe moderna de JavaScript nos seus novos projetos. Para os projetos antigos, mantenha a consistência, a não ser que modernizar o projeto seja o objetivo.\n\n  _Por que?_\n\n  > É claro, isso só depende de você. Nós usamos transpilers para tirar vantagem de novas sintaxes. stage-2 é bem provável de se tornar parte da especificação em alguma revisão.\n\n- Inclua alguma conferência automática de padrão de código no seu build.\n\n  _Por que?_\n\n  > Quebrar o build é uma forma de forçar os padrões de código. Evite que não seja levado a sério. Faça isso tanto para o backend quanto para o front. [Leia mais sobre...](https://www.robinwieruch.de/react-eslint-webpack-babel/)\n\n- Use [ESLint - Pluggable JavaScript linter](http://eslint.org/) para garantir que os padrões serão seguidos.\n\n  _Por que?_\n\n  > Nós simplesmente preferimos `eslint`, você não precisa necessariamente o usar. Ele tem mais regras suportadas, a possibilidade de configura-las e criar regras customizadas.\n\n- Nós usamos [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript) para JavaScript, [Leia mais sobre](https://www.gitbook.com/book/duk/airbnb-javascript-guidelines/details). Escolha os padrões necessário para seu projeto.\n\n- Usamos [Flow type style check rules for ESLint](https://github.com/gajus/eslint-plugin-flowtype) ao usar [FlowType](https://flow.org/).\n\n  _Por que?_\n\n  > Flow usa algumas sintaxes que também precisam de seguir um padrão.\n\n- Use `.eslintignore` para excluir os arquivos que devem ser ignorados pelas regras.\n\n  _Por que?_\n\n  > Você não precisa poluir seu código com comentários como `eslint-disable` toda vez que quiser desabilitar alguma regra em um certo arquivo.\n\n- Remova todos `eslint-disable` antes de fazer um pull request.\n\n  _Por que?_\n\n  > É normal desabilitar o `eslint` para focar na lógica de uma parte do código. Apenas se lembre de remover o `eslint-disable` quando terminar.\n\n- Dependendo do tamanho da task, use comentários com `//TODO:` para ajudar na criação de novas tasks para o backlog.\n\n  _Por que?_\n\n  > Você vai deixar um lembrete para os outros, e para você mesmo, de pequenas tarefas ou correções (como refatorar uma função ou atualizar um comentário). Para tarefas maiores escreva `//TODO(#3456)` fazendo referência ao ticket aberto no backlog para aquela task.\n\n* Sempre faça comentários relevantes. Delete código morto ou comentado.\n\n  _Por que?_\n\n  > Você deve prezar pela legibilidade do seu código, então se livre de qualquer distração possível no código. Se você refatorou uma função, não deixe a antiga lá apenas comentada, delete-a.\n\n* Evite comentários irrelevantes, engraçados ou ofensivos.\n\n  _Por que?_\n\n  > Mesmo que seu processo de build possa remove-los, as vezes seu código pode ser pego por alguém diferente, uma empresa terceirizada ou um chefe de outra área e isso pode não ser tão tranquilo.\n\n* Use nomes com significados, fáceis de pesquisar e sem abreviações para suas variáveis ou funções. O nome de uma função deve ser um verbo ou uma frase e precisa de deixar claro a sua intenção.\n\n  _Por que?_\n\n  > Faz com que o seu código seja mais legível e natual.\n\n<a name=\"enforcing-code-style-standards\"></a>\n\n### 7.2 Force o code style\n\n- Use o arquivo [.editorconfig](http://editorconfig.org/) para ajudar a definir e manter a consistência de estilo de código entre diferentes editores e IDE.\n\n  _Por que?_\n\n  > O EditorConfig consiste em um arquivo para edição de estilo de código e declaração de plugins para habilitar o editor a ler os arquivos em um determinado formato e formatá-los de acordo com o esperado. EditorConfig são fáceis de ler e funcionam muito bem com sistemas de controle de versão.\n\n- Configure seu editor para alertar sobre erros de estilo de código. Use [eslint-plugin-prettier](https://github.com/prettier/eslint-plugin-prettier) e [eslint-config-prettier](https://github.com/prettier/eslint-config-prettier) com seu arquivo ESLint já existente. [Leia mais sobre...](https://github.com/prettier/eslint-config-prettier#installation)\n\n- Considere usar Git Hooks.\n\n  _Por que?_\n\n  > Git hooks aumentam de forma expressiva a produtividade do desenvolvedor. Faça alterações, commit e push sem o medo de quebrar o código pronto para produção. [Leia mais sobre...](http://githooks.com/)\n\n- Use Prettier com o precommit hook.\n\n  _Por que?_\n\n  > O `prettier` por si só pode ser bem poderoso porém, não é muito produtivo rodar uma npm task sozinha toda hora só para formatar o código. É então que o `lint-staged` (e o `husky`) entram em ação. Leia mais sobre como configurar o `lint-staged` [aqui](https://github.com/okonet/lint-staged#configuration) e sobre o `husky` [aqui](https://github.com/typicode/husky).\n\n<a name=\"logging\"></a>\n\n## 8. Logging\n\n![Logging](/images/logging.png)\n\n- Evite console logs no client-side em produção\n\n  _Por que?_\n\n  > Mesmo que o seu processo de compilação possa (e deva) se livrar deles, certifique-se de que seu lint de código avise sobre os console logs restantes.\n\n- Crie logs de produção legíveis. O ideal é utilizar bibliotecas de log em produção (como, por exemplo [winston](https://github.com/winstonjs/winston) ou\n  [node-bunyan](https://github.com/trentm/node-bunyan)).\n\n      _Por que?_\n      > Ele torna sua solução de problemas mais agradável com sistema de cores, data e hora, registra em um arquivo além do console e até mesmo pode atualizar o arquivo diariamente. [saiba mais...](https://blog.risingstack.com/node-js-logging-tutorial/)\n\n<a name=\"api\"></a>\n\n## 9. API\n\n<a name=\"api-design\"></a>\n\n![API](/images/api.png)\n\n### 9.1 API design\n\n_Por que?_\n\n> Queremos promover o desenvolvimento de RESTful interfaces bem construídas, fazendo com que o consumo por clientes e pelo time seja simples e consistente.\n\n_Por que?_\n\n> Falta de consistência e simplicidade podem aumentar de forma expressiva os custos de manutenção e integração. E por isso `API design` está nesse documento.\n\n- Devemos seguir o padrão orientado a recursos. O qual tem 3 principais fatore: recursos, coleções, e URLs.\n\n  - Um recurso possui dados, gets aninhados, e methods para permitir operações.\n  - Um grupo de recursos é chamado coleção.\n  - URL identifica a localização online de um recurso ou coleção.\n\n  _Por que?_\n\n  > Esse é um padrão muito bem conhecido por desenvolvedores (os principais consumidores de sua API). Fora o fato de ser fácil de usar e ler, permite-nos escrever bibliotecas genéricas e conectores sem ao menos precisar saber sobre o que a API é.\n\n- use kebab-case para as URLs.\n- use camelCase para os parâmetros na query string ou campo de recursos.\n- use o plural do kebab-case nome dos recursos na URL.\n\n- Sempre use o plural para nomear algum recurso na URL ou coleção: `/users`.\n\n  _Por que?_\n\n  > Basicamente, é melhor para ler e torna a URL mais consistente. [Leia mais sobre...](https://apigee.com/about/blog/technology/restful-api-design-plural-nouns-and-concrete-names)\n\n- No código fonte, converta plurais para variáveis e propriedades com uma lista de sufixos.\n\n  _Por que?_\n\n  > Plural é interessante para URLs mas no código é muito sucetível a erros.\n\n- Sempre use um conceito singular que comece com a coleção e termine com um identificador:\n\n  ```\n  /students/245743\n  /airports/kjfk\n  ```\n\n- Evite URLs como:\n\n  ```\n  GET /blogs/:blogId/posts/:postId/summary\n  ```\n\n  _Por que?_\n\n  > Isso não está apontando para um recurso mas, para uma propriedade. Você pode passar a propriedade como um parâmetro para encurtar a resposta.\n\n- Matenha as URLs de recursos sem verbos.\n\n  _Por que?_\n\n  > Porque se você usar verbos para cada operação em um recurso você vai acabar com uma lista enorme de URLs e nenhum padrão consistente, o que torna difícil para desenvolvedores lerem. Além disso, nos usamos verbos para outra situação.\n\n- Use verbos para 'não recursos'. Nesse caso, sua API não retorna nenhum recurso. Ao invés, você executa uma operação que retorna um resultado. Essas **não são** operações de um CRUD (criar, ler, atualizar, e deletar):\n\n  ```\n  /translate?text=Hallo\n  ```\n\n  _Por que?_\n\n  > Porque para CRUD nos usamos os métodos HTTP nos `recursos` ou `coleções`. Os verbos que estamos falando são literalmente `Controllers`. Você geralmente não chega a desenvolver muito deles. [Leia mais sobre...](https://byrondover.github.io/post/restful-api-guidelines/#controller)\n\n- Use `camelCase` para as propriedades no `JSON` das requisições e da repostas do servidor para manter a consistência.\n\n  _Por que?_\n\n  > Esse é um padrão de projeto para JavaScript, onde a linguagem usada para gerar e parsear JSON é, em teoria, JavaScript.\n\n- Mesmo que um recurso seja um conceito singular, similar à uma instância ou registro do banco de dados, você não deve usar `nome_da_tabela` para o nome de um recurso e `nome_da_coluna` para a propriedade de um recurso.\n\n  _Por que?_\n\n  > Porque sua intenção é expor os recursos, não detalhes do schema do seu banco de dados.\n\n- Novamente, apenas use substantivos quando nomeando a URL de um recurso e não tente explicar a funcionalidade.\n\n  _Por que?_\n\n  > Apenas use substantivos nos recursos na URL, evite coisas como `/addNewUser` ou `/updateUser`. Também, evite enviar operações sobre os recursos como parâmetros.\n\n- Explicite as operações de CRUD usando funcionalidades do métodos HTTP:\n\n  _Como:_\n\n  > `GET`: Para obter/recuperar um recurso.\n\n  > `POST`: Para criar um novo recurso ou sub-recurso.\n\n  > `PUT`: Para atualizar recursos existentes.\n\n  > `PATCH`: Para atualizar recursos existentes. Atualiza apenas os campos enviados deixando as outras propriedades como eram.\n\n  > `DELETE`: Para deletar um recurso existente.\n\n* Para recursos aninhados, use a relação entre eles e a URL. Por exemplo, usando `id` para se referir a um usuário específico.\n\n  _Por que?_\n\n  > Esse é um jeito natural de tornar os recursos fáceis de explorar.\n\n  _Como?_\n\n  > `GET /schools/2/students` , Deve obter a lista de estudantes da escola com ID 2.\n\n  > `GET /schools/2/students/31` , Deve obter os detalhes do estudante 31, que pertence a escola 2.\n\n  > `DELETE /schools/2/students/31` , Deve deletar o estudante 31, que pertence a escola 2.\n\n  > `PUT /schools/2/students/31` , Deve atualizar as informações do estudante 31, Use PUT apenas para URL de recursos, não para coleções.\n\n  > `POST /schools` , Deve criar uma nova escola e retornar os detalhes da nova escola criada. Use POST em URL de coleções.\n\n* Use um simples número ordinal para a versão com o prefixo `v` (v1, v2). Coloque a versão à esquerda de todos URL da api:\n\n  ```\n  http://api.domain.com/v1/schools/3/students\n  ```\n\n  _Por que?_\n\n  > Quando suas APIs são públicas, atualizar a API com alguma mudança que quebra o funcionamento antigo (Breaking Change) pode levar ao mal funcionamento de vários produtos e serviços que dependem da sua API. Usnado versões na URL você previne isso de acontecer. [Leia mais sobre...](https://apigee.com/about/blog/technology/restful-api-design-tips-versioning)\n\n- Messagens das respostas devem ser auto descritivas. Uma boa mensagem de erro deve ser algo parecido com:\n\n  ```json\n  {\n  \t\"code\": 1234,\n  \t\"message\": \"Algo de errado aconteceu\",\n  \t\"description\": \"Mais detalhes\"\n  }\n  ```\n\n  Ou para validação de erros:\n\n  ```json\n  {\n  \t\"code\": 2314,\n  \t\"message\": \"Validação Falhou\",\n  \t\"errors\": [\n  \t\t{\n  \t\t\t\"code\": 1233,\n  \t\t\t\"field\": \"email\",\n  \t\t\t\"message\": \"Email inválido\"\n  \t\t},\n  \t\t{\n  \t\t\t\"code\": 1234,\n  \t\t\t\"field\": \"password\",\n  \t\t\t\"message\": \"Senha em branco\"\n  \t\t}\n  \t]\n  }\n  ```\n\n  _Por que?_\n\n  > Desenvolvedores dependem de erros bem descritivos em momentos críticos quando eles estão com dificuldades resolvendo problemas da aplicação que eles construíram usando sua API.\n\n  _Nota: Mantenha mensagens relacionadas a exceções de segurança o mais genéricas possível. Por exemplo, ao invés de 'Senha incorreta', você pode responder dizendo 'Usuário ou senha inválidos' para que não vaze informações sobre dados corretos que não deveriam ser conhecido por terceiros._\n\n- Use códigos de status para enviar e descrever suas respostas ao invés de **tudo funcionou corretamente**,\n  **App do cliente fez algo errado** ou A **API fez algo errado**.\n\n  _Quais?_ > `200 OK` resposta de sucesso para requisições `GET`, `PUT` ou `POST`.\n\n      > `201 Created` para quando uma nova instância é criada. Criar uma nova instância usando `POST` deve retornar o código de status `201`.\n\n      > `204 No Content` resposta representa sucesso porém não tem nenhum conteúdo para ser enviado na resposta. Use quando operações com `DELETE` são bem sucedidas.\n\n      > `304 Not Modified` resposta para minimizar informações trafegadas quando o \"requerente\" já possui os dados em cache.\n\n      > `400 Bad Request` para quando a requisição não foi processada, como por exemplo quando o servidor não compreendeu o conteúdo da requisição.\n\n      > `401 Unauthorized` para quando a requisição não possui credenciais suficientes para ser executada.\n\n      > `403 Forbidden` siginifica que o servidor entendeu a requisição mas se recusa a realizá-la.\n\n      > `404 Not Found` indica que o recurso da requisição não foi encontrado.\n\n      > `500 Internal Server Error` indica que a requisição foi recebida mas devida à algum erro interno a requisição não pode ser completada.\n\n      _Por que?_\n\n      > A maioria das APIs fornecem um algum subconjunto de códigos de status HTTP. Por exemplo, a API do Google GData usa apenas 10 códigos, Netflix usa 9, e Digg, apenas 8. Evidente que essas requisições possuem dados com informações adicionais. Existem mais de 70 códigos de status HTTP. De qualquer forma, A maioria dos desenvolvedores não tem todos memorizados. Então se você escolher códigos que não são muito comuns pode assustar e repelir desenvolvedores de usar sua API. [Leia mais sobre...](https://apigee.com/about/blog/technology/restful-api-design-what-about-errors)\n\n* Forneça o número total de recursos na sua resposta.\n* Aceite `limit` e `offset` como parâmetros.\n* A quantidade de dados que os recursos expõem deve ser levado em consideração. O consumidor da API nem sempre precisa ter uma representação completa do recurso. Use `fields` na query string para filtrar propriedades a serem enviadas:\n  ```\n  GET /student?fields=id,name,age,class\n  ```\n* Paginação, filtragem e ordenação não precisam ser suportadas inicialmente para todos os recursos. Documente os recursos que oferecem tais funcionalidades.\n\n<a name=\"api-security\"></a>\n\n### 9.2 API security\n\nAlgumas boas práticas básicas de segurança:\n\n- Não use autenticação básica a não ser sob uma conexão HTTPS. Tokens de autenticação não devem ser enviados na URL: `GET /users/123?token=asdf....`\n\n  _Por que?_\n\n  > Porque tokens ou ID de usuário e senha são enviados pela rede como texto (encoded como base64, mas base64 é um encoding reversível), o esquema básico de autenticação não é seguro [Leia mais sobre...](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication)\n\n- Tokens devem ser enviados fazendo uso do header `Authorization` em todas as requisições: `Authorization: Bearer xxxxxx, Extra yyyyy`.\n\n- Códigos de autorização devem ter \"tempo de vida curto\".\n\n- Rejeite qualquer requisição não-TLS não respondendo nenhuma requisição HTTP para evitar vazamento de dados. Apenas responda `403 Forbidden`.\n\n- Considere usar Limite de requisições.\n\n  _Por que?_\n\n  > Para proteger sua API de requisições maliciosas repetidas milhares de vezes por hora. Você deve considerar implementar Limite de requisições o mais cedo possível.\n\n- Configurando os headers HTTP corretamente pode te ajudar a protejer sua aplicação web. [Leia mais sobre...](https://github.com/helmetjs/helmet)\n\n- Sua API deve converter os dados recebidos para sua forma canônica ou rejeita-los. Retrone status `400 Bad Request` com detalhes sobre os de dados errados ou faltantes.\n\n- Todos os dados trocados com a API REST devem ser validados pela API.\n\n- Serialize seu JSON.\n\n  _Por que?_\n\n  > Uma das principais preocupações lidando com JSON encoders é previnir JavaScript malicioso de ser executado no browser... Ou, se você está usando `node.js`, no servidor. É vital usar JSON corretamente serializados para evitar a execução de código enviado como input pelo broswer.\n\n- Valide o content-type e na maioria dos casos use `application/*json` (Content-Type header).\n\n  _Por que?_\n\n  > Por exemplo, aceitando `application/x-www-form-urlencoded` mime type permite que alguém com má intenções crie um form e execute uma simple requisição POST. O servidor nunca deve tentar adivinhar o Content-Type. A falta do Content-Type ou um Content-Type inesperado deve resultar no servidor recusando a request com um erro `4XX` na resposta.\n\n- Confira o checklist de segurança para um projeto de API. [Leia mais sobre...](https://github.com/shieldfy/API-Security-Checklist)\n\n<a name=\"api-documentation\"></a>\n\n### 9.3 API documentation\n\n- Complete a seção `API Reference` no [README.md Template](./README.sample.md) para sua API.\n- Descreva os métodos de autenticação da sua API com exemplos de código.\n- Explique a estrutura de recursos da sua URL (apenas o caminho do recurso) incluindo o tipo de request (Método).\n\nPara cada `endpoint` explique:\n\n- Parâmetros da URL se existirem, especifique de acordo com os nomes na descritos na seção de URL:\n\n  ```\n  Required: id=[integer]\n  Optional: photo_id=[alphanumeric]\n  ```\n\n- Se o tipo da requisiçõa é POST, forneça alguns exemplos de código. Essa regra se aplica para parâmetros de URL também. Separe a seção entre `Requeridos` e `Opcionais`.\n\n- Resposta de sucesso, qual deveria ser o código de status e tem algum dado à ser retornado junto? Isso é útil quando as pessoas precisam saber o que os seus `callbacks` devem esperar:\n\n  ```\n  Code: 200\n  Content: { id : 12 }\n  ```\n\n- Mensagens de erro, a maioria dos `endpoints` possuem várias maneiras de falhar. De acesso negado à parâmetros errados e etc. Todos devem ser listados. Pode parecer repetitivo, mas ajuda a previnir que desenvolvedores tentem prever o que vai acontecer. Por exemplo\n- ```json\n  {\n  \t\"code\": 403,\n  \t\"message\": \"Authentication failed\",\n  \t\"description\": \"Invalid username or password\"\n  }\n  ```\n\n* Use ferramentas de design de API, existem muitas ferramentas de código aberto para uma boa documentação como [API Blueprint](https://apiblueprint.org/) e [Swagger](https://swagger.io/).\n\n<a name=\"licensing\"></a>\n\n## 10. Licença\n\n![Licensing](/images/licensing.png)\n\nTenha certeza de usar recursos aos quais você possui o direito de uso. Se você usa bibliotecas, lembre-se de procurar por MIT, Apache ou BSD mas se você precisa modifica-las, então confira nos detalhes da licença. Imagens e vídeos com copyright podem te causar problemas.\n\n---\n\nFontes:\n[RisingStack Engineering](https://blog.risingstack.com/),\n[Mozilla Developer Network](https://developer.mozilla.org/),\n[Heroku Dev Center](https://devcenter.heroku.com),\n[Airbnb/javascript](https://github.com/airbnb/javascript),\n[Atlassian Git tutorials](https://www.atlassian.com/git/tutorials),\n[Apigee](https://apigee.com/about/blog),\n[Wishtack](https://blog.wishtack.com)\n\nIcons by [icons8](https://icons8.com/)\n"
        },
        {
          "name": "README-ru.md",
          "type": "blob",
          "size": 69.15234375,
          "content": "[中文版](./README-zh.md)\n| [日本語版](./README-ja.md)\n| [한국어](./README-ko.md)\n| [English](./README.md)\n| [Português](./README-pt-BR.md)\n| [Persian/فارسی](./README-ir.md)\n\n[<img src=\"./images/elsewhen-logo.png\" width=\"180\" height=\"180\">](https://www.elsewhen.com/)\n\n# Советы по созданию проектов &middot; [![ПРы приветствуются](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n\n> Тогда как для некоторых разработка нового проекта - это прогулка по парку, то для других поддержка этого проекта - полнейший кошмар.\n> Здесь представлен список советов, которые мы нашли, написали, собрали и которые, как мы думаем, прекрасно подходят к большинству JavaScript проектов в [elsewhen](https://www.elsewhen.com).\n> Если вы хотите поделиться лучшей практикой или считаете, что какой-нибудь из советов стоит убрать, [можете спокойно сообщить нам об этом](http://makeapullrequest.com).\n\n🔥 [Попробуйте](https://github.com/elsewhencode/react-redux-saucepan) наш [минималистичный react redux проект](https://github.com/elsewhencode/react-redux-saucepan) на Flow с горячей заменой кода (hot reloading) и серверным рендерингом (SSR, server-side rendering).\n\n<hr>\n\n- [Git](#git)\n  - [Правила работы с Git](#some-git-rules)\n  - [Рабочий процесс в Git](#git-workflow)\n  - [Пишем хорошее сообщение коммита](#writing-good-commit-messages)\n- [Документация](#documentation)\n- [Окружения](#environments)\n  - [Консистентные dev окружения](#consistent-dev-environments)\n  - [Консистентные зависимости](#consistent-dependencies)\n- [Зависимости](#dependencies)\n- [Тестирование](#testing)\n- [Структура и Именование](#structure-and-naming)\n- [Оформление кода](#code-style)\n  - [Советы по оформлению кода](#code-style-check)\n  - [Обеспечение определенного стиля кода](#enforcing-code-style-standards)\n- [Логирование](#logging)\n- [API](#api)\n  - [Дизайн API](#api-design)\n  - [Безопасность API](#api-security)\n  - [Документация API](#api-documentation)\n- [Лицензирование](#licensing)\n\n<a name=\"git\"></a>\n\n## 1. Git\n\n![Git](/images/branching.png)\n\n<a name=\"some-git-rules\"></a>\n\n### 1.1 Правила работы с Git\n\nНабор правил, которые следует иметь ввиду:\n\n- Разрабатывайте в `feature/*` ветке.\n\n  _Зачем:_\n\n  > Таким образом вся работа выполняется изолированно в отдельной ветке, а не в главной. Это позволит создать множество запросов на слияние (pull requests) без путаницы. Вы можете продолжить разработку без загрязнения `master` ветки потенциально нестабильным и незаконченным кодом. [узнать больше...](https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow)\n\n- Откалывайте ветку от `develop`\n\n  _Зачем:_\n\n  > Чтобы быть уверенным, что код в `master` ветке практически всегда собирается без проблем, и, в основном, может быть использован для релизов (это может быть излишним для некоторых проектов).\n\n- Никогда не выкладывайте (push) коммиты напрямую в `develop` или `master` ветки. Создавайте Запрос на Слияние (Pull Request).\n\n  _Зачем:_\n\n  > Так члены команды получат оповещение, что работа над новой функцией (feature) завершена. Также это облегчит процесс рецензирования кода (code review) и предоставит площадку для обсуждения предложенной функции.\n\n- Обновляйте вашу локальную `develop` ветку и делайте интерактивное перебазирование (rebase) перед тем как выкладывать (push) свою новую функцию и создавать Запрос на Слияние (Pull Request).\n\n  _Почему:_\n\n  > Перебазирование сольет (merge) коммиты из запрошенной ветки (`master` или `develop`) в текущую и вставит те, которые вы сделали локально, в самый конец истории без создания коммита слияния (merge commit), если не возникнут конфликты. В результате чего получим линейную и чистую историю изменений. [узнать больше...](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)\n\n- Разрешите потенциальные конфликты в процессе перебазирования (rebase) перед тем как создавать Запрос на Слияние (Pull Request).\n- Удалите локальные и удаленные (remote) ветки после сливания (merge).\n\n  _Зачем:_\n\n  > Чтобы не загромождать ваш список веток мертвыми ветками. Это гарантирует, что вы сольете (merge) вашу ветку обратно (`master` или `develop`) только один раз. `feature/*` ветки должны существовать пока не будет завершена разработка.\n\n- Перед созданием Запроса на Слияние (Pull Request) убедитесь, что ваша `feature/*` ветка успешно собирается и все тесты проходят успешно, включая проверки на оформление кода.\n\n  _Зачем:_\n\n  > Вы собираетесь добавить ваш код в стабильную ветку. Если тесты в вашей `feature/*` ветке не проходят, то с большой долей вероятности стабильная ветка тоже не сможет собраться. Дополнительно надо будет запустить проверку на оформление кода перед созданием Запроса на Слияние (Pull Request). Это улучшит читаемость кода и уменьшит шанс, что изменения в оформлении смешаются с реальными изменениями.\n\n- Используйте [этот](./.gitignore) `.gitignore` файл.\n\n  _Почему:_\n\n  > Он уже включает в себя список системных файлов, которые не надо посылать вместе с вашим кодом в удаленный репозиторий. К тому же он исключает не только файлы и папки с настройками для большинства используемых редакторов кода, но и самые распространенные папки с зависимостями.\n\n- Обезопасьте ваши `develop` и `master` ветки.\n\n  _Зачем:_\n\n  > Это защитит ваши готовые для релиза ветки от получения неожиданных и необратимых изменений. Узнать больше: [Github](https://help.github.com/articles/about-protected-branches/), [Bitbucket](https://confluence.atlassian.com/bitbucketserver/using-branch-permissions-776639807.html) и [GitLab](https://docs.gitlab.com/ee/user/project/protected_branches.html)\n\n<a name=\"git-workflow\"></a>\n\n### 1.2 Рабочий процесс в Git\n\nИсходя из большинства причин, описанных выше, стоит использовать [Рабочий процесс с использованием `feature/*` ветки](https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow) с [Интерактивным Перебазированием (rebase)](https://www.atlassian.com/git/tutorials/merging-vs-rebasing#the-golden-rule-of-rebasing) и некоторые элементы [Gitflow](https://www.atlassian.com/git/tutorials/comparing-workflows#gitflow-workflow) (наименования и использование develop ветки). Основные шаги следующие:\n\n- Для нового проекта инициализируем git репозиторий в папке с проектом. **Для последующих новых функций/изменений этот шаг нужно игнорировать**.\n\n  ```sh\n  cd <project directory>\n  git init\n  ```\n\n- Создаем новую `feature/bug-fix` ветку.\n\n  ```sh\n  git checkout -b <branchname>\n  ```\n\n- Делаем изменения.\n\n  ```sh\n  git add <file1> <file2> ...\n  git commit\n  ```\n\n  _Пояснение:_\n\n  > `git add <file1> <file2> ... ` - необходимо добавлять только те файлы, которые вносят небольшие и последовательные изменения.\n\n  > `git commit` запустит редактор, который позволит разделить в сообщении коммита краткое описание от полного.\n\n  > Больше об этом в [_разделе 1.3_](#writing-good-commit-messages).\n\n  _Совет:_\n\n  > Также вместо `git add` вы можете использовать `git add -p`, который позволит последовательно просмотреть изменения, представленные в коммите, и решить - включать их в коммит или нет.\n\n- Синхронизируйтесь с удаленным репозиторием, чтобы получить изменения, которые вы пропустили.\n  ```sh\n  git checkout develop\n  git pull\n  ```\n  _Зачем:_\n  > Это даст вам шанс решить конфликты на вашей локальной машине во время перебазирования (rebase) перед созданием Запроса на Слияние (Pull Request), содержащего конфликты.\n- Вливайте в вашу `feature/*` ветку последние изменения из `develop` ветки, используя интерактивное перебазирование (rebase).\n  ```sh\n  git checkout <branchname>\n  git rebase -i --autosquash develop\n  ```\n  _Пояснение:_\n  > Вы можете использовать `--autosquash`, чтобы объединить ваши коммиты в один. Никто не хочет создавать множество коммитов ради одной новой функции в `develop` ветке. [узнать больше...](https://robots.thoughtbot.com/autosquashing-git-commits)\n- Если у вас нет конфликтов, пропустите этот шаг. Если же они возникли, [решите их](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/) и продолжайте перебазирование (rebase).\n\n  ```sh\n  git add <file1> <file2> ...\n  git rebase --continue\n  ```\n\n- Отправьте (push) вашу ветку в удаленный репозиторий. Перебазирование (rebase) меняет историю коммитов, поэтому вам придется использовать `-f`, чтобы форсировать изменения в удаленную ветку. Если кто-то еще работает в вашей ветке, используйте менее деструктивный флаг `--force-with-lease`.\n  ```sh\n  git push -f\n  ```\n  _Почему:_\n  > Когда вы делаете перебазирование (rebase), вы меняете историю вашей `feature/*` ветки. Как результат, Git отклонит обычный `git push`. Поэтому вам надо использовать флаг `-f` или `--force`. [узнать больше...](https://developer.atlassian.com/blog/2015/04/force-with-lease/)\n- Создайте Запрос на Слияние (Pull Request).\n\n- Запрос на Слияние (Pull Request) будет принят, слит (merge) и закрыт рецензентом.\n\n- Удалите вашу локальную `feature/*` ветку, если работа в ней завершена.\n\n  ```sh\n  git branch -d <branchname>\n  ```\n\n  Удалите все локальные ветки, которых больше нет в удаленном репозитории.\n\n  ```sh\n  git fetch -p && for branch in `git branch -vv --no-color | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done\n  ```\n\n<a name=\"writing-good-commit-messages\"></a>\n\n### 1.3 Пишем хорошее сообщение коммита\n\nХороший гайдлайн по создании коммитов и следование ему облегчит работу с Git и сотрудничество с другими разработчиками. Вот несколько правил большого пальца ([источник](https://chris.beams.io/posts/git-commit/#seven-rules)):\n\n- Разделите краткое описание коммита от основного, используя разрыв строки между ними.\n\n  _Зачем:_\n\n  > Git достаточно умный, чтобы распознавать первую строку вашего сообщения коммита, как краткое описание. По факту, если вы попробуете `git shortlog` вместо `git log`, вы увидите длинный список сообщений коммитов, состоящий только из идентификатора (id) коммита и краткого описания.\n\n- Ограничьте краткое описание 50 символами, а основное описание - 72 символами.\n\n  _Зачем:_\n\n  > Коммиты должны быть краткими и максимально сфокусированными; это не место для многословия. [узнать больше...](https://medium.com/@preslavrachev/what-s-with-the-50-72-rule-8a906f61f09c)\n\n- Начните краткое описание с заглавной буквы.\n\n- Не заканчивайте краткое описание точкой.\n\n- В кратком описании используйте [повелительное наклонение](https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%B2%D0%B5%D0%BB%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D0%BD%D0%B0%D0%BA%D0%BB%D0%BE%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5).\n\n  _Почему:_\n\n  > Вместо того, чтобы писать в сообщениях что сделал разработчик, лучше относиться к этим сообщениям, как к инструкциям что произойдет после того, как коммит попадет в ветку. [узнать больше...](https://news.ycombinator.com/item?id=2079612)\n\n- Используйте основное описание, чтобы объяснить **что** и **почему** вместо **как**.\n\n<a name=\"documentation\"></a>\n\n## 2. Документация\n\n![Документация](/images/documentation.png)\n\n- Используйте этот [шаблон](./README.sample.md) для `README.md`, свободно добавляйте отсутствующие разделы.\n- Для проектов с множеством репозиториев укажите ссылки на них в соответствующих `README.md` файлах.\n- Постоянно обновляйте `README.md` по мере развития проекта.\n- Пишите комментарии в коде. Старайтесь сделать код максимально прозрачным, чтобы было понимание что именно задумывалось в каждом основном фрагменте.\n- Если открыта дискуссия на github или stackoverflow по поводу кода или подхода, который вы используете, оставьте ссылку на эту дискуссию в вашем комментарии.\n- Не используйте комментарии в качестве оправдания плохого кода. Сохраняйте ваш код в чистоте.\n- Не используйте чистый код в качестве оправдания полного отсутствия комментариев.\n- Обновляйте ваши комментарии по мере развития проекта.\n\n<a name=\"environments\"></a>\n\n## 3. Окружения\n\n![Окружения](/images/laptop.png)\n\n- Определите отдельные `development`, `test` и `production` окружения, если есть такая необходимость.\n\n  _Зачем:_\n\n  > Различные данные, токены, API, порты и т.п. могут быть использованы в разных окружениях. Например, вам может понадобиться изолированный `development` режим, для того чтобы вызывать тестовое API, которое будет возвращать предсказуемые данные, делая автоматическое и ручное тестирование в разы проще. Или вам нужна Google аналитика (Google Analytics) только в `production` окружении и т.д. [узнать больше...](https://stackoverflow.com/questions/8332333/node-js-setting-up-environment-specific-configs-to-be-used-with-everyauth)\n\n- Загружайте ваши специфичные для развертывания конфигурации из переменных окружения и никогда не добавляйте их, как константы, в код проекта. [Пример файла](./config.sample.js).\n\n  _Почему:_\n\n  > Вы храните токены, пароли и другую важную информацию в конфигурации. Ваша конфигурация должна быть корректно отделена от основной части приложения, как будто ваш код может стать публичным в любое время.\n\n  _Как:_\n\n  > Используйте `.env` файлы для хранения важных данных. Обязательно добавьте их в `.gitignore`, чтобы исключить попадание в Git, взамен создайте коммит с `.env.example` файлом, который будет служить как шаблон для разработчиков. Для релизного стенда вы должны устанавливать переменные окружения стандартным методом.\n  > [узнать больше...](https://medium.com/@rafaelvidaurre/managing-environment-variables-in-node-js-2cb45a55195f)\n\n- Рекомендуется валидировать переменные окружения перед запуском приложения. [Данный пример](./configWithTest.sample.js) использует `joi` для валидации представленных параметров.\n  _Зачем:_\n  > Это поможет сэкономить другим часы поиска проблемы.\n\n<a name=\"consistent-dev-environments\"></a>\n\n### 3.1 Консистентные dev окружения:\n\n- Установите вашу версию Node.js в `engines` в файле `package.json`.\n\n  _Зачем:_\n\n  > Это позволит другим разработчикам узнать, какая версия Node.js используется в проекте. [узнать больше...](https://docs.npmjs.com/files/package.json#engines)\n\n- Дополнительно используйте `nvm` и создайте `.nvmrc` в корне вашего проекта. Не забудьте упомянуть это в документации.\n\n  _Зачем:_\n\n  > Любой, кто использует `nvm`, сможет спокойно вызвать `nvm use`, чтобы переключиться на подходящую версию Node.js. [узнать больше...](https://github.com/creationix/nvm)\n\n- Хорошей идеей будет настроить `preinstall` скрипт, который будет проверять версии Node.js и npm.\n\n  _Почему:_\n\n  > Некоторые зависимости могут не установиться при использовании новых версий npm.\n\n- Используйте Docker образ, если можете.\n\n  _Зачем:_\n\n  > Это даст вам консистентное окружение во всем рабочем процессе. Без необходимости копаться с зависимостями и конфигами. [узнать больше...](https://hackernoon.com/how-to-dockerize-a-node-js-application-4fbab45a0c19)\n\n- Используйте локальный модули вместо глобально установленных.\n\n  _Почему:_\n\n  > Если вы будете использовать глобальные модули, то вам будет сложно поделиться вашим инструментом с коллегами, так как на их системах должны будут установлены эти же модули. Локально модули решают эту задачу путем автоматического добавления всех необходимых зависимостей при установке инструмента.\n\n<a name=\"consistent-dependencies\"></a>\n\n### 3.2 Консистентные зависимости:\n\n- Убедитесь, что ваши коллеги получат точно такие же зависимости, что и вы.\n\n  _Почему:_\n\n  > Потому что код должен вести себя предсказуемо и идентично тому, как он выполняется на машине разработчика. [узнать больше...](https://medium.com/@kentcdodds/why-semver-ranges-are-literally-the-worst-817cdcb09277)\n\n  _Как:_\n\n  > Используйте `package-lock.json` в `npm@5` или версией выше.\n\n  _Если нет npm@5:_\n\n  > То вы можете использовать `Yarn`, но не забудьте упомянуть об этом в `README.md`. Файлы `yarn.lock` и `package.json` должны содержать одни и те же версии после каждого обновления зависимостей. [узнать больше...](https://yarnpkg.com/en/)\n\n  _Если вам не нравится `Yarn`:_\n\n  > Печально. Для старших версий `npm` используйте `—save --save-exact` при установке новых зависимостей и создайте `npm-shrinkwrap.json` перед публикованием пакета. [узнать больше...](https://docs.npmjs.com/files/package-locks)\n\n<a name=\"dependencies\"></a>\n\n## 4. Зависимости\n\n![Модули](/images/modules.png)\n\n- Следите за вашими текущими пакетами: `npm ls --depth=0`. [узнать больше...](https://docs.npmjs.com/cli/ls)\n\n- Проверьте ваши пакеты на наличие неиспользуемых или ненужных: `depcheck`. [узнать больше...](https://www.npmjs.com/package/depcheck)\n\n  _Зачем:_\n\n  > Вы могли добавить неиспользуемую библиотеку в ваш код и, тем самым, увеличить итоговый размер релизной сборки. Найдите неиспользуемые зависимости и избавьтесь от них.\n\n- Перед использованием зависимости проверьте её статистику скачиваний, чтобы узнать как часто она используется в сообществе: `npm-stat`. [узнать больше...](https://npm-stat.com/)\n\n  _Зачем:_\n\n  > Частое использование подразумевает большое количество соавторов, что обычно означает лучшую поддержку и все это, в итоге, приводит к быстрому нахождению и исправлению багов.\n\n- Перед использованием зависимости проверьте, есть ли у нее хороший, зрелый релизный цикл с большим числом людей, ведущих разработку пакета: `npm view async`. [узнать больше...](https://docs.npmjs.com/cli/view)\n\n  _Зачем:_\n\n  > От большого количества соавторов не будет пользы, если люди, ведущие разработку пакета, не будут сливать (merge) исправления и патчи вовремя.\n\n- Если есть необходимость в малоизвестной зависимости, обсудите это с командой перед использованием.\n\n- Всегда проверяйте, что ваше приложение работает с последними версиями зависимостей без поломок: `npm outdated`. [узнать больше...](https://docs.npmjs.com/cli/outdated)\n\n  _Зачем:_\n\n  > Обновления зависимости иногда могут содержать переломные изменения (breaking changes). Всегда проверяйте релизные примечания (release notes), когда появляется новое обновление. Обновляйте ваши зависимости по очереди, это сделает процесс поиска потенциальных проблем проще. Используйте такой крутой инструмент, как [npm-check-updates](https://github.com/tjunnone/npm-check-updates).\n\n- Проверьте, есть ли у пакета известные уязвимости безопасности инструментом [Snyk](https://snyk.io/test?utm_source=risingstack_blog).\n\n<a name=\"testing\"></a>\n\n## 5. Тестирование\n\n![Тестирование](/images/testing.png)\n\n- Используйте `test` окружение, если есть необходимость.\n\n  _Почему:_\n\n  > Хотя в некоторых случаях сквозного (end-to-end) тестирования в `production` окружении будет достаточно, есть несколько исключений. Например, при тестировании вам не нужно отправлять аналитические данные, чтобы не забить тестовыми данными чью-нибудь панель управления (dashboard). Другой пример: у вашего API может быть ограничение на количество запросов в `production` окружении и ваши тестовые запросы могут заблокироваться, если лимит будет превышен.\n\n- Размещайте ваши файлы с тестами рядом с тестируемыми модулями, используя следующее соглашение о наименовании: `*.test.js` или `*.spec.js`, например `moduleName.spec.js`.\n\n  _Зачем:_\n\n  > Вам не придется копаться в структуре папок, чтобы найти файл модульного тестирования (unit test). [узнать больше...](https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc)\n\n- Размещайте дополнительные файлы с тестами в отдельной папке, чтобы исключить путаницу.\n\n  _Почему:_\n\n  > Некоторые файлы с тестами невозможно отнести к какому-либо файлу с реализацией. Такие тесты надо размещать в папке, где другие разработчики смогут легко их найти: папка `__test__`. Имя папки `__test__` теперь является стандартом и многие JavaScript фреймворки для тестирования его используют.\n\n- Пишите тестируемый код, избегайте побочных эффектов, выносите побочные эффекты, пишите чистые функции.\n\n  _Зачем:_\n\n  > Бизнес-логику лучше тестировать как отдельные единицы. Вам надо \"минимизировать влияние случайных факторов и недетерминированных процессов на надежность вашего кода\". [узнать больше...](https://medium.com/javascript-scene/tdd-the-rite-way-53c9b46f45e3)\n\n  _Пояснение:_\n\n  > Чистая функция - это функция, которая всегда возвращает одинаковый результат, когда она вызывается с тем же набором аргументов. И, наоборот, нечистая функция - это функция, у которой есть побочные эффекты, и/или которая зависит от внешних условий, чтобы вернуть значение. Это делает их менее предсказуемыми. [узнать больше...](https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc)\n\n- Используйте статическую проверку типов.\n\n  _Зачем:_\n\n  > Иногда вам может понадобиться Статическая проверка типов. Она привнесет некоторый уровень надежности вашему коду. [узнать больше...](https://medium.freecodecamp.org/why-use-static-types-in-javascript-part-1-8382da1e0adb)\n\n- Запускайте тесты локально перед тем как создавать Запрос на Слияние (Pull Request) в `develop` ветку.\n\n  _Зачем:_\n\n  > Вам не захочется оказаться тем человеком, который сломал сборку в ветке, готовой для релиза. Запускайте тесты после перебазирования `rebase` и перед отправкой (push) `feature/*` ветки в удаленный репозиторий.\n\n- Задокументируйте инструкцию по работе с тестами в соответствующем разделе вашего `README.md` файла.\n\n  _Зачем:_\n\n  > Вы оставите полезное примечание для других разработчиков, DevOps экспертов, тестировщиков или кого-либо еще, кому повезет работать с вашим кодом.\n\n<a name=\"structure-and-naming\"></a>\n\n## 6. Структура и Именование\n\n![Структура и Именование](/images/folder-tree.png)\n\n- Структурируйте ваши файлы вокруг продуктовых функций / страниц / компонентов, а не ролей. Также размещайте файлы с тестами рядом с файлами, к которым они относятся.\n\n  **Плохо**\n\n  ```\n  .\n  ├── controllers\n  |   ├── product.js\n  |   └── user.js\n  ├── models\n  |   ├── product.js\n  |   └── user.js\n  ```\n\n  **Хорошо**\n\n  ```\n  .\n  ├── product\n  |   ├── index.js\n  |   ├── product.js\n  |   └── product.test.js\n  ├── user\n  |   ├── index.js\n  |   ├── user.js\n  |   └── user.test.js\n  ```\n\n  _Почему:_\n\n  > Вместо длинных списков файлов вы получите небольшие модули, которые инкапсулируют только одну обязанность и включают в себя тесты и прочие связанные файлы. Навигация в проекте станет гораздо легче, так как нужные файлы будут находиться рядом, сгруппированные по модулям.\n\n- Размещайте дополнительные файлы с тестами в отдельной папке, чтобы избежать путаницы.\n\n  _Почему:_\n\n  > Это сэкономит время другим разработчикам или DevOps экспертам в вашей команде.\n\n- Используйте папку `./config` и не создавайте разные файлы с конфигурациями для разных окружений.\n\n  _Почему:_\n\n  > Когда вы разбиваете общий файл конфигурации на отдельные файлы (база данных, API и т.п.), то размещение этих файлов в папке с прозрачным именованием, как `config`, имеет смысл. Просто запомните: не создавайте файлы с конфигурациями для разных окружений. Это сложно масштабировать, так как, чем больше создается разных стендов для развертывания (deploys) приложения, тем сложнее будет придумывать новые имена для окружений, чтобы создать файл конфигурации. Для файлов конфигурации нужно использовать значения из переменных окружения. [узнать больше...](https://medium.com/@fedorHK/no-config-b3f1171eecd5)\n\n- Размещайте ваши скрипты в папке `./scripts`. Это включает `bash` и `node` скрипты.\n\n  _Зачем:_\n\n  > Скорее всего у вас будет больше, чем один скрипт в проекте: для релизной сборки, сборка для разработки, наполнение базы данных, синхронизация базы данных и т.д.\n\n- Размещайте выходные файлы сборки в папке `./build`. Добавьте `build/` в `.gitignore`.\n\n  _Почему:_\n\n  > Именуйте папку как хотите, `dist` тоже подойдет. Но стоит убедиться, чтобы имя было консистентно для всей команды. В эту папку будут попадать в основном сгенерированные файлы (упакованные, компилированные, транслированные) или просто перемещенные. То, что вы сможете сгенерировать, должно генерироваться и у ваших коллег, поэтому нет смысла добавлять эти файлы к кодовой базе (коммитить) и отправлять в удаленный репозиторий. Если вам это не нужно.\n\n<a name=\"code-style\"></a>\n\n## 7. Оформление кода\n\n![Оформление кода](/images/code-style.png)\n\n<a name=\"code-style-check\"></a>\n\n### 7.1 Советы по оформлению кода\n\n- Используйте stage-2 и выше (современный) синтаксис JavaScript для новых проектов. Для старых проектов стоит придерживаться синтаксиса проекта, если вы не собираетесь его модернизировать.\n\n  _Почему:_\n\n  > Stage-2 в скором времени станет частью официального стандарта с небольшими изменениями. В разработке можно задействовать транспилеры, чтобы уже сейчас использовать преимущества нового синтаксиса. Но решать вам.\n\n- Включите проверку на оформление кода в процесс сборки.\n\n  _Зачем:_\n\n  > Поломка сборки - это один из инструментов, чтобы заставить вас оформлять код в определенном стиле. Это не позволит вам относиться к оформлению кода несерьезно. Сделайте это не только для клиентского кода, но и для серверного. [узнать больше...](https://www.robinwieruch.de/react-eslint-webpack-babel/)\n\n- Вы можете использовать [ESLint - JavaScript linter](http://eslint.org/), чтобы обеспечить соблюдение определенного стиля кода.\n\n  _Почему:_\n\n  > Многие предпочитают `eslint`, но выбор за вами. `eslint` поддерживает множество правил, возможность конфигурировать их и добавлять свои.\n\n- Вы можете использовать уже готовый набор правил оформления кода. Например, [руководство по оформлению кода от Airbnb для JavaScript](https://github.com/airbnb/javascript). [узнать больше...](https://www.gitbook.com/book/duk/airbnb-javascript-guidelines/details)\n\n- Если вы пишите на [FlowType](https://flow.org/), то можно использовать [правила оформления кода на FlowType для ESLint](https://github.com/gajus/eslint-plugin-flowtype).\n\n  _Зачем:_\n\n  > Flow вводит немного новый синтаксис, который нужно обязать следовать определенным правилам оформления кода.\n\n- Используйте `.eslintignore`, чтобы исключить файлы и папки из проверки на оформление кода.\n\n  _Зачем:_\n\n  > Чтобы не загрязнять ваш код `eslint-disable` комментариями каждый раз, когда вам надо исключить файл из проверки.\n\n- Удалите `eslint-disable` комментарии перед тем как создавать Запрос на Слияние (Pull Request).\n\n  _Почему:_\n\n  > В процессе разработки можно выключать проверку на оформление кода, чтобы больше сосредотачиваться на бизнес-логике. Просто не забывайте удалять `eslint-disable` комментарии, когда логика уже написана, чтобы следовать правилам оформления.\n\n- В зависимости от размера задачи, используйте `// TODO:` комментарии или открывайте тикет.\n\n  _Зачем:_\n\n  > Чтобы напомнить себе и другим о небольших задачах (например, рефакторинг функции или обновление комментария). Для больших задач используйте `// TODO(#3456)`, номер в скобках - это номер открытого тикета.\n\n- Всегда пишите комментарии и актуализируйте их с обновлением кода. Удаляйте закомментированные части кода.\n\n  _Зачем:_\n\n  > Ваш код должен быть максимально читабельным, вы должны избавиться от всего лишнего. Если вы сделали рефакторинг функции, не комментируйте старую, удалите ее.\n\n- Избегайте неуместных и шуточных комментариев, логов и наименований.\n\n  _Почему:_\n\n  > Хотя во время сборки можно/нужно удалить их, иногда ваш исходный код может быть передан в другую компанию/клиенту, и они могут не разделить вашего чувства юмора.\n\n- Используйте имена со смыслом, не сокращайте их, чтобы потом было легко их искать. Для функций используйте длинные и наглядные имена. Имя функции должно быть глаголом или глагольной фразой, и должно сообщать нам что делает функция.\n\n  _Зачем:_\n\n  > Это облегчит чтение исходного кода и сделает его более естественным.\n\n- Располагайте функции в файле в соответствии с правилом понижения (step-down rule). Сложные составные функции располагаются в начале файла, а затем идут простые функции.\n\n  _Зачем:_\n\n  > Это облегчит чтение исходного кода и сделает его более естественным.\n\n<a name=\"enforcing-code-style-standards\"></a>\n\n### 7.2 Обеспечение определенного стиля кода\n\n- Используйте файл [.editorconfig](http://editorconfig.org/), который помогает разработчикам определять и поддерживать одинаковые стили оформления кода между разными текстовыми редакторами и средами разработки (IDE) в проекте.\n\n  _Пояснение:_\n\n  > Проект EditorConfig состоит из файла, в котором указываются определенные стили оформления кода, и набора плагинов для текстового редактора, которые позволяют редактору прочитать файл и придерживаться стилям кода, определенным в этом файле. Файлы EditorConfig легко читаются и прекрасно работают с системами контроля версий.\n\n- Ваш редактор оповещает вас об ошибках оформления кода? Используйте [eslint-plugin-prettier](https://github.com/prettier/eslint-plugin-prettier) и [eslint-config-prettier](https://github.com/prettier/eslint-config-prettier) с вашим текущими настройками ESLint. [узнать больше...](https://github.com/prettier/eslint-config-prettier#installation)\n\n- Рассмотрите использование Git hooks.\n\n  _Зачем:_\n\n  > Git hooks в разы увеличивают продуктивность разработчика. Добавляйте изменения, создавайте коммит и отправляйте (push) на тестовое или релизное окружение без страха, что сломается сборка. [узнать больше...](http://githooks.com/)\n\n- Используйте Prettier с precommit hook.\n\n  _Зачем:_\n\n  > Хотя `prettier` сам по себе достаточно мощный инструмент, запускать его каждый раз как отдельную `npm` задачу, чтобы отформатировать код, не очень продуктивно. Здесь в игру вступает `lint-staged` и `husky`. Узнать больше о настройке `lint-staged` можно [здесь](https://github.com/okonet/lint-staged#configuration), а про настройку `husky` [здесь](https://github.com/typicode/husky).\n\n<a name=\"logging\"></a>\n\n## 8. Логирование\n\n![Логирование](/images/logging.png)\n\n- Избегайте логов в консоли разработчика на клиенте в релизном окружении\n\n  _Совет:_\n\n  > Хотя в процессе сборки вы можете/должны удалять их, убедитесь, что ваш линтер оформления кода предупреждает вас об оставшихся логах консоли.\n\n- Создавайте читабельные логи релизного окружения. В идеале, в релизном окружении используйте библиотеки для логирования. Например, [winston](https://github.com/winstonjs/winston) или\n  [node-bunyan](https://github.com/trentm/node-bunyan).\n\n      _Зачем:_\n      > Это сделает процесс поиска проблем более приятным: раскрашивание в разные цвета, метки времени, логирование в файл в дополнение к консоли или даже логирование в файлы, которые разбиваются по дням. [узнать больше...](https://blog.risingstack.com/node-js-logging-tutorial/)\n\n<a name=\"api\"></a>\n\n## 9. API\n\n<a name=\"api-design\"></a>\n\n![API](/images/api.png)\n\n### 9.1 Дизайн API\n\n_Зачем:_\n\n> Чтобы разработчики создавали качественные RESTful интерфейсы, которые можно легко и консистентно использовать как членам команды, так и клиентам.\n\n_Почему:_\n\n> Отсутствие консистентности и простоты может в разы усложнить интеграцию и поддержку. Поэтому раздел `Дизайн API` включен в этот документ.\n\n- В основном вы можете следовать ресурсо-ориентированному дизайну. Три основных фактора: ресурсы, коллекции и URLы.\n\n  - Ресурсы состоят из данных, могут быть вложены и имеют методы для работы с данными.\n  - Группы ресурсов называются коллекциями.\n  - URL идентифицирует онлайновое местоположение ресурса или коллекции.\n\n  _Почему:_\n\n  > Этот дизайн хорошо известен разработчикам (вашим главным потребителям API). Он не только читабельный и легкий в использовании, но еще и позволяет писать универсальные библиотеки и коннекторы, не зная, как будет выглядеть API.\n\n- Для URL'ов используйте kebab-case.\n- Для параметров в поисковой строке или полях ресурса используйте camelCase.\n- Для имен ресурсов в URL'ах используйте kebab-case во множественном числе.\n\n- Всегда используйте существительные во множественном числе для именования URL'ов, указывающих на коллекцию: `/users`.\n\n  _Почему:_\n\n  > Лучше читается и сохраняет консистентность URL'ов. [узнать больше...](https://apigee.com/about/blog/technology/restful-api-design-plural-nouns-and-concrete-names)\n\n- В исходном коде замените множественное число на переменные и свойства с суффиксом `List`.\n\n  _Почему:_\n\n  > Использовать множественное число в URL'е удобно, а в исходном коде недостаточно прозрачно и может привести к ошибкам.\n\n- Всегда используйте уникальное представление URL'а, которое начинается с коллекции и заканчивается идентификатором:\n\n  ```\n  /students/245743\n  /airports/kjfk\n  ```\n\n- Не используйте URL'ы наподобие:\n\n  ```\n  GET /blogs/:blogId/posts/:postId/summary\n  ```\n\n  _Почему:_\n\n  > Этот URL указывает не на ресурс, а на свойство ресурса. Вы можете передать его как параметр запроса.\n\n- Не используйте глаголы в URL'ах, указывающих на ресурсы.\n\n  _Почему:_\n\n  > Потому что, если использовать глаголы в каждой операции над ресурсом, в скором времени у вас получится огромный список URL'ов и не будет консистентного шаблона, что усложнит изучение API для разработчиков. К тому же глаголы используются для других целей.\n\n- Используйте глаголы в URL'ах, не указывающих на ресурсы. В этом случае ваше API не возвращает ресурсы, оно запускает операцию и возвращает результат выполнения. Это **не** CRUD (create, retrieve, update и delete) операции:\n\n  ```\n  /translate?text=Hallo\n  ```\n\n  _Почему:_\n\n  > Потому что для CRUD используются HTTP методы с URL'ами `ресурса` или `коллекции`. Глаголы же на самом деле являются `Контроллерами`. Обычно их не так часто разрабатывают. [узнать больше...](https://byrondover.github.io/post/restful-api-guidelines/#controller)\n\n- Если в теле запроса или ответа возвращается `JSON` объект, то именуйте свойства объекта в `camelCase`, чтобы поддерживать консистентность.\n  _Почему:_\n  > Это советы для JavaScript проекта, где подразумевается, что язык программирования для генерации и парсинга `JSON` - это JavaScript.\n- Хотя ресурс и является уникальной сущностью, как экземпляр объекта или запись базы данных, вы не должны использовать `table_name` как имя ресурса и `column_name` как свойство ресурса.\n\n  _Почему:_\n\n  > Потому что вы намереваетесь показать Ресурс, а не схему таблицы из базы данных.\n\n- И снова, при именовании ресурсов в URL'ах используйте только существительные, не указывайте в имени ресурса действие.\n\n  _Совет:_\n\n  > Используйте только существительные в URL'ах ресурса, избегайте подобных URL'ов: `/addNewUser` или `/updateUser`. Также не стоит посылать операцию над ресурсом как параметр запроса.\n\n- Объяснение функциональных возможностей CRUD с использованием HTTP методов:\n\n  > `GET`: Получить представление ресурса.\n\n  > `POST`: Создать новые ресурсы или под-ресурсы.\n\n  > `PUT`: Обновить существующие ресурсы.\n\n  > `PATCH`: Обновить существующие ресурсы. Обновляет только переданные поля, остальные не трогает.\n\n  > `DELETE`: Удалить существующие ресурсы.\n\n- Для вложенных ресурсов используйте связь между ними в URL'е. Например, используйте `id` для связи сотрудника с компанией.\n\n  _Почему:_\n\n  > Это естественный метод, чтобы добраться до ресурсов.\n\n  _Как:_\n\n  > `GET      /schools/2/students`, должен получить список всех студентов из школы с `id` 2.\n\n  > `GET      /schools/2/students/31`, должен получить данные о студенте с `id` 31, который учится в школе с `id` 2.\n\n  > `DELETE   /schools/2/students/31`, должен удалить студента с `id` 31, который учится в школе с `id` 2.\n\n  > `PUT      /schools/2/students/31` , должен обновить данные о студенте с `id` 31. Используйте `PUT` только на URL'е ресурса, а не коллекции.\n\n  > `POST     /schools` , должен создать новую школу и вернуть данные по ней. Используйте `POST` на URL'е коллекции.\n\n- Для версионности используйте обычный порядковый номер с префиксом `v` (v1, v2). Разместите его в начале URL'а, чтобы у него был самый широкий охват:\n\n  ```\n  http://api.domain.com/v1/schools/3/students\n  ```\n\n  _Зачем:_\n\n  > Когда ваше API публично и предназначено для третьих лиц, его обновление может вносить переломные изменения (breaking changes), которые могут привести к поломке существующих продуктов и сервисов, использующих ваше API. Использование версионности не позволит этому случиться. [узнать больше...](https://apigee.com/about/blog/technology/restful-api-design-tips-versioning)\n\n- Ответное сообщение не должно требовать дополнительного описания. Например, корректное сообщение об ошибке может выглядеть вот так:\n\n  ```json\n  {\n  \t\"code\": 1234,\n  \t\"message\": \"Something bad happened\",\n  \t\"description\": \"More details\"\n  }\n  ```\n\n  или сообщение с ошибками валидации:\n\n  ```json\n  {\n  \t\"code\": 2314,\n  \t\"message\": \"Validation Failed\",\n  \t\"errors\": [\n  \t\t{\n  \t\t\t\"code\": 1233,\n  \t\t\t\"field\": \"email\",\n  \t\t\t\"message\": \"Invalid email\"\n  \t\t},\n  \t\t{\n  \t\t\t\"code\": 1234,\n  \t\t\t\"field\": \"password\",\n  \t\t\t\"message\": \"No password provided\"\n  \t\t}\n  \t]\n  }\n  ```\n\n  _Почему:_\n\n  > В критические моменты разработчики надеются на качественно сформулированные ошибки, когда ищут проблему или решают вопросы после того, как приложение, использующее ваше API, попало в руки к пользователям.\n\n  _Замечание: Сообщения об ошибках безопасности должны быть как можно более обобщенными. Например, вместо того чтобы говорить `неверный пароль`, стоит отвечать `неверное имя пользователя или пароль`, чтобы мы, не осознавая того, не сообщали, что имя пользователя верное, а пароль нет._\n\n- Используйте следующие коды статусов в вашем ответном сообщении, чтобы описать что **все нормально**, **клиентское приложение сделало что-то не так** или **API сломалось**.\n\n  _Коды статусов:_\n\n  > `200 OK` означает успешное выполнение `GET`, `PUT` или `POST` запросов.\n\n  > `201 Created` означает, что создан новый объект. Создание новых объектов, использую метод `POST`, возвращает `201` код статуса.\n\n  > `204 No Content` означает успешно обработанный запрос, но отправить обратно нечего. Используйте его, когда операция `DELETE` прошла успешно.\n\n  > `304 Not Modified` означает, что запрошенный ресурс уже есть в кэше у получателя и можно сэкономить на передаче данных.\n\n  > `400 Bad Request` для необработанных запросов, так как сервер не понимает, что именно запрашивает клиент.\n\n  > `401 Unauthorized` для запросов с невалидными учетными данными. При данном ответе надо сделать повторный запрос с валидными данными.\n\n  > `403 Forbidden` означает, что сервер понял запрос, но отказывается авторизовать его.\n\n  > `404 Not Found` означает, что запрошенный ресурс не найден.\n\n  > `500 Internal Server Error` означает, что запрос валидный, но сервер не смог его выполнить по каким-то непредвиденным причинам.\n\n  _Пояснение:_\n\n  > Большинство поставщиков API использует малую часть кодов статусов HTTP. Например, Google GData API использует только 10 кодов статусов, Netflix - 9, а Digg только 8. Конечно же, они передают дополнительную информацию в теле ответа. Существует свыше 70 кодов статусов. Однако, большинство разработчиков не помнят все 70 кодов. Поэтому, если вы выбираете код статуса, который не очень распространен, вы заставите разработчика переключиться с построения приложения на поиск в википедии, что же вы хотели ему сказать. [узнать больше...](https://apigee.com/about/blog/technology/restful-api-design-what-about-errors)\n\n- Указывайте общее количество ресурсов в вашем ответе.\n\n- Поддерживайте параметры запроса `limit` и `offset`.\n\n- Количество данных, которое предоставляет ресурс, должно быть учтено. Потребитель вашего API не всегда нуждается в полном представлении ресурса. Используйте параметр запроса `fields`, который принимает на вход разделенный запятой список полей, необходимых для включения в ответ:\n  ```\n  GET /student?fields=id,name,age,class\n  ```\n- Вам не обязательно поддерживать пагинацию, фильтрацию и сортировку с самого начала для всех ресурсов. Просто задокументируйте ресурсы, которые предоставляют эту возможность.\n\n<a name=\"api-security\"></a>\n\n### 9.2 Безопасность API\n\nЗдесь представлены несколько основных лучших практик для безопасности:\n\n- Не используйте базовую аутентификацию, если вы не работаете по защищенному соединению (HTTPS). Токены аутентификации не должны передаваться в URL'е: `GET /users/123?token=asdf....`\n\n  _Почему:_\n\n  > Потому что Токен или ID пользователя и пароль передаются по сети как простой текст, закодированный в base64, но base64 это обратимое кодирование. Схема базовой аутентификации не безопасна. [узнать больше...](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication)\n\n- Токены должны передаваться с использованием заголовка `Authorization` при каждом запросе: `Authorization: Bearer xxxxxx, Extra yyyyy`.\n\n- Жизненный цикл `Authorization Code` должен быть кратковременным.\n\n- Отклоняйте все запросы, переданные через незащищенный протокол (non-TLS requests), чтобы избежать передачи данных небезопасным путем. Отвечайте на подобные HTTP запросы статусом `403 Forbidden`.\n\n- Задумайтесь над использованием ограничения запросов (Rate Limiting).\n\n  _Зачем:_\n\n  > Чтобы защитить API от угроз ботов, которые вызывают его тысячи раз в час. Вы должны задуматься над реализацией ограничения количества запросов на ранних этапах построения приложения.\n\n- Правильно сконфигурированные HTTP заголовки помогут вам обезопасить ваше web-приложение. [узнать больше...](https://github.com/helmetjs/helmet)\n\n- Ваше API должно преобразовывать данные, получаемые в запросе, в их каноничное представление или, если это невозможно, отклонять запрос. Вернуть статус `400 Bad Request` с детальной информацией об ошибках с некорректными или отсутствующими данными.\n\n- Весь обмен данными с REST API должен валидироваться самой API.\n\n- Сериализуйте ваш JSON.\n\n  _Зачем:_\n\n  > Ключевая цель JSON сериализаторов - это предотвращение удаленного выполнения произвольного JavaScript кода в браузере... или, если вы используйте Node.js, на сервере. Поэтому жизненно необходимо иметь правильный JSON сериализатор, чтобы безопасно кодировать данные для предотвращения выполнения предоставленного пользователем кода в браузере.\n\n- Валидируйте заголовок `Content-Type` и используйте, в основном, с `application/*json` значением.\n\n  _Зачем:_\n\n  > Например, если разрешить MIME-тип `application/x-www-form-urlencoded`, то злоумышленник сможет создать форму и вызвать простой `POST` запрос. Сервер никогда не должен предполагать `Content-Type`. Отсутствие заголовка `Content-Type` или его неожиданное значение должно служить причиной для сервера отклонить запрос со статусом `4XX`.\n\n- Вы можете использовать чек-лист для проверки безопасности API. [например](https://github.com/shieldfy/API-Security-Checklist)\n\n<a name=\"api-documentation\"></a>\n\n### 9.3 Документация API\n\n- Заполните раздел `API Reference` в шаблоне [README.md](./README.sample.md) для API.\n- Опишите методы аутентификации API с примерами кода.\n- Опишите структуру URL'ов (только путь, без корневого URL), включая тип запроса (метод HTTP).\n\nПо каждому URL'у разъясните:\n\n- Параметры URL'а, если они есть, укажите их в соответствии с именами, указанными в разделе URL:\n\n  ```\n  Required: id=[integer]\n  Optional: photo_id=[alphanumeric]\n  ```\n\n- Если метод запроса `POST`, приведите рабочие примеры. Правило для параметров URL'а здесь тоже работает. Разбейте раздел на Необязательные и Обязательные данные.\n\n- Если ответ успешный, укажите какой должен быть код статуса и вернутся ли какие-нибудь данные. Это будет полезно для людей, которые хотят знать какие данные ожидать в ответе.\n\n  ```\n  Code: 200\n  Content: { id : 12 }\n  ```\n\n- Если ответ неуспешный. Большинство запросов имеет множество вариантов неуспешно завершиться. Начиная от неавторизованного доступа до неправильных параметров и т.д. Все эти варианты должны быть задокументированы. При документировании вы будете повторяться, но это поможет предотвратить додумывание со стороны потребителя API. Например:\n\n  ```json\n  {\n  \t\"code\": 403,\n  \t\"message\": \"Authentication failed\",\n  \t\"description\": \"Invalid username or password\"\n  }\n  ```\n\n- Используйте готовые решения для дизайна API. Существует множество инструментов с открытым исходным кодом для документирования API. Например, [API Blueprint](https://apiblueprint.org/) и [Swagger](https://swagger.io/).\n\n<a name=\"licensing\"></a>\n\n## 10. Лицензирование\n\n![Лицензирование](/images/licensing.png)\n\nУбедитесь, что у вас есть право на ресурсы, которые вы используете. Если вы используете библиотеки, не забудьте проверить, что они имеют лицензию MIT, Apache или BSD. Если вы их модифицируете, проверьте детали лицензии на разрешение. Использование изображений и видео материалов, защищенных авторским правом, может повлечь проблемы с законом.\n\n---\n\nИсточники:\n[RisingStack Engineering](https://blog.risingstack.com/),\n[Mozilla Developer Network](https://developer.mozilla.org/),\n[Heroku Dev Center](https://devcenter.heroku.com),\n[Airbnb/javascript](https://github.com/airbnb/javascript),\n[Atlassian Git tutorials](https://www.atlassian.com/git/tutorials),\n[Apigee](https://apigee.com/about/blog),\n[Wishtack](https://blog.wishtack.com)\n\nИконки от [icons8](https://icons8.com/)\n"
        },
        {
          "name": "README-zh.md",
          "type": "blob",
          "size": 40.2646484375,
          "content": "[ENGLISH](./README.md) |\n[日本語版](./README-ja.md) |\n[한국어](./REAMDE-ko.md) |\n[РУССКИЙ](./README-ru.md) |\n[Português](./README-pt-BR.md)\n| [Persian/فارسی](./README-ir.md)\n\n[<img src=\"./images/elsewhen-logo.png\" width=\"180\" height=\"180\">](https://www.elsewhen.com/)\n\n# 项目规范 &middot; [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n\nJavaScript 工程项目的一系列最佳实践策略\n\n> 当您在青葱的田野里翻滚一般欢乐（而不受约束）地开发一个新项目，对其他人而言维护这样一个项目简直就是一个潜在的可怕的噩梦。以下列出的指南是我们在[elsewhen](https://www.elsewhen.com)的大多数 JavaScript 项目中发现，撰写和收集的最佳实践（至少我们是这样认为的）。如果您想分享其他最佳实践，或者认为其中一些指南应该删除。[欢迎随时与我们分享](http://makeapullrequest.com)。\n\n- [Git](#git)\n  - [一些 git 规则](#some-git-rules)\n  - [Git 工作流](#git-workflow)\n  - [编写良好的提交备注信息](#writing-good-commit-messages)\n- [文档](#documentation)\n- [环境](#environments)\n  - [一致的开发环境](#consistent-dev-environments)\n  - [一致性的依赖配置](#consistent-dependencies)\n- [依赖](#dependencies)\n- [测试](#testing)\n- [结构与命名规则](#structure-and-naming)\n- [代码风格](#code-style)\n  - [一些代码风格指南](#code-style-check)\n  - [强制性的代码风格规范](#enforcing-code-style-standards)\n- [日志](#logging)\n- [API](#api)\n  - [API 设计](#api-design)\n  - [API 安全](#api-security)\n  - [API 文档](#api-documentation)\n- [许可](#licensing)\n\n<a name=\"git\"></a>\n\n## 1. Git\n\n<a name=\"some-git-rules\"></a>\n\n![git](/images/branching.png)\n\n### 1.1 一些 Git 规则\n\n这里有一套规则要牢记：\n\n- 在功能分支中执行开发工作。\n\n  _为什么：_\n\n  > 因为这样，所有的工作都是在专用的分支而不是在主分支上隔离完成的。它允许您提交多个 pull request 而不会导致混乱。您可以持续迭代提交，而不会使得那些很可能还不稳定而且还未完成的代码污染 master 分支。[更多请阅读...](https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow)\n\n- 从 `develop` 独立出分支。\n\n  _为什么：_\n\n  > 这样，您可以保持 `master` 分支中的代码稳定性，这样就不会导致构建问题，并且几乎可以直接用于发布（当然，这可能对某些项目来说要求会比较高）。\n\n- 永远也不要将分支（直接）推送到 `develop` 或者 `master` ，请使用合并请求（Pull Request）。\n\n  _为什么：_\n\n  > 通过这种方式，它可以通知整个团队他们已经完成了某个功能的开发。这样开发伙伴就可以更容易对代码进行 code review，同时还可以互相讨论所提交的需求功能。\n\n- 在推送所开发的功能并且发起合并请求前，请更新您本地的`develop`分支并且完成交互式变基操作（interactive rebase）。\n\n  _为什么：_\n\n  > rebase 操作会将（本地开发分支）合并到被请求合并的分支（ `master` 或 `develop` ）中，并将您本地进行的提交应用于所有历史提交的最顶端，而不会去创建额外的合并提交（假设没有冲突的话），从而可以保持一个漂亮而干净的历史提交记录。 [更多请阅读 ...](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)\n\n- 请确保在变基并发起合并请求之前解决完潜在的冲突。\n\n- 合并分支后删除本地和远程功能分支。\n\n  _为什么：_\n\n  > 如果不删除需求分支，大量僵尸分支的存在会导致分支列表的混乱。而且该操作还能确保有且仅有一次合并到`master` 或  `develop`。只有当这个功能还在开发中时对应的功能分支才存在。\n\n- 在进行合并请求之前，请确保您的功能分支可以成功构建，并已经通过了所有的测试（包括代码规则检查）。\n\n  _为什么：_\n\n  > 因为您即将将代码提交到这个稳定的分支。而如果您的功能分支测试未通过，那您的目标分支的构建有很大的概率也会失败。此外，确保在进行合并请求之前应用代码规则检查。因为它有助于我们代码的可读性，并减少格式化的代码与实际业务代码更改混合在一起导致的混乱问题。\n\n- 使用 [这个](./.gitignore) `.gitignore` 文件。\n\n  _为什么：_\n\n  > 此文件已经囊括了不应该和您开发的代码一起推送至远程仓库（remote repository）的系统文件列表。另外，此文件还排除了大多数编辑器的设置文件夹和文件，以及最常见的（工程开发）依赖目录。\n\n- 保护您的 `develop` 和 `master` 分支。\n\n  _为什么：_\n\n  > 这样可以保护您的生产分支免受意外情况和不可回退的变更。 更多请阅读... [Github](https://help.github.com/articles/about-protected-branches/) 以及  [Bitbucket](https://confluence.atlassian.com/bitbucketserver/using-branch-permissions-776639807.html)\n\n<a name=\"git-workflow\"></a>\n\n### 1.2 Git 工作流\n\n基于以上原因, 我们将 [功能分支工作流](https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow) ， [交互式变基的使用方法](https://www.atlassian.com/git/tutorials/merging-vs-rebasing#the-golden-rule-of-rebasing) 结合一些 [Gitflow](https://www.atlassian.com/git/tutorials/comparing-workflows#gitflow-workflow)中的基础 (比如，命名和使用一个 develop branch)一起使用。 主要步骤如下:\n\n- 针对一个新项目, 在您的项目目录初始化您的项目。 **如果是（已有项目）随后的功能开发/代码变动，这一步请忽略**。\n\n  ```sh\n  cd <项目目录>\n  git init\n  ```\n\n- 检出（Checkout） 一个新的功能或故障修复（feature/bug-fix）分支。\n\n  ```sh\n  git checkout -b <分支名称>\n  ```\n\n- 新增代码变更。\n\n  ```sh\n  git add\n  git commit -a\n  ```\n\n  _为什么：_\n\n  > `git commit -a` 会独立启动一个编辑器用来编辑您的说明信息，这样的好处是可以专注于写这些注释说明。更多请阅读 _章节 1.3_。\n\n- 保持与远程（develop 分支）的同步，以便（使得本地 develop 分支）拿到最新变更。\n\n  ```sh\n  git checkout develop\n  git pull\n  ```\n\n  _为什么：_\n\n  > 当您进行（稍后）变基操作的时候，保持更新会给您一个在您的机器上解决冲突的机会。这比（不同步更新就进行下一步的变基操作并且）发起一个与远程仓库冲突的合并请求要好。\n\n- （切换至功能分支并且）通过交互式变基从您的 develop 分支中获取最新的代码提交，以更新您的功能分支。\n\n  ```sh\n  git checkout <branchname>\n  git rebase -i --autosquash develop\n  ```\n\n  _为什么：_\n\n  > 您可以使用 `--autosquash` 将所有提交压缩到单个提交。没有人会愿意（看到） `develop` 分支中的单个功能开发就占据如此多的提交历史。 [更多请阅读...](https://robots.thoughtbot.com/autosquashing-git-commits)\n\n- 如果没有冲突请跳过此步骤，如果您有冲突, 就需要[解决它们](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/)并且继续变基操作。\n  ```sh\n  git add <file1> <file2> ...\n  git rebase --continue\n  ```\n- 推送您的（功能）分支。变基操作会改变提交历史, 所以您必须使用 `-f` 强制推送到远程（功能）分支。 如果其他人与您在该分支上进行协同开发，请使用破坏性没那么强的 `--force-with-lease` 参数。\n\n  ```sh\n  git push -f\n  ```\n\n  _为什么:_\n\n  > 当您进行 rebase 操作时，您会改变功能分支的提交历史。这会导致 Git 拒绝正常的 `git push` 。那么，您只能使用 `-f` 或 `--force` 参数了。[更多请阅读...](https://developer.atlassian.com/blog/2015/04/force-with-lease/)\n\n- 提交一个合并请求（Pull Request）。\n- Pull Request 会被负责代码审查的同事接受，合并和关闭。\n- 如果您完成了开发，请记得删除您的本地分支。\n\n  ```sh\n  git branch -d <分支>\n  ```\n\n  （使用以下代码）删除所有已经不在远程仓库维护的分支。\n\n  ```sh\n  git fetch -p && for branch in `git branch -vv | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done\n  ```\n\n<a name=\"writing-good-commit-messages\"></a>\n\n### 1.3 如何写好 Commit Message\n\n坚持遵循关于提交的标准指南，会让在与他人合作使用 Git 时更容易。这里有一些经验法则 ([来源](https://chris.beams.io/posts/git-commit/#seven-rules)):\n\n- 用新的空行将标题和主体两者隔开。\n\n  _为什么：_\n\n  > Git 非常聪明，它可将您提交消息的第一行识别为摘要。实际上，如果您尝试使用 `git shortlog` ，而不是 `git log` ，您会看到一个很长的提交消息列表，只会包含提交的 id 以及摘要（，而不会包含主体部分）。\n\n- 将标题行限制为 50 个字符，并将主体中一行超过 72 个字符的部分折行显示。\n\n  _为什么：_\n\n  > 提交应尽可能简洁明了，而不是写一堆冗余的描述。 [更多请阅读...](https://medium.com/@preslavrachev/what-s-with-the-50-72-rule-8a906f61f09c)\n\n- 标题首字母大写。\n- 不要用句号结束标题。\n- 在标题中使用 [祈使句](https://en.wikipedia.org/wiki/Imperative_mood) 。\n\n  _为什么：_\n\n  > 与其在写下的信息中描述提交者做了什么，不如将这些描述信息作为在这些提交被应用于该仓库后将要完成的操作的一个说明。[更多请阅读...](https://news.ycombinator.com/item?id=2079612)\n\n- 使用主体部分去解释 **是什么** 和 **为什么** 而不是 **怎么做**。\n\n<a name=\"文档\"></a>\n\n## 2. 文档\n\n![文档](/images/documentation.png)\n\n- 可以使用这个 [模板](./README.sample.md) 作为 `README.md` （的一个参考）, 随时欢迎添加里面没有的内容。\n- 对于具有多个存储库的项目，请在各自的 `README.md` 文件中提供它们的链接。\n- 随项目的进展，持续地更新 `README.md` 。\n- 给您的代码添加详细的注释，这样就可以清楚每个主要部分的含义。\n- 如果您正在使用的某些代码和方法，在 github 或 stackoverflow 上已经有公开讨论，请在您的注释中包含这些链接，\n- 不要把注释作为坏代码的借口。保持您的代码干净整洁。\n- 也不要把那些清晰的代码作为不写注释的借口。\n- 当代码更新，也请确保注释的同步更新。\n\n<a name=\"environments\"></a>\n\n## 3. 环境\n\n![环境](/images/laptop.png)\n\n- 如果需要，请分别定义 `development`, `test` 和 `production` 三个环境。\n\n  _为什么：_\n\n  > 不同的环境可能需要不同的数据、token、API、端口等。您可能需要一个隔离的 `development` 环境，它调用 mock 的 API，mock 会返回可预测的数据，使自动和手动测试变得更加容易。或者您可能只想在 `production` 环境中才启用 Google Analytics（分析）。 [更多请阅读...](https://stackoverflow.com/questions/8332333/node-js-setting-up-environment-specific-configs-to-be-used-with-everyauth)\n\n- 依据不同的环境变量加载部署的相关配置，不要将这些配置作为常量添加到代码库中， [看这个例子](./config.sample.js).\n\n  _为什么：_\n\n  > 您会有令牌，密码和其他有价值的信息。这些配置应正确地从应用程序内部分离开来，这样代码库就可以随时独立发布，不会包含这些敏感配置信息。\n  > _怎么做：_\n  > 使用 `.env` 文件来存储环境变量，并将其添加到 `.gitignore` 中使得排除而不被提交（到仓库）。另外，再提交一个 `.env.example` 作为开发人员的参考配置。对于生产环境，您应该依旧以标准化的方式设置环境变量。\n  > [更多请阅读](https://medium.com/@rafaelvidaurre/managing-environment-variables-in-node-js-2cb45a55195f)\n\n- 建议您在应用程序启动之前校验一下环境变量。  [看这个例子](./configWithTest.sample.js) ，它使用了 `joi` 去校验提供的值。\n\n  _为什么：_\n\n  > 它可能会将其他人从上小时的故障排查中解救。\n\n<a name=\"consistent-dev-environments\"></a>\n\n### 3.1 一致的开发环境:\n\n- 在 `package.json` 里的 `engines` 中设置您的 node 版本。\n\n  _为什么：_\n\n  > 让其他人可以清晰的知道这个项目中用的什么 node 版本。 [更多请阅读...](https://docs.npmjs.com/files/package.json#engines)\n\n- 另外，使用 `nvm` 并在您的项目根目录下创建一个 `.nvmrc` 文件。不要忘了在文档中标注。\n\n  _为什么：_\n\n  > 任何使用`nvm`的人都可以使用 `nvm use` 来切换到合适的 node 版本。 [更多请阅读...](https://github.com/creationix/nvm)\n\n- 最好设置一个检查 node 和 npm 版本的 `preinstall` 脚本。\n\n  _为什么：_\n\n  > 某些依赖项可能会在新版本的 npm 中安装失败。\n\n- 如果可以的话最好使用 Docker 镜像。\n\n  _为什么：_\n\n  > 它可以在整个工作流程中为您提供一致的环境，而且不用花太多的时间来解决依赖或配置。 [更多请阅读...](https://hackernoon.com/how-to-dockerize-a-node-js-application-4fbab45a0c19)\n\n- 使用本地模块，而不是使用全局安装的模块。\n\n  _为什么：_\n\n  > 您不能指望您的同事在自己的全局环境都安装了相应的模块，本地模块可以方便您分享您的工具。\n\n<a name=\"consistent-dependencies\"></a>\n\n### 3.2 依赖一致性:\n\n- 确保您的团队成员获得与您完全相同的依赖。\n\n  _为什么：_\n\n  > 因为您希望代码在任何开发环境中运行都能像预期的一样。 [更多请阅读...](https://medium.com/@kentcdodds/why-semver-ranges-are-literally-the-worst-817cdcb09277)\n\n  _怎么做：_\n\n  > 在`npm@5`或者更高版本中使用 `package-lock.json`。\n\n  _我们没有 npm@5：_\n\n  > 或者，您可以使用 `yarn` ，并确保在 `README.md` 中标注了使用 `yarn` 。您的锁文件和`package.json`在每次依赖关系更新后应该具有相同的版本。[更多请阅读...](https://yarnpkg.com/en/)\n\n  _我不太喜欢 `Yarn` ：_\n\n  > 居然不喜欢 Yarn，太糟糕了。对于旧版本的`npm`，在安装新的依赖关系时使用 `-save --save-exact` ，并在发布之前创建` npm-shrinkwrap.json` 。 [更多请阅读...](https://docs.npmjs.com/files/package-locks)\n\n<a name=\"dependencies\"></a>\n\n## 4. 依赖\n\n![依赖](/images/modules.png)\n\n- 持续跟踪您当前的可用依赖包: 举个例子, `npm ls --depth=0`。[更多请阅读...](https://docs.npmjs.com/cli/ls)\n- 查看这些软件包是否未使用或者与开发项目无关: `depcheck`。 [更多请阅读...](https://www.npmjs.com/package/depcheck)\n\n  _为什么：_\n\n  > 您可能会在代码中包含未使用的库，这会增大生产包的大小。请搜索出这些未使用的依赖关系并去掉它们吧。\n\n- 在使用依赖之前，请检查他的下载统计信息，看看它是否被社区大量使用： `npm-stat`. [更多请阅读...](https://npm-stat.com/)\n\n  _为什么：_\n\n  > 更多的使用量很大程度上意味着更多的贡献者，这通常意味着拥有更好的维护，这些能确保错误能够被快速地发现并修复。\n\n- 在使用依赖之前，请检查它是否具有良好而成熟的版本发布频率与大量的维护者：例如， `npm view async`。[更多请阅读...](https://docs.npmjs.com/cli/view)\n\n  _为什么：_\n\n  > 如果维护者没有足够快地合并修补程序，那么这些贡献者也将会变得不积极不高效。\n\n- 如果需要使用那些不太熟悉的依赖包，请在使用之前与团队进行充分讨论。\n- 始终确保您的应用程序在最新版本的依赖包上面能正常运行，而不是无法使用：`npm outdated`。 [更多请阅读...](https://docs.npmjs.com/cli/outdated)\n\n  _为什么：_\n\n  > 依赖关系更新有时包含破坏性更改。当显示需要更新时，请始终先查看其发行说明。并逐一地更新您的依赖项，如果出现任何问题，可以使故障排除更容易。可以使用类似 [npm-check-updates](https://github.com/tjunnone/npm-check-updates) 的酷炫工具（来解决这个问题）。\n\n- 检查包是否有已知的安全漏洞，例如： [Snyk](https://snyk.io/test?utm_source=risingstack_blog)。\n\n<a name=\"testing\"></a>\n\n## 5. 测试\n\n![测试](/images/testing.png)\n\n- 如果需要，请构建一个 `test` 环境.\n\n  _为什么：_\n\n  > 虽然有时在 `production` 模式下端到端测试可能看起来已经足够了，但有一些例外：比如您可能不想在生产环境下启用数据分析功能，只能用测试数据来填充（污染）某人的仪表板。另一个例子是，您的 API 可能在 `production` 中才具有速率限制，并在请求达到一定量级后会阻止您的测试请求。\n\n- 将测试文件放在使用 `* .test.js` 或 `* .spec.js` 命名约定的测试模块，比如 `moduleName.spec.js`\n\n  _为什么：_\n\n  > 您肯定不想进入一个层次很深的文件夹结构来查找里面的单元测试。[更多请阅读...](https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc)\n\n- 将其他测试文件放入独立的测试文件夹中以避免混淆。\n\n  _为什么：_\n\n  > 一些测试文件与任何特定的文件实现没有特别的关系。您只需将它放在最有可能被其他开发人员找到的文件夹中：`__test__` 文件夹。这个名字：`__test__`也是现在的标准，被大多数 JavaScript 测试框架所接受。\n\n- 编写可测试代码，避免副作用（side effects），提取副作用，编写纯函数。\n\n  _为什么：_\n\n  > 您想要将业务逻辑拆分为单独的测试单元。您必须“尽量减少不可预测性和非确定性过程对代码可靠性的影响”。 [更多请阅读...](https://medium.com/javascript-scene/tdd-the-rite-way-53c9b46f45e3)\n\n  > 纯函数是一种总是为相同的输入返回相同输出的函数。相反地，不纯的函数是一种可能会有副作用，或者取决于来自外部的条件来决定产生对应的输出值的函数。这使得它不那么可预测。[更多请阅读...](https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc)\n\n- 使用静态类型检查器\n\n  _为什么：_\n\n  > 有时您可能需要一个静态类型检查器。它为您的代码带来一定程度的可靠性。[更多请阅读...](https://medium.freecodecamp.org/why-use-static-types-in-javascript-part-1-8382da1e0adb)\n\n- 先在本地 `develop` 分支运行测试，待测试通过后，再进行 pull 请求。\n\n  _为什么：_\n\n  > 您不想成为一个导致生产分支构建失败的人吧。在您的`rebase`之后运行测试，然后再将您改动的功能分支推送到远程仓库。\n\n- 记录您的测试，包括在 `README.md` 文件中的相关说明部分。\n\n  _为什么：_\n\n  > 这是您为其他开发者或者 DevOps 专家或者 QA 或者其他如此幸运能和您一起协作的人留下的便捷笔记。\n\n<a name=\"structure-and-naming\"></a>\n\n## 6. 结构布局与命名\n\n![结构布局与命名](/images/folder-tree.png)\n\n- 请围绕产品功能/页面/组件，而不是围绕角色来组织文件。此外，请将测试文件放在他们对应实现的旁边。\n\n  **不规范**\n\n  ```\n  .\n  ├── controllers\n  |   ├── product.js\n  |   └── user.js\n  ├── models\n  |   ├── product.js\n  |   └── user.js\n  ```\n\n  **规范**\n\n  ```\n  .\n  ├── product\n  |   ├── index.js\n  |   ├── product.js\n  |   └── product.test.js\n  ├── user\n  |   ├── index.js\n  |   ├── user.js\n  |   └── user.test.js\n  ```\n\n  _为什么：_\n\n  > 比起一个冗长的列表文件，创建一个单一责权封装的小模块，并在其中包括测试文件。将会更容易浏览，更一目了然。\n\n- 将其他测试文件放在单独的测试文件夹中以避免混淆。\n\n  _为什么：_\n\n  > 这样可以节约您的团队中的其他开发人员或 DevOps 专家的时间。\n\n- 使用 `./config` 文件夹，不要为不同的环境制作不同的配置文件。\n\n  _为什么：_\n\n  > 当您为不同的目的（数据库，API 等）分解不同的配置文件;将它们放在具有容易识别名称（如 `config` ）的文件夹中才是有意义的。请记住不要为不同的环境制作不同的配置文件。这样并不是具有扩展性的做法，如果这样，就会导致随着更多应用程序部署被创建出来，新的环境名称也会不断被创建，非常混乱。\n  > 配置文件中使用的值应通过环境变量提供。 [更多请阅读...](https://medium.com/@fedorHK/no-config-b3f1171eecd5)\n\n- 将脚本文件放在`./scripts`文件夹中。包括 `bash` 脚本和 `node` 脚本。\n\n  _为什么：_\n\n  > 很可能最终会出现很多脚本文件，比如生产构建，开发构建，数据库 feeders，数据库同步等。\n\n- 将构建输出结果放在`./build`文件夹中。将`build/`添加到`.gitignore`中以便忽略此文件夹。\n\n  _为什么：_\n\n  > 命名为您最喜欢的就行，`dist`看起来也蛮酷的。但请确保与您的团队保持一致性。放置在该文件夹下的东西应该是已经生成（打包、编译、转换）或者被移到这里的。您产生什么编译结果，您的队友也可以生成同样的结果，所以没有必要将这些结果提交到远程仓库中。除非您故意希望提交上去。\n\n- 文件名和目录名请使用 `PascalCase` `camelCase` 风格。组件请使用 `PascalCase` 风格。\n\n- `CheckBox/index.js` 应该代表 `CheckBox` 组件，也可以写成 `CheckBox.js` ，但是**不能**写成冗长的 `CheckBox/CheckBox.js` 或 `checkbox/CheckBox.js` 。\n\n- 理想情况下，目录名称应该和 `index.js` 的默认导出名称相匹配。\n\n  _为什么：_\n\n  > 这样您就可以通过简单地导入其父文件夹直接使用您预期的组件或模块。\n\n<a name=\"code-style\"></a>\n\n## 7. 代码风格\n\n![代码风格](/images/code-style.png)\n\n<a name=\"code-style-check\"></a>\n\n### 7.1 若干个代码风格指导\n\n- 对新项目请使用 Stage2 和更高版本的 JavaScript（现代化）语法。对于老项目，保持与老的语法一致，除非您打算把老的项目也更新为现代化风格。\n\n  _为什么：_\n\n  > 这完全取决于您的选择。我们使用转换器来使用新的语法糖。Stage2 更有可能最终成为规范的一部分，而且仅仅只需经过小版本的迭代就会成为规范。\n\n- 在构建过程中包含代码风格检查。\n\n  _为什么：_\n\n  > 在构建时中断下一步操作是一种强制执行代码风格检查的方法。强制您认真对待代码。请确保在客户端和服务器端代码都执行代码检查。 [更多请阅读...](https://www.robinwieruch.de/react-eslint-webpack-babel/)\n\n- 使用 [ESLint - Pluggable JavaScript linter](http://eslint.org/) 去强制执行代码检查。\n\n  _为什么：_\n\n  > 我们个人很喜欢 `eslint` ，不强制您也喜欢。它拥有支持更多的规则，配置规则的能力和添加自定义规则的能力。\n\n- 针对 JavaScript 我们使用[Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript) , [更多请阅读](https://www.gitbook.com/book/duk/airbnb-javascript-guidelines/details)。 请依据您的项目和您的团队选择使用所需的 JavaScript 代码风格。\n\n- 当使用[FlowType](https://flow.org/)的时候，我们使用 [ESLint 的 Flow 样式检查规则。](https://github.com/gajus/eslint-plugin-flowtype)。\n\n  _为什么：_\n\n  > Flow 引入了很少的语法，而这些语法仍然需要遵循代码风格并进行检查。\n\n- 使用 `.eslintignore` 将某些文件或文件夹从代码风格检查中排除。\n\n  _为什么：_\n\n  > 当您需要从风格检查中排除几个文件时，就再也不需要通过 `eslint-disable` 注释来污染您的代码了。\n\n- 在 Pull Request 之前，请删除任何 `eslint` 的禁用注释。\n\n  _为什么：_\n\n  > 在处理代码块时禁用风格检查是正常现象，这样就可以关注在业务逻辑。请记住把那些 `eslint-disable` 注释删除并遵循风格规则。\n\n- 根据任务的大小使用 `//TODO：` 注释或做一个标签（ticket）。\n\n  _为什么：_\n\n  > 这样您就可以提醒自己和他人有这样一个小的任务需要处理（如重构一个函数或更新一个注释）。对于较大的任务，可以使用由一个 lint 规则（`no-warning-comments`）强制要求其完成（并移除注释）的`//TODO（＃3456）`，其中的`#3456`号码是一个标签（ticket），方便查找且防止相似的注释堆积导致混乱。\n\n- 随着代码的变化，始终保持注释的相关性。删除那些注释掉的代码块。\n\n  _为什么：_\n\n  > 代码应该尽可能的可读，您应该摆脱任何分心的事情。如果您在重构一个函数，就不要注释那些旧代码，直接把要注释的代码删除吧。\n\n- 避免不相关的和搞笑的的注释，日志或命名。\n\n  _为什么：_\n\n  > 虽然您的构建过程中可能（应该）移除它们，但有可能您的源代码会被移交给另一个公司/客户，您的这些笑话应该无法逗乐您的客户。\n\n- 请使用有意义容易搜索的命名，避免缩写名称。对于函数使用长描述性命名。功能命名应该是一个动词或动词短语，需要能清楚传达意图的命名。\n\n  _为什么：_\n\n  > 它使读取源代码变得更加自然。\n\n- 依据《代码整洁之道》的 step-down 规则，对您的源代码文件中的函数（的声明）进行组织。高抽象级别的函数（调用了低级别函数的函数）在上，低抽象级别函数在下，（保证了阅读代码时遇到未出现的函数仍然是从上往下的顺序，而不会打断阅读顺序地往前查找并且函数的抽象层次依次递减）。\n\n  _为什么：_\n\n  > 它使源代码的可读性更好。\n\n<a name=\"enforcing-code-style-standards\"></a>\n\n### 7.2 强制的代码风格标准\n\n- 让您的编辑器提示您关于代码风格方面的错误。 请将 [eslint-plugin-prettier](https://github.com/prettier/eslint-plugin-prettier) 与 [eslint-config-prettier](https://github.com/prettier/eslint-config-prettier) 和您目前的 ESLint 配置一起搭配使用。 [更多请阅读...](https://github.com/prettier/eslint-config-prettier#installation)\n\n- 考虑使用 Git 钩子。\n\n  _为什么：_\n\n  > Git 的钩子能大幅度地提升开发者的生产力。在做出改变、提交、推送至暂存区或者生产环境的过程中（充分检验代码），再也不需要担心（推送的代码会导致）构建失败。 [更多请阅读...](http://githooks.com/)\n\n- 将 Git 的 precommit 钩子与 Prettier 结合使用。\n\n  _为什么：_\n\n  > 虽然`prettier`自身已经非常强大，但是每次将其作为单独的一个 npm 任务去格式化代码，并不是那么地高效。 这正是`lint-staged`（还有`husky`）可以解决的地方。关于如何配置 `lint-staged` 请阅读[这里](https://github.com/okonet/lint-staged#configuration) 以及如何配置 `husky` 请阅读[这里](https://github.com/typicode/husky)。\n\n<a name=\"logging\"></a>\n\n## 8. 日志\n\n![日志](/images/logging.png)\n\n- 避免在生产环境中使用客户端的控制台日志。\n\n  _为什么：_\n\n  > 您在构建过程可以把（应该）它们去掉，但是请确保您在代码风格检查中提供了有关控制台日志的警告信息。\n\n- 产出生产环境的可读生产日志记录。一般使用在生产模式下所使用的日志记录库 (比如 [winston](https://github.com/winstonjs/winston) 或者\n  [node-bunyan](https://github.com/trentm/node-bunyan))。\n\n  _为什么：_\n\n  > 它通过添加着色、时间戳、log 到控制台或者文件中，甚至是夜以继日地轮流 log 到文件，来减少故障排除中那些令人不愉快的事情。[更多请阅读...](https://blog.risingstack.com/node-js-logging-tutorial/)\n\n<a name=\"api\"></a>\n\n## 9. API\n\n![API](/images/api.png)\n\n<a name=\"api-design\"></a>\n\n### 9.1 API 设计\n\n_为什么：_\n\n> 因为我们试图实施开发出结构稳健的 Restful 接口，让团队成员和客户可以简单而一致地使用它们。\n\n_为什么：_\n\n> 缺乏一致性和简单性会大大增加集成和维护的成本。这就是为什么`API设计`这部分会包含在这个文档中的原因\n\n- 我们主要遵循资源导向的设计方式。它有三个主要要素：资源，集合和 URLs。\n\n  - 资源具有数据，嵌套，和一些操作方法。\n  - 一组资源称为一个集合。\n  - URL 标识资源或集合的线上位置。\n\n  _为什么：_\n\n  > 这是针对开发人员（您的主要 API 使用者）非常著名的设计方式。除了可读性和易用性之外，它还允许我们在无需了解 API 细节的情况下编写通用库和一些连接器。\n\n- 使用`kebab-case`（短横线分割）的 URL。\n- 在查询字符串或资源字段中使用`camelCase`模式。\n- 在 URL 中使用多个`kebab-case`作为资源名称。\n\n- 总是使用复数名词来命名指向一个集合的 url：`/users`.\n\n  _为什么：_\n\n  > 基本上，它可读性会更好，并可以保持 URL 的一致性。 [更多请阅读...](https://apigee.com/about/blog/technology/restful-api-design-plural-nouns-and-concrete-names)\n\n- 在源代码中，将复数转换为具有列表后缀名描述的变量和属性。\n\n  _为什么：_\n\n  > 复数形式的 URL 非常好，但在源代码中使用它却很微妙而且容易出错，所以要小心谨慎。\n\n- 坚持这样一个概念：始终以集合名起始并以标识符结束。\n\n  ```\n  /students/245743\n  /airports/kjfk\n  ```\n\n- 避免这样的网址：\n\n  ```\n  GET /blogs/:blogId/posts/:postId/summary\n  ```\n\n  _为什么：_\n\n  > 这不是在指向资源，而是在指向属性。您完全可以将属性作为参数传递，以减少响应。\n\n- URLs 里面请尽量少用动词\n\n  _为什么：_\n\n  > 因为如果您为每个资源操作使用一个动词，您很快就会维护一个很大的 URL 列表，而且没有一致的使用模式，这会使开发人员难以学习。此外，我们还要使用动词做别的事情。\n\n- 为非资源型请求使用动词。在这种情况下，您的 API 并不需要返回任何资源。而是去执行一个操作并返回执行结果。这些**不是** CRUD（创建，查询，更新和删除）操作：\n\n  ```\n  /translate?text=Hallo\n  ```\n\n  _为什么：_\n\n  > 因为对于 CRUD，我们在`资源`或`集合`URL 上使用 HTTP 自己带的方法。我们所说的动词实际上是指`Controllers`。您通常不会开发这些东西。[更多请阅读...](https://github.com/byrondover/api-guidelines/blob/master/Guidelines.md#controller)\n\n- 请求体或响应类型如果是 JSON，那么请遵循`camelCase`规范为`JSON`属性命名来保持一致性。\n\n  _为什么：_\n\n  > 这是一个 JavaScript 项目指南，其中用于生成 JSON 的编程语言以及用于解析 JSON 的编程语言被假定为 JavaScript。\n\n- 即使资源类似于对象实例或数据库记录这样的单一概念，您也不应该将`table_name`用作资源名称或将`column_name`作为资源属性。\n\n  _为什么：_\n\n  > 因为您的目的是分析资源，而不是分析数据库模式。\n\n- 再次，只有在您的 URL 上面命名资源时才使用名词，不要尝试解释其功能。\n\n  _为什么：_\n\n  > 只能在资源 URL 中使用名词，避免像`/addNewUser`或`/updateUser`这样的结束点。也避免使用参数作为发送资源的操作。\n\n- 如何使用 HTTP 方法来操作 CRUD 功能\n\n  _怎么做：_\n\n  > `GET`: 查询资源的表示法\n\n  > `POST`: 创建一些新的资源或者子资源\n\n  > `PUT`: 更新一个存在的资源\n\n  > `PATCH`: 更新现有资源。它只更新所提供的字段，不管其他字段\n\n  > `DELETE`: 删除一个存在的资源\n\n- 对于嵌套资源，请在 URL 中把他们的关系表现出来。例如，使用`id`将员工与公司联系起来。\n\n  _为什么：_\n\n  > 这是一种自然的方式，方便资源的认知。\n\n  _怎么做：_\n\n  > `GET      /schools/2/students    ` , 应该从学校 2 得到所有学生的名单\n\n  > `GET      /schools/2/students/31` , 应该得到学生 31 的详细信息，且此学生属于学校 2\n\n  > `DELETE   /schools/2/students/31` , 应删除属于学校 2 的学生 31\n\n  > `PUT      /schools/2/students/31` , 应该更新学生 31 的信息，仅在资源 URL 上使用 PUT 方式，而不要用收集\n\n  > `POST     /schools` , 应该创建一所新学校，并返回创建的新学校的细节。在集合 URL 上使用 POST\n\n- 对于具有`v`前缀（v1，v2）的版本，使用简单的序数。并将其移到 URL 的左侧，使其具有最高的范围表述：\n\n  ```\n  http://api.domain.com/v1/schools/3/students\n  ```\n\n  _为什么：_\n\n  > 当您的 API 为第三方公开时，升级 API 会导致发生一些意料之外的影响，也可能导致使用您 API 的人无法使用您的服务和产品。而这时使用 URL 中版本化可以防止这种情况的发生。 [更多请阅读...](https://apigee.com/about/blog/technology/restful-api-design-tips-versioning)\n\n- 响应消息必须是自我描述的。一个很好的错误消息响应可能如下所示：\n\n  ```json\n  {\n  \t\"code\": 1234,\n  \t\"message\": \"Something bad happened\",\n  \t\"description\": \"More details\"\n  }\n  ```\n\n  或验证错误:\n\n  ```json\n  {\n  \t\"code\": 2314,\n  \t\"message\": \"Validation Failed\",\n  \t\"errors\": [\n  \t\t{\n  \t\t\t\"code\": 1233,\n  \t\t\t\"field\": \"email\",\n  \t\t\t\"message\": \"Invalid email\"\n  \t\t},\n  \t\t{\n  \t\t\t\"code\": 1234,\n  \t\t\t\"field\": \"password\",\n  \t\t\t\"message\": \"No password provided\"\n  \t\t}\n  \t]\n  }\n  ```\n\n  _为什么：_\n\n  > 开发人员在使用这些由 API​​ 构建的应用程序时，难免会需要在故障排除和解决问题的关键时刻使用到这些精心设计的错误消息。好的错误消息设计能节约大量的问题排查时间。\n\n  \\_注意：尽可能保持安全异常消息的通用性。例如，别说`不正确的密码`，您可以换成`无效的用户名或密码`，以免我们不知不觉地通知用户他的用户名确实是正确的，只有密码不正确。这会让用户很懵逼。\n\n- 只使用这 8 个状态代码，并配合您自定义的响应描述来表述程序工作**一切是否正常**，**客户端应用程序发生了什么错误**或**API 发生错误**。\n\n  _选谁呢：_\n\n  > `200 OK` `GET`, `PUT` 或 `POST` 请求响应成功.\n\n  > `201 Created` 标识一个新实例创建成功。当创建一个新的实例，请使用`POST`方法并返回`201`状态码。\n\n  > `304 Not Modified` 发现资源已经缓存在本地，浏览器会自动减少请求次数。\n\n  > `400 Bad Request` 请求未被处理，因为服务器不能理解客户端是要什么。\n\n  > `401 Unauthorized` 因为请求缺少有效的凭据，应该使用所需的凭据重新发起请求。\n\n  > `403 Forbidden` 意味着服务器理解本次请求，但拒绝授权。\n\n  > `404 Not Found` 表示未找到请求的资源。\n\n  > `500 Internal Server Error` 表示请求本身是有效，但由于某些意外情况，服务器无法实现，服务器发生了故障。\n\n  _为什么：_\n\n  > 大多数 API 提供程序仅仅只使用一小部分 HTTP 状态代码而已。例如，Google GData API 仅使用了 10 个状态代码，Netflix 使用了 9 个，而 Digg 只使用了 8 个。当然，这些响应作为响应主体的附加信息。一共有超过 70 个 HTTP 状态代码。然而，大多数开发者不可能全部记住这 70 个状态码。因此，如果您选择不常用的状态代码，您将使应用程序开发人员厌烦构建应用程序，然后您还要跑到维基百科上面找出您要告诉他们的内容，多累啊。 [更多请阅读...](https://apigee.com/about/blog/technology/restful-api-design-what-about-errors)\n\n- 在您的响应中提供资源的总数\n- 接受`limit`和`offset`参数\n\n- 还应考虑资源暴露的数据量。 API 消费者并不总是需要资源的完整表述。可以使用一个字段查询参数，该参数用逗号分隔的字段列表来包括：\n  ```\n  GET /student?fields=id,name,age,class\n  ```\n- 分页，过滤和排序功能并不需要从所有资源一开始就要得到支持。记录下那些提供过滤和排序的资源。\n\n<a name=\"api-security\"></a>\n\n### 9.2 API 安全\n\n这些是一些基本的安全最佳实践：\n\n- 除非通过安全的连接（HTTPS），否则不要只使用基本认证。不要在 URL 中传输验证令牌：`GET /users/123?token=asdf....`\n\n  _为什么：_\n\n  > 因为令牌、用户 ID 和密码通过网络是明文传递的（它是 base64 编码，而 base64 是可逆编码），所以基本认证方案是不安全的。 [更多请阅读...](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication)\n\n- 必须使用授权请求头在每个请求上发送令牌：`Authorization: Bearer xxxxxx, Extra yyyyy`\n\n- 授权代码应该是短暂的。\n\n- 通过不响应任何 HTTP 请求来拒绝任何非 TLS 请求，以避免任何不安全的数据交换。响应`403 Forbidden`的 HTTP 请求。\n\n- 考虑使用速率限制\n\n  _为什么：_\n\n  > 保护您的 API 免受每小时数千次的机器人扫描威胁。您应该在早期就考虑实施流控。\n\n- 适当地设置 HTTP 请求头可以帮助锁定和保护您的 Web 应用程序。[更多请阅读...](https://github.com/helmetjs/helmet)\n\n- 您的 API 应将收到的数据转换为规范形式，或直接拒绝响应，并返回 400 错误请求（400 Bad Request）的错误，并在其中包含有关错误或丢失数据的详细信息。\n\n- 所有通过 Rest API 交换的数据必须由 API 来校验。\n\n- 序列化 JSON\n\n  _为什么：_\n\n  > JSON 编码器的一个关键问题是阻止任意的可执行代码在浏览器或在服务器中（如果您用 nodejs 的话）执行。您必须使用适当的 JSON 序列化程序对用户输入的数据进行正确编码，以防止在浏览器上执行用户提供的输入，这些输入可能会包含恶意代码，而不是正常的用户数据。\n\n- 验证内容类型，主要使用`application/*.json`（Content-Type 头字段）.\n\n  _为什么：_\n\n  > 例如，接受`application/x-www-form-urlencoded`MIME 类型可以允许攻击者创建一个表单并触发一个简单的 POST 请求。服务器不应该假定`Content-Type`。缺少`Content-Type`请求头或异常的`Content-Type`请求头，应该让服务器直接以`4XX`响应内容去拒绝请求。\n\n<a name=\"api-documentation\"></a>\n\n### 9.3 API 文档\n\n- 在[README.md 模板](./README.sample.md)为 API 填写 `API Reference` 段落。\n- 尽量使用示例代码来描述 API 授权方法\n- 解释 URL 的结构（仅 path，不包括根 URL），包括请求类型（方法）\n\n对于每个端点（endpoint）说明：\n\n- 如果存在 URL 参数就使用 URL 参数，并根据 URL 中使用到的名称来指定它们：\n\n  ```\n  Required: id=[integer]\n  Optional: photo_id=[alphanumeric]\n  ```\n\n- 如果请求类型为 POST，请提供如何使用的示例。上述的 URL 参数规则在这也可以适用。分为`可选`和`必需`。\n\n- 响应成功，应该对应什么样的状态代码，返回了哪些数据？当人们需要知道他们的回调应该是期望的样子，这很有用：\n\n  ```\n  Code: 200\n  Content: { id : 12 }\n  ```\n\n- 错误响应，大多数端点都存在许多失败的可能。从未经授权的访问到错误参数等。所有的（错误描述信息）都应该列在这里。虽然有可能会重复，但它却有助于防止别人的猜想（，减少使用时的排错时间）。例如\n\n  ```json\n  {\n  \t\"code\": 403,\n  \t\"message\": \"Authentication failed\",\n  \t\"description\": \"Invalid username or password\"\n  }\n  ```\n\n- 使用 API​​ 设计工具，有很多开源工具可用于提供良好的文档，例如 [API Blueprint](https://apiblueprint.org/) and [Swagger](https://swagger.io/).\n\n<a name=\"licensing\"></a>\n\n## 10. 证书\n\n![证书](/images/licensing.png)\n\n确保您有权使用的这些资源。如果您使用其中的软件库，请记住先查询 MIT，Apache 或 BSD（以更好地了解您所能够拥有的权限），但如果您打算修改它们，请查看许可证详细信息。图像和视频的版权可能会导致法律问题。\n\n---\n\n资源:\n[RisingStack Engineering](https://blog.risingstack.com/),\n[Mozilla Developer Network](https://developer.mozilla.org/),\n[Heroku Dev Center](https://devcenter.heroku.com),\n[Airbnb/javascript](https://github.com/airbnb/javascript),\n[Atlassian Git tutorials](https://www.atlassian.com/git/tutorials),\n[Apigee](https://apigee.com/about/blog),\n[Wishtack](https://blog.wishtack.com)\n\n本文件图标来自 [icons8](https://icons8.com/)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 42.4150390625,
          "content": "[中文版](./README-zh.md)\n| [日本語版](./README-ja.md)\n| [한국어](./README-ko.md)\n| [Русский](./README-ru.md)\n| [Português](./README-pt-BR.md)\n| [Italiana](./README-it.md)\n| [Persian/فارسی](./README-ir.md)\n\n[<img src=\"./images/elsewhen-logo.png\" width=\"180\" height=\"180\">](https://www.elsewhen.com/)\n\n# Project Guidelines &middot; [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n\n> While developing a new project is like rolling on a green field for you, maintaining it is a potential dark twisted nightmare for someone else.\n> Here's a list of guidelines we've found, written and gathered that (we think) works really well with most JavaScript projects here at [elsewhen](https://www.elsewhen.com).\n> If you want to share a best practice, or think one of these guidelines should be removed, [feel free to share it with us](http://makeapullrequest.com).\n\n<hr>\n\n- [Git](#git)\n  - [Some Git rules](#some-git-rules)\n  - [Git workflow](#git-workflow)\n  - [Writing good commit messages](#writing-good-commit-messages)\n- [Documentation](#documentation)\n- [Environments](#environments)\n  - [Consistent dev environments](#consistent-dev-environments)\n  - [Consistent dependencies](#consistent-dependencies)\n- [Dependencies](#dependencies)\n- [Testing](#testing)\n- [Structure and Naming](#structure-and-naming)\n- [Code style](#code-style)\n  - [Some code style guidelines](#code-style-check)\n  - [Enforcing code style standards](#enforcing-code-style-standards)\n- [Logging](#logging)\n- [API](#api)\n  - [API design](#api-design)\n  - [API security](#api-security)\n  - [API documentation](#api-documentation)\n- [Accessibility](#a11y)\n- [Licensing](#licensing)\n\n<a name=\"git\"></a>\n\n## 1. Git\n\n![Git](/images/branching.png)\n<a name=\"some-git-rules\"></a>\n\n### 1.1 Some Git rules\n\nThere are a set of rules to keep in mind:\n\n- Perform work in a feature branch.\n\n  _Why:_\n\n  > Because this way all work is done in isolation on a dedicated branch rather than the main branch. It allows you to submit multiple pull requests without confusion. You can iterate without polluting the master branch with potentially unstable, unfinished code. [read more...](https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow)\n\n- Branch out from `develop`\n\n  _Why:_\n\n  > This way, you can make sure that code in master will almost always build without problems, and can be mostly used directly for releases (this might be overkill for some projects).\n\n- Never push into `develop` or `master` branch. Make a Pull Request.\n\n  _Why:_\n\n  > It notifies team members that they have completed a feature. It also enables easy peer-review of the code and dedicates forum for discussing the proposed feature.\n\n- Update your local `develop` branch and do an interactive rebase before pushing your feature and making a Pull Request.\n\n  _Why:_\n\n  > Rebasing will merge in the requested branch (`master` or `develop`) and apply the commits that you have made locally to the top of the history without creating a merge commit (assuming there were no conflicts). Resulting in a nice and clean history. [read more ...](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)\n\n- Resolve potential conflicts while rebasing and before making a Pull Request.\n- Delete local and remote feature branches after merging.\n\n  _Why:_\n\n  > It will clutter up your list of branches with dead branches. It ensures you only ever merge the branch back into (`master` or `develop`) once. Feature branches should only exist while the work is still in progress.\n\n- Before making a Pull Request, make sure your feature branch builds successfully and passes all tests (including code style checks).\n\n  _Why:_\n\n  > You are about to add your code to a stable branch. If your feature-branch tests fail, there is a high chance that your destination branch build will fail too. Additionally, you need to apply code style check before making a Pull Request. It aids readability and reduces the chance of formatting fixes being mingled in with actual changes.\n\n- Use [this](./.gitignore) `.gitignore` file.\n\n  _Why:_\n\n  > It already has a list of system files that should not be sent with your code into a remote repository. In addition, it excludes setting folders and files for most used editors, as well as most common dependency folders.\n\n- Protect your `develop` and `master` branch.\n\n  _Why:_\n\n  > It protects your production-ready branches from receiving unexpected and irreversible changes. read more... [GitHub](https://help.github.com/articles/about-protected-branches/), [Bitbucket](https://confluence.atlassian.com/bitbucketserver/using-branch-permissions-776639807.html) and [GitLab](https://docs.gitlab.com/ee/user/project/protected_branches.html)\n\n<a name=\"git-workflow\"></a>\n\n### 1.2 Git workflow\n\nBecause of most of the reasons above, we use [Feature-branch-workflow](https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow) with [Interactive Rebasing](https://www.atlassian.com/git/tutorials/merging-vs-rebasing#the-golden-rule-of-rebasing) and some elements of [Gitflow](https://www.atlassian.com/git/tutorials/comparing-workflows#gitflow-workflow) (naming and having a develop branch). The main steps are as follows:\n\n- For a new project, initialize a git repository in the project directory. **For subsequent features/changes this step should be ignored**.\n\n  ```sh\n  cd <project directory>\n  git init\n  ```\n\n- Checkout a new feature/bug-fix branch.\n  ```sh\n  git checkout -b <branchname>\n  ```\n- Make Changes.\n\n  ```sh\n  git add <file1> <file2> ...\n  git commit\n  ```\n\n  _Why:_\n\n  > `git add <file1> <file2> ... ` - you should add only files that make up a small and coherent change.\n\n  > `git commit` will start an editor which lets you separate the subject from the body.\n\n  > Read more about it in _section 1.3_.\n\n  _Tip:_\n\n  > You could use `git add -p` instead, which will give you chance to review all of the introduced changes one by one, and decide whether to include them in the commit or not.\n\n- Sync with remote to get changes you’ve missed.\n  ```sh\n  git checkout develop\n  git pull\n  ```\n  _Why:_\n  > This will give you a chance to deal with conflicts on your machine while rebasing (later) rather than creating a Pull Request that contains conflicts.\n- Update your feature branch with latest changes from develop by interactive rebase.\n  ```sh\n  git checkout <branchname>\n  git rebase -i --autosquash develop\n  ```\n  _Why:_\n  > You can use --autosquash to squash all your commits to a single commit. Nobody wants many commits for a single feature in develop branch. [read more...](https://robots.thoughtbot.com/autosquashing-git-commits)\n- If you don’t have conflicts, skip this step. If you have conflicts, [resolve them](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/) and continue rebase.\n  ```sh\n  git add <file1> <file2> ...\n  git rebase --continue\n  ```\n- Push your branch. Rebase will change history, so you'll have to use `-f` to force changes into the remote branch. If someone else is working on your branch, use the less destructive `--force-with-lease`.\n  ```sh\n  git push -f\n  ```\n  _Why:_\n  > When you do a rebase, you are changing the history on your feature branch. As a result, Git will reject normal `git push`. Instead, you'll need to use the -f or --force flag. [read more...](https://developer.atlassian.com/blog/2015/04/force-with-lease/)\n- Make a Pull Request.\n- Pull request will be accepted, merged and close by a reviewer.\n- Remove your local feature branch if you're done.\n\n  ```sh\n  git branch -d <branchname>\n  ```\n\n  to remove all branches which are no longer on remote\n\n  ```sh\n  git fetch -p && for branch in `git branch -vv --no-color | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done\n  ```\n\n<a name=\"writing-good-commit-messages\"></a>\n\n### 1.3 Writing good commit messages\n\nHaving a good guideline for creating commits and sticking to it makes working with Git and collaborating with others a lot easier. Here are some rules of thumb ([source](https://chris.beams.io/posts/git-commit/#seven-rules)):\n\n- Separate the subject from the body with a newline between the two.\n\n  _Why:_\n\n  > Git is smart enough to distinguish the first line of your commit message as your summary. In fact, if you try git shortlog, instead of git log, you will see a long list of commit messages, consisting of the id of the commit, and the summary only.\n\n- Limit the subject line to 50 characters and Wrap the body at 72 characters.\n\n  _why_\n\n  > Commits should be as fine-grained and focused as possible, it is not the place to be verbose. [read more...](https://medium.com/@preslavrachev/what-s-with-the-50-72-rule-8a906f61f09c)\n\n- Capitalize the subject line.\n- Do not end the subject line with a period.\n- Use [imperative mood](https://en.wikipedia.org/wiki/Imperative_mood) in the subject line.\n\n  _Why:_\n\n  > Rather than writing messages that say what a committer has done. It's better to consider these messages as the instructions for what is going to be done after the commit is applied on the repository. [read more...](https://news.ycombinator.com/item?id=2079612)\n\n- Use the body to explain **what** and **why** as opposed to **how**.\n\n<a name=\"documentation\"></a>\n\n## 2. Documentation\n\n![Documentation](/images/documentation.png)\n\n- Use this [template](./README.sample.md) for `README.md`, Feel free to add uncovered sections.\n- For projects with more than one repository, provide links to them in their respective `README.md` files.\n- Keep `README.md` updated as a project evolves.\n- Comment your code. Try to make it as clear as possible what you are intending with each major section.\n- If there is an open discussion on GitHub or stackoverflow about the code or approach you're using, include the link in your comment.\n- Don't use comments as an excuse for a bad code. Keep your code clean.\n- Don't use clean code as an excuse to not comment at all.\n- Keep comments relevant as your code evolves.\n\n<a name=\"environments\"></a>\n\n## 3. Environments\n\n![Environments](/images/laptop.png)\n\n- Define separate `development`, `test` and `production` environments if needed.\n\n  _Why:_\n\n  > Different data, tokens, APIs, ports etc... might be needed in different environments. You may want an isolated `development` mode that calls fake API which returns predictable data, making both automated and manual testing much easier. Or you may want to enable Google Analytics only on `production` and so on. [read more...](https://stackoverflow.com/questions/8332333/node-js-setting-up-environment-specific-configs-to-be-used-with-everyauth)\n\n- Load your deployment specific configurations from environment variables and never add them to the codebase as constants, [look at this sample](./config.sample.js).\n\n  _Why:_\n\n  > You have tokens, passwords and other valuable information in there. Your config should be correctly separated from the app internals as if the codebase could be made public at any moment.\n\n  _How:_\n\n  > `.env` files to store your variables and add them to `.gitignore` to be excluded. Instead, commit a `.env.example` which serves as a guide for developers. For production, you should still set your environment variables in the standard way.\n  > [read more](https://medium.com/@rafaelvidaurre/managing-environment-variables-in-node-js-2cb45a55195f)\n\n- It’s recommended to validate environment variables before your app starts. [Look at this sample](./configWithTest.sample.js) using `joi` to validate provided values.\n  _Why:_\n  > It may save others from hours of troubleshooting.\n\n<a name=\"consistent-dev-environments\"></a>\n\n### 3.1 Consistent dev environments:\n\n- Set your node version in `engines` in `package.json`.\n\n  _Why:_\n\n  > It lets others know the version of node the project works on. [read more...](https://docs.npmjs.com/files/package.json#engines)\n\n- Additionally, use `nvm` and create a `.nvmrc` in your project root. Don't forget to mention it in the documentation.\n\n  _Why:_\n\n  > Any one who uses `nvm` can simply use `nvm use` to switch to the suitable node version. [read more...](https://github.com/creationix/nvm)\n\n- It's a good idea to setup a `preinstall` script that checks node and npm versions.\n\n  _Why:_\n\n  > Some dependencies may fail when installed by newer versions of npm.\n\n- Use Docker image if you can.\n\n  _Why:_\n\n  > It can give you a consistent environment across the entire workflow. Without much need to fiddle with dependencies or configs. [read more...](https://hackernoon.com/how-to-dockerize-a-node-js-application-4fbab45a0c19)\n\n- Use local modules instead of using globally installed modules.\n\n  _Why:_\n\n  > Lets you share your tooling with your colleague instead of expecting them to have it globally on their systems.\n\n<a name=\"consistent-dependencies\"></a>\n\n### 3.2 Consistent dependencies:\n\n- Make sure your team members get the exact same dependencies as you.\n\n  _Why:_\n\n  > Because you want the code to behave as expected and identical in any development machine [read more...](https://kostasbariotis.com/consistent-dependencies-across-teams/)\n\n  _how:_\n\n  > Use `package-lock.json` on `npm@5` or higher\n\n  _I don't have npm@5:_\n\n  > Alternatively you can use `Yarn` and make sure to mention it in `README.md`. Your lock file and `package.json` should have the same versions after each dependency update. [read more...](https://yarnpkg.com/en/)\n\n  _I don't like the name `Yarn`:_\n\n  > Too bad. For older versions of `npm`, use `—save --save-exact` when installing a new dependency and create `npm-shrinkwrap.json` before publishing. [read more...](https://docs.npmjs.com/files/package-locks)\n\n<a name=\"dependencies\"></a>\n\n## 4. Dependencies\n\n![Github](/images/modules.png)\n\n- Keep track of your currently available packages: e.g., `npm ls --depth=0`. [read more...](https://docs.npmjs.com/cli/ls)\n- See if any of your packages have become unused or irrelevant: `depcheck`. [read more...](https://www.npmjs.com/package/depcheck)\n\n  _Why:_\n\n  > You may include an unused library in your code and increase the production bundle size. Find unused dependencies and get rid of them.\n\n- Before using a dependency, check its download statistics to see if it is heavily used by the community: `npm-stat`. [read more...](https://npm-stat.com/)\n\n  _Why:_\n\n  > More usage mostly means more contributors, which usually means better maintenance, and all of these result in quickly discovered bugs and quickly developed fixes.\n\n- Before using a dependency, check to see if it has a good, mature version release frequency with a large number of maintainers: e.g., `npm view async`. [read more...](https://docs.npmjs.com/cli/view)\n\n  _Why:_\n\n  > Having loads of contributors won't be as effective if maintainers don't merge fixes and patches quickly enough.\n\n- If a less known dependency is needed, discuss it with the team before using it.\n- Always make sure your app works with the latest version of its dependencies without breaking: `npm outdated`. [read more...](https://docs.npmjs.com/cli/outdated)\n\n  _Why:_\n\n  > Dependency updates sometimes contain breaking changes. Always check their release notes when updates show up. Update your dependencies one by one, that makes troubleshooting easier if anything goes wrong. Use a cool tool such as [npm-check-updates](https://github.com/tjunnone/npm-check-updates).\n\n- Check to see if the package has known security vulnerabilities with, e.g., [Snyk](https://snyk.io/test?utm_source=risingstack_blog).\n\n<a name=\"testing\"></a>\n\n## 5. Testing\n\n![Testing](/images/testing.png)\n\n- Have a `test` mode environment if needed.\n\n  _Why:_\n\n  > While sometimes end to end testing in `production` mode might seem enough, there are some exceptions: One example is you may not want to enable analytical information on a 'production' mode and pollute someone's dashboard with test data. The other example is that your API may have rate limits in `production` and blocks your test calls after a certain amount of requests.\n\n- Place your test files next to the tested modules using `*.test.js` or `*.spec.js` naming convention, like `moduleName.spec.js`.\n\n  _Why:_\n\n  > You don't want to dig through a folder structure to find a unit test. [read more...](https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc)\n\n- Put your additional test files into a separate test folder to avoid confusion.\n\n  _Why:_\n\n  > Some test files don't particularly relate to any specific implementation file. You have to put it in a folder that is most likely to be found by other developers: `__test__` folder. This name: `__test__` is also standard now and gets picked up by most JavaScript testing frameworks.\n\n- Write testable code, avoid side effects, extract side effects, write pure functions\n\n  _Why:_\n\n  > You want to test a business logic as separate units. You have to \"minimize the impact of randomness and nondeterministic processes on the reliability of your code\". [read more...](https://medium.com/javascript-scene/tdd-the-rite-way-53c9b46f45e3)\n\n  > A pure function is a function that always returns the same output for the same input. Conversely, an impure function is one that may have side effects or depends on conditions from the outside to produce a value. That makes it less predictable. [read more...](https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc)\n\n- Use a static type checker\n\n  _Why:_\n\n  > Sometimes you may need a Static type checker. It brings a certain level of reliability to your code. [read more...](https://medium.freecodecamp.org/why-use-static-types-in-javascript-part-1-8382da1e0adb)\n\n- Run tests locally before making any pull requests to `develop`.\n\n  _Why:_\n\n  > You don't want to be the one who caused production-ready branch build to fail. Run your tests after your `rebase` and before pushing your feature-branch to a remote repository.\n\n- Document your tests including instructions in the relevant section of your `README.md` file.\n\n  _Why:_\n\n  > It's a handy note you leave behind for other developers or DevOps experts or QA or anyone who gets lucky enough to work on your code.\n\n<a name=\"structure-and-naming\"></a>\n\n## 6. Structure and Naming\n\n![Structure and Naming](/images/folder-tree.png)\n\n- Organize your files around product features / pages / components, not roles. Also, place your test files next to their implementation.\n\n  **Bad**\n\n  ```\n  .\n  ├── controllers\n  |   ├── product.js\n  |   └── user.js\n  ├── models\n  |   ├── product.js\n  |   └── user.js\n  ```\n\n  **Good**\n\n  ```\n  .\n  ├── product\n  |   ├── index.js\n  |   ├── product.js\n  |   └── product.test.js\n  ├── user\n  |   ├── index.js\n  |   ├── user.js\n  |   └── user.test.js\n  ```\n\n  _Why:_\n\n  > Instead of a long list of files, you will create small modules that encapsulate one responsibility including its test and so on. It gets much easier to navigate through and things can be found at a glance.\n\n- Put your additional test files to a separate test folder to avoid confusion.\n\n  _Why:_\n\n  > It is a time saver for other developers or DevOps experts in your team.\n\n- Use a `./config` folder and don't make different config files for different environments.\n\n  _Why:_\n\n  > When you break down a config file for different purposes (database, API and so on); putting them in a folder with a very recognizable name such as `config` makes sense. Just remember not to make different config files for different environments. It doesn't scale cleanly, as more deploys of the app are created, new environment names are necessary.\n  > Values to be used in config files should be provided by environment variables. [read more...](https://medium.com/@fedorHK/no-config-b3f1171eecd5)\n\n- Put your scripts in a `./scripts` folder. This includes `bash` and `node` scripts.\n\n  _Why:_\n\n  > It's very likely you may end up with more than one script, production build, development build, database feeders, database synchronization and so on.\n\n- Place your build output in a `./build` folder. Add `build/` to `.gitignore`.\n\n  _Why:_\n\n  > Name it what you like, `dist` is also cool. But make sure that keep it consistent with your team. What gets in there is most likely generated (bundled, compiled, transpiled) or moved there. What you can generate, your teammates should be able to generate too, so there is no point committing them into your remote repository. Unless you specifically want to.\n\n<a name=\"code-style\"></a>\n\n## 7. Code style\n\n![Code style](/images/code-style.png)\n\n<a name=\"code-style-check\"></a>\n\n### 7.1 Some code style guidelines\n\n- Use stage-2 and higher JavaScript (modern) syntax for new projects. For old project stay consistent with existing syntax unless you intend to modernise the project.\n\n  _Why:_\n\n  > This is all up to you. We use transpilers to use advantages of new syntax. stage-2 is more likely to eventually become part of the spec with only minor revisions.\n\n- Include code style check in your build process.\n\n  _Why:_\n\n  > Breaking your build is one way of enforcing code style to your code. It prevents you from taking it less seriously. Do it for both client and server-side code. [read more...](https://www.robinwieruch.de/react-eslint-webpack-babel/)\n\n- Use [ESLint - Pluggable JavaScript linter](http://eslint.org/) to enforce code style.\n\n  _Why:_\n\n  > We simply prefer `eslint`, you don't have to. It has more rules supported, the ability to configure the rules, and ability to add custom rules.\n\n- We use [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript) for JavaScript, [Read more](https://www.gitbook.com/book/duk/airbnb-javascript-guidelines/details). Use the javascript style guide required by the project or your team.\n\n- We use [Flow type style check rules for ESLint](https://github.com/gajus/eslint-plugin-flowtype) when using [FlowType](https://flow.org/).\n\n  _Why:_\n\n  > Flow introduces few syntaxes that also need to follow certain code style and be checked.\n\n- Use `.eslintignore` to exclude files or folders from code style checks.\n\n  _Why:_\n\n  > You don't have to pollute your code with `eslint-disable` comments whenever you need to exclude a couple of files from style checking.\n\n- Remove any of your `eslint` disable comments before making a Pull Request.\n\n  _Why:_\n\n  > It's normal to disable style check while working on a code block to focus more on the logic. Just remember to remove those `eslint-disable` comments and follow the rules.\n\n- Depending on the size of the task use `//TODO:` comments or open a ticket.\n\n  _Why:_\n\n  > So then you can remind yourself and others about a small task (like refactoring a function or updating a comment). For larger tasks use `//TODO(#3456)` which is enforced by a lint rule and the number is an open ticket.\n\n- Always comment and keep them relevant as code changes. Remove commented blocks of code.\n\n  _Why:_\n\n  > Your code should be as readable as possible, you should get rid of anything distracting. If you refactored a function, don't just comment out the old one, remove it.\n\n- Avoid irrelevant or funny comments, logs or naming.\n\n  _Why:_\n\n  > While your build process may(should) get rid of them, sometimes your source code may get handed over to another company/client and they may not share the same banter.\n\n- Make your names search-able with meaningful distinctions avoid shortened names. For functions use long, descriptive names. A function name should be a verb or a verb phrase, and it needs to communicate its intention.\n\n  _Why:_\n\n  > It makes it more natural to read the source code.\n\n- Organize your functions in a file according to the step-down rule. Higher level functions should be on top and lower levels below.\n\n  _Why:_\n\n  > It makes it more natural to read the source code.\n\n<a name=\"enforcing-code-style-standards\"></a>\n\n### 7.2 Enforcing code style standards\n\n- Use a [.editorconfig](http://editorconfig.org/) file which helps developers define and maintain consistent coding styles between different editors and IDEs on the project.\n\n  _Why:_\n\n  > The EditorConfig project consists of a file format for defining coding styles and a collection of text editor plugins that enable editors to read the file format and adhere to defined styles. EditorConfig files are easily readable and they work nicely with version control systems.\n\n- Have your editor notify you about code style errors. Use [eslint-plugin-prettier](https://github.com/prettier/eslint-plugin-prettier) and [eslint-config-prettier](https://github.com/prettier/eslint-config-prettier) with your existing ESLint configuration. [read more...](https://github.com/prettier/eslint-config-prettier#installation)\n\n- Consider using Git hooks.\n\n  _Why:_\n\n  > Git hooks greatly increase a developer's productivity. Make changes, commit and push to staging or production environments without the fear of breaking builds. [read more...](http://githooks.com/)\n\n- Use Prettier with a precommit hook.\n\n  _Why:_\n\n  > While `prettier` itself can be very powerful, it's not very productive to run it simply as an npm task alone each time to format code. This is where `lint-staged` (and `husky`) come into play. Read more on configuring `lint-staged` [here](https://github.com/okonet/lint-staged#configuration) and on configuring `husky` [here](https://github.com/typicode/husky).\n\n<a name=\"logging\"></a>\n\n## 8. Logging\n\n![Logging](/images/logging.png)\n\n- Avoid client-side console logs in production\n\n  _Why:_\n\n  > Even though your build process can (should) get rid of them, make sure that your code style checker warns you about leftover console logs.\n\n- Produce readable production logging. Ideally use logging libraries to be used in production mode (such as [winston](https://github.com/winstonjs/winston) or\n  [node-bunyan](https://github.com/trentm/node-bunyan)).\n\n      _Why:_\n      > It makes your troubleshooting less unpleasant with colorization, timestamps, log to a file in addition to the console or even logging to a file that rotates daily. [read more...](https://blog.risingstack.com/node-js-logging-tutorial/)\n\n<a name=\"api\"></a>\n\n## 9. API\n\n<a name=\"api-design\"></a>\n\n![API](/images/api.png)\n\n### 9.1 API design\n\n_Why:_\n\n> Because we try to enforce development of sanely constructed RESTful interfaces, which team members and clients can consume simply and consistently.\n\n_Why:_\n\n> Lack of consistency and simplicity can massively increase integration and maintenance costs. Which is why `API design` is included in this document.\n\n- We mostly follow resource-oriented design. It has three main factors: resources, collection, and URLs.\n\n  - A resource has data, gets nested, and there are methods that operate against it.\n  - A group of resources is called a collection.\n  - URL identifies the online location of resource or collection.\n\n  _Why:_\n\n  > This is a very well-known design to developers (your main API consumers). Apart from readability and ease of use, it allows us to write generic libraries and connectors without even knowing what the API is about.\n\n- use kebab-case for URLs.\n- use camelCase for parameters in the query string or resource fields.\n- use plural kebab-case for resource names in URLs.\n\n- Always use a plural nouns for naming a url pointing to a collection: `/users`.\n\n  _Why:_\n\n  > Basically, it reads better and keeps URLs consistent. [read more...](https://apigee.com/about/blog/technology/restful-api-design-plural-nouns-and-concrete-names)\n\n- In the source code convert plurals to variables and properties with a List suffix.\n\n  _Why_:\n\n  > Plural is nice in the URL but in the source code, it’s just too subtle and error-prone.\n\n- Always use a singular concept that starts with a collection and ends to an identifier:\n\n  ```\n  /students/245743\n  /airports/kjfk\n  ```\n\n- Avoid URLs like this:\n\n  ```\n  GET /blogs/:blogId/posts/:postId/summary\n  ```\n\n  _Why:_\n\n  > This is not pointing to a resource but to a property instead. You can pass the property as a parameter to trim your response.\n\n- Keep verbs out of your resource URLs.\n\n  _Why:_\n\n  > Because if you use a verb for each resource operation you soon will have a huge list of URLs and no consistent pattern which makes it difficult for developers to learn. Plus we use verbs for something else.\n\n- Use verbs for non-resources. In this case, your API doesn't return any resources. Instead, you execute an operation and return the result. These **are not** CRUD (create, retrieve, update, and delete) operations:\n\n  ```\n  /translate?text=Hallo\n  ```\n\n  _Why:_\n\n  > Because for CRUD we use HTTP methods on `resource` or `collection` URLs. The verbs we were talking about are actually `Controllers`. You usually don't develop many of these. [read more...](https://github.com/byrondover/api-guidelines/blob/master/Guidelines.md#controller)\n\n- The request body or response type is JSON then please follow `camelCase` for `JSON` property names to maintain the consistency.\n\n  _Why:_\n\n  > This is a JavaScript project guideline, where the programming language for generating and parsing JSON is assumed to be JavaScript.\n\n- Even though a resource is a singular concept that is similar to an object instance or database record, you should not use your `table_name` for a resource name and `column_name` resource property.\n\n  _Why:_\n\n  > Because your intention is to expose Resources, not your database schema details.\n\n- Again, only use nouns in your URL when naming your resources and don’t try to explain their functionality.\n\n  _Why:_\n\n  > Only use nouns in your resource URLs, avoid endpoints like `/addNewUser` or `/updateUser` . Also avoid sending resource operations as a parameter.\n\n- Explain the CRUD functionalities using HTTP methods:\n\n  _How:_\n\n  > `GET`: To retrieve a representation of a resource.\n\n  > `POST`: To create new resources and sub-resources.\n\n  > `PUT`: To update existing resources.\n\n  > `PATCH`: To update existing resources. It only updates the fields that were supplied, leaving the others alone.\n\n  > `DELETE`: To delete existing resources.\n\n- For nested resources, use the relation between them in the URL. For instance, using `id` to relate an employee to a company.\n\n  _Why:_\n\n  > This is a natural way to make resources explorable.\n\n  _How:_\n\n  > `GET /schools/2/students ` , should get the list of all students from school 2.\n\n  > `GET /schools/2/students/31` , should get the details of student 31, which belongs to school 2.\n\n  > `DELETE /schools/2/students/31` , should delete student 31, which belongs to school 2.\n\n  > `PUT /schools/2/students/31` , should update info of student 31, Use PUT on resource-URL only, not collection.\n\n  > `POST /schools` , should create a new school and return the details of the new school created. Use POST on collection-URLs.\n\n- Use a simple ordinal number for a version with a `v` prefix (v1, v2). Move it all the way to the left in the URL so that it has the highest scope:\n\n  ```\n  http://api.domain.com/v1/schools/3/students\n  ```\n\n  _Why:_\n\n  > When your APIs are public for other third parties, upgrading the APIs with some breaking change would also lead to breaking the existing products or services using your APIs. Using versions in your URL can prevent that from happening. [read more...](https://apigee.com/about/blog/technology/restful-api-design-tips-versioning)\n\n- Response messages must be self-descriptive. A good error message response might look something like this:\n\n  ```json\n  {\n  \t\"code\": 1234,\n  \t\"message\": \"Something bad happened\",\n  \t\"description\": \"More details\"\n  }\n  ```\n\n  or for validation errors:\n\n  ```json\n  {\n  \t\"code\": 2314,\n  \t\"message\": \"Validation Failed\",\n  \t\"errors\": [\n  \t\t{\n  \t\t\t\"code\": 1233,\n  \t\t\t\"field\": \"email\",\n  \t\t\t\"message\": \"Invalid email\"\n  \t\t},\n  \t\t{\n  \t\t\t\"code\": 1234,\n  \t\t\t\"field\": \"password\",\n  \t\t\t\"message\": \"No password provided\"\n  \t\t}\n  \t]\n  }\n  ```\n\n  _Why:_\n\n  > developers depend on well-designed errors at the critical times when they are troubleshooting and resolving issues after the applications they've built using your APIs are in the hands of their users.\n\n  _Note: Keep security exception messages as generic as possible. For instance, Instead of saying ‘incorrect password’, you can reply back saying ‘invalid username or password’ so that we don’t unknowingly inform user that username was indeed correct and only the password was incorrect._\n\n- Use these status codes to send with your response to describe whether **everything worked**,\n  The **client app did something wrong** or The **API did something wrong**.\n\n      _Which ones:_\n      > `200 OK` response represents success for `GET`, `PUT` or `POST` requests.\n\n      > `201 Created` for when a new instance is created. Creating a new instance, using `POST` method returns `201` status code.\n\n      > `204 No Content` response represents success but there is no content to be sent in the response. Use it when `DELETE` operation succeeds.\n\n      > `304 Not Modified` response is to minimize information transfer when the recipient already has cached representations.\n\n      > `400 Bad Request` for when the request was not processed, as the server could not understand what the client is asking for.\n\n      > `401 Unauthorized` for when the request lacks valid credentials and it should re-request with the required credentials.\n\n      > `403 Forbidden` means the server understood the request but refuses to authorize it.\n\n      > `404 Not Found` indicates that the requested resource was not found.\n\n      > `500 Internal Server Error` indicates that the request is valid, but the server could not fulfill it due to some unexpected condition.\n\n      _Why:_\n      > Most API providers use a small subset HTTP status codes. For example, the Google GData API uses only 10 status codes, Netflix uses 9, and Digg, only 8. Of course, these responses contain a body with additional information. There are over 70 HTTP status codes. However, most developers don't have all 70 memorized. So if you choose status codes that are not very common you will force application developers away from building their apps and over to wikipedia to figure out what you're trying to tell them. [read more...](https://apigee.com/about/blog/technology/restful-api-design-what-about-errors)\n\n- Provide total numbers of resources in your response.\n- Accept `limit` and `offset` parameters.\n\n- The amount of data the resource exposes should also be taken into account. The API consumer doesn't always need the full representation of a resource. Use a fields query parameter that takes a comma separated list of fields to include:\n  ```\n  GET /students?fields=id,name,age,class\n  ```\n- Pagination, filtering, and sorting don’t need to be supported from start for all resources. Document those resources that offer filtering and sorting.\n\n<a name=\"api-security\"></a>\n\n### 9.2 API security\n\nThese are some basic security best practices:\n\n- Don't use basic authentication unless over a secure connection (HTTPS). Authentication tokens must not be transmitted in the URL: `GET /users/123?token=asdf....`\n\n  _Why:_\n\n  > Because Token, or user ID and password are passed over the network as clear text (it is base64 encoded, but base64 is a reversible encoding), the basic authentication scheme is not secure. [read more...](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication)\n\n- Tokens must be transmitted using the Authorization header on every request: `Authorization: Bearer xxxxxx, Extra yyyyy`.\n\n- Authorization Code should be short-lived.\n\n- Reject any non-TLS requests by not responding to any HTTP request to avoid any insecure data exchange. Respond to HTTP requests by `403 Forbidden`.\n\n- Consider using Rate Limiting.\n\n  _Why:_\n\n  > To protect your APIs from bot threats that call your API thousands of times per hour. You should consider implementing rate limit early on.\n\n- Setting HTTP headers appropriately can help to lock down and secure your web application. [read more...](https://github.com/helmetjs/helmet)\n\n- Your API should convert the received data to their canonical form or reject them. Return 400 Bad Request with details about any errors from bad or missing data.\n\n- All the data exchanged with the REST API must be validated by the API.\n\n- Serialize your JSON.\n\n  _Why:_\n\n  > A key concern with JSON encoders is preventing arbitrary JavaScript remote code execution within the browser... or, if you're using node.js, on the server. It's vital that you use a proper JSON serializer to encode user-supplied data properly to prevent the execution of user-supplied input on the browser.\n\n- Validate the content-type and mostly use `application/*json` (Content-Type header).\n\n  _Why:_\n\n  > For instance, accepting the `application/x-www-form-urlencoded` mime type allows the attacker to create a form and trigger a simple POST request. The server should never assume the Content-Type. A lack of Content-Type header or an unexpected Content-Type header should result in the server rejecting the content with a `4XX` response.\n\n- Check the API Security Checklist Project. [read more...](https://github.com/shieldfy/API-Security-Checklist)\n\n<a name=\"api-documentation\"></a>\n\n### 9.3 API documentation\n\n- Fill the `API Reference` section in [README.md template](./README.sample.md) for API.\n- Describe API authentication methods with a code sample.\n- Explaining The URL Structure (path only, no root URL) including The request type (Method).\n\nFor each endpoint explain:\n\n- URL Params If URL Params exist, specify them in accordance with name mentioned in URL section:\n\n  ```\n  Required: id=[integer]\n  Optional: photo_id=[alphanumeric]\n  ```\n\n- If the request type is POST, provide working examples. URL Params rules apply here too. Separate the section into Optional and Required.\n\n- Success Response, What should be the status code and is there any return data? This is useful when people need to know what their callbacks should expect:\n\n  ```\n  Code: 200\n  Content: { id : 12 }\n  ```\n\n- Error Response, Most endpoints have many ways to fail. From unauthorized access to wrongful parameters etc. All of those should be listed here. It might seem repetitive, but it helps prevent assumptions from being made. For example\n\n  ```json\n  {\n  \t\"code\": 401,\n  \t\"message\": \"Authentication failed\",\n  \t\"description\": \"Invalid username or password\"\n  }\n  ```\n\n- Use API design tools, There are lots of open source tools for good documentation such as [API Blueprint](https://apiblueprint.org/) and [Swagger](https://swagger.io/).\n\n<a name=\"a11y\"></a>\n\n## 10. Accessibility ([a11y](https://www.a11yproject.com/))\n\n![Accessibility](/images/accessibility.png)\n\n### 10.1 Laying accessibility practices in place\n\nTake the following steps **at the start of your project** to ensure an intentional level of accessibility is sustained:\n\n_Why:_\n\n> Web content is [accessible by default](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML). We compromise this when we build complex features. It's much easier to reduce this impact by considering accessibility from the start rather than re-implement these features later.\n\n- Arrange to do regular audits using [lighthouse](https://developers.google.com/web/tools/lighthouse#devtools) [accessibility](https://web.dev/lighthouse-accessibility/) or the [axe DevTools extension](https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd?hl=en-US). Agree on a minimum score based on your projects requirements. The scoring in both tools is based on [axe user impact assessments](https://github.com/dequelabs/axe-core/blob/develop/doc/rule-descriptions.md#wcag-21-level-a--aa-rules).\n\n  > **Note:** [some important checks](https://web.dev/lighthouse-accessibility/#additional-items-to-manually-check) must be done manually, e.g. logical tab order. The above tools list these as manual/guided tests alongside the automated results. With axe you have to save your automated results to view these.\n\n- Install an a11y linter:\n\n  - React: [eslint-plugin-jsx-a11y](https://www.npmjs.com/package/eslint-plugin-jsx-a11y)\n  - Angular: [Angular Codelyzer](https://github.com/mgechev/codelyzer)\n  - Vue: [eslint-plugin-vuejs-accessibility](https://github.com/vue-a11y/eslint-plugin-vuejs-accessibility)\n\n  _Why:_\n\n  > A linter will automatically check that a basic level of accessibility is met by your project and is relatively easy to set up.\n\n- Set up and use a11y testing using [axe-core](https://www.youtube.com/watch?v=-n5Ul7WPc3Y&list=PLMlWGnpsViOMt24a-Y_dybv68H-kj6Un6&t=1649s) or similar.\n\n- If you're using storybook, do [this](https://storybook.js.org/blog/accessibility-testing-with-storybook/).\n\n  _Why:_\n\n  > Including a11y checks in your tests will help you to catch any changes that affect your projects accessibility and your audit score.\n\n- Consider using an accessible design system such as [React Spectrum](https://react-spectrum.adobe.com/react-spectrum/) or [Material Design](https://material.io/design).\n\n  _Why:_\n\n  > These components are highly accessible out of the box.\n\n### 10.2 Some basic accessibility rules to add to your project:\n\n- Ensure link names are accessible. Use aria-label to describe links\n\n  _Why:_\n\n  > Inaccessible link elements pose barriers to accessibility.\n\n- Ensure lists are structured correctly and list elements are used semantically.\n\n  _Why:_\n\n  > Lists must have both parent and child elements for it to be valid. Screen readers inform users when they come to a list and how many items are in a list.\n\n- Ensure the heading order is semantically correct.\n\n  _Why:_\n\n  > Headers convey the structure of the page. When applied correctly the page becomes easier to navigate.\n\n- Ensure text elements have sufficient contrast against page background.\n\n  _Why:_\n\n  > Some people with low vision experience low contrast, meaning that there aren't very many bright or dark areas. Everything tends to appear about the same brightness, which makes it hard to distinguish outlines, borders, edges, and details. Text that is too close in luminance (brightness) to the background can be hard to read.\n\n- Provide alternative text for images.\n\n  _Why:_\n\n  > Screen readers have no way of translating an image into words that gets read to the user, even if the image only consists of text. As a result, it's necessary for images to have short, descriptive alt text so screen reader users clearly understand the image's contents and purpose.\n\nMore accessibility rules can be found [here](https://dequeuniversity.com/rules/axe).\n\n<a name=\"licensing\"></a>\n\n## 11. Licensing\n\n![Licensing](/images/licensing.png)\n\nMake sure you use resources that you have the rights to use. If you use libraries, remember to look for MIT, Apache or BSD but if you modify them, then take a look at the license details. Copyrighted images and videos may cause legal problems.\n\n---\n\nSources:\n[RisingStack Engineering](https://blog.risingstack.com/),\n[Mozilla Developer Network](https://developer.mozilla.org/),\n[Heroku Dev Center](https://devcenter.heroku.com),\n[Airbnb/javascript](https://github.com/airbnb/javascript),\n[Atlassian Git tutorials](https://www.atlassian.com/git/tutorials),\n[Apigee](https://apigee.com/about/blog),\n[Wishtack](https://blog.wishtack.com)\n\nIcons by [icons8](https://icons8.com/)\n"
        },
        {
          "name": "README.sample.md",
          "type": "blob",
          "size": 3.025390625,
          "content": "<img src=\"./images/logo.sample.png\" alt=\"Logo of the project\" align=\"right\">\n\n# Name of the project &middot; [![Build Status](https://img.shields.io/travis/npm/npm/latest.svg?style=flat-square)](https://travis-ci.org/npm/npm) [![npm](https://img.shields.io/npm/v/npm.svg?style=flat-square)](https://www.npmjs.com/package/npm) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com) [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](https://github.com/your/your-project/blob/master/LICENSE)\n> Additional information or tag line\n\nA brief description of your project, what it is used for.\n\n## Installing / Getting started\n\nA quick introduction of the minimal setup you need to get a hello world up &\nrunning.\n\n```shell\ncommands here\n```\n\nHere you should say what actually happens when you execute the code above.\n\n## Developing\n\n### Built With\nList main libraries, frameworks used including versions (React, Angular etc...)\n\n### Prerequisites\nWhat is needed to set up the dev environment. For instance, global dependencies or any other tools. include download links.\n\n\n### Setting up Dev\n\nHere's a brief intro about what a developer must do in order to start developing\nthe project further:\n\n```shell\ngit clone https://github.com/your/your-project.git\ncd your-project/\npackagemanager install\n```\n\nAnd state what happens step-by-step. If there is any virtual environment, local server or database feeder needed, explain here.\n\n### Building\n\nIf your project needs some additional steps for the developer to build the\nproject after some code changes, state them here. for example:\n\n```shell\n./configure\nmake\nmake install\n```\n\nHere again you should state what actually happens when the code above gets\nexecuted.\n\n### Deploying / Publishing\ngive instructions on how to build and release a new version\nIn case there's some step you have to take that publishes this project to a\nserver, this is the right time to state it.\n\n```shell\npackagemanager deploy your-project -s server.com -u username -p password\n```\n\nAnd again you'd need to tell what the previous code actually does.\n\n## Versioning\n\nWe can maybe use [SemVer](http://semver.org/) for versioning. For the versions available, see the [link to tags on this repository](/tags).\n\n\n## Configuration\n\nHere you should write what are all of the configurations a user can enter when using the project.\n\n## Tests\n\nDescribe and show how to run the tests with code examples.\nExplain what these tests test and why.\n\n```shell\nGive an example\n```\n\n## Style guide\n\nExplain your code style and show how to check it.\n\n## Api Reference\n\nIf the api is external, link to api documentation. If not describe your api including authentication methods as well as explaining all the endpoints with their required parameters.\n\n\n## Database\n\nExplaining what database (and version) has been used. Provide download links.\nDocuments your database design and schemas, relations etc... \n\n## Licensing\n\nState what the license is and how to find the text version of the license.\n"
        },
        {
          "name": "config.sample.js",
          "type": "blob",
          "size": 0.4541015625,
          "content": "// required environment variables\n[\n  'NODE_ENV',\n  'PORT'\n].forEach((name) => {\n  if (!process.env[name]) {\n    throw new Error(`Environment variable ${name} is missing`)\n  }\n})\n\nconst config = {  \n  env: process.env.NODE_ENV,\n  logger: {\n    level: process.env.LOG_LEVEL || 'info',\n    enabled: process.env.BOOLEAN ? process.env.BOOLEAN.toLowerCase() === 'true' : false\n  },\n  server: {\n    port: Number(process.env.PORT)\n  }\n  // ...\n}\n\nmodule.exports = config;\n"
        },
        {
          "name": "configWithTest.sample.js",
          "type": "blob",
          "size": 0.9189453125,
          "content": "const joi = require('joi')\n\nconst envVarsSchema = joi.object({  \n  NODE_ENV: joi.string()\n    .valid(['development', 'production', 'test', 'provision'])\n    .required(),\n  PORT: joi.number()\n    .required(),\n  LOGGER_LEVEL: joi.string()\n    .valid(['error', 'warn', 'info', 'verbose', 'debug', 'silly'])\n    .default('info'),\n  LOGGER_ENABLED: joi.boolean()\n    .truthy('TRUE')\n    .truthy('true')\n    .falsy('FALSE')\n    .falsy('false')\n    .default(true)\n}).unknown()\n  .required()\n\nconst { error, value: envVars } = joi.validate(process.env, envVarsSchema)  \nif (error) {  \n  throw new Error(`Config validation error: ${error.message}`)\n}\n\nconst config = {  \n  env: envVars.NODE_ENV,\n  isTest: envVars.NODE_ENV === 'test',\n  isDevelopment: envVars.NODE_ENV === 'development',\n  logger: {\n    level: envVars.LOGGER_LEVEL,\n    enabled: envVars.LOGGER_ENABLED\n  },\n  server: {\n    port: envVars.PORT\n  }\n  // ...\n}\n\nmodule.exports = config;\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}