{
  "metadata": {
    "timestamp": 1736563410326,
    "page": 425,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tariqbuilds/linux-dash",
      "stars": 10437,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0458984375,
          "content": "node_modules\n*.log\n*/linuxDash.min.js.map\ntemp\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.048828125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 afaqurk\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.3125,
          "content": "<h1 align=\"center\">\n  <a href=\"https://afaqurk.github.io/linux-dash\">\n    <img src=\"https://raw.githubusercontent.com/afaqurk/screenshots/master/linux-dash/v2.0-logo.png\"/>\n  </a>\n</h1>\n\n<p align=\"center\">\n  <sub>v2.0</sub><br/>\n  <small>A simple & low-overhead web dashboard for linux systems</small>\n</p>\n\n<p align=\"center\">\n  <small>\n    <a href=\"https://afaqurk.github.io/linux-dash\">Demo</a> &nbsp;|&nbsp;\n    <a href=\"https://github.com/afaqurk/linux-dash/wiki\">\n      Docs\n    </a>\n  </small>\n</p>\n\n\n<p align=\"center\">\n  <a href=\"https://gitter.im/afaqurk/linux-dash\">\n    <img\n      src=\"https://badges.gitter.im/gitterHQ/gitter.png\"\n      alt=\"linux-dash Gitter chat\">\n  </a>\n</p>\n\n<br/>\n\n## Features\n* **Small** ----- Under 400KB on disk _(with .git removed)!_\n* **Simple** ---- A minimalist, beautiful dashboard\n* **Easy** ------ Drop-in installation\n* **Versatile** -- Choose your stack from Node.js, Go, Python, PHP\n\n## Installation\n\n### Step 1\n```sh\n## 1. clone the repo\ngit clone --depth 1 https://github.com/afaqurk/linux-dash.git\n\n## 2. go to the cloned directory\ncd linux-dash/app/server\n\n```\nOR, if you prefer to download manually:\n\n```sh\n## 1. Download the .zip\ncurl -LOk https://github.com/afaqurk/linux-dash/archive/master.zip && unzip master.zip\n\n## 2. navigate to downloaded & unzipped dir\ncd linux-dash-master/app/server\n\n```\n\n### Step 2\n\nSee instructions for preferred server linux-dash server _(all included)_:\n\n* [Node.js](#if-using-nodejs) _(recommended)_\n* [Go](#if-using-go)\n* [Python](#if-using-python)\n* [PHP](#if-using-php)\n\n#### If Using Node.js\n```sh\n## install dependencies\nnpm install --production\n\n## start linux-dash (on port 80 by default; may require sudo)\n## You may change this with the `LINUX_DASH_SERVER_PORT` environment variable (eg. `LINUX_DASH_SERVER_PORT=8080 node server`)\n## or provide a --port flag to the command below\n## Additionally, the server will listen on every network interface (`0.0.0.0`).\n## You may change this with the `LINUX_DASH_SERVER_HOST` environment variable (eg. `LINUX_DASH_SERVER_HOST=127.0.0.1 node server`)\n## or provide a --host flag to the command below\nnode index.js\n\n```\n\n#### If Using Go\n```sh\n## start the server (on port 80 by default; may require sudo)\ngo run index.go\n```\n\nTo build a binary, run `go build && ./server -h`. See [@tehbilly](https://github.com/sergeifilippov)'s notes [here](https://github.com/afaqurk/linux-dash/pull/281) for binary usage options\n\n#### If Using Python\n```sh\n# Start the server (on port 80 by default; may require sudo).\npython index.py\n```\n\n#### If Using PHP\n\n1. Make sure you have the `exec`, `shell_exec`, and `escapeshellarg` functions enabled\n2. Point your web server to `app/` directory under `linux-dash`\n2. Restart your web server (Apache, nginx, etc.)\n  - For PHP + Apache setup follow the [Digital Ocean tutorial](https://www.digitalocean.com/community/tutorials/how-to-install-linux-dash-on-ubuntu-14-04).\n  - For help with nginx setup, see [this gist](https://gist.github.com/sergeifilippov/8909839) by [@sergeifilippov](https://github.com/sergeifilippov).\n\n## Support\n\nFor general help, please use the [Gitter chat room](https://gitter.im/afaqurk/linux-dash).\n\n## Security\n\n**It is strongly recommended** that all linux-dash installations be protected via a security measure of your choice.\n\nLinux Dash does not provide any security or authentication features.\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo.js",
          "type": "blob",
          "size": 14.2900390625,
          "content": "angular\n  .module('linuxDashDemo', ['linuxDash', 'ngMockE2E'])\n  .run(function($httpBackend) {\n\n// signal to not use websockets for demo\n$httpBackend.whenGET('/websocket').respond(false)\n\n  /** System Status */\n    $httpBackend.whenGET('server/?module=current_ram').respond(function () {\n      return [200, {total: 512, used: 200, available: 312 }]\n    })\n\n    $httpBackend.whenGET('server/?module=ram_intensive_processes').respond(function () {\n      return [200, [ { 'pid': 2782, 'user': 'user1', 'mem%': 2.2, 'rss': 232332, 'vsz': 1118240, 'cmd': 'nginx'}, { 'pid': 2623, 'user': 'user1', 'mem%': 2.0, 'rss': 209732, 'vsz': 1321800, 'cmd': 'nginx'}, { 'pid': 1558, 'user': 'user1', 'mem%': 1.3, 'rss': 140796, 'vsz': 1321400, 'cmd': 'gnome-software'}, { 'pid': 5026, 'user': 'user1', 'mem%': 1.2, 'rss': 126312, 'vsz': 875072, 'cmd': 'nginx'}, { 'pid': 5051, 'user': 'user1', 'mem%': 1.1, 'rss': 112776, 'vsz': 872512, 'cmd': 'nginx'}, { 'pid': 1477, 'user': 'user1', 'mem%': 1.0, 'rss': 108248, 'vsz': 1471548, 'cmd': 'compiz'}, { 'pid': 2997, 'user': 'user1', 'mem%': 1.0, 'rss': 107208, 'vsz': 869076, 'cmd': 'nginx'}, { 'pid': 2298, 'user': 'root', 'mem%': 1.0, 'rss': 101356, 'vsz': 286772, 'cmd': 'aptd'}, { 'pid': 2700, 'user': 'user1', 'mem%': 0.9, 'rss': 95784, 'vsz': 460272, 'cmd': 'nginx'}, { 'pid': 2799, 'user': 'user1', 'mem%': 0.8, 'rss': 83940, 'vsz': 778512, 'cmd': 'nginx'}, { 'pid': 4248, 'user': 'user1', 'mem%': 0.8, 'rss': 82276, 'vsz': 1059420, 'cmd': 'redis'}, { 'pid': 1095, 'user': 'root', 'mem%': 0.7, 'rss': 78424, 'vsz': 457156, 'cmd': 'Xorg'}, { 'pid': 2810, 'user': 'user1', 'mem%': 0.7, 'rss': 72884, 'vsz': 750856, 'cmd': 'nginx'}, { 'pid': 2809, 'user': 'user1', 'mem%': 0.7, 'rss': 72872, 'vsz': 752908, 'cmd': 'nginx'} ]]\n    })\n\n    $httpBackend.whenGET('server/?module=cpu_intensive_processes').respond(function () {\n      return [200, [ { 'pid': 5026, 'user': 'user1', 'cpu%': 25.5, 'rss': 137944, 'vsz': 907236, 'cmd': 'nginx'}, { 'pid': 2623, 'user': 'user1', 'cpu%': 9.5, 'rss': 229016, 'vsz': 1327948, 'cmd': 'nginx'}, { 'pid': 2700, 'user': 'user1', 'cpu%': 8.8, 'rss': 106324, 'vsz': 474796, 'cmd': 'nginx'}, { 'pid': 4248, 'user': 'user1', 'cpu%': 8.8, 'rss': 96848, 'vsz': 1151460, 'cmd': 'sublime_text'}, { 'pid': 1477, 'user': 'user1', 'cpu%': 8.6, 'rss': 111252, 'vsz': 1476524, 'cmd': 'compiz'}, { 'pid': 1571, 'user': 'user1', 'cpu%': 7.7, 'rss': 62984, 'vsz': 551884, 'cmd': 'orca'}, { 'pid': 1095, 'user': 'root', 'cpu%': 6.2, 'rss': 86048, 'vsz': 457112, 'cmd': 'Xorg'}, { 'pid': 1535, 'user': 'user1', 'cpu%': 3.9, 'rss': 17152, 'vsz': 574624, 'cmd': 'pulseaudio'}, { 'pid': 5051, 'user': 'user1', 'cpu%': 1.6, 'rss': 131828, 'vsz': 888712, 'cmd': 'nginx'}, { 'pid': 2890, 'user': 'user1', 'cpu%': 1.1, 'rss': 52968, 'vsz': 657408, 'cmd': 'unity-panel-ser'}, { 'pid': 2782, 'user': 'user1', 'cpu%': 1.0, 'rss': 226536, 'vsz': 1110556, 'cmd': 'nginx'}, { 'pid': 1438, 'user': 'user1', 'cpu%': 0.9, 'rss': 45840, 'vsz': 660352, 'cmd': 'hud-service'}, { 'pid': 1631, 'user': 'user1', 'cpu%': 0.9, 'rss': 26208, 'vsz': 514684, 'cmd': 'indicator-multi'}, { 'pid': 1804, 'user': 'user1', 'cpu%': 0.9, 'rss': 9752, 'vsz': 523936, 'cmd': 'sd_espeak'} ]]\n    })\n\n    $httpBackend.whenGET('server/?module=disk_partitions').respond(function () {\n      return [200, [ {'file_system': 'udev', 'size': '4.9G', 'used': '0', 'avail': '4.9G', 'used%': '0%', 'mounted': '/dev'}, {'file_system': '/dev/sda1', 'size': '449G', 'used': '224.5G', 'avail': '224.5G', 'used%': '50%', 'mounted': '/'}, {'file_system': 'tmpfs', 'size': '5.0M', 'used': '4.0K', 'avail': '5.0M', 'used%': '1%', 'mounted': '/run/lock'} ]]\n    })\n\n    $httpBackend.whenGET('server/?module=cpu_temp').respond(function () {\n      return [200, [ ]]\n    })\n\n    $httpBackend.whenGET('server/?module=cpu_temp').respond(function () {\n      return [200, [ ]]\n    })\n\n    $httpBackend.whenGET('server/?module=cpu_utilization').respond(function () {\n      return [200, 25]\n    })\n\n    $httpBackend.whenGET('server/?module=load_avg').respond(function () {\n      return [200, { '1_min_avg': 40, '5_min_avg': 22, '15_min_avg': 10}]\n    })\n\n    $httpBackend.whenGET('server/?module=docker_processes').respond(function () {\n      return [200, []]\n    })\n\n    $httpBackend.whenGET('server/?module=swap').respond(function () {\n      return [200, [ { 'filename': '/dev/sda5', 'type': 'partition', 'size': '10364924', 'used': '0', 'priority': '-1'} ]]\n    })\n\n  /** Basic Info **/\n    $httpBackend.whenGET('server/?module=cron_history').respond(function () {\n      return [200, []]\n    })\n\n    $httpBackend.whenGET('server/?module=io_stats').respond(function () {\n      return [200, [ { 'device': 'sda', 'reads': '75406', 'writes': '119939', 'in_prog.': '0', 'time': '816604'}, { 'device': 'sda1', 'reads': '74587', 'writes': '81983', 'in_prog.': '0', 'time': '796964'}, { 'device': 'sda2', 'reads': '6', 'writes': '0', 'in_prog.': '0', 'time': '304'}, { 'device': 'sda5', 'reads': '73', 'writes': '0', 'in_prog.': '0', 'time': '3344'}, { 'device': 'sdb', 'reads': '276', 'writes': '0', 'in_prog.': '0', 'time': '72'}, { 'device': 'sdb1', 'reads': '234', 'writes': '0', 'in_prog.': '0', 'time': '64'} ]]\n    })\n\n    $httpBackend.whenGET('server/?module=cpu_info').respond(function () {\n      return [200, { \"Architecture\": \" x86_64\", \"CPU op-mode(s)\": \" 32-bit, 64-bit\", \"Byte Order\": \" Little Endian\", \"CPU(s)\": \" 4\", \"On-line CPU(s) list\": \" 0-3\", \"Thread(s) per core\": \" 2\", \"Core(s) per socket\": \" 2\", \"Socket(s)\": \" 1\", \"NUMA node(s)\": \" 1\", \"Vendor ID\": \" GenuineIntel\", \"CPU family\": \" 6\", \"Model\": \" 69\", \"Model name\": \" Intel(R) Core(TM) i5-4200U CPU @ 1.60GHz\", \"Stepping\": \" 1\", \"CPU MHz\": \" 1402.101\", \"CPU max MHz\": \" 2600.0000\", \"CPU min MHz\": \" 800.0000\", \"BogoMIPS\": \" 4589.14\", \"Virtualization\": \" VT-x\", \"L1d cache\": \" 32K\", \"L1i cache\": \" 32K\", \"L2 cache\": \" 256K\", \"L3 cache\": \" 3072K\", \"NUMA node0 CPU(s)\": \" 0-3\", \"Flags\": \" fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm epb tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid xsaveopt dtherm ida arat pln pts\" }]\n    })\n\n    $httpBackend.whenGET('server/?module=scheduled_crons').respond(function () {\n      return [200, [ ]]\n    })\n\n    $httpBackend.whenGET('server/?module=memory_info').respond(function () {\n      return [200, {'MemTotal': '10120412 kB','MemFree': '7257156 kB','MemAvailable': '8173888 kB','Buffers': '   257824 kB','Cached': '   1175940 kB','SwapCached': ' 0 kB','Active': '   1815224 kB','Inactive': '  783844 kB','Active(anon)': '1174832 kB','Inactive(anon)': '   334816 kB','Active(file)': ' 640392 kB','Inactive(file)': '   449028 kB','Unevictable': '  384 kB','Mlocked': '  384 kB','SwapTotal': '  10364924 kB','SwapFree': '10364924 kB','Dirty': ' 156 kB','Writeback': '  0 kB','AnonPages': '1165736 kB','Mapped': '420416 kB','Shmem': ' 344344 kB','Slab': '  143556 kB','SReclaimable': ' 109592 kB','SUnreclaim': ' 33964 kB','KernelStack': ' 8560 kB','PageTables': ' 32700 kB','NFS_Unstable': '   0 kB','Bounce': '  0 kB','WritebackTmp': '   0 kB','CommitLimit': '15425128 kB','Committed_AS': '5073516 kB','VmallocTotal': '   34359738367 kB','VmallocUsed': '0 kB','VmallocChunk': '   0 kB','HardwareCorrupted': ' 0 kB','AnonHugePages': '352256 kB','CmaTotal': '0 kB','CmaFree': ' 0 kB','HugePages_Total': '0','HugePages_Free': ' 0','HugePages_Rsvd': ' 0','HugePages_Surp': ' 0','Hugepagesize': '2048 kB','DirectMap4k': '  130800 kB','DirectMap2M': ' 4993024 kB','DirectMap1G': ' 6291456 kB'}]\n    })\n\n    $httpBackend.whenGET('server/?module=general_info').respond(function () {\n      return [200, { 'OS': 'Ubuntu 16.04.2 LTS 4.4.0-77-generic', 'Hostname': 'webserver-prod-983742', 'Uptime': '5 hours and 32 minutes and 27 seconds ', 'Server Time': 'Sat May 13 00:11:39 EST 2017' }]\n    })\n\n  /** Network **/\n    $httpBackend.whenGET('server/?module=download_transfer_rate').respond(function () {\n      return [200, { \"lo\": 2048, \"wlp3s0\": 1024 }]\n    })\n\n    $httpBackend.whenGET('server/?module=upload_transfer_rate').respond(function () {\n      return [200, { \"lo\": 1024, \"wlp3s0\": 512 }]\n    })\n\n    $httpBackend.whenGET('server/?module=bandwidth').respond(function () {\n      return [200, [{ 'interface': 'wlp3s0:', 'tx': 226076758, 'rx': 9037438 },{ 'interface': 'lo:', 'tx': 12016995, 'rx': 12016995 }]]\n    })\n\n    $httpBackend.whenGET('server/?module=ping').respond(function () {\n      return [200, [{'host': 'google.com', 'ping': 23.234 },{'host': 'yahoo.com', 'ping': 67.412 },{'host': 'twitter.com', 'ping': 34.560 }]]\n    })\n\n    $httpBackend.whenGET('server/?module=ip_addresses').respond(function () {\n      return [200, [{ 'interface': 'external', 'ip': '70.113.122.2' } ]]\n    })\n\n    $httpBackend.whenGET('server/?module=network_connections').respond(function () {\n      return [200, [{ 'connections': 1, 'address': '127.0.0.1:48562' }\n        ,{ 'connections': 1, 'address': '127.0.0.1:48564' }\n        ,{ 'connections': 1, 'address': '127.0.0.1:48708' }\n        ,{ 'connections': 3, 'address': '127.0.0.1:8080' }\n        ,{ 'connections': 1, 'address': '192.241.178.140:443' }\n        ,{ 'connections': 2, 'address': '2657:f9b0:9000:802::443' }\n        ,{ 'connections': 1, 'address': '2657:f9b0:0000:80c::443' }\n        ,{ 'connections': 1, 'address': '2657:f9b0:0000:80f:::80' }\n        ,{ 'connections': 2, 'address': '2657:f9b0:0000:816:::80' }\n        ,{ 'connections': 1, 'address': '2657:f9b0:0003:c09:5228' }]]\n    })\n\n    $httpBackend.whenGET('server/?module=arp_cache').respond(function () {\n      return [200, [ { 'addr': '192.168.0.1', 'hw_type': 'ether', 'hw_addr.': '15:db:45:eb:4d:6a', 'mask': 'wlp3s0' } ]]\n    })\n\n    $httpBackend.whenGET('server/?module=logged_in_users').respond(function () {\n      return [200, [ {'user': 'user1', 'from': ':0', 'when': 'Fri23'}, {'user': 'user1', 'from': 'webserver-prod-983742', 'when': 'Fri23'}, {'user': 'user1', 'from': 'webserver-prod-983742', 'when': 'Fri23'}, {'user': 'user1', 'from': 'webserver-prod-983742', 'when': '01:19'} ]]\n    })\n\n    $httpBackend.whenGET('server/?module=user_accounts').respond(function () {\n      return [200, [ {\"type\":\"system\", \"user\":\"root\", \"home\":\"/root\"}, {\"type\":\"system\", \"user\":\"daemon\", \"home\":\"/usr/sbin\"}, {\"type\":\"system\", \"user\":\"bin\", \"home\":\"/bin\"}, {\"type\":\"system\", \"user\":\"sys\", \"home\":\"/dev\"}, {\"type\":\"system\", \"user\":\"sync\", \"home\":\"/bin\"}, {\"type\":\"system\", \"user\":\"games\", \"home\":\"/usr/games\"}, {\"type\":\"system\", \"user\":\"man\", \"home\":\"/var/cache/man\"}, {\"type\":\"system\", \"user\":\"lp\", \"home\":\"/var/spool/lpd\"}, {\"type\":\"system\", \"user\":\"mail\", \"home\":\"/var/mail\"}, {\"type\":\"system\", \"user\":\"news\", \"home\":\"/var/spool/news\"}, {\"type\":\"system\", \"user\":\"uucp\", \"home\":\"/var/spool/uucp\"}, {\"type\":\"system\", \"user\":\"proxy\", \"home\":\"/bin\"}, {\"type\":\"system\", \"user\":\"www-data\", \"home\":\"/var/www\"}, {\"type\":\"system\", \"user\":\"backup\", \"home\":\"/var/backups\"}, {\"type\":\"system\", \"user\":\"list\", \"home\":\"/var/list\"}, {\"type\":\"system\", \"user\":\"irc\", \"home\":\"/var/run/ircd\"}, {\"type\":\"system\", \"user\":\"gnats\", \"home\":\"/var/lib/gnats\"}, {\"type\":\"user\", \"user\":\"nobody\", \"home\":\"/nonexistent\"}, {\"type\":\"system\", \"user\":\"systemd-timesync\", \"home\":\"/run/systemd\"} ]]\n    })\n\n    $httpBackend.whenGET('server/?module=recent_account_logins').respond(function () {\n      return [200, [ {\"type\":\"system\", \"user\":\"root\", \"home\":\"/root\"}, {\"type\":\"system\", \"user\":\"daemon\", \"home\":\"/usr/sbin\"}, {\"type\":\"system\", \"user\":\"bin\", \"home\":\"/bin\"}, {\"type\":\"system\", \"user\":\"sys\", \"home\":\"/dev\"}, {\"type\":\"system\", \"user\":\"sync\", \"home\":\"/bin\"}, {\"type\":\"system\", \"user\":\"games\", \"home\":\"/usr/games\"}, {\"type\":\"system\", \"user\":\"man\", \"home\":\"/var/cache/man\"}, {\"type\":\"system\", \"user\":\"lp\", \"home\":\"/var/spool/lpd\"}, {\"type\":\"system\", \"user\":\"mail\", \"home\":\"/var/mail\"}, {\"type\":\"system\", \"user\":\"news\", \"home\":\"/var/spool/news\"}, {\"type\":\"system\", \"user\":\"uucp\", \"home\":\"/var/spool/uucp\"}, {\"type\":\"system\", \"user\":\"proxy\", \"home\":\"/bin\"}, {\"type\":\"system\", \"user\":\"www-data\", \"home\":\"/var/www\"}, {\"type\":\"system\", \"user\":\"backup\", \"home\":\"/var/backups\"}, {\"type\":\"system\", \"user\":\"list\", \"home\":\"/var/list\"}, {\"type\":\"system\", \"user\":\"irc\", \"home\":\"/var/run/ircd\"}, {\"type\":\"system\", \"user\":\"gnats\", \"home\":\"/var/lib/gnats\"}, {\"type\":\"user\", \"user\":\"nobody\", \"home\":\"/nonexistent\"}, {\"type\":\"system\", \"user\":\"systemd-timesync\", \"home\":\"/run/systemd\"} ]]\n    })\n\n  /** Applications **/\n    $httpBackend.whenGET('server/?module=common_applications').respond(function () {\n      return [200, [ { \"binary\": \"php\", \"location\": \"\", \"installed\": \"installed\" }, { \"binary\": \"node\", \"location\": \" /usr/bin/node /usr/include/node /usr/share/man/man1/node.1.gz\", \"installed\": \"installed\" }, { \"binary\": \"mysql\", \"location\": \"\", \"installed\": \"installed\" }, { \"binary\": \"mongo\", \"location\": \"\", \"installed\": \"installed\" }, { \"binary\": \"vim\", \"location\": \" /usr/bin/vim.basic /usr/bin/vim /usr/bin/vim.tiny /etc/vim /usr/share/vim /usr/share/man/man1/vim.1.gz\", \"installed\": \"installed\" }, { \"binary\": \"python\", \"location\": \" /usr/bin/python3.5 /usr/bin/python /usr/bin/python2.7-config /usr/bin/python3.5m /usr/bin/python2.7 /usr/lib/python3.5 /usr/lib/python2.7 /etc/python3.5 /etc/python /etc/python2.7 /usr/local/lib/python3.5 /usr/local/lib/python2.7 /usr/include/python3.5m /usr/include/python2.7 /usr/share/python /usr/share/man/man1/python.1.gz\", \"installed\": \"installed\" }, { \"binary\": \"ruby\", \"location\": \"\", \"installed\": \"installed\" }, { \"binary\": \"java\", \"location\": \" /usr/share/java\", \"installed\": \"installed\" }, { \"binary\": \"apache2\", \"location\": \"\", \"installed\": \"installed\" }, { \"binary\": \"nginx\", \"location\": \"\", \"installed\": \"installed\" }, { \"binary\": \"openssl\", \"location\": \" /usr/bin/openssl /usr/share/man/man1/openssl.1ssl.gz\", \"installed\": \"installed\" }, { \"binary\": \"vsftpd\", \"location\": \"\", \"installed\": \"installed\" }, { \"binary\": \"make\", \"location\": \" /usr/bin/make /usr/share/man/man1/make.1.gz\", \"installed\": \"installed\" } ]]\n    })\n\n    $httpBackend.whenGET('server/?module=memcached').respond(function () { return [200, {}] })\n    $httpBackend.whenGET('server/?module=redis').respond(function () { return [200, {}] })\n    $httpBackend.whenGET('server/?module=pm2_stats').respond(function () { return [200, []] })\n\n  })\n"
        },
        {
          "name": "ecosystem.config.js",
          "type": "blob",
          "size": 0.169921875,
          "content": "module.exports = {\n  apps : [{\n    name: 'Linux Dash',\n    script: './app/server/index.js',\n    watch: false,\n    env: {\n      \"LINUX_DASH_SERVER_PORT\": 2800\n    },\n  }],\n};\n"
        },
        {
          "name": "gulpfile.js",
          "type": "blob",
          "size": 1.3779296875,
          "content": "var g             = require('gulp')\nvar concat        = require('gulp-concat')\nvar uglify        = require('gulp-uglify')\nvar cssmin        = require('gulp-cssmin')\nvar gutil         = require('gulp-util')\nvar ngAnnotate    = require('gulp-ng-annotate')\nvar templateCache = require('gulp-angular-templatecache')\n\ng.task('template-cache', function () {\n  return g.src('src/**/*.html')\n    .pipe(templateCache('templates.js', {\n        module: 'linuxDash',\n        standAlone: false,\n        root: 'src/'\n      }))\n    .pipe(g.dest('temp/'))\n})\n\ng.task('generate-js-dist', ['template-cache'], function () {\n  return g.src([\n    'node_modules/angular/angular.min.js',\n    'node_modules/angular-route/angular-route.min.js',\n    'node_modules/smoothie/smoothie.js',\n    'node_modules/sortablejs/Sortable.min.js',\n    'src/js/**/*.js',\n    'temp/templates.js'\n  ])\n  .pipe(concat('linuxDash.min.js'))\n  .pipe(ngAnnotate())\n  // .pipe(uglify())\n  .on('error', gutil.log)\n  .pipe(g.dest('app/'))\n})\n\ng.task('generate-css-dist', function () {\n  return g.src([ 'src/**/*.css' ])\n    .pipe(cssmin())\n    .pipe(concat('linuxDash.min.css'))\n    .pipe(g.dest('app/'))\n})\n\ng.task('build', [\n  'generate-js-dist',\n  'generate-css-dist'\n])\n\ng.task('watch', function () {\n  g.watch('src/**/*.css', ['generate-css-dist'])\n  g.watch(['src/**/*.js', 'src/**/*.html'], ['generate-js-dist'])\n})\n\ng.task('default', ['build', 'watch'])\n"
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 1.302734375,
          "content": "<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"linuxDashDemo\">\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n        <title>Linux Dash : Simple, beautiful server monitoring web dashboard</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta name=\"description\" content=\"Monitor your Linux server through a simple web dashboard. Open source and free!\">\n        <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n        <link href='//fonts.googleapis.com/css?family=Merriweather:300italic,300|Open+Sans:400,600' rel='stylesheet' type='text/css'>\n        <link href='app/linuxDash.min.css' rel='stylesheet' type='text/css'>\n\n        <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements -->\n        <!--[if lt IE 9]>\n          <script src=\"https://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n        <![endif]-->\n        <!-- Javascript-->\n\n    </head>\n    <body>\n\n        <nav-bar></nav-bar>\n\n        <!-- Templates Get Rendered Here -->\n        <div id=\"plugins\" ng-view></div>\n\n        <script src=\"app/linuxDash.min.js\" type=\"text/javascript\"></script>\n        <script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.3.4/angular-mocks.js\"></script>\n        <script src=\"demo.js\" type=\"text/javascript\"></script>\n    </body>\n</html>\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.02734375,
          "content": "{\n  \"name\": \"linux-dash\",\n  \"version\": \"2.0.0\",\n  \"description\": \"A simple, low overhead web dashboard for linux.\",\n  \"main\": \"app/server/index.js\",\n  \"bin\": \"bin/linux-dash\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/afaqurk/linux-dash.git\"\n  },\n  \"keywords\": [\n    \"linux\",\n    \"gnu\",\n    \"dashboard\",\n    \"monitor\",\n    \"server\"\n  ],\n  \"author\": \"Afaq Tariq\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/afaqurk/linux-dash/issues\"\n  },\n  \"scripts\": {\n    \"start\": \"gulp\"\n  },\n  \"homepage\": \"https://github.com/afaqurk/linux-dash\",\n  \"dependencies\": {\n    \"express\": \"^4.11.1\",\n    \"websocket\": \"^1.0.23\",\n    \"yargs\": \"^8.0.1\"\n  },\n  \"devDependencies\": {\n    \"angular\": \"1.3.4\",\n    \"angular-route\": \"1.3.4\",\n    \"del\": \"^2.2.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-angular-templatecache\": \"^1.8.0\",\n    \"gulp-concat\": \"^2.6.0\",\n    \"gulp-cssmin\": \"^0.1.7\",\n    \"gulp-ng-annotate\": \"^2.0.0\",\n    \"gulp-uglify\": \"^1.5.3\",\n    \"gulp-util\": \"^3.0.7\",\n    \"smoothie\": \"^1.27.0\",\n    \"sortablejs\": \"^1.4.2\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}