{
  "metadata": {
    "timestamp": 1736563102286,
    "page": 11,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NginxProxyManager/nginx-proxy-manager",
      "stars": 24050,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.134765625,
          "content": ".DS_Store\n.idea\n._*\n.vscode\ncertbot-help.txt\ntest/node_modules\n*/node_modules\ndocker/dev/dnsrouter-config.json.tmp\ndocker/dev/resolv.conf\n"
        },
        {
          "name": ".version",
          "type": "blob",
          "size": 0.0068359375,
          "content": "2.12.2\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 8.7998046875,
          "content": "import groovy.transform.Field\n\n@Field\ndef shOutput = \"\"\ndef buildxPushTags = \"\"\n\npipeline {\n\tagent {\n\t\tlabel 'docker-multiarch'\n\t}\n\toptions {\n\t\tbuildDiscarder(logRotator(numToKeepStr: '5'))\n\t\tdisableConcurrentBuilds()\n\t\tansiColor('xterm')\n\t}\n\tenvironment {\n\t\tIMAGE                      = 'nginx-proxy-manager'\n\t\tBUILD_VERSION              = getVersion()\n\t\tMAJOR_VERSION              = '2'\n\t\tBRANCH_LOWER               = \"${BRANCH_NAME.toLowerCase().replaceAll('\\\\\\\\', '-').replaceAll('/', '-').replaceAll('\\\\.', '-')}\"\n\t\tBUILDX_NAME                = \"npm_${BRANCH_LOWER}_${BUILD_NUMBER}\"\n\t\tCOMPOSE_INTERACTIVE_NO_CLI = 1\n\t}\n\tstages {\n\t\tstage('Environment') {\n\t\t\tparallel {\n\t\t\t\tstage('Master') {\n\t\t\t\t\twhen {\n\t\t\t\t\t\tbranch 'master'\n\t\t\t\t\t}\n\t\t\t\t\tsteps {\n\t\t\t\t\t\tscript {\n\t\t\t\t\t\t\tbuildxPushTags = \"-t docker.io/jc21/${IMAGE}:${BUILD_VERSION} -t docker.io/jc21/${IMAGE}:${MAJOR_VERSION} -t docker.io/jc21/${IMAGE}:latest\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstage('Other') {\n\t\t\t\t\twhen {\n\t\t\t\t\t\tnot {\n\t\t\t\t\t\t\tbranch 'master'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsteps {\n\t\t\t\t\t\tscript {\n\t\t\t\t\t\t\t// Defaults to the Branch name, which is applies to all branches AND pr's\n\t\t\t\t\t\t\tbuildxPushTags = \"-t docker.io/nginxproxymanager/${IMAGE}-dev:${BRANCH_LOWER}\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstage('Versions') {\n\t\t\t\t\tsteps {\n\t\t\t\t\t\tsh 'cat frontend/package.json | jq --arg BUILD_VERSION \"${BUILD_VERSION}\" \\'.version = $BUILD_VERSION\\' | sponge frontend/package.json'\n\t\t\t\t\t\tsh 'echo -e \"\\\\E[1;36mFrontend Version is:\\\\E[1;33m $(cat frontend/package.json | jq -r .version)\\\\E[0m\"'\n\t\t\t\t\t\tsh 'cat backend/package.json | jq --arg BUILD_VERSION \"${BUILD_VERSION}\" \\'.version = $BUILD_VERSION\\' | sponge backend/package.json'\n\t\t\t\t\t\tsh 'echo -e \"\\\\E[1;36mBackend Version is:\\\\E[1;33m  $(cat backend/package.json | jq -r .version)\\\\E[0m\"'\n\t\t\t\t\t\tsh 'sed -i -E \"s/(version-)[0-9]+\\\\.[0-9]+\\\\.[0-9]+(-green)/\\\\1${BUILD_VERSION}\\\\2/\" README.md'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstage('Docker Login') {\n\t\t\t\t\tsteps {\n\t\t\t\t\t\twithCredentials([usernamePassword(credentialsId: 'jc21-dockerhub', passwordVariable: 'dpass', usernameVariable: 'duser')]) {\n\t\t\t\t\t\t\tsh 'docker login -u \"${duser}\" -p \"${dpass}\"'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstage('Builds') {\n\t\t\tparallel {\n\t\t\t\tstage('Project') {\n\t\t\t\t\tsteps {\n\t\t\t\t\t\tscript {\n\t\t\t\t\t\t\t// Frontend and Backend\n\t\t\t\t\t\t\tdef shStatusCode = sh(label: 'Checking and Building', returnStatus: true, script: '''\n\t\t\t\t\t\t\t\tset -e\n\t\t\t\t\t\t\t\t./scripts/ci/frontend-build > ${WORKSPACE}/tmp-sh-build 2>&1\n\t\t\t\t\t\t\t\t./scripts/ci/test-and-build > ${WORKSPACE}/tmp-sh-build 2>&1\n\t\t\t\t\t\t\t''')\n\t\t\t\t\t\t\tshOutput = readFile \"${env.WORKSPACE}/tmp-sh-build\"\n\t\t\t\t\t\t\tif (shStatusCode != 0) {\n\t\t\t\t\t\t\t\terror \"${shOutput}\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpost {\n\t\t\t\t\t\talways {\n\t\t\t\t\t\t\tsh 'rm -f ${WORKSPACE}/tmp-sh-build'\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfailure {\n\t\t\t\t\t\t\tnpmGithubPrComment(\"CI Error:\\n\\n```\\n${shOutput}\\n```\", true)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstage('Docs') {\n\t\t\t\t\tsteps {\n\t\t\t\t\t\tdir(path: 'docs') {\n\t\t\t\t\t\t\tsh 'yarn install'\n\t\t\t\t\t\t\tsh 'yarn build'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstage('Test Sqlite') {\n\t\t\tenvironment {\n\t\t\t\tCOMPOSE_PROJECT_NAME = \"npm_${BRANCH_LOWER}_${BUILD_NUMBER}_sqlite\"\n\t\t\t\tCOMPOSE_FILE         = 'docker/docker-compose.ci.yml:docker/docker-compose.ci.sqlite.yml'\n\t\t\t}\n\t\t\twhen {\n\t\t\t\tnot {\n\t\t\t\t\tequals expected: 'UNSTABLE', actual: currentBuild.result\n\t\t\t\t}\n\t\t\t}\n\t\t\tsteps {\n\t\t\t\tsh 'rm -rf ./test/results/junit/*'\n\t\t\t\tsh './scripts/ci/fulltest-cypress'\n\t\t\t}\n\t\t\tpost {\n\t\t\t\talways {\n\t\t\t\t\t// Dumps to analyze later\n\t\t\t\t\tsh 'mkdir -p debug/sqlite'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q fullstack) > debug/sqlite/docker_fullstack.log 2>&1'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q stepca) > debug/sqlite/docker_stepca.log 2>&1'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q pdns) > debug/sqlite/docker_pdns.log 2>&1'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q pdns-db) > debug/sqlite/docker_pdns-db.log 2>&1'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q dnsrouter) > debug/sqlite/docker_dnsrouter.log 2>&1'\n\t\t\t\t\tjunit 'test/results/junit/*'\n\t\t\t\t\tsh 'docker-compose down --remove-orphans --volumes -t 30 || true'\n\t\t\t\t}\n\t\t\t\tunstable {\n\t\t\t\t\tdir(path: 'test/results') {\n\t\t\t\t\t\tarchiveArtifacts(allowEmptyArchive: true, artifacts: '**/*', excludes: '**/*.xml')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstage('Test Mysql') {\n\t\t\tenvironment {\n\t\t\t\tCOMPOSE_PROJECT_NAME = \"npm_${BRANCH_LOWER}_${BUILD_NUMBER}_mysql\"\n\t\t\t\tCOMPOSE_FILE         = 'docker/docker-compose.ci.yml:docker/docker-compose.ci.mysql.yml'\n\t\t\t}\n\t\t\twhen {\n\t\t\t\tnot {\n\t\t\t\t\tequals expected: 'UNSTABLE', actual: currentBuild.result\n\t\t\t\t}\n\t\t\t}\n\t\t\tsteps {\n\t\t\t\tsh 'rm -rf ./test/results/junit/*'\n\t\t\t\tsh './scripts/ci/fulltest-cypress'\n\t\t\t}\n\t\t\tpost {\n\t\t\t\talways {\n\t\t\t\t\t// Dumps to analyze later\n\t\t\t\t\tsh 'mkdir -p debug/mysql'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q fullstack) > debug/mysql/docker_fullstack.log 2>&1'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q stepca) > debug/mysql/docker_stepca.log 2>&1'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q pdns) > debug/mysql/docker_pdns.log 2>&1'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q pdns-db) > debug/mysql/docker_pdns-db.log 2>&1'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q dnsrouter) > debug/mysql/docker_dnsrouter.log 2>&1'\n\t\t\t\t\tjunit 'test/results/junit/*'\n\t\t\t\t\tsh 'docker-compose down --remove-orphans --volumes -t 30 || true'\n\t\t\t\t}\n\t\t\t\tunstable {\n\t\t\t\t\tdir(path: 'test/results') {\n\t\t\t\t\t\tarchiveArtifacts(allowEmptyArchive: true, artifacts: '**/*', excludes: '**/*.xml')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstage('Test Postgres') {\n\t\t\tenvironment {\n\t\t\t\tCOMPOSE_PROJECT_NAME = \"npm_${BRANCH_LOWER}_${BUILD_NUMBER}_postgres\"\n\t\t\t\tCOMPOSE_FILE         = 'docker/docker-compose.ci.yml:docker/docker-compose.ci.postgres.yml'\n\t\t\t}\n\t\t\twhen {\n\t\t\t\tnot {\n\t\t\t\t\tequals expected: 'UNSTABLE', actual: currentBuild.result\n\t\t\t\t}\n\t\t\t}\n\t\t\tsteps {\n\t\t\t\tsh 'rm -rf ./test/results/junit/*'\n\t\t\t\tsh './scripts/ci/fulltest-cypress'\n\t\t\t}\n\t\t\tpost {\n\t\t\t\talways {\n\t\t\t\t\t// Dumps to analyze later\n\t\t\t\t\tsh 'mkdir -p debug/postgres'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q fullstack) > debug/postgres/docker_fullstack.log 2>&1'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q stepca) > debug/postgres/docker_stepca.log 2>&1'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q pdns) > debug/postgres/docker_pdns.log 2>&1'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q pdns-db) > debug/postgres/docker_pdns-db.log 2>&1'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q dnsrouter) > debug/postgres/docker_dnsrouter.log 2>&1'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q db-postgres) > debug/postgres/docker_db-postgres.log 2>&1'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q authentik) > debug/postgres/docker_authentik.log 2>&1'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q authentik-redis) > debug/postgres/docker_authentik-redis.log 2>&1'\n\t\t\t\t\tsh 'docker logs $(docker-compose ps --all -q authentik-ldap) > debug/postgres/docker_authentik-ldap.log 2>&1'\n\n\t\t\t\t\tjunit 'test/results/junit/*'\n\t\t\t\t\tsh 'docker-compose down --remove-orphans --volumes -t 30 || true'\n\t\t\t\t}\n\t\t\t\tunstable {\n\t\t\t\t\tdir(path: 'test/results') {\n\t\t\t\t\t\tarchiveArtifacts(allowEmptyArchive: true, artifacts: '**/*', excludes: '**/*.xml')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstage('MultiArch Build') {\n\t\t\twhen {\n\t\t\t\tnot {\n\t\t\t\t\tequals expected: 'UNSTABLE', actual: currentBuild.result\n\t\t\t\t}\n\t\t\t}\n\t\t\tsteps {\n\t\t\t\tsh \"./scripts/buildx --push ${buildxPushTags}\"\n\t\t\t}\n\t\t}\n\t\tstage('Docs / Comment') {\n\t\t\tparallel {\n\t\t\t\tstage('Docs Job') {\n\t\t\t\t\twhen {\n\t\t\t\t\t\tallOf {\n\t\t\t\t\t\t\tbranch pattern: \"^(develop|master)\\$\", comparator: \"REGEXP\"\n\t\t\t\t\t\t\tnot {\n\t\t\t\t\t\t\t\tequals expected: 'UNSTABLE', actual: currentBuild.result\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsteps {\n\t\t\t\t\t\tbuild wait: false, job: 'nginx-proxy-manager-docs', parameters: [string(name: 'docs_branch', value: \"$BRANCH_NAME\")]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstage('PR Comment') {\n\t\t\t\t\twhen {\n\t\t\t\t\t\tallOf {\n\t\t\t\t\t\t\tchangeRequest()\n\t\t\t\t\t\t\tnot {\n\t\t\t\t\t\t\t\tequals expected: 'UNSTABLE', actual: currentBuild.result\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsteps {\n\t\t\t\t\t\tscript {\n\t\t\t\t\t\t\tnpmGithubPrComment(\"\"\"Docker Image for build ${BUILD_NUMBER} is available on\n[DockerHub](https://cloud.docker.com/repository/docker/nginxproxymanager/${IMAGE}-dev)\nas `nginxproxymanager/${IMAGE}-dev:${BRANCH_LOWER}`\n\n**Note:** ensure you backup your NPM instance before testing this image! Especially if there are database changes\n**Note:** this is a different docker image namespace than the official image\n\"\"\", true)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tpost {\n\t\talways {\n\t\t\tsh 'echo Reverting ownership'\n\t\t\tsh 'docker run --rm -v \"$(pwd):/data\" jc21/ci-tools chown -R \"$(id -u):$(id -g)\" /data'\n\t\t\tprintResult(true)\n\t\t}\n\t\tfailure {\n\t\t\tarchiveArtifacts(artifacts: 'debug/**/*.*', allowEmptyArchive: true)\n\t\t}\n\t\tunstable {\n\t\t\tarchiveArtifacts(artifacts: 'debug/**/*.*', allowEmptyArchive: true)\n\t\t}\n\t}\n}\n\ndef getVersion() {\n\tver = sh(script: 'cat .version', returnStdout: true)\n\treturn ver.trim()\n}\n\ndef getCommit() {\n\tver = sh(script: 'git log -n 1 --format=%h', returnStdout: true)\n\treturn ver.trim()\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0322265625,
          "content": "MIT License\n\nCopyright (c) 2017 \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.427734375,
          "content": "<p align=\"center\">\n\t<img src=\"https://nginxproxymanager.com/github.png\">\n\t<br><br>\n\t<img src=\"https://img.shields.io/badge/version-2.12.2-green.svg?style=for-the-badge\">\n\t<a href=\"https://hub.docker.com/repository/docker/jc21/nginx-proxy-manager\">\n\t\t<img src=\"https://img.shields.io/docker/stars/jc21/nginx-proxy-manager.svg?style=for-the-badge\">\n\t</a>\n\t<a href=\"https://hub.docker.com/repository/docker/jc21/nginx-proxy-manager\">\n\t\t<img src=\"https://img.shields.io/docker/pulls/jc21/nginx-proxy-manager.svg?style=for-the-badge\">\n\t</a>\n</p>\n\nThis project comes as a pre-built docker image that enables you to easily forward to your websites\nrunning at home or otherwise, including free SSL, without having to know too much about Nginx or Letsencrypt.\n\n- [Quick Setup](#quick-setup)\n- [Full Setup](https://nginxproxymanager.com/setup/)\n- [Screenshots](https://nginxproxymanager.com/screenshots/)\n\n## Project Goal\n\nI created this project to fill a personal need to provide users with an easy way to accomplish reverse\nproxying hosts with SSL termination and it had to be so easy that a monkey could do it. This goal hasn't changed.\nWhile there might be advanced options they are optional and the project should be as simple as possible\nso that the barrier for entry here is low.\n\n<a href=\"https://www.buymeacoffee.com/jc21\" target=\"_blank\"><img src=\"http://public.jc21.com/github/by-me-a-coffee.png\" alt=\"Buy Me A Coffee\" style=\"height: 51px !important;width: 217px !important;\" ></a>\n\n\n## Features\n\n- Beautiful and Secure Admin Interface based on [Tabler](https://tabler.github.io/)\n- Easily create forwarding domains, redirections, streams and 404 hosts without knowing anything about Nginx\n- Free SSL using Let's Encrypt or provide your own custom SSL certificates\n- Access Lists and basic HTTP Authentication for your hosts\n- Advanced Nginx configuration available for super users\n- User management, permissions and audit log\n\n\n## Hosting your home network\n\nI won't go in to too much detail here but here are the basics for someone new to this self-hosted world.\n\n1. Your home router will have a Port Forwarding section somewhere. Log in and find it\n2. Add port forwarding for port 80 and 443 to the server hosting this project\n3. Configure your domain name details to point to your home, either with a static ip or a service like DuckDNS or [Amazon Route53](https://github.com/jc21/route53-ddns)\n4. Use the Nginx Proxy Manager as your gateway to forward to your other web based services\n\n## Quick Setup\n\n1. Install Docker and Docker-Compose\n\n- [Docker Install documentation](https://docs.docker.com/install/)\n- [Docker-Compose Install documentation](https://docs.docker.com/compose/install/)\n\n2. Create a docker-compose.yml file similar to this:\n\n```yml\nservices:\n  app:\n    image: 'docker.io/jc21/nginx-proxy-manager:latest'\n    restart: unless-stopped\n    ports:\n      - '80:80'\n      - '81:81'\n      - '443:443'\n    volumes:\n      - ./data:/data\n      - ./letsencrypt:/etc/letsencrypt\n```\n\nThis is the bare minimum configuration required. See the [documentation](https://nginxproxymanager.com/setup/) for more.\n\n3. Bring up your stack by running\n\n```bash\ndocker-compose up -d\n\n# If using docker-compose-plugin\ndocker compose up -d\n\n```\n\n4. Log in to the Admin UI\n\nWhen your docker container is running, connect to it on port `81` for the admin interface.\nSometimes this can take a little bit because of the entropy of keys.\n\n[http://127.0.0.1:81](http://127.0.0.1:81)\n\nDefault Admin User:\n```\nEmail:    admin@example.com\nPassword: changeme\n```\n\nImmediately after logging in with this default user you will be asked to modify your details and change your password.\n\n\n## Contributing\n\nAll are welcome to create pull requests for this project, against the `develop` branch. Official releases are created from the `master` branch.\n\nCI is used in this project. All PR's must pass before being considered. After passing,\ndocker builds for PR's are available on dockerhub for manual verifications.\n\nDocumentation within the `develop` branch is available for preview at\n[https://develop.nginxproxymanager.com](https://develop.nginxproxymanager.com)\n\n\n### Contributors\n\nSpecial thanks to [all of our contributors](https://github.com/NginxProxyManager/nginx-proxy-manager/graphs/contributors).\n\n\n## Getting Support\n\n1. [Found a bug?](https://github.com/NginxProxyManager/nginx-proxy-manager/issues)\n2. [Discussions](https://github.com/NginxProxyManager/nginx-proxy-manager/discussions)\n3. [Reddit](https://reddit.com/r/nginxproxymanager)\n"
        },
        {
          "name": "backend",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "frontend",
          "type": "tree",
          "content": null
        },
        {
          "name": "global",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}