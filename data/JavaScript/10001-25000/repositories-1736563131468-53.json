{
  "metadata": {
    "timestamp": 1736563131468,
    "page": 53,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "git-tips/tips",
      "stars": 21434,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".doxie.render.js",
          "type": "blob",
          "size": 0.4755859375,
          "content": "function escapeStr(str) {\n  return str\n      .replace(/\\\"/g, '\\\\\"')\n      .replace(/\\n/g, '\\\\n');\n}\n\nvar render = function(data) {\n  var data = data.data;\n\n  var tips = [\n    '## ' + data.title,\n    '```sh',\n    data.tip,\n    '```',\n    '\\n'\n  ];\n  Array.isArray(data.alternatives) && tips.push(['__Alternatives:__']) &&\n  data.alternatives.map(function(alternative){\n     tips = tips.concat(['```sh',alternative,'```','\\n'])\n  });\n  return tips.join('\\n');\n};\n\nmodule.exports = render;\n"
        },
        {
          "name": ".doxie.render.toc.js",
          "type": "blob",
          "size": 0.6005859375,
          "content": "// from https://gist.github.com/mathewbyrne/1280286\nslugify = function(text){\n  return text.toString().toLowerCase()\n    .replace(/\\s+/g, '-')           // Replace spaces with -\n    .replace(/[^\\w\\-]+/g, '')       // Remove all non-word chars\n    .replace(/\\-\\-+/g, '-')         // Replace multiple - with single -\n    .replace(/^-+/, '')             // Trim - from start of text\n    .replace(/-+$/, '');            // Trim - from end of text\n}\n\nvar render = function(data) {\n  var data = data.data;\n\n  var out = '* [' + data.title + '](#' + slugify(data.title) + ')\\n';\n\n  return out;\n};\n\nmodule.exports = render;\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0322265625,
          "content": ".idea\nnode_modules\nnpm-debug.log\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2734375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at hemanth.hm@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.07421875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Hemanth.HM <hemanth.hm@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 33.0224609375,
          "content": "## git-tips\n> Collection of `git-tips`, want to add your tips? Checkout [contributing.md](./contributing.md)\n\n[English](http://git.io/git-tips) | [中文](https://github.com/521xueweihan/git-tips) | [Русский](https://github.com/Imangazaliev/git-tips) | [한국어](https://github.com/mingrammer/git-tips) | [Tiếng Việt](https://github.com/hprobotic/git-tips) | [日本語](https://github.com/isotai/git-tips) | [नेपाली](https://github.com/amarduwal/git-tips) | [Polski](https://github.com/mbiesiad/tips) | [فارسی](https://github.com/javadnikbakht/git-tips)\n\n### __Tools:__\n\n* [git-tip](https://www.npmjs.com/package/git-tip) - A handy CLI to make optimum use of these tips. ([Here in Docker container](https://github.com/djoudi5/docker-git-tip))\n\nP.S: All these commands are tested on `git version 2.7.4 (Apple Git-66)`.\n\n<!-- @doxie.inject start toc -->\n<!-- Don’t remove or change the comment above – that can break automatic updates. -->\n* [Everyday Git in twenty commands or so](#everyday-git-in-twenty-commands-or-so)\n* [Show helpful guides that come with Git](#show-helpful-guides-that-come-with-git)\n* [Search change by content](#search-change-by-content)\n* [Show changes over time for specific file](#show-changes-over-time-for-specific-file)\n* [Remove sensitive data from history, after a push](#remove-sensitive-data-from-history-after-a-push)\n* [Sync with remote, overwrite local changes](#sync-with-remote-overwrite-local-changes)\n* [List of all files till a commit](#list-of-all-files-till-a-commit)\n* [Git reset first commit](#git-reset-first-commit)\n* [Reset: preserve uncommitted local changes](#reset-preserve-uncommitted-local-changes)\n* [List all the conflicted files](#list-all-the-conflicted-files)\n* [List of all files changed in a commit](#list-of-all-files-changed-in-a-commit)\n* [Unstaged changes since last commit](#unstaged-changes-since-last-commit)\n* [Changes staged for commit](#changes-staged-for-commit)\n* [Show both staged and unstaged changes](#show-both-staged-and-unstaged-changes)\n* [List all branches that are already merged into master](#list-all-branches-that-are-already-merged-into-master)\n* [Quickly switch to the previous branch](#quickly-switch-to-the-previous-branch)\n* [Remove branches that have already been merged with master](#remove-branches-that-have-already-been-merged-with-master)\n* [List all branches and their upstreams, as well as last commit on branch](#list-all-branches-and-their-upstreams-as-well-as-last-commit-on-branch)\n* [Track upstream branch](#track-upstream-branch)\n* [Delete local branch](#delete-local-branch)\n* [Delete remote branch](#delete-remote-branch)\n* [Create local tag](#create-local-tag)\n* [Delete local tag](#delete-local-tag)\n* [Delete remote tag](#delete-remote-tag)\n* [Undo local changes with the last content in head](#undo-local-changes-with-the-last-content-in-head)\n* [Revert: Undo a commit by creating a new commit](#revert-undo-a-commit-by-creating-a-new-commit)\n* [Reset: Discard commits, advised for private branch](#reset-discard-commits-advised-for-private-branch)\n* [Reword the previous commit message](#reword-the-previous-commit-message)\n* [See commit history for just the current branch](#see-commit-history-for-just-the-current-branch)\n* [Amend author.](#amend-author)\n* [Reset author, after author has been changed in the global config.](#reset-author-after-author-has-been-changed-in-the-global-config)\n* [Changing a remote's URL](#changing-a-remotes-url)\n* [Get list of all remote references](#get-list-of-all-remote-references)\n* [Get list of all local and remote branches](#get-list-of-all-local-and-remote-branches)\n* [Get only remote branches](#get-only-remote-branches)\n* [Stage parts of a changed file, instead of the entire file](#stage-parts-of-a-changed-file-instead-of-the-entire-file)\n* [Get git bash completion](#get-git-bash-completion)\n* [What changed since two weeks?](#what-changed-since-two-weeks)\n* [See all commits made since forking from master](#see-all-commits-made-since-forking-from-master)\n* [Pick commits across branches using cherry-pick](#pick-commits-across-branches-using-cherry-pick)\n* [Find out branches containing commit-hash](#find-out-branches-containing-commit-hash)\n* [Git Aliases](#git-aliases)\n* [Saving current state of tracked files without commiting](#saving-current-state-of-tracked-files-without-commiting)\n* [Saving current state of unstaged changes to tracked files](#saving-current-state-of-unstaged-changes-to-tracked-files)\n* [Saving current state including untracked files](#saving-current-state-including-untracked-files)\n* [Saving current state with message](#saving-current-state-with-message)\n* [Saving current state of all files (ignored, untracked, and tracked)](#saving-current-state-of-all-files-ignored-untracked-and-tracked)\n* [Show list of all saved stashes](#show-list-of-all-saved-stashes)\n* [Show the contents of any stash in patch form](#show-the-contents-of-any-stash-in-patch-form)\n* [Apply any stash without deleting from the stashed list](#apply-any-stash-without-deleting-from-the-stashed-list)\n* [Apply last stashed state and delete it from stashed list](#apply-last-stashed-state-and-delete-it-from-stashed-list)\n* [Delete all stored stashes](#delete-all-stored-stashes)\n* [Grab a single file from a stash](#grab-a-single-file-from-a-stash)\n* [Show all tracked files](#show-all-tracked-files)\n* [Show all untracked files](#show-all-untracked-files)\n* [Show all ignored files](#show-all-ignored-files)\n* [Create new working tree from a repository (git 2.5)](#create-new-working-tree-from-a-repository-git-25)\n* [Create new working tree from HEAD state](#create-new-working-tree-from-head-state)\n* [Untrack files without deleting](#untrack-files-without-deleting)\n* [Before deleting untracked files/directory, do a dry run to get the list of these files/directories](#before-deleting-untracked-filesdirectory-do-a-dry-run-to-get-the-list-of-these-filesdirectories)\n* [Forcefully remove untracked files](#forcefully-remove-untracked-files)\n* [Forcefully remove untracked directory](#forcefully-remove-untracked-directory)\n* [Update all the submodules](#update-all-the-submodules)\n* [Show all commits in the current branch yet to be merged to master](#show-all-commits-in-the-current-branch-yet-to-be-merged-to-master)\n* [Rename a branch](#rename-a-branch)\n* [Rebases 'feature' to 'master' and merges it in to master ](#rebases-feature-to-master-and-merges-it-in-to-master)\n* [Archive the `master` branch](#archive-the-master-branch)\n* [Modify previous commit without modifying the commit message](#modify-previous-commit-without-modifying-the-commit-message)\n* [Prunes references to remove branches that have been deleted in the remote.](#prunes-references-to-remove-branches-that-have-been-deleted-in-the-remote)\n* [Delete local branches that has been squash and merged in the remote.](#delete-local-branches-that-has-been-squash-and-merged-in-the-remote)\n* [Retrieve the commit hash of the initial revision.](#retrieve-the-commit-hash-of-the-initial-revision)\n* [Visualize the version tree.](#visualize-the-version-tree)\n* [Visualize the tree including commits that are only referenced from reflogs](#visualize-the-tree-including-commits-that-are-only-referenced-from-reflogs)\n* [Deploying git tracked subfolder to gh-pages](#deploying-git-tracked-subfolder-to-gh-pages)\n* [Adding a project to repo using subtree](#adding-a-project-to-repo-using-subtree)\n* [Get latest changes in your repo for a linked project using subtree](#get-latest-changes-in-your-repo-for-a-linked-project-using-subtree)\n* [Export a branch with history to a file.](#export-a-branch-with-history-to-a-file)\n* [Import from a bundle](#import-from-a-bundle)\n* [Get the name of current branch.](#get-the-name-of-current-branch)\n* [Ignore one file on commit (e.g. Changelog).](#ignore-one-file-on-commit-eg-changelog)\n* [Stash changes before rebasing](#stash-changes-before-rebasing)\n* [Fetch pull request by ID to a local branch](#fetch-pull-request-by-id-to-a-local-branch)\n* [Show the most recent tag on the current branch.](#show-the-most-recent-tag-on-the-current-branch)\n* [Show inline word diff.](#show-inline-word-diff)\n* [Show changes using common diff tools.](#show-changes-using-common-diff-tools)\n* [Don’t consider changes for tracked file.](#dont-consider-changes-for-tracked-file)\n* [Undo assume-unchanged.](#undo-assume-unchanged)\n* [Clean the files from `.gitignore`.](#clean-the-files-from-gitignore)\n* [Restore deleted file.](#restore-deleted-file)\n* [Restore file to a specific commit-hash](#restore-file-to-a-specific-commit-hash)\n* [Always rebase instead of merge on pull.](#always-rebase-instead-of-merge-on-pull)\n* [List all the alias and configs.](#list-all-the-alias-and-configs)\n* [Make git case sensitive.](#make-git-case-sensitive)\n* [Add custom editors.](#add-custom-editors)\n* [Auto correct typos.](#auto-correct-typos)\n* [Check if the change was a part of a release.](#check-if-the-change-was-a-part-of-a-release)\n* [Dry run. (any command that supports dry-run flag should do.)](#dry-run-any-command-that-supports-dry-run-flag-should-do)\n* [Marks your commit as a fix of a previous commit.](#marks-your-commit-as-a-fix-of-a-previous-commit)\n* [Squash fixup commits normal commits.](#squash-fixup-commits-normal-commits)\n* [Skip staging area during commit.](#skip-staging-area-during-commit)\n* [Interactive staging.](#interactive-staging)\n* [List ignored files.](#list-ignored-files)\n* [Status of ignored files.](#status-of-ignored-files)\n* [Commits in Branch1 that are not in Branch2](#commits-in-branch1-that-are-not-in-branch2)\n* [List n last commits](#list-n-last-commits)\n* [Reuse recorded resolution, record and reuse previous conflicts resolutions.](#reuse-recorded-resolution-record-and-reuse-previous-conflicts-resolutions)\n* [Open all conflicted files in an editor.](#open-all-conflicted-files-in-an-editor)\n* [Count unpacked number of objects and their disk consumption.](#count-unpacked-number-of-objects-and-their-disk-consumption)\n* [Prune all unreachable objects from the object database.](#prune-all-unreachable-objects-from-the-object-database)\n* [Instantly browse your working repository in gitweb.](#instantly-browse-your-working-repository-in-gitweb)\n* [View the GPG signatures in the commit log](#view-the-gpg-signatures-in-the-commit-log)\n* [Remove entry in the global config.](#remove-entry-in-the-global-config)\n* [Checkout a new branch without any history](#checkout-a-new-branch-without-any-history)\n* [Extract file from another branch.](#extract-file-from-another-branch)\n* [List only the root and merge commits.](#list-only-the-root-and-merge-commits)\n* [Change previous two commits with an interactive rebase.](#change-previous-two-commits-with-an-interactive-rebase)\n* [List all branch is WIP](#list-all-branch-is-wip)\n* [Find guilty with binary search](#find-guilty-with-binary-search)\n* [Bypass pre-commit and commit-msg githooks](#bypass-pre-commit-and-commit-msg-githooks)\n* [List commits and changes to a specific file (even through renaming)](#list-commits-and-changes-to-a-specific-file-even-through-renaming)\n* [Clone a single branch](#clone-a-single-branch)\n* [Create and switch new branch](#create-and-switch-new-branch)\n* [Ignore file mode changes on commits](#ignore-file-mode-changes-on-commits)\n* [Turn off git colored terminal output](#turn-off-git-colored-terminal-output)\n* [Specific color settings](#specific-color-settings)\n* [Show all local branches ordered by recent commits](#show-all-local-branches-ordered-by-recent-commits)\n* [Find lines matching the pattern (regex or string) in tracked files](#find-lines-matching-the-pattern-regex-or-string-in-tracked-files)\n* [Clone a shallow copy of a repository](#clone-a-shallow-copy-of-a-repository)\n* [Search Commit log across all branches for given text](#search-commit-log-across-all-branches-for-given-text)\n* [Get first commit in a branch (from master)](#get-first-commit-in-a-branch-from-master)\n* [Unstaging Staged file](#unstaging-staged-file)\n* [Force push to Remote Repository](#force-push-to-remote-repository)\n* [Adding Remote name](#adding-remote-name)\n* [List all currently configured remotes](#list-all-currently-configured-remotes)\n* [Show the author, time and last revision made to each line of a given file](#show-the-author-time-and-last-revision-made-to-each-line-of-a-given-file)\n* [Group commits by authors and title](#group-commits-by-authors-and-title)\n* [Forced push but still ensure you don't overwrite other's work](#forced-push-but-still-ensure-you-dont-overwrite-others-work)\n* [Show how many lines does an author contribute](#show-how-many-lines-does-an-author-contribute)\n* [Revert: Reverting an entire merge](#revert-reverting-an-entire-merge)\n* [Number of commits in a branch](#number-of-commits-in-a-branch)\n* [Alias: git undo](#alias-git-undo)\n* [Add object notes](#add-object-notes)\n* [Show all the git-notes](#show-all-the-git-notes)\n* [Apply commit from another repository](#apply-commit-from-another-repository)\n* [Specific fetch reference](#specific-fetch-reference)\n* [Find common ancestor of two branches](#find-common-ancestor-of-two-branches)\n* [List unpushed git commits](#list-unpushed-git-commits)\n* [Add everything, but whitespace changes](#add-everything-but-whitespace-changes)\n* [Edit [local/global] git config](#edit-localglobal-git-config)\n* [blame on certain range](#blame-on-certain-range)\n* [Show a Git logical variable.](#show-a-git-logical-variable)\n* [Preformatted patch file.](#preformatted-patch-file)\n* [Get the repo name.](#get-the-repo-name)\n* [logs between date range](#logs-between-date-range)\n* [Exclude author from logs](#exclude-author-from-logs)\n* [Generates a summary of pending changes](#generates-a-summary-of-pending-changes)\n* [List references in a remote repository](#list-references-in-a-remote-repository)\n* [Backup untracked files.](#backup-untracked-files)\n* [List all git aliases](#list-all-git-aliases)\n* [Show git status short](#show-git-status-short)\n* [Checkout a commit prior to a day ago](#checkout-a-commit-prior-to-a-day-ago)\n* [Push the current branch to the same name on the remote repository](#push-the-current-branch-to-the-same-name-on-the-remote-repository)\n* [Push a new local branch to remote repository and track](#push-a-new-local-branch-to-remote-repository-and-track)\n* [Change a branch base](#change-a-branch-base)\n* [Use SSH instead of HTTPs for remotes](#use-ssh-instead-of-https-for-remotes)\n* [Update a submodule to the latest commit](#update-a-submodule-to-the-latest-commit)\n* [Prevent auto replacing LF with CRLF](#prevent-auto-replacing-lf-with-crlf)\n\n<!-- Don’t remove or change the comment below – that can break automatic updates. More info at <http://npm.im/doxie.inject>. -->\n<!-- @doxie.inject end toc -->\n\n\n<!-- @doxie.inject start -->\n<!-- Don’t remove or change the comment above – that can break automatic updates. -->\n## Everyday Git in twenty commands or so\n```sh\ngit help everyday\n```\n\n## Show helpful guides that come with Git\n```sh\ngit help -g\n```\n\n## Search change by content\n```sh\ngit log -S'<a term in the source>'\n```\n\n## Show changes over time for specific file\n```sh\ngit log -p <file_name>\n```\n\n## Remove sensitive data from history, after a push\n```sh\ngit filter-branch --force --index-filter 'git rm --cached --ignore-unmatch <path-to-your-file>' --prune-empty --tag-name-filter cat -- --all && git push origin --force --all\n```\n\n## Sync with remote, overwrite local changes\n```sh\ngit fetch origin && git reset --hard origin/master && git clean -f -d\n```\n\n## List of all files till a commit\n```sh\ngit ls-tree --name-only -r <commit-ish>\n```\n\n## Git reset first commit\n```sh\ngit update-ref -d HEAD\n```\n\n## Reset: preserve uncommitted local changes\n```sh\ngit reset --keep <commit>\n```\n\n## List all the conflicted files\n```sh\ngit diff --name-only --diff-filter=U\n```\n\n## List of all files changed in a commit\n```sh\ngit diff-tree --no-commit-id --name-only -r <commit-ish>\n```\n\n## Unstaged changes since last commit\n```sh\ngit diff\n```\n\n## Changes staged for commit\n```sh\ngit diff --cached\n```\n\n\n__Alternatives:__\n```sh\ngit diff --staged\n```\n\n## Show both staged and unstaged changes\n```sh\ngit diff HEAD\n```\n\n## List all branches that are already merged into master\n```sh\ngit branch --merged master\n```\n\n## Quickly switch to the previous branch\n```sh\ngit checkout -\n```\n\n\n__Alternatives:__\n```sh\ngit checkout @{-1}\n```\n\n## Remove branches that have already been merged with master\n```sh\ngit branch --merged master | grep -v '^\\*' | xargs -n 1 git branch -d\n```\n\n\n__Alternatives:__\n```sh\ngit branch --merged master | grep -v '^\\*\\|  master' | xargs -n 1 git branch -d # will not delete master if master is not checked out\n```\n\n## List all branches and their upstreams, as well as last commit on branch\n```sh\ngit branch -vv\n```\n\n## Track upstream branch\n```sh\ngit branch -u origin/mybranch\n```\n\n## Delete local branch\n```sh\ngit branch -d <local_branchname>\n```\n\n## Delete remote branch\n```sh\ngit push origin --delete <remote_branchname>\n```\n\n\n__Alternatives:__\n```sh\ngit push origin :<remote_branchname>\n```\n\n\n```sh\ngit branch -dr <remote/branch>\n```\n\n## Create local tag\n```sh\ngit tag <tag-name>\n```\n\n## Delete local tag\n```sh\ngit tag -d <tag-name>\n```\n\n## Delete remote tag\n```sh\ngit push origin :refs/tags/<tag-name>\n```\n\n## Undo local changes with the content in index(staging)\n```sh\ngit checkout -- <file_name>\n```\n\n## Revert: Undo a commit by creating a new commit\n```sh\ngit revert <commit-ish>\n```\n\n## Reset: Discard commits, advised for private branch\n```sh\ngit reset <commit-ish>\n```\n\n## Reword the previous commit message\n```sh\ngit commit -v --amend\n```\n\n## See commit history for just the current branch\n```sh\ngit cherry -v master\n```\n\n## Amend author.\n```sh\ngit commit --amend --author='Author Name <email@address.com>'\n```\n\n## Reset author, after author has been changed in the global config.\n```sh\ngit commit --amend --reset-author --no-edit\n```\n\n## Changing a remote's URL\n```sh\ngit remote set-url origin <URL>\n```\n\n## Get list of all remote references\n```sh\ngit remote\n```\n\n\n__Alternatives:__\n```sh\ngit remote show\n```\n\n## Get list of all local and remote branches\n```sh\ngit branch -a\n```\n\n## Get only remote branches\n```sh\ngit branch -r\n```\n\n## Stage parts of a changed file, instead of the entire file\n```sh\ngit add -p\n```\n\n## Get git bash completion\n```sh\ncurl -L http://git.io/vfhol > ~/.git-completion.bash && echo '[ -f ~/.git-completion.bash ] && . ~/.git-completion.bash' >> ~/.bashrc\n```\n\n## What changed since two weeks?\n```sh\ngit log --no-merges --raw --since='2 weeks ago'\n```\n\n\n__Alternatives:__\n```sh\ngit whatchanged --since='2 weeks ago'\n```\n\n## See all commits made since forking from master\n```sh\ngit log --no-merges --stat --reverse master..\n```\n\n## Pick commits across branches using cherry-pick\n```sh\ngit checkout <branch-name> && git cherry-pick <commit-ish>\n```\n\n## Find out branches containing commit-hash\n```sh\ngit branch -a --contains <commit-ish>\n```\n\n\n__Alternatives:__\n```sh\ngit branch --contains <commit-ish>\n```\n\n## Git Aliases\n```sh\ngit config --global alias.<handle> <command> \ngit config --global alias.st status\n```\n\n## Saving current state of tracked files without commiting\n```sh\ngit stash\n```\n\n\n__Alternatives:__\n```sh\ngit stash push\n```\n\n## Saving current state of unstaged changes to tracked files\n```sh\ngit stash -k\n```\n\n\n__Alternatives:__\n```sh\ngit stash --keep-index\n```\n\n\n```sh\ngit stash push --keep-index\n```\n\n## Saving current state including untracked files\n```sh\ngit stash -u\n```\n\n\n__Alternatives:__\n```sh\ngit stash push -u\n```\n\n\n```sh\ngit stash push --include-untracked\n```\n\n## Saving current state with message\n```sh\ngit stash push -m <message>\n```\n\n\n__Alternatives:__\n```sh\ngit stash push --message <message>\n```\n\n## Saving current state of all files (ignored, untracked, and tracked)\n```sh\ngit stash -a\n```\n\n\n__Alternatives:__\n```sh\ngit stash --all\n```\n\n\n```sh\ngit stash push --all\n```\n\n## Show list of all saved stashes\n```sh\ngit stash list\n```\n\n## Show the contents of any stash in patch form\n```sh\ngit stash show -p <stash@{n}>\n```\n\n## Apply any stash without deleting from the stashed list\n```sh\ngit stash apply <stash@{n}>\n```\n\n## Apply last stashed state and delete it from stashed list\n```sh\ngit stash pop\n```\n\n\n__Alternatives:__\n```sh\ngit stash apply stash@{0} && git stash drop stash@{0}\n```\n\n## Delete all stored stashes\n```sh\ngit stash clear\n```\n\n\n__Alternatives:__\n```sh\ngit stash drop <stash@{n}>\n```\n\n## Grab a single file from a stash\n```sh\ngit checkout <stash@{n}> -- <file_path>\n```\n\n\n__Alternatives:__\n```sh\ngit checkout stash@{0} -- <file_path>\n```\n\n## Show all tracked files\n```sh\ngit ls-files -t\n```\n\n## Show all untracked files\n```sh\ngit ls-files --others\n```\n\n## Show all ignored files\n```sh\ngit ls-files --others -i --exclude-standard\n```\n\n## Create new working tree from a repository (git 2.5)\n```sh\ngit worktree add -b <branch-name> <path> <start-point>\n```\n\n## Create new working tree from HEAD state\n```sh\ngit worktree add --detach <path> HEAD\n```\n\n## Untrack files without deleting\n```sh\ngit rm --cached <file_path>\n```\n\n\n__Alternatives:__\n```sh\ngit rm --cached -r <directory_path>\n```\n\n## Before deleting untracked files/directory, do a dry run to get the list of these files/directories\n```sh\ngit clean -n\n```\n\n## Forcefully remove untracked files\n```sh\ngit clean -f\n```\n\n## Forcefully remove untracked directory\n```sh\ngit clean -f -d\n```\n\n## Update all the submodules\n```sh\ngit submodule foreach git pull\n```\n\n\n__Alternatives:__\n```sh\ngit submodule update --init --recursive\n```\n\n\n```sh\ngit submodule update --remote\n```\n\n## Show all commits in the current branch yet to be merged to master\n```sh\ngit cherry -v master\n```\n\n\n__Alternatives:__\n```sh\ngit cherry -v master <branch-to-be-merged>\n```\n\n## Rename a branch\n```sh\ngit branch -m <new-branch-name>\n```\n\n\n__Alternatives:__\n```sh\ngit branch -m [<old-branch-name>] <new-branch-name>\n```\n\n## Rebases 'feature' to 'master' and merges it in to master \n```sh\ngit rebase master feature && git checkout master && git merge -\n```\n\n## Archive the `master` branch\n```sh\ngit archive master --format=zip --output=master.zip\n```\n\n## Modify previous commit without modifying the commit message\n```sh\ngit add --all && git commit --amend --no-edit\n```\n\n## Prunes references to remove branches that have been deleted in the remote.\n```sh\ngit fetch -p\n```\n\n\n__Alternatives:__\n```sh\ngit remote prune origin\n```\n\n## Delete local branches that has been squash and merged in the remote.\n```sh\ngit branch -vv | grep ': gone]' | awk '{print <!-- @doxie.inject start -->}' | xargs git branch -D\n```\n\n## Retrieve the commit hash of the initial revision.\n```sh\n git rev-list --reverse HEAD | head -1\n```\n\n\n__Alternatives:__\n```sh\ngit rev-list --max-parents=0 HEAD\n```\n\n\n```sh\ngit log --pretty=oneline | tail -1 | cut -c 1-40\n```\n\n\n```sh\ngit log --pretty=oneline --reverse | head -1 | cut -c 1-40\n```\n\n## Visualize the version tree.\n```sh\ngit log --pretty=oneline --graph --decorate --all\n```\n\n\n__Alternatives:__\n```sh\ngitk --all\n```\n\n\n```sh\ngit log --graph --pretty=format:'%C(auto) %h | %s | %an | %ar%d'\n```\n\n## Visualize the tree including commits that are only referenced from reflogs\n```sh\ngit log --graph --decorate --oneline $(git rev-list --walk-reflogs --all)\n```\n\n## Deploying git tracked subfolder to gh-pages\n```sh\ngit subtree push --prefix subfolder_name origin gh-pages\n```\n\n## Adding a project to repo using subtree\n```sh\ngit subtree add --prefix=<directory_name>/<project_name> --squash git@github.com:<username>/<project_name>.git master\n```\n\n## Get latest changes in your repo for a linked project using subtree\n```sh\ngit subtree pull --prefix=<directory_name>/<project_name> --squash git@github.com:<username>/<project_name>.git master\n```\n\n## Export a branch with history to a file.\n```sh\ngit bundle create <file> <branch-name>\n```\n\n## Import from a bundle\n```sh\ngit clone repo.bundle <repo-dir> -b <branch-name>\n```\n\n## Get the name of current branch.\n```sh\ngit rev-parse --abbrev-ref HEAD\n```\n\n## Ignore one file on commit (e.g. Changelog).\n```sh\ngit update-index --assume-unchanged Changelog; git commit -a; git update-index --no-assume-unchanged Changelog\n```\n\n## Stash changes before rebasing\n```sh\ngit rebase --autostash\n```\n\n## Fetch pull request by ID to a local branch\n```sh\ngit fetch origin pull/<id>/head:<branch-name>\n```\n\n\n__Alternatives:__\n```sh\ngit pull origin pull/<id>/head:<branch-name>\n```\n\n## Show the most recent tag on the current branch.\n```sh\ngit describe --tags --abbrev=0\n```\n\n## Show inline word diff.\n```sh\ngit diff --word-diff\n```\n\n## Show changes using common diff tools.\n```sh\ngit difftool [-t <tool>] <commit1> <commit2> <path>\n```\n\n## Don’t consider changes for tracked file.\n```sh\ngit update-index --assume-unchanged <file_name>\n```\n\n## Undo assume-unchanged.\n```sh\ngit update-index --no-assume-unchanged <file_name>\n```\n\n## Clean the files from `.gitignore`.\n```sh\ngit clean -X -f\n```\n\n## Restore deleted file.\n```sh\ngit checkout <deleting_commit> -- <file_path>\n```\n\n## Restore file to a specific commit-hash\n```sh\ngit checkout <commit-ish> -- <file_path>\n```\n\n## Always rebase instead of merge on pull.\n```sh\ngit config --global pull.rebase true\n```\n\n\n__Alternatives:__\n```sh\n#git < 1.7.9\ngit config --global branch.autosetuprebase always\n```\n\n## List all the alias and configs.\n```sh\ngit config --list\n```\n\n## Make git case sensitive.\n```sh\ngit config --global core.ignorecase false\n```\n\n## Add custom editors.\n```sh\ngit config --global core.editor '$EDITOR'\n```\n\n## Auto correct typos.\n```sh\ngit config --global help.autocorrect 1\n```\n\n## Check if the change was a part of a release.\n```sh\ngit name-rev --name-only <SHA-1>\n```\n\n## Dry run. (any command that supports dry-run flag should do.)\n```sh\ngit clean -fd --dry-run\n```\n\n## Marks your commit as a fix of a previous commit.\n```sh\ngit commit --fixup <SHA-1>\n```\n\n## Squash fixup commits normal commits.\n```sh\ngit rebase -i --autosquash\n```\n\n## Skip staging area during commit.\n```sh\ngit commit --only <file_path>\n```\n\n## Interactive staging.\n```sh\ngit add -i\n```\n\n## List ignored files.\n```sh\ngit check-ignore *\n```\n\n## Status of ignored files.\n```sh\ngit status --ignored\n```\n\n## Commits in Branch1 that are not in Branch2\n```sh\ngit log Branch1 ^Branch2\n```\n\n## List n last commits\n```sh\ngit log -<n>\n```\n\n\n__Alternatives:__\n```sh\ngit log -n <n>\n```\n\n## Reuse recorded resolution, record and reuse previous conflicts resolutions.\n```sh\ngit config --global rerere.enabled 1\n```\n\n## Open all conflicted files in an editor.\n```sh\ngit diff --name-only | uniq | xargs $EDITOR\n```\n\n## Count unpacked number of objects and their disk consumption.\n```sh\ngit count-objects --human-readable\n```\n\n## Prune all unreachable objects from the object database.\n```sh\ngit gc --prune=now --aggressive\n```\n\n## Instantly browse your working repository in gitweb.\n```sh\ngit instaweb [--local] [--httpd=<httpd>] [--port=<port>] [--browser=<browser>]\n```\n\n## View the GPG signatures in the commit log\n```sh\ngit log --show-signature\n```\n\n## Remove entry in the global config.\n```sh\ngit config --global --unset <entry-name>\n```\n\n## Checkout a new branch without any history\n```sh\ngit checkout --orphan <branch_name>\n```\n\n## Extract file from another branch.\n```sh\ngit show <branch_name>:<file_name>\n```\n\n## List only the root and merge commits.\n```sh\ngit log --first-parent\n```\n\n## Change previous two commits with an interactive rebase.\n```sh\ngit rebase --interactive HEAD~2\n```\n\n## List all branch is WIP\n```sh\ngit checkout master && git branch --no-merged\n```\n\n## Find guilty with binary search\n```sh\ngit bisect start                    # Search start \ngit bisect bad                      # Set point to bad commit \ngit bisect good v2.6.13-rc2         # Set point to good commit|tag \ngit bisect bad                      # Say current state is bad \ngit bisect good                     # Say current state is good \ngit bisect reset                    # Finish search \n\n```\n\n## Bypass pre-commit and commit-msg githooks\n```sh\ngit commit --no-verify\n```\n\n## List commits and changes to a specific file (even through renaming)\n```sh\ngit log --follow -p -- <file_path>\n```\n\n## Clone a single branch\n```sh\ngit clone -b <branch-name> --single-branch https://github.com/user/repo.git\n```\n\n## Create and switch new branch\n```sh\ngit checkout -b <branch-name>\n```\n\n\n__Alternatives:__\n```sh\ngit branch <branch-name> && git checkout <branch-name>\n```\n\n```sh\ngit switch -c <branch-name>\n```\n\n## Ignore file mode changes on commits\n```sh\ngit config core.fileMode false\n```\n\n## Turn off git colored terminal output\n```sh\ngit config --global color.ui false\n```\n\n## Specific color settings\n```sh\ngit config --global <specific command e.g branch, diff> <true, false or always>\n```\n\n## Show all local branches ordered by recent commits\n```sh\ngit for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/\n```\n\n## Find lines matching the pattern (regex or string) in tracked files\n```sh\ngit grep --heading --line-number 'foo bar'\n```\n\n## Clone a shallow copy of a repository\n```sh\ngit clone https://github.com/user/repo.git --depth 1\n```\n\n## Search Commit log across all branches for given text\n```sh\ngit log --all --grep='<given-text>'\n```\n\n## Get first commit in a branch (from master)\n```sh\ngit log --oneline master..<branch-name> | tail -1\n```\n\n\n__Alternatives:__\n```sh\ngit log --reverse master..<branch-name> | head -6\n```\n\n## Unstaging Staged file\n```sh\ngit reset HEAD <file-name>\n```\n\n## Force push to Remote Repository\n```sh\ngit push -f <remote-name> <branch-name>\n```\n\n## Adding Remote name\n```sh\ngit remote add <remote-nickname> <remote-url>\n```\n\n## List all currently configured remotes\n```sh\ngit remote -v\n```\n\n## Show the author, time and last revision made to each line of a given file\n```sh\ngit blame <file-name>\n```\n\n## Group commits by authors and title\n```sh\ngit shortlog\n```\n\n## Forced push but still ensure you don't overwrite other's work\n```sh\ngit push --force-with-lease <remote-name> <branch-name>\n```\n\n## Show how many lines does an author contribute\n```sh\ngit log --author='_Your_Name_Here_' --pretty=tformat: --numstat | gawk '{ add += <!-- @doxie.inject start -->; subs += <!-- @doxie.inject end -->; loc += <!-- @doxie.inject start --> - <!-- @doxie.inject end --> } END { printf \"added lines: %s removed lines: %s total lines: %s\n\", add, subs, loc }' -\n```\n\n\n__Alternatives:__\n```sh\ngit log --author='_Your_Name_Here_' --pretty=tformat: --numstat | awk '{ add += <!-- @doxie.inject start -->; subs += <!-- @doxie.inject end -->; loc += <!-- @doxie.inject start --> - <!-- @doxie.inject end --> } END { printf \"added lines: %s, removed lines: %s, total lines: %s\n\", add, subs, loc }' - # on Mac OSX\n```\n\n## Revert: Reverting an entire merge\n```sh\ngit revert -m 1 <commit-ish>\n```\n\n## Number of commits in a branch\n```sh\ngit rev-list --count <branch-name>\n```\n\n## Alias: git undo\n```sh\ngit config --global alias.undo '!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f'\n```\n\n## Add object notes\n```sh\ngit notes add -m 'Note on the previous commit....'\n```\n\n## Show all the git-notes\n```sh\ngit log --show-notes='*'\n```\n\n## Apply commit from another repository\n```sh\ngit --git-dir=<source-dir>/.git format-patch -k -1 --stdout <SHA1> | git am -3 -k\n```\n\n## Specific fetch reference\n```sh\ngit fetch origin master:refs/remotes/origin/mymaster\n```\n\n## Find common ancestor of two branches\n```sh\ngit merge-base <branch-name> <other-branch-name>\n```\n\n## List unpushed git commits\n```sh\ngit log --branches --not --remotes\n```\n\n\n__Alternatives:__\n```sh\ngit log @{u}..\n```\n\n\n```sh\ngit cherry -v\n```\n\n## Add everything, but whitespace changes\n```sh\ngit diff --ignore-all-space | git apply --cached\n```\n\n## Edit [local/global] git config\n```sh\ngit config [--global] --edit\n```\n\n## blame on certain range\n```sh\ngit blame -L <start>,<end>\n```\n\n## Show a Git logical variable.\n```sh\ngit var -l | <variable>\n```\n\n## Preformatted patch file.\n```sh\ngit format-patch -M upstream..topic\n```\n\n## Get the repo name.\n```sh\ngit rev-parse --show-toplevel\n```\n\n## logs between date range\n```sh\ngit log --since='FEB 1 2017' --until='FEB 14 2017'\n```\n\n## Exclude author from logs\n```sh\ngit log --perl-regexp --author='^((?!excluded-author-regex).*)\n\n```\n\n## Generates a summary of pending changes\n```sh\ngit request-pull v1.0 https://git.ko.xz/project master:for-linus\n```\n\n## List references in a remote repository\n```sh\ngit ls-remote git://git.kernel.org/pub/scm/git/git.git\n```\n\n## Backup untracked files.\n```sh\ngit ls-files --others -i --exclude-standard | xargs zip untracked.zip\n```\n\n## List all git aliases\n```sh\ngit config -l | grep alias | sed 's/^alias\\.//g'\n```\n\n\n__Alternatives:__\n```sh\ngit config -l | grep alias | cut -d '.' -f 2\n```\n\n## Show git status short\n```sh\ngit status --short --branch\n```\n\n## Checkout a commit prior to a day ago\n```sh\ngit checkout master@{yesterday}\n```\n\n## Push the current branch to the same name on the remote repository\n```sh\ngit push origin HEAD\n```\n\n## Push a new local branch to remote repository and track\n```sh\ngit push -u origin <branch_name>\n```\n\n## Change a branch base\n```sh\ngit rebase --onto <new_base> <old_base>\n```\n\n## Use SSH instead of HTTPs for remotes\n```sh\ngit config --global url.'git@github.com:'.insteadOf 'https://github.com/'\n```\n\n## Update a submodule to the latest commit\n```sh\ncd <path-to-submodule>\ngit pull origin <branch>\ncd <root-of-your-main-project>\ngit add <path-to-submodule>\ngit commit -m \"submodule updated\"\n```\n\n## Prevent auto replacing LF with CRLF\n```sh\ngit config --global core.autocrlf false\n```\n\n<!-- Don’t remove or change the comment below – that can break automatic updates. More info at <http://npm.im/doxie.inject>. -->\n<!-- @doxie.inject end -->\n"
        },
        {
          "name": "contributing.md",
          "type": "blob",
          "size": 0.564453125,
          "content": "## Easy steps:\n\n* [Fork](https://github.com/git-tips/tips/network) the repo.\n\n* Install the deps:\n ```sh\n  $ cd tips && npm install\n  ```\n\n :warning: don't fail to think that this is optional, because if you don't install the dependencies you won't get the benefit of auto-updating README and TOC and your PR will likely to not get merged because of that.\n\n* Edit [tips.json](./tips.json) to add your tip in the below format:\n\n```js\n{\n    \"title\": <your_tip_title>,\n    \"tip\": <your_tip>,\n    \"alternatives\": [Optional list of alternatives]\n}\n```\n\n* Commit, push and send a PR!\n"
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 9.26171875,
          "content": "{\n  \"name\": \"tips\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 1,\n  \"requires\": true,\n  \"dependencies\": {\n    \"101\": {\n      \"version\": \"1.6.3\",\n      \"resolved\": \"https://registry.npmjs.org/101/-/101-1.6.3.tgz\",\n      \"integrity\": \"sha512-4dmQ45yY0Dx24Qxp+zAsNLlMF6tteCyfVzgbulvSyC7tCyd3V8sW76sS0tHq8NpcbXfWTKasfyfzU1Kd86oKzw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"clone\": \"^1.0.2\",\n        \"deep-eql\": \"^0.1.3\",\n        \"keypather\": \"^1.10.2\"\n      }\n    },\n    \"1-liners\": {\n      \"version\": \"0.3.6\",\n      \"resolved\": \"https://registry.npmjs.org/1-liners/-/1-liners-0.3.6.tgz\",\n      \"integrity\": \"sha1-SDD+eLdTejaZ+IpdQqjtwa9mB/8=\",\n      \"dev\": true\n    },\n    \"ansi-regex\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz\",\n      \"integrity\": \"sha1-w7M6te42DYbg5ijwRorn7yfWVN8=\",\n      \"dev\": true\n    },\n    \"ansi-styles\": {\n      \"version\": \"2.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-2.2.1.tgz\",\n      \"integrity\": \"sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4=\",\n      \"dev\": true\n    },\n    \"array-find\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/array-find/-/array-find-1.0.0.tgz\",\n      \"integrity\": \"sha1-bI4obRHtdoMn+OYuzuhzU8o+eLg=\",\n      \"dev\": true\n    },\n    \"base64-js\": {\n      \"version\": \"0.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-0.0.2.tgz\",\n      \"integrity\": \"sha1-Ak8Pcq+iW3X5wO5zzU9V7Bvtl4Q=\",\n      \"dev\": true\n    },\n    \"bops\": {\n      \"version\": \"0.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/bops/-/bops-0.0.6.tgz\",\n      \"integrity\": \"sha1-CC0dVfoB5g29wuvC26N/ZZVUzzo=\",\n      \"dev\": true,\n      \"requires\": {\n        \"base64-js\": \"0.0.2\",\n        \"to-utf8\": \"0.0.1\"\n      }\n    },\n    \"chalk\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-1.1.3.tgz\",\n      \"integrity\": \"sha1-qBFcVeSnAv5NFQq9OHKCKn4J/Jg=\",\n      \"dev\": true,\n      \"requires\": {\n        \"ansi-styles\": \"^2.2.1\",\n        \"escape-string-regexp\": \"^1.0.2\",\n        \"has-ansi\": \"^2.0.0\",\n        \"strip-ansi\": \"^3.0.0\",\n        \"supports-color\": \"^2.0.0\"\n      }\n    },\n    \"clone\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/clone/-/clone-1.0.4.tgz\",\n      \"integrity\": \"sha1-2jCcwmPfFZlMaIypAheco8fNfH4=\",\n      \"dev\": true\n    },\n    \"concat-stream\": {\n      \"version\": \"1.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/concat-stream/-/concat-stream-1.2.1.tgz\",\n      \"integrity\": \"sha1-81EAtsRjeL+6i2uA+fDQzN8T3GA=\",\n      \"dev\": true,\n      \"requires\": {\n        \"bops\": \"0.0.6\"\n      }\n    },\n    \"deep-eql\": {\n      \"version\": \"0.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/deep-eql/-/deep-eql-0.1.3.tgz\",\n      \"integrity\": \"sha1-71WKyrjeJSBs1xOQbXTlaTDrafI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"type-detect\": \"0.1.1\"\n      }\n    },\n    \"defined\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/defined/-/defined-1.0.0.tgz\",\n      \"integrity\": \"sha1-yY2bzvdWdBiOEQlpFRGZ45sfppM=\",\n      \"dev\": true\n    },\n    \"doxie\": {\n      \"version\": \"0.2.4\",\n      \"resolved\": \"https://registry.npmjs.org/doxie/-/doxie-0.2.4.tgz\",\n      \"integrity\": \"sha1-KZltv1dg/OdNvLTXnGAjHYoXu4U=\",\n      \"dev\": true,\n      \"requires\": {\n        \"1-liners\": \"^0.3.2\",\n        \"chalk\": \"^1.0.0\",\n        \"doxie-core\": \"^0.3.1\",\n        \"stream-to-json\": \"^0.0.1\",\n        \"tiny-error\": \"^0.2.1\"\n      }\n    },\n    \"doxie-core\": {\n      \"version\": \"0.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/doxie-core/-/doxie-core-0.3.1.tgz\",\n      \"integrity\": \"sha1-PS+RQ+WF45Cpgwjcnk7zjxPPQss=\",\n      \"dev\": true,\n      \"requires\": {\n        \"1-liners\": \"^0.3.0\",\n        \"chalk\": \"^1.0.0\",\n        \"tiny-error\": \"^0.2.1\"\n      }\n    },\n    \"doxie.append\": {\n      \"version\": \"0.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/doxie.append/-/doxie.append-0.1.0.tgz\",\n      \"integrity\": \"sha1-yHRoUEL18wlKTQwzNsPklMNpdOE=\",\n      \"dev\": true,\n      \"requires\": {\n        \"object-assign\": \"^3.0.0\"\n      },\n      \"dependencies\": {\n        \"object-assign\": {\n          \"version\": \"3.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/object-assign/-/object-assign-3.0.0.tgz\",\n          \"integrity\": \"sha1-m+3VygiXlJvKR+f/QIBi1Un1h/I=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"doxie.inject\": {\n      \"version\": \"0.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/doxie.inject/-/doxie.inject-0.1.1.tgz\",\n      \"integrity\": \"sha1-/QNYT4segOZEtcuUdpr+RH94oEc=\",\n      \"dev\": true,\n      \"requires\": {\n        \"1-liners\": \"^0.3.2\",\n        \"array-find\": \"^1.0.0\",\n        \"chalk\": \"^1.0.0\",\n        \"defined\": \"^1.0.0\",\n        \"object-assign\": \"^3.0.0\",\n        \"tiny-error\": \"^0.2.1\"\n      },\n      \"dependencies\": {\n        \"object-assign\": {\n          \"version\": \"3.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/object-assign/-/object-assign-3.0.0.tgz\",\n          \"integrity\": \"sha1-m+3VygiXlJvKR+f/QIBi1Un1h/I=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"doxie.output\": {\n      \"version\": \"0.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/doxie.output/-/doxie.output-0.3.0.tgz\",\n      \"integrity\": \"sha1-4H4Stn2qX8KLPsZn0HAv1ziZitE=\",\n      \"dev\": true,\n      \"requires\": {\n        \"1-liners\": \"^0.3.0\",\n        \"object-assign\": \"^3.0.0\"\n      },\n      \"dependencies\": {\n        \"object-assign\": {\n          \"version\": \"3.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/object-assign/-/object-assign-3.0.0.tgz\",\n          \"integrity\": \"sha1-m+3VygiXlJvKR+f/QIBi1Un1h/I=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"doxie.render\": {\n      \"version\": \"0.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/doxie.render/-/doxie.render-0.3.2.tgz\",\n      \"integrity\": \"sha1-Mva37g88NSSokT08grn6uqoKGPA=\",\n      \"dev\": true,\n      \"requires\": {\n        \"1-liners\": \"^0.3.1\",\n        \"chalk\": \"^1.0.0\",\n        \"object-assign\": \"^3.0.0\",\n        \"tiny-error\": \"^0.2.1\"\n      },\n      \"dependencies\": {\n        \"object-assign\": {\n          \"version\": \"3.0.0\",\n          \"resolved\": \"https://registry.npmjs.org/object-assign/-/object-assign-3.0.0.tgz\",\n          \"integrity\": \"sha1-m+3VygiXlJvKR+f/QIBi1Un1h/I=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"escape-string-regexp\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\",\n      \"integrity\": \"sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=\",\n      \"dev\": true\n    },\n    \"has-ansi\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-ansi/-/has-ansi-2.0.0.tgz\",\n      \"integrity\": \"sha1-NPUEnOHs3ysGSa8+8k5F7TVBbZE=\",\n      \"dev\": true,\n      \"requires\": {\n        \"ansi-regex\": \"^2.0.0\"\n      }\n    },\n    \"husky\": {\n      \"version\": \"5.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/husky/-/husky-5.2.0.tgz\",\n      \"integrity\": \"sha512-AM8T/auHXRBxlrfPVLKP6jt49GCM2Zz47m8G3FOMsLmTv8Dj/fKVWE0Rh2d4Qrvmy131xEsdQnb3OXRib67PGg==\",\n      \"dev\": true\n    },\n    \"keypather\": {\n      \"version\": \"1.10.2\",\n      \"resolved\": \"https://registry.npmjs.org/keypather/-/keypather-1.10.2.tgz\",\n      \"integrity\": \"sha1-4ESWMtSz5RbyHMAUznxWRP3c5hQ=\",\n      \"dev\": true,\n      \"requires\": {\n        \"101\": \"^1.0.0\"\n      }\n    },\n    \"object-assign\": {\n      \"version\": \"4.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz\",\n      \"integrity\": \"sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM=\",\n      \"dev\": true\n    },\n    \"once\": {\n      \"version\": \"1.3.3\",\n      \"resolved\": \"https://registry.npmjs.org/once/-/once-1.3.3.tgz\",\n      \"integrity\": \"sha1-suJhVXzkwxTsgwTz+oJmPkKXyiA=\",\n      \"dev\": true,\n      \"requires\": {\n        \"wrappy\": \"1\"\n      }\n    },\n    \"stream-to-json\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/stream-to-json/-/stream-to-json-0.0.1.tgz\",\n      \"integrity\": \"sha1-8DDyt47TjkkpPbiFZTarzCZ3FHM=\",\n      \"dev\": true,\n      \"requires\": {\n        \"concat-stream\": \"~1.2.0\",\n        \"once\": \"~1.3.0\"\n      }\n    },\n    \"strip-ansi\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz\",\n      \"integrity\": \"sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=\",\n      \"dev\": true,\n      \"requires\": {\n        \"ansi-regex\": \"^2.0.0\"\n      }\n    },\n    \"supports-color\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-2.0.0.tgz\",\n      \"integrity\": \"sha1-U10EXOa2Nj+kARcIRimZXp3zJMc=\",\n      \"dev\": true\n    },\n    \"tiny-error\": {\n      \"version\": \"0.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/tiny-error/-/tiny-error-0.2.3.tgz\",\n      \"integrity\": \"sha1-KHas/leFGwcUMTwVNd/HBgp8Cbs=\",\n      \"dev\": true,\n      \"requires\": {\n        \"101\": \"^1.0.0\",\n        \"object-assign\": \"^4.0.1\"\n      }\n    },\n    \"to-utf8\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/to-utf8/-/to-utf8-0.0.1.tgz\",\n      \"integrity\": \"sha1-0Xrqcv8vujm55DYBvns/9y4ImFI=\",\n      \"dev\": true\n    },\n    \"type-detect\": {\n      \"version\": \"0.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/type-detect/-/type-detect-0.1.1.tgz\",\n      \"integrity\": \"sha1-C6XsKohWQORw6k6FBZcZANrFiCI=\",\n      \"dev\": true\n    },\n    \"wrappy\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz\",\n      \"integrity\": \"sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=\",\n      \"dev\": true\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.12109375,
          "content": "{\n  \"name\": \"tips\",\n  \"version\": \"1.0.0\",\n  \"description\": \"collection of git tips\",\n  \"main\": \"index.js\",\n  \"private\": \"true\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"precommit\": \"npm run generate && git add README.md\",\n    \"update-readme\": \"echo 'Updating the readme…'; doxie --render < ./tips.json --inject into README.md && echo '…done!'\",\n    \"update-toc\": \"echo 'Updating the table of contents…'; doxie --render .doxie.render.toc.js < ./tips.json --append '\\n' --inject into README.md as toc && echo '…done!'\",\n    \"generate\": \"npm run update-readme; npm run update-toc\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/npm-tips/tips.git\"\n  },\n  \"keywords\": [\n    \"npm\",\n    \"tips\"\n  ],\n  \"contributors\": [\n    \"hemanth\"\n  ],\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/git-tips/tips/issues\"\n  },\n  \"homepage\": \"https://github.com/git-tips/tips#readme\",\n  \"devDependencies\": {\n    \"doxie\": \"^0.2.2\",\n    \"doxie.append\": \"^0.1.0\",\n    \"doxie.inject\": \"^0.1.1\",\n    \"doxie.output\": \"^0.3.0\",\n    \"doxie.render\": \"^0.3.0\",\n    \"husky\": \"^5.0.9\"\n  }\n}\n"
        },
        {
          "name": "tips.json",
          "type": "blob",
          "size": 20.6357421875,
          "content": "[{\n\t\t\"title\": \"Everyday Git in twenty commands or so\",\n\t\t\"tip\": \"git help everyday\"\n\t}, {\n\t\t\"title\": \"Show helpful guides that come with Git\",\n\t\t\"tip\": \"git help -g\"\n\t}, {\n\t\t\"title\": \"Search change by content\",\n\t\t\"tip\": \"git log -S'<a term in the source>'\"\n\t}, {\n\t\t\"title\": \"Show changes over time for specific file\",\n\t\t\"tip\": \"git log -p <file_name>\"\n\t}, {\n\t\t\"title\": \"Remove sensitive data from history, after a push\",\n\t\t\"tip\": \"git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch <path-to-your-file>' --prune-empty --tag-name-filter cat -- --all && git push origin --force --all\"\n\t}, {\n\t\t\"title\": \"Sync with remote, overwrite local changes\",\n\t\t\"tip\": \"git fetch origin && git reset --hard origin/master && git clean -f -d\"\n\t}, {\n\t\t\"title\": \"List of all files till a commit\",\n\t\t\"tip\": \"git ls-tree --name-only -r <commit-ish>\"\n\t}, {\n\t\t\"title\": \"Git reset first commit\",\n\t\t\"tip\": \"git update-ref -d HEAD\"\n\t}, {\n\t\t\"title\": \"Reset: preserve uncommitted local changes\",\n\t\t\"tip\": \"git reset --keep <commit>\"\n\t}, {\n\t\t\"title\": \"List all the conflicted files\",\n\t\t\"tip\": \"git diff --name-only --diff-filter=U\"\n\t}, {\n\t\t\"title\": \"List of all files changed in a commit\",\n\t\t\"tip\": \"git diff-tree --no-commit-id --name-only -r <commit-ish>\"\n\t}, {\n\t\t\"title\": \"Unstaged changes since last commit\",\n\t\t\"tip\": \"git diff\"\n\t}, {\n\t\t\"title\": \"Changes staged for commit\",\n\t\t\"tip\": \"git diff --cached\",\n\t\t\"alternatives\": [\"git diff --staged\"]\n\t}, {\n\t\t\"title\": \"Show both staged and unstaged changes\",\n\t\t\"tip\": \"git diff HEAD\"\n\t}, {\n\t\t\"title\": \"List all branches that are already merged into master\",\n\t\t\"tip\": \"git branch --merged master\"\n\t}, {\n\t\t\"title\": \"Quickly switch to the previous branch\",\n\t\t\"tip\": \"git checkout -\",\n\t\t\"alternatives\": [\"git checkout @{-1}\"]\n\t}, {\n\t\t\"title\": \"Remove branches that have already been merged with master\",\n\t\t\"tip\": \"git branch --merged master | grep -v '^\\\\*' | xargs -n 1 git branch -d\",\n\t\t\"alternatives\": [\"git branch --merged master | grep -v '^\\\\*\\\\|  master' | xargs -n 1 git branch -d # will not delete master if master is not checked out\"]\n\t}, {\n\t\t\"title\": \"List all branches and their upstreams, as well as last commit on branch\",\n\t\t\"tip\": \"git branch -vv\"\n\t}, {\n\t\t\"title\": \"Track upstream branch\",\n\t\t\"tip\": \"git branch -u origin/mybranch\"\n\t}, {\n\t\t\"title\": \"Delete local branch\",\n\t\t\"tip\": \"git branch -d <local_branchname>\"\n\t}, {\n\t\t\"title\": \"Delete remote branch\",\n\t\t\"tip\": \"git push origin --delete <remote_branchname>\",\n\t\t\"alternatives\": [\"git push origin :<remote_branchname>\", \"git branch -dr <remote/branch>\"]\n\t}, {\n\t\t\"title\": \"Create local tag\",\n\t\t\"tip\": \"git tag <tag-name>\"\n\t}, {\n\t\t\"title\": \"Delete local tag\",\n\t\t\"tip\": \"git tag -d <tag-name>\"\n\t}, {\n\t\t\"title\": \"Delete remote tag\",\n\t\t\"tip\": \"git push origin :refs/tags/<tag-name>\"\n\t}, {\n\t\t\"title\": \"Undo local changes with the content in index(staging)\",\n\t\t\"tip\": \"git checkout -- <file_name>\"\n\t}, {\n\t\t\"title\": \"Revert: Undo a commit by creating a new commit\",\n\t\t\"tip\": \"git revert <commit-ish>\"\n\t}, {\n\t\t\"title\": \"Reset: Discard commits, advised for private branch\",\n\t\t\"tip\": \"git reset <commit-ish>\"\n\t}, {\n\t\t\"title\": \"Reword the previous commit message\",\n\t\t\"tip\": \"git commit -v --amend\"\n\t}, {\n\t\t\"title\": \"See commit history for just the current branch\",\n\t\t\"tip\": \"git cherry -v master\"\n\t}, {\n\t\t\"title\": \"Amend author.\",\n\t\t\"tip\": \"git commit --amend --author='Author Name <email@address.com>'\"\n\t}, {\n\t\t\"title\": \"Reset author, after author has been changed in the global config.\",\n\t\t\"tip\": \"git commit --amend --reset-author --no-edit\"\n\t}, {\n\t\t\"title\": \"Changing a remote's URL\",\n\t\t\"tip\": \"git remote set-url origin <URL>\"\n\t}, {\n\t\t\"title\": \"Get list of all remote references\",\n\t\t\"tip\": \"git remote\",\n\t\t\"alternatives\": [\"git remote show\"]\n\t}, {\n\t\t\"title\": \"Get list of all local and remote branches\",\n\t\t\"tip\": \"git branch -a\"\n\t}, {\n\t\t\"title\": \"Get only remote branches\",\n\t\t\"tip\": \"git branch -r\"\n\t}, {\n\t\t\"title\": \"Stage parts of a changed file, instead of the entire file\",\n\t\t\"tip\": \"git add -p\"\n\t}, {\n\t\t\"title\": \"Get git bash completion\",\n\t\t\"tip\": \"curl -L http://git.io/vfhol > ~/.git-completion.bash && echo '[ -f ~/.git-completion.bash ] && . ~/.git-completion.bash' >> ~/.bashrc\"\n\t}, {\n\t\t\"title\": \"What changed since two weeks?\",\n\t\t\"tip\": \"git log --no-merges --raw --since='2 weeks ago'\",\n\t\t\"alternatives\": [\"git whatchanged --since='2 weeks ago'\"]\n\t}, {\n\t\t\"title\": \"See all commits made since forking from master\",\n\t\t\"tip\": \"git log --no-merges --stat --reverse master..\"\n\t}, {\n\t\t\"title\": \"Pick commits across branches using cherry-pick\",\n\t\t\"tip\": \"git checkout <branch-name> && git cherry-pick <commit-ish>\"\n\t}, {\n\t\t\"title\": \"Find out branches containing commit-hash\",\n\t\t\"tip\": \"git branch -a --contains <commit-ish>\",\n\t\t\"alternatives\": [\"git branch --contains <commit-ish>\"]\n\t}, {\n\t\t\"title\": \"Git Aliases\",\n\t\t\"tip\": \"git config --global alias.<handle> <command> \\ngit config --global alias.st status\"\n\t}, {\n\t\t\"title\": \"Saving current state of tracked files without committing\",\n\t\t\"tip\": \"git stash\",\n\t\t\"alternatives\": [\"git stash push\"]\n\t}, {\n\t\t\"title\": \"Saving current state of unstaged changes to tracked files\",\n\t\t\"tip\": \"git stash -k\",\n\t\t\"alternatives\": [\"git stash --keep-index\", \"git stash push --keep-index\"]\n\t}, {\n\t\t\"title\": \"Saving current state including untracked files\",\n\t\t\"tip\": \"git stash -u\",\n\t\t\"alternatives\": [\"git stash push -u\", \"git stash push --include-untracked\"]\n\t}, {\n\t\t\"title\": \"Saving current state with message\",\n\t\t\"tip\": \"git stash push -m <message>\",\n\t\t\"alternatives\": [\"git stash push --message <message>\"]\n\t}, {\n\t\t\"title\": \"Saving current state of all files (ignored, untracked, and tracked)\",\n\t\t\"tip\": \"git stash -a\",\n\t\t\"alternatives\": [\"git stash --all\", \"git stash push --all\"]\n\t}, {\n\t\t\"title\": \"Show list of all saved stashes\",\n\t\t\"tip\": \"git stash list\"\n\t}, {\n\t\t\"title\": \"Show the contents of any stash in patch form\",\n\t\t\"tip\": \"git stash show -p <stash@{n}>\"\n  }, {\n\t\t\"title\": \"Apply any stash without deleting from the stashed list\",\n\t\t\"tip\": \"git stash apply <stash@{n}>\"\n\t}, {\n\t\t\"title\": \"Apply last stashed state and delete it from stashed list\",\n\t\t\"tip\": \"git stash pop\",\n\t\t\"alternatives\": [\"git stash apply stash@{0} && git stash drop stash@{0}\"]\n\t}, {\n\t\t\"title\": \"Delete all stored stashes\",\n\t\t\"tip\": \"git stash clear\",\n\t\t\"alternatives\": [\"git stash drop <stash@{n}>\"]\n\t}, {\n\t\t\"title\": \"Grab a single file from a stash\",\n\t\t\"tip\": \"git checkout <stash@{n}> -- <file_path>\",\n\t\t\"alternatives\": [\"git checkout stash@{0} -- <file_path>\"]\n\t}, {\n\t\t\"title\": \"Show all tracked files\",\n\t\t\"tip\": \"git ls-files -t\"\n\t}, {\n\t\t\"title\": \"Show all untracked files\",\n\t\t\"tip\": \"git ls-files --others\"\n\t}, {\n\t\t\"title\": \"Show all ignored files\",\n\t\t\"tip\": \"git ls-files --others -i --exclude-standard\"\n\t}, {\n\t\t\"title\": \"Create new working tree from a repository (git 2.5)\",\n\t\t\"tip\": \"git worktree add -b <branch-name> <path> <start-point>\"\n\t}, {\n\t\t\"title\": \"Create new working tree from HEAD state\",\n\t\t\"tip\": \"git worktree add --detach <path> HEAD\"\n\t}, {\n\t\t\"title\": \"Untrack files without deleting\",\n\t\t\"tip\": \"git rm --cached <file_path>\",\n\t\t\"alternatives\": [\"git rm --cached -r <directory_path>\"]\n\t}, {\n\t\t\"title\": \"Before deleting untracked files/directory, do a dry run to get the list of these files/directories\",\n\t\t\"tip\": \"git clean -n\"\n\t}, {\n\t\t\"title\": \"Forcefully remove untracked files\",\n\t\t\"tip\": \"git clean -f\"\n\t}, {\n\t\t\"title\": \"Forcefully remove untracked directory\",\n\t\t\"tip\": \"git clean -f -d\"\n\t}, {\n\t\t\"title\": \"Update all the submodules\",\n\t\t\"tip\": \"git submodule foreach git pull\",\n\t\t\"alternatives\": [\"git submodule update --init --recursive\", \"git submodule update --remote\"]\n\t}, {\n\t\t\"title\": \"Show all commits in the current branch yet to be merged to master\",\n\t\t\"tip\": \"git cherry -v master\",\n\t\t\"alternatives\": [\"git cherry -v master <branch-to-be-merged>\"]\n\t}, {\n\t\t\"title\": \"Rename a branch\",\n\t\t\"tip\": \"git branch -m <new-branch-name>\",\n\t\t\"alternatives\": [\"git branch -m [<old-branch-name>] <new-branch-name>\"]\n\t}, {\n\t\t\"title\": \"Rebases 'feature' to 'master' and merges it in to master \",\n\t\t\"tip\": \"git rebase master feature && git checkout master && git merge -\"\n\t}, {\n\t\t\"title\": \"Archive the `master` branch\",\n\t\t\"tip\": \"git archive master --format=zip --output=master.zip\"\n\t}, {\n\t\t\"title\": \"Modify previous commit without modifying the commit message\",\n\t\t\"tip\": \"git add --all && git commit --amend --no-edit\"\n\t}, {\n\t\t\"title\": \"Prunes references to remove branches that have been deleted in the remote.\",\n\t\t\"tip\": \"git fetch -p\",\n\t\t\"alternatives\": [\"git remote prune origin\"]\n\t}, {\n\t\t\"title\": \"Delete local branches that has been squash and merged in the remote.\",\n\t\t\"tip\": \"git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -D\"\n\t}, {\n\t\t\"title\": \"Retrieve the commit hash of the initial revision.\",\n\t\t\"tip\": \" git rev-list --reverse HEAD | head -1\",\n\t\t\"alternatives\": [\"git rev-list --max-parents=0 HEAD\", \"git log --pretty=oneline | tail -1 | cut -c 1-40\", \"git log --pretty=oneline --reverse | head -1 | cut -c 1-40\"]\n\t}, {\n\t\t\"title\": \"Visualize the version tree.\",\n\t\t\"tip\": \"git log --pretty=oneline --graph --decorate --all\",\n\t\t\"alternatives\": [\"gitk --all\", \"git log --graph --pretty=format:'%C(auto) %h | %s | %an | %ar%d'\"]\n\t}, {\n\t\t\"title\": \"Visualize the tree including commits that are only referenced from reflogs\",\n\t\t\"tip\": \"git log --graph --decorate --oneline $(git rev-list --walk-reflogs --all)\"\n\t}, {\n\t\t\"title\": \"Deploying git tracked subfolder to gh-pages\",\n\t\t\"tip\": \"git subtree push --prefix subfolder_name origin gh-pages\",\n\t\t\"alternatives\": \"git subtree push --prefix subfolder_name origin branch_name\"\n\t}, {\n\t\t\"title\": \"Adding a project to repo using subtree\",\n\t\t\"tip\": \"git subtree add --prefix=<directory_name>/<project_name> --squash git@github.com:<username>/<project_name>.git master\"\n\t}, {\n\t\t\"title\": \"Get latest changes in your repo for a linked project using subtree\",\n\t\t\"tip\": \"git subtree pull --prefix=<directory_name>/<project_name> --squash git@github.com:<username>/<project_name>.git master\"\n\t}, {\n\t\t\"title\": \"Export a branch with history to a file.\",\n\t\t\"tip\": \"git bundle create <file> <branch-name>\"\n\t}, {\n\t\t\"title\": \"Import from a bundle\",\n\t\t\"tip\": \"git clone repo.bundle <repo-dir> -b <branch-name>\"\n\t}, {\n\t\t\"title\": \"Get the name of current branch.\",\n\t\t\"tip\": \"git rev-parse --abbrev-ref HEAD\"\n\t}, {\n\t\t\"title\": \"Ignore one file on commit (e.g. Changelog).\",\n\t\t\"tip\": \"git update-index --assume-unchanged Changelog; git commit -a; git update-index --no-assume-unchanged Changelog\"\n\t}, {\n\t\t\"title\": \"Stash changes before rebasing\",\n\t\t\"tip\": \"git rebase --autostash\"\n\t}, {\n\t\t\"title\": \"Fetch pull request by ID to a local branch\",\n\t\t\"tip\": \"git fetch origin pull/<id>/head:<branch-name>\",\n\t\t\"alternatives\": [\"git pull origin pull/<id>/head:<branch-name>\"]\n\t}, {\n\t\t\"title\": \"Show the most recent tag on the current branch.\",\n\t\t\"tip\": \"git describe --tags --abbrev=0\"\n\t}, {\n\t\t\"title\": \"Show inline word diff.\",\n\t\t\"tip\": \"git diff --word-diff\"\n\t}, {\n\t\t\"title\": \"Show changes using common diff tools.\",\n\t\t\"tip\": \"git difftool [-t <tool>] <commit1> <commit2> <path>\"\n\t}, {\n\t\t\"title\": \"Don’t consider changes for tracked file.\",\n\t\t\"tip\": \"git update-index --assume-unchanged <file_name>\"\n\t}, {\n\t\t\"title\": \"Undo assume-unchanged.\",\n\t\t\"tip\": \"git update-index --no-assume-unchanged <file_name>\"\n\t}, {\n\t\t\"title\": \"Clean the files from `.gitignore`.\",\n\t\t\"tip\": \"git clean -X -f\"\n\t}, {\n\t\t\"title\": \"Restore deleted file.\",\n\t\t\"tip\": \"git checkout <deleting_commit> -- <file_path>\"\n\t}, {\n\t\t\"title\": \"Restore file to a specific commit-hash\",\n\t\t\"tip\": \"git checkout <commit-ish> -- <file_path>\"\n\t}, {\n\t\t\"title\": \"Always rebase instead of merge on pull.\",\n\t\t\"tip\": \"git config --global pull.rebase true\",\n\t\t\"alternatives\": [\"#git < 1.7.9\\ngit config --global branch.autosetuprebase always\"]\n\t}, {\n\t\t\"title\": \"List all the alias and configs.\",\n\t\t\"tip\": \"git config --list\"\n\t}, {\n\t\t\"title\": \"Make git case sensitive.\",\n\t\t\"tip\": \"git config --global core.ignorecase false\"\n\t}, {\n\t\t\"title\": \"Add custom editors.\",\n\t\t\"tip\": \"git config --global core.editor '$EDITOR'\"\n\t}, {\n\t\t\"title\": \"Auto correct typos.\",\n\t\t\"tip\": \"git config --global help.autocorrect 1\"\n\t}, {\n\t\t\"title\": \"Check if the change was a part of a release.\",\n\t\t\"tip\": \"git name-rev --name-only <SHA-1>\"\n\t}, {\n\t\t\"title\": \"Dry run. (any command that supports dry-run flag should do.)\",\n\t\t\"tip\": \"git clean -fd --dry-run\"\n\t}, {\n\t\t\"title\": \"Marks your commit as a fix of a previous commit.\",\n\t\t\"tip\": \"git commit --fixup <SHA-1>\"\n\t}, {\n\t\t\"title\": \"Squash fixup commits normal commits.\",\n\t\t\"tip\": \"git rebase -i --autosquash\"\n\t}, {\n\t\t\"title\": \"Skip staging area during commit.\",\n\t\t\"tip\": \"git commit --only <file_path>\"\n\t}, {\n\t\t\"title\": \"Interactive staging.\",\n\t\t\"tip\": \"git add -i\"\n\t}, {\n\t\t\"title\": \"List ignored files.\",\n\t\t\"tip\": \"git check-ignore *\"\n\t}, {\n\t\t\"title\": \"Status of ignored files.\",\n\t\t\"tip\": \"git status --ignored\"\n\t}, {\n\t\t\"title\": \"Commits in Branch1 that are not in Branch2\",\n\t\t\"tip\": \"git log Branch1 ^Branch2\"\n\t}, {\n\t\t\"title\": \"List n last commits\",\n\t\t\"tip\": \"git log -<n>\",\n\t\t\"alternatives\": [\"git log -n <n>\"]\n\t}, {\n\t\t\"title\": \"Reuse recorded resolution, record and reuse previous conflicts resolutions.\",\n\t\t\"tip\": \"git config --global rerere.enabled 1\"\n\t}, {\n\t\t\"title\": \"Open all conflicted files in an editor.\",\n\t\t\"tip\": \"git diff --name-only | uniq | xargs $EDITOR\"\n\t}, {\n\t\t\"title\": \"Count unpacked number of objects and their disk consumption.\",\n\t\t\"tip\": \"git count-objects --human-readable\"\n\t}, {\n\t\t\"title\": \"Prune all unreachable objects from the object database.\",\n\t\t\"tip\": \"git gc --prune=now --aggressive\"\n\t}, {\n\t\t\"title\": \"Instantly browse your working repository in gitweb.\",\n\t\t\"tip\": \"git instaweb [--local] [--httpd=<httpd>] [--port=<port>] [--browser=<browser>]\"\n\t}, {\n\t\t\"title\": \"View the GPG signatures in the commit log\",\n\t\t\"tip\": \"git log --show-signature\"\n\t}, {\n\t\t\"title\": \"Remove entry in the global config.\",\n\t\t\"tip\": \"git config --global --unset <entry-name>\"\n\t}, {\n\t\t\"title\": \"Checkout a new branch without any history\",\n\t\t\"tip\": \"git checkout --orphan <branch_name>\"\n\t}, {\n\t\t\"title\": \"Extract file from another branch.\",\n\t\t\"tip\": \"git show <branch_name>:<file_name>\"\n\t}, {\n\t\t\"title\": \"List only the root and merge commits.\",\n\t\t\"tip\": \"git log --first-parent\"\n\t}, {\n\t\t\"title\": \"Change previous two commits with an interactive rebase.\",\n\t\t\"tip\": \"git rebase --interactive HEAD~2\"\n\t}, {\n\t\t\"title\": \"List all branch is WIP\",\n\t\t\"tip\": \"git checkout master && git branch --no-merged\"\n\t}, {\n\t\t\"title\": \"Find guilty with binary search\",\n\t\t\"tip\": \"git bisect start                    # Search start \\ngit bisect bad                      # Set point to bad commit \\ngit bisect good v2.6.13-rc2         # Set point to good commit|tag \\ngit bisect bad                      # Say current state is bad \\ngit bisect good                     # Say current state is good \\ngit bisect reset                    # Finish search \\n\"\n\t}, {\n\t\t\"title\": \"Bypass pre-commit and commit-msg githooks\",\n\t\t\"tip\": \"git commit --no-verify\"\n\t}, {\n\t\t\"title\": \"List commits and changes to a specific file (even through renaming)\",\n\t\t\"tip\": \"git log --follow -p -- <file_path>\"\n\t}, {\n\t\t\"title\": \"Clone a single branch\",\n\t\t\"tip\": \"git clone -b <branch-name> --single-branch https://github.com/user/repo.git\"\n\t}, {\n\t\t\"title\": \"Create and switch new branch\",\n\t\t\"tip\": \"git checkout -b <branch-name>\",\n\t\t\"alternatives\": [\"git branch <branch-name> && git checkout <branch-name>\", \"git switch -c <branch-name>\"]\n\t}, {\n\t\t\"title\": \"Ignore file mode changes on commits\",\n\t\t\"tip\": \"git config core.fileMode false\"\n\t}, {\n\t\t\"title\": \"Turn off git colored terminal output\",\n\t\t\"tip\": \"git config --global color.ui false\"\n\t}, {\n\t\t\"title\": \"Specific color settings\",\n\t\t\"tip\": \"git config --global <specific command e.g branch, diff> <true, false or always>\"\n\t}, {\n\t\t\"title\": \"Show all local branches ordered by recent commits\",\n\t\t\"tip\": \"git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/\"\n\t}, {\n\t\t\"title\": \"Find lines matching the pattern (regex or string) in tracked files\",\n\t\t\"tip\": \"git grep --heading --line-number 'foo bar'\"\n\t}, {\n\t\t\"title\": \"Clone a shallow copy of a repository\",\n\t\t\"tip\": \"git clone https://github.com/user/repo.git --depth 1\"\n\t}, {\n\t\t\"title\": \"Search Commit log across all branches for given text\",\n\t\t\"tip\": \"git log --all --grep='<given-text>'\"\n\t}, {\n\t\t\"title\": \"Get first commit in a branch (from master)\",\n\t\t\"tip\": \"git log --oneline master..<branch-name> | tail -1\",\n\t\t\"alternatives\": [\"git log --reverse master..<branch-name> | head -6\"]\n\t}, {\n\t\t\"title\": \"Unstaging Staged file\",\n\t\t\"tip\": \"git reset HEAD <file-name>\"\n\t}, {\n\t\t\"title\": \"Force push to Remote Repository\",\n\t\t\"tip\": \"git push -f <remote-name> <branch-name>\"\n\t}, {\n\t\t\"title\": \"Adding Remote name\",\n\t\t\"tip\": \"git remote add <remote-nickname> <remote-url>\"\n\t}, {\n\t\t\"title\": \"List all currently configured remotes\",\n\t\t\"tip\": \"git remote -v\"\n\t}, {\n\t\t\"title\": \"Show the author, time and last revision made to each line of a given file\",\n\t\t\"tip\": \"git blame <file-name>\"\n\t}, {\n\t\t\"title\": \"Group commits by authors and title\",\n\t\t\"tip\": \"git shortlog\"\n\t}, {\n\t\t\"title\": \"Forced push but still ensure you don't overwrite other's work\",\n\t\t\"tip\": \"git push --force-with-lease <remote-name> <branch-name>\"\n\t}, {\n\t\t\"title\": \"Show how many lines does an author contribute\",\n\t\t\"tip\": \"git log --author='_Your_Name_Here_' --pretty=tformat: --numstat | gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \\\"added lines: %s removed lines: %s total lines: %s\\n\\\", add, subs, loc }' -\",\n\t\t\"alternatives\": [\"git log --author='_Your_Name_Here_' --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \\\"added lines: %s, removed lines: %s, total lines: %s\\n\\\", add, subs, loc }' - # on Mac OSX\"]\n\t}, {\n\t\t\"title\": \"Revert: Reverting an entire merge\",\n\t\t\"tip\": \"git revert -m 1 <commit-ish>\"\n\t}, {\n\t\t\"title\": \"Number of commits in a branch\",\n\t\t\"tip\": \"git rev-list --count <branch-name>\"\n\t}, {\n\t\t\"title\": \"Alias: git undo\",\n\t\t\"tip\": \"git config --global alias.undo '!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f'\"\n\t}, {\n\t\t\"title\": \"Add object notes\",\n\t\t\"tip\": \"git notes add -m 'Note on the previous commit....'\"\n\t}, {\n\t\t\"title\": \"Show all the git-notes\",\n\t\t\"tip\": \"git log --show-notes='*'\"\n\t}, {\n\t\t\"title\": \"Apply commit from another repository\",\n\t\t\"tip\": \"git --git-dir=<source-dir>/.git format-patch -k -1 --stdout <SHA1> | git am -3 -k\"\n\t}, {\n\t\t\"title\": \"Specific fetch reference\",\n\t\t\"tip\": \"git fetch origin master:refs/remotes/origin/mymaster\"\n\t}, {\n\t\t\"title\": \"Find common ancestor of two branches\",\n\t\t\"tip\": \"git merge-base <branch-name> <other-branch-name>\"\n\t}, {\n\t\t\"title\": \"List unpushed git commits\",\n\t\t\"tip\": \"git log --branches --not --remotes\",\n\t\t\"alternatives\": [\"git log @{u}..\", \"git cherry -v\"]\n\t}, {\n\t\t\"title\": \"Add everything, but whitespace changes\",\n\t\t\"tip\": \"git diff --ignore-all-space | git apply --cached\"\n\t}, {\n\t\t\"title\": \"Edit [local/global] git config\",\n\t\t\"tip\": \"git config [--global] --edit\"\n\t}, {\n\t\t\"title\": \"blame on certain range\",\n\t\t\"tip\": \"git blame -L <start>,<end>\"\n\t}, {\n\t\t\"title\": \"Show a Git logical variable.\",\n\t\t\"tip\": \"git var -l | <variable>\"\n\t}, {\n\t\t\"title\": \"Preformatted patch file.\",\n\t\t\"tip\": \"git format-patch -M upstream..topic\"\n\t}, {\n\t\t\"title\": \"Get the repo name.\",\n\t\t\"tip\": \"git rev-parse --show-toplevel\"\n\t}, {\n\t\t\"title\": \"logs between date range\",\n\t\t\"tip\": \"git log --since='FEB 1 2017' --until='FEB 14 2017'\"\n\t}, {\n\t\t\"title\": \"Exclude author from logs\",\n\t\t\"tip\": \"git log --perl-regexp --author='^((?!excluded-author-regex).*)$'\"\n\t}, {\n\t\t\"title\": \"Generates a summary of pending changes\",\n\t\t\"tip\": \"git request-pull v1.0 https://git.ko.xz/project master:for-linus\"\n\t}, {\n\t\t\"title\": \"List references in a remote repository\",\n\t\t\"tip\": \"git ls-remote git://git.kernel.org/pub/scm/git/git.git\"\n\t}, {\n\t\t\"title\": \"Backup untracked files.\",\n\t\t\"tip\": \"git ls-files --others -i --exclude-standard | xargs zip untracked.zip\"\n\t}, {\n\t\t\"title\": \"List all git aliases\",\n\t\t\"tip\": \"git config -l | grep alias | sed 's/^alias\\\\.//g'\",\n\t\t\"alternatives\": [\"git config -l | grep alias | cut -d '.' -f 2\"]\n\t}, {\n\t\t\"title\": \"Show git status short\",\n\t\t\"tip\": \"git status --short --branch\"\n\t},\n\t{\n\t\t\"title\": \"Checkout a commit prior to a day ago\",\n\t\t\"tip\": \"git checkout master@{yesterday}\"\n\t}, {\n\t\t\"title\": \"Push the current branch to the same name on the remote repository\",\n\t\t\"tip\": \"git push origin HEAD\"\n  }, {\n\t\t\"title\": \"Push a new local branch to remote repository and track\",\n\t\t\"tip\": \"git push -u origin <branch_name>\"\n\t}, {\n\t\t\"title\": \"Change a branch base\",\n\t\t\"tip\": \"git rebase --onto <new_base> <old_base>\"\n\t}, {\n\t\t\"title\": \"Use SSH instead of HTTPs for remotes\",\n\t\t\"tip\": \"git config --global url.'git@github.com:'.insteadOf 'https://github.com/'\"\n\t}, {\n\t\t\"title\": \"Update a submodule to the latest commit\",\n\t\t\"tip\": \"cd <path-to-submodule>\\ngit pull origin <branch>\\ncd <root-of-your-main-project>\\ngit add <path-to-submodule>\\ngit commit -m \\\"submodule updated\\\"\"\n\t}, {\n\t\t\"title\": \"Prevent auto replacing LF with CRLF\",\n\t\t\"tip\": \"git config --global core.autocrlf false\"\n\t}\n]\n"
        }
      ]
    }
  ]
}