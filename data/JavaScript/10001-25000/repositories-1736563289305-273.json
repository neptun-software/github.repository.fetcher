{
  "metadata": {
    "timestamp": 1736563289305,
    "page": 273,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "systemjs/systemjs",
      "stars": 12977,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".agignore",
          "type": "blob",
          "size": 0.0068359375,
          "content": "dist/*\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0537109375,
          "content": "node_modules\npackage-lock.json\n.DS_Store\nyarn.lock\ndist"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 15.31640625,
          "content": "SystemJS 6.12.1\n* Call fetch hook when retrieving external import maps. Resolves #2374. (https://github.com/systemjs/systemjs/pull/2376)\n\nSystemJS 6.12.0\n* This version was published in error. Please use 6.12.1 instead.\n\nSystemJS 6.11.0\n* Add the possibility to use an async createScript hook (https://github.com/systemjs/systemjs/pull/2362 @legarsjules)\n* Use Promise.resolve in named-register. Resolves #2359. (https://github.com/systemjs/systemjs/pull/2363)\n\nSystemJS 6.10.3\n* Avoid double instantiation of named registers. (https://github.com/systemjs/systemjs/pull/2352)\n* Always return the first named register from a file. (https://github.com/systemjs/systemjs/pull/2352)\n\nSystemJS 6.10.2\n* Fix warning with node 16 (https://github.com/systemjs/systemjs/pull/2343 @JJ)\n\nSystemJS 6.10.1\n* Fixes module-types usage process reference issue (https://github.com/systemjs/systemjs/pull/2343)\n\nSystemJS 6.10.0\n* Add package.json to package exports (https://github.com/systemjs/systemjs/pull/2317 @mk-pmb)\n* Refactor amd.js to only call System.register. Resolves #2331. (#2335)\n* Do not throw errors when _export(null) is called. Resolves #2332. (#2334)\n\nSystemJS 6.9.0\n* Fix named-register.js - omit name from register call. Resolves #2293. (https://github.com/systemjs/systemjs/pull/2329 @joeldenning)\n* Fix the relative path problem of CSS url() in CSSStyleSheet() (https://github.com/systemjs/systemjs/pull/2326 @liufei)\n* Onerror Callback Support for Errors Fetching External Import Map (https://github.com/systemjs/systemjs/pull/2324 @kykwak)\n* Fixed importmap example code (https://github.com/systemjs/systemjs/pull/2309 @maurer2)\n\nSystemJS 6.8.3\n* Allow deletion of uninstantiated modules whose top level parent import finished. (https://github.com/systemjs/systemjs/pull/2291)\n\nSystemJS 6.8.2\n* Fix deleting modules after link failure. (https://github.com/systemjs/systemjs/pull/2288)\n* Ensure onload hooks retain catches (https://github.com/systemjs/systemjs/pull/2289)\n* Footprint improvement for browser (https://github.com/systemjs/systemjs/pull/2290)\n\nSystemJS 6.8.1\n* Support System.firstGlobalProp on System instance (https://github.com/systemjs/systemjs/commit/4883c708280f1a7785f065b46852fa806938a2dc)\n* Webpack usage update (https://github.com/systemjs/systemjs/commit/ca781b854fbb253e5f8477ce9b4fbc8c3c43f03c)\n\nSystemJS 6.8.0\n* System.firstGlobalProp for global loading extra (https://github.com/systemjs/systemjs/commit/48351aa83c48fdd22b63000d417dedc2329f2340, @joeldenning)\n* Graceful import map loading errors (https://github.com/systemjs/systemjs/commit/9edebd1969842dcc95a12d4137677c6bc9fe2bae, @naltatis)\n* Sourcemap normalization for fetch loader (https://github.com/systemjs/systemjs/commit/97621d724cc7c892d9dee2cff6b27553326c8169)\n* Dispatch script loading errors for `<script type=\"systemjs-module\">` (https://github.com/systemjs/systemjs/commit/f0fe5a473414b995082688c30a876c602e32d901, @dmail)\n\nSystemJS 6.7.1\n* Fix auto import race condition (https://github.com/systemjs/systemjs/pull/2266)\n\nSystemJS 6.7.0\n* Implement integrity attribute for systemjs-importmap scripts (https://github.com/systemjs/systemjs/commit/78072e594ebebab9124aa9fedd7e17d8303835e1)\n* Deprecate the transform and use default extras (https://github.com/systemjs/systemjs/commit/5f7571a76bef210d096e672c9f011d94871a6827)\n* Fetch hooks brought into core, module types extra refactoring (https://github.com/systemjs/systemjs/commit/281fdf0653663c58145f880131dceaf479add553)\n* Inline named exports extra behaviours into core and deprecate (https://github.com/systemjs/systemjs/commit/3eefa2daa8d203e8d886bae7dc587eed148c5808)\n\nSystemJS 6.6.1\n* IE11 support bug fix (https://github.com/systemjs/systemjs/pull/2247)\n\nSystemJS 6.6.0\n* Fix autoimport dynamic import conflicts (https://github.com/systemjs/systemjs/pull/2245)\n* Set \"type\": \"script\" in package.json (https://github.com/systemjs/systemjs/pull/2246)\n\nSystemJS 6.5.1\n* Fix depcache hook (https://github.com/systemjs/systemjs/pull/2242)\n\nSystemJS 6.5.0\n* import.meta.resolve implementation (https://github.com/systemjs/systemjs/pull/2230)\n* Import maps integrity feature (https://github.com/systemjs/systemjs/pull/2229)\n\nSystemJS 6.4.3\n* Define an \"s.js\" entry in \"exports\" (https://github.com/systemjs/systemjs/pull/2226)\n* Fixup use of const for older browsers (https://github.com/systemjs/systemjs/issues/2227)\n\nSystemJS 6.4.2\n* Fix and simplify auto import domready resets (https://github.com/systemjs/systemjs/pull/2225)\n\nSystemJS 6.4.1\n* Fix auto import handling of dynamic import races during loading phase (https://github.com/systemjs/systemjs/pull/2223)\n* Fix crossOrigin script attribute loading in Safari (https://github.com/systemjs/systemjs/pull/2222)\n\nSystemJS 6.4.0\n* Dynamic import map extra support (https://github.com/systemjs/systemjs/pull/2217 @stevenvachon)\n* Depcache support in import maps for automated preloading (https://github.com/systemjs/systemjs/pull/2134)\n* Auto Import feature for `<script src=\"system-register-module.js\">` loading for better load performance (https://github.com/systemjs/systemjs/pull/2216, https://github.com/systemjs/systemjs/pull/2210 @tmsns)\n* Fix onload behaviour with flag for error source (https://github.com/systemjs/systemjs/pull/2204 @smartrejames)\n* Fix Object.prototype mutation (https://github.com/systemjs/systemjs/pull/2206 @stevenvachon)\n\nSystemJS 6.3.3\n* Better error message when content-type header is missing (https://github.com/systemjs/systemjs/pull/2197 via @brandones)\n* Make setters optional (#2193 via @guybedford) \n\nSystemJS 6.3.2\n* Named exports extra now supports non-objects. (https://github.com/systemjs/systemjs/pull/2186 via @Sauloxd)\n\nSystemJS 6.3.1\n* Fix error code mixup (https://github.com/systemjs/systemjs/pull/2169)\n* Fix bug in system-node.cjs where prepareImport overwrote import map (https://github.com/systemjs/systemjs/pull/2170)\n* Adding full dist directory to package.json exports (https://github.com/systemjs/systemjs/pull/2173)\n* Increasing timeout for test:node script (https://github.com/systemjs/systemjs/pull/2174)\n* Switching to node-fetch to avoid caching bugs in make-fetch-happen (https://github.com/systemjs/systemjs/pull/2171)\n\nSystemJS 6.3.0\n* s.js now has full import map support (https://github.com/systemjs/systemjs/pull/2150)\n* New system-node.cjs loader designed to run in NodeJS. (https://github.com/systemjs/systemjs/pull/2150, https://github.com/systemjs/systemjs/pull/2158)\n* SystemJS now has error codes, along with documentation for each error code (https://github.com/systemjs/systemjs/pull/2151)\n* Fix bug in Chrome 45 where const/let disallowed unless in strict mode (https://github.com/systemjs/systemjs/pull/2162)\n* Add warning for calling System.set with non-URL id (https://github.com/systemjs/systemjs/pull/2161)\n\nSystemJS 6.2.6\n* Address race condition with named register modules (https://github.com/systemjs/systemjs/pull/2144)\n\nSystemJS 6.2.5\n* Fix problem where a falsy exported value from AMD modules didn't work (https://github.com/systemjs/systemjs/pull/2130)\n\nSystemJS 6.2.4\n* Fix problem where System.delete did not remove named register modules. (https://github.com/systemjs/systemjs/pull/2125 @k-j-kim)\n\nSystemJS 6.2.3\n* Fix another race condition with named registers. (https://github.com/systemjs/systemjs/pull/2121)\n\nSystemJS 6.2.2\n* Supporting multiple define variations for named modules. Resolves #2118. (https://github.com/systemjs/systemjs/pull/2119)\n\nSystemJS 6.2.1\n* Fix problem with named register modules (resolves #2115) (https://github.com/systemjs/systemjs/pull/2116)\n\nSystemJS 6.2.0\n* Adding new createScript / fetch / shouldFetch hooks (https://github.com/systemjs/systemjs/pull/2058)\n* Fixing race conditions with named register modules (https://github.com/systemjs/systemjs/pull/2114)\n\nSystemJS 6.1.10\n* Fixing bug where named AMD modules were instantiated twice (https://github.com/systemjs/systemjs/pull/2104)\n* Save bytes with setTimeout (https://github.com/systemjs/systemjs/pull/2105)\n* Prefer import map resolution over registryRegistry resolution (https://github.com/systemjs/systemjs/pull/2108)\n\nSystemJS 6.1.9\n* Fix bug where url query params and hash broke module type file extension check (https://github.com/systemjs/systemjs/pull/2096 @LarsDenBakker)\n\nSystemJS 6.1.8\n* Ensure that __esModule is copied to ns even if it isn't enumerable. Improves webpack interop when using libraryTarget system.\n\nSystemJS 6.1.7\n* Fix problem where banner comment in output files had wrong version number\n\nSystemJS 6.1.6\n* Fix IE11 regression in 6.1.5 (https://github.com/systemjs/systemjs/pull/2077 @kouts)\n\nSystemJS 6.1.5\n* Support registry delete returning update function (https://github.com/systemjs/systemjs/pull/2020 @guybedford)\n* Fixing bug where named-exports didn't work on named registers. (https://github.com/systemjs/systemjs/pull/2074 @joeldenning)\n\nSystemJS 6.1.4 (2019/10/12)\n* Fix IE global detection to ignore IFrames (https://github.com/systemjs/systemjs/pull/2035, @kduret)\n* Remove stray console.log (https://github.com/systemjs/systemjs/pull/2046, @joeldenning)\n\nSystemJS 6.1.3 (2019/10/06)\n* Fix relative resolution of LHS URLs in import maps (https://github.com/systemjs/systemjs/pull/2039)\n* Fix named register extra to extend rather than reinstantiate the SystemJS instance (https://github.com/systemjs/systemjs/pull/2042)\n* Update extras to extend the global System instance explicitly (https://github.com/systemjs/systemjs/pull/2043)\n\nSystemJS 6.1.2 (2019/09/22)\n* Bug fix for named AMD modules (https://github.com/systemjs/systemjs/pull/2029)\n* Bug fix for IE11 regression bug (https://github.com/systemjs/systemjs/pull/2033)\n\nSystemJS 6.1.1 (2019/09/13)\n* Fixes a bug where imports before the import map load might not apply the import map (https://github.com/systemjs/systemjs/issues/2024, @joeldenning)\n* Fixes the module-types extra output which was incorrectly referencing an import (https://github.com/systemjs/systemjs/issues/2027, @joeldenning)\n\nSystemJS 6.1.0 (2019/09/11) - Minor Changes\n* Add support for `<script type=\"systemjs-module\" src=\"import:foo\">` (https://github.com/systemjs/systemjs/pull/2015)\n\n**SystemJS 6.0.0 (2019/08/29) - Major Changes**\n* Cascading import maps implementation (https://github.com/systemjs/systemjs/pull/2009)\n* New module types extra for CSS, JSON and Wasm (https://github.com/systemjs/systemjs/pull/2006)\n* CSS modules implementation (https://github.com/systemjs/systemjs/pull/1997)\n* Deps argument added to onload hook (https://github.com/systemjs/systemjs/pull/1998)\n* System.resolve is now synchronous by default (https://github.com/systemjs/systemjs/pull/1996, @joeldenning)\n* The first named System.regiser in a bundle will now define the bundle module itself (https://github.com/systemjs/systemjs/pull/1984, @joeldenning)\n* Named exports extra fix not to alter the default export (https://github.com/systemjs/systemjs/pull/1983, @joeldenning)\n\n**SystemJS 5.0.0 (2019/07/30) - Major Change**\n* Import map scopes now resolve relative to the base, not the scope (https://github.com/systemjs/systemjs/pull/1975)\n\nSystemJS 4.1.1 (2019/07/30)\n* Fix bug in named exports extra with AMD exports (https://github.com/systemjs/systemjs/pull/1978)\n* Ensure that global frames are not detected in global extra (https://github.com/systemjs/systemjs/pull/1973, @kduret)\n\nSystemJS 4.1.0 (2019/07/14)\n* Added a new \"Use Default\" extra. (https://github.com/systemjs/systemjs/pull/1969)\n* Fix typo in comment. (https://github.com/systemjs/systemjs/pull/1970 @kouts)\n\nSystemJS 4.0.2 (2019/07/08)\n* Fix bug thrown in strict mode. (https://github.com/systemjs/systemjs/pull/1966 @joeldenning)\n\nSystemJS 4.0.1 (2019/07/06)\n* Fix IE11 regression related to loading json files (https://github.com/systemjs/systemjs/pull/1963, @joeldenning)\n* Fix bug where System.import() rejected incorrectly, due to unrelated errors (https://github.com/systemjs/systemjs/pull/1961 @joeldenning)\n\n**SystemJS 4.0.0 (2019/06/29) - Major Changes**\n* Support `<base href>` setting baseURL (https://github.com/systemjs/systemjs/pull/1957, @LarsDenBakker)\n* Use `Error` over `new Error` to reduce footprint (https://github.com/systemjs/systemjs/pull/1951, @joeldenning)\n* Support AMD importing ESM with an internal interop signifier (https://github.com/systemjs/systemjs/pull/1941)\n* Support JSON module imports (https://github.com/systemjs/systemjs/pull/1950, @joeldenning)\n\nSystemJS 3.1.6 (2019/04/21)\n* Add \"type\": \"module\" package.json property\n\nSystemJS 3.1.5 (2019/04/19)\n* Fix Import Maps in IE11 (https://github.com/systemjs/systemjs/commits/2cd549b68824447a, @kouts)\n\nSystemJS 3.1.4 (2019/04/19)\n* Further IE11 bug fixes (https://github.com/systemjs/systemjs/commits/4c2ec2f6f6a662, https://github.com/systemjs/systemjs/pull/1936 @joeldenning)\n* Fix AMD define mutation bug (https://github.com/systemjs/systemjs/commits/0ec9da6b46d38da, https://github.com/systemjs/systemjs/issues/1932)\n\nSystemJS 3.1.3 (2019/04/18)\n* Add Web Worker support to the s.js build (https://github.com/systemjs/systemjs/commits/cbea1530a194d7)\n* Fix an IE11 bug due to object shorthand (https://github.com/systemjs/systemjs/commits/551b2e8ec7bda1)\n\nSystemJS 3.1.2 (2019/04/13)\n* Fix an async execution bug in s.js (https://github.com/systemjs/systemjs/issues/1924, https://github.com/systemjs/systemjs/commits/c274caa172b03b24)\n\nSystemJS 3.1.1 (2019/04/07)\n* Fix a Promise chaining bug with top-level await in s.js (https://github.com/systemjs/systemjs/issues/1921, https://github.com/systemjs/systemjs/commits/cc44badb954)\n* Support registry iteration (https://github.com/systemjs/systemjs/issues/1918, 984dcd1c0fe, 532fdbddede7c2, 1af0f13f58, @joeldenning)\n* Support late loading of import maps (https://github.com/systemjs/systemjs/issues/1916, @joeldenning)\n\nSystemJS 3.1.0 (2019/03/24)\n* Ensure resolve always returns a promise (https://github.com/systemjs/systemjs/commits/42ea052e9a97, @joeldenning)\n* Fix error handling for AMD scripts (https://github.com/systemjs/systemjs/commits/56d515a2885ebce6b)\n\nSystemJS 3.0.2 (2019/03/17)\n* Support for multiple import maps ([#1912](https://github.com/systemjs/systemjs/pull/1912), @joeldenning)\n* Bug fix to URL imports when not applied by package map ([#a0d53c95](https://github.com/systemjs/systemjs/commits/a0d53c956b751c))\n\nSystemJS 3.0.1 (2019/03/01)\n* Ensure that instantiate errors can be cleared with loader.delete (#1902)\n* Fix undefined err bug on errors ([#1898](https://github.com/systemjs/systemjs/pull/1898))\n* Add loader.has / loader.set API ([#1899](https://github.com/systemjs/systemjs/pull/1899), 6b85a8c4)\n\n**SystemJS 3.0.0 (2019/01/12) - Major Changes**\n* Implement new Import Maps specification replacing Package Name Maps ([#1893](https://github.com/systemjs/systemjs/pull/1893))\n\nSystemJS 2.1.2 (2019/01/12)\n* Fix empty bundle registration for named register extension ([#1885](https://github.com/systemjs/systemjs/pull/1885), @paulmelnikow)\n\nSystemJS 2.1.1 (2018/11/01)\n* Add AMD named define support to named register extension / amd extension combination ([#1870](https://github.com/systemjs/systemjs/pull/1870), 0f1adb38)\n\nSystemJS 2.1.0 (2018/11/01)\n* Adjust named register to no longer use \"bundle:\" scheme but to define bare specifier names directly in registry ([#1871](https://github.com/systemjs/systemjs/pull/1871), bc63fbb0)\n\nSystemJS 2.0.2 (2018/10/06)\n* Add Named register extra ([#1855](https://github.com/systemjs/systemjs/pull/1855), b34c8290)\n* Fix WASM 4KB limit and Safari instantiation ([#1857](https://github.com/systemjs/systemjs/pull/1857), cb25b39f)\n* Fix global detection in Safari ([#1858](https://github.com/systemjs/systemjs/pull/1858), 989a04f1)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0595703125,
          "content": "MIT License\n-----------\n\nCopyright (C) 2013-2022 Guy Bedford\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.9755859375,
          "content": "# SystemJS\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/systemjs/systemjs?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Backers on Open Collective](https://opencollective.com/systemjs/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/systemjs/sponsors/badge.svg)](#sponsors)\n[![Downloads on JS Delivr](https://data.jsdelivr.com/v1/package/npm/systemjs/badge)](https://www.jsdelivr.com/package/npm/systemjs)\n\nSystemJS is a hookable, standards-based module loader. It provides a workflow where code written for production workflows of native ES modules in browsers ([like Rollup code-splitting builds](https://rollupjs.org/guide/en#code-splitting)), can be transpiled to the [System.register module format](docs/system-register.md) to work in older browsers that don't support native modules, running [almost-native module speeds](#performance) while supporting top-level await, dynamic import, circular references and live bindings, import.meta.url, module types, import maps, integrity and Content Security Policy with compatibility in older browsers back to IE11.\n\n## Sponsors\n\n<a href=\"https://opencollective.com/systemjs/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/systemjs/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/systemjs/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/systemjs/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/systemjs/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/systemjs/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/systemjs/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/systemjs/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/systemjs/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/systemjs/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/systemjs/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/systemjs/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/systemjs/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/systemjs/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/systemjs/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/systemjs/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/systemjs/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/systemjs/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/systemjs/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/systemjs/sponsor/9/avatar.svg\"></a>\n\n> **Support SystemJS by [becoming a sponsor](https://opencollective.com/systemjs#sponsor).** Your logo will show up here with a link to your website.\n\n## Backers\n\nThank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/systemjs#backer)]\n\n<a href=\"https://opencollective.com/systemjs#backers\" target=\"_blank\"><img src=\"https://opencollective.com/systemjs/backers.svg?width=890\"></a>\n\n### Overview\n\n#### 1. s.js minimal production loader\n\nThe minimal [2.8KB s.js production loader](dist/s.min.js) includes the following features:\n\n* Loads `System.register` modules, the CSP-compatible [SystemJS module format](docs/system-register.md).\n* Support for loading bare specifier names with [import maps](docs/import-maps.md) via `<script type=\"systemjs-importmap\">`.\n* Supports [hooks](docs/hooks.md) for loader customization.\n\n#### 2. system.js loader\n\nThe [4.2KB system.js loader](dist/system.min.js) adds the following features in addition to the `s.js` features above:\n\n* [Tracing hooks](docs/hooks.md##onloaderr-id-deps-iserrsource-sync) and [registry deletion API](docs/api.md#registry) for reloading workflows.\n* Supports loading Wasm, CSS and JSON [module types](docs/module-types.md).\n* Includes the [global loading extra](#extras) for loading global scripts, useful for loading library dependencies traditionally loaded with script tags.\n\n#### 3. system-node.cjs loader\n\nThe [system-node.cjs](/dist/system-node.cjs) loader is a version of SystemJS build designed to run in Node.js, typically for workflows where System modules need to be executed on the server like SSR. It has the following features:\n\n* Loading System modules from disk (via `file://` urls) or the network, with included caching that respects the Content-Type header.\n* Import Maps (via the `applyImportMap` api).\n* [Tracing hooks](docs/hooks.md#trace-hooks) and [registry deletion API](docs/api.md#registry) for reloading workflows.\n* Loading global modules with the included [global loading extra](#extras).\n\n_Loading CommonJS modules is not currently supported in this loader and likely won't be. If you find you need them it is more advisable to use [Node.js native module support](https://nodejs.org/dist/latest/docs/api/esm.html) where possible instead of the SystemJS Node.js loader._\n\n#### Extras\n\nThe following [pluggable extras](dist/extras) can be dropped in with either the s.js or system.js loader:\n\n* [AMD loading](dist/extras/amd.js) support (through `Window.define` which is created).\n* [Named register](dist/extras/named-register.js) supports `System.register('name', ...)` named bundles which can then be imported as `System.import('name')` (as well as AMD named define support)\n* [Dynamic import maps](dist/extras/dynamic-import-maps.js) support. This is currently a _potential_ new standard [feature](https://github.com/guybedford/import-maps-extensions#lazy-loading-of-import-maps).\n\nThe following extras are included in system.js loader by default, and can be added to the s.js loader for a smaller tailored footprint:\n\n* [Global loading](dist/extras/global.js) support for loading global scripts and detecting the defined global as the default export. Useful for loading common library scripts from CDN like `System.import('//unpkg.com/lodash')`.\n* [Module Types](dist/extras/module-types.js) `.css`, `.wasm`, `.json` [module type](docs/module-types.md) loading support in line with the existing modules specifications.\n\nSince all loader features are hookable, custom extensions can be easily made following the same approach as the bundled extras. See the [hooks documentation](docs/hooks.md) for more information.\n\n## SystemJS Babel\n\nTo support easy loading of TypeScript or ES modules in development SystemJS workflows, see the [SystemJS Babel Extension](https://github.com/systemjs/systemjs-babel).\n\nSystemJS does not support direct integration with the native ES module browser loader because there is no way to share dependencies between the module systems. For extending the functionality of the native module loader in browsers, see [ES module Shims](https://github.com/guybedford/es-module-shims), which like SystemJS, provides workflows for import maps and other modules features, but on top of base-level modules support in browsers, which it does using a fast Wasm-based source rewriting to remap module specifiers.\n\n## Performance\n\nSystemJS is designed for production modules performance roughly only around a factor of 1.5 times the speed of native ES modules, as seen in the following performance benchmark, which was run by loading 426 javascript modules (all of `@babel/core`) on a Macbook pro with fast wifi internet connection. Each test was the average of five page loads in Chrome 80.\n\n| Tool | Uncached | Cached |\n| ---- | -------- | ------ |\n| Native modules | 1668ms | 49ms |\n| SystemJS | 2334ms | 81ms |\n\n## Getting Started\n\n[Introduction video](https://www.youtube.com/watch?v=AmdKF2UhFzw).\n\nThe [systemjs-examples repo](https://github.com/systemjs/systemjs-examples) contains a variety of examples demonstrating how to use SystemJS.\n\n## Installation\n\n```\nnpm install systemjs\n```\n\n## Documentation\n\n* [Import Maps](docs/import-maps.md)\n* [API](docs/api.md)\n* [System.register](docs/system-register.md)\n* [Loader Hooks](docs/hooks.md)\n* [Module Types](docs/module-types.md)\n\n## Example Usage\n\n### Loading a System.register module\nYou can load [System.register](/docs/system-register.md) modules with a script element in your HTML:\n\n```html\n<script src=\"system.js\"></script>\n<script type=\"systemjs-module\" src=\"/js/main.js\"></script>\n<script type=\"systemjs-module\" src=\"import:name-of-module\"></script>\n```\n\n### Loading with System.import\nYou can also dynamically load modules at any time with `System.import()`:\n\n```js\nSystem.import('/js/main.js');\n```\n\nwhere `main.js` is a module available in the System.register module format.\n\n### Bundling workflow\n\nFor an example of a bundling workflow, see the Rollup Code Splitting starter project - https://github.com/rollup/rollup-starter-code-splitting.\n\nNote that when building System modules you typically want to ensure anonymous System.register statements like:\n\n```js\nSystem.register([], function () { ... });\n```\n\nare emitted, as these can be loaded in a way that behaves the same as normal ES modules, and **not** named register statements like:\n\n```js\nSystem.register('name', [], function () { ... });\n```\n\nWhile these can be supported with the named register extension, this approach is typically not recommended for modern modules workflows.\n\n### Import Maps\n\nSay `main.js` depends on loading `'lodash'`, then we can define an import map:\n\n```html\n<script src=\"system.js\"></script>\n<script type=\"systemjs-importmap\">\n{\n  \"imports\": {\n    \"lodash\": \"https://unpkg.com/lodash@4.17.10/lodash.js\"\n  }\n}\n</script>\n<!-- Alternatively:\n<script type=\"systemjs-importmap\" src=\"path/to/map.json\" crossorigin=\"anonymous\"></script>\n-->\n<script type=\"systemjs-module\" src=\"/js/main.js\"></script>\n```\n\n### IE11 Support\n\nIE11 continues to be fully supported, provided the relevant polyfills are available.\n\nThe main required polyfill is a `Promise` polyfill. If using import maps a `fetch` polyfill is also needed.\n\nBoth of these can be loaded conditionally using for example using [Bluebird Promises](http://bluebirdjs.com/docs/getting-started.html) and the [GitHub Fetch Polyfill](https://github.github.io/fetch/) over Unpkg:\n\n```html\n<script>\n  if (typeof Promise === 'undefined')\n    document.write('<script src=\"https://unpkg.com/bluebird@3.7.2/js/browser/bluebird.core.min.js\"><\\/script>');\n  if (typeof fetch === 'undefined')\n    document.write('<script src=\"https://unpkg.com/whatwg-fetch@3.4.1/dist/fetch.umd.js\"><\\/script>');\n</script>\n```\n\nlocated _before_ the SystemJS script itself. The above will ensure these polyfills are only fetched for older browsers without `Promise` and `fetch` support.\n\n#### Note on Import Maps Support in IE11\n\nWhen using external import maps (those with `src=\"\"` attributes), there is an IE11-specific workaround that might need to be used. Browsers should not make a network request when they see `<script type=\"systemjs-importmap\" src=\"/importmap.json\"></script>` during parsing of the initial HTML page. However, IE11 does so. [Codesandbox demonstration](https://codesandbox.io/s/vibrant-black-xiok4?file=/index.html)\n\nNormally this is not an issue, as SystemJS will make an additional request via fetch/xhr for the import map. However, a problem can occur when the file is cached after the first request, since the first request caused by IE11 does not send the Origin request header by default. If the request requires CORS, the lack of an Origin request header causes many web servers (including AWS Cloudfront) to omit the response CORS headers. This can result in the resource being cached without CORS headers, which causes the later SystemJS fetch() to fail because of CORS checks.\n\nThis can be worked around by adding `crossorigin=\"anonymous\"` as an attribute to the `<script type=\"systemjs-importmap\">` script.\n\n## Community Projects\n\nA list of projects that use or work with SystemJS in providing modular browser workflows. [Post a PR](https://github.com/systemjs/systemjs/edit/master/README.md).\n\n* [beyondjs.com](https://beyondjs.com) -TypeScript first meta-framework for universal microfrontends/micronservices.\n* [esm-bundle](https://github.com/esm-bundle) - list of System.register versions for major libraries, including documentation on how to create a System.register bundle for any npm package.\n* [es-dev-server](https://github.com/open-wc/open-wc/tree/master/packages/es-dev-server) - A web server for developing without a build step.\n* [import map overrides](https://github.com/joeldenning/import-map-overrides/) - Dynamically inject an import map stored in local storage so that you can override the URL for any module. Can be useful for running development modules on localhost against the server.\n* [js-env](https://github.com/jsenv/jsenv-core) - Collection of development tools providing a unified workflow to write JavaScript for the web, node.js or both at the same time.\n* [jspm.org](https://jspm.org) - Package manager for native modules, using SystemJS for backwards compatibility.\n* [single-spa](https://single-spa.js.org/) - JavaScript framework for front-end microservices.\n* [systemjs-webpack-interop](https://github.com/joeldenning/systemjs-webpack-interop) - npm lib for setting webpack public path and creating webpack configs that work well with SystemJS.\n* [@wener/system](https://github.com/wenerme/wode/tree/main/packages/system) - hooks to make System works with npm registry & package.json}\n\n\n## Compatibility with Webpack\n\nCode-splitting builds on top of native ES modules, like Rollup offers, are an alternative to the Webpack-style chunking approach - offering a way to utilize the native module loader for loading shared and dynamic chunks instead of using a custom registry and loader as Webpack bundles include. Scope-level optimizations can be performed on ES modules when they are combined, while ensuring no duplicate code is loaded through dynamic loading and code-sharing in the module registry, using the features of the native module loader and its dynamic runtime nature.\n\n[systemjs-webpack-interop](https://github.com/joeldenning/systemjs-webpack-interop) is a community-maintained npm library that might help you get webpack and systemjs working well together.\n\nAs of webpack@4.30.0, it is now possible to compile webpack bundles to System.register format, by modifying your webpack config:\n\n```js\n{\n  output: {\n    libraryTarget: 'system', \n  }\n}\n```\n\nIf using webpack@<5, the following config is needed to avoid rewriting references to the global `System` variable:\n\n```js\n{\n  module: {\n    rules: [\n      { parser: { system: false } }\n    ]\n  }\n}\n```\n\n## Using npm packages\n\nThird party libraries and npm packages may be used as long as they are published in [a supported module format](https://github.com/systemjs/systemjs/blob/master/docs/module-types.md). For packages that do not exist in a supported module format, [here is a list of github repos](https://github.com/esm-bundle/) that publish `System.register` versions of popular third party libraries (such as react, react-dom, rxjs, etc).\n\n## Contributing to SystemJS\n\nProject bug fixes and changes are welcome for discussion, provided the project footprint remains minimal.\n\nTask running is handled by Chomp (https://chompbuild.com).\n\nTo run the tests:\n\n```\nnpm install -g chomp\nchomp test\n```\n\n## Changes\n\nFor the changelog, see [CHANGELOG.md](CHANGELOG.md).\n\n## License\n\nMIT\n"
        },
        {
          "name": "chompfile.toml",
          "type": "blob",
          "size": 2.912109375,
          "content": "version = 0.1\n\ndefault-task = 'build'\n\nextensions = [\n  'chomp@0.1:npm',\n  'chomp@0.1:footprint',\n  './terser.js',\n  'chomp@0.1:rollup',\n  'chomp@0.1:ncc'\n]\n\n[[task]]\nname = 'build'\ndeps = ['dist/system.js', 'dist/system.min.js', 'dist/s.js', 'dist/s.min.js', 'dist/system-node.cjs', 'dist/extras/*.js']\n\n[[task]]\ntarget = 'dist/system.js'\ndeps = ['src/system.js', 'src/system-core.js', 'src/common.js', 'src/err-msg.js', 'src/features/*.js']\ntemplate = 'rollup'\n[task.template-options]\nonwarn = false\n[task.template-options.output]\nbanner = '''/*!\n * SystemJS #PJSON_VERSION\n */'''\nformat = 'iife'\nstrict = false\n[[task.template-options.plugin]]\npackage = '@rollup/plugin-replace'\n\"process.env.SYSTEM_PRODUCTION\" = 'false'\n\"process.env.SYSTEM_BROWSER\" = 'true'\n\n[[task]]\ntarget = 'dist/s.js'\ndeps = ['src/s.js', 'src/system-core.js', 'src/common.js', 'src/err-msg.js', 'src/features/*.js']\ntemplate = 'rollup'\n[task.template-options]\nonwarn = false\n[task.template-options.output]\nbanner = '''/*!\n * SJS #PJSON_VERSION\n */'''\nformat = 'iife'\nstrict = false\n[[task.template-options.plugin]]\npackage = '@rollup/plugin-replace'\n\"process.env.SYSTEM_PRODUCTION\" = 'true'\n\"process.env.SYSTEM_BROWSER\" = 'true'\n\n[[task]]\ndeps = ['src/extras/#.js', 'src/common.js', 'src/err-msg.js', 'src/features/*.js']\ntarget = 'dist/extras/#.js'\ntemplate = 'rollup'\n[task.template-options]\nonwarn = false\n[task.template-options.output]\nformat = 'iife'\nstrict = false\n[[task.template-options.plugin]]\npackage = '@rollup/plugin-replace'\n\"process.env.SYSTEM_PRODUCTION\" = 'false'\n\"process.env.SYSTEM_BROWSER\" = 'true'\n\n[[task]]\ntarget = 'dist/##.min.js'\ndep = 'dist/##.js'\ntemplate = 'terser'\n[task.template-options]\nsource-map = true\necma = 5\nkeep_classnames = false\nkeep_fnames = false\nsafari10 = true\ntoplevel = true\n[task.template-options.mangle]\neval = true\n[task.template-options.compress]\narguments = true\nhoist_funs = true\nkeep_fargs = false\npure_getters = true\npasses = 2\nunsafe = false\n\n[[task]]\ntarget = 'dist/system-node.cjs'\ndeps = ['src/system-node.js', 'package.json', 'src/system-core.js', 'src/common.js', 'src/err-msg.js', 'src/features/*.js']\ntemplate = 'ncc'\n[task.template-options]\nassets = false\nesm = false\n\n[[task]]\nname = 'footprint'\ntemplate = 'footprint'\ndeps = ['dist/system.min.js', 'dist/s.min.js']\n\n[[task]]\nname = 'test'\ndeps = ['test:browser', 'test:internal', 'test:node']\n\n[[task]]\nname = 'test:browser:watch'\ndeps = ['dist/system.js', 'dist/extras/*.js', 'npm:install']\nenv = { WATCH_MODE = 'true' }\nrun = 'node test/server.mjs'\n\n[[task]]\nname = 'test:browser'\ndeps = ['dist/system.js', 'dist/extras/*.js', 'npm:install']\nrun = 'node test/server.mjs'\n\n[[task]]\nname = 'test:internal'\ndep = 'npm:install'\nenv = { NODE_OPTIONS = '--unhandled-rejections=none' }\nrun = 'mocha -b test/import-map.mjs test/system-core.mjs test/url-resolution.mjs'\n\n[[task]]\nname = 'test:node'\ndeps = ['dist/system-node.cjs', 'npm:install']\nrun = 'mocha --timeout 5000 -b test/system-node.mjs'\n"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.296875,
          "content": "{\n  \"name\": \"systemjs\",\n  \"version\": \"6.15.1\",\n  \"main\": \"dist/system-node.cjs\",\n  \"exports\": {\n    \".\": {\n      \"node\": \"./dist/system-node.cjs\",\n      \"default\": \"./dist/system.min.js\"\n    },\n    \"./s.js\": \"./dist/s.min.js\",\n    \"./package.json\": \"./package.json\",\n    \"./dist/*\": \"./dist/*\"\n  },\n  \"description\": \"Dynamic ES module loader\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/systemjs/systemjs\"\n  },\n  \"author\": \"Guy Bedford\",\n  \"type\": \"script\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"test\": \"chomp test\",\n    \"build\": \"chomp build\"\n  },\n  \"devDependencies\": {\n    \"@jsenv/file-size-impact\": \"^5.2.0\",\n    \"@rollup/plugin-json\": \"^4.0.2\",\n    \"@rollup/plugin-node-resolve\": \"^7.1.1\",\n    \"@rollup/plugin-replace\": \"^2.4.2\",\n    \"@vercel/ncc\": \"^0.34.0\",\n    \"bluebird\": \"^3.7.2\",\n    \"construct-style-sheets-polyfill\": \"^2.3.5\",\n    \"kleur\": \"^4.1.5\",\n    \"mkdirp\": \"^1.0.4\",\n    \"mocha\": \"^7.1.1\",\n    \"node-fetch\": \"^2.6.0\",\n    \"open\": \"^8.4.0\",\n    \"rimraf\": \"^3.0.2\",\n    \"rollup\": \"^2.79.1\",\n    \"rollup-plugin-terser\": \"^5.3.0\",\n    \"source-map-support\": \"^0.5.16\",\n    \"symbol-es6\": \"^0.1.2\",\n    \"terser\": \"^5.16.5\",\n    \"whatwg-fetch\": \"^3.0.0\"\n  },\n  \"collective\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/systemjs\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "terser.js",
          "type": "blob",
          "size": 1.716796875,
          "content": "Chomp.addExtension('chomp@0.1:npm');\n\nChomp.registerTemplate('terser', function (task) {\n  if (task.engine || task.run)\n    throw new Error('\"engine\", \"run\" not configurable for Terser template.');\n\n  const opts = task.templateOptions;\n  const preamble = opts.output?.preamble;\n  const pjsonVersion = typeof preamble === 'string' && preamble.includes('#PJSON_VERSION');\n  const { autoInstall } = opts;\n  const targetName = task.targets[0].split('/').pop();\n  if (opts.sourceMap === true)\n    opts.sourceMap = { filename: targetName, url: '$TARGET', includeSources: true };\n  const optionsStr = JSON.stringify(opts, null, 2).replace(/\\n/g, '\\n  ').replace('\"$TARGET\"', '`${basename(process.env.TARGET)}.map`');\n\n  return [{\n    name: task.name,\n    targets: task.targets,\n    deps: [...task.deps, ...pjsonVersion ? ['package.json'] : [], ...ENV.CHOMP_EJECT ? ['npm:install'] : ['node_modules/terser']],\n    engine: 'node',\n    run: `  import { readFileSync, writeFileSync } from 'fs';\n  import { basename } from 'path';\n  import { minify } from 'terser';\n\n${pjsonVersion ? `  const pjson = JSON.parse(readFileSync('package.json', 'utf8'));` : ''}\n  const { code, map } = await minify({ [basename(process.env.DEP)]: readFileSync(process.env.DEP, 'utf8') }, ${\n    pjsonVersion ? optionsStr.replace('\"preamble\": ' + JSON.stringify(preamble), '\"preamble\": `' + preamble.replace(/(\\`|\\${)/, '\\\\$1').replace('#PJSON_VERSION', '${pjson.version}') + '`') : optionsStr\n  });\n  writeFileSync(process.env.TARGET, code + \"\\\\n\");\n${opts.sourceMap ? '  writeFileSync(`${process.env.TARGET}.map`, map);\\n' : ''}`\n  }, ...ENV.CHOMP_EJECT ? [] : [{\n    template: 'npm',\n    templateOptions: {\n      autoInstall,\n      packages: ['terser@5'],\n      dev: true\n    }\n  }]];\n});\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}