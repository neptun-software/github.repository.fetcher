{
  "metadata": {
    "timestamp": 1736563339971,
    "page": 329,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tj/co",
      "stars": 11891,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0341796875,
          "content": "node_modules\ncoverage\nco-browser.js"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1748046875,
          "content": "node_js:\n- \"stable\"\n- \"4\"\n- \"iojs\"\n- \"0.12\"\nlanguage: node_js\nscript: \"npm run-script test-travis\"\nafter_script: \"npm install coveralls@2 && cat ./coverage/lcov.info | coveralls\"\n"
        },
        {
          "name": "History.md",
          "type": "blob",
          "size": 3.5439453125,
          "content": "4.6.0 / 2015-07-09\n==================\n\n * support passing the rest of the arguments to co into the generator\n\n ```js\n function *gen(...args) { }\n co(gen, ...args);\n ```\n\n4.5.0 / 2015-03-17\n==================\n\n * support regular functions (that return promises)\n\n4.4.0 / 2015-02-14\n==================\n\n * refactor `isGeneratorFunction`\n * expose generator function from `co.wrap()`\n * drop support for node < 0.12\n\n4.3.0 / 2015-02-05\n==================\n\n * check for generator functions in a ES5-transpiler-friendly way\n\n4.2.0 / 2015-01-20\n==================\n\n * support comparing generator functions with ES6 transpilers\n\n4.1.0 / 2014-12-26\n==================\n\n * fix memory leak #180\n\n4.0.2 / 2014-12-18\n==================\n\n * always return a global promise implementation\n\n4.0.1 / 2014-11-30\n==================\n\n * friendlier ES6 module exports\n\n4.0.0 / 2014-11-15\n==================\n\n * co now returns a promise and uses promises underneath\n * `co.wrap()` for wrapping generator functions\n\n3.1.0 / 2014-06-30\n==================\n\n * remove `setImmediate()` shim for node 0.8. semi-backwards breaking.\n   Users are expected to shim themselves. Also returns CommonJS browser support.\n * added key order preservation for objects. thanks @greim\n * replace `q` with `bluebird` in benchmarks and tests\n\n3.0.6 / 2014-05-03\n==================\n\n * add `setImmediate()` fallback to `process.nextTick`\n * remove duplicate code in toThunk\n * update thunkify\n\n3.0.5 / 2014-03-17\n==================\n\n * fix object/array test failure which tries to enumerate dates. Closes #98\n * fix final callback error propagation. Closes #92\n\n3.0.4 / 2014-02-17\n==================\n\n * fix toThunk object check regression. Closes #89\n\n3.0.3 / 2014-02-08\n==================\n\n * refactor: arrayToThunk @AutoSponge #88\n\n3.0.2 / 2014-01-01\n==================\n\n * fixed: nil arguments replaced with error fn\n\n3.0.1 / 2013-12-19\n==================\n\n * fixed: callback passed as an argument to generators\n\n3.0.0 / 2013-12-19\n==================\n\n * fixed: callback passed as an argument to generators\n * change: `co(function *(){})` now returns a reusable thunk\n * change: `this` must now be passed through the returned thunk, ex. `co(function *(){}).call(this)`\n * fix \"generator already finished\" errors\n\n2.3.0 / 2013-11-12\n==================\n\n * add `yield object` support\n\n2.2.0 / 2013-11-05\n==================\n\n * change: make the `isGenerator()` function more generic\n\n2.1.0 / 2013-10-21\n==================\n\n * add passing of arguments into the generator. closes #33.\n\n2.0.0 / 2013-10-14\n==================\n\n * remove callback in favour of thunk-only co(). Closes #30 [breaking change]\n * remove `co.wrap()` [breaking change]\n\n1.5.2 / 2013-09-02\n==================\n\n * fix: preserve receiver with co.wrap()\n\n1.5.1 / 2013-08-11\n==================\n\n * remove setImmediate() usage - ~110% perf increase. Closes #14\n\n0.5.0 / 2013-08-10\n==================\n\n * add receiver propagation support\n * examples: update streams.js example to use `http.get()` and streams2 API\n\n1.4.1 / 2013-07-01\n==================\n\n * fix gen.next(val) for latest v8. Closes #8\n\n1.4.0 / 2013-06-21\n==================\n\n * add promise support to joins\n * add `yield generatorFunction` support\n * add `yield generator` support\n * add nested join support\n\n1.3.0 / 2013-06-10\n==================\n\n * add passing of arguments\n\n1.2.1 / 2013-06-08\n==================\n\n * fix join() of zero thunks\n\n1.2.0 / 2013-06-08\n==================\n\n * add array yielding support. great suggestion by @domenic\n\n1.1.0 / 2013-06-06\n==================\n\n * add promise support\n * change nextTick to setImmediate\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.078125,
          "content": "(The MIT License)\n\nCopyright (c) 2014 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 5.2568359375,
          "content": "# co\n\n[![Gitter][gitter-image]][gitter-url]\n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Downloads][downloads-image]][downloads-url]\n\n  Generator based control flow goodness for nodejs and the browser,\n  using promises, letting you write non-blocking code in a nice-ish way.\n\n## Co v4\n\n  `co@4.0.0` has been released, which now relies on promises.\n  It is a stepping stone towards the [async/await proposal](https://github.com/lukehoban/ecmascript-asyncawait).\n  The primary API change is how `co()` is invoked.\n  Before, `co` returned a \"thunk\", which you then called with a callback and optional arguments.\n  Now, `co()` returns a promise.\n\n```js\nco(function* () {\n  var result = yield Promise.resolve(true);\n  return result;\n}).then(function (value) {\n  console.log(value);\n}, function (err) {\n  console.error(err.stack);\n});\n```\n\n  If you want to convert a `co`-generator-function into a regular function that returns a promise,\n  you now use `co.wrap(fn*)`.\n\n```js\nvar fn = co.wrap(function* (val) {\n  return yield Promise.resolve(val);\n});\n\nfn(true).then(function (val) {\n\n});\n```\n\n## Platform Compatibility\n\n  `co@4+` requires a `Promise` implementation.\n  For versions of node `< 0.11` and for many older browsers,\n  you should/must include your own `Promise` polyfill.\n\n  When using node 0.10.x and lower or browsers without generator support,\n  you must use [gnode](https://github.com/TooTallNate/gnode) and/or [regenerator](http://facebook.github.io/regenerator/).\n\n  When using node 0.11.x, you must use the `--harmony-generators`\n  flag or just `--harmony` to get access to generators.\n\n  Node v4+ is supported out of the box, you can use `co` without flags or polyfills.\n\n## Installation\n\n```\n$ npm install co\n```\n\n## Associated libraries\n\nAny library that returns promises work well with `co`.\n\n- [mz](https://github.com/normalize/mz) - wrap all of node's code libraries as promises.\n\nView the [wiki](https://github.com/visionmedia/co/wiki) for more libraries.\n\n## Examples\n\n```js\nvar co = require('co');\n\nco(function *(){\n  // yield any promise\n  var result = yield Promise.resolve(true);\n}).catch(onerror);\n\nco(function *(){\n  // resolve multiple promises in parallel\n  var a = Promise.resolve(1);\n  var b = Promise.resolve(2);\n  var c = Promise.resolve(3);\n  var res = yield [a, b, c];\n  console.log(res);\n  // => [1, 2, 3]\n}).catch(onerror);\n\n// errors can be try/catched\nco(function *(){\n  try {\n    yield Promise.reject(new Error('boom'));\n  } catch (err) {\n    console.error(err.message); // \"boom\"\n }\n}).catch(onerror);\n\nfunction onerror(err) {\n  // log any uncaught errors\n  // co will not throw any errors you do not handle!!!\n  // HANDLE ALL YOUR ERRORS!!!\n  console.error(err.stack);\n}\n```\n\n## Yieldables\n\n  The `yieldable` objects currently supported are:\n\n  - promises\n  - thunks (functions)\n  - array (parallel execution)\n  - objects (parallel execution)\n  - generators (delegation)\n  - generator functions (delegation)\n\nNested `yieldable` objects are supported, meaning you can nest\npromises within objects within arrays, and so on!\n\n### Promises\n\n[Read more on promises!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\n### Thunks\n\nThunks are functions that only have a single argument, a callback.\nThunk support only remains for backwards compatibility and may\nbe removed in future versions of `co`.\n\n### Arrays\n\n`yield`ing an array will resolve all the `yieldables` in parallel.\n\n```js\nco(function* () {\n  var res = yield [\n    Promise.resolve(1),\n    Promise.resolve(2),\n    Promise.resolve(3),\n  ];\n  console.log(res); // => [1, 2, 3]\n}).catch(onerror);\n```\n\n### Objects\n\nJust like arrays, objects resolve all `yieldable`s in parallel.\n\n```js\nco(function* () {\n  var res = yield {\n    1: Promise.resolve(1),\n    2: Promise.resolve(2),\n  };\n  console.log(res); // => { 1: 1, 2: 2 }\n}).catch(onerror);\n```\n\n### Generators and Generator Functions\n\nAny generator or generator function you can pass into `co`\ncan be yielded as well. This should generally be avoided\nas we should be moving towards spec-compliant `Promise`s instead.\n\n## API\n\n### co(fn*).then( val => )\n\nReturns a promise that resolves a generator, generator function,\nor any function that returns a generator.\n\n```js\nco(function* () {\n  return yield Promise.resolve(true);\n}).then(function (val) {\n  console.log(val);\n}, function (err) {\n  console.error(err.stack);\n});\n```\n\n### var fn = co.wrap(fn*)\n\nConvert a generator into a regular function that returns a `Promise`.\n\n```js\nvar fn = co.wrap(function* (val) {\n  return yield Promise.resolve(val);\n});\n\nfn(true).then(function (val) {\n\n});\n```\n\n## License\n\n  MIT\n\n[npm-image]: https://img.shields.io/npm/v/co.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/co\n[travis-image]: https://img.shields.io/travis/tj/co.svg?style=flat-square\n[travis-url]: https://travis-ci.org/tj/co\n[coveralls-image]: https://img.shields.io/coveralls/tj/co.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/tj/co\n[downloads-image]: http://img.shields.io/npm/dm/co.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/co\n[gitter-image]: https://badges.gitter.im/Join%20Chat.svg\n[gitter-url]: https://gitter.im/tj/co?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n"
        },
        {
          "name": "component.json",
          "type": "blob",
          "size": 0.25,
          "content": "{\n  \"name\": \"co\",\n  \"version\": \"4.4.0\",\n  \"description\": \"generator async control flow goodness\",\n  \"keywords\": [\n    \"async\",\n    \"flow\",\n    \"generator\",\n    \"coro\",\n    \"coroutine\"\n  ],\n  \"repo\": \"tj/co\",\n  \"scripts\": [\"index.js\"],\n  \"licence\": \"MIT\"\n}\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 4.939453125,
          "content": "\n/**\n * slice() reference.\n */\n\nvar slice = Array.prototype.slice;\n\n/**\n * Expose `co`.\n */\n\nmodule.exports = co['default'] = co.co = co;\n\n/**\n * Wrap the given generator `fn` into a\n * function that returns a promise.\n * This is a separate function so that\n * every `co()` call doesn't create a new,\n * unnecessary closure.\n *\n * @param {GeneratorFunction} fn\n * @return {Function}\n * @api public\n */\n\nco.wrap = function (fn) {\n  createPromise.__generatorFunction__ = fn;\n  return createPromise;\n  function createPromise() {\n    return co.call(this, fn.apply(this, arguments));\n  }\n};\n\n/**\n * Execute the generator function or a generator\n * and return a promise.\n *\n * @param {Function} fn\n * @return {Promise}\n * @api public\n */\n\nfunction co(gen) {\n  var ctx = this;\n  var args = slice.call(arguments, 1);\n\n  // we wrap everything in a promise to avoid promise chaining,\n  // which leads to memory leak errors.\n  // see https://github.com/tj/co/issues/180\n  return new Promise(function(resolve, reject) {\n    if (typeof gen === 'function') gen = gen.apply(ctx, args);\n    if (!gen || typeof gen.next !== 'function') return resolve(gen);\n\n    onFulfilled();\n\n    /**\n     * @param {Mixed} res\n     * @return {Promise}\n     * @api private\n     */\n\n    function onFulfilled(res) {\n      var ret;\n      try {\n        ret = gen.next(res);\n      } catch (e) {\n        return reject(e);\n      }\n      next(ret);\n      return null;\n    }\n\n    /**\n     * @param {Error} err\n     * @return {Promise}\n     * @api private\n     */\n\n    function onRejected(err) {\n      var ret;\n      try {\n        ret = gen.throw(err);\n      } catch (e) {\n        return reject(e);\n      }\n      next(ret);\n    }\n\n    /**\n     * Get the next value in the generator,\n     * return a promise.\n     *\n     * @param {Object} ret\n     * @return {Promise}\n     * @api private\n     */\n\n    function next(ret) {\n      if (ret.done) return resolve(ret.value);\n      var value = toPromise.call(ctx, ret.value);\n      if (value && isPromise(value)) return value.then(onFulfilled, onRejected);\n      return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, '\n        + 'but the following object was passed: \"' + String(ret.value) + '\"'));\n    }\n  });\n}\n\n/**\n * Convert a `yield`ed value into a promise.\n *\n * @param {Mixed} obj\n * @return {Promise}\n * @api private\n */\n\nfunction toPromise(obj) {\n  if (!obj) return obj;\n  if (isPromise(obj)) return obj;\n  if (isGeneratorFunction(obj) || isGenerator(obj)) return co.call(this, obj);\n  if ('function' == typeof obj) return thunkToPromise.call(this, obj);\n  if (Array.isArray(obj)) return arrayToPromise.call(this, obj);\n  if (isObject(obj)) return objectToPromise.call(this, obj);\n  return obj;\n}\n\n/**\n * Convert a thunk to a promise.\n *\n * @param {Function}\n * @return {Promise}\n * @api private\n */\n\nfunction thunkToPromise(fn) {\n  var ctx = this;\n  return new Promise(function (resolve, reject) {\n    fn.call(ctx, function (err, res) {\n      if (err) return reject(err);\n      if (arguments.length > 2) res = slice.call(arguments, 1);\n      resolve(res);\n    });\n  });\n}\n\n/**\n * Convert an array of \"yieldables\" to a promise.\n * Uses `Promise.all()` internally.\n *\n * @param {Array} obj\n * @return {Promise}\n * @api private\n */\n\nfunction arrayToPromise(obj) {\n  return Promise.all(obj.map(toPromise, this));\n}\n\n/**\n * Convert an object of \"yieldables\" to a promise.\n * Uses `Promise.all()` internally.\n *\n * @param {Object} obj\n * @return {Promise}\n * @api private\n */\n\nfunction objectToPromise(obj){\n  var results = new obj.constructor();\n  var keys = Object.keys(obj);\n  var promises = [];\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var promise = toPromise.call(this, obj[key]);\n    if (promise && isPromise(promise)) defer(promise, key);\n    else results[key] = obj[key];\n  }\n  return Promise.all(promises).then(function () {\n    return results;\n  });\n\n  function defer(promise, key) {\n    // predefine the key in the result\n    results[key] = undefined;\n    promises.push(promise.then(function (res) {\n      results[key] = res;\n    }));\n  }\n}\n\n/**\n * Check if `obj` is a promise.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isPromise(obj) {\n  return 'function' == typeof obj.then;\n}\n\n/**\n * Check if `obj` is a generator.\n *\n * @param {Mixed} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isGenerator(obj) {\n  return 'function' == typeof obj.next && 'function' == typeof obj.throw;\n}\n\n/**\n * Check if `obj` is a generator function.\n *\n * @param {Mixed} obj\n * @return {Boolean}\n * @api private\n */\n \nfunction isGeneratorFunction(obj) {\n  var constructor = obj.constructor;\n  if (!constructor) return false;\n  if ('GeneratorFunction' === constructor.name || 'GeneratorFunction' === constructor.displayName) return true;\n  return isGenerator(constructor.prototype);\n}\n\n/**\n * Check for plain object.\n *\n * @param {Mixed} val\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(val) {\n  return Object == val.constructor;\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.865234375,
          "content": "{\n  \"name\": \"co\",\n  \"version\": \"4.6.0\",\n  \"description\": \"generator async control flow goodness\",\n  \"keywords\": [\n    \"async\",\n    \"flow\",\n    \"generator\",\n    \"coro\",\n    \"coroutine\"\n  ],\n  \"devDependencies\": {\n    \"browserify\": \"^10.0.0\",\n    \"istanbul-harmony\": \"0\",\n    \"mocha\": \"^2.0.0\",\n    \"mz\": \"^1.0.2\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha --harmony\",\n    \"test-cov\": \"node --harmony node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter dot\",\n    \"test-travis\": \"node --harmony node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- --reporter dot\",\n    \"prepublish\": \"npm run browserify\",\n    \"browserify\": \"browserify index.js -o ./co-browser.js -s co\"\n  },\n  \"files\": [\n    \"co-browser.js\",\n    \"index.js\"\n  ],\n  \"license\": \"MIT\",\n  \"repository\": \"tj/co\",\n  \"engines\": {\n    \"iojs\": \">= 1.0.0\",\n    \"node\": \">= 0.12.0\"\n  }\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}