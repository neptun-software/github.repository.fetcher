{
  "metadata": {
    "timestamp": 1736563238020,
    "page": 205,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kriskowal/q",
      "stars": 14928,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coverignore",
          "type": "blob",
          "size": 0.005859375,
          "content": "spec/\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1171875,
          "content": "node_modules\nnpm-debug.log\nCHANGES.html\nREADME.html\n.tmp\nq.min.js\n\ncoverage/\n\n# IntelliJ IDEA project files\n.idea\n*.iml\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 0.48046875,
          "content": "{\n    \"browser\": true,\n    \"node\": true,\n\n    \"curly\": true,\n    \"eqeqeq\": true,\n    \"es3\": true,\n    \"newcap\": false,\n    \"noarg\": true,\n    \"nonew\": true,\n    \"quotmark\": \"double\",\n    \"strict\": true,\n    \"trailing\": true,\n    \"undef\": true,\n    \"unused\": true,\n\n    \"globals\": {\n        \"self\": false,\n        \"bootstrap\": false,\n        \"cajaVM\": false,\n        \"define\": false,\n        \"ReturnValue\": false,\n        \"ses\": false,\n        \"setImmediate\": false,\n        \"Q\": true\n    }\n}\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.0791015625,
          "content": "Domenic Denicola <domenic@domenicdenicola.com>\nKris Kowal <kris.kowal@cixar.com>\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0556640625,
          "content": "language: node_js\nnode_js:\n  - \"0.10\"\nscript:\n  npm test\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 29.359375,
          "content": "\n## 1.5.1\n\n - Q.any now annotates its error message to clarify that Q.any was involved and\n   includes only the last error emitted. (Ivan Etchart)\n - Avoid domain.dispose during tests in preparation for Node.js 9. (Anna\n   Henningsen)\n\n## 1.5.0\n\n - Q.any gives an error message from the last rejected promise\n - Throw if callback supplied to \"finally\" is invalid (@grahamrhay)\n - Long stack trace improvements, can now construct long stack traces\n   across rethrows.\n\n## 1.4.1\n\n - Address an issue that prevented Q from being used as a `<script>` for\n   Firefox add-ons. Q can now be used in any environment that provides `window`\n   or `self` globals, favoring `window` since add-ons have an an immutable\n   `self` that is distinct from `window`.\n\n## 1.4.0\n\n - Add `noConflict` support for use in `<script>` (@jahnjw).\n\n## 1.3.0\n\n - Add tracking for unhandled and handled rejections in Node.js (@benjamingr).\n\n## 1.2.1\n\n - Fix Node.js environment detection for modern Browserify (@kahnjw).\n\n## 1.2.0\n\n - Added Q.any(promisesArray) method (@vergara).\n   Returns a promise fulfilled with the value of the first resolved promise in\n   promisesArray. If all promises in promisesArray are rejected, it returns\n   a rejected promise.\n\n## 1.1.2\n\n - Removed extraneous files from the npm package by using the \"files\"\n   whitelist in package.json instead of the .npmignore blacklist.\n   (@anton-rudeshko)\n\n## 1.1.1\n\n - Fix a pair of regressions in bootstrapping, one which precluded\n   WebWorker support, and another that precluded support in\n   ``<script>`` usage outright. #607\n\n## 1.1.0\n\n - Adds support for enabling long stack traces in node.js by setting\n   environment variable `Q_DEBUG=1`.\n - Introduces the `tap` method to promises, which will see a value\n   pass through without alteration.\n - Use instanceof to recognize own promise instances as opposed to\n   thenables.\n - Construct timeout errors with `code === ETIMEDOUT` (Kornel Lesiński)\n - More descriminant CommonJS module environment detection.\n - Dropped continuous integration for Node.js 0.6 and 0.8 because of\n   changes to npm that preclude the use of new `^` version predicate\n   operator in any transitive dependency.\n - Users can now override `Q.nextTick`.\n\n## 1.0.1\n\n - Adds support for `Q.Promise`, which implements common usage of the\n   ES6 `Promise` constructor and its methods. `Promise` does not have\n   a valid promise constructor and a proper implementation awaits\n   version 2 of Q.\n - Removes the console stopgap for a promise inspector. This no longer\n   works with any degree of reliability.\n - Fixes support for content security policies that forbid eval. Now\n   using the `StopIteration` global to distinguish SpiderMonkey\n   generators from ES6 generators, assuming that they will never\n   coexist.\n\n## 1.0.0\n\n:cake: This is all but a re-release of version 0.9, which has settled\ninto a gentle maintenance mode and rightly deserves an official 1.0.\nAn ambitious 2.0 release is already around the corner, but 0.9/1.0\nhave been distributed far and wide and demand long term support.\n\n - Q will now attempt to post a debug message in browsers regardless\n   of whether window.Touch is defined. Chrome at least now has this\n   property regardless of whether touch is supported by the underlying\n   hardware.\n - Remove deprecation warning from `promise.valueOf`. The function is\n   called by the browser in various ways so there is no way to\n   distinguish usage that should be migrated from usage that cannot be\n   altered.\n\n## 0.9.7\n\n - :warning: `q.min.js` is no longer checked-in.  It is however still\n   created by Grunt and NPM.\n - Fixes a bug that inhibited `Q.async` with implementations of the new\n   ES6 generators.\n - Fixes a bug with `nextTick` affecting Safari 6.0.5 the first time a\n   page loads when an `iframe` is involved.\n - Introduces `passByCopy`, `join`, and `race`.\n - Shows stack traces or error messages on the console, instead of\n   `Error` objects.\n - Elimintates wrapper methods for improved performance.\n - `Q.all` now propagates progress notifications of the form you might\n   expect of ES6 iterations, `{value, index}` where the `value` is the\n   progress notification from the promise at `index`.\n\n## 0.9.6\n\n - Fixes a bug in recognizing the difference between compatible Q\n   promises, and Q promises from before the implementation of \"inspect\".\n   The latter are now coerced.\n - Fixes an infinite asynchronous coercion cycle introduced by former\n   solution, in two independently sufficient ways.  1.) All promises\n   returned by makePromise now implement \"inspect\", albeit a default\n   that reports that the promise has an \"unknown\" state.  2.) The\n   implementation of \"then/when\" is now in \"then\" instead of \"when\", so\n   that the responsibility to \"coerce\" the given promise rests solely in\n   the \"when\" method and the \"then\" method may assume that \"this\" is a\n   promise of the right type.\n - Refactors `nextTick` to use an unrolled microtask within Q regardless\n   of how new ticks a requested. #316 @rkatic\n\n## 0.9.5\n\n - Introduces `inspect` for getting the state of a promise as\n   `{state: \"fulfilled\" | \"rejected\" | \"pending\", value | reason}`.\n - Introduces `allSettled` which produces an array of promises states\n   for the input promises once they have all \"settled\".  This is in\n   accordance with a discussion on Promises/A+ that \"settled\" refers to\n   a promise that is \"fulfilled\" or \"rejected\".  \"resolved\" refers to a\n   deferred promise that has been \"resolved\" to another promise,\n   \"sealing its fate\" to the fate of the successor promise.\n - Long stack traces are now off by default.  Set `Q.longStackSupport`\n   to true to enable long stack traces.\n - Long stack traces can now follow the entire asynchronous history of a\n   promise, not just a single jump.\n - Introduces `spawn` for an immediately invoked asychronous generator.\n   @jlongster\n - Support for *experimental* synonyms `mapply`, `mcall`, `nmapply`,\n   `nmcall` for method invocation.\n\n## 0.9.4\n\n - `isPromise` and `isPromiseAlike` now always returns a boolean\n   (even for falsy values). #284 @lfac-pt\n - Support for ES6 Generators in `async` #288 @andywingo\n - Clear duplicate promise rejections from dispatch methods #238 @SLaks\n - Unhandled rejection API #296 @domenic\n   `stopUnhandledRejectionTracking`, `getUnhandledReasons`,\n   `resetUnhandledRejections`.\n\n## 0.9.3\n\n - Add the ability to give `Q.timeout`'s errors a custom error message. #270\n   @jgrenon\n - Fix Q's call-stack busting behavior in Node.js 0.10, by switching from\n   `process.nextTick` to `setImmediate`. #254 #259\n - Fix Q's behavior when used with the Mocha test runner in the browser, since\n   Mocha introduces a fake `process` global without a `nextTick` property. #267\n - Fix some, but not all, cases wherein Q would give false positives in its\n   unhandled rejection detection (#252). A fix for other cases (#238) is\n   hopefully coming soon.\n - Made `Q.promise` throw early if given a non-function.\n\n## 0.9.2\n\n - Pass through progress notifications when using `timeout`. #229 @omares\n - Pass through progress notifications when using `delay`.\n - Fix `nbind` to actually bind the `thisArg`. #232 @davidpadbury\n\n## 0.9.1\n\n - Made the AMD detection compatible with the RequireJS optimizer's `namespace`\n   option. #225 @terinjokes\n - Fix side effects from `valueOf`, and thus from `isFulfilled`, `isRejected`,\n   and `isPending`. #226 @benjamn\n\n## 0.9.0\n\nThis release removes many layers of deprecated methods and brings Q closer to\nalignment with Mark Miller’s TC39 [strawman][] for concurrency. At the same\ntime, it fixes many bugs and adds a few features around error handling. Finally,\nit comes with an updated and comprehensive [API Reference][].\n\n[strawman]: http://wiki.ecmascript.org/doku.php?id=strawman:concurrency\n[API Reference]: https://github.com/kriskowal/q/wiki/API-Reference\n\n### API Cleanup\n\nThe following deprecated or undocumented methods have been removed.\nTheir replacements are listed here:\n\n<table>\n   <thead>\n      <tr>\n         <th>0.8.x method</th>\n         <th>0.9 replacement</th>\n      </tr>\n   </thead>\n   <tbody>\n      <tr>\n         <td><code>Q.ref</code></td>\n         <td><code>Q</code></td>\n      </tr>\n      <tr>\n         <td><code>call</code>, <code>apply</code>, <code>bind</code> (*)</td>\n         <td><code>fcall</code>/<code>invoke</code>, <code>fapply</code>/<code>post</code>, <code>fbind</code></td>\n      </tr>\n      <tr>\n         <td><code>ncall</code>, <code>napply</code> (*)</td>\n         <td><code>nfcall</code>/<code>ninvoke</code>, <code>nfapply</code>/<code>npost</code></td>\n      </tr>\n      <tr>\n         <td><code>end</code></td>\n         <td><code>done</code></td>\n      </tr>\n      <tr>\n         <td><code>put</code></td>\n         <td><code>set</code></td>\n      </tr>\n      <tr>\n         <td><code>node</code></td>\n         <td><code>nbind</code></td>\n      </tr>\n      <tr>\n         <td><code>nend</code></td>\n         <td><code>nodeify</code></td>\n      </tr>\n      <tr>\n         <td><code>isResolved</code></td>\n         <td><code>isPending</code></td>\n      </tr>\n      <tr>\n         <td><code>deferred.node</code></td>\n         <td><code>deferred.makeNodeResolver</code></td>\n      </tr>\n      <tr>\n         <td><code>Method</code>, <code>sender</code></td>\n         <td><code>dispatcher</code></td>\n      </tr>\n      <tr>\n         <td><code>send</code></td>\n         <td><code>dispatch</code></td>\n      </tr>\n      <tr>\n         <td><code>view</code>, <code>viewInfo</code></td>\n         <td>(none)</td>\n      </tr>\n   </tbody>\n</table>\n\n\n(*) Use of ``thisp`` is discouraged. For calling methods, use ``post`` or\n``invoke``.\n\n### Alignment with the Concurrency Strawman\n\n-   Q now exports a `Q(value)` function, an alias for `resolve`.\n    `Q.call`, `Q.apply`, and `Q.bind` were removed to make room for the\n    same methods on the function prototype.\n-   `invoke` has been aliased to `send` in all its forms.\n-   `post` with no method name acts like `fapply`.\n\n### Error Handling\n\n-   Long stack traces can be turned off by setting `Q.stackJumpLimit` to zero.\n    In the future, this property will be used to fine tune how many stack jumps\n    are retained in long stack traces; for now, anything nonzero is treated as\n    one (since Q only tracks one stack jump at the moment, see #144). #168\n-   In Node.js, if there are unhandled rejections when the process exits, they\n    are output to the console. #115\n\n### Other\n\n-   `delete` and `set` (née `put`) no longer have a fulfillment value.\n-   Q promises are no longer frozen, which\n    [helps with performance](http://code.google.com/p/v8/issues/detail?id=1858).\n-   `thenReject` is now included, as a counterpart to `thenResolve`.\n-   The included browser `nextTick` shim is now faster. #195 @rkatic.\n\n### Bug Fixes\n\n-   Q now works in Internet Explorer 10. #186 @ForbesLindesay\n-   `fbind` no longer hard-binds the returned function's `this` to `undefined`.\n    #202\n-   `Q.reject` no longer leaks memory. #148\n-   `npost` with no arguments now works. #207\n-   `allResolved` now works with non-Q promises (\"thenables\"). #179\n-   `keys` behavior is now correct even in browsers without native\n    `Object.keys`. #192 @rkatic\n-   `isRejected` and the `exception` property now work correctly if the\n    rejection reason is falsy. #198\n\n### Internals and Advanced\n\n-   The internal interface for a promise now uses\n    `dispatchPromise(resolve, op, operands)` instead of `sendPromise(op,\n    resolve, ...operands)`, which reduces the cases where Q needs to do\n    argument slicing.\n-   The internal protocol uses different operands. \"put\" is now \"set\".\n    \"del\" is now \"delete\". \"view\" and \"viewInfo\" have been removed.\n-   `Q.fulfill` has been added. It is distinct from `Q.resolve` in that\n    it does not pass promises through, nor coerces promises from other\n    systems. The promise becomes the fulfillment value. This is only\n    recommended for use when trying to fulfill a promise with an object that has\n    a `then` function that is at the same time not a promise.\n\n## 0.8.12\n- Treat foreign promises as unresolved in `Q.isFulfilled`; this lets `Q.all`\n  work on arrays containing foreign promises. #154\n- Fix minor incompliances with the [Promises/A+ spec][] and [test suite][]. #157\n  #158\n\n[Promises/A+ spec]: http://promises-aplus.github.com/promises-spec/\n[test suite]: https://github.com/promises-aplus/promises-tests\n\n## 0.8.11\n\n - Added ``nfcall``, ``nfapply``, and ``nfbind`` as ``thisp``-less versions of\n   ``ncall``, ``napply``, and ``nbind``. The latter are now deprecated. #142\n - Long stack traces no longer cause linearly-growing memory usage when chaining\n   promises together. #111\n - Inspecting ``error.stack`` in a rejection handler will now give a long stack\n   trace. #103\n - Fixed ``Q.timeout`` to clear its timeout handle when the promise is rejected;\n   previously, it kept the event loop alive until the timeout period expired.\n   #145 @dfilatov\n - Added `q/queue` module, which exports an infinite promise queue\n   constructor.\n\n## 0.8.10\n\n - Added ``done`` as a replacement for ``end``, taking the usual fulfillment,\n   rejection, and progress handlers. It's essentially equivalent to\n   ``then(f, r, p).end()``.\n - Added ``Q.onerror``, a settable error trap that you can use to get full stack\n   traces for uncaught errors. #94\n - Added ``thenResolve`` as a shortcut for returning a constant value once a\n   promise is fulfilled. #108 @ForbesLindesay\n - Various tweaks to progress notification, including propagation and\n   transformation of progress values and only forwarding a single progress\n   object.\n - Renamed ``nend`` to ``nodeify``. It no longer returns an always-fulfilled\n   promise when a Node callback is passed.\n - ``deferred.resolve`` and ``deferred.reject`` no longer (sometimes) return\n   ``deferred.promise``.\n - Fixed stack traces getting mangled if they hit ``end`` twice. #116 #121 @ef4\n - Fixed ``ninvoke`` and ``npost`` to work on promises for objects with Node\n   methods. #134\n - Fixed accidental coercion of objects with nontrivial ``valueOf`` methods,\n   like ``Date``s, by the promise's ``valueOf`` method. #135\n - Fixed ``spread`` not calling the passed rejection handler if given a rejected\n   promise.\n\n## 0.8.9\n\n - Added ``nend``\n - Added preliminary progress notification support, via\n   ``promise.then(onFulfilled, onRejected, onProgress)``,\n   ``promise.progress(onProgress)``, and ``deferred.notify(...progressData)``.\n - Made ``put`` and ``del`` return the object acted upon for easier chaining.\n   #84\n - Fixed coercion cycles with cooperating promises. #106\n\n## 0.8.7\n\n - Support [Montage Require](http://github.com/kriskowal/mr)\n\n## 0.8.6\n\n - Fixed ``npost`` and ``ninvoke`` to pass the correct ``thisp``. #74\n - Fixed various cases involving unorthodox rejection reasons. #73 #90\n   @ef4\n - Fixed double-resolving of misbehaved custom promises. #75\n - Sped up ``Q.all`` for arrays contain already-resolved promises or scalar\n   values. @ForbesLindesay\n - Made stack trace filtering work when concatenating assets. #93 @ef4\n - Added warnings for deprecated methods. @ForbesLindesay\n - Added ``.npmignore`` file so that dependent packages get a slimmer\n   ``node_modules`` directory.\n\n## 0.8.5\n\n - Added preliminary support for long traces (@domenic)\n - Added ``fapply``, ``fcall``, ``fbind`` for non-thisp\n   promised function calls.\n - Added ``return`` for async generators, where generators\n   are implemented.\n - Rejected promises now have an \"exception\" property.  If an object\n   isRejected(object), then object.valueOf().exception will\n   be the wrapped error.\n - Added Jasmine specifications\n - Support Internet Explorers 7–9 (with multiple bug fixes @domenic)\n - Support Firefox 12\n - Support Safari 5.1.5\n - Support Chrome 18\n\n## 0.8.4\n\n - WARNING: ``promise.timeout`` is now rejected with an ``Error`` object\n   and the message now includes the duration of the timeout in\n   miliseconds.  This doesn't constitute (in my opinion) a\n   backward-incompatibility since it is a change of an undocumented and\n   unspecified public behavior, but if you happened to depend on the\n   exception being a string, you will need to revise your code.\n - Added ``deferred.makeNodeResolver()`` to replace the more cryptic\n   ``deferred.node()`` method.\n - Added experimental ``Q.promise(maker(resolve, reject))`` to make a\n   promise inside a callback, such that thrown exceptions in the\n   callback are converted and the resolver and rejecter are arguments.\n   This is a shorthand for making a deferred directly and inspired by\n   @gozala’s stream constructor pattern and the Microsoft Windows Metro\n   Promise constructor interface.\n - Added experimental ``Q.begin()`` that is intended to kick off chains\n   of ``.then`` so that each of these can be reordered without having to\n   edit the new and former first step.\n\n## 0.8.3\n\n - Added ``isFulfilled``, ``isRejected``, and ``isResolved``\n   to the promise prototype.\n - Added ``allResolved`` for waiting for every promise to either be\n   fulfilled or rejected, without propagating an error. @utvara #53\n - Added ``Q.bind`` as a method to transform functions that\n   return and throw into promise-returning functions. See\n   [an example](https://gist.github.com/1782808). @domenic\n - Renamed ``node`` export to ``nbind``, and added ``napply`` to\n   complete the set. ``node`` remains as deprecated. @domenic #58\n - Renamed ``Method`` export to ``sender``.  ``Method``\n   remains as deprecated and will be removed in the next\n   major version since I expect it has very little usage.\n - Added browser console message indicating a live list of\n   unhandled errors.\n - Added support for ``msSetImmediate`` (IE10) or ``setImmediate``\n   (available via [polyfill](https://github.com/NobleJS/setImmediate))\n   as a browser-side ``nextTick`` implementation. #44 #50 #59\n - Stopped using the event-queue dependency, which was in place for\n   Narwhal support: now directly using ``process.nextTick``.\n - WARNING: EXPERIMENTAL: added ``finally`` alias for ``fin``, ``catch``\n   alias for ``fail``, ``try`` alias for ``call``, and ``delete`` alias\n   for ``del``.  These properties are enquoted in the library for\n   cross-browser compatibility, but may be used as property names in\n   modern engines.\n\n## 0.8.2\n\n - Deprecated ``ref`` in favor of ``resolve`` as recommended by\n   @domenic.\n - Update event-queue dependency.\n\n## 0.8.1\n\n - Fixed Opera bug. #35 @cadorn\n - Fixed ``Q.all([])`` #32 @domenic\n\n## 0.8.0\n\n - WARNING: ``enqueue`` removed.  Use ``nextTick`` instead.\n   This is more consistent with NodeJS and (subjectively)\n   more explicit and intuitive.\n - WARNING: ``def`` removed.  Use ``master`` instead.  The\n   term ``def`` was too confusing to new users.\n - WARNING: ``spy`` removed in favor of ``fin``.\n - WARNING: ``wait`` removed. Do ``all(args).get(0)`` instead.\n - WARNING: ``join`` removed. Do ``all(args).spread(callback)`` instead.\n - WARNING: Removed the ``Q`` function module.exports alias\n   for ``Q.ref``. It conflicts with ``Q.apply`` in weird\n   ways, making it uncallable.\n - Revised ``delay`` so that it accepts both ``(value,\n   timeout)`` and ``(timeout)`` variations based on\n   arguments length.\n - Added ``ref().spread(cb(...args))``, a variant of\n   ``then`` that spreads an array across multiple arguments.\n   Useful with ``all()``.\n - Added ``defer().node()`` Node callback generator.  The\n   callback accepts ``(error, value)`` or ``(error,\n   ...values)``.  For multiple value arguments, the\n   fulfillment value is an array, useful in conjunction with\n   ``spread``.\n - Added ``node`` and ``ncall``, both with the signature\n   ``(fun, thisp_opt, ...args)``.  The former is a decorator\n   and the latter calls immediately.  ``node`` optional\n   binds and partially applies.  ``ncall`` can bind and pass\n   arguments.\n\n## 0.7.2\n\n - Fixed thenable promise assimilation.\n\n## 0.7.1\n\n - Stopped shimming ``Array.prototype.reduce``. The\n   enumerable property has bad side-effects.  Libraries that\n   depend on this (for example, QQ) will need to be revised.\n\n## 0.7.0 - BACKWARD INCOMPATIBILITY\n\n - WARNING: Removed ``report`` and ``asap``\n - WARNING: The ``callback`` argument of the ``fin``\n   function no longer receives any arguments. Thus, it can\n   be used to call functions that should not receive\n   arguments on resolution.  Use ``when``, ``then``, or\n   ``fail`` if you need a value.\n - IMPORTANT: Fixed a bug in the use of ``MessageChannel``\n   for ``nextTick``.\n - Renamed ``enqueue`` to ``nextTick``.\n - Added experimental ``view`` and ``viewInfo`` for creating\n   views of promises either when or before they're\n   fulfilled.\n - Shims are now externally applied so subsequent scripts or\n   dependees can use them.\n - Improved minification results.\n - Improved readability.\n\n## 0.6.0 - BACKWARD INCOMPATIBILITY\n\n - WARNING: In practice, the implementation of ``spy`` and\n   the name ``fin`` were useful.  I've removed the old\n   ``fin`` implementation and renamed/aliased ``spy``.\n - The \"q\" module now exports its ``ref`` function as a \"Q\"\n   constructor, with module systems that support exports\n   assignment including NodeJS, RequireJS, and when used as\n   a ``<script>`` tag. Notably, strictly compliant CommonJS\n   does not support this, but UncommonJS does.\n - Added ``async`` decorator for generators that use yield\n   to \"trampoline\" promises. In engines that support\n   generators (SpiderMonkey), this will greatly reduce the\n   need for nested callbacks.\n - Made ``when`` chainable.\n - Made ``all`` chainable.\n\n## 0.5.3\n\n - Added ``all`` and refactored ``join`` and ``wait`` to use\n   it.  All of these will now reject at the earliest\n   rejection.\n\n## 0.5.2\n\n - Minor improvement to ``spy``; now waits for resolution of\n   callback promise.\n\n## 0.5.1\n\n - Made most Q API methods chainable on promise objects, and\n   turned the previous promise-methods of ``join``,\n   ``wait``, and ``report`` into Q API methods.\n - Added ``apply`` and ``call`` to the Q API, and ``apply``\n   as a promise handler.\n - Added ``fail``, ``fin``, and ``spy`` to Q and the promise\n   prototype for convenience when observing rejection,\n   fulfillment and rejection, or just observing without\n   affecting the resolution.\n - Renamed ``def`` (although ``def`` remains shimmed until\n   the next major release) to ``master``.\n - Switched to using ``MessageChannel`` for next tick task\n   enqueue in browsers that support it.\n\n## 0.5.0 - MINOR BACKWARD INCOMPATIBILITY\n\n - Exceptions are no longer reported when consumed.\n - Removed ``error`` from the API.  Since exceptions are\n   getting consumed, throwing them in an errback causes the\n   exception to silently disappear.  Use ``end``.\n - Added ``end`` as both an API method and a promise-chain\n   ending method.  It causes propagated rejections to be\n   thrown, which allows Node to write stack traces and\n   emit ``uncaughtException`` events, and browsers to\n   likewise emit ``onerror`` and log to the console.\n - Added ``join`` and ``wait`` as promise chain functions,\n   so you can wait for variadic promises, returning your own\n   promise back, or join variadic promises, resolving with a\n   callback that receives variadic fulfillment values.\n\n## 0.4.4\n\n - ``end`` no longer returns a promise. It is the end of the\n   promise chain.\n - Stopped reporting thrown exceptions in ``when`` callbacks\n   and errbacks.  These must be explicitly reported through\n   ``.end()``, ``.then(null, Q.error)``, or some other\n   mechanism.\n - Added ``report`` as an API method, which can be used as\n   an errback to report and propagate an error.\n - Added ``report`` as a promise-chain method, so an error\n   can be reported if it passes such a gate.\n\n## 0.4.3\n\n - Fixed ``<script>`` support that regressed with 0.4.2\n   because of \"use strict\" in the module system\n   multi-plexer.\n\n## 0.4.2\n\n - Added support for RequireJS (jburke)\n\n## 0.4.1\n\n - Added an \"end\" method to the promise prototype,\n   as a shorthand for waiting for the promise to\n   be resolved gracefully, and failing to do so,\n   to dump an error message.\n\n## 0.4.0 - BACKWARD INCOMPATIBLE*\n\n - *Removed the utility modules. NPM and Node no longer\n   expose any module except the main module.  These have\n   been moved and merged into the \"qq\" package.\n - *In a non-CommonJS browser, q.js can be used as a script.\n   It now creates a Q global variable.\n - Fixed thenable assimilation.\n - Fixed some issues with asap, when it resolves to\n   undefined, or throws an exception.\n\n## 0.3.0 - BACKWARD-INCOMPATIBLE\n\n - The `post` method has been reverted to its original\n   signature, as provided in Tyler Close's `ref_send` API.\n   That is, `post` accepts two arguments, the second of\n   which is an arbitrary object, but usually invocation\n   arguments as an `Array`.  To provide variadic arguments\n   to `post`, there is a new `invoke` function that posts\n   the variadic arguments to the value given in the first\n   argument.\n - The `defined` method has been moved from `q` to `q/util`\n   since it gets no use in practice but is still\n   theoretically useful.\n - The `Promise` constructor has been renamed to\n   `makePromise` to be consistent with the convention that\n   functions that do not require the `new` keyword to be\n   used as constructors have camelCase names.\n - The `isResolved` function has been renamed to\n   `isFulfilled`.  There is a new `isResolved` function that\n   indicates whether a value is not a promise or, if it is a\n   promise, whether it has been either fulfilled or\n   rejected.  The code has been revised to reflect this\n   nuance in terminology.\n\n## 0.2.10\n\n - Added `join` to `\"q/util\"` for variadically joining\n   multiple promises.\n\n## 0.2.9\n\n - The future-compatible `invoke` method has been added,\n   to replace `post`, since `post` will become backward-\n   incompatible in the next major release.\n - Exceptions thrown in the callbacks of a `when` call are\n   now emitted to Node's `\"uncaughtException\"` `process`\n   event in addition to being returned as a rejection reason.\n\n## 0.2.8\n\n - Exceptions thrown in the callbacks of a `when` call\n   are now consumed, warned, and transformed into\n   rejections of the promise returned by `when`.\n\n## 0.2.7\n\n - Fixed a minor bug in thenable assimilation, regressed\n   because of the change in the forwarding protocol.\n - Fixed behavior of \"q/util\" `deep` method on dates and\n   other primitives. Github issue #11.\n\n## 0.2.6\n\n - Thenables (objects with a \"then\" method) are accepted\n   and provided, bringing this implementation of Q\n   into conformance with Promises/A, B, and D.\n - Added `makePromise`, to replace the `Promise` function\n   eventually.\n - Rejections are now also duck-typed. A rejection is a\n   promise with a valueOf method that returns a rejection\n   descriptor. A rejection descriptor has a\n   \"promiseRejected\" property equal to \"true\" and a\n   \"reason\" property corresponding to the rejection reason.\n - Altered the `makePromise` API such that the `fallback`\n   method no longer receives a superfluous `resolved` method\n   after the `operator`.  The fallback method is responsible\n   only for returning a resolution.  This breaks an\n   undocumented API, so third-party API's depending on the\n   previous undocumented behavior may break.\n\n## 0.2.5\n\n - Changed promises into a duck-type such that multiple\n   instances of the Q module can exchange promise objects.\n   A promise is now defined as \"an object that implements the\n   `promiseSend(op, resolved, ...)` method and `valueOf`\".\n - Exceptions in promises are now captured and returned\n   as rejections.\n\n## 0.2.4\n\n - Fixed bug in `ref` that prevented `del` messages from\n   being received (gozala)\n - Fixed a conflict with FireFox 4; constructor property\n   is now read-only.\n\n## 0.2.3\n\n - Added `keys` message to promises and to the promise API.\n\n## 0.2.2\n\n - Added boilerplate to `q/queue` and `q/util`.\n - Fixed missing dependency to `q/queue`.\n\n## 0.2.1\n\n - The `resolve` and `reject` methods of `defer` objects now\n   return the resolution promise for convenience.\n - Added `q/util`, which provides `step`, `delay`, `shallow`,\n   `deep`, and three reduction orders.\n - Added `q/queue` module for a promise `Queue`.\n - Added `q-comm` to the list of compatible libraries.\n - Deprecated `defined` from `q`, with intent to move it to\n   `q/util`.\n\n## 0.2.0 - BACKWARD INCOMPATIBLE\n\n - Changed post(ref, name, args) to variadic\n   post(ref, name, ...args). BACKWARD INCOMPATIBLE\n - Added a def(value) method to annotate an object as being\n   necessarily a local value that cannot be serialized, such\n   that inter-process/worker/vat promise communication\n   libraries will send messages to it, but never send it\n   back.\n - Added a send(value, op, ...args) method to the public API, for\n   forwarding messages to a value or promise in a future turn.\n\n## 0.1.9\n\n - Added isRejected() for testing whether a value is a rejected\n   promise.  isResolved() retains the behavior of stating\n   that rejected promises are not resolved.\n\n## 0.1.8\n\n - Fixed isResolved(null) and isResolved(undefined) [issue #9]\n - Fixed a problem with the Object.create shim\n\n## 0.1.7\n\n - shimmed ES5 Object.create in addition to Object.freeze\n   for compatibility on non-ES5 engines (gozala)\n\n## 0.1.6\n\n - Q.isResolved added\n - promise.valueOf() now returns the value of resolved\n   and near values\n - asap retried\n - promises are frozen when possible\n\n## 0.1.5\n\n - fixed dependency list for Teleport (gozala)\n - all unit tests now pass (gozala)\n\n## 0.1.4\n\n - added support for Teleport as an engine (gozala)\n - simplified and updated methods for getting internal\n   print and enqueue functions universally (gozala)\n\n## 0.1.3\n\n - fixed erroneous link to the q module in package.json\n\n## 0.1.2\n\n - restructured for overlay style package compatibility\n\n## 0.1.0\n\n - removed asap because it was broken, probably down to the\n   philosophy.\n\n## 0.0.3\n\n - removed q-util\n - fixed asap so it returns a value if completed\n\n## 0.0.2\n\n - added q-util\n\n## 0.0.1\n\n - initial version\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.6884765625,
          "content": "\nFor pull requests:\n\n-   Be consistent with prevalent style and design decisions.\n-   Add a Jasmine spec to `specs/q-spec.js`.\n-   Use `npm test` to avoid regressions.\n-   Run tests in `q-spec/run.html` in as many supported browsers as you\n    can find the will to deal with.\n-   Do not build minified versions; we do this each release.\n-   If you would be so kind, add a note to `CHANGES.md` in an\n    appropriate section:\n\n    -   `Next Major Version` if it introduces backward incompatibilities\n        to code in the wild using documented features.\n    -   `Next Minor Version` if it adds a new feature.\n    -   `Next Patch Version` if it fixes a bug.\n\nFor releases:\n\n-   Run `npm test`.\n-   Run tests in `q-spec/run.html` in a representative sample of every\n    browser under the sun.\n-   Run `npm run cover` and make sure you're happy with the results.\n-   Run `npm run minify` and be sure to commit the resulting `q.min.js`.\n-   Note the Gzipped size output by the previous command, and update\n    `README.md` if it has changed to 1 significant digit.\n-   Stash any local changes.\n-   Update `CHANGES.md` to reflect all changes in the differences\n    between `HEAD` and the previous tagged version.  Give credit where\n    credit is due.\n-   Update `README.md` to address all new, non-experimental features.\n-   Update the API reference on the Wiki to reflect all non-experimental\n    features.\n-   Use `npm version major|minor|patch` to update `package.json`,\n    commit, and tag the new version.\n-   Use `npm publish` to send up a new release.\n-   Send an email to the q-continuum mailing list announcing the new\n    release and the notes from the change log.  This helps folks\n    maintaining other package ecosystems.\n\n"
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 0.3046875,
          "content": "\"use strict\";\n\nmodule.exports = function (grunt) {\n    grunt.loadNpmTasks(\"grunt-contrib-uglify\");\n\n    grunt.initConfig({\n        uglify: {\n            \"q.min.js\": [\"q.js\"],\n            options: {\n                report: \"gzip\"\n            }\n        }\n    });\n\n    grunt.registerTask(\"default\", [\"uglify\"]);\n};\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.06640625,
          "content": "Copyright 2009–2018 Kristopher Michael Kowal. All rights reserved.\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 25.8369140625,
          "content": "\n## Note\n\nPlease consider using [JavaScript promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) instead of Q. Native promises are faster, have better tooling support and are the future.\n\nWhen work on Q began, promises were an academic novelty in JavaScript, unlikely to be adopted much less popular, though obviously full of…promise. Callbacks dominated the landscape. Q aimed to introduce a technology to JavaScript that had been proven and vetted in languages like E and C♯. With four years of incubation, evangelism, education, and feedback, promises became part of the language. Every modern browser contains a built-in `Promise` implementation. Being able to influence the internet and working on a library used by millions of codebases was an exciting and humbling experience.\n\nQ isn't going anywhere. The code is still here and bugs will be fixed but further development has been unnecessary for many years. We encourage you to read the code and the explainers to glimpse into the history of the internet.\n\n# Q\n\n[![Build Status](https://secure.travis-ci.org/kriskowal/q.svg?branch=master)](http://travis-ci.org/kriskowal/q)\n[![CDNJS](https://img.shields.io/cdnjs/v/q.js.svg)](https://cdnjs.com/libraries/q.js)\n\n<a href=\"http://promises-aplus.github.com/promises-spec\">\n    <img src=\"http://kriskowal.github.io/q/q.png\" align=\"right\" alt=\"Q logo\" />\n</a>\n\nIf a function cannot return a value or throw an exception without\nblocking, it can return a promise instead.  A promise is an object\nthat represents the return value or the thrown exception that the\nfunction may eventually provide.  A promise can also be used as a\nproxy for a [remote object][Q-Connection] to overcome latency.\n\n[Q-Connection]: https://github.com/kriskowal/q-connection\n\nOn the first pass, promises can mitigate the “[Pyramid of\nDoom][POD]”: the situation where code marches to the right faster\nthan it marches forward.\n\n[POD]: http://calculist.org/blog/2011/12/14/why-coroutines-wont-work-on-the-web/\n\n```javascript\nstep1(function (value1) {\n    step2(value1, function(value2) {\n        step3(value2, function(value3) {\n            step4(value3, function(value4) {\n                // Do something with value4\n            });\n        });\n    });\n});\n```\n\nWith a promise library, you can flatten the pyramid.\n\n```javascript\nQ.fcall(promisedStep1)\n.then(promisedStep2)\n.then(promisedStep3)\n.then(promisedStep4)\n.then(function (value4) {\n    // Do something with value4\n})\n.catch(function (error) {\n    // Handle any error from all above steps\n})\n.done();\n```\n\nWith this approach, you also get implicit error propagation, just like `try`,\n`catch`, and `finally`.  An error in `promisedStep1` will flow all the way to\nthe `catch` function, where it’s caught and handled.  (Here `promisedStepN` is\na version of `stepN` that returns a promise.)\n\nThe callback approach is called an “inversion of control”.\nA function that accepts a callback instead of a return value\nis saying, “Don’t call me, I’ll call you.”.  Promises\n[un-invert][IOC] the inversion, cleanly separating the input\narguments from control flow arguments.  This simplifies the\nuse and creation of API’s, particularly variadic,\nrest and spread arguments.\n\n[IOC]: http://www.slideshare.net/domenicdenicola/callbacks-promises-and-coroutines-oh-my-the-evolution-of-asynchronicity-in-javascript\n\n\n## Getting Started\n\nThe Q module can be loaded as:\n\n-   A ``<script>`` tag (creating a ``Q`` global variable): ~2.5 KB minified and\n    gzipped.\n-   A Node.js and CommonJS module, available in [npm](https://npmjs.org/) as\n    the [q](https://npmjs.org/package/q) package\n-   An AMD module\n-   A [component](https://github.com/component/component) as ``microjs/q``\n-   Using [bower](http://bower.io/) as `q#^1.4.1`\n-   Using [NuGet](http://nuget.org/) as [Q](https://nuget.org/packages/q)\n\nQ can exchange promises with jQuery, Dojo, When.js, WinJS, and more.\n\n## Resources\n\nOur [wiki][] contains a number of useful resources, including:\n\n- A method-by-method [Q API reference][reference].\n- A growing [examples gallery][examples], showing how Q can be used to make\n  everything better. From XHR to database access to accessing the Flickr API,\n  Q is there for you.\n- There are many libraries that produce and consume Q promises for everything\n  from file system/database access or RPC to templating. For a list of some of\n  the more popular ones, see [Libraries][].\n- If you want materials that introduce the promise concept generally, and the\n  below tutorial isn't doing it for you, check out our collection of\n  [presentations, blog posts, and podcasts][resources].\n- A guide for those [coming from jQuery's `$.Deferred`][jquery].\n\nWe'd also love to have you join the Q-Continuum [mailing list][].\n\n[wiki]: https://github.com/kriskowal/q/wiki\n[reference]: https://github.com/kriskowal/q/wiki/API-Reference\n[examples]: https://github.com/kriskowal/q/wiki/Examples-Gallery\n[Libraries]: https://github.com/kriskowal/q/wiki/Libraries\n[resources]: https://github.com/kriskowal/q/wiki/General-Promise-Resources\n[jquery]: https://github.com/kriskowal/q/wiki/Coming-from-jQuery\n[mailing list]: https://groups.google.com/forum/#!forum/q-continuum\n\n\n## Tutorial\n\nPromises have a ``then`` method, which you can use to get the eventual\nreturn value (fulfillment) or thrown exception (rejection).\n\n```javascript\npromiseMeSomething()\n.then(function (value) {\n}, function (reason) {\n});\n```\n\nIf ``promiseMeSomething`` returns a promise that gets fulfilled later\nwith a return value, the first function (the fulfillment handler) will be\ncalled with the value.  However, if the ``promiseMeSomething`` function\ngets rejected later by a thrown exception, the second function (the\nrejection handler) will be called with the exception.\n\nNote that resolution of a promise is always asynchronous: that is, the\nfulfillment or rejection handler will always be called in the next turn of the\nevent loop (i.e. `process.nextTick` in Node). This gives you a nice\nguarantee when mentally tracing the flow of your code, namely that\n``then`` will always return before either handler is executed.\n\nIn this tutorial, we begin with how to consume and work with promises. We'll\ntalk about how to create them, and thus create functions like\n`promiseMeSomething` that return promises, [below](#the-beginning).\n\n\n### Propagation\n\nThe ``then`` method returns a promise, which in this example, I’m\nassigning to ``outputPromise``.\n\n```javascript\nvar outputPromise = getInputPromise()\n.then(function (input) {\n}, function (reason) {\n});\n```\n\nThe ``outputPromise`` variable becomes a new promise for the return\nvalue of either handler.  Since a function can only either return a\nvalue or throw an exception, only one handler will ever be called and it\nwill be responsible for resolving ``outputPromise``.\n\n-   If you return a value in a handler, ``outputPromise`` will get\n    fulfilled.\n\n-   If you throw an exception in a handler, ``outputPromise`` will get\n    rejected.\n\n-   If you return a **promise** in a handler, ``outputPromise`` will\n    “become” that promise.  Being able to become a new promise is useful\n    for managing delays, combining results, or recovering from errors.\n\nIf the ``getInputPromise()`` promise gets rejected and you omit the\nrejection handler, the **error** will go to ``outputPromise``:\n\n```javascript\nvar outputPromise = getInputPromise()\n.then(function (value) {\n});\n```\n\nIf the input promise gets fulfilled and you omit the fulfillment handler, the\n**value** will go to ``outputPromise``:\n\n```javascript\nvar outputPromise = getInputPromise()\n.then(null, function (error) {\n});\n```\n\nQ promises provide a ``fail`` shorthand for ``then`` when you are only\ninterested in handling the error:\n\n```javascript\nvar outputPromise = getInputPromise()\n.fail(function (error) {\n});\n```\n\nIf you are writing JavaScript for modern engines only or using\nCoffeeScript, you may use `catch` instead of `fail`.\n\nPromises also have a ``fin`` function that is like a ``finally`` clause.\nThe final handler gets called, with no arguments, when the promise\nreturned by ``getInputPromise()`` either returns a value or throws an\nerror.  The value returned or error thrown by ``getInputPromise()``\npasses directly to ``outputPromise`` unless the final handler fails, and\nmay be delayed if the final handler returns a promise.\n\n```javascript\nvar outputPromise = getInputPromise()\n.fin(function () {\n    // close files, database connections, stop servers, conclude tests\n});\n```\n\n-   If the handler returns a value, the value is ignored\n-   If the handler throws an error, the error passes to ``outputPromise``\n-   If the handler returns a promise, ``outputPromise`` gets postponed.  The\n    eventual value or error has the same effect as an immediate return\n    value or thrown error: a value would be ignored, an error would be\n    forwarded.\n\nIf you are writing JavaScript for modern engines only or using\nCoffeeScript, you may use `finally` instead of `fin`.\n\n### Chaining\n\nThere are two ways to chain promises.  You can chain promises either\ninside or outside handlers.  The next two examples are equivalent.\n\n```javascript\nreturn getUsername()\n.then(function (username) {\n    return getUser(username)\n    .then(function (user) {\n        // if we get here without an error,\n        // the value returned here\n        // or the exception thrown here\n        // resolves the promise returned\n        // by the first line\n    })\n});\n```\n\n```javascript\nreturn getUsername()\n.then(function (username) {\n    return getUser(username);\n})\n.then(function (user) {\n    // if we get here without an error,\n    // the value returned here\n    // or the exception thrown here\n    // resolves the promise returned\n    // by the first line\n});\n```\n\nThe only difference is nesting.  It’s useful to nest handlers if you\nneed to capture multiple input values in your closure.\n\n```javascript\nfunction authenticate() {\n    return getUsername()\n    .then(function (username) {\n        return getUser(username);\n    })\n    // chained because we will not need the user name in the next event\n    .then(function (user) {\n        return getPassword()\n        // nested because we need both user and password next\n        .then(function (password) {\n            if (user.passwordHash !== hash(password)) {\n                throw new Error(\"Can't authenticate\");\n            }\n        });\n    });\n}\n```\n\n\n### Combination\n\nYou can turn an array of promises into a promise for the whole,\nfulfilled array using ``all``.\n\n```javascript\nreturn Q.all([\n    eventualAdd(2, 2),\n    eventualAdd(10, 20)\n]);\n```\n\nIf you have a promise for an array, you can use ``spread`` as a\nreplacement for ``then``.  The ``spread`` function “spreads” the\nvalues over the arguments of the fulfillment handler.  The rejection handler\nwill get called at the first sign of failure.  That is, whichever of\nthe received promises fails first gets handled by the rejection handler.\n\n```javascript\nfunction eventualAdd(a, b) {\n    return Q.spread([a, b], function (a, b) {\n        return a + b;\n    })\n}\n```\n\nBut ``spread`` calls ``all`` initially, so you can skip it in chains.\n\n```javascript\nreturn getUsername()\n.then(function (username) {\n    return [username, getUser(username)];\n})\n.spread(function (username, user) {\n});\n```\n\nThe ``all`` function returns a promise for an array of values.  When this\npromise is fulfilled, the array contains the fulfillment values of the original\npromises, in the same order as those promises.  If one of the given promises\nis rejected, the returned promise is immediately rejected, not waiting for the\nrest of the batch.  If you want to wait for all of the promises to either be\nfulfilled or rejected, you can use ``allSettled``.\n\n```javascript\nQ.allSettled(promises)\n.then(function (results) {\n    results.forEach(function (result) {\n        if (result.state === \"fulfilled\") {\n            var value = result.value;\n        } else {\n            var reason = result.reason;\n        }\n    });\n});\n```\n\nThe ``any`` function accepts an array of promises and returns a promise that is\nfulfilled by the first given promise to be fulfilled, or rejected if all of the\ngiven promises are rejected.\n\n```javascript\nQ.any(promises)\n.then(function (first) {\n    // Any of the promises was fulfilled.\n}, function (error) {\n    // All of the promises were rejected.\n});\n```\n\n### Sequences\n\nIf you have a number of promise-producing functions that need\nto be run sequentially, you can of course do so manually:\n\n```javascript\nreturn foo(initialVal).then(bar).then(baz).then(qux);\n```\n\nHowever, if you want to run a dynamically constructed sequence of\nfunctions, you'll want something like this:\n\n```javascript\nvar funcs = [foo, bar, baz, qux];\n\nvar result = Q(initialVal);\nfuncs.forEach(function (f) {\n    result = result.then(f);\n});\nreturn result;\n```\n\nYou can make this slightly more compact using `reduce`:\n\n```javascript\nreturn funcs.reduce(function (soFar, f) {\n    return soFar.then(f);\n}, Q(initialVal));\n```\n\nOr, you could use the ultra-compact version:\n\n```javascript\nreturn funcs.reduce(Q.when, Q(initialVal));\n```\n\n### Handling Errors\n\nOne sometimes-unintuitive aspect of promises is that if you throw an\nexception in the fulfillment handler, it will not be caught by the error\nhandler.\n\n```javascript\nreturn foo()\n.then(function (value) {\n    throw new Error(\"Can't bar.\");\n}, function (error) {\n    // We only get here if \"foo\" fails\n});\n```\n\nTo see why this is, consider the parallel between promises and\n``try``/``catch``. We are ``try``-ing to execute ``foo()``: the error\nhandler represents a ``catch`` for ``foo()``, while the fulfillment handler\nrepresents code that happens *after* the ``try``/``catch`` block.\nThat code then needs its own ``try``/``catch`` block.\n\nIn terms of promises, this means chaining your rejection handler:\n\n```javascript\nreturn foo()\n.then(function (value) {\n    throw new Error(\"Can't bar.\");\n})\n.fail(function (error) {\n    // We get here with either foo's error or bar's error\n});\n```\n\n### Progress Notification\n\nIt's possible for promises to report their progress, e.g. for tasks that take a\nlong time like a file upload. Not all promises will implement progress\nnotifications, but for those that do, you can consume the progress values using\na third parameter to ``then``:\n\n```javascript\nreturn uploadFile()\n.then(function () {\n    // Success uploading the file\n}, function (err) {\n    // There was an error, and we get the reason for error\n}, function (progress) {\n    // We get notified of the upload's progress as it is executed\n});\n```\n\nLike `fail`, Q also provides a shorthand for progress callbacks\ncalled `progress`:\n\n```javascript\nreturn uploadFile().progress(function (progress) {\n    // We get notified of the upload's progress\n});\n```\n\n### The End\n\nWhen you get to the end of a chain of promises, you should either\nreturn the last promise or end the chain.  Since handlers catch\nerrors, it’s an unfortunate pattern that the exceptions can go\nunobserved.\n\nSo, either return it,\n\n```javascript\nreturn foo()\n.then(function () {\n    return \"bar\";\n});\n```\n\nOr, end it.\n\n```javascript\nfoo()\n.then(function () {\n    return \"bar\";\n})\n.done();\n```\n\nEnding a promise chain makes sure that, if an error doesn’t get\nhandled before the end, it will get rethrown and reported.\n\nThis is a stopgap. We are exploring ways to make unhandled errors\nvisible without any explicit handling.\n\n\n### The Beginning\n\nEverything above assumes you get a promise from somewhere else.  This\nis the common case.  Every once in a while, you will need to create a\npromise from scratch.\n\n#### Using ``Q.fcall``\n\nYou can create a promise from a value using ``Q.fcall``.  This returns a\npromise for 10.\n\n```javascript\nreturn Q.fcall(function () {\n    return 10;\n});\n```\n\nYou can also use ``fcall`` to get a promise for an exception.\n\n```javascript\nreturn Q.fcall(function () {\n    throw new Error(\"Can't do it\");\n});\n```\n\nAs the name implies, ``fcall`` can call functions, or even promised\nfunctions.  This uses the ``eventualAdd`` function above to add two\nnumbers.\n\n```javascript\nreturn Q.fcall(eventualAdd, 2, 2);\n```\n\n\n#### Using Deferreds\n\nIf you have to interface with asynchronous functions that are callback-based\ninstead of promise-based, Q provides a few shortcuts (like ``Q.nfcall`` and\nfriends). But much of the time, the solution will be to use *deferreds*.\n\n```javascript\nvar deferred = Q.defer();\nFS.readFile(\"foo.txt\", \"utf-8\", function (error, text) {\n    if (error) {\n        deferred.reject(new Error(error));\n    } else {\n        deferred.resolve(text);\n    }\n});\nreturn deferred.promise;\n```\n\nNote that a deferred can be resolved with a value or a promise.  The\n``reject`` function is a shorthand for resolving with a rejected\npromise.\n\n```javascript\n// this:\ndeferred.reject(new Error(\"Can't do it\"));\n\n// is shorthand for:\nvar rejection = Q.fcall(function () {\n    throw new Error(\"Can't do it\");\n});\ndeferred.resolve(rejection);\n```\n\nThis is a simplified implementation of ``Q.delay``.\n\n```javascript\nfunction delay(ms) {\n    var deferred = Q.defer();\n    setTimeout(deferred.resolve, ms);\n    return deferred.promise;\n}\n```\n\nThis is a simplified implementation of ``Q.timeout``\n\n```javascript\nfunction timeout(promise, ms) {\n    var deferred = Q.defer();\n    Q.when(promise, deferred.resolve);\n    delay(ms).then(function () {\n        deferred.reject(new Error(\"Timed out\"));\n    });\n    return deferred.promise;\n}\n```\n\nFinally, you can send a progress notification to the promise with\n``deferred.notify``.\n\nFor illustration, this is a wrapper for XML HTTP requests in the browser. Note\nthat a more [thorough][XHR] implementation would be in order in practice.\n\n[XHR]: https://github.com/montagejs/mr/blob/71e8df99bb4f0584985accd6f2801ef3015b9763/browser.js#L29-L73\n\n```javascript\nfunction requestOkText(url) {\n    var request = new XMLHttpRequest();\n    var deferred = Q.defer();\n\n    request.open(\"GET\", url, true);\n    request.onload = onload;\n    request.onerror = onerror;\n    request.onprogress = onprogress;\n    request.send();\n\n    function onload() {\n        if (request.status === 200) {\n            deferred.resolve(request.responseText);\n        } else {\n            deferred.reject(new Error(\"Status code was \" + request.status));\n        }\n    }\n\n    function onerror() {\n        deferred.reject(new Error(\"Can't XHR \" + JSON.stringify(url)));\n    }\n\n    function onprogress(event) {\n        deferred.notify(event.loaded / event.total);\n    }\n\n    return deferred.promise;\n}\n```\n\nBelow is an example of how to use this ``requestOkText`` function:\n\n```javascript\nrequestOkText(\"http://localhost:3000\")\n.then(function (responseText) {\n    // If the HTTP response returns 200 OK, log the response text.\n    console.log(responseText);\n}, function (error) {\n    // If there's an error or a non-200 status code, log the error.\n    console.error(error);\n}, function (progress) {\n    // Log the progress as it comes in.\n    console.log(\"Request progress: \" + Math.round(progress * 100) + \"%\");\n});\n```\n\n#### Using `Q.Promise`\n\nThis is an alternative promise-creation API that has the same power as\nthe deferred concept, but without introducing another conceptual entity.\n\nRewriting the `requestOkText` example above using `Q.Promise`:\n\n```javascript\nfunction requestOkText(url) {\n    return Q.Promise(function(resolve, reject, notify) {\n        var request = new XMLHttpRequest();\n\n        request.open(\"GET\", url, true);\n        request.onload = onload;\n        request.onerror = onerror;\n        request.onprogress = onprogress;\n        request.send();\n\n        function onload() {\n            if (request.status === 200) {\n                resolve(request.responseText);\n            } else {\n                reject(new Error(\"Status code was \" + request.status));\n            }\n        }\n\n        function onerror() {\n            reject(new Error(\"Can't XHR \" + JSON.stringify(url)));\n        }\n\n        function onprogress(event) {\n            notify(event.loaded / event.total);\n        }\n    });\n}\n```\n\nIf `requestOkText` were to throw an exception, the returned promise would be\nrejected with that thrown exception as the rejection reason.\n\n### The Middle\n\nIf you are using a function that may return a promise, but just might\nreturn a value if it doesn’t need to defer, you can use the “static”\nmethods of the Q library.\n\nThe ``when`` function is the static equivalent for ``then``.\n\n```javascript\nreturn Q.when(valueOrPromise, function (value) {\n}, function (error) {\n});\n```\n\nAll of the other methods on a promise have static analogs with the\nsame name.\n\nThe following are equivalent:\n\n```javascript\nreturn Q.all([a, b]);\n```\n\n```javascript\nreturn Q.fcall(function () {\n    return [a, b];\n})\n.all();\n```\n\nWhen working with promises provided by other libraries, you should\nconvert it to a Q promise.  Not all promise libraries make the same\nguarantees as Q and certainly don’t provide all of the same methods.\nMost libraries only provide a partially functional ``then`` method.\nThis thankfully is all we need to turn them into vibrant Q promises.\n\n```javascript\nreturn Q($.ajax(...))\n.then(function () {\n});\n```\n\nIf there is any chance that the promise you receive is not a Q promise\nas provided by your library, you should wrap it using a Q function.\nYou can even use ``Q.invoke`` as a shorthand.\n\n```javascript\nreturn Q.invoke($, 'ajax', ...)\n.then(function () {\n});\n```\n\n\n### Over the Wire\n\nA promise can serve as a proxy for another object, even a remote\nobject.  There are methods that allow you to optimistically manipulate\nproperties or call functions.  All of these interactions return\npromises, so they can be chained.\n\n```\ndirect manipulation         using a promise as a proxy\n--------------------------  -------------------------------\nvalue.foo                   promise.get(\"foo\")\nvalue.foo = value           promise.put(\"foo\", value)\ndelete value.foo            promise.del(\"foo\")\nvalue.foo(...args)          promise.post(\"foo\", [args])\nvalue.foo(...args)          promise.invoke(\"foo\", ...args)\nvalue(...args)              promise.fapply([args])\nvalue(...args)              promise.fcall(...args)\n```\n\nIf the promise is a proxy for a remote object, you can shave\nround-trips by using these functions instead of ``then``.  To take\nadvantage of promises for remote objects, check out [Q-Connection][].\n\n[Q-Connection]: https://github.com/kriskowal/q-connection\n\nEven in the case of non-remote objects, these methods can be used as\nshorthand for particularly-simple fulfillment handlers. For example, you\ncan replace\n\n```javascript\nreturn Q.fcall(function () {\n    return [{ foo: \"bar\" }, { foo: \"baz\" }];\n})\n.then(function (value) {\n    return value[0].foo;\n});\n```\n\nwith\n\n```javascript\nreturn Q.fcall(function () {\n    return [{ foo: \"bar\" }, { foo: \"baz\" }];\n})\n.get(0)\n.get(\"foo\");\n```\n\n\n### Adapting Node\n\nIf you're working with functions that make use of the Node.js callback pattern,\nwhere callbacks are in the form of `function(err, result)`, Q provides a few\nuseful utility functions for converting between them. The most straightforward\nare probably `Q.nfcall` and `Q.nfapply` (\"Node function call/apply\") for calling\nNode.js-style functions and getting back a promise:\n\n```javascript\nreturn Q.nfcall(FS.readFile, \"foo.txt\", \"utf-8\");\nreturn Q.nfapply(FS.readFile, [\"foo.txt\", \"utf-8\"]);\n```\n\nIf you are working with methods, instead of simple functions, you can easily\nrun in to the usual problems where passing a method to another function—like\n`Q.nfcall`—\"un-binds\" the method from its owner. To avoid this, you can either\nuse `Function.prototype.bind` or some nice shortcut methods we provide:\n\n```javascript\nreturn Q.ninvoke(redisClient, \"get\", \"user:1:id\");\nreturn Q.npost(redisClient, \"get\", [\"user:1:id\"]);\n```\n\nYou can also create reusable wrappers with `Q.denodeify` or `Q.nbind`:\n\n```javascript\nvar readFile = Q.denodeify(FS.readFile);\nreturn readFile(\"foo.txt\", \"utf-8\");\n\nvar redisClientGet = Q.nbind(redisClient.get, redisClient);\nreturn redisClientGet(\"user:1:id\");\n```\n\nFinally, if you're working with raw deferred objects, there is a\n`makeNodeResolver` method on deferreds that can be handy:\n\n```javascript\nvar deferred = Q.defer();\nFS.readFile(\"foo.txt\", \"utf-8\", deferred.makeNodeResolver());\nreturn deferred.promise;\n```\n\n### Long Stack Traces\n\nQ comes with optional support for “long stack traces,” wherein the `stack`\nproperty of `Error` rejection reasons is rewritten to be traced along\nasynchronous jumps instead of stopping at the most recent one. As an example:\n\n```js\nfunction theDepthsOfMyProgram() {\n  Q.delay(100).done(function explode() {\n    throw new Error(\"boo!\");\n  });\n}\n\ntheDepthsOfMyProgram();\n```\n\nusually would give a rather unhelpful stack trace looking something like\n\n```\nError: boo!\n    at explode (/path/to/test.js:3:11)\n    at _fulfilled (/path/to/test.js:q:54)\n    at resolvedValue.promiseDispatch.done (/path/to/q.js:823:30)\n    at makePromise.promise.promiseDispatch (/path/to/q.js:496:13)\n    at pending (/path/to/q.js:397:39)\n    at process.startup.processNextTick.process._tickCallback (node.js:244:9)\n```\n\nBut, if you turn this feature on by setting\n\n```js\nQ.longStackSupport = true;\n```\n\nthen the above code gives a nice stack trace to the tune of\n\n```\nError: boo!\n    at explode (/path/to/test.js:3:11)\nFrom previous event:\n    at theDepthsOfMyProgram (/path/to/test.js:2:16)\n    at Object.<anonymous> (/path/to/test.js:7:1)\n```\n\nNote how you can see the function that triggered the async operation in the\nstack trace! This is very helpful for debugging, as otherwise you end up getting\nonly the first line, plus a bunch of Q internals, with no sign of where the\noperation started.\n\nIn node.js, this feature can also be enabled through the Q_DEBUG environment\nvariable:\n\n```\nQ_DEBUG=1 node server.js\n```\n\nThis will enable long stack support in every instance of Q.\n\nThis feature does come with somewhat-serious performance and memory overhead,\nhowever. If you're working with lots of promises, or trying to scale a server\nto many users, you should probably keep it off. But in development, go for it!\n\n## Tests\n\nYou can view the results of the Q test suite [in your browser][tests]!\n\n[tests]: https://rawgithub.com/kriskowal/q/v1/spec/q-spec.html\n\n## License\n\nCopyright 2009–2017 Kristopher Michael Kowal and contributors\nMIT License (enclosed)\n\n"
        },
        {
          "name": "VERSIONS.md",
          "type": "blob",
          "size": 0.6552734375,
          "content": "<!-- vim:ts=4:sts=4:sw=4:et:tw=60 -->\n\nThis library has the following policy about versions.\n\n-   Presently, all planned versions have a major version number of 0.\n-   The minor version number increases for every backward-incompatible\n    change to a documented behavior.\n-   The patch version number increases for every added feature,\n    backward-incompatible changes to undocumented features, and\n    bug-fixes.\n\nUpon the release of a version 1.0.0, the strategy will be revised.\n\n-   The major version will increase for any backward-incompatible\n    changes.\n-   The minor version will increase for added features.\n-   The patch version will increase for bug-fixes.\n\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "design",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.798828125,
          "content": "{\n  \"name\": \"q\",\n  \"version\": \"1.5.1\",\n  \"description\": \"A library for promises (CommonJS/Promises/A,B,D)\",\n  \"homepage\": \"https://github.com/kriskowal/q\",\n  \"author\": \"Kris Kowal <kris@cixar.com> (https://github.com/kriskowal)\",\n  \"keywords\": [\n    \"q\",\n    \"promise\",\n    \"promises\",\n    \"promises-a\",\n    \"promises-aplus\",\n    \"deferred\",\n    \"future\",\n    \"async\",\n    \"flow control\",\n    \"fluent\",\n    \"browser\",\n    \"node\"\n  ],\n  \"contributors\": [\n    \"Kris Kowal <kris@cixar.com> (https://github.com/kriskowal)\",\n    \"Irakli Gozalishvili <rfobic@gmail.com> (http://jeditoolkit.com)\",\n    \"Domenic Denicola <domenic@domenicdenicola.com> (http://domenicdenicola.com)\"\n  ],\n  \"bugs\": {\n    \"mail\": \"kris@cixar.com\",\n    \"url\": \"http://github.com/kriskowal/q/issues\"\n  },\n  \"license\": \"MIT\",\n  \"main\": \"q.js\",\n  \"files\": [\n    \"LICENSE\",\n    \"q.js\",\n    \"queue.js\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/kriskowal/q.git\"\n  },\n  \"engines\": {\n    \"node\": \">=0.6.0\",\n    \"teleport\": \">=0.2.0\"\n  },\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"cover\": \"*\",\n    \"grunt\": \"~0.4.1\",\n    \"grunt-cli\": \"~0.1.9\",\n    \"grunt-contrib-uglify\": \"~0.9.1\",\n    \"jasmine-node\": \"1.11.0\",\n    \"jshint\": \"~2.1.9\",\n    \"matcha\": \"~0.2.0\",\n    \"opener\": \"*\",\n    \"promises-aplus-tests\": \"1.x\"\n  },\n  \"scripts\": {\n    \"test\": \"npm ls -s && jasmine-node spec && promises-aplus-tests spec/aplus-adapter && npm run -s lint\",\n    \"test-browser\": \"opener spec/q-spec.html\",\n    \"benchmark\": \"matcha\",\n    \"lint\": \"jshint q.js\",\n    \"cover\": \"cover run jasmine-node spec && cover report html && opener cover_html/index.html\",\n    \"minify\": \"grunt\",\n    \"prepublish\": \"grunt\"\n  },\n  \"overlay\": {\n    \"teleport\": {\n      \"dependencies\": {\n        \"system\": \">=0.0.4\"\n      }\n    }\n  },\n  \"directories\": {\n    \"test\": \"./spec\"\n  }\n}\n"
        },
        {
          "name": "q.js",
          "type": "blob",
          "size": 62.5107421875,
          "content": "// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2017 Kris Kowal under the terms of the MIT\n * license found at https://github.com/kriskowal/q/blob/v1/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n        // Prefer window over self for add-on scripts. Use self for\n        // non-windowed contexts.\n        var global = typeof window !== \"undefined\" ? window : self;\n\n        // Get the `window` object, save the previous Q global\n        // and initialize Q as a global.\n        var previousQ = global.Q;\n        global.Q = definition();\n\n        // Add a noConflict function so Q can be removed from the\n        // global namespace.\n        global.Q.noConflict = function () {\n            global.Q = previousQ;\n            return this;\n        };\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.toString()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {\n    obj[prop] = descriptor.value;\n    return obj;\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {\n                object_defineProperty(error, \"__minimumStackCounter__\", {value: p.stackCounter, configurable: true});\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        var stack = filterStackString(concatedStacks);\n        object_defineProperty(error, \"stack\", {value: stack, configurable: true});\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n/**\n * The counter is used to determine the stopping point for building\n * long stack traces. In makeStackTraceLong we walk backwards through\n * the linked list of promises, only stacks which were created before\n * the rejection are concatenated.\n */\nvar longStackCounter = 1;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n            promise.stackCounter = longStackCounter++;\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n\n        if (Q.longStackSupport && hasStacks) {\n            // Only hold a reference to the new promise if long stacks\n            // are enabled to reduce memory usage\n            promise.source = newPromise;\n        }\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Q can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable wherever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected(err) {\n            pendingCount--;\n            if (pendingCount === 0) {\n                var rejection = err || new Error(\"\" + err);\n\n                rejection.message = (\"Q can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected. Last error message: \" + rejection.message);\n\n                deferred.reject(rejection);\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    if (!callback || typeof callback.apply !== \"function\") {\n        throw new Error(\"Q can't apply finally callback\");\n    }\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    if (callback === undefined) {\n        throw new Error(\"Q can't wrap an undefined function\");\n    }\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n"
        },
        {
          "name": "q.png",
          "type": "blob",
          "size": 33.3193359375,
          "content": null
        },
        {
          "name": "q.svg",
          "type": "blob",
          "size": 7.615234375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"157.5\"\n   height=\"180\"\n   id=\"svg2\"\n   version=\"1.1\"\n   inkscape:version=\"0.48.1 r9760\"\n   sodipodi:docname=\"q.svg\"\n   inkscape:export-filename=\"/home/kris/art/q.png\"\n   inkscape:export-xdpi=\"51.200001\"\n   inkscape:export-ydpi=\"51.200001\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"2\"\n     inkscape:cx=\"62.864072\"\n     inkscape:cy=\"167.31214\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     showgrid=\"false\"\n     units=\"in\"\n     inkscape:window-width=\"1680\"\n     inkscape:window-height=\"973\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"24\"\n     inkscape:window-maximized=\"1\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\"\n     transform=\"translate(0,-872.3622)\">\n    <path\n       sodipodi:type=\"star\"\n       style=\"fill:#f9df34;fill-opacity:1;stroke:none;opacity:1\"\n       id=\"path3833\"\n       sodipodi:sides=\"6\"\n       sodipodi:cx=\"1118\"\n       sodipodi:cy=\"456.36218\"\n       sodipodi:r1=\"277.59683\"\n       sodipodi:r2=\"240.40591\"\n       sodipodi:arg1=\"0.52359878\"\n       sodipodi:arg2=\"1.0471976\"\n       inkscape:flatsided=\"true\"\n       inkscape:rounded=\"0\"\n       inkscape:randomized=\"0\"\n       d=\"M 1358.4059,595.1606 1118,733.95901 877.59409,595.1606 l 0,-277.59683 L 1118,178.76535 1358.4059,317.56377 z\"\n       transform=\"matrix(0.28609737,0,0,0.28609737,-241.10686,831.79819)\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path3840\"\n       d=\"m 23.150536,930.17141 c 0.02584,21.44054 0.05616,42.88112 0.0266,64.32167 18.544384,10.71192 37.074475,21.44862 55.599461,32.19412 18.524303,-10.7114 37.048573,-21.4227 55.572863,-32.13419 -0.0259,-21.44055 -0.0561,-42.88112 -0.0266,-64.32168 C 115.77802,919.52027 97.24878,908.78212 78.723431,898.0372 60.199152,908.74861 41.674869,919.46002 23.150565,930.17141 z m 55.792247,-8.92728 c 11.80936,6.85273 23.635797,13.68573 35.470907,20.49746 -0.004,13.75374 -0.009,27.50747 -0.0132,41.2612 -3.04307,1.75007 -6.08198,3.50751 -9.12033,5.26584 -6.092341,-10.55513 -12.176786,-21.11483 -18.260622,-31.67487 -5.796593,3.34635 -11.593186,6.69268 -17.389782,10.03903 6.083829,10.56004 12.168276,21.11974 18.260615,31.67487 -3.035798,1.77164 -6.093381,3.50564 -9.120329,5.29244 -11.883066,-6.88841 -23.778192,-13.75616 -35.676998,-20.61727 0.0022,-13.75374 0.0045,-27.50747 0.0066,-41.2612 11.884425,-6.85251 23.763957,-13.71376 35.630451,-20.59733 l 0.185407,0.10445 0.02732,0.0154 z\"\n       style=\"fill:#b7a634;fill-opacity:1;stroke:#524839;stroke-width:5.37970828999999995;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;opacity:0.96\" />\n    <path\n       style=\"fill:#f9df34;fill-opacity:1;stroke:#524839;stroke-width:5.54999999999999982;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"m 3.9712996,919.13021 c 0.034761,28.79449 0.07553,57.58902 0.035762,86.38349 24.9413394,14.3861 49.8634534,28.8054 74.7787004,43.2365 24.914328,-14.3853 49.828638,-28.7707 74.742938,-43.156 -0.0347,-28.79449 -0.0755,-57.58901 -0.0358,-86.38352 -24.942,-14.38487 -49.86297,-28.80613 -74.778703,-43.23647 -24.914303,14.38534 -49.828606,28.77067 -74.7429375,43.156 z M 79.00929,907.14095 c 15.883039,9.20316 31.78905,18.37981 47.70674,27.52793 -0.006,18.47116 -0.0123,36.94232 -0.0177,55.41348 -4.0928,2.35032 -8.17998,4.71056 -12.26643,7.07197 -8.19391,-14.17545 -16.377211,-28.35704 -24.559682,-42.5391 -7.796153,4.49411 -15.592307,8.98822 -23.38846,13.48234 8.182471,14.18206 16.365771,28.36365 24.559685,42.53913 -4.08301,2.3792 -8.195316,4.7081 -12.266424,7.1077 -15.982172,-9.2511 -31.980565,-18.47444 -47.983908,-27.68886 0.0029,-18.47116 0.006,-36.94232 0.0089,-55.41348 15.984003,-9.20286 31.961425,-18.41747 47.92131,-27.66204 l 0.249362,0.14026 0.03674,0.0207 z\"\n       id=\"path2993\"\n       inkscape:connector-curvature=\"0\" />\n    <g\n       id=\"g4862\"\n       transform=\"matrix(0.11775097,-0.06798356,0.06798356,0.11775097,5.1642661,919.0661)\">\n\t<path\n   style=\"fill:#524739\"\n   inkscape:connector-curvature=\"0\"\n   d=\"m 217.503,388.691 v 14.757 h -16.155 v 39.766 c 0,3.729 0.621,6.214 1.864,7.457 1.243,1.242 3.728,1.863 7.456,1.863 1.243,0 2.432,-0.051 3.573,-0.155 1.138,-0.102 2.226,-0.257 3.262,-0.466 V 469 c -1.864,0.311 -3.937,0.517 -6.213,0.621 -2.279,0.103 -4.505,0.155 -6.68,0.155 -3.417,0 -6.655,-0.232 -9.708,-0.698 -3.056,-0.467 -5.747,-1.372 -8.077,-2.719 -2.33,-1.345 -4.17,-3.262 -5.515,-5.747 -1.347,-2.485 -2.019,-5.748 -2.019,-9.786 v -47.378 h -13.359 v -14.757 h 13.359 v -24.077 h 22.058 v 24.077 h 16.154 z\"\n   id=\"path4864\" />\n\n\t<path\n   style=\"fill:#524739\"\n   inkscape:connector-curvature=\"0\"\n   d=\"m 248.569,358.091 v 41.785 h 0.466 c 2.796,-4.66 6.369,-8.051 10.718,-10.175 4.349,-2.121 8.594,-3.185 12.737,-3.185 5.903,0 10.742,0.804 14.524,2.408 3.778,1.606 6.757,3.832 8.932,6.68 2.175,2.849 3.701,6.317 4.582,10.407 0.879,4.092 1.32,8.621 1.32,13.592 V 469 H 279.79 v -45.357 c 0,-6.627 -1.036,-11.573 -3.106,-14.835 -2.073,-3.262 -5.747,-4.894 -11.029,-4.894 -6.007,0 -10.356,1.787 -13.048,5.359 -2.694,3.573 -4.039,9.451 -4.039,17.631 V 469 H 226.51 V 358.091 h 22.059 z\"\n   id=\"path4866\" />\n\n\t<path\n   style=\"fill:#524739\"\n   inkscape:connector-curvature=\"0\"\n   d=\"m 334.467,449.738 c 3.313,3.211 8.077,4.815 14.291,4.815 4.451,0 8.283,-1.111 11.495,-3.34 3.208,-2.226 5.177,-4.582 5.902,-7.067 h 19.417 c -3.106,9.631 -7.871,16.519 -14.291,20.659 -6.422,4.144 -14.188,6.214 -23.3,6.214 -6.318,0 -12.015,-1.01 -17.087,-3.029 -5.075,-2.02 -9.374,-4.893 -12.894,-8.621 -3.521,-3.728 -6.24,-8.18 -8.154,-13.358 -1.918,-5.178 -2.874,-10.874 -2.874,-17.087 0,-6.005 0.982,-11.597 2.951,-16.776 1.966,-5.177 4.762,-9.655 8.388,-13.437 3.624,-3.779 7.947,-6.757 12.971,-8.932 5.021,-2.175 10.587,-3.263 16.699,-3.263 6.834,0 12.788,1.32 17.863,3.962 5.072,2.641 9.242,6.188 12.504,10.64 3.263,4.454 5.617,9.529 7.068,15.224 1.449,5.696 1.966,11.649 1.553,17.863 H 329.03 c 0.311,7.146 2.121,12.325 5.437,15.533 z m 24.931,-42.251 c -2.641,-2.898 -6.655,-4.35 -12.039,-4.35 -3.521,0 -6.446,0.598 -8.776,1.786 -2.33,1.192 -4.193,2.668 -5.592,4.428 -1.398,1.762 -2.384,3.626 -2.951,5.592 -0.57,1.969 -0.908,3.728 -1.01,5.281 h 35.882 c -1.036,-5.591 -2.873,-9.836 -5.514,-12.737 z\"\n   id=\"path4868\" />\n\n\t<path\n   style=\"fill:#524739\"\n   inkscape:connector-curvature=\"0\"\n   d=\"m 413.221,388.691 v 11.185 h 0.466 c 2.796,-4.66 6.42,-8.051 10.874,-10.175 4.451,-2.121 9.009,-3.185 13.669,-3.185 5.903,0 10.742,0.804 14.524,2.408 3.778,1.606 6.757,3.832 8.932,6.68 2.175,2.849 3.701,6.317 4.582,10.407 0.879,4.092 1.32,8.621 1.32,13.592 V 469 H 445.53 v -45.357 c 0,-6.627 -1.036,-11.573 -3.106,-14.835 -2.073,-3.262 -5.747,-4.894 -11.029,-4.894 -6.007,0 -10.356,1.787 -13.048,5.359 -2.694,3.573 -4.039,9.451 -4.039,17.631 V 469 H 392.25 v -80.309 h 20.971 z\"\n   id=\"path4870\" />\n\n</g>\n  </g>\n</svg>\n"
        },
        {
          "name": "queue.js",
          "type": "blob",
          "size": 0.9189453125,
          "content": "\nvar Q = require(\"./q\");\n\nmodule.exports = Queue;\nfunction Queue() {\n    var ends = Q.defer();\n    var closed = Q.defer();\n    return {\n        put: function (value) {\n            var next = Q.defer();\n            ends.resolve({\n                head: value,\n                tail: next.promise\n            });\n            ends.resolve = next.resolve;\n        },\n        get: function () {\n            var result = ends.promise.get(\"head\");\n            ends.promise = ends.promise.get(\"tail\");\n            return result.fail(function (error) {\n                closed.resolve(error);\n                throw error;\n            });\n        },\n        closed: closed.promise,\n        close: function (error) {\n            error = error || new Error(\"Can't get value from closed queue\");\n            var end = {head: Q.reject(error)};\n            end.tail = end;\n            ends.resolve(end);\n            return closed.promise;\n        }\n    };\n}\n\n"
        },
        {
          "name": "ref_send.md",
          "type": "blob",
          "size": 1.173828125,
          "content": "\nThis API varies from Tyler Closes ref_send in the\nfollowing ways:\n\n*   Promises can be resolved to function values.\n*   Promises can be resolved to null or undefined.\n*   Promises are distinguishable from arbitrary functions.\n*   The promise API is abstracted with a Promise constructor\n    that accepts a descriptor that receives all of the\n    messages forwarded to that promise and handles the\n    common patterns for message receivers.  The promise\n    constructor also takes optional fallback and valueOf\n    methods which handle the cases for missing handlers on\n    the descriptor (rejection by default) and the valueOf\n    call (which returns the promise itself by default)\n*   near(ref) has been changed to Promise.valueOf() in\n    keeping with JavaScript's existing Object.valueOf().\n*   post(promise, name, args) has been altered to a variadic\n    post(promise, name ...args)\n*   variadic arguments are used internally where\n    applicable. However, I have not altered the Q.post()\n    API to expand variadic arguments since Tyler Close\n    informed the CommonJS list that it would restrict\n    usage patterns for web_send, posting arbitrary JSON\n    objects as the \"arguments\" over HTTP.\n\n"
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}