{
  "metadata": {
    "timestamp": 1736563409248,
    "page": 423,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tsayen/dom-to-image",
      "stars": 10460,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01953125,
          "content": "dist/*.min.js -diff\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0185546875,
          "content": "*.iml\n.tags\n.tags*\n"
        },
        {
          "name": ".jsbeautifyrc",
          "type": "blob",
          "size": 1.2265625,
          "content": "{\n    \"html\": {\n        \"brace_style\": \"collapse\",\n        \"end_with_newline\": true,\n        \"indent_char\": \" \",\n        \"indent_scripts\": \"keep\",\n        \"indent_size\": 4,\n        \"preserve_newlines\": true,\n        \"max_preserve_newlines\": 1,\n        \"wrap_attributes\": \"auto\",\n        \"wrap_line_length\": 100\n    },\n    \"js\": {\n        \"allowed_file_extensions\": [\"js\", \"jsx\", \"json\", \"jsbeautifyrc\"],\n        \"brace_style\": \"collapse-preserve-inline\",\n        \"break_chained_methods\": false,\n        \"comma_first\": false,\n        \"e4x\": false,\n        \"end_with_newline\": true,\n        \"indent_char\": \" \",\n        \"indent_level\": 0,\n        \"indent_size\": 4,\n        \"jslint_happy\": false,\n        \"keep_array_indentation\": false,\n        \"keep_function_indentation\": false,\n        \"max_preserve_newlines\": 0,\n        \"preserve_newlines\": true,\n        \"space_in_empty_paren\": false,\n        \"space_in_paren\": false\n    },\n    \"css\": {\n        \"allowed_file_extensions\": [\"css\", \"scss\", \"sass\", \"less\"],\n        \"end_with_newline\": true,\n        \"indent_char\": \" \",\n        \"indent_size\": 4,\n        \"newline_between_rules\": true,\n        \"selector_separator\": \" \",\n        \"selector_separator_newline\": false,\n        \"preserve_newlines\": true\n    }\n}"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 0.103515625,
          "content": "{\n    \"eqeqeq\": true,\n    \"immed\": true,\n    \"newcap\": true,\n    \"unused\": \"strict\",\n    \"esnext\": true\n}\n"
        },
        {
          "name": ".stylelintrc",
          "type": "blob",
          "size": 0.0478515625,
          "content": "{\n    \"rules\": {\n        \"indentation\": 4\n    }\n}"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.26171875,
          "content": "dist: trusty\naddons:\n    firefox: \"49.0\"\nlanguage: node_js\nbefore_install:\n    - sudo apt-get update -q\n    - sudo apt-get install chromium-browser -y\nbefore_script:\n    - export CHROME_BIN=chromium-browser\n    - export DISPLAY=:99.0\n    - sh -e /etc/init.d/xvfb start"
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 1.1357421875,
          "content": "module.exports = function (grunt) {\n\n    grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n        jshint: {\n            files: ['Gruntfile.js', 'src/**/*.js', 'spec/**/*.js'],\n            options: {\n                jshintrc: true\n            }\n        },\n        karma: {\n            unit: {\n                configFile: 'karma.conf.js',\n                background: false,\n                singleRun: true\n            }\n        },\n        uglify: {\n            options: {\n                banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"dd-mm-yyyy\") %> */\\n'\n            },\n            dist: {\n                files: {\n                    'dist/<%= pkg.name %>.min.js': ['src/dom-to-image.js']\n                }\n            }\n        },\n        watch: {\n            files: ['<%= jshint.files %>'],\n            tasks: ['test']\n        }\n    });\n\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n    grunt.loadNpmTasks('grunt-karma');\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n    grunt.loadNpmTasks('grunt-contrib-watch');\n\n    grunt.registerTask('test', ['karma']);\n    grunt.registerTask('default', ['jshint', 'test', 'uglify']);\n};\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.12890625,
          "content": "The MIT License (MIT)\n\nCopyright 2015 Anatolii Saienko\nhttps://github.com/tsayen\n\nCopyright 2012 Paul Bakaus\nhttp://paulbakaus.com/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.4912109375,
          "content": "# DOM to Image\n\n[![Build Status](https://travis-ci.org/tsayen/dom-to-image.svg?branch=master)](https://travis-ci.org/tsayen/dom-to-image)\n\n## What is it\n\n**dom-to-image** is a library which can turn arbitrary DOM node into\na vector (SVG) or raster (PNG or JPEG) image, written in JavaScript. It's\nbased on [domvas by Paul Bakaus](https://github.com/pbakaus/domvas)\nand has been completely rewritten, with some bugs fixed and some new\nfeatures (like web font and image support) added.\n\n## Installation\n\n### NPM\n\n`npm install dom-to-image`\n\nThen load\n\n```javascript\n/* in ES 6 */\nimport domtoimage from 'dom-to-image';\n/* in ES 5 */\nvar domtoimage = require('dom-to-image');\n```\n\n### Bower\n\n`bower install dom-to-image`\n\nInclude either `src/dom-to-image.js` or `dist/dom-to-image.min.js` in your page\nand it will make the `domtoimage` variable available in the global scope.\n\n```html\n<script src=\"path/to/dom-to-image.min.js\" />\n<script>\n  domtoimage.toPng(node)\n  //...\n</script>\n```\n\n## Usage\n\nAll the top level functions accept DOM node and rendering options,\nand return promises, which are fulfilled with corresponding data URLs.  \nGet a PNG image base64-encoded data URL and display right away:\n\n```javascript\nvar node = document.getElementById('my-node');\n\ndomtoimage.toPng(node)\n    .then(function (dataUrl) {\n        var img = new Image();\n        img.src = dataUrl;\n        document.body.appendChild(img);\n    })\n    .catch(function (error) {\n        console.error('oops, something went wrong!', error);\n    });\n```\n\nGet a PNG image blob and download it (using [FileSaver](https://github.com/eligrey/FileSaver.js/),\nfor example):\n\n```javascript\ndomtoimage.toBlob(document.getElementById('my-node'))\n    .then(function (blob) {\n        window.saveAs(blob, 'my-node.png');\n    });\n```\n\nSave and download a compressed JPEG image:\n\n```javascript\ndomtoimage.toJpeg(document.getElementById('my-node'), { quality: 0.95 })\n    .then(function (dataUrl) {\n        var link = document.createElement('a');\n        link.download = 'my-image-name.jpeg';\n        link.href = dataUrl;\n        link.click();\n    });\n```\n\nGet an SVG data URL, but filter out all the `<i>` elements:\n\n```javascript\nfunction filter (node) {\n    return (node.tagName !== 'i');\n}\n\ndomtoimage.toSvg(document.getElementById('my-node'), {filter: filter})\n    .then(function (dataUrl) {\n        /* do something */\n    });\n```\n\nGet the raw pixel data as a [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\nwith every 4 array elements representing the RGBA data of a pixel:\n\n```javascript\nvar node = document.getElementById('my-node');\n\ndomtoimage.toPixelData(node)\n    .then(function (pixels) {\n        for (var y = 0; y < node.scrollHeight; ++y) {\n          for (var x = 0; x < node.scrollWidth; ++x) {\n            pixelAtXYOffset = (4 * y * node.scrollHeight) + (4 * x);\n            /* pixelAtXY is a Uint8Array[4] containing RGBA values of the pixel at (x, y) in the range 0..255 */\n            pixelAtXY = pixels.slice(pixelAtXYOffset, pixelAtXYOffset + 4);\n          }\n        }\n    });\n```\n\n* * *\n\n_All the functions under `impl` are not public API and are exposed only\nfor unit testing._\n\n* * *\n\n### Rendering options\n\n#### filter\n\nA function taking DOM node as argument. Should return true if passed node\nshould be included in the output (excluding node means excluding it's\nchildren as well). Not called on the root node.\n\n#### bgcolor\n\nA string value for the background color, any valid CSS color value.\n\n#### height, width\n\nHeight and width in pixels to be applied to node before rendering.\n\n#### style\n\nAn object whose properties to be copied to node's style before rendering.\nYou might want to check [this reference](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference)\nfor JavaScript names of CSS properties.\n\n#### quality\n\nA number between 0 and 1 indicating image quality (e.g. 0.92 => 92%) of the\nJPEG image. Defaults to 1.0 (100%)\n\n#### cacheBust\n\nSet to true to append the current time as a query string to URL requests to enable cache busting. Defaults to false\n\n#### imagePlaceholder\n\nA data URL for a placeholder image that will be used when fetching an image fails. Defaults to undefined and will throw an error on failed images\n\n## Browsers\n\nIt's tested on latest Chrome and Firefox (49 and 45 respectively at the time\nof writing), with Chrome performing  significantly better on big DOM trees,\npossibly due to it's more performant SVG support, and the fact that it supports\n `CSSStyleDeclaration.cssText` property.  \n\n_Internet Explorer is not (and will not be) supported, as it does not support\nSVG `<foreignObject>` tag_  \n\n_Safari [is not supported](https://github.com/tsayen/dom-to-image/issues/27), as it uses a stricter security model on `<foreignObject`> tag. Suggested workaround is to use `toSvg` and render on the server._`\n\n## Dependencies\n\n### Source\n\nOnly standard lib is currently used, but make sure your browser supports:  \n\n-   [Promise](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise)  \n-   SVG `<foreignObject>` tag\n\n### Tests\n\nMost importantly, tests depend on:\n\n-   [js-imagediff](https://github.com/HumbleSoftware/js-imagediff),\n    to compare rendered and control images\n\n-   [ocrad.js](https://github.com/antimatter15/ocrad.js), for the\n    parts when you can't compare images (due to the browser\n    rendering differences) and just have to test whether the text is rendered\n\n## How it works\n\nThere might some day exist (or maybe already exists?) a simple and standard\nway of exporting parts of the HTML to image (and then this script can only\nserve as an evidence of all the hoops I had to jump through in order to get\nsuch obvious thing done) but I haven't found one so far.  \n\nThis library uses a feature of SVG that allows having arbitrary HTML content\ninside of the `<foreignObject>` tag. So, in order to render that DOM node\nfor you, following steps are taken:  \n\n1.  Clone the original DOM node recursively\n\n2.  Compute the style for the node and each sub-node and copy it to\n    corresponding clone\n\n    -   and don't forget to recreate pseudo-elements, as they are not\n        cloned in any way, of course\n\n3.  Embed web fonts\n\n    -   find all the `@font-face` declarations that might represent web fonts\n\n    -   parse file URLs, download corresponding files\n\n    -   base64-encode and inline content as `data:` URLs\n\n    -   concatenate all the processed CSS rules and put them into one `<style>`\n        element, then attach it to the clone\n\n4.  Embed images\n\n    -   embed image URLs in `<img>` elements\n\n    -   inline images used in `background` CSS property, in a fashion similar to\n        fonts\n\n5.  Serialize the cloned node to XML\n\n6.  Wrap XML into the `<foreignObject>` tag, then into the SVG, then make it a\n    data URL\n\n7.  Optionally, to get PNG content or raw pixel data as a Uint8Array, create an\n    Image element with the SVG as a source, and render it on an off-screen\n    canvas, that you have also created, then read the content from the canvas\n\n8.  Done!  \n\n## Things to watch out for\n\n-   if the DOM node you want to render includes a `<canvas>` element with\n    something drawn on it, it should be handled fine, unless the canvas is\n    [tainted](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image) -\n    in this case rendering will rather not succeed.  \n\n-   at the time of writing, Firefox has a problem with some external stylesheets\n    (see issue #13). In such case, the error will be caught and logged.  \n\n## Authors\n\nAnatolii Saienko, Paul Bakaus (original idea)\n\n## License\n\nMIT\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.640625,
          "content": "{\n  \"name\": \"dom-to-image\",\n  \"version\": \"2.6.0\",\n  \"homepage\": \"https://github.com/tsayen/dom-to-image\",\n  \"authors\": [\n    \"Anatolii Saienko <anatoly.sayenko@gmail.com>\"\n  ],\n  \"description\": \"Generates an image from a DOM node using HTML5 canvas and SVG\",\n  \"main\": \"src/dom-to-image.js\",\n  \"moduleType\": [\n    \"globals\"\n  ],\n  \"keywords\": [\n    \"dom\",\n    \"image\",\n    \"raster\",\n    \"render\",\n    \"html\",\n    \"canvas\",\n    \"svg\"\n  ],\n  \"license\": \"MIT\",\n  \"ignore\": [\n    \"**/.*\",\n    \"node_modules\",\n    \"bower_components\",\n    \"spec\"\n  ],\n  \"devDependencies\": {\n    \"js-imagediff\": \"~1.0.8\",\n    \"jquery\": \"~2.1.3\",\n    \"fontawesome\": \"~4.4.0\"\n  }\n}\n"
        },
        {
          "name": "bower_components",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "karma.conf.js",
          "type": "blob",
          "size": 1.2939453125,
          "content": "module.exports = function (config) {\n    config.set({\n        basePath: '',\n        frameworks: ['mocha', 'chai'],\n        concurrency: 1,\n\n        files: [{\n                pattern: 'spec/resources/**/*',\n                included: false,\n                served: true\n            }, {\n                pattern: 'bower_components/fontawesome/fonts/*.*',\n                included: false,\n                served: true\n            }, {\n                pattern: 'bower_components/fontawesome/css/*.*',\n                included: false,\n                served: true\n            },\n\n            'bower_components/jquery/dist/jquery.js',\n            'bower_components/js-imagediff/imagediff.js',\n            'test-lib/tesseract-1.0.10.js',\n\n            'src/dom-to-image.js',\n            'spec/dom-to-image.spec.js'\n        ],\n\n        exclude: [],\n        preprocessors: {},\n        reporters: ['mocha'],\n        port: 9876,\n        colors: true,\n        logLevel: config.LOG_INFO,\n        client: {\n            captureConsole: true\n        },\n        autoWatch: true,\n        browsers: ['chrome', 'Firefox'],\n        customLaunchers: {\n            chrome: {\n                base: 'Chrome',\n                flags: ['--no-sandbox']\n            }\n        },\n\n        singleRun: false,\n        browserNoActivityTimeout: 60000\n    });\n};\n"
        },
        {
          "name": "node_modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.25390625,
          "content": "{\n    \"name\": \"dom-to-image\",\n    \"version\": \"2.6.0\",\n    \"description\": \"Generates an image from a DOM node using HTML5 canvas and SVG\",\n    \"main\": \"src/dom-to-image.js\",\n    \"dependencies\": {},\n    \"devDependencies\": {\n        \"chai\": \"^2.2.0\",\n        \"grunt\": \"~0.4.5\",\n        \"grunt-cli\": \"^1.2.0\",\n        \"grunt-contrib-jshint\": \"^0.11.2\",\n        \"grunt-contrib-uglify\": \"^0.9.1\",\n        \"grunt-contrib-watch\": \"^0.6.1\",\n        \"grunt-karma\": \"^1.0.0\",\n        \"karma\": \"^0.13.22\",\n        \"karma-chai\": \"^0.1.0\",\n        \"karma-chrome-launcher\": \"^0.1.8\",\n        \"karma-firefox-launcher\": \"^0.1.4\",\n        \"karma-mocha\": \"^0.1.10\",\n        \"karma-mocha-reporter\": \"^1.3.0\",\n        \"mocha\": \"^2.2.4\"\n    },\n    \"scripts\": {\n        \"test\": \"./node_modules/.bin/grunt test\"\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/tsayen/dom-to-image.git\"\n    },\n    \"keywords\": [\n        \"dom\",\n        \"image\",\n        \"raster\",\n        \"render\",\n        \"html\",\n        \"canvas\",\n        \"svg\"\n    ],\n    \"author\": \"Anatolii Saienko <anatoly.sayenko@gmail.com>\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/tsayen/dom-to-image/issues\"\n    },\n    \"homepage\": \"https://github.com/tsayen/dom-to-image#readme\"\n}\n"
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-lib",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}