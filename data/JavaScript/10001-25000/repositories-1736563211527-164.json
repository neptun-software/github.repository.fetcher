{
  "metadata": {
    "timestamp": 1736563211527,
    "page": 164,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ruanyf/react-demos",
      "stars": 16295,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.021484375,
          "content": "example/\nnode_modules\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.2216796875,
          "content": "This is a collection of simple demos of React.js.\n\nThese demos are purposely written in a simple and clear style. You will find no difficulty in following them to learn the powerful library.\n\n## Related Projects\n\n- [Flux Demo](https://github.com/ruanyf/extremely-simple-flux-demo)\n- [Webpack Demos](https://github.com/ruanyf/webpack-demos)\n- [React Router Tutorial](https://github.com/reactjs/react-router-tutorial)\n- [CSS Modules Demos](https://github.com/ruanyf/css-modules-demos)\n- [React Testing Demo](https://github.com/ruanyf/react-testing-demo)\n- [A boilerplate for React-Babel-Webpack project](https://github.com/ruanyf/react-babel-webpack-boilerplate)\n\n## How to use\n\nFirst, copy the repo into your disk.\n\n```bash\n$ git clone git@github.com:ruanyf/react-demos.git\n```\n\nThen play with the source files under the repo's demo* directories.\n\n## HTML Template\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <script src=\"../build/react.development.js\"></script>\n    <script src=\"../build/react-dom.development.js\"></script>\n    <script src=\"../build/babel.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script type=\"text/babel\">\n\n      // ** Our code goes here! **\n\n    </script>\n  </body>\n</html>\n```\n\n## Index\n\n1. [Render JSX](#demo01-render-jsx)\n1. [Use JavaScript in JSX](#demo02-use-javascript-in-jsx)\n1. [Use array in JSX](#demo03-use-array-in-jsx)\n1. [Define a component](#demo04-define-a-component)\n1. [this.props.children](#demo05-thispropschildren)\n1. [PropTypes](#demo06-proptypes)\n1. [Finding a DOM node](#demo07-finding-a-dom-node)\n1. [this.state](#demo08-thisstate)\n1. [Form](#demo09-form)\n1. [Component Lifecycle](#demo10-component-lifecycle)\n1. [Ajax](#demo11-ajax)\n1. [Display value from a Promise](#demo12-display-value-from-a-promise)\n1. [Server-side rendering](#demo13-server-side-rendering)\n\n---\n\n## Demo01: Render JSX\n\n[demo](http://ruanyf.github.io/react-demos/demo01/) / [source](https://github.com/ruanyf/react-demos/blob/master/demo01/index.html)\n\nThe template syntax in React is called [JSX](http://facebook.github.io/react/docs/displaying-data.html#jsx-syntax). JSX allows you to use HTML tags in JavaScript code. `ReactDOM.render()` is the method which translates JSX into HTML and renders it into the specified DOM node.\n\n```js\nReactDOM.render(\n  <h1>Hello, world!</h1>,\n  document.getElementById('example')\n);\n```\n\nTo actually perform the transformation in the browser, you must use `<script type=\"text/babel\">` to indicate JSX code, and include `babel.min.js`, which is a [browser version](https://babeljs.io/docs/usage/browser/) of Babel and can be found in the [babel-core@6](https://www.npmjs.com/package/babel-core) npm release.\n\nBefore v0.14, React used `JSTransform.js` to translate `<script type=\"text/jsx\">`, but this is now deprecated ([more info](https://facebook.github.io/react/blog/2015/06/12/deprecating-jstransform-and-react-tools.html)).\n\n## Demo02: Use JavaScript in JSX\n\n[demo](http://ruanyf.github.io/react-demos/demo02/) / [source](https://github.com/ruanyf/react-demos/blob/master/demo02/index.html)\n\nYou can also use JavaScript within JSX. Angle brackets (&lt;) symbolize the beginning of HTML syntax, while curly brackets (`{`) represent the beginning of JavaScript syntax.\n\n```js\nvar names = ['Alice', 'Emily', 'Kate'];\n\nReactDOM.render(\n  <div>\n  {\n    names.map(function (name) {\n      return <div>Hello, {name}!</div>\n    })\n  }\n  </div>,\n  document.getElementById('example')\n);\n```\n\n## Demo03: Use array in JSX\n\n[demo](http://ruanyf.github.io/react-demos/demo03/) / [source](https://github.com/ruanyf/react-demos/blob/master/demo03/index.html)\n\nIf a JavaScript variable is an array, JSX will implicitly concat all members of the array.\n\n```js\nvar arr = [\n  <h1>Hello world!</h1>,\n  <h2>React is awesome</h2>,\n];\nReactDOM.render(\n  <div>{arr}</div>,\n  document.getElementById('example')\n);\n```\n\n## Demo04: Define a component\n\n[demo](http://ruanyf.github.io/react-demos/demo04/) / [source](https://github.com/ruanyf/react-demos/blob/master/demo04/index.html)\n\n\n\n`class ComponentName extends React.Component` creates a component class, which implements a render method to return a component instance of the class.\n\nBefore v16.0, React used `React.createClass()` to create a component class, but this is now deprecated ([more info](https://github.com/facebook/react/blob/master/CHANGELOG.md#removed-deprecations)).\n\n```javascript\nclass HelloMessage extends React.Component {\n  render() {\n    return <h1>Hello {this.props.name}</h1>;\n  }\n}\n\nReactDOM.render(\n  <HelloMessage name=\"John\" />,\n  document.getElementById('example')\n);\n```\n\nYou can use `this.props.[attribute]` to access the attributes of a component. Example: `this.props.name` of `<HelloMessage name=\"John\" />` is John.\n\nPlease remember the first letter of the component's name must be capitalized, otherwise, React will throw an error. For instance, `HelloMessage` as a component's name is OK, but `helloMessage` is not allowed. And a React component should only have one top child node.\n\n```javascript\n// wrong\nclass HelloMessage extends React.Component {\n  render() {\n    return <h1>\n      Hello {this.props.name}\n    </h1><p>\n      some text\n    </p>;\n  }\n}\n\n// correct\nclass HelloMessage extends React.Component {\n  render() {\n    return <div>\n      <h1>Hello {this.props.name}</h1>\n      <p>some text</p>\n    </div>;\n  }\n}\n```\n\n## Demo05: this.props.children\n\n[demo](http://ruanyf.github.io/react-demos/demo05/) / [source](https://github.com/ruanyf/react-demos/blob/master/demo05/index.html)\n\nReact uses `this.props.children` to access a component's children nodes.\n\n```javascript\nclass NotesList extends React.Component {\n  render() {\n    return (\n      <ol>\n      {\n        React.Children.map(this.props.children, function (child) {\n          return <li>{child}</li>;\n        })\n      }\n      </ol>\n    );\n  }\n}\n\nReactDOM.render(\n  <NotesList>\n    <span>hello</span>\n    <span>world</span>\n  </NotesList>,\n  document.getElementById('example')\n);\n```\n\nPlease be mindful that the value of `this.props.children` has three possibilities. If the component has no child node, the value is `undefined`; If it has a single child node, the value will be an object; If it has multiple children nodes, the result is an array. Keep this in mind as you code.\n\nReact gave us a utility [`React.Children`](https://facebook.github.io/react/docs/top-level-api.html#react.children) for dealing with the opaque data structure of `this.props.children`. You can use `React.Children.map` to iterate `this.props.children` without worrying if its data type is `undefined` or `object`. Check [official document](https://facebook.github.io/react/docs/top-level-api.html#react.children) for more methods `React.Children` offers.\n\n## Demo06: PropTypes\n\n[demo](http://ruanyf.github.io/react-demos/demo06/) / [source](https://github.com/ruanyf/react-demos/blob/master/demo06/index.html)\n\nComponents in React have many specific attributes which are called `props` and can be of any type.\n\nSometimes you need a way to validate these props. You don't want users have the freedom to input anything into your components.\n\nReact has a solution for this and it's called PropTypes.\n\n```javascript\nclass MyTitle extends React.Component {\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n  }\n  render() {\n    return <h1> {this.props.title} </h1>;\n  }\n}\n```\n\nThe above component `MyTitle` has a prop of `title`. PropTypes tells React that the title is required and its value should be a string.\n\nNow we give `Title` a number value.\n\n```javascript\nvar data = 123;\n\nReactDOM.render(\n  <MyTitle title={data} />,\n  document.getElementById('example')\n);\n```\n\nHere, the prop doesn't pass the validation, and the console will show you an error message:\n\n```bash\nWarning: Failed propType: Invalid prop `title` of type `number` supplied to `MyTitle`, expected `string`.\n```\n\nVisit [official doc](https://reactjs.org/docs/typechecking-with-proptypes.html) for more PropTypes options.\n\nP.S. If you want to give the props a default value, use `defaultProps`.\n\n```javascript\nclass MyTitle extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  static defaultProps = {\n    title: 'Hello World',\n  }\n  render() {\n    return <h1> {this.props.title} </h1>;\n  }\n}\n\nReactDOM.render(\n  <MyTitle />,\n  document.getElementById('example')\n);\n```\n\nReact.PropTypes has moved into a different package since React v15.5. ([more info](https://reactjs.org/docs/typechecking-with-proptypes.html)).\n\n## Demo07: Finding a DOM node\n\n[demo](http://ruanyf.github.io/react-demos/demo07/) / [source](https://github.com/ruanyf/react-demos/blob/master/demo07/index.html)\n\nSometimes you need to reference a DOM node in a component. React gives you the `ref` attribute to attach a DOM node to instance created by `React.createRef()`.\n\n\n```js\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myTextInput = React.createRef();\n    this.handleClick = this.handleClick.bind(this)\n  }\n  handleClick() {\n    this.myTextInput.current.focus();\n  }\n  render() {\n    return (\n      <div>\n        <input type=\"text\" ref={this.myTextInput} />\n        <input type=\"button\" value=\"Focus the text input\" onClick={this.handleClick} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <MyComponent />,\n  document.getElementById('example')\n);\n```\n\nPlease be mindful that you could do that only after this component has been mounted into the DOM, otherwise you get `null`.\n\n## Demo08: this.state\n\n[demo](http://ruanyf.github.io/react-demos/demo08/) / [source](https://github.com/ruanyf/react-demos/blob/master/demo08/index.html)\n\nReact thinks of component as state machines, and uses `this.state` to hold component's state, `this.setState()` to update `this.state` and re-render the component.\n\n```js\nclass LikeButton extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n    \tliked: false\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n  handleClick(event) {\n    this.setState({ liked: !this.state.liked });\n  }\n  render() {\n    var text = this.state.liked ? 'like' : 'haven\\'t liked';\n    return (\n      <p onClick={this.handleClick}>\n        You {text} this. Click to toggle.\n      </p>\n    );\n  }\n}\n\nReactDOM.render(\n  <LikeButton />,\n  document.getElementById('example')\n);\n```\n\nYou could use component attributes to register event handlers, just like `onClick`, `onKeyDown`, `onCopy`, etc. Official Document has all [supported events](http://facebook.github.io/react/docs/events.html#supported-events).\n\n## Demo09: Form\n\n[demo](http://ruanyf.github.io/react-demos/demo09/) / [source](https://github.com/ruanyf/react-demos/blob/master/demo09/index.html)\n\nAccording to React's design philosophy, `this.state` describes the state of component and is mutated via user interactions, and `this.props` describes the properties of component and is stable and immutable.\n\nSince that, the `value` attribute of Form components, such as &lt;input&gt;, &lt;textarea&gt;, and &lt;option&gt;, is unaffected by any user input. If you wanted to access or update the value in response to user input, you could use the onChange event.\n\n```js\nclass Input extends React.Component {\nconstructor(props) {\n  super(props)\n  this.state = {value: 'Hello!'}\n  this.handleChange = this.handleChange.bind(this)\n}\nhandleChange(event) {\n  this.setState({value: event.target.value});\n}\nrender() {\n  var value = this.state.value;\n  return (\n    <div>\n      <input type=\"text\" value={value} onChange={this.handleChange} />\n      <p>{value}</p>\n    </div>\n  );\n}\n}\n\nReactDOM.render(<Input/>, document.getElementById('example'));\n```\n\nMore information on [official document](http://facebook.github.io/react/docs/forms.html).\n\n## Demo10: Component Lifecycle\n\n[demo](http://ruanyf.github.io/react-demos/demo10/) / [source](https://github.com/ruanyf/react-demos/blob/master/demo10/index.html)\n\nComponents have three main parts of [their lifecycle](https://facebook.github.io/react/docs/working-with-the-browser.html#component-lifecycle): Mounting(being inserted into the DOM), Updating(being re-rendered) and Unmounting(being removed from the DOM). React provides hooks into these lifecycle part. `will` methods are called right before something happens, and `did` methods which are called right after something happens.\n\n```js\nclass Hello extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {opacity: 1.0};\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(function () {\n      var opacity = this.state.opacity;\n      opacity -= .05;\n      if (opacity < 0.1) {\n        opacity = 1.0;\n      }\n      this.setState({\n        opacity: opacity\n      });\n    }.bind(this), 100);\n  }\n\n  render() {\n    return (\n      <div style={{opacity: this.state.opacity}}>\n        Hello {this.props.name}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Hello name=\"world\"/>,\n  document.getElementById('example')\n);\n```\n\nThe following is [a whole list of lifecycle methods](http://facebook.github.io/react/docs/component-specs.html#lifecycle-methods).\n\n- **componentWillMount()**: Fired once, before initial rendering occurs. Good place to wire-up message listeners. `this.setState` doesn't work here.\n- **componentDidMount()**: Fired once, after initial rendering occurs. Can use `this.getDOMNode()`.\n- **componentWillUpdate(object nextProps, object nextState)**: Fired after the component's updates are made to the DOM. Can use `this.getDOMNode()` for updates.\n- **componentDidUpdate(object prevProps, object prevState)**: Invoked immediately after the component's updates are flushed to the DOM. This method is not called for the initial render. Use this as an opportunity to operate on the DOM when the component has been updated.\n- **componentWillUnmount()**: Fired immediately before a component is unmounted from the DOM. Good place to remove message listeners or general clean up.\n- **componentWillReceiveProps(object nextProps)**: Fired when a component is receiving new props. You might want to `this.setState` depending on the props.\n- **shouldComponentUpdate(object nextProps, object nextState)**: Fired before rendering when new props or state are received. `return false` if you know an update isn't needed.\n\n## Demo11: Ajax\n\n[demo](http://ruanyf.github.io/react-demos/demo11/) / [source](https://github.com/ruanyf/react-demos/blob/master/demo11/index.html)\n\nHow to get the data of a component from a server or an API provider? The answer is using Ajax to fetch data in the event handler of `componentDidMount`. When the server response arrives, store the data with `this.setState()` to trigger a re-render of your UI.\n\n```js\nclass UserGist extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      username: '',\n      lastGistUrl: ''\n    };\n  }\n\n  componentDidMount() {\n    $.get(this.props.source, function(result) {\n      var lastGist = result[0];\n      this.setState({\n        username: lastGist.owner.login,\n        lastGistUrl: lastGist.html_url\n      });\n    }.bind(this));\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.username}'s last gist is\n        <a href={this.state.lastGistUrl}>here</a>.\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <UserGist source=\"https://api.github.com/users/octocat/gists\" />,\n  document.getElementById('example')\n);\n```\n\n## Demo12: Display value from a Promise\n\n[demo](http://ruanyf.github.io/react-demos/demo12/) / [source](https://github.com/ruanyf/react-demos/blob/master/demo12/index.html)\n\nThis demo is inspired by Nat Pryce's article [\"Higher Order React Components\"](http://natpryce.com/articles/000814.html).\n\nIf a React component's data is received asynchronously, we can also use a Promise object as the component's property, as follows.\n\n```javascript\nReactDOM.render(\n  <RepoList promise={$.getJSON('https://api.github.com/search/repositories?q=javascript&sort=stars')} />,\n  document.getElementById('example')\n);\n```\n\nThe above code takes data from Github's API, and the `RepoList` component gets a Promise object as its property.\n\nNow, while the promise is pending, the component displays a loading indicator. When the promise is resolved successfully, the component displays a list of repository information. If the promise is rejected, the component displays an error message.\n\n```javascript\nclass RepoList extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: true,\n      error: null,\n      data: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.promise.then(\n      value => this.setState({loading: false, data: value}),\n      error => this.setState({loading: false, error: error}));\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <span>Loading...</span>;\n    }\n    else if (this.state.error !== null) {\n      return <span>Error: {this.state.error.message}</span>;\n    }\n    else {\n      var repos = this.state.data.items;\n      var repoList = repos.map(function (repo, index) {\n        return (\n          <li key={index}><a href={repo.html_url}>{repo.name}</a> ({repo.stargazers_count} stars) <br/> {repo.description}</li>\n        );\n      });\n      return (\n        <main>\n          <h1>Most Popular JavaScript Projects in Github</h1>\n          <ol>{repoList}</ol>\n        </main>\n      );\n    }\n  }\n}\n```\n\n## Demo13: Server-side rendering\n\n[source](https://github.com/ruanyf/react-demos/tree/master/demo13/src)\n\nThis demo is copied from [github.com/mhart/react-server-example](https://github.com/mhart/react-server-example), but I rewrote it with JSX syntax.\n\n```bash\n# install the dependencies in demo13 directory\n$ npm install\n\n# translate all jsx file in src subdirectory to js file\n$ npm run build\n\n# launch http server\n$ node server.js\n```\n\n## Extras\n\n### Precompiling JSX\n\nAll above demos don't use JSX compilation for clarity. In production environment, ensure to precompile JSX files before putting them online.\n\nFirst, install the command-line tools [Babel](https://babeljs.io/docs/usage/cli/).\n\n```bash\n$ npm install -g babel\n```\n\nThen precompile your JSX files(.jsx) into JavaScript(.js). Compiling the entire src directory and output it to the build directory, you may use the option `--out-dir` or `-d`.\n\n```bash\n$ babel src --out-dir build\n```\n\nPut the compiled JS files into HTML.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello React!</title>\n    <script src=\"build/react.js\"></script>\n    <script src=\"build/react-dom.js\"></script>\n    <!-- No need for Browser.js! -->\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script src=\"build/helloworld.js\"></script>\n  </body>\n</html>\n```\n\n## Useful links\n\n- [React's official site](http://facebook.github.io/react)\n- [React's official examples](https://github.com/facebook/react/tree/master/examples)\n- [React (Virtual) DOM Terminology](http://facebook.github.io/react/docs/glossary.html), by Sebastian Markbåge\n- [The React Quick Start Guide](http://www.jackcallister.com/2015/01/05/the-react-quick-start-guide.html), by Jack Callister\n- [Learning React.js: Getting Started and Concepts](https://scotch.io/tutorials/learning-react-getting-started-and-concepts), by Ken Wheeler\n- [Getting started with React](http://ryanclark.me/getting-started-with-react), by Ryan Clark\n- [React JS Tutorial and Guide to the Gotchas](https://zapier.com/engineering/react-js-tutorial-guide-gotchas/), by Justin Deal\n- [React Primer](https://github.com/BinaryMuse/react-primer), by Binary Muse\n- [jQuery versus React.js thinking](http://blog.zigomir.com/react.js/jquery/2015/01/11/jquery-versus-react-thinking.html), by zigomir\n\n## License\n\nBSD licensed\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo01",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo02",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo03",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo04",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo05",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo06",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo07",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo08",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo09",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo10",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo11",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo12",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo13",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}