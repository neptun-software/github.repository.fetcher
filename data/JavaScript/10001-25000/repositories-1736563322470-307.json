{
  "metadata": {
    "timestamp": 1736563322470,
    "page": 307,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "4ian/GDevelop",
      "stars": 12272,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.6025390625,
          "content": "Checks: 'clang-diagnostic-*,clang-analyzer-*,cppcoreguidelines-*,-cppcoreguidelines-explicit-virtual-functions,-cppcoreguidelines-avoid-const-or-ref-data-members,-cppcoreguidelines-special-member-functions,-cppcoreguidelines-avoid-magic-numbers,-cppcoreguidelines-non-private-member-variables-in-classes,-cppcoreguidelines-owning-memory,-cppcoreguidelines-virtual-class-destructor,-clang-analyzer-optin.performance.Padding,-cppcoreguidelines-narrowing-conversions'\nWarningsAsErrors: 'cppcoreguidelines-pro-type-member-init, clang-analyzer-optin.cplusplus.UninitializedObject'\nHeaderFilterRegex: '.*'\nFormatStyle: none"
        },
        {
          "name": ".clang_complete",
          "type": "blob",
          "size": 0.30078125,
          "content": "-DGDJS_EXPORTS\n-DGD_API=\n-DGD_CORE_API=\n-DGD_EXTENSION_API=\n-DGD_IDE_ONLY\n-DMACOS\n-DRELEASE\n-D_FILE_OFFSET_BITS=64\n-D_WCHAR_H_CPLUSPLUS_98_CONFORMANCE_\n-Wno-potentially-evaluated-expression\n-std=gnu++11\n-DNDEBUG\n-fPIC\n-I./ExtLibs/SFML/include\n-I./Core\n-I./GDJS/.\n-F./ExtLibs/SFML/extlibs/libs-osx/Frameworks\n"
        },
        {
          "name": ".clang_format",
          "type": "blob",
          "size": 0.0712890625,
          "content": "{BasedOnStyle: Google, BinPackParameters: false, BinPackArguments: false}"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.6494140625,
          "content": "Core/GDCore/Serialization/rapidjson/rapidjson.h/* linguist-vendored\nExtensions/ParticleSystem/SPARK/* linguist-vendored\nExtensions/PhysicsBehavior/Box2D/* linguist-vendored\nExtensions/PhysicsBehavior/box2djs/* linguist-vendored\nExtensions/Physics2Behavior/box2d.js linguist-vendored\nExtensions/Physics3DBehavior/*.wasm-compat.js linguist-vendored\nExtensions/BBText/pixi-multistyle-text/* linguist-vendored\nExtensions/P2P/A_peer.js linguist-vendored\nExtensions/Multiplayer/peer.js linguist-vendored\nExtensions/Shopify/shopify-buy.umd.polyfilled.min.js linguist-vendored\nExtensions/TileMap/pako/* linguist-vendored\nExtensions/TileMap/pixi-tilemap/* linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.587890625,
          "content": "/docs\n/docs-wiki\n/ExtLibs/SFML\n/ExtLibs/*.7z\n/scripts/logs/*.txt\n/scripts/gdcore-gdcpp-gdjs-extensions-messages.pot\n/Binaries/.build*\n/Binaries/.embuild*\n/Binaries/build*\n/Binaries/embuild*\n/emsdk\n*.dll\n*.exe\n*.a\n*.so\n*.bc\n/Binaries/Output\n*.autosave\n!/scripts/libgettextlib-0-17.dll\n!/scripts/libgettextsrc-0-17.dll\n!/xgettext.exe\n!/ExtLibs/curl.exe\n!/ExtLibs/7za.exe\n!/ExtLibs/SFML/extlibs/**/*.dll\n!/ExtLibs/SFML/extlibs/**/*.so\n!/ExtLibs/SFML/extlibs/**/*.a\n**/.DS_Store\n**/node_modules/\n.idea\n.vscode/ipch\n/newIDE/app/src/UI/Theme/**/*ThemeVariables.*\n.DS_Store\n.Spotlight-V100\n.Trashes\nThumbs.db\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 1.005859375,
          "content": "# This is a configuration file allowing to quickly set up a development environment\n# on GitPod (https://www.gitpod.io/).\n# Also check GitHub codespaces if you're interested in working \n# on a remote development server.\n\n# This works well for:\n# - The editor web-app, including the C++ classes.\n# This is not yet adapted for:\n# - Working on the game engine or extensions, as they can't be easily tested on the web-app.\n# - Working on the desktop app (Electron).\n\ntasks:\n  - name: Install dependencies for Emscripten and build GDevelop.js\n    init: |\n          sudo apt-get update \n          sudo apt install cmake python-is-python3 python3-distutils -y\n          git clone https://github.com/juj/emsdk.git && cd emsdk && ./emsdk install 3.1.21 && ./emsdk activate 3.1.21 && cd ..\n          cd GDevelop.js\n          npm install\n          source ../emsdk/emsdk_env.sh && npm run build -- --dev\n          cd ..\n  - name: Install GDevelop IDE dependencies\n    init: cd newIDE/app && npm install && cd ../electron-app && npm install\n\n\n"
        },
        {
          "name": ".semaphore",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.3583984375,
          "content": "# Travis CI configuration to build and run all tests\n# (and typing/formatting) for the Core, newIDE, GDJS.\n#\n# See also Semaphore CI for quick tests (not building GDevelop.js, so\n# faster but not always reliable).\n\nlanguage: cpp\nsudo: false\ncompiler:\n  - clang\n\n# Cache .npm folder for faster npm install\ncache:\n  directories:\n    - $HOME/.npm\n\naddons:\n  apt:\n    sources:\n      - ubuntu-toolchain-r-test\n    packages:\n      # Build dependencies:\n      - cmake\n      - p7zip-full\n\nbefore_install:\n  # This workaround is required to avoid libstdc++ errors (Emscripten requires a recent version of libstdc++)\n  - wget -q -O libstdc++6 http://security.ubuntu.com/ubuntu/pool/main/g/gcc-5/libstdc++6_5.4.0-6ubuntu1~16.04.12_amd64.deb\n  - sudo dpkg --force-all -i libstdc++6\n\ninstall:\n  # Ensure we use a recent version of Node.js (and npm).\n  - nvm install v16 && nvm use v16\n  #Compile the tests only for GDCore\n  - mkdir .build-tests\n  - cd .build-tests\n  - cmake -DBUILD_GDJS=FALSE -DBUILD_TESTS=TRUE -DCMAKE_CXX_COMPILER=$(which $CXX) -DCMAKE_C_COMPILER=$(which $CC) ..\n  - make -j 4\n  - cd ..\n  # Install Emscripten (for GDevelop.js)\n  # Specify the tag for the core repository to avois breaking changes.\n  - git clone --depth 1 --branch 3.1.21 https://github.com/juj/emsdk.git\n  - cd emsdk && ./emsdk install 3.1.21 && ./emsdk activate 3.1.21 && cd ..\n  # Install GDevelop.js dependencies\n  - cd GDevelop.js && npm install && cd ..\n  # Build GDevelop.js\n  # (in a subshell to avoid Emscripten polluting the Node.js and npm version for the rest of the build)\n  - (set -e; cd GDevelop.js && source ../emsdk/emsdk_env.sh && npm run build && cd ..)\n  # Install newIDE tests dependencies\n  - npm -v\n  - cd newIDE/app && npm install\n  - cd ../..\n  # Install GDJS tests dependencies\n  - cd GDJS && npm install && cd tests && npm install\n  - cd ../..\n\nscript:\n  # GDCore tests:\n  - cd .build-tests\n  - Core/GDCore_tests\n  - cd ..\n  # GDevelop.js tests\n  - cd GDevelop.js\n  - npm test\n  - cd ..\n  # newIDE tests:\n  - cd newIDE/app\n  - npm test\n  - npm run flow\n  - npm run check-format\n  - npm run check-script-types\n  - cd ../..\n  # GDJS tests:\n  - cd GDJS\n  - npm run check-format\n  - cd ..\n# GDJS game engine tests, disabled on Travis CI because ChromeHeadless can't be started.\n# See them running on Semaphore-CI instead: https://gdevelop.semaphoreci.com/projects/GDevelop\n#  - cd GDJS/tests && npm test\n#  - cd ../..\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "Binaries",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.2197265625,
          "content": "# This is the CMake file used to build GDevelop.\n# For more information, see the README.md file.\n\ncmake_minimum_required(VERSION 3.5)\n\n# Add utility functions\ninclude(scripts/CMakeClangUtils.txt) # To add clang-format and clang-tidy support to a target\n\n# Macro for defining an option\nmacro(gd_set_option var default type docstring)\n\tif(NOT DEFINED ${var})\n\t\tset(${var} ${default})\n\tendif()\n\tset(${var} ${${var}} CACHE ${type} ${docstring} FORCE)\nendmacro()\n\n# Set options\ngd_set_option(BUILD_CORE TRUE BOOL \"TRUE to build GDevelop Core library\")\ngd_set_option(BUILD_GDJS TRUE BOOL \"TRUE to build GDevelop JS Platform\")\ngd_set_option(BUILD_EXTENSIONS TRUE BOOL \"TRUE to build the extensions\")\ngd_set_option(BUILD_TESTS TRUE BOOL \"TRUE to build the tests\")\n\n# Disable deprecated code\nset(NO_GUI TRUE CACHE BOOL \"\" FORCE) # Force disable old GUI related code.\n\n# Setting up installation directory, for Linux (has to be done before \"project\" command).\nif(NOT WIN32)\n\tif(NOT APPLE)\n\t\tgd_set_option(GD_INSTALL_PREFIX \"/opt/gdevelop/\" STRING \"The directory where GDevelop should be installed\")\n\telse()\n\t\tgd_set_option(GD_INSTALL_PREFIX \".\" STRING \"The directory where GDevelop should be installed\")\n\tendif()\n\n\t# As we embed SFML, prevent it to be installed system-wide\n\tset(CMAKE_INSTALL_PREFIX \"${GD_INSTALL_PREFIX}/useless\")\nendif()\n\nproject(GDevelop)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\nif(NOT WIN32 AND NOT APPLE AND NOT BUILD_TESTS)\n\tset(CMAKE_SKIP_BUILD_RPATH TRUE) # Avoid errors when packaging for linux.\nendif()\nif(APPLE)\n\tset(CMAKE_MACOSX_RPATH 1)\n\tset(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)\n\tset(CMAKE_INSTALL_RPATH \".\")\n\tset(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)\n\tadd_compile_options(\n\t\t-D_WCHAR_H_CPLUSPLUS_98_CONFORMANCE_\n\t\t-Wno-potentially-evaluated-expression)\nendif()\n# Sanity checks\nif(\"${CMAKE_BUILD_TYPE}\" STREQUAL \"\")\n\tmessage(STATUS \"CMAKE_BUILD_TYPE is empty, assuming build type is Release\")\n\tset(CMAKE_BUILD_TYPE Release)\nendif()\n\nif(\"${CMAKE_BUILD_TYPE}\" STREQUAL \"Release\" AND NOT WIN32 AND CMAKE_COMPILER_IS_GNUCXX)\n\tset(CMAKE_SHARED_LINKER_FLAGS \"-s\") # Force stripping to avoid errors when packaging for linux.\nendif()\n\n#Activate C++11\nset(CMAKE_CXX_STANDARD 11) # Upgrading to C++17 should be tried.\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# Mark some warnings as errors\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n\t# Activate as much warnings as possible to avoid errors like\n\t# uninitialized variables or other hard to debug bugs.\n\tadd_compile_options(\n\t\t-Wall\n\t\t-Wextra\n\t\t-Wuninitialized\n\t\t-Wconditional-uninitialized\n\t\t-Wno-unknown-warning-option\n\t\t-Wno-reorder-ctor\n\t\t-Wno-reorder\n\t\t-Wno-unused-parameter\n\t\t-Wno-pessimizing-move\n\t\t-Wno-unused-variable # Not a good style, but not a risk\n\t\t-Wno-unused-private-field\n\t\t-Wno-ignored-qualifiers # Not a risk\n\t\t-Wno-sign-compare # Not a big risk\n\n\t\t# Make as much warnings considered as errors as possible (only one for now).\n\t\t-Werror=return-stack-address\n\t\t-Werror=return-type)\nendif()\n\n# Define common directories:\nset(GD_base_dir ${CMAKE_CURRENT_SOURCE_DIR})\n\n# Add all the CMakeLists:\nadd_subdirectory(ExtLibs)\nif(BUILD_CORE)\n\tadd_subdirectory(Core)\nendif()\nif(BUILD_GDJS)\n\tadd_subdirectory(GDJS)\nendif()\nif(EMSCRIPTEN)\n\tadd_subdirectory(GDevelop.js)\nendif()\nif(BUILD_EXTENSIONS)\n\tadd_subdirectory(Extensions)\nendif()\n"
        },
        {
          "name": "Core",
          "type": "tree",
          "content": null
        },
        {
          "name": "ExtLibs",
          "type": "tree",
          "content": null
        },
        {
          "name": "Extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "GDJS",
          "type": "tree",
          "content": null
        },
        {
          "name": "GDevelop.js",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.2978515625,
          "content": "* The Core library, the game engine, the new IDE, and all extensions (respectively *Core*, *GDJS*, *new IDE* and *Extensions* folders) are under the **MIT license**.\n* The name, GDevelop, and its logo are the exclusive property of Florian Rival.\n\nSee the license.md in each folders for the full licenses.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.76171875,
          "content": "![GDevelop logo](https://raw.githubusercontent.com/4ian/GDevelop/master/newIDE/GDevelop%20banner.png 'GDevelop logo')\n\nGDevelop is a **full-featured, no-code, open-source** game development software. You can build **2D, 3D and multiplayer games** for mobile (iOS, Android), desktop and the web. GDevelop is fast and easy to use: the game logic is built up using an intuitive and powerful event-based system and reusable behaviors.\n\n![The GDevelop editor when editing a game level](https://raw.githubusercontent.com/4ian/GDevelop/master/newIDE/GDevelop%20screenshot.png 'The GDevelop editor when editing a game level')\n\n## Getting started\n\n| ❔ I want to...                                   | 🚀 What to do                                                                                                                                                     |\n| ------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 🎮 Use GDevelop to make games                     | Go to [GDevelop homepage](https://gdevelop.io) to download the app!                                                                                               |\n| ⚙️ Create/improve an extension                    | Read about [creating an extension](https://wiki.gdevelop.io/gdevelop5/extensions/create), with no-code or code.                                                   |\n| 🧑‍💻 Contribute to the editor or game engine        | Follow this [README](newIDE/README.md).                                                                                                                           |\n| 👾 Create or sell a game template                 | Submit a [free example or a paid template on the Asset Store](https://wiki.gdevelop.io/gdevelop5/community/guide-for-submitting-an-example/).                     |\n| 🎨 Share or sell an asset pack                    | Submit a [free or paid asset pack on the Asset Store](https://wiki.gdevelop.io/gdevelop5/community/sell-asset-pack-store).                                        |\n| 🌐 Help to translate GDevelop                     | Go on the [GDevelop project on Crowdin](https://crowdin.com/project/gdevelop) or translate [in-app tutorials](https://github.com/GDevelopApp/GDevelop-tutorials). |\n| 👥 Get online game services or commercial support | See offers for [professionals, teams or individual creators](https://gdevelop.io/pricing).                                                                        |\n\n> Are you interested in contributing to GDevelop for the first time? Take a look at the list of **[good first issues](https://github.com/4ian/GDevelop/issues?q=is%3Aissue+is%3Aopen+label%3A%22%F0%9F%91%8Cgood+first+issue%22)**, **[good first contributions](https://github.com/4ian/GDevelop/discussions/categories/good-first-contribution)** or the **[\"🏐 not too hard\" cards](https://trello.com/b/qf0lM7k8/gdevelop-roadmap?menu=filter&filter=label:Not%20too%20hard%20%E2%9A%BD%EF%B8%8F)** on the Roadmap.\n\n## Games made with GDevelop\n\n- Find GDevelop games on [gd.games](https://gd.games), the gaming platform for games powered by GDevelop.\n- See the [showcase of games](https://gdevelop.io/games) created with GDevelop and published on Steam, iOS (App Store), Android (Google Play), Itch.io, Newgrounds, CrazyGames, Poki...\n  - Suggest your game to be [added to the showcase here](https://docs.google.com/forms/d/e/1FAIpQLSfjiOnkbODuPifSGuzxYY61vB5kyMWdTZSSqkJsv3H6ePRTQA/viewform).\n\n[![Some games made with GDevelop](https://raw.githubusercontent.com/4ian/GDevelop/master/newIDE/GDevelop%20games.png 'Some games made with GDevelop')](https://gdevelop.io/games)\n\n## Technical architecture\n\nGDevelop is composed of an **editor**, a **game engine**, an **ecosystem** of extensions as well as **online services** and commercial support.\n\n| Directory     | ℹ️ Description                                                                                                                                                                                                                                                                                           |\n| ------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Core`        | Core classes, describing the structure of a game and tools to implement the IDE and work with GDevelop games.                                                                                                                                                                                            |\n| `GDJS`        | The game engine, written in TypeScript, using PixiJS and Three.js for 2D and 3D rendering (WebGL), powering all GDevelop games.                                                                                                                                                                          |\n| `GDevelop.js` | Bindings of `Core`, `GDJS` and `Extensions` to JavaScript (with WebAssembly), used by the IDE.                                                                                                                                                                                                           |\n| `newIDE`      | The game editor, written in JavaScript with React, Electron, PixiJS and Three.js.js.                                                                                                                                                                                                                     |\n| `Extensions`  | Built-in extensions for the game engine, providing objects, behaviors and new features. For example, this includes the physics engines running in WebAssembly (Box2D or Jolt Physics for 3D). All the [community extensions are on this repository](https://github.com/GDevelopApp/GDevelop-extensions). |\n\nTo learn more about GDevelop Architecture, read the [architecture overview here](Core/GDevelop-Architecture-Overview.md).\n\nPre-generated documentation of the game engine is [available here](https://docs.gdevelop.io).\n\nStatus of the tests and builds: [![macOS and Linux build status](https://circleci.com/gh/4ian/GDevelop.svg?style=shield)](https://app.circleci.com/pipelines/github/4ian/GDevelop) [![Fast tests status](https://gdevelop.semaphoreci.com/badges/GDevelop/branches/master.svg?style=shields)](https://gdevelop.semaphoreci.com/projects/GDevelop) [![Windows Build status](https://ci.appveyor.com/api/projects/status/84uhtdox47xp422x/branch/master?svg=true)](https://ci.appveyor.com/project/4ian/gdevelop/branch/master) [![https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg](https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg)](https://good-labs.github.io/greater-good-affirmation)\n\n## Links\n\n### Community\n\n- [GDevelop forums](https://forum.gdevelop.io) and [Discord chat](https://discord.gg/gdevelop).\n- [GDevelop homepage](https://gdevelop.io).\n- [GDevelop wiki (documentation)](https://wiki.gdevelop.io/gdevelop5/start).\n- Help translate GDevelop in your language: [GDevelop project on Crowdin](https://crowdin.com/project/gdevelop).\n- Open-source [extensions](https://github.com/GDevelopApp/GDevelop-extensions), [examples](https://github.com/GDevelopApp/GDevelop-examples), [tutorials](https://github.com/GDevelopApp/GDevelop-tutorials) are on GitHub.\n\n### Development Roadmap\n\n- [GDevelop Roadmap on Trello.com](https://trello.com/b/qf0lM7k8/gdevelop-roadmap), for a global view of the features that could be added. Please vote and comment here for new features/requests.\n- [GitHub issue page](https://github.com/4ian/GDevelop/issues), for technical issues and bugs.\n- [Github discussions](https://github.com/4ian/GDevelop/discussions) to talk about new features and ideas.\n\n## License\n\n- The Core library, the native and HTML5 game engines, the IDE, and all extensions (respectively `Core`, `GDJS`, `newIDE` and `Extensions` folders) are under the **MIT license**.\n- The name, GDevelop, and its logo are the exclusive property of Florian Rival.\n\nGames exported with GDevelop are based on the GDevelop game engine (see `Core` and `GDJS` folders): this engine is distributed under the MIT license so that you can **distribute, sell or do anything** with the games you created with GDevelop. In particular, you are not forced to make your game open-source.\n\n[node.js]: https://nodejs.org\n\n## Star History\n\nHelp us spread the word about GDevelop by starring the repository on GitHub!\n\n[![Star History Chart](https://api.star-history.com/svg?repos=4ian/gdevelop&type=Date)](https://star-history.com/#4ian/gdevelop&Date)\n"
        },
        {
          "name": "SharedLibs",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 5.4052734375,
          "content": "# AppVeyor configuration to build GDevelop app running\n# on the Electron runtime (newIDE/electron-app) for Windows.\n# For macOS and Linux, see the config.yml file.\n\nversion: 1.0.{build}\npull_requests:\n  do_not_increment_build_number: true\nimage: Visual Studio 2019\nclone_depth: 5\n# Only build\nbranches:\n  only:\n    - master\n    - /experimental-build.*/\nskip_tags: true # Don't rebuild on tags.\ninit:\n  - ps: Install-Product node 16\n  - cmd: set NODE_OPTIONS=--max-old-space-size=8192\ncache:\n  - '%APPDATA%\\npm-cache'               # npm cache\n  - newIDE\\app\\node_modules -> newIDE\\app\\package-lock.json\n  - newIDE\\electron-app\\node_modules -> newIDE\\electron-app\\package-lock.json\n  - GDevelop.js\\node_modules -> GDevelop.js\\package-lock.json\ninstall:\n  # Download and install SSL.com eSigner CKA. \n  # See https://www.ssl.com/how-to/how-to-integrate-esigner-cka-with-ci-cd-tools-for-automated-code-signing/.\n  #\n  # This is necessary because of \"signing to be FIPS-140 compliant\". See \n  # https://github.com/electron-userland/electron-builder/issues/6158\n  # \n  # Make sure to DISABLE \"malware blocker\" in SSL.com to avoid errors like:\n  # Error information: \"Error: SignerSign() failed.\" (-2146893821/0x80090003)\n  - ps: >-\n      # Download and Unzip eSignerCKA Setup\n\n      Set-StrictMode -Version 'Latest'\n\n      Invoke-WebRequest -OutFile eSigner_CKA_Setup.zip \"https://github.com/SSLcom/eSignerCKA/releases/download/v1.0.6/SSL.COM-eSigner-CKA_1.0.6.zip\"\n\n      Expand-Archive -Force eSigner_CKA_Setup.zip\n\n      Remove-Item eSigner_CKA_Setup.zip\n\n      Move-Item -Destination \"eSigner_CKA_Installer.exe\" -Path \"eSigner_CKA_*\\*.exe\"\n      \n      # Install it. See https://www.ssl.com/how-to/how-to-integrate-esigner-cka-with-ci-cd-tools-for-automated-code-signing/\n\n      New-Item -ItemType Directory -Force -Path \"C:\\projects\\gdevelop\\eSignerCKA\"\n\n      ./eSigner_CKA_Installer.exe /CURRENTUSER /VERYSILENT /SUPPRESSMSGBOXES /DIR=\"C:\\projects\\gdevelop\\eSignerCKA\" | Out-Null\n      \n      # Disable logger.\n\n      # $LogConfig = Get-Content -Path C:\\projects\\gdevelop\\eSignerCKA/log4net.config\n\n      # $LogConfig[0] = '<log4net threshold=\"OFF\">'\n\n      # $LogConfig | Set-Content -Path C:\\projects\\gdevelop\\eSignerCKA/log4net.config\n\n  # Build GDevelop.js (and run tests to ensure it works).\n  # (in a subshell to avoid Emscripten polluting the Node.js and npm version for the rest of the build)\n  - cmd: >-\n      cd GDevelop.js\n\n      npm -v && npm install\n\n      git clone https://github.com/juj/emsdk.git\n\n      cd emsdk\n\n      emsdk install 3.1.21\n\n      CMD /C \"emsdk activate 3.1.21 && cd .. && npm run build\"\n\n      cd ..\\..\n\n  # Build GDevelop IDE.\n  # Also install setuptools as something requires distutils in electron-app, and it was removed in Python 3.12.\n  # setuptools will make distutils available again (but we should migrate our packages probably).\n  - cmd: >-\n      pip install setuptools\n\n      cd newIDE\\app\n\n      npm -v && npm install\n\n      cd ..\\electron-app\n\n      npm -v && npm install\n\n      cd ..\\..\n\n# Package the app for Windows (and sign it).\n# Don't sign the appx (it will be signed by the Microsoft Store).\nbuild_script:\n  - ps: >-\n      cd newIDE\\electron-app\n\n      # Prepare certificate. See https://www.ssl.com/how-to/automate-ev-code-signing-with-signtool-or-certutil-esigner/?_gl=1*vuybcy*_gcl_au*MTEwODg1NDM2Mi4xNzA1ODU1NjM4#automated-code-signing\n\n      C:\\projects\\gdevelop\\eSignerCKA/eSignerCKATool.exe config -mode product -user \"$Env:ESIGNER_USER_NAME\" -pass \"$Env:ESIGNER_USER_PASSWORD\" -totp \"$Env:ESIGNER_USER_TOTP\" -key \"C:\\projects\\gdevelop\\eSignerCKA\\master.key\" -r\n\n      C:\\projects\\gdevelop\\eSignerCKA/eSignerCKATool.exe unload\n\n      C:\\projects\\gdevelop\\eSignerCKA/eSignerCKATool.exe load\n\n      # Find certificate so we can tell electron-builder which one to use.\n\n      $CodeSigningCert = Get-ChildItem Cert:\\CurrentUser\\My -CodeSigningCert | Select-Object -First 1\n\n      echo Certificate: $CodeSigningCert\n\n      # Use a custom signtool path because of the signtool.exe bundled withy electron-builder not working for some reason.\n      # Can also be found in versioned folders like \"C:/Program Files (x86)/Windows Kits/10/bin/10.0.22000.0/x86/signtool.exe\".\n\n      $Env:SIGNTOOL_PATH = \"C:\\Program Files (x86)\\Windows Kits\\10\\App Certification Kit\\signtool.exe\"\n\n      # Extract thumbprint and subject name of the certificate (will be passed to electron-builder).\n\n      $Env:GD_SIGNTOOL_THUMBPRINT = $CodeSigningCert.Thumbprint\n\n      $Env:GD_SIGNTOOL_SUBJECT_NAME = ($CodeSigningCert.Subject -replace \", ?\", \"`n\" | ConvertFrom-StringData).CN\n\n      # Build the nsis installer (signed: electron-builder will use SignTool.exe with the certificate)\n\n      node scripts/build.js --win nsis --publish=never\n\n      # Build the appx (not signed).\n\n      $Env:GD_SIGNTOOL_THUMBPRINT = ''\n\n      $Env:GD_SIGNTOOL_SUBJECT_NAME = ''\n\n      node scripts/build.js --skip-app-build --win appx --publish=never\n\n      cd ..\\..\n\n  # Clean dist folder to keep only installers/binaries.\n  - cmd: >-\n      rmdir /s /q newIDE\\electron-app\\dist\\win-unpacked\n\n# Run a few tests on Windows.\ntest_script:\n  - cmd: >-\n      cd GDevelop.js\n\n      npm test\n\n      cd ..\n\n      cd newIDE\\app\n\n      npm test\n\n      cd ..\\..\n\nartifacts:\n  - path: newIDE\\electron-app\\dist\n    name: GDevelopWindows\n\n# Upload artifacts (AWS) - configuration is stored on AppVeyor itself.\ndeploy:\n  - provider: Environment\n    name: Amazon S3 releases\n  - provider: Environment\n    name: Amazon S3 latest releases\n"
        },
        {
          "name": "crowdin.yml",
          "type": "blob",
          "size": 0.7333984375,
          "content": "'project_id_env': 'CROWDIN_PROJECT_ID'\n'api_token_env': 'CROWDIN_PERSONAL_TOKEN'\n'base_path': '.'\n'base_url': 'https://api.crowdin.com'\n\n# Flatten files in Crowdin\n'preserve_hierarchy': false\n\n# \"Source\" files, which are .POT files extracted from the source code.\n# The built files are .PO files that are the compiled by `compile-translations`\n# script in `newIDE/app/scripts`.\nfiles:\n  [\n    {\n      'source': 'newIDE/app/src/locales/en/ide-messages.pot',\n      'translation': 'newIDE/app/src/locales/%locale_with_underscore%/ide-messages.po',\n    },\n    {\n      'source': 'scripts/gdcore-gdcpp-gdjs-extensions-messages.pot',\n      'translation': 'newIDE/app/src/locales/%locale_with_underscore%/gdcore-gdcpp-gdjs-extensions-messages.po',\n    },\n  ]\n"
        },
        {
          "name": "newIDE",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 1.869140625,
          "content": "{\n  // Note that while we use TypeScript to type the codebase (GDJS game engine\n  // and extension), we use esbuild to compile from TypeScript to JavaScript almost instantly.\n  // See `GDJS/scripts/build.js`.\n  \"compilerOptions\": {\n    \"noEmit\": true,\n    \"allowJs\": true,\n    \"noImplicitReturns\": true,\n    \"noUnusedLocals\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true,\n    \"strictPropertyInitialization\": true,\n    \"skipLibCheck\": true,\n    // Not used (as we don't compile with tsc), but necessary for iterating on Map/Set.\n    \"downlevelIteration\": true,\n    // Required by PixiJS, for importing 3rd-party dependencies like EventEmitter3.\n    \"esModuleInterop\": true,\n    // Required by PixiJS, loaders needs this to use the more strict mini-signal types.\n    \"paths\": {\n      \"mini-signals\": [\n        \"GDJS/node_modules/resource-loader/typings/mini-signals.d.ts\"\n      ]\n    },\n    \"baseUrl\": \"./\",\n    \"lib\": [\"DOM\", \"ES5\", \"ScriptHost\", \"ES2015.Iterable\", \"ES2015.Promise\"],\n    \"typeRoots\": [\"GDJS/node_modules/@types/\"],\n    // JSX syntax for lightweight rendering in the game engine:\n    \"jsx\": \"react\",\n    \"jsxFactory\": \"h\",\n    \"jsxFragmentFactory\": \"Fragment\"\n  },\n  \"include\": [\n    \"GDevelop.js/types.d.ts\",\n    \"GDJS/Runtime/**/*\",\n    \"Extensions/**/*.js\",\n    \"Extensions/**/*.ts\",\n    \"GDJS/tests/tests/**/*.js\",\n    \"GDJS/tests/tests-utils/**/*.js\",\n    \"GDJS/tests/benchmarks/**/*.js\"\n  ],\n  // Exclude pre-built js code\n  \"exclude\": [\n    \"GDJS/Runtime/pixi-renderers/pixi.js\",\n    \"GDJS/Runtime/Cordova\",\n    \"GDJS/Runtime/Electron\",\n    \"GDJS/Runtime/FacebookInstantGames\",\n    \"GDJS/Runtime/libs/CocoonJS\",\n    \"Extensions/Effects/pixi-filters/filter-alpha.js\",\n    \"SharedLibs/TileMapHelper/**/*\",\n    \"Extensions/Spine/pixi-spine/pixi-spine.js\",\n    \"Extensions/P2P/A_peer.js\",\n    \"Extensions/Multiplayer/peer.js\"\n  ]\n}\n"
        }
      ]
    }
  ]
}