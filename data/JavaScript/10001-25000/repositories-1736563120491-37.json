{
  "metadata": {
    "timestamp": 1736563120491,
    "page": 37,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "js-cookie/js-cookie",
      "stars": 22117,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0400390625,
          "content": "node_modules\ndist\n.sizecache.json\n*.log*\n"
        },
        {
          "name": ".nano-staged.mjs",
          "type": "blob",
          "size": 0.1005859375,
          "content": "export default {\n  '*.{js,mjs}': 'eslint --fix',\n  '*.{html,js,json,md,mjs,yml}': 'prettier --write'\n}\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.0205078125,
          "content": "dist\n.sizecache.json\n"
        },
        {
          "name": ".release-it.json",
          "type": "blob",
          "size": 0.693359375,
          "content": "{\n  \"git\": {\n    \"commitMessage\": \"Craft v${version} release\",\n    \"requireCleanWorkingDir\": true,\n    \"tagAnnotation\": \"Release v${version}\",\n    \"tagName\": \"v${version}\"\n  },\n  \"github\": {\n    \"draft\": true,\n    \"release\": true,\n    \"releaseName\": \"v${version}\"\n  },\n  \"hooks\": {\n    \"after:bump\": \"npm run dist\",\n    \"after:git:release\": \"if [ \\\"${isPreRelease}\\\" != \\\"true\\\" ]; then git tag -f latest && git push -f origin latest; fi\",\n    \"after:release\": \"echo Successfully created a release draft v${version} for ${repo.repository}. Please add release notes when necessary and publish it!\",\n    \"before:init\": \"npm test\"\n  },\n  \"npm\": {\n    \"publishArgs\": [\"--provenance\"],\n    \"skipChecks\": true\n  }\n}\n"
        },
        {
          "name": ".simple-git-hooks.json",
          "type": "blob",
          "size": 0.037109375,
          "content": "{\n  \"pre-commit\": \"npx nano-staged\"\n}\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.9619140625,
          "content": "## Issues\n\n- Report issues or feature requests on [GitHub Issues](https://github.com/js-cookie/js-cookie/issues).\n- If reporting a bug, please add a [simplified example](http://sscce.org/).\n\n## Pull requests\n\n- Create a new topic branch for every separate change you make.\n- Create a test case if you are fixing a bug or implementing an important feature.\n- Make sure the build runs successfully.\n\n## Development\n\n### Tools\n\nWe use the following tools for development:\n\n- [QUnit](http://qunitjs.com/) for tests.\n- [NodeJS](http://nodejs.org/download/) required to run grunt.\n- [Grunt](http://gruntjs.com/getting-started) for task management.\n\n### Getting started\n\nInstall [NodeJS](http://nodejs.org/).\n\nBrowse to the project root directory and install the dev dependencies:\n\n```bash\nnpm install -d\n```\n\nNote: when running `npm install` on Apple Silicon (M1/M2), the Puppeteer dependency will fail to install. To fix this, install dependencies while skipping to install the Puppeteer executable (not available for Apple Silicon, i.e. arm64):\n\n```bash\nexport PUPPETEER_EXECUTABLE_PATH=/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome\nexport PUPPETEER_SKIP_DOWNLOAD=true\nnpm install -d\n```\n\n^ For this to work you must have installed Google Chrome in the default location.\n\nMore information on this issue can be found [here](https://github.com/puppeteer/puppeteer/issues/7740) and [here](https://broddin.be/2022/09/19/fixing-the-chromium-binary-is-not-available-for-arm64/).\n\nTo execute the build and tests run the following command in the root of the project:\n\n```bash\nnpx grunt\n```\n\nYou should see a green message in the console:\n\n```\nDone, without errors.\n```\n\n### Tests\n\nYou can also run the tests in the browser.  \nStart a test server from the project root:\n\n```bash\nnpx grunt connect:tests\n```\n\nThis will automatically open the test suite at http://127.0.0.1:10000 in the default browser, with livereload enabled.\n\n_Note: we recommend cleaning all the browser cookies before running the tests, that can avoid false positive failures._\n\n### Automatic build\n\nYou can build automatically after a file change using the following command:\n\n```bash\nnpx grunt watch\n```\n\n## Integration with server-side\n\njs-cookie allows integrating the encoding test suite with solutions written in other server-side languages. To integrate successfully, the server-side solution need to execute the `test/encoding.html` file in it's integration testing routine with a web automation tool, like [Selenium](http://www.seleniumhq.org/). js-cookie test suite exposes an API to make this happen.\n\n### ?integration_baseurl\n\nSpecify the base url to pass the cookies into the server through a query string. If `integration_baseurl` query is not present, then js-cookie will assume there's no server.\n\n### Handling requests\n\nWhen js-cookie encoding tests are executed, it will request a url in the server through an iframe representing each test being run. js-cookie expects the server to handle the input and return the proper `Set-Cookie` headers in the response. js-cookie will then read the response and verify if the encoding is consistent with js-cookie default encoding mechanism\n\njs-cookie will send some requests to the server from the baseurl in the format `/encoding?name=<cookie>`, where `<cookie>` represents the cookie-name to be read from the request.\n\nThe server should handle those requests, internally parsing the cookie from the request and writing it again. It must set an `application/json` content type containing an object literal in the content body with `name` and `value` keys, each representing the cookie-name and cookie-value decoded by the server-side implementation.\n\nIf the server fails to respond with this specification in any request, the related QUnit test will fail. This is to make sure the server-side implementation will always be in sync with js-cookie encoding tests for maximum compatibility.\n\n### Projects using it\n\nThis hook is being used in the following projects:\n\n- [Java Cookie](https://github.com/js-cookie/java-cookie).\n"
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 2.8466796875,
          "content": "/* eslint-env node */\nfunction encodingMiddleware(request, response, next) {\n  const URL = require('url').URL\n  const url = new URL(request.url, 'http://localhost')\n\n  if (url.pathname !== '/encoding') {\n    next()\n    return\n  }\n\n  const cookieName = url.searchParams.get('name')\n  const cookieValue = url.searchParams.get('value')\n\n  response.setHeader('content-type', 'application/json')\n  response.end(\n    JSON.stringify({\n      name: cookieName,\n      value: cookieValue\n    })\n  )\n}\n\nconst config = {\n  qunit: {\n    options: {\n      puppeteer: {\n        headless: 'new'\n      },\n      inject: [\n        'test/fix-qunit-reference.js', // => https://github.com/gruntjs/grunt-contrib-qunit/issues/202\n        'node_modules/grunt-contrib-qunit/chrome/bridge.js'\n      ]\n    },\n    all: {\n      options: {\n        urls: [\n          'http://127.0.0.1:9998/',\n          'http://127.0.0.1:9998/sub',\n          'http://127.0.0.1:9998/module.html',\n          'http://127.0.0.1:9998/encoding.html?integration_baseurl=http://127.0.0.1:9998/'\n        ]\n      }\n    }\n  },\n  watch: {\n    options: {\n      livereload: true\n    },\n    files: ['src/**/*.mjs', 'test/**/*.js'],\n    tasks: 'default'\n  },\n  compare_size: {\n    files: [\n      'dist/js.cookie.mjs',\n      'dist/js.cookie.min.mjs',\n      'dist/js.cookie.js',\n      'dist/js.cookie.min.js'\n    ],\n    options: {\n      compress: {\n        gz: (fileContents) => require('gzip-js').zip(fileContents, {}).length\n      }\n    }\n  },\n  connect: {\n    'build-qunit': {\n      options: {\n        port: 9998,\n        base: ['.', 'test'],\n        middleware: function (connect, options, middlewares) {\n          middlewares.unshift(encodingMiddleware)\n          return middlewares\n        }\n      }\n    },\n    tests: {\n      options: {\n        port: 10000,\n        base: ['.', 'test'],\n        open: 'http://127.0.0.1:10000',\n        keepalive: true,\n        livereload: true,\n        middleware: function (connect, options, middlewares) {\n          middlewares.unshift(encodingMiddleware)\n          return middlewares\n        }\n      }\n    }\n  },\n  exec: {\n    format: 'npm run format',\n    lint: 'npm run lint',\n    rollup: 'npx rollup -c',\n    'test-node': 'npx qunit test/node.js',\n    'browserstack-runner': 'node_modules/.bin/browserstack-runner --verbose'\n  }\n}\n\nmodule.exports = function (grunt) {\n  grunt.initConfig(config)\n\n  // Load dependencies\n  Object.keys(grunt.file.readJSON('package.json').devDependencies)\n    .filter((key) => key !== 'grunt' && key.startsWith('grunt'))\n    .forEach(grunt.loadNpmTasks)\n\n  grunt.registerTask('test', [\n    'exec:rollup',\n    'connect:build-qunit',\n    'qunit',\n    'exec:test-node'\n  ])\n  grunt.registerTask('browserstack', [\n    'exec:rollup',\n    'exec:browserstack-runner'\n  ])\n  grunt.registerTask('dev', [\n    'exec:format',\n    'exec:lint',\n    'test',\n    'compare_size'\n  ])\n  grunt.registerTask('default', 'dev')\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.091796875,
          "content": "MIT License\n\nCopyright (c) 2018 Copyright 2018 Klaus Hartl, Fagner Brack, GitHub Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.673828125,
          "content": "<p align=\"center\">\n  <img src=\"https://cloud.githubusercontent.com/assets/835857/14581711/ba623018-0436-11e6-8fce-d2ccd4d379c9.gif\">\n</p>\n\n# JavaScript Cookie [![CI](https://github.com/js-cookie/js-cookie/actions/workflows/ci.yml/badge.svg)](https://github.com/js-cookie/js-cookie/actions/workflows/ci.yml) [![Code Climate](https://codeclimate.com/github/js-cookie/js-cookie.svg)](https://codeclimate.com/github/js-cookie/js-cookie) [![npm](https://img.shields.io/github/package-json/v/js-cookie/js-cookie)](https://www.npmjs.com/package/js-cookie) [![size](https://img.shields.io/bundlephobia/minzip/js-cookie/3)](https://www.npmjs.com/package/js-cookie) [![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/js-cookie/badge?style=rounded)](https://www.jsdelivr.com/package/npm/js-cookie)\n\nA simple, lightweight JavaScript API for handling cookies\n\n- Extensive browser support\n- Accepts [any](#encoding) character\n- [Heavily](test) tested\n- No dependency\n- Supports ES modules\n- Supports AMD/CommonJS\n- [RFC 6265](https://tools.ietf.org/html/rfc6265) compliant\n- Useful [Wiki](https://github.com/js-cookie/js-cookie/wiki)\n- Enable [custom encoding/decoding](#converters)\n- **< 800 bytes** gzipped!\n\n**👉👉 If you're viewing this at https://github.com/js-cookie/js-cookie, you're reading the documentation for the main branch.\n[View documentation for the latest release.](https://github.com/js-cookie/js-cookie/tree/latest#readme) 👈👈**\n\n## Installation\n\n### NPM\n\nJavaScript Cookie supports [npm](https://www.npmjs.com/package/js-cookie) under the name `js-cookie`.\n\n```bash\nnpm i js-cookie\n```\n\nThe npm package has a `module` field pointing to an ES module variant of the library, mainly to provide support for ES module aware bundlers, whereas its `browser` field points to an UMD module for full backward compatibility.\n\n_Not all browsers support ES modules natively yet_. For this reason the npm package/release provides both the ES and UMD module variant and you may want to include the ES module along with the UMD fallback to account for this:\n\n### CDN\n\nAlternatively, include js-cookie via [jsDelivr CDN](https://www.jsdelivr.com/package/npm/js-cookie).\n\n## Basic Usage\n\nImport the library:\n\n```javascript\nimport Cookies from 'js-cookie'\n// or\nconst Cookies = require('js-cookie')\n```\n\nCreate a cookie, valid across the entire site:\n\n```javascript\nCookies.set('name', 'value')\n```\n\nCreate a cookie that expires 7 days from now, valid across the entire site:\n\n```javascript\nCookies.set('name', 'value', { expires: 7 })\n```\n\nCreate an expiring cookie, valid to the path of the current page:\n\n```javascript\nCookies.set('name', 'value', { expires: 7, path: '' })\n```\n\nRead cookie:\n\n```javascript\nCookies.get('name') // => 'value'\nCookies.get('nothing') // => undefined\n```\n\nRead all visible cookies:\n\n```javascript\nCookies.get() // => { name: 'value' }\n```\n\n_Note: It is not possible to read a particular cookie by passing one of the cookie attributes (which may or may not\nhave been used when writing the cookie in question):_\n\n```javascript\nCookies.get('foo', { domain: 'sub.example.com' }) // `domain` won't have any effect...!\n```\n\nThe cookie with the name `foo` will only be available on `.get()` if it's visible from where the\ncode is called; the domain and/or path attribute will not have an effect when reading.\n\nDelete cookie:\n\n```javascript\nCookies.remove('name')\n```\n\nDelete a cookie valid to the path of the current page:\n\n```javascript\nCookies.set('name', 'value', { path: '' })\nCookies.remove('name') // fail!\nCookies.remove('name', { path: '' }) // removed!\n```\n\n_IMPORTANT! When deleting a cookie and you're not relying on the [default attributes](#cookie-attributes), you must pass the exact same `path`, `domain`, `secure` and `sameSite` attributes that were used to set the cookie:_\n\n```javascript\nCookies.remove('name', { path: '', domain: '.yourdomain.com', secure: true })\n```\n\n_Note: Removing a nonexistent cookie neither raises any exception nor returns any value._\n\n## Namespace conflicts\n\nIf there is any danger of a conflict with the namespace `Cookies`, the `noConflict` method will allow you to define a new namespace and preserve the original one. This is especially useful when running the script on third party sites e.g. as part of a widget or SDK.\n\n```javascript\n// Assign the js-cookie api to a different variable and restore the original \"window.Cookies\"\nvar Cookies2 = Cookies.noConflict()\nCookies2.set('name', 'value')\n```\n\n_Note: The `.noConflict` method is not necessary when using AMD or CommonJS, thus it is not exposed in those environments._\n\n## Encoding\n\nThis project is [RFC 6265](http://tools.ietf.org/html/rfc6265#section-4.1.1) compliant. All special characters that are not allowed in the cookie-name or cookie-value are encoded with each one's UTF-8 Hex equivalent using [percent-encoding](http://en.wikipedia.org/wiki/Percent-encoding).\nThe only character in cookie-name or cookie-value that is allowed and still encoded is the percent `%` character, it is escaped in order to interpret percent input as literal.\nPlease note that the default encoding/decoding strategy is meant to be interoperable [only between cookies that are read/written by js-cookie](https://github.com/js-cookie/js-cookie/pull/200#discussion_r63270778). To override the default encoding/decoding strategy you need to use a [converter](#converters).\n\n_Note: According to [RFC 6265](https://tools.ietf.org/html/rfc6265#section-6.1), your cookies may get deleted if they are too big or there are too many cookies in the same domain, [more details here](https://github.com/js-cookie/js-cookie/wiki/Frequently-Asked-Questions#why-are-my-cookies-being-deleted)._\n\n## Cookie Attributes\n\nCookie attribute defaults can be set globally by creating an instance of the api via `withAttributes()`, or individually for each call to `Cookies.set(...)` by passing a plain object as the last argument. Per-call attributes override the default attributes.\n\n### expires\n\nDefine when the cookie will be removed. Value must be a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) which will be interpreted as days from time of creation or a [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instance. If omitted, the cookie becomes a session cookie.\n\nTo create a cookie that expires in less than a day, you can check the [FAQ on the Wiki](https://github.com/js-cookie/js-cookie/wiki/Frequently-Asked-Questions#expire-cookies-in-less-than-a-day).\n\n**Default:** Cookie is removed when the user closes the browser.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { expires: 365 })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### path\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) indicating the path where the cookie is visible.\n\n**Default:** `/`\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { path: '' })\nCookies.get('name') // => 'value'\nCookies.remove('name', { path: '' })\n```\n\n**Note regarding Internet Explorer:**\n\n> Due to an obscure bug in the underlying WinINET InternetGetCookie implementation, IE’s document.cookie will not return a cookie if it was set with a path attribute containing a filename.\n\n(From [Internet Explorer Cookie Internals (FAQ)](http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx))\n\nThis means one cannot set a path using `window.location.pathname` in case such pathname contains a filename like so: `/check.html` (or at least, such cookie cannot be read correctly).\n\nIn fact, you should never allow untrusted input to set the cookie attributes or you might be exposed to a [XSS attack](https://github.com/js-cookie/js-cookie/issues/396).\n\n### domain\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) indicating a valid domain where the cookie should be visible. The cookie will also be visible to all subdomains.\n\n**Default:** Cookie is visible only to the domain or subdomain of the page where the cookie was created, except for Internet Explorer (see below).\n\n**Examples:**\n\nAssuming a cookie that is being created on `site.com`:\n\n```javascript\nCookies.set('name', 'value', { domain: 'subdomain.site.com' })\nCookies.get('name') // => undefined (need to read at 'subdomain.site.com')\n```\n\n**Note regarding Internet Explorer default behavior:**\n\n> Q3: If I don’t specify a DOMAIN attribute (for) a cookie, IE sends it to all nested subdomains anyway?\n> A: Yes, a cookie set on example.com will be sent to sub2.sub1.example.com.\n> Internet Explorer differs from other browsers in this regard.\n\n(From [Internet Explorer Cookie Internals (FAQ)](http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx))\n\nThis means that if you omit the `domain` attribute, it will be visible for a subdomain in IE.\n\n### secure\n\nEither `true` or `false`, indicating if the cookie transmission requires a secure protocol (https).\n\n**Default:** No secure protocol requirement.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { secure: true })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### sameSite\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), allowing to control whether the browser is sending a cookie along with cross-site requests.\n\nDefault: not set.\n\n**Note that more recent browsers are making \"Lax\" the default value even without specifiying anything here.**\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { sameSite: 'strict' })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### Setting up defaults\n\n```javascript\nconst api = Cookies.withAttributes({ path: '/', domain: '.example.com' })\n```\n\n## Converters\n\n### Read\n\nCreate a new instance of the api that overrides the default decoding implementation. All get methods that rely in a proper decoding to work, such as `Cookies.get()` and `Cookies.get('name')`, will run the given converter for each cookie. The returned value will be used as the cookie value.\n\nExample from reading one of the cookies that can only be decoded using the `escape` function:\n\n```javascript\ndocument.cookie = 'escaped=%u5317'\ndocument.cookie = 'default=%E5%8C%97'\nvar cookies = Cookies.withConverter({\n  read: function (value, name) {\n    if (name === 'escaped') {\n      return unescape(value)\n    }\n    // Fall back to default for all other cookies\n    return Cookies.converter.read(value, name)\n  }\n})\ncookies.get('escaped') // 北\ncookies.get('default') // 北\ncookies.get() // { escaped: '北', default: '北' }\n```\n\n### Write\n\nCreate a new instance of the api that overrides the default encoding implementation:\n\n```javascript\nCookies.withConverter({\n  write: function (value, name) {\n    return value.toUpperCase()\n  }\n})\n```\n\n## TypeScript declarations\n\n```bash\nnpm i @types/js-cookie\n```\n\n## Server-side integration\n\nCheck out the [Servers Docs](SERVER_SIDE.md)\n\n## Contributing\n\nCheck out the [Contributing Guidelines](CONTRIBUTING.md)\n\n## Releasing\n\nReleasing should be done via the `Release` GitHub Actions workflow, so that published packages on npmjs.com have package provenance.\n\nGitHub releases are created as a draft and need to be published manually!\n(This is so we are able to craft suitable release notes before publishing.)\n\n## Supporters\n\n<p>\n  <a href=\"https://www.browserstack.com/\"><img src=\"https://raw.githubusercontent.com/wiki/js-cookie/js-cookie/Browserstack-logo%402x.png\" width=\"150\"></a>\n</p>\n\nMany thanks to [BrowserStack](https://www.browserstack.com/) for providing unlimited browser testing free of cost.\n\n## Authors\n\n- [Klaus Hartl](https://github.com/carhartl)\n- [Fagner Brack](https://github.com/FagnerMartinsBrack)\n- And awesome [contributors](https://github.com/js-cookie/js-cookie/graphs/contributors)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.6376953125,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 3.x     | :white_check_mark: |\n| < 3.0   | :x:                |\n\n## Reporting a Vulnerability\n\nTo report a vulnerability, please follow https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability\n\nOnce your report is received, the project maintainers will review it and respond accordingly. We appreciate your responsible disclosure and will make every effort to address the issue in a timely manner.\n\nThank you for helping us maintain the security of js-cookie!\n"
        },
        {
          "name": "SERVER_SIDE.md",
          "type": "blob",
          "size": 5.6982421875,
          "content": "# Server-side integration\n\nThere are some servers that are not compliant with the [RFC 6265](https://tools.ietf.org/html/rfc6265). For those, some characters that are not encoded by JavaScript Cookie might be treated differently.\n\nHere we document the most important server-side peculiarities and their workarounds. Feel free to send a [Pull Request](https://github.com/js-cookie/js-cookie/blob/master/CONTRIBUTING.md#pull-requests) if you see something that can be improved.\n\n_Disclaimer: This documentation is entirely based on community provided information. The examples below should be used only as a reference._\n\n## PHP\n\nIn PHP, `setcookie()` function encodes cookie values using `urlencode()` function, which applies `%`-encoding but also encodes spaces as `+` signs, [for historical reasons](http://php.net/manual/en/function.urlencode.php#function.urlencode). When cookies are read back via `$_COOKIE` or `filter_input(INPUT_COOKIE)`, they would go trough a decoding process which decodes `%`-encoded sequences and also converts `+` signs back to spaces. However, the plus (`+`) sign is valid cookie character by itself, which means that libraries that adhere to standards will interpret `+` signs differently to PHP.\n\nThis presents two types of problems:\n\n1. PHP writes a cookie via `setcookie()` and all spaces get converted to `+` signs. JavaScript Cookie read `+` signs and uses them literally, since it is a valid cookie character.\n2. JavaScript Cookie writes a cookie with a value that contains `+` signs and stores it as is, since it is a valid cookie character. PHP read a cookie and converts `+` signs to spaces.\n\nTo make both PHP and JavaScript Cookie play nicely together?\n\n**In PHP**, use `setrawcookie()` instead of `setcookie()`:\n\n```php\nsetrawcookie($name, rawurlencode($value));\n```\n\n**In JavaScript**, use a custom converter.\n\n**Example**:\n\n```javascript\nvar PHPCookies = Cookies.withConverter({\n  write: Cookies.converter.write,\n  read: function (value) {\n    // Decode the plus sign to spaces first, otherwise \"legit\" encoded pluses\n    // will be replaced incorrectly\n    value = value.replace(/\\+/g, ' ')\n    // Decode all characters according to the \"encodeURIComponent\" spec\n    return Cookies.converter.read(value)\n  }\n})\n```\n\nRack seems to have [a similar problem](https://github.com/js-cookie/js-cookie/issues/70#issuecomment-132503017).\n\n## Tomcat\n\n### Version >= 7.x\n\nIt seems that there is a situation where Tomcat does not [read the parens correctly](https://github.com/js-cookie/js-cookie/issues/92#issue-107743407). To fix this you need to write a custom write converter.\n\n**Example**:\n\n```javascript\nvar TomcatCookies = Cookies.withConverter({\n  write: function (value) {\n    return (\n      Cookies.converter\n        .write(value)\n        // Encode the parens that are interpreted incorrectly by Tomcat\n        .replace(/[()]/g, escape)\n    )\n  },\n  read: Cookies.converter.read\n})\n```\n\n### Version >= 8.0.15\n\nSince Tomcat 8.0.15, it is possible to configure RFC 6265 compliance by changing your `conf/context.xml` file and adding the new [CookieProcessor](https://tomcat.apache.org/tomcat-8.0-doc/config/cookie-processor.html) nested inside the Context element. It would be like this:\n\n```xml\n<Context>\n  <CookieProcessor className=\"org.apache.tomcat.util.http.Rfc6265CookieProcessor\"/>\n</context>\n```\n\nAnd you're all done.\n\nAlternatively, you can check the [Java Cookie](https://github.com/js-cookie/java-cookie) project, which integrates nicely with JavaScript Cookie.\n\n## JBoss 7.1.1\n\nIt seems that the servlet implementation of JBoss 7.1.1 [does not read some characters correctly](https://github.com/js-cookie/js-cookie/issues/70#issuecomment-148944674), even though they are allowed as per [RFC 6265](https://tools.ietf.org/html/rfc6265#section-4.1.1). To fix this you need to write a custom converter to send those characters correctly.\n\n**Example**:\n\n```javascript\nvar JBossCookies = Cookies.withConverter({\n  write: function (value) {\n    return (\n      Cookies.converter\n        .write(value)\n        // Encode again the characters that are not allowed in JBoss 7.1.1, like \"[\" and \"]\":\n        .replace(/[[\\]]/g, encodeURIComponent)\n    )\n  },\n  read: Cookies.converter.read\n})\n```\n\nAlternatively, you can check the [Java Cookie](https://github.com/js-cookie/java-cookie) project, which integrates nicely with JavaScript Cookie.\n\n## Express\n\n[Express](https://github.com/expressjs/express) handles cookies with JSON by [prepending](https://github.com/expressjs/express/blob/master/lib/response.js#L827) a `j:` prefix to [verify](https://github.com/expressjs/cookie-parser/blob/master/index.js#L83) if it contains a JSON value later.\n\nAn example to solve this:\n\n**Write**\n\n```js\n// Client\nCookies.set('name', 'j:' + JSON.stringify({ key: value }))\n\n// Or in Express server to prevent prepending of j: prefix\nres.cookie('name', JSON.stringify({ key: value }))\n```\n\n**Read**\n\n```js\n// Client\nJSON.parse(Cookies.get('name').slice(2))\n\n// Express already parses JSON cookies if `cookie-parser` middleware is installed.\n// If you used the solution for Express above:\nJSON.parse(req.cookies.name)\n```\n\nHowever, it's still quite a handful to do. To avoid that situation, writing a custom converter is recommended.\n\n**Example**:\n\n```js\nvar ExpressCookies = Cookies.withConverter({\n  write: function (value) {\n    // Prepend j: prefix if it is JSON object\n    try {\n      var tmp = JSON.parse(value)\n      if (typeof tmp !== 'object') {\n        throw new Error()\n      }\n      value = 'j:' + JSON.stringify(tmp)\n    } catch (e) {}\n\n    return Cookies.converter.write(value)\n  },\n  read: function (value) {\n    value = Cookies.converter.read(value)\n\n    // Check if the value contains j: prefix otherwise return as is\n    return value.slice(0, 2) === 'j:' ? value.slice(2) : value\n  }\n})\n```\n"
        },
        {
          "name": "browserstack.json",
          "type": "blob",
          "size": 0.86328125,
          "content": "{\n  \"test_framework\": \"qunit\",\n  \"test_path\": [\"test/index.html\"],\n  \"exit_with_fail\": true,\n  \"browsers\": [\n    \"chrome_latest\",\n    \"chrome_previous\",\n    \"firefox_latest\",\n    \"firefox_previous\",\n    \"opera_latest\",\n    {\n      \"browser\": \"safari\",\n      \"browser_version\": \"latest\",\n      \"os\": \"OS X\",\n      \"os_version\": \"Ventura\"\n    },\n    {\n      \"browser\": \"safari\",\n      \"browser_version\": \"latest\",\n      \"os\": \"OS X\",\n      \"os_version\": \"Monterey\"\n    },\n    {\n      \"device\": \"iPhone 14\",\n      \"os\": \"ios\",\n      \"os_version\": \"16\",\n      \"browserstack.appium_version\": \"1.22.0\",\n      \"browserstack.local\": \"false\",\n      \"real_mobile\": \"true\"\n    },\n    {\n      \"device\": \"Google Pixel 7\",\n      \"os\": \"android\",\n      \"os_version\": \"13.0\",\n      \"browserstack.appium_version\": \"1.22.0\",\n      \"browserstack.local\": \"false\",\n      \"real_mobile\": \"true\"\n    }\n  ]\n}\n"
        },
        {
          "name": "eslint.config.mjs",
          "type": "blob",
          "size": 0.4970703125,
          "content": "import globals from 'globals'\nimport js from '@eslint/js'\n\nconst languageOptions = {\n  globals: {\n    ...globals.browser\n  }\n}\nexport default [\n  {\n    ignores: ['dist/*']\n  },\n  {\n    ...js.configs.recommended,\n    files: ['**/*.js'],\n    ignores: ['examples/**/src/*.js'],\n    languageOptions: {\n      ...languageOptions,\n      sourceType: 'commonjs'\n    }\n  },\n  {\n    ...js.configs.recommended,\n    files: ['**/*.mjs'],\n    languageOptions: {\n      ...languageOptions,\n      ecmaVersion: 2021\n    }\n  }\n]\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.0654296875,
          "content": "/* eslint-env node */\nmodule.exports = require('./dist/js.cookie')\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.8212890625,
          "content": "{\n  \"name\": \"js-cookie\",\n  \"version\": \"3.0.5\",\n  \"description\": \"A simple, lightweight JavaScript API for handling cookies\",\n  \"browser\": \"dist/js.cookie.js\",\n  \"module\": \"dist/js.cookie.mjs\",\n  \"unpkg\": \"dist/js.cookie.min.js\",\n  \"jsdelivr\": \"dist/js.cookie.min.js\",\n  \"exports\": {\n    \".\": {\n      \"import\": \"./dist/js.cookie.mjs\",\n      \"require\": \"./dist/js.cookie.js\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"directories\": {\n    \"test\": \"test\"\n  },\n  \"keywords\": [\n    \"cookie\",\n    \"cookies\",\n    \"browser\",\n    \"amd\",\n    \"commonjs\",\n    \"client\",\n    \"js-cookie\"\n  ],\n  \"scripts\": {\n    \"test\": \"grunt test\",\n    \"format\": \"prettier --write .\",\n    \"format:check\": \"prettier --check .\",\n    \"lint\": \"eslint --fix .\",\n    \"lint:check\": \"eslint .\",\n    \"dist\": \"rm -rf dist/* && rollup -c\",\n    \"release\": \"release-it\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/js-cookie/js-cookie.git\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"dist/**/*\"\n  ],\n  \"author\": \"Klaus Hartl\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@rollup/plugin-terser\": \"^0.4.4\",\n    \"browserstack-runner\": \"github:browserstack/browserstack-runner#1e85e559951bdf97ffe2a7c744ee67ca83589fde\",\n    \"eslint\": \"^9.0.0\",\n    \"eslint-config-prettier\": \"^9.0.0\",\n    \"eslint-plugin-html\": \"^8.0.0\",\n    \"eslint-plugin-markdown\": \"^5.0.0\",\n    \"grunt\": \"^1.0.4\",\n    \"grunt-compare-size\": \"^0.4.2\",\n    \"grunt-contrib-connect\": \"^5.0.0\",\n    \"grunt-contrib-qunit\": \"^10.0.0\",\n    \"grunt-contrib-watch\": \"^1.1.0\",\n    \"grunt-exec\": \"^3.0.0\",\n    \"gzip-js\": \"^0.3.2\",\n    \"nano-staged\": \"^0.8.0\",\n    \"prettier\": \"^3.0.0\",\n    \"qunit\": \"^2.19.4\",\n    \"release-it\": \"^18.0.0\",\n    \"rollup\": \"^4.1.4\",\n    \"rollup-plugin-filesize\": \"^10.0.0\",\n    \"rollup-plugin-license\": \"^3.2.0\",\n    \"simple-git-hooks\": \"^2.8.1\"\n  },\n  \"engines\": {\n    \"node\": \">=18\"\n  }\n}\n"
        },
        {
          "name": "prettier.config.mjs",
          "type": "blob",
          "size": 0.0771484375,
          "content": "export default {\n  semi: false,\n  singleQuote: true,\n  trailingComma: 'none'\n}\n"
        },
        {
          "name": "rollup.config.mjs",
          "type": "blob",
          "size": 1.318359375,
          "content": "import * as fs from 'fs'\nimport terser from '@rollup/plugin-terser'\nimport filesize from 'rollup-plugin-filesize'\nimport license from 'rollup-plugin-license'\n\nconst loadJSON = (path) =>\n  JSON.parse(fs.readFileSync(new URL(path, import.meta.url)))\n\nconst pkg = loadJSON('./package.json')\n\nconst licenseBanner = license({\n  banner: {\n    content: '/*! <%= pkg.name %> v<%= pkg.version %> | <%= pkg.license %> */',\n    commentStyle: 'none'\n  }\n})\n\nexport default [\n  {\n    input: 'src/api.mjs',\n    output: [\n      // config for <script type=\"module\">\n      {\n        file: pkg.module,\n        format: 'esm'\n      },\n      // config for <script nomodule>\n      {\n        file: pkg.browser,\n        format: 'umd',\n        name: 'Cookies',\n        noConflict: true,\n        banner: ';'\n      }\n    ],\n    plugins: [licenseBanner]\n  },\n  {\n    input: 'src/api.mjs',\n    output: [\n      // config for <script type=\"module\">\n      {\n        file: pkg.module.replace('.mjs', '.min.mjs'),\n        format: 'esm'\n      },\n      // config for <script nomodule>\n      {\n        file: pkg.browser.replace('.js', '.min.js'),\n        format: 'umd',\n        name: 'Cookies',\n        noConflict: true\n      }\n    ],\n    plugins: [\n      terser(),\n      licenseBanner, // must be applied after terser, otherwise it's being stripped away...\n      filesize()\n    ]\n  }\n]\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}