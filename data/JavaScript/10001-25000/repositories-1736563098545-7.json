{
  "metadata": {
    "timestamp": 1736563098545,
    "page": 7,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "goldfire/howler.js",
      "stars": 24211,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "BACKERS.md",
          "type": "blob",
          "size": 0.8544921875,
          "content": "# Backers/Sponsors\nSupport the ongoing development of howler.js and get your logo on our README with a link to your site [[become a sponsor](https://github.com/sponsors/goldfire)]. You can also become a backer at a lower tier and get your name in the [BACKERS](https://github.com/goldfire/howler.js/blob/master/BACKERS.md) list. All support is greatly appreciated!\n\n## Sponsors [[add your logo](https://github.com/sponsors/goldfire)]\n[![GoldFire Studios](https://s3.amazonaws.com/howler.js/sponsors/goldfire_studios.png \"GoldFire Studios\")](https://goldfirestudios.com)\n\n## Backers [[add your name](https://github.com/sponsors/goldfire)]\n* [James Simpson](https://github.com/goldfire)\n* [Spark Dev Network](https://github.com/SparkDevNetwork)\n* [cacherich](https://github.com/cacherich)\n* [Kumospace](https://github.com/kumospace)\n* [Microsoft](https://github.com/microsoft)\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 35.1328125,
          "content": "## 2.2.3 (September 20, 2023)\n- `FIXED` Invalid regex detection of Opera versions 100+ ([#1676](https://github.com/goldfire/howler.js/pull/1676)).\n- `FIXED` The `pannerAttr` method wouldn't set the values the first time it was called ([#1497](https://github.com/goldfire/howler.js/issues/1497)).\n- `FIXED` Error when refreshing the buffer on a sound that has already been unloaded ([#1508](https://github.com/goldfire/howler.js/issues/1508)).\n\n## 2.2.3 (June 30, 2021)\n- `FIXED` Fatal error in Chrome for iOS ([#1491](https://github.com/goldfire/howler.js/issues/1491)).\n\n## 2.2.2 (June 27, 2021)\nThe README has been updated with more examples and various clarifications. PRs/issues with suggestions for further improvements are appreciated.\n\n- `CHANGED` Include `keydown` event when unlocking audio ([#1417](https://github.com/goldfire/howler.js/pull/1417)).\n- `CHANGED` The audio state is changed to `loading` while the player is buffering ([#1444](https://github.com/goldfire/howler.js/pull/1444)).\n- `FIXED` Looping sounds wouldn't always work correctly in recent versions of Firefox desktop ([#1445](https://github.com/goldfire/howler.js/pull/1445)).\n- `FIXED` Disabled WebM in Safari 14 until bug in Safari is resolved ([#1476](https://github.com/goldfire/howler.js/issues/1476)).\n- `FIXED` Error when calling `seek()` on audio that hasn't loaded ([#1423](https://github.com/goldfire/howler.js/pull/1423)).\n- `FIXED` Before a sound had loaded, calling `pause()` after `seek()` didn't have the intended behavior ([#1439](https://github.com/goldfire/howler.js/issues/1439)).\n\n## 2.2.1 (Oct 25, 2020)\n- `FIXED` The latest Safari 14 changed how WAV support was detected ([#1415](https://github.com/goldfire/howler.js/pull/1415)).\n- `FIXED` Edge case that could cause an infinite loop while fading ([#1369](https://github.com/goldfire/howler.js/pull/1369)).\n- `FIXED` Calling `seek` without a seek value while a file was still loading no longer adds it to the queue and correctly returns `0` ([#1189](https://github.com/goldfire/howler.js/issues/1189)).\n- `FIXED` Correctly handle finite audio files that return `Infinity` duration in Safari ([#658](https://github.com/goldfire/howler.js/pull/658)).\n\n## 2.2.0 (May 17, 2020)\n- `ADDED` New `xhr` property that allows setting custom headers (such as for auth), changing the `withCredentials` setting and specifying the HTTP method for the request. These only apply to Web Audio ([#997](https://github.com/goldfire/howler.js/pull/997)).\n- `ADDED` New `Howler.stop()` global stop method to stop all sounds at once ([#1308](https://github.com/goldfire/howler.js/issues/1308)).\n- `ADDED` Support for `m4b` audio format ([#1170](https://github.com/goldfire/howler.js/pull/1170)).\n- `CHANGED` Allow passing `metadata` string to `preload` option to only preload the metadata ([#1140](https://github.com/goldfire/howler.js/pull/1140)).\n- `FIXED` Correctly handle AudioContext interrupted state causing stuck `suspending` state ([#1106](https://github.com/goldfire/howler.js/pull/1106)).\n- `FIXED` The `volume` method would sometimes return incorrect values when using very short `fade` lengths ([#1045](https://github.com/goldfire/howler.js/pull/1045)).\n- `FIXED` Error that `HowlerGlobal` was not defined when using `jsdom-global` ([#1331](https://github.com/goldfire/howler.js/pull/1331)).\n- `FIXED` Memory leak in Safari when an audio context can't be unlocked ([#1338](https://github.com/goldfire/howler.js/pull/1338)).\n\n### Breaking Changes\n* The `xhrWithCredentials` property is now included in the `xhr` property object with key `withCredentials`.\n\n## 2.1.3 (December 24, 2019)\n- `FIXED` Don't try to obtain HTML5 audio if there is no audio support ([#1191](https://github.com/goldfire/howler.js/issues/1191)).\n- `FIXED` The x/y/z orientations for the top of the listener weren't being set properly ([#1221](https://github.com/goldfire/howler.js/pull/1221)).\n- `FIXED` Race condition that could prevent looping audio from always looping ([#1225](https://github.com/goldfire/howler.js/pull/1225)).\n- `FIXED` Race condition that could cause the main volume to be reset to 1 if called before `unlockAudio` ([#1210](https://github.com/goldfire/howler.js/pull/1210)).\n\n## 2.1.2 (April 19, 2019)\n- `FIXED` Removed browser check for auto play unlock since all major browsers now implement this.\n- `FIXED` Live streams now stop downloading when they are stopped, also fixing issue in Chrome with stopping twice ([#1129](https://github.com/goldfire/howler.js/issues/1129)).\n- `FIXED` Prevent error in Edge when `Audio` isn't supported ([#1147](https://github.com/goldfire/howler.js/issues/1147)).\n\n## 2.1.1 (December 21, 2018)\n- `FIXED` Regression that broke simple play/pause usage in certain edge cases ([#1101](https://github.com/goldfire/howler.js/issues/1101)).\n- `FIXED` Loading and unloading multiple Howls with the same src could cause them all to unload ([#1103](https://github.com/goldfire/howler.js/issues/1103)).\n\n## 2.1.0 (December 12, 2018)\n- `ADDED` Howler now maintains a general pool of HTML5 Audio nodes that are unlocked on first user input, which fixes issues with subsequent HTML5 Audio plays not working ([#1008](https://github.com/goldfire/howler.js/pull/1008)).\n- `ADDED` New global `html5PoolSize` option that allows setting the default size of the HTML5 Audio object pool ([#1008](https://github.com/goldfire/howler.js/pull/1008)).\n- `CHANGED` Since locking of audio is no longer mobile-only, `mobileAutoEnable` has been renamed to `autoUnlock`.\n- `FIXED` Playing a sound with locked audio in Chrome or elsewhere could cause `playing()` to return `true` ([#939](https://github.com/goldfire/howler.js/issues/939)).\n- `FIXED` Correctly use `setPosition` instead of `setOrientation` in Safari ([#1033](https://github.com/goldfire/howler.js/pull/1033)).\n- `FIXED` Prevent error on `seek` or `duration` being negative ([#1034](https://github.com/goldfire/howler.js/pull/1034)).\n- `FIXED` Force `fade` values to be numbers to prevent errors ([#1027](https://github.com/goldfire/howler.js/issues/1027)).\n- `FIXED` An `InvalidStateError` could sometimes be thrown in Internet Explorer ([#1052](https://github.com/goldfire/howler.js/pull/1052)).\n- `FIXED` Prevent silent failure of `AudioContext` creation in Safari ([#1021](https://github.com/goldfire/howler.js/issues/1021)).\n- `FIXED` Changing `rate` and `seek` on a paused sound could cause `seek` to end up at the wrong position ([#1088](https://github.com/goldfire/howler.js/issues/1088)).\n- `FIXED` Calling `play` twice before a sound had loaded could lead to both sounds having the same `ID` ([#1060](https://github.com/goldfire/howler.js/issues/1060)).\n\n### Breaking Changes\n* If you are directly setting `Howler.mobileAutoEnable` (it defaults to true), then you should change this to `Howler.autoUnlock`.\n* The new HTML5 Audio object pool shouldn't change anything for 99% of use-cases, but if for whatever reason you don't want to use the pool, you can set `html5PoolSize` to 0 to bypass using the pool.\n\n## 2.0.15 (August 24, 2018)\n- `FIXED` Errors with touch events and blocked click events in Chrome ([#1003](https://github.com/goldfire/howler.js/issues/1003) [#1011](https://github.com/goldfire/howler.js/issues/1011) [#1025](https://github.com/goldfire/howler.js/issues/1025) [#1026](https://github.com/goldfire/howler.js/issues/1026)).\n- `FIXED` Audio decoding error wasn't always handled correctly ([#1019](https://github.com/goldfire/howler.js/pull/1019)).\n- `FIXED` Potential error during playback in Internet Explorer 11 ([#1016](https://github.com/goldfire/howler.js/pull/1016)).\n\n## 2.0.14 (July 12, 2018)\n- `CHANGED` Auto unlocking of audio now runs on Chrome to fix issue with HTML5 Audio needing user interaction.\n- `CHANGED` Added a new `unlock` event that is fired when the auto unlock happens.\n- `CHANGED` A `playerror` now gets fired when HTML5 Audio fails to play due to lack of user interaction.\n- `FIXED` Improved HTML5 Audio play lock checks to prevent race conditions ([#995](https://github.com/goldfire/howler.js/pull/995)).\n- `FIXED` Intermittent error in Chrome when decoding audio data ([#988](https://github.com/goldfire/howler.js/pull/988)).\n- `FIXED` Error when trying to loop spatial audio without a sprite ([#985](https://github.com/goldfire/howler.js/issues/985)).\n- `FIXED` Instantly fire the `end` event when a sound is seeked past its duration ([#963](https://github.com/goldfire/howler.js/issues/963)).\n- `FIXED` Another issue in Safari where spatial orientation was throwing an error.\n\n## 2.0.13 (June 22, 2018)\n- `FIXED` Prevent `stop` event from firing alongside `end` when using HTML5 Audio ([#974](https://github.com/goldfire/howler.js/issues/074)).\n- `FIXED` Correctly reset a `Sound` after using spatial audio ([#962](https://github.com/goldfire/howler.js/issues/962)).\n- `FIXED` Remove a `Howl` from cache when unloaded after failing to load ([#978](https://github.com/goldfire/howler.js/issues/978)).\n- `FIXED` Race condition could lead to error when cleaning the buffer.\n\n## 2.0.12 (May 9, 2018)\n- `FIXED` The previous Chrome deprecation fixes broke spatial positioning in Safari.\n\n## 2.0.10 (May 5, 2018)\n- `FIXED` Fixed another Chrome deprecation warning when using panning methods ([#923](https://github.com/goldfire/howler.js/issues/923)).\n- `FIXED` Playback rate wasn't working correctly in Internet Explorer when defined in the `Howl` constructor ([#936](https://github.com/goldfire/howler.js/issues/936)).\n- `FIXED` Looped audio would only play twice in Internet Explorer ([#921](https://github.com/goldfire/howler.js/issues/921)).\n\n## 2.0.9 (February 10, 2018)\n- `FIXED` More accurate HTML5 Audio `end` timer and fix for Firefox streams ending early ([#883](https://github.com/goldfire/howler.js/issues/883)).\n- `FIXED` Prevent `play` events from duplicating in certain instances ([#899](https://github.com/goldfire/howler.js/issues/899)).\n- `FIXED` Add second parameter to HTML5 Audio playback promise to fix Safari error ([#896](https://github.com/goldfire/howler.js/pull/896)).\n- `FIXED` Refactored the internal queue system to fix various edge cases.\n\n## 2.0.8 (January 19, 2018)\n- `CHANGED` Fades now use elapsed time to be more accurate when intervals are inconsistent ([#885](https://github.com/goldfire/howler.js/issues/885)).\n- `CHANGED` Improve timing of short fades ([#884](https://github.com/goldfire/howler.js/issues/884)).\n- `FIXED` Fixed another Chrome deprecation when setting playback rate.\n- `FIXED` Prevent `onplay` from firing when first setting `stereo` value ([#843](https://github.com/goldfire/howler.js/issues/843)).\n\n## 2.0.7 (December 18, 2017)\n- `FIXED` Accidental `const` was included in the previous version.\n\n## 2.0.6 (December 15, 2017)\n- `FIXED` Replaced deprecated `gain.value` and `gain.pan.value` with `setValueAtTime` ([#856](https://github.com/goldfire/howler.js/issues/856)).\n- `FIXED` Audio sprites weren't ending correctly in Internet Explorer 11 ([#841](https://github.com/goldfire/howler.js/issues/841)).\n- `FIXED` Correctly set group volume when fading ([#539](https://github.com/goldfire/howler.js/issues/539)).\n- `FIXED` Cancel `fade` on sound when `mute` is called ([#666](https://github.com/goldfire/howler.js/issues/666)).\n- `FIXED` Uncaught error when play() request was interrupted by a call to pause() ([#835](https://github.com/goldfire/howler.js/pull/835)).\n- `FIXED` Incorrect reference to global `_scratchBuffer` ([#834](https://github.com/goldfire/howler.js/pull/834)).\n\n## 2.0.5 (October 6, 2017)\n- `ADDED` Add support for `withCredentials` to Web Audio XHR requests ([#610](https://github.com/goldfire/howler.js/pull/610)).\n- `ADDED` Add `playerror` event for when mobile HTML5 audio is unable to play ([#774](https://github.com/goldfire/howler.js/issues/774)).\n- `FIXED` Refactor fade method to eliminate bind memory allocations (no change to API).\n- `FIXED` Prevent seeking after sound has been unloaded ([#797](https://github.com/goldfire/howler.js/pull/797)).\n- `FIXED` Check for `paused` instead of `ended` on HTML5 end check to correctly handle data URI's ([#775](https://github.com/goldfire/howler.js/pull/775)).\n- `FIXED` Fix unlocking of mobile audio on iOS when user swipes instead of taps ([#808](https://github.com/goldfire/howler.js/pull/808)).\n- `FIXED` `pannerAttr` values can now be set via object as the documentation originally specified.\n- `FIXED` Various corrections and improvements to the spatial audio documentation.\n\n## 2.0.4 (June 9, 2017)\n- `CHANGED` Removed the `resuming` state, which wasn't actually being used and was leading to a bug on Android ([#679](https://github.com/goldfire/howler.js/pull/679)).\n- `CHANGED` Any playback initiated before the sound has loaded will now go into the queue to fix various race conditions ([#714](https://github.com/goldfire/howler.js/pull/714)).\n- `FIXED` Correctly initialize an AudioContext with the global mute status ([#714](https://github.com/goldfire/howler.js/pull/714)).\n- `FIXED` AudioContext unlocks on user interaction within a cross-domain iframe on Android Chrome ([#756](https://github.com/goldfire/howler.js/pull/756)).\n- `FIXED` Stopping/pausing a group of sounds now behaves as expected in edge cases ([#734](https://github.com/goldfire/howler.js/pull/734)).\n- `FIXED` Sound ID's now start at 1000 instead of 0 to avoid `rate` collisions ([#764](https://github.com/goldfire/howler.js/issues/764)).\n- `FIXED` Prevent unknown mime errors on Internet Explorer when unloading a sound ([#720](https://github.com/goldfire/howler.js/pull/720)).\n- `FIXED` Correctly clean up error event listeners ([#720](https://github.com/goldfire/howler.js/pull/720)).\n- `FIXED` Audio clipping in Internet Explorer when network latency is present with HTML5 Audio ([#720](https://github.com/goldfire/howler.js/pull/720)).\n- `FIXED` Allow passing just an event and ID to turn off listener ([#767](https://github.com/goldfire/howler.js/issues/767)).\n- `FIXED` `npm` warning caused by invalid license definition ([#763](https://github.com/goldfire/howler.js/pull/763)).\n\n## 2.0.3 (March 11, 2017)\n- `CHANGED` Unloading a sound no longer fires the `end` event ([#675](https://github.com/goldfire/howler.js/pull/675)).\n- `FIXED` Remove `setTimeout` wrapper on HTML5 `play` call to fix issues on mobile browsers ([#694](https://github.com/goldfire/howler.js/pull/694)).\n- `FIXED` Remove rare possibility of duplicate sound ID's by using global counter ([#709](https://github.com/goldfire/howler.js/issues/709)).\n- `FIXED` Support fades with 2+ decimal places ([#696](https://github.com/goldfire/howler.js/issues/696)).\n- `FIXED` Error in Firefox caused by invalid silent WAV on `unload` ([#678](https://github.com/goldfire/howler.js/issues/678)).\n- `FIXED` Check for and warn about missing file extension ([#680](https://github.com/goldfire/howler.js/issues/680)).\n- `FIXED` Regression in Firefox relating to spatial audio ([#664](https://github.com/goldfire/howler.js/issues/664)).\n\n## 2.0.2 (December 4, 2016)\n- `FIXED` Wait to begin playback until AudioContext has resumed ([#643](https://github.com/goldfire/howler.js/issues/643)).\n- `FIXED` Run `noAudio` check on initial setup instead of waiting for first `Howl` ([#619](https://github.com/goldfire/howler.js/issues/619)).\n- `FIXED` Add `play` event to start of queue when `autoplay` is used ([#659](https://github.com/goldfire/howler.js/issues/659)).\n- `FIXED` Make sure `seek` and `duration` are always >= 0 to prevent errors ([#682](https://github.com/goldfire/howler.js/pull/652)).\n- `FIXED` Audio test wouldn't work in IE11 Enhanced Security Mode ([#631](https://github.com/goldfire/howler.js/pull/631)).\n- `FIXED` Ensure AudioContext exists on `unload` ([#646](https://github.com/goldfire/howler.js/pull/646)).\n- `FIXED` Always fire pause event even if sound is already paused ([#639](https://github.com/goldfire/howler.js/issues/639)).\n\n## 2.0.1 (October 14, 2016)\n- `ADDED` Support for FLAC audio files.\n- `FIXED` Improve fading performance when short fade times are used ([#621](https://github.com/goldfire/howler.js/issues/621)).\n- `FIXED` Correctly handle fades from 0 to 0 volume ([#575](https://github.com/goldfire/howler.js/issues/575)).\n- `FIXED` Prevent a load error from blocking all future playback ([#613](https://github.com/goldfire/howler.js/issues/613)).\n- `FIXED` Reset `noAudio` to `false` when a sound is unloaded ([#617](https://github.com/goldfire/howler.js/pull/617)).\n- `FIXED` Stop a sound even if it is not playing ([#595](https://github.com/goldfire/howler.js/issues/595)).\n- `FIXED` Emit `stop` event before returning from `stop` ([#616](https://github.com/goldfire/howler.js/pull/616)).\n- `FIXED` Improve codec checks by removing `x-` prefix ([#576](https://github.com/goldfire/howler.js/issues/576)).\n- `FIXED` Set correct loop start/end when calling `loop` on a sprite ([#604](https://github.com/goldfire/howler.js/issues/604)).\n\n## 2.0.0 (July 19, 2016)\nThis major release contains just a few breaking changes outlined below. Howler.js has been rewritten from the ground up using the knowledge and work since the initial release. There's a long list of additions and improvements, which I urge you to read through as the library has evolved quite a bit over this time.\n\nThe biggest change is how you should think about your audio when using howler.js. There is now the concept of global (`Howler`), group (`Howl`) and single sound (`Sound`). Each sound that is played gets its own `Sound` object that can be manipulated, giving much greater control over playback, whether using sprites or not. `Howl` method calls can then apply to one sound or all in the group.\n\n```\nHowler (global) ->\n        Howl (group) ->\n                Sound (single)\n```\n\nHowler.js now also has the concept of plugins. The core represents 100% compatibility across hTML5 Audio and Web Audio, adhering to the initial goals of the library. There is also a new Spatial Plugin that adds 3D and stereo audio support only available in the Web Audio API.\n\nRead more about the update [in this blog post](http://goldfirestudios.com/blog/143/howler.js-v2.0-Released).\n\n### Breaking Changes\n- The `buffer` option is now named `html5`. Use this to force HTML5 Audio usage.\n- The `urls` option is now named `src` to specify the audio file(s) to play.\n- The `pos` method has been renamed to `seek`.\n\n```javascript\n// Change the seek position of a sound (in seconds).\nsound.seek(10);\n```\n\n- `mute` and `unmute` have been consolidated into `mute`.\n\n```javascript\n// Mute a sound (or all sounds).\nsound.mute(true);\nHowler.mute(true);\n\n// Unmute a sound (or all sounds).\nsound.mute(false);\nHowler.mute(false);\n```\n\n- The `play` method no longer takes a callback and immediately returns the playback sound id (this means you can no longer chain onto the `play` method, but all others work the same).\n\n```javascript\n// Get sound id for a specific playback.\nvar id = sound.play();\n\n// Pause this playback.\nsound.pause(id);\n```\n\n- The deprecated `fadeIn` and `fadeOut` methods have been removed in favor of the single `fade` method.\n\n```javascript\n// Fade in a sound.\nsound.fade(0, 1, 1000);\n\n// Fade out the sound once the previous fade has ended.\nsound.once('fade', function(){\n  sound.fade(1, 0, 1000);\n});\n```\n\n### New Features\n- Lots of general code cleanup, simplification and reorganization.\n- Howler.js is now modularized. The core represents the initial goal for howler.js with 100% compatibility across HTML5 Audio and Web Audio. The spatial plugin adds spatial and stereo support through Web Audio API.\n- The new structure allows for full control of sprite playback (this was buggy or didn't work at all before).\n- New `once` method to setup event listeners that will automatically remove themselves once fired.\n- New `playing` method that will return `true` if the specified sound is currently playing.\n- New `duration` method that will return the duration of the audio source.\n- New `state` method that will return the loaded state of the Howl.\n- New `preload` option to allow disabling the auto-preload functionality.\n- New events: `fade`, `stop`, `mute`, `volume`, `rate`, `seek`.\n- New `rate` method that allows changing playback rate at runtime.\n- New global `unload` method that unloads all active Howls and resets the `AudioContext` to clear memory.\n- New `pool` option to allow setting the inactive sound pool size (for advanced use, still defaults to 5).\n- Support for playback of Dolby Audio files.\n- Support for .webm extension in addition to .weba.\n- Support for playback of CAFF audio files.\n- (Spatial) New `Howler` listener methods `stereo`, `pos` and `orientation`.\n- (Spatial) New `Howl` methods `stereo`, `pos`, `orientation` and `pannerAttr` to control stereo and spatial audio of single sounds or groups of sounds.\n- (Spatial) `pannerAttr` allows for control of `coneInnerAngle`, `coneOUterAngle`, `coneOuterGain`, `distanceModel`, `maxDistance`, `panningModel`, `refDistance` and `rolloffFactor`.\n- Third parameter to `on`, `once` and `off` to allow listening or removing events for only a specific sound id.\n- The following methods now alter all sounds within a `Howl` group when no `id` is passed: `pause`, `stop`, `volume`, `fade`, `mute`, `loop`, `rate`.\n- New codec recommendations and notes have been added to the documentation.\n- Web Audio AudioContext now automatically suspends and resumes to lower processing and power usage.\n\n### Bug Fixes\n- Improved the `ext` option and made it especially usefully for playing streams (for example, SoundCloud).\n- The `fade` method now uses native Web Audio fading when in that mode.\n- Fades are now automatically stopped when a new one is started, volume is changed or the sound is paused/stopped.\n- Moved any needed try/catch statements into own methods to prevent de-optimization in V8 and others.\n- Automatically checks for disabled audio in Internet Explorer.\n- An internal event queue is now used to fix issues caused by multiple actions pre-load.\n- When using Web Audio, a panner node is only added when spatial audio is used.\n- The `rate` option now changes the playback rate on both Web Audio and HTML5 Audio.\n- The event system has been overhauled to be more reliable.\n- Methods called before a sound has loaded no longer cause events to stick in the queue.\n- The `end` event correctly fires at the end of each loop when using Web Audio.\n- Several issues with playback of sprites.\n- Several issues with playback timing after pausing sounds.\n- Improved support for seeking a sound while it is playing.\n- When playback rate is changed, the `end` event now fires at the correct time.\n- Potential memory leak when using the `unload` method.\n- Calling `pause` on a sound that hasn't yet loaded now works correctly.\n- Muting a sound while it is fading now works.\n- Playback of base64 encoded sounds in Internet Explorer 9.\n- MIME check for some base64 encoded MP3's.\n- Now tries to automatically unlock audio on mobile browsers besides Mobile Safari.\n- Falls back to HTML5 Audio when loading an HTTP file on an HTTPS page (avoids Mixed Content errors).\n- Stopping a stream is now possible, along with various other fixes.\n- Audio on Chrome for Android no longer gets stuck after a period of inactivity.\n- Crash in iOS <9 webview.\n- Bug in iOS that can cause audio distortion when opening/closing browser.\n- Only setup AudioContext after first `Howl` is setup so that background audio on mobile devices behaves as expected.\n\n## 1.1.29 (January 22, 2016)\n- `ADDED` Error messages added onto each `loaderror` event (thanks Philip Silva).\n- `FIXED` Various edge-case bugs by no longer comparing functions by string in `.off()` (thanks richard-livingston).\n- `FIXED` Edge case where multiple overlapping instances of the same sound won't all fire `end` (thanks richard-livingston).\n- `FIXED` `end` event now fires correctly when changing the `rate` of a sound.\n\n## 1.1.28 (October 22, 2015)\n- `FIXED` Typo with iOS enabler that was preventing it from working.\n\n## 1.1.27 (October 2, 2015)\n- `FIXED` Automatic audio unlocking on iOS 9 by switching to `touchend` from `touchstart`.\n\n## 1.1.26 (April 21, 2015)\n- `FIXED` Looping in Chrome due to a change in the Web Audio spec implemented in Chrome 42.\n\n## 1.1.25 (July 29, 2014)\n- `ADDED` The `AudioContext` is now available on the global `Howler` object (thanks Matt DesLauriers).\n- `FIXED` When falling back to HTML5 Audio due to XHR error, delete cache for source file to prevent multi-playback issues.\n\n## 1.1.24 (July 20, 2014)\n- `FIXED` Improved performance of loading files using data URIs (thanks Rob Wu).\n- `FIXED` Data URIs now work with Web Audio API (thanks Rob Wu).\n- `FIXED` Omitting the second parameter of the `off` method now correctly clears all events by that name (thanks Gabriel Munteanu).\n- `FIXED` Fire `end` event when unloading playing sounds.\n- `FIXED` Small error fix in iOS check.\n\n## 1.1.23 (July 2, 2014)\n- `FIXED` Playing multiple sprites rapidly with HTML5 Audio cause the sprite to break due to a v1.1.22 update.\n- `FIXED` Don't run the iOS test if there is no audio context, which prevents a breaking error.\n\n## 1.1.22 (June 28, 2014)\n- `ADDED` Howler will now automatically attempt to unlock audio on iOS (thanks Federico Brigante).\n- `ADDED` New `codecs` global Howler method to check for codec support in the current browser (thanks Jay Oster).\n- `FIXED` End timers are now correctly cleaned up when a sound naturally completes rather than being forced to stop.\n\n## 1.1.21 (May 28, 2014)\n- `ADDED` Support for npm and bower (thanks Morantron).\n- `ADDED` Support for audio/aac, audio/m4a and audio/mp4 mime types (thanks Federico Brigante).\n- `FIXED` Calculation of duration after pausing a sprite that was sometimes causing unexpected behavior.\n- `FIXED` Clear the event listener when creating a new HTML5 Audio node.\n\n## 1.1.20 (April 18, 2014)\n- `ADDED` When using Web Audio API, the panningModel now defaults to 'equalpower' to give higher quality sound. It then automatically switches to 'HRTF' when using 3D sound. This can also be overridden with the new `model` property.\n- `FIXED` Another bug causing issues in CocoonJS (thanks Olivier Biot).\n- `FIXED` Issue that could have caused invalid state errors and a memory leak when unloading in Internet Explorer.\n- `FIXED` The documentation has been updated to include the `rate` property.\n\n## 1.1.19 (April 14, 2014)\n- `ADDED` Added CocoonJS support (thanks Olivier Biot).\n- `FIXED` Several issues with pausing sprite instances by overhauling how end timers are tracked and cleared internally.\n- `FIXED` Prevent error when using a server-side require where window is absent (thanks AlexMost).\n\n## 1.1.18 (March 23, 2014)\n- `FIXED` Muting a looping sound now correctly keeps the sound muted when using HTML5 Audio.\n- `FIXED` Wrap AudioContext creation in try/catch to gracefully handle browser bugs: [Chromium issue](https://code.google.com/p/chromium/issues/detail?id=308784) (thanks Chris Buckley).\n- `FIXED` Listen for HTML5 Audio errors and fire `loaderror` if any are encountered (thanks digitaltonic).\n\n## 1.1.17 (February 5, 2014)\n- `FIXED` Another bug in Chrome that would throw an error when pausing/stopping when a source is already stopped.\n- `ADDED` CommonJS support for things like Browserify (thanks Michal Kuklis).\n- `ADDED` Support for playback mp4 files.\n- `ADDED` Expose the `noAudio` variable to the global `Howler` object.\n- `FIXED` A rounding error that was causing HTML5 Audio to cut off early on some environments.\n- `FIXED` The `onend` callback now correctly fires when changing the pos of a sound after it has started playing and when it is using HTML5 Audio.\n\n## 1.1.16 (January 8, 2014)\n- `FIXED` Prevent InvalidStateError when unloading a sound that has already been stopped.\n- `FIXED` Bug in unload method that prevented the first sound from being unloaded.\n\n## 1.1.15 (December 28, 2013)\n- `FIXED` Bug that prevented master volume from being set to 0.\n- `FIXED` Bug that prevented initial volume from being set to 0.\n- `FIXED` Update the README to accurately show `autoplay` as defaulting to `false`.\n- `FIXED` Call `loaderror` when decodeAudioData fails.\n- `FIXED` Bug in setting position on an active playing WebAudio node through 'pos(position, id)' (thanks Arjun Mehta).\n- `FIXED` An issue with looping after resuming playback when in WebAudio playback (thanks anzev).\n\n## 1.1.14 (October 18, 2013)\n- `FIXED` Critical bug fix that was breaking support on some browsers and some codecs.\n\n## 1.1.13 (October 17, 2013)\n- `FIXED` Code cleanup by removing redundant `canPlay` object (thanks Fabien).\n- `FIXED` File extensions are now detected correctly if there is a query string with dots in the filename (thanks theshock).\n- `FIXED` Fire `onloaderror` if a bad filename is passed with the `urls` property.\n\n## 1.1.12 (September 12, 2013)\n- `UPDATED` Changed AMD definition to anonymous module and define it as global always (thanks Fabien).\n- `ADDED` Added the `rate` property to `Howl` object creation, allowing you to specify the playback rate. This only works when using Web Audio (thanks Qqwy).\n- `FIXED` Prevent some instances of IE9 from throwing \"Not Implemented\" error (thanks Tero Tilus).\n\n## 1.1.11 (July 28, 2013)\n- `FIXED` Bug caused by trying to disconnect audio node when using HTML5 Audio.\n- `FIXED` Correctly return the sound's position when it is paused.\n- `FIXED` Another bug that caused looping sounds to not always correctly resume after a pause.\n\n## 1.1.10 (July 26, 2013)\n- `ADDED` New `unload` method to destroy a Howl object. This will stop all associated sounds instantly and remove the sound from the cache.\n- `FIXED` When using Web Audio, loop from the correct position after pausing the sound halfway through.\n- `FIXED` Always return a number when getting a sound's position with the `pos` method, and always return the reference to the sound when setting a sound that hasn't loaded.\n\n## 1.1.9 (July 11, 2013)\n- `FIXED` Issue where calling the `volume` method before a sound had loaded prevented the volume from being changed.\n\n## 1.1.8 (July 10, 2013)\n- `FIXED` `urls` method now works again, and can take a string rather than an array if only one url is being passed.\n- `FIXED` Make `node.play` async when not using webAudio (thanks Alex Dong).\n\n## 1.1.7 (May 30, 2013)\n- `FIXED` Hotfix for a missing parameter that somehow missed the 1.1.6 commit in global muting.\n\n## 1.1.6 (May 30, 2013)\n- `ADDED` A general `fade` method that allows a playing sound to be faded from one volume to another.\n- `DEPRECATED` The `fadeIn` and `fadeOut` methods should no longer be used and have been deprecated. These will be removed in a future major release.\n- `FIXED` No longer require the sprite parameter to be passed into the `play` method when just passing a callback function.\n- `FIXED` Cleaned up global muting code. (thanks arnorhs).\n\n## 1.1.5 (May 3, 2013)\n- `ADDED` Support for the Ogg Opus codec (thanks Andrew Carpenter).\n- `ADDED` Semver tags for easy package management (thanks Martin Reurings).\n- `ADDED` Improve style/readability of code that discovers which audio file extension to use (thanks Fabien).\n- `ADDED` The `onend` event now passes the soundId back as the 2nd parameter of the callback (thanks Ross Cairns).\n- `FIXED` A few small typos in the comments. (thanks VAS).\n\n## 1.1.4 (April 28, 2013)\n- `FIXED` A few small bugs that broke global mute and unmute when using HTML5 Audio.\n\n## 1.1.3 (April 27, 2013)\n- `FIXED` Bug that prevented global mute from working 100% of the time when using HTML5 Audio.\n\n## 1.1.2 (April 24, 2013)\n- `FIXED` Calling `volume` before `play` now works as expected.\n- `FIXED` Edge case issue with cache cleaning.\n- `FIXED` Load event didn't fire when new URLs were loaded after the initial load.\n\n## 1.1.1 (April 17, 2013)\n- `ADDED` `onloaderror` event fired when sound fails to load (thanks Thiago de Barros Laceda).\n- `ADDED` `format` property that overrides the URL extraction of the file format (thanks Kenan Shifflett).\n- `FIXED` AMD implementation now only defines one module and removes global scope (thanks Kenan Shifflett).\n- `FIXED` Broken chaining with `play` method.\n\n## 1.1.0 (April 11, 2013)\n- `ADDED` New `pos3d` method that allows for positional audio (Web Audio API only).\n- `ADDED` Multi-playback control system that allows for control of specific play instances when sprites are used. A callback has been added to the `play` method that returns the `soundId` for the playback instance. This can then be passed as the optional last parameter to other methods to control that specific playback instead of the whole sound object.\n- `ADDED` Pass the `Howl` object reference as the first parameter in the custom event callbacks.\n- `ADDED` New optional parameter in sprite definitions to define a sprite as looping rather than the whole track. In the sprite definition array, set the 3rd value to true for looping (`spriteName: [pos, duration, loop]`).\n- `FIXED` Now all audio acts as a sound sprite internally, which helps to fix several lingering bugs (doesn't affect the API at all).\n- `FIXED` Improved implementation of Web Audio API looping.\n- `FIXED` Improved implementation of HTML5 Audio looping.\n- `FIXED` Issue that caused the fallback to not work when testing locally.\n- `FIXED` Fire `onend` event at the end of `fadeOut`.\n- `FIXED` Prevent errors from being thrown on browsers that don't support HTML5 Audio.\n- `FIXED` Various code cleanup and optimizations.\n\n## 1.0.13 (March 20, 2013)\n- `ADDED` Support for AMD loading as a module (thanks @mostlygeek).\n\n## 1.0.12 (March 28, 2013)\n- `ADDED` Automatically switch to HTML5 Audio if there is an error due to CORS.\n- `FIXED` Check that only numbers get passed into volume methods.\n\n## 1.0.11 (March 8, 2013)\n- `ADDED` Exposed `usingWebAudio` value through the global `Howler` object.\n- `FIXED` Issue with non-sprite HTML5 Audio clips becoming unplayable (thanks Paul Morris).\n\n## 1.0.10 (March 1, 2013)\n- `FIXED` Issue that caused simultaneous playback of audio sprites to break while using HTML5 Audio.\n\n## 1.0.9 (March 1, 2013)\n- `ADDED` Spec-implementation detection to cover new and deprecated Web Audio API methods (thanks @canuckistani).\n\n## 1.0.8 (February 25, 2013)\n- `ADDED` New `onplay` event.\n- `ADDED` Support for playing audio from base64 encoded strings.\n- `FIXED` Issue with soundId not being unique when multiple sounds were played simultaneously.\n- `FIXED` Verify that an HTML5 Audio Node is ready to play before playing it.\n- `FIXED` Issue with `onend` timer not getting cleared all the time.\n\n## 1.0.7 (February 18, 2013)\n- `FIXED` Cancel the correct timer when multiple HTML5 Audio sounds are played at the same time.\n- `FIXED` Make sure howler.js is future-compatible with UglifyJS 2.\n- `FIXED` Duration now gets set correctly when pulled from cache.\n- `FIXED` Tiny typo in README.md (thanks @johnfn).\n\n## 1.0.6 (February 8, 2013)\n- `FIXED` Issue with global mute calls happening before an HTML5 Audio element is loaded.\n\n## 1.0.5 (February 7, 2013)\n- `FIXED` Global mute now also mutes all future sounds that are played until `unmute` is called.\n\n## 1.0.4 (February 6, 2013)\n- `ADDED` Support for WebM audio.\n- `FIXED` Issue with volume changes when on HTML5 Audio.\n- `FIXED` Round volume values to fix inconsistencies in fade in/out methods.\n\n## 1.0.3 (February 2, 2013)\n- `FIXED` Make sure `self` is always defined before returning it. \n\n## 1.0.2 (February 1, 2013)\n- `ADDED` New `off` method that allows for the removal of custom events.\n- `FIXED` Issue with chaining the `on` method.\n- `FIXED` Small typo in documentation.\n\n## 1.0.1 (January 30, 2013)\n- `ADDED` New `buffer` property that allows you to force the use of HTML5 on specific sounds to allow streaming of large audio files.\n- `ADDED` Support for multiple events per event type.\n- `FIXED` Issue with method chaining before a sound was ready to play.\n- `FIXED` Use `self` everywhere instead of `this` to maintain consistency.\n\n## 1.0.0 (January 28, 2013)\n- First commit\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0625,
          "content": "Copyright (c) 2013-2020 James Simpson and GoldFire Studios, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 26.4296875,
          "content": "[![howler.js](https://s3.amazonaws.com/howler.js/howler-logo.png \"howler.js\")](https://howlerjs.com)\n\n# Description\n[howler.js](https://howlerjs.com) is an audio library for the modern web. It defaults to [Web Audio API](http://webaudio.github.io/web-audio-api/) and falls back to [HTML5 Audio](https://html.spec.whatwg.org/multipage/embedded-content.html#the-audio-element). This makes working with audio in JavaScript easy and reliable across all platforms.\n\nAdditional information, live demos and a user showcase are available at [howlerjs.com](https://howlerjs.com).\n\nFollow on Twitter for howler.js and development-related discussion: [@GoldFireStudios](https://twitter.com/goldfirestudios).\n\n### Features\n* Single API for all audio needs\n* Defaults to Web Audio API and falls back to HTML5 Audio\n* Handles edge cases and bugs across environments\n* Supports all codecs for full cross-browser support\n* Automatic caching for improved performance\n* Control sounds individually, in groups or globally\n* Playback of multiple sounds at once\n* Easy sound sprite definition and playback\n* Full control for fading, rate, seek, volume, etc.\n* Easily add 3D spatial sound or stereo panning\n* Modular - use what you want and easy to extend\n* No outside dependencies, just pure JavaScript\n* As light as 7kb gzipped\n\n### Browser Compatibility\nTested in the following browsers/versions:\n* Google Chrome 7.0+\n* Internet Explorer 9.0+\n* Firefox 4.0+\n* Safari 5.1.4+\n* Mobile Safari 6.0+ (after user input)\n* Opera 12.0+\n* Microsoft Edge\n\n### Live Demos\n* [Audio Player](https://howlerjs.com/#player)\n* [Radio](https://howlerjs.com/#radio)\n* [Spatial Audio](https://howlerjs.com/#spatial)\n* [Audio Sprites](https://howlerjs.com/#sprite)\n\n# Documentation\n\n### Contents\n* [Quick Start](#quick-start)\n* [Examples](#examples)\n* [Core](#core)\n  * [Options](#options)\n  * [Methods](#methods)\n  * [Global Options](#global-options)\n  * [Global Methods](#global-methods)\n* [Plugin: Spatial](#plugin-spatial)\n  * [Options](#options-1)\n  * [Methods](#methods-1)\n  * [Global Methods](#global-methods-1)\n* [Group Playback](#group-playback)\n* [Mobile Playback](#mobilechrome-playback)\n* [Dolby Audio Playback](#dolby-audio-playback)\n* [Facebook Instant Games](#facebook-instant-games)\n* [Format Recommendations](#format-recommendations)\n* [License](#license)\n\n### Quick Start\n\nSeveral options to get up and running:\n\n* Clone the repo: `git clone https://github.com/goldfire/howler.js.git`\n* Install with [npm](https://www.npmjs.com/package/howler): `npm install howler`\n* Install with [Yarn](https://yarnpkg.com/en/package/howler): `yarn add howler`\n* Install with [Bower](http://bower.io/): `bower install howler`\n* Hosted CDN: [`cdnjs`](https://cdnjs.com/libraries/howler) [`jsDelivr`](https://www.jsdelivr.com/projects/howler.js)\n\nIn the browser:\n\n```html\n<script src=\"/path/to/howler.js\"></script>\n<script>\n    var sound = new Howl({\n      src: ['sound.webm', 'sound.mp3']\n    });\n</script>\n```\n\nAs a dependency:\n\n```javascript\nimport {Howl, Howler} from 'howler';\n```\n\n```javascript\nconst {Howl, Howler} = require('howler');\n```\n\nIncluded distribution files:\n\n* **howler**: This is the default and fully bundled source that includes `howler.core` and `howler.spatial`. It includes all functionality that howler comes with.\n* **howler.core**: This includes only the core functionality that aims to create parity between Web Audio and HTML5 Audio. It doesn't include any of the spatial/stereo audio functionality.\n* **howler.spatial**: This is a plugin that adds spatial/stereo audio functionality. It requires `howler.core` to operate as it is simply an add-on to the core.\n\n\n### Examples\n\n##### Most basic, play an MP3:\n```javascript\nvar sound = new Howl({\n  src: ['sound.mp3']\n});\n\nsound.play();\n```\n\n##### Streaming audio (for live audio or large files):\n```javascript\nvar sound = new Howl({\n  src: ['stream.mp3'],\n  html5: true\n});\n\nsound.play();\n```\n\n##### More playback options:\n```javascript\nvar sound = new Howl({\n  src: ['sound.webm', 'sound.mp3', 'sound.wav'],\n  autoplay: true,\n  loop: true,\n  volume: 0.5,\n  onend: function() {\n    console.log('Finished!');\n  }\n});\n```\n\n##### Define and play a sound sprite:\n```javascript\nvar sound = new Howl({\n  src: ['sounds.webm', 'sounds.mp3'],\n  sprite: {\n    blast: [0, 3000],\n    laser: [4000, 1000],\n    winner: [6000, 5000]\n  }\n});\n\n// Shoot the laser!\nsound.play('laser');\n```\n\n##### Listen for events:\n```javascript\nvar sound = new Howl({\n  src: ['sound.webm', 'sound.mp3']\n});\n\n// Clear listener after first call.\nsound.once('load', function(){\n  sound.play();\n});\n\n// Fires when the sound finishes playing.\nsound.on('end', function(){\n  console.log('Finished!');\n});\n```\n\n##### Control multiple sounds:\n```javascript\nvar sound = new Howl({\n  src: ['sound.webm', 'sound.mp3']\n});\n\n// Play returns a unique Sound ID that can be passed\n// into any method on Howl to control that specific sound.\nvar id1 = sound.play();\nvar id2 = sound.play();\n\n// Fade out the first sound and speed up the second.\nsound.fade(1, 0, 1000, id1);\nsound.rate(1.5, id2);\n```\n\n##### ES6:\n```javascript\nimport {Howl, Howler} from 'howler';\n\n// Setup the new Howl.\nconst sound = new Howl({\n  src: ['sound.webm', 'sound.mp3']\n});\n\n// Play the sound.\nsound.play();\n\n// Change global volume.\nHowler.volume(0.5);\n```\n\n\nMore in-depth examples (with accompanying live demos) can be found in the [examples directory](https://github.com/goldfire/howler.js/tree/master/examples).\n\n\n## Core\n\n### Options\n#### src `Array/String` `[]` *`required`*\nThe sources to the track(s) to be loaded for the sound (URLs or base64 data URIs). These should be in order of preference, howler.js will automatically load the first one that is compatible with the current browser. If your files have no extensions, you will need to explicitly specify the extension using the `format` property.\n#### volume `Number` `1.0`\nThe volume of the specific track, from `0.0` to `1.0`.\n#### html5 `Boolean` `false`\nSet to `true` to force HTML5 Audio. This should be used for large audio files so that you don't have to wait for the full file to be downloaded and decoded before playing.\n#### loop `Boolean` `false`\nSet to `true` to automatically loop the sound forever.\n#### preload `Boolean|String` `true`\nAutomatically begin downloading the audio file when the `Howl` is defined. If using HTML5 Audio, you can set this to `'metadata'` to only preload the file's metadata (to get its duration without download the entire file, for example). \n#### autoplay `Boolean` `false`\nSet to `true` to automatically start playback when sound is loaded.\n#### mute `Boolean` `false`\nSet to `true` to load the audio muted.\n#### sprite `Object` `{}`\nDefine a sound sprite for the sound. The offset and duration are defined in milliseconds. A third (optional) parameter is available to set a sprite as looping. An easy way to generate compatible sound sprites is with [audiosprite](https://github.com/tonistiigi/audiosprite).\n```javascript\nnew Howl({\n  sprite: {\n    key1: [offset, duration, (loop)]\n  },\n});\n```\n#### rate `Number` `1.0`\nThe rate of playback. 0.5 to 4.0, with 1.0 being normal speed.\n#### pool `Number` `5`\nThe size of the inactive sounds pool. Once sounds are stopped or finish playing, they are marked as ended and ready for cleanup. We keep a pool of these to recycle for improved performance. Generally this doesn't need to be changed. It is important to keep in mind that when a sound is paused, it won't be removed from the pool and will still be considered active so that it can be resumed later.\n#### format `Array` `[]`\nhowler.js automatically detects your file format from the extension, but you may also specify a format in situations where extraction won't work (such as with a SoundCloud stream).\n#### xhr `Object` `null`\nWhen using Web Audio, howler.js uses an XHR request to load the audio files. If you need to send custom headers, set the HTTP method or enable `withCredentials` ([see reference](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials)), include them with this parameter. Each is optional (method defaults to `GET`, headers default to `null` and withCredentials defaults to `false`). For example:\n```javascript\n// Using each of the properties.\nnew Howl({\n  xhr: {\n    method: 'POST',\n    headers: {\n      Authorization: 'Bearer:' + token,\n    },\n    withCredentials: true,\n  }\n});\n\n// Only changing the method.\nnew Howl({\n  xhr: {\n    method: 'POST',\n  }\n});\n```\n#### onload `Function`\nFires when the sound is loaded.\n#### onloaderror `Function`\nFires when the sound is unable to load. The first parameter is the ID of the sound (if it exists) and the second is the error message/code.\n\nThe load error codes are [defined in the spec](http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror):\n* **1** - The fetching process for the media resource was aborted by the user agent at the user's request.\n* **2** - A network error of some description caused the user agent to stop fetching the media resource, after the resource was established to be usable.\n* **3** - An error of some description occurred while decoding the media resource, after the resource was established to be usable.\n* **4** - The media resource indicated by the src attribute or assigned media provider object was not suitable.\n#### onplayerror `Function`\nFires when the sound is unable to play. The first parameter is the ID of the sound and the second is the error message/code.\n#### onplay `Function`\nFires when the sound begins playing. The first parameter is the ID of the sound.\n#### onend `Function`\nFires when the sound finishes playing (if it is looping, it'll fire at the end of each loop). The first parameter is the ID of the sound.\n#### onpause `Function`\nFires when the sound has been paused. The first parameter is the ID of the sound.\n#### onstop `Function`\nFires when the sound has been stopped. The first parameter is the ID of the sound.\n#### onmute `Function`\nFires when the sound has been muted/unmuted. The first parameter is the ID of the sound.\n#### onvolume `Function`\nFires when the sound's volume has changed. The first parameter is the ID of the sound.\n#### onrate `Function`\nFires when the sound's playback rate has changed. The first parameter is the ID of the sound.\n#### onseek `Function`\nFires when the sound has been seeked. The first parameter is the ID of the sound.\n#### onfade `Function`\nFires when the current sound finishes fading in/out. The first parameter is the ID of the sound.\n#### onunlock `Function`\nFires when audio has been automatically unlocked through a touch/click event.\n\n\n### Methods\n#### play([sprite/id])\nBegins playback of a sound. Returns the sound id to be used with other methods. Only method that can't be chained.\n* **sprite/id**: `String/Number` `optional` Takes one parameter that can either be a sprite or sound ID. If a sprite is passed, a new sound will play based on the sprite's definition. If a sound ID is passed, the previously played sound will be played (for example, after pausing it). However, if an ID of a sound that has been drained from the pool is passed, nothing will play.\n\n#### pause([id])\nPauses playback of sound or group, saving the `seek` of playback.\n* **id**: `Number` `optional` The sound ID. If none is passed, all sounds in group are paused.\n\n#### stop([id])\nStops playback of sound, resetting `seek` to `0`.\n* **id**: `Number` `optional` The sound ID. If none is passed, all sounds in group are stopped.\n\n#### mute([muted], [id])\nMutes the sound, but doesn't pause the playback.\n* **muted**: `Boolean` `optional` True to mute and false to unmute.\n* **id**: `Number` `optional` The sound ID. If none is passed, all sounds in group are stopped.\n\n#### volume([volume], [id])\nGet/set volume of this sound or the group. This method optionally takes 0, 1 or 2 arguments.\n* **volume**: `Number` `optional` Volume from `0.0` to `1.0`.\n* **id**: `Number` `optional` The sound ID. If none is passed, all sounds in group have volume altered relative to their own volume.\n\n#### fade(from, to, duration, [id])\nFade a currently playing sound between two volumes. Fires the `fade` event when complete.\n* **from**: `Number` Volume to fade from (`0.0` to `1.0`).\n* **to**: `Number` Volume to fade to (`0.0` to `1.0`).\n* **duration**: `Number` Time in milliseconds to fade.\n* **id**: `Number` `optional` The sound ID. If none is passed, all sounds in group will fade.\n\n#### rate([rate], [id])\nGet/set the rate of playback for a sound. This method optionally takes 0, 1 or 2 arguments.\n* **rate**: `Number` `optional` The rate of playback. 0.5 to 4.0, with 1.0 being normal speed.\n* **id**: `Number` `optional` The sound ID. If none is passed, playback rate of all sounds in group will change.\n\n#### seek([seek], [id])\nGet/set the position of playback for a sound. This method optionally takes 0, 1 or 2 arguments.\n* **seek**: `Number` `optional` The position to move current playback to (in seconds).\n* **id**: `Number` `optional` The sound ID. If none is passed, the first sound will seek.\n\n#### loop([loop], [id])\nGet/set whether to loop the sound or group. This method can optionally take 0, 1 or 2 arguments.\n* **loop**: `Boolean` `optional` To loop or not to loop, that is the question.\n* **id**: `Number` `optional` The sound ID. If none is passed, all sounds in group will have their `loop` property updated.\n\n#### state()\nCheck the load status of the `Howl`, returns a `unloaded`, `loading` or `loaded`.\n\n#### playing([id])\nCheck if a sound is currently playing or not, returns a `Boolean`. If no sound ID is passed, check if any sound in the `Howl` group is playing.\n* **id**: `Number` `optional` The sound ID to check.\n\n#### duration([id])\nGet the duration of the audio source (in seconds). Will return 0 until after the `load` event fires.\n* **id**: `Number` `optional` The sound ID to check. Passing an ID will return the duration of the sprite being played on this instance; otherwise, the full source duration is returned.\n\n#### on(event, function, [id])\nListen for events. Multiple events can be added by calling this multiple times.\n* **event**: `String` Name of event to fire/set (`load`, `loaderror`, `playerror`, `play`, `end`, `pause`, `stop`, `mute`, `volume`, `rate`, `seek`, `fade`, `unlock`).\n* **function**: `Function` Define function to fire on event.\n* **id**: `Number` `optional` Only listen to events for this sound id.\n\n#### once(event, function, [id])\nSame as `on`, but it removes itself after the callback is fired.\n* **event**: `String` Name of event to fire/set (`load`, `loaderror`, `playerror`, `play`, `end`, `pause`, `stop`, `mute`, `volume`, `rate`, `seek`, `fade`, `unlock`).\n* **function**: `Function` Define function to fire on event.\n* **id**: `Number` `optional` Only listen to events for this sound id.\n\n#### off(event, [function], [id])\nRemove event listener that you've set. Call without parameters to remove all events.\n* **event**: `String` Name of event (`load`, `loaderror`, `playerror`, `play`, `end`, `pause`, `stop`, `mute`, `volume`, `rate`, `seek`, `fade`, `unlock`).\n* **function**: `Function` `optional` The listener to remove. Omit this to remove all events of type.\n* **id**: `Number` `optional` Only remove events for this sound id.\n\n#### load()\nThis is called by default, but if you set `preload` to false, you must call `load` before you can play any sounds.\n\n#### unload()\nUnload and destroy a Howl object. This will immediately stop all sounds attached to this sound and remove it from the cache.\n\n\n### Global Options\n#### usingWebAudio `Boolean`\n`true` if the Web Audio API is available.\n#### noAudio `Boolean`\n`true` if no audio is available.\n#### autoUnlock `Boolean` `true`\nAutomatically attempts to enable audio on mobile (iOS, Android, etc) devices and desktop Chrome/Safari.\n#### html5PoolSize `Number` `10`\nEach HTML5 Audio object must be unlocked individually, so we keep a global pool of unlocked nodes to share between all `Howl` instances. This pool gets created on the first user interaction and is set to the size of this property.\n#### autoSuspend `Boolean` `true`\nAutomatically suspends the Web Audio AudioContext after 30 seconds of inactivity to decrease processing and energy usage. Automatically resumes upon new playback. Set this property to `false` to disable this behavior.\n#### ctx `Boolean` *`Web Audio Only`*\nExposes the `AudioContext` with Web Audio API.\n#### masterGain `Boolean` *`Web Audio Only`*\nExposes the master `GainNode` with Web Audio API. This can be useful for writing plugins or advanced usage.\n\n\n### Global Methods\nThe following methods are used to modify all sounds globally, and are called from the `Howler` object.\n#### mute(muted)\nMute or unmute all sounds.\n* **muted**: `Boolean` True to mute and false to unmute.\n\n#### volume([volume])\nGet/set the global volume for all sounds, relative to their own volume.\n* **volume**: `Number` `optional` Volume from `0.0` to `1.0`.\n\n#### stop()\nStop all sounds and reset their seek position to the beginning.\n\n#### codecs(ext)\nCheck supported audio codecs. Returns `true` if the codec is supported in the current browser.\n* **ext**: `String` File extension. One of: \"mp3\", \"mpeg\", \"opus\", \"ogg\", \"oga\", \"wav\", \"aac\", \"caf\", \"m4a\", \"m4b\", \"mp4\", \"weba\", \"webm\", \"dolby\", \"flac\".\n\n#### unload()\nUnload and destroy all currently loaded Howl objects. This will immediately stop all sounds and remove them from cache.\n\n\n## Plugin: Spatial\n\n### Options\n#### orientation `Array` `[1, 0, 0]`\nSets the direction the audio source is pointing in the 3D cartesian coordinate space. Depending on how directional the sound is, based on the `cone` attributes, a sound pointing away from the listener can be quiet or silent.\n#### stereo `Number` `null`\nSets the stereo panning value of the audio source for this sound or group. This makes it easy to setup left/right panning with a value of `-1.0` being far left and a value of `1.0` being far right.\n#### pos `Array` `null`\nSets the 3D spatial position of the audio source for this sound or group relative to the global listener.\n#### pannerAttr `Object`\nSets the panner node's attributes for a sound or group of sounds. See the `pannerAttr` method for all available options.\n#### onstereo `Function`\nFires when the current sound has the stereo panning changed. The first parameter is the ID of the sound.\n#### onpos `Function`\nFires when the current sound has the listener position changed. The first parameter is the ID of the sound.\n#### onorientation `Function`\nFires when the current sound has the direction of the listener changed. The first parameter is the ID of the sound.\n\n\n### Methods\n#### stereo(pan, [id])\nGet/set the stereo panning of the audio source for this sound or all in the group.\n* **pan**: `Number` A value of `-1.0` is all the way left and `1.0` is all the way right.\n* **id**: `Number` `optional` The sound ID. If none is passed, all in group will be updated.\n\n#### pos(x, y, z, [id])\nGet/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n* **x**: `Number` The x-position of the audio source.\n* **y**: `Number` The y-position of the audio source.\n* **z**: `Number` The z-position of the audio source.\n* **id**: `Number` `optional` The sound ID. If none is passed, all in group will be updated.\n\n#### orientation(x, y, z, [id])\nGet/set the direction the audio source is pointing in the 3D cartesian coordinate space. Depending on how directional the sound is, based on the `cone` attributes, a sound pointing away from the listener can be quiet or silent.\n* **x**: `Number` The x-orientation of the source.\n* **y**: `Number` The y-orientation of the source.\n* **z**: `Number` The z-orientation of the source.\n* **id**: `Number` `optional` The sound ID. If none is passed, all in group will be updated.\n\n#### pannerAttr(o, [id])\nGet/set the panner node's attributes for a sound or group of sounds.\n* **o**: `Object` All values to update.\n  * **coneInnerAngle** `360` A parameter for directional audio sources, this is an angle, in degrees, inside of which there will be no volume reduction.\n  * **coneOuterAngle** `360` A parameter for directional audio sources, this is an angle, in degrees, outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n  * **coneOuterGain** `0` A parameter for directional audio sources, this is the gain outside of the `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n  * **distanceModel** `inverse` Determines algorithm used to reduce volume as audio moves away from listener. Can be `linear`, `inverse` or `exponential`. You can find the implementations of each in the [spec](https://webaudio.github.io/web-audio-api/#idl-def-DistanceModelType).\n  * **maxDistance** `10000` The maximum distance between source and listener, after which the volume will not be reduced any further.\n  * **refDistance** `1` A reference distance for reducing volume as source moves further from the listener. This is simply a variable of the distance model and has a different effect depending on which model is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n  * **rolloffFactor** `1` How quickly the volume reduces as source moves from listener. This is simply a variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]` with `inverse` and `exponential`.\n  * **panningModel** `HRTF` Determines which spatialization algorithm is used to position audio. Can be `HRTF` or `equalpower`.\n* **id**: `Number` `optional` The sound ID. If none is passed, all in group will be updated.\n\n\n### Global Methods\n#### stereo(pan)\nHelper method to update the stereo panning position of all current `Howls`. Future `Howls` will not use this value unless explicitly set.\n* **pan**: `Number` A value of -1.0 is all the way left and 1.0 is all the way right.\n\n#### pos(x, y, z)\nGet/set the position of the listener in 3D cartesian space. Sounds using 3D position will be relative to the listener's position.\n* **x**: `Number` The x-position of the listener.\n* **y**: `Number` The y-position of the listener.\n* **z**: `Number` The z-position of the listener.\n\n#### orientation(x, y, z, xUp, yUp, zUp)\nGet/set the direction the listener is pointing in the 3D cartesian space. A front and up vector must be provided. The front is the direction the face of the listener is pointing, and up is the direction the top of the listener is pointing. Thus, these values are expected to be at right angles from each other.\n* **x**: `Number` The x-orientation of listener.\n* **y**: `Number` The y-orientation of listener.\n* **z**: `Number` The z-orientation of listener.\n* **xUp**: `Number` The x-orientation of the top of the listener.\n* **yUp**: `Number` The y-orientation of the top of the listener.\n* **zUp**: `Number` The z-orientation of the top of the listener.\n\n\n### Group Playback\nEach `new Howl()` instance is also a group. You can play multiple sound instances from the `Howl` and control them individually or as a group (note: each `Howl` can only contain a single audio file). For example, the following plays two sounds from a sprite, changes their volume together and then pauses both of them at the same time.\n\n```javascript\nvar sound = new Howl({\n  src: ['sound.webm', 'sound.mp3'],\n  sprite: {\n    track01: [0, 20000],\n    track02: [21000, 41000]\n  }\n});\n\n// Play each of the track.s\nsound.play('track01');\nsound.play('track02');\n\n// Change the volume of both tracks.\nsound.volume(0.5);\n\n// After a second, pause both sounds in the group.\nsetTimeout(function() {\n  sound.pause();\n}, 1000);\n```\n\n\n### Mobile/Chrome Playback\nBy default, audio on mobile browsers and Chrome/Safari is locked until a sound is played within a user interaction, and then it plays normally the rest of the page session ([Apple documentation](https://developer.apple.com/library/safari/documentation/audiovideo/conceptual/using_html5_audio_video/PlayingandSynthesizingSounds/PlayingandSynthesizingSounds.html)). The default behavior of howler.js is to attempt to silently unlock audio playback by playing an empty buffer on the first `touchend` event. This behavior can be disabled by calling:\n\n```javascript\nHowler.autoUnlock = false;\n```\n\nIf you try to play audio automatically on page load, you can listen to a `playerror` event and then wait for the `unlock` event to try and play the audio again:\n\n```javascript\nvar sound = new Howl({\n  src: ['sound.webm', 'sound.mp3'],\n  onplayerror: function() {\n    sound.once('unlock', function() {\n      sound.play();\n    });\n  }\n});\n\nsound.play();\n```\n\n\n### Dolby Audio Playback\nFull support for playback of the Dolby Audio format (currently support in Edge and Safari) is included. However, you must specify that the file you are loading is `dolby` since it is in a `mp4` container.\n\n```javascript\nvar dolbySound = new Howl({\n  src: ['sound.mp4', 'sound.webm', 'sound.mp3'],\n  format: ['dolby', 'webm', 'mp3']\n});\n```\n\n### Facebook Instant Games\nHowler.js provides audio support for the new [Facebook Instant Games](https://developers.facebook.com/docs/games/instant-games/engine-recommendations) platform. If you encounter any issues while developing for Instant Games, open an issue with the tag `[IG]`.\n\n### Format Recommendations\nHowler.js supports a wide array of audio codecs that have varying browser support (\"mp3\", \"opus\", \"ogg\", \"wav\", \"aac\", \"m4a\", \"m4b\", \"mp4\", \"webm\", ...), but if you want full browser coverage you still need to use at least two of them. If your goal is to have the best balance of small filesize and high quality, based on extensive production testing, your best bet is to default to `webm` and fallback to `mp3`. `webm` has nearly full browser coverage with a great combination of compression and quality. You'll need the `mp3` fallback for Internet Explorer.\n\nIt is important to remember that howler.js selects the first compatible sound from your array of sources. So if you want `webm` to be used before `mp3`, you need to put the sources in that order.\n\nIf you want your `webm` files to be seekable in Firefox, be sure to encode them with the cues element. One way to do this is by using the `dash` flag in [ffmpeg](https://www.ffmpeg.org/):\n\n```\nffmpeg -i sound1.wav -dash 1 sound1.webm\n```\n\n### Sponsors\nSupport the ongoing development of howler.js and get your logo on our README with a link to your site [[become a sponsor](https://github.com/sponsors/goldfire)]. You can also become a backer at a lower tier and get your name in the [BACKERS](https://github.com/goldfire/howler.js/blob/master/BACKERS.md) list. All support is greatly appreciated!\n\n[![GoldFire Studios](https://s3.amazonaws.com/howler.js/sponsors/goldfire_studios.png \"GoldFire Studios\")](https://goldfirestudios.com)\n\n### License\n\nCopyright (c) 2013-2021 [James Simpson](https://twitter.com/GoldFireStudios) and [GoldFire Studios, Inc.](http://goldfirestudios.com)\n\nReleased under the [MIT License](https://github.com/goldfire/howler.js/blob/master/LICENSE.md).\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.6416015625,
          "content": "{\n  \"name\": \"howler.js\",\n  \"description\": \"Javascript audio library for the modern web.\",\n  \"homepage\": \"https://howlerjs.com\",\n  \"keywords\": [\n    \"howler\",\n    \"howler.js\",\n    \"audio\",\n    \"sound\",\n    \"web audio\",\n    \"webaudio\",\n    \"html5\",\n    \"html5 audio\",\n    \"audio sprite\",\n    \"audiosprite\"\n  ],\n  \"authors\": [\n    \"James Simpson <james@goldfirestudios.com> (http://goldfirestudios.com)\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/goldfire/howler.js.git\"\n  },\n  \"main\": \"dist/howler.js\",\n  \"license\": \"MIT\",\n  \"moduleType\": [\n    \"amd\",\n    \"globals\",\n    \"node\"\n  ],\n  \"ignore\": [\n    \"tests\",\n    \"examples\"\n  ]\n}\n"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.8857421875,
          "content": "{\n  \"name\": \"howler\",\n  \"version\": \"2.2.4\",\n  \"description\": \"Javascript audio library for the modern web.\",\n  \"homepage\": \"https://howlerjs.com\",\n  \"keywords\": [\n    \"howler\",\n    \"howler.js\",\n    \"audio\",\n    \"sound\",\n    \"web audio\",\n    \"webaudio\",\n    \"browser\",\n    \"html5\",\n    \"html5 audio\",\n    \"audio sprite\",\n    \"audiosprite\"\n  ],\n  \"author\": \"James Simpson <james@goldfirestudios.com> (http://goldfirestudios.com)\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/goldfire/howler.js.git\"\n  },\n  \"scripts\": {\n    \"build\": \"VERSION=`printf 'v' && node -e 'console.log(require(\\\"./package.json\\\").version)'` && sed -i '' '2s/.*/ *  howler.js '\\\"$VERSION\\\"'/' src/howler.core.js && sed -i '' '4s/.*/ *  howler.js '\\\"$VERSION\\\"'/' src/plugins/howler.spatial.js && uglifyjs --preamble \\\"/*! howler.js $VERSION | (c) 2013-2020, James Simpson of GoldFire Studios | MIT License | howlerjs.com */\\\" src/howler.core.js -c -m --screw-ie8 -o dist/howler.core.min.js && uglifyjs --preamble \\\"/*! howler.js $VERSION | Spatial Plugin | (c) 2013-2020, James Simpson of GoldFire Studios | MIT License | howlerjs.com */\\\" src/plugins/howler.spatial.js -c -m --screw-ie8 -o dist/howler.spatial.min.js && awk 'FNR==1{echo \\\"\\\"}1' dist/howler.core.min.js dist/howler.spatial.min.js | sed '3s~.*~/*! Spatial Plugin */~' | perl -pe 'chomp if eof' > dist/howler.min.js && awk '(NR>1 && FNR==1){printf (\\\"\\\\n\\\\n\\\")};1' src/howler.core.js src/plugins/howler.spatial.js > dist/howler.js\",\n    \"release\": \"VERSION=`printf 'v' && node -e 'console.log(require(\\\"./package.json\\\").version)'` && git tag $VERSION && git push && git push origin $VERSION && npm publish\"\n  },\n  \"devDependencies\": {\n    \"uglify-js\": \"2.x\"\n  },\n  \"main\": \"dist/howler.js\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"src\",\n    \"dist/howler.js\",\n    \"dist/howler.min.js\",\n    \"dist/howler.core.min.js\",\n    \"dist/howler.spatial.min.js\",\n    \"LICENSE.md\"\n  ]\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}