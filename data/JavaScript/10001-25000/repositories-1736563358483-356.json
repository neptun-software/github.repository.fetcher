{
  "metadata": {
    "timestamp": 1736563358483,
    "page": 356,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cockpit-project/cockpit",
      "stars": 11497,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cockpit-ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.03125,
          "content": "cockpit/*\ndist/*\nnode_modules/*\n"
        },
        {
          "name": ".eslintrc.json",
          "type": "blob",
          "size": 3.267578125,
          "content": "{\n    \"root\": true,\n    \"env\": {\n        \"browser\": true,\n        \"es2022\": true\n    },\n    \"extends\": [\n        \"eslint:recommended\", \"standard\", \"standard-jsx\", \"standard-react\",\n        \"plugin:jsx-a11y/recommended\"\n    ],\n    \"parserOptions\": {\n        \"ecmaVersion\": \"2022\"\n    },\n    \"plugins\": [\"react\", \"react-hooks\"],\n    \"rules\": {\n        \"indent\": [\"error\", 4,\n            {\n                \"ObjectExpression\": \"first\",\n                \"CallExpression\": {\"arguments\": \"first\"},\n                \"MemberExpression\": 2,\n                \"ignoredNodes\": [ \"JSXAttribute\" ]\n            }],\n        \"newline-per-chained-call\": [\"error\", { \"ignoreChainWithDepth\": 3 }],\n        \"lines-between-class-members\": [\"error\", \"always\", { \"exceptAfterSingleLine\": true }],\n        \"prefer-promise-reject-errors\": [\"error\", { \"allowEmptyReject\": true }],\n        \"no-var\": \"error\",\n        \"react/jsx-indent\": [\"error\", 4],\n        \"semi\": [\"error\", \"always\", { \"omitLastInOneLineBlock\": true }],\n\n        \"react-hooks/rules-of-hooks\": \"error\",\n        \"react-hooks/exhaustive-deps\": \"error\",\n\n        \"camelcase\": \"off\",\n        \"comma-dangle\": \"off\",\n        \"curly\": \"off\",\n        \"no-template-curly-in-string\": \"off\",\n        \"jsx-quotes\": \"off\",\n        \"no-console\": \"off\",\n        \"quotes\": \"off\",\n        \"react/jsx-curly-spacing\": \"off\",\n        \"react/jsx-indent-props\": \"off\",\n        \"react/jsx-handler-names\": \"off\",\n        \"react/jsx-closing-bracket-location\": \"off\",\n        \"react/jsx-closing-tag-location\": \"off\",\n        \"react/jsx-curly-newline\": \"off\",\n        \"react/jsx-first-prop-new-line\": \"off\",\n        \"react/jsx-no-useless-fragment\": \"error\",\n        \"react/prop-types\": \"off\",\n        \"space-before-function-paren\": \"off\",\n        \"standard/no-callback-literal\": \"off\",\n\n        \"eqeqeq\": \"off\",\n        \"react/jsx-no-bind\": \"off\",\n        \"react/jsx-wrap-multilines\": \"off\"\n    },\n    \"globals\": {\n        \"require\": \"readonly\",\n        \"module\": \"readonly\"\n    },\n    \"overrides\": [\n        {\n          \"files\": [\"**/*.ts\", \"**/*.tsx\"],\n          \"plugins\": [\n            \"@typescript-eslint\"\n          ],\n          \"extends\": \"plugin:@typescript-eslint/recommended\",\n          \"parser\": \"@typescript-eslint/parser\",\n          \"parserOptions\": {\n            \"projectService\": [\"./tsconfig.json\"]\n          },\n          \"rules\": {\n            // https://typescript-eslint.io/rules/no-use-before-define\n            // Note: you must disable the base rule as it can report incorrect errors\n            \"no-use-before-define\": \"off\",\n            \"@typescript-eslint/no-use-before-define\": [\n              \"error\",\n              {\n                \"functions\": false\n              }\n            ],\n            // as recommended by https://typescript-eslint.io/rules/no-unused-vars/\n            \"@typescript-eslint/no-unused-vars\": [\n              \"error\",\n              {\n                \"args\": \"all\",\n                \"argsIgnorePattern\": \"^_\",\n                \"caughtErrors\": \"all\",\n                \"caughtErrorsIgnorePattern\": \"^_\",\n                \"destructuredArrayIgnorePattern\": \"^_\",\n                \"varsIgnorePattern\": \"^_\",\n                \"ignoreRestSiblings\": true\n              }\n            ]\n          }\n        }\n    ],\n    \"settings\": {\n        \"react\": {\n            \"version\": \"detect\"\n        }\n    }\n}\n"
        },
        {
          "name": ".fmf",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.4892578125,
          "content": "# Please keep this file sorted (LC_COLLATE=C.UTF-8),\n# grouped into the 3 categories below:\n#  - general patterns (match in all directories)\n#  - patterns to match files at the toplevel\n#  - patterns to match files in subdirs\n\n# general patterns\n*.a\n*.gcda\n*.gcno\n*.log\n*.mo\n*.o\n*.pyc\n*.so\n*.trs\n*.swp\n.deps/\n.dirstamp\n.extra_dist\nMakefile\nMakefile.in\n\n# toplevel (/...)\n/*.list\n/.coverage\n/.tox\n/Coverage\n/aclocal.m4\n/autom4te.cache\n/bots\n/build/\n/cockpit\n/cockpit-*.tar*\n/cockpit-*.xz\n/cockpit-askpass\n/cockpit-bridge\n/cockpit-certificate-ensure\n/cockpit-pcp\n/cockpit-session\n/cockpit-tls\n/cockpit-ws\n/cockpit-wsinstance-factory\n/cockpit.lang\n/cockpit.pp\n/cockpit.pp.bz2\n/cockpit.spec\n/compile_commands.json\n/config.*\n/configure\n/dist/\n/frob-websocket\n/lcov/\n/mock-*\n/package-lock.json\n/qunit/\n/socket-activation-helper\n/stamp-h1\n/tags\n/test-*\n/test_rsa_key\n/Test[A-Z]*\n/tmp-dist\n/tmp/\n/tsconfig.tsbuildinfo\n/version.m4\n/wsinstance-start\n\n# subdirs (/subdir/...)\n/doc/guide/html\n/doc/guide/version\n/doc/man/*.[1-8]\n/doc/version\n/src/appstream/*.metainfo.xml\n/po/*.pot\n/src/systemd/org.cockpit-project.cockpit-bridge.policy\n/src/cockpit.egg-info/\n/src/common/fail-html.c\n/src/systemd/cockpit*.service\n/src/systemd/cockpit.socket\n/src/systemd/tmpfiles.d/cockpit-ws.conf\n/src/tls/cockpit-certificate-helper\n/src/ws/cockpit-desktop\n/src/ws/cockpit.appdata.xml\n/src/ws/mock-dbus-tests.[ch]\n/test/images/\n/tools/compile\n/tools/debian/copyright\n/tools/depcomp\n/tools/install-sh\n/tools/missing\n/tools/py-compile\n/tools/test-driver\n"
        },
        {
          "name": ".gitleaks.toml",
          "type": "blob",
          "size": 0.1083984375,
          "content": "# # help Red Hat ignore false positives during its code scans\n[allowlist]\npaths = [\n    'src/ssh/mock.*key',\n]\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.57421875,
          "content": "[submodule \"modules/systemd_ctypes\"]\n\tpath = vendor/systemd_ctypes\n\turl = https://github.com/allisonkarlitskaya/systemd_ctypes.git\n[submodule \"node_modules\"]\n\tpath = node_modules\n\turl = https://github.com/cockpit-project/node-cache.git\n[submodule \"test/reference\"]\n\tpath = test/reference\n\turl = https://github.com/cockpit-project/pixel-test-reference\n\tbranch = empty\n[submodule \"modules/ferny\"]\n\tpath = vendor/ferny\n\turl = https://github.com/allisonkarlitskaya/ferny\n[submodule \"modules/beipack\"]\n\tpath = vendor/beipack\n\turl = https://github.com/allisonkarlitskaya/beipack\n\tbranch = main\n"
        },
        {
          "name": ".stylelintrc.json",
          "type": "blob",
          "size": 1.4794921875,
          "content": "{\n  \"extends\": \"stylelint-config-standard-scss\",\n  \"plugins\": [\n    \"stylelint-use-logical-spec\"\n  ],\n  \"rules\": {\n    \"at-rule-empty-line-before\": null,\n    \"declaration-empty-line-before\": null,\n    \"custom-property-empty-line-before\": null,\n    \"comment-empty-line-before\": null,\n    \"scss/double-slash-comment-empty-line-before\": null,\n    \"scss/dollar-variable-colon-space-after\": null,\n\n    \"custom-property-pattern\": null,\n    \"declaration-block-no-duplicate-properties\": null,\n    \"declaration-block-no-redundant-longhand-properties\": null,\n    \"declaration-block-no-shorthand-property-overrides\": null,\n    \"declaration-block-single-line-max-declarations\": null,\n    \"font-family-no-duplicate-names\": null,\n    \"function-url-quotes\": null,\n    \"keyframes-name-pattern\": null,\n    \"media-feature-range-notation\": \"prefix\",\n    \"no-descending-specificity\": null,\n    \"no-duplicate-selectors\": null,\n    \"scss/at-extend-no-missing-placeholder\": null,\n    \"scss/load-partial-extension\": null,\n    \"scss/at-import-no-partial-leading-underscore\": null,\n    \"scss/load-no-partial-leading-underscore\": null,\n    \"scss/at-mixin-pattern\": null,\n    \"scss/comment-no-empty\": null,\n    \"scss/dollar-variable-pattern\": null,\n    \"scss/double-slash-comment-whitespace-inside\": null,\n    \"scss/no-global-function-names\": null,\n    \"scss/operator-no-unspaced\": null,\n    \"selector-class-pattern\": null,\n    \"selector-id-pattern\": null,\n    \"selector-not-notation\": \"simple\",\n    \"liberty/use-logical-spec\": \"always\"\n  }\n}\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.2119140625,
          "content": "Cockpit is being developed by many contributors. Please see\nhttps://github.com/cockpit-project/cockpit/graphs/contributors\nfor a list of authors.\n\nIn a git checkout of the project you can also use `git shortlog -sn`.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 25.908203125,
          "content": "                  GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\f\n                  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\f\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\f\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\f\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\f\n           How to Apply These Terms to Your New Libraries\n\n  If you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change.  You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the library's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the library, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n  <signature of Ty Coon>, 1 April 1990\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n"
        },
        {
          "name": "HACKING.md",
          "type": "blob",
          "size": 21.75,
          "content": "# Hacking on Cockpit\n\nStart by getting the code:\n\n    git clone https://github.com/cockpit-project/cockpit\n    cd cockpit/\n\nThe remainder of the commands assume you're in the top level of the\nCockpit git repository checkout.\n\n**Do not clone a fork!** This will not work for various reasons (missing tags,\ndetermining version, integration with bots commands). Please keep `origin` as\nthe read-only actual upstream project, and add your fork as a separate writable\nremote, for example with\n\n    git remote add my git@github.com:yourgithubid/cockpit.git\n\n## Setting up development container\n\nThe cockpit team maintains a [cockpit/tasks container](https://ghcr.io/cockpit-project/tasks)\nfor both local development and CI. If you can install [toolbx](https://containertoolbx.org/) or\n[distrobox](https://distrobox.privatedns.org/) on your system, it is highly\nrecommended to do that:\n\n - It is *the* official environment for CI, known to work, and gives you reproducible results.\n - It avoids having to install development packages on your main machine.\n - It avoids having to map the build and test dependencies to package names of various distributions.\n\n1. Install `toolbox`\n\n   - Fedora/CentOS/RHEL based distributions:\n\n         sudo dnf install toolbox\n\n   - Debian/Ubuntu based distributions:\n\n         sudo apt install podman-toolbox\n\n2. Create a development toolbox for Cockpit\n\n       toolbox create --image ghcr.io/cockpit-project/tasks -c cockpit\n\n3. Enter the toolbox:\n\n       toolbox enter cockpit\n\nYour home directory, user D-Bus, etc. are shared with the host, so you can\nedit files as you normally would. Building and running tests happens inside the\ntoolbox container. If desired, you can install additional packages with\n`sudo dnf install`.\n\nThe Cockpit team occasionally refreshes the `tasks` container image.\nTo re-create your development container from the latest image, run:\n\n    podman pull ghcr.io/cockpit-project/tasks\n    toolbox rm cockpit\n\n...and then repeat steps 2 and 3 from above.\n\n## Working on Cockpit's session pages\n\nMost contributors want to work on the web (HTML, JavaScript, CSS) parts of Cockpit.\n\n### Install Cockpit\n\nFirst, install Cockpit on your local machine as described in:\n\n<https://cockpit-project.org/running.html>\n\n### Build session pages\n\nNext, run this command from your top level Cockpit checkout directory, and make\nsure to run it as the same user that you'll use to log into Cockpit below.\n\n    mkdir -p ~/.local/share/\n    ln -s $(pwd)/dist ~/.local/share/cockpit\n\nThis will cause Cockpit to read JavaScript, HTML, and CSS files directly from the\nlocally built package output directory instead of using the system-installed Cockpit\nfiles.\n\nThe recommended way to build bundles is to use the \"watch\" mode\n(`-w` or`--watch`) on the page you are working on. For example, if you want to\nwork on anything in [pkg/systemd](./pkg/systemd/), run:\n\n    ./build.js -w systemd\n\nSee [pkg/](./pkg/) for a list of all pages.\n\nIf you work on a change that affects multiple pages (such as a file in\npkg/lib/), you can also build all pages:\n\n    ./build.js -w\n\nNow you can log into Cockpit on your local Linux machine at the following\naddress, using the same username and password as your desktop login:\n\n<http://localhost:9090>\n\nWatch mode automatically rebuilds when source files are modified. Once it\nfinishes building, refresh your browser to see the changes in Cockpit.\nPress `Ctrl-C` to stop watch mode when you are done changing the code.\n\n### Testing\n\nYou often need to test code changes in a VM. You can set the `$RSYNC` env\nvariable to copy the built page into the given SSH target's\n/usr/local/share/cockpit/ directory. If you use Cockpit's own test VMs and set up the\nSSH `c` alias as described in [test/README.md](./test/README.md), you can use\none of these commands:\n\n    RSYNC=c ./build.js -w kdump\n    RSYNC=c ./build.js -w\n\n### Returning to system packages\n\nTo make Cockpit use system packages again, instead of your checkout directory,\nremove the symlink with the following command and log back into Cockpit:\n\n    rm ~/.local/share/cockpit\n\n## Building and unit tests\n\nCockpit uses autotools, so there are familiar `./configure` script and\nMakefile targets.\n\nAfter a fresh clone of the Cockpit sources, you need to prepare them by running\n`autogen.sh` like this:\n\n    ./autogen.sh --prefix=/usr --enable-debug\n\nAs shown, `autogen.sh` runs 'configure' with the given options, and it also\nprepares the build tree by downloading various nodejs dependencies.\n\nWhen working with a Git clone, it is best to always run `./autogen.sh`\ninstead of `./configure`.\n\nThen run\n\n    make\n\nto build everything. Cockpit has a single non-recursive Makefile. You can only\nrun `make` from the top-level and it will always rebuild the whole project.\n\nYou can run unit tests of the current checkout:\n\n    make check\n\nThese should finish very quickly. It is a good practice to do this often.\n\nFor debugging individual tests, there are compiled binaries in the build\ndirectory. For QUnit tests (JavaScript), you can run\n\n    ./test-server\n\nwhich will output a URL to connect to with a browser, such as\n<http://localhost:8765/qunit/base1/test-dbus.html>. Adjust the path for different\ntests and inspect the results there.\n\nQUnit tests are run as part of a pytest test called `test_browser`.  You can\nrun individual tests via `pytest -k`, like so:\n\n    pytest -k test-fsinfo.html\n\nYou can see JavaScript code coverage information for QUnit tests.  For a\nsummary table:\n\n    pytest -k test_browser --js-cov\n\nAnd for detailed output on uncovered sections in a specific file, something\nlike:\n\n    pytest -k test-fsinfo.html --js-cov-files='*/fsinfo.ts'\n\nCoverage information is gathered into the pytest tmpdir, regardless of which\ncoverage-related commandline flags are given, so it's also possible to drill\ndown after the fact — without re-running tests — using something like:\n\n    test/common/js_coverage.py -m '*/fsinfo.ts' /tmp/pytest-of-*/pytest-current/js-coverage/*\n\nThere are also static code and syntax checks which you should run often:\n\n    test/common/static-code\n\nIt is highly recommended to set up a git pre-push hook, to avoid pushing PRs\nthat will fail on trivial errors:\n\n    ln -s ../../tools/git-hook-pre-push .git/hooks/pre-push\n\nThis calls `test/common/static-code` for each commit you're trying to push.\n\nYou can also set up a post-commit hook to do the same, after each commit:\n\n    ln -s ../../tools/git-hook-post-commit .git/hooks/post-commit\n\nWe also have a hook to ameliorate one of the more annoying drawbacks of using\ngit submodules:\n\n    ln -s ../../tools/git-hook-pre-rebase .git/hooks/pre-rebase\n\n## Running the integration test suite\n\nRefer to the [testing README](test/README.md) for details on running the Cockpit\nintegration tests locally.\n\n## Bridge\n\nThe Cockpit bridge is the initial program launched in a Cockpit Linux session:\nIts stdin/out is connected to the web socket (and thus to JavaScript in the\n[pages](pkg/)), where it speaks a [JSON protocol](doc/protocol.md) that\nmultiplexes \"channels\" -- abstractions of operating system APIs that the pages\nuse to implement their functionality. This protocol is translated into\noperating system calls such as opening or writing files, D-Bus calls, or HTTP\nqueries. Think of the bridge as the moral equivalent of \"bash\" in a human SSH\nsession.\n\nThe bridge resides in `src/cockpit` with most of its rules in `src/Makefile.am`.\nThis directory was chosen because it matches the standard so-called \"src\nlayout\" convention for Python packages, where each package (`cockpit`) is a\nsubdirectory of the `src` directory.\n\n### Running the bridge\n\nThe bridge can be used interactively on a local machine out of the source tree:\n\n    PYTHONPATH=src python3 -m cockpit.bridge\n\nTo make it easy to test out channels without having to write out messages\nmanually, `cockpit.misc.print` can be used:\n\n    PYTHONPATH=src python3 -m cockpit.misc.print open fsinfo path=/etc 'attrs=[\"type\", \"entries\"]' | PYTHONPATH=src python3 -m cockpit.bridge\n\nThese shell aliases might be useful when experimenting with the protocol:\n\n    alias cpy='PYTHONPATH=src python3 -m cockpit.bridge'\n    alias cpf='PYTHONPATH=src python3 -m cockpit.misc.print'\n\nTo enable debug logging in journal on a test image, you can pass `--debug` to\n`image-prepare`. This will set `COCKPIT_DEBUG=all` to `/etc/environment`, if\nyou are only interested channel debug messages change `all` to\n`cockpit.channel`.\n\n### Testing the bridge\n\nThere are a growing number of [pytest](https://docs.pytest.org) tests being written to test\nthe bridge code.  You can run these with `make pytest` or\n`make pytest-cov`.  Those are both just rules to make sure that the\n`systemd_ctypes` submodule is checked out before running `pytest` from the\nsource directory.\n\nThe tests require at least `pytest` 7.0.0 or higher to run.\n\n## Running eslint\n\nCockpit uses [ESLint](https://eslint.org/) to automatically check JavaScript\ncode style in `.js` and `.jsx` files.\n\nThe linter is executed as part of `test/common/static-code`.\n\nFor developer convenience, the ESLint can be started explicitly by:\n\n    npm run eslint\n\nMost rule violations can be automatically fixed by running:\n\n    npm run eslint:fix\n\nRules configuration can be found in the `.eslintrc.json` file.\n\nDuring fast iterative development, you can also choose to not run eslint, by\nrunning `./build.js` with the `-e`/`--no-eslint` option. This\nspeeds up the build and avoid build failures due to ill-formatted comments,\nunused identifiers, and other JavaScript-related issues.\n\n## Running stylelint\n\nCockpit uses [Stylelint](https://stylelint.io/) to automatically check CSS code\nstyle in `.css` and `.scss` files.\n\nThe linter is executed as part of `test/common/static-code`.\n\nFor developer convenience, the Stylelint can be started explicitly by:\n\n    npm run stylelint\n\nBut note that this only covers files in `pkg/`. `test/common/static-code` covers\n*all* (S)CSS files tracked in git.\n\nSome rule violations can be automatically fixed by running:\n\n    npm run stylelint:fix\n\nRules configuration can be found in the `.stylelintrc.json` file.\n\nDuring fast iterative development, you can also choose to not run stylelint, by\nrunning `./build.js` with the `-s`/`--no-stylelint` option. This speeds up the\nbuild and avoids build failures due to ill-formatted CSS or other issues.\n\n## Working on your local machine: systemd-sysext\n\nIf you want to safely test your local changes directly on it, Cockpit supports\ninstallation as a [systemd-sysext](https://www.freedesktop.org/software/systemd/man/latest/systemd-sysext.html).\nThis covers all parts of Cockpit (ws, tls, session, bridge, login page, systemd\nunits, PAM configuration, and the session pages) except for the SELinux policy.\nIt gets installed into `/run/extensions/`, so nothing ever hits the disk and\nthis also works on read-only installations (CoreOS, OSTree, bootc).\n\nJust run:\n\n    tools/make-sysext\n\nThis runs `./autogen.sh` if necessary, and then just re-`make`s your tree,\nre-installs it into `/run/extensions`, and reloads the sysext in systemd.\nAfterwards you can connect to http://localhost:9090 as usual.\n\nTo remove this, reboot or run\n\n    tools/make-sysext stop\n\n**Attention**: This is not currently compatible with SELinux in enforcing mode.\nIf you have that, you need to disable it:\n\n    sudo setenforce 0\n\n## Working on your local machine: Web server\n\nIf the above systemd-sysext approach does not work for you, you can also test\nchanges with some bind mounts.\n\nTo test changes to the login page, you can bind-mount the build tree's\n`dist/static/` directory over the system one:\n\n    sudo mount -o bind dist/static/ /usr/share/cockpit/static/\n\nLikewise, to test changes to the branding, use:\n\n    sudo mount -o bind src/branding/ /usr/share/cockpit/branding/\n\nAfter that, run `systemctl stop cockpit.service` to ensure that the web server\nrestarts on the next browser request.\n\nTo make Cockpit use system-installed code again, umount the paths:\n\n    sudo umount /usr/share/cockpit/static/ /usr/share/cockpit/branding/\n    systemctl stop cockpit.service\n\nSimilarly, if you change `cockpit-ws` itself, you can make the system (systemd\nunits, cockpit-tls, etc.) use this:\n\n    sudo mount -o bind cockpit-ws /usr/libexec/cockpit-ws\n\nOn Debian-based OSes (including Ubuntu), the path will be\n`/usr/lib/cockpit/cockpit-ws` instead.\n\nOn Fedora, CentOS, Red Hat Enterprise Linux, and related distributions, you also\nneed to disable SELinux with:\n\n    sudo setenforce 0\n\nfor this to work, as your local build tree does not otherwise have the expected\nSELinux type.\n\nSome cockpit binaries rely on specific paths in /usr/share or libexecdir to be\nset correctly. By default they are set to `/usr/local`.\n\nOn RPM based systems, this can be set using an autogen.sh argument;\nafterwards you need to rebuild:\n\n    ./autogen.sh rpm\n\n## Installation from upstream sources\n\n    make\n    sudo make install\n\nThis will install Cockpit and all support files. If you have a\nFedora/RHEL/CentOS based distribution, install a PAM configuration with\n\n    sudo cp tools/cockpit.pam /etc/pam.d/cockpit\n\nIf you have a Debian/Ubuntu based distribution, install this PAM config instead:\n\n    sudo cp tools/cockpit.debian.pam /etc/pam.d/cockpit\n\nFor other distributions you need to create a PAM config yourself.\n\nIf you prefer to install to a different `--prefix` and would prefer\nthat `make install` not write outside that prefix, then specify the\n`--enable-prefix-only` option to `autogen.sh`. This will result in an\ninstallation of Cockpit that does not work without further tweaking.\nFor advanced users only.\n\n## Build distribution packages\n\nInstead of a direct `make install` as above, you can also build distribution\npackages and install them. This is generally more robust, as they upgrade and\nremove cleanly, and don't interfere with distribution packages in `/usr`.\n\nIn a Fedora/RHEL build environment you can build binary RPMs with\n\n    tools/make-rpms --quick\n\nIn a Debian/Ubuntu build environment you can build debs with\n\n    tools/make-debs --quick\n\n## Updating `node_modules`\n\nDuring a normal build from a git checkout, the `node_modules` will be\nautomatically unpacked from a cache kept in a separate git repository.  You can\nforce the unpack to occur using the `tools/node-modules checkout` command, but\nthis shouldn't be necessary.  In the event that you need to modify\n`package.json` (to install a new module, for example) then you'll need to run\n`tools/node-modules install` to create a new cache from the result of running\n`npm install` on your new `package.json`.\n\nYour locally rebuilt changes to `node_modules` won't be used by others.  A new\nversion will be created by a GitHub workflow when you open your pull request.\n\nThe `tools/node-modules` script inspects the `GITHUB_BASE` environment variable\nto determine the correct repository to use when fetching and pushing.  It will\nstrip the repository name (leaving the project- or username) and use the\n`node-cache.git` repository in that namespace.  If `GITHUB_BASE` is unset, it\nwill default to `cockpit-project/node-cache.git`.\n\nA local cache is maintained in `~/.cache/cockpit-dev`.\n\n## Contributing a change\n\nMake a pull request on github.com with your change. All changes get reviewed,\ntested, and iterated on before getting into Cockpit. The general workflow is\ndescribed in the [wiki](https://github.com/cockpit-project/cockpit/wiki/Workflow).\n\nYou need to be familiar with git to contribute a change. Do your changes\non a branch. Your change should be one or more git commits that each contain one\nsingle logical simple reviewable change, without modifications that are\nunrelated to the commit message.\n\nDon't feel bad if there's multiple steps back and forth asking for changes or\ntweaks before your change gets in. If you fix your commits after getting a\nreview, just force-push to your branch -- this will update the pull request\nautomatically. Do *not* close it and open a new one; that would destroy the\nconversation and reviews.\n\nCockpit is a designed project. Anything that the user will see should have\ndesign done first. This is done on the wiki and mailing list.\n\nBigger changes need to be discussed on the\n[#cockpit:fedoraproject.org](https://matrix.to/#/#cockpit:fedoraproject.org)\nMatrix channel or our mailing list\n[cockpit-devel@lists.fedoraproject.org](https://lists.fedorahosted.org/admin/lists/cockpit-devel.lists.fedorahosted.org/)\nbefore you invest too much time and energy.\n\nFeature changes should have a video and/or screenshots that show the change.\nThis video should be uploaded directly to GitHub on the pull request or issue\nor uploaded to YouTube or another service that allows video embedding.\n\nUse a command like this to record a video including the browser\nframe:\n\n```\nrecordmydesktop -x 1 -y 200 --width 1024 --height 576 \\\n   --fps 24 --freq 44100 --v_bitrate 2000000\n```\n\n(This command only works on X11 and requires the `recordmydesktop` program to\nbe installed.)\n\nYou can also resize your browser window and move it to the right location with\na script. In Firefox you can open the Scratchpad (`Shift+F4`) and enter the\nfollowing commands:\n\n    window.resizeTo(1024, 576);\n    window.moveTo(1, 200);\n\nThen run it with `Ctrl+R` when the browser is showing an empty tab, e.g.\n`about:newtab`. You may need to adjust the positions for your environment.\n\n## Debug logging of Cockpit processes\n\nAll messages from the various cockpit processes go to the journal and can be\nseen with commands like:\n\n    sudo journalctl -f\n\nMuch of Cockpit has verbose internal debug logging that can be enabled when\ntrying to track down a problem. To turn it on add a file to your system like\nthis:\n\n    sudo mkdir -p /etc/systemd/system/cockpit.service.d\n    sudo sh -c 'printf \"[Service]\\nEnvironment=G_MESSAGES_DEBUG=cockpit-ws,cockpit-bridge\\nUser=root\\nGroup=\\n\" > /etc/systemd/system/cockpit.service.d/debug.conf'\n    sudo systemctl daemon-reload\n    sudo systemctl restart cockpit\n\nIn the above command you'll notice the string \"cockpit-ws\". This is a log\ndomain. There are various log domains you can enable:\n\n * cockpit-bridge: Cockpit bridge detailed debug messages\n * cockpit-protocol: Very verbose low level traffic logging\n * cockpit-ws: Cockpit Web Service detailed debug messages\n * WebSocket: Verbose low level WebSocket logging\n\nTo revert the above logging changes:\n\n    sudo rm /etc/systemd/system/cockpit.service.d/debug.conf\n    sudo systemctl daemon-reload\n    sudo systemctl restart cockpit\n\n## Debug logging in Javascript console\n\nVarious javascript methods in Cockpit can show debug messages. You can turn them\non by setting a `window.debugging` global, or setting up a `debugging` property\nin the browser storage. To do this run the following in your javascript console:\n\n    >> sessionStorage.debugging = \"all\"\n\nYou'll notice that there's a ton of messages that get shown. If you\nwant to be more specific, instead of \"all\" use one or more of the following\nspecific types:\n\n    \"all\"      // All available debug messages\n    \"channel\"  // All channel messages sent to server\n    \"dbus\"     // DBus related debug messages\n    \"http\"     // HTTP (via the server) related debug messages\n    \"spawn\"    // Debug messages related to executing processes\n\nThere are other strings related to the code you may be working on. For example,\nthe metrics page shows debug information with the value `metrics`. Do\n`git grep window.debugging pkg` to find out all available ones.\n\nIn addition, if you want your debug setting to survive a browser refresh or\nCockpit log out, use something like:\n\n    >> localStorage.debugging = \"spawn\"\n\n## Using React Developer Tools\n\nCockpit uses React for the JavaScript frontend, [React Developer\nTools](https://react.dev/learn/react-developer-tools) is a browser extension to\ninspect React components, edit props and state. Out of the box the developer\ntools do not work with Cockpit due to the pages being loaded in a separate\niframe. A workaround is to load the page directly by embedding, for example for\nthe system overview page:\n\n<http://localhost:9090/cockpit/@localhost/system/index.html>\n\nThis loads the system overview as a standalone page allowing React Developer\ntools to inspect its state.\n\n## Running Cockpit processes under a debugger\n\nYou may want to run cockpit-ws under a debugger such as valgrind or gdb. You can\nrun these processes as your own user, although you won't be able to debug all\nthe authentication logic in those cases.\n\nFirst of all, make sure Cockpit is correctly installed. Even though we will be\nrunning `cockpit-ws` from the built sources, this still relies on some of the right\nsoftware being installed in order for Cockpit to work. (Such as: PAM stack,\nUI files, cockpit-bridge, etc.)\n\nThis is how you would run cockpit-ws under gdb:\n\n    export G_DEBUG=fatal-criticals\n    export G_MESSAGES_DEBUG=cockpit-ws,cockpit-wrapper,cockpit-bridge\n    gdb --args ./cockpit-ws --port 10000 --no-tls\n\nAnd you can run cockpit-ws and cockpit-bridge under valgrind like this:\n\n    export G_DEBUG=fatal-criticals\n    export G_MESSAGES_DEBUG=cockpit-ws,cockpit-wrapper,cockpit-bridge\n    valgrind --trace-children=yes --trace-children-skip='*unix_chkpwd*' \\\n          ./cockpit-ws --port 10000 --no-tls\n\nNote that cockpit-session and cockpit-bridge will run from the installed\nprefix, rather than your build tree.\n\n## Manually installing the development dependencies\n\n_If at all possible, use the cockpit/tasks container with toolbox/distrobox as\ndocumented above. Installing all necessary development packages manually on\nyour machine is intrusive, error prone, difficult, and hard to debug._\n\nYou will need at least node.js and NPM.\n\nOn Fedora or CentOS (>= 9):\n\n    sudo dnf install npm\n\nOn Debian/Ubuntu:\n\n    sudo apt install npm\n\nFor running tests, the following dependencies are required:\n\n    sudo dnf install curl expect xz rpm-build chromium-headless dbus-daemon \\\n        libvirt-daemon-driver-storage-core libvirt-daemon-driver-qemu libvirt-client python3-libvirt \\\n        python3-pyyaml\n\nFor compiling the C parts, you will need the package build dependencies:\n\n    sudo dnf install dnf-utils python-srpm-macros\n    sudo dnf builddep --spec tools/cockpit.spec\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 6.029296875,
          "content": "NULL =\nCLEANFILES =\ndist_noinst_DATA =\nman_MANS =\nnoinst_DATA =\nnoinst_LIBRARIES =\nnoinst_PROGRAMS =\n\n# See https://www.gnu.org/software/make/manual/html_node/Force-Targets.html\nFORCE:\n\n# -----------------------------------------------------------------------------\n#  node_modules/package-lock.json dependency\n\nV_NODE_MODULES = $(V_NODE_MODULES_$(V))\nV_NODE_MODULES_ = $(V_NODE_MODULES_$(AM_DEFAULT_VERBOSITY))\nV_NODE_MODULES_0 = @V=0\n\n# We want tools/node-modules to run every time package-lock.json is requested\n$(srcdir)/package-lock.json: FORCE\n\t$(V_NODE_MODULES) $(srcdir)/tools/node-modules make_package_lock_json\n\n# -----------------------------------------------------------------------------\n#  make dist\n\nEXTRA_DIST = README.md\nCLEANFILES += cockpit-*.tar.xz\n\n# We override distdir as we want to dist some git-tracked files and dist/ without explicitly listing.\n# The spec also gets patched to declare bundled NPM dependencies.\nEXTRA_DIST += $(EXTRA_FILES)\ndistdir: $(DISTFILES)\n\t@if [ -e '$(srcdir)/.git' ]; then \\\n\t\tgit -C '$(srcdir)' ls-files -x test/reference .fmf .cockpit-ci plans pkg test tools > .extra_dist.tmp && \\\n\t\tmv .extra_dist.tmp '$(srcdir)/.extra_dist'; fi\n\t$(MAKE) $(AM_MAKEFLAGS) distdir-am EXTRA_FILES=\"$$(tr '\\n' ' ' < $(srcdir)/.extra_dist) .extra_dist\"\n\tsed -i \"s/[@]VERSION@/$(VERSION)/\" \"$(distdir)/src/client/org.cockpit_project.CockpitClient.metainfo.xml\"\n\t$(srcdir)/tools/fix-spec $(distdir)/tools/cockpit.spec $(VERSION)\n\tsed -i \"/^pkgver=/ s/0/$(VERSION)/\" \"$(distdir)/tools/arch/PKGBUILD\"\n\tsed -i \"1 s/0/$(VERSION)/\" \"$(distdir)/tools/debian/changelog\"\n\tcp -r \"$(srcdir)/dist\" \"$(distdir)\"\n\t$(srcdir)/tools/adjust-distdir-timestamps \"$(distdir)\"\n\t@echo '  DIST     $(DIST_ARCHIVES)'\n\n# Needed to ensure the tarball is correct for $(VERSION) override\ndist-hook: $(distdir)/src/cockpit/_version.py\n$(distdir)/src/cockpit/_version.py: FORCE\n\tpython3 '$(srcdir)'/src/build_backend.py --copy '$(srcdir)' '$(distdir)'\n\t@rm -f $(distdir)/src/cockpit/_version.py\n\t$(AM_V_GEN) echo \"__version__ = '$(VERSION)'\" > $@\n\n$(distdir)/version.m4: FORCE\n\t@rm -f $(distdir)/version.m4\n\t$(AM_V_GEN) echo 'm4_define(VERSION_NUMBER, [$(VERSION)])' > $@\n\n# be careful not to include autotools cache into dist tarballs\ndist-hook: $(distdir)/configure\n$(distdir)/configure: $(distdir)/version.m4\n\t@rm -f $(distdir)/configure\n\t$(AM_V_GEN) autoreconf $(distdir)\n\t@rm -r $(distdir)/autom4te.cache\n\n# Various downstream packaging assets\ndist-hook: $(distdir)/tools/debian/copyright\n$(distdir)/tools/debian/copyright: $(DIST_STAMP)\n\t$(AM_V_GEN) NODE_ENV=$(NODE_ENV) $(srcdir)/tools/build-debian-copyright > $@\n\nDISTCHECK_CONFIGURE_FLAGS = --enable-prefix-only $(EXTRA_DISTCHECK_CONFIGURE_FLAGS)\n\n# Validate our AppStream metadata\ndistcheck-hook::\n\tfind $(distdir) -name '*.metainfo.xml' -o -name '*.appdata.xml' | xargs appstream-util validate --nonet\n\n# validate that we don't bundle the embedded patternfly font files, we use them from /static/fonts/\ndistcheck-hook::\n\t! grep --color=auto -rn \"\\.\\./fonts/OpenSans\\|fonts/.*eot\\|truetype\" $(distdir)/dist\n\n# -----------------------------------------------------------------------------\n\nTESTS = \\\n\ttest/common/static-code \\\n\t$(NULL)\n\nclean-local::\n\tfind $(builddir) -name '*.gc??' -delete\n\tfind $(srcdir) -name '*.pyc' -delete\n\n# required for running integration tests\nnode_modules/%: $(srcdir)/package-lock.json\n\t@true\n\nEXTRA_DIST += \\\n\tnode_modules/sizzle \\\n\t$(NULL)\n\ncheck: export VERBOSE=1\n\nTEST_EXTENSIONS = .sh\n\nVALGRIND = valgrind --trace-children=yes --quiet --error-exitcode=33 --gen-suppressions=all \\\n\t$(foreach file,$(wildcard $(srcdir)/tools/*.supp),--suppressions=$(file)) \\\n\t--num-callers=16 --leak-check=yes --show-leak-kinds=definite \\\n\t--errors-for-leak-kinds=definite --trace-children-skip='*mock*,/bin*,/usr/bin/*,/usr/local/bin'\n\ncheck-memory:\n\t$(MAKE) LOG_FLAGS=\"$(VALGRIND)\" \\\n\t\tCOCKPIT_SKIP_SLOW_TESTS=1 \\\n\t\t$(AM_MAKEFLAGS) check TESTS=\"$(filter-out test/% bots/%,$(TESTS))\"\nrecheck-memory:\n\t$(MAKE) LOG_FLAGS=\"$(VALGRIND_ARGS)\" \\\n\t\t$(AM_MAKEFLAGS) recheck\n\n# checkout Cockpit's bots for standard test VM images and API to launch them\n# must be from main, as only that has current and existing images; but testvm.py API is stable\n# support CI testing against a bots change\nbots:\n\ttest/common/make-bots\n\n.PHONY: rsync\nRSYNC_HOST ?= c\nRSYNC_DEST ?= $(RSYNC_HOST):/\nrsync:\n\t$(MAKE)\n\t$(MAKE) install DESTDIR=tmp/rsync >/dev/null\n\trsync --recursive --links --checksum --verbose --inplace tmp/rsync/ $(RSYNC_DEST)\n\n# We use these to add conditionally-enabled extra rules\n# automake doesn't like mixing `::` and `if`\n\nCHECK_LOCAL_TARGETS =\n.PHONY: $(CHECK_LOCAL_TARGETS)\ncheck-local:: $(CHECK_LOCAL_TARGETS)\n\nCLEAN_LOCAL_TARGETS =\n.PHONY: $(CLEAN_LOCAL_TARGETS)\nclean-local:: $(CLEAN_LOCAL_TARGETS)\n\nINSTALL_DATA_LOCAL_TARGETS =\n.PHONY: $(INSTALL_DATA_LOCAL_TARGETS)\ninstall-data-local:: $(INSTALL_DATA_LOCAL_TARGETS)\n\nINSTALL_EXEC_HOOK_TARGETS =\n.PHONY: $(INSTALL_EXEC_HOOK_TARGETS)\ninstall-exec-hook:: $(INSTALL_EXEC_HOOK_TARGETS)\n\nUNINSTALL_LOCAL_TARGETS =\n.PHONY: $(UNINSTALL_LOCAL_TARGETS)\nuninstall-local:: $(UNINSTALL_LOCAL_TARGETS)\n\n\n# This Makefile includes several variable definitions that must come first\ninclude src/testlib/Makefile.am\n\ninclude containers/Makefile.am\ninclude containers/flatpak/Makefile.am\ninclude doc/Makefile-doc.am\ninclude doc/guide/Makefile-guide.am\ninclude doc/man/Makefile-man.am\ninclude pkg/Makefile.am\ninclude po/Makefile.am\ninclude selinux/Makefile.am\ninclude src/Makefile.am\ninclude src/branding/arch/Makefile.am\ninclude src/branding/centos/Makefile.am\ninclude src/branding/debian/Makefile.am\ninclude src/branding/default/Makefile.am\ninclude src/branding/fedora/Makefile.am\ninclude src/branding/opensuse/Makefile.am\ninclude src/branding/rhel/Makefile.am\ninclude src/branding/scientific/Makefile.am\ninclude src/branding/ubuntu/Makefile.am\ninclude src/client/Makefile.am\ninclude src/common/Makefile-common.am\ninclude src/pam-ssh-add/Makefile.am\ninclude src/session/Makefile-session.am\ninclude src/systemd/Makefile.am\ninclude src/tls/Makefile-tls.am\ninclude src/websocket/Makefile-websocket.am\ninclude src/ws/Makefile-ws.am\ninclude tools/Makefile-tools.am\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.5068359375,
          "content": "# Cockpit\n**A sysadmin login session in a web browser**\n\n[cockpit-project.org](https://cockpit-project.org/)\n\nCockpit is an interactive server admin interface. It is easy to use and very lightweight.\nCockpit interacts directly with the operating system from a real Linux session in a browser.\n\n### Using Cockpit\n\nYou can [install Cockpit](https://cockpit-project.org/running.html) on many Linux operating\nsystems including Debian, Fedora and RHEL.\n\nCockpit makes Linux discoverable, allowing sysadmins to easily perform tasks such as starting\ncontainers, storage administration, network configuration, inspecting logs and so on.\n\nJumping between the terminal and the web tool is no problem. A service started via Cockpit\ncan be stopped via the terminal. Likewise, if an error occurs in the terminal, it can be seen\nin the Cockpit journal interface.\n\nYou can also easily add other machines that have Cockpit installed and are accessible via SSH and jump\nbetween these hosts.\n\n### Development\n\n * [Making changes to Cockpit](HACKING.md)\n * [How to contribute, developer documentation](https://github.com/cockpit-project/cockpit/wiki/Contributing)\n * Matrix Channel: [#cockpit:fedoraproject.org](https://matrix.to/#/#cockpit:fedoraproject.org)\n * [Mailing List](https://lists.fedorahosted.org/admin/lists/cockpit-devel.lists.fedorahosted.org/)\n * [Guiding Principles](https://cockpit-project.org/ideals.html)\n * [Release Notes](https://cockpit-project.org/blog/category/release.html)\n * [Privacy Policy](https://cockpit-project.org/privacy.html)\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.4833984375,
          "content": "#!/bin/sh\n\nset -eu\n\nsrcdir=\"${0%/*}\"\n\n(\n    cd \"${srcdir}\"\n    echo \"m4_define(VERSION_NUMBER, [$(git describe --tags --abbrev=0)+git])\" > version.m4\n    autoreconf -i --warnings obsolete\n)\n\n[ -n \"${NOCONFIGURE:-}\" ] && exit\n\ncase \"${1:-}\" in\n    rpm)\n        # configure with the same flags as when building an RPM\n        exec rpmbuild -D '_topdir tmp/rpmbuild' -D 'make_build #' \\\n            --build-in-place -bc tools/cockpit.spec ;;\n\n    *)\n        exec \"${srcdir}/configure\" \"$@\" ;;\nesac\n"
        },
        {
          "name": "build.js",
          "type": "blob",
          "size": 8.3251953125,
          "content": "#!/usr/bin/env node\n\nimport child_process from 'node:child_process';\nimport fs from 'node:fs';\nimport os from 'node:os';\nimport path from 'node:path';\nimport process from 'node:process';\n\nimport { getFiles, getTestFiles, all_subdirs } from './files.js';\n\nconst production = process.env.NODE_ENV === 'production';\nconst useWasm = os.arch() != 'x64';\n\n// ensure node_modules is present and up to date\nchild_process.spawnSync('tools/node-modules', ['make_package_lock_json'], { stdio: 'inherit' });\n\n// List of directories to use when resolving import statements\nconst nodePaths = ['pkg/lib'];\n\n// context options for distributed pages in dist/\nconst pkgOptions = {\n    ...!production ? { sourcemap: \"linked\" } : {},\n    bundle: true,\n    external: ['*.woff', '*.woff2', '*.jpg', '*.svg', '../../assets*'], // Allow external font files which live in ../../static/fonts\n    legalComments: 'external', // Move all legal comments to a .LEGAL.txt file\n    loader: {\n        \".js\": \"jsx\",\n        \".py\": \"text\",\n        \".sh\": \"text\",\n    },\n    minify: production,\n    nodePaths,\n    outbase: './pkg',\n    outdir: \"./dist\",\n    target: ['es2021'],\n};\n\n// context options for qunit tests in qunit/\nconst qunitOptions = {\n    sourcemap: \"linked\",\n    bundle: true,\n    minify: false,\n    nodePaths,\n    outbase: './pkg',\n    outdir: \"./qunit\",\n    loader: {\n        \".sh\": \"text\",\n    },\n};\n\nconst parser = (await import('argparse')).default.ArgumentParser();\nparser.add_argument('-r', '--rsync', { help: \"rsync bundles to ssh target after build\", metavar: \"HOST\" });\nparser.add_argument('-w', '--watch', { action: 'store_true', help: \"Enable watch mode\" });\nparser.add_argument('-m', '--metafile', { help: \"Enable bund size information file\", metavar: \"FILE\" });\nparser.add_argument('onlydir', { nargs: '?', help: \"The pkg/<DIRECTORY> to build (eg. base1, shell, ...)\", metavar: \"DIRECTORY\" });\nconst args = parser.parse_args();\n\nif (args.metafile)\n    pkgOptions.metafile = true;\n\nif (args.onlydir?.includes('/'))\n    parser.error(\"Directory must not contain '/'\");\n\nif (useWasm && args.watch)\n    parser.error(\"watch mode is not supported with esbuild-wasm\");\n\nif (args.onlydir)\n    process.env.ONLYDIR = args.onlydir;\nif (args.rsync)\n    process.env.RSYNC = args.rsync;\n\n// keep cockpit.js as global external, except on base1 (as that's what exports it), and kdump (for testing that bundling works)\nconst cockpitJSResolvePlugin = {\n    name: 'cockpit-js-resolve',\n    setup(build) {\n        build.onResolve({ filter: /^cockpit$/ }, args => {\n            if (args.resolveDir.endsWith('/base1') || args.resolveDir.endsWith('/kdump'))\n                return null;\n            return { path: args.path, namespace: 'external-global' };\n        });\n\n        build.onLoad({ filter: /.*/, namespace: 'external-global' },\n                     args => ({ contents: `module.exports = ${args.path}` }));\n    },\n};\n\n// similar to fs.watch(), but recursively watches all subdirectories\nfunction watch_dirs(dir, on_change) {\n    const callback = (ev, dir, fname) => {\n        // only listen for \"change\" events, as renames are noisy\n        if (ev !== \"change\")\n            return;\n        on_change(path.join(dir, fname));\n    };\n\n    fs.watch(dir, {}, (ev, path) => callback(ev, dir, path));\n\n    // watch all subdirectories in dir\n    const d = fs.opendirSync(dir);\n    let dirent;\n    while ((dirent = d.readSync()) !== null) {\n        if (dirent.isDirectory())\n            watch_dirs(path.join(dir, dirent.name), on_change);\n    }\n    d.closeSync();\n}\n\nasync function build() {\n    // dynamic imports which need node_modules\n    const copy = (await import('esbuild-plugin-copy')).default;\n    const esbuild = (await import(useWasm ? 'esbuild-wasm' : 'esbuild')).default;\n\n    const cleanPlugin = (await import('./pkg/lib/esbuild-cleanup-plugin.js')).cleanPlugin;\n    const cockpitCompressPlugin = (await import('./pkg/lib/esbuild-compress-plugin.js')).cockpitCompressPlugin;\n    const cockpitPoEsbuildPlugin = (await import('./pkg/lib/cockpit-po-plugin.js')).cockpitPoEsbuildPlugin;\n    const cockpitRsyncEsbuildPlugin = (await import('./pkg/lib/cockpit-rsync-plugin.js')).cockpitRsyncEsbuildPlugin;\n    const cockpitTestHtmlPlugin = (await import('./pkg/lib/esbuild-test-html-plugin.js')).cockpitTestHtmlPlugin;\n\n    const esbuildStylesPlugins = (await import('./pkg/lib/esbuild-common.js')).esbuildStylesPlugins;\n\n    const { entryPoints, assetFiles, redhat_fonts } = getFiles(args.onlydir);\n    const tests = getTestFiles();\n    const testEntryPoints = tests.map(test => \"pkg/\" + test);\n\n    const pkgFirstPlugins = [\n        cleanPlugin({ subdir: args.onlydir }),\n    ];\n\n    const pkgPlugins = [\n        cockpitJSResolvePlugin,\n        ...esbuildStylesPlugins\n    ];\n\n    const getTime = () => new Date().toTimeString().split(' ')[0];\n\n    const pkgLastPlugins = [\n        cockpitPoEsbuildPlugin({\n            subdirs: args.onlydir ? [args.onlydir] : all_subdirs,\n            // login page does not have cockpit.js, but reads window.cockpit_po\n            wrapper: subdir => subdir == \"static\" ? \"window.cockpit_po = PO_DATA;\" : undefined,\n        }),\n        // Esbuild will only copy assets that are explicitly imported and used\n        // in the code. This is a problem for index.html and manifest.json which are not imported\n        copy({ assets: [...assetFiles, ...redhat_fonts] }),\n        // cockpit-ws cannot currently serve compressed login page\n        ...production ? [cockpitCompressPlugin({ subdir: args.onlydir, exclude: /\\/static/ })] : [],\n\n        {\n            name: 'notify-end',\n            setup(build) {\n                build.onEnd(() => console.log(`${getTime()}: Build finished`));\n            }\n        },\n\n        ...(args.rsync || process.env.RSYNC)\n            ? [cockpitRsyncEsbuildPlugin({ source: \"dist/\" + (args.onlydir || '') })]\n            : [],\n    ];\n\n    if (useWasm) {\n        // build each entry point individually, as otherwise it runs out of memory\n        // See https://github.com/evanw/esbuild/issues/3006\n        const numEntries = entryPoints.length;\n        for (const [index, entryPoint] of entryPoints.entries()) {\n            console.log(\"building\", entryPoint);\n            const context = await esbuild.context({\n                ...pkgOptions,\n                entryPoints: [entryPoint],\n                plugins: [\n                    ...(index === 0 ? pkgFirstPlugins : []),\n                    ...pkgPlugins,\n                    ...(index === numEntries - 1 ? pkgLastPlugins : []),\n                ],\n            });\n\n            await context.rebuild();\n            context.dispose();\n        }\n\n        // build all tests in one go, they are small enough\n        console.log(\"building qunit tests\");\n        const context = await esbuild.context({\n            ...qunitOptions,\n            entryPoints: testEntryPoints,\n            plugins: [\n                cockpitTestHtmlPlugin({ testFiles: tests }),\n            ],\n        });\n\n        await context.rebuild();\n        context.dispose();\n    } else {\n        // with native esbuild, build everything in one go, that's fastest\n        const pkgContext = await esbuild.context({\n            ...pkgOptions,\n            entryPoints,\n            plugins: [...pkgFirstPlugins, ...pkgPlugins, ...pkgLastPlugins],\n        });\n\n        const qunitContext = await esbuild.context({\n            ...qunitOptions,\n            entryPoints: testEntryPoints,\n            plugins: [\n                cockpitTestHtmlPlugin({ testFiles: tests }),\n            ],\n        });\n\n        try {\n            const results = await Promise.all([pkgContext.rebuild(), qunitContext.rebuild()]);\n            if (args.metafile)\n                fs.writeFileSync(args.metafile, JSON.stringify(results[0].metafile));\n        } catch (e) {\n            if (!args.watch)\n                process.exit(1);\n            // ignore errors in watch mode\n        }\n\n        if (args.watch) {\n            const on_change = async path => {\n                console.log(\"change detected:\", path);\n                await Promise.all([pkgContext.cancel(), qunitContext.cancel()]);\n                try {\n                    await Promise.all([pkgContext.rebuild(), qunitContext.rebuild()]);\n                } catch (e) {} // ignore in watch mode\n            };\n\n            watch_dirs('pkg', on_change);\n            // wait forever until Control-C\n            await new Promise(() => {});\n        }\n\n        pkgContext.dispose();\n        qunitContext.dispose();\n    }\n}\n\nbuild();\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 12.5419921875,
          "content": "# This file is part of Cockpit.\n#\n# Copyright (C) 2013 Red Hat, Inc.\n#\n# Cockpit is free software; you can redistribute it and/or modify it\n# under the terms of the GNU Lesser General Public License as published by\n# the Free Software Foundation; either version 2.1 of the License, or\n# (at your option) any later version.\n#\n# Cockpit is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with Cockpit; If not, see <https://www.gnu.org/licenses/>.\n\nm4_include([version.m4])\nAC_INIT([Cockpit],\n        [VERSION_NUMBER],\n        [devel@lists.cockpit-project.org],\n        [cockpit],\n        [https://cockpit-project.org/])\n\nAC_CONFIG_SRCDIR([src])\nAC_CONFIG_HEADERS([config.h])\nAC_CONFIG_AUX_DIR([tools])\n\nAM_INIT_AUTOMAKE([1.11 foreign dist-xz no-dist-gzip subdir-objects])\n# we want tar-ustar to avoid introducing extra metadata (ctime, atime) which\n# only adds useless non-determinism to the result.  we also want to sort.\nam__tar='tar --format=ustar --sort=name --owner=root:0 --group=root:0 -chf - \"$$tardir\"'\n\nAC_USE_SYSTEM_EXTENSIONS\nAC_SYS_LARGEFILE\nAC_PROG_RANLIB\n\n# This is required to find the correct `ar` for cross-compiling\nAC_CHECK_TOOL(AR, ar)\n\nAC_CHECK_FUNCS(\n    closefrom\n    pidfd_getpid\n)\n\nAM_SILENT_RULES([yes])\n\nAC_MSG_CHECKING([whether to install to prefix only])\nAC_ARG_ENABLE([prefix-only],\n              [AS_HELP_STRING([--enable-prefix-only], [Whether to install to prefix only])],\n              [], [enable_prefix_only=no])\nAC_MSG_RESULT($enable_prefix_only)\n\n\n# --enable-selinux-policy=[type]\nAC_MSG_CHECKING([whether to build selinux policy, and which])\nAC_ARG_ENABLE([selinux-policy], [AS_HELP_STRING([--enable-selinux-policy=type], [Whether to build selinux policy, and which])])\nif test \"${enable_selinux_policy:=no}\" = 'yes'; then\n    AC_MSG_ERROR([--enable-selinux-policy requires a type (eg: targeted)])\nfi\nAM_CONDITIONAL(SELINUX_POLICY_ENABLED, test \"$enable_selinux_policy\" != \"no\")\nAC_SUBST(SELINUX_POLICY_TYPE, [${enable_selinux_policy}])\nAC_MSG_RESULT($enable_selinux_policy)\n\nAC_SEARCH_LIBS([argp_parse], [argp])\ncase \"$ac_cv_search_argp_parse\" in\n    no) AC_MSG_FAILURE([failed to find argp_parse]) ;;\n    -l*) argp_LIBS=\"$ac_cv_search_argp_parse\" ;;\n    *) argp_LIBS= ;;\nesac\nAC_SUBST([argp_LIBS])\n\nAC_SEARCH_LIBS([fts_close], [fts])\ncase \"$ac_cv_search_fts_close\" in\n    no) AC_MSG_FAILURE([failed to find fts_close]) ;;\n    -l*) fts_LIBS=\"$ac_cv_search_fts_close\" ;;\n    *) fts_LIBS= ;;\nesac\nAC_SUBST([fts_LIBS])\n\n# pkg-config\nGLIB_API_VERSION=\"GLIB_VERSION_2_56\"\nPKG_CHECK_MODULES(glib, [gio-2.0 >= 2.56 gio-unix-2.0])\nglib_CFLAGS=\"${glib_CFLAGS} -DGLIB_VERSION_MIN_REQUIRED=$GLIB_API_VERSION\"\nglib_CFLAGS=\"${glib_CFLAGS} -DGLIB_VERSION_MAX_ALLOWED=$GLIB_API_VERSION\"\n\nPKG_CHECK_MODULES(libsystemd, [libsystemd >= 235])\nPKG_CHECK_MODULES(json_glib, [json-glib-1.0 >= 1.4])\nPKG_CHECK_MODULES(gnutls, [gnutls >= 3.6.0])\nPKG_CHECK_MODULES(krb5, [krb5-gssapi >= 1.11 krb5 >= 1.11])\n\n# pam\nAC_CHECK_HEADER([security/pam_appl.h], ,\n  [AC_MSG_ERROR([Couldn't find PAM headers. Try installing pam-devel])]\n)\nPAM_LIBS=\"-lpam\"\nCOCKPIT_SESSION_LIBS=\"$COCKPIT_SESSION_LIBS $PAM_LIBS\"\n\n# pam module directory\nAC_ARG_WITH([pamdir],\n            [AS_HELP_STRING([--with-pamdir=DIR],\n                             [directory to install pam modules in])],\n             [], [with_pamdir='${libdir}/security'])\npamdir=$with_pamdir\nAC_SUBST(pamdir)\n\n# crypt\nAC_CHECK_HEADER([crypt.h], ,\n  [AC_MSG_ERROR([Couldn't find crypt headers. Try installing glibc-headers])]\n)\nAC_CHECK_LIB(crypt, crypt_r, [ true ],\n  [AC_MSG_ERROR([Couldn't find crypt library. Try installing glibc-devel])]\n)\nCOCKPIT_WS_LIBS=\"$COCKPIT_WS_LIBS -lcrypt\"\n\n# systemd\nAC_ARG_WITH([systemdunitdir], [AS_HELP_STRING([--with-systemdunitdir=DIR],\n                                              [directory to install systemd unit files in])])\n\nif test ! -z \"$with_systemdunitdir\"; then\n  systemdunitdir=$with_systemdunitdir\nelif test \"$enable_prefix_only\" = \"yes\"; then\n    systemdunitdir='${prefix}/lib/systemd/system'\nelse\n  PKG_CHECK_MODULES(SYSTEMD, [systemd])\n  AC_MSG_CHECKING(for systemd unit dir)\n  systemdunitdir=$($PKG_CONFIG systemd --variable=systemdsystemunitdir)\n  if test \"$systemdunitdir\" = \"\"; then\n    AC_MSG_ERROR([systemd's pkg-config file doesn't contain 'systemdsystemunitdir' variable])\n  fi\n  AC_MSG_RESULT($systemdunitdir)\nfi\nAC_SUBST([systemdunitdir], [$systemdunitdir])\n\n# We need msgcat, msgfmt, and xgettext, but they're all in the same\n# package as xgettext, and we find them by PATH, so just check for the one.\nAC_PATH_PROG([XGETTEXT], [xgettext], [no])\nif test \"$XGETTEXT\" = \"no\"; then\n        AC_MSG_ERROR([Please install gettext tools])\nfi\n\n# ssh-add\nAC_PATH_PROG([SSH_ADD], [ssh-add], [/usr/bin/ssh-add], [$PATH:/usr/local/sbin:/usr/sbin:/sbin])\nAC_DEFINE_UNQUOTED([PATH_SSH_ADD], [\"$SSH_ADD\"], [Location of ssh-add binary])\n\n# ssh-agent\nAC_PATH_PROG([SSH_AGENT], [ssh-agent], [/usr/bin/ssh-agent], [$PATH:/usr/local/bin:/usr/bin:/bin])\nAC_DEFINE_UNQUOTED([PATH_SSH_AGENT], [\"$SSH_AGENT\"], [Location of ssh-agent binary])\n\n# Address sanitizer\nAC_MSG_CHECKING([for asan flags])\nAC_ARG_ENABLE(asan,\n              AS_HELP_STRING([--enable-asan=no/yes],\n                             [Turn the Address Sanitizer on or off])\n             )\n\nif test \"$enable_asan\" = \"yes\"; then\n    CFLAGS=\"$CFLAGS -fsanitize=address -O1 -fno-omit-frame-pointer -g\"\n    asan_status=\"yes\"\nelse\n    asan_status=\"no\"\nfi\nAM_CONDITIONAL(WITH_ASAN, test \"$enable_asan\" = \"yes\")\nAC_MSG_RESULT($asan_status)\n\n# admin users group\nAC_ARG_WITH([admin-group],\n            [AS_HELP_STRING([--with-admin-group=GROUP],\n                            [system group to which admin users belong])],\n            [admin_group=$withval],\n            [\n              AC_MSG_CHECKING([for system group to which admin users belong])\n              CANDIDATE_GROUPS=\"wheel sudo root\"\n              admin_group=\"$(getent group ${CANDIDATE_GROUPS} | head -n1 | cut -f1 -d:)\"\n              if test -n \"$admin_group\"; then\n                AC_MSG_RESULT([$admin_group])\n              else\n                AC_MSG_RESULT([unable to detect])\n                AC_MSG_ERROR([none of '${CANDIDATE_GROUPS}' exist: please specify a group with --with-admin-group=])\n              fi\n            ])\nAC_SUBST(admin_group)\n\n# Default PATH for cockpit-session\nAC_ARG_WITH([default-session-path],\n            [AS_HELP_STRING([--with-default-session-path=PATH],\n                            [The value for the PATH environment variable in a session started by cockpit-session])],\n            [default_session_path=$withval],\n            [\n              AC_MSG_CHECKING([for cockpit-session PATH value])\n              if test \"$(readlink /sbin)\" == \"usr/bin\"; then\n                 # This is Arch where \"sbin\" is symlinked to \"bin\" and\n                 # \"/bin\" is symlinked to \"/usr/bin\".  We use the\n                 # normal Arch PATH which omits \"sbin\" and \"/bin\" for\n                 # those reasons.  Otherwise \"pkexec\" will find\n                 # cockpit-bridge in \"/usr/sbin\" and our rule wont\n                 # match.\n                 default_session_path=/usr/local/sbin:/usr/local/bin:/usr/bin\n              else\n                 default_session_path=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n              fi\n              AC_MSG_RESULT([$default_session_path])\n            ])\nAC_DEFINE_UNQUOTED([DEFAULT_SESSION_PATH], [\"$default_session_path\"], [Default value of PATH for cockpit-session])\n\n# Documentation\n\nAC_MSG_CHECKING([whether to build documentation])\nAC_ARG_ENABLE(doc,\n              AS_HELP_STRING([--disable-doc],\n                             [Disable building documentation])\n             )\n\nif test \"$enable_doc\" = \"no\"; then\n        AC_MSG_RESULT($enable_doc)\n\nelse\n        if test \"$enable_doc\" = \"\"; then\n                disable_msg=\"(perhaps --disable-doc)\"\n        fi\n\n        enable_doc=\"yes\"\n        AC_MSG_RESULT($enable_doc)\n\n        AC_PATH_PROG([XSLTPROC], [xsltproc], [no])\n        if test \"$XSLTPROC\" = \"no\"; then\n                AC_MSG_ERROR([the xsltproc command was not found $disable_msg])\n        fi\n\n        AC_PATH_PROG([XMLTO], [xmlto], [no])\n        if test \"$XMLTO\" = \"no\"; then\n                AC_MSG_ERROR([the xmlto command was not found $disable_msg])\n        fi\n\n        AC_SUBST(XSLTPROC)\n        AC_SUBST(XMLTO)\nfi\n\nAM_CONDITIONAL([ENABLE_DOC], [test \"$enable_doc\" = \"yes\"])\n\n# Default for AllowMultiHost\n\nAC_MSG_CHECKING([for AllowMultiHost default])\nAC_ARG_ENABLE(multihost,\n              AS_HELP_STRING([--enable-multihost],\n                             [Set AllowMultiHost to true by default]),\n              [], [enable_multihost=no])\nAC_MSG_RESULT($enable_multihost)\nif test \"$enable_multihost\" = \"no\"; then\n   multihost_def=0\nelse\n   multihost_def=1\nfi\nAC_DEFINE_UNQUOTED(ALLOW_MULTIHOST_DEFAULT, [$multihost_def], [default for AllowMultiHost configuration setting])\n\n# cockpit-client\nAC_MSG_CHECKING([whether to install cockpit-client])\nAC_ARG_ENABLE([cockpit-client],\n              [AS_HELP_STRING([--enable-cockpit-client], [Whether to install cockpit-client])],\n              [], [enable_cockpit_client=no])\nAC_MSG_RESULT($enable_cockpit_client)\nAM_CONDITIONAL([ENABLE_COCKPIT_CLIENT], [test \"$enable_cockpit_client\" = \"yes\"])\n\n# Debug\n\nAC_MSG_CHECKING([for debug mode])\nAC_ARG_ENABLE(debug,\n              AS_HELP_STRING([--enable-debug=no/default/yes],\n                             [Turn on or off debugging])\n             )\n\nif test \"$enable_debug\" != \"no\"; then\n  AC_DEFINE_UNQUOTED(WITH_DEBUG, 1, [Print debug output])\n  AC_DEFINE_UNQUOTED(_DEBUG, 1, [In debug mode])\n  CFLAGS=\"$CFLAGS -g\"\nfi\ndebugdir='${prefix}/src/debug'\nif test \"$enable_debug\" = \"yes\"; then\n  debug_status=\"yes\"\n  debugdir=\n  CFLAGS=\"$CFLAGS -O0\"\n  NODE_ENV=\"development\"\nelif test \"$enable_debug\" = \"no\"; then\n  debug_status=\"no\"\n  CFLAGS=\"$CFLAGS -O2\"\n  NODE_ENV=\"production\"\nelse\n  debug_status=\"default\"\n  NODE_ENV=\"${NODE_ENV:-production}\"\nfi\nAM_CONDITIONAL(WITH_DEBUG, test \"$enable_debug\" = \"yes\")\nAC_MSG_RESULT($debug_status)\nAC_SUBST(NODE_ENV)\nAC_SUBST(debugdir)\n\n# Coverage\n\nAC_MSG_CHECKING([whether to build with coverage])\nAC_ARG_ENABLE([coverage],\n              [AS_HELP_STRING([--enable-coverage], [Whether to enable coverage testing])],\n              [],\n              [enable_coverage=no])\n\nif test \"$enable_coverage\" = \"yes\"; then\n  if test \"$GCC\" != \"yes\"; then\n    AC_MSG_ERROR(Coverage testing requires GCC)\n  fi\n\n  CFLAGS=\"$CFLAGS -O0 -g --coverage\"\n  LDFLAGS=\"$LDFLAGS --coverage\"\nfi\n\nAM_CONDITIONAL([WITH_COVERAGE], [test \"$enable_coverage\" = \"yes\"])\nAC_MSG_RESULT([$enable_coverage])\n\n# Strict\n\nAC_ARG_ENABLE(strict, [\n               AS_HELP_STRING([--enable-strict], [Strict code compilation])\n             ])\n\nAC_MSG_CHECKING([build strict])\nif test \"$enable_strict\" = \"yes\"; then\n  CFLAGS=\"$CFLAGS -Werror\"\nelse\n  enable_strict=\"no\"\nfi\nAC_MSG_RESULT($enable_strict)\n\nAM_PATH_PYTHON([3.6])\n\n# Generate\n#\n\nAC_SUBST(PAM_LIBS)\n\nAC_CONFIG_FILES([\nMakefile\ndoc/guide/version\nsrc/tls/cockpit-certificate-helper\nsrc/ws/cockpit-desktop\n])\nAC_OUTPUT\n\n\ndnl ==========================================================================\necho \"\n               Cockpit $VERSION\n             ================\n\n        prefix:                     ${prefix}\n        exec_prefix:                ${exec_prefix}\n        libdir:                     ${libdir}\n        libexecdir:                 ${libexecdir}\n        bindir:                     ${bindir}\n        sbindir:                    ${sbindir}\n        datarootdir:                ${datarootdir}\n        datadir:                    ${datadir}\n        sysconfdir:                 ${sysconfdir}\n        localstatedir:              ${localstatedir}\n        pamdir:                     ${pamdir}\n        systemd unit dir:           ${systemdunitdir}\n\n        compiler:                   ${CC}\n        cflags:                     ${CFLAGS}\n        cppflags:                   ${CPPFLAGS}\n\n        admin group:                ${admin_group}\n        cockpit-session PATH:       ${default_session_path}\n\n        Building docs:              ${enable_doc}\n        Debug mode:                 ${debug_status}\n        Node environment:           ${NODE_ENV}\n        With coverage:              ${enable_coverage}\n        With address sanitizer:     ${asan_status}\n        SELinux Policy:             ${enable_selinux_policy}\n\n        cockpit-client:             ${enable_cockpit_client}\n\n        ssh-add:                    ${SSH_ADD}\n        ssh-agent:                  ${SSH_AGENT}\n\nNow type 'make' to compile cockpit.\"\n"
        },
        {
          "name": "containers",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "files.js",
          "type": "blob",
          "size": 5.734375,
          "content": "import path from 'node:path';\nimport process from 'node:process';\n\nconst info = {\n    entries: [\n        \"base1/cockpit.js\",\n        \"apps/apps.jsx\",\n        \"kdump/kdump.js\",\n        // do *not* call this metrics/metrics -- uBlock origin etc. like to block metrics.{css,js}\n        \"metrics/index.js\",\n\n        \"networkmanager/networkmanager.jsx\",\n        \"networkmanager/firewall.jsx\",\n\n        \"playground/index.js\",\n        \"playground/exception.js\",\n        \"playground/metrics.js\",\n        \"playground/pkgs.js\",\n        \"playground/plot.js\",\n        \"playground/react-patterns.js\",\n        \"playground/service.js\",\n        \"playground/speed.js\",\n        \"playground/test.js\",\n        \"playground/translate.js\",\n        \"playground/preloaded.js\",\n        \"playground/notifications-receiver.js\",\n        \"playground/journal.jsx\",\n        \"playground/remote.tsx\",\n\n        \"selinux/selinux.js\",\n        \"shell/shell.jsx\",\n        \"sosreport/sosreport.jsx\",\n        \"static/login.js\",\n        \"storaged/storaged.jsx\",\n\n        \"systemd/services.jsx\",\n        \"systemd/logs.jsx\",\n        \"systemd/overview.jsx\",\n        \"systemd/terminal.jsx\",\n        \"systemd/hwinfo.jsx\",\n\n        \"packagekit/updates.jsx\",\n        \"users/users.js\",\n    ],\n\n    tests: [\n        \"base1/test-base64.js\",\n        \"base1/test-browser-storage.js\",\n        \"base1/test-cache.js\",\n        \"base1/test-chan.js\",\n        \"base1/test-channel.ts\",\n        \"base1/test-dbus-address.js\",\n        \"base1/test-dbus-framed.js\",\n        \"base1/test-dbus.js\",\n        \"base1/test-echo.js\",\n        \"base1/test-events.js\",\n        \"base1/test-external.js\",\n        \"base1/test-file.js\",\n        \"base1/test-format.ts\",\n        \"base1/test-framed-cache.js\",\n        \"base1/test-framed.js\",\n        \"base1/test-fsinfo.ts\",\n        \"base1/test-http.js\",\n        \"base1/test-journal-renderer.js\",\n        \"base1/test-locale.js\",\n        \"base1/test-location.js\",\n        \"base1/test-metrics.js\",\n        \"base1/test-path.ts\",\n        \"base1/test-permissions.js\",\n        \"base1/test-promise.ts\",\n        \"base1/test-protocol.js\",\n        \"base1/test-series.js\",\n        \"base1/test-spawn-proc.js\",\n        \"base1/test-spawn.js\",\n        \"base1/test-stream.js\",\n        \"base1/test-timeformat.ts\",\n        \"base1/test-types.ts\",\n        \"base1/test-user.js\",\n        \"base1/test-websocket.js\",\n\n        \"kdump/test-config-client.js\",\n\n        \"networkmanager/test-utils.js\",\n\n        \"shell/machines/test-machines.js\",\n\n        \"storaged/test-util.js\",\n    ],\n\n    files: [\n        \"apps/index.html\",\n        \"apps/default.png\",\n\n        \"kdump/index.html\",\n\n        \"metrics/index.html\",\n\n        \"networkmanager/index.html\",\n        \"networkmanager/firewall.html\",\n\n        \"packagekit/index.html\",\n\n        \"playground/index.html\",\n        \"playground/exception.html\",\n        \"playground/hammer.gif\",\n        \"playground/metrics.html\",\n        \"playground/pkgs.html\",\n        \"playground/plot.html\",\n        \"playground/react-patterns.html\",\n        \"playground/service.html\",\n        \"playground/speed.html\",\n        \"playground/test.html\",\n        \"playground/translate.html\",\n        \"playground/preloaded.html\",\n        \"playground/notifications-receiver.html\",\n        \"playground/journal.html\",\n        \"playground/remote.html\",\n\n        \"selinux/index.html\",\n\n        \"shell/images/server-error.png\",\n        \"shell/images/server-large.png\",\n        \"shell/images/server-small.png\",\n        \"shell/images/cockpit-icon.svg\",\n        \"shell/images/bg-plain.jpg\",\n        \"shell/index.html\",\n        \"shell/shell.html\",\n\n        \"sosreport/index.html\",\n        \"sosreport/sosreport.png\",\n\n        \"static/login.html\",\n\n        \"storaged/index.html\",\n        \"storaged/images/storage-array.png\",\n        \"storaged/images/storage-disk.png\",\n\n        \"systemd/index.html\",\n        \"systemd/logs.html\",\n        \"systemd/services.html\",\n        \"systemd/terminal.html\",\n        \"systemd/hwinfo.html\",\n\n        \"users/index.html\",\n    ]\n};\n\nconst srcdir = process.env.SRCDIR || '.';\nconst nodedir = path.relative(process.cwd(), path.resolve(srcdir, \"node_modules\"));\n\nexport const all_subdirs = Array.from(new Set(info.entries.map(key => key.split('/')[0])));\n\nconst redhat_fonts = [\n    \"Text-Bold\", \"Text-BoldItalic\", \"Text-Italic\", \"Text-Medium\", \"Text-MediumItalic\", \"Text-Regular\",\n    \"Display-Black\", \"Display-BlackItalic\", \"Display-Bold\", \"Display-BoldItalic\",\n    \"Display-Italic\", \"Display-Medium\", \"Display-MediumItalic\", \"Display-Regular\",\n    \"Mono-Bold\", \"Mono-BoldItalic\", \"Mono-Italic\", \"Mono-Medium\", \"Mono-MediumItalic\", \"Mono-Regular\",\n].map(name => {\n    const subdir = 'RedHat' + name.split('-')[0];\n    const fontsdir = '@patternfly/patternfly/assets/fonts';\n\n    return {\n        from: path.resolve(nodedir, fontsdir, subdir, 'RedHat' + name + '.woff2'),\n        to: 'static/fonts/'\n    };\n});\n\nconst pkgfile = suffix => `${srcdir}/pkg/${suffix}`;\nexport const getFiles = subdir => {\n    /* Qualify all the paths in entries */\n    const entryPoints = [];\n    info.entries.forEach(key => {\n        if (subdir && key.indexOf(subdir) !== 0)\n            return;\n\n        entryPoints.push(pkgfile(key));\n    });\n\n    /* Qualify all the paths in files listed */\n    const files = [];\n    info.files.forEach(value => {\n        if (!subdir || value.indexOf(subdir) === 0)\n            files.push({ from: pkgfile(value), to: path.dirname(value) });\n    });\n    if (subdir) {\n        const manifest = subdir + \"/manifest.json\";\n        files.push({ from: pkgfile(manifest), to: subdir });\n    } else {\n        all_subdirs.forEach(subdir => {\n            const manifest = subdir + \"/manifest.json\";\n            files.push({ from: pkgfile(manifest), to: subdir });\n        });\n    }\n\n    return ({ entryPoints, assetFiles: files, redhat_fonts });\n};\n\nexport const getTestFiles = () => info.tests;\n"
        },
        {
          "name": "node_modules",
          "type": "commit",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.255859375,
          "content": "{\n  \"name\": \"CockpitDevelopmentDependencies\",\n  \"description\": \"Cockpit isn't a Node package, these are devel time deps, not needed to build tarball either\",\n  \"type\": \"module\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@patternfly/patternfly\": \"5.4.2\",\n    \"@patternfly/react-core\": \"5.4.12\",\n    \"@patternfly/react-icons\": \"5.4.2\",\n    \"@patternfly/react-styles\": \"5.4.1\",\n    \"@patternfly/react-table\": \"5.4.13\",\n    \"@patternfly/react-tokens\": \"5.4.1\",\n    \"dequal\": \"2.0.3\",\n    \"js-sha1\": \"0.7.0\",\n    \"js-sha256\": \"0.11.0\",\n    \"json-stable-stringify-without-jsonify\": \"1.0.1\",\n    \"prop-types\": \"15.8.1\",\n    \"react\": \"18.3.1\",\n    \"react-dom\": \"18.3.1\",\n    \"remarkable\": \"2.0.1\",\n    \"throttle-debounce\": \"5.0.2\",\n    \"uuid\": \"11.0.3\",\n    \"@xterm/xterm\": \"5.5.0\",\n    \"@xterm/addon-canvas\": \"0.7.0\"\n  },\n  \"devDependencies\": {\n    \"@types/qunit\": \"^2.19.10\",\n    \"@types/react\": \"18.3.12\",\n    \"@types/react-dom\": \"18.3.1\",\n    \"@typescript-eslint/eslint-plugin\": \"8.19.0\",\n    \"argparse\": \"2.0.1\",\n    \"esbuild\": \"0.24.2\",\n    \"esbuild-plugin-copy\": \"2.1.1\",\n    \"esbuild-plugin-replace\": \"1.4.0\",\n    \"esbuild-sass-plugin\": \"3.3.1\",\n    \"esbuild-wasm\": \"0.24.2\",\n    \"eslint\": \"8.57.1\",\n    \"eslint-config-standard\": \"17.1.0\",\n    \"eslint-config-standard-jsx\": \"11.0.0\",\n    \"eslint-config-standard-react\": \"13.0.0\",\n    \"eslint-plugin-import\": \"2.31.0\",\n    \"eslint-plugin-jsx-a11y\": \"6.10.2\",\n    \"eslint-plugin-node\": \"11.1.0\",\n    \"eslint-plugin-promise\": \"6.6.0\",\n    \"eslint-plugin-react\": \"7.37.3\",\n    \"eslint-plugin-react-hooks\": \"4.6.2\",\n    \"gettext-parser\": \"8.0.0\",\n    \"glob\": \"11.0.0\",\n    \"htmlparser\": \"1.7.7\",\n    \"jed\": \"1.1.1\",\n    \"qunit\": \"2.23.1\",\n    \"qunit-tap\": \"1.5.1\",\n    \"sass\": \"1.79.6\",\n    \"sizzle\": \"2.3.10\",\n    \"stylelint\": \"16.12.0\",\n    \"stylelint-config-recommended-scss\": \"14.0.0\",\n    \"stylelint-config-standard\": \"36.0.1\",\n    \"stylelint-config-standard-scss\": \"14.0.0\",\n    \"stylelint-formatter-pretty\": \"4.0.1\",\n    \"stylelint-use-logical-spec\": \"5.0.1\",\n    \"typescript\": \"^5.3.3\"\n  },\n  \"scripts\": {\n    \"eslint\": \"eslint --ext .js --ext .jsx pkg/ test/common/\",\n    \"eslint:fix\": \"eslint --fix --ext .js --ext .jsx pkg/ test/common/\",\n    \"stylelint\": \"stylelint pkg/*/*{.css,scss}\",\n    \"stylelint:fix\": \"stylelint --fix pkg/*/*{.css,scss}\"\n  }\n}\n"
        },
        {
          "name": "packit.yaml",
          "type": "blob",
          "size": 2.9736328125,
          "content": "upstream_project_url: https://github.com/cockpit-project/cockpit\nspecfile_path: cockpit.spec\nactions:\n  post-upstream-clone:\n    # build patched spec\n    - tools/node-modules make_package_lock_json\n    - cp tools/cockpit.spec .\n    # packit will compute and set the version by itself\n    - tools/fix-spec ./cockpit.spec 0\n\n  create-archive:\n    - tools/make-dist\n\nsrpm_build_deps:\n  - automake\n  - gcc\n  - gettext\n  - glib2-devel\n  - make\n  - nodejs\n  - npm\n  - systemd-devel\n# use the nicely formatted release NEWS from our upstream release, instead of git shortlog\ncopy_upstream_release_description: true\njobs:\n  - job: tests\n    identifier: self\n    trigger: pull_request\n    targets:\n      - fedora-40\n      - fedora-41\n      - fedora-latest-stable-aarch64\n      - fedora-rawhide\n      - centos-stream-9-x86_64\n      - centos-stream-9-aarch64\n      - centos-stream-10\n\n  # current Fedora runs reverse dependency testing against https://copr.fedorainfracloud.org/coprs/g/cockpit/main-builds/\n  - job: tests\n    identifier: revdeps\n    trigger: pull_request\n    targets:\n      - fedora-latest-stable\n    tf_extra_params:\n      environments:\n        - artifacts:\n          - type: repository-file\n            id: https://copr.fedorainfracloud.org/coprs/g/cockpit/main-builds/repo/fedora-$releasever/group_cockpit-main-builds-fedora-$releasever.repo\n          tmt:\n            context:\n              revdeps: \"yes\"\n\n  # run build/unit tests on some interesting architectures\n  - job: copr_build\n    trigger: pull_request\n    targets:\n      # big-endian\n      - fedora-development-s390x\n\n  # for cross-project testing\n  - job: copr_build\n    trigger: commit\n    branch: \"^main$\"\n    owner: \"@cockpit\"\n    project: \"main-builds\"\n    preserve_project: True\n\n  - job: copr_build\n    trigger: release\n    owner: \"@cockpit\"\n    project: \"cockpit-preview\"\n    preserve_project: True\n    actions:\n      # same as the global one, but specifying actions: does not inherit\n      post-upstream-clone:\n        # build patched spec\n        - tools/node-modules make_package_lock_json\n        - cp tools/cockpit.spec .\n        # packit will compute and set the version by itself\n        - tools/fix-spec ./cockpit.spec 0\n      # HACK: tarball for releases (copr_build, koji, etc.), copying spec's Source0; this\n      # really should be the default, see https://github.com/packit/packit-service/issues/1505\n      create-archive:\n        - sh -exc \"curl -L -O https://github.com/cockpit-project/cockpit/releases/download/${PACKIT_PROJECT_VERSION}/${PACKIT_PROJECT_NAME_VERSION}.tar.xz\"\n        - sh -exc \"ls ${PACKIT_PROJECT_NAME_VERSION}.tar.xz\"\n\n  - job: propose_downstream\n    trigger: release\n    dist_git_branches:\n      - fedora-development\n      - fedora-40\n      - fedora-41\n\n  - job: koji_build\n    trigger: commit\n    dist_git_branches:\n      - fedora-development\n      - fedora-40\n      - fedora-41\n\n  - job: bodhi_update\n    trigger: commit\n    dist_git_branches:\n      # rawhide updates are created automatically\n      - fedora-40\n      - fedora-41\n"
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "plans",
          "type": "tree",
          "content": null
        },
        {
          "name": "po",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 5.8408203125,
          "content": "[build-system]\nrequires = []\nbackend-path = ['src']\nbuild-backend = 'build_backend'\n\n[tool.mypy]\nfollow_imports = 'silent'  # https://github.com/python-lsp/pylsp-mypy/issues/81\nscripts_are_modules = true  # allow checking all scripts in one invocation\nexplicit_package_bases = true\nmypy_path = 'src:test/common:bots'\nexclude = [\n    'tmp/',\n    'tools/vulture-suppressions/',\n    'vendor/',\n]\n\n[[tool.mypy.overrides]]\nignore_missing_imports = true\nmodule = [\n    # run without submodules checked out\n    \"cockpit._vendor.*\",\n\n    # run without bots checked out\n    \"lib.*\",\n    \"machine.*\",\n    \"task.*\",\n    \"testvm\",\n\n    # run with bots checked out but its dependencies missing\n    \"libvirt\",\n    \"libvirt_qemu\",\n    \"pika\",\n\n    # run without pcp module types\n    \"pcp\",\n    \"cpmapi\",\n\n    # run without gobject-introspection (used from cockpit-client for Gtk)\n    \"gi.*\",\n\n    # these are used from various scripts meant to run on the host\n    \"dbus\",\n    \"tracer.query\",\n    \"vdo.*\",\n]\n\n[[tool.mypy.overrides]]\n# https://github.com/python/mypy/issues/11401 prevents us from enabling strict\n# mode for a given set of files, so instead, we enable the corresponding set of\n# individual checks the files which are strictly typed.\ncheck_untyped_defs = true\ndisallow_any_generics = true\ndisallow_incomplete_defs = true\ndisallow_subclassing_any = true\ndisallow_untyped_calls = true\ndisallow_untyped_decorators = true\ndisallow_untyped_defs = true\nno_implicit_reexport = true\nstrict_concatenate = true\nstrict_equality = true\nwarn_unused_ignores = true\nmodule = [\n    # src\n    'cockpit',\n    'cockpit._version',\n    'cockpit.jsonutil',\n    'cockpit.protocol',\n    'cockpit.transports',\n\n    # test/common\n    'testlib',\n    'js_coverage',\n    'webdriver_bidi',\n]\n\n[tool.pylint]\nmax-line-length = 118\ndisable = [\n  \"C0114\",  # Missing module docstring\n  \"C0115\",  # Missing class docstring\n  \"C0116\",  # Missing function or method docstring\n  \"R0902\",  # Too many instance attributes\n  \"R0903\",  # Too few public methods\n  \"R0913\",  # Too many arguments\n  \"R1705\",  # Unnecessary \"else\" after \"return\"\n  \"W0120\",  # Else clause on loop without a break statement\n  \"W1113\",  # Keyword argument before variable positional arguments  (PEP-570 is Python 3.8)\n]\n\n[tool.ruff]\nexclude = [\n    \".git/\",\n    \"modules/\",\n    \"node_modules/\",\n]\nline-length = 118\npreview = true\nsrc = []\n\n[tool.ruff.lint]\nselect = [\n    \"A\",       # flake8-builtins\n    \"B\",       # flake8-bugbear\n    \"C4\",      # flake8-comprehensions\n    \"D300\",    # pydocstyle: Forbid ''' in docstrings\n    \"DTZ\",     # flake8-datetimez\n    \"E\",       # pycodestyle\n    \"EXE\",     # flake8-executable\n    \"F\",       # pyflakes\n    \"FBT\",     # flake8-boolean-trap\n    \"G\",       # flake8-logging-format\n    \"I\",       # isort\n    \"ICN\",     # flake8-import-conventions\n    \"ISC\",     # flake8-implicit-str-concat\n    \"PIE\",     # flake8-pie\n    \"PLE\",     # pylint errors\n    \"PGH\",     # pygrep-hooks\n    \"PT\",      # flake8-pytest-style\n    \"RSE\",     # flake8-raise\n    \"RUF\",     # ruff rules\n    \"T10\",     # flake8-debugger\n    \"TCH\",     # flake8-type-checking\n    \"UP032\",   # f-string\n    \"W\",       # warnings (mostly whitespace)\n    \"YTT\",     # flake8-2020\n]\nignore = [\n    \"A003\",  # Class attribute is shadowing a python builtin\n    \"B011\",  # Do not `assert False` (`python -O` removes these calls), raise `AssertionError()`\n    \"E731\",  # Do not assign a `lambda` expression, use a `def`\n    \"PT011\", # `pytest.raises(OSError)` is too broad\n    \"RUF012\", # Mutable class attributes should be annotated with `typing.ClassVar`\n    \"TCH001\", # Move application import into a type-checking block\n    \"TCH002\", # Move third-party import `..packages.Packages` into a type-checking block\n]\n\n[tool.ruff.lint.flake8-pytest-style]\nfixture-parentheses = false\nmark-parentheses = false\n\n[tool.ruff.lint.isort]\nknown-first-party = [\"cockpit\"]\n\n[tool.pytest.ini_options]\naddopts = ['--strict-markers']  # cf. https://github.com/cockpit-project/cockpit/pull/18584#issuecomment-1490243994\npythonpath = [\"src\", \"test/common\", \"bots\"]\ntestpaths = [\"test/pytest\"]\nlog_cli = true\nrequired_plugins = [\"pytest-asyncio\"]\n\n[tool.pyright]\nstrict = [\"**\"]\nextraPaths = [\"src\", \"test/common\", \"bots\"]\n\n[tool.vulture]\npaths = [\n   \"src\",\n   \"test/pytest\",\n   \"tools/vulture_suppressions\",\n]\nignore_names = [\n   \"do_*\",\n   \"pytest_*\",\n   \"test[A-Z0-9]*\",\n   \"pytestmark\",\n]\nignore_decorators = [\n   \"@*.getter\",\n   \"@*.register_function\",\n   \"@bus.Interface.Method\",\n   \"@pytest.fixture\",\n   \"@pytest.hookimpl\",\n]\n\n[tool.coverage.paths]\nsource = [\"src\", \"*/site-packages\"]\n\n[tool.coverage.run]\nconcurrency = [\"multiprocessing\"]\nsource_pkgs = [\"cockpit\"]\nbranch = true\n\n[tool.coverage.report]\nshow_missing = true\nskip_covered = true\nexclude_lines = [\n  \"pragma: no cover\",  # default\n  \"raise NotImplementedError\",\n]\n\n[tool.tox]\nlegacy_tox_ini = \"\"\"\n[tox]\nenvlist = lint,pytest\nisolated_build = True\nlabels =\n  venv = py3{6,8,9,10,11,12,13}-pytest\n\n# The default test environments use system packages and never PyPI.\n[testenv:{lint,pytest}]\nsitepackages = True\ninstall_command = python3 -m pip install --no-index --no-build-isolation {opts} {packages}\nwheel_build_env = pkg\n\n# All other environments (names like py311-lint, py36-pytest, etc) are isolated\n# from the system and get their packages from PyPI, according to the specific\n# test environment being requested.  We build the wheel in a common environment.\n# These tests will not run the PCP tests as there is no wheel available.\n# https://github.com/performancecopilot/pcp/issues/2076\n[testenv]\npackage = wheel\nwheel_build_env = venv-pkg\nskip_install = lint: True\ndeps =\n  lint: mypy\n  lint: ruff\n  lint: vulture\n  pytest\n  pytest-asyncio\n  pytest: pytest-cov\n  pytest: pytest-timeout\n  pytest: pytest-xdist\nallowlist_externals = test/common/static-code\nsetenv =\n  NO_QUNIT=1\ncommands =\n  pytest: python3 -m pytest -opythonpath= {posargs}\n  lint: test/common/static-code --tap\n\"\"\"\n"
        },
        {
          "name": "selinux",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.947265625,
          "content": "/*\n * Config for `tsc` and `tsserver`, currently only used for typechecking.\n\n * Our main build is via `esbuild` which can handle `.ts`, but doesn't do any\n * checking on its own.  To typecheck, run `tsc`.\n *\n * Extended JSON — comments and trailing commas are good here.\n */\n\n{\n    \"compilerOptions\": {\n        \"allowJs\": true,\n        \"checkJs\": true,\n        \"baseUrl\": \"./pkg/lib\",\n        \"esModuleInterop\": true,\n        \"exactOptionalPropertyTypes\": true,\n        \"incremental\": true,\n        \"jsx\": \"react\",\n        \"lib\": [\n            \"dom\",\n            \"es2021\"\n        ],\n        \"moduleResolution\": \"node\",\n        \"noEmit\": true,  // we only use `tsc` for type checking\n        \"strict\": true,\n        \"target\": \"es2021\",\n    },\n    \"include\": [\n        \"pkg/**/*\"\n    ],\n    \"exclude\": [\n        // these are part of the build system, not the app\n        \"pkg/lib/esbuild-*.js\",\n        \"pkg/lib/cockpit-*-plugin.js\",\n        \"pkg/lib/*2po.js\"\n    ],\n}\n"
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}