{
  "metadata": {
    "timestamp": 1736563226657,
    "page": 186,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SimulatedGREG/electron-vue",
      "stars": 15485,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.09765625,
          "content": ".idea\n_book\nthumbs.db\n.DS_Store\nnode_modules\ntests/builds/*\nnpm-debug.log\nnpm-debug.*.log\n!.gitkeep\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Greg Holguin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.3408203125,
          "content": "<div align=\"center\">\n<br>\n<img width=\"500\" src=\"/docs/images/logo.png\" alt=\"electron-vue\">\n<br>\n<br>\n</div>\n\n<p align=\"center\" color=\"#6a737d\">\nThe boilerplate for making electron applications built with vue (pretty much what it sounds like).\n</p>\n\n<div align=\"center\">\n\n[![forthebadge](http://forthebadge.com/images/badges/built-with-love.svg)](http://forthebadge.com) [![forthebadge](http://forthebadge.com/images/badges/uses-js.svg)](http://forthebadge.com) [![forthebadge](http://forthebadge.com/images/badges/makes-people-smile.svg)](http://forthebadge.com)\n</div>\n\n<div align=\"center\">\n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\n[![Build Status](https://semaphoreci.com/api/v1/simulatedgreg/electron-vue/branches/master/badge.svg)](https://semaphoreci.com/simulatedgreg/electron-vue)\n</div>\n\n## Overview\n\nThe aim of this project is to remove the need of manually setting up electron apps using vue. electron-vue takes advantage of `vue-cli` for scaffolding, `webpack` with `vue-loader`, `electron-packager` or `electron-builder`, and some of the most used plugins like `vue-router`, `vuex`, and so much more.\n\n#### Check out the detailed documentation [here](https://simulatedgreg.gitbooks.io/electron-vue/content/index.html).\n\nThings you'll find in this boilerplate...\n\n* Basic project structure with a **single** `package.json` setup\n* Detailed [documentation](https://simulatedgreg.gitbooks.io/electron-vue/content/)\n* Project scaffolding using [vue-cli](https://github.com/vuejs/vue-cli)\n* Ready to use Vue plugins \\([axios](https://github.com/mzabriskie/axios), [vue-electron](https://github.com/SimulatedGREG/vue-electron), [vue-router](https://github.com/vuejs/vue-router), [vuex](https://github.com/vuejs/vuex)\\)\\*\n* Installed [vue-devtools](https://github.com/vuejs/vue-devtools) and [devtron](https://github.com/electron/devtron) tools for development\n* Ability to easily package your electron app using [electron-packager](https://github.com/electron-userland/electron-packager) or [electron-builder](https://github.com/electron-userland/electron-builder)\\*\n* `appveyor.yml` and `.travis.yml` configurations for automated deployments with [electron-builder](https://github.com/electron-userland/electron-builder)\\*\n* Ability to produce web output for browsers\n* Handy [NPM scripts](https://simulatedgreg.gitbooks.io/electron-vue/content/en/npm_scripts.html)\n* Use of [webpack](https://github.com/webpack/webpack) and [vue-loader](https://github.com/vuejs/vue-loader) with Hot Module Replacement\n* Process restarting when working in main process\n* HTML/CSS/JS pre-processor support with [vue-loader](https://github.com/vuejs/vue-loader/)\n* ES6 with [`stage-0`](https://babeljs.io/docs/plugins/preset-stage-0/) by default\n* Use of [`babili`](https://github.com/babel/babili) to remove the need of transpiling completely down to ES5\n* ESLint \\(with support for [`standard`](https://github.com/feross/standard) and [`airbnb-base`](https://github.com/airbnb/javascript)\\)\\*\n* Unit Testing \\(with Karma + Mocha\\)\\*\n* End-to-end Testing \\(with Spectron + Mocha\\)\\*\n\n\\*Customizable during vue-cli scaffolding\n\n### Getting Started\n\nThis boilerplate was built as a template for [vue-cli](https://github.com/vuejs/vue-cli) and includes options to customize your final scaffolded app. The use of `node@^7` or higher required. electron-vue also officially recommends the [`yarn`](https://yarnpkg.org) package manager as it handles dependencies much better and can help reduce final build size with `yarn clean`.\n\n```bash\n# Install vue-cli and scaffold boilerplate\nnpm install -g vue-cli\nvue init simulatedgreg/electron-vue my-project\n\n# Install dependencies and run your app\ncd my-project\nyarn # or npm install\nyarn run dev # or npm run dev\n```\n\n##### Are you a Windows User?\n\nMake sure to check out [**A Note for Windows Users**](https://simulatedgreg.gitbooks.io/electron-vue/content/en/getting_started.html#a-note-for-windows-users) to make sure you have all the necessary build tools needed for electron and other dependencies.\n\n##### Wanting to use Vue 1?\n\nJust point to the `1.0` branch. Please note that electron-vue has officially deprecated the usage of `vue@^1`, so project structure, features, and documentation will reflect those changes ([**legacy documentation**](https://github.com/SimulatedGREG/electron-vue/tree/1.0/docs)).\n\n```bash\nvue init simulatedgreg/electron-vue#1.0 my-project\n```\n\n### Next Steps\n\nMake sure to take a look at the [documentation](https://simulatedgreg.gitbooks.io/electron-vue/content/). Here you will find useful information about configuration, project structure, and building your app. There's also a handy [FAQs](https://simulatedgreg.gitbooks.io/electron-vue/content/en/faqs.html) section.\n\n\n## Made with electron-vue\nTake a look at some of the amazing projects built with electron-vue. Want to have your own project listed? Feel free add your project to the bottom of the list below then submit a pull request.\n\n* [**Surfbird**](https://github.com/surfbirdapp/surfbird): A Twitter client built on Electron and Vue\n* [**Lulumi-browser**](https://github.com/qazbnm456/lulumi-browser): Lulumi-browser is a light weight browser coded with Vue.js 2 and Electron\n* [**Space-Snake**](https://github.com/ilyagru/Space-Snake): A Desktop game built with Electron and Vue.js.\n* [**Forrest**](https://github.com/stefanjudis/forrest): An npm scripts desktop client\n* [**miikun**](https://github.com/hiro0218/miikun): A Simple Markdown Editor\n* [**Dakika**](https://github.com/raj347/Dakika): A minute taking application that makes writing minutes a breeze\n* [**Dynamoc**](https://github.com/ieiayaobb/dynamoc): Dynamoc is a GUI client for dynamodb-local, dynalite and AWS dynamodb\n* [**Dockeron**](https://github.com/dockeron/dockeron): A dockeron project, built on Electron + Vue.js for Docker\n* [**Easysubs**](https://github.com/matiastucci/easysubs): Download subtitles in a very fast and simple way\n* [**adminScheduler**](https://github.com/danieltoorani/adminScheduler): An application leveraging electron for cross platform compatibility, Vue.js for lightning fast UI and full-calendar.io to deliver a premium calendar interface.\n* [**Backlog**](https://github.com/czytelny/backlog): Simple app for storing TODOs, ideas or backlog items. You can organize them with boards. Sleek flow. Built with Electron + Vue.js + iView\n* [**Opshell**](https://github.com/ricktbaker/opshell): Ops tool to make life easier working with AWS instances.\n* [**GitHoard**](https://github.com/jojobyte/githoard): Hoard git repositories with ease.\n* [**Data-curator**](https://github.com/ODIQueensland/data-curator): Share usable open data.\n* [**Bookmark**](https://github.com/mrgodhani/bookmark): Desktop app to manage bookmarked links using Atom Electron and Vue.js\n* [**Uber Run**](https://github.com/break-enter/uberrun): Simple automation desktop app to download and organize your tax invoices from Uber.\n* [**Apollo**](https://github.com/helados/Apollo): Convert YouTube videos (and more) to .mp3 files\n* [**Netsix**](https://github.com/pulsardev/netsix): Share videos with your friends in a real peer-to-peer manner using WebRTC.\n* [**code-notes**](https://github.com/lauthieb/code-notes): A simple code snippet manager for developers built with Electron & Vue.js.\n* [**Pomotroid**](https://github.com/Splode/pomotroid): A simple and visually-pleasing Pomodoro timer\n* [**MarkText**](https://github.com/marktext/marktext): Mark Text is a realtime Markdown Editor.\n* [**vue-design**](https://github.com/L-Chris/vue-design): the best website visualization builder with Vue and Electron\n* [**ImapSync Client**](https://github.com/ridaamirini/ImapSyncClient): It's only an Internet Message Access Protocol Synchronization Client\n* [**Hve**](https://github.com/hellohve/hve): A static blog client tool you may like.\n* [**MarkdownFox**](https://github.com/lx4r/markdownfox): A simple Markdown viewer with auto update and PDF export.\n* [**Smart DOCSE**](https://github.com/shirshak55/smart-docse): A generic app which ability to display news, contact etc.\n* [**Cleaver**](https://getcleaver.com/): Cleaver helps you provision servers ready for deploying your web apps with zero downtime - for free!\n* [**XPanel**](https://github.com/krustnic/xpanel): XAMPP control panel alternative built with Electron & Vue.js\n* [**Hexo-Client**](https://github.com/gaoyoubo/hexo-client): A hexo client powered by electron-vue.\n* [**YT.Downloader**](https://github.com/myazarc/ytdownloader): Youtube Video Downloader&Converter and Play Music, built with Electron & Vue.js.\n* [**BMFont-JS**](https://github.com/elisaday/bmfont-js): BMFont-js is a bitmap font generator, built with Electron & Vue.js.\n* [**YouGet**](https://github.com/ahmetzeybek/YouGet): YouGet - YouTube Video/Playlist Downloader/Cutter - MP3 Converter\n* [**Asar UI**](https://github.com/myazarc/AsarUI): UI for Asar Pack, built with Electron & Vue.js.\n* [**Leeze**](https://github.com/dayinji/Leeze): A Receipt Record App, built with Electron & Vue.js.\n* [**IntelTracker**](https://github.com/hectate/inteltracker): An intel item tracker for players/speedrunners of NOLF.\n* [**Metube**](https://github.com/kimyearho/MeTube): A program to manage your simple YouTube music player and enjoy your music\n* [**it-tools**](https://github.com/TsaiKoga/it-tools): A programing helper for developers built with Electron & Vue.js. \n* [**GifsWorld**](https://github.com/dj0nny/GifsWorld): Gifs finder built with Vue and Electron\n"
        },
        {
          "name": "book.json",
          "type": "blob",
          "size": 0.5400390625,
          "content": "{\n  \"root\": \"./docs\",\n  \"plugins\": [\n    \"edit-link\",\n    \"theme-vuejs@git+https://github.com/pearofducks/gitbook-plugin-theme-vuejs.git\",\n    \"github\",\n    \"ga\"\n  ],\n  \"pluginsConfig\": {\n    \"edit-link\": {\n      \"base\": \"https://github.com/SimulatedGREG/electron-vue/tree/master/docs\",\n      \"label\": \"Edit This Page\"\n    },\n    \"github\": {\n      \"url\": \"https://github.com/SimulatedGREG/electron-vue\"\n    },\n    \"ga\": {\n      \"token\": \"UA-64200901-3\"\n    }\n  },\n  \"links\": {\n    \"sharing\": {\n      \"facebook\": false,\n      \"twitter\": true\n    }\n  }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "meta.js",
          "type": "blob",
          "size": 5.515625,
          "content": "'use strict'\n\nconst { join } = require('path')\nconst { readFileSync, writeFileSync } = require('fs')\nconst { get } = require('https')\n\nfunction getCurrentSHA (author) {\n  return new Promise((resolve, reject) => {\n    let isBranch = process.argv[2].indexOf('#') > -1\n\n    get({\n      host: 'api.github.com',\n      path: `/repos/simulatedgreg/electron-vue/commits${isBranch ? '?sha=' + process.argv[2].split('#')[1] : ''}`,\n      headers: {\n        'User-Agent': author\n      }\n    }, res => {\n      res.setEncoding('utf8')\n      let rawData = ''\n\n      res.on('data', chunk => {\n        rawData += chunk\n      })\n      res.on('end', () => {\n        try {\n          let parsed = JSON.parse(rawData)\n          resolve(parsed[0].sha)\n        } catch (e) {\n          reject(e)\n        }\n      })\n    }).on('error', e => {\n      reject(e)\n    })\n  })\n}\n\nfunction appendSHALink (sha, destDirName) {\n  let readmePath = join(destDirName, '/README.md')\n  let md = readFileSync(readmePath, 'utf8')\n  md = md.replace(\n    ' using',\n    `@[${sha.substring(0, 7)}](https://github.com/SimulatedGREG/electron-vue/tree/${sha}) using`\n  )\n  writeFileSync(readmePath, md, 'utf8')\n}\n\nmodule.exports = {\n  prompts: {\n    name: {\n      type: 'string',\n      required: true,\n      message: 'Application Name',\n      default: 'your-app'\n    },\n    appid: {\n        type: 'string',\n        required: true,\n        message: 'Application Id',\n        default: 'com.example.yourapp'\n    },\n    appver: {\n        type: 'string',\n        required: true,\n        message: 'Application Version',\n        default: '0.0.1'\n    },\n    description: {\n      type: 'string',\n      required: false,\n      message: 'Project description',\n      default: 'An electron-vue project'\n    },\n    usesass: {\n        type: 'confirm',\n        message: 'Use Sass / Scss?',\n        required: true\n    },\n    plugins: {\n      type: 'checkbox',\n      message: 'Select which Vue plugins to install',\n      choices: ['axios', 'vue-electron', 'vue-router', 'vuex', 'vuex-electron'],\n      default: ['axios', 'vue-electron', 'vue-router', 'vuex', 'vuex-electron']\n    },\n    eslint: {\n      type: 'confirm',\n      require: true,\n      message: 'Use linting with ESLint?',\n      default: true\n    },\n    eslintConfig: {\n      when: 'eslint',\n      type: 'list',\n      message: 'Which ESLint config would you like to use?',\n      choices: [\n        {\n          name: 'Standard (https://github.com/feross/standard)',\n          value: 'standard',\n          short: 'Standard'\n        },\n        {\n          name: 'Airbnb (https://github.com/airbnb/javascript)',\n          value: 'airbnb',\n          short: 'Airbnb'\n        },\n        {\n          name: 'none (configure it yourself)',\n          value: 'none',\n          short: 'none'\n        }\n      ]\n    },\n    unit: {\n      type: 'confirm',\n      message: 'Set up unit testing with Karma + Mocha?',\n      required: true\n    },\n    e2e: {\n      type: 'confirm',\n      message: 'Set up end-to-end testing with Spectron + Mocha?',\n      require: true\n    },\n    builder: {\n      type: 'list',\n      message: 'What build tool would you like to use?',\n      choices: [\n        {\n          name: 'electron-builder (https://github.com/electron-userland/electron-builder)',\n          value: 'builder',\n          short: 'builder'\n        },\n        {\n          name: 'electron-packager (https://github.com/electron-userland/electron-packager)',\n          value: 'packager',\n          short: 'packager'\n        }\n      ]\n    }\n  },\n  helpers: {\n    isEnabled (list, check, opts) {\n      if (list[check]) return opts.fn(this)\n      else return opts.inverse(this)\n    },\n    deps (plugins) {\n      let output = ''\n      let dependencies = {\n        'axios': '^0.18.0',\n        'vue-electron': '^1.0.6',\n        'vue-router': '^3.0.1',\n        'vuex': '^3.0.1',\n        'vuex-electron': '^1.0.0'\n      }\n\n      if (Object.keys(plugins).length > 0) output += ',\\n'\n\n      Object.keys(plugins).forEach((p, i) => {\n        output += `    \"${p}\": \"${dependencies[p]}\"`\n        if (i !== Object.keys(plugins).length - 1) output += ',\\n'\n      })\n\n      return output\n    },\n    testing (unit, e2e, opts) {\n      if (unit || e2e) {\n        return opts.fn(this)\n      }\n    }\n  },\n  filters: {\n    'src/renderer/routes.js': 'plugins[\\'vue-router\\']',\n    'src/renderer/components/LandingPageView/CurrentPage.vue': 'plugins[\\'vue-router\\']',\n    'src/renderer/router/**/*': 'plugins[\\'vue-router\\']',\n    'src/renderer/store/**/*': 'plugins[\\'vuex\\']',\n    'test/e2e/**/*': 'e2e',\n    'test/unit/**/*': 'unit',\n    '.electron-vue/build.config.js': 'builder === \\'packager\\'',\n    'test/.eslintrc': 'e2e || unit',\n    '.eslintignore': 'eslint',\n    '.eslintrc.js': 'eslint',\n    'appveyor.yml': 'builder === \\'builder\\'',\n    '.travis.yml': 'builder === \\'builder\\''\n  },\n  complete (data) {\n    getCurrentSHA(data.author).then(sha => {\n      let path = !data.inPlace ? data.destDirName : null\n      if (path !== null) appendSHALink(sha, path)\n      console.log([\n        '\\n---',\n        '',\n        'All set. Welcome to your new electron-vue project!',\n        '',\n        'Make sure to check out the documentation for this boilerplate at',\n        '\\x1b[33mhttps://simulatedgreg.gitbooks.io/electron-vue/content/\\x1b[0m.',\n        '',\n        `Next Steps:\\n${!data.inPlace ? '\\n  \\x1b[33m$\\x1b[0m cd ' + data.destDirName : ''}`,\n        '  \\x1b[33m$\\x1b[0m yarn (or `npm install`)',\n        '  \\x1b[33m$\\x1b[0m yarn run dev (or `npm run dev`)'\n      ].join('\\n'))\n    }, () => {\n      console.log('\\x1b[33mwarning\\x1b[0m Failed to append commit SHA on README.md')\n    })\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.697265625,
          "content": "{\n  \"name\": \"electron-vue\",\n  \"version\": \"0.0.0\",\n  \"description\": \"An Electron & Vue.js quick start boilerplate with vue-cli support\",\n  \"main\": \"meta.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/SimulatedGREG/electron-vue.git\"\n  },\n  \"keywords\": [\n    \"electron\",\n    \"vue\",\n    \"boilerplate\",\n    \"hot\",\n    \"reload\",\n    \"router\",\n    \"vuex\",\n    \"resource\"\n  ],\n  \"author\": \"Greg Holguin <simulatedgreg@gmail.com> (https://github.com/SimulatedGREG)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/SimulatedGREG/electron-vue/issues\"\n  },\n  \"homepage\": \"https://github.com/SimulatedGREG/electron-vue#readme\",\n  \"devDependencies\": {\n    \"suppose\": \"^0.6.1\"\n  }\n}\n"
        },
        {
          "name": "template",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}