{
  "metadata": {
    "timestamp": 1736563245168,
    "page": 215,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pinojs/pino",
      "stars": 14604,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.03515625,
          "content": "pino.d.ts\ntest/types/pino.test-d.ts\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.08984375,
          "content": "{\n    \"extends\": [\n        \"standard\"\n    ],\n    \"rules\": {\n        \"no-var\": \"off\"\n    }\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.279296875,
          "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# vuepress v2.x temp and cache directory\n.temp\n.cache\n\n# Docusaurus cache and generated files\n.docusaurus\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\n\n# Vim swap files\n*.swp\n\n# macOS files\n.DS_Store\n\n# editor files\n.vscode\n.idea\n\n# lock files\npackage-lock.json\npnpm-lock.yaml\nyarn.lock\n\n# 0x\n.__browserify_string_empty.js\nprofile-*\n\n# Generated files\ntest/fixtures/ts/*js\n!test/fixtures/eval/node_modules\n!test/fixtures/ts/transpile.cjs\n"
        },
        {
          "name": ".nojekyll",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.001953125,
          "content": "*\n"
        },
        {
          "name": ".taprc.yaml",
          "type": "blob",
          "size": 0.0966796875,
          "content": "coverage: true\ntimeout: 480\ncheck-coverage: false\n\nreporter: terse\n\nfiles:\n  - 'test/**/*.test.js'\n"
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.009765625,
          "content": "getpino.io"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.4765625,
          "content": "# Pino is an OPEN Open Source Project\n\n## What?\n\nIndividuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\n## Rules\n\nBefore you start coding, please read [Contributing to projects with git](https://jrfom.com/posts/2017/03/08/a-primer-on-contributing-to-projects-with-git/). \n\nNotice that as long as you don't have commit-access to the project, you have to fork the project and open PRs from the feature branches of the forked project.\n\nThere are a few basic ground-rules for contributors:\n\n1. **No `--force` pushes** on `master` or modifying the Git history in any way after a PR has been merged.\n1. **Non-master branches** ought to be used for ongoing work.\n1. **Non-trivial changes** ought to be subject to an **internal pull-request** to solicit feedback from other contributors.\n1. All pull-requests for new features **must** target the `master` branch. PRs to fix bugs in LTS releases are also allowed.\n1. Contributors should attempt to adhere to the prevailing code-style.\n1. 100% code coverage\n\n## Releases\n\nDeclaring formal releases remains the prerogative of the project maintainer.\n\n## Changes to this arrangement\n\nThis is an experiment and feedback is welcome! This document may also be subject to pull-requests or changes by contributors where you believe you have something valuable to add or change.\n\n-----------------------------------------\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1787109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016-2024 Matteo Collina, David Mark Clements and the Pino contributors listed at https://github.com/pinojs/pino#the-team and in the README file.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.2763671875,
          "content": "![banner](pino-banner.png)\n\n# pino\n[![npm version](https://img.shields.io/npm/v/pino)](https://www.npmjs.com/package/pino)\n[![Build Status](https://img.shields.io/github/actions/workflow/status/pinojs/pino/ci.yml)](https://github.com/pinojs/pino/actions)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://standardjs.com/)\n\n[Very low overhead](#low-overhead) Node.js logger.\n\n## Documentation\n\n* [Benchmarks ⇗](/docs/benchmarks.md)\n* [API ⇗](/docs/api.md)\n* [Browser API ⇗](/docs/browser.md)\n* [Redaction ⇗](/docs/redaction.md)\n* [Child Loggers ⇗](/docs/child-loggers.md)\n* [Transports ⇗](/docs/transports.md)\n* [Web Frameworks ⇗](/docs/web.md)\n* [Pretty Printing ⇗](/docs/pretty.md)\n* [Asynchronous Logging ⇗](/docs/asynchronous.md)\n* [Ecosystem ⇗](/docs/ecosystem.md)\n* [Help ⇗](/docs/help.md)\n* [Long Term Support Policy ⇗](/docs/lts.md)\n\n## Install\n\nUsing NPM:\n```\n$ npm install pino\n```\n\nUsing YARN:\n```\n$ yarn add pino\n```\n\nIf you would like to install pino v6, refer to https://github.com/pinojs/pino/tree/v6.x.\n\n## Usage\n\n```js\nconst logger = require('pino')()\n\nlogger.info('hello world')\n\nconst child = logger.child({ a: 'property' })\nchild.info('hello child!')\n```\n\nThis produces:\n\n```\n{\"level\":30,\"time\":1531171074631,\"msg\":\"hello world\",\"pid\":657,\"hostname\":\"Davids-MBP-3.fritz.box\"}\n{\"level\":30,\"time\":1531171082399,\"msg\":\"hello child!\",\"pid\":657,\"hostname\":\"Davids-MBP-3.fritz.box\",\"a\":\"property\"}\n```\n\nFor using Pino with a web framework see:\n\n* [Pino with Fastify](docs/web.md#fastify)\n* [Pino with Express](docs/web.md#express)\n* [Pino with Hapi](docs/web.md#hapi)\n* [Pino with Restify](docs/web.md#restify)\n* [Pino with Koa](docs/web.md#koa)\n* [Pino with Node core `http`](docs/web.md#http)\n* [Pino with Nest](docs/web.md#nest)\n\n\n<a name=\"essentials\"></a>\n## Essentials\n\n### Development Formatting\n\nThe [`pino-pretty`](https://github.com/pinojs/pino-pretty) module can be used to\nformat logs during development:\n\n![pretty demo](pretty-demo.png)\n\n### Transports & Log Processing\n\nDue to Node's single-threaded event-loop, it's highly recommended that sending,\nalert triggering, reformatting, and all forms of log processing\nare conducted in a separate process or thread.\n\nIn Pino terminology, we call all log processors \"transports\" and recommend that the\ntransports be run in a worker thread using our `pino.transport` API.\n\nFor more details see our [Transports⇗](docs/transports.md) document.\n\n### Low overhead\n\nUsing minimum resources for logging is very important. Log messages\ntend to get added over time and this can lead to a throttling effect\non applications – such as reduced requests per second.\n\nIn many cases, Pino is over 5x faster than alternatives.\n\nSee the [Benchmarks](docs/benchmarks.md) document for comparisons.\n\n### Bundling support\n\nPino supports being bundled using tools like webpack or esbuild. \n\nSee [Bundling](docs/bundling.md) document for more information.\n\n<a name=\"team\"></a>\n## The Team\n\n### Matteo Collina\n\n<https://github.com/mcollina>\n\n<https://www.npmjs.com/~matteo.collina>\n\n<https://twitter.com/matteocollina>\n\n### David Mark Clements\n\n<https://github.com/davidmarkclements>\n\n<https://www.npmjs.com/~davidmarkclements>\n\n<https://twitter.com/davidmarkclem>\n\n### James Sumners\n\n<https://github.com/jsumners>\n\n<https://www.npmjs.com/~jsumners>\n\n<https://twitter.com/jsumners79>\n\n### Thomas Watson Steen\n\n<https://github.com/watson>\n\n<https://www.npmjs.com/~watson>\n\n<https://twitter.com/wa7son>\n\n## Contributing\n\nPino is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [CONTRIBUTING.md](https://github.com/pinojs/pino/blob/main/CONTRIBUTING.md) file for more details.\n\n<a name=\"acknowledgments\"></a>\n## Acknowledgments\n\nThis project was kindly sponsored by [nearForm](https://nearform.com).\nThis project is kindly sponsored by [Platformatic](https://platformatic.dev).\n\nLogo and identity designed by Cosmic Fox Design: https://www.behance.net/cosmicfox.\n\n## License\n\nLicensed under [MIT](./LICENSE).\n\n[elasticsearch]: https://www.elastic.co/products/elasticsearch\n[kibana]: https://www.elastic.co/products/kibana\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.4580078125,
          "content": "# Security Policy\n\nThis document describes the management of vulnerabilities for the\nPino project and all modules within the Pino organization.\n\n## Reporting vulnerabilities\n\nIndividuals who find potential vulnerabilities in Pino are invited\nto report them via email at matteo.collina@gmail.com.\n\n### Strict measures when reporting vulnerabilities\n\nAvoid creating new \"informative\" reports. Only create new\nreport a potential vulnerability if you are absolutely sure this\nshould be tagged as an actual vulnerability. Be careful on the maintainers time.\n\n## Handling vulnerability reports\n\nWhen a potential vulnerability is reported, the following actions are taken:\n\n### Triage\n\n**Delay:** 5 business days\n\nWithin 5 business days, a member of the security team provides a first answer to the\nindividual who submitted the potential vulnerability. The possible responses\ncan be:\n\n* Acceptance: what was reported is considered as a new vulnerability\n* Rejection: what was reported is not considered as a new vulnerability\n* Need more information: the security team needs more information in order to evaluate what was reported.\n\nTriaging should include updating issue fields:\n* Asset - set/create the module affected by the report\n* Severity - TBD, currently left empty\n\n### Correction follow-up\n\n**Delay:** 90 days\n\nWhen a vulnerability is confirmed, a member of the security team volunteers to follow\nup on this report.\n\nWith the help of the individual who reported the vulnerability, they contact\nthe maintainers of the vulnerable package to make them aware of the\nvulnerability. The maintainers can be invited as participants to the reported issue.\n\nWith the package maintainer, they define a release date for the publication\nof the vulnerability. Ideally, this release date should not happen before\nthe package has been patched.\n\nThe report's vulnerable versions upper limit should be set to:\n* `*` if there is no fixed version available by the time of publishing the report.\n* the last vulnerable version. For example: `<=1.2.3` if a fix exists in `1.2.4`\n\n### Publication\n\n**Delay:** 90 days\n\nWithin 90 days after the triage date, the vulnerability must be made public.\n\n**Severity**: Vulnerability severity is assessed using [CVSS v.3](https://www.first.org/cvss/user-guide).\n\nIf the package maintainer is actively developing a patch, an additional delay\ncan be added with the approval of the security team and the individual who\nreported the vulnerability. \n\nAt this point, a CVE will be requested by the team.\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin.js",
          "type": "blob",
          "size": 0.166015625,
          "content": "#!/usr/bin/env node\nconsole.error(\n  '`pino` cli has been removed. Use `pino-pretty` cli instead.\\n' +\n  '\\nSee: https://github.com/pinojs/pino-pretty'\n)\nprocess.exit(1)\n"
        },
        {
          "name": "browser.js",
          "type": "blob",
          "size": 13.5048828125,
          "content": "'use strict'\n\nconst format = require('quick-format-unescaped')\n\nmodule.exports = pino\n\nconst _console = pfGlobalThisOrFallback().console || {}\nconst stdSerializers = {\n  mapHttpRequest: mock,\n  mapHttpResponse: mock,\n  wrapRequestSerializer: passthrough,\n  wrapResponseSerializer: passthrough,\n  wrapErrorSerializer: passthrough,\n  req: mock,\n  res: mock,\n  err: asErrValue,\n  errWithCause: asErrValue\n}\nfunction levelToValue (level, logger) {\n  return level === 'silent'\n    ? Infinity\n    : logger.levels.values[level]\n}\nconst baseLogFunctionSymbol = Symbol('pino.logFuncs')\nconst hierarchySymbol = Symbol('pino.hierarchy')\n\nconst logFallbackMap = {\n  error: 'log',\n  fatal: 'error',\n  warn: 'error',\n  info: 'log',\n  debug: 'log',\n  trace: 'log'\n}\n\nfunction appendChildLogger (parentLogger, childLogger) {\n  const newEntry = {\n    logger: childLogger,\n    parent: parentLogger[hierarchySymbol]\n  }\n  childLogger[hierarchySymbol] = newEntry\n}\n\nfunction setupBaseLogFunctions (logger, levels, proto) {\n  const logFunctions = {}\n  levels.forEach(level => {\n    logFunctions[level] = proto[level] ? proto[level] : (_console[level] || _console[logFallbackMap[level] || 'log'] || noop)\n  })\n  logger[baseLogFunctionSymbol] = logFunctions\n}\n\nfunction shouldSerialize (serialize, serializers) {\n  if (Array.isArray(serialize)) {\n    const hasToFilter = serialize.filter(function (k) {\n      return k !== '!stdSerializers.err'\n    })\n    return hasToFilter\n  } else if (serialize === true) {\n    return Object.keys(serializers)\n  }\n\n  return false\n}\n\nfunction pino (opts) {\n  opts = opts || {}\n  opts.browser = opts.browser || {}\n\n  const transmit = opts.browser.transmit\n  if (transmit && typeof transmit.send !== 'function') { throw Error('pino: transmit option must have a send function') }\n\n  const proto = opts.browser.write || _console\n  if (opts.browser.write) opts.browser.asObject = true\n  const serializers = opts.serializers || {}\n  const serialize = shouldSerialize(opts.browser.serialize, serializers)\n  let stdErrSerialize = opts.browser.serialize\n\n  if (\n    Array.isArray(opts.browser.serialize) &&\n    opts.browser.serialize.indexOf('!stdSerializers.err') > -1\n  ) stdErrSerialize = false\n\n  const customLevels = Object.keys(opts.customLevels || {})\n  const levels = ['error', 'fatal', 'warn', 'info', 'debug', 'trace'].concat(customLevels)\n\n  if (typeof proto === 'function') {\n    levels.forEach(function (level) {\n      proto[level] = proto\n    })\n  }\n  if (opts.enabled === false || opts.browser.disabled) opts.level = 'silent'\n  const level = opts.level || 'info'\n  const logger = Object.create(proto)\n  if (!logger.log) logger.log = noop\n\n  setupBaseLogFunctions(logger, levels, proto)\n  // setup root hierarchy entry\n  appendChildLogger({}, logger)\n\n  Object.defineProperty(logger, 'levelVal', {\n    get: getLevelVal\n  })\n  Object.defineProperty(logger, 'level', {\n    get: getLevel,\n    set: setLevel\n  })\n\n  const setOpts = {\n    transmit,\n    serialize,\n    asObject: opts.browser.asObject,\n    formatters: opts.browser.formatters,\n    levels,\n    timestamp: getTimeFunction(opts),\n    messageKey: opts.messageKey || 'msg',\n    onChild: opts.onChild || noop\n  }\n  logger.levels = getLevels(opts)\n  logger.level = level\n\n  logger.setMaxListeners = logger.getMaxListeners =\n  logger.emit = logger.addListener = logger.on =\n  logger.prependListener = logger.once =\n  logger.prependOnceListener = logger.removeListener =\n  logger.removeAllListeners = logger.listeners =\n  logger.listenerCount = logger.eventNames =\n  logger.write = logger.flush = noop\n  logger.serializers = serializers\n  logger._serialize = serialize\n  logger._stdErrSerialize = stdErrSerialize\n  logger.child = function (...args) { return child.call(this, setOpts, ...args) }\n\n  if (transmit) logger._logEvent = createLogEventShape()\n\n  function getLevelVal () {\n    return levelToValue(this.level, this)\n  }\n\n  function getLevel () {\n    return this._level\n  }\n  function setLevel (level) {\n    if (level !== 'silent' && !this.levels.values[level]) {\n      throw Error('unknown level ' + level)\n    }\n    this._level = level\n\n    set(this, setOpts, logger, 'error') // <-- must stay first\n    set(this, setOpts, logger, 'fatal')\n    set(this, setOpts, logger, 'warn')\n    set(this, setOpts, logger, 'info')\n    set(this, setOpts, logger, 'debug')\n    set(this, setOpts, logger, 'trace')\n\n    customLevels.forEach((level) => {\n      set(this, setOpts, logger, level)\n    })\n  }\n\n  function child (setOpts, bindings, childOptions) {\n    if (!bindings) {\n      throw new Error('missing bindings for child Pino')\n    }\n    childOptions = childOptions || {}\n    if (serialize && bindings.serializers) {\n      childOptions.serializers = bindings.serializers\n    }\n    const childOptionsSerializers = childOptions.serializers\n    if (serialize && childOptionsSerializers) {\n      var childSerializers = Object.assign({}, serializers, childOptionsSerializers)\n      var childSerialize = opts.browser.serialize === true\n        ? Object.keys(childSerializers)\n        : serialize\n      delete bindings.serializers\n      applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize)\n    }\n    function Child (parent) {\n      this._childLevel = (parent._childLevel | 0) + 1\n\n      // make sure bindings are available in the `set` function\n      this.bindings = bindings\n\n      if (childSerializers) {\n        this.serializers = childSerializers\n        this._serialize = childSerialize\n      }\n      if (transmit) {\n        this._logEvent = createLogEventShape(\n          [].concat(parent._logEvent.bindings, bindings)\n        )\n      }\n    }\n    Child.prototype = this\n    const newLogger = new Child(this)\n\n    // must happen before the level is assigned\n    appendChildLogger(this, newLogger)\n    newLogger.child = function (...args) { return child.call(this, setOpts, ...args) }\n    // required to actually initialize the logger functions for any given child\n    newLogger.level = childOptions.level || this.level // allow level to be set by childOptions\n    setOpts.onChild(newLogger)\n\n    return newLogger\n  }\n  return logger\n}\n\nfunction getLevels (opts) {\n  const customLevels = opts.customLevels || {}\n\n  const values = Object.assign({}, pino.levels.values, customLevels)\n  const labels = Object.assign({}, pino.levels.labels, invertObject(customLevels))\n\n  return {\n    values,\n    labels\n  }\n}\n\nfunction invertObject (obj) {\n  const inverted = {}\n  Object.keys(obj).forEach(function (key) {\n    inverted[obj[key]] = key\n  })\n  return inverted\n}\n\npino.levels = {\n  values: {\n    fatal: 60,\n    error: 50,\n    warn: 40,\n    info: 30,\n    debug: 20,\n    trace: 10\n  },\n  labels: {\n    10: 'trace',\n    20: 'debug',\n    30: 'info',\n    40: 'warn',\n    50: 'error',\n    60: 'fatal'\n  }\n}\n\npino.stdSerializers = stdSerializers\npino.stdTimeFunctions = Object.assign({}, { nullTime, epochTime, unixTime, isoTime })\n\nfunction getBindingChain (logger) {\n  const bindings = []\n  if (logger.bindings) {\n    bindings.push(logger.bindings)\n  }\n\n  // traverse up the tree to get all bindings\n  let hierarchy = logger[hierarchySymbol]\n  while (hierarchy.parent) {\n    hierarchy = hierarchy.parent\n    if (hierarchy.logger.bindings) {\n      bindings.push(hierarchy.logger.bindings)\n    }\n  }\n\n  return bindings.reverse()\n}\n\nfunction set (self, opts, rootLogger, level) {\n  // override the current log functions with either `noop` or the base log function\n  Object.defineProperty(self, level, {\n    value: (levelToValue(self.level, rootLogger) > levelToValue(level, rootLogger)\n      ? noop\n      : rootLogger[baseLogFunctionSymbol][level]),\n    writable: true,\n    enumerable: true,\n    configurable: true\n  })\n\n  if (self[level] === noop) {\n    if (!opts.transmit) return\n\n    const transmitLevel = opts.transmit.level || self.level\n    const transmitValue = levelToValue(transmitLevel, rootLogger)\n    const methodValue = levelToValue(level, rootLogger)\n    if (methodValue < transmitValue) return\n  }\n\n  // make sure the log format is correct\n  self[level] = createWrap(self, opts, rootLogger, level)\n\n  // prepend bindings if it is not the root logger\n  const bindings = getBindingChain(self)\n  if (bindings.length === 0) {\n    // early exit in case for rootLogger\n    return\n  }\n  self[level] = prependBindingsInArguments(bindings, self[level])\n}\n\nfunction prependBindingsInArguments (bindings, logFunc) {\n  return function () {\n    return logFunc.apply(this, [...bindings, ...arguments])\n  }\n}\n\nfunction createWrap (self, opts, rootLogger, level) {\n  return (function (write) {\n    return function LOG () {\n      const ts = opts.timestamp()\n      const args = new Array(arguments.length)\n      const proto = (Object.getPrototypeOf && Object.getPrototypeOf(this) === _console) ? _console : this\n      for (var i = 0; i < args.length; i++) args[i] = arguments[i]\n\n      var argsIsSerialized = false\n      if (opts.serialize) {\n        applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize)\n        argsIsSerialized = true\n      }\n      if (opts.asObject || opts.formatters) {\n        write.call(proto, asObject(this, level, args, ts, opts))\n      } else write.apply(proto, args)\n\n      if (opts.transmit) {\n        const transmitLevel = opts.transmit.level || self._level\n        const transmitValue = levelToValue(transmitLevel, rootLogger)\n        const methodValue = levelToValue(level, rootLogger)\n        if (methodValue < transmitValue) return\n        transmit(this, {\n          ts,\n          methodLevel: level,\n          methodValue,\n          transmitLevel,\n          transmitValue: rootLogger.levels.values[opts.transmit.level || self._level],\n          send: opts.transmit.send,\n          val: levelToValue(self._level, rootLogger)\n        }, args, argsIsSerialized)\n      }\n    }\n  })(self[baseLogFunctionSymbol][level])\n}\n\nfunction asObject (logger, level, args, ts, opts) {\n  const {\n    level: levelFormatter,\n    log: logObjectFormatter = (obj) => obj\n  } = opts.formatters || {}\n  const argsCloned = args.slice()\n  let msg = argsCloned[0]\n  const logObject = {}\n  if (ts) {\n    logObject.time = ts\n  }\n\n  if (levelFormatter) {\n    const formattedLevel = levelFormatter(level, logger.levels.values[level])\n    Object.assign(logObject, formattedLevel)\n  } else {\n    logObject.level = logger.levels.values[level]\n  }\n\n  let lvl = (logger._childLevel | 0) + 1\n  if (lvl < 1) lvl = 1\n  // deliberate, catching objects, arrays\n  if (msg !== null && typeof msg === 'object') {\n    while (lvl-- && typeof argsCloned[0] === 'object') {\n      Object.assign(logObject, argsCloned.shift())\n    }\n    msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : undefined\n  } else if (typeof msg === 'string') msg = format(argsCloned.shift(), argsCloned)\n  if (msg !== undefined) logObject[opts.messageKey] = msg\n\n  const formattedLogObject = logObjectFormatter(logObject)\n  return formattedLogObject\n}\n\nfunction applySerializers (args, serialize, serializers, stdErrSerialize) {\n  for (const i in args) {\n    if (stdErrSerialize && args[i] instanceof Error) {\n      args[i] = pino.stdSerializers.err(args[i])\n    } else if (typeof args[i] === 'object' && !Array.isArray(args[i]) && serialize) {\n      for (const k in args[i]) {\n        if (serialize.indexOf(k) > -1 && k in serializers) {\n          args[i][k] = serializers[k](args[i][k])\n        }\n      }\n    }\n  }\n}\n\nfunction transmit (logger, opts, args, argsIsSerialized = false) {\n  const send = opts.send\n  const ts = opts.ts\n  const methodLevel = opts.methodLevel\n  const methodValue = opts.methodValue\n  const val = opts.val\n  const bindings = logger._logEvent.bindings\n\n  if (!argsIsSerialized) {\n    applySerializers(\n      args,\n      logger._serialize || Object.keys(logger.serializers),\n      logger.serializers,\n      logger._stdErrSerialize === undefined ? true : logger._stdErrSerialize\n    )\n  }\n\n  logger._logEvent.ts = ts\n  logger._logEvent.messages = args.filter(function (arg) {\n    // bindings can only be objects, so reference equality check via indexOf is fine\n    return bindings.indexOf(arg) === -1\n  })\n\n  logger._logEvent.level.label = methodLevel\n  logger._logEvent.level.value = methodValue\n\n  send(methodLevel, logger._logEvent, val)\n\n  logger._logEvent = createLogEventShape(bindings)\n}\n\nfunction createLogEventShape (bindings) {\n  return {\n    ts: 0,\n    messages: [],\n    bindings: bindings || [],\n    level: { label: '', value: 0 }\n  }\n}\n\nfunction asErrValue (err) {\n  const obj = {\n    type: err.constructor.name,\n    msg: err.message,\n    stack: err.stack\n  }\n  for (const key in err) {\n    if (obj[key] === undefined) {\n      obj[key] = err[key]\n    }\n  }\n  return obj\n}\n\nfunction getTimeFunction (opts) {\n  if (typeof opts.timestamp === 'function') {\n    return opts.timestamp\n  }\n  if (opts.timestamp === false) {\n    return nullTime\n  }\n  return epochTime\n}\n\nfunction mock () { return {} }\nfunction passthrough (a) { return a }\nfunction noop () {}\n\nfunction nullTime () { return false }\nfunction epochTime () { return Date.now() }\nfunction unixTime () { return Math.round(Date.now() / 1000.0) }\nfunction isoTime () { return new Date(Date.now()).toISOString() } // using Date.now() for testability\n\n/* eslint-disable */\n/* istanbul ignore next */\nfunction pfGlobalThisOrFallback () {\n  function defd (o) { return typeof o !== 'undefined' && o }\n  try {\n    if (typeof globalThis !== 'undefined') return globalThis\n    Object.defineProperty(Object.prototype, 'globalThis', {\n      get: function () {\n        delete Object.prototype.globalThis\n        return (this.globalThis = this)\n      },\n      configurable: true\n    })\n    return globalThis\n  } catch (e) {\n    return defd(self) || defd(window) || defd(this) || {}\n  }\n}\n/* eslint-enable */\n\nmodule.exports.default = pino\nmodule.exports.pino = pino\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "docsify",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "favicon-16x16.png",
          "type": "blob",
          "size": 0.947265625,
          "content": null
        },
        {
          "name": "favicon-32x32.png",
          "type": "blob",
          "size": 1.47265625,
          "content": null
        },
        {
          "name": "favicon.ico",
          "type": "blob",
          "size": 14.732421875,
          "content": null
        },
        {
          "name": "file.js",
          "type": "blob",
          "size": 0.349609375,
          "content": "'use strict'\n\nconst pino = require('./pino')\nconst { once } = require('node:events')\n\nmodule.exports = async function (opts = {}) {\n  const destOpts = Object.assign({}, opts, { dest: opts.destination || 1, sync: false })\n  delete destOpts.destination\n  const destination = pino.destination(destOpts)\n  await once(destination, 'ready')\n  return destination\n}\n"
        },
        {
          "name": "inc-version.sh",
          "type": "blob",
          "size": 0.8017578125,
          "content": "#!/bin/bash \n\nset -e\n\nPATH=./node_modules/.bin:${PATH}\nCURRENT_VERSION=$(jq -r .version package.json)\n\ncase ${1} in\n  Major | MAJOR | major)\n    LEVEL=major\n    ;;\n\n  Minor | MINOR | minor)\n    LEVEL=minor\n    ;;\n\n  Patch | PATCH | patch)\n    LEVEL=patch\n    ;;\n\n  *)\n    LEVEL=patch\n    ;;\nesac\n\nNEW_VERSION=$(semver -i ${LEVEL} ${CURRENT_VERSION})\necho \"${CURRENT_VERSION} => ${NEW_VERSION}\"\nread -n 1 -s -r -p \"Press any key to continue (ctrl+c to abort)...\"\necho \"\"\n\necho \"Patching package.json...\"\ncat package.json | \\\n  jq --arg vers \"${NEW_VERSION}\" '.version = $vers' | \\\n  tee package.json 1>/dev/null\n\necho \"Patching lib/meta.js ...\"\nSED_SCRIPT=$(printf 's/%s/%s/' ${CURRENT_VERSION//\\./\\\\.} ${NEW_VERSION//\\./\\\\.})\ncat ./lib/meta.js | \\\n  sed -e ${SED_SCRIPT} | \\\n  tee ./lib/meta.js 1>/dev/null\n\necho \"Done.\"\n"
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 1.783203125,
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Pino - Super fast, all natural JSON logger for Node.js</title>\n  <meta name=\"description\" content=\"Super fast, all natural JSON logger for Node.js\">\n  <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n  <link rel=\"stylesheet\" href=\"//unpkg.com/docsify-themeable/dist/css/theme-simple.css\">\n  <style>\n    :root {\n      --base-font-size: 16px;\n      --theme-color: rgb(104, 118, 52);\n      --link-color:  rgb(104, 118, 52);\n      --link-color--hover: rgb(137, 152, 100);\n      --sidebar-name-margin: 0;\n      --sidebar-name-padding: 0;\n      --code-font-size: .9em;\n    }\n    .sidebar > h1 {\n      margin-bottom: -.75em;\n      margin-top: .75em;\n    }\n    .sidebar > h1 img {\n      height: 4em;\n    }\n    .markdown-section a code {\n      color: var(--link-color)!important;\n    }\n    .markdown-section code:not([class*=\"lang-\"]):not([class*=\"language-\"]) {\n      white-space: unset\n    }\n  </style>\n  <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"favicon-32x32.png\">\n  <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"favicon-16x16.png\">\n</head>\n<body>\n  <div id=\"app\"></div>\n</body>\n<script>\n  window.$docsify = {\n    name: 'pino',\n    logo: './pino-tree.png',\n    loadSidebar: 'docsify/sidebar.md',\n    repo: 'https://github.com/pinojs/pino',\n    auto2top: true,\n    ga: 'UA-103155139-1'\n  }\n</script>\n<script src=\"//unpkg.com/docsify/lib/docsify.min.js\"></script>\n<script src=\"//unpkg.com/docsify/lib/plugins/search.min.js\"></script>\n<script src=\"//unpkg.com/docsify/lib/plugins/ga.min.js\"></script>\n<!-- To enable syntax highlighting on TypeScript codes: -->\n<script src=\"//cdn.jsdelivr.net/npm/prismjs@1/components/prism-typescript.min.js\"></script>\n\n</html>\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 4.099609375,
          "content": "{\n  \"name\": \"pino\",\n  \"version\": \"9.6.0\",\n  \"description\": \"super fast, all natural json logger\",\n  \"main\": \"pino.js\",\n  \"type\": \"commonjs\",\n  \"types\": \"pino.d.ts\",\n  \"browser\": \"./browser.js\",\n  \"scripts\": {\n    \"docs\": \"docsify serve\",\n    \"browser-test\": \"airtap --local 8080 test/browser*test.js\",\n    \"lint\": \"eslint .\",\n    \"prepublishOnly\": \"tap --no-check-coverage test/internals/version.test.js\",\n    \"test\": \"npm run lint && npm run transpile && tap --ts && jest test/jest && npm run test-types\",\n    \"test-ci\": \"npm run lint && npm run transpile && tap --ts --no-check-coverage --coverage-report=lcovonly && npm run test-types\",\n    \"test-ci-pnpm\": \"pnpm run lint && npm run transpile && tap --ts --no-coverage --no-check-coverage && pnpm run test-types\",\n    \"test-ci-yarn-pnp\": \"yarn run lint && npm run transpile && tap --ts --no-check-coverage --coverage-report=lcovonly\",\n    \"test-types\": \"tsc && tsd && ts-node test/types/pino.ts\",\n    \"test:smoke\": \"smoker smoke:pino && smoker smoke:browser && smoker smoke:file\",\n    \"smoke:pino\": \"node ./pino.js\",\n    \"smoke:browser\": \"node ./browser.js\",\n    \"smoke:file\": \"node ./file.js\",\n    \"transpile\": \"node ./test/fixtures/ts/transpile.cjs\",\n    \"cov-ui\": \"tap --ts --coverage-report=html\",\n    \"bench\": \"node benchmarks/utils/runbench all\",\n    \"bench-basic\": \"node benchmarks/utils/runbench basic\",\n    \"bench-object\": \"node benchmarks/utils/runbench object\",\n    \"bench-deep-object\": \"node benchmarks/utils/runbench deep-object\",\n    \"bench-multi-arg\": \"node benchmarks/utils/runbench multi-arg\",\n    \"bench-longs-tring\": \"node benchmarks/utils/runbench long-string\",\n    \"bench-child\": \"node benchmarks/utils/runbench child\",\n    \"bench-child-child\": \"node benchmarks/utils/runbench child-child\",\n    \"bench-child-creation\": \"node benchmarks/utils/runbench child-creation\",\n    \"bench-formatters\": \"node benchmarks/utils/runbench formatters\",\n    \"update-bench-doc\": \"node benchmarks/utils/generate-benchmark-doc > docs/benchmarks.md\"\n  },\n  \"bin\": {\n    \"pino\": \"./bin.js\"\n  },\n  \"precommit\": \"test\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/pinojs/pino.git\"\n  },\n  \"keywords\": [\n    \"fast\",\n    \"logger\",\n    \"stream\",\n    \"json\"\n  ],\n  \"author\": \"Matteo Collina <hello@matteocollina.com>\",\n  \"contributors\": [\n    \"David Mark Clements <huperekchuno@googlemail.com>\",\n    \"James Sumners <james.sumners@gmail.com>\",\n    \"Thomas Watson Steen <w@tson.dk> (https://twitter.com/wa7son)\"\n  ],\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/pinojs/pino/issues\"\n  },\n  \"homepage\": \"https://getpino.io\",\n  \"devDependencies\": {\n    \"@types/flush-write-stream\": \"^1.0.0\",\n    \"@types/node\": \"^22.0.0\",\n    \"@types/tap\": \"^15.0.6\",\n    \"@yao-pkg/pkg\": \"6.2.0\",\n    \"airtap\": \"5.0.0\",\n    \"benchmark\": \"^2.1.4\",\n    \"bole\": \"^5.0.5\",\n    \"bunyan\": \"^1.8.14\",\n    \"debug\": \"^4.3.4\",\n    \"docsify-cli\": \"^4.4.4\",\n    \"eslint\": \"^8.17.0\",\n    \"eslint-config-standard\": \"^17.0.0\",\n    \"eslint-plugin-import\": \"^2.26.0\",\n    \"eslint-plugin-n\": \"15.7.0\",\n    \"eslint-plugin-node\": \"^11.1.0\",\n    \"eslint-plugin-promise\": \"^6.0.0\",\n    \"execa\": \"^5.0.0\",\n    \"fastbench\": \"^1.0.1\",\n    \"flush-write-stream\": \"^2.0.0\",\n    \"import-fresh\": \"^3.2.1\",\n    \"jest\": \"^29.0.3\",\n    \"log\": \"^6.0.0\",\n    \"loglevel\": \"^1.6.7\",\n    \"midnight-smoker\": \"1.1.1\",\n    \"pino-pretty\": \"^11.0.0\",\n    \"pre-commit\": \"^1.2.2\",\n    \"proxyquire\": \"^2.1.3\",\n    \"pump\": \"^3.0.0\",\n    \"rimraf\": \"^6.0.1\",\n    \"semver\": \"^7.3.7\",\n    \"split2\": \"^4.0.0\",\n    \"steed\": \"^1.1.3\",\n    \"strip-ansi\": \"^6.0.0\",\n    \"tap\": \"^16.2.0\",\n    \"tape\": \"^5.5.3\",\n    \"through2\": \"^4.0.0\",\n    \"ts-node\": \"^10.9.1\",\n    \"tsd\": \"^0.31.0\",\n    \"typescript\": \"~5.7.2\",\n    \"winston\": \"^3.7.2\"\n  },\n  \"dependencies\": {\n    \"atomic-sleep\": \"^1.0.0\",\n    \"fast-redact\": \"^3.1.1\",\n    \"on-exit-leak-free\": \"^2.1.0\",\n    \"pino-abstract-transport\": \"^2.0.0\",\n    \"pino-std-serializers\": \"^7.0.0\",\n    \"process-warning\": \"^4.0.0\",\n    \"quick-format-unescaped\": \"^4.0.3\",\n    \"real-require\": \"^0.2.0\",\n    \"safe-stable-stringify\": \"^2.3.1\",\n    \"sonic-boom\": \"^4.0.1\",\n    \"thread-stream\": \"^3.0.0\"\n  },\n  \"tsd\": {\n    \"directory\": \"test/types\"\n  }\n}\n"
        },
        {
          "name": "pino-banner.png",
          "type": "blob",
          "size": 41.02734375,
          "content": null
        },
        {
          "name": "pino-logo-hire.png",
          "type": "blob",
          "size": 50.439453125,
          "content": null
        },
        {
          "name": "pino-tree.png",
          "type": "blob",
          "size": 13.0927734375,
          "content": null
        },
        {
          "name": "pino.d.ts",
          "type": "blob",
          "size": 39.173828125,
          "content": "// Project: https://github.com/pinojs/pino.git, http://getpino.io\n// Definitions by: Peter Snider <https://github.com/psnider>\n//                 BendingBender <https://github.com/BendingBender>\n//                 Christian Rackerseder <https://github.com/screendriver>\n//                 GP <https://github.com/paambaati>\n//                 Alex Ferrando <https://github.com/alferpal>\n//                 Oleksandr Sidko <https://github.com/mortiy>\n//                 Harris Lummis <https://github.com/lummish>\n//                 Raoul Jaeckel <https://github.com/raoulus>\n//                 Cory Donkin <https://github.com/Cooryd>\n//                 Adam Vigneaux <https://github.com/AdamVig>\n//                 Austin Beer <https://github.com/austin-beer>\n//                 Michel Nemnom <https://github.com/Pegase745>\n//                 Igor Savin <https://github.com/kibertoad>\n//                 James Bromwell <https://github.com/thw0rted>\n// TypeScript Version: 4.4\n\nimport type { EventEmitter } from \"events\";\nimport * as pinoStdSerializers from \"pino-std-serializers\";\nimport type { SonicBoom, SonicBoomOpts } from \"sonic-boom\";\nimport type { WorkerOptions } from \"worker_threads\";\n\n\n\n//// Non-exported types and interfaces\n\n// ToDo https://github.com/pinojs/thread-stream/issues/24\ntype ThreadStream = any\n\ntype TimeFn = () => string;\ntype MixinFn<CustomLevels extends string = never> = (mergeObject: object, level: number, logger:pino.Logger<CustomLevels>) => object;\ntype MixinMergeStrategyFn = (mergeObject: object, mixinObject: object) => object;\n\ntype CustomLevelLogger<CustomLevels extends string, UseOnlyCustomLevels extends boolean = boolean> = { \n    /**\n     * Define additional logging levels.\n     */\n    customLevels: { [level in CustomLevels]: number };\n    /**\n     * Use only defined `customLevels` and omit Pino's levels.\n     */\n    useOnlyCustomLevels: UseOnlyCustomLevels;\n } & {\n    // This will override default log methods\n    [K in Exclude<pino.Level, CustomLevels>]: UseOnlyCustomLevels extends true ? never : pino.LogFn;\n } & {\n    [level in CustomLevels]: pino.LogFn;\n };\n\n/**\n* A synchronous callback that will run on each creation of a new child.\n* @param child: The newly created child logger instance.\n*/\ntype OnChildCallback<CustomLevels extends string = never> = (child: pino.Logger<CustomLevels>) => void\n\nexport interface redactOptions {\n    paths: string[];\n    censor?: string | ((value: any, path: string[]) => any);\n    remove?: boolean;\n}\n\nexport interface LoggerExtras<CustomLevels extends string = never, UseOnlyCustomLevels extends boolean = boolean> extends EventEmitter {\n    /**\n     * Exposes the Pino package version. Also available on the exported pino function.\n     */\n    readonly version: string;\n\n    levels: pino.LevelMapping;\n\n    /**\n     * Outputs the level as a string instead of integer.\n     */\n    useLevelLabels: boolean;\n    /**\n     * Returns the integer value for the logger instance's logging level.\n     */\n    levelVal: number;\n\n    /**\n     * Creates a child logger, setting all key-value pairs in `bindings` as properties in the log lines. All serializers will be applied to the given pair.\n     * Child loggers use the same output stream as the parent and inherit the current log level of the parent at the time they are spawned.\n     * From v2.x.x the log level of a child is mutable (whereas in v1.x.x it was immutable), and can be set independently of the parent.\n     * If a `level` property is present in the object passed to `child` it will override the child logger level.\n     *\n     * @param bindings: an object of key-value pairs to include in log lines as properties.\n     * @param options: an options object that will override child logger inherited options.\n     * @returns a child logger instance.\n     */\n    child<ChildCustomLevels extends string = never>(bindings: pino.Bindings, options?: ChildLoggerOptions<ChildCustomLevels>): pino.Logger<CustomLevels | ChildCustomLevels>;\n\n    /**\n     * This can be used to modify the callback function on creation of a new child.\n     */\n    onChild: OnChildCallback<CustomLevels>;\n\n    /**\n     * Registers a listener function that is triggered when the level is changed.\n     * Note: When browserified, this functionality will only be available if the `events` module has been required elsewhere\n     * (e.g. if you're using streams in the browser). This allows for a trade-off between bundle size and functionality.\n     *\n     * @param event: only ever fires the `'level-change'` event\n     * @param listener: The listener is passed four arguments: `levelLabel`, `levelValue`, `previousLevelLabel`, `previousLevelValue`.\n     */\n    on(event: \"level-change\", listener: pino.LevelChangeEventListener<CustomLevels, UseOnlyCustomLevels>): this;\n    addListener(event: \"level-change\", listener: pino.LevelChangeEventListener<CustomLevels, UseOnlyCustomLevels>): this;\n    once(event: \"level-change\", listener: pino.LevelChangeEventListener<CustomLevels, UseOnlyCustomLevels>): this;\n    prependListener(event: \"level-change\", listener: pino.LevelChangeEventListener<CustomLevels, UseOnlyCustomLevels>): this;\n    prependOnceListener(event: \"level-change\", listener: pino.LevelChangeEventListener<CustomLevels, UseOnlyCustomLevels>): this;\n    removeListener(event: \"level-change\", listener: pino.LevelChangeEventListener<CustomLevels, UseOnlyCustomLevels>): this;\n\n    /**\n     * A utility method for determining if a given log level will write to the destination.\n     */\n    isLevelEnabled(level: pino.LevelWithSilentOrString): boolean;\n\n    /**\n     * Returns an object containing all the current bindings, cloned from the ones passed in via logger.child().\n     */\n    bindings(): pino.Bindings;\n\n    /**\n     * Adds to the bindings of this logger instance.\n     * Note: Does not overwrite bindings. Can potentially result in duplicate keys in log lines.\n     *\n     * @param bindings: an object of key-value pairs to include in log lines as properties.\n     */\n    setBindings(bindings: pino.Bindings): void;\n\n    /**\n     * Flushes the content of the buffer when using pino.destination({ sync: false }).\n     * call the callback when finished\n     */\n    flush(cb?: (err?: Error) => void): void;\n}\n\n\ndeclare namespace pino {\n    //// Exported types and interfaces\n\n    interface BaseLogger {\n        /**\n         * Set this property to the desired logging level. In order of priority, available levels are:\n         *\n         * - 'fatal'\n         * - 'error'\n         * - 'warn'\n         * - 'info'\n         * - 'debug'\n         * - 'trace'\n         *\n         * The logging level is a __minimum__ level. For instance if `logger.level` is `'info'` then all `'fatal'`, `'error'`, `'warn'`,\n         * and `'info'` logs will be enabled.\n         *\n         * You can pass `'silent'` to disable logging.\n         */\n        level: pino.LevelWithSilentOrString;\n\n        /**\n         * Log at `'fatal'` level the given msg. If the first argument is an object, all its properties will be included in the JSON line.\n         * If more args follows `msg`, these will be used to format `msg` using `util.format`.\n         *\n         * @typeParam T: the interface of the object being serialized. Default is object.\n         * @param obj: object to be serialized\n         * @param msg: the log message to write\n         * @param ...args: format string values when `msg` is a format string\n         */\n        fatal: pino.LogFn;\n        /**\n         * Log at `'error'` level the given msg. If the first argument is an object, all its properties will be included in the JSON line.\n         * If more args follows `msg`, these will be used to format `msg` using `util.format`.\n         *\n         * @typeParam T: the interface of the object being serialized. Default is object.\n         * @param obj: object to be serialized\n         * @param msg: the log message to write\n         * @param ...args: format string values when `msg` is a format string\n         */\n        error: pino.LogFn;\n        /**\n         * Log at `'warn'` level the given msg. If the first argument is an object, all its properties will be included in the JSON line.\n         * If more args follows `msg`, these will be used to format `msg` using `util.format`.\n         *\n         * @typeParam T: the interface of the object being serialized. Default is object.\n         * @param obj: object to be serialized\n         * @param msg: the log message to write\n         * @param ...args: format string values when `msg` is a format string\n         */\n        warn: pino.LogFn;\n        /**\n         * Log at `'info'` level the given msg. If the first argument is an object, all its properties will be included in the JSON line.\n         * If more args follows `msg`, these will be used to format `msg` using `util.format`.\n         *\n         * @typeParam T: the interface of the object being serialized. Default is object.\n         * @param obj: object to be serialized\n         * @param msg: the log message to write\n         * @param ...args: format string values when `msg` is a format string\n         */\n        info: pino.LogFn;\n        /**\n         * Log at `'debug'` level the given msg. If the first argument is an object, all its properties will be included in the JSON line.\n         * If more args follows `msg`, these will be used to format `msg` using `util.format`.\n         *\n         * @typeParam T: the interface of the object being serialized. Default is object.\n         * @param obj: object to be serialized\n         * @param msg: the log message to write\n         * @param ...args: format string values when `msg` is a format string\n         */\n        debug: pino.LogFn;\n        /**\n         * Log at `'trace'` level the given msg. If the first argument is an object, all its properties will be included in the JSON line.\n         * If more args follows `msg`, these will be used to format `msg` using `util.format`.\n         *\n         * @typeParam T: the interface of the object being serialized. Default is object.\n         * @param obj: object to be serialized\n         * @param msg: the log message to write\n         * @param ...args: format string values when `msg` is a format string\n         */\n        trace: pino.LogFn;\n        /**\n         * Noop function.\n         */\n        silent: pino.LogFn;\n    }\n\n    type Bindings = Record<string, any>;\n\n    type Level = \"fatal\" | \"error\" | \"warn\" | \"info\" | \"debug\" | \"trace\";\n    type LevelOrString = Level | (string & {});\n    type LevelWithSilent = pino.Level | \"silent\";\n    type LevelWithSilentOrString = LevelWithSilent | (string & {});\n\n    type SerializerFn = (value: any) => any;\n    type WriteFn = (o: object) => void;\n\n    type LevelChangeEventListener<CustomLevels extends string = never, UseOnlyCustomLevels extends boolean = boolean> = (\n        lvl: LevelWithSilentOrString,\n        val: number,\n        prevLvl: LevelWithSilentOrString,\n        prevVal: number,\n        logger: Logger<CustomLevels, UseOnlyCustomLevels>\n    ) => void;\n\n    type LogDescriptor = Record<string, any>;\n\n    type Logger<CustomLevels extends string = never, UseOnlyCustomLevels extends boolean = boolean> = BaseLogger & LoggerExtras<CustomLevels> & CustomLevelLogger<CustomLevels, UseOnlyCustomLevels>;\n\n    type SerializedError = pinoStdSerializers.SerializedError;\n    type SerializedResponse = pinoStdSerializers.SerializedResponse;\n    type SerializedRequest = pinoStdSerializers.SerializedRequest;\n\n\n    interface TransportTargetOptions<TransportOptions = Record<string, any>> {\n        target: string\n        options?: TransportOptions\n        level?: LevelWithSilentOrString\n    }\n\n    interface TransportBaseOptions<TransportOptions = Record<string, any>> {\n        options?: TransportOptions\n        worker?: WorkerOptions & { autoEnd?: boolean}\n    }\n\n    interface TransportSingleOptions<TransportOptions = Record<string, any>> extends TransportBaseOptions<TransportOptions>{\n        target: string\n    }\n\n    interface TransportPipelineOptions<TransportOptions = Record<string, any>> extends TransportBaseOptions<TransportOptions>{\n        pipeline: TransportSingleOptions<TransportOptions>[]\n        level?: LevelWithSilentOrString\n    }\n\n    interface TransportMultiOptions<TransportOptions = Record<string, any>> extends TransportBaseOptions<TransportOptions>{\n        targets: readonly (TransportTargetOptions<TransportOptions>|TransportPipelineOptions<TransportOptions>)[],\n        levels?: Record<string, number>\n        dedupe?: boolean\n    }\n\n    interface MultiStreamOptions {\n        levels?: Record<string, number>\n        dedupe?: boolean\n    }\n\n    interface DestinationStream {\n        write(msg: string): void;\n    }\n\n    interface DestinationStreamHasMetadata {\n      [symbols.needsMetadataGsym]: true;\n      lastLevel: number;\n      lastTime: string;\n      lastMsg: string;\n      lastObj: object;\n      lastLogger: pino.Logger;\n    }\n\n    type DestinationStreamWithMetadata = DestinationStream & ({ [symbols.needsMetadataGsym]?: false } | DestinationStreamHasMetadata);\n\n    interface StreamEntry<TLevel = Level> {\n        stream: DestinationStream\n        level?: TLevel\n    }\n\n    interface MultiStreamRes<TOriginLevel = Level> {\n        write: (data: any) => void,\n        add: <TLevel = Level>(dest: StreamEntry<TLevel> | DestinationStream) => MultiStreamRes<TOriginLevel & TLevel>,\n        flushSync: () => void,\n        minLevel: number,\n        streams: StreamEntry<TOriginLevel>[],\n        clone<TLevel = Level>(level: TLevel): MultiStreamRes<TLevel>,\n    }\n\n    interface LevelMapping {\n        /**\n         * Returns the mappings of level names to their respective internal number representation.\n         */\n        values: { [level: string]: number };\n        /**\n         * Returns the mappings of level internal level numbers to their string representations.\n         */\n        labels: { [level: number]: string };\n    }\n\n    interface LogFn {\n        // TODO: why is this different from `obj: object` or `obj: any`?\n        /* tslint:disable:no-unnecessary-generics */\n        <T extends object>(obj: T, msg?: string, ...args: any[]): void;\n        (obj: unknown, msg?: string, ...args: any[]): void;\n        (msg: string, ...args: any[]): void;\n    }\n\n    interface LoggerOptions<CustomLevels extends string = never, UseOnlyCustomLevels extends boolean = boolean> {\n        transport?: TransportSingleOptions | TransportMultiOptions | TransportPipelineOptions\n        /**\n         * Avoid error causes by circular references in the object tree. Default: `true`.\n         */\n        safe?: boolean;\n        /**\n         * The name of the logger. Default: `undefined`.\n         */\n        name?: string;\n        /**\n         * an object containing functions for custom serialization of objects.\n         * These functions should return an JSONifiable object and they should never throw. When logging an object,\n         * each top-level property matching the exact key of a serializer will be serialized using the defined serializer.\n         */\n        serializers?: { [key: string]: SerializerFn };\n        /**\n         * Enables or disables the inclusion of a timestamp in the log message. If a function is supplied, it must\n         * synchronously return a JSON string representation of the time. If set to `false`, no timestamp will be included in the output.\n         * See stdTimeFunctions for a set of available functions for passing in as a value for this option.\n         * Caution: any sort of formatted time will significantly slow down Pino's performance.\n         */\n        timestamp?: TimeFn | boolean;\n        /**\n         * One of the supported levels or `silent` to disable logging. Any other value defines a custom level and\n         * requires supplying a level value via `levelVal`. Default: 'info'.\n         */\n        level?: LevelWithSilentOrString;\n\n        /**\n         * Use this option to define additional logging levels.\n         * The keys of the object correspond the namespace of the log level, and the values should be the numerical value of the level.\n         */\n        customLevels?: { [level in CustomLevels]: number };\n\n        /**\n         * Use this option to only use defined `customLevels` and omit Pino's levels.\n         * Logger's default `level` must be changed to a value in `customLevels` in order to use `useOnlyCustomLevels`\n         * Warning: this option may not be supported by downstream transports.\n         */\n        useOnlyCustomLevels?: UseOnlyCustomLevels;\n\n        /**\n         *  Use this option to define custom comparison of log levels.\n         *  Useful to compare custom log levels or non-standard level values.\n         *  Default: \"ASC\"\n         */\n        levelComparison?: \"ASC\" | \"DESC\" | ((current: number, expected: number) => boolean);\n\n        /**\n         * If provided, the `mixin` function is called each time one of the active logging methods\n         * is called. The function must synchronously return an object. The properties of the\n         * returned object will be added to the logged JSON.\n         */\n        mixin?: MixinFn<CustomLevels>;\n\n        /**\n         * If provided, the `mixinMergeStrategy` function is called each time one of the active\n         * logging methods is called. The first parameter is the value `mergeObject` or an empty object,\n         * the second parameter is the value resulting from `mixin()` or an empty object.\n         * The function must synchronously return an object.\n         */\n        mixinMergeStrategy?: MixinMergeStrategyFn\n\n        /**\n         * As an array, the redact option specifies paths that should have their values redacted from any log output.\n         *\n         * Each path must be a string using a syntax which corresponds to JavaScript dot and bracket notation.\n         *\n         * If an object is supplied, three options can be specified:\n         *\n         *      paths (String[]): Required. An array of paths\n         *      censor (String): Optional. A value to overwrite key which are to be redacted. Default: '[Redacted]'\n         *      remove (Boolean): Optional. Instead of censoring the value, remove both the key and the value. Default: false\n         */\n        redact?: string[] | redactOptions;\n\n        /**\n         * When defining a custom log level via level, set to an integer value to define the new level. Default: `undefined`.\n         */\n        levelVal?: number;\n        /**\n         * The string key for the 'message' in the JSON object. Default: \"msg\".\n         */\n        messageKey?: string;\n        /**\n         * The string key for the 'error' in the JSON object. Default: \"err\".\n         */\n        errorKey?: string;\n        /**\n         * The string key to place any logged object under.\n         */\n        nestedKey?: string;\n        /**\n         * Enables logging. Default: `true`.\n         */\n        enabled?: boolean;\n        /**\n         * Browser only, see http://getpino.io/#/docs/browser.\n         */\n        browser?: {\n            /**\n             * The `asObject` option will create a pino-like log object instead of passing all arguments to a console\n             * method. When `write` is set, `asObject` will always be true.\n             *\n             * @example\n             * pino.info('hi') // creates and logs {msg: 'hi', level: 30, time: <ts>}\n             */\n            asObject?: boolean;\n            formatters?: {\n                /**\n                 * Changes the shape of the log level.\n                 * The default shape is { level: number }.\n                 */\n                level?: (label: string, number: number) => object;\n                /**\n                 * Changes the shape of the log object.\n                 */\n                log?: (object: Record<string, unknown>) => Record<string, unknown>;\n            }\n            /**\n             * Instead of passing log messages to `console.log` they can be passed to a supplied function. If `write` is\n             * set to a single function, all logging objects are passed to this function. If `write` is an object, it\n             * can have methods that correspond to the levels. When a message is logged at a given level, the\n             * corresponding method is called. If a method isn't present, the logging falls back to using the `console`.\n             *\n             * @example\n             * const pino = require('pino')({\n             *   browser: {\n             *     write: (o) => {\n             *       // do something with o\n             *     }\n             *   }\n             * })\n             *\n             * @example\n             * const pino = require('pino')({\n             *   browser: {\n             *     write: {\n             *       info: function (o) {\n             *         //process info log object\n             *       },\n             *       error: function (o) {\n             *         //process error log object\n             *       }\n             *     }\n             *   }\n             * })\n             */\n            write?:\n                | WriteFn\n                | ({\n                fatal?: WriteFn;\n                error?: WriteFn;\n                warn?: WriteFn;\n                info?: WriteFn;\n                debug?: WriteFn;\n                trace?: WriteFn;\n            } & { [logLevel: string]: WriteFn });\n\n            /**\n             * The serializers provided to `pino` are ignored by default in the browser, including the standard\n             * serializers provided with Pino. Since the default destination for log messages is the console, values\n             * such as `Error` objects are enhanced for inspection, which they otherwise wouldn't be if the Error\n             * serializer was enabled. We can turn all serializers on or we can selectively enable them via an array.\n             *\n             * When `serialize` is `true` the standard error serializer is also enabled (see\n             * {@link https://github.com/pinojs/pino/blob/master/docs/api.md#pino-stdserializers}). This is a global\n             * serializer which will apply to any `Error` objects passed to the logger methods.\n             *\n             * If `serialize` is an array the standard error serializer is also automatically enabled, it can be\n             * explicitly disabled by including a string in the serialize array: `!stdSerializers.err` (see example).\n             *\n             * The `serialize` array also applies to any child logger serializers (see\n             * {@link https://github.com/pinojs/pino/blob/master/docs/api.md#bindingsserializers-object} for how to\n             * set child-bound serializers).\n             *\n             * Unlike server pino the serializers apply to every object passed to the logger method, if the `asObject`\n             * option is `true`, this results in the serializers applying to the first object (as in server pino).\n             *\n             * For more info on serializers see\n             * {@link https://github.com/pinojs/pino/blob/master/docs/api.md#serializers-object}.\n             *\n             * @example\n             * const pino = require('pino')({\n             *   browser: {\n             *     serialize: true\n             *   }\n             * })\n             *\n             * @example\n             * const pino = require('pino')({\n             *   serializers: {\n             *     custom: myCustomSerializer,\n             *     another: anotherSerializer\n             *   },\n             *   browser: {\n             *     serialize: ['custom']\n             *   }\n             * })\n             * // following will apply myCustomSerializer to the custom property,\n             * // but will not apply anotherSerializer to another key\n             * pino.info({custom: 'a', another: 'b'})\n             *\n             * @example\n             * const pino = require('pino')({\n             *   serializers: {\n             *     custom: myCustomSerializer,\n             *     another: anotherSerializer\n             *   },\n             *   browser: {\n             *     serialize: ['!stdSerializers.err', 'custom'] //will not serialize Errors, will serialize `custom` keys\n             *   }\n             * })\n             */\n            serialize?: boolean | string[];\n\n            /**\n             * Options for transmission of logs.\n             *\n             * @example\n             * const pino = require('pino')({\n             *   browser: {\n             *     transmit: {\n             *       level: 'warn',\n             *       send: function (level, logEvent) {\n             *         if (level === 'warn') {\n             *           // maybe send the logEvent to a separate endpoint\n             *           // or maybe analyse the messages further before sending\n             *         }\n             *         // we could also use the `logEvent.level.value` property to determine\n             *         // numerical value\n             *         if (logEvent.level.value >= 50) { // covers error and fatal\n             *\n             *           // send the logEvent somewhere\n             *         }\n             *       }\n             *     }\n             *   }\n             * })\n             */\n            transmit?: {\n                /**\n                 * Specifies the minimum level (inclusive) of when the `send` function should be called, if not supplied\n                 * the `send` function will be called based on the main logging `level` (set via `options.level`,\n                 * defaulting to `info`).\n                 */\n                level?: LevelOrString;\n                /**\n                 * Remotely record log messages.\n                 *\n                 * @description Called after writing the log message.\n                 */\n                send: (level: Level, logEvent: LogEvent) => void;\n            };\n            /**\n             * The disabled option will disable logging in browser if set to true, by default it is set to false.\n             *\n             * @example\n             * const pino = require('pino')({browser: {disabled: true}})\n             */\n            disabled?: boolean;\n        };\n        /**\n         * key-value object added as child logger to each log line. If set to null the base child logger is not added\n         */\n        base?: { [key: string]: any } | null;\n\n        /**\n         * An object containing functions for formatting the shape of the log lines.\n         * These functions should return a JSONifiable object and should never throw.\n         * These functions allow for full customization of the resulting log lines.\n         * For example, they can be used to change the level key name or to enrich the default metadata.\n         */\n        formatters?: {\n            /**\n             * Changes the shape of the log level.\n             * The default shape is { level: number }.\n             * The function takes two arguments, the label of the level (e.g. 'info') and the numeric value (e.g. 30).\n             */\n            level?: (label: string, number: number) => object;\n            /**\n             * Changes the shape of the bindings.\n             * The default shape is { pid, hostname }.\n             * The function takes a single argument, the bindings object.\n             * It will be called every time a child logger is created.\n             */\n            bindings?: (bindings: Bindings) => object;\n            /**\n             * Changes the shape of the log object.\n             * This function will be called every time one of the log methods (such as .info) is called.\n             * All arguments passed to the log method, except the message, will be pass to this function.\n             * By default it does not change the shape of the log object.\n             */\n            log?: (object: Record<string, unknown>) => Record<string, unknown>;\n        };\n\n        /**\n         * A string that would be prefixed to every message (and child message)\n         */\n        msgPrefix?: string\n\n        /**\n         * An object mapping to hook functions. Hook functions allow for customizing internal logger operations.\n         * Hook functions must be synchronous functions.\n         */\n        hooks?: {\n            /**\n             * Allows for manipulating the parameters passed to logger methods. The signature for this hook is\n             * logMethod (args, method, level) {}, where args is an array of the arguments that were passed to the\n             * log method and method is the log method itself, and level is the log level. This hook must invoke the method function by\n             * using apply, like so: method.apply(this, newArgumentsArray).\n             */\n            logMethod?: (this: Logger, args: Parameters<LogFn>, method: LogFn, level: number) => void;\n\n            /**\n             * Allows for manipulating the stringified JSON log output just before writing to various transports.\n             * This function must return a string and must be valid JSON.\n             */\n            streamWrite?: (s: string) => string;\n        };\n\n        /**\n         * Stringification limit at a specific nesting depth when logging circular object. Default: `5`.\n         */\n         depthLimit?: number\n\n         /**\n          * Stringification limit of properties/elements when logging a specific object/array with circular references. Default: `100`.\n          */\n          edgeLimit?: number\n\n        /**\n         * Optional child creation callback.\n         */\n        onChild?: OnChildCallback<CustomLevels>;\n\n        /**\n         * logs newline delimited JSON with `\\r\\n` instead of `\\n`. Default: `false`.\n         */\n        crlf?: boolean;\n    }\n\n    interface ChildLoggerOptions<CustomLevels extends string = never> {\n        level?: LevelOrString;\n        serializers?: { [key: string]: SerializerFn };\n        customLevels?: { [level in CustomLevels]: number };\n        formatters?: {\n            level?: (label: string, number: number) => object;\n            bindings?: (bindings: Bindings) => object;\n            log?: (object: object) => object;\n        };\n        redact?: string[] | redactOptions;\n        msgPrefix?: string\n    }\n\n    /**\n     * A data structure representing a log message, it represents the arguments passed to a logger statement, the level\n     * at which they were logged and the hierarchy of child bindings.\n     *\n     * @description By default serializers are not applied to log output in the browser, but they will always be applied\n     * to `messages` and `bindings` in the `logEvent` object. This allows  us to ensure a consistent format for all\n     * values between server and client.\n     */\n    interface LogEvent {\n        /**\n         * Unix epoch timestamp in milliseconds, the time is taken from the moment the logger method is called.\n         */\n        ts: number;\n        /**\n         * All arguments passed to logger method, (for instance `logger.info('a', 'b', 'c')` would result in `messages`\n         * array `['a', 'b', 'c']`).\n         */\n        messages: any[];\n        /**\n         * Represents each child logger (if any), and the relevant bindings.\n         *\n         * @description For instance, given `logger.child({a: 1}).child({b: 2}).info({c: 3})`, the bindings array would\n         * hold `[{a: 1}, {b: 2}]` and the `messages` array would be `[{c: 3}]`. The `bindings` are ordered according to\n         * their position in the child logger hierarchy, with the lowest index being the top of the hierarchy.\n         */\n        bindings: Bindings[];\n        /**\n         * Holds the `label` (for instance `info`), and the corresponding numerical `value` (for instance `30`).\n         * This could be important in cases where client side level values and labels differ from server side.\n         */\n        level: {\n            label: string;\n            value: number;\n        };\n    }\n\n\n\n    //// Top level variable (const) exports\n\n    /**\n     * Provides functions for serializing objects common to many projects.\n     */\n    export const stdSerializers: typeof pinoStdSerializers;\n\n    /**\n     * Holds the current log format version (as output in the v property of each log record).\n     */\n    export const levels: LevelMapping;\n    export const symbols: {\n        readonly setLevelSym: unique symbol;\n        readonly getLevelSym: unique symbol;\n        readonly levelValSym: unique symbol;\n        readonly useLevelLabelsSym: unique symbol;\n        readonly mixinSym: unique symbol;\n        readonly lsCacheSym: unique symbol;\n        readonly chindingsSym: unique symbol;\n        readonly parsedChindingsSym: unique symbol;\n        readonly asJsonSym: unique symbol;\n        readonly writeSym: unique symbol;\n        readonly serializersSym: unique symbol;\n        readonly redactFmtSym: unique symbol;\n        readonly timeSym: unique symbol;\n        readonly timeSliceIndexSym: unique symbol;\n        readonly streamSym: unique symbol;\n        readonly stringifySym: unique symbol;\n        readonly stringifySafeSym: unique symbol;\n        readonly stringifiersSym: unique symbol;\n        readonly endSym: unique symbol;\n        readonly formatOptsSym: unique symbol;\n        readonly messageKeySym: unique symbol;\n        readonly errorKeySym: unique symbol;\n        readonly nestedKeySym: unique symbol;\n        readonly wildcardFirstSym: unique symbol;\n        readonly needsMetadataGsym: unique symbol;\n        readonly useOnlyCustomLevelsSym: unique symbol;\n        readonly formattersSym: unique symbol;\n        readonly hooksSym: unique symbol;\n    };\n\n    /**\n     * Exposes the Pino package version. Also available on the logger instance.\n     */\n    export const version: string;\n\n    /**\n     * Provides functions for generating the timestamp property in the log output. You can set the `timestamp` option during\n     * initialization to one of these functions to adjust the output format. Alternatively, you can specify your own time function.\n     * A time function must synchronously return a string that would be a valid component of a JSON string. For example,\n     * the default function returns a string like `,\"time\":1493426328206`.\n     */\n    export const stdTimeFunctions: {\n        /**\n         * The default time function for Pino. Returns a string like `,\"time\":1493426328206`.\n         */\n        epochTime: TimeFn;\n        /*\n            * Returns the seconds since Unix epoch\n            */\n        unixTime: TimeFn;\n        /**\n         * Returns an empty string. This function is used when the `timestamp` option is set to `false`.\n         */\n        nullTime: TimeFn;\n        /*\n            * Returns ISO 8601-formatted time in UTC\n            */\n        isoTime: TimeFn;\n    };\n\n    //// Exported functions\n\n    /**\n     * Create a Pino Destination instance: a stream-like object with significantly more throughput (over 30%) than a standard Node.js stream.\n     * @param [dest]: The `destination` parameter, can be a file descriptor, a file path, or an object with `dest` property pointing to a fd or path.\n     *                An ordinary Node.js `stream` file descriptor can be passed as the destination (such as the result of `fs.createWriteStream`)\n     *                but for peak log writing performance, it is strongly recommended to use `pino.destination` to create the destination stream.\n     * @returns A Sonic-Boom  stream to be used as destination for the pino function\n     */\n    export function destination(\n        dest?: number | object | string | DestinationStream | NodeJS.WritableStream | SonicBoomOpts,\n    ): SonicBoom;\n\n    export function transport<TransportOptions = Record<string, any>>(\n        options: TransportSingleOptions<TransportOptions> | TransportMultiOptions<TransportOptions> | TransportPipelineOptions<TransportOptions>\n    ): ThreadStream\n\n    export function multistream<TLevel = Level>(\n        streamsArray: (DestinationStream | StreamEntry<TLevel>)[] | DestinationStream | StreamEntry<TLevel>,\n        opts?: MultiStreamOptions\n    ): MultiStreamRes<TLevel>\n}\n\n//// Callable default export\n\n/**\n * @param [optionsOrStream]: an options object or a writable stream where the logs will be written. It can also receive some log-line metadata, if the\n * relative protocol is enabled. Default: process.stdout\n * @returns a new logger instance.\n */\ndeclare function pino<CustomLevels extends string = never, UseOnlyCustomLevels extends boolean = boolean>(optionsOrStream?: LoggerOptions<CustomLevels, UseOnlyCustomLevels> | DestinationStream): Logger<CustomLevels, UseOnlyCustomLevels>;\n\n/**\n * @param [options]: an options object\n * @param [stream]: a writable stream where the logs will be written. It can also receive some log-line metadata, if the\n * relative protocol is enabled. Default: process.stdout\n * @returns a new logger instance.\n */\ndeclare function pino<CustomLevels extends string = never, UseOnlyCustomLevels extends boolean = boolean>(options: LoggerOptions<CustomLevels, UseOnlyCustomLevels>, stream?: DestinationStream | undefined): Logger<CustomLevels, UseOnlyCustomLevels>;\n\n\n// Pass through all the top-level exports, allows `import {version} from \"pino\"`\n// Constants and functions\nexport const destination: typeof pino.destination;\nexport const transport: typeof pino.transport;\nexport const multistream: typeof pino.multistream;\nexport const levels: typeof pino.levels;\nexport const stdSerializers: typeof pino.stdSerializers;\nexport const stdTimeFunctions: typeof pino.stdTimeFunctions;\nexport const symbols: typeof pino.symbols;\nexport const version: typeof pino.version;\n\n// Types\nexport type Bindings = pino.Bindings;\nexport type DestinationStreamWithMetadata = pino.DestinationStreamWithMetadata;\nexport type Level = pino.Level;\nexport type LevelOrString = pino.LevelOrString;\nexport type LevelWithSilent = pino.LevelWithSilent;\nexport type LevelWithSilentOrString = pino.LevelWithSilentOrString;\nexport type LevelChangeEventListener<CustomLevels extends string> = pino.LevelChangeEventListener<CustomLevels>;\nexport type LogDescriptor = pino.LogDescriptor;\nexport type Logger<CustomLevels extends string = never, UseOnlyCustomLevels extends boolean = boolean> = pino.Logger<CustomLevels, UseOnlyCustomLevels>;\nexport type SerializedError = pino.SerializedError;\nexport type SerializerFn = pino.SerializerFn;\nexport type SerializedRequest = pino.SerializedRequest;\nexport type SerializedResponse = pino.SerializedResponse;\nexport type WriteFn = pino.WriteFn;\n\n// Interfaces\nexport interface BaseLogger extends pino.BaseLogger {}\nexport interface ChildLoggerOptions<CustomLevels extends string = never> extends pino.ChildLoggerOptions<CustomLevels> {}\nexport interface DestinationStream extends pino.DestinationStream {}\nexport interface LevelMapping extends pino.LevelMapping {}\nexport interface LogEvent extends pino.LogEvent {}\nexport interface LogFn extends pino.LogFn {}\nexport interface LoggerOptions<CustomLevels extends string = never, UseOnlyCustomLevels extends boolean = boolean> extends pino.LoggerOptions<CustomLevels, UseOnlyCustomLevels> {}\nexport interface MultiStreamOptions extends pino.MultiStreamOptions {}\nexport interface MultiStreamRes<TLevel = Level> extends pino.MultiStreamRes<TLevel> {}\nexport interface StreamEntry<TLevel = Level> extends pino.StreamEntry<TLevel> {}\nexport interface TransportBaseOptions extends pino.TransportBaseOptions {}\nexport interface TransportMultiOptions extends pino.TransportMultiOptions {}\nexport interface TransportPipelineOptions extends pino.TransportPipelineOptions {}\nexport interface TransportSingleOptions extends pino.TransportSingleOptions {}\nexport interface TransportTargetOptions extends pino.TransportTargetOptions {}\n\n// Bundle all top level exports into a namespace, then export namespace both\n// as default (`import pino from \"pino\"`) and named variable\n// (`import {pino} from \"pino\"`).\nexport { pino as default, pino };\n// Export just the type side of the namespace as \"P\", allows\n// `import {P} from \"pino\"; const log: P.Logger;`.\n// (Legacy support for early 7.x releases, remove in 8.x.)\n    export type { pino as P };\n\n"
        },
        {
          "name": "pino.js",
          "type": "blob",
          "size": 6.1708984375,
          "content": "'use strict'\n\nconst os = require('node:os')\nconst stdSerializers = require('pino-std-serializers')\nconst caller = require('./lib/caller')\nconst redaction = require('./lib/redaction')\nconst time = require('./lib/time')\nconst proto = require('./lib/proto')\nconst symbols = require('./lib/symbols')\nconst { configure } = require('safe-stable-stringify')\nconst { assertDefaultLevelFound, mappings, genLsCache, genLevelComparison, assertLevelComparison } = require('./lib/levels')\nconst { DEFAULT_LEVELS, SORTING_ORDER } = require('./lib/constants')\nconst {\n  createArgsNormalizer,\n  asChindings,\n  buildSafeSonicBoom,\n  buildFormatters,\n  stringify,\n  normalizeDestFileDescriptor,\n  noop\n} = require('./lib/tools')\nconst { version } = require('./lib/meta')\nconst {\n  chindingsSym,\n  redactFmtSym,\n  serializersSym,\n  timeSym,\n  timeSliceIndexSym,\n  streamSym,\n  stringifySym,\n  stringifySafeSym,\n  stringifiersSym,\n  setLevelSym,\n  endSym,\n  formatOptsSym,\n  messageKeySym,\n  errorKeySym,\n  nestedKeySym,\n  mixinSym,\n  levelCompSym,\n  useOnlyCustomLevelsSym,\n  formattersSym,\n  hooksSym,\n  nestedKeyStrSym,\n  mixinMergeStrategySym,\n  msgPrefixSym\n} = symbols\nconst { epochTime, nullTime } = time\nconst { pid } = process\nconst hostname = os.hostname()\nconst defaultErrorSerializer = stdSerializers.err\nconst defaultOptions = {\n  level: 'info',\n  levelComparison: SORTING_ORDER.ASC,\n  levels: DEFAULT_LEVELS,\n  messageKey: 'msg',\n  errorKey: 'err',\n  nestedKey: null,\n  enabled: true,\n  base: { pid, hostname },\n  serializers: Object.assign(Object.create(null), {\n    err: defaultErrorSerializer\n  }),\n  formatters: Object.assign(Object.create(null), {\n    bindings (bindings) {\n      return bindings\n    },\n    level (label, number) {\n      return { level: number }\n    }\n  }),\n  hooks: {\n    logMethod: undefined,\n    streamWrite: undefined\n  },\n  timestamp: epochTime,\n  name: undefined,\n  redact: null,\n  customLevels: null,\n  useOnlyCustomLevels: false,\n  depthLimit: 5,\n  edgeLimit: 100\n}\n\nconst normalize = createArgsNormalizer(defaultOptions)\n\nconst serializers = Object.assign(Object.create(null), stdSerializers)\n\nfunction pino (...args) {\n  const instance = {}\n  const { opts, stream } = normalize(instance, caller(), ...args)\n\n  if (opts.level && typeof opts.level === 'string' && DEFAULT_LEVELS[opts.level.toLowerCase()] !== undefined) opts.level = opts.level.toLowerCase()\n\n  const {\n    redact,\n    crlf,\n    serializers,\n    timestamp,\n    messageKey,\n    errorKey,\n    nestedKey,\n    base,\n    name,\n    level,\n    customLevels,\n    levelComparison,\n    mixin,\n    mixinMergeStrategy,\n    useOnlyCustomLevels,\n    formatters,\n    hooks,\n    depthLimit,\n    edgeLimit,\n    onChild,\n    msgPrefix\n  } = opts\n\n  const stringifySafe = configure({\n    maximumDepth: depthLimit,\n    maximumBreadth: edgeLimit\n  })\n\n  const allFormatters = buildFormatters(\n    formatters.level,\n    formatters.bindings,\n    formatters.log\n  )\n\n  const stringifyFn = stringify.bind({\n    [stringifySafeSym]: stringifySafe\n  })\n  const stringifiers = redact ? redaction(redact, stringifyFn) : {}\n  const formatOpts = redact\n    ? { stringify: stringifiers[redactFmtSym] }\n    : { stringify: stringifyFn }\n  const end = '}' + (crlf ? '\\r\\n' : '\\n')\n  const coreChindings = asChindings.bind(null, {\n    [chindingsSym]: '',\n    [serializersSym]: serializers,\n    [stringifiersSym]: stringifiers,\n    [stringifySym]: stringify,\n    [stringifySafeSym]: stringifySafe,\n    [formattersSym]: allFormatters\n  })\n\n  let chindings = ''\n  if (base !== null) {\n    if (name === undefined) {\n      chindings = coreChindings(base)\n    } else {\n      chindings = coreChindings(Object.assign({}, base, { name }))\n    }\n  }\n\n  const time = (timestamp instanceof Function)\n    ? timestamp\n    : (timestamp ? epochTime : nullTime)\n  const timeSliceIndex = time().indexOf(':') + 1\n\n  if (useOnlyCustomLevels && !customLevels) throw Error('customLevels is required if useOnlyCustomLevels is set true')\n  if (mixin && typeof mixin !== 'function') throw Error(`Unknown mixin type \"${typeof mixin}\" - expected \"function\"`)\n  if (msgPrefix && typeof msgPrefix !== 'string') throw Error(`Unknown msgPrefix type \"${typeof msgPrefix}\" - expected \"string\"`)\n\n  assertDefaultLevelFound(level, customLevels, useOnlyCustomLevels)\n  const levels = mappings(customLevels, useOnlyCustomLevels)\n\n  if (typeof stream.emit === 'function') {\n    stream.emit('message', { code: 'PINO_CONFIG', config: { levels, messageKey, errorKey } })\n  }\n\n  assertLevelComparison(levelComparison)\n  const levelCompFunc = genLevelComparison(levelComparison)\n\n  Object.assign(instance, {\n    levels,\n    [levelCompSym]: levelCompFunc,\n    [useOnlyCustomLevelsSym]: useOnlyCustomLevels,\n    [streamSym]: stream,\n    [timeSym]: time,\n    [timeSliceIndexSym]: timeSliceIndex,\n    [stringifySym]: stringify,\n    [stringifySafeSym]: stringifySafe,\n    [stringifiersSym]: stringifiers,\n    [endSym]: end,\n    [formatOptsSym]: formatOpts,\n    [messageKeySym]: messageKey,\n    [errorKeySym]: errorKey,\n    [nestedKeySym]: nestedKey,\n    // protect against injection\n    [nestedKeyStrSym]: nestedKey ? `,${JSON.stringify(nestedKey)}:{` : '',\n    [serializersSym]: serializers,\n    [mixinSym]: mixin,\n    [mixinMergeStrategySym]: mixinMergeStrategy,\n    [chindingsSym]: chindings,\n    [formattersSym]: allFormatters,\n    [hooksSym]: hooks,\n    silent: noop,\n    onChild,\n    [msgPrefixSym]: msgPrefix\n  })\n\n  Object.setPrototypeOf(instance, proto())\n\n  genLsCache(instance)\n\n  instance[setLevelSym](level)\n\n  return instance\n}\n\nmodule.exports = pino\n\nmodule.exports.destination = (dest = process.stdout.fd) => {\n  if (typeof dest === 'object') {\n    dest.dest = normalizeDestFileDescriptor(dest.dest || process.stdout.fd)\n    return buildSafeSonicBoom(dest)\n  } else {\n    return buildSafeSonicBoom({ dest: normalizeDestFileDescriptor(dest), minLength: 0 })\n  }\n}\n\nmodule.exports.transport = require('./lib/transport')\nmodule.exports.multistream = require('./lib/multistream')\n\nmodule.exports.levels = mappings()\nmodule.exports.stdSerializers = serializers\nmodule.exports.stdTimeFunctions = Object.assign({}, time)\nmodule.exports.symbols = symbols\nmodule.exports.version = version\n\n// Enables default and name export with TypeScript and Babel\nmodule.exports.default = pino\nmodule.exports.pino = pino\n"
        },
        {
          "name": "pretty-demo.png",
          "type": "blob",
          "size": 14.18359375,
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.240234375,
          "content": "{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"lib\": [ \"es2015\", \"dom\" ],\n    \"module\": \"commonjs\",\n    \"noEmit\": true,\n    \"strict\": true,\n    \"esModuleInterop\": true,\n  },\n  \"exclude\": [\n    \"./test/types/*.test-d.ts\",\n    \"./*.d.ts\"\n  ]\n}\n"
        }
      ]
    }
  ]
}