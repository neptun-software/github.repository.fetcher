{
  "metadata": {
    "timestamp": 1736563305977,
    "page": 297,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rabbitmq/rabbitmq-server",
      "stars": 12423,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".bazelignore",
          "type": "blob",
          "size": 0.1396484375,
          "content": "# .bazelignore behaves differently than .gitignore\n# https://github.com/bazelbuild/bazel/issues/7093\n.erlang.mk\ndeps/osiris\ndeps/ra\nextra_deps\n"
        },
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 0.708984375,
          "content": "build --enable_bzlmod\n\nbuild --registry=https://bcr.bazel.build/\nbuild --registry=https://raw.githubusercontent.com/rabbitmq/bazel-central-registry/erlang-packages/\n\nbuild --incompatible_strict_action_env\nbuild --local_test_jobs=1\n\nbuild --flag_alias=erlang_home=@rules_erlang//:erlang_home\nbuild --flag_alias=erlang_version=@rules_erlang//:erlang_version\nbuild --flag_alias=elixir_home=@rules_elixir//:elixir_home\nbuild --flag_alias=test_build=//:enable_test_build\n\nbuild --test_timeout=7200\n\nbuild --combined_report=lcov\n\n# Try importing a user specific .bazelrc\n# You can create your own by copying and editing the template-user.bazelrc template:\n# cp template-user.bazelrc user.bazelrc\ntry-import %workspace%/user.bazelrc\n"
        },
        {
          "name": ".bazelversion",
          "type": "blob",
          "size": 0.005859375,
          "content": "7.4.1\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.005859375,
          "content": "/deps\n"
        },
        {
          "name": ".elp.toml",
          "type": "blob",
          "size": 0.037109375,
          "content": "[build_info]\napps = \"deps/*\"\ndeps = \"\""
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.3076171875,
          "content": "# Revert \"Format MQTT code with erlfmt\"\n209f23fa2f58e0240116b3e8e5be9cd54d34b569\n# Format MQTT code with erlfmt\n1de9fcf582def91d1cee6bea457dd24e8a53a431\n# Remove unsed imports\ncfa3de4b2b1a07e9f4ef90d0aa6b22252238bc47\n# (c) bump 2025\nd56522a8e3f22430fd7424f86ebda4b011c03a6e\n968eefa1bb048e2857a3b2617234b52c9a344767\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.765625,
          "content": "# Editor/OS temporary and unwanted files.\n*~\n\\#*\n.#*\n.sw?\n.*.sw?\n*.orig\n*.tmp\n.idea/\n.tool-versions\n.vscode/\n.DS_Store\n\n# Erlang.mk temporary files and outputs.\n*.plt\n*.d\n.erlang.mk/\ncover/\ndocs/*.html\nebin/\nlogs/\n**/test/*.beam\n**/test/ct.cover.spec\nct.set-*.spec\n\nelvis\n\n# Dependencies excluding RabbitMQ applications.\n/deps/*\n!/deps/rabbit/\n!/deps/rabbit_common/\n!/deps/amqp_client/\n!/deps/amqp10_client/\n!/deps/amqp10_common/\n!/deps/oauth2_client/\n!/deps/rabbitmq_amqp1_0/\n!/deps/rabbitmq_amqp_client/\n!/deps/rabbitmq_auth_backend_cache/\n!/deps/rabbitmq_auth_backend_http/\n!/deps/rabbitmq_auth_backend_ldap/\n!/deps/rabbitmq_auth_backend_oauth2/\n!/deps/rabbitmq_auth_mechanism_ssl/\n!/deps/rabbitmq_aws/\n!/deps/rabbitmq_cli/\n!/deps/rabbitmq_codegen/\n!/deps/rabbitmq_consistent_hash_exchange/\n!/deps/rabbitmq_ct_helpers/\n!/deps/rabbitmq_ct_client_helpers/\n!/deps/rabbitmq_event_exchange/\n!/deps/rabbitmq_federation/\n!/deps/rabbitmq_federation_management/\n!/deps/rabbitmq_federation_prometheus/\n!/deps/rabbitmq_jms_topic_exchange/\n!/deps/rabbitmq_management/\n!/deps/rabbitmq_management_agent/\n!/deps/rabbitmq_mqtt/\n!/deps/rabbitmq_peer_discovery_aws/\n!/deps/rabbitmq_peer_discovery_common/\n!/deps/rabbitmq_peer_discovery_consul/\n!/deps/rabbitmq_peer_discovery_etcd/\n!/deps/rabbitmq_peer_discovery_k8s/\n!/deps/rabbitmq_prelaunch/\n!/deps/rabbitmq_prometheus/\n!/deps/rabbitmq_random_exchange/\n!/deps/rabbitmq_recent_history_exchange/\n!/deps/rabbitmq_sharding/\n!/deps/rabbitmq_shovel/\n!/deps/rabbitmq_shovel_management/\n!/deps/rabbitmq_shovel_prometheus/\n!/deps/rabbitmq_stomp/\n!/deps/rabbitmq_stream/\n!/deps/rabbitmq_stream_common/\n!/deps/rabbitmq_stream_management/\n!/deps/rabbitmq_stream_prometheus/\n!/deps/rabbitmq_top/\n!/deps/rabbitmq_tracing/\n!/deps/rabbitmq_trust_store/\n!/deps/rabbitmq_web_dispatch/\n!/deps/rabbitmq_web_mqtt/\n!/deps/rabbitmq_web_mqtt_examples/\n!/deps/rabbitmq_web_stomp/\n!/deps/rabbitmq_web_stomp_examples/\n!/deps/trust_store_http/\n\n# Rebar3/Elixir temporary files and outputs.\n.rebar3/\n_build/\n_checkouts/\nrebar3.crashdump\n\n# Automatically generated rebar.config files.\nrebar.config\n!/deps/amqp10_common/rebar.config\n!/rebar.config\n\n# Bazel.\n.bazelrc\nuser.bazelrc\nbazel-*\nextra_deps/\n\n# Erlang/OTP unwanted files.\n.erlang.cookie\nerl_crash.dump\nMnesiaCore.*\nMnesia.rmq-ct-*\n\n# RabbitMQ Makefiles temporary files and outputs.\n*.lock\nescript/\nplugins/\nsbin/\ngit-revisions.txt\n\nPACKAGES/\nrabbitmq-server-*/\nrabbitmq-server-*.tar.gz\nrabbitmq-server-*.tar.bz2\nrabbitmq-server-*.tar.xz\nrabbitmq-server-*.zip\n\n# Trace tools output.\n*-ttb\n*.ti\n*.lz4*\ntraces*\ncallgrind.out*\ncallgraph.dot*\n\n# Unknown. If you know in which category this belongs to,\n# please move it there. Thank you.\n.envrc\n.exrc\n.ignore\n/genhtml/\n\n# @todo Should be moved to rabbitmq_stomp directly.\ndeps/rabbitmq_stomp/test/python_SUITE_data/src/deps\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.037109375,
          "content": "Rin Kuryloski <kuryloskip@vmware.com>\n"
        },
        {
          "name": "BAZEL.md",
          "type": "blob",
          "size": 4.4453125,
          "content": "# [Bazel](https://www.bazel.build/) build\n\nFrom https://docs.bazel.build/versions/master/bazel-overview.html\n> Bazel is an open-source build and test tool similar to Make, Maven, and Gradle. It uses a human-readable, high-level build language. Bazel supports projects in multiple languages and builds outputs for multiple platforms. Bazel supports large codebases across multiple repositories, and large numbers of users.\n\n## Why RabbitMQ + Bazel?\n\nRabbitMQ, Tier1 plugins included, is a large codebase. The developer experience benefits from fast incremental compilation.\n\nMore importantly, RabbitMQ's test suite is large and takes hours if run on a single machine. Bazel allows tests to be run in parallel on a large number of remote workers if needed, and furthermore uses cached test results when branches of the codebase remain unchanged.\n\nBazel does not provide built in Erlang or Elixir support, nor is there an available library of bazel rules. Therefore, we have defined our own rules in https://github.com/rabbitmq/bazel-erlang. Elixir compilation is handled as a special case within this repository. To use these rules, the location of your Erlang and Elixir installations must be indicated to the build (see below).\n\nWhile most of work for running tests happens in Bazel, the suite still makes use of some external tools for commands, notably gnu `make` and `openssl`. Ideally we could bring all of these tools under bazel, so that the only tool needed would be `bazel` or `bazelisk`, but that will take some time.\n\n## Running Tests\n\n### Install Bazelisk\n\nOn **macOS**:\n\n`brew install bazelisk`\n\nOtherwise:\n\nhttps://docs.bazel.build/versions/master/install-bazelisk.html\n\n### Create `user.bazelrc`\n\nCreate a `user.bazelrc` by making a copy of `user-template.bazelrc` and updating the paths in the first few lines.\n\n### Run the broker\n\n`bazel run broker`\n\nYou can set different environment variables to control some configuration aspects, like this:\n\n```\n    RABBITMQ_CONFIG_FILES=/path/to/conf.d \\\n    RABBITMQ_NODENAME=<node>@localhost \\\n    RABBITMQ_NODE_PORT=7000 \\\n    bazel run broker\n```\n\nThis will start RabbitMQ with configs being read from the provided directory. It also will start a node with a given node name, and with all listening ports calculated from the given one - this way you can start non-conflicting rabbits even from different checkouts on a single machine.\n\n\n### Running tests\n\nMany rabbit tests spawn single or clustered rabbit nodes, and therefore it's best to run test suites sequentially on a single machine. Hence the `build --local_test_jobs=1` flag used in `.bazelrc`. Additionally, it may be reasonable to disable test sharding and stream test output when running tests locally with `--test_output=streamed` as an additional argument (to just disable sharding, but not stream output, use `--test_sharding_strategy=disabled`). Naturally that restriction does not hold if utilizing remote execution (as is the case for RabbitMQ's CI pipelines).\n\nErlang Common Test logs will not be placed in the logs directory when run with bazel. They can be found under `bazel-testlogs`. For instance, those of the rabbit application's backing_queue suite will be under `bazel-testlogs/deps/rabbit/backing_queue_SUITE/test.outputs/`.\n\n### Run all tests\n\nNote: This takes quite some time on a single machine.\n\n`bazel test //...`\n\n### Run tests in a 'package' and its 'subpackages'\n\n**rabbit** is an appropriate example because it encloses the **rabbitmq_prelaunch** application.\n\n`bazel test deps/rabbit/...`\n\n### Run tests for a specific 'package'\n\n`bazel test deps/rabbit_common:all`\n\n### Run an individual common test suite\n\n`bazel test //deps/rabbit:lazy_queue_SUITE`\n\n## Add/update an external dependency\n\n### from hex.pm\n\n1. `bazel run gazelle-update-repos -- hex.pm/accept@0.3.5` to generate/update `bazel/BUILD.accept`\n1. Add/update the entry in MODULE.bazel\n\n### from github \n\n1. `bazel run gazelle-update-repos -- --testonly github.com/extend/ct_helper@master`\n1. Add/update the entry in MODULE.bazel\n\n## Update BUILD files\n\n`bazel run gazelle`\n\n## Regenerate moduleindex.yaml\n\n`bazel run :moduleindex > moduleindex.yaml`\n\n## Additional Useful Commands\n\n- Format all bazel files consistently (requires [buildifier](https://github.com/bazelbuild/buildtools/blob/master/buildifier/README.md)):\n\n  `buildifier -r .`\n\n- Remove unused load statements from BUILD.bazel files (requires [buildozer](https://github.com/bazelbuild/buildtools/blob/master/buildozer/README.md)):\n\n  `buildozer 'fix unusedLoads' //...:__pkg__`\n"
        },
        {
          "name": "BUILD.bats",
          "type": "blob",
          "size": 0.1435546875,
          "content": "filegroup(\n    name = \"bin_dir\",\n    srcs = glob([\n        \"bin/**/*\",\n        \"libexec/**/*\",\n    ]),\n    visibility = [\"//visibility:public\"],\n)\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 8.248046875,
          "content": "load(\n    \"@bazel_skylib//rules:common_settings.bzl\",\n    \"bool_flag\",\n)\nload(\"@rules_pkg//pkg:mappings.bzl\", \"pkg_files\")\nload(\"@bazel_gazelle//:def.bzl\", \"gazelle\")\nload(\"@rules_erlang//gazelle:def.bzl\", \"GAZELLE_ERLANG_RUNTIME_DEPS\")\nload(\"@rules_erlang//:erlang_bytecode2.bzl\", \"erlc_opts\")\nload(\"@rules_erlang//:dialyze.bzl\", \"DEFAULT_PLT_APPS\", \"plt\")\nload(\"@rules_erlang//:shell.bzl\", \"shell\")\nload(\"@rules_erlang//:erl_eval.bzl\", \"erl_eval\")\nload(\"@rules_erlang//gazelle:moduleindex.bzl\", \"moduleindex\")\nload(\"@rules_elixir//:iex_eval.bzl\", \"iex_eval\")\nload(\":rabbitmq_home.bzl\", \"rabbitmq_home\")\nload(\":rabbitmq_run.bzl\", \"rabbitmq_run\", \"rabbitmq_run_command\")\nload(\":rabbitmqctl.bzl\", \"rabbitmqctl\")\nload(\":dist.bzl\", \"package_generic_unix\", \"source_archive\")\nload(\n    \":rabbitmq.bzl\",\n    \"RABBITMQ_ERLC_OPTS\",\n    \"RABBITMQ_TEST_ERLC_OPTS\",\n    \"all_plugins\",\n    \"without\",\n)\n\nexports_files([\n    \"scripts/bazel/rabbitmq-run.sh\",\n    \"scripts/bazel/rabbitmq-run.bat\",\n    \"release-notes\",\n])\n\n# gazelle:exclude .github\n# gazelle:exclude .elixir_ls\n# gazelle:exclude .erlang.mk\n# gazelle:exclude bazel\n# gazelle:exclude bazel-out\n# gazelle:exclude deps/*/priv\n# gazelle:exclude deps/accept\n# gazelle:exclude deps/aten\n# gazelle:exclude deps/base64url\n# gazelle:exclude deps/cowboy\n# gazelle:exclude deps/cowlib\n# gazelle:exclude deps/credentials_obfuscation\n# gazelle:exclude deps/csv\n# gazelle:exclude deps/cth_styledout\n# gazelle:exclude deps/cuttlefish\n# gazelle:exclude deps/eetcd\n# gazelle:exclude deps/elvis_mk\n# gazelle:exclude deps/enough\n# gazelle:exclude deps/gen_batch_server\n# gazelle:exclude deps/getopt\n# gazelle:exclude deps/gun\n# gazelle:exclude deps/inet_tcp_proxy\n# gazelle:exclude deps/jose\n# gazelle:exclude deps/json\n# gazelle:exclude deps/meck\n# gazelle:exclude deps/observer_cli\n# gazelle:exclude deps/osiris\n# gazelle:exclude deps/prometheus\n# gazelle:exclude deps/proper\n# gazelle:exclude deps/quantile_estimator\n# gazelle:exclude deps/ra\n# gazelle:exclude deps/ranch\n# gazelle:exclude deps/recon\n# gazelle:exclude deps/redbug\n# gazelle:exclude deps/seshat\n# gazelle:exclude deps/stdout_formatter\n# gazelle:exclude deps/syslog\n# gazelle:exclude deps/sysmon_handler\n# gazelle:exclude deps/systemd\n# gazelle:exclude deps/thoas\n# gazelle:exclude deps/*/deps\n# gazelle:exclude deps/*/.erlang.mk\n# gazelle:exclude deps/rabbitmq_cli/_build\n# gazelle:exclude extra_deps\n# gazelle:exclude packaging\n# gazelle:exclude PACKAGES\n# gazelle:exclude plugins\n# gazelle:exclude release-notes\n# gazelle:exclude logs\n# gazelle:erlang_apps_dirs deps\n# gazelle:erlang_skip_rules test_erlang_app\n# gazelle:erlang_skip_rules ct_test\n# gazelle:erlang_generate_beam_files_macro\n# gazelle:erlang_generate_fewer_bytecode_rules\n# gazelle:erlang_app_dep_exclude rabbitmq_cli\n# gazelle:map_kind erlang_app rabbitmq_app //:rabbitmq.bzl\n# gazelle:map_kind assert_suites2 assert_suites //:rabbitmq.bzl\n\n# gazelle:erlang_module_source_lib Elixir.RabbitMQ.CLI.CommandBehaviour:rabbitmq_cli\n\ngazelle(\n    name = \"gazelle\",\n    data = GAZELLE_ERLANG_RUNTIME_DEPS,\n    extra_args = [\n        \"--verbose\",\n    ],\n    gazelle = \"@rules_erlang//gazelle:gazelle_erlang_binary\",\n)\n\ngazelle(\n    name = \"gazelle-update-repos\",\n    command = \"update-repos\",\n    data = GAZELLE_ERLANG_RUNTIME_DEPS,\n    extra_args = [\n        \"--verbose\",\n        \"--build_files_dir=bazel\",\n        \"--recurse_with=gazelle-update-repos\",\n    ],\n    gazelle = \"@rules_erlang//gazelle:gazelle_erlang_binary\",\n)\n\nbool_flag(\n    name = \"enable_test_build\",\n    build_setting_default = False,\n    visibility = [\"//visibility:public\"],\n)\n\nconfig_setting(\n    name = \"test_build\",\n    flag_values = {\n        \"//:enable_test_build\": \"true\",\n    },\n)\n\nplt(\n    name = \"base_plt\",\n    apps = DEFAULT_PLT_APPS + [\n        \"compiler\",\n        \"crypto\",\n    ],  # keep\n    visibility = [\"//visibility:public\"],\n)\n\nPLUGINS = all_plugins(\n    rabbitmq_workspace = \"\",\n)\n\nrabbitmq_home(\n    name = \"broker-home\",\n    plugins = PLUGINS,\n)\n\nrabbitmq_run(\n    name = \"rabbitmq-run\",\n    home = \":broker-home\",\n    visibility = [\"//visibility:public\"],\n)\n\n# Allows us to `bazel run broker`\n# for the equivalent of `make run-broker`\nrabbitmq_run_command(\n    name = \"broker\",\n    rabbitmq_run = \":rabbitmq-run\",\n    subcommand = \"run-broker\",\n)\n\n# Allows us to `bazel run background-broker`\n# to start a broker in the background\nrabbitmq_run_command(\n    name = \"background-broker\",\n    rabbitmq_run = \":rabbitmq-run\",\n    subcommand = \"start-background-broker\",\n)\n\n# Allows us to `bazel run stop-broker`\n# Useful is broker started in the background\nrabbitmq_run_command(\n    name = \"stop-broker\",\n    rabbitmq_run = \":rabbitmq-run\",\n    subcommand = \"stop-node\",\n)\n\n# Allows us to `bazel run start-cluster`\n# for the equivalent of `make start-cluster`\nrabbitmq_run_command(\n    name = \"start-cluster\",\n    rabbitmq_run = \":rabbitmq-run\",\n    subcommand = \"start-cluster\",\n)\n\n# Allows us to `bazel run stop-cluster`\n# for the equivalent of `make stop-cluster`\nrabbitmq_run_command(\n    name = \"stop-cluster\",\n    rabbitmq_run = \":rabbitmq-run\",\n    subcommand = \"stop-cluster\",\n)\n\n# `bazel run rabbitmqctl`\nrabbitmqctl(\n    name = \"rabbitmqctl\",\n    home = \":broker-home\",\n    visibility = [\"//visibility:public\"],\n)\n\nrabbitmqctl(\n    name = \"rabbitmq-diagnostics\",\n    home = \":broker-home\",\n)\n\nrabbitmqctl(\n    name = \"rabbitmq-plugins\",\n    home = \":broker-home\",\n)\n\nrabbitmqctl(\n    name = \"rabbitmq-streams\",\n    home = \":broker-home\",\n)\n\nrabbitmqctl(\n    name = \"rabbitmq-queues\",\n    home = \":broker-home\",\n)\n\nrabbitmqctl(\n    name = \"rabbitmq-upgrade\",\n    home = \":broker-home\",\n)\n\nshell(\n    name = \"repl\",\n    deps = PLUGINS,\n)\n\nerl_eval(\n    name = \"otp_version\",\n    outs = [\"otp_version.txt\"],\n    expression = \"\"\"{ok, Version} = file:read_file(filename:join([code:root_dir(), \"releases\", erlang:system_info(otp_release), \"OTP_VERSION\"])), file:write_file(os:getenv(\"OUTS\"), Version), halt().\"\"\",\n    visibility = [\"//visibility:public\"],\n)\n\niex_eval(\n    name = \"elixir_version\",\n    outs = [\"elixir_version.txt\"],\n    expression = \"\"\"File.write!(System.get_env(\"OUTS\"), System.version()); System.halt()\"\"\",\n    visibility = [\"//visibility:public\"],\n)\n\nfilegroup(\n    name = \"root-licenses\",\n    srcs = glob([\"LICENSE*\"]),\n    visibility = [\"//visibility:public\"],\n)\n\npkg_files(\n    name = \"scripts-files\",\n    srcs = [\n        \"scripts/bash_autocomplete.sh\",\n        \"scripts/rabbitmq-script-wrapper\",\n        \"scripts/rabbitmqctl-autocomplete.sh\",\n        \"scripts/zsh_autocomplete.sh\",\n    ],\n    prefix = \"scripts\",\n    visibility = [\"//visibility:public\"],\n)\n\npkg_files(\n    name = \"release-notes-files\",\n    srcs = glob([\n        \"release-notes/*.md\",\n        \"release-notes/*.txt\",\n    ]),\n    prefix = \"release-notes\",\n    visibility = [\"//visibility:public\"],\n)\n\npackage_generic_unix(\n    name = \"package-generic-unix\",\n    plugins = PLUGINS,\n)\n\nsource_archive(\n    name = \"source_archive\",\n    plugins = PLUGINS,\n)\n\nmoduleindex(\n    name = \"moduleindex\",\n    testonly = True,\n    apps = PLUGINS + [\n        \"@ct_helper//:erlang_app\",\n        \"@emqtt//:erlang_app\",\n        \"@inet_tcp_proxy_dist//:erlang_app\",\n        \"@meck//:erlang_app\",\n        \"@proper//:erlang_app\",\n        \"//deps/rabbitmq_ct_client_helpers:erlang_app\",\n        \"//deps/rabbitmq_ct_helpers:erlang_app\",\n        \"//deps/trust_store_http:erlang_app\",\n    ],\n    tags = [\"manual\"],\n)\n\nalias(\n    name = \"test-logs\",\n    actual = \"//bazel/util:test-logs\",\n)\n\nalias(\n    name = \"remote-test-logs\",\n    actual = \"//bazel/util:remote-test-logs\",\n)\n\nalias(\n    name = \"test-node-data\",\n    actual = \"//bazel/util:test-node-data\",\n)\n\nalias(\n    name = \"remote-test-node-data\",\n    actual = \"//bazel/util:remote-test-node-data\",\n)\n\nerlc_opts(\n    name = \"erlc_opts\",\n    values = select({\n        \"@rules_erlang//:debug_build\": without(\"+deterministic\", RABBITMQ_ERLC_OPTS),\n        \"//conditions:default\": RABBITMQ_ERLC_OPTS,\n    }) + select({\n        \":test_build\": [\n            \"-DTEST=1\",\n            \"+nowarn_export_all\",\n        ],\n        \"//conditions:default\": [],\n    }),  # keep\n    visibility = [\":__subpackages__\"],\n)\n\nerlc_opts(\n    name = \"test_erlc_opts\",\n    values = select({\n        \"@rules_erlang//:debug_build\": without(\"+deterministic\", RABBITMQ_TEST_ERLC_OPTS),\n        \"//conditions:default\": RABBITMQ_TEST_ERLC_OPTS,\n    }),  # keep\n    visibility = [\":__subpackages__\"],\n)\n"
        },
        {
          "name": "BUILD.package_generic_unix",
          "type": "blob",
          "size": 0.9873046875,
          "content": "load(\"@//:rabbitmq_package_generic_unix.bzl\", \"rabbitmq_package_generic_unix\")\nload(\"@//:rabbitmq_run.bzl\", \"rabbitmq_run\", \"rabbitmq_run_command\")\nload(\"@//:rabbitmqctl.bzl\", \"rabbitmqctl\")\n\nrabbitmq_package_generic_unix(\n    name = \"broker-home\",\n    additional_files =\n        glob(\n            [\n                \"sbin/*\",\n                \"escript/*\",\n            ],\n            exclude = [\"sbin/rabbitmqctl\"],\n        ) + [\n            \"//plugins:standard_plugins\",\n            \"//plugins:inet_tcp_proxy_ez\",\n        ],\n    rabbitmqctl = \"sbin/rabbitmqctl\",\n)\n\nrabbitmq_run(\n    name = \"rabbitmq-run\",\n    home = \":broker-home\",\n    visibility = [\"//visibility:public\"],\n)\n\nrabbitmq_run_command(\n    name = \"broker\",\n    rabbitmq_run = \":rabbitmq-run\",\n    subcommand = \"run-broker\",\n)\n\nrabbitmqctl(\n    name = \"rabbitmqctl\",\n    home = \":broker-home\",\n)\n\nrabbitmqctl(\n    name = \"rabbitmq-diagnostics\",\n    home = \":broker-home\",\n)\n\nrabbitmqctl(\n    name = \"rabbitmq-plugins\",\n    home = \":broker-home\",\n)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.3466796875,
          "content": "# Contributor Code of Conduct\n\nAs contributors and maintainers of this project, and in the interest of fostering an open\nand welcoming community, we pledge to respect all people who contribute through reporting\nissues, posting feature requests, updating documentation, submitting pull requests or\npatches, and other activities.\n\nWe are committed to making participation in this project a harassment-free experience for\neveryone, regardless of level of experience, gender, gender identity and expression,\nsexual orientation, disability, personal appearance, body size, race, ethnicity, age,\nreligion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n * The use of sexualized language or imagery\n * Personal attacks\n * Trolling or insulting/derogatory comments\n * Public or private harassment\n * Publishing other's private information, such as physical or electronic addresses,\n   without explicit permission\n * Other unethical or unprofessional conduct\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments,\ncommits, code, wiki edits, issues, and other contributions that are not aligned to this\nCode of Conduct, or to ban temporarily or permanently any contributor for other behaviors\nthat they deem inappropriate, threatening, offensive, or harmful.\n\nBy adopting this Code of Conduct, project maintainers commit themselves to fairly and\nconsistently applying these principles to every aspect of managing this project. Project\nmaintainers who do not follow or enforce the Code of Conduct may be permanently removed\nfrom the project team.\n\nThis Code of Conduct applies both within project spaces and in public spaces when an\nindividual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by\ncontacting a project maintainer at [rabbitmq-core@groups.vmware.com](mailto:rabbitmq-core@groups.vmware.com). All complaints will\nbe reviewed and investigated and will result in a response that is deemed necessary and\nappropriate to the circumstances. Maintainers are obligated to maintain confidentiality\nwith regard to the reporter of an incident.\n\nThis Code of Conduct is adapted from the\n[Contributor Covenant](https://contributor-covenant.org), version 1.3.0, available at\n[contributor-covenant.org/version/1/3/0/](https://contributor-covenant.org/version/1/3/0/)\n"
        },
        {
          "name": "COMMUNITY_SUPPORT.md",
          "type": "blob",
          "size": 5.9501953125,
          "content": "\n# RabbitMQ Community Support Eligibility \n\nThis document explains who is eligible for community support for open source RabbitMQ.\n\n### What is Community Support?\n\nCommunity support is defined as all questions, root cause analysis requests, issue reports, and other interactions the RabbitMQ core team has with open source RabbitMQ users on GitHub\nand our community forums.\n\n### How is Community Support Related to Patch Releases?\n\nBeing covered by community support for a release series also means that patch releases, general and security-related ones,\nare produced regularly and are available publicly. Patch releases, even if produced, **will not be made available to non-paying users** for series out of community support, with potential\nexception for very high severity CVEs.\n\n### What is Broadcom's Obligation to Reply to Messages or Issues Reported?\n\nThe RabbitMQ Core team at Broadcom has no obligation to reply to any message or issue posted by the community of open source RabbitMQ users. \n\n### Who is Eligible for community support\n\nThe following groups of users are eligible for community support:\n\n * Users who regularly contribute to RabbitMQ development (a definition of \"contribution\" is provided at the end of this document)\n * Users who use [the most recent release series](https://www.rabbitmq.com/release-information) and provide detailed and well researched issue reports, including responsibly disclosed security vulnerabilities\n\nAll other users are not eligible for community support from the RabbitMQ Core Team.\n\nUsers with a [commercial support license](https://tanzu.vmware.com/rabbitmq/oss) or a [commercial edition license](https://tanzu.vmware.com/rabbitmq) should\nuse commercial support channels.\n\n### Exceptions: Reports that Will Always Be Investigated\n\nThe RabbitMQ core team will always investigate the following issues, even if they are reported by an ineligible user:\n\n * Responsibly disclosed security vulnerabilities\n * Detailed issues with a proof that data safety may be at risk\n * Detailed issues with a proof that a node may fail to start, join the cluster, or rejoin the cluster\n\n### Exceptions: Question that Will Be Ignored\n\nUnless overwhelming evidence of a systemic problem in RabbitMQ is demonstrated, the following issues will get minimum or no attention at all from the core team:\n\n* Questions related to [OAuth2 configuration](https://www.rabbitmq.com/docs/oauth2), [OAuth 2 configuration examples](https://www.rabbitmq.com/docs/oauth2-examples) and [troubleshooting of OAuth 2](https://www.rabbitmq.com/docs/troubleshooting-oauth2)\n* Questions related to [TLS configuration](https://www.rabbitmq.com/docs/ssl) and [troubleshooting of TLS connections](https://www.rabbitmq.com/docs/troubleshooting-ssl)\n* Questions related to [troubleshooting of network connectivity](https://www.rabbitmq.com/docs/troubleshooting-networking) \n* Questions related to [LDAP configuration](https://www.rabbitmq.com/docs/ldap) and [troubleshooting](https://www.rabbitmq.com/docs/ldap#troubleshooting)\n\nThese topics represent some of the most time consuming questions to investigate and respond to thoroughly. Guidance and investigations related to these features will only be available to customers with VMware Tanzu RabbitMQ commercial licenses.\n\n## Definition of \"contribution\"\n\nFor the purpose of this policy, the RabbitMQ team defines a \"contribution\" as any of the following:\n\n* A pull request that fixes any bug, introduces a new feature, clarifies example documentation, or introduces any other behavior change that may not be easy to categorize but the team is willing to accept\n* An issue report that includes RabbitMQ and Erlang versions used, a reasonably detailed problem definition, a detailed set of specific steps that can be followed in order to quickly reproduce the behavior, and all the necessary evidence: log snippets from all nodes with relevant information, metrics dashboards over a relevant period of time,\n  code snippets that demonstrate application behavior, and any other information necessary to quickly and efficiently reproduce the reported behavior at least some of the time\n* Executable benchmarks (for example, using PerfTest) that demonstrate regressions\n* Donated infrastructure or services (this can be IaaS provider credits, credits for services, and anything else that the RabbitMQ core team can use to build and distribute open source RabbitMQ packages, tools, libraries)\n* Meaningful contributions to RabbitMQ documentation, not including typo fixes, grammar corrections, re-wording. Contributions must include new original content, produced by a human, that makes it easier to install, operate, upgrade, and communicate with RabbitMQ from applications\n* A detailed, RFC-style feature request where the status quo, the end goal, the pros and the cons of the proposed feature are well defined\n* Meaningful build system updates previously pre-approved by the RabbitMQ core team\n\nThe above rules equally apply to contributions to RabbitMQ, officially supported RabbitMQ client libraries, key RabbitMQ dependencies (Erlang/OTP, Ra, Osiris, Khepri, Cuttlefish, Horus), and the Kubernetes cluster Operators maintained by the RabbitMQ core team.\n\n## Release Series Eligible for Community Support\n\nOnly releases in the latest minor series of the latest major version are eligible for community support. Currently this is RabbitMQ 4.0.x in the 4.x major series.\n\nAll patches (bug fixes and improvements alike) will only be available for the latest minor series in the latest major series. This applies to all changes contributed by the community.\n\nFor example, if the latest supported series (minor) is 4.0.x, all core and community contributions will ship in a 4.0.x release until a newer minor or major comes out (say, 4.1.x). \n\nThe RabbitMQ team will not backport patches to older release series (such as 3.13.x) of open source RabbitMQ, including cases where a patch was contributed by the community.\nPatch releases for older release series are exclusively available to users with VMware Tanzu RabbitMQ commercial licenses.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.611328125,
          "content": "## Overview\n\nRabbitMQ projects use pull requests to discuss, collaborate on and accept code contributions.\nPull requests is the primary place of discussing code changes.\n\n## How to Contribute\n\nThe process is fairly standard:\n\n * Present your idea to the RabbitMQ core team using [GitHub Discussions](https://github.com/rabbitmq/rabbitmq-server/discussions) or [RabbitMQ community Discord server](https://rabbitmq.com/discord)\n * Fork the repository or repositories you plan on contributing to\n * Run `git clean -xfffd && gmake clean && gmake distclean && gmake` to build all subprojects from scratch\n * Create a branch with a descriptive name\n * Make your changes, run tests, ensure correct code formatting, commit with a [descriptive message](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html), push to your fork\n * Submit pull requests with an explanation what has been changed and **why**\n * Submit a filled out and signed [Contributor Agreement](https://cla.pivotal.io/) if needed (see below)\n * Be patient. We will get to your pull request eventually\n\n\n## Running Tests\n\nTest suites of individual subprojects can be run from the subproject directory under\n`deps/*`. For example, for the core broker:\n\n``` shell\n# Running all server suites in parallel will take between 30 and 40 minutes on reasonably\n# recent multi-core machines. This is rarely necessary in development environments.\n# Running individual test suites or groups of test suites can be enough.\n#\n\n# Before you start: this will terminate all running nodes, make processes and Common Test processes\nkillall -9 beam.smp; killall -9 erl; killall -9 make; killall -9 epmd; killall -9 erl_setup_child; killall -9 ct_run\n\n# the core broker subproject\ncd deps/rabbit\n\n# cleans build artifacts\ngit clean -xfffd\ngmake clean; gmake distclean\n\n# builds the broker and all of its dependencies\ngmake\n# runs an integration test suite, tests/rabbit_fifo_SUITE with CT (Common Test)\ngmake ct-rabbit_fifo\n# runs an integration test suite, tests/quorum_queue_SUITE with CT (Common Test)\ngmake ct-quorum_queue\n# runs an integration test suite, tests/queue_parallel_SUITE with CT (Common Test)\ngmake ct-queue_parallel\n# runs a unit test suite tests/unit_log_management_SUITE with CT (Common Test)\ngmake ct-unit_log_management\n```\n\n### Running Specific Groups or Tests\n\nAll `ct-*` Make targets support a `t=` argument which are transformed to [`-group` and `-case` Common Test runner options](https://www.erlang.org/doc/apps/common_test/run_test_chapter.html).\n\n``` shell\n# Runs a a group of tests named 'all_tests_with_prefix' in suite 'test/rabbit_mgmt_http_SUITE.erl'\ngmake ct-rabbit_mgmt_http t=\"all_tests_with_prefix\"\n\n# Runs a test named 'users_test' in group 'all_tests_with_prefix' in suite 'test/rabbit_mgmt_http_SUITE.erl'\ngmake ct-rabbit_mgmt_http t=\"all_tests_with_prefix:users_test\"\n# Runs a test named 'queues_test' in group 'all_tests_with_prefix' in suite 'test/rabbit_mgmt_http_SUITE.erl'\ngmake ct-rabbit_mgmt_http t=\"all_tests_with_prefix:queues_test\"\n```\n\n### Running Tests with a Specific Schema Data Store\n\nSet `RABBITMQ_METADATA_STORE` to either `khepri` or `mnesia` to make the Common Test suites\nuse a specific [schema data store]() (metadata store):\n\n``` shell\nRABBITMQ_METADATA_STORE=khepri gmake ct-quorum_queue\n```\n\nOr, with Nu shell:\n\n```nu\nwith-env {'RABBITMQ_METADATA_STORE': 'khepri'} { gmake ct-quorum_queue }\n```\n\n\n## Running Single Nodes from Source\n\n``` shell\n# Run from repository root.\n# Starts a node with the management plugin enabled\ngmake run-broker RABBITMQ_PLUGINS=rabbitmq_management\n```\n\nThe nodes will be started in the background. They will use `rabbit@{hostname}` for its name, so CLI will be able to contact\nit without an explicit `-n` (`--node`) argument:\n\n```shell\n# Run from repository root.\n./sbin/rabbitmq-diagnostics status\n```\n\n## Running Clusters from Source\n\n``` shell\n# Run from repository root.\n# Starts a three node cluster with the management plugin enabled\ngmake start-cluster NODES=3 RABBITMQ_PLUGINS=rabbitmq_management\n```\n\nThe node will use `rabbit-{n}@{hostname}` for names, so CLI must\nbe explicitly given explicit an `-n` (`--node`) argument in order to\ncontact one of the nodes:\n\n * `rabbit-1`\n * `rabbit-2`\n * `rabbit-3`\n\nThe names of the nodes can be looked up via\n\n``` shell\nepmd -names\n```\n\n``` shell\n# Run from repository root.\n# Makes CLI tools talk to node rabbit-2\nsbin/rabbitmq-diagnostics cluster_status -n rabbit-2\n\n# Run from repository root.\n# Makes CLI tools talk to node rabbit-1\nsbin/rabbitmq-diagnostics status -n rabbit-1\n```\n\nTo stop a previously started cluster:\n\n``` shell\n# Run from repository root.\n# Stops a three node cluster started earlier\ngmake stop-cluster NODES=3\n```\n\n\n## Working on Management UI with BrowserSync\n\nWhen working on management UI code, besides starting the node with\n\n``` shell\n# starts a node with the management plugin enabled\ngmake run-broker RABBITMQ_PLUGINS=rabbitmq_management\n```\n\n(or any other set of plugins), it is highly recommended to use [BrowserSync](https://browsersync.io/#install)\nto shorten the edit/feedback cycle for JS files, CSS, and so on.\n\nFirst, install BrowserSync using NPM:\n\n``` shell\nnpm install -g browser-sync\n```\n\nAssuming a node running locally with HTTP API on port `15672`, start\na BrowserSync proxy like so:\n\n``` shell\ncd deps/rabbitmq_management/priv/www\n\nbrowser-sync start --proxy localhost:15672 --serverStatic . --files .\n```\n\nBrowserSync will automatically open a browser window for you to use. The window\nwill automatically refresh when one of the static (templates, JS, CSS) files change.\n\nAll HTTP requests that BrowserSync does not know how to handle will be proxied to\nthe HTTP API at `localhost:15672`.\n\n\n## Formatting the RabbitMQ CLI\n\nThe RabbitMQ CLI uses the standard [Elixir code formatter](https://hexdocs.pm/mix/main/Mix.Tasks.Format.html). To ensure correct code formatting of the CLI:\n\n```\ncd deps/rabbitmq_cli\nmix format\n```\n\nRunning `make` will validate the CLI formatting and issue any necessary warnings. Alternatively, run the format checker in the `deps/rabbitmq_cli` directory:\n\n```\nmix format --check-formatted\n```\n\n## Code of Conduct\n\nSee [CODE_OF_CONDUCT.md](./CODE_OF_CONDUCT.md).\n\n## Contributor Agreement\n\nIf you want to contribute a non-trivial change, please submit a signed copy of our\n[Contributor Agreement](https://cla.pivotal.io/) around the time\nyou submit your pull request. This will make it much easier (in some cases, possible)\nfor the RabbitMQ team at Pivotal to merge your contribution.\n\n## Where to Ask Questions\n\nIf something isn't clear, feel free to ask on [GitHub Discussions](https://github.com/rabbitmq/rabbitmq-server/discussions)\nand [community Discord server](https://rabbitmq.com/discord).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.35546875,
          "content": "RabbitMQ server and its tier 1 (core) plugins source code is licensed under the MPL 2.0. For\nthe MPL2, please see LICENSE-MPL-RabbitMQ.\n\nSome RabbitMQ server OCF files are licensed under the Apache Software License 2.0.\nFor the ASL2, please see LICENSE-APACHE2.\n\nIf you have any questions regarding licensing, please contact us at\nrabbitmq-core@groups.vmware.com.\n"
        },
        {
          "name": "LICENSE-APACHE2",
          "type": "blob",
          "size": 11.1728515625,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2007-2024 Broadcom. The term “Broadcom” refers to Broadcom Inc. and/or its subsidiaries. All rights reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE-MPL-RabbitMQ",
          "type": "blob",
          "size": 16.333984375,
          "content": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in \n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 10.419921875,
          "content": "module(\n    name = \"rabbitmq-server\",\n    version = \"4.0.0\",\n)\n\nbazel_dep(\n    name = \"rules_pkg\",\n    version = \"0.10.1\",\n)\n\nbazel_dep(\n    name = \"bazel_skylib\",\n    version = \"1.7.1\",\n)\n\nbazel_dep(\n    name = \"aspect_bazel_lib\",\n    version = \"2.5.3\",\n)\n\nbazel_dep(\n    name = \"platforms\",\n    version = \"0.0.8\",\n)\n\nbazel_dep(\n    name = \"rules_cc\",\n    version = \"0.0.9\",\n)\n\nbazel_dep(\n    name = \"rules_oci\",\n    version = \"1.7.4\",\n)\n\nbazel_dep(\n    name = \"container_structure_test\",\n    version = \"1.16.0\",\n)\n\nbazel_dep(\n    name = \"gazelle\",\n    version = \"0.33.0\",\n    repo_name = \"bazel_gazelle\",\n)\n\nbazel_dep(\n    name = \"rules_erlang\",\n    version = \"3.16.0\",\n)\n\nbazel_dep(\n    name = \"rules_elixir\",\n    version = \"1.1.0\",\n)\n\nbazel_dep(\n    name = \"rabbitmq_osiris\",\n    version = \"1.8.5\",\n    repo_name = \"osiris\",\n)\n\nerlang_config = use_extension(\n    \"@rules_erlang//bzlmod:extensions.bzl\",\n    \"erlang_config\",\n)\n\nuse_repo(\n    erlang_config,\n    \"erlang_config\",\n)\n\nelixir_config = use_extension(\n    \"@rules_elixir//bzlmod:extensions.bzl\",\n    \"elixir_config\",\n)\n\nuse_repo(\n    elixir_config,\n    \"elixir_config\",\n)\n\nregister_toolchains(\n    \"@elixir_config//external:toolchain\",\n)\n\nerlang_package = use_extension(\n    \"@rules_erlang//bzlmod:extensions.bzl\",\n    \"erlang_package\",\n)\n\nerlang_package.hex_package(\n    name = \"accept\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.accept\",\n    sha256 = \"11b18c220bcc2eab63b5470c038ef10eb6783bcb1fcdb11aa4137defa5ac1bb8\",\n    version = \"0.3.5\",\n)\n\nerlang_package.hex_package(\n    name = \"aten\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.aten\",\n    sha256 = \"5f39a164206ae3f211ef5880b1f7819415686436e3229d30b6a058564fbaa168\",\n    version = \"0.6.0\",\n)\n\nerlang_package.hex_package(\n    name = \"base64url\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.base64url\",\n    sha256 = \"f9b3add4731a02a9b0410398b475b33e7566a695365237a6bdee1bb447719f5c\",\n    version = \"1.0.1\",\n)\n\nerlang_package.hex_package(\n    name = \"cowboy\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.cowboy\",\n    patch_cmds = [\n        \"rm ebin/cowboy.app\",\n    ],\n    sha256 = \"8a7abe6d183372ceb21caa2709bec928ab2b72e18a3911aa1771639bef82651e\",\n    version = \"2.12.0\",\n)\n\nerlang_package.hex_package(\n    name = \"cowlib\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.cowlib\",\n    patch_cmds = [\n        \"rm ebin/cowlib.app\",\n    ],\n    sha256 = \"e1e1284dc3fc030a64b1ad0d8382ae7e99da46c3246b815318a4b848873800a4\",\n    version = \"2.13.0\",\n)\n\nerlang_package.hex_package(\n    name = \"credentials_obfuscation\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.credentials_obfuscation\",\n    sha256 = \"738ace0ed5545d2710d3f7383906fc6f6b582d019036e5269c4dbd85dbced566\",\n    version = \"3.4.0\",\n)\n\nerlang_package.hex_package(\n    name = \"csv\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.csv\",\n    sha256 = \"8f55a0524923ae49e97ff2642122a2ce7c61e159e7fe1184670b2ce847aee6c8\",\n    version = \"3.2.1\",\n)\n\nerlang_package.hex_package(\n    name = \"cuttlefish\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.cuttlefish\",\n    sha256 = \"43cadd7f34b3dbbab52a7f4110d1df276a13cff5e11afe0f5a774f69f012b76b\",\n    version = \"3.4.0\",\n)\n\nerlang_package.hex_package(\n    name = \"eetcd\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.eetcd\",\n    sha256 = \"66493bfd6698c1b6baa49679034c3def071ff329961ca1aa7b1dee061c2809af\",\n    version = \"0.3.6\",\n)\n\nerlang_package.hex_package(\n    name = \"enough\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.enough\",\n    sha256 = \"0460c7abda5f5e0ea592b12bc6976b8a5c4b96e42f332059cd396525374bf9a1\",\n    version = \"0.1.0\",\n)\n\nerlang_package.hex_package(\n    name = \"gen_batch_server\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.gen_batch_server\",\n    sha256 = \"c3e6a1a2a0fb62aee631a98cfa0fd8903e9562422cbf72043953e2fb1d203017\",\n    version = \"0.8.8\",\n)\n\nerlang_package.hex_package(\n    name = \"getopt\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.getopt\",\n    sha256 = \"a0029aea4322fb82a61f6876a6d9c66dc9878b6cb61faa13df3187384fd4ea26\",\n    version = \"1.0.2\",\n)\n\nerlang_package.hex_package(\n    name = \"gun\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.gun\",\n    sha256 = \"3106ce167f9c9723f849e4fb54ea4a4d814e3996ae243a1c828b256e749041e0\",\n    version = \"1.3.3\",\n)\n\nerlang_package.hex_package(\n    name = \"horus\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.horus\",\n    sha256 = \"d564d30ebc274f0d92c3d44a336d0b892f000be159912ae4e6838701e85495ec\",\n    version = \"0.3.1\",\n)\n\nerlang_package.hex_package(\n    name = \"jose\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.jose\",\n    sha256 = \"0d6cd36ff8ba174db29148fc112b5842186b68a90ce9fc2b3ec3afe76593e614\",\n    version = \"1.11.10\",\n)\n\nerlang_package.hex_package(\n    name = \"json\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.json\",\n    sha256 = \"9abf218dbe4ea4fcb875e087d5f904ef263d012ee5ed21d46e9dbca63f053d16\",\n    version = \"1.4.1\",\n)\n\nerlang_package.hex_package(\n    name = \"khepri\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.khepri\",\n    sha256 = \"feee8a0a1f3f78dd9f8860feacba63cc165c81af1b351600903e34a20676d5f6\",\n    version = \"0.16.0\",\n)\n\nerlang_package.hex_package(\n    name = \"khepri_mnesia_migration\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.khepri_mnesia_migration\",\n    sha256 = \"24b87e51b9e46eaeeadb898720e12a58d501cbb05c16e28ca27063e66d60e85c\",\n    version = \"0.7.1\",\n)\n\nerlang_package.hex_package(\n    name = \"thoas\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.thoas\",\n    sha256 = \"e38697edffd6e91bd12cea41b155115282630075c2a727e7a6b2947f5408b86a\",\n    version = \"1.2.1\",\n)\n\nerlang_package.hex_package(\n    name = \"observer_cli\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.observer_cli\",\n    sha256 = \"872cf8e833a3a71ebd05420692678ec8aaede8fd96c805a4687398f6b23a3014\",\n    version = \"1.7.5\",\n)\n\nerlang_package.hex_package(\n    name = \"prometheus\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.prometheus\",\n    sha256 = \"719862351aabf4df7079b05dc085d2bbcbe3ac0ac3009e956671b1d5ab88247d\",\n    version = \"4.11.0\",\n)\n\nerlang_package.hex_package(\n    name = \"quantile_estimator\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.quantile_estimator\",\n    sha256 = \"282a8a323ca2a845c9e6f787d166348f776c1d4a41ede63046d72d422e3da946\",\n    version = \"0.2.1\",\n)\n\nerlang_package.hex_package(\n    name = \"ra\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.ra\",\n    pkg = \"ra\",\n    sha256 = \"1d553dd971a0b398b7af0fa8c8458dda575715ff71c65c972e9500b24039b240\",\n    version = \"2.14.0\",\n)\n\nerlang_package.git_package(\n    name = \"seshat\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.seshat\",\n    repository = \"rabbitmq/seshat\",\n    tag = \"v0.6.1\",\n)\n\nerlang_package.hex_package(\n    name = \"ranch\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.ranch\",\n    patch_cmds = [\n        \"rm ebin/ranch.app\",\n    ],\n    sha256 = \"244ee3fa2a6175270d8e1fc59024fd9dbc76294a321057de8f803b1479e76916\",\n    version = \"2.1.0\",\n)\n\nerlang_package.hex_package(\n    name = \"recon\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.recon\",\n    sha256 = \"96c6799792d735cc0f0fd0f86267e9d351e63339cbe03df9d162010cefc26bb0\",\n    version = \"2.5.6\",\n)\n\nerlang_package.hex_package(\n    name = \"redbug\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.redbug\",\n    sha256 = \"3624feb7a4b78fd9ae0e66cc3158fe7422770ad6987a1ebf8df4d3303b1c4b0c\",\n    version = \"2.0.7\",\n)\n\nerlang_package.hex_package(\n    name = \"stdout_formatter\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.stdout_formatter\",\n    sha256 = \"51f1df921b0477275ea712763042155dbc74acc75d9648dbd54985c45c913b29\",\n    version = \"0.2.4\",\n)\n\nerlang_package.git_package(\n    build_file = \"@rabbitmq-server//bazel:BUILD.syslog\",\n    repository = \"schlagert/syslog\",\n    tag = \"4.0.0\",\n)\n\nerlang_package.hex_package(\n    name = \"sysmon_handler\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.sysmon_handler\",\n    sha256 = \"922cf0dd558b9fdb1326168373315b52ed6a790ba943f6dcbd9ee22a74cebdef\",\n    version = \"1.3.0\",\n)\n\nerlang_package.hex_package(\n    name = \"systemd\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.systemd\",\n    sha256 = \"8ec5ed610a5507071cdb7423e663e2452a747a624bb8a58582acd9491ccad233\",\n    version = \"0.6.1\",\n)\n\nuse_repo(\n    erlang_package,\n    \"accept\",\n    \"aten\",\n    \"base64url\",\n    \"cowboy\",\n    \"cowlib\",\n    \"credentials_obfuscation\",\n    \"csv\",\n    \"cuttlefish\",\n    \"eetcd\",\n    \"gen_batch_server\",\n    \"getopt\",\n    \"gun\",\n    \"horus\",\n    \"jose\",\n    \"json\",\n    \"khepri\",\n    \"khepri_mnesia_migration\",\n    \"observer_cli\",\n    \"prometheus\",\n    \"ra\",\n    \"ranch\",\n    \"recon\",\n    \"redbug\",\n    \"seshat\",\n    \"stdout_formatter\",\n    \"syslog\",\n    \"sysmon_handler\",\n    \"systemd\",\n    \"thoas\",\n)\n\nerlang_dev_package = use_extension(\n    \"@rules_erlang//bzlmod:extensions.bzl\",\n    \"erlang_package\",\n)\n\nerlang_dev_package.hex_package(\n    name = \"amqp\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.amqp\",\n    patch_args = [\"-p1\"],\n    patches = [\"@rabbitmq-server//bazel:amqp.patch\"],\n    sha256 = \"8d3ae139d2646c630d674a1b8d68c7f85134f9e8b2a1c3dd5621616994b10a8b\",\n    version = \"3.3.0\",\n)\n\nerlang_dev_package.git_package(\n    branch = \"master\",\n    build_file = \"@//:bazel/BUILD.ct_helper\",\n    repository = \"ninenines/ct_helper\",\n)\n\nerlang_dev_package.git_package(\n    name = \"emqtt\",\n    tag = \"1.11.0\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.emqtt\",\n    repository = \"emqx/emqtt\",\n)\n\nerlang_dev_package.git_package(\n    name = \"inet_tcp_proxy_dist\",\n    testonly = True,\n    branch = \"master\",\n    repository = \"rabbitmq/inet_tcp_proxy\",\n)\n\nerlang_dev_package.git_package(\n    branch = \"master\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.meck\",\n    repository = \"eproxus/meck\",\n)\n\nerlang_dev_package.git_package(\n    branch = \"master\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.proper\",\n    repository = \"manopapad/proper\",\n)\n\nerlang_dev_package.hex_package(\n    name = \"temp\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.temp\",\n    sha256 = \"6af19e7d6a85a427478be1021574d1ae2a1e1b90882586f06bde76c63cd03e0d\",\n    version = \"0.4.7\",\n)\n\nerlang_dev_package.hex_package(\n    name = \"x509\",\n    build_file = \"@rabbitmq-server//bazel:BUILD.x509\",\n    sha256 = \"ccc3bff61406e5bb6a63f06d549f3dba3a1bbb456d84517efaaa210d8a33750f\",\n    version = \"0.8.8\",\n)\n\nuse_repo(\n    erlang_dev_package,\n    \"amqp\",\n    \"ct_helper\",\n    \"emqtt\",\n    \"inet_tcp_proxy_dist\",\n    \"meck\",\n    \"proper\",\n    \"temp\",\n    \"x509\",\n)\n\nsecondary_umbrella = use_extension(\n    \"//bazel/bzlmod:extensions.bzl\",\n    \"secondary_umbrella\",\n    dev_dependency = True,\n)\n\nuse_repo(\n    secondary_umbrella,\n    \"rabbitmq-server-generic-unix-4.0\",\n)\n\nhex = use_extension(\n    \"//bazel/bzlmod:extensions.bzl\",\n    \"hex\",\n)\n\nuse_repo(\n    hex,\n    \"hex\",\n)\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 22.712890625,
          "content": "PROJECT = rabbitmq_server_release\nPROJECT_DESCRIPTION = RabbitMQ Server\n\n# Propagate PROJECT_VERSION (from the command line or environment) to\n# other components. If PROJECT_VERSION is unset, then an empty variable\n# is propagated and the default version will fallback to the default\n# value from rabbitmq-components.mk.\nexport RABBITMQ_VERSION := $(PROJECT_VERSION)\n\n# Release artifacts are put in $(PACKAGES_DIR).\nPACKAGES_DIR ?= $(abspath PACKAGES)\n\n# List of plugins to include in a RabbitMQ release.\ninclude plugins.mk\n\n# An additional list of plugins to include in a RabbitMQ release,\n# on top of the standard plugins.\n#\n# Note: When including NIFs in a release make sure to build\n# them on the appropriate platform for the target environment.\n# For example build on Linux when targeting Docker.\nADDITIONAL_PLUGINS ?=\n\nDEPS = rabbit_common rabbit $(PLUGINS) $(ADDITIONAL_PLUGINS)\n\nDEP_PLUGINS = rabbit_common/mk/rabbitmq-dist.mk \\\n\t      rabbit_common/mk/rabbitmq-run.mk\n\nDISABLE_DISTCLEAN = 1\n\nifeq ($(filter-out xref,$(MAKECMDGOALS)),)\nXREF_SCOPE = app deps\n\n# We add all the applications that are in non-standard paths\n# so they are included in the analyses as well.\nXREF_EXTRA_APP_DIRS = $(filter-out deps/rabbitmq_cli/_build/dev/lib/rabbit_common/,$(wildcard deps/rabbitmq_cli/_build/dev/lib/*/)) deps/rabbitmq_prelaunch/\n\n# For Elixir protocols the right fix is to include the consolidated/\n# folders in addition to ebin/. However this creates conflicts because\n# some modules are duplicated. So instead we ignore warnings from\n# protocols directly.\nXREF_IGNORE = [ \\\n    {'Elixir.CSV.Encode',impl_for,1}, \\\n    {'Elixir.JSON.Decoder',impl_for,1}, \\\n    {'Elixir.JSON.Encoder',impl_for,1}, \\\n    {'Elixir.RabbitMQ.CLI.Core.DataCoercion',impl_for,1}]\n\n# Include Elixir libraries in the Xref checks.\nxref: ERL_LIBS := $(ERL_LIBS):$(CURDIR)/apps:$(CURDIR)/deps:$(dir $(shell elixir --eval ':io.format \"~s~n\", [:code.lib_dir :elixir ]'))\nendif\n\nifneq ($(wildcard deps/.hex/cache.erl),)\ndeps:: restore-hex-cache-ets-file\nendif\n\ninclude rabbitmq-components.mk\n\n# Set PROJECT_VERSION, calculated in rabbitmq-components.mk,\n# in stone now, because in this Makefile we will be using it\n# multiple times (including for release file names and whatnot).\nPROJECT_VERSION := $(PROJECT_VERSION)\n\n# Fetch/build community plugins.\n#\n# To include community plugins in commands, use\n# `make COMMUNITY_PLUGINS=1` or export the variable.\n# They are not included otherwise. Note that only\n# the top-level Makefile can do this.\n#\n# Note that the community plugins will be fetched using\n# SSH and therefore may be subject to GH authentication.\n\nifdef COMMUNITY_PLUGINS\nDEPS += $(RABBITMQ_COMMUNITY)\nendif\n\ninclude erlang.mk\ninclude mk/github-actions.mk\ninclude mk/bazel.mk\n\n# If PLUGINS was set when we use run-broker we want to\n# fill in the enabled plugins list. PLUGINS is a more\n# natural space-separated list.\nifdef PLUGINS\nRABBITMQ_ENABLED_PLUGINS ?= $(call comma_list,$(PLUGINS))\nendif\n\n# --------------------------------------------------------------------\n# Mix Hex cache management.\n# --------------------------------------------------------------------\n\n# We restore the initial Hex cache.ets file from an Erlang term created\n# at the time the source archive was prepared.\n#\n# See the `$(SOURCE_DIST)` recipe for the reason behind this step.\n\nrestore-hex-cache-ets-file: deps/.hex/cache.ets\n\ndeps/.hex/cache.ets: deps/.hex/cache.erl\n\t$(gen_verbose) $(call erlang,$(call restore_hex_cache_from_erl_term,$<,$@))\n\ndefine restore_hex_cache_from_erl_term\n  In = \"$(1)\",\n  Out = \"$(2)\",\n  {ok, [Props, Entries]} = file:consult(In),\n  Name = proplists:get_value(name, Props),\n  Type = proplists:get_value(type, Props),\n  Access = proplists:get_value(protection, Props),\n  NamedTable = proplists:get_bool(named_table, Props),\n  Keypos = proplists:get_value(keypos, Props),\n  Heir = proplists:get_value(heir, Props),\n  ReadConc = proplists:get_bool(read_concurrency, Props),\n  WriteConc = proplists:get_bool(write_concurrency, Props),\n  Compressed = proplists:get_bool(compressed, Props),\n  Options0 = [\n    Type,\n    Access,\n    {keypos, Keypos},\n    {heir, Heir},\n    {read_concurrency, ReadConc},\n    {write_concurrency, WriteConc}],\n  Options1 = case NamedTable of\n    true  -> [named_table | Options0];\n    false -> Options0\n  end,\n  Options2 = case Compressed of\n    true  -> [compressed | Options0];\n    false -> Options0\n  end,\n  Tab = ets:new(Name, Options2),\n  [true = ets:insert(Tab, Entry) || Entry <- Entries],\n  ok = ets:tab2file(Tab, Out),\n  init:stop().\nendef\n\n# --------------------------------------------------------------------\n# Distribution.\n# --------------------------------------------------------------------\n\n.PHONY: source-dist clean-source-dist\n\nSOURCE_DIST_BASE ?= rabbitmq-server\nSOURCE_DIST_SUFFIXES ?= tar.xz\nSOURCE_DIST ?= $(PACKAGES_DIR)/$(SOURCE_DIST_BASE)-$(PROJECT_VERSION)\n\n# The first source distribution file is used by packages: if the archive\n# type changes, you must update all packages' Makefile.\nSOURCE_DIST_FILES = $(addprefix $(SOURCE_DIST).,$(SOURCE_DIST_SUFFIXES))\n\n.PHONY: $(SOURCE_DIST_FILES)\n\nsource-dist: $(SOURCE_DIST_FILES)\n\t@:\n\nRSYNC ?= rsync\nRSYNC_V_0 =\nRSYNC_V_1 = -v\nRSYNC_V_2 = -v\nRSYNC_V = $(RSYNC_V_$(V))\nRSYNC_FLAGS += -a $(RSYNC_V)\t\t\\\n\t       --exclude '.sw?' --exclude '.*.sw?'\t\\\n\t       --exclude '*.beam'\t\t\t\\\n\t       --exclude '*.d'\t\t\t\t\\\n\t       --exclude '*.pyc'\t\t\t\\\n\t       --exclude '.git*'\t\t\t\\\n\t       --exclude '.hg*'\t\t\t\t\\\n\t       --exclude '.*.plt'\t\t\t\\\n\t       --exclude '*.bzl'\t\t\t\\\n\t       --exclude '*.bazel'\t\t\t\\\n\t       --exclude '*.bazelrc'\t\t\t\\\n\t       --exclude 'moduleindex.yaml'\t\t\\\n\t       --exclude 'BUILD.*'\t\t\t\\\n\t       --exclude 'erlang_ls.config'\t\t\\\n\t       --exclude '$(notdir $(ERLANG_MK_TMP))'\t\\\n\t       --exclude '_build/'\t\t\t\\\n\t       --exclude '__pycache__/'\t\t\t\\\n\t       --exclude 'bazel*/'\t\t\t\\\n\t       --exclude 'tools/'\t\t\t\\\n\t       --exclude 'ci/'\t\t\t\t\\\n\t       --exclude 'cover/'\t\t\t\\\n\t       --exclude 'deps/'\t\t\t\\\n\t       --exclude 'doc/'\t\t\t\t\\\n\t       --exclude 'docker/'\t\t\t\\\n\t       --exclude 'ebin/'\t\t\t\\\n\t       --exclude 'erl_crash.dump'\t\t\\\n\t       --exclude 'escript/'\t\t\t\\\n\t       --exclude 'MnesiaCore.*'\t\t\t\\\n\t       --exclude '$(notdir $(DEPS_DIR))/'\t\\\n\t       --exclude 'hexer*'\t\t\t\\\n\t       --exclude 'logs/'\t\t\t\\\n\t       --exclude 'packaging'\t\t\t\\\n\t       --exclude 'PKG_*.md'\t\t\t\\\n\t       --exclude '/plugins/'\t\t\t\\\n\t       --include 'cli/plugins'\t\t\t\\\n\t       --exclude '$(notdir $(DIST_DIR))/'\t\\\n\t       --exclude 'test'\t\t\t\t\\\n\t       --exclude '/$(notdir $(PACKAGES_DIR))/'\t\\\n\t       --exclude '/PACKAGES/'\t\t\t\\\n\t       --exclude '/amqp_client/doc/'\t\t\\\n\t       --exclude '/amqp_client/rebar.config'\t\\\n\t       --exclude '/cowboy/doc/'\t\t\t\\\n\t       --exclude '/cowboy/examples/'\t\t\\\n\t       --exclude '/rabbit/escript/'\t\t\\\n\t       --exclude '/rabbitmq_cli/escript/'\t\\\n\t       --exclude '/rabbitmq_mqtt/test/build/'\t\\\n\t       --exclude '/rabbitmq_mqtt/test/test_client/'\\\n\t       --exclude '/rabbitmq_trust_store/examples/'\\\n\t       --exclude '/ranch/doc/'\t\t\t\\\n\t       --exclude '/ranch/examples/'\t\t\\\n\t       --exclude '/sockjs/examples/'\t\t\\\n\t       --exclude '/workflow_sources/'\t\t\\\n\t       --delete\t\t\t\t\t\\\n\t       --delete-excluded\n\nTAR ?= tar\nTAR_V_0 =\nTAR_V_1 = -v\nTAR_V_2 = -v\nTAR_V = $(TAR_V_$(V))\n\nGZIP ?= gzip\nBZIP2 ?= bzip2\nXZ ?= xz\n\nZIP ?= zip\nZIP_V_0 = -q\nZIP_V_1 =\nZIP_V_2 =\nZIP_V = $(ZIP_V_$(V))\n\n.PHONY: $(SOURCE_DIST)\n.PHONY: clean-source-dist distclean-packages clean-unpacked-source-dist\n\n$(SOURCE_DIST): $(ERLANG_MK_RECURSIVE_DEPS_LIST)\n\t$(verbose) mkdir -p $(dir $@)\n\t$(gen_verbose) $(RSYNC) $(RSYNC_FLAGS) ./ $@/\n\t$(verbose) echo \"$(PROJECT_DESCRIPTION) $(PROJECT_VERSION)\" > \"$@/git-revisions.txt\"\n\t$(verbose) echo \"$(PROJECT) $$(git rev-parse HEAD) $$(git describe --tags --exact-match 2>/dev/null || git symbolic-ref -q --short HEAD)\" >> \"$@/git-revisions.txt\"\n\t$(verbose) echo \"$$(TZ= git --no-pager log -n 1 --format='%cd' --date='format-local:%Y%m%d%H%M.%S')\" > \"$@.git-times.txt\"\n\t$(verbose) cat packaging/common/LICENSE.head > $@/LICENSE\n\t$(verbose) mkdir -p $@/deps/licensing\n\t$(verbose) set -e; for dep in $$(cat $(ERLANG_MK_RECURSIVE_DEPS_LIST) | LC_COLLATE=C sort); do \\\n\t\t$(RSYNC) $(RSYNC_FLAGS) \\\n\t\t $$dep \\\n\t\t $@/deps; \\\n\t\trm -f \\\n\t\t $@/deps/rabbit_common/rebar.config \\\n\t\t $@/deps/rabbit_common/rebar.lock; \\\n\t\tif test -f $@/deps/$$(basename $$dep)/erlang.mk && \\\n\t\t   test \"$$(wc -l $@/deps/$$(basename $$dep)/erlang.mk | awk '{print $$1;}')\" = \"1\" && \\\n\t\t   grep -qs -E \"^[[:blank:]]*include[[:blank:]]+(erlang\\.mk|.*/erlang\\.mk)$$\" $@/deps/$$(basename $$dep)/erlang.mk; then \\\n\t\t\techo \"include ../../erlang.mk\" > $@/deps/$$(basename $$dep)/erlang.mk; \\\n\t\tfi; \\\n\t\tsed -E -i.bak \"s|^[[:blank:]]*include[[:blank:]]+\\.\\./.*erlang.mk$$|include ../../erlang.mk|\" \\\n\t\t $@/deps/$$(basename $$dep)/Makefile && \\\n\t\trm $@/deps/$$(basename $$dep)/Makefile.bak; \\\n\t\tmix_exs=$@/deps/$$(basename $$dep)/mix.exs; \\\n\t\tif test -f $$mix_exs; then \\\n\t\t\t(cd $$(dirname \"$$mix_exs\") && \\\n\t\t\t (test -d $@/deps/.hex || env DEPS_DIR=$@/deps MIX_HOME=$@/deps/.mix HEX_HOME=$@/deps/.hex MIX_ENV=prod FILL_HEX_CACHE=yes mix local.hex --force) && \\\n\t\t\t env DEPS_DIR=$@/deps MIX_HOME=$@/deps/.mix HEX_HOME=$@/deps/.hex MIX_ENV=prod FILL_HEX_CACHE=yes mix deps.get --only prod && \\\n\t\t\t cp $(CURDIR)/mk/rabbitmq-mix.mk . && \\\n\t\t\t rm -rf _build deps); \\\n\t\tfi; \\\n\t\tif test -f \"$$dep/license_info\"; then \\\n\t\t\tcp \"$$dep/license_info\" \"$@/deps/licensing/license_info_$$(basename \"$$dep\")\"; \\\n\t\t\tcat \"$$dep/license_info\" >> $@/LICENSE; \\\n\t\tfi; \\\n\t\tfind \"$$dep\" -maxdepth 1 -name 'LICENSE-*' -exec cp '{}' $@/deps/licensing \\; ; \\\n\t\t(cd $$dep; \\\n\t\t echo \"$$(basename \"$$dep\") $$(git rev-parse HEAD) $$(git describe --tags --exact-match 2>/dev/null || git symbolic-ref -q --short HEAD)\") \\\n\t\t >> \"$@/git-revisions.txt\"; \\\n\t\t! test -d $$dep/.git || (cd $$dep; \\\n\t\t echo \"$$(env TZ= git --no-pager log -n 1 --format='%cd' --date='format-local:%Y%m%d%H%M.%S')\") \\\n\t\t >> \"$@.git-times.txt\"; \\\n\tdone\n\t$(verbose) cat packaging/common/LICENSE.tail >> $@/LICENSE\n\t$(verbose) find $@/deps/licensing -name 'LICENSE-*' -exec cp '{}' $@ \\;\n\t$(verbose) rm -rf $@/deps/licensing\n\t$(verbose) for file in $$(find $@ -name '*.app.src'); do \\\n\t\tsed -E -i.bak \\\n\t\t  -e 's/[{]vsn[[:blank:]]*,[[:blank:]]*(\"\"|\"0.0.0\")[[:blank:]]*}/{vsn, \"$(PROJECT_VERSION)\"}/' \\\n\t\t  -e 's/[{]broker_version_requirements[[:blank:]]*,[[:blank:]]*\\[\\][[:blank:]]*}/{broker_version_requirements, [\"$(PROJECT_VERSION)\"]}/' \\\n\t\t  $$file; \\\n\t\trm $$file.bak; \\\n\tdone\n\t$(verbose) echo \"PLUGINS := $(PLUGINS)\" > $@/plugins.mk\n# Remember the latest Git timestamp.\n\t$(verbose) sort -r < \"$@.git-times.txt\" | head -n 1 > \"$@.git-time.txt\"\n# Mix Hex component requires a cache file, otherwise it refuses to build\n# offline... That cache is an ETS table with all the applications we\n# depend on, plus some versioning informations and checksums. There\n# are two problems with that: the table contains a date (`last_update`\n# field) and `ets:tab2file()` produces a different file each time it's\n# called.\n#\n# To make our source archive reproducible, we fix the time of the\n# `last_update` field to the last Git commit and dump the content of the\n# table as an Erlang term to a text file.\n#\n# The ETS file must be recreated before compiling RabbitMQ. See the\n# `restore-hex-cache-ets-file` Make target.\n\t$(verbose) $(call erlang,$(call dump_hex_cache_to_erl_term,$(call core_native_path,$@),$(call core_native_path,$@.git-time.txt)))\n# Fix file timestamps to have reproducible source archives.\n\t$(verbose) find $@ -print0 | xargs -0 touch -t \"$$(cat \"$@.git-time.txt\")\"\n\t$(verbose) rm \"$@.git-times.txt\" \"$@.git-time.txt\"\n\ndefine dump_hex_cache_to_erl_term\n  In = \"$(1)/deps/.hex/cache.ets\",\n  Out = \"$(1)/deps/.hex/cache.erl\",\n  {ok, DateStr} = file:read_file(\"$(2)\"),\n  {match, Date} = re:run(DateStr,\n    \"^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})\\.([0-9]{2})\",\n    [{capture, all_but_first, list}]),\n  [Year, Month, Day, Hour, Min, Sec] = [erlang:list_to_integer(V) || V <- Date],\n  {ok, Tab} = ets:file2tab(In),\n  true = ets:insert(Tab, {last_update, {{Year, Month, Day}, {Hour, Min, Sec}}}),\n  Props = [\n    Prop\n    || {Key, _} = Prop <- ets:info(Tab),\n    Key =:= name orelse\n    Key =:= type orelse\n    Key =:= protection orelse\n    Key =:= named_table orelse\n    Key =:= keypos orelse\n    Key =:= heir orelse\n    Key =:= read_concurrency orelse\n    Key =:= write_concurrency orelse\n    Key =:= compressed],\n  Entries = ets:tab2list(Tab),\n  ok = file:write_file(Out, io_lib:format(\"~w.~n~w.~n\", [Props, Entries])),\n  ok = file:delete(In),\n  init:stop().\nendef\n\n$(SOURCE_DIST).manifest: $(SOURCE_DIST)\n\t$(gen_verbose) cd $(dir $(SOURCE_DIST)) && \\\n\t\tfind $(notdir $(SOURCE_DIST)) | LC_COLLATE=C sort > $@\n\nifeq ($(shell tar --version | grep -c \"GNU tar\"),0)\n# Skip all flags if this is Darwin (a.k.a. macOS, a.k.a. OS X)\nifeq ($(shell uname | grep -c \"Darwin\"),0)\nTAR_FLAGS_FOR_REPRODUCIBLE_BUILDS = --uid 0 \\\n\t\t\t\t    --gid 0 \\\n\t\t\t\t    --numeric-owner \\\n\t\t\t\t    --no-acls \\\n\t\t\t\t    --no-fflags \\\n\t\t\t\t    --no-xattrs\nendif\nelse\nTAR_FLAGS_FOR_REPRODUCIBLE_BUILDS = --owner 0 \\\n\t\t\t\t    --group 0 \\\n\t\t\t\t    --numeric-owner\nendif\n\n$(SOURCE_DIST).tar.gz: $(SOURCE_DIST).manifest\n\t$(gen_verbose) cd $(dir $(SOURCE_DIST)) && \\\n\t\t$(TAR) $(TAR_V) $(TAR_FLAGS_FOR_REPRODUCIBLE_BUILDS) --no-recursion -T $(SOURCE_DIST).manifest -cf - | \\\n\t\t$(GZIP) --best > $@\n\n$(SOURCE_DIST).tar.bz2: $(SOURCE_DIST).manifest\n\t$(gen_verbose) cd $(dir $(SOURCE_DIST)) && \\\n\t\t$(TAR) $(TAR_V) $(TAR_FLAGS_FOR_REPRODUCIBLE_BUILDS) --no-recursion -T $(SOURCE_DIST).manifest -cf - | \\\n\t\t$(BZIP2) > $@\n\n$(SOURCE_DIST).tar.xz: $(SOURCE_DIST).manifest\n\t$(gen_verbose) cd $(dir $(SOURCE_DIST)) && \\\n\t\t$(TAR) $(TAR_V) $(TAR_FLAGS_FOR_REPRODUCIBLE_BUILDS) --no-recursion -T $(SOURCE_DIST).manifest -cf - | \\\n\t\t$(XZ) > $@\n\n$(SOURCE_DIST).zip: $(SOURCE_DIST).manifest\n\t$(verbose) rm -f $@\n\t$(gen_verbose) cd $(dir $(SOURCE_DIST)) && \\\n\t\t$(ZIP) $(ZIP_V) --names-stdin $@ < $(SOURCE_DIST).manifest\n\nclean:: clean-source-dist\n\nclean-source-dist:\n\t$(gen_verbose) rm -rf -- $(SOURCE_DIST_BASE)-*\n\ndistclean:: distclean-packages\n\ndistclean-packages:\n\t$(gen_verbose) rm -rf -- $(PACKAGES_DIR)\n\n## If a dependency doesn't have a clean target - do not call it\nclean-unpacked-source-dist:\n\tfor d in deps/*; do \\\n\t\tif test -f $$d/Makefile; then \\\n\t\t\t(! make -n clean) || (make -C $$d clean || exit $$?); \\\n\t\tfi; \\\n\tdone\n\nclean-deps:\n\tgit clean -xfffd deps\n\n# --------------------------------------------------------------------\n# Packaging.\n# --------------------------------------------------------------------\n\n.PHONY: packages package-deb \\\n\tpackage-rpm package-rpm-fedora package-rpm-suse \\\n\tpackage-windows \\\n\tpackage-generic-unix \\\n\tdocker-image\n\n# This variable is exported so sub-make instances know where to find the\n# archive.\nPACKAGES_SOURCE_DIST_FILE ?= $(firstword $(SOURCE_DIST_FILES))\n\nRABBITMQ_PACKAGING_TARGETS = package-deb package-rpm \\\npackage-rpm-redhat package-rpm-fedora package-rpm-rhel6 package-rpm-rhel7 \\\npackage-rpm-rhel8 package-rpm-suse package-rpm-opensuse package-rpm-sles11 \\\npackage-windows\n\nifneq ($(filter $(RABBITMQ_PACKAGING_TARGETS),$(MAKECMDGOALS)),)\nifeq ($(RABBITMQ_PACKAGING_REPO),)\n$(error Cannot find rabbitmq-packaging repository dir; please clone from rabbitmq/rabbitmq-packaging and specify RABBITMQ_PACKAGING_REPO)\nendif\nendif\n\n$(RABBITMQ_PACKAGING_TARGETS): $(PACKAGES_SOURCE_DIST_FILE)\n\t$(verbose) $(MAKE) -C $(RABBITMQ_PACKAGING_REPO) $@ \\\n\t\tSOURCE_DIST_FILE=$(abspath $(PACKAGES_SOURCE_DIST_FILE))\n\npackage-generic-unix \\\ndocker-image: $(PACKAGES_SOURCE_DIST_FILE)\n\t$(verbose) $(MAKE) -C packaging $@ \\\n\t\tSOURCE_DIST_FILE=$(abspath $(PACKAGES_SOURCE_DIST_FILE))\n\npackages: package-deb package-rpm package-windows package-generic-unix\n\n# --------------------------------------------------------------------\n# Installation.\n# --------------------------------------------------------------------\n\n.PHONY: manpages web-manpages distclean-manpages\n\nmanpages web-manpages distclean-manpages:\n\t$(MAKE) -C $(DEPS_DIR)/rabbit $@ DEPS_DIR=$(DEPS_DIR)\n\n.PHONY: install install-erlapp install-scripts install-bin install-man \\\n\tinstall-windows install-windows-erlapp install-windows-scripts \\\n\tinstall-windows-docs\n\nDESTDIR ?=\n\nPREFIX ?= /usr/local\nWINDOWS_PREFIX ?= rabbitmq-server-windows-$(PROJECT_VERSION)\n\nMANDIR ?= $(PREFIX)/share/man\nRMQ_ROOTDIR ?= $(PREFIX)/lib/erlang\nRMQ_BINDIR ?= $(RMQ_ROOTDIR)/bin\nRMQ_LIBDIR ?= $(RMQ_ROOTDIR)/lib\nRMQ_ERLAPP_DIR ?= $(RMQ_LIBDIR)/rabbitmq_server-$(PROJECT_VERSION)\nRMQ_AUTOCOMPLETE_DIR ?= $(RMQ_ROOTDIR)/autocomplete\n\nSCRIPTS = rabbitmq-defaults \\\n\t  rabbitmq-env \\\n\t  rabbitmq-server \\\n\t  rabbitmqctl \\\n\t  rabbitmq-plugins \\\n\t  rabbitmq-diagnostics \\\n\t  rabbitmq-queues \\\n\t  rabbitmq-upgrade \\\n\t  rabbitmq-streams \\\n\t  vmware-rabbitmq\n\nAUTOCOMPLETE_SCRIPTS = bash_autocomplete.sh zsh_autocomplete.sh\n\nWINDOWS_SCRIPTS = rabbitmq-defaults.bat \\\n\t\t  rabbitmq-echopid.bat \\\n\t\t  rabbitmq-env.bat \\\n\t\t  rabbitmq-plugins.bat \\\n\t\t  rabbitmq-diagnostics.bat \\\n\t\t  rabbitmq-queues.bat \\\n\t\t  rabbitmq-server.bat \\\n\t\t  rabbitmq-service.bat \\\n\t\t  rabbitmq-upgrade.bat \\\n\t\t  rabbitmq-streams.bat \\\n\t\t  vmware-rabbitmq.bat \\\n\t\t  rabbitmqctl.bat\n\nUNIX_TO_DOS ?= todos\n\ninst_verbose_0 = @echo \" INST  \" $@;\ninst_verbose = $(inst_verbose_$(V))\n\ninstall: install-erlapp install-scripts\n\ninstall-erlapp: dist\n\t$(verbose) mkdir -p $(DESTDIR)$(RMQ_ERLAPP_DIR)\n\t$(inst_verbose) cp -r \\\n\t\tLICENSE* \\\n\t\t$(DEPS_DIR)/rabbit/INSTALL \\\n\t\t$(DIST_DIR) \\\n\t\t$(DESTDIR)$(RMQ_ERLAPP_DIR)\n\t$(verbose) echo \"Put your EZs here and use rabbitmq-plugins to enable them.\" \\\n\t\t> $(DESTDIR)$(RMQ_ERLAPP_DIR)/$(notdir $(DIST_DIR))/README\n\nCLI_ESCRIPTS_DIR = escript\n\ninstall-escripts:\n\t$(verbose) $(MAKE) -C $(DEPS_DIR)/rabbitmq_cli install \\\n\t\tPREFIX=\"$(RMQ_ERLAPP_DIR)/$(CLI_ESCRIPTS_DIR)\"\n\ninstall-scripts: install-escripts\n\t$(verbose) mkdir -p $(DESTDIR)$(RMQ_ERLAPP_DIR)/sbin\n\t$(inst_verbose) for script in $(SCRIPTS); do \\\n\t\tcp \"$(DEPS_DIR)/rabbit/scripts/$$script\" \\\n\t\t\t\"$(DESTDIR)$(RMQ_ERLAPP_DIR)/sbin\"; \\\n\t\tchmod 0755 \"$(DESTDIR)$(RMQ_ERLAPP_DIR)/sbin/$$script\"; \\\n\tdone\n\n# FIXME: We do symlinks to scripts in $(RMQ_ERLAPP_DIR))/sbin but this\n# code assumes a certain hierarchy to make relative symlinks.\ninstall-bin: install-scripts install-autocomplete-scripts\n\t$(verbose) mkdir -p $(DESTDIR)$(RMQ_BINDIR)\n\t$(inst_verbose) for script in $(SCRIPTS); do \\\n\t\ttest -e $(DESTDIR)$(RMQ_BINDIR)/$$script || \\\n\t\t\tln -sf ../lib/$(notdir $(RMQ_ERLAPP_DIR))/sbin/$$script \\\n\t\t\t $(DESTDIR)$(RMQ_BINDIR)/$$script; \\\n\tdone\n\ninstall-autocomplete-scripts:\n\t$(verbose) mkdir -p $(DESTDIR)$(RMQ_AUTOCOMPLETE_DIR)\n\t$(inst_verbose) for script in $(AUTOCOMPLETE_SCRIPTS); do \\\n\t\tcp \"scripts/$$script\" \\\n\t\t\t\"$(DESTDIR)$(RMQ_AUTOCOMPLETE_DIR)\" && \\\n\t\tchmod 0755 \"$(DESTDIR)$(RMQ_AUTOCOMPLETE_DIR)/$$script\"; \\\n\tdone\n\ninstall-man: manpages\n\t$(inst_verbose) sections=$$(ls -1 $(DEPS_DIR)/rabbit/docs/*.[1-9] \\\n\t\t| sed -E 's/.*\\.([1-9])$$/\\1/' | uniq | sort); \\\n\tfor section in $$sections; do \\\n\t\tmkdir -p $(DESTDIR)$(MANDIR)/man$$section; \\\n\t\tfor manpage in $(DEPS_DIR)/rabbit/docs/*.$$section; do \\\n\t\t\tgzip < $$manpage \\\n\t\t\t > $(DESTDIR)$(MANDIR)/man$$section/$$(basename $$manpage).gz; \\\n\t\tdone; \\\n\tdone\n\ninstall-windows: install-windows-erlapp install-windows-scripts install-windows-docs\n\ninstall-windows-erlapp: dist\n\t$(verbose) mkdir -p $(DESTDIR)$(WINDOWS_PREFIX)\n\t$(inst_verbose) cp -r \\\n\t\tLICENSE* \\\n\t\t$(DEPS_DIR)/rabbit/INSTALL \\\n\t\t$(DIST_DIR) \\\n\t\t$(DESTDIR)$(WINDOWS_PREFIX)\n\t$(verbose) echo \"Put your EZs here and use rabbitmq-plugins.bat to enable them.\" \\\n\t\t> $(DESTDIR)$(WINDOWS_PREFIX)/$(notdir $(DIST_DIR))/README.txt\n\t$(verbose) $(UNIX_TO_DOS) $(DESTDIR)$(WINDOWS_PREFIX)/plugins/README.txt\n\ninstall-windows-escripts:\n\t$(verbose) $(MAKE) -C $(DEPS_DIR)/rabbitmq_cli install \\\n\t\tPREFIX=\"$(WINDOWS_PREFIX)/$(CLI_ESCRIPTS_DIR)\"\n\ninstall-windows-scripts: install-windows-escripts\n\t$(verbose) mkdir -p $(DESTDIR)$(WINDOWS_PREFIX)/sbin\n\t$(inst_verbose) for script in $(WINDOWS_SCRIPTS); do \\\n\t\tcp \"$(DEPS_DIR)/rabbit/scripts/$$script\" \\\n\t\t\t\"$(DESTDIR)$(WINDOWS_PREFIX)/sbin\"; \\\n\t\tchmod 0755 \"$(DESTDIR)$(WINDOWS_PREFIX)/sbin/$$script\"; \\\n\tdone\n\ninstall-windows-docs: install-windows-erlapp\n\t$(verbose) mkdir -p $(DESTDIR)$(WINDOWS_PREFIX)/etc\n\t$(inst_verbose) man $(DEPS_DIR)/rabbit/docs/rabbitmq-service.8 > tmp-readme-service.txt\n\t$(verbose) col -bx < ./tmp-readme-service.txt > $(DESTDIR)$(WINDOWS_PREFIX)/readme-service.txt\n\t$(verbose) rm -f ./tmp-readme-service.txt\n\t$(verbose) for file in \\\n\t $(DESTDIR)$(WINDOWS_PREFIX)/readme-service.txt \\\n\t $(DESTDIR)$(WINDOWS_PREFIX)/LICENSE* \\\n\t $(DESTDIR)$(WINDOWS_PREFIX)/INSTALL; do \\\n\t\t$(UNIX_TO_DOS) \"$$file\"; \\\n\t\tcase \"$$file\" in \\\n\t\t*.txt) ;; \\\n\t\t*.example) ;; \\\n\t\t*) mv \"$$file\" \"$$file.txt\" ;; \\\n\t\tesac; \\\n\tdone\n\nINTERNAL_DEPS := \\\n\t   amqp10_client \\\n\t   amqp10_common \\\n\t   amqp_client \\\n\t   oauth2_client \\\n\t   rabbit_common \\\n\t   rabbitmq_ct_client_helpers \\\n\t   rabbitmq_ct_helpers \\\n\t   rabbitmq_stream_common \\\n\t   trust_store_http\n\nTIER1_PLUGINS := \\\n\t   rabbitmq_amqp_client \\\n\t   rabbitmq_amqp1_0 \\\n\t   rabbitmq_auth_backend_cache \\\n\t   rabbitmq_auth_backend_http \\\n\t   rabbitmq_auth_backend_ldap \\\n\t   rabbitmq_auth_backend_oauth2 \\\n\t   rabbitmq_auth_mechanism_ssl \\\n\t   rabbitmq_aws \\\n\t   rabbitmq_consistent_hash_exchange \\\n\t   rabbitmq_event_exchange \\\n\t   rabbitmq_federation \\\n\t   rabbitmq_federation_management \\\n\t   rabbitmq_federation_prometheus \\\n\t   rabbitmq_jms_topic_exchange \\\n\t   rabbitmq_management \\\n\t   rabbitmq_management_agent \\\n\t   rabbitmq_mqtt \\\n\t   rabbitmq_peer_discovery_aws \\\n\t   rabbitmq_peer_discovery_common \\\n\t   rabbitmq_peer_discovery_consul \\\n\t   rabbitmq_peer_discovery_etcd \\\n\t   rabbitmq_peer_discovery_k8s \\\n\t   rabbitmq_prelaunch \\\n\t   rabbitmq_prometheus \\\n\t   rabbitmq_random_exchange \\\n\t   rabbitmq_recent_history_exchange \\\n\t   rabbitmq_sharding \\\n\t   rabbitmq_shovel \\\n\t   rabbitmq_shovel_management \\\n\t   rabbitmq_shovel_prometheus \\\n\t   rabbitmq_stomp \\\n\t   rabbitmq_stream \\\n\t   rabbitmq_stream_management \\\n\t   rabbitmq_top \\\n\t   rabbitmq_tracing \\\n\t   rabbitmq_trust_store \\\n\t   rabbitmq_web_dispatch \\\n\t   rabbitmq_web_mqtt \\\n\t   rabbitmq_web_mqtt_examples \\\n\t   rabbitmq_web_stomp \\\n\t   rabbitmq_web_stomp_examples\n\nYTT ?= ytt\n\nactions-workflows: .github/workflows/test.yaml .github/workflows/test-mixed-versions.yaml\n\n.PHONY: .github/workflows/test.yaml .github/workflows/test-mixed-versions.yaml\n\n.github/workflows/test.yaml: .github/workflows/templates/test.template.yaml\n\t$(gen_verbose) $(YTT) \\\n\t\t--file $< \\\n\t\t--data-value-yaml internal_deps=[$(subst $(space),$(comma),$(foreach s,$(INTERNAL_DEPS),\"$s\"))] \\\n\t\t--data-value-yaml tier1_plugins=[$(subst $(space),$(comma),$(foreach s,$(TIER1_PLUGINS),\"$s\"))] \\\n\t\t| sed 's/^true:/on:/' \\\n\t\t| sed 's/pull_request: null/pull_request:/'> $@\n\n.github/workflows/test-mixed-versions.yaml: .github/workflows/templates/test-mixed-versions.template.yaml\n\t$(gen_verbose) $(YTT) \\\n\t\t--file $< \\\n\t\t--data-value-yaml internal_deps=[$(subst $(space),$(comma),$(foreach s,$(INTERNAL_DEPS),\"$s\"))] \\\n\t\t--data-value-yaml tier1_plugins=[$(subst $(space),$(comma),$(foreach s,$(TIER1_PLUGINS),\"$s\"))] \\\n\t\t| sed 's/^true:/on:/' \\\n\t\t| sed 's/pull_request: null/pull_request:/'> $@\n"
        },
        {
          "name": "PKG_LINUX.md",
          "type": "blob",
          "size": 1.3115234375,
          "content": "# Build RabbitMQ Packages using Linux\n\n\n## Environment\n\nDebian Jesse using this `Vagrantfile`:\n\n```\n$script = <<SCRIPT\nexport LANG='C.UTF-8'\nexport DEBIAN_FRONTEND=noninteractive\n\necho 'deb http://cdn-fastly.deb.debian.org/debian jessie-backports main' >> /etc/apt/sources.list.d/backports.list\n\nwget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb\ndpkg -i erlang-solutions_1.0_all.deb\n\napt-get clean\napt-get update\napt-get install -y --fix-missing --no-install-recommends \\\n\tbuild-essential \\\n\tca-certificates \\\n\tdebhelper \\\n\tdh-systemd \\\n\telinks \\\n\tesl-erlang \\\n\telixir \\\n\tfakeroot \\\n\tgit \\\n\tlibfile-fcntllock-perl \\\n\tmandoc \\\n\tnsis \\\n\tpython-lxml \\\n\tpython-markdown \\\n\tpython-simplejson \\\n\trpm \\\n\trsync \\\n\ttofrodos \\\n\tunzip \\\n\txmlto \\\n\txsltproc \\\n\tzip \\\n\tcurl\ndate > /etc/vagrant_provisioned_at\nSCRIPT\n\nVagrant.configure('2') do |config|\n  config.vm.box = \"debian/jessie64\"\n  config.vm.hostname = 'DEBIAN-JESSIE64'\n  config.vm.provision 'shell', inline: $script\nend\n```\n\n## Instructions\n\nBring up a Debian Jesse instance using Vagrant, or, use the provisioning script\non a Debian Jesse server of your own. When it is done running, all necessary\npackage build requirements for either `apt`-based or `rpm`-based distros will\nbe present. See the [`README.md`](README.md#tldr) document for instructions on\nbuilding packages.\n"
        },
        {
          "name": "PKG_WINDOWS.md",
          "type": "blob",
          "size": 2.8720703125,
          "content": "# Build RabbitMQ Windows Package using Windows\n\n## Environment\n\nWindows 8.1 using this `Vagrantfile`:\n\n```\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"inclusivedesign/windows81-eval-x64\"\n  config.vm.provider \"virtualbox\" do |v|\n    v.gui = true\n  end\nend\n```\n\nNote that these steps should work on more recent versions of Windows as well.\nIf you have issues using a newer version of Windows, please provide full\ndetails in a message to the\n[`rabbitmq-users`](https://groups.google.com/forum/#!forum/rabbitmq-users)\nmailing list.\n\n## Initial Steps\n\nBring up the VM and go through the process of updating Windows and (optionall)\nVirtualBox tools. You'll notice that the evaluation license is expired. Re-arm\nit by running this command via an administrative prompt:\n\n```\nslmgr -rearm\n```\n\nThis part of the process will take a while as Windows is updated. Go make some\ncoffee and check your email.\n\n## Install Erlang and Elixir\n\nUsing Chocolatey is the easiest method to install the most recent version of\nErlang and Elixir. Install Chocolatey [using these\ninstructions](https://chocolatey.org/install#installing-chocolatey)\n([link](https://chocolatey.org/install#installing-chocolatey)), then install\nboth Erlang and Elixir using this command from an *administrative* `cmd.exe` or\nPowershell terminal:\n\n```\nchoco install elixir which\n```\n\nTo confirm installation, open a new command prompt and run the following:\n\n```\nerl -version\nelixir -v\nwhich erl\nwhich elixir\n```\n\n## Install MSYS2 and NSIS\n\nChocolatey is also an easy way to install `msys2` and the NSIS install script\nbuilder. Run the following from an *administrative* command prompt:\n\n```\nchoco install msys2 nsis\n```\n\nAs a bonus, it will update your `msys2` installation for you during the initial\ninstall process.\n\n## Install MSYS2 packages\n\nStart up an `msys2` shell by running the following command (does not have to be\nadmin):\n\n```\nC:\\tools\\msys64\\msys2_shell.cmd\n```\n\nIn that shell, install all of these dependencies. If you are prompted for\ninput, just hit ENTER to choose the default:\n\n```\npacman -S --needed git make tar rsync python zip unzip dos2unix man\n```\n\n## Build RabbitMQ\n\n### Clone this repository\n\nFrom within your MSYS2 shell:\n\n```\ngit clone https://github.com/rabbitmq/rabbitmq-server-release.git\n```\n\n### Set `PATH`\n\n```\nexport PATH=\"$PATH:/c/ProgramData/Chocolatey/bin:/c/ProgramData/Chocolatey/lib/Elixir/bin:/c/Program Files (x86)/NSIS/bin\"\n```\n\n### Fetch and build deps\n\n*Note:* as of this writing, RabbitMQ `3.7.8` is the latest version. Be sure to check out the tag appropriate for your use:\n\n```\ncd rabbitmq-server-release\n\n# the following checks out the \"next to be released\" branch\n# this branch and version 3.7.9 have a necessary fix for building\n# on windows, see this: https://github.com/rabbitmq/rabbitmq-server-release/pull/89\n\ngit checkout v3.7.x\n\nmake deps\n```\n\n### Build Windows package\n\n```\nmake UNIX_TO_DOS=unix2dos package-windows\n```\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.5185546875,
          "content": "[![Test](https://github.com/rabbitmq/rabbitmq-server/actions/workflows/test.yaml/badge.svg)](https://github.com/rabbitmq/rabbitmq-server/actions/workflows/test.yaml)\n\n# RabbitMQ Server\n\n[RabbitMQ](https://rabbitmq.com) is a [feature rich](https://www.rabbitmq.com/docs),\nmulti-protocol messaging and streaming broker. It supports:\n\n * AMQP 0-9-1\n * AMQP 1.0\n * [RabbitMQ Stream Protocol](https://www.rabbitmq.com/docs/streams)\n * MQTT 3.1, 3.1.1, and 5.0\n * STOMP 1.0 through 1.2\n * [MQTT over WebSockets](https://www.rabbitmq.com/docs/web-mqtt)\n * [STOMP over WebSockets](https://www.rabbitmq.com/docs/web-stomp)\n\n\n## Installation\n\n * [Currently supported](https://www.rabbitmq.com/release-information) released series\n * [Installation guides](https://www.rabbitmq.com/docs/download) for various platforms\n * [Kubernetes Cluster Operator](https://www.rabbitmq.com/kubernetes/operator/operator-overview)\n * [Changelog](https://www.rabbitmq.com/release-information)\n * [Releases](https://github.com/rabbitmq/rabbitmq-server/releases) on GitHub\n * [Community Support Eligibility Policy](https://github.com/rabbitmq/rabbitmq-server/blob/main/COMMUNITY_SUPPORT.md)\n * [Supported Erlang versions](https://www.rabbitmq.com/docs/which-erlang)\n\n\n## Tutorials and Documentation\n\n * [RabbitMQ tutorials](https://www.rabbitmq.com/tutorials) and their [executable versions on GitHub](https://github.com/rabbitmq/rabbitmq-tutorials)\n * [Documentation guides](https://rabbitmq.com/docs/)\n * [RabbitMQ blog](https://blog.rabbitmq.com/)\n\nSome key doc guides include\n\n * [CLI tools guide](https://www.rabbitmq.com/docs/cli)\n * [Clustering](https://www.rabbitmq.com/docs/clustering) and [Cluster Formation](https://www.rabbitmq.com/docs/cluster-formation)\n * [Configuration guide](https://www.rabbitmq.com/docs/configure)\n * [Client libraries and tools](https://www.rabbitmq.com/client-libraries/devtools)\n * [Monitoring](https://www.rabbitmq.com/docs/monitoring) and [Prometheus/Grafana](https://www.rabbitmq.com/docs/prometheus)\n * [Upgrading](https://www.rabbitmq.com/docs/upgrade)\n * [Kubernetes Cluster Operator](https://www.rabbitmq.com/kubernetes/operator/operator-overview)\n * [Production checklist](https://www.rabbitmq.com/docs/production-checklist)\n * [Quorum queues](https://www.rabbitmq.com/docs/quorum-queues): a replicated, data safety- and consistency-oriented queue type\n * [Streams](https://www.rabbitmq.com/docs/streams): a persistent and replicated append-only log with non-destructive consumer semantics\n * [Runtime Parameters and Policies](https://www.rabbitmq.com/docs/parameters)\n * [Runnable tutorials](https://github.com/rabbitmq/rabbitmq-tutorials/)\n\nRabbitMQ documentation is also [developed on GitHub](https://github.com/rabbitmq/rabbitmq-website/).\n\n## Commercial Features and Support\n\n * [Commercial editions of RabbitMQ](https://tanzu.vmware.com/rabbitmq)\n * [Commercial edition for Kubernetes](https://docs.vmware.com/en/VMware-RabbitMQ-for-Kubernetes/1/rmq/installation.html)\n * [Commercial support](https://tanzu.vmware.com/rabbitmq/oss) from [Broadcom](https://vmware.com) for open source RabbitMQ\n\n## Getting Help from the Community\n\nPlease read the [Community Support Eligibility Policy](https://github.com/rabbitmq/rabbitmq-server/blob/main/COMMUNITY_SUPPORT.md) document\nfirst.\n\nThe recommended community forums are\n\n * [GitHub Discussions](https://github.com/rabbitmq/rabbitmq-server/discussions/)\n * [Community Discord server](https://rabbitmq.com/discord/)\n * `#rabbitmq` on [Libera Chat](https://libera.chat/)\n\n\n## Contributing\n\nSee [CONTRIBUTING.md](./CONTRIBUTING.md) and our [development process overview](https://www.rabbitmq.com/github).\n\nQuestions about contributing, internals and so on are very welcome in [GitHub Discussions](https://github.com/rabbitmq/rabbitmq-server/discussions)\nor [community Discord server](https://www.rabbitmq.com/discord/) in the `core-and-plugin-dev` channel.\n\n\n## Licensing\n\nRabbitMQ server is [licensed under the MPL 2.0](LICENSE-MPL-RabbitMQ).\n\n[Community Support Eligibility Policy](https://github.com/rabbitmq/rabbitmq-server/blob/main/COMMUNITY_SUPPORT.md)\ndocument explains the open source RabbitMQ support policy adopted by the RabbitMQ Core Team.\n\n\n## Building From Source and Packaging\n\n * [Contributor resources](https://github.com/rabbitmq/contribute)\n * [Building RabbitMQ from Source](https://www.rabbitmq.com/docs/build-server)\n * [Building RabbitMQ Distribution Packages](https://www.rabbitmq.com/docs/build-server)\n\n\n## Copyright\n\n(c) 2007-2025 Broadcom. All Rights Reserved. The term “Broadcom” refers to Broadcom Inc. and/or its subsidiaries.\n"
        },
        {
          "name": "SERVER_RELEASES.md",
          "type": "blob",
          "size": 7.75,
          "content": "# RabbitMQ server releases\n\nThis repository provides scripts and Makefiles we use to create RabbitMQ\nserver releases. It is organized in the following way:\n* The top-level `Makefile` manages the source archive.\n* There is a subdirectory inside `packaging` for each type of package we\n support.\n\n## TL;DR\n\n* To create a source archive and all supported packages:\n\n    ```\n    make packages\n    ```\n\n* To create a source archive and all supported packages, with a given version:\n\n    ```\n    make packages PROJECT_VERSION=3.13.0-rc.3\n    ```\n\n* To create all suported packages from an existing source archive:\n\n    ```\n    make -C packaging SOURCE_DIST_FILE=/path/to/rabbitmq-server-3.13.0-rc.3.tar.xz\n    ```\n\nThe standalone package is different because it embeds the build\nplatform's Erlang copy. Thus on Linux for instance, only the\n`linux-x86_64` standalone package will be built. To build the OS X\nstandalone package, you need to run the following command on an OS X\nbuild host:\n\n```\nmake package-standalone-macosx\n# or\nmake -C packaging package-standalone-macosx SOURCE_DIST_FILE=/path/to/rabbitmq-server-3.13.0-rc.3.tar.xz\n```\n\nThe instructions in the [`PKG_LINUX.md`](PKG_LINUX.md) document include a\nscript to install the necessary pre-requisites for building package archives as\nwell as `deb` and `rpm` packages.\n\n## Source archive\n\n### How to create it\n\nThe source archive is created with the following command:\n```\nmake source-dist\n```\n\nIt uses Erlang.mk's `PROJECT_VERSION` variable to set the version of the\nsource archive. If the variable is unset, Erlang.mk computes a value\nbased on the last tag and the current HEAD.\n\nHere is an example with an explicit version:\n```\nmake source-dist PROJECT_VERSION=3.13.0-rc.3\n```\n\nThe version is automatically propagated to the broker and plugins so\nthey all advertise the same version.\n\nThe result is then available in the `PACKAGES` subdirectory. You can\noverride the output directory with the `PACKAGES_DIR` variable:\n```\nmake source-dist PROJDCT_VERSION=3.13.0-rc.3 \\\n  PACKAGES_DIR=/tmp\n```\n\nBy default, two archives are produced:\n* a `tar.xz` file;\n* a `zip` file.\n\nYou can ask for more/different types by specifying the\n`SOURCE_DIST_SUFFIXES` variable:\n```\nmake source-dist PROJECT_VERSION=3.13.0-rc.3 \\\n  SOURCE_DIST_SUFFIXES='tar.xz tar.gz'\n```\n\nSupported archive types are:\n* `tar.bz2`;\n* `tar.gz`;\n* `tar.xz`;\n* `zip`.\n\n### What is included\n\nThe source archive includes the broker and a set of plugins. The default\nlist of plugins is in the `plugins.mk` file.\n\nYou can override this list by setting the `PLUGINS` variable to the list\nyou want:\n```\nmake source-dist PROJECT_VERSION=3.13.0-rc.3 \\\n  PLUGINS='rabbitmq_shovel rabbitmq_rabbitmq_shovel_management'\n```\n\nDependencies are automatically included.\n\n## Packages\n\nPackages can be built with an existing source archive or create the\nsource archive automatically.\n\nIf you want to use an existing archive, use `packaging/Makefile`:\n```\nmake -C packaging package-$type \\\n  SOURCE_DIST_FILE=/path/to/rabbitmq-server-$version.tar.xz \\\n  ...\n```\n\nThis has the following rules:\n* The archive must be a `tar.xz` file.\n* It can automatically take the only archive available under `PACKAGES`.\n However, if there is none or multiple archive, you must specify the\n `SOURCE_DIST_FILE` variable.\n\nIf you want the source archive to be created automatically, use the\ntop-level `Makefile`:\n```\nmake package-$type PROJECT_VERSION=3.13.0-rc.3 ...\n```\n\nPackages are written to `PACKAGES_DIR`, like the source archive.\n\nEach package type is further described separately because most of them\nhave versioning specificities.\n\n### `generic-unix` package\n\nTo create it:\n```\nmake package-generic-unix\n```\n\nThere is no package revision, only the project version and no\nrestriction on it.\n\n`packaging/generic-unix/Makefile` tries to determine the version based\non the source archive filename. If it fails, you can specify the version\nwith the `VERSION` variable:\n```\nmake -C packaging package-generic-unix \\\n  SOURCE_DIST_FILE=rabbitmq-server.tar.xz \\\n  VERSION=3.13.0-rc.3\n```\n\n### Debian package\n\nTo create it:\n```\nmake package-deb\n```\n\nThe package may have a different versioning than the project and may\ninclude an additional package revision. In particular, the package\nversion can't have any `-` characters.\n\n`packaging/debs/Debian/Makefile` tries to determine the version based\non the source archive filename. If it fails, you can specify the version\nwith the `VERSION` variable:\n```\nmake -C packaging package-deb \\\n  SOURCE_DIST_FILE=rabbitmq-server.tar.xz \\\n  VERSION=3.13.0-rc.3\n```\n\nBy default, the package version is converted from `VERSION` with\nall `-` characters replaced by `~` (eg. `3.13.0~rc.1` in the example\nabove). If you want to override that conversion, you can specify the\n`DEBIAN_VERSION` variable:\n```\nmake -C packaging package-deb \\\n  SOURCE_DIST_FILE=rabbitmq-server.tar.xz \\\n  VERSION=3.13.0-rc.3\n  DEBIAN_VERSION=3.13.0~rc.1\n```\n\n### RPM package\n\nWe support RedHat and OpenSUSE RPM packages and both are created by default:\n\nTo create them:\n```\nmake package-rpm\n```\n\nYou can create a single one with:\n```\nmake package-rpm-fedora\nmake package-rpm-suse\n```\n\nRPM packages have the same restrictions as Debian packages and use the\nsame default version conversion. To override the converted version, use\nthe `RPM_VERSION` variable. See the \"Debian package\" section above for\nmore details.\n\n`packaging/RPMS/Fedora/Makefile`, which handles both RedHar and OpenSUSE\nflavors, accepts the `RPM_OS` variable to set the flavor. It can be:\n* `fedora`;\n* `suse`.\n\n### Windows package\n\nWe create two artefacts:\n\n* a Zip archive, resembling the `generic-unix` package;\n* an installer.\n\nTo create them:\n\n```\nmake package-windows\n```\n\nTo create them separately:\n\n```\nmake -C packaging/windows     # the Zip archive\nmake -C packaging/windows-exe # the installer\n```\n\nThe Zip archive has no package revision, only the project version and no\nrestriction on it. It supports the same `VERSION` as the `generic-unix`\npackage.\n\nThe installer requires a *product version* which must be 4 integers\nseparated by `.` characters. Furthermore, unlike other packages, this\none requires the Zip archive as its input, not the source archive.\n\nSo you need to built the Zip archive first, then the installer. You can\nspecify the path to the Zip archive using the `ZIP` variable:\n\n```\nmake -C packaging/windows-exe ZIP=/path/to/rabbitmq-server-windows.zip\n```\n\nBy default, the *product version* is the project version where\neverything following the third integer was replaced by `.0`. Thus it's\nonly fine if the version is a semver-based version (eg. 3.13.0-pre.3 or\n3.8.2). If the version doesn't conform to that, you need to set the\n`PRODUCT_VERSION` variable:\n\n```\nmake package-windows PROJECT_VERSION=3.13.0-rc.3 PRODUCT_VERSION=3.13.0.0\n```\n\nTo build the Windows package using a Windows machine, follow the\ninstructions in [`PKG_WINDOWS.md`](PKG_WINDOWS.md).\n\n### Building all packages in one go\n\nIf you want to build all packages in one command, you can use the\nfollowing helpers:\n```\n# Automatically creates the source archive.\nmake packages\n\n# Use an existing archive.\nmake -C packaging package SOURCE_DIST_FILE=...\n```\n\nHowever, be careful with the versioning! Because all package have\nincompatible requirements, you can only use a version with 3 integers\n(like a final semver-based version):\n```\nmake packages PROJECT_VERSION=3.13.0\nmake -C packaging packages SOURCE_DIST_FILE=rabbitmq-server-3.13.0.tar.xz\n```\n\nIf you do not follow that rule, the build will fail one way or another;\nprobably in the Windows package because of the *product version*\nrestrictions.\n\nAnother possibility is to specify the Windows *product version* and\nrely on automatic conversion for Debian and RPM packages (or use the\n`DEBIAN_VERSION` and `RPM_VERSION` variables), but this is untested:\n```\nmake packages PROJECT_VERSION=3.13.0-rc.3 PRODUCT_VERSION=3.13.0.0\n```\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 1.3984375,
          "content": "workspace(name = \"rabbitmq-server\")\n\nload(\"@bazel_tools//tools/build_defs/repo:git.bzl\", \"git_repository\", \"new_git_repository\")\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\", \"http_file\")\n\nhttp_archive(\n    name = \"rules_pkg\",\n    sha256 = \"d250924a2ecc5176808fc4c25d5cf5e9e79e6346d79d5ab1c493e289e722d1d0\",\n    urls = [\n        \"https://mirror.bazel.build/github.com/bazelbuild/rules_pkg/releases/download/0.10.1/rules_pkg-0.10.1.tar.gz\",\n        \"https://github.com/bazelbuild/rules_pkg/releases/download/0.10.1/rules_pkg-0.10.1.tar.gz\",\n    ],\n)\n\nload(\"@rules_pkg//:deps.bzl\", \"rules_pkg_dependencies\")\n\nrules_pkg_dependencies()\n\ngit_repository(\n    name = \"rules_erlang\",\n    remote = \"https://github.com/rabbitmq/rules_erlang.git\",\n    tag = \"3.15.1\",\n)\n\nload(\"@rules_erlang//:internal_deps.bzl\", \"rules_erlang_internal_deps\")\n\nrules_erlang_internal_deps()\n\nload(\"@rules_erlang//:internal_setup.bzl\", \"rules_erlang_internal_setup\")\n\nrules_erlang_internal_setup(go_repository_default_config = \"//:WORKSPACE\")\n\nload(\"@rules_erlang//gazelle:deps.bzl\", \"gazelle_deps\")\n\ngazelle_deps()\n\nnew_git_repository(\n    name = \"bats\",\n    build_file = \"@//:BUILD.bats\",\n    remote = \"https://github.com/sstephenson/bats\",\n    tag = \"v0.4.0\",\n)\n\nload(\"//deps/amqp10_client:activemq.bzl\", \"activemq_archive\")\n\nactivemq_archive()\n\nload(\"//bazel/bzlmod:secondary_umbrella.bzl\", \"secondary_umbrella\")\n\nsecondary_umbrella()\n"
        },
        {
          "name": "bazel",
          "type": "tree",
          "content": null
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist.bzl",
          "type": "blob",
          "size": 9.921875,
          "content": "load(\"@rules_pkg//pkg:mappings.bzl\", \"pkg_attributes\", \"pkg_files\")\nload(\"@rules_pkg//:pkg.bzl\", \"pkg_tar\")\nload(\"@rules_erlang//:erlang_app_info.bzl\", \"ErlangAppInfo\", \"flat_deps\")\nload(\"@rules_erlang//:util.bzl\", \"path_join\")\nload(\"@rules_erlang//:ct.bzl\", \"additional_file_dest_relative_path\")\nload(\n    \"@rules_erlang//tools:erlang_toolchain.bzl\",\n    \"erlang_dirs\",\n    \"maybe_install_erlang\",\n)\nload(\"@rules_erlang//:source_tree.bzl\", \"source_tree\")\nload(\n    \":rabbitmq_home.bzl\",\n    \"RABBITMQ_HOME_ATTRS\",\n    \"copy_escript\",\n    \"flatten\",\n)\nload(\n    \":rabbitmq.bzl\",\n    \"APP_VERSION\",\n)\n\ndef _collect_licenses_impl(ctx):\n    srcs = ctx.files.srcs + flatten([\n        d[ErlangAppInfo].license_files\n        for d in flat_deps(ctx.attr.deps)\n    ])\n\n    outs = {}\n    for src in srcs:\n        name = src.basename\n        if name not in outs:\n            dest = ctx.actions.declare_file(name)\n            ctx.actions.run(\n                inputs = [src],\n                outputs = [dest],\n                executable = \"cp\",\n                arguments = [\n                    src.path,\n                    dest.path,\n                ],\n            )\n            outs[name] = dest\n\n    return [\n        DefaultInfo(\n            files = depset(sorted(outs.values())),\n        ),\n    ]\n\ncollect_licenses = rule(\n    implementation = _collect_licenses_impl,\n    attrs = {\n        \"srcs\": attr.label_list(allow_files = True),\n        \"deps\": attr.label_list(providers = [ErlangAppInfo]),\n    },\n)\n\ndef _copy_script(ctx, script):\n    dest = ctx.actions.declare_file(path_join(ctx.label.name, \"sbin\", script.basename))\n    ctx.actions.expand_template(\n        template = script,\n        output = dest,\n        substitutions = {\n            \"SYS_PREFIX=\": \"SYS_PREFIX=${RABBITMQ_HOME}\",\n        },\n    )\n    return dest\n\ndef _sbin_dir_private_impl(ctx):\n    scripts = [_copy_script(ctx, script) for script in ctx.files._scripts]\n\n    return [\n        DefaultInfo(\n            files = depset(scripts),\n        ),\n    ]\n\ndef _escript_dir_private_impl(ctx):\n    escripts = [copy_escript(ctx, escript) for escript in ctx.files._escripts]\n\n    return [\n        DefaultInfo(\n            files = depset(escripts),\n        ),\n    ]\n\nsbin_dir_private = rule(\n    implementation = _sbin_dir_private_impl,\n    attrs = RABBITMQ_HOME_ATTRS,\n)\n\nescript_dir_private = rule(\n    implementation = _escript_dir_private_impl,\n    attrs = RABBITMQ_HOME_ATTRS,\n)\n\ndef sbin_dir(**kwargs):\n    sbin_dir_private(\n        is_windows = select({\n            \"@bazel_tools//src/conditions:host_windows\": True,\n            \"//conditions:default\": False,\n        }),\n        **kwargs\n    )\n\ndef escript_dir(**kwargs):\n    escript_dir_private(\n        is_windows = select({\n            \"@bazel_tools//src/conditions:host_windows\": True,\n            \"//conditions:default\": False,\n        }),\n        **kwargs\n    )\n\ndef _extract_version(lib_info):\n    for f in lib_info.beam:\n        if f.basename.endswith(\".app\"):\n            return \"erl -eval '{ok, [{application, _, AppInfo}]} = file:consult(\\\"\" + f.path + \"\\\"), Version = proplists:get_value(vsn, AppInfo), io:fwrite(Version), halt().' -noshell\"\n    if len(lib_info.beam) == 1 and lib_info.beam[0].is_directory:\n        return \"erl -eval '{ok, [{application, _, AppInfo}]} = file:consult(\\\"\" + lib_info.beam[0].path + \"/\" + lib_info.app_name + \".app\\\"), Version = proplists:get_value(vsn, AppInfo), io:fwrite(Version), halt().' -noshell\"\n    fail(\"could not find .app file in\", lib_info.beam)\n\ndef _versioned_plugins_dir_impl(ctx):\n    plugins = flat_deps(ctx.attr.plugins)\n\n    plugins_dir = ctx.actions.declare_directory(path_join(ctx.label.name, \"plugins\"))\n\n    (erlang_home, _, runfiles) = erlang_dirs(ctx)\n\n    inputs = runfiles.files.to_list()\n\n    commands = [\n        \"set -euo pipefail\",\n        \"\",\n        maybe_install_erlang(ctx),\n    ]\n\n    commands.append(\n        \"echo 'Put your EZs here and use rabbitmq-plugins to enable them.' > {plugins_dir}/README\".format(\n            plugins_dir = plugins_dir.path,\n        )\n    )\n\n    for plugin in plugins:\n        lib_info = plugin[ErlangAppInfo]\n        version = _extract_version(lib_info)\n        commands.append(\"PLUGIN_VERSION=$({erlang_home}/bin/{version})\".format(\n            erlang_home = erlang_home,\n            version = version,\n        ))\n\n        commands.append(\n            \"mkdir -p {plugins_dir}/{lib_name}-$PLUGIN_VERSION/include\".format(\n                plugins_dir = plugins_dir.path,\n                lib_name = lib_info.app_name,\n            ),\n        )\n        for f in lib_info.include:\n            commands.append(\n                \"cp {src} {plugins_dir}/{lib_name}-$PLUGIN_VERSION/include/{dest}\".format(\n                    src = f.path,\n                    plugins_dir = plugins_dir.path,\n                    lib_name = lib_info.app_name,\n                    dest = f.basename,\n                ),\n            )\n        inputs.extend(lib_info.include)\n\n        commands.append(\n            \"mkdir -p {plugins_dir}/{lib_name}-$PLUGIN_VERSION/ebin\".format(\n                plugins_dir = plugins_dir.path,\n                lib_name = lib_info.app_name,\n            ),\n        )\n        for f in lib_info.beam:\n            if f.is_directory:\n                if f.basename != \"ebin\":\n                    fail(\"{} contains a directory in 'beam' that is not an ebin dir\".format(lib_info.app_name))\n                commands.append(\n                    \"cp -R {src} {plugins_dir}/{lib_name}-$PLUGIN_VERSION\".format(\n                        src = f.path,\n                        plugins_dir = plugins_dir.path,\n                        lib_name = lib_info.app_name,\n                    ),\n                )\n            else:\n                commands.append(\n                    \"cp {src} {plugins_dir}/{lib_name}-$PLUGIN_VERSION/ebin/{dest}\".format(\n                        src = f.path,\n                        plugins_dir = plugins_dir.path,\n                        lib_name = lib_info.app_name,\n                        dest = f.basename,\n                    ),\n                )\n        inputs.extend(lib_info.beam)\n\n        for f in lib_info.priv:\n            p = additional_file_dest_relative_path(plugin.label, f)\n            commands.append(\n                \"mkdir -p $(dirname {plugins_dir}/{lib_name}-$PLUGIN_VERSION/{dest}) && cp {src} {plugins_dir}/{lib_name}-$PLUGIN_VERSION/{dest}\".format(\n                    src = f.path,\n                    plugins_dir = plugins_dir.path,\n                    lib_name = lib_info.app_name,\n                    dest = p,\n                ),\n            )\n        inputs.extend(lib_info.priv)\n\n        commands.append(\"\")\n\n    ctx.actions.run_shell(\n        inputs = inputs,\n        outputs = [plugins_dir],\n        command = \"\\n\".join(commands),\n    )\n\n    return [\n        DefaultInfo(\n            files = depset([plugins_dir]),\n        ),\n    ]\n\nversioned_plugins_dir_private = rule(\n    implementation = _versioned_plugins_dir_impl,\n    attrs = RABBITMQ_HOME_ATTRS,\n    toolchains = [\"@rules_erlang//tools:toolchain_type\"],\n)\n\ndef versioned_plugins_dir(**kwargs):\n    versioned_plugins_dir_private(\n        is_windows = select({\n            \"@bazel_tools//src/conditions:host_windows\": True,\n            \"//conditions:default\": False,\n        }),\n        **kwargs\n    )\n\ndef package_generic_unix(\n        name = \"package-generic-unix\",\n        extension = \"tar.xz\",\n        plugins = None,\n        extra_licenses = [],\n        package_dir = \"rabbitmq_server-{}\".format(APP_VERSION)):\n    collect_licenses(\n        name = \"licenses\",\n        srcs = [\n            Label(\"@rabbitmq-server//:root-licenses\"),\n        ] + extra_licenses,\n        deps = plugins,\n    )\n\n    pkg_files(\n        name = \"license-files\",\n        srcs = [\n            \":licenses\",\n            Label(\"@rabbitmq-server//deps/rabbit:INSTALL\"),\n        ],\n        visibility = [\"//visibility:public\"],\n    )\n\n    sbin_dir(\n        name = \"sbin-dir\",\n    )\n\n    pkg_files(\n        name = \"sbin-files\",\n        srcs = [\n            \":sbin-dir\",\n        ],\n        attributes = pkg_attributes(mode = \"0755\"),\n        prefix = \"sbin\",\n    )\n\n    escript_dir(\n        name = \"escript-dir\",\n    )\n\n    pkg_files(\n        name = \"escript-files\",\n        srcs = [\n            \":escript-dir\",\n        ],\n        attributes = pkg_attributes(mode = \"0755\"),\n        prefix = \"escript\",\n    )\n\n    versioned_plugins_dir(\n        name = \"plugins-dir\",\n        plugins = plugins,\n    )\n\n    pkg_files(\n        name = \"plugins-files\",\n        srcs = [\n            \":plugins-dir\",\n        ],\n    )\n\n    pkg_tar(\n        name = name,\n        extension = extension,\n        package_dir = package_dir,\n        visibility = [\"//visibility:public\"],\n        srcs = [\n            \":escript-files\",\n            \":sbin-files\",\n            \":plugins-files\",\n            \":license-files\",\n            Label(\"@rabbitmq-server//:release-notes-files\"),\n            Label(\"@rabbitmq-server//:scripts-files\"),\n        ],\n        deps = [\n            Label(\"@rabbitmq-server//deps/rabbit:manpages-dir\"),\n        ],\n    )\n\ndef source_archive(\n        name = \"source_archive\",\n        extension = \"tar.xz\",\n        plugins = None):\n    source_tree(\n        name = \"source-tree\",\n        deps = plugins + [\n            Label(\"@rabbitmq-server//deps/rabbitmq_cli:erlang_app\"),\n        ],\n    )\n\n    pkg_files(\n        name = \"deps-files\",\n        srcs = [\n            \":source-tree\",\n        ],\n        strip_prefix = \"source-tree\",\n        prefix = \"deps\",\n    )\n\n    pkg_files(\n        name = \"json-files\",\n        srcs = [\n            \"@json//:sources\",\n        ],\n        strip_prefix = \"\",\n        prefix = \"deps/json\",\n    )\n\n    pkg_files(\n        name = \"csv-files\",\n        srcs = [\n            \"@csv//:sources\",\n        ],\n        strip_prefix = \"\",\n        prefix = \"deps/csv\",\n    )\n\n    pkg_tar(\n        name = name,\n        extension = extension,\n        srcs = [\n            \":deps-files\",\n            \":json-files\",\n            \":csv-files\",\n            Label(\"@rabbitmq-server//:root-licenses\"),\n        ],\n        visibility = [\"//visibility:public\"],\n    )\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "erlang.mk",
          "type": "blob",
          "size": 248.1611328125,
          "content": "# Copyright (c) 2013-2016, Loïc Hoguin <essen@ninenines.eu>\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n.PHONY: all app apps deps search rel relup docs install-docs check tests clean distclean help erlang-mk\n\nERLANG_MK_FILENAME := $(realpath $(lastword $(MAKEFILE_LIST)))\nexport ERLANG_MK_FILENAME\n\nERLANG_MK_VERSION = 2022.05.31-72-gb8a27ab-dirty\nERLANG_MK_WITHOUT = \n\n# Make 3.81 and 3.82 are deprecated.\n\nifeq ($(MAKELEVEL)$(MAKE_VERSION),03.81)\n$(warning Please upgrade to GNU Make 4 or later: https://erlang.mk/guide/installation.html)\nendif\n\nifeq ($(MAKELEVEL)$(MAKE_VERSION),03.82)\n$(warning Please upgrade to GNU Make 4 or later: https://erlang.mk/guide/installation.html)\nendif\n\n# Core configuration.\n\nPROJECT ?= $(notdir $(CURDIR))\nPROJECT := $(strip $(PROJECT))\n\nPROJECT_VERSION ?= rolling\nPROJECT_MOD ?= $(PROJECT)_app\nPROJECT_ENV ?= []\n\n# Verbosity.\n\nV ?= 0\n\nverbose_0 = @\nverbose_2 = set -x;\nverbose = $(verbose_$(V))\n\nifeq ($(V),3)\nSHELL := $(SHELL) -x\nendif\n\ngen_verbose_0 = @echo \" GEN   \" $@;\ngen_verbose_2 = set -x;\ngen_verbose = $(gen_verbose_$(V))\n\ngen_verbose_esc_0 = @echo \" GEN   \" $$@;\ngen_verbose_esc_2 = set -x;\ngen_verbose_esc = $(gen_verbose_esc_$(V))\n\n# Temporary files directory.\n\nERLANG_MK_TMP ?= $(CURDIR)/.erlang.mk\nexport ERLANG_MK_TMP\n\n# \"erl\" command.\n\nERL = erl +A1 -noinput -boot no_dot_erlang\n\n# Platform detection.\n\nifeq ($(PLATFORM),)\nUNAME_S := $(shell uname -s)\n\nifeq ($(UNAME_S),Linux)\nPLATFORM = linux\nelse ifeq ($(UNAME_S),Darwin)\nPLATFORM = darwin\nelse ifeq ($(UNAME_S),SunOS)\nPLATFORM = solaris\nelse ifeq ($(UNAME_S),GNU)\nPLATFORM = gnu\nelse ifeq ($(UNAME_S),FreeBSD)\nPLATFORM = freebsd\nelse ifeq ($(UNAME_S),NetBSD)\nPLATFORM = netbsd\nelse ifeq ($(UNAME_S),OpenBSD)\nPLATFORM = openbsd\nelse ifeq ($(UNAME_S),DragonFly)\nPLATFORM = dragonfly\nelse ifeq ($(shell uname -o),Msys)\nPLATFORM = msys2\nelse\n$(error Unable to detect platform. Please open a ticket with the output of uname -a.)\nendif\n\nexport PLATFORM\nendif\n\n# Core targets.\n\nall:: deps app rel\n\n# Noop to avoid a Make warning when there's nothing to do.\nrel::\n\t$(verbose) :\n\nrelup:: deps app\n\ncheck:: tests\n\nclean:: clean-crashdump\n\nclean-crashdump:\nifneq ($(wildcard erl_crash.dump),)\n\t$(gen_verbose) rm -f erl_crash.dump\nendif\n\ndistclean:: clean distclean-tmp\n\n$(ERLANG_MK_TMP):\n\t$(verbose) mkdir -p $(ERLANG_MK_TMP)\n\ndistclean-tmp:\n\t$(gen_verbose) rm -rf $(ERLANG_MK_TMP)\n\nhelp::\n\t$(verbose) printf \"%s\\n\" \\\n\t\t\"erlang.mk (version $(ERLANG_MK_VERSION)) is distributed under the terms of the ISC License.\" \\\n\t\t\"Copyright (c) 2013-2016 Loïc Hoguin <essen@ninenines.eu>\" \\\n\t\t\"\" \\\n\t\t\"Usage: [V=1] $(MAKE) [target]...\" \\\n\t\t\"\" \\\n\t\t\"Core targets:\" \\\n\t\t\"  all           Run deps, app and rel targets in that order\" \\\n\t\t\"  app           Compile the project\" \\\n\t\t\"  deps          Fetch dependencies (if needed) and compile them\" \\\n\t\t\"  fetch-deps    Fetch dependencies recursively (if needed) without compiling them\" \\\n\t\t\"  list-deps     List dependencies recursively on stdout\" \\\n\t\t\"  search q=...  Search for a package in the built-in index\" \\\n\t\t\"  rel           Build a release for this project, if applicable\" \\\n\t\t\"  docs          Build the documentation for this project\" \\\n\t\t\"  install-docs  Install the man pages for this project\" \\\n\t\t\"  check         Compile and run all tests and analysis for this project\" \\\n\t\t\"  tests         Run the tests for this project\" \\\n\t\t\"  clean         Delete temporary and output files from most targets\" \\\n\t\t\"  distclean     Delete all temporary and output files\" \\\n\t\t\"  help          Display this help and exit\" \\\n\t\t\"  erlang-mk     Update erlang.mk to the latest version\"\n\n# Core functions.\n\nempty :=\nspace := $(empty) $(empty)\ntab := $(empty)\t$(empty)\ncomma := ,\n\ndefine newline\n\n\nendef\n\ndefine comma_list\n$(subst $(space),$(comma),$(strip $(1)))\nendef\n\ndefine escape_dquotes\n$(subst \",\\\",$1)\nendef\n\n# Adding erlang.mk to make Erlang scripts who call init:get_plain_arguments() happy.\ndefine erlang\n$(ERL) $2 -pz $(ERLANG_MK_TMP)/rebar3/_build/prod/lib/*/ebin/ -eval \"$(subst $(newline),,$(call escape_dquotes,$1))\" -- erlang.mk\nendef\n\nifeq ($(PLATFORM),msys2)\ncore_native_path = $(shell cygpath -m $1)\nelse\ncore_native_path = $1\nendif\n\ncore_http_get = curl -Lf$(if $(filter-out 0,$(V)),,s)o $(call core_native_path,$1) $2\n\ncore_eq = $(and $(findstring $(1),$(2)),$(findstring $(2),$(1)))\n\n# We skip files that contain spaces because they end up causing issues.\n# Files that begin with a dot are already ignored by the wildcard function.\ncore_find = $(foreach f,$(wildcard $(1:%/=%)/*),$(if $(wildcard $f/.),$(call core_find,$f,$2),$(if $(filter $(subst *,%,$2),$f),$(if $(wildcard $f),$f))))\n\ncore_lc = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$(1)))))))))))))))))))))))))))\n\ncore_ls = $(filter-out $(1),$(shell echo $(1)))\n\n# @todo Use a solution that does not require using perl.\ncore_relpath = $(shell perl -e 'use File::Spec; print File::Spec->abs2rel(@ARGV) . \"\\n\"' $1 $2)\n\ndefine core_render\n\tprintf -- '$(subst $(newline),\\n,$(subst %,%%,$(subst ','\\'',$(subst $(tab),$(WS),$(call $(1))))))\\n' > $(2)\nendef\n\n# Automated update.\n\nERLANG_MK_REPO ?= https://github.com/ninenines/erlang.mk\nERLANG_MK_COMMIT ?=\nERLANG_MK_BUILD_CONFIG ?= build.config\nERLANG_MK_BUILD_DIR ?= .erlang.mk.build\n\nerlang-mk: WITHOUT ?= $(ERLANG_MK_WITHOUT)\nerlang-mk:\nifdef ERLANG_MK_COMMIT\n\t$(verbose) git clone $(ERLANG_MK_REPO) $(ERLANG_MK_BUILD_DIR)\n\t$(verbose) cd $(ERLANG_MK_BUILD_DIR) && git checkout $(ERLANG_MK_COMMIT)\nelse\n\t$(verbose) git clone --depth 1 $(ERLANG_MK_REPO) $(ERLANG_MK_BUILD_DIR)\nendif\n\t$(verbose) if [ -f $(ERLANG_MK_BUILD_CONFIG) ]; then cp $(ERLANG_MK_BUILD_CONFIG) $(ERLANG_MK_BUILD_DIR)/build.config; fi\n\t$(gen_verbose) $(MAKE) --no-print-directory -C $(ERLANG_MK_BUILD_DIR) WITHOUT='$(strip $(WITHOUT))' UPGRADE=1\n\t$(verbose) cp $(ERLANG_MK_BUILD_DIR)/erlang.mk ./erlang.mk\n\t$(verbose) rm -rf $(ERLANG_MK_BUILD_DIR)\n\t$(verbose) rm -rf $(ERLANG_MK_TMP)\n\n# The erlang.mk package index is bundled in the default erlang.mk build.\n# Search for the string \"copyright\" to skip to the rest of the code.\n\n# Copyright (c) 2015-2017, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: distclean-kerl\n\nKERL_INSTALL_DIR ?= $(HOME)/erlang\n\nifeq ($(strip $(KERL)),)\nKERL := $(ERLANG_MK_TMP)/kerl/kerl\nendif\n\nKERL_DIR = $(ERLANG_MK_TMP)/kerl\n\nexport KERL\n\nKERL_GIT ?= https://github.com/kerl/kerl\nKERL_COMMIT ?= master\n\nKERL_MAKEFLAGS ?=\n\nOTP_GIT ?= https://github.com/erlang/otp\n\ndefine kerl_otp_target\n$(KERL_INSTALL_DIR)/$(1): $(KERL)\n\t$(verbose) if [ ! -d $$@ ]; then \\\n\t\tMAKEFLAGS=\"$(KERL_MAKEFLAGS)\" $(KERL) build git $(OTP_GIT) $(1) $(1); \\\n\t\t$(KERL) install $(1) $(KERL_INSTALL_DIR)/$(1); \\\n\tfi\nendef\n\n$(KERL): $(KERL_DIR)\n\n$(KERL_DIR): | $(ERLANG_MK_TMP)\n\t$(gen_verbose) git clone --depth 1 $(KERL_GIT) $(ERLANG_MK_TMP)/kerl\n\t$(verbose) cd $(ERLANG_MK_TMP)/kerl && git checkout $(KERL_COMMIT)\n\t$(verbose) chmod +x $(KERL)\n\ndistclean:: distclean-kerl\n\ndistclean-kerl:\n\t$(gen_verbose) rm -rf $(KERL_DIR)\n\n# Allow users to select which version of Erlang/OTP to use for a project.\n\nifneq ($(strip $(LATEST_ERLANG_OTP)),)\n# In some environments it is necessary to filter out master.\nERLANG_OTP := $(notdir $(lastword $(sort\\\n\t$(filter-out $(KERL_INSTALL_DIR)/master $(KERL_INSTALL_DIR)/OTP_R%,\\\n\t$(filter-out %-rc1 %-rc2 %-rc3,$(wildcard $(KERL_INSTALL_DIR)/*[^-native]))))))\nendif\n\nERLANG_OTP ?=\n\n# Use kerl to enforce a specific Erlang/OTP version for a project.\nifneq ($(strip $(ERLANG_OTP)),)\n\nexport PATH := $(KERL_INSTALL_DIR)/$(ERLANG_OTP)/bin:$(PATH)\nSHELL := env PATH=$(PATH) $(SHELL)\n$(eval $(call kerl_otp_target,$(ERLANG_OTP)))\n\n# Build Erlang/OTP only if it doesn't already exist.\nifeq ($(wildcard $(KERL_INSTALL_DIR)/$(ERLANG_OTP))$(BUILD_ERLANG_OTP),)\n$(info Building Erlang/OTP $(ERLANG_OTP)... Please wait...)\n$(shell $(MAKE) $(KERL_INSTALL_DIR)/$(ERLANG_OTP) ERLANG_OTP=$(ERLANG_OTP) BUILD_ERLANG_OTP=1 >&2)\nendif\n\nendif\n\nPACKAGES += aberth\npkg_aberth_name = aberth\npkg_aberth_description = Generic BERT-RPC server in Erlang\npkg_aberth_homepage = https://github.com/a13x/aberth\npkg_aberth_fetch = git\npkg_aberth_repo = https://github.com/a13x/aberth\npkg_aberth_commit = master\n\nPACKAGES += active\npkg_active_name = active\npkg_active_description = Active development for Erlang: rebuild and reload source/binary files while the VM is running\npkg_active_homepage = https://github.com/proger/active\npkg_active_fetch = git\npkg_active_repo = https://github.com/proger/active\npkg_active_commit = master\n\nPACKAGES += aleppo\npkg_aleppo_name = aleppo\npkg_aleppo_description = Alternative Erlang Pre-Processor\npkg_aleppo_homepage = https://github.com/ErlyORM/aleppo\npkg_aleppo_fetch = git\npkg_aleppo_repo = https://github.com/ErlyORM/aleppo\npkg_aleppo_commit = master\n\nPACKAGES += alog\npkg_alog_name = alog\npkg_alog_description = Simply the best logging framework for Erlang\npkg_alog_homepage = https://github.com/siberian-fast-food/alogger\npkg_alog_fetch = git\npkg_alog_repo = https://github.com/siberian-fast-food/alogger\npkg_alog_commit = master\n\nPACKAGES += annotations\npkg_annotations_name = annotations\npkg_annotations_description = Simple code instrumentation utilities\npkg_annotations_homepage = https://github.com/hyperthunk/annotations\npkg_annotations_fetch = git\npkg_annotations_repo = https://github.com/hyperthunk/annotations\npkg_annotations_commit = master\n\nPACKAGES += apns\npkg_apns_name = apns\npkg_apns_description = Apple Push Notification Server for Erlang\npkg_apns_homepage = http://inaka.github.com/apns4erl\npkg_apns_fetch = git\npkg_apns_repo = https://github.com/inaka/apns4erl\npkg_apns_commit = master\n\nPACKAGES += asciideck\npkg_asciideck_name = asciideck\npkg_asciideck_description = Asciidoc for Erlang.\npkg_asciideck_homepage = https://ninenines.eu\npkg_asciideck_fetch = git\npkg_asciideck_repo = https://github.com/ninenines/asciideck\npkg_asciideck_commit = master\n\nPACKAGES += backoff\npkg_backoff_name = backoff\npkg_backoff_description = Simple exponential backoffs in Erlang\npkg_backoff_homepage = https://github.com/ferd/backoff\npkg_backoff_fetch = git\npkg_backoff_repo = https://github.com/ferd/backoff\npkg_backoff_commit = master\n\nPACKAGES += barrel_tcp\npkg_barrel_tcp_name = barrel_tcp\npkg_barrel_tcp_description = barrel is a generic TCP acceptor pool with low latency in Erlang.\npkg_barrel_tcp_homepage = https://github.com/benoitc-attic/barrel_tcp\npkg_barrel_tcp_fetch = git\npkg_barrel_tcp_repo = https://github.com/benoitc-attic/barrel_tcp\npkg_barrel_tcp_commit = master\n\nPACKAGES += basho_bench\npkg_basho_bench_name = basho_bench\npkg_basho_bench_description = A load-generation and testing tool for basically whatever you can write a returning Erlang function for.\npkg_basho_bench_homepage = https://github.com/basho/basho_bench\npkg_basho_bench_fetch = git\npkg_basho_bench_repo = https://github.com/basho/basho_bench\npkg_basho_bench_commit = master\n\nPACKAGES += bcrypt\npkg_bcrypt_name = bcrypt\npkg_bcrypt_description = Bcrypt Erlang / C library\npkg_bcrypt_homepage = https://github.com/erlangpack/bcrypt\npkg_bcrypt_fetch = git\npkg_bcrypt_repo = https://github.com/erlangpack/bcrypt.git\npkg_bcrypt_commit = master\n\nPACKAGES += beam\npkg_beam_name = beam\npkg_beam_description = BEAM emulator written in Erlang\npkg_beam_homepage = https://github.com/tonyrog/beam\npkg_beam_fetch = git\npkg_beam_repo = https://github.com/tonyrog/beam\npkg_beam_commit = master\n\nPACKAGES += bear\npkg_bear_name = bear\npkg_bear_description = a set of statistics functions for erlang\npkg_bear_homepage = https://github.com/boundary/bear\npkg_bear_fetch = git\npkg_bear_repo = https://github.com/boundary/bear\npkg_bear_commit = master\n\nPACKAGES += bertconf\npkg_bertconf_name = bertconf\npkg_bertconf_description = Make ETS tables out of statc BERT files that are auto-reloaded\npkg_bertconf_homepage = https://github.com/ferd/bertconf\npkg_bertconf_fetch = git\npkg_bertconf_repo = https://github.com/ferd/bertconf\npkg_bertconf_commit = master\n\nPACKAGES += bifrost\npkg_bifrost_name = bifrost\npkg_bifrost_description = Erlang FTP Server Framework\npkg_bifrost_homepage = https://github.com/thorstadt/bifrost\npkg_bifrost_fetch = git\npkg_bifrost_repo = https://github.com/thorstadt/bifrost\npkg_bifrost_commit = master\n\nPACKAGES += binpp\npkg_binpp_name = binpp\npkg_binpp_description = Erlang Binary Pretty Printer\npkg_binpp_homepage = https://github.com/jtendo/binpp\npkg_binpp_fetch = git\npkg_binpp_repo = https://github.com/jtendo/binpp\npkg_binpp_commit = master\n\nPACKAGES += bisect\npkg_bisect_name = bisect\npkg_bisect_description = Ordered fixed-size binary dictionary in Erlang\npkg_bisect_homepage = https://github.com/knutin/bisect\npkg_bisect_fetch = git\npkg_bisect_repo = https://github.com/knutin/bisect\npkg_bisect_commit = master\n\nPACKAGES += bitcask\npkg_bitcask_name = bitcask\npkg_bitcask_description = because you need another a key/value storage engine\npkg_bitcask_homepage = https://github.com/basho/bitcask\npkg_bitcask_fetch = git\npkg_bitcask_repo = https://github.com/basho/bitcask\npkg_bitcask_commit = develop\n\nPACKAGES += bootstrap\npkg_bootstrap_name = bootstrap\npkg_bootstrap_description = A simple, yet powerful Erlang cluster bootstrapping application.\npkg_bootstrap_homepage = https://github.com/schlagert/bootstrap\npkg_bootstrap_fetch = git\npkg_bootstrap_repo = https://github.com/schlagert/bootstrap\npkg_bootstrap_commit = master\n\nPACKAGES += boss\npkg_boss_name = boss\npkg_boss_description = Erlang web MVC, now featuring Comet\npkg_boss_homepage = https://github.com/ChicagoBoss/ChicagoBoss\npkg_boss_fetch = git\npkg_boss_repo = https://github.com/ChicagoBoss/ChicagoBoss\npkg_boss_commit = master\n\nPACKAGES += boss_db\npkg_boss_db_name = boss_db\npkg_boss_db_description = BossDB: a sharded, caching, pooling, evented ORM for Erlang\npkg_boss_db_homepage = https://github.com/ErlyORM/boss_db\npkg_boss_db_fetch = git\npkg_boss_db_repo = https://github.com/ErlyORM/boss_db\npkg_boss_db_commit = master\n\nPACKAGES += brod\npkg_brod_name = brod\npkg_brod_description = Kafka client in Erlang\npkg_brod_homepage = https://github.com/klarna/brod\npkg_brod_fetch = git\npkg_brod_repo = https://github.com/klarna/brod.git\npkg_brod_commit = master\n\nPACKAGES += bson\npkg_bson_name = bson\npkg_bson_description = BSON documents in Erlang, see bsonspec.org\npkg_bson_homepage = https://github.com/comtihon/bson-erlang\npkg_bson_fetch = git\npkg_bson_repo = https://github.com/comtihon/bson-erlang\npkg_bson_commit = master\n\nPACKAGES += bullet\npkg_bullet_name = bullet\npkg_bullet_description = Simple, reliable, efficient streaming for Cowboy.\npkg_bullet_homepage = http://ninenines.eu\npkg_bullet_fetch = git\npkg_bullet_repo = https://github.com/ninenines/bullet\npkg_bullet_commit = master\n\nPACKAGES += cache\npkg_cache_name = cache\npkg_cache_description = Erlang in-memory cache\npkg_cache_homepage = https://github.com/fogfish/cache\npkg_cache_fetch = git\npkg_cache_repo = https://github.com/fogfish/cache\npkg_cache_commit = master\n\nPACKAGES += cake\npkg_cake_name = cake\npkg_cake_description = Really simple terminal colorization\npkg_cake_homepage = https://github.com/darach/cake-erl\npkg_cake_fetch = git\npkg_cake_repo = https://github.com/darach/cake-erl\npkg_cake_commit = master\n\nPACKAGES += cberl\npkg_cberl_name = cberl\npkg_cberl_description = NIF based Erlang bindings for Couchbase\npkg_cberl_homepage = https://github.com/chitika/cberl\npkg_cberl_fetch = git\npkg_cberl_repo = https://github.com/chitika/cberl\npkg_cberl_commit = master\n\nPACKAGES += cecho\npkg_cecho_name = cecho\npkg_cecho_description = An ncurses library for Erlang\npkg_cecho_homepage = https://github.com/mazenharake/cecho\npkg_cecho_fetch = git\npkg_cecho_repo = https://github.com/mazenharake/cecho\npkg_cecho_commit = master\n\nPACKAGES += cferl\npkg_cferl_name = cferl\npkg_cferl_description = Rackspace / Open Stack Cloud Files Erlang Client\npkg_cferl_homepage = https://github.com/ddossot/cferl\npkg_cferl_fetch = git\npkg_cferl_repo = https://github.com/ddossot/cferl\npkg_cferl_commit = master\n\nPACKAGES += chaos_monkey\npkg_chaos_monkey_name = chaos_monkey\npkg_chaos_monkey_description = This is The CHAOS MONKEY.  It will kill your processes.\npkg_chaos_monkey_homepage = https://github.com/dLuna/chaos_monkey\npkg_chaos_monkey_fetch = git\npkg_chaos_monkey_repo = https://github.com/dLuna/chaos_monkey\npkg_chaos_monkey_commit = master\n\nPACKAGES += check_node\npkg_check_node_name = check_node\npkg_check_node_description = Nagios Scripts for monitoring Riak\npkg_check_node_homepage = https://github.com/basho-labs/riak_nagios\npkg_check_node_fetch = git\npkg_check_node_repo = https://github.com/basho-labs/riak_nagios\npkg_check_node_commit = master\n\nPACKAGES += chronos\npkg_chronos_name = chronos\npkg_chronos_description = Timer module for Erlang that makes it easy to abstract time out of the tests.\npkg_chronos_homepage = https://github.com/lehoff/chronos\npkg_chronos_fetch = git\npkg_chronos_repo = https://github.com/lehoff/chronos\npkg_chronos_commit = master\n\nPACKAGES += chumak\npkg_chumak_name = chumak\npkg_chumak_description = Pure Erlang implementation of ZeroMQ Message Transport Protocol.\npkg_chumak_homepage = http://choven.ca\npkg_chumak_fetch = git\npkg_chumak_repo = https://github.com/chovencorp/chumak\npkg_chumak_commit = master\n\nPACKAGES += cl\npkg_cl_name = cl\npkg_cl_description = OpenCL binding for Erlang\npkg_cl_homepage = https://github.com/tonyrog/cl\npkg_cl_fetch = git\npkg_cl_repo = https://github.com/tonyrog/cl\npkg_cl_commit = master\n\nPACKAGES += clique\npkg_clique_name = clique\npkg_clique_description = CLI Framework for Erlang\npkg_clique_homepage = https://github.com/basho/clique\npkg_clique_fetch = git\npkg_clique_repo = https://github.com/basho/clique\npkg_clique_commit = develop\n\nPACKAGES += cloudi_core\npkg_cloudi_core_name = cloudi_core\npkg_cloudi_core_description = CloudI internal service runtime\npkg_cloudi_core_homepage = http://cloudi.org/\npkg_cloudi_core_fetch = git\npkg_cloudi_core_repo = https://github.com/CloudI/cloudi_core\npkg_cloudi_core_commit = master\n\nPACKAGES += cloudi_service_api_requests\npkg_cloudi_service_api_requests_name = cloudi_service_api_requests\npkg_cloudi_service_api_requests_description = CloudI Service API requests (JSON-RPC/Erlang-term support)\npkg_cloudi_service_api_requests_homepage = http://cloudi.org/\npkg_cloudi_service_api_requests_fetch = git\npkg_cloudi_service_api_requests_repo = https://github.com/CloudI/cloudi_service_api_requests\npkg_cloudi_service_api_requests_commit = master\n\nPACKAGES += cloudi_service_db_mysql\npkg_cloudi_service_db_mysql_name = cloudi_service_db_mysql\npkg_cloudi_service_db_mysql_description = MySQL CloudI Service\npkg_cloudi_service_db_mysql_homepage = http://cloudi.org/\npkg_cloudi_service_db_mysql_fetch = git\npkg_cloudi_service_db_mysql_repo = https://github.com/CloudI/cloudi_service_db_mysql\npkg_cloudi_service_db_mysql_commit = master\n\nPACKAGES += cloudi_service_db_pgsql\npkg_cloudi_service_db_pgsql_name = cloudi_service_db_pgsql\npkg_cloudi_service_db_pgsql_description = PostgreSQL CloudI Service\npkg_cloudi_service_db_pgsql_homepage = http://cloudi.org/\npkg_cloudi_service_db_pgsql_fetch = git\npkg_cloudi_service_db_pgsql_repo = https://github.com/CloudI/cloudi_service_db_pgsql\npkg_cloudi_service_db_pgsql_commit = master\n\nPACKAGES += cloudi_service_filesystem\npkg_cloudi_service_filesystem_name = cloudi_service_filesystem\npkg_cloudi_service_filesystem_description = Filesystem CloudI Service\npkg_cloudi_service_filesystem_homepage = http://cloudi.org/\npkg_cloudi_service_filesystem_fetch = git\npkg_cloudi_service_filesystem_repo = https://github.com/CloudI/cloudi_service_filesystem\npkg_cloudi_service_filesystem_commit = master\n\nPACKAGES += cloudi_service_http_client\npkg_cloudi_service_http_client_name = cloudi_service_http_client\npkg_cloudi_service_http_client_description = HTTP client CloudI Service\npkg_cloudi_service_http_client_homepage = http://cloudi.org/\npkg_cloudi_service_http_client_fetch = git\npkg_cloudi_service_http_client_repo = https://github.com/CloudI/cloudi_service_http_client\npkg_cloudi_service_http_client_commit = master\n\nPACKAGES += cloudi_service_http_cowboy\npkg_cloudi_service_http_cowboy_name = cloudi_service_http_cowboy\npkg_cloudi_service_http_cowboy_description = cowboy HTTP/HTTPS CloudI Service\npkg_cloudi_service_http_cowboy_homepage = http://cloudi.org/\npkg_cloudi_service_http_cowboy_fetch = git\npkg_cloudi_service_http_cowboy_repo = https://github.com/CloudI/cloudi_service_http_cowboy\npkg_cloudi_service_http_cowboy_commit = master\n\nPACKAGES += cloudi_service_http_elli\npkg_cloudi_service_http_elli_name = cloudi_service_http_elli\npkg_cloudi_service_http_elli_description = elli HTTP CloudI Service\npkg_cloudi_service_http_elli_homepage = http://cloudi.org/\npkg_cloudi_service_http_elli_fetch = git\npkg_cloudi_service_http_elli_repo = https://github.com/CloudI/cloudi_service_http_elli\npkg_cloudi_service_http_elli_commit = master\n\nPACKAGES += cloudi_service_map_reduce\npkg_cloudi_service_map_reduce_name = cloudi_service_map_reduce\npkg_cloudi_service_map_reduce_description = Map/Reduce CloudI Service\npkg_cloudi_service_map_reduce_homepage = http://cloudi.org/\npkg_cloudi_service_map_reduce_fetch = git\npkg_cloudi_service_map_reduce_repo = https://github.com/CloudI/cloudi_service_map_reduce\npkg_cloudi_service_map_reduce_commit = master\n\nPACKAGES += cloudi_service_oauth1\npkg_cloudi_service_oauth1_name = cloudi_service_oauth1\npkg_cloudi_service_oauth1_description = OAuth v1.0 CloudI Service\npkg_cloudi_service_oauth1_homepage = http://cloudi.org/\npkg_cloudi_service_oauth1_fetch = git\npkg_cloudi_service_oauth1_repo = https://github.com/CloudI/cloudi_service_oauth1\npkg_cloudi_service_oauth1_commit = master\n\nPACKAGES += cloudi_service_queue\npkg_cloudi_service_queue_name = cloudi_service_queue\npkg_cloudi_service_queue_description = Persistent Queue Service\npkg_cloudi_service_queue_homepage = http://cloudi.org/\npkg_cloudi_service_queue_fetch = git\npkg_cloudi_service_queue_repo = https://github.com/CloudI/cloudi_service_queue\npkg_cloudi_service_queue_commit = master\n\nPACKAGES += cloudi_service_quorum\npkg_cloudi_service_quorum_name = cloudi_service_quorum\npkg_cloudi_service_quorum_description = CloudI Quorum Service\npkg_cloudi_service_quorum_homepage = http://cloudi.org/\npkg_cloudi_service_quorum_fetch = git\npkg_cloudi_service_quorum_repo = https://github.com/CloudI/cloudi_service_quorum\npkg_cloudi_service_quorum_commit = master\n\nPACKAGES += cloudi_service_router\npkg_cloudi_service_router_name = cloudi_service_router\npkg_cloudi_service_router_description = CloudI Router Service\npkg_cloudi_service_router_homepage = http://cloudi.org/\npkg_cloudi_service_router_fetch = git\npkg_cloudi_service_router_repo = https://github.com/CloudI/cloudi_service_router\npkg_cloudi_service_router_commit = master\n\nPACKAGES += cloudi_service_tcp\npkg_cloudi_service_tcp_name = cloudi_service_tcp\npkg_cloudi_service_tcp_description = TCP CloudI Service\npkg_cloudi_service_tcp_homepage = http://cloudi.org/\npkg_cloudi_service_tcp_fetch = git\npkg_cloudi_service_tcp_repo = https://github.com/CloudI/cloudi_service_tcp\npkg_cloudi_service_tcp_commit = master\n\nPACKAGES += cloudi_service_udp\npkg_cloudi_service_udp_name = cloudi_service_udp\npkg_cloudi_service_udp_description = UDP CloudI Service\npkg_cloudi_service_udp_homepage = http://cloudi.org/\npkg_cloudi_service_udp_fetch = git\npkg_cloudi_service_udp_repo = https://github.com/CloudI/cloudi_service_udp\npkg_cloudi_service_udp_commit = master\n\nPACKAGES += cloudi_service_validate\npkg_cloudi_service_validate_name = cloudi_service_validate\npkg_cloudi_service_validate_description = CloudI Validate Service\npkg_cloudi_service_validate_homepage = http://cloudi.org/\npkg_cloudi_service_validate_fetch = git\npkg_cloudi_service_validate_repo = https://github.com/CloudI/cloudi_service_validate\npkg_cloudi_service_validate_commit = master\n\nPACKAGES += cloudi_service_zeromq\npkg_cloudi_service_zeromq_name = cloudi_service_zeromq\npkg_cloudi_service_zeromq_description = ZeroMQ CloudI Service\npkg_cloudi_service_zeromq_homepage = http://cloudi.org/\npkg_cloudi_service_zeromq_fetch = git\npkg_cloudi_service_zeromq_repo = https://github.com/CloudI/cloudi_service_zeromq\npkg_cloudi_service_zeromq_commit = master\n\nPACKAGES += cluster_info\npkg_cluster_info_name = cluster_info\npkg_cluster_info_description = Fork of Hibari's nifty cluster_info OTP app\npkg_cluster_info_homepage = https://github.com/basho/cluster_info\npkg_cluster_info_fetch = git\npkg_cluster_info_repo = https://github.com/basho/cluster_info\npkg_cluster_info_commit = master\n\nPACKAGES += color\npkg_color_name = color\npkg_color_description = ANSI colors for your Erlang\npkg_color_homepage = https://github.com/julianduque/erlang-color\npkg_color_fetch = git\npkg_color_repo = https://github.com/julianduque/erlang-color\npkg_color_commit = master\n\nPACKAGES += confetti\npkg_confetti_name = confetti\npkg_confetti_description = Erlang configuration provider / application:get_env/2 on steroids\npkg_confetti_homepage = https://github.com/jtendo/confetti\npkg_confetti_fetch = git\npkg_confetti_repo = https://github.com/jtendo/confetti\npkg_confetti_commit = master\n\nPACKAGES += couchbeam\npkg_couchbeam_name = couchbeam\npkg_couchbeam_description = Apache CouchDB client in Erlang\npkg_couchbeam_homepage = https://github.com/benoitc/couchbeam\npkg_couchbeam_fetch = git\npkg_couchbeam_repo = https://github.com/benoitc/couchbeam\npkg_couchbeam_commit = master\n\nPACKAGES += covertool\npkg_covertool_name = covertool\npkg_covertool_description = Tool to convert Erlang cover data files into Cobertura XML reports\npkg_covertool_homepage = https://github.com/idubrov/covertool\npkg_covertool_fetch = git\npkg_covertool_repo = https://github.com/idubrov/covertool\npkg_covertool_commit = master\n\nPACKAGES += cowboy\npkg_cowboy_name = cowboy\npkg_cowboy_description = Small, fast and modular HTTP server.\npkg_cowboy_homepage = http://ninenines.eu\npkg_cowboy_fetch = git\npkg_cowboy_repo = https://github.com/ninenines/cowboy\npkg_cowboy_commit = 1.0.4\n\nPACKAGES += cowdb\npkg_cowdb_name = cowdb\npkg_cowdb_description = Pure Key/Value database library for Erlang Applications\npkg_cowdb_homepage = https://github.com/refuge/cowdb\npkg_cowdb_fetch = git\npkg_cowdb_repo = https://github.com/refuge/cowdb\npkg_cowdb_commit = master\n\nPACKAGES += cowlib\npkg_cowlib_name = cowlib\npkg_cowlib_description = Support library for manipulating Web protocols.\npkg_cowlib_homepage = http://ninenines.eu\npkg_cowlib_fetch = git\npkg_cowlib_repo = https://github.com/ninenines/cowlib\npkg_cowlib_commit = 1.0.2\n\nPACKAGES += cpg\npkg_cpg_name = cpg\npkg_cpg_description = CloudI Process Groups\npkg_cpg_homepage = https://github.com/okeuday/cpg\npkg_cpg_fetch = git\npkg_cpg_repo = https://github.com/okeuday/cpg\npkg_cpg_commit = master\n\nPACKAGES += cqerl\npkg_cqerl_name = cqerl\npkg_cqerl_description = Native Erlang CQL client for Cassandra\npkg_cqerl_homepage = https://matehat.github.io/cqerl/\npkg_cqerl_fetch = git\npkg_cqerl_repo = https://github.com/matehat/cqerl\npkg_cqerl_commit = master\n\nPACKAGES += cr\npkg_cr_name = cr\npkg_cr_description = Chain Replication\npkg_cr_homepage = https://synrc.com/apps/cr/doc/cr.htm\npkg_cr_fetch = git\npkg_cr_repo = https://github.com/spawnproc/cr\npkg_cr_commit = master\n\nPACKAGES += cuttlefish\npkg_cuttlefish_name = cuttlefish\npkg_cuttlefish_description = cuttlefish configuration abstraction\npkg_cuttlefish_homepage = https://github.com/Kyorai/cuttlefish\npkg_cuttlefish_fetch = git\npkg_cuttlefish_repo = https://github.com/Kyorai/cuttlefish\npkg_cuttlefish_commit = main\n\nPACKAGES += damocles\npkg_damocles_name = damocles\npkg_damocles_description = Erlang library for generating adversarial network conditions for QAing distributed applications/systems on a single Linux box.\npkg_damocles_homepage = https://github.com/lostcolony/damocles\npkg_damocles_fetch = git\npkg_damocles_repo = https://github.com/lostcolony/damocles\npkg_damocles_commit = master\n\nPACKAGES += debbie\npkg_debbie_name = debbie\npkg_debbie_description = .DEB Built In Erlang\npkg_debbie_homepage = https://github.com/crownedgrouse/debbie\npkg_debbie_fetch = git\npkg_debbie_repo = https://github.com/crownedgrouse/debbie\npkg_debbie_commit = master\n\nPACKAGES += decimal\npkg_decimal_name = decimal\npkg_decimal_description = An Erlang decimal arithmetic library\npkg_decimal_homepage = https://github.com/egobrain/decimal\npkg_decimal_fetch = git\npkg_decimal_repo = https://github.com/egobrain/decimal\npkg_decimal_commit = master\n\nPACKAGES += detergent\npkg_detergent_name = detergent\npkg_detergent_description = An emulsifying Erlang SOAP library\npkg_detergent_homepage = https://github.com/devinus/detergent\npkg_detergent_fetch = git\npkg_detergent_repo = https://github.com/devinus/detergent\npkg_detergent_commit = master\n\nPACKAGES += dh_date\npkg_dh_date_name = dh_date\npkg_dh_date_description = Date formatting / parsing library for erlang\npkg_dh_date_homepage = https://github.com/daleharvey/dh_date\npkg_dh_date_fetch = git\npkg_dh_date_repo = https://github.com/daleharvey/dh_date\npkg_dh_date_commit = master\n\nPACKAGES += dirbusterl\npkg_dirbusterl_name = dirbusterl\npkg_dirbusterl_description = DirBuster successor in Erlang\npkg_dirbusterl_homepage = https://github.com/silentsignal/DirBustErl\npkg_dirbusterl_fetch = git\npkg_dirbusterl_repo = https://github.com/silentsignal/DirBustErl\npkg_dirbusterl_commit = master\n\nPACKAGES += dispcount\npkg_dispcount_name = dispcount\npkg_dispcount_description = Erlang task dispatcher based on ETS counters.\npkg_dispcount_homepage = https://github.com/ferd/dispcount\npkg_dispcount_fetch = git\npkg_dispcount_repo = https://github.com/ferd/dispcount\npkg_dispcount_commit = master\n\nPACKAGES += dlhttpc\npkg_dlhttpc_name = dlhttpc\npkg_dlhttpc_description = dispcount-based lhttpc fork for massive amounts of requests to limited endpoints\npkg_dlhttpc_homepage = https://github.com/ferd/dlhttpc\npkg_dlhttpc_fetch = git\npkg_dlhttpc_repo = https://github.com/ferd/dlhttpc\npkg_dlhttpc_commit = master\n\nPACKAGES += dns\npkg_dns_name = dns\npkg_dns_description = Erlang DNS library\npkg_dns_homepage = https://github.com/aetrion/dns_erlang\npkg_dns_fetch = git\npkg_dns_repo = https://github.com/aetrion/dns_erlang\npkg_dns_commit = main\n\nPACKAGES += dynamic_compile\npkg_dynamic_compile_name = dynamic_compile\npkg_dynamic_compile_description = compile and load erlang modules from string input\npkg_dynamic_compile_homepage = https://github.com/jkvor/dynamic_compile\npkg_dynamic_compile_fetch = git\npkg_dynamic_compile_repo = https://github.com/jkvor/dynamic_compile\npkg_dynamic_compile_commit = master\n\nPACKAGES += e2\npkg_e2_name = e2\npkg_e2_description = Library to simply writing correct OTP applications.\npkg_e2_homepage = http://e2project.org\npkg_e2_fetch = git\npkg_e2_repo = https://github.com/gar1t/e2\npkg_e2_commit = master\n\nPACKAGES += eamf\npkg_eamf_name = eamf\npkg_eamf_description = eAMF provides Action Message Format (AMF) support for Erlang\npkg_eamf_homepage = https://github.com/mrinalwadhwa/eamf\npkg_eamf_fetch = git\npkg_eamf_repo = https://github.com/mrinalwadhwa/eamf\npkg_eamf_commit = master\n\nPACKAGES += eavro\npkg_eavro_name = eavro\npkg_eavro_description = Apache Avro encoder/decoder\npkg_eavro_homepage = https://github.com/SIfoxDevTeam/eavro\npkg_eavro_fetch = git\npkg_eavro_repo = https://github.com/SIfoxDevTeam/eavro\npkg_eavro_commit = master\n\nPACKAGES += ecapnp\npkg_ecapnp_name = ecapnp\npkg_ecapnp_description = Cap'n Proto library for Erlang\npkg_ecapnp_homepage = https://github.com/kaos/ecapnp\npkg_ecapnp_fetch = git\npkg_ecapnp_repo = https://github.com/kaos/ecapnp\npkg_ecapnp_commit = master\n\nPACKAGES += econfig\npkg_econfig_name = econfig\npkg_econfig_description = simple Erlang config handler using INI files\npkg_econfig_homepage = https://github.com/benoitc/econfig\npkg_econfig_fetch = git\npkg_econfig_repo = https://github.com/benoitc/econfig\npkg_econfig_commit = master\n\nPACKAGES += edate\npkg_edate_name = edate\npkg_edate_description = date manipulation library for erlang\npkg_edate_homepage = https://github.com/dweldon/edate\npkg_edate_fetch = git\npkg_edate_repo = https://github.com/dweldon/edate\npkg_edate_commit = master\n\nPACKAGES += edgar\npkg_edgar_name = edgar\npkg_edgar_description = Erlang Does GNU AR\npkg_edgar_homepage = https://github.com/crownedgrouse/edgar\npkg_edgar_fetch = git\npkg_edgar_repo = https://github.com/crownedgrouse/edgar\npkg_edgar_commit = master\n\nPACKAGES += edns\npkg_edns_name = edns\npkg_edns_description = Erlang/OTP DNS server\npkg_edns_homepage = https://github.com/hcvst/erlang-dns\npkg_edns_fetch = git\npkg_edns_repo = https://github.com/hcvst/erlang-dns\npkg_edns_commit = master\n\nPACKAGES += edown\npkg_edown_name = edown\npkg_edown_description = EDoc extension for generating Github-flavored Markdown\npkg_edown_homepage = https://github.com/uwiger/edown\npkg_edown_fetch = git\npkg_edown_repo = https://github.com/uwiger/edown\npkg_edown_commit = master\n\nPACKAGES += eep\npkg_eep_name = eep\npkg_eep_description = Erlang Easy Profiling (eep) application provides a way to analyze application performance and call hierarchy\npkg_eep_homepage = https://github.com/virtan/eep\npkg_eep_fetch = git\npkg_eep_repo = https://github.com/virtan/eep\npkg_eep_commit = master\n\nPACKAGES += eep_app\npkg_eep_app_name = eep_app\npkg_eep_app_description = Embedded Event Processing\npkg_eep_app_homepage = https://github.com/darach/eep-erl\npkg_eep_app_fetch = git\npkg_eep_app_repo = https://github.com/darach/eep-erl\npkg_eep_app_commit = master\n\nPACKAGES += efene\npkg_efene_name = efene\npkg_efene_description = Alternative syntax for the Erlang Programming Language focusing on simplicity, ease of use and programmer UX\npkg_efene_homepage = https://github.com/efene/efene\npkg_efene_fetch = git\npkg_efene_repo = https://github.com/efene/efene\npkg_efene_commit = master\n\nPACKAGES += egeoip\npkg_egeoip_name = egeoip\npkg_egeoip_description = Erlang IP Geolocation module, currently supporting the MaxMind GeoLite City Database.\npkg_egeoip_homepage = https://github.com/mochi/egeoip\npkg_egeoip_fetch = git\npkg_egeoip_repo = https://github.com/mochi/egeoip\npkg_egeoip_commit = master\n\nPACKAGES += ehsa\npkg_ehsa_name = ehsa\npkg_ehsa_description = Erlang HTTP server basic and digest authentication modules\npkg_ehsa_homepage = https://github.com/a12n/ehsa\npkg_ehsa_fetch = git\npkg_ehsa_repo = https://github.com/a12n/ehsa\npkg_ehsa_commit = master\n\nPACKAGES += ej\npkg_ej_name = ej\npkg_ej_description = Helper module for working with Erlang terms representing JSON\npkg_ej_homepage = https://github.com/seth/ej\npkg_ej_fetch = git\npkg_ej_repo = https://github.com/seth/ej\npkg_ej_commit = master\n\nPACKAGES += ejabberd\npkg_ejabberd_name = ejabberd\npkg_ejabberd_description = Robust, ubiquitous and massively scalable Jabber / XMPP Instant Messaging platform\npkg_ejabberd_homepage = https://github.com/processone/ejabberd\npkg_ejabberd_fetch = git\npkg_ejabberd_repo = https://github.com/processone/ejabberd\npkg_ejabberd_commit = master\n\nPACKAGES += ejwt\npkg_ejwt_name = ejwt\npkg_ejwt_description = erlang library for JSON Web Token\npkg_ejwt_homepage = https://github.com/artefactop/ejwt\npkg_ejwt_fetch = git\npkg_ejwt_repo = https://github.com/artefactop/ejwt\npkg_ejwt_commit = master\n\nPACKAGES += ekaf\npkg_ekaf_name = ekaf\npkg_ekaf_description = A minimal, high-performance Kafka client in Erlang.\npkg_ekaf_homepage = https://github.com/helpshift/ekaf\npkg_ekaf_fetch = git\npkg_ekaf_repo = https://github.com/helpshift/ekaf\npkg_ekaf_commit = master\n\nPACKAGES += elarm\npkg_elarm_name = elarm\npkg_elarm_description = Alarm Manager for Erlang.\npkg_elarm_homepage = https://github.com/esl/elarm\npkg_elarm_fetch = git\npkg_elarm_repo = https://github.com/esl/elarm\npkg_elarm_commit = master\n\nPACKAGES += eleveldb\npkg_eleveldb_name = eleveldb\npkg_eleveldb_description = Erlang LevelDB API\npkg_eleveldb_homepage = https://github.com/basho/eleveldb\npkg_eleveldb_fetch = git\npkg_eleveldb_repo = https://github.com/basho/eleveldb\npkg_eleveldb_commit = develop\n\nPACKAGES += elixir\npkg_elixir_name = elixir\npkg_elixir_description = Elixir is a dynamic, functional language designed for building scalable and maintainable applications\npkg_elixir_homepage = https://elixir-lang.org/\npkg_elixir_fetch = git\npkg_elixir_repo = https://github.com/elixir-lang/elixir\npkg_elixir_commit = main\n\nPACKAGES += elli\npkg_elli_name = elli\npkg_elli_description = Simple, robust and performant Erlang web server\npkg_elli_homepage = https://github.com/elli-lib/elli\npkg_elli_fetch = git\npkg_elli_repo = https://github.com/elli-lib/elli\npkg_elli_commit = main\n\nPACKAGES += elvis\npkg_elvis_name = elvis\npkg_elvis_description = Erlang Style Reviewer\npkg_elvis_homepage = https://github.com/inaka/elvis\npkg_elvis_fetch = git\npkg_elvis_repo = https://github.com/inaka/elvis\npkg_elvis_commit = master\n\nPACKAGES += emagick\npkg_emagick_name = emagick\npkg_emagick_description = Wrapper for Graphics/ImageMagick command line tool.\npkg_emagick_homepage = https://github.com/kivra/emagick\npkg_emagick_fetch = git\npkg_emagick_repo = https://github.com/kivra/emagick\npkg_emagick_commit = master\n\nPACKAGES += enm\npkg_enm_name = enm\npkg_enm_description = Erlang driver for nanomsg\npkg_enm_homepage = https://github.com/basho/enm\npkg_enm_fetch = git\npkg_enm_repo = https://github.com/basho/enm\npkg_enm_commit = master\n\nPACKAGES += entop\npkg_entop_name = entop\npkg_entop_description = A top-like tool for monitoring an Erlang node\npkg_entop_homepage = https://github.com/mazenharake/entop\npkg_entop_fetch = git\npkg_entop_repo = https://github.com/mazenharake/entop\npkg_entop_commit = master\n\nPACKAGES += epcap\npkg_epcap_name = epcap\npkg_epcap_description = Erlang packet capture interface using pcap\npkg_epcap_homepage = https://github.com/msantos/epcap\npkg_epcap_fetch = git\npkg_epcap_repo = https://github.com/msantos/epcap\npkg_epcap_commit = master\n\nPACKAGES += eper\npkg_eper_name = eper\npkg_eper_description = Erlang performance and debugging tools.\npkg_eper_homepage = https://github.com/massemanet/eper\npkg_eper_fetch = git\npkg_eper_repo = https://github.com/massemanet/eper\npkg_eper_commit = master\n\nPACKAGES += epgsql\npkg_epgsql_name = epgsql\npkg_epgsql_description = Erlang PostgreSQL client library.\npkg_epgsql_homepage = https://github.com/epgsql/epgsql\npkg_epgsql_fetch = git\npkg_epgsql_repo = https://github.com/epgsql/epgsql\npkg_epgsql_commit = master\n\nPACKAGES += episcina\npkg_episcina_name = episcina\npkg_episcina_description = A simple non intrusive resource pool for connections\npkg_episcina_homepage = https://github.com/erlware/episcina\npkg_episcina_fetch = git\npkg_episcina_repo = https://github.com/erlware/episcina\npkg_episcina_commit = master\n\nPACKAGES += eplot\npkg_eplot_name = eplot\npkg_eplot_description = A plot engine written in erlang.\npkg_eplot_homepage = https://github.com/psyeugenic/eplot\npkg_eplot_fetch = git\npkg_eplot_repo = https://github.com/psyeugenic/eplot\npkg_eplot_commit = master\n\nPACKAGES += epocxy\npkg_epocxy_name = epocxy\npkg_epocxy_description = Erlang Patterns of Concurrency\npkg_epocxy_homepage = https://github.com/duomark/epocxy\npkg_epocxy_fetch = git\npkg_epocxy_repo = https://github.com/duomark/epocxy\npkg_epocxy_commit = master\n\nPACKAGES += epubnub\npkg_epubnub_name = epubnub\npkg_epubnub_description = Erlang PubNub API\npkg_epubnub_homepage = https://github.com/tsloughter/epubnub\npkg_epubnub_fetch = git\npkg_epubnub_repo = https://github.com/tsloughter/epubnub\npkg_epubnub_commit = master\n\nPACKAGES += eqm\npkg_eqm_name = eqm\npkg_eqm_description = Erlang pub sub with supply-demand channels\npkg_eqm_homepage = https://github.com/loucash/eqm\npkg_eqm_fetch = git\npkg_eqm_repo = https://github.com/loucash/eqm\npkg_eqm_commit = master\n\nPACKAGES += eredis\npkg_eredis_name = eredis\npkg_eredis_description = Erlang Redis client\npkg_eredis_homepage = https://github.com/wooga/eredis\npkg_eredis_fetch = git\npkg_eredis_repo = https://github.com/wooga/eredis\npkg_eredis_commit = master\n\nPACKAGES += erl_streams\npkg_erl_streams_name = erl_streams\npkg_erl_streams_description = Streams in Erlang\npkg_erl_streams_homepage = https://github.com/epappas/erl_streams\npkg_erl_streams_fetch = git\npkg_erl_streams_repo = https://github.com/epappas/erl_streams\npkg_erl_streams_commit = master\n\nPACKAGES += erlang_localtime\npkg_erlang_localtime_name = erlang_localtime\npkg_erlang_localtime_description = Erlang library for conversion from one local time to another\npkg_erlang_localtime_homepage = https://github.com/dmitryme/erlang_localtime\npkg_erlang_localtime_fetch = git\npkg_erlang_localtime_repo = https://github.com/dmitryme/erlang_localtime\npkg_erlang_localtime_commit = master\n\nPACKAGES += erlang_smtp\npkg_erlang_smtp_name = erlang_smtp\npkg_erlang_smtp_description = Erlang SMTP and POP3 server code.\npkg_erlang_smtp_homepage = https://github.com/tonyg/erlang-smtp\npkg_erlang_smtp_fetch = git\npkg_erlang_smtp_repo = https://github.com/tonyg/erlang-smtp\npkg_erlang_smtp_commit = master\n\nPACKAGES += erlang_term\npkg_erlang_term_name = erlang_term\npkg_erlang_term_description = Erlang Term Info\npkg_erlang_term_homepage = https://github.com/okeuday/erlang_term\npkg_erlang_term_fetch = git\npkg_erlang_term_repo = https://github.com/okeuday/erlang_term\npkg_erlang_term_commit = master\n\nPACKAGES += erlastic_search\npkg_erlastic_search_name = erlastic_search\npkg_erlastic_search_description = An Erlang app for communicating with Elastic Search's rest interface.\npkg_erlastic_search_homepage = https://github.com/tsloughter/erlastic_search\npkg_erlastic_search_fetch = git\npkg_erlastic_search_repo = https://github.com/tsloughter/erlastic_search\npkg_erlastic_search_commit = master\n\nPACKAGES += erlbrake\npkg_erlbrake_name = erlbrake\npkg_erlbrake_description = Erlang Airbrake notification client\npkg_erlbrake_homepage = https://github.com/kenpratt/erlbrake\npkg_erlbrake_fetch = git\npkg_erlbrake_repo = https://github.com/kenpratt/erlbrake\npkg_erlbrake_commit = master\n\nPACKAGES += erlcloud\npkg_erlcloud_name = erlcloud\npkg_erlcloud_description = Cloud Computing library for erlang (Amazon EC2, S3, SQS, SimpleDB, Mechanical Turk, ELB)\npkg_erlcloud_homepage = https://github.com/gleber/erlcloud\npkg_erlcloud_fetch = git\npkg_erlcloud_repo = https://github.com/gleber/erlcloud\npkg_erlcloud_commit = master\n\nPACKAGES += erlcron\npkg_erlcron_name = erlcron\npkg_erlcron_description = Erlang cronish system\npkg_erlcron_homepage = https://github.com/erlware/erlcron\npkg_erlcron_fetch = git\npkg_erlcron_repo = https://github.com/erlware/erlcron\npkg_erlcron_commit = master\n\nPACKAGES += erldb\npkg_erldb_name = erldb\npkg_erldb_description = ORM (Object-relational mapping) application implemented in Erlang\npkg_erldb_homepage = http://erldb.org\npkg_erldb_fetch = git\npkg_erldb_repo = https://github.com/erldb/erldb\npkg_erldb_commit = master\n\nPACKAGES += erldis\npkg_erldis_name = erldis\npkg_erldis_description = redis erlang client library\npkg_erldis_homepage = https://github.com/cstar/erldis\npkg_erldis_fetch = git\npkg_erldis_repo = https://github.com/cstar/erldis\npkg_erldis_commit = master\n\nPACKAGES += erldns\npkg_erldns_name = erldns\npkg_erldns_description = DNS server, in erlang.\npkg_erldns_homepage = https://github.com/aetrion/erl-dns\npkg_erldns_fetch = git\npkg_erldns_repo = https://github.com/aetrion/erl-dns\npkg_erldns_commit = main\n\nPACKAGES += erldocker\npkg_erldocker_name = erldocker\npkg_erldocker_description = Docker Remote API client for Erlang\npkg_erldocker_homepage = https://github.com/proger/erldocker\npkg_erldocker_fetch = git\npkg_erldocker_repo = https://github.com/proger/erldocker\npkg_erldocker_commit = master\n\nPACKAGES += erlfsmon\npkg_erlfsmon_name = erlfsmon\npkg_erlfsmon_description = Erlang filesystem event watcher for Linux and OSX\npkg_erlfsmon_homepage = https://github.com/proger/erlfsmon\npkg_erlfsmon_fetch = git\npkg_erlfsmon_repo = https://github.com/proger/erlfsmon\npkg_erlfsmon_commit = master\n\nPACKAGES += erlgit\npkg_erlgit_name = erlgit\npkg_erlgit_description = Erlang convenience wrapper around git executable\npkg_erlgit_homepage = https://github.com/gleber/erlgit\npkg_erlgit_fetch = git\npkg_erlgit_repo = https://github.com/gleber/erlgit\npkg_erlgit_commit = master\n\nPACKAGES += erlguten\npkg_erlguten_name = erlguten\npkg_erlguten_description = ErlGuten is a system for high-quality typesetting, written purely in Erlang.\npkg_erlguten_homepage = https://github.com/richcarl/erlguten\npkg_erlguten_fetch = git\npkg_erlguten_repo = https://github.com/richcarl/erlguten\npkg_erlguten_commit = master\n\nPACKAGES += erlmc\npkg_erlmc_name = erlmc\npkg_erlmc_description = Erlang memcached binary protocol client\npkg_erlmc_homepage = https://github.com/jkvor/erlmc\npkg_erlmc_fetch = git\npkg_erlmc_repo = https://github.com/jkvor/erlmc\npkg_erlmc_commit = master\n\nPACKAGES += erlmongo\npkg_erlmongo_name = erlmongo\npkg_erlmongo_description = Record based Erlang driver for MongoDB with gridfs support\npkg_erlmongo_homepage = https://github.com/SergejJurecko/erlmongo\npkg_erlmongo_fetch = git\npkg_erlmongo_repo = https://github.com/SergejJurecko/erlmongo\npkg_erlmongo_commit = master\n\nPACKAGES += erlog\npkg_erlog_name = erlog\npkg_erlog_description = Prolog interpreter in and for Erlang\npkg_erlog_homepage = https://github.com/rvirding/erlog\npkg_erlog_fetch = git\npkg_erlog_repo = https://github.com/rvirding/erlog\npkg_erlog_commit = master\n\nPACKAGES += erlpass\npkg_erlpass_name = erlpass\npkg_erlpass_description = A library to handle password hashing and changing in a safe manner, independent from any kind of storage whatsoever.\npkg_erlpass_homepage = https://github.com/ferd/erlpass\npkg_erlpass_fetch = git\npkg_erlpass_repo = https://github.com/ferd/erlpass\npkg_erlpass_commit = master\n\nPACKAGES += erlsh\npkg_erlsh_name = erlsh\npkg_erlsh_description = Erlang shell tools\npkg_erlsh_homepage = https://github.com/proger/erlsh\npkg_erlsh_fetch = git\npkg_erlsh_repo = https://github.com/proger/erlsh\npkg_erlsh_commit = master\n\nPACKAGES += erlsha2\npkg_erlsha2_name = erlsha2\npkg_erlsha2_description = SHA-224, SHA-256, SHA-384, SHA-512 implemented in Erlang NIFs.\npkg_erlsha2_homepage = https://github.com/vinoski/erlsha2\npkg_erlsha2_fetch = git\npkg_erlsha2_repo = https://github.com/vinoski/erlsha2\npkg_erlsha2_commit = master\n\nPACKAGES += erlsom\npkg_erlsom_name = erlsom\npkg_erlsom_description = XML parser for Erlang\npkg_erlsom_homepage = https://github.com/willemdj/erlsom\npkg_erlsom_fetch = git\npkg_erlsom_repo = https://github.com/willemdj/erlsom\npkg_erlsom_commit = master\n\nPACKAGES += erlubi\npkg_erlubi_name = erlubi\npkg_erlubi_description = Ubigraph Erlang Client (and Process Visualizer)\npkg_erlubi_homepage = https://github.com/krestenkrab/erlubi\npkg_erlubi_fetch = git\npkg_erlubi_repo = https://github.com/krestenkrab/erlubi\npkg_erlubi_commit = master\n\nPACKAGES += erlvolt\npkg_erlvolt_name = erlvolt\npkg_erlvolt_description = VoltDB Erlang Client Driver\npkg_erlvolt_homepage = https://github.com/VoltDB/voltdb-client-erlang\npkg_erlvolt_fetch = git\npkg_erlvolt_repo = https://github.com/VoltDB/voltdb-client-erlang\npkg_erlvolt_commit = master\n\nPACKAGES += erlware_commons\npkg_erlware_commons_name = erlware_commons\npkg_erlware_commons_description = Erlware Commons is an Erlware project focused on all aspects of reusable Erlang components.\npkg_erlware_commons_homepage = https://github.com/erlware/erlware_commons\npkg_erlware_commons_fetch = git\npkg_erlware_commons_repo = https://github.com/erlware/erlware_commons\npkg_erlware_commons_commit = master\n\nPACKAGES += erlydtl\npkg_erlydtl_name = erlydtl\npkg_erlydtl_description = Django Template Language for Erlang.\npkg_erlydtl_homepage = https://github.com/erlydtl/erlydtl\npkg_erlydtl_fetch = git\npkg_erlydtl_repo = https://github.com/erlydtl/erlydtl\npkg_erlydtl_commit = master\n\nPACKAGES += errd\npkg_errd_name = errd\npkg_errd_description = Erlang RRDTool library\npkg_errd_homepage = https://github.com/archaelus/errd\npkg_errd_fetch = git\npkg_errd_repo = https://github.com/archaelus/errd\npkg_errd_commit = master\n\nPACKAGES += erserve\npkg_erserve_name = erserve\npkg_erserve_description = Erlang/Rserve communication interface\npkg_erserve_homepage = https://github.com/del/erserve\npkg_erserve_fetch = git\npkg_erserve_repo = https://github.com/del/erserve\npkg_erserve_commit = master\n\nPACKAGES += escalus\npkg_escalus_name = escalus\npkg_escalus_description = An XMPP client library in Erlang for conveniently testing XMPP servers\npkg_escalus_homepage = https://github.com/esl/escalus\npkg_escalus_fetch = git\npkg_escalus_repo = https://github.com/esl/escalus\npkg_escalus_commit = master\n\nPACKAGES += esh_mk\npkg_esh_mk_name = esh_mk\npkg_esh_mk_description = esh template engine plugin for erlang.mk\npkg_esh_mk_homepage = https://github.com/crownedgrouse/esh.mk\npkg_esh_mk_fetch = git\npkg_esh_mk_repo = https://github.com/crownedgrouse/esh.mk.git\npkg_esh_mk_commit = master\n\nPACKAGES += espec\npkg_espec_name = espec\npkg_espec_description = ESpec: Behaviour driven development framework for Erlang\npkg_espec_homepage = https://github.com/lucaspiller/espec\npkg_espec_fetch = git\npkg_espec_repo = https://github.com/lucaspiller/espec\npkg_espec_commit = master\n\nPACKAGES += estatsd\npkg_estatsd_name = estatsd\npkg_estatsd_description = Erlang stats aggregation app that periodically flushes data to graphite\npkg_estatsd_homepage = https://github.com/RJ/estatsd\npkg_estatsd_fetch = git\npkg_estatsd_repo = https://github.com/RJ/estatsd\npkg_estatsd_commit = master\n\nPACKAGES += etap\npkg_etap_name = etap\npkg_etap_description = etap is a simple erlang testing library that provides TAP compliant output.\npkg_etap_homepage = https://github.com/ngerakines/etap\npkg_etap_fetch = git\npkg_etap_repo = https://github.com/ngerakines/etap\npkg_etap_commit = master\n\nPACKAGES += etest\npkg_etest_name = etest\npkg_etest_description = A lightweight, convention over configuration test framework for Erlang\npkg_etest_homepage = https://github.com/wooga/etest\npkg_etest_fetch = git\npkg_etest_repo = https://github.com/wooga/etest\npkg_etest_commit = master\n\nPACKAGES += etest_http\npkg_etest_http_name = etest_http\npkg_etest_http_description = etest Assertions around HTTP (client-side)\npkg_etest_http_homepage = https://github.com/wooga/etest_http\npkg_etest_http_fetch = git\npkg_etest_http_repo = https://github.com/wooga/etest_http\npkg_etest_http_commit = master\n\nPACKAGES += etoml\npkg_etoml_name = etoml\npkg_etoml_description = TOML language erlang parser\npkg_etoml_homepage = https://github.com/kalta/etoml\npkg_etoml_fetch = git\npkg_etoml_repo = https://github.com/kalta/etoml\npkg_etoml_commit = master\n\nPACKAGES += eunit\npkg_eunit_name = eunit\npkg_eunit_description = The EUnit lightweight unit testing framework for Erlang - this is the canonical development repository.\npkg_eunit_homepage = https://github.com/richcarl/eunit\npkg_eunit_fetch = git\npkg_eunit_repo = https://github.com/richcarl/eunit\npkg_eunit_commit = master\n\nPACKAGES += eunit_formatters\npkg_eunit_formatters_name = eunit_formatters\npkg_eunit_formatters_description = Because eunit's output sucks. Let's make it better.\npkg_eunit_formatters_homepage = https://github.com/seancribbs/eunit_formatters\npkg_eunit_formatters_fetch = git\npkg_eunit_formatters_repo = https://github.com/seancribbs/eunit_formatters\npkg_eunit_formatters_commit = master\n\nPACKAGES += euthanasia\npkg_euthanasia_name = euthanasia\npkg_euthanasia_description = Merciful killer for your Erlang processes\npkg_euthanasia_homepage = https://github.com/doubleyou/euthanasia\npkg_euthanasia_fetch = git\npkg_euthanasia_repo = https://github.com/doubleyou/euthanasia\npkg_euthanasia_commit = master\n\nPACKAGES += evum\npkg_evum_name = evum\npkg_evum_description = Spawn Linux VMs as Erlang processes in the Erlang VM\npkg_evum_homepage = https://github.com/msantos/evum\npkg_evum_fetch = git\npkg_evum_repo = https://github.com/msantos/evum\npkg_evum_commit = master\n\nPACKAGES += exec\npkg_exec_name = erlexec\npkg_exec_description = Execute and control OS processes from Erlang/OTP.\npkg_exec_homepage = http://saleyn.github.com/erlexec\npkg_exec_fetch = git\npkg_exec_repo = https://github.com/saleyn/erlexec\npkg_exec_commit = master\n\nPACKAGES += exml\npkg_exml_name = exml\npkg_exml_description = XML parsing library in Erlang\npkg_exml_homepage = https://github.com/paulgray/exml\npkg_exml_fetch = git\npkg_exml_repo = https://github.com/paulgray/exml\npkg_exml_commit = master\n\nPACKAGES += exometer\npkg_exometer_name = exometer\npkg_exometer_description = Basic measurement objects and probe behavior\npkg_exometer_homepage = https://github.com/Feuerlabs/exometer\npkg_exometer_fetch = git\npkg_exometer_repo = https://github.com/Feuerlabs/exometer\npkg_exometer_commit = master\n\nPACKAGES += exs1024\npkg_exs1024_name = exs1024\npkg_exs1024_description = Xorshift1024star pseudo random number generator for Erlang.\npkg_exs1024_homepage = https://github.com/jj1bdx/exs1024\npkg_exs1024_fetch = git\npkg_exs1024_repo = https://github.com/jj1bdx/exs1024\npkg_exs1024_commit = master\n\nPACKAGES += exsplus116\npkg_exsplus116_name = exsplus116\npkg_exsplus116_description = Xorshift116plus for Erlang\npkg_exsplus116_homepage = https://github.com/jj1bdx/exsplus116\npkg_exsplus116_fetch = git\npkg_exsplus116_repo = https://github.com/jj1bdx/exsplus116\npkg_exsplus116_commit = master\n\nPACKAGES += ezmtp\npkg_ezmtp_name = ezmtp\npkg_ezmtp_description = ZMTP protocol in pure Erlang.\npkg_ezmtp_homepage = https://github.com/a13x/ezmtp\npkg_ezmtp_fetch = git\npkg_ezmtp_repo = https://github.com/a13x/ezmtp\npkg_ezmtp_commit = master\n\nPACKAGES += fast_disk_log\npkg_fast_disk_log_name = fast_disk_log\npkg_fast_disk_log_description = Pool-based asynchronous Erlang disk logger\npkg_fast_disk_log_homepage = https://github.com/lpgauth/fast_disk_log\npkg_fast_disk_log_fetch = git\npkg_fast_disk_log_repo = https://github.com/lpgauth/fast_disk_log\npkg_fast_disk_log_commit = master\n\nPACKAGES += feeder\npkg_feeder_name = feeder\npkg_feeder_description = Stream parse RSS and Atom formatted XML feeds.\npkg_feeder_homepage = https://github.com/michaelnisi/feeder\npkg_feeder_fetch = git\npkg_feeder_repo = https://github.com/michaelnisi/feeder\npkg_feeder_commit = master\n\nPACKAGES += find_crate\npkg_find_crate_name = find_crate\npkg_find_crate_description = Find Rust libs and exes in Erlang application priv directory\npkg_find_crate_homepage = https://github.com/goertzenator/find_crate\npkg_find_crate_fetch = git\npkg_find_crate_repo = https://github.com/goertzenator/find_crate\npkg_find_crate_commit = master\n\nPACKAGES += fix\npkg_fix_name = fix\npkg_fix_description = http://fixprotocol.org/ implementation.\npkg_fix_homepage = https://github.com/maxlapshin/fix\npkg_fix_fetch = git\npkg_fix_repo = https://github.com/maxlapshin/fix\npkg_fix_commit = master\n\nPACKAGES += flower\npkg_flower_name = flower\npkg_flower_description = FlowER - a Erlang OpenFlow development platform\npkg_flower_homepage = https://github.com/travelping/flower\npkg_flower_fetch = git\npkg_flower_repo = https://github.com/travelping/flower\npkg_flower_commit = master\n\nPACKAGES += fn\npkg_fn_name = fn\npkg_fn_description = Function utilities for Erlang\npkg_fn_homepage = https://github.com/reiddraper/fn\npkg_fn_fetch = git\npkg_fn_repo = https://github.com/reiddraper/fn\npkg_fn_commit = master\n\nPACKAGES += folsom\npkg_folsom_name = folsom\npkg_folsom_description = Expose Erlang Events and Metrics\npkg_folsom_homepage = https://github.com/boundary/folsom\npkg_folsom_fetch = git\npkg_folsom_repo = https://github.com/boundary/folsom\npkg_folsom_commit = master\n\nPACKAGES += folsom_cowboy\npkg_folsom_cowboy_name = folsom_cowboy\npkg_folsom_cowboy_description = A Cowboy based Folsom HTTP Wrapper.\npkg_folsom_cowboy_homepage = https://github.com/boundary/folsom_cowboy\npkg_folsom_cowboy_fetch = git\npkg_folsom_cowboy_repo = https://github.com/boundary/folsom_cowboy\npkg_folsom_cowboy_commit = master\n\nPACKAGES += fs\npkg_fs_name = fs\npkg_fs_description = Erlang FileSystem Listener\npkg_fs_homepage = https://github.com/synrc/fs\npkg_fs_fetch = git\npkg_fs_repo = https://github.com/synrc/fs\npkg_fs_commit = master\n\nPACKAGES += fuse\npkg_fuse_name = fuse\npkg_fuse_description = A Circuit Breaker for Erlang\npkg_fuse_homepage = https://github.com/jlouis/fuse\npkg_fuse_fetch = git\npkg_fuse_repo = https://github.com/jlouis/fuse\npkg_fuse_commit = master\n\nPACKAGES += gcm\npkg_gcm_name = gcm\npkg_gcm_description = An Erlang application for Google Cloud Messaging\npkg_gcm_homepage = https://github.com/pdincau/gcm-erlang\npkg_gcm_fetch = git\npkg_gcm_repo = https://github.com/pdincau/gcm-erlang\npkg_gcm_commit = master\n\nPACKAGES += gcprof\npkg_gcprof_name = gcprof\npkg_gcprof_description = Garbage Collection profiler for Erlang\npkg_gcprof_homepage = https://github.com/knutin/gcprof\npkg_gcprof_fetch = git\npkg_gcprof_repo = https://github.com/knutin/gcprof\npkg_gcprof_commit = master\n\nPACKAGES += geas\npkg_geas_name = geas\npkg_geas_description = Guess Erlang Application Scattering\npkg_geas_homepage = https://github.com/crownedgrouse/geas\npkg_geas_fetch = git\npkg_geas_repo = https://github.com/crownedgrouse/geas\npkg_geas_commit = master\n\nPACKAGES += geef\npkg_geef_name = geef\npkg_geef_description = Git NEEEEF (Erlang NIF)\npkg_geef_homepage = https://github.com/carlosmn/geef\npkg_geef_fetch = git\npkg_geef_repo = https://github.com/carlosmn/geef\npkg_geef_commit = master\n\nPACKAGES += gen_coap\npkg_gen_coap_name = gen_coap\npkg_gen_coap_description = Generic Erlang CoAP Client/Server\npkg_gen_coap_homepage = https://github.com/gotthardp/gen_coap\npkg_gen_coap_fetch = git\npkg_gen_coap_repo = https://github.com/gotthardp/gen_coap\npkg_gen_coap_commit = master\n\nPACKAGES += gen_cycle\npkg_gen_cycle_name = gen_cycle\npkg_gen_cycle_description = Simple, generic OTP behaviour for recurring tasks\npkg_gen_cycle_homepage = https://github.com/aerosol/gen_cycle\npkg_gen_cycle_fetch = git\npkg_gen_cycle_repo = https://github.com/aerosol/gen_cycle\npkg_gen_cycle_commit = develop\n\nPACKAGES += gen_icmp\npkg_gen_icmp_name = gen_icmp\npkg_gen_icmp_description = Erlang interface to ICMP sockets\npkg_gen_icmp_homepage = https://github.com/msantos/gen_icmp\npkg_gen_icmp_fetch = git\npkg_gen_icmp_repo = https://github.com/msantos/gen_icmp\npkg_gen_icmp_commit = master\n\nPACKAGES += gen_leader\npkg_gen_leader_name = gen_leader\npkg_gen_leader_description = leader election behavior\npkg_gen_leader_homepage = https://github.com/garret-smith/gen_leader_revival\npkg_gen_leader_fetch = git\npkg_gen_leader_repo = https://github.com/garret-smith/gen_leader_revival\npkg_gen_leader_commit = master\n\nPACKAGES += gen_nb_server\npkg_gen_nb_server_name = gen_nb_server\npkg_gen_nb_server_description = OTP behavior for writing non-blocking servers\npkg_gen_nb_server_homepage = https://github.com/kevsmith/gen_nb_server\npkg_gen_nb_server_fetch = git\npkg_gen_nb_server_repo = https://github.com/kevsmith/gen_nb_server\npkg_gen_nb_server_commit = master\n\nPACKAGES += gen_paxos\npkg_gen_paxos_name = gen_paxos\npkg_gen_paxos_description = An Erlang/OTP-style implementation of the PAXOS distributed consensus protocol\npkg_gen_paxos_homepage = https://github.com/gburd/gen_paxos\npkg_gen_paxos_fetch = git\npkg_gen_paxos_repo = https://github.com/gburd/gen_paxos\npkg_gen_paxos_commit = master\n\nPACKAGES += gen_rpc\npkg_gen_rpc_name = gen_rpc\npkg_gen_rpc_description = A scalable RPC library for Erlang-VM based languages\npkg_gen_rpc_homepage = https://github.com/priestjim/gen_rpc.git\npkg_gen_rpc_fetch = git\npkg_gen_rpc_repo = https://github.com/priestjim/gen_rpc.git\npkg_gen_rpc_commit = master\n\nPACKAGES += gen_smtp\npkg_gen_smtp_name = gen_smtp\npkg_gen_smtp_description = A generic Erlang SMTP server and client that can be extended via callback modules\npkg_gen_smtp_homepage = https://github.com/Vagabond/gen_smtp\npkg_gen_smtp_fetch = git\npkg_gen_smtp_repo = https://github.com/Vagabond/gen_smtp\npkg_gen_smtp_commit = master\n\nPACKAGES += gen_tracker\npkg_gen_tracker_name = gen_tracker\npkg_gen_tracker_description = supervisor with ets handling of children and their metadata\npkg_gen_tracker_homepage = https://github.com/erlyvideo/gen_tracker\npkg_gen_tracker_fetch = git\npkg_gen_tracker_repo = https://github.com/erlyvideo/gen_tracker\npkg_gen_tracker_commit = master\n\nPACKAGES += gen_unix\npkg_gen_unix_name = gen_unix\npkg_gen_unix_description = Erlang Unix socket interface\npkg_gen_unix_homepage = https://github.com/msantos/gen_unix\npkg_gen_unix_fetch = git\npkg_gen_unix_repo = https://github.com/msantos/gen_unix\npkg_gen_unix_commit = master\n\nPACKAGES += geode\npkg_geode_name = geode\npkg_geode_description = geohash/proximity lookup in pure, uncut erlang.\npkg_geode_homepage = https://github.com/bradfordw/geode\npkg_geode_fetch = git\npkg_geode_repo = https://github.com/bradfordw/geode\npkg_geode_commit = master\n\nPACKAGES += getopt\npkg_getopt_name = getopt\npkg_getopt_description = Module to parse command line arguments using the GNU getopt syntax\npkg_getopt_homepage = https://github.com/jcomellas/getopt\npkg_getopt_fetch = git\npkg_getopt_repo = https://github.com/jcomellas/getopt\npkg_getopt_commit = master\n\nPACKAGES += gettext\npkg_gettext_name = gettext\npkg_gettext_description = Erlang internationalization library.\npkg_gettext_homepage = https://github.com/etnt/gettext\npkg_gettext_fetch = git\npkg_gettext_repo = https://github.com/etnt/gettext\npkg_gettext_commit = master\n\nPACKAGES += giallo\npkg_giallo_name = giallo\npkg_giallo_description = Small and flexible web framework on top of Cowboy\npkg_giallo_homepage = https://github.com/kivra/giallo\npkg_giallo_fetch = git\npkg_giallo_repo = https://github.com/kivra/giallo\npkg_giallo_commit = master\n\nPACKAGES += gin\npkg_gin_name = gin\npkg_gin_description = The guards  and  for Erlang parse_transform\npkg_gin_homepage = https://github.com/mad-cocktail/gin\npkg_gin_fetch = git\npkg_gin_repo = https://github.com/mad-cocktail/gin\npkg_gin_commit = master\n\nPACKAGES += gitty\npkg_gitty_name = gitty\npkg_gitty_description = Git access in erlang\npkg_gitty_homepage = https://github.com/maxlapshin/gitty\npkg_gitty_fetch = git\npkg_gitty_repo = https://github.com/maxlapshin/gitty\npkg_gitty_commit = master\n\nPACKAGES += gpb\npkg_gpb_name = gpb\npkg_gpb_description = A Google Protobuf implementation for Erlang\npkg_gpb_homepage = https://github.com/tomas-abrahamsson/gpb\npkg_gpb_fetch = git\npkg_gpb_repo = https://github.com/tomas-abrahamsson/gpb\npkg_gpb_commit = master\n\nPACKAGES += gproc\npkg_gproc_name = gproc\npkg_gproc_description = Extended process registry for Erlang\npkg_gproc_homepage = https://github.com/uwiger/gproc\npkg_gproc_fetch = git\npkg_gproc_repo = https://github.com/uwiger/gproc\npkg_gproc_commit = master\n\nPACKAGES += grapherl\npkg_grapherl_name = grapherl\npkg_grapherl_description = Create graphs of Erlang systems and programs\npkg_grapherl_homepage = https://github.com/eproxus/grapherl\npkg_grapherl_fetch = git\npkg_grapherl_repo = https://github.com/eproxus/grapherl\npkg_grapherl_commit = master\n\nPACKAGES += grpc\npkg_grpc_name = grpc\npkg_grpc_description = gRPC server in Erlang\npkg_grpc_homepage = https://github.com/Bluehouse-Technology/grpc\npkg_grpc_fetch = git\npkg_grpc_repo = https://github.com/Bluehouse-Technology/grpc\npkg_grpc_commit = master\n\nPACKAGES += grpc_client\npkg_grpc_client_name = grpc_client\npkg_grpc_client_description = gRPC client in Erlang\npkg_grpc_client_homepage = https://github.com/Bluehouse-Technology/grpc_client\npkg_grpc_client_fetch = git\npkg_grpc_client_repo = https://github.com/Bluehouse-Technology/grpc_client\npkg_grpc_client_commit = master\n\nPACKAGES += gun\npkg_gun_name = gun\npkg_gun_description = Asynchronous SPDY, HTTP and Websocket client written in Erlang.\npkg_gun_homepage = http//ninenines.eu\npkg_gun_fetch = git\npkg_gun_repo = https://github.com/ninenines/gun\npkg_gun_commit = master\n\nPACKAGES += hackney\npkg_hackney_name = hackney\npkg_hackney_description = simple HTTP client in Erlang\npkg_hackney_homepage = https://github.com/benoitc/hackney\npkg_hackney_fetch = git\npkg_hackney_repo = https://github.com/benoitc/hackney\npkg_hackney_commit = master\n\nPACKAGES += hamcrest\npkg_hamcrest_name = hamcrest\npkg_hamcrest_description = Erlang port of Hamcrest\npkg_hamcrest_homepage = https://github.com/hyperthunk/hamcrest-erlang\npkg_hamcrest_fetch = git\npkg_hamcrest_repo = https://github.com/hyperthunk/hamcrest-erlang\npkg_hamcrest_commit = master\n\nPACKAGES += hottub\npkg_hottub_name = hottub\npkg_hottub_description = Permanent Erlang Worker Pool\npkg_hottub_homepage = https://github.com/bfrog/hottub\npkg_hottub_fetch = git\npkg_hottub_repo = https://github.com/bfrog/hottub\npkg_hottub_commit = master\n\nPACKAGES += hpack\npkg_hpack_name = hpack\npkg_hpack_description = HPACK Implementation for Erlang\npkg_hpack_homepage = https://github.com/joedevivo/hpack\npkg_hpack_fetch = git\npkg_hpack_repo = https://github.com/joedevivo/hpack\npkg_hpack_commit = master\n\nPACKAGES += hyper\npkg_hyper_name = hyper\npkg_hyper_description = Erlang implementation of HyperLogLog\npkg_hyper_homepage = https://github.com/GameAnalytics/hyper\npkg_hyper_fetch = git\npkg_hyper_repo = https://github.com/GameAnalytics/hyper\npkg_hyper_commit = master\n\nPACKAGES += i18n\npkg_i18n_name = i18n\npkg_i18n_description = International components for unicode from Erlang (unicode, date, string, number, format, locale, localization, transliteration, icu4e)\npkg_i18n_homepage = https://github.com/erlang-unicode/i18n\npkg_i18n_fetch = git\npkg_i18n_repo = https://github.com/erlang-unicode/i18n\npkg_i18n_commit = master\n\nPACKAGES += ibrowse\npkg_ibrowse_name = ibrowse\npkg_ibrowse_description = Erlang HTTP client\npkg_ibrowse_homepage = https://github.com/cmullaparthi/ibrowse\npkg_ibrowse_fetch = git\npkg_ibrowse_repo = https://github.com/cmullaparthi/ibrowse\npkg_ibrowse_commit = master\n\nPACKAGES += idna\npkg_idna_name = idna\npkg_idna_description = Erlang IDNA lib\npkg_idna_homepage = https://github.com/benoitc/erlang-idna\npkg_idna_fetch = git\npkg_idna_repo = https://github.com/benoitc/erlang-idna\npkg_idna_commit = master\n\nPACKAGES += irc_lib\npkg_irc_lib_name = irc_lib\npkg_irc_lib_description = Erlang irc client library\npkg_irc_lib_homepage = https://github.com/OtpChatBot/irc_lib\npkg_irc_lib_fetch = git\npkg_irc_lib_repo = https://github.com/OtpChatBot/irc_lib\npkg_irc_lib_commit = master\n\nPACKAGES += ircd\npkg_ircd_name = ircd\npkg_ircd_description = A pluggable IRC daemon application/library for Erlang.\npkg_ircd_homepage = https://github.com/tonyg/erlang-ircd\npkg_ircd_fetch = git\npkg_ircd_repo = https://github.com/tonyg/erlang-ircd\npkg_ircd_commit = master\n\nPACKAGES += iris\npkg_iris_name = iris\npkg_iris_description = Iris Erlang binding\npkg_iris_homepage = https://github.com/project-iris/iris-erl\npkg_iris_fetch = git\npkg_iris_repo = https://github.com/project-iris/iris-erl\npkg_iris_commit = master\n\nPACKAGES += iso8601\npkg_iso8601_name = iso8601\npkg_iso8601_description = Erlang ISO 8601 date formatter/parser\npkg_iso8601_homepage = https://github.com/seansawyer/erlang_iso8601\npkg_iso8601_fetch = git\npkg_iso8601_repo = https://github.com/seansawyer/erlang_iso8601\npkg_iso8601_commit = master\n\nPACKAGES += jamdb_sybase\npkg_jamdb_sybase_name = jamdb_sybase\npkg_jamdb_sybase_description = Erlang driver for SAP Sybase ASE\npkg_jamdb_sybase_homepage = https://github.com/erlangbureau/jamdb_sybase\npkg_jamdb_sybase_fetch = git\npkg_jamdb_sybase_repo = https://github.com/erlangbureau/jamdb_sybase\npkg_jamdb_sybase_commit = master\n\nPACKAGES += jesse\npkg_jesse_name = jesse\npkg_jesse_description = jesse (JSon Schema Erlang) is an implementation of a json schema validator for Erlang.\npkg_jesse_homepage = https://github.com/for-GET/jesse\npkg_jesse_fetch = git\npkg_jesse_repo = https://github.com/for-GET/jesse\npkg_jesse_commit = master\n\nPACKAGES += jiffy\npkg_jiffy_name = jiffy\npkg_jiffy_description = JSON NIFs for Erlang.\npkg_jiffy_homepage = https://github.com/davisp/jiffy\npkg_jiffy_fetch = git\npkg_jiffy_repo = https://github.com/davisp/jiffy\npkg_jiffy_commit = master\n\nPACKAGES += jiffy_v\npkg_jiffy_v_name = jiffy_v\npkg_jiffy_v_description = JSON validation utility\npkg_jiffy_v_homepage = https://github.com/shizzard/jiffy-v\npkg_jiffy_v_fetch = git\npkg_jiffy_v_repo = https://github.com/shizzard/jiffy-v\npkg_jiffy_v_commit = master\n\nPACKAGES += jobs\npkg_jobs_name = jobs\npkg_jobs_description = Job scheduler for load regulation\npkg_jobs_homepage = https://github.com/uwiger/jobs\npkg_jobs_fetch = git\npkg_jobs_repo = https://github.com/uwiger/jobs\npkg_jobs_commit = master\n\nPACKAGES += joxa\npkg_joxa_name = joxa\npkg_joxa_description = A Modern Lisp for the Erlang VM\npkg_joxa_homepage = https://github.com/joxa/joxa\npkg_joxa_fetch = git\npkg_joxa_repo = https://github.com/joxa/joxa\npkg_joxa_commit = master\n\nPACKAGES += json_rec\npkg_json_rec_name = json_rec\npkg_json_rec_description = JSON to erlang record\npkg_json_rec_homepage = https://github.com/justinkirby/json_rec\npkg_json_rec_fetch = git\npkg_json_rec_repo = https://github.com/justinkirby/json_rec\npkg_json_rec_commit = master\n\nPACKAGES += jsone\npkg_jsone_name = jsone\npkg_jsone_description = An Erlang library for encoding, decoding JSON data.\npkg_jsone_homepage = https://github.com/sile/jsone.git\npkg_jsone_fetch = git\npkg_jsone_repo = https://github.com/sile/jsone.git\npkg_jsone_commit = master\n\nPACKAGES += jsonpath\npkg_jsonpath_name = jsonpath\npkg_jsonpath_description = Fast Erlang JSON data retrieval and updates via javascript-like notation\npkg_jsonpath_homepage = https://github.com/GeneStevens/jsonpath\npkg_jsonpath_fetch = git\npkg_jsonpath_repo = https://github.com/GeneStevens/jsonpath\npkg_jsonpath_commit = master\n\nPACKAGES += jsonx\npkg_jsonx_name = jsonx\npkg_jsonx_description = JSONX is an Erlang library for efficient decode and encode JSON, written in C.\npkg_jsonx_homepage = https://github.com/iskra/jsonx\npkg_jsonx_fetch = git\npkg_jsonx_repo = https://github.com/iskra/jsonx\npkg_jsonx_commit = master\n\nPACKAGES += jsx\npkg_jsx_name = jsx\npkg_jsx_description = An Erlang application for consuming, producing and manipulating JSON.\npkg_jsx_homepage = https://github.com/talentdeficit/jsx\npkg_jsx_fetch = git\npkg_jsx_repo = https://github.com/talentdeficit/jsx\npkg_jsx_commit = main\n\nPACKAGES += kafka_protocol\npkg_kafka_protocol_name = kafka_protocol\npkg_kafka_protocol_description = Kafka protocol Erlang library\npkg_kafka_protocol_homepage = https://github.com/kafka4beam/kafka_protocol\npkg_kafka_protocol_fetch = git\npkg_kafka_protocol_repo = https://github.com/kafka4beam/kafka_protocol\npkg_kafka_protocol_commit = master\n\nPACKAGES += kai\npkg_kai_name = kai\npkg_kai_description = DHT storage by Takeshi Inoue\npkg_kai_homepage = https://github.com/synrc/kai\npkg_kai_fetch = git\npkg_kai_repo = https://github.com/synrc/kai\npkg_kai_commit = master\n\nPACKAGES += katja\npkg_katja_name = katja\npkg_katja_description = A simple Riemann client written in Erlang.\npkg_katja_homepage = https://github.com/nifoc/katja\npkg_katja_fetch = git\npkg_katja_repo = https://github.com/nifoc/katja\npkg_katja_commit = master\n\nPACKAGES += key2value\npkg_key2value_name = key2value\npkg_key2value_description = Erlang 2-way map\npkg_key2value_homepage = https://github.com/okeuday/key2value\npkg_key2value_fetch = git\npkg_key2value_repo = https://github.com/okeuday/key2value\npkg_key2value_commit = master\n\nPACKAGES += keys1value\npkg_keys1value_name = keys1value\npkg_keys1value_description = Erlang set associative map for key lists\npkg_keys1value_homepage = https://github.com/okeuday/keys1value\npkg_keys1value_fetch = git\npkg_keys1value_repo = https://github.com/okeuday/keys1value\npkg_keys1value_commit = master\n\nPACKAGES += kinetic\npkg_kinetic_name = kinetic\npkg_kinetic_description = Erlang Kinesis Client\npkg_kinetic_homepage = https://github.com/AdRoll/kinetic\npkg_kinetic_fetch = git\npkg_kinetic_repo = https://github.com/AdRoll/kinetic\npkg_kinetic_commit = main\n\nPACKAGES += kjell\npkg_kjell_name = kjell\npkg_kjell_description = Erlang Shell\npkg_kjell_homepage = https://github.com/karlll/kjell\npkg_kjell_fetch = git\npkg_kjell_repo = https://github.com/karlll/kjell\npkg_kjell_commit = master\n\nPACKAGES += kraken\npkg_kraken_name = kraken\npkg_kraken_description = Distributed Pubsub Server for Realtime Apps\npkg_kraken_homepage = https://github.com/Asana/kraken\npkg_kraken_fetch = git\npkg_kraken_repo = https://github.com/Asana/kraken\npkg_kraken_commit = master\n\nPACKAGES += kucumberl\npkg_kucumberl_name = kucumberl\npkg_kucumberl_description = A pure-erlang, open-source, implementation of Cucumber\npkg_kucumberl_homepage = https://github.com/openshine/kucumberl\npkg_kucumberl_fetch = git\npkg_kucumberl_repo = https://github.com/openshine/kucumberl\npkg_kucumberl_commit = master\n\nPACKAGES += kvc\npkg_kvc_name = kvc\npkg_kvc_description = KVC - Key Value Coding for Erlang data structures\npkg_kvc_homepage = https://github.com/etrepum/kvc\npkg_kvc_fetch = git\npkg_kvc_repo = https://github.com/etrepum/kvc\npkg_kvc_commit = master\n\nPACKAGES += kvlists\npkg_kvlists_name = kvlists\npkg_kvlists_description = Lists of key-value pairs (decoded JSON) in Erlang\npkg_kvlists_homepage = https://github.com/jcomellas/kvlists\npkg_kvlists_fetch = git\npkg_kvlists_repo = https://github.com/jcomellas/kvlists\npkg_kvlists_commit = master\n\nPACKAGES += kvs\npkg_kvs_name = kvs\npkg_kvs_description = Container and Iterator\npkg_kvs_homepage = https://github.com/synrc/kvs\npkg_kvs_fetch = git\npkg_kvs_repo = https://github.com/synrc/kvs\npkg_kvs_commit = master\n\nPACKAGES += lager\npkg_lager_name = lager\npkg_lager_description = A logging framework for Erlang/OTP.\npkg_lager_homepage = https://github.com/erlang-lager/lager\npkg_lager_fetch = git\npkg_lager_repo = https://github.com/erlang-lager/lager\npkg_lager_commit = master\n\nPACKAGES += lager_syslog\npkg_lager_syslog_name = lager_syslog\npkg_lager_syslog_description = Syslog backend for lager\npkg_lager_syslog_homepage = https://github.com/erlang-lager/lager_syslog\npkg_lager_syslog_fetch = git\npkg_lager_syslog_repo = https://github.com/erlang-lager/lager_syslog\npkg_lager_syslog_commit = master\n\nPACKAGES += lasse\npkg_lasse_name = lasse\npkg_lasse_description = SSE handler for Cowboy\npkg_lasse_homepage = https://github.com/inaka/lasse\npkg_lasse_fetch = git\npkg_lasse_repo = https://github.com/inaka/lasse\npkg_lasse_commit = master\n\nPACKAGES += ldap\npkg_ldap_name = ldap\npkg_ldap_description = LDAP server written in Erlang\npkg_ldap_homepage = https://github.com/spawnproc/ldap\npkg_ldap_fetch = git\npkg_ldap_repo = https://github.com/spawnproc/ldap\npkg_ldap_commit = master\n\nPACKAGES += lfe\npkg_lfe_name = lfe\npkg_lfe_description = Lisp Flavoured Erlang (LFE)\npkg_lfe_homepage = https://github.com/rvirding/lfe\npkg_lfe_fetch = git\npkg_lfe_repo = https://github.com/rvirding/lfe\npkg_lfe_commit = master\n\nPACKAGES += live\npkg_live_name = live\npkg_live_description = Automated module and configuration reloader.\npkg_live_homepage = http://ninenines.eu\npkg_live_fetch = git\npkg_live_repo = https://github.com/ninenines/live\npkg_live_commit = master\n\nPACKAGES += locker\npkg_locker_name = locker\npkg_locker_description = Atomic distributed 'check and set' for short-lived keys\npkg_locker_homepage = https://github.com/wooga/locker\npkg_locker_fetch = git\npkg_locker_repo = https://github.com/wooga/locker\npkg_locker_commit = master\n\nPACKAGES += locks\npkg_locks_name = locks\npkg_locks_description = A scalable, deadlock-resolving resource locker\npkg_locks_homepage = https://github.com/uwiger/locks\npkg_locks_fetch = git\npkg_locks_repo = https://github.com/uwiger/locks\npkg_locks_commit = master\n\nPACKAGES += log4erl\npkg_log4erl_name = log4erl\npkg_log4erl_description = A logger for erlang in the spirit of Log4J.\npkg_log4erl_homepage = https://github.com/ahmednawras/log4erl\npkg_log4erl_fetch = git\npkg_log4erl_repo = https://github.com/ahmednawras/log4erl\npkg_log4erl_commit = master\n\nPACKAGES += lol\npkg_lol_name = lol\npkg_lol_description = Lisp on erLang, and programming is fun again\npkg_lol_homepage = https://github.com/b0oh/lol\npkg_lol_fetch = git\npkg_lol_repo = https://github.com/b0oh/lol\npkg_lol_commit = master\n\nPACKAGES += lucid\npkg_lucid_name = lucid\npkg_lucid_description = HTTP/2 server written in Erlang\npkg_lucid_homepage = https://github.com/tatsuhiro-t/lucid\npkg_lucid_fetch = git\npkg_lucid_repo = https://github.com/tatsuhiro-t/lucid\npkg_lucid_commit = master\n\nPACKAGES += luerl\npkg_luerl_name = luerl\npkg_luerl_description = Lua in Erlang\npkg_luerl_homepage = https://github.com/rvirding/luerl\npkg_luerl_fetch = git\npkg_luerl_repo = https://github.com/rvirding/luerl\npkg_luerl_commit = develop\n\nPACKAGES += lux\npkg_lux_name = lux\npkg_lux_description = Lux (LUcid eXpect scripting) simplifies test automation and provides an Expect-style execution of commands\npkg_lux_homepage = https://github.com/hawk/lux\npkg_lux_fetch = git\npkg_lux_repo = https://github.com/hawk/lux\npkg_lux_commit = master\n\nPACKAGES += mad\npkg_mad_name = mad\npkg_mad_description = Small and Fast Rebar Replacement\npkg_mad_homepage = https://github.com/synrc/mad\npkg_mad_fetch = git\npkg_mad_repo = https://github.com/synrc/mad\npkg_mad_commit = master\n\nPACKAGES += marina\npkg_marina_name = marina\npkg_marina_description = Non-blocking Erlang Cassandra CQL3 client\npkg_marina_homepage = https://github.com/lpgauth/marina\npkg_marina_fetch = git\npkg_marina_repo = https://github.com/lpgauth/marina\npkg_marina_commit = master\n\nPACKAGES += mavg\npkg_mavg_name = mavg\npkg_mavg_description = Erlang :: Exponential moving average library\npkg_mavg_homepage = https://github.com/EchoTeam/mavg\npkg_mavg_fetch = git\npkg_mavg_repo = https://github.com/EchoTeam/mavg\npkg_mavg_commit = master\n\nPACKAGES += meck\npkg_meck_name = meck\npkg_meck_description = A mocking library for Erlang\npkg_meck_homepage = https://github.com/eproxus/meck\npkg_meck_fetch = git\npkg_meck_repo = https://github.com/eproxus/meck\npkg_meck_commit = master\n\nPACKAGES += mekao\npkg_mekao_name = mekao\npkg_mekao_description = SQL constructor\npkg_mekao_homepage = https://github.com/ddosia/mekao\npkg_mekao_fetch = git\npkg_mekao_repo = https://github.com/ddosia/mekao\npkg_mekao_commit = master\n\nPACKAGES += merl\npkg_merl_name = merl\npkg_merl_description = Metaprogramming in Erlang\npkg_merl_homepage = https://github.com/richcarl/merl\npkg_merl_fetch = git\npkg_merl_repo = https://github.com/richcarl/merl\npkg_merl_commit = master\n\nPACKAGES += mimerl\npkg_mimerl_name = mimerl\npkg_mimerl_description = library to handle mimetypes\npkg_mimerl_homepage = https://github.com/benoitc/mimerl\npkg_mimerl_fetch = git\npkg_mimerl_repo = https://github.com/benoitc/mimerl\npkg_mimerl_commit = master\n\nPACKAGES += mimetypes\npkg_mimetypes_name = mimetypes\npkg_mimetypes_description = Erlang MIME types library\npkg_mimetypes_homepage = https://github.com/spawngrid/mimetypes\npkg_mimetypes_fetch = git\npkg_mimetypes_repo = https://github.com/spawngrid/mimetypes\npkg_mimetypes_commit = master\n\nPACKAGES += mixer\npkg_mixer_name = mixer\npkg_mixer_description = Mix in functions from other modules\npkg_mixer_homepage = https://github.com/chef/mixer\npkg_mixer_fetch = git\npkg_mixer_repo = https://github.com/chef/mixer\npkg_mixer_commit = main\n\nPACKAGES += mochiweb\npkg_mochiweb_name = mochiweb\npkg_mochiweb_description = MochiWeb is an Erlang library for building lightweight HTTP servers.\npkg_mochiweb_homepage = https://github.com/mochi/mochiweb\npkg_mochiweb_fetch = git\npkg_mochiweb_repo = https://github.com/mochi/mochiweb\npkg_mochiweb_commit = main\n\nPACKAGES += mochiweb_xpath\npkg_mochiweb_xpath_name = mochiweb_xpath\npkg_mochiweb_xpath_description = XPath support for mochiweb's html parser\npkg_mochiweb_xpath_homepage = https://github.com/retnuh/mochiweb_xpath\npkg_mochiweb_xpath_fetch = git\npkg_mochiweb_xpath_repo = https://github.com/retnuh/mochiweb_xpath\npkg_mochiweb_xpath_commit = master\n\nPACKAGES += mockgyver\npkg_mockgyver_name = mockgyver\npkg_mockgyver_description = A mocking library for Erlang\npkg_mockgyver_homepage = https://github.com/klajo/mockgyver\npkg_mockgyver_fetch = git\npkg_mockgyver_repo = https://github.com/klajo/mockgyver\npkg_mockgyver_commit = master\n\nPACKAGES += modlib\npkg_modlib_name = modlib\npkg_modlib_description = Web framework based on Erlang's inets httpd\npkg_modlib_homepage = https://github.com/gar1t/modlib\npkg_modlib_fetch = git\npkg_modlib_repo = https://github.com/gar1t/modlib\npkg_modlib_commit = master\n\nPACKAGES += mongodb\npkg_mongodb_name = mongodb\npkg_mongodb_description = MongoDB driver for Erlang\npkg_mongodb_homepage = https://github.com/comtihon/mongodb-erlang\npkg_mongodb_fetch = git\npkg_mongodb_repo = https://github.com/comtihon/mongodb-erlang\npkg_mongodb_commit = master\n\nPACKAGES += mongooseim\npkg_mongooseim_name = mongooseim\npkg_mongooseim_description = Jabber / XMPP server with focus on performance and scalability, by Erlang Solutions\npkg_mongooseim_homepage = https://www.erlang-solutions.com/products/mongooseim-massively-scalable-ejabberd-platform\npkg_mongooseim_fetch = git\npkg_mongooseim_repo = https://github.com/esl/MongooseIM\npkg_mongooseim_commit = master\n\nPACKAGES += moyo\npkg_moyo_name = moyo\npkg_moyo_description = Erlang utility functions library\npkg_moyo_homepage = https://github.com/dwango/moyo\npkg_moyo_fetch = git\npkg_moyo_repo = https://github.com/dwango/moyo\npkg_moyo_commit = master\n\nPACKAGES += msgpack\npkg_msgpack_name = msgpack\npkg_msgpack_description = MessagePack (de)serializer implementation for Erlang\npkg_msgpack_homepage = https://github.com/msgpack/msgpack-erlang\npkg_msgpack_fetch = git\npkg_msgpack_repo = https://github.com/msgpack/msgpack-erlang\npkg_msgpack_commit = master\n\nPACKAGES += mu2\npkg_mu2_name = mu2\npkg_mu2_description = Erlang mutation testing tool\npkg_mu2_homepage = https://github.com/ramsay-t/mu2\npkg_mu2_fetch = git\npkg_mu2_repo = https://github.com/ramsay-t/mu2\npkg_mu2_commit = master\n\nPACKAGES += mustache\npkg_mustache_name = mustache\npkg_mustache_description = Mustache template engine for Erlang.\npkg_mustache_homepage = https://github.com/mojombo/mustache.erl\npkg_mustache_fetch = git\npkg_mustache_repo = https://github.com/mojombo/mustache.erl\npkg_mustache_commit = master\n\nPACKAGES += myproto\npkg_myproto_name = myproto\npkg_myproto_description = MySQL Server Protocol in Erlang\npkg_myproto_homepage = https://github.com/altenwald/myproto\npkg_myproto_fetch = git\npkg_myproto_repo = https://github.com/altenwald/myproto\npkg_myproto_commit = master\n\nPACKAGES += mysql\npkg_mysql_name = mysql\npkg_mysql_description = MySQL client library for Erlang/OTP\npkg_mysql_homepage = https://github.com/mysql-otp/mysql-otp\npkg_mysql_fetch = git\npkg_mysql_repo = https://github.com/mysql-otp/mysql-otp\npkg_mysql_commit = 1.7.0\n\nPACKAGES += n2o\npkg_n2o_name = n2o\npkg_n2o_description = WebSocket Application Server\npkg_n2o_homepage = https://github.com/5HT/n2o\npkg_n2o_fetch = git\npkg_n2o_repo = https://github.com/5HT/n2o\npkg_n2o_commit = master\n\nPACKAGES += nat_upnp\npkg_nat_upnp_name = nat_upnp\npkg_nat_upnp_description = Erlang library to map your internal port to an external using UNP IGD\npkg_nat_upnp_homepage = https://github.com/benoitc/nat_upnp\npkg_nat_upnp_fetch = git\npkg_nat_upnp_repo = https://github.com/benoitc/nat_upnp\npkg_nat_upnp_commit = master\n\nPACKAGES += neo4j\npkg_neo4j_name = neo4j\npkg_neo4j_description = Erlang client library for Neo4J.\npkg_neo4j_homepage = https://github.com/dmitriid/neo4j-erlang\npkg_neo4j_fetch = git\npkg_neo4j_repo = https://github.com/dmitriid/neo4j-erlang\npkg_neo4j_commit = master\n\nPACKAGES += neotoma\npkg_neotoma_name = neotoma\npkg_neotoma_description = Erlang library and packrat parser-generator for parsing expression grammars.\npkg_neotoma_homepage = https://github.com/seancribbs/neotoma\npkg_neotoma_fetch = git\npkg_neotoma_repo = https://github.com/seancribbs/neotoma\npkg_neotoma_commit = master\n\nPACKAGES += nifty\npkg_nifty_name = nifty\npkg_nifty_description = Erlang NIF wrapper generator\npkg_nifty_homepage = https://github.com/parapluu/nifty\npkg_nifty_fetch = git\npkg_nifty_repo = https://github.com/parapluu/nifty\npkg_nifty_commit = master\n\nPACKAGES += nitrogen_core\npkg_nitrogen_core_name = nitrogen_core\npkg_nitrogen_core_description = The core Nitrogen library.\npkg_nitrogen_core_homepage = http://nitrogenproject.com/\npkg_nitrogen_core_fetch = git\npkg_nitrogen_core_repo = https://github.com/nitrogen/nitrogen_core\npkg_nitrogen_core_commit = master\n\nPACKAGES += nkpacket\npkg_nkpacket_name = nkpacket\npkg_nkpacket_description = Generic Erlang transport layer\npkg_nkpacket_homepage = https://github.com/Nekso/nkpacket\npkg_nkpacket_fetch = git\npkg_nkpacket_repo = https://github.com/Nekso/nkpacket\npkg_nkpacket_commit = master\n\nPACKAGES += nksip\npkg_nksip_name = nksip\npkg_nksip_description = Erlang SIP application server\npkg_nksip_homepage = https://github.com/kalta/nksip\npkg_nksip_fetch = git\npkg_nksip_repo = https://github.com/kalta/nksip\npkg_nksip_commit = master\n\nPACKAGES += nodefinder\npkg_nodefinder_name = nodefinder\npkg_nodefinder_description = automatic node discovery via UDP multicast\npkg_nodefinder_homepage = https://github.com/erlanger/nodefinder\npkg_nodefinder_fetch = git\npkg_nodefinder_repo = https://github.com/okeuday/nodefinder\npkg_nodefinder_commit = master\n\nPACKAGES += nprocreg\npkg_nprocreg_name = nprocreg\npkg_nprocreg_description = Minimal Distributed Erlang Process Registry\npkg_nprocreg_homepage = http://nitrogenproject.com/\npkg_nprocreg_fetch = git\npkg_nprocreg_repo = https://github.com/nitrogen/nprocreg\npkg_nprocreg_commit = master\n\nPACKAGES += oauth\npkg_oauth_name = oauth\npkg_oauth_description = An Erlang OAuth 1.0 implementation\npkg_oauth_homepage = https://github.com/tim/erlang-oauth\npkg_oauth_fetch = git\npkg_oauth_repo = https://github.com/tim/erlang-oauth\npkg_oauth_commit = main\n\nPACKAGES += oauth2\npkg_oauth2_name = oauth2\npkg_oauth2_description = Erlang Oauth2 implementation\npkg_oauth2_homepage = https://github.com/kivra/oauth2\npkg_oauth2_fetch = git\npkg_oauth2_repo = https://github.com/kivra/oauth2\npkg_oauth2_commit = master\n\nPACKAGES += observer_cli\npkg_observer_cli_name = observer_cli\npkg_observer_cli_description = Visualize Erlang/Elixir Nodes On The Command Line\npkg_observer_cli_homepage = http://zhongwencool.github.io/observer_cli\npkg_observer_cli_fetch = git\npkg_observer_cli_repo = https://github.com/zhongwencool/observer_cli\npkg_observer_cli_commit = master\n\nPACKAGES += octopus\npkg_octopus_name = octopus\npkg_octopus_description = Small and flexible pool manager written in Erlang\npkg_octopus_homepage = https://github.com/erlangbureau/octopus\npkg_octopus_fetch = git\npkg_octopus_repo = https://github.com/erlangbureau/octopus\npkg_octopus_commit = master\n\nPACKAGES += openflow\npkg_openflow_name = openflow\npkg_openflow_description = An OpenFlow controller written in pure erlang\npkg_openflow_homepage = https://github.com/renatoaguiar/erlang-openflow\npkg_openflow_fetch = git\npkg_openflow_repo = https://github.com/renatoaguiar/erlang-openflow\npkg_openflow_commit = master\n\nPACKAGES += openid\npkg_openid_name = openid\npkg_openid_description = Erlang OpenID\npkg_openid_homepage = https://github.com/brendonh/erl_openid\npkg_openid_fetch = git\npkg_openid_repo = https://github.com/brendonh/erl_openid\npkg_openid_commit = master\n\nPACKAGES += openpoker\npkg_openpoker_name = openpoker\npkg_openpoker_description = Genesis Texas hold'em Game Server\npkg_openpoker_homepage = https://github.com/hpyhacking/openpoker\npkg_openpoker_fetch = git\npkg_openpoker_repo = https://github.com/hpyhacking/openpoker\npkg_openpoker_commit = master\n\nPACKAGES += otpbp\npkg_otpbp_name = otpbp\npkg_otpbp_description = Parse transformer for use new OTP functions in old Erlang/OTP releases (R15, R16, 17, 18, 19)\npkg_otpbp_homepage = https://github.com/Ledest/otpbp\npkg_otpbp_fetch = git\npkg_otpbp_repo = https://github.com/Ledest/otpbp\npkg_otpbp_commit = master\n\nPACKAGES += pal\npkg_pal_name = pal\npkg_pal_description = Pragmatic Authentication Library\npkg_pal_homepage = https://github.com/manifest/pal\npkg_pal_fetch = git\npkg_pal_repo = https://github.com/manifest/pal\npkg_pal_commit = master\n\nPACKAGES += parse_trans\npkg_parse_trans_name = parse_trans\npkg_parse_trans_description = Parse transform utilities for Erlang\npkg_parse_trans_homepage = https://github.com/uwiger/parse_trans\npkg_parse_trans_fetch = git\npkg_parse_trans_repo = https://github.com/uwiger/parse_trans\npkg_parse_trans_commit = master\n\nPACKAGES += parsexml\npkg_parsexml_name = parsexml\npkg_parsexml_description = Simple DOM XML parser with convenient and very simple API\npkg_parsexml_homepage = https://github.com/maxlapshin/parsexml\npkg_parsexml_fetch = git\npkg_parsexml_repo = https://github.com/maxlapshin/parsexml\npkg_parsexml_commit = master\n\nPACKAGES += partisan\npkg_partisan_name = partisan\npkg_partisan_description = High-performance, high-scalability distributed computing with Erlang and Elixir.\npkg_partisan_homepage = http://partisan.cloud\npkg_partisan_fetch = git\npkg_partisan_repo = https://github.com/lasp-lang/partisan\npkg_partisan_commit = master\n\nPACKAGES += pegjs\npkg_pegjs_name = pegjs\npkg_pegjs_description = An implementation of PEG.js grammar for Erlang.\npkg_pegjs_homepage = https://github.com/dmitriid/pegjs\npkg_pegjs_fetch = git\npkg_pegjs_repo = https://github.com/dmitriid/pegjs\npkg_pegjs_commit = master\n\nPACKAGES += percept2\npkg_percept2_name = percept2\npkg_percept2_description = Concurrent profiling tool for Erlang\npkg_percept2_homepage = https://github.com/huiqing/percept2\npkg_percept2_fetch = git\npkg_percept2_repo = https://github.com/huiqing/percept2\npkg_percept2_commit = master\n\nPACKAGES += pgo\npkg_pgo_name = pgo\npkg_pgo_description = Erlang Postgres client and connection pool\npkg_pgo_homepage = https://github.com/erleans/pgo.git\npkg_pgo_fetch = git\npkg_pgo_repo = https://github.com/erleans/pgo.git\npkg_pgo_commit = main\n\nPACKAGES += pgsql\npkg_pgsql_name = pgsql\npkg_pgsql_description = Erlang PostgreSQL driver\npkg_pgsql_homepage = https://github.com/semiocast/pgsql\npkg_pgsql_fetch = git\npkg_pgsql_repo = https://github.com/semiocast/pgsql\npkg_pgsql_commit = master\n\nPACKAGES += pkgx\npkg_pkgx_name = pkgx\npkg_pkgx_description = Build .deb packages from Erlang releases\npkg_pkgx_homepage = https://github.com/arjan/pkgx\npkg_pkgx_fetch = git\npkg_pkgx_repo = https://github.com/arjan/pkgx\npkg_pkgx_commit = master\n\nPACKAGES += pkt\npkg_pkt_name = pkt\npkg_pkt_description = Erlang network protocol library\npkg_pkt_homepage = https://github.com/msantos/pkt\npkg_pkt_fetch = git\npkg_pkt_repo = https://github.com/msantos/pkt\npkg_pkt_commit = master\n\nPACKAGES += plain_fsm\npkg_plain_fsm_name = plain_fsm\npkg_plain_fsm_description = A behaviour/support library for writing plain Erlang FSMs.\npkg_plain_fsm_homepage = https://github.com/uwiger/plain_fsm\npkg_plain_fsm_fetch = git\npkg_plain_fsm_repo = https://github.com/uwiger/plain_fsm\npkg_plain_fsm_commit = master\n\nPACKAGES += pmod_transform\npkg_pmod_transform_name = pmod_transform\npkg_pmod_transform_description = Parse transform for parameterized modules\npkg_pmod_transform_homepage = https://github.com/erlang/pmod_transform\npkg_pmod_transform_fetch = git\npkg_pmod_transform_repo = https://github.com/erlang/pmod_transform\npkg_pmod_transform_commit = master\n\nPACKAGES += pobox\npkg_pobox_name = pobox\npkg_pobox_description = External buffer processes to protect against mailbox overflow in Erlang\npkg_pobox_homepage = https://github.com/ferd/pobox\npkg_pobox_fetch = git\npkg_pobox_repo = https://github.com/ferd/pobox\npkg_pobox_commit = master\n\nPACKAGES += ponos\npkg_ponos_name = ponos\npkg_ponos_description = ponos is a simple yet powerful load generator written in erlang\npkg_ponos_homepage = https://github.com/klarna/ponos\npkg_ponos_fetch = git\npkg_ponos_repo = https://github.com/klarna/ponos\npkg_ponos_commit = master\n\nPACKAGES += poolboy\npkg_poolboy_name = poolboy\npkg_poolboy_description = A hunky Erlang worker pool factory\npkg_poolboy_homepage = https://github.com/devinus/poolboy\npkg_poolboy_fetch = git\npkg_poolboy_repo = https://github.com/devinus/poolboy\npkg_poolboy_commit = master\n\nPACKAGES += pooler\npkg_pooler_name = pooler\npkg_pooler_description = An OTP Process Pool Application\npkg_pooler_homepage = https://github.com/seth/pooler\npkg_pooler_fetch = git\npkg_pooler_repo = https://github.com/seth/pooler\npkg_pooler_commit = master\n\nPACKAGES += pqueue\npkg_pqueue_name = pqueue\npkg_pqueue_description = Erlang Priority Queues\npkg_pqueue_homepage = https://github.com/okeuday/pqueue\npkg_pqueue_fetch = git\npkg_pqueue_repo = https://github.com/okeuday/pqueue\npkg_pqueue_commit = master\n\nPACKAGES += procket\npkg_procket_name = procket\npkg_procket_description = Erlang interface to low level socket operations\npkg_procket_homepage = http://blog.listincomprehension.com/search/label/procket\npkg_procket_fetch = git\npkg_procket_repo = https://github.com/msantos/procket\npkg_procket_commit = master\n\nPACKAGES += prometheus\npkg_prometheus_name = prometheus\npkg_prometheus_description = Prometheus.io client in Erlang\npkg_prometheus_homepage = https://github.com/deadtrickster/prometheus.erl\npkg_prometheus_fetch = git\npkg_prometheus_repo = https://github.com/deadtrickster/prometheus.erl\npkg_prometheus_commit = master\n\nPACKAGES += prop\npkg_prop_name = prop\npkg_prop_description = An Erlang code scaffolding and generator system.\npkg_prop_homepage = https://github.com/nuex/prop\npkg_prop_fetch = git\npkg_prop_repo = https://github.com/nuex/prop\npkg_prop_commit = master\n\nPACKAGES += proper\npkg_proper_name = proper\npkg_proper_description = PropEr: a QuickCheck-inspired property-based testing tool for Erlang.\npkg_proper_homepage = http://proper.softlab.ntua.gr\npkg_proper_fetch = git\npkg_proper_repo = https://github.com/manopapad/proper\npkg_proper_commit = master\n\nPACKAGES += props\npkg_props_name = props\npkg_props_description = Property structure library\npkg_props_homepage = https://github.com/greyarea/props\npkg_props_fetch = git\npkg_props_repo = https://github.com/greyarea/props\npkg_props_commit = master\n\nPACKAGES += protobuffs\npkg_protobuffs_name = protobuffs\npkg_protobuffs_description = An implementation of Google's Protocol Buffers for Erlang, based on ngerakines/erlang_protobuffs.\npkg_protobuffs_homepage = https://github.com/basho/erlang_protobuffs\npkg_protobuffs_fetch = git\npkg_protobuffs_repo = https://github.com/basho/erlang_protobuffs\npkg_protobuffs_commit = master\n\nPACKAGES += psycho\npkg_psycho_name = psycho\npkg_psycho_description = HTTP server that provides a WSGI-like interface for applications and middleware.\npkg_psycho_homepage = https://github.com/gar1t/psycho\npkg_psycho_fetch = git\npkg_psycho_repo = https://github.com/gar1t/psycho\npkg_psycho_commit = master\n\nPACKAGES += purity\npkg_purity_name = purity\npkg_purity_description = A side-effect analyzer for Erlang\npkg_purity_homepage = https://github.com/mpitid/purity\npkg_purity_fetch = git\npkg_purity_repo = https://github.com/mpitid/purity\npkg_purity_commit = master\n\nPACKAGES += qdate\npkg_qdate_name = qdate\npkg_qdate_description = Date, time, and timezone parsing, formatting, and conversion for Erlang.\npkg_qdate_homepage = https://github.com/choptastic/qdate\npkg_qdate_fetch = git\npkg_qdate_repo = https://github.com/choptastic/qdate\npkg_qdate_commit = master\n\nPACKAGES += qrcode\npkg_qrcode_name = qrcode\npkg_qrcode_description = QR Code encoder in Erlang\npkg_qrcode_homepage = https://github.com/komone/qrcode\npkg_qrcode_fetch = git\npkg_qrcode_repo = https://github.com/komone/qrcode\npkg_qrcode_commit = master\n\nPACKAGES += quest\npkg_quest_name = quest\npkg_quest_description = Learn Erlang through this set of challenges. An interactive system for getting to know Erlang.\npkg_quest_homepage = https://github.com/eriksoe/ErlangQuest\npkg_quest_fetch = git\npkg_quest_repo = https://github.com/eriksoe/ErlangQuest\npkg_quest_commit = master\n\nPACKAGES += quickrand\npkg_quickrand_name = quickrand\npkg_quickrand_description = Quick Erlang Random Number Generation\npkg_quickrand_homepage = https://github.com/okeuday/quickrand\npkg_quickrand_fetch = git\npkg_quickrand_repo = https://github.com/okeuday/quickrand\npkg_quickrand_commit = master\n\nPACKAGES += rabbit_exchange_type_riak\npkg_rabbit_exchange_type_riak_name = rabbit_exchange_type_riak\npkg_rabbit_exchange_type_riak_description = Custom RabbitMQ exchange type for sticking messages in Riak\npkg_rabbit_exchange_type_riak_homepage = https://github.com/jbrisbin/riak-exchange\npkg_rabbit_exchange_type_riak_fetch = git\npkg_rabbit_exchange_type_riak_repo = https://github.com/jbrisbin/riak-exchange\npkg_rabbit_exchange_type_riak_commit = master\n\nPACKAGES += rack\npkg_rack_name = rack\npkg_rack_description = Rack handler for erlang\npkg_rack_homepage = https://github.com/erlyvideo/rack\npkg_rack_fetch = git\npkg_rack_repo = https://github.com/erlyvideo/rack\npkg_rack_commit = master\n\nPACKAGES += radierl\npkg_radierl_name = radierl\npkg_radierl_description = RADIUS protocol stack implemented in Erlang.\npkg_radierl_homepage = https://github.com/vances/radierl\npkg_radierl_fetch = git\npkg_radierl_repo = https://github.com/vances/radierl\npkg_radierl_commit = master\n\nPACKAGES += ranch\npkg_ranch_name = ranch\npkg_ranch_description = Socket acceptor pool for TCP protocols.\npkg_ranch_homepage = http://ninenines.eu\npkg_ranch_fetch = git\npkg_ranch_repo = https://github.com/ninenines/ranch\npkg_ranch_commit = 1.2.1\n\nPACKAGES += rbeacon\npkg_rbeacon_name = rbeacon\npkg_rbeacon_description = LAN discovery and presence in Erlang.\npkg_rbeacon_homepage = https://github.com/refuge/rbeacon\npkg_rbeacon_fetch = git\npkg_rbeacon_repo = https://github.com/refuge/rbeacon\npkg_rbeacon_commit = master\n\nPACKAGES += re2\npkg_re2_name = re2\npkg_re2_description = Erlang NIF bindings for RE2 regex library\npkg_re2_homepage = https://github.com/dukesoferl/re2\npkg_re2_fetch = git\npkg_re2_repo = https://github.com/dukesoferl/re2\npkg_re2_commit = master\n\nPACKAGES += rebus\npkg_rebus_name = rebus\npkg_rebus_description = A stupid simple, internal, pub/sub event bus written in- and for Erlang.\npkg_rebus_homepage = https://github.com/olle/rebus\npkg_rebus_fetch = git\npkg_rebus_repo = https://github.com/olle/rebus\npkg_rebus_commit = master\n\nPACKAGES += rec2json\npkg_rec2json_name = rec2json\npkg_rec2json_description = Compile erlang record definitions into modules to convert them to/from json easily.\npkg_rec2json_homepage = https://github.com/lordnull/rec2json\npkg_rec2json_fetch = git\npkg_rec2json_repo = https://github.com/lordnull/rec2json\npkg_rec2json_commit = master\n\nPACKAGES += recon\npkg_recon_name = recon\npkg_recon_description = Collection of functions and scripts to debug Erlang in production.\npkg_recon_homepage = https://github.com/ferd/recon\npkg_recon_fetch = git\npkg_recon_repo = https://github.com/ferd/recon\npkg_recon_commit = master\n\nPACKAGES += record_info\npkg_record_info_name = record_info\npkg_record_info_description = Convert between record and proplist\npkg_record_info_homepage = https://github.com/bipthelin/erlang-record_info\npkg_record_info_fetch = git\npkg_record_info_repo = https://github.com/bipthelin/erlang-record_info\npkg_record_info_commit = master\n\nPACKAGES += redgrid\npkg_redgrid_name = redgrid\npkg_redgrid_description = automatic Erlang node discovery via redis\npkg_redgrid_homepage = https://github.com/jkvor/redgrid\npkg_redgrid_fetch = git\npkg_redgrid_repo = https://github.com/jkvor/redgrid\npkg_redgrid_commit = master\n\nPACKAGES += redo\npkg_redo_name = redo\npkg_redo_description = pipelined erlang redis client\npkg_redo_homepage = https://github.com/jkvor/redo\npkg_redo_fetch = git\npkg_redo_repo = https://github.com/jkvor/redo\npkg_redo_commit = master\n\nPACKAGES += reload_mk\npkg_reload_mk_name = reload_mk\npkg_reload_mk_description = Live reload plugin for erlang.mk.\npkg_reload_mk_homepage = https://github.com/bullno1/reload.mk\npkg_reload_mk_fetch = git\npkg_reload_mk_repo = https://github.com/bullno1/reload.mk\npkg_reload_mk_commit = master\n\nPACKAGES += reltool_util\npkg_reltool_util_name = reltool_util\npkg_reltool_util_description = Erlang reltool utility functionality application\npkg_reltool_util_homepage = https://github.com/okeuday/reltool_util\npkg_reltool_util_fetch = git\npkg_reltool_util_repo = https://github.com/okeuday/reltool_util\npkg_reltool_util_commit = master\n\nPACKAGES += relx\npkg_relx_name = relx\npkg_relx_description = Sane, simple release creation for Erlang\npkg_relx_homepage = https://github.com/erlware/relx\npkg_relx_fetch = git\npkg_relx_repo = https://github.com/erlware/relx\npkg_relx_commit = main\n\nPACKAGES += resource_discovery\npkg_resource_discovery_name = resource_discovery\npkg_resource_discovery_description = An application used to dynamically discover resources present in an Erlang node cluster.\npkg_resource_discovery_homepage = http://erlware.org/\npkg_resource_discovery_fetch = git\npkg_resource_discovery_repo = https://github.com/erlware/resource_discovery\npkg_resource_discovery_commit = master\n\nPACKAGES += restc\npkg_restc_name = restc\npkg_restc_description = Erlang Rest Client\npkg_restc_homepage = https://github.com/kivra/restclient\npkg_restc_fetch = git\npkg_restc_repo = https://github.com/kivra/restclient\npkg_restc_commit = master\n\nPACKAGES += rfc4627_jsonrpc\npkg_rfc4627_jsonrpc_name = rfc4627_jsonrpc\npkg_rfc4627_jsonrpc_description = Erlang RFC4627 (JSON) codec and JSON-RPC server implementation.\npkg_rfc4627_jsonrpc_homepage = https://github.com/tonyg/erlang-rfc4627\npkg_rfc4627_jsonrpc_fetch = git\npkg_rfc4627_jsonrpc_repo = https://github.com/tonyg/erlang-rfc4627\npkg_rfc4627_jsonrpc_commit = master\n\nPACKAGES += riak_core\npkg_riak_core_name = riak_core\npkg_riak_core_description = Distributed systems infrastructure used by Riak.\npkg_riak_core_homepage = https://github.com/basho/riak_core\npkg_riak_core_fetch = git\npkg_riak_core_repo = https://github.com/basho/riak_core\npkg_riak_core_commit = develop\n\nPACKAGES += riak_dt\npkg_riak_dt_name = riak_dt\npkg_riak_dt_description = Convergent replicated datatypes in Erlang\npkg_riak_dt_homepage = https://github.com/basho/riak_dt\npkg_riak_dt_fetch = git\npkg_riak_dt_repo = https://github.com/basho/riak_dt\npkg_riak_dt_commit = master\n\nPACKAGES += riak_ensemble\npkg_riak_ensemble_name = riak_ensemble\npkg_riak_ensemble_description = Multi-Paxos framework in Erlang\npkg_riak_ensemble_homepage = https://github.com/basho/riak_ensemble\npkg_riak_ensemble_fetch = git\npkg_riak_ensemble_repo = https://github.com/basho/riak_ensemble\npkg_riak_ensemble_commit = develop\n\nPACKAGES += riak_kv\npkg_riak_kv_name = riak_kv\npkg_riak_kv_description = Riak Key/Value Store\npkg_riak_kv_homepage = https://github.com/basho/riak_kv\npkg_riak_kv_fetch = git\npkg_riak_kv_repo = https://github.com/basho/riak_kv\npkg_riak_kv_commit = develop\n\nPACKAGES += riak_pipe\npkg_riak_pipe_name = riak_pipe\npkg_riak_pipe_description = Riak Pipelines\npkg_riak_pipe_homepage = https://github.com/basho/riak_pipe\npkg_riak_pipe_fetch = git\npkg_riak_pipe_repo = https://github.com/basho/riak_pipe\npkg_riak_pipe_commit = develop\n\nPACKAGES += riak_sysmon\npkg_riak_sysmon_name = riak_sysmon\npkg_riak_sysmon_description = Simple OTP app for managing Erlang VM system_monitor event messages\npkg_riak_sysmon_homepage = https://github.com/basho/riak_sysmon\npkg_riak_sysmon_fetch = git\npkg_riak_sysmon_repo = https://github.com/basho/riak_sysmon\npkg_riak_sysmon_commit = master\n\nPACKAGES += riakc\npkg_riakc_name = riakc\npkg_riakc_description = Erlang clients for Riak.\npkg_riakc_homepage = https://github.com/basho/riak-erlang-client\npkg_riakc_fetch = git\npkg_riakc_repo = https://github.com/basho/riak-erlang-client\npkg_riakc_commit = master\n\nPACKAGES += rlimit\npkg_rlimit_name = rlimit\npkg_rlimit_description = Magnus Klaar's rate limiter code from etorrent\npkg_rlimit_homepage = https://github.com/jlouis/rlimit\npkg_rlimit_fetch = git\npkg_rlimit_repo = https://github.com/jlouis/rlimit\npkg_rlimit_commit = master\n\nPACKAGES += rust_mk\npkg_rust_mk_name = rust_mk\npkg_rust_mk_description = Build Rust crates in an Erlang application\npkg_rust_mk_homepage = https://github.com/goertzenator/rust.mk\npkg_rust_mk_fetch = git\npkg_rust_mk_repo = https://github.com/goertzenator/rust.mk\npkg_rust_mk_commit = master\n\nPACKAGES += safetyvalve\npkg_safetyvalve_name = safetyvalve\npkg_safetyvalve_description = A safety valve for your erlang node\npkg_safetyvalve_homepage = https://github.com/jlouis/safetyvalve\npkg_safetyvalve_fetch = git\npkg_safetyvalve_repo = https://github.com/jlouis/safetyvalve\npkg_safetyvalve_commit = master\n\nPACKAGES += seestar\npkg_seestar_name = seestar\npkg_seestar_description = The Erlang client for Cassandra 1.2+ binary protocol\npkg_seestar_homepage = https://github.com/iamaleksey/seestar\npkg_seestar_fetch = git\npkg_seestar_repo = https://github.com/iamaleksey/seestar\npkg_seestar_commit = master\n\nPACKAGES += setup\npkg_setup_name = setup\npkg_setup_description = Generic setup utility for Erlang-based systems\npkg_setup_homepage = https://github.com/uwiger/setup\npkg_setup_fetch = git\npkg_setup_repo = https://github.com/uwiger/setup\npkg_setup_commit = master\n\nPACKAGES += sext\npkg_sext_name = sext\npkg_sext_description = Sortable Erlang Term Serialization\npkg_sext_homepage = https://github.com/uwiger/sext\npkg_sext_fetch = git\npkg_sext_repo = https://github.com/uwiger/sext\npkg_sext_commit = master\n\nPACKAGES += sfmt\npkg_sfmt_name = sfmt\npkg_sfmt_description = SFMT pseudo random number generator for Erlang.\npkg_sfmt_homepage = https://github.com/jj1bdx/sfmt-erlang\npkg_sfmt_fetch = git\npkg_sfmt_repo = https://github.com/jj1bdx/sfmt-erlang\npkg_sfmt_commit = master\n\nPACKAGES += sgte\npkg_sgte_name = sgte\npkg_sgte_description = A simple Erlang Template Engine\npkg_sgte_homepage = https://github.com/filippo/sgte\npkg_sgte_fetch = git\npkg_sgte_repo = https://github.com/filippo/sgte\npkg_sgte_commit = master\n\nPACKAGES += sheriff\npkg_sheriff_name = sheriff\npkg_sheriff_description = Parse transform for type based validation.\npkg_sheriff_homepage = http://ninenines.eu\npkg_sheriff_fetch = git\npkg_sheriff_repo = https://github.com/extend/sheriff\npkg_sheriff_commit = master\n\nPACKAGES += shotgun\npkg_shotgun_name = shotgun\npkg_shotgun_description = better than just a gun\npkg_shotgun_homepage = https://github.com/inaka/shotgun\npkg_shotgun_fetch = git\npkg_shotgun_repo = https://github.com/inaka/shotgun\npkg_shotgun_commit = master\n\nPACKAGES += sidejob\npkg_sidejob_name = sidejob\npkg_sidejob_description = Parallel worker and capacity limiting library for Erlang\npkg_sidejob_homepage = https://github.com/basho/sidejob\npkg_sidejob_fetch = git\npkg_sidejob_repo = https://github.com/basho/sidejob\npkg_sidejob_commit = develop\n\nPACKAGES += sieve\npkg_sieve_name = sieve\npkg_sieve_description = sieve is a simple TCP routing proxy (layer 7) in erlang\npkg_sieve_homepage = https://github.com/benoitc/sieve\npkg_sieve_fetch = git\npkg_sieve_repo = https://github.com/benoitc/sieve\npkg_sieve_commit = master\n\nPACKAGES += simhash\npkg_simhash_name = simhash\npkg_simhash_description = Simhashing for Erlang -- hashing algorithm to find near-duplicates in binary data.\npkg_simhash_homepage = https://github.com/ferd/simhash\npkg_simhash_fetch = git\npkg_simhash_repo = https://github.com/ferd/simhash\npkg_simhash_commit = master\n\nPACKAGES += simple_bridge\npkg_simple_bridge_name = simple_bridge\npkg_simple_bridge_description = A simple, standardized interface library to Erlang HTTP Servers.\npkg_simple_bridge_homepage = https://github.com/nitrogen/simple_bridge\npkg_simple_bridge_fetch = git\npkg_simple_bridge_repo = https://github.com/nitrogen/simple_bridge\npkg_simple_bridge_commit = master\n\nPACKAGES += simple_oauth2\npkg_simple_oauth2_name = simple_oauth2\npkg_simple_oauth2_description = Simple erlang OAuth2 client module for any http server framework (Google, Facebook, Yandex, Vkontakte are preconfigured)\npkg_simple_oauth2_homepage = https://github.com/virtan/simple_oauth2\npkg_simple_oauth2_fetch = git\npkg_simple_oauth2_repo = https://github.com/virtan/simple_oauth2\npkg_simple_oauth2_commit = master\n\nPACKAGES += skel\npkg_skel_name = skel\npkg_skel_description = A Streaming Process-based Skeleton Library for Erlang\npkg_skel_homepage = https://github.com/ParaPhrase/skel\npkg_skel_fetch = git\npkg_skel_repo = https://github.com/ParaPhrase/skel\npkg_skel_commit = master\n\nPACKAGES += slack\npkg_slack_name = slack\npkg_slack_description = Minimal slack notification OTP library.\npkg_slack_homepage = https://github.com/DonBranson/slack\npkg_slack_fetch = git\npkg_slack_repo = https://github.com/DonBranson/slack.git\npkg_slack_commit = master\n\nPACKAGES += snappyer\npkg_snappyer_name = snappyer\npkg_snappyer_description = Snappy as nif for Erlang\npkg_snappyer_homepage = https://github.com/zmstone/snappyer\npkg_snappyer_fetch = git\npkg_snappyer_repo = https://github.com/zmstone/snappyer.git\npkg_snappyer_commit = master\n\nPACKAGES += social\npkg_social_name = social\npkg_social_description = Cowboy handler for social login via OAuth2 providers\npkg_social_homepage = https://github.com/dvv/social\npkg_social_fetch = git\npkg_social_repo = https://github.com/dvv/social\npkg_social_commit = master\n\nPACKAGES += sqerl\npkg_sqerl_name = sqerl\npkg_sqerl_description = An Erlang-flavoured SQL DSL\npkg_sqerl_homepage = https://github.com/hairyhum/sqerl\npkg_sqerl_fetch = git\npkg_sqerl_repo = https://github.com/hairyhum/sqerl\npkg_sqerl_commit = master\n\nPACKAGES += srly\npkg_srly_name = srly\npkg_srly_description = Native Erlang Unix serial interface\npkg_srly_homepage = https://github.com/msantos/srly\npkg_srly_fetch = git\npkg_srly_repo = https://github.com/msantos/srly\npkg_srly_commit = master\n\nPACKAGES += sshrpc\npkg_sshrpc_name = sshrpc\npkg_sshrpc_description = Erlang SSH RPC module (experimental)\npkg_sshrpc_homepage = https://github.com/jj1bdx/sshrpc\npkg_sshrpc_fetch = git\npkg_sshrpc_repo = https://github.com/jj1bdx/sshrpc\npkg_sshrpc_commit = master\n\nPACKAGES += stable\npkg_stable_name = stable\npkg_stable_description = Library of assorted helpers for Cowboy web server.\npkg_stable_homepage = https://github.com/dvv/stable\npkg_stable_fetch = git\npkg_stable_repo = https://github.com/dvv/stable\npkg_stable_commit = master\n\nPACKAGES += statebox\npkg_statebox_name = statebox\npkg_statebox_description = Erlang state monad with merge/conflict-resolution capabilities. Useful for Riak.\npkg_statebox_homepage = https://github.com/mochi/statebox\npkg_statebox_fetch = git\npkg_statebox_repo = https://github.com/mochi/statebox\npkg_statebox_commit = master\n\nPACKAGES += statman\npkg_statman_name = statman\npkg_statman_description = Efficiently collect massive volumes of metrics inside the Erlang VM\npkg_statman_homepage = https://github.com/knutin/statman\npkg_statman_fetch = git\npkg_statman_repo = https://github.com/knutin/statman\npkg_statman_commit = master\n\nPACKAGES += statsderl\npkg_statsderl_name = statsderl\npkg_statsderl_description = StatsD client (erlang)\npkg_statsderl_homepage = https://github.com/lpgauth/statsderl\npkg_statsderl_fetch = git\npkg_statsderl_repo = https://github.com/lpgauth/statsderl\npkg_statsderl_commit = master\n\nPACKAGES += stdinout_pool\npkg_stdinout_pool_name = stdinout_pool\npkg_stdinout_pool_description = stdinout_pool    : stuff goes in, stuff goes out. there's never any miscommunication.\npkg_stdinout_pool_homepage = https://github.com/mattsta/erlang-stdinout-pool\npkg_stdinout_pool_fetch = git\npkg_stdinout_pool_repo = https://github.com/mattsta/erlang-stdinout-pool\npkg_stdinout_pool_commit = master\n\nPACKAGES += stockdb\npkg_stockdb_name = stockdb\npkg_stockdb_description = Database for storing Stock Exchange quotes in erlang\npkg_stockdb_homepage = https://github.com/maxlapshin/stockdb\npkg_stockdb_fetch = git\npkg_stockdb_repo = https://github.com/maxlapshin/stockdb\npkg_stockdb_commit = master\n\nPACKAGES += subproc\npkg_subproc_name = subproc\npkg_subproc_description = unix subprocess manager with {active,once|false} modes\npkg_subproc_homepage = http://dozzie.jarowit.net/trac/wiki/subproc\npkg_subproc_fetch = git\npkg_subproc_repo = https://github.com/dozzie/subproc\npkg_subproc_commit = v0.1.0\n\nPACKAGES += supervisor3\npkg_supervisor3_name = supervisor3\npkg_supervisor3_description = OTP supervisor with additional strategies\npkg_supervisor3_homepage = https://github.com/klarna/supervisor3\npkg_supervisor3_fetch = git\npkg_supervisor3_repo = https://github.com/klarna/supervisor3.git\npkg_supervisor3_commit = master\n\nPACKAGES += swab\npkg_swab_name = swab\npkg_swab_description = General purpose buffer handling module\npkg_swab_homepage = https://github.com/crownedgrouse/swab\npkg_swab_fetch = git\npkg_swab_repo = https://github.com/crownedgrouse/swab\npkg_swab_commit = master\n\nPACKAGES += swarm\npkg_swarm_name = swarm\npkg_swarm_description = Fast and simple acceptor pool for Erlang\npkg_swarm_homepage = https://github.com/jeremey/swarm\npkg_swarm_fetch = git\npkg_swarm_repo = https://github.com/jeremey/swarm\npkg_swarm_commit = master\n\nPACKAGES += switchboard\npkg_switchboard_name = switchboard\npkg_switchboard_description = A framework for processing email using worker plugins.\npkg_switchboard_homepage = https://github.com/thusfresh/switchboard\npkg_switchboard_fetch = git\npkg_switchboard_repo = https://github.com/thusfresh/switchboard\npkg_switchboard_commit = master\n\nPACKAGES += syn\npkg_syn_name = syn\npkg_syn_description = A global Process Registry and Process Group manager for Erlang.\npkg_syn_homepage = https://github.com/ostinelli/syn\npkg_syn_fetch = git\npkg_syn_repo = https://github.com/ostinelli/syn\npkg_syn_commit = master\n\nPACKAGES += sync\npkg_sync_name = sync\npkg_sync_description = On-the-fly recompiling and reloading in Erlang.\npkg_sync_homepage = https://github.com/rustyio/sync\npkg_sync_fetch = git\npkg_sync_repo = https://github.com/rustyio/sync\npkg_sync_commit = master\n\nPACKAGES += syntaxerl\npkg_syntaxerl_name = syntaxerl\npkg_syntaxerl_description = Syntax checker for Erlang\npkg_syntaxerl_homepage = https://github.com/ten0s/syntaxerl\npkg_syntaxerl_fetch = git\npkg_syntaxerl_repo = https://github.com/ten0s/syntaxerl\npkg_syntaxerl_commit = master\n\nPACKAGES += syslog\npkg_syslog_name = syslog\npkg_syslog_description = Erlang port driver for interacting with syslog via syslog(3)\npkg_syslog_homepage = https://github.com/Vagabond/erlang-syslog\npkg_syslog_fetch = git\npkg_syslog_repo = https://github.com/Vagabond/erlang-syslog\npkg_syslog_commit = master\n\nPACKAGES += taskforce\npkg_taskforce_name = taskforce\npkg_taskforce_description = Erlang worker pools for controlled parallelisation of arbitrary tasks.\npkg_taskforce_homepage = https://github.com/g-andrade/taskforce\npkg_taskforce_fetch = git\npkg_taskforce_repo = https://github.com/g-andrade/taskforce\npkg_taskforce_commit = master\n\nPACKAGES += tddreloader\npkg_tddreloader_name = tddreloader\npkg_tddreloader_description = Shell utility for recompiling, reloading, and testing code as it changes\npkg_tddreloader_homepage = https://github.com/version2beta/tddreloader\npkg_tddreloader_fetch = git\npkg_tddreloader_repo = https://github.com/version2beta/tddreloader\npkg_tddreloader_commit = master\n\nPACKAGES += tempo\npkg_tempo_name = tempo\npkg_tempo_description = NIF-based date and time parsing and formatting for Erlang.\npkg_tempo_homepage = https://github.com/selectel/tempo\npkg_tempo_fetch = git\npkg_tempo_repo = https://github.com/selectel/tempo\npkg_tempo_commit = master\n\nPACKAGES += tinymq\npkg_tinymq_name = tinymq\npkg_tinymq_description = TinyMQ - a diminutive, in-memory message queue\npkg_tinymq_homepage = https://github.com/ChicagoBoss/tinymq\npkg_tinymq_fetch = git\npkg_tinymq_repo = https://github.com/ChicagoBoss/tinymq\npkg_tinymq_commit = master\n\nPACKAGES += tinymt\npkg_tinymt_name = tinymt\npkg_tinymt_description = TinyMT pseudo random number generator for Erlang.\npkg_tinymt_homepage = https://github.com/jj1bdx/tinymt-erlang\npkg_tinymt_fetch = git\npkg_tinymt_repo = https://github.com/jj1bdx/tinymt-erlang\npkg_tinymt_commit = master\n\nPACKAGES += tirerl\npkg_tirerl_name = tirerl\npkg_tirerl_description = Erlang interface to Elastic Search\npkg_tirerl_homepage = https://github.com/inaka/tirerl\npkg_tirerl_fetch = git\npkg_tirerl_repo = https://github.com/inaka/tirerl\npkg_tirerl_commit = master\n\nPACKAGES += toml\npkg_toml_name = toml\npkg_toml_description = TOML (0.4.0) config parser\npkg_toml_homepage = http://dozzie.jarowit.net/trac/wiki/TOML\npkg_toml_fetch = git\npkg_toml_repo = https://github.com/dozzie/toml\npkg_toml_commit = v0.2.0\n\nPACKAGES += traffic_tools\npkg_traffic_tools_name = traffic_tools\npkg_traffic_tools_description = Simple traffic limiting library\npkg_traffic_tools_homepage = https://github.com/systra/traffic_tools\npkg_traffic_tools_fetch = git\npkg_traffic_tools_repo = https://github.com/systra/traffic_tools\npkg_traffic_tools_commit = master\n\nPACKAGES += trails\npkg_trails_name = trails\npkg_trails_description = A couple of improvements over Cowboy Routes\npkg_trails_homepage = http://inaka.github.io/cowboy-trails/\npkg_trails_fetch = git\npkg_trails_repo = https://github.com/inaka/cowboy-trails\npkg_trails_commit = master\n\nPACKAGES += trane\npkg_trane_name = trane\npkg_trane_description = SAX style broken HTML parser in Erlang\npkg_trane_homepage = https://github.com/massemanet/trane\npkg_trane_fetch = git\npkg_trane_repo = https://github.com/massemanet/trane\npkg_trane_commit = master\n\nPACKAGES += trie\npkg_trie_name = trie\npkg_trie_description = Erlang Trie Implementation\npkg_trie_homepage = https://github.com/okeuday/trie\npkg_trie_fetch = git\npkg_trie_repo = https://github.com/okeuday/trie\npkg_trie_commit = master\n\nPACKAGES += triq\npkg_triq_name = triq\npkg_triq_description = Trifork QuickCheck\npkg_triq_homepage = https://triq.gitlab.io\npkg_triq_fetch = git\npkg_triq_repo = https://gitlab.com/triq/triq.git\npkg_triq_commit = master\n\nPACKAGES += tunctl\npkg_tunctl_name = tunctl\npkg_tunctl_description = Erlang TUN/TAP interface\npkg_tunctl_homepage = https://github.com/msantos/tunctl\npkg_tunctl_fetch = git\npkg_tunctl_repo = https://github.com/msantos/tunctl\npkg_tunctl_commit = master\n\nPACKAGES += unicorn\npkg_unicorn_name = unicorn\npkg_unicorn_description = Generic configuration server\npkg_unicorn_homepage = https://github.com/shizzard/unicorn\npkg_unicorn_fetch = git\npkg_unicorn_repo = https://github.com/shizzard/unicorn\npkg_unicorn_commit = master\n\nPACKAGES += unsplit\npkg_unsplit_name = unsplit\npkg_unsplit_description = Resolves conflicts in Mnesia after network splits\npkg_unsplit_homepage = https://github.com/uwiger/unsplit\npkg_unsplit_fetch = git\npkg_unsplit_repo = https://github.com/uwiger/unsplit\npkg_unsplit_commit = master\n\nPACKAGES += uuid\npkg_uuid_name = uuid\npkg_uuid_description = Erlang UUID Implementation\npkg_uuid_homepage = https://github.com/okeuday/uuid\npkg_uuid_fetch = git\npkg_uuid_repo = https://github.com/okeuday/uuid\npkg_uuid_commit = master\n\nPACKAGES += ux\npkg_ux_name = ux\npkg_ux_description = Unicode eXtention for Erlang (Strings, Collation)\npkg_ux_homepage = https://github.com/erlang-unicode/ux\npkg_ux_fetch = git\npkg_ux_repo = https://github.com/erlang-unicode/ux\npkg_ux_commit = master\n\nPACKAGES += verx\npkg_verx_name = verx\npkg_verx_description = Erlang implementation of the libvirtd remote protocol\npkg_verx_homepage = https://github.com/msantos/verx\npkg_verx_fetch = git\npkg_verx_repo = https://github.com/msantos/verx\npkg_verx_commit = master\n\nPACKAGES += vmq_bridge\npkg_vmq_bridge_name = vmq_bridge\npkg_vmq_bridge_description = Component of VerneMQ: A distributed MQTT message broker\npkg_vmq_bridge_homepage = https://verne.mq/\npkg_vmq_bridge_fetch = git\npkg_vmq_bridge_repo = https://github.com/erlio/vmq_bridge\npkg_vmq_bridge_commit = master\n\nPACKAGES += vmstats\npkg_vmstats_name = vmstats\npkg_vmstats_description = tiny Erlang app that works in conjunction with statsderl in order to generate information on the Erlang VM for graphite logs.\npkg_vmstats_homepage = https://github.com/ferd/vmstats\npkg_vmstats_fetch = git\npkg_vmstats_repo = https://github.com/ferd/vmstats\npkg_vmstats_commit = master\n\nPACKAGES += walrus\npkg_walrus_name = walrus\npkg_walrus_description = Walrus - Mustache-like Templating\npkg_walrus_homepage = https://github.com/devinus/walrus\npkg_walrus_fetch = git\npkg_walrus_repo = https://github.com/devinus/walrus\npkg_walrus_commit = master\n\nPACKAGES += webmachine\npkg_webmachine_name = webmachine\npkg_webmachine_description = A REST-based system for building web applications.\npkg_webmachine_homepage = https://github.com/basho/webmachine\npkg_webmachine_fetch = git\npkg_webmachine_repo = https://github.com/basho/webmachine\npkg_webmachine_commit = master\n\nPACKAGES += websocket_client\npkg_websocket_client_name = websocket_client\npkg_websocket_client_description = Erlang websocket client (ws and wss supported)\npkg_websocket_client_homepage = https://github.com/jeremyong/websocket_client\npkg_websocket_client_fetch = git\npkg_websocket_client_repo = https://github.com/jeremyong/websocket_client\npkg_websocket_client_commit = master\n\nPACKAGES += worker_pool\npkg_worker_pool_name = worker_pool\npkg_worker_pool_description = a simple erlang worker pool\npkg_worker_pool_homepage = https://github.com/inaka/worker_pool\npkg_worker_pool_fetch = git\npkg_worker_pool_repo = https://github.com/inaka/worker_pool\npkg_worker_pool_commit = main\n\nPACKAGES += wrangler\npkg_wrangler_name = wrangler\npkg_wrangler_description = Import of the Wrangler svn repository.\npkg_wrangler_homepage = http://www.cs.kent.ac.uk/projects/wrangler/Home.html\npkg_wrangler_fetch = git\npkg_wrangler_repo = https://github.com/RefactoringTools/wrangler\npkg_wrangler_commit = master\n\nPACKAGES += wsock\npkg_wsock_name = wsock\npkg_wsock_description = Erlang library to build WebSocket clients and servers\npkg_wsock_homepage = https://github.com/madtrick/wsock\npkg_wsock_fetch = git\npkg_wsock_repo = https://github.com/madtrick/wsock\npkg_wsock_commit = master\n\nPACKAGES += xhttpc\npkg_xhttpc_name = xhttpc\npkg_xhttpc_description = Extensible HTTP Client for Erlang\npkg_xhttpc_homepage = https://github.com/seriyps/xhttpc\npkg_xhttpc_fetch = git\npkg_xhttpc_repo = https://github.com/seriyps/xhttpc\npkg_xhttpc_commit = master\n\nPACKAGES += xref_runner\npkg_xref_runner_name = xref_runner\npkg_xref_runner_description = Erlang Xref Runner (inspired in rebar xref)\npkg_xref_runner_homepage = https://github.com/inaka/xref_runner\npkg_xref_runner_fetch = git\npkg_xref_runner_repo = https://github.com/inaka/xref_runner\npkg_xref_runner_commit = master\n\nPACKAGES += yamerl\npkg_yamerl_name = yamerl\npkg_yamerl_description = YAML 1.2 parser in pure Erlang\npkg_yamerl_homepage = https://github.com/yakaz/yamerl\npkg_yamerl_fetch = git\npkg_yamerl_repo = https://github.com/yakaz/yamerl\npkg_yamerl_commit = master\n\nPACKAGES += yamler\npkg_yamler_name = yamler\npkg_yamler_description = libyaml-based yaml loader for Erlang\npkg_yamler_homepage = https://github.com/goertzenator/yamler\npkg_yamler_fetch = git\npkg_yamler_repo = https://github.com/goertzenator/yamler\npkg_yamler_commit = master\n\nPACKAGES += yaws\npkg_yaws_name = yaws\npkg_yaws_description = Yaws webserver\npkg_yaws_homepage = http://yaws.hyber.org\npkg_yaws_fetch = git\npkg_yaws_repo = https://github.com/klacke/yaws\npkg_yaws_commit = master\n\nPACKAGES += zippers\npkg_zippers_name = zippers\npkg_zippers_description = A library for functional zipper data structures in Erlang. Read more on zippers\npkg_zippers_homepage = https://github.com/ferd/zippers\npkg_zippers_fetch = git\npkg_zippers_repo = https://github.com/ferd/zippers\npkg_zippers_commit = master\n\nPACKAGES += zlists\npkg_zlists_name = zlists\npkg_zlists_description = Erlang lazy lists library.\npkg_zlists_homepage = https://github.com/vjache/erlang-zlists\npkg_zlists_fetch = git\npkg_zlists_repo = https://github.com/vjache/erlang-zlists\npkg_zlists_commit = master\n\nPACKAGES += zucchini\npkg_zucchini_name = zucchini\npkg_zucchini_description = An Erlang INI parser\npkg_zucchini_homepage = https://github.com/devinus/zucchini\npkg_zucchini_fetch = git\npkg_zucchini_repo = https://github.com/devinus/zucchini\npkg_zucchini_commit = master\n\n# Copyright (c) 2015-2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: search\n\ndefine pkg_print\n\t$(verbose) printf \"%s\\n\" \\\n\t\t$(if $(call core_eq,$(1),$(pkg_$(1)_name)),,\"Pkg name:    $(1)\") \\\n\t\t\"App name:    $(pkg_$(1)_name)\" \\\n\t\t\"Description: $(pkg_$(1)_description)\" \\\n\t\t\"Home page:   $(pkg_$(1)_homepage)\" \\\n\t\t\"Fetch with:  $(pkg_$(1)_fetch)\" \\\n\t\t\"Repository:  $(pkg_$(1)_repo)\" \\\n\t\t\"Commit:      $(pkg_$(1)_commit)\" \\\n\t\t\"\"\n\nendef\n\nsearch:\nifdef q\n\t$(foreach p,$(PACKAGES), \\\n\t\t$(if $(findstring $(call core_lc,$(q)),$(call core_lc,$(pkg_$(p)_name) $(pkg_$(p)_description))), \\\n\t\t\t$(call pkg_print,$(p))))\nelse\n\t$(foreach p,$(PACKAGES),$(call pkg_print,$(p)))\nendif\n\n# Copyright (c) 2013-2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: distclean-deps clean-tmp-deps.log\n\n# Configuration.\n\nifdef OTP_DEPS\n$(warning The variable OTP_DEPS is deprecated in favor of LOCAL_DEPS.)\nendif\n\nIGNORE_DEPS ?=\nexport IGNORE_DEPS\n\nAPPS_DIR ?= $(CURDIR)/apps\nexport APPS_DIR\n\nDEPS_DIR ?= $(CURDIR)/deps\nexport DEPS_DIR\n\nREBAR_DEPS_DIR = $(DEPS_DIR)\nexport REBAR_DEPS_DIR\n\n# When testing Erlang.mk and updating these, make sure\n# to delete test/test_rebar_git before running tests again.\nREBAR3_GIT ?= https://github.com/erlang/rebar3\nREBAR3_COMMIT ?= bde4b54248d16280b2c70a244aca3bb7566e2033 # 3.23.0\n\nCACHE_DEPS ?= 0\n\nCACHE_DIR ?= $(if $(XDG_CACHE_HOME),$(XDG_CACHE_HOME),$(HOME)/.cache)/erlang.mk\nexport CACHE_DIR\n\n# External \"early\" plugins (see core/plugins.mk for regular plugins).\n# They both use the core_dep_plugin macro.\n\ndefine core_dep_plugin\nifeq ($(2),$(PROJECT))\n-include $$(patsubst $(PROJECT)/%,%,$(1))\nelse\n-include $(DEPS_DIR)/$(1)\n\n$(DEPS_DIR)/$(1): $(DEPS_DIR)/$(2) ;\nendif\nendef\n\nDEP_EARLY_PLUGINS ?=\n\n$(foreach p,$(DEP_EARLY_PLUGINS),\\\n\t$(eval $(if $(findstring /,$p),\\\n\t\t$(call core_dep_plugin,$p,$(firstword $(subst /, ,$p))),\\\n\t\t$(call core_dep_plugin,$p/early-plugins.mk,$p))))\n\n# Query functions.\n\nquery_fetch_method = $(if $(dep_$(1)),$(call _qfm_dep,$(word 1,$(dep_$(1)))),$(call _qfm_pkg,$(1)))\n_qfm_dep = $(if $(dep_fetch_$(1)),$(1),$(if $(IS_DEP),legacy,fail))\n_qfm_pkg = $(if $(pkg_$(1)_fetch),$(pkg_$(1)_fetch),fail)\n\nquery_name = $(if $(dep_$(1)),$(1),$(if $(pkg_$(1)_name),$(pkg_$(1)_name),$(1)))\n\nquery_repo = $(call _qr,$(1),$(call query_fetch_method,$(1)))\n_qr = $(if $(query_repo_$(2)),$(call query_repo_$(2),$(1)),$(call dep_repo,$(1)))\n\nquery_repo_default = $(if $(dep_$(1)),$(word 2,$(dep_$(1))),$(pkg_$(1)_repo))\nquery_repo_git = $(patsubst git://github.com/%,https://github.com/%,$(call query_repo_default,$(1)))\nquery_repo_git-subfolder = $(call query_repo_git,$(1))\nquery_repo_git-submodule = -\nquery_repo_hg = $(call query_repo_default,$(1))\nquery_repo_svn = $(call query_repo_default,$(1))\nquery_repo_cp = $(call query_repo_default,$(1))\nquery_repo_ln = $(call query_repo_default,$(1))\nquery_repo_hex = https://hex.pm/packages/$(if $(word 3,$(dep_$(1))),$(word 3,$(dep_$(1))),$(1))\nquery_repo_fail = -\nquery_repo_legacy = -\n\nquery_version = $(call _qv,$(1),$(call query_fetch_method,$(1)))\n_qv = $(if $(query_version_$(2)),$(call query_version_$(2),$(1)),$(call dep_commit,$(1)))\n\nquery_version_default = $(if $(dep_$(1)_commit),$(dep_$(1)_commit),$(if $(dep_$(1)),$(word 3,$(dep_$(1))),$(pkg_$(1)_commit)))\nquery_version_git = $(call query_version_default,$(1))\nquery_version_git-subfolder = $(call query_version_git,$(1))\nquery_version_git-submodule = -\nquery_version_hg = $(call query_version_default,$(1))\nquery_version_svn = -\nquery_version_cp = -\nquery_version_ln = -\nquery_version_hex = $(if $(dep_$(1)_commit),$(dep_$(1)_commit),$(if $(dep_$(1)),$(word 2,$(dep_$(1))),$(pkg_$(1)_commit)))\nquery_version_fail = -\nquery_version_legacy = -\n\nquery_extra = $(call _qe,$(1),$(call query_fetch_method,$(1)))\n_qe = $(if $(query_extra_$(2)),$(call query_extra_$(2),$(1)),-)\n\nquery_extra_git = -\nquery_extra_git-subfolder = $(if $(dep_$(1)),subfolder=$(word 4,$(dep_$(1))),-)\nquery_extra_git-submodule = -\nquery_extra_hg = -\nquery_extra_svn = -\nquery_extra_cp = -\nquery_extra_ln = -\nquery_extra_hex = $(if $(dep_$(1)),package-name=$(word 3,$(dep_$(1))),-)\nquery_extra_fail = -\nquery_extra_legacy = -\n\nquery_absolute_path = $(addprefix $(DEPS_DIR)/,$(call query_name,$(1)))\n\n# Deprecated legacy query functions.\ndep_fetch = $(call query_fetch_method,$(1))\ndep_name = $(call query_name,$(1))\ndep_repo = $(call query_repo_git,$(1))\ndep_commit = $(if $(dep_$(1)_commit),$(dep_$(1)_commit),$(if $(dep_$(1)),$(if $(filter hex,$(word 1,$(dep_$(1)))),$(word 2,$(dep_$(1))),$(word 3,$(dep_$(1)))),$(pkg_$(1)_commit)))\n\nLOCAL_DEPS_DIRS = $(foreach a,$(LOCAL_DEPS),$(if $(wildcard $(APPS_DIR)/$(a)),$(APPS_DIR)/$(a)))\nALL_DEPS_DIRS = $(addprefix $(DEPS_DIR)/,$(foreach dep,$(filter-out $(IGNORE_DEPS),$(BUILD_DEPS) $(DEPS)),$(call dep_name,$(dep))))\n\n# When we are calling an app directly we don't want to include it here\n# otherwise it'll be treated both as an apps and a top-level project.\nALL_APPS_DIRS = $(if $(wildcard $(APPS_DIR)/),$(filter-out $(APPS_DIR),$(shell find $(APPS_DIR) -maxdepth 1 -type d)))\nifdef ROOT_DIR\nifndef IS_APP\nALL_APPS_DIRS := $(filter-out $(APPS_DIR)/$(notdir $(CURDIR)),$(ALL_APPS_DIRS))\nendif\nendif\n\nifeq ($(filter $(APPS_DIR) $(DEPS_DIR),$(subst :, ,$(ERL_LIBS))),)\nifeq ($(ERL_LIBS),)\n\tERL_LIBS = $(APPS_DIR):$(DEPS_DIR)\nelse\n\tERL_LIBS := $(ERL_LIBS):$(APPS_DIR):$(DEPS_DIR)\nendif\nendif\nexport ERL_LIBS\n\nexport NO_AUTOPATCH\n\n# Verbosity.\n\ndep_verbose_0 = @echo \" DEP    $1 ($(call dep_commit,$1))\";\ndep_verbose_2 = set -x;\ndep_verbose = $(dep_verbose_$(V))\n\n# Optimization: don't recompile deps unless truly necessary.\n\nifndef IS_DEP\nifneq ($(MAKELEVEL),0)\n$(shell rm -f ebin/dep_built)\nendif\nendif\n\n# Core targets.\n\nALL_APPS_DIRS_TO_BUILD = $(if $(LOCAL_DEPS_DIRS)$(IS_APP),$(LOCAL_DEPS_DIRS),$(ALL_APPS_DIRS))\n\napps:: $(ALL_APPS_DIRS) clean-tmp-deps.log | $(ERLANG_MK_TMP)\n# Create ebin directory for all apps to make sure Erlang recognizes them\n# as proper OTP applications when using -include_lib. This is a temporary\n# fix, a proper fix would be to compile apps/* in the right order.\nifndef IS_APP\nifneq ($(ALL_APPS_DIRS),)\n\t$(verbose) set -e; for dep in $(ALL_APPS_DIRS) ; do \\\n\t\tmkdir -p $$dep/ebin; \\\n\tdone\nendif\nendif\n# At the toplevel: if LOCAL_DEPS is defined with at least one local app, only\n# compile that list of apps. Otherwise, compile everything.\n# Within an app: compile all LOCAL_DEPS that are (uncompiled) local apps.\nifneq ($(ALL_APPS_DIRS_TO_BUILD),)\n\t$(verbose) set -e; for dep in $(ALL_APPS_DIRS_TO_BUILD); do \\\n\t\tif grep -qs ^$$dep$$ $(ERLANG_MK_TMP)/apps.log; then \\\n\t\t\t:; \\\n\t\telse \\\n\t\t\techo $$dep >> $(ERLANG_MK_TMP)/apps.log; \\\n\t\t\t$(MAKE) -C $$dep $(if $(IS_TEST),test-build-app) IS_APP=1; \\\n\t\tfi \\\n\tdone\nendif\n\nclean-tmp-deps.log:\nifeq ($(IS_APP)$(IS_DEP),)\n\t$(verbose) rm -f $(ERLANG_MK_TMP)/apps.log $(ERLANG_MK_TMP)/deps.log\nendif\n\n# Erlang.mk does not rebuild dependencies after they were compiled\n# once. If a developer is working on the top-level project and some\n# dependencies at the same time, he may want to change this behavior.\n# There are two solutions:\n#     1. Set `FULL=1` so that all dependencies are visited and\n#        recursively recompiled if necessary.\n#     2. Set `FORCE_REBUILD=` to the specific list of dependencies that\n#        should be recompiled (instead of the whole set).\n\nFORCE_REBUILD ?=\n\nifeq ($(origin FULL),undefined)\nifneq ($(strip $(force_rebuild_dep)$(FORCE_REBUILD)),)\ndefine force_rebuild_dep\necho \"$(FORCE_REBUILD)\" | grep -qw \"$$(basename \"$1\")\"\nendef\nendif\nendif\n\nifneq ($(SKIP_DEPS),)\ndeps::\nelse\ndeps:: $(ALL_DEPS_DIRS) apps clean-tmp-deps.log | $(ERLANG_MK_TMP)\nifneq ($(ALL_DEPS_DIRS),)\n\t$(verbose) set -e; for dep in $(ALL_DEPS_DIRS); do \\\n\t\tif grep -qs ^$$dep$$ $(ERLANG_MK_TMP)/deps.log; then \\\n\t\t\t:; \\\n\t\telse \\\n\t\t\techo $$dep >> $(ERLANG_MK_TMP)/deps.log; \\\n\t\t\tif [ -z \"$(strip $(FULL))\" ] $(if $(force_rebuild_dep),&& ! ($(call force_rebuild_dep,$$dep)),) && [ ! -L $$dep ] && [ -f $$dep/ebin/dep_built ]; then \\\n\t\t\t\t:; \\\n\t\t\telif [ \"$$dep\" = \"$(DEPS_DIR)/hut\" -a \"$(HUT_PATCH)\" ]; then \\\n\t\t\t\t$(MAKE) -C $$dep app IS_DEP=1; \\\n\t\t\t\tif [ ! -L $$dep ] && [ -d $$dep/ebin ]; then touch $$dep/ebin/dep_built; fi; \\\n\t\t\telif [ -f $$dep/GNUmakefile ] || [ -f $$dep/makefile ] || [ -f $$dep/Makefile ]; then \\\n\t\t\t\t$(MAKE) -C $$dep IS_DEP=1; \\\n\t\t\t\tif [ ! -L $$dep ] && [ -d $$dep/ebin ]; then touch $$dep/ebin/dep_built; fi; \\\n\t\t\telse \\\n\t\t\t\techo \"Error: No Makefile to build dependency $$dep.\" >&2; \\\n\t\t\t\texit 2; \\\n\t\t\tfi \\\n\t\tfi \\\n\tdone\nendif\nendif\n\n# Deps related targets.\n\n# @todo rename GNUmakefile and makefile into Makefile first, if they exist\n# While Makefile file could be GNUmakefile or makefile,\n# in practice only Makefile is needed so far.\ndefine dep_autopatch\n\tif [ -f $(DEPS_DIR)/$(1)/erlang.mk ]; then \\\n\t\trm -rf $(DEPS_DIR)/$1/ebin/; \\\n\t\t$(call erlang,$(call dep_autopatch_appsrc.erl,$(1))); \\\n\t\t$(call dep_autopatch_erlang_mk,$(1)); \\\n\telif [ -f $(DEPS_DIR)/$(1)/Makefile ]; then \\\n\t\tif [ -f $(DEPS_DIR)/$1/rebar.lock ]; then \\\n\t\t\t$(call dep_autopatch2,$1); \\\n\t\telif [ 0 != `grep -c \"include ../\\w*\\.mk\" $(DEPS_DIR)/$(1)/Makefile` ]; then \\\n\t\t\t$(call dep_autopatch2,$(1)); \\\n\t\telif [ 0 != `grep -ci \"^[^#].*rebar\" $(DEPS_DIR)/$(1)/Makefile` ]; then \\\n\t\t\t$(call dep_autopatch2,$(1)); \\\n\t\telif [ -n \"`find $(DEPS_DIR)/$(1)/ -type f -name \\*.mk -not -name erlang.mk -exec grep -i \"^[^#].*rebar\" '{}' \\;`\" ]; then \\\n\t\t\t$(call dep_autopatch2,$(1)); \\\n\t\tfi \\\n\telse \\\n\t\tif [ ! -d $(DEPS_DIR)/$(1)/src/ ]; then \\\n\t\t\t$(call dep_autopatch_noop,$(1)); \\\n\t\telse \\\n\t\t\t$(call dep_autopatch2,$(1)); \\\n\t\tfi \\\n\tfi\nendef\n\ndefine dep_autopatch2\n\t! test -f $(DEPS_DIR)/$1/ebin/$1.app || \\\n\tmv -n $(DEPS_DIR)/$1/ebin/$1.app $(DEPS_DIR)/$1/src/$1.app.src; \\\n\trm -f $(DEPS_DIR)/$1/ebin/$1.app; \\\n\tif [ -f $(DEPS_DIR)/$1/src/$1.app.src.script ]; then \\\n\t\t$(call erlang,$(call dep_autopatch_appsrc_script.erl,$(1))); \\\n\tfi; \\\n\t$(call erlang,$(call dep_autopatch_appsrc.erl,$(1))); \\\n\tif [ -f $(DEPS_DIR)/$(1)/rebar -o -f $(DEPS_DIR)/$(1)/rebar.config -o -f $(DEPS_DIR)/$(1)/rebar.config.script -o -f $(DEPS_DIR)/$1/rebar.lock ]; then \\\n\t\t$(call dep_autopatch_fetch_rebar); \\\n\t\t$(call dep_autopatch_rebar,$(1)); \\\n\telse \\\n\t\t$(call dep_autopatch_gen,$(1)); \\\n\tfi\nendef\n\ndefine dep_autopatch_noop\n\tprintf \"noop:\\n\" > $(DEPS_DIR)/$(1)/Makefile\nendef\n\n# Replace \"include erlang.mk\" with a line that will load the parent Erlang.mk\n# if given. Do it for all 3 possible Makefile file names.\nifeq ($(NO_AUTOPATCH_ERLANG_MK),)\ndefine dep_autopatch_erlang_mk\n\tfor f in Makefile makefile GNUmakefile; do \\\n\t\tif [ -f $(DEPS_DIR)/$1/$$f ]; then \\\n\t\t\tsed -i.bak s/'include *erlang.mk'/'include $$(if $$(ERLANG_MK_FILENAME),$$(ERLANG_MK_FILENAME),erlang.mk)'/ $(DEPS_DIR)/$1/$$f; \\\n\t\tfi \\\n\tdone\nendef\nelse\ndefine dep_autopatch_erlang_mk\n\t:\nendef\nendif\n\ndefine dep_autopatch_gen\n\tprintf \"%s\\n\" \\\n\t\t\"ERLC_OPTS = +debug_info\" \\\n\t\t\"include ../../erlang.mk\" > $(DEPS_DIR)/$(1)/Makefile\nendef\n\n# We use flock/lockf when available to avoid concurrency issues.\ndefine dep_autopatch_fetch_rebar\n\tif command -v flock >/dev/null; then \\\n\t\tflock $(ERLANG_MK_TMP)/rebar.lock sh -c \"$(call dep_autopatch_fetch_rebar2)\"; \\\n\telif command -v lockf >/dev/null; then \\\n\t\tlockf $(ERLANG_MK_TMP)/rebar.lock sh -c \"$(call dep_autopatch_fetch_rebar2)\"; \\\n\telse \\\n\t\t$(call dep_autopatch_fetch_rebar2); \\\n\tfi\nendef\n\ndefine dep_autopatch_fetch_rebar2\n\tif [ ! -d $(ERLANG_MK_TMP)/rebar3 ]; then \\\n\t\tgit clone -q -n -- $(REBAR3_GIT) $(ERLANG_MK_TMP)/rebar3; \\\n\t\tcd $(ERLANG_MK_TMP)/rebar3; \\\n\t\tgit checkout -q $(REBAR3_COMMIT); \\\n\t\t./bootstrap; \\\n\t\tcd -; \\\n\tfi\nendef\n\ndefine dep_autopatch_rebar\n\tif [ -f $(DEPS_DIR)/$(1)/Makefile ]; then \\\n\t\tmv $(DEPS_DIR)/$(1)/Makefile $(DEPS_DIR)/$(1)/Makefile.orig.mk; \\\n\tfi; \\\n\t$(call erlang,$(call dep_autopatch_rebar.erl,$(1))); \\\n\trm -f $(DEPS_DIR)/$(1)/ebin/$(1).app\nendef\n\ndefine dep_autopatch_rebar.erl\n\tapplication:load(rebar),\n\tapplication:set_env(rebar, log_level, debug),\n\t{module, rebar3} = c:l(rebar3),\n\tConf1 = case file:consult(\"$(call core_native_path,$(DEPS_DIR)/$1/rebar.config)\") of\n\t\t{ok, Conf0} -> Conf0;\n\t\t_ -> []\n\tend,\n\t{Conf, OsEnv} = fun() ->\n\t\tcase filelib:is_file(\"$(call core_native_path,$(DEPS_DIR)/$1/rebar.config.script)\") of\n\t\t\tfalse -> {Conf1, []};\n\t\t\ttrue ->\n\t\t\t\tBindings0 = erl_eval:new_bindings(),\n\t\t\t\tBindings1 = erl_eval:add_binding('CONFIG', Conf1, Bindings0),\n\t\t\t\tBindings = erl_eval:add_binding('SCRIPT', \"$(call core_native_path,$(DEPS_DIR)/$1/rebar.config.script)\", Bindings1),\n\t\t\t\tBefore = os:getenv(),\n\t\t\t\t{ok, Conf2} = file:script(\"$(call core_native_path,$(DEPS_DIR)/$1/rebar.config.script)\", Bindings),\n\t\t\t\t{Conf2, lists:foldl(fun(E, Acc) -> lists:delete(E, Acc) end, os:getenv(), Before)}\n\t\tend\n\tend(),\n\tWrite = fun (Text) ->\n\t\tfile:write_file(\"$(call core_native_path,$(DEPS_DIR)/$1/Makefile)\", Text, [append])\n\tend,\n\tEscape = fun (Text) ->\n\t\tre:replace(Text, \"\\\\\\\\$$\", \"\\$$$$\", [global, {return, list}])\n\tend,\n\tWrite(\"IGNORE_DEPS += edown eper eunit_formatters meck node_package \"\n\t\t\"rebar_lock_deps_plugin rebar_vsn_plugin reltool_util\\n\"),\n\tWrite(\"C_SRC_DIR = /path/do/not/exist\\n\"),\n\tWrite(\"C_SRC_TYPE = rebar\\n\"),\n\tWrite(\"DRV_CFLAGS = -fPIC\\nexport DRV_CFLAGS\\n\"),\n\tWrite([\"ERLANG_ARCH = \", rebar_utils:wordsize(), \"\\nexport ERLANG_ARCH\\n\"]),\n\tToList = fun\n\t\t(V) when is_atom(V) -> atom_to_list(V);\n\t\t(V) when is_list(V) -> \"'\\\\\"\" ++ V ++ \"\\\\\"'\"\n\tend,\n\tfun() ->\n\t\tWrite(\"ERLC_OPTS = +debug_info\\n\"),\n\t\tcase lists:keyfind(erl_opts, 1, Conf) of\n\t\t\tfalse -> ok;\n\t\t\t{_, ErlOpts} ->\n\t\t\t\tlists:foreach(fun\n\t\t\t\t\t({d, D}) ->\n\t\t\t\t\t\tWrite(\"ERLC_OPTS += -D\" ++ ToList(D) ++ \"=1\\n\");\n\t\t\t\t\t({d, DKey, DVal}) ->\n\t\t\t\t\t\tWrite(\"ERLC_OPTS += -D\" ++ ToList(DKey) ++ \"=\" ++ ToList(DVal) ++ \"\\n\");\n\t\t\t\t\t({i, I}) ->\n\t\t\t\t\t\tWrite([\"ERLC_OPTS += -I \", I, \"\\n\"]);\n\t\t\t\t\t({platform_define, Regex, D}) ->\n\t\t\t\t\t\tcase rebar_utils:is_arch(Regex) of\n\t\t\t\t\t\t\ttrue -> Write(\"ERLC_OPTS += -D\" ++ ToList(D) ++ \"=1\\n\");\n\t\t\t\t\t\t\tfalse -> ok\n\t\t\t\t\t\tend;\n\t\t\t\t\t({parse_transform, PT}) ->\n\t\t\t\t\t\tWrite(\"ERLC_OPTS += +'{parse_transform, \" ++ ToList(PT) ++ \"}'\\n\");\n\t\t\t\t\t(_) -> ok\n\t\t\t\tend, ErlOpts)\n\t\tend,\n\t\tWrite(\"\\n\")\n\tend(),\n\tGetHexVsn2 = fun(N, NP) ->\n\t\tcase file:consult(\"$(call core_native_path,$(DEPS_DIR)/$1/rebar.lock)\") of\n\t\t\t{ok, Lock} ->\n\t\t\t\tio:format(\"~p~n\", [Lock]),\n\t\t\t\tLockPkgs = case lists:keyfind(\"1.2.0\", 1, Lock) of\n\t\t\t\t\t{_, LP} ->\n\t\t\t\t\t\tLP;\n\t\t\t\t\t_ ->\n\t\t\t\t\t\tcase lists:keyfind(\"1.1.0\", 1, Lock) of\n\t\t\t\t\t\t\t{_, LP} ->\n\t\t\t\t\t\t\t\tLP;\n\t\t\t\t\t\t\t_ ->\n\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tif\n\t\t\t\t\tis_list(LockPkgs) ->\n\t\t\t\t\t\tio:format(\"~p~n\", [LockPkgs]),\n\t\t\t\t\t\tcase lists:keyfind(atom_to_binary(N, latin1), 1, LockPkgs) of\n\t\t\t\t\t\t\t{_, {pkg, _, Vsn}, _} ->\n\t\t\t\t\t\t\t\tio:format(\"~p~n\", [Vsn]),\n\t\t\t\t\t\t\t\t{N, {hex, NP, binary_to_list(Vsn)}};\n\t\t\t\t\t\t\t_ ->\n\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\tend;\n\t\t\t\t\ttrue ->\n\t\t\t\t\t\tfalse\n\t\t\t\tend;\n\t\t\t_ ->\n\t\t\t\tfalse\n\t\tend\n\tend,\n\tGetHexVsn3Common = fun(N, NP, S0) ->\n\t\tcase GetHexVsn2(N, NP) of\n\t\t\tfalse ->\n\t\t\t\tS2 = case S0 of\n\t\t\t\t\t\" \" ++ S1 -> S1;\n\t\t\t\t\t_ -> S0\n\t\t\t\tend,\n\t\t\t\tS = case length([ok || $$. <- S2]) of\n\t\t\t\t\t0 -> S2 ++ \".0.0\";\n\t\t\t\t\t1 -> S2 ++ \".0\";\n\t\t\t\t\t_ -> S2\n\t\t\t\tend,\n\t\t\t\t{N, {hex, NP, S}};\n\t\t\tNameSource ->\n\t\t\t\tNameSource\n\t\tend\n\tend,\n\tGetHexVsn3 = fun\n\t\t(N, NP, \"~>\" ++ S0) ->\n\t\t\tGetHexVsn3Common(N, NP, S0);\n\t\t(N, NP, \">=\" ++ S0) ->\n\t\t\tGetHexVsn3Common(N, NP, S0);\n\t\t(N, NP, S) -> {N, {hex, NP, S}}\n\tend,\n\tfun() ->\n\t\tFile = case lists:keyfind(deps, 1, Conf) of\n\t\t\tfalse -> [];\n\t\t\t{_, Deps} ->\n\t\t\t\t[begin case case Dep of\n\t\t\t\t\t\t\tN when is_atom(N) -> GetHexVsn2(N, N);\n\t\t\t\t\t\t\t{N, S} when is_atom(N), is_list(S) -> GetHexVsn3(N, N, S);\n\t\t\t\t\t\t\t{N, {pkg, NP}} when is_atom(N) -> GetHexVsn2(N, NP);\n\t\t\t\t\t\t\t{N, S, {pkg, NP}} -> GetHexVsn3(N, NP, S);\n\t\t\t\t\t\t\t{N, S} when is_tuple(S) -> {N, S};\n\t\t\t\t\t\t\t{N, _, S} -> {N, S};\n\t\t\t\t\t\t\t{N, _, S, _} -> {N, S};\n\t\t\t\t\t\t\t_ -> false\n\t\t\t\t\t\tend of\n\t\t\t\t\tfalse -> ok;\n\t\t\t\t\t{Name, Source} ->\n\t\t\t\t\t\t{Method, Repo, Commit} = case Source of\n\t\t\t\t\t\t\t{hex, NPV, V} -> {hex, V, NPV};\n\t\t\t\t\t\t\t{git, R} -> {git, R, master};\n\t\t\t\t\t\t\t{M, R, {branch, C}} -> {M, R, C};\n\t\t\t\t\t\t\t{M, R, {ref, C}} -> {M, R, C};\n\t\t\t\t\t\t\t{M, R, {tag, C}} -> {M, R, C};\n\t\t\t\t\t\t\t{M, R, C} -> {M, R, C}\n\t\t\t\t\t\tend,\n\t\t\t\t\t\tWrite(io_lib:format(\"DEPS += ~s\\ndep_~s = ~s ~s ~s~n\", [Name, Name, Method, Repo, Commit]))\n\t\t\t\tend end || Dep <- Deps]\n\t\tend\n\tend(),\n\tfun() ->\n\t\tcase lists:keyfind(erl_first_files, 1, Conf) of\n\t\t\tfalse -> ok;\n\t\t\t{_, Files0} ->\n\t\t\t\tFiles = [begin\n\t\t\t\t\thd(filelib:wildcard(\"$(call core_native_path,$(DEPS_DIR)/$1/src/)**/\" ++ filename:rootname(F) ++ \".*rl\"))\n\t\t\t\tend || \"src/\" ++ F <- Files0],\n\t\t\t\tNames = [[\" \", case lists:reverse(F) of\n\t\t\t\t\t\"lre.\" ++ Elif -> lists:reverse(Elif);\n\t\t\t\t\t\"lrx.\" ++ Elif -> lists:reverse(Elif);\n\t\t\t\t\t\"lry.\" ++ Elif -> lists:reverse(Elif);\n\t\t\t\t\tElif -> lists:reverse(Elif)\n\t\t\t\tend] || \"$(call core_native_path,$(DEPS_DIR)/$1/src/)\" ++ F <- Files],\n\t\t\t\tWrite(io_lib:format(\"COMPILE_FIRST +=~s\\n\", [Names]))\n\t\tend\n\tend(),\n\tWrite(\"\\n\\nrebar_dep: preprocess pre-deps deps pre-app app\\n\"),\n\tWrite(\"\\npreprocess::\\n\"),\n\tWrite(\"\\npre-deps::\\n\"),\n\tWrite(\"\\npre-app::\\n\"),\n\tPatchHook = fun(Cmd) ->\n\t\tCmd2 = re:replace(Cmd, \"^([g]?make)(.*)( -C.*)\", \"\\\\\\\\1\\\\\\\\3\\\\\\\\2\", [{return, list}]),\n\t\tcase Cmd2 of\n\t\t\t\"make -C\" ++ Cmd1 -> \"$$\\(MAKE) -C\" ++ Escape(Cmd1);\n\t\t\t\"gmake -C\" ++ Cmd1 -> \"$$\\(MAKE) -C\" ++ Escape(Cmd1);\n\t\t\t\"make \" ++ Cmd1 -> \"$$\\(MAKE) -f Makefile.orig.mk \" ++ Escape(Cmd1);\n\t\t\t\"gmake \" ++ Cmd1 -> \"$$\\(MAKE) -f Makefile.orig.mk \" ++ Escape(Cmd1);\n\t\t\t_ -> Escape(Cmd)\n\t\tend\n\tend,\n\tfun() ->\n\t\tcase lists:keyfind(pre_hooks, 1, Conf) of\n\t\t\tfalse -> ok;\n\t\t\t{_, Hooks} ->\n\t\t\t\t[case H of\n\t\t\t\t\t{'get-deps', Cmd} ->\n\t\t\t\t\t\tWrite(\"\\npre-deps::\\n\\t\" ++ PatchHook(Cmd) ++ \"\\n\");\n\t\t\t\t\t{compile, Cmd} ->\n\t\t\t\t\t\tWrite(\"\\npre-app::\\n\\tCC=$$\\(CC) \" ++ PatchHook(Cmd) ++ \"\\n\");\n\t\t\t\t\t{{pc, compile}, Cmd} ->\n\t\t\t\t\t\tWrite(\"\\npre-app::\\n\\tCC=$$\\(CC) \" ++ PatchHook(Cmd) ++ \"\\n\");\n\t\t\t\t\t{Regex, compile, Cmd} ->\n\t\t\t\t\t\tcase rebar_utils:is_arch(Regex) of\n\t\t\t\t\t\t\ttrue -> Write(\"\\npre-app::\\n\\tCC=$$\\(CC) \" ++ PatchHook(Cmd) ++ \"\\n\");\n\t\t\t\t\t\t\tfalse -> ok\n\t\t\t\t\t\tend;\n\t\t\t\t\t_ -> ok\n\t\t\t\tend || H <- Hooks]\n\t\tend\n\tend(),\n\tShellToMk = fun(V0) ->\n\t\tV1 = re:replace(V0, \"[$$][(]\", \"$$\\(shell \", [global]),\n\t\tV = re:replace(V1, \"([$$])(?![(])(\\\\\\\\w*)\", \"\\\\\\\\1(\\\\\\\\2)\", [global]),\n\t\tre:replace(V, \"-Werror\\\\\\\\b\", \"\", [{return, list}, global])\n\tend,\n\tPortSpecs = fun() ->\n\t\tcase lists:keyfind(port_specs, 1, Conf) of\n\t\t\tfalse ->\n\t\t\t\tcase filelib:is_dir(\"$(call core_native_path,$(DEPS_DIR)/$1/c_src)\") of\n\t\t\t\t\tfalse -> [];\n\t\t\t\t\ttrue ->\n\t\t\t\t\t\t[{\"priv/\" ++ proplists:get_value(so_name, Conf, \"$(1)_drv.so\"),\n\t\t\t\t\t\t\tproplists:get_value(port_sources, Conf, [\"c_src/*.c\"]), []}]\n\t\t\t\tend;\n\t\t\t{_, Specs} ->\n\t\t\t\tlists:flatten([case S of\n\t\t\t\t\t{Output, Input} -> {ShellToMk(Output), Input, []};\n\t\t\t\t\t{Regex, Output, Input} ->\n\t\t\t\t\t\tcase rebar_utils:is_arch(Regex) of\n\t\t\t\t\t\t\ttrue -> {ShellToMk(Output), Input, []};\n\t\t\t\t\t\t\tfalse -> []\n\t\t\t\t\t\tend;\n\t\t\t\t\t{Regex, Output, Input, [{env, Env}]} ->\n\t\t\t\t\t\tcase rebar_utils:is_arch(Regex) of\n\t\t\t\t\t\t\ttrue -> {ShellToMk(Output), Input, Env};\n\t\t\t\t\t\t\tfalse -> []\n\t\t\t\t\t\tend\n\t\t\t\tend || S <- Specs])\n\t\tend\n\tend(),\n\tPortSpecWrite = fun (Text) ->\n\t\tfile:write_file(\"$(call core_native_path,$(DEPS_DIR)/$1/c_src/Makefile.erlang.mk)\", Text, [append])\n\tend,\n\tcase PortSpecs of\n\t\t[] -> ok;\n\t\t_ ->\n\t\t\tWrite(\"\\npre-app::\\n\\t@$$\\(MAKE) --no-print-directory -f c_src/Makefile.erlang.mk\\n\"),\n\t\t\tPortSpecWrite(io_lib:format(\"ERL_CFLAGS ?= -finline-functions -Wall -fPIC -I \\\\\"~s/erts-~s/include\\\\\" -I \\\\\"~s\\\\\"\\n\",\n\t\t\t\t[code:root_dir(), erlang:system_info(version), code:lib_dir(erl_interface, include)])),\n\t\t\tPortSpecWrite(io_lib:format(\"ERL_LDFLAGS ?= -L \\\\\"~s\\\\\" -lei\\n\",\n\t\t\t\t[code:lib_dir(erl_interface, lib)])),\n\t\t\t[PortSpecWrite([\"\\n\", E, \"\\n\"]) || E <- OsEnv],\n\t\t\tFilterEnv = fun(Env) ->\n\t\t\t\tlists:flatten([case E of\n\t\t\t\t\t{_, _} -> E;\n\t\t\t\t\t{Regex, K, V} ->\n\t\t\t\t\t\tcase rebar_utils:is_arch(Regex) of\n\t\t\t\t\t\t\ttrue -> {K, V};\n\t\t\t\t\t\t\tfalse -> []\n\t\t\t\t\t\tend\n\t\t\t\tend || E <- Env])\n\t\t\tend,\n\t\t\tMergeEnv = fun(Env) ->\n\t\t\t\tlists:foldl(fun ({K, V}, Acc) ->\n\t\t\t\t\tcase lists:keyfind(K, 1, Acc) of\n\t\t\t\t\t\tfalse -> [{K, rebar_utils:expand_env_variable(V, K, \"\")}|Acc];\n\t\t\t\t\t\t{_, V0} -> [{K, rebar_utils:expand_env_variable(V, K, V0)}|Acc]\n\t\t\t\t\tend\n\t\t\t\tend, [], Env)\n\t\t\tend,\n\t\t\tPortEnv = case lists:keyfind(port_env, 1, Conf) of\n\t\t\t\tfalse -> [];\n\t\t\t\t{_, PortEnv0} -> FilterEnv(PortEnv0)\n\t\t\tend,\n\t\t\tPortSpec = fun ({Output, Input0, Env}) ->\n\t\t\t\tfilelib:ensure_dir(\"$(call core_native_path,$(DEPS_DIR)/$1/)\" ++ Output),\n\t\t\t\tInput = [[\" \", I] || I <- Input0],\n\t\t\t\tPortSpecWrite([\n\t\t\t\t\t[[\"\\n\", K, \" = \", ShellToMk(V)] || {K, V} <- lists:reverse(MergeEnv(PortEnv))],\n\t\t\t\t\tcase $(PLATFORM) of\n\t\t\t\t\t\tdarwin -> \"\\n\\nLDFLAGS += -flat_namespace -undefined suppress\";\n\t\t\t\t\t\t_ -> \"\"\n\t\t\t\t\tend,\n\t\t\t\t\t\"\\n\\nall:: \", Output, \"\\n\\t@:\\n\\n\",\n\t\t\t\t\t\"%.o: %.c\\n\\t$$\\(CC) -c -o $$\\@ $$\\< $$\\(CFLAGS) $$\\(ERL_CFLAGS) $$\\(DRV_CFLAGS) $$\\(EXE_CFLAGS)\\n\\n\",\n\t\t\t\t\t\"%.o: %.C\\n\\t$$\\(CXX) -c -o $$\\@ $$\\< $$\\(CXXFLAGS) $$\\(ERL_CFLAGS) $$\\(DRV_CFLAGS) $$\\(EXE_CFLAGS)\\n\\n\",\n\t\t\t\t\t\"%.o: %.cc\\n\\t$$\\(CXX) -c -o $$\\@ $$\\< $$\\(CXXFLAGS) $$\\(ERL_CFLAGS) $$\\(DRV_CFLAGS) $$\\(EXE_CFLAGS)\\n\\n\",\n\t\t\t\t\t\"%.o: %.cpp\\n\\t$$\\(CXX) -c -o $$\\@ $$\\< $$\\(CXXFLAGS) $$\\(ERL_CFLAGS) $$\\(DRV_CFLAGS) $$\\(EXE_CFLAGS)\\n\\n\",\n\t\t\t\t\t[[Output, \": \", K, \" += \", ShellToMk(V), \"\\n\"] || {K, V} <- lists:reverse(MergeEnv(FilterEnv(Env)))],\n\t\t\t\t\tOutput, \": $$\\(foreach ext,.c .C .cc .cpp,\",\n\t\t\t\t\t\t\"$$\\(patsubst %$$\\(ext),%.o,$$\\(filter %$$\\(ext),$$\\(wildcard\", Input, \"))))\\n\",\n\t\t\t\t\t\"\\t$$\\(CC) -o $$\\@ $$\\? $$\\(LDFLAGS) $$\\(ERL_LDFLAGS) $$\\(DRV_LDFLAGS) $$\\(LDLIBS) $$\\(EXE_LDFLAGS)\",\n\t\t\t\t\tcase {filename:extension(Output), $(PLATFORM)} of\n\t\t\t\t\t    {[], _} -> \"\\n\";\n\t\t\t\t\t    {\".so\", darwin} -> \" -shared\\n\";\n\t\t\t\t\t    {\".dylib\", darwin} -> \" -shared\\n\";\n\t\t\t\t\t    {_, darwin} -> \"\\n\";\n\t\t\t\t\t    _ -> \" -shared\\n\"\n\t\t\t\t\tend])\n\t\t\tend,\n\t\t\t[PortSpec(S) || S <- PortSpecs]\n\tend,\n\tfun() ->\n\t\tcase lists:keyfind(plugins, 1, Conf) of\n\t\t\tfalse -> ok;\n\t\t\t{_, Plugins0} ->\n\t\t\t\tPlugins = [P || P <- Plugins0, is_tuple(P)],\n\t\t\t\tcase lists:keyfind('lfe-compile', 1, Plugins) of\n\t\t\t\t\tfalse -> ok;\n\t\t\t\t\t_ -> Write(\"\\nBUILD_DEPS = lfe lfe.mk\\ndep_lfe.mk = git https://github.com/ninenines/lfe.mk master\\nDEP_PLUGINS = lfe.mk\\n\")\n\t\t\t\tend\n\t\tend\n\tend(),\n\tWrite(\"\\ninclude $$\\(if $$\\(ERLANG_MK_FILENAME),$$\\(ERLANG_MK_FILENAME),erlang.mk)\"),\n\tRunPlugin = fun(Plugin, Step) ->\n\t\tcase erlang:function_exported(Plugin, Step, 2) of\n\t\t\tfalse -> ok;\n\t\t\ttrue ->\n\t\t\t\tc:cd(\"$(call core_native_path,$(DEPS_DIR)/$1/)\"),\n\t\t\t\tRet = Plugin:Step({config, \"\", Conf, dict:new(), dict:new(), dict:new(),\n\t\t\t\t\tdict:store(base_dir, \"\", dict:new())}, undefined),\n\t\t\t\tio:format(\"rebar plugin ~p step ~p ret ~p~n\", [Plugin, Step, Ret])\n\t\tend\n\tend,\n\tfun() ->\n\t\tcase lists:keyfind(plugins, 1, Conf) of\n\t\t\tfalse -> ok;\n\t\t\t{_, Plugins0} ->\n\t\t\t\tPlugins = [P || P <- Plugins0, is_atom(P)],\n\t\t\t\t[begin\n\t\t\t\t\tcase lists:keyfind(deps, 1, Conf) of\n\t\t\t\t\t\tfalse -> ok;\n\t\t\t\t\t\t{_, Deps} ->\n\t\t\t\t\t\t\tcase lists:keyfind(P, 1, Deps) of\n\t\t\t\t\t\t\t\tfalse -> ok;\n\t\t\t\t\t\t\t\t_ ->\n\t\t\t\t\t\t\t\t\tPath = \"$(call core_native_path,$(DEPS_DIR)/)\" ++ atom_to_list(P),\n\t\t\t\t\t\t\t\t\tio:format(\"~s\", [os:cmd(\"$(MAKE) -C $(call core_native_path,$(DEPS_DIR)/$1) \" ++ Path)]),\n\t\t\t\t\t\t\t\t\tio:format(\"~s\", [os:cmd(\"$(MAKE) -C \" ++ Path ++ \" IS_DEP=1\")]),\n\t\t\t\t\t\t\t\t\tcode:add_patha(Path ++ \"/ebin\")\n\t\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend || P <- Plugins],\n\t\t\t\t[case code:load_file(P) of\n\t\t\t\t\t{module, P} -> ok;\n\t\t\t\t\t_ ->\n\t\t\t\t\t\tcase lists:keyfind(plugin_dir, 1, Conf) of\n\t\t\t\t\t\t\tfalse -> ok;\n\t\t\t\t\t\t\t{_, PluginsDir} ->\n\t\t\t\t\t\t\t\tErlFile = \"$(call core_native_path,$(DEPS_DIR)/$1/)\" ++ PluginsDir ++ \"/\" ++ atom_to_list(P) ++ \".erl\",\n\t\t\t\t\t\t\t\t{ok, P, Bin} = compile:file(ErlFile, [binary]),\n\t\t\t\t\t\t\t\t{module, P} = code:load_binary(P, ErlFile, Bin)\n\t\t\t\t\t\tend\n\t\t\t\tend || P <- Plugins],\n\t\t\t\t[RunPlugin(P, preprocess) || P <- Plugins],\n\t\t\t\t[RunPlugin(P, pre_compile) || P <- Plugins],\n\t\t\t\t[RunPlugin(P, compile) || P <- Plugins]\n\t\tend\n\tend(),\n\thalt()\nendef\n\ndefine dep_autopatch_appsrc_script.erl\n\tAppSrc = \"$(call core_native_path,$(DEPS_DIR)/$1/src/$1.app.src)\",\n\tAppSrcScript = AppSrc ++ \".script\",\n\tConf1 = case file:consult(AppSrc) of\n\t\t{ok, Conf0} -> Conf0;\n\t\t{error, enoent} -> []\n\tend,\n\tBindings0 = erl_eval:new_bindings(),\n\tBindings1 = erl_eval:add_binding('CONFIG', Conf1, Bindings0),\n\tBindings = erl_eval:add_binding('SCRIPT', AppSrcScript, Bindings1),\n\tConf = case file:script(AppSrcScript, Bindings) of\n\t\t{ok, [C]} -> C;\n\t\t{ok, C} -> C\n\tend,\n\tok = file:write_file(AppSrc, io_lib:format(\"~p.~n\", [Conf])),\n\thalt()\nendef\n\ndefine dep_autopatch_appsrc.erl\n\tAppSrcOut = \"$(call core_native_path,$(DEPS_DIR)/$1/src/$1.app.src)\",\n\tAppSrcIn = case filelib:is_regular(AppSrcOut) of false -> \"$(call core_native_path,$(DEPS_DIR)/$1/ebin/$1.app)\"; true -> AppSrcOut end,\n\tcase filelib:is_regular(AppSrcIn) of\n\t\tfalse -> ok;\n\t\ttrue ->\n\t\t\t{ok, [{application, $(1), L0}]} = file:consult(AppSrcIn),\n\t\t\tL1 = lists:keystore(modules, 1, L0, {modules, []}),\n\t\t\tL2 = case lists:keyfind(vsn, 1, L1) of\n\t\t\t\t{_, git} -> lists:keyreplace(vsn, 1, L1, {vsn, lists:droplast(os:cmd(\"git -C $(DEPS_DIR)/$1 describe --dirty --tags --always\"))});\n\t\t\t\t{_, {cmd, _}} -> lists:keyreplace(vsn, 1, L1, {vsn, \"cmd\"});\n\t\t\t\t_ -> L1\n\t\t\tend,\n\t\t\tL3 = case lists:keyfind(registered, 1, L2) of false -> [{registered, []}|L2]; _ -> L2 end,\n\t\t\tok = file:write_file(AppSrcOut, io_lib:format(\"~p.~n\", [{application, $(1), L3}])),\n\t\t\tcase AppSrcOut of AppSrcIn -> ok; _ -> ok = file:delete(AppSrcIn) end\n\tend,\n\thalt()\nendef\n\nifeq ($(CACHE_DEPS),1)\n\ndefine dep_cache_fetch_git\n\tmkdir -p $(CACHE_DIR)/git; \\\n\tif test -d \"$(join $(CACHE_DIR)/git/,$(call dep_name,$1))\"; then \\\n\t\tcd $(join $(CACHE_DIR)/git/,$(call dep_name,$1)); \\\n\t\tif ! git checkout -q $(call dep_commit,$1); then \\\n\t\t\tgit remote set-url origin $(call dep_repo,$1) && \\\n\t\t\tgit pull --all && \\\n\t\t\tgit cat-file -e $(call dep_commit,$1) 2>/dev/null; \\\n\t\tfi; \\\n\telse \\\n\t\tgit clone -q -n -- $(call dep_repo,$1) $(join $(CACHE_DIR)/git/,$(call dep_name,$1)); \\\n\tfi; \\\n\tgit clone -q --branch $(call dep_commit,$1) --single-branch -- $(join $(CACHE_DIR)/git/,$(call dep_name,$1)) $2\nendef\n\ndefine dep_fetch_git\n\t$(call dep_cache_fetch_git,$1,$(DEPS_DIR)/$(call dep_name,$1));\nendef\n\ndefine dep_fetch_git-subfolder\n\tmkdir -p $(ERLANG_MK_TMP)/git-subfolder; \\\n\t$(call dep_cache_fetch_git,$1,$(ERLANG_MK_TMP)/git-subfolder/$(call dep_name,$1)); \\\n\tln -s $(ERLANG_MK_TMP)/git-subfolder/$(call dep_name,$1)/$(word 4,$(dep_$1)) \\\n\t\t$(DEPS_DIR)/$(call dep_name,$1);\nendef\n\nelse\n\ndefine dep_fetch_git\n\tgit clone -q -n -- $(call dep_repo,$1) $(DEPS_DIR)/$(call dep_name,$1); \\\n\tcd $(DEPS_DIR)/$(call dep_name,$1) && git checkout -q $(call dep_commit,$1);\nendef\n\ndefine dep_fetch_git-subfolder\n\tmkdir -p $(ERLANG_MK_TMP)/git-subfolder; \\\n\tgit clone -q -n -- $(call dep_repo,$1) \\\n\t\t$(ERLANG_MK_TMP)/git-subfolder/$(call dep_name,$1); \\\n\tcd $(ERLANG_MK_TMP)/git-subfolder/$(call dep_name,$1) \\\n\t\t&& git checkout -q $(call dep_commit,$1); \\\n\tln -s $(ERLANG_MK_TMP)/git-subfolder/$(call dep_name,$1)/$(word 4,$(dep_$1)) \\\n\t\t$(DEPS_DIR)/$(call dep_name,$1);\nendef\n\nendif\n\ndefine dep_fetch_git-submodule\n\tgit submodule update --init -- $(DEPS_DIR)/$1;\nendef\n\ndefine dep_fetch_hg\n\thg clone -q -U $(call dep_repo,$(1)) $(DEPS_DIR)/$(call dep_name,$(1)); \\\n\tcd $(DEPS_DIR)/$(call dep_name,$(1)) && hg update -q $(call dep_commit,$(1));\nendef\n\ndefine dep_fetch_svn\n\tsvn checkout -q $(call dep_repo,$(1)) $(DEPS_DIR)/$(call dep_name,$(1));\nendef\n\ndefine dep_fetch_cp\n\tcp -R $(call dep_repo,$(1)) $(DEPS_DIR)/$(call dep_name,$(1));\nendef\n\ndefine dep_fetch_ln\n\tln -s $(call dep_repo,$(1)) $(DEPS_DIR)/$(call dep_name,$(1));\nendef\n\nifeq ($(CACHE_DEPS),1)\n\n# Hex only has a package version. No need to look in the Erlang.mk packages.\ndefine dep_fetch_hex\n\tmkdir -p $(CACHE_DIR)/hex $(DEPS_DIR)/$1; \\\n\t$(eval hex_tar_name=$(if $(word 3,$(dep_$1)),$(word 3,$(dep_$1)),$1)-$(strip $(word 2,$(dep_$1))).tar) \\\n\t$(if $(wildcard $(CACHE_DIR)/hex/$(hex_tar_name)),,$(call core_http_get,$(CACHE_DIR)/hex/$(hex_tar_name),\\\n\t\thttps://repo.hex.pm/tarballs/$(hex_tar_name);)) \\\n\ttar -xOf $(CACHE_DIR)/hex/$(hex_tar_name) contents.tar.gz | tar -C $(DEPS_DIR)/$1 -xzf -;\nendef\n\nelse\n\n# Hex only has a package version. No need to look in the Erlang.mk packages.\ndefine dep_fetch_hex\n\tmkdir -p $(ERLANG_MK_TMP)/hex $(DEPS_DIR)/$1; \\\n\t$(call core_http_get,$(ERLANG_MK_TMP)/hex/$1.tar,\\\n\t\thttps://repo.hex.pm/tarballs/$(if $(word 3,$(dep_$1)),$(word 3,$(dep_$1)),$1)-$(strip $(word 2,$(dep_$1))).tar); \\\n\ttar -xOf $(ERLANG_MK_TMP)/hex/$1.tar contents.tar.gz | tar -C $(DEPS_DIR)/$1 -xzf -;\nendef\n\nendif\n\ndefine dep_fetch_fail\n\techo \"Error: Unknown or invalid dependency: $(1).\" >&2; \\\n\texit 78;\nendef\n\n# Kept for compatibility purposes with older Erlang.mk configuration.\ndefine dep_fetch_legacy\n\t$(warning WARNING: '$(1)' dependency configuration uses deprecated format.) \\\n\tgit clone -q -n -- $(word 1,$(dep_$(1))) $(DEPS_DIR)/$(1); \\\n\tcd $(DEPS_DIR)/$(1) && git checkout -q $(if $(word 2,$(dep_$(1))),$(word 2,$(dep_$(1))),master);\nendef\n\ndefine dep_target\n$(DEPS_DIR)/$(call dep_name,$1): | $(ERLANG_MK_TMP)\n\t$(eval DEP_NAME := $(call dep_name,$1))\n\t$(eval DEP_STR := $(if $(filter $1,$(DEP_NAME)),$1,\"$1 ($(DEP_NAME))\"))\n\t$(verbose) if test -d $(APPS_DIR)/$(DEP_NAME); then \\\n\t\techo \"Error: Dependency\" $(DEP_STR) \"conflicts with application found in $(APPS_DIR)/$(DEP_NAME).\" >&2; \\\n\t\texit 17; \\\n\tfi\n\t$(verbose) mkdir -p $(DEPS_DIR)\n\t$(dep_verbose) $(call dep_fetch_$(strip $(call dep_fetch,$(1))),$(1))\n\t$(verbose) if [ -f $(DEPS_DIR)/$(1)/configure.ac -o -f $(DEPS_DIR)/$(1)/configure.in ] \\\n\t\t\t&& [ ! -f $(DEPS_DIR)/$(1)/configure ]; then \\\n\t\techo \" AUTO  \" $(DEP_STR); \\\n\t\tcd $(DEPS_DIR)/$(1) && autoreconf -Wall -vif -I m4; \\\n\tfi\n\t- $(verbose) if [ -f $(DEPS_DIR)/$(DEP_NAME)/configure ]; then \\\n\t\techo \" CONF  \" $(DEP_STR); \\\n\t\tcd $(DEPS_DIR)/$(DEP_NAME) && ./configure; \\\n\tfi\nifeq ($(filter $(1),$(NO_AUTOPATCH)),)\n\t$(verbose) $$(MAKE) --no-print-directory autopatch-$(DEP_NAME)\nendif\n\n.PHONY: autopatch-$(call dep_name,$1)\n\nautopatch-$(call dep_name,$1)::\n\t$(verbose) if [ \"$1\" = \"elixir\" -a \"$(ELIXIR_PATCH)\" ]; then \\\n\t\tln -s lib/elixir/ebin $(DEPS_DIR)/elixir/; \\\n\telse \\\n\t\t$$(call dep_autopatch,$(call dep_name,$1)) \\\n\tfi\nendef\n\n$(foreach dep,$(BUILD_DEPS) $(DEPS),$(eval $(call dep_target,$(dep))))\n\nifndef IS_APP\nclean:: clean-apps\n\nclean-apps:\n\t$(verbose) set -e; for dep in $(ALL_APPS_DIRS) ; do \\\n\t\t$(MAKE) -C $$dep clean IS_APP=1; \\\n\tdone\n\ndistclean:: distclean-apps\n\ndistclean-apps:\n\t$(verbose) set -e; for dep in $(ALL_APPS_DIRS) ; do \\\n\t\t$(MAKE) -C $$dep distclean IS_APP=1; \\\n\tdone\nendif\n\nifndef SKIP_DEPS\ndistclean:: distclean-deps\n\ndistclean-deps:\n\t$(gen_verbose) rm -rf $(DEPS_DIR)\nendif\n\nifeq ($(CACHE_DEPS),1)\ncacheclean:: cacheclean-git cacheclean-hex\n\ncacheclean-git:\n\t$(gen_verbose) rm -rf $(CACHE_DIR)/git\n\ncacheclean-hex:\n\t$(gen_verbose) rm -rf $(CACHE_DIR)/hex\nendif\n\n# Forward-declare variables used in core/deps-tools.mk. This is required\n# in case plugins use them.\n\nERLANG_MK_RECURSIVE_DEPS_LIST = $(ERLANG_MK_TMP)/recursive-deps-list.log\nERLANG_MK_RECURSIVE_DOC_DEPS_LIST = $(ERLANG_MK_TMP)/recursive-doc-deps-list.log\nERLANG_MK_RECURSIVE_REL_DEPS_LIST = $(ERLANG_MK_TMP)/recursive-rel-deps-list.log\nERLANG_MK_RECURSIVE_TEST_DEPS_LIST = $(ERLANG_MK_TMP)/recursive-test-deps-list.log\nERLANG_MK_RECURSIVE_SHELL_DEPS_LIST = $(ERLANG_MK_TMP)/recursive-shell-deps-list.log\n\nERLANG_MK_QUERY_DEPS_FILE = $(ERLANG_MK_TMP)/query-deps.log\nERLANG_MK_QUERY_DOC_DEPS_FILE = $(ERLANG_MK_TMP)/query-doc-deps.log\nERLANG_MK_QUERY_REL_DEPS_FILE = $(ERLANG_MK_TMP)/query-rel-deps.log\nERLANG_MK_QUERY_TEST_DEPS_FILE = $(ERLANG_MK_TMP)/query-test-deps.log\nERLANG_MK_QUERY_SHELL_DEPS_FILE = $(ERLANG_MK_TMP)/query-shell-deps.log\n\n# Copyright (c) 2024, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: beam-cache-restore-app beam-cache-restore-test clean-beam-cache distclean-beam-cache\n\nBEAM_CACHE_DIR ?= $(ERLANG_MK_TMP)/beam-cache\nPROJECT_BEAM_CACHE_DIR = $(BEAM_CACHE_DIR)/$(PROJECT)\n\nclean:: clean-beam-cache\n\nclean-beam-cache:\n\t$(verbose) rm -rf $(PROJECT_BEAM_CACHE_DIR)\n\ndistclean:: distclean-beam-cache\n\n$(PROJECT_BEAM_CACHE_DIR):\n\t$(verbose) mkdir -p $(PROJECT_BEAM_CACHE_DIR)\n\ndistclean-beam-cache:\n\t$(gen_verbose) rm -rf $(BEAM_CACHE_DIR)\n\nbeam-cache-restore-app: | $(PROJECT_BEAM_CACHE_DIR)\n\t$(verbose) rm -rf $(PROJECT_BEAM_CACHE_DIR)/ebin-test\nifneq ($(wildcard ebin/),)\n\t$(verbose) mv ebin/ $(PROJECT_BEAM_CACHE_DIR)/ebin-test\nendif\nifneq ($(wildcard $(PROJECT_BEAM_CACHE_DIR)/ebin-app),)\n\t$(gen_verbose) mv $(PROJECT_BEAM_CACHE_DIR)/ebin-app ebin/\nelse\n\t$(verbose) $(MAKE) --no-print-directory clean-app\nendif\n\nbeam-cache-restore-test: | $(PROJECT_BEAM_CACHE_DIR)\n\t$(verbose) rm -rf $(PROJECT_BEAM_CACHE_DIR)/ebin-app\nifneq ($(wildcard ebin/),)\n\t$(verbose) mv ebin/ $(PROJECT_BEAM_CACHE_DIR)/ebin-app\nendif\nifneq ($(wildcard $(PROJECT_BEAM_CACHE_DIR)/ebin-test),)\n\t$(gen_verbose) mv $(PROJECT_BEAM_CACHE_DIR)/ebin-test ebin/\nelse\n\t$(verbose) $(MAKE) --no-print-directory clean-app\nendif\n\n# Copyright (c) 2013-2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: clean-app\n\n# Configuration.\n\nERLC_OPTS ?= -Werror +debug_info +warn_export_vars +warn_shadow_vars \\\n\t+warn_obsolete_guard # +bin_opt_info +warn_export_all +warn_missing_spec\nCOMPILE_FIRST ?=\nCOMPILE_FIRST_PATHS = $(addprefix src/,$(addsuffix .erl,$(COMPILE_FIRST)))\nERLC_EXCLUDE ?=\nERLC_EXCLUDE_PATHS = $(addprefix src/,$(addsuffix .erl,$(ERLC_EXCLUDE)))\n\nERLC_ASN1_OPTS ?=\n\nERLC_MIB_OPTS ?=\nCOMPILE_MIB_FIRST ?=\nCOMPILE_MIB_FIRST_PATHS = $(addprefix mibs/,$(addsuffix .mib,$(COMPILE_MIB_FIRST)))\n\n# Verbosity.\n\napp_verbose_0 = @echo \" APP   \" $(PROJECT);\napp_verbose_2 = set -x;\napp_verbose = $(app_verbose_$(V))\n\nappsrc_verbose_0 = @echo \" APP   \" $(PROJECT).app.src;\nappsrc_verbose_2 = set -x;\nappsrc_verbose = $(appsrc_verbose_$(V))\n\nmakedep_verbose_0 = @echo \" DEPEND\" $(PROJECT).d;\nmakedep_verbose_2 = set -x;\nmakedep_verbose = $(makedep_verbose_$(V))\n\nerlc_verbose_0 = @echo \" ERLC  \" $(filter-out $(patsubst %,%.erl,$(ERLC_EXCLUDE)),\\\n\t$(filter %.erl %.core,$(?F)));\nerlc_verbose_2 = set -x;\nerlc_verbose = $(erlc_verbose_$(V))\n\nxyrl_verbose_0 = @echo \" XYRL  \" $(filter %.xrl %.yrl,$(?F));\nxyrl_verbose_2 = set -x;\nxyrl_verbose = $(xyrl_verbose_$(V))\n\nasn1_verbose_0 = @echo \" ASN1  \" $(filter %.asn1,$(?F));\nasn1_verbose_2 = set -x;\nasn1_verbose = $(asn1_verbose_$(V))\n\nmib_verbose_0 = @echo \" MIB   \" $(filter %.bin %.mib,$(?F));\nmib_verbose_2 = set -x;\nmib_verbose = $(mib_verbose_$(V))\n\nifneq ($(wildcard src/),)\n\n# Targets.\n\napp:: $(if $(wildcard ebin/test),beam-cache-restore-app) deps\n\t$(verbose) $(MAKE) --no-print-directory $(PROJECT).d\n\t$(verbose) $(MAKE) --no-print-directory app-build\n\nifeq ($(wildcard src/$(PROJECT_MOD).erl),)\ndefine app_file\n{application, '$(PROJECT)', [\n\t{description, \"$(PROJECT_DESCRIPTION)\"},\n\t{vsn, \"$(PROJECT_VERSION)\"},$(if $(IS_DEP),\n\t{id$(comma)$(space)\"$(1)\"}$(comma))\n\t{modules, [$(call comma_list,$(2))]},\n\t{registered, []},\n\t{applications, [$(call comma_list,kernel stdlib $(OTP_DEPS) $(LOCAL_DEPS) $(OPTIONAL_DEPS) $(foreach dep,$(DEPS),$(call dep_name,$(dep))))]},\n\t{optional_applications, [$(call comma_list,$(OPTIONAL_DEPS))]},\n\t{env, $(subst \\,\\\\,$(PROJECT_ENV))}$(if $(findstring {,$(PROJECT_APP_EXTRA_KEYS)),$(comma)$(newline)$(tab)$(subst \\,\\\\,$(PROJECT_APP_EXTRA_KEYS)),)\n]}.\nendef\nelse\ndefine app_file\n{application, '$(PROJECT)', [\n\t{description, \"$(PROJECT_DESCRIPTION)\"},\n\t{vsn, \"$(PROJECT_VERSION)\"},$(if $(IS_DEP),\n\t{id$(comma)$(space)\"$(1)\"}$(comma))\n\t{modules, [$(call comma_list,$(2))]},\n\t{registered, [$(call comma_list,$(PROJECT)_sup $(PROJECT_REGISTERED))]},\n\t{applications, [$(call comma_list,kernel stdlib $(OTP_DEPS) $(LOCAL_DEPS) $(OPTIONAL_DEPS) $(foreach dep,$(DEPS),$(call dep_name,$(dep))))]},\n\t{optional_applications, [$(call comma_list,$(OPTIONAL_DEPS))]},\n\t{mod, {$(PROJECT_MOD), []}},\n\t{env, $(subst \\,\\\\,$(PROJECT_ENV))}$(if $(findstring {,$(PROJECT_APP_EXTRA_KEYS)),$(comma)$(newline)$(tab)$(subst \\,\\\\,$(PROJECT_APP_EXTRA_KEYS)),)\n]}.\nendef\nendif\n\napp-build: ebin/$(PROJECT).app\n\t$(verbose) :\n\n# Source files.\n\nALL_SRC_FILES := $(sort $(call core_find,src/,*))\n\nERL_FILES := $(filter %.erl,$(ALL_SRC_FILES))\nCORE_FILES := $(filter %.core,$(ALL_SRC_FILES))\n\n# ASN.1 files.\n\nifneq ($(wildcard asn1/),)\nASN1_FILES = $(sort $(call core_find,asn1/,*.asn1))\nERL_FILES += $(addprefix src/,$(patsubst %.asn1,%.erl,$(notdir $(ASN1_FILES))))\n\ndefine compile_asn1\n\t$(verbose) mkdir -p include/\n\t$(asn1_verbose) erlc -v -I include/ -o asn1/ +noobj $(ERLC_ASN1_OPTS) $(1)\n\t$(verbose) mv asn1/*.erl src/\n\t-$(verbose) mv asn1/*.hrl include/\n\t$(verbose) mv asn1/*.asn1db include/\nendef\n\n$(PROJECT).d:: $(ASN1_FILES)\n\t$(if $(strip $?),$(call compile_asn1,$?))\nendif\n\n# SNMP MIB files.\n\nifneq ($(wildcard mibs/),)\nMIB_FILES = $(sort $(call core_find,mibs/,*.mib))\n\n$(PROJECT).d:: $(COMPILE_MIB_FIRST_PATHS) $(MIB_FILES)\n\t$(verbose) mkdir -p include/ priv/mibs/\n\t$(mib_verbose) erlc -v $(ERLC_MIB_OPTS) -o priv/mibs/ -I priv/mibs/ $?\n\t$(mib_verbose) erlc -o include/ -- $(addprefix priv/mibs/,$(patsubst %.mib,%.bin,$(notdir $?)))\nendif\n\n# Leex and Yecc files.\n\nXRL_FILES := $(filter %.xrl,$(ALL_SRC_FILES))\nXRL_ERL_FILES = $(addprefix src/,$(patsubst %.xrl,%.erl,$(notdir $(XRL_FILES))))\nERL_FILES += $(XRL_ERL_FILES)\n\nYRL_FILES := $(filter %.yrl,$(ALL_SRC_FILES))\nYRL_ERL_FILES = $(addprefix src/,$(patsubst %.yrl,%.erl,$(notdir $(YRL_FILES))))\nERL_FILES += $(YRL_ERL_FILES)\n\n$(PROJECT).d:: $(XRL_FILES) $(YRL_FILES)\n\t$(if $(strip $?),$(xyrl_verbose) erlc -v -o src/ $(YRL_ERLC_OPTS) $?)\n\n# Erlang and Core Erlang files.\n\ndefine makedep.erl\n\tE = ets:new(makedep, [bag]),\n\tG = digraph:new([acyclic]),\n\tErlFiles = lists:usort(string:tokens(\"$(ERL_FILES)\", \" \")),\n\tDepsDir = \"$(call core_native_path,$(DEPS_DIR))\",\n\tAppsDir = \"$(call core_native_path,$(APPS_DIR))\",\n\tDepsDirsSrc = \"$(if $(wildcard $(DEPS_DIR)/*/src), $(call core_native_path,$(wildcard $(DEPS_DIR)/*/src)))\",\n\tDepsDirsInc = \"$(if $(wildcard $(DEPS_DIR)/*/include), $(call core_native_path,$(wildcard $(DEPS_DIR)/*/include)))\",\n\tAppsDirsSrc = \"$(if $(wildcard $(APPS_DIR)/*/src), $(call core_native_path,$(wildcard $(APPS_DIR)/*/src)))\",\n\tAppsDirsInc = \"$(if $(wildcard $(APPS_DIR)/*/include), $(call core_native_path,$(wildcard $(APPS_DIR)/*/include)))\",\n\tDepsDirs = lists:usort(string:tokens(DepsDirsSrc++DepsDirsInc, \" \")),\n\tAppsDirs = lists:usort(string:tokens(AppsDirsSrc++AppsDirsInc, \" \")),\n\tModules = [{list_to_atom(filename:basename(F, \".erl\")), F} || F <- ErlFiles],\n\tAdd = fun (Mod, Dep) ->\n\t\tcase lists:keyfind(Dep, 1, Modules) of\n\t\t\tfalse -> ok;\n\t\t\t{_, DepFile} ->\n\t\t\t\t{_, ModFile} = lists:keyfind(Mod, 1, Modules),\n\t\t\t\tets:insert(E, {ModFile, DepFile}),\n\t\t\t\tdigraph:add_vertex(G, Mod),\n\t\t\t\tdigraph:add_vertex(G, Dep),\n\t\t\t\tdigraph:add_edge(G, Mod, Dep)\n\t\tend\n\tend,\n\tAddHd = fun (F, Mod, DepFile) ->\n\t\tcase file:open(DepFile, [read]) of\n\t\t\t{error, enoent} ->\n\t\t\t\tok;\n\t\t\t{ok, Fd} ->\n\t\t\t\t{_, ModFile} = lists:keyfind(Mod, 1, Modules),\n\t\t\t\tcase ets:match(E, {ModFile, DepFile}) of\n\t\t\t\t\t[] ->\n\t\t\t\t\t\tets:insert(E, {ModFile, DepFile}),\n\t\t\t\t\t\tF(F, Fd, Mod,0);\n\t\t\t\t\t_ -> ok\n\t\t\t\tend\n\t\tend\n\tend,\n\tSearchHrl = fun\n\t\tF(_Hrl, []) -> {error,enoent};\n\t\tF(Hrl, [Dir|Dirs]) ->\n\t\t\tHrlF = filename:join([Dir,Hrl]),\n\t\t\tcase filelib:is_file(HrlF) of\n\t\t\t\ttrue  ->\n\t\t\t\t{ok, HrlF};\n\t\t\t\tfalse -> F(Hrl,Dirs)\n\t\t\tend\n\tend,\n\tAttr = fun\n\t\t(_F, Mod, behavior, Dep) ->\n\t\t\tAdd(Mod, Dep);\n\t\t(_F, Mod, behaviour, Dep) ->\n\t\t\tAdd(Mod, Dep);\n\t\t(_F, Mod, compile, {parse_transform, Dep}) ->\n\t\t\tAdd(Mod, Dep);\n\t\t(_F, Mod, compile, Opts) when is_list(Opts) ->\n\t\t\tcase proplists:get_value(parse_transform, Opts) of\n\t\t\t\tundefined -> ok;\n\t\t\t\tDep -> Add(Mod, Dep)\n\t\t\tend;\n\t\t(F, Mod, include, Hrl) ->\n\t\t\tcase SearchHrl(Hrl, [\"src\", \"include\",AppsDir,DepsDir]++AppsDirs++DepsDirs) of\n\t\t\t\t{ok, FoundHrl} -> AddHd(F, Mod, FoundHrl);\n\t\t\t\t{error, _} -> false\n\t\t\tend;\n\t\t(F, Mod, include_lib, Hrl) ->\n\t\t\tcase SearchHrl(Hrl, [\"src\", \"include\",AppsDir,DepsDir]++AppsDirs++DepsDirs) of\n\t\t\t\t{ok, FoundHrl} -> AddHd(F, Mod, FoundHrl);\n\t\t\t\t{error, _} -> false\n\t\t\tend;\n\t\t(F, Mod, import, {Imp, _}) ->\n\t\t\tIsFile =\n\t\t\t\tcase lists:keyfind(Imp, 1, Modules) of\n\t\t\t\t\tfalse -> false;\n\t\t\t\t\t{_, FilePath} -> filelib:is_file(FilePath)\n\t\t\t\tend,\n\t\t\tcase IsFile of\n\t\t\t\tfalse -> ok;\n\t\t\t\ttrue -> Add(Mod, Imp)\n\t\t\tend;\n\t\t(_, _, _, _) -> ok\n\tend,\n\tMakeDepend = fun\n\t\t(F, Fd, Mod, StartLocation) ->\n\t\t\tcase io:parse_erl_form(Fd, undefined, StartLocation) of\n\t\t\t\t{ok, AbsData, EndLocation} ->\n\t\t\t\t\tcase AbsData of\n\t\t\t\t\t\t{attribute, _, Key, Value} ->\n\t\t\t\t\t\t\tAttr(F, Mod, Key, Value),\n\t\t\t\t\t\t\tF(F, Fd, Mod, EndLocation);\n\t\t\t\t\t\t_ -> F(F, Fd, Mod, EndLocation)\n\t\t\t\t\tend;\n\t\t\t\t{eof, _ } -> file:close(Fd);\n\t\t\t\t{error, ErrorDescription } ->\n\t\t\t\t\tfile:close(Fd);\n\t\t\t\t{error, ErrorInfo, ErrorLocation} ->\n\t\t\t\t\tF(F, Fd, Mod, ErrorLocation)\n\t\t\tend,\n\t\t\tok\n\tend,\n\t[begin\n\t\tMod = list_to_atom(filename:basename(F, \".erl\")),\n\t\tcase file:open(F, [read]) of\n\t\t\t{ok, Fd} -> MakeDepend(MakeDepend, Fd, Mod,0);\n\t\t\t{error, enoent} -> ok\n\t\tend\n\tend || F <- ErlFiles],\n\tDepend = sofs:to_external(sofs:relation_to_family(sofs:relation(ets:tab2list(E)))),\n\tCompileFirst = [X || X <- lists:reverse(digraph_utils:topsort(G)), [] =/= digraph:in_neighbours(G, X)],\n\tTargetPath = fun(Target) ->\n\t\tcase lists:keyfind(Target, 1, Modules) of\n\t\t\tfalse -> \"\";\n\t\t\t{_, DepFile} ->\n\t\t\t\tDirSubname = tl(string:tokens(filename:dirname(DepFile), \"/\")),\n\t\t\t\tstring:join(DirSubname ++ [atom_to_list(Target)], \"/\")\n\t\tend\n\tend,\n\tOutput0 = [\n\t\t\"# Generated by Erlang.mk. Edit at your own risk!\\n\\n\",\n\t\t[[F, \"::\", [[\" \", D] || D <- Deps], \"; @touch \\$$@\\n\"] || {F, Deps} <- Depend],\n\t\t\"\\nCOMPILE_FIRST +=\", [[\" \", TargetPath(CF)] || CF <- CompileFirst], \"\\n\"\n\t],\n\tOutput = case \"é\" of\n\t\t[233] -> unicode:characters_to_binary(Output0);\n\t\t_ -> Output0\n\tend,\n\tok = file:write_file(\"$(1)\", Output),\n\thalt()\nendef\n\nifeq ($(if $(NO_MAKEDEP),$(wildcard $(PROJECT).d),),)\n$(PROJECT).d:: $(ERL_FILES) $(call core_find,include/,*.hrl) $(MAKEFILE_LIST)\n\t$(makedep_verbose) $(call erlang,$(call makedep.erl,$@))\nendif\n\nifeq ($(IS_APP)$(IS_DEP),)\nifneq ($(words $(ERL_FILES) $(CORE_FILES) $(ASN1_FILES) $(MIB_FILES) $(XRL_FILES) $(YRL_FILES)),0)\n# Rebuild everything when the Makefile changes.\n$(ERLANG_MK_TMP)/last-makefile-change: $(MAKEFILE_LIST) | $(ERLANG_MK_TMP)\n\t$(verbose) if test -f $@; then \\\n\t\ttouch $(ERL_FILES) $(CORE_FILES) $(ASN1_FILES) $(MIB_FILES) $(XRL_FILES) $(YRL_FILES); \\\n\t\ttouch -c $(PROJECT).d; \\\n\tfi\n\t$(verbose) touch $@\n\n$(ERL_FILES) $(CORE_FILES) $(ASN1_FILES) $(MIB_FILES) $(XRL_FILES) $(YRL_FILES):: $(ERLANG_MK_TMP)/last-makefile-change\nebin/$(PROJECT).app:: $(ERLANG_MK_TMP)/last-makefile-change\nendif\nendif\n\n$(PROJECT).d::\n\t$(verbose) :\n\ninclude $(wildcard $(PROJECT).d)\n\nebin/$(PROJECT).app:: ebin/\n\nebin/:\n\t$(verbose) mkdir -p ebin/\n\ndefine compile_erl\n\t$(erlc_verbose) erlc -v $(if $(IS_DEP),$(filter-out -Werror,$(ERLC_OPTS)),$(ERLC_OPTS)) -o ebin/ \\\n\t\t-pa ebin/ -I include/ $(filter-out $(ERLC_EXCLUDE_PATHS),$(COMPILE_FIRST_PATHS) $(1))\nendef\n\ndefine validate_app_file\n\tcase file:consult(\"ebin/$(PROJECT).app\") of\n\t\t{ok, _} -> halt();\n\t\t_ -> halt(1)\n\tend\nendef\n\nebin/$(PROJECT).app:: $(ERL_FILES) $(CORE_FILES) $(wildcard src/$(PROJECT).app.src)\n\t$(eval FILES_TO_COMPILE := $(filter-out src/$(PROJECT).app.src,$?))\n\t$(if $(strip $(FILES_TO_COMPILE)),$(call compile_erl,$(FILES_TO_COMPILE)))\n# Older git versions do not have the --first-parent flag. Do without in that case.\n\t$(eval GITDESCRIBE := $(shell git describe --dirty --abbrev=7 --tags --always --first-parent 2>/dev/null \\\n\t\t|| git describe --dirty --abbrev=7 --tags --always 2>/dev/null || true))\n\t$(eval MODULES := $(patsubst %,'%',$(sort $(notdir $(basename \\\n\t\t$(filter-out $(ERLC_EXCLUDE_PATHS),$(ERL_FILES) $(CORE_FILES) $(BEAM_FILES)))))))\nifeq ($(wildcard src/$(PROJECT).app.src),)\n\t$(app_verbose) printf '$(subst %,%%,$(subst $(newline),\\n,$(subst ','\\'',$(call app_file,$(GITDESCRIBE),$(MODULES)))))' \\\n\t\t> ebin/$(PROJECT).app\n\t$(verbose) if ! $(call erlang,$(call validate_app_file)); then \\\n\t\techo \"The .app file produced is invalid. Please verify the value of PROJECT_ENV.\" >&2; \\\n\t\texit 1; \\\n\tfi\nelse\n\t$(verbose) if [ -z \"$$(grep -e '^[^%]*{\\s*modules\\s*,' src/$(PROJECT).app.src)\" ]; then \\\n\t\techo \"Empty modules entry not found in $(PROJECT).app.src. Please consult the erlang.mk documentation for instructions.\" >&2; \\\n\t\texit 1; \\\n\tfi\n\t$(appsrc_verbose) cat src/$(PROJECT).app.src \\\n\t\t| sed \"s/{[[:space:]]*modules[[:space:]]*,[[:space:]]*\\[\\]}/{modules, \\[$(call comma_list,$(MODULES))\\]}/\" \\\n\t\t| sed \"s/{id,[[:space:]]*\\\"git\\\"}/{id, \\\"$(subst /,\\/,$(GITDESCRIBE))\\\"}/\" \\\n\t\t> ebin/$(PROJECT).app\nendif\nifneq ($(wildcard src/$(PROJECT).appup),)\n\t$(verbose) cp src/$(PROJECT).appup ebin/\nendif\n\nclean:: clean-app\n\nclean-app:\n\t$(gen_verbose) rm -rf $(PROJECT).d ebin/ priv/mibs/ $(XRL_ERL_FILES) $(YRL_ERL_FILES) \\\n\t\t$(addprefix include/,$(patsubst %.mib,%.hrl,$(notdir $(MIB_FILES)))) \\\n\t\t$(addprefix include/,$(patsubst %.asn1,%.hrl,$(notdir $(ASN1_FILES)))) \\\n\t\t$(addprefix include/,$(patsubst %.asn1,%.asn1db,$(notdir $(ASN1_FILES)))) \\\n\t\t$(addprefix src/,$(patsubst %.asn1,%.erl,$(notdir $(ASN1_FILES))))\n\nendif\n\n# Copyright (c) 2016, Loïc Hoguin <essen@ninenines.eu>\n# Copyright (c) 2015, Viktor Söderqvist <viktor@zuiderkwast.se>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: docs-deps\n\n# Configuration.\n\nALL_DOC_DEPS_DIRS = $(addprefix $(DEPS_DIR)/,$(DOC_DEPS))\n\n# Targets.\n\n$(foreach dep,$(DOC_DEPS),$(eval $(call dep_target,$(dep))))\n\nifneq ($(SKIP_DEPS),)\ndoc-deps:\nelse\ndoc-deps: $(ALL_DOC_DEPS_DIRS)\n\t$(verbose) set -e; for dep in $(ALL_DOC_DEPS_DIRS) ; do $(MAKE) -C $$dep IS_DEP=1; done\nendif\n\n# Copyright (c) 2015-2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: rel-deps\n\n# Configuration.\n\nALL_REL_DEPS_DIRS = $(addprefix $(DEPS_DIR)/,$(REL_DEPS))\n\n# Targets.\n\n$(foreach dep,$(REL_DEPS),$(eval $(call dep_target,$(dep))))\n\nifneq ($(SKIP_DEPS),)\nrel-deps:\nelse\nrel-deps: $(ALL_REL_DEPS_DIRS)\n\t$(verbose) set -e; for dep in $(ALL_REL_DEPS_DIRS) ; do $(MAKE) -C $$dep; done\nendif\n\n# Copyright (c) 2015-2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: test-deps test-dir test-build clean-test-dir\n\n# Configuration.\n\nTEST_DIR ?= $(CURDIR)/test\n\nALL_TEST_DEPS_DIRS = $(addprefix $(DEPS_DIR)/,$(TEST_DEPS))\n\nTEST_ERLC_OPTS ?= +debug_info +warn_export_vars +warn_shadow_vars +warn_obsolete_guard\nTEST_ERLC_OPTS += -DTEST=1\n\n# Targets.\n\n$(foreach dep,$(TEST_DEPS),$(eval $(call dep_target,$(dep))))\n\nifneq ($(SKIP_DEPS),)\ntest-deps:\nelse\ntest-deps: $(ALL_TEST_DEPS_DIRS)\n\t$(verbose) set -e; for dep in $(ALL_TEST_DEPS_DIRS) ; do \\\n\t\tif [ -z \"$(strip $(FULL))\" ] && [ ! -L $$dep ] && [ -f $$dep/ebin/dep_built ]; then \\\n\t\t\t:; \\\n\t\telse \\\n\t\t\t$(MAKE) -C $$dep IS_DEP=1; \\\n\t\t\tif [ ! -L $$dep ] && [ -d $$dep/ebin ]; then touch $$dep/ebin/dep_built; fi; \\\n\t\tfi \\\n\tdone\nendif\n\nifneq ($(wildcard $(TEST_DIR)),)\ntest-dir: $(ERLANG_MK_TMP)/$(PROJECT).last-testdir-build\n\t@:\n\ntest_erlc_verbose_0 = @echo \" ERLC  \" $(filter-out $(patsubst %,%.erl,$(ERLC_EXCLUDE)),\\\n\t$(filter %.erl %.core,$(notdir $(FILES_TO_COMPILE))));\ntest_erlc_verbose_2 = set -x;\ntest_erlc_verbose = $(test_erlc_verbose_$(V))\n\ndefine compile_test_erl\n\t$(test_erlc_verbose) erlc -v $(TEST_ERLC_OPTS) -o $(TEST_DIR) \\\n\t\t-pa ebin/ -I include/ $(1)\nendef\n\nERL_TEST_FILES = $(call core_find,$(TEST_DIR)/,*.erl)\n\n$(ERLANG_MK_TMP)/$(PROJECT).last-testdir-build: $(ERL_TEST_FILES) $(MAKEFILE_LIST)\n# When we have to recompile files in src/ the .d file always gets rebuilt.\n# Therefore we want to ignore it when rebuilding test files.\n\t$(eval FILES_TO_COMPILE := $(if $(filter $(filter-out $(PROJECT).d,$(MAKEFILE_LIST)),$?),$(filter $(ERL_TEST_FILES),$^),$(filter $(ERL_TEST_FILES),$?)))\n\t$(if $(strip $(FILES_TO_COMPILE)),$(call compile_test_erl,$(FILES_TO_COMPILE)) && touch $@)\nendif\n\ntest-build:: IS_TEST=1\ntest-build:: ERLC_OPTS=$(TEST_ERLC_OPTS)\ntest-build:: $(if $(wildcard src),$(if $(wildcard ebin/test),,beam-cache-restore-test)) $(if $(IS_APP),,deps test-deps)\n# We already compiled everything when IS_APP=1.\nifndef IS_APP\nifneq ($(wildcard src),)\n\t$(verbose) $(MAKE) --no-print-directory $(PROJECT).d ERLC_OPTS=\"$(call escape_dquotes,$(TEST_ERLC_OPTS))\"\n\t$(verbose) $(MAKE) --no-print-directory app-build ERLC_OPTS=\"$(call escape_dquotes,$(TEST_ERLC_OPTS))\"\n\t$(gen_verbose) touch ebin/test\nendif\nifneq ($(wildcard $(TEST_DIR)),)\n\t$(verbose) $(MAKE) --no-print-directory test-dir ERLC_OPTS=\"$(call escape_dquotes,$(TEST_ERLC_OPTS))\"\nendif\nendif\n\n# Roughly the same as test-build, but when IS_APP=1.\n# We only care about compiling the current application.\nifdef IS_APP\ntest-build-app:: ERLC_OPTS=$(TEST_ERLC_OPTS)\ntest-build-app:: deps test-deps\nifneq ($(wildcard src),)\n\t$(verbose) $(MAKE) --no-print-directory $(PROJECT).d ERLC_OPTS=\"$(call escape_dquotes,$(TEST_ERLC_OPTS))\"\n\t$(verbose) $(MAKE) --no-print-directory app-build ERLC_OPTS=\"$(call escape_dquotes,$(TEST_ERLC_OPTS))\"\n\t$(gen_verbose) touch ebin/test\nendif\nifneq ($(wildcard $(TEST_DIR)),)\n\t$(verbose) $(MAKE) --no-print-directory test-dir ERLC_OPTS=\"$(call escape_dquotes,$(TEST_ERLC_OPTS))\"\nendif\nendif\n\nclean:: clean-test-dir\n\nclean-test-dir:\nifneq ($(wildcard $(TEST_DIR)/*.beam),)\n\t$(gen_verbose) rm -f $(TEST_DIR)/*.beam $(ERLANG_MK_TMP)/$(PROJECT).last-testdir-build\nendif\n\n# Copyright (c) 2015-2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: rebar.config\n\n# We strip out -Werror because we don't want to fail due to\n# warnings when used as a dependency.\n\ncompat_prepare_erlc_opts = $(shell echo \"$1\" | sed 's/, */,/g')\n\ndefine compat_convert_erlc_opts\n$(if $(filter-out -Werror,$1),\\\n\t$(if $(findstring +,$1),\\\n\t\t$(shell echo $1 | cut -b 2-)))\nendef\n\ndefine compat_erlc_opts_to_list\n[$(call comma_list,$(foreach o,$(call compat_prepare_erlc_opts,$1),$(call compat_convert_erlc_opts,$o)))]\nendef\n\ndefine compat_rebar_config\n{deps, [\n$(call comma_list,$(foreach d,$(DEPS),\\\n\t$(if $(filter hex,$(call dep_fetch,$d)),\\\n\t\t{$(call dep_name,$d)$(comma)\"$(call dep_repo,$d)\"},\\\n\t\t{$(call dep_name,$d)$(comma)\".*\"$(comma){git,\"$(call dep_repo,$d)\"$(comma)\"$(call dep_commit,$d)\"}})))\n]}.\n{erl_opts, $(call compat_erlc_opts_to_list,$(ERLC_OPTS))}.\nendef\n\nrebar.config:\n\t$(gen_verbose) $(call core_render,compat_rebar_config,rebar.config)\n\n# Copyright (c) 2015-2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\nifeq ($(filter asciideck,$(DEPS) $(DOC_DEPS)),asciideck)\n\n.PHONY: asciidoc asciidoc-guide asciidoc-manual install-asciidoc distclean-asciidoc-guide distclean-asciidoc-manual\n\n# Core targets.\n\ndocs:: asciidoc\n\ndistclean:: distclean-asciidoc-guide distclean-asciidoc-manual\n\n# Plugin-specific targets.\n\nasciidoc: asciidoc-guide asciidoc-manual\n\n# User guide.\n\nifeq ($(wildcard doc/src/guide/book.asciidoc),)\nasciidoc-guide:\nelse\nasciidoc-guide: distclean-asciidoc-guide doc-deps\n\ta2x -v -f pdf doc/src/guide/book.asciidoc && mv doc/src/guide/book.pdf doc/guide.pdf\n\ta2x -v -f chunked doc/src/guide/book.asciidoc && mv doc/src/guide/book.chunked/ doc/html/\n\ndistclean-asciidoc-guide:\n\t$(gen_verbose) rm -rf doc/html/ doc/guide.pdf\nendif\n\n# Man pages.\n\nASCIIDOC_MANUAL_FILES := $(wildcard doc/src/manual/*.asciidoc)\n\nifeq ($(ASCIIDOC_MANUAL_FILES),)\nasciidoc-manual:\nelse\n\n# Configuration.\n\nMAN_INSTALL_PATH ?= /usr/local/share/man\nMAN_SECTIONS ?= 3 7\nMAN_PROJECT ?= $(shell echo $(PROJECT) | sed 's/^./\\U&\\E/')\nMAN_VERSION ?= $(PROJECT_VERSION)\n\n# Plugin-specific targets.\n\ndefine asciidoc2man.erl\ntry\n\t[begin\n\t\tio:format(\" ADOC   ~s~n\", [F]),\n\t\tok = asciideck:to_manpage(asciideck:parse_file(F), #{\n\t\t\tcompress => gzip,\n\t\t\toutdir => filename:dirname(F),\n\t\t\textra2 => \"$(MAN_PROJECT) $(MAN_VERSION)\",\n\t\t\textra3 => \"$(MAN_PROJECT) Function Reference\"\n\t\t})\n\tend || F <- [$(shell echo $(addprefix $(comma)\\\",$(addsuffix \\\",$1)) | sed 's/^.//')]],\n\thalt(0)\ncatch C:E$(if $V,:S) ->\n\tio:format(\"Exception: ~p:~p~n$(if $V,Stacktrace: ~p~n)\", [C, E$(if $V,$(comma) S)]),\n\thalt(1)\nend.\nendef\n\nasciidoc-manual:: doc-deps\n\nasciidoc-manual:: $(ASCIIDOC_MANUAL_FILES)\n\t$(gen_verbose) $(call erlang,$(call asciidoc2man.erl,$?))\n\t$(verbose) $(foreach s,$(MAN_SECTIONS),mkdir -p doc/man$s/ && mv doc/src/manual/*.$s.gz doc/man$s/;)\n\ninstall-docs:: install-asciidoc\n\ninstall-asciidoc: asciidoc-manual\n\t$(foreach s,$(MAN_SECTIONS),\\\n\t\tmkdir -p $(MAN_INSTALL_PATH)/man$s/ && \\\n\t\tinstall -g `id -g` -o `id -u` -m 0644 doc/man$s/*.gz $(MAN_INSTALL_PATH)/man$s/;)\n\ndistclean-asciidoc-manual:\n\t$(gen_verbose) rm -rf $(addprefix doc/man,$(MAN_SECTIONS))\nendif\nendif\n\n# Copyright (c) 2014-2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: bootstrap bootstrap-lib bootstrap-rel new list-templates\n\n# Core targets.\n\nhelp::\n\t$(verbose) printf \"%s\\n\" \"\" \\\n\t\t\"Bootstrap targets:\" \\\n\t\t\"  bootstrap          Generate a skeleton of an OTP application\" \\\n\t\t\"  bootstrap-lib      Generate a skeleton of an OTP library\" \\\n\t\t\"  bootstrap-rel      Generate the files needed to build a release\" \\\n\t\t\"  new-app in=NAME    Create a new local OTP application NAME\" \\\n\t\t\"  new-lib in=NAME    Create a new local OTP library NAME\" \\\n\t\t\"  new t=TPL n=NAME   Generate a module NAME based on the template TPL\" \\\n\t\t\"  new t=T n=N in=APP Generate a module NAME based on the template TPL in APP\" \\\n\t\t\"  list-templates     List available templates\"\n\n# Bootstrap templates.\n\ndefine bs_appsrc\n{application, $p, [\n\t{description, \"\"},\n\t{vsn, \"0.1.0\"},\n\t{id, \"git\"},\n\t{modules, []},\n\t{registered, []},\n\t{applications, [\n\t\tkernel,\n\t\tstdlib\n\t]},\n\t{mod, {$p_app, []}},\n\t{env, []}\n]}.\nendef\n\ndefine bs_appsrc_lib\n{application, $p, [\n\t{description, \"\"},\n\t{vsn, \"0.1.0\"},\n\t{id, \"git\"},\n\t{modules, []},\n\t{registered, []},\n\t{applications, [\n\t\tkernel,\n\t\tstdlib\n\t]}\n]}.\nendef\n\n# To prevent autocompletion issues with ZSH, we add \"include erlang.mk\"\n# separately during the actual bootstrap.\ndefine bs_Makefile\nPROJECT = $p\nPROJECT_DESCRIPTION = New project\nPROJECT_VERSION = 0.1.0\n$(if $(SP),\n# Whitespace to be used when creating files from templates.\nSP = $(SP)\n)\nendef\n\ndefine bs_apps_Makefile\nPROJECT = $p\nPROJECT_DESCRIPTION = New project\nPROJECT_VERSION = 0.1.0\n$(if $(SP),\n# Whitespace to be used when creating files from templates.\nSP = $(SP)\n)\n# Make sure we know where the applications are located.\nROOT_DIR ?= $(call core_relpath,$(dir $(ERLANG_MK_FILENAME)),$(APPS_DIR)/app)\nAPPS_DIR ?= ..\nDEPS_DIR ?= $(call core_relpath,$(DEPS_DIR),$(APPS_DIR)/app)\n\ninclude $$(ROOT_DIR)/erlang.mk\nendef\n\ndefine bs_app\n-module($p_app).\n-behaviour(application).\n\n-export([start/2]).\n-export([stop/1]).\n\nstart(_Type, _Args) ->\n\t$p_sup:start_link().\n\nstop(_State) ->\n\tok.\nendef\n\ndefine bs_relx_config\n{release, {$p_release, \"1\"}, [$p, sasl, runtime_tools]}.\n{dev_mode, false}.\n{include_erts, true}.\n{extended_start_script, true}.\n{sys_config, \"config/sys.config\"}.\n{vm_args, \"config/vm.args\"}.\nendef\n\ndefine bs_sys_config\n[\n].\nendef\n\ndefine bs_vm_args\n-name $p@127.0.0.1\n-setcookie $p\n-heart\nendef\n\n# Normal templates.\n\ndefine tpl_supervisor\n-module($(n)).\n-behaviour(supervisor).\n\n-export([start_link/0]).\n-export([init/1]).\n\nstart_link() ->\n\tsupervisor:start_link({local, ?MODULE}, ?MODULE, []).\n\ninit([]) ->\n\tProcs = [],\n\t{ok, {{one_for_one, 1, 5}, Procs}}.\nendef\n\ndefine tpl_gen_server\n-module($(n)).\n-behaviour(gen_server).\n\n%% API.\n-export([start_link/0]).\n\n%% gen_server.\n-export([init/1]).\n-export([handle_call/3]).\n-export([handle_cast/2]).\n-export([handle_info/2]).\n-export([terminate/2]).\n-export([code_change/3]).\n\n-record(state, {\n}).\n\n%% API.\n\n-spec start_link() -> {ok, pid()}.\nstart_link() ->\n\tgen_server:start_link(?MODULE, [], []).\n\n%% gen_server.\n\ninit([]) ->\n\t{ok, #state{}}.\n\nhandle_call(_Request, _From, State) ->\n\t{reply, ignored, State}.\n\nhandle_cast(_Msg, State) ->\n\t{noreply, State}.\n\nhandle_info(_Info, State) ->\n\t{noreply, State}.\n\nterminate(_Reason, _State) ->\n\tok.\n\ncode_change(_OldVsn, State, _Extra) ->\n\t{ok, State}.\nendef\n\ndefine tpl_module\n-module($(n)).\n-export([]).\nendef\n\ndefine tpl_cowboy_http\n-module($(n)).\n-behaviour(cowboy_http_handler).\n\n-export([init/3]).\n-export([handle/2]).\n-export([terminate/3]).\n\n-record(state, {\n}).\n\ninit(_, Req, _Opts) ->\n\t{ok, Req, #state{}}.\n\nhandle(Req, State=#state{}) ->\n\t{ok, Req2} = cowboy_req:reply(200, Req),\n\t{ok, Req2, State}.\n\nterminate(_Reason, _Req, _State) ->\n\tok.\nendef\n\ndefine tpl_gen_fsm\n-module($(n)).\n-behaviour(gen_fsm).\n\n%% API.\n-export([start_link/0]).\n\n%% gen_fsm.\n-export([init/1]).\n-export([state_name/2]).\n-export([handle_event/3]).\n-export([state_name/3]).\n-export([handle_sync_event/4]).\n-export([handle_info/3]).\n-export([terminate/3]).\n-export([code_change/4]).\n\n-record(state, {\n}).\n\n%% API.\n\n-spec start_link() -> {ok, pid()}.\nstart_link() ->\n\tgen_fsm:start_link(?MODULE, [], []).\n\n%% gen_fsm.\n\ninit([]) ->\n\t{ok, state_name, #state{}}.\n\nstate_name(_Event, StateData) ->\n\t{next_state, state_name, StateData}.\n\nhandle_event(_Event, StateName, StateData) ->\n\t{next_state, StateName, StateData}.\n\nstate_name(_Event, _From, StateData) ->\n\t{reply, ignored, state_name, StateData}.\n\nhandle_sync_event(_Event, _From, StateName, StateData) ->\n\t{reply, ignored, StateName, StateData}.\n\nhandle_info(_Info, StateName, StateData) ->\n\t{next_state, StateName, StateData}.\n\nterminate(_Reason, _StateName, _StateData) ->\n\tok.\n\ncode_change(_OldVsn, StateName, StateData, _Extra) ->\n\t{ok, StateName, StateData}.\nendef\n\ndefine tpl_gen_statem\n-module($(n)).\n-behaviour(gen_statem).\n\n%% API.\n-export([start_link/0]).\n\n%% gen_statem.\n-export([callback_mode/0]).\n-export([init/1]).\n-export([state_name/3]).\n-export([handle_event/4]).\n-export([terminate/3]).\n-export([code_change/4]).\n\n-record(state, {\n}).\n\n%% API.\n\n-spec start_link() -> {ok, pid()}.\nstart_link() ->\n\tgen_statem:start_link(?MODULE, [], []).\n\n%% gen_statem.\n\ncallback_mode() ->\n\tstate_functions.\n\ninit([]) ->\n\t{ok, state_name, #state{}}.\n\nstate_name(_EventType, _EventData, StateData) ->\n\t{next_state, state_name, StateData}.\n\nhandle_event(_EventType, _EventData, StateName, StateData) ->\n\t{next_state, StateName, StateData}.\n\nterminate(_Reason, _StateName, _StateData) ->\n\tok.\n\ncode_change(_OldVsn, StateName, StateData, _Extra) ->\n\t{ok, StateName, StateData}.\nendef\n\ndefine tpl_cowboy_loop\n-module($(n)).\n-behaviour(cowboy_loop_handler).\n\n-export([init/3]).\n-export([info/3]).\n-export([terminate/3]).\n\n-record(state, {\n}).\n\ninit(_, Req, _Opts) ->\n\t{loop, Req, #state{}, 5000, hibernate}.\n\ninfo(_Info, Req, State) ->\n\t{loop, Req, State, hibernate}.\n\nterminate(_Reason, _Req, _State) ->\n\tok.\nendef\n\ndefine tpl_cowboy_rest\n-module($(n)).\n\n-export([init/3]).\n-export([content_types_provided/2]).\n-export([get_html/2]).\n\ninit(_, _Req, _Opts) ->\n\t{upgrade, protocol, cowboy_rest}.\n\ncontent_types_provided(Req, State) ->\n\t{[{{<<\"text\">>, <<\"html\">>, '*'}, get_html}], Req, State}.\n\nget_html(Req, State) ->\n\t{<<\"<html><body>This is REST!</body></html>\">>, Req, State}.\nendef\n\ndefine tpl_cowboy_ws\n-module($(n)).\n-behaviour(cowboy_websocket_handler).\n\n-export([init/3]).\n-export([websocket_init/3]).\n-export([websocket_handle/3]).\n-export([websocket_info/3]).\n-export([websocket_terminate/3]).\n\n-record(state, {\n}).\n\ninit(_, _, _) ->\n\t{upgrade, protocol, cowboy_websocket}.\n\nwebsocket_init(_, Req, _Opts) ->\n\tReq2 = cowboy_req:compact(Req),\n\t{ok, Req2, #state{}}.\n\nwebsocket_handle({text, Data}, Req, State) ->\n\t{reply, {text, Data}, Req, State};\nwebsocket_handle({binary, Data}, Req, State) ->\n\t{reply, {binary, Data}, Req, State};\nwebsocket_handle(_Frame, Req, State) ->\n\t{ok, Req, State}.\n\nwebsocket_info(_Info, Req, State) ->\n\t{ok, Req, State}.\n\nwebsocket_terminate(_Reason, _Req, _State) ->\n\tok.\nendef\n\ndefine tpl_ranch_protocol\n-module($(n)).\n-behaviour(ranch_protocol).\n\n-export([start_link/4]).\n-export([init/4]).\n\n-type opts() :: [].\n-export_type([opts/0]).\n\n-record(state, {\n\tsocket :: inet:socket(),\n\ttransport :: module()\n}).\n\nstart_link(Ref, Socket, Transport, Opts) ->\n\tPid = spawn_link(?MODULE, init, [Ref, Socket, Transport, Opts]),\n\t{ok, Pid}.\n\n-spec init(ranch:ref(), inet:socket(), module(), opts()) -> ok.\ninit(Ref, Socket, Transport, _Opts) ->\n\tok = ranch:accept_ack(Ref),\n\tloop(#state{socket=Socket, transport=Transport}).\n\nloop(State) ->\n\tloop(State).\nendef\n\n# Plugin-specific targets.\n\nifndef WS\nifdef SP\nWS = $(subst a,,a $(wordlist 1,$(SP),a a a a a a a a a a a a a a a a a a a a))\nelse\nWS = $(tab)\nendif\nendif\n\nbootstrap:\nifneq ($(wildcard src/),)\n\t$(error Error: src/ directory already exists)\nendif\n\t$(eval p := $(PROJECT))\n\t$(if $(shell echo $p | LC_ALL=C grep -x \"[a-z0-9_]*\"),,\\\n\t\t$(error Error: Invalid characters in the application name))\n\t$(eval n := $(PROJECT)_sup)\n\t$(verbose) $(call core_render,bs_Makefile,Makefile)\n\t$(verbose) echo \"include erlang.mk\" >> Makefile\n\t$(verbose) mkdir src/\nifdef LEGACY\n\t$(verbose) $(call core_render,bs_appsrc,src/$(PROJECT).app.src)\nendif\n\t$(verbose) $(call core_render,bs_app,src/$(PROJECT)_app.erl)\n\t$(verbose) $(call core_render,tpl_supervisor,src/$(PROJECT)_sup.erl)\n\nbootstrap-lib:\nifneq ($(wildcard src/),)\n\t$(error Error: src/ directory already exists)\nendif\n\t$(eval p := $(PROJECT))\n\t$(if $(shell echo $p | LC_ALL=C grep -x \"[a-z0-9_]*\"),,\\\n\t\t$(error Error: Invalid characters in the application name))\n\t$(verbose) $(call core_render,bs_Makefile,Makefile)\n\t$(verbose) echo \"include erlang.mk\" >> Makefile\n\t$(verbose) mkdir src/\nifdef LEGACY\n\t$(verbose) $(call core_render,bs_appsrc_lib,src/$(PROJECT).app.src)\nendif\n\nbootstrap-rel:\nifneq ($(wildcard relx.config),)\n\t$(error Error: relx.config already exists)\nendif\nifneq ($(wildcard config/),)\n\t$(error Error: config/ directory already exists)\nendif\n\t$(eval p := $(PROJECT))\n\t$(verbose) $(call core_render,bs_relx_config,relx.config)\n\t$(verbose) mkdir config/\n\t$(verbose) $(call core_render,bs_sys_config,config/sys.config)\n\t$(verbose) $(call core_render,bs_vm_args,config/vm.args)\n\t$(verbose) awk '/^include erlang.mk/ && !ins {print \"REL_DEPS += relx\";ins=1};{print}' Makefile > Makefile.bak\n\t$(verbose) mv Makefile.bak Makefile\n\nnew-app:\nifndef in\n\t$(error Usage: $(MAKE) new-app in=APP)\nendif\nifneq ($(wildcard $(APPS_DIR)/$in),)\n\t$(error Error: Application $in already exists)\nendif\n\t$(eval p := $(in))\n\t$(if $(shell echo $p | LC_ALL=C grep -x \"[a-z0-9_]*\"),,\\\n\t\t$(error Error: Invalid characters in the application name))\n\t$(eval n := $(in)_sup)\n\t$(verbose) mkdir -p $(APPS_DIR)/$p/src/\n\t$(verbose) $(call core_render,bs_apps_Makefile,$(APPS_DIR)/$p/Makefile)\nifdef LEGACY\n\t$(verbose) $(call core_render,bs_appsrc,$(APPS_DIR)/$p/src/$p.app.src)\nendif\n\t$(verbose) $(call core_render,bs_app,$(APPS_DIR)/$p/src/$p_app.erl)\n\t$(verbose) $(call core_render,tpl_supervisor,$(APPS_DIR)/$p/src/$p_sup.erl)\n\nnew-lib:\nifndef in\n\t$(error Usage: $(MAKE) new-lib in=APP)\nendif\nifneq ($(wildcard $(APPS_DIR)/$in),)\n\t$(error Error: Application $in already exists)\nendif\n\t$(eval p := $(in))\n\t$(if $(shell echo $p | LC_ALL=C grep -x \"[a-z0-9_]*\"),,\\\n\t\t$(error Error: Invalid characters in the application name))\n\t$(verbose) mkdir -p $(APPS_DIR)/$p/src/\n\t$(verbose) $(call core_render,bs_apps_Makefile,$(APPS_DIR)/$p/Makefile)\nifdef LEGACY\n\t$(verbose) $(call core_render,bs_appsrc_lib,$(APPS_DIR)/$p/src/$p.app.src)\nendif\n\nnew:\nifeq ($(wildcard src/)$(in),)\n\t$(error Error: src/ directory does not exist)\nendif\nifndef t\n\t$(error Usage: $(MAKE) new t=TEMPLATE n=NAME [in=APP])\nendif\nifndef n\n\t$(error Usage: $(MAKE) new t=TEMPLATE n=NAME [in=APP])\nendif\nifdef in\n\t$(verbose) $(call core_render,tpl_$(t),$(APPS_DIR)/$(in)/src/$(n).erl)\nelse\n\t$(verbose) $(call core_render,tpl_$(t),src/$(n).erl)\nendif\n\nlist-templates:\n\t$(verbose) @echo Available templates:\n\t$(verbose) printf \"    %s\\n\" $(sort $(patsubst tpl_%,%,$(filter tpl_%,$(.VARIABLES))))\n\n# Copyright (c) 2014-2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: clean-c_src distclean-c_src-env\n\n# Configuration.\n\nC_SRC_DIR ?= $(CURDIR)/c_src\nC_SRC_ENV ?= $(C_SRC_DIR)/env.mk\nC_SRC_OUTPUT ?= $(CURDIR)/priv/$(PROJECT)\nC_SRC_TYPE ?= shared\n\n# System type and C compiler/flags.\n\nifeq ($(PLATFORM),msys2)\n\tC_SRC_OUTPUT_EXECUTABLE_EXTENSION ?= .exe\n\tC_SRC_OUTPUT_SHARED_EXTENSION ?= .dll\n\tC_SRC_OUTPUT_STATIC_EXTENSION ?= .lib\nelse\n\tC_SRC_OUTPUT_EXECUTABLE_EXTENSION ?=\n\tC_SRC_OUTPUT_SHARED_EXTENSION ?= .so\n\tC_SRC_OUTPUT_STATIC_EXTENSION ?= .a\nendif\n\nifeq ($(C_SRC_TYPE),shared)\n\tC_SRC_OUTPUT_FILE = $(C_SRC_OUTPUT)$(C_SRC_OUTPUT_SHARED_EXTENSION)\nelse ifeq ($(C_SRC_TYPE),static)\n\tC_SRC_OUTPUT_FILE = $(C_SRC_OUTPUT)$(C_SRC_OUTPUT_STATIC_EXTENSION)\nelse\n\tC_SRC_OUTPUT_FILE = $(C_SRC_OUTPUT)$(C_SRC_OUTPUT_EXECUTABLE_EXTENSION)\nendif\n\nRANLIB ?= ranlib\nARFLAGS ?= cr\n\nifeq ($(PLATFORM),msys2)\n# We hardcode the compiler used on MSYS2. The default CC=cc does\n# not produce working code. The \"gcc\" MSYS2 package also doesn't.\n\tCC = /mingw64/bin/gcc\n\texport CC\n\tCFLAGS ?= -O3 -std=c99 -finline-functions -Wall -Wmissing-prototypes\n\tCXXFLAGS ?= -O3 -finline-functions -Wall\nelse ifeq ($(PLATFORM),darwin)\n\tCC ?= cc\n\tCFLAGS ?= -O3 -std=c99 -Wall -Wmissing-prototypes\n\tCXXFLAGS ?= -O3 -Wall\n\tLDFLAGS ?= -flat_namespace -undefined suppress\nelse ifeq ($(PLATFORM),freebsd)\n\tCC ?= cc\n\tCFLAGS ?= -O3 -std=c99 -finline-functions -Wall -Wmissing-prototypes\n\tCXXFLAGS ?= -O3 -finline-functions -Wall\nelse ifeq ($(PLATFORM),linux)\n\tCC ?= gcc\n\tCFLAGS ?= -O3 -std=c99 -finline-functions -Wall -Wmissing-prototypes\n\tCXXFLAGS ?= -O3 -finline-functions -Wall\nendif\n\nifneq ($(PLATFORM),msys2)\n\tCFLAGS += -fPIC\n\tCXXFLAGS += -fPIC\nendif\n\nifeq ($(C_SRC_TYPE),static)\n\tCFLAGS += -DSTATIC_ERLANG_NIF=1\n\tCXXFLAGS += -DSTATIC_ERLANG_NIF=1\nendif\n\nCFLAGS += -I\"$(ERTS_INCLUDE_DIR)\" -I\"$(ERL_INTERFACE_INCLUDE_DIR)\"\nCXXFLAGS += -I\"$(ERTS_INCLUDE_DIR)\" -I\"$(ERL_INTERFACE_INCLUDE_DIR)\"\n\nLDLIBS += -L\"$(ERL_INTERFACE_LIB_DIR)\" -lei\n\n# Verbosity.\n\nc_verbose_0 = @echo \" C     \" $(filter-out $(notdir $(MAKEFILE_LIST) $(C_SRC_ENV)),$(^F));\nc_verbose = $(c_verbose_$(V))\n\ncpp_verbose_0 = @echo \" CPP   \" $(filter-out $(notdir $(MAKEFILE_LIST) $(C_SRC_ENV)),$(^F));\ncpp_verbose = $(cpp_verbose_$(V))\n\nlink_verbose_0 = @echo \" LD    \" $(@F);\nlink_verbose = $(link_verbose_$(V))\n\nar_verbose_0 = @echo \" AR    \" $(@F);\nar_verbose = $(ar_verbose_$(V))\n\nranlib_verbose_0 = @echo \" RANLIB\" $(@F);\nranlib_verbose = $(ranlib_verbose_$(V))\n\n# Targets.\n\nifeq ($(wildcard $(C_SRC_DIR)),)\nelse ifneq ($(wildcard $(C_SRC_DIR)/Makefile),)\napp:: app-c_src\n\ntest-build:: app-c_src\n\napp-c_src:\n\t$(MAKE) -C $(C_SRC_DIR)\n\nclean::\n\t$(MAKE) -C $(C_SRC_DIR) clean\n\nelse\n\nifeq ($(SOURCES),)\nSOURCES := $(sort $(foreach pat,*.c *.C *.cc *.cpp,$(call core_find,$(C_SRC_DIR)/,$(pat))))\nendif\nOBJECTS = $(addsuffix .o, $(basename $(SOURCES)))\n\nCOMPILE_C = $(c_verbose) $(CC) $(CFLAGS) $(CPPFLAGS) -c\nCOMPILE_CPP = $(cpp_verbose) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c\n\napp:: $(C_SRC_ENV) $(C_SRC_OUTPUT_FILE)\n\ntest-build:: $(C_SRC_ENV) $(C_SRC_OUTPUT_FILE)\n\nifneq ($(C_SRC_TYPE),static)\n$(C_SRC_OUTPUT_FILE): $(OBJECTS)\n\t$(verbose) mkdir -p $(dir $@)\n\t$(link_verbose) $(CC) $(OBJECTS) \\\n\t\t$(LDFLAGS) $(if $(filter $(C_SRC_TYPE),shared),-shared) $(LDLIBS) \\\n\t\t-o $(C_SRC_OUTPUT_FILE)\nelse\n$(C_SRC_OUTPUT_FILE): $(OBJECTS)\n\t$(verbose) mkdir -p $(dir $@)\n\t$(ar_verbose) $(AR) $(ARFLAGS) $(C_SRC_OUTPUT_FILE) $(OBJECTS)\n\t$(ranlib_verbose) $(RANLIB) $(C_SRC_OUTPUT_FILE)\nendif\n\n\n$(OBJECTS): $(MAKEFILE_LIST) $(C_SRC_ENV)\n\n%.o: %.c\n\t$(COMPILE_C) $(OUTPUT_OPTION) $<\n\n%.o: %.cc\n\t$(COMPILE_CPP) $(OUTPUT_OPTION) $<\n\n%.o: %.C\n\t$(COMPILE_CPP) $(OUTPUT_OPTION) $<\n\n%.o: %.cpp\n\t$(COMPILE_CPP) $(OUTPUT_OPTION) $<\n\nclean:: clean-c_src\n\nclean-c_src:\n\t$(gen_verbose) rm -f $(C_SRC_OUTPUT_FILE) $(OBJECTS)\n\nendif\n\nifneq ($(wildcard $(C_SRC_DIR)),)\nERL_ERTS_DIR = $(shell $(ERL) -eval 'io:format(\"~s~n\", [code:lib_dir(erts)]), halt().')\n\n$(C_SRC_ENV):\n\t$(verbose) $(ERL) -eval \"file:write_file(\\\"$(call core_native_path,$(C_SRC_ENV))\\\", \\\n\t\tio_lib:format( \\\n\t\t\t\\\"# Generated by Erlang.mk. Edit at your own risk!~n~n\\\" \\\n\t\t\t\\\"ERTS_INCLUDE_DIR ?= ~s/erts-~s/include/~n\\\" \\\n\t\t\t\\\"ERL_INTERFACE_INCLUDE_DIR ?= ~s~n\\\" \\\n\t\t\t\\\"ERL_INTERFACE_LIB_DIR ?= ~s~n\\\" \\\n\t\t\t\\\"ERTS_DIR ?= $(ERL_ERTS_DIR)~n\\\", \\\n\t\t\t[code:root_dir(), erlang:system_info(version), \\\n\t\t\tcode:lib_dir(erl_interface, include), \\\n\t\t\tcode:lib_dir(erl_interface, lib)])), \\\n\t\thalt().\"\n\ndistclean:: distclean-c_src-env\n\ndistclean-c_src-env:\n\t$(gen_verbose) rm -f $(C_SRC_ENV)\n\n-include $(C_SRC_ENV)\n\nifneq ($(ERL_ERTS_DIR),$(ERTS_DIR))\n$(shell rm -f $(C_SRC_ENV))\nendif\nendif\n\n# Templates.\n\ndefine bs_c_nif\n#include \"erl_nif.h\"\n\nstatic int loads = 0;\n\nstatic int load(ErlNifEnv* env, void** priv_data, ERL_NIF_TERM load_info)\n{\n\t/* Initialize private data. */\n\t*priv_data = NULL;\n\n\tloads++;\n\n\treturn 0;\n}\n\nstatic int upgrade(ErlNifEnv* env, void** priv_data, void** old_priv_data, ERL_NIF_TERM load_info)\n{\n\t/* Convert the private data to the new version. */\n\t*priv_data = *old_priv_data;\n\n\tloads++;\n\n\treturn 0;\n}\n\nstatic void unload(ErlNifEnv* env, void* priv_data)\n{\n\tif (loads == 1) {\n\t\t/* Destroy the private data. */\n\t}\n\n\tloads--;\n}\n\nstatic ERL_NIF_TERM hello(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{\n\tif (enif_is_atom(env, argv[0])) {\n\t\treturn enif_make_tuple2(env,\n\t\t\tenif_make_atom(env, \"hello\"),\n\t\t\targv[0]);\n\t}\n\n\treturn enif_make_tuple2(env,\n\t\tenif_make_atom(env, \"error\"),\n\t\tenif_make_atom(env, \"badarg\"));\n}\n\nstatic ErlNifFunc nif_funcs[] = {\n\t{\"hello\", 1, hello}\n};\n\nERL_NIF_INIT($n, nif_funcs, load, NULL, upgrade, unload)\nendef\n\ndefine bs_erl_nif\n-module($n).\n\n-export([hello/1]).\n\n-on_load(on_load/0).\non_load() ->\n\tPrivDir = case code:priv_dir(?MODULE) of\n\t\t{error, _} ->\n\t\t\tAppPath = filename:dirname(filename:dirname(code:which(?MODULE))),\n\t\t\tfilename:join(AppPath, \"priv\");\n\t\tPath ->\n\t\t\tPath\n\tend,\n\terlang:load_nif(filename:join(PrivDir, atom_to_list(?MODULE)), 0).\n\nhello(_) ->\n\terlang:nif_error({not_loaded, ?MODULE}).\nendef\n\nnew-nif:\nifneq ($(wildcard $(C_SRC_DIR)/$n.c),)\n\t$(error Error: $(C_SRC_DIR)/$n.c already exists)\nendif\nifneq ($(wildcard src/$n.erl),)\n\t$(error Error: src/$n.erl already exists)\nendif\nifndef n\n\t$(error Usage: $(MAKE) new-nif n=NAME [in=APP])\nendif\nifdef in\n\t$(verbose) $(MAKE) -C $(APPS_DIR)/$(in)/ new-nif n=$n in=\nelse\n\t$(verbose) mkdir -p $(C_SRC_DIR) src/\n\t$(verbose) $(call core_render,bs_c_nif,$(C_SRC_DIR)/$n.c)\n\t$(verbose) $(call core_render,bs_erl_nif,src/$n.erl)\nendif\n\n# Copyright (c) 2015-2017, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: ci ci-prepare ci-setup\n\nCI_OTP ?=\n\nifeq ($(strip $(CI_OTP)),)\nci::\nelse\n\nci:: $(addprefix ci-,$(CI_OTP))\n\nci-prepare: $(addprefix ci-prepare-,$(CI_OTP))\n\nci-setup::\n\t$(verbose) :\n\nci-extra::\n\t$(verbose) :\n\nci_verbose_0 = @echo \" CI    \" $(1);\nci_verbose = $(ci_verbose_$(V))\n\ndefine ci_target\nci-prepare-$1: $(KERL_INSTALL_DIR)/$2\n\t$(verbose) :\n\nci-$1: ci-prepare-$1\n\t$(verbose) $(MAKE) --no-print-directory clean\n\t$(ci_verbose) \\\n\t\tPATH=\"$(KERL_INSTALL_DIR)/$2/bin:$(PATH)\" \\\n\t\tCI_OTP_RELEASE=\"$1\" \\\n\t\tCT_OPTS=\"-label $1\" \\\n\t\tCI_VM=\"$3\" \\\n\t\t$(MAKE) ci-setup tests\n\t$(verbose) $(MAKE) --no-print-directory ci-extra\nendef\n\n$(foreach otp,$(CI_OTP),$(eval $(call ci_target,$(otp),$(otp),otp)))\n\n$(foreach otp,$(filter-out $(ERLANG_OTP),$(CI_OTP)),$(eval $(call kerl_otp_target,$(otp))))\n\nhelp::\n\t$(verbose) printf \"%s\\n\" \"\" \\\n\t\t\"Continuous Integration targets:\" \\\n\t\t\"  ci          Run '$(MAKE) tests' on all configured Erlang versions.\" \\\n\t\t\"\" \\\n\t\t\"The CI_OTP variable must be defined with the Erlang versions\" \\\n\t\t\"that must be tested. For example: CI_OTP = OTP-17.3.4 OTP-17.5.3\"\n\nendif\n\n# Copyright (c) 2020, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\nifdef CONCUERROR_TESTS\n\n.PHONY: concuerror distclean-concuerror\n\n# Configuration\n\nCONCUERROR_LOGS_DIR ?= $(CURDIR)/logs\nCONCUERROR_OPTS ?=\n\n# Core targets.\n\ncheck:: concuerror\n\nifndef KEEP_LOGS\ndistclean:: distclean-concuerror\nendif\n\n# Plugin-specific targets.\n\n$(ERLANG_MK_TMP)/Concuerror/bin/concuerror: | $(ERLANG_MK_TMP)\n\t$(verbose) git clone https://github.com/parapluu/Concuerror $(ERLANG_MK_TMP)/Concuerror\n\t$(verbose) $(MAKE) -C $(ERLANG_MK_TMP)/Concuerror\n\n$(CONCUERROR_LOGS_DIR):\n\t$(verbose) mkdir -p $(CONCUERROR_LOGS_DIR)\n\ndefine concuerror_html_report\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<title>Concuerror HTML report</title>\n</head>\n<body>\n<h1>Concuerror HTML report</h1>\n<p>Generated on $(concuerror_date)</p>\n<ul>\n$(foreach t,$(concuerror_targets),<li><a href=\"$(t).txt\">$(t)</a></li>)\n</ul>\n</body>\n</html>\nendef\n\nconcuerror: $(addprefix concuerror-,$(subst :,-,$(CONCUERROR_TESTS)))\n\t$(eval concuerror_date := $(shell date))\n\t$(eval concuerror_targets := $^)\n\t$(verbose) $(call core_render,concuerror_html_report,$(CONCUERROR_LOGS_DIR)/concuerror.html)\n\ndefine concuerror_target\n.PHONY: concuerror-$1-$2\n\nconcuerror-$1-$2: test-build | $(ERLANG_MK_TMP)/Concuerror/bin/concuerror $(CONCUERROR_LOGS_DIR)\n\t$(ERLANG_MK_TMP)/Concuerror/bin/concuerror \\\n\t\t--pa $(CURDIR)/ebin --pa $(TEST_DIR) \\\n\t\t-o $(CONCUERROR_LOGS_DIR)/concuerror-$1-$2.txt \\\n\t\t$$(CONCUERROR_OPTS) -m $1 -t $2\nendef\n\n$(foreach test,$(CONCUERROR_TESTS),$(eval $(call concuerror_target,$(firstword $(subst :, ,$(test))),$(lastword $(subst :, ,$(test))))))\n\ndistclean-concuerror:\n\t$(gen_verbose) rm -rf $(CONCUERROR_LOGS_DIR)\n\nendif\n\n# Copyright (c) 2013-2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: ct apps-ct distclean-ct\n\n# Configuration.\n\nCT_OPTS ?=\n\nifneq ($(wildcard $(TEST_DIR)),)\nifndef CT_SUITES\nCT_SUITES := $(sort $(subst _SUITE.erl,,$(notdir $(call core_find,$(TEST_DIR)/,*_SUITE.erl))))\nendif\nendif\nCT_SUITES ?=\nCT_LOGS_DIR ?= $(CURDIR)/logs\n\n# Core targets.\n\ntests:: ct\n\nifndef KEEP_LOGS\ndistclean:: distclean-ct\nendif\n\nhelp::\n\t$(verbose) printf \"%s\\n\" \"\" \\\n\t\t\"Common_test targets:\" \\\n\t\t\"  ct          Run all the common_test suites for this project\" \\\n\t\t\"\" \\\n\t\t\"All your common_test suites have their associated targets.\" \\\n\t\t\"A suite named http_SUITE can be ran using the ct-http target.\"\n\n# Plugin-specific targets.\n\nCT_RUN = ct_run \\\n\t-no_auto_compile \\\n\t-noinput \\\n\t-pa $(CURDIR)/ebin $(TEST_DIR) \\\n\t-dir $(TEST_DIR) \\\n\t-logdir $(CT_LOGS_DIR)\n\nifeq ($(CT_SUITES),)\nct: $(if $(IS_APP)$(ROOT_DIR),,apps-ct)\nelse\n# We do not run tests if we are in an apps/* with no test directory.\nifneq ($(IS_APP)$(wildcard $(TEST_DIR)),1)\nct: test-build $(if $(IS_APP)$(ROOT_DIR),,apps-ct)\n\t$(verbose) mkdir -p $(CT_LOGS_DIR)\n\t$(gen_verbose) $(CT_RUN) -sname ct_$(PROJECT) -suite $(addsuffix _SUITE,$(CT_SUITES)) $(CT_OPTS)\nendif\nendif\n\nifneq ($(ALL_APPS_DIRS),)\ndefine ct_app_target\napps-ct-$1: test-build\n\t$$(MAKE) -C $1 ct IS_APP=1\nendef\n\n$(foreach app,$(ALL_APPS_DIRS),$(eval $(call ct_app_target,$(app))))\n\napps-ct: $(addprefix apps-ct-,$(ALL_APPS_DIRS))\nendif\n\nifdef t\nifeq (,$(findstring :,$t))\nCT_EXTRA = -group $t\nelse\nt_words = $(subst :, ,$t)\nCT_EXTRA = -group $(firstword $(t_words)) -case $(lastword $(t_words))\nendif\nelse\nifdef c\nCT_EXTRA = -case $c\nelse\nCT_EXTRA =\nendif\nendif\n\ndefine ct_suite_target\nct-$1: test-build\n\t$$(verbose) mkdir -p $$(CT_LOGS_DIR)\n\t$$(gen_verbose_esc) $$(CT_RUN) -sname ct_$$(PROJECT) -suite $$(addsuffix _SUITE,$1) $$(CT_EXTRA) $$(CT_OPTS)\nendef\n\n$(foreach test,$(CT_SUITES),$(eval $(call ct_suite_target,$(test))))\n\ndistclean-ct:\n\t$(gen_verbose) rm -rf $(CT_LOGS_DIR)\n\n# Copyright (c) 2013-2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: plt distclean-plt dialyze\n\n# Configuration.\n\nDIALYZER_PLT ?= $(CURDIR)/.$(PROJECT).plt\nexport DIALYZER_PLT\n\nPLT_APPS ?=\nDIALYZER_DIRS ?= --src -r $(wildcard src) $(ALL_APPS_DIRS)\nDIALYZER_OPTS ?= -Werror_handling -Wunmatched_returns # -Wunderspecs\nDIALYZER_PLT_OPTS ?=\n\n# Core targets.\n\ncheck:: dialyze\n\ndistclean:: distclean-plt\n\nhelp::\n\t$(verbose) printf \"%s\\n\" \"\" \\\n\t\t\"Dialyzer targets:\" \\\n\t\t\"  plt         Build a PLT file for this project\" \\\n\t\t\"  dialyze     Analyze the project using Dialyzer\"\n\n# Plugin-specific targets.\n\ndefine filter_opts.erl\n\tOpts = init:get_plain_arguments(),\n\t{Filtered, _} = lists:foldl(fun\n\t\t(O,                         {Os, true}) -> {[O|Os], false};\n\t\t(O = \"-D\",                  {Os, _})    -> {[O|Os], true};\n\t\t(O = [\\\\$$-, \\\\$$D, _ | _], {Os, _})    -> {[O|Os], false};\n\t\t(O = \"-I\",                  {Os, _})    -> {[O|Os], true};\n\t\t(O = [\\\\$$-, \\\\$$I, _ | _], {Os, _})    -> {[O|Os], false};\n\t\t(O = \"-pa\",                 {Os, _})    -> {[O|Os], true};\n\t\t(_,                         Acc)        -> Acc\n\tend, {[], false}, Opts),\n\tio:format(\"~s~n\", [string:join(lists:reverse(Filtered), \" \")]),\n\thalt().\nendef\n\n# DIALYZER_PLT is a variable understood directly by Dialyzer.\n#\n# We append the path to erts at the end of the PLT. This works\n# because the PLT file is in the external term format and the\n# function binary_to_term/1 ignores any trailing data.\n$(DIALYZER_PLT): deps app\n\t$(eval DEPS_LOG := $(shell test -f $(ERLANG_MK_TMP)/deps.log && \\\n\t\twhile read p; do test -d $$p/ebin && echo $$p/ebin; done <$(ERLANG_MK_TMP)/deps.log))\n\t$(verbose) dialyzer --build_plt $(DIALYZER_PLT_OPTS) --apps \\\n\t\terts kernel stdlib $(PLT_APPS) $(OTP_DEPS) $(LOCAL_DEPS) $(DEPS_LOG) || test $$? -eq 2\n\t$(verbose) $(ERL) -eval 'io:format(\"~n~s~n\", [code:lib_dir(erts)]), halt().' >> $@\n\nplt: $(DIALYZER_PLT)\n\ndistclean-plt:\n\t$(gen_verbose) rm -f $(DIALYZER_PLT)\n\nifneq ($(wildcard $(DIALYZER_PLT)),)\ndialyze: $(if $(filter --src,$(DIALYZER_DIRS)),,deps app)\n\t$(verbose) if ! tail -n1 $(DIALYZER_PLT) | \\\n\t\tgrep -q \"^`$(ERL) -eval 'io:format(\"~s\", [code:lib_dir(erts)]), halt().'`$$\"; then \\\n\t\trm $(DIALYZER_PLT); \\\n\t\t$(MAKE) plt; \\\n\tfi\nelse\ndialyze: $(DIALYZER_PLT)\nendif\n\t$(verbose) dialyzer `$(ERL) \\\n\t\t-eval \"$(subst $(newline),,$(call escape_dquotes,$(call filter_opts.erl)))\" \\\n\t\t-extra $(ERLC_OPTS)` $(DIALYZER_DIRS) $(DIALYZER_OPTS) $(if $(wildcard ebin/),-pa ebin/)\n\n# Copyright (c) 2013-2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: distclean-edoc edoc\n\n# Configuration.\n\nEDOC_OPTS ?=\nEDOC_SRC_DIRS ?=\nEDOC_OUTPUT ?= doc\n\ndefine edoc.erl\n\tSrcPaths = lists:foldl(fun(P, Acc) ->\n\t\tfilelib:wildcard(atom_to_list(P) ++ \"/{src,c_src}\")\n\t\t++ lists:filter(fun(D) ->\n\t\t\tfilelib:is_dir(D)\n\t\tend, filelib:wildcard(atom_to_list(P) ++ \"/{src,c_src}/**\"))\n\t\t++ Acc\n\tend, [], [$(call comma_list,$(patsubst %,'%',$(call core_native_path,$(EDOC_SRC_DIRS))))]),\n\tDefaultOpts = [{dir, \"$(EDOC_OUTPUT)\"}, {source_path, SrcPaths}, {subpackages, false}],\n\tedoc:application($(1), \".\", [$(2)] ++ DefaultOpts),\n\thalt(0).\nendef\n\n# Core targets.\n\nifneq ($(strip $(EDOC_SRC_DIRS)$(wildcard doc/overview.edoc)),)\ndocs:: edoc\nendif\n\ndistclean:: distclean-edoc\n\n# Plugin-specific targets.\n\nedoc: distclean-edoc doc-deps\n\t$(gen_verbose) $(call erlang,$(call edoc.erl,$(PROJECT),$(EDOC_OPTS)))\n\ndistclean-edoc:\n\t$(gen_verbose) rm -f $(EDOC_OUTPUT)/*.css $(EDOC_OUTPUT)/*.html $(EDOC_OUTPUT)/*.png $(EDOC_OUTPUT)/edoc-info\n\n# Copyright (c) 2013-2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n# Configuration.\n\nDTL_FULL_PATH ?=\nDTL_PATH ?= templates/\nDTL_PREFIX ?=\nDTL_SUFFIX ?= _dtl\nDTL_OPTS ?=\n\n# Verbosity.\n\ndtl_verbose_0 = @echo \" DTL   \" $(filter %.dtl,$(?F));\ndtl_verbose = $(dtl_verbose_$(V))\n\n# Core targets.\n\nDTL_PATH := $(abspath $(DTL_PATH))\nDTL_FILES := $(sort $(call core_find,$(DTL_PATH),*.dtl))\n\nifneq ($(DTL_FILES),)\n\nDTL_NAMES   = $(addprefix $(DTL_PREFIX),$(addsuffix $(DTL_SUFFIX),$(DTL_FILES:$(DTL_PATH)/%.dtl=%)))\nDTL_MODULES = $(if $(DTL_FULL_PATH),$(subst /,_,$(DTL_NAMES)),$(notdir $(DTL_NAMES)))\nBEAM_FILES += $(addsuffix .beam,$(addprefix ebin/,$(DTL_MODULES)))\n\nifneq ($(words $(DTL_FILES)),0)\n# Rebuild templates when the Makefile changes.\n$(ERLANG_MK_TMP)/last-makefile-change-erlydtl: $(MAKEFILE_LIST) | $(ERLANG_MK_TMP)\n\t$(verbose) if test -f $@; then \\\n\t\ttouch $(DTL_FILES); \\\n\tfi\n\t$(verbose) touch $@\n\nebin/$(PROJECT).app:: $(ERLANG_MK_TMP)/last-makefile-change-erlydtl\nendif\n\ndefine erlydtl_compile.erl\n\t[begin\n\t\tModule0 = case \"$(strip $(DTL_FULL_PATH))\" of\n\t\t\t\"\" ->\n\t\t\t\tfilename:basename(F, \".dtl\");\n\t\t\t_ ->\n\t\t\t\t\"$(call core_native_path,$(DTL_PATH))/\" ++ F2 = filename:rootname(F, \".dtl\"),\n\t\t\t\tre:replace(F2, \"/\",  \"_\",  [{return, list}, global])\n\t\tend,\n\t\tModule = list_to_atom(\"$(DTL_PREFIX)\" ++ string:to_lower(Module0) ++ \"$(DTL_SUFFIX)\"),\n\t\tcase erlydtl:compile(F, Module, [$(DTL_OPTS)] ++ [{out_dir, \"ebin/\"}, return_errors]) of\n\t\t\tok -> ok;\n\t\t\t{ok, _} -> ok\n\t\tend\n\tend || F <- string:tokens(\"$(1)\", \" \")],\n\thalt().\nendef\n\nebin/$(PROJECT).app:: $(DTL_FILES) | ebin/\n\t$(if $(strip $?),\\\n\t\t$(dtl_verbose) $(call erlang,$(call erlydtl_compile.erl,$(call core_native_path,$?)),\\\n\t\t\t-pa ebin/))\n\nendif\n\n# Copyright (c) 2016, Loïc Hoguin <essen@ninenines.eu>\n# Copyright (c) 2014, Dave Cottlehuber <dch@skunkwerks.at>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: distclean-escript escript escript-zip\n\n# Configuration.\n\nESCRIPT_NAME ?= $(PROJECT)\nESCRIPT_FILE ?= $(ESCRIPT_NAME)\n\nESCRIPT_SHEBANG ?= /usr/bin/env escript\nESCRIPT_COMMENT ?= This is an -*- erlang -*- file\nESCRIPT_EMU_ARGS ?= -escript main $(ESCRIPT_NAME)\n\nESCRIPT_ZIP ?= 7z a -tzip -mx=9 -mtc=off $(if $(filter-out 0,$(V)),,> /dev/null)\nESCRIPT_ZIP_FILE ?= $(ERLANG_MK_TMP)/escript.zip\n\n# Core targets.\n\ndistclean:: distclean-escript\n\nhelp::\n\t$(verbose) printf \"%s\\n\" \"\" \\\n\t\t\"Escript targets:\" \\\n\t\t\"  escript     Build an executable escript archive\" \\\n\n# Plugin-specific targets.\n\nescript-zip:: FULL=1\nescript-zip:: deps app\n\t$(verbose) mkdir -p $(dir $(abspath $(ESCRIPT_ZIP_FILE)))\n\t$(verbose) rm -f $(abspath $(ESCRIPT_ZIP_FILE))\n\t$(gen_verbose) cd .. && $(ESCRIPT_ZIP) $(abspath $(ESCRIPT_ZIP_FILE)) $(PROJECT)/ebin/*\nifneq ($(DEPS),)\n\t$(verbose) cd $(DEPS_DIR) && $(ESCRIPT_ZIP) $(abspath $(ESCRIPT_ZIP_FILE)) \\\n\t\t$(subst $(DEPS_DIR)/,,$(addsuffix /*,$(wildcard \\\n\t\t\t$(addsuffix /ebin,$(shell cat $(ERLANG_MK_TMP)/deps.log)))))\nendif\n\nescript:: escript-zip\n\t$(gen_verbose) printf \"%s\\n\" \\\n\t\t\"#!$(ESCRIPT_SHEBANG)\" \\\n\t\t\"%% $(ESCRIPT_COMMENT)\" \\\n\t\t\"%%! $(ESCRIPT_EMU_ARGS)\" > $(ESCRIPT_FILE)\n\t$(verbose) cat $(abspath $(ESCRIPT_ZIP_FILE)) >> $(ESCRIPT_FILE)\n\t$(verbose) chmod +x $(ESCRIPT_FILE)\n\ndistclean-escript:\n\t$(gen_verbose) rm -f $(ESCRIPT_FILE) $(abspath $(ESCRIPT_ZIP_FILE))\n\n# Copyright (c) 2015-2016, Loïc Hoguin <essen@ninenines.eu>\n# Copyright (c) 2014, Enrique Fernandez <enrique.fernandez@erlang-solutions.com>\n# This file is contributed to erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: eunit apps-eunit\n\n# Configuration\n\nEUNIT_OPTS ?=\nEUNIT_ERL_OPTS ?=\nEUNIT_TEST_SPEC ?= $1\n\n# Core targets.\n\ntests:: eunit\n\nhelp::\n\t$(verbose) printf \"%s\\n\" \"\" \\\n\t\t\"EUnit targets:\" \\\n\t\t\"  eunit       Run all the EUnit tests for this project\"\n\n# Plugin-specific targets.\n\ndefine eunit.erl\n\t$(call cover.erl)\n\tCoverSetup(),\n\tcase eunit:test($(call EUNIT_TEST_SPEC,$1), [$(EUNIT_OPTS)]) of\n\t\tok -> ok;\n\t\terror -> halt(2)\n\tend,\n\tCoverExport(\"$(call core_native_path,$(COVER_DATA_DIR))/eunit.coverdata\"),\n\thalt()\nendef\n\nEUNIT_ERL_OPTS += -pa $(TEST_DIR) $(CURDIR)/ebin\n\nifdef t\nifeq (,$(findstring :,$(t)))\neunit: test-build cover-data-dir\n\t$(gen_verbose) $(call erlang,$(call eunit.erl,['$(t)']),$(EUNIT_ERL_OPTS))\nelse\neunit: test-build cover-data-dir\n\t$(gen_verbose) $(call erlang,$(call eunit.erl,fun $(t)/0),$(EUNIT_ERL_OPTS))\nendif\nelse\nEUNIT_EBIN_MODS = $(notdir $(basename $(ERL_FILES) $(BEAM_FILES)))\nEUNIT_TEST_MODS = $(notdir $(basename $(call core_find,$(TEST_DIR)/,*.erl)))\n\nEUNIT_MODS = $(foreach mod,$(EUNIT_EBIN_MODS) $(filter-out \\\n\t$(patsubst %,%_tests,$(EUNIT_EBIN_MODS)),$(EUNIT_TEST_MODS)),'$(mod)')\n\neunit: test-build $(if $(IS_APP)$(ROOT_DIR),,apps-eunit) cover-data-dir\nifneq ($(wildcard src/ $(TEST_DIR)),)\n\t$(gen_verbose) $(call erlang,$(call eunit.erl,[$(call comma_list,$(EUNIT_MODS))]),$(EUNIT_ERL_OPTS))\nendif\n\nifneq ($(ALL_APPS_DIRS),)\napps-eunit: test-build\n\t$(verbose) eunit_retcode=0 ; for app in $(ALL_APPS_DIRS); do $(MAKE) -C $$app eunit IS_APP=1; \\\n\t\t[ $$? -ne 0 ] && eunit_retcode=1 ; done ; \\\n\t\texit $$eunit_retcode\nendif\nendif\n\n# Copyright (c) 2020, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\nHEX_CORE_GIT ?= https://github.com/hexpm/hex_core\nHEX_CORE_COMMIT ?= v0.7.0\n\nPACKAGES += hex_core\npkg_hex_core_name = hex_core\npkg_hex_core_description = Reference implementation of Hex specifications\npkg_hex_core_homepage = $(HEX_CORE_GIT)\npkg_hex_core_fetch = git\npkg_hex_core_repo = $(HEX_CORE_GIT)\npkg_hex_core_commit = $(HEX_CORE_COMMIT)\n\n# We automatically depend on hex_core when the project isn't already.\n$(if $(filter hex_core,$(DEPS) $(BUILD_DEPS) $(DOC_DEPS) $(REL_DEPS) $(TEST_DEPS)),,\\\n\t$(eval $(call dep_target,hex_core)))\n\nhex-core: $(DEPS_DIR)/hex_core\n\t$(verbose) if [ ! -e $(DEPS_DIR)/hex_core/ebin/dep_built ]; then \\\n\t\t$(MAKE) -C $(DEPS_DIR)/hex_core IS_DEP=1; \\\n\t\ttouch $(DEPS_DIR)/hex_core/ebin/dep_built; \\\n\tfi\n\n# @todo This must also apply to fetching.\nHEX_CONFIG ?=\n\ndefine hex_config.erl\n\tbegin\n\t\tConfig0 = hex_core:default_config(),\n\t\tConfig0$(HEX_CONFIG)\n\tend\nendef\n\ndefine hex_user_create.erl\n\t{ok, _} = application:ensure_all_started(ssl),\n\t{ok, _} = application:ensure_all_started(inets),\n\tConfig = $(hex_config.erl),\n\tcase hex_api_user:create(Config, <<\"$(strip $1)\">>, <<\"$(strip $2)\">>, <<\"$(strip $3)\">>) of\n\t\t{ok, {201, _, #{<<\"email\">> := Email, <<\"url\">> := URL, <<\"username\">> := Username}}} ->\n\t\t\tio:format(\"User ~s (~s) created at ~s~n\"\n\t\t\t\t\"Please check your inbox for a confirmation email.~n\"\n\t\t\t\t\"You must confirm before you are allowed to publish packages.~n\",\n\t\t\t\t[Username, Email, URL]),\n\t\t\thalt(0);\n\t\t{ok, {Status, _, Errors}} ->\n\t\t\tio:format(\"Error ~b: ~0p~n\", [Status, Errors]),\n\t\t\thalt(80)\n\tend\nendef\n\n# The $(info ) call inserts a new line after the password prompt.\nhex-user-create: hex-core\n\t$(if $(HEX_USERNAME),,$(eval HEX_USERNAME := $(shell read -p \"Username: \" username; echo $$username)))\n\t$(if $(HEX_PASSWORD),,$(eval HEX_PASSWORD := $(shell stty -echo; read -p \"Password: \" password; stty echo; echo $$password) $(info )))\n\t$(if $(HEX_EMAIL),,$(eval HEX_EMAIL := $(shell read -p \"Email: \" email; echo $$email)))\n\t$(gen_verbose) $(call erlang,$(call hex_user_create.erl,$(HEX_USERNAME),$(HEX_PASSWORD),$(HEX_EMAIL)))\n\ndefine hex_key_add.erl\n\t{ok, _} = application:ensure_all_started(ssl),\n\t{ok, _} = application:ensure_all_started(inets),\n\tConfig = $(hex_config.erl),\n\tConfigF = Config#{api_key => iolist_to_binary([<<\"Basic \">>, base64:encode(<<\"$(strip $1):$(strip $2)\">>)])},\n\tPermissions = [\n\t\tcase string:split(P, <<\":\">>) of\n\t\t\t[D] -> #{domain => D};\n\t\t\t[D, R] -> #{domain => D, resource => R}\n\t\tend\n\t|| P <- string:split(<<\"$(strip $4)\">>, <<\",\">>, all)],\n\tcase hex_api_key:add(ConfigF, <<\"$(strip $3)\">>, Permissions) of\n\t\t{ok, {201, _, #{<<\"secret\">> := Secret}}} ->\n\t\t\tio:format(\"Key ~s created for user ~s~nSecret: ~s~n\"\n\t\t\t\t\"Please store the secret in a secure location, such as a password store.~n\"\n\t\t\t\t\"The secret will be requested for most Hex-related operations.~n\",\n\t\t\t\t[<<\"$(strip $3)\">>, <<\"$(strip $1)\">>, Secret]),\n\t\t\thalt(0);\n\t\t{ok, {Status, _, Errors}} ->\n\t\t\tio:format(\"Error ~b: ~0p~n\", [Status, Errors]),\n\t\t\thalt(81)\n\tend\nendef\n\nhex-key-add: hex-core\n\t$(if $(HEX_USERNAME),,$(eval HEX_USERNAME := $(shell read -p \"Username: \" username; echo $$username)))\n\t$(if $(HEX_PASSWORD),,$(eval HEX_PASSWORD := $(shell stty -echo; read -p \"Password: \" password; stty echo; echo $$password) $(info )))\n\t$(gen_verbose) $(call erlang,$(call hex_key_add.erl,$(HEX_USERNAME),$(HEX_PASSWORD),\\\n\t\t$(if $(name),$(name),$(shell hostname)-erlang-mk),\\\n\t\t$(if $(perm),$(perm),api)))\n\nHEX_TARBALL_EXTRA_METADATA ?=\n\n# @todo Check that we can += files\nHEX_TARBALL_FILES ?= \\\n\t$(wildcard early-plugins.mk) \\\n\t$(wildcard ebin/$(PROJECT).app) \\\n\t$(wildcard ebin/$(PROJECT).appup) \\\n\t$(wildcard $(notdir $(ERLANG_MK_FILENAME))) \\\n\t$(sort $(call core_find,include/,*.hrl)) \\\n\t$(wildcard LICENSE*) \\\n\t$(wildcard Makefile) \\\n\t$(wildcard plugins.mk) \\\n\t$(sort $(call core_find,priv/,*)) \\\n\t$(wildcard README*) \\\n\t$(wildcard rebar.config) \\\n\t$(sort $(call core_find,src/,*))\n\nHEX_TARBALL_OUTPUT_FILE ?= $(ERLANG_MK_TMP)/$(PROJECT).tar\n\n# @todo Need to check for rebar.config and/or the absence of DEPS to know\n# whether a project will work with Rebar.\n#\n# @todo contributors licenses links in HEX_TARBALL_EXTRA_METADATA\n\n# In order to build the requirements metadata we look into DEPS.\n# We do not require that the project use Hex dependencies, however\n# Hex.pm does require that the package name and version numbers\n# correspond to a real Hex package.\ndefine hex_tarball_create.erl\n\tFiles0 = [$(call comma_list,$(patsubst %,\"%\",$(HEX_TARBALL_FILES)))],\n\tRequirements0 = #{\n\t\t$(foreach d,$(DEPS),\n\t\t\t<<\"$(if $(subst hex,,$(call query_fetch_method,$d)),$d,$(if $(word 3,$(dep_$d)),$(word 3,$(dep_$d)),$d))\">> => #{\n\t\t\t\t<<\"app\">> => <<\"$d\">>,\n\t\t\t\t<<\"optional\">> => false,\n\t\t\t\t<<\"requirement\">> => <<\"$(call query_version,$d)\">>\n\t\t\t},)\n\t\t$(if $(DEPS),dummy => dummy)\n\t},\n\tRequirements = maps:remove(dummy, Requirements0),\n\tMetadata0 = #{\n\t\tapp => <<\"$(strip $(PROJECT))\">>,\n\t\tbuild_tools => [<<\"make\">>, <<\"rebar3\">>],\n\t\tdescription => <<\"$(strip $(PROJECT_DESCRIPTION))\">>,\n\t\tfiles => [unicode:characters_to_binary(F) || F <- Files0],\n\t\tname => <<\"$(strip $(PROJECT))\">>,\n\t\trequirements => Requirements,\n\t\tversion => <<\"$(strip $(PROJECT_VERSION))\">>\n\t},\n\tMetadata = Metadata0$(HEX_TARBALL_EXTRA_METADATA),\n\tFiles = [case file:read_file(F) of\n\t\t{ok, Bin} ->\n\t\t\t{F, Bin};\n\t\t{error, Reason} ->\n\t\t\tio:format(\"Error trying to open file ~0p: ~0p~n\", [F, Reason]),\n\t\t\thalt(82)\n\tend || F <- Files0],\n\tcase hex_tarball:create(Metadata, Files) of\n\t\t{ok, #{tarball := Tarball}} ->\n\t\t\tok = file:write_file(\"$(strip $(HEX_TARBALL_OUTPUT_FILE))\", Tarball),\n\t\t\thalt(0);\n\t\t{error, Reason} ->\n\t\t\tio:format(\"Error ~0p~n\", [Reason]),\n\t\t\thalt(83)\n\tend\nendef\n\nhex_tar_verbose_0 = @echo \" TAR    $(notdir $(ERLANG_MK_TMP))/$(@F)\";\nhex_tar_verbose_2 = set -x;\nhex_tar_verbose = $(hex_tar_verbose_$(V))\n\n$(HEX_TARBALL_OUTPUT_FILE): hex-core app\n\t$(hex_tar_verbose) $(call erlang,$(call hex_tarball_create.erl))\n\nhex-tarball-create: $(HEX_TARBALL_OUTPUT_FILE)\n\ndefine hex_release_publish_summary.erl\n\t{ok, Tarball} = erl_tar:open(\"$(strip $(HEX_TARBALL_OUTPUT_FILE))\", [read]),\n\tok = erl_tar:extract(Tarball, [{cwd, \"$(ERLANG_MK_TMP)\"}, {files, [\"metadata.config\"]}]),\n\t{ok, Metadata} = file:consult(\"$(ERLANG_MK_TMP)/metadata.config\"),\n\t#{\n\t\t<<\"name\">> := Name,\n\t\t<<\"version\">> := Version,\n\t\t<<\"files\">> := Files,\n\t\t<<\"requirements\">> := Deps\n\t} = maps:from_list(Metadata),\n\tio:format(\"Publishing ~s ~s~n  Dependencies:~n\", [Name, Version]),\n\tcase Deps of\n\t\t[] ->\n\t\t\tio:format(\"    (none)~n\");\n\t\t_ ->\n\t\t\t[begin\n\t\t\t\t#{<<\"app\">> := DA, <<\"requirement\">> := DR} = maps:from_list(D),\n\t\t\t\tio:format(\"    ~s ~s~n\", [DA, DR])\n\t\t\tend || {_, D} <- Deps]\n\tend,\n\tio:format(\"  Included files:~n\"),\n\t[io:format(\"    ~s~n\", [F]) || F <- Files],\n\tio:format(\"You may also review the contents of the tarball file.~n\"\n\t\t\"Please enter your secret key to proceed.~n\"),\n\thalt(0)\nendef\n\ndefine hex_release_publish.erl\n\t{ok, _} = application:ensure_all_started(ssl),\n\t{ok, _} = application:ensure_all_started(inets),\n\tConfig = $(hex_config.erl),\n\tConfigF = Config#{api_key => <<\"$(strip $1)\">>},\n\t{ok, Tarball} = file:read_file(\"$(strip $(HEX_TARBALL_OUTPUT_FILE))\"),\n\tcase hex_api_release:publish(ConfigF, Tarball, [{replace, $2}]) of\n\t\t{ok, {200, _, #{}}} ->\n\t\t\tio:format(\"Release replaced~n\"),\n\t\t\thalt(0);\n\t\t{ok, {201, _, #{}}} ->\n\t\t\tio:format(\"Release published~n\"),\n\t\t\thalt(0);\n\t\t{ok, {Status, _, Errors}} ->\n\t\t\tio:format(\"Error ~b: ~0p~n\", [Status, Errors]),\n\t\t\thalt(84)\n\tend\nendef\n\nhex-release-tarball: hex-core $(HEX_TARBALL_OUTPUT_FILE)\n\t$(verbose) $(call erlang,$(call hex_release_publish_summary.erl))\n\nhex-release-publish: hex-core hex-release-tarball\n\t$(if $(HEX_SECRET),,$(eval HEX_SECRET := $(shell stty -echo; read -p \"Secret: \" secret; stty echo; echo $$secret) $(info )))\n\t$(gen_verbose) $(call erlang,$(call hex_release_publish.erl,$(HEX_SECRET),false))\n\nhex-release-replace: hex-core hex-release-tarball\n\t$(if $(HEX_SECRET),,$(eval HEX_SECRET := $(shell stty -echo; read -p \"Secret: \" secret; stty echo; echo $$secret) $(info )))\n\t$(gen_verbose) $(call erlang,$(call hex_release_publish.erl,$(HEX_SECRET),true))\n\ndefine hex_release_delete.erl\n\t{ok, _} = application:ensure_all_started(ssl),\n\t{ok, _} = application:ensure_all_started(inets),\n\tConfig = $(hex_config.erl),\n\tConfigF = Config#{api_key => <<\"$(strip $1)\">>},\n\tcase hex_api_release:delete(ConfigF, <<\"$(strip $(PROJECT))\">>, <<\"$(strip $(PROJECT_VERSION))\">>) of\n\t\t{ok, {204, _, _}} ->\n\t\t\tio:format(\"Release $(strip $(PROJECT_VERSION)) deleted~n\"),\n\t\t\thalt(0);\n\t\t{ok, {Status, _, Errors}} ->\n\t\t\tio:format(\"Error ~b: ~0p~n\", [Status, Errors]),\n\t\t\thalt(85)\n\tend\nendef\n\nhex-release-delete: hex-core\n\t$(if $(HEX_SECRET),,$(eval HEX_SECRET := $(shell stty -echo; read -p \"Secret: \" secret; stty echo; echo $$secret) $(info )))\n\t$(gen_verbose) $(call erlang,$(call hex_release_delete.erl,$(HEX_SECRET)))\n\ndefine hex_release_retire.erl\n\t{ok, _} = application:ensure_all_started(ssl),\n\t{ok, _} = application:ensure_all_started(inets),\n\tConfig = $(hex_config.erl),\n\tConfigF = Config#{api_key => <<\"$(strip $1)\">>},\n\tParams = #{<<\"reason\">> => <<\"$(strip $3)\">>, <<\"message\">> => <<\"$(strip $4)\">>},\n\tcase hex_api_release:retire(ConfigF, <<\"$(strip $(PROJECT))\">>, <<\"$(strip $2)\">>, Params) of\n\t\t{ok, {204, _, _}} ->\n\t\t\tio:format(\"Release $(strip $2) has been retired~n\"),\n\t\t\thalt(0);\n\t\t{ok, {Status, _, Errors}} ->\n\t\t\tio:format(\"Error ~b: ~0p~n\", [Status, Errors]),\n\t\t\thalt(86)\n\tend\nendef\n\nhex-release-retire: hex-core\n\t$(if $(HEX_SECRET),,$(eval HEX_SECRET := $(shell stty -echo; read -p \"Secret: \" secret; stty echo; echo $$secret) $(info )))\n\t$(gen_verbose) $(call erlang,$(call hex_release_retire.erl,$(HEX_SECRET),\\\n\t\t$(if $(HEX_VERSION),$(HEX_VERSION),$(PROJECT_VERSION)),\\\n\t\t$(if $(HEX_REASON),$(HEX_REASON),invalid),\\\n\t\t$(HEX_MESSAGE)))\n\ndefine hex_release_unretire.erl\n\t{ok, _} = application:ensure_all_started(ssl),\n\t{ok, _} = application:ensure_all_started(inets),\n\tConfig = $(hex_config.erl),\n\tConfigF = Config#{api_key => <<\"$(strip $1)\">>},\n\tcase hex_api_release:unretire(ConfigF, <<\"$(strip $(PROJECT))\">>, <<\"$(strip $2)\">>) of\n\t\t{ok, {204, _, _}} ->\n\t\t\tio:format(\"Release $(strip $2) is not retired anymore~n\"),\n\t\t\thalt(0);\n\t\t{ok, {Status, _, Errors}} ->\n\t\t\tio:format(\"Error ~b: ~0p~n\", [Status, Errors]),\n\t\t\thalt(87)\n\tend\nendef\n\nhex-release-unretire: hex-core\n\t$(if $(HEX_SECRET),,$(eval HEX_SECRET := $(shell stty -echo; read -p \"Secret: \" secret; stty echo; echo $$secret) $(info )))\n\t$(gen_verbose) $(call erlang,$(call hex_release_unretire.erl,$(HEX_SECRET),\\\n\t\t$(if $(HEX_VERSION),$(HEX_VERSION),$(PROJECT_VERSION))))\n\nHEX_DOCS_DOC_DIR ?= doc/\nHEX_DOCS_TARBALL_FILES ?= $(sort $(call core_find,$(HEX_DOCS_DOC_DIR),*))\nHEX_DOCS_TARBALL_OUTPUT_FILE ?= $(ERLANG_MK_TMP)/$(PROJECT)-docs.tar.gz\n\n$(HEX_DOCS_TARBALL_OUTPUT_FILE): hex-core app docs\n\t$(hex_tar_verbose) tar czf $(HEX_DOCS_TARBALL_OUTPUT_FILE) -C $(HEX_DOCS_DOC_DIR) \\\n\t\t$(HEX_DOCS_TARBALL_FILES:$(HEX_DOCS_DOC_DIR)%=%)\n\nhex-docs-tarball-create: $(HEX_DOCS_TARBALL_OUTPUT_FILE)\n\ndefine hex_docs_publish.erl\n\t{ok, _} = application:ensure_all_started(ssl),\n\t{ok, _} = application:ensure_all_started(inets),\n\tConfig = $(hex_config.erl),\n\tConfigF = Config#{api_key => <<\"$(strip $1)\">>},\n\t{ok, Tarball} = file:read_file(\"$(strip $(HEX_DOCS_TARBALL_OUTPUT_FILE))\"),\n\tcase hex_api:post(ConfigF,\n\t\t\t[\"packages\", \"$(strip $(PROJECT))\", \"releases\", \"$(strip $(PROJECT_VERSION))\", \"docs\"],\n\t\t\t{\"application/octet-stream\", Tarball}) of\n\t\t{ok, {Status, _, _}} when Status >= 200, Status < 300 ->\n\t\t\tio:format(\"Docs published~n\"),\n\t\t\thalt(0);\n\t\t{ok, {Status, _, Errors}} ->\n\t\t\tio:format(\"Error ~b: ~0p~n\", [Status, Errors]),\n\t\t\thalt(88)\n\tend\nendef\n\nhex-docs-publish: hex-core hex-docs-tarball-create\n\t$(if $(HEX_SECRET),,$(eval HEX_SECRET := $(shell stty -echo; read -p \"Secret: \" secret; stty echo; echo $$secret) $(info )))\n\t$(gen_verbose) $(call erlang,$(call hex_docs_publish.erl,$(HEX_SECRET)))\n\ndefine hex_docs_delete.erl\n\t{ok, _} = application:ensure_all_started(ssl),\n\t{ok, _} = application:ensure_all_started(inets),\n\tConfig = $(hex_config.erl),\n\tConfigF = Config#{api_key => <<\"$(strip $1)\">>},\n\tcase hex_api:delete(ConfigF,\n\t\t\t[\"packages\", \"$(strip $(PROJECT))\", \"releases\", \"$(strip $2)\", \"docs\"]) of\n\t\t{ok, {Status, _, _}} when Status >= 200, Status < 300 ->\n\t\t\tio:format(\"Docs removed~n\"),\n\t\t\thalt(0);\n\t\t{ok, {Status, _, Errors}} ->\n\t\t\tio:format(\"Error ~b: ~0p~n\", [Status, Errors]),\n\t\t\thalt(89)\n\tend\nendef\n\nhex-docs-delete: hex-core\n\t$(if $(HEX_SECRET),,$(eval HEX_SECRET := $(shell stty -echo; read -p \"Secret: \" secret; stty echo; echo $$secret) $(info )))\n\t$(gen_verbose) $(call erlang,$(call hex_docs_delete.erl,$(HEX_SECRET),\\\n\t\t$(if $(HEX_VERSION),$(HEX_VERSION),$(PROJECT_VERSION))))\n\n# Copyright (c) 2015-2017, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\nifeq ($(filter proper,$(DEPS) $(TEST_DEPS)),proper)\n.PHONY: proper\n\n# Targets.\n\ntests:: proper\n\ndefine proper_check.erl\n\t$(call cover.erl)\n\tcode:add_pathsa([\n\t\t\"$(call core_native_path,$(CURDIR)/ebin)\",\n\t\t\"$(call core_native_path,$(DEPS_DIR)/*/ebin)\",\n\t\t\"$(call core_native_path,$(TEST_DIR))\"]),\n\tModule = fun(M) ->\n\t\t[true] =:= lists:usort([\n\t\t\tcase atom_to_list(F) of\n\t\t\t\t\"prop_\" ++ _ ->\n\t\t\t\t\tio:format(\"Testing ~p:~p/0~n\", [M, F]),\n\t\t\t\t\tproper:quickcheck(M:F(), nocolors);\n\t\t\t\t_ ->\n\t\t\t\t\ttrue\n\t\t\tend\n\t\t|| {F, 0} <- M:module_info(exports)])\n\tend,\n\ttry begin\n\t\tCoverSetup(),\n\t\tRes = case $(1) of\n\t\t\tall -> [true] =:= lists:usort([Module(M) || M <- [$(call comma_list,$(3))]]);\n\t\t\tmodule -> Module($(2));\n\t\t\tfunction -> proper:quickcheck($(2), nocolors)\n\t\tend,\n\t\tCoverExport(\"$(COVER_DATA_DIR)/proper.coverdata\"),\n\t\tRes\n\tend of\n\t\ttrue -> halt(0);\n\t\t_ -> halt(1)\n\tcatch error:undef$(if $V,:Stacktrace) ->\n\t\tio:format(\"Undefined property or module?~n$(if $V,~p~n)\", [$(if $V,Stacktrace)]),\n\t\thalt(0)\n\tend.\nendef\n\nifdef t\nifeq (,$(findstring :,$(t)))\nproper: test-build cover-data-dir\n\t$(verbose) $(call erlang,$(call proper_check.erl,module,$(t)))\nelse\nproper: test-build cover-data-dir\n\t$(verbose) echo Testing $(t)/0\n\t$(verbose) $(call erlang,$(call proper_check.erl,function,$(t)()))\nendif\nelse\nproper: test-build cover-data-dir\n\t$(eval MODULES := $(patsubst %,'%',$(sort $(notdir $(basename \\\n\t\t$(wildcard ebin/*.beam) $(call core_find,$(TEST_DIR)/,*.beam))))))\n\t$(gen_verbose) $(call erlang,$(call proper_check.erl,all,undefined,$(MODULES)))\nendif\nendif\n\n# Copyright (c) 2015-2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n# Verbosity.\n\nproto_verbose_0 = @echo \" PROTO \" $(filter %.proto,$(?F));\nproto_verbose = $(proto_verbose_$(V))\n\n# Core targets.\n\nifneq ($(wildcard src/),)\nifneq ($(filter gpb protobuffs,$(BUILD_DEPS) $(DEPS)),)\nPROTO_FILES := $(filter %.proto,$(ALL_SRC_FILES))\nERL_FILES += $(addprefix src/,$(patsubst %.proto,%_pb.erl,$(notdir $(PROTO_FILES))))\n\nifeq ($(PROTO_FILES),)\n$(ERLANG_MK_TMP)/last-makefile-change-protobuffs:\n\t$(verbose) :\nelse\n# Rebuild proto files when the Makefile changes.\n# We exclude $(PROJECT).d to avoid a circular dependency.\n$(ERLANG_MK_TMP)/last-makefile-change-protobuffs: $(filter-out $(PROJECT).d,$(MAKEFILE_LIST)) | $(ERLANG_MK_TMP)\n\t$(verbose) if test -f $@; then \\\n\t\ttouch $(PROTO_FILES); \\\n\tfi\n\t$(verbose) touch $@\n\n$(PROJECT).d:: $(ERLANG_MK_TMP)/last-makefile-change-protobuffs\nendif\n\nifeq ($(filter gpb,$(BUILD_DEPS) $(DEPS)),)\ndefine compile_proto.erl\n\t[begin\n\t\tprotobuffs_compile:generate_source(F, [\n\t\t\t{output_include_dir, \"./include\"},\n\t\t\t{output_src_dir, \"./src\"}])\n\tend || F <- string:tokens(\"$1\", \" \")],\n\thalt().\nendef\nelse\ndefine compile_proto.erl\n\t[begin\n\t\tgpb_compile:file(F, [\n\t\t\t$(foreach i,$(sort $(dir $(PROTO_FILES))),{i$(comma) \"$i\"}$(comma))\n\t\t\t{include_as_lib, true},\n\t\t\t{module_name_suffix, \"_pb\"},\n\t\t\t{o_hrl, \"./include\"},\n\t\t\t{o_erl, \"./src\"},\n\t\t\t{use_packages, true}\n\t\t])\n\tend || F <- string:tokens(\"$1\", \" \")],\n\thalt().\nendef\nendif\n\nifneq ($(PROTO_FILES),)\n$(PROJECT).d:: $(PROTO_FILES)\n\t$(verbose) mkdir -p ebin/ include/\n\t$(if $(strip $?),$(proto_verbose) $(call erlang,$(call compile_proto.erl,$?)))\nendif\nendif\nendif\n\n# Copyright (c) 2013-2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\nifeq ($(filter relx,$(BUILD_DEPS) $(DEPS) $(REL_DEPS)),relx)\n.PHONY: relx-rel relx-relup distclean-relx-rel run\n\n# Configuration.\n\nRELX_CONFIG ?= $(CURDIR)/relx.config\nRELX_CONFIG_SCRIPT ?= $(CURDIR)/relx.config.script\n\nRELX_OUTPUT_DIR ?= _rel\nRELX_REL_EXT ?=\nRELX_TAR ?= 1\n\nifdef SFX\n\tRELX_TAR = 1\nendif\n\n# Core targets.\n\nifeq ($(IS_DEP),)\nifneq ($(wildcard $(RELX_CONFIG))$(wildcard $(RELX_CONFIG_SCRIPT)),)\nrel:: relx-rel\n\nrelup:: relx-relup\nendif\nendif\n\ndistclean:: distclean-relx-rel\n\n# Plugin-specific targets.\n\ndefine relx_get_config.erl\n\t(fun() ->\n\t\tConfig0 =\n\t\t\tcase file:consult(\"$(call core_native_path,$(RELX_CONFIG))\") of\n\t\t\t\t{ok, Terms} ->\n\t\t\t\t\tTerms;\n\t\t\t\t{error, _} ->\n\t\t\t\t\t[]\n\t\t\tend,\n\t\tcase filelib:is_file(\"$(call core_native_path,$(RELX_CONFIG_SCRIPT))\") of\n\t\t\ttrue ->\n\t\t\t\tBindings = erl_eval:add_binding('CONFIG', Config0, erl_eval:new_bindings()),\n\t\t\t\t{ok, Config1} = file:script(\"$(call core_native_path,$(RELX_CONFIG_SCRIPT))\", Bindings),\n\t\t\t\tConfig1;\n\t\t\tfalse ->\n\t\t\t\tConfig0\n\t\tend\n\tend)()\nendef\n\ndefine relx_release.erl\n\tConfig = $(call relx_get_config.erl),\n\t{release, {Name, Vsn0}, _} = lists:keyfind(release, 1, Config),\n\tVsn = case Vsn0 of\n\t\t{cmd, Cmd} -> os:cmd(Cmd);\n\t\tsemver -> \"\";\n\t\t{semver, _} -> \"\";\n\t\t{git, short} -> string:trim(os:cmd(\"git rev-parse --short HEAD\"), both, \"\\n\");\n\t\t{git, long} -> string:trim(os:cmd(\"git rev-parse HEAD\"), both, \"\\n\");\n\t\tVsnStr -> Vsn0\n\tend,\n\t{ok, _} = relx:build_release(#{name => Name, vsn => Vsn}, Config ++ [{output_dir, \"$(RELX_OUTPUT_DIR)\"}]),\n\thalt(0).\nendef\n\ndefine relx_tar.erl\n\tConfig = $(call relx_get_config.erl),\n\t{release, {Name, Vsn0}, _} = lists:keyfind(release, 1, Config),\n\tVsn = case Vsn0 of\n\t\t{cmd, Cmd} -> os:cmd(Cmd);\n\t\tsemver -> \"\";\n\t\t{semver, _} -> \"\";\n\t\t{git, short} -> string:trim(os:cmd(\"git rev-parse --short HEAD\"), both, \"\\n\");\n\t\t{git, long} -> string:trim(os:cmd(\"git rev-parse HEAD\"), both, \"\\n\");\n\t\tVsnStr -> Vsn0\n\tend,\n\t{ok, _} = relx:build_tar(#{name => Name, vsn => Vsn}, Config ++ [{output_dir, \"$(RELX_OUTPUT_DIR)\"}]),\n\thalt(0).\nendef\n\ndefine relx_relup.erl\n\tConfig = $(call relx_get_config.erl),\n\t{release, {Name, Vsn0}, _} = lists:keyfind(release, 1, Config),\n\tVsn = case Vsn0 of\n\t\t{cmd, Cmd} -> os:cmd(Cmd);\n\t\tsemver -> \"\";\n\t\t{semver, _} -> \"\";\n\t\t{git, short} -> string:trim(os:cmd(\"git rev-parse --short HEAD\"), both, \"\\n\");\n\t\t{git, long} -> string:trim(os:cmd(\"git rev-parse HEAD\"), both, \"\\n\");\n\t\tVsnStr -> Vsn0\n\tend,\n\t{ok, _} = relx:build_relup(Name, Vsn, undefined, Config ++ [{output_dir, \"$(RELX_OUTPUT_DIR)\"}]),\n\thalt(0).\nendef\n\nrelx-rel: rel-deps app\n\t$(call erlang,$(call relx_release.erl),-pa ebin/)\n\t$(verbose) $(MAKE) relx-post-rel\nifeq ($(RELX_TAR),1)\n\t$(call erlang,$(call relx_tar.erl),-pa ebin/)\nendif\n\nrelx-relup: rel-deps app\n\t$(call erlang,$(call relx_release.erl),-pa ebin/)\n\t$(MAKE) relx-post-rel\n\t$(call erlang,$(call relx_relup.erl),-pa ebin/)\nifeq ($(RELX_TAR),1)\n\t$(call erlang,$(call relx_tar.erl),-pa ebin/)\nendif\n\ndistclean-relx-rel:\n\t$(gen_verbose) rm -rf $(RELX_OUTPUT_DIR)\n\n# Default hooks.\nrelx-post-rel::\n\t$(verbose) :\n\n# Run target.\n\nifeq ($(wildcard $(RELX_CONFIG))$(wildcard $(RELX_CONFIG_SCRIPT)),)\nrun::\nelse\n\ndefine get_relx_release.erl\n\tConfig = $(call relx_get_config.erl),\n\t{release, {Name, Vsn0}, _} = lists:keyfind(release, 1, Config),\n\tVsn = case Vsn0 of\n\t\t{cmd, Cmd} -> os:cmd(Cmd);\n\t\tsemver -> \"\";\n\t\t{semver, _} -> \"\";\n\t\t{git, short} -> string:trim(os:cmd(\"git rev-parse --short HEAD\"), both, \"\\n\");\n\t\t{git, long} -> string:trim(os:cmd(\"git rev-parse HEAD\"), both, \"\\n\");\n\t\tVsnStr -> Vsn0\n\tend,\n\tExtended = case lists:keyfind(extended_start_script, 1, Config) of\n\t\t{_, true} -> \"1\";\n\t\t_ -> \"\"\n\tend,\n\tio:format(\"~s ~s ~s\", [Name, Vsn, Extended]),\n\thalt(0).\nendef\n\nRELX_REL := $(shell $(call erlang,$(get_relx_release.erl)))\nRELX_REL_NAME := $(word 1,$(RELX_REL))\nRELX_REL_VSN := $(word 2,$(RELX_REL))\nRELX_REL_CMD := $(if $(word 3,$(RELX_REL)),console)\n\nifeq ($(PLATFORM),msys2)\nRELX_REL_EXT := .cmd\nendif\n\nrun:: all\n\t$(verbose) $(RELX_OUTPUT_DIR)/$(RELX_REL_NAME)/bin/$(RELX_REL_NAME)$(RELX_REL_EXT) $(RELX_REL_CMD)\n\nifdef RELOAD\nrel::\n\t$(verbose) $(RELX_OUTPUT_DIR)/$(RELX_REL_NAME)/bin/$(RELX_REL_NAME)$(RELX_REL_EXT) ping\n\t$(verbose) $(RELX_OUTPUT_DIR)/$(RELX_REL_NAME)/bin/$(RELX_REL_NAME)$(RELX_REL_EXT) \\\n\t\teval \"io:format(\\\"~p~n\\\", [c:lm()]).\"\nendif\n\nhelp::\n\t$(verbose) printf \"%s\\n\" \"\" \\\n\t\t\"Relx targets:\" \\\n\t\t\"  run         Compile the project, build the release and run it\"\n\nendif\nendif\n\n# Copyright (c) 2015-2016, Loïc Hoguin <essen@ninenines.eu>\n# Copyright (c) 2014, M Robert Martin <rob@version2beta.com>\n# This file is contributed to erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: shell\n\n# Configuration.\n\nSHELL_ERL ?= erl\nSHELL_PATHS ?= $(CURDIR)/ebin $(TEST_DIR)\nSHELL_OPTS ?=\n\nALL_SHELL_DEPS_DIRS = $(addprefix $(DEPS_DIR)/,$(SHELL_DEPS))\n\n# Core targets\n\nhelp::\n\t$(verbose) printf \"%s\\n\" \"\" \\\n\t\t\"Shell targets:\" \\\n\t\t\"  shell       Run an erlang shell with SHELL_OPTS or reasonable default\"\n\n# Plugin-specific targets.\n\n$(foreach dep,$(SHELL_DEPS),$(eval $(call dep_target,$(dep))))\n\nifneq ($(SKIP_DEPS),)\nbuild-shell-deps:\nelse\nbuild-shell-deps: $(ALL_SHELL_DEPS_DIRS)\n\t$(verbose) set -e; for dep in $(ALL_SHELL_DEPS_DIRS) ; do \\\n\t\tif [ -z \"$(strip $(FULL))\" ] && [ ! -L $$dep ] && [ -f $$dep/ebin/dep_built ]; then \\\n\t\t\t:; \\\n\t\telse \\\n\t\t\t$(MAKE) -C $$dep IS_DEP=1; \\\n\t\t\tif [ ! -L $$dep ] && [ -d $$dep/ebin ]; then touch $$dep/ebin/dep_built; fi; \\\n\t\tfi \\\n\tdone\nendif\n\nshell:: build-shell-deps\n\t$(gen_verbose) $(SHELL_ERL) -pa $(SHELL_PATHS) $(SHELL_OPTS)\n\n# Copyright 2017, Stanislaw Klekot <dozzie@jarowit.net>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: distclean-sphinx sphinx\n\n# Configuration.\n\nSPHINX_BUILD ?= sphinx-build\nSPHINX_SOURCE ?= doc\nSPHINX_CONFDIR ?=\nSPHINX_FORMATS ?= html\nSPHINX_DOCTREES ?= $(ERLANG_MK_TMP)/sphinx.doctrees\nSPHINX_OPTS ?=\n\n#sphinx_html_opts =\n#sphinx_html_output = html\n#sphinx_man_opts =\n#sphinx_man_output = man\n#sphinx_latex_opts =\n#sphinx_latex_output = latex\n\n# Helpers.\n\nsphinx_build_0 = @echo \" SPHINX\" $1; $(SPHINX_BUILD) -N -q\nsphinx_build_1 = $(SPHINX_BUILD) -N\nsphinx_build_2 = set -x; $(SPHINX_BUILD)\nsphinx_build = $(sphinx_build_$(V))\n\ndefine sphinx.build\n$(call sphinx_build,$1) -b $1 -d $(SPHINX_DOCTREES) $(if $(SPHINX_CONFDIR),-c $(SPHINX_CONFDIR)) $(SPHINX_OPTS) $(sphinx_$1_opts) -- $(SPHINX_SOURCE) $(call sphinx.output,$1)\n\nendef\n\ndefine sphinx.output\n$(if $(sphinx_$1_output),$(sphinx_$1_output),$1)\nendef\n\n# Targets.\n\nifneq ($(wildcard $(if $(SPHINX_CONFDIR),$(SPHINX_CONFDIR),$(SPHINX_SOURCE))/conf.py),)\ndocs:: sphinx\ndistclean:: distclean-sphinx\nendif\n\nhelp::\n\t$(verbose) printf \"%s\\n\" \"\" \\\n\t\t\"Sphinx targets:\" \\\n\t\t\"  sphinx      Generate Sphinx documentation.\" \\\n\t\t\"\" \\\n\t\t\"ReST sources and 'conf.py' file are expected in directory pointed by\" \\\n\t\t\"SPHINX_SOURCE ('doc' by default). SPHINX_FORMATS lists formats to build (only\" \\\n\t\t\"'html' format is generated by default); target directory can be specified by\" \\\n\t\t'setting sphinx_$${format}_output, for example: sphinx_html_output = output/html' \\\n\t\t\"Additional Sphinx options can be set in SPHINX_OPTS.\"\n\n# Plugin-specific targets.\n\nsphinx:\n\t$(foreach F,$(SPHINX_FORMATS),$(call sphinx.build,$F))\n\ndistclean-sphinx:\n\t$(gen_verbose) rm -rf $(filter-out $(SPHINX_SOURCE),$(foreach F,$(SPHINX_FORMATS),$(call sphinx.output,$F)))\n\n# Copyright (c) 2017, Jean-Sébastien Pédron <jean-sebastien@rabbitmq.com>\n# This file is contributed to erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: show-ERL_LIBS show-ERLC_OPTS show-TEST_ERLC_OPTS\n\nshow-ERL_LIBS:\n\t@echo $(ERL_LIBS)\n\nshow-ERLC_OPTS:\n\t@$(foreach opt,$(ERLC_OPTS) -pa ebin -I include,echo \"$(opt)\";)\n\nshow-TEST_ERLC_OPTS:\n\t@$(foreach opt,$(TEST_ERLC_OPTS) -pa ebin -I include,echo \"$(opt)\";)\n\n# Copyright (c) 2015-2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\nifeq ($(filter triq,$(DEPS) $(TEST_DEPS)),triq)\n.PHONY: triq\n\n# Targets.\n\ntests:: triq\n\ndefine triq_check.erl\n\t$(call cover.erl)\n\tcode:add_pathsa([\n\t\t\"$(call core_native_path,$(CURDIR)/ebin)\",\n\t\t\"$(call core_native_path,$(DEPS_DIR)/*/ebin)\",\n\t\t\"$(call core_native_path,$(TEST_DIR))\"]),\n\ttry begin\n\t\tCoverSetup(),\n\t\tRes = case $(1) of\n\t\t\tall -> [true] =:= lists:usort([triq:check(M) || M <- [$(call comma_list,$(3))]]);\n\t\t\tmodule -> triq:check($(2));\n\t\t\tfunction -> triq:check($(2))\n\t\tend,\n\t\tCoverExport(\"$(COVER_DATA_DIR)/triq.coverdata\"),\n\t\tRes\n\tend of\n\t\ttrue -> halt(0);\n\t\t_ -> halt(1)\n\tcatch error:undef$(if $V,:Stacktrace) ->\n\t\tio:format(\"Undefined property or module?~n$(if $V,~p~n)\", [$(if $V,Stacktrace)]),\n\t\thalt(0)\n\tend.\nendef\n\nifdef t\nifeq (,$(findstring :,$(t)))\ntriq: test-build cover-data-dir\n\t$(verbose) $(call erlang,$(call triq_check.erl,module,$(t)))\nelse\ntriq: test-build cover-data-dir\n\t$(verbose) echo Testing $(t)/0\n\t$(verbose) $(call erlang,$(call triq_check.erl,function,$(t)()))\nendif\nelse\ntriq: test-build cover-data-dir\n\t$(eval MODULES := $(patsubst %,'%',$(sort $(notdir $(basename \\\n\t\t$(wildcard ebin/*.beam) $(call core_find,$(TEST_DIR)/,*.beam))))))\n\t$(gen_verbose) $(call erlang,$(call triq_check.erl,all,undefined,$(MODULES)))\nendif\nendif\n\n# Copyright (c) 2022, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: xref\n\n# Configuration.\n\n# We do not use locals_not_used or deprecated_function_calls\n# because the compiler will error out by default in those\n# cases with Erlang.mk. Deprecated functions may make sense\n# in some cases but few libraries define them. We do not\n# use exports_not_used by default because it hinders more\n# than it helps library projects such as Cowboy. Finally,\n# undefined_functions provides little that undefined_function_calls\n# doesn't already provide, so it's not enabled by default.\nXREF_CHECKS ?= [undefined_function_calls]\n\n# Instead of predefined checks a query can be evaluated\n# using the Xref DSL. The $q variable is used in that case.\n\n# The scope is a list of keywords that correspond to\n# application directories, being essentially an easy way\n# to configure which applications to analyze. With:\n#\n# - app:  .\n# - apps: $(ALL_APPS_DIRS)\n# - deps: $(ALL_DEPS_DIRS)\n# - otp:  Built-in Erlang/OTP applications.\n#\n# The default is conservative (app) and will not be\n# appropriate for all types of queries (for example\n# application_call requires adding all applications\n# that might be called or they will not be found).\nXREF_SCOPE ?= app # apps deps otp\n\n# If the above is not enough, additional application\n# directories can be configured.\nXREF_EXTRA_APP_DIRS ?=\n\n# As well as additional non-application directories.\nXREF_EXTRA_DIRS ?=\n\n# Erlang.mk supports -ignore_xref([...]) with forms\n# {M, F, A} | {F, A} | M, the latter ignoring whole\n# modules. Ignores can also be provided project-wide.\nXREF_IGNORE ?= []\n\n# All callbacks may be ignored. Erlang.mk will ignore\n# them automatically for exports_not_used (unless it\n# is explicitly disabled by the user).\nXREF_IGNORE_CALLBACKS ?=\n\n# Core targets.\n\nhelp::\n\t$(verbose) printf '%s\\n' '' \\\n\t\t'Xref targets:' \\\n\t\t'  xref         Analyze the project using Xref' \\\n\t\t'  xref q=QUERY Evaluate an Xref query'\n\n# Plugin-specific targets.\n\ndefine xref.erl\n\t{ok, Xref} = xref:start([]),\n\tScope = [$(call comma_list,$(XREF_SCOPE))],\n\tAppDirs0 = [$(call comma_list,$(foreach d,$(XREF_EXTRA_APP_DIRS),\"$d\"))],\n\tAppDirs1 = case lists:member(otp, Scope) of\n\t\tfalse -> AppDirs0;\n\t\ttrue ->\n\t\t\tRootDir = code:root_dir(),\n\t\t\tAppDirs0 ++ [filename:dirname(P) || P <- code:get_path(), lists:prefix(RootDir, P)]\n\tend,\n\tAppDirs2 = case lists:member(deps, Scope) of\n\t\tfalse -> AppDirs1;\n\t\ttrue -> [$(call comma_list,$(foreach d,$(ALL_DEPS_DIRS),\"$d\"))] ++ AppDirs1\n\tend,\n\tAppDirs3 = case lists:member(apps, Scope) of\n\t\tfalse -> AppDirs2;\n\t\ttrue -> [$(call comma_list,$(foreach d,$(ALL_APPS_DIRS),\"$d\"))] ++ AppDirs2\n\tend,\n\tAppDirs = case lists:member(app, Scope) of\n\t\tfalse -> AppDirs3;\n\t\ttrue -> [\"../$(notdir $(CURDIR))\"|AppDirs3]\n\tend,\n\t[{ok, _} = xref:add_application(Xref, AppDir, [{builtins, true}]) || AppDir <- AppDirs],\n\tExtraDirs = [$(call comma_list,$(foreach d,$(XREF_EXTRA_DIRS),\"$d\"))],\n\t[{ok, _} = xref:add_directory(Xref, ExtraDir, [{builtins, true}]) || ExtraDir <- ExtraDirs],\n\tok = xref:set_library_path(Xref, code:get_path() -- ([\"ebin\", \".\"] ++ AppDirs ++ ExtraDirs)),\n\tChecks = case {$1, is_list($2)} of\n\t\t{check, true} -> $2;\n\t\t{check, false} -> [$2];\n\t\t{query, _} -> [$2]\n\tend,\n\tFinalRes = [begin\n\t\tIsInformational = case $1 of\n\t\t\tquery -> true;\n\t\t\tcheck ->\n\t\t\t\tis_tuple(Check) andalso\n\t\t\t\t\tlists:member(element(1, Check),\n\t\t\t\t\t\t[call, use, module_call, module_use, application_call, application_use])\n\t\tend,\n\t\t{ok, Res0} = case $1 of\n\t\t\tcheck -> xref:analyze(Xref, Check);\n\t\t\tquery -> xref:q(Xref, Check)\n\t\tend,\n\t\tRes = case IsInformational of\n\t\t\ttrue -> Res0;\n\t\t\tfalse ->\n\t\t\t\tlists:filter(fun(R) ->\n\t\t\t\t\t{Mod, InMFA, MFA} = case R of\n\t\t\t\t\t\t{InMFA0 = {M, _, _}, MFA0} -> {M, InMFA0, MFA0};\n\t\t\t\t\t\t{M, _, _} -> {M, R, R}\n\t\t\t\t\tend,\n\t\t\t\t\tAttrs = try\n\t\t\t\t\t\tMod:module_info(attributes)\n\t\t\t\t\tcatch error:undef ->\n\t\t\t\t\t\t[]\n\t\t\t\t\tend,\n\t\t\t\t\tInlineIgnores = lists:flatten([\n\t\t\t\t\t\t[case V of\n\t\t\t\t\t\t\tM when is_atom(M) -> {M, '_', '_'};\n\t\t\t\t\t\t\t{F, A} -> {Mod, F, A};\n\t\t\t\t\t\t\t_ -> V\n\t\t\t\t\t\tend || V <- Values]\n\t\t\t\t\t|| {ignore_xref, Values} <- Attrs]),\n\t\t\t\t\tBuiltinIgnores = [\n\t\t\t\t\t\t{eunit_test, wrapper_test_exported_, 0}\n\t\t\t\t\t],\n\t\t\t\t\tDoCallbackIgnores = case {Check, \"$(strip $(XREF_IGNORE_CALLBACKS))\"} of\n\t\t\t\t\t\t{exports_not_used, \"\"} -> true;\n\t\t\t\t\t\t{_, \"0\"} -> false;\n\t\t\t\t\t\t_ -> true\n\t\t\t\t\tend,\n\t\t\t\t\tCallbackIgnores = case DoCallbackIgnores of\n\t\t\t\t\t\tfalse -> [];\n\t\t\t\t\t\ttrue ->\n\t\t\t\t\t\t\tBehaviors = lists:flatten([\n\t\t\t\t\t\t\t\t[BL || {behavior, BL} <- Attrs],\n\t\t\t\t\t\t\t\t[BL || {behaviour, BL} <- Attrs]\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t[{Mod, CF, CA} || B <- Behaviors, {CF, CA} <- B:behaviour_info(callbacks)]\n\t\t\t\t\tend,\n\t\t\t\t\tWideIgnores = if\n\t\t\t\t\t\tis_list($(XREF_IGNORE)) ->\n\t\t\t\t\t\t\t[if is_atom(I) -> {I, '_', '_'}; true -> I end\n\t\t\t\t\t\t\t\t|| I <- $(XREF_IGNORE)];\n\t\t\t\t\t\ttrue -> [$(XREF_IGNORE)]\n\t\t\t\t\tend,\n\t\t\t\t\tIgnores = InlineIgnores ++ BuiltinIgnores ++ CallbackIgnores ++ WideIgnores,\n\t\t\t\t\tnot (lists:member(InMFA, Ignores)\n\t\t\t\t\torelse lists:member(MFA, Ignores)\n\t\t\t\t\torelse lists:member({Mod, '_', '_'}, Ignores))\n\t\t\t\tend, Res0)\n\t\tend,\n\t\tcase Res of\n\t\t\t[] -> ok;\n\t\t\t_ when IsInformational ->\n\t\t\t\tcase Check of\n\t\t\t\t\t{call, {CM, CF, CA}} ->\n\t\t\t\t\t\tio:format(\"Functions that ~s:~s/~b calls:~n\", [CM, CF, CA]);\n\t\t\t\t\t{use, {CM, CF, CA}} ->\n\t\t\t\t\t\tio:format(\"Function ~s:~s/~b is called by:~n\", [CM, CF, CA]);\n\t\t\t\t\t{module_call, CMod} ->\n\t\t\t\t\t\tio:format(\"Modules that ~s calls:~n\", [CMod]);\n\t\t\t\t\t{module_use, CMod} ->\n\t\t\t\t\t\tio:format(\"Module ~s is used by:~n\", [CMod]);\n\t\t\t\t\t{application_call, CApp} ->\n\t\t\t\t\t\tio:format(\"Applications that ~s calls:~n\", [CApp]);\n\t\t\t\t\t{application_use, CApp} ->\n\t\t\t\t\t\tio:format(\"Application ~s is used by:~n\", [CApp]);\n\t\t\t\t\t_ when $1 =:= query ->\n\t\t\t\t\t\tio:format(\"Query ~s returned:~n\", [Check])\n\t\t\t\tend,\n\t\t\t\t[case R of\n\t\t\t\t\t{{InM, InF, InA}, {M, F, A}} ->\n\t\t\t\t\t\tio:format(\"- ~s:~s/~b called by ~s:~s/~b~n\",\n\t\t\t\t\t\t\t[M, F, A, InM, InF, InA]);\n\t\t\t\t\t{M, F, A} ->\n\t\t\t\t\t\tio:format(\"- ~s:~s/~b~n\", [M, F, A]);\n\t\t\t\t\tModOrApp ->\n\t\t\t\t\t\tio:format(\"- ~s~n\", [ModOrApp])\n\t\t\t\tend || R <- Res],\n\t\t\t\tok;\n\t\t\t_ ->\n\t\t\t\t[case {Check, R} of\n\t\t\t\t\t{undefined_function_calls, {{InM, InF, InA}, {M, F, A}}} ->\n\t\t\t\t\t\tio:format(\"Undefined function ~s:~s/~b called by ~s:~s/~b~n\",\n\t\t\t\t\t\t\t[M, F, A, InM, InF, InA]);\n\t\t\t\t\t{undefined_functions, {M, F, A}} ->\n\t\t\t\t\t\tio:format(\"Undefined function ~s:~s/~b~n\", [M, F, A]);\n\t\t\t\t\t{locals_not_used, {M, F, A}} ->\n\t\t\t\t\t\tio:format(\"Unused local function ~s:~s/~b~n\", [M, F, A]);\n\t\t\t\t\t{exports_not_used, {M, F, A}} ->\n\t\t\t\t\t\tio:format(\"Unused exported function ~s:~s/~b~n\", [M, F, A]);\n\t\t\t\t\t{deprecated_function_calls, {{InM, InF, InA}, {M, F, A}}} ->\n\t\t\t\t\t\tio:format(\"Deprecated function ~s:~s/~b called by ~s:~s/~b~n\",\n\t\t\t\t\t\t\t[M, F, A, InM, InF, InA]);\n\t\t\t\t\t{deprecated_functions, {M, F, A}} ->\n\t\t\t\t\t\tio:format(\"Deprecated function ~s:~s/~b~n\", [M, F, A]);\n\t\t\t\t\t_ ->\n\t\t\t\t\t\tio:format(\"~p: ~p~n\", [Check, R])\n\t\t\t\tend || R <- Res],\n\t\t\t\terror\n\t\tend\n\tend || Check <- Checks],\n\tstopped = xref:stop(Xref),\n\tcase lists:usort(FinalRes) of\n\t\t[ok] -> halt(0);\n\t\t_ -> halt(1)\n\tend\nendef\n\nxref: deps app\nifdef q\n\t$(verbose) $(call erlang,$(call xref.erl,query,\"$q\"),-pa ebin/)\nelse\n\t$(verbose) $(call erlang,$(call xref.erl,check,$(XREF_CHECKS)),-pa ebin/)\nendif\n\n# Copyright (c) 2016, Loïc Hoguin <essen@ninenines.eu>\n# Copyright (c) 2015, Viktor Söderqvist <viktor@zuiderkwast.se>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\nCOVER_REPORT_DIR ?= cover\nCOVER_DATA_DIR ?= $(COVER_REPORT_DIR)\n\nifdef COVER\nCOVER_APPS ?= $(notdir $(ALL_APPS_DIRS))\nCOVER_DEPS ?=\nCOVER_EXCLUDE_MODS ?=\nendif\n\n# Code coverage for Common Test.\n\nifdef COVER\nifdef CT_RUN\nifneq ($(wildcard $(TEST_DIR)),)\ntest-build:: $(TEST_DIR)/ct.cover.spec\n\n$(TEST_DIR)/ct.cover.spec: cover-data-dir\n\t$(gen_verbose) printf \"%s\\n\" \\\n\t\t\"{incl_app, '$(PROJECT)', details}.\" \\\n\t\t\"{incl_dirs, '$(PROJECT)', [\\\"$(call core_native_path,$(CURDIR)/ebin)\\\" \\\n\t\t\t$(foreach a,$(COVER_APPS),$(comma) \\\"$(call core_native_path,$(APPS_DIR)/$a/ebin)\\\") \\\n\t\t\t$(foreach d,$(COVER_DEPS),$(comma) \\\"$(call core_native_path,$(DEPS_DIR)/$d/ebin)\\\")]}.\" \\\n\t\t'{export,\"$(call core_native_path,$(abspath $(COVER_DATA_DIR))/ct.coverdata)\"}.' \\\n\t\t\"{excl_mods, '$(PROJECT)', [$(call comma_list,$(COVER_EXCLUDE_MODS))]}.\" > $@\n\nCT_RUN += -cover $(TEST_DIR)/ct.cover.spec\nendif\nendif\nendif\n\n# Code coverage for other tools.\n\nifdef COVER\ndefine cover.erl\n\tCoverSetup = fun() ->\n\t\tDirs = [\"$(call core_native_path,$(CURDIR)/ebin)\"\n\t\t\t$(foreach a,$(COVER_APPS),$(comma) \"$(call core_native_path,$(APPS_DIR)/$a/ebin)\")\n\t\t\t$(foreach d,$(COVER_DEPS),$(comma) \"$(call core_native_path,$(DEPS_DIR)/$d/ebin)\")],\n\t\tExcludes = [$(call comma_list,$(foreach e,$(COVER_EXCLUDE_MODS),\"$e\"))],\n\t\t[case file:list_dir(Dir) of\n\t\t\t{error, enotdir} -> false;\n\t\t\t{error, _} ->\thalt(2);\n\t\t\t{ok, Files} ->\n\t\t\tBeamFiles =  [filename:join(Dir, File) ||\n\t\t\t\tFile <- Files,\n\t\t\t\tnot lists:member(filename:basename(File, \".beam\"), Excludes),\n\t\t\t\tfilename:extension(File) =:= \".beam\"],\n\t\t\tcase cover:compile_beam(BeamFiles) of\n\t\t\t\t{error, _} -> halt(1);\n\t\t\t\t_ -> true\n\t\t\tend\n\t\tend || Dir <- Dirs]\n\tend,\n\tCoverExport = fun(Filename) -> cover:export(Filename) end,\nendef\nelse\ndefine cover.erl\n\tCoverSetup = fun() -> ok end,\n\tCoverExport = fun(_) -> ok end,\nendef\nendif\n\n# Core targets\n\nifdef COVER\nifneq ($(COVER_REPORT_DIR),)\ntests::\n\t$(verbose) $(MAKE) --no-print-directory cover-report\nendif\n\ncover-data-dir: | $(COVER_DATA_DIR)\n\n$(COVER_DATA_DIR):\n\t$(verbose) mkdir -p $(COVER_DATA_DIR)\nelse\ncover-data-dir:\nendif\n\nclean:: coverdata-clean\n\nifneq ($(COVER_REPORT_DIR),)\ndistclean:: cover-report-clean\nendif\n\nhelp::\n\t$(verbose) printf \"%s\\n\" \"\" \\\n\t\t\"Cover targets:\" \\\n\t\t\"  cover-report  Generate a HTML coverage report from previously collected\" \\\n\t\t\"                cover data.\" \\\n\t\t\"  all.coverdata Merge all coverdata files into all.coverdata.\" \\\n\t\t\"\" \\\n\t\t\"If COVER=1 is set, coverage data is generated by the targets eunit and ct. The\" \\\n\t\t\"target tests additionally generates a HTML coverage report from the combined\" \\\n\t\t\"coverdata files from each of these testing tools. HTML reports can be disabled\" \\\n\t\t\"by setting COVER_REPORT_DIR to empty.\"\n\n# Plugin specific targets\n\nCOVERDATA = $(filter-out $(COVER_DATA_DIR)/all.coverdata,$(wildcard $(COVER_DATA_DIR)/*.coverdata))\n\n.PHONY: coverdata-clean\ncoverdata-clean:\n\t$(gen_verbose) rm -f $(COVER_DATA_DIR)/*.coverdata $(TEST_DIR)/ct.cover.spec\n\n# Merge all coverdata files into one.\ndefine cover_export.erl\n\t$(foreach f,$(COVERDATA),cover:import(\"$(f)\") == ok orelse halt(1),)\n\tcover:export(\"$(COVER_DATA_DIR)/$@\"), halt(0).\nendef\n\nall.coverdata: $(COVERDATA) cover-data-dir\n\t$(gen_verbose) $(call erlang,$(cover_export.erl))\n\n# These are only defined if COVER_REPORT_DIR is non-empty. Set COVER_REPORT_DIR to\n# empty if you want the coverdata files but not the HTML report.\nifneq ($(COVER_REPORT_DIR),)\n\n.PHONY: cover-report-clean cover-report\n\ncover-report-clean:\n\t$(gen_verbose) rm -rf $(COVER_REPORT_DIR)\nifneq ($(COVER_REPORT_DIR),$(COVER_DATA_DIR))\n\t$(if $(shell ls -A $(COVER_DATA_DIR)/),,$(verbose) rmdir $(COVER_DATA_DIR))\nendif\n\nifeq ($(COVERDATA),)\ncover-report:\nelse\n\n# Modules which include eunit.hrl always contain one line without coverage\n# because eunit defines test/0 which is never called. We compensate for this.\nEUNIT_HRL_MODS = $(subst $(space),$(comma),$(shell \\\n\tgrep -H -e '^\\s*-include.*include/eunit\\.hrl\"' src/*.erl \\\n\t| sed \"s/^src\\/\\(.*\\)\\.erl:.*/'\\1'/\" | uniq))\n\ndefine cover_report.erl\n\t$(foreach f,$(COVERDATA),cover:import(\"$(f)\") == ok orelse halt(1),)\n\tMs = cover:imported_modules(),\n\t[cover:analyse_to_file(M, \"$(COVER_REPORT_DIR)/\" ++ atom_to_list(M)\n\t\t++ \".COVER.html\", [html])  || M <- Ms],\n\tReport = [begin {ok, R} = cover:analyse(M, module), R end || M <- Ms],\n\tEunitHrlMods = [$(EUNIT_HRL_MODS)],\n\tReport1 = [{M, {Y, case lists:member(M, EunitHrlMods) of\n\t\ttrue -> N - 1; false -> N end}} || {M, {Y, N}} <- Report],\n\tTotalY = lists:sum([Y || {_, {Y, _}} <- Report1]),\n\tTotalN = lists:sum([N || {_, {_, N}} <- Report1]),\n\tPerc = fun(Y, N) -> case Y + N of 0 -> 100; S -> round(100 * Y / S) end end,\n\tTotalPerc = Perc(TotalY, TotalN),\n\t{ok, F} = file:open(\"$(COVER_REPORT_DIR)/index.html\", [write]),\n\tio:format(F, \"<!DOCTYPE html><html>~n\"\n\t\t\"<head><meta charset=\\\"UTF-8\\\">~n\"\n\t\t\"<title>Coverage report</title></head>~n\"\n\t\t\"<body>~n\", []),\n\tio:format(F, \"<h1>Coverage</h1>~n<p>Total: ~p%</p>~n\", [TotalPerc]),\n\tio:format(F, \"<table><tr><th>Module</th><th>Coverage</th></tr>~n\", []),\n\t[io:format(F, \"<tr><td><a href=\\\"~p.COVER.html\\\">~p</a></td>\"\n\t\t\"<td>~p%</td></tr>~n\",\n\t\t[M, M, Perc(Y, N)]) || {M, {Y, N}} <- Report1],\n\tHow = \"$(subst $(space),$(comma)$(space),$(basename $(COVERDATA)))\",\n\tDate = \"$(shell date -u \"+%Y-%m-%dT%H:%M:%SZ\")\",\n\tio:format(F, \"</table>~n\"\n\t\t\"<p>Generated using ~s and erlang.mk on ~s.</p>~n\"\n\t\t\"</body></html>\", [How, Date]),\n\thalt().\nendef\n\ncover-report:\n\t$(verbose) mkdir -p $(COVER_REPORT_DIR)\n\t$(gen_verbose) $(call erlang,$(cover_report.erl))\n\nendif\nendif # ifneq ($(COVER_REPORT_DIR),)\n\n# Copyright (c) 2016, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n.PHONY: sfx\n\nifdef RELX_REL\nifdef SFX\n\n# Configuration.\n\nSFX_ARCHIVE ?= $(RELX_OUTPUT_DIR)/$(RELX_REL_NAME)/$(RELX_REL_NAME)-$(RELX_REL_VSN).tar.gz\nSFX_OUTPUT_FILE ?= $(RELX_OUTPUT_DIR)/$(RELX_REL_NAME).run\n\n# Core targets.\n\nrel:: sfx\n\n# Plugin-specific targets.\n\ndefine sfx_stub\n#!/bin/sh\n\nTMPDIR=`mktemp -d`\nARCHIVE=`awk '/^__ARCHIVE_BELOW__$$/ {print NR + 1; exit 0;}' $$0`\nFILENAME=$$(basename $$0)\nREL=$${FILENAME%.*}\n\ntail -n+$$ARCHIVE $$0 | tar -xzf - -C $$TMPDIR\n\n$$TMPDIR/bin/$$REL console\nRET=$$?\n\nrm -rf $$TMPDIR\n\nexit $$RET\n\n__ARCHIVE_BELOW__\nendef\n\nsfx:\n\t$(verbose) $(call core_render,sfx_stub,$(SFX_OUTPUT_FILE))\n\t$(gen_verbose) cat $(SFX_ARCHIVE) >> $(SFX_OUTPUT_FILE)\n\t$(verbose) chmod +x $(SFX_OUTPUT_FILE)\n\nendif\nendif\n\n# Copyright (c) 2013-2017, Loïc Hoguin <essen@ninenines.eu>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n# External plugins.\n\nDEP_PLUGINS ?=\n\n$(foreach p,$(DEP_PLUGINS),\\\n\t$(eval $(if $(findstring /,$p),\\\n\t\t$(call core_dep_plugin,$p,$(firstword $(subst /, ,$p))),\\\n\t\t$(call core_dep_plugin,$p/plugins.mk,$p))))\n\nhelp:: help-plugins\n\nhelp-plugins::\n\t$(verbose) :\n\n# Copyright (c) 2013-2015, Loïc Hoguin <essen@ninenines.eu>\n# Copyright (c) 2015-2016, Jean-Sébastien Pédron <jean-sebastien@rabbitmq.com>\n# This file is part of erlang.mk and subject to the terms of the ISC License.\n\n# Fetch dependencies recursively (without building them).\n\n.PHONY: fetch-deps fetch-doc-deps fetch-rel-deps fetch-test-deps \\\n\tfetch-shell-deps\n\n.PHONY: $(ERLANG_MK_RECURSIVE_DEPS_LIST) \\\n\t$(ERLANG_MK_RECURSIVE_DOC_DEPS_LIST) \\\n\t$(ERLANG_MK_RECURSIVE_REL_DEPS_LIST) \\\n\t$(ERLANG_MK_RECURSIVE_TEST_DEPS_LIST) \\\n\t$(ERLANG_MK_RECURSIVE_SHELL_DEPS_LIST)\n\nfetch-deps: $(ERLANG_MK_RECURSIVE_DEPS_LIST)\nfetch-doc-deps: $(ERLANG_MK_RECURSIVE_DOC_DEPS_LIST)\nfetch-rel-deps: $(ERLANG_MK_RECURSIVE_REL_DEPS_LIST)\nfetch-test-deps: $(ERLANG_MK_RECURSIVE_TEST_DEPS_LIST)\nfetch-shell-deps: $(ERLANG_MK_RECURSIVE_SHELL_DEPS_LIST)\n\nifneq ($(SKIP_DEPS),)\n$(ERLANG_MK_RECURSIVE_DEPS_LIST) \\\n$(ERLANG_MK_RECURSIVE_DOC_DEPS_LIST) \\\n$(ERLANG_MK_RECURSIVE_REL_DEPS_LIST) \\\n$(ERLANG_MK_RECURSIVE_TEST_DEPS_LIST) \\\n$(ERLANG_MK_RECURSIVE_SHELL_DEPS_LIST):\n\t$(verbose) :> $@\nelse\n# By default, we fetch \"normal\" dependencies. They are also included no\n# matter the type of requested dependencies.\n#\n# $(ALL_DEPS_DIRS) includes $(BUILD_DEPS).\n\n$(ERLANG_MK_RECURSIVE_DEPS_LIST): $(LOCAL_DEPS_DIRS) $(ALL_DEPS_DIRS)\n$(ERLANG_MK_RECURSIVE_DOC_DEPS_LIST): $(LOCAL_DEPS_DIRS) $(ALL_DEPS_DIRS) $(ALL_DOC_DEPS_DIRS)\n$(ERLANG_MK_RECURSIVE_REL_DEPS_LIST): $(LOCAL_DEPS_DIRS) $(ALL_DEPS_DIRS) $(ALL_REL_DEPS_DIRS)\n$(ERLANG_MK_RECURSIVE_TEST_DEPS_LIST): $(LOCAL_DEPS_DIRS) $(ALL_DEPS_DIRS) $(ALL_TEST_DEPS_DIRS)\n$(ERLANG_MK_RECURSIVE_SHELL_DEPS_LIST): $(LOCAL_DEPS_DIRS) $(ALL_DEPS_DIRS) $(ALL_SHELL_DEPS_DIRS)\n\n# Allow to use fetch-deps and $(DEP_TYPES) to fetch multiple types of\n# dependencies with a single target.\nifneq ($(filter doc,$(DEP_TYPES)),)\n$(ERLANG_MK_RECURSIVE_DEPS_LIST): $(ALL_DOC_DEPS_DIRS)\nendif\nifneq ($(filter rel,$(DEP_TYPES)),)\n$(ERLANG_MK_RECURSIVE_DEPS_LIST): $(ALL_REL_DEPS_DIRS)\nendif\nifneq ($(filter test,$(DEP_TYPES)),)\n$(ERLANG_MK_RECURSIVE_DEPS_LIST): $(ALL_TEST_DEPS_DIRS)\nendif\nifneq ($(filter shell,$(DEP_TYPES)),)\n$(ERLANG_MK_RECURSIVE_DEPS_LIST): $(ALL_SHELL_DEPS_DIRS)\nendif\n\nERLANG_MK_RECURSIVE_TMP_LIST := $(abspath $(ERLANG_MK_TMP)/recursive-tmp-deps-$(shell echo $$PPID).log)\n\n$(ERLANG_MK_RECURSIVE_DEPS_LIST) \\\n$(ERLANG_MK_RECURSIVE_DOC_DEPS_LIST) \\\n$(ERLANG_MK_RECURSIVE_REL_DEPS_LIST) \\\n$(ERLANG_MK_RECURSIVE_TEST_DEPS_LIST) \\\n$(ERLANG_MK_RECURSIVE_SHELL_DEPS_LIST): | $(ERLANG_MK_TMP)\nifeq ($(IS_APP)$(IS_DEP),)\n\t$(verbose) rm -f $(ERLANG_MK_RECURSIVE_TMP_LIST)\nendif\n\t$(verbose) touch $(ERLANG_MK_RECURSIVE_TMP_LIST)\n\t$(verbose) set -e; for dep in $^ ; do \\\n\t\tif ! grep -qs ^$$dep$$ $(ERLANG_MK_RECURSIVE_TMP_LIST); then \\\n\t\t\techo $$dep >> $(ERLANG_MK_RECURSIVE_TMP_LIST); \\\n\t\t\tif grep -qs -E \"^[[:blank:]]*include[[:blank:]]+(erlang\\.mk|.*/erlang\\.mk|.*ERLANG_MK_FILENAME.*)$$\" \\\n\t\t\t $$dep/GNUmakefile $$dep/makefile $$dep/Makefile; then \\\n\t\t\t\t$(MAKE) -C $$dep fetch-deps \\\n\t\t\t\t IS_DEP=1 \\\n\t\t\t\t ERLANG_MK_RECURSIVE_TMP_LIST=$(ERLANG_MK_RECURSIVE_TMP_LIST); \\\n\t\t\tfi \\\n\t\tfi \\\n\tdone\nifeq ($(IS_APP)$(IS_DEP),)\n\t$(verbose) sort < $(ERLANG_MK_RECURSIVE_TMP_LIST) | \\\n\t\tuniq > $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted\n\t$(verbose) cmp -s $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted $@ \\\n\t\t|| mv $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted $@\n\t$(verbose) rm -f $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted\n\t$(verbose) rm $(ERLANG_MK_RECURSIVE_TMP_LIST)\nendif\nendif # ifneq ($(SKIP_DEPS),)\n\n# List dependencies recursively.\n\n.PHONY: list-deps list-doc-deps list-rel-deps list-test-deps \\\n\tlist-shell-deps\n\nlist-deps: $(ERLANG_MK_RECURSIVE_DEPS_LIST)\nlist-doc-deps: $(ERLANG_MK_RECURSIVE_DOC_DEPS_LIST)\nlist-rel-deps: $(ERLANG_MK_RECURSIVE_REL_DEPS_LIST)\nlist-test-deps: $(ERLANG_MK_RECURSIVE_TEST_DEPS_LIST)\nlist-shell-deps: $(ERLANG_MK_RECURSIVE_SHELL_DEPS_LIST)\n\nlist-deps list-doc-deps list-rel-deps list-test-deps list-shell-deps:\n\t$(verbose) cat $^\n\n# Query dependencies recursively.\n\n.PHONY: query-deps query-doc-deps query-rel-deps query-test-deps \\\n\tquery-shell-deps\n\nQUERY ?= name fetch_method repo version\n\ndefine query_target\n$(1): $(2) clean-tmp-query.log\nifeq ($(IS_APP)$(IS_DEP),)\n\t$(verbose) rm -f $(4)\nendif\n\t$(verbose) $(foreach dep,$(3),\\\n\t\techo $(PROJECT): $(foreach q,$(QUERY),$(call query_$(q),$(dep))) >> $(4) ;)\n\t$(if $(filter-out query-deps,$(1)),,\\\n\t\t$(verbose) set -e; for dep in $(3) ; do \\\n\t\t\tif grep -qs ^$$$$dep$$$$ $(ERLANG_MK_TMP)/query.log; then \\\n\t\t\t\t:; \\\n\t\t\telse \\\n\t\t\t\techo $$$$dep >> $(ERLANG_MK_TMP)/query.log; \\\n\t\t\t\t$(MAKE) -C $(DEPS_DIR)/$$$$dep $$@ QUERY=\"$(QUERY)\" IS_DEP=1 || true; \\\n\t\t\tfi \\\n\t\tdone)\nifeq ($(IS_APP)$(IS_DEP),)\n\t$(verbose) touch $(4)\n\t$(verbose) cat $(4)\nendif\nendef\n\nclean-tmp-query.log:\nifeq ($(IS_DEP),)\n\t$(verbose) rm -f $(ERLANG_MK_TMP)/query.log\nendif\n\n$(eval $(call query_target,query-deps,$(ERLANG_MK_RECURSIVE_DEPS_LIST),$(BUILD_DEPS) $(DEPS),$(ERLANG_MK_QUERY_DEPS_FILE)))\n$(eval $(call query_target,query-doc-deps,$(ERLANG_MK_RECURSIVE_DOC_DEPS_LIST),$(DOC_DEPS),$(ERLANG_MK_QUERY_DOC_DEPS_FILE)))\n$(eval $(call query_target,query-rel-deps,$(ERLANG_MK_RECURSIVE_REL_DEPS_LIST),$(REL_DEPS),$(ERLANG_MK_QUERY_REL_DEPS_FILE)))\n$(eval $(call query_target,query-test-deps,$(ERLANG_MK_RECURSIVE_TEST_DEPS_LIST),$(TEST_DEPS),$(ERLANG_MK_QUERY_TEST_DEPS_FILE)))\n$(eval $(call query_target,query-shell-deps,$(ERLANG_MK_RECURSIVE_SHELL_DEPS_LIST),$(SHELL_DEPS),$(ERLANG_MK_QUERY_SHELL_DEPS_FILE)))\n"
        },
        {
          "name": "erlang_ls.config",
          "type": "blob",
          "size": 0.6474609375,
          "content": "# vim: ft=yaml\n# https://erlang-ls.github.io/configuration/\n# otp_path: \"/path/to/otp/lib/erlang\"\ndeps_dirs:\n  - \"deps/*\"\n  - \"deps/*/apps/*\"\n  - \"extra_deps/*\"\ndiagnostics:\n  disabled:\n    - bound_var_in_pattern\n  enabled:\n    - crossref\n    - dialyzer\n    # - elvis\n    - compiler\n    # - elvis\ninclude_dirs:\n  - \"deps\"\n  - \"deps/*/include\"\n  - \"deps/*/\"\n  - \"extra_deps\"\n  - \"extra_deps/*/include\"\nlenses:\n  enabled:\n    - ct-run-test\n    - show-behaviour-usages\n    - suggest-spec\n    - function-references\n  disabled: []\n# macros:\n#   - name: DEFINED_WITH_VALUE\n#     value: 42\n# code_reload:\n#  node: rabbit@localhost\nplt_path: .rabbitmq_server_release.plt\n"
        },
        {
          "name": "mk",
          "type": "tree",
          "content": null
        },
        {
          "name": "moduleindex.yaml",
          "type": "blob",
          "size": 29.564453125,
          "content": "accept:\n- accept_encoding_header\n- accept_header\n- accept_neg\n- accept_parser\namqp_client:\n- amqp_auth_mechanisms\n- amqp_channel\n- amqp_channel_sup\n- amqp_channel_sup_sup\n- amqp_channels_manager\n- amqp_client\n- amqp_connection\n- amqp_connection_sup\n- amqp_connection_type_sup\n- amqp_direct_connection\n- amqp_direct_consumer\n- amqp_gen_connection\n- amqp_gen_consumer\n- amqp_main_reader\n- amqp_network_connection\n- amqp_rpc_client\n- amqp_rpc_server\n- amqp_selective_consumer\n- amqp_ssl\n- amqp_sup\n- amqp_uri\n- amqp_util\n- rabbit_routing_util\n- uri_parser\namqp10_client:\n- amqp10_client\n- amqp10_client_app\n- amqp10_client_connection\n- amqp10_client_connection_sup\n- amqp10_client_frame_reader\n- amqp10_client_session\n- amqp10_client_sessions_sup\n- amqp10_client_sup\n- amqp10_client_types\n- amqp10_msg\namqp10_common:\n- amqp10_binary_generator\n- amqp10_binary_parser\n- amqp10_framing\n- amqp10_framing0\n- amqp10_util\n- serial_number\naten:\n- aten\n- aten_app\n- aten_detect\n- aten_detector\n- aten_emitter\n- aten_sink\n- aten_sup\nbase64url:\n- base64url\ncowboy:\n- cowboy\n- cowboy_app\n- cowboy_bstr\n- cowboy_children\n- cowboy_clear\n- cowboy_clock\n- cowboy_compress_h\n- cowboy_constraints\n- cowboy_decompress_h\n- cowboy_handler\n- cowboy_http\n- cowboy_http2\n- cowboy_loop\n- cowboy_metrics_h\n- cowboy_middleware\n- cowboy_req\n- cowboy_rest\n- cowboy_router\n- cowboy_static\n- cowboy_stream\n- cowboy_stream_h\n- cowboy_sub_protocol\n- cowboy_sup\n- cowboy_tls\n- cowboy_tracer_h\n- cowboy_websocket\ncowlib:\n- cow_base64url\n- cow_cookie\n- cow_date\n- cow_hpack\n- cow_http\n- cow_http2\n- cow_http2_machine\n- cow_http_hd\n- cow_http_struct_hd\n- cow_http_te\n- cow_iolists\n- cow_link\n- cow_mimetypes\n- cow_multipart\n- cow_qs\n- cow_spdy\n- cow_sse\n- cow_uri\n- cow_uri_template\n- cow_ws\ncredentials_obfuscation:\n- credentials_obfuscation\n- credentials_obfuscation_app\n- credentials_obfuscation_pbe\n- credentials_obfuscation_sup\n- credentials_obfuscation_svc\nct_helper:\n- ct_helper\n- ct_helper_error_h\ncuttlefish:\n- conf_parse\n- cuttlefish\n- cuttlefish_advanced\n- cuttlefish_bytesize\n- cuttlefish_conf\n- cuttlefish_datatypes\n- cuttlefish_duration\n- cuttlefish_duration_parse\n- cuttlefish_effective\n- cuttlefish_enum\n- cuttlefish_error\n- cuttlefish_escript\n- cuttlefish_flag\n- cuttlefish_generator\n- cuttlefish_mapping\n- cuttlefish_rebar_plugin\n- cuttlefish_schema\n- cuttlefish_translation\n- cuttlefish_unit\n- cuttlefish_util\n- cuttlefish_validator\n- cuttlefish_variable\n- cuttlefish_vmargs\neetcd:\n- auth_pb\n- eetcd\n- eetcd_app\n- eetcd_auth\n- eetcd_auth_gen\n- eetcd_cluster\n- eetcd_cluster_gen\n- eetcd_compare\n- eetcd_conn\n- eetcd_conn_sup\n- eetcd_data_coercion\n- eetcd_election\n- eetcd_election_gen\n- eetcd_grpc\n- eetcd_health_gen\n- eetcd_kv\n- eetcd_kv_gen\n- eetcd_lease\n- eetcd_lease_gen\n- eetcd_lease_sup\n- eetcd_lock\n- eetcd_lock_gen\n- eetcd_maintenance\n- eetcd_maintenance_gen\n- eetcd_op\n- eetcd_stream\n- eetcd_sup\n- eetcd_watch\n- eetcd_watch_gen\n- gogo_pb\n- health_pb\n- kv_pb\n- router_pb\nemqtt:\n- emqtt\n- emqtt_cli\n- emqtt_frame\n- emqtt_inflight\n- emqtt_props\n- emqtt_quic\n- emqtt_quic_connection\n- emqtt_quic_stream\n- emqtt_secret\n- emqtt_sock\n- emqtt_ws\nenough:\n- enough\neunit_formatters:\n- binomial_heap\n- eunit_progress\ngen_batch_server:\n- gen_batch_server\ngetopt:\n- getopt\ngun:\n- gun\n- gun_app\n- gun_content_handler\n- gun_data_h\n- gun_http\n- gun_http2\n- gun_sse_h\n- gun_sup\n- gun_tcp\n- gun_tls\n- gun_ws\n- gun_ws_h\nhorus:\n- horus\n- horus_cover\n- horus_utils\nhost_triple:\n- host_triple\ninet_tcp_proxy_dist:\n- inet_tcp_proxy_dist\n- inet_tcp_proxy_dist_app\n- inet_tcp_proxy_dist_conn_sup\n- inet_tcp_proxy_dist_controller\n- inet_tcp_proxy_dist_sup\njose:\n- jose\n- jose_app\n- jose_base64\n- jose_base64url\n- jose_block_encryptor\n- jose_chacha20_poly1305\n- jose_chacha20_poly1305_crypto\n- jose_chacha20_poly1305_libsodium\n- jose_chacha20_poly1305_unsupported\n- jose_crypto_compat\n- jose_curve25519\n- jose_curve25519_crypto\n- jose_curve25519_fallback\n- jose_curve25519_libdecaf\n- jose_curve25519_libsodium\n- jose_curve25519_unsupported\n- jose_curve448\n- jose_curve448_crypto\n- jose_curve448_fallback\n- jose_curve448_libdecaf\n- jose_curve448_unsupported\n- jose_json\n- jose_json_jason\n- jose_json_jiffy\n- jose_json_jsone\n- jose_json_jsx\n- jose_json_ojson\n- jose_json_poison\n- jose_json_poison_compat_encoder\n- jose_json_poison_lexical_encoder\n- jose_json_thoas\n- jose_json_unsupported\n- jose_jwa\n- jose_jwa_aes\n- jose_jwa_aes_kw\n- jose_jwa_base64url\n- jose_jwa_bench\n- jose_jwa_chacha20\n- jose_jwa_chacha20_poly1305\n- jose_jwa_concat_kdf\n- jose_jwa_curve25519\n- jose_jwa_curve448\n- jose_jwa_ed25519\n- jose_jwa_ed448\n- jose_jwa_hchacha20\n- jose_jwa_math\n- jose_jwa_pkcs1\n- jose_jwa_pkcs5\n- jose_jwa_pkcs7\n- jose_jwa_poly1305\n- jose_jwa_sha3\n- jose_jwa_unsupported\n- jose_jwa_x25519\n- jose_jwa_x448\n- jose_jwa_xchacha20\n- jose_jwa_xchacha20_poly1305\n- jose_jwe\n- jose_jwe_alg\n- jose_jwe_alg_aes_kw\n- jose_jwe_alg_c20p_kw\n- jose_jwe_alg_dir\n- jose_jwe_alg_ecdh_1pu\n- jose_jwe_alg_ecdh_es\n- jose_jwe_alg_ecdh_ss\n- jose_jwe_alg_pbes2\n- jose_jwe_alg_rsa\n- jose_jwe_alg_xc20p_kw\n- jose_jwe_enc\n- jose_jwe_enc_aes\n- jose_jwe_enc_c20p\n- jose_jwe_enc_xc20p\n- jose_jwe_zip\n- jose_jwk\n- jose_jwk_der\n- jose_jwk_kty\n- jose_jwk_kty_ec\n- jose_jwk_kty_oct\n- jose_jwk_kty_okp_ed25519\n- jose_jwk_kty_okp_ed25519ph\n- jose_jwk_kty_okp_ed448\n- jose_jwk_kty_okp_ed448ph\n- jose_jwk_kty_okp_x25519\n- jose_jwk_kty_okp_x448\n- jose_jwk_kty_rsa\n- jose_jwk_oct\n- jose_jwk_openssh_key\n- jose_jwk_pem\n- jose_jwk_set\n- jose_jwk_use_enc\n- jose_jwk_use_sig\n- jose_jws\n- jose_jws_alg\n- jose_jws_alg_ecdsa\n- jose_jws_alg_eddsa\n- jose_jws_alg_hmac\n- jose_jws_alg_none\n- jose_jws_alg_poly1305\n- jose_jws_alg_rsa_pkcs1_v1_5\n- jose_jws_alg_rsa_pss\n- jose_jwt\n- jose_public_key\n- jose_server\n- jose_sha3\n- jose_sha3_keccakf1600_driver\n- jose_sha3_keccakf1600_nif\n- jose_sha3_libdecaf\n- jose_sha3_unsupported\n- jose_sup\n- jose_xchacha20_poly1305\n- jose_xchacha20_poly1305_crypto\n- jose_xchacha20_poly1305_libsodium\n- jose_xchacha20_poly1305_unsupported\nkatana_code:\n- ktn_code\n- ktn_dodger\n- ktn_io_string\nkhepri:\n- khepri\n- khepri_adv\n- khepri_app\n- khepri_cluster\n- khepri_condition\n- khepri_event_handler\n- khepri_evf\n- khepri_export_erlang\n- khepri_import_export\n- khepri_machine\n- khepri_machine_v0\n- khepri_path\n- khepri_pattern_tree\n- khepri_payload\n- khepri_projection\n- khepri_sproc\n- khepri_sup\n- khepri_tree\n- khepri_tx\n- khepri_tx_adv\n- khepri_utils\nkhepri_mnesia_migration:\n- khepri_mnesia_migration_app\n- khepri_mnesia_migration_sup\n- kmm_utils\n- m2k_cluster_sync\n- m2k_cluster_sync_sup\n- m2k_export\n- m2k_subscriber\n- m2k_table_copy\n- m2k_table_copy_sup\n- m2k_table_copy_sup_sup\n- mnesia_to_khepri\n- mnesia_to_khepri_converter\n- mnesia_to_khepri_example_converter\nmeck:\n- meck\n- meck_args_matcher\n- meck_code\n- meck_code_gen\n- meck_cover\n- meck_expect\n- meck_history\n- meck_matcher\n- meck_proc\n- meck_ret_spec\n- meck_util\nmy_plugin:\n- my_plugin\noauth2_client:\n- jwt_helper\n- oauth2_client\nobserver_cli:\n- observer_cli\n- observer_cli_application\n- observer_cli_escriptize\n- observer_cli_ets\n- observer_cli_help\n- observer_cli_inet\n- observer_cli_lib\n- observer_cli_mnesia\n- observer_cli_plugin\n- observer_cli_port\n- observer_cli_process\n- observer_cli_store\n- observer_cli_system\nosiris:\n- osiris\n- osiris_app\n- osiris_bench\n- osiris_bloom\n- osiris_counters\n- osiris_ets\n- osiris_log\n- osiris_log_shared\n- osiris_replica\n- osiris_replica_reader\n- osiris_replica_reader_sup\n- osiris_retention\n- osiris_server_sup\n- osiris_sup\n- osiris_tracking\n- osiris_util\n- osiris_writer\nprometheus:\n- prometheus\n- prometheus_boolean\n- prometheus_buckets\n- prometheus_collector\n- prometheus_counter\n- prometheus_format\n- prometheus_gauge\n- prometheus_histogram\n- prometheus_http\n- prometheus_instrumenter\n- prometheus_metric\n- prometheus_metric_spec\n- prometheus_misc\n- prometheus_mnesia\n- prometheus_mnesia_collector\n- prometheus_model\n- prometheus_model_helpers\n- prometheus_protobuf_format\n- prometheus_quantile_summary\n- prometheus_registry\n- prometheus_summary\n- prometheus_sup\n- prometheus_test_instrumenter\n- prometheus_text_format\n- prometheus_time\n- prometheus_vm_dist_collector\n- prometheus_vm_memory_collector\n- prometheus_vm_msacc_collector\n- prometheus_vm_statistics_collector\n- prometheus_vm_system_info_collector\nproper:\n- proper\n- proper_arith\n- proper_array\n- proper_dict\n- proper_erlang_abstract_code\n- proper_fsm\n- proper_gb_sets\n- proper_gb_trees\n- proper_gen\n- proper_gen_next\n- proper_orddict\n- proper_ordsets\n- proper_prop_remover\n- proper_queue\n- proper_sa\n- proper_sets\n- proper_shrink\n- proper_statem\n- proper_symb\n- proper_target\n- proper_transformer\n- proper_types\n- proper_typeserver\n- proper_unicode\n- proper_unused_imports_remover\n- vararg\nquantile_estimator:\n- quantile\n- quantile_estimator\nra:\n- ra\n- ra_app\n- ra_aux\n- ra_bench\n- ra_counters\n- ra_dbg\n- ra_directory\n- ra_env\n- ra_ets_queue\n- ra_file\n- ra_file_handle\n- ra_flru\n- ra_leaderboard\n- ra_lib\n- ra_log\n- ra_log_cache\n- ra_log_ets\n- ra_log_meta\n- ra_log_pre_init\n- ra_log_reader\n- ra_log_segment\n- ra_log_segment_writer\n- ra_log_snapshot\n- ra_log_sup\n- ra_log_wal\n- ra_log_wal_sup\n- ra_machine\n- ra_machine_ets\n- ra_machine_simple\n- ra_metrics_ets\n- ra_monitors\n- ra_server\n- ra_server_proc\n- ra_server_sup\n- ra_server_sup_sup\n- ra_snapshot\n- ra_sup\n- ra_system\n- ra_system_recover\n- ra_system_sup\n- ra_systems_sup\nrabbit:\n- amqqueue\n- background_gc\n- code_server_cache\n- gatherer\n- gm\n- internal_user\n- lqueue\n- mc\n- mc_amqp\n- mc_amqpl\n- mc_compat\n- mc_util\n- mirrored_supervisor\n- mirrored_supervisor_sups\n- pg_local\n- pid_recomposition\n- rabbit\n- rabbit_access_control\n- rabbit_alarm\n- rabbit_amqp1_0\n- rabbit_amqp_filtex\n- rabbit_amqp_management\n- rabbit_amqp_reader\n- rabbit_amqp_session\n- rabbit_amqp_session_sup\n- rabbit_amqp_util\n- rabbit_amqp_writer\n- rabbit_amqqueue\n- rabbit_amqqueue_control\n- rabbit_amqqueue_process\n- rabbit_amqqueue_sup\n- rabbit_amqqueue_sup_sup\n- rabbit_auth_backend_internal\n- rabbit_auth_mechanism_amqplain\n- rabbit_auth_mechanism_anonymous\n- rabbit_auth_mechanism_cr_demo\n- rabbit_auth_mechanism_plain\n- rabbit_autoheal\n- rabbit_backing_queue\n- rabbit_basic\n- rabbit_binding\n- rabbit_boot_steps\n- rabbit_channel\n- rabbit_channel_interceptor\n- rabbit_channel_sup\n- rabbit_channel_sup_sup\n- rabbit_channel_tracking\n- rabbit_channel_tracking_handler\n- rabbit_classic_queue\n- rabbit_classic_queue_index_v2\n- rabbit_classic_queue_store_v2\n- rabbit_client_sup\n- rabbit_config\n- rabbit_confirms\n- rabbit_connection_helper_sup\n- rabbit_connection_sup\n- rabbit_connection_tracking\n- rabbit_connection_tracking_handler\n- rabbit_control_pbe\n- rabbit_core_ff\n- rabbit_core_metrics_gc\n- rabbit_credential_validation\n- rabbit_credential_validator\n- rabbit_credential_validator_accept_everything\n- rabbit_credential_validator_min_password_length\n- rabbit_credential_validator_password_regexp\n- rabbit_cuttlefish\n- rabbit_db\n- rabbit_db_binding\n- rabbit_db_binding_m2k_converter\n- rabbit_db_cluster\n- rabbit_db_exchange\n- rabbit_db_exchange_m2k_converter\n- rabbit_db_m2k_converter\n- rabbit_db_maintenance\n- rabbit_db_maintenance_m2k_converter\n- rabbit_db_msup\n- rabbit_db_msup_m2k_converter\n- rabbit_db_policy\n- rabbit_db_queue\n- rabbit_db_queue_m2k_converter\n- rabbit_db_rtparams\n- rabbit_db_rtparams_m2k_converter\n- rabbit_db_topic_exchange\n- rabbit_db_user\n- rabbit_db_user_m2k_converter\n- rabbit_db_vhost\n- rabbit_db_vhost_defaults\n- rabbit_db_vhost_m2k_converter\n- rabbit_dead_letter\n- rabbit_definitions\n- rabbit_definitions_hashing\n- rabbit_definitions_import_https\n- rabbit_definitions_import_local_filesystem\n- rabbit_depr_ff_extra\n- rabbit_deprecated_features\n- rabbit_diagnostics\n- rabbit_direct\n- rabbit_direct_reply_to\n- rabbit_disk_monitor\n- rabbit_epmd_monitor\n- rabbit_event_consumer\n- rabbit_exchange\n- rabbit_exchange_decorator\n- rabbit_exchange_parameters\n- rabbit_exchange_type\n- rabbit_exchange_type_direct\n- rabbit_exchange_type_fanout\n- rabbit_exchange_type_headers\n- rabbit_exchange_type_invalid\n- rabbit_exchange_type_local_random\n- rabbit_exchange_type_topic\n- rabbit_feature_flags\n- rabbit_ff_controller\n- rabbit_ff_extra\n- rabbit_ff_registry\n- rabbit_ff_registry_factory\n- rabbit_ff_registry_wrapper\n- rabbit_fhc_helpers\n- rabbit_fifo\n- rabbit_fifo_client\n- rabbit_fifo_dlx\n- rabbit_fifo_dlx_client\n- rabbit_fifo_dlx_sup\n- rabbit_fifo_dlx_worker\n- rabbit_fifo_index\n- rabbit_fifo_q\n- rabbit_fifo_v0\n- rabbit_fifo_v1\n- rabbit_fifo_v3\n- rabbit_file\n- rabbit_global_counters\n- rabbit_guid\n- rabbit_health_check\n- rabbit_khepri\n- rabbit_limiter\n- rabbit_log_channel\n- rabbit_log_connection\n- rabbit_log_mirroring\n- rabbit_log_prelaunch\n- rabbit_log_queue\n- rabbit_log_tail\n- rabbit_logger_exchange_h\n- rabbit_maintenance\n- rabbit_message_interceptor\n- rabbit_metrics\n- rabbit_mirror_queue_misc\n- rabbit_mnesia\n- rabbit_msg_size_metrics\n- rabbit_msg_store\n- rabbit_msg_store_gc\n- rabbit_networking\n- rabbit_networking_store\n- rabbit_node_monitor\n- rabbit_nodes\n- rabbit_observer_cli\n- rabbit_observer_cli_classic_queues\n- rabbit_observer_cli_quorum_queues\n- rabbit_osiris_metrics\n- rabbit_parameter_validation\n- rabbit_peer_discovery\n- rabbit_peer_discovery_classic_config\n- rabbit_peer_discovery_dns\n- rabbit_plugins\n- rabbit_policies\n- rabbit_policy\n- rabbit_policy_merge_strategy\n- rabbit_prelaunch_cluster\n- rabbit_prelaunch_enabled_plugins_file\n- rabbit_prelaunch_feature_flags\n- rabbit_prelaunch_logging\n- rabbit_priority_queue\n- rabbit_process\n- rabbit_process_flag\n- rabbit_queue_consumers\n- rabbit_queue_decorator\n- rabbit_queue_index\n- rabbit_queue_location\n- rabbit_queue_type\n- rabbit_queue_type_util\n- rabbit_quorum_memory_manager\n- rabbit_quorum_queue\n- rabbit_quorum_queue_periodic_membership_reconciliation\n- rabbit_ra_registry\n- rabbit_ra_systems\n- rabbit_reader\n- rabbit_recovery_terms\n- rabbit_release_series\n- rabbit_restartable_sup\n- rabbit_router\n- rabbit_runtime_parameters\n- rabbit_ssl\n- rabbit_stream_coordinator\n- rabbit_stream_queue\n- rabbit_stream_sac_coordinator\n- rabbit_sup\n- rabbit_sysmon_handler\n- rabbit_sysmon_minder\n- rabbit_table\n- rabbit_time_travel_dbg\n- rabbit_trace\n- rabbit_tracking\n- rabbit_tracking_store\n- rabbit_upgrade_preparation\n- rabbit_uri\n- rabbit_variable_queue\n- rabbit_version\n- rabbit_vhost\n- rabbit_vhost_limit\n- rabbit_vhost_msg_store\n- rabbit_vhost_process\n- rabbit_vhost_sup\n- rabbit_vhost_sup_sup\n- rabbit_vhost_sup_wrapper\n- rabbit_vhosts\n- rabbit_vm\n- supervised_lifecycle\n- tcp_listener\n- tcp_listener_sup\n- term_to_binary_compat\n- vhost\nrabbit_common:\n- app_utils\n- code_version\n- credit_flow\n- delegate\n- delegate_sup\n- file_handle_cache\n- gen_server2\n- mirrored_supervisor_locks\n- mnesia_sync\n- pmon\n- priority_queue\n- rabbit_amqp_connection\n- rabbit_amqqueue_common\n- rabbit_auth_backend_dummy\n- rabbit_auth_mechanism\n- rabbit_authn_backend\n- rabbit_authz_backend\n- rabbit_basic_common\n- rabbit_binary_generator\n- rabbit_binary_parser\n- rabbit_cert_info\n- rabbit_channel_common\n- rabbit_command_assembler\n- rabbit_control_misc\n- rabbit_core_metrics\n- rabbit_data_coercion\n- rabbit_date_time\n- rabbit_env\n- rabbit_error_logger_handler\n- rabbit_event\n- rabbit_framing\n- rabbit_framing_amqp_0_8\n- rabbit_framing_amqp_0_9_1\n- rabbit_heartbeat\n- rabbit_http_util\n- rabbit_json\n- rabbit_log\n- rabbit_misc\n- rabbit_net\n- rabbit_nodes_common\n- rabbit_numerical\n- rabbit_password\n- rabbit_password_hashing\n- rabbit_password_hashing_md5\n- rabbit_password_hashing_sha256\n- rabbit_password_hashing_sha512\n- rabbit_pbe\n- rabbit_peer_discovery_backend\n- rabbit_policy_validator\n- rabbit_queue_collector\n- rabbit_registry\n- rabbit_registry_class\n- rabbit_resource_monitor_misc\n- rabbit_routing_parser\n- rabbit_runtime\n- rabbit_runtime_parameter\n- rabbit_semver\n- rabbit_semver_parser\n- rabbit_ssl_options\n- rabbit_types\n- rabbit_writer\n- supervisor2\n- vm_memory_monitor\n- worker_pool\n- worker_pool_sup\n- worker_pool_worker\nrabbitmq_amqp_client:\n- rabbitmq_amqp_address\n- rabbitmq_amqp_client\nrabbitmq_amqp1_0:\n- rabbitmq_amqp1_0_noop\nrabbitmq_auth_backend_cache:\n- rabbit_auth_backend_cache\n- rabbit_auth_backend_cache_app\n- rabbit_auth_cache\n- rabbit_auth_cache_dict\n- rabbit_auth_cache_ets\n- rabbit_auth_cache_ets_segmented\n- rabbit_auth_cache_ets_segmented_stateless\nrabbitmq_auth_backend_http:\n- rabbit_auth_backend_http\n- rabbit_auth_backend_http_app\nrabbitmq_auth_backend_ldap:\n- rabbit_auth_backend_ldap\n- rabbit_auth_backend_ldap_app\n- rabbit_auth_backend_ldap_util\n- rabbit_log_ldap\nrabbitmq_auth_backend_oauth2:\n- Elixir.RabbitMQ.CLI.Ctl.Commands.AddSigningKeyCommand\n- Elixir.RabbitMQ.CLI.Ctl.Commands.AddUaaKeyCommand\n- rabbit_auth_backend_oauth2\n- rabbit_auth_backend_oauth2_app\n- rabbit_oauth2_keycloak\n- rabbit_oauth2_provider\n- rabbit_oauth2_rar\n- rabbit_oauth2_resource_server\n- rabbit_oauth2_schema\n- rabbit_oauth2_scope\n- uaa_jwks\n- uaa_jwt\n- uaa_jwt_jwk\n- uaa_jwt_jwt\n- wildcard\nrabbitmq_auth_mechanism_ssl:\n- rabbit_auth_mechanism_ssl\n- rabbit_auth_mechanism_ssl_app\nrabbitmq_aws:\n- rabbitmq_aws\n- rabbitmq_aws_app\n- rabbitmq_aws_config\n- rabbitmq_aws_json\n- rabbitmq_aws_sign\n- rabbitmq_aws_sup\n- rabbitmq_aws_urilib\n- rabbitmq_aws_xml\nrabbitmq_consistent_hash_exchange:\n- Elixir.RabbitMQ.CLI.Diagnostics.Commands.ConsistentHashExchangeRingStateCommand\n- rabbit_db_ch_exchange\n- rabbit_db_ch_exchange_m2k_converter\n- rabbit_exchange_type_consistent_hash\nrabbitmq_ct_client_helpers:\n- rabbit_ct_client_helpers\nrabbitmq_ct_helpers:\n- ct_master_event_fork\n- ct_master_fork\n- ct_master_logs_fork\n- cth_log_redirect_any_domains\n- rabbit_control_helper\n- rabbit_ct_broker_helpers\n- rabbit_ct_config_schema\n- rabbit_ct_helpers\n- rabbit_ct_proper_helpers\n- rabbit_ct_vm_helpers\n- rabbit_mgmt_test_util\n- stream_test_utils\nrabbitmq_event_exchange:\n- rabbit_event_exchange_decorator\n- rabbit_exchange_type_event\nrabbitmq_federation:\n- Elixir.RabbitMQ.CLI.Ctl.Commands.FederationStatusCommand\n- Elixir.RabbitMQ.CLI.Ctl.Commands.RestartFederationLinkCommand\n- rabbit_federation_app\n- rabbit_federation_db\n- rabbit_federation_event\n- rabbit_federation_exchange\n- rabbit_federation_exchange_link\n- rabbit_federation_exchange_link_sup_sup\n- rabbit_federation_link_sup\n- rabbit_federation_link_util\n- rabbit_federation_parameters\n- rabbit_federation_pg\n- rabbit_federation_queue\n- rabbit_federation_queue_link\n- rabbit_federation_queue_link_sup_sup\n- rabbit_federation_status\n- rabbit_federation_sup\n- rabbit_federation_upstream\n- rabbit_federation_upstream_exchange\n- rabbit_federation_util\n- rabbit_log_federation\nrabbitmq_federation_management:\n- rabbit_federation_mgmt\nrabbitmq_federation_prometheus:\n- rabbit_federation_prometheus_app\n- rabbit_federation_prometheus_collector\n- rabbit_federation_prometheus_sup\nrabbitmq_jms_topic_exchange:\n- rabbit_db_jms_exchange\n- rabbit_db_jms_exchange_m2k_converter\n- rabbit_jms_topic_exchange\n- sjx_evaluator\nrabbitmq_management:\n- rabbit_mgmt_app\n- rabbit_mgmt_cors\n- rabbit_mgmt_csp\n- rabbit_mgmt_db\n- rabbit_mgmt_db_cache\n- rabbit_mgmt_db_cache_sup\n- rabbit_mgmt_dispatcher\n- rabbit_mgmt_extension\n- rabbit_mgmt_features\n- rabbit_mgmt_headers\n- rabbit_mgmt_hsts\n- rabbit_mgmt_load_definitions\n- rabbit_mgmt_login\n- rabbit_mgmt_nodes\n- rabbit_mgmt_oauth_bootstrap\n- rabbit_mgmt_reset_handler\n- rabbit_mgmt_schema\n- rabbit_mgmt_stats\n- rabbit_mgmt_sup\n- rabbit_mgmt_sup_sup\n- rabbit_mgmt_util\n- rabbit_mgmt_wm_aliveness_test\n- rabbit_mgmt_wm_auth\n- rabbit_mgmt_wm_auth_attempts\n- rabbit_mgmt_wm_binding\n- rabbit_mgmt_wm_bindings\n- rabbit_mgmt_wm_channel\n- rabbit_mgmt_wm_channels\n- rabbit_mgmt_wm_channels_vhost\n- rabbit_mgmt_wm_cluster_name\n- rabbit_mgmt_wm_connection\n- rabbit_mgmt_wm_connection_channels\n- rabbit_mgmt_wm_connection_sessions\n- rabbit_mgmt_wm_connection_user_name\n- rabbit_mgmt_wm_connections\n- rabbit_mgmt_wm_connections_vhost\n- rabbit_mgmt_wm_consumers\n- rabbit_mgmt_wm_definitions\n- rabbit_mgmt_wm_deprecated_features\n- rabbit_mgmt_wm_environment\n- rabbit_mgmt_wm_exchange\n- rabbit_mgmt_wm_exchange_publish\n- rabbit_mgmt_wm_exchanges\n- rabbit_mgmt_wm_extensions\n- rabbit_mgmt_wm_feature_flag_enable\n- rabbit_mgmt_wm_feature_flags\n- rabbit_mgmt_wm_global_parameter\n- rabbit_mgmt_wm_global_parameters\n- rabbit_mgmt_wm_hash_password\n- rabbit_mgmt_wm_health_check_alarms\n- rabbit_mgmt_wm_health_check_certificate_expiration\n- rabbit_mgmt_wm_health_check_local_alarms\n- rabbit_mgmt_wm_health_check_node_is_quorum_critical\n- rabbit_mgmt_wm_health_check_port_listener\n- rabbit_mgmt_wm_health_check_protocol_listener\n- rabbit_mgmt_wm_health_check_virtual_hosts\n- rabbit_mgmt_wm_healthchecks\n- rabbit_mgmt_wm_limit\n- rabbit_mgmt_wm_limits\n- rabbit_mgmt_wm_login\n- rabbit_mgmt_wm_node\n- rabbit_mgmt_wm_node_memory\n- rabbit_mgmt_wm_node_memory_ets\n- rabbit_mgmt_wm_nodes\n- rabbit_mgmt_wm_operator_policies\n- rabbit_mgmt_wm_operator_policy\n- rabbit_mgmt_wm_overview\n- rabbit_mgmt_wm_parameter\n- rabbit_mgmt_wm_parameters\n- rabbit_mgmt_wm_permission\n- rabbit_mgmt_wm_permissions\n- rabbit_mgmt_wm_permissions_user\n- rabbit_mgmt_wm_permissions_vhost\n- rabbit_mgmt_wm_policies\n- rabbit_mgmt_wm_policy\n- rabbit_mgmt_wm_queue\n- rabbit_mgmt_wm_queue_actions\n- rabbit_mgmt_wm_queue_get\n- rabbit_mgmt_wm_queue_purge\n- rabbit_mgmt_wm_queues\n- rabbit_mgmt_wm_quorum_queue_replicas_add_member\n- rabbit_mgmt_wm_quorum_queue_replicas_delete_member\n- rabbit_mgmt_wm_quorum_queue_replicas_grow\n- rabbit_mgmt_wm_quorum_queue_replicas_shrink\n- rabbit_mgmt_wm_quorum_queue_status\n- rabbit_mgmt_wm_rebalance_queues\n- rabbit_mgmt_wm_redirect\n- rabbit_mgmt_wm_reset\n- rabbit_mgmt_wm_static\n- rabbit_mgmt_wm_topic_permission\n- rabbit_mgmt_wm_topic_permissions\n- rabbit_mgmt_wm_topic_permissions_user\n- rabbit_mgmt_wm_topic_permissions_vhost\n- rabbit_mgmt_wm_user\n- rabbit_mgmt_wm_user_limit\n- rabbit_mgmt_wm_user_limits\n- rabbit_mgmt_wm_users\n- rabbit_mgmt_wm_users_bulk_delete\n- rabbit_mgmt_wm_version\n- rabbit_mgmt_wm_vhost\n- rabbit_mgmt_wm_vhost_deletion_protection\n- rabbit_mgmt_wm_vhost_restart\n- rabbit_mgmt_wm_vhosts\n- rabbit_mgmt_wm_whoami\nrabbitmq_management_agent:\n- Elixir.RabbitMQ.CLI.Ctl.Commands.ResetStatsDbCommand\n- exometer_slide\n- rabbit_mgmt_agent_app\n- rabbit_mgmt_agent_config\n- rabbit_mgmt_agent_sup\n- rabbit_mgmt_agent_sup_sup\n- rabbit_mgmt_data\n- rabbit_mgmt_data_compat\n- rabbit_mgmt_db_handler\n- rabbit_mgmt_external_stats\n- rabbit_mgmt_ff\n- rabbit_mgmt_format\n- rabbit_mgmt_gc\n- rabbit_mgmt_metrics_collector\n- rabbit_mgmt_metrics_gc\n- rabbit_mgmt_storage\nrabbitmq_mqtt:\n- Elixir.RabbitMQ.CLI.Ctl.Commands.ListMqttConnectionsCommand\n- mc_mqtt\n- rabbit_mqtt\n- rabbit_mqtt_confirms\n- rabbit_mqtt_ff\n- rabbit_mqtt_internal_event_handler\n- rabbit_mqtt_keepalive\n- rabbit_mqtt_packet\n- rabbit_mqtt_processor\n- rabbit_mqtt_qos0_queue\n- rabbit_mqtt_reader\n- rabbit_mqtt_retained_msg_store\n- rabbit_mqtt_retained_msg_store_dets\n- rabbit_mqtt_retained_msg_store_ets\n- rabbit_mqtt_retained_msg_store_noop\n- rabbit_mqtt_retainer\n- rabbit_mqtt_retainer_sup\n- rabbit_mqtt_sup\n- rabbit_mqtt_util\nrabbitmq_peer_discovery_aws:\n- rabbit_peer_discovery_aws\n- rabbitmq_peer_discovery_aws\nrabbitmq_peer_discovery_common:\n- rabbit_peer_discovery_cleanup\n- rabbit_peer_discovery_common_app\n- rabbit_peer_discovery_common_sup\n- rabbit_peer_discovery_config\n- rabbit_peer_discovery_httpc\n- rabbit_peer_discovery_util\nrabbitmq_peer_discovery_consul:\n- rabbit_peer_discovery_consul\n- rabbitmq_peer_discovery_consul\n- rabbitmq_peer_discovery_consul_app\n- rabbitmq_peer_discovery_consul_health_check_helper\n- rabbitmq_peer_discovery_consul_sup\nrabbitmq_peer_discovery_etcd:\n- rabbit_peer_discovery_etcd\n- rabbitmq_peer_discovery_etcd\n- rabbitmq_peer_discovery_etcd_app\n- rabbitmq_peer_discovery_etcd_sup\n- rabbitmq_peer_discovery_etcd_v3_client\nrabbitmq_peer_discovery_k8s:\n- rabbit_peer_discovery_k8s\n- rabbitmq_peer_discovery_k8s\n- rabbitmq_peer_discovery_k8s_app\n- rabbitmq_peer_discovery_k8s_node_monitor\n- rabbitmq_peer_discovery_k8s_sup\nrabbitmq_prelaunch:\n- rabbit_boot_state\n- rabbit_boot_state_sup\n- rabbit_boot_state_systemd\n- rabbit_boot_state_xterm_titlebar\n- rabbit_logger_fmt_helpers\n- rabbit_logger_json_fmt\n- rabbit_logger_std_h\n- rabbit_logger_text_fmt\n- rabbit_prelaunch\n- rabbit_prelaunch_app\n- rabbit_prelaunch_conf\n- rabbit_prelaunch_dist\n- rabbit_prelaunch_early_logging\n- rabbit_prelaunch_erlang_compat\n- rabbit_prelaunch_errors\n- rabbit_prelaunch_file\n- rabbit_prelaunch_sighandler\n- rabbit_prelaunch_sup\nrabbitmq_prometheus:\n- prometheus_process_collector\n- prometheus_rabbitmq_alarm_metrics_collector\n- prometheus_rabbitmq_core_metrics_collector\n- prometheus_rabbitmq_dynamic_collector\n- prometheus_rabbitmq_global_metrics_collector\n- prometheus_rabbitmq_message_size_metrics_collector\n- rabbit_prometheus_app\n- rabbit_prometheus_dispatcher\n- rabbit_prometheus_handler\nrabbitmq_random_exchange:\n- rabbit_exchange_type_random\nrabbitmq_recent_history_exchange:\n- rabbit_db_rh_exchange\n- rabbit_db_rh_exchange_m2k_converter\n- rabbit_exchange_type_recent_history\nrabbitmq_sharding:\n- rabbit_sharding_exchange_decorator\n- rabbit_sharding_exchange_type_modulus_hash\n- rabbit_sharding_interceptor\n- rabbit_sharding_policy_validator\n- rabbit_sharding_shard\n- rabbit_sharding_util\nrabbitmq_shovel:\n- Elixir.RabbitMQ.CLI.Ctl.Commands.DeleteShovelCommand\n- Elixir.RabbitMQ.CLI.Ctl.Commands.RestartShovelCommand\n- Elixir.RabbitMQ.CLI.Ctl.Commands.ShovelStatusCommand\n- rabbit_amqp091_shovel\n- rabbit_amqp10_shovel\n- rabbit_log_shovel\n- rabbit_shovel\n- rabbit_shovel_behaviour\n- rabbit_shovel_config\n- rabbit_shovel_dyn_worker_sup\n- rabbit_shovel_dyn_worker_sup_sup\n- rabbit_shovel_locks\n- rabbit_shovel_parameters\n- rabbit_shovel_status\n- rabbit_shovel_sup\n- rabbit_shovel_util\n- rabbit_shovel_worker\n- rabbit_shovel_worker_sup\nrabbitmq_shovel_management:\n- rabbit_shovel_mgmt_shovel\n- rabbit_shovel_mgmt_shovels\n- rabbit_shovel_mgmt_util\nrabbitmq_shovel_prometheus:\n- rabbit_shovel_prometheus_app\n- rabbit_shovel_prometheus_collector\n- rabbit_shovel_prometheus_sup\nrabbitmq_stomp:\n- Elixir.RabbitMQ.CLI.Ctl.Commands.ListStompConnectionsCommand\n- rabbit_stomp\n- rabbit_stomp_client_sup\n- rabbit_stomp_connection_info\n- rabbit_stomp_frame\n- rabbit_stomp_internal_event_handler\n- rabbit_stomp_processor\n- rabbit_stomp_reader\n- rabbit_stomp_sup\n- rabbit_stomp_util\nrabbitmq_stream:\n- Elixir.RabbitMQ.CLI.Ctl.Commands.AddSuperStreamCommand\n- Elixir.RabbitMQ.CLI.Ctl.Commands.DeleteSuperStreamCommand\n- Elixir.RabbitMQ.CLI.Ctl.Commands.ListStreamConnectionsCommand\n- Elixir.RabbitMQ.CLI.Ctl.Commands.ListStreamConsumerGroupsCommand\n- Elixir.RabbitMQ.CLI.Ctl.Commands.ListStreamConsumersCommand\n- Elixir.RabbitMQ.CLI.Ctl.Commands.ListStreamGroupConsumersCommand\n- Elixir.RabbitMQ.CLI.Ctl.Commands.ListStreamPublishersCommand\n- Elixir.RabbitMQ.CLI.Ctl.Commands.ListStreamTrackingCommand\n- rabbit_stream\n- rabbit_stream_connection_sup\n- rabbit_stream_manager\n- rabbit_stream_metrics\n- rabbit_stream_metrics_gc\n- rabbit_stream_reader\n- rabbit_stream_sup\n- rabbit_stream_utils\nrabbitmq_stream_common:\n- rabbit_stream_core\nrabbitmq_stream_management:\n- rabbit_stream_connection_consumers_mgmt\n- rabbit_stream_connection_mgmt\n- rabbit_stream_connection_publishers_mgmt\n- rabbit_stream_connections_mgmt\n- rabbit_stream_connections_vhost_mgmt\n- rabbit_stream_consumers_mgmt\n- rabbit_stream_management_utils\n- rabbit_stream_mgmt_db\n- rabbit_stream_publishers_mgmt\n- rabbit_stream_tracking_mgmt\nrabbitmq_top:\n- rabbit_top_app\n- rabbit_top_extension\n- rabbit_top_sup\n- rabbit_top_util\n- rabbit_top_wm_ets_tables\n- rabbit_top_wm_process\n- rabbit_top_wm_processes\n- rabbit_top_worker\nrabbitmq_tracing:\n- rabbit_tracing_app\n- rabbit_tracing_consumer\n- rabbit_tracing_consumer_sup\n- rabbit_tracing_files\n- rabbit_tracing_mgmt\n- rabbit_tracing_sup\n- rabbit_tracing_traces\n- rabbit_tracing_util\n- rabbit_tracing_wm_file\n- rabbit_tracing_wm_files\n- rabbit_tracing_wm_trace\n- rabbit_tracing_wm_traces\nrabbitmq_trust_store:\n- rabbit_trust_store\n- rabbit_trust_store_app\n- rabbit_trust_store_certificate_provider\n- rabbit_trust_store_file_provider\n- rabbit_trust_store_http_provider\n- rabbit_trust_store_sup\nrabbitmq_web_dispatch:\n- rabbit_cowboy_middleware\n- rabbit_cowboy_redirect\n- rabbit_cowboy_stream_h\n- rabbit_web_dispatch\n- rabbit_web_dispatch_access_control\n- rabbit_web_dispatch_app\n- rabbit_web_dispatch_listing_handler\n- rabbit_web_dispatch_registry\n- rabbit_web_dispatch_sup\n- rabbit_web_dispatch_util\n- webmachine_log\n- webmachine_log_handler\nrabbitmq_web_mqtt:\n- Elixir.RabbitMQ.CLI.Ctl.Commands.ListWebMqttConnectionsCommand\n- rabbit_web_mqtt_app\n- rabbit_web_mqtt_handler\n- rabbit_web_mqtt_stream_handler\nrabbitmq_web_mqtt_examples:\n- rabbit_web_mqtt_examples_app\nrabbitmq_web_stomp:\n- rabbit_web_stomp_app\n- rabbit_web_stomp_connection_sup\n- rabbit_web_stomp_handler\n- rabbit_web_stomp_internal_event_handler\n- rabbit_web_stomp_listener\n- rabbit_web_stomp_middleware\n- rabbit_web_stomp_stream_handler\n- rabbit_web_stomp_sup\nrabbitmq_web_stomp_examples:\n- rabbit_web_stomp_examples_app\nranch:\n- ranch\n- ranch_acceptor\n- ranch_acceptors_sup\n- ranch_app\n- ranch_conns_sup\n- ranch_conns_sup_sup\n- ranch_crc32c\n- ranch_embedded_sup\n- ranch_listener_sup\n- ranch_protocol\n- ranch_proxy_header\n- ranch_server\n- ranch_server_proxy\n- ranch_ssl\n- ranch_sup\n- ranch_tcp\n- ranch_transport\nrebar3_format:\n- default_formatter\n- erlfmt_formatter\n- otp_formatter\n- rebar3_ast_formatter\n- rebar3_format\n- rebar3_format_prv\n- rebar3_formatter\n- sr_formatter\nrecon:\n- recon\n- recon_alloc\n- recon_lib\n- recon_map\n- recon_rec\n- recon_trace\nredbug:\n- redbug\n- redbug_compiler\n- redbug_dtop\n- redbug_lexer\n- redbug_parser\n- redbug_targ\nseshat:\n- seshat\n- seshat_app\n- seshat_counters_server\n- seshat_sup\nstdout_formatter:\n- stdout_formatter\n- stdout_formatter_paragraph\n- stdout_formatter_table\n- stdout_formatter_utils\nsyslog:\n- syslog\n- syslog_error_h\n- syslog_lager_backend\n- syslog_lib\n- syslog_logger\n- syslog_logger_h\n- syslog_monitor\n- syslog_rfc3164\n- syslog_rfc5424\nsysmon_handler:\n- sysmon_handler_app\n- sysmon_handler_example_handler\n- sysmon_handler_filter\n- sysmon_handler_sup\n- sysmon_handler_testhandler\nsystemd:\n- systemd\n- systemd_app\n- systemd_journal_h\n- systemd_kmsg_formatter\n- systemd_protocol\n- systemd_socket\n- systemd_sup\n- systemd_watchdog\nthoas:\n- thoas\n- thoas_decode\n- thoas_encode\ntrust_store_http:\n- trust_store_http\n- trust_store_http_app\n- trust_store_http_sup\n- trust_store_invalid_handler\n- trust_store_list_handler\n"
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins.mk",
          "type": "blob",
          "size": 1.44140625,
          "content": "# This is the list of Tier-1 plugins shipped with a release.\n#\n# IMPORTANT: This list is overridden in the server-release Concourse\n# pipeline: Concourse takes all tested plugins and put them in the\n# release. So if you want to add or remove a plugin to the distribution,\n# you need to update the server-release pipeline!\n\nPLUGINS := rabbitmq_amqp1_0 \\\n\t   rabbitmq_auth_backend_cache \\\n\t   rabbitmq_auth_backend_http \\\n\t   rabbitmq_auth_backend_ldap \\\n\t   rabbitmq_auth_backend_oauth2 \\\n\t   rabbitmq_auth_mechanism_ssl \\\n\t   rabbitmq_consistent_hash_exchange \\\n\t   rabbitmq_event_exchange \\\n\t   rabbitmq_federation \\\n\t   rabbitmq_federation_management \\\n\t   rabbitmq_federation_prometheus \\\n\t   rabbitmq_jms_topic_exchange \\\n\t   rabbitmq_management \\\n\t   rabbitmq_management_agent \\\n\t   rabbitmq_mqtt \\\n\t   rabbitmq_peer_discovery_aws \\\n\t   rabbitmq_peer_discovery_common \\\n\t   rabbitmq_peer_discovery_consul \\\n\t   rabbitmq_peer_discovery_etcd \\\n\t   rabbitmq_peer_discovery_k8s \\\n\t   rabbitmq_prometheus \\\n\t   rabbitmq_random_exchange \\\n\t   rabbitmq_recent_history_exchange \\\n\t   rabbitmq_sharding \\\n\t   rabbitmq_shovel \\\n\t   rabbitmq_shovel_management \\\n\t   rabbitmq_shovel_prometheus \\\n\t   rabbitmq_stomp \\\n\t   rabbitmq_stream \\\n\t   rabbitmq_stream_management \\\n\t   rabbitmq_top \\\n\t   rabbitmq_tracing \\\n\t   rabbitmq_trust_store \\\n\t   rabbitmq_web_dispatch \\\n\t   rabbitmq_web_mqtt \\\n\t   rabbitmq_web_mqtt_examples \\\n\t   rabbitmq_web_stomp \\\n\t   rabbitmq_web_stomp_examples\n"
        },
        {
          "name": "rabbitmq-components.mk",
          "type": "blob",
          "size": 6.234375,
          "content": "ifeq ($(.DEFAULT_GOAL),)\n# Define default goal to `all` because this file defines some targets\n# before the inclusion of erlang.mk leading to the wrong target becoming\n# the default.\n.DEFAULT_GOAL = all\nendif\n\n# PROJECT_VERSION defaults to:\n#   1. the version exported by environment;\n#   2. the version stored in `git-revisions.txt`, if it exists;\n#   3. a version based on git-describe(1), if it is a Git clone;\n#   4. 0.0.0\n#\n# Note that in the case where git-describe(1) is used\n# (e.g. during development), running \"git gc\" may help\n# improve the performance.\n\nPROJECT_VERSION := $(RABBITMQ_VERSION)\n\nifeq ($(PROJECT_VERSION),)\nifneq ($(wildcard git-revisions.txt),)\nPROJECT_VERSION = $(shell \\\n\thead -n1 git-revisions.txt | \\\n\tawk '{print $$$(words $(PROJECT_DESCRIPTION) version);}')\nelse\nPROJECT_VERSION = $(shell \\\n\t(git describe --dirty --abbrev=7 --tags --always --first-parent \\\n\t\t2>/dev/null || echo 0.0.0) | \\\n\t\tsed -e 's/^v//' -e 's/_/./g' -e 's/-/+/' -e 's/-/./g')\nendif\nendif\n\n# --------------------------------------------------------------------\n# RabbitMQ components.\n# --------------------------------------------------------------------\n\n# Third-party dependencies version pinning.\n#\n# We do that in this file, which is included by all projects, to ensure\n# all projects use the same versions. It avoids conflicts.\n\ndep_accept = hex 0.3.5\ndep_cowboy = hex 2.12.0\ndep_cowlib = hex 2.13.0\ndep_credentials_obfuscation = hex 3.4.0\ndep_cuttlefish = hex 3.4.0\ndep_gen_batch_server = hex 0.8.8\ndep_jose = hex 1.11.10\ndep_khepri = hex 0.16.0\ndep_khepri_mnesia_migration = hex 0.7.1\ndep_osiris = git https://github.com/rabbitmq/osiris v1.8.5\ndep_prometheus = hex 4.11.0\ndep_ra = hex 2.14.0\ndep_ranch = hex 2.1.0\ndep_recon = hex 2.5.6\ndep_redbug = hex 2.0.7\ndep_systemd = hex 0.6.1\ndep_thoas = hex 1.2.1\ndep_observer_cli = hex 1.7.5\ndep_seshat = git https://github.com/rabbitmq/seshat v0.6.1\ndep_stdout_formatter = hex 0.2.4\ndep_sysmon_handler = hex 1.3.0\n\n# RabbitMQ applications found in the monorepo.\n#\n# Note that rabbitmq_server_release is not a real application\n# but is the name used in the top-level Makefile.\n\nRABBITMQ_BUILTIN = \\\n\tamqp10_client \\\n\tamqp10_common \\\n\tamqp_client \\\n\toauth2_client \\\n\trabbit \\\n\trabbit_common \\\n\trabbitmq_amqp1_0 \\\n\trabbitmq_amqp_client \\\n\trabbitmq_auth_backend_cache \\\n\trabbitmq_auth_backend_http \\\n\trabbitmq_auth_backend_ldap \\\n\trabbitmq_auth_backend_oauth2 \\\n\trabbitmq_auth_mechanism_ssl \\\n\trabbitmq_aws \\\n\trabbitmq_cli \\\n\trabbitmq_codegen \\\n\trabbitmq_consistent_hash_exchange \\\n\trabbitmq_ct_client_helpers \\\n\trabbitmq_ct_helpers \\\n\trabbitmq_event_exchange \\\n\trabbitmq_federation \\\n\trabbitmq_federation_management \\\n\trabbitmq_federation_prometheus \\\n\trabbitmq_jms_topic_exchange \\\n\trabbitmq_management \\\n\trabbitmq_management_agent \\\n\trabbitmq_mqtt \\\n\trabbitmq_peer_discovery_aws \\\n\trabbitmq_peer_discovery_common \\\n\trabbitmq_peer_discovery_consul \\\n\trabbitmq_peer_discovery_etcd \\\n\trabbitmq_peer_discovery_k8s \\\n\trabbitmq_prelaunch \\\n\trabbitmq_prometheus \\\n\trabbitmq_random_exchange \\\n\trabbitmq_recent_history_exchange \\\n    rabbitmq_server_release \\\n\trabbitmq_sharding \\\n\trabbitmq_shovel \\\n\trabbitmq_shovel_management \\\n\trabbitmq_stomp \\\n\trabbitmq_stream \\\n\trabbitmq_stream_common \\\n\trabbitmq_stream_management \\\n\trabbitmq_top \\\n\trabbitmq_tracing \\\n\trabbitmq_trust_store \\\n\trabbitmq_web_dispatch \\\n\trabbitmq_web_mqtt \\\n\trabbitmq_web_mqtt_examples \\\n\trabbitmq_web_stomp \\\n\trabbitmq_web_stomp_examples \\\n\ttrust_store_http\n\n# Applications outside of the monorepo maintained by Team RabbitMQ.\n\nRABBITMQ_COMMUNITY = \\\n\trabbitmq_auth_backend_amqp \\\n\trabbitmq_boot_steps_visualiser \\\n\trabbitmq_delayed_message_exchange \\\n\trabbitmq_lvc_exchange \\\n\trabbitmq_management_exchange \\\n\trabbitmq_management_themes \\\n\trabbitmq_message_timestamp \\\n\trabbitmq_metronome \\\n\trabbitmq_routing_node_stamp \\\n\trabbitmq_rtopic_exchange\n\ncommunity_dep = git git@github.com:rabbitmq/$1.git $(if $2,$2,main)\ndep_rabbitmq_auth_backend_amqp = $(call community_dep,rabbitmq-auth-backend-amqp)\ndep_rabbitmq_boot_steps_visualiser = $(call community_dep,rabbitmq-boot-steps-visualiser,master)\ndep_rabbitmq_delayed_message_exchange = $(call community_dep,rabbitmq-delayed-message-exchange)\ndep_rabbitmq_lvc_exchange = $(call community_dep,rabbitmq-lvc-exchange)\ndep_rabbitmq_management_exchange = $(call community_dep,rabbitmq-management-exchange)\ndep_rabbitmq_management_themes = $(call community_dep,rabbitmq-management-themes,master)\ndep_rabbitmq_message_timestamp = $(call community_dep,rabbitmq-message-timestamp)\ndep_rabbitmq_metronome = $(call community_dep,rabbitmq-metronome,master)\ndep_rabbitmq_routing_node_stamp = $(call community_dep,rabbitmq-routing-node-stamp)\ndep_rabbitmq_rtopic_exchange = $(call community_dep,rabbitmq-rtopic-exchange)\n\n# All RabbitMQ applications.\n\nRABBITMQ_COMPONENTS = $(RABBITMQ_BUILTIN) $(RABBITMQ_COMMUNITY)\n\n# Erlang.mk does not rebuild dependencies by default, once they were\n# compiled once, except for those listed in the `$(FORCE_REBUILD)`\n# variable.\n#\n# We want all RabbitMQ components to always be rebuilt: this eases\n# the work on several components at the same time.\n\nFORCE_REBUILD = $(RABBITMQ_COMPONENTS)\n\n# We disable autopatching for community plugins as they sit in\n# their own repository and we want to avoid polluting the git\n# status with changes that should not be committed.\nNO_AUTOPATCH += $(RABBITMQ_COMMUNITY)\n\n# --------------------------------------------------------------------\n# Component distribution.\n# --------------------------------------------------------------------\n\nlist-dist-deps::\n\t@:\n\nprepare-dist::\n\t@:\n\n# --------------------------------------------------------------------\n# RabbitMQ-specific settings.\n# --------------------------------------------------------------------\n\n# If the top-level project is a RabbitMQ component, we override\n# $(DEPS_DIR) for this project to point to the top-level's one.\n#\n# We do the same for $(ERLANG_MK_TMP) as we want to keep the\n# beam cache regardless of where we build. We also want to\n# share Hex tarballs.\n\nifneq ($(PROJECT),rabbitmq_server_release)\nDEPS_DIR ?= $(abspath ..)\nERLANG_MK_TMP ?= $(abspath ../../.erlang.mk)\nDISABLE_DISTCLEAN = 1\nendif\n\n# We disable `make distclean` so $(DEPS_DIR) is not accidentally removed.\n\nifeq ($(DISABLE_DISTCLEAN),1)\nifneq ($(filter distclean distclean-deps,$(MAKECMDGOALS)),)\nSKIP_DEPS = 1\nendif\nendif\n"
        },
        {
          "name": "rabbitmq.bzl",
          "type": "blob",
          "size": 10.9970703125,
          "content": "load(\n    \"@rules_erlang//:erlang_app.bzl\",\n    \"DEFAULT_ERLC_OPTS\",\n    \"DEFAULT_TEST_ERLC_OPTS\",\n    \"erlang_app\",\n    \"test_erlang_app\",\n)\nload(\n    \"@rules_erlang//:ct.bzl\",\n    \"assert_suites2\",\n    \"ct_test\",\n)\nload(\"//:rabbitmq_home.bzl\", \"rabbitmq_home\")\nload(\"//:rabbitmq_run.bzl\", \"rabbitmq_run\")\n\ndef without(item, elements):\n    c = list(elements)\n    c.remove(item)\n    return c\n\nSTARTS_BACKGROUND_BROKER_TAG = \"starts-background-broker\"\n\nMIXED_VERSION_CLUSTER_TAG = \"mixed-version-cluster\"\n\nRABBITMQ_ERLC_OPTS = DEFAULT_ERLC_OPTS + [\n    \"-DINSTR_MOD=gm\",\n]\n\nRABBITMQ_TEST_ERLC_OPTS = DEFAULT_TEST_ERLC_OPTS + [\n    \"+nowarn_export_all\",\n    \"-DINSTR_MOD=gm\",\n]\n\nRABBITMQ_DIALYZER_OPTS = [\n    \"-Werror_handling\",\n    \"-Wunmatched_returns\",\n    \"-Wunknown\",\n]\n\nAPP_VERSION = \"4.0.0\"\n\nBROKER_VERSION_REQUIREMENTS_ANY = \"\"\"\n\t{broker_version_requirements, []}\n\"\"\"\n\nALL_PLUGINS = [\n    \"//deps/rabbit:erlang_app\",\n    \"//deps/rabbitmq_amqp1_0:erlang_app\",\n    \"//deps/rabbitmq_auth_backend_cache:erlang_app\",\n    \"//deps/rabbitmq_auth_backend_http:erlang_app\",\n    \"//deps/rabbitmq_auth_backend_ldap:erlang_app\",\n    \"//deps/rabbitmq_auth_backend_oauth2:erlang_app\",\n    \"//deps/rabbitmq_auth_mechanism_ssl:erlang_app\",\n    \"//deps/rabbitmq_consistent_hash_exchange:erlang_app\",\n    \"//deps/rabbitmq_event_exchange:erlang_app\",\n    \"//deps/rabbitmq_federation:erlang_app\",\n    \"//deps/rabbitmq_federation_management:erlang_app\",\n    \"//deps/rabbitmq_federation_prometheus:erlang_app\",\n    \"//deps/rabbitmq_jms_topic_exchange:erlang_app\",\n    \"//deps/rabbitmq_management:erlang_app\",\n    \"//deps/rabbitmq_mqtt:erlang_app\",\n    \"//deps/rabbitmq_peer_discovery_aws:erlang_app\",\n    \"//deps/rabbitmq_peer_discovery_consul:erlang_app\",\n    \"//deps/rabbitmq_peer_discovery_etcd:erlang_app\",\n    \"//deps/rabbitmq_peer_discovery_k8s:erlang_app\",\n    \"//deps/rabbitmq_prometheus:erlang_app\",\n    \"//deps/rabbitmq_random_exchange:erlang_app\",\n    \"//deps/rabbitmq_recent_history_exchange:erlang_app\",\n    \"//deps/rabbitmq_sharding:erlang_app\",\n    \"//deps/rabbitmq_shovel:erlang_app\",\n    \"//deps/rabbitmq_shovel_management:erlang_app\",\n    \"//deps/rabbitmq_shovel_prometheus:erlang_app\",\n    \"//deps/rabbitmq_stomp:erlang_app\",\n    \"//deps/rabbitmq_stream:erlang_app\",\n    \"//deps/rabbitmq_stream_management:erlang_app\",\n    \"//deps/rabbitmq_top:erlang_app\",\n    \"//deps/rabbitmq_tracing:erlang_app\",\n    \"//deps/rabbitmq_trust_store:erlang_app\",\n    \"//deps/rabbitmq_web_dispatch:erlang_app\",\n    \"//deps/rabbitmq_web_mqtt:erlang_app\",\n    \"//deps/rabbitmq_web_mqtt_examples:erlang_app\",\n    \"//deps/rabbitmq_web_stomp:erlang_app\",\n    \"//deps/rabbitmq_web_stomp_examples:erlang_app\",\n]\n\nLABELS_WITH_TEST_VERSIONS = [\n    \"//deps/amqp10_common:erlang_app\",\n    \"//deps/rabbit_common:erlang_app\",\n    \"//deps/rabbitmq_prelaunch:erlang_app\",\n    \"//deps/rabbit:erlang_app\",\n]\n\ndef all_plugins(rabbitmq_workspace = \"@rabbitmq-server\"):\n    return [\n        Label(\"{}{}\".format(rabbitmq_workspace, p))\n        for p in ALL_PLUGINS\n    ]\n\ndef with_test_versions(deps):\n    r = []\n    for d in deps:\n        if d in LABELS_WITH_TEST_VERSIONS:\n            r.append(d.replace(\":erlang_app\", \":test_erlang_app\"))\n        else:\n            r.append(d)\n    return r\n\ndef rabbitmq_app(\n        name = \"erlang_app\",\n        app_name = \"\",\n        app_version = APP_VERSION,\n        app_description = \"\",\n        app_module = \"\",\n        app_registered = [],\n        app_env = \"\",\n        app_extra_keys = \"\",\n        extra_apps = [],\n        beam_files = [\":beam_files\"],\n        hdrs = None,\n        srcs = [\":all_srcs\"],\n        priv = [\":priv\"],\n        license_files = [\":license_files\"],\n        deps = [],\n        testonly = False):\n    if name != \"erlang_app\":\n        fail(\"name attr exists for compatibility only, and must be set to '\\\"erlang_app\\\"'\")\n    if beam_files != [\":beam_files\"]:\n        fail(\"beam_files attr exists for compatibility only, and must be set to '[\\\":beam_files\\\"]'\")\n    if hdrs != [\":public_hdrs\"]:\n        fail(\"hdrs attr exists for compatibility only, and must be set to '[\\\":public_hdrs\\\"]'\")\n\n    erlang_app(\n        name = \"erlang_app\",\n        app_name = app_name,\n        app_version = app_version,\n        app_description = app_description,\n        app_module = app_module,\n        app_registered = app_registered,\n        app_env = app_env,\n        app_extra_keys = app_extra_keys,\n        extra_apps = extra_apps,\n        beam_files = beam_files,\n        hdrs = [\":public_hdrs\"],\n        srcs = srcs,\n        priv = priv,\n        license_files = license_files,\n        deps = deps,\n        testonly = testonly,\n    )\n\n    test_erlang_app(\n        name = \"test_erlang_app\",\n        app_name = app_name,\n        app_version = app_version,\n        app_description = app_description,\n        app_module = app_module,\n        app_registered = app_registered,\n        app_env = app_env,\n        app_extra_keys = app_extra_keys,\n        extra_apps = extra_apps,\n        beam_files = [\":test_beam_files\"],\n        hdrs = [\":public_and_private_hdrs\"],\n        srcs = srcs,\n        priv = priv,\n        license_files = license_files,\n        deps = with_test_versions(deps),\n    )\n\ndef rabbitmq_suite(\n        name = None,\n        suite_name = None,\n        data = [],\n        additional_beam = [],\n        test_env = {},\n        deps = [],\n        runtime_deps = [],\n        **kwargs):\n    app_name = native.package_name().rpartition(\"/\")[-1]\n    # suite_name exists in the underying ct_test macro, but we don't\n    # want to use the arg in rabbitmq-server, for the sake of clarity\n    if suite_name != None:\n        fail(\"rabbitmq_suite cannot be called with a suite_name attr\")\n    ct_test(\n        name = name,\n        app_name = app_name,\n        compiled_suites = [\":{}_beam_files\".format(name)] + additional_beam,\n        data = native.glob([\"test/{}_data/**/*\".format(name)]) + data,\n        test_env = dict({\n            \"RABBITMQ_CT_SKIP_AS_ERROR\": \"true\",\n            \"LANG\": \"C.UTF-8\",\n            \"COVERDATA_TO_LCOV_APPS_DIRS\": \"deps:deps/rabbit/apps\",\n        }.items() + test_env.items()),\n        deps = [\":test_erlang_app\"] + deps + runtime_deps,\n        ct_run_extra_args = [\"-kernel net_ticktime 5\"],\n        **kwargs\n    )\n    return name\n\ndef broker_for_integration_suites(extra_plugins = []):\n    rabbitmq_home(\n        name = \"broker-for-tests-home\",\n        plugins = [\n            \"//deps/rabbit:test_erlang_app\",\n            \":test_erlang_app\",\n        ] + extra_plugins,\n        testonly = True,\n    )\n\n    rabbitmq_run(\n        name = \"rabbitmq-for-tests-run\",\n        home = \":broker-for-tests-home\",\n        testonly = True,\n    )\n\ndef rabbitmq_integration_suite(\n        name = None,\n        suite_name = None,\n        tags = [],\n        data = [],\n        erlc_opts = [],\n        additional_beam = [],\n        test_env = {},\n        tools = [],\n        deps = [],\n        runtime_deps = [],\n        **kwargs):\n    app_name = native.package_name().rpartition(\"/\")[-1]\n    # suite_name exists in the underying ct_test macro, but we don't\n    # want to use the arg in rabbitmq-server, for the sake of clarity\n    if suite_name != None:\n        fail(\"rabbitmq_integration_suite cannot be called with a suite_name attr\")\n    assumed_deps = [\n        \":test_erlang_app\",\n        \"//deps/rabbit_common:erlang_app\",\n        \"//deps/rabbitmq_ct_helpers:erlang_app\",\n        \"@rules_elixir//elixir\",\n        \"//deps/rabbitmq_cli:erlang_app\",\n        \"//deps/rabbitmq_ct_client_helpers:erlang_app\",\n    ]\n    package = native.package_name()\n    if package != \"deps/amqp_client\":\n        assumed_deps.append(\"//deps/amqp_client:erlang_app\")\n\n    ct_test(\n        name = name,\n        app_name = app_name,\n        suite_name = name,\n        compiled_suites = [\":{}_beam_files\".format(name)] + additional_beam,\n        tags = tags + [STARTS_BACKGROUND_BROKER_TAG],\n        data = native.glob([\"test/{}_data/**/*\".format(name)]) + data,\n        test_env = dict({\n            \"SKIP_MAKE_TEST_DIST\": \"true\",\n            \"RABBITMQ_CT_SKIP_AS_ERROR\": \"true\",\n            \"RABBITMQ_RUN\": \"$(location :rabbitmq-for-tests-run)\",\n            \"RABBITMQCTL\": \"$TEST_SRCDIR/$TEST_WORKSPACE/{}/broker-for-tests-home/sbin/rabbitmqctl\".format(package),\n            \"RABBITMQ_PLUGINS\": \"$TEST_SRCDIR/$TEST_WORKSPACE/{}/broker-for-tests-home/sbin/rabbitmq-plugins\".format(package),\n            \"RABBITMQ_QUEUES\": \"$TEST_SRCDIR/$TEST_WORKSPACE/{}/broker-for-tests-home/sbin/rabbitmq-queues\".format(package),\n            \"LANG\": \"C.UTF-8\",\n            \"COVERDATA_TO_LCOV_APPS_DIRS\": \"deps:deps/rabbit/apps\",\n        }.items() + test_env.items()),\n        tools = [\n            \":rabbitmq-for-tests-run\",\n        ] + tools,\n        deps = assumed_deps + deps + runtime_deps,\n        ct_run_extra_args = [\"-kernel net_ticktime 5\"],\n        **kwargs\n    )\n\n    ct_test(\n        name = name + \"-mixed\",\n        suite_name = name,\n        compiled_suites = [\":{}_beam_files\".format(name)] + additional_beam,\n        tags = tags + [STARTS_BACKGROUND_BROKER_TAG, MIXED_VERSION_CLUSTER_TAG],\n        data = native.glob([\"test/{}_data/**/*\".format(name)]) + data,\n        test_env = dict({\n            \"SKIP_MAKE_TEST_DIST\": \"true\",\n            # The feature flags listed below are required. This means they must be enabled in mixed-version testing\n            # before even starting the cluster because newer nodes don't have the corresponding compatibility/migration code.\n            \"RABBITMQ_FEATURE_FLAGS\":\n            # required starting from 3.11.0 in rabbit:\n            \"quorum_queue,implicit_default_bindings,virtual_host_metadata,maintenance_mode_status,user_limits,\" +\n            # required starting from 3.12.0 in rabbit:\n            \"feature_flags_v2,stream_queue,classic_queue_type_delivery_support,classic_mirrored_queue_version,\" +\n            \"stream_single_active_consumer,direct_exchange_routing_v2,listener_records_in_ets,tracking_records_in_ets,\" +\n            # required starting from 3.12.0 in rabbitmq_management_agent:\n            # empty_basic_get_metric, drop_unroutable_metric\n            # required starting from 4.0 in rabbit:\n            \"message_containers,stream_update_config_command,stream_filtering,stream_sac_coordinator_unblock_group,restart_streams\",\n            \"RABBITMQ_RUN\": \"$(location :rabbitmq-for-tests-run)\",\n            \"RABBITMQCTL\": \"$TEST_SRCDIR/$TEST_WORKSPACE/{}/broker-for-tests-home/sbin/rabbitmqctl\".format(package),\n            \"RABBITMQ_PLUGINS\": \"$TEST_SRCDIR/$TEST_WORKSPACE/{}/broker-for-tests-home/sbin/rabbitmq-plugins\".format(package),\n            \"RABBITMQ_QUEUES\": \"$TEST_SRCDIR/$TEST_WORKSPACE/{}/broker-for-tests-home/sbin/rabbitmq-queues\".format(package),\n            \"RABBITMQ_RUN_SECONDARY\": \"$(location @rabbitmq-server-generic-unix-4.0//:rabbitmq-run)\",\n            \"LANG\": \"C.UTF-8\",\n        }.items() + test_env.items()),\n        tools = [\n            \":rabbitmq-for-tests-run\",\n            \"@rabbitmq-server-generic-unix-4.0//:rabbitmq-run\",\n        ] + tools,\n        deps = assumed_deps + deps + runtime_deps,\n        ct_run_extra_args = [\"-kernel net_ticktime 5\"],\n        **kwargs\n    )\n\n    return name\n\ndef assert_suites(**kwargs):\n    assert_suites2(**kwargs)\n"
        },
        {
          "name": "rabbitmq_home.bzl",
          "type": "blob",
          "size": 5.771484375,
          "content": "load(\"@rules_erlang//:ct.bzl\", \"additional_file_dest_relative_path\")\nload(\"@rules_erlang//:erlang_app_info.bzl\", \"ErlangAppInfo\", \"flat_deps\")\nload(\"@rules_erlang//:util.bzl\", \"path_join\")\n\nRabbitmqHomeInfo = provider(\n    doc = \"An assembled RABBITMQ_HOME dir\",\n    fields = {\n        \"rabbitmqctl\": \"rabbitmqctl script from the sbin directory\",\n    },\n)\n\ndef _copy_script(ctx, script):\n    dest = ctx.actions.declare_file(\n        path_join(ctx.label.name, \"sbin\", script.basename),\n    )\n    ctx.actions.expand_template(\n        template = script,\n        output = dest,\n        substitutions = {},\n        is_executable = True,\n    )\n    return dest\n\ndef copy_escript(ctx, escript):\n    e = ctx.attr._rabbitmqctl_escript.files_to_run.executable\n    dest = ctx.actions.declare_file(\n        path_join(ctx.label.name, \"escript\", escript.basename),\n    )\n    ctx.actions.run(\n        inputs = [e],\n        outputs = [dest],\n        executable = \"cp\",\n        arguments = [e.path, dest.path],\n    )\n    return dest\n\ndef _plugins_dir_links(ctx, plugin):\n    lib_info = plugin[ErlangAppInfo]\n    plugin_path = path_join(\n        ctx.label.name,\n        \"plugins\",\n        lib_info.app_name,\n    )\n\n    links = []\n    for f in lib_info.include:\n        o = ctx.actions.declare_file(path_join(plugin_path, \"include\", f.basename))\n        ctx.actions.symlink(\n            output = o,\n            target_file = f,\n        )\n        links.append(o)\n\n    for f in lib_info.beam:\n        if f.is_directory:\n            if len(lib_info.beam) != 1:\n                fail(\"ErlangAppInfo.beam must be a collection of files, or a single ebin dir: {} {}\".format(lib_info.app_name, lib_info.beam))\n            o = ctx.actions.declare_directory(path_join(plugin_path, \"ebin\"))\n        else:\n            o = ctx.actions.declare_file(path_join(plugin_path, \"ebin\", f.basename))\n        ctx.actions.symlink(\n            output = o,\n            target_file = f,\n        )\n        links.append(o)\n\n    for f in lib_info.priv:\n        p = additional_file_dest_relative_path(plugin.label, f)\n        o = ctx.actions.declare_file(path_join(plugin_path, p))\n        ctx.actions.symlink(\n            output = o,\n            target_file = f,\n        )\n        links.append(o)\n\n    return links\n\ndef flatten(list_of_lists):\n    return [item for sublist in list_of_lists for item in sublist]\n\ndef _impl(ctx):\n    plugins = flat_deps(ctx.attr.plugins)\n\n    if not ctx.attr.is_windows:\n        source_scripts = ctx.files._scripts\n    else:\n        source_scripts = ctx.files._scripts_windows\n    scripts = [_copy_script(ctx, script) for script in source_scripts]\n\n    escripts = [copy_escript(ctx, escript) for escript in ctx.files._escripts]\n\n    plugins = flatten([_plugins_dir_links(ctx, plugin) for plugin in plugins])\n\n    rabbitmqctl = None\n    for script in scripts:\n        if script.basename == (\"rabbitmqctl\" if not ctx.attr.is_windows else \"rabbitmqctl.bat\"):\n            rabbitmqctl = script\n    if rabbitmqctl == None:\n        fail(\"could not find rabbitmqctl among\", scripts)\n\n    return [\n        RabbitmqHomeInfo(\n            rabbitmqctl = rabbitmqctl,\n        ),\n        DefaultInfo(\n            files = depset(scripts + escripts + plugins),\n        ),\n    ]\n\nRABBITMQ_HOME_ATTRS = {\n    \"_escripts\": attr.label_list(\n        default = [\n            \"//deps/rabbit:scripts/rabbitmq-diagnostics\",\n            \"//deps/rabbit:scripts/rabbitmq-plugins\",\n            \"//deps/rabbit:scripts/rabbitmq-queues\",\n            \"//deps/rabbit:scripts/rabbitmq-streams\",\n            \"//deps/rabbit:scripts/rabbitmq-upgrade\",\n            \"//deps/rabbit:scripts/rabbitmqctl\",\n            \"//deps/rabbit:scripts/vmware-rabbitmq\",\n        ],\n        allow_files = True,\n    ),\n    \"_scripts\": attr.label_list(\n        default = [\n            \"//deps/rabbit:scripts/rabbitmq-defaults\",\n            \"//deps/rabbit:scripts/rabbitmq-diagnostics\",\n            \"//deps/rabbit:scripts/rabbitmq-env\",\n            \"//deps/rabbit:scripts/rabbitmq-plugins\",\n            \"//deps/rabbit:scripts/rabbitmq-queues\",\n            \"//deps/rabbit:scripts/rabbitmq-server\",\n            \"//deps/rabbit:scripts/rabbitmq-streams\",\n            \"//deps/rabbit:scripts/rabbitmq-upgrade\",\n            \"//deps/rabbit:scripts/rabbitmqctl\",\n            \"//deps/rabbit:scripts/vmware-rabbitmq\",\n        ],\n        allow_files = True,\n    ),\n    \"_scripts_windows\": attr.label_list(\n        default = [\n            \"//deps/rabbit:scripts/rabbitmq-defaults.bat\",\n            \"//deps/rabbit:scripts/rabbitmq-diagnostics.bat\",\n            \"//deps/rabbit:scripts/rabbitmq-env.bat\",\n            \"//deps/rabbit:scripts/rabbitmq-plugins.bat\",\n            \"//deps/rabbit:scripts/rabbitmq-queues.bat\",\n            \"//deps/rabbit:scripts/rabbitmq-server.bat\",\n            \"//deps/rabbit:scripts/rabbitmq-streams.bat\",\n            \"//deps/rabbit:scripts/rabbitmq-upgrade.bat\",\n            \"//deps/rabbit:scripts/rabbitmqctl.bat\",\n            \"//deps/rabbit:scripts/vmware-rabbitmq.bat\",\n        ],\n        allow_files = True,\n    ),\n    \"_rabbitmqctl_escript\": attr.label(default = \"//deps/rabbitmq_cli:rabbitmqctl\"),\n    \"is_windows\": attr.bool(mandatory = True),\n    \"plugins\": attr.label_list(providers = [ErlangAppInfo]),\n}\n\nrabbitmq_home_private = rule(\n    implementation = _impl,\n    attrs = RABBITMQ_HOME_ATTRS,\n)\n\ndef rabbitmq_home(**kwargs):\n    rabbitmq_home_private(\n        is_windows = select({\n            \"@bazel_tools//src/conditions:host_windows\": True,\n            \"//conditions:default\": False,\n        }),\n        **kwargs\n    )\n\ndef _dirname(p):\n    return p.rpartition(\"/\")[0]\n\ndef rabbitmq_home_short_path(rabbitmq_home):\n    short_path = rabbitmq_home[RabbitmqHomeInfo].rabbitmqctl.short_path\n    if rabbitmq_home.label.workspace_root != \"\":\n        short_path = path_join(rabbitmq_home.label.workspace_root, short_path)\n    return _dirname(_dirname(short_path))\n"
        },
        {
          "name": "rabbitmq_package_generic_unix.bzl",
          "type": "blob",
          "size": 0.4873046875,
          "content": "load(\"@//:rabbitmq_home.bzl\", \"RabbitmqHomeInfo\")\n\ndef _impl(ctx):\n    return [\n        RabbitmqHomeInfo(\n            rabbitmqctl = ctx.file.rabbitmqctl,\n        ),\n        DefaultInfo(\n            files = depset(ctx.files.rabbitmqctl + ctx.files.additional_files),\n        ),\n    ]\n\nrabbitmq_package_generic_unix = rule(\n    implementation = _impl,\n    attrs = {\n        \"rabbitmqctl\": attr.label(allow_single_file = True),\n        \"additional_files\": attr.label_list(allow_files = True),\n    },\n)\n"
        },
        {
          "name": "rabbitmq_run.bzl",
          "type": "blob",
          "size": 3.9130859375,
          "content": "load(\n    \"@rules_erlang//:util.bzl\",\n    \"path_join\",\n    \"windows_path\",\n)\nload(\n    \"@rules_erlang//tools:erlang_toolchain.bzl\",\n    \"erlang_dirs\",\n)\nload(\n    \":rabbitmq_home.bzl\",\n    \"RabbitmqHomeInfo\",\n    \"rabbitmq_home_short_path\",\n)\n\ndef _impl(ctx):\n    rabbitmq_home_path = rabbitmq_home_short_path(ctx.attr.home)\n\n    # the rabbitmq-run.sh template only allows a single erl_libs currently\n    erl_libs = ctx.configuration.host_path_separator.join([\n        path_join(rabbitmq_home_path, \"plugins\"),\n    ])\n\n    (erlang_home, _, runfiles) = erlang_dirs(ctx)\n\n    if not ctx.attr.is_windows:\n        output = ctx.actions.declare_file(ctx.label.name)\n        ctx.actions.expand_template(\n            template = ctx.file._template,\n            output = output,\n            substitutions = {\n                \"{RABBITMQ_HOME}\": rabbitmq_home_path,\n                \"{ERL_LIBS}\": erl_libs,\n                \"{ERLANG_HOME}\": erlang_home,\n            },\n            is_executable = True,\n        )\n    else:\n        output = ctx.actions.declare_file(ctx.label.name + \".bat\")\n        ctx.actions.expand_template(\n            template = ctx.file._windows_template,\n            output = output,\n            substitutions = {\n                \"{RABBITMQ_HOME}\": windows_path(rabbitmq_home_path),\n                \"{ERL_LIBS}\": erl_libs,\n                \"{ERLANG_HOME}\": windows_path(erlang_home),\n            },\n            is_executable = True,\n        )\n\n    runfiles = runfiles.merge(ctx.runfiles(ctx.attr.home[DefaultInfo].files.to_list()))\n\n    return [DefaultInfo(\n        runfiles = runfiles,\n        executable = output,\n    )]\n\nrabbitmq_run_private = rule(\n    implementation = _impl,\n    attrs = {\n        \"_template\": attr.label(\n            default = Label(\"//:scripts/bazel/rabbitmq-run.sh\"),\n            allow_single_file = True,\n        ),\n        \"_windows_template\": attr.label(\n            default = Label(\"//:scripts/bazel/rabbitmq-run.bat\"),\n            allow_single_file = True,\n        ),\n        \"is_windows\": attr.bool(mandatory = True),\n        \"home\": attr.label(providers = [RabbitmqHomeInfo]),\n    },\n    toolchains = [\"@rules_erlang//tools:toolchain_type\"],\n    executable = True,\n)\n\ndef rabbitmq_run(**kwargs):\n    rabbitmq_run_private(\n        is_windows = select({\n            \"@bazel_tools//src/conditions:host_windows\": True,\n            \"//conditions:default\": False,\n        }),\n        **kwargs\n    )\n\ndef _run_command_impl(ctx):\n    if not ctx.attr.is_windows:\n        output = ctx.actions.declare_file(ctx.label.name)\n        script = \"exec ./{} {} $@\".format(\n            ctx.attr.rabbitmq_run[DefaultInfo].files_to_run.executable.short_path,\n            ctx.attr.subcommand,\n        )\n    else:\n        output = ctx.actions.declare_file(ctx.label.name + \".bat\")\n        script = \"\"\"@echo off\ncall {} {} %*\nif ERRORLEVEL 1 (\n    exit /B %ERRORLEVEL%\n)\nEXIT /B 0\n\"\"\".format(\n            ctx.attr.rabbitmq_run[DefaultInfo].files_to_run.executable.short_path,\n            ctx.attr.subcommand,\n        )\n\n    ctx.actions.write(\n        output = output,\n        content = script,\n        is_executable = True,\n    )\n\n    return [DefaultInfo(\n        runfiles = ctx.attr.rabbitmq_run[DefaultInfo].default_runfiles,\n        executable = output,\n    )]\n\nrabbitmq_run_command_private = rule(\n    implementation = _run_command_impl,\n    attrs = {\n        \"is_windows\": attr.bool(mandatory = True),\n        \"rabbitmq_run\": attr.label(\n            executable = True,\n            cfg = \"target\",\n        ),\n        \"subcommand\": attr.string(values = [\n            \"run-broker\",\n            \"start-background-broker\",\n            \"stop-node\",\n            \"start-cluster\",\n            \"stop-cluster\",\n        ]),\n    },\n    executable = True,\n)\n\ndef rabbitmq_run_command(**kwargs):\n    rabbitmq_run_command_private(\n        is_windows = select({\n            \"@bazel_tools//src/conditions:host_windows\": True,\n            \"//conditions:default\": False,\n        }),\n        **kwargs\n    )\n"
        },
        {
          "name": "rabbitmqctl.bzl",
          "type": "blob",
          "size": 0.642578125,
          "content": "load(\":rabbitmq_home.bzl\", \"RabbitmqHomeInfo\", \"rabbitmq_home_short_path\")\n\ndef _impl(ctx):\n    rabbitmq_home_path = rabbitmq_home_short_path(ctx.attr.home)\n\n    script = \"\"\"\n    exec ./{home}/sbin/{cmd} \"$@\"\n    \"\"\".format(\n        home = rabbitmq_home_path,\n        cmd = ctx.label.name,\n    )\n\n    ctx.actions.write(\n        output = ctx.outputs.executable,\n        content = script,\n    )\n\n    return [DefaultInfo(\n        runfiles = ctx.runfiles(ctx.attr.home[DefaultInfo].files.to_list()),\n    )]\n\nrabbitmqctl = rule(\n    implementation = _impl,\n    attrs = {\n        \"home\": attr.label(providers = [RabbitmqHomeInfo]),\n    },\n    executable = True,\n)\n"
        },
        {
          "name": "rebar.config",
          "type": "blob",
          "size": 0.5146484375,
          "content": "{plugins, [rebar3_format]}.\n\n{format, [\n    {files, [\"deps/rabbit/src/rabbit_stream_sac_coordinator.*\",\n             \"deps/rabbit/test/rabbit_stream_sac_coordinator_SUITE.erl\",\n             \"deps/rabbitmq_stream*/src/*.erl\",\n             \"deps/rabbitmq_stream*/test/*.erl\"\n              ]},\n    {formatter, default_formatter},\n    {options, #{\n                paper => 80,\n                ribbon => 70,\n                inline_attributes => {when_under, 1},\n                inline_items => {when_under, 4}\n               }}\n]}.\n"
        },
        {
          "name": "release-notes",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "selenium",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "user-template.bazelrc",
          "type": "blob",
          "size": 0.578125,
          "content": "# rabbitmqctl wait shells out to 'ps', which is broken in the bazel macOS\n# sandbox (https://github.com/bazelbuild/bazel/issues/7448)\n# adding \"--strategy=TestRunner=local\" to the invocation is a workaround\nbuild --strategy=TestRunner=local\n\n# --experimental_strict_action_env breaks memory size detection on macOS,\n# so turn it off for local runs\nbuild --noexperimental_strict_action_env\n\n# don't re-run flakes automatically on the local machine\nbuild --flaky_test_attempts=1\n\n# write common test logs to logs/ dir\nbuild --@rules_erlang//:ct_logdir=/absolute/expanded/path/to/this/repo/logs\n"
        }
      ]
    }
  ]
}