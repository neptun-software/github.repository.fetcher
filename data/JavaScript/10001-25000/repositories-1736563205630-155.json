{
  "metadata": {
    "timestamp": 1736563205630,
    "page": 155,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ladjs/superagent",
      "stars": 16601,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".browserslistrc",
          "type": "blob",
          "size": 0.01953125,
          "content": "defaults, not ie 11\n"
        },
        {
          "name": ".commitlintrc.js",
          "type": "blob",
          "size": 0.0673828125,
          "content": "module.exports = {\n  extends: ['@commitlint/config-conventional']\n};\n"
        },
        {
          "name": ".dist.babelrc",
          "type": "blob",
          "size": 0.1923828125,
          "content": "{\n  \"presets\": [\n    [\"@babel/env\", {\n      \"targets\": {\n        \"browsers\": [ \"defaults, not ie 11\" ]\n      }\n    }]\n  ],\n  \"sourceType\": \"script\",\n  \"sourceMaps\": \"inline\",\n  \"comments\": false\n}\n"
        },
        {
          "name": ".dist.eslintrc",
          "type": "blob",
          "size": 0.9443359375,
          "content": "{\n  \"extends\": [\"eslint:recommended\", \"plugin:compat/recommended\"],\n  \"env\": {\n    \"node\": false,\n    \"browser\": true,\n    \"amd\": true,\n    \"es6\": true\n  },\n  \"plugins\": [\"compat\"],\n  \"rules\": {\n    \"node/no-unsupported-features/es-builtins\": \"off\",\n    \"compat/compat\": \"error\",\n    \"no-console\": \"off\",\n    \"no-empty\": \"off\",\n    \"no-extra-semi\": \"off\",\n    \"no-func-assign\": \"off\",\n    \"no-undef\": \"off\",\n    \"no-unused-vars\": \"off\",\n    \"no-useless-escape\": \"off\",\n    \"no-cond-assign\": \"off\",\n    \"no-redeclare\": \"off\",\n    \"node/no-exports-assign\": \"off\",\n    \"no-unsafe-finally\": \"off\",\n    \"complexity\": [\"error\", 10000],\n    \"max-statements\": \"off\",\n    \"no-constant-condition\": \"off\",\n    \"no-control-regex\": \"off\",\n    \"no-fallthrough\": \"off\",\n    \"operator-linebreak\": \"off\",\n    \"node/no-missing-require\": \"warn\"\n  },\n  \"globals\": {\n    \"regeneratorRuntime\": \"writable\"\n  },\n  \"settings\": {\n    \"polyfills\": [\n      \"WeakRef\",\n      \"BigInt\"\n    ]\n  }\n}\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1435546875,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.736328125,
          "content": "{\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:node/recommended\"\n  ],\n  \"env\": {\n    \"node\": true,\n    \"browser\": true,\n    \"es6\": true\n  },\n  \"parserOptions\": {\n    \"ecmaVersion\": 2021\n  },\n  \"overrides\": [\n    {\n      \"files\": \"test/**/*.js\",\n      \"env\": {\n        \"mocha\": true\n      },\n      \"rules\": {\n        \"no-prototype-builtins\": \"off\",\n        \"node/no-deprecated-api\": \"warn\",\n        \"node/no-extraneous-require\": \"warn\",\n        \"no-unused-vars\": \"warn\",\n        \"node/no-missing-require\": \"warn\"\n      }\n    }\n  ],\n  \"rules\": {\n    \"node/no-unsupported-features/node-builtins\": \"off\",\n    \"node/no-unsupported-features/es-syntax\": \"off\",\n    \"node/no-exports-assign\": \"off\",\n    \"no-unused-vars\": \"warn\"\n  },\n  \"globals\": {\n  }\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01171875,
          "content": "* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1982421875,
          "content": ".vscode\nbuild\nlib-cov\ncoverage.html\n.DS_Store\nnode_modules\n*.sock\ntest.js\ncomponents\ntest/node/fixtures/tmp.json\n.idea\nsuperagent.js\npackage-lock.json\n*.log\ncoverage\n.nyc_output\nlib\ndist\n*.swp\nyarn.lock\n"
        },
        {
          "name": ".husky",
          "type": "tree",
          "content": null
        },
        {
          "name": ".lib.babelrc",
          "type": "blob",
          "size": 0.1728515625,
          "content": "{\n  \"presets\": [\n    [\"@babel/env\", {\n      \"targets\": {\n        \"node\": \"14.18.0\",\n        \"browsers\": [ \"defaults, not ie 11\" ]\n      }\n    }]\n  ],\n  \"sourceMaps\": \"inline\"\n}\n"
        },
        {
          "name": ".lib.eslintrc",
          "type": "blob",
          "size": 0.8642578125,
          "content": "{\n  \"extends\": [\"eslint:recommended\", \"plugin:node/recommended\"],\n  \"env\": {\n    \"browser\": true\n  },\n  \"rules\": {\n    \"node/no-unsupported-features/es-builtins\": [\"error\", {\n      \"version\": \">=6.4.0\",\n      \"ignores\": [\n      ]\n    }],\n    \"node/no-deprecated-api\": \"off\",\n    \"no-console\": \"off\",\n    \"no-unused-vars\": \"off\",\n    \"no-empty\": \"off\",\n    \"no-func-assign\": \"off\",\n    \"no-global-assign\": [\"error\", {\"exceptions\": [\"exports\"]}],\n    \"no-fallthrough\": \"off\",\n    \"no-constant-condition\": \"off\",\n    \"node/no-exports-assign\": \"off\",\n    \"no-unsafe-finally\": \"off\"\n  },\n  \"overrides\": [\n    {\n      \"files\": [ \"lib/client.js\" ],\n      \"globals\": {\n      }\n    },\n    {\n      \"files\": [ \"lib/node/http2wrapper.js\" ],\n      \"rules\": {\n        \"node/no-unsupported-features/es-builtins\": \"off\",\n        \"node/no-unsupported-features/node-builtins\": \"off\"\n      }\n    }\n  ]\n}\n"
        },
        {
          "name": ".lintstagedrc.js",
          "type": "blob",
          "size": 0.1455078125,
          "content": "module.exports = {\n  \"*.md\": filenames => filenames.map(filename => `remark ${filename} -qfo`),\n  'package.json': 'fixpack',\n  '*.js': 'xo --fix'\n};\n"
        },
        {
          "name": ".prettierrc.js",
          "type": "blob",
          "size": 0.0888671875,
          "content": "module.exports = {\n  singleQuote: true,\n  bracketSpacing: true,\n  trailingComma: 'none'\n};\n"
        },
        {
          "name": ".remarkignore",
          "type": "blob",
          "size": 0.03125,
          "content": "CONTRIBUTING.md\nHISTORY.md\ndocs\n"
        },
        {
          "name": ".remarkrc.js",
          "type": "blob",
          "size": 0.0498046875,
          "content": "module.exports = {\n  plugins: ['preset-github']\n};\n"
        },
        {
          "name": ".test.babelrc",
          "type": "blob",
          "size": 0.28515625,
          "content": "{\n  \"presets\": [\n    [\"@babel/env\", {\n      \"targets\": {\n        \"node\": \"14.18.0\",\n        \"browsers\": [ \"defaults, not ie 11\" ]\n      }\n    }]\n  ],\n  \"plugins\": [\n    [\"@babel/transform-runtime\"]\n  ],\n  \"parserOpts\": {\n    \"allowReturnOutsideFunction\": true\n  },\n  \"sourceMaps\": \"inline\"\n}\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2138671875,
          "content": "sudo: false\nlanguage: node_js\nnode_js:\n  - '18'\n  - '16'\n  - '14'\nafter_success: npm run coverage\n\nenv:\n  global:\n    - SAUCE_USERNAME='shtylman-superagent'\n    - SAUCE_ACCESS_KEY='39a45464-cb1d-4b8d-aa1f-83c7c04fa673'\n"
        },
        {
          "name": ".xo-config.js",
          "type": "blob",
          "size": 1.990234375,
          "content": "module.exports = {\n\tprettier: true,\n\tspace: true,\n\tnodeVersion: false,\n\textends: [\n\t\t'xo-lass',\n\t],\n\tenvs: [\n\t\t'node',\n\t\t'browser',\n\t],\n\toverrides: [\n\t\t{\n\t\t\tfiles: 'test/**/*.js',\n\t\t\tenvs: [\n\t\t\t\t'mocha',\n\t\t\t],\n\t\t\trules: {\n\t\t\t\t'block-scoped-var': 'warn',\n\t\t\t\tcomplexity: 'warn',\n\t\t\t\t'default-case': 'warn',\n\t\t\t\teqeqeq: 'warn',\n\t\t\t\t'func-name-matching': 'warn',\n\t\t\t\t'func-names': 'warn',\n\t\t\t\t'guard-for-in': 'warn',\n\t\t\t\t'handle-callback-err': 'warn',\n\t\t\t\t'import/no-extraneous-dependencies': 'warn',\n\t\t\t\t'import/no-unassigned-import': 'warn',\n\t\t\t\t'import/order': 'warn',\n\t\t\t\t'max-nested-callbacks': 'warn',\n\t\t\t\t'new-cap': 'warn',\n\t\t\t\t'no-eq-null': 'warn',\n\t\t\t\t'no-extend-native': 'warn',\n\t\t\t\t'no-implicit-coercion': 'warn',\n\t\t\t\t'no-multi-assign': 'warn',\n\t\t\t\t'no-negated-condition': 'warn',\n\t\t\t\t'no-prototype-builtins': 'warn',\n\t\t\t\t'no-redeclare': 'warn',\n\t\t\t\t'no-undef': 'warn',\n\t\t\t\t'no-unused-expressions': 'warn',\n\t\t\t\t'no-unused-vars': 'warn',\n\t\t\t\t'no-use-extend-native/no-use-extend-native': 'warn',\n\t\t\t\t'no-useless-escape': 'warn',\n\t\t\t\t'no-var': 'warn',\n\t\t\t\t'no-void': 'warn',\n\t\t\t\t'node/no-deprecated-api': 'warn',\n\t\t\t\t'prefer-rest-params': 'warn',\n\t\t\t\t'prefer-spread': 'warn',\n\t\t\t\t'unicorn/filename-case': 'warn',\n\t\t\t\t'valid-jsdoc': 'warn',\n\t\t\t\t'node/no-path-concat': 'warn',\n\t\t\t\t'unicorn/no-empty-file': 'warn',\n\t\t\t},\n\t\t},\n\t],\n\trules: {\n\t\t'unicorn/prevent-abbreviations': [\n\t\t\t'warn',\n\t\t\t{\n\t\t\t\treplacements: {\n\t\t\t\t\tres: false,\n\t\t\t\t\targs: false,\n\t\t\t\t\tfn: false,\n\t\t\t\t\terr: false,\n\t\t\t\t\te: false,\n\t\t\t\t\ti: false,\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\t'no-bitwise': 'warn',\n\t\t'node/prefer-global/buffer': 'warn',\n\t\t'node/prefer-global/process': 'warn',\n\t\t'unicorn/no-new-array': 'warn',\n\t\t'unicorn/no-this-assignment': 'warn',\n\t\t'unicorn/prefer-spread': 'warn',\n\t\t'unicorn/catch-error-name': 'warn',\n\t\t'unicorn/prefer-code-point': 'warn',\n\t\t'node/no-unsupported-features': [\n\t\t\t'error',\n\t\t\t{\n\t\t\t\tversion: 8,\n\t\t\t\tignores: [\n\t\t\t\t\t'syntax',\n\t\t\t\t],\n\t\t\t},\n\t\t],\n    'unicorn/prefer-optional-catch-binding': 'off',\n    'no-unused-vars': 'off'\n\t},\n\tglobals: [],\n};\n"
        },
        {
          "name": ".zuul.yml",
          "type": "blob",
          "size": 0.31640625,
          "content": "ui: mocha-bdd\nserver: ./test/support/server.js\ntunnel_host: http://focusaurus.com\nbrowsers:\n  - name: chrome\n    version: latest\n  - name: firefox\n    version: latest\n  - name: safari\n    version: latest\n  - name: ie\n    version: 9..latest\nbrowserify:\n  - transform:\n      name: babelify\n      configFile: './.dist.babelrc'\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.349609375,
          "content": "When submitting a PR, your chance of acceptance increases if you do the following:\n\n* Code style is consistent with existing in the file.\n* Tests are passing (client and server).\n* You add a test for the failing issue you are fixing.\n* Code changes are focused on the area of discussion.\n* Do not rebuild the distribution files or increment version numbers.\n"
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 24.1748046875,
          "content": "# This HISTORY log is deprecated\n\nPlease see [GitHub releases page](https://github.com/ladjs/superagent/releases) for the current changelog.\n\n# 4.1.0 (2018-12-26)\n\n * `.connect()` IP/DNS override option (Kornel)\n * `.trustLocalhost()` option for allowing broken HTTPS on `localhost`\n * `.abort()` used with promises rejects the promise.\n\n# 4.0.0 (2018-11-17)\n\n## Breaking changes\n\n* Node.js v4 has reached it's end of life, so we no longer support it. It's v6+ or later. We recommend Node.js 10.\n* We now use ES6 in the browser code, too.\n  * If you're using Browserify or Webpack to package code for Internet Explorer, you will also have to use Babel.\n  * The pre-built node_modules/superagent.js is still ES5-compatible.\n* `.end(…)` returns `undefined` instead of the request. If you need the request object after calling `.end()` (and you probably don't), save it in a variable and call `request.end(…)`. Consider not using `.end()` at all, and migrating to promises by calling `.then()` instead.\n* In Node, responses with unknown MIME type are buffered by default. To get old behavior, if you use custom _unbuffered_ parsers, add `.buffer(false)` to requests or set `superagent.buffer[yourMimeType] = false`.\n* Invalid uses of `.pipe()` throw.\n\n\n## Minor changes\n\n* Throw if `req.abort().end()` is called\n* Throw if using unsupported mix of send and field\n* Reject `.end()` promise on all error events (Kornel Lesiński)\n* Set `https.servername` from the `Host` header (Kornel Lesiński)\n* Leave backticks unencoded in query strings where possible (Ethan Resnick)\n* Update node-mime to 2.x (Alexey Kucherenko)\n* Allow default buffer settings based on response-type (shrey)\n* `response.buffered` is more accurate.\n\n# 3.8.3 (2018-04-29)\n\n* Add flags for 201 & 422 responses (Nikhil Fadnis)\n* Emit progress event while uploading Node `Buffer` via send method (Sergey Akhalkov)\n* Fixed setting correct cookies for redirects (Damien Clark)\n* Replace .catch with ['catch'] for IE9 Support (Miguel Stevens)\n\n# 3.8.2 (2017-12-09)\n\n* Fixed handling of exceptions thrown from callbacks\n* Stricter matching of `+json` MIME types.\n\n# 3.8.1 (2017-11-08)\n\n* Clear authorization header on cross-domain redirect\n\n# 3.8.0\n\n* Added support for \"globally\" defined headers and event handlers via `superagent.agent()`. It now remembers default settings for all its requests.\n* Added optional callback to `.retry()` (Alexander Murphy)\n* Unified auth args handling in node/browser (Edmundo Alvarez)\n* Fixed error handling in zlib pipes (Kornel)\n* Documented that 3xx status codes are errors (Mickey Reiss)\n\n# 3.7.0 (2017-10-17)\n\n* Limit maximum response size. Prevents zip bombs (Kornel)\n* Catch and pass along errors in `.ok()` callback (Jeremy Ruppel)\n* Fixed parsing of XHR headers without a newline (nsf)\n\n# 3.6.2 (2017-10-02)\n\n* Upgrade MIME type dependency to a newer, secure version\n* Recognize PDF MIME as binary\n* Fix for error in subsequent require() calls (Steven de Salas)\n\n# 3.6.0 (2017-08-20)\n\n* Support disabling TCP_NODELAY option ([#1240](https://github.com/ladjs/superagent/issues/1240)) (xiamengyu)\n* Send payload in query string for GET and HEAD shorthand API (Peter Lyons)\n* Support passphrase with pfx certificate (Paul Westerdale (ABRS Limited))\n* Documentation improvements (Peter Lyons)\n* Fixed duplicated query string params ([#1200](https://github.com/ladjs/superagent/issues/1200)) (Kornel)\n\n# 3.5.1 (2017-03-18)\n\n* Allow crossDomain errors to be retried ([#1194](https://github.com/ladjs/superagent/issues/1194)) (Michael Olson)\n* Read responseType property from the correct object (Julien Dupouy)\n* Check for ownProperty before adding header (Lucas Vieira)\n\n# 3.5.0 (2017-02-23)\n\n* Add errno to distinguish between request timeout and body download timeout ([#1184](https://github.com/ladjs/superagent/issues/1184)) (Kornel Lesiński)\n* Warn about bogus timeout options ([#1185](https://github.com/ladjs/superagent/issues/1185)) (Kornel Lesiński)\n\n# 3.4.4 (2017-02-17)\n\n* Treat videos like images (Kornel Lesiński)\n* Avoid renaming module (Kornel Lesiński)\n\n# 3.4.3 (2017-02-14)\n\n* Fixed being able to define own parsers when their mime type starts with `text/` (Damien Clark)\n* `withCredentials(false)` (Andy Woods)\n* Use `formData.on` instead of `.once` (Kornel Lesiński)\n* Ignore `attach(\"file\",null)` (Kornel Lesiński)\n\n# 3.4.1 (2017-01-29)\n\n* Allow `retry()` and `retry(0)` (Alexander Pope)\n* Allow optional body/data in DELETE requests (Alpha Shuro)\n* Fixed query string on retried requests (Kornel Lesiński)\n\n# 3.4.0 (2017-01-25)\n\n* New `.retry(n)` method and `err.retries` (Alexander Pope)\n* Docs for HTTPS request (Jun Wan Goh)\n\n# 3.3.1 (2016-12-17)\n\n* Fixed \"double callback bug\" warning on timeouts of gzipped responses\n\n# 3.3.0 (2016-12-14)\n\n* Added `.ok(callback)` that allows customizing which responses are errors (Kornel Lesiński)\n* Added `.responseType()` to Node version (Kornel Lesiński)\n* Added `.parse()` to browser version (jakepearson)\n* Fixed parse error when using `responseType('blob')` (Kornel Lesiński)\n\n# 3.2.0 (2016-12-11)\n\n* Added `.timeout({response:ms})`, which allows limiting maximum response time independently from total download time (Kornel Lesiński)\n* Added warnings when `.end()` is called more than once (Kornel Lesiński)\n* Added `response.links` to browser version (Lukas Eipert)\n* `btoa` is no longer required in IE9 (Kornel Lesiński)\n* Fixed `.sortQuery()` on URLs without query strings (Kornel Lesiński)\n* Refactored common response code into `ResponseBase` (Lukas Eipert)\n\n# 3.1.0 (2016-11-28)\n\n* Added `.sortQuery()` (vicanso)\n* Added support for arrays and bools in `.field()` (Kornel Lesiński)\n* Made `superagent.Request` subclassable without need to patch all static methods (Kornel Lesiński)\n\n# 3.0.0 (2016-11-19)\n\n* Dropped support for Node 0.x. Please upgrade to at least Node 4.\n* Dropped support for componentjs (Damien Caselli)\n* Removed deprecated `.part()`/`superagent.Part` APIs.\n* Removed unreliable `.body` property on internal response object used by unbuffered parsers.\n  Note: the normal `response.body` is unaffected.\n* Multiple `.send()` calls mixing `Buffer`/`Blob` and JSON data are not possible and will now throw instead of messing up the data.\n* Improved `.send()` data object type check (Fernando Mendes)\n* Added common prototype for Node and browser versions (Andreas Helmberger)\n* Added `http+unix:` schema to support Unix sockets (Yuki KAN)\n* Added full `attach` options parameter in the Node version (Lapo Luchini)\n* Added `pfx` TLS option with new `pfx()` method. (Reid Burke)\n* Internally changed `.on` to `.once` to prevent possible memory leaks (Matt Blair)\n* Made all errors reported as an event (Kornel Lesiński)\n\n# 2.3.0 (2016-09-20)\n\n* Enabled `.field()` to handle objects (Affan Shahid)\n* Added authentication with client certificates (terusus)\n* Added `.catch()` for more Promise-like interface (Maxim Samoilov, Kornel Lesiński)\n* Silenced errors from incomplete gzip streams for compatibility with web browsers (Kornel Lesiński)\n* Fixed `event.direction` in uploads (Kornel Lesiński)\n* Fixed returned value of overwritten response object's `on()` method (Juan Dopazo)\n\n# 2.2.0 (2016-08-13)\n\n* Added `timedout` property to node Request instance (Alexander Pope)\n* Unified `null` querystring values in node and browser environments. (George Chung)\n\n# 2.1.0 (2016-06-14)\n\n* Refactored async parsers. Now the `end` callback waits for async parsers to finish (Kornel Lesiński)\n* Errors thrown in `.end()` callback don't cause the callback to be called twice (Kornel Lesiński)\n* Added `headers` to `toJSON()` (Tao)\n\n# 2.0.0 (2016-05-29)\n\n\n## Breaking changes\n\nBreaking changes are in rarely used functionality, so we hope upgrade will be smooth for most users.\n\n* Browser: The `.parse()` method has been renamed to `.serialize()` for consistency with NodeJS version.\n* Browser: Query string keys without a value used to be parsed as `'undefined'`, now their value is `''` (empty string) (shura, Kornel Lesiński).\n* NodeJS: The `redirect` event is called after new query string and headers have been set and is allowed to override the request URL (Kornel Lesiński)\n* `.then()` returns a real `Promise`. Note that use of superagent with promises now requires a global `Promise` object.\n  If you target Internet Explorer or Node 0.10, you'll need `require('es6-promise').polyfill()` or similar.\n* Upgraded all dependencies (Peter Lyons)\n* Renamed properties documented as `@api private` to have `_prefixed` names (Kornel Lesiński)\n\n\n## Probably not breaking changes:\n\n* Extracted common functions to request-base (Peter Lyons)\n* Fixed race condition in pipe tests (Peter Lyons)\n* Handle `FormData` error events (scriptype)\n* Fixed wrong jsdoc of Request#attach (George Chung)\n* Updated and improved tests (Peter Lyons)\n* `request.head()` supports `.redirects(5)` call (Kornel Lesiński)\n* `response` event is also emitted when using `.pipe()`\n\n# 1.8.2 (2016-03-20)\n\n* Fixed handling of HTTP status 204 with content-encoding: gzip (Andrew Shelton)\n* Handling of FormData error events (scriptype)\n* Fixed parsing of `vnd+json` MIME types (Kornel Lesiński)\n* Aliased browser implementation of `.parse()` as `.serialize()` for forward compatibility\n\n# 1.8.1 (2016-03-14)\n\n* Fixed form-data incompatibility with IE9\n\n# 1.8.0 (2016-03-09)\n\n* Extracted common code into request-base class (Peter Lyons)\n  * It does not affect the public API, but please let us know if you notice any plugins/subclasses breaking!\n* Added option `{type:'auto'}` to `auth` method, which enables browser-native auth types (Jungle, Askar Yusupov)\n* Added `responseType()` to set XHR `responseType` (chris)\n* Switched to form-data for browserify-compatible `FormData` (Peter Lyons)\n* Added `statusCode` to error response when JSON response is malformed (mattdell)\n* Prevented TCP port conflicts in all tests (Peter Lyons)\n* Updated form-data dependency\n\n# 1.7.2 (2016-01-26)\n\n* Fix case-sensitivity of header fields introduced by [`a4ddd6a`](https://github.com/ladjs/superagent/commit/a4ddd6a). (Edward J. Jinotti)\n* bump extend dependency, as former version did not contain any license information (Lukas Eipert)\n\n# 1.7.1 (2016-01-21)\n\n* Fixed a conflict with express when using npm 3.x (Glenn)\n* Fixed redirects after a multipart/form-data POST request (cyclist2)\n\n# 1.7.0 (2016-01-18)\n\n* When attaching files, read default filename from the `File` object (JD Isaacks)\n* Add `direction` property to `progress` events (Joseph Dykstra)\n* Update component-emitter & formidable (Kornel Lesiński)\n* Don't re-encode query string needlessly (Ruben Verborgh)\n* ensure querystring is appended when doing `stream.pipe(request)` (Keith Grennan)\n* change set header function, not call `this.request()` until call `this.end()` (vicanso)\n* Add no-op `withCredentials` to Node API (markdalgleish)\n* fix `delete` breaking on ie8 (kenjiokabe)\n* Don't let request error override responses (Clay Reimann)\n* Increased number of tests shared between node and client (Kornel Lesiński)\n\n# 1.6.0/1.6.1 (2015-12-09)\n\n* avoid misleading CORS error message\n* added 'progress' event on file/form upload in Node (Olivier Lalonde)\n* return raw response if the response parsing fails (Rei Colina)\n* parse content-types ending with `+json` as JSON (Eiryyy)\n* fix to avoid throwing errors on aborted requests (gjurgens)\n* retain cookies on redirect when hosts match (Tom Conroy)\n* added Bower manifest (Johnny Freeman)\n* upgrade to latest cookiejar (Andy Burke)\n\n# 1.5.0 (2015-11-30)\n\n* encode array values as `key=1&key=2&key=3` etc... (aalpern, Davis Kim)\n* avoid the error which is omitted from 'socket hang up'\n* faster JSON parsing, handling of zlib errors (jbellenger)\n* fix IE11 sends 'undefined' string if data was undefined (Vadim Goncharov)\n* alias `del()` method as `delete()` (Aaron Krause)\n* revert Request#parse since it was actually Response#parse\n\n# 1.4.0 (2015-09-14)\n\n* add Request#parse method to client library\n* add missing statusCode in client response\n* don't apply JSON heuristics if a valid parser is found\n* fix detection of root object for webworkers\n\n# 1.3.0 (2015-08-05)\n\n* fix incorrect content-length of data set to buffer\n* serialize request data takes into account charsets\n* add basic promise support via a `then` function\n\n# 1.2.0 (2015-04-13)\n\n* add progress events to downlodas\n* make usable in webworkers\n* add support for 308 redirects\n* update node-form-data dependency\n* update to work in react native\n* update node-mime dependency\n\n# 1.1.0 (2015-03-13)\n\n* Fix responseType checks without xhr2 and ie9 tests (rase-)\n* errors have .status and .response fields if applicable (defunctzombie)\n* fix end callback called before saving cookies (rase-)\n\n# 1.0.0 / 2015-03-08\n\n* All non-200 responses are treated as errors now. (The callback is called with an error when the response has a status &lt; 200 or >= 300 now. In previous versions this would not have raised an error and the client would have to check the `res` object. See [#283](https://github.com/ladjs/superagent/issues/283).\n* keep timeouts intact across redirects (hopkinsth)\n* handle falsy json values (themaarten)\n* fire response events in browser version (Schoonology)\n* getXHR exported in client version (KidsKilla)\n* remove arity check on `.end()` callbacks (defunctzombie)\n* avoid setting content-type for host objects (rexxars)\n* don't index array strings in querystring (travisjeffery)\n* fix pipe() with redirects (cyrilis)\n* add xhr2 file download (vstirbu)\n* set default response type to text/plain if not specified (warrenseine)\n\n# 0.21.0 / 2014-11-11\n\n* Trim text before parsing json (gjohnson)\n* Update tests to express 4 (gaastonsr)\n* Prevent double callback when error is thrown (pgn-vole)\n* Fix missing clearTimeout (nickdima)\n* Update debug (TooTallNate)\n\n# 0.20.0 / 2014-10-02\n\n* Add toJSON() to request and response instances. (yields)\n* Prevent HEAD requests from getting parsed. (gjohnson)\n* Update debug. (TooTallNate)\n\n# 0.19.1 / 2014-09-24\n\n* Fix basic auth issue when password is falsey value. (gjohnson)\n\n# 0.19.0 / 2014-09-24\n\n* Add unset() to browser. (shesek)\n* Prefer XHR over ActiveX. (omeid)\n* Catch parse errors. (jacwright)\n* Update qs dependency. (wercker)\n* Add use() to node. (Financial-Times)\n* Add response text to errors. (yields)\n* Don't send empty cookie headers. (undoZen)\n* Don't parse empty response bodies. (DveMac)\n* Use hostname when setting cookie host. (prasunsultania)\n\n# 0.18.2 / 2014-07-12\n\n* Handle parser errors. (kof)\n* Ensure not to use default parsers when there is a user defined one. (kof)\n\n# 0.18.1 / 2014-07-05\n\n* Upgrade cookiejar dependency (juanpin)\n* Support image mime types (nebulade)\n* Make .agent chainable (kof)\n* Upgrade debug (TooTallNate)\n* Fix docs (aheckmann)\n\n# 0.18.0 / 2014-04-29\n\n* Use \"form-data\" module for the multipart/form-data implementation. (TooTallNate)\n* Add basic `field()` and `attach()` functions for HTML5 FormData. (TooTallNate)\n* Deprecate `part()`. (TooTallNate)\n* Set default user-agent header. (bevacqua)\n* Add `unset()` method for removing headers. (bevacqua)\n* Update cookiejar. (missinglink)\n* Fix response error formatting. (shesek)\n\n# 0.17.0 / 2014-03-06\n\n* supply uri malformed error to the callback (yields)\n* add request event (yields)\n* allow simple auth (yields)\n* add request event (yields)\n* switch to component/reduce (visionmedia)\n* fix part content-disposition (mscdex)\n* add browser testing via zuul (defunctzombie)\n* adds request.use() (johntron)\n\n# 0.16.0 / 2014-01-07\n\n* remove support for 0.6 (superjoe30)\n* fix CORS withCredentials (wejendorp)\n* add \"test\" script (superjoe30)\n* add request .accept() method (nickl-)\n* add xml to mime types mappings (nickl-)\n* fix parse body error on HEAD requests (gjohnson)\n* fix documentation typos (matteofigus)\n* fix content-type + charset (bengourley)\n* fix null values on query parameters (cristiandouce)\n\n# 0.15.7 / 2013-10-19\n\n* pin should.js to 1.3.0 due to breaking change in 2.0.x\n* fix browserify regression\n\n# 0.15.5 / 2013-10-09\n\n* add browser field to support browserify\n* fix .field() value number support\n\n# 0.15.4 / 2013-07-09\n\n* node: add a Request#agent() function to set the http Agent to use\n\n# 0.15.3 / 2013-07-05\n\n* fix .pipe() unzipping on more recent nodes. Closes [#240](https://github.com/ladjs/superagent/issues/240)\n* fix passing an empty object to .query() no longer appends \"?\"\n* fix formidable error handling\n* update formidable\n\n# 0.15.2 / 2013-07-02\n\n* fix: emit 'end' when piping.\n\n# 0.15.1 / 2013-06-26\n\n* add try/catch around parseLinks\n\n# 0.15.0 / 2013-06-25\n\n* make `Response#toError()` have a more meaningful `message`\n\n# 0.14.9 / 2013-06-15\n\n* add debug()s to the node client\n* add .abort() method to node client\n\n# 0.14.8 / 2013-06-13\n\n* set .agent = false always\n* remove X-Requested-With. Closes [#189](https://github.com/ladjs/superagent/issues/189)\n\n# 0.14.7 / 2013-06-06\n\n* fix unzip error handling\n\n# 0.14.6 / 2013-05-23\n\n* fix HEAD unzip bug\n\n# 0.14.5 / 2013-05-23\n\n* add flag to ensure the callback is **never** invoked twice\n\n# 0.14.4 / 2013-05-22\n\n* add superagent.js build output\n* update qs\n* update emitter-component\n* revert \"add browser field to support browserify\" see [GH-221](https://github.com/ladjs/superagent/issues/221)\n\n# 0.14.3 / 2013-05-18\n\n* add browser field to support browserify\n\n# 0.14.2/ 2013-05-07\n\n* add host object check to fix serialization of File/Blobs etc as json\n\n# 0.14.1 / 2013-04-09\n\n* update qs\n\n# 0.14.0 / 2013-04-02\n\n* add client-side basic auth\n* fix retaining of .set() header field case\n\n# 0.13.0 / 2013-03-13\n\n* add progress events to client\n* add simple example\n* add res.headers as alias of res.header for browser client\n* add res.get(field) to node/client\n\n# 0.12.4 / 2013-02-11\n\n* fix get content-type even if can't get other headers in firefox. fixes [#181](https://github.com/ladjs/superagent/issues/181)\n\n# 0.12.3 / 2013-02-11\n\n* add quick \"progress\" event support\n\n# 0.12.2 / 2013-02-04\n\n* add test to check if response acts as a readable stream\n* add ReadableStream in the Response prototype.\n* add test to assert correct redirection when the host changes in the location header.\n* add default Accept-Encoding. Closes [#155](https://github.com/ladjs/superagent/issues/155)\n* fix req.pipe() return value of original stream for node parity. Closes [#171](https://github.com/ladjs/superagent/issues/171)\n* remove the host header when cleaning headers to properly follow the redirection.\n\n# 0.12.1 / 2013-01-10\n\n* add x-domain error handling\n\n# 0.12.0 / 2013-01-04\n\n* add header persistence on redirects\n\n# 0.11.0 / 2013-01-02\n\n* add .error Error object. Closes [#156](https://github.com/ladjs/superagent/issues/156)\n* add forcing of res.text removal for FF HEAD responses. Closes [#162](https://github.com/ladjs/superagent/issues/162)\n* add reduce component usage. Closes [#90](https://github.com/ladjs/superagent/issues/90)\n* move better-assert dep to development deps\n\n# 0.10.0 / 2012-11-14\n\n* add req.timeout(ms) support for the client\n\n# 0.9.10 / 2012-11-14\n\n* fix client-side .query(str) support\n\n# 0.9.9 / 2012-11-14\n\n* add .parse(fn) support\n* fix socket hangup with dates in querystring. Closes [#146](https://github.com/ladjs/superagent/issues/146)\n* fix socket hangup \"error\" event when a callback of arity 2 is provided\n\n# 0.9.8 / 2012-11-03\n\n* add emission of error from `Request#callback()`\n* add a better fix for nodes weird socket hang up error\n* add PUT/POST/PATCH data support to client short-hand functions\n* add .license property to component.json\n* change client portion to build using component(1)\n* fix GET body support [guille]\n\n# 0.9.7 / 2012-10-19\n\n* fix `.buffer()` `res.text` when no parser matches\n\n# 0.9.6 / 2012-10-17\n\n* change: use `this` when `window` is undefined\n* update to new component spec [juliangruber]\n* fix emission of \"data\" events for compressed responses without encoding. Closes [#125](https://github.com/ladjs/superagent/issues/125)\n\n# 0.9.5 / 2012-10-01\n\n* add field name to .attach()\n* add text \"parser\"\n* refactor isObject()\n* remove wtf isFunction() helper\n\n# 0.9.4 / 2012-09-20\n\n* fix `Buffer` responses [TooTallNate]\n* fix `res.type` when a \"type\" param is present [TooTallNate]\n\n# 0.9.3 / 2012-09-18\n\n* remove **GET** `.send()` == `.query()` special-case (**API** change !!!)\n\n# 0.9.2 / 2012-09-17\n\n* add `.aborted` prop\n* add `.abort()`. Closes [#115](https://github.com/ladjs/superagent/issues/115)\n\n# 0.9.1 / 2012-09-07\n\n* add `.forbidden` response property\n* add component.json\n* change emitter-component to 0.0.5\n* fix client-side tests\n\n# 0.9.0 / 2012-08-28\n\n* add `.timeout(ms)`. Closes [#17](https://github.com/ladjs/superagent/issues/17)\n\n# 0.8.2 / 2012-08-28\n\n* fix pathname relative redirects. Closes [#112](https://github.com/ladjs/superagent/issues/112)\n\n# 0.8.1 / 2012-08-21\n\n* fix redirects when schema is specified\n\n# 0.8.0 / 2012-08-19\n\n* add `res.buffered` flag\n* add buffering of text/\\*, json and forms only by default. Closes [#61](https://github.com/ladjs/superagent/issues/61)\n* add `.buffer(false)` cancellation\n* add cookie jar support [hunterloftis]\n* add agent functionality [hunterloftis]\n\n# 0.7.0 / 2012-08-03\n\n* allow `query()` to be called after the internal `req` has been created [tootallnate]\n\n# 0.6.0 / 2012-07-17\n\n* add `res.send('foo=bar')` default of \"application/x-www-form-urlencoded\"\n\n# 0.5.1 / 2012-07-16\n\n* add \"methods\" dep\n* add `.end()` arity check to node callbacks\n* fix unzip support due to weird node internals\n\n# 0.5.0 / 2012-06-16\n\n* Added \"Link\" response header field parsing, exposing `res.links`\n\n# 0.4.3 / 2012-06-15\n\n* Added 303, 305 and 307 as redirect status codes [slaskis]\n* Fixed passing an object as the url\n\n# 0.4.2 / 2012-06-02\n\n* Added component support\n* Fixed redirect data\n\n# 0.4.1 / 2012-04-13\n\n* Added HTTP PATCH support\n* Fixed: GET / HEAD when following redirects. Closes [#86](https://github.com/ladjs/superagent/issues/86)\n* Fixed Content-Length detection for multibyte chars\n\n# 0.4.0 / 2012-03-04\n\n* Added `.head()` method [browser]. Closes [#78](https://github.com/ladjs/superagent/issues/78)\n* Added `make test-cov` support\n* Added multipart request support. Closes [#11](https://github.com/ladjs/superagent/issues/11)\n* Added all methods that node supports. Closes [#71](https://github.com/ladjs/superagent/issues/71)\n* Added \"response\" event providing a Response object. Closes [#28](https://github.com/ladjs/superagent/issues/28)\n* Added `.query(obj)`. Closes [#59](https://github.com/ladjs/superagent/issues/59)\n* Added `res.type` (browser). Closes [#54](https://github.com/ladjs/superagent/issues/54)\n* Changed: default `res.body` and `res.files` to {}\n* Fixed: port existing query-string fix (browser). Closes [#57](https://github.com/ladjs/superagent/issues/57)\n\n# 0.3.0 / 2012-01-24\n\n* Added deflate/gzip support [guillermo]\n* Added `res.type` (Content-Type void of params)\n* Added `res.statusCode` to mirror node\n* Added `res.headers` to mirror node\n* Changed: parsers take callbacks\n* Fixed optional schema support. Closes [#49](https://github.com/ladjs/superagent/issues/49)\n\n# 0.2.0 / 2012-01-05\n\n* Added url auth support\n* Added `.auth(username, password)`\n* Added basic auth support [node]. Closes [#41](https://github.com/ladjs/superagent/issues/41)\n* Added `make test-docs`\n* Added guillermo's EventEmitter. Closes [#16](https://github.com/ladjs/superagent/issues/16)\n* Removed `Request#data()` for SS, renamed to `send()`\n* Removed `Request#data()` from client, renamed to `send()`\n* Fixed array support. [browser]\n* Fixed array support. Closes [#35](https://github.com/ladjs/superagent/issues/35) [node]\n* Fixed `EventEmitter#emit()`\n\n# 0.1.3 / 2011-10-25\n\n* Added error to callback\n* Bumped node dep for 0.5.x\n\n# 0.1.2 / 2011-09-24\n\n* Added markdown documentation\n* Added `request(url[, fn])` support to the client\n* Added `qs` dependency to package.json\n* Added options for `Request#pipe()`\n* Added support for `request(url, callback)`\n* Added `request(url)` as shortcut for `request.get(url)`\n* Added `Request#pipe(stream)`\n* Added inherit from `Stream`\n* Added multipart support\n* Added ssl support (node)\n* Removed Content-Length field from client\n* Fixed buffering, `setEncoding()` to utf8 [reported by stagas]\n* Fixed \"end\" event when piping\n\n# 0.1.1 / 2011-08-20\n\n* Added `res.redirect` flag (node)\n* Added redirect support (node)\n* Added `Request#redirects(n)` (node)\n* Added `.set(object)` header field support\n* Fixed `Content-Length` support\n\n# 0.1.0 / 2011-08-09\n\n* Added support for multiple calls to `.data()`\n* Added support for `.get(uri, obj)`\n* Added GET `.data()` querystring support\n* Added IE{6,7,8} support [alexyoung]\n\n# 0.0.1 / 2011-08-05\n\n* Initial commit\n\n\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0771484375,
          "content": "(The MIT License)\n\nCopyright (c) 2014-2016 TJ Holowaychuk <tj@vision-media.ca>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.7685546875,
          "content": "OLDNODETESTS ?= lib/node/test/*.js lib/node/test/node/*.js\nNODETESTS ?= test/*.js test/node/*.js\nBROWSERTESTS ?= test/*.js test/client/*.js\nREPORTER = spec\n\nifeq (\"$(OLD_NODE_TEST)\", \"1\")\n\tNODETESTS := $(OLDNODETESTS)\nendif\n\ntest:\n\t@if [ \"$(BROWSER)\" = \"1\" ]; then \\\n\t\techo test on browser; \\\n\t\tmake test-browser; \\\n\tfi \\\n\n\t@if [ \"$(NODE_TEST)\" = \"1\" ] || [ \"x$(BROWSER)\" = \"x\" ]; then \\\n    echo test on node with http1; \\\n    export HTTP2_TEST=\"\" && make test-node; \\\n    if [ \"$(HTTP2_TEST_DISABLED)\" != \"1\" ]; then \\\n      echo test on node with http2; \\\n      export HTTP2_TEST=\"1\" && make test-node; \\\n    fi \\\n\tfi\n\ncopy:\n\t@if [ \"$(OLD_NODE_TEST)\" = \"1\" ]; then \\\n\t\techo test on old node; \\\n\t\tcp test/node/fixtures lib/node/test/node -rf; \\\n\telse \\\n\t\techo test on plain node; \\\n\tfi\n\ntest-node:copy\n\t@NODE_ENV=test HTTP2_TEST=$(HTTP2_TEST) ./node_modules/.bin/nyc ./node_modules/.bin/mocha \\\n\t\t--require should \\\n\t\t--trace-warnings \\\n\t\t--throw-deprecation \\\n\t\t--reporter $(REPORTER) \\\n\t\t--slow 2000 \\\n\t\t--timeout 5000 \\\n\t\t--exit \\\n\t\t$(NODETESTS)\n\ntest-cov: lib-cov\n\tSUPERAGENT_COV=1 $(MAKE) test REPORTER=html-cov > coverage.html\n\ntest-browser:\n\tSAUCE_APPIUM_VERSION=1.7 ./node_modules/.bin/zuul -- $(BROWSERTESTS)\n\ntest-browser-local:\n\t./node_modules/.bin/zuul --no-coverage --local 4000 -- $(BROWSERTESTS)\n\nlib-cov:\n\tjscoverage lib lib-cov\n\ntest-server:\n\t@node test/server\n\ndocs: index.html test-docs docs/index.md\n\nindex.html: docs/index.md docs/head.html docs/tail.html\n\tmarked < $< \\\n\t\t| cat docs/head.html - docs/tail.html \\\n\t\t> $@\n\ndocclean:\n\trm -f index.html docs/test.html\n\ntest-docs: docs/head.html docs/tail.html\n\tmake test REPORTER=doc \\\n\t\t| cat docs/head.html - docs/tail.html \\\n\t\t> docs/test.html\n\nclean:\n\trm -fr components\n\n.PHONY: copy test-cov test docs test-docs clean test-browser-local\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.3056640625,
          "content": "# superagent\n\n[![build status](https://img.shields.io/travis/ladjs/superagent.svg)](https://travis-ci.org/ladjs/superagent)\n[![code coverage](https://img.shields.io/codecov/c/github/ladjs/superagent.svg)](https://codecov.io/gh/ladjs/superagent)\n[![code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo)\n[![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n[![made with lass](https://img.shields.io/badge/made_with-lass-95CC28.svg)](https://lass.js.org)\n[![license](https://img.shields.io/github/license/ladjs/superagent.svg)](LICENSE)\n\n> Small progressive client-side HTTP request library, and Node.js module with the same API, supporting many high-level HTTP client features.  Maintained for [Forward Email](https://github.com/forwardemail) and [Lad](https://github.com/ladjs).\n\n\n## Table of Contents\n\n* [Install](#install)\n* [Usage](#usage)\n  * [Node](#node)\n  * [Browser](#browser)\n* [Supported Platforms](#supported-platforms)\n  * [Required Browser Features](#required-browser-features)\n* [Plugins](#plugins)\n* [Upgrading from previous versions](#upgrading-from-previous-versions)\n* [Contributors](#contributors)\n* [License](#license)\n\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install superagent\n```\n\n[yarn][]:\n\n```sh\nyarn add superagent\n```\n\n\n## Usage\n\n### Node\n\n```js\nconst superagent = require('superagent');\n\n// callback\nsuperagent\n  .post('/api/pet')\n  .send({ name: 'Manny', species: 'cat' }) // sends a JSON post body\n  .set('X-API-Key', 'foobar')\n  .set('accept', 'json')\n  .end((err, res) => {\n    // Calling the end function will send the request\n  });\n\n// promise with then/catch\nsuperagent.post('/api/pet').then(console.log).catch(console.error);\n\n// promise with async/await\n(async () => {\n  try {\n    const res = await superagent.post('/api/pet');\n    console.log(res);\n  } catch (err) {\n    console.error(err);\n  }\n})();\n```\n\n### Browser\n\n**The browser-ready, minified version of `superagent` is only 50 KB (minified and gzipped).**\n\nBrowser-ready versions of this module are available via [jsdelivr][], [unpkg][], and also in the `node_modules/superagent/dist` folder in downloads of the `superagent` package.\n\n> Note that we also provide unminified versions with `.js` instead of `.min.js` file extensions.\n\n#### VanillaJS\n\nThis is the solution for you if you're just using `<script>` tags everywhere!\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/polyfill/v3/polyfill.min.js?features=WeakRef,BigInt\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/superagent\"></script>\n<!-- if you wish to use unpkg.com instead: -->\n<!-- <script src=\"https://unpkg.com/superagent\"></script> -->\n<script type=\"text/javascript\">\n  (function() {\n    // superagent is exposed as `window.superagent`\n    // if you wish to use \"request\" instead please\n    // uncomment the following line of code:\n    // `window.request = superagent;`\n    superagent\n      .post('/api/pet')\n      .send({ name: 'Manny', species: 'cat' }) // sends a JSON post body\n      .set('X-API-Key', 'foobar')\n      .set('accept', 'json')\n      .end(function (err, res) {\n        // Calling the end function will send the request\n      });\n  })();\n</script>\n```\n\n#### Bundler\n\nIf you are using [browserify][], [webpack][], [rollup][], or another bundler, then you can follow the same usage as [Node](#node) above.\n\n\n## Supported Platforms\n\n* Node: v14.18.0+\n* Browsers (see [.browserslistrc](.browserslistrc)):\n\n  ```sh\n  npx browserslist\n  ```\n\n  ```sh\n  and_chr 102\n  and_ff 101\n  and_qq 10.4\n  and_uc 12.12\n  android 101\n  chrome 103\n  chrome 102\n  chrome 101\n  chrome 100\n  edge 103\n  edge 102\n  edge 101\n  firefox 101\n  firefox 100\n  firefox 91\n  ios_saf 15.5\n  ios_saf 15.4\n  ios_saf 15.2-15.3\n  ios_saf 15.0-15.1\n  ios_saf 14.5-14.8\n  ios_saf 14.0-14.4\n  ios_saf 12.2-12.5\n  kaios 2.5\n  op_mini all\n  op_mob 64\n  opera 86\n  opera 85\n  safari 15.5\n  safari 15.4\n  samsung 17.0\n  samsung 16.0\n  ```\n\n### Required Browser Features\n\nWe recommend using <https://cdnjs.cloudflare.com/polyfill/> (specifically with the bundle mentioned in [VanillaJS](#vanillajs) above):\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/polyfill/v3/polyfill.min.js?features=WeakRef,BigInt\"></script>\n```\n\n* WeakRef is not supported in Opera 85, iOS Safari 12.2-12.5\n* BigInt is not supported in iOS Safari 12.2-12.5\n\n\n## Plugins\n\nSuperAgent is easily extended via plugins.\n\n```js\nconst nocache = require('superagent-no-cache');\nconst superagent = require('superagent');\nconst prefix = require('superagent-prefix')('/static');\n\nsuperagent\n  .get('/some-url')\n  .query({ action: 'edit', city: 'London' }) // query string\n  .use(prefix) // Prefixes *only* this request\n  .use(nocache) // Prevents caching of *only* this request\n  .end((err, res) => {\n    // Do something\n  });\n```\n\nExisting plugins:\n\n* [superagent-no-cache](https://github.com/johntron/superagent-no-cache) - prevents caching by including Cache-Control header\n* [superagent-prefix](https://github.com/johntron/superagent-prefix) - prefixes absolute URLs (useful in test environment)\n* [superagent-suffix](https://github.com/timneutkens1/superagent-suffix) - suffix URLs with a given path\n* [superagent-mock](https://github.com/M6Web/superagent-mock) - simulate HTTP calls by returning data fixtures based on the requested URL\n* [superagent-mocker](https://github.com/shuvalov-anton/superagent-mocker) — simulate REST API\n* [superagent-cache](https://github.com/jpodwys/superagent-cache) - A global SuperAgent patch with built-in, flexible caching\n* [superagent-cache-plugin](https://github.com/jpodwys/superagent-cache-plugin) - A SuperAgent plugin with built-in, flexible caching\n* [superagent-jsonapify](https://github.com/alex94puchades/superagent-jsonapify) - A lightweight [json-api](http://jsonapi.org/format/) client addon for superagent\n* [superagent-serializer](https://github.com/zzarcon/superagent-serializer) - Converts server payload into different cases\n* [superagent-httpbackend](https://www.npmjs.com/package/superagent-httpbackend) - stub out requests using AngularJS' $httpBackend syntax\n* [superagent-throttle](https://github.com/leviwheatcroft/superagent-throttle) - queues and intelligently throttles requests\n* [superagent-charset](https://github.com/magicdawn/superagent-charset) - add charset support for node's SuperAgent\n* [superagent-verbose-errors](https://github.com/jcoreio/superagent-verbose-errors) - include response body in error messages for failed requests\n* [superagent-declare](https://github.com/damoclark/superagent-declare) - A simple [declarative](https://en.wikipedia.org/wiki/Declarative_programming) API for SuperAgent\n* [superagent-node-http-timings](https://github.com/webuniverseio/superagent-node-http-timings) - measure http timings in node.js\n* [superagent-cheerio](https://github.com/mmmmmrob/superagent-cheerio) - add [cheerio](https://www.npmjs.com/package/cheerio) to your response content automatically. Adds `res.$` for HTML and XML response bodies.\n* [@certible/superagent-aws-sign](https://github.com/certible/superagent-aws-sign) - Sign AWS endpoint requests, it uses the aws4 to authenticate the SuperAgent requests\n\nPlease prefix your plugin with `superagent-*` so that it can easily be found by others.\n\nFor SuperAgent extensions such as couchdb and oauth visit the [wiki](https://github.com/ladjs/superagent/wiki).\n\n\n## Upgrading from previous versions\n\nPlease see [GitHub releases page](https://github.com/ladjs/superagent/releases) for the current changelog.\n\nOur breaking changes are mostly in rarely used functionality and from stricter error handling.\n\n* [6.0 to 6.1](https://github.com/ladjs/superagent/releases/tag/v6.1.0)\n  * Browser behaviour changed to match Node when serializing `application/x-www-form-urlencoded`, using `arrayFormat: 'indices'` semantics of `qs` library. (See: <https://www.npmjs.com/package/qs#stringifying>)\n* [5.x to 6.x](https://github.com/ladjs/superagent/releases/tag/v6.0.0):\n  * Retry behavior is still opt-in, however we now have a more fine-grained list of status codes and error codes that we retry against (see updated docs)\n  * A specific issue with Content-Type matching not being case-insensitive is fixed\n  * Set is now required for IE 9, see [Required Browser Features](#required-browser-features) for more insight\n* [4.x to 5.x](https://github.com/ladjs/superagent/releases/tag/v5.0.0):\n  * We've implemented the build setup of [Lass](https://lass.js.org) to simplify our stack and linting\n  * Unminified browserified build size has been reduced from 48KB to 20KB (via `tinyify` and the latest version of Babel using `@babel/preset-env` and `.browserslistrc`)\n  * Linting support has been added using `caniuse-lite` and `eslint-plugin-compat`\n  * We can now target what versions of Node we wish to support more easily using `.babelrc`\n* [3.x to 4.x](https://github.com/ladjs/superagent/releases/tag/v4.0.0-alpha.1):\n  * Ensure you're running Node 6 or later. We've dropped support for Node 4.\n  * We've started using ES6 and for compatibility with Internet Explorer you may need to use Babel.\n  * We suggest migrating from `.end()` callbacks to `.then()` or `await`.\n* [2.x to 3.x](https://github.com/ladjs/superagent/releases/tag/v3.0.0):\n  * Ensure you're running Node 4 or later. We've dropped support for Node 0.x.\n  * Test code that calls `.send()` multiple times. Invalid calls to `.send()` will now throw instead of sending garbage.\n* [1.x to 2.x](https://github.com/ladjs/superagent/releases/tag/v2.0.0):\n  * If you use `.parse()` in the *browser* version, rename it to `.serialize()`.\n  * If you rely on `undefined` in query-string values being sent literally as the text \"undefined\", switch to checking for missing value instead. `?key=undefined` is now `?key` (without a value).\n  * If you use `.then()` in Internet Explorer, ensure that you have a polyfill that adds a global `Promise` object.\n* 0.x to 1.x:\n  * Instead of 1-argument callback `.end(function(res){})` use `.then(res => {})`.\n\n\n## Contributors\n\n| Name                |\n| ------------------- |\n| **Kornel Lesiński** |\n| **Peter Lyons**     |\n| **Hunter Loftis**   |\n| **Nick Baugh**      |\n\n\n## License\n\n[MIT](LICENSE) © TJ Holowaychuk\n\n\n##\n\n[npm]: https://www.npmjs.com/\n\n[yarn]: https://yarnpkg.com/\n\n[jsdelivr]: https://www.jsdelivr.com/\n\n[unpkg]: https://unpkg.com/\n\n[browserify]: https://github.com/browserify/browserify\n\n[webpack]: https://github.com/webpack/webpack\n\n[rollup]: https://github.com/rollup/rollup\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.10546875,
          "content": "# Security Policy\n\n\n## Reporting a Vulnerability\n\nPlease report security issues to `niftylettuce@gmail.com`\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 41.9716796875,
          "content": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>SuperAgent — elegant API for AJAX in Node and browsers</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/tocbot/3.0.0/tocbot.css\">\n    <link rel=\"stylesheet\" href=\"docs/style.css\">\n  </head>\n  <body>\n    <ul id=\"menu\"></ul>\n    <div id=\"content\">\n<h1 id=\"superagent\">SuperAgent</h1>\n<p>SuperAgent is light-weight progressive ajax API crafted for flexibility, readability, and a low learning curve after being frustrated with many of the existing request APIs. It also works with Node.js!</p>\n<pre><code class=\"language-javascript\">     request\n       .post(&#39;/api/pet&#39;)\n       .send({ name: &#39;Manny&#39;, species: &#39;cat&#39; })\n       .set(&#39;X-API-Key&#39;, &#39;foobar&#39;)\n       .set(&#39;Accept&#39;, &#39;application/json&#39;)\n       .then(res =&gt; {\n          alert(&#39;yay got &#39; + JSON.stringify(res.body));\n       });\n</code></pre>\n<h2 id=\"test-documentation\">Test documentation</h2>\n<p><a href=\"docs/zh_CN/index.html\"><strong>中文文档</strong></a></p>\n<p>The following <a href=\"docs/test.html\">test documentation</a> was generated with <a href=\"https://mochajs.org/\">Mocha&#39;s</a> &quot;doc&quot; reporter, and directly reflects the test suite. This provides an additional source of documentation.</p>\n<h2 id=\"request-basics\">Request basics</h2>\n<p>A request can be initiated by invoking the appropriate method on the <code>request</code> object, then calling <code>.then()</code> (or <code>.end()</code> <a href=\"#promise-and-generator-support\">or <code>await</code></a>) to send the request. For example a simple <strong>GET</strong> request:</p>\n<pre><code class=\"language-javascript\">     request\n       .get(&#39;/search&#39;)\n       .then(res =&gt; {\n          // res.body, res.headers, res.status\n       })\n       .catch(err =&gt; {\n          // err.message, err.response\n       });\n</code></pre>\n<p>HTTP method may also be passed as a string:</p>\n<pre><code class=\"language-javascript\">    request(&#39;GET&#39;, &#39;/search&#39;).then(success, failure);\n</code></pre>\n<p>Old-style callbacks are also supported, but not recommended. <em>Instead of</em> <code>.then()</code> you can call <code>.end()</code>:</p>\n<pre><code class=\"language-javascript\">    request(&#39;GET&#39;, &#39;/search&#39;).end(function(err, res){\n      if (res.ok) {}\n    });\n</code></pre>\n<p>Absolute URLs can be used. In web browsers absolute URLs work only if the server implements <a href=\"#cors\">CORS</a>.</p>\n<pre><code class=\"language-javascript\">     request\n       .get(&#39;https://example.com/search&#39;)\n       .then(res =&gt; {\n\n       });\n</code></pre>\n<p>The <strong>Node</strong> client supports making requests to <a href=\"https://en.wikipedia.org/wiki/Unix_domain_socket\">Unix Domain Sockets</a>:</p>\n<pre><code class=\"language-javascript\">    // pattern: https?+unix://SOCKET_PATH/REQUEST_PATH\n    //          Use `%2F` as `/` in SOCKET_PATH\n    try {\n      const res = await request\n        .get(&#39;http+unix://%2Fabsolute%2Fpath%2Fto%2Funix.sock/search&#39;);\n      // res.body, res.headers, res.status\n    } catch(err) {\n      // err.message, err.response\n    }\n</code></pre>\n<p><strong>DELETE</strong>, <strong>HEAD</strong>, <strong>PATCH</strong>, <strong>POST</strong>, and <strong>PUT</strong> requests can also be used, simply change the method name:</p>\n<pre><code class=\"language-javascript\">    request\n      .head(&#39;/favicon.ico&#39;)\n      .then(res =&gt; {\n\n      });\n</code></pre>\n<p><strong>DELETE</strong> can be also called as <code>.del()</code> for compatibility with old IE where <code>delete</code> is a reserved word.</p>\n<p>The HTTP method defaults to <strong>GET</strong>, so if you wish, the following is valid:</p>\n<pre><code class=\"language-javascript\">     request(&#39;/search&#39;, (err, res) =&gt; {\n\n     });\n</code></pre>\n<h2 id=\"using-http/2\">Using HTTP/2</h2>\n<p>To make a request using HTTP/2 protocol only (with no HTTP/1.x fallback), use the <code>.http2()</code> method.</p>\n<pre><code class=\"language-javascript\">    const request = require(&#39;superagent&#39;);\n    const res = await request\n      .get(&#39;https://example.com/h2&#39;)\n      .http2();\n</code></pre>\n<h2 id=\"setting-header-fields\">Setting header fields</h2>\n<p>Setting header fields is simple, invoke <code>.set()</code> with a field name and value:</p>\n<pre><code class=\"language-javascript\">     request\n       .get(&#39;/search&#39;)\n       .set(&#39;API-Key&#39;, &#39;foobar&#39;)\n       .set(&#39;Accept&#39;, &#39;application/json&#39;)\n       .then(callback);\n</code></pre>\n<p>You may also pass an object to set several fields in a single call:</p>\n<pre><code class=\"language-javascript\">     request\n       .get(&#39;/search&#39;)\n       .set({ &#39;API-Key&#39;: &#39;foobar&#39;, Accept: &#39;application/json&#39; })\n       .then(callback);\n</code></pre>\n<h2 id=\"get-requests\"><code>GET</code> requests</h2>\n<p>The <code>.query()</code> method accepts objects, which when used with the <strong>GET</strong> method will form a query-string. The following will produce the path <code>/search?query=Manny&amp;range=1..5&amp;order=desc</code>.</p>\n<pre><code class=\"language-javascript\">     request\n       .get(&#39;/search&#39;)\n       .query({ query: &#39;Manny&#39; })\n       .query({ range: &#39;1..5&#39; })\n       .query({ order: &#39;desc&#39; })\n       .then(res =&gt; {\n\n       });\n</code></pre>\n<p>Or as a single object:</p>\n<pre><code class=\"language-javascript\">    request\n      .get(&#39;/search&#39;)\n      .query({ query: &#39;Manny&#39;, range: &#39;1..5&#39;, order: &#39;desc&#39; })\n      .then(res =&gt; {\n\n      });\n</code></pre>\n<p>The <code>.query()</code> method accepts strings as well:</p>\n<pre><code class=\"language-javascript\">      request\n        .get(&#39;/querystring&#39;)\n        .query(&#39;search=Manny&amp;range=1..5&#39;)\n        .then(res =&gt; {\n\n        });\n</code></pre>\n<p>Or joined:</p>\n<pre><code class=\"language-javascript\">      request\n        .get(&#39;/querystring&#39;)\n        .query(&#39;search=Manny&#39;)\n        .query(&#39;range=1..5&#39;)\n        .then(res =&gt; {\n\n        });\n</code></pre>\n<h2 id=\"head-requests\"><code>HEAD</code> requests</h2>\n<p>You can also use the <code>.query()</code> method for HEAD requests. The following will produce the path <code>/users?email=joe@smith.com</code>.</p>\n<pre><code class=\"language-javascript\">      request\n        .head(&#39;/users&#39;)\n        .query({ email: &#39;joe@smith.com&#39; })\n        .then(res =&gt; {\n\n        });\n</code></pre>\n<h2 id=\"post--put-requests\"><code>POST</code> / <code>PUT</code> requests</h2>\n<p>A typical JSON <strong>POST</strong> request might look a little like the following, where we set the Content-Type header field appropriately, and &quot;write&quot; some data, in this case just a JSON string.</p>\n<pre><code class=\"language-javascript\">      request.post(&#39;/user&#39;)\n        .set(&#39;Content-Type&#39;, &#39;application/json&#39;)\n        .send(&#39;{&quot;name&quot;:&quot;tj&quot;,&quot;pet&quot;:&quot;tobi&quot;}&#39;)\n        .then(callback)\n        .catch(errorCallback)\n</code></pre>\n<p>Since JSON is undoubtedly the most common, it&#39;s the <em>default</em>! The following example is equivalent to the previous.</p>\n<pre><code class=\"language-javascript\">      request.post(&#39;/user&#39;)\n        .send({ name: &#39;tj&#39;, pet: &#39;tobi&#39; })\n        .then(callback, errorCallback)\n</code></pre>\n<p>Or using multiple <code>.send()</code> calls:</p>\n<pre><code class=\"language-javascript\">      request.post(&#39;/user&#39;)\n        .send({ name: &#39;tj&#39; })\n        .send({ pet: &#39;tobi&#39; })\n        .then(callback, errorCallback)\n</code></pre>\n<p>By default sending strings will set the <code>Content-Type</code> to <code>application/x-www-form-urlencoded</code>,\n  multiple calls will be concatenated with <code>&amp;</code>, here resulting in <code>name=tj&amp;pet=tobi</code>:</p>\n<pre><code class=\"language-javascript\">      request.post(&#39;/user&#39;)\n        .send(&#39;name=tj&#39;)\n        .send(&#39;pet=tobi&#39;)\n        .then(callback, errorCallback);\n</code></pre>\n<p>SuperAgent formats are extensible, however by default &quot;json&quot; and &quot;form&quot; are supported. To send the data as <code>application/x-www-form-urlencoded</code> simply invoke <code>.type()</code> with &quot;form&quot;, where the default is &quot;json&quot;. This request will <strong>POST</strong> the body &quot;name=tj&amp;pet=tobi&quot;.</p>\n<pre><code class=\"language-javascript\">      request.post(&#39;/user&#39;)\n        .type(&#39;form&#39;)\n        .send({ name: &#39;tj&#39; })\n        .send({ pet: &#39;tobi&#39; })\n        .then(callback, errorCallback)\n</code></pre>\n<p>Sending a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData\"><code>FormData</code></a> object is also supported. The following example will <strong>POST</strong> the content of the HTML form identified by id=&quot;myForm&quot;:</p>\n<pre><code class=\"language-javascript\">      request.post(&#39;/user&#39;)\n        .send(new FormData(document.getElementById(&#39;myForm&#39;)))\n        .then(callback, errorCallback)\n</code></pre>\n<h2 id=\"setting-the-content-type\">Setting the <code>Content-Type</code></h2>\n<p>The obvious solution is to use the <code>.set()</code> method:</p>\n<pre><code class=\"language-javascript\">     request.post(&#39;/user&#39;)\n       .set(&#39;Content-Type&#39;, &#39;application/json&#39;)\n</code></pre>\n<p>As a short-hand the <code>.type()</code> method is also available, accepting\nthe canonicalized MIME type name complete with type/subtype, or\nsimply the extension name such as &quot;xml&quot;, &quot;json&quot;, &quot;png&quot;, etc:</p>\n<pre><code class=\"language-javascript\">     request.post(&#39;/user&#39;)\n       .type(&#39;application/json&#39;)\n\n     request.post(&#39;/user&#39;)\n       .type(&#39;json&#39;)\n\n     request.post(&#39;/user&#39;)\n       .type(&#39;png&#39;)\n</code></pre>\n<h2 id=\"serializing-request-body\">Serializing request body</h2>\n<p>SuperAgent will automatically serialize JSON and forms.\nYou can setup automatic serialization for other types as well:</p>\n<pre><code class=\"language-js\">request.serialize[&#39;application/xml&#39;] = function (obj) {\n    return &#39;string generated from obj&#39;;\n};\n\n// going forward, all requests with a Content-type of\n// &#39;application/xml&#39; will be automatically serialized\n</code></pre>\n<p>If you want to send the payload in a custom format, you can replace\nthe built-in serialization with the <code>.serialize()</code> method on a per-request basis:</p>\n<pre><code class=\"language-js\">request\n    .post(&#39;/user&#39;)\n    .send({foo: &#39;bar&#39;})\n    .serialize(obj =&gt; {\n        return &#39;string generated from obj&#39;;\n    });\n</code></pre>\n<h2 id=\"retrying-requests\">Retrying requests</h2>\n<p>When given the <code>.retry()</code> method, SuperAgent will automatically retry requests, if they fail in a way that is transient or could be due to a flaky Internet connection.</p>\n<p>This method has two optional arguments: number of retries (default 1) and a callback. It calls <code>callback(err, res)</code> before each retry. The callback may return <code>true</code>/<code>false</code> to control whether the request should be retried (but the maximum number of retries is always applied).</p>\n<pre><code class=\"language-javascript\">     request\n       .get(&#39;https://example.com/search&#39;)\n       .retry(2) // or:\n       .retry(2, callback)\n       .then(finished);\n       .catch(failed);\n</code></pre>\n<p>Use <code>.retry()</code> only with requests that are <em>idempotent</em> (i.e. multiple requests reaching the server won&#39;t cause undesirable side effects like duplicate purchases).</p>\n<p>All request methods are tried by default (which means if you do not want POST requests to be retried, you will need to pass a custom retry callback).</p>\n<p>By default the following status codes are retried:</p>\n<ul>\n<li><code>408</code></li>\n<li><code>413</code></li>\n<li><code>429</code></li>\n<li><code>500</code></li>\n<li><code>502</code></li>\n<li><code>503</code></li>\n<li><code>504</code></li>\n<li><code>521</code></li>\n<li><code>522</code></li>\n<li><code>524</code></li>\n</ul>\n<p>By default the following error codes are retried:</p>\n<ul>\n<li><code>&#39;ETIMEDOUT&#39;</code></li>\n<li><code>&#39;ECONNRESET&#39;</code></li>\n<li><code>&#39;EADDRINUSE&#39;</code></li>\n<li><code>&#39;ECONNREFUSED&#39;</code></li>\n<li><code>&#39;EPIPE&#39;</code></li>\n<li><code>&#39;ENOTFOUND&#39;</code></li>\n<li><code>&#39;ENETUNREACH&#39;</code></li>\n<li><code>&#39;EAI_AGAIN&#39;</code></li>\n</ul>\n<h2 id=\"setting-accept\">Setting Accept</h2>\n<p>In a similar fashion to the <code>.type()</code> method it is also possible to set the <code>Accept</code> header via the short hand method <code>.accept()</code>. Which references <code>request.types</code> as well allowing you to specify either the full canonicalized MIME type name as <code>type/subtype</code>, or the extension suffix form as &quot;xml&quot;, &quot;json&quot;, &quot;png&quot;, etc. for convenience:</p>\n<pre><code class=\"language-javascript\">     request.get(&#39;/user&#39;)\n       .accept(&#39;application/json&#39;)\n\n     request.get(&#39;/user&#39;)\n       .accept(&#39;json&#39;)\n\n     request.post(&#39;/user&#39;)\n       .accept(&#39;png&#39;)\n</code></pre>\n<h3 id=\"facebook-and-accept-json\">Facebook and Accept JSON</h3>\n<p>If you are calling Facebook&#39;s API, be sure to send an <code>Accept: application/json</code> header in your request. If you don&#39;t do this, Facebook will respond with <code>Content-Type: text/javascript; charset=UTF-8</code>, which SuperAgent will not parse and thus <code>res.body</code> will be undefined. You can do this with either <code>req.accept(&#39;json&#39;)</code> or <code>req.set(&#39;Accept&#39;, &#39;application/json&#39;)</code>. See <a href=\"https://github.com/ladjs/superagent/issues/1078\">issue 1078</a> for details.</p>\n<h2 id=\"query-strings\">Query strings</h2>\n<p>  <code>req.query(obj)</code> is a method which may be used to build up a query-string. For example populating <code>?format=json&amp;dest=/login</code> on a <strong>POST</strong>:</p>\n<pre><code class=\"language-javascript\">    request\n      .post(&#39;/&#39;)\n      .query({ format: &#39;json&#39; })\n      .query({ dest: &#39;/login&#39; })\n      .send({ post: &#39;data&#39;, here: &#39;wahoo&#39; })\n      .then(callback);\n</code></pre>\n<p>By default the query string is not assembled in any particular order. An asciibetically-sorted query string can be enabled with <code>req.sortQuery()</code>. You may also provide a custom sorting comparison function with <code>req.sortQuery(myComparisonFn)</code>. The comparison function should take 2 arguments and return a negative/zero/positive integer.</p>\n<pre><code class=\"language-js\"> // default order\n request.get(&#39;/user&#39;)\n   .query(&#39;name=Nick&#39;)\n   .query(&#39;search=Manny&#39;)\n   .sortQuery()\n   .then(callback)\n\n // customized sort function\n request.get(&#39;/user&#39;)\n   .query(&#39;name=Nick&#39;)\n   .query(&#39;search=Manny&#39;)\n   .sortQuery((a, b) =&gt; a.length - b.length)\n   .then(callback)\n</code></pre>\n<h2 id=\"tls-options\">TLS options</h2>\n<p>In Node.js SuperAgent supports methods to configure HTTPS requests:</p>\n<ul>\n<li><code>.ca()</code>: Set the CA certificate(s) to trust</li>\n<li><code>.cert()</code>: Set the client certificate chain(s)</li>\n<li><code>.key()</code>: Set the client private key(s)</li>\n<li><code>.pfx()</code>: Set the client PFX or PKCS12 encoded private key and certificate chain</li>\n<li><code>.disableTLSCerts()</code>: Does not reject expired or invalid TLS certs. Sets internally <code>rejectUnauthorized=true</code>. <em>Be warned, this method allows MITM attacks.</em></li>\n</ul>\n<p>For more information, see Node.js <a href=\"https://nodejs.org/api/https.html#https_https_request_options_callback\">https.request docs</a>.</p>\n<pre><code class=\"language-js\">var key = fs.readFileSync(&#39;key.pem&#39;),\n    cert = fs.readFileSync(&#39;cert.pem&#39;);\n\nrequest\n  .post(&#39;/client-auth&#39;)\n  .key(key)\n  .cert(cert)\n  .then(callback);\n</code></pre>\n<pre><code class=\"language-js\">var ca = fs.readFileSync(&#39;ca.cert.pem&#39;);\n\nrequest\n  .post(&#39;https://localhost/private-ca-server&#39;)\n  .ca(ca)\n  .then(res =&gt; {});\n</code></pre>\n<h2 id=\"parsing-response-bodies\">Parsing response bodies</h2>\n<p>SuperAgent will parse known response-body data for you,\ncurrently supporting <code>application/x-www-form-urlencoded</code>,\n<code>application/json</code>, and <code>multipart/form-data</code>. You can setup\nautomatic parsing for other response-body data as well:</p>\n<pre><code class=\"language-js\">//browser\nrequest.parse[&#39;application/xml&#39;] = function (str) {\n    return {&#39;object&#39;: &#39;parsed from str&#39;};\n};\n\n//node\nrequest.parse[&#39;application/xml&#39;] = function (res, cb) {\n    //parse response text and set res.body here\n\n    cb(null, res);\n};\n\n//going forward, responses of type &#39;application/xml&#39;\n//will be parsed automatically\n</code></pre>\n<p>You can set a custom parser (that takes precedence over built-in parsers) with the <code>.buffer(true).parse(fn)</code> method. If response buffering is not enabled (<code>.buffer(false)</code>) then the <code>response</code> event will be emitted without waiting for the body parser to finish, so <code>response.body</code> won&#39;t be available.</p>\n<h3 id=\"json--urlencoded\">JSON / Urlencoded</h3>\n<p>The property <code>res.body</code> is the parsed object, for example if a request responded with the JSON string &#39;{&quot;user&quot;:{&quot;name&quot;:&quot;tobi&quot;}}&#39;, <code>res.body.user.name</code> would be &quot;tobi&quot;. Likewise the x-www-form-urlencoded value of &quot;user[name]=tobi&quot; would yield the same result. Only one level of nesting is supported. If you need more complex data, send JSON instead.</p>\n<p>Arrays are sent by repeating the key. <code>.send({color: [&#39;red&#39;,&#39;blue&#39;]})</code> sends <code>color=red&amp;color=blue</code>. If you want the array keys to contain <code>[]</code> in their name, you must add it yourself, as SuperAgent doesn&#39;t add it automatically.</p>\n<h3 id=\"multipart\">Multipart</h3>\n<p>The Node client supports <em>multipart/form-data</em> via the <a href=\"https://github.com/felixge/node-formidable\">Formidable</a> module. When parsing multipart responses, the object <code>res.files</code> is also available to you. Suppose for example a request responds with the following multipart body:</p>\n<pre><code>--whoop\nContent-Disposition: attachment; name=&quot;image&quot;; filename=&quot;tobi.png&quot;\nContent-Type: image/png\n\n... data here ...\n--whoop\nContent-Disposition: form-data; name=&quot;name&quot;\nContent-Type: text/plain\n\nTobi\n--whoop--\n</code></pre>\n<p>You would have the values <code>res.body.name</code> provided as &quot;Tobi&quot;, and <code>res.files.image</code> as a <code>File</code> object containing the path on disk, filename, and other properties.</p>\n<h3 id=\"binary\">Binary</h3>\n<p>In browsers, you may use <code>.responseType(&#39;blob&#39;)</code> to request handling of binary response bodies. This API is unnecessary when running in node.js. The supported argument values for this method are</p>\n<ul>\n<li><code>&#39;blob&#39;</code> passed through to the XmlHTTPRequest <code>responseType</code> property</li>\n<li><code>&#39;arraybuffer&#39;</code> passed through to the XmlHTTPRequest <code>responseType</code> property</li>\n</ul>\n<pre><code class=\"language-js\">req.get(&#39;/binary.data&#39;)\n  .responseType(&#39;blob&#39;)\n  .then(res =&gt; {\n    // res.body will be a browser native Blob type here\n  });\n</code></pre>\n<p>For more information, see the Mozilla Developer Network <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType\">xhr.responseType docs</a>.</p>\n<h2 id=\"response-properties\">Response properties</h2>\n<p>Many helpful flags and properties are set on the <code>Response</code> object, ranging from the response text, parsed response body, header fields, status flags and more.</p>\n<h3 id=\"response-text\">Response text</h3>\n<p>The <code>res.text</code> property contains the unparsed response body string. This property is always present for the client API, and only when the mime type matches &quot;text/<em>&quot;, &quot;</em>/json&quot;, or &quot;x-www-form-urlencoded&quot; by default for node. The reasoning is to conserve memory, as buffering text of large bodies such as multipart files or images is extremely inefficient. To force buffering see the &quot;Buffering responses&quot; section.</p>\n<h3 id=\"response-body\">Response body</h3>\n<p>Much like SuperAgent can auto-serialize request data, it can also automatically parse it. When a parser is defined for the Content-Type, it is parsed, which by default includes &quot;application/json&quot; and &quot;application/x-www-form-urlencoded&quot;. The parsed object is then available via <code>res.body</code>.</p>\n<h3 id=\"response-header-fields\">Response header fields</h3>\n<p>The <code>res.header</code> contains an object of parsed header fields, lowercasing field names much like node does. For example <code>res.header[&#39;content-length&#39;]</code>.</p>\n<h3 id=\"response-content-type\">Response Content-Type</h3>\n<p>The Content-Type response header is special-cased, providing <code>res.type</code>, which is void of the charset (if any). For example the Content-Type of &quot;text/html; charset=utf8&quot; will provide &quot;text/html&quot; as <code>res.type</code>, and the <code>res.charset</code> property would then contain &quot;utf8&quot;.</p>\n<h3 id=\"response-status\">Response status</h3>\n<p>The response status flags help determine if the request was a success, among other useful information, making SuperAgent ideal for interacting with RESTful web services. These flags are currently defined as:</p>\n<pre><code class=\"language-javascript\">     var type = status / 100 | 0;\n\n     // status / class\n     res.status = status;\n     res.statusType = type;\n\n     // basics\n     res.info = 1 == type;\n     res.ok = 2 == type;\n     res.clientError = 4 == type;\n     res.serverError = 5 == type;\n     res.error = 4 == type || 5 == type;\n\n     // sugar\n     res.accepted = 202 == status;\n     res.noContent = 204 == status || 1223 == status;\n     res.badRequest = 400 == status;\n     res.unauthorized = 401 == status;\n     res.notAcceptable = 406 == status;\n     res.notFound = 404 == status;\n     res.forbidden = 403 == status;\n</code></pre>\n<h2 id=\"aborting-requests\">Aborting requests</h2>\n<p>To abort requests simply invoke the <code>req.abort()</code> method.</p>\n<h2 id=\"timeouts\">Timeouts</h2>\n<p>Sometimes networks and servers get &quot;stuck&quot; and never respond after accepting a request. Set timeouts to avoid requests waiting forever.</p>\n<ul>\n<li><p><code>req.timeout({deadline:ms})</code> or <code>req.timeout(ms)</code> (where <code>ms</code> is a number of milliseconds &gt; 0) sets a deadline for the entire request (including all uploads, redirects, server processing time) to complete. If the response isn&#39;t fully downloaded within that time, the request will be aborted.</p>\n</li>\n<li><p><code>req.timeout({response:ms})</code> sets maximum time to wait for the first byte to arrive from the server, but it does not limit how long the entire download can take. Response timeout should be at least few seconds longer than just the time it takes the server to respond, because it also includes time to make DNS lookup, TCP/IP and TLS connections, and time to upload request data.</p>\n</li>\n</ul>\n<p>You should use both <code>deadline</code> and <code>response</code> timeouts. This way you can use a short response timeout to detect unresponsive networks quickly, and a long deadline to give time for downloads on slow, but reliable, networks. Note that both of these timers limit how long <em>uploads</em> of attached files are allowed to take. Use long timeouts if you&#39;re uploading files.</p>\n<pre><code class=\"language-javascript\">    request\n      .get(&#39;/big-file?network=slow&#39;)\n      .timeout({\n        response: 5000,  // Wait 5 seconds for the server to start sending,\n        deadline: 60000, // but allow 1 minute for the file to finish loading.\n      })\n      .then(res =&gt; {\n          /* responded in time */\n        }, err =&gt; {\n          if (err.timeout) { /* timed out! */ } else { /* other error */ }\n      });\n</code></pre>\n<p>Timeout errors have a <code>.timeout</code> property.</p>\n<h2 id=\"authentication\">Authentication</h2>\n<p>In both Node and browsers auth available via the <code>.auth()</code> method:</p>\n<pre><code class=\"language-javascript\">    request\n      .get(&#39;http://local&#39;)\n      .auth(&#39;tobi&#39;, &#39;learnboost&#39;)\n      .then(callback);\n</code></pre>\n<p>In the <em>Node</em> client Basic auth can be in the URL as &quot;user:pass&quot;:</p>\n<pre><code class=\"language-javascript\">    request.get(&#39;http://tobi:learnboost@local&#39;).then(callback);\n</code></pre>\n<p>By default only <code>Basic</code> auth is used. In browser you can add <code>{type:&#39;auto&#39;}</code> to enable all methods built-in in the browser (Digest, NTLM, etc.):</p>\n<pre><code class=\"language-javascript\">    request.auth(&#39;digest&#39;, &#39;secret&#39;, {type:&#39;auto&#39;})\n</code></pre>\n<p>The <code>auth</code> method also supports a <code>type</code> of <code>bearer</code>, to specify token-based authentication:</p>\n<pre><code class=\"language-javascript\">    request.auth(&#39;my_token&#39;, { type: &#39;bearer&#39; })\n</code></pre>\n<h2 id=\"following-redirects\">Following redirects</h2>\n<p>By default up to 5 redirects will be followed, however you may specify this with the <code>res.redirects(n)</code> method:</p>\n<pre><code class=\"language-javascript\">    const response = await request.get(&#39;/some.png&#39;).redirects(2);\n</code></pre>\n<p>Redirects exceeding the limit are treated as errors. Use <code>.ok(res =&gt; res.status &lt; 400)</code> to read them as successful responses.</p>\n<h2 id=\"agents-for-global-state\">Agents for global state</h2>\n<h3 id=\"saving-cookies\">Saving cookies</h3>\n<p>In Node SuperAgent does not save cookies by default, but you can use the <code>.agent()</code> method to create a copy of SuperAgent that saves cookies. Each copy has a separate cookie jar.</p>\n<pre><code class=\"language-javascript\">    const agent = request.agent();\n    agent\n      .post(&#39;/login&#39;)\n      .then(() =&gt; {\n        return agent.get(&#39;/cookied-page&#39;);\n      });\n</code></pre>\n<p>In browsers cookies are managed automatically by the browser, so the <code>.agent()</code> does not isolate cookies.</p>\n<h3 id=\"default-options-for-multiple-requests\">Default options for multiple requests</h3>\n<p>Regular request methods called on the agent will be used as defaults for all requests made by that agent.</p>\n<pre><code class=\"language-javascript\">    const agent = request.agent()\n      .use(plugin)\n      .auth(shared);\n\n    await agent.get(&#39;/with-plugin-and-auth&#39;);\n    await agent.get(&#39;/also-with-plugin-and-auth&#39;);\n</code></pre>\n<p>The complete list of methods that the agent can use to set defaults is: <code>use</code>, <code>on</code>, <code>once</code>, <code>set</code>, <code>query</code>, <code>type</code>, <code>accept</code>, <code>auth</code>, <code>withCredentials</code>, <code>sortQuery</code>, <code>retry</code>, <code>ok</code>, <code>redirects</code>, <code>timeout</code>, <code>buffer</code>, <code>serialize</code>, <code>parse</code>, <code>ca</code>, <code>key</code>, <code>pfx</code>, <code>cert</code>.</p>\n<h2 id=\"piping-data\">Piping data</h2>\n<p>The Node client allows you to pipe data to and from the request. Please note that <code>.pipe()</code> is used <strong>instead of</strong> <code>.end()</code>/<code>.then()</code> methods.</p>\n<p>For example piping a file&#39;s contents as the request:</p>\n<pre><code class=\"language-javascript\">    const request = require(&#39;superagent&#39;);\n    const fs = require(&#39;fs&#39;);\n\n    const stream = fs.createReadStream(&#39;path/to/my.json&#39;);\n    const req = request.post(&#39;/somewhere&#39;);\n    req.type(&#39;json&#39;);\n    stream.pipe(req);\n</code></pre>\n<p>Note that when you pipe to a request, superagent sends the piped data with <a href=\"https://en.wikipedia.org/wiki/Chunked_transfer_encoding\">chunked transfer encoding</a>, which isn&#39;t supported by all servers (for instance, Python WSGI servers).</p>\n<p>Or piping the response to a file:</p>\n<pre><code class=\"language-javascript\">    const stream = fs.createWriteStream(&#39;path/to/my.json&#39;);\n    const req = request.get(&#39;/some.json&#39;);\n    req.pipe(stream);\n</code></pre>\n<p> It&#39;s not possible to mix pipes and callbacks or promises. Note that you should <strong>NOT</strong> attempt to pipe the result of <code>.end()</code> or the <code>Response</code> object:</p>\n<pre><code class=\"language-javascript\">    // Don&#39;t do either of these:\n    const stream = getAWritableStream();\n    const req = request\n      .get(&#39;/some.json&#39;)\n      // BAD: this pipes garbage to the stream and fails in unexpected ways\n      .end((err, this_does_not_work) =&gt; this_does_not_work.pipe(stream))\n    const req = request\n      .get(&#39;/some.json&#39;)\n      .end()\n      // BAD: this is also unsupported, .pipe calls .end for you.\n      .pipe(nope_its_too_late);\n</code></pre>\n<p>In a <a href=\"https://github.com/ladjs/superagent/issues/1188\">future version</a> of superagent, improper calls to <code>pipe()</code> will fail.</p>\n<h2 id=\"multipart-requests\">Multipart requests</h2>\n<p>SuperAgent is also great for <em>building</em> multipart requests for which it provides methods <code>.attach()</code> and <code>.field()</code>.</p>\n<p>When you use <code>.field()</code> or <code>.attach()</code> you can&#39;t use <code>.send()</code> and you <em>must not</em> set <code>Content-Type</code> (the correct type will be set for you).</p>\n<h3 id=\"attaching-files\">Attaching files</h3>\n<p>To send a file use <code>.attach(name, [file], [options])</code>. You can attach multiple files by calling <code>.attach</code> multiple times. The arguments are:</p>\n<ul>\n<li><code>name</code> — field name in the form.</li>\n<li><code>file</code> — either string with file path or <code>Blob</code>/<code>Buffer</code> object.</li>\n<li><code>options</code> — (optional) either string with custom file name or <code>{filename: string}</code> object. In Node also <code>{contentType: &#39;mime/type&#39;}</code> is supported. In browser create a <code>Blob</code> with an appropriate type instead.</li>\n</ul>\n<br>\n\n<pre><code class=\"language-javascript\">    request\n      .post(&#39;/upload&#39;)\n      .attach(&#39;image1&#39;, &#39;path/to/felix.jpeg&#39;)\n      .attach(&#39;image2&#39;, imageBuffer, &#39;luna.jpeg&#39;)\n      .field(&#39;caption&#39;, &#39;My cats&#39;)\n      .then(callback);\n</code></pre>\n<h3 id=\"field-values\">Field values</h3>\n<p>Much like form fields in HTML, you can set field values with <code>.field(name, value)</code> and <code>.field({name: value})</code>. Suppose you want to upload a few images with your name and email, your request might look something like this:</p>\n<pre><code class=\"language-javascript\">     request\n       .post(&#39;/upload&#39;)\n       .field(&#39;user[name]&#39;, &#39;Tobi&#39;)\n       .field(&#39;user[email]&#39;, &#39;tobi@learnboost.com&#39;)\n       .field(&#39;friends[]&#39;, [&#39;loki&#39;, &#39;jane&#39;])\n       .attach(&#39;image&#39;, &#39;path/to/tobi.png&#39;)\n       .then(callback);\n</code></pre>\n<h2 id=\"compression\">Compression</h2>\n<p>The node client supports compressed responses, best of all, you don&#39;t have to do anything! It just works.</p>\n<h2 id=\"buffering-responses\">Buffering responses</h2>\n<p>To force buffering of response bodies as <code>res.text</code> you may invoke <code>req.buffer()</code>. To undo the default of buffering for text responses such as &quot;text/plain&quot;, &quot;text/html&quot; etc you may invoke <code>req.buffer(false)</code>.</p>\n<p>When buffered the <code>res.buffered</code> flag is provided, you may use this to handle both buffered and unbuffered responses in the same callback.</p>\n<h2 id=\"cors\">CORS</h2>\n<p>For security reasons, browsers will block cross-origin requests unless the server opts-in using CORS headers. Browsers will also make extra <strong>OPTIONS</strong> requests to check what HTTP headers and methods are allowed by the server. <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\">Read more about CORS</a>.</p>\n<p>The <code>.withCredentials()</code> method enables the ability to send cookies from the origin, however only when <code>Access-Control-Allow-Origin</code> is <em>not</em> a wildcard (&quot;*&quot;), and <code>Access-Control-Allow-Credentials</code> is &quot;true&quot;.</p>\n<pre><code class=\"language-javascript\">    request\n      .get(&#39;https://api.example.com:4001/&#39;)\n      .withCredentials()\n      .then(res =&gt; {\n        assert.equal(200, res.status);\n        assert.equal(&#39;tobi&#39;, res.text);\n      })\n</code></pre>\n<h2 id=\"error-handling\">Error handling</h2>\n<p>Your callback function will always be passed two arguments: error and response. If no error occurred, the first argument will be null:</p>\n<pre><code class=\"language-javascript\">    request\n     .post(&#39;/upload&#39;)\n     .attach(&#39;image&#39;, &#39;path/to/tobi.png&#39;)\n     .then(res =&gt; {\n\n     });\n</code></pre>\n<p>An &quot;error&quot; event is also emitted, with you can listen for:</p>\n<pre><code class=\"language-javascript\">    request\n      .post(&#39;/upload&#39;)\n      .attach(&#39;image&#39;, &#39;path/to/tobi.png&#39;)\n      .on(&#39;error&#39;, handle)\n      .then(res =&gt; {\n\n      });\n</code></pre>\n<p>Note that <strong>superagent considers 4xx and 5xx responses (as well as unhandled 3xx responses) errors by default</strong>. For example, if you get a <code>304 Not modified</code>, <code>403 Forbidden</code> or <code>500 Internal server error</code> response, this status information will be available via <code>err.status</code>. Errors from such responses also contain an <code>err.response</code> field with all of the properties mentioned in &quot;<a href=\"#response-properties\">Response properties</a>&quot;. The library behaves in this way to handle the common case of wanting success responses and treating HTTP error status codes as errors while still allowing for custom logic around specific error conditions.</p>\n<p>Network failures, timeouts, and other errors that produce no response will contain no <code>err.status</code> or <code>err.response</code> fields.</p>\n<p>If you wish to handle 404 or other HTTP error responses, you can query the <code>err.status</code> property. When an HTTP error occurs (4xx or 5xx response) the <code>res.error</code> property is an <code>Error</code> object, this allows you to perform checks such as:</p>\n<pre><code class=\"language-javascript\">    if (err &amp;&amp; err.status === 404) {\n      alert(&#39;oh no &#39; + res.body.message);\n    }\n    else if (err) {\n      // all other error types we handle generically\n    }\n</code></pre>\n<p>Alternatively, you can use the <code>.ok(callback)</code> method to decide whether a response is an error or not. The callback to the <code>ok</code> function gets a response and returns <code>true</code> if the response should be interpreted as success.</p>\n<pre><code class=\"language-javascript\">    request.get(&#39;/404&#39;)\n      .ok(res =&gt; res.status &lt; 500)\n      .then(response =&gt; {\n        // reads 404 page as a successful response\n      })\n</code></pre>\n<h2 id=\"progress-tracking\">Progress tracking</h2>\n<p>SuperAgent fires <code>progress</code> events on upload and download of large files.</p>\n<pre><code class=\"language-javascript\">    request.post(url)\n      .attach(&#39;field_name&#39;, file)\n      .on(&#39;progress&#39;, event =&gt; {\n        /* the event is:\n        {\n          direction: &quot;upload&quot; or &quot;download&quot;\n          percent: 0 to 100 // may be missing if file size is unknown\n          total: // total file size, may be missing\n          loaded: // bytes downloaded or uploaded so far\n        } */\n      })\n      .then()\n</code></pre>\n<h2 id=\"testing-on-localhost\">Testing on localhost</h2>\n<h3 id=\"forcing-specific-connection-ip-address\">Forcing specific connection IP address</h3>\n<p>In Node.js it&#39;s possible to ignore DNS resolution and direct all requests to a specific IP address using <code>.connect()</code> method. For example, this request will go to localhost instead of <code>example.com</code>:</p>\n<pre><code class=\"language-javascript\">    const res = await request.get(&quot;http://example.com&quot;).connect(&quot;127.0.0.1&quot;);\n</code></pre>\n<p>Because the request may be redirected, it&#39;s possible to specify multiple hostnames and multiple IPs, as well as a special <code>*</code> as the fallback (note: other wildcards are not supported). The requests will keep their <code>Host</code> header with the original value. <code>.connect(undefined)</code> turns off the feature.</p>\n<pre><code class=\"language-javascript\">    const res = await request.get(&quot;http://redir.example.com:555&quot;)\n      .connect({\n        &quot;redir.example.com&quot;: &quot;127.0.0.1&quot;, // redir.example.com:555 will use 127.0.0.1:555\n        &quot;www.example.com&quot;: false, // don&#39;t override this one; use DNS as normal\n        &quot;mapped.example.com&quot;: { host: &quot;127.0.0.1&quot;, port: 8080}, // mapped.example.com:* will use 127.0.0.1:8080\n        &quot;*&quot;: &quot;proxy.example.com&quot;, // all other requests will go to this host\n      });\n</code></pre>\n<h3 id=\"ignoring-brokeninsecure-https-on-localhost\">Ignoring broken/insecure HTTPS on localhost</h3>\n<p>In Node.js, when HTTPS is misconfigured and insecure (e.g. using self-signed certificate <em>without</em> specifying own <code>.ca()</code>), it&#39;s still possible to permit requests to <code>localhost</code> by calling <code>.trustLocalhost()</code>:</p>\n<pre><code class=\"language-javascript\">    const res = await request.get(&quot;https://localhost&quot;).trustLocalhost()\n</code></pre>\n<p>Together with <code>.connect(&quot;127.0.0.1&quot;)</code> this may be used to force HTTPS requests to any domain to be re-routed to <code>localhost</code> instead.</p>\n<p>It&#39;s generally safe to ignore broken HTTPS on <code>localhost</code>, because the loopback interface is not exposed to untrusted networks. Trusting <code>localhost</code> may become the default in the future. Use <code>.trustLocalhost(false)</code> to force check of <code>127.0.0.1</code>&#39;s authenticity.</p>\n<p>We intentionally don&#39;t support disabling of HTTPS security when making requests to any other IP, because such options end up abused as a quick &quot;fix&quot; for HTTPS problems. You can get free HTTPS certificates from <a href=\"https://certbot.eff.org\">Let&#39;s Encrypt</a> or set your own CA (<code>.ca(ca_public_pem)</code>) to make your self-signed certificates trusted.</p>\n<h2 id=\"promise-and-generator-support\">Promise and Generator support</h2>\n<p>SuperAgent&#39;s request is a &quot;thenable&quot; object that&#39;s compatible with JavaScript promises and the <code>async</code>/<code>await</code> syntax.</p>\n<pre><code class=\"language-javascript\">    const res = await request.get(url);\n</code></pre>\n<p>If you&#39;re using promises, <strong>do not</strong> call <code>.end()</code> or <code>.pipe()</code>. Any use of <code>.then()</code> or <code>await</code> disables all other ways of using the request.</p>\n<p>Libraries like <a href=\"https://github.com/tj/co\">co</a> or a web framework like <a href=\"https://github.com/koajs/koa\">koa</a> can <code>yield</code> on any SuperAgent method:</p>\n<pre><code class=\"language-javascript\">    const req = request\n      .get(&#39;http://local&#39;)\n      .auth(&#39;tobi&#39;, &#39;learnboost&#39;);\n    const res = yield req;\n</code></pre>\n<p>Note that SuperAgent expects the global <code>Promise</code> object to be present. You&#39;ll need to use v7 and a polyfill to use promises in Internet Explorer or Node.js 0.10.</p>\n<p>We have dropped support in v8 for IE.  You must add a polyfill for WeakRef and BigInt if you wish to support Opera 85, iOS Safari 12.2-12.5, for example using <a href=\"https://cdnjs.cloudflare.com/polyfill/\">https://cdnjs.cloudflare.com/polyfill/</a>:</p>\n<pre><code class=\"language-html\">&lt;script src=&quot;https://cdnjs.cloudflare.com/polyfill/v3/polyfill.min.js?features=WeakRef,BigInt&quot;&gt;&lt;/script&gt;\n</code></pre>\n<h2 id=\"browser-and-node-versions\">Browser and node versions</h2>\n<p>SuperAgent has two implementations: one for web browsers (using XHR) and one for Node.JS (using core http module). By default Browserify and WebPack will pick the browser version.</p>\n<p>If want to use WebPack to compile code for Node.JS, you <em>must</em> specify <a href=\"https://webpack.github.io/docs/configuration.html#target\">node target</a> in its configuration.</p>\n\n    </div>\n    <a href=\"http://github.com/ladjs/superagent\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_white_ffffff.png\" alt=\"Fork me on GitHub\"></a>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.0/jquery.min.js\"></script>\n    <script>\n      $('code').each(function(){\n        $(this).html(highlight($(this).text()));\n      });\n\n      function highlight(js) {\n        return js\n          .replace(/</g, '&lt;')\n          .replace(/>/g, '&gt;')\n          .replace(/('.*?')/gm, '<span class=\"string\">$1</span>')\n          .replace(/(\\d+\\.\\d+)/gm, '<span class=\"number\">$1</span>')\n          .replace(/(\\d+)/gm, '<span class=\"number\">$1</span>')\n          .replace(/\\bnew *(\\w+)/gm, '<span class=\"keyword\">new</span> <span class=\"init\">$1</span>')\n          .replace(/\\b(function|new|throw|return|var|if|else)\\b/gm, '<span class=\"keyword\">$1</span>')\n      }\n    </script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/tocbot/3.0.0/tocbot.js\"></script>\n    <script>\n      // Only use tocbot for main docs, not test docs\n      if (document.querySelector('#superagent')) {\n        tocbot.init({\n          // Where to render the table of contents.\n          tocSelector: '#menu',\n          // Where to grab the headings to build the table of contents.\n          contentSelector: '#content',\n          // Which headings to grab inside of the contentSelector element.\n          headingSelector: 'h2',\n          smoothScroll: false\n        });\n      }\n    </script>\n  </body>\n</html>\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 3.732421875,
          "content": "{\n  \"name\": \"superagent\",\n  \"description\": \"elegant & feature rich browser / node HTTP with a fluent API\",\n  \"version\": \"10.1.1\",\n  \"author\": \"TJ Holowaychuk <tj@vision-media.ca>\",\n  \"browser\": {\n    \"./src/node/index.js\": \"./src/client.js\",\n    \"./lib/node/index.js\": \"./lib/client.js\",\n    \"./test/support/server.js\": \"./test/support/blank.js\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/ladjs/superagent/issues\"\n  },\n  \"contributors\": [\n    \"Kornel Lesiński <kornel@geekhood.net>\",\n    \"Peter Lyons <pete@peterlyons.com>\",\n    \"Hunter Loftis <hunter@hunterloftis.com>\",\n    \"Nick Baugh <niftylettuce@gmail.com>\"\n  ],\n  \"dependencies\": {\n    \"component-emitter\": \"^1.3.0\",\n    \"cookiejar\": \"^2.1.4\",\n    \"debug\": \"^4.3.4\",\n    \"fast-safe-stringify\": \"^2.1.1\",\n    \"form-data\": \"^4.0.0\",\n    \"formidable\": \"^3.5.2\",\n    \"methods\": \"^1.1.2\",\n    \"mime\": \"2.6.0\",\n    \"qs\": \"^6.11.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.20.7\",\n    \"@babel/core\": \"^7.20.12\",\n    \"@babel/plugin-transform-runtime\": \"^7.19.6\",\n    \"@babel/preset-env\": \"^7.20.2\",\n    \"@babel/runtime\": \"^7.20.13\",\n    \"@commitlint/cli\": \"17\",\n    \"@commitlint/config-conventional\": \"17\",\n    \"Base64\": \"^1.1.0\",\n    \"babelify\": \"^10.0.0\",\n    \"basic-auth-connect\": \"^1.0.0\",\n    \"body-parser\": \"^1.20.1\",\n    \"browserify\": \"^17.0.0\",\n    \"cookie-parser\": \"^1.4.6\",\n    \"cross-env\": \"^7.0.3\",\n    \"eslint\": \"^8.32.0\",\n    \"eslint-config-xo-lass\": \"2\",\n    \"eslint-plugin-compat\": \"4.0.2\",\n    \"eslint-plugin-node\": \"^11.1.0\",\n    \"express\": \"^4.18.2\",\n    \"express-session\": \"^1.17.3\",\n    \"fixpack\": \"^4.0.0\",\n    \"get-port\": \"4.2.0\",\n    \"husky\": \"7\",\n    \"lint-staged\": \"12\",\n    \"marked\": \"^4.2.12\",\n    \"mocha\": \"^6.2.3\",\n    \"multer\": \"1.4.5-lts.1\",\n    \"nyc\": \"^15.1.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-github\": \"4.0.4\",\n    \"rimraf\": \"3\",\n    \"should\": \"^13.2.3\",\n    \"should-http\": \"^0.1.1\",\n    \"tinyify\": \"3.0.0\",\n    \"xo\": \"^0.53.1\",\n    \"zuul\": \"^3.12.0\"\n  },\n  \"engines\": {\n    \"node\": \">=14.18.0\"\n  },\n  \"files\": [\n    \"dist/*.js\",\n    \"lib/**/*.js\"\n  ],\n  \"homepage\": \"https://github.com/ladjs/superagent\",\n  \"jsdelivr\": \"dist/superagent.min.js\",\n  \"keywords\": [\n    \"agent\",\n    \"ajax\",\n    \"ajax\",\n    \"api\",\n    \"async\",\n    \"await\",\n    \"axios\",\n    \"cancel\",\n    \"client\",\n    \"frisbee\",\n    \"got\",\n    \"http\",\n    \"http\",\n    \"https\",\n    \"ky\",\n    \"promise\",\n    \"promise\",\n    \"promises\",\n    \"request\",\n    \"request\",\n    \"requests\",\n    \"response\",\n    \"rest\",\n    \"retry\",\n    \"super\",\n    \"superagent\",\n    \"timeout\",\n    \"transform\",\n    \"xhr\",\n    \"xmlhttprequest\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"lib/node/index.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/ladjs/superagent.git\"\n  },\n  \"scripts\": {\n    \"browserify\": \"browserify src/node/index.js -o dist/superagent.js -s superagent -g [ babelify --configFile ./.dist.babelrc ]\",\n    \"build\": \"npm run build:clean && npm run build:lib && npm run build:dist\",\n    \"build:clean\": \"rimraf lib dist\",\n    \"build:dist\": \"npm run browserify && npm run minify\",\n    \"build:lib\": \"babel --config-file ./.lib.babelrc src --out-dir lib\",\n    \"build:test\": \"babel --config-file ./.test.babelrc test --out-dir lib/node/test\",\n    \"coverage\": \"nyc report --reporter=text-lcov > coverage.lcov\",\n    \"lint\": \"eslint -c .eslintrc src test && remark . -qfo && eslint -c .lib.eslintrc lib/**/*.js && eslint -c .dist.eslintrc dist/**/*.js\",\n    \"minify\": \"cross-env NODE_ENV=production browserify src/node/index.js -o dist/superagent.min.js -s superagent -g [ babelify --configFile ./.dist.babelrc ] -p tinyify\",\n    \"nyc\": \"cross-env NODE_ENV=test nyc ava\",\n    \"test\": \"npm run build && npm run lint && make test\",\n    \"test-http2\": \"npm run build && npm run lint && make test-node-http2\"\n  },\n  \"unpkg\": \"dist/superagent.min.js\"\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}