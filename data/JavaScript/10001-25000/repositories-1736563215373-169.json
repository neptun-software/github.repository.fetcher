{
  "metadata": {
    "timestamp": 1736563215373,
    "page": 169,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yabwe/medium-editor",
      "stars": 16084,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.197265625,
          "content": "# EditorConfig is awesome: http://EditorConfig.org\n\nroot = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = false\nindent_style = space\nindent_size = 4\n\n[*.json]\nindent_size = 2\n\n[.*rc]\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.17578125,
          "content": "*~\n*.swp\n.DS_Store\n*.swo\nnode_modules/\n.env\n.sass-cache/\nnpm-debug.log\n.grunt/\n_SpecRunner.html\nreports/\ncoverage/\n._*\nlocal.log\nbrowserstack.err\n\n# IDE\n.idea/\npackage-lock.json\n\n\n"
        },
        {
          "name": ".jscsrc",
          "type": "blob",
          "size": 2.62109375,
          "content": "{\n  \"disallowEmptyBlocks\": true,\n  \"disallowKeywordsOnNewLine\": [\n    \"else\"\n  ],\n  \"disallowMixedSpacesAndTabs\": true,\n  \"disallowMultipleLineBreaks\": true,\n  \"disallowMultipleLineStrings\": true,\n  \"disallowMultipleSpaces\": true,\n  \"disallowNewlineBeforeBlockStatements\": true,\n  \"disallowSpaceAfterPrefixUnaryOperators\": [\n    \"++\",\n    \"--\",\n    \"+\",\n    \"-\",\n    \"~\",\n    \"!\"\n  ],\n  \"disallowSpaceAfterObjectKeys\": true,\n  \"disallowSpaceBeforePostfixUnaryOperators\": [\n    \"++\",\n    \"--\"\n  ],\n  \"disallowSpacesInCallExpression\": true,\n  \"disallowSpacesInFunctionDeclaration\": {\n    \"beforeOpeningRoundBrace\": true\n  },\n  \"disallowSpacesInsideArrayBrackets\": true,\n  \"disallowSpacesInsideBrackets\": true,\n  \"disallowSpacesInsideParentheses\": true,\n  \"disallowTrailingComma\": true,\n  \"disallowTrailingWhitespace\": true,\n  \"requireBlocksOnNewline\": true,\n  \"requireCamelCaseOrUpperCaseIdentifiers\": true,\n  \"requireCapitalizedConstructors\": true,\n  \"requireCommaBeforeLineBreak\": true,\n  \"requireCurlyBraces\": [\n    \"if\",\n    \"else\",\n    \"for\",\n    \"while\",\n    \"do\",\n    \"try\",\n    \"catch\"\n  ],\n  \"requireLineBreakAfterVariableAssignment\": true,\n  \"requireMultipleVarDecl\": true,\n  \"requireOperatorBeforeLineBreak\": [\n    \"?\",\n    \"=\",\n    \"+\",\n    \"-\",\n    \"/\",\n    \"*\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\"\n  ],\n  \"requireSemicolons\": true,\n  \"requireSpaceAfterBinaryOperators\": [\n    \"=\",\n    \",\",\n    \"+\",\n    \"-\",\n    \"/\",\n    \"*\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\"\n  ],\n  \"requireSpaceAfterKeywords\": [\n    \"do\",\n    \"for\",\n    \"if\",\n    \"else\",\n    \"switch\",\n    \"case\",\n    \"try\",\n    \"catch\",\n    \"void\",\n    \"while\",\n    \"with\",\n    \"return\",\n    \"typeof\",\n    \"function\"\n  ],\n  \"requireSpaceBeforeBinaryOperators\": [\n    \"=\",\n    \"+\",\n    \"-\",\n    \"/\",\n    \"*\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\"\n  ],\n  \"requireSpaceBeforeBlockStatements\": true,\n  \"requireSpaceBeforeKeywords\": [\n    \"else\",\n    \"while\",\n    \"catch\"\n  ],\n  \"requireSpaceBetweenArguments\": true,\n  \"requireSpacesInAnonymousFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireSpacesInConditionalExpression\": {\n    \"afterTest\": true,\n    \"beforeConsequent\": true,\n    \"afterConsequent\": true,\n    \"beforeAlternate\": true\n  },\n  \"requireSpacesInForStatement\": true,\n  \"requireSpacesInFunctionDeclaration\": {\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireSpacesInFunction\": {\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireSpacesInsideObjectBrackets\": {\n    \"allExcept\": [ \"}\", \")\" ]\n  },\n  \"validateIndentation\": 4,\n  \"validateParameterSeparator\": \", \",\n  \"validateQuoteMarks\": \"'\"\n}\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 0.408203125,
          "content": "{\n  \"boss\": true,\n  \"browser\": true,\n  \"curly\": true,\n  \"eqeqeq\": true,\n  \"eqnull\": true,\n  \"immed\": true,\n  \"latedef\": \"nofunc\",\n  \"newcap\": false,\n  \"noarg\": true,\n  \"predef\": [ \"MediumEditor\",\n              \"afterAll\", \"afterEach\", \"beforeAll\", \"beforeEach\", \"describe\", \"expect\", \"it\", \"jasmine\", \"spyOn\",\n              \"setupTestHelpers\" ],\n  \"sub\": true,\n  \"undef\": true,\n  \"unused\": true,\n  \"validthis\": true\n}\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.015625,
          "content": "save-exact=true\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.55859375,
          "content": "# faster builds on new travis setup not using sudo\nsudo: false\n\n# cache vendor dirs\ncache:\n    directories:\n        - node_modules\n\nlanguage: node_js\n\nnode_js:\n    - \"12\"\n\nnotifications:\n    email: false\n    webhooks:\n        urls:\n            - https://webhooks.gitter.im/e/0913a4ced1f3322b4c40\n        on_success: change  # options: [always|never|change] default: always\n        on_failure: always  # options: [always|never|change] default: always\n        on_start: false     # default: false\n\nbefore_script:\n    - npm install -g grunt-cli\n\nscript:\n    - npm run test:ci"
        },
        {
          "name": "API.md",
          "type": "blob",
          "size": 18.7958984375,
          "content": "# MediumEditor Object API (v5.0.0)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Initialization Functions](#initialization-functions)\n  - [`MediumEditor(elements, options)`](#mediumeditorelements-options)\n  - [`destroy()`](#destroy)\n  - [`setup()`](#setup)\n  - [`addElements()`](#addelementselements)\n  - [`removeElements()`](#removeelementselements)\n- [Event Functions](#event-functions)\n  - [`on(targets, event, listener, useCapture)`](#ontargets-event-listener-usecapture)\n  - [`off(targets, event, listener, useCapture)`](#offtargets-event-listener-usecapture)\n  - [`subscribe(name, listener)`](#subscribename-listener)\n  - [`unsubscribe(name, listener)`](#unsubscribename-listener)\n  - [`trigger(name, data, editable)`](#triggername-data-editable)\n- [Selection Functions](#selection-functions)\n  - [`checkSelection()`](#checkselection)\n  - [`exportSelection()`](#exportselection)\n  - [`importSelection(selectionState, favorLaterSelectionAnchor)`](#importselectionselectionstate-favorlaterselectionanchor)\n  - [`getFocusedElement()`](#getfocusedelement)\n  - [`getSelectedParentElement(range)`](#getselectedparentelementrange)\n  - [`restoreSelection()`](#restoreselection)\n  - [`saveSelection()`](#saveselection)\n  - [`selectAllContents()`](#selectallcontents)\n  - [`selectElement(element)`](#selectelementelement)\n  - [`stopSelectionUpdates()`](#stopselectionupdates)\n  - [`startSelectionUpdates()`](#startselectionupdates)\n- [Editor Action Functions](#editor-action-functions)\n  - [`cleanPaste(text)`](#cleanpastetext)\n  - [`createLink(opts)`](#createlinkopts)\n  - [`execAction(action, opts)`](#execactionaction-opts)\n  - [`pasteHTML(html, options)`](#pastehtmlhtml-options)\n  - [`queryCommandState(action)`](#querycommandstateaction)\n- [Helper Functions](#helper-functions)\n  - [`checkContentChanged(editable)`](#checkContentChangededitable)\n  - [`delay(fn)`](#delayfn)\n  - [`getContent(index)`](#getcontentindex)\n  - [`getExtensionByName(name)`](#getextensionbynamename)\n  - [`resetContent(element)`](#resetcontentelement)\n  - [`serialize()`](#serialize)\n  - [`setContent(html, index)`](#setcontenthtml-index)\n- [Static Functions/Properties](#static-functionsproperties)\n  - [`getEditorFromElement(element)`](#geteditorfromelementelement)\n  - [`version`](#version)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Initialization Functions\n\n### `MediumEditor(elements, options)`\n\nCreating an instance of MediumEditor will:\n* Convert all passed in elements into `contenteditable` elements.\n* For any `<textarea>` elements:\n  * Hide the `<textarea>`\n  * Create a new `<div contenteditable=true>` element and add it to the elements array.\n  * Ensure the 2 elements remain sync'd.\n* Initialize any custom extensions or buttons passed in.\n* Create any additional elements needed.\n* Setup all event handling needed to monitor the editable elements.\n\n**Arguments**\n\n_**elements** (`String` | `HTMLElement` | `Array` | `NodeList` | `HTMLCollection`)_:\n\n1. `String`: If passed as a string, this is used as a selector in a call to `document.querySelectorAll()` to find elements on the page.  All results are stored in the internal list of **elements**.\n\n2. `HTMLElement`: If passed as a single element, this will be the only element in the internal list of **elements**.\n\n3. `Array`: If passed as an `Array` of `HTMLElement`s, this will be used as the internal list of **elements**.\n\n_**options** (`Object`)_:\n\nSet of [custom options](OPTIONS.md) used to initialize `MediumEditor`.\n\n***\n### `destroy()`\n\nTear down the editor if already setup by doing the following:\n* Calling the `destroy()` method on each extension within the editor. This should allow all extension to be torn down and cleaned up, including the toolbar and its elements.\n* Detaching all event listeners from the DOM\n* Detaching all references to custom event listeners\n* Remove any custom attributes from the editor **elements**\n* Unhide any `<textarea>` elements and remove any created `<div>` elements created for `<textarea>` elements.\n\n***\n### `setup()`\n\nInitialize this instance of the editor if it has been destroyed.  This will reuse the `elements` selector and `options` object passed in when the editor was instantiated.\n\n***\n### `addElements(elements)`\n\nDynamically add one or more elements to an already initialized instance of MediumEditor.\n\nPassing an elements or array of elements to `addElements(elements)` will:\n* Add the given element or array of elements to the editor **elements**\n* Ensure the element(s) are initialized with the proper attributes and event handlers as if the element had been passed during instantiation of the editor\n* For any `<textarea>` elements:\n  * Hide the `<textarea>`\n  * Create a new `<div contenteditable=true>` element and add it to the editor **elements**\n  * Ensure the 2 elements remain sync'd.\n* Be intelligent enough to run the necessary code only once per element, no matter how often you will call it\n\nSo, every element you pass to `addElements` will turn into a fully supported contenteditable too - even earlier calls to `editor.subscribe(..)`\nfor custom events will work on the newly added element(s).\n\n**Arguments**\n\n_**elements** (`String` | `HTMLElement` | `Array` | `NodeList` | `HTMLCollection`)_:\n\n1. `String`: If passed as a string, this is used as a selector in a call to `document.querySelectorAll()` to find elements on the page.\n\n2. `HTMLElement`: If passed as a single element, this will be the only element added to the editor **elements**.\n\n3. `Array` | `NodeList` | `HTMLCollection`: If passed as an `Array`-like collection of `HTMLElement`s, all of these elements will be added to the editor **elements**.\n\n***\n### `removeElements(elements)`\n\nRemove one or more elements from an already initialized instance of MediumEditor.\n\nPassing an elements or array of elements to `removeElements(elements)` will:\n* Remove the given element or array of elements from the internal `this.elements` array.\n* Remove any added event handlers or attributes (with the exception of `contenteditable`).\n* Unhide any `<textarea>` elements and remove any created `<div>` elements created for `<textarea>` elements.\n\nEach element itself will remain a contenteditable - it will just remove all event handlers and all references to it so you can safely remove it from DOM.\n\n**Arguments**\n\n_**elements** (`String` | `HTMLElement` | `Array` | `NodeList` | `HTMLCollection`)_:\n\n1. `String`: If passed as a string, this is used as a selector in a call to `document.querySelectorAll()` to find elements on the page.\n\n2. `HTMLElement`: If passed as a single element, this will be the only element removed from the editor **elements**.\n\n3. `Array` | `NodeList` | `HTMLCollection`: If passed as an `Array`-like collection of `HTMLElement`s, all of these elements will be removed from the editor **elements**.\n\n***\n## Event Functions\n\n### `on(targets, event, listener, useCapture)`\n\nAttaches an event listener to a specific element or elements via the browser's built-in `addEventListener(type, listener, useCapture)` API.  However, this helper method also ensures that when MediumEditor is destroyed, this event listener will be automatically be detached from the DOM.\n\n**Arguments**\n\n1. _**targets** (`HTMLElement` / `NodeList`)_:\n\n  * Element or elements to attach listener to via `addEventListener(type, listener, useCapture)`\n\n2. _**event** (`String`)_:\n\n  * type argument for `addEventListener(type, listener, useCapture)`\n\n3. _**listener** (`function`)_:\n\n   * listener argument for `addEventListener(type, listener, useCapture)`\n\n4. _**useCapture** (`boolean`)_:\n\n   * useCapture argument for `addEventListener(type, listener, useCapture)`\n\n***\n### `off(targets, event, listener, useCapture)`\n\nDetach an event listener from a specific element or elements via the browser's built-in `removeEventListener(type, listener, useCapture)` API.\n\n**Arguments**\n\n1. _**targets** (`HTMLElement` / `NodeList`)_:\n\n  * Element or elements to detach listener from via `removeEventListener(type, listener, useCapture)`\n\n2. _**event** (`String`)_:\n\n  * type argument for `removeEventListener(type, listener, useCapture)`\n\n3. _**listener** (`function`)_:\n\n   * listener argument for `removeEventListener(type, listener, useCapture)`\n\n4. _**useCapture** (`boolean`)_:\n\n   * useCapture argument for `removeEventListener(type, listener, useCapture)`\n\n***\n### `subscribe(name, listener)`\n\nAttaches a listener for the specified custom event name.\n\n**Arguments**\n\n1. _**name** (`String`)_:\n\n  * Name of the event to listen to.  See the list of built-in [Custom Events](CUSTOM-EVENTS.md).\n\n2. _**listener(data, editable)** (`function`)_:\n\n  * Listener method that will be called whenever the custom event is triggered.\n\n**Arguments to listener**\n\n  1. _**data** (`Event` | `object`)_\n    * For most custom events, this will be the browser's native `Event` object for the event that triggered the custom event to fire.\n    * For some custom events, this will be an object containing information describing the event (depending on which custom event it is)\n  2. _**editable** (`HTMLElement`)_\n    * A reference to the contenteditable container element that this custom event corresponds to.  This is especially useful for instances where one instance of MediumEditor contains multiple elements, or there are multiple instances of MediumEditor on the page.\n    * For example, when `blur` fires, this argument will be the `<div contenteditable=true></div>` element that is about to receive focus.\n\n***\n### `unsubscribe(name, listener)`\n\nDetaches a custom event listener for the specified custom event name.\n\n**Arguments**\n\n1. _**name** (`String`)_:\n\n  * Name of the event to detach the listener for.\n\n2. _**listener** (`function`)_:\n\n  * A reference to the listener to detach.  This must be a match by-reference and not a copy.\n\n**NOTE**\n\n  * Calling [destroy()](#destroy) on the MediumEditor object will automatically remove all custom event listeners.\n\n***\n### `trigger(name, data, editable)`\n\nManually triggers a custom event.\n\n**Arguments**\n\n1. _**name** (`String`)_:\n\n  * Name of the custom event to trigger.\n\n2. _**data** (`Event` | `object`)_:\n\n  * Native `Event` object or custom data object to pass to all the listeners to this custom event.\n\n3. _**editable** (`HTMLElement`)_:\n\n  * The `<div contenteditable=true></div>` element to pass to all of the listeners to this custom event.\n\n***\n## Selection Functions\n\n### `checkSelection()`\n\nIf the toolbar is enabled, manually forces the toolbar to update based on the user's current selection.  This includes hiding/showing the toolbar, positioning the toolbar, and updating the enabled/disable state of the toolbar buttons.\n\n***\n### `exportSelection()`\n\nReturns a data representation of the selected text, which can be applied via `importSelection(selectionState)`.  This data will include the beginning and end of the selection, as well as which of the editor **elements** the selection was within.\n\n***\n### `importSelection(selectionState, favorLaterSelectionAnchor)`\n\nRestores the selection using a data representation of previously selected text (ie value returned by `exportSelection()`).\n\n**Arguments**\n\n1. _**selectionState** (`Object`)_:\n\n  * Data representing the state of the selection to restore.\n\n2. _**favorLaterSelectionAnchor** (`boolean`)_:\n\n  * If `true`, import the cursor immediately subsequent to an anchor tag if it would otherwise be placed right at the trailing edge inside the anchor. THis cursor positioning, even though visually equivalent to the user, can affect behavior in Internet Explorer.\n\n***\n### `getFocusedElement()`\n\nReturns a reference to the editor **element** that currently has focus (if the editor has focus).\n\n***\n### `getSelectedParentElement(range)`\n\nReturns a reference to the editor **element** that the user's selection is currently within.\n\n**Arguments**\n\n1. _**range** (`Range`)_: _**OPTIONAL**_\n  * The `Range` to find the selection parent element within\n  * If no element is provided, the editor will use the current range within the selection of the editor's `contentWindow`\n\n***\n### `restoreSelection()`\n\nRestores the selection to what was selected the last time `saveSelection()` was called.\n\n***\n### `saveSelection()`\n\nInternally stores the user's current selection.  This can be restored by calling `restoreSelection()`.\n\n***\n### `selectAllContents()`\n\nExpands the selection to contain all text within the focused editor **element**.\n\n***\n### `selectElement(element)`\n\nChange the user's selection to select the contents of the provided element and update the toolbar to reflect this change.\n\n**Arguments**\n\n1. _**element** (`HTMLElement`)_:\n\n  * DOM Element -- which is a descendant of one of the editor's **elements** -- to select.\n\n***\n### `stopSelectionUpdates()`\n\nStop the toolbar from updating to reflect changes in the user's selection.\n\n***\n### `startSelectionUpdates()`\n\nEnable the toolbar to start updating based on the user's selection, after a call to `stopSelectionUpdates()`\n\n***\n## Editor Action Functions\n\n### `cleanPaste(text)`\n_convert text to plaintext and replace current selection with result_\n\n**Arguments**\n\n1. _**text** (`String`)_:\n\n  * Content to be pasted at the location of the current selection/cursor\n\n***\n### `createLink(opts)`\n_creates a link via the native `document.execCommand('createLink')` command_\n\n**Arguments**\n\n1. _**opts** (`Object`)_:\n\n  * Object containing additional properties needed for creating a link\n\n  **Properties of 'opts'**\n\n    1. _**value** (`String`)_ _**REQUIRED**_\n      * The url to set as the `href` of the created link.  A non-empty value must be provided for the link to be created.\n    2. _**target** (`String`)_\n      * Attribute to set as the `target` attribute of the created link.  Passing 'self' or not passing this option at all are equivalent in that they will just ensure that `target=\"_blank\"` will NOT be present on the created link.\n      * **NOTE** If the `targetBlank` option on the editor is set to true, the `target` property of opts will be ignored and `target=\"_blank\"` will be added to all created links.\n    3. _**buttonClass** (`String`)_\n      * Class (or classes) to append to the `class` attribute of the created link.\n\n##### Example\n\n```js\neditor.createLink({ value: 'https://github.com/yabwe/medium-editor', target: '_blank', buttonClass: 'medium-link' });\n```\n\n***\n### `execAction(action, opts)`\n_executes an built-in action via document.execCommand_\n\n**Arguments**\n\n1. _**action** (`String`)_:\n\n  * Action to be passed as the 'command' argument to `document.execCommand(command, showDefaultUI, value)`\n\n2. _**opts** (`Object`)_ _**OPTIONAL**_:\n\n  * Object containing additional properties for specific commands\n\n  **Properties of 'opts'**\n\n    1. _**value** (`String`)_\n      * The value to pass as the 'value' argument to `document.execCommand(command, showDefaultUI, value)`\n    2. For 'createLink', the `opts` are passed directly to [`.createLink(opts)`]((#createlinkopts)) so see that method for additional options for that command\n\n***\n### `pasteHTML(html, options)`\n_replace the current selection with html_\n\n**Arguments**\n\n1. _**html** (`String`)_:\n\n  * Content to be pasted at the location of the current selection/cursor\n\n2. _**options** (`Object`)_ _**OPTIONAL**_:\n\n  * Optional overrides for `cleanTags`, `unwrapTags`, and/or `cleanAttrs` for removing/unwrapping specific element types (`cleanTags`/`unwrapTags`),  or removing specific attributes (`cleanAttrs`) from the inserted HTML.  See [cleanTags](OPTIONS.md#cleantags), [unwrapTags](OPTIONS.md#unwraptags), and [cleanAttrs](OPTIONS.md#cleanattrs) in OPTIONS.md for more information.\n\n##### Example\n\n```js\neditor.pasteHTML('<p class=\"classy\"><strong>Some Custom HTML</strong></p>', { cleanAttrs: ['class'], cleanTags: ['strong'], unwrapTags: ['em']});\n```\n\n***\n### `queryCommandState(action)`\n_wrapper around the browser's built in `document.queryCommandState(command)` for checking whether a specific action has already been applied to the selection._\n\n**Arguments**\n\n1. _**action** (`String`)_:\n\n  * Action to be passed as the 'command' argument to `document.queryCommandState(command)`\n\n***\n## Helper Functions\n\n### `checkContentChanged(editable)`\n\nTrigger the editor to check for updates to the html, and trigger the `editableInput` event if needed.\n\n**Arguments**\n\n1. _**editable** (`HTMLElement`)_: _**OPTIONAL**_\n  * The `<div contenteditable=true></div>` element that contains the html that may have changed.\n  * If no element is provided, the editor will check the currently 'active' editor element (the element with focus).\n\n### `delay(fn)`\n\nDelay any function from being executed by the amount of time passed as the **delay** option.\n\n**Arguments**\n\n1. _**fn** (`function`)_:\n\n  * Function to delay execution for.\n\n***\n### `getContent(index)`\n\nReturns the trimmed html content for the first editor **element**, or the **element** at `index`.\n\n**Arguments**\n\n1. _**index** (`integer`)_: _**OPTIONAL**_\n  * Index of the editor **element** to retrieve the content from. Defaults to 0 when not provided (returns content of the first editor **element**).\n\n***\n### `getExtensionByName(name)`\n\nGet a reference to an extension with the specified name.\n\n**Arguments**\n\n1. _**name** (`String`)_:\n\n  * The name of the extension to retrieve (ie `toolbar`).\n\n***\n### `resetContent(element)`\n\nReset the content of all editor **elements** to their value at the time they were added to the editor.  If a specific editor **element** is provided, only the content of that element will be reset.\n\n**Arguments**\n\n1. _**element** (`DOMElement`)_: _**OPTIONAL**_\n\n  * Specific editor **element** to reset the content of.\n\n***\n### `serialize()`\n\nReturns a JSON object including the content of each of the **elements** inside the editor.\n\n***\n### `setContent(html, index)`\n\nSets the html content for the first editor **element**, or the **element** at `index`. Ensures the the `editableInput` event is triggered.\n\n**Arguments**\n\n1. _**html** (`string`)_:\n  * The content to set the element to\n\n2. _**index** (`integer`)_: _**OPTIONAL**_\n  * Index of the editor **element** to set the content of. Defaults to 0 when not provided (sets content of the first editor **element**).\n\n***\n## Static Functions/Properties\n\n### `getEditorFromElement(element)`\n\nGiven an editor **element**, retrieves the instance of MediumEditor which created/is monitoring the **element**\n\n**Arguments**\n\n1. _**element** (`DOMElement`)_:\n  * An editor **element** which is part of a MediumEditor instance\n\n### `version`\n\nObject containing data about the version of the current MediumEditor library\n\n**Properties of 'version'**\n\n1. _**major** (`Number`)_\n  * The major version number (ie the `3` in `\"3.2.1\"`)\n2. _**minor** (`Number`)_\n  * The minor version number (ie the `2` in `\"3.2.1\"`)\n3. _**revision** (`Number`)_\n  * The revision (aka \"patch\") version number (ie the `1` in `\"3.2.1\"`)\n4. _**preRelease** (`String`)_\n  * The pre-release version tag (ie the `\"rc.1\"` in `\"5.0.0-rc.1\"`)\n5. _**toString** (`Function`)_\n  * Returns the full version number as a string (ie `\"5.0.0-rc.1\"`)\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 30.326171875,
          "content": "5.23.3 / 2017-12-20\n==================\n* Fix medium-editor-insert plugin css fixes on beagle theme #1361\n* Update jsDelivr links #1366 & #1367\n* Fix Firefox console warning causing issues #1370\n* Do not check only for null targets or it will fail when it's undefined. #1373\n* Fix crash when 'extensions' in 'isElementDescendantOfExtension' is undefined #1362\n* Fix Jasmine Unit Test errors #1385\n* Fix null error on pastedPlain.split #1397\n* Fix broken browser tests #1396\n\n\n5.23.2 / 2017-08-02\n==================\n* Add noopener & noreferrer into targetBlank #1355\n* Add undefined check and fallback in Paste extension #1346\n\n\n5.23.1 / 2017-06-27\n==================\n* Remove src from bower ignored files #1330\n* Add label-checkbox relation in CreateLink form #1275 #1340\n\n\n5.23.0 / 2017-03-02\n==================\n* Only add schemes to URLs with hostnames #1258\n* Fix problem with addClassToAnchors #1293\n* Adding new 'html' button from #1235 #1291\n* Don't encode fragment as part of linkValidation #1257\n\n\n5.22.2 / 2017-01-19\n==================\n* Efficiency: Compile RegEx once #1230\n* Error in console at link selection #1249\n* Check for this.anchorPreview when hiding #1280\n* Save some CPU calculations #1271\n\n\n5.22.1 / 2016-09-29\n==================\n* Fix encoded urls (in linkValidaton) #1219\n* Fix CommonJS environment #1221\n\n\n5.22.0 / 2016-09-03\n==================\n* Add new extensions to extensions README #1188\n* Fix iframe div #1179\n* Fix placeholder text color in flat theme #1192\n* Add unwrapTags option to paste extension #1177\n* Remove first empty paragraph on backspace #1187\n* Update grunt-contrib-jasmine #1185\n* Added Embed Button links to README #1183\n\n\n5.21.1 / 2016-08-11\n==================\n* Make linkValidation allow hash links #1143\n* Fix toolbar in absolute container #1152\n* Fix caret issue in blockquote #1162\n* Handle new Google Docs font weights #1168\n* Add external button example #1175\n\n\n5.21.0 / 2016-06-21\n==================\n* Fix issue with electron environment #1125\n* Fix for paste and placeholder extensions & add/remove element events #1124\n* Placeholder is visible when only empty table is in Editor #1128\n\n\n5.20.2 / 2016-06-17\n==================\n(5.20.1 was skipped because of a bad release)\n* Fix test failure in Chrome 51 #1114\n* Fix slow CSS selector #1115\n* Improve documentation for toolbar.relativeContainer option #1122\n* Fix cursor rendering incorrectly in Firefox #1113\n\n\n5.20.0 / 2016-06-02\n==================\n* Fix anchor-preview bug where click preview no longer prefills href into anchor form\n* Add getEditorFromElement for retrieving an editor instance from an editor element\n* Respect form.reset for textarea elements within forms passed into the editor\n* Add getContent + resetContent helpers for retrieving/reverting content of editors\n* Add support for extensions preventing blur on editor when user interacts with extension elements\n\n\n5.19.1 / 2016-05-28\n==================\n* Add feature for toggling anchor preview for empty or # links\n* Fix keyboard paste to properly fire editablePaste\n* Standardize editablePaste to always fire with mock event object\n\n\n5.18.0 / 2016-05-21\n==================\n* Add support calling document.execCommand with arbitrary argument from execAction\n  * Also deprecate custom execAction option names in favor of standard .value\n* Fix error from addElements when initializing editor with no elements\n\n\n5.17.0 / 2016-05-17\n==================\n* Improved paste handling\n  * Includes proper support for keyboard paste in firefox\n  * More cleanup when pasting from Word\n* Introduce support for adding and removing elements from an existing editor instances\n  * New addElements and removeElements methods\n* Add checkContentChanged method for manually triggering editableInput\n* Add selection.selectRange helper method\n\n\n5.16.1 / 2016-04-14\n==================\n* Fix incorrect word breaking\n\n\n5.16.0 / 2016-04-12\n==================\n* Add support for multiple targets for attaching/detach event handlers\n* Add support for chaining calls to attach/detach events\n* Fix issue with click anchor-preview when using showWhenToolbarIsVisible\n* Fix IE issue with line-breaking within editor\n* Fix Firefox error when using elements other than divs as editor\n\n\n5.15.1 / 2016-04-05\n==================\n* Fix link validation in anchor extension\n* Improve performance when dealing with a lot of data\n* Enable functions to be used as keyboard commands\n\n\n5.15.0 / 2016-03-23\n==================\n* Use class instead of inline style for hiding/showing anchor form\n* Add helpers for hiding/showing form into form extension base class\n* Fix issue where auto-link extension re-enabled IE's built-in auto-link when other instances still existed\n* Fix anchor form to display form before attempting to position correctly\n* Add new selection.clearSelection() helper method for moving cursor to beginning/end of selection\n\n\n5.14.4 / 2016-02-25\n==================\n* editableInput event fixes\n  * Fix issue with event not triggering when dragging in images\n  * Fix issue with event not triggering on autolink\n  * Fix issue with event not triggering on insertHTML in Edge\n* Fix issue with hitting enter when directly inside figcaption and other block elements\n\n\n5.14.3 / 2016-02-22\n==================\n* Fix behaviour of \"Open in new window\" checkbox for Firefox\n* Added instruction to disable file dragging all together\n* Fix issue with image dragging and dropping at end of target\n* Fix issue with extra space when space already exists\n\n\n5.14.2 / 2016-02-10\n==================\n* Support Microsoft Edge\n  * Fallback to custom insertHTML command instead of built-in command for Edge\n  * Use shim code for detecting input on contenteditable for Edge\n  * Fix issue with converting blockquotes to paragraphs in Edge\n  * Update documentation, fix tests, and include Edge in browser testing\n\n\n5.14.1 / 2016-02-05\n==================\n* Fix issue with saving selection after newline and whitespace text nodes\n* Fix import/export selection to prefer start of nodes over end of nodes\n* Fix for getClosestBlockContainer utility function\n* Fix for getTopBlockContainer utility function\n* Deprecate getFirstTextNode utility function\n\n\n5.14.0 / 2016-01-31\n==================\n* Added pre clean replacements\n* Fixed an infinite loop\n* Handled enter event for empty h2/h3 tag\n\n\n5.13.0 / 2016-01-18\n==================\n* Added stickyTopOffset option to keep on the screen a sticky toolbar\n* Fixed misplacement of buttons when selection is near to the right edge\n* Updated dev dependencies\n* Added reference to README for who is using medium-editor\n\n\n5.12.0 / 2015-12-15\n==================\n* Fix issue with image-only selections\n* Trim src when using the image toolbar button\n* Fix auto linking with comments\n* Documented the process of releasing a new version\n\n\n5.11.0 / 2015-12-05\n==================\n* Updated table extension demo\n* Removed the carriage return character from a demo file\n* Updated checkLinkFormat function to support more schemes\n* Fixed issue with disableExtraSpaces option to allow space at the end of line\n* Use editableInput instead of input event for textarea syncing\n* Fixed style for correct positioning of placeholder\n* Allowed to remove blockquote by pressing delete at beginning of the quote\n* Fixed failing test cases in IE9 and IE10\n\n\n5.10.0 / 2015-10-30\n==================\n* Added disableExtraSpaces option for preventing errant spaces\n* Added editalbeKeydownSpace event\n* Fix issue with return key at the end of text with bad formatting\n* Added new font name extension (beta)\n* Documentation updates and cleanup\n\n\n5.9.0 / 2015-10-19\n==================\n* Add showWhenToolbarIsVisible option for displaying anchor-preview when toolbar is visible\n* Remove trailing whitespace when creating links via anchor extension\n* Fix issue with escaping list items via pressing enter\n* Fix font-awesome links in demo pages\n* Updates to documentation around creating links\n\n\n5.8.3 / 2015-10-08\n==================\n* Fix changing link on images\n\n\n5.8.2 / 2015-09-21\n==================\n* Fix type of elements which can contain auto-links\n\n\n5.8.1 / 2015-09-16\n==================\n* Fix inconsistancies and errors in isDescendant utility method\n\n\n5.8.0 / 2015-09-13\n==================\n* Added relativeContainer options for the toolbar\n* Fix issue with auto-linking across consecutive list-items\n* Added beagle theme\n\n\n5.7.0 / 2015-08-21\n==================\n* Fix backwards compatability issue with how keyboard commands extension handles 'alt'\n* Rewrite which event placeholder extension listens to for hiding/showing placeholder\n  * Fix issue where placeholder is not hidden when calling setContent()\n  * Fix issue where placeholder is displayed incorrectly when hideOnClick option is true\n\n\n5.6.3 / 2015-08-18\n==================\n* Ensure textarea ids are unique on entire page\n* Fix broken auto-link within block elements other than paragraphs\n* Fix issue with editor element being removed in IE11\n* Remove references to global variables from internal code\n\n\n5.6.2 / 2015-08-11\n==================\n* Fix a regression in the paste extension related to `pasteHTML` function\n\n\n5.6.1 / 2015-08-10\n==================\n* Fix issue with creating anchors and restoring selection at the beginning of paragraphs\n* Fix issue with creating anchors and restoring selection within list items and nested blocks\n* Ensure CTRL + M is respected as a way to insert new lines\n\n\n5.6.0 / 2015-08-07\n==================\n* Add new 'tim' theme for medium-editor toolbar\n* Fix issue Chrome generated comment tags when pasting\n* Fix issue where 'editableInput' is triggered multiple times when creating links\n\n\n5.5.4 / 2015-08-04\n==================\n* Fix issue with anchor and selection inconsitencies in IE\n\n\n5.5.3 / 2015-08-03\n==================\n* Fix issue with replacing a pre-existing link\n* Fix issue with selection after creating a link after empty paragraphs\n\n\n5.5.2 / 2015-08-02\n==================\n* Fix issue where block elements where cleaned up incorrectly when pasting\n* Fix anchor form checkboxes to reflect status of selected link\n* Fix issue with creating links in same paragraph as another link\n* Fix issue with creating links after empty paragraphs\n* Ensure all attributes are copied from textareas to divs\n\n\n5.5.1 / 2015-07-23\n==================\n* Fix appearance of anchor form when checkboxes are present\n* Fix breaking issue with standardizeSelectionStart option\n\n\n5.5.0 / 2015-07-21\n==================\n* Add setContent method into core API, which triggers editableInput\n\n\n5.4.1 / 2015-07-20\n==================\n* Fix issue where custom anchor-preview extensions weren't overriding built-in anchor preview\n* Add documentation from wiki into the source code\n\n\n5.4.0 / 2015-07-16\n==================\n* Add support for including 'alt' key in keyboard-commands\n\n\n5.3.0 / 2015-07-07\n==================\n* Fix issue with disabling image drag & drop via imageDragging option\n  * Deprecate image-dragging extension\n  * Introduce file-dragging extension\n* Ensure autolink urls respect targetBlank option\n* Expose importSelection and exportSelection as generic Selection helpers\n\n\n5.2.0 / 2015-06-29\n==================\n* Move allowMultiParagraphSelection into toolbar options\n  * Deprecate global allowMultiParagraphSelection option\n* Fix issue with allowMultiParagraphSelection option over empty elements\n* Fix issue with creating links producing multiple anchor tags\n* Fix issue where anchor preview displays while toolbar is visible\n* Add demo pages for example extension and example button\n\n\n5.1.0 / 2015-06-26\n==================\n* Add showToolbarDefaultAction helper method to form extension\n* Ensure elements generated for textareas have a unique id\n* Ensure all added attributes are removed during destroy\n* Cleanup divs generated by Chrome during justify actions\n* Add parameter to anchorPreview.positionPreview for reusability\n\n\n5.0.0 / 2015-06-18\n==================\n* All deprecated functions have been removed\n* Keyboard Shorcuts are now part of an extension and not attached to specific button/commands\n* Placeholders are now part of an extension with its own dedicated options\n* Toolbar is now an extension with its own dedicated options\n* firstHeader and secondHeader are gone you should use h1 thru h6\n* Support pre-releases\n* Buttons\n  * The array of buttons can now contain objects, for overriding any part of the button object\n    * This replaces the custom object value for the buttonLabels option\n* API\n  * Unique id for MediumEditor instance will now remain unique (regardless of how many instances are created)\n  * .statics references are gone\n  * .trigger supports triggering events without needing to declare the event\n  * .callExtensions(), .setToolbarPosition(), and .hideToolbarDefaultActions() have been removed\n* Extension\n  * .window & .document are now exposed as members of the Extension\n  * init no longer is passed MediumEditor instance as first argument\n* CSS\n  * All classes are now `medium-editor` prefixed\n* Util\n  * getProp, derives, getSelectionData, setObject & getObject are gone\n  * getSelectionRange & getSelectionStart are now in Selection\n\n\n4.12.5 / 2015-06-16\n==================\n* Fix issue with restoring selection within nested block elements\n\n\n4.12.4 / 2015-06-15\n==================\n* Ensure auto-link will never select an empty element (br, hr, input, etc.)\n\n\n4.12.3 / 2015-06-12\n==================\n* Fix bug with un-linked auto-links causing unexpected cursor positioning\n\n\n4.12.2 / 2015-06-10\n==================\n* Fix broken keyboard shortcuts\n\n\n4.12.1 / 2015-06-02\n==================\n* Fix break with updateOnEmptySelection option for static toolbars\n\n\n4.12.0 / 2015-06-01\n==================\n* Fix pasting links when targetBlank option is being used\n* Fix for spellcheck option after destroy\n* Fix over-reaching keyboard shortcuts for commands\n* Expose new 'positionToolbar' custom event\n* Add new isKey() helper in util\n* Add cleanup on destroy for auto-link and placeholder extensions\n* Base extension changes\n  * Add getEditorElements(), getEditorId(), and getEditorOption() helpers\n  * Add on(), off(), subscribe(), and execAction() helpers\n  * Introduce destroy() lifecycle method + deprecate deactivate()\n\n\n4.11.1 / 2015-05-26\n==================\n* Fix issue with auto-linked text after manually unlinking\n* Fix some incorrect TLDs for auto-link\n\n\n4.11.0 / 2015-05-26\n==================\n* Add hideToolbar and showToolbar custom events\n* Add hideOnClick option for placeholder extension\n* Fix issue with linebreaks in Safari\n* Fix issue with calling setup again after destroy\n* Add support for CDN hosting\n* Pass window and document to each extension\n* Deprecate .parent property of extensions\n\n\n4.10.2 / 2015-05-21\n==================\n* Auto-Link Fixes\n  * Don't auto-link text after it is manually unlinked\n  * Trigger auto-linking when focus is lost (ie Tab key)\n  * Fix issue where link appears and immediately disappears when hitting Enter in IE11\n  * Fix issue where hostname with more than three w's only auto-links final three w's in the name\n  * Fix issue where valid urls were not auto-linked\n  * Fix issue where some text was auto-linked when it shouldn't be\n\n\n4.10.1 / 2015-05-20\n==================\n* Fix paste issue with plain-text containing multiple paragraphs\n* Fix issue with incorrect cursor positon after creating a list\n* Fix disabledDoubleReturn option within a sentence\n* Allow for nested contenteditables\n* New style of passing options for anchor-preview and anchor\n* Introduce extensions.button + extensions.form as extendable base extensions\n* Convert anchor, fontsize, and anchor-preview to updated extensions model\n\n\n4.9.0 / 2015-05-18\n==================\n* New auto-link support for detecting urls and converting them to links\n* Fix target _blank issue for links in Firefox\n* Don't show placeholders for empty lists\n* Allow for overriding image drag and drop via extension\n\n\n4.8.1 / 2015-05-13\n==================\n* Fix error thrown when loading MediumEditor js from head\n\n\n4.8.0 / 2015-05-11\n==================\n* Expose new 'editableInput' event for monitoring changes to editor\n* Cleanup contenteditable elements created for textareas\n\n\n4.7.3 / 2015-05-07\n==================\n* Update version number in dist files\n\n\n4.7.2 / 2015-05-06\n==================\n* Add shortcut to insert a link (ctrl/cmd + k)\n* Fix `this.getAttribute is not a function` error\n\n\n4.7.1 / 2015-04-30\n==================\n* Make anchor preview wrap for long links\n* Fix issue when clean pasting spans with child nodes\n\n\n4.7.0 / 2015-04-27\n==================\n* Expose importSelection + exportSelection helper methods\n* Fix issue with initialization of MediumEditor using textarea\n* Introduce jscs\n\n4.6.0 / 2015-04-22\n==================\n* Add 'beta' version of fontSize button/form\n* Add option for enabling/disabling spellcheck\n* Add titles to toolbar buttons for tooltips\n* Use actual anchor tag in anchor preview\n* Fix anchor preview issue with tags nested inside anchors\n\n* Speed up travis builds\n* Convert paste handler into overrideable extension\n\n\n4.5.2 / 2015-04-14\n==================\n* Fix blur event detection when clicking on elements that don't clear focus\n\n\n4.5.1 / 2015-04-14\n==================\n* Fix broken 'paste.cleanPastedHtml' option and rename to 'paste.cleanPastedHTML'\n\n\n4.5.0 / 2015-04-13\n==================\n* Expose 'unsubscribe' for custom events\n* Detach custom events when editor is destroyed\n* Fix fontawesome url in demo page\n\n\n4.4.0 / 2015-04-11\n==================\n* Expose smart 'blur' and 'focus' events which account for toolbar interaction\n* Expose selectElement method for selecting text and updating toolbar\n* Fix always wrapping pasted text in a <p> tag\n\n\n4.3.0 / 2015-04-10\n==================\n* Add override options for pasteHTML and cleanPaste\n* Support overriding of scss theme variables\n* Fix for justify button states in IE\n* New helpers for manipulating nested objects\n* Internal tooling prep for options and defaults\n\n\n4.2.0 / 2015-04-05\n==================\n* Add textarea support\n\n\n4.1.1 / 2015-04-01\n==================\n* Fix .version issue\n\n\n4.1.0 / 2015-03-29\n==================\n* Expose Util and Selection methods externally via MediumEditor.util and MediumEditor.selection\n* Expose MediumEditor.version for version info\n* Add support for custom cleaning of attributes and tags for .pasteHTML\n* Move from jslint to jshint\n\n\n4.0.3 / 2015-03-27\n==================\n* Introduce 'removeFormat' button, for removing formatting from selection\n* Fix issues with focus/blur when using standardizeSelectionStart option\n\n\n4.0.2 / 2015-03-26\n==================\n* Fix bug causing toolbar to disappaer on click in safari (rollback fix from 4.0.1)\n* Break up anchor form extension logic into more overrideable parts\n\n\n4.0.1 / 2015-03-24\n==================\n* Fix issue with dragged in image sizes\n* Fix issues with focus/blur when using standardizeSelectionStart option\n\n\n4.0.0 / 2015-03-23\n==================\n* Introduced custom events (consumable externally)\n* Reduce API surface area\n  * Deprecated activate & deactivated. Exposed setup and destroy as replacements\n  * Updated documentation to reflect API changes\n* HTML standardization around list items\n* Fixed throttling\n* Added superscript & subscript css\n* Added better paste cleaning for Microsoft Word\n* Convert anchor preview into overrideable extension\n* Added disableAnchorPreview option\n\n\n3.0.9 / 2015-03-10\n==================\n* Extract toolbar\n* Extract anchor preview\n\n\n3.0.8 / 2015-02-27\n==================\n* MIT License\n* Use code from selection.js which is duplicated in core.js\n* Fix bug in paste handling + increase paste coverage\n\n\n3.0.7 / 2015-02-26\n==================\n* Ensure static toolbar won't render outside window + minimize when toolbar overflows\n* Fix flashing static-toolbar bug\n* Fix bug with sticky-toolbar when scrolling past bottom of contenteditable\n* Fix css declaration of linear-gradient\n* Fix AMD \"Uncaught TypeError: undefined is not a function\" issue\n* Account for 'full' actions when doing queryCommandState\n* Fix bugs in modified queryCommandState calls\n\n\n3.0.0 / 2015-02-23\n==================\n* Extract anchor form code from core code and convert into an extension\n* Expose onShowToolbar and onHideToolbar as options\n* Change button method names (now `setActive` and `setInactive`) to differentiate from core's `activate` and `deactivate`\n* Simplify blur check selection\n* Add Sauce Labs configuration to automate cross-browser testing\n* Add IE9 polyfill to repo\n* Let 'meta' key trigger shortcuts\n\n\n2.4.6 / 2015-02-18\n==================\n* Add basic support to keyboard shortcuts\n\n\n2.4.5 / 2015-02-17\n==================\n* Fix main file reference in npm package\n\n\n2.4.3 / 2015-02-16\n==================\n* Introduce full content actions\n\n\n2.4.2 / 2015-02-15\n==================\n* Fix disableDoubleReturn option\n\n\n2.4.1 / 2015-02-15\n==================\n* Fix isListItemChild call\n\n\n2.4.0 / 2015-02-15\n==================\n* Split source code into several files for better development flow\n* Make saveSelection and restoreSelection more consistant cross browser\n* Use document.queryCommandState for some button toolbar states\n* Add selection storage\n* Call extensions deactivate when deactivating the editor\n* Turn Anchor button into an extension\n\n\n2.3.0 / 2015-02-11\n==================\n* Fix various selection and positioning bugs\n* Introduce commands as combination of buttons and extensions\n* Update aria label so that setting secondHeader activates the toolbar\n* Don't use styles for detecting underline + strikethrough\n* Fix 'imageDragging: false' option\n* Fix list item tab identation\n* Add extension onHide command\n\n\n2.2.0 / 2015-02-05\n==================\n* Fix bug in getSelectedParentElement + Fix tests in browsers\n* Fall back to shimmed insertHTML in cases where firefox throws\n  when calling insertHTML\n* Prevent \"Argument not optional\" error\n* Prevent infinite loop after findAdjacentTextNodeWithContent\n* Remove cleanups from contenteditable false areas\n* Firefox fix: Don't modify value of input before calling execCommand()\n* Fix selection issue for clean pasted html test case in firefox\n* Add image drag and drop support\n\n\n2.1.3 / 2015-01-31\n==================\n* Fix issue with multiple elements with the same class\n  on the same editor instance\n\n\n2.1.2 / 2015-01-30\n==================\n* Specify default npm registry (`http://registry.npmjs.org`)\n\n\n2.1.1 / 2015-01-30\n==================\n* Adds support for newlines in placeholder attribute\n* Adds support and documentation for new toolbar extensions\n* Adds support for changing 'open in new window' label text\n* Fixes bug where `nodeValue` could unexpectedly be null\n* A couple of fixes to make tests a bit more reliable when run in the browser\n\n\n2.1.0 / 2015-01-27\n==================\n\n* Handles ESC key in link editor\n* Standardizes usage of setTimeout for UX delays vs debouncing vs deferring\n* Adds an optional onShowToolbar method\n* Supports enabling/disabling checkSelection updates externally\n* Standardizes where in the DOM a range begins\n* Adds ARIA role information\n* Fixes off() not removing any event listeners\n* Misc minor bug fixes and improvements\n\n\n2.0.0 / 2015-01-06\n==================\n\n* Adds static toolbar feature\n* Now uses textContent instead of innerText\n* Fixes plain text paste on IE\n* Hides placeholder on mouse click\n* Adds a 'collapse' option to 'selectElementContents' helper\n* Allows toolbar button states to change when selection is collapsed\n* In hideToolbarActions, calls an optional 'onHideToolbar' method\n* Ensures that ul.id and anchor.id are unique\n* Avoids grabbing selection on keypress for contenteditable except for spacebar\n* Supports disabling anchorForm, avoiding unnecessary event handling and element creation\n* Supports disabling placeholders, including not attaching event handlers when not needed\n* Various minor bug fixes and improvements\n\n\n1.9.13 / 2014-11-24\n===================\n\n* Adds a strikethrough option in buttonLabel\n* Now uses `options.elementsContainer` to calculate ID\n* Removes events during deactivate\n\n\n1.9.10 / 2014-11-17\n===================\n\n* Adds custom doc and win functionality, now you can specify the editor container\n* Minor bugfixes\n\n\n1.9.8 / 2014-10-21\n==================\n\n* Fixes 'this' out of scope\n\n\n1.9.7 / 2014-10-20\n==================\n\n* Adds justify buttons\n* Fix #308 by passing clipboard content through self.htmlEntities before inserting\n* Minor bug fixes\n\n\n1.9.4 / 2014-09-16\n==================\n\n* Adds support for tab based indenting and outdenting of <ul> and <ol>\n* Adds a save button to the anchor form\n* Improves toolbar positioning\n* Adds anchorButton and anchorButtonClass options\n\n\n1.9.0 / 2014-08-08\n==================\n\n* Extensions\n* Disables the toolbar when selecting within an element that has contenteditable=\"false\"\n* Fixes hidden placeholder content override\n\n\n1.8.14 / 2014-06-11\n===================\n\n* Fixes bug where if you had an empty blockquote the placeholder would still be active\n* Fixes bug that would create link without values\n* Exposes save/restoreSelection()\n* Allows customization of active/first/last button classes\n* Adds a script to run app from the cli\n* Adds protocols to checkLinkFormat regex\n\n\n1.8.8 / 2014-05-08\n==================\n\n* Fixes unlink behavior on Firefox\n* Fixes white space behavior at the end of anchors\n\n\n1.8.6 / 2014-05-03\n==================\n\n* Adds non-minified CSS files to bower.json\n\n\n1.8.5 / 2014-05-01\n==================\n\n* Changes to the element list or element selector now take effect on reactivation\n* Changed innerHTML to textContent to prevent XSS through twisted href values\n* Checks for data-disable-return on element on paste\n* Adds disableEditing and elementsContainer options\n\n\n1.8.0 / 2014-04-12\n==================\n\n* Removes anchor preview listeners on deactivate\n* Implements clean paste\n* Adds an option to validate links\n* Adds a basic extensions support\n* Misc minor fixes\n\n\n1.7.5 / 2014-03-30\n==================\n\n* Fixes isActive toggling\n* Removes anchor preview default value\n\n\n1.7.3 / 2014-03-22\n==================\n\n* Fixes activate/deactivate behavior\n\n\n1.7.2 / 2014-03-22\n==================\n\n* Removes DOM elements created by MediumEditor on deactivate\n\n\n1.7.1 / 2014-03-22\n==================\n\n* Prevents new lines with shift+enter when disableReturn is set to true\n\n\n1.7.0 / 2014-03-22\n==================\n\n* Removes compass dependency by using grunt with libsass\n* Fixes subscript button markup\n* Fixes anchor preview behavior for empty links and anchors\n* Adds a new option to disable double returns\n\n\n1.6.7 / 2014-03-13\n==================\n\n* Allows initialization with a single DOM node\n* Adds indent and outdent buttons\n\n\n1.6.5 / 2014-03-08\n==================\n\n* fixes some minor paste bugs\n* adds a delay option for anchor toolbar\n* fixes anchor toolbar initial positioning\n* fixes heading and blockquote on IE\n\n\n1.6.1 / 2014-03-04\n==================\n\n* fixes case where clicking anchor preview and then clicking into the anchorInput\n  causes hideToolbarActions to be called\n* fixes window resize when toolbar element is not created\n\n\n1.6.0 / 2014-02-27\n==================\n\n* Reorganizes CSS files\n* Removes unused method bindElementToolbarEvents\n* Adds a preview toolbar for anchors\n* Removes paste event binding on deactivate\n\n\n1.5.4 / 2014-02-12\n==================\n\n* Fixes filenames for main in bower.json\n* Removes window resize event listener on deactivate\n\n\n1.5.3 / 2014-01-22\n==================\n\n* Adds bootstrap theme\n* Adds image button that converts selected text into an image tag\n* Removes normalize.css dependency\n\n\n1.5.0 / 2014-01-16\n==================\n\n* Adds 3 new themes: Roman, Mani e Flat\n\n\n1.4.5 / 2014-01-13\n==================\n\n* Adds ability to set custom labels on buttons\n* Updates uglify\n* Fixes bug where pressing enter on formatted list item would generate\n  a new list instead of a new list item\n\n\n1.4.0 / 2013-12-13\n==================\n\n* Adds new extra buttons: pre and strikethrough\n* Fixes placeholder bug on paste\n* Various code improvements\n* Prevents returns using shift when disableReturn is set to true\n* Improves CSS to avoid conflicts\n\n\n1.3.5 / 2013-11-27\n==================\n\n* Fixes problem with text selection ending outside the container div\n* Implements serialize method\n* Adds a targetBlank option\n* Fixes Firefox box-sizing declarations\n\n\n1.3.1 / 2013-11-19\n==================\n\n* Fixes toolbar binding button issue with multi-editor mode\n\n\n1.3.0 / 2013-11-18\n==================\n\n* Fixes data-disable-return not preventing paragraph creation\n* Improves getSelectionElement() to work in any case\n* Fixes multi element selection bug\n* Fixes Issues #88 & #89\n* Improves binding for multiple editor instance, checkSelection() is called only once per instance\n* Improves allowMultiParagraphSelection filter by removing empty tags elements before counting\n* Considers header tags has a paragraph too (same as medium)\n\n\n1.2.2 / 2013-11-07\n==================\n\n* Removes blur event listener when disabling the toolbar\n* Adds a light gradient opacity to the toolbar\n* Fixes bug that would keep toolbar alive when moving out of the anchor input\n\n\n1.2.1 / 2013-11-07\n==================\n\n* Fixes empty selectionNode.el bug\n* Prevents toolbar opening when changing to selection elements\n  with the toolbar disabled\n* Adds a transition to the toolbar when moving across elements\n\n\n1.2.0 / 2013-11-06\n==================\n\n* Fixes issue on deactivation without enabled toolbar\n* Fixes checkSelection error when disableToolbar option is enabled\n* Adds new option to disable multiple paragraph selection\n* Prevents paragraph creation on paste when disableReturn is set to true\n\n\n1.1.6 / 2013-10-24\n==================\n\n* Adds extra buttons: superscript, subscript, ordered list and unordered list\n\n\n1.1.5 / 2013-10-23\n==================\n\n* Changes buttons blacklist to whitelist\n\n\n1.1.4 / 2013-10-13\n==================\n\n* Exports MediumEditor as module\n* Changes \"Underline\" button to display \"U\" instead of \"S\"\n\n\n1.1.3 / 2013-10-08\n==================\n\n* Pasted text is now wrapped into P elements\n\n\n1.1.2 / 2013-10-06\n==================\n\n* Changes the editor to use the formatBlock command to handle block elements\n* Fixes placeholder for empty elements\n\n\n1.1.1 / 2013-10-04\n==================\n\n* Normalizes styles and scripts\n* Improves bower manifest\n\n\n1.1.0 / 2013-10-03\n==================\n\n* Adds an option to disable the toolbar and maintain only the contenteditable behavior\n* Adds an option to disable returns\n* Adds an placeholder option for the contenteditable areas\n\n\n1.0.3 / 2013-10-01\n==================\n\n* Fixes toolbar positioning on screen top\n\n\n1.0.2 / 2013-09-24\n==================\n\n* Adds the possibility to pass an element list directly into initialization\n* Fixes issue with initial positioning when some actions are disabled\n* Don't rely on :last-child to style first/last element, as they may be hidden\n\n\n1.0.1 / 2013-09-20\n==================\n\n* Changes demo texto to something more friendly\n* Fixes shift+enter behavior\n\n\n1.0.0 / 2013-08-26\n==================\n\n* Initial release\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 1.3896484375,
          "content": "# Contributor Code of Conduct\n\nAs contributors and maintainers of MediumEditor, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.\n\nWe are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, age, or religion.\n\nExamples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. Project maintainers who do not follow the Code of Conduct may be removed from the project team.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers.\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.0.0, available at [http://contributor-covenant.org/version/1/0/0/](http://contributor-covenant.org/version/1/0/0/)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.400390625,
          "content": "# Contributing\n\n## To contribute and end up in this [list](https://github.com/yabwe/medium-editor/graphs/contributors):\n\n[Kill some bugs :)](https://github.com/yabwe/medium-editor/issues?q=is%3Aopen+is%3Aissue+label%3Abug)\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Test your changes to the best of your ability.\n4. Update the documentation to reflect your changes if they add or changes current functionality.\n5. Commit your changes (`git commit -am 'Added some feature'`) **without files from the _dist_ directory**.\n6. Push to the branch (`git push origin my-new-feature`)\n7. Create new Pull Request\n\n## Code Consitency\n\nTo help create consistent looking code throughout the project, we use a few tools to help us. They have plugins for most popular editors/IDEs to make coding for our project, but you should use them in your project as well!\n\n#### JSHint\n\nWe use [JSHint](http://jshint.com/) on each build to find easy-to-catch errors and potential problems in our js.  You can find our JSHint settings in the `.jshintrc` file in the root of the project.\n\n#### jscs\n\nWe use [jscs](http://jscs.info/) on each build to enforce some code style rules we have for our project.  You can find our jscs settings in the `.jscsrc` file in the root of the project.\n\n#### EditorConfig\n\nWe use [EditorConfig](http://EditorConfig.org) to maintain consistent coding styles between various editors and IDEs.  You can find our settings in the `.editorconfig` file in the root of the project.\n\n## Easy First Bugs\n\nLooking for something simple for a first contribution? Try fixing an [easy first bug](https://github.com/yabwe/medium-editor/issues?q=is%3Aopen+is%3Aissue+label%3A%22easy+first+bug%22)!\n\n## Development\n\nMediumEditor development tasks are managed by Grunt. To install all the necessary packages, just invoke:\n\n```bash\nnpm install\n```\n\nTo run all the test and build the dist files for testing on demo pages, just invoke:\n```bash\ngrunt\n```\n\nThese are the other available grunt tasks:\n\n* __js__: runs jslint and jasmine tests and creates minified and concatenated versions of the script;\n* __css__: runs autoprefixer and csslint\n* __test__: runs jasmine tests, jslint and csslint\n* __watch__: watch for modifications on script/scss files\n* __spec__: runs a task against a specified file\n\nThe source files are located inside the __src__ directory.  Be sure to make changes to these files and not files in the dist directory.\n"
        },
        {
          "name": "CUSTOM-EVENTS.md",
          "type": "blob",
          "size": 10.916015625,
          "content": "# MediumEditor Custom Events (v5.0.0)\n\nMediumEditor exposes a variety of custom events for convenience when using the editor with your web application.  You can attach and detach listeners to these custom events, as well as manually trigger any custom events including your own custom events.\n\n**NOTE:**\n\nCustom event listeners are triggered in the order that they were 'subscribed' to.  Most functionality within medium-editor uses these custom events to trigger updates, so in general, it can be assumed that most of the built-in functionality has already been completed before any of your custom event listeners will be called.\n\nIf you need to override the editor's built-in behavior, try overriding the built-in extensions with your own [custom extension](src/js/extensions).\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [API Methods](#api-methods)\n  - [`MediumEditor.subscribe(name, listener)`](#mediumeditorsubscribename-listener)\n  - [`MediumEditor.unsubscribe(name, listener)`](#mediumeditorunsubscribename-listener)\n  - [`MediumEditor.trigger(name, data, editable)`](#mediumeditortriggername-data-editable)\n- [Custom Events](#custom-events)\n  - [`addElement`](#addelement)\n  - [`blur`](#blur)\n  - [`editableInput`](#editableinput)\n  - [`externalInteraction`](#externalinteraction)\n  - [`focus`](#focus)\n  - [`removeElement`](#removeelement)\n- [Toolbar Custom Events](#toolbar-custom-events)\n  - [`hideToolbar`](#hidetoolbar)\n  - [`positionToolbar`](#positiontoolbar)\n  - [`positionedToolbar`](#positionedtoolbar)\n  - [`showToolbar`](#showtoolbar)\n- [Proxied Custom Events](#proxied-custom-events)\n      - [`editableClick`](#editableclick)\n      - [`editableBlur`](#editableblur)\n      - [`editableKeypress`](#editablekeypress)\n      - [`editableKeyup`](#editablekeyup)\n      - [`editableKeydown`](#editablekeydown)\n      - [`editableKeydownEnter`](#editablekeydownenter)\n      - [`editableKeydownTab`](#editablekeydowntab)\n      - [`editableKeydownDelete`](#editablekeydowndelete)\n      - [`editableKeydownSpace`](#editablekeydownspace)\n      - [`editableMouseover`](#editablemouseover)\n      - [`editableDrag`](#editabledrag)\n      - [`editableDrop`](#editabledrop)\n      - [`editablePaste`](#editablepaste)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## API Methods\n\nUse the following methods of [MediumEditor](API.md) for custom event interaction:\n\n### `MediumEditor.subscribe(name, listener)`\n\nAttaches a listener for the specified custom event name.\n\n**Arguments**\n\n1. _**name** (`String`)_:\n\n  * Name of the event to listen to.  See the list of built-in [Custom Events](#custom-events) below.\n\n2. _**listener(data, editable)** (`function`)_:\n\n  * Listener method that will be called whenever the custom event is triggered.\n\n**Arguments to listener**\n\n  1. _**data** (`Event` | `object`)_\n    * For most custom events, this will be the browser's native `Event` object for the event that triggered the custom event to fire.\n    * For some custom events, this will be an object containing information describing the event (depending on which custom event it is)\n  2. _**editable** (`HTMLElement`)_\n    * A reference to the contenteditable container element that this custom event corresponds to.  This is especially useful for instances where one instance of MediumEditor contains multiple elements, or there are multiple instances of MediumEditor on the page.\n    * For example, when `blur` fires, this argument will be the `<div contenteditable=true></div>` element that is about to receive focus.\n\n***\n### `MediumEditor.unsubscribe(name, listener)`\n\nDetaches a custom event listener for the specified custom event name.\n\n**Arguments**\n\n1. _**name** (`String`)_:\n\n  * Name of the event to detach the listener for.\n\n2. _**listener** (`function`)_:\n\n  * A reference to the listener to detach.  This must be a match by-reference and not a copy.\n\n**NOTE**\n\n  * Calling [destroy()](API.md#destroy) on the MediumEditor object will automatically remove all custom event listeners.\n\n***\n### `MediumEditor.trigger(name, data, editable)`\n\nManually triggers a custom event.\n\n1. _**name** (`String`)_:\n\n  * Name of the custom event to trigger.\n\n2. _**data** (`Event` | `object`)_:\n\n  * Native `Event` object or custom data object to pass to all the listeners to this custom event.\n\n3. _**editable** (`HTMLElement`)_:\n\n  * The `<div contenteditable=true></div>` element to pass to all of the listeners to this custom event.\n\n## Custom Events\n\nThese events are custom to MediumEditor so there may be one or more native events that can trigger them.\n\n### `addElement`\n\n`addElement` is triggered whenever an element is added to the editor after the editor has been instantiated.  This custom event will be triggered **after** the element has already been initialized by the editor and added to the internal array of **elements**.  If the element being added was a `<textarea>`, the element passed to the listener will be the created `<div contenteditable=true>` element and not the root `<textarea>`.\n\n**Arguments to listener**\n\n1. _**data** (`object`)_\n  * Properties of data object\n    * `target`: element which was added to the editor\n    * `currentTarget`: element which was added to the editor\n2. _**editable** (`HTMLElement`)_\n  * element which was added to the editor\n\n***\n### `blur`\n\n`blur` is triggered whenever a `contenteditable` element within an editor has lost focus to an element other than an editor maintained element (ie Toolbar, Anchor Preview, etc).\n\nExample:\n\n1. User selects text within an editor element, causing the toolbar to appear\n2. User clicks on a toolbar button\n  * Technically focus may have been lost on the editor element, but since the user is interacting with the toolbar, `blur` is NOT fired.\n3. User hovers over a link, anchor-preview is displayed\n4. User clicks link to edit it, and the toolbar now displays a textbox to edit the url\n  * Focus will have lost here since focus is now in the url editing textbox, but again since it's within the toolbar, `blur` is NOT fired.\n5. User clicks on another part of the page which hides the toolbar and focus is no longer in the `contenteditable`\n6. `blur` is triggered\n\n***\n### `editableInput`\n\n`editableInput` is triggered whenever the content of a `contenteditable` changes, including keypresses, toolbar actions, or any other user interaction that changes the html within the element.  For non-IE browsers, this is just a proxied version of the native `input` event.  However, Internet Explorer and has never supported the `input` event on `contenteditable` elements, and Edge has some support for `input` on `contenteditable` (which may be fixed in upcoming release of Edge) so for these browsers the `editableInput` event is triggered through a combination of:\n* native `keypress` event on the element\n* native `selectionchange` event on the document\n* monitoring calls the `document.execCommand()`\n\n***\n### `externalInteraction`\n\n`externalInteraction` is triggered whenever the user interact with any element outside of the `contenteditable` element or the other elements maintained by the editor (ie Toolbar, Anchor Preview, etc.).  This event trigger regardless of whether an existing `contenteditable` element had focus or not.\n\n***\n### `focus`\n\n`focus` is triggered whenever a `contenteditable` element within an editor receives focus. If the user interacts with any editor maintained elements (ie toolbar), `blur` is NOT triggered because focus has not been lost.  Thus, `focus` will only be triggered when an `contenteditable` element (or the editor that contains it) is first interacted with.\n\n***\n### `removeElement`\n\n`removeElement` is triggered whenever an element is removed from the editor after the editor has been instantiated.  This custom event will be triggered **after** the element has already been removed from the editor and any events attached to it have already been removed.  If the element being removed was a `<div>` created to correspond to a `<textarea>`, the element will already have been removed from the DOM.\n\n**Arguments to listener**\n\n1. _**data** (`object`)_\n  * Properties of data object\n    * `target`: element which was removed from the editor\n    * `currentTarget`: element which was removed from the editor\n2. _**editable** (`HTMLElement`)_\n  * element which was removed from the editor\n\n## Toolbar Custom Events\n\nThese events are triggered by the toolbar when the toolbar extension has not been disabled.\n\n### `hideToolbar`\n\n`hideToolbar` is triggered whenever the toolbar was visible and has just been hidden.\n\n### `positionToolbar`\n`positionToolbar` is triggered each time the current selection is checked and the toolbar's position is about to be updated. This event is triggered after all of the buttons have had their state updated, but before the toolbar is moved to the correct location.  This event will be triggered even if nothing will be changed about the toolbar's appearance.\n\n### `positionedToolbar`\n`positionedToolbar` is triggered each time the current selection is checked, the toolbar is displayed, and the toolbar's position was updated. This differs from the `positionToolbar` event in that the visibility and location of the toolbar has already been changed (as opposed to the event triggering before those changes occur). This event will be triggered even if nothing was changed about the toolbar's appearance.\n\n### `showToolbar`\n`showToolbar` is triggered whenever the toolbar was hidden and has just been displayed.\n\n## Proxied Custom Events\n\nThese events are triggered whenever a native browser event is triggered for any of the `contenteditable` elements monitored by this instance of MediumEditor.\n\nFor example, the `editableClick` custom event will be triggered when a native `click` event is fired on any of the `contenteditable` elements. This provides a single event listener that can get fired for all elements, and also allows for the `contenteditable` element that triggered the event to be passed to the listener.\n\n##### `editableClick`\nnative `click` event for each element\n##### `editableBlur`\nnative `blur` event for each element.\n##### `editableKeypress`\nnative `keypress` event for each element.\n##### `editableKeyup`\nnative `keyup` event for each element.\n##### `editableKeydown`\nnative `keydown` event for each element.\n##### `editableKeydownEnter`\nnative `keydown` event for each element, but only triggered if the key is `ENTER` (keycode 13).\n##### `editableKeydownTab`\nnative `keydown` event for each element, but only triggered if the key is `TAB` (keycode 9).\n##### `editableKeydownDelete`\nnative `keydown` event for each element, but only triggered if the key is `DELETE` (keycode 46).\n##### `editableKeydownSpace`\nnative `keydown` event for each element, but only triggered if the key is `SPACE` (keycode 32).\n##### `editableMouseover`\nnative `mouseover` event for each element.\n##### `editableDrag`\nnative `drag` event for each element.\n##### `editableDrop`\nnative `drop` event for each element.\n##### `editablePaste`\nnative `paste` event for each element.\n"
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 6.9033203125,
          "content": "/*global module, require, process*/\n\nmodule.exports = function (grunt) {\n    'use strict';\n\n    var autoprefixerBrowsers = ['last 3 versions', 'ie >= 9'],\n        globalConfig = {\n            src: 'src',\n            dest: 'dev'\n        },\n        gruntConfig = {\n            pkg: grunt.file.readJSON('package.json'),\n            globalConfig: globalConfig\n        },\n        srcFiles = [\n            'src/js/globals.js',\n            'src/js/util.js',\n            'src/js/extension.js',\n            'src/js/selection.js',\n            'src/js/events.js',\n            'src/js/extensions/button.js',\n            'src/js/defaults/buttons.js',\n            'src/js/extensions/form.js',\n            'src/js/extensions/anchor.js',\n            'src/js/extensions/anchor-preview.js',\n            'src/js/extensions/auto-link.js',\n            'src/js/extensions/file-dragging.js',\n            'src/js/extensions/keyboard-commands.js',\n            'src/js/extensions/fontname.js',\n            'src/js/extensions/fontsize.js',\n            'src/js/extensions/paste.js',\n            'src/js/extensions/placeholder.js',\n            'src/js/extensions/toolbar.js',\n            'src/js/extensions/deprecated/image-dragging.js',\n            'src/js/core.js',\n            'src/js/defaults/options.js',\n            'src/js/version.js'\n        ];\n    gruntConfig.connect = {\n        server: {\n            options: {\n                base: '',\n                port: 9999\n            }\n        }\n    };\n\n    // TODO: build check with debug and devel false\n    gruntConfig.jshint = {\n        options: {\n            ignores: ['src/js/polyfills.js'],\n            jshintrc: true,\n            reporter: require('jshint-stylish')\n        },\n        all: {\n            src: [\n                'src/js/**/*.js',\n                'spec/*.spec.js',\n                'Gruntfile.js'\n            ]\n        }\n    };\n\n    // TODO: \"maximumLineLength\": 120\n    gruntConfig.jscs = {\n        src: [\n            'src/js/**/*.js',\n            'spec/*.spec.js',\n            'Gruntfile.js',\n            '!src/js/polyfills.js'\n        ],\n        options: {\n            config: '.jscsrc'\n        }\n    };\n\n    gruntConfig.karma = {\n        unit: {\n            configFile: 'karma.conf.js'\n        },\n        dev: {\n            configFile: 'karma.dev.conf.js'\n        }\n    };\n\n    gruntConfig.uglify = {\n        options: {\n            report: 'gzip'\n        },\n        build: {\n            src: 'dist/js/medium-editor.js',\n            dest: 'dist/js/<%= pkg.name %>.min.js'\n        }\n    };\n\n    gruntConfig.csslint = {\n        strict: {\n            options: {\n                'box-sizing': false,\n                'compatible-vendor-prefixes': false,\n                'fallback-colors': false,\n                'gradients': false,\n                'important': false,\n                'import': 2,\n                'outline-none': false,\n                'adjoining-classes': false\n            },\n            src: 'dist/css/**/*.css'\n        }\n    };\n\n    gruntConfig.sass = {\n        dist: {\n            options: {\n                includePaths: ['src/sass/']\n            },\n            files: {\n                'dist/css/medium-editor.css': 'src/sass/medium-editor.scss',\n                'dist/css/themes/bootstrap.css': 'src/sass/themes/bootstrap.scss',\n                'dist/css/themes/default.css': 'src/sass/themes/default.scss',\n                'dist/css/themes/flat.css': 'src/sass/themes/flat.scss',\n                'dist/css/themes/mani.css': 'src/sass/themes/mani.scss',\n                'dist/css/themes/roman.css': 'src/sass/themes/roman.scss',\n                'dist/css/themes/tim.css': 'src/sass/themes/tim.scss',\n                'dist/css/themes/beagle.css': 'src/sass/themes/beagle.scss'\n            }\n        }\n    };\n\n    gruntConfig.cssmin = {\n        main: {\n            options: {\n                noAdvanced: true\n            },\n\n            expand: true,\n            cwd: 'dist/css/',\n            src: ['*.css', '!*.min.css'],\n            dest: 'dist/css/',\n            ext: '.min.css'\n        },\n        themes: {\n            options: {\n                noAdvanced: true\n            },\n\n            expand: true,\n            cwd: 'dist/css/themes/',\n            src: ['*.css', '!*.min.css'],\n            dest: 'dist/css/themes/',\n            ext: '.min.css'\n        }\n    };\n\n    gruntConfig.autoprefixer = {\n        main: {\n            expand: true,\n            cwd: 'dist/css/',\n            src: ['*.css', '!*.min.css'],\n            dest: 'dist/css/',\n            browsers: autoprefixerBrowsers\n        },\n        themes: {\n            expand: true,\n            cwd: 'dist/css/themes/',\n            src: ['*.css', '!*.min.css'],\n            dest: 'dist/css/themes/',\n            browsers: autoprefixerBrowsers\n        }\n    };\n\n    gruntConfig.watch = {\n        scripts: {\n            files: ['src/js/**/*.js', 'spec/**/*.js', 'Gruntfile.js'],\n            tasks: ['js'],\n            options: {\n                debounceDelay: 250\n            }\n        },\n        styles: {\n            files: 'src/sass/**/*.scss',\n            tasks: ['css'],\n            options: {\n                debounceDelay: 250\n            }\n        }\n    };\n\n    gruntConfig.concat = {\n        options: {\n            stripBanners: true\n        },\n        dist: {\n            src: ['src/js/polyfills.js']\n                .concat(['src/wrappers/start.js'])\n                .concat(srcFiles)\n                .concat(['src/wrappers/end.js']),\n            dest: 'dist/js/<%= pkg.name %>.js',\n            nonull: true\n        }\n    };\n\n    gruntConfig.plato = {\n        feed: {\n            files: {\n                'reports/plato': srcFiles\n            }\n        }\n    };\n\n    gruntConfig.bump = {\n        options: {\n            files: ['package.json', 'src/js/version.js'],\n            updateConfigs: [],\n            commit: false,\n            createTag: false,\n            push: false\n        }\n    };\n\n    grunt.initConfig(gruntConfig);\n\n    require('time-grunt')(grunt);\n    require('load-grunt-tasks')(grunt, {\n        pattern: [\n            'grunt-*',\n            '!grunt-template-jasmine-istanbul'\n        ]\n    });\n\n    if (parseInt(process.env.TRAVIS_PULL_REQUEST, 10) > 0) {\n        grunt.registerTask('travis', ['jshint', 'jscs', 'karma:unit', 'csslint']);\n    } else {\n        grunt.registerTask('travis', ['jshint', 'jscs', 'csslint', 'karma:unit']);\n    }\n\n    grunt.registerTask('test', ['jshint', 'jscs', 'concat', 'csslint', 'karma:dev']);\n    grunt.registerTask('js', ['jshint', 'jscs', 'concat', 'karma:dev', 'uglify']);\n    grunt.registerTask('css', ['sass', 'autoprefixer', 'cssmin', 'csslint']);\n    grunt.registerTask('default', ['js', 'css']);\n\n    grunt.registerTask('spec', 'Runs a task on a specified file', function (taskName, fileName) {\n        globalConfig.file = fileName;\n        grunt.task.run(taskName + ':spec');\n    });\n\n    grunt.registerTask('patch', ['bump', 'css', 'js']);\n    grunt.registerTask('minor', ['bump:minor', 'css', 'js']);\n    grunt.registerTask('major', ['bump:major', 'css', 'js']);\n};"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.54296875,
          "content": "Copyright Davi Ferreira, https://www.daviferreira.com/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/yabwe/medium-editor\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nAll files located in the node_modules directory are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 2.4912109375,
          "content": "## STEPS TO RELEASE:\n\n1. Find the last release commit in log history. Look through all the commits or PR history and see all the stuff that has happened since the last release.\n2. Add a row describing each high-level change into `CHANGES.md`. Looking at `CHANGES.md` would be a good stepping off point.\n3. Depending upon the changes, decide if it is a major/minor/patch release. _Read more about [semantic versioning](http://semver.org/)_.\n4. Depending upon the type of release, run `grunt major`, `grunt minor`, `grunt patch` to update the version number and generate all the dist files.\n5. Commit all your changes (**including `CHANGES.md`**) into your commit. Add the new release number into your commit message. And push it up to the remote master branch.\n6. Go [here](https://github.com/yabwe/medium-editor/releases) and ‘Draft a new release’. Title the release as the new release number (ex: `5.11.0`). Copy/paste the entries you made in `CHANGES.md` into the release summary. **Make sure the release is against the master branch.**\n7. Once the release is created, go back to your git and run `npm publish`.\n\n\n## RUNNING TESTS FOR FORK BRANCHES IN SAUCELABS:\n\nFor pull requests submitted from a forked version of the repo, the test suite won't run in Saucelabs so we haven't been able to know if tests fail in various browsers until after the PR is merged into master.  This is deliberate by Saucelabs as a security measure to prevent external forks from doing malicious things to the repo.\n\nThere is a workaround however, so when a PR is submitted from an external fork, follow these steps to verify the tests don't fail in Saucelabs before merging the PR into master.\n\nFor this example, let's assume there's a new pull request (#123) from a branch of an external user's fork (external-user/new-branch)\n\n1. Create a new local branch for the pull request\n  * ```git checkout -b integration-123```\n2. Add a remote that points to the external fork\n  * ```git remote add external-user git@github.com:external-user/medium-editor.git```\n3. Fetch the remote repo\n  * ```git fetch external-user```\n4. Merge the external branch into your local branch\n  * ```git merge external-user/new-branch```\n5. Push your local branch up to the main repo\n  * ```git push```\n\nThat's it.  Pushing the branch up should kick off a travis build, which will cause the tests to run in Saucelabs.  Github is smart enough to link the existing pull request to that build and reflect the status of the build (including the results from Saucelabs) on the PR summary page!\n\n\n"
        },
        {
          "name": "OPTIONS.md",
          "type": "blob",
          "size": 20.21875,
          "content": "# MediumEditor Options (v5.0.0)\n\nOptions to customize medium-editor are passed as the second argument to the [MediumEditor constructor](API.md#mediumeditorelements-options).  Example:\n\n```js\nvar editor = new MediumEditor('.editor', {\n    // options go here\n});\n```\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Core Options](#core-options)\n    - [`activeButtonClass`](#activebuttonclass)\n    - [`buttonLabels`](#buttonlabels)\n    - [`contentWindow`](#contentwindow)\n    - [`delay`](#delay)\n    - [`disableReturn`](#disablereturn)\n    - [`disableDoubleReturn`](#disabledoublereturn)\n    - [`disableExtraSpaces`](#disableextraspaces)\n    - [`disableEditing`](#disableediting)\n    - [`elementsContainer`](#elementscontainer)\n    - [`extensions`](#extensions)\n    - [`ownerDocument`](#ownerdocument)\n    - [`spellcheck`](#spellcheck)\n    - [`targetBlank`](#targetblank)\n- [Toolbar options](#toolbar-options)\n    - [`allowMultiParagraphSelection`](#allowmultiparagraphselection)\n    - [`buttons`](#buttons)\n    - [`diffLeft`](#diffleft)\n    - [`diffTop`](#difftop)\n    - [`firstButtonClass`](#firstbuttonclass)\n    - [`lastButtonClass`](#lastbuttonclass)\n    - [`relativeContainer`](#relativecontainer)\n    - [`standardizeSelectionStart`](#standardizeselectionstart)\n    - [`static`](#static)\n  - ['static' Toolbar Options](#static-toolbar-options)\n    - [`align`](#align)\n    - [`sticky`](#sticky)\n    - [`stickyTopOffset`](#stickytopoffset)\n    - [`updateOnEmptySelection`](#updateonemptyselection)\n  - [Disabling Toolbar](#disabling-toolbar)\n- [Anchor Preview options](#anchor-preview-options)\n    - [`hideDelay`](#hidedelay)\n    - [`previewValueSelector`](#previewvalueselector)\n    - [`showOnEmptyLinks`](#showonemptylinks)\n    - [`showWhenToolbarIsVisible`](#showwhentoolbarisvisible)\n  - [Disabling Anchor Preview](#disabling-anchor-preview)\n- [Placeholder Options](#placeholder-options)\n    - [`text`](#text)\n    - [`hideOnClick`](#hideonclick)\n  - [Disabling Placeholders](#disabling-placeholders)\n- [Anchor Form options](#anchor-form-options)\n    - [`customClassOption`](#customclassoption)\n    - [`customClassOptionText`](#customclassoptiontext)\n    - [`linkValidation`](#linkvalidation)\n    - [`placeholderText`](#placeholdertext)\n    - [`targetCheckbox`](#targetcheckbox)\n    - [`targetCheckboxText`](#targetcheckboxtext)\n- [Paste Options](#paste-options)\n    - [`forcePlainText`](#forceplaintext)\n    - [`cleanPastedHTML`](#cleanpastedhtml)\n    - [`cleanReplacements`](#cleanreplacements)\n    - [`cleanAttrs`](#cleanattrs)\n    - [`cleanTags`](#cleantags)\n    - [`unwrapTags`](#unwraptags)\n  - [Disabling Paste Handling](#disabling-paste-handling)\n- [KeyboardCommands Options](#keyboardcommands-options)\n    - [`commands`](#commands)\n  - [Disabling Keyboard Commands](#disabling-keyboard-commands)\n- [Auto Link Options](#auto-link-options)\n    - [`autoLink`](#autolink)\n  - [Enabling Auto Link](#enabling-auto-link)\n- [Image Dragging Options](#image-dragging-options)\n    - [`imageDragging`](#imagedragging)\n  - [Disabling Image Dragging](#disabling-image-dragging)\n- [Options Example:](#options-example)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Core Options\n\nThese are global options that apply to the entire editor. Example:\n\n```js\nvar editor = new MediumEditor('.editable', {\n    /* These are the default options for the editor,\n        if nothing is passed this is what is used */\n    activeButtonClass: 'medium-editor-button-active',\n    allowMultiParagraphSelection: true,\n    buttonLabels: false,\n    contentWindow: window,\n    delay: 0,\n    disableReturn: false,\n    disableDoubleReturn: false,\n    disableExtraSpaces: false,\n    disableEditing: false,\n    elementsContainer: false,\n    extensions: {},\n    ownerDocument: document,\n    spellcheck: true,\n    targetBlank: false\n});\n```\n\n#### `activeButtonClass`\n**Default:** `'medium-editor-button-active'`\n\nCSS class added to active buttons in the toolbar.\n\n***\n#### `buttonLabels`\n**Default:** `false`\n\nCustom content for the toolbar buttons.\n\n**Valid Values:**\n* `false`\n  * Use default button labels\n* `'fontawesome'`\n  * Uses fontawesome icon set for all toolbar icons\n\n**NOTE**:\n\nUsing `'fontawesome'` as the buttonLabels requires version 4.1.0 of the fontawesome css to be on the page to ensure all icons will be displayed correctly.\n\n***\n#### `contentWindow`\n**Default:** `window`\n\nThe contentWindow object that contains the contenteditable element. MediumEditor will use this for attaching events, getting selection, etc.\n\n***\n#### `delay`\n**Default:** `0`\n\nTime in milliseconds to show the toolbar or anchor tag preview.\n\n***\n#### `disableReturn`\n**Default:** `false`\n\nEnables/disables the use of the return-key. You can also set specific element behavior by using setting a data-disable-return attribute.\n\n***\n#### `disableDoubleReturn`\n**Default:** `false`\n\nAllows/disallows two (or more) empty new lines. You can also set specific element behavior by using setting a data-disable-double-return attribute.\n\n***\n#### `disableExtraSpaces`\n**Default:** `false`\n\nWhen set to true, it disallows spaces at the beginning and end of the element. Also it disallows entering 2 consecutive spaces between 2 words.\n\n***\n#### `disableEditing`\n**Default:** `false`\n\nEnables/disables adding the contenteditable behavior. Useful for using the toolbar with customized buttons/actions. You can also set specific element behavior by using setting a data-disable-editing attribute.\n\n***\n#### `elementsContainer`\n**Default:** `ownerDocument.body`\n\nSpecifies a DOM node to contain MediumEditor's toolbar and anchor preview elements.\n\n***\n#### `extensions`\n**Default:** `{}`\n\nCustom extensions to use. See [Custom Buttons and Extensions](src/js/extensions) for more details on extensions.\n\n***\n#### `ownerDocument`\n**Default:** `window.document`\n\nThe ownerDocument object for the contenteditable element.  MediumEditor will use this for creating elements, getting selection, attaching events, etc.\n\n***\n#### `spellcheck`\n**Default:** `true`\n\nEnable/disable native contentEditable automatic spellcheck.\n\n***\n#### `targetBlank`\n**Default:** `false`\n\nEnables/disables automatically adding the `target=\"_blank\"` attribute to anchor tags.\n\n## Toolbar options\n\nThe toolbar for MediumEditor is implemented as a built-in extension which automatically displays whenever the user selects some text.  The toolbar can hold any set of defined built-in buttons, but can also hold any custom buttons passed in as extensions.\n\nOptions for the toolbar are passed as an object that is a member of the outer options object. Example:\n```js\nvar editor = new MediumEditor('.editable', {\n    toolbar: {\n        /* These are the default options for the toolbar,\n           if nothing is passed this is what is used */\n        allowMultiParagraphSelection: true,\n        buttons: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3', 'quote'],\n        diffLeft: 0,\n        diffTop: -10,\n        firstButtonClass: 'medium-editor-button-first',\n        lastButtonClass: 'medium-editor-button-last',\n        relativeContainer: null,\n        standardizeSelectionStart: false,\n        static: false,\n\n        /* options which only apply when static is true */\n        align: 'center',\n        sticky: false,\n        updateOnEmptySelection: false\n    }\n});\n```\n\n***\n#### `allowMultiParagraphSelection`\n**Default:** `true`\n\nenables/disables whether the toolbar should be displayed when selecting multiple paragraphs/block elements.\n\n***\n#### `buttons`\n**Default:** `['bold', 'italic', 'underline', 'anchor', 'h2', 'h3', 'quote']`\n\nThe set of buttons to display on the toolbar.\n\n***\n#### `diffLeft`\n**Default:** `0`\n\nValue in pixels to be added to the X axis positioning of the toolbar.\n\n***\n#### `diffTop`\n**Default:** `-10`\n\nValue in pixels to be added to the Y axis positioning of the toolbar.\n\n***\n#### `firstButtonClass`\n**Default:** `'medium-editor-button-first'`\n\nCSS class added to the first button in the toolbar.\n\n***\n#### `lastButtonClass`\n**Default:** `'medium-editor-button-last'`\n\nCSS class added to the last button in the toolbar.\n\n***\n#### `relativeContainer`\n**Default:** `null`\n\nDOMElement to append the toolbar to instead of the body.  When an element is passed the toolbar will also be positioned `relative` instead of `absolute`, which means the editor will not attempt to manually position the toolbar automatically.\n\n**NOTE:**\n* Using this in combination with the `static` option for toolbar is not explicitly supported and the behavior in this case is not defined.\n\n***\n#### `standardizeSelectionStart`\n**Default:** `false`\n\nEnables/disables standardizing how the beginning of a range is decided between browsers whenever the selected text is analyzed for updating toolbar buttons status.\n\n***\n#### `static`\n**Default:** `false`\n\nEnable/disable the toolbar always displaying in the same location relative to the medium-editor element.\n\n\n### 'static' Toolbar Options\n\nThese options only apply when the `static` option is being used.\n\n***\n#### `align`\n**Default:** `center`\n\nWhen the __static__ option is `true`, this aligns the static toolbar relative to the medium-editor element.\n\n**Valid Values**\n\n`'left'` | `'center'` | `'right'`\n\n***\n#### `sticky`\n**Default:** `false`\n\nWhen the __static__ option is `true`, this enables/disables the toolbar \"sticking\" to the viewport and staying visible on the screen while the page scrolls.\n\n***\n#### `stickyTopOffset`\n**Default:** `0`\n\nWhen the __sticky__ option is `true`, this set in pixel a top offset above the toolbar.\n\n***\n#### `updateOnEmptySelection`\n**Default:** `false`\n\nWhen the __static__ option is `true`, this enables/disables updating the state of the toolbar buttons even when the selection is collapsed (there is no selection, just a cursor).\n\n### Disabling Toolbar\n\nTo disable the toolbar (which also disables the anchor-preview extension), set the value of the `toolbar` option to `false`:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    toolbar: false\n});\n```\n\n\n## Anchor Preview options\n\nThe anchor preview is a built-in extension which automatically displays a 'tooltip' when the user is hovering over a link in the editor.  The tooltip will display the `href` of the link, and when click, will open the anchor editing form in the toolbar.\n\nOptions for the anchor preview 'tooltip' are passed as an object that is a member of the outer options object. Example:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    anchorPreview: {\n        /* These are the default options for anchor preview,\n           if nothing is passed this is what it used */\n        hideDelay: 500,\n        previewValueSelector: 'a'\n    }\n}\n});\n```\n\n\n***\n#### `hideDelay`\n**Default:** `500`\n\nTime in milliseconds to show the anchor tag preview after the mouse has left the anchor tag.\n\n***\n#### `previewValueSelector`\n**Default:** `'a'`\n\nThe default selector to locate where to put the activeAnchor value in the preview. You should only need to override this if you've modified the way in which the anchor-preview extension renders.\n\n***\n#### `showOnEmptyLinks`\n**Default:** `true`\n\nDetermines whether the anchor tag preview shows up on link with href as \"\" or \"#something\". You should set this value to false if you do not want the preview to show up in such use cases.\n\n***\n#### `showWhenToolbarIsVisible`\n**Default:** `false`\n\nDetermines whether the anchor tag preview shows up when the toolbar is visible. You should set this value to true if the static option for the toolbar is true and you want the preview to show at the same time.\n\n### Disabling Anchor Preview\n\nTo disable the anchor preview, set the value of the `anchorPreview` option to `false`:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    anchorPreview: false\n});\n```\n\n**NOTE:**\n\n* If the toolbar is disabled (via `toolbar: false` option or `data-disable-toolbar` attribute) the anchor-preview is automatically disabled.\n* If the anchor editing form is not enabled, clicking on the anchor-preview will not allow the href of the link to be edited\n\n## Placeholder Options\n\nThe placeholder handler is a built-in extension which displays placeholder text when the editor is empty.\n\nOptions for placeholder are passed as an object that is a member of the outer options object. Example:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    placeholder: {\n        /* This example includes the default options for placeholder,\n           if nothing is passed this is what it used */\n        text: 'Type your text',\n        hideOnClick: true\n    }\n});\n```\n\n\n***\n#### `text`\n**Default:** `'Type your text'`\n\nDefines the default placeholder for empty contenteditables when __placeholder__ is not set to false. You can overwrite it by setting a `data-placeholder` attribute on the editor elements.\n\n***\n#### `hideOnClick`\n**Default:** `true`\n\nCauses the placeholder to disappear as soon as the field gains focus. To hide the placeholder only after starting to type, and to show it again as soon as field is empty, set this option to `false`.\n\n\n### Disabling Placeholders\n\nTo disable the placeholder, set the value of the `placeholder` option to `false`:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    placeholder: false\n});\n```\n\n## Anchor Form options\n\nThe anchor form is a built-in button extension which allows the user to add/edit/remove links from within the editor.  When 'anchor' is passed in as a button in the list of buttons, this extension will be enabled and can be triggered by clicking the corresponding button in the toolbar.\n\nOptions for the anchor form are passed as an object that is a member of the outer options object. Example:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    toolbar: {\n        buttons: ['bold', 'italic', 'underline', 'anchor']\n    },\n    anchor: {\n        /* These are the default options for anchor form,\n           if nothing is passed this is what it used */\n        customClassOption: null,\n        customClassOptionText: 'Button',\n        linkValidation: false,\n        placeholderText: 'Paste or type a link',\n        targetCheckbox: false,\n        targetCheckboxText: 'Open in new window'\n    }\n}\n});\n```\n\n\n***\n#### `customClassOption`\n**Default:** `null`\n\nCustom class name the user can optionally have added to their created links (ie 'button').  If passed as a non-empty string, a checkbox will be displayed allowing the user to choose whether to have the class added to the created link or not.\n\n***\n#### `customClassOptionText`\n**Default:** `'Button'`\n\nText to be shown in the checkbox when the __customClassOption__ is being used.\n\n***\n#### `linkValidation`\n**Default:** `false`\n\nEnables/disables check for common URL protocols on anchor links. Converts invalid url characters (ie spaces) to valid characters using `encodeURI`\n\n***\n#### `placeholderText`\n**Default:** `'Paste or type a link'`\n\nText to be shown as placeholder of the anchor input.\n\n***\n#### `targetCheckbox`\n**Default:** `false`\n\nEnables/disables displaying a \"Open in new window\" checkbox, which when checked changes the `target` attribute of the created link.\n\n***\n#### `targetCheckboxText`\n**Default:** `'Open in new window'`\n\nText to be shown in the checkbox enabled via the __targetCheckbox__ option.\n\n## Paste Options\n\nThe paste handler is a built-in extension which attempts to filter the content when the user pastes.  How the paste handler filters is configurable via specific options.\n\nOptions for paste handling are passed as an object that is a member of the outer options object. Example:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    paste: {\n        /* This example includes the default options for paste,\n           if nothing is passed this is what it used */\n        forcePlainText: true,\n        cleanPastedHTML: false,\n        cleanReplacements: [],\n        cleanAttrs: ['class', 'style', 'dir'],\n        cleanTags: ['meta']\n    }\n});\n```\n\n\n***\n#### `forcePlainText`\n**Default:** `true`\n\nForces pasting as plain text.\n\n***\n#### `cleanPastedHTML`\n**Default:** `false`\n\nCleans pasted content from different sources, like google docs etc.\n\n***\n#### `cleanReplacements`\n**Default:** `[]`\n\nCustom pairs (2 element arrays) of RegExp and replacement text to use during paste when __forcePlainText__ or __cleanPastedHTML__ are `true` OR when calling `cleanPaste(text)` helper method.\n\n***\n#### `cleanAttrs`\n**Default:** `['class', 'style', 'dir']`\n\nList of element attributes to remove during paste when __cleanPastedHTML__ is `true` or when calling `cleanPaste(text)` or `pasteHTML(html,options)` helper methods.\n\n***\n#### `cleanTags`\n**Default:** `['meta']`\n\nList of element tag names to remove during paste when __cleanPastedHTML__ is `true` or when calling `cleanPaste(text)` or `pasteHTML(html,options)` helper methods.\n\n***\n#### `unwrapTags`\n**Default:** `[]`\n\nList of element tag names to unwrap (remove the element tag but retain its child elements) during paste when __cleanPastedHTML__ is `true` or when calling `cleanPaste(text)` or `pasteHTML(html,options)` helper methods.\n\n***\n### Disabling Paste Handling\n\nTo disable MediumEditor manipulating pasted content, set the both the `forcePlainText` and `cleanPastedHTML` options to `false`:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    paste: {\n        forcePlainText: false,\n        cleanPastedHTML: false\n    }\n});\n```\n\n## KeyboardCommands Options\n\nThe keyboard commands handler is a built-in extension for mapping key-combinations to actions to execute in the editor.\n\nOptions for KeyboardCommands are passed as an object that is a member of the outer options object. Example:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    keyboardCommands: {\n        /* This example includes the default options for keyboardCommands,\n           if nothing is passed this is what it used */\n        commands: [\n            {\n                command: 'bold',\n                key: 'b',\n                meta: true,\n                shift: false\n            },\n            {\n                command: 'italic',\n                key: 'i',\n                meta: true,\n                shift: false\n            },\n            {\n                command: 'underline',\n                key: 'u',\n                meta: true,\n                shift: false\n            }\n        ],\n    }\n});\n```\n\n\n***\n#### `commands`\n**Default:** shortcuts for `bold`, `italic`, and `underline` (See above example)\n\nArray of objects describing each command and the combination of keys that will trigger it.  Required for each object:\n  * _command_: argument passed to `editor.execAction()` when key-combination is used\n  * _key_: keyboard character that triggers this command\n  * _meta_: whether the ctrl/meta key has to be active or inactive\n  * _shift_: whether the shift key has to be active or inactive\n\n### Disabling Keyboard Commands\n\nTo disable the keyboard commands, set the value of the `keyboardCommands` option to `false`:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    keyboardCommands: false\n});\n```\n\n## Auto Link Options\n\n#### `autoLink`\n**Default:** `false`\n\nThe auto-link handler is a built-in extension which automatically turns URLs entered into the text field into HTML anchor tags (similar to the functionality of Markdown).  This feature is OFF by default.\n\n### Enabling Auto Link\n\nTo enable built-in auto-link support, set the value of the `autoLink` option to `true`:\n\n```javascript\nvar editor = new MediumEditor('.editable', {\n    autoLink: true\n});\n```\n\n## Image Dragging Options\n\n#### `imageDragging`\n**Default:** `true`\n\nThe image dragging handler is a built-in extension for handling dragging & dropping images into the contenteditable.  This feature is ON by default.\n\n### Disabling Image Dragging\n\nTo disable built-in image dragging, set the value of the `imageDragging` option to `false`:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    imageDragging: false\n});\n```\n\n## Options Example:\n\n```javascript\nvar editor = new MediumEditor('.editable', {\n    delay: 1000,\n    targetBlank: true,\n    toolbar: {\n        buttons: ['bold', 'italic', 'quote'],\n        diffLeft: 25,\n        diffTop: 10,\n    },\n    anchor: {\n        placeholderText: 'Type a link',\n        customClassOption: 'btn',\n        customClassOptionText: 'Create Button'\n    },\n    paste: {\n        cleanPastedHTML: true,\n        cleanAttrs: ['style', 'dir'],\n        cleanTags: ['label', 'meta']\n    },\n    anchorPreview: {\n        hideDelay: 300\n    },\n    placeholder: {\n        text: 'Click to edit'\n    }\n});\n```\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 35.875,
          "content": "﻿![medium-editor needs help!](https://user-images.githubusercontent.com/2444240/56086015-c42e3000-5e1b-11e9-9692-b97816f67712.png)\n\nIf you would be interested in helping to maintain one of the most successful WYSIWYG text editors on github, let us know!  (See issue [#1503](https://github.com/yabwe/medium-editor/issues/1503))\n\n# MediumEditor\n\nThis is a clone of [medium.com](https://medium.com) inline editor toolbar.\n\nMediumEditor has been written using vanilla JavaScript, no additional frameworks required.\n\n[![screenshot](https://raw.github.com/yabwe/medium-editor/master/demo/img/medium-editor.jpg)](http://yabwe.github.io/medium-editor/)\n\n[![Join the chat at https://gitter.im/yabwe/medium-editor](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/yabwe/medium-editor?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n## Browser Support\n\n[![Saucelabs Build Status](https://saucelabs.com/browser-matrix/mediumeditor.svg)](https://saucelabs.com/beta/dashboard/builds)\n\n![Supported Browsers](https://cloud.githubusercontent.com/assets/2444240/12874138/d3960a04-cd9b-11e5-8cc5-8136d82cf5f6.png)\n\n[![NPM info](https://nodei.co/npm/medium-editor.png?downloads=true)](https://www.npmjs.com/package/medium-editor)\n\n[![Travis build status](https://travis-ci.org/yabwe/medium-editor.svg?branch=master)](https://travis-ci.org/yabwe/medium-editor)\n[![Dependency Status](https://david-dm.org/yabwe/medium-editor.svg)](https://david-dm.org/yabwe/medium-editor)\n[![devDependency Status](https://david-dm.org/yabwe/medium-editor/dev-status.svg)](https://david-dm.org/yabwe/medium-editor#info=devDependencies)\n[![Coverage Status](https://coveralls.io/repos/yabwe/medium-editor/badge.svg?branch=master&service=github)](https://coveralls.io/github/yabwe/medium-editor?branch=master)\n\n# Basic usage\n\n### Demo\n\n__demo__: [http://yabwe.github.io/medium-editor/](http://yabwe.github.io/medium-editor/)\n\n### Installation\n\n**Via npm:**\n\nRun in your console: `npm install medium-editor`\n\n**Via bower:**\n\n`bower install medium-editor`\n\n**Via an external CDN**\n\n* Using [jsDelivr](http://www.jsdelivr.com/#!medium-editor).\n\n For the latest version:\n\n ```html\n <script src=\"//cdn.jsdelivr.net/npm/medium-editor@latest/dist/js/medium-editor.min.js\"></script>\n <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/medium-editor@latest/dist/css/medium-editor.min.css\" type=\"text/css\" media=\"screen\" charset=\"utf-8\">\n ```\n\n For a custom one:\n\n ```html\n <script src=\"//cdn.jsdelivr.net/npm/medium-editor@5.23.2/dist/js/medium-editor.min.js\"></script>\n <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/medium-editor@5.23.2/dist/css/medium-editor.min.css\" type=\"text/css\" media=\"screen\" charset=\"utf-8\">\n ```\n\n* Using [CDNJS](https://cdnjs.com/libraries/medium-editor).\n\n**Manual installation:**\n\nDownload the [latest release](https://github.com/yabwe/medium-editor/releases) and attach medium editor's stylesheets to your page:\n\nFind the files to below mentioned linking in the dist folder. (./medium-editor/dist/...)\n\n```html\n<link rel=\"stylesheet\" href=\"css/medium-editor.css\"> <!-- Core -->\n<link rel=\"stylesheet\" href=\"css/themes/default.css\"> <!-- or any other theme -->\n```\n\n### Usage\n\nThe next step is to reference the editor's script\n\n```html\n<script src=\"js/medium-editor.js\"></script>\n```\n\nYou can now instantiate a new MediumEditor object:\n```html\n<script>var editor = new MediumEditor('.editable');</script>\n```\n\nThe above code will transform all the elements with the .editable class into HTML5 editable contents and add the medium editor toolbar to them.\n\nYou can also pass a list of HTML elements:\n\n```javascript\nvar elements = document.querySelectorAll('.editable'),\n    editor = new MediumEditor(elements);\n```\n\nMediumEditor also supports textarea. If you provide a textarea element, the script will create a new div with `contentEditable=true`, hide the textarea and link the textarea value to the div HTML content.\n\n##### Integrating with various frameworks\n\nPeople have contributed wrappers around MediumEditor for integrating with different frameworks and tech stacks.  Take a look at the list of existing [Wrappers and Integrations](https://github.com/yabwe/medium-editor/wiki/Wrappers-and-Integration) that have already been written for MediumEditor!\n\n## MediumEditor Options\n\nView the [MediumEditor Options documentation](OPTIONS.md) on all the various options for MediumEditor.\n\nOptions to customize medium-editor are passed as the second argument to the [MediumEditor constructor](API.md#mediumeditorelements-options).  Example:\n\n```js\nvar editor = new MediumEditor('.editor', {\n    // options go here\n});\n```\n\n### Core options\n* __activeButtonClass__: CSS class added to active buttons in the toolbar. Default: `'medium-editor-button-active'`\n* __buttonLabels__: type of labels on the buttons. Values: `false` | 'fontawesome'.  Default: `false`\n\n#### NOTE:\nUsing `'fontawesome'` as the buttonLabels requires version 4.1.0 of the fontawesome css to be on the page to ensure all icons will be displayed correctly\n\n* __delay__: time in milliseconds to show the toolbar or anchor tag preview. Default: `0`\n* __disableReturn__:  enables/disables the use of the return-key. You can also set specific element behavior by using setting a data-disable-return attribute. Default: `false`\n* __disableDoubleReturn__:  allows/disallows two (or more) empty new lines. You can also set specific element behavior by using setting a data-disable-double-return attribute. Default: `false`\n* __disableExtraSpaces__:  when set to true, it disallows spaces at the beginning and end of the element. Also it disallows entering 2 consecutive spaces between 2 words. Default: `false`\n* __disableEditing__: enables/disables adding the contenteditable behavior. Useful for using the toolbar with customized buttons/actions. You can also set specific element behavior by using setting a data-disable-editing attribute. Default: `false`\n* __elementsContainer__: specifies a DOM node to contain MediumEditor's toolbar and anchor preview elements. Default: `document.body`\n* __extensions__: extension to use (see [Custom Buttons and Extensions](src/js/extensions)) for more. Default: `{}`\n* __spellcheck__: Enable/disable native contentEditable automatic spellcheck. Default: `true`\n* __targetBlank__: enables/disables target=\"\\_blank\" for anchor tags. Default: `false`\n\n### Toolbar options\n\nThe toolbar for MediumEditor is implemented as a built-in extension which automatically displays whenever the user selects some text.  The toolbar can hold any set of defined built-in buttons, but can also hold any custom buttons passed in as extensions.\n\nOptions for the toolbar are passed as an object that is a member of the outer options object. Example:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    toolbar: {\n        /* These are the default options for the toolbar,\n           if nothing is passed this is what is used */\n        allowMultiParagraphSelection: true,\n        buttons: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3', 'quote'],\n        diffLeft: 0,\n        diffTop: -10,\n        firstButtonClass: 'medium-editor-button-first',\n        lastButtonClass: 'medium-editor-button-last',\n        relativeContainer: null,\n        standardizeSelectionStart: false,\n        static: false,\n        /* options which only apply when static is true */\n        align: 'center',\n        sticky: false,\n        updateOnEmptySelection: false\n    }\n});\n```\n\n* __allowMultiParagraphSelection__: enables/disables whether the toolbar should be displayed when selecting multiple paragraphs/block elements. Default: `true`\n* __buttons__: the set of buttons to display on the toolbar. Default: `['bold', 'italic', 'underline', 'anchor', 'h2', 'h3', 'quote']`\n  * See [Button Options](#button-options) for details on more button options\n* __diffLeft__: value in pixels to be added to the X axis positioning of the toolbar. Default: `0`\n* __diffTop__: value in pixels to be added to the Y axis positioning of the toolbar. Default: `-10`\n* __firstButtonClass__: CSS class added to the first button in the toolbar. Default: `'medium-editor-button-first'`\n* __lastButtonClass__: CSS class added to the last button in the toolbar. Default: `'medium-editor-button-last'`\n* __relativeContainer__: DOMElement to append the toolbar to instead of the body.  When passed, the toolbar will also be positioned `relative` instead of `absolute`. Default: `null`\n* __standardizeSelectionStart__: enables/disables standardizing how the beginning of a range is decided between browsers whenever the selected text is analyzed for updating toolbar buttons status. Default: `false`\n* __static__: enable/disable the toolbar always displaying in the same location relative to the medium-editor element. Default: `false`\n\n##### Options which only apply when the `static` option is being used:\n* __align__: `left`|`center`|`right` - When the __static__ option is `true`, this aligns the static toolbar relative to the medium-editor element. Default: `center`\n* __sticky__: When the __static__ option is `true`, this enables/disables the toolbar \"sticking\" to the viewport and staying visible on the screen while the page scrolls. Default: `false`\n* __updateOnEmptySelection__: When the __static__ option is `true`, this enables/disables updating the state of the toolbar buttons even when the selection is collapsed (there is no selection, just a cursor). Default: `false`\n\nTo disable the toolbar (which also disables the anchor-preview extension), set the value of the `toolbar` option to `false`:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    toolbar: false\n});\n```\n\n#### Button Options\n\nButton behavior can be modified by passing an object into the buttons array instead of a string. This allow for overriding some of the default behavior of buttons. The following options are some of the basic parts of buttons that you may override, but any part of the `MediumEditor.Extension.prototype` can be overridden via these button options. (Check out the [source code for buttons](src/js/extensions/button.js) to see what all can be overridden).\n\n* __name__: name of the button being overridden\n* __action__: argument to pass to `MediumEditor.execAction()` when the button is clicked.\n* __aria__: value to add as the aria-label attribute of the button element displayed in the toolbar. This is also used as the tooltip for the button.\n* __tagNames__: array of element tag names that would indicate that this button has already been applied. If this action has already been applied, the button will be displayed as 'active' in the toolbar.\n  * _Example_: For 'bold', if the text is ever within a `<b>` or `<strong>` tag that indicates the text is already bold. So the array of tagNames for bold would be: `['b', 'strong']`\n  * __NOTE__: This is not used if `useQueryState` is set to `true`.\n* __style__: A pair of css property & value(s) that indicate that this button has already been applied. If this action has already been applied, the button will be displayed as 'active' in the toolbar.\n  * _Example_: For 'bold', if the text is ever within an element with a `'font-weight'` style property set to `700` or `'bold'`, that indicates the text is already bold.  So the style object for bold would be `{ prop: 'font-weight', value: '700|bold' }`\n  * __NOTE__: This is not used if `useQueryState` is set to `true`.\n  * Properties of the __style__ object:\n    * __prop__: name of the css property\n    * __value__: value(s) of the css property (multiple values can be separated by a `'|'`)\n* __useQueryState__: Enables/disables whether this button should use the built-in `document.queryCommandState()` method to determine whether the action has already been applied.  If the action has already been applied, the button will be displayed as 'active' in the toolbar\n  * _Example_: For 'bold', if this is set to true, the code will call `document.queryCommandState('bold')` which will return true if the browser thinks the text is already bold, and false otherwise\n* __contentDefault__: Default `innerHTML` to put inside the button\n* __contentFA__: The `innerHTML` to use for the content of the button if the __buttonLabels__ option for MediumEditor is set to `'fontawesome'`\n* __classList__: An array of classNames (strings) to be added to the button\n* __attrs__: A set of key-value pairs to add to the button as custom attributes to the button element.\n\nExample of overriding buttons (here, the goal is to mimic medium by having <kbd>H1</kbd> and <kbd>H2</kbd> buttons which actually produce `<h2>` and `<h3>` tags respectively):\n```javascript\nvar editor = new MediumEditor('.editable', {\n    toolbar: {\n        buttons: [\n            'bold',\n            'italic',\n            {\n                name: 'h1',\n                action: 'append-h2',\n                aria: 'header type 1',\n                tagNames: ['h2'],\n                contentDefault: '<b>H1</b>',\n                classList: ['custom-class-h1'],\n                attrs: {\n                    'data-custom-attr': 'attr-value-h1'\n                }\n            },\n            {\n                name: 'h2',\n                action: 'append-h3',\n                aria: 'header type 2',\n                tagNames: ['h3'],\n                contentDefault: '<b>H2</b>',\n                classList: ['custom-class-h2'],\n                attrs: {\n                    'data-custom-attr': 'attr-value-h2'\n                }\n            },\n            'justifyCenter',\n            'quote',\n            'anchor'\n        ]\n    }\n});\n```\n\n### Anchor Preview options\n\nThe anchor preview is a built-in extension which automatically displays a 'tooltip' when the user is hovering over a link in the editor.  The tooltip will display the `href` of the link, and when clicked, will open the anchor editing form in the toolbar.\n\nOptions for the anchor preview 'tooltip' are passed as an object that is a member of the outer options object. Example:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    anchorPreview: {\n        /* These are the default options for anchor preview,\n           if nothing is passed this is what it used */\n        hideDelay: 500,\n        previewValueSelector: 'a'\n    }\n}\n});\n```\n\n* __hideDelay__: time in milliseconds to show the anchor tag preview after the mouse has left the anchor tag. Default: `500`\n* __previewValueSelector__: the default selector to locate where to put the activeAnchor value in the preview. You should only need to override this if you've modified the way in which the anchor-preview extension renders. Default: `'a'`\n* __showWhenToolbarIsVisible__: determines whether the anchor tag preview shows up when the toolbar is visible. You should set this value to true if the static option for the toolbar is true and you want the preview to show at the same time. Default: `false`\n* __showOnEmptyLinks__: determines whether the anchor tag preview shows up on link with href as '' or '#something'. You should set this value to false if you do not want the preview to show up in such use cases. Default: `true`\n\nTo disable the anchor preview, set the value of the `anchorPreview` option to `false`:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    anchorPreview: false\n});\n```\n##### NOTE:\n* If the toolbar is disabled (via `toolbar: false` option or `data-disable-toolbar` attribute) the anchor-preview is automatically disabled.\n* If the anchor editing form is not enabled, clicking on the anchor-preview will not allow the href of the link to be edited\n\n### Placeholder Options\n\nThe placeholder handler is a built-in extension which displays placeholder text when the editor is empty.\n\nOptions for placeholder are passed as an object that is a member of the outer options object. Example:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    placeholder: {\n        /* This example includes the default options for placeholder,\n           if nothing is passed this is what it used */\n        text: 'Type your text',\n        hideOnClick: true\n    }\n});\n```\n\n* __text__: Defines the default placeholder for empty contenteditables when __placeholder__ is not set to false. You can overwrite it by setting a `data-placeholder` attribute on the editor elements. Default: `'Type your text'`\n\n* __hideOnClick__: Causes the placeholder to disappear as soon as the field gains focus. Default: `true`.\nTo hide the placeholder only after starting to type, and to show it again as soon as field is empty, set this option to `false`.\n\n\nTo disable the placeholder, set the value of the `placeholder` option to `false`:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    placeholder: false\n});\n```\n\n### Anchor Form options\n\nThe anchor form is a built-in button extension which allows the user to add/edit/remove links from within the editor.  When 'anchor' is passed in as a button in the list of buttons, this extension will be enabled and can be triggered by clicking the corresponding button in the toolbar.\n\nOptions for the anchor form are passed as an object that is a member of the outer options object. Example:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    toolbar: {\n        buttons: ['bold', 'italic', 'underline', 'anchor']\n    },\n    anchor: {\n        /* These are the default options for anchor form,\n           if nothing is passed this is what it used */\n        customClassOption: null,\n        customClassOptionText: 'Button',\n        linkValidation: false,\n        placeholderText: 'Paste or type a link',\n        targetCheckbox: false,\n        targetCheckboxText: 'Open in new window'\n    }\n}\n});\n```\n\n* __customClassOption__: custom class name the user can optionally have added to their created links (ie 'button').  If passed as a non-empty string, a checkbox will be displayed allowing the user to choose whether to have the class added to the created link or not. Default: `null`\n* __customClassOptionText__: text to be shown in the checkbox when the __customClassOption__ is being used. Default: `'Button'`\n* __linkValidation__: enables/disables check for common URL protocols on anchor links. Converts invalid url characters (ie spaces) to valid characters using `encodeURI`. Default: `false`\n* __placeholderText__: text to be shown as placeholder of the anchor input. Default: `'Paste or type a link'`\n* __targetCheckbox__: enables/disables displaying a \"Open in new window\" checkbox, which when checked changes the `target` attribute of the created link. Default: `false`\n* __targetCheckboxText__: text to be shown in the checkbox enabled via the __targetCheckbox__ option. Default: `'Open in new window'`\n\n### Paste Options\n\nThe paste handler is a built-in extension which attempts to filter the content when the user pastes.  How the paste handler filters is configurable via specific options.\n\nOptions for paste handling are passed as an object that is a member of the outer options object. Example:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    paste: {\n        /* This example includes the default options for paste,\n           if nothing is passed this is what it used */\n        forcePlainText: true,\n        cleanPastedHTML: false,\n        cleanReplacements: [],\n        cleanAttrs: ['class', 'style', 'dir'],\n        cleanTags: ['meta'],\n        unwrapTags: []\n    }\n});\n```\n\n* __forcePlainText__: Forces pasting as plain text. Default: `true`\n* __cleanPastedHTML__: cleans pasted content from different sources, like google docs etc. Default: `false`\n* __preCleanReplacements__: custom pairs (2 element arrays) of RegExp and replacement text to use during paste when __forcePlainText__ or __cleanPastedHTML__ are `true` OR when calling `cleanPaste(text)` helper method.  These replacements are executed _before_ builtin replacements.  Default: `[]`\n* __cleanReplacements__: custom pairs (2 element arrays) of RegExp and replacement text to use during paste when __forcePlainText__ or __cleanPastedHTML__ are `true` OR when calling `cleanPaste(text)` helper method.  These replacements are executed _after_ builtin replacements.  Default: `[]`\n* __cleanAttrs__: list of element attributes to remove during paste when __cleanPastedHTML__ is `true` or when calling `cleanPaste(text)` or `pasteHTML(html,options)` helper methods. Default: `['class', 'style', 'dir']`\n* __cleanTags__: list of element tag names to remove during paste when __cleanPastedHTML__ is `true` or when calling `cleanPaste(text)` or `pasteHTML(html,options)` helper methods. Default: `['meta']`\n* __unwrapTags__: list of element tag names to unwrap (remove the element tag but retain its child elements) during paste when __cleanPastedHTML__ is `true` or when calling `cleanPaste(text)` or `pasteHTML(html,options)` helper methods. Default: `[]`\n\n### KeyboardCommands Options\n\nThe keyboard commands handler is a built-in extension for mapping key-combinations to actions to execute in the editor.\n\nOptions for KeyboardCommands are passed as an object that is a member of the outer options object. Example:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    keyboardCommands: {\n        /* This example includes the default options for keyboardCommands,\n           if nothing is passed this is what it used */\n        commands: [\n            {\n                command: 'bold',\n                key: 'B',\n                meta: true,\n                shift: false,\n                alt: false\n            },\n            {\n                command: 'italic',\n                key: 'I',\n                meta: true,\n                shift: false,\n                alt: false\n            },\n            {\n                command: 'underline',\n                key: 'U',\n                meta: true,\n                shift: false,\n                alt: false\n            }\n        ],\n    }\n});\n```\n\n* __commands__: Array of objects describing each command and the combination of keys that will trigger it.  Required for each object:\n  * _command_: argument passed to `editor.execAction()` when key-combination is used\n    * if defined as `false`, the shortcut will be disabled\n  * _key_: keyboard character that triggers this command\n  * _meta_: whether the ctrl/meta key has to be active or inactive\n  * _shift_: whether the shift key has to be active or inactive\n  * _alt_: whether the alt key has to be active or inactive\n\nTo disable the keyboard commands, set the value of the `keyboardCommands` option to `false`:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    keyboardCommands: false\n});\n```\n\n### Auto Link Options\n\nThe auto-link handler is a built-in extension which automatically turns URLs entered into the text field into HTML anchor tags (similar to the functionality of Markdown).  This feature is OFF by default.\n\nTo enable built-in auto-link support, set the value of the `autoLink` option to `true`:\n\n```javascript\nvar editor = new MediumEditor('.editable', {\n    autoLink: true\n});\n```\n\n### Image Dragging Options\n\nThe image dragging handler is a built-in extension for handling dragging & dropping images into the contenteditable.  This feature is ON by default.\n\nTo disable built-in image dragging, set the value of the `imageDragging` option to `false`:\n```javascript\nvar editor = new MediumEditor('.editable', {\n    imageDragging: false\n});\n```\n\n#### Disable File Dragging\nTo stop preventing drag & drop events and disable file dragging in general, provide a dummy ImageDragging extension.\n```javascript\nvar editor = new MediumEditor('.editor', {\n    extensions: {\n        'imageDragging': {}\n    }\n});\n```\nDue to the [state of code](https://github.com/yabwe/medium-editor/issues/966) in 5.0.0, the editor *ALWAYS* prevented any drag and drop actions.\nWe will have a better way to disable file dragging in 6.*\n\n### Options Example:\n\n```javascript\nvar editor = new MediumEditor('.editable', {\n    delay: 1000,\n    targetBlank: true,\n    toolbar: {\n        buttons: ['bold', 'italic', 'quote'],\n        diffLeft: 25,\n        diffTop: 10,\n    },\n    anchor: {\n        placeholderText: 'Type a link',\n        customClassOption: 'btn',\n        customClassOptionText: 'Create Button'\n    },\n    paste: {\n        cleanPastedHTML: true,\n        cleanAttrs: ['style', 'dir'],\n        cleanTags: ['label', 'meta'],\n        unwrapTags: ['sub', 'sup']\n    },\n    anchorPreview: {\n        hideDelay: 300\n    },\n    placeholder: {\n        text: 'Click to edit'\n    }\n});\n```\n\n## Buttons\n\nBy default, MediumEditor supports buttons for most of the commands for `document.execCommand()` that are well-supported across all its supported browsers.\n\n### Default buttons.\n\nMediumEditor, by default, will show only the buttons listed here to avoid a huge toolbar:\n\n* __bold__\n* __italic__\n* __underline__\n* __anchor__ _(built-in support for collecting a URL via the anchor extension)_\n* __h2__\n* __h3__\n* __quote__\n\n### All buttons.\n\nThese are all the built-in buttons supported by MediumEditor.\n\n* __bold__\n* __italic__\n* __underline__\n* __strikethrough__\n* __subscript__\n* __superscript__\n* __anchor__\n* __image__ (this simply converts selected text to an image tag)\n* __quote__\n* __pre__\n* __orderedlist__\n* __unorderedlist__\n* __indent__ (moves the selected text up one level)\n* __outdent__ (moves the selected text down one level)\n* __justifyLeft__\n* __justifyCenter__\n* __justifyRight__\n* __justifyFull__\n* __h1__\n* __h2__\n* __h3__\n* __h4__\n* __h5__\n* __h6__\n* __removeFormat__ (clears inline style formatting, preserves blocks)\n* __html__ (parses selected html and converts into actual html elements)\n\n## Themes\n\nCheck out the Wiki page for a list of available themes: [https://github.com/yabwe/medium-editor/wiki/Themes](https://github.com/yabwe/medium-editor/wiki/Themes)\n\n## API\n\nView the [MediumEditor Object API documentation](API.md) on the Wiki for details on all the methods supported on the MediumEditor object.\n\n### Initialization methods\n* __MediumEditor(elements, options)__:  Creates an instance of MediumEditor\n* __.destroy()__: tears down the editor if already setup, removing all DOM elements and event handlers\n* __.setup()__: rebuilds the editor if it has already been destroyed, recreating DOM elements and attaching event handlers\n* __.addElements()__: add elements to an already initialized instance of MediumEditor\n* __.removeElements()__: remove elements from an already initialized instance of MediumEditor\n\n### Event Methods\n* __.on(target, event, listener, useCapture)__: attach a listener to a DOM event which will be detached when MediumEditor is deactivated\n* __.off(target, event, listener, useCapture)__: detach a listener to a DOM event that was attached via `on()`\n* __.subscribe(event, listener)__: attaches a listener to a custom medium-editor event\n* __.unsubscribe(event, listener)__: detaches a listener from a custom medium-editor event\n* __.trigger(name, data, editable)__: manually triggers a custom medium-editor event\n\n### Selection Methods\n* __.checkSelection()__: manually trigger an update of the toolbar and extensions based on the current selection\n* __.exportSelection()__: return a data representation of the selected text, which can be applied via `importSelection()`\n* __.importSelection(selectionState)__: restore the selection using a data representation of previously selected text (ie value returned by `exportSelection()`)\n* __.getFocusedElement()__: returns an element if any contenteditable element monitored by MediumEditor currently has focused\n* __.getSelectedParentElement(range)__: get the parent contenteditable element that contains the current selection\n* __.restoreSelection()__: restore the selection to what was selected when `saveSelection()` was called\n* __.saveSelection()__: internally store the set of selected text\n* __.selectAllContents()__: expands the selection to contain all text within the focused contenteditable\n* __.selectElement(element)__: change selection to be a specific element and update the toolbar to reflect the selection\n* __.stopSelectionUpdates()__: stop the toolbar from updating to reflect the state of the selected text\n* __.startSelectionUpdates()__: put the toolbar back into its normal updating state\n\n### Editor Action Methods\n* __.cleanPaste(text)__: convert text to plaintext and replace current selection with result\n* __.createLink(opts)__: creates a link via the native `document.execCommand('createLink')` command\n* __.execAction(action, opts)__: executes an built-in action via `document.execCommand`\n* __.pasteHTML(html, options)__: replace the current selection with html\n* __.queryCommandState(action)__: wrapper around the browser's built in `document.queryCommandState(action)` for checking whether a specific action has already been applied to the selection.\n\n### Helper Methods\n* __.delay(fn)__: delay any function from being executed by the amount of time passed as the `delay` option\n* __.getContent(index)__: gets the trimmed `innerHTML` of the element at `index`\n* __.getExtensionByName(name)__: get a reference to an extension with the specified name\n* __.resetContent(element)__: reset the content of all elements or a specific element to its value when added to the editor initially\n* __.serialize()__: returns a JSON object with elements contents\n* __.setContent(html, index)__: sets the `innerHTML` to `html` of the element at `index`\n\n### Static Methods/Properties\n* __.getEditorFromElement(element)__: retrieve the instance of MediumEditor that is monitoring the provided editor element\n* __.version__: the version information for the MediumEditor library\n\n## Dynamically add/remove elements to your instance\n\nIt is possible to dynamically add new elements to your existing MediumEditor instance:\n\n```javascript\nvar editor = new MediumEditor('.editable');\neditor.subscribe('editableInput', this._handleEditableInput.bind(this));\n\n// imagine an ajax fetch/any other dynamic functionality which will add new '.editable' elements to the DOM\n\neditor.addElements('.editable');\n// OR editor.addElements(document.getElementsByClassName('editable'));\n// OR editor.addElements(document.querySelectorAll('.editable'));\n```\n\nPassing an elements or array of elements to `addElements(elements)` will:\n* Add the given element or array of elements to the internal `this.elements` array.\n* Ensure the element(s) are initialized with the proper attributes and event handlers as if the element had been passed during instantiation of the editor.\n* For any `<textarea>` elements:\n  * Hide the `<textarea>`\n  * Create a new `<div contenteditable=true>` element and add it to the elements array.\n  * Ensure the 2 elements remain sync'd.\n* Be intelligent enough to run the necessary code only once per element, no matter how often you will call it.\n\n### Removing elements dynamically\n\nStraight forward, just call `removeElements` with the element or array of elements you to want to tear down. Each element itself will remain a contenteditable - it will just remove all event handlers and all references to it so you can safely remove it from DOM.\n\n```javascript\neditor.removeElements(document.querySelector('#myElement'));\n// OR editor.removeElements(document.getElementById('myElement'));\n// OR editor.removeElements('#myElement');\n\n// in case you have jQuery and don't exactly know when an element was removed, for example after routing state change\nvar removedElements = [];\neditor.elements.forEach(function (element) {\n    // check if the element is still available in current DOM\n    if (!$(element).parents('body').length) {\n        removedElements.push(element);\n    }\n});\n\neditor.removeElements(removedElements);\n```\n\n## Capturing DOM changes\n\nFor observing any changes on contentEditable, use the custom `'editableInput'` event exposed via the `subscribe()` method:\n\n```js\nvar editor = new MediumEditor('.editable');\neditor.subscribe('editableInput', function (event, editable) {\n    // Do some work\n});\n```\n\nThis event is supported in all browsers supported by MediumEditor (including IE9+ and Edge)!  To help with cases when one instance of MediumEditor is monitoring multiple elements, the 2nd argument passed to the event handler (`editable` in the example above) will be a reference to the contenteditable element that has actually changed.\n\nThis is handy when you need to capture any modifications to the contenteditable element including:\n* Typing\n* Cutting/Pasting\n* Changes from clicking on buttons in the toolbar\n* Undo/Redo\n\nWhy is this interesting and why should you use this event instead of just attaching to the `input` event on the contenteditable element?\n\nSo for most modern browsers (Chrome, Firefox, Safari, etc.), the `input` event works just fine. In fact, `editableInput` is just a proxy for the `input` event in those browsers. However, the `input` event [is not supported for contenteditable elements in IE 9-11](https://connect.microsoft.com/IE/feedback/details/794285/ie10-11-input-event-does-not-fire-on-div-with-contenteditable-set) and is _mostly_ supported in Microsoft Edge, but not fully.\n\nSo, to properly support the `editableInput` event in Internet Explorer and Microsoft Edge, MediumEditor uses a combination of the `selectionchange` and `keypress` events, as well as monitoring calls to `document.execCommand`.\n\n## Extensions & Plugins\n\nCheck the [documentation](src/js/extensions) in order to learn how to develop extensions for MediumEditor.\n\nA list of existing extensions and plugins, such as [Images and Media embeds](http://orthes.github.io/medium-editor-insert-plugin/), [Tables](https://github.com/yabwe/medium-editor-tables) and [Markdown](https://github.com/IonicaBizau/medium-editor-markdown) can be found [here](https://github.com/yabwe/medium-editor/wiki/Extensions-Plugins).\n\n## Development\n\nTo run the demo locally:\n\n1. Clone this repo locally\n2. Run `npm install` from your console at the root\n3. Run `node index.js` from the root\n4. Navigate to `http://localhost:8088/demo/index.html` to view the demo\n\nMediumEditor development tasks are managed by Grunt. To install all the necessary packages, just invoke:\n\n```bash\nnpm install\n```\n\nTo run all the test and build the dist files for testing on demo pages, just invoke:\n```bash\ngrunt\n```\n\nThese are the other available grunt tasks:\n\n* __js__: runs jslint and jasmine tests and creates minified and concatenated versions of the script;\n* __css__: runs autoprefixer and csslint\n* __test__: runs jasmine tests, jslint and csslint\n* __watch__: watch for modifications on script/scss files\n* __spec__: runs a task against a specified file\n\nThe source files are located inside the __src__ directory.  Be sure to make changes to these files and not files in the dist directory.\n\n## Contributing\n\n[Kill some bugs :)](https://github.com/yabwe/medium-editor/issues?q=is%3Aopen+is%3Aissue+label%3Abug)\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Test your changes to the best of your ability.\n4. Update the documentation to reflect your changes if they add or changes current functionality.\n5. Commit your changes (`git commit -am 'Added some feature'`) **without files from the _dist_ directory**.\n6. Push to the branch (`git push origin my-new-feature`)\n7. Create a new Pull Request\n\n### Code Consistency\n\nTo help create consistent looking code throughout the project, we use a few tools to help us. They have plugins for most popular editors/IDEs to make coding for our project, but you should use them in your project as well!\n\n#### JSHint\n\nWe use [JSHint](http://jshint.com/) on each build to find easy-to-catch errors and potential problems in our js.  You can find our JSHint settings in the `.jshintrc` file in the root of the project.\n\n#### jscs\n\nWe use [jscs](http://jscs.info/) on each build to enforce some code style rules we have for our project.  You can find our jscs settings in the `.jscsrc` file in the root of the project.\n\n#### EditorConfig\n\nWe use [EditorConfig](http://EditorConfig.org) to maintain consistent coding styles between various editors and IDEs.  You can find our settings in the `.editorconfig` file in the root of the project.\n\n### Easy First Bugs\n\nLooking for something simple for a first contribution? Try fixing an [easy first bug](https://github.com/yabwe/medium-editor/issues?q=is%3Aopen+is%3Aissue+label%3A%22easy+first+bug%22)!\n\n## Contributors (100+ and counting!)\n\n[https://github.com/yabwe/medium-editor/graphs/contributors](https://github.com/yabwe/medium-editor/graphs/contributors)\n\n## Is Your Org Using MediumEditor?\n\nAdd your org [here](https://github.com/yabwe/medium-editor/issues/828) and we can add you to our [landing page](https://yabwe.github.io/medium-editor/#who-is-using-it)!\n\n## License\n\nMIT: https://github.com/yabwe/medium-editor/blob/master/LICENSE\n"
        },
        {
          "name": "UPGRADE-5.md",
          "type": "blob",
          "size": 8.6728515625,
          "content": "# Upgrading to v5.0.0\n\nVersion 5.0.0 of MediumEditor introduces a significantly simpler system for building custom extensions as well as extending existing buttons and extensions. As part of moving towards this extendable model, there were significant changes to the way options are passed to MediumEditor, as well as the extensions and buttons themselves.\n\nIn addition to extension related changes, there were several other potential breaking changes related to API methods, as well as utility helper methods.\n\n## MediumEditor Options\n\nFor details on all the currently supported MediumEditor options, refer to the [Medium Editor Options Wiki Page](https://github.com/yabwe/medium-editor/wiki/Options).\n\n### Toolbar Options\n* Options controlling the toolbar are now passed as a `'toolbar'` object inside the outer options object.\n  * `buttons` -> `toolbar.buttons`\n  * `toolbarAlign` -> `toolbar.align`\n  * `diffTop` -> `toolbar.diffTop`\n  * `diffLeft` -> `toolbar.diffLeft`\n  * `staticToolbar` -> `toolbar.static`\n  * `stickyToolbar` -> `toolbar.sticky`\n  * `firstButtonClass` -> `toolbar.firstButtonClass`\n  * `lastButtonClass` -> `toolbar.lastButtonClass`\n  * `updateOnEmptySelection` -> `toolbar.updateOnEmptySelection`\n  * `standardizeSelectionStart` -> `toolbar.standardizeSelectionStart`\n\n### Anchor Options\n* Options controlling the anchor input extension are now passed as a `'anchor'` object inside the outer options object.\n  * `anchorInputPlaceholder` -> `anchor.placeholderText`\n  * `checkLinkFormat` -> `anchor.linkValidation`\n  * `anchorButton` & `anchorButtonClass` -> `anchor.customClassOption`\n  * `anchorTarget` -> `anchor.targetCheckbox`\n  * `anchorInputCheckboxLabel` -> `anchor.targetCheckboxText`\n\n### Anchor Preview Options\n* Options controlling the anchor preview extension are now passed as a `'anchorPreview'` object inside the outer options object.\n  * `anchorPreviewHideDelay` -> `anchorPreview.hideDelay`\n\n### Paste Options\n* Options controlling paste are now passed as a `'paste'` object inside the outer options object.\n  * `forcePlainText` -> `paste.forcePlainText`\n  * `cleanPastedHTML` -> `paste.cleanPastedHTML`\n\n### Placeholder Options\n* Options controlling the placeholder extension are now passed as a `'placeholder'` object inside the outer options object.\n  * `placeholder` -> `placeholder.text`\n\n### Other Options\n\n#### `disableToolbar`\n* Disabling the toolbar extension is now done by setting the `toolbar` option to `false`\n\n#### `disableAnchorPreview`\n* Disabling the anchor preview extension is now done by setting the `anchorPreview` option to `false`\n\n#### `disablePlaceholders`\n* Disabling the placeholder extension is now done by setting the `placeholder` option to `false`\n\n#### `onShowToolbar` & `onHideToolbar`\n* The `onShowToolbar` and `onHideToolbar` options are no longer supported. Instead, attach to the `'showToolbar'` and `'hideToolbar'` [custom events](https://github.com/yabwe/medium-editor/wiki/Custom-Events) via `MediumEditor.subscribe()`\n\n#### `firstHeader` & `secondHeader`\n* The `firstHeader` & `secondHeader` options have been removed.  Instead, any number of the 6 header types can be passed as button names into the `toolbar.buttons` option array.\n  * Example: Where before the code may have sent `firstHeader: 'h2'` and `secondHeader: 'h3'`, it should now pass `['bold', 'italic', 'quote', 'h2', 'h3']` via the `toolbar.buttons` property of the MediumEditor options object.\n\n#### `buttonLabels`\n* The `buttonLabels` option no longer supports taking an object in that specifies custom labels for all buttons. Instead, pass an object into the `toolbar.buttons` option array that contains a `.name` property for the name of the button, a either a `contentDefault` or a `contentFA` property that should be in the innerHTML of the button (for default of `fontawesome` buttonLabels respectively)\n\n\n## MediumEditor Extensions\n#### `.parent`\n* `Extension.parent` is no longer supported.  All extensions will have a reference to the MediumEditor instance via their `.base` property, unless the property already exists.\n\n#### `.init()`\n* `Extension.init()` will no longer be passed any arguments. Previously, `.init(instance)` received an instance of MediumEditor as an argument, but this is not needed now that `.base` will be populated before `.init()` is called.\n\n#### `.deactivate()`\n* `Extension.deactivate()` will no longer be called by MediumEditor. `.destroy()` will be called instead when MediumEditor is destroyed.\n\n#### `.options`\n* The `.options` property of any built-in extensions or buttons has been removed.  All of the properties should be retrieved and set from the prototype of the object itself.\n  * Example: Instead of buttons using `this.options.action`, they should now use `this.action`.\n  * Not all extensions had options before, or saved them via the `.options` property.\n\n## MediumEditor API\n\n#### `.id`\n* The unique identifier used for MediumEditor elements will now remain unique and remain regardless of how many instances are created. After calling `.destroy()` and `.setup()`, the id will remain the same. This id was used to generate unique element ids for things like the id attribute of the toolbar element (`'medium-editor-toolbar-[ID]'`)\n\n#### `.toolbar`\n* The MediumEditor toolbar is now an extension, so `MediumEditor.toolbar` is no longer a valid reference.  Use `MediumEditor.getExtensionByName('toolbar')` instead.\n\n#### `.statics`\n* All of the `.statics` references have been removed as the new style of extensions and buttons has been introduced. The objects exposed via `.statics` have also been changed, so code which uses them may require additonal changes.\n  * `MediumEditor.statics.ButtonsData` -> `MediumEditor.extensions.button.prototype.defaults` (ideally this reference should no longer be needed)\n  * `MediumEditor.statics.DefaultButton` -> `MediumEditor.extensions.button`\n  * `MediumEditor.statics.AnchorExtension` -> `MediumEditor.extensions.anchor`\n  * `MediumEditor.statics.FontSizeExtension` -> `MediumEditor.extensions.fontSize`\n  * `MediumEditor.statics.Toolbar` -> `MediumEditor.extensions.toolbar`\n  * `MediumEditor.statics.AnchorPreview` -> `MediumEditor.extensions.anchorPreview`\n\n#### `.activate()`\n* `MediumEditor.activate()` has been replaced with `MediumEditor.setup()`\n\n#### `.deactivate()`\n* `MediumEditor.deactivate()` has been replaced with `MediumEditor.destroy()`\n\n#### `.createEvent()`\n* `MediumEditor.createEvent()` is no longer needed in order to fire custom events. It has been removed.\n\n#### `.hideToolbarDefaultActions()`\n* `MediumEditor.hideToolbarDefaultActions()` has been removed.  Use the `hideToolbarDefaultActions()` method of the toolbar extension instead.\n\n#### `.setToolbarPosition()`\n* `MediumEditor.setToolbarPosition()` has been removed.  Use the `setToolbarPosition()` method of the toolbar extension instead.\n\n#### `.callExtensions()`\n* `MediumEditor.callExtensions()` has been removed and is no longer supported.\n\n\n## MediumEditor Utility Methods\n\n### MediumEditor.util\n* `MediumEditor.util.getSelectionRange()` has been moved to `MediumEditor.selection.getSelectionRange()`\n* `MediumEditor.util.getSelectionStart()` has been moved to `MediumEditor.selection.getSelectionStart()`\n* `MediumEditor.util.unwrapElement()` has been removed. Use `MediumEditor.util.unwrap()` instead\n* `MediumEditor.util.getSelectionData()` has been removed\n* `MediumEditor.util.setObject()` has been removed\n* `MediumEditor.util.getObject()` has been removed\n* `MediumEditor.util.derives()` has been removed. Objects that can be drived from (like extensions and buttons) will have a `.extend()` method for extending.\n* `MediumEditor.util.now()` has been removed.  Use `Date.now()` instead.\n* `MediumEditor.util.parentElements` has been renamed `MediumEditor.util.blockContainerElementNames`\n\n### MediumEditor.selection\n* `MediumEditor.selection.getSelectionData()` has been removed\n\n\n## MediumEditor CSS & Markup\n* The `.clearfix` class has been removed, and `.clearfix` class is no longer added to the toolbar element.\n* All references to `'medium'` in CSS classes has been replaced with `'medium-editor'`\n  * Example: The image element added by the image dragging extension will now have a `medium-editor-image-loading` class on instead of `medium-image-loading`\n* The `data-medium-element` attribute on all MediumEditor elements has been renamed to `data-medium-editor-element`\n* Toolbar classes `sticky-toolbar` and `static-toolbar` have been renamed `medium-editor-sticky-toolbar` and `medium-editor-static-toolbar` respectively\n\n\n## Other Changes\n\n* The `getFocusedElement()` method of the toolbar extension has been removed. Use `MediumEditor.getFocusedElement()` instead.\n* Keyboard Shortcuts are now controlled via the Keyboard Commands extension.  The `.key` option on buttons is not longer supported for mapping keyboard shortcuts.\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.8818359375,
          "content": "{\n  \"name\": \"medium-editor\",\n  \"homepage\": \"http://yabwe.github.io/medium-editor/\",\n  \"authors\": [\n    \"Davi Ferreira <hi@daviferreira.com>\",\n    \"Nate Mielnik <nathan@outlook.com>\",\n    \"Noah Chase <nchase@gmail.com>\",\n    \"Jeremy Benoist <jeremy.benoist@gmail.com>\"\n  ],\n  \"description\": \"Medium.com WYSIWYG editor clone written in pure JavaScript.\",\n  \"main\": [\"dist/js/medium-editor.js\",\n           \"dist/css/medium-editor.css\",\n           \"dist/css/themes/default.css\"],\n  \"keywords\": [\n    \"contenteditable\",\n    \"wysiwyg\",\n    \"medium\",\n    \"rich-text\",\n    \"editor\"\n  ],\n  \"license\": \"MIT\",\n  \"ignore\": [\n    \"**/.*\",\n    \"node_modules\",\n    \"bower_components\",\n    \"spec\",\n    \"coverage\",\n    \"reports\",\n    \"_SpecRunner.html\",\n    \"Gruntfile.js\",\n    \"demo\",\n    \"package.json\",\n    \"CHANGES.md\",\n    \"MAINTAINERS.md\",\n    \"CODE_OF_CONDUCT.md\",\n    \"CONTRIBUTING.md\",\n    \"UPGRADE-5.md\"\n  ]\n}\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.1259765625,
          "content": "var connect = require('connect');\nvar serveStatic = require('serve-static');\nconnect().use(serveStatic(__dirname)).listen(8088);\n"
        },
        {
          "name": "karma.conf.js",
          "type": "blob",
          "size": 4.2568359375,
          "content": "/* global module */\n\nmodule.exports = function (config) {\n    config.set({\n\n        browserStack: {\n            apiClientEndpoint: 'https://api.browserstack.com',\n            timeout: 600\n        },\n\n        customLaunchers: {\n            WIN81Chrome: {\n                'base': 'BrowserStack',\n                'os': 'Windows',\n                'os_version': '8.1',\n                'browser': 'chrome'\n            },\n            WIN81Firefox: {\n                'base': 'BrowserStack',\n                'os': 'Windows',\n                'os_version': '8.1',\n                'browser': 'firefox'\n            },\n            WIN81Edge: {\n                'base': 'BrowserStack',\n                'os': 'Windows',\n                'os_version': '8.1',\n                'browser': 'edge'\n            },\n            WIN10Chrome: {\n                'base': 'BrowserStack',\n                'os': 'Windows',\n                'os_version': '10',\n                'browser': 'chrome'\n            },\n            WIN10Firefox: {\n                'base': 'BrowserStack',\n                'os': 'Windows',\n                'os_version': '10',\n                'browser': 'firefox'\n            },\n            WIN10Edge: {\n                'base': 'BrowserStack',\n                'os': 'Windows',\n                'os_version': '10',\n                'browser': 'edge'\n            },\n            OSXYosemiteSafari: {\n                'base': 'BrowserStack',\n                'os': 'OS X',\n                'os_version': 'Yosemite',\n                'browser': 'safari'\n            },\n            OSXElCapitanChrome: {\n                'base': 'BrowserStack',\n                'os': 'OS X',\n                'os_version': 'El Capitan',\n                'browser': 'chrome'\n            },\n            OSXElCapitanSafari: {\n                'base': 'BrowserStack',\n                'os': 'OS X',\n                'os_version': 'El Capitan',\n                'browser': 'safari'\n            },\n            OSXElCapitanFirefox: {\n                'base': 'BrowserStack',\n                'os': 'OS X',\n                'os_version': 'El Capitan',\n                'browser': 'firefox'\n            }\n        },\n\n        basePath: '',\n        frameworks: ['jasmine'],\n\n        files: [\n            'dist/css/*.css',\n            'node_modules/lodash/lodash.js',\n            'src/js/polyfills.js',\n            'src/js/globals.js',\n            'src/js/util.js',\n            'src/js/extension.js',\n            'src/js/selection.js',\n            'src/js/events.js',\n            'src/js/extensions/button.js',\n            'src/js/defaults/buttons.js',\n            'src/js/extensions/form.js',\n            'src/js/extensions/anchor.js',\n            'src/js/extensions/anchor-preview.js',\n            'src/js/extensions/auto-link.js',\n            'src/js/extensions/file-dragging.js',\n            'src/js/extensions/keyboard-commands.js',\n            'src/js/extensions/fontname.js',\n            'src/js/extensions/fontsize.js',\n            'src/js/extensions/paste.js',\n            'src/js/extensions/placeholder.js',\n            'src/js/extensions/toolbar.js',\n            'src/js/extensions/deprecated/image-dragging.js',\n            'src/js/core.js',\n            'src/js/defaults/options.js',\n            'src/js/version.js',\n            'spec/helpers/util.js',\n            'spec/*.spec.js'\n        ],\n\n        exclude: [\n            'src/js/extensions/deprecated/*'\n        ],\n\n        preprocessors: {\n        },\n\n        plugins: [\n            'karma-jasmine',\n            'karma-spec-reporter',\n            'karma-jasmine-html-reporter',\n            'karma-browserstack-launcher',\n            'karma-phantomjs-launcher',\n            'karma-firefox-launcher',\n            'karma-chrome-launcher',\n            'karma-coverage',\n            'karma-coveralls'\n        ],\n\n        reporters: ['coverage', 'coveralls', 'BrowserStack', 'dots', 'spec', 'kjhtml'],\n\n        coverageReporter: {\n            type: 'lcov',\n            dir: 'coverage/'\n        },\n\n        port: 9876,\n\n        logLevel: config.LOG_ERROR,\n        colors: true,\n\n        autoWatch: false,\n\n        browsers: ['WIN10Edge', 'WIN10Chrome', 'WIN10Firefox', 'OSXElCapitanChrome', 'OSXElCapitanFirefox', 'OSXYosemiteSafari'],\n\n        client: {\n            clearContext: false\n        },\n\n        singleRun: true,\n\n        concurrency: Infinity\n    });\n};"
        },
        {
          "name": "karma.dev.conf.js",
          "type": "blob",
          "size": 1.9462890625,
          "content": "/* global module */\n\nmodule.exports = function (config) {\n    config.set({\n\n        basePath: '',\n        frameworks: ['jasmine'],\n\n        files: [\n            'dist/css/*.css',\n            'node_modules/lodash/lodash.js',\n            'src/js/polyfills.js',\n            'src/js/globals.js',\n            'src/js/util.js',\n            'src/js/extension.js',\n            'src/js/selection.js',\n            'src/js/events.js',\n            'src/js/extensions/button.js',\n            'src/js/defaults/buttons.js',\n            'src/js/extensions/form.js',\n            'src/js/extensions/anchor.js',\n            'src/js/extensions/anchor-preview.js',\n            'src/js/extensions/auto-link.js',\n            'src/js/extensions/file-dragging.js',\n            'src/js/extensions/keyboard-commands.js',\n            'src/js/extensions/fontname.js',\n            'src/js/extensions/fontsize.js',\n            'src/js/extensions/paste.js',\n            'src/js/extensions/placeholder.js',\n            'src/js/extensions/toolbar.js',\n            'src/js/extensions/deprecated/image-dragging.js',\n            'src/js/core.js',\n            'src/js/defaults/options.js',\n            'src/js/version.js',\n            'spec/helpers/util.js',\n            'spec/*.spec.js'\n        ],\n\n        exclude: [\n            'src/js/extensions/deprecated/*'\n        ],\n\n        preprocessors: {\n        },\n\n        browsers: [\n            'Chrome'\n        ],\n        plugins: [\n            'karma-jasmine',\n            'karma-spec-reporter',\n            'karma-jasmine-html-reporter',\n            'karma-browserstack-launcher',\n            'karma-phantomjs-launcher',\n            'karma-chrome-launcher'\n        ],\n        reporters: ['progress', 'BrowserStack', 'dots', 'spec', 'kjhtml'],\n\n        port: 9876,\n\n        logLevel: config.LOG_INFO,\n        colors: true,\n\n        autoWatch: false,\n\n        client: {\n            clearContext: false\n        },\n\n        singleRun: true,\n\n        concurrency: Infinity\n    });\n};"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.4423828125,
          "content": "{\n  \"name\": \"medium-editor\",\n  \"version\": \"5.23.3\",\n  \"author\": \"Davi Ferreira <hi@daviferreira.com>\",\n  \"contributors\": [\n    {\n      \"name\": \"Nate Mielnik\",\n      \"email\": \"nathan@outlook.com\"\n    },\n    {\n      \"name\": \"Noah Chase\",\n      \"email\": \"nchase@gmail.com\"\n    },\n    {\n      \"name\": \"Jeremy Benoist\",\n      \"email\": \"jeremy.benoist@gmail.com\"\n    }\n  ],\n  \"description\": \"Medium.com WYSIWYG editor clone.\",\n  \"main\": \"dist/js/medium-editor.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/yabwe/medium-editor\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/yabwe/medium-editor/issues\",\n    \"email\": \"hi@daviferreira.com\"\n  },\n  \"homepage\": \"http://yabwe.github.io/medium-editor/\",\n  \"keywords\": [\n    \"contenteditable\",\n    \"editor\",\n    \"medium\",\n    \"wysiwyg\",\n    \"rich-text\"\n  ],\n  \"publishConfig\": {\n    \"registry\": \"http://registry.npmjs.org/\"\n  },\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"brfs\": \"2.0.2\",\n    \"connect\": \"3.7.0\",\n    \"grunt\": \"1.2.1\",\n    \"grunt-autoprefixer\": \"3.0.4\",\n    \"grunt-bump\": \"0.8.0\",\n    \"grunt-cli\": \"1.3.2\",\n    \"grunt-contrib-concat\": \"1.0.1\",\n    \"grunt-contrib-connect\": \"2.1.0\",\n    \"grunt-contrib-csslint\": \"2.0.0\",\n    \"grunt-contrib-cssmin\": \"3.0.0\",\n    \"grunt-contrib-jasmine\": \"1.0.3\",\n    \"grunt-contrib-jshint\": \"2.1.0\",\n    \"grunt-contrib-uglify\": \"4.0.1\",\n    \"grunt-contrib-watch\": \"1.1.0\",\n    \"grunt-coveralls\": \"2.0.0\",\n    \"grunt-jscs\": \"3.0.1\",\n    \"grunt-karma\": \"4.0.0\",\n    \"grunt-plato\": \"1.4.0\",\n    \"grunt-sass\": \"3.1.0\",\n    \"grunt-template-jasmine-istanbul\": \"0.4.0\",\n    \"jasmine\": \"3.6.1\",\n    \"jasmine-console-reporter\": \"3.1.0\",\n    \"jasmine-core\": \"3.6.0\",\n    \"jshint-stylish\": \"2.2.1\",\n    \"karma\": \"5.1.0\",\n    \"karma-browserstack-launcher\": \"1.6.0\",\n    \"karma-chrome-launcher\": \"3.1.0\",\n    \"karma-coverage\": \"2.0.3\",\n    \"karma-coveralls\": \"2.1.0\",\n    \"karma-firefox-launcher\": \"1.3.0\",\n    \"karma-jasmine\": \"3.3.1\",\n    \"karma-jasmine-html-reporter\": \"1.5.4\",\n    \"karma-phantomjs-launcher\": \"1.0.4\",\n    \"karma-spec-reporter\": \"0.0.32\",\n    \"load-grunt-tasks\": \"5.1.0\",\n    \"lodash\": \"4.17.19\",\n    \"open-cli\": \"6.0.1\",\n    \"phantomjs-prebuilt\": \"2.1.16\",\n    \"serve-static\": \"1.14.1\",\n    \"time-grunt\": \"2.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"node node_modules/grunt-cli/bin/grunt test --verbose\",\n    \"test:ci\": \"node node_modules/grunt-cli/bin/grunt travis --verbose\",\n    \"start\": \"open-cli ./demo/index.html\",\n    \"build\": \"node node_modules/grunt-cli/bin/grunt\"\n  }\n}\n"
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}