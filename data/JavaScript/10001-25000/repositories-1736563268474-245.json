{
  "metadata": {
    "timestamp": 1736563268474,
    "page": 245,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/WebFundamentals",
      "stars": 13857,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".csslintrc",
          "type": "blob",
          "size": 0.8564453125,
          "content": "{\n\t\"important\": \"warning\",\n\t\"adjoining-classes\": \"warning\",\n\t\"known-properties\": 2,\n\t\"box-sizing\": false,\n\t\"box-model\": \"warning\",\n\t\"overqualified-elements\": 2,\n\t\"display-property-grouping\": 2,\n\t\"bulletproof-font-face\": 2,\n\t\"compatible-vendor-prefixes\": 2,\n\t\"regex-selectors\": \"warning\",\n\t\"errors\": 2,\n\t\"duplicate-background-images\": 2,\n\t\"duplicate-properties\": 2,\n\t\"empty-rules\": 2,\n\t\"selector-max-approaching\": \"warning\",\n\t\"gradients\": 2,\n\t\"fallback-colors\": 2,\n\t\"font-sizes\": \"warning\",\n\t\"font-faces\": \"warning\",\n\t\"floats\": \"warning\",\n\t\"star-property-hack\": 2,\n\t\"outline-none\": 2,\n\t\"import\": 2,\n\t\"ids\": 2,\n\t\"underscore-property-hack\": 2,\n\t\"rules-count\": \"warning\",\n\t\"qualified-headings\": 2,\n\t\"selector-max\": 2,\n\t\"shorthand\": 2,\n\t\"text-indent\": 2,\n\t\"unique-headings\": \"warning\",\n\t\"universal-selector\": 2,\n\t\"unqualified-attributes\": 2,\n\t\"vendor-prefix\": 2,\n\t\"zero-units\": 2\n}\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.1640625,
          "content": "{\n  \"extends\": [\"eslint:recommended\", \"google\"],\n  \"parserOptions\": {\n    \"ecmaVersion\": 2017\n  },\n  \"env\": {\n    \"node\": true,\n    \"es6\": true\n  },\n  \"rules\": {\n  }\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.25,
          "content": "*~\n*.pyc\n.DS_Store\nnode_modules/*\nsrc/data/youtubeAPIKey.txt\nsrc/data/githubKey.txt\ngulp-tasks/devsite.js\nscratch/*\ntools/claat\ngcloud-client-secret.json\npackage-lock.json\nindex.yaml\n\n## Files that are autogenerated by the build system\ntest-results.json\nsrc/content/**/*/_files.json\nsrc/content/**/*/atom.xml\nsrc/content/**/*/rss.xml\nsrc/content/**/*/feed.xml\nsrc/content/*/_index-latest-*.html\nsrc/content/*/fundamentals/glossary.md\nsrc/content/*/_shared/contributors/*.html\nsrc/content/*/_shared/latest_show.html\nsrc/content/*/_shared/latest_articles.html\nsrc/content/*/resources/contributors/*\nsrc/content/*/resources/contributors.md\nsrc/content/*/updates/_index.yaml\nsrc/content/*/updates/*/_toc.yaml\nsrc/content/*/updates/*/index.md\nsrc/content/*/updates/tags/*\nsrc/content/*/shows/**/feed.xml\nsrc/content/*/shows/_index.yaml\nsrc/content/*/shows/index.md\nsrc/content/*/shows/http203/podcast/index.md\nsrc/content/*/shows/designer-vs-developer/podcast/index.md\nsrc/content/*/showcase/_index.yaml\nsrc/content/*/showcase/*/_toc.yaml\nsrc/content/*/showcase/*/index.md\nsrc/content/*/showcase/tags/*\nsrc/content/*/tools/puppeteer/_src/*\nsrc/content/*/rss.xml\nsrc/content/*/atom.xml\nsrc/data/codelabs/*/img/*\nsrc/data/codelabs/*/*.md\nsrc/data/ilt-pwa/*/img/*\nsrc/data/ilt-pwa/*/*.md\n"
        },
        {
          "name": ".gitlocalize.yml",
          "type": "blob",
          "size": 0.4267578125,
          "content": "settings:\n  advise_cla_signing: \n    - \"true\"\n  frontmatter_not_escaped:\n    - \"true\"\n  popup_for_contributors:\n    enabled: true\n    message_text: WebFundamentals is transitioning to web.dev, and for now, this project is no longer accepting translations from contributors. Your translations will no longer be reviewed and sent as Pull Requests. Please stay tuned for future updates on the <a href=\"https://web.dev\">web.dev</a> project.\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0009765625,
          "content": "\n"
        },
        {
          "name": ".jscsrc",
          "type": "blob",
          "size": 0.119140625,
          "content": "{\n  \"preset\": \"google\",\n  \"validateLineBreaks\": \"LF\",\n  \"validateIndentation\": 2,\n  \"excludeFiles\": [\"node_modules/**\"]\n}\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 0.4521484375,
          "content": "{\n  \"node\"          : true,\n  \"browser\"       : true,\n  \"esnext\"        : true,\n  \"bitwise\"       : true,\n  \"camelcase\"     : true,\n  \"curly\"         : true,\n  \"eqeqeq\"        : true,\n  \"immed\"         : true,\n  \"indent\"        : 2,\n  \"newcap\"        : true,\n  \"noarg\"         : true,\n  \"quotmark\"      : \"single\",\n  \"undef\"         : true,\n  \"unused\"        : \"vars\",\n  \"strict\"        : true,\n  \"globalstrict\"  : true,\n  \"globals\": {\n    \"require\": false\n  }\n}\n"
        },
        {
          "name": ".nvmrc",
          "type": "blob",
          "size": 0.0029296875,
          "content": "10\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.7392578125,
          "content": "# Contributing: submitting patches and tutorials\n\n## Submitting a pull request\n\n### Contributor License Agreements\n\nWe'd love to accept your code patches! However, before we can take them, we \nhave to jump a couple of legal hurdles.\n\nPlease fill out either the individual or corporate Contributor License \nAgreement.\n\n* If you are an individual writing original source code and you're sure you \nown the intellectual property, then sign an [individual CLA](https://developers.google.com/open-source/cla/individual).\n* If you work for a company that wants to allow you to contribute your work, \nthen sign a [corporate CLA](https://developers.google.com/open-source/cla/corporate).\n\nFollow either of the two links above to access the appropriate CLA and \ninstructions for how to sign and return it.\n\n1. Sign the contributors license agreement above.\n2. Decide which code you want to submit. A submission should be a set of changes\nthat addresses one issue in the [issue tracker](https://github.com/Google/WebFundamentals/issues).\nPlease don't mix more than one logical change per submission, because it makes\nthe history hard to follow. If you want to make a change\n(e.g. add a sample or feature) that doesn't have a corresponding issue in the\nissue tracker, please create one.\n3. **Submitting**: When you are ready to submit, send us a Pull Request. Be\nsure to include the issue number you've fixed and the name you used to sign\nthe CLA.\n\n## Writing Code ##\n\nIf your contribution contains code, please make sure that it follows \n[the style guide](https://google.github.io/styleguide/jsguide.html).\nOtherwise, we will have to ask you to make changes, and that's no fun for anyone.\n\n## Formatting HTML ##\n\nTo simplify PR reviews, please word-wrap HTML files at 80 characters or fewer.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0751953125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2014 Google Inc\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.43359375,
          "content": "# Web Fundamentals on DevSite\n\n**This repo has been archived and is not accepting any new issues or pull requests.**\n\nAll of the content from [developers.google.com/web/][dgc] has been moved to\n[web.dev](https://web.dev) or [developer.chrome.com](https://developer.chrome.com).\n\nThe source for [developers.google.com/web/][dgc] is now in `google3`. Changes\nmade here will not be published on DevSite.\n\n[dgc]: https://developers.google.com/web/\n"
        },
        {
          "name": "WebFu.code-workspace",
          "type": "blob",
          "size": 0.1826171875,
          "content": "{\n  \"folders\": [\n    {\n      \"name\": \"WebFundamentals\",\n      \"path\": \".\"\n    }\n  ],\n  \"settings\": {\n    \"files.trimTrailingWhitespace\": true,\n    \"editor.trimAutoWhitespace\": true\n  }\n}\n"
        },
        {
          "name": "app.yaml",
          "type": "blob",
          "size": 2.3369140625,
          "content": "runtime: python27\napi_version: 1\nthreadsafe: true\n# application: petele-scratch\n# version: wf-devsite\n\nhandlers:\n- url: /test-results.json\n  static_files: test-results.json\n  upload: test-results.json\n  http_headers:\n    x-frame-options: SAMEORIGIN\n\n- url: /robots.txt\n  static_files: gae/robots.txt\n  upload: gae/robots.txt\n  http_headers:\n    x-frame-options: SAMEORIGIN\n\n- url: /wf-local/scripts/\n  static_dir: gae/scripts/\n  http_headers:\n    x-frame-options: SAMEORIGIN\n\n- url: /wf-local/styles/\n  static_dir: gae/styles/\n  http_headers:\n    x-frame-options: SAMEORIGIN\n\n- url: /wf-local/images/\n  static_dir: gae/images/\n  http_headers:\n    x-frame-options: SAMEORIGIN\n\n- url: /web/(.*\\.(png|gif|jpg|svg|webp|avif|xml|mp4|webm|pdf|mp3|mov))\n  static_files: src/content/en/\\1\n  expiration: 1d\n  upload: src/content/en/(.*\\.(png|gif|jpg|svg|webp|avif|xml|mp4|webm|pdf|mp3|mov))\n  http_headers:\n    x-frame-options: SAMEORIGIN\n\n- url: /(.*\\.ico)\n  static_files: src/content/en/images/\\1\n  expiration: 7d\n  upload: src/content/en/images/(.*\\.ico)\n  http_headers:\n    x-frame-options: SAMEORIGIN\n\n- url: /web/manifest.json\n  static_files: src/content/en/manifest.json\n  expiration: 1d\n  upload: src/content/en/manifest.json\n  http_headers:\n    x-frame-options: SAMEORIGIN\n\n- url: /web/(.*\\.(js|css|json))\n  static_files: src/content/en/\\1\n  expiration: 1d\n  upload: src/content/en/(.*\\.(js|css))\n  http_headers:\n    x-frame-options: SAMEORIGIN\n    Access-Control-Allow-Origin: https://developers.google.com\n  application_readable: true\n\n\n- url: /web/(.*\\.(woff|eot|ttf))\n  static_files: \\1\n  expiration: 1d\n  upload: (.*\\.(woff|eot|ttf))\n  http_headers:\n    Access-Control-Allow-Origin: https://developers.google.com\n    x-frame-options: SAMEORIGIN\n\n# This is simply a redirect from index to /web\n- url: /(.*)\n  script: appengine_main.app\n  secure: always\n\nskip_files:\n- ^CONTRIBUTING\\.md$\n- ^gcloud-client-secret\\.json.*\n- ^gulpfile\\.js$\n- ^package.*?\\.json$\n- ^README\\.md$\n- ^start-appengine\\.sh$\n- ^TRANSLATION\\.md$\n- ^(.*/)?#.*#$\n- ^(.*/)?.*~$\n- ^(.*/)?.*\\.DS_Store$\n- ^(.*/)?.*\\.py[co]$\n- ^(.*/)?.*/RCS/.*$\n- ^(.*/)?.*\\.psd$\n- ^(.*/)?.*\\.pxm$\n- ^(.*/)?.*\\.pyc$\n- ^(.*/)?.*\\.sh$\n- ^(.*/)?\\..*$\n- ^gulp-tasks/.*\n- ^node_modules/.*\n- ^scratch/.*\n- ^src/content/(.*/)?(rss|atom)\\.xml$\n- ^src/content/en/updates/tags/.*?\\.md\n- ^src/data/.*\n- ^src/templates/.*\n- ^src/tests/.*\n- ^tools/.*\n\n\n\n\n"
        },
        {
          "name": "appengine_config.py",
          "type": "blob",
          "size": 0.111328125,
          "content": "from google.appengine.ext import vendor\n\n# Add any libraries installed in the \"lib\" folder.\nvendor.add('gae/lib')\n"
        },
        {
          "name": "appengine_main.py",
          "type": "blob",
          "size": 4.787109375,
          "content": "#!/usr/bin/env python\n#\n# Copyright 2014 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nimport os\nimport webapp2\nimport logging\nimport devsitePage\nimport devsiteIndex\nimport devsiteHelper\nfrom google.appengine.api import memcache\nfrom google.appengine.ext.webapp.template import render\n\nDEFAULT_LANG = 'en'\nDEVENV = os.environ['SERVER_SOFTWARE'].startswith('Dev')\nUSE_MEMCACHE = not DEVENV\nSOURCE_PATH = os.path.join(os.path.dirname(__file__), 'src/content/')\n\nclass FlushMemCache(webapp2.RequestHandler):\n    def get(self):\n        memcache.flush_all()\n        self.response.out.write('Flushed')\n\n\nclass HomePage(webapp2.RequestHandler):\n    def get(self):\n        self.redirect('/web/', permanent=True)\n\n\nclass DevSiteRedirect(webapp2.RequestHandler):\n    def get(self, path):\n        self.redirect('https://developers.google.com/' + path, permanent=True)\n\n\nclass Framebox(webapp2.RequestHandler):\n    def get(self, path):\n        response = None\n        memcacheKey = '/framebox/' + path\n        content = memcache.get(memcacheKey)\n        logging.info('GET ' + memcacheKey)\n\n        if content is None:\n          response = render('gae/404.tpl', {})\n          logging.error('404 ' + memcacheKey)\n          self.response.set_status(404)\n        else:\n          response = render('gae/framebox.tpl', {'content': content})\n          logging.info('200 ' + memcacheKey)\n        self.response.out.write(response)\n\n\nclass DevSitePages(webapp2.RequestHandler):\n    def get(self, path):\n\n        self.response.headers.add('x-frame-options', 'SAMEORIGIN')\n\n        if path.endswith('.html') or path.endswith('.md'):\n          redirectTo = '/web/' + os.path.splitext(path)[0]\n          self.redirect(redirectTo, permanent=True)\n          return\n\n        response = None\n        langQS = self.request.get('hl', None)\n        langCookie = self.request.cookies.get('hl')\n        if langQS:\n          lang = langQS\n        elif langCookie:\n          lang = langCookie\n        else:\n          lang = DEFAULT_LANG\n        self.response.set_cookie('hl', lang, max_age=3600, path='/')\n\n        fullPath = self.request.path\n        memcacheKey = self.request.host + fullPath + '?hl=' + lang\n        logging.info('GET ' + memcacheKey)\n\n        if USE_MEMCACHE:\n          response = memcache.get(memcacheKey)\n          if response:\n            logging.info('304 ' + fullPath)\n\n        if response is None:\n          try:\n            if os.path.isdir(os.path.join(SOURCE_PATH, 'en', path)):\n              # Make sure the directory ends with a /, as required by devsite\n              if len(path) > 0 and not path.endswith('/'):\n                redirectTo = '/web/' +  path + '/'\n                logging.info('301 ' + redirectTo)\n                self.redirect(redirectTo, permanent=True)\n                return\n              response = devsiteIndex.getPage(path, lang)\n              if (response is None) and (path.startswith('showcase') or\n                  path.startswith('shows') or path.startswith('updates')):\n                response = devsiteIndex.getDirIndex(path)\n            else:\n              response = devsitePage.getPage(path, lang)\n\n            if response is None:\n              # No file found, check for redirect\n              redirectTo = devsiteHelper.checkForRedirect(fullPath, lang, USE_MEMCACHE)\n              if redirectTo:\n                logging.info('301 ' + redirectTo)\n                self.redirect(redirectTo, permanent=True)\n                return\n\n              # No redirect found, send the 404 page.\n              response = render('gae/404.tpl', {'requestPath': fullPath})\n              logging.error('404 ' + fullPath)\n              self.response.set_status(404)\n            else:\n              logging.info('200 ' + fullPath)\n              if USE_MEMCACHE:\n                memcache.set(memcacheKey, response)\n          except Exception as ex:\n            context = {'content': ex, 'requestPath': fullPath}\n            response = render('gae/500.tpl', context)\n            logging.exception('500 ' + fullPath)\n            self.response.set_status(500)\n\n        self.response.out.write(response)\n\n\n# The '/' entry is a redirect to /web/ - just a convenience thing\napp = webapp2.WSGIApplication([\n    ('/flushMemCache', FlushMemCache),\n    ('/', HomePage),\n    ('/web/(.*)', DevSitePages),\n    ('/framebox/(.*)', Framebox),\n    ('/(.*)', DevSiteRedirect)\n], debug=DEVENV)\n"
        },
        {
          "name": "devsiteHelper.py",
          "type": "blob",
          "size": 20.626953125,
          "content": "import re\nimport os\nimport cgi\nimport yaml\nimport hashlib\nimport logging\nimport textwrap\nimport urllib2\nfrom datetime import date, datetime\nfrom google.appengine.api import memcache\n\nSOURCE_PATH = os.path.join(os.path.dirname(__file__), 'src/content/')\n\ndef slugify(str):\n  # Very simply slugify\n  slug = str.encode('ascii', 'ignore').lower()\n  slug = re.sub(r'[^a-z0-9]+', '-', slug).strip('-')\n  slug = re.sub(r'[-]+', '-', slug)\n  return slug\n\n\ndef getFromMemCache(memcacheKey):\n  try:\n    result = memcache.get(memcacheKey)\n  except Exception as e:\n    result = None\n  return result\n\n\ndef setMemCache(memcacheKey, value, length=3600):\n  try:\n    memcache.set(memcacheKey, value, length)\n  except Exception as e:\n    logging.exception('Unable to cache to MemCache')\n\n\ndef checkForRedirect(requestedPath, lang, useMemcache):\n  # Reads the redirect files from the current directory and up the directory\n  # tree then checks to see if a redirect exists for the current URL.\n  redirects = []\n  requestDir = requestedPath\n  requestDir = re.sub(r'^/?web/', '', requestDir)\n\n  # Check if the requested path is actually a directory\n  if not requestDir.endswith('/'):\n    if os.path.isdir(os.path.join(SOURCE_PATH, lang, requestDir)):\n      return '/web/' + requestDir + '/'\n\n  # Get the directory the file was requested from\n  if not requestDir.endswith('/'):\n    requestDir = requestDir[:requestDir.rindex('/') + 1]\n  requestDir = os.path.join(SOURCE_PATH, lang, requestDir)\n\n  while requestDir.startswith(SOURCE_PATH):\n    try:\n      redirectFile = os.path.join(requestDir, '_redirects.yaml')\n      if os.path.isfile(redirectFile):\n        memcacheKey = 'redirectFile-' + redirectFile\n        parsed = getFromMemCache(memcacheKey)\n        if parsed is None:\n          raw = open(redirectFile, 'r').read().decode('utf8')\n          parsed = yaml.load(raw)\n          if useMemcache:\n            setMemCache(memcacheKey, parsed)\n        if 'redirects' in parsed:\n          redirects += parsed['redirects']\n        else:\n          logging.warning('Didn\\'t find redirects key in ' + redirectFile)\n      requestDir = os.path.join(requestDir, '..')\n      requestDir = os.path.normpath(requestDir)\n    except Exception as e:\n      logging.exception('checkForRedirect Failed')\n\n  for redirect in redirects:\n    redirectTo = None\n    if requestedPath == redirect['from']:\n      return redirect['to']\n    if redirect['from'].endswith('/...'):\n      redirectFrom = redirect['from'].replace('...', '')\n      if requestedPath.startswith(redirectFrom):\n        redirectTo = redirect['to']\n        if redirectTo.endswith('/...'):\n          redirectTo = redirect['to'].replace('...', '')\n          redirectTo = requestedPath.replace(redirectFrom, redirectTo)\n        return redirectTo\n  return None\n\n\ndef readFile(requestedFile, lang='en'):\n  # Reads a file from the file system, first trying the localized, then\n  # the English version. If neither exist, it returns None\n  requestedFile = re.sub(r'^/?web/', '', requestedFile)\n  workingFile = os.path.join(SOURCE_PATH, lang, requestedFile)\n  if not os.path.isfile(workingFile):\n    workingFile = os.path.join(SOURCE_PATH, 'en', requestedFile)\n  if os.path.isfile(workingFile):\n    try:\n      result = open(workingFile, 'r').read()\n      result = result.decode('utf8')\n      return result\n    except Exception as e:\n      result = ' - Exception occurred trying to read: ' + requestedFile\n      logging.exception(result)\n      return None\n  else:\n    result = ' - ReadFile failed trying to find: ' + requestedFile\n    logging.error(result)\n    return None\n\n\ndef fetchGithubFile(path, revision = None):\n  \"\"\"Fetchs a file in a repository hosted on github.com.\n\n  Retrieves rows pertaining to the given keys from the Table instance\n  represented by big_table.  Silly things may happen if\n  other_silly_variable is not None.\n\n  Args:\n      path: The path to a file on Github in the form\n          github-user/repository/path/to/file.\n      revision: Optional git revision string of the form\n          \"refs/tags/v0.10.0\". See https://goo.gl/DBLwBb for other options.\n\n  Returns:\n      A string from the HTTP response.\n  \"\"\"\n  path = path.replace('/blob', '')\n  if revision:\n    path = path.replace('main', revision.replace('refs/tags/', ''))\n  url = 'https://raw.githubusercontent.com/%s' % path\n  try:\n    response = urllib2.urlopen(url)\n    content = response.read()\n  except urllib2.HTTPError as e:\n    logging.error('Unable to fetch Github file: %s' % e.code)\n    return None\n  return content\n\n\ndef parseBookYaml(pathToBook, lang='en'):\n  \"\"\"Read and parse a book.yaml file.\n\n  Args:\n      pathToBook: the string path to the location of the book\n      lang: Which language to use, defaults to 'en'\n\n  Returns:\n      A dictionary with the parsed book.\n  \"\"\"\n  try:\n    result = {}\n    upperTabs = []\n    result['upper_tabs'] = upperTabs\n    bookYaml = yaml.load(readFile(pathToBook, lang))\n    for upperTab in bookYaml['upper_tabs']:\n      upperTabs.append(expandBook(upperTab))\n    return result\n  except Exception as e:\n    logging.exception('Error in parseBookYaml')\n  return None\n\n\ndef expandBook(book, lang='en'):\n  \"\"\"Iterate and expand includes in a book.yaml file.\n\n  Args:\n      book: the parsed book.yaml file\n      lang: Which language to use, defaults to 'en'\n\n  Returns:\n      A dictionary with the parsed & expanded book.\n  \"\"\"\n  if isinstance(book, dict):\n    result = {}\n    for k, v in book.iteritems():\n      result[k] = expandBook(v, lang)\n    return result\n  if isinstance(book, list):\n    results = []\n    for item in book:\n      if 'include' in item:\n        tocFileContents = readFile(item['include'], lang)\n        if tocFileContents is None:\n          logging.error('Error in expandBook, unable to read %s', item['include'])\n          items = [{\n            \"title\": '** ERROR: TOC not found. **',\n            \"path\": '#',\n            \"status\": 'deprecated'\n          }]\n          results = results + expandBook(items, lang)\n        else:\n          newItems = yaml.load(tocFileContents)\n          if 'toc' in newItems:\n            results = results + expandBook(newItems['toc'], lang)\n          else:\n            logging.error('Unable to get \\'toc\\' element from %s\\n%s',\n                          item['include'], tocFileContents)\n      else:\n        results.append(expandBook(item, lang))\n    return results\n  return book\n\n\ndef getLowerTabs(bookYaml):\n  \"\"\"Gets the lower tabs from a parsed book.yaml dictionary.\n\n  Args:\n      bookYaml: the parsed book.yaml file\n\n  Returns:\n      An array of objects with the lower tabs\n  \"\"\"\n  result = []\n  try:\n    for tab in bookYaml['upper_tabs']:\n      if 'lower_tabs' in tab and 'other' in tab['lower_tabs']:\n        for lowerTab in tab['lower_tabs']['other']:\n          lt = {}\n          lt['name'] = lowerTab['name']\n          if 'contents' in lowerTab:\n            firstTabPath = getFirstTabPath(lowerTab['contents'])\n            if firstTabPath is not None:\n              lt['path'] = firstTabPath\n              result.append(lt)\n  except Exception as e:\n    logging.exception('Unable to read/parse the lower tabs')\n  return result\n\n\n# Given a list of tab contents, find the first item with a path and return\n# the path\ndef getFirstTabPath(tabContents):\n  for tabContent in tabContents:\n    if 'path' in tabContent:\n      return tabContent['path']\n    if 'section' in tabContent:\n      tabPath = getFirstTabPath(tabContent['section'])\n      if tabPath is not None:\n        return tabPath\n  return None\n\n\n# Returns the left nav. Read the file then recursively, then build the\n# tree using buildLeftNav.\ndef getLeftNav(requestPath, bookYaml, lang='en'):\n  requestPath = os.path.join('/web/', requestPath)\n  result = '<h2>No Matches Found</h2>'\n  try:\n    currentUpperTab = None\n    for upperTab in bookYaml['upper_tabs']:\n      # We generate the left nav based on the lower tab entries\n      # but we need to find the right lower tab based on the the upper tab\n      if 'path' not in upperTab:\n        continue\n      if not requestPath.startswith(upperTab['path']):\n        continue\n\n      currentUpperTab = upperTab\n      break\n\n    # There should be 'currentUpperTab', if not, there is nothing we can show\n    if currentUpperTab is None:\n      return result\n\n    lowerTabs = currentUpperTab['lower_tabs']['other']\n    for lowerTab in lowerTabs:\n      lowerTabPath = getFirstTabPath(lowerTab['contents'])\n\n      # If a left nav starts with a file like \"/guides/get-started\" in a TOC\n      # yaml we want \"/guides/next-page\" to have the same TOC.\n      # If the lower tab path does not end in a \"/\" remove the file name.\n      # Change \"/guides/get-started\" to '/guides/' to make it match for\n      # \"/guides/next-page\"\n      if lowerTabPath is not None and not lowerTabPath.endswith('/'):\n        tabPathParts = lowerTabPath.split('/')\n        tabPathParts.pop()\n        lowerTabPath = '/'.join(tabPathParts)+'/'\n\n      if (lowerTabPath is None or\n        requestPath.startswith(lowerTabPath)):\n          result = '<ul class=\"devsite-nav-list devsite-nav-expandable\">\\n'\n          result += buildLeftNav(lowerTab['contents'])\n          result += '</ul>\\n'\n\n    return result\n  except Exception as e:\n    logging.exception(' - Unable to read or parse primary book.yaml')\n    logging.exception(e)\n    whoops = '<h2>Whoops!</h2>'\n    whoops += '<p>An error occurred while trying to parse and build the'\n    whoops += ' left hand navigation. Check the error logs.'\n    whoops += '</p>'\n    whoops += '<p>Exception occurred.</p>'\n    return whoops\n\n\ndef buildLeftNav(bookYaml, lang='en'):\n  # Recursively reads the book.yaml file and generates the navigation tree\n  result = ''\n  for item in bookYaml:\n    if 'path' in item:\n      itemClass = 'devsite-nav-item'\n      if 'status' in item:\n        itemClass += ' devsite-nav-has-status devsite-nav-' + item['status']\n      result += '<li class=\"' + itemClass + '\">\\n'\n      result += '<a href=\"' + item['path'] + '\" class=\"devsite-nav-title\">\\n'\n      result += '<span class=\"devsite-nav-text\">'\n      result += '<span>' + cgi.escape(item['title']) + '</span>\\n'\n      result += '</span>'\n      if 'status' in item:\n        result += '<span class=\"devsite-nav-icon-wrapper\">'\n        result += '<span class=\"devsite-nav-icon material-icons\"></span>'\n        result += '</span>'\n      result += '</a>\\n'\n      result += '</li>\\n'\n    elif 'heading' in item:\n      itemClass = 'devsite-nav-item devsite-nav-item-heading'\n      result += '<li class=\"' + itemClass + '\">\\n';\n      result += '<span class=\"devsite-nav-title devsite-nav-title-no-path\">\\n';\n      result += '<span>' + cgi.escape(item['heading']) + '</span>\\n';\n      result += '</span>\\n</li>\\n';\n    elif 'section' in item:\n      # Sub-section\n      itemClass = 'devsite-nav-item devsite-nav-item-section-expandable x'\n      if 'style' in item:\n        itemClass += ' devsite-nav-accordion'\n      if 'status' in item:\n        itemClass += ' devsite-nav-has-status devsite-nav-' + item['status']\n      result += '<li class=\"' + itemClass + '\">\\n'\n      result += '<span class=\"devsite-nav-title devsite-nav-title-no-path\">\\n'\n      result += '<span>' + cgi.escape(item['title']) + '</span>\\n'\n      if 'status' in item:\n        result += '<span class=\"devsite-nav-icon-wrapper\">'\n        result += '<span class=\"devsite-nav-icon material-icons\"></span>'\n        result += '</span>'\n      result += '</span>'\n      result += '<a class=\"devsite-nav-toggle devsite-nav-toggle-collapsed material-icons\">\\n'\n      result += '</a>'\n      result += '<ul class=\"devsite-nav-section devsite-nav-section-collapsed\">\\n'\n      result += buildLeftNav(item['section'])\n      result += '</ul>\\n'\n  return result\n\n\ndef renderDevSiteContent(content, lang='en'):\n  # Injects includecode into the markdown as appropriate\n  includes = re.findall(r'{%[ ]?includecode .+%}(?m)', content)\n  for include in includes:\n    content = content.replace(include, getIncludeCode(include, lang))\n\n  # Injects includes into the markdown as appropriate\n  includes = re.findall(r'{%[ ]?include .+%}(?m)', content)\n  for include in includes:\n    content = content.replace(include, getInclude(include, lang))\n\n  # Replace any videoIds used in src/content/ilt/pwa\n  videos = re.findall(r'{% setvar videoId .+%}(?m)', content)\n  for video in videos:\n    videoId = re.search(r'{% setvar videoId \"(.*?)\"', video).group(1)\n    content = content.replace(r'{{ videoId }}', videoId)\n    content = content.replace(video, '')\n\n  # Replace any slidesIds used in src/content/ilt/pwa\n  slides = re.findall(r'{% setvar slidesId .+%}(?m)', content)\n  for slide in slides:\n    slidesId = re.search(r'{% setvar slidesId \"(.*?)\"', slide).group(1)\n    content = content.replace(r'{{ slidesId }}', slidesId)\n    content = content.replace(slide, '')\n\n  # Replaces frameboxes with the iframe it needs\n  frameboxes = re.findall(r'{%[ ]?framebox.+?%}.*?{%[ ]?endframebox[ ]?%}(?ms)', content)\n  for framebox in frameboxes:\n    fbContent = re.search(r'({%[ ]?framebox.+?%})(.*?){%[ ]?endframebox[ ]?%}(?ms)', framebox)\n    fbOpenTag = fbContent.group(1)\n    fbHeight = re.search(r'height=\"(.*?)\"', fbContent.group(1))\n    fbClass = re.search(r'class=\"(.*?)\"', fbContent.group(1))\n    fbContent = fbContent.group(2)\n    fbMemcacheKey = '/framebox/' + hashlib.md5(fbContent.encode('utf-8')).hexdigest()\n    replaceWith = '<iframe class=\"framebox inherit-locale'\n    if fbClass:\n     replaceWith += ' ' + fbClass.group(1)\n    replaceWith += '\" '\n    replaceWith += 'style=\"width: 100%;'\n    if fbHeight:\n      replaceWith += 'height:' + fbHeight.group(1) + ';'\n    else:\n      replaceWith += 'height: 100px;'\n    replaceWith += '\" '\n    # The sandbox attr will emulate being on a different origin\n    replaceWith += 'sandbox=\"allow-forms allow-orientation-lock allow-pointer-lock allow-popups allow-presentation allow-scripts allow-top-navigation\" '\n    replaceWith += 'src=\"' + fbMemcacheKey + '\"></iframe>'\n    content = content.replace(framebox, replaceWith)\n    setMemCache(fbMemcacheKey, fbContent)\n\n  # Escapes content between {% htmlescape %} tags\n  htmlescapes = re.findall(r'{%[ ]?htmlescape[ ]?%}(.*?){%[ ]?endhtmlescape[ ]?%}(?ms)', content)\n  for escapeMe in htmlescapes:\n    escaped = cgi.escape(escapeMe)\n    content = content.replace(escapeMe, escaped)\n  if htmlescapes:\n    content = re.sub(r'{%[ ]?htmlescape[ ]?%}', '', content)\n    content = re.sub(r'{%[ ]?endhtmlescape[ ]?%}', '', content)\n  return content\n\n\ndef getInclude(includeTag, lang='en'):\n  # Returns the contents of an include file. If the file is not found,\n  # it returns a warning into the doc. Otherwise it returns the file.\n  fileName = includeTag.replace('{%', '')\n  fileName = fileName.replace('%}', '')\n  fileName = fileName.replace('include', '')\n  fileName = fileName.replace('\"', '')\n  fileName = fileName.replace('\\'', '')\n  fileName = fileName.strip()\n  result = None\n  if fileName == 'comment-widget.html':\n    result = '<style>'\n    result += '#gplus-comment-container { border: 1px solid #c5c5c5; }'\n    result += '#gplus-comment-container > div { padding: 24px; }'\n    result += '#gplus-title { background-color: #f5f5f5; }'\n    result += '</style>'\n    result += '<div id=\"gplus-comment-container\">'\n    result += '<div id=\"gplus-title\">No comments yet</div>'\n    result += '<div id=\"gplus-comments\">'\n    result += 'Comments aren\\'t supported in the development or staging environment, sorry.'\n    result += '</div></div>'\n  elif fileName.startswith('web/'):\n    result = readFile(fileName, lang)\n  if result is None:\n    return 'Warning: Unable to find include <code>' + fileName + '</code>'\n  return result\n\ndef getIncludeMD(includeTag, lang='en'):\n  # Returns the contents of a markdown include file. If the file is not found,\n  # it returns a warning into the doc. Otherwise it returns the file.\n  fileName = includeTag.replace('<<', '')\n  fileName = fileName.replace('>>', '')\n  result = readFile(fileName, lang)\n  if result is None:\n    result = 'Warning: Unable to find markdown file: ' + fileName\n  return result\n\n\ndef getIncludeCode(include_tag, lang='en'):\n  # Returns the contents of an includecode file. If the file is not found,\n  # it returns a warning into the doc. Otherwise it returns the file.\n  # It also handles start and end regions and can unindent code as requested\n  file_regex = re.search(r\"content_path=\\\"(.+?)\\\"\", include_tag)\n  region_regex = re.search(r\"region_tag=\\\"(.+?)\\\"\", include_tag)\n  dedent_regex = re.search(r\"adjust_indentation=\\\"(.+?)\\\"\", include_tag)\n  github_regex = re.search(r\"github_path=\\\"(.+?)\\\"\", include_tag)\n  git_revision_regex = re.search(r\"git_revision=\\\"(.+?)\\\"\", include_tag)\n  file_content_regex = re.search(r\"regexp=\\\"(.+?)\\\"\", include_tag)\n\n  # TODO: support these arguments\n  as_downloadable_regex = re.search(r\"as_downloadable=\\\"(.+?)\\\"\", include_tag)\n  github_link_regex = re.search(r\"github_link=\\\"(.+?)\\\"\", include_tag)\n\n  if as_downloadable_regex or github_link_regex:\n    msg = 'Error: as_downloadable, github_link, and git_revision args are not supported'\n    logging.error(' - ' + msg)\n    return msg\n\n  if not file_regex and not github_regex:\n    msg = 'Error: No <code>content_path</code> specified for ' + include_tag\n    logging.error(' - ' + msg)\n    return msg\n\n  result = None\n  if file_regex:\n    file_name = file_regex.group(1)\n    result = readFile(file_name, lang)\n    if result is None:\n      return 'Warning: Unable to find includecode <code>%s</code>' % file_name\n  elif github_regex:\n    git_revision = None\n    if git_revision_regex:\n      git_revision = git_revision_regex.group(1)\n\n    file_url = github_regex.group(1)\n    result = fetchGithubFile(file_url, git_revision)\n    if result is None:\n      return 'Warning: Unable to includecode from github_path=\"<code>%s</code>\"' % file_url\n\n  if region_regex:\n    region_name = region_regex.group(1)\n    start_at = result.find('[START %s]' % region_name)\n    if start_at >= 0:\n      start_at = result.find('\\n', start_at) + 1\n      end_at = result.find('[END %s]' % region_name)\n      end_at = result.rfind('\\n', start_at, end_at)\n      result = result[start_at:end_at]\n\n  if file_content_regex:\n    print file_content_regex.groups()\n    r = re.compile(file_content_regex.group(1), re.DOTALL)\n    m = re.search(r, result)\n    if m:\n      result = m.group(1)\n\n  if dedent_regex and dedent_regex.group(1) == 'auto':\n    result = textwrap.dedent(result)\n\n  return cgi.escape(result)\n\n\ndef getAnnouncementBanner(pathToProject, lang='en'):\n  result = ''\n  try:\n    project = yaml.load(readFile(pathToProject, lang))\n    if 'announcement' in project:\n      result = '<div class=\"devsite-banner devsite-banner-announcement\">\\n'\n      result += '<div class=\"devsite-banner-inner\">\\n'\n      result += project['announcement']['description']\n      result += '\\n</div>\\n'\n      result += '</div>'\n  except Exception as e:\n    logging.exception('Unable to get announcement from project.yaml')\n    result = ''\n  return result\n\n\ndef getFooterPromo(lang='en'):\n  \"\"\"Gets the promo footer.\n\n  Args:\n      lang: The language to pick from.\n\n  Returns:\n      An HTML string with the appropriate footer.\n  \"\"\"\n  memcacheKey = 'footerLinkPromo-' + lang\n  result = getFromMemCache(memcacheKey)\n  if result is None:\n    result = ''\n    footer = yaml.load(readFile('_footer.yaml', lang))\n    if 'promos' in footer['footer'][0]:\n      for promo in footer['footer'][0]['promos']:\n        result += '<li class=\"devsite-footer-promo\">'\n        result += '<a href=\"' + promo['path']\n        result += '\" class=\"devsite-footer-promo-title\">'\n        if 'icon' in promo:\n          result += '<img class=\"devsite-footer-promo-icon\" '\n          result += 'src=\"' + promo['icon'] + '\">'\n        if 'icon_name' in promo:\n          result +='<div class=\"devsite-footer-promo-icon material-icons\">'\n          result += promo['icon_name'] + '</div>'\n        result += promo['label']\n        result += '</a><div class=\"devsite-footer-promo-description\">'\n        result += promo['description']\n        result += '</div></li>\\n'\n      setMemCache(memcacheKey, result, 60)\n  return result\n\n\ndef getFooterLinkBox(lang='en'):\n  \"\"\"Gets the promo boxes.\n\n  Args:\n      lang: The language to pick from.\n\n  Returns:\n      An HTML string with the appropriate footer.\n  \"\"\"\n  memcacheKey = 'footerLinkBoxes-' + lang\n  result = getFromMemCache(memcacheKey)\n  if result is None:\n    result = ''\n    footer = yaml.load(readFile('_footer.yaml', lang))\n    if 'linkboxes' in footer['footer'][1]:\n      for linkBox in footer['footer'][1]['linkboxes']:\n        result += '<li class=\"devsite-footer-linkbox\">'\n        result += '<h3 class=\"devsite-footer-linkbox-heading\">'\n        result += linkBox['name'] + '</h3>'\n        result += '<ul class=\"devsite-footer-linkbox-list\">'\n        for linkItem in linkBox['contents']:\n          result += '<li class=\"devsite-footer-linkbox-item\">'\n          result += '<a href=\"' + linkItem['path'] + '\">'\n          result += linkItem['label'] + '</a></li>'\n        result += '</ul>'\n        result += '</li>'\n      setMemCache(memcacheKey, result, 60)\n  return result\n"
        },
        {
          "name": "devsiteIndex.py",
          "type": "blob",
          "size": 1.8369140625,
          "content": "import os\nimport logging\nimport devsiteHelper\nimport devsiteParseMD\nimport devsiteParseHTML\nimport devsiteParseYAML\n\nSOURCE_PATH = os.path.join(os.path.dirname(__file__), 'src/content')\n\ndef getPage(requestPath, lang):\n  fileLocations = [\n    os.path.join(SOURCE_PATH, lang, requestPath, '_index.yaml'),\n    os.path.join(SOURCE_PATH, 'en', requestPath, '_index.yaml'),\n    os.path.join(SOURCE_PATH, lang, requestPath, 'index.md'),\n    os.path.join(SOURCE_PATH, 'en', requestPath, 'index.md'),\n    os.path.join(SOURCE_PATH, 'lang', requestPath, 'index.html'),\n    os.path.join(SOURCE_PATH, 'en', requestPath, 'index.html')\n  ]\n  for fileLocation in fileLocations:\n    if os.path.isfile(fileLocation):\n      content = open(fileLocation, 'r').read()\n      content = content.decode('utf8')\n      if fileLocation.endswith('_index.yaml'):\n        return devsiteParseYAML.parse(requestPath, fileLocation, content, lang)\n      if fileLocation.endswith('index.md'):\n        return devsiteParseMD.parse(requestPath, fileLocation, content, lang)\n      if fileLocation.endswith('index.html'):\n        return devsiteParseHTML.parse(requestPath, fileLocation, content, lang)\n  return None\n\n\ndef getDirIndex(requestPath):\n  result = None\n  if os.environ['SERVER_SOFTWARE'].startswith('Dev'):\n    result = ''\n    result += '<h1>Generated Listing Page</h1>\\n'\n    result += '<aside class=\"warning\" markdown=\"1\"><strong>Oops</strong> '\n    result += '<span>Looks like you forgot to build the index files. Try '\n    result += 'running <code>gulp build</code> from the command line.'\n    result += '</span></aside>'\n    fileList = os.listdir(os.path.join(SOURCE_PATH, 'en', requestPath))\n    for f in fileList:\n      if not f.startswith('_'):\n        link = os.path.join('/web', requestPath, os.path.splitext(f)[0])\n        result += '<li><a href=\"' + link + '\">' + link + '</a></li>'\n  return result\n"
        },
        {
          "name": "devsitePage.py",
          "type": "blob",
          "size": 1.0126953125,
          "content": "import os\nimport logging\nimport devsiteParseMD\nimport devsiteParseHTML\n\nSOURCE_PATH = os.path.join(os.path.dirname(__file__), 'src/content/')\n\ndef getPage(requestPath, lang):\n  fileLocations = [\n    os.path.join(SOURCE_PATH, lang, requestPath) + '.md',\n    os.path.join(SOURCE_PATH, lang, requestPath) + '.html',\n    os.path.join(SOURCE_PATH, lang, requestPath) + '.jshtml',\n    os.path.join(SOURCE_PATH, 'en', requestPath) + '.md',\n    os.path.join(SOURCE_PATH, 'en', requestPath) + '.html',\n    os.path.join(SOURCE_PATH, 'en', requestPath) + '.jshtml',\n  ]\n  for fileLocation in fileLocations:\n    if os.path.isfile(fileLocation):\n      content = open(fileLocation, 'r').read()\n      content = content.decode('utf8')\n      if fileLocation.endswith('.jshtml'):\n        return content\n      if fileLocation.endswith('.md'):\n        return devsiteParseMD.parse(requestPath, fileLocation, content, lang)\n      if fileLocation.endswith('.html'):\n        return devsiteParseHTML.parse(requestPath, fileLocation, content, lang)\n  return None\n"
        },
        {
          "name": "devsiteParseHTML.py",
          "type": "blob",
          "size": 4.6474609375,
          "content": "import os\nimport re\nimport yaml\nimport logging\nimport devsiteHelper\nfrom google.appengine.ext.webapp.template import render\n\nSOURCE_PATH = os.path.join(os.path.dirname(__file__), 'src/content/')\nSERVED_FROM_AE = not os.environ['SERVER_SOFTWARE'].startswith('Dev')\n\ndef parse(requestPath, fileLocation, content, lang='en'):\n  context = {\n    'lang': lang,\n    'requestPath': requestPath.replace('/index', ''),\n    'bodyClass': 'devsite-doc-page',\n    'servedFromAppEngine': SERVED_FROM_AE\n  }\n\n  ## Get the HTML tag\n  htmlTag = re.search(r'<html.*?>', content)\n  if htmlTag is None:\n    logging.warning('Does not contain <html> root element')\n  else:\n    htmlTag = htmlTag.group(0)\n    # Check the HTML tag contains the devsite\n    if htmlTag.find('devsite') == -1:\n      return content\n\n  # Isolate the <head>\n  headStart = content.find('<head')\n  headEnd = content.find('</head>')\n  head = content[headStart:headEnd].strip()\n\n  # Isolate the <body>\n  bodyStart = content.find('<body')\n  bodyEnd = content.rfind('</body>')\n  body = content[bodyStart:bodyEnd].strip()\n  body = re.sub(r'<body.*?>', '', body)\n\n  # Remove any comments {# something #}\n  body = re.sub(r'{#.+?#}', '', body)\n  body = re.sub(r'{% comment %}.*?{% endcomment %}(?ms)', '', body)\n\n  # Render any DevSite specific tags\n  body = devsiteHelper.renderDevSiteContent(body, lang)\n\n  # Read the project.yaml file\n  projectPath = re.search('name=\\\"project_path\\\" value=\\\"(.*?)\\\"', head)\n  projectPath = projectPath.group(1)\n  projectYaml = yaml.load(devsiteHelper.readFile(projectPath, lang))\n  context['projectYaml'] = projectYaml\n\n  # Read the parent project.yaml file if applicable\n  parentProjectYaml = None\n  if 'parent_project_metadata_path' in projectYaml:\n    parentprojectPath = projectYaml['parent_project_metadata_path']\n    parentProjectYaml = yaml.load(devsiteHelper.readFile(parentprojectPath, lang))\n\n  # Read the book.yaml file and generate the left hand nav\n  bookPath = re.search('name=\\\"book_path\\\" value=\\\"(.*?)\\\"', head)\n  bookPath = bookPath.group(1)\n  bookYaml = devsiteHelper.parseBookYaml(bookPath, lang)\n  context['bookYaml'] = devsiteHelper.expandBook(bookYaml)\n  context['lowerTabs'] = devsiteHelper.getLowerTabs(bookYaml)\n  context['renderedLeftNav'] = devsiteHelper.getLeftNav(requestPath, bookYaml)\n\n  # Get the logo row (TOP ROW) icon\n  context['logoRowIcon'] = projectYaml['icon']['path']\n\n  # Get the logo row (TOP ROW) title\n  if parentProjectYaml:\n    context['logoRowTitle'] = parentProjectYaml['name']\n  else:\n    context['logoRowTitle'] = projectYaml['name']\n\n  # Get the header title & description\n  context['headerTitle'] = projectYaml['name']\n  # headerDescription is rarely shown, hiding temporarily\n  # context['headerDescription'] = projectYaml['description']\n\n  # Read the page title\n  pageTitle = []\n  titleRO = re.search('<title>(.*?)</title>', head)\n  if titleRO:\n    title = titleRO.group(1)\n    pageTitle.append(title)\n    if body.find('<h1>') == -1:\n      body = '<h1 class=\"page-title\">' + title + '</h1>\\n\\n' + body\n  pageTitle.append(projectYaml['name'])\n  pageTitle.append('WebFu Staging')\n  context['pageTitle'] = ' | '.join(pageTitle)\n\n  # Get the footer path & read/parse the footer file.\n  footerPath = projectYaml['footer_path']\n  footers = yaml.load(devsiteHelper.readFile(footerPath, lang))['footer']\n  for item in footers:\n    if 'promos' in item:\n      context['footerPromos'] = item['promos']\n    elif 'linkboxes' in item:\n      context['footerLinks'] = item['linkboxes']\n\n  # Replaces <pre> tags with prettyprint enabled tags\n  body = re.sub(r'^<pre>(?m)', r'<pre class=\"prettyprint devsite-code-highlight\">', body)\n  # Adds code highlighting support, which requires devsite-code-highlight\n  body = re.sub(r'^<pre class=\"prettyprint\">(?m)', r'<pre class=\"prettyprint devsite-code-highlight\">', body)\n\n  context['content'] = body\n\n  # Checks if the page should be displayed in full width mode\n  fullWidth = re.search('name=\\\"full_width\\\" value=\\\"true\\\"', head)\n  if fullWidth:\n    context['fullWidth'] = True\n\n  # # Build the table of contents & transform so it fits within DevSite\n  context['renderedTOC'] = '<b>TOC Not Implemented</b> for DevSite HTML Pages'\n\n  gitHubEditUrl = 'https://github.com/google/WebFundamentals/blob/'\n  gitHubEditUrl += 'main/src/content/'\n  gitHubEditUrl += fileLocation.replace(SOURCE_PATH, '')\n  context['gitHubEditUrl'] = gitHubEditUrl\n\n  gitHubIssueUrl = 'https://github.com/google/WebFundamentals/issues/'\n  gitHubIssueUrl += 'new?title=Feedback for: ' + context['pageTitle'] + ' ['\n  gitHubIssueUrl += lang + ']&body='\n  gitHubIssueUrl += gitHubEditUrl\n  context['gitHubIssueUrl'] = gitHubIssueUrl\n\n  # Renders the content into the template\n  return render('gae/page-article.html', context)\n"
        },
        {
          "name": "devsiteParseMD.py",
          "type": "blob",
          "size": 6.5927734375,
          "content": "import os\nimport re\nimport yaml\nimport logging\nimport markdown\nimport devsiteHelper\nfrom google.appengine.ext.webapp.template import render\n\nSOURCE_PATH = os.path.join(os.path.dirname(__file__), 'src/content/')\nSERVED_FROM_AE = not os.environ['SERVER_SOFTWARE'].startswith('Dev')\n\ndef parse(requestPath, fileLocation, content, lang='en'):\n  context = {\n    'lang': lang,\n    'requestPath': requestPath.replace('/index', ''),\n    'bodyClass': 'devsite-doc-page',\n    'servedFromAppEngine': SERVED_FROM_AE\n  }\n\n  ## Injects markdown includes into the markdown as appropriate\n  includes = re.findall(r'^<<.+?\\.md>>(?m)', content)\n  for includeTag in includes:\n    fileName = includeTag.replace('<<', '').replace('>>', '')\n    fileName = os.path.join(os.path.dirname(fileLocation), fileName)\n    include = devsiteHelper.readFile(fileName, lang)\n    if include is None:\n      include = 'Warning: Unable to find included markdown file.\\n\\n'\n    content = content.replace(includeTag, include)\n\n  # Remove any comments {# something #}\n  content = re.sub(r'{#.+?#}', '', content)\n  content = re.sub(r'{% comment %}.*?{% endcomment %}(?ms)', '', content)\n\n  # Remove any markdown=1 since it's not supported\n  content = re.sub(r'markdown=[\\'\\\"]?1[\\'\\\"]?', '', content)\n\n  # Render any DevSite specific tags\n  content = devsiteHelper.renderDevSiteContent(content, lang)\n\n  # Turn Callouts into the appropriate HTML elements\n  content = re.sub(r'^Note: (.*?)\\n^\\n(?ms)', r'<aside class=\"note\" markdown=\"1\"><strong>Note:</strong> <span>\\1</span></aside>', content)\n  content = re.sub(r'^Caution: (.*?)\\n^\\n(?ms)', r'<aside class=\"caution\" markdown=\"1\"><strong>Caution:</strong> <span>\\1</span></aside>', content)\n  content = re.sub(r'^Warning: (.*?)\\n^\\n(?ms)', r'<aside class=\"warning\" markdown=\"1\"><strong>Warning:</strong> <span>\\1</span></aside>', content)\n  content = re.sub(r'^Key Point: (.*?)\\n^\\n(?ms)', r'<aside class=\"key-point\" markdown=\"1\"><strong>Key Point:</strong> <span>\\1</span></aside>', content)\n  content = re.sub(r'^Key Term: (.*?)\\n^\\n(?ms)', r'<aside class=\"key-term\" markdown=\"1\"><strong>Key Term:</strong> <span>\\1</span></aside>', content)\n  content = re.sub(r'^Objective: (.*?)\\n^\\n(?ms)', r'<aside class=\"objective\" markdown=\"1\"><strong>Objective:</strong> <span>\\1</span></aside>', content)\n  content = re.sub(r'^Success: (.*?)\\n^\\n(?ms)', r'<aside class=\"success\" markdown=\"1\"><strong>Success:</strong> <span>\\1</span></aside>', content)\n  content = re.sub(r'^Dogfood: (.*?)\\n^\\n(?ms)', r'<aside class=\"dogfood\" markdown=\"1\"><strong>Dogfood:</strong> <span>\\1</span></aside>', content)\n\n  # Adds a set of markdown extensions available to us on DevSite\n  ext = [\n    'markdown.extensions.attr_list', # Adds support for {: #someid }\n    'markdown.extensions.meta', # Removes the meta data from the top of the doc\n    'markdown.extensions.toc', # Generate the TOC for the right side\n    'markdown.extensions.tables', # Support for Markdown Tables\n    'markdown.extensions.def_list', # Support for definition lists\n    'markdown.extensions.extra' #\n  ]\n  md = markdown.Markdown(extensions=ext)\n  content = md.convert(content)\n\n  # Replaces <pre> tags with prettyprint enabled tags\n  content = re.sub(r'^<pre>(?m)', r'<pre class=\"prettyprint devsite-code-highlight\">', content)\n  # Adds code highlighting support, which requires devsite-code-highlight\n  content = re.sub(r'^<pre class=\"prettyprint\">(?m)', r'<pre class=\"prettyprint devsite-code-highlight\">', content)\n\n  # Save the content\n  context['content'] = content\n\n  # Get the project_path and read/parse the project file.\n  projectPath = md.Meta['project_path'][0]\n  projectYaml = yaml.load(devsiteHelper.readFile(projectPath, lang))\n  context['projectYaml'] = projectYaml\n\n  # Read the parent project.yaml file if applicable\n  parentProjectYaml = None\n  if 'parent_project_metadata_path' in projectYaml:\n    parentprojectPath = projectYaml['parent_project_metadata_path']\n    parentProjectYaml = yaml.load(devsiteHelper.readFile(parentprojectPath, lang))\n\n  # Reads the book.yaml file and generate the lefthand nav\n  bookPath = md.Meta['book_path'][0]\n  bookYaml = devsiteHelper.parseBookYaml(bookPath, lang)\n  context['bookYaml'] = devsiteHelper.expandBook(bookYaml)\n  # context['lowerTabs'] = devsiteHelper.getLowerTabs(bookYaml)\n  context['renderedLeftNav'] = devsiteHelper.getLeftNav(requestPath, bookYaml)\n\n  lowerTabs = devsiteHelper.getLowerTabs(bookYaml)\n  context['lowerTabs'] = lowerTabs\n\n  # Get the logo row (TOP ROW) icon\n  context['logoRowIcon'] = projectYaml['icon']['path']\n\n  # Get the logo row (TOP ROW) title\n  if parentProjectYaml:\n    context['logoRowTitle'] = parentProjectYaml['name']\n  else:\n    context['logoRowTitle'] = projectYaml['name']\n\n  # Get the header title & description\n  context['headerTitle'] = projectYaml['name']\n  # headerDescription is rarely shown, hiding temporarily\n  # context['headerDescription'] = projectYaml['description']\n\n  # Get the page title\n  pageTitle = []\n  titleRO = re.search(r'<h1 class=\"page-title\".*?>(.*?)<\\/h1>', content)\n  if titleRO:\n    pageTitle.append(titleRO.group(1))\n  pageTitle.append(projectYaml['name'])\n  pageTitle.append('WebFu Staging')\n  context['pageTitle'] = ' | '.join(pageTitle)\n\n  # Get the footer path & read/parse the footer file.\n  footerPath = projectYaml['footer_path']\n  footers = yaml.load(devsiteHelper.readFile(footerPath, lang))['footer']\n  for item in footers:\n    if 'promos' in item:\n      context['footerPromos'] = item['promos']\n    elif 'linkboxes' in item:\n      context['footerLinks'] = item['linkboxes']\n\n  if 'full_width' in md.Meta and len(md.Meta['full_width']) == 1:\n    context['fullWidth'] = True\n\n  # Build the table of contents & transform so it fits within DevSite\n  toc = md.toc\n  toc = toc.strip()\n  # Strips the outer wrapper and the page title from the doc\n  toc = re.sub(r'<div class=\"toc\">(.*?<ul>){2}(?s)', '', toc)\n  toc = re.sub(r'</ul>\\s*</li>\\s*</ul>\\s*</div>(?s)', '', toc)\n  # Add appropriate classes\n  toc = re.sub(r'<ul>', '<ul class=\"devsite-page-nav-list\">', toc)\n  toc = re.sub(r'<a href', '<a class=\"devsite-nav-title\" href', toc)\n  toc = re.sub(r'<li>', '<li class=\"devsite-nav-item\">', toc)\n  context['renderedTOC'] = toc;\n\n  gitHubEditUrl = 'https://github.com/google/WebFundamentals/blob/'\n  gitHubEditUrl += 'main/src/content/'\n  gitHubEditUrl += fileLocation.replace(SOURCE_PATH, '')\n  context['gitHubEditUrl'] = gitHubEditUrl\n\n  gitHubIssueUrl = 'https://github.com/google/WebFundamentals/issues/'\n  gitHubIssueUrl += 'new?title=Feedback for: ' + context['pageTitle'] + ' ['\n  gitHubIssueUrl += lang + ']&body='\n  gitHubIssueUrl += gitHubEditUrl\n  context['gitHubIssueUrl'] = gitHubIssueUrl\n\n  return render('gae/page-article.html', context)\n"
        },
        {
          "name": "devsiteParseYAML.py",
          "type": "blob",
          "size": 3.9111328125,
          "content": "import os\nimport yaml\nimport logging\nimport devsitePage\nimport devsiteHelper\nfrom google.appengine.ext.webapp.template import render\n\nSOURCE_PATH = os.path.join(os.path.dirname(__file__), 'src/content')\nSERVED_FROM_AE = not os.environ['SERVER_SOFTWARE'].startswith('Dev')\n\ndef parse(requestPath, fileLocation, rawYaml, lang='en'):\n  context = {\n    'lang': lang,\n    'requestPath': requestPath.replace('/index', ''),\n    'bodyClass': 'devsite-landing-page',\n    'servedFromAppEngine': SERVED_FROM_AE\n  }\n\n  # Parse the Yaml\n  parsedYaml = yaml.load(rawYaml)\n  page = parsedYaml['landing_page']\n  if 'body_class' in page:\n    context['bodyClass'] += ' ' + page['body_class']\n\n  # Get the project_path and read/parse the project file.\n  projectPath = parsedYaml['project_path']\n  projectYaml = yaml.load(devsiteHelper.readFile(projectPath, lang))\n  context['projectYaml'] = projectYaml\n\n  # Read the parent project.yaml file if applicable\n  parentProjectYaml = None\n  if 'parent_project_metadata_path' in projectYaml:\n    parentprojectPath = projectYaml['parent_project_metadata_path']\n    parentProjectYaml = yaml.load(devsiteHelper.readFile(parentprojectPath, lang))\n\n  # Get the book path and read/parse the book file, then add the lower tabs.\n  bookPath = parsedYaml['book_path']\n  bookYaml = devsiteHelper.parseBookYaml(bookPath, lang)\n  context['bookYaml'] = devsiteHelper.expandBook(bookYaml)\n  context['lowerTabs'] = devsiteHelper.getLowerTabs(bookYaml)\n\n  # Get the row or column count for each row\n  for row in page['rows']:\n    if 'items' in row:\n      count = len(row['items'])\n      row['itemCount'] = count\n      for item in row['items']:\n        if 'custom_html' in item:\n          c = item['custom_html']\n          item['custom_html'] = devsiteHelper.renderDevSiteContent(c, lang)\n    elif 'columns' in row:\n      count = len(row['columns'])\n      row['itemCount'] = count\n    elif 'custom_html' in row:\n      row['itemCount'] = 1\n      c = row['custom_html']\n      row['custom_html'] = devsiteHelper.renderDevSiteContent(c, lang)\n  context['rows'] = page['rows']\n\n  # Get the custom CSS path\n  if 'custom_css_path' in page:\n    context['customCSSPath'] = page['custom_css_path']\n\n  # Get the logo row (TOP ROW) icon\n  context['logoRowIcon'] = projectYaml['icon']['path']\n\n  # Get the logo row (TOP ROW) title\n  if 'header' in page and 'name' in page['header']:\n    context['logoRowTitle'] = page['header']['name']\n  elif parentProjectYaml:\n    context['logoRowTitle'] = parentProjectYaml['name']\n  else:\n    context['logoRowTitle'] = projectYaml['name']\n\n  # Get the custom_html for the header if appropriate\n  if 'header' in page and 'custom_html' in page['header']:\n    context['customHeader'] = page['header']['custom_html']\n\n  # Get the header title\n  if 'parent_project_metadata_path' in projectYaml:\n    context['headerTitle'] = projectYaml['name']\n  elif 'title' in parsedYaml:\n    context['headerTitle'] = parsedYaml['title']\n  else:\n    context['headerTitle'] = projectYaml['name']\n\n  # Get the header description\n  if 'header' in page and 'description' in page['header']:\n    context['headerDescription'] = page['header']['description']\n  else:\n    context['headerDescription'] = projectYaml['description']\n\n  # Get the header buttons\n  if 'header' in page and 'buttons' in page['header']:\n    context['headerButtons'] = page['header']['buttons']\n\n  # Set the page title\n  pageTitle = []\n  if 'title' in parsedYaml:\n    pageTitle.append(parsedYaml['title'])\n  pageTitle.append(projectYaml['name'])\n  pageTitle.append('WebFu Staging')\n  context['pageTitle'] = ' | '.join(pageTitle)\n\n  # Get the footer path & read/parse the footer file.\n  footerPath = projectYaml['footer_path']\n  footers = yaml.load(devsiteHelper.readFile(footerPath, lang))['footer']\n  for item in footers:\n    if 'promos' in item:\n      context['footerPromos'] = item['promos']\n    elif 'linkboxes' in item:\n      context['footerLinks'] = item['linkboxes']\n\n  return render('gae/page-landing.html', context)\n\n\n\n"
        },
        {
          "name": "gae",
          "type": "tree",
          "content": null
        },
        {
          "name": "gulp-tasks",
          "type": "tree",
          "content": null
        },
        {
          "name": "gulpfile.js",
          "type": "blob",
          "size": 5.365234375,
          "content": "/**\n * @fileoverview Primary gulp file.\n */\n\n'use strict';\n\nconst del = require('del');\nconst gulp = require('gulp');\nconst chalk = require('chalk');\nconst gutil = require('gulp-util');\nconst minimist = require('minimist');\nconst requireDir = require('require-dir');\n\nrequireDir('./gulp-tasks');\nrequireDir('./gulp-tasks/workbox');\nrequireDir('./gulp-tasks/puppeteer');\n\ngutil.log('---------------------------------');\ngutil.log(`${chalk.dim('Web')}${chalk.bold('Fundamentals')} Gulp`);\ngutil.log('---------------------------------');\n\n/** ***************************************************************************\n * Global config\n *****************************************************************************/\nglobal.WF = {\n  gae: 'appengine-config',\n  src: {\n    content: 'src/content/en/',\n    data: 'src/data/',\n    templates: 'src/templates/',\n  },\n  maxArticlesInFeed: 10,\n  minFeedDate: 2010,\n  langs: [\n    'en', 'ar', 'de', 'es', 'fr', 'he', 'hi', 'id', 'it', 'ja',\n    'ko', 'nl', 'pl', 'pt-br', 'ru', 'th', 'tr', 'vi', 'zh-cn', 'zh-tw',\n  ],\n};\n\n/** ***************************************************************************\n * Default options\n *****************************************************************************/\nconst defaultOptions = {\n  boolean: ['buildRSS', 'verbose', 'testAll', 'testTests', 'testWarnOnly'],\n  string: ['lang', 'buildType'],\n  default: {\n    lang: null,\n    verbose: false,\n    buildRSS: false,\n    buildType: 'dev',\n    testAll: false,\n    testTests: false,\n    testWarnOnly: false,\n  },\n};\n\n/** ***************************************************************************\n * Argument Parser\n *****************************************************************************/\n// Parse arguments using minimist\nglobal.WF.options = minimist(process.argv.slice(2), defaultOptions);\n\n// What languages should it handle\nif (global.WF.options.lang) {\n  const langs = global.WF.options.lang.split(',');\n  langs.forEach(function(lang) {\n    if (global.WF.langs.indexOf(lang) === -1) {\n      const msg = `Language ${chalk.red(lang)} not supported.`;\n      gutil.log(' ', chalk.red('ERROR:'), msg);\n      process.exit(1);\n    }\n  });\n  global.WF.options.lang = langs;\n  gutil.log('Language: ', gutil.colors.cyan(global.WF.options.lang));\n} else {\n  global.WF.options.lang = global.WF.langs;\n}\n\n// Build RSS\ngutil.log('Build RSS Files:', gutil.colors.cyan(global.WF.options.buildRSS));\n\n// Show verbose output\nif (global.WF.options.verbose) {\n  gutil.log('Verbose: ', gutil.colors.cyan(global.WF.options.verbose));\n}\n\n// Test all files\nif (global.WF.options.testAll) {\n  gutil.log('testAll:', chalk.cyan('true'));\n}\n\n// Test test files\nif (global.WF.options.testTests) {\n  gutil.log('testTests:', chalk.cyan('true'));\n}\n\n// Warn only, no errors\nif (global.WF.options.testWarnOnly) {\n  gutil.log('testWarnOnly: ', gutil.colors.cyan('true'));\n}\n\ngutil.log('');\n\n/** ***************************************************************************\n * Gulp Tasks\n *****************************************************************************/\n\n/**\n * Cleans any generated files.\n */\ngulp.task('clean', function() {\n  const filesToDelete = [\n    'test-results.json',\n    'src/content/en/_shared/contributors/*',\n    'src/content/en/_shared/latest_*.html',\n    'src/content/**/rss.xml',\n    'src/content/**/atom.xml',\n    'src/content/**/_files.json',\n    'src/content/*/_index-latest-*.html',\n    'src/content/en/sitemap.xml',\n    'src/content/*/fundamentals/glossary.md',\n    'src/content/*/resources/contributors/*',\n    'src/content/*/showcase/_index.yaml',\n    'src/content/*/showcase/*/_toc.yaml',\n    'src/content/*/showcase/*/index.md',\n    'src/content/*/showcase/tags/*',\n    'src/content/*/shows/_index.yaml',\n    'src/content/*/shows/index.md',\n    'src/content/*/shows/**/feed.xml',\n    'src/content/*/shows/http203/podcast/index.md',\n    'src/content/*/shows/designer-vs-developer/podcast/index.md',\n    'src/content/*/tools/puppeteer/_src',\n    'src/content/*/updates/_index.yaml',\n    'src/content/*/updates/*/index.md',\n    'src/content/*/updates/20??/_toc.yaml',\n    'src/content/*/updates/tags/*',\n    'src/data/codelabs/*/*.md',\n    'src/data/codelabs/*/img/**',\n    'src/data/ilt-pwa/*/*.md',\n    'src/data/ilt-pwa/*/img/**',\n    '!src/content/*/**/_generated.md',\n  ];\n  const opts = {dryRun: false, dot: true};\n  const deletedFiles = del.sync(filesToDelete, opts);\n  gutil.log(' ', 'Deleted', chalk.magenta(deletedFiles.length + ' files'));\n});\n\n/**\n * Shows help.\n */\ngulp.task('default', function(cb) {\n  gutil.log(chalk.red('ERROR:'), 'no command specified.');\n  gutil.log('Usage: gulp <command> [arguments]');\n  gutil.log(' ', 'Commands:');\n  gutil.log('  ', chalk.cyan('build'), 'Builds all auto-generated files');\n  gutil.log('  ', chalk.cyan('clean'), 'Removes all auto-generated files');\n  gutil.log('  ', chalk.cyan('test'), 'Checks the files for any issues');\n  gutil.log(' ', 'Optional Arguments:');\n  const langDesc = 'Comma separated list of languages to use';\n  const langExamp = chalk.gray('eg: --lang=en,fr');\n  gutil.log('  ', chalk.cyan('--lang'), langDesc, langExamp);\n  gutil.log('  ', chalk.cyan('--buildRSS'), 'Build RSS/ATOM files');\n  gutil.log('  ', chalk.cyan('--verbose'), 'Log with verbose output');\n  gutil.log('  ', chalk.cyan('--testAll'), 'Test all files, not just open');\n  gutil.log('  ', chalk.cyan('--testTests'), 'Test the test files');\n  gutil.log('  ', chalk.cyan('--testWarnOnly'), 'Only throw warnings');\n});\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.94921875,
          "content": "{\n  \"name\": \"WebFundamentals\",\n  \"version\": \"2.0.0\",\n  \"description\": \"Google Web Fundamentals\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/google/WebFundamentals.git\"\n  },\n  \"keywords\": [\n    \"web\",\n    \"fundamentals\"\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/google/WebFundamentals/issues\"\n  },\n  \"homepage\": \"https://github.com/google/WebFundamentals\",\n  \"engines\": {\n    \"node\": \">=10\"\n  },\n  \"devDependencies\": {\n    \"eslint\": \"^4.12.0\",\n    \"eslint-config-google\": \"^0.9.1\",\n    \"gulp-remark\": \"^3.0.0\",\n    \"gulp-replace\": \"^1.0.0\",\n    \"husky\": \"^0.14.3\",\n    \"inquirer\": \"^3.3.0\",\n    \"jsdoc-baseline\": \"^0.1.5\",\n    \"workbox-build\": \"^6.2.0\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@google-cloud/translate\": \"^2.1.2\",\n    \"chalk\": \"^1.1.3\",\n    \"commander\": \"^2.19.0\",\n    \"del\": \"^2.2.2\",\n    \"fs-extra\": \"^4.0.1\",\n    \"github\": \"^8.1.1\",\n    \"glob\": \"^7.1.2\",\n    \"globule\": \"^1.0.0\",\n    \"googleapis\": \"^31.0.2\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-cli\": \"^2.3.0\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-util\": \"^3.0.7\",\n    \"handlebars\": \"^4.0.5\",\n    \"handlebars-helpers\": \"0.8.4\",\n    \"js-yaml\": \"^3.6.1\",\n    \"jsdoc\": \"^3.5.5\",\n    \"jsonschema\": \"^1.2.0\",\n    \"marked\": \"^0.3.6\",\n    \"mdast-util-to-string\": \"^1.0.2\",\n    \"minimist\": \"^1.2.0\",\n    \"mkdirp\": \"^0.5.1\",\n    \"moment\": \"^2.14.1\",\n    \"parse-diff\": \"^0.4.0\",\n    \"remark\": \"^6.2.0\",\n    \"remark-html\": \"^5.1.0\",\n    \"remark-lint\": \"^5.4.0\",\n    \"remote-git-tags\": \"^2.0.0\",\n    \"request\": \"^2.83.0\",\n    \"require-dir\": \"^0.3.0\",\n    \"rsync\": \"^0.5.0\",\n    \"run-sequence\": \"^1.2.2\",\n    \"semver\": \"^5.4.1\",\n    \"unist-util-generated\": \"^1.1.0\",\n    \"unist-util-visit\": \"^1.1.1\",\n    \"vfile\": \"^2.0.1\"\n  },\n  \"scripts\": {\n    \"build\": \"gulp build\",\n    \"clean\": \"gulp clean\",\n    \"start\": \"./start-appengine.sh\",\n    \"test\": \"gulp test\",\n    \"precommit\": \"gulp update-updated_on\",\n    \"prepush\": \"npm test\",\n    \"prestart\": \"gulp build\",\n    \"postinstall\": \"gulp post-install\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "start-appengine.sh",
          "type": "blob",
          "size": 0.2236328125,
          "content": "#!/bin/bash\nset -e\n\nport=$1\nif [ \"$port\" == \"\" ]; then\n  port='8080'\nfi\n\n# tools/update-resources.sh\n\necho \"Starting server on: http://localhost:\"$port\"/\"\n\ndev_appserver.py app.yaml --dev_appserver_log_level warning --port $port\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "web-fundamentals-icon.svg",
          "type": "blob",
          "size": 0.9697265625,
          "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:v=\"http://vecta.io\" width=\"192\" height=\"192\" viewBox=\"0 0 192 192\" ><style><![CDATA[svg{stroke:#000;stroke-linecap:round;stroke-linejoin:round;fill:#fff;fill-rule:evenodd;font-family:Roboto;font-size:14px;text-anchor:middle} svg text{stroke:none}]]></style><g transform=\"translate(0.5 0.5)\" stroke=\"none\"><g transform=\"translate(11.5 15.5)\"><path d=\"M 51.5 0 L 118.5 0 L 115.5 39.5 L 148 26 L 169.25 87.25 L 132 97.5 L 156.5 129 L 104 167.5 L 83.25 135.5 L 63.25 167 L 9.75 128.75 L 35.5 97.5 L 0 87 L 20 26.5 L 54.5 40.25 Z\" stroke-linejoin=\"miter\" fill=\"#3372DF\" stroke=\"none\" stroke-opacity=\"1\"/></g><g transform=\"translate(33.5 33.5)\"><path d=\"M 49 0 L 76.75 0 L 73.25 49.25 L 115 31.75 L 124.75 57.5 L 80.5 70.25 L 109.5 107.5 L 87 124.5 L 61.25 84.75 L 36.25 124.5 L 12.75 107.5 L 44.25 69.5 L 0 57.5 L 9 32 L 52 49 Z\" stroke-linejoin=\"miter\" stroke=\"none\" stroke-opacity=\"1\"/></g><g></g></g></svg>"
        }
      ]
    }
  ]
}