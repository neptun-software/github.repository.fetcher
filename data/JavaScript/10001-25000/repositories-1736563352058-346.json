{
  "metadata": {
    "timestamp": 1736563352058,
    "page": 346,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Matt-Esch/virtual-dom",
      "stars": 11684,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2021484375,
          "content": "# editorconfig.org\nroot = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.16015625,
          "content": ".idea/\n.DS_Store\n.monitor\n.*.swp\n.nodemonignore\nreleases\n*.log\n*.err\nfleet.json\npublic/browserify\nbin/*.json\n.bin\nbuild\ncompile\n.lock-wscript\ncoverage\nnode_modules\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 0.845703125,
          "content": "{\n    \"asi\": true,\n    \"bitwise\": false,\n    \"camelcase\": true,\n    \"curly\": false,\n    \"eqeqeq\": true,\n    \"eqnull\": true,\n    \"forin\": false,\n    \"immed\": true,\n    \"indent\": 4,\n    \"latedef\": \"nofunc\",\n    \"newcap\": false,\n    \"noarg\": true,\n    \"nonew\": true,\n    \"plusplus\": false,\n    \"proto\": true,\n    \"quotmark\": false,\n    \"regexp\": false,\n    \"undef\": true,\n    \"unused\": true,\n    \"strict\": false,\n    \"trailing\": true,\n    \"noempty\": true,\n    \"maxdepth\": 5,\n    \"maxparams\": 5,\n    \"globals\": {\n        \"console\": true,\n        \"Buffer\": true,\n        \"setTimeout\": true,\n        \"clearTimeout\": true,\n        \"setInterval\": true,\n        \"clearInterval\": true,\n        \"require\": false,\n        \"module\": false,\n        \"exports\": true,\n        \"global\": false,\n        \"process\": true,\n        \"__dirname\": false,\n        \"__filename\": false\n    }\n}\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.5439453125,
          "content": "language: node_js\nnode_js:\n- '0.10'\n- '0.12'\nbefore_install:\n- npm install npm -g\nbefore_script:\n- npm install\n- npm install istanbul coveralls\nscript: npm run travis-test\nenv:\n  global:\n  - secure: JTqjyeAoQmKLVH9SzSeIWy02DcY9WAkfIU/w8YotxIsELWbPyZ6seYBEhHiB+JYJ9UeuUgyYhZ144SPm6K8o5w+merMD7zMglr95a/8CJnjMBdPK2/0Rjckz9OcANao5k+Qm+QBBu3keo6dRtKX25g6WrKwOYu8OLz5cradzhLs=\n  - secure: OBCtZZfM5LZyT+fT84Kb7N0PP1JdTQQ3SymZD5Ac+JYK30gCG6UO/o713QjlI5yVG7qwdFlPQOYF2VVf7yw6dUvf6pKj51427b9nOir8Hb9XjWlpo/770dKxlvrNxtQ3kkygAJTU8Fe7Jbk30zJef/Be17C07viiCZs4sHsiZC8=\n"
        },
        {
          "name": ".zuul.yml",
          "type": "blob",
          "size": 0.3896484375,
          "content": "ui: tape\nconcurrency: 1\nbrowsers:\n  - name: chrome\n    version: [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, latest]\n  - name: ie\n    version: 6..latest\n  - name: firefox\n    version: 3..latest\n  - name: iphone\n    version: 4.3..latest\n  - name: ipad\n    version: 4.3..latest\n  - name: android\n    version: 4.0..latest\n  - name: opera\n    version: 11..latest\n  - name: safari\n    version: 5..latest\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.896484375,
          "content": "# Release Notes\n\n## v2.0.0\n\n  Provides fundamental fixes and tests for reordering of keyed nodes.\n\n  Everyone is encouraged to upgrade to v2. The main caveat of this upgrade\n  is that it changes the patch format to encode all of the move data,\n  instead of previously providing the mapping and expecting patch to work\n  out which moves are required. While this might limit options for\n  reordering, on the grounds of performance and debugging it made more\n  sense.\n\n  This is considered a breaking change for that reason. However, for those\n  of you who only consume `create`, `diff`, `patch` and `h`, this will\n  not affect your usage, and upgrading is recommended due to the bugs this\n  new version fixes.\n\n## v1.3.0\n\n  - Add optimization to AttributHook to prevent resetting attributes where\n    new hook instances are used but their values remain the same.\n\n  - Extend the interface of unhook to take the next value from diff.\n\n  - Fix bug where hook is called on unhook-only hooks.\n\n  - Code refactor: diffProps broken out into it's own file\n\n## v1.2.0\n\n  - Correctly sets SVG attributes that are namespaced using a (fixed)\n    attribute hook.\n\n  - Add CSS animation notes from github issue (css-animations.md)\n\n  - A hook with an `unhook` method and no `hook` method is now considered a\n    valid hook.\n\n  - Fixes issue where unhook was not called when a hook property is replaced\n    with a new value\n\n  - Fixes dist script update\n\n  - Update README to note that an instance of `dom-delegator` is required to\n    use the `ev-*` properties.\n\n## v1.1.0 - Element reordering\n\n  - Updates the way in which elements are reordered to increase performance\n    in common use cases.\n\n  - Adds additional SVG display attributes.\n\n# v1.0.0 - Sensible versioning begins\n\n# v0.0.24 - Fix destroy ordering\n\n  - Fixes a bug where widgets cannot be replaced by vnodes due to a bug in the\n    order of destroy patches.\n\n# v0.0.23 - Release notes begin\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.029296875,
          "content": "Copyright (c) 2014 Matt-Esch.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.541015625,
          "content": "# virtual-dom\n\nA JavaScript [DOM model](#dom-model) supporting [element creation](#element-creation), [diff computation](#diff-computation) and [patch operations](#patch-operations) for efficient re-rendering\n\n[![build status][1]][2]\n[![NPM version][3]][4]\n[![Coverage Status][5]][6]\n[![Davis Dependency status][7]][8]\n[![experimental](http://hughsk.github.io/stability-badges/dist/experimental.svg)](http://github.com/hughsk/stability-badges)\n[![Join the chat at https://gitter.im/Matt-Esch/virtual-dom](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/Matt-Esch/virtual-dom?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/mattesch.svg)](https://saucelabs.com/u/mattesch)\n\n## Motivation\n\nManual DOM manipulation is messy and keeping track of the previous DOM state is hard. A solution to this problem is to write your code as if you were recreating the entire DOM whenever state changes. Of course, if you actually recreated the entire DOM every time your application state changed, your app would be very slow and your input fields would lose focus.\n\n`virtual-dom` is a collection of modules designed to provide a declarative way of representing the DOM for your app. So instead of updating the DOM when your application state changes, you simply create a virtual tree or `VTree`, which looks like the DOM state that you want. `virtual-dom` will then figure out how to make the DOM look like this efficiently without recreating all of the DOM nodes.\n\n`virtual-dom` allows you to update a view whenever state changes by creating a full `VTree` of the view and then patching the DOM efficiently to look exactly as you described it. This results in keeping manual DOM manipulation and previous state tracking out of your application code, promoting clean and maintainable rendering logic for web applications.\n\n## Example\n\n```javascript\nvar h = require('virtual-dom/h');\nvar diff = require('virtual-dom/diff');\nvar patch = require('virtual-dom/patch');\nvar createElement = require('virtual-dom/create-element');\n\n// 1: Create a function that declares what the DOM should look like\nfunction render(count)  {\n    return h('div', {\n        style: {\n            textAlign: 'center',\n            lineHeight: (100 + count) + 'px',\n            border: '1px solid red',\n            width: (100 + count) + 'px',\n            height: (100 + count) + 'px'\n        }\n    }, [String(count)]);\n}\n\n// 2: Initialise the document\nvar count = 0;      // We need some app data. Here we just store a count.\n\nvar tree = render(count);               // We need an initial tree\nvar rootNode = createElement(tree);     // Create an initial root DOM node ...\ndocument.body.appendChild(rootNode);    // ... and it should be in the document\n\n// 3: Wire up the update logic\nsetInterval(function () {\n      count++;\n\n      var newTree = render(count);\n      var patches = diff(tree, newTree);\n      rootNode = patch(rootNode, patches);\n      tree = newTree;\n}, 1000);\n```\n[View on RequireBin](http://requirebin.com/?gist=5492847b9a9025e64bab)\n\n## Documentation\n\nYou can find the documentation for the seperate components\n  in their READMEs\n\n - For `create-element.js` see the [vdom README](vdom/README.md)\n - For `diff.js` see the [vtree README](vtree/README.md)\n - For `h.js` see the [virtual-hyperscript README](virtual-hyperscript/README.md)\n - For `patch.js` see the [vdom README](vdom/README.md)\n\nFor information about the type signatures of these modules feel\n  free to read the [javascript signature definition](docs.jsig)\n\n## DOM model\n\n`virtual-dom` exposes a set of objects designed for representing DOM nodes. A \"Document Object Model Model\" might seem like a strange term, but it is exactly that. It's a native JavaScript tree structure that represents a native DOM node tree. We call this a **VTree**\n\nWe can create a VTree using the objects directly in a verbose manner, or we can use the more terse virtual-hyperscript.\n\n### Example - creating a VTree using the objects directly\n\n```javascript\nvar VNode = require('virtual-dom/vnode/vnode');\nvar VText = require('virtual-dom/vnode/vtext');\n\nfunction render(data) {\n    return new VNode('div', {\n        className: \"greeting\"\n    }, [\n        new VText(\"Hello \" + String(data.name))\n    ]);\n}\n\nmodule.exports = render;\n```\n\n### Example - creating a VTree using virtual-hyperscript\n\n```javascript\nvar h = require('virtual-dom/h');\n\nfunction render(data) {\n    return h('.greeting', ['Hello ' + data.name]);\n}\n\nmodule.exports = render;\n```\n\nThe DOM model is designed to be efficient to create and read from. The reason why we don't just create a real DOM tree is that creating DOM nodes and reading the node properties is an expensive operation which is what we are trying to avoid. Reading some DOM node properties even causes side effects, so recreating the entire DOM structure with real DOM nodes simply isn't suitable for high performance rendering and it is not easy to reason about either.\n\nA `VTree` is designed to be equivalent to an immutable data structure. While it's not actually immutable, you can reuse the nodes in multiple places and the functions we have exposed that take VTrees as arguments never mutate the trees. We could freeze the objects in the model but don't for efficiency. (The benefits of an immutable-equivalent data structure will be documented in vtree or blog post at some point)\n\n\n\n## Element creation\n\n```haskell\ncreateElement(tree:VTree) -> DOMNode\n```\n\nGiven that we have created a `VTree`, we need some way to translate this into a real DOM tree of some sort. This is provided by `create-element.js`. When rendering for the first time we would pass a complete `VTree` to create-element function to create the equivalent DOM node.\n\n## Diff computation\n\n```haskell\ndiff(previous:VTree, current:VTree) -> PatchObject\n```\n\nThe primary motivation behind virtual-dom is to allow us to write code independent of previous state. So when our application state changes we will generate a new `VTree`. The `diff` function creates a set of DOM patches that, based on the difference between the previous `VTree` and the current `VTree`, will update the previous DOM tree to match the new `VTree`.\n\n## Patch operations\n\n```haskell\npatch(rootNode:DOMNode, patches:PatchObject) -> DOMNode newRootNode\n```\n\nOnce we have computed the set of patches required to apply to the DOM, we need a function that can apply those patches. This is provided by the `patch` function. Given a DOM root node and a set of DOM patches, the `patch` function will update the DOM. After applying the patches to the DOM, the DOM should look like the new `VTree`.\n\n\n## Original motivation\n\nvirtual-dom is heavily inspired by the inner workings of React by facebook. This project originated as a gist of ideas, which [we have linked to provide some background context](https://gist.github.com/Raynos/8414846).\n\n## Tools\n\n* [html2hscript](https://github.com/twilson63/html2hscript) - Parse HTML into hyperscript\n* [html2hscript.herokuapp.com](http://html2hscript.herokuapp.com/) - Online Tool that converts html snippets to hyperscript\n* [html2hyperscript](https://github.com/unframework/html2hyperscript) - Original commandline utility to convert legacy HTML markup into hyperscript\n\n\n[1]: https://secure.travis-ci.org/Matt-Esch/virtual-dom.svg\n[2]: https://travis-ci.org/Matt-Esch/virtual-dom\n[3]: https://badge.fury.io/js/virtual-dom.svg\n[4]: https://badge.fury.io/js/virtual-dom\n[5]: http://img.shields.io/coveralls/Matt-Esch/virtual-dom.svg\n[6]: https://coveralls.io/r/Matt-Esch/virtual-dom\n[7]: https://david-dm.org/Matt-Esch/virtual-dom.svg\n[8]: https://david-dm.org/Matt-Esch/virtual-dom\n"
        },
        {
          "name": "create-element.js",
          "type": "blob",
          "size": 0.0859375,
          "content": "var createElement = require(\"./vdom/create-element.js\")\n\nmodule.exports = createElement\n"
        },
        {
          "name": "diff.js",
          "type": "blob",
          "size": 0.0595703125,
          "content": "var diff = require(\"./vtree/diff.js\")\n\nmodule.exports = diff\n"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs.jsig",
          "type": "blob",
          "size": 4.52734375,
          "content": "--  A VHook is an object with a hook and unhook method.\n--  A VHook can be used to define your own apply property logic.\n--\n--  When a hook is found in the VProperties object in either\n--      `patch()` or `createElement()`, instead of setting\n--      or unsetting the property we will invoke `hook()` or\n--      `unhook()` respectively so you can define what setting\n--      and unsetting a property means.\ntype VHook : {\n    hook: (node: DOMElement, propertyName: String) => void,\n    unhook: (node: DOMElement, propertyName: String) => void\n}\n\ntype VPropertyName : String\ntype VPropertyValue : String | Boolean | Number\n\n--  A VProperties is a data structure that represents the\n--      set of properties that can be attached to a virtual node\n--\n--  Properties can be many things. The simplest case is a string\n--      property name and string or bool or number property value\n--\n--  You can also have hooks in your properties. You give a\n--      string hook name and a hook value. The hook will then\n--      be invoked as part of `patch()` and `createElement()`\n--      which allows you to set custom properties.\n--\n--  Next up, attributes and style are treated slightly\n--      differently. These keys are expected to have objects\n--      of string keys and string values and will have the\n--      correct `patch()` and `createElement()` logic for\n--      setting attributes and styles.\n--\n--  Finally properties can also have nested arbitrary objects\n--      of some key name to some value that is an object of\n--      string to bool or number or string.\ntype VProperties :\n    Object<propName: VPropertyName, propValue: VPropertyValue> &\n    Object<hookName: String, hook: VHook> &\n    Object<\"attributes\",\n        Object<attrName: String, attrValue: String>> &\n    Object<\"style\",\n        Object<styleName: String, styleValue: String>> &\n    Object<String, Object<\n        nestedPropName: VPropertyName,\n        nestedPropValue: VPropertyValue\n    >\n\n--  A VNode is a data structure that represents a virtual node\n--      in a virtual tree.\n--\n--  A virtual node consists of a tagName, a set of properties\n--      and a list of children. It also has meta data attached,\n--      namely a key and a namespace.\ntype VNode : {\n    tagName: String,\n    properties: VProperties\n    children: Array<VTree>,\n    key: String | undefined,\n    namespace: String | null\n}\n\n--  A VText is a data structure representing a text node in\n--      a virtual tree.\ntype VText : {\n    text: String,\n    type: \"VirtualText\"\n}\n\n--  A Widget is a custom data structure for representing an\n--      object in a virtual tree.\n--\n--  A Widget allows you to fully specify the semantics of\n--      intitialization of the object, updating of the object\n--      and destruction of the object.\n--\n--  A Widget should generally be used for custom, performance\n--      critical code.\ntype Widget : {\n    type: \"Widget\",\n    init: () => DOMElement,\n    update: (previous: Widget, domNode: DOMElement) => void,\n    destroy: (node: DOMElement) => void\n}\n\n--  A Thunk is a custom data structure for representing an\n--      unevaluated node in a virtual tree.\n--\n--  A Thunk allows you to overwrite the semantics of `diff()`\n--      by implementing your own render method that takes the\n--      previous node in the previous virtual tree.\n--\n--  Inside `render()` you can check whether the previous node\n--      is conceptually the same as the current node and return\n--      `previous.vnode` instead of re-computing and recreating\n--      an equivelant vnode.\n--\n--  This allows you to implement caching in the virtual tree\n--      and has significant performance improvements\ntype Thunk : {\n    type: \"Thunk\",\n    vnode: VTree,\n    render: (previous: VTree | null) => VTree\n}\n\n--  A VTree is the union of all the types of nodes that can\n--      exist in a virtual tree.\ntype VTree : VText | VNode | Widget | Thunk\n\n--  A VPatch represents a patch object that is returned from\n--      `diff()`. This patch object can be applied to an\n--      existing DOM element tree.\ntype VPatch := {\n    type: Number,\n    vNode: VNode,\n    patch: Any,\n    type: 'VirtualPatch'\n}\n\nvirtual-dom/create-element : (vnode: VTree, opts: {\n    document?: DOMDocument,\n    warn?: Boolean\n}) => DOMElement | DOMTextNode\n\nvirtual-dom/diff : (left: VTree, right: VTree) => Array<VPatch>\n\nvirtual-dom/h : (\n    tagSelector: String,\n    properties?: {\n        key: String,\n        namespace: String\n    } & VProperties,\n    children?: Array<VTree> | Vtree | textContent: String\n) => VNode\n\nvirtual-dom/patch : (\n    rootNode: DOMElement,\n    patches: Array<VPatch>\n) => newRootNode: DOMElement\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "h.js",
          "type": "blob",
          "size": 0.068359375,
          "content": "var h = require(\"./virtual-hyperscript/index.js\")\n\nmodule.exports = h\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.34375,
          "content": "var diff = require(\"./diff.js\")\r\nvar patch = require(\"./patch.js\")\r\nvar h = require(\"./h.js\")\r\nvar create = require(\"./create-element.js\")\r\nvar VNode = require('./vnode/vnode.js')\r\nvar VText = require('./vnode/vtext.js')\r\n\r\nmodule.exports = {\r\n    diff: diff,\r\n    patch: patch,\r\n    h: h,\r\n    create: create,\r\n    VNode: VNode,\r\n    VText: VText\r\n}\r\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.38671875,
          "content": "{\n  \"name\": \"virtual-dom\",\n  \"version\": \"2.1.1\",\n  \"description\": \"A batched diff-based DOM rendering strategy\",\n  \"keywords\": [\n    \"virtual\",\n    \"dom\",\n    \"vdom\",\n    \"vtree\",\n    \"diff\",\n    \"patch\",\n    \"browser\"\n  ],\n  \"author\": \"Matt-Esch <matt@mattesch.info>\",\n  \"repository\": \"git://github.com/Matt-Esch/virtual-dom.git\",\n  \"main\": \"index\",\n  \"homepage\": \"https://github.com/Matt-Esch/virtual-dom\",\n  \"contributors\": [\n    {\n      \"name\": \"Matt-Esch\"\n    }\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/Matt-Esch/virtual-dom/issues\",\n    \"email\": \"matt@mattesch.info\"\n  },\n  \"dependencies\": {\n    \"browser-split\": \"0.0.1\",\n    \"error\": \"^4.3.0\",\n    \"ev-store\": \"^7.0.0\",\n    \"global\": \"^4.3.0\",\n    \"is-object\": \"^1.0.1\",\n    \"next-tick\": \"^0.2.2\",\n    \"x-is-array\": \"0.1.0\",\n    \"x-is-string\": \"0.1.0\"\n  },\n  \"devDependencies\": {\n    \"browserify\": \"^9.0.7\",\n    \"istanbul\": \"^0.3.13\",\n    \"min-document\": \"^2.14.0\",\n    \"opn\": \"^1.0.1\",\n    \"run-browser\": \"^2.0.2\",\n    \"tap-dot\": \"^1.0.0\",\n    \"tap-spec\": \"^3.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"zuul\": \"^2.1.1\"\n  },\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"test\": \"node ./test/index.js | tap-spec\",\n    \"dot\": \"node ./test/index.js | tap-dot\",\n    \"start\": \"node ./index.js\",\n    \"cover\": \"istanbul cover --report html --print detail ./test/index.js\",\n    \"view-cover\": \"istanbul report html && opn ./coverage/index.html\",\n    \"browser\": \"run-browser test/index.js\",\n    \"phantom\": \"run-browser test/index.js -b | tap-spec\",\n    \"dist\": \"browserify --standalone virtual-dom index.js > dist/virtual-dom.js\",\n    \"travis-test\": \"npm run phantom && npm run cover && istanbul report lcov && ((cat coverage/lcov.info | coveralls) || exit 0)\",\n    \"release\": \"npm run release-patch\",\n    \"release-patch\": \"git checkout master && npm version patch && git push origin master --tags && npm publish\",\n    \"release-minor\": \"git checkout master && npm version minor && git push origin master --tags && npm publish\",\n    \"release-major\": \"git checkout master && npm version major && git push origin master --tags && npm publish\"\n  },\n  \"testling\": {\n    \"files\": \"test/*.js\",\n    \"browsers\": [\n      \"ie/8..latest\",\n      \"firefox/17..latest\",\n      \"firefox/nightly\",\n      \"chrome/22..latest\",\n      \"chrome/canary\",\n      \"opera/12..latest\",\n      \"opera/next\",\n      \"safari/5.1..latest\",\n      \"ipad/6.0..latest\",\n      \"iphone/6.0..latest\",\n      \"android-browser/4.2..latest\"\n    ]\n  }\n}\n"
        },
        {
          "name": "patch.js",
          "type": "blob",
          "size": 0.0615234375,
          "content": "var patch = require(\"./vdom/patch.js\")\n\nmodule.exports = patch\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "vdom",
          "type": "tree",
          "content": null
        },
        {
          "name": "virtual-hyperscript",
          "type": "tree",
          "content": null
        },
        {
          "name": "vnode",
          "type": "tree",
          "content": null
        },
        {
          "name": "vtree",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}